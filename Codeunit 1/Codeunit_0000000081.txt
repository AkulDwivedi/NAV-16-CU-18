OBJECT Codeunit 81 Sales-Post (Yes/No)
{
  OBJECT-PROPERTIES
  {
    Date=03-08-16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.46621,NAVIN9.00.00.46621;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=BEGIN
            IF NOT FIND THEN
              ERROR(NothingToPostErr);

            SalesHeader.COPY(Rec);
            Code;
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice;ENN=&Ship,&Invoice,Ship &and Invoice';
      Text001@1001 : TextConst 'ENU=Do you want to post the %1?;ENN=Do you want to post the %1?';
      Text002@1002 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice;ENN=&Receive,&Invoice,Receive &and Invoice';
      SalesHeader@1003 : Record 36;
      Selection@1005 : Integer;
      Text13700@1280003 : TextConst 'ENU=You have to attach transit document for this invoice.;ENN=You have to attach transit document for this invoice.';
      Text13701@1280002 : TextConst 'ENU=Transit document(s) are not required  for this invoice.;ENN=Transit document(s) are not required  for this invoice.';
      PreviewMode@1004 : Boolean;
      NothingToPostErr@1006 : TextConst 'ENU=There is nothing to post.;ENN=There is nothing to post.';

    [TryFunction]
    LOCAL PROCEDURE Code@1();
    VAR
      SalesSetup@1002 : Record 311;
      SalesPostViaJobQueue@1000 : Codeunit 88;
      SalesPost@1001 : Codeunit 80;
    BEGIN
      CheckTransDocDetails(SalesHeader);
      WITH SalesHeader DO
        IF NOT PreviewMode THEN BEGIN
          CASE "Document Type" OF
            "Document Type"::Order:
              BEGIN
                Selection := STRMENU(Text000,3);
                IF Selection = 0 THEN
                  EXIT;
                Ship := Selection IN [1,3];
                Invoice := Selection IN [2,3];
              END;
            "Document Type"::"Return Order":
              BEGIN
                Selection := STRMENU(Text002,3);
                IF Selection = 0 THEN
                  EXIT;
                Receive := Selection IN [1,3];
                Invoice := Selection IN [2,3];
              END
            ELSE
              IF NOT
                 CONFIRM(
                   Text001,FALSE,
                   "Document Type")
              THEN
                EXIT;
          END;
          "Print Posted Documents" := FALSE;

          SalesSetup.GET;
          IF SalesSetup."Post with Job Queue" THEN
            SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
          ELSE
            CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
        END ELSE BEGIN
          CASE "Document Type" OF
            "Document Type"::Order:
              Ship := TRUE;
            "Document Type"::"Return Order":
              Receive := TRUE;
          END;
          Invoice := TRUE;
          SalesPost.SetPreviewMode(TRUE);
          SalesPost.RUN(SalesHeader);
        END;
    END;

    PROCEDURE CheckTransDocDetails@1500000(VAR SalesHeader2@1500001 : Record 36);
    VAR
      TransDocDetails@1500000 : Record 13768;
    BEGIN
      WITH SalesHeader2 DO
        IF "Form Code" <> '' THEN BEGIN
          TransDocDetails.SETRANGE(Type,TransDocDetails.Type::Sale);
          TransDocDetails.SETRANGE("PO / SO No.","No.");
          IF "Transit Document" AND TransDocDetails.ISEMPTY THEN
            ERROR(Text13700);
          IF NOT "Transit Document" AND NOT TransDocDetails.ISEMPTY THEN
            ERROR(Text13701);
        END;
    END;

    PROCEDURE Preview@2(VAR SalesHdr@1000 : Record 36);
    VAR
      GenJnlPostPreview@1001 : Codeunit 19;
    BEGIN
      GenJnlPostPreview.Start;
      PreviewMode := TRUE;
      SalesHeader.COPY(SalesHdr);
      IF NOT Code THEN BEGIN
        GenJnlPostPreview.Finish;
        IF GETLASTERRORTEXT <> GenJnlPostPreview.GetPreviewModeErrMessage THEN
          ERROR(GETLASTERRORTEXT);
        GenJnlPostPreview.ShowAllEntries;
        ERROR('');
      END;
    END;

    BEGIN
    END.
  }
}

