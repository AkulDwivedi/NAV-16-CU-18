OBJECT Codeunit 5802 Inventory Posting To G/L
{
  OBJECT-PROPERTIES
  {
    Date=03-08-16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.46621,NAVIN9.00.00.46621;
  }
  PROPERTIES
  {
    TableNo=5802;
    Permissions=TableData 48=rimd,
                TableData 5802=r,
                TableData 5823=rimd;
    OnRun=VAR
            GenJnlLine@1000 : Record 81;
          BEGIN
            IF GlobalPostPerPostGroup THEN
              PostInvtPostBuf(Rec,"Document No.",'','',TRUE)
            ELSE
              PostInvtPostBuf(
                Rec,
                "Document No.",
                "External Document No.",
                COPYSTR(
                  STRSUBSTNO(Text000,"Entry Type","Source No.","Posting Date"),
                  1,MAXSTRLEN(GenJnlLine.Description)),
                FALSE);
          END;

  }
  CODE
  {
    VAR
      GLSetup@1009 : Record 98;
      InvtSetup@1008 : Record 313;
      Currency@1007 : Record 4;
      SourceCodeSetup@1006 : Record 242;
      GlobalInvtPostBuf@1005 : TEMPORARY Record 48;
      TempInvtPostBuf@1029 : ARRAY [4] OF TEMPORARY Record 48;
      TempInvtPostToGLTestBuf@1014 : TEMPORARY Record 5822;
      TempGLItemLedgRelation@1026 : TEMPORARY Record 5823;
      GenJnlPostLine@1002 : Codeunit 12;
      GenJnlCheckLine@1004 : Codeunit 11;
      DimBufMgt@1001 : Codeunit 411;
      DimMgt@1019 : Codeunit 408;
      COGSAmt@1048 : Decimal;
      InvtAdjmtAmt@1047 : Decimal;
      DirCostAmt@1046 : Decimal;
      OvhdCostAmt@1045 : Decimal;
      VarPurchCostAmt@1044 : Decimal;
      VarMfgDirCostAmt@1049 : Decimal;
      VarMfgOvhdCostAmt@1039 : Decimal;
      WIPInvtAmt@1038 : Decimal;
      InvtAmt@1037 : Decimal;
      TotalCOGSAmt@1036 : Decimal;
      TotalInvtAdjmtAmt@1035 : Decimal;
      TotalDirCostAmt@1034 : Decimal;
      TotalOvhdCostAmt@1033 : Decimal;
      TotalVarPurchCostAmt@1032 : Decimal;
      TotalVarMfgDirCostAmt@1040 : Decimal;
      TotalVarMfgOvhdCostAmt@1017 : Decimal;
      TotalWIPInvtAmt@1016 : Decimal;
      TotalInvtAmt@1015 : Decimal;
      GlobalInvtPostBufEntryNo@1025 : Integer;
      PostBufDimNo@1030 : Integer;
      GLSetupRead@1012 : Boolean;
      SourceCodeSetupRead@1011 : Boolean;
      InvtSetupRead@1010 : Boolean;
      Text000@1000 : TextConst 'ENU=%1 %2 on %3;ENN=%1 %2 on %3';
      Text001@1031 : TextConst 'ENU=%1 - %2, %3,%4,%5,%6;ENN=%1 - %2, %3,%4,%5,%6';
      Text002@1018 : TextConst 'ENU="The following combination %1 = %2, %3 = %4, and %5 = %6 is not allowed.";ENN="The following combination %1 = %2, %3 = %4, and %5 = %6 is not allowed."';
      RunOnlyCheck@1003 : Boolean;
      RunOnlyCheckSaved@1022 : Boolean;
      CalledFromItemPosting@1021 : Boolean;
      CalledFromTestReport@1013 : Boolean;
      GlobalPostPerPostGroup@1023 : Boolean;
      Text003@1020 : TextConst 'ENU=%1 %2;ENN=%1 %2';
      Text13700@1500003 : TextConst 'ENU=Transfer - %1;ENN=Transfer - %1';
      Text16502@1500000 : TextConst 'ENU=E.C.C. No must not be blank.;ENN=E.C.C. No must not be blank.';
      TaxJnlLine@1500001 : Record 16587;
      ExcisePostingSetup@1500002 : Record 13711;
      Text16503@1500004 : TextConst 'ENU=This posting exceeds the available quantity for item no. %1 in the RG 23 D register, which is %2. You must reduce the quantity in the %3 field.;ENN=This posting exceeds the available quantity for item no. %1 in the RG 23 D register, which is %2. You must reduce the quantity in the %3 field.';

    PROCEDURE Initialize@31(PostPerPostGroup@1002 : Boolean);
    BEGIN
      GlobalPostPerPostGroup := PostPerPostGroup;
      GlobalInvtPostBufEntryNo := 0;
    END;

    PROCEDURE SetRunOnlyCheck@17(SetCalledFromItemPosting@1002 : Boolean;SetCheckOnly@1000 : Boolean;SetCalledFromTestReport@1001 : Boolean);
    BEGIN
      CalledFromItemPosting := SetCalledFromItemPosting;
      RunOnlyCheck := SetCheckOnly;
      CalledFromTestReport := SetCalledFromTestReport;

      TempGLItemLedgRelation.RESET;
      TempGLItemLedgRelation.DELETEALL;
    END;

    PROCEDURE BufferInvtPosting@1(VAR ValueEntry@1000 : Record 5802) : Boolean;
    VAR
      CostToPost@1003 : Decimal;
      CostToPostACY@1004 : Decimal;
      ExpCostToPost@1001 : Decimal;
      ExpCostToPostACY@1002 : Decimal;
      PostToGL@1005 : Boolean;
    BEGIN
      WITH ValueEntry DO BEGIN
        GetGLSetup;
        GetInvtSetup;
        IF (NOT InvtSetup."Expected Cost Posting to G/L") AND
           ("Expected Cost Posted to G/L" = 0) AND
           "Expected Cost"
        THEN
          EXIT(FALSE);

        IF NOT ("Entry Type" IN ["Entry Type"::"Direct Cost","Entry Type"::Revaluation]) AND
           NOT CalledFromTestReport
        THEN BEGIN
          TESTFIELD("Expected Cost",FALSE);
          TESTFIELD("Cost Amount (Expected)",0);
          TESTFIELD("Cost Amount (Expected) (ACY)",0);
        END;

        IF InvtSetup."Expected Cost Posting to G/L" THEN BEGIN
          CalcCostToPost(ExpCostToPost,"Cost Amount (Expected)","Expected Cost Posted to G/L",PostToGL);
          CalcCostToPost(ExpCostToPostACY,"Cost Amount (Expected) (ACY)","Exp. Cost Posted to G/L (ACY)",PostToGL);
        END;
        CalcCostToPost(CostToPost,"Cost Amount (Actual)","Cost Posted to G/L",PostToGL);
        CalcCostToPost(CostToPostACY,"Cost Amount (Actual) (ACY)","Cost Posted to G/L (ACY)",PostToGL);
        PostBufDimNo := 0;

        RunOnlyCheckSaved := RunOnlyCheck;
        IF NOT PostToGL THEN
          EXIT(FALSE);

        CASE "Item Ledger Entry Type" OF
          "Item Ledger Entry Type"::Purchase:
            BufferPurchPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::Sale:
            BufferSalesPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::"Positive Adjmt.",
          "Item Ledger Entry Type"::"Negative Adjmt.",
          "Item Ledger Entry Type"::Transfer:
            BufferAdjmtPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::Consumption:
            BufferConsumpPosting(ValueEntry,CostToPost,CostToPostACY);
          "Item Ledger Entry Type"::Output:
            BufferOutputPosting(ValueEntry,CostToPost,CostToPostACY,ExpCostToPost,ExpCostToPostACY);
          "Item Ledger Entry Type"::"Assembly Consumption":
            BufferAsmConsumpPosting(ValueEntry,CostToPost,CostToPostACY);
          "Item Ledger Entry Type"::"Assembly Output":
            BufferAsmOutputPosting(ValueEntry,CostToPost,CostToPostACY);
          "Item Ledger Entry Type"::" ":
            BufferCapPosting(ValueEntry,CostToPost,CostToPostACY);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
      END;

      IF UpdateGlobalInvtPostBuf(ValueEntry."Entry No.") THEN
        EXIT(TRUE);
      EXIT(CalledFromTestReport);
    END;

    LOCAL PROCEDURE BufferPurchPosting@5(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            BEGIN
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"Invt. Accrual (Interim)",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::"Indirect Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Overhead Applied",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::Variance:
            BEGIN
              TESTFIELD("Variance Type","Variance Type"::Purchase);
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::Inventory,
                GlobalInvtPostBuf."Account Type"::"Purchase Variance",
                CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::Revaluation:
            BEGIN
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"Invt. Accrual (Interim)",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE BufferSalesPosting@6(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            BEGIN
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::COGS,
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::Revaluation:
            BEGIN
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE BufferOutputPosting@9(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            BEGIN
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::"Indirect Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Overhead Applied",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::Variance:
            CASE "Variance Type" OF
              "Variance Type"::Material:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Material Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::Capacity:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Capacity Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::Subcontracted:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Subcontracted Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::"Capacity Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Cap. Overhead Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::"Manufacturing Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Mfg. Overhead Variance",
                  CostToPost,CostToPostACY,FALSE);
              ELSE
                ErrorNonValidCombination(ValueEntry);
            END;
          "Entry Type"::Revaluation:
            BEGIN
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE BufferConsumpPosting@34(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"WIP Inventory",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::Revaluation,
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE BufferCapPosting@16(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      WITH ValueEntry DO BEGIN
        IF "Order Type" = "Order Type"::Assembly THEN
          CASE "Entry Type" OF
            "Entry Type"::"Direct Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                CostToPost,CostToPostACY,FALSE);
            "Entry Type"::"Indirect Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                CostToPost,CostToPostACY,FALSE);
            ELSE
              ErrorNonValidCombination(ValueEntry);
          END
        ELSE
          CASE "Entry Type" OF
            "Entry Type"::"Direct Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                GlobalInvtPostBuf."Account Type"::"Direct Cost Applied",
                CostToPost,CostToPostACY,FALSE);
            "Entry Type"::"Indirect Cost":
              InitInvtPostBuf(
                ValueEntry,
                GlobalInvtPostBuf."Account Type"::"WIP Inventory",
                GlobalInvtPostBuf."Account Type"::"Overhead Applied",
                CostToPost,CostToPostACY,FALSE);
            ELSE
              ErrorNonValidCombination(ValueEntry);
          END;
      END;
    END;

    LOCAL PROCEDURE BufferAsmOutputPosting@36(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::"Indirect Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Overhead Applied",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::Variance:
            CASE "Variance Type" OF
              "Variance Type"::Material:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Material Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::Capacity:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Capacity Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::Subcontracted:
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Subcontracted Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::"Capacity Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Cap. Overhead Variance",
                  CostToPost,CostToPostACY,FALSE);
              "Variance Type"::"Manufacturing Overhead":
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Mfg. Overhead Variance",
                  CostToPost,CostToPostACY,FALSE);
              ELSE
                ErrorNonValidCombination(ValueEntry);
            END;
          "Entry Type"::Revaluation:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE BufferAsmConsumpPosting@38(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          "Entry Type"::Revaluation,
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE BufferAdjmtPosting@39(ValueEntry@1000 : Record 5802;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;ExpCostToPost@1002 : Decimal;ExpCostToPostACY@1001 : Decimal);
    BEGIN
      WITH ValueEntry DO
        CASE "Entry Type" OF
          "Entry Type"::"Direct Cost":
            BEGIN
              // Posting adjustments to Interim accounts (Service)
              IF (ExpCostToPost <> 0) OR (ExpCostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::"Inventory (Interim)",
                  GlobalInvtPostBuf."Account Type"::"COGS (Interim)",
                  ExpCostToPost,ExpCostToPostACY,TRUE);
              IF (CostToPost <> 0) OR (CostToPostACY <> 0) THEN
                InitInvtPostBuf(
                  ValueEntry,
                  GlobalInvtPostBuf."Account Type"::Inventory,
                  GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
                  CostToPost,CostToPostACY,FALSE);
            END;
          "Entry Type"::Revaluation,
          "Entry Type"::Rounding:
            InitInvtPostBuf(
              ValueEntry,
              GlobalInvtPostBuf."Account Type"::Inventory,
              GlobalInvtPostBuf."Account Type"::"Inventory Adjmt.",
              CostToPost,CostToPostACY,FALSE);
          ELSE
            ErrorNonValidCombination(ValueEntry);
        END;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        IF GLSetup."Additional Reporting Currency" <> '' THEN
          Currency.GET(GLSetup."Additional Reporting Currency");
      END;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetInvtSetup@4();
    BEGIN
      IF NOT InvtSetupRead THEN
        InvtSetup.GET;
      InvtSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CalcCostToPost@8(VAR CostToPost@1000 : Decimal;AdjdCost@1001 : Decimal;VAR PostedCost@1002 : Decimal;VAR PostToGL@1005 : Boolean);
    BEGIN
      CostToPost := AdjdCost - PostedCost;

      IF CostToPost <> 0 THEN BEGIN
        IF NOT RunOnlyCheck THEN
          PostedCost := AdjdCost;
        PostToGL := TRUE;
      END;
    END;

    LOCAL PROCEDURE InitInvtPostBuf@10(ValueEntry@1000 : Record 5802;AccType@1001 : Option;BalAccType@1002 : Option;CostToPost@1004 : Decimal;CostToPostACY@1003 : Decimal;InterimAccount@1007 : Boolean);
    BEGIN
      PostBufDimNo := PostBufDimNo + 1;
      SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,AccType,BalAccType);
      SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],CostToPost,CostToPostACY,InterimAccount);
      TempInvtPostBuf[PostBufDimNo]."Job No." := ValueEntry."Job No.";
      TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";

      PostBufDimNo := PostBufDimNo + 1;
      SetAccNo(TempInvtPostBuf[PostBufDimNo],ValueEntry,BalAccType,AccType);
      SetPostBufAmounts(TempInvtPostBuf[PostBufDimNo],-CostToPost,-CostToPostACY,InterimAccount);
      TempInvtPostBuf[PostBufDimNo]."Job No." := ValueEntry."Job No.";
      TempInvtPostBuf[PostBufDimNo]."Dimension Set ID" := ValueEntry."Dimension Set ID";
    END;

    LOCAL PROCEDURE SetAccNo@18(VAR InvtPostBuf@1001 : Record 48;ValueEntry@1006 : Record 5802;AccType@1005 : Option;BalAccType@1000 : Option);
    VAR
      InvtPostSetup@1003 : Record 5813;
      GenPostingSetup@1004 : Record 252;
      GLAccount@1002 : Record 15;
    BEGIN
      WITH InvtPostBuf DO BEGIN
        "Account No." := '';
        "Account Type" := AccType;
        "Bal. Account Type" := BalAccType;
        "Location Code" := ValueEntry."Location Code";
        "Inventory Posting Group" :=
          GetInvPostingGroupCode(ValueEntry,AccType = "Account Type"::"WIP Inventory",ValueEntry."Inventory Posting Group");
        "Gen. Bus. Posting Group" := ValueEntry."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := ValueEntry."Gen. Prod. Posting Group";
        "Posting Date" := ValueEntry."Posting Date";

        IF UseInvtPostSetup THEN BEGIN
          IF CalledFromItemPosting THEN
            InvtPostSetup.GET("Location Code","Inventory Posting Group")
          ELSE
            IF NOT InvtPostSetup.GET("Location Code","Inventory Posting Group") THEN
              EXIT;
        END ELSE BEGIN
          IF CalledFromItemPosting THEN
            GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group")
          ELSE
            IF NOT GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") THEN
              EXIT;
        END;

        CASE "Account Type" OF
          "Account Type"::Inventory:
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Inventory Account");
              "Account No." := InvtPostSetup."Inventory Account";
            END;
          "Account Type"::"Inventory (Interim)":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Inventory Account (Interim)");
              "Account No." := InvtPostSetup."Inventory Account (Interim)";
            END;
          "Account Type"::"WIP Inventory":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("WIP Account");
              "Account No." := InvtPostSetup."WIP Account";
            END;
          "Account Type"::"Material Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Material Variance Account");
              "Account No." := InvtPostSetup."Material Variance Account";
            END;
          "Account Type"::"Capacity Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Capacity Variance Account");
              "Account No." := InvtPostSetup."Capacity Variance Account";
            END;
          "Account Type"::"Subcontracted Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Subcontracted Variance Account");
              "Account No." := InvtPostSetup."Subcontracted Variance Account";
            END;
          "Account Type"::"Cap. Overhead Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Cap. Overhead Variance Account");
              "Account No." := InvtPostSetup."Cap. Overhead Variance Account";
            END;
          "Account Type"::"Mfg. Overhead Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                InvtPostSetup.TESTFIELD("Mfg. Overhead Variance Account");
              "Account No." := InvtPostSetup."Mfg. Overhead Variance Account";
            END;
          "Account Type"::"Inventory Adjmt.":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Inventory Adjmt. Account");
              "Account No." := GenPostingSetup."Inventory Adjmt. Account";
            END;
          "Account Type"::"Direct Cost Applied":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Direct Cost Applied Account");
              "Account No." := GenPostingSetup."Direct Cost Applied Account";
            END;
          "Account Type"::"Overhead Applied":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Overhead Applied Account");
              "Account No." := GenPostingSetup."Overhead Applied Account";
            END;
          "Account Type"::"Purchase Variance":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Purchase Variance Account");
              "Account No." := GenPostingSetup."Purchase Variance Account";
            END;
          "Account Type"::COGS:
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("COGS Account");
              "Account No." := GenPostingSetup."COGS Account";
            END;
          "Account Type"::"COGS (Interim)":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("COGS Account (Interim)");
              "Account No." := GenPostingSetup."COGS Account (Interim)";
            END;
          "Account Type"::"Invt. Accrual (Interim)":
            BEGIN
              IF CalledFromItemPosting THEN
                GenPostingSetup.TESTFIELD("Invt. Accrual Acc. (Interim)");
              "Account No." := GenPostingSetup."Invt. Accrual Acc. (Interim)";
            END;
        END;
        IF "Account No." <> '' THEN BEGIN
          GLAccount.GET("Account No.");
          IF GLAccount.Blocked THEN BEGIN
            IF CalledFromItemPosting THEN
              GLAccount.TESTFIELD(Blocked,FALSE);
            IF NOT CalledFromTestReport THEN
              "Account No." := '';
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE SetPostBufAmounts@30(VAR InvtPostBuf@1004 : Record 48;CostToPost@1000 : Decimal;CostToPostACY@1001 : Decimal;InterimAccount@1003 : Boolean);
    BEGIN
      WITH InvtPostBuf DO BEGIN
        "Interim Account" := InterimAccount;
        Amount := CostToPost;
        "Amount (ACY)" := CostToPostACY;
      END;
    END;

    LOCAL PROCEDURE UpdateGlobalInvtPostBuf@28(ValueEntryNo@1002 : Integer) : Boolean;
    VAR
      i@1000 : Integer;
    BEGIN
      WITH GlobalInvtPostBuf DO BEGIN
        IF NOT CalledFromTestReport THEN
          FOR i := 1 TO PostBufDimNo DO BEGIN
            IF TempInvtPostBuf[i]."Account No." = '' THEN BEGIN
              CLEAR(TempInvtPostBuf);
              EXIT(FALSE);
            END;
          END;
        FOR i := 1 TO PostBufDimNo DO BEGIN
          GlobalInvtPostBuf := TempInvtPostBuf[i];
          "Dimension Set ID" := TempInvtPostBuf[i]."Dimension Set ID";
          Negative := (TempInvtPostBuf[i].Amount < 0) OR (TempInvtPostBuf[i]."Amount (ACY)" < 0);

          UpdateReportAmounts;
          IF FIND THEN BEGIN
            Amount := Amount + TempInvtPostBuf[i].Amount;
            "Amount (ACY)" := "Amount (ACY)" + TempInvtPostBuf[i]."Amount (ACY)";
            MODIFY;
          END ELSE BEGIN
            GlobalInvtPostBufEntryNo := GlobalInvtPostBufEntryNo + 1;
            "Entry No." := GlobalInvtPostBufEntryNo;
            INSERT;
          END;

          IF NOT (RunOnlyCheck OR CalledFromTestReport) THEN BEGIN
            TempGLItemLedgRelation.INIT;
            TempGLItemLedgRelation."G/L Entry No." := "Entry No.";
            TempGLItemLedgRelation."Value Entry No." := ValueEntryNo;
            TempGLItemLedgRelation.INSERT;
          END;
        END;
      END;
      CLEAR(TempInvtPostBuf);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateReportAmounts@24();
    BEGIN
      WITH GlobalInvtPostBuf DO
        CASE "Account Type" OF
          "Account Type"::Inventory,"Account Type"::"Inventory (Interim)":
            InvtAmt += Amount;
          "Account Type"::"WIP Inventory":
            WIPInvtAmt += Amount;
          "Account Type"::"Inventory Adjmt.":
            InvtAdjmtAmt += Amount;
          "Account Type"::"Invt. Accrual (Interim)":
            InvtAdjmtAmt += Amount;
          "Account Type"::"Direct Cost Applied":
            DirCostAmt += Amount;
          "Account Type"::"Overhead Applied":
            OvhdCostAmt += Amount;
          "Account Type"::"Purchase Variance":
            VarPurchCostAmt += Amount;
          "Account Type"::COGS:
            COGSAmt += Amount;
          "Account Type"::"COGS (Interim)":
            COGSAmt += Amount;
          "Account Type"::"Material Variance","Account Type"::"Capacity Variance",
          "Account Type"::"Subcontracted Variance","Account Type"::"Cap. Overhead Variance":
            VarMfgDirCostAmt += Amount;
          "Account Type"::"Mfg. Overhead Variance":
            VarMfgOvhdCostAmt += Amount;
        END;
    END;

    LOCAL PROCEDURE ErrorNonValidCombination@2(ValueEntry@1000 : Record 5802);
    BEGIN
      WITH ValueEntry DO
        IF CalledFromTestReport THEN
          InsertTempInvtPostToGLTestBuf2(ValueEntry)
        ELSE
          ERROR(
            Text002,
            FIELDCAPTION("Item Ledger Entry Type"),"Item Ledger Entry Type",
            FIELDCAPTION("Entry Type"),"Entry Type",
            FIELDCAPTION("Expected Cost"),"Expected Cost")
    END;

    LOCAL PROCEDURE InsertTempInvtPostToGLTestBuf2@23(ValueEntry@1000 : Record 5802);
    BEGIN
      WITH ValueEntry DO BEGIN
        TempInvtPostToGLTestBuf."Line No." := GetNextLineNo;
        TempInvtPostToGLTestBuf."Posting Date" := "Posting Date";
        TempInvtPostToGLTestBuf.Description := STRSUBSTNO(Text003,TABLECAPTION,"Entry No.");
        TempInvtPostToGLTestBuf.Amount := "Cost Amount (Actual)";
        TempInvtPostToGLTestBuf."Value Entry No." := "Entry No.";
        TempInvtPostToGLTestBuf."Dimension Set ID" := "Dimension Set ID";
        TempInvtPostToGLTestBuf.INSERT;
      END;
    END;

    LOCAL PROCEDURE GetNextLineNo@26() : Integer;
    BEGIN
      IF TempInvtPostToGLTestBuf.FINDLAST THEN
        EXIT(TempInvtPostToGLTestBuf."Line No." + 10000);

      EXIT(10000);
    END;

    PROCEDURE PostInvtPostBufPerEntry@20(VAR ValueEntry@1001 : Record 5802);
    VAR
      GenJnlLine@1002 : Record 81;
    BEGIN
      WITH ValueEntry DO
        PostInvtPostBuf(
          ValueEntry,
          "Document No.",
          "External Document No.",
          COPYSTR(
            STRSUBSTNO(Text000,"Entry Type","Source No.","Posting Date"),
            1,MAXSTRLEN(GenJnlLine.Description)),
          FALSE);
    END;

    PROCEDURE PostInvtPostBufPerPostGrp@19(DocNo@1001 : Code[20];Desc@1000 : Text[50]);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      PostInvtPostBuf(ValueEntry,DocNo,'',Desc,TRUE);
    END;

    LOCAL PROCEDURE PostInvtPostBuf@3(VAR ValueEntry@1008 : Record 5802;DocNo@1002 : Code[20];ExternalDocNo@1007 : Code[35];Desc@1003 : Text[50];PostPerPostGrp@1001 : Boolean);
    VAR
      GenJnlLine@1004 : Record 81;
    BEGIN
      WITH GlobalInvtPostBuf DO BEGIN
        RESET;
        IF NOT FINDSET THEN
          EXIT;

        GenJnlLine.INIT;
        GenJnlLine."Document No." := DocNo;
        GenJnlLine."External Document No." := ExternalDocNo;
        GenJnlLine.Description := Desc;
        GetSourceCodeSetup;
        GenJnlLine."Source Code" := SourceCodeSetup."Inventory Post Cost";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Job No." := "Job No.";
        GenJnlLine."Reason Code" := ValueEntry."Reason Code";
        REPEAT
          GenJnlLine.VALIDATE("Posting Date","Posting Date");
          IF SetAmt(GenJnlLine,Amount,"Amount (ACY)") THEN BEGIN
            IF PostPerPostGrp THEN
              SetDesc(GenJnlLine,GlobalInvtPostBuf);
            GenJnlLine."Account No." := "Account No.";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            DimMgt.UpdateGlobalDimFromDimSetID(
              "Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
              GenJnlLine."Shortcut Dimension 2 Code");
            IF NOT CalledFromTestReport THEN
              IF NOT RunOnlyCheck THEN BEGIN
                IF NOT CalledFromItemPosting THEN
                  GenJnlPostLine.SetOverDimErr;
                GenJnlPostLine.RunWithCheck(GenJnlLine);
                IF NOT PostPerPostGrp THEN
                  PostTransferProfit(ValueEntry,DocNo,GenJnlLine.Description,"Dimension Entry No.");
              END ELSE
                GenJnlCheckLine.RunCheck(GenJnlLine)
            ELSE
              InsertTempInvtPostToGLTestBuf(GenJnlLine,ValueEntry);
          END;
          IF NOT CalledFromTestReport AND NOT RunOnlyCheck THEN
            CreateGLItemLedgRelation(ValueEntry);
        UNTIL NEXT = 0;
        RunOnlyCheck := RunOnlyCheckSaved;
        DELETEALL;
      END;
    END;

    LOCAL PROCEDURE GetSourceCodeSetup@15();
    BEGIN
      IF NOT SourceCodeSetupRead THEN
        SourceCodeSetup.GET;
      SourceCodeSetupRead := TRUE;
    END;

    LOCAL PROCEDURE SetAmt@22(VAR GenJnlLine@1000 : Record 81;Amt@1001 : Decimal;AmtACY@1002 : Decimal) : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        "Additional-Currency Posting" := "Additional-Currency Posting"::None;
        VALIDATE(Amount,Amt);

        GetGLSetup;
        IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
          "Source Currency Code" := GLSetup."Additional Reporting Currency";
          "Source Currency Amount" := AmtACY;
          IF (Amount = 0) AND ("Source Currency Amount" <> 0) THEN BEGIN
            "Additional-Currency Posting" :=
              "Additional-Currency Posting"::"Additional-Currency Amount Only";
            VALIDATE(Amount,"Source Currency Amount");
            "Source Currency Amount" := 0;
          END;
        END;
      END;

      EXIT((Amt <> 0) OR (AmtACY <> 0));
    END;

    PROCEDURE SetDesc@27(VAR GenJnlLine@1006 : Record 81;InvtPostBuf@1004 : Record 48);
    BEGIN
      WITH InvtPostBuf DO
        GenJnlLine.Description :=
          COPYSTR(
            STRSUBSTNO(
              Text001,
              "Account Type","Bal. Account Type",
              "Location Code","Inventory Posting Group",
              "Gen. Bus. Posting Group","Gen. Prod. Posting Group"),
            1,MAXSTRLEN(GenJnlLine.Description));
    END;

    LOCAL PROCEDURE InsertTempInvtPostToGLTestBuf@25(GenJnlLine@1000 : Record 81;ValueEntry@1001 : Record 5802);
    BEGIN
      WITH GenJnlLine DO BEGIN
        TempInvtPostToGLTestBuf."Line No." := GetNextLineNo;
        TempInvtPostToGLTestBuf."Posting Date" := "Posting Date";
        TempInvtPostToGLTestBuf."Document No." := "Document No.";
        TempInvtPostToGLTestBuf.Description := Description;
        TempInvtPostToGLTestBuf."Account No." := "Account No.";
        TempInvtPostToGLTestBuf.Amount := Amount;
        TempInvtPostToGLTestBuf."Source Code" := "Source Code";
        TempInvtPostToGLTestBuf."System-Created Entry" := TRUE;
        TempInvtPostToGLTestBuf."Value Entry No." := ValueEntry."Entry No.";
        TempInvtPostToGLTestBuf."Additional-Currency Posting" := "Additional-Currency Posting";
        TempInvtPostToGLTestBuf."Source Currency Code" := "Source Currency Code";
        TempInvtPostToGLTestBuf."Source Currency Amount" := "Source Currency Amount";
        TempInvtPostToGLTestBuf."Inventory Account Type" := GlobalInvtPostBuf."Account Type";
        TempInvtPostToGLTestBuf."Dimension Set ID" := "Dimension Set ID";
        IF GlobalInvtPostBuf.UseInvtPostSetup THEN BEGIN
          TempInvtPostToGLTestBuf."Location Code" := GlobalInvtPostBuf."Location Code";
          TempInvtPostToGLTestBuf."Invt. Posting Group Code" :=
            GetInvPostingGroupCode(
              ValueEntry,
              TempInvtPostToGLTestBuf."Inventory Account Type" = TempInvtPostToGLTestBuf."Inventory Account Type"::"WIP Inventory",
              GlobalInvtPostBuf."Inventory Posting Group")
        END ELSE BEGIN
          TempInvtPostToGLTestBuf."Gen. Bus. Posting Group" := GlobalInvtPostBuf."Gen. Bus. Posting Group";
          TempInvtPostToGLTestBuf."Gen. Prod. Posting Group" := GlobalInvtPostBuf."Gen. Prod. Posting Group";
        END;
        TempInvtPostToGLTestBuf.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateGLItemLedgRelation@33(VAR ValueEntry@1000 : Record 5802);
    VAR
      GLReg@1001 : Record 45;
    BEGIN
      GenJnlPostLine.GetGLReg(GLReg);
      IF GlobalPostPerPostGroup THEN BEGIN
        TempGLItemLedgRelation.RESET;
        TempGLItemLedgRelation.SETRANGE("G/L Entry No.",GlobalInvtPostBuf."Entry No.");
        TempGLItemLedgRelation.FINDSET;
        REPEAT
          ValueEntry.GET(TempGLItemLedgRelation."Value Entry No.");
          UpdateValueEntry(ValueEntry);
          CreateGLItemLedgRelationEntry(GLReg);
        UNTIL TempGLItemLedgRelation.NEXT = 0;
      END ELSE BEGIN
        UpdateValueEntry(ValueEntry);
        CreateGLItemLedgRelationEntry(GLReg);
      END;
    END;

    LOCAL PROCEDURE CreateGLItemLedgRelationEntry@35(GLReg@1003 : Record 45);
    VAR
      GLItemLedgRelation@1002 : Record 5823;
    BEGIN
      GLItemLedgRelation.INIT;
      GLItemLedgRelation."G/L Entry No." := GLReg."To Entry No.";
      GLItemLedgRelation."Value Entry No." := TempGLItemLedgRelation."Value Entry No.";
      GLItemLedgRelation."G/L Register No." := GLReg."No.";
      GLItemLedgRelation.INSERT;
      TempGLItemLedgRelation."G/L Entry No." := GlobalInvtPostBuf."Entry No.";
      TempGLItemLedgRelation.DELETE;
    END;

    LOCAL PROCEDURE UpdateValueEntry@13(VAR ValueEntry@1000 : Record 5802);
    BEGIN
      WITH ValueEntry DO BEGIN
        IF GlobalInvtPostBuf."Interim Account" THEN BEGIN
          "Expected Cost Posted to G/L" := "Cost Amount (Expected)";
          "Exp. Cost Posted to G/L (ACY)" := "Cost Amount (Expected) (ACY)";
        END ELSE BEGIN
          "Cost Posted to G/L" := "Cost Amount (Actual)";
          "Cost Posted to G/L (ACY)" := "Cost Amount (Actual) (ACY)";
        END;
        IF NOT CalledFromItemPosting THEN
          MODIFY;
      END;
    END;

    PROCEDURE GetTempInvtPostToGLTestBuf@29(VAR InvtPostToGLTestBuf@1001 : Record 5822);
    BEGIN
      InvtPostToGLTestBuf.DELETEALL;
      IF NOT TempInvtPostToGLTestBuf.FINDSET THEN
        EXIT;

      REPEAT
        InvtPostToGLTestBuf := TempInvtPostToGLTestBuf;
        InvtPostToGLTestBuf.INSERT;
      UNTIL TempInvtPostToGLTestBuf.NEXT = 0;
    END;

    PROCEDURE GetAmtToPost@11(VAR NewCOGSAmt@1000 : Decimal;VAR NewInvtAdjmtAmt@1001 : Decimal;VAR NewDirCostAmt@1002 : Decimal;VAR NewOvhdCostAmt@1003 : Decimal;VAR NewVarPurchCostAmt@1004 : Decimal;VAR NewVarMfgDirCostAmt@1013 : Decimal;VAR NewVarMfgOvhdCostAmt@1008 : Decimal;VAR NewWIPInvtAmt@1009 : Decimal;VAR NewInvtAmt@1010 : Decimal;GetTotal@1007 : Boolean);
    BEGIN
      GetAmt(NewInvtAdjmtAmt,InvtAdjmtAmt,TotalInvtAdjmtAmt,GetTotal);
      GetAmt(NewDirCostAmt,DirCostAmt,TotalDirCostAmt,GetTotal);
      GetAmt(NewOvhdCostAmt,OvhdCostAmt,TotalOvhdCostAmt,GetTotal);
      GetAmt(NewVarPurchCostAmt,VarPurchCostAmt,TotalVarPurchCostAmt,GetTotal);
      GetAmt(NewVarMfgDirCostAmt,VarMfgDirCostAmt,TotalVarMfgDirCostAmt,GetTotal);
      GetAmt(NewVarMfgOvhdCostAmt,VarMfgOvhdCostAmt,TotalVarMfgOvhdCostAmt,GetTotal);
      GetAmt(NewWIPInvtAmt,WIPInvtAmt,TotalWIPInvtAmt,GetTotal);
      GetAmt(NewCOGSAmt,COGSAmt,TotalCOGSAmt,GetTotal);
      GetAmt(NewInvtAmt,InvtAmt,TotalInvtAmt,GetTotal);
    END;

    LOCAL PROCEDURE GetAmt@21(VAR NewAmt@1000 : Decimal;VAR Amt@1001 : Decimal;VAR TotalAmt@1002 : Decimal;GetTotal@1003 : Boolean);
    BEGIN
      IF GetTotal THEN
        NewAmt := TotalAmt
      ELSE BEGIN
        NewAmt := Amt;
        TotalAmt := TotalAmt + Amt;
        Amt := 0;
      END;
    END;

    PROCEDURE GetInvtPostBuf@7(VAR InvtPostBuf@1000 : Record 48);
    BEGIN
      InvtPostBuf.DELETEALL;

      GlobalInvtPostBuf.RESET;
      IF GlobalInvtPostBuf.FINDSET THEN
        REPEAT
          InvtPostBuf := GlobalInvtPostBuf;
          InvtPostBuf.INSERT;
        UNTIL GlobalInvtPostBuf.NEXT = 0;
    END;

    PROCEDURE GetDimBuf@12(DimEntryNo@1001 : Integer;VAR TempDimBuf@1000 : Record 360);
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
    END;

    LOCAL PROCEDURE GetInvPostingGroupCode@32(ValueEntry@1000 : Record 5802;WIPInventory@1001 : Boolean;InvPostingGroupCode@1002 : Code[10]) : Code[10];
    VAR
      Item@1003 : Record 27;
    BEGIN
      IF WIPInventory THEN
        IF ValueEntry."Source No." <> ValueEntry."Item No." THEN
          IF Item.GET(ValueEntry."Source No.") THEN
            EXIT(Item."Inventory Posting Group");

      EXIT(InvPostingGroupCode);
    END;

    PROCEDURE InitRG23DItemJnl@1500006(ItemJnlLine@1500000 : Record 83;VAR Transferred@1500003 : Boolean);
    VAR
      RG23D@1500001 : Record 16537;
      RG23D2@1500002 : Record 16537;
      DetailRG23D@1500005 : Record 16533;
      Location@1500006 : Record 14;
      CompanyInformation@1500004 : Record 79;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        IF "Applies-to Entry (RG 23 D)" = 0 THEN
          EXIT;
        IF NOT (("Entry Type" = "Entry Type"::Transfer) OR ("Entry Type" = "Entry Type"::"Negative Adjmt.")) THEN
          EXIT;
        RG23D2.RESET;
        RG23D2.SETRANGE("Transaction Type",RG23D2."Transaction Type"::Purchase);
        RG23D2.SETRANGE("Item No.","Item No.");
        RG23D2.SETRANGE("Entry No.","Applies-to Entry (RG 23 D)");
        IF RG23D2.FINDFIRST THEN BEGIN
          RG23D2.CALCFIELDS("Remaining Quantity");
          IF RG23D2."Remaining Quantity" = 0 THEN
            EXIT;
          IF RG23D2."Remaining Quantity" < "Quantity (Base)" THEN
            ERROR(Text16503,"Item No.",RG23D2."Remaining Quantity",FIELDCAPTION("Quantity (Base)"));
          IF ("Entry Type" = "Entry Type"::Transfer) THEN BEGIN
            Location.GET("New Location Code");
            IF Location."Trading Location" THEN
              EXIT;
          END;
          Location.GET("Location Code");
          IF NOT Location."Trading Location" THEN
            EXIT;
          RG23D."Entry No." := GetRG23DEntryNo;
          RG23D."Posting Date" := "Posting Date";
          RG23D."Document Type" := RG23D2."Document Type";
          RG23D."Document No." := "Document No.";
          RG23D."Item No." := "Item No.";
          RG23D."Line No." := "PO/SO Line No.";
          RG23D."Transaction Type" := RG23D."Transaction Type"::Sale;
          RG23D.Type := RG23D.Type::Transfer;
          RG23D."Location Code" := "Location Code";
          RG23D."Source Type" := RG23D."Source Type"::Item;
          RG23D."Source Code" := "Item No.";
          RG23D.Quantity := -1 * Quantity;
          RG23D."Excise Prod. Posting Group" := RG23D2."Excise Prod. Posting Group";
          RG23D."Excise Amt Per Unit" := -1 * RG23D2."Excise Amt Per Unit";
          RG23D."Unit of Measure" := RG23D2."Unit of Measure";
          RG23D.Amount := -1 * RG23D2."Excise Amt Per Unit" * Quantity;
          RG23D."BED Amount Per Unit" := -1 * RG23D2."BED Amount Per Unit";
          RG23D."eCess Amount Per Unit" := -1 * RG23D2."eCess Amount Per Unit";
          RG23D."SHE Cess Amount Per Unit" := -1 * RG23D2."SHE Cess Amount Per Unit";
          RG23D."AED(GSI) Amount Per Unit" := -1 * RG23D2."AED(GSI) Amount Per Unit";
          RG23D."SED Amount Per Unit" := -1 * RG23D2."SED Amount Per Unit";
          RG23D."SAED Amount Per Unit" := -1 * RG23D2."SAED Amount Per Unit";
          RG23D."CESS Amount Per Unit" := -1 * RG23D2."CESS Amount Per Unit";
          RG23D."NCCD Amount Per Unit" := -1 * RG23D2."NCCD Amount Per Unit";
          RG23D."ADET Amount Per Unit" := -1 * RG23D2."ADET Amount Per Unit";
          RG23D."AED(TTA) Amount Per Unit" := -1 * RG23D2."AED(TTA) Amount Per Unit";
          RG23D."ADE Amount Per Unit" := -1 * RG23D2."ADE Amount Per Unit";
          RG23D."ADC VAT Amount Per Unit" := -1 * RG23D2."ADC VAT Amount Per Unit";
          RG23D.CVD := RG23D2.CVD;
          RG23D."Line Amount Per Unit" := -1 * RG23D2."Line Amount Per Unit";
          RG23D.Year := DATE2DMY(RG23D."Posting Date",3);
          RG23D.Month := DATE2DMY(RG23D."Posting Date",2);
          RG23D."Excise Base Amt Per Unit" := -1 * RG23D2."Excise Base Amt Per Unit";
          RG23D."Order No." := RG23D2."Order No.";
          IF Location.GET("Location Code") THEN
            RG23D."E.C.C. No." := Location."E.C.C. No."
          ELSE BEGIN
            CompanyInformation.GET;
            RG23D."E.C.C. No." := CompanyInformation."E.C.C. No."
          END;
          RG23D."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          RG23D."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          RG23D."Dimension Set ID" := "Dimension Set ID";
          RG23D."Gen. Bus. Posting Group" := RG23D2."Gen. Bus. Posting Group";
          RG23D."Gen. Prod. Posting Group" := RG23D2."Gen. Prod. Posting Group";

          DetailRG23D.INIT;
          DetailRG23D."Entry No." := GetDetailRG23DEntryNo;
          DetailRG23D."Document Type" := RG23D2."Document Type";
          DetailRG23D."Order No." := RG23D2."Order No.";
          DetailRG23D."Line No." := "PO/SO Line No.";
          DetailRG23D.Quantity := -1 * Quantity;
          DetailRG23D."RG 23 D Entry No." := RG23D2."Entry No.";
          DetailRG23D."Transaction Type" := DetailRG23D."Transaction Type"::Sale;
          DetailRG23D."Document No." := RG23D2."Document No.";
          DetailRG23D.INSERT(TRUE);

          RG23D."Detail RG 23 D Entry No." := DetailRG23D."Entry No.";
          RG23D."Ref. Entry No." := RG23D2."Entry No.";
          RG23D."Vendor Invoice No." := RG23D2."Vendor Invoice No.";
          AdjustGLEntries(RG23D2,Quantity,ItemJnlLine);
          GetRGEntryNo(RG23D."Posting Date",4,RG23D."E.C.C. No.",RG23D."Document No.",RG23D."RG Entry No.");
          RG23D.INSERT(TRUE);
          IF ("Entry Type" = "Entry Type"::Transfer) THEN
            Transferred := TRUE;
          RG23D2.CALCFIELDS("Remaining Quantity");
          RG23D2.Closed := RG23D2."Remaining Quantity" = 0;
          RG23D2.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE AdjustGLEntries@1500008(RG23D@1500000 : Record 16537;Qty@1500006 : Decimal;ItemJnlLIne@1500007 : Record 83);
    VAR
      GLEntry@1500002 : Record 17;
      GLAccount@1500003 : Record 15;
      ExcisePostingSetup2@1500004 : Record 13711;
      GenPostingSetup@1500005 : Record 252;
      ExciseAmt@1500008 : Decimal;
      ExciseAmtADCVAT@1500001 : Decimal;
      Item@1500009 : Record 27;
      ExcisePostingSetup@1500010 : Record 13711;
    BEGIN
      WITH RG23D DO BEGIN
        IF Item.GET("Item No.") THEN;
        IF ItemJnlLIne."Entry Type" = ItemJnlLIne."Entry Type":: "Negative Adjmt." THEN
          GLSetup.GET;

        GLEntry.RESET;
        GLEntry.SETCURRENTKEY("Document No.","Posting Date");
        GLEntry.SETRANGE("Document No.","Document No.");
        IF GLEntry.FINDSET THEN
          REPEAT
            IF GLAccount.GET(GLEntry."G/L Account No.") THEN;
            ExcisePostingSetup.RESET;
            ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
            ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
            ExcisePostingSetup.SETRANGE("Cenvat Cr. Receivable(Trading)",GLEntry."G/L Account No.");
            IF ExcisePostingSetup.FINDLAST THEN
              GLAccount.MARK(TRUE);
            GenPostingSetup.RESET;
            GenPostingSetup.SETRANGE("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
            GenPostingSetup.SETRANGE("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
            GenPostingSetup.SETRANGE("Purch. Account (Trading)",GLEntry."G/L Account No.");
            IF GenPostingSetup.FINDFIRST THEN
              GLAccount.MARK(TRUE);
          UNTIL GLEntry.NEXT = 0;

          GLAccount.MARKEDONLY(TRUE);
          IF GLAccount.FINDSET THEN
            REPEAT
              IF ItemJnlLIne."Entry Type" = ItemJnlLIne."Entry Type":: Transfer THEN BEGIN
                GenPostingSetup.RESET;
                GenPostingSetup.SETRANGE("Gen. Bus. Posting Group","Gen. Bus. Posting Group");
                GenPostingSetup.SETRANGE("Gen. Prod. Posting Group","Gen. Prod. Posting Group");
                GenPostingSetup.SETRANGE("Purch. Account (Trading)",GLAccount."No.");
                IF GenPostingSetup.FINDFIRST THEN BEGIN
                  InitGenJnlLine(GLAccount."No.",RG23D,Qty,-1,"Line Amount Per Unit",FALSE,FALSE,ItemJnlLIne,FALSE,FALSE);
                  GenPostingSetup.TESTFIELD("Purch. Account");
                  InitGenJnlLine(GenPostingSetup."Purch. Account",RG23D,Qty,1,"Line Amount Per Unit",FALSE,FALSE,ItemJnlLIne,FALSE,
                    FALSE);
                END;
              END;
              ExcisePostingSetup2.RESET;
              ExcisePostingSetup2.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
              ExcisePostingSetup2.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
              ExcisePostingSetup2.SETFILTER("From Date",'<=%1',"Posting Date");
              ExcisePostingSetup2.SETRANGE("Cenvat Cr. Receivable(Trading)",GLAccount."No.");
              IF ExcisePostingSetup2.FINDLAST THEN BEGIN
                InitGenJnlLine(GLAccount."No.",RG23D,Qty,-1,"Excise Amt Per Unit",TRUE,FALSE,ItemJnlLIne,FALSE,FALSE);
                ExciseAmt := "Excise Amt Per Unit";
                ExciseAmtADCVAT := ("Excise Amt Per Unit" - "ADC VAT Amount Per Unit");
                ExcisePostingSetup2.TESTFIELD("Cenvat Cr. Receivable Account");
                IF ItemJnlLIne."Entry Type" = ItemJnlLIne."Entry Type":: Transfer THEN BEGIN
                  IF NOT Item."Capital Item" THEN
                    InitGenJnlLine(ExcisePostingSetup2."Cenvat Cr. Receivable Account",RG23D,Qty,1,"Excise Amt Per Unit",TRUE,TRUE,
                      ItemJnlLIne,FALSE,FALSE)
                  ELSE BEGIN
                    InitGenJnlLine(ExcisePostingSetup2."Cenvat Cr. Receivable Account",RG23D,Qty,1,ROUND(ExciseAmtADCVAT/2 +
                      "ADC VAT Amount Per Unit"),TRUE,TRUE,ItemJnlLIne,FALSE,TRUE);
                    InitGenJnlLine(ExcisePostingSetup2."Cenvat Cr. (Deferred) Account",RG23D,Qty,1,
                    ExciseAmt - ROUND(ExciseAmtADCVAT/2 + "ADC VAT Amount Per Unit"),TRUE,TRUE,ItemJnlLIne,TRUE,TRUE);
                  END;
                END;
                IF ItemJnlLIne."Entry Type" = ItemJnlLIne."Entry Type":: "Negative Adjmt." THEN BEGIN
                  InitGenJnlLine(GLSetup."Excise Expenses Account",RG23D,Qty,1,"Excise Amt Per Unit",FALSE,FALSE,
                  ItemJnlLIne,FALSE,FALSE)
                END;
              END;
            UNTIL GLAccount.NEXT = 0;
      END;
    END;

    PROCEDURE InitGenJnlLine@1500003(Account@1500000 : Code[20];RG23D@1500002 : Record 16537;Qty@1500003 : Decimal;Sign@1500008 : Integer;Amt@1500007 : Decimal;InsertExciseEntry@1500009 : Boolean;NewLocation@1500011 : Boolean;ItemJnlLine@1500012 : Record 83;Deffer@1500014 : Boolean;RunCapitalItem@1500015 : Boolean);
    VAR
      GenJnlLine@1500001 : Record 81;
      DimMgt@1500006 : Codeunit 408;
      TransactionNo@1500010 : Integer;
      Item@1500016 : Record 27;
      Location@1500017 : Record 14;
    BEGIN
      WITH RG23D DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := ItemJnlLine."Posting Date";
        GenJnlLine."Document Date" := ItemJnlLine."Posting Date";
        GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
        GenJnlLine."Document No." := ItemJnlLine."Document No.";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine.VALIDATE("Account No.",Account);
        GenJnlLine.VALIDATE(Amount, Sign * Amt * Qty);
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
        GenJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        GenJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        GenJnlLine.Quantity := Qty;
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine."Source Code" := ItemJnlLine."Source Code";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Capital Item" := Item."Capital Item";
        IF InsertExciseEntry THEN BEGIN
          GenJnlLine."Source Code" := ItemJnlLine."Source Code";
          GenJnlLine."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
          GenJnlLine."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
          ExcisePostingSetup.RESET;
          ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
          ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
          ExcisePostingSetup.SETFILTER("From Date",'<=%1',ItemJnlLine."Posting Date");
          IF ExcisePostingSetup.FINDLAST THEN BEGIN
            GenJnlLine."BED Calculation Type" := ExcisePostingSetup."BED Calculation Type";
            GenJnlLine."BED %" := ExcisePostingSetup."BED %";
          END;
          IF Sign > 0 THEN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase
          ELSE
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
          GenJnlLine."Excise Amount" := GenJnlLine.Amount;
          GenJnlLine."Excise Base Amount" := Sign * "Excise Base Amt Per Unit" * Qty;
          GenJnlLine."Amount Including Excise" := GenJnlLine.Amount + GenJnlLine."Excise Base Amount";

          TaxJnlLine.RESET;
          TaxJnlLine.SETRANGE("Journal Template Name",'');
          TaxJnlLine.SETRANGE("Journal Batch Name",'');
          TaxJnlLine.SETRANGE("Document No.",GenJnlLine."Document No.");
          IF NOT TaxJnlLine.FINDFIRST THEN BEGIN
            TaxJnlLine."Journal Template Name" := '';
            TaxJnlLine."Journal Batch Name" := '';
            TaxJnlLine."Line No." := 0;
            TaxJnlLine."Document No." := GenJnlLine."Document No.";
            TaxJnlLine.INSERT;
          END;

          TaxJnlLine."BED Amount" := Sign * "BED Amount Per Unit" * Qty;
          TaxJnlLine."AED(GSI) Amount" := Sign * "AED(GSI) Amount Per Unit" * Qty;
          TaxJnlLine."AED(TTA) Amount" := Sign * "AED(TTA) Amount Per Unit" * Qty;
          TaxJnlLine."SED Amount" := Sign * "SED Amount Per Unit" * Qty;
          TaxJnlLine."SAED Amount" := Sign * "SAED Amount Per Unit" * Qty;
          TaxJnlLine."NCCD Amount" := Sign * "NCCD Amount Per Unit" * Qty;
          TaxJnlLine."CESS Amount" := Sign * "CESS Amount Per Unit" * Qty;
          TaxJnlLine."eCess Amount" := Sign * "eCess Amount Per Unit" * Qty;
          TaxJnlLine."SHE Cess Amount" := Sign * "SHE Cess Amount Per Unit" * Qty;
          TaxJnlLine."ADET Amount" := Sign * "ADET Amount Per Unit" * Qty;
          TaxJnlLine."ADE Amount" := Sign * "ADE Amount Per Unit" * Qty;
          TaxJnlLine."ADC VAT Amount" := Sign * "ADC VAT Amount Per Unit" * Qty;
          TaxJnlLine.MODIFY;

          GenJnlLine."ADC VAT Amount" := Sign * "ADC VAT Amount Per Unit" * Qty;
          GenJnlLine.CVD := CVD;
          GenJnlLine.Quantity := Sign * Qty;
          GenJnlLine.Deferred := Deffer;
          IF NewLocation AND (ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer) THEN BEGIN
            Location.GET(ItemJnlLine."New Location Code");
            GenJnlLine."E.C.C. No." := Location."E.C.C. No.";
          END ELSE
            GenJnlLine."E.C.C. No." := "E.C.C. No.";
          GenJnlLine."Item No." := ItemJnlLine."Item No.";
        END;
        GenJnlPostLine.RunWithCheck(GenJnlLine);
        GenJnlPostLine.GetTransactionNo(TransactionNo);
        IF NOT RunCapitalItem AND InsertExciseEntry THEN
          InsertExcise(GenJnlLine,GenJnlLine."Account No.",TransactionNo);
        IF InsertExciseEntry AND RunCapitalItem THEN
          InsertExciseforCapitalItems(GenJnlLine,GenJnlLine."Account No.",GenJnlLine.Deferred,TransactionNo);
        IF InsertExciseEntry THEN
          TaxJnlLine.DELETE;
      END;
    END;

    PROCEDURE GetRG23DEntryNo@1500005() : Integer;
    VAR
      RG23D@1500000 : Record 16537;
    BEGIN
      RG23D.RESET;
      IF RG23D.FINDLAST THEN
        EXIT(RG23D."Entry No." + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE GetDetailRG23DEntryNo@1500004() : Integer;
    VAR
      DetailRG23D@1500000 : Record 16533;
    BEGIN
      DetailRG23D.RESET;
      IF DetailRG23D.FINDLAST THEN
        EXIT(DetailRG23D."Entry No." + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE GetRGEntryNo@1500022(PostingDate@1500000 : Date;RGTable@1500002 : 'RG23 A Part I,RG23 A Part II,RG23 C Part I,RG23 C Part II,RG23 D';ECCNo@1500006 : Code[20];DocumentNo@1500008 : Code[20];VAR RGEntryNo@1500007 : Code[20]);
    VAR
      ExciseNoSeries@1500003 : Record 16500;
      Location@1500001 : Record 14;
      RG23A_PartI@1500013 : Record 13719;
      RG23A_PartII@1500012 : Record 13720;
      RG23C_PartI@1500011 : Record 13721;
      RG23C_PartII@1500010 : Record 13722;
      RG23_D@1500009 : Record 16537;
      NoSeriesMgt@1500004 : Codeunit 396;
    BEGIN
      IF ECCNo = '' THEN
        ERROR(Text16502);
      CASE RGTable OF
        RGTable::"RG23 A Part I":
          BEGIN
            ExciseNoSeries.GET(ExciseNoSeries.Type::"RG23A Part I",ECCNo);
            RG23A_PartI.RESET;
            RG23A_PartI.SETCURRENTKEY("Document No.","Posting Date");
            RG23A_PartI.SETRANGE("Document No.",DocumentNo);
            IF NOT RG23A_PartI.FIND('-') THEN BEGIN
              NoSeriesMgt.InitSeries(ExciseNoSeries."No. Series",ExciseNoSeries."No. Series",PostingDate,
               RGEntryNo,ExciseNoSeries."No. Series");
            END ELSE
              RGEntryNo := RG23A_PartI."RG Entry No.";
          END;
        RGTable::"RG23 A Part II":
          BEGIN
            ExciseNoSeries.GET(ExciseNoSeries.Type::"RG23A Part II",ECCNo);
            RG23A_PartII.RESET;
            RG23A_PartII.SETCURRENTKEY("Document No.","Posting Date");
            RG23A_PartII.SETRANGE("Document No.",DocumentNo);
            IF NOT RG23A_PartII.FIND('-') THEN BEGIN
              NoSeriesMgt.InitSeries(ExciseNoSeries."No. Series",ExciseNoSeries."No. Series",PostingDate,
               RGEntryNo,ExciseNoSeries."No. Series");
            END ELSE
              RGEntryNo := RG23A_PartII."RG Entry No.";
          END;
        RGTable::"RG23 C Part I":
          BEGIN
            ExciseNoSeries.GET(ExciseNoSeries.Type::"RG23C Part I",ECCNo);
            RG23C_PartI.RESET;
            RG23C_PartI.SETCURRENTKEY("Document No.","Posting Date");
            RG23C_PartI.SETRANGE("Document No.",DocumentNo);
            IF NOT RG23C_PartI.FIND('-') THEN BEGIN
              NoSeriesMgt.InitSeries(ExciseNoSeries."No. Series",ExciseNoSeries."No. Series",PostingDate,
               RGEntryNo,ExciseNoSeries."No. Series");
            END ELSE
              RGEntryNo := RG23C_PartI."RG Entry No.";
          END;
        RGTable::"RG23 C Part II":
          BEGIN
            ExciseNoSeries.GET(ExciseNoSeries.Type::"RG23C Part II",ECCNo);
            RG23C_PartII.RESET;
            RG23C_PartII.SETCURRENTKEY("Document No.","Posting Date");
            RG23C_PartII.SETRANGE("Document No.",DocumentNo);
            IF NOT RG23C_PartII.FIND('-') THEN BEGIN
              NoSeriesMgt.InitSeries(ExciseNoSeries."No. Series",ExciseNoSeries."No. Series",PostingDate,
               RGEntryNo,ExciseNoSeries."No. Series");
            END ELSE
              RGEntryNo := RG23C_PartII."RG Entry No.";
          END;
        RGTable::"RG23 D":
          BEGIN
            ExciseNoSeries.GET(ExciseNoSeries.Type::RG23D,ECCNo);
            RG23_D.RESET;
            RG23_D.SETCURRENTKEY("Document No.","Posting Date");
            RG23_D.SETRANGE("Document No.",DocumentNo);
            IF NOT RG23_D.FIND('-') THEN BEGIN
              NoSeriesMgt.InitSeries(ExciseNoSeries."No. Series",ExciseNoSeries."No. Series",PostingDate,
               RGEntryNo,ExciseNoSeries."No. Series");
            END ELSE
              RGEntryNo := RG23_D."RG Entry No.";
          END;
      END;
    END;

    LOCAL PROCEDURE InsertExcise@1280027(GenJnlLine@1500005 : Record 81;AccNo@1500004 : Code[20];TransactionNo@1500000 : Integer);
    VAR
      ExciseEntry@1500003 : Record 13712;
      ExciseEntry2@1500002 : Record 13712;
      EntryNo@1500001 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Excise Amount" = 0 THEN
          EXIT;
        ExciseEntry2.LOCKTABLE;
        IF ExciseEntry2.FINDLAST THEN
          EntryNo := ExciseEntry2."Entry No." + 1
        ELSE
          EntryNo := 1;
        ExciseEntry.INIT;
        ExciseEntry."Entry No." := EntryNo;
        ExciseEntry."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
        ExciseEntry."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
        ExciseEntry."Posting Date" := "Posting Date";
        ExciseEntry."Document No." := "Document No.";
        ExciseEntry."BED Calculation Type" := "BED Calculation Type";
        ExciseEntry."External Document No." := "External Document No.";
        ExciseEntry."Sell-to/Buy-from No." := "Bill-to/Pay-to No.";
        ExciseEntry."Document Type" := "Document Type";
        ExciseEntry.Type := "Gen. Posting Type";
        ExciseEntry."Transaction No." := TransactionNo;
        ExciseEntry.Amount := "Excise Amount";
        ExciseEntry."BED %" := "BED %";
        ExciseEntry."Amount Including Excise" := "Amount Including Excise";
        ExciseEntry.Base := "Excise Base Amount";
        ExciseEntry."User ID" := USERID;
        ExciseEntry."Source Code" := "Source Code";
        ExciseEntry."Reason Code" := "Reason Code";
        ExciseEntry."Account No." := AccNo;
        ExciseEntry."BED Amount" := TaxJnlLine."BED Amount" ;
        ExciseEntry."AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount";
        ExciseEntry."AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount";
        ExciseEntry."SED Amount" := TaxJnlLine."SED Amount" ;
        ExciseEntry."SAED Amount" := TaxJnlLine."SAED Amount";
        ExciseEntry."NCCD Amount" := TaxJnlLine."NCCD Amount";
        ExciseEntry."CESS Amount" := TaxJnlLine."CESS Amount";
        ExciseEntry."eCess Amount" := TaxJnlLine."eCess Amount";
        ExciseEntry."SHE Cess Amount" := TaxJnlLine."SHE Cess Amount";
        ExciseEntry."ADET Amount" := TaxJnlLine."ADET Amount";
        ExciseEntry."ADE Amount" := TaxJnlLine."ADE Amount";
        ExciseEntry."ADC VAT Amount" := TaxJnlLine."ADC VAT Amount";
        ExciseEntry.CVD := CVD;
        ExciseEntry.Quantity := Quantity;
        ExciseEntry."E.C.C. No." := "E.C.C. No.";
        IF (TaxJnlLine."Excise Charge" AND (Amount < 0) AND (TaxJnlLine."Excise Charge Amount" <> 0)) THEN BEGIN
          ExciseEntry.Type := ExciseEntry.Type::Charges;
        END ELSE
          ExciseEntry."Item No." := GenJnlLine."Item No.";
        ExciseEntry."AED(GSI) Calculation Type" := ExcisePostingSetup."AED(GSI) Calculation Type";
        ExciseEntry."AED(GSI) %" := ExcisePostingSetup."AED(GSI) %";
        ExciseEntry."SED Calculation Type" := ExcisePostingSetup."SED Calculation Type";
        ExciseEntry."SED %" := ExcisePostingSetup."SED %";
        ExciseEntry."SAED Calculation Type" := ExcisePostingSetup."SAED Calculation Type";
        ExciseEntry."SAED %" := ExcisePostingSetup."SAED %";
        ExciseEntry."CESS Calculation Type" := ExcisePostingSetup."CESS Calculation Type";
        ExciseEntry."CESS %" := ExcisePostingSetup."CESS %";
        ExciseEntry."NCCD Calculation Type" := ExcisePostingSetup."NCCD Calculation Type";
        ExciseEntry."NCCD %" := ExcisePostingSetup."NCCD %";
        ExciseEntry."eCess Calculation Type" := ExcisePostingSetup."eCess Calculation Type";
        ExciseEntry."eCess %" := ExcisePostingSetup."eCess %";
        ExciseEntry."AED(TTA) Calculation Type" := ExcisePostingSetup."AED(TTA) Calculation Type";
        ExciseEntry."AED(TTA) %" := ExcisePostingSetup."AED(TTA) %";
        ExciseEntry."ADET Calculation Type" := ExcisePostingSetup."ADET Calculation Type";
        ExciseEntry."ADET %" := ExcisePostingSetup."ADET %";
        ExciseEntry."ADE Calculation Type" := ExcisePostingSetup."ADE Calculation Type";
        ExciseEntry."ADE %" := ExcisePostingSetup."ADE %";
        ExciseEntry."SHE Cess Calculation Type" := ExcisePostingSetup."SHE Cess Calculation Type";
        ExciseEntry."SHE Cess %" := ExcisePostingSetup."SHE Cess %";
        ExciseEntry."ADC VAT Calculation Type" := ExcisePostingSetup."ADC VAT Calculation Type";
        ExciseEntry."ADC VAT %" := ExcisePostingSetup."ADC VAT %";
        ExciseEntry.SSI := ExcisePostingSetup.SSI;
        ExciseEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertExciseforCapitalItems@1280026(GenJnlLine@1500006 : Record 81;AccNo@1500005 : Code[20];Defer@1500004 : Boolean;TransactionNo@1500003 : Integer);
    VAR
      ExciseEntry@1500002 : Record 13712;
      ExciseEntry2@1500001 : Record 13712;
      EntryNo@1500000 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        ExciseEntry2.LOCKTABLE;
        IF ExciseEntry2.FINDLAST THEN
          EntryNo := ExciseEntry2."Entry No." + 1
        ELSE
          EntryNo := 1;
        ExciseEntry.INIT;
        ExciseEntry."Entry No." := EntryNo;
        ExciseEntry."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
        ExciseEntry."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
        ExciseEntry."Posting Date" := "Posting Date";
        ExciseEntry."Document No." := "Document No.";
        ExciseEntry."BED Calculation Type" := "BED Calculation Type";
        ExciseEntry."External Document No." := "External Document No.";
        ExciseEntry."Sell-to/Buy-from No." := "Bill-to/Pay-to No.";
        ExciseEntry."E.C.C. No." := "E.C.C. No.";
        ExciseEntry."Document Type" := "Document Type";
        ExciseEntry.Type := "Gen. Posting Type";
        ExciseEntry."Transaction No." := TransactionNo;
        ExciseEntry.CVD := CVD;
        ExciseEntry.Base := "Excise Base Amount" / 2;
        IF CVD AND (NOT Defer) THEN BEGIN
          ExciseEntry.Amount := GenJnlLine.Amount;
          ExciseEntry."Amount Including Excise" := ExciseEntry.Base + ExciseEntry.Amount;
        END ELSE BEGIN
          ExciseEntry.Amount := GenJnlLine.Amount;
          ExciseEntry."Amount Including Excise" := ExciseEntry.Base + ExciseEntry.Amount;
        END;
        ExciseEntry."BED %" := "BED %";
        ExciseEntry."User ID" := USERID;
        ExciseEntry."Source Code" := "Source Code";
        ExciseEntry."Reason Code" := "Reason Code";
        ExciseEntry."Account No." := AccNo;
        ExciseEntry."BED Amount" := TaxJnlLine."BED Amount" / 2;
        ExciseEntry."AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount" / 2;
        ExciseEntry."AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount" / 2;
        ExciseEntry."SED Amount" := TaxJnlLine."SED Amount" / 2 ;
        ExciseEntry."SAED Amount" := TaxJnlLine."SAED Amount" / 2;
        ExciseEntry."NCCD Amount" := TaxJnlLine."NCCD Amount" / 2;
        ExciseEntry."CESS Amount" := TaxJnlLine."CESS Amount" / 2;
        ExciseEntry."eCess Amount" := TaxJnlLine."eCess Amount" / 2;
        ExciseEntry."SHE Cess Amount" := TaxJnlLine."SHE Cess Amount" / 2;
        ExciseEntry."ADET Amount" := TaxJnlLine."ADET Amount" / 2;
        ExciseEntry."ADE Amount" := TaxJnlLine."ADE Amount" / 2;
        IF CVD AND (NOT Defer) THEN
          ExciseEntry."ADC VAT Amount" := TaxJnlLine."ADC VAT Amount";
        IF Defer THEN BEGIN
          ExciseEntry.Deferred := TRUE;
          ExciseEntry."Remaining BED Amount" := TaxJnlLine."BED Amount" / 2 ;
          ExciseEntry."Remaining AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount" / 2 ;
          ExciseEntry."Remaining AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount" / 2 ;
          ExciseEntry."Remaining SED Amount" := TaxJnlLine."SED Amount" / 2 ;
          ExciseEntry."Remaining SAED Amount" := TaxJnlLine."SAED Amount" / 2;
          ExciseEntry."Remaining NCCD Amount" := TaxJnlLine."NCCD Amount" / 2;
          ExciseEntry."Remaining eCess Amount" := TaxJnlLine."eCess Amount" / 2;
          ExciseEntry."Remaining SHE Cess Amount" := TaxJnlLine."SHE Cess Amount" / 2;
          ExciseEntry."Remaining ADET Amount" := TaxJnlLine."ADET Amount" / 2;
          ExciseEntry."Remaining ADE Amount" := TaxJnlLine."ADE Amount" / 2;
          ExciseEntry."Remaining Quantity" := Quantity;
        END;
        ExciseEntry.Quantity := Quantity;
        ExciseEntry."Item No." := GenJnlLine."Item No.";
        ExciseEntry."Product Type" := GenJnlLine."Product Type";
        ExciseEntry."AED(GSI) Calculation Type" := ExcisePostingSetup."AED(GSI) Calculation Type";
        ExciseEntry."AED(GSI) %" := ExcisePostingSetup."AED(GSI) %";
        ExciseEntry."SED Calculation Type" := ExcisePostingSetup."SED Calculation Type";
        ExciseEntry."SED %" := ExcisePostingSetup."SED %";
        ExciseEntry."SAED Calculation Type" := ExcisePostingSetup."SAED Calculation Type";
        ExciseEntry."SAED %" := ExcisePostingSetup."SAED %";
        ExciseEntry."CESS Calculation Type" := ExcisePostingSetup."CESS Calculation Type";
        ExciseEntry."CESS %" := ExcisePostingSetup."CESS %";
        ExciseEntry."NCCD Calculation Type" := ExcisePostingSetup."NCCD Calculation Type";
        ExciseEntry."NCCD %" := ExcisePostingSetup."NCCD %";
        ExciseEntry."eCess Calculation Type" := ExcisePostingSetup."eCess Calculation Type";
        ExciseEntry."eCess %" := ExcisePostingSetup."eCess %";
        ExciseEntry."AED(TTA) Calculation Type" := ExcisePostingSetup."AED(TTA) Calculation Type";
        ExciseEntry."AED(TTA) %" := ExcisePostingSetup."AED(TTA) %";
        ExciseEntry."ADET Calculation Type" := ExcisePostingSetup."ADET Calculation Type";
        ExciseEntry."ADET %" := ExcisePostingSetup."ADET %";
        ExciseEntry."ADE Calculation Type" := ExcisePostingSetup."ADE Calculation Type";
        ExciseEntry."ADE %" := ExcisePostingSetup."ADE %";
        ExciseEntry."SHE Cess Calculation Type" := ExcisePostingSetup."SHE Cess Calculation Type";
        ExciseEntry."SHE Cess %" := ExcisePostingSetup."SHE Cess %";
        ExciseEntry."ADC VAT Calculation Type" := ExcisePostingSetup."ADC VAT Calculation Type";
        ExciseEntry."ADC VAT %" := ExcisePostingSetup."ADC VAT %";
        ExciseEntry.SSI := ExcisePostingSetup.SSI;
        ExciseEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE PostTransferProfit@1500000(ValueEntry@1500000 : Record 5802;DocNo@1500004 : Code[20];Desc@1500005 : Text[50];DimEntryNo@1500007 : Integer);
    VAR
      InventoryPostingSetup@1500001 : Record 5813;
      GenPostingSetup@1500002 : Record 252;
      GenJnlLine@1500003 : Record 81;
    BEGIN
      IF (ValueEntry."Item Ledger Entry Type" = ValueEntry."Item Ledger Entry Type"::Transfer) AND
        ValueEntry.Adjustment AND (GlobalInvtPostBuf."Account Type" = GlobalInvtPostBuf."Account Type"::Inventory)
      THEN BEGIN
          InitGenJnlLineProfitPost(ValueEntry,GenJnlLine,DocNo,Desc);
          InventoryPostingSetup.GET(GlobalInvtPostBuf."Location Code",GlobalInvtPostBuf."Inventory Posting Group");
          InventoryPostingSetup.TESTFIELD("Unrealized Profit Account");
          GenJnlLine."Account No." := InventoryPostingSetup."Unrealized Profit Account";
          GenJnlLine.Amount := -GenJnlLine.Amount;
          GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
          IF GenJnlLine.Amount <> 0 THEN
            GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE InitGenJnlLineProfitPost@1500001(ValueEntry@1500000 : Record 5802;VAR GenJnlLine@1500001 : Record 81;DocNo@1500002 : Code[20];Desc@1500003 : Text[50]);
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine."Posting Date" := GlobalInvtPostBuf."Posting Date";
      GenJnlLine."Document Date" := ValueEntry."Document Date";
      GenJnlLine."Document No." := DocNo;
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
      GenJnlLine."System-Created Entry" := TRUE;
      IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Transfer Shipment" THEN
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale
      ELSE IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Transfer Receipt" THEN
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
      IF ValueEntry."Document Type" IN
        [ValueEntry."Document Type"::"Transfer Shipment",ValueEntry."Document Type"::"Transfer Receipt"]
      THEN BEGIN
        GenJnlLine."Gen. Bus. Posting Group" := GlobalInvtPostBuf."Gen. Bus. Posting Group";
        GenJnlLine."Gen. Prod. Posting Group" := GlobalInvtPostBuf."Gen. Prod. Posting Group";
      END;
      GenJnlLine.Amount := GlobalInvtPostBuf.Amount;
      GenJnlLine."Shortcut Dimension 1 Code" := ValueEntry."Global Dimension 1 Code";
      GenJnlLine."Shortcut Dimension 2 Code" := ValueEntry."Global Dimension 2 Code";
      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
      GenJnlLine.Description := Desc;
    END;

    BEGIN
    END.
  }
}

