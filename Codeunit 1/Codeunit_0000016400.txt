OBJECT Codeunit 16400 Form Management
{
  OBJECT-PROPERTIES
  {
    Date=29-09-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.47042;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text16501@1500024 : TextConst 'ENU=The deductee P.A.N. is invalid.;ENN=The deductee P.A.N. is invalid.';
      Text16502@1500023 : TextConst 'ENU=The P.A.N. No. field must be filled for non-government organisations.;ENN=The P.A.N. No. field must be filled for non-government organisations.';
      Text16503@1500022 : TextConst '@@@="%1 = Text";ENU=The posting date does not lie in %1.;ENN=The posting date does not lie in %1.';
      Text16504@1500021 : TextConst 'ENU=The party P.A.N. is invalid.;ENN=The party P.A.N. is invalid.';
      Text16505@1500001 : TextConst '@@@="%1 = Integer";ENU=An e-TCS entry does not exist for TCS entry number %1.;ENN=An e-TCS entry does not exist for TCS entry number %1.';
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      PANReferenceEmptyErr@1500002 : TextConst 'ENU=The P.A.N. Reference No. field must be filled for the vendor or customer.;ENN=The P.A.N. Reference No. field must be filled for the vendor or customer.';

    PROCEDURE InsertIntoBatchHeader@1500010(VAR TDSEntry@1500007 : Record 13729;PostingDate@1500009 : Date);
    VAR
      BatchHeader@1500000 : Record 16503;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      CompanyInfo@1500002 : Record 79;
      DeductorCategory@1001 : Record 16498;
      Quarter@1500003 : Integer;
      FinYear@1500004 : Code[6];
      AssessmentYear@1500005 : Code[6];
      LastEntryNo@1500006 : Integer;
    BEGIN
      InsertInto26Qor27Q(TDSEntry);
      TDSEntry."TDS Payment Date" := 0D;

      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("T.A.N. No.");
      CompanyInfo.TESTFIELD("P.A.N. No.");
      BatchHeader.RESET;
      Quarter := GetQuarter(PostingDate);
      FinYear := GetFinancialYear(PostingDate);
      AssessmentYear := GetAssessmentYear(PostingDate);

      BatchHeader.RESET;
      BatchHeader.SETRANGE("Financial Year",FinYear);
      BatchHeader.SETRANGE(Quarter,Quarter);
      BatchHeader.SETRANGE("Deductor T.A.N. No.",TDSEntry."T.A.N. No.");
      IF TDSEntry."Non Resident Payments" THEN
        BatchHeader.SETRANGE("Form No.",BatchHeader."Form No."::"27Q")
      ELSE
        BatchHeader.SETRANGE("Form No.",BatchHeader."Form No."::"26Q");
      IF BatchHeader.FINDFIRST THEN
        EXIT;

      LastEntryNo := BatchHeader."Entry No.";

      BatchHeader.INIT;
      BatchHeader."Entry No." :=
        IncomeTaxAccountingPeriod.GetLastEntryNo(DATABASE::"Batch Header") + 1;
      BatchHeader."Financial Year" := FinYear;
      BatchHeader."Assessment Year" := AssessmentYear;
      BatchHeader.Quarter := Quarter;
      IF TDSEntry."Non Resident Payments" THEN
        BatchHeader."Form No." := BatchHeader."Form No."::"27Q"
      ELSE
        BatchHeader."Form No." := BatchHeader."Form No."::"26Q";
      BatchHeader."Deductor Name" := CompanyInfo.Name;
      BatchHeader."Deductor Branch/Division" := CompanyInfo."Location Code";
      BatchHeader."Deductor T.A.N. No." := TDSEntry."T.A.N. No.";
      BatchHeader."Deductor Last TAN" := TDSEntry."T.A.N. No.";
      BatchHeader."Deductor Address" := CompanyInfo.Address;
      BatchHeader."Deductor Address 2" := CompanyInfo."Address 2";
      CompanyInfo.TESTFIELD(State);
      BatchHeader."Deductor State" := GetState(CompanyInfo.State);
      IF CompanyInfo."Phone No." <> '' THEN
        BatchHeader."Deductor Phone No." := CompanyInfo."Phone No.";
      BatchHeader."Deductor STD Code" := CompanyInfo."STD Code";
      CompanyInfo.TESTFIELD("Post Code");
      BatchHeader."Deductor Post Code" := CompanyInfo."Post Code";
      BatchHeader."Deductor E-Mail" := CompanyInfo."E-Mail";
      CompanyInfo.TESTFIELD("Deductor Category");
      BatchHeader."Deductor Category" := CompanyInfo."Deductor Category";
      DeductorCategory.GET(CompanyInfo."Deductor Category");
      IF DeductorCategory."DDO Code Mandatory" THEN
        CompanyInfo.TESTFIELD("DDO Code");
      IF DeductorCategory."PAO Code Mandatory" THEN
        CompanyInfo.TESTFIELD("PAO Code");
      IF DeductorCategory."Ministry Details Mandatory" THEN BEGIN
        CompanyInfo.TESTFIELD("Ministry Type");
        CompanyInfo.TESTFIELD("Ministry Code");
        FillMinistryName(BatchHeader."Ministry Name Code",BatchHeader."Ministry Name Other");
      END;
      FillDDOPAO(BatchHeader."DDO Code",BatchHeader."DDO Registration No.",BatchHeader."PAO Code",BatchHeader."PAO Registration No.");
      IF DeductorCategory."State Code Mandatory" THEN BEGIN
        BatchHeader."State Code" := GetState(CompanyInfo.State);
        BatchHeader.TESTFIELD("State Code");
      END ELSE
        BatchHeader."State Code" := '';

      IF NOT (CompanyInfo."Company Status" = CompanyInfo."Company Status"::Government) AND (CompanyInfo."P.A.N. No." = '') THEN
        ERROR(Text16502);
      BatchHeader."Deductor P.A.N. No." := CompanyInfo."P.A.N. No.";
      BatchHeader."Responsible Person Address" := CompanyInfo.Address;
      BatchHeader."Responsible Person Address 2" := CompanyInfo."Address 2";
      BatchHeader."Responsible Person State" := BatchHeader."Deductor State";
      BatchHeader."Responsible Person Post Code" := BatchHeader."Deductor Post Code";
      BatchHeader."Responsible Person E-Mail" := BatchHeader."Deductor E-Mail";
      BatchHeader."Responsible Person STD Code" := CompanyInfo."STD Code";
      BatchHeader."Responsible Person Phone No." := BatchHeader."Deductor Phone No.";
      BatchHeader."AO Approval" := 'N';
      BatchHeader."Change of Add of Deductor" := CheckChangeOfAddress(LastEntryNo,BatchHeader."Deductor Address",
          BatchHeader."Deductor State",BatchHeader."Deductor Post Code");
      BatchHeader."Responsible person Add Change" := BatchHeader."Change of Add of Deductor";
      BatchHeader."Posting Date" := TDSEntry."Posting Date";
      BatchHeader."User ID" := USERID;
      BatchHeader.INSERT;
    END;

    PROCEDURE InsertIntoTCSBatchHeader@1500012(VAR TCSEntry@1500008 : Record 16514;PostingDate@1500009 : Date);
    VAR
      TCSBatchHeader@1500000 : Record 16515;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      CompanyInfo@1500002 : Record 79;
      DeductorCategory@1001 : Record 16498;
      Quarter@1500003 : Integer;
      FinYear@1500004 : Code[6];
      AssessmentYear@1500005 : Code[6];
      LastEntryNo@1500006 : Integer;
      Count@1500007 : Integer;
    BEGIN
      InsertInto27EQ(TCSEntry);

      TCSEntry."TCS Payment Date" := 0D;

      CompanyInfo.GET;
      CompanyInfo.TESTFIELD("T.C.A.N. No.");
      CompanyInfo.TESTFIELD("P.A.N. No.");
      CompanyInfo.TESTFIELD(State);
      CompanyInfo.TESTFIELD("Post Code");
      IF NOT (CompanyInfo."Company Status" = CompanyInfo."Company Status"::Government) AND (CompanyInfo."P.A.N. No." = '') THEN
        ERROR(Text16502);

      Quarter := GetQuarter(PostingDate);
      FinYear := GetFinancialYear(PostingDate);
      AssessmentYear := GetAssessmentYear(PostingDate);

      TCSBatchHeader.RESET;
      TCSBatchHeader.SETRANGE("Financial Year",FinYear);
      TCSBatchHeader.SETRANGE(Quarter,Quarter);
      TCSBatchHeader.SETRANGE("Collector T.C.A.N. No.",TCSEntry."T.C.A.N. No.");
      IF TCSBatchHeader.FINDFIRST THEN
        EXIT;

      LastEntryNo :=
        IncomeTaxAccountingPeriod.GetTCSLastEntryNo(DATABASE::"TCS Batch Header");
      TCSBatchHeader.INIT;
      TCSBatchHeader."Entry No." := LastEntryNo + 1;
      TCSBatchHeader."Financial Year" := FinYear;
      TCSBatchHeader."Assessment Year" := AssessmentYear;
      TCSBatchHeader.Quarter := Quarter;
      TCSBatchHeader."Collector Name" := CompanyInfo.Name;
      TCSBatchHeader."Collector Branch/Division" := CompanyInfo."Location Code";
      TCSBatchHeader."Collector T.C.A.N. No." := TCSEntry."T.C.A.N. No.";
      TCSBatchHeader."Collector Last TCAN" := TCSEntry."T.C.A.N. No.";

      IF (STRLEN(CompanyInfo.Address) > 25) OR (STRLEN(CompanyInfo."Address 2") > 25) THEN BEGIN
        Count := 25;
        TCSBatchHeader."Collector Address" := COPYSTR(CompanyInfo.Address,1,Count);
        TCSBatchHeader."Responsible Person Address" := COPYSTR(CompanyInfo.Address,1,Count);
        TCSBatchHeader."Collector Address 3" := COPYSTR(CompanyInfo."Address 2",1,Count);
        TCSBatchHeader."Responsible Person Address 3" := COPYSTR(CompanyInfo."Address 2",1,Count);
        Count += 1;
        TCSBatchHeader."Collector Address 2" := COPYSTR(CompanyInfo.Address,Count,STRLEN(CompanyInfo.Address));
        TCSBatchHeader."Collector Address 4" := COPYSTR(CompanyInfo."Address 2",Count,STRLEN(CompanyInfo."Address 2"));
        TCSBatchHeader."Responsible Person Address 2" := COPYSTR(CompanyInfo.Address,Count,STRLEN(CompanyInfo.Address));
        TCSBatchHeader."Responsible Person Address 4" := COPYSTR(CompanyInfo."Address 2",Count,STRLEN(CompanyInfo."Address 2"));
      END ELSE BEGIN
        TCSBatchHeader."Collector Address" := CompanyInfo.Address;
        TCSBatchHeader."Collector Address 2" := CompanyInfo."Address 2";
        TCSBatchHeader."Responsible Person Address" := CompanyInfo.Address;
        TCSBatchHeader."Responsible Person Address 2" := CompanyInfo."Address 2";
      END;
      TCSBatchHeader."Collector State" := GetState(CompanyInfo.State);
      IF CompanyInfo."Phone No." <> '' THEN
        TCSBatchHeader."Collector Phone No." := CompanyInfo."Phone No.";
      TCSBatchHeader."Collector STD Code" := CompanyInfo."STD Code";
      TCSBatchHeader."Collector Post Code" := CompanyInfo."Post Code";
      TCSBatchHeader."Collector E-Mail" := CompanyInfo."E-Mail";
      CompanyInfo.TESTFIELD("Deductor Category");
      TCSBatchHeader."Collector Category" := CompanyInfo."Deductor Category";
      DeductorCategory.GET(CompanyInfo."Deductor Category");
      IF DeductorCategory."DDO Code Mandatory" THEN BEGIN
        CompanyInfo.TESTFIELD("DDO Code");
        CompanyInfo.TESTFIELD("DDO Registration No.");
      END;
      IF DeductorCategory."PAO Code Mandatory" THEN BEGIN
        CompanyInfo.TESTFIELD("PAO Code");
        CompanyInfo.TESTFIELD("PAO Registration No.");
      END;
      IF DeductorCategory."Ministry Details Mandatory" THEN BEGIN
        CompanyInfo.TESTFIELD("Ministry Type");
        CompanyInfo.TESTFIELD("Ministry Code");
        FillMinistryName(TCSBatchHeader."Ministry Name Code",TCSBatchHeader."Ministry Name Other");
      END ELSE BEGIN
        TCSBatchHeader."Ministry Name Code" := '';
        TCSBatchHeader."Ministry Name Other" := '';
      END;
      FillDDOPAO(TCSBatchHeader."DDO Code",TCSBatchHeader."DDO Registration No.",
        TCSBatchHeader."PAO Code",TCSBatchHeader."PAO Registration No.");
      IF DeductorCategory."State Code Mandatory" THEN BEGIN
        TCSBatchHeader."State Code" := GetState(CompanyInfo.State);
        TCSBatchHeader.TESTFIELD("State Code");
      END ELSE
        TCSBatchHeader."State Code" := '';
      TCSBatchHeader."Collector P.A.N. No." := CompanyInfo."P.A.N. No.";
      TCSBatchHeader."Responsible Person State" := TCSBatchHeader."Collector State";
      TCSBatchHeader."Responsible Person Post Code" := TCSBatchHeader."Collector Post Code";
      TCSBatchHeader."Responsible Person E-Mail" := TCSBatchHeader."Collector E-Mail";
      TCSBatchHeader."Responsible Person STD Code" := CompanyInfo."STD Code";
      TCSBatchHeader."Responsible Person Phone No." := TCSBatchHeader."Collector Phone No.";
      TCSBatchHeader."AO Approval" := 'N';
      TCSBatchHeader."Change of Add of Collector" := CheckTCSChangeOfAddress(LastEntryNo,TCSBatchHeader."Collector Address",
          TCSBatchHeader."Collector State",TCSBatchHeader."Collector Post Code");
      TCSBatchHeader."Responsible person Add Change" := TCSBatchHeader."Change of Add of Collector";
      TCSBatchHeader."Posting Date" := TCSEntry."Posting Date";
      TCSBatchHeader."User ID" := USERID;
      TCSBatchHeader.INSERT;
    END;

    PROCEDURE InsertInto26Qor27Q@1500021(VAR TDSEntry@1500003 : Record 13729);
    VAR
      Form26Q27QEntry@1500000 : Record 16505;
      Vendor@1500001 : Record 23;
      TDSAssesseeCode@1500002 : Record 13727;
      TDSParty@1500004 : Record 13730;
      BatchHeader@1500005 : Record 16503;
      TDSSetup@1500009 : Record 13728;
      NODLines@1500010 : Record 13785;
    BEGIN
      TDSAssesseeCode.GET(TDSEntry."Assessee Code");

      WITH TDSEntry DO BEGIN
        Form26Q27QEntry.INIT;
        Form26Q27QEntry."Entry No." :=
          IncomeTaxAccountingPeriod.GetLastEntryNo(DATABASE::"Form 26Q/27Q Entry") + 1;
        Form26Q27QEntry."Account Type" := "Account Type";
        Form26Q27QEntry."Account No." := "Account No.";
        Form26Q27QEntry."Posting Date" := "Posting Date";
        Form26Q27QEntry."Document Type" := "Document Type";
        Form26Q27QEntry."Document No." := "Document No.";
        Form26Q27QEntry.Description := Description;
        Form26Q27QEntry."TDS Amount Including Surcharge" := "TDS Amount Including Surcharge";
        Form26Q27QEntry."TDS Line Amount" := "TDS Line Amount";
        Form26Q27QEntry."TDS Base Amount" := "TDS Base Amount";
        Form26Q27QEntry."TDS Entry No." := "Entry No.";
        Form26Q27QEntry."Party Type" := "Party Type";
        Form26Q27QEntry."Party Code" := "Party Code";
        Form26Q27QEntry."TDS Nature of Deduction" := "TDS Nature of Deduction";
        Form26Q27QEntry."Assessee Code" := "Assessee Code";
        Form26Q27QEntry."Nature of Remittance" := "Nature of Remittance";
        Form26Q27QEntry."Act Applicable" := "Act Applicable";
        Form26Q27QEntry."Country Code" := "Country Code";
        Form26Q27QEntry."TDS Paid" := "TDS Paid";
        Form26Q27QEntry."Applied To" := "Applied To";
        Form26Q27QEntry."Challan Date" := "Challan Date";
        Form26Q27QEntry."Bank Name" := "Bank Name";
        Form26Q27QEntry."TDS %" := "TDS %";
        Form26Q27QEntry.Adjusted := Adjusted;
        Form26Q27QEntry."Adjusted TDS %" := "Adjusted TDS %";
        Form26Q27QEntry."Bal. TDS Including SHE CESS" := "Bal. TDS Including SHE CESS";
        Form26Q27QEntry."Pay TDS Document No." := "Pay TDS Document No.";
        Form26Q27QEntry."Applies To" := "Applies To";
        Form26Q27QEntry."TDS Category" := "TDS Category";
        Form26Q27QEntry."TDS Certificate No." := "TDS Certificate No.";
        Form26Q27QEntry."Surcharge %" := "Surcharge %";
        Form26Q27QEntry."Surcharge Amount" := "Surcharge Amount";
        Form26Q27QEntry."No. Printed" := "No. Printed";
        Form26Q27QEntry."Concessional Code" := "Concessional Code";
        Form26Q27QEntry."Concessional Form" := "Concessional Form";
        Form26Q27QEntry."Work Tax Base Amount" := "Work Tax Base Amount";
        Form26Q27QEntry."Work Tax %" := "Work Tax %";
        Form26Q27QEntry."Work Tax Amount" := "Work Tax Amount";
        Form26Q27QEntry."Return Type" := "Return Type";
        Form26Q27QEntry."Work Tax Paid" := "Work Tax Paid";
        Form26Q27QEntry."Pay Work Tax Document No." := "Pay Work Tax Document No.";
        Form26Q27QEntry."No. Series" := "No. Series";
        Form26Q27QEntry."Certificate Period" := "Certificate Period";
        Form26Q27QEntry."Balance Work Tax Amount" := "Balance Work Tax Amount";
        Form26Q27QEntry."Work Tax Account" := "Work Tax Account";
        Form26Q27QEntry."Invoice Amount" := "Invoice Amount";
        Form26Q27QEntry."Certificate Date" := "Certificate Date";
        Form26Q27QEntry."Rem. Total TDS Incl. SHE CESS" := "Rem. Total TDS Incl. SHE CESS";
        Form26Q27QEntry.Applied := Applied;
        Form26Q27QEntry."TDS Amount" := "TDS Amount";
        Form26Q27QEntry."Remaining Surcharge Amount" := "Remaining Surcharge Amount";
        Form26Q27QEntry."Remaining TDS Amount" := "Remaining TDS Amount";
        Form26Q27QEntry."Adjusted Surcharge %" := "Adjusted Surcharge %";
        Form26Q27QEntry."TDS Extra Base Amount" := "TDS Extra Base Amount";
        Form26Q27QEntry."TDS Group" := "TDS Group";
        Form26Q27QEntry."Work Tax Group" := "Work Tax Group";
        Form26Q27QEntry."Surcharge Base Amount" := "Surcharge Base Amount";
        Form26Q27QEntry."Work Tax Nature Of Deduction" := "Work Tax Nature Of Deduction";
        Form26Q27QEntry."Service Tax Including eCess" := "Service Tax Including eCess";
        Form26Q27QEntry."eCESS %" := "eCESS %";
        Form26Q27QEntry."SHE Cess %" := "SHE Cess %";
        Form26Q27QEntry."eCESS Amount" := "eCESS Amount";
        Form26Q27QEntry."SHE Cess Amount" := "SHE Cess Amount";
        Form26Q27QEntry."Total TDS Including SHE CESS" := "Total TDS Including SHE CESS";
        Form26Q27QEntry."Adjusted eCESS %" := "Adjusted eCESS %";
        Form26Q27QEntry."Adjusted SHE CESS %" := "Adjusted SHE CESS %";
        Form26Q27QEntry."Per Contract" := "Per Contract";
        Form26Q27QEntry."T.A.N. No." := "T.A.N. No.";
        Form26Q27QEntry."Party Account No." := "Party Account No.";
        Form26Q27QEntry."TDS Section" := "TDS Section";
        Form26Q27QEntry."Challan No." := "Challan No.";
        Form26Q27QEntry."BSR Code" := "BSR Code";
        Form26Q27QEntry."Non Resident Payments" := "Non Resident Payments";
        Form26Q27QEntry.Reversed := Reversed;
        Form26Q27QEntry."Reversed by Entry No." := "Reversed by Entry No.";
        Form26Q27QEntry."Reversed Entry No." := "Reversed Entry No.";
        Form26Q27QEntry."User ID" := USERID;
        Form26Q27QEntry."Source Code" := "Source Code";
        Form26Q27QEntry."Transaction No." := "Transaction No.";
        Form26Q27QEntry.Printed := FALSE;
        Form26Q27QEntry.Filed := FALSE;
        Form26Q27QEntry."Filing Date" := 0D;
        Form26Q27QEntry."Filing Date of Revised eTDS" := 0D;
        Form26Q27QEntry."Check / DD No." := "Check/DD No.";
        Form26Q27QEntry."Check / DD Date" := "Check Date";
        Form26Q27QEntry."Assessment Year" := GetAssessmentYear("Posting Date");
        Form26Q27QEntry."Financial Year" := GetFinancialYear("Posting Date");
        Form26Q27QEntry.Quarter := GetQuarter("Posting Date");
        IF CheckFiledEntries(Form26Q27QEntry.Quarter,Form26Q27QEntry."Financial Year","Non Resident Payments") THEN BEGIN
          Form26Q27QEntry.Revised := TRUE;
          Form26Q27QEntry."No. of Revision" += 1;
          Form26Q27QEntry."Correction-C9" := TRUE;
          BatchHeader.RESET;
          BatchHeader.SETRANGE("Financial Year",Form26Q27QEntry."Financial Year");
          BatchHeader.SETRANGE(Quarter,Form26Q27QEntry.Quarter);
          IF BatchHeader.FINDFIRST THEN
            BatchHeader."Correction-C9" := TRUE;
          BatchHeader."No. of Revision" := 1;
          BatchHeader.Revised := TRUE;
          BatchHeader.MODIFY;
        END;
        Form26Q27QEntry."NIL Challan Indicator" := FALSE;
        IF NODLines.FindNODLines("Party Type","Party Code","TDS Nature of Deduction") THEN
          IF TDSSetup.FindOnDate(
            "TDS Nature of Deduction","Assessee Code","TDS Group",NODLines."Concessional Code",
            "Posting Date","Nature of Remittance","Act Applicable","Country Code")
          THEN
            IF TDSSetup."TDS %" = 0 THEN BEGIN
              Form26Q27QEntry."NIL Challan Indicator" := TRUE;
              TDSEntry."NIL Challan Indicator" := TRUE;
            END;
        Form26Q27QEntry.Mode := 'O';
        IF TDSAssesseeCode.Type = TDSAssesseeCode.Type::Company THEN
          Form26Q27QEntry."Deductee Code" := '1'
        ELSE
          Form26Q27QEntry."Deductee Code" := '2';
          Form26Q27QEntry."Deductee P.A.N. No." := "Deductee P.A.N. No.";
        Form26Q27QEntry."Last Emp. / Party P.A.N. No." := "Deductee P.A.N. No.";
        IF STRLEN(Form26Q27QEntry."Deductee P.A.N. No.") <> 10 THEN
          ERROR(Text16501);
        IF "Party Type" = "Party Type"::Vendor THEN BEGIN
          Vendor.GET("Party Code");
          Form26Q27QEntry."Deductee Name" := Vendor.Name;
          IF (Form26Q27QEntry."Deductee P.A.N. No." = '') OR (Vendor."P.A.N. Status" IN [Vendor."P.A.N. Status"::PANAPPLIED,
            Vendor."P.A.N. Status"::PANINVALID,Vendor."P.A.N. Status"::PANNOTAVBL]) THEN
            IF (Vendor."P.A.N. Status" IN [Vendor."P.A.N. Status"::PANAPPLIED,
              Vendor."P.A.N. Status"::PANINVALID,Vendor."P.A.N. Status"::PANNOTAVBL])
                AND (Vendor."P.A.N. Reference No." = '') THEN
              ERROR(PANReferenceEmptyErr)
            ELSE
              Form26Q27QEntry."Deductee P.A.N. Ref. No." := Vendor."P.A.N. Reference No.";
        END;
        IF "Party Type" = "Party Type"::Party THEN BEGIN
          TDSParty.GET("Party Code");
          Form26Q27QEntry."Deductee Name" := TDSParty.Name;
          Form26Q27QEntry."Deductee P.A.N. Ref. No." := TDSParty."P.A.N. Reference No.";
        END;
        Form26Q27QEntry."Book Entry / Cash Indicator" := FALSE;
        IF "Non Resident Payments" THEN
          Form26Q27QEntry."Form No." := Form26Q27QEntry."Form No."::"27Q"
        ELSE
          Form26Q27QEntry."Form No." := Form26Q27QEntry."Form No."::"26Q";
        Form26Q27QEntry."Last Total Income TDS" := "TDS Amount";
        Form26Q27QEntry."Total Tax Deposited" := "TDS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount";
        Form26Q27QEntry."Last Total Tax Deposited" := "TDS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount";
        Form26Q27QEntry."Amount of Payment / Credit" := "Invoice Amount";
        Form26Q27QEntry."Amount Paid / Credited on Date" := "Posting Date";
        Form26Q27QEntry."Tax Deducted / Collected Date" := "Posting Date";
        Form26Q27QEntry.INSERT;
      END;
    END;

    PROCEDURE InsertInto27EQ@1500004(TCSEntry@1500003 : Record 16514);
    VAR
      Form27EQEntry@1500000 : Record 16517;
      TDSTCSAssesseeCode@1500002 : Record 13727;
    BEGIN
      TDSTCSAssesseeCode.GET(TCSEntry."Assessee Code");

      WITH TCSEntry DO BEGIN
        Form27EQEntry.INIT;
        Form27EQEntry."Entry No." := IncomeTaxAccountingPeriod.GetTCSLastEntryNo(DATABASE::"Form 27EQ Entry") + 1;
        Form27EQEntry."Account Type" := "Account Type";
        Form27EQEntry."Account No." := "Account No.";
        Form27EQEntry."Posting Date" := "Posting Date";
        Form27EQEntry."Document Type" := "Document Type";
        Form27EQEntry."Document No." := "Document No.";
        Form27EQEntry.Description := Description;
        Form27EQEntry."TCS Amount Including Surcharge" := "TCS Amount Including Surcharge";
        Form27EQEntry."TCS Base Amount" := "TCS Base Amount";
        Form27EQEntry."TCS Entry No." := "Entry No.";
        Form27EQEntry."Party Type" := "Party Type";
        Form27EQEntry."Party Code" := "Party Code";
        Form27EQEntry."TCS Nature of Collection" := "TCS Nature of Collection";
        Form27EQEntry."Assessee Code" := "Assessee Code";
        Form27EQEntry."TCS Paid" := "TCS Paid";
        Form27EQEntry."Applied To" := "Applied To";
        Form27EQEntry."Challan Date" := "Challan Date";
        Form27EQEntry."Bank Name" := "Bank Name";
        Form27EQEntry."TCS %" := "TCS %";
        Form27EQEntry.Adjusted := Adjusted;
        Form27EQEntry."Adjusted TCS %" := "Adjusted TCS %";
        Form27EQEntry."Bal. TCS Including SHE CESS" := "Bal. TCS Including SHE CESS";
        Form27EQEntry."Pay TCS Document No." := "Pay TCS Document No.";
        Form27EQEntry."Applies To" := "Applies To";
        Form27EQEntry."TCS Certificate No." := "TCS Certificate No.";
        Form27EQEntry."Surcharge %" := "Surcharge %";
        Form27EQEntry."Surcharge Amount" := "Surcharge Amount";
        Form27EQEntry."No. Printed" := "No. Printed";
        Form27EQEntry."Concessional Code" := "Concessional Code";
        Form27EQEntry."Concessional Form" := "Concessional Form";
        Form27EQEntry."Work Tax Base Amount" := "Work Tax Base Amount";
        Form27EQEntry."Work Tax %" := "Work Tax %";
        Form27EQEntry."Work Tax Amount" := "Work Tax Amount";
        Form27EQEntry."Work Tax Paid" := "Work Tax Paid";
        Form27EQEntry."Pay Work Tax Document No." := "Pay Work Tax Document No.";
        Form27EQEntry."No. Series" := "No. Series";
        Form27EQEntry."Certificate Period" := "Certificate Period";
        Form27EQEntry."Balance Work Tax Amount" := "Balance Work Tax Amount";
        Form27EQEntry."Work Tax Account" := "Work Tax Account";
        Form27EQEntry."Invoice Amount" := "Invoice Amount";
        Form27EQEntry."Certificate Date" := "Certificate Date";
        Form27EQEntry."Rem. Total TCS Incl. SHE CESS" := "Rem. Total TCS Incl. SHE CESS";
        Form27EQEntry.Applied := Applied;
        Form27EQEntry."TCS Amount" := "TCS Amount";
        Form27EQEntry."Remaining Surcharge Amount" := "Remaining Surcharge Amount";
        Form27EQEntry."Remaining TCS Amount" := "Remaining TCS Amount";
        Form27EQEntry."Adjusted Surcharge %" := "Adjusted Surcharge %";
        Form27EQEntry."TCS Extra Base Amount" := "TCS Extra Base Amount";
        Form27EQEntry."TCS Type" := "TCS Type";
        Form27EQEntry."Work Tax Group" := "Work Tax Group";
        Form27EQEntry."Surcharge Base Amount" := "Surcharge Base Amount";
        Form27EQEntry."Service Tax Including eCess" := "Service Tax Including eCess";
        Form27EQEntry."eCESS %" := "eCESS %";
        Form27EQEntry."eCESS Amount" := "eCESS Amount";
        Form27EQEntry."Total TCS Including SHE CESS" := "Total TCS Including SHE CESS";
        Form27EQEntry."Adjusted eCESS %" := "Adjusted eCESS %";
        Form27EQEntry."SHE CESS %" := "SHE Cess %";
        Form27EQEntry."SHE CESS Amount" := "SHE Cess Amount";
        Form27EQEntry."Adjusted SHE CESS %" := "Adjusted SHE CESS %";
        Form27EQEntry."Per Contract" := "Per Contract";
        Form27EQEntry."T.C.A.N. No." := "T.C.A.N. No.";
        Form27EQEntry."Party Account No." := "Party Account No.";
        Form27EQEntry."Challan No." := "Challan No.";
        Form27EQEntry."BSR Code" := "BSR Code";
        Form27EQEntry.Reversed := Reversed;
        Form27EQEntry."Reversed by Entry No." := "Reversed by Entry No.";
        Form27EQEntry."Reversed Entry No." := "Reversed Entry No.";
        Form27EQEntry."User ID" := USERID;
        Form27EQEntry."Source Code" := "Source Code";
        Form27EQEntry."Transaction No." := "Transaction No.";
        Form27EQEntry.Printed := FALSE;
        Form27EQEntry.Filed := FALSE;
        Form27EQEntry."Filing Date" := 0D;
        Form27EQEntry."Filing Date of Revised eTCS" := 0D;
        Form27EQEntry."Check / DD No." := "Check/DD No.";
        Form27EQEntry."Check / DD Date" := "Check Date";
        Form27EQEntry."Assessment Year" := GetAssessmentYear("Posting Date");
        Form27EQEntry."Financial Year" := GetFinancialYear("Posting Date");
        Form27EQEntry.Quarter := GetQuarter("Posting Date");
        Form27EQEntry."NIL Challan Indicator" := FALSE;
        Form27EQEntry.Mode := 'O';
        ModifyForm27EQ(Form27EQEntry,TCSEntry);
        Form27EQEntry."Book Entry / Cash Indicator" := FALSE;
        Form27EQEntry."Last Total Income TCS" := "TCS Amount";
        Form27EQEntry."Total Tax Deposited" := "TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount";
        Form27EQEntry."Last Total Tax Deposited" := "TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount";
        Form27EQEntry."Amount of Payment / Credit" := "Invoice Amount";
        Form27EQEntry."Amount Paid / Credited on Date" := "Posting Date";
        Form27EQEntry."Tax Deducted / Collected Date" := "Posting Date";
        Form27EQEntry.INSERT;
      END;
    END;

    PROCEDURE ModifyForm27EQ@1500200(VAR Form27EQEntry@1500201 : Record 16517;TCSEntry@1500202 : Record 16514);
    VAR
      TCSBatchHeader@1500203 : Record 16515;
      TDSTCSAssesseeCode@1500204 : Record 13727;
      TCSParty@1500205 : Record 13730;
      Customer@1500206 : Record 18;
    BEGIN
      IF CheckTCSFiledEntries(Form27EQEntry.Quarter,Form27EQEntry."Financial Year") THEN BEGIN
        Form27EQEntry.Revised := TRUE;
        Form27EQEntry."No. of Revision" += 1;
        Form27EQEntry."Correction-C9" := TRUE;
        TCSBatchHeader.RESET;
        TCSBatchHeader.SETRANGE("Financial Year",Form27EQEntry."Financial Year");
        TCSBatchHeader.SETRANGE(Quarter,Form27EQEntry.Quarter);
        IF TCSBatchHeader.FINDFIRST THEN
          TCSBatchHeader."Correction-C9" := TRUE;
        TCSBatchHeader."No. of Revision" := 1;
        TCSBatchHeader.Revised := TRUE;
        TCSBatchHeader.MODIFY;
      END;
      IF TDSTCSAssesseeCode.Type = TDSTCSAssesseeCode.Type::Company THEN
        Form27EQEntry."Party Code1" := '1'
      ELSE
        Form27EQEntry."Party Code1" := '2';
      Form27EQEntry."Party P.A.N. No." := TCSEntry."Party P.A.N. No.";
      Form27EQEntry."Last Emp./Party P.A.N. No." := TCSEntry."Party P.A.N. No.";
      IF STRLEN(Form27EQEntry."Party P.A.N. No.") <> 10 THEN
        ERROR(Text16504);
      IF TCSEntry."Party Type" = TCSEntry."Party Type"::Party THEN BEGIN
        TCSParty.GET(TCSEntry."Party Code");
        Form27EQEntry."Party Name" := TCSParty.Name;
        Form27EQEntry."Party P.A.N. Ref. No." := TCSParty."P.A.N. Reference No.";
      END;
      IF TCSEntry."Party Type" = TCSEntry."Party Type"::Customer THEN BEGIN
        Customer.GET(TCSEntry."Party Code");
        Form27EQEntry."Party Name" := Customer.Name;
        IF (Form27EQEntry."Party P.A.N. No." = '') OR (Customer."P.A.N. Status" <> Customer."P.A.N. Status"::" ") THEN
          IF (Customer."P.A.N. Status" <> Customer."P.A.N. Status"::" ") AND (Customer."P.A.N. Reference No." <> '') THEN
            Form27EQEntry."Party P.A.N. Ref. No." := Customer."P.A.N. Reference No."
          ELSE
            ERROR(PANReferenceEmptyErr);
      END;
    END;

    PROCEDURE Reverse26Q27Q@1500026(TDSEntry@1500000 : Record 13729);
    VAR
      Form26Q27QEntry@1500001 : Record 16505;
    BEGIN
      Form26Q27QEntry.SETRANGE("TDS Entry No.",TDSEntry."Entry No.");
      IF NOT Form26Q27QEntry.FINDFIRST THEN
        ERROR(Text16505,TDSEntry."Entry No.");

      Form26Q27QEntry.Reversed := TDSEntry.Reversed;
      Form26Q27QEntry."Reversed by Entry No." := TDSEntry."Reversed by Entry No.";
      Form26Q27QEntry."Reversed Entry No." := TDSEntry."Reversed Entry No.";
      IF CheckFiledEntries(
           GetQuarter(TDSEntry."Posting Date"),GetFinancialYear(TDSEntry."Posting Date"),
           TDSEntry."Non Resident Payments")
      THEN BEGIN
        Form26Q27QEntry.Revised := TRUE;
        Form26Q27QEntry."No. of Revision" += 1;
        Form26Q27QEntry."Correction-C3" := TRUE;
      END;
      Form26Q27QEntry.MODIFY;
    END;

    PROCEDURE Reverse27EQ@1500006(TCSEntry@1500000 : Record 16514);
    VAR
      Form27EQEntry@1500001 : Record 16517;
    BEGIN
      Form27EQEntry.SETRANGE("TCS Entry No.",TCSEntry."Entry No.");
      IF NOT Form27EQEntry.FINDFIRST THEN
        ERROR(Text16505,TCSEntry."Entry No.");

      Form27EQEntry.Reversed := TCSEntry.Reversed;
      Form27EQEntry."Reversed by Entry No." := TCSEntry."Reversed by Entry No.";
      Form27EQEntry."Reversed Entry No." := TCSEntry."Reversed Entry No.";
      IF CheckTCSFiledEntries(
           GetQuarter(TCSEntry."Posting Date"),GetFinancialYear(TCSEntry."Posting Date"))
      THEN BEGIN
        Form27EQEntry.Revised := TRUE;
        Form27EQEntry."No. of Revision" += 1;
        Form27EQEntry."Correction-C3" := TRUE;
      END;
      Form27EQEntry.MODIFY;
    END;

    PROCEDURE Update26QDocNo@1500000(EntryNo@1500001 : Integer;NewDocNo@1500002 : Code[20]);
    VAR
      Form26Q27QEntry@1500000 : Record 16505;
    BEGIN
      Form26Q27QEntry.RESET;
      Form26Q27QEntry.SETRANGE("TDS Entry No.",EntryNo);
      IF Form26Q27QEntry.FINDFIRST THEN BEGIN
        Form26Q27QEntry."Pay TDS Document No." := NewDocNo;
        Form26Q27QEntry.MODIFY;
      END;
    END;

    PROCEDURE GetQuarter@1500007(EntryDate@1500001 : Date) : Integer;
    VAR
      TDSTCSPeriodSetup@1500000 : Record 16501;
    BEGIN
      TDSTCSPeriodSetup.RESET;
      TDSTCSPeriodSetup.SETFILTER("Starting Date",'<=%1',EntryDate);
      TDSTCSPeriodSetup.SETFILTER("Ending Date",'>=%1',EntryDate);
      IF TDSTCSPeriodSetup.FINDFIRST THEN
        EXIT(TDSTCSPeriodSetup.Quarter);
      ERROR(Text16503,TDSTCSPeriodSetup.TABLENAME);
    END;

    PROCEDURE GetFinancialYear@1500008(EntryDate@1500003 : Date) : Code[6];
    VAR
      StartDate@1500000 : Date;
      EndDate@1500001 : Date;
    BEGIN
      StartDate := IncomeTaxAccountingPeriod.GetTCSStartEndDate(EntryDate,0);
      EndDate := IncomeTaxAccountingPeriod.GetTCSStartEndDate(EntryDate,1);
      IF DATE2DMY(StartDate,3) = DATE2DMY(EndDate,3) THEN
        EXIT(FORMAT(DATE2DMY(StartDate,3)));

      EXIT(FORMAT(DATE2DMY(StartDate,3)) + FORMAT(EndDate,2,'<Year,2>'));
    END;

    PROCEDURE GetAssessmentYear@1500005(EntryDate@1500003 : Date) : Code[6];
    VAR
      StartDate@1500002 : Date;
      EndDate@1500001 : Date;
    BEGIN
      StartDate := IncomeTaxAccountingPeriod.GetTCSStartEndDate(EntryDate,0);
      EndDate := IncomeTaxAccountingPeriod.GetTCSStartEndDate(EntryDate,1);
      IF DATE2DMY(StartDate,3) = DATE2DMY(EndDate,3) THEN
        EXIT(FORMAT(DATE2DMY(StartDate,3) + 1));

      EXIT(FORMAT(DATE2DMY(EndDate,3)) + FORMAT(CALCDATE('<+1Y>',EndDate),2,'<Year,2>'));
    END;

    PROCEDURE GetState@1500011(Code@1500001 : Code[10]) : Code[10];
    VAR
      State@1500000 : Record 13762;
    BEGIN
      State.GET(Code);
      State.TESTFIELD("State Code for eTDS/TCS");
      EXIT(State."State Code for eTDS/TCS");
    END;

    PROCEDURE FillMinistryName@1280034(VAR Code@1500009 : Code[3];VAR Other@1500007 : Code[150]);
    VAR
      CompanyInfo@1500000 : Record 79;
      Ministry@1500001 : Record 16499;
    BEGIN
      CompanyInfo.GET;
      Ministry.GET(CompanyInfo."Ministry Code");
      Code := CompanyInfo."Ministry Code";
      CASE CompanyInfo."Ministry Type" OF
        CompanyInfo."Ministry Type"::Regular:
          Other := '';
        CompanyInfo."Ministry Type"::Others:
          Other := Ministry.Name;
      END;
    END;

    PROCEDURE FillDDOPAO@1280035(VAR DDOCode@1500001 : Code[20];VAR DDORegNo@1500002 : Code[10];VAR PAOCode@1500004 : Code[20];VAR PAORegNo@1500005 : Code[7]);
    VAR
      CompanyInfo@1500003 : Record 79;
    BEGIN
      CompanyInfo.GET;
      DDOCode := CompanyInfo."DDO Code";
      DDORegNo := CompanyInfo."DDO Registration No.";
      PAOCode := CompanyInfo."PAO Code";
      PAORegNo := CompanyInfo."PAO Registration No.";
    END;

    PROCEDURE CheckFiledEntries@1500029(Quarter@1500000 : Integer;FinancialYear@1500001 : Code[6];NRIPayment@1500002 : Boolean) : Boolean;
    VAR
      Form26Q27QEntry@1500003 : Record 16505;
    BEGIN
      Form26Q27QEntry.SETRANGE(Quarter,Quarter);
      Form26Q27QEntry.SETRANGE("Financial Year",FinancialYear);
      Form26Q27QEntry.SETRANGE("Non Resident Payments",NRIPayment);
      Form26Q27QEntry.SETRANGE(Filed,TRUE);
      IF NOT Form26Q27QEntry.FINDFIRST THEN BEGIN
        Form26Q27QEntry.SETRANGE(Filed);
        Form26Q27QEntry.SETRANGE(Revised,TRUE);
        EXIT(Form26Q27QEntry.FINDFIRST);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckChangeOfAddress@1500027(BatchEntryNo@1500000 : Integer;Address@1500002 : Text[25];State@1500003 : Code[10];PIN@1500004 : Code[10]) : Boolean;
    VAR
      BatchHeader@1500001 : Record 16503;
    BEGIN
      IF BatchHeader.GET(BatchEntryNo) THEN
        EXIT((Address <> BatchHeader."Deductor Address") OR (State <> BatchHeader."Deductor State") OR
          (PIN <> BatchHeader."Deductor Post Code"));
    END;

    PROCEDURE CheckTCSFiledEntries@1500009(Quarter@1500000 : Integer;FinancialYear@1500001 : Code[6]) : Boolean;
    VAR
      Form27EQEntry@1500003 : Record 16517;
    BEGIN
      Form27EQEntry.SETRANGE(Quarter,Quarter);
      Form27EQEntry.SETRANGE("Financial Year",FinancialYear);
      Form27EQEntry.SETRANGE(Filed,TRUE);
      IF NOT Form27EQEntry.FINDFIRST THEN BEGIN
        Form27EQEntry.SETRANGE(Filed);
        Form27EQEntry.SETRANGE(Revised,TRUE);
        EXIT(Form27EQEntry.FINDFIRST);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CheckTCSChangeOfAddress@1500002(TCSBatchEntryNo@1500000 : Integer;Address@1500002 : Text[25];State@1500003 : Code[10];PIN@1500004 : Code[10]) : Boolean;
    VAR
      TCSBatchHeader@1500001 : Record 16515;
    BEGIN
      IF TCSBatchHeader.GET(TCSBatchEntryNo) THEN
        EXIT((Address <> TCSBatchHeader."Collector Address") OR (State <> TCSBatchHeader."Collector State") OR
          (PIN <> TCSBatchHeader."Collector Post Code"));
    END;

    BEGIN
    END.
  }
}

