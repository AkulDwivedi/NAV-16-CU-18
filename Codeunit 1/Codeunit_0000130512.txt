OBJECT Codeunit 130512 Library - Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchasesPayablesSetup@1006 : Record 312;
      Assert@1002 : Codeunit 130000;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryERM@1003 : Codeunit 131300;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryJournals@1001 : Codeunit 131306;
      LibraryWarehouse@1500000 : Codeunit 132204;
      LibraryFixedAsset@1500001 : Codeunit 131330;
      SubConReceiptDate@1500002 : Date;

    PROCEDURE BlanketPurchaseOrderMakeOrder@27(VAR PurchaseHeader@1000 : Record 38) : Code[20];
    VAR
      PurchOrderHeader@1002 : Record 38;
      BlanketPurchOrderToOrder@1001 : Codeunit 97;
    BEGIN
      CLEAR(BlanketPurchOrderToOrder);
      BlanketPurchOrderToOrder.RUN(PurchaseHeader);
      BlanketPurchOrderToOrder.GetPurchOrderHeader(PurchOrderHeader);
      EXIT(PurchOrderHeader."No.");
    END;

    PROCEDURE CopyPurchaseDocument@10(PurchaseHeader@1001 : Record 38;NewDocType@1005 : Option;NewDocNo@1004 : Code[20];NewIncludeHeader@1003 : Boolean;NewRecalcLines@1002 : Boolean);
    VAR
      CopyPurchaseDocument@1000 : Report 492;
    BEGIN
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(NewDocType,NewDocNo,NewIncludeHeader,NewRecalcLines);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    PROCEDURE CreateItemChargeAssignment@32(VAR ItemChargeAssignmentPurch@1000 : Record 5805;PurchaseLine@1001 : Record 39;ItemCharge@1011 : Record 5800;DocType@1008 : Option;DocNo@1007 : Code[20];DocLineNo@1006 : Integer;ItemNo@1003 : Code[20];Qty@1009 : Decimal;UnitCost@1010 : Decimal);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      CLEAR(ItemChargeAssignmentPurch);

      WITH ItemChargeAssignmentPurch DO BEGIN
        "Document Type" := PurchaseLine."Document Type";
        "Document No." := PurchaseLine."Document No.";
        "Document Line No." := PurchaseLine."Line No.";
        "Item Charge No." := PurchaseLine."No.";
        "Unit Cost" := PurchaseLine."Unit Cost";
        RecRef.GETTABLE(ItemChargeAssignmentPurch);
        "Line No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No."));
        "Item Charge No." := ItemCharge."No.";
        "Applies-to Doc. Type" := DocType;
        "Applies-to Doc. No." := DocNo;
        "Applies-to Doc. Line No." := DocLineNo;
        "Item No." := ItemNo;
        "Unit Cost" := UnitCost;
        VALIDATE("Qty. to Assign",Qty);
      END;
    END;

    PROCEDURE CreateOrderAddress@13(VAR OrderAddress@1000 : Record 224;VendorNo@1001 : Code[20]);
    BEGIN
      OrderAddress.INIT;
      OrderAddress.VALIDATE("Vendor No.",VendorNo);
      OrderAddress.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(OrderAddress.FIELDNO(Code),DATABASE::"Order Address"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Order Address",OrderAddress.FIELDNO(Code))));
      OrderAddress.INSERT(TRUE);
    END;

    PROCEDURE CreatePrepaymentVATSetup@34(VAR LineGLAccount@1001 : Record 15;VATCalculationType@1000 : Option) : Code[20];
    VAR
      PrepmtGLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreatePrepaymentVATSetup(
        LineGLAccount,PrepmtGLAccount,LineGLAccount."Gen. Posting Type"::Purchase,VATCalculationType,VATCalculationType);
      EXIT(PrepmtGLAccount."No.");
    END;

    PROCEDURE CreatePurchasingCode@7(VAR Purchasing@1000 : Record 5721);
    BEGIN
      Purchasing.INIT;
      Purchasing.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Purchasing.FIELDNO(Code),DATABASE::Purchasing),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Purchasing,Purchasing.FIELDNO(Code))));
      Purchasing.INSERT(TRUE);
    END;

    PROCEDURE CreatePurchHeader@3(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;BuyfromVendorNo@1002 : Code[20]);
    BEGIN
      CLEAR(PurchaseHeader);
      PurchaseHeader.VALIDATE("Document Type",DocumentType);
      PurchaseHeader.INSERT(TRUE);
      IF BuyfromVendorNo = '' THEN
        BuyfromVendorNo := CreateVendorNo;
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",BuyfromVendorNo);
      IF PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::"Credit Memo",
                                            PurchaseHeader."Document Type"::"Return Order"]
      THEN
        PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID)
      ELSE
        PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      SetCorrDocNoPurchase(PurchaseHeader);
      PurchaseHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchHeaderWithDocNo@16(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;BuyfromVendorNo@1002 : Code[20];DocNo@1003 : Code[20]);
    BEGIN
      CLEAR(PurchaseHeader);
      PurchaseHeader.VALIDATE("Document Type",DocumentType);
      PurchaseHeader."No." := DocNo;
      PurchaseHeader.INSERT(TRUE);
      IF BuyfromVendorNo = '' THEN
        BuyfromVendorNo := CreateVendorNo;
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",BuyfromVendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      SetCorrDocNoPurchase(PurchaseHeader);
      PurchaseHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchaseLine@4(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;Type@1006 : Option;No@1005 : Code[20];Quantity@1004 : Decimal);
    VAR
      RecRef@1003 : RecordRef;
      LibrarySales@1500000 : Codeunit 130509;
      FixedAsset@1500001 : Record 5600;
    BEGIN
      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      RecRef.GETTABLE(PurchaseLine);
      PurchaseLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,PurchaseLine.FIELDNO("Line No.")));
      PurchaseLine.INSERT(TRUE);

      PurchaseLine.VALIDATE(Type,Type);
      CASE Type OF
        PurchaseLine.Type::Item:
          IF No = '' THEN
            No := LibraryInventory.CreateItemNo;
        PurchaseLine.Type::"Charge (Item)":
          IF No = '' THEN
            No := LibraryInventory.CreateItemChargeNo;
        PurchaseLine.Type::"Fixed Asset":
          IF No = '' THEN BEGIN
            LibraryFixedAsset.CreateFixedAsset(FixedAsset);
            No := FixedAsset."No.";
          END;
        PurchaseLine.Type::"G/L Account":
          IF No = '' THEN
            No := LibraryERM.CreateGLAccountNo;
      END;

      IF No <> '' THEN
          LibrarySales.FindType(PurchaseLine.Type,No,PurchaseHeader."Gen. Bus. Posting Group",PurchaseHeader."VAT Bus. Posting Group");

      PurchaseLine.VALIDATE("No.",No);
      PurchaseLine.VALIDATE(Quantity,Quantity);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchCommentLine@22(VAR PurchCommentLine@1000 : Record 43;DocumentType@1001 : Option;No@1003 : Code[20];DocumentLineNo@1004 : Integer);
    VAR
      RecRef@1006 : RecordRef;
    BEGIN
      PurchCommentLine.INIT;
      PurchCommentLine.VALIDATE("Document Type",DocumentType);
      PurchCommentLine.VALIDATE("No.",No);
      PurchCommentLine.VALIDATE("Document Line No.",DocumentLineNo);
      RecRef.GETTABLE(PurchCommentLine);
      PurchCommentLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,PurchCommentLine.FIELDNO("Line No.")));
      PurchCommentLine.INSERT(TRUE);
      // Validate Comment as primary key to enable user to distinguish between comments because value is not important.
      PurchCommentLine.VALIDATE(
        Comment,FORMAT(PurchCommentLine."Document Type") + PurchCommentLine."No." +
        FORMAT(PurchCommentLine."Document Line No.") + FORMAT(PurchCommentLine."Line No."));
      PurchCommentLine.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchaseDocumentWithItem@24(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1008 : Record 39;DocumentType@1007 : Option;VendorNo@1005 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];ExpectedReceiptDate@1006 : Date);
    BEGIN
      CreateFCYPurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,DocumentType,VendorNo,ItemNo,Quantity,LocationCode,ExpectedReceiptDate,'');
    END;

    PROCEDURE CreateFCYPurchaseDocumentWithItem@40(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1008 : Record 39;DocumentType@1007 : Option;VendorNo@1005 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];ExpectedReceiptDate@1006 : Date;CurrencyCode@1004 : Code[10]);
    BEGIN
      CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      IF LocationCode <> '' THEN
        PurchaseHeader.VALIDATE("Location Code",LocationCode);
      IF CurrencyCode <> '' THEN
        PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      IF ItemNo = '' THEN
        ItemNo := LibraryInventory.CreateItemNo;
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      IF LocationCode <> '' THEN
        PurchaseLine.VALIDATE("Location Code",LocationCode);
      IF ExpectedReceiptDate <> 0D THEN
        PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchasePrepaymentPct@38(VAR PurchasePrepaymentPct@1000 : Record 460;ItemNo@1003 : Code[20];VendorNo@1001 : Code[20];StartingDate@1004 : Date);
    BEGIN
      PurchasePrepaymentPct.INIT;
      PurchasePrepaymentPct.VALIDATE("Item No.",ItemNo);
      PurchasePrepaymentPct.VALIDATE("Vendor No.",VendorNo);
      PurchasePrepaymentPct.VALIDATE("Starting Date",StartingDate);
      PurchasePrepaymentPct.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardPurchaseCode@17(VAR StandardPurchaseCode@1000 : Record 173);
    BEGIN
      StandardPurchaseCode.INIT;
      StandardPurchaseCode.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(StandardPurchaseCode.FIELDNO(Code),DATABASE::"Standard Purchase Code"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Standard Purchase Code",StandardPurchaseCode.FIELDNO(Code))));
      // Validating Description as Code because value is not important.
      StandardPurchaseCode.VALIDATE(Description,StandardPurchaseCode.Code);
      StandardPurchaseCode.INSERT(TRUE);
    END;

    PROCEDURE CreateStandardPurchaseLine@15(VAR StandardPurchaseLine@1000 : Record 174;StandardPurchaseCode@1001 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      StandardPurchaseLine.INIT;
      StandardPurchaseLine.VALIDATE("Standard Purchase Code",StandardPurchaseCode);
      RecRef.GETTABLE(StandardPurchaseLine);
      StandardPurchaseLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,StandardPurchaseLine.FIELDNO("Line No.")));
      StandardPurchaseLine.INSERT(TRUE);
    END;

    PROCEDURE CreateSubcontractor@21(VAR Vendor@1000 : Record 23);
    BEGIN
      CreateVendor(Vendor);
      CreateSetupForSubContracting(Vendor);
    END;

    PROCEDURE CreateVendor@2(VAR Vendor@1000 : Record 23) : Code[20];
    VAR
      PaymentMethod@1002 : Record 289;
      GeneralPostingSetup@1003 : Record 252;
      VATPostingSetup@1001 : Record 325;
      PaymentTerms@1500000 : Record 3;
    BEGIN
      LibraryERM.FindPaymentMethod(PaymentMethod);
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetupInvt(VATPostingSetup);
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      LibraryUtility.UpdateSetupNoSeriesCode(
        DATABASE::"Purchases & Payables Setup",PurchasesPayablesSetup.FIELDNO("Vendor Nos."));

      CLEAR(Vendor);
      Vendor.INSERT(TRUE);
      Vendor.VALIDATE(Name,Vendor."No."); // Validating Name as No. because value is not important.
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.VALIDATE("Vendor Posting Group",FindVendorPostingGroup);
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.VALIDATE("Payment Method Code",PaymentMethod.Code);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    PROCEDURE CreateVendorNo@14() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    PROCEDURE CreateVendorPostingGroup@93(VAR VendorPostingGroup@1001 : Record 93);
    BEGIN
      VendorPostingGroup.INIT;
      VendorPostingGroup.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(VendorPostingGroup.FIELDNO(Code),DATABASE::"Vendor Posting Group"));
      VendorPostingGroup.VALIDATE("Payables Account",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Service Charge Acc.",LibraryERM.CreateGLAccountWithPurchSetup);
      VendorPostingGroup.VALIDATE("Invoice Rounding Account",LibraryERM.CreateGLAccountWithPurchSetup);
      VendorPostingGroup.VALIDATE("Debit Rounding Account",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Credit Rounding Account",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Payment Disc. Debit Acc.",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Payment Disc. Credit Acc.",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Payment Tolerance Debit Acc.",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Payment Tolerance Credit Acc.",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Debit Curr. Appln. Rndg. Acc.",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.VALIDATE("Credit Curr. Appln. Rndg. Acc.",LibraryERM.CreateGLAccountNo);
      VendorPostingGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateVendorWithLocationCode@114(VAR Vendor@1000 : Record 23;LocationCode@1001 : Code[10]) : Code[20];
    BEGIN
      WITH Vendor DO BEGIN
        CreateVendor(Vendor);
        VALIDATE("Location Code",LocationCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    PROCEDURE CreateVendorWithBusPostingGroups@31(GenBusPostGroupCode@1000 : Code[10];VATBusPostGroupCode@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      WITH Vendor DO BEGIN
        CreateVendor(Vendor);
        VALIDATE("Gen. Bus. Posting Group",GenBusPostGroupCode);
        VALIDATE("VAT Bus. Posting Group",VATBusPostGroupCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    PROCEDURE CreateVendorWithVATBusPostingGroup@181(VATBusPostGroupCode@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      WITH Vendor DO BEGIN
        CreateVendor(Vendor);
        VALIDATE("VAT Bus. Posting Group",VATBusPostGroupCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    PROCEDURE CreateVendorWithVATRegNo@28(VAR Vendor@1000 : Record 23) : Code[20];
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      CreateVendor(Vendor);
      LibraryERM.CreateCountryRegion(CountryRegion);
      Vendor.VALIDATE("Country/Region Code",CountryRegion.Code);
      Vendor.VALIDATE("VAT Registration No.",LibraryERM.GenerateVATRegistrationNo(CountryRegion.Code));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    PROCEDURE CreateVendorWithAddress@44(VAR Vendor@1000 : Record 23);
    VAR
      PostCode@1001 : Record 225;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);
      CreateVendor(Vendor);
      Vendor.VALIDATE(Name,LibraryUtility.GenerateRandomText(MAXSTRLEN(Vendor.Name)));
      Vendor.VALIDATE(Address,LibraryUtility.GenerateRandomText(MAXSTRLEN(Vendor.Address)));
      Vendor.VALIDATE("Post Code",PostCode.Code);
      Vendor.Contact := COPYSTR(LibraryUtility.GenerateRandomText(MAXSTRLEN(Vendor.Contact)),1,MAXSTRLEN(Vendor.Contact));
      Vendor.MODIFY(TRUE);
    END;

    PROCEDURE CreateVendorBankAccount@6(VAR VendorBankAccount@1001 : Record 288;VendorNo@1000 : Code[20]);
    BEGIN
      VendorBankAccount.INIT;
      VendorBankAccount.VALIDATE("Vendor No.",VendorNo);
      VendorBankAccount.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(VendorBankAccount.FIELDNO(Code),DATABASE::"Vendor Bank Account"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(Code))));
      VendorBankAccount.INSERT(TRUE);
    END;

    PROCEDURE CreateVendorPurchaseCode@25(VAR StandardVendorPurchaseCode@1000 : Record 175;VendorNo@1001 : Code[20];Code@1002 : Code[10]);
    BEGIN
      StandardVendorPurchaseCode.INIT;
      StandardVendorPurchaseCode.VALIDATE("Vendor No.",VendorNo);
      StandardVendorPurchaseCode.VALIDATE(Code,Code);
      StandardVendorPurchaseCode.INSERT(TRUE);
    END;

    PROCEDURE CreatePurchaseHeaderPostingJobQueueEntry@18(VAR JobQueueEntry@1000 : Record 472;PurchaseHeader@1001 : Record 38);
    BEGIN
      JobQueueEntry.INIT;
      JobQueueEntry.ID := CREATEGUID;
      JobQueueEntry."Earliest Start Date/Time" := CREATEDATETIME(TODAY,0T);
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"Purchase Post via Job Queue";
      JobQueueEntry."Record ID to Process" := PurchaseHeader.RECORDID;
      JobQueueEntry."Run in User Session" := TRUE;
      JobQueueEntry.Priority := 1000;
      JobQueueEntry.INSERT(TRUE);
    END;

    PROCEDURE DeleteInvoicedPurchOrders@26(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseHeader2@1002 : Record 38;
      DeleteInvoicedPurchOrders@1001 : Report 499;
    BEGIN
      IF PurchaseHeader.HASFILTER THEN
        PurchaseHeader2.COPYFILTERS(PurchaseHeader)
      ELSE BEGIN
        PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
        PurchaseHeader2.SETRANGE("Document Type",PurchaseHeader."Document Type");
        PurchaseHeader2.SETRANGE("No.",PurchaseHeader."No.");
      END;
      CLEAR(DeleteInvoicedPurchOrders);
      DeleteInvoicedPurchOrders.SETTABLEVIEW(PurchaseHeader2);
      DeleteInvoicedPurchOrders.USEREQUESTPAGE(FALSE);
      DeleteInvoicedPurchOrders.RUNMODAL;
    END;

    PROCEDURE ExplodeBOM@70(VAR PurchaseLine@1001 : Record 39);
    VAR
      PurchExplodeBOM@1000 : Codeunit 73;
    BEGIN
      CLEAR(PurchExplodeBOM);
      PurchExplodeBOM.RUN(PurchaseLine);
    END;

    PROCEDURE FindVendorPostingGroup@19() : Code[10];
    VAR
      VendorPostingGroup@1000 : Record 93;
    BEGIN
      IF NOT VendorPostingGroup.FINDFIRST THEN
        CreateVendorPostingGroup(VendorPostingGroup);
      EXIT(VendorPostingGroup.Code);
    END;

    PROCEDURE GetDropShipment@96(VAR PurchaseHeader@1001 : Record 38);
    VAR
      PurchGetDropShpt@1000 : Codeunit 76;
    BEGIN
      CLEAR(PurchGetDropShpt);
      PurchGetDropShpt.RUN(PurchaseHeader);
    END;

    PROCEDURE GetPurchaseReceiptLine@30(VAR PurchaseLine@1001 : Record 39);
    VAR
      PurchGetReceipt@1000 : Codeunit 74;
    BEGIN
      CLEAR(PurchGetReceipt);
      PurchGetReceipt.RUN(PurchaseLine);
    END;

    PROCEDURE GetSpecialOrder@29(VAR PurchaseHeader@1000 : Record 38);
    VAR
      DistIntegration@1001 : Codeunit 5702;
    BEGIN
      CLEAR(DistIntegration);
      DistIntegration.GetSpecialOrders(PurchaseHeader);
    END;

    PROCEDURE PostPurchasePrepaymentCrMemo@12(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchPostPrepayments@1001 : Codeunit 444;
    BEGIN
      PurchPostPrepayments.CreditMemo(PurchaseHeader);
    END;

    PROCEDURE PostPurchasePrepaymentInvoice@11(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchasePostPrepayments@1002 : Codeunit 444;
    BEGIN
      PurchasePostPrepayments.Invoice(PurchaseHeader);
    END;

    PROCEDURE PostPurchaseDocument@23(VAR PurchaseHeader@1002 : Record 38;ToShipReceive@1001 : Boolean;ToInvoice@1000 : Boolean) DocumentNo : Code[20];
    VAR
      NoSeriesManagement@1005 : Codeunit 396;
      NoSeriesCode@1004 : Code[10];
    BEGIN
      // Post the purchase document.
      // Depending on the document type and posting type return the number of the:
      // - purchase receipt,
      // - posted purchase invoice,
      // - purchase return shipment, or
      // - posted credit memo
      SetCorrDocNoPurchase(PurchaseHeader);
      WITH PurchaseHeader DO BEGIN
        VALIDATE(Receive,ToShipReceive);
        VALIDATE(Ship,ToShipReceive);
        VALIDATE(Invoice,ToInvoice);

        CASE "Document Type" OF
          "Document Type"::Invoice:
            NoSeriesCode := "Posting No. Series"; // posted purchase invoice
          "Document Type"::Order:
            IF ToShipReceive AND NOT ToInvoice THEN
              NoSeriesCode := "Receiving No. Series" // posted purchase receipt
            ELSE
              NoSeriesCode := "Posting No. Series"; // posted purchase invoice
          "Document Type"::"Credit Memo":
            NoSeriesCode := "Posting No. Series"; // posted purchase credit memo
          "Document Type"::"Return Order":
            IF ToShipReceive AND NOT ToInvoice THEN
              NoSeriesCode := "Return Shipment No. Series" // posted purchase return shipment
            ELSE
              NoSeriesCode := "Posting No. Series"; // posted purchase credit memo
          ELSE
            Assert.Fail(STRSUBSTNO('Document type not supported: %1',"Document Type"))
        END
      END;

      DocumentNo := NoSeriesManagement.GetNextNo(NoSeriesCode,LibraryUtility.GetNextNoSeriesPurchaseDate(NoSeriesCode),FALSE);

      IF (ToShipReceive) AND (PurchaseHeader.Subcontracting) THEN
        UpdateSubConOrder(PurchaseHeader);

      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);

      IF (ToShipReceive) AND (PurchaseHeader.Subcontracting) THEN
        UpdateSubConOrderZero(PurchaseHeader);
    END;

    PROCEDURE QuoteMakeOrder@65(VAR PurchaseHeader@1000 : Record 38) : Code[20];
    VAR
      PurchaseOrderHeader@1002 : Record 38;
      PurchQuoteToOrder@1001 : Codeunit 96;
    BEGIN
      CLEAR(PurchQuoteToOrder);
      PurchQuoteToOrder.RUN(PurchaseHeader);
      PurchQuoteToOrder.GetPurchOrderHeader(PurchaseOrderHeader);
      EXIT(PurchaseOrderHeader."No.");
    END;

    PROCEDURE ReleasePurchaseDocument@1(VAR PurchaseHeader@1000 : Record 38);
    VAR
      ReleasePurchDoc@1001 : Codeunit 415;
    BEGIN
      ReleasePurchDoc.PerformManualRelease(PurchaseHeader);
    END;

    PROCEDURE ReopenPurchaseDocument@110(VAR PurchaseHeader@1000 : Record 38);
    VAR
      ReleasePurchDoc@1001 : Codeunit 415;
    BEGIN
      ReleasePurchDoc.PerformManualReopen(PurchaseHeader);
    END;

    PROCEDURE RunBatchPostPurchaseReturnOrdersReport@127(VAR PurchaseHeader@1001 : Record 38);
    VAR
      BatchPostPurchRetOrders@1000 : Report 6665;
    BEGIN
      CLEAR(BatchPostPurchRetOrders);
      BatchPostPurchRetOrders.SETTABLEVIEW(PurchaseHeader);
      COMMIT;  // COMMIT is required to run this report.
      BatchPostPurchRetOrders.USEREQUESTPAGE(TRUE);
      BatchPostPurchRetOrders.RUN;
    END;

    PROCEDURE RunDeleteInvoicedPurchaseReturnOrdersReport@107(VAR PurchaseHeader@1001 : Record 38);
    VAR
      DeleteInvdPurchRetOrders@1000 : Report 6661;
    BEGIN
      CLEAR(DeleteInvdPurchRetOrders);
      DeleteInvdPurchRetOrders.SETTABLEVIEW(PurchaseHeader);
      DeleteInvdPurchRetOrders.USEREQUESTPAGE(FALSE);
      DeleteInvdPurchRetOrders.RUN;
    END;

    PROCEDURE RunMoveNegativePurchaseLinesReport@102(VAR PurchaseHeader@1004 : Record 38;FromDocType@1007 : Option;ToDocType@1006 : Option;ToDocType2@1008 : Option);
    VAR
      MoveNegativePurchaseLines@1000 : Report 6698;
    BEGIN
      CLEAR(MoveNegativePurchaseLines);
      MoveNegativePurchaseLines.SetPurchHeader(PurchaseHeader);
      MoveNegativePurchaseLines.InitializeRequest(FromDocType,ToDocType,ToDocType2);
      MoveNegativePurchaseLines.USEREQUESTPAGE(FALSE);
      MoveNegativePurchaseLines.RUN;
    END;

    PROCEDURE SetAllowVATDifference@39(AllowVATDifference@1000 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Allow VAT Difference",AllowVATDifference);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetArchiveQuotesAndOrders@5(ArchiveQuotesandOrders@1001 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Archive Quotes and Orders",ArchiveQuotesandOrders);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetCalcInvDiscount@33(CalcInvDiscount@1000 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Calc. Inv. Discount",CalcInvDiscount);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetCorrDocNoPurchase@20(VAR PurchHeader@1000 : Record 38);
    BEGIN
      WITH PurchHeader DO
        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN;
    END;

    PROCEDURE SetInvoiceRounding@36(InvoiceRounding@1000 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Invoice Rounding",InvoiceRounding);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetExactCostReversingMandatory@54(ExactCostReversingMandatory@1000 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetExtDocNo@100(ExtDocNoMandatory@1001 : Boolean);
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Ext. Doc. No. Mandatory",ExtDocNoMandatory);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    PROCEDURE SelectPmtJnlBatch@35(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryJournals.SelectGenJournalBatch(GenJournalBatch,SelectPmtJnlTemplate);
    END;

    PROCEDURE SelectPmtJnlTemplate@37() : Code[10];
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      EXIT(LibraryJournals.SelectGenJournalTemplate(GenJournalTemplate.Type::Payments,PAGE::"Payment Journal"));
    END;

    PROCEDURE UndoPurchaseReceiptLine@9(VAR PurchRcptLine@1000 : Record 121);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Undo Purchase Receipt Line",PurchRcptLine);
    END;

    PROCEDURE UndoReturnShipmentLine@8(VAR ReturnShipmentLine@1000 : Record 6651);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Undo Return Shipment Line",ReturnShipmentLine);
    END;

    PROCEDURE CreateSetupForSubContracting@1500000(Vendor@1500000 : Record 23);
    VAR
      VendorLocation@1500001 : Record 14;
      InventorySetup@1500002 : Record 313;
    BEGIN
      VendorLocation.SETRANGE("Subcontracting Location",TRUE);
      IF NOT VendorLocation.FINDFIRST THEN BEGIN
        LibraryWarehouse.CreateLocationWithInventoryPostingSetup(VendorLocation);
        VendorLocation.VALIDATE("Subcontracting Location",TRUE);
        VendorLocation.MODIFY(TRUE);
      END;
      InventorySetup.GET;
      InventorySetup.VALIDATE("Job Work Return Period",1);
      InventorySetup.MODIFY(TRUE);
      IF Vendor."Vendor Location" = '' THEN BEGIN
        Vendor."Vendor Location" := VendorLocation.Code;
        Vendor.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateSubConOrder@1500001(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchLine@1500001 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchLine.SETRANGE(Subcontracting,TRUE);
      IF PurchLine.FINDFIRST THEN BEGIN
        PurchaseHeader.VALIDATE(SubConPostLine,PurchLine."Line No.");
        PurchaseHeader.MODIFY(TRUE);
        IF SubConReceiptDate <> 0D THEN
          PurchLine.VALIDATE("Posting Date",SubConReceiptDate)
        ELSE
          PurchLine.VALIDATE("Posting Date",PurchaseHeader."Posting Date");
        PurchLine.VALIDATE("Qty. to Receive",PurchLine.Quantity);
        PurchLine.VALIDATE("Vendor Shipment No.",PurchaseHeader."No.");
        PurchLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateSubConOrderZero@1500002(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchLine@1500001 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchLine.SETRANGE(Subcontracting,TRUE);
      IF PurchLine.FINDFIRST THEN
        PurchLine.UpdateProdOrder();
      PurchaseHeader.VALIDATE(SubConPostLine,0);
      PurchaseHeader.MODIFY();
    END;

    PROCEDURE SetSubConReceiptPostingDate@1500005(PostingDate@1500000 : Date);
    BEGIN
      SubConReceiptDate := PostingDate;
    END;

    BEGIN
    {
      Contains all utility functions related to Purchase.
    }
    END.
  }
}

