OBJECT Codeunit 131330 Library - Fixed Asset
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FASetup@1002 : Record 5603;
      LibraryERM@1001 : Codeunit 131300;
      LibraryUtility@1000 : Codeunit 131000;
      Assert@1003 : Codeunit 130000;
      FARegisterGLRegisterErr@1004 : TextConst 'ENU=There should be only one FA Register related to the last GL register.';

    PROCEDURE CreateCommentLine@13(VAR CommentLine@1000 : Record 97;TableName@1001 : Option;No@1002 : Code[20]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      CommentLine.INIT;
      CommentLine.VALIDATE("Table Name",TableName);
      CommentLine.VALIDATE("No.",No);
      RecRef.GETTABLE(CommentLine);
      CommentLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,CommentLine.FIELDNO("Line No.")));
      CommentLine.INSERT(TRUE);
    END;

    PROCEDURE CreateDepreciationBook@55(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.INIT;
      DepreciationBook.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DepreciationBook.FIELDNO(Code),DATABASE::"Depreciation Book"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Depreciation Book",DepreciationBook.FIELDNO(Code))));
      DepreciationBook.VALIDATE(Description,DepreciationBook.Code);  // Validating Description as Code because value is not important.
      DepreciationBook.INSERT(TRUE);
    END;

    PROCEDURE CreateFADepreciationBook@53(VAR FADepreciationBook@1000 : Record 5612;FANo@1001 : Code[20];DepreciationBookCode@1003 : Code[10]);
    BEGIN
      FADepreciationBook.INIT;
      FADepreciationBook.VALIDATE("FA No.",FANo);
      FADepreciationBook.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FADepreciationBook.INSERT(TRUE);
    END;

    PROCEDURE CreateFAAllocation@60(VAR FAAllocation@1000 : Record 5615;Code@1003 : Code[10];AllocationType@1001 : Option);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      FAAllocation.INIT;
      FAAllocation.VALIDATE(Code,Code);
      FAAllocation.VALIDATE("Allocation Type",AllocationType);
      RecRef.GETTABLE(FAAllocation);
      FAAllocation.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FAAllocation.FIELDNO("Line No.")));
      FAAllocation.INSERT(TRUE);
    END;

    PROCEDURE CreateFAJournalLine@49(VAR FAJournalLine@1006 : Record 5621;JournalTemplateName@1005 : Code[10];JournalBatchName@1004 : Code[10]);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      // Create a Fixed Asset General Journal Entry.
      FAJournalLine.INIT;
      FAJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      FAJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(FAJournalLine);
      FAJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FAJournalLine.FIELDNO("Line No.")));
      FAJournalLine.INSERT(TRUE);
    END;

    PROCEDURE CreateFAJournalSetup@57(VAR FAJournalSetup@1000 : Record 5605;DepreciationBookCode@1001 : Code[10];UserID@1002 : Code[20]);
    BEGIN
      FAJournalSetup.INIT;
      FAJournalSetup.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAJournalSetup.VALIDATE("User ID",UserID);
      FAJournalSetup.INSERT(TRUE);
    END;

    PROCEDURE CreateFAPostingGroup@58(VAR FAPostingGroup@1000 : Record 5606);
    BEGIN
      FAPostingGroup.INIT;
      FAPostingGroup.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAPostingGroup.FIELDNO(Code),DATABASE::"FA Posting Group"),
          1,LibraryUtility.GetFieldLength(DATABASE::"FA Posting Group",FAPostingGroup.FIELDNO(Code))));
      FAPostingGroup.VALIDATE("Acquisition Cost Account",LibraryERM.CreateGLAccountWithPurchSetup);
      FAPostingGroup.VALIDATE("Accum. Depreciation Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Write-Down Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Appreciation Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 1 Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 2 Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Acq. Cost Acc. on Disposal",LibraryERM.CreateGLAccountWithPurchSetup);
      FAPostingGroup.VALIDATE("Accum. Depr. Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Write-Down Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Appreciation Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 1 Account on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 2 Account on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Gains Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Losses Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Book Val. Acc. on Disp. (Gain)",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Sales Acc. on Disp. (Gain)",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Write-Down Bal. Acc. on Disp.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Apprec. Bal. Acc. on Disp.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 1 Bal. Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 2 Bal. Acc. on Disposal",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Maintenance Expense Account",LibraryERM.CreateGLAccountWithPurchSetup);
      FAPostingGroup.VALIDATE("Maintenance Bal. Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Acquisition Cost Bal. Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Depreciation Expense Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Write-Down Expense Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Appreciation Bal. Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 1 Expense Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Custom 2 Expense Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Sales Bal. Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Sales Acc. on Disp. (Loss)",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Book Val. Acc. on Disp. (Loss)",LibraryERM.CreateGLAccountNo);

      FAPostingGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateFAReclassJournal@3(VAR FAReclassJournalLine@1000 : Record 5624;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      // Create a Fixed Asset Reclass Journal Entry.
      FAReclassJournalLine.INIT;
      FAReclassJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      FAReclassJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(FAReclassJournalLine);
      FAReclassJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FAReclassJournalLine.FIELDNO("Line No.")));
      FAReclassJournalLine.INSERT(TRUE);
    END;

    PROCEDURE CreateFAReclassJournalBatch@8(VAR FAReclassJournalBatch@1000 : Record 5623;JournalTemplateName@1001 : Code[10]);
    BEGIN
      FAReclassJournalBatch.INIT;
      FAReclassJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
      FAReclassJournalBatch.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAReclassJournalBatch.FIELDNO(Name),DATABASE::"FA Reclass. Journal Batch"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Journal Batch",FAReclassJournalBatch.FIELDNO(Name))));

      // Validating Description as Name because value is not important.
      FAReclassJournalBatch.VALIDATE(Description,FAReclassJournalBatch.Name);
      FAReclassJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateFAJournalBatch@64(VAR FAJournalBatch@1000 : Record 5620;JournalTemplateName@1001 : Code[10]);
    BEGIN
      // creates a new FA Journal Batch named with the next available number (if it does not yet exist), OR
      // returns the FA Journal batch named with the next available number

      FAJournalBatch.INIT;
      FAJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
      FAJournalBatch.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAJournalBatch.FIELDNO(Name),DATABASE::"FA Journal Batch"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Journal Batch",FAJournalBatch.FIELDNO(Name))));
      FAJournalBatch.VALIDATE(Description,FAJournalBatch.Name);  // Validating Description as Name because value is not important.
      IF FAJournalBatch.INSERT(TRUE) THEN ;
    END;

    PROCEDURE CreateFixedAsset@48(VAR FixedAsset@1000 : Record 5600);
    VAR
      GenProductPostingGroup@1500000 : Record 251;
    BEGIN
      LibraryUtility.UpdateSetupNoSeriesCode(DATABASE::"FA Setup",FASetup.FIELDNO("Fixed Asset Nos."));

      FixedAsset.INIT;
      FixedAsset.INSERT(TRUE);
      FixedAsset.VALIDATE(Description,FixedAsset."No.");  // Validating Description as No because value is not important.
      LibraryERM.FindGenProductPostingGroup(GenProductPostingGroup);
      FixedAsset.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      FixedAsset.MODIFY(TRUE);
    END;

    PROCEDURE CreateFAWithPostingGroup@22(VAR FixedAsset@1000 : Record 5600);
    VAR
      FAPostingGroup@1001 : Record 5606;
    BEGIN
      CreateFAPostingGroup(FAPostingGroup);
      CreateFixedAsset(FixedAsset);
      FixedAsset.VALIDATE("FA Posting Group",FAPostingGroup.Code);
      FixedAsset.MODIFY(TRUE);
    END;

    PROCEDURE CreateGLBudgetName@18(VAR GLBudgetName@1000 : Record 95);
    BEGIN
      GLBudgetName.INIT;
      GLBudgetName.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GLBudgetName.FIELDNO(Name),DATABASE::"G/L Budget Name"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"G/L Budget Name",GLBudgetName.FIELDNO(Name))));

      // Validating Description as Name because value is not important.
      GLBudgetName.VALIDATE(Description,GLBudgetName.Name);
      GLBudgetName.INSERT(TRUE);
    END;

    PROCEDURE CreateInsurance@46(VAR Insurance@1000 : Record 5628);
    BEGIN
      LibraryUtility.UpdateSetupNoSeriesCode(DATABASE::"FA Setup",FASetup.FIELDNO("Insurance Nos."));

      Insurance.INIT;
      Insurance.INSERT(TRUE);
      Insurance.VALIDATE(Description,Insurance."No.");  // Validating Description as No because value is not important.
      Insurance.MODIFY(TRUE);
    END;

    PROCEDURE CreateInsuranceJournalBatch@10(VAR InsuranceJournalBatch@1000 : Record 5634;JournalTemplateName@1001 : Code[10]);
    BEGIN
      InsuranceJournalBatch.INIT;
      InsuranceJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
      InsuranceJournalBatch.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(InsuranceJournalBatch.FIELDNO(Name),DATABASE::"Insurance Journal Batch"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Insurance Journal Batch",InsuranceJournalBatch.FIELDNO(Name))));

      // Validating Description as Name because value is not important.
      InsuranceJournalBatch.VALIDATE(Description,InsuranceJournalBatch.Name);
      InsuranceJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateInsuranceJournalLine@1(VAR InsuranceJournalLine@1000 : Record 5635;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      // Create an Insurance Journal Entry.
      InsuranceJournalLine.INIT;
      InsuranceJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      InsuranceJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(InsuranceJournalLine);
      InsuranceJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,InsuranceJournalLine.FIELDNO("Line No.")));
      InsuranceJournalLine.INSERT(TRUE);
    END;

    PROCEDURE CreateMaintenance@92(VAR Maintenance@1000 : Record 5626);
    BEGIN
      Maintenance.INIT;
      Maintenance.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Maintenance.FIELDNO(Code),DATABASE::Maintenance),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Maintenance,Maintenance.FIELDNO(Code))));

      // Validating Description as Code because value is not important.
      Maintenance.VALIDATE(Description,Maintenance.Code);
      Maintenance.INSERT(TRUE);
    END;

    PROCEDURE CreateInsuranceType@100(VAR InsuranceType@1000 : Record 5630);
    BEGIN
      InsuranceType.INIT;
      InsuranceType.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(InsuranceType.FIELDNO(Code),DATABASE::"Insurance Type"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Insurance Type",InsuranceType.FIELDNO(Code))));

      // Validating Description as Code because value is not important.
      InsuranceType.VALIDATE(Description,InsuranceType.Code);
      InsuranceType.INSERT(TRUE);
    END;

    PROCEDURE CreateJournalTemplate@6(VAR FAJournalTemplate@1000 : Record 5619);
    BEGIN
      FAJournalTemplate.INIT;
      FAJournalTemplate.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAJournalTemplate.FIELDNO(Name),DATABASE::"FA Journal Template"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Journal Template",FAJournalTemplate.FIELDNO(Name))));

      // Validating Description as Name because value is not important.
      FAJournalTemplate.VALIDATE(Description,FAJournalTemplate.Name);
      FAJournalTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateDepreciationTableHeader@74(VAR DepreciationTableHeader@1000 : Record 5642);
    BEGIN
      DepreciationTableHeader.INIT;
      DepreciationTableHeader.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DepreciationTableHeader.FIELDNO(Code),DATABASE::"Depreciation Table Header"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Depreciation Table Header",DepreciationTableHeader.FIELDNO(Code))));

      // Validating Description as Code because value is not important.
      DepreciationTableHeader.VALIDATE(Description,DepreciationTableHeader.Code);
      DepreciationTableHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateDepreciationTableLine@9(VAR DepreciationTableLine@1001 : Record 5643;DepreciationTableCode@1000 : Code[10]);
    BEGIN
      DepreciationTableLine.SETRANGE("Depreciation Table Code",DepreciationTableCode);
      // Check if Lines are alredy exist.
      IF DepreciationTableLine.FINDLAST THEN;
      DepreciationTableLine.INIT;
      DepreciationTableLine.VALIDATE("Depreciation Table Code",DepreciationTableCode);
      DepreciationTableLine.VALIDATE("Period No.",DepreciationTableLine."Period No." + 1);
      DepreciationTableLine.INSERT(TRUE);
    END;

    PROCEDURE CreateMainAssetComponent@89(VAR MainAssetComponent@1000 : Record 5640;MainAssetNo@1001 : Code[20];FANo@1003 : Code[20]);
    BEGIN
      MainAssetComponent.INIT;
      MainAssetComponent.VALIDATE("Main Asset No.",MainAssetNo);
      MainAssetComponent.VALIDATE("FA No.",FANo);
      MainAssetComponent.INSERT(TRUE);
    END;

    PROCEDURE CreateFASubclass@7(VAR FASubclass@1000 : Record 5608);
    BEGIN
      FASubclass.INIT;
      FASubclass.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FASubclass.FIELDNO(Code),DATABASE::"FA Subclass"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Subclass",FASubclass.FIELDNO(Code))));

      // Validating Name as Code because value is not important.
      FASubclass.VALIDATE(Name,FASubclass.Code);
      FASubclass.INSERT(TRUE);
    END;

    PROCEDURE CreateFAIncomeTaxAccPeriod@1500006(CurrentDate@1500009 : Date);
    VAR
      FAAccountingPeriodIncTax@1500008 : Record 16519;
      PeriodLength@1500006 : DateFormula;
      StartingDate@1500001 : Date;
      FiscalYearStartDate@1500005 : Date;
      i@1500000 : Integer;
    BEGIN
      StartingDate := CALCDATE('<CM+1D-1M>',CurrentDate);

      FiscalYearStartDate := StartingDate;
      EVALUATE(PeriodLength,'<1M>');

      FOR i := 1 TO 13 DO BEGIN
        FAAccountingPeriodIncTax.INIT;
        FAAccountingPeriodIncTax."Starting Date" := FiscalYearStartDate;
        FAAccountingPeriodIncTax.VALIDATE("Starting Date");
        IF (i = 1) OR (i = 13) THEN
          FAAccountingPeriodIncTax."New Fiscal Year" := TRUE;
        IF NOT FAAccountingPeriodIncTax.FIND THEN
          FAAccountingPeriodIncTax.INSERT;
        FiscalYearStartDate := CALCDATE(PeriodLength,FiscalYearStartDate);
      END;
    END;

    PROCEDURE CreateFAClass@1500015(VAR FAClass@1500000 : Record 5607);
    BEGIN
      FAClass.INIT;
      FAClass.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAClass.FIELDNO(Code),DATABASE::"FA Class"),
          1,LibraryUtility.GetFieldLength(DATABASE::"FA Class",FAClass.FIELDNO(Code))));
      FAClass.VALIDATE(Name,FAClass.Code);
      FAClass.INSERT(TRUE)
    END;

    PROCEDURE CreateFABlock@1500009(VAR FABlock@1500000 : Record 16518;FAClassCode@1500001 : Code[10]);
    BEGIN
      FABlock.INIT;
      FABlock.VALIDATE("FA Class Code",FAClassCode);
      FABlock.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FABlock.FIELDNO(Code),DATABASE::"FA Block"),
          1,LibraryUtility.GetFieldLength(DATABASE::"FA Block",FABlock.FIELDNO(Code))));
      FABlock.VALIDATE(Description,FABlock.Code + ' ' + FABlock."FA Class Code");
      FABlock.INSERT(TRUE)
    END;

    PROCEDURE CreateFALocation@1500000(VAR FALocation@1000 : Record 5609);
    BEGIN
      FALocation.INIT;
      FALocation.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FALocation.FIELDNO(Code),DATABASE::"FA Location"),1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Location",FALocation.FIELDNO(Code))));
      FALocation.INSERT(TRUE)
    END;

    PROCEDURE FindEmployee@17(VAR Employee@1000 : Record 5200);
    BEGIN
      Employee.FINDSET;
    END;

    PROCEDURE FindFAClass@14(VAR FAClass@1000 : Record 5607);
    BEGIN
      FAClass.FINDSET;
    END;

    PROCEDURE FindFAJournalBatch@4(VAR FAJournalBatch@1000 : Record 5620;JournalTemplateName@1001 : Code[10]);
    BEGIN
      FAJournalBatch.SETRANGE("Journal Template Name",JournalTemplateName);
      FAJournalBatch.FINDFIRST;
    END;

    PROCEDURE FindFAJournalTemplate@5(VAR FAJournalTemplate@1000 : Record 5619);
    BEGIN
      FAJournalTemplate.FINDFIRST;
    END;

    PROCEDURE FindFALocation@16(VAR FALocation@1000 : Record 5609);
    BEGIN
      FALocation.FINDSET;
    END;

    PROCEDURE FindFASubclass@15(VAR FASubclass@1000 : Record 5608);
    BEGIN
      FASubclass.FINDSET;
    END;

    PROCEDURE FindInsurance@11(VAR Insurance@1000 : Record 5628);
    BEGIN
      Insurance.FINDSET;
    END;

    PROCEDURE GetDefaultDeprBook@21() : Code[10];
    BEGIN
      FASetup.GET;
      EXIT(FASetup."Default Depr. Book");
    END;

    PROCEDURE PostFAJournalLine@50(VAR FAJournalLine@1000 : Record 5621);
    BEGIN
      FAJournalLine.SETRANGE("Journal Template Name",FAJournalLine."Journal Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalLine."Journal Batch Name");
      CODEUNIT.RUN(CODEUNIT::"FA Jnl.-Post Batch",FAJournalLine);
    END;

    PROCEDURE PostInsuranceJournal@2(VAR InsuranceJournalLine@1000 : Record 5635);
    BEGIN
      InsuranceJournalLine.SETRANGE("Journal Template Name",InsuranceJournalLine."Journal Template Name");
      InsuranceJournalLine.SETRANGE("Journal Batch Name",InsuranceJournalLine."Journal Batch Name");
      CODEUNIT.RUN(CODEUNIT::"Insurance Jnl.-Post Batch",InsuranceJournalLine);
    END;

    PROCEDURE PostFAJournalLineBatch@12(VAR FAJournalBatch@1000 : Record 5620);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"FA. Jnl.-B.Post",FAJournalBatch);
    END;

    PROCEDURE VerifyLastFARegisterGLRegisterOneToOneRelation@20();
    VAR
      FARegister@1004 : Record 5617;
      GLRegister@1005 : Record 45;
      GLEntry@1009 : Record 17;
    BEGIN
      GLRegister.FINDLAST;
      FARegister.FINDLAST;
      Assert.AreEqual(GLRegister."No.",FARegister."G/L Register No.",FARegisterGLRegisterErr);

      GLEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      GLEntry.SETRANGE("FA Entry Type",GLEntry."FA Entry Type"::"Fixed Asset");
      GLEntry.FINDSET;
      REPEAT
        Assert.IsTrue(
          GLEntry."FA Entry No." IN [FARegister."From Entry No."..FARegister."To Entry No."],
          FARegisterGLRegisterErr);
      UNTIL GLEntry.NEXT = 0;
    END;

    PROCEDURE VerifyMaintenanceLastFARegisterGLRegisterOneToOneRelation@19();
    VAR
      FARegister@1004 : Record 5617;
      GLRegister@1005 : Record 45;
      GLEntry@1009 : Record 17;
    BEGIN
      GLRegister.FINDLAST;
      FARegister.FINDLAST;
      Assert.AreEqual(GLRegister."No.",FARegister."G/L Register No.",FARegisterGLRegisterErr);

      GLEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      GLEntry.SETRANGE("FA Entry Type",GLEntry."FA Entry Type"::Maintenance);
      GLEntry.FINDSET;
      REPEAT
        Assert.IsTrue(
          GLEntry."FA Entry No." IN [FARegister."From Maintenance Entry No."..FARegister."To Maintenance Entry No."],
          FARegisterGLRegisterErr);
      UNTIL GLEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

