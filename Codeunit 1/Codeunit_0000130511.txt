OBJECT Codeunit 130511 Library - Resource
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1001 : Codeunit 131300;
      LibraryUtility@1000 : Codeunit 131000;

    PROCEDURE CreateResource@3(VAR Resource@1000 : Record 156;VATBusPostingGroup@1005 : Code[10]);
    VAR
      GeneralPostingSetup@1003 : Record 252;
      VATPostingSetup@1001 : Record 325;
      UnitOfMeasure@1006 : Record 204;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      Resource.INIT;
      Resource.VALIDATE("No.",LibraryUtility.GenerateRandomCode(Resource.FIELDNO("No."),DATABASE::Resource));
      Resource.INSERT(TRUE);

      LibraryInventory.FindUnitOfMeasure(UnitOfMeasure);

      GeneralPostingSetup.SETFILTER("Gen. Bus. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Gen. Prod. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Sales Account",'<>%1','');
      GeneralPostingSetup.FINDFIRST;

      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",VATBusPostingGroup);
      VATPostingSetup.SETRANGE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.FINDFIRST;

      Resource.VALIDATE(Name,Resource."No.");  // Validate Name as No. because value is not important.
      Resource.VALIDATE("Base Unit of Measure",UnitOfMeasure.Code);
      Resource.VALIDATE("Direct Unit Cost",RANDOM(100));  // Required field - value is not important.
      Resource.VALIDATE("Unit Price",RANDOM(100));  // Required field - value is not important.
      Resource.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      Resource.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Resource.MODIFY(TRUE);
    END;

    PROCEDURE CreateResourceNew@16(VAR Resource@1000 : Record 156);
    VAR
      GeneralPostingSetup@1003 : Record 252;
      VATPostingSetup@1001 : Record 325;
      UnitOfMeasure@1006 : Record 204;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      ResNoSeriesSetup;
      LibraryInventory.FindUnitOfMeasure(UnitOfMeasure);
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetupInvt(VATPostingSetup);

      CLEAR(Resource);
      Resource.INSERT(TRUE);
      Resource.VALIDATE(Name,Resource."No.");  // Validate Name as No. because value is not important.
      Resource.VALIDATE("Base Unit of Measure",UnitOfMeasure.Code);
      Resource.VALIDATE("Direct Unit Cost",RANDOM(100));  // Required field - value is not important.
      Resource.VALIDATE("Unit Price",RANDOM(100));  // Required field - value is not important.
      Resource.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      Resource.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Resource.MODIFY(TRUE);
    END;

    PROCEDURE CreateResourceNo@13() : Code[20];
    VAR
      Resource@1000 : Record 156;
    BEGIN
      CreateResourceNew(Resource);
      EXIT(Resource."No.");
    END;

    PROCEDURE CreateResourceGroup@5(VAR ResourceGroup@1000 : Record 152);
    BEGIN
      ResourceGroup.INIT;
      ResourceGroup.VALIDATE("No.",LibraryUtility.GenerateRandomCode(ResourceGroup.FIELDNO("No."),DATABASE::"Resource Group"));
      ResourceGroup.VALIDATE(Name,ResourceGroup."No.");  // Validate Name as No. because value is not important.
      ResourceGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateResourcePrice@6(VAR ResourcePrice@1000 : Record 201;Type@1002 : Option;Code@1003 : Code[20];WorkTypeCode@1004 : Code[10];CurrencyCode@1005 : Code[10]);
    BEGIN
      ResourcePrice.INIT;
      ResourcePrice.VALIDATE(Type,Type);
      ResourcePrice.VALIDATE(Code,Code);
      ResourcePrice.VALIDATE("Work Type Code",WorkTypeCode);
      ResourcePrice.VALIDATE("Currency Code",CurrencyCode);
      ResourcePrice.INSERT(TRUE);
    END;

    PROCEDURE CreateResJournalLine@7(VAR ResJournalLine@1000 : Record 207;JournalTemplateName@1002 : Code[10];JournalBatchName@1003 : Code[10]);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      ResJournalLine.INIT;
      ResJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      ResJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(ResJournalLine);
      ResJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ResJournalLine.FIELDNO("Line No.")));
      ResJournalLine.INSERT(TRUE);
    END;

    PROCEDURE CreateResourceSkill@2(VAR ResourceSkill@1000 : Record 5956;Type@1001 : Option;No@1002 : Code[20];SkillCode@1003 : Code[10]);
    BEGIN
      ResourceSkill.INIT;
      ResourceSkill.VALIDATE(Type,Type);
      ResourceSkill.VALIDATE("No.",No);
      ResourceSkill.VALIDATE("Skill Code",SkillCode);
      ResourceSkill.INSERT(TRUE);
    END;

    PROCEDURE CreateResourceUnitOfMeasure@4(VAR ResourceUnitOfMeasure@1000 : Record 205;ResourceNo@1001 : Code[20];UnitOfMeasureCode@1003 : Code[10];QtyPerUoM@1002 : Decimal);
    BEGIN
      ResourceUnitOfMeasure.INIT;
      ResourceUnitOfMeasure.VALIDATE("Resource No.",ResourceNo);
      ResourceUnitOfMeasure.VALIDATE(Code,UnitOfMeasureCode);
      IF QtyPerUoM = 0 THEN
        QtyPerUoM := 1;
      ResourceUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",QtyPerUoM);
      ResourceUnitOfMeasure.INSERT(TRUE);
    END;

    PROCEDURE CreateResourceWithUsers@84(VAR Resource@1000 : Record 156);
    BEGIN
      Resource.INIT;
      Resource.VALIDATE("No.",LibraryUtility.GenerateRandomCode(Resource.FIELDNO("No."),DATABASE::Resource));
      Resource.INSERT(TRUE);

      Resource."Time Sheet Owner User ID" := USERID;
      Resource."Time Sheet Approver User ID" := USERID;
      Resource.MODIFY;
    END;

    PROCEDURE CreateSkillCode@1(VAR SkillCode@1000 : Record 5955);
    BEGIN
      SkillCode.INIT;
      SkillCode.VALIDATE(Code,LibraryUtility.GenerateRandomCode(SkillCode.FIELDNO(Code),DATABASE::"Skill Code"));
      SkillCode.INSERT(TRUE);
      SkillCode.VALIDATE(Description,SkillCode.Code);  // Validate Description as Code because value is not important.
      SkillCode.MODIFY(TRUE);
    END;

    PROCEDURE CreateResourceJournalTemplate@11(VAR ResJournalTemplate@1000 : Record 206);
    BEGIN
      ResJournalTemplate.INIT;
      ResJournalTemplate.VALIDATE(
        Name,
        COPYSTR(LibraryUtility.GenerateRandomCode(ResJournalTemplate.FIELDNO(Name),DATABASE::"Res. Journal Template"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Res. Journal Template",ResJournalTemplate.FIELDNO(Name))));
      ResJournalTemplate.VALIDATE(Description,ResJournalTemplate.Name);  // Validate Description as Name because value is not important.
      ResJournalTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateResourceJournalBatch@12(VAR ResJournalBatch@1000 : Record 236;JournalTemplateName@1002 : Code[10]);
    BEGIN
      ResJournalBatch.INIT;
      ResJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
      ResJournalBatch.VALIDATE(
        Name,
        COPYSTR(LibraryUtility.GenerateRandomCode(ResJournalBatch.FIELDNO(Name),DATABASE::"Res. Journal Batch"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Res. Journal Batch",ResJournalBatch.FIELDNO(Name))));
      // Validate Description as Primary Key because value is not important.
      ResJournalBatch.VALIDATE(Description,ResJournalBatch."Journal Template Name" + ResJournalBatch.Name);
      ResJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateWorkType@45(VAR WorkType@1000 : Record 200);
    VAR
      UnitOfMeasure@1001 : Record 204;
      LibraryInventory@1002 : Codeunit 132201;
    BEGIN
      LibraryInventory.FindUnitOfMeasure(UnitOfMeasure);

      WorkType.INIT;
      WorkType.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(WorkType.FIELDNO(Code),DATABASE::"Work Type"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Work Type",WorkType.FIELDNO(Code))));

      // Validating Description as Code because value is not important.
      WorkType.VALIDATE(Description,WorkType.Code);
      WorkType.VALIDATE("Unit of Measure Code",UnitOfMeasure.Code);
      WorkType.INSERT(TRUE);
    END;

    PROCEDURE CreateWorkHourTemplate@10(VAR WorkHourTemplate@1000 : Record 5954);
    BEGIN
      WorkHourTemplate.INIT;
      WorkHourTemplate.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(WorkHourTemplate.FIELDNO(Code),DATABASE::"Work-Hour Template"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Work-Hour Template",WorkHourTemplate.FIELDNO(Code))));
      WorkHourTemplate.INSERT(TRUE);
    END;

    PROCEDURE FindResource@53(VAR Resource@1000 : Record 156);
    BEGIN
      // Filter Resource so that errors are not generated due to mandatory fields.
      Resource.SETFILTER("Gen. Prod. Posting Group",'<>''''');
      Resource.SETFILTER("VAT Prod. Posting Group",'<>''''');
      Resource.SETRANGE(Blocked,FALSE);

      Resource.FINDSET;
    END;

    PROCEDURE FindResJournalBatch@78(VAR ResJournalBatch@1000 : Record 236;JournalTemplateName@1001 : Code[10]);
    BEGIN
      ResJournalBatch.SETRANGE("Journal Template Name",JournalTemplateName);
      ResJournalBatch.FINDFIRST;
    END;

    PROCEDURE FindResJournalTemplate@66(VAR ResJournalTemplate@1000 : Record 206);
    BEGIN
      ResJournalTemplate.FINDFIRST;
    END;

    PROCEDURE FindWorkType@9(VAR WorkType@1000 : Record 200);
    BEGIN
      WorkType.FINDSET;
    END;

    [Normal]
    PROCEDURE PostResourceJournalLine@8(VAR ResJournalLine@1000 : Record 207);
    BEGIN
      ResJournalLine.SETRANGE("Journal Template Name",ResJournalLine."Journal Template Name");
      ResJournalLine.SETRANGE("Journal Batch Name",ResJournalLine."Journal Batch Name");
      CODEUNIT.RUN(CODEUNIT::"Res. Jnl.-Post",ResJournalLine);
    END;

    LOCAL PROCEDURE ResNoSeriesSetup@448();
    VAR
      ResourcesSetup@1000 : Record 314;
      NoSeriesCode@1001 : Code[10];
    BEGIN
      ResourcesSetup.GET;
      NoSeriesCode := LibraryUtility.GetGlobalNoSeriesCode;
      IF NoSeriesCode <> ResourcesSetup."Resource Nos." THEN BEGIN
        ResourcesSetup.VALIDATE("Resource Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        ResourcesSetup.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetResourceBlocked@75(VAR Resource@1000 : Record 156);
    BEGIN
      Resource.VALIDATE(Blocked,TRUE);
      Resource.MODIFY(TRUE);
    END;

    BEGIN
    {
      Contains all utility functions related to Resource.
    }
    END.
  }
}

