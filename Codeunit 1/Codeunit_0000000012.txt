OBJECT Codeunit 12 Gen. Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 17=imd,
                TableData 21=imd,
                TableData 25=imd,
                TableData 45=imd,
                TableData 253=rimd,
                TableData 254=imd,
                TableData 271=imd,
                TableData 272=imd,
                TableData 379=imd,
                TableData 380=imd,
                TableData 1053=rim,
                TableData 5601=rimd,
                TableData 5617=imd,
                TableData 5625=rimd;
    OnRun=BEGIN
            GetGLSetup;
            RunWithCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      NeedsRoundingErr@1000 : TextConst 'ENU=%1 needs to be rounded;ENN=%1 needs to be rounded';
      PurchaseAlreadyExistsErr@1003 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists for this vendor.;ENN=Purchase %1 %2 already exists for this vendor.';
      BankPaymentTypeMustNotBeFilledErr@1004 : TextConst 'ENU=Bank Payment Type must not be filled if Currency Code is different in Gen. Journal Line and Bank Account.;ENN=Bank Payment Type must not be filled if Currency Code is different in Gen. Journal Line and Bank Account.';
      DocNoMustBeEnteredErr@1005 : TextConst 'ENU=Document No. must be entered when Bank Payment Type is %1.;ENN=Document No. must be entered when Bank Payment Type is %1.';
      CheckAlreadyExistsErr@1006 : TextConst 'ENU=Check %1 already exists for this Bank Account.;ENN=Check %1 already exists for this Bank Account.';
      IncorrectDocTypeErr@1024 : TextConst 'ENU=%1 is incorrect document type for Dynamics Online payment.;ENN=%1 is incorrect document type for Dynamics Online payment.';
      GLSetup@1009 : Record 98;
      GlobalGLEntry@1014 : Record 17;
      TempGLEntryBuf@1010 : TEMPORARY Record 17;
      TempGLEntryVAT@1016 : TEMPORARY Record 17;
      GLReg@1029 : Record 45;
      AddCurrency@1033 : Record 4;
      CurrExchRate@1035 : Record 330;
      VATEntry@1038 : Record 254;
      TaxDetail@1046 : Record 322;
      UnrealizedCustLedgEntry@1084 : Record 21;
      UnrealizedVendLedgEntry@1085 : Record 25;
      GLEntryVATEntryLink@1087 : Record 253;
      TempVATEntry@1088 : TEMPORARY Record 254;
      TempServTaxEntry@1500177 : TEMPORARY Record 16473;
      OnlineCustLedgerEntry@1500051 : Record 21;
      OnlineVendorLedgerEntry@1500050 : Record 25;
      GenJnlCheckLine@1001 : Codeunit 11;
      PaymentToleranceMgt@1002 : Codeunit 426;
      GenJnlPostPreview@1032 : Codeunit 19;
      DeferralUtilities@1031 : Codeunit 1720;
      GSTApplicationManagement@1500032 : Codeunit 16403;
      GSTManagement@1500034 : Codeunit 16401;
      DeferralDocType@1039 : 'Purchase,Sales,G/L';
      FormManagement@1500012 : Codeunit 16400;
      LastDocType@1025 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      AddCurrencyCode@1117 : Code[10];
      GLSourceCode@1040 : Code[10];
      LastDocNo@1023 : Code[20];
      FiscalYearStartDate@1011 : Date;
      CurrencyDate@1020 : Date;
      LastDate@1021 : Date;
      BalanceCheckAmount@1056 : Decimal;
      BalanceCheckAmount2@1057 : Decimal;
      BalanceCheckAddCurrAmount@1058 : Decimal;
      BalanceCheckAddCurrAmount2@1059 : Decimal;
      CurrentBalance@1060 : Decimal;
      TotalAddCurrAmount@1062 : Decimal;
      TotalAmount@1063 : Decimal;
      UnrealizedRemainingAmountCust@1086 : Decimal;
      UnrealizedRemainingAmountVend@1074 : Decimal;
      AmountRoundingPrecision@1012 : Decimal;
      AddCurrGLEntryVATAmt@1017 : Decimal;
      CurrencyFactor@1019 : Decimal;
      FirstEntryNo@1042 : Integer;
      NextEntryNo@1022 : Integer;
      NextVATEntryNo@1064 : Integer;
      FirstNewVATEntryNo@1065 : Integer;
      NextTransactionNo@1066 : Integer;
      NextConnectionNo@1067 : Integer;
      NextCheckEntryNo@1028 : Integer;
      InsertedTempGLEntryVAT@1027 : Integer;
      GLEntryNo@1026 : Integer;
      CrCardTransactionEntryNo@1013 : Integer;
      UseCurrFactorOnly@1078 : Boolean;
      NonAddCurrCodeOccured@1079 : Boolean;
      FADimAlreadyChecked@1080 : Boolean;
      ResidualRoundingErr@1008 : TextConst 'ENU=Residual caused by rounding of %1;ENN=Residual caused by rounding of %1';
      DimensionUsedErr@1007 : TextConst '@@@=Comment;ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5.;ENN=A dimension used in %1 %2, %3, %4 has caused an error. %5.';
      OverrideDimErr@1018 : Boolean;
      JobLine@1036 : Boolean;
      CheckUnrealizedCust@1082 : Boolean;
      CheckUnrealizedVend@1083 : Boolean;
      GLSetupRead@1015 : Boolean;
      InvalidPostingDateErr@1034 : TextConst '@@@="%1=The date passed in for the posting date.";ENU=%1 is not within the range of posting dates for your company.;ENN=%1 is not within the range of posting dates for your company.';
      DescriptionMustNotBeBlankErr@1030 : TextConst '@@@=%1: Field Omit Default Descr. in Jnl., %2 G/L Account No, %3 Description;ENU=When %1 is selected for %2, %3 must have a value.;ENN=When %1 is selected for %2, %3 must have a value.';
      NoDeferralScheduleErr@1037 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=A deferral schedule must be created if a deferral template is selected. Line: %1, Deferral Template: %2.;ENN=A deferral schedule must be created if a deferral template is selected. Line: %1, Deferral Template: %2.';
      ZeroDeferralAmtErr@1041 : TextConst '@@@="%1=The line number of the general ledger transaction, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.;ENN=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      TaxEntry@1280002 : Record 13700;
      ExciseEntry@1280005 : Record 13712;
      ExcisePostingSetup@1280004 : Record 13711;
      DeferredExciseBuffer@1280009 : ARRAY [2] OF TEMPORARY Record 13706;
      TDSGroup@1280010 : Record 13731;
      TDSEntry@1280015 : Record 13729;
      PLAEntry@1280021 : Record 13723;
      ExciseInsertRGRegisters@1280008 : Codeunit 13701;
      ServiceTaxMgt@1280014 : Codeunit 16471;
      NextTaxEntryNo@1280003 : Integer;
      NextExciseEntryNo@1280006 : Integer;
      NextTDSEntryNo@1280016 : Integer;
      PLAStartingNo@1280020 : Integer;
      Text020@1500000 : TextConst 'ENU=Document type must be Invoice, Credit memo, Payment or Refund.;ENN=Document type must be Invoice, Credit memo, Payment or Refund.';
      GSTStartingNo@1500006 : Integer;
      TCSEntry@1500010 : Record 16514;
      NextTCSEntryNo@1500009 : Integer;
      TCSSetup@1500008 : Record 16508;
      TCSEntry4@1500007 : Record 16514;
      Location@1500017 : Record 14;
      NextFBTEntryNo@1500014 : Integer;
      FBTEntry@1500015 : Record 16541;
      DetailedGSTLedgerEntry@1500005 : Record 16419;
      PostedNarration@1500019 : Record 16548;
      GenJnlNarration@1500020 : Record 16549;
      DocumentNo@1500018 : Code[20];
      STaxPostingBuffer@1500021 : ARRAY [2] OF TEMPORARY Record 16478;
      SalesDocumentNo@1500016 : Code[20];
      InsertExciseRG@1500022 : Codeunit 13701;
      CompanyInfo@1500023 : Record 79;
      ExciseCenvatClaim@1500029 : Record 16584;
      Text16506@1500028 : TextConst 'ENU="Please unchek the Input Service Distributor field in the %1 Location. ";ENN="Please unchek the Input Service Distributor field in the %1 Location. "';
      Text16507@1500027 : TextConst 'ENU=Please unchek the Input Service Distributor field in the Company Information.;ENN=Please unchek the Input Service Distributor field in the Company Information.';
      Text16508@1500024 : TextConst 'ENU=Input service Distribution should not be Yes in Reverse Charge transactions.;ENN=Input service Distribution should not be Yes in Reverse Charge transactions.';
      Text16509@1500026 : TextConst 'ENU=Please Select the Location Code %1 in Batch %2.;ENN=Please Select the Location Code %1 in Batch %2.';
      GenJnlLineTmp@1500094 : TEMPORARY Record 81;
      Text16510@1500072 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.;ENN=You cannot reverse the transaction, because it has already been reversed.';
      TaxJnlLine@1500002 : Record 16587;
      NewSTBase@1500030 : Decimal;
      NewServTaxAmt@1500036 : Decimal;
      NewServTaxECessAmt@1500013 : Decimal;
      NewServTaxSheCessAmt@1500037 : Decimal;
      SvcTaxPostingBuffer@1500031 : ARRAY [2] OF TEMPORARY Record 16478;
      CVEntryNoVendor@1500035 : Integer;
      CurrencyFactorCheck@1500075 : Boolean;
      STRevChargeServType@1500046 : ' ,Inward,Outward Stock Transfer,Outward Input Service,Outward';
      ApplicationType@1500045 : ' ,Vendor,Customer';
      TotalAmtToApply@1500039 : Decimal;
      STPureAgent@1500038 : Boolean;
      Text16511@1500966 : TextConst 'ENU=Service Tax Advance Payment Document/s cannot be applied with non Service Tax Invoice/s.;ENN=Service Tax Advance Payment Document/s cannot be applied with non Service Tax Invoice/s.';
      Text16512@1500965 : TextConst 'ENU=Application Amount for Payment Document No. %1 and Invoice Document No. %2 should not be greater than %3.;ENN=Application Amount for Payment Document No. %1 and Invoice Document No. %2 should not be greater than %3.';
      Text16513@1500964 : TextConst 'ENU=Invoice/s and Payment/s documents cannot be applied as both have different Service Tax Rounding Precision/Type.;ENN=Invoice/s and Payment/s documents cannot be applied as both have different Service Tax Rounding Precision/Type.';
      Text16514@1500963 : TextConst 'ENU=Refund should be applied against service tax on advance payment.;ENN=Refund should be applied against service tax on advance payment.';
      Text16515@1500962 : TextConst 'ENU=The Payment %1 is not an Input Service Distribution Payment. Hence cannot be applied with the Invoice %2.;ENN=The Payment %1 is not an Input Service Distribution Payment. Hence cannot be applied with the Invoice %2.';
      Text16516@1500961 : TextConst 'ENU=Document Type %1 should not be applied against a Refund document %2 having service tax on advance payment.;ENN=Document Type %1 should not be applied against a Refund document %2 having service tax on advance payment.';
      Text16517@1500960 : TextConst 'ENU=Document %1 is having service tax on advance payment. Hence cannot be applied against document %2.;ENN=Document %1 is having service tax on advance payment. Hence cannot be applied against document %2.';
      Text16518@1500959 : TextConst 'ENU=Documents cannot be un-applied as Service tax liability has been already paid.;ENN=Documents cannot be un-applied as Service tax liability has been already paid.';
      Text16521@1500956 : TextConst 'ENU=Payment Document with ST Pure Agent and Service Tax on Advance Payment should be applied with invoice having check mark on ST Pure Agent.;ENN=Payment Document with ST Pure Agent and Service Tax on Advance Payment should be applied with invoice having check mark on ST Pure Agent.';
      TotalITAmountLCY@1500067 : Decimal;
      WorkTaxAmountLCY@1500068 : Decimal;
      ITAmountLCY@1500069 : Decimal;
      SurchargeAmountLCY@1500070 : Decimal;
      eCESSAmountLCY@1500071 : Decimal;
      SHECESSAmountLCY@1500073 : Decimal;
      PmtTolAmt@1500074 : Decimal;
      AppliedAmtCurrDiff@1500084 : Decimal;
      ServTaxEntry@1500076 : Record 16473;
      GenJnlLine4ACY@1500113 : Record 81;
      GenPostingSetup@1500129 : Record 252;
      TDSInvBufJnl@1500133 : ARRAY [2] OF TEMPORARY Record 13734;
      TDSAmount@1500112 : Decimal;
      TDSAmountFCY@1500132 : Decimal;
      MultiTDSDocumentNo@1500134 : Code[20];
      BankChargeAmount@1500135 : Decimal;
      Text16522@1500967 : TextConst 'ENU=Void the check as tds amount has to be recalculated;ENN=Void the check as tds amount has to be recalculated';
      Text16523@1500976 : TextConst 'ENU=The PoT Value in the %1 and the %2 is not the same.;ENN=The PoT Value in the %1 and the %2 is not the same.';
      Text16524@1500157 : TextConst 'ENU=Invoices having service tax cannot be applied to another invoice.;ENN=Invoices having service tax cannot be applied to another invoice.';
      CurrencyCode2@1500097 : Code[10];
      CurrencyFactor2@1500098 : Decimal;
      STAmtCorrect@1500088 : Boolean;
      ExecuteTaxEntry@1500176 : Boolean;
      STAmtSignfactor@1500089 : Integer;
      Text16532@1500987 : TextConst 'ENU=The %1 Value in the %2 and the %3 is not the same.;ENN=The %1 Value in the %2 and the %3 is not the same.';
      NewServTaxSBCAmt@1500421 : Decimal;
      NewKKCessAmt@1500001 : Decimal;
      GSTPostingBuffer@1500004 : ARRAY [2] OF TEMPORARY Record 16420;
      HSNSACCodeErr@1500011 : TextConst 'ENU=You must enter different HSN/SAC code for Document No.%1.;ENN=You must enter different HSN/SAC code for Document No.%1.';
      PostedDocNo@1500025 : Code[20];
      GSTJurisdictionErr@1500200 : TextConst 'ENU=GST Jurisdiction Type must be similar for Document No.%1.;ENN=GST Jurisdiction Type must be similar for Document No.%1.';
      NonGSTLinesErr@1500040 : TextConst 'ENU=You cannot post both GST and Non-GST Lines.;ENN=You cannot post both GST and Non-GST Lines.';
      GSTRegNoErr@1500041 : TextConst '@@@="%1 = Document No., %2 = Line No.";ENU=GST Registration No must be similar for Document No.%1 Line %2.;ENN=GST Registration No must be similar for Document No.%1 Line %2.';
      GSTTCSErr@1500144 : TextConst 'ENU=You cannot post the transcation, It has TCS and GST payment .;ENN=You cannot post the transcation, It has TCS and GST payment .';
      PlaceOfSupplyErr@1500049 : TextConst '@@@="%1 = Template, %2 = Batch, %3 = Line No.";ENU=You cannot select blank Place of Supply for Template %1 and Batch %2 for Line %3.;ENN=You cannot select blank Place of Supply for Template %1 and Batch %2 for Line %3.';
      TransactionType2@1500048 : 'Purchase,Sale';
      GSTLocationErr@1500003 : TextConst '@@@="%1 = Document No";ENU=Location must be similar for Document No. %1.;ENN=Location must be similar for Document No. %1.';
      SimilarGSTGroupTypeErr@1500033 : TextConst '@@@="%1 = GST Group Type, %2 = Field Reference %3 = Journal Template Name, %4 = Field Reference %5 = Journal Batch Name, %6 = Field Reference, %7 = Payment Document No.";ENU=You must specify the same %1 in Reverse charge Payment %2 %3, %4 %5, %6 %7.;ENN=You must specify the same %1 in Reverse charge Payment %2 %3, %4 %5, %6 %7.';
      PartialAmountErr@1500042 : TextConst 'ENU=Partial Application of Credit Memo not allowed.;ENN=Partial Application of Credit Memo not allowed.';
      UnapplySettledErr@1500043 : TextConst 'ENU=Once Settled Credit Memo cannot be unapplied;ENN=Once Settled Credit Memo cannot be unapplied';
      BaseAmountErr@1500044 : TextConst '@@@="%1 =Document No., %2 = Base Amount, %3= Document No., %4 = Base Amount";ENU=Document No. %1 Base Amount %2 cannot be more than Applied Document No. %3 Base Amount %4.;ENN=Document No. %1 Base Amount %2 cannot be more than Applied Document No. %3 Base Amount %4.';
      GSTRefundErr@1500047 : TextConst '@@@="%1 = Document No.";ENU=GST Refund is only applicable for Vendor and Customer in Document No.;ENN=GST Refund is only applicable for Vendor and Customer in Document No.';

    PROCEDURE GetGLReg@10(VAR NewGLReg@1000 : Record 45);
    BEGIN
      NewGLReg := GLReg;
    END;

    PROCEDURE RunWithCheck@45(VAR GenJnlLine2@1000 : Record 81) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,TRUE);
      GenJnlLine2 := GenJnlLine;
      EXIT(GLEntryNo);
    END;

    PROCEDURE RunWithoutCheck@21(VAR GenJnlLine2@1000 : Record 81) : Integer;
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,FALSE);
      GenJnlLine2 := GenJnlLine;
      EXIT(GLEntryNo);
    END;

    LOCAL PROCEDURE Code@9(VAR GenJnlLine@1003 : Record 81;CheckLine@1000 : Boolean);
    VAR
      GLSetup2@1001 : Record 98;
      ServTaxPayBuffer@1500000 : Record 16476;
      ExCenvatClaimDetail@1500001 : Record 16561;
      SvcTaxEntry@1500002 : Record 16473;
      STReverseChargeSetup@1500004 : Record 16461;
      CustLedgerEntry@1500005 : Record 21;
      TotalTDSInclSHECess@1500003 : Decimal;
      Balancing@1002 : Boolean;
    BEGIN
      GetGLSourceCode;

      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN BEGIN
          InitLastDocDate(GenJnlLine);
          EXIT;
        END;
        ApplicationType := ApplicationType::" ";

        IF CheckLine AND (SalesDocumentNo <> '') THEN
          GenJnlCheckLine.SetSalesHeaderNo(SalesDocumentNo);

        IF CheckLine THEN BEGIN
          IF OverrideDimErr THEN
            GenJnlCheckLine.SetOverDimErr;
          GenJnlCheckLine.RunCheck(GenJnlLine);
        END;

        ReverseSTAmt(GenJnlLine);

        IF NOT "System-Created Entry" THEN BEGIN
          IF "Bal. Account No." <> '' THEN BEGIN
            ConvertTDSAmountstoLCY(GenJnlLine);
            TotalTDSInclSHECess := TotalITAmountLCY;
            Posting := TRUE;
            CalculateTDS;
            ConvertTDSAmountstoLCY(GenJnlLine);
            IF "Check Printed" THEN BEGIN
              IF TotalTDSInclSHECess <> TotalITAmountLCY THEN
                ERROR(Text16522);
            END;
          END ELSE BEGIN
            Posting := TRUE;
            IF NOT "TDS From Orders" THEN
              CalculateTDS;
            ConvertTDSAmountstoLCY(GenJnlLine);
          END;
        END ELSE
          ConvertTDSAmountstoLCY(GenJnlLine);

        IF ("Document Type" = "Document Type"::Payment) AND ("TCS Nature of Collection" <> '') AND
           ("Applies-to Doc. No." = '') AND ("Applies-to ID" = '')
        THEN BEGIN
          Amount := Amount - "Total TDS/TCS Incl. SHE CESS";
          "Amount (LCY)" := "Amount (LCY)" - TotalITAmountLCY;
        END;
        IF "Service Tax Amount" <> 0 THEN
          IF ("Location Code" <> '') AND Location.GET("Location Code") THEN BEGIN
            IF ("Service Tax Type" = "Service Tax Type"::Sale) AND Location."Input Service Distributor" THEN
              ERROR(Text16506,Location.Code);
          END ELSE BEGIN
            CompanyInfo.GET;
            IF ("Service Tax Type" = "Service Tax Type"::Sale) AND CompanyInfo."Input Service Distributor" THEN
              ERROR(Text16507);
          END;

        IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) AND "Input Service Distribution" THEN
          ERROR(Text16508);
        IF ("Applies-to Doc. No." <> '') AND "Input Service Distribution" AND ("Journal Template Name" <> '') THEN BEGIN
          SvcTaxEntry.RESET;
          SvcTaxEntry.SETRANGE("Document No.","Applies-to Doc. No.");
          IF SvcTaxEntry.FINDFIRST THEN
            IF "Location Code" <> SvcTaxEntry."Location Code" THEN
              ERROR(Text16509,SvcTaxEntry."Location Code","Journal Batch Name");
          Location.GET("Location Code");
          Location.TESTFIELD("Input Service Distributor");
        END;

        AmountRoundingPrecision := InitAmounts(GenJnlLine);

        IF "Bill-to/Pay-to No." = '' THEN
          CASE TRUE OF
            "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Account No.";
            "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]:
              "Bill-to/Pay-to No." := "Bal. Account No.";
          END;
        IF "Document Date" = 0D THEN
          "Document Date" := "Posting Date";
        IF "Due Date" = 0D THEN
          "Due Date" := "Posting Date";

        JobLine := ("Job No." <> '');

        CrCardTransactionEntryNo := CaptureOrRefundCreditCardPmnt(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        IF "Account No." <> '' THEN BEGIN
          IF ("Bal. Account No." <> '') AND
             (NOT "System-Created Entry") AND
             ("Account Type" IN
              ["Account Type"::Customer,
               "Account Type"::Vendor,
               "Account Type"::"Fixed Asset"])
          THEN BEGIN
            ExchangeAccounts(GenJnlLine);
            Balancing := TRUE;
          END;

          PostGenJnlLine(GenJnlLine,Balancing);
        END;
        IF "Pay VAT" THEN BEGIN
          "Pay VAT" := FALSE;
          Amount := Amount - "VAT Claim Amount";
          "Amount (LCY)" := "Amount (LCY)" - "VAT Claim Amount";
        END;

        IF "LC No." <> '' THEN
          InsertIntoLCRegister(GenJnlLine);
        IF  "Tax Type" <> "Tax Type"::" " THEN BEGIN
          GSTManagement.InsertGSTLedgerEntryTransition(GenJnlLine,NextTransactionNo,GLSourceCode);
          GSTManagement.InsertDetailedGSTLedgerEntryTransition(GenJnlLine,NextTransactionNo);
          GSTManagement.UpdatePostedReconcilation(GenJnlLine);
        END;

        IF (("Document Type" = "Document Type"::Refund) AND "Allow Application") THEN BEGIN
          IF "Applies-to ID" <> '' THEN
            CustLedgerEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF "Applies-to Doc. No." <> '' THEN BEGIN
            CustLedgerEntry.SETRANGE("Document Type","Applies-to Doc. Type");
            CustLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
          END;
          IF CustLedgerEntry.FINDSET THEN REPEAT
            IF CustLedgerEntry."GST on Advance Payment" AND (CustLedgerEntry."TCS Nature of Collection" <> '') THEN
              ERROR(GSTTCSErr);
          UNTIL CustLedgerEntry.NEXT = 0;
        END;

        InsertTDS(GenJnlLine);
        InsertTCS(GenJnlLine);
        InsertWorkTax(GenJnlLine);
        InsertFBT(GenJnlLine);
        IF "Bal. Account No." <> '' THEN BEGIN
          ExchangeAccounts(GenJnlLine);
          PostGenJnlLine(GenJnlLine,NOT Balancing);
        END;
        IF NOT "Excise as Service Tax Credit" THEN BEGIN
          ServTaxPayBuffer.RESET;
          ServTaxPayBuffer.SETRANGE("Document No.","Document No.");
          ServTaxPayBuffer.DELETEALL;
        END;

        ExCenvatClaimDetail.RESET;
        ExCenvatClaimDetail.SETCURRENTKEY("Pay Doc. No.","Journal Template Name","Journal Batch Name","Duty Code No.");
        ExCenvatClaimDetail.SETRANGE("Pay Doc. No.","Document No.");
        ExCenvatClaimDetail.SETRANGE("Journal Template Name","Journal Template Name");
        ExCenvatClaimDetail.SETRANGE("Journal Batch Name","Journal Batch Name");
        ExCenvatClaimDetail.DELETEALL;
        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        CreateDeferralScheduleFromGL(GenJnlLine,Balancing);

        FinishPosting;
      END;
    END;

    LOCAL PROCEDURE PostGenJnlLine@47(VAR GenJnlLine@1000 : Record 81;Balancing@1001 : Boolean);
    BEGIN
      WITH GenJnlLine DO
        CASE "Account Type" OF
          "Account Type"::"G/L Account":
            PostGLAcc(GenJnlLine,Balancing);
          "Account Type"::Customer:
            PostCust(GenJnlLine,Balancing);
          "Account Type"::Vendor:
            PostVend(GenJnlLine,Balancing);
          "Account Type"::"Bank Account":
            PostBankAcc(GenJnlLine,Balancing);
          "Account Type"::"Fixed Asset":
            PostFixedAsset(GenJnlLine);
          "Account Type"::"IC Partner":
            PostICPartner(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE InitAmounts@186(VAR GenJnlLine@1000 : Record 81) : Decimal;
    VAR
      Currency@1001 : Record 4;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Currency Code" = '' THEN BEGIN
          Currency.InitRoundingPrecision;
          "Amount (LCY)" := Amount;
          "VAT Amount (LCY)" := "VAT Amount";
          "VAT Base Amount (LCY)" := "VAT Base Amount";
          "Tax Amount (LCY)" := "Tax Amount";
          "Tax Base Amount (LCY)" := "Tax Base Amount";
        END ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          IF NOT "System-Created Entry" THEN BEGIN
            "Source Currency Code" := "Currency Code";
            "Source Currency Amount" := Amount;
            "Source Curr. VAT Base Amount" := "VAT Base Amount";
            "Source Curr. VAT Amount" := "VAT Amount";
            "Source Curr. Tax Base Amount" := "Tax Base Amount";
            "Source Curr. Tax Amount" := "Tax Amount";
          END;
        END;
        IF "Additional-Currency Posting" = "Additional-Currency Posting"::None THEN BEGIN
          IF Amount <> ROUND(Amount,Currency."Amount Rounding Precision") THEN
            FIELDERROR(
              Amount,
              STRSUBSTNO(NeedsRoundingErr,Amount));
          IF "Amount (LCY)" <> ROUND("Amount (LCY)") THEN
            FIELDERROR(
              "Amount (LCY)",
              STRSUBSTNO(NeedsRoundingErr,"Amount (LCY)"));
        END;
        EXIT(Currency."Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE InitLastDocDate@23(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        LastDocType := "Document Type";
        LastDocNo := "Document No.";
        LastDate := "Posting Date";
      END;
    END;

    LOCAL PROCEDURE InitVAT@33(VAR GenJnlLine@1001 : Record 81;VAR GLEntry@1002 : Record 17;VAR VATPostingSetup@1003 : Record 325);
    VAR
      LCYCurrency@1000 : Record 4;
      SalesTaxCalculate@1004 : Codeunit 398;
    BEGIN
      LCYCurrency.InitRoundingPrecision;
      WITH GenJnlLine DO
        IF "Gen. Posting Type" <> 0 THEN BEGIN // None
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type");
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                CASE "VAT Calculation Type" OF
                  "VAT Calculation Type"::"Normal VAT":
                    IF "VAT Difference" <> 0 THEN BEGIN
                      GLEntry.Amount := "VAT Base Amount (LCY)";
                      GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      GLEntry."Additional-Currency Amount" := "Source Curr. VAT Base Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END ELSE BEGIN
                      GLEntry."VAT Amount" :=
                        ROUND(
                          "Amount (LCY)" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                          LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                      GLEntry.Amount := "Amount (LCY)" - GLEntry."VAT Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt :=
                          ROUND(
                            "Source Currency Amount" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),
                            AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount" - AddCurrGLEntryVATAmt;
                    END;
                  "VAT Calculation Type"::"Reverse Charge VAT":
                    CASE "Gen. Posting Type" OF
                      "Gen. Posting Type"::Purchase:
                        IF "VAT Difference" <> 0 THEN BEGIN
                          GLEntry."VAT Amount" := "VAT Amount (LCY)";
                          IF "Source Currency Code" = AddCurrencyCode THEN
                            AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END ELSE BEGIN
                          GLEntry."VAT Amount" :=
                            ROUND(
                              GLEntry.Amount * VATPostingSetup."VAT %" / 100,
                              LCYCurrency."Amount Rounding Precision",LCYCurrency.VATRoundingDirection);
                          IF "Source Currency Code" = AddCurrencyCode THEN
                            AddCurrGLEntryVATAmt :=
                              ROUND(
                                GLEntry."Additional-Currency Amount" * VATPostingSetup."VAT %" / 100,
                                AddCurrency."Amount Rounding Precision",AddCurrency.VATRoundingDirection)
                          ELSE
                            AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                        END;
                      "Gen. Posting Type"::Sale:
                        BEGIN
                          GLEntry."VAT Amount" := 0;
                          AddCurrGLEntryVATAmt := 0;
                        END;
                    END;
                  "VAT Calculation Type"::"Full VAT":
                    BEGIN
                      CASE "Gen. Posting Type" OF
                        "Gen. Posting Type"::Sale:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                          END;
                        "Gen. Posting Type"::Purchase:
                          BEGIN
                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                          END;
                      END;
                      GLEntry.Amount := 0;
                      GLEntry."Additional-Currency Amount" := 0;
                      GLEntry."VAT Amount" := "Amount (LCY)";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Currency Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr("Amount (LCY)");
                    END;
                  "VAT Calculation Type"::"Sales Tax":
                    BEGIN
                      IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                         "Use Tax"
                      THEN BEGIN
                        GLEntry."VAT Amount" :=
                          ROUND(
                            SalesTaxCalculate.CalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry.Amount := "Amount (LCY)";
                      END ELSE BEGIN
                        GLEntry.Amount :=
                          ROUND(
                            SalesTaxCalculate.ReverseCalculateTax(
                              "Tax Area Code","Tax Group Code","Tax Liable",
                              "Posting Date","Amount (LCY)",Quantity,0));
                        GLEntry."VAT Amount" := "Amount (LCY)" - GLEntry.Amount;
                      END;
                      GLEntry."Additional-Currency Amount" := "Source Currency Amount";
                      IF "Source Currency Code" = AddCurrencyCode THEN
                        AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                      ELSE
                        AddCurrGLEntryVATAmt := CalcLCYToAddCurr(GLEntry."VAT Amount");
                    END;
                END;
              END;
            "VAT Posting"::"Manual VAT Entry":
              IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
                GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
                GLEntry."VAT Amount" := "VAT Amount (LCY)";
                IF "Source Currency Code" = AddCurrencyCode THEN
                  AddCurrGLEntryVATAmt := "Source Curr. VAT Amount"
                ELSE
                  AddCurrGLEntryVATAmt := CalcLCYToAddCurr("VAT Amount (LCY)");
              END;
          END;
        END;
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(GLEntry.Amount,GLEntry."Additional-Currency Amount",GLEntry."Additional-Currency Amount",TRUE,GenJnlLine);
    END;

    LOCAL PROCEDURE PostVAT@34(GenJnlLine@1010 : Record 81;VAR GLEntry@1015 : Record 17;VATPostingSetup@1012 : Record 325);
    VAR
      TaxDetail2@1008 : Record 322;
      SalesTaxCalculate@1013 : Codeunit 398;
      VATAmount@1000 : Decimal;
      VATAmount2@1003 : Decimal;
      VATBase@1001 : Decimal;
      VATBase2@1004 : Decimal;
      SrcCurrVATAmount@1002 : Decimal;
      SrcCurrVATBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
      RemSrcCurrVATAmount@1007 : Decimal;
      SalesTaxBaseAmount@1014 : Decimal;
      TaxDetailFound@1006 : Boolean;
    BEGIN
      WITH GenJnlLine DO
        // Post VAT
        // VAT for VAT entry
        CASE "VAT Calculation Type" OF
          "VAT Calculation Type"::"Normal VAT",
          "VAT Calculation Type"::"Reverse Charge VAT",
          "VAT Calculation Type"::"Full VAT":
            BEGIN
              IF "VAT Posting" = "VAT Posting"::"Automatic VAT Entry" THEN
                "VAT Base Amount (LCY)" := GLEntry.Amount;
              IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN
                AddCurrGLEntryVATAmt := "Source Curr. VAT Amount";
              InsertVAT(
                GenJnlLine,VATPostingSetup,
                GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                GLEntry."Additional-Currency Amount",AddCurrGLEntryVATAmt,"Source Curr. VAT Base Amount");
              NextConnectionNo := NextConnectionNo + 1;
            END;
          "VAT Calculation Type"::"Sales Tax":
            BEGIN
              CASE "VAT Posting" OF
                "VAT Posting"::"Automatic VAT Entry":
                  SalesTaxBaseAmount := GLEntry.Amount;
                "VAT Posting"::"Manual VAT Entry":
                  SalesTaxBaseAmount := "VAT Base Amount (LCY)";
              END;
              IF ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
                 ("Gen. Posting Type" = "Gen. Posting Type"::Settlement)
              THEN
                InsertVAT(
                  GenJnlLine,VATPostingSetup,
                  GLEntry.Amount,GLEntry."VAT Amount","VAT Base Amount (LCY)","Source Currency Code",
                  "Source Curr. VAT Base Amount","Source Curr. VAT Amount","Source Curr. VAT Base Amount")
              ELSE BEGIN
                CLEAR(SalesTaxCalculate);
                SalesTaxCalculate.InitSalesTaxLines(
                  "Tax Area Code","Tax Group Code","Tax Liable",
                  SalesTaxBaseAmount,Quantity,"Posting Date",GLEntry."VAT Amount");
                SrcCurrVATAmount := 0;
                SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr(SalesTaxBaseAmount);
                RemSrcCurrVATAmount := AddCurrGLEntryVATAmt;
                TaxDetailFound := FALSE;
                WHILE SalesTaxCalculate.GetSalesTaxLine(TaxDetail2,VATAmount,VATBase) DO BEGIN
                  RemSrcCurrVATAmount := RemSrcCurrVATAmount - SrcCurrVATAmount;
                  IF TaxDetailFound THEN
                    InsertVAT(
                      GenJnlLine,VATPostingSetup,
                      SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                      SrcCurrSalesTaxBaseAmount,SrcCurrVATAmount,SrcCurrVATBase);
                  TaxDetailFound := TRUE;
                  TaxDetail := TaxDetail2;
                  VATAmount2 := VATAmount;
                  VATBase2 := VATBase;
                  SrcCurrVATAmount := CalcLCYToAddCurr(VATAmount);
                  SrcCurrVATBase := CalcLCYToAddCurr(VATBase);
                END;
                IF TaxDetailFound THEN
                  InsertVAT(
                    GenJnlLine,VATPostingSetup,
                    SalesTaxBaseAmount,VATAmount2,VATBase2,"Source Currency Code",
                    SrcCurrSalesTaxBaseAmount,RemSrcCurrVATAmount,SrcCurrVATBase);
                InsertSummarizedVAT(GenJnlLine);
              END;
            END;
        END;
    END;

    LOCAL PROCEDURE InsertVAT@30(GenJnlLine@1015 : Record 81;VATPostingSetup@1018 : Record 325;GLEntryAmount@1000 : Decimal;GLEntryVATAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryVATAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      TaxJurisdiction@1003 : Record 320;
      VATAmount@1008 : Decimal;
      VATBase@1009 : Decimal;
      SrcCurrVATAmount@1011 : Decimal;
      SrcCurrVATBase@1012 : Decimal;
      VATDifferenceLCY@1013 : Decimal;
      SrcCurrVATDifference@1014 : Decimal;
      UnrealizedVAT@1019 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        // Post VAT
        // VAT for VAT entry
        VATEntry.INIT;
        VATEntry.CopyFromGenJnlLine(GenJnlLine);
        VATEntry."Entry No." := NextVATEntryNo;
        VATEntry."EU Service" := VATPostingSetup."EU Service";
        VATEntry."Transaction No." := NextTransactionNo;
        VATEntry."Sales Tax Connection No." := NextConnectionNo;

        IF "VAT Difference" = 0 THEN
          VATDifferenceLCY := 0
        ELSE
          IF "Currency Code" = '' THEN
            VATDifferenceLCY := "VAT Difference"
          ELSE
            VATDifferenceLCY :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date","Currency Code","VAT Difference",
                  CurrExchRate.ExchangeRate("Posting Date","Currency Code")));

        IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN BEGIN
          IF TaxDetail."Tax Jurisdiction Code" <> '' THEN
            TaxJurisdiction.GET(TaxDetail."Tax Jurisdiction Code");
          IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
            VATEntry."Tax Group Used" := TaxDetail."Tax Group Code";
            VATEntry."Tax Type" := TaxDetail."Tax Type";
            VATEntry."Tax on Tax" := TaxDetail."Calculate Tax on Tax";
          END;
          VATEntry."Tax Jurisdiction Code" := TaxDetail."Tax Jurisdiction Code";
        END;

        IF AddCurrencyCode <> '' THEN
          IF AddCurrencyCode <> SrcCurrCode THEN BEGIN
            SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
            SrcCurrGLEntryVATAmt := ExchangeAmtLCYToFCY2(GLEntryVATAmount);
            SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
            SrcCurrVATDifference := ExchangeAmtLCYToFCY2(VATDifferenceLCY);
          END ELSE
            SrcCurrVATDifference := "VAT Difference";

        UnrealizedVAT :=
          (((VATPostingSetup."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
              VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT",
              VATPostingSetup."VAT Calculation Type"::"Full VAT"])) OR
           ((TaxJurisdiction."Unrealized VAT Type" > 0) AND
            (VATPostingSetup."VAT Calculation Type" IN
             [VATPostingSetup."VAT Calculation Type"::"Sales Tax"]))) AND
          IsNotPayment("Document Type");
        IF GLSetup."Prepayment Unrealized VAT" AND NOT GLSetup."Unrealized VAT" AND
           (VATPostingSetup."Unrealized VAT Type" > 0)
        THEN
          UnrealizedVAT := Prepayment;

        // VAT for VAT entry
        IF "Gen. Posting Type" <> 0 THEN BEGIN
          CASE "VAT Posting" OF
            "VAT Posting"::"Automatic VAT Entry":
              BEGIN
                VATAmount := GLEntryVATAmount;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
            "VAT Posting"::"Manual VAT Entry":
              BEGIN
                IF "Gen. Posting Type" = "Gen. Posting Type"::Settlement THEN BEGIN
                  VATAmount := GLEntryAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                  VATEntry.Closed := TRUE;
                END ELSE BEGIN
                  VATAmount := GLEntryVATAmount;
                  SrcCurrVATAmount := SrcCurrGLEntryVATAmt;
                END;
                VATBase := GLEntryBaseAmount;
                SrcCurrVATBase := SrcCurrGLEntryBaseAmt;
              END;
          END;

          IF UnrealizedVAT THEN BEGIN
            VATEntry.Amount := 0;
            VATEntry.Base := 0;
            VATEntry."Unrealized Amount" := VATAmount;
            VATEntry."Unrealized Base" := VATBase;
            VATEntry."Remaining Unrealized Amount" := VATEntry."Unrealized Amount";
            VATEntry."Remaining Unrealized Base" := VATEntry."Unrealized Base";
          END ELSE BEGIN
            VATEntry.Amount := VATAmount;
            VATEntry.Base := VATBase;
            VATEntry."Unrealized Amount" := 0;
            VATEntry."Unrealized Base" := 0;
            VATEntry."Remaining Unrealized Amount" := 0;
            VATEntry."Remaining Unrealized Base" := 0;
          END;

          IF AddCurrencyCode = '' THEN BEGIN
            VATEntry."Additional-Currency Base" := 0;
            VATEntry."Additional-Currency Amount" := 0;
            VATEntry."Add.-Currency Unrealized Amt." := 0;
            VATEntry."Add.-Currency Unrealized Base" := 0;
          END ELSE
            IF UnrealizedVAT THEN BEGIN
              VATEntry."Additional-Currency Base" := 0;
              VATEntry."Additional-Currency Amount" := 0;
              VATEntry."Add.-Currency Unrealized Base" := SrcCurrVATBase;
              VATEntry."Add.-Currency Unrealized Amt." := SrcCurrVATAmount;
            END ELSE BEGIN
              VATEntry."Additional-Currency Base" := SrcCurrVATBase;
              VATEntry."Additional-Currency Amount" := SrcCurrVATAmount;
              VATEntry."Add.-Currency Unrealized Base" := 0;
              VATEntry."Add.-Currency Unrealized Amt." := 0;
            END;
          VATEntry."Add.-Curr. Rem. Unreal. Amount" := VATEntry."Add.-Currency Unrealized Amt.";
          VATEntry."Add.-Curr. Rem. Unreal. Base" := VATEntry."Add.-Currency Unrealized Base";
          VATEntry."VAT Difference" := VATDifferenceLCY;
          VATEntry."Add.-Curr. VAT Difference" := SrcCurrVATDifference;

          VATEntry.INSERT(TRUE);
          GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.");
          NextVATEntryNo := NextVATEntryNo + 1;
        END;

        // VAT for G/L entry/entries
        IF (GLEntryVATAmount <> 0) OR
           ((SrcCurrGLEntryVATAmt <> 0) AND (SrcCurrCode = AddCurrencyCode))
        THEN
          CASE "Gen. Posting Type" OF
            "Gen. Posting Type"::Purchase:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetPurchAccount(UnrealizedVAT),
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                    CreateGLEntry(GenJnlLine,VATPostingSetup.GetRevChargeAccount(UnrealizedVAT),
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE,TRUE);
                  END;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  IF "Use Tax" THEN BEGIN
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(UnrealizedVAT),'',
                      -GLEntryVATAmount,-SrcCurrGLEntryVATAmt,TRUE);
                  END ELSE
                    InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(UnrealizedVAT),'',
                      GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
              END;
            "Gen. Posting Type"::Sale:
              CASE VATPostingSetup."VAT Calculation Type" OF
                VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                VATPostingSetup."VAT Calculation Type"::"Full VAT":
                  CreateGLEntry(GenJnlLine,VATPostingSetup.GetSalesAccount(UnrealizedVAT),
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE,TRUE);
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                  ;
                VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                  InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetSalesAccount(UnrealizedVAT),'',
                    GLEntryVATAmount,SrcCurrGLEntryVATAmt,TRUE);
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE SummarizeVAT@31(SummarizeGLEntries@1000 : Boolean;GLEntry@1001 : Record 17);
    VAR
      InsertedTempVAT@1004 : Boolean;
    BEGIN
      InsertedTempVAT := FALSE;
      IF SummarizeGLEntries THEN
        IF TempGLEntryVAT.FINDSET THEN
          REPEAT
            IF (TempGLEntryVAT."G/L Account No." = GLEntry."G/L Account No.") AND
               (TempGLEntryVAT."Bal. Account No." = GLEntry."Bal. Account No.")
            THEN BEGIN
              TempGLEntryVAT.Amount := TempGLEntryVAT.Amount + GLEntry.Amount;
              TempGLEntryVAT."Additional-Currency Amount" :=
                TempGLEntryVAT."Additional-Currency Amount" + GLEntry."Additional-Currency Amount";
              TempGLEntryVAT.MODIFY;
              InsertedTempVAT := TRUE;
            END;
          UNTIL (TempGLEntryVAT.NEXT = 0) OR InsertedTempVAT;
      IF NOT InsertedTempVAT OR NOT SummarizeGLEntries THEN BEGIN
        TempGLEntryVAT := GLEntry;
        TempGLEntryVAT."Entry No." :=
          TempGLEntryVAT."Entry No." + InsertedTempGLEntryVAT;
        TempGLEntryVAT.INSERT;
        InsertedTempGLEntryVAT := InsertedTempGLEntryVAT + 1;
      END;
    END;

    LOCAL PROCEDURE InsertSummarizedVAT@37(GenJnlLine@1000 : Record 81);
    BEGIN
      IF TempGLEntryVAT.FINDSET THEN BEGIN
        REPEAT
          InsertGLEntry(GenJnlLine,TempGLEntryVAT,TRUE);
        UNTIL TempGLEntryVAT.NEXT = 0;
        TempGLEntryVAT.DELETEALL;
        InsertedTempGLEntryVAT := 0;
      END;
      NextConnectionNo := NextConnectionNo + 1;
    END;

    LOCAL PROCEDURE PostGLAcc@11(VAR GenJnlLine@1001 : Record 81;Balancing@1004 : Boolean);
    VAR
      GLAcc@1000 : Record 15;
      GLEntry@1002 : Record 17;
      VATPostingSetup@1003 : Record 325;
      OriginalGenJnlLine@1500005 : Record 81;
      SourceCurrTDSAmt@1500002 : Decimal;
      SourceCurrTCSAmt@1500001 : Decimal;
      SourceCurrWorkTaxAmt@1500004 : Decimal;
      ServiceTaxPoTAmount@1500006 : Decimal;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Excise Posting" THEN BEGIN
          PostExcise(GenJnlLine);
          EXIT;
        END;
        GLAcc.GET("Account No.");// G/L entry
        IF (IsServiceTaxExist(GenJnlLine) OR "ST Pure Agent" OR ("Nature of Services" = "Nature of Services"::Export) OR
            ("Nature of Services" = "Nature of Services"::Exempted))
           AND ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND (NOT "Serv. Tax on Advance Payment")
        THEN BEGIN
          GLAcc.GET("Account No.");
          IF GLAcc."Service Tax Group Code" = '' THEN
            IF "Service Tax Entry" THEN BEGIN
              GenJnlLine.TESTFIELD("Bill-to/Pay-to No.");
              ServiceTaxPoTAmount := PostServiceTax(GenJnlLine,GenJnlLine."Bill-to/Pay-to No.",GenJnlLine."Posting Group");
              IF "System-Created Entry" THEN
                EXIT;
              AddServiceTaxToJnlLineAmount(GenJnlLine,ServiceTaxPoTAmount);
            END;
        END;

        IF (("Amount (LCY)" < 0) AND NOT "TDS From Orders" AND
            (("TDS Nature of Deduction" <> '') OR ("Work Tax Nature Of Deduction" <> '')) AND
            (("Balance Work Tax Amount" <> 0) OR ("Bal. TDS/TCS Including SHECESS" <> 0)))
        THEN BEGIN
          IF AddCurrencyCode <> '' THEN BEGIN
            SourceCurrTDSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
            SourceCurrWorkTaxAmt := CalcLCYToAddCurr(WorkTaxAmountLCY);
          END;
          IF (ABS("Amount (LCY)") < ABS(TotalITAmountLCY)) AND ("Document Type" <> "Document Type"::Invoice) THEN
            InitGLEntry(GenJnlLine,GLEntry,
              "Account No.","Amount (LCY)","Source Currency Amount" ,TRUE,"System-Created Entry")
          ELSE BEGIN
            IF TotalITAmountLCY < 0 THEN
              InitGLEntry(GenJnlLine,GLEntry,
                "Account No.","Amount (LCY)" - TotalITAmountLCY - WorkTaxAmountLCY,
                "Source Currency Amount" - SourceCurrTDSAmt - SourceCurrWorkTaxAmt,
                TRUE,"System-Created Entry")
            ELSE
              InitGLEntry(GenJnlLine,GLEntry,
                "Account No.","Amount (LCY)" + TotalITAmountLCY + WorkTaxAmountLCY,
                "Source Currency Amount" + SourceCurrTDSAmt + SourceCurrWorkTaxAmt,
                TRUE,"System-Created Entry")
          END;
        END ELSE
          IF (("Amount (LCY)" > 0) AND (NOT "TCS From Orders") AND (NOT Adjustment) AND ("TCS Nature of Collection" <> '') AND
              ("Total TDS/TCS Incl. SHE CESS" <> 0) AND ("Document Type" <> "Document Type"::"Credit Memo"))
          THEN BEGIN
            IF AddCurrencyCode <> '' THEN
              SourceCurrTDSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
            InitGLEntry(GenJnlLine,GLEntry,
              "Account No.","Amount (LCY)" + ABS(TotalITAmountLCY),
              "Source Currency Amount" + ABS(SourceCurrTDSAmt),TRUE,"System-Created Entry")
          END ELSE
            IF (TDSAmount <> 0) AND ("Total TDS/TCS Incl. SHE CESS" = 0) AND (Amount < 0) THEN BEGIN
              InitGLEntry(GenJnlLine,GLEntry,
                "Account No.","Amount (LCY)" + TDSAmount,
                "Source Currency Amount" + TDSAmount,TRUE,TRUE);
              TDSAmount := 0;
            END ELSE
              InitGLEntry(GenJnlLine,GLEntry,
          "Account No.","Amount (LCY)",
          "Source Currency Amount",TRUE,"System-Created Entry");
        IF NOT "System-Created Entry" THEN
          IF "Posting Date" = NORMALDATE("Posting Date") THEN
            GLAcc.TESTFIELD("Direct Posting",TRUE);
        IF GLAcc."Omit Default Descr. in Jnl." THEN
          IF DELCHR(Description,'=',' ') = '' THEN
            ERROR(
              DescriptionMustNotBeBlankErr,
              GLAcc.FIELDCAPTION("Omit Default Descr. in Jnl."),
              GLAcc."No.",
              FIELDCAPTION(Description));
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        GLEntry."No. Series" := "Posting No. Series";
        IF "Additional-Currency Posting" =
           "Additional-Currency Posting"::"Additional-Currency Amount Only"
        THEN BEGIN
          GLEntry."Additional-Currency Amount" := Amount;
          GLEntry.Amount := 0;
        END;
        // Store Entry No. to global variable for return:
        GLEntryNo := GLEntry."Entry No.";
        PostJob(GenJnlLine,GLEntry);
        InitTax(GenJnlLine,GLEntry);
        IF NOT (("TCS Nature of Collection" <> '') AND (Amount = 0)) THEN
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
        PostTax(GenJnlLine,GLEntry);
        PostVATTablePurchaseTax(GenJnlLine);

        GetGLSetup;
        ExciseCenvatClaim.RESET;
        ExciseCenvatClaim.SETRANGE("Journal Template Name","Journal Template Name");
        ExciseCenvatClaim.SETRANGE("Journal Batch Name","Journal Batch Name");
        ExciseCenvatClaim.SETRANGE("Line No.","Line No.");
        ExciseCenvatClaim.SETRANGE("Document No.","Document No.");
        IF SalesDocumentNo <> '' THEN
          ExciseCenvatClaim.SETRANGE("Document No.",SalesDocumentNo);
        IF ExciseCenvatClaim.FINDFIRST THEN;

        IF PLA AND ("Account No." = GLSetup."PLA Account") THEN
          IF "Amount (LCY)" > 0 THEN BEGIN
            ExciseInsertRGRegisters.SetSalesHeaderNo(SalesDocumentNo);
            ExciseInsertRGRegisters.InsertPLA(GenJnlLine,NextTransactionNo);
          END;
        IF "Pay Excise" THEN
          PostCenvat(GenJnlLine);

        IF "Excise Charge" THEN
          ExciseChargeEntries(GenJnlLine);

        WITH ExciseCenvatClaim DO
          IF "Pay Excise" OR "Excise as Service Tax Credit" THEN BEGIN
            IF SalesDocumentNo <> '' THEN
              ExciseInsertRGRegisters.SetSalesHeaderNo(SalesDocumentNo);
            IF ("RG 23 A PART II eCess Amount" <> 0) OR ("RG 23 A PART II NCCD Amount" <> 0) OR
               ("RG 23 A PART II CESS Amount" <> 0) OR ("RG 23 A PART II SAED Amount" <> 0) OR
               ("RG 23 A PART II BED Amount" <> 0) OR ("RG 23A PART II AED(GSI) Amount" <> 0) OR
               ("RG 23A PART II AED(TTA) Amount" <> 0) OR ("RG 23 A Part II ADET Amount" <> 0) OR
               ("RG 23 A PART II SED Amount" <> 0) OR ("RG 23 A Part II ADE Amount" <> 0) OR
               ("RG 23 A PART II ADC VAT Amount" <> 0) OR ("RG 23 A Part II SHECess Amount" <> 0)
            THEN
              ExciseInsertRGRegisters.InsertRG23APartIISale(GenJnlLine);

            IF ("RG 23 C PART II eCess Amount" <> 0) OR ("RG 23 C PART II NCCD Amount" <> 0) OR
               ("RG 23 C PART II CESS Amount" <> 0) OR ("RG 23 C PART II SAED Amount" <> 0) OR
               ("RG 23 C PART II BED Amount" <> 0) OR ("RG 23C PART II AED(GSI) Amount" <> 0) OR
               ("RG 23 C Part II ADET Amount" <> 0) OR ("RG 23C PART II AED(TTA) Amount" <> 0) OR
               ("RG 23 C PART II SED Amount" <> 0) OR ("RG 23 C Part II ADE Amount" <> 0) OR
               ("RG 23 C PART II ADC VAT Amount" <> 0) OR ("RG 23 C Part II SHECess Amount" <> 0)
            THEN
              ExciseInsertRGRegisters.InsertRG23CPartIISale(GenJnlLine);

            IF NOT PLA THEN
              IF ("PLA eCess Amount" <> 0) OR ("PLA NCCD Amount" <> 0) OR
                 ("PLA CESS Amount" <> 0) OR ("PLA SAED Amount" <> 0) OR
                 ("PLA BED Amount" <> 0) OR ("PLA AED(GSI) Amount" <> 0) OR
                 ("PLA ADET Amount" <> 0) OR ("PLA AED(TTA) Amount" <> 0) OR
                 ("PLA SED Amount" <> 0) OR ("PLA ADE Amount" <> 0) OR
                 ("PLA Excise Charge Amount" <> 0) OR ("PLA SHE Cess Amount" <> 0)
              THEN
                ExciseInsertRGRegisters.InsertPLASales(GenJnlLine,NextTransactionNo);
          END;

        IF ("Bal. TDS/TCS Including SHECESS" <> 0) AND ("Amount (LCY)" < 0) AND
           (NOT "TDS From Orders") AND ("TDS Nature of Deduction" <> '')
        THEN BEGIN
          TDSGroup.FindOnDate("TDS Group","Posting Date");
          TDSGroup.TESTFIELD("TDS Account");
          IF AddCurrencyCode <> '' THEN
            SourceCurrTDSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
          CreateGLEntry(GenJnlLine,
            TDSGroup."TDS Account",-ABS(TotalITAmountLCY),-ABS(SourceCurrTDSAmt),TRUE,"System-Created Entry");
        END;

        IF ("Total TDS/TCS Incl. SHE CESS" <> 0) AND ("Amount (LCY)" < 0) AND (NOT Adjustment) AND
           (NOT "TCS From Orders") AND ("TCS Nature of Collection" <> '')
        THEN BEGIN
          TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
          TCSSetup.SETRANGE("Assessee Code","Assessee Code");
          TCSSetup.SETRANGE("Concessional Code","Concessional Code");
          TCSSetup.SETRANGE("Effective Date",0D,"Posting Date");
          TCSSetup.FINDLAST;
          TCSSetup.TESTFIELD("TCS Account No.");
          IF AddCurrencyCode <> '' THEN
            SourceCurrTCSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
          CreateGLEntry(GenJnlLine,
            TCSSetup."TCS Account No.",-ABS(TotalITAmountLCY),-ABS(SourceCurrTCSAmt),TRUE,"System-Created Entry");
        END;

        IF ("Balance Work Tax Amount" > 0) AND NOT "TDS From Orders" AND (("Amount (LCY)" < 0) OR ("Amount (LCY)" = 0)) THEN
          PostWorkTax(GenJnlLine);

        IF IsServiceTaxExist(GenJnlLine) AND NOT "Serv. Tax on Advance Payment" AND
           ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund])
        THEN BEGIN
          GLAcc.GET("Account No.");
          IF GLAcc."Service Tax Group Code" = '' THEN
            IF "Service Tax Entry" THEN BEGIN
              IF "System-Created Entry" THEN
                EXIT;
              RestoreJnlLineAmounts(GenJnlLine,OriginalGenJnlLine);
            END;
        END;

        IF ("Total TDS/TCS Incl. SHE CESS" = 0) AND (Amount < 0) THEN
          IF TDSInvBufJnl[1].FINDSET THEN BEGIN
            REPEAT
              CreateGLEntry(GenJnlLine,
                TDSInvBufJnl[1]."TDS Account No.",
                -(TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)" + TDSInvBufJnl[1]."Work Tax Amount"),
                -(TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)" + TDSInvBufJnl[1]."Work Tax Amount"),TRUE,TRUE);
            UNTIL TDSInvBufJnl[1].NEXT = 0;
            TDSInvBufJnl[1].DELETEALL;
          END;
        DeferralPosting("Deferral Code","Source Code","Account No.",GenJnlLine,Balancing);
        OnMoveGenJournalLine(GLEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostCust@12(VAR GenJnlLine@1007 : Record 81;Balancing@1010 : Boolean);
    VAR
      LineFeeNoteOnReportHist@1008 : Record 1053;
      Cust@1005 : Record 18;
      CustPostingGr@1006 : Record 92;
      CustLedgEntry@1000 : Record 21;
      CVLedgEntryBuf@1002 : Record 382;
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldCustLedgEntry@1004 : Record 379;
      ReceivablesAccount@1009 : Code[20];
      ServTaxEntry@1500000 : Record 16473;
      ServiceTaxPoTAmount@1500001 : Decimal;
      DtldLedgEntryInserted@1001 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        Cust.GET("Account No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        IF "Service Tax Entry" THEN BEGIN
          ServiceTaxPoTAmount := PostServiceTax(GenJnlLine,Cust."No.",CustPostingGr.Code);
          IF "System-Created Entry" THEN
            EXIT;
          IF NOT "Serv. Tax on Advance Payment" THEN
            AddServiceTaxToJnlLineAmount(GenJnlLine,ServiceTaxPoTAmount);
        END;
        IF NOT "S.T From Order" THEN
          STPureAgent := "ST Pure Agent";
        ReceivablesAccount := CustPostingGr.GetReceivablesAccount;
        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;
        InitCustLedgEntry(GenJnlLine,CustLedgEntry);
        IF "GST on Advance Payment" THEN BEGIN
          PostCustomerGSTPayment(GenJnlLine,CustLedgEntry);
          IF "System-Created Entry" THEN
            EXIT;
        END;
        IF ("Document Type" = "Document Type"::Refund) AND (NOT "GST on Advance Payment") THEN BEGIN
          PostCustomerGSTRefund(GenJnlLine);
          IF "System-Created Entry" THEN
            EXIT;
        END;
        IF NOT Cust."Block Payment Tolerance" THEN
          CalcPmtTolerancePossible(
            GenJnlLine,CustLedgEntry."Pmt. Discount Date",CustLedgEntry."Pmt. Disc. Tolerance Date",
            CustLedgEntry."Max. Payment Tolerance");
        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := CustLedgEntry."Entry No.";
        IF (NOT "TCS From Orders") AND (NOT Adjustment) AND ("Document Type" <> "Document Type"::Payment) AND
           ("TCS Nature of Collection" <> '')
        THEN BEGIN
          TempDtldCVLedgEntryBuf.Amount := Amount + "Total TDS/TCS Incl. SHE CESS";
          TempDtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)" + TotalITAmountLCY;
          TempDtldCVLedgEntryBuf."Additional-Currency Amount" := Amount + "Total TDS/TCS Incl. SHE CESS";
        END ELSE BEGIN
          TempDtldCVLedgEntryBuf.Amount := Amount;
          TempDtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)";
          TempDtldCVLedgEntryBuf."Additional-Currency Amount" := Amount;
        END;
        TempDtldCVLedgEntryBuf."TDS Nature of Deduction" := "TDS Nature of Deduction";
        TempDtldCVLedgEntryBuf."TDS Group" := "TDS Group";
        TempDtldCVLedgEntryBuf."Total TDS/TCS Incl. SHECESS" := "Total TDS/TCS Incl. SHE CESS";
        TempDtldCVLedgEntryBuf."TCS Nature of Collection" := "TCS Nature of Collection";
        TempDtldCVLedgEntryBuf."TCS Type" := "TCS Type";
        TempDtldCVLedgEntryBuf."Total TDS/TCS Incl. SHECESS" := "Total TDS/TCS Incl. SHE CESS";
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;
        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);
        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Original Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Original Currency Factor" := 1;
        CVLedgEntryBuf."Adjusted Currency Factor" := CVLedgEntryBuf."Original Currency Factor";
        // Check the document no.
        IF "Recurring Method" = 0 THEN
          IF IsNotPayment("Document Type") THEN BEGIN
            GenJnlCheckLine.CheckSalesDocNoIsNotUsed("Document Type","Document No.");
            CheckSalesExtDocNo(GenJnlLine);
          END;
        GenJnlLineTmp.RESET;
        GenJnlLineTmp.DELETEALL;
        // Post application
        OnlineCustLedgerEntry := CustLedgEntry;
        IF NOT "GST on Advance Payment" THEN
          ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust);
        // Post customer entry
        CustLedgEntry."GST on Advance Payment" := "GST on Advance Payment";
        IF ("Document Type" = "Document Type"::Payment) AND (NOT "GST on Advance Payment") THEN
          CustLedgEntry."GST Customer Type" := CustLedgEntry."GST Customer Type"::" ";
        CVLedgEntryBuf.CopyToCustLedgEntry(CustLedgEntry);
        CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Applies-to Doc. No." := '';
        CustLedgEntry."Serv. Tax on Advance Payment" := "Serv. Tax on Advance Payment";
        CustLedgEntry.PoT := PoT;
        CustLedgEntry.INSERT(TRUE);
        // Post detailed customer entries
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,TRUE);
        // Post Reminder Terms - Note About Line Fee on Report
        LineFeeNoteOnReportHist.Save(CustLedgEntry);
        IF ("Document Type" IN ["Document Type"::Refund,"Document Type"::Payment]) AND
           "Serv. Tax on Advance Payment"
        THEN BEGIN
          ServTaxEntry.RESET;
          ServTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
          ServTaxEntry.SETRANGE("Document No.","Document No.");
          ServTaxEntry.SETRANGE("Posting Date","Posting Date");
          ServTaxEntry.SETRANGE("Transaction No.",CVLedgEntryBuf."Transaction No.");
          ServTaxEntry.SETRANGE("Service Tax Group Code","Service Tax Group Code");
          ServTaxEntry.SETRANGE("Service Tax Registration No.","Service Tax Registration No.");
          IF ServTaxEntry.FINDSET THEN
            REPEAT
              IF NOT TempServTaxEntry.GET(ServTaxEntry."Entry No.") THEN BEGIN
                TempServTaxEntry.TRANSFERFIELDS(ServTaxEntry);
                TempServTaxEntry.INSERT;
                PostServiceTaxPaymentCust(GenJnlLine,CVLedgEntryBuf,CVLedgEntryBuf,ABS(ServTaxEntry."Amount Including Service Tax"),Cust);
                ServiceTaxMgt.SetTransactionNo(NextTransactionNo);
                ServiceTaxMgt.ApplyCustPayment(CVLedgEntryBuf,CVLedgEntryBuf,ABS(ServTaxEntry."Amount Including Service Tax"));
              END;
            UNTIL ServTaxEntry.NEXT = 0;
        END;
        PostAppSTGenJnlLineTmp(GenJnlLine);
        UpdateDOPaymentTransactEntry(GenJnlLine,CustLedgEntry."Entry No.");
        DeferralPosting("Deferral Code","Source Code",ReceivablesAccount,GenJnlLine,Balancing);
        OnMoveGenJournalLine(CustLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostVend@13(GenJnlLine@1007 : Record 81;Balancing@1009 : Boolean);
    VAR
      Vend@1005 : Record 23;
      VendPostingGr@1006 : Record 93;
      VendLedgEntry@1000 : Record 25;
      CVLedgEntryBuf@1002 : Record 382;
      TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;
      DtldVendLedgEntry@1004 : Record 380;
      PayablesAccount@1008 : Code[20];
      OriginalGenJnlLine@1500005 : Record 81;
      SourceCurrWorkTaxAmt@1280000 : Decimal;
      SourceCurrTDSAmt@1500000 : Decimal;
      ServiceTaxPoTAmount@1500004 : Decimal;
      DtldLedgEntryInserted@1001 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        Vend.GET("Account No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);
        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        PayablesAccount := VendPostingGr.GetPayablesAccount;
        IF "Service Tax Entry" OR "Serv. Tax on Advance Payment" THEN BEGIN
          ServiceTaxPoTAmount := PostServiceTax(GenJnlLine,Vend."No.",VendPostingGr.Code);
          IF "System-Created Entry" THEN
            EXIT;
          OriginalGenJnlLine := GenJnlLine;
          AddServiceTaxToJnlLineAmount(GenJnlLine,ServiceTaxPoTAmount);
        END;
        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;
        InitVendLedgEntry(GenJnlLine,VendLedgEntry);
        IF "GST on Advance Payment" AND "GST Reverse Charge" THEN BEGIN
          PostVendorGSTPayment(GenJnlLine,VendLedgEntry,Vend);
          IF "System-Created Entry" THEN
            EXIT;
        END;
        IF ("Document Type" = "Document Type"::Refund) AND (NOT "GST on Advance Payment") THEN BEGIN
          PostVendorGSTRefund(GenJnlLine);
          IF "System-Created Entry" THEN
            EXIT;
        END;
        IF NOT Vend."Block Payment Tolerance" THEN
          CalcPmtTolerancePossible(
            GenJnlLine,VendLedgEntry."Pmt. Discount Date",VendLedgEntry."Pmt. Disc. Tolerance Date",
            VendLedgEntry."Max. Payment Tolerance");
        TempDtldCVLedgEntryBuf.DELETEALL;
        TempDtldCVLedgEntryBuf.INIT;
        TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
        TempDtldCVLedgEntryBuf."CV Ledger Entry No." := VendLedgEntry."Entry No.";
        IF ("Document Type" = "Document Type"::Invoice) AND (NOT "TDS From Orders") AND
           (("TDS Nature of Deduction" <> '') OR ("Work Tax Nature Of Deduction" <> ''))
        THEN BEGIN
          TempDtldCVLedgEntryBuf.Amount := Amount - "Bal. TDS/TCS Including SHECESS" - "Balance Work Tax Amount";
          TempDtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)" - TotalITAmountLCY - WorkTaxAmountLCY;
          TempDtldCVLedgEntryBuf."Additional-Currency Amount" := Amount - CalcLCYToAddCurr(TotalITAmountLCY) -
            CalcLCYToAddCurr(WorkTaxAmountLCY);
        END ELSE
          IF ABS(Amount) < ABS("Bal. TDS/TCS Including SHECESS") THEN BEGIN
            TempDtldCVLedgEntryBuf.Amount := Amount + "Bal. TDS/TCS Including SHECESS" + "Balance Work Tax Amount";
            IF "Currency Code" <> '' THEN
              TempDtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)" + TotalITAmountLCY + WorkTaxAmountLCY
            ELSE
              TempDtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)" + "Bal. TDS/TCS Including SHECESS" + "Balance Work Tax Amount";
            TempDtldCVLedgEntryBuf."Additional-Currency Amount" := Amount + CalcLCYToAddCurr(TotalITAmountLCY) +
              CalcLCYToAddCurr(WorkTaxAmountLCY);
          END ELSE BEGIN
            TempDtldCVLedgEntryBuf.Amount := Amount;
            TempDtldCVLedgEntryBuf."Amount (LCY)" := "Amount (LCY)";
            TempDtldCVLedgEntryBuf."Additional-Currency Amount" := Amount;
          END;
        TempDtldCVLedgEntryBuf."TDS Nature of Deduction" := "TDS Nature of Deduction";
        TempDtldCVLedgEntryBuf."TDS Group" := "TDS Group";
        TempDtldCVLedgEntryBuf."Total TDS/TCS Incl. SHECESS" := "Total TDS/TCS Incl. SHE CESS";

        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,TRUE);
        CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
        CVLedgEntryBuf.Positive := CVLedgEntryBuf."Remaining Amount" > 0;
        CalcPmtDiscPossible(GenJnlLine,CVLedgEntryBuf);
        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          CVLedgEntryBuf."Adjusted Currency Factor" := "Currency Factor"
        END ELSE
          CVLedgEntryBuf."Adjusted Currency Factor" := 1;
        CVLedgEntryBuf."Original Currency Factor" := CVLedgEntryBuf."Adjusted Currency Factor";

        // Check the document no.
        IF "Recurring Method" = 0 THEN
          IF IsNotPayment("Document Type") THEN BEGIN
            GenJnlCheckLine.CheckPurchDocNoIsNotUsed("Document Type","Document No.");
            CheckPurchExtDocNo(GenJnlLine);
          END;
        GenJnlLineTmp.RESET;
        GenJnlLineTmp.DELETEALL;

        TotalAmtToApply := 0;
        OnlineVendorLedgerEntry := VendLedgEntry;
        // Post application
        IF NOT "GST on Advance Payment" THEN
          ApplyVendLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend);
        // Post vendor entry
        VendLedgEntry."GST on Advance Payment" := "GST on Advance Payment";
        IF ("Document Type" = "Document Type"::Payment) AND (NOT "GST on Advance Payment") THEN BEGIN
          VendLedgEntry."GST Vendor Type" := "GST Vendor Type"::" ";
          VendLedgEntry."GST Reverse Charge" := FALSE;
        END;
        CVLedgEntryBuf.CopyToVendLedgEntry(VendLedgEntry);
        VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Applies-to Doc. No." := '';
        VendLedgEntry."Serv. Tax on Advance Payment" := "Serv. Tax on Advance Payment";
        VendLedgEntry."Input Service Distribution" := "Input Service Distribution";
        VendLedgEntry.PoT := PoT;
        VendLedgEntry.INSERT(TRUE);

        // Post detailed vendor entries
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,TRUE);
        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
        PostAppSTGenJnlLineTmp(GenJnlLine);
        IF "Service Tax Entry" THEN
          RestoreJnlLineAmounts(GenJnlLine,OriginalGenJnlLine);
        IF ("Bal. TDS/TCS Including SHECESS" <> 0) AND ("Amount (LCY)" < 0) AND
           (NOT "TDS From Orders") AND (("TDS Nature of Deduction" <> '') OR ("Work Tax Nature Of Deduction" <> ''))
        THEN BEGIN
          TDSGroup.FindOnDate("TDS Group","Posting Date");
          TDSGroup.TESTFIELD("TDS Account");
          IF AddCurrencyCode <> '' THEN
            SourceCurrTDSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
          CreateGLEntry(GenJnlLine,
            TDSGroup."TDS Account",TotalITAmountLCY,SourceCurrTDSAmt,TRUE,"System-Created Entry");
        END;
        IF ("Total TDS/TCS Incl. SHE CESS" <> 0) AND ("Amount (LCY)" < 0) AND
           (NOT "TCS From Orders") AND ("TCS Nature of Collection" <> '')
        THEN BEGIN
          TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
          TCSSetup.SETRANGE("Assessee Code","Assessee Code");
          TCSSetup.SETRANGE("Concessional Code","Concessional Code");
          TCSSetup.SETRANGE("Effective Date",0D,"Posting Date");
          TCSSetup.FINDLAST;
          TCSSetup.TESTFIELD("TCS Account No.");
          IF AddCurrencyCode <> '' THEN
            SourceCurrTDSAmt := CalcLCYToAddCurr(-TotalITAmountLCY);
          CreateGLEntry(GenJnlLine,
            TDSGroup."TDS Account",-TotalITAmountLCY,SourceCurrTDSAmt,TRUE,"System-Created Entry");
        END;
        IF ("Balance Work Tax Amount" <> 0) AND ("Amount (LCY)" < 0) AND NOT "TDS From Orders" THEN BEGIN
          IF TDSGroup.FindOnDate("Work Tax Group","Posting Date") THEN BEGIN
            GetGLSetup;
            IF AddCurrencyCode <> '' THEN
              SourceCurrWorkTaxAmt := CalcLCYToAddCurr(WorkTaxAmountLCY);
            TDSGroup.TESTFIELD("TDS Account");
            CreateGLEntry(GenJnlLine,
              TDSGroup."TDS Account",WorkTaxAmountLCY,SourceCurrWorkTaxAmt,TRUE,"System-Created Entry");
          END;
        END;
        DeferralPosting("Deferral Code","Source Code",PayablesAccount,GenJnlLine,Balancing);
        OnMoveGenJournalLine(VendLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostBankAcc@14(GenJnlLine@1005 : Record 81;Balancing@1006 : Boolean);
    VAR
      BankAcc@1000 : Record 270;
      BankAccLedgEntry@1004 : Record 271;
      CheckLedgEntry@1003 : Record 272;
      CheckLedgEntry2@1002 : Record 272;
      BankAccPostingGr@1001 : Record 277;
      OriginalGenJnlLine@1500002 : Record 81;
      SourceCurrTDSAmt@1500000 : Decimal;
      SourceCurrTCSAmt@1500001 : Decimal;
      SignOfBankAccLedgAmount@1500213 : Integer;
      ServiceTaxPoTAmount@1500005 : Decimal;
    BEGIN
      WITH GenJnlLine DO BEGIN
        BankChargeAmount := 0;
        InitPostedJnlBankCharge(GenJnlLine,0);
        BankAccLedgEntry.LOCKTABLE;
        BankAcc.GET("Account No.");
        BankAcc.TESTFIELD(Blocked,FALSE);
        IF "Currency Code" = '' THEN
          BankAcc.TESTFIELD("Currency Code",'')
        ELSE
          IF BankAcc."Currency Code" <> '' THEN
            TESTFIELD("Currency Code",BankAcc."Currency Code");

        BankAcc.TESTFIELD("Bank Acc. Posting Group");
        BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");

        IF (IsServiceTaxExist(GenJnlLine)) AND ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund])
           AND (NOT "Serv. Tax on Advance Payment")
        THEN
          IF "Service Tax Entry" THEN BEGIN
            ServiceTaxPoTAmount := PostServiceTax(GenJnlLine,'','');
            IF "System-Created Entry" THEN
              EXIT;
            OriginalGenJnlLine := GenJnlLine;
            AddServiceTaxToJnlLineAmount(GenJnlLine,ServiceTaxPoTAmount);
          END;

        BankAccLedgEntry.LOCKTABLE;

        InitBankAccLedgEntry(GenJnlLine,BankAccLedgEntry);

        BankAccLedgEntry."Bank Acc. Posting Group" := BankAcc."Bank Acc. Posting Group";
        BankAccLedgEntry."Currency Code" := BankAcc."Currency Code";
        BankAccLedgEntry."Location Code" := "Location Code";
        IF GLSetup."Activate Cheque No." THEN BEGIN
          BankAccLedgEntry."Cheque No." := "Cheque No.";
          BankAccLedgEntry."Cheque Date" := "Cheque Date";
        END;
        IF (NOT GLSetup."Activate Cheque No.") AND ("Bank Payment Type" IN ["Bank Payment Type"::"Manual Check",
                                                                            "Bank Payment Type"::" ",
                                                                            "Bank Payment Type"::"Computer Check"])
        THEN BEGIN
          BankAccLedgEntry."Cheque No." := "Document No.";
          BankAccLedgEntry."Cheque Date" := "Posting Date";
        END;
        IF BankAcc."Currency Code" <> '' THEN BEGIN
          TDSAmountFCY := CurrExchRate.ExchangeAmtFCYToLCY(
              "Posting Date","Currency Code",TDSAmount,
              CurrExchRate.ExchangeRate("Posting Date","Currency Code"));
          BankAccLedgEntry.Amount := Amount + TDSAmountFCY;
          TDSAmountFCY := 0;
        END ELSE
          BankAccLedgEntry.Amount := "Amount (LCY)" + TDSAmount;
        BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)" + TDSAmount;

        IF (("Amount (LCY)" < 0) AND (NOT "TDS From Orders") AND
            (("TDS Nature of Deduction" <> '') OR ("Work Tax Nature Of Deduction" <> '')) AND
            (("Balance Work Tax Amount" <> 0) OR ("Bal. TDS/TCS Including SHECESS" <> 0)))
        THEN BEGIN
          BankAccLedgEntry.Amount := Amount + "Total TDS/TCS Incl. SHE CESS" + "Balance Work Tax Amount";
          BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)" + TotalITAmountLCY + WorkTaxAmountLCY;
        END;

        IF ((NOT "TCS From Orders") AND (("TCS Nature of Collection" <> '') OR
                                         ("Work Tax Nature Of Deduction" <> '')) AND
            (("Balance Work Tax Amount" <> 0) OR ("Bal. TDS/TCS Including SHECESS" <> 0)))
        THEN
          IF ("Amount (LCY)" > 0) AND ("Document Type" = "Document Type"::Payment) THEN BEGIN
            BankAccLedgEntry.Amount := Amount - "Total TDS/TCS Incl. SHE CESS" - "Balance Work Tax Amount";
            BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)" - TotalITAmountLCY - WorkTaxAmountLCY;
          END ELSE BEGIN
            BankAccLedgEntry.Amount := Amount + "Total TDS/TCS Incl. SHE CESS" + "Balance Work Tax Amount";
            BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)" + TotalITAmountLCY + WorkTaxAmountLCY;
          END;
        IF BankAcc."Currency Code" <> '' THEN
          BankAccLedgEntry.Amount := BankAccLedgEntry.Amount
        ELSE
          BankAccLedgEntry.Amount := BankAccLedgEntry."Amount (LCY)";
        BankAccLedgEntry."User ID" := USERID;
        IF BankChargeAmount <> 0 THEN BEGIN
          SignOfBankAccLedgAmount := ABS(BankAccLedgEntry.Amount) / BankAccLedgEntry.Amount;
          BankAccLedgEntry.Amount += (SignOfBankAccLedgAmount * BankChargeAmount);
          BankAccLedgEntry."Amount (LCY)" += (SignOfBankAccLedgAmount * BankChargeAmount);
          BankChargeAmount := (SignOfBankAccLedgAmount * BankChargeAmount);
        END;
        IF BankAccLedgEntry.Amount <> 0 THEN BEGIN
          BankAccLedgEntry.Open := TRUE;
          BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
        END;
        BankAccLedgEntry."Stale Cheque" := "Stale Cheque";
        IF BankAccLedgEntry."Stale Cheque" = TRUE THEN
          BankAccLedgEntry."Cheque Stale Date" := WORKDATE;
        IF BankAccLedgEntry."Cheque Date" <> 0D THEN
          BankAccLedgEntry."Stale Cheque Expiry Date" :=
            CALCDATE(BankAcc."Stale Cheque Stipulated Period",BankAccLedgEntry."Cheque Date");
        BankAccLedgEntry."Bal. Account Type" := "Bal. Account Type";
        BankAccLedgEntry."Bal. Account No." := "Bal. Account No.";
        IF (Amount > 0) AND (NOT Correction) OR
           ("Amount (LCY)" > 0) AND (NOT Correction) OR
           (Amount < 0) AND Correction OR
           ("Amount (LCY)" < 0) AND Correction
        THEN BEGIN
          BankAccLedgEntry."Debit Amount" := BankAccLedgEntry.Amount;
          BankAccLedgEntry."Credit Amount" := 0;
          BankAccLedgEntry."Debit Amount (LCY)" := BankAccLedgEntry."Amount (LCY)";
          BankAccLedgEntry."Credit Amount (LCY)" := 0;
        END ELSE BEGIN
          BankAccLedgEntry."Debit Amount" := 0;
          BankAccLedgEntry."Credit Amount" := -BankAccLedgEntry.Amount;
          BankAccLedgEntry."Debit Amount (LCY)" := 0;
          BankAccLedgEntry."Credit Amount (LCY)" := -BankAccLedgEntry."Amount (LCY)";
        END;
        BankAccLedgEntry.Positive := BankAccLedgEntry.Amount > 0;
        BankAccLedgEntry.INSERT(TRUE);

        IF ((Amount <= 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") AND "Check Printed") OR
           ((Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check"))
        THEN BEGIN
          IF BankAcc."Currency Code" <> "Currency Code" THEN
            ERROR(BankPaymentTypeMustNotBeFilledErr);
          CASE "Bank Payment Type" OF
            "Bank Payment Type"::"Computer Check":
              BEGIN
                TESTFIELD("Check Printed",TRUE);
                CheckLedgEntry.LOCKTABLE;
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETRANGE("Entry Status",CheckLedgEntry."Entry Status"::Printed);
                IF NOT GLSetup."Activate Cheque No." THEN
                  CheckLedgEntry.SETRANGE("Check No.","Document No.")
                ELSE
                  CheckLedgEntry.SETRANGE("Check No.","Cheque No.");
                IF CheckLedgEntry.FINDSET THEN
                  REPEAT
                    CheckLedgEntry2 := CheckLedgEntry;
                    CheckLedgEntry2."Entry Status" := CheckLedgEntry2."Entry Status"::Posted;
                    CheckLedgEntry2."Bank Account Ledger Entry No." := BankAccLedgEntry."Entry No.";
                    IF GLSetup."Activate Cheque No." THEN
                      CheckLedgEntry2."Document No." := BankAccLedgEntry."Document No.";
                    CheckLedgEntry2.MODIFY;
                  UNTIL CheckLedgEntry.NEXT = 0;
                IF GLSetup."Activate Cheque No." THEN BEGIN
                  CheckLedgEntry.LOCKTABLE;
                  CheckLedgEntry.RESET;
                  CheckLedgEntry.SETCURRENTKEY("Bank Account No.","Entry Status","Check No.");
                  CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                  CheckLedgEntry.SETFILTER("Entry Status",'%1|%2|%3',CheckLedgEntry."Entry Status"::Voided,
                    CheckLedgEntry."Entry Status"::"Financially Voided",CheckLedgEntry."Entry Status"::"Test Print");
                  CheckLedgEntry.SETRANGE("Document No.",DocumentNo);
                  IF CheckLedgEntry.FIND('-') THEN
                    REPEAT
                      CheckLedgEntry2 := CheckLedgEntry;
                      CheckLedgEntry2."Document No." := BankAccLedgEntry."Document No.";
                    CheckLedgEntry2.MODIFY;
                  UNTIL CheckLedgEntry.NEXT = 0;
                END;
              END;
            "Bank Payment Type"::"Manual Check":
              BEGIN
                IF "Document No." = '' THEN
                  ERROR(DocNoMustBeEnteredErr,"Bank Payment Type");
                CheckLedgEntry.RESET;
                IF NextCheckEntryNo = 0 THEN BEGIN
                  CheckLedgEntry.LOCKTABLE;
                  IF CheckLedgEntry.FINDLAST THEN
                    NextCheckEntryNo := CheckLedgEntry."Entry No." + 1
                  ELSE
                    NextCheckEntryNo := 1;
                END;

                CheckLedgEntry.SETRANGE("Bank Account No.","Account No.");
                CheckLedgEntry.SETFILTER(
                  "Entry Status",'%1|%2|%3',
                  CheckLedgEntry."Entry Status"::Printed,
                  CheckLedgEntry."Entry Status"::Posted,
                  CheckLedgEntry."Entry Status"::"Financially Voided");
                IF NOT GLSetup."Activate Cheque No." THEN BEGIN
                  CheckLedgEntry.SETRANGE("Check No.","Document No.");
                  IF CheckLedgEntry.FINDFIRST THEN
                    ERROR(CheckAlreadyExistsErr,"Document No.");
                END ELSE BEGIN
                  CheckLedgEntry.SETRANGE("Check No.","Cheque No.");
                  IF CheckLedgEntry.FIND('-') THEN
                    ERROR(CheckAlreadyExistsErr,"Cheque No.");
                END;

                InitCheckLedgEntry(BankAccLedgEntry,CheckLedgEntry);
                CheckLedgEntry."Bank Payment Type" := CheckLedgEntry."Bank Payment Type"::"Manual Check";
                CheckLedgEntry."Check Date" := BankAccLedgEntry."Posting Date";
                IF NOT GLSetup."Activate Cheque No." THEN
                  CheckLedgEntry."Check No." := BankAccLedgEntry."Document No."
                ELSE BEGIN
                  CheckLedgEntry."Check No." := BankAccLedgEntry."Cheque No.";
                  CheckLedgEntry."Check Date" := BankAccLedgEntry."Cheque Date";
                END;
                IF CheckLedgEntry."Check Date" <> 0D THEN
                  CheckLedgEntry."Stale Cheque Expiry Date" :=
                    CALCDATE(BankAcc."Stale Cheque Stipulated Period",CheckLedgEntry."Check Date");
                IF BankAcc."Currency Code" <> '' THEN
                  CheckLedgEntry.Amount := -BankAccLedgEntry.Amount
                ELSE
                  CheckLedgEntry.Amount := -BankAccLedgEntry."Amount (LCY)";
                CheckLedgEntry.INSERT(TRUE);
                NextCheckEntryNo := NextCheckEntryNo + 1;
              END;
          END;
        END;

        BankAccPostingGr.TESTFIELD("G/L Bank Account No.");
        IF (("Amount (LCY)" < 0) AND (NOT "TDS From Orders") AND (("TDS Nature of Deduction" <> '')
                                                                  OR ("Work Tax Nature Of Deduction" <> '')) AND
            (("Balance Work Tax Amount" <> 0) OR ("Bal. TDS/TCS Including SHECESS" <> 0)))
        THEN BEGIN
          IF TotalITAmountLCY < 0 THEN
            CreateGLEntryBalAcc(GenJnlLine,
              BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" - TotalITAmountLCY - WorkTaxAmountLCY - BankChargeAmount,
              "Source Currency Amount" - "Total TDS/TCS Incl. SHE CESS" - "Balance Work Tax Amount" - BankChargeAmount,
              TRUE,"System-Created Entry","Bal. Account Type","Bal. Account No.")
          ELSE
            CreateGLEntryBalAcc(GenJnlLine,
              BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" + TotalITAmountLCY + WorkTaxAmountLCY + BankChargeAmount,
              "Source Currency Amount" + "Total TDS/TCS Incl. SHE CESS" + "Balance Work Tax Amount" + BankChargeAmount,
              TRUE,"System-Created Entry","Bal. Account Type","Bal. Account No.")
        END ELSE
          IF (("Amount (LCY)" > 0) AND (NOT "TCS From Orders") AND (("TCS Nature of Collection" <> '') OR
                                                                    ("Work Tax Nature Of Deduction" <> '')) AND
              (("Balance Work Tax Amount" <> 0) OR ("Total TDS/TCS Incl. SHE CESS" <> 0)))
          THEN BEGIN
            IF "Document Type" = "Document Type"::Payment THEN BEGIN
              IF TotalITAmountLCY < 0 THEN
                CreateGLEntryBalAcc(GenJnlLine,
                  BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" - TotalITAmountLCY - BankChargeAmount,
                  "Source Currency Amount" - "Total TDS/TCS Incl. SHE CESS" - BankChargeAmount,
                  TRUE,"System-Created Entry","Bal. Account Type","Bal. Account No.")
              ELSE
                CreateGLEntryBalAcc(GenJnlLine,
                  BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" + TotalITAmountLCY + BankChargeAmount,
                  "Source Currency Amount" + "Total TDS/TCS Incl. SHE CESS" + BankChargeAmount,
                  TRUE,"System-Created Entry","Bal. Account Type","Bal. Account No.");
            END ELSE
              CreateGLEntryBalAcc(GenJnlLine,
                BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" + TotalITAmountLCY + BankChargeAmount,
                "Source Currency Amount" + "Total TDS/TCS Incl. SHE CESS" + BankChargeAmount,
                TRUE,"System-Created Entry","Bal. Account Type","Bal. Account No.")
          END ELSE
            IF (TDSAmount <> 0) AND ("Bal. TDS/TCS Including SHECESS" = 0) AND (Amount < 0) THEN BEGIN
              CreateGLEntryBalAcc(GenJnlLine,
                BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" + TDSAmount + BankChargeAmount,
                "Source Currency Amount" + TDSAmount + BankChargeAmount,
                TRUE,TRUE,"Bal. Account Type","Bal. Account No.");
              TDSAmount := 0;
            END ELSE
              CreateGLEntryBalAcc(GenJnlLine,
                BankAccPostingGr."G/L Bank Account No.","Amount (LCY)" + BankChargeAmount,
                "Source Currency Amount" + BankChargeAmount,
                TRUE,TRUE,"Bal. Account Type","Bal. Account No.");

        InitPostedJnlBankCharge(GenJnlLine,1);

        IF ("Bal. TDS/TCS Including SHECESS" <> 0) AND ("Amount (LCY)" < 0) AND
           (NOT "TDS From Orders") AND (("TDS Nature of Deduction" <> '') OR ("Work Tax Nature Of Deduction" <> ''))
        THEN BEGIN
          TDSGroup.FindOnDate("TDS Group","Posting Date");
          TDSGroup.TESTFIELD("TDS Account");
          IF AddCurrencyCode <> '' THEN
            SourceCurrTDSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
          CreateGLEntry(GenJnlLine,
            TDSGroup."TDS Account",-ABS(TotalITAmountLCY),-ABS(SourceCurrTDSAmt),TRUE,"System-Created Entry");
        END;

        IF ("Total TDS/TCS Incl. SHE CESS" <> 0) AND ("Amount (LCY)" < 0) AND
           (NOT "TCS From Orders") AND ("TCS Nature of Collection" <> '')
        THEN BEGIN
          TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
          TCSSetup.SETRANGE("Assessee Code","Assessee Code");
          TCSSetup.SETRANGE("Concessional Code","Concessional Code");
          TCSSetup.SETRANGE("Effective Date",0D,"Posting Date");
          TCSSetup.FINDLAST;

          TCSSetup.TESTFIELD("TCS Account No.");
          IF AddCurrencyCode <> '' THEN
            SourceCurrTCSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
          IF "Document Type" = "Document Type"::Payment THEN
            CreateGLEntry(GenJnlLine,
              TCSSetup."TCS Account No.",-ABS(TotalITAmountLCY),-ABS(SourceCurrTCSAmt),TRUE,"System-Created Entry")
          ELSE
            CreateGLEntry(GenJnlLine,
              TCSSetup."TCS Account No.",-TotalITAmountLCY,-SourceCurrTCSAmt,TRUE,"System-Created Entry");
        END;

        IF ("Balance Work Tax Amount" > 0) AND (NOT "TDS From Orders") THEN
          PostWorkTax(GenJnlLine);

        IF IsServiceTaxExist(GenJnlLine) AND NOT "Serv. Tax on Advance Payment" AND
           ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund])
        THEN
          IF "Service Tax Entry" THEN BEGIN
            IF "System-Created Entry" THEN
              EXIT;
            RestoreJnlLineAmounts(GenJnlLine,OriginalGenJnlLine);
          END;

        IF (Amount < 0) AND ("Bal. TDS/TCS Including SHECESS" = 0) THEN
          IF TDSInvBufJnl[1].FINDSET THEN BEGIN
            REPEAT
              CreateGLEntry(GenJnlLine,
                TDSInvBufJnl[1]."TDS Account No.",
                -(TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)" + TDSInvBufJnl[1]."Work Tax Amount"),
                -(TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)" + TDSInvBufJnl[1]."Work Tax Amount"),TRUE,TRUE);
            UNTIL TDSInvBufJnl[1].NEXT = 0;
            TDSInvBufJnl[1].DELETEALL;
          END;
        DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
        OnMoveGenJournalLine(BankAccLedgEntry.RECORDID);
      END;
    END;

    LOCAL PROCEDURE PostFixedAsset@29(GenJnlLine@1009 : Record 81);
    VAR
      GLEntry@1010 : Record 17;
      GLEntry2@1000 : Record 17;
      TempFAGLPostBuf@1001 : TEMPORARY Record 5637;
      FAGLPostBuf@1011 : Record 5637;
      VATPostingSetup@1012 : Record 325;
      FAJnlPostLine@1013 : Codeunit 5632;
      FAAutomaticEntry@1003 : Codeunit 5607;
      ShortcutDim1Code@1004 : Code[20];
      ShortcutDim2Code@1005 : Code[20];
      Correction2@1006 : Boolean;
      NetDisposalNo@1007 : Integer;
      DimensionSetID@1008 : Integer;
      VATEntryGLEntryNo@1002 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Excise Posting" THEN BEGIN
          PostExcise(GenJnlLine);
          EXIT;
        END;
        IF "Deferred Claim FA Excise" THEN
          ReverseDeferredExciseCapItems(GenJnlLine);

        InitGLEntry(GenJnlLine,GLEntry,'',"Amount (LCY)","Source Currency Amount",TRUE,"System-Created Entry");
        GLEntry."Gen. Posting Type" := "Gen. Posting Type";
        GLEntry."Bal. Account Type" := "Bal. Account Type";
        GLEntry."Bal. Account No." := "Bal. Account No.";
        InitTax(GenJnlLine,GLEntry);
        GLEntry2 := GLEntry;
        FAJnlPostLine.GenJnlPostLine(
          GenJnlLine,GLEntry2.Amount,GLEntry2."VAT Amount",NextTransactionNo,NextEntryNo,GLReg."No.");
        ShortcutDim1Code := "Shortcut Dimension 1 Code";
        ShortcutDim2Code := "Shortcut Dimension 2 Code";
        DimensionSetID := "Dimension Set ID";
        Correction2 := Correction;
      END;
      WITH TempFAGLPostBuf DO
        IF FAJnlPostLine.FindFirstGLAcc(TempFAGLPostBuf) THEN
          REPEAT
            GenJnlLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            GenJnlLine.Correction := Correction;
            FADimAlreadyChecked := "FA Posting Group" <> '';
            CheckDimValueForDisposal(GenJnlLine,"Account No.");
            IF "Original General Journal Line" THEN
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,GLEntry2."Additional-Currency Amount",TRUE,TRUE)
            ELSE BEGIN
              CheckNonAddCurrCodeOccurred('');
              InitGLEntry(GenJnlLine,GLEntry,"Account No.",Amount,0,FALSE,TRUE);
            END;
            FADimAlreadyChecked := FALSE;
            GLEntry.CopyPostingGroupsFromGLEntry(GLEntry2);
            GLEntry."VAT Amount" := GLEntry2."VAT Amount";
            GLEntry."Bal. Account Type" := GLEntry2."Bal. Account Type";
            GLEntry."Bal. Account No." := GLEntry2."Bal. Account No.";
            GLEntry."FA Entry Type" := "FA Entry Type";
            GLEntry."FA Entry No." := "FA Entry No.";
            IF "Net Disposal" THEN
              NetDisposalNo := NetDisposalNo + 1
            ELSE
              NetDisposalNo := 0;
            IF "Automatic Entry" AND NOT "Net Disposal" THEN
              FAAutomaticEntry.AdjustGLEntry(GLEntry);
            IF NetDisposalNo > 1 THEN
              GLEntry."VAT Amount" := 0;
            IF "FA Posting Group" <> '' THEN BEGIN
              FAGLPostBuf := TempFAGLPostBuf;
              FAGLPostBuf."Entry No." := NextEntryNo;
              FAGLPostBuf.INSERT;
            END;
            InsertGLEntry(GenJnlLine,GLEntry,TRUE);
            IF (VATEntryGLEntryNo = 0) AND (GLEntry."Gen. Posting Type" <> GLEntry."Gen. Posting Type"::" ") THEN
              VATEntryGLEntryNo := GLEntry."Entry No.";
          UNTIL FAJnlPostLine.GetNextGLAcc(TempFAGLPostBuf) = 0;
      GenJnlLine."Shortcut Dimension 1 Code" := ShortcutDim1Code;
      GenJnlLine."Shortcut Dimension 2 Code" := ShortcutDim2Code;
      GenJnlLine."Dimension Set ID" := DimensionSetID;
      GenJnlLine.Correction := Correction2;
      GLEntry := GLEntry2;
      IF VATEntryGLEntryNo = 0 THEN
        VATEntryGLEntryNo := GLEntry."Entry No.";
      TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
      PostTax(GenJnlLine,GLEntry);
      PostVATTablePurchaseTax(GenJnlLine);

      FAJnlPostLine.UpdateRegNo(GLReg."No.");
      GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE PostICPartner@63(GenJnlLine@1002 : Record 81);
    VAR
      ICPartner@1001 : Record 413;
      AccountNo@1000 : Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Account No." <> ICPartner.Code THEN
          ICPartner.GET("Account No.");
        IF ("Document Type" = "Document Type"::"Credit Memo") XOR (Amount > 0) THEN BEGIN
          ICPartner.TESTFIELD("Receivables Account");
          AccountNo := ICPartner."Receivables Account";
        END ELSE BEGIN
          ICPartner.TESTFIELD("Payables Account");
          AccountNo := ICPartner."Payables Account";
        END;

        CreateGLEntryBalAcc(
          GenJnlLine,AccountNo,"Amount (LCY)","Source Currency Amount",
          TRUE,TRUE,"Bal. Account Type","Bal. Account No.");
      END;
    END;

    LOCAL PROCEDURE PostJob@78(GenJnlLine@1000 : Record 81;GLEntry@1002 : Record 17);
    VAR
      JobPostLine@1001 : Codeunit 1001;
    BEGIN
      IF JobLine THEN BEGIN
        JobLine := FALSE;
        JobPostLine.PostGenJnlLine(GenJnlLine,GLEntry);
      END;
    END;

    PROCEDURE StartPosting@24(GenJnlLine@1001 : Record 81);
    VAR
      GenJnlTemplate@1000 : Record 80;
      AccountingPeriod@1002 : Record 50;
    BEGIN
      OnBeforePostGenJnlLine(GenJnlLine);

      WITH GenJnlLine DO BEGIN
        GlobalGLEntry.LOCKTABLE;
        IF GlobalGLEntry.FINDLAST THEN BEGIN
          NextEntryNo := GlobalGLEntry."Entry No." + 1;
          NextTransactionNo := GlobalGLEntry."Transaction No." + 1;
        END ELSE BEGIN
          NextEntryNo := 1;
          NextTransactionNo := 1;
        END;

        InitLastDocDate(GenJnlLine);
        CurrentBalance := 0;

        AccountingPeriod.RESET;
        AccountingPeriod.SETCURRENTKEY(Closed);
        AccountingPeriod.SETRANGE(Closed,FALSE);
        AccountingPeriod.FINDFIRST;
        FiscalYearStartDate := AccountingPeriod."Starting Date";

        GetGLSetup;

        IF NOT GenJnlTemplate.GET("Journal Template Name") THEN
          GenJnlTemplate.INIT;

        VATEntry.LOCKTABLE;
        IF VATEntry.FINDLAST THEN
          NextVATEntryNo := VATEntry."Entry No." + 1
        ELSE
          NextVATEntryNo := 1;
        NextConnectionNo := 1;
        FirstNewVATEntryNo := NextVATEntryNo;

        TDSEntry.LOCKTABLE;
        IF TDSEntry.FINDLAST THEN
          NextTDSEntryNo := TDSEntry."Entry No." + 1
        ELSE
          NextTDSEntryNo := 1;

        TCSEntry.LOCKTABLE;
        IF TCSEntry.FINDLAST THEN
          NextTCSEntryNo := TCSEntry."Entry No." + 1
        ELSE
          NextTCSEntryNo := 1;

        TaxEntry.LOCKTABLE;
        IF TaxEntry.FINDLAST THEN
          NextTaxEntryNo := TaxEntry."Entry No." + 1
        ELSE
          NextTaxEntryNo := 1;

        ExciseEntry.LOCKTABLE;
        IF ExciseEntry.FINDLAST THEN
          NextExciseEntryNo := ExciseEntry."Entry No." + 1
        ELSE
          NextExciseEntryNo := 1;

        FBTEntry.LOCKTABLE;
        IF FBTEntry.FINDLAST THEN
          NextFBTEntryNo := FBTEntry."Entry No." + 1
        ELSE
          NextFBTEntryNo := 1;
        PLAEntry.LOCKTABLE;
        IF PLAEntry.FINDLAST THEN
          PLAStartingNo := PLAEntry."Entry No." + 1
        ELSE
          PLAStartingNo := 1;

        DetailedGSTLedgerEntry.LOCKTABLE;
        IF DetailedGSTLedgerEntry.FINDLAST THEN
          GSTStartingNo := DetailedGSTLedgerEntry."Entry No." + 1
        ELSE
          GSTStartingNo := 1;

        GLReg.LOCKTABLE;
        IF GLReg.FINDLAST THEN
          GLReg."No." := GLReg."No." + 1
        ELSE
          GLReg."No." := 1;
        GLReg.INIT;
        GLReg."From Entry No." := NextEntryNo;
        GLReg."From VAT Entry No." := NextVATEntryNo;
        GLReg."From ST Entry No." := GetLastServTaxEntryNo + 1;
        GLReg."From Excise Entry No." := NextExciseEntryNo;
        GLReg."From Tax Entry No." := NextTaxEntryNo;
        GLReg."From TDS Entry No." := NextTDSEntryNo;
        GLReg."From PLA Entry No." := PLAStartingNo;
        GLReg."From TCS Entry No." := NextTCSEntryNo;
        GLReg."From FBT Entry No." := NextFBTEntryNo;
        GLReg."From GST Entry No." := GetLastGSTENtryNo + 1;
        GLReg."From GST Detailed Entry No." := GetLastDetailedGSTENtryNo + 1;
        GLReg."Creation Date" := TODAY;
        GLReg."Source Code" := "Source Code";
        GLReg."Journal Batch Name" := "Journal Batch Name";
        IF "Pay TDS" OR "Pay TCS" OR "Pay Sales Tax" OR "Pay Excise" OR "Pay VAT" OR "Pay Work Tax" THEN
          GLReg."Payment to Authorities" := TRUE;
        GLReg."User ID" := USERID;

        OnAfterInitGLRegister(GLReg,GenJnlLine);

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");
      END;
    END;

    PROCEDURE ContinuePosting@155(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF (LastDocType <> "Document Type") OR (LastDocNo <> "Document No.") OR
           (LastDate <> "Posting Date") OR ((CurrentBalance = 0) AND (TotalAddCurrAmount = 0)) AND NOT "System-Created Entry"
        THEN BEGIN
          CheckPostUnrealizedVAT(GenJnlLine,FALSE);
          NextTransactionNo := NextTransactionNo + 1;
          InitLastDocDate(GenJnlLine);
          FirstNewVATEntryNo := NextVATEntryNo;
        END;

        GetCurrencyExchRate(GenJnlLine);
        TempGLEntryBuf.DELETEALL;
        CalculateCurrentBalance(
          "Account No.","Bal. Account No.",IncludeVATAmount,"Amount (LCY)","VAT Amount");
      END;
    END;

    PROCEDURE FinishPosting@25();
    VAR
      CostAccSetup@1003 : Record 1108;
      TransferGlEntriesToCA@1004 : Codeunit 1105;
    BEGIN
      IF TempGLEntryBuf.FINDSET THEN BEGIN
        REPEAT
          GlobalGLEntry := TempGLEntryBuf;
          IF AddCurrencyCode = '' THEN BEGIN
            GlobalGLEntry."Additional-Currency Amount" := 0;
            GlobalGLEntry."Add.-Currency Debit Amount" := 0;
            GlobalGLEntry."Add.-Currency Credit Amount" := 0;
          END;
          GlobalGLEntry."Prior-Year Entry" := GlobalGLEntry."Posting Date" < FiscalYearStartDate;
          GlobalGLEntry.INSERT(TRUE);
          OnAfterInsertGlobalGLEntry(GlobalGLEntry);
        UNTIL TempGLEntryBuf.NEXT = 0;

        GLReg."To VAT Entry No." := NextVATEntryNo - 1;
        GLReg."To Excise Entry No." := NextExciseEntryNo - 1;
        GLReg."To Tax Entry No." := NextTaxEntryNo - 1;
        GLReg."To ST Entry No." := GetLastServTaxEntryNo;
        GLReg."To TDS Entry No." := NextTDSEntryNo - 1;
        GLReg."To PLA Entry No." := PLAStartingNo;
        GLReg."To TCS Entry No." := NextTCSEntryNo - 1;
        GLReg."To FBT Entry No." := NextFBTEntryNo - 1;
        GLReg."To GST Entry No." := GetLastGSTENtryNo;
        GLReg."To GST Detailed Entry No." :=  GetLastDetailedGSTENtryNo;
        IF GLReg."To Entry No." = 0 THEN BEGIN
          GLReg."To Entry No." := GlobalGLEntry."Entry No.";
          GLReg.INSERT;
        END ELSE BEGIN
          GLReg."To Entry No." := GlobalGLEntry."Entry No.";
          GLReg.MODIFY;
        END;
      END;
      GlobalGLEntry.CONSISTENT(
        (BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
        (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0));

      IF CostAccSetup.GET THEN
        IF CostAccSetup."Auto Transfer from G/L" THEN
          TransferGlEntriesToCA.GetGLEntries;

      FirstEntryNo := 0;
    END;

    LOCAL PROCEDURE PostUnrealizedVAT@64(GenJnlLine@1000 : Record 81);
    BEGIN
      IF CheckUnrealizedCust THEN BEGIN
        CustUnrealizedVAT(GenJnlLine,UnrealizedCustLedgEntry,UnrealizedRemainingAmountCust);
        CheckUnrealizedCust := FALSE;
      END;
      IF CheckUnrealizedVend THEN BEGIN
        VendUnrealizedVAT(GenJnlLine,UnrealizedVendLedgEntry,UnrealizedRemainingAmountVend);
        CheckUnrealizedVend := FALSE;
      END;
    END;

    LOCAL PROCEDURE CheckPostUnrealizedVAT@41(GenJnlLine@1000 : Record 81;CheckCurrentBalance@1001 : Boolean);
    BEGIN
      IF CheckCurrentBalance AND (CurrentBalance = 0) OR NOT CheckCurrentBalance THEN
        PostUnrealizedVAT(GenJnlLine)
    END;

    LOCAL PROCEDURE ExchangeAccounts@86(VAR GenJnlLine@1000 : Record 81);
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      GenJnlLine2 := GenJnlLine;
      WITH GenJnlLine DO BEGIN
        "Account Type" := GenJnlLine2."Bal. Account Type";
        "Account No." := GenJnlLine2."Bal. Account No.";
        "VAT %" := GenJnlLine2."Bal. VAT %";
        "VAT Amount" := GenJnlLine2."Bal. VAT Amount";
        "VAT Amount (LCY)" := GenJnlLine2."Bal. VAT Amount (LCY)";
        "VAT Difference" := GenJnlLine2."Bal. VAT Difference";
        "Gen. Posting Type" := GenJnlLine2."Bal. Gen. Posting Type";
        "Gen. Bus. Posting Group" := GenJnlLine2."Bal. Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GenJnlLine2."Bal. Gen. Prod. Posting Group";
        "VAT Bus. Posting Group" := GenJnlLine2."Bal. VAT Bus. Posting Group";
        "VAT Prod. Posting Group" := GenJnlLine2."Bal. VAT Prod. Posting Group";
        "VAT Calculation Type" := GenJnlLine2."Bal. VAT Calculation Type";
        "VAT Base Amount" := GenJnlLine2."Bal. VAT Base Amount";
        "VAT Base Amount (LCY)" := GenJnlLine2."Bal. VAT Base Amount (LCY)";
        "Tax Area Code" := GenJnlLine2."Bal. Tax Area Code";
        "Tax Liable" := GenJnlLine2."Bal. Tax Liable";
        "Tax Group Code" := GenJnlLine2."Bal. Tax Group Code";
        "Use Tax" := GenJnlLine2."Bal. Use Tax";

        "Bal. Account Type" := GenJnlLine2."Account Type";
        "Bal. Account No." := GenJnlLine2."Account No.";
        "Bal. VAT %" := GenJnlLine2."VAT %";
        "Bal. VAT Amount" := GenJnlLine2."VAT Amount";
        "Bal. VAT Amount (LCY)" := GenJnlLine2."VAT Amount (LCY)";
        "Bal. VAT Difference" := GenJnlLine2."VAT Difference";
        "Bal. Gen. Posting Type" := GenJnlLine2."Gen. Posting Type";
        "Bal. Gen. Bus. Posting Group" := GenJnlLine2."Gen. Bus. Posting Group";
        "Bal. Gen. Prod. Posting Group" := GenJnlLine2."Gen. Prod. Posting Group";
        "Bal. VAT Bus. Posting Group" := GenJnlLine2."VAT Bus. Posting Group";
        "Bal. VAT Prod. Posting Group" := GenJnlLine2."VAT Prod. Posting Group";
        "Bal. VAT Calculation Type" := GenJnlLine2."VAT Calculation Type";
        "Bal. VAT Base Amount" := GenJnlLine2."VAT Base Amount";
        "Bal. VAT Base Amount (LCY)" := GenJnlLine2."VAT Base Amount (LCY)";
        "Bal. Tax Area Code" := GenJnlLine2."Tax Area Code";
        "Bal. Tax Liable" := GenJnlLine2."Tax Liable";
        "Bal. Tax Group Code" := GenJnlLine2."Tax Group Code";
        "Bal. Use Tax" := GenJnlLine2."Use Tax";

        Amount := -GenJnlLine2.Amount;
        "Debit Amount" := GenJnlLine2."Credit Amount";
        "Credit Amount" := GenJnlLine2."Debit Amount";
        "Amount (LCY)" := -GenJnlLine2."Amount (LCY)";
        "Balance (LCY)" := -GenJnlLine2."Balance (LCY)";
        "Source Currency Amount" := -GenJnlLine2."Source Currency Amount";
        IF ("Currency Code" <> '') AND NOT "System-Created Entry" THEN BEGIN
          "Source Currency Amount" := Amount;
          "Source Curr. VAT Base Amount" := "VAT Base Amount";
          "Source Curr. VAT Amount" := "VAT Amount";
        END;
      END;
    END;

    LOCAL PROCEDURE InitGLEntry@3(GenJnlLine@1008 : Record 81;VAR GLEntry@1009 : Record 17;GLAccNo@1000 : Code[20];Amount@1001 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1003 : Boolean;SystemCreatedEntry@1004 : Boolean);
    VAR
      GLAcc@1007 : Record 15;
    BEGIN
      IF GLAccNo <> '' THEN BEGIN
        GLAcc.GET(GLAccNo);
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);

        // Check the Value Posting field on the G/L Account if it is not checked already in Codeunit 11
        IF (NOT
            ((GLAccNo = GenJnlLine."Account No.") AND
             (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account")) OR
            ((GLAccNo = GenJnlLine."Bal. Account No.") AND
             (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account"))) AND
           NOT FADimAlreadyChecked
        THEN
          CheckGLAccDimError(GenJnlLine,GLAccNo);
      END;

      GLEntry.INIT;
      GLEntry.CopyFromGenJnlLine(GenJnlLine);
      GLEntry."Entry No." := NextEntryNo;
      GLEntry."Transaction No." := NextTransactionNo;
      GLEntry."G/L Account No." := GLAccNo;
      GLEntry."System-Created Entry" := SystemCreatedEntry;
      GLEntry.Amount := Amount;
      GLEntry."Location Code" := GenJnlLine."Location Code";
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine);
    END;

    LOCAL PROCEDURE InitGLEntryVAT@113(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];BalAccNo@1008 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;UseAmtAddCurr@1007 : Boolean);
    VAR
      GLEntry@1005 : Record 17;
    BEGIN
      IF UseAmtAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,TRUE)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
        GLEntry."Bal. Account No." := BalAccNo;
      END;
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);
    END;

    LOCAL PROCEDURE InitGLEntryVATCopy@116(GenJnlLine@1001 : Record 81;AccNo@1003 : Code[20];BalAccNo@1007 : Code[20];Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal;VATEntry@1008 : Record 254) : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."Bal. Account No." := BalAccNo;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      SummarizeVAT(GLSetup."Summarize G/L Entries",GLEntry);

      EXIT(GLEntry."Entry No.");
    END;

    PROCEDURE InsertGLEntry@2(GenJnlLine@1001 : Record 81;GLEntry@1002 : Record 17;CalcAddCurrResiduals@1000 : Boolean);
    BEGIN
      WITH GLEntry DO BEGIN
        TESTFIELD("G/L Account No.");
        IF Amount <> ROUND(Amount) THEN
          FIELDERROR(
            Amount,
            STRSUBSTNO(NeedsRoundingErr,Amount));

        UpdateCheckAmounts(
          "Posting Date",Amount,"Additional-Currency Amount",
          BalanceCheckAmount,BalanceCheckAmount2,BalanceCheckAddCurrAmount,BalanceCheckAddCurrAmount2);

        UpdateDebitCredit(GenJnlLine.Correction);
      END;

      TempGLEntryBuf := GLEntry;

      OnBeforeInsertGLEntryBuffer(TempGLEntryBuf,GenJnlLine);

      TempGLEntryBuf.INSERT;

      IF FirstEntryNo = 0 THEN
        FirstEntryNo := TempGLEntryBuf."Entry No.";
      NextEntryNo := NextEntryNo + 1;
      InitPostedNarration(GenJnlLine,GLEntry);

      IF CalcAddCurrResiduals THEN
        HandleAddCurrResidualGLEntry(GenJnlLine,GLEntry.Amount,GLEntry."Additional-Currency Amount");
    END;

    LOCAL PROCEDURE CreateGLEntry@112(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1006 : Boolean;SystemCreatedEntry@1001 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      IF UseAmountAddCurr THEN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,TRUE,SystemCreatedEntry)
      ELSE BEGIN
        InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
        GLEntry."Additional-Currency Amount" := AmountAddCurr;
      END;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateGLEntryBalAcc@126(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1002 : Decimal;UseAmountAddCurr@1500001 : Boolean;SystemCreatedEntry@1500000 : Boolean;BalAccType@1008 : Option;BalAccNo@1007 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,AmountAddCurr,UseAmountAddCurr,SystemCreatedEntry);
      GLEntry."Bal. Account Type" := BalAccType;
      GLEntry."Bal. Account No." := BalAccNo;
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      GenJnlLine.OnMoveGenJournalLine(GLEntry.RECORDID);
    END;

    LOCAL PROCEDURE CreateGLEntryGainLoss@26(GenJnlLine@1005 : Record 81;AccNo@1004 : Code[20];Amount@1003 : Decimal;UseAmountAddCurr@1006 : Boolean;SystemCreatedEntry@1001 : Boolean);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,UseAmountAddCurr,SystemCreatedEntry);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateGLEntryVAT@117(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryVATCollectAdj@110(GenJnlLine@1004 : Record 81;AccNo@1003 : Code[20];Amount@1002 : Decimal;AmountAddCurr@1001 : Decimal;VATAmount@1005 : Decimal;DtldCVLedgEntryBuf@1006 : Record 383;VAR AdjAmount@1007 : ARRAY [4] OF Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,AccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry."VAT Amount" := VATAmount;
      GLEntry.CopyPostingGroupsFromDtldCVBuf(DtldCVLedgEntryBuf,DtldCVLedgEntryBuf."Gen. Posting Type");
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
      CollectAdjustment(AdjAmount,GLEntry.Amount,GLEntry."Additional-Currency Amount");
      InsertVATEntriesFromTemp(DtldCVLedgEntryBuf,GLEntry);
    END;

    LOCAL PROCEDURE CreateGLEntryFromVATEntry@22(GenJnlLine@1000 : Record 81;VATAccNo@1002 : Code[20];Amount@1003 : Decimal;AmountAddCurr@1004 : Decimal;VATEntry@1005 : Record 254);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      InitGLEntry(GenJnlLine,GLEntry,VATAccNo,Amount,0,FALSE,TRUE);
      GLEntry."Additional-Currency Amount" := AmountAddCurr;
      GLEntry.CopyPostingGroupsFromVATEntry(VATEntry);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE CreateDeferralScheduleFromGL@134(VAR GenJournalLine@1000 : Record 81;IsBalancing@1005 : Boolean);
    BEGIN
      WITH GenJournalLine DO
        IF ("Account No." <> '') AND ("Deferral Code" <> '') THEN
          IF (("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Source Code" = GLSourceCode)) OR
             ("Account Type" IN ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
          THEN BEGIN
            IF NOT IsBalancing THEN
              CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJournalLine);
            DeferralUtilities.CreateScheduleFromGL(GenJournalLine,FirstEntryNo);
          END;
    END;

    LOCAL PROCEDURE UpdateCheckAmounts@98(PostingDate@1000 : Date;Amount@1005 : Decimal;AddCurrAmount@1006 : Decimal;VAR BalanceCheckAmount@1001 : Decimal;VAR BalanceCheckAmount2@1002 : Decimal;VAR BalanceCheckAddCurrAmount@1003 : Decimal;VAR BalanceCheckAddCurrAmount2@1004 : Decimal);
    BEGIN
      IF PostingDate = NORMALDATE(PostingDate) THEN BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((PostingDate - 01010000D) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((PostingDate - 01010000D) MOD 98 + 1);
      END ELSE BEGIN
        BalanceCheckAmount :=
          BalanceCheckAmount + Amount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 99 + 1);
        BalanceCheckAmount2 :=
          BalanceCheckAmount2 + Amount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 98 + 1);
      END;

      IF AddCurrencyCode <> '' THEN
        IF PostingDate = NORMALDATE(PostingDate) THEN BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount + AddCurrAmount * ((PostingDate - 01010000D) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 + AddCurrAmount * ((PostingDate - 01010000D) MOD 98 + 1);
        END ELSE BEGIN
          BalanceCheckAddCurrAmount :=
            BalanceCheckAddCurrAmount +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 99 + 1);
          BalanceCheckAddCurrAmount2 :=
            BalanceCheckAddCurrAmount2 +
            AddCurrAmount * ((NORMALDATE(PostingDate) - 01010000D + 50) MOD 98 + 1);
        END
      ELSE BEGIN
        BalanceCheckAddCurrAmount := 0;
        BalanceCheckAddCurrAmount2 := 0;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscPossible@71(GenJnlLine@1000 : Record 81;VAR CVLedgEntryBuf@1001 : Record 382);
    BEGIN
      WITH GenJnlLine DO
        IF "Amount (LCY)" <> 0 THEN BEGIN
          IF (CVLedgEntryBuf."Pmt. Discount Date" >= CVLedgEntryBuf."Posting Date") OR
             (CVLedgEntryBuf."Pmt. Discount Date" = 0D)
          THEN BEGIN
            IF GLSetup."Pmt. Disc. Excl. VAT" THEN BEGIN
              IF "Sales/Purch. (LCY)" = 0 THEN
                CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
                  ("Amount (LCY)" + TotalVATAmountOnJnlLines(GenJnlLine)) * Amount / "Amount (LCY)"
              ELSE
                CVLedgEntryBuf."Original Pmt. Disc. Possible" := "Sales/Purch. (LCY)" * Amount / "Amount (LCY)"
            END ELSE
              CVLedgEntryBuf."Original Pmt. Disc. Possible" := Amount;
            CVLedgEntryBuf."Original Pmt. Disc. Possible" :=
              ROUND(
                CVLedgEntryBuf."Original Pmt. Disc. Possible" * "Payment Discount %" / 100,AmountRoundingPrecision);
          END;
          CVLedgEntryBuf."Remaining Pmt. Disc. Possible" := CVLedgEntryBuf."Original Pmt. Disc. Possible";
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerancePossible@72(GenJnlLine@1003 : Record 81;PmtDiscountDate@1001 : Date;VAR PmtDiscToleranceDate@1002 : Date;VAR MaxPaymentTolerance@1000 : Decimal);
    BEGIN
      WITH GenJnlLine DO
        IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
          IF PmtDiscountDate <> 0D THEN
            PmtDiscToleranceDate :=
              CALCDATE(GLSetup."Payment Discount Grace Period",PmtDiscountDate)
          ELSE
            PmtDiscToleranceDate := PmtDiscountDate;

          CASE "Account Type" OF
            "Account Type"::Customer:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",1,MaxPaymentTolerance);
            "Account Type"::Vendor:
              PaymentToleranceMgt.CalcMaxPmtTolerance(
                "Document Type","Currency Code",Amount,"Amount (LCY)",-1,MaxPaymentTolerance);
          END;
        END;
    END;

    LOCAL PROCEDURE CalcPmtTolerance@61(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;VAR PmtTolAmtToBeApplied@1012 : Decimal;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtTol@1011 : Decimal;
      PmtTolLCY@1010 : Decimal;
      PmtTolAddCurr@1009 : Decimal;
    BEGIN
      IF OldCVLedgEntryBuf2."Accepted Payment Tolerance" = 0 THEN
        EXIT;

      PmtTol := -OldCVLedgEntryBuf2."Accepted Payment Tolerance";
      PmtTolAmtToBeApplied := PmtTolAmtToBeApplied + PmtTol;
      PmtTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OldCVLedgEntryBuf."Accepted Payment Tolerance" := 0;
      OldCVLedgEntryBuf."Pmt. Tolerance (LCY)" := -PmtTolLCY;

      IF NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        PmtTolAddCurr := PmtTol
      ELSE
        PmtTolAddCurr := CalcLCYToAddCurr(PmtTolLCY);

      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtTolLCY <> 0) THEN
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtTolLCY,PmtTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance",PmtTol,PmtTolLCY,PmtTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDisc@50(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR DtldCVLedgEntryBuf@1003 : Record 383;GenJnlLine@1004 : Record 81;PmtTolAmtToBeApplied@1012 : Decimal;ApplnRoundingPrecision@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer);
    VAR
      PmtDisc@1009 : Decimal;
      PmtDiscLCY@1010 : Decimal;
      PmtDiscAddCurr@1011 : Decimal;
      MinimalPossibleLiability@1014 : Decimal;
      PaymentExceedsLiability@1005 : Boolean;
      ToleratedPaymentExceedsLiability@1013 : Boolean;
    BEGIN
      MinimalPossibleLiability := ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible");
      PaymentExceedsLiability := ABS(OldCVLedgEntryBuf2."Amount to Apply") >= MinimalPossibleLiability;
      ToleratedPaymentExceedsLiability := ABS(NewCVLedgEntryBuf."Remaining Amount" + PmtTolAmtToBeApplied) >= MinimalPossibleLiability;

      IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,TRUE,TRUE) AND
          ((OldCVLedgEntryBuf2."Amount to Apply" = 0) OR PaymentExceedsLiability) OR
          (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
           (OldCVLedgEntryBuf2."Amount to Apply" <> 0) AND PaymentExceedsLiability AND ToleratedPaymentExceedsLiability))
      THEN BEGIN
        PmtDisc := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
        PmtDiscLCY :=
          ROUND(
            (NewCVLedgEntryBuf."Original Amount" + PmtDisc) / NewCVLedgEntryBuf."Original Currency Factor") -
          NewCVLedgEntryBuf."Original Amt. (LCY)";

        OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscLCY;

        IF (NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
          PmtDiscAddCurr := PmtDisc
        ELSE
          PmtDiscAddCurr := CalcLCYToAddCurr(PmtDiscLCY);

        IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND
           (PmtDiscLCY <> 0)
        THEN
          CalcPmtDiscIfAdjVAT(
            NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscLCY,PmtDiscAddCurr,
            NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)");

        DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
          GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
          DtldCVLedgEntryBuf."Entry Type"::"Payment Discount",PmtDisc,PmtDiscLCY,PmtDiscAddCurr,0,0,0);
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscIfAdjVAT@49(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;VAR PmtDiscLCY2@1005 : Decimal;VAR PmtDiscAddCurr2@1006 : Decimal;NextTransactionNo@1007 : Integer;FirstNewVATEntryNo@1008 : Integer;EntryType@1009 : Integer);
    VAR
      VATEntry2@1011 : Record 254;
      VATPostingSetup@1012 : Record 325;
      TaxJurisdiction@1013 : Record 320;
      DtldCVLedgEntryBuf2@1015 : Record 383;
      OriginalAmountAddCurr@1016 : Decimal;
      PmtDiscRounding@1017 : Decimal;
      PmtDiscRoundingAddCurr@1018 : Decimal;
      PmtDiscFactorLCY@1019 : Decimal;
      PmtDiscFactorAddCurr@1020 : Decimal;
      VATBase@1021 : Decimal;
      VATBaseAddCurr@1022 : Decimal;
      VATAmount@1023 : Decimal;
      VATAmountAddCurr@1024 : Decimal;
      TotalVATAmount@1025 : Decimal;
      LastConnectionNo@1026 : Integer;
      VATEntryModifier@1027 : Integer;
    BEGIN
      IF OldCVLedgEntryBuf."Original Amt. (LCY)" = 0 THEN
        EXIT;

      IF (AddCurrencyCode = '') OR (AddCurrencyCode = OldCVLedgEntryBuf."Currency Code") THEN
        OriginalAmountAddCurr := OldCVLedgEntryBuf.Amount
      ELSE
        OriginalAmountAddCurr := CalcLCYToAddCurr(OldCVLedgEntryBuf."Original Amt. (LCY)");

      PmtDiscRounding := PmtDiscLCY2;
      PmtDiscFactorLCY := PmtDiscLCY2 / OldCVLedgEntryBuf."Original Amt. (LCY)";
      IF OriginalAmountAddCurr <> 0 THEN
        PmtDiscFactorAddCurr := PmtDiscAddCurr2 / OriginalAmountAddCurr
      ELSE
        PmtDiscFactorAddCurr := 0;
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      IF OldCVLedgEntryBuf."Transaction No." = NextTransactionNo THEN
        VATEntry2.SETRANGE("Entry No.",0,FirstNewVATEntryNo - 1);
      IF VATEntry2.FINDSET THEN BEGIN
        TotalVATAmount := 0;
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATEntry2."VAT Calculation Type" =
             VATEntry2."VAT Calculation Type"::"Sales Tax"
          THEN BEGIN
            TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
            VATPostingSetup."Adjust for Payment Discount" :=
              TaxJurisdiction."Adjust for Payment Discount";
          END;
          IF VATPostingSetup."Adjust for Payment Discount" THEN BEGIN
            IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
              IF LastConnectionNo <> 0 THEN BEGIN
                DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
                DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,FALSE);
                InsertSummarizedVAT(GenJnlLine);
              END;

              CalcPmtDiscVATBases(VATEntry2,VATBase,VATBaseAddCurr);

              PmtDiscRounding := PmtDiscRounding + VATBase * PmtDiscFactorLCY;
              VATBase := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATBase;

              PmtDiscRoundingAddCurr := PmtDiscRoundingAddCurr + VATBaseAddCurr * PmtDiscFactorAddCurr;
              VATBaseAddCurr := ROUND(CalcLCYToAddCurr(VATBase),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATBaseAddCurr;

              DtldCVLedgEntryBuf2.INIT;
              DtldCVLedgEntryBuf2."Posting Date" := GenJnlLine."Posting Date";
              DtldCVLedgEntryBuf2."Document Type" := GenJnlLine."Document Type";
              DtldCVLedgEntryBuf2."Document No." := GenJnlLine."Document No.";
              DtldCVLedgEntryBuf2.Amount := 0;
              DtldCVLedgEntryBuf2."Amount (LCY)" := -VATBase;
              DtldCVLedgEntryBuf2."Entry Type" := EntryType;
              CASE EntryType OF
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  VATEntryModifier := 1000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  VATEntryModifier := 2000000;
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  VATEntryModifier := 3000000;
              END;
              DtldCVLedgEntryBuf2.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
              // The total payment discount in currency is posted on the entry made in
              // the function CalcPmtDisc.
              DtldCVLedgEntryBuf2."User ID" := USERID;
              DtldCVLedgEntryBuf2."Additional-Currency Amount" := -VATBaseAddCurr;
              DtldCVLedgEntryBuf2.CopyPostingGroupsFromVATEntry(VATEntry2);
              TotalVATAmount := 0;
              LastConnectionNo := VATEntry2."Sales Tax Connection No.";
            END;

            CalcPmtDiscVATAmounts(
              VATEntry2,VATBase,VATBaseAddCurr,VATAmount,VATAmountAddCurr,
              PmtDiscRounding,PmtDiscFactorLCY,PmtDiscLCY2,PmtDiscAddCurr2);

            TotalVATAmount := TotalVATAmount + VATAmount;

            IF (PmtDiscAddCurr2 <> 0) AND (PmtDiscLCY2 = 0) THEN BEGIN
              VATAmountAddCurr := VATAmountAddCurr - PmtDiscAddCurr2;
              PmtDiscAddCurr2 := 0;
            END;

            // Post VAT
            // VAT for VAT entry
            IF VATEntry2.Type <> 0 THEN
              InsertPmtDiscVATForVATEntry(
                GenJnlLine,TempVATEntry,VATEntry2,VATEntryModifier,
                VATAmount,VATAmountAddCurr,VATBase,VATBaseAddCurr,
                PmtDiscFactorLCY,PmtDiscFactorAddCurr);

            // VAT for G/L entry/entries
            InsertPmtDiscVATForGLEntry(
              GenJnlLine,DtldCVLedgEntryBuf,NewCVLedgEntryBuf,VATEntry2,
              VATPostingSetup,TaxJurisdiction,EntryType,VATAmount,VATAmountAddCurr);
          END;
        UNTIL VATEntry2.NEXT = 0;

        IF LastConnectionNo <> 0 THEN BEGIN
          DtldCVLedgEntryBuf := DtldCVLedgEntryBuf2;
          DtldCVLedgEntryBuf."VAT Amount (LCY)" := -TotalVATAmount;
          DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
          InsertSummarizedVAT(GenJnlLine);
        END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscTolerance@60(VAR NewCVLedgEntryBuf@1008 : Record 382;VAR OldCVLedgEntryBuf@1007 : Record 382;VAR OldCVLedgEntryBuf2@1006 : Record 382;VAR DtldCVLedgEntryBuf@1005 : Record 383;GenJnlLine@1004 : Record 81;NextTransactionNo@1001 : Integer;FirstNewVATEntryNo@1000 : Integer);
    VAR
      PmtDiscTol@1011 : Decimal;
      PmtDiscTolLCY@1010 : Decimal;
      PmtDiscTolAddCurr@1009 : Decimal;
    BEGIN
      IF NOT OldCVLedgEntryBuf2."Accepted Pmt. Disc. Tolerance" THEN
        EXIT;

      PmtDiscTol := -OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      PmtDiscTolLCY :=
        ROUND(
          (NewCVLedgEntryBuf."Original Amount" + PmtDiscTol) / NewCVLedgEntryBuf."Original Currency Factor") -
        NewCVLedgEntryBuf."Original Amt. (LCY)";

      OldCVLedgEntryBuf."Pmt. Disc. Given (LCY)" := -PmtDiscTolLCY;

      IF NewCVLedgEntryBuf."Currency Code" = AddCurrencyCode THEN
        PmtDiscTolAddCurr := PmtDiscTol
      ELSE
        PmtDiscTolAddCurr := CalcLCYToAddCurr(PmtDiscTolLCY);

      IF NOT GLSetup."Pmt. Disc. Excl. VAT" AND GLSetup."Adjust for Payment Disc." AND (PmtDiscTolLCY <> 0) THEN
        CalcPmtDiscIfAdjVAT(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,PmtDiscTolLCY,PmtDiscTolAddCurr,
          NextTransactionNo,FirstNewVATEntryNo,DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)");

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance",PmtDiscTol,PmtDiscTolLCY,PmtDiscTolAddCurr,0,0,0);
    END;

    LOCAL PROCEDURE CalcPmtDiscVATBases@118(VATEntry2@1001 : Record 254;VAR VATBase@1002 : Decimal;VAR VATBaseAddCurr@1003 : Decimal);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      CASE VATEntry2."VAT Calculation Type" OF
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          BEGIN
            VATBase :=
              VATEntry2.Base + VATEntry2."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry2."Additional-Currency Base" +
              VATEntry2."Add.-Currency Unrealized Base";
          END;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          BEGIN
            VATEntry.RESET;
            VATEntry.SETCURRENTKEY("Transaction No.");
            VATEntry.SETRANGE("Transaction No.",VATEntry2."Transaction No.");
            VATEntry.SETRANGE("Sales Tax Connection No.",VATEntry2."Sales Tax Connection No.");
            VATEntry := VATEntry2;
            REPEAT
              IF VATEntry.Base < 0 THEN
                VATEntry.SETFILTER(Base,'>%1',VATEntry.Base)
              ELSE
                VATEntry.SETFILTER(Base,'<%1',VATEntry.Base);
            UNTIL NOT VATEntry.FINDLAST;
            VATEntry.RESET;
            VATBase :=
              VATEntry.Base + VATEntry."Unrealized Base";
            VATBaseAddCurr :=
              VATEntry."Additional-Currency Base" +
              VATEntry."Add.-Currency Unrealized Base";
          END;
      END;
    END;

    LOCAL PROCEDURE CalcPmtDiscVATAmounts@129(VATEntry2@1000 : Record 254;VATBase@1001 : Decimal;VATBaseAddCurr@1007 : Decimal;VAR VATAmount@1002 : Decimal;VAR VATAmountAddCurr@1003 : Decimal;VAR PmtDiscRounding@1004 : Decimal;PmtDiscFactorLCY@1005 : Decimal;VAR PmtDiscLCY2@1006 : Decimal;VAR PmtDiscAddCurr2@1008 : Decimal);
    BEGIN
      CASE VATEntry2."VAT Calculation Type" OF
        VATEntry2."VAT Calculation Type"::"Normal VAT",
        VATEntry2."VAT Calculation Type"::"Full VAT":
          IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
             (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
          THEN BEGIN
            IF (VATBase = 0) AND
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            THEN
              VATAmount := 0
            ELSE BEGIN
              PmtDiscRounding :=
                PmtDiscRounding +
                (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
              VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
              PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
            END;
            IF (VATBaseAddCurr = 0) AND
               (VATEntry2."VAT Calculation Type" <> VATEntry2."VAT Calculation Type"::"Full VAT")
            THEN
              VATAmountAddCurr := 0
            ELSE BEGIN
              VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
              PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
            END;
          END ELSE BEGIN
            VATAmount := 0;
            VATAmountAddCurr := 0;
          END;
        VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
          BEGIN
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          END;
        VATEntry2."VAT Calculation Type"::"Sales Tax":
          IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
            VATAmount :=
              ROUND((VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY);
            VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
          END ELSE
            IF (VATEntry2.Amount + VATEntry2."Unrealized Amount" <> 0) OR
               (VATEntry2."Additional-Currency Amount" + VATEntry2."Add.-Currency Unrealized Amt." <> 0)
            THEN BEGIN
              IF VATBase = 0 THEN
                VATAmount := 0
              ELSE BEGIN
                PmtDiscRounding :=
                  PmtDiscRounding +
                  (VATEntry2.Amount + VATEntry2."Unrealized Amount") * PmtDiscFactorLCY;
                VATAmount := ROUND(PmtDiscRounding - PmtDiscLCY2);
                PmtDiscLCY2 := PmtDiscLCY2 + VATAmount;
              END;

              IF VATBaseAddCurr = 0 THEN
                VATAmountAddCurr := 0
              ELSE BEGIN
                VATAmountAddCurr := ROUND(CalcLCYToAddCurr(VATAmount),AddCurrency."Amount Rounding Precision");
                PmtDiscAddCurr2 := PmtDiscAddCurr2 + VATAmountAddCurr;
              END;
            END ELSE BEGIN
              VATAmount := 0;
              VATAmountAddCurr := 0;
            END;
      END;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForVATEntry@43(GenJnlLine@1000 : Record 81;VAR TempVATEntry@1001 : TEMPORARY Record 254;VATEntry2@1004 : Record 254;VATEntryModifier@1002 : Integer;VATAmount@1005 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBase@1007 : Decimal;VATBaseAddCurr@1008 : Decimal;PmtDiscFactorLCY@1009 : Decimal;PmtDiscFactorAddCurr@1010 : Decimal);
    VAR
      TempVATEntryNo@1003 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",VATEntryModifier,VATEntryModifier + 999999);
      IF TempVATEntry.FINDLAST THEN
        TempVATEntryNo := TempVATEntry."Entry No." + 1
      ELSE
        TempVATEntryNo := VATEntryModifier + 1;
      TempVATEntry := VATEntry2;
      TempVATEntry."Entry No." := TempVATEntryNo;
      TempVATEntry."Posting Date" := GenJnlLine."Posting Date";
      TempVATEntry."Document No." := GenJnlLine."Document No.";
      TempVATEntry."External Document No." := GenJnlLine."External Document No.";
      TempVATEntry."Document Type" := GenJnlLine."Document Type";
      TempVATEntry."Source Code" := GenJnlLine."Source Code";
      TempVATEntry."Reason Code" := GenJnlLine."Reason Code";
      TempVATEntry."Transaction No." := NextTransactionNo;
      TempVATEntry."Sales Tax Connection No." := NextConnectionNo;
      TempVATEntry."Unrealized Amount" := 0;
      TempVATEntry."Unrealized Base" := 0;
      TempVATEntry."Remaining Unrealized Amount" := 0;
      TempVATEntry."Remaining Unrealized Base" := 0;
      TempVATEntry."User ID" := USERID;
      TempVATEntry."Closed by Entry No." := 0;
      TempVATEntry.Closed := FALSE;
      TempVATEntry."Internal Ref. No." := '';
      TempVATEntry.Amount := VATAmount;
      TempVATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      TempVATEntry."VAT Difference" := 0;
      TempVATEntry."Add.-Curr. VAT Difference" := 0;
      TempVATEntry."Add.-Currency Unrealized Amt." := 0;
      TempVATEntry."Add.-Currency Unrealized Base" := 0;
      IF VATEntry2."Tax on Tax" THEN BEGIN
        TempVATEntry.Base :=
          ROUND((VATEntry2.Base + VATEntry2."Unrealized Base") * PmtDiscFactorLCY);
        TempVATEntry."Additional-Currency Base" :=
          ROUND(
            (VATEntry2."Additional-Currency Base" +
             VATEntry2."Add.-Currency Unrealized Base") * PmtDiscFactorAddCurr,
            AddCurrency."Amount Rounding Precision");
      END ELSE BEGIN
        TempVATEntry.Base := VATBase;
        TempVATEntry."Additional-Currency Base" := VATBaseAddCurr;
      END;

      IF AddCurrencyCode = '' THEN BEGIN
        TempVATEntry."Additional-Currency Base" := 0;
        TempVATEntry."Additional-Currency Amount" := 0;
        TempVATEntry."Add.-Currency Unrealized Amt." := 0;
        TempVATEntry."Add.-Currency Unrealized Base" := 0;
      END;
      TempVATEntry.INSERT;
    END;

    LOCAL PROCEDURE InsertPmtDiscVATForGLEntry@94(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VAR NewCVLedgEntryBuf@1003 : Record 382;VATEntry2@1004 : Record 254;VAR VATPostingSetup@1005 : Record 325;VAR TaxJurisdiction@1008 : Record 320;EntryType@1002 : Integer;VATAmount@1006 : Decimal;VATAmountAddCurr@1007 : Decimal);
    BEGIN
      DtldCVLedgEntryBuf.INIT;
      DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(NewCVLedgEntryBuf);
      CASE EntryType OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)";
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          DtldCVLedgEntryBuf."Entry Type" :=
            DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)";
      END;
      DtldCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      DtldCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      DtldCVLedgEntryBuf."Document No." := GenJnlLine."Document No.";
      DtldCVLedgEntryBuf.Amount := 0;
      DtldCVLedgEntryBuf."VAT Bus. Posting Group" := VATEntry2."VAT Bus. Posting Group";
      DtldCVLedgEntryBuf."VAT Prod. Posting Group" := VATEntry2."VAT Prod. Posting Group";
      DtldCVLedgEntryBuf."Tax Jurisdiction Code" := VATEntry2."Tax Jurisdiction Code";
      // The total payment discount in currency is posted on the entry made in
      // the function CalcPmtDisc.
      DtldCVLedgEntryBuf."User ID" := USERID;
      DtldCVLedgEntryBuf."Use Additional-Currency Amount" := TRUE;

      CASE VATEntry2.Type OF
        VATEntry2.Type::Purchase:
          CASE VATEntry2."VAT Calculation Type" OF
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              BEGIN
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                InitGLEntryVAT(GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),'',
                  -VATAmount,-VATAmountAddCurr,FALSE);
              END;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              IF VATEntry2."Use Tax" THEN BEGIN
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetRevChargeAccount(FALSE),'',
                  -VATAmount,-VATAmountAddCurr,FALSE);
              END ELSE BEGIN
                InitGLEntryVAT(GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
          END;
        VATEntry2.Type::Sale:
          CASE VATEntry2."VAT Calculation Type" OF
            VATEntry2."VAT Calculation Type"::"Normal VAT",
            VATEntry2."VAT Calculation Type"::"Full VAT":
              BEGIN
                InitGLEntryVAT(
                  GenJnlLine,VATPostingSetup.GetSalesAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
            VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
              ;
            VATEntry2."VAT Calculation Type"::"Sales Tax":
              BEGIN
                InitGLEntryVAT(
                  GenJnlLine,TaxJurisdiction.GetSalesAccount(FALSE),'',
                  VATAmount,VATAmountAddCurr,FALSE);
                DtldCVLedgEntryBuf."Amount (LCY)" := -VATAmount;
                DtldCVLedgEntryBuf."Additional-Currency Amount" := -VATAmountAddCurr;
                DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,NewCVLedgEntryBuf,TRUE);
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyApplnRounding@51(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;ApplnRoundingPrecision@1005 : Decimal);
    VAR
      ApplnRounding@1006 : Decimal;
      ApplnRoundingLCY@1007 : Decimal;
    BEGIN
      IF ((NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Payment) AND
          (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)) OR
         (NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf."Currency Code")
      THEN
        EXIT;

      ApplnRounding := -(NewCVLedgEntryBuf."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount");
      ApplnRoundingLCY := ROUND(ApplnRounding / NewCVLedgEntryBuf."Adjusted Currency Factor");

      IF (ApplnRounding = 0) OR (ABS(ApplnRounding) > ApplnRoundingPrecision) THEN
        EXIT;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::"Appln. Rounding",ApplnRounding,ApplnRoundingLCY,ApplnRounding,0,0,0);
    END;

    LOCAL PROCEDURE FindAmtForAppln@6(GenJnlLine@1500000 : Record 81;VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR OldCVLedgEntryBuf2@1002 : Record 382;VAR AppliedAmount@1003 : Decimal;VAR AppliedAmountLCY@1004 : Decimal;VAR OldAppliedAmount@1005 : Decimal;ApplnRoundingPrecision@1007 : Decimal;NatureOfServices@1500001 : Option);
    BEGIN
      IF OldCVLedgEntryBuf2.GETFILTER(Positive) <> '' THEN BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN BEGIN
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")))
          THEN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount"
          ELSE
            AppliedAmount := -OldCVLedgEntryBuf2."Amount to Apply"
        END ELSE
          AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
      END ELSE BEGIN
        IF OldCVLedgEntryBuf2."Amount to Apply" <> 0 THEN
          IF (PaymentToleranceMgt.CheckCalcPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,FALSE,FALSE) AND
              (ABS(OldCVLedgEntryBuf2."Amount to Apply") >=
               ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")) AND
              (ABS(NewCVLedgEntryBuf."Remaining Amount") >=
               ABS(
                 ABSMin(
                   OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible",
                   OldCVLedgEntryBuf2."Amount to Apply")))) OR
             OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance"
          THEN BEGIN
            AppliedAmount := -OldCVLedgEntryBuf2."Remaining Amount";
            OldCVLedgEntryBuf."Accepted Pmt. Disc. Tolerance" := FALSE;
          END ELSE
            AppliedAmount := GetAppliedAmountFromBuffers(NewCVLedgEntryBuf,OldCVLedgEntryBuf2)
        ELSE
          AppliedAmount := ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf2."Remaining Amount");
      END;

      IF (ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply") < ApplnRoundingPrecision) AND
         (ApplnRoundingPrecision <> 0) AND
         (OldCVLedgEntryBuf2."Amount to Apply" <> 0)
      THEN
        AppliedAmount := AppliedAmount - (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Amount to Apply");

      IF NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" THEN BEGIN
        AppliedAmountLCY := ROUND(AppliedAmount / OldCVLedgEntryBuf."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      END ELSE BEGIN
        // Management of posting in multiple currencies
        IF AppliedAmount = -OldCVLedgEntryBuf2."Remaining Amount" THEN
          OldAppliedAmount := -OldCVLedgEntryBuf."Remaining Amount"
        ELSE
          OldAppliedAmount :=
            CurrExchRate.ExchangeAmount(
              AppliedAmount,NewCVLedgEntryBuf."Currency Code",
              OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Posting Date");

        IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
          // Post the realized gain or loss on the NewCVLedgEntryBuf
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldCVLedgEntryBuf."Original Currency Factor")
        ELSE
          // Post the realized gain or loss on the OldCVLedgEntryBuf
          AppliedAmountLCY := ROUND(AppliedAmount / NewCVLedgEntryBuf."Original Currency Factor");
      END;

      AppliedAmtCurrDiff := AppliedAmount;
    END;

    LOCAL PROCEDURE PostCustServiceTaxOnAppln@1500016(VAR GenJnlLine@1500007 : Record 81;NewCVLedgEntryBuf@1500001 : Record 382;OldCVLedgEntryBuf@1500000 : Record 382;AppliedAmountLCY@1500002 : Decimal);
    VAR
      CustLedgEntry@1500006 : Record 21;
      Cust@1500008 : Record 18;
      STAmountApplied@1500005 : Decimal;
      STGroupCode@1500004 : Code[20];
      STPmtPostingDate@1500003 : Date;
      STSBCAmountApplied@1500423 : Decimal;
      KKCessAmountApplied@1500009 : Decimal;
    BEGIN
      IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
        EXIT;
      IF ((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice) AND
          (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Payment)) OR
         ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice) AND
          (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment)) OR
         ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo") AND
          (OldCVLedgEntryBuf."Source Code" = 'SERVTAXADJ') AND
          (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment))
      THEN BEGIN
        CheckServTaxOnInvApplToAdvPmt(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf);
        TotalAmtToApply := TotalAmtToApply + AppliedAmountLCY;
        ServiceTaxMgt.SetTotalAppliedAmt(TotalAmtToApply);

        CheckAppliedPaymentCust(GenJnlLine,OldCVLedgEntryBuf,NewCVLedgEntryBuf,AppliedAmountLCY);
        Cust.GET(NewCVLedgEntryBuf."CV No.");
        IF (Cust."Nature of Services" <> Cust."Nature of Services"::" ") OR STPureAgent THEN
          EXIT;
        ServiceTaxMgt.SetTransactionNo(NextTransactionNo);
        IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
          IF NOT CustLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
            IF CustLedgEntry.PoT THEN
              ServiceTaxMgt.SetPostingStatus(GenJnlLine."S.T From Order");
            ServiceTaxMgt.AdjustCustServTaxInvoice(
              OldCVLedgEntryBuf,NewCVLedgEntryBuf,ABS(AppliedAmountLCY),
              GenJnlLine."Offline Application",STAmountApplied,STGroupCode,STPmtPostingDate,STSBCAmountApplied,KKCessAmountApplied);
          END;
        END;
        IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
          IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
            IF CustLedgEntry.PoT THEN
              ServiceTaxMgt.SetPostingStatus(GenJnlLine."S.T From Order");
            ServiceTaxMgt.AdjustCustServTaxInvoice(
              NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY),
              GenJnlLine."Offline Application",STAmountApplied,STGroupCode,STPmtPostingDate,STSBCAmountApplied,KKCessAmountApplied);
          END;
        END;
        IF NOT GenJnlLine."S.T From Order" AND GenJnlLine.PoT AND CustLedgEntry."Serv. Tax on Advance Payment" THEN
          CalcOfflineAdjAmt(GenJnlLine,STGroupCode,STPmtPostingDate,ABS(STAmountApplied),ABS(STSBCAmountApplied),
            ABS(KKCessAmountApplied),TRUE);
      END;
    END;

    LOCAL PROCEDURE CalcCurrencyUnrealizedGainLoss@48(VAR CVLedgEntryBuf@1000 : Record 382;VAR TempDtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;RemainingAmountBeforeAppln@1007 : Decimal);
    VAR
      DtldCustLedgEntry@1008 : Record 379;
      DtldVendLedgEntry@1009 : Record 380;
      UnRealizedGainLossLCY@1001 : Decimal;
    BEGIN
      IF (CVLedgEntryBuf."Currency Code" = '') OR (RemainingAmountBeforeAppln = 0) THEN
        EXIT;

      // Calculate Unrealized GainLoss
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN BEGIN
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CVLedgEntryBuf."Entry No.");
        DtldCustLedgEntry.SETRANGE(
          "Entry Type",
          DtldCustLedgEntry."Entry Type"::"Unrealized Loss",
          DtldCustLedgEntry."Entry Type"::"Unrealized Gain");
        DtldCustLedgEntry.CALCSUMS("Amount (LCY)");
        UnRealizedGainLossLCY :=
          ROUND(DtldCustLedgEntry."Amount (LCY)" * ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END ELSE BEGIN
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",CVLedgEntryBuf."Entry No.");
        DtldVendLedgEntry.SETRANGE(
          "Entry Type",
          DtldVendLedgEntry."Entry Type"::"Unrealized Loss",
          DtldVendLedgEntry."Entry Type"::"Unrealized Gain");
        DtldVendLedgEntry.CALCSUMS("Amount (LCY)");
        UnRealizedGainLossLCY :=
          ROUND(DtldVendLedgEntry."Amount (LCY)" * ABS(AppliedAmount / RemainingAmountBeforeAppln));
      END;

      IF UnRealizedGainLossLCY <> 0 THEN
        IF UnRealizedGainLossLCY < 0 THEN
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Loss",0,-UnRealizedGainLossLCY,0,0,0,0)
        ELSE
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Unrealized Gain",0,-UnRealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcCurrencyRealizedGainLoss@62(VAR CVLedgEntryBuf@1005 : Record 382;VAR TempDtldCVLedgEntryBuf@1003 : TEMPORARY Record 383;GenJnlLine@1002 : Record 81;AppliedAmount@1001 : Decimal;AppliedAmountLCY@1000 : Decimal);
    VAR
      RealizedGainLossLCY@1006 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      // Calculate Realized GainLoss
      RealizedGainLossLCY :=
        AppliedAmountLCY - ROUND(AppliedAmount / CVLedgEntryBuf."Original Currency Factor");
      IF RealizedGainLossLCY <> 0 THEN
        IF RealizedGainLossLCY < 0 THEN
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Loss",0,RealizedGainLossLCY,0,0,0,0)
        ELSE
          TempDtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
            GenJnlLine,CVLedgEntryBuf,TempDtldCVLedgEntryBuf,
            TempDtldCVLedgEntryBuf."Entry Type"::"Realized Gain",0,RealizedGainLossLCY,0,0,0,0);
    END;

    LOCAL PROCEDURE CalcApplication@55(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR OldCVLedgEntryBuf@1001 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81;AppliedAmount@1004 : Decimal;AppliedAmountLCY@1005 : Decimal;OldAppliedAmount@1006 : Decimal;PrevNewCVLedgEntryBuf@1008 : Record 382;PrevOldCVLedgEntryBuf@1007 : Record 382;VAR AllApplied@1009 : Boolean);
    BEGIN
      IF AppliedAmount = 0 THEN
        EXIT;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,OldAppliedAmount,AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevOldCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevOldCVLedgEntryBuf."Max. Payment Tolerance");

      OldCVLedgEntryBuf.Open := OldCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
        OldCVLedgEntryBuf."Closed by Entry No." := NewCVLedgEntryBuf."Entry No.";
        OldCVLedgEntryBuf."Closed at Date" := GenJnlLine."Posting Date";
        OldCVLedgEntryBuf."Closed by Amount" := -OldAppliedAmount;
        OldCVLedgEntryBuf."Closed by Amount (LCY)" := -AppliedAmountLCY;
        OldCVLedgEntryBuf."Closed by Currency Code" := NewCVLedgEntryBuf."Currency Code";
        OldCVLedgEntryBuf."Closed by Currency Amount" := -AppliedAmount;
      END ELSE
        AllApplied := FALSE;

      DtldCVLedgEntryBuf.InitDtldCVLedgEntryBuf(
        GenJnlLine,NewCVLedgEntryBuf,DtldCVLedgEntryBuf,
        DtldCVLedgEntryBuf."Entry Type"::Application,-AppliedAmount,-AppliedAmountLCY,0,
        NewCVLedgEntryBuf."Entry No.",PrevNewCVLedgEntryBuf."Remaining Pmt. Disc. Possible",
        PrevNewCVLedgEntryBuf."Max. Payment Tolerance");

      NewCVLedgEntryBuf.Open := NewCVLedgEntryBuf."Remaining Amount" <> 0;
      IF NOT NewCVLedgEntryBuf.Open AND NOT AllApplied THEN BEGIN
        NewCVLedgEntryBuf."Closed by Entry No." := OldCVLedgEntryBuf."Entry No.";
        NewCVLedgEntryBuf."Closed at Date" := GenJnlLine."Posting Date";
        NewCVLedgEntryBuf."Closed by Amount" := AppliedAmount;
        NewCVLedgEntryBuf."Closed by Amount (LCY)" := AppliedAmountLCY;
        NewCVLedgEntryBuf."Closed by Currency Code" := OldCVLedgEntryBuf."Currency Code";
        NewCVLedgEntryBuf."Closed by Currency Amount" := OldAppliedAmount;
      END;
    END;

    LOCAL PROCEDURE CalcAmtLCYAdjustment@52(VAR CVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1002 : Record 383;GenJnlLine@1003 : Record 81);
    VAR
      AdjustedAmountLCY@1005 : Decimal;
    BEGIN
      IF CVLedgEntryBuf."Currency Code" = '' THEN
        EXIT;

      AdjustedAmountLCY :=
        ROUND(CVLedgEntryBuf."Remaining Amount" / CVLedgEntryBuf."Adjusted Currency Factor");

      IF AdjustedAmountLCY <> CVLedgEntryBuf."Remaining Amt. (LCY)" THEN BEGIN
        DtldCVLedgEntryBuf.InitFromGenJnlLine(GenJnlLine);
        DtldCVLedgEntryBuf.CopyFromCVLedgEntryBuf(CVLedgEntryBuf);
        DtldCVLedgEntryBuf."Entry Type" :=
          DtldCVLedgEntryBuf."Entry Type"::"Correction of Remaining Amount";
        DtldCVLedgEntryBuf."Amount (LCY)" := AdjustedAmountLCY - CVLedgEntryBuf."Remaining Amt. (LCY)";
        DtldCVLedgEntryBuf.InsertDtldCVLedgEntry(DtldCVLedgEntryBuf,CVLedgEntryBuf,FALSE);
      END;
    END;

    LOCAL PROCEDURE InitBankAccLedgEntry@59(GenJnlLine@1000 : Record 81;VAR BankAccLedgEntry@1001 : Record 271);
    BEGIN
      BankAccLedgEntry.INIT;
      BankAccLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      BankAccLedgEntry."Entry No." := NextEntryNo;
      BankAccLedgEntry."Transaction No." := NextTransactionNo;
    END;

    LOCAL PROCEDURE InitCheckLedgEntry@65(BankAccLedgEntry@1000 : Record 271;VAR CheckLedgEntry@1001 : Record 272);
    BEGIN
      CheckLedgEntry.INIT;
      CheckLedgEntry.CopyFromBankAccLedgEntry(BankAccLedgEntry);
      CheckLedgEntry."Entry No." := NextCheckEntryNo;
    END;

    LOCAL PROCEDURE InitCustLedgEntry@57(GenJnlLine@1000 : Record 81;VAR CustLedgEntry@1001 : Record 21);
    BEGIN
      CustLedgEntry.INIT;
      CustLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      CustLedgEntry."Entry No." := NextEntryNo;
      CustLedgEntry."Transaction No." := NextTransactionNo;
      IF CustLedgEntry."HSN/SAC Code" <> '' THEN
        GenJnlCheckLine.CheckDocNoIsNotUsed(
          TransactionType2::Sale,GenJnlLine."Account No.",
          GenJnlLine."Document Type",CustLedgEntry."Document No.",CustLedgEntry."HSN/SAC Code",
          CustLedgEntry."GST Group Code");
    END;

    LOCAL PROCEDURE InitVendLedgEntry@58(GenJnlLine@1001 : Record 81;VAR VendLedgEntry@1000 : Record 25);
    BEGIN
      VendLedgEntry.INIT;
      VendLedgEntry.CopyFromGenJnlLine(GenJnlLine);
      VendLedgEntry."Entry No." := NextEntryNo;
      VendLedgEntry."Transaction No." := NextTransactionNo;
      IF VendLedgEntry."HSN/SAC Code" <> '' THEN
        GenJnlCheckLine.CheckDocNoIsNotUsed(
          TransactionType2::Purchase,GenJnlLine."Account No.",
          GenJnlLine."Document Type",VendLedgEntry."Document No.",VendLedgEntry."HSN/SAC Code",
          VendLedgEntry."GST Group Code");
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntry@102(GenJnlLine@1003 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VAR DtldCustLedgEntry@1001 : Record 379;Offset@1000 : Integer);
    BEGIN
      WITH DtldCustLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "TDS Nature of Deduction" := GenJnlLine."TDS Nature of Deduction";
        "TDS Group" := GenJnlLine."TDS Group";
        "Total TDS/TCS Incl. SHECESS" := GenJnlLine."Total TDS/TCS Incl. SHE CESS";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntry@103(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VAR DtldVendLedgEntry@1004 : Record 380;Offset@1002 : Integer);
    BEGIN
      WITH DtldVendLedgEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DtldCVLedgEntryBuf);
        "Entry No." := Offset + DtldCVLedgEntryBuf."Entry No.";
        "Journal Batch Name" := GenJnlLine."Journal Batch Name";
        "Reason Code" := GenJnlLine."Reason Code";
        "Source Code" := GenJnlLine."Source Code";
        "TDS Nature of Deduction" := GenJnlLine."TDS Nature of Deduction";
        "TDS Group" := GenJnlLine."TDS Group";
        "Total TDS Including SHECESS" := GenJnlLine."Total TDS/TCS Incl. SHE CESS";
        "Transaction No." := NextTransactionNo;
        UpdateDebitCredit(GenJnlLine.Correction);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ApplyCustLedgEntry@1(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Cust@1003 : Record 18);
    VAR
      OldCustLedgEntry@1005 : Record 21;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewCustLedgEntry@1008 : Record 21;
      NewCVLedgEntryBuf2@1019 : Record 382;
      ServTaxEntry@1500236 : Record 16473;
      TempOldCustLedgEntry@1021 : TEMPORARY Record 21;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      ApplicationType := ApplicationType::Customer;
      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      IF NOT PrepareTempCustLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldCustLedgEntry,Cust,ApplyingDate) THEN
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        TempOldCustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        TempOldCustLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        OldCVLedgEntryBuf.CopyFromCustLedgEntry(TempOldCustLedgEntry);
        CheckRoundingParameters(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

        PostApplyCust(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          Cust,AllApplied,AppliedAmount,PmtTolAmtToBeApplied,TempOldCustLedgEntry);

        IF NOT OldCVLedgEntryBuf.Open THEN BEGIN
          UpdateCalcInterest(OldCVLedgEntryBuf);
          UpdateCalcInterest2(OldCVLedgEntryBuf,NewCVLedgEntryBuf);
        END;

        OldCVLedgEntryBuf.CopyToCustLedgEntry(TempOldCustLedgEntry);
        OldCustLedgEntry := TempOldCustLedgEntry;
        OldCustLedgEntry."Applies-to ID" := '';
        OldCustLedgEntry."Amount to Apply" := 0;
        OldCustLedgEntry.MODIFY;

        IF GLSetup."Unrealized VAT" OR
           (GLSetup."Prepayment Unrealized VAT" AND TempOldCustLedgEntry.Prepayment)
        THEN
          IF IsNotPayment(TempOldCustLedgEntry."Document Type") THEN BEGIN
            TempOldCustLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            CustUnrealizedVAT(
              GenJnlLine,
              TempOldCustLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          END;

        TempOldCustLedgEntry.DELETE;

        // Find the next old entry for application of the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldCustLedgEntry.GETFILTER(Positive) <> '' THEN
            IF TempOldCustLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldCustLedgEntry.SETRANGE(Positive);
              TempOldCustLedgEntry.FIND('-');
              TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldCustLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          ELSE
            IF NewCVLedgEntryBuf.Open THEN
              Completed := TempOldCustLedgEntry.NEXT = 0
            ELSE
              Completed := TRUE;
      UNTIL Completed;

      IF (NewSTBase <> 0) AND (NewServTaxAmt <> 0) AND (NewServTaxECessAmt <> 0) AND (NewServTaxSheCessAmt <> 0) AND
         (NewServTaxSBCAmt <> 0) AND (NewKKCessAmt <> 0) THEN
        IF SvcTaxPostingBuffer[1].FINDSET THEN
          REPEAT
            PostCustSrvTaxBuffer(GenJnlLine,SvcTaxPostingBuffer[1],NewCVLedgEntryBuf,OldCVLedgEntryBuf);
          UNTIL SvcTaxPostingBuffer[1].NEXT = 0;
      SvcTaxPostingBuffer[1].DELETEALL;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF NOT NewCVLedgEntryBuf.Open THEN
        UpdateCalcInterest(NewCVLedgEntryBuf);

      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF IsNotPayment(NewCVLedgEntryBuf."Document Type") AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          NewCVLedgEntryBuf.CopyToCustLedgEntry(NewCustLedgEntry);
          CheckUnrealizedCust := TRUE;
          UnrealizedCustLedgEntry := NewCustLedgEntry;
          UnrealizedCustLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountCust := NewCustLedgEntry."Remaining Amount" - NewRemainingAmtBeforeAppln;
        END;
    END;

    PROCEDURE CustPostApplyCustLedgEntry@74(VAR GenJnlLinePostApply@1000 : Record 81;VAR CustLedgEntryPostApply@1001 : Record 21);
    VAR
      Cust@1002 : Record 18;
      CustPostingGr@1007 : Record 92;
      CustLedgEntry@1006 : Record 21;
      DtldCustLedgEntry@1003 : Record 379;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      CustLedgEntry.TRANSFERFIELDS(CustLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := CustLedgEntryPostApply."Currency Code";
        "Applies-to ID" := CustLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.RunCheck(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Cust.GET(CustLedgEntry."Customer No.");
        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Cust.TESTFIELD("Customer Posting Group");
          "Posting Group" := Cust."Customer Posting Group";
        END;
        CustPostingGr.GET("Posting Group");
        CustPostingGr.GetReceivablesAccount;

        DtldCustLedgEntry.LOCKTABLE;
        CustLedgEntry.LOCKTABLE;

        // Post the application
        CustLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
        ResetGenJnlLineTmp;
        ApplyCustLedgEntry(CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Cust);
        CVLedgEntryBuf.CopyToCustLedgEntry(CustLedgEntry);
        CustLedgEntry.MODIFY;

        // Post the Dtld customer entry
        DtldLedgEntryInserted := PostDtldCustLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,CustPostingGr,FALSE);
        PostAppSTGenJnlLineTmp(GenJnlLine);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        FinishPosting;
      END;
    END;

    LOCAL PROCEDURE PrepareTempCustLedgEntry@111(GenJnlLine@1000 : Record 81;VAR NewCVLedgEntryBuf@1015 : Record 382;VAR TempOldCustLedgEntry@1010 : TEMPORARY Record 21;Cust@1016 : Record 18;VAR ApplyingDate@1001 : Date) : Boolean;
    VAR
      OldCustLedgEntry@1014 : Record 21;
      SalesSetup@1009 : Record 311;
      GenJnlApply@1008 : Codeunit 225;
      RemainingAmount@1002 : Decimal;
    BEGIN
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.");
        OldCustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldCustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE(Open,TRUE);
        IF GenJnlLine."GST Customer Type" <> GenJnlLine."GST Customer Type"::" " THEN
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);
        OldCustLedgEntry.FINDFIRST;
        OldCustLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldCustLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldCustLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
        TempOldCustLedgEntry := OldCustLedgEntry;
        TempOldCustLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
        OldCustLedgEntry.SETRANGE("Customer No.",NewCVLedgEntryBuf."CV No.");
        OldCustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldCustLedgEntry.SETRANGE(Open,TRUE);
        OldCustLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Cust."Application Method" = Cust."Application Method"::"Apply to Oldest") THEN
          OldCustLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Cust."Application Method" = Cust."Application Method"::"Apply to Oldest" THEN
          OldCustLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check Cust Ledger Entry and add to Temp.
        SalesSetup.GET;
        IF SalesSetup."Appln. between Currencies" = SalesSetup."Appln. between Currencies"::None THEN
          OldCustLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldCustLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldCustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,FALSE)
            THEN BEGIN
              IF (OldCustLedgEntry."Posting Date" > ApplyingDate) AND (OldCustLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldCustLedgEntry."Posting Date";
              TempOldCustLedgEntry := OldCustLedgEntry;
              TempOldCustLedgEntry.INSERT;
            END;
          UNTIL OldCustLedgEntry.NEXT = 0;

        TempOldCustLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);

        IF TempOldCustLedgEntry.FIND('-') THEN BEGIN
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldCustLedgEntry.SETRANGE(Positive);
          TempOldCustLedgEntry.FIND('-');
          REPEAT
            TempOldCustLedgEntry.CALCFIELDS("Remaining Amount");
            TempOldCustLedgEntry.RecalculateAmounts(
              TempOldCustLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            IF PaymentToleranceMgt.CheckCalcPmtDiscCVCust(NewCVLedgEntryBuf,TempOldCustLedgEntry,0,FALSE,FALSE) THEN
              TempOldCustLedgEntry."Remaining Amount" -= TempOldCustLedgEntry."Remaining Pmt. Disc. Possible";
            RemainingAmount += TempOldCustLedgEntry."Remaining Amount";
          UNTIL TempOldCustLedgEntry.NEXT = 0;
          TempOldCustLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        END ELSE
          TempOldCustLedgEntry.SETRANGE(Positive);

        EXIT(TempOldCustLedgEntry.FIND('-'));
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntries@46(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1002 : Record 92;LedgEntryInserted@1012 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1011 : TEMPORARY Record 49;
      DtldCustLedgEntry@1005 : Record 379;
      AdjAmount@1003 : ARRAY [4] OF Decimal;
      DtldCustLedgEntryNoOffset@1006 : Integer;
      SaveEntryNo@1014 : Integer;
      SourceCurrTCSAmt@1500000 : Decimal;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Customer THEN
        EXIT;

      IF DtldCustLedgEntry.FINDLAST THEN
        DtldCustLedgEntryNoOffset := DtldCustLedgEntry."Entry No."
      ELSE
        DtldCustLedgEntryNoOffset := 0;

      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          InsertDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldCustLedgEntry,DtldCustLedgEntryNoOffset);

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");

          // Post automatic entries.
          IF ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) OR
             ((AddCurrencyCode <> '') AND (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          THEN
            PostDtldCustLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,AdjAmount);
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;
      END;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,CustPostingGr.GetReceivablesAccount,LedgEntryInserted);

      IF (NOT GenJnlLine.Adjustment) AND (GenJnlLine."Total TDS/TCS Incl. SHE CESS" <> 0) AND
         (GenJnlLine."Amount (LCY)" < 0) AND (NOT GenJnlLine."TCS From Orders") AND
         (GenJnlLine."TCS Nature of Collection" <> '')
      THEN BEGIN
        TCSSetup.SETRANGE("TCS Nature of Collection",GenJnlLine."TCS Nature of Collection");
        TCSSetup.SETRANGE("Assessee Code",GenJnlLine."Assessee Code");
        TCSSetup.SETRANGE("Concessional Code",GenJnlLine."Concessional Code");
        TCSSetup.SETRANGE("Effective Date",0D,GenJnlLine."Posting Date");
        TCSSetup.FINDLAST;
        TCSSetup.TESTFIELD("TCS Account No.");
        IF AddCurrencyCode <> '' THEN
          SourceCurrTCSAmt := CalcLCYToAddCurr(TotalITAmountLCY);
        CreateGLEntry(
          GenJnlLine,TCSSetup."TCS Account No.",TotalITAmountLCY,SourceCurrTCSAmt,TRUE,TRUE);
      END;
      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      IF NOT DtldCVLedgEntryBuf.ISEMPTY THEN
        IF IsTempGLEntryBufEmpty THEN
          DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);

      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntry@82(GenJnlLine@1005 : Record 81;DtldCVLedgEntryBuf@1003 : Record 383;CustPostingGr@1002 : Record 92;VAR AdjAmount@1001 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1006 : Code[20];
    BEGIN
      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,0,FALSE);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,FALSE);
    END;

    LOCAL PROCEDURE PostDtldCustLedgEntryUnapply@114(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1000 : Record 92;OriginalTransactionNo@1006 : Integer);
    VAR
      AdjAmount@1004 : ARRAY [4] OF Decimal;
      AccNo@1002 : Code[20];
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) AND
         ((AddCurrencyCode = '') OR (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,TRUE);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Sale;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,TRUE);
    END;

    LOCAL PROCEDURE GetDtldCustLedgEntryAccNo@147(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;CustPostingGr@1000 : Record 92;OriginalTransactionNo@1006 : Integer;Unapply@1012 : Boolean) : Code[20];
    VAR
      GenPostingSetup@1005 : Record 252;
      Currency@1009 : Record 4;
      AmountCondition@1002 : Boolean;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Payment Discount":
            EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            BEGIN
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Appln. Rounding":
            EXIT(CustPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            EXIT(CustPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance":
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(CustPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                EXIT(CustPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            BEGIN
              TESTFIELD("Gen. Prod. Posting Group");
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Payment Tolerance Posting" OF
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetSalesPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            IF Unapply THEN
              PostDtldCustVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          ELSE
            FIELDERROR("Entry Type");
        END;
      END;
    END;

    LOCAL PROCEDURE CustUnrealizedVAT@16(GenJnlLine@1015 : Record 81;VAR CustLedgEntry2@1000 : Record 21;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      TaxJurisdiction@1014 : Record 320;
      VATPostingSetup@1017 : Record 325;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountLast@1012 : Decimal;
      TotalUnrealVATAmountFirst@1013 : Decimal;
      SalesVATAccount@1009 : Code[20];
      SalesVATUnrealAccount@1010 : Code[20];
      LastConnectionNo@1011 : Integer;
      GLEntryNo@1016 : Integer;
    BEGIN
      PaidAmount := CustLedgEntry2."Amount (LCY)" - CustLedgEntry2."Remaining Amt. (LCY)";
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
      IF VATEntry2.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          THEN
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT(GenJnlLine);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          VATPart :=
            VATEntry2.GetUnRealizedVATPart(
              ROUND(SettledAmount / CustLedgEntry2.GetOriginalCurrencyFactor),
              PaidAmount,
              CustLedgEntry2."Original Amt. (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  SalesVATAccount := VATPostingSetup.GetSalesAccount(FALSE);
                  SalesVATUnrealAccount := VATPostingSetup.GetSalesAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  SalesVATAccount := TaxJurisdiction.GetSalesAccount(FALSE);
                  SalesVATUnrealAccount := TaxJurisdiction.GetSalesAccount(TRUE);
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            END;

            InitGLEntryVAT(
              GenJnlLine,SalesVATUnrealAccount,SalesVATAccount,-VATAmount,-VATAmountAddCurr,FALSE);
            GLEntryNo :=
              InitGLEntryVATCopy(GenJnlLine,SalesVATAccount,SalesVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2);

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,GLEntryNo);
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE ApplyVendLedgEntry@4(VAR NewCVLedgEntryBuf@1000 : Record 382;VAR DtldCVLedgEntryBuf@1001 : Record 383;GenJnlLine@1002 : Record 81;Vend@1015 : Record 23);
    VAR
      OldVendLedgEntry@1005 : Record 25;
      OldCVLedgEntryBuf@1006 : Record 382;
      NewVendLedgEntry@1008 : Record 25;
      NewCVLedgEntryBuf2@1019 : Record 382;
      ServTaxEntry@1500174 : Record 16473;
      TempOldVendLedgEntry@1003 : TEMPORARY Record 25;
      Completed@1009 : Boolean;
      AppliedAmount@1010 : Decimal;
      NewRemainingAmtBeforeAppln@1014 : Decimal;
      ApplyingDate@1017 : Date;
      PmtTolAmtToBeApplied@1020 : Decimal;
      AllApplied@1024 : Boolean;
      OldVendLedgEntry2@1501015 : Record 25;
    BEGIN
      IF NewCVLedgEntryBuf."Amount to Apply" = 0 THEN
        EXIT;

      ApplicationType := ApplicationType::Vendor;
      AllApplied := TRUE;
      IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') AND
         NOT
         ((Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") AND
          GenJnlLine."Allow Application")
      THEN
        EXIT;

      PmtTolAmtToBeApplied := 0;
      NewRemainingAmtBeforeAppln := NewCVLedgEntryBuf."Remaining Amount";
      NewCVLedgEntryBuf2 := NewCVLedgEntryBuf;

      ApplyingDate := GenJnlLine."Posting Date";

      IF NOT PrepareTempVendLedgEntry(GenJnlLine,NewCVLedgEntryBuf,TempOldVendLedgEntry,Vend,ApplyingDate) THEN
        EXIT;

      GenJnlLine."Posting Date" := ApplyingDate;
      // Apply the new entry (Payment) to the old entries (Invoices) one at a time
      REPEAT
        CurrencyCode2 := '';
        CurrencyFactor2 := 0;
        STAmtSignfactor := 0;
        TempOldVendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        OldCVLedgEntryBuf.CopyFromVendLedgEntry(TempOldVendLedgEntry);
        TempOldVendLedgEntry.COPYFILTER(Positive,OldCVLedgEntryBuf.Positive);
        OldVendLedgEntry2.GET(OldCVLedgEntryBuf."Entry No.");
        CheckRoundingParameters(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

        PostApplyVend(
          GenJnlLine,DtldCVLedgEntryBuf,OldCVLedgEntryBuf,NewCVLedgEntryBuf,NewCVLedgEntryBuf2,
          Vend,AllApplied,AppliedAmount,PmtTolAmtToBeApplied,TempOldVendLedgEntry);

        // Update the Old Entry
        OldCVLedgEntryBuf.CopyToVendLedgEntry(TempOldVendLedgEntry);

        OldVendLedgEntry := TempOldVendLedgEntry;
        OldVendLedgEntry."Applies-to ID" := '';
        OldVendLedgEntry."Amount to Apply" := 0;
        OldVendLedgEntry.MODIFY;

        IF GLSetup."Unrealized VAT" OR
           (GLSetup."Prepayment Unrealized VAT" AND TempOldVendLedgEntry.Prepayment)
        THEN
          IF IsNotPayment(TempOldVendLedgEntry."Document Type") THEN BEGIN
            TempOldVendLedgEntry.RecalculateAmounts(
              NewCVLedgEntryBuf."Currency Code",TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date");
            VendUnrealizedVAT(
              GenJnlLine,
              TempOldVendLedgEntry,
              CurrExchRate.ExchangeAmount(
                AppliedAmount,NewCVLedgEntryBuf."Currency Code",
                TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Posting Date"));
          END;

        TempOldVendLedgEntry.DELETE;

        // Find the next old entry to apply to the new entry
        IF GenJnlLine."Applies-to Doc. No." <> '' THEN
          Completed := TRUE
        ELSE
          IF TempOldVendLedgEntry.GETFILTER(Positive) <> '' THEN
            IF TempOldVendLedgEntry.NEXT = 1 THEN
              Completed := FALSE
            ELSE BEGIN
              TempOldVendLedgEntry.SETRANGE(Positive);
              TempOldVendLedgEntry.FIND('-');
              TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
              Completed := TempOldVendLedgEntry."Remaining Amount" * NewCVLedgEntryBuf."Remaining Amount" >= 0;
            END
          ELSE
            IF NewCVLedgEntryBuf.Open THEN
              Completed := TempOldVendLedgEntry.NEXT = 0
            ELSE
              Completed := TRUE;
      UNTIL Completed;

      DtldCVLedgEntryBuf.SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
      DtldCVLedgEntryBuf.SETRANGE("CV Ledger Entry No.",NewCVLedgEntryBuf."Entry No.");
      DtldCVLedgEntryBuf.SETRANGE(
        "Entry Type",
        DtldCVLedgEntryBuf."Entry Type"::Application);
      DtldCVLedgEntryBuf.CALCSUMS("Amount (LCY)",Amount);

      CalcCurrencyUnrealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,DtldCVLedgEntryBuf.Amount,NewRemainingAmtBeforeAppln);

      CalcAmtLCYAdjustment(NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);

      NewCVLedgEntryBuf."Applies-to ID" := '';
      NewCVLedgEntryBuf."Amount to Apply" := 0;

      IF GLSetup."Unrealized VAT" OR
         (GLSetup."Prepayment Unrealized VAT" AND NewCVLedgEntryBuf.Prepayment)
      THEN
        IF IsNotPayment(NewCVLedgEntryBuf."Document Type") AND
           (NewRemainingAmtBeforeAppln - NewCVLedgEntryBuf."Remaining Amount" <> 0)
        THEN BEGIN
          NewCVLedgEntryBuf.CopyToVendLedgEntry(NewVendLedgEntry);
          CheckUnrealizedVend := TRUE;
          UnrealizedVendLedgEntry := NewVendLedgEntry;
          UnrealizedVendLedgEntry.CALCFIELDS("Amount (LCY)","Original Amt. (LCY)");
          UnrealizedRemainingAmountVend := -(NewRemainingAmtBeforeAppln - NewVendLedgEntry."Remaining Amount");
        END;
    END;

    PROCEDURE VendPostApplyVendLedgEntry@66(VAR GenJnlLinePostApply@1000 : Record 81;VAR VendLedgEntryPostApply@1001 : Record 25);
    VAR
      Vend@1002 : Record 23;
      VendPostingGr@1007 : Record 93;
      VendLedgEntry@1006 : Record 25;
      DtldVendLedgEntry@1003 : Record 380;
      TempDtldCVLedgEntryBuf@1004 : TEMPORARY Record 383;
      CVLedgEntryBuf@1005 : Record 382;
      GenJnlLine@1008 : Record 81;
      DtldLedgEntryInserted@1009 : Boolean;
    BEGIN
      GenJnlLine := GenJnlLinePostApply;
      VendLedgEntry.TRANSFERFIELDS(VendLedgEntryPostApply);
      WITH GenJnlLine DO BEGIN
        "Source Currency Code" := VendLedgEntryPostApply."Currency Code";
        "Applies-to ID" := VendLedgEntryPostApply."Applies-to ID";

        GenJnlCheckLine.RunCheck(GenJnlLine);

        IF NextEntryNo = 0 THEN
          StartPosting(GenJnlLine)
        ELSE
          ContinuePosting(GenJnlLine);

        Vend.GET(VendLedgEntry."Vendor No.");
        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",TRUE);

        IF "Posting Group" = '' THEN BEGIN
          Vend.TESTFIELD("Vendor Posting Group");
          "Posting Group" := Vend."Vendor Posting Group";
        END;
        VendPostingGr.GET("Posting Group");
        VendPostingGr.GetPayablesAccount;

        DtldVendLedgEntry.LOCKTABLE;
        VendLedgEntry.LOCKTABLE;

        // Post the application
        VendLedgEntry.CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)",
          "Original Amount","Original Amt. (LCY)");
        CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
        ResetGenJnlLineTmp;
        ApplyVendLedgEntry(
          CVLedgEntryBuf,TempDtldCVLedgEntryBuf,GenJnlLine,Vend);
        CVLedgEntryBuf.CopyToVendLedgEntry(VendLedgEntry);
        VendLedgEntry.MODIFY(TRUE);

        // Post Dtld vendor entry
        DtldLedgEntryInserted := PostDtldVendLedgEntries(GenJnlLine,TempDtldCVLedgEntryBuf,VendPostingGr,FALSE);
        PostAppSTGenJnlLineTmp(GenJnlLine);

        CheckPostUnrealizedVAT(GenJnlLine,TRUE);

        IF DtldLedgEntryInserted THEN
          IF IsTempGLEntryBufEmpty THEN
            DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);

        FinishPosting;
      END;
    END;

    LOCAL PROCEDURE PrepareTempVendLedgEntry@119(GenJnlLine@1004 : Record 81;VAR NewCVLedgEntryBuf@1003 : Record 382;VAR TempOldVendLedgEntry@1002 : TEMPORARY Record 25;Vend@1001 : Record 23;VAR ApplyingDate@1000 : Date) : Boolean;
    VAR
      OldVendLedgEntry@1018 : Record 25;
      PurchSetup@1013 : Record 312;
      GenJnlApply@1012 : Codeunit 225;
      RemainingAmount@1009 : Decimal;
    BEGIN
      IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
        // Find the entry to be applied to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.");
        OldVendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
        OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        IF GenJnlLine."GST Vendor Type" <> GenJnlLine."GST Vendor Type"::" " THEN
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);
        OldVendLedgEntry.FINDFIRST;
        OldVendLedgEntry.TESTFIELD(Positive,NOT NewCVLedgEntryBuf.Positive);
        IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
          ApplyingDate := OldVendLedgEntry."Posting Date";
        GenJnlApply.CheckAgainstApplnCurrency(
          NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
        TempOldVendLedgEntry := OldVendLedgEntry;
        TempOldVendLedgEntry.INSERT;
      END ELSE BEGIN
        // Find the first old entry (Invoice) which the new entry (Payment) should apply to
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        OldVendLedgEntry.SETRANGE("Vendor No.",NewCVLedgEntryBuf."CV No.");
        OldVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
        OldVendLedgEntry.SETRANGE(Open,TRUE);
        OldVendLedgEntry.SETFILTER("Entry No.",'<>%1',NewCVLedgEntryBuf."Entry No.");
        IF NOT (Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") THEN
          OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

        IF Vend."Application Method" = Vend."Application Method"::"Apply to Oldest" THEN
          OldVendLedgEntry.SETFILTER("Posting Date",'..%1',GenJnlLine."Posting Date");

        // Check and Move Ledger Entries to Temp
        PurchSetup.GET;
        IF PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None THEN
          OldVendLedgEntry.SETRANGE("Currency Code",NewCVLedgEntryBuf."Currency Code");
        IF OldVendLedgEntry.FINDSET(FALSE,FALSE) THEN
          REPEAT
            IF GenJnlApply.CheckAgainstApplnCurrency(
                 NewCVLedgEntryBuf."Currency Code",OldVendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,FALSE)
            THEN BEGIN
              IF (OldVendLedgEntry."Posting Date" > ApplyingDate) AND (OldVendLedgEntry."Applies-to ID" <> '') THEN
                ApplyingDate := OldVendLedgEntry."Posting Date";
              TempOldVendLedgEntry := OldVendLedgEntry;
              TempOldVendLedgEntry.INSERT;
            END;
          UNTIL OldVendLedgEntry.NEXT = 0;

        TempOldVendLedgEntry.RESET;
        TempOldVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
        TempOldVendLedgEntry.SETRANGE(Positive,NewCVLedgEntryBuf."Remaining Amount" > 0);
        IF TempOldVendLedgEntry.FIND('-') THEN BEGIN
          RemainingAmount := NewCVLedgEntryBuf."Remaining Amount";
          TempOldVendLedgEntry.SETRANGE(Positive);
          TempOldVendLedgEntry.FIND('-');
          REPEAT
            TempOldVendLedgEntry.CALCFIELDS("Remaining Amount");
            TempOldVendLedgEntry.RecalculateAmounts(
              TempOldVendLedgEntry."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");
            IF PaymentToleranceMgt.CheckCalcPmtDiscCVVend(NewCVLedgEntryBuf,TempOldVendLedgEntry,0,FALSE,FALSE) THEN
              TempOldVendLedgEntry."Remaining Amount" -= TempOldVendLedgEntry."Remaining Pmt. Disc. Possible";
            RemainingAmount += TempOldVendLedgEntry."Remaining Amount";
          UNTIL TempOldVendLedgEntry.NEXT = 0;
          TempOldVendLedgEntry.SETRANGE(Positive,RemainingAmount < 0);
        END ELSE
          TempOldVendLedgEntry.SETRANGE(Positive);
        EXIT(TempOldVendLedgEntry.FIND('-'));
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntries@32(GenJnlLine@1000 : Record 81;VAR DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1002 : Record 93;LedgEntryInserted@1011 : Boolean) DtldLedgEntryInserted : Boolean;
    VAR
      TempInvPostBuf@1007 : TEMPORARY Record 49;
      DtldVendLedgEntry@1004 : Record 380;
      STaxApplBuffer@1500001 : ARRAY [2] OF TEMPORARY Record 16529;
      TempApplnDtldCVLedgEntryBuf@1500000 : TEMPORARY Record 383;
      AdjAmount@1012 : ARRAY [4] OF Decimal;
      DtldVendLedgEntryNoOffset@1005 : Integer;
      SaveEntryNo@1013 : Integer;
    BEGIN
      IF GenJnlLine."Account Type" <> GenJnlLine."Account Type"::Vendor THEN
        EXIT;

      IF DtldVendLedgEntry.FINDLAST THEN
        DtldVendLedgEntryNoOffset := DtldVendLedgEntry."Entry No."
      ELSE
        DtldVendLedgEntryNoOffset := 0;

      CopyApplicationEntries(DtldCVLedgEntryBuf,TempApplnDtldCVLedgEntryBuf);
      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FINDSET THEN BEGIN
        IF LedgEntryInserted THEN BEGIN
          SaveEntryNo := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
        END;
        REPEAT
          InsertDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,DtldVendLedgEntry,DtldVendLedgEntryNoOffset);

          UpdateTotalAmounts(
            TempInvPostBuf,GenJnlLine."Dimension Set ID",
            DtldCVLedgEntryBuf."Amount (LCY)",DtldCVLedgEntryBuf."Additional-Currency Amount");

          // Post automatic entries.
          IF ((DtldCVLedgEntryBuf."Amount (LCY)" <> 0) OR
              (DtldCVLedgEntryBuf."VAT Amount (LCY)" <> 0)) OR
             ((AddCurrencyCode <> '') AND (DtldCVLedgEntryBuf."Additional-Currency Amount" <> 0))
          THEN BEGIN
            PostDtldVendLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,AdjAmount);

            IF DtldCVLedgEntryBuf."Entry Type" IN
                [DtldCVLedgEntryBuf."Entry Type"::Application,
                 DtldCVLedgEntryBuf."Entry Type"::"Realized Loss",
                 DtldCVLedgEntryBuf."Entry Type"::"Realized Gain"]
            THEN
              PostServiceTaxApplication(GenJnlLine,DtldVendLedgEntry,TempApplnDtldCVLedgEntryBuf,STaxApplBuffer);
          END;
        UNTIL DtldCVLedgEntryBuf.NEXT = 0;

        PostInvoiceServTaxApplnBuf(GenJnlLine,STaxApplBuffer);
      END;

      CreateGLEntriesForTotalAmounts(
        GenJnlLine,TempInvPostBuf,AdjAmount,SaveEntryNo,VendPostingGr.GetPayablesAccount,LedgEntryInserted);

      DtldLedgEntryInserted := NOT DtldCVLedgEntryBuf.ISEMPTY;
      DtldCVLedgEntryBuf.DELETEALL;
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntry@81(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VendPostingGr@1006 : Record 93;VAR AdjAmount@1003 : ARRAY [4] OF Decimal);
    VAR
      AccNo@1005 : Code[20];
    BEGIN
      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,0,FALSE);
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,FALSE);
    END;

    LOCAL PROCEDURE PostDtldVendLedgEntryUnapply@69(GenJnlLine@1007 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;VendPostingGr@1000 : Record 93;OriginalTransactionNo@1006 : Integer);
    VAR
      AccNo@1002 : Code[20];
      AdjAmount@1003 : ARRAY [4] OF Decimal;
    BEGIN
      IF (DtldCVLedgEntryBuf."Amount (LCY)" = 0) AND
         (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) AND
         ((AddCurrencyCode = '') OR (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
      THEN
        EXIT;

      AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,TRUE);
      DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Purchase;
      PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,TRUE);
    END;

    LOCAL PROCEDURE GetDtldVendLedgEntryAccNo@56(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;VendPostingGr@1006 : Record 93;OriginalTransactionNo@1003 : Integer;Unapply@1001 : Boolean) : Code[20];
    VAR
      Currency@1008 : Record 4;
      GenPostingSetup@1007 : Record 252;
      AmountCondition@1004 : Boolean;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        AmountCondition := IsDebitAmount(DtldCVLedgEntryBuf,Unapply);
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              GetCurrency(Currency,"Currency Code");
              CheckNonAddCurrCodeOccurred(Currency.Code);
              EXIT(Currency.GetGainLossAccount(DtldCVLedgEntryBuf));
            END;
          "Entry Type"::"Payment Discount":
            EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
          "Entry Type"::"Payment Discount (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Appln. Rounding":
            EXIT(VendPostingGr.GetApplRoundingAccount(AmountCondition));
          "Entry Type"::"Correction of Remaining Amount":
            EXIT(VendPostingGr.GetRoundingAccount(AmountCondition));
          "Entry Type"::"Payment Discount Tolerance":
            CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance":
            CASE GLSetup."Payment Tolerance Posting" OF
              GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                EXIT(VendPostingGr.GetPmtToleranceAccount(AmountCondition));
              GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                EXIT(VendPostingGr.GetPmtDiscountAccount(AmountCondition));
            END;
          "Entry Type"::"Payment Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Payment Tolerance Posting" OF
                GLSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Payment Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
              CASE GLSetup."Pmt. Disc. Tolerance Posting" OF
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtToleranceAccount(AmountCondition));
                GLSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts":
                  EXIT(GenPostingSetup.GetPurchPmtDiscountAccount(AmountCondition));
              END;
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            IF Unapply THEN
              PostDtldVendVATAdjustment(GenJnlLine,DtldCVLedgEntryBuf,OriginalTransactionNo);
          ELSE
            FIELDERROR("Entry Type");
        END;
      END;
    END;

    LOCAL PROCEDURE PostDtldCVLedgEntry@15(GenJnlLine@1000 : Record 81;DtldCVLedgEntryBuf@1001 : Record 383;AccNo@1002 : Code[20];VAR AdjAmount@1004 : ARRAY [4] OF Decimal;Unapply@1005 : Boolean);
    BEGIN
      WITH DtldCVLedgEntryBuf DO
        CASE "Entry Type" OF
          "Entry Type"::"Initial Entry":
            ;
          "Entry Type"::Application:
            ;
          "Entry Type"::"Unrealized Loss",
          "Entry Type"::"Unrealized Gain",
          "Entry Type"::"Realized Loss",
          "Entry Type"::"Realized Gain":
            BEGIN
              CreateGLEntryGainLoss(GenJnlLine,AccNo,-"Amount (LCY)","Currency Code" = AddCurrencyCode,TRUE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            END;
          "Entry Type"::"Payment Discount",
          "Entry Type"::"Payment Tolerance",
          "Entry Type"::"Payment Discount Tolerance":
            BEGIN
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            END;
          "Entry Type"::"Payment Discount (VAT Excl.)",
          "Entry Type"::"Payment Tolerance (VAT Excl.)",
          "Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
            BEGIN
              IF NOT Unapply THEN
                CreateGLEntryVATCollectAdj(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf,
                  AdjAmount)
              ELSE
                CreateGLEntryVAT(
                  GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",-"VAT Amount (LCY)",DtldCVLedgEntryBuf);
            END;
          "Entry Type"::"Appln. Rounding":
            IF "Amount (LCY)" <> 0 THEN BEGIN
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",-"Additional-Currency Amount",TRUE,TRUE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",-"Additional-Currency Amount");
            END;
          "Entry Type"::"Correction of Remaining Amount":
            IF "Amount (LCY)" <> 0 THEN BEGIN
              CreateGLEntry(GenJnlLine,AccNo,-"Amount (LCY)",0,FALSE,TRUE);
              IF NOT Unapply THEN
                CollectAdjustment(AdjAmount,-"Amount (LCY)",0);
            END;
          "Entry Type"::"Payment Discount (VAT Adjustment)",
          "Entry Type"::"Payment Tolerance (VAT Adjustment)",
          "Entry Type"::"Payment Discount Tolerance (VAT Adjustment)":
            ;
          ELSE
            FIELDERROR("Entry Type");
        END;
    END;

    LOCAL PROCEDURE PostDtldCustVATAdjustment@75(GenJnlLine@1003 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1005 : Record 325;
      TaxJurisdiction@1004 : Record 320;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",OriginalTransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
        VATEntry.SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATEntry.FINDFIRST;

        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetSalesAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            ;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            BEGIN
              TESTFIELD("Tax Jurisdiction Code");
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              CreateGLEntry(
                GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostDtldVendVATAdjustment@73(GenJnlLine@1004 : Record 81;DtldCVLedgEntryBuf@1002 : Record 383;OriginalTransactionNo@1000 : Integer);
    VAR
      VATPostingSetup@1003 : Record 325;
      TaxJurisdiction@1005 : Record 320;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATEntry.RESET;
        VATEntry.SETCURRENTKEY("Transaction No.");
        VATEntry.SETRANGE("Transaction No.",OriginalTransactionNo);
        VATEntry.SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
        VATEntry.SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATEntry.FINDFIRST;

        CASE VATPostingSetup."VAT Calculation Type" OF
          VATPostingSetup."VAT Calculation Type"::"Normal VAT",
          VATPostingSetup."VAT Calculation Type"::"Full VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
            BEGIN
              VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
              VATPostingSetup.TESTFIELD("VAT Calculation Type",VATEntry."VAT Calculation Type");
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
              CreateGLEntry(
                GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),"Amount (LCY)","Additional-Currency Amount",FALSE,TRUE);
            END;
          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
            BEGIN
              TaxJurisdiction.GET("Tax Jurisdiction Code");
              IF "Use Tax" THEN BEGIN
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetRevChargeAccount(FALSE),"Amount (LCY)","Additional-Currency Amount",FALSE,TRUE);
              END ELSE
                CreateGLEntry(
                  GenJnlLine,TaxJurisdiction.GetPurchAccount(FALSE),-"Amount (LCY)",-"Additional-Currency Amount",FALSE,TRUE);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE VendUnrealizedVAT@18(GenJnlLine@1017 : Record 81;VAR VendLedgEntry2@1000 : Record 25;SettledAmount@1001 : Decimal);
    VAR
      VATEntry2@1002 : Record 254;
      TaxJurisdiction@1016 : Record 320;
      VATPostingSetup@1019 : Record 325;
      VATPart@1003 : Decimal;
      VATAmount@1004 : Decimal;
      VATBase@1005 : Decimal;
      VATAmountAddCurr@1006 : Decimal;
      VATBaseAddCurr@1007 : Decimal;
      PaidAmount@1008 : Decimal;
      TotalUnrealVATAmountFirst@1014 : Decimal;
      TotalUnrealVATAmountLast@1015 : Decimal;
      PurchVATAccount@1009 : Code[20];
      PurchVATUnrealAccount@1010 : Code[20];
      PurchReverseAccount@1011 : Code[20];
      PurchReverseUnrealAccount@1012 : Code[20];
      LastConnectionNo@1013 : Integer;
      GLEntryNo@1018 : Integer;
    BEGIN
      VATEntry2.RESET;
      VATEntry2.SETCURRENTKEY("Transaction No.");
      VATEntry2.SETRANGE("Transaction No.",VendLedgEntry2."Transaction No.");
      PaidAmount := -VendLedgEntry2."Amount (LCY)" + VendLedgEntry2."Remaining Amt. (LCY)";
      IF VATEntry2.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::Last,VATPostingSetup."Unrealized VAT Type"::"Last (Fully Paid)"]
          THEN
            TotalUnrealVATAmountLast := TotalUnrealVATAmountLast - VATEntry2."Remaining Unrealized Amount";
          IF VATPostingSetup."Unrealized VAT Type" IN
             [VATPostingSetup."Unrealized VAT Type"::First,VATPostingSetup."Unrealized VAT Type"::"First (Fully Paid)"]
          THEN
            TotalUnrealVATAmountFirst := TotalUnrealVATAmountFirst - VATEntry2."Remaining Unrealized Amount";
        UNTIL VATEntry2.NEXT = 0;
      IF VATEntry2.FINDSET THEN BEGIN
        LastConnectionNo := 0;
        REPEAT
          VATPostingSetup.GET(VATEntry2."VAT Bus. Posting Group",VATEntry2."VAT Prod. Posting Group");
          IF LastConnectionNo <> VATEntry2."Sales Tax Connection No." THEN BEGIN
            InsertSummarizedVAT(GenJnlLine);
            LastConnectionNo := VATEntry2."Sales Tax Connection No.";
          END;

          VATPart :=
            VATEntry2.GetUnRealizedVATPart(
              ROUND(SettledAmount / VendLedgEntry2.GetOriginalCurrencyFactor),
              PaidAmount,
              VendLedgEntry2."Original Amt. (LCY)",
              TotalUnrealVATAmountFirst,
              TotalUnrealVATAmountLast);

          IF VATPart > 0 THEN BEGIN
            CASE VATEntry2."VAT Calculation Type" OF
              VATEntry2."VAT Calculation Type"::"Normal VAT",
              VATEntry2."VAT Calculation Type"::"Full VAT":
                BEGIN
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Reverse Charge VAT":
                BEGIN
                  PurchVATAccount := VATPostingSetup.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := VATPostingSetup.GetPurchAccount(TRUE);
                  PurchReverseAccount := VATPostingSetup.GetRevChargeAccount(FALSE);
                  PurchReverseUnrealAccount := VATPostingSetup.GetRevChargeAccount(TRUE);
                END;
              VATEntry2."VAT Calculation Type"::"Sales Tax":
                IF (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax" THEN BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(TRUE);
                  PurchReverseAccount := TaxJurisdiction.GetRevChargeAccount(FALSE);
                  PurchReverseUnrealAccount := TaxJurisdiction.GetRevChargeAccount(TRUE);
                END ELSE BEGIN
                  TaxJurisdiction.GET(VATEntry2."Tax Jurisdiction Code");
                  PurchVATAccount := TaxJurisdiction.GetPurchAccount(FALSE);
                  PurchVATUnrealAccount := TaxJurisdiction.GetPurchAccount(TRUE);
                END;
            END;

            IF VATPart = 1 THEN BEGIN
              VATAmount := VATEntry2."Remaining Unrealized Amount";
              VATBase := VATEntry2."Remaining Unrealized Base";
              VATAmountAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Amount";
              VATBaseAddCurr := VATEntry2."Add.-Curr. Rem. Unreal. Base";
            END ELSE BEGIN
              VATAmount := ROUND(VATEntry2."Remaining Unrealized Amount" * VATPart,GLSetup."Amount Rounding Precision");
              VATBase := ROUND(VATEntry2."Remaining Unrealized Base" * VATPart,GLSetup."Amount Rounding Precision");
              VATAmountAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Amount" * VATPart,
                  AddCurrency."Amount Rounding Precision");
              VATBaseAddCurr :=
                ROUND(
                  VATEntry2."Add.-Curr. Rem. Unreal. Base" * VATPart,
                  AddCurrency."Amount Rounding Precision");
            END;

            InitGLEntryVAT(
              GenJnlLine,PurchVATUnrealAccount,PurchVATAccount,-VATAmount,-VATAmountAddCurr,FALSE);
            GLEntryNo :=
              InitGLEntryVATCopy(GenJnlLine,PurchVATAccount,PurchVATUnrealAccount,VATAmount,VATAmountAddCurr,VATEntry2);

            IF (VATEntry2."VAT Calculation Type" =
                VATEntry2."VAT Calculation Type"::"Reverse Charge VAT") OR
               ((VATEntry2."VAT Calculation Type" =
                 VATEntry2."VAT Calculation Type"::"Sales Tax") AND
                (VATEntry2.Type = VATEntry2.Type::Purchase) AND VATEntry2."Use Tax")
            THEN BEGIN
              InitGLEntryVAT(
                GenJnlLine,PurchReverseUnrealAccount,PurchReverseAccount,VATAmount,VATAmountAddCurr,FALSE);
              GLEntryNo :=
                InitGLEntryVATCopy(GenJnlLine,PurchReverseAccount,PurchReverseUnrealAccount,-VATAmount,-VATAmountAddCurr,VATEntry2);
            END;

            PostUnrealVATEntry(GenJnlLine,VATEntry2,VATAmount,VATBase,VATAmountAddCurr,VATBaseAddCurr,GLEntryNo);
          END;
        UNTIL VATEntry2.NEXT = 0;

        InsertSummarizedVAT(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PostUnrealVATEntry@5(GenJnlLine@1002 : Record 81;VAR VATEntry2@1000 : Record 254;VATAmount@1003 : Decimal;VATBase@1004 : Decimal;VATAmountAddCurr@1006 : Decimal;VATBaseAddCurr@1005 : Decimal;GLEntryNo@1001 : Integer);
    BEGIN
      VATEntry.LOCKTABLE;
      VATEntry := VATEntry2;
      VATEntry."Entry No." := NextVATEntryNo;
      VATEntry."Posting Date" := GenJnlLine."Posting Date";
      VATEntry."Document No." := GenJnlLine."Document No.";
      VATEntry."External Document No." := GenJnlLine."External Document No.";
      VATEntry."Document Type" := GenJnlLine."Document Type";
      VATEntry.Amount := VATAmount;
      VATEntry.Base := VATBase;
      VATEntry."Unrealized Amount" := 0;
      VATEntry."Unrealized Base" := 0;
      VATEntry."Remaining Unrealized Amount" := 0;
      VATEntry."Remaining Unrealized Base" := 0;
      VATEntry."Additional-Currency Amount" := VATAmountAddCurr;
      VATEntry."Additional-Currency Base" := VATBaseAddCurr;
      VATEntry."Add.-Currency Unrealized Amt." := 0;
      VATEntry."Add.-Currency Unrealized Base" := 0;
      VATEntry."Add.-Curr. Rem. Unreal. Amount" := 0;
      VATEntry."Add.-Curr. Rem. Unreal. Base" := 0;
      VATEntry."User ID" := USERID;
      VATEntry."Source Code" := GenJnlLine."Source Code";
      VATEntry."Reason Code" := GenJnlLine."Reason Code";
      VATEntry."Closed by Entry No." := 0;
      VATEntry.Closed := FALSE;
      VATEntry."Transaction No." := NextTransactionNo;
      VATEntry."Sales Tax Connection No." := NextConnectionNo;
      VATEntry."Unrealized VAT Entry No." := VATEntry2."Entry No.";
      VATEntry.INSERT(TRUE);
      GLEntryVATEntryLink.InsertLink(GLEntryNo + 1,NextVATEntryNo);
      NextVATEntryNo := NextVATEntryNo + 1;

      VATEntry2."Remaining Unrealized Amount" :=
        VATEntry2."Remaining Unrealized Amount" - VATEntry.Amount;
      VATEntry2."Remaining Unrealized Base" :=
        VATEntry2."Remaining Unrealized Base" - VATEntry.Base;
      VATEntry2."Add.-Curr. Rem. Unreal. Amount" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Amount" - VATEntry."Additional-Currency Amount";
      VATEntry2."Add.-Curr. Rem. Unreal. Base" :=
        VATEntry2."Add.-Curr. Rem. Unreal. Base" - VATEntry."Additional-Currency Base";
      VATEntry2.MODIFY;
    END;

    LOCAL PROCEDURE PostApplyCust@105(GenJnlLine@1007 : Record 81;VAR DtldCVLedgEntryBuf@1008 : Record 383;VAR OldCVLedgEntryBuf@1000 : Record 382;VAR NewCVLedgEntryBuf@1005 : Record 382;VAR NewCVLedgEntryBuf2@1013 : Record 382;Cust@1006 : Record 18;AllApplied@1500001 : Boolean;VAR AppliedAmount@1016 : Decimal;VAR PmtTolAmtToBeApplied@1010 : Decimal;TempOldCustLedgEntry@1500000 : Record 21);
    VAR
      OldCVLedgEntryBuf2@1003 : Record 382;
      OldCVLedgEntryBuf3@1002 : Record 382;
      OldRemainingAmtBeforeAppln@1001 : Decimal;
      ApplnRoundingPrecision@1004 : Decimal;
      AppliedAmountLCY@1012 : Decimal;
      OldAppliedAmount@1011 : Decimal;
    BEGIN
      OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
      OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

      // Management of posting in multiple currencies
      OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
      OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

      OldCVLedgEntryBuf2.RecalculateAmounts(
        OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

      IF NOT Cust."Block Payment Tolerance" THEN
        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

      CalcPmtDisc(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

      IF NOT Cust."Block Payment Tolerance" THEN
        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          NextTransactionNo,FirstNewVATEntryNo);

      CalcCurrencyApplnRounding(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
        GenJnlLine,ApplnRoundingPrecision);

      FindAmtForAppln(
        GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
        AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision,Cust."Nature of Services");

      PostCustServiceTaxOnAppln(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,AppliedAmountLCY);

      IF GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Invoice,GenJnlLine."Document Type"::Payment] THEN
        PostGSTSalesApplication(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,AppliedAmountLCY);
      ApplyGSTApplicationCreditMemo(NewCVLedgEntryBuf,OldCVLedgEntryBuf,
        TransactionType2::Sale,GenJnlLine."Offline Application");

      CheckRefundApplicationOnline(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf);
      CheckRefundApplicationOffline(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf);
      CheckApplofSTpureAgntOnline(GenJnlLine,OldCVLedgEntryBuf);
      CheckApplofSTpureAgntOffLine(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf);

      CalcCurrencyUnrealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

      CalcCurrencyRealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

      CalcCurrencyRealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

      CalcApplication(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
        NewCVLedgEntryBuf2,OldCVLedgEntryBuf3,AllApplied);

      IF ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Invoice]) AND
          (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Invoice]))
      THEN BEGIN
        ServTaxEntry.RESET;
        ServTaxEntry.SETFILTER("Transaction No.",'%1|%2',NewCVLedgEntryBuf."Transaction No.",OldCVLedgEntryBuf."Transaction No.");
        IF ServTaxEntry.FINDFIRST THEN
          ERROR(Text16524);
      END;

      IF NOT GenJnlLine.PoT THEN
        IF (((GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Refund,GenJnlLine."Document Type"::Payment]) AND
             AppliedPmtNotSTAdvPmt(OldCVLedgEntryBuf,NewCVLedgEntryBuf)) OR
            ServiceTaxExists(NewCVLedgEntryBuf,OldCVLedgEntryBuf))
        THEN BEGIN
          PmtTolAmt := TempOldCustLedgEntry."Accepted Payment Tolerance";
          IF PmtTolAmt < 0 THEN
            PmtTolAmt := 0;
          IF ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Payment]) AND
              (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Invoice])) OR
             ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Invoice]) AND
              (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Payment]))
          THEN BEGIN
            ServiceTaxMgt.SetTransactionNo(NextTransactionNo);
            SetDocNoPostingDate(GenJnlLine,TRUE);
            IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
              PostServiceTaxPaymentCust(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY),Cust);
              ServiceTaxMgt.ApplyCustPayment(NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY) - PmtTolAmt);
            END;
            IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
              PostServiceTaxPaymentCust(GenJnlLine,OldCVLedgEntryBuf,NewCVLedgEntryBuf,ABS(AppliedAmountLCY),Cust);
              ServiceTaxMgt.ApplyCustPayment(OldCVLedgEntryBuf,NewCVLedgEntryBuf,ABS(AppliedAmountLCY) - PmtTolAmt);
            END;
          END;
        END;
      IF (ServiceTaxAdjustmentEntry(NewCVLedgEntryBuf,OldCVLedgEntryBuf) AND
          (OldCVLedgEntryBuf."Document Type" IN
           [OldCVLedgEntryBuf."Document Type"::"Credit Memo",OldCVLedgEntryBuf."Document Type"::Invoice]))
      THEN BEGIN
        ServiceTaxMgt.SetTransactionNo(NextTransactionNo);
        SetDocNoPostingDate(GenJnlLine,TRUE);
        PostServiceTaxPaymentCust(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY),Cust);
        ServiceTaxMgt.ApplyCustPayment(NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY) - PmtTolAmt);
      END;

      IF (((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::"Credit Memo"]) AND
           (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Refund])) OR
          ((NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Refund]) AND
           (OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::"Credit Memo"]))) AND
         AppliedPmtNotSTAdvPmt(OldCVLedgEntryBuf,NewCVLedgEntryBuf)
      THEN BEGIN
        ServiceTaxMgt.SetTransactionNo(NextTransactionNo);
        SetDocNoPostingDate(GenJnlLine,TRUE);
        IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo" THEN BEGIN
          PostServiceTaxPaymentCust(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY),Cust);
          ServiceTaxMgt.ApplyCustPayment(NewCVLedgEntryBuf,OldCVLedgEntryBuf,ABS(AppliedAmountLCY) - PmtTolAmt);
        END;
        IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::"Credit Memo" THEN BEGIN
          PostServiceTaxPaymentCust(GenJnlLine,OldCVLedgEntryBuf,NewCVLedgEntryBuf,ABS(AppliedAmountLCY),Cust);
          ServiceTaxMgt.ApplyCustPayment(OldCVLedgEntryBuf,NewCVLedgEntryBuf,ABS(AppliedAmountLCY) - PmtTolAmt);
        END;
      END;

      SetDocNoPostingDate(GenJnlLine,FALSE);

      PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);

      CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);
    END;

    LOCAL PROCEDURE PostApplyVend@1500108(GenJnlLine@1007 : Record 81;VAR DtldCVLedgEntryBuf@1008 : Record 383;VAR OldCVLedgEntryBuf@1000 : Record 382;VAR NewCVLedgEntryBuf@1005 : Record 382;VAR NewCVLedgEntryBuf2@1013 : Record 382;Vend@1006 : Record 23;AllApplied@1500002 : Boolean;VAR AppliedAmount@1016 : Decimal;VAR PmtTolAmtToBeApplied@1010 : Decimal;TempOldVendLedgEntry@1500000 : Record 25);
    VAR
      OldCVLedgEntryBuf2@1003 : Record 382;
      OldCVLedgEntryBuf3@1002 : Record 382;
      RefVendLedgEntry@1500001 : Record 25;
      OldRemainingAmtBeforeAppln@1001 : Decimal;
      ApplnRoundingPrecision@1004 : Decimal;
      AppliedAmountLCY@1012 : Decimal;
      OldAppliedAmount@1011 : Decimal;
    BEGIN
      OldRemainingAmtBeforeAppln := OldCVLedgEntryBuf."Remaining Amount";
      OldCVLedgEntryBuf3 := OldCVLedgEntryBuf;

      // Management of posting in multiple currencies
      OldCVLedgEntryBuf2 := OldCVLedgEntryBuf;
      OldCVLedgEntryBuf.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      ApplnRoundingPrecision := GetApplnRoundPrecision(NewCVLedgEntryBuf,OldCVLedgEntryBuf);

      OldCVLedgEntryBuf2.RecalculateAmounts(
        OldCVLedgEntryBuf2."Currency Code",NewCVLedgEntryBuf."Currency Code",NewCVLedgEntryBuf."Posting Date");

      IF NOT Vend."Block Payment Tolerance" THEN
        CalcPmtTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          PmtTolAmtToBeApplied,NextTransactionNo,FirstNewVATEntryNo);

      CalcPmtDisc(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
        PmtTolAmtToBeApplied,ApplnRoundingPrecision,NextTransactionNo,FirstNewVATEntryNo);

      IF NOT Vend."Block Payment Tolerance" THEN
        CalcPmtDiscTolerance(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,GenJnlLine,
          NextTransactionNo,FirstNewVATEntryNo);

      CalcCurrencyApplnRounding(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf2,DtldCVLedgEntryBuf,
        GenJnlLine,ApplnRoundingPrecision);

      FindAmtForAppln(
        GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,
        AppliedAmount,AppliedAmountLCY,OldAppliedAmount,ApplnRoundingPrecision,0);

      IF GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Invoice,GenJnlLine."Document Type"::Payment] THEN
        PostGSTPurchaseApplication(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf,AppliedAmountLCY);
      ApplyGSTApplicationCreditMemo(NewCVLedgEntryBuf,OldCVLedgEntryBuf,
        TransactionType2::Purchase,GenJnlLine."Offline Application");

      CalcCurrencyUnrealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,OldRemainingAmtBeforeAppln);

      CalcCurrencyRealizedGainLoss(
        NewCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,AppliedAmount,AppliedAmountLCY);

      CalcCurrencyRealizedGainLoss(
        OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine,-OldAppliedAmount,-AppliedAmountLCY);

      CheckInputServiceDistOffline(GenJnlLine,NewCVLedgEntryBuf,OldCVLedgEntryBuf);
      CheckInputServiceDistOnline(GenJnlLine,OldCVLedgEntryBuf);

      SetDocNoPostingDate(GenJnlLine,FALSE);

      CalcApplication(
        NewCVLedgEntryBuf,OldCVLedgEntryBuf,DtldCVLedgEntryBuf,
        GenJnlLine,AppliedAmount,AppliedAmountLCY,OldAppliedAmount,
        NewCVLedgEntryBuf2,OldCVLedgEntryBuf3,AllApplied);

      PaymentToleranceMgt.CalcRemainingPmtDisc(NewCVLedgEntryBuf,OldCVLedgEntryBuf,OldCVLedgEntryBuf2,GLSetup);

      CalcAmtLCYAdjustment(OldCVLedgEntryBuf,DtldCVLedgEntryBuf,GenJnlLine);
    END;

    PROCEDURE UnapplyCustLedgEntry@109(GenJnlLine2@1004 : Record 81;DtldCustLedgEntry@1003 : Record 379);
    VAR
      Cust@1006 : Record 18;
      CustPostingGr@1019 : Record 92;
      GenJnlLine@1021 : Record 81;
      DtldCustLedgEntry2@1013 : Record 379;
      NewDtldCustLedgEntry@1012 : Record 379;
      CustLedgEntry@1011 : Record 21;
      DtldCVLedgEntryBuf@1010 : Record 383;
      VATEntry@1009 : Record 254;
      TempVATEntry2@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1002 : TEMPORARY Record 49;
      CustLedgEntry2@1500000 : Record 21;
      ServiceTaxEntry@1500001 : Record 16473;
      TempCustLedgerEntryInv@1500006 : TEMPORARY Record 21;
      TempCustLedgerEntryPay@1500005 : TEMPORARY Record 21;
      TempServiceTaxEntryInv@1500004 : TEMPORARY Record 16473;
      TempServiceTaxEntryPay@1500003 : TEMPORARY Record 16473;
      CustLedgerEntry2@1500007 : Record 21;
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1001 : Integer;
      UnapplyVATEntries@1000 : Boolean;
      OldTransactionNo@1500002 : Integer;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      GenJnlLine."Un Application Entry" := TRUE;
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Cust.GET(DtldCustLedgEntry."Customer No.");
      Cust.CheckBlockedCustOnJnls(Cust,GenJnlLine2."Document Type"::Payment,TRUE);
      CustPostingGr.GET(GenJnlLine."Posting Group");
      CustPostingGr.GetReceivablesAccount;

      VATEntry.LOCKTABLE;
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgEntry.LOCKTABLE;

      DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::Application);
      TempCustLedgerEntryPay.DELETEALL;
      TempCustLedgerEntryInv.DELETEALL;
      TempServiceTaxEntryInv.DELETEALL;
      TempServiceTaxEntryPay.DELETEALL;
      OldTransactionNo := 0;

      DtldCustLedgEntry2.RESET;
      DtldCustLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldCustLedgEntry2."Entry No." + 1;
      IF DtldCustLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldCustLedgEntry2.SETCURRENTKEY("Application No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Application No.",DtldCustLedgEntry."Application No.");
      END ELSE BEGIN
        DtldCustLedgEntry2.SETCURRENTKEY("Transaction No.","Customer No.","Entry Type");
        DtldCustLedgEntry2.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
      END;
      DtldCustLedgEntry2.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
      DtldCustLedgEntry2.SETFILTER("Entry Type",'>%1',DtldCustLedgEntry."Entry Type"::"Initial Entry");
      IF DtldCustLedgEntry."Transaction No." <> 0 THEN BEGIN
        UnapplyVATEntries := FALSE;
        DtldCustLedgEntry2.FINDSET;
        REPEAT
          DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
          IF IsVATAdjustment(DtldCustLedgEntry2."Entry Type") THEN
            UnapplyVATEntries := TRUE
        UNTIL DtldCustLedgEntry2.NEXT = 0;

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Sale,
          DtldCustLedgEntry."Customer No.",DtldCustLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        DtldCustLedgEntry2.FINDSET;
        REPEAT
          DtldCVLedgEntryBuf.INIT;
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldCustLedgEntry2);
          ProcessTempVATEntry(DtldCVLedgEntryBuf,TempVATEntry);
          DtldCVLedgEntryBuf.CopyPostingGroupsFromVATEntry(TempVATEntry);
        UNTIL DtldCustLedgEntry2.NEXT = 0;
      END;

      DtldCustLedgEntry2.FINDSET;
      REPEAT
        IF NOT GenJnlLine2.PoT THEN
          UpdateSTEntry(GenJnlLine,DtldCustLedgEntry2."Entry No.",OldTransactionNo);
        CustLedgEntry2.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.");
        IF CustLedgEntry2."Document Type" = CustLedgEntry2."Document Type"::Payment THEN
          IF CustLedgEntry2."Serv. Tax on Advance Payment" THEN BEGIN
            IF NOT TempCustLedgerEntryPay.GET(CustLedgEntry2."Entry No.") THEN BEGIN
              TempCustLedgerEntryPay.TRANSFERFIELDS(CustLedgEntry2);
              TempCustLedgerEntryPay.INSERT;
            END;
            ServiceTaxEntry.RESET;
            ServiceTaxEntry.SETRANGE("Transaction No.",TempCustLedgerEntryPay."Transaction No.");
            IF ServiceTaxEntry.FINDSET THEN
              REPEAT
                IF NOT TempServiceTaxEntryPay.GET(ServiceTaxEntry."Entry No.") THEN BEGIN
                  TempServiceTaxEntryPay.TRANSFERFIELDS(ServiceTaxEntry);
                  TempServiceTaxEntryPay.INSERT;
                END;
              UNTIL ServiceTaxEntry.NEXT = 0;
          END;
        IF CustLedgEntry2."Document Type" = CustLedgEntry2."Document Type"::Invoice THEN BEGIN
          IF NOT TempCustLedgerEntryInv.GET(CustLedgEntry2."Entry No.") THEN BEGIN
            TempCustLedgerEntryInv.TRANSFERFIELDS(CustLedgEntry2);
            TempCustLedgerEntryInv.INSERT;
          END;
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Transaction No.",TempCustLedgerEntryInv."Transaction No.");
          IF ServiceTaxEntry.FINDSET THEN
            REPEAT
              IF NOT TempServiceTaxEntryInv.GET(ServiceTaxEntry."Entry No.") THEN BEGIN
                TempServiceTaxEntryInv.TRANSFERFIELDS(ServiceTaxEntry);
                TempServiceTaxEntryInv.INSERT;
              END;
            UNTIL ServiceTaxEntry.NEXT = 0;
        END;
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      // Look one more time
      DtldCustLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldCustLedgEntry2.TESTFIELD(Unapplied,FALSE);
        InsertDtldCustLedgEntryUnapply(GenJnlLine,NewDtldCustLedgEntry,DtldCustLedgEntry2,NextDtldLedgEntryNo);
        IF DtldCustLedgEntry2."Initial Document Type" = DtldCustLedgEntry2."Initial Document Type"::"Credit Memo" THEN
          IF CustLedgerEntry2.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.") THEN
            UnApplyGSTApplicationCreditMemo(TransactionType2::Sale,CustLedgerEntry2."Document No.");
        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldCustLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        IF (DtldCustLedgEntry2."Transaction No." <> 0) AND IsVATExcluded(DtldCustLedgEntry2."Entry Type") THEN BEGIN
          TempVATEntry2.SETRANGE("VAT Bus. Posting Group",DtldCustLedgEntry2."VAT Bus. Posting Group");
          TempVATEntry2.SETRANGE("VAT Prod. Posting Group",DtldCustLedgEntry2."VAT Prod. Posting Group");
          TempVATEntry2.SETRANGE("Gen. Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
          IF NOT TempVATEntry2.FINDFIRST THEN BEGIN
            TempVATEntry2.RESET;
            IF TempVATEntry2.FINDLAST THEN
              TempVATEntry2."Entry No." := TempVATEntry2."Entry No." + 1
            ELSE
              TempVATEntry2."Entry No." := 1;
            TempVATEntry2.INIT;
            TempVATEntry2."VAT Bus. Posting Group" := DtldCustLedgEntry2."VAT Bus. Posting Group";
            TempVATEntry2."VAT Prod. Posting Group" := DtldCustLedgEntry2."VAT Prod. Posting Group";
            TempVATEntry2."Gen. Prod. Posting Group" := DtldCustLedgEntry2."Gen. Prod. Posting Group";
            VATEntry.SETCURRENTKEY("Transaction No.");
            VATEntry.SETRANGE("Transaction No.",DtldCustLedgEntry2."Transaction No.");
            VATEntry.SETRANGE("VAT Bus. Posting Group",DtldCustLedgEntry2."VAT Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group",DtldCustLedgEntry2."VAT Prod. Posting Group");
            VATEntry.SETRANGE("Gen. Prod. Posting Group",DtldCustLedgEntry2."Gen. Prod. Posting Group");
            IF VATEntry.FINDSET THEN
              REPEAT
                IF VATEntry."Unrealized VAT Entry No." = 0 THEN BEGIN
                  TempVATEntry2.Base := TempVATEntry2.Base + VATEntry.Base;
                  TempVATEntry2.Amount := TempVATEntry2.Amount + VATEntry.Amount;
                END;
              UNTIL VATEntry.NEXT = 0;
            CLEAR(VATEntry);
            TempVATEntry2.INSERT;
          END;
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        END;
        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        THEN
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        PostDtldCustLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,DtldCustLedgEntry2."Transaction No.");

        DtldCustLedgEntry2.Unapplied := TRUE;
        DtldCustLedgEntry2."Unapplied by Entry No." := NewDtldCustLedgEntry."Entry No.";
        DtldCustLedgEntry2.MODIFY;

        UpdateCustLedgEntry(DtldCustLedgEntry2);
      UNTIL DtldCustLedgEntry2.NEXT = 0;

      UnApplyGSTApplication(GenJnlLine,TransactionType2::Sale,DtldCustLedgEntry."Transaction No.");

      IF NOT CustLedgEntry2.PoT THEN
        UpdateServTaxADCustEntry(DtldCustLedgEntry."Transaction No.",
          TempServiceTaxEntryPay,TempServiceTaxEntryInv,TempCustLedgerEntryPay,TempCustLedgerEntryInv)
      ELSE
        UpdateServTaxADCustEntryPoT(GenJnlLine,DtldCustLedgEntry."Transaction No.",TempCustLedgerEntryInv,TempServiceTaxEntryPay);

      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,CustPostingGr.GetReceivablesAccount);

      IF IsTempGLEntryBufEmpty THEN
        DtldCustLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);
      FinishPosting;
    END;

    PROCEDURE UnapplyVendLedgEntry@108(GenJnlLine2@1003 : Record 81;DtldVendLedgEntry@1002 : Record 380);
    VAR
      Vend@1005 : Record 23;
      VendPostingGr@1019 : Record 93;
      GenJnlLine@1021 : Record 81;
      DtldVendLedgEntry2@1012 : Record 380;
      NewDtldVendLedgEntry@1011 : Record 380;
      VendLedgEntry@1010 : Record 25;
      DtldCVLedgEntryBuf@1009 : Record 383;
      VATEntry@1008 : Record 254;
      TempVATEntry2@1023 : TEMPORARY Record 254;
      CurrencyLCY@1024 : Record 4;
      TempInvPostBuf@1001 : TEMPORARY Record 49;
      TempVendLedgEntry@1500003 : TEMPORARY Record 25;
      TempApplnDtldCVLedgEntryBuf@1500002 : TEMPORARY Record 383;
      VendorLedgerEntry2@1500000 : Record 25;
      AdjAmount@1031 : ARRAY [4] OF Decimal;
      NextDtldLedgEntryNo@1000 : Integer;
      UnapplyVATEntries@1013 : Boolean;
    BEGIN
      GenJnlLine.TRANSFERFIELDS(GenJnlLine2);
      GenJnlLine."Un Application Entry" := TRUE;
      IF GenJnlLine."Document Date" = 0D THEN
        GenJnlLine."Document Date" := GenJnlLine."Posting Date";

      IF NextEntryNo = 0 THEN
        StartPosting(GenJnlLine)
      ELSE
        ContinuePosting(GenJnlLine);

      ReadGLSetup(GLSetup);

      Vend.GET(DtldVendLedgEntry."Vendor No.");
      Vend.CheckBlockedVendOnJnls(Vend,GenJnlLine2."Document Type"::Payment,TRUE);
      VendPostingGr.GET(GenJnlLine."Posting Group");
      VendPostingGr.GetPayablesAccount;

      VATEntry.LOCKTABLE;
      DtldVendLedgEntry.LOCKTABLE;
      VendLedgEntry.LOCKTABLE;

      DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::Application);

      DtldVendLedgEntry2.RESET;
      DtldVendLedgEntry2.FINDLAST;
      NextDtldLedgEntryNo := DtldVendLedgEntry2."Entry No." + 1;
      IF DtldVendLedgEntry."Transaction No." = 0 THEN BEGIN
        DtldVendLedgEntry2.SETCURRENTKEY("Application No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
      END ELSE BEGIN
        DtldVendLedgEntry2.SETCURRENTKEY("Transaction No.","Vendor No.","Entry Type");
        DtldVendLedgEntry2.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      END;
      DtldVendLedgEntry2.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
      DtldVendLedgEntry2.SETFILTER("Entry Type",'>%1',DtldVendLedgEntry."Entry Type"::"Initial Entry");
      IF DtldVendLedgEntry."Transaction No." <> 0 THEN BEGIN
        UnapplyVATEntries := FALSE;
        DtldVendLedgEntry2.FINDSET;
        REPEAT
          DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);
          IF IsVATAdjustment(DtldVendLedgEntry2."Entry Type") THEN
            UnapplyVATEntries := TRUE
        UNTIL DtldVendLedgEntry2.NEXT = 0;

        PostUnapply(
          GenJnlLine,VATEntry,VATEntry.Type::Purchase,
          DtldVendLedgEntry."Vendor No.",DtldVendLedgEntry."Transaction No.",UnapplyVATEntries,TempVATEntry);

        DtldVendLedgEntry2.FINDSET;
        REPEAT
          DtldCVLedgEntryBuf.INIT;
          DtldCVLedgEntryBuf.TRANSFERFIELDS(DtldVendLedgEntry2);
          ProcessTempVATEntry(DtldCVLedgEntryBuf,TempVATEntry);
        UNTIL DtldVendLedgEntry2.NEXT = 0;
      END;

      // Look one more time
      DtldVendLedgEntry2.FINDSET;
      TempInvPostBuf.DELETEALL;
      REPEAT
        DtldVendLedgEntry2.TESTFIELD(Unapplied,FALSE);
        InsertDtldVendLedgEntryUnapply(GenJnlLine,NewDtldVendLedgEntry,DtldVendLedgEntry2,NextDtldLedgEntryNo);
        IF DtldVendLedgEntry2."Initial Document Type" = DtldVendLedgEntry2."Initial Document Type"::"Credit Memo" THEN
          IF VendorLedgerEntry2.GET(DtldVendLedgEntry2."Vendor Ledger Entry No.") THEN
            UnApplyGSTApplicationCreditMemo(TransactionType2::Purchase,VendorLedgerEntry2."Document No.");
        DtldCVLedgEntryBuf.INIT;
        DtldCVLedgEntryBuf.TRANSFERFIELDS(NewDtldVendLedgEntry);
        SetAddCurrForUnapplication(DtldCVLedgEntryBuf);
        CurrencyLCY.InitRoundingPrecision;

        IF (DtldVendLedgEntry2."Transaction No." <> 0) AND IsVATExcluded(DtldVendLedgEntry2."Entry Type") THEN BEGIN
          TempVATEntry2.SETRANGE("VAT Bus. Posting Group",DtldVendLedgEntry2."VAT Bus. Posting Group");
          TempVATEntry2.SETRANGE("VAT Prod. Posting Group",DtldVendLedgEntry2."VAT Prod. Posting Group");
          TempVATEntry2.SETRANGE("Gen. Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
          IF NOT TempVATEntry2.FINDFIRST THEN BEGIN
            TempVATEntry2.RESET;
            IF TempVATEntry2.FINDLAST THEN
              TempVATEntry2."Entry No." := TempVATEntry2."Entry No." + 1
            ELSE
              TempVATEntry2."Entry No." := 1;
            TempVATEntry2.INIT;
            TempVATEntry2."VAT Bus. Posting Group" := DtldVendLedgEntry2."VAT Bus. Posting Group";
            TempVATEntry2."VAT Prod. Posting Group" := DtldVendLedgEntry2."VAT Prod. Posting Group";
            TempVATEntry2."Gen. Prod. Posting Group" := DtldVendLedgEntry2."Gen. Prod. Posting Group";
            VATEntry.SETCURRENTKEY("Transaction No.");
            VATEntry.SETRANGE("Transaction No.",DtldVendLedgEntry2."Transaction No.");
            VATEntry.SETRANGE("VAT Bus. Posting Group",DtldVendLedgEntry2."VAT Bus. Posting Group");
            VATEntry.SETRANGE("VAT Prod. Posting Group",DtldVendLedgEntry2."VAT Prod. Posting Group");
            VATEntry.SETRANGE("Gen. Prod. Posting Group",DtldVendLedgEntry2."Gen. Prod. Posting Group");
            IF VATEntry.FINDSET THEN
              REPEAT
                IF VATEntry."Unrealized VAT Entry No." = 0 THEN BEGIN
                  TempVATEntry2.Base := TempVATEntry2.Base + VATEntry.Base;
                  TempVATEntry2.Amount := TempVATEntry2.Amount + VATEntry.Amount;
                END;
              UNTIL VATEntry.NEXT = 0;
            CLEAR(VATEntry);
            TempVATEntry2.INSERT;
          END;
          DtldCVLedgEntryBuf."VAT Amount (LCY)" :=
            CalcVATAmountFromVATEntry(DtldCVLedgEntryBuf."Amount (LCY)",TempVATEntry2,CurrencyLCY);
        END;
        UpdateTotalAmounts(
          TempInvPostBuf,GenJnlLine."Dimension Set ID",DtldCVLedgEntryBuf."Amount (LCY)",
          DtldCVLedgEntryBuf."Additional-Currency Amount");

        IF NOT (DtldCVLedgEntryBuf."Entry Type" IN [
                                                    DtldCVLedgEntryBuf."Entry Type"::"Initial Entry",
                                                    DtldCVLedgEntryBuf."Entry Type"::Application])
        THEN
          CollectAdjustment(AdjAmount,
            -DtldCVLedgEntryBuf."Amount (LCY)",-DtldCVLedgEntryBuf."Additional-Currency Amount");

        PostDtldVendLedgEntryUnapply(
          GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,DtldVendLedgEntry2."Transaction No.");

        DtldVendLedgEntry2.Unapplied := TRUE;
        DtldVendLedgEntry2."Unapplied by Entry No." := NewDtldVendLedgEntry."Entry No.";
        DtldVendLedgEntry2.MODIFY;

        IF DtldVendLedgEntry2."Entry Type" = DtldVendLedgEntry2."Entry Type"::Application THEN BEGIN
        UpdateVendLedgEntry(DtldVendLedgEntry2);

          VendLedgEntry.GET(DtldVendLedgEntry2."Vendor Ledger Entry No.");
          TempApplnDtldCVLedgEntryBuf := DtldCVLedgEntryBuf;
          TempApplnDtldCVLedgEntryBuf.INSERT;
          TempVendLedgEntry := VendLedgEntry;
          TempVendLedgEntry.INSERT;
        END;
      UNTIL DtldVendLedgEntry2.NEXT = 0;
      UnApplyGSTApplication(GenJnlLine,TransactionType2::Purchase,DtldVendLedgEntry."Transaction No.");
      UnapplyServiceTax(GenJnlLine,TempApplnDtldCVLedgEntryBuf,TempVendLedgEntry,DtldVendLedgEntry);

      CreateGLEntriesForTotalAmountsUnapply(GenJnlLine,TempInvPostBuf,VendPostingGr.GetPayablesAccount);

      IF IsTempGLEntryBufEmpty THEN
        DtldVendLedgEntry.SetZeroTransNo(NextTransactionNo);
      CheckPostUnrealizedVAT(GenJnlLine,TRUE);
      FinishPosting;
    END;

    LOCAL PROCEDURE CopyApplicationEntries@1500056(VAR DtldCVLedgEntryBuf@1500000 : Record 383;VAR ApplnDtldCVLedgEntryBuf@1500001 : TEMPORARY Record 383);
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        RESET;
        SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
        SETFILTER("Entry Type",'%1|%2',"Entry Type"::Application,"Entry Type"::"Correction of Remaining Amount");
        IF FINDSET THEN
          REPEAT
            ApplnDtldCVLedgEntryBuf := DtldCVLedgEntryBuf;
            ApplnDtldCVLedgEntryBuf.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetAppliedToEntryNo@1500039(EntryNo@1500001 : Integer;VAR TempApplnDtldCVLedgEntryBuf@1500000 : Record 383) : Integer;
    BEGIN
      WITH TempApplnDtldCVLedgEntryBuf DO BEGIN
        RESET;
        SETFILTER("CV Ledger Entry No.",'<>%1',EntryNo);
        FINDFIRST;
        EXIT("CV Ledger Entry No.");
      END;
    END;

    LOCAL PROCEDURE IncludeCorrectionOfRemAmount@1500038(VAR DtldVendLedgEntry@1500001 : Record 380;VAR TempApplnDtldCVLedgEntryBuf@1500000 : Record 383);
    BEGIN
      IF DtldVendLedgEntry."Entry Type" IN
           [DtldVendLedgEntry."Entry Type"::"Realized Loss",DtldVendLedgEntry."Entry Type"::"Realized Gain"]
      THEN
        DtldVendLedgEntry."Amount (LCY)" +=
          SumCorrectionOfRemAmountLCY(DtldVendLedgEntry."Vendor Ledger Entry No.",TempApplnDtldCVLedgEntryBuf);
    END;

    LOCAL PROCEDURE SumCorrectionOfRemAmountLCY@1500057(EntryNo@1500001 : Integer;VAR TempApplnDtldCVLedgEntryBuf@1500000 : Record 383) : Decimal;
    BEGIN
      WITH TempApplnDtldCVLedgEntryBuf DO BEGIN
        RESET;
        SETCURRENTKEY("CV Ledger Entry No.","Entry Type");
        SETRANGE("CV Ledger Entry No.",EntryNo);
        SETRANGE("Entry Type","Entry Type"::"Correction of Remaining Amount");
        CALCSUMS("Amount (LCY)");
        EXIT("Amount (LCY)");
      END;
    END;

    LOCAL PROCEDURE PostServiceTaxApplication@1500048(GenJnlLine@1500010 : Record 81;DtldVendLedgEntry@1500007 : Record 380;VAR TempApplnDtldCVLedgEntryBuf@1500000 : Record 383;VAR STaxApplBuffer@1500006 : ARRAY [2] OF TEMPORARY Record 16529);
    VAR
      VendLedgEntry@1500003 : Record 25;
      AppliedToVendLedgEntry@1500008 : Record 25;
      ServiceTaxEntry@1500002 : Record 16473;
      AppliedServiceTaxEntry@1500005 : Record 16473;
      RemainingAmount@1500001 : Decimal;
      AmountToBeApplied@1500004 : Decimal;
      ApplnRatio@1500009 : Decimal;
      FullTDSAmount@1500011 : Decimal;
      AdvPmtFullTDSAmount@1500012 : Decimal;
      AppliedToDocHasServiceTax@1500013 : Boolean;
      TempSBCAmt@1500425 : Decimal;
    BEGIN
      VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
      AppliedToVendLedgEntry.GET(GetAppliedToEntryNo(DtldVendLedgEntry."Vendor Ledger Entry No.",TempApplnDtldCVLedgEntryBuf));
      IncludeCorrectionOfRemAmount(DtldVendLedgEntry,TempApplnDtldCVLedgEntryBuf);

      IF AppliedToVendLedgEntry."Serv. Tax on Advance Payment" THEN
        AdvPmtFullTDSAmount := VendLedgEntry.FullTDSAmount
      ELSE
        FullTDSAmount := VendLedgEntry.FullTDSAmount;
      VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
      ApplnRatio :=
        -DtldVendLedgEntry."Amount (LCY)" /
        (VendLedgEntry."Remaining Amt. (LCY)" - DtldVendLedgEntry."Amount (LCY)" - AdvPmtFullTDSAmount);
      IF VendLedgEntry.PoT AND VendLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
        DtldVendLedgEntry."Amount (LCY)" := -DtldVendLedgEntry."Amount (LCY)";
        FullTDSAmount := 0;
      END;

      ServiceTaxEntry.SETCURRENTKEY("Transaction No.");
      ServiceTaxEntry.SETRANGE("Transaction No.",VendLedgEntry."Transaction No.");
      IF ServiceTaxEntry.FINDLAST THEN
        ServiceTaxEntry.SETRANGE("Entry No.",0,ServiceTaxEntry."Entry No.");
      IF ServiceTaxEntry.FINDSET THEN BEGIN
        REPEAT
          IF ServiceTaxEntry.PoT OR NOT VendLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
            RemainingAmount := ROUND(ApplnRatio * ServiceTaxEntry.CalcRemainingAmount);
            IF ABS(RemainingAmount) >= ABS(DtldVendLedgEntry."Amount (LCY)" + FullTDSAmount) THEN
              AmountToBeApplied := DtldVendLedgEntry."Amount (LCY)" + FullTDSAmount
            ELSE
              AmountToBeApplied := RemainingAmount;
            IF AmountToBeApplied <> 0 THEN BEGIN
              DtldVendLedgEntry."Amount (LCY)" -= AmountToBeApplied;

              AppliedServiceTaxEntry := ServiceTaxEntry;
              AppliedServiceTaxEntry."Entry Type" := DtldVendLedgEntry."Entry Type";
              AppliedServiceTaxEntry."Posting Date" := GenJnlLine."Posting Date";
              AppliedServiceTaxEntry."Document Type" := AppliedToVendLedgEntry."Document Type";
              AppliedServiceTaxEntry."Document No." := AppliedToVendLedgEntry."Document No.";
              AppliedServiceTaxEntry."Posting Date" := DtldVendLedgEntry."Posting Date";
              AppliedServiceTaxEntry."Transaction No." := DtldVendLedgEntry."Transaction No.";
              AppliedServiceTaxEntry."Amount Including Service Tax" := AmountToBeApplied;
              ServiceTaxMgt.CalcServiceTaxAmtsToBeApplied(ServiceTaxEntry,AmountToBeApplied,AppliedServiceTaxEntry);
              AppliedServiceTaxEntry."Service Tax Base Amount" :=
                AppliedServiceTaxEntry."Amount Including Service Tax" -
                (AppliedServiceTaxEntry.FullTaxAmount + AppliedServiceTaxEntry.FullTaxSBCAmount +
                 AppliedServiceTaxEntry.KKCessAmount);

              IF (AppliedServiceTaxEntry.FullTaxAmount <> 0)  OR (AppliedServiceTaxEntry.FullTaxSBCAmount <> 0)  OR
                 (AppliedServiceTaxEntry.KKCessAmount <> 0) THEN
                IF ServiceTaxEntry.PoT THEN BEGIN
                  IF AppliedToVendLedgEntry.HasServiceTax THEN BEGIN
                    IF AppliedServiceTaxEntry."Serv. Tax on Advance Payment" THEN BEGIN
                      ServiceTaxMgt.InsertZeroAmountCorrEntry(AppliedServiceTaxEntry,ServiceTaxEntry."Entry No.");
                      FillReverseServiceTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,TRUE,STaxApplBuffer);
                    END ELSE BEGIN
                      ServiceTaxMgt.OffsetRemainingCredit(AppliedServiceTaxEntry,VendLedgEntry."Transaction No.");
                      IF AppliedToVendLedgEntry."Serv. Tax on Advance Payment" THEN
                        ServiceTaxMgt.InsertReversingEntryOnAppln(AppliedServiceTaxEntry,ServiceTaxEntry)
                      ELSE
                        ServiceTaxMgt.InsertZeroAmountCorrEntry(AppliedServiceTaxEntry,ServiceTaxEntry."Entry No.");
                      FillServiceTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,STaxApplBuffer);
                    END;
                    IF AppliedServiceTaxEntry.IsRealizedGainOrLoss THEN
                      FillGainLossServiceTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,VendLedgEntry."Currency Code",STaxApplBuffer);
                  END;
                END ELSE BEGIN
                  AppliedToDocHasServiceTax := DocumentHasServiceTax(AppliedToVendLedgEntry,ServiceTaxEntry."Reverse Charge");
                  ServiceTaxMgt.InsertServTaxEntryDetails(AppliedServiceTaxEntry,AppliedToDocHasServiceTax,FALSE);

                  IF NOT ServiceTaxEntry."Reverse Charge" THEN BEGIN
                    TempSBCAmt := AppliedServiceTaxEntry."Service Tax SBC Amount";
                    AppliedServiceTaxEntry."Service Tax SBC Amount" := 0;
                  END;

                  FillServiceTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,STaxApplBuffer);
                  FillReverseServiceTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,AppliedToDocHasServiceTax,STaxApplBuffer);

                  IF NOT ServiceTaxEntry."Reverse Charge" THEN
                    AppliedServiceTaxEntry."Service Tax SBC Amount" := TempSBCAmt;

                  IF ServiceTaxEntry."Reverse Charge" AND AppliedToVendLedgEntry."Serv. Tax on Advance Payment" THEN
                    ServiceTaxMgt.InsertReversingEntryOnAppln(AppliedServiceTaxEntry,ServiceTaxEntry);
                END;
            END;
          END;
        UNTIL (ServiceTaxEntry.NEXT = 0) OR (DtldVendLedgEntry."Amount (LCY)" = 0);
      END;
    END;

    LOCAL PROCEDURE FindAppliedVendLedgEntries@1500059(ServiceTaxEntryNo@1500003 : Integer;VAR TempVendLedgEntry@1500000 : Record 25;VAR VendLedgEntry@1500002 : Record 25;VAR AppliedToVendLedgEntry@1500001 : Record 25);
    VAR
      ServiceTaxEntry@1500004 : Record 16473;
    BEGIN
      ServiceTaxEntry.GET(ServiceTaxEntryNo);
      TempVendLedgEntry.RESET;
      TempVendLedgEntry.SETRANGE("Document Type",ServiceTaxEntry."Document Type");
      TempVendLedgEntry.SETRANGE("Document No.",ServiceTaxEntry."Document No.");
      TempVendLedgEntry.FINDFIRST;
      VendLedgEntry := TempVendLedgEntry;
      TempVendLedgEntry.RESET;
      TempVendLedgEntry.SETFILTER("Entry No.",'<>%1',VendLedgEntry."Entry No.");
      TempVendLedgEntry.FINDFIRST;
      AppliedToVendLedgEntry := TempVendLedgEntry;
    END;

    LOCAL PROCEDURE DocumentHasServiceTax@1500028(VendLedgEntry@1500000 : Record 25;ReverseCharge@1500001 : Boolean) : Boolean;
    BEGIN
      IF ReverseCharge THEN
        EXIT(VendLedgEntry.HasServiceTax);
      // Non-PoT
      EXIT(VendLedgEntry.HasServiceTax AND NOT VendLedgEntry."Serv. Tax on Advance Payment");
    END;

    LOCAL PROCEDURE TransferDetailsFields@1500001(VAR ServiceTaxEntry@1500000 : Record 16473;ServiceTaxEntryDetails@1500001 : Record 16474);
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        "Entry No." := ServiceTaxEntryDetails."Service Tax Entry No.";
        Type := ServiceTaxEntryDetails.Type;
        "Document No." := ServiceTaxEntryDetails."Document No.";
        "Posting Date" := ServiceTaxEntryDetails."Posting Date";
        "Document Type" := ServiceTaxEntryDetails."Document Type";
        "Entry Type" := ServiceTaxEntryDetails."Entry Type";
        "Serv. Tax on Advance Payment" := ServiceTaxEntryDetails."Serv. Tax on Advance Payment";
        PoT := ServiceTaxEntryDetails.PoT;
        "Reverse Charge" := ServiceTaxEntryDetails."Reverse Charge";
        IF ServiceTaxEntryDetails."Corrective Application Entry" THEN
          "Corrected Appln. Entry No." := ServiceTaxEntryDetails."Service Tax Entry No.";
        "Service Tax Amount" := ServiceTaxEntryDetails."Service Tax Amount";
        "eCess Amount" := ServiceTaxEntryDetails."Service Tax eCess Amount";
        "SHE Cess Amount" := ServiceTaxEntryDetails."Service Tax SHE Cess Amount";
        "Service Tax SBC Amount" := ServiceTaxEntryDetails."Service Tax SBC Amount";
        "Service Tax SBC %" := ServiceTaxEntryDetails."Service Tax SBC %";
        "KK Cess Amount" := ServiceTaxEntryDetails."KK Cess Amount";
        "KK Cess%" := ServiceTaxEntryDetails."KK Cess%";
        "Service Tax Base Amount" := ServiceTaxEntryDetails."Base Amount";
        IF "Reverse Charge" THEN
          "Service Tax Base Amount" -= (FullTaxAmount + FullTaxSBCAmount + KKCessAmount);
        "Amount Including Service Tax" :=
          "Service Tax Base Amount" + FullTaxAmount + FullTaxSBCAmount + KKCessAmount;
        "Service Tax Group Code" := ServiceTaxEntryDetails."Service Tax Group Code";
        "Input Service Distribution" := ServiceTaxEntryDetails."Input Service Distribution";
        "Service Tax Registration No." := ServiceTaxEntryDetails."Service Tax Registration No.";
        "Location E.C.C. No." := ServiceTaxEntryDetails."Location E.C.C. No.";
        "Service Type (Rev. Chrg.)" := ServiceTaxEntryDetails."Service Type (Rev. Chrg.)";
        "Location Code" := ServiceTaxEntryDetails."Location Code";
        "Service Tax Abatement" := ServiceTaxEntryDetails."Service Tax Abatement %";
        "ST Pure Agent" := ServiceTaxEntryDetails."ST Pure Agent";
        "Nature of Services" := ServiceTaxEntryDetails."Nature of Services";
        "Service Tax %" := ServiceTaxEntryDetails."Service Tax %";
        "Service Tax eCess %" := ServiceTaxEntryDetails."Service Tax eCess %";
        "Service Tax SHE Cess %" := ServiceTaxEntryDetails."Service Tax SHE Cess %";
        "Service Tax SBC %" := ServiceTaxEntryDetails."Service Tax SBC %";
        "KK Cess%" := ServiceTaxEntryDetails."KK Cess%";
        "Service Tax Rounding Precision" := ServiceTaxEntryDetails."Service Tax Rounding Precision";
        "Service Tax Rounding Type" := ServiceTaxEntryDetails."Service Tax Rounding Type";
        ReverseAmounts;
      END;
    END;

    LOCAL PROCEDURE UnapplyServiceTax@1500050(GenJnlLine@1500010 : Record 81;VAR TempDtldCVLedgEntryBuf@1500006 : Record 383;VAR TempVendLedgEntry@1500004 : Record 25;DtldVendLedgEntry@1500000 : Record 380);
    VAR
      VendLedgEntry@1500003 : Record 25;
      AppliedToVendLedgEntry@1500008 : Record 25;
      ServiceTaxEntryDetails@1500002 : Record 16474;
      UnappliedServiceTaxEntry@1500005 : Record 16473;
      STaxApplBuffer@1500001 : ARRAY [2] OF TEMPORARY Record 16529;
      OriginalServiceTaxEntryNo@1500007 : Integer;
      AppliedToDocHasServiceTax@1500009 : Boolean;
      TempSBCAmt@1500427 : Decimal;
    BEGIN
      ServiceTaxEntryDetails.SETCURRENTKEY("Transaction No.");
      ServiceTaxEntryDetails.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
      IF DtldVendLedgEntry."Transaction No." = 0 THEN
        ServiceTaxEntryDetails.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
      IF ServiceTaxEntryDetails.FINDSET THEN BEGIN
        REPEAT
          FindAppliedVendLedgEntries(
            ServiceTaxEntryDetails."Service Tax Entry No.",TempVendLedgEntry,
            VendLedgEntry,AppliedToVendLedgEntry);

          IF NOT VendLedgEntry."Serv. Tax on Advance Payment" OR ServiceTaxEntryDetails."Corrective Application Entry" THEN BEGIN
            IF ServiceTaxEntryDetails."Corrective Application Entry" AND (ServiceTaxEntryDetails.Amount <> 0) THEN
              UnappliedServiceTaxEntry.GET(ServiceTaxEntryDetails."Service Tax Entry No.")
            ELSE
              TransferDetailsFields(UnappliedServiceTaxEntry,ServiceTaxEntryDetails);
            UnappliedServiceTaxEntry."Posting Date" := TempDtldCVLedgEntryBuf."Posting Date";
            UnappliedServiceTaxEntry."Transaction No." := TempDtldCVLedgEntryBuf."Transaction No.";

            IF ServiceTaxEntryDetails.PoT THEN BEGIN
              IF ServiceTaxEntryDetails."Corrective Application Entry" THEN BEGIN
                IF ServiceTaxEntryDetails.Amount <> 0 THEN BEGIN
                  OriginalServiceTaxEntryNo := UnappliedServiceTaxEntry."Corrected Appln. Entry No.";

                  ServiceTaxMgt.InsertReversingEntryOnAppln(UnappliedServiceTaxEntry,UnappliedServiceTaxEntry);
                  FillServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,STaxApplBuffer);
                  IF NOT AppliedToVendLedgEntry."Serv. Tax on Advance Payment" THEN
                    FillReverseServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,AppliedToVendLedgEntry.HasServiceTax,STaxApplBuffer);

                  UnappliedServiceTaxEntry."Corrected Appln. Entry No." := OriginalServiceTaxEntryNo;
                  ServiceTaxMgt.RestorePoTRemainingCredit(UnappliedServiceTaxEntry);
                END ELSE
                  IF ServiceTaxEntryDetails."Serv. Tax on Advance Payment" THEN BEGIN
                    ServiceTaxMgt.InsertServTaxEntryDetails(UnappliedServiceTaxEntry,TRUE,TRUE);
                    FillReverseServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,TRUE,STaxApplBuffer);
                  END ELSE BEGIN
                    FillServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,STaxApplBuffer);
                    ServiceTaxMgt.RestorePoTRemainingCredit(UnappliedServiceTaxEntry);
                    ServiceTaxMgt.InsertServTaxEntryDetails(UnappliedServiceTaxEntry,TRUE,TRUE);
                  END;
                IF UnappliedServiceTaxEntry.IsRealizedGainOrLoss THEN
                  FillGainLossServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,VendLedgEntry."Currency Code",STaxApplBuffer);
              END;
            END ELSE
              IF ServiceTaxEntryDetails."Corrective Application Entry" THEN BEGIN
                IF AppliedToVendLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
                  UnappliedServiceTaxEntry."Amount Including Service Tax" -=
                    (UnappliedServiceTaxEntry.FullTaxAmount + UnappliedServiceTaxEntry.FullTaxSBCAmount +
                     UnappliedServiceTaxEntry.KKCessAmount);
                  ServiceTaxMgt.InsertReversingEntryOnAppln(UnappliedServiceTaxEntry,UnappliedServiceTaxEntry);
                END;
              END ELSE BEGIN
                AppliedToDocHasServiceTax := DocumentHasServiceTax(AppliedToVendLedgEntry,UnappliedServiceTaxEntry."Reverse Charge");

                ServiceTaxMgt.InsertServTaxEntryDetails(UnappliedServiceTaxEntry,TRUE,FALSE);

                IF NOT UnappliedServiceTaxEntry."Reverse Charge" THEN BEGIN
                  TempSBCAmt := UnappliedServiceTaxEntry."Service Tax SBC Amount";
                  UnappliedServiceTaxEntry."Service Tax SBC Amount" := 0;
                END;

                FillServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,STaxApplBuffer);
                FillReverseServiceTaxApplnBuf(GenJnlLine,UnappliedServiceTaxEntry,AppliedToDocHasServiceTax,STaxApplBuffer);
                IF NOT UnappliedServiceTaxEntry."Reverse Charge" THEN
                  UnappliedServiceTaxEntry."Service Tax SBC Amount" := TempSBCAmt;
                IF NOT AppliedToDocHasServiceTax THEN BEGIN
                  UnappliedServiceTaxEntry.ReverseAmounts;
                  ServiceTaxMgt.OffsetRemainingCredit(UnappliedServiceTaxEntry,DtldVendLedgEntry."Transaction No.");
                END;
              END;
          END;
        UNTIL ServiceTaxEntryDetails.NEXT = 0;
      END;

      PostInvoiceServTaxApplnBuf(GenJnlLine,STaxApplBuffer);
    END;

    LOCAL PROCEDURE PostUnrealVATByUnapply@106(GenJnlLine@1002 : Record 81;VATPostingSetup@1008 : Record 325;VATEntry@1005 : Record 254;NewVATEntry@1004 : Record 254);
    VAR
      VATEntry2@1003 : Record 254;
      AmountAddCurr@1007 : Decimal;
    BEGIN
      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(
        GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,TRUE),VATEntry.Amount,AmountAddCurr,FALSE,TRUE);
      CreateGLEntryFromVATEntry(
        GenJnlLine,GetPostingAccountNo(VATPostingSetup,VATEntry,FALSE),-VATEntry.Amount,-AmountAddCurr,VATEntry);

      WITH VATEntry2 DO BEGIN
        GET(VATEntry."Unrealized VAT Entry No.");
        "Remaining Unrealized Amount" := "Remaining Unrealized Amount" - NewVATEntry.Amount;
        "Remaining Unrealized Base" := "Remaining Unrealized Base" - NewVATEntry.Base;
        "Add.-Curr. Rem. Unreal. Amount" :=
          "Add.-Curr. Rem. Unreal. Amount" - NewVATEntry."Additional-Currency Amount";
        "Add.-Curr. Rem. Unreal. Base" :=
          "Add.-Curr. Rem. Unreal. Base" - NewVATEntry."Additional-Currency Base";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE PostPmtDiscountVATByUnapply@104(GenJnlLine@1003 : Record 81;ReverseChargeVATAccNo@1002 : Code[20];VATAccNo@1001 : Code[20];VATEntry@1000 : Record 254);
    VAR
      AmountAddCurr@1005 : Decimal;
    BEGIN
      AmountAddCurr := CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount);
      CreateGLEntry(GenJnlLine,ReverseChargeVATAccNo,VATEntry.Amount,AmountAddCurr,FALSE,TRUE);
      CreateGLEntry(GenJnlLine,VATAccNo,-VATEntry.Amount,-AmountAddCurr,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostUnapply@101(GenJnlLine@1007 : Record 81;VAR VATEntry@1002 : Record 254;VATEntryType@1004 : Option;BilltoPaytoNo@1001 : Code[20];TransactionNo@1003 : Integer;VAR UnapplyVATEntries@1006 : Boolean;VAR TempVATEntry@1013 : TEMPORARY Record 254);
    VAR
      VATPostingSetup@1000 : Record 325;
      VATEntry2@1009 : Record 254;
      GLEntryVATEntryLink@1011 : Record 253;
      AccNo@1010 : Code[20];
      TempVATEntryNo@1005 : Integer;
    BEGIN
      TempVATEntryNo := 1;
      VATEntry.SETCURRENTKEY(Type,"Bill-to/Pay-to No.","Transaction No.");
      VATEntry.SETRANGE(Type,VATEntryType);
      VATEntry.SETRANGE("Bill-to/Pay-to No.",BilltoPaytoNo);
      VATEntry.SETRANGE("Transaction No.",TransactionNo);
      IF VATEntry.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
          IF VATPostingSetup."Adjust for Payment Discount" AND NOT IsNotPayment(VATEntry."Document Type") AND
             (VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT")
          THEN
            UnapplyVATEntries := TRUE;
          IF UnapplyVATEntries OR (VATEntry."Unrealized VAT Entry No." <> 0) THEN BEGIN
            InsertTempVATEntry(GenJnlLine,VATEntry,TempVATEntryNo,TempVATEntry);
            IF VATEntry."Unrealized VAT Entry No." <> 0 THEN BEGIN
              VATPostingSetup.GET(VATEntry."VAT Bus. Posting Group",VATEntry."VAT Prod. Posting Group");
              IF VATPostingSetup."VAT Calculation Type" IN
                 [VATPostingSetup."VAT Calculation Type"::"Normal VAT",
                  VATPostingSetup."VAT Calculation Type"::"Full VAT"]
              THEN
                PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry)
              ELSE
                IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
                  PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(TRUE),
                    -VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",-VATEntry.Amount),FALSE,TRUE);
                  CreateGLEntry(
                    GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),
                    VATEntry.Amount,CalcAddCurrForUnapplication(VATEntry."Posting Date",VATEntry.Amount),FALSE,TRUE);
                END ELSE
                  PostUnrealVATByUnapply(GenJnlLine,VATPostingSetup,VATEntry,TempVATEntry);
              VATEntry2 := TempVATEntry;
              VATEntry2."Entry No." := NextVATEntryNo;
              VATEntry2.INSERT;
              IF VATEntry2."Unrealized VAT Entry No." = 0 THEN
                GLEntryVATEntryLink.InsertLink(NextEntryNo,VATEntry2."Entry No.");
              TempVATEntry.DELETE;
              IncrNextVATEntryNo;
            END;

            IF VATPostingSetup."Adjust for Payment Discount" AND NOT IsNotPayment(VATEntry."Document Type") AND
               (VATPostingSetup."VAT Calculation Type" =
                VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT") AND
               (VATEntry."Unrealized VAT Entry No." = 0)
            THEN BEGIN
              CASE VATEntryType OF
                VATEntry.Type::Sale:
                  AccNo := VATPostingSetup.GetSalesAccount(FALSE);
                VATEntry.Type::Purchase:
                  AccNo := VATPostingSetup.GetPurchAccount(FALSE);
              END;
              PostPmtDiscountVATByUnapply(GenJnlLine,VATPostingSetup.GetRevChargeAccount(FALSE),AccNo,VATEntry);
            END;
          END;
        UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcAddCurrForUnapplication@100(Date@1001 : Date;Amt@1002 : Decimal) : Decimal;
    VAR
      AddCurrency@1000 : Record 4;
      CurrExchRate@1003 : Record 330;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");

      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            Date,AddCurrencyCode,Amt,CurrExchRate.ExchangeRate(Date,AddCurrencyCode)),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CalcVATAmountFromVATEntry@99(AmountLCY@1000 : Decimal;VAR VATEntry@1001 : Record 254;CurrencyLCY@1003 : Record 4) VATAmountLCY : Decimal;
    BEGIN
      WITH VATEntry DO
        IF (AmountLCY = Base) OR (Base = 0) THEN BEGIN
          VATAmountLCY := Amount;
          DELETE;
        END ELSE BEGIN
          VATAmountLCY :=
            ROUND(
              Amount * AmountLCY / Base,
              CurrencyLCY."Amount Rounding Precision",
              CurrencyLCY.VATRoundingDirection);
          Base := Base - AmountLCY;
          Amount := Amount - VATAmountLCY;
          MODIFY;
        END;
    END;

    LOCAL PROCEDURE InsertDtldCustLedgEntryUnapply@91(GenJnlLine@1002 : Record 81;VAR NewDtldCustLedgEntry@1000 : Record 379;OldDtldCustLedgEntry@1001 : Record 379;VAR NextDtldLedgEntryNo@1003 : Integer);
    BEGIN
      NewDtldCustLedgEntry := OldDtldCustLedgEntry;
      WITH NewDtldCustLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldCustLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldCustLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldCustLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldCustLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldCustLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldCustLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldCustLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertDtldVendLedgEntryUnapply@90(GenJnlLine@1003 : Record 81;VAR NewDtldVendLedgEntry@1002 : Record 380;OldDtldVendLedgEntry@1001 : Record 380;VAR NextDtldLedgEntryNo@1000 : Integer);
    BEGIN
      NewDtldVendLedgEntry := OldDtldVendLedgEntry;
      WITH NewDtldVendLedgEntry DO BEGIN
        "Entry No." := NextDtldLedgEntryNo;
        "Posting Date" := GenJnlLine."Posting Date";
        "Transaction No." := NextTransactionNo;
        "Application No." := 0;
        Amount := -OldDtldVendLedgEntry.Amount;
        "Amount (LCY)" := -OldDtldVendLedgEntry."Amount (LCY)";
        "Debit Amount" := -OldDtldVendLedgEntry."Debit Amount";
        "Credit Amount" := -OldDtldVendLedgEntry."Credit Amount";
        "Debit Amount (LCY)" := -OldDtldVendLedgEntry."Debit Amount (LCY)";
        "Credit Amount (LCY)" := -OldDtldVendLedgEntry."Credit Amount (LCY)";
        Unapplied := TRUE;
        "Unapplied by Entry No." := OldDtldVendLedgEntry."Entry No.";
        "Document No." := GenJnlLine."Document No.";
        "Source Code" := GenJnlLine."Source Code";
        "User ID" := USERID;
        INSERT(TRUE);
      END;
      NextDtldLedgEntryNo := NextDtldLedgEntryNo + 1;
    END;

    LOCAL PROCEDURE InsertTempVATEntry@88(GenJnlLine@1002 : Record 81;VATEntry@1000 : Record 254;VAR TempVATEntryNo@1001 : Integer;VAR TempVATEntry@1003 : TEMPORARY Record 254);
    BEGIN
      TempVATEntry := VATEntry;
      WITH TempVATEntry DO BEGIN
        "Entry No." := TempVATEntryNo;
        TempVATEntryNo := TempVATEntryNo + 1;
        "Closed by Entry No." := 0;
        Closed := FALSE;
        Base := -VATEntry.Base;
        Amount := -VATEntry.Amount;
        "Unrealized Amount" := -VATEntry."Unrealized Amount";
        "Unrealized Base" := -VATEntry."Unrealized Base";
        "Remaining Unrealized Amount" := -VATEntry."Remaining Unrealized Amount";
        "Remaining Unrealized Base" := -VATEntry."Remaining Unrealized Base";
        "Additional-Currency Amount" := -VATEntry."Additional-Currency Amount";
        "Additional-Currency Base" := -VATEntry."Additional-Currency Base";
        "Add.-Currency Unrealized Amt." := -VATEntry."Add.-Currency Unrealized Amt.";
        "Add.-Currency Unrealized Base" := -VATEntry."Add.-Currency Unrealized Base";
        "Add.-Curr. Rem. Unreal. Amount" := -VATEntry."Add.-Curr. Rem. Unreal. Amount";
        "Add.-Curr. Rem. Unreal. Base" := -VATEntry."Add.-Curr. Rem. Unreal. Base";
        "VAT Difference" := -VATEntry."VAT Difference";
        "Add.-Curr. VAT Difference" := -VATEntry."Add.-Curr. VAT Difference";
        "Posting Date" := GenJnlLine."Posting Date";
        "Document No." := GenJnlLine."Document No.";
        "User ID" := USERID;
        "Transaction No." := NextTransactionNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ProcessTempVATEntry@87(DtldCVLedgEntryBuf@1000 : Record 383;VAR TempVATEntry@1004 : TEMPORARY Record 254);
    VAR
      VATEntrySaved@1005 : Record 254;
      VATBaseSum@1003 : ARRAY [3] OF Decimal;
      DeductedVATBase@1006 : Decimal;
      EntryNoBegin@1002 : ARRAY [3] OF Integer;
      i@1001 : Integer;
    BEGIN
      IF NOT (DtldCVLedgEntryBuf."Entry Type" IN
              [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
               DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
      THEN
        EXIT;

      DeductedVATBase := 0;
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Entry No.",0,999999);
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",DtldCVLedgEntryBuf."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",DtldCVLedgEntryBuf."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",DtldCVLedgEntryBuf."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",DtldCVLedgEntryBuf."VAT Prod. Posting Group");
      IF TempVATEntry.FINDSET THEN
        REPEAT
          CASE TRUE OF
            VATBaseSum[3] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 4;
            VATBaseSum[2] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 3;
            VATBaseSum[1] + TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 2;
            TempVATEntry.Base = DtldCVLedgEntryBuf."Amount (LCY)" - DeductedVATBase:
              i := 1;
            ELSE
              i := 0;
          END;
          IF i > 0 THEN BEGIN
            TempVATEntry.RESET;
            IF i > 1 THEN BEGIN
              IF EntryNoBegin[i - 1] < TempVATEntry."Entry No." THEN
                TempVATEntry.SETRANGE("Entry No.",EntryNoBegin[i - 1],TempVATEntry."Entry No.")
              ELSE
                TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.",EntryNoBegin[i - 1]);
            END ELSE
              TempVATEntry.SETRANGE("Entry No.",TempVATEntry."Entry No.");
            TempVATEntry.FINDSET;
            REPEAT
              VATEntrySaved := TempVATEntry;
              CASE DtldCVLedgEntryBuf."Entry Type" OF
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 3000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 2000000);
                DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                  TempVATEntry.RENAME(TempVATEntry."Entry No." + 1000000);
              END;
              TempVATEntry := VATEntrySaved;
              DeductedVATBase += TempVATEntry.Base;
            UNTIL TempVATEntry.NEXT = 0;
            FOR i := 1 TO 3 DO BEGIN
              VATBaseSum[i] := 0;
              EntryNoBegin[i] := 0;
            END;
            TempVATEntry.SETRANGE("Entry No.",0,999999);
          END ELSE BEGIN
            VATBaseSum[3] += TempVATEntry.Base;
            VATBaseSum[2] := VATBaseSum[1] + TempVATEntry.Base;
            VATBaseSum[1] := TempVATEntry.Base;
            IF EntryNoBegin[3] > 0 THEN
              EntryNoBegin[3] := TempVATEntry."Entry No.";
            EntryNoBegin[2] := EntryNoBegin[1];
            EntryNoBegin[1] := TempVATEntry."Entry No.";
          END;
        UNTIL TempVATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateCustLedgEntry@80(DtldCustLedgEntry@1000 : Record 379);
    VAR
      CustLedgEntry@1001 : Record 21;
    BEGIN
      IF DtldCustLedgEntry."Entry Type" <> DtldCustLedgEntry."Entry Type"::Application THEN
        EXIT;

      CustLedgEntry.GET(DtldCustLedgEntry."Cust. Ledger Entry No.");
      CustLedgEntry."Remaining Pmt. Disc. Possible" := DtldCustLedgEntry."Remaining Pmt. Disc. Possible";
      CustLedgEntry."Max. Payment Tolerance" := DtldCustLedgEntry."Max. Payment Tolerance";
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      IF NOT CustLedgEntry.Open THEN BEGIN
        CustLedgEntry.Open := TRUE;
        CustLedgEntry."Closed by Entry No." := 0;
        CustLedgEntry."Closed at Date" := 0D;
        CustLedgEntry."Closed by Amount" := 0;
        CustLedgEntry."Closed by Amount (LCY)" := 0;
        CustLedgEntry."Closed by Currency Code" := '';
        CustLedgEntry."Closed by Currency Amount" := 0;
        CustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
        CustLedgEntry."Pmt. Tolerance (LCY)" := 0;
        CustLedgEntry."Calculate Interest" := FALSE;
      END;
      CustLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateVendLedgEntry@76(DtldVendLedgEntry@1000 : Record 380);
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      IF DtldVendLedgEntry."Entry Type" <> DtldVendLedgEntry."Entry Type"::Application THEN
        EXIT;

      VendLedgEntry.GET(DtldVendLedgEntry."Vendor Ledger Entry No.");
      VendLedgEntry."Remaining Pmt. Disc. Possible" := DtldVendLedgEntry."Remaining Pmt. Disc. Possible";
      VendLedgEntry."Max. Payment Tolerance" := DtldVendLedgEntry."Max. Payment Tolerance";
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      IF NOT VendLedgEntry.Open THEN BEGIN
        VendLedgEntry.Open := TRUE;
        VendLedgEntry."Closed by Entry No." := 0;
        VendLedgEntry."Closed at Date" := 0D;
        VendLedgEntry."Closed by Amount" := 0;
        VendLedgEntry."Closed by Amount (LCY)" := 0;
        VendLedgEntry."Closed by Currency Code" := '';
        VendLedgEntry."Closed by Currency Amount" := 0;
        VendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
        VendLedgEntry."Pmt. Tolerance (LCY)" := 0;
      END;
      VendLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateCalcInterest@28(VAR CVLedgEntryBuf@1000 : Record 382);
    VAR
      CustLedgEntry@1001 : Record 21;
      CVLedgEntryBuf2@1002 : Record 382;
    BEGIN
      WITH CVLedgEntryBuf DO BEGIN
        IF CustLedgEntry.GET("Closed by Entry No.") THEN BEGIN
          CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
          UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
        END;
        CustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
        CustLedgEntry.SETRANGE("Closed by Entry No.","Entry No.");
        IF CustLedgEntry.FINDSET THEN
          REPEAT
            CVLedgEntryBuf2.TRANSFERFIELDS(CustLedgEntry);
            UpdateCalcInterest2(CVLedgEntryBuf,CVLedgEntryBuf2);
          UNTIL CustLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInterest2@27(VAR CVLedgEntryBuf@1000 : Record 382;VAR CVLedgEntryBuf2@1001 : Record 382);
    BEGIN
      WITH CVLedgEntryBuf DO
        IF "Due Date" < CVLedgEntryBuf2."Document Date" THEN
          "Calculate Interest" := TRUE;
    END;

    LOCAL PROCEDURE GLCalcAddCurrency@35(Amount@1003 : Decimal;AddCurrAmount@1000 : Decimal;OldAddCurrAmount@1004 : Decimal;UseAddCurrAmount@1001 : Boolean;GenJnlLine@1002 : Record 81) : Decimal;
    BEGIN
      IF (AddCurrencyCode <> '') AND
         (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None)
      THEN BEGIN
        IF (GenJnlLine."Source Currency Code" = AddCurrencyCode) AND UseAddCurrAmount THEN
          EXIT(AddCurrAmount);

        EXIT(ExchangeAmtLCYToFCY2(Amount));
      END;
      EXIT(OldAddCurrAmount);
    END;

    LOCAL PROCEDURE HandleAddCurrResidualGLEntry@38(GenJnlLine@1003 : Record 81;Amount@1000 : Decimal;AmountAddCurr@1001 : Decimal);
    VAR
      GLAcc@1002 : Record 15;
      GLEntry@1004 : Record 17;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      TotalAddCurrAmount := TotalAddCurrAmount + AmountAddCurr;
      TotalAmount := TotalAmount + Amount;

      IF (GenJnlLine."Additional-Currency Posting" = GenJnlLine."Additional-Currency Posting"::None) AND
         (TotalAmount = 0) AND (TotalAddCurrAmount <> 0) AND
         CheckNonAddCurrCodeOccurred(GenJnlLine."Source Currency Code")
      THEN BEGIN
        GLEntry.INIT;
        GLEntry.CopyFromGenJnlLine(GenJnlLine);
        GLEntry."External Document No." := '';
        GLEntry.Description :=
          COPYSTR(
            STRSUBSTNO(
              ResidualRoundingErr,
              GLEntry.FIELDCAPTION("Additional-Currency Amount")),
            1,MAXSTRLEN(GLEntry.Description));
        GLEntry."Source Type" := 0;
        GLEntry."Source No." := '';
        GLEntry."Job No." := '';
        GLEntry.Quantity := 0;
        GLEntry."Entry No." := NextEntryNo;
        GLEntry."Transaction No." := NextTransactionNo;
        IF TotalAddCurrAmount < 0 THEN
          GLEntry."G/L Account No." := AddCurrency."Residual Losses Account"
        ELSE
          GLEntry."G/L Account No." := AddCurrency."Residual Gains Account";
        GLEntry.Amount := 0;
        GLEntry."System-Created Entry" := TRUE;
        GLEntry."Additional-Currency Amount" := -TotalAddCurrAmount;
        GLAcc.GET(GLEntry."G/L Account No.");
        GLAcc.TESTFIELD(Blocked,FALSE);
        GLAcc.TESTFIELD("Account Type",GLAcc."Account Type"::Posting);
        InsertGLEntry(GenJnlLine,GLEntry,FALSE);

        CheckGLAccDimError(GenJnlLine,GLEntry."G/L Account No.");

        TotalAddCurrAmount := 0;
      END;
    END;

    LOCAL PROCEDURE CalcLCYToAddCurr@42(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      EXIT(ExchangeAmtLCYToFCY2(AmountLCY));
    END;

    LOCAL PROCEDURE GetCurrencyExchRate@39(GenJnlLine@1001 : Record 81);
    VAR
      NewCurrencyDate@1000 : Date;
    BEGIN
      IF AddCurrencyCode = '' THEN
        EXIT;

      AddCurrency.GET(AddCurrencyCode);
      AddCurrency.TESTFIELD("Amount Rounding Precision");
      AddCurrency.TESTFIELD("Residual Gains Account");
      AddCurrency.TESTFIELD("Residual Losses Account");

      NewCurrencyDate := GenJnlLine."Posting Date";
      IF GenJnlLine."Reversing Entry" THEN
        NewCurrencyDate := NewCurrencyDate - 1;
      IF (NewCurrencyDate <> CurrencyDate) OR
         UseCurrFactorOnly
      THEN BEGIN
        UseCurrFactorOnly := FALSE;
        CurrencyDate := NewCurrencyDate;
        CurrencyFactor :=
          CurrExchRate.ExchangeRate(CurrencyDate,AddCurrencyCode);
      END;
      IF (GenJnlLine."FA Add.-Currency Factor" <> 0) AND
         (GenJnlLine."FA Add.-Currency Factor" <> CurrencyFactor)
      THEN BEGIN
        UseCurrFactorOnly := TRUE;
        CurrencyDate := 0D;
        CurrencyFactor := GenJnlLine."FA Add.-Currency Factor";
      END;
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY2@40(Amount@1000 : Decimal) : Decimal;
    BEGIN
      IF UseCurrFactorOnly THEN
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(Amount,CurrencyFactor),
            AddCurrency."Amount Rounding Precision"));
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            CurrencyDate,AddCurrencyCode,Amount,CurrencyFactor),
          AddCurrency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE ConvertLCYToFCY@1500049(GenJnlLine@1500001 : Record 81;AmountLCY@1500000 : Decimal) : Decimal;
    VAR
      Currency@1500002 : Record 4;
    BEGIN
      IF GenJnlLine."Currency Code" = '' THEN
        EXIT(AmountLCY);

      Currency.GET(GenJnlLine."Currency Code");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            GenJnlLine."Posting Date",GenJnlLine."Currency Code",AmountLCY,GenJnlLine."Currency Factor"),
          Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CheckNonAddCurrCodeOccurred@54(CurrencyCode@1000 : Code[10]) : Boolean;
    BEGIN
      NonAddCurrCodeOccured :=
        NonAddCurrCodeOccured OR (AddCurrencyCode <> CurrencyCode);
      EXIT(NonAddCurrCodeOccured);
    END;

    LOCAL PROCEDURE TotalVATAmountOnJnlLines@1130(GenJnlLine@1000 : Record 81) TotalVATAmount : Decimal;
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        SETRANGE("Source Code",GenJnlLine."Source Code");
        SETRANGE("Document No.",GenJnlLine."Document No.");
        SETRANGE("Posting Date",GenJnlLine."Posting Date");
        IF FINDSET THEN
          REPEAT
            TotalVATAmount += "VAT Amount (LCY)" - "Bal. VAT Amount (LCY)";
          UNTIL NEXT = 0;
      END;
      EXIT(TotalVATAmount);
    END;

    PROCEDURE SetGLRegReverse@8(VAR ReverseGLReg@1000 : Record 45);
    BEGIN
      GLReg.Reversed := TRUE;
      ReverseGLReg := GLReg;
    END;

    LOCAL PROCEDURE InsertVATEntriesFromTemp@83(VAR DtldCVLedgEntryBuf@1000 : Record 383;GLEntry@1003 : Record 17);
    VAR
      Complete@1001 : Boolean;
      LinkedAmount@1002 : Decimal;
      FirstEntryNo@1006 : Integer;
      LastEntryNo@1004 : Integer;
    BEGIN
      TempVATEntry.RESET;
      TempVATEntry.SETRANGE("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
      TempVATEntry.SETRANGE("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
      TempVATEntry.SETRANGE("VAT Bus. Posting Group",GLEntry."VAT Bus. Posting Group");
      TempVATEntry.SETRANGE("VAT Prod. Posting Group",GLEntry."VAT Prod. Posting Group");
      CASE DtldCVLedgEntryBuf."Entry Type" OF
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
          BEGIN
            FirstEntryNo := 1000000;
            LastEntryNo := 1999999;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
          BEGIN
            FirstEntryNo := 2000000;
            LastEntryNo := 2999999;
          END;
        DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)":
          BEGIN
            FirstEntryNo := 3000000;
            LastEntryNo := 3999999;
          END;
      END;
      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      IF TempVATEntry.FINDSET THEN
        REPEAT
          VATEntry := TempVATEntry;
          VATEntry."Entry No." := NextVATEntryNo;
          VATEntry.INSERT(TRUE);
          NextVATEntryNo := NextVATEntryNo + 1;
          IF VATEntry."Unrealized VAT Entry No." = 0 THEN
            GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.",VATEntry."Entry No.");
          LinkedAmount += VATEntry.Amount + VATEntry.Base;
          Complete := LinkedAmount = -(DtldCVLedgEntryBuf."Amount (LCY)" + DtldCVLedgEntryBuf."VAT Amount (LCY)");
          LastEntryNo := TempVATEntry."Entry No.";
        UNTIL Complete OR (TempVATEntry.NEXT = 0);

      TempVATEntry.SETRANGE("Entry No.",FirstEntryNo,LastEntryNo);
      TempVATEntry.DELETEALL;
    END;

    LOCAL PROCEDURE CaptureOrRefundCreditCardPmnt@85(GenJnlLine@1000 : Record 81) : Integer;
    VAR
      DOPaymentMgt@1001 : Codeunit 825;
    BEGIN
      WITH GenJnlLine DO
        IF "Credit Card No." <> '' THEN BEGIN
          DOPaymentMgt.CheckGenJnlLine(GenJnlLine);
          CASE "Document Type" OF
            "Document Type"::Payment:
              EXIT(DOPaymentMgt.CaptureGenJnlLine(GenJnlLine));
            "Document Type"::Refund:
              EXIT(DOPaymentMgt.RefundGenJnlLine(GenJnlLine));
            ELSE
              ERROR(IncorrectDocTypeErr,"Document Type");
          END;
        END;
    END;

    LOCAL PROCEDURE UpdateDOPaymentTransactEntry@89(GenJnlLine@1004 : Record 81;CustLedgEntryNo@1003 : Integer);
    VAR
      DOPaymentMgt@1002 : Codeunit 825;
      CrCardDocumentType@1001 : 'Payment,Refund';
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF CustLedgEntryNo = 0 THEN
          EXIT;

        IF CrCardTransactionEntryNo <> 0 THEN BEGIN
          CASE "Document Type" OF
            "Document Type"::Payment:
              CrCardDocumentType := CrCardDocumentType::Payment;
            "Document Type"::Refund:
              CrCardDocumentType := CrCardDocumentType::Refund;
            ELSE
              ERROR(IncorrectDocTypeErr,"Document Type");
          END;
          DOPaymentMgt.UpdateTransactEntryAfterPost(CrCardTransactionEntryNo,CustLedgEntryNo,CrCardDocumentType);
        END;
      END;
    END;

    LOCAL PROCEDURE ABSMin@84(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) < ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    PROCEDURE ABSMax@124(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(Decimal1) > ABS(Decimal2) THEN
        EXIT(Decimal1);
      EXIT(Decimal2);
    END;

    LOCAL PROCEDURE GetApplnRoundPrecision@92(NewCVLedgEntryBuf@1002 : Record 382;OldCVLedgEntryBuf@1003 : Record 382) : Decimal;
    VAR
      ApplnCurrency@1000 : Record 4;
      CurrencyCode@1005 : Code[10];
    BEGIN
      IF NewCVLedgEntryBuf."Currency Code" <> '' THEN
        CurrencyCode := NewCVLedgEntryBuf."Currency Code"
      ELSE
        CurrencyCode := OldCVLedgEntryBuf."Currency Code";
      IF CurrencyCode = '' THEN
        EXIT(0);
      ApplnCurrency.GET(CurrencyCode);
      IF ApplnCurrency."Appln. Rounding Precision" <> 0 THEN
        EXIT(ApplnCurrency."Appln. Rounding Precision");
      EXIT(GLSetup."Appln. Rounding Precision");
    END;

    LOCAL PROCEDURE GetGLSetup@19();
    BEGIN
      IF GLSetupRead THEN
        EXIT;

      GLSetup.GET;
      GLSetupRead := TRUE;

      AddCurrencyCode := GLSetup."Additional Reporting Currency";
    END;

    LOCAL PROCEDURE ReadGLSetup@17(VAR NewGLSetup@1000 : Record 98);
    BEGIN
      NewGLSetup := GLSetup;
    END;

    LOCAL PROCEDURE CheckSalesExtDocNo@115(GenJnlLine@1001 : Record 81);
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Ext. Doc. No. Mandatory" THEN
        EXIT;

      IF GenJnlLine."Document Type" IN
         [GenJnlLine."Document Type"::Invoice,
          GenJnlLine."Document Type"::"Credit Memo",
          GenJnlLine."Document Type"::Payment,
          GenJnlLine."Document Type"::Refund,
          GenJnlLine."Document Type"::" "]
      THEN
        GenJnlLine.TESTFIELD("External Document No.");
    END;

    LOCAL PROCEDURE CheckPurchExtDocNo@107(GenJnlLine@1003 : Record 81);
    VAR
      PurchSetup@1002 : Record 312;
      OldVendLedgEntry@1001 : Record 25;
    BEGIN
      PurchSetup.GET;
      IF NOT (PurchSetup."Ext. Doc. No. Mandatory" OR (GenJnlLine."External Document No." <> '')) THEN
        EXIT;

      GenJnlLine.TESTFIELD("External Document No.");
      OldVendLedgEntry.RESET;
      OldVendLedgEntry.SETRANGE("External Document No.",GenJnlLine."External Document No.");
      OldVendLedgEntry.SETRANGE("Document Type",GenJnlLine."Document Type");
      OldVendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
      OldVendLedgEntry.SETRANGE(Reversed,FALSE);
      IF NOT OldVendLedgEntry.ISEMPTY THEN
        ERROR(
          PurchaseAlreadyExistsErr,
          GenJnlLine."Document Type",GenJnlLine."External Document No.");
    END;

    LOCAL PROCEDURE CheckDimValueForDisposal@93(GenJnlLine@1001 : Record 81;AccountNo@1002 : Code[20]);
    VAR
      DimMgt@1000 : Codeunit 408;
      TableID@1025 : ARRAY [10] OF Integer;
      AccNo@1026 : ARRAY [10] OF Code[20];
    BEGIN
      IF ((GenJnlLine.Amount = 0) OR (GenJnlLine."Amount (LCY)" = 0)) AND
         (GenJnlLine."FA Posting Type" = GenJnlLine."FA Posting Type"::Disposal)
      THEN BEGIN
        TableID[1] := DimMgt.TypeToTableID1(GenJnlLine."Account Type"::"G/L Account");
        AccNo[1] := AccountNo;
        IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
          ERROR(DimMgt.GetDimValuePostingErr);
      END;
    END;

    PROCEDURE SetOverDimErr@79();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    LOCAL PROCEDURE CheckGLAccDimError@97(GenJnlLine@1005 : Record 81;GLAccNo@1004 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit 408;
      TableID@1001 : ARRAY [10] OF Integer;
      AccNo@1000 : ARRAY [10] OF Code[20];
    BEGIN
      IF (GenJnlLine.Amount = 0) AND (GenJnlLine."Amount (LCY)" = 0) THEN
        EXIT;

      TableID[1] := DATABASE::"G/L Account";
      AccNo[1] := GLAccNo;
      IF DimMgt.CheckDimValuePosting(TableID,AccNo,GenJnlLine."Dimension Set ID") THEN
        EXIT;

      IF GenJnlLine."Line No." <> 0 THEN
        ERROR(
          DimensionUsedErr,
          GenJnlLine.TABLECAPTION,GenJnlLine."Journal Template Name",
          GenJnlLine."Journal Batch Name",GenJnlLine."Line No.",
          DimMgt.GetDimValuePostingErr);

      ERROR(DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CalculateCurrentBalance@95(AccountNo@1000 : Code[20];BalAccountNo@1001 : Code[20];InclVATAmount@1002 : Boolean;AmountLCY@1004 : Decimal;VATAmount@1005 : Decimal);
    BEGIN
      IF (AccountNo <> '') AND (BalAccountNo <> '') THEN
        EXIT;

      IF AccountNo = BalAccountNo THEN
        EXIT;

      IF NOT InclVATAmount THEN
        VATAmount := 0;

      IF BalAccountNo <> '' THEN
        CurrentBalance -= AmountLCY + VATAmount
      ELSE
        CurrentBalance += AmountLCY + VATAmount;
    END;

    LOCAL PROCEDURE GetCurrency@191(VAR Currency@1000 : Record 4;CurrencyCode@1001 : Code[10]);
    BEGIN
      IF Currency.Code <> CurrencyCode THEN BEGIN
        IF CurrencyCode = '' THEN
          CLEAR(Currency)
        ELSE
          Currency.GET(CurrencyCode);
      END;
    END;

    LOCAL PROCEDURE CollectAdjustment@181(VAR AdjAmount@1003 : ARRAY [4] OF Decimal;Amount@1004 : Decimal;AmountAddCurr@1005 : Decimal);
    VAR
      Offset@1001 : Integer;
    BEGIN
      Offset := GetAdjAmountOffset(Amount,AmountAddCurr);
      AdjAmount[Offset] += Amount;
      AdjAmount[Offset + 1] += AmountAddCurr;
    END;

    LOCAL PROCEDURE HandleDtldAdjustment@182(GenJnlLine@1008 : Record 81;VAR GLEntry@1002 : Record 17;AdjAmount@1010 : ARRAY [4] OF Decimal;TotalAmountLCY@1004 : Decimal;TotalAmountAddCurr@1005 : Decimal;GLAccNo@1007 : Code[20]);
    BEGIN
      IF NOT PostDtldAdjustment(
           GenJnlLine,GLEntry,AdjAmount,
           TotalAmountLCY,TotalAmountAddCurr,GLAccNo,
           GetAdjAmountOffset(TotalAmountLCY,TotalAmountAddCurr))
      THEN
        InitGLEntry(GenJnlLine,GLEntry,GLAccNo,TotalAmountLCY,TotalAmountAddCurr,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostDtldAdjustment@96(GenJnlLine@1006 : Record 81;VAR GLEntry@1005 : Record 17;AdjAmount@1004 : ARRAY [4] OF Decimal;TotalAmountLCY@1002 : Decimal;TotalAmountAddCurr@1001 : Decimal;GLAcc@1000 : Code[20];ArrayIndex@1007 : Integer) : Boolean;
    BEGIN
      IF (GenJnlLine."Bal. Account No." <> '') AND
         ((AdjAmount[ArrayIndex] <> 0) OR (AdjAmount[ArrayIndex + 1] <> 0)) AND
         ((TotalAmountLCY + AdjAmount[ArrayIndex] <> 0) OR (TotalAmountAddCurr + AdjAmount[ArrayIndex + 1] <> 0))
      THEN BEGIN
        CreateGLEntryBalAcc(
          GenJnlLine,GLAcc,-AdjAmount[ArrayIndex],-AdjAmount[ArrayIndex + 1],
          TRUE,TRUE,GenJnlLine."Bal. Account Type",GenJnlLine."Bal. Account No.");
        InitGLEntry(GenJnlLine,GLEntry,
          GLAcc,TotalAmountLCY + AdjAmount[ArrayIndex],
          TotalAmountAddCurr + AdjAmount[ArrayIndex + 1],TRUE,TRUE);
        AdjAmount[ArrayIndex] := 0;
        AdjAmount[ArrayIndex + 1] := 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetAdjAmountOffset@121(Amount@1000 : Decimal;AmountACY@1001 : Decimal) : Integer;
    BEGIN
      IF (Amount > 0) OR (Amount = 0) AND (AmountACY > 0) THEN
        EXIT(1);
      EXIT(3);
    END;

    PROCEDURE GetNextEntryNo@53() : Integer;
    BEGIN
      EXIT(NextEntryNo);
    END;

    PROCEDURE GetNextTransactionNo@67() : Integer;
    BEGIN
      EXIT(NextTransactionNo);
    END;

    PROCEDURE GetNextVATEntryNo@68() : Integer;
    BEGIN
      EXIT(NextVATEntryNo);
    END;

    PROCEDURE IncrNextVATEntryNo@70();
    BEGIN
      NextVATEntryNo := NextVATEntryNo + 1;
    END;

    LOCAL PROCEDURE IsNotPayment@77(DocumentType@1000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund') : Boolean;
    BEGIN
      EXIT(DocumentType IN [DocumentType::Invoice,
                            DocumentType::"Credit Memo",
                            DocumentType::"Finance Charge Memo",
                            DocumentType::Reminder]);
    END;

    LOCAL PROCEDURE IsTempGLEntryBufEmpty@44() : Boolean;
    BEGIN
      EXIT(TempGLEntryBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE IsVATAdjustment@20(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record 383;
    BEGIN
      EXIT(EntryType IN [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]);
    END;

    LOCAL PROCEDURE IsVATExcluded@7(EntryType@1000 : Option) : Boolean;
    VAR
      DtldCVLedgEntryBuf@1001 : Record 383;
    BEGIN
      EXIT(EntryType IN [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
                         DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"]);
    END;

    LOCAL PROCEDURE UpdateGLEntryNo@120(VAR GLEntryNo@1002 : Integer;VAR SavedEntryNo@1000 : Integer);
    BEGIN
      IF SavedEntryNo <> 0 THEN BEGIN
        GLEntryNo := SavedEntryNo;
        NextEntryNo := NextEntryNo - 1;
        SavedEntryNo := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateTotalAmounts@132(VAR TempInvPostBuf@1003 : TEMPORARY Record 49;DimSetID@1000 : Integer;AmountToCollect@1001 : Decimal;AmountACYToCollect@1002 : Decimal);
    BEGIN
      WITH TempInvPostBuf DO BEGIN
        SETRANGE("Dimension Set ID",DimSetID);
        IF FINDFIRST THEN BEGIN
          Amount += AmountToCollect;
          "Amount (ACY)" += AmountACYToCollect;
          MODIFY;
        END ELSE BEGIN
          INIT;
          "Dimension Set ID" := DimSetID;
          Amount := AmountToCollect;
          "Amount (ACY)" := AmountACYToCollect;
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmountsUnapply@135(GenJnlLine@1000 : Record 81;VAR TempInvPostBuf@1002 : TEMPORARY Record 49;Account@1001 : Code[20]);
    VAR
      DimMgt@1003 : Codeunit 408;
    BEGIN
      WITH TempInvPostBuf DO BEGIN
        SETRANGE("Dimension Set ID");
        IF FINDSET THEN
          REPEAT
            IF (Amount <> 0) OR
               ("Amount (ACY)" <> 0) AND (GLSetup."Additional Reporting Currency" <> '')
            THEN BEGIN
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntry(GenJnlLine,Account,Amount,"Amount (ACY)",TRUE,TRUE);
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateGLEntriesForTotalAmounts@36(GenJnlLine@1004 : Record 81;VAR InvPostBuf@1001 : Record 49;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20];LedgEntryInserted@1003 : Boolean);
    VAR
      DimMgt@1002 : Codeunit 408;
      GLEntryInserted@1000 : Boolean;
    BEGIN
      GLEntryInserted := FALSE;

      WITH InvPostBuf DO BEGIN
        RESET;
        IF FINDSET THEN
          REPEAT
            IF (Amount <> 0) OR ("Amount (ACY)" <> 0) AND (AddCurrencyCode <> '') THEN BEGIN
              DimMgt.UpdateGenJnlLineDim(GenJnlLine,"Dimension Set ID");
              CreateGLEntryForTotalAmounts(GenJnlLine,Amount,"Amount (ACY)",AdjAmountBuf,SavedEntryNo,GLAccNo);
              GLEntryInserted := TRUE;
            END;
          UNTIL NEXT = 0;
      END;

      IF NOT GLEntryInserted AND LedgEntryInserted THEN
        CreateGLEntryForTotalAmounts(GenJnlLine,0,0,AdjAmountBuf,SavedEntryNo,GLAccNo);
    END;

    LOCAL PROCEDURE CreateGLEntryForTotalAmounts@122(GenJnlLine@1004 : Record 81;Amount@1000 : Decimal;AmountACY@1001 : Decimal;AdjAmountBuf@1006 : ARRAY [4] OF Decimal;VAR SavedEntryNo@1009 : Integer;GLAccNo@1007 : Code[20]);
    VAR
      GLEntry@1005 : Record 17;
    BEGIN
      HandleDtldAdjustment(GenJnlLine,GLEntry,AdjAmountBuf,Amount,AmountACY,GLAccNo);
      GLEntry."Bal. Account Type" := GenJnlLine."Bal. Account Type";
      GLEntry."Bal. Account No." := GenJnlLine."Bal. Account No.";
      UpdateGLEntryNo(GLEntry."Entry No.",SavedEntryNo);
      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
    END;

    LOCAL PROCEDURE InitTax@1280001(GenJnlLine@1500000 : Record 81;VAR GLEntry@1500001 : Record 17);
    BEGIN
      WITH GenJnlLine DO
        IF "Gen. Posting Type" <> 0 THEN
          IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN BEGIN
            GLEntry.CopyPostingGroupsFromGenJnlLine(GenJnlLine);
            GLEntry."Tax Amount" := "Tax Amount (LCY)";
          END;
      GLEntry."Additional-Currency Amount" :=
        GLCalcAddCurrency(GLEntry.Amount,GLEntry."Additional-Currency Amount",GLEntry."Additional-Currency Amount",TRUE,GenJnlLine);
    END;

    LOCAL PROCEDURE PostTax@1280003(GenJnlLine@1500000 : Record 81;GLEntry@1500001 : Record 17);
    VAR
      TaxAmount@1000 : Decimal;
      TaxAmount2@1003 : Decimal;
      TaxBase@1001 : Decimal;
      TaxBase2@1004 : Decimal;
      SrcCurrTaxAmount@1002 : Decimal;
      SrcCurrTaxBase@1009 : Decimal;
      SrcCurrSalesTaxBaseAmount@1005 : Decimal;
    BEGIN
      WITH GenJnlLine DO BEGIN
        SrcCurrSalesTaxBaseAmount := CalcLCYToAddCurr("Tax Base Amount (LCY)");
        TaxAmount := GLEntry."Tax Amount";
        TaxBase := "Tax Base Amount (LCY)";
        TaxAmount2 := TaxAmount;
        TaxBase2 := TaxBase;
        SrcCurrTaxAmount := "Source Curr. Tax Amount";
        SrcCurrTaxBase := "Source Curr. Tax Base Amount";
        IF (TaxAmount <> 0) OR (ExecuteTaxEntry AND (TaxBase2 <> 0))THEN
          InsertTax(GenJnlLine,
            "Tax Base Amount (LCY)",TaxAmount2,TaxBase2,"Source Currency Code",
            SrcCurrSalesTaxBaseAmount,SrcCurrTaxAmount,SrcCurrTaxBase);
      END;
    END;

    LOCAL PROCEDURE InsertTax@1280002(GenJnlLine@1500002 : Record 81;GLEntryAmount@1000 : Decimal;GLEntryTaxAmount@1001 : Decimal;GLEntryBaseAmount@1002 : Decimal;SrcCurrCode@1004 : Code[10];SrcCurrGLEntryAmt@1005 : Decimal;SrcCurrGLEntryTaxAmt@1006 : Decimal;SrcCurrGLEntryBaseAmt@1007 : Decimal);
    VAR
      TaxGroup@1280002 : Record 321;
      CompanyInfo@1280001 : Record 79;
      Location@1280000 : Record 14;
      State@1500000 : Record 13762;
      TaxAreaLine@1500001 : Record 319;
      TaxJurisdiction@1500005 : Record 320;
      Cust@1500004 : Record 18;
      Vend@1500003 : Record 23;
    BEGIN
      WITH GenJnlLine DO BEGIN
        TaxEntry.INIT;
        TaxEntry."Entry No." := NextTaxEntryNo;
        TaxEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        TaxEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        TaxEntry."Tax Area Code" := "Tax Area Code";
        TaxEntry."Tax Liable" := "Tax Liable";
        TaxEntry."Tax Group Code" := "Tax Group Code";
        TaxEntry."Use Tax" := "Use Tax";
        TaxEntry."Posting Date" := "Posting Date";
        TaxEntry."Document No." := "Document No.";
        TaxEntry."External Document No." := "External Document No.";
        TaxEntry."Document Type" := "Document Type";
        TaxEntry.Type := "Gen. Posting Type";
        TaxEntry."Source Code" := "Source Code";
        TaxEntry."Reason Code" := "Reason Code";
        TaxEntry."Sell-to/Buy-from No." := "Bill-to/Pay-to No.";
        TaxEntry."User ID" := USERID;
        TaxGroup.GET("Tax Group Code");
        TaxEntry."VAT Applicable" := TaxGroup."VAT Applicable";
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          State.GET(Location."State Code");
        END ELSE BEGIN
          CompanyInfo.GET;
          State.GET(CompanyInfo.State);
        END;
        IF TaxGroup."VAT Applicable" THEN BEGIN
          IF "Gen. Posting Type" = "Gen. Posting Type"::Purchase THEN BEGIN
            Vend.GET("Bill-to/Pay-to No.");
            TaxEntry."Vendor/Customer T.I.N. No." := Vend."T.I.N. No.";
          END;
          IF "Gen. Posting Type" = "Gen. Posting Type"::Sale THEN BEGIN
            Cust.GET("Bill-to/Pay-to No.");
            TaxEntry."Vendor/Customer T.I.N. No." := Cust."T.I.N. No.";
          END;
          IF Location.GET("Location Code") THEN BEGIN
            IF Location."T.I.N. No." <> '' THEN
              TaxEntry."T.I.N. No." := Location."T.I.N. No."
          END ELSE BEGIN
            CompanyInfo.GET;
            TaxEntry."T.I.N. No." := CompanyInfo."T.I.N. No.";
          END;
          TaxEntry.TESTFIELD("T.I.N. No.");
        END;
        TaxEntry."VAT Type" := "VAT Type";
        TaxEntry."VAT Exempted Goods" := TaxDetail."VAT Exempted Goods";
        TaxEntry."Form Code" := "Form Code";
        TaxEntry."Form No." := "Form No.";
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
        IF "Gen. Posting Type" <> "Gen. Posting Type"::Settlement THEN
          TaxEntry."Tax Group Used" := TaxDetail."Tax Group Code";

        TaxEntry."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
        TaxEntry.Amount := GLEntryTaxAmount;
        TaxEntry.Base := GLEntryBaseAmount;
        IF "Gen. Posting Type" = "Gen. Posting Type"::Sale THEN BEGIN
          IF TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST THEN
            TaxEntry."Account No." := State."CST Account (Sales)"
          ELSE
            TaxEntry."Account No." := State."Tax Account (Sales)";
        END;
        IF "Gen. Posting Type" <> 0 THEN
          TaxEntry.INSERT(TRUE);
        IF AddCurrencyCode <> '' THEN
          IF AddCurrencyCode <> SrcCurrCode THEN BEGIN
            SrcCurrGLEntryAmt := ExchangeAmtLCYToFCY2(GLEntryAmount);
            SrcCurrGLEntryTaxAmt := ExchangeAmtLCYToFCY2(GLEntryTaxAmount);
            SrcCurrGLEntryBaseAmt := ExchangeAmtLCYToFCY2(GLEntryBaseAmount);
          END;
        NextTaxEntryNo := NextTaxEntryNo + 1;
        IF (GLEntryTaxAmount <> 0) OR
           ((SrcCurrGLEntryTaxAmt <> 0) AND (SrcCurrCode = AddCurrencyCode))
        THEN
          CASE "Gen. Posting Type" OF
            "Gen. Posting Type"::Purchase:
              IF ("Input/Output Tax Amount" <> 0) AND "VAT Entry" THEN BEGIN
                IF Deferment THEN BEGIN
                  State.TESTFIELD("VAT Deferred Account No.");
                  CreateGLEntry(GenJnlLine,
                    State."VAT Deferred Account No.","Input/Output Tax Amount",
                    SrcCurrGLEntryTaxAmt,TRUE,TRUE);
                END ELSE BEGIN
                  State.TESTFIELD("Tax Account (Purchases)");
                  CreateGLEntry(GenJnlLine,
                    State."Tax Account (Purchases)","Input/Output Tax Amount",
                    SrcCurrGLEntryTaxAmt,TRUE,TRUE);
                END;
              END ELSE
                IF NOT "VAT Entry" THEN BEGIN
                  State.TESTFIELD("Tax Account (Purchases)");
                  CreateGLEntry(GenJnlLine,
                    State."Tax Account (Purchases)",GLEntryTaxAmount,SrcCurrGLEntryTaxAmt,TRUE,TRUE);
                END;
            "Gen. Posting Type"::Sale:
              BEGIN
                IF TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST THEN BEGIN
                  State.TESTFIELD("CST Account (Sales)");
                  CreateGLEntry(GenJnlLine,
                    State."CST Account (Sales)",
                    GLEntryTaxAmount,
                    SrcCurrGLEntryTaxAmt,TRUE,TRUE);
                END ELSE BEGIN
                  State.TESTFIELD("Tax Account (Sales)");
                  CreateGLEntry(GenJnlLine,
                    State."Tax Account (Sales)",
                    GLEntryTaxAmount,
                    SrcCurrGLEntryTaxAmt,TRUE,TRUE);
                END;
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE PostExcise@1280029(GenJnlLine@1000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "Excise Amount" <> 0 THEN BEGIN
          IF "Gen. Posting Type" = "Gen. Posting Type"::Purchase THEN
            IF NOT "Excise Refund" THEN BEGIN
              ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
              ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
              ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date");
              IF ExcisePostingSetup.FINDLAST THEN
                IF (("Account Type" = "Account Type"::"Fixed Asset") OR
                    (("Account Type" = "Account Type"::"G/L Account") AND "Capital Item"))
                THEN BEGIN
                  ExcisePostingSetup.TESTFIELD("Cenvat Cr. Receivable Account");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Cenvat Cr. Receivable Account",
                    ROUND(("Excise Amount" - "ADC VAT Amount") / 2 + "ADC VAT Amount"),
                    ROUND(("Source Curr. Excise Amount" - "Source Curr. ADC VAT Amount") / 2 + "Source Curr. ADC VAT Amount"),
                    TRUE,"System-Created Entry");
                  InsertExciseforCapitalItems(GenJnlLine,ExcisePostingSetup."Cenvat Cr. Receivable Account",FALSE);
                  ExcisePostingSetup.TESTFIELD("Cenvat Cr. (Deferred) Account");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Cenvat Cr. (Deferred) Account",
                    "Excise Amount" - ROUND((("Excise Amount" - "ADC VAT Amount") / 2) + "ADC VAT Amount"),
                    ("Source Curr. Excise Amount" - ROUND((("Source Curr. Excise Amount" - "Source Curr. ADC VAT Amount") / 2) +
                       "Source Curr. ADC VAT Amount")),TRUE,"System-Created Entry");
                  InsertExciseforCapitalItems(GenJnlLine,ExcisePostingSetup."Cenvat Cr. (Deferred) Account",TRUE);
                END ELSE
                  IF NOT Trading THEN BEGIN
                    ExcisePostingSetup.TESTFIELD("Cenvat Cr. Receivable Account");
                    CreateGLEntry(GenJnlLine,
                      ExcisePostingSetup."Cenvat Cr. Receivable Account","Excise Amount",
                      "Source Curr. Excise Amount",TRUE,"System-Created Entry");
                    InsertExcise(GenJnlLine,ExcisePostingSetup."Cenvat Cr. Receivable Account");
                  END ELSE BEGIN
                    IF "Sales Return Order" THEN BEGIN
                      ExcisePostingSetup.TESTFIELD("Cenvat Transfered(Trading)");
                      CreateGLEntry(GenJnlLine,
                        ExcisePostingSetup."Cenvat Transfered(Trading)","Excise Amount",
                        "Source Curr. Excise Amount",TRUE,"System-Created Entry");
                    END ELSE BEGIN
                      ExcisePostingSetup.TESTFIELD("Cenvat Cr. Receivable(Trading)");
                      CreateGLEntry(GenJnlLine,
                        ExcisePostingSetup."Cenvat Cr. Receivable(Trading)","Excise Amount",
                        "Source Curr. Excise Amount",TRUE,"System-Created Entry");
                    END;
                    InsertExcise(GenJnlLine,ExcisePostingSetup."Cenvat Cr. Receivable(Trading)");
                  END;
            END ELSE BEGIN
              ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
              ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
              ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date");
              IF ExcisePostingSetup.FINDLAST THEN
                IF ("Account Type" = "Account Type"::"Fixed Asset") OR
                   ("Account Type" = "Account Type"::"G/L Account")
                THEN BEGIN
                  ExcisePostingSetup.TESTFIELD("Excise Refund Account");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Excise Refund Account","Excise Amount","Source Curr. Excise Amount",
                    TRUE,"System-Created Entry");
                END;
            END;
          IF "Gen. Posting Type" = "Gen. Posting Type"::Sale THEN BEGIN
            ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
            ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
            ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date");
            IF ExcisePostingSetup.FINDLAST THEN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                IF ("Account Type" = "Account Type"::"Fixed Asset") OR (("Account Type" = "Account Type"::"G/L Account") AND
                                                                        "Capital Item" AND
                                                                        ("Sale Return Type" <>
                                                                         "Sale Return Type"::"Sales  Cancellation"))
                THEN BEGIN
                  ExcisePostingSetup.TESTFIELD("Excise Payable Account");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Excise Payable Account",
                    ROUND(("Excise Amount" - "ADC VAT Amount") / 2 + "ADC VAT Amount"),
                    ROUND(("Source Curr. Excise Amount" - "Source Curr. ADC VAT Amount") / 2 + "Source Curr. ADC VAT Amount"),
                    TRUE,"System-Created Entry");
                  InsertExciseforCapitalItems(GenJnlLine,ExcisePostingSetup."Excise Payable Account",FALSE);
                  ExcisePostingSetup.TESTFIELD("Cenvat Cr. (Deferred) Account");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Cenvat Cr. (Deferred) Account",
                    "Excise Amount" - ROUND((("Excise Amount" - "ADC VAT Amount") / 2) + "ADC VAT Amount"),
                    ("Source Curr. Excise Amount" - ROUND((("Source Curr. Excise Amount" - "Source Curr. ADC VAT Amount") / 2) +
                       "Source Curr. ADC VAT Amount")),TRUE,"System-Created Entry");
                  InsertExciseforCapitalItems(GenJnlLine,ExcisePostingSetup."Cenvat Cr. (Deferred) Account",TRUE);
                END ELSE
                  IF NOT Trading THEN BEGIN
                    ExcisePostingSetup.TESTFIELD("Excise Payable Account");
                    CreateGLEntry(GenJnlLine,
                      ExcisePostingSetup."Excise Payable Account","Excise Amount","Source Curr. Excise Amount",
                      TRUE,"System-Created Entry");
                    InsertExcise(GenJnlLine,ExcisePostingSetup."Excise Payable Account");
                  END ELSE BEGIN
                    ExcisePostingSetup.TESTFIELD("Cenvat Transfered(Trading)");
                    CreateGLEntry(GenJnlLine,
                      ExcisePostingSetup."Cenvat Transfered(Trading)","Excise Amount","Source Curr. Excise Amount",
                      TRUE,"System-Created Entry");
                    InsertExcise(GenJnlLine,ExcisePostingSetup."Cenvat Transfered(Trading)");
                  END;
              END ELSE
                IF NOT Trading THEN BEGIN
                  ExcisePostingSetup.TESTFIELD("Excise Payable Account");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Excise Payable Account","Excise Amount","Source Curr. Excise Amount",
                    TRUE,"System-Created Entry");
                  InsertExcise(GenJnlLine,ExcisePostingSetup."Excise Payable Account");
                END ELSE BEGIN
                  ExcisePostingSetup.TESTFIELD("Cenvat Transfered(Trading)");
                  CreateGLEntry(GenJnlLine,
                    ExcisePostingSetup."Cenvat Transfered(Trading)","Excise Amount","Source Curr. Excise Amount",
                    TRUE,"System-Created Entry");
                  InsertExcise(GenJnlLine,ExcisePostingSetup."Cenvat Transfered(Trading)");
                END;
          END;
        END;
    END;

    LOCAL PROCEDURE PostCenvat@1280028(GenJnlLine@1280004 : Record 81);
    VAR
      ApplicationMgt@1500000 : Codeunit 1;
      SourceCurrExciseAmt@1280001 : Decimal;
      ExciseAmt@1280005 : Decimal;
      DateFilter@1500001 : Text[30];
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF (ExciseCenvatClaim."RG 23 A PART II BED Amount" <> 0) OR (ExciseCenvatClaim."RG 23A PART II AED(GSI) Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23A PART II AED(TTA) Amount" <> 0) OR (ExciseCenvatClaim."RG 23 A PART II SED Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 A PART II SAED Amount" <> 0) OR (ExciseCenvatClaim."RG 23 A PART II NCCD Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 A PART II CESS Amount" <> 0) OR (ExciseCenvatClaim."RG 23 A PART II eCess Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 A Part II ADET Amount" <> 0) OR (ExciseCenvatClaim."RG 23 A Part II ADE Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 A PART II ADC VAT Amount" <> 0) OR (ExciseCenvatClaim."RG 23 A Part II SHECess Amount" <> 0)
        THEN BEGIN
          ExciseAmt := ROUND(
              ExciseCenvatClaim."RG 23 A PART II BED Amount" + ExciseCenvatClaim."RG 23A PART II AED(GSI) Amount" +
              ExciseCenvatClaim."RG 23A PART II AED(TTA) Amount" + ExciseCenvatClaim."RG 23 A PART II SED Amount" +
              ExciseCenvatClaim."RG 23 A PART II SAED Amount" + ExciseCenvatClaim."RG 23 A PART II NCCD Amount" +
              ExciseCenvatClaim."RG 23 A PART II CESS Amount" + ExciseCenvatClaim."RG 23 A PART II eCess Amount" +
              ExciseCenvatClaim."RG 23 A Part II ADET Amount" + ExciseCenvatClaim."RG 23 A Part II ADE Amount" +
              ExciseCenvatClaim."RG 23 A PART II ADC VAT Amount" + ExciseCenvatClaim."RG 23 A Part II SHECess Amount");
          GetGLSetup;
          IF AddCurrencyCode <> '' THEN
            SourceCurrExciseAmt := CalcLCYToAddCurr(ExciseAmt);
          ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
          ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
          ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date");
          IF ExcisePostingSetup.FINDLAST THEN BEGIN
            ExcisePostingSetup.TESTFIELD("Cenvat Cr. Receivable Account");
            CreateGLEntry(GenJnlLine,
              ExcisePostingSetup."Cenvat Cr. Receivable Account",-ExciseAmt,-SourceCurrExciseAmt,TRUE,"System-Created Entry");
          END;
        END;
        IF (ExciseCenvatClaim."RG 23 C PART II BED Amount" <> 0) OR (ExciseCenvatClaim."RG 23C PART II AED(GSI) Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23C PART II AED(TTA) Amount" <> 0) OR (ExciseCenvatClaim."RG 23 C PART II SED Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 C PART II SAED Amount" <> 0) OR (ExciseCenvatClaim."RG 23 C PART II NCCD Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 C PART II CESS Amount" <> 0) OR (ExciseCenvatClaim."RG 23 C PART II eCess Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 C Part II ADET Amount" <> 0) OR (ExciseCenvatClaim."RG 23 C Part II ADE Amount" <> 0) OR
           (ExciseCenvatClaim."RG 23 C PART II ADC VAT Amount" <> 0) OR (ExciseCenvatClaim."RG 23 C Part II SHECess Amount" <> 0)
        THEN BEGIN
          ExciseAmt := ROUND(
              ExciseCenvatClaim."RG 23 C PART II BED Amount" + ExciseCenvatClaim."RG 23C PART II AED(GSI) Amount" +
              ExciseCenvatClaim."RG 23C PART II AED(TTA) Amount" + ExciseCenvatClaim."RG 23 C PART II SED Amount" +
              ExciseCenvatClaim."RG 23 C PART II SAED Amount" + ExciseCenvatClaim."RG 23 C PART II CESS Amount" +
              ExciseCenvatClaim."RG 23 C PART II NCCD Amount" + ExciseCenvatClaim."RG 23 C PART II eCess Amount" +
              ExciseCenvatClaim."RG 23 C Part II ADET Amount" + ExciseCenvatClaim."RG 23 C Part II ADE Amount" +
              ExciseCenvatClaim."RG 23 C PART II ADC VAT Amount" + ExciseCenvatClaim."RG 23 C Part II SHECess Amount");
          GetGLSetup;
          IF AddCurrencyCode <> '' THEN
            SourceCurrExciseAmt := CalcLCYToAddCurr(ExciseAmt);
          ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
          ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
          ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date");
          IF ExcisePostingSetup.FINDLAST THEN BEGIN
            ExcisePostingSetup.TESTFIELD("Cenvat Cr. Receivable Account");
            CreateGLEntry(GenJnlLine,
              ExcisePostingSetup."Cenvat Cr. Receivable Account",-ExciseAmt,-SourceCurrExciseAmt,TRUE,"System-Created Entry");
          END;
        END;

        IF (ExciseCenvatClaim."PLA BED Amount" <> 0) OR (ExciseCenvatClaim."PLA AED(GSI) Amount" <> 0) OR
           (ExciseCenvatClaim."PLA AED(TTA) Amount" <> 0) OR (ExciseCenvatClaim."PLA SED Amount" <> 0) OR
           (ExciseCenvatClaim."PLA SAED Amount" <> 0) OR (ExciseCenvatClaim."PLA CESS Amount" <> 0) OR
           (ExciseCenvatClaim."PLA NCCD Amount" <> 0) OR (ExciseCenvatClaim."PLA eCess Amount" <> 0) OR
           (ExciseCenvatClaim."PLA ADET Amount" <> 0) OR (ExciseCenvatClaim."PLA Excise Charge Amount" <> 0) OR
           (ExciseCenvatClaim."PLA ADE Amount" <> 0) OR (ExciseCenvatClaim."PLA SHE Cess Amount" <> 0)
        THEN BEGIN
          ExciseAmt := ROUND(
              ExciseCenvatClaim."PLA BED Amount" + ExciseCenvatClaim."PLA AED(GSI) Amount" + ExciseCenvatClaim."PLA AED(TTA) Amount" +
              ExciseCenvatClaim."PLA SED Amount" + ExciseCenvatClaim."PLA SAED Amount" + ExciseCenvatClaim."PLA CESS Amount" +
              ExciseCenvatClaim."PLA NCCD Amount" + ExciseCenvatClaim."PLA eCess Amount" + ExciseCenvatClaim."PLA ADET Amount" +
              ExciseCenvatClaim."PLA Excise Charge Amount" +
              ExciseCenvatClaim."PLA ADE Amount" + ExciseCenvatClaim."PLA SHE Cess Amount")
            ;
          GetGLSetup;
          IF AddCurrencyCode <> '' THEN
            SourceCurrExciseAmt := CalcLCYToAddCurr(ExciseAmt);
          GLSetup.TESTFIELD("PLA Account");
          CreateGLEntry(GenJnlLine,
            GLSetup."PLA Account",-ExciseAmt,-SourceCurrExciseAmt,TRUE,"System-Created Entry");
        END;

        IF ((ExciseCenvatClaim."ST BED Amount" <> 0) OR (ExciseCenvatClaim."ST AED(GSI) Amount" <> 0) OR
            (ExciseCenvatClaim."ST AED(TTA) Amount" <> 0) OR (ExciseCenvatClaim."ST SED Amount" <> 0) OR
            (ExciseCenvatClaim."ST SAED Amount" <> 0) OR (ExciseCenvatClaim."ST NCCD Amount" <> 0) OR
            (ExciseCenvatClaim."ST eCESS Amount" <> 0) OR (ExciseCenvatClaim."ST ADET Amount" <> 0) OR
            (ExciseCenvatClaim."ST ADE Amount" <> 0) OR (ExciseCenvatClaim."ST SHECess Amount" <> 0))
        THEN BEGIN
          PostSTReceivableAccount(GenJnlLine);
          DateFilter := FORMAT(0D) + '..' + FORMAT("Posting Date");
          IF ApplicationMgt.MakeDateFilter(DateFilter) = 0 THEN;
          IF SalesDocumentNo <> '' THEN
            ServiceTaxMgt.SetSalesHeaderNo(SalesDocumentNo);
            ServiceTaxMgt.UpdServiceTaxAvailCrEntries("Document No.","Posting Date",DateFilter,GenJnlLine);
        END;

        InsertExcise(GenJnlLine,ExcisePostingSetup."Cenvat Cr. Receivable Account");
      END;
    END;

    LOCAL PROCEDURE InsertExcise@1280027(GenJnlLine@1280000 : Record 81;AccNo@1280001 : Code[20]);
    VAR
      SalesInvLine@1500000 : Record 113;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "Excise Amount" = 0 THEN
          EXIT;
        SalesInvLine.RESET;
        SalesInvLine.SETCURRENTKEY("Document No.","Direct Debit To PLA / RG","Excise Prod. Posting Group",Type,"No.");
        SalesInvLine.SETRANGE("Document No.","Document No.");
        SalesInvLine.SETRANGE("Direct Debit To PLA / RG",TRUE);
        SalesInvLine.SETFILTER(Type,'%1|%2',SalesInvLine.Type::Item,SalesInvLine.Type::"Fixed Asset");
        SalesInvLine.SETRANGE("No.","Item No.");
        SalesInvLine.CALCSUMS("BED Amount","AED(GSI) Amount","SED Amount","SAED Amount","CESS Amount","NCCD Amount",
          "eCess Amount","ADET Amount","ADE Amount","AED(TTA) Amount","ADC VAT Amount","SHE Cess Amount");

        TaxJnlLine.RESET;
        TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
        TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
        TaxJnlLine.SETRANGE("Line No.","Line No.");
        TaxJnlLine.SETRANGE("Document No.","Document No.");
        IF SalesDocumentNo <> '' THEN
          TaxJnlLine.SETRANGE("Document No.",SalesDocumentNo);
        IF TaxJnlLine.FINDFIRST THEN;

        ExciseEntry.INIT;
        ExciseEntry."Entry No." := NextExciseEntryNo;
        ExciseEntry.CopyFromGenJnlLine(GenJnlLine);
        ExciseEntry."Transaction No." := NextTransactionNo;
        ExciseEntry.Amount := "Excise Amount";
        ExciseEntry."BED %" := "BED %";
        ExciseEntry."Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
        ExciseEntry.Base := "Excise Base Amount";
        ExciseEntry.Quantity := Quantity;
        ExciseEntry."Account No." := AccNo;
        ExciseEntry."BED Amount" := TaxJnlLine."BED Amount" ;
        ExciseEntry."AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount";
        ExciseEntry."AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount";
        ExciseEntry."SED Amount" := TaxJnlLine."SED Amount" ;
        ExciseEntry."SAED Amount" := TaxJnlLine."SAED Amount";
        ExciseEntry."NCCD Amount" := TaxJnlLine."NCCD Amount";
        ExciseEntry."CESS Amount" := TaxJnlLine."CESS Amount";
        ExciseEntry."eCess Amount" := TaxJnlLine."eCess Amount";
        ExciseEntry."SHE Cess Amount" := TaxJnlLine."SHE Cess Amount";
        ExciseEntry."ADET Amount" := TaxJnlLine."ADET Amount";
        ExciseEntry."ADE Amount" := TaxJnlLine."ADE Amount";
        ExciseEntry."ADC VAT Amount" := TaxJnlLine."ADC VAT Amount";
        ExciseEntry."Direct Debit To PLA/RG Amount" := SalesInvLine."BED Amount" + SalesInvLine."AED(GSI) Amount" +
          SalesInvLine."SED Amount" + SalesInvLine."SAED Amount" + SalesInvLine."CESS Amount" + SalesInvLine."NCCD Amount" +
          SalesInvLine."eCess Amount" + SalesInvLine."ADET Amount" + SalesInvLine."AED(TTA) Amount" + SalesInvLine."ADE Amount" +
          SalesInvLine."ADC VAT Amount" + SalesInvLine."SHE Cess Amount";
        ExciseEntry.Paid := ABS(ExciseEntry."Direct Debit To PLA/RG Amount") = ABS(ExciseEntry.Amount);
        IF "Excise Charge" AND (Amount < 0) AND (TaxJnlLine."Excise Charge Amount" <> 0) THEN BEGIN
          ExciseEntry.Type := ExciseEntry.Type::Charges;
        END ELSE
          ExciseEntry."Item No." := "Item No.";
        ExciseEntry.CopyFromPostingSetup(ExcisePostingSetup);
        ExciseEntry.INSERT(TRUE);
        NextExciseEntryNo := NextExciseEntryNo + 1;
      END;
    END;

    LOCAL PROCEDURE InsertExciseforCapitalItems@1280026(GenJnlLine@1280000 : Record 81;AccNo@1280001 : Code[20];Defer@1280002 : Boolean);
    BEGIN
      WITH GenJnlLine DO BEGIN
        ExciseEntry.INIT;
        ExciseEntry."Entry No." := NextExciseEntryNo;
        ExciseEntry.CopyFromGenJnlLine(GenJnlLine);

        TaxJnlLine.RESET;
        TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
        TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
        TaxJnlLine.SETRANGE("Line No.","Line No.");
        TaxJnlLine.SETRANGE("Document No.","Document No.");
        IF SalesDocumentNo <> '' THEN
          TaxJnlLine.SETRANGE("Document No.",SalesDocumentNo);
        IF TaxJnlLine.FINDFIRST THEN;

        IF CVD AND (NOT Defer) THEN BEGIN
          ExciseEntry.Amount := (("Excise Amount" - "ADC VAT Amount") / 2) + "ADC VAT Amount";
          ExciseEntry."Amount Including Excise" := (("Amount Including Excise" - "ADC VAT Amount") / 2) +
            TaxJnlLine."ADC VAT Amount";
        END ELSE BEGIN
          ExciseEntry.Amount := (TaxJnlLine."Excise Amount" - "ADC VAT Amount") / 2;
          ExciseEntry."Amount Including Excise" := ("Amount Including Excise" - TaxJnlLine."ADC VAT Amount") / 2;
        END;

        ExciseEntry.Base := "Excise Base Amount" / 2;
        ExciseEntry."Amount Including Excise" := ExciseEntry.Base + ExciseEntry.Amount;
        ExciseEntry."BED %" := "BED %";
        ExciseEntry."Account No." := AccNo;
        ExciseEntry."BED Amount" := TaxJnlLine."BED Amount" / 2;
        ExciseEntry."AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount" / 2;
        ExciseEntry."AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount" / 2;
        ExciseEntry."SED Amount" := TaxJnlLine."SED Amount" / 2 ;
        ExciseEntry."SAED Amount" := TaxJnlLine."SAED Amount" / 2;
        ExciseEntry."NCCD Amount" := TaxJnlLine."NCCD Amount" / 2;
        ExciseEntry."CESS Amount" := TaxJnlLine."CESS Amount" / 2;
        ExciseEntry."eCess Amount" := TaxJnlLine."eCess Amount" / 2;
        ExciseEntry."SHE Cess Amount" := TaxJnlLine."SHE Cess Amount" / 2;
        ExciseEntry."ADET Amount" := TaxJnlLine."ADET Amount" / 2;
        ExciseEntry."ADE Amount" := TaxJnlLine."ADE Amount" / 2;
        IF NOT Defer THEN
          ExciseEntry."ADC VAT Amount" := TaxJnlLine."ADC VAT Amount";
        IF Defer THEN BEGIN
          ExciseEntry.Deferred := TRUE;
          ExciseEntry."Remaining BED Amount" := TaxJnlLine."BED Amount" / 2 ;
          ExciseEntry."Remaining AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount" / 2 ;
          ExciseEntry."Remaining AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount" / 2 ;
          ExciseEntry."Remaining SED Amount" := TaxJnlLine."SED Amount" / 2 ;
          ExciseEntry."Remaining SAED Amount" := TaxJnlLine."SAED Amount" / 2;
          ExciseEntry."Remaining NCCD Amount" := TaxJnlLine."NCCD Amount" / 2;
          ExciseEntry."Remaining eCess Amount" := TaxJnlLine."eCess Amount" / 2;
          ExciseEntry."Remaining SHE Cess Amount" := TaxJnlLine."SHE Cess Amount" / 2;
          ExciseEntry."Remaining ADET Amount" := TaxJnlLine."ADET Amount" / 2;
          ExciseEntry."Remaining ADE Amount" := TaxJnlLine."ADE Amount" / 2;
          ExciseEntry."Remaining Quantity" := Quantity;
          ExciseEntry.Amount := ((TaxJnlLine."Excise Amount" - "ADC VAT Amount") -
                                 ROUND((TaxJnlLine."Excise Amount" - "ADC VAT Amount") / 2));
        END;
        ExciseEntry.Quantity := Quantity;
        ExciseEntry."Item No." := "Item No.";
        ExciseEntry."Product Type" := "Product Type";
        ExciseEntry.CopyFromPostingSetup(ExcisePostingSetup);
        ExciseEntry."Sale Return Type" := "Sale Return Type";
        ExciseEntry.INSERT(TRUE);
        NextExciseEntryNo := NextExciseEntryNo + 1;
      END;
    END;

    LOCAL PROCEDURE ExciseChargeEntries@1280011(VAR GenJnlLine@1500000 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN
        TaxJnlLine.RESET;
        TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
        TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
        TaxJnlLine.SETRANGE("Line No.","Line No.");
        TaxJnlLine.SETRANGE("Document No.","Document No.");
        IF SalesDocumentNo <> '' THEN
          TaxJnlLine.SETRANGE("Document No.",SalesDocumentNo);
        IF TaxJnlLine.FINDFIRST THEN;

        "Excise Amount" := Amount;
        IF Amount > 0 THEN
          "Gen. Posting Type" := "Gen. Posting Type"::Purchase
        ELSE
          "Gen. Posting Type" := "Gen. Posting Type"::Sale;
        IF TaxJnlLine."Excise Record" = TaxJnlLine."Excise Record"::RG23A THEN BEGIN
          ExciseInsertRGRegisters.SetSalesHeaderNo(SalesDocumentNo);
          ExciseInsertRGRegisters.InsertRG23APartIICharges(GenJnlLine);
          InsertExcise(GenJnlLine,"Account No.");
        END
        ELSE
          IF TaxJnlLine."Excise Record" = TaxJnlLine."Excise Record"::RG23C THEN BEGIN
            ExciseInsertRGRegisters.SetSalesHeaderNo(SalesDocumentNo);
            ExciseInsertRGRegisters.InsertRG23CPartIICharges(GenJnlLine);
            IF Deferred THEN BEGIN
              TaxJnlLine."Excise Amount" := TaxJnlLine.Amount;
              TaxJnlLine."BED Amount" := TaxJnlLine."BED Amount" * 2;
              TaxJnlLine."AED(GSI) Amount" := TaxJnlLine."AED(GSI) Amount" * 2;
              TaxJnlLine."AED(TTA) Amount" := TaxJnlLine."AED(TTA) Amount" * 2;
              TaxJnlLine."SED Amount" := TaxJnlLine."SED Amount" * 2 ;
              TaxJnlLine."SAED Amount" := TaxJnlLine."SAED Amount" * 2;
              TaxJnlLine."NCCD Amount" := TaxJnlLine."NCCD Amount" * 2;
              TaxJnlLine."CESS Amount" := TaxJnlLine."CESS Amount" * 2;
              TaxJnlLine."eCess Amount" := TaxJnlLine."eCess Amount" * 2;
              TaxJnlLine."SHE Cess Amount" := TaxJnlLine."SHE Cess Amount" * 2;
              TaxJnlLine."ADET Amount" := TaxJnlLine."ADET Amount" * 2;
              TaxJnlLine."ADE Amount" := TaxJnlLine."ADE Amount" * 2;
              TaxJnlLine."Excise Amount" := Amount * 2;
              TESTFIELD("ADC VAT Amount",0);
              TaxJnlLine.MODIFY;
              InsertExciseforCapitalItems(GenJnlLine,"Account No.",TRUE);
            END ELSE
              InsertExcise(GenJnlLine,"Account No.");
          END ELSE
            InsertExcise(GenJnlLine,"Account No.");

        "Excise Charge" := FALSE;
        TaxJnlLine."Excise Charge" := FALSE;
        TaxJnlLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ReverseDeferredExciseCapItems@1280010(GenJnlLine@1500000 : Record 81);
    VAR
      ExciseEntry@1280001 : Record 13712;
      ClaimDeferredExciseReport@1280000 : Report 13775;
    BEGIN
      ExciseEntry.RESET;
      ExciseEntry.SETCURRENTKEY("Document No.","Posting Date",Deferred,"Remaining Quantity","Item No.");
      ExciseEntry.SETRANGE(Deferred,TRUE);
      ExciseEntry.SETRANGE("Item No.",GenJnlLine."Account No.");
      ExciseEntry.SETRANGE("Product Type",ExciseEntry."Product Type"::FA);
      ExciseEntry.SETRANGE("Posting Date",CALCDATE('<1D>',ClaimDeferredExciseReport.GetFinancialYear(GenJnlLine."Posting Date")),
        ClaimDeferredExciseReport.GetCurrentFinancialYear(GenJnlLine."Posting Date"));
      IF ExciseEntry.FIND('-') THEN
        REPEAT
          FillDeferredExciseBuffer(ExciseEntry."Entry No.",ExciseEntry."Remaining Quantity");
        UNTIL ExciseEntry.NEXT = 0;

      PostDeferredExcise(GenJnlLine);
    END;

    LOCAL PROCEDURE FillDeferredExciseBuffer@1280009(EEntryNo@1280001 : Integer;Qty@1280000 : Decimal);
    VAR
      ExciseEntry@1280003 : Record 13712;
      PreviousExciseEntry@1280002 : Record 13712;
    BEGIN
      ExciseEntry.GET(EEntryNo);
      DeferredExciseBuffer[1]."Bal. Account" := ExciseEntry."Account No.";
      PreviousExciseEntry.GET(EEntryNo - 1);
      DeferredExciseBuffer[1]."G/L Account" := PreviousExciseEntry."Account No.";
      DeferredExciseBuffer[1].Amount := (ExciseEntry."BED Amount" + ExciseEntry."AED(GSI) Amount" + ExciseEntry."SED Amount" +
                                         ExciseEntry."SAED Amount" + ExciseEntry."ADE Amount" +
                                         ExciseEntry."AED(TTA) Amount" + ExciseEntry."ADET Amount" + ExciseEntry."NCCD Amount" +
                                         ExciseEntry."eCess Amount" + ExciseEntry."SHE Cess Amount") * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."BED Amount" := ExciseEntry."BED Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."AED(GSI) Amount" := ExciseEntry."AED(GSI) Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."AED(TTA) Amount" := ExciseEntry."AED(TTA) Amount" * (Qty / ExciseEntry.Quantity);

      DeferredExciseBuffer[1]."SED Amount" := ExciseEntry."SED Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."SAED Amount" := ExciseEntry."SAED Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."CESS Amount" := ExciseEntry."CESS Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."NCCD Amount" := ExciseEntry."NCCD Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."eCess Amount" := ExciseEntry."eCess Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."SHE Cess Amount" := ExciseEntry."SHE Cess Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."ADET Amount" := ExciseEntry."ADET Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."ADE Amount" := ExciseEntry."ADE Amount" * (Qty / ExciseEntry.Quantity);
      InsertDetailSTDeferment(ExciseEntry,DeferredExciseBuffer[1]);
      UpdDeferredExciseBuffer;

      ExciseEntry."Remaining Quantity" := ExciseEntry."Remaining Quantity" - Qty;
      ExciseEntry."Remaining BED Amount" :=
        ExciseEntry."Remaining BED Amount" - (ExciseEntry."BED Amount" * (Qty / ExciseEntry.Quantity)
                                              );
      ExciseEntry."Remaining AED(GSI) Amount" := ExciseEntry."Remaining AED(GSI) Amount" -
        (ExciseEntry."AED(GSI) Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining AED(TTA) Amount" := ExciseEntry."Remaining AED(TTA) Amount" -
        (ExciseEntry."AED(TTA) Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining ADET Amount" := ExciseEntry."Remaining ADET Amount" -
        (ExciseEntry."ADET Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining SED Amount" := ExciseEntry."Remaining SED Amount" -
        (ExciseEntry."SED Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining SAED Amount" := ExciseEntry."Remaining SAED Amount" -
        (ExciseEntry."SAED Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining NCCD Amount" := ExciseEntry."Remaining NCCD Amount" -
        (ExciseEntry."NCCD Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining eCess Amount" := ExciseEntry."Remaining eCess Amount" -
        (ExciseEntry."eCess Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining SHE Cess Amount" := ExciseEntry."Remaining SHE Cess Amount" -
        (ExciseEntry."SHE Cess Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining ADE Amount" := ExciseEntry."Remaining ADE Amount" -
        (ExciseEntry."ADE Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdDeferredExciseBuffer@1280005();
    BEGIN
      DeferredExciseBuffer[2] := DeferredExciseBuffer[1];
      IF DeferredExciseBuffer[2].FIND THEN BEGIN
        DeferredExciseBuffer[2].Amount := DeferredExciseBuffer[2].Amount + DeferredExciseBuffer[1].Amount;
        DeferredExciseBuffer[2]."BED Amount" := DeferredExciseBuffer[2]."BED Amount" + DeferredExciseBuffer[1]."BED Amount";
        DeferredExciseBuffer[2]."AED(GSI) Amount" := DeferredExciseBuffer[2]."AED(GSI) Amount" +
          DeferredExciseBuffer[1]."AED(GSI) Amount";
        DeferredExciseBuffer[2]."AED(TTA) Amount" := DeferredExciseBuffer[2]."AED(TTA) Amount" +
          DeferredExciseBuffer[1]."AED(TTA) Amount";
        DeferredExciseBuffer[2]."SED Amount" := DeferredExciseBuffer[2]."SED Amount" + DeferredExciseBuffer[1]."SED Amount";
        DeferredExciseBuffer[2]."SAED Amount" := DeferredExciseBuffer[2]."SAED Amount" + DeferredExciseBuffer[1]."SAED Amount";
        DeferredExciseBuffer[2]."CESS Amount" := DeferredExciseBuffer[2]."CESS Amount" + DeferredExciseBuffer[1]."CESS Amount";
        DeferredExciseBuffer[2]."NCCD Amount" := DeferredExciseBuffer[2]."NCCD Amount" + DeferredExciseBuffer[1]."NCCD Amount";
        DeferredExciseBuffer[2]."eCess Amount" := DeferredExciseBuffer[2]."eCess Amount" + DeferredExciseBuffer[1]."eCess Amount";
        DeferredExciseBuffer[2]."SHE Cess Amount" := DeferredExciseBuffer[2]."SHE Cess Amount" +
          DeferredExciseBuffer[1]."SHE Cess Amount";
        DeferredExciseBuffer[2]."ADET Amount" := DeferredExciseBuffer[2]."ADET Amount" + DeferredExciseBuffer[1]."ADET Amount";
        DeferredExciseBuffer[2]."ADE Amount" := DeferredExciseBuffer[2]."ADE Amount" + DeferredExciseBuffer[1]."ADE Amount";
        DeferredExciseBuffer[2].MODIFY;
      END ELSE
        DeferredExciseBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostDeferredExcise@1280044(GenJnlLine@1280004 : Record 81);
    VAR
      RG23CPartII@1280001 : Record 13722;
      RG23CPartIIRec@1280000 : Record 13722;
      GenJnlPostLine@1280002 : Codeunit 12;
      ECCNoRec@1000000000 : Record 13708;
      EntryNo@1500001 : Integer;
    BEGIN
      IF DeferredExciseBuffer[1].FIND('+') THEN BEGIN
        GenJnlLine.TESTFIELD("E.C.C. No.");
        CLEAR(GenJnlPostLine);
        RG23CPartIIRec.LOCKTABLE;
        RG23CPartIIRec.FINDLAST;
        EntryNo := RG23CPartIIRec."Entry No." + 1;
        RG23CPartIIRec.SETCURRENTKEY("Location E.C.C. No.");
        RG23CPartIIRec.SETRANGE("Location E.C.C. No.",GenJnlLine."E.C.C. No.");
        RG23CPartIIRec.FINDLAST;
        RG23CPartII.INIT;
        RG23CPartII.TRANSFERFIELDS(RG23CPartIIRec);
        RG23CPartII."Entry No." := EntryNo;
        RG23CPartII."Posting Date" := GenJnlLine."Posting Date";
        RG23CPartII."Document No." := GenJnlLine."Document No.";
        RG23CPartII."Location E.C.C. No." := GenJnlLine."E.C.C. No.";
        RG23CPartII."Document Date" := 0D;
        RG23CPartII."BED Debit" := 0;
        RG23CPartII."BED Credit" := 0;
        RG23CPartII."AED(GSI) Credit" := 0;
        RG23CPartII."SED Credit" := 0;
        RG23CPartII."SAED Credit" := 0;
        RG23CPartII."CESS Credit" := 0;
        RG23CPartII."NCCD Credit" := 0;
        RG23CPartII."eCess Credit" := 0;
        RG23CPartII."SHE Cess Credit" := 0;
        RG23CPartII."Location Code" := '';
        RG23CPartII."AED(GSI) Debit" := 0;
        RG23CPartII."SAED Debit" := 0;
        RG23CPartII."CESS Debit" := 0;
        RG23CPartII."NCCD Debit" := 0;
        RG23CPartII."eCess Debit" := 0;
        RG23CPartII."SHE Cess Debit" := 0;
        RG23CPartII."SED Debit" := 0;
        RG23CPartII."ADE Credit" := 0;
        RG23CPartII."ADE Debit" := 0;
        RG23CPartII."ADET Credit" := 0;
        RG23CPartII."ADET Debit" := 0;
        RG23CPartII."AED(TTA) Credit" := 0;
        RG23CPartII."AED(TTA) Debit" := 0;
        RG23CPartII."ADC VAT Credit" := 0;
        RG23CPartII."ADC VAT Debit" := 0;
        RG23CPartII."Cenvat Cr. Receivable Acc." := '';
        RG23CPartII.Type := RG23CPartII.Type::Sale;
        RG23CPartII."Excise Bus. Posting Group" := '';
        RG23CPartII."Excise Prod. Posting Group" := '';
        RG23CPartII."Vendor Shipment No." := '';
        RG23CPartII."Order no." := '';
        RG23CPartII."Vendor No." := '';
        RG23CPartII."Vendor Invoice No." := '';
        RG23CPartII."Vendor E.C.C. No." := '';
        RG23CPartII."Sales Invoice No." := '';
        RG23CPartII."Line No." := 0;
        RG23CPartII."ADE Credit" := 0;
        RG23CPartII."ADE Debit" := 0;
        RG23CPartII."Excise Credit Availed as ST" := FALSE;
        RG23CPartII."Remaining BED Credit" := 0;
        RG23CPartII."Remaining AED(GSI) Credit" := 0;
        RG23CPartII."Remaining SED Credit" := 0;
        RG23CPartII."Remaining SAED Credit" := 0;
        RG23CPartII."Remaining NCCD Credit" := 0;
        RG23CPartII."Remaining eCess Credit" := 0;
        RG23CPartII."Remaining SHECess Credit" := 0;
        RG23CPartII."Remaining ADET Credit" := 0;
        RG23CPartII."Remaining AED(TTA) Credit" := 0;
        RG23CPartII."Remaining ADE Credit" := 0;
        RG23CPartII."Remaining ADC VAT Credit" := 0;
        RG23CPartII."Remaining Excise Amount" := 0;
        RG23CPartII.Closed := FALSE;
        RG23CPartII."Excise as Service Tax Credit" := FALSE;
        RG23CPartII.Supplementary := FALSE;
        RG23CPartII."Source Document Type" := 0;
        RG23CPartII."Source Document No." := '';
        RG23CPartII.CVD := FALSE;
        RG23CPartII."Vendor Type" := RG23CPartII."Vendor Type"::" ";
        RG23CPartII."Type of Unit" := RG23CPartII."Type of Unit"::" ";
        RG23CPartII."Opening Balance Credit CY" := RG23CPartII."Closing Balance Credit CY";

        REPEAT
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          CreateGLEntry(GenJnlLine,DeferredExciseBuffer[1]."G/L Account",DeferredExciseBuffer[1].Amount,
            DeferredExciseBuffer[1].Amount,TRUE,TRUE);
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          CreateGLEntry(GenJnlLine,DeferredExciseBuffer[1]."Bal. Account",-DeferredExciseBuffer[1].Amount,
            -DeferredExciseBuffer[1].Amount,TRUE,TRUE);
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";

          RG23CPartII."BED Credit" += DeferredExciseBuffer[1]."BED Amount";
          RG23CPartII."AED(GSI) Credit" += DeferredExciseBuffer[1]."AED(GSI) Amount";
          RG23CPartII."AED(TTA) Credit" += DeferredExciseBuffer[1]."AED(TTA) Amount";
          RG23CPartII."SED Credit" += DeferredExciseBuffer[1]."SED Amount";
          RG23CPartII."SAED Credit" += DeferredExciseBuffer[1]."SAED Amount";
          RG23CPartII."NCCD Credit" += DeferredExciseBuffer[1]."NCCD Amount";
          RG23CPartII."eCess Credit" += DeferredExciseBuffer[1]."eCess Amount";
          RG23CPartII."SHE Cess Credit" += DeferredExciseBuffer[1]."SHE Cess Amount";
          RG23CPartII."ADE Credit" += DeferredExciseBuffer[1]."ADE Amount";
          RG23CPartII."ADET Credit" += DeferredExciseBuffer[1]."ADET Amount";
          RG23CPartII."Total BED for Current Year" += DeferredExciseBuffer[1]."BED Amount";
          RG23CPartII."Total BED for Next Year" -= DeferredExciseBuffer[1]."BED Amount";
          RG23CPartII."Total AED(GSI) for CY" += DeferredExciseBuffer[1]."AED(GSI) Amount";
          RG23CPartII."Total AED(GSI) for Next Year" -= DeferredExciseBuffer[1]."AED(GSI) Amount";
          RG23CPartII."Total AED(TTA) for CY" += DeferredExciseBuffer[1]."AED(TTA) Amount";
          RG23CPartII."Total AED(TTA) for Next Year" -= DeferredExciseBuffer[1]."AED(TTA) Amount";
          RG23CPartII."Total SED for Current Year" += DeferredExciseBuffer[1]."SED Amount";
          RG23CPartII."Total SED for Next Year" -= DeferredExciseBuffer[1]."SED Amount";
          RG23CPartII."Total SAED for Current Year" += DeferredExciseBuffer[1]."SAED Amount";
          RG23CPartII."Total SAED for Next Year" -= DeferredExciseBuffer[1]."SAED Amount";
          RG23CPartII."Total NCCD for Current Year" += DeferredExciseBuffer[1]."NCCD Amount";
          RG23CPartII."Total NCCD for Next Year" -= DeferredExciseBuffer[1]."NCCD Amount";
          RG23CPartII."Total eCess for Current Year" += DeferredExciseBuffer[1]."eCess Amount";
          RG23CPartII."Total eCess for Next Year" -= DeferredExciseBuffer[1]."eCess Amount";
          RG23CPartII."Total SHECESS for Current Year" += DeferredExciseBuffer[1]."SHE Cess Amount";
          RG23CPartII."Total SHECESS for Next Year" -= DeferredExciseBuffer[1]."SHE Cess Amount";
          RG23CPartII."Total ADET for Current Year" += DeferredExciseBuffer[1]."ADET Amount";
          RG23CPartII."Total ADET for Next Year" -= DeferredExciseBuffer[1]."ADET Amount";
          RG23CPartII."Total ADE for Current Year" += DeferredExciseBuffer[1]."ADE Amount";
          RG23CPartII."Total ADE for Next Year" -= DeferredExciseBuffer[1]."ADE Amount";
          RG23CPartII."Remaining BED Credit" += RG23CPartII."BED Credit";
          RG23CPartII."Remaining AED(GSI) Credit" += RG23CPartII."AED(GSI) Credit";
          RG23CPartII."Remaining SED Credit" += RG23CPartII."SED Credit";
          RG23CPartII."Remaining SAED Credit" += RG23CPartII."SAED Credit";
          RG23CPartII."Remaining NCCD Credit" += RG23CPartII."NCCD Credit";
          RG23CPartII."Remaining eCess Credit" += RG23CPartII."eCess Credit";
          RG23CPartII."Remaining SHECess Credit" += RG23CPartII."SHE Cess Credit";
          RG23CPartII."Remaining ADET Credit" += RG23CPartII."ADET Credit";
          RG23CPartII."Remaining AED(TTA) Credit" += RG23CPartII."AED(TTA) Credit";
          RG23CPartII."Remaining ADE Credit" += RG23CPartII."ADE Credit";
          RG23CPartII."Remaining ADC VAT Credit" += RG23CPartII."ADC VAT Credit";
          RG23CPartII."Remaining Excise Amount" += RG23CPartII."Remaining BED Credit" + RG23CPartII."Remaining AED(GSI) Credit" +
            RG23CPartII."Remaining SED Credit" + RG23CPartII."Remaining SAED Credit" + RG23CPartII."Remaining NCCD Credit" +
            RG23CPartII."Remaining eCess Credit" + RG23CPartII."Remaining ADET Credit" + RG23CPartII."Remaining AED(TTA) Credit" +
            RG23CPartII."Remaining ADE Credit" + RG23CPartII."Remaining ADC VAT Credit" + RG23CPartII."Remaining SHECess Credit";

          RG23CPartII."Closing Balance Credit CY" := RG23CPartII."Closing Balance Credit CY" +
            DeferredExciseBuffer[1]."BED Amount" + DeferredExciseBuffer[1]."AED(GSI) Amount" +
            DeferredExciseBuffer[1]."AED(TTA) Amount" + DeferredExciseBuffer[1]."SED Amount" +
            DeferredExciseBuffer[1]."SAED Amount" + DeferredExciseBuffer[1]."NCCD Amount" +
            DeferredExciseBuffer[1]."eCess Amount" + DeferredExciseBuffer[1]."ADE Amount" +
            DeferredExciseBuffer[1]."ADET Amount" + DeferredExciseBuffer[1]."SHE Cess Amount";
        UNTIL DeferredExciseBuffer[1].NEXT(-1) = 0;
        RG23CPartII.TESTFIELD("Location E.C.C. No.");
        RG23CPartII."Deferred Claim" := TRUE;
        IF ECCNoRec.GET(RG23CPartII."Location E.C.C. No.") THEN
          RG23CPartII."Type of Unit" := ECCNoRec."Type of Unit";

        InsertExciseRG.GetRGEntryNo(RG23CPartII."Posting Date",3,RG23CPartII."Location E.C.C. No.",RG23CPartII."Document No.",
          RG23CPartII."RG Entry No.");
        RG23CPartII.INSERT;
      END;
      DeferredExciseBuffer[1].DELETEALL;
    END;

    LOCAL PROCEDURE PostWorkTax@1280007(GenJnlLine@1000 : Record 81);
    VAR
      SourceCurrWorkTaxAmt@1280001 : Decimal;
    BEGIN
      WITH GenJnlLine DO
        IF "Balance Work Tax Amount" <> 0 THEN
          IF TDSGroup.FindOnDate("Work Tax Group","Posting Date") THEN BEGIN
            GetGLSetup;
            IF AddCurrencyCode <> '' THEN
              SourceCurrWorkTaxAmt := CalcLCYToAddCurr(WorkTaxAmountLCY);
            TDSGroup.TESTFIELD("TDS Account");
            CreateGLEntry(GenJnlLine,
              TDSGroup."TDS Account",-WorkTaxAmountLCY,-SourceCurrWorkTaxAmt,TRUE,"System-Created Entry");
          END;
    END;

    LOCAL PROCEDURE InsertIntoLCRegister@1280018(GenJnlLine@1280000 : Record 81);
    VAR
      LCRegister@1280001 : Record 16305;
      LineNo@1280002 : Integer;
    BEGIN
      LCRegister.SETRANGE("LC No.",GenJnlLine."LC No.");
      IF LCRegister.FINDLAST THEN
        LineNo := LCRegister."Line No.";
      LineNo := LineNo + 10000;
      LCRegister.INIT;
      LCRegister."LC No." := GenJnlLine."LC No.";
      LCRegister."Document No." := GenJnlLine."Document No.";
      LCRegister."Posting Date" := GenJnlLine."Posting Date";
      LCRegister."Line No." := LineNo;
      LCRegister.INSERT;
    END;

    LOCAL PROCEDURE PostServiceTax@1280013(GenJnlLine@1280000 : Record 81;CVNo@1500000 : Code[20];PostingGrCode@1500005 : Code[10]) ServiceTaxPoTAmount : Decimal;
    VAR
      Vend@1500003 : Record 23;
      ServiceTaxSetup@1280001 : Record 16472;
      ServiceTaxMgt@1500006 : Codeunit 16471;
      STReverseChargeSetup@1500001 : Record 16461;
      GLAccountNo@1500002 : Code[20];
      GLAccountNoSBC@1500429 : Code[20];
      GLAccountNoKKCess@1500004 : Code[20];
    BEGIN
      WITH GenJnlLine DO
        IF IsServiceTaxExist(GenJnlLine) OR ("Tot. Serv Tax Amount (Intm)" <> 0) OR
           "ST Pure Agent" OR
           ("Nature of Services" IN ["Nature of Services"::Export,"Nature of Services"::Exempted])
        THEN BEGIN
          TESTFIELD("Service Tax Group Code");
          TESTFIELD("Service Tax Registration No.");
          IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo",
                                      "Document Type"::Payment,"Document Type"::Refund])
          THEN
            ERROR(Text020);

          ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
          CASE "Service Tax Type" OF
            "Service Tax Type"::Purchase:
              CASE "Document Type" OF
                "Document Type"::Invoice,"Document Type"::"Credit Memo":
                  BEGIN
                    Vend.GET(CVNo);
                    TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup);
                    IF STReverseChargeSetup."Reverse Charge %" IN [1..99] THEN
                      ServiceTaxPoTAmount := PostServiceTaxSplit(GenJnlLine,ServiceTaxSetup,STReverseChargeSetup."Reverse Charge %")
                    ELSE BEGIN
                      CreateServiceTaxPurchEntries(ServiceTaxSetup,GenJnlLine);
                      IF STReverseChargeSetup."Reverse Charge %" = 100 THEN
                        ServiceTaxPoTAmount := 0
                      ELSE
                        ServiceTaxPoTAmount := (-(FullServiceTaxAmount + FullServiceTaxSBCAmount + KKCessAmount));
                    END;
                  END;
                "Document Type"::Payment,"Document Type"::Refund:
                  IF "Serv. Tax on Advance Payment" THEN BEGIN
                    TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup);
                    IF STReverseChargeSetup."Reverse Charge %" IN [1..99] THEN
                      PostServiceTaxSplit(GenJnlLine,ServiceTaxSetup,STReverseChargeSetup."Reverse Charge %")
                    ELSE
                      CreateServiceTaxPurchEntries(ServiceTaxSetup,GenJnlLine);
                    ServiceTaxPoTAmount := 0;
                  END;
              END;
            "Service Tax Type"::Sale:
              CASE "Document Type" OF
                "Document Type"::Invoice,"Document Type"::"Credit Memo":
                  BEGIN
                    IF PoT THEN BEGIN
                      GLAccountNo := ServiceTaxSetup.GetPayInterimAccNo;
                      IF "Tot. Serv Tax Amount (Intm)" <> 0 THEN
                        PostToGLEntry(GenJnlLine,GLAccountNo,"Tot. Serv Tax Amount (Intm)","System-Created Entry");
                      IF "Service Tax SBC Amount (Intm)" <> 0 THEN BEGIN
                      GLAccountNoSBC := ServiceTaxSetup.GetPayInterimSBCAccNo;
                        PostToGLEntry(GenJnlLine,GLAccountNoSBC,"Service Tax SBC Amount (Intm)","System-Created Entry");
                      END;

                      IF "KK Cess Amount (Intm)" <> 0 THEN BEGIN
                        GLAccountNoKKCess := ServiceTaxSetup.GetKKCessPayInterimAccNo;
                        PostToGLEntry(GenJnlLine,GLAccountNoKKCess,"KK Cess Amount (Intm)","System-Created Entry");
                      END;

                      IF FullServiceTaxSBCAmount <> 0 THEN
                      GLAccountNoSBC := ServiceTaxSetup.GetPaySBCAccNo;
                      IF KKCessAmount <> 0 THEN
                        GLAccountNoKKCess := ServiceTaxSetup.GetKKCessPayAccNo;

                      GLAccountNo := ServiceTaxSetup.GetPayAccNo;
                    END ELSE BEGIN
                      GLAccountNo := ServiceTaxSetup.GetPayInterimAccNo;

                      IF FullServiceTaxSBCAmount <> 0 THEN
                      GLAccountNoSBC := ServiceTaxSetup.GetPayInterimSBCAccNo;
                      IF KKCessAmount <> 0 THEN
                        GLAccountNoKKCess := ServiceTaxSetup.GetKKCessPayInterimAccNo;
                    END;
                    IF FullServiceTaxAmount <> 0 THEN
                      PostToGLEntry(GenJnlLine,GLAccountNo,FullServiceTaxAmount,"System-Created Entry");
                    IF FullServiceTaxSBCAmount <> 0 THEN
                      PostToGLEntry(GenJnlLine,GLAccountNoSBC,FullServiceTaxSBCAmount,"System-Created Entry");

                    IF KKCessAmount <> 0 THEN
                      PostToGLEntry(GenJnlLine,GLAccountNoKKCess,KKCessAmount,"System-Created Entry");

                    ServiceTaxMgt.InsertSalesEntry(GenJnlLine,NextTransactionNo,GLAccountNo,GLAccountNoSBC,GLAccountNoKKCess);
                    ServiceTaxPoTAmount := -(FullServiceTaxAmount + FullServiceTaxSBCAmount + KKCessAmount);
                  END;
                "Document Type"::Payment,"Document Type"::Refund:
                  IF "Serv. Tax on Advance Payment" THEN BEGIN
                    IF IsServiceTaxExist(GenJnlLine) OR
                       "ST Pure Agent" OR
                       ("Nature of Services" IN ["Nature of Services"::Export,"Nature of Services"::Exempted])
                    THEN BEGIN
                      GLAccountNo := ServiceTaxSetup.GetPayInterimAccNo;
                      GLAccountNoSBC := ServiceTaxSetup.GetPayInterimSBCAccNo;
                      GLAccountNoKKCess := ServiceTaxSetup.GetKKCessPayInterimAccNo;
                      ServiceTaxMgt.InsertSalesEntry(GenJnlLine,NextTransactionNo,GLAccountNo,GLAccountNoSBC,GLAccountNoKKCess);
                    END;
                    ServiceTaxPoTAmount := 0;
                  END;
              END;
          END;
        END;
    END;

    LOCAL PROCEDURE CreateServiceTaxPurchEntries@1500044(ServiceTaxSetup@1500000 : Record 16472;GenJnlLine2@1500005 : Record 81);
    VAR
      SrvTaxReverseChrgSetup@1500001 : Record 16461;
      GLAccountNo@1500002 : Code[20];
      ReverseCharge@1500003 : Boolean;
      GLAccountNoSBC@1500431 : Code[20];
      GLAccountNoKKCess@1500004 : Code[20];
    BEGIN
      IF GenJnlLine2.PoT THEN BEGIN
        IF GenJnlLine2."Tot. Serv Tax Amount (Intm)" <> 0 THEN BEGIN
          GLAccountNo := ServiceTaxSetup.GetRecInterimAccNo;
          PostToGLEntry(GenJnlLine2,GLAccountNo,GenJnlLine2."Tot. Serv Tax Amount (Intm)",GenJnlLine2."System-Created Entry");
          IF GenJnlLine2."KK Cess Amount (Intm)" <> 0 THEN BEGIN
            GLAccountNoKKCess := ServiceTaxSetup.GetKKCessRecInterimAccNo;
            PostToGLEntry(GenJnlLine2,GLAccountNoKKCess,GenJnlLine2."KK Cess Amount (Intm)",GenJnlLine2."System-Created Entry");
          END;
        END;
        IF GenJnlLine2."Serv. Tax on Advance Payment" THEN BEGIN
          GLAccountNo := ServiceTaxSetup.GetRecInterimAccNo;
          PostToGLEntry(GenJnlLine2,GLAccountNo,-GenJnlLine2.FullServiceTaxAmount,GenJnlLine2."System-Created Entry");
          IF GenJnlLine2.FullServiceTaxSBCAmount <> 0 THEN BEGIN
          GLAccountNoSBC := ServiceTaxSetup.GetRecInterimSBCAccNo;
            PostToGLEntry(GenJnlLine2,GLAccountNoSBC,-GenJnlLine2.FullServiceTaxSBCAmount,GenJnlLine2."System-Created Entry");
        END;
          IF GenJnlLine2.KKCessAmount <> 0 THEN BEGIN
            GLAccountNoKKCess := ServiceTaxSetup.GetKKCessRecInterimAccNo;
            PostToGLEntry(GenJnlLine2,GLAccountNoKKCess,-GenJnlLine2.KKCessAmount,GenJnlLine2."System-Created Entry");
          END;
        END;
        GLAccountNo := ServiceTaxSetup.GetRecAccNo;
        PostToGLEntry(GenJnlLine2,GLAccountNo,GenJnlLine2.FullServiceTaxAmount,GenJnlLine2."System-Created Entry");
        IF GenJnlLine2.FullServiceTaxSBCAmount <> 0 THEN BEGIN
        GLAccountNoSBC := ServiceTaxSetup.GetRecSBCAccNo;
          PostToGLEntry(GenJnlLine2,GLAccountNoSBC,GenJnlLine2.FullServiceTaxSBCAmount,GenJnlLine2."System-Created Entry");
        END;
        IF GenJnlLine2.KKCessAmount <> 0 THEN BEGIN
          GLAccountNoKKCess := ServiceTaxSetup.GetKKCessRecAccNo;
          PostToGLEntry(GenJnlLine2,GLAccountNoKKCess,GenJnlLine2.KKCessAmount,GenJnlLine2."System-Created Entry");
        END;
      END ELSE BEGIN
        ReverseCharge := GenJnlLine2.TryGetSrvTaxReverseChargeSetup(SrvTaxReverseChrgSetup);
        IF NOT GenJnlLine2."Serv. Tax on Advance Payment" OR ReverseCharge THEN BEGIN
          GLAccountNo := ServiceTaxSetup.GetRecInterimAccNoByISD(GenJnlLine2."Input Service Distribution");
          PostToGLEntry(GenJnlLine2,GLAccountNo,GenJnlLine2.FullServiceTaxAmount,GenJnlLine2."System-Created Entry");

          IF GenJnlLine2.FullServiceTaxSBCAmount <> 0 THEN BEGIN
          IF GenJnlLine2."Serv. Tax on Advance Payment" THEN
            GLAccountNoSBC := ServiceTaxSetup.GetRecInterimSBCAccNoByISD(GenJnlLine2."Input Service Distribution")
          ELSE
            GLAccountNoSBC := ServiceTaxSetup.GetRecSBCAccNo;
            PostToGLEntry(GenJnlLine2,GLAccountNoSBC,GenJnlLine2.FullServiceTaxSBCAmount,GenJnlLine2."System-Created Entry");
        END;

          IF GenJnlLine2.KKCessAmount <> 0 THEN BEGIN
            GLAccountNoKKCess := ServiceTaxSetup.GetKKCessRecInterimAccNoByISD(GenJnlLine2."Input Service Distribution");
            PostToGLEntry(GenJnlLine2,GLAccountNoKKCess,GenJnlLine2.KKCessAmount,GenJnlLine2."System-Created Entry");
          END;

        END;
        IF ReverseCharge THEN BEGIN
          IF GenJnlLine2."Serv. Tax on Advance Payment" THEN
            GLAccountNo := ServiceTaxSetup.GetPayAccNo
          ELSE
            GLAccountNo := ServiceTaxSetup.GetPayInterimAccNo;
          PostToGLEntry(GenJnlLine2,GLAccountNo,-GenJnlLine2.FullServiceTaxAmount,GenJnlLine2."System-Created Entry");

          IF GenJnlLine2.FullServiceTaxSBCAmount <> 0 THEN BEGIN
          IF GenJnlLine2."Serv. Tax on Advance Payment" THEN
            GLAccountNoSBC := ServiceTaxSetup.GetPaySBCAccNo
          ELSE
            GLAccountNoSBC := ServiceTaxSetup.GetPayInterimSBCAccNo;
            PostToGLEntry(GenJnlLine2,GLAccountNoSBC,-GenJnlLine2.FullServiceTaxSBCAmount,GenJnlLine2."System-Created Entry");
        END;

          IF GenJnlLine2.KKCessAmount <> 0 THEN BEGIN
            IF GenJnlLine2."Serv. Tax on Advance Payment" THEN
              GLAccountNoKKCess := ServiceTaxSetup.GetKKCessPayAccNo
            ELSE
              GLAccountNoKKCess := ServiceTaxSetup.GetKKCessPayInterimAccNo;
            PostToGLEntry(GenJnlLine2,GLAccountNoKKCess,-GenJnlLine2.KKCessAmount,GenJnlLine2."System-Created Entry");
      END;
        END;
      END;
      ServiceTaxMgt.InsertPurchaseEntry(GenJnlLine2,NextTransactionNo,GLAccountNo,GLAccountNoSBC,GLAccountNoKKCess);
    END;

    LOCAL PROCEDURE PostToGLEntry@1500051(GenJnlLine@1500003 : Record 81;GLAccountNo@1500000 : Code[20];Amount@1500001 : Decimal;SystemCreatedEntry@1500002 : Boolean);
    BEGIN
      CreateGLEntry(GenJnlLine,GLAccountNo,Amount,CalcLCYToAddCurr(Amount),TRUE,SystemCreatedEntry);
    END;

    LOCAL PROCEDURE AddServiceTaxToJnlLineAmount@1500111(VAR GenJnlLine@1500001 : Record 81;ServiceTaxPoTAmount@1500000 : Decimal);
    VAR
      Currency@1500002 : Record 4;
    BEGIN
      IF ServiceTaxPoTAmount <> 0 THEN
        WITH GenJnlLine DO BEGIN
          "Amount (LCY)" += ServiceTaxPoTAmount;
          IF "Currency Code" <> '' THEN BEGIN
            Currency.GET(GenJnlLine."Currency Code");
            Amount := ROUND("Amount (LCY)" * "Currency Factor",Currency."Amount Rounding Precision")
          END ELSE BEGIN
            GetGLSetup;
            Amount := ROUND("Amount (LCY)",GLSetup."Amount Rounding Precision");
          END;
        END;
    END;

    LOCAL PROCEDURE RestoreJnlLineAmounts@1500055(VAR GenJnlLine@1500000 : Record 81;OriginalGenJnlLine@1500001 : Record 81);
    BEGIN
      GenJnlLine."Amount (LCY)" := OriginalGenJnlLine."Amount (LCY)";
      GenJnlLine.Amount := OriginalGenJnlLine.Amount;
    END;

    LOCAL PROCEDURE InsertTDS@1280008(VAR GenJnlLine@1280000 : Record 81);
    VAR
      TDSEntry@1500002 : Record 13729;
      NODLines@1280016 : Record 13785;
      TDSEntry1@1280013 : Record 13729;
      VendorLedgerEntry1@1280012 : Record 25;
      TDSGroup@1280002 : Record 13731;
      CompanyInfo@1280001 : Record 79;
      NatureofDeduction@1280003 : Record 13726;
      Location@1280006 : Record 14;
      AppliedAmount@1280005 : Decimal;
      Vendor@1500000 : Record 23;
      TDSParty@1500001 : Record 13730;
      AmtInclServiceTax@1500003 : Decimal;
    BEGIN
      WITH GenJnlLine DO
        IF ("TDS Nature of Deduction" <> '') AND ("Assessee Code" <> '') THEN BEGIN
          CLEAR(AppliedAmount);
          TDSEntry.INIT;
          TDSEntry."Entry No." := NextTDSEntryNo;
          TDSEntry."Document Type" := "Document Type";
          TDSEntry."Document No." := "Document No.";
          TDSEntry."Posting Date" := "Posting Date";
          TDSEntry."Account Type" := TDSEntry."Account Type"::"G/L Account";
          TDSEntry.Description := Description;
          TDSGroup.FindOnDate("TDS Group","Posting Date");
          TDSGroup.TESTFIELD("TDS Account");
          TDSEntry."Account No." := TDSGroup."TDS Account";
          TDSEntry."Party Type" := "Party Type";
          TDSEntry."Party Code" := "Party Code";
          TDSEntry."Party Account No." := "Account No.";
          TDSEntry."TDS Group" := "TDS Group";
          TDSEntry."TDS Nature of Deduction" := "TDS Nature of Deduction";
          TDSEntry."Assessee Code" := "Assessee Code";
          TDSEntry."Nature of Remittance" := "Nature of Remittance";
          TDSEntry."Act Applicable" := "Act Applicable";
          TDSEntry."Country Code" := "Country Code";
          TDSEntry."Transaction No." := NextTransactionNo;
          TDSEntry."TDS %" := "TDS/TCS %";
          TDSEntry."Surcharge %" := "Surcharge %";
          TDSEntry."eCESS %" := "eCESS %";
          TDSEntry."SHE Cess %" := "SHE Cess % on TDS/TCS";
          TDSEntry."Work Tax Group" := "Work Tax Group";
          TDSEntry."Work Tax Nature Of Deduction" := "Work Tax Nature Of Deduction";
          TDSEntry."Work Tax %" := "Work Tax %";
          TDSEntry."TDS Section" := TDSGroup."TDS Section";
          TDSEntry."Non Resident Payments" := TDSGroup."Non Resident Payments";
          TDSEntry."Source Code" := "Source Code";
          IF TDSEntry."Party Type" = TDSEntry."Party Type"::Vendor THEN BEGIN
            Vendor.GET(TDSEntry."Party Code");
            TDSEntry."Deductee P.A.N. No." := Vendor."P.A.N. No.";
          END;
          IF TDSEntry."Party Type" = TDSEntry."Party Type"::Party THEN BEGIN
            TDSParty.GET(TDSEntry."Party Code");
            TDSEntry."Deductee P.A.N. No." := TDSParty."P.A.N. No.";
          END;
          IF "Balance Work Tax Amount" <> 0 THEN BEGIN
            TDSGroup.FindOnDate("Work Tax Group","Posting Date");
            TDSGroup.TESTFIELD("TDS Account");
            TDSEntry."Work Tax Account" := TDSGroup."TDS Account";
          END;

          TDSEntry."TDS Line Amount" := "TDS Line Amount";
          TDSEntry."TDS Base Amount" := ABS("TDS/TCS Base Amount");
          TDSEntry."TDS Amount" := ABS(ITAmountLCY);
          TDSEntry."Surcharge Base Amount" := ABS("Surcharge Base Amount");
          TDSEntry."Surcharge Amount" := ABS(SurchargeAmountLCY);
          TDSEntry."TDS Amount Including Surcharge" := ABS(ITAmountLCY + SurchargeAmountLCY);
          TDSEntry."eCESS Amount" := ABS(eCESSAmountLCY);
          TDSEntry."SHE Cess Amount" := ABS(SHECESSAmountLCY);
          TDSEntry."Total TDS Including SHE CESS" := ABS(TotalITAmountLCY);
          TDSEntry."Bal. TDS Including SHE CESS" := ABS(TotalITAmountLCY);
          IF "TDS From Orders" THEN
            TDSEntry."Invoice Amount" := ABS("Temp TDS/TCS Base")
          ELSE
            TDSEntry."Invoice Amount" := TDSEntry."TDS Base Amount";
          TDSEntry."Rem. Total TDS Incl. SHE CESS" := ABS(TotalITAmountLCY);
          TDSEntry."Remaining TDS Amount" := ABS(ITAmountLCY);
          TDSEntry."Remaining Surcharge Amount" := ABS(SurchargeAmountLCY);
          TDSEntry."Service Tax Including eCess" := ABS(FullServiceTaxAmount);
          TDSEntry."Work Tax Base Amount" := ABS("Work Tax Base Amount");
          TDSEntry."Work Tax Amount" := ABS(WorkTaxAmountLCY);
          TDSEntry."Balance Work Tax Amount" := ABS(WorkTaxAmountLCY);
          NODLines.RESET;
          NODLines.SETRANGE(Type,"Party Type");
          NODLines.SETRANGE("No.","Party Code");
          NODLines.SETRANGE("NOD/NOC","TDS Nature of Deduction");
          IF NODLines.FINDFIRST THEN BEGIN
            TDSEntry."Concessional Code" := NODLines."Concessional Code";
            TDSEntry."Concessional Form" := NODLines."Concessional Form No.";
          END;
          NatureofDeduction.GET("TDS Nature of Deduction");
          TDSEntry."TDS Category" := NatureofDeduction.Category;
          TDSEntry."Per Contract" := "Per Contract";
          IF NOT IsServTaxRevCharge THEN
            TDSEntry."Base Includes Service Tax" := "Include Serv. Tax in TDS Base";
          IF "Include Serv. Tax in TDS Base" THEN
            AmtInclServiceTax := ABS(Amount) + TDSEntry."Service Tax Including eCess"
          ELSE
            AmtInclServiceTax := ABS(Amount);

          IF "Applies-to Doc. No." <> '' THEN BEGIN
            FindAppliesToVendorLedgEntry(VendorLedgerEntry1);
            VendorLedgerEntry1.CALCFIELDS("Remaining Amount");
            IF ABS(AmtInclServiceTax) > ABS(VendorLedgerEntry1."Remaining Amount") THEN BEGIN
              TDSEntry1.RESET;
              TDSEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
              IF TDSEntry1.FINDFIRST THEN BEGIN
                TDSEntry1.Applied := TRUE;
                TDSEntry1.MODIFY;
              END;
            END ELSE
              TDSEntry.Applied := TRUE;
          END;
          IF "Applies-to ID" <> '' THEN BEGIN
            VendorLedgerEntry1.SetAppliesToIDFilter("Account No.","Applies-to ID");
            IF VendorLedgerEntry1.FINDSET THEN
              REPEAT
                VendorLedgerEntry1.CALCFIELDS("Remaining Amount");
                AppliedAmount := AppliedAmount + ABS(VendorLedgerEntry1."Remaining Amount");
              UNTIL VendorLedgerEntry1.NEXT = 0;

            IF ABS(AmtInclServiceTax) > AppliedAmount THEN BEGIN
              VendorLedgerEntry1.SetAppliesToIDFilter("Account No.","Applies-to ID");
              IF VendorLedgerEntry1.FINDSET THEN
                REPEAT
                  TDSEntry1.RESET;
                  TDSEntry1.SETRANGE("Document No.",VendorLedgerEntry1."Document No.");
                  IF TDSEntry1.FINDFIRST THEN BEGIN
                    TDSEntry1.Applied := TRUE;
                    TDSEntry1.MODIFY;
                  END;
                UNTIL VendorLedgerEntry1.NEXT = 0
            END ELSE
              TDSEntry.Applied := TRUE;
          END;
          IF "T.A.N. No." <> '' THEN
            TDSEntry."T.A.N. No." := "T.A.N. No."
          ELSE
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF Location."T.A.N. No." <> '' THEN
                TDSEntry."T.A.N. No." := Location."T.A.N. No."
            END ELSE BEGIN
              CompanyInfo.GET;
              TDSEntry."T.A.N. No." := CompanyInfo."T.A.N. No.";
            END;
          TDSEntry.TESTFIELD("T.A.N. No.");
          TDSEntry."Original TDS Base Amount" := TDSEntry."TDS Base Amount";
          TDSEntry.CalcNilChallanIndicator;
          TDSEntry.INSERT(TRUE);
          NextTDSEntryNo := NextTDSEntryNo + 1;
          FormManagement.InsertIntoBatchHeader(TDSEntry,"Posting Date");
        END;
    END;

    LOCAL PROCEDURE InsertWorkTax@1280004(VAR GenJnlLine@1280000 : Record 81);
    VAR
      TDSEntry@1280001 : Record 13729;
      TDSGroup@1280003 : Record 13731;
      NODLines@1280004 : Record 13785;
      CompanyInfo@1280005 : Record 79;
      Location@1280006 : Record 14;
    BEGIN
      WITH GenJnlLine DO
        IF "TDS Nature of Deduction" = '' THEN
          IF ("Work Tax Nature Of Deduction" <> '') AND ("Assessee Code" <> '') THEN BEGIN
            TDSEntry.INIT;
            TDSEntry."Entry No." := NextTDSEntryNo;
            TDSEntry."Document Type" := "Document Type";
            TDSEntry."Document No." := "Document No.";
            TDSEntry."Posting Date" := "Posting Date";
            TDSEntry."Account Type" := TDSEntry."Account Type"::"G/L Account";
            TDSEntry.Description := Description;
            TDSEntry."Party Type" := "Party Type";
            TDSEntry."Party Code" := "Party Code";
            TDSEntry."TDS Group" := "TDS Group";
            TDSEntry."TDS Nature of Deduction" := "TDS Nature of Deduction";
            TDSEntry."Assessee Code" := "Assessee Code";
            TDSEntry."Transaction No." := NextTransactionNo;
            TDSEntry."Party Account No." := "Account No.";
            TDSEntry."Work Tax Group" := "Work Tax Group";
            TDSEntry."Work Tax Nature Of Deduction" := "Work Tax Nature Of Deduction";
            TDSEntry."Work Tax %" := "Work Tax %";
            IF "Balance Work Tax Amount" <> 0 THEN BEGIN
              TDSGroup.FindOnDate("Work Tax Group","Posting Date");
              TDSGroup.TESTFIELD("TDS Account");
              TDSEntry."Work Tax Account" := TDSGroup."TDS Account";
            END;
            TDSEntry."Work Tax Base Amount" := ABS("Work Tax Base Amount");
            TDSEntry."Work Tax Amount" := ABS(WorkTaxAmountLCY);
            TDSEntry."Balance Work Tax Amount" := ABS(WorkTaxAmountLCY);
            IF NOT IsServTaxRevCharge THEN
              TDSEntry."Base Includes Service Tax" := "Include Serv. Tax in TDS Base";
            NODLines.RESET;
            NODLines.SETRANGE(Type,"Party Type");
            NODLines.SETRANGE("No.","Party Code");
            NODLines.SETRANGE("NOD/NOC","Work Tax Nature Of Deduction");
            IF NODLines.FINDFIRST THEN BEGIN
              TDSEntry."Concessional Code" := NODLines."Concessional Code";
              TDSEntry."Concessional Form" := NODLines."Concessional Form No.";
            END;
            IF "T.A.N. No." <> '' THEN
              TDSEntry."T.A.N. No." := "T.A.N. No."
            ELSE
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."T.A.N. No." <> '' THEN
                  TDSEntry."T.A.N. No." := Location."T.A.N. No."
              END ELSE BEGIN
                CompanyInfo.GET;
                TDSEntry."T.A.N. No." := CompanyInfo."T.A.N. No.";
              END;
            TDSEntry.INSERT(TRUE);
            NextTDSEntryNo := NextTDSEntryNo + 1;
          END;
    END;

    LOCAL PROCEDURE PostServiceTaxPaymentCust@1500000(GenJnlLine@1500006 : Record 81;NewCVLedgEntryBuf@1280002 : Record 382;OldCVLedgEntryBuf@1280001 : Record 382;AppliedAmountLCY@1280000 : Decimal;Cust@1500007 : Record 18);
    VAR
      CustPostingGr@1500008 : Record 92;
      ServiceTaxEntry@1280007 : Record 16473;
      ServiceTaxSetup@1500000 : Record 16472;
      AmountToBeApplied@1280005 : Decimal;
      RemainingAmount@1280004 : Decimal;
      AppliedServiceTaxAmount@1280003 : Decimal;
      AppliedServiceTaxEcessAmount@1280008 : Decimal;
      SourceCurrServiceTaxAmt@1500002 : Decimal;
      AmounttobePosted@1500001 : Decimal;
      AppliedServiceTaxSHEcessAmount@1500003 : Decimal;
      AmounttobePostedPmtTol@1500004 : Decimal;
      LineNo@1500044 : Integer;
      AppliedServiceTaxSBCAmount@1500433 : Decimal;
      SourceCurrServiceTaxSBCAmt@1500435 : Decimal;
      AmounttobePostedPmtTolSBC@1500437 : Decimal;
      AppliedKKCessAmount@1500010 : Decimal;
      SourceCurrKKCessAmt@1500009 : Decimal;
      AmounttobePostedPmtTolKKCess@1500005 : Decimal;
    BEGIN
      LineNo := 10000;
      GenJnlLineTmp.RESET;
      IF GenJnlLineTmp.FINDLAST THEN
        LineNo := GenJnlLineTmp."Line No." + 10000;
      IF GenJnlLine."Offline Application" AND (NewCVLedgEntryBuf."Currency Code" <> '') THEN BEGIN
        GenJnlLine."Currency Code" := NewCVLedgEntryBuf."Currency Code";
        GenJnlLine."Currency Factor" := NewCVLedgEntryBuf."Original Currency Factor";
      END;
      ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
      ServiceTaxEntry.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
      ServiceTaxEntry.SETRANGE("Posting Date",OldCVLedgEntryBuf."Posting Date");
      ServiceTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
      IF ServiceTaxEntry.FIND('-') THEN
        REPEAT
          ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
          IF NOT ServiceTaxEntry.PoT OR NOT GenJnlLine."Serv. Tax on Advance Payment" THEN
            RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid")
          ELSE
            RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax");
          IF RemainingAmount <> 0 THEN BEGIN
            IF ABS(RemainingAmount) >= ABS(AppliedAmountLCY) THEN
              AmountToBeApplied := AppliedAmountLCY
            ELSE
              AmountToBeApplied := RemainingAmount;
            AppliedAmountLCY := AppliedAmountLCY - AmountToBeApplied;
            IF ServiceTaxEntry."Amount Including Service Tax" <> 0 THEN
              AppliedServiceTaxAmount :=
                ((AmountToBeApplied / ServiceTaxEntry."Amount Including Service Tax") * ServiceTaxEntry.FullTaxAmount);
            IF (ServiceTaxEntry.FullTaxAmount) <> 0 THEN
              AppliedServiceTaxEcessAmount :=
                ((AppliedServiceTaxAmount * ServiceTaxEntry."eCess Amount") / ServiceTaxEntry.FullTaxAmount);
            IF (ServiceTaxEntry.FullTaxAmount) <> 0 THEN
              AppliedServiceTaxSHEcessAmount :=
                ((AppliedServiceTaxAmount * ServiceTaxEntry."SHE Cess Amount") / ServiceTaxEntry.FullTaxAmount);
            IF ServiceTaxEntry."Amount Including Service Tax" <> 0 THEN
              AppliedServiceTaxSBCAmount :=
                ((AmountToBeApplied / ServiceTaxEntry."Amount Including Service Tax") * (ServiceTaxEntry.FullTaxSBCAmount));
            IF ServiceTaxEntry."Amount Including Service Tax" <> 0 THEN
              AppliedKKCessAmount :=
                ((AmountToBeApplied / ServiceTaxEntry."Amount Including Service Tax") * (ServiceTaxEntry.KKCessAmount));


            AppliedServiceTaxSHEcessAmount := ROUND(AppliedServiceTaxSHEcessAmount);
            AppliedServiceTaxEcessAmount := ROUND(AppliedServiceTaxEcessAmount);
            AppliedServiceTaxAmount := ROUND(AppliedServiceTaxAmount - AppliedServiceTaxEcessAmount - AppliedServiceTaxSHEcessAmount);
            AppliedServiceTaxSBCAmount := ROUND(AppliedServiceTaxSBCAmount);
            AppliedKKCessAmount := ROUND(AppliedKKCessAmount);

            ServiceTaxMgt.CheckCustInvoiceSTAmt(NewCVLedgEntryBuf,OldCVLedgEntryBuf,AppliedServiceTaxAmount,AppliedServiceTaxEcessAmount,
              AppliedServiceTaxSHEcessAmount,AppliedServiceTaxSBCAmount,AppliedKKCessAmount,AmountToBeApplied,
              ServiceTaxEntry."Service Tax Group Code",ServiceTaxEntry."Service Tax Registration No.",ServiceTaxEntry."Entry No.");
            AmounttobePosted := AppliedServiceTaxAmount + AppliedServiceTaxEcessAmount + AppliedServiceTaxSHEcessAmount;
            IF (PmtTolAmt > 0) AND (AppliedAmountLCY - PmtTolAmt > 0) THEN BEGIN
              AppliedAmountLCY -= PmtTolAmt;
              IF RemainingAmount > 0 THEN BEGIN
                IF RemainingAmount >= AppliedAmountLCY THEN
                  AmountToBeApplied := AppliedAmountLCY
                ELSE
                  AmountToBeApplied := RemainingAmount;
                AppliedAmountLCY := AppliedAmountLCY - AmountToBeApplied;
                IF ServiceTaxEntry."Amount Including Service Tax" <> 0 THEN
                  AppliedServiceTaxAmount :=
                    ((AmountToBeApplied / ServiceTaxEntry."Amount Including Service Tax") *
                    ServiceTaxEntry.FullTaxAmount);
                IF (ServiceTaxEntry.FullTaxAmount) <> 0 THEN
                  AppliedServiceTaxEcessAmount :=
                    ((AppliedServiceTaxAmount * ServiceTaxEntry."eCess Amount") / ServiceTaxEntry.FullTaxAmount);
                IF (ServiceTaxEntry.FullTaxAmount) <> 0 THEN
                  AppliedServiceTaxSHEcessAmount :=
                    ((AppliedServiceTaxAmount * ServiceTaxEntry."SHE Cess Amount") / ServiceTaxEntry.FullTaxAmount);
                IF ServiceTaxEntry."Amount Including Service Tax" <> 0 THEN
                  AppliedServiceTaxSBCAmount :=
                    ((AmountToBeApplied / ServiceTaxEntry."Amount Including Service Tax") *
                    ServiceTaxEntry.FullTaxSBCAmount);
                IF ServiceTaxEntry."Amount Including Service Tax" <> 0 THEN
                  AppliedKKCessAmount :=
                    ((AmountToBeApplied / ServiceTaxEntry."Amount Including Service Tax") *
                    ServiceTaxEntry.KKCessAmount);

                AppliedServiceTaxSHEcessAmount := ROUND(AppliedServiceTaxSHEcessAmount);
                AppliedServiceTaxEcessAmount := ROUND(AppliedServiceTaxEcessAmount);
                AppliedServiceTaxAmount :=
                  ROUND(AppliedServiceTaxAmount - AppliedServiceTaxEcessAmount - AppliedServiceTaxSHEcessAmount
                    );
                AppliedServiceTaxSBCAmount := ROUND(AppliedServiceTaxSBCAmount);
                AppliedKKCessAmount := ROUND(AppliedKKCessAmount);
                AmounttobePostedPmtTol := AppliedServiceTaxAmount + AppliedServiceTaxEcessAmount + AppliedServiceTaxSHEcessAmount;
                AmounttobePostedPmtTolSBC := AppliedServiceTaxSBCAmount;
                AmounttobePostedPmtTolKKCess := AppliedKKCessAmount;
              END;
            END ELSE
              AppliedAmountLCY := AppliedAmountLCY - AmountToBeApplied;
            ServiceTaxSetup.FindOnDate(ServiceTaxEntry."Service Tax Group Code",NewCVLedgEntryBuf."Posting Date");
            ServiceTaxSetup.TESTFIELD("Service Tax Payable Account");

            GetGLSetup;
            IF AddCurrencyCode <> '' THEN
              IF GenJnlLine."Source Currency Code" = AddCurrencyCode THEN BEGIN
                SourceCurrServiceTaxAmt :=
                  ROUND(
                    CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(AmounttobePosted,GenJnlLine."Currency Factor"),
                    AddCurrency."Amount Rounding Precision");
                SourceCurrServiceTaxSBCAmt :=
                  ROUND(
                    CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(AppliedServiceTaxSBCAmount,GenJnlLine."Currency Factor"),
                    AddCurrency."Amount Rounding Precision");
                SourceCurrKKCessAmt :=
                  ROUND(
                    CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(AppliedKKCessAmount,GenJnlLine."Currency Factor"),
                    AddCurrency."Amount Rounding Precision");
              END ELSE BEGIN
                SourceCurrServiceTaxAmt := CalcLCY2AddCurrencyST(GenJnlLine,AmounttobePosted);
                SourceCurrServiceTaxSBCAmt := CalcLCY2AddCurrencyST(GenJnlLine,AppliedServiceTaxSBCAmount);
                SourceCurrKKCessAmt := CalcLCY2AddCurrencyST(GenJnlLine,AppliedKKCessAmount);
              END;
            IF (GenJnlLine."Document Type" = GenJnlLine."Document Type"::Payment) OR
               ServiceTaxExists(NewCVLedgEntryBuf,OldCVLedgEntryBuf)
            THEN BEGIN
              IF AmounttobePosted <> 0 THEN BEGIN
                UpdateAmtTobePosted(OldCVLedgEntryBuf,ServiceTaxEntry,AmounttobePosted,FALSE);
                IF AmounttobePostedPmtTol = 0 THEN
                  InsertAppSTGenJnlLineTmp(ServiceTaxSetup."Service Tax Payable Account",-AmounttobePosted,
                    -SourceCurrServiceTaxAmt,LineNo)
                ELSE
                  InsertAppSTGenJnlLineTmp(ServiceTaxSetup."Service Tax Payable Account",-AmounttobePostedPmtTol,
                    -SourceCurrServiceTaxAmt,LineNo);
                InsertAppSTGenJnlLineTmp(ServiceTaxEntry."G/L Account No.",AmounttobePosted,
                  SourceCurrServiceTaxAmt,LineNo);

                IF (AmounttobePostedPmtTolSBC = 0) THEN
                  IF AppliedServiceTaxSBCAmount <> 0 THEN
                    InsertAppSTGenJnlLineTmp(ServiceTaxSetup."SB Cess Payable Account",-AppliedServiceTaxSBCAmount,-
                      SourceCurrServiceTaxSBCAmt,LineNo)
                ELSE
                  InsertAppSTGenJnlLineTmp(ServiceTaxSetup."SB Cess Payable Account",-AmounttobePostedPmtTolSBC,
                    -SourceCurrServiceTaxSBCAmt,LineNo);
                IF AppliedServiceTaxSBCAmount <> 0 THEN
                  InsertAppSTGenJnlLineTmp(ServiceTaxEntry."SBC G/L Account",AppliedServiceTaxSBCAmount,
                  SourceCurrServiceTaxSBCAmt,LineNo);

                IF AmounttobePostedPmtTolKKCess = 0 THEN
                  IF AppliedKKCessAmount <> 0 THEN
                    InsertAppSTGenJnlLineTmp(ServiceTaxSetup."KK Cess Payable Account",-AppliedKKCessAmount,-
                      SourceCurrKKCessAmt,LineNo)
                ELSE
                  InsertAppSTGenJnlLineTmp(ServiceTaxSetup."KK Cess Payable Account",-AmounttobePostedPmtTolKKCess,-
                    SourceCurrKKCessAmt,LineNo);
                IF AppliedKKCessAmount <> 0 THEN
                  InsertAppSTGenJnlLineTmp(ServiceTaxEntry."KK Cess G/L Account",AppliedKKCessAmount,
                    SourceCurrKKCessAmt,LineNo);

                IF AmounttobePostedPmtTol <> 0 THEN BEGIN
                  CustPostingGr.GET(Cust."Customer Posting Group");
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  CreateGLEntry(GenJnlLine,CustPostingGr."Payment Tolerance Debit Acc.",-(AmounttobePosted - AmounttobePostedPmtTol),
                    -(AmounttobePosted - AmounttobePostedPmtTol),TRUE,TRUE);
                END;
                IF AmounttobePostedPmtTolSBC <> 0 THEN BEGIN
                  CustPostingGr.GET(Cust."Customer Posting Group");
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  CreateGLEntry(GenJnlLine,CustPostingGr."Payment Tolerance Debit Acc.",-(AppliedServiceTaxSBCAmount - AmounttobePostedPmtTolSBC),
                    -(AppliedServiceTaxSBCAmount - AmounttobePostedPmtTolSBC),TRUE,TRUE);
                END;
                IF AmounttobePostedPmtTolKKCess <> 0 THEN BEGIN
                  CustPostingGr.GET(Cust."Customer Posting Group");
                  CustPostingGr.TESTFIELD("Payment Tolerance Debit Acc.");
                  CreateGLEntry(GenJnlLine,CustPostingGr."Payment Tolerance Debit Acc.",-(AppliedKKCessAmount - AmounttobePostedPmtTolKKCess),
                    -(AppliedKKCessAmount - AmounttobePostedPmtTolKKCess),TRUE,TRUE);
                END;

                IF GenJnlLine."Currency Code" <> '' THEN
                  IF NOT GenJnlLine."Serv. Tax on Advance Payment" THEN
                    InitCustServTaxCurrDiff(GenJnlLine,ServiceTaxEntry,ServiceTaxSetup."Service Tax Payable Account",
                      ServiceTaxSetup."KK Cess Payable Account");
                FillCustSvcTaxPostingBuffer(ServiceTaxEntry,NewSTBase,NewServTaxAmt,NewServTaxECessAmt,NewServTaxSheCessAmt,
                  NewServTaxSBCAmt,NewKKCessAmt);
                END;
            END ELSE
              IF AmounttobePosted <> 0 THEN BEGIN
                InsertAppSTGenJnlLineTmp(ServiceTaxSetup."Service Tax Payable Account",AmounttobePosted,
                  SourceCurrServiceTaxAmt,LineNo);
                InsertAppSTGenJnlLineTmp(ServiceTaxEntry."G/L Account No.",-AmounttobePosted,
                  -SourceCurrServiceTaxAmt,LineNo);
                IF AppliedServiceTaxSBCAmount <> 0 THEN BEGIN
                  InsertAppSTGenJnlLineTmp(ServiceTaxSetup."SB Cess Payable Account",AppliedServiceTaxSBCAmount,
                    SourceCurrServiceTaxSBCAmt,LineNo);
                  InsertAppSTGenJnlLineTmp(ServiceTaxEntry."SBC G/L Account",-AppliedServiceTaxSBCAmount,
                    -SourceCurrServiceTaxSBCAmt,LineNo);
                END;
                IF AppliedKKCessAmount <> 0 THEN BEGIN
                  InsertAppSTGenJnlLineTmp(ServiceTaxSetup."KK Cess Payable Account",AppliedKKCessAmount,
                    SourceCurrKKCessAmt,LineNo);
                  InsertAppSTGenJnlLineTmp(ServiceTaxEntry."KK Cess G/L Account",-AppliedKKCessAmount,-
                    SourceCurrKKCessAmt,LineNo);
                END;

              END;
          END;
        UNTIL ((ServiceTaxEntry.NEXT = 0) OR (AppliedAmountLCY = 0));
    END;

    PROCEDURE GetChallanDetailRecNo@1500022(Quarter@1500001 : Integer;FinancialYear@1500002 : Code[6];NRIPayment@1500003 : Boolean;TANNo@1500004 : Code[10]) : Integer;
    VAR
      ChallanReg@1500000 : Record 16504;
    BEGIN
      ChallanReg.RESET;
      ChallanReg.SETRANGE(Quarter,Quarter);
      ChallanReg.SETRANGE("Financial Year",FinancialYear);
      ChallanReg.SETRANGE("Non Resident Payment",NRIPayment);
      ChallanReg.SETRANGE("T.A.N. No.",TANNo);
      IF ChallanReg.FINDLAST THEN
        EXIT(ChallanReg.COUNT + 1);

      EXIT(1);
    END;

    LOCAL PROCEDURE InsertTCS@1500017(VAR GenJnlLine@1280000 : Record 81);
    VAR
      NOCLines@1280016 : Record 13785;
      TCSEntry1@1280013 : Record 16514;
      CustLedgerEntry1@1280012 : Record 25;
      CompanyInfo@1280001 : Record 79;
      NatureofCollection@1280003 : Record 16507;
      Location@1280006 : Record 14;
      TCSParty@1500000 : Record 13730;
      Cust@1500001 : Record 18;
      AppliedAmount@1500002 : Decimal;
    BEGIN
      WITH GenJnlLine DO
        IF ("TCS Nature of Collection" <> '') AND ("Assessee Code" <> '') THEN BEGIN
          CLEAR(AppliedAmount);
          TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
          TCSSetup.SETRANGE("Assessee Code","Assessee Code");
          TCSSetup.SETRANGE("Concessional Code","Concessional Code");
          TCSSetup.SETRANGE("Effective Date",0D,"Posting Date");
          TCSSetup.FINDLAST;
          TCSSetup.TESTFIELD("TCS Account No.");

          TCSEntry.INIT;
          TCSEntry."Entry No." := NextTCSEntryNo;
          TCSEntry."Document Type" := "Document Type";
          TCSEntry."Document No." := "Document No.";
          TCSEntry."Posting Date" := "Posting Date";
          TCSEntry."Account Type" := TCSEntry."Account Type"::"G/L Account";
          TCSEntry.Description := Description;
          TCSEntry."Account No." := TCSSetup."TCS Account No.";
          TCSEntry."Party Type" := "Party Type";
          TCSEntry."Party Code" := "Party Code";
          TCSEntry."Party Account No." := "Account No.";
          TCSEntry."TCS Type" := "TCS Type";
          TCSEntry."TCS Nature of Collection" := "TCS Nature of Collection";
          TCSEntry."Assessee Code" := "Assessee Code";
          TCSEntry."Transaction No." := NextTransactionNo;
          TCSEntry."TCS %" := "TDS/TCS %";
          TCSEntry."Surcharge %" := "Surcharge %";
          TCSEntry."eCESS %" := "eCESS %";
          TCSEntry."SHE Cess %" := "SHE Cess % on TDS/TCS";
          TCSEntry."Work Tax Group" := "Work Tax Group";
          TCSEntry."Work Tax Nature Of Collection" := "Work Tax Nature Of Deduction";
          TCSEntry."Work Tax %" := "Work Tax %";
          IF TCSEntry."Party Type" = TCSEntry."Party Type"::Customer THEN BEGIN
            Cust.GET(TCSEntry."Party Code");
            TCSEntry."Party P.A.N. No." := Cust."P.A.N. No.";
          END ELSE
            IF TCSEntry."Party Type" = TCSEntry."Party Type"::Party THEN BEGIN
              TCSParty.GET(TCSEntry."Party Code");
              TCSEntry."Party P.A.N. No." := TCSParty."P.A.N. No.";
            END;

          TCSEntry."TCS Base Amount" := ABS("TDS/TCS Base Amount");
          TCSEntry."TCS Amount" := ABS("TDS/TCS Amount");
          TCSEntry."Surcharge Base Amount" := ABS("Surcharge Base Amount");
          TCSEntry."Surcharge Amount" := ABS("Surcharge Amount");
          TCSEntry."TCS Amount Including Surcharge" := ABS("TDS/TCS Amt Incl Surcharge");
          TCSEntry."eCESS Amount" := ABS("eCESS on TDS/TCS Amount");
          TCSEntry."SHE Cess Amount" := ABS("SHE Cess on TDS/TCS Amount");
          TCSEntry."Total TCS Including SHE CESS" := ABS("Total TDS/TCS Incl. SHE CESS");
          TCSEntry."Bal. TCS Including SHE CESS" := ABS("Total TDS/TCS Incl. SHE CESS");
          IF "Document Type" <> "Document Type"::Payment THEN BEGIN
            IF "TCS From Orders" THEN
              TCSEntry."Invoice Amount" := ABS("Temp TDS/TCS Base")
            ELSE
              TCSEntry."Invoice Amount" := ABS("Amount (LCY)");
          END;
          TCSEntry."Rem. Total TCS Incl. SHE CESS" := ABS("Total TDS/TCS Incl. SHE CESS");
          TCSEntry."Remaining TCS Amount" := ABS("TDS/TCS Amount");
          TCSEntry."Remaining Surcharge Amount" := ABS("Surcharge Amount");

          TCSEntry."Rem. Total TCS Incl. SHE CESS" := ABS("Total TDS/TCS Incl. SHE CESS");
          TCSEntry."Remaining TCS Amount" := ABS("TDS/TCS Amount");
          TCSEntry."Remaining Surcharge Amount" := ABS("Surcharge Amount");
          TCSEntry."Service Tax Including eCess" := FullServiceTaxAmount;
          TCSEntry."Work Tax Base Amount" := "Work Tax Base Amount";
          TCSEntry."Work Tax Amount" := WorkTaxAmountLCY;
          TCSEntry."Balance Work Tax Amount" := WorkTaxAmountLCY;

          NOCLines.RESET;
          NOCLines.SETRANGE(Type,"Party Type");
          NOCLines.SETRANGE("No.","Party Code");
          NOCLines.SETRANGE("NOD/NOC","TCS Nature of Collection");
          IF NOCLines.FINDFIRST THEN BEGIN
            TCSEntry."Concessional Code" := NOCLines."Concessional Code";
            TCSEntry."Concessional Form" := NOCLines."Concessional Form No.";
          END;

          NatureofCollection.GET("TCS Nature of Collection");
          TCSEntry."Per Contract" := "Per Contract";
          IF "Applies-to Doc. No." <> '' THEN BEGIN
            CustLedgerEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
            IF CustLedgerEntry1.FIND('-') THEN BEGIN
              CustLedgerEntry1.CALCFIELDS("Remaining Amount");
              IF ABS(Amount) > ABS(CustLedgerEntry1."Remaining Amount") THEN BEGIN
                TCSEntry1.RESET;
                TCSEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
                IF TCSEntry1.FINDFIRST THEN BEGIN
                  TCSEntry1.Applied := TRUE;
                  TCSEntry1.MODIFY;
                END;
              END ELSE
                TCSEntry.Applied := TRUE;
            END;
          END;
          IF "Applies-to ID" <> '' THEN BEGIN
            CustLedgerEntry1.RESET;
            CustLedgerEntry1.SETRANGE("Applies-to ID","Applies-to ID");
            IF CustLedgerEntry1.FIND('-') THEN
              REPEAT
                CustLedgerEntry1.CALCFIELDS("Remaining Amount");
                AppliedAmount := AppliedAmount + ABS(CustLedgerEntry1."Remaining Amount");
              UNTIL CustLedgerEntry1.NEXT = 0;
            IF ABS(Amount) > AppliedAmount THEN BEGIN
              CustLedgerEntry1.RESET;
              CustLedgerEntry1.SETRANGE("Applies-to ID","Applies-to ID");
              IF CustLedgerEntry1.FIND('-') THEN
                REPEAT
                  TCSEntry1.RESET;
                  TCSEntry1.SETRANGE("Document No.",CustLedgerEntry1."Document No.");
                  IF TCSEntry1.FINDFIRST THEN BEGIN
                    TCSEntry1.Applied := TRUE;
                    TCSEntry1.MODIFY;
                  END;
                UNTIL CustLedgerEntry1.NEXT = 0
            END ELSE
              TCSEntry.Applied := TRUE;
          END;
          IF "T.C.A.N. No." <> '' THEN
            TCSEntry."T.C.A.N. No." := "T.C.A.N. No."
          ELSE
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF Location."T.C.A.N. No." <> '' THEN
                TCSEntry."T.C.A.N. No." := Location."T.C.A.N. No."
            END ELSE BEGIN
              CompanyInfo.GET;
              TCSEntry."T.C.A.N. No." := CompanyInfo."T.C.A.N. No.";
            END;
          TESTFIELD("T.C.A.N. No.");

          TCSEntry4 := TCSEntry;
          FormManagement.InsertIntoTCSBatchHeader(TCSEntry4,"Posting Date");

          TCSEntry.INSERT(TRUE);
          NextTCSEntryNo := NextTCSEntryNo + 1;
        END;
    END;

    PROCEDURE GetTCSChallanDetailRecNo@1500003(Quarter@1500001 : Integer;FinancialYear@1500002 : Code[6];TCANNo@1500003 : Code[10]) : Integer;
    VAR
      TCSChallanRegister@1500000 : Record 16516;
    BEGIN
      TCSChallanRegister.RESET;
      TCSChallanRegister.SETRANGE(Quarter,Quarter);
      TCSChallanRegister.SETRANGE("Financial Year",FinancialYear);
      TCSChallanRegister.SETRANGE("T.C.A.N. No.",TCANNo);
      EXIT(TCSChallanRegister.COUNT + 1);
    END;

    PROCEDURE InsertFBT@1500013(VAR GenJnlLine@1500001 : Record 81);
    VAR
      FBTEntry@1500000 : Record 16541;
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GLAccount@1500005 : Record 15;
      FBTGroup@1500002 : Record 16538;
      DateInAccPeriod@1500004 : Boolean;
      FBTLiableAcc@1500006 : Boolean;
      FBTLiableBalAcc@1500007 : Boolean;
    BEGIN
      IncomeTaxAccountingPeriod.RESET;
      IncomeTaxAccountingPeriod.SETRANGE(Closed,FALSE);
      IF IncomeTaxAccountingPeriod.FINDSET THEN
        REPEAT
          IF ((GenJnlLine."Posting Date" >= IncomeTaxAccountingPeriod."Starting Date") AND
              (GenJnlLine."Posting Date" <= IncomeTaxAccountingPeriod."Ending Date"))
          THEN
            DateInAccPeriod := TRUE;
        UNTIL (IncomeTaxAccountingPeriod.NEXT = 0) OR DateInAccPeriod;

      IF DateInAccPeriod THEN BEGIN
        IF (NOT GenJnlLine."Excise Posting") AND
           (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account") AND
           (GenJnlLine."Account No." <> '')
        THEN
          IF GLAccount.GET(GenJnlLine."Account No.") THEN
            IF GLAccount."FBT Group Code" <> '' THEN BEGIN
              FBTGroup.GET(GLAccount."FBT Group Code");
              FBTLiableAcc := TRUE;
            END ELSE
              IF (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"G/L Account") AND
                 (GenJnlLine."Bal. Account No." <> '')
              THEN BEGIN
                IF GLAccount.GET(GenJnlLine."Bal. Account No.") THEN;
                IF GLAccount."FBT Group Code" <> '' THEN BEGIN
                  FBTGroup.GET(GLAccount."FBT Group Code");
                  FBTLiableBalAcc := TRUE;
                END;
              END;

        IF (FBTLiableAcc OR FBTLiableBalAcc) AND (GenJnlLine."Amount (LCY)" <> 0) THEN BEGIN
          FBTEntry.INIT;
          FBTEntry."Entry No." := NextFBTEntryNo;
          FBTEntry."FBT Group Code" := GLAccount."FBT Group Code";

          IF FBTLiableAcc THEN
            FBTEntry."G/L Account No." := GenJnlLine."Account No."
          ELSE
            FBTEntry."G/L Account No." := GenJnlLine."Bal. Account No.";

          IF FBTLiableAcc THEN
            FBTEntry.Amount := GenJnlLine."Amount (LCY)"
          ELSE
            FBTEntry.Amount := -GenJnlLine."Amount (LCY)";

          FBTEntry."Document Type" := GenJnlLine."Document Type";
          FBTEntry."Document No." := GenJnlLine."Document No.";
          FBTEntry."User ID" := USERID;
          FBTEntry."Posting Date" := GenJnlLine."Posting Date";
          FBTEntry."Global Dimension 1 Filter" := GenJnlLine."Shortcut Dimension 1 Code";
          FBTEntry."Global Dimension 2 Filter" := GenJnlLine."Shortcut Dimension 2 Code";
          FBTEntry.Description := GenJnlLine.Description;
          FBTEntry."Transaction No." := NextTransactionNo;
          FBTEntry."Source Code" := GenJnlLine."Source Code";
          FBTEntry.INSERT;
          NextFBTEntryNo := NextFBTEntryNo + 1;
        END;
      END;
    END;

    LOCAL PROCEDURE InitPostedNarration@1500014(VAR GenJnlLine@1500001 : Record 81;GLEntry@1500000 : Record 17);
    BEGIN
      IF (GenJnlLine."Journal Template Name" = '') AND (GenJnlLine."Journal Batch Name" = '') THEN
        EXIT;

      GenJnlNarration.RESET;
      GenJnlNarration.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlNarration.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlNarration.SETRANGE("Document No.",DocumentNo);
      GenJnlNarration.SETFILTER("Line No.",'<>%1',0);
      GenJnlNarration.SETRANGE("Gen. Journal Line No.",0);

      PostedNarration.RESET;
      PostedNarration.SETCURRENTKEY("Transaction No.");
      PostedNarration.SETRANGE("Transaction No.",GLEntry."Transaction No.");
      IF NOT PostedNarration.FINDFIRST THEN BEGIN
        IF GenJnlNarration.FINDSET THEN
          REPEAT
            InsertPostedNarrationVouchers(GLEntry);
          UNTIL GenJnlNarration.NEXT = 0;
      END;

      GenJnlNarration.SETRANGE("Gen. Journal Line No.",GenJnlLine."Line No.");
      IF GenJnlNarration.FINDSET THEN
        REPEAT
          InsertPostedNarrationLines(GLEntry);
        UNTIL GenJnlNarration.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertPostedNarrationVouchers@1500020(GLEntry@1500000 : Record 17);
    BEGIN
      PostedNarration.INIT;
      PostedNarration."Entry No." := 0;
      PostedNarration."Transaction No." := GLEntry."Transaction No.";
      PostedNarration."Line No." := GenJnlNarration."Line No.";
      PostedNarration."Posting Date" := GLEntry."Posting Date";
      PostedNarration."Document Type" := GLEntry."Document Type";
      PostedNarration."Document No." := GLEntry."Document No.";
      PostedNarration.Narration := GenJnlNarration.Narration;
      PostedNarration.INSERT;
    END;

    LOCAL PROCEDURE InsertPostedNarrationLines@1500015(GLEntry@1500000 : Record 17);
    BEGIN
      PostedNarration.INIT;
      PostedNarration."Entry No." := GLEntry."Entry No.";
      PostedNarration."Transaction No." := GLEntry."Transaction No.";
      PostedNarration."Line No." := GenJnlNarration."Line No.";
      PostedNarration."Posting Date" := GLEntry."Posting Date";
      PostedNarration."Document Type" := GLEntry."Document Type";
      PostedNarration."Document No." := GLEntry."Document No.";
      PostedNarration.Narration := GenJnlNarration.Narration;
      PostedNarration.INSERT;
    END;

    PROCEDURE SetDocumentNo@1500019(DocNo@1500000 : Code[20]);
    BEGIN
      DocumentNo := DocNo;
    END;

    LOCAL PROCEDURE PostSTReceivableAccount@1500040(GenJnlLine@1500001 : Record 81);
    VAR
      ServiceTaxPayBuffer@1500000 : Record 16476;
      ExciseAmt@1500002 : Decimal;
      SourceCurrExciseAmt@1500003 : Decimal;
      ServiceTaxSetup@1500004 : Record 16472;
    BEGIN
      WITH GenJnlLine DO BEGIN
        STaxPostingBuffer[1].DELETEALL;
        ServiceTaxPayBuffer.RESET;
        IF SalesDocumentNo <> '' THEN
          ServiceTaxPayBuffer.SETRANGE("Document No.",SalesDocumentNo)
        ELSE
          ServiceTaxPayBuffer.SETRANGE("Document No.","Document No.");
        ServiceTaxPayBuffer.SETFILTER("Service Tax Group Code",'<>%1','');
        IF ServiceTaxPayBuffer.FINDSET THEN
          REPEAT
            ExciseAmt :=
              ROUND(ServiceTaxPayBuffer."Credit Availed" + ServiceTaxPayBuffer."Credit Availed (eCess)" +
                ServiceTaxPayBuffer."Credit Availed (SHECess)");
            IF ExciseAmt <> 0 THEN BEGIN
              GetGLSetup;
              IF AddCurrencyCode <> '' THEN
                SourceCurrExciseAmt := CalcLCYToAddCurr(ExciseAmt);
              ServiceTaxSetup.RESET;
              IF ServiceTaxSetup.FindOnDate(
                  ServiceTaxPayBuffer."Service Tax Group Code",ServiceTaxPayBuffer."Posting Date")
              THEN
                FillSTaxPostingBuffer(0,ServiceTaxSetup.GetRecAccNo,ExciseAmt,0,'',FALSE,'',SourceCurrExciseAmt);
            END;
          UNTIL ServiceTaxPayBuffer.NEXT = 0;
        IF STaxPostingBuffer[1].FINDSET THEN
          REPEAT
            CreateGLEntry(GenJnlLine,STaxPostingBuffer[1]."Account No.",STaxPostingBuffer[1].Amount,
              STaxPostingBuffer[1]."Additional Reporting Curr. Amt",TRUE,"System-Created Entry");
          UNTIL STaxPostingBuffer[1].NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillSTaxPostingBuffer@1500041(AccType@1500007 : 'GL,Bank';AccNo@1500006 : Code[20];Amount@1500004 : Decimal;LineNo@1500003 : Integer;ChqNo@1500002 : Code[10];STReverseCharge@1500001 : Boolean;BalAccNo@1500000 : Code[20];AdditionalReportingCurr@1500008 : Decimal);
    BEGIN
      STaxPostingBuffer[1].Type := AccType;
      IF AccType = AccType::Bank THEN
        STaxPostingBuffer[1]."Cheque No." := ChqNo;
      STaxPostingBuffer[1]."Account No." := AccNo;
      STaxPostingBuffer[1].Amount := -Amount;
      STaxPostingBuffer[1]."Additional Reporting Curr. Amt" := -AdditionalReportingCurr;
      STaxPostingBuffer[1]."System-Created Entry" := TRUE;
      STaxPostingBuffer[1]."Serv. Tax Reverse Charge" := STReverseCharge;
      STaxPostingBuffer[1]."Bal. Account No." := BalAccNo;
      STaxPostingBuffer[2] := STaxPostingBuffer[1];
      IF STaxPostingBuffer[2].FIND THEN BEGIN
        STaxPostingBuffer[2].Amount := STaxPostingBuffer[2].Amount + STaxPostingBuffer[1].Amount;
        STaxPostingBuffer[2]."Additional Reporting Curr. Amt" := STaxPostingBuffer[2]."Additional Reporting Curr. Amt" +
          STaxPostingBuffer[1]."Additional Reporting Curr. Amt";
        STaxPostingBuffer[2].MODIFY;
      END ELSE
        STaxPostingBuffer[1].INSERT;
    END;

    PROCEDURE GetTransactionNo@1500123(VAR TransactionNo@1500000 : Integer);
    BEGIN
      TransactionNo := NextTransactionNo;
    END;

    LOCAL PROCEDURE InsertDetailSTDeferment@1500024(ExciseEntryRec@1500002 : Record 13712;DeferredExciseBuffer@1500006 : Record 13706);
    VAR
      DetailSTDeferment@1500000 : Record 16572;
      NextDetailSTDefermentEntryNo@1500001 : Integer;
      PostedPurchInvoice@1500003 : Record 122;
      Vendor@1500004 : Record 23;
      ECCNoRec@1500005 : Record 13708;
    BEGIN
      DetailSTDeferment.LOCKTABLE;
      IF DetailSTDeferment.FINDLAST THEN
        NextDetailSTDefermentEntryNo := DetailSTDeferment."Entry No." + 1
      ELSE
        NextDetailSTDefermentEntryNo := 1;

      DetailSTDeferment.INIT;
      DetailSTDeferment."Entry No." := NextDetailSTDefermentEntryNo;
      DetailSTDeferment."Excise Entry No." := ExciseEntryRec."Entry No.";
      DetailSTDeferment."Posting Date" := ExciseEntryRec."Posting Date";
      DetailSTDeferment."Document Type" := ExciseEntryRec."Document Type";
      DetailSTDeferment."Document No." := ExciseEntryRec."Document No.";
      DetailSTDeferment."Excise Bus. Posting Group" := ExciseEntryRec."Excise Bus. Posting Group";
      DetailSTDeferment."Excise Prod. Posting Group" := ExciseEntryRec."Excise Prod. Posting Group";
      DetailSTDeferment."BED Amount" := DeferredExciseBuffer."BED Amount";
      DetailSTDeferment."AED(GSI) Amount" := DeferredExciseBuffer."AED(GSI) Amount";
      DetailSTDeferment."SED Amount" := DeferredExciseBuffer."SED Amount";
      DetailSTDeferment."SAED Amount" := DeferredExciseBuffer."SAED Amount";
      DetailSTDeferment."NCCD Amount" := DeferredExciseBuffer."NCCD Amount";
      DetailSTDeferment."eCess Amount" := DeferredExciseBuffer."eCess Amount";
      DetailSTDeferment."ADET Amount" := DeferredExciseBuffer."ADET Amount";
      DetailSTDeferment."AED(TTA) Amount" := DeferredExciseBuffer."AED(TTA) Amount";
      DetailSTDeferment."ADE Amount" := DeferredExciseBuffer."ADE Amount";
      DetailSTDeferment."SHE Cess Amount" := DeferredExciseBuffer."SHE Cess Amount";

      DetailSTDeferment.Quantity := ExciseEntryRec."Remaining Quantity";
      DetailSTDeferment.Deferred := ExciseEntryRec.Deferred;
      DetailSTDeferment.CVD := ExciseEntryRec.CVD;
      DetailSTDeferment."E.C.C. No." := ExciseEntryRec."E.C.C. No.";
      IF PostedPurchInvoice.GET(DetailSTDeferment."Document No.") THEN BEGIN
        IF Vendor.GET(PostedPurchInvoice."Buy-from Vendor No.") THEN
          DetailSTDeferment."Vendor Type" := Vendor."Vendor Type";
      END;
      IF ECCNoRec.GET(DetailSTDeferment."E.C.C. No.") THEN
        DetailSTDeferment."Type of Unit" := ECCNoRec."Type of Unit";
      DetailSTDeferment.INSERT;
    END;

    PROCEDURE SetSalesHeaderNo@1500025(SalesDocNo@1500000 : Code[20]);
    BEGIN
      SalesDocumentNo := SalesDocNo;
    END;

    LOCAL PROCEDURE ReverseSTAmt@1500030(VAR GenJnlLine2@1500000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO
        IF ("Document Type" = "Document Type"::"Credit Memo") AND (NOT "System-Created Entry") THEN BEGIN
          "Service Tax Base Amount (LCY)" := - "Service Tax Base Amount (LCY)";
          "Service Tax Amount" := -"Service Tax Amount";
          "Service Tax eCess Amount" := -"Service Tax eCess Amount";
          "Service Tax SHE Cess Amount" := -"Service Tax SHE Cess Amount";
          "Service Tax SBC Amount" := -"Service Tax SBC Amount";
          "KK Cess Amount" := -"KK Cess Amount";
        END;
    END;

    LOCAL PROCEDURE RoundTDSAmount@1280019(TDSAmount@1280000 : Decimal) : Decimal;
    VAR
      TDSRoundingDirection@1280003 : Text[1];
      TDSRoundingPrecision@1280002 : Decimal;
    BEGIN
      GetGLSetup;
      CASE GLSetup."TDS Rounding Type" OF
        GLSetup."TDS Rounding Type"::Nearest:
          TDSRoundingDirection := '=';
        GLSetup."TDS Rounding Type"::Up:
          TDSRoundingDirection := '>';
        GLSetup."TDS Rounding Type"::Down:
          TDSRoundingDirection := '<';
      END;
      IF GLSetup."TDS Rounding Precision" <> 0 THEN
        TDSRoundingPrecision := GLSetup."TDS Rounding Precision"
      ELSE
        TDSRoundingPrecision := 0.01;
      EXIT(ROUND(TDSAmount,TDSRoundingPrecision,TDSRoundingDirection));
    END;

    LOCAL PROCEDURE ConvertTDSAmountstoLCY@1500031(GenJnlLine@1500000 : Record 81);
    BEGIN
      WITH GenJnlLine DO
        IF "Currency Code" <> '' THEN BEGIN
          IF "TDS/TCS Amount" <> 0 THEN
            ITAmountLCY :=
              RoundTDSAmount(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","TDS/TCS Amount","Currency Factor"))
          ELSE
            ITAmountLCY := 0;
          IF "Surcharge Amount" <> 0 THEN
            SurchargeAmountLCY :=
              RoundTDSAmount(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Surcharge Amount","Currency Factor"))
          ELSE
            SurchargeAmountLCY := 0;
          IF "eCESS on TDS/TCS Amount" <> 0 THEN
            eCESSAmountLCY :=
              RoundTDSAmount(
                CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","eCESS on TDS/TCS Amount","Currency Factor"))
          ELSE
            eCESSAmountLCY := 0;
          IF "SHE Cess on TDS/TCS Amount" <> 0 THEN
            SHECESSAmountLCY :=
              RoundTDSAmount
              (CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","SHE Cess on TDS/TCS Amount","Currency Factor"))
          ELSE
            SHECESSAmountLCY := 0;
          IF "Total TDS/TCS Incl. SHE CESS" <> 0 THEN
            TotalITAmountLCY := ITAmountLCY + SurchargeAmountLCY + eCESSAmountLCY + SHECESSAmountLCY
          ELSE
            TotalITAmountLCY := 0;
          IF "Work Tax Amount" <> 0 THEN
            WorkTaxAmountLCY :=
              RoundTDSAmount
              (CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Work Tax Amount","Currency Factor"))
          ELSE
            WorkTaxAmountLCY := 0;
        END ELSE BEGIN
          ITAmountLCY := "TDS/TCS Amount";
          SurchargeAmountLCY := "Surcharge Amount";
          eCESSAmountLCY := "eCESS on TDS/TCS Amount";
          SHECESSAmountLCY := "SHE Cess on TDS/TCS Amount";
          TotalITAmountLCY := "Total TDS/TCS Incl. SHE CESS";
          WorkTaxAmountLCY := "Work Tax Amount";
        END;
    END;

    LOCAL PROCEDURE PostVATTablePurchaseTax@1500032(GenJnlLine@1500000 : Record 81);
    VAR
      State@1500001 : Record 13762;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF "VATable Purchase Tax" = 0 THEN
          EXIT;
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          State.GET(Location."State Code");
        END ELSE BEGIN
          CompanyInfo.GET;
          State.GET(CompanyInfo.State);
        END;
        State.TESTFIELD("Tax Account (Sales)");
        CreateGLEntry(GenJnlLine,
          State."Tax Account (Sales)",-"VATable Purchase Tax",-"VATable Purchase Tax",TRUE,"System-Created Entry");
      END;
    END;

    LOCAL PROCEDURE InitCustServTaxCurrDiff@1500034(VAR GenJnlLineST@1500002 : Record 81;VAR AppServiceTaxEntry@1500004 : Record 16473;VAR STPayableAcc@1500000 : Code[20];VAR KKCessPayableAcc@1500003 : Code[20]);
    VAR
      LineBaseFCY@1500006 : Decimal;
      NewServTaxAmtFCY@1500008 : Decimal;
      NewServTaxECessAmtFCY@1500009 : Decimal;
      NewServTaxSheCessAmtFCY@1500011 : Decimal;
      CurrencyRec@1500015 : Record 4;
      CustLedgerEntry@1500021 : Record 21;
      ServiceTaxSetup@1500005 : Record 16472;
      VendLedgerEntry@1500007 : Record 25;
      PaymentFactor@1500012 : Decimal;
      CurrCode@1500014 : Code[10];
      CurrFactor@1500022 : Decimal;
      NewServTaxSBCAmtFCY@1500439 : Decimal;
      NewKKCessAmtFCY@1500001 : Decimal;
    BEGIN
      NewSTBase := 0;
      NewServTaxAmt := 0;
      NewServTaxECessAmt := 0;
      NewServTaxSheCessAmt := 0;
      NewServTaxSBCAmt := 0;
      NewKKCessAmt := 0;

      LineBaseFCY := 0;
      NewServTaxAmtFCY := 0;
      NewServTaxECessAmtFCY := 0;
      NewServTaxSheCessAmtFCY := 0;
      NewServTaxSBCAmtFCY := 0;
      NewKKCessAmtFCY := 0;
      // Calculate New Service Tax Entry Base
      CustLedgerEntry.RESET;
      VendLedgerEntry.RESET;
      CustLedgerEntry.SETRANGE("Document No.",AppServiceTaxEntry."Document No.");
      CustLedgerEntry.SETRANGE("Posting Date",AppServiceTaxEntry."Posting Date");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      IF CustLedgerEntry.FINDFIRST THEN BEGIN
        CustLedgerEntry.CALCFIELDS(Amount);
        CurrCode := CustLedgerEntry."Currency Code";
        CurrFactor := CustLedgerEntry."Original Currency Factor";
        AppliedAmtCurrDiff := ABS(AppliedAmtCurrDiff) * ABS(CustLedgerEntry."Amount to Apply") / CustLedgerEntry."Amount to Apply";
        IF CustLedgerEntry.Amount <> 0 THEN
          PaymentFactor := (AppliedAmtCurrDiff / CustLedgerEntry.Amount);
      END ELSE BEGIN
        VendLedgerEntry.SETRANGE("Document No.",AppServiceTaxEntry."Document No.");
        VendLedgerEntry.SETRANGE("Posting Date",AppServiceTaxEntry."Posting Date");
        VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
        IF VendLedgerEntry.FINDFIRST THEN BEGIN
          VendLedgerEntry.CALCFIELDS(Amount);
          CurrCode := VendLedgerEntry."Currency Code";
          CurrFactor := VendLedgerEntry."Original Currency Factor";
          CVEntryNoVendor := VendLedgerEntry."Entry No.";
          AppliedAmtCurrDiff :=
            ABS(AppliedAmtCurrDiff) * ABS(VendLedgerEntry."Amount to Apply") /
            VendLedgerEntry."Amount to Apply";
          IF VendLedgerEntry.Amount <> 0 THEN
            PaymentFactor := (AppliedAmtCurrDiff / VendLedgerEntry.Amount);
        END;
      END;
      IF GenJnlLineST."Currency Factor" < CurrFactor THEN
        CurrencyFactorCheck := TRUE;
      IF (CurrencyCode2 <> '') AND (CurrencyFactor2 <> 0) THEN BEGIN
        CurrCode := CurrencyCode2;
        CurrFactor := CurrencyFactor2;
      END;
      IF GenJnlLineST."Currency Factor" <> CurrFactor THEN BEGIN
        LineBaseFCY := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              AppServiceTaxEntry."Posting Date",CurrCode,
              AppServiceTaxEntry."Service Tax Base Amount",CurrFactor));
        NewSTBase := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GenJnlLineST."Posting Date",GenJnlLineST."Currency Code",
              LineBaseFCY,GenJnlLineST."Currency Factor"))
          - AppServiceTaxEntry."Service Tax Base Amount";
        CurrencyFactorCheck := (GenJnlLineST."Currency Factor" < CurrFactor);
      END;
      IF NewSTBase <> 0 THEN BEGIN
        NewServTaxAmtFCY := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              AppServiceTaxEntry."Posting Date",CurrCode,
              AppServiceTaxEntry."Service Tax Amount",CurrFactor));
        NewServTaxAmt := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GenJnlLineST."Posting Date",GenJnlLineST."Currency Code",
              NewServTaxAmtFCY,GenJnlLineST."Currency Factor"))
          - AppServiceTaxEntry."Service Tax Amount";

        NewServTaxECessAmtFCY := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              AppServiceTaxEntry."Posting Date",CurrCode,
              AppServiceTaxEntry."eCess Amount",CurrFactor));
        NewServTaxECessAmt := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GenJnlLineST."Posting Date",GenJnlLineST."Currency Code",
              NewServTaxECessAmtFCY,GenJnlLineST."Currency Factor"))
          - AppServiceTaxEntry."eCess Amount";

        NewServTaxSheCessAmtFCY := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              AppServiceTaxEntry."Posting Date",CurrCode,
              AppServiceTaxEntry."SHE Cess Amount",CurrFactor));
        NewServTaxSheCessAmt := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GenJnlLineST."Posting Date",GenJnlLineST."Currency Code",
              NewServTaxSheCessAmtFCY,GenJnlLineST."Currency Factor"))
          - AppServiceTaxEntry."SHE Cess Amount";
        NewServTaxSBCAmtFCY := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              AppServiceTaxEntry."Posting Date",CurrCode,
              AppServiceTaxEntry."Service Tax SBC Amount",CurrFactor));
        NewServTaxSBCAmt := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GenJnlLineST."Posting Date",GenJnlLineST."Currency Code",
              NewServTaxSBCAmtFCY,GenJnlLineST."Currency Factor"))
          - AppServiceTaxEntry."Service Tax SBC Amount";
        NewKKCessAmtFCY := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              AppServiceTaxEntry."Posting Date",CurrCode,
              AppServiceTaxEntry."KK Cess Amount",CurrFactor));
        NewKKCessAmt := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GenJnlLineST."Posting Date",GenJnlLineST."Currency Code",
              NewKKCessAmtFCY,GenJnlLineST."Currency Factor")) -
          AppServiceTaxEntry."KK Cess Amount";

        IF PaymentFactor <> 0 THEN BEGIN
          NewSTBase := ROUND(NewSTBase * PaymentFactor);
          NewServTaxAmt := ROUND(NewServTaxAmt * PaymentFactor);
          NewServTaxECessAmt := ROUND(NewServTaxECessAmt * PaymentFactor);
          NewServTaxSheCessAmt := ROUND(NewServTaxSheCessAmt * PaymentFactor);
          NewServTaxSBCAmt := ROUND(NewServTaxSBCAmt * PaymentFactor);
          NewKKCessAmt := ROUND(NewKKCessAmt * PaymentFactor);
        END;
        IF STAmtSignfactor <> 0 THEN BEGIN
          NewSTBase := NewSTBase * STAmtSignfactor;
          NewServTaxAmt := NewServTaxAmt * STAmtSignfactor;
          NewServTaxECessAmt := NewServTaxECessAmt * STAmtSignfactor;
          NewServTaxSheCessAmt := NewServTaxSheCessAmt * STAmtSignfactor;
          NewServTaxSBCAmt := NewServTaxSBCAmt * STAmtSignfactor;
          NewKKCessAmt := NewKKCessAmt * STAmtSignfactor;
        END;

      ServiceTaxSetup.FindOnDate(AppServiceTaxEntry."Service Tax Group Code",GenJnlLineST."Posting Date");
        CurrencyRec.GET(GenJnlLineST."Currency Code");

      STRevChargeServType := AppServiceTaxEntry."Service Type (Rev. Chrg.)";

        // Insert Difference Entries
        WITH GenJnlLineST DO BEGIN
          IF AppServiceTaxEntry."Reverse Charge" THEN BEGIN
            IF AppServiceTaxEntry."Service Type (Rev. Chrg.)" <> AppServiceTaxEntry."Service Type (Rev. Chrg.)"::Outward THEN BEGIN
              CreateGLEntry(GenJnlLineST,STPayableAcc,
                -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                TRUE,"System-Created Entry");
              IF NewServTaxSBCAmt <> 0 THEN
              CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetPaySBCAccNo,
                -(NewServTaxSBCAmt),
                -(NewServTaxSBCAmt),
                TRUE,"System-Created Entry");
              IF NewKKCessAmt <> 0 THEN
                CreateGLEntry(GenJnlLineST,KKCessPayableAcc,-NewKKCessAmt,-NewKKCessAmt,TRUE,"System-Created Entry");
            END ELSE
            BEGIN
              CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetPayAccNo,
                -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                TRUE,"System-Created Entry") ;
              IF NewServTaxSBCAmt <> 0 THEN
              CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetPaySBCAccNo,
                -(NewServTaxSBCAmt),
                -(NewServTaxSBCAmt),
                TRUE,"System-Created Entry");
              IF NewKKCessAmt <> 0 THEN
                CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetKKCessPayAccNo,-NewKKCessAmt,-NewKKCessAmt,TRUE,"System-Created Entry");
            END;
          END ELSE BEGIN
            CreateGLEntry(GenJnlLineST,STPayableAcc,
              NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt,
              NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt,
              TRUE,"System-Created Entry");
            IF NewServTaxSBCAmt <>  0 THEN
            CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetPaySBCAccNo,
              NewServTaxSBCAmt,
              NewServTaxSBCAmt,
              TRUE,"System-Created Entry");
            IF NewKKCessAmt <> 0 THEN
              CreateGLEntry(GenJnlLineST,KKCessPayableAcc,NewKKCessAmt,NewKKCessAmt,TRUE,"System-Created Entry");
          END;
          IF AppServiceTaxEntry."Reverse Charge" THEN BEGIN
            CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetRecInterimAccNo,
              NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt,
              NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt,
              TRUE,"System-Created Entry");
            IF NewServTaxSBCAmt <> 0 THEN
            CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetRecInterimSBCAccNo,
              NewServTaxSBCAmt,
              NewServTaxSBCAmt,
              TRUE,"System-Created Entry");
            IF NewKKCessAmt <> 0 THEN
              CreateGLEntry(GenJnlLineST,ServiceTaxSetup.GetKKCessRecInterimAccNo,NewKKCessAmt,NewKKCessAmt,TRUE,
                "System-Created Entry");
          END ELSE
            IF AppServiceTaxEntry.Type = AppServiceTaxEntry.Type::Sale THEN BEGIN
              IF "Currency Factor" < CurrFactor THEN BEGIN
                CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Gains Acc.",
                  -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                  -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                  TRUE,"System-Created Entry");
                IF NewServTaxSBCAmt <> 0 THEN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Gains Acc.",
                    -(NewServTaxSBCAmt),
                    -(NewServTaxSBCAmt),
                    TRUE,"System-Created Entry");
                IF NewKKCessAmt <> 0 THEN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Gains Acc.",-NewKKCessAmt,-NewKKCessAmt,TRUE,
                    "System-Created Entry");
              END ELSE BEGIN
                CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Losses Acc.",
                  -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                  -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                  TRUE,"System-Created Entry");
                IF NewServTaxSBCAmt <> 0 THEN
                CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Losses Acc.",
                  -(NewServTaxSBCAmt),
                   -(NewServTaxSBCAmt),
                  TRUE,"System-Created Entry");
                IF NewKKCessAmt <> 0 THEN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Losses Acc.",-NewKKCessAmt,-NewKKCessAmt,TRUE,
                    "System-Created Entry");
              END;
            END ELSE
              IF AppServiceTaxEntry.Type = AppServiceTaxEntry.Type::Purchase THEN BEGIN
                IF "Currency Factor" < CurrFactor THEN BEGIN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Losses Acc.",
                    -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                    -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                    TRUE,"System-Created Entry");
                  IF NewServTaxSBCAmt <> 0 THEN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Losses Acc.",
                    -(NewServTaxSBCAmt),
                    -(NewServTaxSBCAmt),
                    TRUE,"System-Created Entry");
                  IF NewKKCessAmt <> 0 THEN
                    CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Losses Acc.",-NewKKCessAmt,-NewKKCessAmt,TRUE,
                      "System-Created Entry");
                END ELSE BEGIN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Gains Acc.",
                    -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                    -(NewServTaxAmt + NewServTaxECessAmt + NewServTaxSheCessAmt),
                    TRUE,"System-Created Entry");
                  IF NewServTaxSBCAmt <> 0 THEN
                  CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Gains Acc.",
                    -(NewServTaxSBCAmt),
                    -(NewServTaxSBCAmt),
                    TRUE,"System-Created Entry");
                  IF NewKKCessAmt <> 0 THEN
                    CreateGLEntry(GenJnlLineST,CurrencyRec."Realized Gains Acc.",-NewKKCessAmt,-NewKKCessAmt,TRUE,
                      "System-Created Entry");
                END;
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostCustSrvTaxBuffer@1500033(GenJnlLine1@1500001 : Record 81;SrvTaxPostingBuff@1500002 : Record 16478;NewCVLedgEntryBuf@1500052 : Record 382;OldCVLedgEntryBuf@1500053 : Record 382);
    VAR
      GenJnlLineSTDiff@1500000 : TEMPORARY Record 81;
      ServiceTaxSetup@1500003 : Record 16472;
      NewCVLedgEntryBufST@1500005 : Record 382;
      OldCVLedgEntryBufST@1500004 : Record 382;
      SerTaxEntry@1500006 : Record 16473;
      STReverseChargeSetup@1500008 : Record 16461;
      Vend@1500018 : Record 23;
      Currency@1500019 : Record 4;
      EntryNo1@1500007 : Integer;
    BEGIN
      ServiceTaxSetup.FindOnDate(SvcTaxPostingBuffer[1]."Service Tax Group Code",GenJnlLine1."Posting Date");
      WITH GenJnlLine1 DO BEGIN
        GenJnlLineSTDiff.RESET;
        GenJnlLineSTDiff.INIT;
        GenJnlLineSTDiff."Posting Date" := "Posting Date";
        GenJnlLineSTDiff."Reason Code" := "Reason Code";
        GenJnlLineSTDiff."Service Tax Type" := SrvTaxPostingBuff.Type;
        GenJnlLineSTDiff."Account Type" := "Account Type";
        GenJnlLineSTDiff."Account No." := SrvTaxPostingBuff."Party Code";
        GenJnlLineSTDiff."Service Type (Rev. Chrg.)" := STRevChargeServType;
        GenJnlLineSTDiff."Bill-to/Pay-to No." := SvcTaxPostingBuffer[1]."Party Code";
        GenJnlLineSTDiff."Document Type" := "Document Type";
        GenJnlLineSTDiff."Document No." := "Document No.";
        GenJnlLineSTDiff.VALIDATE("Service Tax Group Code",SvcTaxPostingBuffer[1]."Service Tax Group Code");
        GenJnlLineSTDiff.VALIDATE("Service Tax Registration No.",SvcTaxPostingBuffer[1]."Service Tax Registration No.");
        GenJnlLineSTDiff."Service Tax Base Amount (LCY)" := SvcTaxPostingBuffer[1]."Service Tax Base Amount";
        GenJnlLineSTDiff."Service Tax Amount" := SvcTaxPostingBuffer[1]."Service Tax Amount";
        GenJnlLineSTDiff."Service Tax SBC Amount" := SvcTaxPostingBuffer[1]."Service Tax SBC Amount";
        GenJnlLineSTDiff."SBC G/L Account" := SvcTaxPostingBuffer[1]."SBC G/L Account";
        GenJnlLineSTDiff."KK Cess Amount" := SvcTaxPostingBuffer[1]."KK Cess Amount";
        GenJnlLineSTDiff."KK Cess G/L Account" := SvcTaxPostingBuffer[1]."KK Cess G/L Account";
        GenJnlLineSTDiff."Service Tax eCess Amount" := SvcTaxPostingBuffer[1]."Service Tax eCess Amount";
        GenJnlLineSTDiff."Service Tax SHE Cess Amount" := SvcTaxPostingBuffer[1]."Service Tax SHE Cess Amount";
        GenJnlLineSTDiff."External Document No." := "External Document No.";
        GenJnlLineSTDiff."From Excise" := "From Excise";
        GenJnlLineSTDiff.Amount := SvcTaxPostingBuffer[1]."Service Tax Base Amount";
        GenJnlLineSTDiff."E.C.C. No." := SvcTaxPostingBuffer[1]."Location E.C.C. No.";
        GenJnlLineSTDiff."Serv. Tax on Advance Payment" := "Serv. Tax on Advance Payment";
        GenJnlLineSTDiff."Location Code" := "Location Code";
        GenJnlLineSTDiff."ST Pure Agent" := "ST Pure Agent";
        GenJnlLineSTDiff."System-Created Entry" := TRUE;
        ServiceTaxMgt.InsertSalesEntry(GenJnlLineSTDiff,NextTransactionNo,ServiceTaxSetup.GetRecAccNo,
          ServiceTaxSetup.GetRecSBCAccNo,ServiceTaxSetup.GetKKCessRecAccNo);
      END;

      // Insert Det Serv Tax Entry
      OldCVLedgEntryBufST.INIT;
      OldCVLedgEntryBufST."Posting Date" := GenJnlLine1."Posting Date";
      OldCVLedgEntryBufST."Document Type" := GenJnlLine1."Document Type";
      OldCVLedgEntryBufST."Document No." := GenJnlLine1."Document No.";
      OldCVLedgEntryBufST."Transaction No." := NextTransactionNo;
      OldCVLedgEntryBufST."Entry No." := CVEntryNoVendor;

      NewCVLedgEntryBufST.INIT;
      NewCVLedgEntryBufST."Posting Date" := GenJnlLine1."Posting Date";
      NewCVLedgEntryBufST."Document Type" := GenJnlLine1."Document Type";
      NewCVLedgEntryBufST."Document No." := GenJnlLine1."Document No.";
      NewCVLedgEntryBufST."Transaction No." := NextTransactionNo;

      EntryNo1 := 0;
      SerTaxEntry.RESET;
      SerTaxEntry.FINDLAST;
      EntryNo1 := SerTaxEntry."Entry No.";

      ServiceTaxMgt.ApplyCustPaymentCurrDiff(
        NewCVLedgEntryBufST,OldCVLedgEntryBufST,
        -(GenJnlLineSTDiff."Service Tax Base Amount (LCY)" + GenJnlLineSTDiff.FullServiceTaxAmount +
        GenJnlLineSTDiff.FullServiceTaxSBCAmount + GenJnlLineSTDiff.KKCessAmount),EntryNo1);
    END;

    LOCAL PROCEDURE FillCustSvcTaxPostingBuffer@1280032(AppldServTaxEntry@1500000 : Record 16473;SerTaxBaseAmt@1500001 : Decimal;SerTaxAmt@1500002 : Decimal;SerTaxECessAmt@1500003 : Decimal;SerTaxSheCessAmt@1500004 : Decimal;SerTaxSBCAmt@1500441 : Decimal;KKCessAmt@1500005 : Decimal);
    BEGIN
      AppldServTaxEntry.TESTFIELD("Service Tax Registration No.");
      WITH AppldServTaxEntry DO BEGIN
        SvcTaxPostingBuffer[1].Type := Type;
        SvcTaxPostingBuffer[1]."Service Tax Group Code" := "Service Tax Group Code";
        SvcTaxPostingBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        SvcTaxPostingBuffer[1]."Party Code" := "Party Code";
        SvcTaxPostingBuffer[1]."Service Tax Base Amount" := SerTaxBaseAmt;
        SvcTaxPostingBuffer[1]."Service Tax Amount" := SerTaxAmt;
        SvcTaxPostingBuffer[1]."Service Tax %" := "Service Tax %";
        SvcTaxPostingBuffer[1]."Service Tax eCess Amount" := SerTaxECessAmt;
        SvcTaxPostingBuffer[1]."Service Tax eCess %" := "Service Tax eCess %";
        SvcTaxPostingBuffer[1]."Service Tax SHE Cess Amount" := SerTaxSheCessAmt;
        SvcTaxPostingBuffer[1]."Service Tax SHE Cess %" := "Service Tax SHE Cess %";
        SvcTaxPostingBuffer[1]."Service Tax Abatement" := "Service Tax Abatement";
        SvcTaxPostingBuffer[1]."Service Tax SBC Amount" := SerTaxSBCAmt;
        SvcTaxPostingBuffer[1]."Service Tax SBC %" := "Service Tax SBC %";
        SvcTaxPostingBuffer[1]."SBC G/L Account" := "SBC G/L Account";
        SvcTaxPostingBuffer[1]."KK Cess Amount" := KKCessAmt;
        SvcTaxPostingBuffer[1]."KK Cess%" := "KK Cess%";
        SvcTaxPostingBuffer[1]."KK Cess G/L Account" := "KK Cess G/L Account";

        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          IF Location."E.C.C. No." <> '' THEN
            SvcTaxPostingBuffer[1]."Location E.C.C. No." := Location."E.C.C. No.";
        END ELSE BEGIN
          CompanyInfo.GET;
          IF CompanyInfo."E.C.C. No." <> '' THEN
            SvcTaxPostingBuffer[1]."Location E.C.C. No." := CompanyInfo."E.C.C. No.";
        END;
        UpdCustSvcTaxPostingBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdCustSvcTaxPostingBuffer@1280031();
    BEGIN
      SvcTaxPostingBuffer[2] := SvcTaxPostingBuffer[1];
      IF SvcTaxPostingBuffer[2].FIND THEN BEGIN
        SvcTaxPostingBuffer[2]."Service Tax Base Amount" += SvcTaxPostingBuffer[1]."Service Tax Base Amount";
        SvcTaxPostingBuffer[2]."Service Tax Amount" += SvcTaxPostingBuffer[1]."Service Tax Amount";
        SvcTaxPostingBuffer[2]."Service Tax eCess Amount" += SvcTaxPostingBuffer[1]."Service Tax eCess Amount";
        SvcTaxPostingBuffer[2]."Service Tax SHE Cess Amount" += SvcTaxPostingBuffer[1]."Service Tax SHE Cess Amount";
        SvcTaxPostingBuffer[2]."Service Tax SBC Amount" += SvcTaxPostingBuffer[1]."Service Tax SBC Amount";
        SvcTaxPostingBuffer[2]."KK Cess Amount" += SvcTaxPostingBuffer[1]."KK Cess Amount";
        SvcTaxPostingBuffer[2].MODIFY;
      END ELSE
        SvcTaxPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE FillGainLossServiceTaxApplnBuf@1500068(GenJnlLine@1500004 : Record 81;AppliedServiceTaxEntry@1500001 : TEMPORARY Record 16473;CurrencyCode@1500002 : Code[10];VAR STaxApplBuffer@1500000 : ARRAY [2] OF TEMPORARY Record 16529);
    VAR
      Currency@1500003 : Record 4;
    BEGIN
      IF NOT AppliedServiceTaxEntry."Serv. Tax on Advance Payment" THEN
        AppliedServiceTaxEntry.ReverseAmounts;
      InitServTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,STaxApplBuffer[1]);
      Currency.GET(CurrencyCode);
      CASE AppliedServiceTaxEntry."Entry Type" OF
        AppliedServiceTaxEntry."Entry Type"::"Realized Gain":
          STaxApplBuffer[1]."G/L Account" := Currency."Realized Gains Acc.";
        AppliedServiceTaxEntry."Entry Type"::"Realized Loss":
          STaxApplBuffer[1]."G/L Account" := Currency."Realized Losses Acc.";
      END;
      STaxApplBuffer[1]."SBC G/L Account" := STaxApplBuffer[1]."G/L Account";
      STaxApplBuffer[1]."KK Cess G/L Account" := STaxApplBuffer[1]."G/L Account";
      UpdateInvoiceServTaxApplnBuf(STaxApplBuffer);
    END;

    LOCAL PROCEDURE FillServiceTaxApplnBuf@1500045(GenJnlLine@1500002 : Record 81;AppliedServiceTaxEntry@1500001 : TEMPORARY Record 16473;VAR STaxApplBuffer@1500000 : ARRAY [2] OF TEMPORARY Record 16529);
    BEGIN
      InitServTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,STaxApplBuffer[1]);
      STaxApplBuffer[1]."G/L Account" := GetServiceTaxAccNo(AppliedServiceTaxEntry);
      STaxApplBuffer[1]."SBC G/L Account" := GetServiceTaxSBCAccNo(AppliedServiceTaxEntry);
      STaxApplBuffer[1]."KK Cess G/L Account" := GetKKCessAccNo(AppliedServiceTaxEntry);
      UpdateInvoiceServTaxApplnBuf(STaxApplBuffer);
    END;

    LOCAL PROCEDURE FillReverseServiceTaxApplnBuf@1500054(GenJnlLine@1500003 : Record 81;AppliedServiceTaxEntry@1500001 : TEMPORARY Record 16473;AppliedToDocWithServTax@1500002 : Boolean;VAR STaxApplBuffer@1500000 : ARRAY [2] OF TEMPORARY Record 16529);
    BEGIN
      InitServTaxApplnBuf(GenJnlLine,AppliedServiceTaxEntry,STaxApplBuffer[1]);
      STaxApplBuffer[1].InvertAmounts;
      STaxApplBuffer[1]."G/L Account" := GetReversedServiceTaxAccNo(AppliedServiceTaxEntry,AppliedToDocWithServTax);
      STaxApplBuffer[1]."SBC G/L Account" := GetReversedServiceTaxSBCAccNo(AppliedServiceTaxEntry,AppliedToDocWithServTax);
      STaxApplBuffer[1]."KK Cess G/L Account" := GetReversedKKcessAccNo(AppliedServiceTaxEntry,AppliedToDocWithServTax);
      UpdateInvoiceServTaxApplnBuf(STaxApplBuffer);
    END;

    LOCAL PROCEDURE InitServTaxApplnBuf@1500081(GenJnlLine@1500002 : Record 81;AppliedServiceTaxEntry@1500000 : TEMPORARY Record 16473;VAR STaxApplBuffer@1500001 : Record 16529);
    BEGIN
      WITH AppliedServiceTaxEntry DO BEGIN
        STaxApplBuffer.INIT;
        STaxApplBuffer.Type := STaxApplBuffer.Type::Purchase;
        STaxApplBuffer."Document No." := GenJnlLine."Document No.";
        STaxApplBuffer."Service Tax Registration No." := "Service Tax Registration No.";
        STaxApplBuffer."Party Code" := "Party Code";
        STaxApplBuffer."Service Tax Group Code" := "Service Tax Group Code";
        STaxApplBuffer."Service Tax Registration No." := "Service Tax Registration No.";
        STaxApplBuffer."Transaction No." := "Transaction No.";
        STaxApplBuffer."Amount to Apply (LCY)" :=
          "Service Tax Base Amount" + FullTaxAmount + FullTaxSBCAmount + KKCessAmount;
        STaxApplBuffer."Service Tax Amount (LCY)" := "Service Tax Amount";
        STaxApplBuffer."eCess Amount (LCY)" := "eCess Amount";
        STaxApplBuffer."SHE Cess Amount (LCY)" := "SHE Cess Amount";
        STaxApplBuffer."Service Tax SBC Amount(LCY)" := "Service Tax SBC Amount";
        STaxApplBuffer."KK Cess Amount(LCY)" := "KK Cess Amount";
        STaxApplBuffer."Amount to Apply" := ConvertLCYToFCY(GenJnlLine,STaxApplBuffer."Amount to Apply (LCY)");
        STaxApplBuffer."Service Tax Amount" := ConvertLCYToFCY(GenJnlLine,STaxApplBuffer."Service Tax Amount (LCY)");
        STaxApplBuffer."eCess Amount" := ConvertLCYToFCY(GenJnlLine,STaxApplBuffer."eCess Amount (LCY)");
        STaxApplBuffer."SHE Cess Amount" := ConvertLCYToFCY(GenJnlLine,STaxApplBuffer."SHE Cess Amount (LCY)");
        STaxApplBuffer."Service Tax SBC Amount" := ConvertLCYToFCY(GenJnlLine,STaxApplBuffer."Service Tax SBC Amount(LCY)");
        STaxApplBuffer."KK Cess Amount" := ConvertLCYToFCY(GenJnlLine,STaxApplBuffer."KK Cess Amount(LCY)");
        STaxApplBuffer."SBC G/L Account" := "SBC G/L Account";
        STaxApplBuffer."Service Tax SBC Amount(LCY)" := "Service Tax SBC Amount";
        STaxApplBuffer."KK Cess G/L Account" := "KK Cess G/L Account";
        STaxApplBuffer."KK Cess Amount(LCY)" := "KK Cess Amount";
      END;
    END;

    LOCAL PROCEDURE UpdateInvoiceServTaxApplnBuf@1503082(VAR STaxApplBuffer@1500000 : ARRAY [2] OF TEMPORARY Record 16529);
    BEGIN
      STaxApplBuffer[2] := STaxApplBuffer[1];
      IF STaxApplBuffer[2].FIND THEN BEGIN
        STaxApplBuffer[2]."Amount to Apply (LCY)" += STaxApplBuffer[1]."Amount to Apply (LCY)";
        STaxApplBuffer[2]."Service Tax Amount (LCY)" += STaxApplBuffer[1]."Service Tax Amount (LCY)";
        STaxApplBuffer[2]."eCess Amount (LCY)" += STaxApplBuffer[1]."eCess Amount (LCY)";
        STaxApplBuffer[2]."SHE Cess Amount (LCY)" += STaxApplBuffer[1]."SHE Cess Amount (LCY)";
        STaxApplBuffer[2]."Amount to Apply" += STaxApplBuffer[1]."Amount to Apply";
        STaxApplBuffer[2]."Service Tax Amount" += STaxApplBuffer[1]."Service Tax Amount";
        STaxApplBuffer[2]."eCess Amount" += STaxApplBuffer[1]."eCess Amount";
        STaxApplBuffer[2]."SHE Cess Amount" += STaxApplBuffer[1]."SHE Cess Amount";
        STaxApplBuffer[2]."Service Tax SBC Amount(LCY)" += STaxApplBuffer[1]."Service Tax SBC Amount(LCY)";
        STaxApplBuffer[2]."Service Tax SBC Amount" += STaxApplBuffer[1]."Service Tax SBC Amount";
        STaxApplBuffer[2]."KK Cess Amount(LCY)" += STaxApplBuffer[1]."KK Cess Amount(LCY)";
        STaxApplBuffer[2]."KK Cess Amount" += STaxApplBuffer[1]."KK Cess Amount";
        STaxApplBuffer[2].MODIFY;
      END ELSE
        STaxApplBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostInvoiceServTaxApplnBuf@1500483(GenJnlLine@1500004 : Record 81;VAR STaxApplBuffer@1500000 : ARRAY [2] OF TEMPORARY Record 16529);
    VAR
      VendPostingGr@1500002 : Record 93;
      TaxAmountLCYBalance@1500001 : Decimal;
      TaxAmountBalance@1500003 : Decimal;
      SBCTaxAmountLCYBalance@1500443 : Decimal;
      SBCTaxAmountBalance@1500445 : Decimal;
      KKCessAmountLCYBalance@1500006 : Decimal;
      KKcessAmountBalance@1500005 : Decimal;
    BEGIN
      WITH STaxApplBuffer[1] DO
        IF FINDSET THEN BEGIN
          REPEAT
            IF FullTaxAmountLCY <> 0 THEN BEGIN
              TaxAmountLCYBalance += FullTaxAmountLCY;
              TaxAmountBalance += FullTaxAmount;
              CreateGLEntry(GenJnlLine,"G/L Account",FullTaxAmountLCY,FullTaxAmount,TRUE,TRUE);
            END;
            IF FullTaxSBCAmountLCY <> 0 THEN BEGIN
              SBCTaxAmountLCYBalance += FullTaxSBCAmountLCY;
              SBCTaxAmountBalance += FullTaxSBCAmount;
              CreateGLEntry(GenJnlLine,"SBC G/L Account",FullTaxSBCAmountLCY,FullTaxSBCAmount,TRUE,TRUE);
            END;
            IF KKCessAmountLCY <> 0 THEN BEGIN
              KKCessAmountLCYBalance += KKCessAmountLCY;
              KKcessAmountBalance += KKCessAmount;
              CreateGLEntry(GenJnlLine,"KK Cess G/L Account",KKCessAmountLCY,KKCessAmount,TRUE,TRUE);
            END;

          UNTIL NEXT = 0;
          DELETEALL;
          IF (TaxAmountLCYBalance <> 0) OR (SBCTaxAmountLCYBalance <> 0) OR (KKCessAmountLCYBalance <> 0)
          THEN BEGIN
            VendPostingGr.GET(GenJnlLine."Posting Group");
            VendPostingGr.TESTFIELD("Invoice Rounding Account");
            CreateGLEntry(GenJnlLine,VendPostingGr."Invoice Rounding Account",-
                           (TaxAmountLCYBalance + SBCTaxAmountLCYBalance + KKCessAmountLCYBalance),-
                           (TaxAmountBalance + SBCTaxAmountBalance + KKcessAmountBalance),
                           TRUE,TRUE);
          END;
        END;
    END;

    LOCAL PROCEDURE GetServiceTaxAccNo@1503052(ServiceTaxEntry@1500000 : Record 16473) : Code[20];
    VAR
      ServiceTaxSetup@1500005 : Record 16472;
      GLAccountNo@1500002 : Code[20];
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");

        IF "Reverse Charge" THEN
          GLAccountNo := ServiceTaxSetup.GetPayInterimAccNo
        ELSE
          GLAccountNo := ServiceTaxSetup.GetRecAccNoByISD("Input Service Distribution");
      END;
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE GetReversedServiceTaxAccNo@1570053(ServiceTaxEntry@1500000 : Record 16473;AppliedToDocWithServTax@1500001 : Boolean) : Code[20];
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      GLAccountNo@1500002 : Code[20];
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
       IF "Reverse Charge" THEN
         IF AppliedToDocWithServTax THEN
           GLAccountNo := ServiceTaxSetup.GetRecInterimAccNo
         ELSE
           GLAccountNo := ServiceTaxSetup.GetPayAccNo
       ELSE
         GLAccountNo := ServiceTaxSetup.GetRecInterimAccNoByISD("Input Service Distribution");
      END;
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE CheckRoundingParameters@1500088(NewCVLedgEntryBuf@1000 : Record 382;OldCVLedgEntryBuf@1001 : Record 382);
    VAR
      SvcTaxEntry@1002 : Record 16473;
      SvcTaxEntry2@1003 : Record 16473;
    BEGIN
      SvcTaxEntry.RESET;
      SvcTaxEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
      IF NOT SvcTaxEntry.FINDFIRST THEN
        EXIT;

      IF SvcTaxEntry.FullServiceTaxAmount = 0 THEN
        EXIT;

      SvcTaxEntry2.RESET;
      SvcTaxEntry2.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      IF NOT SvcTaxEntry2.FINDFIRST THEN
        EXIT;

      IF SvcTaxEntry.FullServiceTaxAmount = 0 THEN
        EXIT;

      IF (SvcTaxEntry."Service Tax Rounding Precision" <> SvcTaxEntry2."Service Tax Rounding Precision") OR
         (SvcTaxEntry."Service Tax Rounding Type" <> SvcTaxEntry2."Service Tax Rounding Type")
      THEN
        ERROR(Text16513);
    END;

    LOCAL PROCEDURE ServiceTaxExists@1500091(NewCVLedgEntryBuf@1000 : Record 382;OldCVLedgEntryBuf@1001 : Record 382) : Boolean;
    VAR
      ServiceTaxEntry@1002 : Record 16473;
      CustLedgEntry@1003 : Record 21;
    BEGIN
      IF (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::"Credit Memo") OR
         (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo")
      THEN
        EXIT(FALSE);

      ServiceTaxEntry.RESET;
      ServiceTaxEntry.SETRANGE("Document Type",ServiceTaxEntry."Document Type"::Invoice);
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
        ServiceTaxEntry.SETRANGE("Document No.",NewCVLedgEntryBuf."Document No.");
        ServiceTaxEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
        IF CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT(ServiceTaxEntry.FINDFIRST AND (NOT CustLedgEntry."Serv. Tax on Advance Payment"));

        EXIT(ServiceTaxEntry.FINDFIRST);
      END;
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
        ServiceTaxEntry.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
        ServiceTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
        IF CustLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT(ServiceTaxEntry.FINDFIRST AND (NOT CustLedgEntry."Serv. Tax on Advance Payment"));

        EXIT(ServiceTaxEntry.FINDFIRST);
      END;
    END;

    LOCAL PROCEDURE CheckAppliedPaymentCust@1500092(GenJnlLine@1500001 : Record 81;OldCVLedgEntryBuf@1001 : Record 382;NewCVLedgEntryBuf@1000 : Record 382;AmountToBeApplied@1003 : Decimal);
    VAR
      CustLedgEntryPmt@1002 : Record 21;
      ServiceTaxEntryPmt@1004 : Record 16473;
      ServiceTaxEntryInv@1005 : Record 16473;
      AmountToBeAppliedInv@1006 : Decimal;
      AmountToBeAppliedInvAllGroup@1500000 : Decimal;
    BEGIN
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Payment THEN BEGIN
        IF (OldCVLedgEntryBuf."Original Currency Factor" <> NewCVLedgEntryBuf."Original Currency Factor") AND
           NOT GenJnlLine."Offline Application" AND CustLedgEntryPmt."Serv. Tax on Advance Payment"
        THEN
          ERROR(Text16523,OldCVLedgEntryBuf."Document No.");
        IF NOT CustLedgEntryPmt.GET(OldCVLedgEntryBuf."Entry No.") OR NOT CustLedgEntryPmt."Serv. Tax on Advance Payment" OR NOT
           (NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice)
        THEN
          EXIT;
        AmountToBeApplied := ABS(CustLedgEntryPmt."Amount to Apply");
        ServiceTaxEntryPmt.RESET;
        ServiceTaxEntryPmt.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
        IF ServiceTaxEntryPmt.FINDFIRST THEN BEGIN
          ServiceTaxEntryInv.RESET;
          ServiceTaxEntryInv.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
          IF NOT ServiceTaxEntryInv.ISEMPTY THEN BEGIN
            ServiceTaxEntryInv.SETRANGE("Service Tax Group Code",ServiceTaxEntryPmt."Service Tax Group Code");
            ServiceTaxEntryInv.SETRANGE("Service Tax Registration No.",ServiceTaxEntryPmt."Service Tax Registration No.");
            IF ServiceTaxEntryInv.FINDSET THEN BEGIN
              IF ServiceTaxEntryInv.PoT <> ServiceTaxEntryPmt.PoT THEN
                ERROR(Text16532,ServiceTaxEntryInv."Document No.",ServiceTaxEntryPmt."Document No.");

              REPEAT
                ServiceTaxEntryInv.CALCFIELDS("Amount Received/Paid");
                IF ServiceTaxEntryInv.PoT THEN
                  AmountToBeAppliedInv := AmountToBeAppliedInv + ABS(ServiceTaxEntryInv."Amount Including Service Tax")
                ELSE
                  AmountToBeAppliedInv +=
                    ABS((ServiceTaxEntryInv."Amount Including Service Tax" - ServiceTaxEntryInv."Amount Received/Paid"));
              UNTIL ServiceTaxEntryInv.NEXT = 0;
              ServiceTaxEntryInv.SETRANGE("Service Tax Group Code");
              ServiceTaxEntryInv.SETRANGE("Service Tax Registration No.");
              IF ServiceTaxEntryInv.FINDSET THEN
                REPEAT
                  ServiceTaxEntryInv.CALCFIELDS("Amount Received/Paid");
                  IF ServiceTaxEntryInv.PoT THEN
                    AmountToBeAppliedInvAllGroup :=
                      AmountToBeAppliedInvAllGroup + ABS(ServiceTaxEntryInv."Amount Including Service Tax")
                  ELSE
                    AmountToBeAppliedInvAllGroup +=
                      ABS((ServiceTaxEntryInv."Amount Including Service Tax" - ServiceTaxEntryInv."Amount Received/Paid"));
                UNTIL ServiceTaxEntryInv.NEXT = 0;
              IF AmountToBeAppliedInvAllGroup <> AmountToBeAppliedInv THEN
                IF AmountToBeAppliedInv < AmountToBeApplied THEN
                  ERROR(Text16512,OldCVLedgEntryBuf."Document No.",NewCVLedgEntryBuf."Document No.",(-AmountToBeAppliedInv));
            END ELSE
              ServiceTaxMgt.CheckServiceTaxToApplyTo(NewCVLedgEntryBuf."Transaction No.",
                ServiceTaxEntryPmt."Service Tax Group Code",ServiceTaxEntryPmt."Service Tax Registration No.");
          END;
        END;
      END;
      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment THEN BEGIN
        IF (NewCVLedgEntryBuf."Original Currency Factor" <> OldCVLedgEntryBuf."Original Currency Factor") AND
           NOT GenJnlLine."Offline Application" AND
           CustLedgEntryPmt."Serv. Tax on Advance Payment"
        THEN
          ERROR(Text16523,NewCVLedgEntryBuf."Document No.");

        IF NOT CustLedgEntryPmt.GET(NewCVLedgEntryBuf."Entry No.") OR NOT CustLedgEntryPmt."Serv. Tax on Advance Payment" OR NOT
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice)
        THEN
          EXIT;

        AmountToBeApplied := ABS(CustLedgEntryPmt."Amount to Apply");
        ServiceTaxEntryPmt.RESET;
        ServiceTaxEntryPmt.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
        IF ServiceTaxEntryPmt.FINDFIRST THEN BEGIN
          ServiceTaxEntryInv.RESET;
          ServiceTaxEntryInv.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
          ServiceTaxEntryInv.SETRANGE("Service Tax Group Code",ServiceTaxEntryPmt."Service Tax Group Code");
          ServiceTaxEntryInv.SETRANGE("Service Tax Registration No.",ServiceTaxEntryPmt."Service Tax Registration No.");
          IF ServiceTaxEntryInv.FINDSET THEN BEGIN
            REPEAT
              ServiceTaxEntryInv.CALCFIELDS("Amount Received/Paid");
              IF ServiceTaxEntryInv.PoT THEN
                AmountToBeAppliedInv := AmountToBeAppliedInv + ABS(ServiceTaxEntryInv."Amount Including Service Tax")
              ELSE
                AmountToBeAppliedInv :=
                  AmountToBeAppliedInv +
                  ABS((ServiceTaxEntryInv."Amount Including Service Tax" - ServiceTaxEntryInv."Amount Received/Paid"));
            UNTIL ServiceTaxEntryInv.NEXT = 0;
            ServiceTaxEntryInv.SETRANGE("Service Tax Group Code");
            ServiceTaxEntryInv.SETRANGE("Service Tax Registration No.");
            IF ServiceTaxEntryInv.FINDSET THEN
              REPEAT
                ServiceTaxEntryInv.CALCFIELDS("Amount Received/Paid");
                IF ServiceTaxEntryInv.PoT THEN
                  AmountToBeAppliedInvAllGroup := AmountToBeAppliedInvAllGroup + ABS(ServiceTaxEntryInv."Amount Including Service Tax")
                ELSE
                  AmountToBeAppliedInvAllGroup :=
                    AmountToBeAppliedInvAllGroup +
                    ABS((ServiceTaxEntryInv."Amount Including Service Tax" - ServiceTaxEntryInv."Amount Received/Paid"));
              UNTIL ServiceTaxEntryInv.NEXT = 0;
            IF AmountToBeAppliedInvAllGroup <> AmountToBeAppliedInv THEN
              IF AmountToBeAppliedInv < AmountToBeApplied THEN
                ERROR(Text16512,NewCVLedgEntryBuf."Document No.",OldCVLedgEntryBuf."Document No.",(AmountToBeAppliedInv));
          END ELSE
            ServiceTaxMgt.CheckServiceTaxToApplyTo(OldCVLedgEntryBuf."Transaction No.",
              ServiceTaxEntryPmt."Service Tax Group Code",ServiceTaxEntryPmt."Service Tax Registration No.");
        END;
      END;
    END;

    LOCAL PROCEDURE AppliedPmtNotSTAdvPmt@1500093(OldCVLedgEntryBuf@1001 : Record 382;NewCVLedgEntryBuf@1000 : Record 382) : Boolean;
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      IF OldCVLedgEntryBuf."Document Type" IN [OldCVLedgEntryBuf."Document Type"::Payment,OldCVLedgEntryBuf."Document Type"::Refund]
      THEN
        IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT(TRUE);
      IF NewCVLedgEntryBuf."Document Type" IN [NewCVLedgEntryBuf."Document Type"::Payment,NewCVLedgEntryBuf."Document Type"::Refund]
      THEN
        IF NOT CustLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT(TRUE);
      EXIT(NOT CustLedgEntry."Serv. Tax on Advance Payment");
    END;

    PROCEDURE AppliedPmtNotSTAdvPmtVend@1500094(OldCVLedgEntryBuf@1001 : Record 382;NewCVLedgEntryBuf@1000 : Record 382) : Boolean;
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Payment THEN
        IF NOT VendLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT(TRUE);
      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment THEN
        IF NOT VendLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT(TRUE);
      EXIT(NOT VendLedgEntry."Serv. Tax on Advance Payment");
    END;

    LOCAL PROCEDURE CheckServTaxOnInvApplToAdvPmt@1500096(GenJnlLine@1500001 : Record 81;NewCVLedgEntryBuf@1001 : Record 382;OldCVLedgEntryBuf@1000 : Record 382);
    VAR
      InvTransactionNo@1500000 : Integer;
    BEGIN
      IF GenJnlLine."S.T From Order" THEN
        EXIT;

      CASE NewCVLedgEntryBuf."Document Type"::Payment OF
        NewCVLedgEntryBuf."Document Type":
          IF IsAdvancePayment(NewCVLedgEntryBuf."Entry No.") THEN
            InvTransactionNo := OldCVLedgEntryBuf."Transaction No."
          ELSE
            EXIT;
        OldCVLedgEntryBuf."Document Type":
          IF IsAdvancePayment(OldCVLedgEntryBuf."Entry No.") THEN
            InvTransactionNo := NewCVLedgEntryBuf."Transaction No."
          ELSE
            EXIT;
        END;

      IF NOT IsServiceTaxTransaction(InvTransactionNo) THEN
            ERROR(Text16511);
    END;

    LOCAL PROCEDURE IsAdvancePayment@1507047(EntryNo@1500000 : Integer) : Boolean;
    VAR
      VendLedgEntry@1500002 : Record 25;
      CustLedgEntry@1500001 : Record 21;
    BEGIN
      CASE ApplicationType OF
        ApplicationType::Vendor:
          IF VendLedgEntry.GET(EntryNo) THEN
            EXIT(VendLedgEntry."Serv. Tax on Advance Payment");
        ApplicationType::Customer:
          IF CustLedgEntry.GET(EntryNo) THEN
            EXIT(CustLedgEntry."Serv. Tax on Advance Payment");
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckRefundApplicationOnline@1500098(GenJnlLine@1002 : Record 81;NewCVLedgEntryBuf@1001 : Record 382;OldCVLedgEntryBuf@1000 : Record 382);
    VAR
      CustLedgEntry@1003 : Record 21;
    BEGIN
      IF GenJnlLine."Offline Application" THEN
        EXIT;

      IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN BEGIN
        IF NOT GenJnlLine."Serv. Tax on Advance Payment" THEN
          EXIT;
        IF NOT (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Payment) THEN
          ERROR(Text16514);

        IF ApplicationType = ApplicationType::Customer THEN BEGIN
          IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF NOT CustLedgEntry."Serv. Tax on Advance Payment" THEN
            ERROR(Text16514);
        END;
      END;
      IF (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund) THEN BEGIN
        IF ApplicationType = ApplicationType::Customer THEN BEGIN
          IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF CustLedgEntry."Serv. Tax on Advance Payment" AND
             (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Refund)
          THEN
            ERROR(Text16516,GenJnlLine."Document Type",OldCVLedgEntryBuf."Document No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckRefundApplicationOffline@1500099(GenJnlLine@1002 : Record 81;NewCVLedgEntryBuf@1001 : Record 382;OldCVLedgEntryBuf@1000 : Record 382);
    VAR
      RefundCVLedgEntryBuf@1500001 : Record 382;
      PaymentCVLedgEntryBuf@1500000 : Record 382;
      RefundCustLedgEntry@1004 : Record 21;
      PaymentCustLedgEntry@1003 : Record 21;
    BEGIN
      IF NOT GenJnlLine."Offline Application" THEN
        EXIT;
      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Refund THEN BEGIN
        RefundCVLedgEntryBuf := NewCVLedgEntryBuf;
        PaymentCVLedgEntryBuf := OldCVLedgEntryBuf;
        END ELSE
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Refund THEN BEGIN
          RefundCVLedgEntryBuf := OldCVLedgEntryBuf;
          PaymentCVLedgEntryBuf := NewCVLedgEntryBuf;
        END ELSE
          EXIT;

      CASE ApplicationType OF
        ApplicationType::Customer:
          BEGIN
            RefundCustLedgEntry.GET(RefundCVLedgEntryBuf."Entry No.");
            PaymentCustLedgEntry.GET(PaymentCVLedgEntryBuf."Entry No.");

            IF RefundCustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
              IF (PaymentCustLedgEntry."Document Type" <> PaymentCustLedgEntry."Document Type"::Payment) OR
                 (NOT PaymentCustLedgEntry."Serv. Tax on Advance Payment")
              THEN
                ERROR(Text16514);
              ServiceTaxMgt.CheckServiceTaxMatchesOnDocs(
                RefundCustLedgEntry."Transaction No.",PaymentCustLedgEntry."Transaction No.")
            END ELSE
              IF PaymentCustLedgEntry."Serv. Tax on Advance Payment" THEN
                ERROR(Text16517,PaymentCVLedgEntryBuf."Document No.",RefundCVLedgEntryBuf."Document No.");
          END;
      END;
    END;

    LOCAL PROCEDURE CheckInputServiceDistOffline@1500100(GenJnlLine@1500000 : Record 81;NewCVLedgEntryBuf@1001 : Record 382;OldCVLedgEntryBuf@1000 : Record 382);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      IF NOT GenJnlLine."Offline Application" THEN
        EXIT;

      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
        IF NOT VendLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF VendLedgEntry."Input Service Distribution" THEN BEGIN
          IF NOT VendLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF VendLedgEntry."Serv. Tax on Advance Payment" AND
             (NOT VendLedgEntry."Input Service Distribution")
          THEN
            ERROR(Text16515,OldCVLedgEntryBuf."Document No.",NewCVLedgEntryBuf."Document No.");
        END;
      END;
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
        IF NOT VendLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF VendLedgEntry."Input Service Distribution" THEN BEGIN
          IF NOT VendLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF VendLedgEntry."Serv. Tax on Advance Payment" AND
             (NOT VendLedgEntry."Input Service Distribution")
          THEN
            ERROR(Text16515,NewCVLedgEntryBuf."Document No.",OldCVLedgEntryBuf."Document No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckInputServiceDistOnline@1500101(GenJnlLine@1500000 : Record 81;OldCVLedgEntryBuf@1000 : Record 382);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      IF GenJnlLine."Offline Application" THEN
        EXIT;

      IF GenJnlLine."Input Service Distribution" THEN BEGIN
        IF NOT VendLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF VendLedgEntry."Serv. Tax on Advance Payment" AND
           (NOT VendLedgEntry."Input Service Distribution")
        THEN
          ERROR(Text16515,OldCVLedgEntryBuf."Document No.",GenJnlLine."Document No.");
      END;
    END;

    LOCAL PROCEDURE SetDocNoPostingDate@1500102(GenJnlLine@1500000 : Record 81;SetParameter@1002 : Boolean);
    BEGIN
      IF NOT GenJnlLine."Offline Application" THEN
        EXIT;

      IF SetParameter THEN BEGIN
        ServiceTaxMgt.SetDocumentNoPostingDate(GenJnlLine."Document No.",GenJnlLine."Posting Date");
      END ELSE
        ServiceTaxMgt.SetDocumentNoPostingDate('',0D);
    END;

    PROCEDURE SetSTPureAgentStatus@1500104(STPureAgent2@1000 : Boolean);
    BEGIN
      STPureAgent := STPureAgent2;
    END;

    LOCAL PROCEDURE CheckApplofSTpureAgntOffLine@1500105(GenJnlLine@1500000 : Record 81;NewCVLedgEntryBuf@1007 : Record 382;OldCVLedgEntryBuf@1006 : Record 382);
    VAR
      CustLedgEntry@1002 : Record 21;
      CustLedgEntry2@1003 : Record 21;
      ServTaxEntry@1004 : Record 16473;
      ServTaxEntry2@1005 : Record 16473;
    BEGIN
      IF GenJnlLine."S.T From Order" THEN
        EXIT;

      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment THEN BEGIN
        IF NOT CustLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF NOT CustLedgEntry2.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
          ServTaxEntry.RESET;
          ServTaxEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
          IF ServTaxEntry.FINDFIRST THEN BEGIN
            ServTaxEntry2.RESET;
            ServTaxEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
            IF ServTaxEntry2.FINDFIRST THEN
              IF ServTaxEntry2."ST Pure Agent" <> ServTaxEntry."ST Pure Agent" THEN
                ERROR(Text16521);
          END;
        END;
      END;
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Payment THEN BEGIN
        IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF NOT CustLedgEntry2.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
          ServTaxEntry.RESET;
          ServTaxEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
          IF ServTaxEntry.FINDFIRST THEN BEGIN
            ServTaxEntry2.RESET;
            ServTaxEntry2.SETRANGE("Transaction No.",CustLedgEntry2."Transaction No.");
            IF ServTaxEntry2.FINDFIRST THEN
              IF ServTaxEntry2."ST Pure Agent" <> ServTaxEntry."ST Pure Agent" THEN
                ERROR(Text16521);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckApplofSTpureAgntOnline@1500106(GenJnlLine@1500000 : Record 81;OldCVLedgEntryBuf@1006 : Record 382);
    VAR
      CustLedgEntry@1002 : Record 21;
      ServTaxEntry@1004 : Record 16473;
    BEGIN
      IF GenJnlLine."Offline Application" THEN
        EXIT;

      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Payment THEN BEGIN
        IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
          ServTaxEntry.RESET;
          ServTaxEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
          IF ServTaxEntry.FINDFIRST THEN
            IF ServTaxEntry."ST Pure Agent" <> STPureAgent THEN
              ERROR(Text16521);
        END;
      END;
    END;

    LOCAL PROCEDURE ServiceTaxAdjustmentEntry@1500107(NewCVLedgEntryBuf@1001 : Record 382;OldCVLedgEntryBuf@1000 : Record 382) : Boolean;
    VAR
      ServTaxEntry@1500002 : Record 16473;
    BEGIN
      IF NOT (NewCVLedgEntryBuf."Document Type" IN
              [NewCVLedgEntryBuf."Document Type"::Payment,NewCVLedgEntryBuf."Document Type"::Refund])
      THEN
        EXIT;
      ServTaxEntry.RESET;
      ServTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      IF ServTaxEntry.FINDFIRST THEN
        EXIT(ServTaxEntry."Adjusted Agst Entry No." <> 0);
    END;

    LOCAL PROCEDURE InsertAppSTGenJnlLineTmp@1500035(AccountNo@1500000 : Code[20];AmountTobePosted@1500001 : Decimal;AmountTobePostedAddCurr@1500002 : Decimal;VAR LineNo@1500003 : Integer);
    BEGIN
      GenJnlLineTmp.INIT;
      GenJnlLineTmp."Line No." := LineNo;
      GenJnlLineTmp."Account Type" := GenJnlLineTmp."Account Type"::"G/L Account";
      GenJnlLineTmp."Account No." := AccountNo;
      GenJnlLineTmp.Amount := AmountTobePosted;
      GenJnlLineTmp."Amount (LCY)" := AmountTobePostedAddCurr;
      GenJnlLineTmp.INSERT;
      LineNo := LineNo + 10000;
    END;

    LOCAL PROCEDURE PostAppSTGenJnlLineTmp@1500036(GenJnlLine@1500000 : Record 81);
    BEGIN
      GenJnlLineTmp.RESET;
      IF GenJnlLineTmp.FINDSET THEN
        REPEAT
          CreateGLEntry(GenJnlLine,GenJnlLineTmp."Account No.",GenJnlLineTmp.Amount,GenJnlLineTmp."Amount (LCY)",TRUE,TRUE);
        UNTIL GenJnlLineTmp.NEXT = 0;
      GenJnlLineTmp.RESET;
      GenJnlLineTmp.DELETEALL;
    END;

    LOCAL PROCEDURE GetLastServTaxEntryNo@1500037() : Integer;
    VAR
      ServiceTaxEntry@1500004 : Record 16473;
    BEGIN
      ServiceTaxEntry.LOCKTABLE;
      IF ServiceTaxEntry.FINDLAST THEN
        EXIT(ServiceTaxEntry."Entry No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE InsertTDSGLEntries@1500130(VAR GenJnlLine@1500000 : Record 81);
    VAR
      GenJnlLine4@1500002 : Record 81;
      GenJnlLine5@1500001 : Record 81;
      PreviousJnlTDSCalculated@1500003 : Decimal;
    BEGIN
      IF ((GenJnlLine."Journal Template Name" = '') AND (GenJnlLine."Journal Batch Name" = '')) OR
         GenJnlLine."System-Created Entry" OR (GenJnlLine."Bal. Account No." <> '') OR
         (MultiTDSDocumentNo = GenJnlLine."Document No.") OR
         (NOT (GenJnlLine."Document Type" IN [GenJnlLine."Document Type"::Payment,GenJnlLine."Document Type"::Invoice]))
      THEN
        EXIT;
      TDSAmount := 0;
      GenJnlLine4.RESET;
      GenJnlLine4.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine4.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine4.SETRANGE("Document No.",GenJnlLine."Document No.");
      IF GenJnlLine4.FINDSET THEN
        REPEAT
          GenJnlLine5 := GenJnlLine4;
          GenJnlLine4.Posting := TRUE;
          GenJnlLine4.CalculateTDS;
          IF GenJnlLine4."TDS/TCS Amount" = 0 THEN
            PreviousJnlTDSCalculated += GenJnlLine4."TDS/TCS Base Amount";
          GenJnlLine4.SetPreviousTDSAmt(PreviousJnlTDSCalculated);
          IF GenJnlLine4."Check Printed" THEN BEGIN
            IF GenJnlLine5."Total TDS/TCS Incl. SHE CESS" <> GenJnlLine4."Total TDS/TCS Incl. SHE CESS" THEN
              ERROR(Text16522);
          END;
          IF (GenJnlLine4."Bal. Account No." = '') AND (GenJnlLine4.Amount > 0) AND
             ((GenJnlLine4."Bal. TDS/TCS Including SHECESS" <> 0) OR (GenJnlLine4."Work Tax Amount" <> 0))
          THEN BEGIN
            IF GenJnlLine4."Currency Code" <> '' THEN
              ConvertTDSAmountstoLCY2(GenJnlLine,GenJnlLine4);
            TDSAmount += FillTDSBuffer(GenJnlLine4,GenJnlLine4ACY);
          END;
          IF (GenJnlLine4."Journal Template Name" = GenJnlLine."Journal Template Name") AND
             (GenJnlLine4."Journal Batch Name" = GenJnlLine."Journal Batch Name") AND
             (GenJnlLine4."Line No." = GenJnlLine."Line No.")
          THEN
            GenJnlLine := GenJnlLine4;
        UNTIL GenJnlLine4.NEXT = 0;
      MultiTDSDocumentNo := GenJnlLine."Document No.";
    END;

    LOCAL PROCEDURE FillTDSBuffer@1500132(GenJournalLine@1500001 : Record 81;GenJournalLineACY@1500000 : Record 81) : Decimal;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
           ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
        THEN
          GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        CLEAR(TDSInvBufJnl[1]);
        TDSInvBufJnl[1]."TDS Nature of Deduction" := "TDS Nature of Deduction";
        TDSInvBufJnl[1]."TDS Assessee Code" := "Assessee Code";
        TDSInvBufJnl[1]."TDS Group" := "TDS Group";
        TDSGroup.RESET;
        IF "Total TDS/TCS Incl. SHE CESS" <> 0 THEN
          TDSGroup.FindOnDate("TDS Group","Posting Date")
        ELSE
          IF "Balance Work Tax Amount" <> 0 THEN
            TDSGroup.FindOnDate("Work Tax Group","Posting Date");
        TDSGroup.TESTFIELD("TDS Account");
        TDSInvBufJnl[1]."TDS Account No." := TDSGroup."TDS Account";
        TDSInvBufJnl[1]."Work Tax Group" := "Work Tax Group";
        TDSInvBufJnl[1]."Work Tax Nature of Deduction" := "Work Tax Nature Of Deduction";
        TDSInvBufJnl[1]."TDS Category" := "TDS Category";
        TDSInvBufJnl[1]."Concessional Code" := "Concessional Code";
        TDSInvBufJnl[1]."TDS %" := "TDS/TCS %";
        TDSInvBufJnl[1]."TDS Base Amount" := "TDS/TCS Base Amount";
        TDSInvBufJnl[1]."TDS Amount (LCY)" := "TDS/TCS Amount";
        TDSInvBufJnl[1]."Surcharge %" := "Surcharge %";
        TDSInvBufJnl[1]."Surcharge Base Amount" := "Surcharge Base Amount";
        TDSInvBufJnl[1]."Surcharge Amount (LCY)" := "Surcharge Amount";
        TDSInvBufJnl[1]."TDS Amt Incl. Surcharge (LCY)" := "TDS/TCS Amt Incl Surcharge";
        TDSInvBufJnl[1]."eCESS %" := "eCESS %";
        TDSInvBufJnl[1]."SHE Cess %" := "SHE Cess % on TDS/TCS";
        TDSInvBufJnl[1]."eCESS Amount (LCY)" := "eCESS on TDS/TCS Amount";
        TDSInvBufJnl[1]."SHE CESS Amount (LCY)" := "SHE Cess on TDS/TCS Amount";
        TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)" := "Total TDS/TCS Incl. SHE CESS";
        TDSInvBufJnl[1]."Work Tax %" := "Work Tax %";
        TDSInvBufJnl[1]."Work Tax Base Amount" := "Work Tax Base Amount";
        TDSInvBufJnl[1]."Work Tax Amount" := "Balance Work Tax Amount";
        TDSInvBufJnl[1]."Invoice Amount" := "TDS/TCS Base Amount";
        TDSInvBufJnl[1]."Bal. TDS Including SHE Cess" := "Bal. TDS/TCS Including SHECESS";
        TDSInvBufJnl[1]."Source Currency Amount" := GenJournalLineACY."Bal. TDS/TCS Including SHECESS";
        TDSInvBufJnl[1]."Source Curr Work Tax Amount" := GenJournalLineACY."Balance Work Tax Amount";
        TDSInvBufJnl[1]."Service Tax Including SHE Cess" := FullServiceTaxAmount;
        TDSInvBufJnl[1]."Per Contract" := "Per Contract";
        TDSInvBufJnl[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        TDSInvBufJnl[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        TDSInvBufJnl[1]."Dimension Entry No." := "Dimension Set ID";
        UpdTDSBuffer;
      END;
      EXIT(TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)" + TDSInvBufJnl[1]."Work Tax Amount");
    END;

    LOCAL PROCEDURE UpdTDSBuffer@1500131();
    BEGIN
      TDSInvBufJnl[2] := TDSInvBufJnl[1];
      IF TDSInvBufJnl[2].FIND THEN BEGIN
        TDSInvBufJnl[2]."TDS %" := TDSInvBufJnl[1]."TDS %";
        TDSInvBufJnl[2]."Surcharge %" := TDSInvBufJnl[1]."Surcharge %";
        TDSInvBufJnl[2]."eCESS %" := TDSInvBufJnl[1]."eCESS %";
        TDSInvBufJnl[2]."TDS Base Amount" :=
          TDSInvBufJnl[2]."TDS Base Amount" + TDSInvBufJnl[1]."TDS Base Amount";
        TDSInvBufJnl[2]."TDS Amount (LCY)" := TDSInvBufJnl[2]."TDS Amount (LCY)" + TDSInvBufJnl[1]."TDS Amount (LCY)";
        TDSInvBufJnl[2]."Surcharge Base Amount" := TDSInvBufJnl[2]."Surcharge Base Amount" +
          TDSInvBufJnl[1]."Surcharge Base Amount";
        TDSInvBufJnl[2]."Surcharge Amount (LCY)" :=
          TDSInvBufJnl[2]."Surcharge Amount (LCY)" + TDSInvBufJnl[1]."Surcharge Amount (LCY)";
        TDSInvBufJnl[2]."TDS Amt Incl. Surcharge (LCY)" := TDSInvBufJnl[2]."TDS Amt Incl. Surcharge (LCY)" +
          TDSInvBufJnl[1]."TDS Amt Incl. Surcharge (LCY)";
        TDSInvBufJnl[2]."eCESS Amount (LCY)" := TDSInvBufJnl[2]."eCESS Amount (LCY)" + TDSInvBufJnl[1]."eCESS Amount (LCY)";
        TDSInvBufJnl[2]."SHE CESS Amount (LCY)" := TDSInvBufJnl[2]."SHE CESS Amount (LCY)" + TDSInvBufJnl[1]."SHE CESS Amount (LCY)";
        TDSInvBufJnl[2]."Total TDS Incl SHE CESS (LCY)" := TDSInvBufJnl[2]."Total TDS Incl SHE CESS (LCY)" +
          TDSInvBufJnl[1]."Total TDS Incl SHE CESS (LCY)";
        TDSInvBufJnl[2]."Invoice Amount" := TDSInvBufJnl[2]."Invoice Amount" + TDSInvBufJnl[1]."Invoice Amount";
        TDSInvBufJnl[2]."Bal. TDS Including SHE Cess" := TDSInvBufJnl[2]."Bal. TDS Including SHE Cess" +
          TDSInvBufJnl[1]."Bal. TDS Including SHE Cess";
        TDSInvBufJnl[2]."Work Tax Base Amount" := TDSInvBufJnl[2]."Work Tax Base Amount" + TDSInvBufJnl[1]."Work Tax Base Amount";
        TDSInvBufJnl[2]."Work Tax Amount" := TDSInvBufJnl[2]."Work Tax Amount" + TDSInvBufJnl[1]."Work Tax Amount";
        TDSInvBufJnl[2]."Source Currency Amount" :=
          TDSInvBufJnl[2]."Source Currency Amount" + TDSInvBufJnl[1]."Source Currency Amount";
        TDSInvBufJnl[2]."Source Curr Work Tax Amount" := TDSInvBufJnl[2]."Source Curr Work Tax Amount" +
          TDSInvBufJnl[1]."Source Curr Work Tax Amount";
        TDSInvBufJnl[2]."Service Tax Including SHE Cess" := TDSInvBufJnl[2]."Service Tax Including SHE Cess" +
          TDSInvBufJnl[1]."Service Tax Including SHE Cess";
        TDSInvBufJnl[2].MODIFY;
      END ELSE
        TDSInvBufJnl[1].INSERT;
    END;

    PROCEDURE SetGenJnLine@1500133(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      InsertTDSGLEntries(GenJournalLine);
    END;

    LOCAL PROCEDURE InitPostedJnlBankCharge@1500135(GenJnlLine@1500000 : Record 81;ExecutionOption@1002 : 'ReturnTotChgAmount,PostGLEntriesForBankChg');
    VAR
      JnlBankCharges@1000 : Record 16511;
      PostedJnlBankCharges@1001 : Record 13735;
      BankCharge@1003 : Record 16510;
      DeleteJnlBankChgRecords@1004 : Boolean;
    BEGIN
      IF (GenJnlLine."Journal Template Name" = '') OR (GenJnlLine."Journal Batch Name" = '') THEN
        EXIT;

      JnlBankCharges.RESET;
      JnlBankCharges.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      JnlBankCharges.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      JnlBankCharges.SETRANGE("Line No.",GenJnlLine."Line No.");
      IF JnlBankCharges.ISEMPTY THEN
        EXIT;
      IF JnlBankCharges.FINDSET THEN
        REPEAT
          IF ExecutionOption = ExecutionOption::ReturnTotChgAmount THEN
            BankChargeAmount += JnlBankCharges."Amount (LCY)";
          IF ExecutionOption = ExecutionOption::PostGLEntriesForBankChg THEN BEGIN
            BankCharge.GET(JnlBankCharges."Bank Charge");

            PostedJnlBankCharges.INIT;
            PostedJnlBankCharges."GL Entry No." := NextEntryNo;
            PostedJnlBankCharges."Bank Charge" := JnlBankCharges."Bank Charge";
            PostedJnlBankCharges.Amount := JnlBankCharges.Amount;
            PostedJnlBankCharges."Amount (LCY)" := JnlBankCharges."Amount (LCY)";
            PostedJnlBankCharges.INSERT;

            CreateGLEntry(GenJnlLine,
              BankCharge.Account,JnlBankCharges."Amount (LCY)",JnlBankCharges.Amount,TRUE,TRUE);
            DeleteJnlBankChgRecords := TRUE;
          END;
        UNTIL JnlBankCharges.NEXT = 0;
      IF DeleteJnlBankChgRecords THEN
        JnlBankCharges.DELETEALL;
    END;

    LOCAL PROCEDURE ConvertTDSAmountstoLCY2@1500235(VAR GenJnlLine@1500001 : Record 81;VAR GenJnlLine4@1500000 : Record 81);
    BEGIN
      WITH GenJnlLine4 DO BEGIN
        "TDS/TCS Amount" :=
          RoundTDSAmount(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","TDS/TCS Amount","Currency Factor"));
        "Surcharge Amount" :=
          RoundTDSAmount(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Surcharge Amount","Currency Factor"));
        "TDS/TCS Amt Incl Surcharge" :=
          RoundTDSAmount(
            CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","TDS/TCS Amt Incl Surcharge","Currency Factor")
            );
        "eCESS on TDS/TCS Amount" :=
          RoundTDSAmount(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","eCESS on TDS/TCS Amount","Currency Factor"));
        "SHE Cess on TDS/TCS Amount" :=
          RoundTDSAmount(
            CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","SHE Cess on TDS/TCS Amount","Currency Factor")
            );
        "Total TDS/TCS Incl. SHE CESS" :=
          RoundTDSAmount
          (CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Total TDS/TCS Incl. SHE CESS","Currency Factor"));
        "Balance Surcharge Amount" := "Surcharge Amount";
        "Work Tax Amount" :=
          RoundTDSAmount
          (CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Work Tax Amount","Currency Factor"));
        "Balance Work Tax Amount" :=
          RoundTDSAmount
          (CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Balance Work Tax Amount","Currency Factor"));
        "Bal. TDS/TCS Including SHECESS" := "Total TDS/TCS Incl. SHE CESS";
        GenJnlLine."Balance Surcharge Amount" := "Surcharge Amount";
      END;
    END;

    PROCEDURE CalcLCY2AddCurrencyST@1500237(GenJnlLineST@1500000 : Record 81;AmtToBePosted@1500001 : Decimal) SourceCurrencyServiceTaxAmt : Decimal;
    BEGIN
      GetGLSetup;
      WITH GenJnlLineST DO BEGIN
        IF AmtToBePosted = 0 THEN
          AmtToBePosted := FullServiceTaxAmount;
        IF "Source Currency Code" <> AddCurrencyCode THEN
          SourceCurrencyServiceTaxAmt :=
            CalcLCYToAddCurr(AmtToBePosted)
        ELSE
          IF ("Source Currency Code" = AddCurrencyCode) AND (AddCurrencyCode <> '') THEN
            SourceCurrencyServiceTaxAmt :=
              ROUND(
                CurrExchRate.ExchangeAmtLCYToFCYOnlyFactor(
                  AmtToBePosted,"Currency Factor"),AddCurrency."Amount Rounding Precision");
      END;
    END;

    PROCEDURE UpdatePayTDSDocumentNo@1500938(OldDocNo@1500000 : Code[20];NewDocNo@1500001 : Code[20]);
    VAR
      TDSEntry2@1500056 : Record 13729;
    BEGIN
      IF LastDocNo = NewDocNo THEN
        EXIT;
      TDSEntry2.RESET;
      TDSEntry2.SETCURRENTKEY("Pay TDS Document No.");
      TDSEntry2.SETRANGE("Pay TDS Document No.",OldDocNo);
      TDSEntry2.SETRANGE("NIL Challan Indicator",FALSE);
      IF TDSEntry2.FINDSET(TRUE,TRUE) THEN
        REPEAT
          TDSEntry2."Pay TDS Document No." := NewDocNo;
          TDSEntry2.MODIFY;
          FormManagement.Update26QDocNo(TDSEntry2."Entry No.",NewDocNo);
        UNTIL TDSEntry2.NEXT = 0;
    END;

    PROCEDURE UpdateAmtTobePosted@1500206(OldCVLedgEntryBuf@1000000000 : Record 382;ServiceTaxEntry@1000000001 : Record 16473;VAR AmounttobePosted@1000000002 : Decimal;ExecuteInvoice@1102601000 : Boolean);
    BEGIN
      IF NOT ExecuteInvoice THEN BEGIN
        IF (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo") AND
           (ServiceTaxEntry."Adjusted Agst Entry No." <> 0)
        THEN
          AmounttobePosted := -AmounttobePosted;
      END ELSE BEGIN
        IF (ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::Invoice) AND
           (ServiceTaxEntry."Adjusted Agst Entry No." <> 0)
        THEN
          AmounttobePosted := -AmounttobePosted;
      END;
    END;

    PROCEDURE ExecuteTaxEntryInsertion@1500137(ExecuteTaxEntry2@1500038 : Boolean);
    BEGIN
      ExecuteTaxEntry := ExecuteTaxEntry2;
    END;

    PROCEDURE CalcOfflineAdjAmt@1500236(GenJnlLine@1500006 : Record 81;STGroupCode@1500000 : Code[20];PostingDate@1500001 : Date;AmountToApply@1500002 : Decimal;SBCAmountToApply@1500447 : Decimal;KKCessAmounttoApply@1500007 : Decimal;Application@1500003 : Boolean);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
      AmountToApplyInterim@1500005 : Decimal;
      SBCAmountToApplyInterim@1500449 : Decimal;
      KKCessAmounttoApplyInterim@1500008 : Decimal;
    BEGIN
      IF ServiceTaxSetup.FindOnDate(STGroupCode,PostingDate) THEN BEGIN
        IF NOT Application THEN BEGIN
          AmountToApplyInterim := AmountToApply;
          AmountToApply := -AmountToApply;
          SBCAmountToApplyInterim := SBCAmountToApply;
          SBCAmountToApply := -SBCAmountToApply;
          KKCessAmounttoApplyInterim := KKCessAmounttoApply;
          KKCessAmounttoApply := -KKCessAmounttoApply;
        END ELSE BEGIN
          AmountToApplyInterim := -AmountToApply;
          SBCAmountToApplyInterim := -SBCAmountToApply;
          KKCessAmounttoApplyInterim := -KKCessAmounttoApply;
        END;

        IF AmountToApply <> 0 THEN BEGIN
          CreateGLEntry(GenJnlLine,
            ServiceTaxSetup.GetPayInterimAccNo,AmountToApplyInterim,
            CalcLCYToAddCurr(AmountToApplyInterim),TRUE,TRUE);
          CreateGLEntry(GenJnlLine,
            ServiceTaxSetup.GetPayAccNo,AmountToApply,
            CalcLCYToAddCurr(AmountToApply),TRUE,TRUE);
        END;
        IF SBCAmountToApply <> 0 THEN BEGIN
          CreateGLEntry(GenJnlLine,
            ServiceTaxSetup.GetPayInterimSBCAccNo,SBCAmountToApplyInterim,
            CalcLCYToAddCurr(SBCAmountToApplyInterim),TRUE,TRUE);
          CreateGLEntry(GenJnlLine,
            ServiceTaxSetup.GetPaySBCAccNo,SBCAmountToApply,
            CalcLCYToAddCurr(SBCAmountToApply),TRUE,TRUE);
        END;
        IF KKCessAmounttoApply <> 0 THEN BEGIN
          CreateGLEntry(GenJnlLine,
            ServiceTaxSetup.GetKKCessPayInterimAccNo,KKCessAmounttoApplyInterim,
            CalcLCYToAddCurr(KKCessAmounttoApplyInterim),TRUE,TRUE);
          CreateGLEntry(GenJnlLine,
            ServiceTaxSetup.GetKKCessPayAccNo,KKCessAmounttoApply,
            CalcLCYToAddCurr(KKCessAmounttoApply),TRUE,TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateSTEntry@1500026(GenJnlLine@1500012 : Record 81;EntryNo@1500000 : Integer;OldTransactionNo@1500011 : Integer);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
      ServiceTaxEntryDetails2@1500002 : Record 16474;
      TempServiceTaxEntryDetails@1500003 : TEMPORARY Record 16474;
      CustLedgEntry2@1500005 : Record 21;
      DtldCustLedgEntry2@1500004 : Record 379;
      ServiceTaxEntry@1500006 : Record 16473;
      ServiceTaxEntry2@1500007 : Record 16473;
      Currency2@1500008 : Record 4;
      ServTaxSetup2@1500009 : Record 16472;
      GLEntry@1500013 : Record 17;
      NextServiceTaxEntryDetEntryNo@1500010 : Integer;
    BEGIN
      TempServiceTaxEntryDetails.DELETEALL;
      DtldCustLedgEntry2.GET(EntryNo);
      CustLedgEntry2.GET(DtldCustLedgEntry2."Cust. Ledger Entry No.");
      IF CustLedgEntry2."Document Type" IN
         [CustLedgEntry2."Document Type"::Payment,CustLedgEntry2."Document Type"::Refund]
      THEN BEGIN
        IF CustLedgEntry2."Serv. Tax on Advance Payment" THEN
          EXIT;
        IF OldTransactionNo <> DtldCustLedgEntry2."Transaction No." THEN BEGIN
          OldTransactionNo := DtldCustLedgEntry2."Transaction No.";
          ServiceTaxEntryDetails.RESET;
          ServiceTaxEntryDetails.SETRANGE("Transaction No.",DtldCustLedgEntry2."Transaction No.");
          IF ServiceTaxEntryDetails.FINDSET THEN
            REPEAT
              ServiceTaxEntry.GET(ServiceTaxEntryDetails."Service Tax Entry No.");
              IF NOT ServiceTaxEntry."Serv. Tax on Advance Payment" THEN BEGIN
                TempServiceTaxEntryDetails.TRANSFERFIELDS(ServiceTaxEntryDetails);
                TempServiceTaxEntryDetails.INSERT;
              END;
            UNTIL ServiceTaxEntryDetails.NEXT = 0;
          IF CustLedgEntry2."Currency Code" <> '' THEN BEGIN
            Currency2.GET(CustLedgEntry2."Currency Code");
            ServiceTaxEntry.RESET;
            ServiceTaxEntry.SETRANGE("Transaction No.",OldTransactionNo);
            IF ServiceTaxEntry.FINDSET THEN
              REPEAT
                ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
                IF (ServiceTaxEntry."G/L Account No." IN [Currency2."Realized Gains Acc.",Currency2."Realized Losses Acc."]) AND
                   (ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::Invoice) AND
                   (ServiceTaxEntry."Amount Received/Paid" = 0)
                THEN BEGIN
                  ServTaxSetup2.RESET;
                  ServTaxSetup2.SETRANGE(Code,ServiceTaxEntry."Service Tax Group Code");
                  ServTaxSetup2.SETRANGE("From Date",0D,ServiceTaxEntry."Posting Date");
                  IF ServTaxSetup2.FINDLAST THEN BEGIN
                    ServTaxSetup2.TESTFIELD("Payables Account (Interim)");
                    InitGLEntry(GenJnlLine,GLEntry,ServTaxSetup2."Payables Account (Interim)",
                      -(ServiceTaxEntry."Service Tax Amount" +
                        ServiceTaxEntry."eCess Amount" +
                        ServiceTaxEntry."SHE Cess Amount"),
                      -(ServiceTaxEntry."Service Tax Amount" +
                        ServiceTaxEntry."eCess Amount" +
                        ServiceTaxEntry."SHE Cess Amount"),TRUE,TRUE);
                    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    IF ServiceTaxEntry."Service Tax SBC Amount" <>  0 THEN BEGIN
                      ServTaxSetup2.TESTFIELD("SB Cess Payable Acc.(Interim)");
                    InitGLEntry(GenJnlLine,GLEntry,ServTaxSetup2."SB Cess Payable Acc.(Interim)",
                      -(ServiceTaxEntry."Service Tax SBC Amount"),
                      -(ServiceTaxEntry."Service Tax SBC Amount"),TRUE,TRUE);
                    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    END;
                    IF ServiceTaxEntry."KK Cess Amount" <>  0 THEN BEGIN
                      ServTaxSetup2.TESTFIELD("KK Cess Payable Acc. (Interim)");
                      InitGLEntry(GenJnlLine,GLEntry,ServTaxSetup2."KK Cess Payable Acc. (Interim)",-
                        ServiceTaxEntry."KK Cess Amount",-ServiceTaxEntry."KK Cess Amount",TRUE,TRUE);
                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    END;
                    InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntry."G/L Account No.",
                      (ServiceTaxEntry."Service Tax Amount" +
                       ServiceTaxEntry."eCess Amount" +
                       ServiceTaxEntry."SHE Cess Amount"),
                      (ServiceTaxEntry."Service Tax Amount" +
                       ServiceTaxEntry."eCess Amount" +
                       ServiceTaxEntry."SHE Cess Amount"),TRUE,TRUE);
                    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    IF ServiceTaxEntry."Service Tax SBC Amount" <> 0 THEN BEGIN
                    InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntry."SBC G/L Account",
                      (ServiceTaxEntry."Service Tax SBC Amount"),
                      (ServiceTaxEntry."Service Tax SBC Amount"),TRUE,TRUE);
                    InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                  END;
                    IF ServiceTaxEntry."KK Cess Amount" <> 0 THEN BEGIN
                      InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntry."KK Cess G/L Account",
                        ServiceTaxEntry."KK Cess Amount",ServiceTaxEntry."KK Cess Amount",TRUE,TRUE);
                      InsertGLEntry(GenJnlLine,GLEntry,TRUE);
                    END;
                  END;
                  ServiceTaxEntry2 := ServiceTaxEntry;
                  ServiceTaxEntry2."Service Tax Base Amount" := 0;
                  ServiceTaxEntry2."Service Tax Amount" := 0;
                  ServiceTaxEntry2."Service Tax SBC Amount" := 0;
                  ServiceTaxEntry2."KK Cess Amount" := 0;
                  ServiceTaxEntry2."Amount Including Service Tax" := 0;
                  ServiceTaxEntry2."Service Tax Abatement" := 0;
                  ServiceTaxEntry2."eCess Amount" := 0;
                  ServiceTaxEntry2."SHE Cess Amount" := 0;
                  ServiceTaxEntry2.MODIFY;
                END;
              UNTIL ServiceTaxEntry.NEXT = 0;
          END;
        END;
      END;

      NextServiceTaxEntryDetEntryNo := 1;
      ServiceTaxEntryDetails2.RESET;
      IF ServiceTaxEntryDetails2.FINDLAST THEN
        NextServiceTaxEntryDetEntryNo := ServiceTaxEntryDetails2."Entry No." + 1;

      IF TempServiceTaxEntryDetails.FINDSET THEN
        REPEAT
          ServiceTaxEntryDetails.GET(TempServiceTaxEntryDetails."Entry No.");
          IF ServiceTaxEntryDetails.Type = ServiceTaxEntryDetails.Type::Sale THEN BEGIN
            IF ServiceTaxEntryDetails.Closed OR ServiceTaxEntryDetails."Closed (eCess)" OR
               ServiceTaxEntryDetails."Closed (SHECess)" OR
               (ServiceTaxEntryDetails."Payment Document No." <> '') OR
               (ServiceTaxEntryDetails."Payment Document No. (eCess)" <> '')
            THEN
              ERROR(Text16518,ServiceTaxEntryDetails."Entry No.");
          END;
          ServiceTaxEntryDetails."Remaining Credit" := 0;
          ServiceTaxEntryDetails."Remaining Credit (eCess)" := 0;
          ServiceTaxEntryDetails."Remaining Credit (SHECess)" := 0;
          ServiceTaxEntryDetails."Remaining Credit (SBC)" := 0;
          ServiceTaxEntryDetails."Remaining Credit (KK Cess)" := 0;
          ServiceTaxEntryDetails."Closed (SBC)" := TRUE;
          ServiceTaxEntryDetails.Closed := TRUE;
          ServiceTaxEntryDetails."Closed (eCess)" := TRUE;
          ServiceTaxEntryDetails."Closed (SHECess)" := TRUE;
          ServiceTaxEntryDetails."Closed (KK Cess)" := TRUE;
          ServiceTaxEntryDetails.MODIFY;
          ServiceTaxEntryDetails2.TRANSFERFIELDS(TempServiceTaxEntryDetails);
          IF GenJnlLine."Document No." <> ServiceTaxEntryDetails2."Document No." THEN
            ServiceTaxEntryDetails2."Document No." := GenJnlLine."Document No.";
          IF GenJnlLine."Posting Date" <> ServiceTaxEntryDetails2."Posting Date" THEN
            ServiceTaxEntryDetails2."Posting Date" := GenJnlLine."Posting Date";

          ServiceTaxEntryDetails2."Entry No." := NextServiceTaxEntryDetEntryNo;
          ServiceTaxEntryDetails2."Transaction No." := NextTransactionNo;
          ServiceTaxEntryDetails2."Base Amount" := -ServiceTaxEntryDetails2."Base Amount";
          ServiceTaxEntryDetails2.Amount := -ServiceTaxEntryDetails2.Amount;
          ServiceTaxEntryDetails2."Service Tax Amount" := -ServiceTaxEntryDetails2."Service Tax Amount";
          ServiceTaxEntryDetails2."Service Tax eCess Amount" := -ServiceTaxEntryDetails2."Service Tax eCess Amount";
          ServiceTaxEntryDetails2."Service Tax SHE Cess Amount" := -ServiceTaxEntryDetails2."Service Tax SHE Cess Amount";
          ServiceTaxEntryDetails2."Service Tax SBC Amount" := -ServiceTaxEntryDetails2."Service Tax SBC Amount";
          ServiceTaxEntryDetails2."KK Cess Amount" := -ServiceTaxEntryDetails2."KK Cess Amount";
          ServiceTaxEntryDetails2."Remaining Credit (SBC)" := 0;
          ServiceTaxEntryDetails2."Closed (SBC)" := TRUE;
          ServiceTaxEntryDetails."Remaining Credit (KK Cess)" := 0;
          ServiceTaxEntryDetails."Closed (KK Cess)" := TRUE;
          ServiceTaxEntryDetails2."Remaining Credit" := 0;
          ServiceTaxEntryDetails2."Remaining Credit (eCess)" := 0;
          ServiceTaxEntryDetails2."Remaining Credit (SHECess)" := 0;
          ServiceTaxEntryDetails2.Closed := TRUE;
          ServiceTaxEntryDetails2."Closed (eCess)" := TRUE;
          ServiceTaxEntryDetails2."Closed (SHECess)" := TRUE;
          ServiceTaxEntryDetails2.INSERT;
          NextServiceTaxEntryDetEntryNo := NextServiceTaxEntryDetEntryNo + 1;

          // Pass Service Tax Reverse Voucher
          InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntryDetails2."GL Account",
            -(ServiceTaxEntryDetails."Service Tax Amount" +
              ServiceTaxEntryDetails."Service Tax eCess Amount" +
              ServiceTaxEntryDetails."Service Tax SHE Cess Amount"),
            -(ServiceTaxEntryDetails."Service Tax Amount" +
              ServiceTaxEntryDetails."Service Tax eCess Amount" +
              ServiceTaxEntryDetails."Service Tax SHE Cess Amount"),TRUE,TRUE);
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          IF ServiceTaxEntryDetails."Service Tax SBC Amount" <> 0 THEN BEGIN
          InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntryDetails2."SBC G/L Account",
              -(ServiceTaxEntryDetails."Service Tax SBC Amount"),
            -(ServiceTaxEntryDetails."Service Tax SBC Amount"),TRUE,TRUE);
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          END;
          IF ServiceTaxEntryDetails."KK Cess Amount" <> 0 THEN BEGIN
            InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntryDetails2."KK Cess G/L Account",-
              ServiceTaxEntryDetails."KK Cess Amount",-ServiceTaxEntryDetails."KK Cess Amount",TRUE,TRUE);
            InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          END;

          ServiceTaxEntry.GET(ServiceTaxEntryDetails."Service Tax Entry No.");

          InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntry."G/L Account No.",
            (ServiceTaxEntryDetails."Service Tax Amount" +
             ServiceTaxEntryDetails."Service Tax eCess Amount" +
             ServiceTaxEntryDetails."Service Tax SHE Cess Amount"),
            (ServiceTaxEntryDetails."Service Tax Amount" +
             ServiceTaxEntryDetails."Service Tax eCess Amount" +
             ServiceTaxEntryDetails."Service Tax SHE Cess Amount"),TRUE,TRUE);
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          IF ServiceTaxEntryDetails."Service Tax SBC Amount" <> 0 THEN BEGIN
          InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntry."SBC G/L Account",
            (ServiceTaxEntryDetails."Service Tax SBC Amount"),
            (ServiceTaxEntryDetails."Service Tax SBC Amount"),TRUE,TRUE);
          InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          END;
          IF ServiceTaxEntryDetails."KK Cess Amount" <> 0 THEN BEGIN
            InitGLEntry(GenJnlLine,GLEntry,ServiceTaxEntry."KK Cess G/L Account",
              ServiceTaxEntryDetails."KK Cess Amount",ServiceTaxEntryDetails."KK Cess Amount",TRUE,TRUE);
            InsertGLEntry(GenJnlLine,GLEntry,TRUE);
          END;

          IF CustLedgEntry2."Currency Code" <> '' THEN
            IF (ServiceTaxEntry."G/L Account No." IN
                [Currency2."Realized Gains Acc.",Currency2."Realized Losses Acc."])
            THEN BEGIN
              ServiceTaxEntry."Service Tax Base Amount" := 0;
              ServiceTaxEntry."Service Tax Amount" := 0;
              ServiceTaxEntry."Amount Including Service Tax" := 0;
              ServiceTaxEntry."Service Tax Abatement" := 0;
              ServiceTaxEntry."eCess Amount" := 0;
              ServiceTaxEntry."SHE Cess Amount" := 0;
              ServiceTaxEntry."Service Tax SBC Amount" := 0;
              ServiceTaxEntry."KK Cess Amount" := 0;
              ServiceTaxEntry.MODIFY;
            END;
        UNTIL TempServiceTaxEntryDetails.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServTaxADCustEntry@1500090(TransactionNo@1500003 : Integer;VAR TempServiceTaxEntryPay@1500000 : TEMPORARY Record 16473;VAR TempServiceTaxEntryInv@1500009 : TEMPORARY Record 16473;VAR TempCustLedgerEntryPay@1500008 : TEMPORARY Record 21;VAR TempCustLedgerEntryInv@1500010 : TEMPORARY Record 21);
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
      TempCustLedgerEntryInv2@1500004 : TEMPORARY Record 21;
      InvoiceToPaymentRatio@1500002 : Decimal;
      LoopCount@1500007 : Integer;
      CustLedgCount@1500006 : Integer;
      ServTaxApplication@1000 : Record 16530;
      SalesInvHeader@1500005 : Record 112;
    BEGIN
      CustLedgCount := 0;
      TempServiceTaxEntryPay.RESET;
      IF TempServiceTaxEntryPay.FINDSET THEN
        REPEAT
          TempCustLedgerEntryPay.RESET;
          TempCustLedgerEntryPay.SETRANGE("Transaction No.",TempServiceTaxEntryPay."Transaction No.");
          IF TempCustLedgerEntryPay.FINDFIRST THEN BEGIN
            TempCustLedgerEntryPay.CALCFIELDS("Amount (LCY)");

            TempServiceTaxEntryInv.RESET;
            TempServiceTaxEntryInv.SETRANGE("Service Tax Group Code",TempServiceTaxEntryPay."Service Tax Group Code");
            TempServiceTaxEntryInv.SETRANGE("Service Tax Registration No.",TempServiceTaxEntryPay."Service Tax Registration No.");
            TempServiceTaxEntryInv.SETRANGE("G/L Account No.",TempServiceTaxEntryPay."G/L Account No.");
            TempServiceTaxEntryInv.SETRANGE("ST Pure Agent",FALSE);
            TempServiceTaxEntryInv.SETRANGE("Nature of Services",TempServiceTaxEntryInv."Nature of Services"::" ");
            IF TempServiceTaxEntryInv.FINDSET THEN BEGIN
              REPEAT
                IF ServTaxApplication.GET(1,TempServiceTaxEntryInv."Entry No.",TransactionNo) THEN BEGIN
                  ServiceTaxEntry.GET(TempServiceTaxEntryInv."Entry No.");
                  ServiceTaxEntry."Service Tax Base Amount" := ServTaxApplication."Service Tax Base Amount";
                  ServiceTaxEntry."Service Tax Amount" := ServTaxApplication."Service Tax Amount";
                  ServiceTaxEntry."eCess Amount" := ServTaxApplication."Service Tax eCess Amount";
                  ServiceTaxEntry."SHE Cess Amount" := ServTaxApplication."Service Tax SHE Cess Amount";
                  ServiceTaxEntry."Amount Including Service Tax" := ServTaxApplication."Amount Including Service Tax";
                  ServiceTaxEntry."Service Tax SBC Amount" := ServTaxApplication."Service Tax SBC Amount";
                  ServiceTaxEntry."KK Cess Amount" := ServTaxApplication."KK Cess Amount";
                  ServiceTaxEntry.MODIFY;
                END ELSE BEGIN
                  TempCustLedgerEntryInv.RESET;
                  TempCustLedgerEntryInv.SETRANGE("Transaction No.",TempServiceTaxEntryInv."Transaction No.");
                  LoopCount := TempCustLedgerEntryInv.COUNT;
                  CustLedgCount += 1;
                  TempCustLedgerEntryInv.RESET;
                  TempCustLedgerEntryInv.SETRANGE("Transaction No.",TempServiceTaxEntryInv."Transaction No.");
                  IF TempCustLedgerEntryInv.FINDFIRST THEN BEGIN
                    TempCustLedgerEntryInv.CALCFIELDS("Amount (LCY)");

                    InvoiceToPaymentRatio :=
                      GetRatio(ABS(TempCustLedgerEntryInv."Amount (LCY)"),ABS(TempCustLedgerEntryPay."Amount (LCY)"));
                    IF InvoiceToPaymentRatio > 1 THEN
                      InvoiceToPaymentRatio := 1;
                    InvoiceToPaymentRatio := -InvoiceToPaymentRatio;
                    ServiceTaxEntry.GET(TempServiceTaxEntryInv."Entry No.");
                    ServiceTaxEntry."Service Tax Base Amount" += TempServiceTaxEntryPay."Service Tax Base Amount" *
                      InvoiceToPaymentRatio;
                    ServiceTaxEntry."Service Tax Amount" += TempServiceTaxEntryPay."Service Tax Amount" * InvoiceToPaymentRatio;
                    ServiceTaxEntry."eCess Amount" += TempServiceTaxEntryPay."eCess Amount" * InvoiceToPaymentRatio;
                    ServiceTaxEntry."SHE Cess Amount" += TempServiceTaxEntryPay."SHE Cess Amount" * InvoiceToPaymentRatio;
                    ServiceTaxEntry."Amount Including Service Tax" += TempServiceTaxEntryPay."Amount Including Service Tax" *
                      InvoiceToPaymentRatio;
                    ServiceTaxEntry."Service Tax SBC Amount" += TempServiceTaxEntryPay."Service Tax SBC Amount" *
                      InvoiceToPaymentRatio;
                    ServiceTaxEntry."KK Cess Amount" += TempServiceTaxEntryPay."KK Cess Amount" * InvoiceToPaymentRatio;
                    ServiceTaxEntry.MODIFY;
                    IF  LoopCount > 1 THEN BEGIN
                      TempCustLedgerEntryInv2.TRANSFERFIELDS(TempCustLedgerEntryInv);
                      TempCustLedgerEntryInv2.INSERT;
                      TempCustLedgerEntryInv.DELETE;
                    END;
                  END;
                END;
              UNTIL TempServiceTaxEntryInv.NEXT = 0;
              IF  (LoopCount = 1) AND (CustLedgCount = 1) THEN BEGIN
                TempCustLedgerEntryInv2.TRANSFERFIELDS(TempCustLedgerEntryInv);
                TempCustLedgerEntryInv2.INSERT;
                LoopCount := 0;
              END;
            END ELSE
              IF TempServiceTaxEntryInv."Nature of Services" = TempServiceTaxEntryInv."Nature of Services"::" " THEN BEGIN
                TempCustLedgerEntryInv.RESET;
                TempCustLedgerEntryInv.SETRANGE("Transaction No.",TransactionNo);
                IF TempCustLedgerEntryInv.FINDFIRST THEN BEGIN
                  TempCustLedgerEntryInv.CALCFIELDS("Amount (LCY)");

                  InvoiceToPaymentRatio :=
                    GetRatio(ABS(TempCustLedgerEntryInv."Amount (LCY)"),ABS(TempCustLedgerEntryPay."Amount (LCY)"));
                  IF InvoiceToPaymentRatio > 1 THEN
                    InvoiceToPaymentRatio := 1;

                  ServiceTaxEntry.INIT;
                  ServiceTaxEntry."Entry No." := 0;
                  ServiceTaxEntry.Type := TempServiceTaxEntryPay.Type;
                  ServiceTaxEntry."Document No." := TempCustLedgerEntryInv."Document No.";
                  ServiceTaxEntry."Posting Date" := TempCustLedgerEntryInv."Posting Date";
                  ServiceTaxEntry."Transaction No." := TempCustLedgerEntryInv."Transaction No.";
                  ServiceTaxEntry."Document Type" := TempCustLedgerEntryInv."Document Type";
                  ServiceTaxEntry."Service Tax %" := TempServiceTaxEntryPay."Service Tax %";
                  ServiceTaxEntry."KK Cess%" := TempServiceTaxEntryPay."KK Cess%";
                  ServiceTaxEntry."KK Cess G/L Account" := TempServiceTaxEntryPay."KK Cess G/L Account";
                  ServiceTaxEntry."G/L Account No." := TempServiceTaxEntryPay."G/L Account No.";
                  ServiceTaxEntry."Service Tax eCess %" := TempServiceTaxEntryPay."Service Tax eCess %";
                  ServiceTaxEntry."Party Code" := TempServiceTaxEntryPay."Party Code";
                  ServiceTaxEntry."Line No." := TempServiceTaxEntryPay."Line No.";
                  ServiceTaxEntry."Reverse Charge" := TempServiceTaxEntryPay."Reverse Charge";
                  ServiceTaxEntry.Positive := TempServiceTaxEntryPay.Positive;
                  ServiceTaxEntry."Service Type (Rev. Chrg.)" := TempServiceTaxEntryPay."Service Type (Rev. Chrg.)";
                  ServiceTaxEntry."Service Tax SHE Cess %" := TempServiceTaxEntryPay."Service Tax SHE Cess %";
                  ServiceTaxEntry."Location Code" := TempServiceTaxEntryPay."Location Code";
                  ServiceTaxEntry."Input Service Distribution" := TempServiceTaxEntryPay."Input Service Distribution";
                  ServiceTaxEntry."Nature of Services" := TempServiceTaxEntryPay."Nature of Services";
                  ServiceTaxEntry."ST Pure Agent" := TempServiceTaxEntryPay."ST Pure Agent";
                  ServiceTaxEntry."Service Tax Group Code" := TempServiceTaxEntryPay."Service Tax Group Code";
                  ServiceTaxEntry."Service Tax Registration No." := TempServiceTaxEntryPay."Service Tax Registration No.";
                  ServiceTaxEntry."Service Tax Base Amount" +=
                    -ABS(TempServiceTaxEntryPay."Service Tax Base Amount") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."Service Tax Amount" +=
                    -ABS(TempServiceTaxEntryPay."Service Tax Amount") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."KK Cess Amount" += -ABS(TempServiceTaxEntryPay."KK Cess Amount") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."eCess Amount" +=
                    -ABS(TempServiceTaxEntryPay."eCess Amount") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."SHE Cess Amount" +=
                    -ABS(TempServiceTaxEntryPay."SHE Cess Amount") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."Amount Including Service Tax" +=
                    -ABS(TempServiceTaxEntryPay."Amount Including Service Tax") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."Service Tax SBC %" := TempServiceTaxEntryPay."Service Tax SBC %";
                  ServiceTaxEntry."Service Tax SBC Amount" +=
                    -ABS(TempServiceTaxEntryPay."Service Tax SBC Amount") * InvoiceToPaymentRatio;
                  ServiceTaxEntry."SBC G/L Account" := TempServiceTaxEntryPay."SBC G/L Account";
                  ServiceTaxEntry."Service Tax Abatement" :=
                    -TempServiceTaxEntryPay."Service Tax Abatement" * InvoiceToPaymentRatio;
                  ServiceTaxEntry."Location E.C.C. No." := TempServiceTaxEntryPay."Location E.C.C. No.";
                  ServiceTaxEntry."Remaining Serv. Tax Amt" := ServiceTaxEntry."Service Tax Amount";
                  ServiceTaxEntry."Remaining Serv. Tax SBC Amt" := ServiceTaxEntry."Service Tax SBC Amount";
                  ServiceTaxEntry."Remaining Serv. Tax eCess Amt" := ServiceTaxEntry."eCess Amount";
                  ServiceTaxEntry."Remaining Serv. Tax Base Amt" := ServiceTaxEntry."Service Tax Base Amount";
                  ServiceTaxEntry."Remaining Serv Tax SHECess Amt" := ServiceTaxEntry."SHE Cess Amount";
                  ServiceTaxEntry."Remaining KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
                  ServiceTaxEntry."Original KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
                  ServiceTaxEntry."Original S.T. Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
                  ServiceTaxEntry."Original S.T. Amount" := ServiceTaxEntry."Service Tax Amount";
                  ServiceTaxEntry."Original S.T. SBC Amount" := ServiceTaxEntry."Service Tax SBC Amount";
                  ServiceTaxEntry."Original S.T. eCess Amount" := ServiceTaxEntry."eCess Amount";
                  ServiceTaxEntry."Original S.T. SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
                  IF SalesInvHeader.GET(ServiceTaxEntry."Document No.") THEN BEGIN
                    ServiceTaxEntry."Service Tax Rounding Precision" := SalesInvHeader."Service Tax Rounding Precision";
                    ServiceTaxEntry."Service Tax Rounding Type" := SalesInvHeader."Service Tax Rounding Type";
                  END;
                  ServiceTaxEntry.INSERT(TRUE);
                  TempServiceTaxEntryInv.TRANSFERFIELDS(ServiceTaxEntry);
                  IF TempServiceTaxEntryInv.INSERT THEN;
                  TempCustLedgerEntryInv2.TRANSFERFIELDS(TempCustLedgerEntryInv);
                  TempCustLedgerEntryInv2.INSERT;
                  TempCustLedgerEntryInv.DELETE;
                END;
              END;
          END;
        UNTIL TempServiceTaxEntryPay.NEXT = 0;

      TempCustLedgerEntryInv2.RESET;
      IF TempCustLedgerEntryInv2.FIND('-') THEN
        REPEAT
          TempCustLedgerEntryInv2.CALCFIELDS("Amount (LCY)");
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Transaction No.",TempCustLedgerEntryInv2."Transaction No.");
          IF ServiceTaxEntry.FINDFIRST THEN BEGIN
            ServiceTaxEntry."Service Tax Base Amount" := ServiceTaxEntry.RoundAmount(ServiceTaxEntry."Service Tax Base Amount");
            ServiceTaxEntry."Service Tax Amount" := ServiceTaxEntry.RoundAmount(ServiceTaxEntry."Service Tax Amount");
            ServiceTaxEntry."eCess Amount" := ServiceTaxEntry.RoundAmount(ServiceTaxEntry."eCess Amount");
            ServiceTaxEntry."SHE Cess Amount" := ServiceTaxEntry.RoundAmount(ServiceTaxEntry."SHE Cess Amount");
            ServiceTaxEntry."Service Tax SBC Amount" := ServiceTaxEntry.RoundAmount(ServiceTaxEntry."Service Tax SBC Amount");
            ServiceTaxEntry."KK Cess Amount" := ServiceTaxEntry.RoundAmount(ServiceTaxEntry."KK Cess Amount");
            ServiceTaxEntry."Amount Including Service Tax" :=
              ServiceTaxEntry.RoundAmount(ServiceTaxEntry."Amount Including Service Tax");

            IF ServiceTaxEntry."Amount Including Service Tax" > TempCustLedgerEntryInv2."Amount (LCY)" THEN BEGIN
              ServiceTaxEntry."Service Tax Base Amount" -=
                TempCustLedgerEntryInv2."Amount (LCY)" - ServiceTaxEntry."Amount Including Service Tax";
              ServiceTaxEntry."Amount Including Service Tax" :=
                ServiceTaxEntry."Service Tax Base Amount" + ServiceTaxEntry.FullServiceTaxAmount +
                ServiceTaxEntry.FullServiceTaxSBCAmount + ServiceTaxEntry.KKCessAmount;
            END;
            IF ServiceTaxEntry."Amount Including Service Tax" <>
               ServiceTaxEntry."Service Tax Base Amount" + ServiceTaxEntry.FullServiceTaxAmount +
               ServiceTaxEntry.FullServiceTaxSBCAmount + ServiceTaxEntry.KKCessAmount
            THEN
              ServiceTaxEntry."Service Tax Base Amount" += (ServiceTaxEntry."Amount Including Service Tax" -
                (ServiceTaxEntry."Service Tax Base Amount" + ServiceTaxEntry.FullServiceTaxAmount +
                ServiceTaxEntry.FullServiceTaxSBCAmount + ServiceTaxEntry.KKCessAmount));
            ServiceTaxEntry.MODIFY;
          END;
        UNTIL TempCustLedgerEntryInv2.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServTaxADCustEntryPoT@1500245(GenJnlLine@1500004 : Record 81;TransactionNum@1500003 : Integer;VAR TempCustLedgerEntryInv@1500010 : TEMPORARY Record 21;VAR TempServiceTaxEntryPay@1500012 : TEMPORARY Record 16473);
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
      STApplicationOnline@1500011 : Record 16575;
      ServTaxApplication@1000 : Record 16530;
      SevTaxMgmt@1500002 : Codeunit 16471;
      AmountToUnapply@1500000 : Decimal;
      STEntryNo@1500005 : Integer;
      ServTaxBaseAmtDiff@1500006 : Decimal;
      ServTaxAmtDiff@1500007 : Decimal;
      ServTaxeCessAmtDiff@1500008 : Decimal;
      ServTaxSHECessAmtDiff@1500009 : Decimal;
      SBCServTaxAmtDiff@1500451 : Decimal;
      SBCAmountToUnapply@1500453 : Decimal;
      KKCessAmtDiff@1500016 : Decimal;
      KKCessAmountToUnapply@1500015 : Decimal;
    BEGIN
      STApplicationOnline.SETRANGE("Transaction No.",TransactionNum);
      IF STApplicationOnline.FINDSET THEN BEGIN
        REPEAT
          TempCustLedgerEntryInv.FINDFIRST;
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Transaction No.",TransactionNum);
          ServiceTaxEntry.SETRANGE("Service Tax Group Code",STApplicationOnline."Service Tax Group Code");
          ServiceTaxEntry.SETRANGE("Service Tax Registration No.",STApplicationOnline."Service Tax Registration No.");
          IF ServiceTaxEntry.FINDFIRST THEN BEGIN
            ServiceTaxEntry."Service Tax Base Amount" += STApplicationOnline."S. Tax Base Amount (Intm)";
            ServiceTaxEntry."Service Tax Amount" += STApplicationOnline."S. Tax Amount (Intm)";
            ServiceTaxEntry."eCess Amount" += STApplicationOnline."S. Tax eCess Amount (Intm)";
            ServiceTaxEntry."SHE Cess Amount" += STApplicationOnline."S. Tax SHE Cess Amount (Intm)";
            ServiceTaxEntry."Amount Including Service Tax" += STApplicationOnline."Amt. Incl. Service Tax (Intm)";
            ServiceTaxEntry."Service Tax SBC Amount" += STApplicationOnline."S. Tax SBC Amount (Intm)";
            ServiceTaxEntry."KK Cess Amount" += STApplicationOnline."KK Cess Amount (Intm)";
            ServiceTaxEntry.MODIFY;
          END ELSE BEGIN
            TempServiceTaxEntryPay.RESET;
            TempServiceTaxEntryPay.SETRANGE("Service Tax Group Code",STApplicationOnline."Service Tax Group Code");
            TempServiceTaxEntryPay.SETRANGE("Service Tax Registration No.",STApplicationOnline."Service Tax Registration No.");
            TempServiceTaxEntryPay.FINDFIRST;
            SevTaxMgmt.InitSTEntryCust(TempCustLedgerEntryInv,TempServiceTaxEntryPay,STApplicationOnline,STEntryNo);
            ServiceTaxEntry.GET(STEntryNo);
          END;
          SevTaxMgmt.InsertServiceTaxEntryDetail(
            ServiceTaxEntry,ServiceTaxEntry."Entry No.",TempCustLedgerEntryInv."Transaction No.",
            STApplicationOnline."S. Tax Base Amount (Intm)",STApplicationOnline."S. Tax Amount (Intm)",
            STApplicationOnline."S. Tax eCess Amount (Intm)",STApplicationOnline."S. Tax SHE Cess Amount (Intm)",
            STApplicationOnline."S. Tax SBC Amount (Intm)",STApplicationOnline."KK Cess Amount (Intm)",FALSE);
          AmountToUnapply +=
            STApplicationOnline."S. Tax Amount (Intm)" +
            STApplicationOnline."S. Tax eCess Amount (Intm)" +
            STApplicationOnline."S. Tax SHE Cess Amount (Intm)";
          SBCAmountToUnapply +=
            STApplicationOnline."S. Tax SBC Amount (Intm)";
          KKCessAmountToUnapply += STApplicationOnline."KK Cess Amount (Intm)";
          TempCustLedgerEntryInv.DELETE;
        UNTIL STApplicationOnline.NEXT = 0;
      END ELSE BEGIN
        ServTaxApplication.SETRANGE("Transaction No.",TransactionNum);
        IF ServTaxApplication.FINDSET THEN
          REPEAT
            TempCustLedgerEntryInv.FINDFIRST;
            ServiceTaxEntry.RESET;
            ServiceTaxEntry.SETRANGE("Transaction No.",TempCustLedgerEntryInv."Transaction No.");
            ServiceTaxEntry.SETRANGE("Service Tax Group Code",ServTaxApplication."Service Tax Group Code");
            ServiceTaxEntry.SETRANGE("Service Tax Registration No.",ServTaxApplication."Service Tax Registration No.");
            IF ServiceTaxEntry.FINDFIRST THEN BEGIN
              ServTaxBaseAmtDiff := ServTaxApplication."Service Tax Base Amount" - ServiceTaxEntry."Service Tax Base Amount";
              ServTaxAmtDiff := ServTaxApplication."Service Tax Amount" - ServiceTaxEntry."Service Tax Amount";
              ServTaxeCessAmtDiff := ServTaxApplication."Service Tax eCess Amount" - ServiceTaxEntry."eCess Amount";
              ServTaxSHECessAmtDiff := ServTaxApplication."Service Tax SHE Cess Amount" - ServiceTaxEntry."SHE Cess Amount";
              SBCServTaxAmtDiff :=  ServTaxApplication."Service Tax SBC Amount" - ServiceTaxEntry."Service Tax SBC Amount";
              KKCessAmtDiff := ServTaxApplication."KK Cess Amount" - ServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntry."Service Tax Base Amount" := ServTaxApplication."Service Tax Base Amount";
              ServiceTaxEntry."Service Tax Amount" := ServTaxApplication."Service Tax Amount";
              ServiceTaxEntry."eCess Amount" := ServTaxApplication."Service Tax eCess Amount";
              ServiceTaxEntry."SHE Cess Amount" := ServTaxApplication."Service Tax SHE Cess Amount";
              ServiceTaxEntry."Amount Including Service Tax" := ServTaxApplication."Amount Including Service Tax";
              ServiceTaxEntry."Service Tax SBC Amount" := ServTaxApplication."Service Tax SBC Amount";
              ServiceTaxEntry."KK Cess Amount" := ServTaxApplication."KK Cess Amount";
              ServiceTaxEntry.MODIFY;
            END ELSE BEGIN
              TempServiceTaxEntryPay.RESET;
              TempServiceTaxEntryPay.SETRANGE("Service Tax Group Code",ServTaxApplication."Service Tax Group Code");
              TempServiceTaxEntryPay.SETRANGE("Service Tax Registration No.",ServTaxApplication."Service Tax Registration No.");
              TempServiceTaxEntryPay.FINDFIRST;

              STApplicationOnline.INIT;
              STApplicationOnline."S. Tax Base Amount (Intm)" := ServTaxApplication."Service Tax Base Amount";
              STApplicationOnline."S. Tax Amount (Intm)" := ServTaxApplication."Service Tax Amount";
              STApplicationOnline."S. Tax eCess Amount (Intm)" := ServTaxApplication."Service Tax eCess Amount";
              STApplicationOnline."S. Tax SHE Cess Amount (Intm)" := ServTaxApplication."Service Tax SHE Cess Amount";
              STApplicationOnline."Amt. Incl. Service Tax (Intm)" := ServTaxApplication."Amount Including Service Tax";
              STApplicationOnline."S. Tax SBC Amount (Intm)" := ServTaxApplication."Service Tax SBC Amount";
              STApplicationOnline."KK Cess Amount (Intm)" := ServTaxApplication."KK Cess Amount";

              SevTaxMgmt.InitSTEntryCust(TempCustLedgerEntryInv,TempServiceTaxEntryPay,STApplicationOnline,STEntryNo);
              ServiceTaxEntry.GET(STEntryNo);

              ServTaxBaseAmtDiff := ServTaxApplication."Service Tax Base Amount";
              ServTaxAmtDiff := ServTaxApplication."Service Tax Amount";
              ServTaxeCessAmtDiff := ServTaxApplication."Service Tax eCess Amount";
              ServTaxSHECessAmtDiff := ServTaxApplication."Service Tax SHE Cess Amount";
              SBCServTaxAmtDiff := ServTaxApplication."Service Tax SBC Amount";
              KKCessAmtDiff := ServTaxApplication."KK Cess Amount";
            END;

            SevTaxMgmt.InsertServiceTaxEntryDetail(
              ServiceTaxEntry,ServiceTaxEntry."Entry No.",TempCustLedgerEntryInv."Transaction No.",
              ServTaxBaseAmtDiff,ServTaxAmtDiff,ServTaxeCessAmtDiff,ServTaxSHECessAmtDiff,
              SBCServTaxAmtDiff,KKCessAmtDiff,FALSE);
            AmountToUnapply +=
              ServTaxAmtDiff + ServTaxeCessAmtDiff + ServTaxSHECessAmtDiff;
            SBCAmountToUnapply +=
              SBCServTaxAmtDiff;
            KKCessAmountToUnapply += KKCessAmtDiff;
            TempCustLedgerEntryInv.DELETE;
          UNTIL ServTaxApplication.NEXT = 0;
      END;
      CalcOfflineAdjAmt(GenJnlLine,
        ServiceTaxEntry."Service Tax Group Code",ServiceTaxEntry."Posting Date",ABS(AmountToUnapply),ABS(SBCAmountToUnapply),
        ABS(KKCessAmountToUnapply),FALSE);
    END;

    LOCAL PROCEDURE IsServiceTaxTransaction@1500246(TransactionNo@1500000 : Integer) : Boolean;
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETCURRENTKEY("Transaction No.");
      ServiceTaxEntry.SETRANGE("Transaction No.",TransactionNo);
      EXIT(NOT ServiceTaxEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE PostServiceTaxSplit@1500243(GenJournalLine@1500002 : Record 81;ServiceTaxSetup@1500004 : Record 16472;RevChargePct@1500003 : Decimal) : Decimal;
    VAR
      GenJnlLineWithRevChrgAmount@1500001 : Record 81;
      GenJnlLineWithPoTAmount@1500000 : Record 81;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CalcPoTServiceTaxAmounts(GenJnlLineWithPoTAmount,RevChargePct);
        CalcRevChargeServiceTaxAmounts(GenJnlLineWithRevChrgAmount,GenJnlLineWithPoTAmount);

        CreateServiceTaxPurchEntries(ServiceTaxSetup,GenJnlLineWithRevChrgAmount);
        CreateServiceTaxPurchEntries(ServiceTaxSetup,GenJnlLineWithPoTAmount);

        EXIT(-(GenJnlLineWithPoTAmount.FullServiceTaxAmount +
               GenJnlLineWithPoTAmount.FullServiceTaxSBCAmount +
               GenJnlLineWithPoTAmount.KKCessAmount));
      END;
    END;

    LOCAL PROCEDURE GetRatio@1500060(InvoiceAmount@1500000 : Decimal;PaymentAmount@1500001 : Decimal) : Decimal;
    BEGIN
      EXIT(InvoiceAmount / PaymentAmount);
    END;

    PROCEDURE GetPLAStartingNo@1500002() : Integer;
    BEGIN
      EXIT(PLAStartingNo);
    END;

    PROCEDURE GetNextTDSEntryNo@1500005() : Integer;
    BEGIN
      EXIT(NextTDSEntryNo);
    END;

    PROCEDURE IncrNextTDSEntryNo@1500006();
    BEGIN
      NextTDSEntryNo := NextTDSEntryNo + 1;
    END;

    PROCEDURE GetNextTCSEntryNo@1500007() : Integer;
    BEGIN
      EXIT(NextTCSEntryNo);
    END;

    PROCEDURE IncrNextTCSEntryNo@1500008();
    BEGIN
      NextTCSEntryNo := NextTCSEntryNo + 1;
    END;

    PROCEDURE GetNextFBTEntryNo@1500009() : Integer;
    BEGIN
      EXIT(NextFBTEntryNo);
    END;

    PROCEDURE IncrNextFBREntryNo@1500010();
    BEGIN
      NextFBTEntryNo := NextFBTEntryNo + 1;
    END;

    PROCEDURE ResetGenJnlLineTmp@1500004();
    BEGIN
      GenJnlLineTmp.RESET;
      GenJnlLineTmp.DELETEALL;
    END;

    LOCAL PROCEDURE SetAddCurrForUnapplication@136(VAR DtldCVLedgEntryBuf@1000 : Record 383);
    BEGIN
      WITH DtldCVLedgEntryBuf DO
        IF NOT ("Entry Type" IN ["Entry Type"::Application,"Entry Type"::"Unrealized Loss",
                                 "Entry Type"::"Unrealized Gain","Entry Type"::"Realized Loss",
                                 "Entry Type"::"Realized Gain","Entry Type"::"Correction of Remaining Amount"])
        THEN
          IF ("Entry Type" = "Entry Type"::"Appln. Rounding") OR
             ((AddCurrencyCode <> '') AND (AddCurrencyCode = "Currency Code"))
          THEN
            "Additional-Currency Amount" := Amount
          ELSE
            "Additional-Currency Amount" := CalcAddCurrForUnapplication("Posting Date","Amount (LCY)");
    END;

    LOCAL PROCEDURE GetAppliedAmountFromBuffers@123(NewCVLedgEntryBuf@1000 : Record 382;OldCVLedgEntryBuf@1001 : Record 382) : Decimal;
    BEGIN
      IF (((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Payment) AND
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo")) OR
          ((NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Refund) AND
           (OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice))) AND
         (ABS(NewCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf."Amount to Apply"))
      THEN
        EXIT(ABSMax(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf."Amount to Apply"));
      EXIT(ABSMin(NewCVLedgEntryBuf."Remaining Amount",-OldCVLedgEntryBuf."Amount to Apply"));
    END;

    LOCAL PROCEDURE PostDeferral@125(VAR GenJournalLine@1000 : Record 81;AccountNumber@1006 : Code[20]);
    VAR
      DeferralTemplate@1001 : Record 1700;
      DeferralHeader@1002 : Record 1701;
      DeferralLine@1003 : Record 1702;
      GLEntry@1004 : Record 17;
      CurrExchRate@1012 : Record 330;
      DeferralUtilities@1005 : Codeunit 1720;
      PerPostDate@1007 : Date;
      PeriodicCount@1008 : Integer;
      AmtToDefer@1010 : Decimal;
      AmtToDeferACY@1009 : Decimal;
      EmptyDeferralLine@1011 : Boolean;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF "Source Type" IN ["Source Type"::Vendor,"Source Type"::Customer] THEN
          // Purchasing and Sales, respectively
          // We can create these types directly from the GL window, need to make sure we don't already have a deferral schedule
          // created for this GL Trx before handing it off to sales/purchasing subsystem
          IF "Source Code" <> GLSourceCode THEN BEGIN
            PostDeferralPostBuffer(GenJournalLine);
            EXIT;
          END;

        IF DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") THEN BEGIN
          EmptyDeferralLine := FALSE;
          // Get the range of detail records for this schedule
          DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
          DeferralLine.SETRANGE("Gen. Jnl. Template Name","Journal Template Name");
          DeferralLine.SETRANGE("Gen. Jnl. Batch Name","Journal Batch Name");
          DeferralLine.SETRANGE("Document Type",0);
          DeferralLine.SETRANGE("Document No.",'');
          DeferralLine.SETRANGE("Line No.","Line No.");
          IF DeferralLine.FINDSET THEN
            REPEAT
              IF DeferralLine.Amount = 0.0 THEN
                EmptyDeferralLine := TRUE;
            UNTIL (DeferralLine.NEXT = 0) OR EmptyDeferralLine;
          IF EmptyDeferralLine THEN
            ERROR(ZeroDeferralAmtErr,"Line No.","Deferral Code");
          DeferralHeader."Amount to Defer (LCY)" :=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                DeferralHeader."Amount to Defer","Currency Factor"));
          DeferralHeader.MODIFY;
        END;

        DeferralUtilities.RoundDeferralAmount(
          DeferralHeader,
          "Currency Code","Currency Factor","Posting Date",AmtToDefer,AmtToDeferACY);

        DeferralTemplate.GET("Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralTemplate.TESTFIELD("Deferral %");

        // Get the Deferral Header table so we know the amount to defer...
        // Assume straight GL posting
        IF DeferralHeader.GET(DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",0,'',"Line No.") THEN BEGIN
          // Get the range of detail records for this schedule
          DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
          DeferralLine.SETRANGE("Gen. Jnl. Template Name","Journal Template Name");
          DeferralLine.SETRANGE("Gen. Jnl. Batch Name","Journal Batch Name");
          DeferralLine.SETRANGE("Document Type",0);
          DeferralLine.SETRANGE("Document No.",'');
          DeferralLine.SETRANGE("Line No.","Line No.");
        END ELSE
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");

        InitGLEntry(GenJournalLine,GLEntry,
          AccountNumber,
          -DeferralHeader."Amount to Defer (LCY)",
          -DeferralHeader."Amount to Defer",TRUE,TRUE);
        GLEntry.Description := Description;
        InsertGLEntry(GenJournalLine,GLEntry,TRUE);

        InitGLEntry(GenJournalLine,GLEntry,
          DeferralTemplate."Deferral Account",
          DeferralHeader."Amount to Defer (LCY)",
          DeferralHeader."Amount to Defer",TRUE,TRUE);
        GLEntry.Description := Description;
        InsertGLEntry(GenJournalLine,GLEntry,TRUE);

        // Here we want to get the Deferral Details table range and loop through them...
        IF DeferralLine.FINDSET THEN BEGIN
          PeriodicCount := 1;
          REPEAT
            PerPostDate := DeferralLine."Posting Date";
            IF GenJnlCheckLine.DateNotAllowed(PerPostDate) THEN
              ERROR(InvalidPostingDateErr,PerPostDate);

            InitGLEntry(GenJournalLine,GLEntry,AccountNumber,DeferralLine."Amount (LCY)",
              DeferralLine.Amount,
              TRUE,TRUE);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := DeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);

            InitGLEntry(GenJournalLine,GLEntry,
              DeferralTemplate."Deferral Account",-DeferralLine."Amount (LCY)",
              -DeferralLine.Amount,
              TRUE,TRUE);
            GLEntry."Posting Date" := PerPostDate;
            GLEntry.Description := DeferralLine.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);
            PeriodicCount := PeriodicCount + 1;
          UNTIL DeferralLine.NEXT = 0;
        END ELSE
          ERROR(NoDeferralScheduleErr,"Line No.","Deferral Code");
      END;
    END;

    LOCAL PROCEDURE PostDeferralPostBuffer@127(GenJournalLine@1005 : Record 81);
    VAR
      DeferralPostBuffer@1004 : Record 1703;
      GLEntry@1003 : Record 17;
      PostDate@1000 : Date;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF "Source Type" = "Source Type"::Customer THEN
          DeferralDocType := DeferralDocType::Sales
        ELSE
          DeferralDocType := DeferralDocType::Purchase;

        DeferralPostBuffer.SETRANGE("Deferral Doc. Type",DeferralDocType);
        DeferralPostBuffer.SETRANGE("Document No.","Document No.");
        DeferralPostBuffer.SETRANGE("Deferral Line No.","Deferral Line No.");

        IF DeferralPostBuffer.FINDSET THEN BEGIN
          REPEAT
            PostDate := DeferralPostBuffer."Posting Date";
            IF GenJnlCheckLine.DateNotAllowed(PostDate) THEN
              ERROR(InvalidPostingDateErr,PostDate);

            // When no sales/purch amount is entered, the offset was already posted
            IF (DeferralPostBuffer."Sales/Purch Amount" <> 0) OR (DeferralPostBuffer."Sales/Purch Amount (LCY)" <> 0) THEN BEGIN
              InitGLEntry(GenJournalLine,GLEntry,DeferralPostBuffer."G/L Account",
                DeferralPostBuffer."Sales/Purch Amount (LCY)",
                DeferralPostBuffer."Sales/Purch Amount",
                TRUE,TRUE);
              GLEntry."Posting Date" := PostDate;
              GLEntry.Description := DeferralPostBuffer.Description;
              GLEntry.CopyFromDeferralPostBuffer(DeferralPostBuffer);
              CASE DeferralDocType OF
                DeferralDocType::Sales:
                  GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Sale;
                DeferralDocType::Purchase:
                  GLEntry."Gen. Posting Type" := GLEntry."Gen. Posting Type"::Purchase;
              END;
              InsertGLEntry(GenJournalLine,GLEntry,TRUE);
            END;

            InitGLEntry(GenJournalLine,GLEntry,
              DeferralPostBuffer."Deferral Account",
              -DeferralPostBuffer."Amount (LCY)",
              -DeferralPostBuffer.Amount,
              TRUE,TRUE);
            GLEntry."Posting Date" := PostDate;
            GLEntry.Description := DeferralPostBuffer.Description;
            InsertGLEntry(GenJournalLine,GLEntry,TRUE);
          UNTIL DeferralPostBuffer.NEXT = 0;
          DeferralPostBuffer.DELETEALL;
        END;
      END;
    END;

    PROCEDURE RemoveDeferralSchedule@128(GenJournalLine@1002 : Record 81);
    VAR
      DeferralUtilities@1000 : Codeunit 1720;
      DeferralDocType@1001 : 'Purchase,Sales,G/L';
    BEGIN
      // Removing deferral schedule after all deferrals for this line have been posted successfully
      IF NOT GenJnlPostPreview.IsStarted THEN
        WITH GenJournalLine DO
          DeferralUtilities.DeferralCodeOnDelete(
            DeferralDocType::"G/L",
            "Journal Template Name",
            "Journal Batch Name",0,'',"Line No.");
    END;

    LOCAL PROCEDURE GetGLSourceCode@130();
    VAR
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      GLSourceCode := SourceCodeSetup."General Journal";
    END;

    LOCAL PROCEDURE DeferralPosting@131(DeferralCode@1000 : Code[10];SourceCode@1001 : Code[10];AccountNo@1002 : Code[20];VAR GenJournalLine@1005 : Record 81;Balancing@1006 : Boolean);
    BEGIN
      IF DeferralCode <> '' THEN
        // Sales and purchasing could have negative amounts, so check for them first...
        IF (SourceCode <> GLSourceCode) AND
           (GenJournalLine."Account Type" IN [GenJournalLine."Account Type"::Customer,GenJournalLine."Account Type"::Vendor])
        THEN
          PostDeferralPostBuffer(GenJournalLine)
        ELSE
          // Pure GL trx, only post deferrals if it is not a balancing entry
          IF NOT Balancing THEN
            PostDeferral(GenJournalLine,AccountNo);
    END;

    LOCAL PROCEDURE GetPostingAccountNo@225(VATPostingSetup@1002 : Record 325;VATEntry@1001 : Record 254;UnrealizedVAT@1000 : Boolean) : Code[20];
    VAR
      TaxJurisdiction@1003 : Record 320;
    BEGIN
      IF VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Sales Tax" THEN BEGIN
        VATEntry.TESTFIELD("Tax Jurisdiction Code");
        TaxJurisdiction.GET(VATEntry."Tax Jurisdiction Code");
        CASE VATEntry.Type OF
          VATEntry.Type::Sale:
            EXIT(TaxJurisdiction.GetSalesAccount(UnrealizedVAT));
          VATEntry.Type::Purchase:
            EXIT(TaxJurisdiction.GetPurchAccount(UnrealizedVAT));
        END;
      END;

      CASE VATEntry.Type OF
        VATEntry.Type::Sale:
          EXIT(VATPostingSetup.GetSalesAccount(UnrealizedVAT));
        VATEntry.Type::Purchase:
          EXIT(VATPostingSetup.GetPurchAccount(UnrealizedVAT));
      END;
    END;

    LOCAL PROCEDURE IsDebitAmount@137(DtldCVLedgEntryBuf@1000 : Record 383;Unapply@1001 : Boolean) : Boolean;
    VAR
      VATPostingSetup@1002 : Record 325;
      VATAmountCondition@1003 : Boolean;
      EntryAmount@1004 : Decimal;
    BEGIN
      WITH DtldCVLedgEntryBuf DO BEGIN
        VATAmountCondition :=
          "Entry Type" IN ["Entry Type"::"Payment Discount (VAT Excl.)","Entry Type"::"Payment Tolerance (VAT Excl.)",
                           "Entry Type"::"Payment Discount Tolerance (VAT Excl.)"];
        IF VATAmountCondition THEN BEGIN
          VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
          VATAmountCondition := VATPostingSetup."VAT Calculation Type" = VATPostingSetup."VAT Calculation Type"::"Full VAT";
        END;
        IF VATAmountCondition THEN
          EntryAmount := "VAT Amount (LCY)"
        ELSE
          EntryAmount := "Amount (LCY)";
        IF Unapply THEN
          EXIT(EntryAmount > 0);
        EXIT(EntryAmount <= 0);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostGenJnlLine@133(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitGLRegister@139(VAR GLRegister@1000 : Record 45;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertGlobalGLEntry@142(VAR GLEntry@1000 : Record 17);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertGLEntryBuffer@146(VAR TempGLEntryBuf@1000 : TEMPORARY Record 17;VAR GenJournalLine@1001 : Record 81);
    BEGIN
    END;

    LOCAL PROCEDURE GetServiceTaxSBCAccNo@1500455(ServiceTaxEntry@1500000 : Record 16473) : Code[20];
    VAR
      ServiceTaxSetup@1500005 : Record 16472;
      GLAccountNo@1500002 : Code[20];
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");

        IF "Reverse Charge" THEN
          GLAccountNo := ServiceTaxSetup.GetPayInterimSBCAccNo
        ELSE
          GLAccountNo := ServiceTaxSetup.GetRecSBCAccNoByISD("Input Service Distribution");
      END;
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE GetReversedServiceTaxSBCAccNo@1500457(ServiceTaxEntry@1500000 : Record 16473;AppliedToDocWithServTax@1500001 : Boolean) : Code[20];
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      GLAccountNo@1500002 : Code[20];
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
       IF "Reverse Charge" THEN
         IF AppliedToDocWithServTax THEN
             GLAccountNo := ServiceTaxSetup.GetRecInterimSBCAccNo
         ELSE
           GLAccountNo := ServiceTaxSetup.GetPaySBCAccNo
       ELSE
         IF NOT "Serv. Tax on Advance Payment" THEN
           GLAccountNo := ServiceTaxSetup.GetRecSBCAccNo
         ELSE
           GLAccountNo := ServiceTaxSetup.GetRecInterimSBCAccNoByISD("Input Service Distribution");
      END;
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE GetKKCessAccNo@1500023(ServiceTaxEntry@1500000 : Record 16473) : Code[20];
    VAR
      ServiceTaxSetup@1500005 : Record 16472;
      GLAccountNo@1500002 : Code[20];
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");

        IF "Reverse Charge" THEN
          GLAccountNo := ServiceTaxSetup.GetKKCessPayInterimAccNo
        ELSE
          GLAccountNo := ServiceTaxSetup.GetKKCessRecAccNoByISD("Input Service Distribution");
      END;
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE GetReversedKKcessAccNo@1500021(ServiceTaxEntry@1500000 : Record 16473;AppliedToDocWithServTax@1500001 : Boolean) : Code[20];
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      GLAccountNo@1500002 : Code[20];
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
       IF "Reverse Charge" THEN
         IF AppliedToDocWithServTax THEN
           GLAccountNo := ServiceTaxSetup.GetKKCessRecInterimAccNo
         ELSE
           GLAccountNo := ServiceTaxSetup.GetKKCessPayAccNo
       ELSE
         GLAccountNo := ServiceTaxSetup.GetKKCessRecInterimAccNoByISD("Input Service Distribution");
      END;
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE IsServiceTaxExist@1500011(GenJnlLine@1500000 : Record 81) : Boolean;
    BEGIN
      EXIT(
        (GenJnlLine."Service Tax Amount" <> 0) OR (GenJnlLine."Service Tax SBC Amount" <> 0) OR
        (GenJnlLine."KK Cess Amount" <> 0));
    END;

    LOCAL PROCEDURE FillGSTPostingBufferAdvPayment@1500027(GenJournalLine@1500030 : Record 81);
    VAR
      DetailedGSTEntryBuffer@1500010 : Record 16412;
      Vendor@1500000 : Record 23;
      Customer@1500002 : Record 18;
      GSTManagement@1500003 : Codeunit 16401;
    BEGIN
      GSTPostingBuffer[1].DELETEALL;
      WITH GenJournalLine DO BEGIN
        Location.GET("Location Code");
        TESTFIELD("Location State Code");
        IF ("Account Type" = "Account Type"::Vendor) AND Vendor.GET("Account No.") THEN BEGIN
          DetailedGSTEntryBuffer.RESET;
          DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Journal Template Name","Journal Batch Name","Line No.");
          DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Purchase);
          DetailedGSTEntryBuffer.SETRANGE("Journal Template Name","Journal Template Name");
          DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name","Journal Batch Name");
          DetailedGSTEntryBuffer.SETRANGE("Line No.","Line No.");
          DetailedGSTEntryBuffer.SETRANGE("Source Type",DetailedGSTEntryBuffer."Source Type"::Vendor);
          DetailedGSTEntryBuffer.SETRANGE("Source No.","Account No.");
          IF DetailedGSTEntryBuffer.FINDSET THEN
            REPEAT
              CLEAR(GSTPostingBuffer[1]);
              GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Purchase;
              GSTPostingBuffer[1]."Gen. Bus. Posting Group" := Vendor."Gen. Bus. Posting Group";
              GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
              GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
              GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
              GSTPostingBuffer[1]."GST Reverse Charge" := TRUE;
              GSTPostingBuffer[1]."GST Group Code"  := DetailedGSTEntryBuffer."GST Group Code";
              GSTPostingBuffer[1]."GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
              GSTPostingBuffer[1]."Party Code"  := DetailedGSTEntryBuffer."Source No.";
              GSTPostingBuffer[1]."GST Base Amount" := DetailedGSTEntryBuffer."GST Base Amount";
              IF DetailedGSTEntryBuffer."Input Service Distribution" THEN
                GSTPostingBuffer[1]."Account No." :=
                  GSTManagement.GetGSTRcvblInterimDistAccountNo("Location State Code",DetailedGSTEntryBuffer."GST Component Code")
              ELSE
                GSTPostingBuffer[1]."Account No." :=
                    GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",DetailedGSTEntryBuffer."GST Component Code");
              GSTPostingBuffer[1]."GST Amount" := DetailedGSTEntryBuffer."GST Amount";
              GSTPostingBuffer[1]."Bal. Account No." :=
                GSTManagement.GetGSTPayableAccountNo("Location State Code",DetailedGSTEntryBuffer."GST Component Code");
              UpdateGSTPostingBufferAdvPayment(GenJournalLine);
            UNTIL DetailedGSTEntryBuffer.NEXT = 0;
        END;
        IF ("Account Type" = "Account Type"::Customer) AND Customer.GET("Account No.") THEN BEGIN
          Location.GET("Location Code");
          DetailedGSTEntryBuffer.RESET;
          DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Journal Template Name","Journal Batch Name","Line No.");
          DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Sales);
          DetailedGSTEntryBuffer.SETRANGE("Journal Template Name","Journal Template Name");
          DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name","Journal Batch Name");
          DetailedGSTEntryBuffer.SETRANGE("Line No.","Line No.");
          DetailedGSTEntryBuffer.SETRANGE("Source Type",DetailedGSTEntryBuffer."Source Type"::Customer);
          DetailedGSTEntryBuffer.SETRANGE("Source No.","Account No.");
          IF DetailedGSTEntryBuffer.FINDSET THEN
            REPEAT
              CLEAR(GSTPostingBuffer[1]);
              GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Sales;
              GSTPostingBuffer[1]."Gen. Bus. Posting Group" := Customer."Gen. Bus. Posting Group";
              GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
              GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
              GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
              GSTPostingBuffer[1]."GST Reverse Charge" := FALSE;
              GSTPostingBuffer[1]."GST Group Code"  := DetailedGSTEntryBuffer."GST Group Code";
              GSTPostingBuffer[1]."GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
              GSTPostingBuffer[1]."Party Code"  := DetailedGSTEntryBuffer."Source No.";
              GSTPostingBuffer[1]."GST Base Amount" := DetailedGSTEntryBuffer."GST Base Amount";
              GSTPostingBuffer[1]."Account No." :=
                GSTManagement.GetGSTPayableAccountNo("Location State Code",DetailedGSTEntryBuffer."GST Component Code");
              GSTPostingBuffer[1]."GST Amount" := DetailedGSTEntryBuffer."GST Amount";
              GSTPostingBuffer[1]."Bal. Account No." :=
                GSTManagement.GetGSTPayableInterimAccountNo("Location State Code",DetailedGSTEntryBuffer."GST Component Code");
              UpdateGSTPostingBufferAdvPayment(GenJournalLine);
            UNTIL DetailedGSTEntryBuffer.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateGSTPostingBufferAdvPayment@1500018(GenJournalLine@1500000 : Record 81);
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      GSTPostingBuffer[1]."Dimension Set ID" := GenJournalLine."Dimension Set ID";
      DimMgt.UpdateGlobalDimFromDimSetID(GSTPostingBuffer[1]."Dimension Set ID",
        GSTPostingBuffer[1]."Global Dimension 1 Code",GSTPostingBuffer[1]."Global Dimension 2 Code");
      GSTPostingBuffer[2] := GSTPostingBuffer[1];
      IF GSTPostingBuffer[2].FIND THEN BEGIN
        GSTPostingBuffer[2]."GST Base Amount" += GSTPostingBuffer[1]."GST Base Amount";
        GSTPostingBuffer[2]."GST Amount" += GSTPostingBuffer[1]."GST Amount";
        GSTPostingBuffer[2].MODIFY;
      END ELSE
        GSTPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostGSTOnAdvPayment@1500046(GenJournalLine@1500000 : Record 81;LedgerEntryNo@1500012 : Integer);
    VAR
      GSTManagement@1500001 : Codeunit 16401;
      TemplateName@1500006 : Code[10];
      BatchName@1500007 : Code[10];
      ShipToCode@1500013 : Code[10];
      LineNo@1500008 : Integer;
      DetGSTTransactionNo@1500004 : Integer;
      CurrencyCode@1500009 : Code[10];
      CurrencyFactor@1500010 : Decimal;
      GSTPlaceOfSupply@1500011 : ' ,Bill-to Address,Ship-to Address,Location Address';
    BEGIN
      FillGSTPostingBufferAdvPayment(GenJournalLine);
      TemplateName := GenJournalLine."Journal Template Name";
      BatchName := GenJournalLine."Journal Batch Name";
      LineNo := GenJournalLine."Line No.";
      ShipToCode := GenJournalLine."Ship-to Code";
      CurrencyCode := GenJournalLine."Currency Code";
      CurrencyFactor := GenJournalLine."Currency Factor";
      GSTPlaceOfSupply := GenJournalLine."GST Place of Supply";
      IF GSTPostingBuffer[1].FINDLAST THEN BEGIN
        REPEAT
          CASE GSTPostingBuffer[1]."Transaction Type" OF
            GSTPostingBuffer[1]."Transaction Type"::Purchase:
             BEGIN
                IF GSTPostingBuffer[1]."GST Amount" <> 0 THEN BEGIN
                PostToGLEntry(
                  GenJournalLine,GSTPostingBuffer[1]."Account No.",
                  GSTPostingBuffer[1]."GST Amount",GenJournalLine."System-Created Entry");
                PostToGLEntry(
                 GenJournalLine,GSTPostingBuffer[1]."Bal. Account No.",-GSTPostingBuffer[1]."GST Amount",
                 GenJournalLine."System-Created Entry");
             END;
             END;
            GSTPostingBuffer[1]."Transaction Type"::Sales:
              BEGIN
                IF GSTPostingBuffer[1]."GST Amount" <> 0 THEN BEGIN
                PostToGLEntry(
                  GenJournalLine,GSTPostingBuffer[1]."Account No.",
                  GSTPostingBuffer[1]."GST Amount",GenJournalLine."System-Created Entry");
                PostToGLEntry(
                  GenJournalLine,GSTPostingBuffer[1]."Bal. Account No.",-GSTPostingBuffer[1]."GST Amount",
                  GenJournalLine."System-Created Entry");
              END;
           END;
           END;
         PostedDocNo := GenJournalLine."Document No.";
         DetGSTTransactionNo :=
          GSTManagement.InsertGSTLedgerEntryAdvPayment(GSTPostingBuffer[1],GenJournalLine,NextTransactionNo,'',0);
      UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
        GSTManagement.InsertDetailedGSTLedgEntryAdvPayment(
          GSTPostingBuffer[1],PostedDocNo,TemplateName,
          BatchName,LineNo,DetGSTTransactionNo,CurrencyCode,CurrencyFactor,LedgerEntryNo);
      END;
    END;

    LOCAL PROCEDURE CheckSimilarHSNSACCode@1500052(TemplateName@1500002 : Code[10];BatchName@1500003 : Code[10];DocumentNo@1500004 : Code[20];AccNo@1500005 : Code[20]);
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalLine1@1500001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.SETRANGE("Account No.",AccNo);
      GenJournalLine.SETRANGE("GST on Advance Payment",TRUE);
      IF GenJournalLine.FINDSET THEN
        REPEAT
          GenJournalLine1.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine1.SETRANGE("Journal Template Name",TemplateName);
          GenJournalLine1.SETRANGE("Journal Batch Name",BatchName);
          GenJournalLine1.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine1.SETRANGE("Account No.",GenJournalLine."Account No.");
          GenJournalLine1.SETFILTER("Line No.",'<>%1',GenJournalLine."Line No.");
          GenJournalLine1.SETRANGE("HSN/SAC Code",GenJournalLine."HSN/SAC Code");
          IF GenJournalLine1.FINDFIRST THEN
            ERROR(HSNSACCodeErr,GenJournalLine."Document No.");
        UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetLastDetailedGSTENtryNo@1500012() : Integer;
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.LOCKTABLE;
      IF DetailedGSTLedgerEntry.FINDLAST THEN
        EXIT(DetailedGSTLedgerEntry."Entry No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE GetLastGSTENtryNo@1500029() : Integer;
    VAR
      GSTLedgerEntry@1500000 : Record 16418;
    BEGIN
      GSTLedgerEntry.LOCKTABLE;
      IF GSTLedgerEntry.FINDLAST THEN
        EXIT(GSTLedgerEntry."Entry No.");
      EXIT(0);
    END;

    LOCAL PROCEDURE FillGSTPostingBufferRefund@1500061(GenJournalLine@1500030 : Record 81;ApplicationFactor@1500011 : Decimal;LedgerEntryNo@1500007 : Integer);
    VAR
      Vendor@1500000 : Record 23;
      Customer@1500002 : Record 18;
      DetailedGSTLedgerEntry@1500006 : Record 16419;
      GSTManagement@1500003 : Codeunit 16401;
      GSTBaseAmount@1500001 : Decimal;
      GSTAmount@1500004 : Decimal;
      ISDApplicable@1500005 : Boolean;
    BEGIN
      GSTPostingBuffer[1].DELETEALL;
      WITH GenJournalLine DO BEGIN
        Location.GET("Location Code");
        TESTFIELD("Location State Code");
        ISDApplicable := FillTotalGSTRefundAmount(GenJournalLine,LedgerEntryNo);
        FilterGSTRefundEntries(DetailedGSTLedgerEntry,GenJournalLine,LedgerEntryNo);
        DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Payment);
        DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
        IF ("Account Type" = "Account Type"::Vendor) AND Vendor.GET("Account No.") THEN BEGIN
          IF DetailedGSTLedgerEntry.FINDSET THEN
            REPEAT
              CLEAR(GSTPostingBuffer[1]);
              GSTApplicationManagement.GetRefundAmount(
                DetailedGSTLedgerEntry."Transaction Type","Applies-to Doc. No.","Account No.","HSN/SAC Code",
                DetailedGSTLedgerEntry."GST Component Code","Document No.",GSTBaseAmount,GSTAmount,"GST Group Code");
              GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Purchase;
              GSTPostingBuffer[1]."Gen. Bus. Posting Group" := Vendor."Gen. Bus. Posting Group";
              GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
              GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
              GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
              GSTPostingBuffer[1]."GST Group Code"  := DetailedGSTLedgerEntry."GST Group Code";
              GSTPostingBuffer[1]."GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
              GSTPostingBuffer[1]."Party Code"  := "Account No.";
              GSTPostingBuffer[1]."GST Base Amount" := ROUND((GSTBaseAmount * ApplicationFactor),0.01);
              GSTPostingBuffer[1]."GST Amount" :=
                GSTManagement.RoundGSTPrecisionRefund((GSTAmount * ApplicationFactor),
                DetailedGSTLedgerEntry."GST Rounding Precision",DetailedGSTLedgerEntry."GST Rounding Type");
              IF ISDApplicable THEN
                GSTPostingBuffer[1]."Bal. Account No." :=
                  GSTManagement.GetGSTRcvblInterimDistAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code")
              ELSE
              GSTPostingBuffer[1]."Bal. Account No." :=
                  GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
              GSTPostingBuffer[1]."Account No." :=
                GSTManagement.GetGSTPayableAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
              UpdateGSTPostingBufferAdvPayment(GenJournalLine);
            UNTIL DetailedGSTLedgerEntry.NEXT = 0;
        END;
        IF ("Account Type" = "Account Type"::Customer) AND Customer.GET("Account No.") THEN BEGIN
          IF DetailedGSTLedgerEntry.FINDSET THEN
            REPEAT
              CLEAR(GSTPostingBuffer[1]);
              GSTApplicationManagement.GetRefundAmount(
                DetailedGSTLedgerEntry."Transaction Type","Applies-to Doc. No.","Account No.","HSN/SAC Code",
                DetailedGSTLedgerEntry."GST Component Code","Document No.",GSTBaseAmount,GSTAmount,"GST Group Code");
              GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Sales;
              GSTPostingBuffer[1]."Gen. Bus. Posting Group" := Customer."Gen. Bus. Posting Group";
              GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
              GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
              GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
              GSTPostingBuffer[1]."GST Group Code"  := DetailedGSTLedgerEntry."GST Group Code";
              GSTPostingBuffer[1]."GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
              GSTPostingBuffer[1]."Party Code"  := "Account No.";
              GSTPostingBuffer[1]."GST Base Amount" := ROUND((GSTBaseAmount * ApplicationFactor),0.01);
              GSTPostingBuffer[1]."GST Amount" :=
                GSTManagement.RoundGSTPrecisionRefund((GSTAmount * ApplicationFactor),
                DetailedGSTLedgerEntry."GST Rounding Precision",DetailedGSTLedgerEntry."GST Rounding Type");
              GSTPostingBuffer[1]."Bal. Account No." :=
                GSTManagement.GetGSTPayableAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
              GSTPostingBuffer[1]."Account No." :=
                GSTManagement.GetGSTPayableInterimAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
              UpdateGSTPostingBufferAdvPayment(GenJournalLine);
            UNTIL DetailedGSTLedgerEntry.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostGSTRefund@1500042(GenJournalLine@1500000 : Record 81;TransactionNo@1500004 : Integer;ApplicationFactor@1500005 : Decimal;LedgerENntryNo@1500012 : Integer);
    VAR
      GSTApplicationManagement@1500011 : Codeunit 16403;
      DetGSTTransactionNo@1500003 : Integer;
      TransactionType@1500006 : 'Purchase,Sale';
    BEGIN
      FillGSTPostingBufferRefund(GenJournalLine,ApplicationFactor,LedgerENntryNo);
      IF GSTPostingBuffer[1]."Transaction Type" = GSTPostingBuffer[1]."Transaction Type"::Purchase THEN
        TransactionType := TransactionType::Purchase
      ELSE
        IF GSTPostingBuffer[1]."Transaction Type" = GSTPostingBuffer[1]."Transaction Type"::Sales THEN
          TransactionType := TransactionType::Sale;
      IF GSTPostingBuffer[1].FINDLAST THEN BEGIN
        REPEAT
          CASE GSTPostingBuffer[1]."Transaction Type" OF
            GSTPostingBuffer[1]."Transaction Type"::Purchase:
             BEGIN
                PostToGLEntry(
                  GenJournalLine,GSTPostingBuffer[1]."Account No.",
                  -GSTPostingBuffer[1]."GST Amount",GenJournalLine."System-Created Entry");
                PostToGLEntry(
                 GenJournalLine,GSTPostingBuffer[1]."Bal. Account No.",GSTPostingBuffer[1]."GST Amount",
                 GenJournalLine."System-Created Entry");
             END;
            GSTPostingBuffer[1]."Transaction Type"::Sales:
              BEGIN
                PostToGLEntry(
                  GenJournalLine,GSTPostingBuffer[1]."Account No.",
                  -GSTPostingBuffer[1]."GST Amount",GenJournalLine."System-Created Entry");
                PostToGLEntry(
                 GenJournalLine,GSTPostingBuffer[1]."Bal. Account No.",GSTPostingBuffer[1]."GST Amount",
                 GenJournalLine."System-Created Entry");
              END;
          END;
         PostedDocNo := GenJournalLine."Document No.";
         DetGSTTransactionNo :=
           GSTApplicationManagement.InsertGSTLedgerEntryAdvRefund(
           GSTPostingBuffer[1],GenJournalLine,NextTransactionNo,
           GenJournalLine."Currency Code",GenJournalLine."Currency Factor");
      UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
         GSTApplicationManagement.InsertDetailedGSTEntryRefund(
           PostedDocNo,TransactionNo,DetGSTTransactionNo,ApplicationFactor,GenJournalLine."Adv. Pmt. Adjustment",
            LedgerENntryNo,GenJournalLine."Posting Date");
      END;
    END;

    LOCAL PROCEDURE CheckGSTJurisdiction@1500065(TemplateName@1500002 : Code[10];BatchName@1500003 : Code[10];DocumentNo@1500004 : Code[20]);
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalLine1@1500001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.SETRANGE("GST on Advance Payment",TRUE);
      IF GenJournalLine.FINDSET THEN
        REPEAT
          GenJournalLine1.SETRANGE("Journal Template Name",TemplateName);
          GenJournalLine1.SETRANGE("Journal Batch Name",BatchName);
          GenJournalLine1.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine1.SETRANGE("GST on Advance Payment",TRUE);
          GenJournalLine1.SETFILTER("GST Jurisdiction Type",'<>%1',GenJournalLine."GST Jurisdiction Type");
          IF GenJournalLine1.FINDFIRST THEN
            ERROR(GSTJurisdictionErr,GenJournalLine."Document No.");
        UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckGSTNoGSTLines@1500066(TemplateName@1500002 : Code[10];BatchName@1500003 : Code[10]);
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalLine1@1500001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      GenJournalLine.SETFILTER(
        "Account Type",'%1|%2',GenJournalLine."Account Type"::Customer,GenJournalLine."Account Type"::Vendor);
      GenJournalLine.SETRANGE("Adv. Pmt. Adjustment",FALSE);
      GenJournalLine.SETRANGE("GST on Advance Payment",TRUE);
      IF GenJournalLine.FINDSET THEN
        REPEAT
          GenJournalLine1.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine1.SETRANGE("Journal Template Name",TemplateName);
          GenJournalLine1.SETRANGE("Journal Batch Name",BatchName);
          GenJournalLine1.SETFILTER(
            "Account Type",'%1|%2',GenJournalLine1."Account Type"::Customer,
            GenJournalLine1."Account Type"::Vendor);
          GenJournalLine1.SETRANGE("GST on Advance Payment",FALSE);
          IF GenJournalLine1.FINDFIRST THEN
            ERROR(NonGSTLinesErr);
        UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckGSTRegNo@1500067(TemplateName@1500002 : Code[10];BatchName@1500003 : Code[10];DocumentNo@1500004 : Code[20]);
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalLine1@1500001 : Record 81;
      Location@1500006 : Record 14;
      Location1@1500007 : Record 14;
      Customer@1500008 : Record 18;
      Customer1@1500009 : Record 18;
      ShiptoAddress@1500010 : Record 222;
      ShiptoAddress1@1500011 : Record 222;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.SETRANGE("GST on Advance Payment",TRUE);
      IF GenJournalLine.FINDSET THEN
        REPEAT
          GenJournalLine.TESTFIELD("Location Code");
          Location.GET(GenJournalLine."Location Code");
          GenJournalLine.TESTFIELD("Location State Code",Location."State Code");
          IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN
            Location.GET(GenJournalLine."Location Code");
          IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN BEGIN
            IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Bill-to Address" THEN
              Customer.GET(GenJournalLine."Account No.");
            IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Ship-to Address" THEN
              ShiptoAddress.GET(GenJournalLine."Account No.",GenJournalLine."Ship-to Code");
          END;
          GenJournalLine1.SETRANGE("Journal Template Name",TemplateName);
          GenJournalLine1.SETRANGE("Journal Batch Name",BatchName);
          GenJournalLine1.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine1.SETFILTER("Line No.",'<>%1',GenJournalLine."Line No.");
          IF GenJournalLine1.FINDFIRST THEN
          BEGIN
            GenJournalLine1.TESTFIELD("Location Code",GenJournalLine."Location Code");
            IF GenJournalLine1."Account Type" = GenJournalLine1."Account Type"::Vendor THEN BEGIN
              Location1.GET(GenJournalLine1."Location Code");
              IF Location."GST Registration No." <> Location1."GST Registration No." THEN
                ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
            END;
            IF GenJournalLine1."Account Type" = GenJournalLine1."Account Type"::Customer THEN BEGIN
              IF GenJournalLine1."GST Place of Supply" = GenJournalLine1."GST Place of Supply"::"Bill-to Address" THEN BEGIN
                Customer1.GET(GenJournalLine1."Account No.");
                IF Customer."GST Registration No." <> Customer1."GST Registration No." THEN
                  ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Ship-to Address" THEN
                  IF ShiptoAddress."GST Registration No." <> Customer1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Location Address" THEN
                  IF Location."GST Registration No." <> Customer1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
              END;
              IF GenJournalLine1."GST Place of Supply" = GenJournalLine1."GST Place of Supply"::"Location Address" THEN BEGIN
                Location1.GET(GenJournalLine."Location Code");
                IF Location."GST Registration No." <> Location1."GST Registration No." THEN
                  ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Bill-to Address" THEN
                  IF Customer."GST Registration No." <> Location1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Ship-to Address" THEN
                  IF ShiptoAddress."GST Registration No." <> Location1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
              END;
              IF GenJournalLine1."GST Place of Supply" = GenJournalLine1."GST Place of Supply"::"Ship-to Address" THEN BEGIN
                ShiptoAddress1.GET(GenJournalLine1."Account No.",GenJournalLine1."Ship-to Code");
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Ship-to Address" THEN
                IF ShiptoAddress."GST Registration No." <> ShiptoAddress1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Bill-to Address" THEN
                  IF Customer."GST Registration No." <> ShiptoAddress1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
                IF GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::"Location Address" THEN
                  IF Location."GST Registration No." <> ShiptoAddress1."GST Registration No." THEN
                    ERROR(STRSUBSTNO(GSTRegNoErr,GenJournalLine1."Document No.",GenJournalLine1."Line No."));
              END;
            END;
          END;
        UNTIL GenJournalLine.NEXT = 0;
    END;

    PROCEDURE CheckValidationsForGST@1500072(JnlTemplateName@1500000 : Code[10];JnlBatchName@1500001 : Code[10];DocumentNo@1500002 : Code[20]);
    BEGIN
      CheckGSTNoGSTLines(JnlTemplateName,JnlBatchName);
      CheckGSTJurisdiction(JnlTemplateName,JnlBatchName,DocumentNo);
      CheckGSTRegNo(JnlTemplateName,JnlBatchName,DocumentNo);
      IsPlaceOfSupplyBlank(JnlTemplateName,JnlBatchName,DocumentNo);
    END;

    LOCAL PROCEDURE IsPlaceOfSupplyBlank@1500069(TemplateName@1500002 : Code[10];BatchName@1500001 : Code[10];DocumentNo@1500000 : Code[20]);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
      GenJournalLine.SETRANGE("GST on Advance Payment",TRUE);
      GenJournalLine.SETRANGE("GST Place of Supply",GenJournalLine."GST Place of Supply"::" ");
      IF GenJournalLine.FINDFIRST THEN
        ERROR(STRSUBSTNO(PlaceOfSupplyErr,TemplateName,BatchName,GenJournalLine."Line No."));
    END;

    LOCAL PROCEDURE PostGSTSalesApplication@1500071(VAR GenJournalLine@1500000 : Record 81;VAR CVLedgerEntryBuffer@1500001 : Record 382;VAR OldCVLedgerEntryBuffer@1500002 : Record 382;AmountToApply@1500006 : Decimal);
    VAR
      CustLedgerEntry@1500003 : Record 21;
      ApplyingCustLedgEntry@1500005 : Record 21;
      GSTGroupRemAmount@1500004 : Decimal;
      InvoiceGSTAmount@1500008 : Decimal;
      AppliedGSTAmount@1500007 : Decimal;
      InvoiceAmount@1500009 : Decimal;
    BEGIN
      IF AmountToApply = 0 THEN
        EXIT;
      IF GenJournalLine."Offline Application" THEN BEGIN
        CustLedgerEntry.GET(CVLedgerEntryBuffer."Entry No.");
        ApplyingCustLedgEntry.GET(OldCVLedgerEntryBuffer."Entry No.");
        IF CustLedgerEntry."GST on Advance Payment" THEN BEGIN
          GSTApplicationManagement.ApplyCurrencyFactor(TRUE);
          GSTApplicationManagement.GetSalesInvoiceAmountOffline(
            CustLedgerEntry,ApplyingCustLedgEntry,ApplyingCustLedgEntry."Total TDS/TCS Incl SHE CESS");
          GSTGroupRemAmount :=
            GSTApplicationManagement.GetApplicationRemainingAmount(
              TransactionType2::Sale,ApplyingCustLedgEntry."Document Type",
              ApplyingCustLedgEntry."Document No.",ApplyingCustLedgEntry."Customer No.",CustLedgerEntry."GST Group Code",
              AmountToApply,CVLedgerEntryBuffer."Remaining Amt. (LCY)",CustLedgerEntry."Entry No.",TRUE,
              InvoiceGSTAmount,AppliedGSTAmount,InvoiceAmount);
            GSTApplicationManagement.CheckGroupAmount(
              ApplyingCustLedgEntry."Document Type",
              ApplyingCustLedgEntry."Document No.",AmountToApply,GSTGroupRemAmount,
              CVLedgerEntryBuffer."Remaining Amt. (LCY)",CustLedgerEntry."GST Group Code");
            PostSaleGSTApplicationGL(GenJournalLine,CustLedgerEntry."Document No.",
              ApplyingCustLedgEntry."Document No.",CustLedgerEntry."Transaction No.",CustLedgerEntry."Entry No.",
              CustLedgerEntry."GST Group Code",ApplyingCustLedgEntry."Transaction No.");
        END ELSE
          IF ApplyingCustLedgEntry."GST on Advance Payment" THEN BEGIN
            GSTApplicationManagement.ApplyCurrencyFactor(TRUE);
            GSTApplicationManagement.GetSalesInvoiceAmountWithPaymentOffline(
              CustLedgerEntry,ApplyingCustLedgEntry,CustLedgerEntry."Total TDS/TCS Incl SHE CESS");
            GSTGroupRemAmount :=
              GSTApplicationManagement.GetApplicationRemainingAmount(
                TransactionType2::Sale,CustLedgerEntry."Document Type",
                CustLedgerEntry."Document No.",ApplyingCustLedgEntry."Customer No.",ApplyingCustLedgEntry."GST Group Code",
                AmountToApply,OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",ApplyingCustLedgEntry."Entry No.",TRUE,
                InvoiceGSTAmount,AppliedGSTAmount,InvoiceAmount);
              GSTApplicationManagement.CheckGroupAmount(
                CustLedgerEntry."Document Type",
                CustLedgerEntry."Document No.",AmountToApply,GSTGroupRemAmount * -1,
                OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",ApplyingCustLedgEntry."GST Group Code");
              PostSaleGSTApplicationGL(GenJournalLine,ApplyingCustLedgEntry."Document No.",CustLedgerEntry."Document No.",
                ApplyingCustLedgEntry."Transaction No.",ApplyingCustLedgEntry."Entry No.",
                ApplyingCustLedgEntry."GST Group Code",CustLedgerEntry."Transaction No.");
          END;
      END ELSE BEGIN
        ApplyingCustLedgEntry.GET(OldCVLedgerEntryBuffer."Entry No.");
        IF ApplyingCustLedgEntry."GST on Advance Payment" THEN BEGIN
          GSTApplicationManagement.ApplyCurrencyFactor(TRUE);
        GSTApplicationManagement.GetSalesInvoiceAmountWithPaymentOffline(
          OnlineCustLedgerEntry,ApplyingCustLedgEntry,OnlineCustLedgerEntry."Total TDS/TCS Incl SHE CESS");
        GSTGroupRemAmount :=
          GSTApplicationManagement.GetApplicationRemainingAmount(
            TransactionType2::Sale,OnlineCustLedgerEntry."Document Type",
            OnlineCustLedgerEntry."Document No.",ApplyingCustLedgEntry."Customer No.",ApplyingCustLedgEntry."GST Group Code",
            AmountToApply,OldCVLedgerEntryBuffer."Remaining Amt. (LCY)" + OldCVLedgerEntryBuffer."Total TDS Including SHECESS",
            ApplyingCustLedgEntry."Entry No.",TRUE,
            InvoiceGSTAmount,AppliedGSTAmount,InvoiceAmount);
          GSTApplicationManagement.CheckGroupAmount(
            OnlineCustLedgerEntry."Document Type",
            OnlineCustLedgerEntry."Document No.",AmountToApply,GSTGroupRemAmount * -1,
            OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",ApplyingCustLedgEntry."GST Group Code");
          PostSaleGSTApplicationGL(GenJournalLine,ApplyingCustLedgEntry."Document No.",OnlineCustLedgerEntry."Document No.",
            ApplyingCustLedgEntry."Transaction No.",ApplyingCustLedgEntry."Entry No.",
            ApplyingCustLedgEntry."GST Group Code",OnlineCustLedgerEntry."Transaction No.");
        END;
      END;
    END;

    LOCAL PROCEDURE PostSaleGSTApplicationGL@1500074(VAR GenJournalLine@1500021 : Record 81;PaymentDocNo@1500002 : Code[20];InvoiceNo@1500019 : Code[20];TransactionNo@1500020 : Integer;EntryNo@1500022 : Integer;GSTGroupCode@1500023 : Code[20];InvoiceTransactionNo@1500009 : Integer);
    VAR
      ApplyDetailedGSTLedgerEntry@1500000 : Record 16419;
      GSTApplicationBuffer@1500005 : Record 16423;
      GSTLedgerEntry@1500015 : Record 16418;
      DetailedGSTLedgerEntry@1500006 : Record 16419;
      ApplyGSTLedgerEntry@1500016 : Record 16418;
      SourceCodeSetup@1500018 : Record 242;
      GSTManagement@1500007 : Codeunit 16401;
      GSTApplicationManagement@1500014 : Codeunit 16403;
      AccountNo@1500012 : Code[20];
      BalAccountNo@1500013 : Code[20];
      AppliedBase@1500008 : Decimal;
      AppliedAmount@1500004 : Decimal;
      RemainingBase@1500003 : Decimal;
      RemainingAmount@1500001 : Decimal;
    BEGIN
      SourceCodeSetup.GET;
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type","Transaction Type"::Sale);
        SETRANGE("Account No.",GenJournalLine."Account No.");
        SETRANGE("Original Document Type","Original Document Type"::Payment);
        SETRANGE("Original Document No.",PaymentDocNo);
        SETRANGE("Applied Doc. Type","Applied Doc. Type"::Invoice);
        SETRANGE("Applied Doc. No.",InvoiceNo);
        SETRANGE("GST Group Code",GSTGroupCode);
        SETRANGE("CLE/VLE Entry No.",EntryNo);
        IF FINDSET THEN
          REPEAT
            DetailedGSTLedgerEntry.SETCURRENTKEY(
              "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
            DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
            DetailedGSTLedgerEntry.SETRANGE("Source No.",GenJournalLine."Account No.");
            DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
            DetailedGSTLedgerEntry.SETRANGE("Document No." ,"Applied Doc. No.");
            DetailedGSTLedgerEntry.SETRANGE("GST Group Code","GST Group Code");
            DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
            DetailedGSTLedgerEntry.SETRANGE("Transaction No.",InvoiceTransactionNo);
            DetailedGSTLedgerEntry.SETRANGE("GST Component Code","GST Component Code");
            DetailedGSTLedgerEntry.SETRANGE("Remaining Amount Closed",FALSE);
            DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
            IF DetailedGSTLedgerEntry.FINDFIRST THEN BEGIN
              RemainingBase := "Applied Base Amount";
              RemainingAmount := "Applied Amount";
              GSTPostingBuffer[1].DELETEALL;
              GSTManagement.CheckGSTAccountingPeriod(GenJournalLine."Posting Date");
              REPEAT
                IF (RemainingBase <> 0) AND (DetailedGSTLedgerEntry."Remaining Base Amount" < 0) THEN BEGIN
                  GetAppliedAmount(ABS(RemainingBase),ABS(RemainingAmount),
                    ABS(DetailedGSTLedgerEntry."Remaining Base Amount"),
                    ABS(DetailedGSTLedgerEntry."Remaining GST Amount"),AppliedBase,AppliedAmount);
                  CreateDetailedGSTApplicationEntry(
                    ApplyDetailedGSTLedgerEntry,DetailedGSTLedgerEntry,GenJournalLine,
                    InvoiceNo,AppliedBase * -1,AppliedAmount * -1,"Original Document No.");
                  ApplyDetailedGSTLedgerEntry.Paid := FALSE;
                  ApplyDetailedGSTLedgerEntry."CLE/VLE Entry No." := EntryNo;
                ApplyDetailedGSTLedgerEntry.INSERT(TRUE);
                DetailedGSTLedgerEntry."Application Doc. Type" := ApplyDetailedGSTLedgerEntry."Document Type";
                DetailedGSTLedgerEntry."Application Doc. No" := ApplyDetailedGSTLedgerEntry."Document No.";
                  DetailedGSTLedgerEntry."Remaining Base Amount" += AppliedBase;
                  DetailedGSTLedgerEntry."Remaining GST Amount" += AppliedAmount;
                  DetailedGSTLedgerEntry."Remaining Amount Closed" := DetailedGSTLedgerEntry."Remaining Base Amount" = 0;
                DetailedGSTLedgerEntry.MODIFY;
                  RemainingBase := ABS(RemainingBase) - ABS(AppliedBase);
                  RemainingAmount := ABS (RemainingAmount) - ABS(AppliedAmount);
                  FillGSTPostingBufferWithApplication(ApplyDetailedGSTLedgerEntry);
                END;
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
                AccountNo :=
                  GSTManagement.GetGSTPayableAccountNo(
                  ApplyDetailedGSTLedgerEntry."Location State Code",ApplyDetailedGSTLedgerEntry."GST Component Code");
                BalAccountNo :=
                  GSTManagement.GetGSTPayableInterimAccountNo(
                  ApplyDetailedGSTLedgerEntry."Location State Code",ApplyDetailedGSTLedgerEntry."GST Component Code");
              IF GSTPostingBuffer[1].FINDLAST THEN
                REPEAT
                  InsertApplicationGSTLedger(
                    GSTPostingBuffer[1],ApplyDetailedGSTLedgerEntry,
                    GenJournalLine."Posting Date",SourceCodeSetup."Sales Entry Application",ApplyDetailedGSTLedgerEntry."Payment Type",
                    AccountNo,BalAccountNo,'','');
                  PostSalesApplicationGLEntries(GenJournalLine,AccountNo,BalAccountNo,FALSE,GSTPostingBuffer[1]."GST Amount");
                UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
            END;
          UNTIL NEXT = 0;
          GSTApplicationManagement.DeletePaymentAplicationBuffer(TransactionType2::Sale,EntryNo);
          GSTApplicationManagement.DeleteInvoiceApplicationBufferOffline(
            TransactionType2::Sale,GenJournalLine."Account No.","Original Document Type"::Invoice,InvoiceNo);
      END;
    END;

    LOCAL PROCEDURE UnApplyGSTApplication@1500073(GenJournalLine@1500006 : Record 81;TransactionType@1500005 : 'Purchase,Sale';TransactionNo@1500014 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500016 : Record 16419;
      DetailedGSTLedgerEntry3@1500017 : Record 16419;
      DetailedGSTLedgerEntry2@1500002 : Record 16419;
    BEGIN
      IF GenJournalLine."Document Type" = GenJournalLine."Document Type"::Refund THEN
        EXIT;
      CreateUnapplicationGSTLedger(GenJournalLine,TransactionType,TransactionNo);
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction No.");
        SETRANGE("Transaction No.",TransactionNo);
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Entry Type","Entry Type"::Application);
        SETRANGE(UnApplied,FALSE);
        IF FINDSET THEN BEGIN
          GSTPostingBuffer[1].DELETEALL;
        REPEAT
          DetailedGSTLedgerEntry3.INIT;
          DetailedGSTLedgerEntry3.TRANSFERFIELDS(DetailedGSTLedgerEntry);
          DetailedGSTLedgerEntry3."Entry No." := GSTManagement.GetNextGSTDetailEntryNo;
          DetailedGSTLedgerEntry3."Document No." := DetailedGSTLedgerEntry3."Document No.";
          DetailedGSTLedgerEntry3."Transaction No." := GetNextTransactionNo;
          DetailedGSTLedgerEntry3."Entry Type" := DetailedGSTLedgerEntry3."Entry Type"::Application;
          DetailedGSTLedgerEntry3."GST Base Amount" := -"GST Base Amount";
          DetailedGSTLedgerEntry3."GST Amount" := -"GST Amount";
          DetailedGSTLedgerEntry3.Quantity := -Quantity;
          DetailedGSTLedgerEntry3."Applied From Entry No." := "Entry No.";
          DetailedGSTLedgerEntry3.UnApplied := TRUE;
          DetailedGSTLedgerEntry3."User ID" := USERID;
          DetailedGSTLedgerEntry3.Positive := DetailedGSTLedgerEntry3."GST Amount" > 0;
          DetailedGSTLedgerEntry3.Paid := FALSE;
          DetailedGSTLedgerEntry3.INSERT(TRUE);
          DetailedGSTLedgerEntry2.GET("Entry No.");
          DetailedGSTLedgerEntry2.UnApplied := TRUE;
          DetailedGSTLedgerEntry2.MODIFY(TRUE);
          DetailedGSTLedgerEntry2.GET("Applied From Entry No.");
          DetailedGSTLedgerEntry2."Remaining Base Amount" += DetailedGSTLedgerEntry3."GST Base Amount";
          DetailedGSTLedgerEntry2."Remaining GST Amount" += DetailedGSTLedgerEntry3."GST Amount";
          DetailedGSTLedgerEntry2."Remaining Amount Closed" := FALSE;
          DetailedGSTLedgerEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
      END;
    END;

    LOCAL PROCEDURE PostGSTPurchaseApplication@1500079(VAR GenJournalLine@1500000 : Record 81;VAR CVLedgerEntryBuffer@1500001 : Record 382;VAR OldCVLedgerEntryBuffer@1500002 : Record 382;AmountToApply@1500006 : Decimal);
    VAR
      VendorLedgerEntry@1500003 : Record 25;
      ApplyingVendorLedgerEntry@1500005 : Record 25;
      InvoiceGSTAmount@1500008 : Decimal;
      AppliedGSTAmount@1500007 : Decimal;
      InvoiceBase@1500009 : Decimal;
    BEGIN
      IF AmountToApply = 0 THEN
        EXIT;
      IF GenJournalLine."Document Type" = GenJournalLine."Document Type"::Refund THEN
        EXIT;
      IF GenJournalLine."Offline Application" THEN BEGIN
        VendorLedgerEntry.GET(CVLedgerEntryBuffer."Entry No.");
        ApplyingVendorLedgerEntry.GET(OldCVLedgerEntryBuffer."Entry No.");
        IF VendorLedgerEntry."GST on Advance Payment" AND VendorLedgerEntry."GST Reverse Charge" THEN BEGIN
          GSTApplicationManagement.ApplyCurrencyFactor(TRUE);
          GSTApplicationManagement.GetPurchaseInvoiceAmountOffline(
            VendorLedgerEntry,ApplyingVendorLedgerEntry,ApplyingVendorLedgerEntry."Total TDS Including SHE CESS");
          GSTApplicationManagement.GetApplicationRemainingAmount(
              TransactionType2::Purchase,ApplyingVendorLedgerEntry."Document Type",
              ApplyingVendorLedgerEntry."Document No.",ApplyingVendorLedgerEntry."Vendor No.",VendorLedgerEntry."GST Group Code",
              AmountToApply,CVLedgerEntryBuffer."Remaining Amt. (LCY)",VendorLedgerEntry."Entry No.",FALSE,
              InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
          GSTApplicationManagement.CheckGroupAmount(
            ApplyingVendorLedgerEntry."Document Type",
            ApplyingVendorLedgerEntry."Document No.",AmountToApply,InvoiceBase,
            CVLedgerEntryBuffer."Remaining Amt. (LCY)",VendorLedgerEntry."GST Group Code");
          PostPurchaseGSTApplicationGL(GenJournalLine,VendorLedgerEntry."Document No.",
            ApplyingVendorLedgerEntry."Document No.",VendorLedgerEntry."Transaction No.",VendorLedgerEntry."Entry No.",
            VendorLedgerEntry."GST Group Code",ApplyingVendorLedgerEntry."Transaction No.");
        END ELSE
          IF ApplyingVendorLedgerEntry."GST on Advance Payment" AND ApplyingVendorLedgerEntry."GST Reverse Charge" THEN BEGIN
            GSTApplicationManagement.ApplyCurrencyFactor(TRUE);
            GSTApplicationManagement.GetPurchaseInvoiceAmountWithPaymentOffline(
              VendorLedgerEntry,ApplyingVendorLedgerEntry,VendorLedgerEntry."Total TDS Including SHE CESS");
            GSTApplicationManagement.GetApplicationRemainingAmount(
              TransactionType2::Purchase,VendorLedgerEntry."Document Type",
              VendorLedgerEntry."Document No.",ApplyingVendorLedgerEntry."Vendor No.",ApplyingVendorLedgerEntry."GST Group Code",
              AmountToApply,OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",ApplyingVendorLedgerEntry."Entry No.",FALSE,
              InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
            GSTApplicationManagement.CheckGroupAmount(
              VendorLedgerEntry."Document Type",
              VendorLedgerEntry."Document No.",AmountToApply,InvoiceBase,
              OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",ApplyingVendorLedgerEntry."GST Group Code");
            PostPurchaseGSTApplicationGL(GenJournalLine,ApplyingVendorLedgerEntry."Document No.",VendorLedgerEntry."Document No.",
              ApplyingVendorLedgerEntry."Transaction No.",ApplyingVendorLedgerEntry."Entry No.",
              ApplyingVendorLedgerEntry."GST Group Code",VendorLedgerEntry."Transaction No.");
          END ELSE
            PostGSTWithNormalPaymentOffline(
              GenJournalLine,CVLedgerEntryBuffer,OldCVLedgerEntryBuffer,AmountToApply);
      END ELSE BEGIN
        ApplyingVendorLedgerEntry.GET(OldCVLedgerEntryBuffer."Entry No.");
        IF ApplyingVendorLedgerEntry."GST on Advance Payment" THEN BEGIN
          GSTApplicationManagement.ApplyCurrencyFactor(TRUE);
          GSTApplicationManagement.GetPurchaseInvoiceAmountWithPaymentOffline(
            OnlineVendorLedgerEntry,ApplyingVendorLedgerEntry,
            OnlineVendorLedgerEntry."Total TDS Including SHE CESS");
          GSTApplicationManagement.GetApplicationRemainingAmount(
            TransactionType2::Purchase,OnlineVendorLedgerEntry."Document Type",
            OnlineVendorLedgerEntry."Document No.",ApplyingVendorLedgerEntry."Vendor No.",
            ApplyingVendorLedgerEntry."GST Group Code",AmountToApply,OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",
            ApplyingVendorLedgerEntry."Entry No.",FALSE,InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
          GSTApplicationManagement.CheckGroupAmount(
            OnlineVendorLedgerEntry."Document Type",OnlineVendorLedgerEntry."Document No.",AmountToApply,InvoiceBase,
            OldCVLedgerEntryBuffer."Remaining Amt. (LCY)",ApplyingVendorLedgerEntry."GST Group Code");
          PostPurchaseGSTApplicationGL(GenJournalLine,ApplyingVendorLedgerEntry."Document No.",OnlineVendorLedgerEntry."Document No.",
            ApplyingVendorLedgerEntry."Transaction No.",ApplyingVendorLedgerEntry."Entry No.",
            ApplyingVendorLedgerEntry."GST Group Code",OnlineVendorLedgerEntry."Transaction No.");
        END ELSE
          PostGSTWithNormalPaymentOnline(
            GenJournalLine,CVLedgerEntryBuffer,OldCVLedgerEntryBuffer,AmountToApply);
      END;
    END;

    LOCAL PROCEDURE PostPurchaseGSTApplicationGL@1500078(VAR GenJournalLine@1500021 : Record 81;PaymentDocNo@1500002 : Code[20];InvoiceNo@1500019 : Code[20];TransactionNo@1500020 : Integer;PaymentEntryNo@1500008 : Integer;GSTGroupCode@1500011 : Code[20];InvoiceTransactionNo@1500001 : Integer);
    VAR
      ApplyDetailedGSTLedgerEntry@1500000 : Record 16419;
      GSTApplicationBuffer@1500005 : Record 16423;
      GSTLedgerEntry@1500015 : Record 16418;
      DetailedGSTLedgerEntry@1500006 : Record 16419;
      ApplyGSTLedgerEntry@1500016 : Record 16418;
      SourceCodeSetup@1500018 : Record 242;
      GSTManagement@1500007 : Codeunit 16401;
      GSTApplicationManagement@1500014 : Codeunit 16403;
      AppliedBase@1500003 : Decimal;
      AppliedAmount@1500004 : Decimal;
      RemainingBase@1500009 : Decimal;
      RemainingAmount@1500010 : Decimal;
      AccountNo@1500012 : Code[20];
      BalanceAccountNo@1500013 : Code[20];
      BalanceAccountNo2@1500017 : Code[20];
    BEGIN
      SourceCodeSetup.GET;
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Account No.",GenJournalLine."Account No.");
        SETRANGE("Original Document Type","Original Document Type"::Payment);
        SETRANGE("Original Document No.",PaymentDocNo);
        SETRANGE("Applied Doc. Type","Applied Doc. Type"::Invoice);
        SETRANGE("Applied Doc. No.",InvoiceNo);
        SETRANGE("GST Group Code",GSTGroupCode);
        SETRANGE("CLE/VLE Entry No.",PaymentEntryNo);
        IF FINDSET THEN
          REPEAT
            DetailedGSTLedgerEntry.SETCURRENTKEY(
              "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
            DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Purchase);
            DetailedGSTLedgerEntry.SETRANGE("Source No.",GenJournalLine."Account No.");
            DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
            DetailedGSTLedgerEntry.SETRANGE("Document No." ,"Applied Doc. No.");
            DetailedGSTLedgerEntry.SETRANGE("GST Group Code","GST Group Code");
            DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
            DetailedGSTLedgerEntry.SETRANGE("Transaction No.",InvoiceTransactionNo);
            DetailedGSTLedgerEntry.SETRANGE("GST Component Code","GST Component Code");
            DetailedGSTLedgerEntry.SETRANGE("Remaining Amount Closed",FALSE);
            DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
            IF DetailedGSTLedgerEntry.FINDSET THEN BEGIN
              RemainingBase := "Applied Base Amount";
              RemainingAmount := "Applied Amount";
              GSTPostingBuffer[1].DELETEALL;
              GSTManagement.CheckGSTAccountingPeriod(GenJournalLine."Posting Date");
              REPEAT
                IF (RemainingBase <> 0) AND (DetailedGSTLedgerEntry."Remaining Base Amount" > 0) THEN BEGIN
                  GetAppliedAmount(
                    ABS(RemainingBase),ABS(RemainingAmount),
                    ABS(DetailedGSTLedgerEntry."Remaining Base Amount"),
                    ABS(DetailedGSTLedgerEntry."Remaining GST Amount"),AppliedBase,AppliedAmount);
                  CreateDetailedGSTApplicationEntry(
                    ApplyDetailedGSTLedgerEntry,DetailedGSTLedgerEntry,GenJournalLine,
                    InvoiceNo,AppliedBase,AppliedAmount,"Original Document No.");
                  IF ApplyDetailedGSTLedgerEntry."GST Group Type" = ApplyDetailedGSTLedgerEntry."GST Group Type"::Service THEN
                    ApplyDetailedGSTLedgerEntry."Credit Availed" := TRUE
                  ELSE
                    IF ApplyDetailedGSTLedgerEntry."GST Vendor Type" = ApplyDetailedGSTLedgerEntry."GST Vendor Type"::Unregistered THEN
                      ApplyDetailedGSTLedgerEntry."Credit Availed" := FALSE;
                  IF (ApplyDetailedGSTLedgerEntry."Associated Enterprises") OR
                    (ApplyDetailedGSTLedgerEntry."GST Credit" = ApplyDetailedGSTLedgerEntry."GST Credit"::"Non-Availment") THEN
                    ApplyDetailedGSTLedgerEntry."Credit Availed" := FALSE;
                  ApplyDetailedGSTLedgerEntry.Paid := FALSE;
                  ApplyDetailedGSTLedgerEntry."CLE/VLE Entry No." := PaymentEntryNo;
                  ApplyDetailedGSTLedgerEntry.INSERT(TRUE);
                  DetailedGSTLedgerEntry."Application Doc. Type" := ApplyDetailedGSTLedgerEntry."Document Type";
                  DetailedGSTLedgerEntry."Application Doc. No" := ApplyDetailedGSTLedgerEntry."Document No.";
                  DetailedGSTLedgerEntry."Remaining Base Amount" -= AppliedBase;
                  DetailedGSTLedgerEntry."Remaining GST Amount" -= AppliedAmount;
                  DetailedGSTLedgerEntry."Remaining Amount Closed" := DetailedGSTLedgerEntry."Remaining Base Amount" = 0;
                  DetailedGSTLedgerEntry.MODIFY;
                  RemainingBase := ABS(RemainingBase) - ABS(AppliedBase);
                  RemainingAmount := ABS(RemainingAmount) - ABS(AppliedAmount);
                  FillGSTPostingBufferWithApplication(ApplyDetailedGSTLedgerEntry);
                END;
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
              IF GSTPostingBuffer[1].FINDLAST THEN
                REPEAT
                  GetCreditAccountAdvancePayment(DetailedGSTLedgerEntry,GSTPostingBuffer[1],AccountNo,BalanceAccountNo,BalanceAccountNo2);
                  InsertApplicationGSTLedger(
                    GSTPostingBuffer[1],ApplyDetailedGSTLedgerEntry,GenJournalLine."Posting Date",
                    SourceCodeSetup."Purchase Entry Application",ApplyDetailedGSTLedgerEntry."Payment Type",
                    AccountNo,BalanceAccountNo,BalanceAccountNo2,'');
                  PostPurchaseApplicationGLEntries(
                    GenJournalLine,FALSE,AccountNo,BalanceAccountNo,BalanceAccountNo2,GSTPostingBuffer[1]."GST Amount");
                UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
            END;
          UNTIL NEXT = 0;
          GSTApplicationManagement.DeletePaymentAplicationBuffer(TransactionType2::Purchase,PaymentEntryNo);
          GSTApplicationManagement.DeleteInvoiceApplicationBufferOffline(
            TransactionType2::Purchase,GenJournalLine."Account No.","Original Document Type"::Invoice,InvoiceNo);
      END;
    END;

    LOCAL PROCEDURE PostCustomerGSTPayment@1500047(VAR GenJournalLine@1500000 : Record 81;VAR CustLedgerEntry@1500009 : Record 21);
    VAR
      Location@1500008 : Record 14;
      GSTManagement@1500007 : Codeunit 16401;
      TransactionType@1500006 : 'Purchase,Sale';
      GSTPlaceOfSupplyState@1500005 : Code[10];
      GSTPerStateCode@1500004 : Code[10];
      ConfigType@1500003 : 'Vendor,Customer';
      GSTJurisdiction@1500002 : 'Intrastate,Interstate';
      TCSAmount@1500001 : Decimal;
    BEGIN
      WITH GenJournalLine DO BEGIN
          Location.GET("Location Code");
          GSTManagement.DeleteGSTBufferAdvPayment(GenJournalLine,TransactionType::Sale);
          GSTPlaceOfSupplyState := GetPlaceOfSupply(GenJournalLine);
          IF "GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export"] THEN
            GSTPerStateCode :=
              GSTManagement.GetGSTConfiguration(ConfigType::Customer,Location."State Code",'',GSTJurisdiction)
          ELSE
            GSTPerStateCode :=
              GSTManagement.GetGSTConfiguration(
                ConfigType::Customer,Location."State Code",GSTPlaceOfSupplyState,GSTJurisdiction);
          IF GSTPerStateCode <> '' THEN BEGIN
            IF "TCS Nature of Collection" <> '' THEN
              TCSAmount := "Total TDS/TCS Incl. SHE CESS";
            GSTManagement.CalculateGSTAmountsAdvPaymnt(
              GenJournalLine,TransactionType::Sale,
              GSTJurisdiction,GSTPerStateCode,"GST Group Code","Posting Date",("Amount (LCY)" + TCSAmount));
            GSTManagement.UpdateRoundingGSTAmount(GenJournalLine,TransactionType::Sale);
          END;
          PostGSTOnAdvPayment(GenJournalLine,CustLedgerEntry."Entry No.");
      END;
    END;

    LOCAL PROCEDURE PostCustomerGSTRefund@1500058(VAR GenJournalLine@1500000 : Record 81);
    VAR
      CustLedgerEntry1@1500002 : Record 21;
      TransactionType@1500001 : 'Purchase,Sale';
    BEGIN
      WITH GenJournalLine DO BEGIN
        CustLedgerEntry1.SETCURRENTKEY("Customer No.","Document Type","Document No.","GST on Advance Payment");
        CustLedgerEntry1.SETRANGE("Customer No.","Account No.");
        CustLedgerEntry1.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgerEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgerEntry1.SETRANGE("GST on Advance Payment",TRUE);
        CustLedgerEntry1.SETRANGE("GST Group Code","GST Group Code");
        CustLedgerEntry1.SETRANGE("HSN/SAC Code","HSN/SAC Code");
        IF CustLedgerEntry1.FINDFIRST THEN BEGIN
          CustLedgerEntry1.CALCFIELDS("Remaining Amt. (LCY)");
          GSTManagement.CheckGSTAccountingPeriod(GenJournalLine."Posting Date");
          GSTApplicationManagement.CheckValidationsRefund(
            TransactionType::Sale,GenJournalLine,CustLedgerEntry1."Transaction No.");
          PostGSTRefund(
            GenJournalLine,CustLedgerEntry1."Transaction No.",
            "Amount (LCY)" / CustLedgerEntry1."Remaining Amt. (LCY)",
            CustLedgerEntry1."Entry No.");
        END;
      END;
    END;

    LOCAL PROCEDURE PostVendorGSTPayment@1500082(VAR GenJournalLine@1500000 : Record 81;VAR VendorLedgerEntry@1500006 : Record 25;VAR Vendor@1500001 : Record 23);
    VAR
      GSTManagement@1500007 : Codeunit 16401;
      TransactionType@1500005 : 'Purchase,Sale';
      GSTPerStateCode@1500004 : Code[10];
      ConfigType@1500003 : 'Vendor,Customer';
      GSTJurisdiction@1500002 : 'Intrastate,Interstate';
    BEGIN
      WITH GenJournalLine DO BEGIN
        GSTManagement.DeleteGSTBufferAdvPayment(GenJournalLine,TransactionType::Purchase);
        IF "GST Vendor Type" IN ["GST Vendor Type"::Import,"GST Vendor Type"::SEZ] THEN
          GSTPerStateCode := GSTManagement.GetGSTConfiguration(ConfigType::Vendor,"Location State Code",'',GSTJurisdiction)
        ELSE
          GSTPerStateCode := GSTManagement.GetGSTConfiguration(ConfigType::Vendor,"Location State Code",
            Vendor."State Code",GSTJurisdiction);
        IF GSTPerStateCode <> '' THEN
          GSTManagement.CalculateGSTAmountsAdvPaymnt(
            GenJournalLine,TransactionType::Purchase,
            GSTJurisdiction,GSTPerStateCode,"GST Group Code","Posting Date","Amount (LCY)");
        PostGSTOnAdvPayment(GenJournalLine,VendorLedgerEntry."Entry No.");
      END;
    END;

    LOCAL PROCEDURE PostVendorGSTRefund@1500083(VAR GenJournalLine@1500000 : Record 81);
    VAR
      VendorLedgerEntry1@1500001 : Record 25;
      GSTManagement@1500007 : Codeunit 16401;
      TransactionType@1500005 : 'Purchase,Sale';
    BEGIN
      WITH GenJournalLine DO BEGIN
        VendorLedgerEntry1.SETCURRENTKEY(
          "Vendor No.","Document Type","Document No.","GST Reverse Charge","GST on Advance Payment");
        VendorLedgerEntry1.SETRANGE("Vendor No.","Account No.");
        VendorLedgerEntry1.SETRANGE("Document Type","Applies-to Doc. Type");
        VendorLedgerEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
        VendorLedgerEntry1.SETRANGE("GST Reverse Charge",TRUE);
        VendorLedgerEntry1.SETRANGE("GST on Advance Payment",TRUE);
        VendorLedgerEntry1.SETRANGE("GST Group Code","GST Group Code");
        VendorLedgerEntry1.SETRANGE("HSN/SAC Code","HSN/SAC Code");
        IF VendorLedgerEntry1.FINDFIRST THEN BEGIN
          VendorLedgerEntry1.CALCFIELDS("Remaining Amt. (LCY)");
          GSTManagement.CheckGSTAccountingPeriod(GenJournalLine."Posting Date");
          GSTApplicationManagement.CheckValidationsRefund(
            TransactionType::Purchase,GenJournalLine,VendorLedgerEntry1."Transaction No.");
          PostGSTRefund(
            GenJournalLine,VendorLedgerEntry1."Transaction No.",
            "Amount (LCY)" / VendorLedgerEntry1."Remaining Amt. (LCY)",
            VendorLedgerEntry1."Entry No.");
        END;
      END;
    END;

    LOCAL PROCEDURE CreateDetailedGSTApplicationEntry@1500043(VAR ApplyDetailedGSTLedgerEntry@1500000 : Record 16419;DetailedGSTLedgerEntry@1500001 : Record 16419;GenJournalLine@1500002 : Record 81;InvoiceNo@1500003 : Code[20];AppliedBase@1500008 : Decimal;AppliedAmount@1500007 : Decimal;PaymentDoc@1500005 : Code[20]);
    BEGIN
      WITH ApplyDetailedGSTLedgerEntry DO BEGIN
        INIT;
        TRANSFERFIELDS(DetailedGSTLedgerEntry);
        "Entry No." := GSTManagement.GetNextGSTDetailEntryNo;
        "Entry Type" := "Entry Type"::Application;
        "Posting Date" := GenJournalLine."Posting Date";
        "Document Type" := "Document Type"::Invoice;
        "Document No." := InvoiceNo;
        "Original Doc. Type" := "Original Doc. Type"::Payment;
        "Original Doc. No." := PaymentDoc;
        "Application Doc. Type" := GenJournalLine."Document Type";
        "Application Doc. No" := GenJournalLine."Document No.";
        "Payment Type" := "Payment Type"::Advance;
        "Transaction No." := GetNextTransactionNo;
        TESTFIELD("Transaction No.");
        "Applied From Entry No." := DetailedGSTLedgerEntry."Entry No.";
        "GST Base Amount" := -AppliedBase;
        "GST Amount" := -AppliedAmount;
        "Remaining Base Amount" := 0;
        "Remaining GST Amount" := 0;
        Positive := "GST Amount" > 0;
        "User ID" := USERID;
        "Amount Loaded on Item" := 0;
        IF DetailedGSTLedgerEntry."GST Amount" <> 0 THEN
          Quantity := ROUND(-DetailedGSTLedgerEntry.Quantity * ABS("GST Amount" / DetailedGSTLedgerEntry."GST Amount"),0.01)
        ELSE
          Quantity := -DetailedGSTLedgerEntry.Quantity;
      END;
    END;

    LOCAL PROCEDURE CreateUnapplicationGSTLedger@1500075(GenJournalLine@1500005 : Record 81;TransactionType@1500004 : 'Purchase,Sale';TransactionNo@1500003 : Integer);
    VAR
      GSTLedgerEntry@1500000 : Record 16418;
      GSTLedgerEntry2@1500001 : Record 16418;
      GSTLedgerEntry3@1500002 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction No.");
        SETRANGE("Transaction No.",TransactionNo);
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Entry Type","Entry Type"::Application);
        SETRANGE(UnApplied,FALSE);
        IF FINDSET THEN
        REPEAT
          GSTLedgerEntry3.INIT;
          GSTLedgerEntry3.TRANSFERFIELDS(GSTLedgerEntry);
          GSTLedgerEntry3."Entry No." := GSTManagement.GetNextGSTLedgerEntryNo;
          GSTLedgerEntry3."Document Type" := GSTLedgerEntry3."Document Type"::Invoice;
            GSTLedgerEntry3."Document No." := "Document No.";
          GSTLedgerEntry3."Transaction No." := GetNextTransactionNo;
          GSTLedgerEntry3."Source Code" := GenJournalLine."Source Code";
            GSTLedgerEntry3."GST Base Amount" := -"GST Base Amount";
            GSTLedgerEntry3."GST Amount" := -"GST Amount";
          GSTLedgerEntry3."User ID" := USERID;
          GSTLedgerEntry3.UnApplied := TRUE;
          GSTLedgerEntry3.INSERT(TRUE);
            GSTLedgerEntry2.GET("Entry No.");
          GSTLedgerEntry2.UnApplied := TRUE;
          GSTLedgerEntry2.MODIFY(TRUE);
            IF GSTLedgerEntry."Transaction Type" = GSTLedgerEntry."Transaction Type"::Sales THEN
              PostSalesApplicationGLEntries(GenJournalLine,"Account No.","Bal. Account No.",TRUE,"GST Amount")
            ELSE
              IF "Payment Type" = "Payment Type"::Normal THEN
                PostNormalPaymentApplicationGLEntries(
                  GenJournalLine,TRUE,"Account No.","Account No. 2","Bal. Account No.","Bal. Account No. 2","GST Amount")
              ELSE
                PostPurchaseApplicationGLEntries(GenJournalLine,TRUE,"Account No.","Bal. Account No.","Bal. Account No. 2","GST Amount");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostGSTWithNormalPaymentOnline@1500053(VAR GenJournalLine@1500003 : Record 81;VAR CVLedgerEntryBuffer@1500002 : Record 382;VAR OldCVLedgerEntryBuffer@1500001 : Record 382;AmountToApply@1500000 : Decimal);
    VAR
      ApplyingVendorLedgerEntry@1500004 : Record 25;
    BEGIN
      WITH ApplyingVendorLedgerEntry DO BEGIN
        GET(OldCVLedgerEntryBuffer."Entry No.");
        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN
              IF OnlineVendorLedgerEntry."GST on Advance Payment" THEN
                EXIT;
              IF NOT "GST Reverse Charge" THEN
                EXIT;
              IF NOT IsGSTExist("Vendor No.","Document No.") THEN
                EXIT;
              OnlineVendorLedgerEntry.TESTFIELD("Document Type",OnlineVendorLedgerEntry."Document Type"::Payment);
              TESTFIELD("Currency Code",OnlineVendorLedgerEntry."Currency Code");
              TESTFIELD("TDS Nature of Deduction",OnlineVendorLedgerEntry."TDS Nature of Deduction");
              GenJournalLine.TESTFIELD("Work Tax Nature Of Deduction",'');
              GSTApplicationManagement.FillAppBufferInvoice(
                TransactionType2::Purchase,"Document No.","Vendor No.",OnlineVendorLedgerEntry."Document No.",
                "Total TDS Including SHE CESS");
              GSTApplicationManagement.AllocateGSTWithNormalPayment(
                "Vendor No.","Document No.",AmountToApply);
              PostPurchGSTApplicationNormalPaymentGL(
                GenJournalLine,OnlineVendorLedgerEntry."Document No.","Document No.",
                "Transaction No.");
            END;
          "Document Type"::Payment,"Document Type"::" ":
            BEGIN
              IF "GST on Advance Payment" THEN
                EXIT;
              IF NOT OnlineVendorLedgerEntry."GST Reverse Charge" THEN
                EXIT;
              IF NOT IsGSTExist(OnlineVendorLedgerEntry."Vendor No.",OnlineVendorLedgerEntry."Document No.") THEN
                EXIT;
              TESTFIELD("Document Type","Document Type"::Payment);
              GSTApplicationManagement.FillAppBufferInvoice(
                TransactionType2::Purchase,OnlineVendorLedgerEntry."Document No.",
                OnlineVendorLedgerEntry."Vendor No.","Document No.",
                OnlineVendorLedgerEntry."Total TDS Including SHE CESS");
              TESTFIELD("Currency Code",OnlineVendorLedgerEntry."Currency Code");
              TESTFIELD("TDS Nature of Deduction",OnlineVendorLedgerEntry."TDS Nature of Deduction");
              GenJournalLine.TESTFIELD("Work Tax Nature Of Deduction",'');
              GSTApplicationManagement.AllocateGSTWithNormalPayment(
                OnlineVendorLedgerEntry."Vendor No.",OnlineVendorLedgerEntry."Document No.",
                AmountToApply);
              PostPurchGSTApplicationNormalPaymentGL(
                GenJournalLine,"Document No.",OnlineVendorLedgerEntry."Document No.",
                OnlineVendorLedgerEntry."Transaction No.");
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE IsGSTExist@1500064(AccountNo@1500000 : Code[20];DocumentNo@1500001 : Code[20]) : Boolean;
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Source Type","Source No.","Document Type","Document No.","GST Group Type");
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Source Type","Source Type"::Vendor);
        SETRANGE("Source No.",AccountNo);
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("GST Group Type","GST Group Type"::Service);
        SETRANGE("Associated Enterprises",FALSE);
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE PostPurchGSTApplicationNormalPaymentGL@1500063(VAR GenJournalLine@1500021 : Record 81;PaymentDocNo@1500002 : Code[20];InvoiceNo@1500019 : Code[20];TransactionNo@1500020 : Integer);
    VAR
      ApplyDetailedGSTLedgerEntry@1500000 : Record 16419;
      GSTApplicationBuffer@1500005 : Record 16423;
      GSTLedgerEntry@1500015 : Record 16418;
      DetailedGSTLedgerEntry@1500006 : Record 16419;
      ApplyGSTLedgerEntry@1500016 : Record 16418;
      SourceCodeSetup@1500018 : Record 242;
      PurchInvHeader@1500026 : Record 122;
      GSTManagement@1500007 : Codeunit 16401;
      GSTApplicationManagement@1500014 : Codeunit 16403;
      AppliedBase@1500008 : Decimal;
      AppliedAmount@1500004 : Decimal;
      RemainingBase@1500003 : Decimal;
      RemainingAmount@1500001 : Decimal;
      AccountNo@1500012 : Code[20];
      AccountNo2@1500011 : Code[20];
      BalanceAccountNo@1500010 : Code[20];
      BalanceAccountNo2@1500009 : Code[20];
    BEGIN
      SourceCodeSetup.GET;
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Account No.",GenJournalLine."Account No.");
        SETRANGE("Original Document Type","Original Document Type"::Invoice);
        SETRANGE("Original Document No.",InvoiceNo);
        SETRANGE("Applied Doc. Type","Applied Doc. Type"::Payment);
        SETRANGE("Applied Doc. No.",PaymentDocNo);
        SETRANGE("GST Group Code",'');
        IF FINDSET THEN
          REPEAT
            DetailedGSTLedgerEntry.SETCURRENTKEY(
              "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
            DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Purchase);
            DetailedGSTLedgerEntry.SETRANGE("Source No.",GenJournalLine."Account No.");
            DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
            DetailedGSTLedgerEntry.SETRANGE("Document No." ,InvoiceNo);
            DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
            DetailedGSTLedgerEntry.SETRANGE("Transaction No.",TransactionNo);
            DetailedGSTLedgerEntry.SETRANGE("GST Component Code","GST Component Code");
            DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
            DetailedGSTLedgerEntry.SETRANGE("Remaining Amount Closed",FALSE);
            IF DetailedGSTLedgerEntry.FINDSET THEN BEGIN
              RemainingBase := "Applied Base Amount";
              RemainingAmount := "Applied Amount";
              GSTPostingBuffer[1].DELETEALL;
              GSTManagement.CheckGSTAccountingPeriod(GenJournalLine."Posting Date");
              REPEAT
                IF (RemainingBase <> 0) AND (DetailedGSTLedgerEntry."Remaining Base Amount" > 0) THEN BEGIN
                  GetAppliedAmount(
                    ABS(RemainingBase),ABS(RemainingAmount),ABS(DetailedGSTLedgerEntry."Remaining Base Amount"),
                    ABS(DetailedGSTLedgerEntry."Remaining GST Amount"),AppliedBase,AppliedAmount);
              CreateDetailedGSTApplicationEntry(
                ApplyDetailedGSTLedgerEntry,DetailedGSTLedgerEntry,GenJournalLine,
                      InvoiceNo,AppliedBase,AppliedAmount,"Original Document No.");
                  ApplyDetailedGSTLedgerEntry.Paid := FALSE;
              ApplyDetailedGSTLedgerEntry."Payment Type" := ApplyDetailedGSTLedgerEntry."Payment Type"::Normal;
              ApplyDetailedGSTLedgerEntry."Original Doc. No." := PaymentDocNo;
                  ApplyDetailedGSTLedgerEntry."Credit Availed" :=
                    ApplyDetailedGSTLedgerEntry."GST Credit" = ApplyDetailedGSTLedgerEntry."GST Credit"::Availment;
                  ApplyDetailedGSTLedgerEntry."Liable to Pay" := TRUE;
              ApplyDetailedGSTLedgerEntry.INSERT(TRUE);
                  DetailedGSTLedgerEntry."Application Doc. Type" := ApplyDetailedGSTLedgerEntry."Document Type";
                  DetailedGSTLedgerEntry."Application Doc. No" := ApplyDetailedGSTLedgerEntry."Document No.";
                  DetailedGSTLedgerEntry."Remaining Base Amount" -= AppliedBase;
                  DetailedGSTLedgerEntry."Remaining GST Amount" -= AppliedAmount;
                  DetailedGSTLedgerEntry."Remaining Amount Closed" := DetailedGSTLedgerEntry."Remaining Base Amount" = 0;
                  DetailedGSTLedgerEntry.MODIFY;
                  RemainingBase := ABS(RemainingBase) - ABS(AppliedBase);
                  RemainingAmount := ABS(RemainingAmount) - ABS(AppliedAmount);
                  FillGSTPostingBufferWithApplication(ApplyDetailedGSTLedgerEntry);
                END;
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
              IF GSTPostingBuffer[1].FINDLAST THEN
                REPEAT
                GetCreditAccountNormalPayment(
                  DetailedGSTLedgerEntry,GSTPostingBuffer[1],AccountNo,AccountNo2,BalanceAccountNo,BalanceAccountNo2);
                  InsertApplicationGSTLedger(
                  GSTPostingBuffer[1],ApplyDetailedGSTLedgerEntry,GenJournalLine."Posting Date",
                  SourceCodeSetup."Purchase Entry Application",ApplyDetailedGSTLedgerEntry."Payment Type",
                  AccountNo,BalanceAccountNo,BalanceAccountNo2,AccountNo2);
                PostNormalPaymentApplicationGLEntries(
                  GenJournalLine,FALSE,AccountNo,AccountNo2,BalanceAccountNo,BalanceAccountNo2,GSTPostingBuffer[1]."GST Amount");
                UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
            END;
          UNTIL NEXT = 0;
          GSTApplicationManagement.DeleteInvoiceApplicationBufferOffline(
            TransactionType2::Purchase,GenJournalLine."Account No.","Original Document Type"::Invoice,InvoiceNo);
      END;
    END;

    LOCAL PROCEDURE PostGSTWithNormalPaymentOffline@1500080(VAR GenJournalLine@1500003 : Record 81;VAR CVLedgerEntryBuffer@1500002 : Record 382;VAR OldCVLedgerEntryBuffer@1500001 : Record 382;AmountToApply@1500000 : Decimal);
    VAR
      VendorLedgerEntry@1500005 : Record 25;
      ApplyingVendorLedgerEntry@1500004 : Record 25;
    BEGIN
      WITH ApplyingVendorLedgerEntry DO BEGIN
      GET(OldCVLedgerEntryBuffer."Entry No.");
      VendorLedgerEntry.GET(CVLedgerEntryBuffer."Entry No.");
        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN
              IF VendorLedgerEntry."GST on Advance Payment" THEN
                EXIT;
              IF NOT "GST Reverse Charge" THEN
                EXIT;
              IF NOT IsGSTExist("Vendor No.","Document No.") THEN
                EXIT;
              VendorLedgerEntry.TESTFIELD("Document Type",VendorLedgerEntry."Document Type"::Payment);
              TESTFIELD("Currency Code",VendorLedgerEntry."Currency Code");
              IF VendorLedgerEntry."GST Group Code" <> '' THEN
              TESTFIELD("TDS Nature of Deduction",VendorLedgerEntry."TDS Nature of Deduction");
              GSTApplicationManagement.FillAppBufferInvoice(
                TransactionType2::Purchase,"Document No.","Vendor No.",VendorLedgerEntry."Document No.",
                "Total TDS Including SHE CESS");
              GSTApplicationManagement.AllocateGSTWithNormalPayment(
                "Vendor No.","Document No.",AmountToApply);
              PostPurchGSTApplicationNormalPaymentGL(
                GenJournalLine,VendorLedgerEntry."Document No.","Document No.",
                "Transaction No.");
            END;
          "Document Type"::Payment,"Document Type"::" ":
            BEGIN
              IF "GST on Advance Payment" THEN
                EXIT;
              IF NOT VendorLedgerEntry."GST Reverse Charge" THEN
                EXIT;
              IF NOT IsGSTExist(VendorLedgerEntry."Vendor No.",VendorLedgerEntry."Document No.") THEN
                EXIT;
              TESTFIELD("Document Type","Document Type"::Payment);
              TESTFIELD("Currency Code",VendorLedgerEntry."Currency Code");
              IF VendorLedgerEntry."GST Group Code" <> '' THEN
              TESTFIELD("TDS Nature of Deduction",VendorLedgerEntry."TDS Nature of Deduction");
              GSTApplicationManagement.FillAppBufferInvoice(
                TransactionType2::Purchase,VendorLedgerEntry."Document No.",
                VendorLedgerEntry."Vendor No.","Document No.",
                VendorLedgerEntry."Total TDS Including SHE CESS");
              GSTApplicationManagement.AllocateGSTWithNormalPayment(
                VendorLedgerEntry."Vendor No.",VendorLedgerEntry."Document No.",
                AmountToApply);
              PostPurchGSTApplicationNormalPaymentGL(
                GenJournalLine,"Document No.",VendorLedgerEntry."Document No.",
                VendorLedgerEntry."Transaction No.");
            END;
        END;
      END;
    END;

    PROCEDURE CheckSimilarGSTGroupType@1500062(GenJournalLine@1500000 : Record 81);
    VAR
      GenJournalLine2@1500004 : Record 81;
      TotalGoodsTypelines@1500005 : Integer;
    BEGIN
      WITH GenJournalLine2 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
        SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        SETRANGE("Document No.",GenJournalLine."Document No.");
        SETRANGE("Account No.",GenJournalLine."Account No.");
        SETRANGE("GST on Advance Payment",TRUE);
        SETRANGE("GST Group Type","GST Group Type"::Goods);
        TotalGoodsTypelines := COUNT;
        SETRANGE("GST Group Type");
        SETRANGE("GST Group Type","GST Group Type"::Service);
        IF (TotalGoodsTypelines > 0) AND (COUNT > 0) THEN
          ERROR(
            STRSUBSTNO(
              SimilarGSTGroupTypeErr,FIELDCAPTION("GST Group Type"),
              FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
              FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
              FIELDCAPTION("Document No."),GenJournalLine."Document No."));
      END;
    END;

    LOCAL PROCEDURE GetAppliedAmount@1500084(RemainingBase@1500000 : Decimal;RemainingAmount@1500005 : Decimal;DGSTBase@1500001 : Decimal;DGSTAmount@1500002 : Decimal;VAR AppliedBase@1500003 : Decimal;VAR AppliedAmount@1500004 : Decimal);
    BEGIN
      IF RemainingBase >= DGSTBase THEN BEGIN
        AppliedBase := DGSTBase;
        AppliedAmount := DGSTAmount;
      END
      ELSE BEGIN
        AppliedBase := RemainingBase;
        AppliedAmount := RemainingAmount;
      END ;
    END;

    LOCAL PROCEDURE FillGSTPostingBufferWithApplication@1500077(DetailedGSTLedgerEntry@1500005 : Record 16419);
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
          CLEAR(GSTPostingBuffer[1]);
          IF "Transaction Type" =  "Transaction Type"::Purchase THEN
            GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Purchase
          ELSE
            GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Sales;

          GSTPostingBuffer[1].Type := Type;
          GSTPostingBuffer[1]."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
          GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        IF "Transaction Type" = "Transaction Type"::Purchase THEN
          IF "GST Group Type" = "GST Group Type"::Service THEN
            GSTPostingBuffer[1]."GST Group Type" := GSTPostingBuffer[1]."GST Group Type"::Service
          ELSE
            GSTPostingBuffer[1]."GST Group Type" := GSTPostingBuffer[1]."GST Group Type"::Goods;
          GSTPostingBuffer[1]."GST Base Amount" := "GST Base Amount";
          GSTPostingBuffer[1]."GST Amount" := "GST Amount";
          GSTPostingBuffer[1]."Account No." := "G/L Account No.";
          GSTPostingBuffer[1]."GST %" := "GST %" ;
          GSTPostingBuffer[1]."GST Component Code" := "GST Component Code";
          GSTPostingBuffer[1]."GST Reverse Charge" := "Reverse Charge";
        GSTPostingBuffer[1].Availment := "GST Credit" = "GST Credit"::Availment;
        GSTPostingBuffer[1]."Normal Payment" := "Payment Type" = "Payment Type"::Normal;
          UpdateGSTPostingBufferWithApplication;
      END;
    END;

    LOCAL PROCEDURE UpdateGSTPostingBufferWithApplication@1500085();
    VAR
      DimensionManagement@1500000 : Codeunit 408;
    BEGIN
      GSTPostingBuffer[2] := GSTPostingBuffer[1];
      IF GSTPostingBuffer[2].FIND THEN BEGIN
        GSTPostingBuffer[2]."GST Base Amount" += GSTPostingBuffer[1]."GST Base Amount";
        GSTPostingBuffer[2]."GST Amount" += GSTPostingBuffer[1]."GST Amount";
        GSTPostingBuffer[2].MODIFY;
      END ELSE
        GSTPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE InsertApplicationGSTLedger@1500087(GSTPostingBuffer@1500001 : Record 16420;DetailedGSTLedgerEntry@1500007 : Record 16419;PostingDate@1500002 : Date;SourceCode@1500003 : Code[10];PaymentType@1500004 : Option;AccountNo@1500008 : Code[20];BalanceAccountNo@1500006 : Code[20];BalanceAccountNo2@1500005 : Code[20];AccountNo2@1500009 : Code[20]);
    VAR
      GSTLedgerEntry@1500000 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GSTManagement.GetNextGSTLedgerEntryNo;
        "Entry Type" := "Entry Type"::Application;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := PostingDate;
        "Document No." := DetailedGSTLedgerEntry."Document No.";
        "Document Type" := DetailedGSTLedgerEntry."Document Type";
        "Currency Code" := DetailedGSTLedgerEntry."Currency Code";
        "Currency Factor" := DetailedGSTLedgerEntry."Currency Factor";
        "Transaction Type" := DetailedGSTLedgerEntry."Transaction Type";
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "GST Amount" := GSTPostingBuffer."GST Amount";
        CASE DetailedGSTLedgerEntry."Source Type" OF
          DetailedGSTLedgerEntry."Source Type"::Vendor: "Source Type" := "Source Type"::Vendor;
          DetailedGSTLedgerEntry."Source Type"::Customer: "Source Type" := "Source Type"::Customer;
        END;
        "Source No." := DetailedGSTLedgerEntry."Source No.";
        "Source Code" := SourceCode;
        "Payment Type" := PaymentType;
        "Reason Code" := DetailedGSTLedgerEntry."Reason Code";
        "Transaction No." := DetailedGSTLedgerEntry."Transaction No.";
        "Input Service Distribution" := DetailedGSTLedgerEntry."Input Service Distribution";
        "External Document No." := DetailedGSTLedgerEntry."External Document No.";
        "Purchase Group Type" := GSTPostingBuffer."GST Group Type";
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        "Reverse Charge" := GSTPostingBuffer."GST Reverse Charge";
        Availment := GSTPostingBuffer.Availment;
        "User ID" := USERID;
        "Account No." := AccountNo;
        "Bal. Account No." := BalanceAccountNo;
        "Bal. Account No. 2" := BalanceAccountNo2;
        "Account No. 2" := AccountNo2;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostSalesApplicationGLEntries@1500095(VAR GenJournalLine@1500003 : Record 81;AccountNo@1500001 : Code[20];BalAccountNo@1500002 : Code[20];UnApplication@1500004 : Boolean;GSTAmount@1500000 : Decimal);
    BEGIN
      IF GSTAmount <> 0 THEN
        IF UnApplication THEN BEGIN
          PostToGLEntry(
            GenJournalLine,AccountNo,-ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          PostToGLEntry(
            GenJournalLine,BalAccountNo,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
        END ELSE BEGIN
          PostToGLEntry(
            GenJournalLine,AccountNo,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          PostToGLEntry(
            GenJournalLine,BalAccountNo,-ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
        END;
    END;

    LOCAL PROCEDURE PostPurchaseApplicationGLEntries@1500070(VAR GenJournalLine@1500003 : Record 81;UnApplication@1500005 : Boolean;AccountNo@1500004 : Code[20];BalanceAccountNo@1500002 : Code[20];BalanceAccountNo2@1500001 : Code[20];GSTAmount@1500000 : Decimal);
    BEGIN
      IF GSTAmount <> 0 THEN
        IF UnApplication THEN BEGIN
          IF BalanceAccountNo2 <> '' THEN
          PostToGLEntry(
              GenJournalLine,AccountNo,ABS(GSTAmount) + ABS(GSTAmount),
              GenJournalLine."System-Created Entry")
          ELSE
            PostToGLEntry(
              GenJournalLine,AccountNo,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          PostToGLEntry(
            GenJournalLine,BalanceAccountNo,-ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          IF BalanceAccountNo2 <> '' THEN
            PostToGLEntry(
              GenJournalLine,BalanceAccountNo2,-ABS(GSTAmount),
              GenJournalLine."System-Created Entry");
        END ELSE BEGIN
          IF BalanceAccountNo2 <> '' THEN
            PostToGLEntry(
              GenJournalLine,AccountNo,-(ABS(GSTAmount) + ABS(GSTAmount)),
              GenJournalLine."System-Created Entry")
          ELSE
            PostToGLEntry(
              GenJournalLine,AccountNo,-ABS(GSTAmount),
              GenJournalLine."System-Created Entry");
            PostToGLEntry(
            GenJournalLine,BalanceAccountNo,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          IF BalanceAccountNo2 <> '' THEN
            PostToGLEntry(
              GenJournalLine,BalanceAccountNo2,ABS(GSTAmount),
              GenJournalLine."System-Created Entry");
          END;
    END;

    LOCAL PROCEDURE PostNormalPaymentApplicationGLEntries@1500086(VAR GenJournalLine@1500003 : Record 81;UnApplication@1500007 : Boolean;AccountNo@1500006 : Code[20];AccountNo2@1500005 : Code[20];BalanceAccountNo@1500004 : Code[20];BalanceAccountNo2@1500001 : Code[20];GSTAmount@1500000 : Decimal);
    BEGIN
      IF GSTAmount <> 0 THEN
        IF UnApplication THEN BEGIN
          PostToGLEntry(
            GenJournalLine,AccountNo,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          PostToGLEntry(
            GenJournalLine,BalanceAccountNo,-ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          IF AccountNo2 <> '' THEN BEGIN
            PostToGLEntry(
              GenJournalLine,AccountNo2,ABS(GSTAmount),
              GenJournalLine."System-Created Entry");
            PostToGLEntry(
              GenJournalLine,BalanceAccountNo2,-ABS(GSTAmount),
              GenJournalLine."System-Created Entry");
          END;
        END ELSE BEGIN
          PostToGLEntry(
            GenJournalLine,AccountNo,-ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          PostToGLEntry(
            GenJournalLine,BalanceAccountNo,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          IF AccountNo2 <> '' THEN BEGIN
          PostToGLEntry(
              GenJournalLine,AccountNo2,-ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
          PostToGLEntry(
              GenJournalLine,BalanceAccountNo2,ABS(GSTAmount),
            GenJournalLine."System-Created Entry");
        END;
      END;
    END;

    LOCAL PROCEDURE UnApplyGSTApplicationCreditMemo@1500089(TransactionType@1500005 : 'Purchase,Sale';DocumentNo@1500001 : Code[20]);
    VAR
      DetailedGSTLedgerEntry@1500016 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Document Type","Document Type"::"Credit Memo");
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE(UnApplied,FALSE);
        MODIFYALL("Original Invoice No.",'');
        MODIFYALL("Original Invoice Date",0D);
      END;
    END;

    LOCAL PROCEDURE ApplyGSTApplicationCreditMemo@1500097(CVLedgerEntryBuffer@1500006 : Record 382;OldCVLedgerEntryBuffer@1500000 : Record 382;TransactionType@1500005 : 'Purchase,Sale';Offline@1500009 : Boolean);
    VAR
      DetailedGSTLedgerEntry@1500016 : Record 16419;
      CreditMemoNo@1500001 : Code[20];
      InvoiceNo@1500003 : Code[20];
      InvoiceDate@1500002 : Date;
      DocType@1500011 : 'Sale,Service,Purchase';
    BEGIN
      IF (CVLedgerEntryBuffer."Document Type" <> CVLedgerEntryBuffer."Document Type"::"Credit Memo") AND
        (OldCVLedgerEntryBuffer."Document Type" <> OldCVLedgerEntryBuffer."Document Type"::"Credit Memo") THEN
        EXIT;
      IF (CVLedgerEntryBuffer."Document Type" <> CVLedgerEntryBuffer."Document Type"::Invoice) AND
        (OldCVLedgerEntryBuffer."Document Type" <> OldCVLedgerEntryBuffer."Document Type"::Invoice) THEN
        EXIT;

      IF (CVLedgerEntryBuffer."Document Type" = CVLedgerEntryBuffer."Document Type"::"Credit Memo") THEN BEGIN
        CreditMemoNo := CVLedgerEntryBuffer."Document No.";
        InvoiceNo := OldCVLedgerEntryBuffer."Document No.";
        InvoiceDate := OldCVLedgerEntryBuffer."Document Date";
      END ELSE BEGIN
        CreditMemoNo := OldCVLedgerEntryBuffer."Document No.";
        InvoiceNo := CVLedgerEntryBuffer."Document No.";
        InvoiceDate := CVLedgerEntryBuffer."Document Date";
      END;
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Document Type","Document Type"::"Credit Memo");
        SETRANGE("Document No.",CreditMemoNo);
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE(UnApplied,FALSE);
        MODIFYALL("Original Invoice No.",InvoiceNo);
        MODIFYALL("Original Invoice Date",InvoiceDate);
      END;
    END;

    LOCAL PROCEDURE CheckBaseAmount@1500109(InvDocNo@1500001 : Code[20];InvDocumentType@1500007 : Option;CrMemoDocNo@1500000 : Code[20];CrMemoDocumentType@1500008 : Option;TransactionType@1500003 : 'Purchase,Sale');
    VAR
      DocType@1500002 : 'Sale,Service,Purchase';
      InvBaseAmount@1500004 : Decimal;
      CrMemoBaseAmount@1500005 : Decimal;
      DocumentType@1500006 : Option;
    BEGIN
      IF TransactionType = TransactionType::Purchase THEN
        BEGIN
          InvBaseAmount := GSTApplicationManagement.GetBaseAmount(DocType::Purchase,InvDocumentType,InvDocNo,FALSE);
          CrMemoBaseAmount := GSTApplicationManagement.GetBaseAmount(DocType::Purchase,CrMemoDocumentType,CrMemoDocNo,FALSE);
        END ELSE BEGIN
          InvBaseAmount := GSTApplicationManagement.GetBaseAmount(DocType::Sale,InvDocumentType,InvDocNo,FALSE);
          CrMemoBaseAmount := GSTApplicationManagement.GetBaseAmount(DocType::Sale,CrMemoDocumentType,CrMemoDocNo,FALSE);
        END;
      IF ABS(InvBaseAmount) < ABS(CrMemoBaseAmount) THEN
        ERROR(BaseAmountErr,CrMemoDocNo,ABS(CrMemoBaseAmount),InvDocNo,ABS(InvBaseAmount));
    END;

    LOCAL PROCEDURE GetCreditAccountAdvancePayment@1500110(DetailedGSTLedgerEntry@1500000 : Record 16419;GSTPostingBuffer@1500003 : Record 16420;VAR AccountNo@1500001 : Code[20];VAR BalanceAccountNo@1500002 : Code[20];VAR BalanceAccountNo2@1500004 : Code[20]);
    BEGIN
      CLEAR(AccountNo);
      CLEAR(BalanceAccountNo);
      CLEAR(BalanceAccountNo2);
      WITH DetailedGSTLedgerEntry DO BEGIN
        IF GSTPostingBuffer."GST Group Type" = GSTPostingBuffer."GST Group Type"::Goods THEN
          IF "GST Vendor Type" =  "GST Vendor Type"::Unregistered THEN BEGIN
            AccountNo :=
              GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
            BalanceAccountNo :=
              GSTManagement.GetGSTPayableAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          END;
        IF GSTPostingBuffer."GST Group Type" = GSTPostingBuffer."GST Group Type"::Service THEN
          IF "Associated Enterprises" THEN BEGIN
            AccountNo :=
              GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
            BalanceAccountNo :=
              GSTManagement.GetGSTPayableAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          END ELSE
            IF GSTPostingBuffer.Availment THEN BEGIN
              AccountNo :=
                GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
              BalanceAccountNo :=
                GSTManagement.GetGSTPayableInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
              BalanceAccountNo2 :=
                GSTManagement.GetGSTReceivableAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
              IF "Input Service Distribution" THEN BEGIN
                AccountNo :=
                  GSTManagement.GetGSTRcvblInterimDistAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
                BalanceAccountNo2 :=
                  GSTManagement.GetGSTReceivableDistAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
              END;
            END ELSE BEGIN
              AccountNo := GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
              BalanceAccountNo :=
                GSTManagement.GetGSTPayableInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
            END;
      END;
    END;

    LOCAL PROCEDURE GetCreditAccountNormalPayment@1500114(DetailedGSTLedgerEntry@1500005 : Record 16419;GSTPostingBuffer@1500000 : Record 16420;VAR AccountNo@1500001 : Code[20];VAR AccountNo2@1500003 : Code[20];VAR BalanceAccountNo@1500002 : Code[20];VAR BalanceAccountNo2@1500004 : Code[20]);
    BEGIN
      CLEAR(AccountNo);
      CLEAR(AccountNo2);
      CLEAR(BalanceAccountNo);
      CLEAR(BalanceAccountNo2);
      WITH DetailedGSTLedgerEntry DO BEGIN
        IF GSTPostingBuffer.Availment THEN BEGIN
          AccountNo := GSTManagement.GetGSTPayableAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          AccountNo2 := GSTManagement.GetGSTRcvblInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          BalanceAccountNo := GSTManagement.GetGSTPayableInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          BalanceAccountNo2 := GSTManagement.GetGSTReceivableAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          IF "Input Service Distribution" THEN BEGIN
            AccountNo2 := GSTManagement.GetGSTRcvblInterimDistAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
            BalanceAccountNo2 :=
              GSTManagement.GetGSTReceivableDistAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          END;
        END ELSE BEGIN
          AccountNo := GSTManagement.GetGSTPayableAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
          BalanceAccountNo := GSTManagement.GetGSTPayableInterimAccountNo("Location State Code",GSTPostingBuffer."GST Component Code");
        END;
      END;
    END;

    LOCAL PROCEDURE FillTotalGSTRefundAmount@1500076(GenJournalLine@1500001 : Record 81;EntryNo@1500003 : Integer) : Boolean;
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      ISDApplicable@1500002 : Boolean;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        FilterGSTRefundEntries(DetailedGSTLedgerEntry,GenJournalLine,EntryNo);
        IF FINDSET THEN BEGIN
          GSTApplicationManagement.DeleteRefundAppBuffer(
            "Transaction Type","Source No.","Original Doc. No.","Document No.","HSN/SAC Code",'',"GST Group Code");
          ISDApplicable := "Input Service Distribution";
          REPEAT
            GSTApplicationManagement.FillGSTAppBufferHSNComponentRefund(DetailedGSTLedgerEntry,GenJournalLine."Document No.");
          UNTIL NEXT = 0;
        END;
      END;
      EXIT(ISDApplicable);
    END;

    LOCAL PROCEDURE FilterGSTRefundEntries@1500115(VAR DetailedGSTLedgerEntry@1500000 : Record 16419;GenJournalLine@1500001 : Record 81;EntryNo@1500002 : Integer);
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
        CASE GenJournalLine."Account Type" OF
          GenJournalLine."Account Type"::Vendor:  SETRANGE("Transaction Type","Transaction Type"::Purchase);
          GenJournalLine."Account Type"::Customer:  SETRANGE("Transaction Type","Transaction Type"::Sales);
          ELSE
            ERROR(GSTRefundErr);
        END;
        SETRANGE("Source No.",GenJournalLine."Account No.");
        SETRANGE("Original Doc. Type","Original Doc. Type"::Payment);
        SETRANGE("Original Doc. No.",GenJournalLine."Applies-to Doc. No.");
        SETRANGE("GST Group Code",GenJournalLine."GST Group Code");
        SETRANGE("CLE/VLE Entry No.",EntryNo);
        SETRANGE("Payment Type","Payment Type"::Advance)
      END;
    END;

    BEGIN
    END.
  }
}

