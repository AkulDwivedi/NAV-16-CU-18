OBJECT Codeunit 13704 Indian Sales Tax Calculate
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TaxAreaLine@1280001 : Record 319;
      TaxArea@1280002 : Record 318;
      TaxDetail@1280003 : Record 322;
      TMPTaxDetail@1280006 : TEMPORARY Record 322;
      LastCalculationOrder@1280008 : Integer;
      RemainingTaxDetails@1280009 : Integer;
      TotalTaxAmountRounding@1280015 : Decimal;
      TotalForAllocation@1280016 : Decimal;
      Initialised@1280017 : Boolean;
      FirstLine@1280018 : Boolean;
      TaxOnTaxCalculated@1280019 : Boolean;
      CalculationOrderViolation@1280020 : Boolean;
      Text001@1280022 : TextConst 'ENU=%1 in %2 %3 must be filled in with unique values when %4 is %5.;ENN=%1 in %2 %3 must be filled in with unique values when %4 is %5.';
      Text002@1280023 : TextConst 'ENU="The sales tax amount for the %1 %2 ";ENN="The sales tax amount for the %1 %2 "';
      Text003@1280024 : TextConst 'ENU=and the %3 %4 is incorrect.\;ENN=and the %3 %4 is incorrect.\';
      Text004@1280025 : TextConst 'ENU="Activate the %5 in the %6 window ";ENN="Activate the %5 in the %6 window "';
      Text005@1280026 : TextConst 'ENU=or manually recalculate the sales tax.;ENN=or manually recalculate the sales tax.';
      Text006@1280027 : TextConst 'ENU=Lines is not initialized;ENN=Lines is not initialized';
      TaxJurisdiction@1280029 : Record 320;
      TotalTaxAmount@1280021 : Decimal;
      GLSetup@1500002 : Record 98;
      PurchHeader@1500001 : Record 38;
      SalesHeader@1500004 : Record 36;
      ServHeader@1500005 : Record 5900;
      GLSetupRead@1500000 : Boolean;
      ForeignCurrency@1500003 : Boolean;
      Text16502@1500006 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2.;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2.';

    PROCEDURE CalculateTax@1280022(TaxAreaCode@1280030 : Code[20];TaxGroupCode@1280031 : Code[10];TaxLiable@1280032 : Boolean;Date@1280033 : Date;Amount@1280034 : Decimal;Quantity@1280035 : Decimal;ExchangeRate@1280036 : Decimal;"Form Code"@1280002 : Code[10];VAR TaxPercent@1500001 : Decimal) Taxamount@1000 : Decimal;
    BEGIN
      EXIT(CalculateTaxDetail(TaxAreaCode,'',TaxGroupCode,TaxLiable,Date,Amount,Quantity,"Form Code",TaxPercent));
    END;

    PROCEDURE CalculateTaxDetail@1500030(TaxAreaCode@1280030 : Code[20];TaxJurisdictionCode@1500002 : Code[10];TaxGroupCode@1280031 : Code[10];TaxLiable@1280032 : Boolean;Date@1280033 : Date;Amount@1280034 : Decimal;Quantity@1280035 : Decimal;"Form Code"@1280002 : Code[10];VAR TaxPercent@1500001 : Decimal) Taxamount@1000 : Decimal;
    VAR
      TaxBuffer@1500000 : TEMPORARY Record 13766;
      TaxBaseAmount@1280039 : Decimal;
    BEGIN
      TotalTaxAmount := 0;
      Taxamount := 0;
      TaxBaseAmount := 0;
      TaxPercent := 0;
      IF NOT TaxLiable OR (TaxAreaCode = '') OR
         ((Amount = 0) AND (Quantity = 0))
      THEN
        EXIT;
      TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
      TaxAreaLine.SETRANGE("Tax Area",TaxAreaCode);
      IF TaxJurisdictionCode <> '' THEN
        TaxAreaLine.SETRANGE("Tax Jurisdiction Code",TaxJurisdictionCode);
      IF TaxAreaLine.FIND('-') THEN BEGIN
        LastCalculationOrder := TaxAreaLine."Calculation Order" - 1;
        TaxOnTaxCalculated := FALSE;
        CalculationOrderViolation := FALSE;
        REPEAT
          TaxBaseAmount := 0;
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
          IF TaxAreaLine."Calculation Order" <= LastCalculationOrder THEN
            CalculationOrderViolation := TRUE
          ELSE
            LastCalculationOrder := TaxAreaLine."Calculation Order";
          TaxDetail.RESET;
          TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
          TaxDetail.SETFILTER("Tax Group Code",'%1',TaxGroupCode);
          IF NOT TaxJurisdiction."Forms Not Applicable" THEN
            TaxDetail.SETRANGE("Form Code","Form Code")
          ELSE
            TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
          IF Date = 0D THEN
            TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
          ELSE
            TaxDetail.SETFILTER("Effective Date",'<=%1',Date);
          IF TaxDetail.FINDLAST THEN BEGIN
            IF TaxAreaLine.Formula <> '' THEN
              TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
            IF TaxAreaLine."Include Tax Base" THEN
              TaxBaseAmount := TaxBaseAmount + Amount;
            IF TaxAreaLine."Formula Incl. VPT" <> '' THEN
              TaxBaseAmount := TaxBaseAmount +
                EvaluateExpressionVatPurchTax(TRUE,TaxAreaLine."Formula Incl. VPT",TaxBuffer,TaxAreaLine);

            Taxamount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;
            TaxPercent += 100 * ABS(Taxamount / Amount);

            TaxBuffer.LOCKTABLE;
            TaxBuffer.INIT;
            TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
            TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
            TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
            TaxBuffer.Amount := Taxamount;
            IF NOT TaxBuffer.INSERT THEN
              TaxBuffer.MODIFY;
            TotalTaxAmount += ROUND(Taxamount);
          END;
          Taxamount := TotalTaxAmount;
        UNTIL TaxAreaLine.NEXT(1) = 0;
        IF TaxOnTaxCalculated AND CalculationOrderViolation THEN
          ERROR(
            Text001,
            TaxAreaLine.FIELDNAME("Calculation Order"),TaxArea.TABLENAME,TaxAreaLine."Tax Area",
            TaxDetail.FIELDNAME("Calculate Tax on Tax"),CalculationOrderViolation);
      END;
    END;

    PROCEDURE InitSalesTaxLines@1280024(TaxAreaCode@1280062 : Code[20];TaxGroupCode@1280063 : Code[10];TaxLiable@1280064 : Boolean;Amount@1280066 : Decimal;Quantity@1280067 : Decimal;Date@1280068 : Date;DesiredTaxAmount@1280069 : Decimal;"Form Code"@1280003 : Code[10]);
    VAR
      GenJnlLine@1280071 : Record 81;
      GLSetup@1280072 : Record 98;
      TAXBuffer@1280002 : Record 13766;
      MaxAmount@1280073 : Decimal;
      TaxAmount@1280074 : Decimal;
      AddedTaxAmount@1280075 : Decimal;
      TaxBaseAmount@1280076 : Decimal;
    BEGIN
      TAXBuffer.DELETEALL;
      TaxAmount := 0;
      Initialised := TRUE;
      FirstLine := TRUE;
      TMPTaxDetail.DELETEALL;
      RemainingTaxDetails := 0;

      TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
      TaxAreaLine.SETRANGE("Tax Area",TaxAreaCode);
      IF TaxAreaLine.FIND('-') THEN BEGIN
        LastCalculationOrder := TaxAreaLine."Calculation Order" - 1;
        TaxOnTaxCalculated := FALSE;
        CalculationOrderViolation := FALSE;
        REPEAT
          TaxBaseAmount := 0;
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");

          IF TaxAreaLine."Calculation Order" <= LastCalculationOrder THEN
            CalculationOrderViolation := TRUE
          ELSE
            LastCalculationOrder := TaxAreaLine."Calculation Order";
          TaxDetail.RESET;
          TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
          TaxDetail.SETFILTER("Tax Group Code",'%1',TaxGroupCode);
          IF NOT TaxJurisdiction."Forms Not Applicable" THEN
            TaxDetail.SETRANGE("Form Code","Form Code")
          ELSE
            TaxDetail.SETRANGE("Forms Not Applicable",TRUE);

          IF Date = 0D THEN
            TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
          ELSE
            TaxDetail.SETFILTER("Effective Date",'<=%1',Date);
          TaxDetail.SETRANGE("Tax Type",TaxDetail."Tax Type"::"Sales Tax");
          IF TaxDetail.FINDLAST THEN BEGIN
            TaxOnTaxCalculated := TaxOnTaxCalculated OR TaxDetail."Calculate Tax on Tax";

            IF TaxAreaLine.Formula <> '' THEN
              TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TAXBuffer,TaxAreaLine);
            IF TaxAreaLine."Include Tax Base" THEN
              TaxBaseAmount := TaxBaseAmount + Amount;

            IF TaxLiable THEN BEGIN
              IF (ABS(TaxBaseAmount) <= TaxDetail."Maximum Amount/Qty.") OR
                 (TaxDetail."Maximum Amount/Qty." = 0)
              THEN
                AddedTaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100
              ELSE BEGIN
                MaxAmount := TaxBaseAmount / ABS(TaxBaseAmount) * TaxDetail."Maximum Amount/Qty.";
                AddedTaxAmount :=
                  (((MaxAmount * TaxDetail."Tax Below Maximum") +
                    ((TaxBaseAmount - MaxAmount) * TaxDetail."Tax Above Maximum")) / 100);
              END;
            END ELSE
              AddedTaxAmount := 0;

            IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
               (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
            THEN
              AddedTaxAmount := RoundVATPrecision(AddedTaxAmount);

            TAXBuffer.LOCKTABLE;
            TAXBuffer.INIT;
            TAXBuffer."Tax Area" := TaxAreaLine."Tax Area";
            TAXBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
            TAXBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
            TAXBuffer."Tax Area" := TaxAreaLine."Tax Area";
            TAXBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
            TAXBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
            TAXBuffer.Amount := AddedTaxAmount;
            IF NOT TAXBuffer.INSERT THEN
              TAXBuffer.MODIFY;

            TaxAmount := TaxAmount + AddedTaxAmount;
            TMPTaxDetail := TaxDetail;
            TMPTaxDetail."Tax Below Maximum" := AddedTaxAmount;
            TMPTaxDetail."Tax Above Maximum" := TaxBaseAmount;

            TMPTaxDetail.INSERT;
            RemainingTaxDetails := RemainingTaxDetails + 1;
          END;
        UNTIL TaxAreaLine.NEXT(1) = 0;
        TaxAmount := ROUND(TaxAmount);
        TaxAmount := DesiredTaxAmount;

        IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
           (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
        THEN
          DesiredTaxAmount := RoundVATPrecision(DesiredTaxAmount);

        IF (TaxAmount <> DesiredTaxAmount) AND (ABS(TaxAmount - DesiredTaxAmount) <= 0.01) AND
           (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::" ")
        THEN
          IF TMPTaxDetail.FIND('-') THEN BEGIN
            TMPTaxDetail."Tax Below Maximum" :=
              TMPTaxDetail."Tax Below Maximum" - TaxAmount + DesiredTaxAmount;
            TMPTaxDetail.MODIFY;
            TaxAmount := DesiredTaxAmount;
          END;
        IF TaxOnTaxCalculated AND CalculationOrderViolation THEN
          ERROR(
            Text001,
            TaxAreaLine.FIELDNAME("Calculation Order"),TaxArea.TABLENAME,TaxAreaLine."Tax Area",
            TaxDetail.FIELDNAME("Calculate Tax on Tax"),CalculationOrderViolation);
      END;

      IF (TaxAmount <> DesiredTaxAmount) AND (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::" ") THEN
        ERROR(
          Text002 +
          Text003 +
          Text004 +
          Text005,
          TaxAreaCode,GenJnlLine.FIELDNAME("Tax Area Code"),
          TaxGroupCode,GenJnlLine.FIELDNAME("Tax Group Code"),
          GLSetup.TABLENAME);

      TotalForAllocation := DesiredTaxAmount;
    END;

    PROCEDURE GetSalesTaxLine@1280025(VAR TaxDetail2@1280077 : Record 322;VAR ReturnTaxAmount@1280078 : Decimal;VAR ReturnTaxBaseAmount@1280079 : Decimal) : Boolean;
    VAR
      TaxAmount@1280080 : Decimal;
    BEGIN
      ReturnTaxAmount := 0;
      IF NOT Initialised THEN
        ERROR(Text006);
      IF FirstLine THEN BEGIN
        IF NOT TMPTaxDetail.FIND('-') THEN BEGIN
          Initialised := FALSE;
          EXIT(FALSE);
        END;
        TotalTaxAmountRounding := 0;
        FirstLine := FALSE;
      END ELSE
        IF TMPTaxDetail.NEXT = 0 THEN BEGIN
          Initialised := FALSE;
          EXIT(FALSE);
        END;

      ReturnTaxBaseAmount := ROUND(TMPTaxDetail."Tax Above Maximum");
      TaxAmount := TMPTaxDetail."Tax Below Maximum";
      ReturnTaxAmount := ROUND(TaxAmount + TotalTaxAmountRounding);
      TotalTaxAmountRounding := TaxAmount + TotalTaxAmountRounding - ReturnTaxAmount;
      IF RemainingTaxDetails = 0 THEN
        TaxAmount := TotalForAllocation
      ELSE
        IF ABS(TaxAmount) > ABS(TotalForAllocation) THEN
          TaxAmount := TotalForAllocation;

      TotalForAllocation := TotalForAllocation - TaxAmount;

      TaxDetail2 := TMPTaxDetail;

      EXIT(TRUE);
    END;

    PROCEDURE EvaluateExpression@1280001(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpression(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpression(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result + TaxDetailLines2.Amount;
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE GetPurchaseHeader@1500000(PurchLine@1500000 : Record 39);
    BEGIN
      IF (PurchHeader."Document Type" <> PurchLine."Document Type") OR
         (PurchHeader."No." <> PurchLine."Document No.")
      THEN
        PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
    END;

    PROCEDURE RoundVATPrecision@1500001(Amount@1500004 : Decimal) : Decimal;
    VAR
      VAtRoundingDirection@1500001 : Text[1];
      VATRoundingPrecision@1500000 : Decimal;
    BEGIN
      GetGLSetup;
      CASE GLSetup."VAT Rounding Type" OF
        GLSetup."VAT Rounding Type"::Nearest:
          VAtRoundingDirection := '=';
        GLSetup."VAT Rounding Type"::Up:
          VAtRoundingDirection := '>';
        GLSetup."VAT Rounding Type"::Down:
          VAtRoundingDirection := '<';
      END;
      IF GLSetup."VAT Rounding Precision" <> 0 THEN
        VATRoundingPrecision := GLSetup."VAT Rounding Precision"
      ELSE
        VATRoundingPrecision := 0.01;
      EXIT(ROUND(Amount,VATRoundingPrecision,VAtRoundingDirection));
    END;

    LOCAL PROCEDURE GetGLSetup@1500004();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE GetInputTaxCredit@1500007(PurchLine@1500001 : Record 39;VAR AmountOnInventory@1500003 : Decimal;VAR InputTaxCredit@1500004 : Decimal;VAR PurchTaxAmount@1500005 : Decimal;UpdateDefermentBuffer@1500002 : Boolean;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      Item@1500014 : Record 27;
      ItemCharge@1500021 : Record 5800;
      DefermentBuffer@1500016 : Record 16532;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpAmountOnInventory@1500008 : Decimal;
      TmpInputTaxCredit@1500007 : Decimal;
      TmpPurchTaxAmount@1500006 : Decimal;
      TotalAmountOnInventory@1500011 : Decimal;
      TotalInputTaxCredit@1500010 : Decimal;
      TotalPurchTaxAmount@1500009 : Decimal;
      CapitalGood@1500015 : Boolean;
      DetailedTaxEntryBuffer@1500017 : Record 16480;
      TotalTaxAmounts@1500020 : Decimal;
      TaxType@1500022 : Text[30];
      Text16501@1500023 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
    BEGIN
      GetPurchaseHeader(PurchLine);

      WITH PurchLine DO BEGIN
        DetailedTaxEntryBuffer.RESET;
        DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
        DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedTaxEntryBuffer.DELETEALL;

        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16501,TaxType,TaxAreaLine."Tax Jurisdiction Code");

            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;
            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            IF NOT TaxJurisdiction."Forms Not Applicable" THEN
              TaxDetail.SETRANGE("Form Code","Form Code")
            ELSE
              TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
            IF PurchHeader."Posting Date" = 0D THEN
              TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
            ELSE
              TaxDetail.SETFILTER("Effective Date",'<=%1',PurchHeader."Posting Date");
            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN BEGIN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,
                                       "Document Type"::Quote,"Document Type"::"Blanket Order"]
                THEN
                  TaxBaseAmount := TaxBaseAmount + "Tax Base Amount";
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  TaxBaseAmount := TaxBaseAmount - "Tax Base Amount";
              END;
              IF TaxAreaLine."Formula Incl. VPT" <> '' THEN
                TaxBaseAmount := TaxBaseAmount +
                  EvaluateExpressionVatPurchTax(TRUE,TaxAreaLine."Formula Incl. VPT",TaxBuffer,TaxAreaLine);
              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;
              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                 (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
              THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := RoundVATPrecision(TaxAmount);
              END;

              TotalTaxAmount := TotalTaxAmount + TaxAmount;

              CASE Type OF
                Type::Item:
                  BEGIN
                    Item.GET("No.");
                    IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
                Type::"Fixed Asset":
                  IF TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
                Type::"Charge (Item)":
                  BEGIN
                    ItemCharge.GET("No.");
                    IF ItemCharge."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
              END;

              CalcInputTaxCredit(
                "Location Code",
                PurchHeader."Buy-from Vendor No.",
                "Tax Area Code",
                TaxDetail."Tax Jurisdiction Code",
                TaxDetail."Tax Group Code",
                PurchHeader."Posting Date",
                TaxBaseAmount,
                TaxAmount,
                CapitalGood OR TaxDetail."Creditable Goods",
                "Non ITC Claimable Usage %",
                TmpAmountOnInventory,
                TmpInputTaxCredit,
                TmpPurchTaxAmount,"Form Code");
              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
                TaxBuffer."Purchase VAT Amount" := -TmpPurchTaxAmount
              ELSE
                TaxBuffer."Purchase VAT Amount" := TmpPurchTaxAmount;
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.DELETEALL;
              IF TaxAmount <> 0 THEN
                CreateDetailedTaxEntryBuffer(PurchLine,TaxBaseAmount,
                  TaxAmount,TmpAmountOnInventory,TmpInputTaxCredit,TmpPurchTaxAmount,CapitalGood);
              IF UpdateDefermentBuffer THEN BEGIN
                DefermentBuffer.SETRANGE("Document No.","Document No.");
                DefermentBuffer.SETRANGE("Line No.","Line No.");
                DefermentBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
                DefermentBuffer.DELETEALL;
                IF CapitalGood AND (TmpInputTaxCredit <> 0) THEN
                  CreateDeferments(PurchLine,TaxBaseAmount,
                    TaxAmount,TmpAmountOnInventory,TmpInputTaxCredit,TmpPurchTaxAmount);
              END;
              TotalAmountOnInventory := TotalAmountOnInventory + TmpAmountOnInventory;
              TotalInputTaxCredit := TotalInputTaxCredit + TmpInputTaxCredit;
              TotalPurchTaxAmount := TotalPurchTaxAmount + TmpPurchTaxAmount;
              TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;
      AmountOnInventory := TotalAmountOnInventory;
      InputTaxCredit := TotalInputTaxCredit;
      PurchTaxAmount := TotalPurchTaxAmount;
      IF PurchLine."Document Type" IN [PurchLine."Document Type"::"Return Order",PurchLine."Document Type"::"Credit Memo"] THEN
        TaxAmounts := -TotalTaxAmounts
      ELSE
        TaxAmounts := TotalTaxAmounts
    END;

    LOCAL PROCEDURE CalcInputTaxCredit@1500006(LocationCode@1500000 : Code[10];VendorNo@1500007 : Code[20];TaxAreaCode@1500004 : Code[10];TaxJurisdictionCode@1500005 : Code[10];TaxGroupCode@1500008 : Code[10];PostingDate@1500009 : Date;TaxBaseAmount@1500010 : Decimal;TaxAmount@1500011 : Decimal;InputTaxCreditApplicable@1500014 : Boolean;NonITCClaimUsagePercent@1500012 : Decimal;VAR AmountOnInventory@1500003 : Decimal;VAR InputTaxCredit@1500002 : Decimal;VAR PurchTaxAmount@1500001 : Decimal;FormCode@1500015 : Code[10]);
    VAR
      DetailedTaxEntry@1500006 : Record 16522;
      VATMngt@1500013 : Codeunit 16503;
      Sign@1500016 : Integer;
    BEGIN
      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice] THEN BEGIN
        DetailedTaxEntry."Document Type" := DetailedTaxEntry."Document Type"::Invoice;
        Sign := 1;
      END
      ELSE
        IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"] THEN
          BEGIN
          DetailedTaxEntry."Document Type" := DetailedTaxEntry."Document Type"::"Credit Memo";
          Sign := -1;
        END;
      DetailedTaxEntry.INIT;
      DetailedTaxEntry."Location Code" := LocationCode;
      DetailedTaxEntry."Source Type" := DetailedTaxEntry."Source Type"::Vendor;
      DetailedTaxEntry."Source No." := VendorNo;
      DetailedTaxEntry."Tax Area Code" := TaxAreaCode;
      DetailedTaxEntry."Tax Jurisdiction Code" := TaxJurisdictionCode;
      DetailedTaxEntry."Tax Group Code" := TaxGroupCode;
      DetailedTaxEntry."Posting Date" := PostingDate;
      DetailedTaxEntry."Tax Base Amount" := TaxBaseAmount;
      DetailedTaxEntry."Tax Amount" := TaxAmount;
      DetailedTaxEntry."Non ITC Claimable Usage %" := NonITCClaimUsagePercent;
      DetailedTaxEntry."Input / Output Tax Applicable" := InputTaxCreditApplicable;
      DetailedTaxEntry."Form Code" := FormCode;
      VATMngt.UpdateTaxDetails(DetailedTaxEntry);
      AmountOnInventory := Sign * DetailedTaxEntry."Amount Loaded on Item";
      InputTaxCredit := Sign * DetailedTaxEntry."Input Credit/Output Tax Amount";
      PurchTaxAmount := Sign * DetailedTaxEntry."Purch. Tax Amount";
    END;

    LOCAL PROCEDURE CreateDeferments@1500002(PurchLine@1500000 : Record 39;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;AmountOnInventory@1500011 : Decimal;InputTaxCredit@1500012 : Decimal;PurchTaxAmount@1500013 : Decimal);
    VAR
      Location@1500002 : Record 14;
      State@1500003 : Record 13762;
      JurisDefermentPeriod@1500004 : Record 16521;
      CompanyInfo@1500015 : Record 79;
      NoOfDefferments@1500006 : Integer;
      LastPostingDate@1500007 : Date;
      LoopCounter@1500008 : Integer;
      DefferPostingDate@1500009 : Date;
      DefferementNo@1500010 : Integer;
      TaxBaseAmtPerUnitofInvoice@1500016 : Decimal;
      Counter@1500017 : Integer;
    BEGIN
      GetPurchaseHeader(PurchLine);
      IF PurchHeader."Location Code" <> '' THEN BEGIN
        Location.GET(PurchHeader."Location Code");
        Location.TESTFIELD("State Code");
        State.GET(Location."State Code");
      END ELSE BEGIN
        CompanyInfo.GET;
        CompanyInfo.TESTFIELD(State);
        State.GET(CompanyInfo.State);
      END;

      TaxBaseAmtPerUnitofInvoice := 0;
      IF PurchLine."Qty. to Invoice (Base)" <> 0 THEN
        TaxBaseAmtPerUnitofInvoice := PurchLine."Tax Base Amount" / PurchLine."Qty. to Invoice (Base)";
      JurisDefermentPeriod.RESET;
      JurisDefermentPeriod.SETCURRENTKEY("State Code","Effective Date","Line No.");
      JurisDefermentPeriod.SETRANGE("State Code",State.Code);
      JurisDefermentPeriod.SETFILTER("Effective Date",'<=%1',PurchHeader."Document Date");
      JurisDefermentPeriod.SETFILTER("Starting Threshold Amount",'<=%1',TaxBaseAmtPerUnitofInvoice);
      JurisDefermentPeriod.SETFILTER("Closing Threshold Amount",'>=%1',TaxBaseAmtPerUnitofInvoice);
      IF JurisDefermentPeriod.FINDLAST THEN BEGIN
        Counter := 0;
        NoOfDefferments := JurisDefermentPeriod."No. of Deferments" + 1;
        LastPostingDate := PurchHeader."Posting Date";
        FOR LoopCounter := 1 TO NoOfDefferments DO BEGIN
          IF LoopCounter = 1 THEN BEGIN
            LastPostingDate := PurchHeader."Posting Date";
            DefferPostingDate := LastPostingDate;
          END ELSE BEGIN
            LastPostingDate := DefferPostingDate;
            Counter += 1;
            DefferPostingDate := GetDefrPostingDate(State,LastPostingDate,Counter = 1)
          END;
          DefferementNo := LoopCounter - 1;
          InsertDefermentBuffer(PurchLine,
            DefferPostingDate,State."Tax Period",NoOfDefferments,
            DefferementNo,TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,TaxAmount,AmountOnInventory,InputTaxCredit,PurchTaxAmount);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertDefermentBuffer@1500003(PurchLine@1500003 : Record 39;PostingDate@1500004 : Date;TaxPeriod@1500009 : DateFormula;NoOfDeferments@1500006 : Integer;DefermentNo@1500011 : Integer;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;AmountLoadedOnItem@1500000 : Decimal;InputTaxCredit@1500001 : Decimal;PurchTaxAmount@1500002 : Decimal);
    VAR
      DefermentBuffer@1500008 : Record 16532;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH PurchLine DO BEGIN
        IF DefermentBuffer.FINDLAST THEN
          NextEntryNo := DefermentBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          Sign := -1
        ELSE
          Sign := 1;

        DefermentBuffer.INIT;
        DefermentBuffer."Document No." := "Document No.";
        DefermentBuffer."Line No." := "Line No.";
        DefermentBuffer."Entry No." := NextEntryNo;
        DefermentBuffer."Document Type" := DefermentBuffer."Document Type"::Order;
        DefermentBuffer."Document No." := "Document No.";
        DefermentBuffer."Posting Date" := PostingDate;
        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN
          DefermentBuffer.Type := Type::Item
        ELSE
          DefermentBuffer.Type := Type;
        DefermentBuffer."No." := "No.";
        DefermentBuffer."Tax Period" := TaxPeriod;
        DefermentBuffer."Source Type" := DefermentBuffer."Source Type"::Vendor;
        DefermentBuffer."Source No." := "Buy-from Vendor No.";
        DefermentBuffer."Non ITC Claimable Usage %" := "Non ITC Claimable Usage %";
        DefermentBuffer."Location Code" := "Location Code";
        DefermentBuffer.Quantity := Quantity;
        DefermentBuffer."VAT %" := TaxDetail."Tax Below Maximum";
        DefermentBuffer."Product Type" := DefermentBuffer."Product Type"::"Capital Goods";
        DefermentBuffer.Deferment := TRUE;
        DefermentBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DefermentBuffer."Input Credit/Output Tax Amount" := ROUND(InputTaxCredit / NoOfDeferments);
        IF DefermentNo + 1 = NoOfDeferments THEN BEGIN
          IF InputTaxCredit <> (DefermentBuffer."Input Credit/Output Tax Amount" * NoOfDeferments) THEN
            DefermentBuffer."Input Credit/Output Tax Amount" := DefermentBuffer."Input Credit/Output Tax Amount" +
              InputTaxCredit - (DefermentBuffer."Input Credit/Output Tax Amount" * NoOfDeferments);
        END;
        DefermentBuffer."Deferment No." := DefermentNo;

        IF DefermentNo = 0 THEN BEGIN
          DefermentBuffer."Amount Loaded on Item" := AmountLoadedOnItem;
          DefermentBuffer."VAT Base Amount" := Sign * TaxBaseAmount;
          DefermentBuffer."VAT Amount" := Sign * TaxAmount;
        END;
        DefermentBuffer.INSERT;
      END;
    END;

    PROCEDURE GetDefrPostingDate@1500008(State@1500001 : Record 13762;LastPostingDate@1500000 : Date;FirstCount@1500003 : Boolean) : Date;
    BEGIN
      IF (FORMAT(State."Deferment Period") = '') AND (NOT State."Financial Year") THEN
        EXIT(CALCDATE(State."Tax Period",LastPostingDate));
      IF (FORMAT(State."Deferment Period") <> '') AND (NOT State."Financial Year") THEN
        EXIT(CALCDATE(State."Deferment Period",LastPostingDate));
      IF (FORMAT(State."Deferment Period") <> '') AND State."Financial Year" AND FirstCount THEN BEGIN
        IF DATE2DMY(LastPostingDate,2) < 4 THEN
          EXIT(DMY2DATE(1,4,DATE2DMY(LastPostingDate,3)));

        EXIT(DMY2DATE(1,4,DATE2DMY(CALCDATE(State."Deferment Period",LastPostingDate),3)));
      END;
      IF (FORMAT(State."Deferment Period") <> '') AND State."Financial Year" AND NOT FirstCount THEN
        EXIT(DMY2DATE(1,4,DATE2DMY(CALCDATE(State."Deferment Period",LastPostingDate),3)));
    END;

    PROCEDURE SetCurrency@1500009(ForCurrency@1500000 : Boolean);
    BEGIN
      ForeignCurrency := ForCurrency;
    END;

    LOCAL PROCEDURE CreateDetailedTaxEntryBuffer@1500010(PurchLine@1500000 : Record 39;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;AmountOnInventory@1500011 : Decimal;InputTaxCredit@1500012 : Decimal;PurchTaxAmount@1500013 : Decimal;InputTaxCreditApplicable@1500004 : Boolean);
    BEGIN
      GetPurchaseHeader(PurchLine);

      InsertDetailedTaxEntryBuffer(PurchLine,
        PurchHeader."Posting Date",TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
        TaxAmount,AmountOnInventory,InputTaxCredit,PurchTaxAmount,InputTaxCreditApplicable);
    END;

    LOCAL PROCEDURE InsertDetailedTaxEntryBuffer@1500012(PurchLine@1500003 : Record 39;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;AmountLoadedOnItem@1500000 : Decimal;InputTaxCredit@1500001 : Decimal;PurchTaxAmount@1500002 : Decimal;InputTaxCreditApplicable@1500011 : Boolean);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH PurchLine DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
          Sign := -1
        ELSE
          Sign := 1;

        TaxJurisdiction.GET(TaxJurisdictionCode);

        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Purchase;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN
          DetailedTaxEntryBuffer.Type := Type::Item
        ELSE
          DetailedTaxEntryBuffer.Type := Type;
        DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Vendor;
        DetailedTaxEntryBuffer."Source No." := "Buy-from Vendor No.";
        DetailedTaxEntryBuffer."Non ITC Claimable Usage %" := "Non ITC Claimable Usage %";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := Quantity;
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Purchase Tax %" := TaxDetail."VAT able Purch. Tax %";
        IF InputTaxCreditApplicable THEN
          DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          CASE Type OF
            Type::Item,Type::"Charge (Item)",Type::"G/L Account":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
            Type::"Fixed Asset":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods";
          END
          ;
        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := TaxBaseAmount;
        DetailedTaxEntryBuffer."Tax Amount" := TaxAmount;
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := Sign * ROUND(InputTaxCredit);
        DetailedTaxEntryBuffer."Amount Loaded on Item" := Sign * AmountLoadedOnItem;
        DetailedTaxEntryBuffer."Purchase Tax Amount" := Sign * PurchTaxAmount;
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE EvaluateExpressionVatPurchTax@1500013(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionVatPurchTax(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpressionVatPurchTax(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionVatPurchTax(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result + TaxDetailLines2."Purchase VAT Amount";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE GetStandardDeductionAmt@1500011(SalesLine@1500001 : Record 37;VAR StandardDeductionAmt@1500003 : Decimal;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      Item@1500014 : Record 27;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpStandardDeductionAmt@1500008 : Decimal;
      TotalStandardDeductionAmt@1500011 : Decimal;
      CapitalGood@1500015 : Boolean;
      DetailedTaxEntryBuffer@1500017 : Record 16480;
      TotalTaxAmounts@1500020 : Decimal;
      NetTaxAmount@1500004 : Decimal;
      TaxType@1500002 : Text[30];
      Text16501@1500005 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
    BEGIN
      GetSalesHeader(SalesLine);

      IF SalesHeader."Export or Deemed Export" OR SalesHeader."VAT Exempted" THEN
        EXIT;

      WITH SalesLine DO BEGIN
        DetailedTaxEntryBuffer.RESET;
        DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
        DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedTaxEntryBuffer.DELETEALL;

        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16501,TaxType,TaxAreaLine."Tax Jurisdiction Code");

            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;

            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            IF NOT TaxJurisdiction."Forms Not Applicable" THEN
              TaxDetail.SETRANGE("Form Code","Form Code")
            ELSE
              TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
            IF SalesHeader."Posting Date" = 0D THEN
              TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
            ELSE
              TaxDetail.SETFILTER("Effective Date",'<=%1',SalesHeader."Posting Date");

            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN BEGIN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,
                                       "Document Type"::Quote,"Document Type"::"Blanket Order"]
                THEN
                  TaxBaseAmount := TaxBaseAmount - "Tax Base Amount";
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  TaxBaseAmount := TaxBaseAmount + "Tax Base Amount";
              END;
              IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
                TaxBaseAmount := TaxBaseAmount +
                  EvaluateExpressionStdDeduction(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",TaxBuffer,TaxAreaLine);

              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;

              NetTaxAmount :=
                RoundVATPrecision((TaxBaseAmount -
                                   TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) *
                  TaxDetail."Tax Below Maximum" / 100);

              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                 (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
              THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := RoundVATPrecision(TaxAmount);
              END;

              IF TaxDetail."Standard Deduction %" <> 0 THEN
                TmpStandardDeductionAmt := TaxAmount - NetTaxAmount
              ELSE
                TmpStandardDeductionAmt := 0;

              TotalTaxAmount := TotalTaxAmount + TaxAmount;

              CASE Type OF
                Type::Item:
                  BEGIN
                    Item.GET("No.");
                    IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
                Type::"Fixed Asset":
                  IF TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
              END;

              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              TaxBuffer."Standard Deduction Amount" := ROUND(TmpStandardDeductionAmt);
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.DELETEALL;

              CreateSaleDtldTaxEntryBuffer(SalesLine,TaxBaseAmount,
                TaxAmount,TmpStandardDeductionAmt,NetTaxAmount,CapitalGood);

              TotalStandardDeductionAmt := TotalStandardDeductionAmt + TmpStandardDeductionAmt;
              TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;
      IF SalesLine."Document Type" IN [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN BEGIN
        TaxAmounts := TotalTaxAmounts;
        StandardDeductionAmt := TotalStandardDeductionAmt;
      END ELSE BEGIN
        TaxAmounts := -TotalTaxAmounts;
        StandardDeductionAmt := -TotalStandardDeductionAmt;
      END
    END;

    LOCAL PROCEDURE GetSalesHeader@1500014(SalesLine@1500000 : Record 37);
    BEGIN
      IF (SalesHeader."Document Type" <> SalesLine."Document Type") OR
         (SalesHeader."No." <> SalesLine."Document No.")
      THEN
        SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE CreateSaleDtldTaxEntryBuffer@1500016(SalesLine@1500000 : Record 37;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;StandardDeductionAmt@1500011 : Decimal;NetTaxAmount@1500006 : Decimal;InputTaxCreditApplicable@1500004 : Boolean);
    BEGIN
      GetSalesHeader(SalesLine);

      InsertSaleDtldTaxEntryBuffer(SalesLine,
        SalesHeader."Posting Date",TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
        TaxAmount,StandardDeductionAmt,NetTaxAmount,InputTaxCreditApplicable);
    END;

    LOCAL PROCEDURE InsertSaleDtldTaxEntryBuffer@1500017(SalesLine@1500003 : Record 37;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;StandardDeductionAmt@1500000 : Decimal;NetTaxAmount@1500001 : Decimal;InputTaxCreditApplicable@1500011 : Boolean);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH SalesLine DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
          Sign := 1
        ELSE
          Sign := -1;

        TaxJurisdiction.GET(TaxJurisdictionCode);
        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Sale;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN
          DetailedTaxEntryBuffer.Type := Type::Item
        ELSE
          DetailedTaxEntryBuffer.Type := Type;

        DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Customer;
        DetailedTaxEntryBuffer."Source No." := "Sell-to Customer No.";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := Quantity;
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Standard Deduction %" := TaxDetail."Standard Deduction %";
        IF InputTaxCreditApplicable THEN
          DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          CASE Type OF
            Type::Item,Type::"Charge (Item)",Type::"G/L Account":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
            Type::"Fixed Asset":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods";
          END
          ;
        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := TaxBaseAmount;
        DetailedTaxEntryBuffer."Gross Tax Amount" := TaxAmount;
        DetailedTaxEntryBuffer."Standard Deduction Amount" := StandardDeductionAmt;
        DetailedTaxEntryBuffer."Tax Amount" := NetTaxAmount;
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := NetTaxAmount;
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE EvaluateExpressionStdDeduction@1500022(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionStdDeduction(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpressionStdDeduction(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionStdDeduction(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result - TaxDetailLines2."Standard Deduction Amount";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE GetStdDeductionFixedPIT@1500015(SalesLine@1500001 : Record 37;TaxJurisdictionCode@1500006 : Code[20];TaxVarAmount@1500005 : Decimal;VAR StandardDeductionAmt@1500003 : Decimal;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      TaxDetailBuffer@1500010 : Record 13766;
      Item@1500014 : Record 27;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpStandardDeductionAmt@1500008 : Decimal;
      TotalStandardDeductionAmt@1500011 : Decimal;
      CapitalGood@1500015 : Boolean;
      TotalTaxAmounts@1500020 : Decimal;
      NetTaxAmount@1500004 : Decimal;
      TotalAmount@1500007 : Decimal;
    BEGIN
      GetSalesHeader(SalesLine);

      WITH SalesLine DO BEGIN
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        TaxAreaLine.SETRANGE("Tax Jurisdiction Code",TaxJurisdictionCode);
        IF TaxAreaLine.FINDFIRST THEN
          BEGIN
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
          TotalTaxAmount := 0;
          TaxAmount := 0;
          TaxBaseAmount := 0;

          TaxDetail.RESET;
          TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
          TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
          IF NOT TaxJurisdiction."Forms Not Applicable" THEN
            TaxDetail.SETRANGE("Form Code","Form Code")
          ELSE
            TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
          IF SalesHeader."Posting Date" = 0D THEN
            TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
          ELSE
            TaxDetail.SETFILTER("Effective Date",'<=%1',SalesHeader."Posting Date");
          IF TaxDetail.FINDLAST THEN BEGIN
            IF TaxAreaLine.Formula <> '' THEN
              TaxBaseAmount := EvaluateExpressionFixedPIT(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
            IF TaxAreaLine."Include Tax Base" THEN BEGIN
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                TaxBaseAmount := TaxBaseAmount + TaxVarAmount;
              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                TaxBaseAmount := TaxBaseAmount - TaxVarAmount;
            END;
            IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
              TaxBaseAmount := TaxBaseAmount +
                EvaluateExpStdDeductionFixed(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",TaxBuffer,TaxAreaLine);

            TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;

            NetTaxAmount :=
              (TaxBaseAmount -
               TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) *
              TaxDetail."Tax Below Maximum" / 100;

            IF TaxDetail."Standard Deduction %" <> 0 THEN
              TmpStandardDeductionAmt := TaxAmount - NetTaxAmount
            ELSE
              TmpStandardDeductionAmt := 0;

            TotalTaxAmount := TotalTaxAmount + TaxAmount;

            CASE Type OF
              Type::Item:
                BEGIN
                  Item.GET("No.");
                  IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
                END;
              Type::"Fixed Asset":
                IF TaxDetail."Capital Goods" THEN
                  CapitalGood := TRUE;
            END;

            TaxDetailBuffer.LOCKTABLE;
            TaxDetailBuffer.INIT;
            TaxDetailBuffer."Tax Area" := TaxAreaLine."Tax Area";
            TaxDetailBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
            TaxDetailBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
            TaxDetailBuffer."Fixed Amount" := TaxAmount;
            TaxDetailBuffer."Std Deduction Fixed Amt" := TmpStandardDeductionAmt;
            TaxDetailBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
            IF NOT TaxDetailBuffer.INSERT THEN
              TaxDetailBuffer.MODIFY;

            TotalStandardDeductionAmt := TotalStandardDeductionAmt + TmpStandardDeductionAmt;
            TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            TotalAmount := TotalAmount + TaxVarAmount;
          END;
        END;
      END;
      IF SalesLine."Document Type" IN [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN BEGIN
        StandardDeductionAmt := -TotalStandardDeductionAmt;
        TaxAmounts := -TotalTaxAmounts;
      END ELSE BEGIN
        StandardDeductionAmt := TotalStandardDeductionAmt;
        TaxAmounts := TotalTaxAmounts;
      END;
    END;

    PROCEDURE GetStdDeductionVarPIT@1500043(SalesLine@1500001 : Record 37;TaxJurisdictionCode@1500006 : Code[20];TaxVarAmount@1500005 : Decimal;VAR StandardDeductionAmt@1500003 : Decimal;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      TaxDetailBuffer@1500010 : Record 13766;
      Item@1500014 : Record 27;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpStandardDeductionAmt@1500008 : Decimal;
      TotalStandardDeductionAmt@1500011 : Decimal;
      CapitalGood@1500015 : Boolean;
      TotalTaxAmounts@1500020 : Decimal;
      NetTaxAmount@1500004 : Decimal;
      TotalAmount@1500007 : Decimal;
    BEGIN
      GetSalesHeader(SalesLine);

      WITH SalesLine DO BEGIN
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        TaxAreaLine.SETRANGE("Tax Jurisdiction Code",TaxJurisdictionCode);
        IF TaxAreaLine.FINDFIRST THEN
          BEGIN
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
          TotalTaxAmount := 0;
          TaxAmount := 0;
          TaxBaseAmount := 0;

          TaxDetail.RESET;
          TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
          TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
          IF NOT TaxJurisdiction."Forms Not Applicable" THEN
            TaxDetail.SETRANGE("Form Code","Form Code")
          ELSE
            TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
          IF SalesHeader."Posting Date" = 0D THEN
            TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
          ELSE
            TaxDetail.SETFILTER("Effective Date",'<=%1',SalesHeader."Posting Date");
          IF TaxDetail.FINDLAST THEN BEGIN
            IF TaxAreaLine.Formula <> '' THEN
              TaxBaseAmount := EvaluateExpressionVarPIT(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
            IF TaxAreaLine."Include Tax Base" THEN BEGIN
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,
                                     "Document Type"::Quote,"Document Type"::"Blanket Order"]
              THEN
                TaxBaseAmount := TaxBaseAmount + TaxVarAmount;
              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                TaxBaseAmount := TaxBaseAmount - TaxVarAmount;
            END;
            IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
              TaxBaseAmount := TaxBaseAmount +
                EvaluateExpStdDeductionVar(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",TaxBuffer,TaxAreaLine);

            TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;

            NetTaxAmount :=
              (TaxBaseAmount -
               TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) *
              TaxDetail."Tax Below Maximum" / 100;

            IF TaxDetail."Standard Deduction %" <> 0 THEN
              TmpStandardDeductionAmt := TaxAmount - NetTaxAmount
            ELSE
              TmpStandardDeductionAmt := 0;

            TotalTaxAmount := TotalTaxAmount + TaxAmount;

            CASE Type OF
              Type::Item:
                BEGIN
                  Item.GET("No.");
                  IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
                END;
              Type::"Fixed Asset":
                IF TaxDetail."Capital Goods" THEN
                  CapitalGood := TRUE;
            END;

            TaxDetailBuffer.LOCKTABLE;
            TaxDetailBuffer.RESET;
            TaxDetailBuffer.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
            TaxDetailBuffer.SETRANGE("Tax Jurisdiction Code",TaxJurisdictionCode);
            IF TaxDetailBuffer.FINDFIRST THEN BEGIN
              TaxDetailBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxDetailBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
              TaxDetailBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxDetailBuffer."Variable Amount" := TaxAmount;
              TaxDetailBuffer."Std Deduction Variable Amt" := TmpStandardDeductionAmt;
              TaxDetailBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxDetailBuffer.INSERT THEN
                TaxDetailBuffer.MODIFY;
            END;

            TotalStandardDeductionAmt := TotalStandardDeductionAmt + TmpStandardDeductionAmt;
            TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            TotalAmount := TotalAmount + TaxVarAmount;
          END;
        END;
      END;
      IF SalesLine."Document Type" IN [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN BEGIN
        TaxAmounts := -TotalTaxAmounts;
        StandardDeductionAmt := -TotalStandardDeductionAmt;
      END ELSE BEGIN
        TaxAmounts := TotalTaxAmounts;
        StandardDeductionAmt := TotalStandardDeductionAmt;
      END;
    END;

    PROCEDURE EvaluateExpressionFixedPIT@1500029(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionFixedPIT(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpressionFixedPIT(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionFixedPIT(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result + TaxDetailLines2."Fixed Amount";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE EvaluateExpressionVarPIT@1500032(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionVarPIT(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpressionVarPIT(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionVarPIT(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result + TaxDetailLines2."Variable Amount";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE EvaluateExpStdDeductionFixed@1500037(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpStdDeductionFixed(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpStdDeductionFixed(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpStdDeductionFixed(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result - TaxDetailLines2."Std Deduction Fixed Amt";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE EvaluateExpStdDeductionVar@1500038(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TaxDetailLines@1280001 : Record 13766;VAR TaxAreaLine@1280019 : Record 319) : Decimal;
    VAR
      TaxDetailLines2@1280002 : Record 13766;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[80];
      LeftOperand@1280014 : Text[80];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
      TaxAreaLine1@1280022 : Record 319;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpStdDeductionVar(IsTestExpression,LeftOperand,TaxDetailLines,TaxAreaLine);
          RightResult := EvaluateExpStdDeductionVar(IsTestExpression,RightOperand,TaxDetailLines,TaxAreaLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpStdDeductionVar(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TaxDetailLines,TaxAreaLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                TaxAreaLine1.SETRANGE("Tax Area",TaxAreaLine."Tax Area");
                TaxAreaLine1.SETRANGE("Calculation Order",Exp);
                IF TaxAreaLine1.FINDFIRST THEN BEGIN
                  TaxDetailLines2.RESET;
                  TaxDetailLines2.SETRANGE("Tax Area",TaxAreaLine1."Tax Area");
                  TaxDetailLines2.SETRANGE("Tax Jurisdiction Code",TaxAreaLine1."Tax Jurisdiction Code");
                  EVALUATE(Exp,Expression);
                  TaxDetailLines2.SETRANGE("Calculation Order",Exp);
                  IF TaxDetailLines2.FINDFIRST THEN
                    Result := Result - TaxDetailLines2."Std Deduction Variable Amt";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE GetVATOpeningInputTaxCredit@1500018(VATOpeningJournal@1500001 : Record 16569;VAR AmountOnInventory@1500003 : Decimal;VAR InputTaxCredit@1500004 : Decimal;UpdateDefermentBuffer@1500002 : Boolean;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      Item@1500014 : Record 27;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpAmountOnInventory@1500008 : Decimal;
      TmpInputTaxCredit@1500007 : Decimal;
      TotalAmountOnInventory@1500011 : Decimal;
      TotalInputTaxCredit@1500010 : Decimal;
      CapitalGood@1500015 : Boolean;
      DetailedTaxEntryBuffer@1500017 : Record 16480;
      TotalTaxAmounts@1500020 : Decimal;
      TaxType@1500005 : Text[30];
      Text16501@1500006 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
    BEGIN
      WITH VATOpeningJournal DO BEGIN
        DetailedTaxEntryBuffer.RESET;
        DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
        DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedTaxEntryBuffer.DELETEALL;

        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16501,TaxType,TaxAreaLine."Tax Jurisdiction Code");

            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;

            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            TaxDetail.SETFILTER("Effective Date",'<=%1',"Posting Date");
            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN
                TaxBaseAmount := TaxBaseAmount + "Tax Base Amount";

              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;
              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                 (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
              THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := RoundVATPrecision(TaxAmount);
              END;
              TotalTaxAmount := TotalTaxAmount + TaxAmount;

              CASE Type OF
                Type::Item:
                  BEGIN
                    Item.GET("No.");
                    IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
                Type::"Fixed Asset":
                  IF TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
              END;

              CalcVATOpeningInputTaxCredit(
                "Location Code",
                "Source No.",
                "Tax Area Code",
                TaxDetail."Tax Jurisdiction Code",
                TaxDetail."Tax Group Code",
                "Posting Date",
                TaxBaseAmount,
                TaxAmount,
                CapitalGood OR TaxDetail."Creditable Goods",
                "Non ITC Claimable Usage %",
                TmpAmountOnInventory,
                TmpInputTaxCredit,
                '');

              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.DELETEALL;

              IF TaxAmount <> 0 THEN
                InsertVATOpeningDtldTaxBuffer(VATOpeningJournal,
                  "Posting Date",TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
                  TaxAmount,TmpAmountOnInventory,TmpInputTaxCredit,CapitalGood);

              TotalAmountOnInventory := TotalAmountOnInventory + TmpAmountOnInventory;
              TotalInputTaxCredit := TotalInputTaxCredit + TmpInputTaxCredit;
              TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;

      AmountOnInventory := TotalAmountOnInventory;
      InputTaxCredit := TotalInputTaxCredit;
      TaxAmounts := ABS(TotalTaxAmounts);
    END;

    LOCAL PROCEDURE CalcVATOpeningInputTaxCredit@1500019(LocationCode@1500000 : Code[10];VendorNo@1500007 : Code[20];TaxAreaCode@1500004 : Code[10];TaxJurisdictionCode@1500005 : Code[10];TaxGroupCode@1500008 : Code[10];PostingDate@1500009 : Date;TaxBaseAmount@1500010 : Decimal;TaxAmount@1500011 : Decimal;InputTaxCreditApplicable@1500014 : Boolean;NonITCClaimUsagePercent@1500012 : Decimal;VAR AmountOnInventory@1500003 : Decimal;VAR InputTaxCredit@1500002 : Decimal;FormCode@1500015 : Code[10]);
    VAR
      DetailedTaxEntry@1500006 : Record 16522;
      VATMngt@1500013 : Codeunit 16503;
    BEGIN
      DetailedTaxEntry.INIT;
      DetailedTaxEntry."Location Code" := LocationCode;
      DetailedTaxEntry."Source Type" := DetailedTaxEntry."Source Type"::Vendor;
      DetailedTaxEntry."Source No." := VendorNo;
      DetailedTaxEntry."Tax Area Code" := TaxAreaCode;
      DetailedTaxEntry."Tax Jurisdiction Code" := TaxJurisdictionCode;
      DetailedTaxEntry."Tax Group Code" := TaxGroupCode;
      DetailedTaxEntry."Posting Date" := PostingDate;
      DetailedTaxEntry."Tax Base Amount" := TaxBaseAmount;
      DetailedTaxEntry."Tax Amount" := TaxAmount;
      DetailedTaxEntry."Non ITC Claimable Usage %" := NonITCClaimUsagePercent;
      DetailedTaxEntry."Input / Output Tax Applicable" := InputTaxCreditApplicable;
      DetailedTaxEntry."Form Code" := FormCode;
      VATMngt.UpdateTaxDetails(DetailedTaxEntry);

      AmountOnInventory := DetailedTaxEntry."Amount Loaded on Item";
      InputTaxCredit := DetailedTaxEntry."Input Credit/Output Tax Amount";
    END;

    LOCAL PROCEDURE InsertVATOpeningDtldTaxBuffer@1500026(VATOpeningJournal@1500003 : Record 16569;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;AmountLoadedOnItem@1500000 : Decimal;InputTaxCredit@1500001 : Decimal;InputTaxCreditApplicable@1500011 : Boolean);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH VATOpeningJournal DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := DetailedTaxEntryBuffer."Entry No.";

        IF "Transaction Type" = "Transaction Type"::Purchase THEN
          Sign := 1
        ELSE
          Sign := -1;

        TaxJurisdiction.GET(TaxJurisdictionCode);

        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Purchase;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        IF Type = Type::"G/L Account" THEN
          DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::"G/L Account"
        ELSE
          IF Type = Type::Item THEN
            DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::Item
          ELSE
            IF Type = Type::"Fixed Asset" THEN
              DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::"Fixed Asset";
        DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Vendor;
        DetailedTaxEntryBuffer."Source No." := "Source No.";
        DetailedTaxEntryBuffer."Non ITC Claimable Usage %" := "Non ITC Claimable Usage %";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := Quantity;
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Purchase Tax %" := TaxDetail."VAT able Purch. Tax %";
        IF InputTaxCreditApplicable THEN
          DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          CASE Type OF
            Type::Item,Type::"G/L Account":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
            Type::"Fixed Asset":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods";
          END;

        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := Sign * TaxBaseAmount;
        DetailedTaxEntryBuffer."Tax Amount" := Sign * TaxAmount;
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := Sign * ROUND(InputTaxCredit);
        DetailedTaxEntryBuffer."Amount Loaded on Item" := Sign * AmountLoadedOnItem;
        DetailedTaxEntryBuffer."Journal Batch Name" := "Batch Name";
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE GetVATOpeningSTD@1500028(VATOpeningJournal@1500001 : Record 16569;VAR StandardDeductionAmt@1500003 : Decimal;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      Item@1500014 : Record 27;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpStandardDeductionAmt@1500008 : Decimal;
      TotalStandardDeductionAmt@1500011 : Decimal;
      CapitalGood@1500015 : Boolean;
      DetailedTaxEntryBuffer@1500017 : Record 16480;
      TotalTaxAmounts@1500020 : Decimal;
      NetTaxAmount@1500004 : Decimal;
      TaxType@1500002 : Text[30];
      Text16501@1500005 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
    BEGIN
      VATOpeningJournal.TESTFIELD("Posting Date");

      WITH VATOpeningJournal DO BEGIN
        DetailedTaxEntryBuffer.RESET;
        DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
        DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedTaxEntryBuffer.DELETEALL;

        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16501,TaxType,TaxAreaLine."Tax Jurisdiction Code");

            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;

            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            TaxDetail.SETFILTER("Effective Date",'<=%1',"Posting Date");
            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN
                TaxBaseAmount := TaxBaseAmount - "Tax Base Amount";

              IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
                TaxBaseAmount := TaxBaseAmount +
                  EvaluateExpressionStdDeduction(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",TaxBuffer,TaxAreaLine);

              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;

              NetTaxAmount :=
                RoundVATPrecision((TaxBaseAmount -
                                   TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) *
                  TaxDetail."Tax Below Maximum" / 100);

              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                 (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
              THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := RoundVATPrecision(TaxAmount);
              END;

              IF TaxDetail."Standard Deduction %" <> 0 THEN
                TmpStandardDeductionAmt := TaxAmount - NetTaxAmount
              ELSE
                TmpStandardDeductionAmt := 0;

              TotalTaxAmount := TotalTaxAmount + TaxAmount;

              CASE Type OF
                Type::Item:
                  BEGIN
                    Item.GET("No.");
                    IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
                Type::"Fixed Asset":
                  IF TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
              END;

              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              TaxBuffer."Standard Deduction Amount" := ROUND(TmpStandardDeductionAmt);
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.DELETEALL;

              IF TaxAmount <> 0 THEN
                InsertVATOpenSaleDtldTaxBuffer(VATOpeningJournal,"Posting Date",
                  TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
                  TaxAmount,TmpStandardDeductionAmt,NetTaxAmount,CapitalGood);

              TotalStandardDeductionAmt := TotalStandardDeductionAmt + TmpStandardDeductionAmt;
              TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;
      StandardDeductionAmt := ABS(TotalStandardDeductionAmt);
      TaxAmounts := ABS(TotalTaxAmounts);
    END;

    LOCAL PROCEDURE InsertVATOpenSaleDtldTaxBuffer@1500035(VATOpeningJournal@1500002 : Record 16569;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;StandardDeductionAmt@1500000 : Decimal;NetTaxAmount@1500001 : Decimal;InputTaxCreditApplicable@1500011 : Boolean);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH VATOpeningJournal DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        TaxJurisdiction.GET(TaxJurisdictionCode);
        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Sale;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        IF Type = Type::"G/L Account" THEN
          DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::"G/L Account"
        ELSE
          IF Type = Type::Item THEN
            DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::Item
          ELSE
            IF Type = Type::"Fixed Asset" THEN
              DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::"Fixed Asset";

        DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Customer;
        DetailedTaxEntryBuffer."Source No." := "Source No.";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := Quantity;
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Standard Deduction %" := TaxDetail."Standard Deduction %";
        IF InputTaxCreditApplicable THEN
          DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          CASE Type OF
            Type::Item,Type::"G/L Account":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
            Type::"Fixed Asset":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods";
          END
          ;
        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := -1 * ABS(TaxBaseAmount);
        DetailedTaxEntryBuffer."Gross Tax Amount" := -1 * ABS(TaxAmount);
        DetailedTaxEntryBuffer."Standard Deduction Amount" := -1 * ABS(StandardDeductionAmt);
        DetailedTaxEntryBuffer."Tax Amount" := -1 * ABS(NetTaxAmount);
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := -1 * ABS(NetTaxAmount);
        DetailedTaxEntryBuffer."Journal Batch Name" := "Batch Name";
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE GetItemChargeInputTaxCredit@1500020(PurchLine@1500019 : Record 39;VAR AmountOnInventory@1500005 : Decimal;VAR InputTaxCredit@1500004 : Decimal;VAR PurchTaxAmount@1500003 : Decimal;UpdateDefermentBuffer@1500002 : Boolean;VAR TaxAmounts@1500001 : Decimal;ItemChargeAssgntPurch@1500022 : Record 5805);
    VAR
      TaxBuffer@1500013 : Record 13766;
      Item@1500014 : Record 27;
      ItemCharge@1500021 : Record 5800;
      DefermentBuffer@1500016 : Record 16532;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpAmountOnInventory@1500008 : Decimal;
      TmpInputTaxCredit@1500007 : Decimal;
      TmpPurchTaxAmount@1500006 : Decimal;
      TotalAmountOnInventory@1500011 : Decimal;
      TotalInputTaxCredit@1500010 : Decimal;
      TotalPurchTaxAmount@1500009 : Decimal;
      CapitalGood@1500015 : Boolean;
      DetailedTaxEntryBuffer@1500017 : Record 16480;
      TotalTaxAmounts@1500020 : Decimal;
      Factor@1500023 : Decimal;
      TaxType@1500024 : Text[30];
      Text16501@1500025 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
    BEGIN
      GetPurchaseHeader(PurchLine);

      WITH PurchLine DO BEGIN
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16501,TaxType,TaxAreaLine."Tax Jurisdiction Code");

            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;

            Factor := 0;
            CALCFIELDS("Qty. to Assign");
            IF "Line Amount" <> 0 THEN
              IF "Qty. to Assign" <> 0 THEN
                Factor := ItemChargeAssgntPurch."Qty. to Assign" / "Qty. to Assign";

            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            IF NOT TaxJurisdiction."Forms Not Applicable" THEN
              TaxDetail.SETRANGE("Form Code","Form Code")
            ELSE
              TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
            IF PurchHeader."Posting Date" = 0D THEN
              TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
            ELSE
              TaxDetail.SETFILTER("Effective Date",'<=%1',PurchHeader."Posting Date");
            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN BEGIN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  TaxBaseAmount := TaxBaseAmount + "Tax Base Amount" * Factor;
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  TaxBaseAmount := TaxBaseAmount - "Tax Base Amount" * Factor;
              END;
              IF TaxAreaLine."Formula Incl. VPT" <> '' THEN
                TaxBaseAmount := TaxBaseAmount +
                  EvaluateExpressionVatPurchTax(TRUE,TaxAreaLine."Formula Incl. VPT",TaxBuffer,TaxAreaLine);

              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;
              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                 (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
              THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := ROUND(TaxAmount);
              END;
              TotalTaxAmount := TotalTaxAmount + TaxAmount;

              CASE Type OF
                Type::Item:
                  BEGIN
                    Item.GET("No.");
                    IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
                Type::"Fixed Asset":
                  IF TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
                Type::"Charge (Item)":
                  BEGIN
                    ItemCharge.GET("No.");
                    IF ItemCharge."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
              END;

              CalcInputTaxCredit(
                "Location Code",
                PurchHeader."Buy-from Vendor No.",
                "Tax Area Code",
                TaxDetail."Tax Jurisdiction Code",
                TaxDetail."Tax Group Code",
                PurchHeader."Posting Date",
                TaxBaseAmount,
                TaxAmount,
                CapitalGood OR TaxDetail."Creditable Goods",
                "Non ITC Claimable Usage %",
                TmpAmountOnInventory,
                TmpInputTaxCredit,
                TmpPurchTaxAmount,"Form Code");

              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
                TaxBuffer."Purchase VAT Amount" := -TmpPurchTaxAmount
              ELSE
                TaxBuffer."Purchase VAT Amount" := TmpPurchTaxAmount;
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.SETRANGE("Item Charge Assgn. Line No.",ItemChargeAssgntPurch."Line No.");
              DetailedTaxEntryBuffer.DELETEALL;

              IF TaxAmount <> 0 THEN
                CreateChargeDtldTaxEntryBuffer(PurchLine,TaxBaseAmount,
                  TaxAmount,TmpAmountOnInventory,TmpInputTaxCredit,TmpPurchTaxAmount,CapitalGood,ItemChargeAssgntPurch);

              IF UpdateDefermentBuffer THEN BEGIN
                DefermentBuffer.SETRANGE("Document No.","Document No.");
                DefermentBuffer.SETRANGE("Line No.","Line No.");
                DefermentBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
                DefermentBuffer.SETRANGE("Item Charge Assgn. Line No.",ItemChargeAssgntPurch."Line No.");
                DefermentBuffer.DELETEALL;

                IF CapitalGood AND (TmpInputTaxCredit <> 0) THEN
                  CreateChargeDeferments(PurchLine,TaxBaseAmount,
                    TaxAmount,TmpAmountOnInventory,TmpInputTaxCredit,TmpPurchTaxAmount,ItemChargeAssgntPurch);
              END;
              TotalAmountOnInventory := TotalAmountOnInventory + TmpAmountOnInventory;
              TotalInputTaxCredit := TotalInputTaxCredit + TmpInputTaxCredit;
              TotalPurchTaxAmount := TotalPurchTaxAmount + TmpPurchTaxAmount;
              TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;

      AmountOnInventory := TotalAmountOnInventory;
      InputTaxCredit := TotalInputTaxCredit;
      PurchTaxAmount := TotalPurchTaxAmount;
      IF PurchLine."Document Type" IN [PurchLine."Document Type"::"Return Order",PurchLine."Document Type"::"Credit Memo"] THEN
        TaxAmounts := -TotalTaxAmounts
      ELSE
        TaxAmounts := TotalTaxAmounts
    END;

    LOCAL PROCEDURE CreateChargeDeferments@1500023(PurchLine@1500000 : Record 39;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;AmountOnInventory@1500011 : Decimal;InputTaxCredit@1500012 : Decimal;PurchTaxAmount@1500013 : Decimal;ItemChargeAssgntPurch@1500018 : Record 5805);
    VAR
      Location@1500002 : Record 14;
      State@1500003 : Record 13762;
      JurisDefermentPeriod@1500004 : Record 16521;
      CompanyInfo@1500015 : Record 79;
      NoOfDefferments@1500006 : Integer;
      LastPostingDate@1500007 : Date;
      LoopCounter@1500008 : Integer;
      DefferPostingDate@1500009 : Date;
      DefferementNo@1500010 : Integer;
      TaxBaseAmtPerUnitofInvoice@1500016 : Decimal;
      Counter@1500017 : Integer;
    BEGIN
      GetPurchaseHeader(PurchLine);
      IF PurchHeader."Location Code" <> '' THEN BEGIN
        Location.GET(PurchHeader."Location Code");
        Location.TESTFIELD("State Code");
        State.GET(Location."State Code");
      END ELSE BEGIN
        CompanyInfo.GET;
        CompanyInfo.TESTFIELD(State);
        State.GET(CompanyInfo.State);
      END;

      TaxBaseAmtPerUnitofInvoice := 0;
      IF PurchLine."Qty. to Invoice (Base)" <> 0 THEN
        TaxBaseAmtPerUnitofInvoice := PurchLine."Tax Base Amount" / PurchLine."Qty. to Invoice (Base)";

      JurisDefermentPeriod.RESET;
      JurisDefermentPeriod.SETCURRENTKEY("State Code","Effective Date","Line No.");
      JurisDefermentPeriod.SETRANGE("State Code",State.Code);
      JurisDefermentPeriod.SETFILTER("Effective Date",'<=%1',PurchHeader."Document Date");
      JurisDefermentPeriod.SETFILTER("Starting Threshold Amount",'<=%1',TaxBaseAmtPerUnitofInvoice);
      JurisDefermentPeriod.SETFILTER("Closing Threshold Amount",'>=%1',TaxBaseAmtPerUnitofInvoice);
      IF JurisDefermentPeriod.FINDLAST THEN BEGIN
        Counter := 0;
        NoOfDefferments := JurisDefermentPeriod."No. of Deferments" + 1;
        LastPostingDate := PurchHeader."Posting Date";
        FOR LoopCounter := 1 TO NoOfDefferments DO BEGIN
          IF LoopCounter = 1 THEN BEGIN
            LastPostingDate := PurchHeader."Posting Date";
            DefferPostingDate := LastPostingDate;
          END ELSE BEGIN
            LastPostingDate := DefferPostingDate;
            Counter += 1;
            DefferPostingDate := GetDefrPostingDate(State,LastPostingDate,Counter = 1)
          END;
          DefferementNo := LoopCounter - 1;
          InsertChargeDefermentBuffer(PurchLine,
            DefferPostingDate,State."Tax Period",NoOfDefferments,
            DefferementNo,TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,TaxAmount,AmountOnInventory,InputTaxCredit,PurchTaxAmount,
            ItemChargeAssgntPurch);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertChargeDefermentBuffer@1500021(PurchLine@1500003 : Record 39;PostingDate@1500004 : Date;TaxPeriod@1500009 : DateFormula;NoOfDeferments@1500006 : Integer;DefermentNo@1500011 : Integer;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;AmountLoadedOnItem@1500000 : Decimal;InputTaxCredit@1500001 : Decimal;PurchTaxAmount@1500002 : Decimal;ItemChargeAssgntPurch@1500014 : Record 5805);
    VAR
      DefermentBuffer@1500008 : Record 16532;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH PurchLine DO BEGIN
        IF DefermentBuffer.FINDLAST THEN
          NextEntryNo := DefermentBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          Sign := -1
        ELSE
          Sign := 1;

        DefermentBuffer.INIT;
        DefermentBuffer."Document No." := "Document No.";
        DefermentBuffer."Line No." := "Line No.";
        DefermentBuffer."Entry No." := NextEntryNo;
        DefermentBuffer."Document Type" := DefermentBuffer."Document Type"::Order;
        DefermentBuffer."Document No." := "Document No.";
        DefermentBuffer."Posting Date" := PostingDate;
        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN
          DefermentBuffer.Type := Type::Item
        ELSE
          DefermentBuffer.Type := Type;
        IF Type = Type::"Charge (Item)" THEN
          DefermentBuffer."No." := ItemChargeAssgntPurch."Item No."
        ELSE
          DefermentBuffer."No." := "No.";
        DefermentBuffer."Tax Period" := TaxPeriod;
        DefermentBuffer."Source Type" := DefermentBuffer."Source Type"::Vendor;
        DefermentBuffer."Source No." := "Buy-from Vendor No.";
        DefermentBuffer."Non ITC Claimable Usage %" := "Non ITC Claimable Usage %";
        DefermentBuffer."Location Code" := "Location Code";
        DefermentBuffer.Quantity := Quantity;
        DefermentBuffer."VAT %" := TaxDetail."Tax Below Maximum";
        DefermentBuffer."Product Type" := DefermentBuffer."Product Type"::"Capital Goods";
        DefermentBuffer.Deferment := TRUE;
        DefermentBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DefermentBuffer."Input Credit/Output Tax Amount" := ROUND(InputTaxCredit / NoOfDeferments);
        IF DefermentNo + 1 = NoOfDeferments THEN BEGIN
          IF InputTaxCredit <> (DefermentBuffer."Input Credit/Output Tax Amount" * NoOfDeferments) THEN
            DefermentBuffer."Input Credit/Output Tax Amount" := DefermentBuffer."Input Credit/Output Tax Amount" +
              InputTaxCredit - (DefermentBuffer."Input Credit/Output Tax Amount" * NoOfDeferments);
        END;
        DefermentBuffer."Deferment No." := DefermentNo;

        IF DefermentNo = 0 THEN BEGIN
          DefermentBuffer."Amount Loaded on Item" := AmountLoadedOnItem;
          DefermentBuffer."VAT Base Amount" := Sign * TaxBaseAmount;
          DefermentBuffer."VAT Amount" := Sign * TaxAmount;
        END;
        DefermentBuffer."Item Charge Assgn. Line No." := ItemChargeAssgntPurch."Line No.";
        DefermentBuffer.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateChargeDtldTaxEntryBuffer@1500027(PurchLine@1500000 : Record 39;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;AmountOnInventory@1500011 : Decimal;InputTaxCredit@1500012 : Decimal;PurchTaxAmount@1500013 : Decimal;InputTaxCreditApplicable@1500004 : Boolean;ItemChargeAssgntPurch@1500006 : Record 5805);
    BEGIN
      GetPurchaseHeader(PurchLine);

      InsertChargeDtldTaxEntryBuffer(PurchLine,
        PurchHeader."Posting Date",TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
        TaxAmount,AmountOnInventory,InputTaxCredit,PurchTaxAmount,InputTaxCreditApplicable,ItemChargeAssgntPurch);
    END;

    LOCAL PROCEDURE InsertChargeDtldTaxEntryBuffer@1500025(PurchLine@1500003 : Record 39;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;AmountLoadedOnItem@1500000 : Decimal;InputTaxCredit@1500001 : Decimal;PurchTaxAmount@1500002 : Decimal;InputTaxCreditApplicable@1500011 : Boolean;ItemChargeAssgntPurch@1500014 : Record 5805);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH PurchLine DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
          Sign := -1
        ELSE
          Sign := 1;

        TaxJurisdiction.GET(TaxJurisdictionCode);
        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Purchase;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN
          DetailedTaxEntryBuffer.Type := Type::Item
        ELSE
          DetailedTaxEntryBuffer.Type := Type;
        IF Type = Type::"Charge (Item)" THEN
          DetailedTaxEntryBuffer."No." := ItemChargeAssgntPurch."Item No."
        ELSE
          DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Vendor;
        DetailedTaxEntryBuffer."Source No." := "Buy-from Vendor No.";
        DetailedTaxEntryBuffer."Non ITC Claimable Usage %" := "Non ITC Claimable Usage %";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := ItemChargeAssgntPurch."Qty. to Assign";
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Purchase Tax %" := TaxDetail."VAT able Purch. Tax %";
        IF InputTaxCreditApplicable THEN
          DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          CASE Type OF
            Type::Item,Type::"Charge (Item)",Type::"G/L Account":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
            Type::"Fixed Asset":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods";
          END
          ;
        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := TaxBaseAmount;
        DetailedTaxEntryBuffer."Tax Amount" := TaxAmount;
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := Sign * ROUND(InputTaxCredit);
        DetailedTaxEntryBuffer."Amount Loaded on Item" := Sign * AmountLoadedOnItem;
        DetailedTaxEntryBuffer."Item Charge Assgn. Line No." := ItemChargeAssgntPurch."Line No.";
        DetailedTaxEntryBuffer."Purchase Tax Amount" := Sign * PurchTaxAmount;
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE GetItemChargeStdDedAmt@1500024(SalesLine@1500001 : Record 37;VAR StandardDeductionAmt@1500003 : Decimal;VAR TaxAmounts@1500019 : Decimal;ItemChargeAssgntSale@1500005 : Record 5809);
    VAR
      TaxBuffer@1500013 : Record 13766;
      Item@1500014 : Record 27;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpStandardDeductionAmt@1500008 : Decimal;
      TotalStandardDeductionAmt@1500011 : Decimal;
      CapitalGood@1500015 : Boolean;
      DetailedTaxEntryBuffer@1500017 : Record 16480;
      TotalTaxAmounts@1500020 : Decimal;
      NetTaxAmount@1500004 : Decimal;
      Factor@1500006 : Decimal;
    BEGIN
      GetSalesHeader(SalesLine);

      IF SalesHeader."Export or Deemed Export" OR SalesHeader."VAT Exempted" THEN
        EXIT;

      WITH SalesLine DO BEGIN
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;
            Factor := 0;
            CALCFIELDS("Qty. to Assign");
            IF "Line Amount" <> 0 THEN
              IF "Qty. to Assign" <> 0 THEN
                Factor := ItemChargeAssgntSale."Qty. to Assign" / "Qty. to Assign";

            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            IF NOT TaxJurisdiction."Forms Not Applicable" THEN
              TaxDetail.SETRANGE("Form Code","Form Code")
            ELSE
              TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
            IF SalesHeader."Posting Date" = 0D THEN
              TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
            ELSE
              TaxDetail.SETFILTER("Effective Date",'<=%1',SalesHeader."Posting Date");
            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN BEGIN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  TaxBaseAmount := TaxBaseAmount - "Tax Base Amount" * Factor;
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  TaxBaseAmount := TaxBaseAmount + "Tax Base Amount" * Factor;
              END;
              IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
                TaxBaseAmount := TaxBaseAmount +
                  EvaluateExpressionStdDeduction(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",TaxBuffer,TaxAreaLine);

              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;


              NetTaxAmount :=
                ROUND((TaxBaseAmount -
                       TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) *
                  TaxDetail."Tax Below Maximum" / 100);

              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                 (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
              THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := ROUND(TaxAmount);
              END;

              IF TaxDetail."Standard Deduction %" <> 0 THEN
                TmpStandardDeductionAmt := TaxAmount - NetTaxAmount
              ELSE
                TmpStandardDeductionAmt := 0;

              TotalTaxAmount := TotalTaxAmount + TaxAmount;

              CASE Type OF
                Type::Item:
                  BEGIN
                    Item.GET("No.");
                    IF Item."Fixed Asset" AND TaxDetail."Capital Goods" THEN
                      CapitalGood := TRUE;
                  END;
                Type::"Fixed Asset":
                  IF TaxDetail."Capital Goods" THEN
                    CapitalGood := TRUE;
              END;

              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              TaxBuffer."Standard Deduction Amount" := ROUND(TmpStandardDeductionAmt);
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.SETRANGE("Item Charge Assgn. Line No.",ItemChargeAssgntSale."Line No.");
              DetailedTaxEntryBuffer.DELETEALL;

              IF TaxAmount <> 0 THEN
                CreateItemChargeDtldTaxBuffer(SalesLine,TaxBaseAmount,
                  TaxAmount,TmpStandardDeductionAmt,NetTaxAmount,CapitalGood,ItemChargeAssgntSale);

              TotalStandardDeductionAmt := TotalStandardDeductionAmt + TmpStandardDeductionAmt;
              TotalTaxAmounts := TotalTaxAmounts + TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;
      StandardDeductionAmt := ABS(TotalStandardDeductionAmt);
      IF SalesLine."Document Type" IN [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"] THEN
        TaxAmounts := TotalTaxAmounts
      ELSE
        TaxAmounts := -TotalTaxAmounts
    END;

    LOCAL PROCEDURE CreateItemChargeDtldTaxBuffer@1500041(SalesLine@1500000 : Record 37;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;StandardDeductionAmt@1500011 : Decimal;NetTaxAmount@1500006 : Decimal;InputTaxCreditApplicable@1500004 : Boolean;ItemChargeAssgntSale@1500007 : Record 5809);
    BEGIN
      GetSalesHeader(SalesLine);

      InsertItemChargeDtldTaxBuffer(SalesLine,
        SalesHeader."Posting Date",TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
        TaxAmount,StandardDeductionAmt,NetTaxAmount,InputTaxCreditApplicable,ItemChargeAssgntSale);
    END;

    LOCAL PROCEDURE InsertItemChargeDtldTaxBuffer@1500044(SalesLine@1500003 : Record 37;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;StandardDeductionAmt@1500000 : Decimal;NetTaxAmount@1500001 : Decimal;InputTaxCreditApplicable@1500011 : Boolean;ItemChargeAssgntSale@1500002 : Record 5809);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      Sign@1500005 : Integer;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH SalesLine DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
          Sign := 1
        ELSE
          Sign := -1;

        TaxJurisdiction.GET(TaxJurisdictionCode);
        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Sale;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        IF Type IN [Type::Item,Type::"Charge (Item)"] THEN
          DetailedTaxEntryBuffer.Type := Type::Item
        ELSE
          DetailedTaxEntryBuffer.Type := Type;
        IF Type = Type::"Charge (Item)" THEN
          DetailedTaxEntryBuffer."No." := ItemChargeAssgntSale."Item No."
        ELSE
          DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Customer;
        DetailedTaxEntryBuffer."Source No." := "Sell-to Customer No.";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := ItemChargeAssgntSale."Qty. to Assign";
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Standard Deduction %" := TaxDetail."Standard Deduction %";
        IF InputTaxCreditApplicable THEN
          DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          CASE Type OF
            Type::Item,Type::"Charge (Item)",Type::"G/L Account":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
            Type::"Fixed Asset":
              DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::"Capital Goods";
          END
          ;
        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := TaxBaseAmount;
        DetailedTaxEntryBuffer."Gross Tax Amount" := TaxAmount;
        DetailedTaxEntryBuffer."Standard Deduction Amount" := StandardDeductionAmt;
        DetailedTaxEntryBuffer."Tax Amount" := NetTaxAmount;
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := NetTaxAmount;
        DetailedTaxEntryBuffer."Item Charge Assgn. Line No." := ItemChargeAssgntSale."Line No.";
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE GetStandardDeductionAmtService@1500031(ServLine@1500001 : Record 5902;VAR StandardDeductionAmt@1500003 : Decimal;VAR TaxAmounts@1500019 : Decimal);
    VAR
      TaxBuffer@1500013 : Record 13766;
      DetailedTaxEntryBuffer@1000000000 : Record 16480;
      TaxBaseAmount@1500012 : Decimal;
      TaxAmount@1500018 : Decimal;
      TotalTaxAmount@1500000 : Decimal;
      TmpStandardDeductionAmt@1500008 : Decimal;
      TotalStandardDeductionAmt@1500011 : Decimal;
      TotalTaxAmounts@1500020 : Decimal;
      NetTaxAmount@1500004 : Decimal;
      TaxType@1500002 : Text[30];
    BEGIN
      GetServHeader(ServLine);

      IF ServHeader."Export or Deemed Export" OR ServHeader."VAT Exempted" THEN
        EXIT;

      WITH ServLine DO BEGIN
        DetailedTaxEntryBuffer.RESET;
        DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
        DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedTaxEntryBuffer.DELETEALL;

        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16502,TaxType,TaxAreaLine."Tax Jurisdiction Code");

            TotalTaxAmount := 0;
            TaxAmount := 0;
            TaxBaseAmount := 0;

            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            IF NOT TaxJurisdiction."Forms Not Applicable" THEN
              TaxDetail.SETRANGE("Form Code","Form Code")
            ELSE
              TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
            IF SalesHeader."Posting Date" = 0D THEN
              TaxDetail.SETRANGE("Effective Date",0D,WORKDATE)
            ELSE
              TaxDetail.SETRANGE("Effective Date",0D,SalesHeader."Posting Date");

            IF TaxDetail.FINDLAST THEN BEGIN
              IF TaxAreaLine.Formula <> '' THEN
                TaxBaseAmount := EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
              IF TaxAreaLine."Include Tax Base" THEN BEGIN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
                  TaxBaseAmount -= "Tax Base Amount";
                IF "Document Type" = "Document Type"::"Credit Memo" THEN
                  TaxBaseAmount += "Tax Base Amount";
              END;
              IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
                TaxBaseAmount +=
                  EvaluateExpressionStdDeduction(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",TaxBuffer,TaxAreaLine);

              TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;

              NetTaxAmount :=
                RoundVATPrecision(
                  (TaxBaseAmount - TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) * TaxDetail."Tax Below Maximum" / 100);

              IF TaxJurisdiction."Tax Type" IN [TaxJurisdiction."Tax Type"::VAT,TaxJurisdiction."Tax Type"::CST] THEN BEGIN
                IF ForeignCurrency THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  TaxAmount := RoundVATPrecision(TaxAmount);
              END;

              IF TaxDetail."Standard Deduction %" <> 0 THEN
                TmpStandardDeductionAmt := TaxAmount - NetTaxAmount
              ELSE
                TmpStandardDeductionAmt := 0;

              TotalTaxAmount += TaxAmount;

              TaxBuffer.LOCKTABLE;
              TaxBuffer.INIT;
              TaxBuffer."Tax Area" := TaxAreaLine."Tax Area";
              TaxBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              TaxBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
              TaxBuffer.Amount := ROUND(TaxAmount);
              TaxBuffer."Standard Deduction Amount" := ROUND(TmpStandardDeductionAmt);
              TaxBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
              IF NOT TaxBuffer.INSERT THEN
                TaxBuffer.MODIFY;

              DetailedTaxEntryBuffer.RESET;
              DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
              DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
              DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
              DetailedTaxEntryBuffer.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              DetailedTaxEntryBuffer.DELETEALL;

              CreateServDtldTaxEntryBuffer(
                ServLine,TaxBaseAmount,
                TaxAmount,TmpStandardDeductionAmt,NetTaxAmount);

              TotalStandardDeductionAmt += TmpStandardDeductionAmt;
              TotalTaxAmounts += TotalTaxAmount;
            END;
          UNTIL TaxAreaLine.NEXT = 0;
      END;
      IF ServLine."Document Type" = ServLine."Document Type"::"Credit Memo" THEN BEGIN
        TaxAmounts := TotalTaxAmounts;
        StandardDeductionAmt := TotalStandardDeductionAmt;
      END ELSE BEGIN
        TaxAmounts := -TotalTaxAmounts;
        StandardDeductionAmt := -TotalStandardDeductionAmt;
      END
    END;

    LOCAL PROCEDURE GetServHeader@1500033(ServLine@1500000 : Record 5902);
    BEGIN
      IF (ServHeader."Document Type" <> ServLine."Document Type") OR
         (ServHeader."No." <> ServLine."Document No.")
      THEN
        ServHeader.GET(ServLine."Document Type",ServLine."Document No.");
    END;

    LOCAL PROCEDURE CreateServDtldTaxEntryBuffer@1500034(ServLine@1500000 : Record 5902;TaxBaseAmount@1500005 : Decimal;TaxAmount@1500014 : Decimal;StandardDeductionAmt@1500011 : Decimal;NetTaxAmount@1500006 : Decimal);
    BEGIN
      GetServHeader(ServLine);

      InsertServDtldTaxEntryBuffer(
        ServLine,
        ServHeader."Posting Date",TaxDetail."Tax Jurisdiction Code",TaxBaseAmount,
        TaxAmount,StandardDeductionAmt,NetTaxAmount);
    END;

    LOCAL PROCEDURE InsertServDtldTaxEntryBuffer@1500036(ServLine@1500003 : Record 5902;PostingDate@1500004 : Date;TaxJurisdictionCode@1500010 : Code[10];TaxBaseAmount@1500012 : Decimal;TaxAmount@1500013 : Decimal;StandardDeductionAmt@1500000 : Decimal;NetTaxAmount@1500001 : Decimal);
    VAR
      DetailedTaxEntryBuffer@1500008 : Record 16480;
      TaxJurisdiction@1500006 : Record 320;
      NextEntryNo@1500007 : Integer;
    BEGIN
      WITH ServLine DO BEGIN
        IF DetailedTaxEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedTaxEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        TaxJurisdiction.GET(TaxJurisdictionCode);
        DetailedTaxEntryBuffer.INIT;
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Line No." := "Line No.";
        DetailedTaxEntryBuffer."Entry No." := NextEntryNo;
        DetailedTaxEntryBuffer."Document Type" := "Document Type";
        DetailedTaxEntryBuffer."Document No." := "Document No.";
        DetailedTaxEntryBuffer."Transaction Type" := DetailedTaxEntryBuffer."Transaction Type"::Sale;
        DetailedTaxEntryBuffer."Posting Date" := PostingDate;
        CASE Type OF
          Type::Item:
            DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::Item;
          Type::Resource:
            DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::Resource;
          Type::Cost,Type::"G/L Account":
            DetailedTaxEntryBuffer.Type := DetailedTaxEntryBuffer.Type::"G/L Account";
        END;

        DetailedTaxEntryBuffer."No." := "No.";
        DetailedTaxEntryBuffer."Source Type" := DetailedTaxEntryBuffer."Source Type"::Customer;
        DetailedTaxEntryBuffer."Source No." := "Customer No.";
        DetailedTaxEntryBuffer."Location Code" := "Location Code";
        DetailedTaxEntryBuffer.Quantity := Quantity;
        DetailedTaxEntryBuffer."Tax %" := TaxDetail."Tax Below Maximum";
        DetailedTaxEntryBuffer."Standard Deduction %" := TaxDetail."Standard Deduction %";
        DetailedTaxEntryBuffer."Product Type" := DetailedTaxEntryBuffer."Product Type"::Item;
        DetailedTaxEntryBuffer."Tax Jurisdiction Code" := TaxJurisdictionCode;
        DetailedTaxEntryBuffer."Tax Component" := TaxJurisdiction."Tax Component";
        DetailedTaxEntryBuffer."Tax Base Amount" := TaxBaseAmount;
        DetailedTaxEntryBuffer."Gross Tax Amount" := TaxAmount;
        DetailedTaxEntryBuffer."Standard Deduction Amount" := StandardDeductionAmt;
        DetailedTaxEntryBuffer."Tax Amount" := NetTaxAmount;
        DetailedTaxEntryBuffer."Input Credit/Output Tax Amount" := NetTaxAmount;
        DetailedTaxEntryBuffer.INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

