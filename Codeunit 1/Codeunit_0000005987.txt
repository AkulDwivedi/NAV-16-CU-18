OBJECT Codeunit 5987 Serv-Posting Journals Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    Permissions=TableData 49=imd,
                TableData 356=imd,
                TableData 357=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServiceHeader@1002 : Record 5900;
      Currency@1018 : Record 4;
      CurrExchRate@1012 : Record 330;
      SalesSetup@1013 : Record 311;
      TempValueEntryRelation@1011 : TEMPORARY Record 6508;
      ServITRMgt@1001 : Codeunit 5985;
      GenJnlPostLine@1004 : Codeunit 12;
      ItemJnlPostLine@1000 : Codeunit 22;
      ResJnlPostLine@1005 : Codeunit 212;
      ServLedgEntryPostSale@1025 : Codeunit 5912;
      TimeSheetMgt@1010 : Codeunit 950;
      GSTManagement@1500006 : Codeunit 16401;
      GenJnlLineDocNo@1016 : Code[20];
      GenJnlLineExtDocNo@1006 : Code[20];
      SrcCode@1003 : Code[10];
      Ship@1007 : Boolean;
      Consume@1008 : Boolean;
      Invoice@1009 : Boolean;
      ItemJnlRollRndg@1015 : Boolean;
      ServiceLinePostingDate@1020 : Date;
      AmountToCustomer@1500003 : Decimal;
      AmountToCustomerLCY@1500002 : Decimal;
      Text16500@1500001 : TextConst 'ENU="Please uncheck the Input Service Distributor field in the %1 Location. ";ENN="Please uncheck the Input Service Distributor field in the %1 Location. "';
      Text16501@1500000 : TextConst 'ENU=Please uncheck the Input Service Distributor field in the Company Information.;ENN=Please uncheck the Input Service Distributor field in the Company Information.';
      NextTransactionNo@1500004 : Integer;
      DocTransactionType@1500005 : 'Purchase,Sales,Transfer,Service';
      GSTJurisdictionType@1500007 : 'Intrastate,Interstate';

    PROCEDURE Initialize@9(VAR TempServHeader@1000 : Record 5900;TmpShip@1002 : Boolean;TmpConsume@1003 : Boolean;TmpInvoice@1004 : Boolean);
    VAR
      SrcCodeSetup@1001 : Record 242;
    BEGIN
      ServiceHeader := TempServHeader;
      SetPostingOptions(TmpShip,TmpConsume,TmpInvoice);
      SrcCodeSetup.GET;
      SalesSetup.GET;
      SrcCode := SrcCodeSetup."Service Management";
      GetCurrency(ServiceHeader."Currency Code",Currency);
      ItemJnlRollRndg := FALSE;
      GenJnlLineDocNo := '';
      GenJnlLineExtDocNo := '';
    END;

    PROCEDURE Finalize@7();
    BEGIN
      CLEAR(GenJnlPostLine);
      CLEAR(ResJnlPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(ServLedgEntryPostSale);
    END;

    PROCEDURE SetPostingOptions@23(PassedShip@1000 : Boolean;PassedConsume@1001 : Boolean;PassedInvoice@1002 : Boolean);
    BEGIN
      Ship := PassedShip;
      Consume := PassedConsume;
      Invoice := PassedInvoice;
    END;

    PROCEDURE SetItemJnlRollRndg@12(PassedItemJnlRollRndg@1000 : Boolean);
    BEGIN
      ItemJnlRollRndg := PassedItemJnlRollRndg;
    END;

    PROCEDURE SetGenJnlLineDocNos@21(DocType@1000 : Integer;DocNo@1001 : Code[20];ExtDocNo@1002 : Code[20]);
    BEGIN
      GenJnlLineDocNo := DocNo;
      GenJnlLineExtDocNo := ExtDocNo;
    END;

    LOCAL PROCEDURE IsWarehouseShipment@29() : Boolean;
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",1);
        SETRANGE("Source No.",ServiceHeader."No.");
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE GetCurrency@46(CurrencyCode@1000 : Code[10];VAR Currency@1001 : Record 4);
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10];VAR Location@1001 : Record 14);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE PostItemJnlLine@10(VAR ServiceLine@1000 : Record 5902;QtyToBeShipped@1001 : Decimal;QtyToBeShippedBase@1002 : Decimal;QtyToBeConsumed@1016 : Decimal;QtyToBeConsumedBase@1017 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;VAR TrackingSpecification@1009 : Record 336;VAR TempTrackingSpecificationInv@1024 : Record 336;VAR TempHandlingSpecification@1023 : Record 336;VAR TempTrackingSpecification@1008 : TEMPORARY Record 336;VAR ServShptHeader@1006 : Record 5990;ServShptLineDocNo@1022 : Code[20]) : Integer;
    VAR
      ItemJnlLine@1014 : Record 83;
      Location@1013 : Record 14;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseJnlLine2@1011 : TEMPORARY Record 7311;
      ExcisePostingSetup@1500001 : Record 13711;
      TypeofDisposal@1500000 : Record 16565;
      WhseJnlPostLine@1018 : Codeunit 7301;
      RemAmt@1021 : Decimal;
      RemDiscAmt@1019 : Decimal;
      PostWhseJnlLine@1010 : Boolean;
      CheckApplFromItemEntry@1020 : Boolean;
    BEGIN
      CLEAR(ItemJnlPostLine);
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH ServiceLine DO BEGIN
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETFILTER("From Date",'<=%1',ServiceHeader."Posting Date");
        IF ExcisePostingSetup.FINDLAST THEN;
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := "Posting Date";
        ItemJnlLine."Document Date" := ServiceHeader."Document Date";
        ItemJnlLine."Source Posting Group" := ServiceHeader."Customer Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := ServiceHeader."Salesperson Code";
        ItemJnlLine."Country/Region Code" := ServiceHeader."VAT Country/Region Code";
        ItemJnlLine."Reason Code" := ServiceHeader."Reason Code";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Entry/Exit Point" := "Exit Point";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Derived from Blanket Order" := FALSE;
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine.Nonstock := Nonstock;
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";
        ItemJnlLine."Order Date" := ServiceHeader."Order Date";
        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";
        ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Service;
        ItemJnlLine."Order No." := "Document No.";
        ItemJnlLine."Order Line No." := "Line No.";
        ItemJnlLine."Job No." := "Job No.";
        ItemJnlLine."Job Task No." := "Job Task No.";
        ItemJnlLine."Assessable Value" := QtyToBeShippedBase * "Assessable Value";
        ItemJnlLine."BED Amount" := "BED Amount";
        ItemJnlLine."BED %" := ExcisePostingSetup."BED %";
        ItemJnlLine."Other Duties Amount" :=
          "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "AED(TTA) Amount" + "NCCD Amount" + "CESS Amount" +
          "ADE Amount" + "ADET Amount" + "eCess Amount" + "ADC VAT Amount" + "SHE Cess Amount";

        IF QtyToBeShipped = 0 THEN BEGIN
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Invoice";
          IF QtyToBeConsumed <> 0 THEN BEGIN
            ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
            ItemJnlLine."Document No." := ServShptLineDocNo;
            ItemJnlLine."External Document No." := '';
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Shipment";
          END ELSE BEGIN
            ItemJnlLine."Document No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          END;
          ItemJnlLine."Posting No. Series" := ServiceHeader."Posting No. Series";
        END ELSE BEGIN
          IF "Document Type" <> "Document Type"::"Credit Memo" THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Shipment";
            ItemJnlLine."Document No." := ServShptHeader."No.";
            ItemJnlLine."Posting No. Series" := ServShptHeader."No. Series";
          END;
          IF (QtyToBeInvoiced <> 0) OR (QtyToBeConsumed <> 0) THEN BEGIN
            IF QtyToBeConsumed <> 0 THEN
              ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := ServiceHeader."Posting No. Series";
          END;
          IF (QtyToBeConsumed <> 0) AND (ItemJnlLine."Document No." = '') THEN
            ItemJnlLine."Document No." := ServShptLineDocNo;
        END;

        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := -QtyToBeShipped;
        ItemJnlLine."Quantity (Base)" := -QtyToBeShippedBase;
        IF QtyToBeInvoiced <> 0 THEN BEGIN
          ItemJnlLine."Invoiced Quantity" := -QtyToBeInvoiced;
          ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeInvoicedBase;
        END ELSE
          IF QtyToBeConsumed <> 0 THEN BEGIN
            ItemJnlLine."Invoiced Quantity" := -QtyToBeConsumed;
            ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeConsumedBase;
          END;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Source Currency Code" := ServiceHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
        IF (("Document Type" = "Document Type"::Order) OR
            ("Document Type" = "Document Type"::Invoice))
        THEN BEGIN
          TypeofDisposal.SETRANGE(Type,TypeofDisposal.Type::Sale);
          IF TypeofDisposal.FINDFIRST THEN BEGIN
            ItemJnlLine."Other Usage" := ItemJnlLine."Other Usage"::Disposal;
            ItemJnlLine."Nature of Disposal" := TypeofDisposal.Code;
            ItemJnlLine."Type of Disposal" := ItemJnlLine."Type of Disposal"::Sale;
          END;
        END;
        ItemJnlLine."Applies-from Entry" := "Appl.-from Item Entry";

        CalculateItemJnlLineExciseAmts(ServiceLine,ItemJnlLine,QtyToBeInvoiced,QtyToBeInvoicedBase,QtyToBeShippedBase);

        IF Invoice AND (QtyToBeInvoiced <> 0) THEN BEGIN
          ItemJnlLine.Amount := -(Amount * (QtyToBeInvoiced / "Qty. to Invoice") - RemAmt);
          IF ServiceHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") / (1 + "VAT %" / 100) *
                (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt)
          ELSE
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") * (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt);
        END ELSE
          IF Consume AND (QtyToBeConsumed <> 0) THEN BEGIN
            ItemJnlLine.Amount := -(Amount * QtyToBeConsumed - RemAmt);
            ItemJnlLine."Discount Amount" :=
              -("Line Discount Amount" * QtyToBeConsumed - RemDiscAmt);
          END;

        IF (QtyToBeInvoiced <> 0) OR (QtyToBeConsumed <> 0) THEN BEGIN
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
        END ELSE BEGIN
          IF ServiceHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - "Line Discount %" / 100) / (1 + "VAT %" / 100)) - RemAmt)
          ELSE
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - "Line Discount %" / 100)) - RemAmt);
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF ServiceHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date",ServiceHeader."Currency Code",
                  ItemJnlLine.Amount,ServiceHeader."Currency Factor"))
          ELSE
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        END;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
        ItemJnlLine."Source No." := "Customer No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;
        ItemJnlLine."Invoice-to Source No." := "Bill-to Customer No.";

        IF SalesSetup."Exact Cost Reversing Mandatory" AND (Type = Type::Item) THEN
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            CheckApplFromItemEntry := Quantity > 0
          ELSE
            CheckApplFromItemEntry := Quantity < 0;

        IF ("Location Code" <> '') AND (Type = Type::Item) AND (ItemJnlLine.Quantity <> 0) THEN BEGIN
          GetLocation("Location Code",Location);
          IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND Location."Directed Put-away and Pick") OR
             (Location."Bin Mandatory" AND NOT IsWarehouseShipment)
          THEN BEGIN
            CreateWhseJnlLine(ItemJnlLine,ServiceLine,TempWhseJnlLine,Location);
            PostWhseJnlLine := TRUE;
          END;
        END;

        IF QtyToBeShippedBase <> 0 THEN
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            ServITRMgt.TransServLineToItemJnlLine(ServiceLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
          ELSE
            ServITRMgt.TransferReservToItemJnlLine(
              ServiceLine,ItemJnlLine,-QtyToBeShippedBase,TempTrackingSpecification,CheckApplFromItemEntry);

        IF CheckApplFromItemEntry THEN
          TESTFIELD("Appl.-from Item Entry");

        ItemJnlPostLine.RunWithCheck(ItemJnlLine);

        ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,'');

        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN
          ServITRMgt.InsertTempHandlngSpecification(DATABASE::"Service Line",
            ServiceLine,TempHandlingSpecification,
            TempTrackingSpecification,TempTrackingSpecificationInv,
            QtyToBeInvoiced <> 0);

        IF PostWhseJnlLine THEN BEGIN
          ServITRMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempTrackingSpecification,FALSE);
          IF TempWhseJnlLine2.FIND('-') THEN
            REPEAT
              WhseJnlPostLine.RUN(TempWhseJnlLine2);
            UNTIL TempWhseJnlLine2.NEXT = 0;
        END;
      END;
      CLEAR(WhseJnlPostLine);
      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;ServLine@1001 : Record 5902;VAR TempWhseJnlLine@1002 : TEMPORARY Record 7311;Location@1005 : Record 14);
    VAR
      WMSMgmt@1004 : Codeunit 7302;
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH ServLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Service Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Code" := SrcCode;
        TempWhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Shipment";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Cr. Memo";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    PROCEDURE PostGenGnlLineSale@2(VAR InvPostingBuffer@1002 : ARRAY [2] OF Record 49;GenJnlLineDocType@1003 : Integer;GenJnlLineDocNo@1004 : Code[20];GenJnlLineExtDocNo@1005 : Code[20]);
    VAR
      GenJnlLine@1000 : Record 81;
      GLSetup@1500000 : Record 98;
    BEGIN
      WITH ServiceHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := ServiceLinePostingDate;
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Sale Return Type" := "Sale Return Type";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
        GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
        GenJnlLine.Amount := InvPostingBuffer[1].Amount;
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)";
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
        GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
        GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
        GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
        GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
        GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
        GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
        GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
        GenJnlLine."Tax Base Amount" := InvPostingBuffer[1]."Tax Base Amount";
        GenJnlLine."Source Curr. Tax Base Amount" := InvPostingBuffer[1]."Src. Curr. Tax Base Amount";
        GenJnlLine."Tax Amount" := InvPostingBuffer[1]."Tax Amount";
        GenJnlLine."Source Curr. Tax Amount" := InvPostingBuffer[1]."Tax Amount (ACY)";
        GenJnlLine."Form Code" := InvPostingBuffer[1]."Form Code";
        GenJnlLine."VAT Type" := InvPostingBuffer[1]."VAT Type";
        GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
        GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
        GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
        GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
        GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
        GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
        GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
        GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
        GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."EU 3-Party Trade" := "EU 3-Party Trade";
        GenJnlLine."Sell-to/Buy-from No." := "Customer No.";
        GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
        GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
        GenJnlLine."VAT Registration No." := "VAT Registration No.";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."Ship-to/Order Address Code" := "Ship-to Code";
        GenJnlLine."Job No." := InvPostingBuffer[1]."Job No.";
        GenJnlLine.Correction := Correction;
        GLSetup.GET;
        GenJnlLine."Location Code" := "Location Code";
        GenJnlLine."Standard Deduction Amount" := InvPostingBuffer[1]."Standard Deduction Amount";
        GenJnlLine."Standard Deduction Amount(ACY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              "Posting Date",
              GLSetup."Additional Reporting Currency",
              InvPostingBuffer[1]."Standard Deduction Amount",
              "Currency Factor"));
      END;

      GenJnlPostLine.RunWithCheck(GenJnlLine);

      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine.VALIDATE("FA Posting Type",GenJnlLine."FA Posting Type"::" ");
    END;

    PROCEDURE PostGenJnlLineReceivable@3(VAR TotalServiceLine@1004 : Record 5902;VAR TotalServiceLineLCY@1005 : Record 5902;GenJnlLineDocType@1003 : Integer;GenJnlLineDocNo@1002 : Code[20];GenJnlLineExtDocNo@1001 : Code[20];SvcTaxPostingBuffer@1500002 : ARRAY [2] OF TEMPORARY Record 16478;SrcCurrChargestoCustomer@1500001 : Decimal;ChargestoCustomer@1500000 : Decimal);
    VAR
      GenJnlLine@1000 : Record 81;
      ServiceLine@1500006 : Record 5902;
      TotalGSTAmount@1500003 : Decimal;
      TotalGSTAmountLCY@1500004 : Decimal;
      RefundAcc@1500005 : Boolean;
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine.VALIDATE("FA Posting Type",GenJnlLine."FA Posting Type"::" ");

      WITH ServiceHeader DO BEGIN
        GenJnlLine."Posting Date" := ServiceLinePostingDate;
        GenJnlPostLine.SetSTPureAgentStatus("ST Pure Agent");
        TotalGSTAmount := 0;
        TotalGSTAmountLCY := 0;
        RefundAcc := FALSE;
        IF "GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
          "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"] THEN
          RefundAcc := TRUE;
        IF NOT (ServiceHeader."GST Without Payment of Duty" OR RefundAcc) THEN BEGIN
          TotalGSTAmount := TotalServiceLine."Total GST Amount";
          IF "Currency Code" <> '' THEN
              TotalGSTAmountLCY := -1 *
                GSTManagement.RoundTotalGSTAmountQtyFactorCurrency(
                  DocTransactionType::Service,
                  "Document Type","No.","Currency Code",
                  "Currency Factor","Posting Date")
            ELSE
              TotalGSTAmountLCY := GSTManagement.RoundGSTPrecision(TotalServiceLine."Total GST Amount");
        END;
        AmountToCustomer :=
          ROUND(
            TotalServiceLine."Line Amount" - TotalServiceLine."Inv. Discount Amount" + TotalServiceLine."Excise Amount" +
            TotalServiceLine."Tax Amount" + TotalServiceLine."Service Tax Amount" + SrcCurrChargestoCustomer +
            TotalServiceLine."Service Tax eCess Amount" + TotalServiceLine."Service Tax SHE Cess Amount" +
            TotalServiceLine."Service Tax SBC Amount" + TotalServiceLine."KK Cess Amount" + TotalGSTAmount);
        AmountToCustomerLCY :=
          ROUND(
            TotalServiceLineLCY."Line Amount" - TotalServiceLineLCY."Inv. Discount Amount" + TotalServiceLineLCY."Excise Amount" +
            TotalServiceLineLCY."Tax Amount" + TotalServiceLineLCY."Service Tax Amount" + ChargestoCustomer +
            TotalServiceLineLCY."Service Tax eCess Amount" + TotalServiceLineLCY."Service Tax SHE Cess Amount" +
            TotalServiceLineLCY."Service Tax SBC Amount" + TotalServiceLineLCY."KK Cess Amount" + TotalGSTAmountLCY);

        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Sale Return Type" := "Sale Return Type";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := "Bill-to Customer No.";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount := -AmountToCustomer;
        GenJnlLine."Source Currency Code" := "Currency Code";
        IF "Transaction No. Serv. Tax" = 0 THEN
          GenJnlLine."Amount (LCY)" := -AmountToCustomerLCY
        ELSE
          GenJnlLine."Amount (LCY)" := GetActualAmount(AmountToCustomerLCY);
        IF "Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" := "Currency Factor";

        IF "Free Supply" THEN BEGIN
          GenJnlLine.Amount := 0;
          GenJnlLine."Source Currency Amount" := 0;
          GenJnlLine."Amount (LCY)" := 0;
        END;
        GenJnlLine."Sales/Purch. (LCY)" := -TotalServiceLineLCY.Amount;
        GenJnlLine."Profit (LCY)" := -(TotalServiceLineLCY.Amount - TotalServiceLineLCY."Unit Cost (LCY)");
        GenJnlLine."Inv. Discount (LCY)" := -TotalServiceLineLCY."Inv. Discount Amount";
        GenJnlLine."Sell-to/Buy-from No." := "Customer No.";
        GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
        GenJnlLine."Salespers./Purch. Code" := "Salesperson Code";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Applies-to Doc. Type" := "Applies-to Doc. Type";
        GenJnlLine."Applies-to Doc. No." := "Applies-to Doc. No.";
        GenJnlLine."Applies-to ID" := "Applies-to ID";
        GenJnlLine."Allow Application" := "Bal. Account No." = '';
        GenJnlLine."Allow Application" := TRUE;
        GenJnlLine."Due Date" := "Due Date";
        GenJnlLine."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine."Payment Method Code" := "Payment Method Code";
        GenJnlLine."Pmt. Discount Date" := "Pmt. Discount Date";
        GenJnlLine."Payment Discount %" := "Payment Discount %";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine.Correction := Correction;
        GenJnlLine."Transaction No. Serv. Tax" := "Transaction No. Serv. Tax";
        GenJnlLine."Service Tax Registration No." := SvcTaxPostingBuffer[1]."Service Tax Registration No.";
        GenJnlLine."Service Tax Group Code" := SvcTaxPostingBuffer[1]."Service Tax Group Code";
        GenJnlLine."TDS Certificate Receivable" := "TDS Certificate Receivable";
        GenJnlLine."S.T From Order" := TRUE;
        GenJnlLine.PoT := PoT;
        GenJnlLine."Service Tax Rounding Precision" := "Service Tax Rounding Precision";
        GenJnlLine."Service Tax Rounding Type" := "Service Tax Rounding Type";
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          GenJnlLine."GST Customer Type" := "GST Customer Type";
          GenJnlLine."Location State Code" := "Location State Code";
          GenJnlLine."GST Bill-to/BuyFrom State Code" := "GST Bill-to State Code";

          ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
          ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
          ServiceLine.SETFILTER("Qty. to Invoice",'<>%1',0);
          IF ServiceLine.FINDFIRST THEN BEGIN
            GenJnlLine."GST Jurisdiction Type" := ServiceLine."GST Jurisdiction Type";
            GenJnlLine."GST Place of Supply" := ServiceLine."GST Place Of Supply";
            END;
          GenJnlLine."Location Code" := "Location Code";
        END;
      END;

      GenJnlPostLine.RunWithCheck(GenJnlLine);
      FreeSupply(TotalServiceLine,TotalServiceLineLCY,GenJnlLineDocType);
    END;

    PROCEDURE PostGenJnlLineBalancing@11(VAR TotalServiceLine@1002 : Record 5902;VAR TotalServiceLineLCY@1006 : Record 5902;GenJnlLineDocType@1005 : Integer;GenJnlLineDocNo@1004 : Code[20];GenJnlLineExtDocNo@1003 : Code[20]);
    VAR
      CustLedgEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
    BEGIN
      CustLedgEntry.FINDLAST;
      GenJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        GenJnlLine."Posting Date" := ServiceLinePostingDate;
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := "Bill-to Customer No.";
        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
        ELSE
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
        GenJnlLine."Sale Return Type" := "Sale Return Type";
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
        GenJnlLine."Bal. Account No." := "Bal. Account No.";
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount :=
          AmountToCustomer + CustLedgEntry."Remaining Pmt. Disc. Possible";
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
        CustLedgEntry.CALCFIELDS(Amount);
        IF CustLedgEntry.Amount = 0 THEN
          GenJnlLine."Amount (LCY)" := AmountToCustomerLCY
        ELSE
          GenJnlLine."Amount (LCY)" :=
            AmountToCustomerLCY +
            ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" /
              CustLedgEntry."Adjusted Currency Factor");
        IF "Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" := "Currency Factor";
        GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
        GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine.Correction := Correction;
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;
    END;

    PROCEDURE PostResJnlLineShip@8(VAR ServiceLine@1002 : Record 5902;GenJnlLineDocNo@1003 : Code[20];GenJnlLineExtDocNo@1004 : Code[20]);
    VAR
      ResJnlLine@1000 : Record 207;
      ResJnlPostLine@1001 : Codeunit 212;
    BEGIN
      IF ServiceLine."Time Sheet No." <> '' THEN
        TimeSheetMgt.CheckServiceLine(ServiceLine);
      ResJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        InitResJnlLineFromServiceDoc(ResJnlLine,ServiceHeader,ServiceLine);
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Usage;
        ResJnlLine."Document No." := GenJnlLineDocNo;
        ResJnlLine."External Document No." := GenJnlLineExtDocNo;
        ResJnlLine."Job No." := ServiceLine."Job No.";
        ResJnlLine.Quantity := -ServiceLine."Qty. to Ship";
        ResJnlLine."Unit Cost" := ServiceLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := ServiceLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := ServiceLine.Amount / ServiceLine."Qty. to Ship";
        ResJnlLine."Total Price" := -ServiceLine.Amount;
        ResJnlLine."Posting No. Series" := "Posting No. Series";
        ResJnlPostLine.RunWithCheck(ResJnlLine);
      END;

      TimeSheetMgt.CreateTSLineFromServiceLine(ServiceLine,GenJnlLineDocNo,TRUE);
    END;

    PROCEDURE PostResJnlLineSale@66(VAR ServiceLine@1002 : Record 5902;GenJnlLineDocNo@1003 : Code[20];GenJnlLineExtDocNo@1004 : Code[20]);
    VAR
      ResJnlLine@1000 : Record 207;
      ResJnlPostLine@1001 : Codeunit 212;
    BEGIN
      ResJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        InitResJnlLineFromServiceDoc(ResJnlLine,ServiceHeader,ServiceLine);
        ResJnlLine."Job No." := ServiceLine."Job No.";
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Sale;
        ResJnlLine."Document No." := GenJnlLineDocNo;
        ResJnlLine."External Document No." := GenJnlLineExtDocNo;
        ResJnlLine.Quantity := -ServiceLine."Qty. to Invoice";
        ResJnlLine."Unit Cost" := ServiceLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := ServiceLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := -ServiceLine.Amount / ServiceLine.Quantity;
        ResJnlLine."Total Price" := -ServiceLine.Amount;
        ResJnlLine."Posting No. Series" := "Posting No. Series";
        ResJnlPostLine.RunWithCheck(ResJnlLine);
      END;
    END;

    PROCEDURE PostResJnlLineConsume@22(VAR ServiceLine@1002 : Record 5902;VAR ServShptHeader@1005 : Record 5990);
    VAR
      ResJnlLine@1004 : Record 207;
      ResJnlPostLine@1003 : Codeunit 212;
    BEGIN
      IF ServiceLine."Time Sheet No." <> '' THEN
        TimeSheetMgt.CheckServiceLine(ServiceLine);
      ResJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        InitResJnlLineFromServiceDoc(ResJnlLine,ServiceHeader,ServiceLine);
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Usage;
        ResJnlLine."Document No." := ServShptHeader."No.";
        ResJnlLine.Quantity := -ServiceLine."Qty. to Consume";
        ResJnlLine."Unit Cost" := ServiceLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := ServiceLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := 0;
        ResJnlLine."Total Price" := 0;
        ResJnlLine."Posting No. Series" := ServShptHeader."No. Series";
        ResJnlPostLine.RunWithCheck(ResJnlLine);
      END;

      TimeSheetMgt.CreateTSLineFromServiceLine(ServiceLine,GenJnlLineDocNo,FALSE);
    END;

    PROCEDURE InitServiceRegister@19(VAR NextServLedgerEntryNo@1000 : Integer;VAR NextWarrantyLedgerEntryNo@1001 : Integer);
    BEGIN
      ServLedgEntryPostSale.InitServiceRegister(NextServLedgerEntryNo,NextWarrantyLedgerEntryNo);
    END;

    PROCEDURE FinishServiceRegister@14(VAR nextServEntryNo@1000 : Integer;VAR nextWarrantyEntryNo@1001 : Integer);
    BEGIN
      ServLedgEntryPostSale.FinishServiceRegister(nextServEntryNo,nextWarrantyEntryNo);
    END;

    PROCEDURE InsertServLedgerEntry@6(VAR NextEntryNo@1002 : Integer;VAR ServiceHeader@1006 : Record 5900;VAR ServiceLine@1000 : Record 5902;VAR ServItemLine@1003 : Record 5901;Qty@1001 : Decimal;DocNo@1005 : Code[20]) : Integer;
    BEGIN
      EXIT(
        ServLedgEntryPostSale.InsertServLedgerEntry(NextEntryNo,ServiceHeader,ServiceLine,ServItemLine,Qty,DocNo));
    END;

    PROCEDURE InsertServLedgerEntrySale@16(VAR passedNextEntryNo@1005 : Integer;VAR ServHeader@1004 : Record 5900;VAR ServLine@1003 : Record 5902;VAR ServItemLine@1006 : Record 5901;Qty@1002 : Decimal;QtyToCharge@1001 : Decimal;GenJnlLineDocNo@1000 : Code[20];DocLineNo@1007 : Integer);
    BEGIN
      ServLedgEntryPostSale.InsertServLedgerEntrySale(
        passedNextEntryNo,ServHeader,ServLine,ServItemLine,Qty,QtyToCharge,GenJnlLineDocNo,DocLineNo);
    END;

    PROCEDURE CreateCreditEntry@20(VAR passedNextEntryNo@1003 : Integer;VAR ServHeader@1002 : Record 5900;VAR ServLine@1001 : Record 5902;GenJnlLineDocNo@1000 : Code[20]);
    BEGIN
      ServLedgEntryPostSale.CreateCreditEntry(passedNextEntryNo,ServHeader,ServLine,GenJnlLineDocNo);
    END;

    PROCEDURE InsertWarrantyLedgerEntry@1(VAR NextWarrantyEntryNo@1001 : Integer;VAR ServiceHeader@1002 : Record 5900;VAR ServiceLine@1000 : Record 5902;VAR ServItemLine@1003 : Record 5901;Qty@1006 : Decimal;GenJnlLineDocNo@1005 : Code[20]) : Integer;
    BEGIN
      EXIT(
        ServLedgEntryPostSale.InsertWarrantyLedgerEntry(
          NextWarrantyEntryNo,ServiceHeader,ServiceLine,ServItemLine,Qty,GenJnlLineDocNo));
    END;

    PROCEDURE CalcSLEDivideAmount@18(Qty@1000 : Decimal;VAR passedServHeader@1001 : Record 5900;VAR passedTempServLine@1002 : Record 5902;VAR passedVATAmountLine@1003 : Record 290);
    BEGIN
      ServLedgEntryPostSale.CalcDivideAmount(Qty,passedServHeader,passedTempServLine,passedVATAmountLine);
    END;

    PROCEDURE TestSrvCostDirectPost@13(ServLineNo@1000 : Code[20]);
    VAR
      ServCost@1001 : Record 5905;
      GLAcc@1002 : Record 15;
    BEGIN
      ServCost.GET(ServLineNo);
      GLAcc.GET(ServCost."Account No.");
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE TestGLAccDirectPost@15(ServLineNo@1000 : Code[20]);
    VAR
      GLAcc@1001 : Record 15;
    BEGIN
      GLAcc.GET(ServLineNo);
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE CollectValueEntryRelation@5(VAR PassedValueEntryRelation@1000 : Record 6508;RowId@1001 : Text[100]);
    BEGIN
      TempValueEntryRelation.RESET;
      PassedValueEntryRelation.RESET;

      IF TempValueEntryRelation.FINDSET THEN
        REPEAT
          PassedValueEntryRelation := TempValueEntryRelation;
          PassedValueEntryRelation."Source RowId" := RowId;
          PassedValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;

      TempValueEntryRelation.DELETEALL;
    END;

    PROCEDURE PostJobJnlLine@38(VAR ServHeader@1004 : Record 5900;ServLine@1012 : Record 5902;QtyToBeConsumed@1018 : Decimal;ItemLedgerEntryNo@1002 : Integer) : Boolean;
    VAR
      JobJnlLine@1000 : Record 210;
      SourceCodeSetup@1006 : Record 242;
      ServiceCost@1011 : Record 5905;
      Job@1016 : Record 167;
      JT@1015 : Record 1001;
      Item@1017 : Record 27;
      JobJnlPostLine@1008 : Codeunit 1012;
      CurrencyFactor@1001 : Decimal;
      UnitPriceLCY@1003 : Decimal;
    BEGIN
      WITH ServLine DO BEGIN
        IF ("Job No." = '') OR (QtyToBeConsumed = 0) THEN
          EXIT(FALSE);

        TESTFIELD("Job Task No.");
        Job.LOCKTABLE;
        JT.LOCKTABLE;
        Job.GET("Job No.");
        JT.GET("Job No.","Job Task No.");

        JobJnlLine.INIT;

        JobJnlLine.DontCheckStdCost;

        JobJnlLine.VALIDATE("Job No.","Job No.");
        JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
        JobJnlLine.VALIDATE("Line Type","Job Line Type");
        JobJnlLine.VALIDATE("Posting Date","Posting Date");
        JobJnlLine."Job Posting Only" := TRUE;
        JobJnlLine."No." := "No.";

        CASE Type OF
          Type::"G/L Account":
            JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
          Type::Item:
            JobJnlLine.Type := JobJnlLine.Type::Item;
          Type::Resource:
            JobJnlLine.Type := JobJnlLine.Type::Resource;
          Type::Cost:
            BEGIN
              ServiceCost.SETRANGE(Code,"No.");
              ServiceCost.FINDFIRST;
              JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
              JobJnlLine."No." := ServiceCost."Account No.";
            END;
        END; // Case Type
        JobJnlLine.VALIDATE("No.");
        JobJnlLine.Description := Description;
        JobJnlLine."Description 2" := "Description 2";

        JobJnlLine."Variant Code" := "Variant Code";

        JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        JobJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        JobJnlLine.VALIDATE(Quantity,-QtyToBeConsumed);

        JobJnlLine."Document No." := ServHeader."Shipping No.";
        JobJnlLine."Service Order No." := "Document No.";
        JobJnlLine."External Document No." := ServHeader."Shipping No.";
        JobJnlLine."Posted Service Shipment No." := ServHeader."Shipping No.";

        IF Type = Type::Item THEN BEGIN
          Item.GET("No.");
          IF Item."Costing Method" = Item."Costing Method"::Standard THEN
            JobJnlLine.VALIDATE("Unit Cost (LCY)",Item."Standard Cost")
          ELSE
            JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)")
        END ELSE
          JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");

        IF "Currency Code" = Job."Currency Code" THEN
          JobJnlLine.VALIDATE("Unit Price","Unit Price");
        IF "Currency Code" <> '' THEN BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          CurrencyFactor := CurrExchRate.ExchangeRate("Posting Date","Currency Code");
          UnitPriceLCY :=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Unit Price",CurrencyFactor),
              Currency."Amount Rounding Precision");
          JobJnlLine.VALIDATE("Unit Price (LCY)",UnitPriceLCY);
        END ELSE
          JobJnlLine.VALIDATE("Unit Price (LCY)","Unit Price");

        JobJnlLine.VALIDATE("Line Discount %","Line Discount %");

        JobJnlLine."Job Planning Line No." := "Job Planning Line No.";
        JobJnlLine."Remaining Qty." := "Job Remaining Qty.";
        JobJnlLine."Remaining Qty. (Base)" := "Job Remaining Qty. (Base)";

        JobJnlLine."Location Code" := "Location Code";
        JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;

        JobJnlLine."Posting Group" := "Posting Group";
        JobJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        JobJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        JobJnlLine."Customer Price Group" := "Customer Price Group";

        SourceCodeSetup.GET;
        JobJnlLine."Source Code" := SourceCodeSetup."Service Management";

        JobJnlLine."Work Type Code" := "Work Type Code";

        JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        JobJnlLine."Dimension Set ID" := "Dimension Set ID";
      END;

      JobJnlPostLine.RunWithCheck(JobJnlLine);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitResJnlLineFromServiceDoc@4(VAR ResJnlLine@1001 : Record 207;ServiceHeader@1002 : Record 5900;ServiceLine@1000 : Record 5902);
    BEGIN
      ResJnlLine."Posting Date" := ServiceLine."Posting Date";
      ResJnlLine."Document Date" := ServiceHeader."Document Date";
      ResJnlLine."Reason Code" := ServiceHeader."Reason Code";
      ResJnlLine."Order No." := ServiceHeader."No.";

      ResJnlLine."Order Type" := ResJnlLine."Order Type"::Service;
      ResJnlLine."Order Line No." := ServiceLine."Line No.";
      ResJnlLine."Resource No." := ServiceLine."No.";
      ResJnlLine.Description := ServiceLine.Description;
      ResJnlLine."Work Type Code" := ServiceLine."Work Type Code";
      ResJnlLine."Shortcut Dimension 1 Code" := ServiceLine."Shortcut Dimension 1 Code";
      ResJnlLine."Shortcut Dimension 2 Code" := ServiceLine."Shortcut Dimension 2 Code";
      ResJnlLine."Dimension Set ID" := ServiceLine."Dimension Set ID";
      ResJnlLine."Unit of Measure Code" := ServiceLine."Unit of Measure Code";
      ResJnlLine."Qty. per Unit of Measure" := ServiceLine."Qty. per Unit of Measure";
      ResJnlLine."Source Code" := SrcCode;
      ResJnlLine."Gen. Bus. Posting Group" := ServiceLine."Gen. Bus. Posting Group";
      ResJnlLine."Gen. Prod. Posting Group" := ServiceLine."Gen. Prod. Posting Group";
      ResJnlLine."Source Type" := ResJnlLine."Source Type"::Customer;
      ResJnlLine."Source No." := ServiceLine."Customer No.";
      ResJnlLine."Time Sheet No." := ServiceLine."Time Sheet No.";
      ResJnlLine."Time Sheet Line No." := ServiceLine."Time Sheet Line No.";
      ResJnlLine."Time Sheet Date" := ServiceLine."Time Sheet Date";
    END;

    PROCEDURE SetPostingDate@39(PostingDate@1000 : Date);
    BEGIN
      ServiceLinePostingDate := PostingDate;
    END;

    PROCEDURE PostGenGnlLineExcise@1500000(VAR ExcisePostingBuffer@1500003 : ARRAY [2] OF TEMPORARY Record 13706;VAR ServAmtsMgt@1000000000 : Codeunit 5986;ServHeader@1500002 : Record 5900;GenJnlLineDocType@1500001 : Integer;GenJnlLineDocNo@1500000 : Code[20]);
    VAR
      GenJnlLine@1500005 : Record 81;
      TaxJnlLine@1500004 : Record 16587;
    BEGIN
      WITH ServHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Sale Return Type" := "Sale Return Type";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Account No." := ExcisePostingBuffer[1]."Item No.";
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Item No." := ExcisePostingBuffer[1]."Item No.";
        GenJnlLine."System-Created Entry" := ExcisePostingBuffer[1]."System-Created Entry";

        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
          IF "Sale Return Type" <> "Sale Return Type"::"Sales Cancellation" THEN
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase
          ELSE
            GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
        END ELSE
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;

        IF ExcisePostingBuffer[1].Type = ExcisePostingBuffer[1].Type::"Fixed Asset" THEN
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset"
        ELSE
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        IF ExcisePostingBuffer[1].Type = ExcisePostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";
          GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Disposal;
          GenJnlLine."FA Posting Date" := ExcisePostingBuffer[1]."FA Posting Date";
          GenJnlLine."Depreciation Book Code" := ExcisePostingBuffer[1]."Depreciation Book Code";
          GenJnlLine."Depr. until FA Posting Date" := ExcisePostingBuffer[1]."Depr. until FA Posting Date";
          GenJnlLine."Duplicate in Depreciation Book" := ExcisePostingBuffer[1]."Duplicate in Depreciation Book";
          GenJnlLine."Use Duplication List" := ExcisePostingBuffer[1]."Use Duplication List";
        END;
        GenJnlLine."Excise Bus. Posting Group" := ExcisePostingBuffer[1]."Excise Bus. Posting Group";
        GenJnlLine."Excise Prod. Posting Group" := ExcisePostingBuffer[1]."Excise Prod. Posting Group";
        GenJnlLine."E.C.C. No." := ExcisePostingBuffer[1]."E.C.C. No.";
        GenJnlLine."Excise Base Amount" := ExcisePostingBuffer[1]."Excise Base Amount";
        GenJnlLine."BED %" := ExcisePostingBuffer[1]."BED %";
        GenJnlLine."Amount Including Excise" := ExcisePostingBuffer[1]."Amount Including Excise";
        GenJnlLine."Excise Amount" := ExcisePostingBuffer[1]."Excise Amount";
        GenJnlLine."Source Curr. Excise Amount" := ExcisePostingBuffer[1]."Excise Amount (ACY)";
        GenJnlLine.Correction := Correction;

        TaxJnlLine.RESET;
        TaxJnlLine.SETRANGE("Journal Template Name",'');
        TaxJnlLine.SETRANGE("Journal Batch Name",'');
        TaxJnlLine.SETRANGE("Document No.",GenJnlLine."Document No.");
        IF NOT TaxJnlLine.FINDFIRST THEN BEGIN
          TaxJnlLine."Journal Template Name" := '';
          TaxJnlLine."Journal Batch Name" := '';
          TaxJnlLine."Line No." := 0;
          TaxJnlLine."Document No." := GenJnlLine."Document No.";
          TaxJnlLine.INSERT;
        END;

        TaxJnlLine."BED Amount" := ExcisePostingBuffer[1]."BED Amount";
        TaxJnlLine."AED(GSI) Amount" := ExcisePostingBuffer[1]."AED(GSI) Amount";
        TaxJnlLine."AED(TTA) Amount" := ExcisePostingBuffer[1]."AED(TTA) Amount";
        TaxJnlLine."SED Amount" := ExcisePostingBuffer[1]."SED Amount";
        TaxJnlLine."SAED Amount" := ExcisePostingBuffer[1]."SAED Amount";
        TaxJnlLine."CESS Amount" := ExcisePostingBuffer[1]."CESS Amount";
        TaxJnlLine."NCCD Amount" := ExcisePostingBuffer[1]."NCCD Amount";
        TaxJnlLine."eCess Amount" := ExcisePostingBuffer[1]."eCess Amount";
        TaxJnlLine."SHE Cess Amount" := ExcisePostingBuffer[1]."SHE Cess Amount";
        TaxJnlLine."ADET Amount" := ExcisePostingBuffer[1]."ADET Amount";
        TaxJnlLine."ADE Amount" := ExcisePostingBuffer[1]."ADE Amount";
        TaxJnlLine."ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount";
        TaxJnlLine."Excise Amount" := ExcisePostingBuffer[1]."Excise Amount";
        TaxJnlLine.MODIFY;

        GenJnlLine."ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount";
        GenJnlLine."Source Curr. ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount (ACY)";
        GenJnlLine.CVD := ExcisePostingBuffer[1].CVD;

        GenJnlLine."BED Calculation Type" := ExcisePostingBuffer[1]."BED Calculation Type";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Bill-to/Pay-to No." := "Customer No.";
        GenJnlLine."Excise Posting" := TRUE;
        GenJnlLine.Trading := Trading;
        GenJnlLine.Quantity := ExcisePostingBuffer[1].Quantity;
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        GenJnlLine."Dimension Set ID" := ExcisePostingBuffer[1]."Dimension Set ID";
        GenJnlLine."Shortcut Dimension 1 Code" := ExcisePostingBuffer[1]."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := ExcisePostingBuffer[1]."Global Dimension 2 Code";
        IF ExcisePostingBuffer[1].Type = ExcisePostingBuffer[1].Type::Item THEN
          GenJnlLine."Product Type" := GenJnlLine."Product Type"::Item
        ELSE
          GenJnlLine."Product Type" := GenJnlLine."Product Type"::FA;
        RunGenJnlPostLine(GenJnlLine,ServAmtsMgt,ExcisePostingBuffer[1]."Dimension Entry No.");
        TaxJnlLine.DELETE;
      END;
    END;

    PROCEDURE PostGenGnlLineStructure@1500001(StrPostBuf@1500004 : ARRAY [2] OF TEMPORARY Record 13796;ServHeader@1500003 : Record 5900;VAR ServAmtsMgt@1000000000 : Codeunit 5986;GenJnlLineDocType@1500002 : Integer;GenJnlLineDocNo@1500001 : Code[20];VAR LineNo@1500000 : Integer);
    VAR
      GenJnlLine@1500007 : Record 81;
      ThirdPartyInvoice@1500006 : Record 13797;
      NoSeriesMgt@1500005 : Codeunit 396;
    BEGIN
      IF StrPostBuf[1].Amount = 0 THEN
        EXIT;

      WITH ServHeader DO BEGIN
        IF NOT StrPostBuf[1]."Payable to Third Party" THEN BEGIN
          GenJnlLine.INIT;
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Sale Return Type" := "Sale Return Type";
          GenJnlLine."Line No." := LineNo;
          LineNo += 10000;
          GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          GenJnlLine.Amount := StrPostBuf[1].Amount;
          GenJnlLine."Amount (LCY)" := StrPostBuf[1].Amount;
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine.Description := "Posting Description";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Bill-to/Pay-to No." := "Customer No.";
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
          GenJnlLine."Source No." := "Bill-to Customer No.";
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."System-Created Entry" := TRUE;
          IF StrPostBuf[1].LCY THEN
            GenJnlLine."Source Currency Amount" := StrPostBuf[1]."Source Currency Amount"
          ELSE
            GenJnlLine."Source Currency Amount" := StrPostBuf[1].Amount;

          IF ("Currency Code" = '') OR StrPostBuf[1].LCY THEN
            GenJnlLine."Currency Factor" := 1
          ELSE
            GenJnlLine."Currency Factor" := "Currency Factor";
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := "Dimension Set ID";
          GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
          GenJnlLine."Gen. Posting Type" := 0;
          GenJnlLine.Correction := Correction;
          IF StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header THEN
            GenJnlPostLine.RunWithCheck(GenJnlLine)
          ELSE
            RunGenJnlPostLine(GenJnlLine,ServAmtsMgt,StrPostBuf[1]."Dimension Entry No.");
        END;
        IF StrPostBuf[1]."Payable to Third Party" THEN BEGIN
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := "Dimension Set ID";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          GenJnlLine."Line No." := LineNo;
          LineNo += 10000;
          GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
          SalesSetup.GET;
          SalesSetup.TESTFIELD("Third Party Nos.");
          GenJnlLine."Document No." := NoSeriesMgt.GetNextNo(SalesSetup."Third Party Nos.","Posting Date",TRUE);
          GenJnlLine."External Document No." := GenJnlLine."Document No.";
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::Vendor;
          GenJnlLine.VALIDATE("Bal. Account No.",StrPostBuf[1]."Third Party Code");
          ThirdPartyInvoice.INIT;
          ThirdPartyInvoice.Type := StrPostBuf[1].Type;
          ThirdPartyInvoice."Document Type" := StrPostBuf[1]."Document Type";
          ThirdPartyInvoice."Invoice No." := GenJnlLineDocNo;
          ThirdPartyInvoice."Third Party Document No." := GenJnlLine."Document No.";
          ThirdPartyInvoice.Charge := StrPostBuf[1]."Tax/Charge Code";
          ThirdPartyInvoice."Posting Date" := "Posting Date";
          ThirdPartyInvoice.INSERT;
          IF StrPostBuf[1].LCY THEN BEGIN
            GenJnlLine.Amount := -StrPostBuf[1].Amount;
            GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
            GenJnlLine."Amount (LCY)" := GenJnlLine.Amount;
            GenJnlLine."Currency Factor" := 1
          END ELSE BEGIN
            GenJnlLine."Currency Code" := "Currency Code";
            GenJnlLine."Source Currency Code" := "Currency Code";
            GenJnlLine.Amount := -StrPostBuf[1]."Source Currency Amount";
            GenJnlLine."Source Currency Amount" := -StrPostBuf[1]."Source Currency Amount";
            GenJnlLine."Amount (LCY)" := -StrPostBuf[1].Amount;
            GenJnlLine."Currency Factor" := "Currency Factor";
          END;
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine.Description := "Posting Description";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Bill-to/Pay-to No." := StrPostBuf[1]."Third Party Code";
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
          GenJnlLine."Source No." := "Bill-to Customer No.";
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
          GenJnlLine."Gen. Posting Type" := 0;
          IF StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header THEN BEGIN
            GenJnlPostLine.RunWithCheck(GenJnlLine);
          END ELSE
            RunGenJnlPostLine(GenJnlLine,ServAmtsMgt,StrPostBuf[1]."Dimension Entry No.");
        END;
      END;
    END;

    PROCEDURE PostGenGnlLineServiceTax@1500002(SvcTaxPostingBuffer@1500003 : ARRAY [2] OF TEMPORARY Record 16478;ServHeader@1500002 : Record 5900;VAR ServAmtsMgt@1000000000 : Codeunit 5986;GenJnlLineDocType@1500001 : Integer;GenJnlLineDocNo@1500000 : Code[20];AppliedServiceTaxAmountPmt@1500011 : Decimal;AppliedServiceTaxAmountInv@1500012 : Decimal;TotalServiceLineLCY@1500013 : Record 5902);
    VAR
      GenJnlLine@1500007 : Record 81;
      Location@1500006 : Record 14;
      CompanyInfo@1500005 : Record 79;
      Customer@1500004 : Record 18;
      ServTaxMgmt@1500010 : Codeunit 16471;
      TransactionNo@1500009 : Integer;
      LoopCount@1500008 : Integer;
    BEGIN
      WITH ServHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Sale Return Type" := "Sale Return Type";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."Service Tax Entry" := TRUE;
        GenJnlLine."ST Pure Agent" := "ST Pure Agent";
        Customer.GET("Customer No.");
        GenJnlLine."Nature of Services" := Customer."Nature of Services";
        GenJnlLine."Service Tax Type" := GenJnlLine."Service Tax Type"::Sale;
        GenJnlLine."Service Tax Group Code" := SvcTaxPostingBuffer[1]."Service Tax Group Code";
        GenJnlLine."Service Tax Registration No." := SvcTaxPostingBuffer[1]."Service Tax Registration No.";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine.VALIDATE("Account No.",SvcTaxPostingBuffer[1]."Party Code");
        GenJnlLine."Service Tax Base Amount (LCY)" := SvcTaxPostingBuffer[1]."Service Tax Base Amount";
        GenJnlLine."Service Tax Amount" := SvcTaxPostingBuffer[1]."Service Tax Amount";
        GenJnlLine."Service Tax eCess Amount" := SvcTaxPostingBuffer[1]."Service Tax eCess Amount";
        GenJnlLine."Service Tax SHE Cess Amount" := SvcTaxPostingBuffer[1]."Service Tax SHE Cess Amount";
        GenJnlLine."Service Tax SBC Amount" := SvcTaxPostingBuffer[1]."Service Tax SBC Amount";
        GenJnlLine."KK Cess Amount" := SvcTaxPostingBuffer[1]."KK Cess Amount";
        GenJnlLine.PoT := PoT;
        GenJnlLine."Tot. Serv Tax Amount (Intm)" := SvcTaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)";
        GenJnlLine."Service Tax SBC Amount (Intm)" := SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)";
        GenJnlLine."KK Cess Amount (Intm)" := SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Shortcut Dimension 1 Code" := SvcTaxPostingBuffer[1]."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := SvcTaxPostingBuffer[1]."Global Dimension 2 Code";
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        GenJnlLine."Gen. Posting Type" := 0;
        GenJnlLine.Correction := Correction;
        GenJnlLine."E.C.C. No." := SvcTaxPostingBuffer[1]."Location E.C.C. No.";
        GenJnlLine."Transaction No. Serv. Tax" := "Transaction No. Serv. Tax";
        GenJnlLine."Location Code" := "Location Code";
        GenJnlLine."Service Tax Rounding Type" := "Service Tax Rounding Type";
        GenJnlLine."Service Tax Rounding Precision" := "Service Tax Rounding Precision";
        IF GenJnlLine."Service Tax Amount" <> 0 THEN BEGIN
          IF GenJnlLine."Location Code" <> '' THEN BEGIN
            Location.GET(GenJnlLine."Location Code");
            IF (GenJnlLine."Service Tax Type" = GenJnlLine."Service Tax Type"::Sale) AND Location."Input Service Distributor" THEN
              ERROR(STRSUBSTNO(Text16500,Location.Code));
          END ELSE BEGIN
            CompanyInfo.GET;
            IF (GenJnlLine."Service Tax Type" = GenJnlLine."Service Tax Type"::Sale) AND CompanyInfo."Input Service Distributor" THEN
              ERROR(Text16501);
          END;
        END;
        LoopCount := SvcTaxPostingBuffer[1].COUNT;
        IF (LoopCount = 0) AND PoT AND (AppliedServiceTaxAmountInv <> 0) THEN
          IF AppliedServiceTaxAmountInv <= AppliedServiceTaxAmountPmt THEN BEGIN
            SvcTaxPostingBuffer[1]."Service Tax Base Amount" := 0;
            SvcTaxPostingBuffer[1]."Service Tax Amount" := 0;
            SvcTaxPostingBuffer[1]."Service Tax eCess Amount" := 0;
            SvcTaxPostingBuffer[1]."Service Tax SHE Cess Amount" := 0;
            SvcTaxPostingBuffer[1]."Service Tax SBC Amount" := 0;
            SvcTaxPostingBuffer[1]."KK Cess Amount" := 0;
            GenJnlLine."Service Tax Base Amount (LCY)" := SvcTaxPostingBuffer[1]."Service Tax Base Amount";
            GenJnlLine."Service Tax Amount" := SvcTaxPostingBuffer[1]."Service Tax Amount";
            GenJnlLine."Service Tax eCess Amount" := SvcTaxPostingBuffer[1]."Service Tax eCess Amount";
            GenJnlLine."Service Tax SHE Cess Amount" := SvcTaxPostingBuffer[1]."Service Tax SHE Cess Amount";
            GenJnlLine."Service Tax SBC Amount" := SvcTaxPostingBuffer[1]."Service Tax SBC Amount";
            GenJnlLine."KK Cess Amount" := SvcTaxPostingBuffer[1]."KK Cess Amount";
            IF TotalServiceLineLCY."Service Tax Amount" <> SvcTaxPostingBuffer[1]."S. Tax Amount (Intm)" THEN
              SvcTaxPostingBuffer[1]."S. Tax Amount (Intm)" :=
                SvcTaxPostingBuffer[1]."S. Tax Amount (Intm)" +
                ABS(SvcTaxPostingBuffer[1]."S. Tax Amount (Intm)") -
                ABS(TotalServiceLineLCY."Service Tax Amount");
            IF TotalServiceLineLCY."Service Tax eCess Amount" <> SvcTaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" THEN
              SvcTaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" :=
                SvcTaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" +
                ABS(SvcTaxPostingBuffer[1]."S. Tax eCess Amount (Intm)") -
                ABS(TotalServiceLineLCY."Service Tax eCess Amount");
            IF TotalServiceLineLCY."Service Tax SHE Cess Amount" <> SvcTaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" THEN
              SvcTaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" :=
                SvcTaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" +
                ABS(SvcTaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)") -
                ABS(TotalServiceLineLCY."Service Tax SHE Cess Amount");
            IF TotalServiceLineLCY."Service Tax SBC Amount" <> SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)" THEN
              SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)" :=
                SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)" +
                ABS(SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)") -
                ABS(TotalServiceLineLCY."Service Tax SBC Amount");
            IF TotalServiceLineLCY."KK Cess Amount" <> SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)" THEN
              SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)" :=
                SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)" +
                ABS(SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)") -
                ABS(TotalServiceLineLCY."KK Cess Amount");
            IF TotalServiceLineLCY."Service Tax Base" <> SvcTaxPostingBuffer[1]."S. Tax Base Amount (Intm)" THEN
              SvcTaxPostingBuffer[1]."S. Tax Base Amount (Intm)" :=
                SvcTaxPostingBuffer[1]."S. Tax Base Amount (Intm)" +
                ABS(SvcTaxPostingBuffer[1]."S. Tax Base Amount (Intm)") -
                ABS(TotalServiceLineLCY."Service Tax Base");
            SvcTaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)" :=
              SvcTaxPostingBuffer[1]."S. Tax Amount (Intm)" +
              SvcTaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" +
              SvcTaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)";
            GenJnlLine."Tot. Serv Tax Amount (Intm)" := SvcTaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)";
            GenJnlLine."Service Tax SBC Amount (Intm)" := SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)";
            GenJnlLine."KK Cess Amount (Intm)" := SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)";
          END;
        SvcTaxPostingBuffer[1]."Amt. Incl. Service Tax (Intm)" :=
          SvcTaxPostingBuffer[1]."S. Tax Base Amount (Intm)" +
          SvcTaxPostingBuffer[1]."S. Tax Amount (Intm)" +
          SvcTaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" +
          SvcTaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" +
          SvcTaxPostingBuffer[1]."S. Tax SBC Amount (Intm)" +
          SvcTaxPostingBuffer[1]."KK Cess Amount (Intm)";
        RunGenJnlPostLine(GenJnlLine,ServAmtsMgt,SvcTaxPostingBuffer[1]."Dimension Entry No.");
        IF PoT THEN BEGIN
          GenJnlPostLine.GetTransactionNo(TransactionNo);
          ServTaxMgmt.SetTransactionNo(TransactionNo);
          IF AppliedServiceTaxAmountPmt <> 0 THEN
            ServTaxMgmt.InitCustServiceTaxApplOnline(SvcTaxPostingBuffer[1]);
        END;
      END;
    END;

    PROCEDURE GetActualAmount@1500003(Amt@1500000 : Decimal) : Decimal;
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
    BEGIN
      IF ServiceHeader."Currency Code" <> '' THEN
        EXIT(-1 * Amt);
      ServiceTaxEntry.SETCURRENTKEY("Transaction No.");
      ServiceTaxEntry.SETRANGE("Transaction No.",ServiceHeader."Transaction No. Serv. Tax");
      IF ServiceTaxEntry.FINDFIRST THEN
        EXIT(-1 * (
          Amt + ABS(ServiceTaxEntry."Service Tax Amount" + ServiceTaxEntry."Service Tax SBC Amount" + ServiceTaxEntry."KK Cess Amount")));
    END;

    PROCEDURE FreeSupply@1500004(VAR TotalServiceLine@1500002 : Record 5902;VAR TotalServiceLineLCY@1500001 : Record 5902;GenJnlLineDocType@1500000 : Integer);
    VAR
      GenJnlLine@1500004 : Record 81;
      GLSetup@1500003 : Record 98;
    BEGIN
      // Free supply
      WITH ServiceHeader DO BEGIN
        IF "Free Supply" AND (TotalServiceLine."Excise Amount" <> 0) THEN BEGIN
          GLSetup.GET;
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := "Posting Description";
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := "Dimension Set ID";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          GLSetup.TESTFIELD("Excise Expenses Account");
          GenJnlLine.VALIDATE("Account No.",GLSetup."Excise Expenses Account");
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."Sale Return Type" := "Sale Return Type";
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          GenJnlLine."Currency Code" := "Currency Code";
          GenJnlLine."Source Currency Code" := "Currency Code";
          IF "Free Supply" THEN BEGIN
            GenJnlLine.Amount := -TotalServiceLine."Excise Amount";
            GenJnlLine."Source Currency Amount" := -TotalServiceLine."Excise Amount";
            GenJnlLine."Amount (LCY)" := -TotalServiceLineLCY."Excise Amount";
          END;
          IF "Currency Code" = '' THEN
            GenJnlLine."Currency Factor" := 1
          ELSE
            GenJnlLine."Currency Factor" := "Currency Factor";
          GenJnlLine.Correction := Correction;
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine."Applies-to Doc. Type" := "Applies-to Doc. Type";
          GenJnlLine."Applies-to Doc. No." := "Applies-to Doc. No.";
          GenJnlLine."Applies-to ID" := "Applies-to ID";
          GenJnlLine."Allow Application" := "Bal. Account No." = '';
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."Gen. Posting Type" := 0;
          GenJnlLine.Correction := Correction;
          GenJnlPostLine.RunWithCheck(GenJnlLine);
        END;
        GenJnlPostLine.SetSTPureAgentStatus("ST Pure Agent");
      END;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@1500005(VAR GenJnlLine@1500001 : Record 81;VAR ServAmtsMgt@1000000000 : Codeunit 5986;DimEntryNo@1500000 : Integer);
    VAR
      TempDimBuf@1500004 : TEMPORARY Record 360;
      DimBufMgt@1500002 : Codeunit 411;
    BEGIN
      TempDimBuf.DELETEALL;
      ServAmtsMgt.GetDimensions(DimEntryNo,TempDimBuf);
      GenJnlPostLine.RunWithCheck(GenJnlLine);
    END;

    LOCAL PROCEDURE CalculateItemJnlLineExciseAmts@1500006(VAR ServiceLine@1500004 : Record 5902;VAR ItemJnlLine@1500003 : Record 83;QtyToBeInvoiced@1500002 : Decimal;QtyToBeInvoicedBase@1500001 : Decimal;QtyToBeShippedBase@1500000 : Decimal);
    VAR
      ServAmtsMgt@1500005 : Codeunit 5986;
    BEGIN
      WITH ServiceLine DO
        IF QtyToBeInvoiced <> 0 THEN BEGIN
          IF ServiceHeader."Currency Code" = '' THEN BEGIN
            ItemJnlLine."BED Amount" :=
              ServAmtsMgt.RoundExciseAmount(ItemJnlLine."BED Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)");
            ItemJnlLine."Other Duties Amount" :=
              ServAmtsMgt.RoundExciseAmount("AED(GSI) Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("SED Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("SAED Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("AED(TTA) Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("NCCD Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("CESS Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("ADE Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("ADET Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("eCess Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("ADC VAT Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)") +
              ServAmtsMgt.RoundExciseAmount("SHE Cess Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)");
          END ELSE BEGIN
            ItemJnlLine."BED Amount" :=
              ROUND(ItemJnlLine."BED Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision");
            ItemJnlLine."Other Duties Amount" :=
              ROUND("AED(GSI) Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("SED Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("SAED Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("AED(TTA) Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("NCCD Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("CESS Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("ADE Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("ADET Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("eCess Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("ADC VAT Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision") +
              ROUND("SHE Cess Amount" * (QtyToBeInvoicedBase / "Qty. to Invoice (Base)"),Currency."Amount Rounding Precision");
          END;
        END ELSE
          IF ("Qty. to Ship" > "Qty. to Invoice") AND ("Qty. to Invoice" <> 0) AND Invoice THEN BEGIN
            IF "Currency Code" = '' THEN BEGIN
              ItemJnlLine."BED Amount" :=
                ServAmtsMgt.RoundExciseAmount(ItemJnlLine."BED Amount",QtyToBeShippedBase,"Qty. to Invoice");
              ItemJnlLine."Other Duties Amount" :=
                ServAmtsMgt.RoundExciseAmount("AED(GSI) Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("SED Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("SAED Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("AED(TTA) Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("NCCD Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("CESS Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("ADE Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("ADET Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("eCess Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("ADC VAT Amount",QtyToBeShippedBase,"Qty. to Invoice") +
                ServAmtsMgt.RoundExciseAmount("SHE Cess Amount",QtyToBeShippedBase,"Qty. to Invoice");
            END ELSE BEGIN
              ItemJnlLine."BED Amount" :=
                ROUND(ItemJnlLine."BED Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision");
              ItemJnlLine."Other Duties Amount" :=
                ROUND("AED(GSI) Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("SED Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("SAED Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("AED(TTA) Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("NCCD Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("CESS Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("ADE Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("ADET Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("eCess Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("ADC VAT Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision") +
                ROUND("SHE Cess Amount" * (QtyToBeShippedBase / "Qty. to Invoice"),Currency."Amount Rounding Precision");
            END;
          END ELSE BEGIN
            IF "Currency Code" = '' THEN BEGIN
              ItemJnlLine."BED Amount" := ServAmtsMgt.RoundExciseAmount(ItemJnlLine."BED Amount",QtyToBeShippedBase,Quantity);
              ItemJnlLine."Other Duties Amount" :=
                ServAmtsMgt.RoundExciseAmount("AED(GSI) Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("SED Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("SAED Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("AED(TTA) Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("NCCD Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("CESS Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("ADE Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("ADET Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("eCess Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("ADC VAT Amount",QtyToBeShippedBase,Quantity) +
                ServAmtsMgt.RoundExciseAmount("SHE Cess Amount",QtyToBeShippedBase,Quantity);
            END ELSE BEGIN
              ItemJnlLine."BED Amount" :=
                ROUND(ItemJnlLine."BED Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision");
              ItemJnlLine."Other Duties Amount" :=
                ROUND("AED(GSI) Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("SED Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("SAED Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("AED(TTA) Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("NCCD Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("CESS Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("ADE Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("ADET Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("eCess Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("ADC VAT Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision") +
                ROUND("SHE Cess Amount" * (QtyToBeShippedBase / Quantity),Currency."Amount Rounding Precision");
            END;
          END
    END;

    PROCEDURE PostServiceLineToGenJnlLine@1500035(VAR GSTPostingBuffer@1500008 : ARRAY [2] OF TEMPORARY Record 16420;VAR ServAmtsMgt@1500007 : Codeunit 5986;ServHeader@1500006 : Record 5900;GenJnlLineDocType@1500005 : Integer;GenJnlLineDocNo@1500000 : Code[20]) : Integer;
    VAR
      ServiceLine@1500002 : Record 5902;
      GenJnlLine@1500003 : Record 81;
      GSTManagement@1500004 : Codeunit 16401;
      TransactionNo@1500009 : Integer;
    BEGIN
      GSTManagement.ServicePostValidations(ServHeader);
      WITH GenJnlLine DO BEGIN
        INIT;
        "Posting Date" := ServiceHeader."Posting Date";
        "Document Date" := ServiceHeader."Document Date";
        Description := ServiceHeader."Posting Description";
        "Document Type" := GenJnlLineDocType;
        "Document No." := GenJnlLineDocNo;
        "External Document No." := GenJnlLineExtDocNo;
        IF GSTPostingBuffer[1]."GST Amount" <> 0 THEN BEGIN
          IF (ServHeader."GST Customer Type" <> ServHeader."GST Customer Type"::Exempted) OR
            (NOT ServHeader."GST Without Payment of Duty") THEN BEGIN
              "Account No." := GSTPostingBuffer[1]."Account No.";
              Amount := GSTPostingBuffer[1]."GST Amount";
              "Amount (LCY)" := Amount;
              IF ServHeader."Currency Code" <> '' THEN BEGIN
                "Currency Code" := ServHeader."Currency Code";
                "Currency Factor" := ServHeader."Currency Factor";
              END ELSE BEGIN
                "Currency Code" := ServHeader."Currency Code";
                "Currency Factor" := 1;
              END;
          END;
        IF ServHeader."GST Customer Type" IN [ServHeader."GST Customer Type"::Export,
                                              ServHeader."GST Customer Type"::"Deemed Export",
                                              ServHeader."GST Customer Type"::"SEZ Development",
                                              ServHeader."GST Customer Type"::"SEZ Unit"] THEN
          IF GSTPostingBuffer[1]."Bal. Account No." <> '' THEN
            "Bal. Account No." := GSTPostingBuffer[1]."Bal. Account No.";
        END;
        "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
        "GST Group Code" := GSTPostingBuffer[1]."GST Group Code";
        "System-Created Entry" := TRUE;
        "GST %" := GSTPostingBuffer[1]."GST %";
        "Source Currency Code" := ServHeader."Currency Code";
        Correction := ServHeader.Correction;
        "Gen. Posting Type" := "Gen. Posting Type"::Sale;
        "Gen. Bus. Posting Group" := GSTPostingBuffer[1]."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer[1]."Gen. Prod. Posting Group";
        "Shortcut Dimension 1 Code" := GSTPostingBuffer[1]."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GSTPostingBuffer[1]."Global Dimension 2 Code";
        "Dimension Set ID" := GSTPostingBuffer[1]."Dimension Set ID";
        "Sell-to/Buy-from No." := ServHeader."Customer No.";
        "Source Type" := "Source Type"::Customer;
        "Source No." := ServHeader."Customer No.";
        "Posting No. Series" := ServHeader."Posting No. Series";
        "Ship-to/Order Address Code" := ServHeader."Ship-to Code";
        "Location Code" := ServHeader."Location Code";
        "Source Code" := SrcCode;
        "Reason Code" := ServHeader."Reason Code";
        "Account Type" := "Account Type"::"G/L Account";
        "GST Component Code" := GSTPostingBuffer[1]."GST Component Code";
        "Account Type" := "Account Type"::"G/L Account";
        "HSN/SAC Code" := ServiceLine."HSN/SAC Code";
        "GST Place of Supply" := ServiceLine."GST Place Of Supply";
        GenJnlPostLine.GetTransactionNo(TransactionNo);
        SetTransactionNo(TransactionNo);
        GSTManagement.InsertGSTLedgerEntryService(GSTPostingBuffer[1],ServHeader,
          NextTransactionNo,GenJnlLineDocType,GenJnlLineDocNo,ServHeader."Currency Code",
          ServHeader."Currency Factor",SrcCode);
        RunGenJnlPostLine(GenJnlLine,ServAmtsMgt,GSTPostingBuffer[1]."Dimension Set ID");
      END;
      EXIT(NextTransactionNo);
    END;

    PROCEDURE SetTransactionNo@1500099(TransactionNo@1500000 : Integer);
    BEGIN
      NextTransactionNo := TransactionNo;
    END;

    BEGIN
    END.
  }
}

