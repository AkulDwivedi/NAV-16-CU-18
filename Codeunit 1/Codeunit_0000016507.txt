OBJECT Codeunit 16507 Service Tax Cr Distribution
{
  OBJECT-PROPERTIES
  {
    Date=03-08-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.46621;
  }
  PROPERTIES
  {
    TableNo=16577;
    OnRun=BEGIN
            IF NOT CONFIRM(Text16504) THEN
              EXIT;
            DistHeader := Rec;
            GenLedgSetup.GET;
            WITH DistHeader DO BEGIN
              TESTFIELD("Posting Date");
              TESTFIELD("Service Tax Group Code");
              IF "Posting No. Series" = '' THEN BEGIN
                GLSetup.GET;
                GLSetup.TESTFIELD("S.T. Posted Distribution Nos.");
                "Posting No. Series" := GLSetup."S.T. Posted Distribution Nos.";
                MODIFY;
                COMMIT;
              END;
              IF GUIALLOWED THEN
                Window.OPEN(
                  '#1################################################\\' +
                  Text16501);
              SvcTaxEntryDetail.RESET;
              SvcTaxEntryDetail.SETCURRENTKEY(Type,"Input Service Distribution","Location Code","Distribution No.");
              SvcTaxEntryDetail.SETRANGE(Type,SvcTaxEntryDetail.Type::Purchase);
              SvcTaxEntryDetail.SETRANGE("Input Service Distribution",TRUE);
              SvcTaxEntryDetail.SETRANGE("Distribution No.","No.");
              IF NOT SvcTaxEntryDetail.FINDFIRST THEN
                ERROR(Text16502);
              InitPostedDistHeader;
              CheckDistributionPercent;
              InitPostedDistLine;
              AdjustGLEntries;
              InitServiceTaxEntry;
              AdjustSTCreditEntries;
            END;
            DELETE;
            DistributionLine.DELETEALL;
            MESSAGE(Text16503);
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1500025 : Record 79;
      DistHeader@1500000 : Record 16577;
      DistributionLine@1500001 : Record 16578;
      Text16500@1500002 : TextConst 'ENU=The sum of Distribution percent defined for Distribution No. %1 should not be %2 than 100.;ENN=The sum of Distribution percent defined for Distribution No. %1 should not be %2 than 100.';
      Text16501@1500003 : TextConst 'ENU=Posting lines    #2#############################;ENN=Posting lines    #2#############################';
      PostedDistHeader@1500006 : Record 16579;
      GenJnlLine@1500007 : Record 81;
      SvcTaxEntryDetail@1500013 : Record 16474;
      SvcTaxEntry@1500014 : Record 16473;
      ServiceTaxSetup@1500016 : Record 16472;
      STaxPostingBuffer@1500017 : ARRAY [2] OF Record 16581;
      SvcTaxPostingBuffer@1500028 : ARRAY [2] OF Record 16582;
      Location@1500008 : Record 14;
      SvcTaxDistribution@1500029 : Record 16576;
      GenLedgSetup@1500032 : Record 98;
      GLSetup@1500030 : Record 98;
      NoSeriesMgt@1500005 : Codeunit 396;
      GenJnlPostLine@1500012 : Codeunit 12;
      Window@1500004 : Dialog;
      TransactionNo@1500015 : Integer;
      Text16502@1500019 : TextConst 'ENU=Please select the entries whose credit is to be distributed.;ENN=Please select the entries whose credit is to be distributed.';
      Text16503@1500022 : TextConst 'ENU=Service tax distribution lines posted successfully.;ENN=Service tax distribution lines posted successfully.';
      Text16504@1500023 : TextConst 'ENU="Do you want to post? ";ENN="Do you want to post? "';
      Text16505@1500024 : TextConst 'ENU=To Location %1 should not be Input Service Distributor.;ENN=To Location %1 should not be Input Service Distributor.';
      CountSTEntries@1500031 : Integer;
      Text16506@1500020 : TextConst 'ENU=Distribution percent should not be zero for Document No. %1 Line No %2.;ENN=Distribution percent should not be zero for Document No. %1 Line No %2.';
      RoundingDifference@1500027 : Decimal;

    PROCEDURE FilterDistributionLine@1500001();
    BEGIN
      DistributionLine.RESET;
      DistributionLine.SETRANGE("Document No.",DistHeader."No.");
    END;

    PROCEDURE CheckDistributionPercent@1500000();
    BEGIN
      Window.UPDATE(2,'Checking Distribution %');
      FilterDistributionLine;
      DistributionLine.SETCURRENTKEY("Document No.","Loading on Services Account");
      DistributionLine.CALCSUMS("Distribution %");
      IF DistributionLine."Distribution %" < 100 THEN
        ERROR(Text16500,DistHeader."No.",'less');
      IF DistributionLine."Distribution %" > 100 THEN
        ERROR(Text16500,DistHeader."No.",'more');
    END;

    PROCEDURE AdjustSTCreditEntries@1500002();
    BEGIN
      Window.UPDATE(2,'Updating Service Tax Credit Entries');
      SvcTaxEntryDetail.RESET;
      SvcTaxEntryDetail.SETCURRENTKEY(Type,"Distribution No.");
      SvcTaxEntryDetail.SETRANGE(Type,SvcTaxEntryDetail.Type::Purchase);
      SvcTaxEntryDetail.SETRANGE("Distribution No.",DistHeader."No.");
      SvcTaxEntryDetail.MODIFYALL("Remaining Credit",0);
      SvcTaxEntryDetail.MODIFYALL("Remaining Credit (eCess)",0);
      SvcTaxEntryDetail.MODIFYALL("Remaining Credit (SHECess)",0);
      SvcTaxEntryDetail.MODIFYALL("Remaining S.T. Base Amount",0);
      SvcTaxEntryDetail.MODIFYALL(Closed,TRUE);
      SvcTaxEntryDetail.MODIFYALL("Closed (eCess)",TRUE);
      SvcTaxEntryDetail.MODIFYALL("Closed (SHECess)",TRUE);
      SvcTaxEntryDetail.MODIFYALL("Dist. Input Service Tax Credit",FALSE);
      SvcTaxEntryDetail.MODIFYALL("ST Credit Transfered",TRUE);
    END;

    PROCEDURE InitPostedDistHeader@1500003();
    BEGIN
      PostedDistHeader.TRANSFERFIELDS(DistHeader);
      PostedDistHeader."No." := NoSeriesMgt.GetNextNo(DistHeader."Posting No. Series",WORKDATE,TRUE);
      Window.UPDATE(1,'Distribution No' + ' ' +
        DistHeader."No." + ' -> ' + 'Posted Distribution No' + ' ' + PostedDistHeader."No.");
      Window.UPDATE(2,'Posting Distribution Header');
      PostedDistHeader."Distribution No." := DistHeader."No.";
      PostedDistHeader.INSERT;
    END;

    PROCEDURE InitPostedDistLine@1500004();
    VAR
      DistributionLine@1500000 : Record 16578;
      PostedDistributionLine@1500001 : Record 16580;
    BEGIN
      Window.UPDATE(2,'Posting Distribution Line');
      DistributionLine.RESET;
      DistributionLine.SETRANGE("Document No.",DistHeader."No.");
      IF DistributionLine.FINDSET THEN
        REPEAT
          IF DistributionLine."Distribution %" = 0 THEN
            ERROR(Text16506,DistributionLine."Document No.",DistributionLine."Line No.");
          PostedDistributionLine.INIT;
          PostedDistributionLine.TRANSFERFIELDS(DistributionLine);
          PostedDistributionLine."Document No." := PostedDistHeader."No.";
          PostedDistributionLine.INSERT;
          IF DistributionLine."To Location" <> '' THEN BEGIN
            Location.GET(DistributionLine."To Location");
            IF (DistHeader."From Location" = DistributionLine."To Location") AND Location."Input Service Distributor" THEN
              ERROR(Text16505,DistributionLine."To Location");
            IF NOT DistributionLine."Loading on Services Account" THEN
              Location.TESTFIELD("Service Tax Registration No.");
          END ELSE BEGIN
            CompanyInfo.GET;
            IF (DistHeader."From Location" = DistributionLine."To Location") AND CompanyInfo."Input Service Distributor" THEN
              ERROR(Text16505,DistributionLine."To Location");
            IF NOT DistributionLine."Loading on Services Account" THEN
              CompanyInfo.TESTFIELD("Service Tax Registration No.");
          END;
        UNTIL DistributionLine.NEXT = 0;
    END;

    PROCEDURE AdjustGLEntries@1500007();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
      GLEntry@1500001 : Record 17;
      GLAccount@1500002 : Record 15;
      ServiceTaxEntry@1500003 : Record 16473;
      Counter@1500010 : Integer;
      TotalAmount@1500009 : Decimal;
      AmountToPost@1500008 : Decimal;
      RndDifference@1500007 : Decimal;
      SkipExecution@1500005 : Boolean;
      EntryNo@1500004 : Integer;
      InputServiceDistributor@1500011 : Boolean;
    BEGIN
      Window.UPDATE(2,'Posting GL Entries');
      FilterDistributionLine;
      DistributionLine.SETCURRENTKEY("Document No.","Loading on Services Account");
      DistributionLine.SETRANGE("Loading on Services Account",FALSE);
      IF DistributionLine.FINDSET THEN
        REPEAT
          SvcTaxEntryDetail.SETCURRENTKEY(Type,"Distribution No.");
          SvcTaxEntryDetail.SETRANGE(Type,SvcTaxEntryDetail.Type::Purchase);
          SvcTaxEntryDetail.SETRANGE("Distribution No.",DistHeader."No.");
          IF SvcTaxEntryDetail.FINDSET THEN
            REPEAT
              FillSTaxPostingBuffer2(0,SvcTaxEntryDetail."GL Account",FALSE,
                GetAmount(DistributionLine."Distribution %",SvcTaxEntryDetail),
                DistributionLine."Line No.",'',FALSE,'',DistributionLine."To Location",DistHeader."From Location",
                DistributionLine."Shortcut Dimension 1 Code",DistributionLine."Shortcut Dimension 2 Code",
                DistributionLine."Dimension Set ID");
              ServiceTaxSetup.RESET;
              ServiceTaxSetup.SETRANGE(Code,SvcTaxEntryDetail."Service Tax Group Code");
              ServiceTaxSetup.SETFILTER("From Date",'<=%1',DistHeader."Posting Date");
              IF ServiceTaxSetup.FINDLAST THEN
                IF DistributionLine."To Location" <> '' THEN BEGIN
                  Location.GET(DistributionLine."To Location");
                  InputServiceDistributor := Location."Input Service Distributor";
                END ELSE BEGIN
                  CompanyInfo.GET;
                  InputServiceDistributor := CompanyInfo."Input Service Distributor";
                END;
                FillSTaxPostingBuffer(
                  0,ServiceTaxSetup.GetRecAccNoByISD(InputServiceDistributor),
                  TRUE,GetAmount(DistributionLine."Distribution %",SvcTaxEntryDetail),
                  DistributionLine."Line No.",'',FALSE,'',DistributionLine."To Location",
                  DistributionLine."Shortcut Dimension 1 Code",DistributionLine."Shortcut Dimension 2 Code",
                  DistributionLine."Dimension Set ID");
            UNTIL SvcTaxEntryDetail.NEXT = 0;
        UNTIL DistributionLine.NEXT = 0;
      PostGenJnlLine(PostedDistHeader."No.");
      STaxPostingBuffer[1].DELETEALL;
      STaxPostingBuffer[2].DELETEALL;
      SvcTaxPostingBuffer[1].DELETEALL;
      SvcTaxPostingBuffer[2].DELETEALL;

      DistributionLine.SETRANGE("Loading on Services Account",TRUE);
      DistributionLine.CALCSUMS("Distribution %");
      IF SvcTaxEntryDetail.FINDSET AND (DistributionLine."Distribution %" <> 0) THEN
        REPEAT
          IF NOT SvcTaxEntryDetail."ST Credit Received" THEN
            ServiceTaxEntry.GET(SvcTaxEntryDetail."Service Tax Entry No.")
          ELSE BEGIN
            IF NOT SkipExecution THEN
              REPEAT
                GetSvcTaxEntryNo(EntryNo,SvcTaxEntryDetail,SkipExecution);
              UNTIL SkipExecution;
            IF SvcTaxDistribution.FINDFIRST THEN
              ServiceTaxEntry.GET(SvcTaxDistribution."Service Tax Entry No. Rcpt.");
          END;
          Counter := 0;
          TotalAmount := 0;
          GLEntry.RESET;
          GLEntry.SETCURRENTKEY("Transaction No.");
          GLEntry.SETRANGE("Transaction No.",ServiceTaxEntry."Transaction No.");
          IF GLEntry.FINDSET THEN
            REPEAT
              GLAccount.GET(GLEntry."G/L Account No.");
              IF GLAccount."Service Tax Group Code" = SvcTaxEntryDetail."Service Tax Group Code" THEN BEGIN
                Counter += 1;
                TotalAmount += GLEntry.Amount;
                GLEntry.MARK := TRUE;
              END;
            UNTIL GLEntry.NEXT = 0;
          GLEntry.MARKEDONLY(TRUE);
          IF GLEntry.FINDSET THEN
            REPEAT
              Counter -= 1;
              RndDifference += (GetAmount(DistributionLine."Distribution %",SvcTaxEntryDetail) * GLEntry.Amount / TotalAmount) -
                ROUND((GetAmount(DistributionLine."Distribution %",SvcTaxEntryDetail) * GLEntry.Amount / TotalAmount));
              AmountToPost := ROUND((GetAmount(DistributionLine."Distribution %",SvcTaxEntryDetail) * GLEntry.Amount / TotalAmount));
              IF Counter = 0 THEN
                AmountToPost += RndDifference;
              PostGenJnlLine2(
                GLEntry."Document No.",GLEntry."G/L Account No.",AmountToPost,SvcTaxEntryDetail."Transaction No.",GLEntry);
              PostGenJnlLine2(GLEntry."Document No.",SvcTaxEntryDetail."GL Account",
                -ABS(AmountToPost),SvcTaxEntryDetail."Transaction No.",GLEntry);
            UNTIL GLEntry.NEXT = 0;
        UNTIL SvcTaxEntryDetail.NEXT = 0;
    END;

    PROCEDURE InitServiceTaxEntry@1500005();
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
      SvcTaxRegNo@1500002 : Code[20];
      ECCNo@1500003 : Code[20];
      InpuSvcDistributor@1500004 : Boolean;
    BEGIN
      Window.UPDATE(2,'Posting Service Tax Entry');

      CountSTEntries := 0;
      FilterDistributionLine;

      IF DistributionLine.FINDSET THEN
        REPEAT
          CountSTEntries += 1;
        UNTIL DistributionLine.NEXT = 0;

      IF DistributionLine.FINDSET THEN
        REPEAT
          IF DistributionLine."To Location" <> '' THEN BEGIN
            Location.GET(DistributionLine."To Location");
            SvcTaxRegNo := Location."Service Tax Registration No.";
            ECCNo := Location."E.C.C. No.";
            InpuSvcDistributor := Location."Input Service Distributor";
          END ELSE BEGIN
            CompanyInfo.GET;
            SvcTaxRegNo := CompanyInfo."Service Tax Registration No.";
            ECCNo := CompanyInfo."E.C.C. No.";
            InpuSvcDistributor := CompanyInfo."Input Service Distributor";
          END;
          SvcTaxEntryDetail.RESET;
          SvcTaxEntryDetail.SETCURRENTKEY(Type,"Distribution No.");
          SvcTaxEntryDetail.SETRANGE(Type,SvcTaxEntryDetail.Type::Purchase);
          SvcTaxEntryDetail.SETRANGE("Distribution No.",DistHeader."No.");
          IF SvcTaxEntryDetail.FINDSET THEN
            REPEAT
              CountSTEntries -= 1;
              SvcTaxEntry.GET(SvcTaxEntryDetail."Service Tax Entry No.");
              ServiceTaxEntry.TRANSFERFIELDS(SvcTaxEntry);
              ServiceTaxEntry."Entry No." := 0;
              ServiceTaxEntry."Document No." := PostedDistHeader."No.";
              ServiceTaxEntry."Posting Date" := DistHeader."Posting Date";
              ServiceTaxEntry."Service Tax Registration No." := SvcTaxRegNo;
              IF NOT (CountSTEntries = 0) THEN BEGIN
                ServiceTaxEntry."Service Tax Base Amount" := ROUND(SvcTaxEntryDetail."Remaining S.T. Base Amount" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Service Tax Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."KK Cess Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (KK Cess)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."eCess Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (eCess)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."SHE Cess Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (SHECess)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Service Tax SBC Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (SBC)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Amount Including Service Tax" := ROUND(SvcTaxEntry."Amount Including Service Tax" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
              END ELSE BEGIN
                ServiceTaxEntry."Service Tax Base Amount" := ROUND(SvcTaxEntryDetail."Remaining S.T. Base Amount" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Service Tax Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit" *
                    DistributionLine."Distribution %" / 100 + ABS(RoundingDifference),GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."KK Cess Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (KK Cess)" *
                    DistributionLine."Distribution %" / 100 + ABS(RoundingDifference),GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."eCess Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (eCess)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."SHE Cess Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (SHECess)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Service Tax SBC Amount" := ROUND(SvcTaxEntryDetail."Remaining Credit (SBC)" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Amount Including Service Tax" := ROUND(SvcTaxEntry."Amount Including Service Tax" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
                ServiceTaxEntry."Service Tax Abatement" := ROUND(SvcTaxEntry."Service Tax Abatement" *
                    DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
              END;
              ServiceTaxSetup.FindOnDate(SvcTaxEntry."Service Tax Group Code",DistHeader."Posting Date");
              ServiceTaxEntry."G/L Account No." := ServiceTaxSetup.GetRecInterimAccNoByISD(InpuSvcDistributor);
              ServiceTaxEntry."Amount Including Service Tax" :=
                ServiceTaxEntry."Service Tax Base Amount" + ServiceTaxEntry.FullTaxAmount + ServiceTaxEntry.FullTaxSBCAmount +
                ServiceTaxEntry.KKCessAmount;
              ServiceTaxEntry."Transaction No." := TransactionNo;
              ServiceTaxEntry."Location E.C.C. No." := ECCNo;
              ServiceTaxEntry."Remaining Serv. Tax Amt" := ServiceTaxEntry."Service Tax Amount";
              ServiceTaxEntry."Remaining Serv. Tax eCess Amt" := ServiceTaxEntry."eCess Amount";
              ServiceTaxEntry."Remaining Serv. Tax Base Amt" := ServiceTaxEntry."Service Tax Base Amount";
              ServiceTaxEntry."Remaining Serv Tax SHECess Amt" := ServiceTaxEntry."SHE Cess Amount";
              ServiceTaxEntry."Remaining Serv. Tax SBC Amt" := ServiceTaxEntry."Service Tax SBC Amount";
              ServiceTaxEntry."Remaining KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntry."Location Code" := DistributionLine."To Location";
              ServiceTaxEntry."Input Service Credit Entry No." := SvcTaxEntry."Entry No.";
              ServiceTaxEntry."Input Service Distribution" := InpuSvcDistributor;
              InitServiceTaxEntryDetail(
                ServiceTaxEntry."Entry No.",DistributionLine,SvcTaxEntryDetail,
                SvcTaxRegNo,ECCNo,ServiceTaxEntry,CountSTEntries = 0);
              IF NOT DistributionLine."Loading on Services Account" THEN
                ServiceTaxEntry.INSERT(TRUE);
            UNTIL SvcTaxEntryDetail.NEXT = 0;
        UNTIL DistributionLine.NEXT = 0;
    END;

    PROCEDURE InitServiceTaxEntryDetail@1500006(EntryNo@1500000 : Integer;DistributionLine@1500003 : Record 16578;ServTaxEntryDetail@1500006 : Record 16474;SvcTaxRegNo@1500007 : Code[20];ECCNo@1500008 : Code[20];SvcTaxEntry2@1500009 : Record 16473;LastRecord@1500010 : Boolean);
    VAR
      ServiceTaxEntryDetail@1500002 : Record 16474;
    BEGIN
      Window.UPDATE(2,'Posting Service Tax Entry Detail');
      ServiceTaxEntryDetail.INIT;
      ServiceTaxEntryDetail.TRANSFERFIELDS(ServTaxEntryDetail);
      ServiceTaxEntryDetail."Entry No." := 0;
      ServiceTaxEntryDetail."Service Tax Entry No." := EntryNo;
      ServiceTaxEntryDetail."Service Tax Registration No." := SvcTaxRegNo;
      ServiceTaxEntryDetail."Document No." := PostedDistHeader."No.";
      ServiceTaxEntryDetail."Posting Date" := DistHeader."Posting Date";
      IF NOT LastRecord THEN BEGIN
        ServiceTaxEntryDetail."Base Amount" := ROUND(ServTaxEntryDetail."Remaining S.T. Base Amount" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax Amount" := ROUND(ServTaxEntryDetail."Remaining Credit" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."KK Cess Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (KK Cess)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax eCess Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (eCess)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax SHE Cess Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (SHECess)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax SBC Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (SBC)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail.Amount := ROUND(ServTaxEntryDetail.Amount *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
      END ELSE BEGIN
        ServiceTaxEntryDetail."Base Amount" := ROUND(ServTaxEntryDetail."Remaining S.T. Base Amount" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax Amount" := ROUND(ServTaxEntryDetail."Remaining Credit" *
            DistributionLine."Distribution %" / 100 + ABS(RoundingDifference),GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."KK Cess Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (KK Cess)" *
            DistributionLine."Distribution %" / 100 + ABS(RoundingDifference),GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax eCess Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (eCess)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax SHE Cess Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (SHECess)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail."Service Tax SBC Amount" := ROUND(ServTaxEntryDetail."Remaining Credit (SBC)" *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
        ServiceTaxEntryDetail.Amount := ROUND(ServTaxEntryDetail.Amount *
            DistributionLine."Distribution %" / 100,GenLedgSetup."Amount Rounding Precision");
      END;
      ServiceTaxEntryDetail."Remaining Credit" := ServiceTaxEntryDetail."Service Tax Amount";
      ServiceTaxEntryDetail."Remaining Credit (KK Cess)" := ServiceTaxEntryDetail."KK Cess Amount";
      ServiceTaxEntryDetail."Remaining Credit (eCess)" := ServiceTaxEntryDetail."Service Tax eCess Amount";
      ServiceTaxEntryDetail."Remaining Credit (SHECess)" := ServiceTaxEntryDetail."Service Tax SHE Cess Amount";
      ServiceTaxEntryDetail."Remaining Credit (SBC)" := ServiceTaxEntryDetail."Service Tax SBC Amount";
      ServiceTaxEntryDetail."Remaining S.T. Base Amount" := ServiceTaxEntryDetail."Base Amount";
      ServiceTaxEntryDetail.Closed := ServiceTaxEntryDetail."Remaining Credit" = 0;
      ServiceTaxEntryDetail."Closed (eCess)" := ServiceTaxEntryDetail."Remaining Credit (eCess)" = 0;
      ServiceTaxEntryDetail."Closed (SHECess)" := ServiceTaxEntryDetail."Remaining Credit (SHECess)" = 0;
      ServiceTaxEntryDetail."Closed (SBC)" := ServiceTaxEntryDetail."Remaining Credit (SBC)" = 0;
      ServiceTaxEntryDetail."Closed (KK Cess)" := ServiceTaxEntryDetail."Remaining Credit (KK Cess)" = 0;
      ServiceTaxEntryDetail.Amount :=
        ServiceTaxEntryDetail."Base Amount" + ServiceTaxEntryDetail.FullTaxAmount +
        ServiceTaxEntryDetail.FullTaxSBCAmount + ServiceTaxEntryDetail.KKCessAmount;
      ServiceTaxEntryDetail."Transaction No." := TransactionNo;
      ServiceTaxEntryDetail."Location E.C.C. No." := ECCNo;
      ServiceTaxEntryDetail."Location Code" := DistributionLine."To Location";
      ServiceTaxEntryDetail."Input Service Distribution" := SvcTaxEntry2."Input Service Distribution";
      ServiceTaxEntryDetail."GL Account" :=
        ServiceTaxSetup.GetRecAccNoByISD(ServiceTaxEntryDetail."Input Service Distribution");
      ServiceTaxEntryDetail."SBC G/L Account" :=
        ServiceTaxSetup.GetRecSBCAccNoByISD(ServiceTaxEntryDetail."Input Service Distribution");
      ServiceTaxEntryDetail."KK Cess G/L Account" :=
        ServiceTaxSetup.GetKKCessRecAccNoByISD(ServiceTaxEntryDetail."Input Service Distribution");
      ServiceTaxEntryDetail."Distribution No." := '';
      ServiceTaxEntryDetail."ST Credit Received" := TRUE;
      ServiceTaxEntryDetail."Dist. Input Service Tax Credit" := FALSE;
      ServiceTaxEntryDetail."From Location" := DistHeader."From Location";
      ServiceTaxEntryDetail."Applied S.T. Credit" := 0;
      ServiceTaxEntryDetail."Applied S.T. eCess Credit" := 0;
      ServiceTaxEntryDetail."Applied S.T. SHECess Credit" := 0;
      ServiceTaxEntryDetail."Applied ST SBC Credit" := 0;
      ServiceTaxEntryDetail."Applied KK Cess Credit" := 0;
      ServiceTaxEntryDetail."Applied S.T. Base Amount" := 0;
      InitSvcTaxDistribution(ServiceTaxEntryDetail,ServTaxEntryDetail);
      IF NOT DistributionLine."Loading on Services Account" THEN
        ServiceTaxEntryDetail.INSERT(TRUE);
    END;

    PROCEDURE InitSvcTaxDistribution@1500011(ServiceTaxEntryDetail@1500004 : Record 16474;ServiceTaxEntryDetail2@1500005 : Record 16474);
    VAR
      SvcTaxDistribution@1500000 : Record 16576;
      Vendor@1500002 : Record 23;
      PurchInvHeader@1500003 : Record 122;
      EntryNo@1500001 : Integer;
    BEGIN
      Window.UPDATE(2,'Posting Service Tax Distribution');
      SvcTaxDistribution.RESET;
      IF SvcTaxDistribution.FINDLAST THEN
        EntryNo := SvcTaxDistribution."Entry No." + 1
      ELSE
        EntryNo := 1;

      SvcTaxDistribution.INIT;
      SvcTaxDistribution."Entry No." := EntryNo;
      SvcTaxDistribution."From Location" := DistHeader."From Location";
      Vendor.GET(SvcTaxEntry."Party Code");
      SvcTaxDistribution."Vendor Code" := Vendor."No.";
      SvcTaxDistribution."Vendor Name" := Vendor.Name;
      SvcTaxDistribution."Vendor Address" := Vendor.Address;
      IF PurchInvHeader.GET(SvcTaxEntry."Document No.") THEN
        SvcTaxDistribution."Vendor Invoice No" := PurchInvHeader."Vendor Invoice No.";
      SvcTaxDistribution."Invoice Date" := SvcTaxEntry."Posting Date";
      SvcTaxDistribution."Svc. Tax Registration. No Rcpt" := SvcTaxEntry."Service Tax Registration No.";
      SvcTaxDistribution."Service Tax Group Code Rcpt." := SvcTaxEntry."Service Tax Group Code";
      SvcTaxDistribution."Service Tax %" := SvcTaxEntry."Service Tax %";
      SvcTaxDistribution."KK Cess%" := SvcTaxEntry."KK Cess%";
      SvcTaxDistribution."Service Tax eCess %" := SvcTaxEntry."Service Tax eCess %";
      SvcTaxDistribution."Service Tax SHE Cess %" := SvcTaxEntry."Service Tax SHE Cess %";
      SvcTaxDistribution."Service Tax SB Cess %" := SvcTaxEntry."Service Tax SBC %";
      SvcTaxDistribution."Service Tax Entry No. Rcpt." := SvcTaxEntry."Entry No.";
      SvcTaxDistribution."S.T Entry Detail No. Rcpt." := ServiceTaxEntryDetail2."Entry No.";
      SvcTaxDistribution."Service Charges Rcpt" := ServiceTaxEntryDetail2."Base Amount";
      SvcTaxDistribution."To Location" := DistributionLine."To Location";
      SvcTaxDistribution."Distributor Challan No" := PostedDistHeader."No.";
      SvcTaxDistribution."Distribution Date" := DistHeader."Posting Date";
      SvcTaxDistribution."Distribution Basis" := DistHeader."Distribution Basis";
      SvcTaxDistribution."Svc. Tax Registration. No Dist" := Location."Service Tax Registration No.";
      SvcTaxDistribution."Service Tax Group Code Dist." := SvcTaxEntry."Service Tax Group Code";
      SvcTaxDistribution."Service Tax Amount" := ServiceTaxEntryDetail."Service Tax Amount";
      SvcTaxDistribution."KK Cess Amount" := ServiceTaxEntryDetail."KK Cess Amount";
      SvcTaxDistribution."Service Tax eCess Amount" := ServiceTaxEntryDetail."Service Tax eCess Amount";
      SvcTaxDistribution."Service Tax SHE Cess Amount" := ServiceTaxEntryDetail."Service Tax SHE Cess Amount";
      SvcTaxDistribution."Service Tax SBC Amount" := ServiceTaxEntryDetail."Service Tax SBC Amount";
      SvcTaxDistribution."Loaded on Service Account" := DistributionLine."Loading on Services Account";
      SvcTaxDistribution."Service Charges Dist" := ServiceTaxEntryDetail."Base Amount";
      IF NOT DistributionLine."Loading on Services Account" THEN BEGIN
        SvcTaxDistribution."Service Tax Entry No. Dist." := ServiceTaxEntryDetail."Service Tax Entry No.";
        SvcTaxDistribution."S.T Entry Detail No. Dist." := ServiceTaxEntryDetail."Entry No.";
      END;
      SvcTaxDistribution.INSERT;
    END;

    PROCEDURE PostGenJnlLine@1500008(DocNo@1500003 : Code[20]);
    VAR
      SourceCodeSetup@1500002 : Record 242;
      RoundingSign@1500000 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      IF SvcTaxPostingBuffer[1].FINDSET THEN
        REPEAT
          RoundAmount(SvcTaxPostingBuffer[1]);
        UNTIL SvcTaxPostingBuffer[1].NEXT = 0;
      SvcTaxPostingBuffer[1].RESET;
      IF SvcTaxPostingBuffer[1].FINDLAST THEN BEGIN
        SvcTaxPostingBuffer[1].Amount += ROUND(RoundingDifference,GenLedgSetup."Amount Rounding Precision");
        SvcTaxPostingBuffer[1].MODIFY;
        IF (SvcTaxPostingBuffer[1].Amount <> 0) AND (RoundingDifference <> 0) THEN
          RoundingSign := (ABS(RoundingDifference) / RoundingDifference) /
            (ABS(SvcTaxPostingBuffer[1].Amount) / SvcTaxPostingBuffer[1].Amount);
        IF RoundingSign = 0 THEN
          RoundingSign := 1;
        RoundingDifference := RoundingDifference * RoundingSign;
      END;

      IF STaxPostingBuffer[1].FINDSET THEN
        REPEAT
          RoundAmount2(STaxPostingBuffer[1]);
        UNTIL STaxPostingBuffer[1].NEXT = 0;
      STaxPostingBuffer[1].RESET;
      IF STaxPostingBuffer[1].FINDLAST THEN BEGIN
        STaxPostingBuffer[1].Amount += ROUND(RoundingDifference,GenLedgSetup."Amount Rounding Precision");
        STaxPostingBuffer[1].MODIFY;
      END;

      IF STaxPostingBuffer[1].FINDSET THEN
        REPEAT
          GenJnlLine.INIT;
          GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
          GenJnlLine.VALIDATE("Account No.",STaxPostingBuffer[1]."Account No.");
          GenJnlLine."Posting Date" := DistHeader."Posting Date";
          GenJnlLine."Document No." := DocNo;
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine.VALIDATE(Amount,STaxPostingBuffer[1].Amount);
          GenJnlLine."Source Code" := SourceCodeSetup."General Journal";
          GenJnlLine.VALIDATE("Source Type",GenJnlLine."Source Type"::Vendor);
          GenJnlLine."Posting No. Series" := DistHeader."No. Series";
          GenJnlLine."Location Code" := STaxPostingBuffer[1]."Location Code";
          GenJnlLine.Description := 'Distribution Challan No.' + ' ' + PostedDistHeader."No.";
          GenJnlLine."Shortcut Dimension 1 Code" := STaxPostingBuffer[1]."Global Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := STaxPostingBuffer[1]."Global Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := STaxPostingBuffer[1]."Dimension Set ID";
          GenJnlPostLine.RUN(GenJnlLine);
          GenJnlPostLine.GetTransactionNo(TransactionNo);
          SvcTaxPostingBuffer[1].RESET;
          SvcTaxPostingBuffer[1].SETRANGE("Location Code",STaxPostingBuffer[1]."Location Code");
          IF SvcTaxPostingBuffer[1].FINDSET THEN
            REPEAT
              GenJnlLine.INIT;
              GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
              GenJnlLine.VALIDATE("Account No.",SvcTaxPostingBuffer[1]."Account No.");
              GenJnlLine."Posting Date" := DistHeader."Posting Date";
              GenJnlLine."Document No." := DocNo;
              GenJnlLine."System-Created Entry" := TRUE;
              GenJnlLine.VALIDATE(Amount,SvcTaxPostingBuffer[1].Amount);
              GenJnlLine."Source Code" := SourceCodeSetup."General Journal";
              GenJnlLine.VALIDATE("Source Type",GenJnlLine."Source Type"::Vendor);
              GenJnlLine."Posting No. Series" := DistHeader."No. Series";
              GenJnlLine."Location Code" := SvcTaxPostingBuffer[1]."From Location";
              GenJnlLine.Description := 'Distribution Challan No.' + ' ' + PostedDistHeader."No.";
              GenJnlLine."Shortcut Dimension 1 Code" := SvcTaxPostingBuffer[1]."Global Dimension 1 Code";
              GenJnlLine."Shortcut Dimension 2 Code" := SvcTaxPostingBuffer[1]."Global Dimension 2 Code";
              GenJnlLine."Dimension Set ID" := SvcTaxPostingBuffer[1]."Dimension Set ID";
              GenJnlPostLine.RUN(GenJnlLine);
              GenJnlPostLine.GetTransactionNo(TransactionNo);
            UNTIL SvcTaxPostingBuffer[1].NEXT = 0;
        UNTIL STaxPostingBuffer[1].NEXT = 0;
    END;

    PROCEDURE PostGenJnlLine2@1500010(DocNo@1500003 : Code[20];AccountNo@1500001 : Code[20];Amt@1500004 : Decimal;TransactionNo2@1500005 : Integer;GLEntry@1500006 : Record 17);
    VAR
      SourceCodeSetup@1500002 : Record 242;
      LineNo@1500007 : Integer;
    BEGIN
      IF Amt = 0 THEN
        EXIT;
      SourceCodeSetup.GET;
      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Journal Template Name",'');
      GenJnlLine.SETRANGE("Journal Batch Name",'');
      IF NOT GenJnlLine.FINDLAST THEN
        LineNo := 10000
      ELSE
        LineNo := GenJnlLine."Line No.";
      GenJnlLine.INIT;
      GenJnlLine."Line No." := LineNo + 10000;
      GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
      GenJnlLine.VALIDATE("Account No.",AccountNo);
      GenJnlLine."Posting Date" := DistHeader."Posting Date";
      GenJnlLine."Document No." := DocNo;
      GenJnlLine."System-Created Entry" := TRUE;
      GenJnlLine.VALIDATE(Amount,Amt);
      GenJnlLine."Source Code" := SourceCodeSetup.Purchases;
      GenJnlLine.VALIDATE("Source Type",GenJnlLine."Source Type"::Vendor);
      SvcTaxEntry.RESET;
      SvcTaxEntry.SETRANGE("Transaction No.",TransactionNo2);
      IF SvcTaxEntry.FINDFIRST THEN;
      GenJnlLine."Source No." := SvcTaxEntry."Party Code";
      GenJnlLine."Posting No. Series" := DistHeader."No. Series";
      GenJnlLine.Description := 'Distribution Challan No.' + ' ' + PostedDistHeader."No.";
      GenJnlLine."Shortcut Dimension 1 Code" := GLEntry."Global Dimension 1 Code";
      GenJnlLine."Shortcut Dimension 2 Code" := GLEntry."Global Dimension 2 Code";
      GenJnlLine."Dimension Set ID" := GLEntry."Dimension Set ID";
      GenJnlPostLine.RUN(GenJnlLine);
    END;

    PROCEDURE FillSTaxPostingBuffer@1280009(AccType@1500010 : 'GL,Bank';AccNo@1500009 : Code[20];DebitEntry@1500008 : Boolean;Amount@1500007 : Decimal;LineNo@1500006 : Integer;ChqNo@1500005 : Code[10];ReverseCharge@1500004 : Boolean;BalAccNo@1500003 : Code[20];LocationCode@1500002 : Code[20];GlobalDimCode1@1500001 : Code[20];GlobalDimCode2@1500000 : Code[20];DimSetID@1500011 : Integer);
    BEGIN
      IF Amount = 0 THEN
        EXIT;
      STaxPostingBuffer[1].Type := AccType;
      IF AccType = AccType::Bank THEN
        STaxPostingBuffer[1]."Cheque No." := ChqNo;
      STaxPostingBuffer[1]."Account No." := AccNo;
      IF DebitEntry THEN
        STaxPostingBuffer[1].Amount := Amount
      ELSE
        STaxPostingBuffer[1].Amount := -Amount;
      STaxPostingBuffer[1]."System-Created Entry" := TRUE;
      STaxPostingBuffer[1]."Serv. Tax Reverse Charge" := ReverseCharge;
      STaxPostingBuffer[1]."Bal. Account No." := BalAccNo;
      STaxPostingBuffer[1]."Location Code" := LocationCode;
      STaxPostingBuffer[1]."Global Dimension 1 Code" := GlobalDimCode1;
      STaxPostingBuffer[1]."Global Dimension 2 Code" := GlobalDimCode2;
      STaxPostingBuffer[1]."Dimension Set ID" := DimSetID;
      STaxPostingBuffer[1]."Line No." := LineNo;
      UpdSTaxPostingBuffer(LineNo);
    END;

    LOCAL PROCEDURE UpdSTaxPostingBuffer@1280010(LineNo@1500001 : Integer);
    BEGIN
      STaxPostingBuffer[2] := STaxPostingBuffer[1];
      IF STaxPostingBuffer[2].FIND THEN BEGIN
        STaxPostingBuffer[2].Amount := STaxPostingBuffer[2].Amount + STaxPostingBuffer[1].Amount;
        STaxPostingBuffer[2].MODIFY;
      END ELSE
        STaxPostingBuffer[1].INSERT;
    END;

    PROCEDURE FillSTaxPostingBuffer2@1500013(AccType@1500011 : 'GL,Bank';AccNo@1500010 : Code[20];DebitEntry@1500009 : Boolean;Amount@1500008 : Decimal;LineNo@1500007 : Integer;ChqNo@1500006 : Code[10];ReverseCharge@1500005 : Boolean;BalAccNo@1500004 : Code[20];LocationCode@1500003 : Code[20];FromLocation@1500002 : Code[20];GlobalDimCode1@1500001 : Code[20];GlobalDimCode2@1500000 : Code[20];DimSetID@1500012 : Integer);
    BEGIN
      IF Amount = 0 THEN
        EXIT;
      SvcTaxPostingBuffer[1].Type := AccType;
      IF AccType = AccType::Bank THEN
        SvcTaxPostingBuffer[1]."Cheque No." := ChqNo;
      SvcTaxPostingBuffer[1]."Account No." := AccNo;
      IF DebitEntry THEN
        SvcTaxPostingBuffer[1].Amount := Amount
      ELSE
        SvcTaxPostingBuffer[1].Amount := -Amount;
      SvcTaxPostingBuffer[1]."System-Created Entry" := TRUE;
      SvcTaxPostingBuffer[1]."Serv. Tax Reverse Charge" := ReverseCharge;
      SvcTaxPostingBuffer[1]."Bal. Account No." := BalAccNo;
      SvcTaxPostingBuffer[1]."Location Code" := LocationCode;
      SvcTaxPostingBuffer[1]."From Location" := FromLocation;
      SvcTaxPostingBuffer[1]."Global Dimension 1 Code" := GlobalDimCode1;
      SvcTaxPostingBuffer[1]."Global Dimension 2 Code" := GlobalDimCode2;
      SvcTaxPostingBuffer[1]."Dimension Set ID" := DimSetID;
      SvcTaxPostingBuffer[1]."Line No." := LineNo;
      UpdSTaxPostingBuffer2(LineNo);
    END;

    LOCAL PROCEDURE UpdSTaxPostingBuffer2@1500012(LineNo@1500001 : Integer);
    BEGIN
      SvcTaxPostingBuffer[2] := SvcTaxPostingBuffer[1];
      IF SvcTaxPostingBuffer[2].FIND THEN BEGIN
        SvcTaxPostingBuffer[2].Amount := SvcTaxPostingBuffer[2].Amount + SvcTaxPostingBuffer[1].Amount;
        SvcTaxPostingBuffer[2].MODIFY;
      END ELSE
        SvcTaxPostingBuffer[1].INSERT;
    END;

    PROCEDURE GetAmount@1500009(Percent@1500000 : Decimal;STaxEntryDetail@1500001 : Record 16474) : Decimal;
    BEGIN
      EXIT((STaxEntryDetail."Remaining Credit" + STaxEntryDetail."Remaining Credit (eCess)" +
            STaxEntryDetail."Remaining Credit (SHECess)" + STaxEntryDetail."KK Cess Amount") * Percent / 100);
    END;

    PROCEDURE RoundAmount@1500014(VAR ServiceTaxPostingBuffer@1500000 : Record 16582);
    BEGIN
      RoundingDifference += ServiceTaxPostingBuffer.Amount - ROUND(ServiceTaxPostingBuffer.Amount);
      ServiceTaxPostingBuffer.Amount := ROUND(ServiceTaxPostingBuffer.Amount,GenLedgSetup."Amount Rounding Precision");
      ServiceTaxPostingBuffer.MODIFY;
    END;

    PROCEDURE RoundAmount2@1500021(VAR ServiceTaxPostingBuffer@1500000 : Record 16581);
    BEGIN
      ServiceTaxPostingBuffer.Amount := ROUND(ServiceTaxPostingBuffer.Amount,GenLedgSetup."Amount Rounding Precision");
      ServiceTaxPostingBuffer.MODIFY;
    END;

    PROCEDURE GetSvcTaxEntryNo@1500015(VAR EntryNo@1500000 : Integer;VAR ServiceTaxEntryDetail@1500001 : Record 16474;VAR SkipExecution@1500003 : Boolean);
    VAR
      ServTaxEntryDetail@1500002 : Record 16474;
    BEGIN
      SvcTaxDistribution.RESET;
      SvcTaxDistribution.SETRANGE("S.T Entry Detail No. Dist.",ServiceTaxEntryDetail."Entry No.");
      IF SvcTaxDistribution.FINDFIRST THEN BEGIN
        IF ServTaxEntryDetail.GET(SvcTaxDistribution."S.T Entry Detail No. Rcpt.") AND
           NOT ServTaxEntryDetail."ST Credit Received"
        THEN BEGIN
          EntryNo := ServTaxEntryDetail."Service Tax Entry No.";
          SkipExecution := TRUE;
        END ELSE
          ServiceTaxEntryDetail := ServTaxEntryDetail;
      END ELSE
        SkipExecution := TRUE;
    END;

    BEGIN
    END.
  }
}

