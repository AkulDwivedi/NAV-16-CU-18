OBJECT Codeunit 11 Gen. Jnl.-Check Line
{
  OBJECT-PROPERTIES
  {
    Date=01-08-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48992,NAVIN9.00.00.48992;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 252=rimd;
    OnRun=BEGIN
            GLSetup.GET;
            RunCheck(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=can only be a closing date for G/L entries;ENN=can only be a closing date for G/L entries';
      Text001@1001 : TextConst 'ENU=is not within your range of allowed posting dates;ENN=is not within your range of allowed posting dates';
      Text002@1002 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;ENN=%1 or %2 must be G/L Account or Bank Account.';
      Text003@1003 : TextConst 'ENU=must have the same sign as %1;ENN=must have the same sign as %1';
      Text004@1004 : TextConst 'ENU=You must not specify %1 when %2 is %3.;ENN=You must not specify %1 when %2 is %3.';
      Text005@1005 : TextConst 'ENU=%1 + %2 must be %3.;ENN=%1 + %2 must be %3.';
      Text006@1006 : TextConst 'ENU=%1 + %2 must be -%3.;ENN=%1 + %2 must be -%3.';
      Text007@1007 : TextConst 'ENU=must be positive;ENN=must be positive';
      Text008@1008 : TextConst 'ENU=must be negative;ENN=must be negative';
      Text009@1009 : TextConst 'ENU=must have a different sign than %1;ENN=must have a different sign than %1';
      Text010@1010 : TextConst 'ENU=%1 %2 and %3 %4 is not allowed.;ENN=%1 %2 and %3 %4 is not allowed.';
      Text011@1011 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;ENN=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5';
      Text012@1012 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;ENN=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      AccountingPeriod@1013 : Record 50;
      GLSetup@1014 : Record 98;
      UserSetup@1015 : Record 91;
      GenJnlTemplate@1020 : Record 80;
      CostAccSetup@1024 : Record 1108;
      DimMgt@1017 : Codeunit 408;
      CostAccMgt@1023 : Codeunit 1100;
      GSTManagement@1500022 : Codeunit 16401;
      AllowPostingFrom@1018 : Date;
      AllowPostingTo@1019 : Date;
      GenJnlTemplateFound@1021 : Boolean;
      OverrideDimErr@1022 : Boolean;
      Text13700@1280002 : TextConst 'ENU=Please check the total of PLA, RG 23 A and RG 23 C with Excise Amount.;ENN=Please check the total of PLA, RG 23 A and RG 23 C with Excise Amount.';
      Text13701@1280001 : TextConst 'ENU=Amount cannot be withdrawn from the PLA Account. Please check Line no. %1.;ENN=Amount cannot be withdrawn from the PLA Account. Please check Line no. %1.';
      Text13702@1280000 : TextConst 'ENU=Amount should be equal to the allocated PLA amounts.;ENN=Amount should be equal to the allocated PLA amounts.';
      ExciseEntry@1280003 : Record 13712;
      TDSEntry@1280007 : Record 13729;
      TaxEntry@1280006 : Record 13700;
      RT12@1280004 : Record 13755;
      Text16500@1500000 : TextConst 'ENU=e-TDS entry does not exist for TDS entry No. %1.;ENN=e-TDS entry does not exist for TDS entry No. %1.';
      TCSEntry@1500001 : Record 16514;
      Text16501@1500002 : TextConst 'ENU=e-TCS entry does not exist for TCS entry No. %1.;ENN=e-TCS entry does not exist for TCS entry No. %1.';
      Text16504@1500007 : TextConst 'ENU=Document Type should be Payment or Refund in case of service tax on advance payment.;ENN=Document Type should be Payment or Refund in case of service tax on advance payment.';
      Text16505@1500005 : TextConst 'ENU=Account Type must be Vendor or Customer for Serv. Tax on Advance Payment.;ENN=Account Type must be Vendor or Customer for Serv. Tax on Advance Payment.';
      Text16507@1500008 : TextConst 'ENU="Service Tax Type = Charge not allowed for Template=%1, Batch=%2 and Line No.=%3.";ENN="Service Tax Type = Charge not allowed for Template=%1, Batch=%2 and Line No.=%3."';
      Text16508@1500009 : TextConst 'ENU="Both Account No. and Bal. Account No. are not services account for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3.";ENN="Both Account No. and Bal. Account No. are not services account for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3."';
      Text16509@1500010 : TextConst 'ENU="Both Account No. and Bal. Account No. cannot be services account for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3.";ENN="Both Account No. and Bal. Account No. cannot be services account for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3."';
      Text16510@1500011 : TextConst 'ENU="Amount must be positive for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3.";ENN="Amount must be positive for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3."';
      Text16511@1500012 : TextConst 'ENU="Amount must be negative for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3.";ENN="Amount must be negative for Journal Template Name = %1,\Journal batch Name = %2,  Line No. = %3."';
      Text16512@1500013 : TextConst 'ENU="Account Type & Bal. Account Type combination should be G/L Account - G/L Account or \G/L Account - Bank Account for Journal Template Name = %1,Journal batch Name = %2,  Line No. = %3.";ENN="Account Type & Bal. Account Type combination should be G/L Account - G/L Account or \G/L Account - Bank Account for Journal Template Name = %1,Journal batch Name = %2,  Line No. = %3."';
      SalesDocumentNo@1500014 : Code[20];
      ExciseCenvatClaim@1500015 : Record 16584;
      TaxJnlLine@1500016 : Record 16587;
      Text16513@1500017 : TextConst 'ENU=Either all or none of the applied entries should have check marks in the Input Service Distribution field.;ENN=Either all or none of the applied entries should have check marks in the Input Service Distribution field.';
      Text16514@1500018 : TextConst 'ENU=should not be negative;ENN=should not be negative';
      Text16521@1500021 : TextConst 'ENU=Bal. Account Type should not be %1 for TDS transactions when Account Type is %2.;ENN=Bal. Account Type should not be %1 for TDS transactions when Account Type is %2.';
      Text16515@1500003 : TextConst 'ENU=Service group %1 is used in one or more of the lines. You must set the %2 field to Yes when the service tax reverse charge is different from 100 percent.;ENN=Service group %1 is used in one or more of the lines. You must set the %2 field to Yes when the service tax reverse charge is different from 100 percent.';
      Text16516@1500004 : TextConst 'ENU=Service group %1 is used in one or more of the lines. You must set the %2 field to No when the service tax reverse charge is 100 percent.;ENN=Service group %1 is used in one or more of the lines. You must set the %2 field to No when the service tax reverse charge is 100 percent.';
      Text16518@1500019 : TextConst 'ENU=You cannot post the document because amounts are in foreign currency and one or more of the lines uses service group %1, which has a service tax reverse charge percentage.;ENN=You cannot post the document because amounts are in foreign currency and one or more of the lines uses service group %1, which has a service tax reverse charge percentage.';
      Text16519@1500020 : TextConst 'ENU=You cannot post the document because it has an abatement percentage specified in the Service Tax setup window, and one or more of the lines uses service group %1, which has a service tax reverse charge percentage that is different from 100 percent.;ENN=You cannot post the document because it has an abatement percentage specified in the Service Tax setup window, and one or more of the lines uses service group %1, which has a service tax reverse charge percentage that is different from 100 percent.';
      Text16520@1500006 : TextConst 'ENU=You cannot post the document because amounts are in foreign currency and the %1 field is not selected.;ENN=You cannot post the document because amounts are in foreign currency and the %1 field is not selected.';
      SalesDocAlreadyExistsErr@1026 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Sales %1 %2 already exists.;ENN=Sales %1 %2 already exists.';
      PurchDocAlreadyExistsErr@1025 : TextConst '@@@="%1 = Document Type; %2 = Document No.";ENU=Purchase %1 %2 already exists.;ENN=Purchase %1 %2 already exists.';
      IsBatchMode@1016 : Boolean;
      SimilarAmountErr@1500027 : TextConst 'ENU=Adjustment Journal amount must be equivalant to Refund & Advance Payment amount;ENN=Adjustment Journal amount must be equivalant to Refund & Advance Payment amount';
      SimilarGSTPlaceSupplyErr@1500030 : TextConst 'ENU=You must select same GST Place of supply as %1;ENN=You must select same GST Place of supply as %1';
      SelectAdvPaymentErr@1500023 : TextConst 'ENU=You must create the advance payment entry;ENN=You must create the advance payment entry';
      DocHSNAlreadyExistsErr@1500024 : TextConst '@@@="%1 = Transaction Type, %2 = Field Reference, %3 = Document Type; %4 = Field Reference, %5 = Document No., %6 = Field Reference, %7 = HSNCode, %8 = Table Name ";ENU="%1 %2 = %3, %4 = %5, %6 = %7 already exist in %8.";ENN="%1 %2 = %3, %4 = %5, %6 = %7 already exist in %8."';

    PROCEDURE RunCheck@4(VAR GenJnlLine@1000 : Record 81);
    VAR
      PaymentTerms@1004 : Record 3;
      Cust@1005 : Record 18;
      Vendor@1006 : Record 23;
      ICPartner@1007 : Record 413;
      ICGLAcount@1008 : Record 410;
      Location@1500010 : Record 14;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
      ServiceTaxMgt@1500000 : Codeunit 16471;
      GenJnlPostLine@1500011 : Codeunit 12;
      CheckExistsCust@1500003 : Record 18;
      CheckExistsVend@1500002 : Record 23;
      VendLedgEntry@1500004 : Record 25;
      ISDCount@1500005 : Integer;
      Job@1500006 : Record 167;
      GenJnlLineTDSBal@1500007 : Record 81;
      TDSBalEntryFound@1500008 : Boolean;
      BalAccountType@1500009 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';
      SrvTaxReverseChrgSetup@1500001 : Record 16461;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;
        IF NOT GenJnlTemplateFound THEN BEGIN
          IF GenJnlTemplate.GET("Journal Template Name") THEN;
          GenJnlTemplateFound := TRUE;
        END;

        IF IsServTaxRevChrgSplit THEN BEGIN
          IF NOT PoT THEN
            ERROR(Text16515,"Service Tax Group Code",FIELDCAPTION(PoT));
          IF HasServiceTaxAbatement THEN
            ERROR(Text16519,"Service Tax Group Code");
        END;
        IF "Tax Type" <> "Tax Type" ::" " THEN BEGIN
          GSTManagement.CheckGSTAccountingPeriod("Posting Date");
          TESTFIELD("Document Type", "Document Type"::" ");
          TESTFIELD("Location Code");
          TESTFIELD("GST Component Code");
          TESTFIELD("Bal. Account No.");
          TESTFIELD("Location State Code");
          Location.GET("Location Code");
          Location.TESTFIELD("State Code");
          Location.TESTFIELD("GST Registration No.");
          IF Amount < 0 THEN
            FIELDERROR(Amount,Text007);
        END;

        IF ("Document Type" IN ["Document Type"::Refund,"Document Type"::Payment]) AND
          ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor])
        THEN BEGIN
          IF "GST on Advance Payment" THEN
            TESTFIELD("GST Base Amount");
          GenJnlPostLine.CheckValidationsForGST("Journal Template Name","Journal Batch Name","Document No.");
          IF ("Account Type" = "Account Type"::Vendor) AND "GST on Advance Payment" THEN
            GenJnlPostLine.CheckSimilarGSTGroupType(GenJnlLine);
          IF "Adv. Pmt. Adjustment" THEN
            CheckAdjstAdvJournals(GenJnlLine);
        END;
        IF TryGetSrvTaxReverseChargeSetup(SrvTaxReverseChrgSetup) THEN BEGIN
          IF PoT AND (SrvTaxReverseChrgSetup."Reverse Charge %" = 100) THEN
            ERROR(Text16516,"Service Tax Group Code",FIELDCAPTION(PoT));
          IF "Currency Code" <> '' THEN
            ERROR(Text16518,"Service Tax Group Code");
        END;

        IF (("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor)) AND
           HasServiceTax AND NOT PoT AND ("Currency Code" <> '')
        THEN
          ERROR(STRSUBSTNO(Text16520,FIELDCAPTION(PoT)));

        CASE "Document Type" OF
          "Document Type"::Invoice,
          "Document Type"::"Credit Memo":
             BEGIN
               IF "Serv. Tax on Advance Payment" THEN
                 ERROR(Text16504);
               CheckServiceTaxForApplication(GenJnlLine);
             END;
          "Document Type"::Payment,
          "Document Type"::Refund:
             BEGIN
               IF "Serv. Tax on Advance Payment" THEN BEGIN
                 IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
                   ERROR(Text16505);
                 IF NOT "Offline Application" THEN BEGIN
                   TESTFIELD("Service Tax Registration No.");
                   TESTFIELD("Service Tax Group Code");
                   IF "Document Type" = "Document Type"::Payment THEN BEGIN
                     TESTFIELD("Applies-to Doc. No.",'');
                     TESTFIELD("Applies-to ID",'');
                   END;
                 END;
               END ELSE
                 IF "E.C.C. No." = '' THEN BEGIN
                   TESTFIELD("Service Tax Registration No.",'');
                   TESTFIELD("Service Tax Group Code",'')
                 END;
               CheckServiceTaxForApplication(GenJnlLine);
             END;
        END;

        IF ("Service Tax Amount" <> 0) AND ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND
           (NOT "Serv. Tax on Advance Payment")
        THEN BEGIN
          IF "Service Tax Type" = "Service Tax Type"::Charge THEN
            ERROR(Text16507,"Journal Template Name","Journal Batch Name","Line No.");
          IF "Service Tax Type" = "Service Tax Type"::Purchase THEN BEGIN
            TESTFIELD("Party Type","Party Type"::Vendor);
            TESTFIELD("Party Code");
            CheckExistsVend.GET("Party Code");
          END;
          IF "Service Tax Type" = "Service Tax Type"::Sale THEN BEGIN
            TESTFIELD("Party Type","Party Type"::Customer);
            TESTFIELD("Party Code");
            CheckExistsCust.GET("Party Code");
          END;
          CheckDirectServiceTax(GenJnlLine);
        END;

        IF ("Account Type" = "Account Type"::Vendor) AND ("Document Type" = "Document Type"::Payment) AND
           ("Applies-to ID" <> '') AND (NOT "Offline Application")
        THEN BEGIN
          VendLedgEntry.SetAppliesToIDFilter("Account No.","Applies-to ID");
          VendLedgEntry.SETRANGE("Input Service Distribution",TRUE);
          IF VendLedgEntry.FINDFIRST THEN BEGIN
            ISDCount := VendLedgEntry.COUNT;
            VendLedgEntry.SETRANGE("Input Service Distribution");
            IF ISDCount <> VendLedgEntry.COUNT THEN
              ERROR(Text16513);
          END;
        END;
        TESTFIELD("Posting Date");
        IF "Posting Date" <> NORMALDATE("Posting Date") THEN BEGIN
          IF ("Account Type" <> "Account Type"::"G/L Account") OR
             ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
          THEN
            FIELDERROR("Posting Date",Text000);
          AccountingPeriod.GET(NORMALDATE("Posting Date") + 1);
          AccountingPeriod.TESTFIELD("New Fiscal Year",TRUE);
          AccountingPeriod.TESTFIELD("Date Locked",TRUE);
        END;

        IF DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text001);

        IF "Document Date" <> 0D THEN
          IF ("Document Date" <> NORMALDATE("Document Date")) AND
             (("Account Type" <> "Account Type"::"G/L Account") OR
              ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account"))
          THEN
            FIELDERROR("Document Date",Text000);

        TESTFIELD("Document No.");

        IF ("Job No." <> '') AND (NOT "System-Created Entry") THEN BEGIN
          Job.GET("Job No.");
          IF Job."Job Type" = Job."Job Type"::"Capital WIP" THEN BEGIN
            IF NOT ("Job Line Type" IN ["Job Line Type"::" ","Job Line Type"::Schedule]) THEN
              FIELDERROR("Job Line Type");
            IF "CWIP G/L Type" = "CWIP G/L Type"::" " THEN
              FIELDERROR("CWIP G/L Type");
            TESTFIELD("Account Type","Account Type"::"G/L Account");
            TESTFIELD(PLA,FALSE);
          END ELSE
            TESTFIELD("CWIP G/L Type","CWIP G/L Type"::" ");
        END ELSE
          IF NOT "System-Created Entry" THEN
            TESTFIELD("CWIP G/L Type","CWIP G/L Type"::" ");

        GLSetup.GET;
        IF GLSetup."Activate Cheque No." AND ("Bank Payment Type" = "Bank Payment Type"::"Manual Check") THEN BEGIN
          TESTFIELD("Cheque No.");
          TESTFIELD("Cheque Date");
        END;

        IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) OR "Serv. Tax on Advance Payment" THEN
          IF "Service Tax Amount" <> 0 THEN
            ServiceTaxMgt.CheckJournalLines(GenJnlLine);
        IF "Pay Excise" THEN BEGIN
          TESTFIELD("Bal. Account No.",'');
          IF SalesDocumentNo = '' THEN
            SalesDocumentNo := "Document No.";
          ExciseCenvatClaim.RESET;
          ExciseCenvatClaim.SETRANGE("Journal Template Name","Journal Template Name");
          ExciseCenvatClaim.SETRANGE("Journal Batch Name","Journal Batch Name");
          ExciseCenvatClaim.SETRANGE("Line No.","Line No.");
          ExciseCenvatClaim.SETRANGE("Document No.",SalesDocumentNo);
          IF ExciseCenvatClaim.FINDFIRST THEN;
          IF NOT "Excise as Service Tax Credit" THEN
            ServiceTaxMgt.CheckAppliedServiceTax(ExciseCenvatClaim."ST BED Amount" + ExciseCenvatClaim."ST AED(GSI) Amount" +
              ExciseCenvatClaim."ST AED(TTA) Amount" + ExciseCenvatClaim."ST SED Amount" +
              ExciseCenvatClaim."ST SAED Amount" + ExciseCenvatClaim."ST NCCD Amount" + ExciseCenvatClaim."ST ADET Amount" +
              ExciseCenvatClaim."ST ADE Amount",ExciseCenvatClaim."ST eCESS Amount",ExciseCenvatClaim."ST SHECess Amount",
              SalesDocumentNo);

          IF (ExciseCenvatClaim."AED(GSI) Amount" + ExciseCenvatClaim."CESS Amount" + ExciseCenvatClaim."NCCD Amount" +
            ExciseCenvatClaim."BED Amount" + ExciseCenvatClaim."SED Amount" + ExciseCenvatClaim."SAED Amount" +
            ExciseCenvatClaim."eCess Amount" + ExciseCenvatClaim."Excise Charge Amount" + ExciseCenvatClaim."ADET Amount" +
            ExciseCenvatClaim."AED(TTA) Amount" + ExciseCenvatClaim."ADE Amount" +
            ExciseCenvatClaim."ADC VAT Amount" + ExciseCenvatClaim."SHE Cess Amount") <>
            (ExciseCenvatClaim."RG 23A PART II AED(GSI) Amount" + ExciseCenvatClaim."RG 23C PART II AED(GSI) Amount" +
            ExciseCenvatClaim."RG 23 A PART II NCCD Amount" + ExciseCenvatClaim."RG 23 C PART II NCCD Amount" +
            ExciseCenvatClaim."RG 23 A PART II BED Amount" + ExciseCenvatClaim."RG 23 C PART II BED Amount" +
            ExciseCenvatClaim."RG 23 A PART II SED Amount" + ExciseCenvatClaim."RG 23 C PART II SED Amount" +
            ExciseCenvatClaim."RG 23 A PART II SAED Amount" + ExciseCenvatClaim."RG 23 C PART II SAED Amount" +
            ExciseCenvatClaim."RG 23 A PART II eCess Amount" + ExciseCenvatClaim."RG 23 C PART II eCess Amount" +
            ExciseCenvatClaim."RG 23 A Part II ADET Amount" + ExciseCenvatClaim."RG 23 C Part II ADET Amount" +
            ExciseCenvatClaim."RG 23A PART II AED(TTA) Amount" + ExciseCenvatClaim."RG 23C PART II AED(TTA) Amount" +
            ExciseCenvatClaim."RG 23 A Part II ADE Amount" + ExciseCenvatClaim."RG 23 C Part II ADE Amount" +
            ExciseCenvatClaim."RG 23 A PART II ADC VAT Amount" + ExciseCenvatClaim."RG 23 C PART II ADC VAT Amount" +
            ExciseCenvatClaim."RG 23 A Part II SHECess Amount" + ExciseCenvatClaim."RG 23 C Part II SHECess Amount" +
            ExciseCenvatClaim."PLA AED(GSI) Amount" + ExciseCenvatClaim."PLA CESS Amount" + ExciseCenvatClaim."PLA NCCD Amount" +
            ExciseCenvatClaim."PLA BED Amount" + ExciseCenvatClaim."PLA SED Amount" + ExciseCenvatClaim."PLA SAED Amount" +
            ExciseCenvatClaim."PLA eCess Amount" +
            ExciseCenvatClaim."PLA ADET Amount" + ExciseCenvatClaim."PLA Excise Charge Amount" +
            ExciseCenvatClaim."PLA AED(TTA) Amount" + ExciseCenvatClaim."PLA ADE Amount" + ExciseCenvatClaim."PLA SHE Cess Amount" +
            ExciseCenvatClaim."ST AED(GSI) Amount" + ExciseCenvatClaim."ST NCCD Amount" + ExciseCenvatClaim."ST BED Amount" +
            ExciseCenvatClaim."ST SED Amount" + ExciseCenvatClaim."ST SAED Amount" + ExciseCenvatClaim."ST eCESS Amount" +
            ExciseCenvatClaim."ST ADET Amount" + ExciseCenvatClaim."ST AED(TTA) Amount" + ExciseCenvatClaim."ST ADE Amount" +
            ExciseCenvatClaim."ST SHECess Amount")
          THEN
            ERROR(Text13700);

          ExciseEntry.LOCKTABLE;
          ExciseEntry.SETRANGE("Modvat Claimed Doc No.","Document No.");
          IF ExciseEntry.FIND('-') THEN
            REPEAT
              ExciseEntry.Paid := TRUE;
              ExciseEntry.MODIFY;
              RT12.SETRANGE("Order No.",ExciseEntry."Document No.");
              IF RT12.FIND('-') THEN
                REPEAT
                  RT12.Paid := ExciseEntry.Paid;
                  RT12.MODIFY;
                UNTIL RT12.NEXT = 0;
            UNTIL ExciseEntry.NEXT = 0;
        END;

        IF PLA THEN BEGIN
          GLSetup.GET;
          GLSetup.TESTFIELD("PLA Account");
          TESTFIELD("Account No.",GLSetup."PLA Account");
          TESTFIELD("E.C.C. No.");

          TaxJnlLine.RESET;
          TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
          TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
          TaxJnlLine.SETRANGE("Line No.","Line No.");
          TaxJnlLine.SETRANGE("Document No.","Document No.");
          IF SalesDocumentNo <> '' THEN
            TaxJnlLine.SETRANGE("Document No.",SalesDocumentNo);
          TaxJnlLine.FINDFIRST;

          IF Amount <>
               (TaxJnlLine."PLA BED Amount" + TaxJnlLine."PLA AED(GSI) Amount" + TaxJnlLine."PLA CESS Amount" +
                TaxJnlLine."PLA SAED Amount" + TaxJnlLine."PLA SED Amount" + TaxJnlLine."PLA NCCD Amount" +
                TaxJnlLine."PLA eCess Amount" + TaxJnlLine."PLA Excise Charge Amount" + TaxJnlLine."PLA AED(TTA) Amount" +
                TaxJnlLine."PLA ADET Amount" + TaxJnlLine."PLA ADE Amount" + TaxJnlLine."PLA SHE Cess Amount")
          THEN
            ERROR(Text13702);
          IF Amount < 0 THEN
            ERROR(Text13701,"Line No.");
          IF TaxJnlLine."PLA BED Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA BED Amount",Text16514);
          IF TaxJnlLine."PLA AED(GSI) Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA AED(GSI) Amount",Text16514);
          IF TaxJnlLine."PLA CESS Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA CESS Amount",Text16514);
          IF TaxJnlLine."PLA SAED Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA SAED Amount",Text16514);
          IF TaxJnlLine."PLA SED Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA SED Amount",Text16514);
          IF TaxJnlLine."PLA NCCD Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA NCCD Amount",Text16514);
          IF TaxJnlLine."PLA eCess Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA eCess Amount",Text16514);
          IF TaxJnlLine."PLA Excise Charge Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA Excise Charge Amount",Text16514);
          IF TaxJnlLine."PLA AED(TTA) Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA AED(TTA) Amount",Text16514);
          IF TaxJnlLine."PLA ADET Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA ADET Amount",Text16514);
          IF TaxJnlLine."PLA ADE Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA ADE Amount",Text16514);
          IF TaxJnlLine."PLA SHE Cess Amount" < 0 THEN
            TaxJnlLine.FIELDERROR("PLA SHE Cess Amount",Text16514);

        END;
        IF Adjustment AND (NOT "VAT Adjustment Entry") THEN BEGIN
          TaxJnlLine.RESET;
          TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
          TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
          TaxJnlLine.SETRANGE("Line No.","Line No.");
          TaxJnlLine.SETRANGE("Document No.","Document No.");
          IF SalesDocumentNo <> '' THEN
            TaxJnlLine.SETRANGE("Document No.",SalesDocumentNo);
          TaxJnlLine.FINDFIRST;

          TDSEntry.RESET;
          TDSEntry.SETRANGE("Entry No.",TaxJnlLine."TDS/TCS Transaction No.");
          TDSEntry.SETRANGE("Document No.",TaxJnlLine."TDS/TCS Invoice No.");
          IF TDSEntry.FIND('-') THEN BEGIN
            TDSEntry.TESTFIELD("TDS Paid",FALSE);
            TDSEntry."Challan Date" := "Challan Date";
            TDSEntry."Challan No." := "Challan No.";

            IF TaxJnlLine."TDS/TCS % Applied" <> 0 THEN
              TDSEntry."Adjusted TDS %" := TaxJnlLine."TDS/TCS % Applied"
            ELSE
              IF (TaxJnlLine."TDS/TCS Adjusted") AND (TaxJnlLine."TDS/TCS % Applied" = 0) THEN
                TDSEntry."Adjusted TDS %" := TaxJnlLine."TDS/TCS % Applied"
            ELSE
              IF (NOT TaxJnlLine."TDS/TCS Adjusted") AND (TaxJnlLine."TDS/TCS % Applied" = 0) THEN
                TDSEntry."Adjusted TDS %" := TDSEntry."TDS %";

            IF TaxJnlLine."Surcharge % Applied" <> 0 THEN
              TDSEntry."Adjusted Surcharge %" := TaxJnlLine."Surcharge % Applied"
            ELSE
              IF (TaxJnlLine."Surcharge Adjusted") AND (TaxJnlLine."Surcharge % Applied" = 0) THEN
                TDSEntry."Adjusted Surcharge %" := TaxJnlLine."Surcharge % Applied"
            ELSE
              IF (NOT TaxJnlLine."Surcharge Adjusted") AND (TaxJnlLine."Surcharge % Applied" = 0) THEN
                TDSEntry."Adjusted Surcharge %" := TDSEntry."Surcharge %";

            IF TaxJnlLine."eCESS % Applied" <> 0 THEN
              TDSEntry."Adjusted eCESS %" := TaxJnlLine."eCESS % Applied"
            ELSE
              IF (TaxJnlLine."TDS/TCS eCess Adjusted") AND (TaxJnlLine."eCESS % Applied" = 0) THEN
                TDSEntry."Adjusted eCESS %" :=  TaxJnlLine."eCESS % Applied"
            ELSE
              IF (NOT TaxJnlLine."TDS/TCS eCess Adjusted") AND (TaxJnlLine."eCESS % Applied" = 0) THEN
                TDSEntry."Adjusted eCESS %" := TDSEntry."eCESS %";

            IF TaxJnlLine."SHE Cess % Applied" <> 0 THEN
              TDSEntry."Adjusted SHE CESS %" := TaxJnlLine."SHE Cess % Applied"
            ELSE
              IF (TaxJnlLine."TDS/TCS SHE Cess Adjusted") AND (TaxJnlLine."SHE Cess % Applied" = 0) THEN
                TDSEntry."Adjusted SHE CESS %" := TaxJnlLine."SHE Cess % Applied"
            ELSE
              IF (NOT TaxJnlLine."TDS/TCS SHE Cess Adjusted") AND (TaxJnlLine."SHE Cess % Applied" = 0) THEN
                TDSEntry."Adjusted SHE CESS %" := TDSEntry."SHE Cess %";

            IF "Work Tax" THEN BEGIN
              IF Adjustment AND ("Work Tax % Applied" <> 0) THEN
                TDSEntry."Adjusted Work Tax %" := "Work Tax % Applied";
              IF Adjustment AND ("Work Tax % Applied" = 0) AND NOT "Reverse Work Tax"  THEN
                TDSEntry."Adjusted Work Tax %" := "Work Tax %";
              IF Adjustment AND ("Work Tax % Applied" = 0) AND "Reverse Work Tax"  THEN
                TDSEntry."Adjusted Work Tax %" := "Work Tax %";
              TDSEntry."Balance Work Tax Amount" := "W.T Amount";
              TDSEntry."Work Tax Amount" := TDSEntry."Balance Work Tax Amount";
              IF "Work Tax Base Amount Adjusted" THEN BEGIN
                TDSEntry."Original Work Tax Base Amount" := TDSEntry."Work Tax Base Amount";
                TDSEntry."Work Tax Base Amount" := "Work Tax Base Amount Applied";
                TDSEntry."Work Tax Base Amount Adjusted" := "Work Tax Base Amount Adjusted";
                TDSEntry."Work Tax Amount" := "W.T Amount";
              END;
            END;
            IF NOT "Work Tax" THEN BEGIN
              IF ("Balance TDS/TCS Amount" <> 0) OR TaxJnlLine."TDS/TCS Adjusted" THEN
                TDSEntry."TDS Amount" := "Balance TDS/TCS Amount";
              TDSEntry."Remaining TDS Amount" := TDSEntry."TDS Amount";
              IF ("Balance Surcharge Amount" <> 0) OR TaxJnlLine."Surcharge Adjusted" THEN
                TDSEntry."Surcharge Amount" := "Balance Surcharge Amount";
              IF ("Balance eCESS on TDS/TCS Amt" <> 0) OR TaxJnlLine."TDS/TCS eCess Adjusted" THEN
                TDSEntry."eCESS Amount" := "Balance eCESS on TDS/TCS Amt";
              IF ("Bal. SHE Cess on TDS/TCS Amt" <> 0) OR TaxJnlLine."TDS/TCS SHE Cess Adjusted" THEN
                TDSEntry."SHE Cess Amount" := "Bal. SHE Cess on TDS/TCS Amt";
              TDSEntry."Remaining Surcharge Amount" := TDSEntry."Surcharge Amount";
              TDSEntry."TDS Amount Including Surcharge" := TDSEntry."TDS Amount" + TDSEntry."Surcharge Amount";
              TDSEntry."Total TDS Including SHE CESS" := "Bal. TDS/TCS Including SHECESS";
              TDSEntry."Rem. Total TDS Incl. SHE CESS" := "Bal. TDS/TCS Including SHECESS";
              TDSEntry."Bal. TDS Including SHE CESS" := "Bal. TDS/TCS Including SHECESS";
              TDSEntry.Adjusted := Adjustment;
              IF "TDS/TCS Base Amount Adjusted" THEN BEGIN
                TDSEntry."TDS Base Amount" :=  "TDS/TCS Base Amount Applied";
                TDSEntry."Invoice Amount" :=TDSEntry."TDS Base Amount";
                TDSEntry."TDS Base Amount Adjusted" := "TDS/TCS Base Amount Adjusted";
                TDSEntry."Surcharge Base Amount" := "Surcharge Base Amount";
              END;
              IF TaxJnlLine."TDS/TCS Adjusted" THEN
                TDSEntry."Surcharge Base Amount" := "Surcharge Base Amount";
              Update26Q27Entries;
            END;
            TDSEntry.MODIFY;
          END;

          TCSEntry.RESET;
          TCSEntry.SETRANGE("Entry No.",TaxJnlLine."TDS/TCS Transaction No.");
          TCSEntry.SETRANGE("Document No.",TaxJnlLine."TDS/TCS Invoice No.");
          IF TCSEntry.FIND('-') THEN BEGIN
            TCSEntry.TESTFIELD("TCS Paid",FALSE);
            TCSEntry."Challan Date" := "Challan Date";
            TCSEntry."Challan No." := "Challan No.";
            TCSEntry.Adjusted := Adjustment;
            TCSEntry."Bal. TCS Including SHE CESS" := "Bal. TDS/TCS Including SHECESS";
            TCSEntry."Total TCS Including SHE CESS" := "Total TDS/TCS Incl. SHE CESS";
            IF (TaxJnlLine."TDS/TCS % Applied" <> 0) OR TaxJnlLine."TDS/TCS Adjusted" THEN
              TCSEntry."Adjusted TCS %" := TaxJnlLine."TDS/TCS % Applied"
            ELSE
              TCSEntry."Adjusted TCS %" := TaxJnlLine."TDS/TCS %";

            IF (TaxJnlLine."Surcharge % Applied" <> 0) OR TaxJnlLine."Surcharge Adjusted" THEN
              TCSEntry."Adjusted Surcharge %" := TaxJnlLine."Surcharge % Applied"
            ELSE
              TCSEntry."Adjusted Surcharge %" := TaxJnlLine."Surcharge %";

            IF (TaxJnlLine."eCESS % Applied" <> 0) OR TaxJnlLine."TDS/TCS eCess Adjusted" THEN
              TCSEntry."Adjusted eCESS %" := TaxJnlLine."eCESS % Applied"
            ELSE
              TCSEntry."Adjusted eCESS %" := TaxJnlLine."eCESS %";

            IF (TaxJnlLine."SHE Cess % Applied" <> 0) OR TaxJnlLine."TDS/TCS SHE Cess Adjusted" THEN
              TCSEntry."Adjusted SHE CESS %" := TaxJnlLine."SHE Cess % Applied"
            ELSE
              TCSEntry."Adjusted SHE CESS %" := TaxJnlLine."SHE Cess % on TDS/TCS";

            IF ("Balance TDS/TCS Amount" <> 0) OR TaxJnlLine."TDS/TCS Adjusted" THEN
              TCSEntry."TCS Amount" := "Balance TDS/TCS Amount";
            TCSEntry."Remaining TCS Amount" := TCSEntry."TCS Amount";
            IF ("Balance Surcharge Amount" <> 0) OR TaxJnlLine."Surcharge Adjusted" THEN
              TCSEntry."Surcharge Amount" := "Balance Surcharge Amount";
            IF ("Balance eCESS on TDS/TCS Amt" <> 0) OR TaxJnlLine."TDS/TCS eCess Adjusted" THEN
              TCSEntry."eCESS Amount" := "Balance eCESS on TDS/TCS Amt";
            IF ("Bal. SHE Cess on TDS/TCS Amt" <> 0) OR TaxJnlLine."TDS/TCS SHE Cess Adjusted" THEN
              TCSEntry."SHE Cess Amount" := "Bal. SHE Cess on TDS/TCS Amt";
            TCSEntry."Remaining Surcharge Amount" := TCSEntry."Surcharge Amount";
            TCSEntry."TCS Amount Including Surcharge" := TCSEntry."TCS Amount" + TCSEntry."Surcharge Amount";
            TCSEntry."Total TCS Including SHE CESS" := "Bal. TDS/TCS Including SHECESS";
            TCSEntry."Rem. Total TCS Incl. SHE CESS" := "Bal. TDS/TCS Including SHECESS";
            IF "TDS/TCS Base Amount Adjusted" THEN BEGIN
              TCSEntry."Original TCS Base Amount" := TCSEntry."TCS Base Amount";
              TCSEntry."TCS Base Amount" := "TDS/TCS Base Amount Applied";
              TCSEntry."TCS Base Amount Adjusted" := "TDS/TCS Base Amount Adjusted";
              TCSEntry."Surcharge Base Amount" := "Surcharge Base Amount";
            END;
            IF TaxJnlLine."TDS/TCS Adjusted" THEN
              TCSEntry."Surcharge Base Amount" := "Surcharge Base Amount";
            TCSEntry.MODIFY;
            Update27EQEntries;
            "Total TDS/TCS Incl. SHE CESS" := 0;
          END;

          "Bal. TDS/TCS Including SHECESS" := 0;
          TaxJnlLine.MODIFY;
        END;

        IF "Pay TDS" THEN BEGIN
          TDSEntry.RESET;
          TDSEntry.SETRANGE("Pay TDS Document No.","Document No.");
          IF TDSEntry.FIND('-') THEN
            REPEAT
              TDSEntry."TDS Paid" := TRUE;
              TDSEntry."TDS Payment Date" := "Posting Date";
              Close26Q27QEntries;
              TDSEntry.MODIFY;
            UNTIL TDSEntry.NEXT = 0;
        END;

        IF "Pay TCS" THEN BEGIN
          TCSEntry.RESET;
          TCSEntry.SETCURRENTKEY("Pay TCS Document No.");
          TCSEntry.SETRANGE("Pay TCS Document No.","Document No.");
          IF TCSEntry.FINDFIRST THEN
            REPEAT
             TCSEntry."TCS Payment Date" := "Posting Date";
             TCSEntry."TCS Paid" := TRUE;
             TCSEntry.MODIFY;
             Close27EQEntries;
            UNTIL TCSEntry.NEXT = 0;
        END;

        IF "Pay Work Tax" THEN BEGIN
          TDSEntry.RESET;
          TDSEntry.SETRANGE("Pay Work Tax Document No.","Document No.");
          IF TDSEntry.FIND('-') THEN
            REPEAT
              TDSEntry."Work Tax Paid" := TRUE;
              TDSEntry.MODIFY;
            UNTIL TDSEntry.NEXT = 0;
        END;
        IF "Pay Sales Tax" THEN BEGIN
          TaxEntry.RESET;
          TaxEntry.SETRANGE("Pay Tax Document No.","Document No.");
          IF TaxEntry.FIND('-') THEN
            REPEAT
              TaxEntry.Paid := TRUE;
              TaxEntry.MODIFY;
            UNTIL TaxEntry.NEXT = 0;
        END;

        IF "Excise Charge" THEN BEGIN
          TaxJnlLine.RESET;
          TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
          TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
          TaxJnlLine.SETRANGE("Line No.","Line No.");
          TaxJnlLine.SETRANGE("Document No.","Document No.");
          IF SalesDocumentNo <> '' THEN
            TaxJnlLine.SETRANGE("Document No.",SalesDocumentNo);
          IF TaxJnlLine.FINDFIRST THEN BEGIN
            TESTFIELD("Account No.");
            TESTFIELD("Bal. Account No.");
            TaxJnlLine.TESTFIELD("CESS Amount",0);
            TESTFIELD(
              Amount,TaxJnlLine."BED Amount" + TaxJnlLine."AED(GSI) Amount" + TaxJnlLine."SED Amount" + TaxJnlLine."SAED Amount" +
              TaxJnlLine."NCCD Amount" + TaxJnlLine."eCess Amount" + TaxJnlLine."Excise Charge Amount" + TaxJnlLine."AED(TTA) Amount" +
              TaxJnlLine."ADET Amount" + TaxJnlLine."ADE Amount" + TaxJnlLine."ADC VAT Amount" + TaxJnlLine."SHE Cess Amount");

            IF TaxJnlLine."Excise Charge Amount" <> 0 THEN BEGIN
              TaxJnlLine.TESTFIELD("Excise Record",0);
              TaxJnlLine.TESTFIELD("BED Amount",0);
              TaxJnlLine.TESTFIELD("AED(GSI) Amount",0);
              TaxJnlLine.TESTFIELD("AED(TTA) Amount",0);
              TaxJnlLine.TESTFIELD("SED Amount",0);
              TaxJnlLine.TESTFIELD("SAED Amount",0);
              TaxJnlLine.TESTFIELD("NCCD Amount",0);
              TaxJnlLine.TESTFIELD("eCess Amount",0);
              TaxJnlLine.TESTFIELD("SHE Cess Amount",0);
              TaxJnlLine.TESTFIELD("ADET Amount",0);
              TaxJnlLine.TESTFIELD("ADE Amount",0);
              TaxJnlLine.TESTFIELD("ADC VAT Amount",0);
            END;
          END;
        END;

        IF ("Account Type" IN
            ["Account Type"::Customer,
             "Account Type"::Vendor,
             "Account Type"::"Fixed Asset",
             "Account Type"::"IC Partner"]) AND
           ("Bal. Account Type" IN
            ["Bal. Account Type"::Customer,
             "Bal. Account Type"::Vendor,
             "Bal. Account Type"::"Fixed Asset",
             "Bal. Account Type"::"IC Partner"])
        THEN
          ERROR(
            Text002,
            FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

        IF "Bal. Account No." = '' THEN
          TESTFIELD("Account No.");

        IF NeedCheckZeroAmount AND NOT (IsRecurring AND IsBatchMode) THEN
          TESTFIELD(Amount);

        IF Amount * "Amount (LCY)" < 0 THEN
          FIELDERROR("Amount (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));

        IF ("Account Type" = "Account Type"::"G/L Account") AND
           ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND NOT "TDS From Orders"
        THEN
          TESTFIELD("Applies-to Doc. No.",'');

        IF ("Recurring Method" IN
            ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
           ("Currency Code" <> '')
        THEN
          ERROR(
            Text004,
            FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

        IF "Account No." <> '' THEN
          CASE "Account Type" OF
            "Account Type"::"G/L Account":
              BEGIN
                IF ("Gen. Bus. Posting Group" <> '') OR ("Gen. Prod. Posting Group" <> '') OR
                   ("VAT Bus. Posting Group" <> '') OR ("VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Gen. Posting Type");
                IF ("Gen. Posting Type" <> "Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "VAT Amount" + "VAT Base Amount" <> Amount THEN
                    ERROR(
                      Text005,FIELDCAPTION("VAT Amount"),FIELDCAPTION("VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "VAT Amount (LCY)" + "VAT Base Amount (LCY)" <> "Amount (LCY)" THEN
                      ERROR(
                        Text005,FIELDCAPTION("VAT Amount (LCY)"),
                        FIELDCAPTION("VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
              END;
            "Account Type"::Customer,"Account Type"::Vendor:
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');

                IF (("Account Type" = "Account Type"::Customer) AND
                    ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase)) OR
                   (("Account Type" = "Account Type"::Vendor) AND
                    ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Account Type"),"Account Type",
                      FIELDCAPTION("Bal. Gen. Posting Type"),"Bal. Gen. Posting Type"));
                CheckGenJnlLineDocType(GenJnlLine);
                IF NOT "System-Created Entry" AND (Amount * "Sales/Purch. (LCY)" < 0) THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",STRSUBSTNO(Text003,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Account Type" = "Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Cust."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END ELSE
                  IF Vendor.GET("Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Vendor."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                  END;
                END;
            "Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Gen. Posting Type",0);
                TESTFIELD("Gen. Bus. Posting Group",'');
                TESTFIELD("Gen. Prod. Posting Group",'');
                TESTFIELD("VAT Bus. Posting Group",'');
                TESTFIELD("VAT Prod. Posting Group",'');
                TESTFIELD("Job No.",'');
                IF (Amount < 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
              END;
            "Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Account No.");
                ICPartner.CheckICPartner;
                IF "Journal Template Name" <> '' THEN
                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                    FIELDERROR("Account Type");
              END;
          END;

          IF "TDS Nature of Deduction" <> '' THEN BEGIN
            TDSBalEntryFound := FALSE;
            GenJnlLineTDSBal.RESET;
            GenJnlLineTDSBal.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlLineTDSBal.SETRANGE("Journal Batch Name","Journal Batch Name");
            GenJnlLineTDSBal.SETRANGE("Document No.","Document No.");
            GenJnlLineTDSBal.SETRANGE("TDS Nature of Deduction",'');
            IF GenJnlLineTDSBal.FINDSET THEN
              IF GenJnlLineTDSBal."Account Type" IN
                [GenJnlLineTDSBal."Account Type"::Customer,
                 GenJnlLineTDSBal."Account Type"::Vendor]
              THEN
                REPEAT
                  IF GenJnlLineTDSBal."Account Type" IN
                    [GenJnlLineTDSBal."Account Type"::Customer,
                     GenJnlLineTDSBal."Account Type"::Vendor]
                  THEN
                    TDSBalEntryFound := TRUE;
                UNTIL TDSBalEntryFound = TRUE;
          END;
          IF TDSBalEntryFound THEN
            BalAccountType := GenJnlLineTDSBal."Account Type"
          ELSE
            BalAccountType := "Bal. Account Type";
          IF (("Party Type" IN ["Party Type"::Party,"Party Type"::Vendor]) AND
             ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) AND
             (("TDS Nature of Deduction" <> '') AND ("Document Type" = "Document Type"::Payment)) OR
             TDSBalEntryFound) OR
             (("Account Type" = "Account Type"::Customer) AND ("Document Type" = "Document Type"::Payment) AND
             ("TDS Nature of Deduction" <> ''))
          THEN
            ERROR(Text16521,BalAccountType,"Account Type");

        IF "Bal. Account No." <> '' THEN
          CASE "Bal. Account Type" OF
            "Bal. Account Type"::"G/L Account":
              BEGIN
                IF ("Bal. Gen. Bus. Posting Group" <> '') OR ("Bal. Gen. Prod. Posting Group" <> '') OR
                   ("Bal. VAT Bus. Posting Group" <> '') OR ("Bal. VAT Prod. Posting Group" <> '')
                THEN
                  TESTFIELD("Bal. Gen. Posting Type");
                IF ("Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::" ") AND
                   ("VAT Posting" = "VAT Posting"::"Automatic VAT Entry")
                THEN BEGIN
                  IF "Bal. VAT Amount" + "Bal. VAT Base Amount" <> -Amount THEN
                    ERROR(
                      Text006,FIELDCAPTION("Bal. VAT Amount"),FIELDCAPTION("Bal. VAT Base Amount"),
                      FIELDCAPTION(Amount));
                  IF "Currency Code" <> '' THEN
                    IF "Bal. VAT Amount (LCY)" + "Bal. VAT Base Amount (LCY)" <> -"Amount (LCY)" THEN
                      ERROR(
                        Text006,FIELDCAPTION("Bal. VAT Amount (LCY)"),
                        FIELDCAPTION("Bal. VAT Base Amount (LCY)"),FIELDCAPTION("Amount (LCY)"));
                END;
              END;
            "Bal. Account Type"::Customer,"Bal. Account Type"::Vendor:
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');

                IF (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                    ("Gen. Posting Type" = "Gen. Posting Type"::Purchase)) OR
                   (("Bal. Account Type" = "Bal. Account Type"::Vendor) AND
                    ("Gen. Posting Type" = "Gen. Posting Type"::Sale))
                THEN
                  ERROR(
                    STRSUBSTNO(
                      Text010,
                      FIELDCAPTION("Bal. Account Type"),"Bal. Account Type",
                      FIELDCAPTION("Gen. Posting Type"),"Gen. Posting Type"));

                IF "Document Type" <> 0 THEN BEGIN
                  IF ("Bal. Account Type" = "Bal. Account Type"::Customer) =
                     ("Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"])
                  THEN BEGIN
                    IF Amount < 0 THEN
                      FIELDERROR(Amount,Text007);
                  END ELSE
                    IF Amount > 0 THEN
                      FIELDERROR(Amount,Text008);
                END;
                IF Amount * "Sales/Purch. (LCY)" > 0 THEN
                  FIELDERROR(
                    "Sales/Purch. (LCY)",
                    STRSUBSTNO(Text009,FIELDCAPTION(Amount)));
                TESTFIELD("Job No.",'');
                IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                  IF Cust.GET("Bal. Account No.") THEN BEGIN
                    Cust.CheckBlockedCustOnJnls(Cust,"Document Type",TRUE);
                    IF (Cust."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Cust."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END
                END ELSE
                  IF Vendor.GET("Bal. Account No.") THEN BEGIN
                    Vendor.CheckBlockedVendOnJnls(Vendor,"Document Type",TRUE);
                    IF (Vendor."IC Partner Code" <> '') AND (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND
                       ICPartner.GET(Vendor."IC Partner Code")
                    THEN
                      ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                  END;
              END;
            "Bal. Account Type"::"Bank Account":
              BEGIN
                TESTFIELD("Bal. Gen. Posting Type",0);
                TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                TESTFIELD("Bal. VAT Bus. Posting Group",'');
                TESTFIELD("Bal. VAT Prod. Posting Group",'');
                IF (Amount > 0) AND ("Bank Payment Type" = "Bank Payment Type"::"Computer Check") THEN
                  TESTFIELD("Check Printed",TRUE);
              END;
            "Bal. Account Type"::"IC Partner":
              BEGIN
                ICPartner.GET("Bal. Account No.");
                ICPartner.CheckICPartner;
                IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                  FIELDERROR("Bal. Account Type");
              END;
          END;

        IF "IC Partner G/L Acc. No." <> '' THEN
          IF ICGLAcount.GET("IC Partner G/L Acc. No.") THEN
            ICGLAcount.TESTFIELD(Blocked,FALSE);

        IF NOT PaymentTerms.GET("Payment Terms Code") THEN
          CLEAR(PaymentTerms);
        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           (("Document Type" <> "Document Type"::Invoice) AND
            (NOT
             (("Document Type" = "Document Type"::"Credit Memo") AND
              PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")))
        THEN BEGIN
          TESTFIELD("Pmt. Discount Date",0D);
          TESTFIELD("Payment Discount %",0);
        END;

        IF (("Account Type" = "Account Type"::"G/L Account") AND
            ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND NOT "TDS From Orders") OR
           ("Applies-to Doc. No." <> '')
        THEN
          TESTFIELD("Applies-to ID",'');

        IF ("Account Type" <> "Account Type"::"Bank Account") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
        THEN
          TESTFIELD("Bank Payment Type","Bank Payment Type"::" ");

        IF ("Account Type" = "Account Type"::"Fixed Asset") OR
           ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
        THEN
          CODEUNIT.RUN(CODEUNIT::"FA Jnl.-Check Line",GenJnlLine);

        IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
           ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
        THEN BEGIN
          TESTFIELD("Depreciation Book Code",'');
          TESTFIELD("FA Posting Type",0);
        END;

        IF OverrideDimErr THEN
          EXIT;

        IF NOT DimMgt.CheckDimIDComb("Dimension Set ID") THEN
          ThrowGenJnlLineError(GenJnlLine,Text011,DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID1("Account Type");
        No[1] := "Account No.";
        TableID[2] := DimMgt.TypeToTableID1("Bal. Account Type");
        No[2] := "Bal. Account No.";
        TableID[3] := DATABASE::Job;
        No[3] := "Job No.";
        TableID[4] := DATABASE::"Salesperson/Purchaser";
        No[4] := "Salespers./Purch. Code";
        TableID[5] := DATABASE::Campaign;
        No[5] := "Campaign No.";
        IF NOT DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") THEN
          ThrowGenJnlLineError(GenJnlLine,Text012,DimMgt.GetDimValuePostingErr);
      END;

      IF CostAccSetup.GET THEN
        CostAccMgt.CheckValidCCAndCOInGLEntry(GenJnlLine."Dimension Set ID");

      OnAfterCheckGenJnlLine(GenJnlLine);
    END;

    PROCEDURE DateNotAllowed@1(PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
        IF USERID <> '' THEN
          IF UserSetup.GET(USERID) THEN BEGIN
            AllowPostingFrom := UserSetup."Allow Posting From";
            AllowPostingTo := UserSetup."Allow Posting To";
          END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          GLSetup.GET;
          AllowPostingFrom := GLSetup."Allow Posting From";
          AllowPostingTo := GLSetup."Allow Posting To";
        END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := 31129999D;
      END;
      EXIT((PostingDate < AllowPostingFrom) OR (PostingDate > AllowPostingTo));
    END;

    LOCAL PROCEDURE ErrorIfPositiveAmt@2(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount > 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text008);
    END;

    LOCAL PROCEDURE ErrorIfNegativeAmt@3(GenJnlLine@1000 : Record 81);
    BEGIN
      IF GenJnlLine.Amount < 0 THEN
        GenJnlLine.FIELDERROR(Amount,Text007);
    END;

    PROCEDURE SetOverDimErr@5();
    BEGIN
      OverrideDimErr := TRUE;
    END;

    PROCEDURE Close26Q27QEntries@1500000();
    VAR
      Form26Q27QEntry@1500000 : Record 16505;
    BEGIN
      Form26Q27QEntry.RESET;
      Form26Q27QEntry.SETRANGE("TDS Entry No.",TDSEntry."Entry No.");
      IF NOT Form26Q27QEntry.FINDFIRST THEN
        ERROR(Text16500,TDSEntry."Entry No.");
      Form26Q27QEntry."TDS Paid" := TRUE;
      Form26Q27QEntry."Pay TDS Document No." := TDSEntry."Pay TDS Document No.";
      Form26Q27QEntry."TDS Payment Date" := TDSEntry."TDS Payment Date";
      Form26Q27QEntry.MODIFY(TRUE);
    END;

    PROCEDURE Update26Q27Entries@1500001();
    VAR
      Form26Q27QEntry@1500000 : Record 16505;
    BEGIN
      Form26Q27QEntry.RESET;
      Form26Q27QEntry.SETRANGE("TDS Entry No.",TDSEntry."Entry No.");
      IF NOT Form26Q27QEntry.FINDFIRST THEN
        ERROR(Text16500,TDSEntry."Entry No.");
      Form26Q27QEntry.Adjusted := TDSEntry.Adjusted;
      Form26Q27QEntry."TDS %" := TDSEntry."Adjusted TDS %";
      Form26Q27QEntry."TDS Amount" := TDSEntry."TDS Amount";
      Form26Q27QEntry."Remaining TDS Amount" := TDSEntry."TDS Amount";
      Form26Q27QEntry."eCESS Amount" := TDSEntry."eCESS Amount";
      Form26Q27QEntry."SHE Cess Amount" := TDSEntry."SHE Cess Amount";
      Form26Q27QEntry."Surcharge Amount" := TDSEntry."Surcharge Amount";
      Form26Q27QEntry."Remaining Surcharge Amount" := TDSEntry."Surcharge Amount";
      Form26Q27QEntry."Rem. Total TDS Incl. SHE CESS" := TDSEntry."Total TDS Including SHE CESS";
      Form26Q27QEntry."Total Tax Deposited" := TDSEntry."Bal. TDS Including SHE CESS";
      Form26Q27QEntry."Last Total Tax Deposited" := TDSEntry."Bal. TDS Including SHE CESS";
      Form26Q27QEntry."Bal. TDS Including SHE CESS" := TDSEntry."Bal. TDS Including SHE CESS";
      Form26Q27QEntry."Surcharge %" := TDSEntry."Adjusted Surcharge %";
      Form26Q27QEntry."TDS Amount Including Surcharge" := TDSEntry."TDS Amount Including Surcharge";
      Form26Q27QEntry."eCESS %" := TDSEntry."Adjusted eCESS %";
      Form26Q27QEntry."SHE Cess %" := TDSEntry."Adjusted SHE CESS %";
      Form26Q27QEntry."Total TDS Including SHE CESS" := TDSEntry."Total TDS Including SHE CESS";
      Form26Q27QEntry."TDS Base Amount" :=  TDSEntry."TDS Base Amount";
      Form26Q27QEntry."Work Tax Base Amount" := TDSEntry."Work Tax Base Amount";
      Form26Q27QEntry."Surcharge Base Amount" := TDSEntry."Surcharge Base Amount";
      Form26Q27QEntry.MODIFY(TRUE);
    END;

    PROCEDURE Close27EQEntries@1500004();
    VAR
      Form27EQEntry@1500000 : Record 16517;
    BEGIN
      Form27EQEntry.RESET;
      Form27EQEntry.SETRANGE("TCS Entry No.",TCSEntry."Entry No.");
      IF NOT Form27EQEntry.FINDFIRST THEN
        ERROR(Text16501,TCSEntry."Entry No.");
      Form27EQEntry."TCS Paid" := TRUE;
      Form27EQEntry."Pay TCS Document No." := TCSEntry."Pay TCS Document No.";
      Form27EQEntry."TCS Payment Date" := TCSEntry."TCS Payment Date";
      Form27EQEntry.MODIFY(TRUE);
    END;

    PROCEDURE Update27EQEntries@1500003();
    VAR
      Form27EQEntry@1500000 : Record 16517;
    BEGIN
      Form27EQEntry.RESET;
      Form27EQEntry.SETRANGE("TCS Entry No.",TCSEntry."Entry No.");
      IF NOT Form27EQEntry.FINDFIRST THEN
        ERROR(Text16501,TCSEntry."Entry No.");
      Form27EQEntry.Adjusted := TCSEntry.Adjusted;
      Form27EQEntry."TCS %" := TCSEntry."Adjusted TCS %";
      Form27EQEntry."TCS Amount" := TCSEntry."TCS Amount";
      Form27EQEntry."Remaining TCS Amount" := TCSEntry."TCS Amount";
      Form27EQEntry."eCESS Amount" := TCSEntry."eCESS Amount";
      Form27EQEntry."SHE CESS Amount" := TCSEntry."SHE Cess Amount";
      Form27EQEntry."Surcharge Amount" := TCSEntry."Surcharge Amount";
      Form27EQEntry."Remaining Surcharge Amount" := TCSEntry."Surcharge Amount";
      Form27EQEntry."Rem. Total TCS Incl. SHE CESS" := TCSEntry."Total TCS Including SHE CESS";
      Form27EQEntry."Total Tax Deposited" := TCSEntry."Bal. TCS Including SHE CESS";
      Form27EQEntry."Last Total Tax Deposited" := TCSEntry."Bal. TCS Including SHE CESS";
      Form27EQEntry."Bal. TCS Including SHE CESS" := TCSEntry."Bal. TCS Including SHE CESS";
      Form27EQEntry."Surcharge %" := TCSEntry."Adjusted Surcharge %";
      Form27EQEntry."TCS Amount Including Surcharge" := TCSEntry."TCS Amount Including Surcharge";
      Form27EQEntry."eCESS %" := TCSEntry."Adjusted eCESS %";
      Form27EQEntry."SHE CESS %" := TCSEntry."Adjusted SHE CESS %";
      Form27EQEntry."Total TCS Including SHE CESS" := TCSEntry."Total TCS Including SHE CESS";
      Form27EQEntry."TCS Base Amount" := TCSEntry."TCS Base Amount";
      Form27EQEntry."Work Tax Base Amount" := TCSEntry."Work Tax Base Amount";
      Form27EQEntry."Surcharge Base Amount" := TCSEntry."Surcharge Base Amount";
      Form27EQEntry.MODIFY(TRUE);
    END;

    PROCEDURE CheckDirectServiceTax@1500002(VAR GenJnlLine2@1500000 : Record 81);
    VAR
      ServiceAccountType@1500001 : Boolean;
      ServiceBalAccountType@1500002 : Boolean;
      GLAcc2@1500003 : Record 15;
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF NOT ((("Account Type" = "Account Type"::"G/L Account") AND ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) OR
           ((("Account Type" = "Account Type"::"G/L Account") OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) AND
           (("Account Type" = "Account Type"::"Bank Account") OR ("Bal. Account Type" = "Bal. Account Type"::"Bank Account")))) THEN
          ERROR(Text16512,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");

        IF ("Account Type" = "Account Type"::"G/L Account") AND ("Account No." <> '') THEN BEGIN
          GLAcc2.GET("Account No.");
          IF GLAcc2."Service Tax Group Code" <> '' THEN
            ServiceAccountType := TRUE;
        END;

        IF ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '') THEN BEGIN
          GLAcc2.GET("Bal. Account No.");
          IF GLAcc2."Service Tax Group Code" <> '' THEN
            ServiceBalAccountType := TRUE;
        END;

        IF (ServiceAccountType = FALSE) AND (ServiceBalAccountType = FALSE) THEN
          ERROR(Text16508,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");
        IF (ServiceAccountType) AND (ServiceBalAccountType) THEN
          ERROR(Text16509,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");

        IF (("Service Tax Type" = "Service Tax Type"::Sale) AND ("Document Type" = "Document Type"::Payment)) OR
          (("Service Tax Type" = "Service Tax Type"::Purchase) AND ("Document Type" = "Document Type"::Refund))
        THEN BEGIN
          IF ServiceAccountType AND (Amount > 0) THEN
            ERROR(Text16511,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");
          IF ServiceBalAccountType AND (Amount < 0) THEN
            ERROR(Text16510,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");
        END ELSE
          IF (("Service Tax Type" = "Service Tax Type"::Sale) AND ("Document Type" = "Document Type"::Refund)) OR
             (("Service Tax Type" = "Service Tax Type"::Purchase) AND ("Document Type" = "Document Type"::Payment))
          THEN BEGIN
            IF ServiceAccountType AND (Amount < 0) THEN
              ERROR(Text16510,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");
            IF ServiceBalAccountType AND (Amount > 0) THEN
              ERROR(Text16511,"Journal Template Name","Journal Batch Name",GenJnlLine2."Line No.");
          END;
      END;
    END;

    PROCEDURE SetSalesHeaderNo@1500025(SalesDocNo@1500000 : Code[20]);
    BEGIN
      SalesDocumentNo := SalesDocNo;
    END;

    LOCAL PROCEDURE CheckServiceTaxForApplication@1500007(GenJnlLine@1500002 : Record 81);
    VAR
      ServiceTaxMgt@1500001 : Codeunit 16471;
    BEGIN
      IF GenJnlLine."Offline Application" THEN BEGIN
        IF GenJnlLine."Applies-to ID" = '' THEN
          EXIT;

        IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
          ServiceTaxMgt.FillServiceTaxFields(GenJnlLine);
          ServiceTaxMgt.CheckApplyingDocs(GenJnlLine);
          ServiceTaxMgt.CheckOfflineApplicationTDS(GenJnlLine."Account No.",GenJnlLine."Applies-to ID");
        END;

      END ELSE BEGIN
        IF (GenJnlLine."Applies-to Doc. No." = '') AND (GenJnlLine."Applies-to ID" = '') THEN
          EXIT;
        IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN
          ServiceTaxMgt.CheckApplyingDocs(GenJnlLine);
      END;
    END;

    PROCEDURE CheckSalesDocNoIsNotUsed@115(DocType@1000 : Option;DocNo@1001 : Code[20]);
    VAR
      OldCustLedgEntry@1002 : Record 21;
    BEGIN
      OldCustLedgEntry.SETRANGE("Document No.",DocNo);
      OldCustLedgEntry.SETRANGE("Document Type",DocType);
      IF OldCustLedgEntry.FINDFIRST THEN
        ERROR(SalesDocAlreadyExistsErr,OldCustLedgEntry."Document Type",DocNo);
    END;

    PROCEDURE CheckPurchDocNoIsNotUsed@107(DocType@1000 : Option;DocNo@1002 : Code[20]);
    VAR
      OldVendLedgEntry@1001 : Record 25;
    BEGIN
      OldVendLedgEntry.SETRANGE("Document No.",DocNo);
      OldVendLedgEntry.SETRANGE("Document Type",DocType);
      IF OldVendLedgEntry.FINDFIRST THEN
        ERROR(PurchDocAlreadyExistsErr,OldVendLedgEntry."Document Type",DocNo);
    END;

    LOCAL PROCEDURE CheckGenJnlLineDocType@7(GenJnlLine@1001 : Record 81);
    VAR
      IsPayment@1000 : Boolean;
    BEGIN
      WITH GenJnlLine DO
        IF "Document Type" <> 0 THEN BEGIN
          IsPayment := "Document Type" IN ["Document Type"::Payment,"Document Type"::"Credit Memo"];
          IF (IsPayment XOR (("Account Type" = "Account Type"::Customer) OR IsVendorPaymentToCrMemo(GenJnlLine)))
          THEN
            ErrorIfNegativeAmt(GenJnlLine)
          ELSE
            ErrorIfPositiveAmt(GenJnlLine);
        END;
    END;

    LOCAL PROCEDURE IsVendorPaymentToCrMemo@26(GenJournalLine@1002 : Record 81) : Boolean;
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      WITH GenJournalLine DO BEGIN
        IF ("Account Type" = "Account Type"::Vendor) AND
           ("Document Type" = "Document Type"::Payment) AND
           ("Applies-to Doc. Type" = "Applies-to Doc. Type"::"Credit Memo") AND
           ("Applies-to Doc. No." <> '')
        THEN BEGIN
          GenJournalTemplate.GET("Journal Template Name");
          EXIT(GenJournalTemplate.Type = GenJournalTemplate.Type::Payments);
        END;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE ThrowGenJnlLineError@8(GenJournalLine@1000 : Record 81;ErrorTemplate@1001 : Text;ErrorText@1002 : Text);
    BEGIN
      WITH GenJournalLine DO
        IF "Line No." <> 0 THEN
          ERROR(
            ErrorTemplate,
            TABLECAPTION,"Journal Template Name","Journal Batch Name","Line No.",
            ErrorText);
      ERROR(ErrorText);
    END;

    PROCEDURE SetBatchMode@10(NewBatchMode@1000 : Boolean);
    BEGIN
      IsBatchMode := NewBatchMode;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckGenJnlLine@6(VAR GenJournalLine@1000 : Record 81);
    BEGIN
    END;

    LOCAL PROCEDURE CheckAdjstAdvJournals@1500071(GenJnlLine@1500010 : Record 81);
    VAR
      GenJournalLine1@1500001 : Record 81;
      TotalAmount@1500000 : Decimal;
    BEGIN
      WITH GenJournalLine1 DO BEGIN
        SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Refund THEN
            TESTFIELD("Document Type","Document Type"::Payment);
            GSTManagement.CheckGSTAccountingPeriod(GenJnlLine."Posting Date");
            TESTFIELD("Document No.",GenJnlLine."Document No.");
            TESTFIELD("Adv. Pmt. Adjustment");
            TESTFIELD("Account Type",GenJnlLine."Account Type");
            TESTFIELD("Account No.",GenJnlLine."Account No.");
            IF "Document Type" = "Document Type"::Payment THEN
            TESTFIELD("GST on Advance Payment");
            TESTFIELD("Location Code",GenJnlLine."Location Code");
            TESTFIELD("GST Group Code",GenJnlLine."GST Group Code");
            TESTFIELD("Currency Code",GenJnlLine."Currency Code");
            TESTFIELD("GST Jurisdiction Type",GenJnlLine."GST Jurisdiction Type");
            TESTFIELD("GST Customer Type",GenJnlLine."GST Customer Type");
            TESTFIELD("GST Vendor Type",GenJnlLine."GST Vendor Type");
            IF "Account Type" = "Account Type"::Customer THEN
              IF "GST Place of Supply" <> GenJnlLine."GST Place of Supply" THEN
                ERROR(SimilarGSTPlaceSupplyErr);
            TotalAmount += Amount;
          UNTIL NEXT = 0;
          TotalAmount += GenJnlLine.Amount ;
          IF TotalAmount <> 0 THEN
            ERROR(SimilarAmountErr);
        END ELSE
          ERROR(SelectAdvPaymentErr);
      END;
    END;

    PROCEDURE CheckDocNoIsNotUsed@1500006(TransactionType@1500004 : 'Purchase,Sale';AccountNo@1500002 : Code[20];DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1500001 : Code[20];HSNCode@1500006 : Code[8];GSTGroupCode@1500043 : Code[20]);
    VAR
      CustLedgerEntry@1500003 : Record 21;
      VendorLedgerEntry@1500005 : Record 25;
    BEGIN
      CASE TransactionType OF
        TransactionType::Sale:
          WITH CustLedgerEntry DO BEGIN
            SETCURRENTKEY("Customer No.","Document Type","Document No.");
            SETRANGE("Customer No.",AccountNo);
            SETRANGE("Document Type",DocumentType);
            SETRANGE("Document No.",DocumentNo);
            SETRANGE("GST Group Code",GSTGroupCode);
            SETRANGE("HSN/SAC Code",HSNCode);
            IF NOT ISEMPTY THEN
              ERROR(
                STRSUBSTNO(
                  DocHSNAlreadyExistsErr,FORMAT(TransactionType),FIELDCAPTION("Document No."),
                  FORMAT(DocumentType),FIELDCAPTION("Document No."),DocumentNo,FIELDCAPTION("HSN/SAC Code"),HSNCode,
                  CustLedgerEntry.TABLECAPTION));
          END;
        TransactionType::Purchase:
          WITH VendorLedgerEntry DO BEGIN
            SETCURRENTKEY("Vendor No.","Document Type","Document No.");
            SETRANGE("Vendor No.",AccountNo);
            SETRANGE("Document Type",DocumentType);
            SETRANGE("Document No.",DocumentNo);
            SETRANGE("GST Group Code",GSTGroupCode);
            SETRANGE("HSN/SAC Code",HSNCode);
            IF NOT ISEMPTY THEN
              ERROR(
                STRSUBSTNO(
                  DocHSNAlreadyExistsErr,FORMAT(TransactionType),FIELDCAPTION("Document Type"),
                  FORMAT(DocumentType),FIELDCAPTION("Document No."),DocumentNo,FIELDCAPTION("HSN/SAC Code"),HSNCode,
                  VendorLedgerEntry.TABLECAPTION));
          END;
      END;
    END;

    BEGIN
    END.
  }
}

