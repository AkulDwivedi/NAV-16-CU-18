OBJECT Codeunit 131335 Library - XML Read
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      XMLDocOut@1008 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument" RUNONCLIENT;
      NodeMatchCriteria@1006 : 'FindByName,FindByNameAndValue';
      AttributeNodeValueErr@1014 : TextConst 'ENU=Wrong value for attribute <%1> of node <%2> in subtree <%3>.';
      AttributeNotFoundErr@1002 : TextConst 'ENU=Node <%1> in subtree <%2> has no attributes with value <%3>.';
      AttributeValueErr@1015 : TextConst 'ENU=Unexpected value in xml file for Attribute <%1>.';
      CountErr@1013 : TextConst 'ENU=Incorrect count for <%1>.';
      DeclarationEncodingErr@1011 : TextConst 'ENU=XMLDeclaration: Wrong Encoding property.';
      DeclarationStandaloneErr@1010 : TextConst 'ENU=XMLDeclaration: Wrong Standalone property.';
      DeclarationVersionErr@1012 : TextConst 'ENU=XMLDeclaration: Wrong Version property.';
      ElementValueErr@1016 : TextConst 'ENU=Unexpected value in xml file for Element <%1>.';
      IncorrectUseOfFunctionErr@1007 : TextConst 'ENU=Incorrect use of function.';
      MissingElementErr@1005 : TextConst 'ENU=Element <%1> is missing.';
      MissingNodeErr@1004 : TextConst 'ENU=Node <%1> is missing.';
      NodeHasNoAttributesErr@1003 : TextConst 'ENU=Node <%1> in subtree <%2> has no attributes.';
      NotFoundAnyInSubtreeErr@1000 : TextConst 'ENU=Node <%1> was not found in subtree <%2>.';
      NotFoundInSubtreeErr@1001 : TextConst 'ENU=Node <%1> with value <%2> was not found in subtree <%3>.';
      NodeIndexOutOfBoundsErr@1017 : TextConst 'ENU=Node <%1> index %2  is out of bounds (%3 total nodes exist).';

    PROCEDURE Initialize@1(FullFilePath@1000 : Text);
    BEGIN
      CLEAR(XMLDocOut);
      XMLDocOut := XMLDocOut.XmlDocument;
      // TFS 379960 - We keep XmlDocument.Load, because the library intended to be ran on client
      XMLDocOut.Load(FullFilePath);
    END;

    LOCAL PROCEDURE Equal@12(ExpectedValue@1000 : Variant;ActualValue@1001 : Text) : Boolean;
    VAR
      ActualDateValue@1003 : Date;
      ActualDecimalValue@1002 : Decimal;
    BEGIN
      IF IsDate(ExpectedValue) THEN BEGIN
        IF NOT EVALUATE(ActualDateValue,ActualValue,9) THEN
          EXIT(FALSE);
        EXIT(EqualDates(ExpectedValue,ActualDateValue));
      END;

      IF IsNumber(ExpectedValue) THEN BEGIN
        IF NOT EVALUATE(ActualDecimalValue,ActualValue,9) THEN
          EXIT(FALSE);
        EXIT(EqualNumbers(ExpectedValue,ActualDecimalValue));
      END;

      EXIT(FORMAT(ExpectedValue,0,9) = ActualValue);
    END;

    LOCAL PROCEDURE EqualDates@13(Left@1001 : Date;Right@1000 : Date) : Boolean;
    BEGIN
      EXIT(Left = Right)
    END;

    LOCAL PROCEDURE EqualNumbers@11(Left@1000 : Decimal;Right@1001 : Decimal) : Boolean;
    BEGIN
      EXIT(Left = Right)
    END;

    PROCEDURE GetAttributeValueInSubtree@14(RootNodeName@1002 : Text;NodeName@1001 : Text;AttributeName@1000 : Text) : Text;
    VAR
      Node@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
      AttributeCollection@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection" RUNONCLIENT;
      Attribute@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute" RUNONCLIENT;
    BEGIN
      LocateNodeInSubtree(Node,RootNodeName,NodeName,'',NodeMatchCriteria::FindByName);

      AttributeCollection := Node.Attributes;
      IF ISNULL(AttributeCollection) THEN
        Assert.Fail(STRSUBSTNO(NodeHasNoAttributesErr,NodeName,RootNodeName));

      Attribute := AttributeCollection.ItemOf(AttributeName);
      IF ISNULL(Attribute) THEN
        Assert.Fail(STRSUBSTNO(AttributeNotFoundErr,NodeName,RootNodeName,AttributeName));

      EXIT(Attribute.Value);
    END;

    PROCEDURE GetElementValue@2(ElementName@1000 : Text) : Text[1024];
    VAR
      XMLNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      GetNodeByElementName(ElementName,XMLNode);
      EXIT(COPYSTR(XMLNode.InnerText,1,1024));
    END;

    PROCEDURE GetNodesCount@22(NodeName@1000 : Text) : Integer;
    VAR
      NodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList" RUNONCLIENT;
    BEGIN
      EXIT(GetNodeListByElementName(NodeName,NodeList));
    END;

    PROCEDURE GetNodeValueAtIndex@21(NodeName@1000 : Text;Index@1003 : Integer) : Text[1024];
    VAR
      XMLNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
      NodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList" RUNONCLIENT;
      NodesCount@1004 : Integer;
    BEGIN
      NodesCount := GetNodeListByElementName(NodeName,NodeList);
      IF (Index < 0) OR (Index >= NodesCount) THEN
        ERROR(STRSUBSTNO(NodeIndexOutOfBoundsErr,NodeName,Index,NodesCount));
      XMLNode := NodeList.Item(Index);
      EXIT(COPYSTR(XMLNode.InnerText,1,1024));
    END;

    PROCEDURE GetNodeValueInSubtree@15(RootNodeName@1001 : Text;NodeName@1000 : Text) : Text;
    VAR
      Node@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      LocateNodeInSubtree(Node,RootNodeName,NodeName,'',NodeMatchCriteria::FindByName);
      EXIT(Node.InnerText);
    END;

    LOCAL PROCEDURE IsDate@16(Value@1000 : Variant) : Boolean;
    BEGIN
      EXIT(Value.ISDATE);
    END;

    LOCAL PROCEDURE IsNumber@10(Value@1001 : Variant) : Boolean;
    BEGIN
      EXIT(Value.ISDECIMAL OR Value.ISINTEGER OR Value.ISCHAR)
    END;

    PROCEDURE LocateNodeInSubtree@17(VAR Node@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";RootNodeName@1003 : Text;NodeName@1002 : Text;ExpectedNodeValue@1001 : Variant;MatchCriteria@1000 : Option);
    VAR
      NodeList@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList" RUNONCLIENT;
      NodeCount@1007 : Integer;
      Index@1006 : Integer;
      Found@1005 : Boolean;
    BEGIN
      // If multiple nodes with the same name exist in the subtree, only the first one encountered will be verified.
      IF (MatchCriteria = NodeMatchCriteria::FindByNameAndValue) AND Equal(ExpectedNodeValue,'') THEN
        ERROR(IncorrectUseOfFunctionErr);
      IF NOT (MatchCriteria IN [NodeMatchCriteria::FindByName,NodeMatchCriteria::FindByNameAndValue]) THEN
        ERROR(IncorrectUseOfFunctionErr);

      NodeCount := GetNodeListByElementName(NodeName,NodeList);

      IF NodeCount < 1 THEN
        Assert.Fail(STRSUBSTNO(MissingNodeErr,NodeName));

      Index := 0;
      Found := FALSE;
      REPEAT
        Node := NodeList.Item(Index);
        IF HasIndirectParent(Node,RootNodeName) AND
           ((MatchCriteria = NodeMatchCriteria::FindByName) OR Equal(ExpectedNodeValue,Node.InnerText))
        THEN
          Found := TRUE
        ELSE
          Index += 1;
      UNTIL (Found OR (Index = NodeCount));

      IF NOT Found THEN
        IF MatchCriteria = NodeMatchCriteria::FindByName THEN
          Assert.Fail(STRSUBSTNO(NotFoundAnyInSubtreeErr,NodeName,RootNodeName))
        ELSE
          Assert.Fail(STRSUBSTNO(NotFoundInSubtreeErr,NodeName,ExpectedNodeValue,RootNodeName));
    END;

    PROCEDURE VerifyNodeValue@3(ElementName@1001 : Text;Expected@1000 : Variant);
    VAR
      XMLNode@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      GetNodeByElementName(ElementName,XMLNode);
      Assert.AreEqual(FORMAT(Expected,0,9),XMLNode.InnerText,
        STRSUBSTNO(ElementValueErr,ElementName));
    END;

    PROCEDURE VerifyNodeValueInSubtree@18(RootNodeName@1002 : Text;NodeName@1001 : Text;ExpectedNodeValue@1000 : Variant);
    VAR
      Node@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      LocateNodeInSubtree(Node,RootNodeName,NodeName,ExpectedNodeValue,NodeMatchCriteria::FindByNameAndValue);
    END;

    PROCEDURE VerifyNodeAbsence@26(NodeName@1000 : Text);
    VAR
      XMLNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      ASSERTERROR GetNodeByElementName(NodeName,XMLNode);
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(MissingElementErr,NodeName));
    END;

    PROCEDURE VerifyNodeAbsenceInSubtree@24(RootNodeName@1001 : Text;NodeName@1000 : Text);
    VAR
      Node@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      ASSERTERROR LocateNodeInSubtree(Node,RootNodeName,NodeName,'',NodeMatchCriteria::FindByName);
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(NotFoundAnyInSubtreeErr,NodeName,RootNodeName));
    END;

    PROCEDURE VerifyElementAbsenceInSubtree@23(RootNodeName@1001 : Text;NodeName@1000 : Text);
    VAR
      Node@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      ASSERTERROR LocateNodeInSubtree(Node,RootNodeName,NodeName,'',NodeMatchCriteria::FindByName);
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(MissingElementErr,NodeName));
    END;

    PROCEDURE VerifyAttributeValue@4(ElementName@1002 : Text;AttributeName@1001 : Text;Expected@1000 : Variant);
    VAR
      Attribute@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute" RUNONCLIENT;
    BEGIN
      GetAttributeFromElement(ElementName,AttributeName,Attribute);
      Assert.AreEqual(FORMAT(Expected,0,9),Attribute.Value,
        STRSUBSTNO(AttributeValueErr,AttributeName));
    END;

    PROCEDURE VerifyAttributeValueInSubtree@19(RootNodeName@1003 : Text;NodeName@1002 : Text;AttributeName@1001 : Text;ExpectedAttributeValue@1000 : Text);
    VAR
      ActualAttributeValue@1004 : Text;
    BEGIN
      ActualAttributeValue := GetAttributeValueInSubtree(RootNodeName,NodeName,AttributeName);
      Assert.AreEqual(
        ExpectedAttributeValue,ActualAttributeValue,
        STRSUBSTNO(AttributeNodeValueErr,AttributeName,NodeName,RootNodeName));
    END;

    PROCEDURE VerifyAttributeAbsenceInSubtree@25(RootNodeName@1000 : Text;NodeName@1001 : Text;AttributeName@1002 : Text);
    BEGIN
      ASSERTERROR GetAttributeValueInSubtree(RootNodeName,NodeName,AttributeName);
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(AttributeNotFoundErr,NodeName,RootNodeName,AttributeName));
    END;

    PROCEDURE VerifyXMLDeclaration@5(Version@1002 : Text;Encoding@1001 : Text;Standalone@1000 : Text);
    VAR
      XMLDeclaration@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDeclaration" RUNONCLIENT;
    BEGIN
      XMLDeclaration := XMLDocOut.FirstChild;
      Assert.AreEqual(Version,XMLDeclaration.Version,DeclarationVersionErr);
      Assert.AreEqual(Encoding,XMLDeclaration.Encoding,DeclarationEncodingErr);
      Assert.AreEqual(Standalone,XMLDeclaration.Standalone,DeclarationStandaloneErr);
    END;

    PROCEDURE GetNodeListByElementName@6(ElementName@1001 : Text;VAR NodeList@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Integer;
    BEGIN
      NodeList := XMLDocOut.GetElementsByTagName(ElementName);
      IF NodeList.Count = 0 THEN
        ERROR(MissingElementErr,ElementName);
      EXIT(NodeList.Count);
    END;

    PROCEDURE GetAttributeFromElement@7(ElementName@1002 : Text;AttributeName@1001 : Text;VAR Attribute@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute");
    VAR
      Node@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      GetNodeByElementName(ElementName,Node);
      Attribute := Node.Attributes.GetNamedItem(AttributeName);
    END;

    PROCEDURE GetNodeByElementName@8(ElementName@1001 : Text;VAR Node@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeList@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList" RUNONCLIENT;
    BEGIN
      GetNodeListByElementName(ElementName,NodeList);
      Node := NodeList.Item(0);
    END;

    PROCEDURE GetFirstElementValueFromNode@9(ElementName@1002 : Text;NodeName@1001 : Text) : Text;
    VAR
      NodeList@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList" RUNONCLIENT;
      Node@1003 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
      Msg@1000 : Text[1024];
    BEGIN
      GetNodeListByElementName(NodeName,NodeList);
      Msg := COPYSTR(STRSUBSTNO(CountErr,NodeName),1,MAXSTRLEN(Msg));
      Assert.AreNotEqual(0,NodeList.Count,Msg);
      Node := NodeList.Item(0).SelectSingleNode(ElementName);

      EXIT(Node.InnerText);
    END;

    LOCAL PROCEDURE HasIndirectParent@20(Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";RootNodeName@1000 : Text) Found : Boolean;
    VAR
      RootNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode" RUNONCLIENT;
    BEGIN
      RootNode := Node.ParentNode;
      WHILE NOT ISNULL(RootNode) AND NOT Found DO BEGIN
        IF RootNode.Name = RootNodeName THEN
          Found := TRUE
        ELSE
          RootNode := RootNode.ParentNode;
      END;
    END;

    BEGIN
    END.
  }
}

