OBJECT Codeunit 130000 Assert
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IsTrueFailedMsg@1000 : TextConst 'ENU=Assert.IsTrue failed. %1';
      IsFalseFailedMsg@1001 : TextConst 'ENU=Assert.IsFalse failed. %1';
      AreEqualFailedMsg@1002 : TextConst '@@@=Do not translate;ENU=Assert.AreEqual failed. Expected:<%1> (%2). Actual:<%3> (%4). %5.';
      AreNotEqualFailedMsg@1003 : TextConst '@@@=Do not translate;ENU=Assert.AreNotEqual failed. Expected any value except:<%1> (%2). Actual:<%3> (%4). %5.';
      AreNearlyEqualFailedMsg@1006 : TextConst 'ENU=Assert.AreNearlyEqual failed. Expected a difference no greater than <%1> between expected value <%2> and actual value <%3>. %4';
      AreNotNearlyEqualFailedMsg@1007 : TextConst 'ENU=Assert.AreNotNearlyEqual failed. Expected a difference greater than <%1> between expected value <%2> and actual value <%3>. %4';
      FailFailedMsg@1004 : TextConst 'ENU=Assert.Fail failed. %1';
      TableIsEmptyErr@1019 : TextConst '@@@=Do not translate;ENU=Assert.TableIsEmpty failed. Table <%1> with filter <%2> must not contain records.';
      TableIsNotEmptyErr@1018 : TextConst '@@@=Do not translate;ENU=Assert.TableIsNotEmpty failed. Table <%1> with filter <%2> must contain records.';
      KnownFailureMsg@1009 : TextConst 'ENU=Known failure: see VSTF Bug #%1.';
      ExpectedErrorFailed@1016 : TextConst 'ENU=Assert.ExpectedError failed. Expected: %1. Actual: %2.';
      ExpectedErrorSubstringFailedErr@1022 : TextConst '@@@=%1 - substring, %2 - position, %3 - error message;ENU=Assert.ExpectedErrorSubstring failed. Substring <%1> has not been found at position <%2> in error <%3>.';
      ExpectedErrorCodeFailed@1017 : TextConst 'ENU=Assert.ExpectedErrorCode failed. Expected: %1. Actual: %2. Actual error message: %3.';
      ExpectedMessageFailedErr@1008 : TextConst 'ENU=Assert.ExpectedMessage failed. Expected: %1. Actual: %2.';
      RecordCountErr@1020 : TextConst '@@@=Do not translate;ENU=Assert.RecordCount failed. Expected number of %1 entries: %2. Actual: %3.';
      UnsupportedTypeErr@1005 : TextConst 'ENU=Equality assertions only support Boolean, Option, Integer, BigInteger, Decimal, Code, Text, Date, DateFormula, Time, Duration, and DateTime values. Current value:%1.';
      RecordNotFoundErrorCode@1010 : TextConst 'ENU=DB:RecordNotFound';
      RecordAlreadyExistsErrorCode@1011 : TextConst 'ENU=DB:RecordExists';
      RecordNothingInsideFilterErrorCode@1013 : TextConst 'ENU=DB:NothingInsideFilter';
      AssertErrorMsg@1012 : TextConst 'ENU=Expected error %1 actual %2';
      PrimRecordNotFoundErrorCode@1014 : TextConst 'ENU=DB:PrimRecordNotFound';
      NoFilterErrorCode@1015 : TextConst 'ENU=DB:NoFilter';
      ErrorHasNotBeenThrownErr@1021 : TextConst 'ENU=The error has not been thrown.';

    PROCEDURE IsTrue@1(Condition@1000 : Boolean;Msg@1001 : Text);
    BEGIN
      IF NOT Condition THEN
        ERROR(IsTrueFailedMsg,Msg)
    END;

    PROCEDURE IsFalse@4(Condition@1000 : Boolean;Msg@1001 : Text);
    BEGIN
      IF Condition THEN
        ERROR(IsFalseFailedMsg,Msg)
    END;

    PROCEDURE AreEqual@2(Expected@1000 : Variant;Actual@1001 : Variant;Msg@1002 : Text);
    BEGIN
      IF NOT Equal(Expected,Actual) THEN
        ERROR(AreEqualFailedMsg,Expected,TypeNameOf(Expected),Actual,TypeNameOf(Actual),Msg)
    END;

    PROCEDURE AreNotEqual@9(Expected@1000 : Variant;Actual@1001 : Variant;Msg@1002 : Text);
    BEGIN
      IF Equal(Expected,Actual) THEN
        ERROR(AreNotEqualFailedMsg,Expected,TypeNameOf(Expected),Actual,TypeNameOf(Actual),Msg)
    END;

    PROCEDURE AreNearlyEqual@3(Expected@1000 : Decimal;Actual@1001 : Decimal;Delta@1002 : Decimal;Msg@1003 : Text);
    BEGIN
      IF ABS(Expected - Actual) > ABS(Delta) THEN
        ERROR(AreNearlyEqualFailedMsg,Delta,Expected,Actual,Msg)
    END;

    PROCEDURE AreNotNearlyEqual@8(Expected@1000 : Decimal;Actual@1001 : Decimal;Delta@1002 : Decimal;Msg@1003 : Text);
    BEGIN
      IF ABS(Expected - Actual) <= ABS(Delta) THEN
        ERROR(AreNotNearlyEqualFailedMsg,Delta,Expected,Actual,Msg)
    END;

    PROCEDURE Fail@7(Msg@1000 : Text);
    BEGIN
      ERROR(FailFailedMsg,Msg)
    END;

    PROCEDURE RecordIsEmpty@28(RecVariant@1004 : Variant);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVariant);
      RecRefIsEmpty(RecRef);
    END;

    PROCEDURE RecordIsNotEmpty@27(RecVariant@1004 : Variant);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVariant);
      RecRefIsNotEmpty(RecRef);
    END;

    PROCEDURE TableIsEmpty@25(TableNo@1004 : Integer);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.OPEN(TableNo);
      RecRefIsEmpty(RecRef);
      RecRef.CLOSE;
    END;

    PROCEDURE TableIsNotEmpty@32(TableNo@1004 : Integer);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.OPEN(TableNo);
      RecRefIsNotEmpty(RecRef);
      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE RecRefIsEmpty@30(VAR RecRef@1004 : RecordRef);
    BEGIN
      IF NOT RecRef.ISEMPTY THEN
        ERROR(TableIsEmptyErr,RecRef.CAPTION,RecRef.GETFILTERS);
    END;

    LOCAL PROCEDURE RecRefIsNotEmpty@29(VAR RecRef@1000 : RecordRef);
    BEGIN
      IF RecRef.ISEMPTY THEN
        ERROR(TableIsNotEmptyErr,RecRef.CAPTION,RecRef.GETFILTERS);
    END;

    PROCEDURE RecordCount@31(RecVariant@1000 : Variant;ExpectedCount@1001 : Integer);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVariant);
      IF ExpectedCount <> RecRef.COUNT THEN
        ERROR(RecordCountErr,RecRef.CAPTION,ExpectedCount,RecRef.COUNT);
      RecRef.CLOSE;
    END;

    PROCEDURE KnownFailure@6(Expected@1000 : Text;WorkItemNo@1001 : Integer);
    BEGIN
      ExpectedError(Expected);
      ERROR(KnownFailureMsg,WorkItemNo)
    END;

    PROCEDURE ExpectedError@13(Expected@1000 : Text);
    BEGIN
      IF (GETLASTERRORTEXT = '') AND (Expected = '') THEN BEGIN
        IF GETLASTERRORCALLSTACK = '' THEN
          ERROR(ErrorHasNotBeenThrownErr);
      END ELSE
        IF STRPOS(GETLASTERRORTEXT,Expected) = 0 THEN
          ERROR(ExpectedErrorFailed,Expected,GETLASTERRORTEXT);
    END;

    PROCEDURE ExpectedErrorSubstring@33(Expected@1000 : Text;Position@1001 : Integer);
    BEGIN
      IF (GETLASTERRORTEXT = '') AND (Expected = '') THEN BEGIN
        IF GETLASTERRORCALLSTACK = '' THEN
          ERROR(ErrorHasNotBeenThrownErr);
      END ELSE
        IF STRPOS(GETLASTERRORTEXT,Expected) <> Position THEN
          ERROR(STRSUBSTNO(ExpectedErrorSubstringFailedErr,Expected,Position,GETLASTERRORTEXT));
    END;

    PROCEDURE ExpectedErrorCode@20(Expected@1000 : Text);
    BEGIN
      IF STRPOS(GETLASTERRORCODE,Expected) = 0 THEN
        ERROR(ExpectedErrorCodeFailed,Expected,GETLASTERRORCODE,GETLASTERRORTEXT);
    END;

    PROCEDURE ExpectedMessage@23(Expected@1000 : Text;Actual@1001 : Text);
    BEGIN
      IF STRPOS(Actual,Expected) = 0 THEN
        ERROR(ExpectedMessageFailedErr,Expected,Actual);
    END;

    PROCEDURE IsDataTypeSupported@22(Value@1000 : Variant) : Boolean;
    BEGIN
      EXIT(Value.ISBOOLEAN OR
        Value.ISOPTION OR
        Value.ISINTEGER OR
        Value.ISDECIMAL OR
        Value.ISTEXT OR
        Value.ISCODE OR
        Value.ISDATE OR
        Value.ISDATETIME OR
        Value.ISDATEFORMULA OR
        Value.ISGUID OR
        Value.ISDURATION OR
        Value.ISRECORDID OR
        Value.ISBIGINTEGER OR
        Value.ISCHAR OR
        Value.ISTIME);
    END;

    LOCAL PROCEDURE TypeOf@5(Value@1000 : Variant) : Integer;
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      CASE TRUE OF
        Value.ISBOOLEAN:
          EXIT(Field.Type::Boolean);
        Value.ISOPTION OR Value.ISINTEGER:
          EXIT(Field.Type::Integer);
        Value.ISBIGINTEGER:
          EXIT(Field.Type::BigInteger);
        Value.ISDECIMAL:
          EXIT(Field.Type::Decimal);
        Value.ISTEXT OR Value.ISCODE OR Value.ISCHAR:
          EXIT(Field.Type::Text);
        Value.ISDATE:
          EXIT(Field.Type::Date);
        Value.ISTIME:
          EXIT(Field.Type::Time);
        Value.ISDURATION:
          EXIT(Field.Type::Duration);
        Value.ISDATETIME:
          EXIT(Field.Type::DateTime);
        Value.ISDATEFORMULA:
          EXIT(Field.Type::DateFormula);
        Value.ISGUID:
          EXIT(Field.Type::GUID);
        Value.ISRECORDID:
          EXIT(Field.Type::RecordID);
        ELSE
          ERROR(UnsupportedTypeErr,UnsupportedTypeName(Value))
      END
    END;

    LOCAL PROCEDURE TypeNameOf@26(Value@1000 : Variant) : Text;
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.Type := TypeOf(Value);
      EXIT(FORMAT(Field.Type));
    END;

    LOCAL PROCEDURE UnsupportedTypeName@24(Value@1000 : Variant) : Text;
    BEGIN
      CASE TRUE OF
        Value.ISRECORD:
          EXIT('Record');
        Value.ISRECORDREF:
          EXIT('RecordRef');
        Value.ISFIELDREF:
          EXIT('FieldRef');
        Value.ISCODEUNIT:
          EXIT('Codeunit');
        Value.ISAUTOMATION:
          EXIT('Automation');
        Value.ISFILE:
          EXIT('File');
      END;
      EXIT('Unsupported Type');
    END;

    PROCEDURE Compare@21(Left@1000 : Variant;Right@1001 : Variant) : Boolean;
    BEGIN
      EXIT(Equal(Left,Right))
    END;

    LOCAL PROCEDURE Equal@12(Left@1000 : Variant;Right@1001 : Variant) : Boolean;
    BEGIN
      IF IsNumber(Left) AND IsNumber(Right) THEN
        EXIT(EqualNumbers(Left,Right));

      EXIT((TypeOf(Left) = TypeOf(Right)) AND (FORMAT(Left,0,2) = FORMAT(Right,0,2)))
    END;

    LOCAL PROCEDURE EqualNumbers@11(Left@1000 : Decimal;Right@1001 : Decimal) : Boolean;
    BEGIN
      EXIT(Left = Right)
    END;

    LOCAL PROCEDURE IsNumber@10(Value@1001 : Variant) : Boolean;
    BEGIN
      EXIT(Value.ISDECIMAL OR Value.ISINTEGER OR Value.ISCHAR)
    END;

    PROCEDURE VerifyFailure@14(expectedErrorCode@1000 : Text;failureText@1001 : Text);
    VAR
      errorCode@1002 : Text;
    BEGIN
      errorCode := GETLASTERRORCODE;

      IsTrue(errorCode = expectedErrorCode,failureText);
      CLEARLASTERROR;
    END;

    PROCEDURE AssertRecordNotFound@15();
    BEGIN
      VerifyFailure(RecordNotFoundErrorCode,STRSUBSTNO(AssertErrorMsg,RecordNotFoundErrorCode,GETLASTERRORCODE));
    END;

    PROCEDURE AssertRecordAlreadyExists@16();
    BEGIN
      VerifyFailure(RecordAlreadyExistsErrorCode,STRSUBSTNO(AssertErrorMsg,RecordAlreadyExistsErrorCode,GETLASTERRORCODE));
    END;

    PROCEDURE AssertNothingInsideFilter@17();
    BEGIN
      VerifyFailure(RecordNothingInsideFilterErrorCode,STRSUBSTNO(AssertErrorMsg,RecordNothingInsideFilterErrorCode,GETLASTERRORCODE));
    END;

    PROCEDURE AssertNoFilter@19();
    BEGIN
      VerifyFailure(NoFilterErrorCode,STRSUBSTNO(AssertErrorMsg,NoFilterErrorCode,GETLASTERRORCODE));
    END;

    PROCEDURE AssertPrimRecordNotFound@18();
    BEGIN
      VerifyFailure(PrimRecordNotFoundErrorCode,STRSUBSTNO(AssertErrorMsg,PrimRecordNotFoundErrorCode,GETLASTERRORCODE));
    END;

    BEGIN
    END.
  }
}

