OBJECT Codeunit 130502 Library - Item Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1002 : TextConst 'ENU="Not implemented. Source Type = %1."';
      Text002@1005 : TextConst 'ENU=Qty Base for Serial No. %1 is %2.';
      Text031@1004 : TextConst 'ENU=You cannot define item tracking on this line because it is linked to production order %1.';
      Text048@1003 : TextConst 'ENU=You cannot use item tracking on a %1 created from a %2.';
      LibraryInventory@1001 : Codeunit 132201;
      LibraryUtility@1000 : Codeunit 131000;

    PROCEDURE AddSerialNoTrackingInfo@115(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    PROCEDURE AddLotNoTrackingInfo@2(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    PROCEDURE CreateAssemblyHeaderItemTracking@98(VAR ReservEntry@1001 : Record 337;AssemblyHeader@1000 : Record 900;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(AssemblyHeader);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateAssemblyLineItemTracking@99(VAR ReservEntry@1001 : Record 337;AssemblyLine@1000 : Record 901;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(AssemblyLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateItemJournalLineItemTracking@89(VAR ReservEntry@1001 : Record 337;ItemJournalLine@1000 : Record 83;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      IF ItemJournalLine."Entry Type" = ItemJournalLine."Entry Type"::Transfer THEN // cannot create this type from UI
        ERROR(Text001,RecRef.NUMBER);
      RecRef.GETTABLE(ItemJournalLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateItemTrackingCode@1(VAR ItemTrackingCode@1000 : Record 6502;SNSpecific@1002 : Boolean;LNSpecific@1003 : Boolean);
    BEGIN
      ItemTrackingCode.INIT;
      ItemTrackingCode.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(ItemTrackingCode.FIELDNO(Code),DATABASE::"Item Tracking Code"));
      ItemTrackingCode.VALIDATE("SN Specific Tracking",SNSpecific);
      ItemTrackingCode.VALIDATE("Lot Specific Tracking",LNSpecific);
      ItemTrackingCode.INSERT(TRUE);
    END;

    PROCEDURE CreateLotItem@4(VAR Item@1001 : Record 27) : Code[20];
    BEGIN
      LibraryInventory.CreateItem(Item);
      AddLotNoTrackingInfo(Item);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateLotNoInformation@35(VAR LotNoInformation@1004 : Record 6505;ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LotNo@1003 : Code[20]);
    BEGIN
      CLEAR(LotNoInformation);
      LotNoInformation.INIT;
      LotNoInformation.VALIDATE("Item No.",ItemNo);
      LotNoInformation.VALIDATE("Variant Code",VariantCode);
      LotNoInformation.VALIDATE("Lot No.",LotNo);
      LotNoInformation.INSERT(TRUE);
    END;

    PROCEDURE CreatePlanningWkshItemTracking@91(VAR ReservEntry@1001 : Record 337;ReqLine@1000 : Record 246;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(ReqLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateProdOrderItemTracking@83(VAR ReservEntry@1001 : Record 337;ProdOrderLine@1000 : Record 5406;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(ProdOrderLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateProdOrderCompItemTracking@87(VAR ReservEntry@1001 : Record 337;ProdOrderComp@1000 : Record 5407;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(ProdOrderComp);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreatePurchOrderItemTracking@79(VAR ReservEntry@1001 : Record 337;PurchLine@1000 : Record 39;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      IF PurchLine."Document Type" = PurchLine."Document Type"::"Blanket Order" THEN // cannot create IT for this line from UI
        ERROR(Text001,RecRef.NUMBER);
      RecRef.GETTABLE(PurchLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateReqWkshItemTracking@93(VAR ReservEntry@1001 : Record 337;ReqLine@1000 : Record 246;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    BEGIN
      CreatePlanningWkshItemTracking(ReservEntry,ReqLine,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateSalesOrderItemTracking@77(VAR ReservEntry@1001 : Record 337;SalesLine@1000 : Record 37;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      IF SalesLine."Document Type" = SalesLine."Document Type"::"Blanket Order" THEN // cannot create IT for this line from UI
        ERROR(Text001,RecRef.NUMBER);
      RecRef.GETTABLE(SalesLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateSerialItem@3(VAR Item@1001 : Record 27) : Code[20];
    BEGIN
      LibraryInventory.CreateItem(Item);
      AddSerialNoTrackingInfo(Item);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateSerialNoInformation@33(VAR SerialNoInformation@1004 : Record 6504;ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];SerialNo@1003 : Code[20]);
    BEGIN
      CLEAR(SerialNoInformation);
      SerialNoInformation.INIT;
      SerialNoInformation.VALIDATE("Item No.",ItemNo);
      SerialNoInformation.VALIDATE("Variant Code",VariantCode);
      SerialNoInformation.VALIDATE("Serial No.",SerialNo);
      SerialNoInformation.INSERT(TRUE);
    END;

    PROCEDURE CreateTransferOrderItemTracking@81(VAR ReservEntry@1001 : Record 337;TransferLine@1000 : Record 5741;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      // Only creates IT lines for Transfer order shipment! IT lines for receipt cannot be added in form.
      // Note that the ReservEntry returned has two lines - one for TRANSFER-FROM and one for TRANSFER-TO
      RecRef.GETTABLE(TransferLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateWhseInvtPickItemTracking@67(VAR WhseItemTrackingLine@1004 : Record 6550;WhseInternalPickLine@1003 : Record 7334;SerialNo@1002 : Code[20];LotNo@1001 : Code[20];QtyBase@1000 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(WhseInternalPickLine);
      WhseItemTracking(WhseItemTrackingLine,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateWhseInvtPutawayItemTracking@66(VAR WhseItemTrackingLine@1004 : Record 6550;WhseInternalPutAwayLine@1003 : Record 7332;SerialNo@1002 : Code[20];LotNo@1001 : Code[20];QtyBase@1000 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(WhseInternalPutAwayLine);
      WhseItemTracking(WhseItemTrackingLine,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateWhseJournalLineItemTracking@84(VAR WhseItemTrackingLine@1004 : Record 6550;WhseJnlLine@1003 : Record 7311;SerialNo@1002 : Code[20];LotNo@1001 : Code[20];QtyBase@1000 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(WhseJnlLine);
      WhseItemTracking(WhseItemTrackingLine,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateWhseReceiptItemTracking@58(VAR ReservEntry@1001 : Record 337;WhseRcptLine@1000 : Record 7317;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(WhseRcptLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateWhseShipmentItemTracking@55(VAR ReservEntry@1001 : Record 337;WhseShptLine@1000 : Record 7321;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(WhseShptLine);
      ItemTracking(ReservEntry,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE CreateWhseWkshItemTracking@62(VAR WhseItemTrackingLine@1001 : Record 6550;WhseWkshLine@1000 : Record 7326;SerialNo@1002 : Code[20];LotNo@1003 : Code[20];QtyBase@1004 : Decimal);
    VAR
      RecRef@1005 : RecordRef;
    BEGIN
      RecRef.GETTABLE(WhseWkshLine);
      WhseItemTracking(WhseItemTrackingLine,RecRef,SerialNo,LotNo,QtyBase);
    END;

    PROCEDURE ItemJournal_CalcWhseAdjmnt@30(VAR Item@1004 : Record 27;NewPostingDate@1002 : Date;DocumentNo@1003 : Text[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
      TmpItem@1005 : Record 27;
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalBatch@1007 : Record 233;
      CalcWhseAdjmnt@1000 : Report 7315;
      NoSeriesMgt@1008 : Codeunit 396;
      LibraryAssembly@1009 : Codeunit 132207;
    BEGIN
      LibraryAssembly.SetupItemJournal(ItemJournalTemplate,ItemJournalBatch);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);

      COMMIT;
      CalcWhseAdjmnt.SetItemJnlLine(ItemJournalLine);
      IF DocumentNo = '' THEN
        DocumentNo := NoSeriesMgt.GetNextNo(ItemJournalBatch."No. Series",NewPostingDate,FALSE);
      CalcWhseAdjmnt.InitializeRequest(NewPostingDate,DocumentNo);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;

      CalcWhseAdjmnt.SETTABLEVIEW(TmpItem);
      CalcWhseAdjmnt.USEREQUESTPAGE(FALSE);
      CalcWhseAdjmnt.RUNMODAL;
    END;

    LOCAL PROCEDURE ItemTracking@53(VAR ReservEntry@1010 : Record 337;RecRef@1001 : RecordRef;SerialNo@1000 : Code[20];LotNo@1008 : Code[20];QtyBase@1009 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
      PurchLine@1003 : Record 39;
      AssemblyLine@1014 : Record 901;
      AssemblyHeader@1016 : Record 900;
      TransLine@1004 : Record 5741;
      ProdOrderLine@1005 : Record 5406;
      ProdOrderCompLine@1006 : Record 5407;
      ItemJournalLine@1007 : Record 83;
      ReqLine@1011 : Record 246;
      WhseShptLine@1017 : Record 7321;
      WhseRcptLine@1018 : Record 7317;
      Job@1015 : Record 167;
      Item@1019 : Record 27;
      OutgoingEntryNo@1012 : Integer;
      IncomingEntryNo@1013 : Integer;
    BEGIN
      SerialNo := DELCHR(SerialNo,'<',' '); // remove leading spaces
      LotNo := DELCHR(LotNo,'<',' '); // remove leading spaces
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Line":
          BEGIN
            RecRef.SETTABLE(SalesLine);
            // COPY FROM TAB 37: OpenItemTrackingLines
            SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
            SalesLine.TESTFIELD("No.");
            SalesLine.TESTFIELD("Quantity (Base)");
            IF SalesLine."Job Contract Entry No." <> 0 THEN
              ERROR(Text048,SalesLine.TABLECAPTION,Job.TABLECAPTION);
            // COPY END
            InsertItemTracking(ReservEntry,
              SalesLine.SignedXX(SalesLine.Quantity) > 0,
              SalesLine."No.",
              SalesLine."Location Code",
              SalesLine."Variant Code",
              SalesLine.SignedXX(QtyBase),
              SalesLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Sales Line",
              SalesLine."Document Type",
              SalesLine."Document No.",
              '',
              0,
              SalesLine."Line No.",
              SalesLine."Shipment Date");
          END;
        DATABASE::"Purchase Line":
          BEGIN
            RecRef.SETTABLE(PurchLine);
            // COPY FROM TAB 39: OpenItemTrackingLines
            PurchLine.TESTFIELD(Type,PurchLine.Type::Item);
            PurchLine.TESTFIELD("No.");
            IF PurchLine."Prod. Order No." <> '' THEN
              ERROR(Text031,PurchLine."Prod. Order No.");
            PurchLine.TESTFIELD("Quantity (Base)");
            // COPY END
            InsertItemTracking(ReservEntry,
              PurchLine.Signed(PurchLine.Quantity) > 0,
              PurchLine."No.",
              PurchLine."Location Code",
              PurchLine."Variant Code",
              PurchLine.Signed(QtyBase),
              PurchLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Purchase Line",
              PurchLine."Document Type",
              PurchLine."Document No.",
              '',
              0,
              PurchLine."Line No.",
              PurchLine."Expected Receipt Date");
          END;
        DATABASE::"Assembly Line":
          BEGIN
            RecRef.SETTABLE(AssemblyLine);
            AssemblyLine.TESTFIELD(Type,AssemblyLine.Type::Item);
            AssemblyLine.TESTFIELD("No.");
            AssemblyLine.TESTFIELD("Quantity (Base)");
            InsertItemTracking(ReservEntry,
              AssemblyLine.Quantity < 0,
              AssemblyLine."No.",
              AssemblyLine."Location Code",
              AssemblyLine."Variant Code",
              -QtyBase,
              AssemblyLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Assembly Line",
              AssemblyLine."Document Type",
              AssemblyLine."Document No.",
              '',
              0,
              AssemblyLine."Line No.",
              AssemblyLine."Due Date");
          END;
        DATABASE::"Assembly Header":
          BEGIN
            RecRef.SETTABLE(AssemblyHeader);
            AssemblyHeader.TESTFIELD("Document Type",AssemblyHeader."Document Type"::Order);
            AssemblyHeader.TESTFIELD("Item No.");
            AssemblyHeader.TESTFIELD("Quantity (Base)");
            InsertItemTracking(ReservEntry,
              AssemblyHeader.Quantity > 0,
              AssemblyHeader."Item No.",
              AssemblyHeader."Location Code",
              AssemblyHeader."Variant Code",
              QtyBase,
              AssemblyHeader."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Assembly Header",
              AssemblyHeader."Document Type",
              AssemblyHeader."No.",
              '',
              0,
              0,
              AssemblyHeader."Due Date");
          END;
        DATABASE::"Transfer Line":
          BEGIN
            RecRef.SETTABLE(TransLine);
            // COPY FROM TAB 5741: OpenItemTrackingLines
            TransLine.TESTFIELD("Item No.");
            TransLine.TESTFIELD("Quantity (Base)");
            // COPY END
            // creates 2 lines- one for Transfer-from and another for Transfer-to
            // first, outgoing line
            InsertItemTracking(ReservEntry,
              FALSE,
              TransLine."Item No.",
              TransLine."Transfer-from Code",
              TransLine."Variant Code",
              -QtyBase,
              TransLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Transfer Line",
              0,
              TransLine."Document No.",
              '',
              0,
              TransLine."Line No.",
              TransLine."Shipment Date");
            OutgoingEntryNo := ReservEntry."Entry No.";
            // next, incoming line
            InsertItemTracking(ReservEntry,
              TRUE,
              TransLine."Item No.",
              TransLine."Transfer-to Code",
              TransLine."Variant Code",
              QtyBase,
              TransLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Transfer Line",
              1,
              TransLine."Document No.",
              '',
              0,
              TransLine."Line No.",
              TransLine."Receipt Date");
            IncomingEntryNo := ReservEntry."Entry No.";
            CLEAR(ReservEntry);
            ReservEntry.SETFILTER("Entry No.",'%1|%2',OutgoingEntryNo,IncomingEntryNo);
            ReservEntry.FINDSET; // returns both entries
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            RecRef.SETTABLE(ProdOrderLine);
            // COPY FROM COD 99000837: CallItemTracking
            IF ProdOrderLine.Status = ProdOrderLine.Status::Finished THEN
              EXIT;
            ProdOrderLine.TESTFIELD("Item No.");
            // COPY END
            InsertItemTracking(ReservEntry,
              ProdOrderLine.Quantity > 0,
              ProdOrderLine."Item No.",
              ProdOrderLine."Location Code",
              ProdOrderLine."Variant Code",
              QtyBase,
              ProdOrderLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Prod. Order Line",
              ProdOrderLine.Status,
              ProdOrderLine."Prod. Order No.",
              '',
              ProdOrderLine."Line No.",
              0,
              ProdOrderLine."Due Date");
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            RecRef.SETTABLE(ProdOrderCompLine);
            // COPY FROM COD 99000838: CallItemTracking
            IF ProdOrderCompLine.Status = ProdOrderCompLine.Status::Finished THEN
              EXIT;
            ProdOrderCompLine.TESTFIELD("Item No.");
            // COPY END
            InsertItemTracking(ReservEntry,
              ProdOrderCompLine.Quantity < 0,
              ProdOrderCompLine."Item No.",
              ProdOrderCompLine."Location Code",
              ProdOrderCompLine."Variant Code",
              -QtyBase,
              ProdOrderCompLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Prod. Order Component",
              ProdOrderCompLine.Status,
              ProdOrderCompLine."Prod. Order No.",
              '',
              ProdOrderCompLine."Prod. Order Line No.",
              ProdOrderCompLine."Line No.",
              ProdOrderCompLine."Due Date");
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            RecRef.SETTABLE(ItemJournalLine);
            InsertItemTracking(ReservEntry,
              ItemJournalLine.Signed(ItemJournalLine.Quantity) > 0,
              ItemJournalLine."Item No.",
              ItemJournalLine."Location Code",
              ItemJournalLine."Variant Code",
              ItemJournalLine.Signed(QtyBase),
              ItemJournalLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Item Journal Line",
              ItemJournalLine."Entry Type",
              ItemJournalLine."Journal Template Name",
              ItemJournalLine."Journal Batch Name",
              0,
              ItemJournalLine."Line No.",
              ItemJournalLine."Posting Date");
          END;
        DATABASE::"Requisition Line":
          BEGIN
            RecRef.SETTABLE(ReqLine);
            // COPY FROM TAB 246: OpenItemTrackingLines
            ReqLine.TESTFIELD(Type,ReqLine.Type::Item);
            ReqLine.TESTFIELD("No.");
            ReqLine.TESTFIELD("Quantity (Base)");
            // COPY END
            InsertItemTracking(ReservEntry,
              ReqLine.Quantity > 0,
              ReqLine."No.",
              ReqLine."Location Code",
              ReqLine."Variant Code",
              QtyBase,
              ReqLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Requisition Line",
              0,
              ReqLine."Worksheet Template Name",
              ReqLine."Journal Batch Name",
              ReqLine."Prod. Order Line No.",
              ReqLine."Line No.",
              ReqLine."Due Date");
          END;
        DATABASE::"Warehouse Shipment Line":
          BEGIN
            WhseShptLine.INIT;
            RecRef.SETTABLE(WhseShptLine);
            // COPY FROM TAB 7321: OpenItemTrackingLines
            WhseShptLine.TESTFIELD("No.");
            WhseShptLine.TESTFIELD("Qty. (Base)");
            Item.GET(WhseShptLine."Item No.");
            Item.TESTFIELD("Item Tracking Code");
            // COPY END
            CASE WhseShptLine."Source Type" OF
              DATABASE::"Sales Line":
                BEGIN
                  IF SalesLine.GET(WhseShptLine."Source Subtype",WhseShptLine."Source No.",WhseShptLine."Source Line No.") THEN
                    CreateSalesOrderItemTracking(ReservEntry,SalesLine,SerialNo,LotNo,QtyBase);
                END;
              DATABASE::"Purchase Line":
                BEGIN
                  IF PurchLine.GET(WhseShptLine."Source Subtype",WhseShptLine."Source No.",WhseShptLine."Source Line No.") THEN
                    CreatePurchOrderItemTracking(ReservEntry,PurchLine,SerialNo,LotNo,QtyBase);
                END;
              DATABASE::"Transfer Line":
                BEGIN
                  // Outbound only
                  IF TransLine.GET(WhseShptLine."Source No.",WhseShptLine."Source Line No.") THEN
                    CreateTransferOrderItemTracking(ReservEntry,TransLine,SerialNo,LotNo,QtyBase);
                END;
            END;
          END;
        DATABASE::"Warehouse Receipt Line":
          BEGIN
            WhseRcptLine.INIT;
            RecRef.SETTABLE(WhseRcptLine);
            // COPY FROM TAB 7317: OpenItemTrackingLines
            WhseRcptLine.TESTFIELD("No.");
            WhseRcptLine.TESTFIELD("Qty. (Base)");
            Item.GET(WhseRcptLine."Item No.");
            Item.TESTFIELD("Item Tracking Code");
            // COPY END
            CASE WhseRcptLine."Source Type" OF
              DATABASE::"Purchase Line":
                BEGIN
                  IF PurchLine.GET(WhseRcptLine."Source Subtype",WhseRcptLine."Source No.",WhseRcptLine."Source Line No.") THEN
                    CreatePurchOrderItemTracking(ReservEntry,PurchLine,SerialNo,LotNo,QtyBase);
                END;
              DATABASE::"Sales Line":
                BEGIN
                  IF SalesLine.GET(WhseRcptLine."Source Subtype",WhseRcptLine."Source No.",WhseRcptLine."Source Line No.") THEN
                    CreateSalesOrderItemTracking(ReservEntry,SalesLine,SerialNo,LotNo,QtyBase);
                END;
              DATABASE::"Transfer Line":
                // Inbound only - not possible to ADD item tracking lines- so throw error
                ERROR(Text001,RecRef.NUMBER);
            END;
          END;
        ELSE
          ERROR(Text001,RecRef.NUMBER);
      END;
    END;

    LOCAL PROCEDURE InsertItemTracking@54(VAR ReservEntry@1017 : Record 337;Positive2@1004 : Boolean;Item@1001 : Code[20];Location@1002 : Code[10];Variant@1003 : Code[10];QtyBase@1005 : Decimal;QtyperUOM@1006 : Decimal;SerialNo@1007 : Code[20];LotNo@1008 : Code[20];SourceType@1009 : Integer;SourceSubType@1010 : Option;SourceID@1011 : Code[20];SourceBatchName@1012 : Code[10];SourceProdOrderLine@1013 : Integer;SourceRefNo@1014 : Integer;DueDate@1016 : Date);
    VAR
      SalesLine@1018 : Record 37;
      PurchLine@1019 : Record 39;
      ItemJnlLine@1020 : Record 83;
      LastEntryNo@1015 : Integer;
    BEGIN
      IF (SerialNo <> '') AND (ABS(QtyBase) > 1) THEN
        ERROR(Text002,SerialNo,QtyBase);
      CLEAR(ReservEntry);
      WITH ReservEntry DO BEGIN
        IF FINDLAST THEN
          LastEntryNo := "Entry No." + 1
        ELSE
          LastEntryNo := 1;
        INIT;
        "Entry No." := LastEntryNo;
        Positive := Positive2;
        IF (SourceType = DATABASE::"Item Journal Line") OR
           ((SourceType = DATABASE::"Prod. Order Line") AND (SourceSubType IN [0,1])) OR // simulated or planned prod line
           ((SourceType = DATABASE::"Prod. Order Component") AND (SourceSubType IN [0,1])) OR // simulated or planned prod comp
           (SourceType = DATABASE::"Requisition Line")
        THEN
          VALIDATE("Reservation Status","Reservation Status"::Prospect)
        ELSE
          VALIDATE("Reservation Status","Reservation Status"::Surplus);

        VALIDATE("Item No.",Item);
        VALIDATE("Location Code",Location);
        VALIDATE("Variant Code",Variant);
        VALIDATE("Qty. per Unit of Measure",QtyperUOM);
        VALIDATE("Quantity (Base)",QtyBase);

        CASE SourceType OF
          DATABASE::"Item Journal Line":
            CASE SourceSubType OF
              ItemJnlLine."Entry Type"::Purchase,
              ItemJnlLine."Entry Type"::"Positive Adjmt.",
              ItemJnlLine."Entry Type"::Output:
                VALIDATE("Expected Receipt Date",DueDate);
              ItemJnlLine."Entry Type"::Sale,
              ItemJnlLine."Entry Type"::"Negative Adjmt.",
              ItemJnlLine."Entry Type"::Consumption:
                VALIDATE("Shipment Date",DueDate);
            END;
          DATABASE::"Prod. Order Line",
          DATABASE::"Requisition Line",
          DATABASE::"Prod. Order Component":
            VALIDATE("Shipment Date",DueDate);
          DATABASE::"Sales Line":
            CASE SourceSubType OF
              SalesLine."Document Type"::Order,
              SalesLine."Document Type"::Invoice,
              SalesLine."Document Type"::Quote:
                VALIDATE("Shipment Date",DueDate);
              SalesLine."Document Type"::"Return Order",
              SalesLine."Document Type"::"Credit Memo":
                VALIDATE("Expected Receipt Date",DueDate);
            END;
          DATABASE::"Purchase Line":
            CASE SourceSubType OF
              PurchLine."Document Type"::Order,
              PurchLine."Document Type"::Invoice,
              PurchLine."Document Type"::Quote:
                VALIDATE("Expected Receipt Date",DueDate);
              PurchLine."Document Type"::"Return Order",
              PurchLine."Document Type"::"Credit Memo":
                VALIDATE("Shipment Date",DueDate);
            END;
          ELSE
            IF Positive2 THEN
              VALIDATE("Expected Receipt Date",DueDate)
            ELSE
              VALIDATE("Shipment Date",DueDate);
        END;
        VALIDATE("Creation Date",WORKDATE);
        "Created By" := USERID;

        IF SerialNo <> '' THEN BEGIN
          VALIDATE("Serial No.",SerialNo);
          IF LotNo <> '' THEN
            VALIDATE("Item Tracking","Item Tracking"::"Lot and Serial No.")
          ELSE
            VALIDATE("Item Tracking","Item Tracking"::"Serial No.");
        END;
        IF LotNo <> '' THEN BEGIN
          VALIDATE("Lot No.",LotNo);
          IF SerialNo <> '' THEN
            VALIDATE("Item Tracking","Item Tracking"::"Lot and Serial No.")
          ELSE
            VALIDATE("Item Tracking","Item Tracking"::"Lot No.");
        END;

        VALIDATE("Source Type",SourceType);
        VALIDATE("Source Subtype",SourceSubType);
        VALIDATE("Source ID",SourceID);
        VALIDATE("Source Batch Name",SourceBatchName);
        VALIDATE("Source Prod. Order Line",SourceProdOrderLine);
        VALIDATE("Source Ref. No.",SourceRefNo);

        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE WhseItemTracking@57(VAR WhseItemTrackingLine@1004 : Record 6550;RecRef@1003 : RecordRef;SerialNo@1002 : Code[20];LotNo@1001 : Code[20];QtyBase@1000 : Decimal);
    VAR
      WhseJnlLine@1005 : Record 7311;
      WhseWkshLine@1006 : Record 7326;
      WhseInternalPutAwayLine@1007 : Record 7332;
      WhseInternalPickLine@1008 : Record 7334;
      SourceType@1009 : Integer;
      SourceID@1010 : Code[20];
      SourceBatchName@1011 : Code[10];
      SourceRefNo@1012 : Integer;
    BEGIN
      SerialNo := DELCHR(SerialNo,'<',' '); // remove leading spaces
      LotNo := DELCHR(LotNo,'<',' '); // remove leading spaces
      CASE RecRef.NUMBER OF
        DATABASE::"Warehouse Journal Line":
          BEGIN
            WhseJnlLine.INIT;
            RecRef.SETTABLE(WhseJnlLine);
            // COPY FROM TAB 7311: OpenItemTrackingLines
            WhseJnlLine.TESTFIELD("Item No.");
            WhseJnlLine.TESTFIELD("Qty. (Base)");
            // COPY END
            WhseInsertItemTracking(WhseItemTrackingLine,
              WhseJnlLine."Item No.",
              WhseJnlLine."Location Code",
              WhseJnlLine."Variant Code",
              QtyBase,
              WhseJnlLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              DATABASE::"Warehouse Journal Line",
              0,
              WhseJnlLine."Journal Batch Name",
              WhseJnlLine."Journal Template Name",
              0,
              WhseJnlLine."Line No.");
          END;
        DATABASE::"Whse. Worksheet Line":
          BEGIN
            RecRef.SETTABLE(WhseWkshLine);
            // COPY FROM TAB 7326: OpenItemTrackingLines
            WhseWkshLine.TESTFIELD("Item No.");
            WhseWkshLine.TESTFIELD("Qty. (Base)");
            CASE WhseWkshLine."Whse. Document Type" OF
              WhseWkshLine."Whse. Document Type"::Receipt:
                BEGIN
                  SourceType := DATABASE::"Posted Whse. Receipt Line";
                  SourceID := WhseWkshLine."Whse. Document No.";
                  SourceBatchName := '';
                  SourceRefNo := WhseWkshLine."Whse. Document Line No.";
                END;
              WhseWkshLine."Whse. Document Type"::Shipment:
                BEGIN
                  SourceType := DATABASE::"Warehouse Shipment Line";
                  SourceID := WhseWkshLine."Whse. Document No.";
                  SourceBatchName := '';
                  SourceRefNo := WhseWkshLine."Whse. Document Line No.";
                END;
              WhseWkshLine."Whse. Document Type"::"Internal Put-away":
                BEGIN
                  SourceType := DATABASE::"Whse. Internal Put-away Line";
                  SourceID := WhseWkshLine."Whse. Document No.";
                  SourceBatchName := '';
                  SourceRefNo := WhseWkshLine."Whse. Document Line No.";
                END;
              WhseWkshLine."Whse. Document Type"::"Internal Pick":
                BEGIN
                  SourceType := DATABASE::"Whse. Internal Pick Line";
                  SourceID := WhseWkshLine."Whse. Document No.";
                  SourceBatchName := '';
                  SourceRefNo := WhseWkshLine."Whse. Document Line No.";
                END;
              WhseWkshLine."Whse. Document Type"::Production:
                BEGIN
                  SourceType := DATABASE::"Prod. Order Component";
                  SourceID := WhseWkshLine."Whse. Document No.";
                  SourceBatchName := '';
                  SourceRefNo := WhseWkshLine."Whse. Document Line No.";
                END;
              WhseWkshLine."Whse. Document Type"::Assembly:
                BEGIN
                  SourceType := DATABASE::"Assembly Line";
                  SourceID := WhseWkshLine."Whse. Document No.";
                  SourceBatchName := '';
                  SourceRefNo := WhseWkshLine."Whse. Document Line No.";
                END;
              ELSE BEGIN
                SourceType := DATABASE::"Whse. Worksheet Line";
                SourceID := WhseWkshLine.Name;
                SourceBatchName := WhseWkshLine."Worksheet Template Name";
                SourceRefNo := WhseWkshLine."Line No.";
              END;
            END;
            // COPY END
            WhseInsertItemTracking(WhseItemTrackingLine,
              WhseWkshLine."Item No.",
              WhseWkshLine."Location Code",
              WhseWkshLine."Variant Code",
              QtyBase,
              WhseWkshLine."Qty. per Unit of Measure",
              SerialNo,
              LotNo,
              SourceType,
              0,
              SourceID,
              SourceBatchName,
              0,
              SourceRefNo);
          END;
        DATABASE::"Whse. Internal Put-away Line":
          BEGIN
            WhseInternalPutAwayLine.INIT;
            RecRef.SETTABLE(WhseInternalPutAwayLine);
            // COPY FROM TAB 7332: OpenItemTrackingLines
            WhseInternalPutAwayLine.TESTFIELD("Item No.");
            WhseInternalPutAwayLine.TESTFIELD("Qty. (Base)");
            WhseWkshLine.INIT;
            WhseWkshLine."Whse. Document Type" :=
              WhseWkshLine."Whse. Document Type"::"Internal Put-away";
            WhseWkshLine."Whse. Document No." := WhseInternalPutAwayLine."No.";
            WhseWkshLine."Whse. Document Line No." := WhseInternalPutAwayLine."Line No.";
            WhseWkshLine."Location Code" := WhseInternalPutAwayLine."Location Code";
            WhseWkshLine."Item No." := WhseInternalPutAwayLine."Item No.";
            WhseWkshLine."Qty. (Base)" := WhseInternalPutAwayLine."Qty. (Base)";
            WhseWkshLine."Qty. to Handle (Base)" :=
              WhseInternalPutAwayLine."Qty. (Base)" - WhseInternalPutAwayLine."Qty. Put Away (Base)" -
              WhseInternalPutAwayLine."Put-away Qty. (Base)";
            WhseWkshLine."Qty. per Unit of Measure" := WhseInternalPutAwayLine."Qty. per Unit of Measure";
            // COPY END
            RecRef.GETTABLE(WhseWkshLine);
            WhseItemTracking(WhseItemTrackingLine,RecRef,SerialNo,LotNo,QtyBase);
          END;
        DATABASE::"Whse. Internal Pick Line":
          BEGIN
            WhseInternalPickLine.INIT;
            RecRef.SETTABLE(WhseInternalPickLine);
            // COPY FROM TAB 7334: OpenItemTrackingLines
            WhseInternalPickLine.TESTFIELD("Item No.");
            WhseInternalPickLine.TESTFIELD("Qty. (Base)");
            WhseWkshLine.INIT;
            WhseWkshLine."Whse. Document Type" :=
              WhseWkshLine."Whse. Document Type"::"Internal Pick";
            WhseWkshLine."Whse. Document No." := WhseInternalPickLine."No.";
            WhseWkshLine."Whse. Document Line No." := WhseInternalPickLine."Line No.";
            WhseWkshLine."Location Code" := WhseInternalPickLine."Location Code";
            WhseWkshLine."Item No." := WhseInternalPickLine."Item No.";
            WhseWkshLine."Qty. (Base)" := WhseInternalPickLine."Qty. (Base)";
            WhseWkshLine."Qty. to Handle (Base)" :=
              WhseInternalPickLine."Qty. (Base)" - WhseInternalPickLine."Qty. Picked (Base)" -
              WhseInternalPickLine."Pick Qty. (Base)";
            // WhseWkshLine."Qty. per Unit of Measure" := WhseInternalPickLine."Qty. per Unit of Measure";
            // COPY END
            RecRef.GETTABLE(WhseWkshLine);
            WhseItemTracking(WhseItemTrackingLine,RecRef,SerialNo,LotNo,QtyBase);
          END;
      END;
    END;

    LOCAL PROCEDURE WhseInsertItemTracking@64(VAR WhseItemTrackingLine@1015 : Record 6550;Item@1013 : Code[20];Location@1012 : Code[10];Variant@1011 : Code[10];QtyBase@1010 : Decimal;QtyperUOM@1009 : Decimal;SerialNo@1008 : Code[20];LotNo@1007 : Code[20];SourceType@1006 : Integer;SourceSubType@1005 : Option;SourceID@1004 : Code[20];SourceBatchName@1003 : Code[10];SourceProdOrderLine@1002 : Integer;SourceRefNo@1001 : Integer);
    VAR
      LastEntryNo@1017 : Integer;
    BEGIN
      IF (SerialNo <> '') AND (ABS(QtyBase) > 1) THEN
        ERROR(Text002,SerialNo,QtyBase);
      CLEAR(WhseItemTrackingLine);
      WITH WhseItemTrackingLine DO BEGIN
        IF FINDLAST THEN
          LastEntryNo := "Entry No." + 1
        ELSE
          LastEntryNo := 1;
        INIT;
        "Entry No." := LastEntryNo;

        VALIDATE("Item No.",Item);
        VALIDATE("Location Code",Location);
        VALIDATE("Variant Code",Variant);
        VALIDATE("Qty. per Unit of Measure",QtyperUOM);
        VALIDATE("Quantity (Base)",ABS(QtyBase));

        IF SerialNo <> '' THEN
          VALIDATE("Serial No.",SerialNo);

        IF LotNo <> '' THEN
          VALIDATE("Lot No.",LotNo);

        VALIDATE("Source Type",SourceType);
        VALIDATE("Source Subtype",SourceSubType);
        VALIDATE("Source ID",SourceID);
        VALIDATE("Source Batch Name",SourceBatchName);
        VALIDATE("Source Prod. Order Line",SourceProdOrderLine);
        VALIDATE("Source Ref. No.",SourceRefNo);

        INSERT(TRUE);
      END;
    END;

    BEGIN
    {
      Unsupported version tags:
      NA: Unable to Compile
    }
    END.
  }
}

