OBJECT Codeunit 131007 Library - Report Dataset
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      FileManagement@1008 : Codeunit 419;
      XmlDoc@1000 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeList@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      SchemaNodeList@1004 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      DataSetFileName@1003 : Text;
      ParametersFileName@1006 : Text;
      CurrentRowIndex@1002 : Integer;
      InvalidRowErr@1007 : TextConst 'ENU=Row does not exist.';
      InvalidFieldErr@1011 : TextConst 'ENU=Field ''%1'' does not exist.';
      RowNotFoundErr@1010 : TextConst '@@@=Do not translate;ENU="No row found where Field ''%1'' = <%2>."';
      RowFoundErr@1016 : TextConst '@@@=Do not translate;ENU="Row is found where Field ''%1'' = <%2>."';
      CurrentRowErr@1012 : TextConst '@@@=Do not translate;ENU="Current row does not have Field ''%1'' = <%2>."';
      ElementNotFoundInScemaErr@1005 : TextConst 'ENU=Field ''%1'' was not found in the embedded xml schema.';
      RowIndexErr@1013 : TextConst 'ENU=Invalid row index: %1';
      ElementNameErr@1014 : TextConst 'ENU=Element with name ''%1'' was not found';
      RowIndexNotFoundErr@1015 : TextConst 'ENU=Could not find row with index %1 in report dataset';
      NameTagTxt@1020 : TextConst '@@@={Locked};ENU=Name';
      StringTagTxt@1021 : TextConst '@@@={Locked};ENU=string';

    PROCEDURE AssertElementTagExists@29(ElementTag@1000 : Text);
    BEGIN
      SetXmlNodeList(ElementTag);
      Assert.IsTrue(
        FindRowWithTagNoValue(ElementTag) <> -1,
        STRSUBSTNO(RowNotFoundErr,ElementTag,''))
    END;

    PROCEDURE AssertElementTagWithValueExists@23(ElementTag@1000 : Text;ExpectedValue@1002 : Variant);
    BEGIN
      SetXmlNodeList(ElementTag);
      Assert.IsTrue(
        SearchForElementTagByValue(ElementTag,ExpectedValue),
        STRSUBSTNO(RowNotFoundErr,ElementTag,ExpectedValue))
    END;

    PROCEDURE AssertElementTagWithValueNotExist@28(ElementTag@1000 : Text;ExpectedValue@1002 : Variant);
    BEGIN
      SetXmlNodeList(ElementTag);
      Assert.IsFalse(
        SearchForElementTagByValue(ElementTag,ExpectedValue),
        STRSUBSTNO(RowNotFoundErr,ElementTag,ExpectedValue))
    END;

    PROCEDURE AssertElementWithValueExists@3(ElementName@1000 : Text;ExpectedValue@1002 : Variant);
    BEGIN
      Assert.IsTrue(
        SearchForElementByValue(ElementName,ExpectedValue),
        STRSUBSTNO(RowNotFoundErr,ElementName,ExpectedValue))
    END;

    PROCEDURE AssertElementWithValueNotExist@19(ElementName@1000 : Text;ExpectedValue@1002 : Variant);
    BEGIN
      Assert.IsFalse(
        SearchForElementByValue(ElementName,ExpectedValue),
        STRSUBSTNO(RowFoundErr,ElementName,ExpectedValue))
    END;

    PROCEDURE AssertCurrentRowValue@10(ElementName@1001 : Text;ExpectedValue@1000 : Variant);
    VAR
      Value@1003 : Variant;
    BEGIN
      FindCurrentRowValue(ElementName,Value);
      Assert.AreEqual(ExpectedValue,Value,
        STRSUBSTNO(CurrentRowErr,ElementName,ExpectedValue))
    END;

    PROCEDURE AssertParameterValueExists@33(ParameterName@1000 : Text;ExpectedValue@1001 : Text);
    VAR
      ParameterNameRow@1002 : Integer;
      ValueNameRow@1003 : Integer;
    BEGIN
      SetXmlNodeList(NameTagTxt);
      ParameterNameRow := FindRowWithTag(NameTagTxt,ParameterName);
      Assert.IsTrue(
        ParameterNameRow <> -1,
        STRSUBSTNO(RowNotFoundErr,NameTagTxt,ParameterName));

      SetXmlNodeList(StringTagTxt);
      ValueNameRow := FindRowWithTag(StringTagTxt,ExpectedValue);
      Assert.IsTrue(
        ValueNameRow <> -1,
        STRSUBSTNO(RowNotFoundErr,StringTagTxt,ExpectedValue));

      WHILE (ValueNameRow <> -1) AND (ValueNameRow < ParameterNameRow) DO BEGIN
        MoveToRow(ValueNameRow + 1);
        ValueNameRow := FindRowWithTag(StringTagTxt,ExpectedValue);
      END;

      Assert.IsTrue(
        ParameterNameRow = ValueNameRow,
        STRSUBSTNO(RowNotFoundErr,ParameterName,ExpectedValue))
    END;

    PROCEDURE CurrentRowHasElementTag@26(ElementName@1000 : Text) : Boolean;
    VAR
      XmlNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlNode := XmlNodeList.Item(CurrentRowIndex);
      EXIT(XmlNode.Name = ElementName);
    END;

    PROCEDURE CurrentRowHasElement@17(ElementName@1000 : Text) : Boolean;
    VAR
      XmlNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlNode := XmlNodeList.Item(CurrentRowIndex);
      EXIT(NOT ISNULL(XmlNode.Item(ElementName)));
    END;

    PROCEDURE FindCurrentRowTagValue@27(ElementTag@1000 : Text;VAR Value@1002 : Variant);
    VAR
      XmlNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementText@1004 : Text;
    BEGIN
      IF CurrentRowIndex = -1 THEN
        ERROR(InvalidRowErr);

      XmlNode := XmlNodeList.Item(CurrentRowIndex);

      // verify
      IF NOT CurrentRowHasElementTag(ElementTag) THEN
        ERROR(InvalidFieldErr,ElementTag);

      ElementText := XmlNode.InnerText;
      Value := ElementText;
    END;

    PROCEDURE FindCurrentRowValue@7(ElementName@1000 : Text;VAR Value@1002 : Variant);
    VAR
      XmlNode@1001 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ElementText@1004 : Text;
      Decimal@1006 : Decimal;
      Integer@1009 : Integer;
      Boolean@1003 : Boolean;
    BEGIN
      IF CurrentRowIndex = -1 THEN
        ERROR(InvalidRowErr);

      XmlNode := XmlNodeList.Item(CurrentRowIndex);
      IF NOT CurrentRowHasElement(ElementName) THEN
        ERROR(InvalidFieldErr,ElementName);

      ElementText := XmlNode.Item(ElementName).InnerText;

      CASE GetElementSchemaType(ElementName) OF
        'xs:boolean':
          BEGIN
            EVALUATE(Boolean,ElementText,9);
            Value := Boolean;
          END;
        'xs:int':
          BEGIN
            EVALUATE(Integer,ElementText,9);
            Value := Integer;
          END;
        'xs:decimal':
          BEGIN
            EVALUATE(Decimal,ElementText,9);
            Value := Decimal;
          END;
        ELSE
          Value := ElementText;
      END;
    END;

    LOCAL PROCEDURE GetElementSchemaType@12(ElementName@1000 : Text) : Text;
    VAR
      i@1001 : Integer;
    BEGIN
      FOR i := 0 TO SchemaNodeList.Count - 1 DO BEGIN
        IF SchemaNodeList.Item(i).Attributes.GetNamedItem('name').Value = ElementName THEN
          EXIT(SchemaNodeList.Item(i).Attributes.GetNamedItem('type').Value);
      END;
      ERROR(ElementNotFoundInScemaErr,ElementName);
    END;

    PROCEDURE Sum@16(ElementName@1000 : Text) TotalValue : Decimal;
    VAR
      ValueVar@1002 : Variant;
      Value@1003 : Decimal;
    BEGIN
      WHILE GetNextRow DO
        IF CurrentRowHasElement(ElementName) THEN BEGIN
          FindCurrentRowValue(ElementName,ValueVar);
          Value := ValueVar;
          TotalValue += Value;
        END;

      CurrentRowIndex := -1
    END;

    PROCEDURE GetNextRow@2() : Boolean;
    BEGIN
      IF CurrentRowIndex < RowCount - 1 THEN BEGIN
        CurrentRowIndex += 1;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    PROCEDURE MoveToRow@20(RowIndex@1000 : Integer);
    BEGIN
      // Assume incoming index is in range  1..Count (like arrays in C/AL)
      // Dataset indices start from 0.. thus we need compare CurrentRowIndex with passed decremented (by 1) RowIndex
      CurrentRowIndex := -1;
      WHILE GetNextRow AND (CurrentRowIndex <> (RowIndex - 1)) DO;
      IF NOT ((CurrentRowIndex = (RowIndex - 1)) AND (CurrentRowIndex > -1)) THEN
        ERROR(STRSUBSTNO(RowIndexNotFoundErr,RowIndex));
    END;

    PROCEDURE GetFileName@11() : Text[1024];
    BEGIN
      DataSetFileName := FileManagement.ServerTempFileName('.xml');
      EXIT(DataSetFileName)
    END;

    PROCEDURE GetParametersFileName@4() : Text;
    BEGIN
      ParametersFileName := FileManagement.ServerTempFileName('.xml');
      EXIT(ParametersFileName)
    END;

    PROCEDURE LoadDataSetFileWithNoSchema@21();
    BEGIN
      LoadXMLFile(DataSetFileName,FALSE);
    END;

    PROCEDURE LoadDataSetFile@1();
    BEGIN
      LoadXMLFile(DataSetFileName,TRUE);
    END;

    PROCEDURE LoadParametersFile@31();
    BEGIN
      LoadXMLFile(ParametersFileName,FALSE);
    END;

    LOCAL PROCEDURE LoadXMLFile@38(FileName@1000 : Text;Schema@1001 : Boolean);
    VAR
      XMLDOMManagement@1002 : Codeunit 6224;
    BEGIN
      CurrentRowIndex := -1;
      XMLDOMManagement.LoadXMLDocumentFromFile(FileName,XmlDoc);

      IF Schema THEN
        SchemaNodeList := XmlDoc.GetElementsByTagName('xs:sequence').Item(0).ChildNodes
      ELSE
        CLEAR(SchemaNodeList);

      CLEAR(XmlNodeList);

      // Clear filename to avoid consecutive tests to validate pre-existing data
      DataSetFileName := '';
      ParametersFileName := '';
    END;

    PROCEDURE SetRange@9(ElementName@1000 : Text;Value@1001 : Variant);
    BEGIN
      SetRangeWithTrimmedValues(ElementName,Value,FALSE)
    END;

    PROCEDURE Reset@6();
    BEGIN
      CLEAR(XmlNodeList);
      CurrentRowIndex := -1
    END;

    PROCEDURE RowCount@18() : Integer;
    BEGIN
      IF ISNULL(XmlNodeList) THEN
        XmlNodeList := XmlDoc.GetElementsByTagName('Result');

      EXIT(XmlNodeList.Count);
    END;

    LOCAL PROCEDURE SearchForElementTagByValue@24(ElementTag@1000 : Text;ElementValue@1001 : Variant) : Boolean;
    BEGIN
      EXIT(FindRowWithTag(ElementTag,ElementValue) <> -1);
    END;

    PROCEDURE SearchForElementByValue@8(ElementName@1000 : Text;ElementValue@1001 : Variant) : Boolean;
    BEGIN
      EXIT(FindRow(ElementName,ElementValue) <> -1);
    END;

    PROCEDURE FindRowWithTagNoValue@30(ElementTag@1001 : Text) Result : Integer;
    BEGIN
      WHILE GetNextRow DO
        IF CurrentRowHasElementTag(ElementTag) THEN BEGIN
          Result := CurrentRowIndex;
          CurrentRowIndex := -1;
          EXIT(Result);
        END;

      CurrentRowIndex := -1;
      Result := -1;
      EXIT(Result);
    END;

    PROCEDURE FindRowWithTag@25(ElementTag@1001 : Text;ElementValue@1000 : Variant) Result : Integer;
    VAR
      CurrentValue@1002 : Variant;
    BEGIN
      WHILE GetNextRow DO
        IF CurrentRowHasElementTag(ElementTag) THEN BEGIN
          FindCurrentRowTagValue(ElementTag,CurrentValue);
          IF Assert.Compare(CurrentValue,ElementValue) THEN BEGIN
            Result := CurrentRowIndex;
            CurrentRowIndex := -1;
            EXIT(Result);
          END;
        END;

      CurrentRowIndex := -1;
      Result := -1;
      EXIT(Result);
    END;

    PROCEDURE FindRow@14(ElementName@1001 : Text;ElementValue@1000 : Variant) Result : Integer;
    VAR
      CurrentValue@1002 : Variant;
    BEGIN
      WHILE GetNextRow DO
        IF CurrentRowHasElement(ElementName) THEN BEGIN
          FindCurrentRowValue(ElementName,CurrentValue);
          IF Assert.Compare(CurrentValue,ElementValue) THEN BEGIN
            Result := CurrentRowIndex;
            CurrentRowIndex := -1;
            EXIT(Result);
          END;
        END;

      CurrentRowIndex := -1;
      Result := -1;
      EXIT(Result);
    END;

    PROCEDURE GetElementValueInCurrentRow@15(ElementName@1000 : Text;VAR Result@1001 : Variant);
    BEGIN
      Assert.IsTrue(CurrentRowIndex > -1,STRSUBSTNO(RowIndexErr,CurrentRowIndex));
      Assert.IsTrue(CurrentRowHasElement(ElementName),STRSUBSTNO(ElementNameErr,ElementName));
      FindCurrentRowValue(ElementName,Result);
    END;

    PROCEDURE SetRangeWithTrimmedValues@5(ElementName@1000 : Text;Value@1001 : Variant;TrimSpacesInValue@1003 : Boolean);
    VAR
      XmlNode@1002 : DotNet "'System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // Validate that the element exists in the dataset
      GetElementSchemaType(ElementName);
      XmlNode := XmlDoc.GetElementsByTagName('DataSet').Item(0);
      IF TrimSpacesInValue = FALSE THEN
        XmlNodeList := XmlNode.SelectNodes(STRSUBSTNO('//*/*[%1="%2"]',ElementName,FORMAT(Value,0,9)))
      ELSE
        XmlNodeList := XmlNode.SelectNodes(STRSUBSTNO('//*/*[normalize-space(%1)="%2"]',ElementName,FORMAT(Value,0,9)));
      CurrentRowIndex := -1
    END;

    PROCEDURE SetXmlNodeList@22(value@1000 : Text);
    BEGIN
      XmlNodeList := XmlDoc.GetElementsByTagName(value);
    END;

    PROCEDURE GetLastRow@13();
    BEGIN
      CurrentRowIndex := RowCount - 1;
    END;

    BEGIN
    END.
  }
}

