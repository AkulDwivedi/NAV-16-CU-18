OBJECT Codeunit 17 Gen. Jnl.-Post Reverse
{
  OBJECT-PROPERTIES
  {
    Date=01-08-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48992,NAVIN9.00.00.48992;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 17=m,
                TableData 21=imd,
                TableData 25=imd,
                TableData 45=rm,
                TableData 253=rimd,
                TableData 254=imd,
                TableData 271=imd,
                TableData 272=imd,
                TableData 379=imd,
                TableData 380=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GenJnlPostLine@1002 : Codeunit 12;
      ReversalMismatchErr@1026 : TextConst 'ENU=Reversal found a %1 without a matching general ledger entry.;ENN=Reversal found a %1 without a matching general ledger entry.';
      CannotReverseErr@1023 : TextConst 'ENU=You cannot reverse the transaction, because it has already been reversed.;ENN=You cannot reverse the transaction, because it has already been reversed.';
      DimCombBlockedErr@1027 : TextConst 'ENU=The combination of dimensions used in general ledger entry %1 is blocked. %2.;ENN=The combination of dimensions used in general ledger entry %1 is blocked. %2.';
      FormManagement@1500000 : Codeunit 16400;
      ReverseCustVendErr@1500001 : TextConst 'ENU=You cannot reverse this transaction becasue it is already adjusted;ENN=You cannot reverse this transaction becasue it is already adjusted';

    PROCEDURE Reverse@72(VAR ReversalEntry@1002 : Record 179;VAR ReversalEntry2@1000 : Record 179);
    VAR
      SourceCodeSetup@1016 : Record 242;
      GLEntry2@1003 : Record 17;
      GLReg@1019 : Record 45;
      GLReg2@1021 : Record 45;
      GenJnlLine@1017 : Record 81;
      CustLedgEntry@1004 : Record 21;
      TempCustLedgEntry@1005 : TEMPORARY Record 21;
      VendLedgEntry@1008 : Record 25;
      TempVendLedgEntry@1012 : TEMPORARY Record 25;
      BankAccLedgEntry@1009 : Record 271;
      TempBankAccLedgEntry@1015 : TEMPORARY Record 271;
      VATEntry@1010 : Record 254;
      FALedgEntry@1007 : Record 5601;
      MaintenanceLedgEntry@1011 : Record 5625;
      TempRevertTransactionNo@1024 : TEMPORARY Record 2000000026;
      ServTaxEntry@1500004 : Record 16473;
      TDSEntry@1500000 : Record 13729;
      TCSEntry@1500001 : Record 16514;
      PLAEntry@1500002 : Record 13723;
      FBTEntry@1500003 : Record 16541;
      GSTLedgerEntry@1500006 : Record 16418;
      FAInsertLedgEntry@1006 : Codeunit 5600;
      UpdateAnalysisView@1020 : Codeunit 410;
      ExciseInsertRGRegisters@1500005 : Codeunit 13701;
      NextDtldCustLedgEntryEntryNo@1014 : Integer;
      NextDtldVendLedgEntryEntryNo@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Register THEN
        GLReg2."No." := ReversalEntry2."G/L Register No.";
      ReversalEntry.CopyReverseFilters(
        GLEntry2,CustLedgEntry,VendLedgEntry,BankAccLedgEntry,VATEntry,FALedgEntry,MaintenanceLedgEntry,
        TDSEntry,PLAEntry,TCSEntry,FBTEntry,ServTaxEntry,GSTLedgerEntry);
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        IF ReversalEntry2.FINDSET(FALSE,FALSE) THEN
          REPEAT
            TempRevertTransactionNo.Number := ReversalEntry2."Transaction No.";
            IF TempRevertTransactionNo.INSERT THEN;
          UNTIL ReversalEntry2.NEXT = 0;
      END;
      GenJnlLine.INIT;
      GenJnlLine."Source Code" := SourceCodeSetup.Reversal;
      IF GenJnlPostLine.GetNextEntryNo = 0 THEN
        GenJnlPostLine.StartPosting(GenJnlLine)
      ELSE
        GenJnlPostLine.ContinuePosting(GenJnlLine);

      GenJnlPostLine.SetGLRegReverse(GLReg);
      CopyCustLedgEntry(CustLedgEntry,TempCustLedgEntry);
      CopyVendLedgEntry(VendLedgEntry,TempVendLedgEntry);
      CopyBankAccLedgEntry(BankAccLedgEntry,TempBankAccLedgEntry);
      IF TempRevertTransactionNo.FINDSET THEN;
      REPEAT
        IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN
          GLEntry2.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
        ReverseGLEntry(
          GLEntry2,GenJnlLine,TempCustLedgEntry,
          TempVendLedgEntry,TempBankAccLedgEntry,NextDtldCustLedgEntryEntryNo,NextDtldVendLedgEntryEntryNo,
          FAInsertLedgEntry);
      UNTIL TempRevertTransactionNo.NEXT = 0;
      IF FALedgEntry.FINDSET THEN
        REPEAT
          FAInsertLedgEntry.CheckFAReverseEntry(FALedgEntry)
        UNTIL FALedgEntry.NEXT = 0;
      IF MaintenanceLedgEntry.FINDFIRST THEN
        REPEAT
          FAInsertLedgEntry.CheckMaintReverseEntry(MaintenanceLedgEntry)
        UNTIL FALedgEntry.NEXT = 0;
      FAInsertLedgEntry.FinishFAReverseEntry(GLReg);
      IF NOT TempCustLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,CustLedgEntry.TABLECAPTION);
      IF NOT TempVendLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,VendLedgEntry.TABLECAPTION);
      IF NOT TempBankAccLedgEntry.ISEMPTY THEN
        ERROR(ReversalMismatchErr,BankAccLedgEntry.TABLECAPTION);
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          TDSEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          ReverseTDS(TDSEntry,GenJnlLine."Source Code");
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseTDS(TDSEntry,GenJnlLine."Source Code");
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          TCSEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          ReverseTCS(TCSEntry);
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseTCS(TCSEntry);
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          FBTEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          ReverseFBT(FBTEntry,GenJnlLine."Source Code");
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseFBT(FBTEntry,GenJnlLine."Source Code");
      ExciseInsertRGRegisters.ReversePLA(PLAEntry,GenJnlPostLine.GetPLAStartingNo,GenJnlPostLine.GetNextTransactionNo);
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          ServTaxEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          ReverseServTaxEntryWithDetails(ServTaxEntry,GenJnlLine."Source Code");
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseServTaxEntryWithDetails(ServTaxEntry,GenJnlLine."Source Code");
      IF ReversalEntry2."Reversal Type" = ReversalEntry2."Reversal Type"::Transaction THEN BEGIN
        TempRevertTransactionNo.FINDSET;
        REPEAT
          GSTLedgerEntry.SETRANGE("Transaction No.",TempRevertTransactionNo.Number);
          ReverseGST(GSTLedgerEntry);
        UNTIL TempRevertTransactionNo.NEXT = 0;
      END ELSE
        ReverseGST(GSTLedgerEntry);
      GenJnlPostLine.FinishPosting;
      IF GLReg2."No." <> 0 THEN
        IF GLReg2.GET(GLReg2."No.") THEN BEGIN
          GLReg2.Reversed := TRUE;
          GLReg2.MODIFY;
        END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
    END;

    LOCAL PROCEDURE ReverseGLEntry@6(VAR GLEntry2@1000 : Record 17;VAR GenJnlLine@1003 : Record 81;VAR TempCustLedgEntry@1006 : TEMPORARY Record 21;VAR TempVendLedgEntry@1007 : TEMPORARY Record 25;VAR TempBankAccLedgEntry@1008 : TEMPORARY Record 271;VAR NextDtldCustLedgEntryEntryNo@1009 : Integer;VAR NextDtldVendLedgEntryEntryNo@1010 : Integer;FAInsertLedgerEntry@1002 : Codeunit 5600);
    VAR
      GLEntry@1001 : Record 17;
      ReversedGLEntry@1004 : Record 17;
    BEGIN
      WITH GLEntry2 DO
        IF FIND('+') THEN
          REPEAT
            IF "Reversed by Entry No." <> 0 THEN
              ERROR(CannotReverseErr);
            CheckDimComb("Entry No.","Dimension Set ID",DATABASE::"G/L Account","G/L Account No.",0,'');
            GLEntry := GLEntry2;
            IF "FA Entry No." <> 0 THEN
              FAInsertLedgerEntry.InsertReverseEntry(
                GenJnlPostLine.GetNextEntryNo,"FA Entry Type","FA Entry No.",GLEntry."FA Entry No.",
                GenJnlPostLine.GetNextTransactionNo);
            GLEntry.Amount := -Amount;
            GLEntry.Quantity := -Quantity;
            GLEntry."VAT Amount" := -"VAT Amount";
            GLEntry."Debit Amount" := -"Debit Amount";
            GLEntry."Credit Amount" := -"Credit Amount";
            GLEntry."Additional-Currency Amount" := -"Additional-Currency Amount";
            GLEntry."Add.-Currency Debit Amount" := -"Add.-Currency Debit Amount";
            GLEntry."Add.-Currency Credit Amount" := -"Add.-Currency Credit Amount";
            GLEntry."Entry No." := GenJnlPostLine.GetNextEntryNo;
            GLEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            GLEntry."User ID" := USERID;
            GenJnlLine.Correction :=
              (GLEntry."Debit Amount" < 0) OR (GLEntry."Credit Amount" < 0) OR
              (GLEntry."Add.-Currency Debit Amount" < 0) OR (GLEntry."Add.-Currency Credit Amount" < 0);
            GLEntry."Journal Batch Name" := '';
            GLEntry."Source Code" := GenJnlLine."Source Code";
            SetReversalDescription(GLEntry2,GLEntry.Description);
            GLEntry."Reversed Entry No." := "Entry No.";
            GLEntry.Reversed := TRUE;
            // Reversal of Reversal
            IF "Reversed Entry No." <> 0 THEN BEGIN
              ReversedGLEntry.GET("Reversed Entry No.");
              ReversedGLEntry."Reversed by Entry No." := 0;
              ReversedGLEntry.Reversed := FALSE;
              ReversedGLEntry.MODIFY;
              "Reversed Entry No." := GLEntry."Entry No.";
              GLEntry."Reversed by Entry No." := "Entry No.";
            END;
            "Reversed by Entry No." := GLEntry."Entry No.";
            Reversed := TRUE;
            MODIFY;
            GenJnlPostLine.InsertGLEntry(GenJnlLine,GLEntry,FALSE);

            CASE TRUE OF
              TempCustLedgEntry.GET("Entry No."):
                BEGIN
                  CheckDimComb("Entry No.","Dimension Set ID",
                    DATABASE::Customer,TempCustLedgEntry."Customer No.",
                    DATABASE::"Salesperson/Purchaser",TempCustLedgEntry."Salesperson Code");
                  ReverseCustLedgEntry(
                    TempCustLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,GenJnlLine."Source Code",
                    NextDtldCustLedgEntryEntryNo);
                  TempCustLedgEntry.DELETE;
                END;
              TempVendLedgEntry.GET("Entry No."):
                BEGIN
                  CheckDimComb("Entry No.","Dimension Set ID",
                    DATABASE::Vendor,TempVendLedgEntry."Vendor No.",
                    DATABASE::"Salesperson/Purchaser",TempVendLedgEntry."Purchaser Code");
                  ReverseVendLedgEntry(
                    TempVendLedgEntry,GLEntry."Entry No.",GenJnlLine.Correction,GenJnlLine."Source Code",
                    NextDtldVendLedgEntryEntryNo);
                  TempVendLedgEntry.DELETE;
                END;
              TempBankAccLedgEntry.GET("Entry No."):
                BEGIN
                  CheckDimComb("Entry No.","Dimension Set ID",
                    DATABASE::"Bank Account",TempBankAccLedgEntry."Bank Account No.",0,'');
                  ReverseBankAccLedgEntry(TempBankAccLedgEntry,GLEntry."Entry No.",GenJnlLine."Source Code");
                  TempBankAccLedgEntry.DELETE;
                END;
            END;

            ReverseVAT(GLEntry,GenJnlLine."Source Code");
          UNTIL NEXT(-1) = 0;
    END;

    LOCAL PROCEDURE ReverseCustLedgEntry@71(CustLedgEntry@1000 : Record 21;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;SourceCode@1009 : Code[10];VAR NextDtldCustLedgEntryEntryNo@1003 : Integer);
    VAR
      NewCustLedgEntry@1002 : Record 21;
      ReversedCustLedgEntry@1007 : Record 21;
      DtldCustLedgEntry@1005 : Record 379;
      NewDtldCustLedgEntry@1004 : Record 379;
    BEGIN
      WITH NewCustLedgEntry DO BEGIN
        IF CustLedgEntry."Adv. Pmt. Adjustment" THEN
          ERROR(ReverseCustVendErr);
        NewCustLedgEntry := CustLedgEntry;
        "Sales (LCY)" := -"Sales (LCY)";
        "Profit (LCY)" := -"Profit (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Given (LCY)" := -"Pmt. Disc. Given (LCY)";
        Positive := NOT Positive;
        "Adjusted Currency Factor" := "Adjusted Currency Factor";
        "Original Currency Factor" := "Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(CustLedgEntry,Description);
        "Reversed Entry No." := CustLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF CustLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedCustLedgEntry.GET(CustLedgEntry."Reversed Entry No.");
          ReversedCustLedgEntry."Reversed by Entry No." := 0;
          ReversedCustLedgEntry.Reversed := FALSE;
          ReversedCustLedgEntry.MODIFY;
          CustLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := CustLedgEntry."Entry No.";
        END;
        CustLedgEntry."Applies-to ID" := '';
        CustLedgEntry."Reversed by Entry No." := "Entry No.";
        CustLedgEntry.Reversed := TRUE;
        CustLedgEntry.MODIFY;
        INSERT;

        IF NextDtldCustLedgEntryEntryNo = 0 THEN BEGIN
          DtldCustLedgEntry.FINDLAST;
          NextDtldCustLedgEntryEntryNo := DtldCustLedgEntry."Entry No." + 1;
        END;
        DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
        DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
        DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldCustLedgEntry.FINDSET;
        REPEAT
          DtldCustLedgEntry.TESTFIELD("Entry Type",DtldCustLedgEntry."Entry Type"::"Initial Entry");
          NewDtldCustLedgEntry := DtldCustLedgEntry;
          NewDtldCustLedgEntry.Amount := -NewDtldCustLedgEntry.Amount;
          NewDtldCustLedgEntry."Amount (LCY)" := -NewDtldCustLedgEntry."Amount (LCY)";
          NewDtldCustLedgEntry.UpdateDebitCredit(Correction);
          NewDtldCustLedgEntry."Cust. Ledger Entry No." := NewEntryNo;
          NewDtldCustLedgEntry."User ID" := USERID;
          NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
          NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
          NewDtldCustLedgEntry.INSERT(TRUE);
        UNTIL DtldCustLedgEntry.NEXT = 0;

        ApplyCustLedgEntryByReversal(
          CustLedgEntry,NewCustLedgEntry,NewDtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
        ApplyCustLedgEntryByReversal(
          NewCustLedgEntry,CustLedgEntry,DtldCustLedgEntry,"Entry No.",NextDtldCustLedgEntryEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseVendLedgEntry@70(VendLedgEntry@1000 : Record 25;NewEntryNo@1001 : Integer;Correction@1006 : Boolean;SourceCode@1009 : Code[10];VAR NextDtldVendLedgEntryEntryNo@1003 : Integer);
    VAR
      NewVendLedgEntry@1002 : Record 25;
      ReversedVendLedgEntry@1008 : Record 25;
      DtldVendLedgEntry@1005 : Record 380;
      NewDtldVendLedgEntry@1004 : Record 380;
    BEGIN
      WITH NewVendLedgEntry DO BEGIN
        IF VendLedgEntry."Adv. Pmt. Adjustment" THEN
          ERROR(ReverseCustVendErr);
        NewVendLedgEntry := VendLedgEntry;
        "Purchase (LCY)" := -"Purchase (LCY)";
        "Inv. Discount (LCY)" := -"Inv. Discount (LCY)";
        "Original Pmt. Disc. Possible" := -"Original Pmt. Disc. Possible";
        "Pmt. Disc. Rcd.(LCY)" := -"Pmt. Disc. Rcd.(LCY)";
        Positive := NOT Positive;
        "Adjusted Currency Factor" := "Adjusted Currency Factor";
        "Original Currency Factor" := "Original Currency Factor";
        "Remaining Pmt. Disc. Possible" := -"Remaining Pmt. Disc. Possible";
        "Max. Payment Tolerance" := -"Max. Payment Tolerance";
        "Accepted Payment Tolerance" := -"Accepted Payment Tolerance";
        "Pmt. Tolerance (LCY)" := -"Pmt. Tolerance (LCY)";
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(VendLedgEntry,Description);
        "Reversed Entry No." := VendLedgEntry."Entry No.";
        Reversed := TRUE;
        "Applies-to ID" := '';
        // Reversal of Reversal
        IF VendLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedVendLedgEntry.GET(VendLedgEntry."Reversed Entry No.");
          ReversedVendLedgEntry."Reversed by Entry No." := 0;
          ReversedVendLedgEntry.Reversed := FALSE;
          ReversedVendLedgEntry.MODIFY;
          VendLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := VendLedgEntry."Entry No.";
        END;
        VendLedgEntry."Applies-to ID" := '';
        VendLedgEntry."Reversed by Entry No." := "Entry No.";
        VendLedgEntry.Reversed := TRUE;
        VendLedgEntry.MODIFY;
        INSERT;

        IF NextDtldVendLedgEntryEntryNo = 0 THEN BEGIN
          DtldVendLedgEntry.FINDLAST;
          NextDtldVendLedgEntryEntryNo := DtldVendLedgEntry."Entry No." + 1;
        END;
        DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
        DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
        DtldVendLedgEntry.SETRANGE(Unapplied,FALSE);
        DtldVendLedgEntry.FINDSET;
        REPEAT
          DtldVendLedgEntry.TESTFIELD("Entry Type",DtldVendLedgEntry."Entry Type"::"Initial Entry");
          NewDtldVendLedgEntry := DtldVendLedgEntry;
          NewDtldVendLedgEntry.Amount := -NewDtldVendLedgEntry.Amount;
          NewDtldVendLedgEntry."Amount (LCY)" := -NewDtldVendLedgEntry."Amount (LCY)";
          NewDtldVendLedgEntry.UpdateDebitCredit(Correction);
          NewDtldVendLedgEntry."Vendor Ledger Entry No." := NewEntryNo;
          NewDtldVendLedgEntry."User ID" := USERID;
          NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
          NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
          NewDtldVendLedgEntry.INSERT(TRUE);
        UNTIL DtldVendLedgEntry.NEXT = 0;

        ApplyVendLedgEntryByReversal(
          VendLedgEntry,NewVendLedgEntry,NewDtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
        ApplyVendLedgEntryByReversal(
          NewVendLedgEntry,VendLedgEntry,DtldVendLedgEntry,"Entry No.",NextDtldVendLedgEntryEntryNo);
      END;
    END;

    LOCAL PROCEDURE ReverseBankAccLedgEntry@68(BankAccLedgEntry@1000 : Record 271;NewEntryNo@1001 : Integer;SourceCode@1005 : Code[10]);
    VAR
      NewBankAccLedgEntry@1002 : Record 271;
      ReversedBankAccLedgEntry@1004 : Record 271;
    BEGIN
      WITH NewBankAccLedgEntry DO BEGIN
        NewBankAccLedgEntry := BankAccLedgEntry;
        Amount := -Amount;
        "Remaining Amount" := -"Remaining Amount";
        "Amount (LCY)" := -"Amount (LCY)";
        "Debit Amount" := -"Debit Amount";
        "Credit Amount" := -"Credit Amount";
        "Debit Amount (LCY)" := -"Debit Amount (LCY)";
        "Credit Amount (LCY)" := -"Credit Amount (LCY)";
        Positive := NOT Positive;
        "User ID" := USERID;
        "Entry No." := NewEntryNo;
        "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
        "Journal Batch Name" := '';
        "Source Code" := SourceCode;
        SetReversalDescription(BankAccLedgEntry,Description);
        "Reversed Entry No." := BankAccLedgEntry."Entry No.";
        Reversed := TRUE;
        // Reversal of Reversal
        IF BankAccLedgEntry."Reversed Entry No." <> 0 THEN BEGIN
          ReversedBankAccLedgEntry.GET(BankAccLedgEntry."Reversed Entry No.");
          ReversedBankAccLedgEntry."Reversed by Entry No." := 0;
          ReversedBankAccLedgEntry.Reversed := FALSE;
          ReversedBankAccLedgEntry.MODIFY;
          BankAccLedgEntry."Reversed Entry No." := "Entry No.";
          "Reversed by Entry No." := BankAccLedgEntry."Entry No.";
        END;
        BankAccLedgEntry."Reversed by Entry No." := "Entry No.";
        BankAccLedgEntry.Reversed := TRUE;
        BankAccLedgEntry.MODIFY;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReverseVAT@67(GLEntry@1005 : Record 17;SourceCode@1003 : Code[10]);
    VAR
      VATEntry@1000 : Record 254;
      NewVATEntry@1001 : Record 254;
      ReversedVATEntry@1002 : Record 254;
      GLEntryVATEntryLink@1004 : Record 253;
    BEGIN
      GLEntryVATEntryLink.SETRANGE("G/L Entry No.",GLEntry."Reversed Entry No.");
      IF GLEntryVATEntryLink.FINDSET THEN
        REPEAT
          VATEntry.GET(GLEntryVATEntryLink."VAT Entry No.");
          IF VATEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          WITH NewVATEntry DO BEGIN
            NewVATEntry := VATEntry;
            Base := -Base;
            Amount := -Amount;
            "Unrealized Amount" := -"Unrealized Amount";
            "Unrealized Base" := -"Unrealized Base";
            "Remaining Unrealized Amount" := -"Remaining Unrealized Amount";
            "Remaining Unrealized Base" := -"Remaining Unrealized Base";
            "Additional-Currency Amount" := -"Additional-Currency Amount";
            "Additional-Currency Base" := -"Additional-Currency Base";
            "Add.-Currency Unrealized Amt." := -"Add.-Currency Unrealized Amt.";
            "Add.-Curr. Rem. Unreal. Amount" := -"Add.-Curr. Rem. Unreal. Amount";
            "Add.-Curr. Rem. Unreal. Base" := -"Add.-Curr. Rem. Unreal. Base";
            "VAT Difference" := -"VAT Difference";
            "Add.-Curr. VAT Difference" := -"Add.-Curr. VAT Difference";
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "Source Code" := SourceCode;
            "User ID" := USERID;
            "Entry No." := GenJnlPostLine.GetNextVATEntryNo;
            "Reversed Entry No." := VATEntry."Entry No.";
            Reversed := TRUE;
            // Reversal of Reversal
            IF VATEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedVATEntry.GET(VATEntry."Reversed Entry No.");
              ReversedVATEntry."Reversed by Entry No." := 0;
              ReversedVATEntry.Reversed := FALSE;
              ReversedVATEntry.MODIFY;
              VATEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := VATEntry."Entry No.";
            END;
            VATEntry."Reversed by Entry No." := "Entry No.";
            VATEntry.Reversed := TRUE;
            VATEntry.MODIFY;
            INSERT;
            GLEntryVATEntryLink.InsertLink(GLEntry."Entry No.","Entry No.");
            GenJnlPostLine.IncrNextVATEntryNo;
          END;
        UNTIL GLEntryVATEntryLink.NEXT = 0;
    END;

    LOCAL PROCEDURE ReverseTDS@1280000(VAR TDSEntry@1000 : Record 13729;SourceCode@1500000 : Code[10]);
    VAR
      NewTDSEntry@1001 : Record 13729;
      ReversedTDSEntry@1002 : Record 13729;
    BEGIN
      IF TDSEntry.FINDSET THEN
        REPEAT
          IF TDSEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          WITH NewTDSEntry DO BEGIN
            NewTDSEntry := TDSEntry;
            "TDS Base Amount" := -"TDS Base Amount";
            "TDS Amount" := -"TDS Amount";
            "Surcharge Base Amount" := -"Surcharge Base Amount";
            "Surcharge Amount" := -"Surcharge Amount";
            "TDS Amount Including Surcharge" := -"TDS Amount Including Surcharge";
            "eCESS Amount" := -"eCESS Amount";
            "SHE Cess Amount" := -"SHE Cess Amount";
            "Total TDS Including SHE CESS" := -"Total TDS Including SHE CESS";
            "Bal. TDS Including SHE CESS" := -"Bal. TDS Including SHE CESS";
            "Invoice Amount" := -"Invoice Amount";
            "Rem. Total TDS Incl. SHE CESS" := -"Rem. Total TDS Incl. SHE CESS";
            "Remaining TDS Amount" := -"Remaining TDS Amount";
            "Remaining Surcharge Amount" := -"Remaining Surcharge Amount";
            "Service Tax Including eCess" := -"Service Tax Including eCess";
            "Work Tax Base Amount" := -"Work Tax Base Amount";
            "Work Tax Amount" := -"Work Tax Amount";
            "Balance Work Tax Amount" := -"Balance Work Tax Amount";
            "Entry No." := GenJnlPostLine.GetNextTDSEntryNo;
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "Source Code" := SourceCode;
            "User ID" := USERID;
            "Reversed Entry No." := TDSEntry."Entry No.";
            Reversed := TRUE;
            // Reversal of Reversal
            IF TDSEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedTDSEntry.GET(TDSEntry."Reversed Entry No.");
              ReversedTDSEntry."Reversed by Entry No." := 0;
              ReversedTDSEntry.Reversed := FALSE;
              ReversedTDSEntry.MODIFY;
              TDSEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := TDSEntry."Entry No.";
            END;
            TDSEntry."Reversed by Entry No." := "Entry No.";
            TDSEntry.Reversed := TRUE;
            TDSEntry.MODIFY;
            IF "Bal. TDS Including SHE CESS" <> 0 THEN BEGIN
              FormManagement.Reverse26Q27Q(TDSEntry);
              FormManagement.InsertInto26Qor27Q(NewTDSEntry);
            END;
            INSERT;
            GenJnlPostLine.IncrNextTDSEntryNo;
          END;
        UNTIL TDSEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ReverseTCS@1500018(VAR TCSEntry@1000 : Record 16514);
    VAR
      NewTCSEntry@1001 : Record 16514;
      ReversedTCSEntry@1002 : Record 16514;
    BEGIN
      IF TCSEntry.FINDSET THEN
        REPEAT
          IF TCSEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          WITH NewTCSEntry DO BEGIN
            NewTCSEntry := TCSEntry;
            "TCS Base Amount" := -"TCS Base Amount";
            "TCS Amount" := -"TCS Amount";
            "Surcharge Base Amount" := -"Surcharge Base Amount";
            "Surcharge Amount" := -"Surcharge Amount";
            "TCS Amount Including Surcharge" := -"TCS Amount Including Surcharge";
            "eCESS Amount" := -"eCESS Amount";
            "SHE Cess Amount" := -"SHE Cess Amount";
            "Total TCS Including SHE CESS" := -"Total TCS Including SHE CESS";
            "Bal. TCS Including SHE CESS" := -"Bal. TCS Including SHE CESS";
            "Invoice Amount" := -"Invoice Amount";
            "Rem. Total TCS Incl. SHE CESS" := -"Rem. Total TCS Incl. SHE CESS";
            "Remaining TCS Amount" := -"Remaining TCS Amount";
            "Remaining Surcharge Amount" := -"Remaining Surcharge Amount";
            "Service Tax Including eCess" := -"Service Tax Including eCess";
            "Work Tax Base Amount" := -"Work Tax Base Amount";
            "Work Tax Amount" := -"Work Tax Amount";
            "Balance Work Tax Amount" := -"Balance Work Tax Amount";
            "Entry No." := GenJnlPostLine.GetNextTCSEntryNo;
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "Reversed Entry No." := TCSEntry."Entry No.";
            Reversed := TRUE;
            // Reversal of Reversal
            IF TCSEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedTCSEntry.GET(TCSEntry."Reversed Entry No.");
              ReversedTCSEntry."Reversed by Entry No." := 0;
              ReversedTCSEntry.Reversed := FALSE;
              ReversedTCSEntry.MODIFY;
              TCSEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := TCSEntry."Entry No.";
            END;
            TCSEntry."Reversed by Entry No." := "Entry No.";
            TCSEntry.Reversed := TRUE;
            TCSEntry.MODIFY;

            FormManagement.Reverse27EQ(TCSEntry);
            FormManagement.InsertInto27EQ(NewTCSEntry);
            INSERT;
            GenJnlPostLine.IncrNextTCSEntryNo;
          END;
        UNTIL TCSEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE ReverseFBT@1500071(VAR FBTEntry@1000 : Record 16541;SourceCode@1500000 : Code[10]);
    VAR
      NewFBTEntry@1001 : Record 16541;
      ReversedFBTEntry@1002 : Record 16541;
    BEGIN
      IF FBTEntry.FINDSET THEN
        REPEAT
          IF FBTEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          WITH NewFBTEntry DO BEGIN
            NewFBTEntry := FBTEntry;
            "Entry No." := GenJnlPostLine.GetNextFBTEntryNo;
            "Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            "User ID" := USERID;
            // "Source Code" := SourceCode;
            "Reversed Entry No." := FBTEntry."Entry No.";
            Amount := -FBTEntry.Amount;
            Reversed := TRUE;
            IF FBTEntry."Reversed Entry No." <> 0 THEN BEGIN
              ReversedFBTEntry.GET(FBTEntry."Reversed Entry No.");
              ReversedFBTEntry."Reversed by Entry No." := 0;
              ReversedFBTEntry.Reversed := FALSE;
              ReversedFBTEntry.MODIFY;
              FBTEntry."Reversed Entry No." := "Entry No.";
              "Reversed by Entry No." := FBTEntry."Entry No.";
            END;
            FBTEntry."Reversed by Entry No." := "Entry No.";
            FBTEntry.Reversed := TRUE;
            FBTEntry.MODIFY;
            INSERT;
            GenJnlPostLine.IncrNextFBREntryNo;
          END;
        UNTIL FBTEntry.NEXT = 0;
    END;

    PROCEDURE ReverseServTaxEntry@1501039(TransactionNo@1500000 : Integer);
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
    BEGIN
      ServiceTaxEntry.RESET;
      ServiceTaxEntry.SETRANGE("Transaction No.",TransactionNo);
      BlankServiceTaxAmounts(ServiceTaxEntry);
    END;

    PROCEDURE ReverseServTaxEntryWithDetails@1500095(VAR ServiceTaxEntry@1500001 : Record 16473;SourceCode@1500000 : Code[10]);
    VAR
      ServTaxEntryDetail@1500002 : Record 16474;
      ServTaxEntryDetail2@1500003 : Record 16474;
      NextEntryNo@1500004 : Integer;
    BEGIN
      IF ServiceTaxEntry.FINDSET THEN BEGIN
        BlankServiceTaxAmounts(ServiceTaxEntry);

        ServTaxEntryDetail.RESET;
        IF ServTaxEntryDetail.FINDLAST THEN
          NextEntryNo := ServTaxEntryDetail."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        REPEAT
          ServTaxEntryDetail.RESET;
          ServTaxEntryDetail.SETRANGE("Service Tax Entry No.",ServiceTaxEntry."Entry No.");
          ServTaxEntryDetail.SETRANGE(Closed,FALSE);
          IF ServTaxEntryDetail.FINDFIRST THEN BEGIN
            ServTaxEntryDetail.BlankRemainingCredit;
            ServTaxEntryDetail.MODIFY;
            ServTaxEntryDetail2.TRANSFERFIELDS(ServTaxEntryDetail);
            ServTaxEntryDetail2."Entry No." := NextEntryNo;
            ServTaxEntryDetail2."Base Amount" := -ServTaxEntryDetail2."Base Amount";
            ServTaxEntryDetail2."Service Tax Amount" := -ServTaxEntryDetail2."Service Tax Amount";
            ServTaxEntryDetail2.Amount := -ServTaxEntryDetail2.Amount;
            ServTaxEntryDetail2."Service Tax eCess Amount" := -ServTaxEntryDetail2."Service Tax eCess Amount";
            ServTaxEntryDetail2."Service Tax SHE Cess Amount" := -ServTaxEntryDetail2."Service Tax SHE Cess Amount";
            ServTaxEntryDetail2."Service Tax SBC Amount" := -ServTaxEntryDetail2."Service Tax SBC Amount";
            ServTaxEntryDetail2."KK Cess Amount" := -ServTaxEntryDetail2."KK Cess Amount";
            ServTaxEntryDetail2."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
            ServTaxEntryDetail2.INSERT;
            NextEntryNo := NextEntryNo + 1;
          END;
        UNTIL ServiceTaxEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReverseGST@1500003(VAR GSTLedgerEntry@1500001 : Record 16418);
    VAR
      LastGSTLedgerEntry@1500002 : Record 16418;
      GSTLedgerEntry1@1500004 : Record 16418;
      NewGSTLedgerEntry@1500005 : Record 16418;
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      SourceCodeSetup@1500006 : Record 242;
      EntryNo@1500003 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      IF LastGSTLedgerEntry.FINDLAST THEN
        EntryNo := LastGSTLedgerEntry."Entry No.";

      IF GSTLedgerEntry.FINDSET THEN BEGIN
        DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction No.");
        DetailedGSTLedgerEntry.SETRANGE("Transaction No.",GSTLedgerEntry."Transaction No.");
        ReverseDetailedGST(DetailedGSTLedgerEntry);
        REPEAT
          EntryNo += 1;
          CLEAR(NewGSTLedgerEntry);
          NewGSTLedgerEntry.INIT;
          NewGSTLedgerEntry.TRANSFERFIELDS(GSTLedgerEntry);
          NewGSTLedgerEntry."Entry No." := EntryNo;
          NewGSTLedgerEntry."Reversed Entry No." := GSTLedgerEntry."Entry No.";
          NewGSTLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewGSTLedgerEntry."GST Base Amount" := -NewGSTLedgerEntry."GST Base Amount";
          NewGSTLedgerEntry."GST Amount" := -NewGSTLedgerEntry."GST Amount";
          NewGSTLedgerEntry."Source Code" := SourceCodeSetup.Reversal;
          NewGSTLedgerEntry.INSERT;

          GSTLedgerEntry1.RESET;
          GSTLedgerEntry1.SETRANGE("Entry No.",GSTLedgerEntry."Entry No.");
          GSTLedgerEntry1.FINDFIRST;
          GSTLedgerEntry1."Reversed by Entry No." := EntryNo;
          GSTLedgerEntry1.Reversed := TRUE;
          GSTLedgerEntry1.MODIFY;
        UNTIL GSTLedgerEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReverseDetailedGST@1500401(VAR DetailedGSTLedgerEntry@1500001 : Record 16419);
    VAR
      LastDetailedGSTLedgerEntry@1500002 : Record 16419;
      DetailedGSTLedgerEntry1@1500004 : Record 16419;
      NewDetailedGSTLedgerEntry@1500005 : Record 16419;
      EntryNo@1500003 : Integer;
    BEGIN
      IF LastDetailedGSTLedgerEntry.FINDLAST THEN
        EntryNo := LastDetailedGSTLedgerEntry."Entry No.";

      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          DetailedGSTLedgerEntry.TESTFIELD(Paid,FALSE);
          DetailedGSTLedgerEntry.TESTFIELD("Adv. Pmt. Adjustment",FALSE);
          EntryNo += 1;
          CLEAR(NewDetailedGSTLedgerEntry);
          NewDetailedGSTLedgerEntry.INIT;
          NewDetailedGSTLedgerEntry.TRANSFERFIELDS(DetailedGSTLedgerEntry);
          NewDetailedGSTLedgerEntry."Entry No." := EntryNo;
          NewDetailedGSTLedgerEntry."Reversed Entry No." := DetailedGSTLedgerEntry."Entry No.";
          NewDetailedGSTLedgerEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
          NewDetailedGSTLedgerEntry."Entry Type" := NewDetailedGSTLedgerEntry."Entry Type"::Application;
          NewDetailedGSTLedgerEntry."GST Base Amount" := -NewDetailedGSTLedgerEntry."GST Base Amount";
          NewDetailedGSTLedgerEntry."GST Amount" := -NewDetailedGSTLedgerEntry."GST Amount";
          IF NewDetailedGSTLedgerEntry.Positive THEN
            NewDetailedGSTLedgerEntry.Positive := FALSE
          ELSE
            NewDetailedGSTLedgerEntry.Positive := TRUE;
          NewDetailedGSTLedgerEntry.INSERT;

          DetailedGSTLedgerEntry1.RESET;
          DetailedGSTLedgerEntry1.SETRANGE("Entry No.",DetailedGSTLedgerEntry."Entry No.");
          DetailedGSTLedgerEntry1.FINDFIRST;
          DetailedGSTLedgerEntry1."Reversed by Entry No." := EntryNo;
          DetailedGSTLedgerEntry1.Reversed := TRUE;
          DetailedGSTLedgerEntry1.MODIFY;
      UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE BlankServiceTaxAmounts@1500000(VAR ServiceTaxEntry@1500000 : Record 16473);
    BEGIN
      ServiceTaxEntry.MODIFYALL("Service Tax Base Amount",0);
      ServiceTaxEntry.MODIFYALL("Service Tax Amount",0);
      ServiceTaxEntry.MODIFYALL("Service Tax Abatement",0);
      ServiceTaxEntry.MODIFYALL("eCess Amount",0);
      ServiceTaxEntry.MODIFYALL("SHE Cess Amount",0);
      ServiceTaxEntry.MODIFYALL("Remaining Serv. Tax Amt",0);
      ServiceTaxEntry.MODIFYALL("Remaining Serv. Tax eCess Amt",0);
      ServiceTaxEntry.MODIFYALL("Remaining Serv. Tax Base Amt",0);
      ServiceTaxEntry.MODIFYALL("Amount Including Service Tax",0);
      ServiceTaxEntry.MODIFYALL("Remaining Serv Tax SHECess Amt",0);
      ServiceTaxEntry.MODIFYALL("Service Tax SBC Amount",0);
      ServiceTaxEntry.MODIFYALL("Service Tax SBC %",0);
      ServiceTaxEntry.MODIFYALL("Remaining Serv. Tax SBC Amt",0);
      ServiceTaxEntry.MODIFYALL("KK Cess Amount",0);
      ServiceTaxEntry.MODIFYALL("KK Cess%",0);
      ServiceTaxEntry.MODIFYALL("Remaining KK Cess Amount",0);
    END;

    LOCAL PROCEDURE ApplyCustLedgEntryByReversal@75(CustLedgEntry@1000 : Record 21;CustLedgEntry2@1001 : Record 21;DtldCustLedgEntry2@1002 : Record 379;AppliedEntryNo@1005 : Integer;VAR NextDtldCustLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldCustLedgEntry@1003 : Record 379;
    BEGIN
      CustLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      CustLedgEntry."Closed by Entry No." := CustLedgEntry2."Entry No.";
      CustLedgEntry."Closed at Date" := CustLedgEntry2."Posting Date";
      CustLedgEntry."Closed by Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry."Closed by Amount (LCY)" := -CustLedgEntry2."Remaining Amt. (LCY)";
      CustLedgEntry."Closed by Currency Code" := CustLedgEntry2."Currency Code";
      CustLedgEntry."Closed by Currency Amount" := -CustLedgEntry2."Remaining Amount";
      CustLedgEntry.Open := FALSE;
      CustLedgEntry.MODIFY;

      NewDtldCustLedgEntry := DtldCustLedgEntry2;
      NewDtldCustLedgEntry."Cust. Ledger Entry No." := CustLedgEntry."Entry No.";
      NewDtldCustLedgEntry."Entry Type" := NewDtldCustLedgEntry."Entry Type"::Application;
      NewDtldCustLedgEntry."Applied Cust. Ledger Entry No." := AppliedEntryNo;
      NewDtldCustLedgEntry."User ID" := USERID;
      NewDtldCustLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
      NewDtldCustLedgEntry."Entry No." := NextDtldCustLedgEntryEntryNo;
      NextDtldCustLedgEntryEntryNo := NextDtldCustLedgEntryEntryNo + 1;
      NewDtldCustLedgEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ApplyVendLedgEntryByReversal@76(VendLedgEntry@1000 : Record 25;VendLedgEntry2@1001 : Record 25;DtldVendLedgEntry2@1002 : Record 380;AppliedEntryNo@1005 : Integer;VAR NextDtldVendLedgEntryEntryNo@1004 : Integer);
    VAR
      NewDtldVendLedgEntry@1003 : Record 380;
    BEGIN
      VendLedgEntry2.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      VendLedgEntry."Closed by Entry No." := VendLedgEntry2."Entry No.";
      VendLedgEntry."Closed at Date" := VendLedgEntry2."Posting Date";
      VendLedgEntry."Closed by Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry."Closed by Amount (LCY)" := -VendLedgEntry2."Remaining Amt. (LCY)";
      VendLedgEntry."Closed by Currency Code" := VendLedgEntry2."Currency Code";
      VendLedgEntry."Closed by Currency Amount" := -VendLedgEntry2."Remaining Amount";
      VendLedgEntry.Open := FALSE;
      VendLedgEntry.MODIFY;

      NewDtldVendLedgEntry := DtldVendLedgEntry2;
      NewDtldVendLedgEntry."Vendor Ledger Entry No." := VendLedgEntry."Entry No.";
      NewDtldVendLedgEntry."Entry Type" := NewDtldVendLedgEntry."Entry Type"::Application;
      NewDtldVendLedgEntry."Applied Vend. Ledger Entry No." := AppliedEntryNo;
      NewDtldVendLedgEntry."User ID" := USERID;
      NewDtldVendLedgEntry."Transaction No." := GenJnlPostLine.GetNextTransactionNo;
      NewDtldVendLedgEntry."Entry No." := NextDtldVendLedgEntryEntryNo;
      NextDtldVendLedgEntryEntryNo := NextDtldVendLedgEntryEntryNo + 1;
      NewDtldVendLedgEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CheckDimComb@91(EntryNo@1001 : Integer;DimSetID@1002 : Integer;TableID1@1006 : Integer;AccNo1@1007 : Code[20];TableID2@1009 : Integer;AccNo2@1008 : Code[20]);
    VAR
      DimMgt@1010 : Codeunit 408;
      TableID@1003 : ARRAY [10] OF Integer;
      AccNo@1005 : ARRAY [10] OF Code[20];
    BEGIN
      IF NOT DimMgt.CheckDimIDComb(DimSetID) THEN
        ERROR(DimCombBlockedErr,EntryNo,DimMgt.GetDimCombErr);
      CLEAR(TableID);
      CLEAR(AccNo);
      TableID[1] := TableID1;
      AccNo[1] := AccNo1;
      TableID[2] := TableID2;
      AccNo[2] := AccNo2;
      IF NOT DimMgt.CheckDimValuePosting(TableID,AccNo,DimSetID) THEN
        ERROR(DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE CopyCustLedgEntry@1(VAR CustLedgEntry@1000 : Record 21;VAR TempCustLedgEntry@1001 : TEMPORARY Record 21);
    BEGIN
      IF CustLedgEntry.FINDSET THEN
        REPEAT
          IF CustLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          TempCustLedgEntry := CustLedgEntry;
          TempCustLedgEntry.INSERT;
        UNTIL CustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyVendLedgEntry@3(VAR VendLedgEntry@1000 : Record 25;VAR TempVendLedgEntry@1001 : TEMPORARY Record 25);
    BEGIN
      IF VendLedgEntry.FINDSET THEN
        REPEAT
          IF VendLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          TempVendLedgEntry := VendLedgEntry;
          TempVendLedgEntry.INSERT;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyBankAccLedgEntry@4(VAR BankAccLedgEntry@1000 : Record 271;VAR TempBankAccLedgEntry@1001 : TEMPORARY Record 271);
    BEGIN
      IF BankAccLedgEntry.FINDSET THEN
        REPEAT
          IF BankAccLedgEntry."Reversed by Entry No." <> 0 THEN
            ERROR(CannotReverseErr);
          TempBankAccLedgEntry := BankAccLedgEntry;
          TempBankAccLedgEntry.INSERT;
        UNTIL BankAccLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SetReversalDescription@2(RecVar@1000 : Variant;VAR Description@1002 : Text[50]);
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1004 : FieldRef;
      DescriptionFieldNo@1003 : Integer;
    BEGIN
      RecRef.GETTABLE(RecVar);
      DescriptionFieldNo := GetDescriptionFieldNo(RecRef);
      IF DescriptionFieldNo = 0 THEN
        EXIT;

      FieldRef := RecRef.FIELD(DescriptionFieldNo);
      Description := COPYSTR(FORMAT(FieldRef.VALUE),1,MAXSTRLEN(Description));
    END;

    LOCAL PROCEDURE GetDescriptionFieldNo@5(RecRef@1001 : RecordRef) : Integer;
    VAR
      GLEntry@1002 : Record 17;
      CustLedgerEntry@1003 : Record 21;
      VendorLedgerEntry@1004 : Record 25;
      BankAccountLedgerEntry@1005 : Record 271;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"G/L Entry":
          EXIT(GLEntry.FIELDNO(Description));
        DATABASE::"Cust. Ledger Entry":
          EXIT(CustLedgerEntry.FIELDNO(Description));
        DATABASE::"Vendor Ledger Entry":
          EXIT(VendorLedgerEntry.FIELDNO(Description));
        DATABASE::"Bank Account Ledger Entry":
          EXIT(BankAccountLedgerEntry.FIELDNO(Description));
      END;

      EXIT(0);
    END;

    BEGIN
    END.
  }
}

