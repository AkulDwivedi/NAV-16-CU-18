OBJECT Codeunit 131101 Library - Workflow
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryTextFileValidation@1002 : Codeunit 131003;
      NotificationBodyDoesNotMatchErr@1003 : TextConst 'ENU=The body of the notification does not match the one that was sent to the server.';
      FileManagement@1004 : Codeunit 419;
      EmailShouldNotExistErr@1005 : TextConst 'ENU=There should not be an email sent to this user.';
      TimeoutErr@1006 : TextConst 'ENU=The Notification Entry was not completed during the 2 minutes period.';
      NotificationTemplateTxt@1007 : TextConst 'ENU=%SoftwareName% %WorkflowNotificationEngine% %EntityName% %EntityID% %ActionPerformed% %RTCUrl% %RTCHyperlink% %WebUrl% %WebHyperlink% %CustomUrl% %CustomHyperlink%';
      InvalidEventCondErr@1008 : TextConst 'ENU=No event conditions are specified.';

    PROCEDURE CreateWorkflow@3(VAR Workflow@1000 : Record 1501);
    BEGIN
      Workflow.INIT;
      Workflow.Code := GenerateRandomWorkflowCode;
      Workflow.Description := DELCHR(LibraryUtility.GenerateRandomText(MAXSTRLEN(Workflow.Description)),'=','''()&|<>'); // remove invalid filter chars
      Workflow.Category := CreateWorkflowCategory;
      Workflow.Template := FALSE;
      Workflow.INSERT(TRUE);
    END;

    PROCEDURE CreateTemplateWorkflow@6(VAR Workflow@1000 : Record 1501);
    BEGIN
      CreateWorkflow(Workflow);
      Workflow.VALIDATE(Template,TRUE);
      Workflow.MODIFY;
    END;

    PROCEDURE CreateEnabledWorkflow@109(VAR Workflow@1000 : Record 1501;WorkflowCode@1001 : Code[17]);
    VAR
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      CopyWorkflow(Workflow,WorkflowSetup.GetWorkflowTemplateCode(WorkflowCode));
      EnableWorkflow(Workflow);
    END;

    PROCEDURE CreateWorkflowTableRelation@13(VAR WorkflowTableRelation@1000 : Record 1505;TableId@1001 : Integer;FieldId@1002 : Integer;RelatedTableId@1003 : Integer;RelatedFieldId@1004 : Integer);
    BEGIN
      WorkflowTableRelation.INIT;
      WorkflowTableRelation."Table ID" := TableId;
      WorkflowTableRelation."Field ID" := FieldId;
      WorkflowTableRelation."Related Table ID" := RelatedTableId;
      WorkflowTableRelation."Related Field ID" := RelatedFieldId;
      IF WorkflowTableRelation.INSERT(TRUE) THEN;
    END;

    PROCEDURE CreateWorkflowStepArgument@15(VAR WorkflowStepArgument@1000 : Record 1523;Type@1001 : Option;UserID@1004 : Code[50];TemplateName@1002 : Code[10];BatchName@1003 : Code[10];ApproverType@1006 : Option;InformUser@1005 : Boolean);
    BEGIN
      WorkflowStepArgument.INIT;
      WorkflowStepArgument.Type := Type;
      WorkflowStepArgument."General Journal Template Name" := TemplateName;
      WorkflowStepArgument."General Journal Batch Name" := BatchName;
      WorkflowStepArgument."Notification User ID" := UserID;
      WorkflowStepArgument."Approver Type" := ApproverType;
      WorkflowStepArgument."Approver Limit Type" := WorkflowStepArgument."Approver Limit Type"::"Approver Chain";
      WorkflowStepArgument."Show Confirmation Message" := InformUser;
      WorkflowStepArgument.INSERT(TRUE);
    END;

    PROCEDURE CreateNotificationSetup@27(VAR NotificationSetup@1000 : Record 1512;UserID@1004 : Code[50];NotificationType@1005 : Option;NotificationTemplateCode@1006 : Code[20];NonAggregatedNotifications@1007 : Boolean);
    BEGIN
      NotificationSetup.INIT;
      NotificationSetup."User ID" := UserID;
      NotificationSetup."Notification Type" := NotificationType;
      NotificationSetup."Notification Template Code" := NotificationTemplateCode;
      NotificationSetup."Non-Aggregated Notifications" := NonAggregatedNotifications;
      NotificationSetup.INSERT(TRUE);
    END;

    PROCEDURE CreateNotificationTemplate@25(VAR NotificationTemplate@1000 : Record 1510;Method@1002 : Option;Type@1001 : Option) : Text;
    VAR
      OutStream@1003 : OutStream;
    BEGIN
      NotificationTemplate.INIT;
      NotificationTemplate.Code := LibraryUtility.GenerateGUID;
      NotificationTemplate."Notification Body".CREATEOUTSTREAM(OutStream,TEXTENCODING::Windows);
      OutStream.WRITETEXT(NotificationTemplateTxt);
      NotificationTemplate."Notification Method" := Method;
      NotificationTemplate.Type := Type;
      NotificationTemplate.INSERT(TRUE);

      EXIT(NotificationTemplateTxt);
    END;

    PROCEDURE SetUpSMTPEmailSetup@5();
    VAR
      SMTPMailSetup@1000 : Record 409;
    BEGIN
      SMTPMailSetup.DELETEALL;

      SMTPMailSetup.INIT;
      SMTPMailSetup."SMTP Server" := 'localhost';
      SMTPMailSetup."SMTP Server Port" := 8081;
      SMTPMailSetup."User ID" := 'TestUser';
      SMTPMailSetup.Password := 'TestPassword';
      SMTPMailSetup.Authentication := SMTPMailSetup.Authentication::Basic;
      SMTPMailSetup.INSERT;
    END;

    PROCEDURE VerifyEmailWithMockService@4(UserId@1003 : Code[50];NotificationBodyText@1004 : Text);
    VAR
      SentNotificationEntry@1000 : Record 1514;
      UserSetup@1001 : Record 91;
      Retries@1005 : Integer;
    BEGIN
      SentNotificationEntry.SETRANGE("Recipient User ID",UserId);

      Retries := 0;
      WHILE (NOT SentNotificationEntry.FINDFIRST) AND (Retries < 120) DO BEGIN
        SLEEP(1000);
        Retries += 1;
      END;

      IF Retries = 120 THEN
        ERROR(TimeoutErr);

      UserSetup.GET(UserId);

      VerifyEmailFile(NotificationBodyText,UserSetup."E-Mail");
    END;

    LOCAL PROCEDURE VerifyEmailFile@10(NotificationBodyText@1001 : Text;UserEmailAddress@1003 : Text);
    VAR
      FilePath@1002 : Text;
      Line@1005 : Text;
    BEGIN
      FilePath := GetEmailFilePath(UserEmailAddress);
      IF FileManagement.ServerFileExists(FilePath) THEN BEGIN
        Line := LibraryTextFileValidation.NewFindLineWithValue(FilePath,1,1024,NotificationBodyText);
        FileManagement.DeleteServerFile(FilePath);
      END;
      Assert.AreEqual(NotificationBodyText,Line,NotificationBodyDoesNotMatchErr);
    END;

    PROCEDURE VerifyEmailContainsValues@17(ExpectedValues@1000 : ARRAY [5] OF Text;UserCode@1007 : Code[50]);
    VAR
      SentNotificationEntry@1001 : Record 1514;
      UserSetup@1003 : Record 91;
      FilePath@1006 : Text;
      Retries@1002 : Integer;
      index@1005 : Integer;
    BEGIN
      SentNotificationEntry.SETRANGE("Recipient User ID",UserCode);

      Retries := 0;
      WHILE (NOT SentNotificationEntry.FINDFIRST) AND (Retries < 120) DO BEGIN
        SLEEP(1000);
        Retries += 1;
      END;

      IF Retries = 120 THEN
        ERROR(TimeoutErr);

      UserSetup.GET(UserCode);

      FilePath := GetEmailFilePath(UserSetup."E-Mail");
      IF FileManagement.ServerFileExists(FilePath) THEN BEGIN
        FOR index := 1 TO ARRAYLEN(ExpectedValues) DO
          IF ExpectedValues[index] <> '' THEN
            Assert.IsTrue(LibraryTextFileValidation.DoesFileContainValue(FilePath,ExpectedValues[index]),
              'The value was not found in the file');
        FileManagement.DeleteServerFile(FilePath);
      END ELSE
        Assert.Fail('File not found at:' + FilePath);
    END;

    LOCAL PROCEDURE GetEmailFilePath@12(UserEmail@1000 : Text) : Text;
    VAR
      TempFile@1002 : File;
      PathHelper@1001 : DotNet "'mscorlib'.System.IO.Path";
      FilePath@1003 : Text;
    BEGIN
      TempFile.CREATETEMPFILE;
      FilePath := PathHelper.GetDirectoryName(TempFile.NAME) + '\' + UserEmail + '.txt';
      TempFile.CLOSE;
      EXIT(FilePath);
    END;

    PROCEDURE CheckEmailWasNotSent@31(UserId@1000 : Code[50]);
    VAR
      UserSetup@1001 : Record 91;
      FilePath@1002 : Text;
    BEGIN
      UserSetup.GET(UserId);
      FilePath := GetEmailFilePath(UserSetup."E-Mail");
      Assert.IsFalse(FileManagement.ServerFileExists(FilePath),EmailShouldNotExistErr);
    END;

    PROCEDURE DeleteAllExistingWorkflows@11();
    VAR
      Workflow@1000 : Record 1501;
      WorkflowStep@1001 : Record 1502;
      WorkflowStepInstance@1002 : Record 1504;
      WorkflowTableRelationValue@1004 : Record 1506;
      WorkflowStepArgument@1005 : Record 1523;
      WorkflowStepArgumentArchive@1009 : Record 1531;
      WorkflowStepInstanceArchive@1008 : Record 1530;
      WorkflowRule@1003 : Record 1524;
      WorkflowRecordChange@1006 : Record 1525;
      WorkflowRecordChangeArchive@1007 : Record 1526;
    BEGIN
      WorkflowRecordChange.DELETEALL;
      WorkflowRecordChangeArchive.DELETEALL;

      WorkflowTableRelationValue.DELETEALL;

      WorkflowStepArgument.DELETEALL;
      WorkflowStepArgumentArchive.DELETEALL;

      WorkflowRule.DELETEALL;
      WorkflowStepInstanceArchive.DELETEALL;

      WorkflowStepInstance.DELETEALL;
      WorkflowStep.DELETEALL;

      Workflow.DELETEALL;
    END;

    PROCEDURE DisableAllWorkflows@29();
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      Workflow.SETRANGE(Template,FALSE);
      Workflow.MODIFYALL(Enabled,FALSE,TRUE);
    END;

    PROCEDURE EnableWorkflow@32(VAR Workflow@1000 : Record 1501);
    BEGIN
      Workflow.VALIDATE(Enabled,TRUE);
      Workflow.MODIFY(TRUE);
    END;

    PROCEDURE DeleteNotifications@1();
    VAR
      NotificationTemplate@1000 : Record 1510;
      NotificationEntry@1001 : Record 1511;
    BEGIN
      NotificationTemplate.DELETEALL;
      NotificationEntry.DELETEALL;
    END;

    PROCEDURE GetGeneralJournalTemplateAndBatch@2(VAR GeneralJnlTemplateCode@1002 : Code[10];VAR GeneralJnlBatchCode@1003 : Code[10]);
    VAR
      GenJournalTemplate@1000 : Record 80;
      GenJournalBatch@1001 : Record 232;
      LibraryERM@1004 : Codeunit 131300;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.FINDFIRST;

      GeneralJnlTemplateCode := GenJournalTemplate.Name;

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GeneralJnlTemplateCode);

      GeneralJnlBatchCode := GenJournalBatch.Name;
    END;

    PROCEDURE InsertEntryPointEventStep@51(Workflow@1000 : Record 1501;ActivityName@1001 : Code[128]) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Event",ActivityName);
      WorkflowStep.VALIDATE("Entry Point",TRUE);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    PROCEDURE InsertEventStep@14(Workflow@1000 : Record 1501;ActivityName@1001 : Code[128];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Event",ActivityName);
      WorkflowStep."Sequence No." := GetNextSequenceNo(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    PROCEDURE InsertResponseStep@9(Workflow@1001 : Record 1501;ActivityName@1000 : Code[128];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::Response,ActivityName);
      WorkflowStep."Sequence No." := GetNextSequenceNo(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    PROCEDURE InsertSubWorkflowStep@20(Workflow@1001 : Record 1501;WorkflowCode@1000 : Code[20];PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1003 : Record 1502;
    BEGIN
      InsertStep(WorkflowStep,Workflow.Code,WorkflowStep.Type::"Sub-Workflow",WorkflowCode);
      WorkflowStep."Sequence No." := GetNextSequenceNo(Workflow,PreviousStepID);
      WorkflowStep.VALIDATE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.MODIFY(TRUE);
      EXIT(WorkflowStep.ID);
    END;

    LOCAL PROCEDURE InsertStep@19(VAR WorkflowStep@1000 : Record 1502;WorkflowCode@1001 : Code[20];StepType@1003 : Option;FunctionName@1002 : Code[128]);
    BEGIN
      WITH WorkflowStep DO BEGIN
        VALIDATE("Workflow Code",WorkflowCode);
        VALIDATE(Type,StepType);
        VALIDATE("Function Name",FunctionName);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetNextSequenceNo@22(Workflow@1001 : Record 1501;PreviousStepID@1002 : Integer) : Integer;
    VAR
      WorkflowStep@1000 : Record 1502;
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
      WorkflowStep.SETRANGE("Previous Workflow Step ID",PreviousStepID);
      WorkflowStep.SETCURRENTKEY("Sequence No.");
      IF WorkflowStep.FINDLAST THEN
        EXIT(WorkflowStep."Sequence No." + 1);
      EXIT(1);
    END;

    PROCEDURE SetSequenceNo@23(Workflow@1003 : Record 1501;WorkflowStepID@1001 : Integer;SequenceNo@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.GET(Workflow.Code,WorkflowStepID);
      WorkflowStep.VALIDATE("Sequence No.",SequenceNo);
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE SetNextStep@34(Workflow@1003 : Record 1501;WorkflowStepID@1001 : Integer;NextStepID@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.GET(Workflow.Code,WorkflowStepID);
      WorkflowStep.VALIDATE("Next Workflow Step ID",NextStepID);
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE SetEventStepAsEntryPoint@16(Workflow@1003 : Record 1501;WorkflowStepID@1001 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.GET(Workflow.Code,WorkflowStepID);
      WorkflowStep.TESTFIELD(Type,WorkflowStep.Type::"Event");
      WorkflowStep.VALIDATE("Entry Point",TRUE);
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE SetSubWorkflowStepAsEntryPoint@8(Workflow@1003 : Record 1501;WorkflowStepID@1001 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.GET(Workflow.Code,WorkflowStepID);
      WorkflowStep.TESTFIELD(Type,WorkflowStep.Type::"Sub-Workflow");
      WorkflowStep.VALIDATE("Entry Point",TRUE);
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE InsertTableRelation@7(TableId@1000 : Integer;FieldId@1001 : Integer;RelatedTableId@1002 : Integer;RelatedFieldId@1003 : Integer);
    VAR
      WorkflowTableRelation@1004 : Record 1505;
    BEGIN
      WorkflowTableRelation.INIT;
      WorkflowTableRelation."Table ID" := TableId;
      WorkflowTableRelation."Field ID" := FieldId;
      WorkflowTableRelation."Related Table ID" := RelatedTableId;
      WorkflowTableRelation."Related Field ID" := RelatedFieldId;
      WorkflowTableRelation.INSERT;
    END;

    PROCEDURE InsertEventArgument@41(WorkflowStepID@1000 : Integer;EventConditions@1008 : Text);
    VAR
      WorkflowStep@1001 : Record 1502;
      WorkflowStepArgument@1002 : Record 1523;
    BEGIN
      IF EventConditions = '' THEN
        ERROR(InvalidEventCondErr);

      WorkflowStepArgument.Type := WorkflowStepArgument.Type::"Event";
      WorkflowStepArgument.INSERT(TRUE);
      WorkflowStepArgument.SetEventFilters(EventConditions);

      WorkflowStep.SETRANGE(ID,WorkflowStepID);
      WorkflowStep.FINDFIRST;
      WorkflowStep.VALIDATE(Argument,WorkflowStepArgument.ID);
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE InsertNotificationArgument@42(WorkflowStepID@1000 : Integer;NotifUserID@1004 : Code[50];LinkTargetPage@1007 : Integer;CustomLink@1003 : Text[250]);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Notification User ID" := NotifUserID;
      WorkflowStepArgument."Link Target Page" := LinkTargetPage;
      WorkflowStepArgument."Custom Link" := CustomLink;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    PROCEDURE InsertMessageArgument@36(WorkflowStepID@1000 : Integer;Msg@1003 : Text[250]);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument.Message := Msg;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    PROCEDURE InsertPmtLineCreationArgument@43(WorkflowStepID@1004 : Integer;GenJnlTemplateName@1002 : Code[10];GenJnlBatchName@1003 : Code[10]);
    VAR
      WorkflowStepArgument@1000 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."General Journal Template Name" := GenJnlTemplateName;
      WorkflowStepArgument."General Journal Batch Name" := GenJnlBatchName;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    PROCEDURE InsertApprovalArgument@44(WorkflowStepID@1000 : Integer;ApproverType@1009 : Option;ApproverLimitType@1010 : Option;WorkflowUserGroupCode@1003 : Text[20];InformUser@1002 : Boolean);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Approver Type" := ApproverType;
      WorkflowStepArgument."Approver Limit Type" := ApproverLimitType;
      WorkflowStepArgument."Workflow User Group Code" := WorkflowUserGroupCode;
      WorkflowStepArgument."Show Confirmation Message" := InformUser;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    PROCEDURE InsertRecChangeValueArgument@130(WorkflowStepID@1000 : Integer;TableNo@1002 : Integer;FieldNo@1003 : Integer);
    VAR
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      InsertStepArgument(WorkflowStepArgument,WorkflowStepID);

      WorkflowStepArgument."Table No." := TableNo;
      WorkflowStepArgument."Field No." := FieldNo;
      WorkflowStepArgument.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertStepArgument@18(VAR WorkflowStepArgument@1003 : Record 1523;WorkflowStepID@1000 : Integer);
    VAR
      WorkflowStep@1002 : Record 1502;
    BEGIN
      WorkflowStep.SETRANGE(ID,WorkflowStepID);
      WorkflowStep.FINDFIRST;

      IF WorkflowStepArgument.GET(WorkflowStep.Argument) THEN
        EXIT;

      WorkflowStepArgument.Type := WorkflowStepArgument.Type::Response;
      WorkflowStepArgument.VALIDATE("Response Function Name",WorkflowStep."Function Name");
      WorkflowStepArgument.INSERT(TRUE);

      WorkflowStep.VALIDATE(Argument,WorkflowStepArgument.ID);
      WorkflowStep.MODIFY(TRUE);
    END;

    PROCEDURE InsertEventRule@33(WorkflowStepId@1000 : Integer;FieldNo@1003 : Integer;Operator@1008 : Option);
    VAR
      WorkflowStep@1004 : Record 1502;
      WorkflowRule@1002 : Record 1524;
      WorkflowEvent@1001 : Record 1520;
    BEGIN
      WorkflowStep.SETRANGE(ID,WorkflowStepId);
      WorkflowStep.FINDFIRST;

      WorkflowRule.INIT;
      WorkflowRule."Workflow Code" := WorkflowStep."Workflow Code";
      WorkflowRule."Workflow Step ID" := WorkflowStep.ID;
      WorkflowRule.Operator := Operator;

      IF WorkflowEvent.GET(WorkflowStep."Function Name") THEN
        WorkflowRule."Table ID" := WorkflowEvent."Table ID";
      WorkflowRule."Field No." := FieldNo;
      WorkflowRule.INSERT(TRUE);
    END;

    PROCEDURE CreateDynamicRequestPageEntity@26(Name@1003 : Code[20];TableID@1001 : Integer;RelatedTableID@1002 : Integer) : Code[20];
    VAR
      DynamicRequestPageEntity@1000 : Record 1515;
    BEGIN
      DynamicRequestPageEntity.INIT;
      DynamicRequestPageEntity.VALIDATE(Name,Name);
      DynamicRequestPageEntity.VALIDATE("Table ID",TableID);
      DynamicRequestPageEntity.VALIDATE("Related Table ID",RelatedTableID);
      DynamicRequestPageEntity.INSERT(TRUE);
      EXIT(DynamicRequestPageEntity.Name);
    END;

    PROCEDURE CreateDynamicRequestPageField@30(TableID@1001 : Integer;FieldID@1002 : Integer);
    VAR
      DynamicRequestPageField@1000 : Record 1516;
    BEGIN
      DynamicRequestPageField.INIT;
      DynamicRequestPageField.VALIDATE("Table ID",TableID);
      DynamicRequestPageField.VALIDATE("Field ID",FieldID);
      DynamicRequestPageField.INSERT(TRUE);
    END;

    PROCEDURE DeleteDynamicRequestPageFields@24(TableID@1001 : Integer);
    VAR
      DynamicRequestPageField@1000 : Record 1516;
    BEGIN
      DynamicRequestPageField.SETRANGE("Table ID",TableID);
      DynamicRequestPageField.DELETEALL(TRUE);
    END;

    PROCEDURE CopyWorkflow@28(VAR Workflow@1000 : Record 1501;FromWorkflowCode@1001 : Code[20]);
    VAR
      FromWorkflow@1002 : Record 1501;
    BEGIN
      FromWorkflow.GET(FromWorkflowCode);

      CreateWorkflow(Workflow);

      IF Workflow.Description = '' THEN
        Workflow.Description := FromWorkflow.Description;
      Workflow.MODIFY;

      CopyWorkflowSteps(Workflow,FromWorkflowCode);
      FillNotificationUserID(Workflow);
    END;

    PROCEDURE CopyWorkflowTemplate@21(VAR Workflow@1000 : Record 1501;FromWorkflowTemplateCode@1001 : Code[17]);
    VAR
      FromWorkflow@1002 : Record 1501;
      WorkflowSetup@1003 : Codeunit 1502;
    BEGIN
      FromWorkflow.GET(WorkflowSetup.GetWorkflowTemplateCode(FromWorkflowTemplateCode));

      CreateWorkflow(Workflow);

      IF Workflow.Description = '' THEN
        Workflow.Description := FromWorkflow.Description;
      Workflow.MODIFY;

      CopyWorkflowSteps(Workflow,FromWorkflow.Code);
      FillNotificationUserID(Workflow);
    END;

    LOCAL PROCEDURE CopyWorkflowSteps@57(Workflow@1001 : Record 1501;FromTemplateCode@1003 : Code[20]);
    VAR
      FromWorkflowStep@1002 : Record 1502;
      FromWorkflowStepArgument@1000 : Record 1523;
      ToWorkflowStep@1004 : Record 1502;
    BEGIN
      ToWorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
      ToWorkflowStep.DELETEALL(TRUE);

      FromWorkflowStep.SETRANGE("Workflow Code",FromTemplateCode);
      IF FromWorkflowStep.FINDSET THEN
        REPEAT
          ToWorkflowStep.COPY(FromWorkflowStep);

          ToWorkflowStep."Workflow Code" := Workflow.Code;
          IF FromWorkflowStepArgument.GET(FromWorkflowStep.Argument) THEN
            ToWorkflowStep.Argument := FromWorkflowStepArgument.Clone;
          ToWorkflowStep.INSERT(TRUE);

          CopyWorkflowRules(FromWorkflowStep,ToWorkflowStep);
        UNTIL FromWorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyWorkflowRules@35(FromWorkflowStep@1000 : Record 1502;ToWorkflowStep@1001 : Record 1502);
    VAR
      FromWorkflowRule@1002 : Record 1524;
      ToWorkflowRule@1003 : Record 1524;
    BEGIN
      FromWorkflowStep.FindWorkflowRules(FromWorkflowRule);
      IF FromWorkflowRule.FINDSET THEN
        REPEAT
          ToWorkflowRule.COPY(FromWorkflowRule);
          ToWorkflowRule.ID := 0;
          ToWorkflowRule."Workflow Code" := ToWorkflowStep."Workflow Code";
          ToWorkflowRule."Workflow Step ID" := ToWorkflowStep.ID;
          ToWorkflowRule.INSERT(TRUE);
        UNTIL FromWorkflowRule.NEXT = 0;
    END;

    PROCEDURE CreatePredecessor@39(Type@1004 : Option;FunctionName@1001 : Code[128];PredecessorType@1003 : Option;PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      WFEventResponseCombination.INIT;
      WFEventResponseCombination.Type := Type;
      WFEventResponseCombination."Function Name" := FunctionName;
      WFEventResponseCombination."Predecessor Type" := PredecessorType;
      WFEventResponseCombination."Predecessor Function Name" := PredecessorFunctionName;
      IF WFEventResponseCombination.INSERT THEN;
    END;

    PROCEDURE CreateEventPredecessor@66(FunctionName@1001 : Code[128];PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      CreatePredecessor(WFEventResponseCombination.Type::"Event",FunctionName,
        WFEventResponseCombination."Predecessor Type"::"Event",PredecessorFunctionName);
    END;

    PROCEDURE CreateResponsePredecessor@37(FunctionName@1001 : Code[128];PredecessorFunctionName@1002 : Code[128]);
    VAR
      WFEventResponseCombination@1000 : Record 1509;
    BEGIN
      CreatePredecessor(WFEventResponseCombination.Type::Response,FunctionName,
        WFEventResponseCombination."Predecessor Type"::"Event",PredecessorFunctionName);
    END;

    PROCEDURE CreateWorkflowCategory@38() : Code[20];
    VAR
      WorkflowCategory@1000 : Record 1508;
    BEGIN
      WorkflowCategory.Code := LibraryUtility.GenerateRandomCode(WorkflowCategory.FIELDNO(Code),DATABASE::"Workflow Category");
      WorkflowCategory.Description :=
        DELCHR(LibraryUtility.GenerateRandomText(MAXSTRLEN(WorkflowCategory.Description)),'=','''()&|<>');
      WorkflowCategory.INSERT;
      EXIT(WorkflowCategory.Code);
    END;

    LOCAL PROCEDURE FillNotificationUserID@48(Workflow@1000 : Record 1501);
    VAR
      WorkflowStep@1002 : Record 1502;
      WorkflowStepArgument@1001 : Record 1523;
    BEGIN
      WorkflowStep.SETRANGE("Workflow Code",Workflow.Code);
      IF WorkflowStep.FINDSET THEN
        REPEAT
          IF WorkflowStepArgument.GET(WorkflowStep.Argument) THEN BEGIN
            WorkflowStepArgument.CALCFIELDS("Response Option Group");
            IF WorkflowStepArgument."Response Option Group" = 'GROUP 3' THEN BEGIN
              WorkflowStepArgument."Notification User ID" := USERID;
              WorkflowStepArgument.MODIFY(TRUE);
            END;
          END;
        UNTIL WorkflowStep.NEXT = 0;
    END;

    LOCAL PROCEDURE GenerateRandomWorkflowCode@40() ReturnCode : Code[20];
    VAR
      Workflow@1000 : Record 1501;
    BEGIN
      REPEAT
        ReturnCode := LibraryUtility.GenerateRandomCode(Workflow.FIELDNO(Code),DATABASE::Workflow);
      UNTIL NOT Workflow.GET(ReturnCode);
    END;

    BEGIN
    END.
  }
}

