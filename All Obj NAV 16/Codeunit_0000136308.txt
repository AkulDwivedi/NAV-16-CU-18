OBJECT Codeunit 136308 Job Order Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      PurchaseLine2@1012 : Record 39;
      JobPlanningLine2@1002 : Record 1003;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryService@1000 : Codeunit 131902;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryJob@1004 : Codeunit 131920;
      LibraryUtility@1008 : Codeunit 131000;
      Assert@1003 : Codeunit 130000;
      IsInitialized@1005 : Boolean;
      WrongDocumentError@1011 : TextConst 'ENU=''Document No is incorrect in Order Tracking: %1 does not contain %2\''.';
      RollBack@1010 : TextConst 'ENU=ROLLBACK.';
      ExpectedDate@1001 : Date;

    LOCAL PROCEDURE Initialize@20();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(PurchaseLine2);
      CLEAR(JobPlanningLine2);

      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PlanningLineTrackingPage)]
    PROCEDURE PlanningLineTracking@1();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1005 : Record 39;
      JobPlanningLine@1008 : Record 1003;
    BEGIN
      // Test Order Tracking Entries from Job Planning Line with Item having Order Tracking Policy Tracking Only.

      // 1. Setup: Create Item with Order Tracking Policy Tracking Only, Purchase Header with Document Type Order, Purchase Line, Job,
      // Job Task and Job Planning Line.
      Initialize;
      PurchaseOrderWithTracking(PurchaseLine,Item."Order Tracking Policy"::"Tracking Only");
      CreateJobPlanningLine(JobPlanningLine);
      ModifyJobPlanningLine(
        JobPlanningLine,PurchaseLine."No.",PurchaseLine.Quantity,PurchaseLine."Expected Receipt Date",PurchaseLine."Location Code");

      // Assign global variable for verification in page handler.
      PurchaseLine2 := PurchaseLine;
      JobPlanningLine2 := JobPlanningLine;

      // 2. Exercise: Run Order Tracking page from Job Planning Line.
      JobPlanningLine.ShowTracking;

      // 3. Verify: Verify Order Tracking Entry on Order Tracking page handler.

      // 4. Teardown.
      Teardown;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PurchaseLineTrackingPage)]
    PROCEDURE PurchaseLineTracking@7();
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1001 : Record 39;
      JobPlanningLine@1000 : Record 1003;
      PurchaseOrderSubform@1002 : Page 54;
    BEGIN
      // Test Order Tracking Entries from Purchase Line with Item having Order Tracking Policy Tracking Only.

      // 1. Setup: Create Item with Order Tracking Policy Tracking Only, Purchase Header with Document Type Order, Purchase Line, Job,
      // Job Task and Job Planning Line.
      Initialize;
      PurchaseOrderWithTracking(PurchaseLine,Item."Order Tracking Policy"::"Tracking Only");
      CreateJobPlanningLine(JobPlanningLine);
      ModifyJobPlanningLine(
        JobPlanningLine,PurchaseLine."No.",PurchaseLine.Quantity,PurchaseLine."Expected Receipt Date",PurchaseLine."Location Code");

      // Assign global variable for verification in page handler.
      PurchaseLine2 := PurchaseLine;
      JobPlanningLine2 := JobPlanningLine;

      // 2. Exercise: Run Order Tracking page from Purchase Line.
      PurchaseOrderSubform.SETRECORD(PurchaseLine);
      PurchaseOrderSubform.ShowTracking;

      // 3. Verify: Verify Order Tracking Entry on Order Tracking page handler.

      // 4. Teardown.
      Teardown;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,NoTrackingPage)]
    PROCEDURE PlanningLineTrackingWithNone@2();
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1001 : Record 39;
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Test Order Tracking Entries from Job Planning Line with Item having Order Tracking Policy None.

      // 1. Setup: Create Item with Order Tracking Policy None, Purchase Header with Document Type Order, Purchase Line, Job,
      // Job Task and Job Planning Line.
      Initialize;
      PurchaseOrderWithTracking(PurchaseLine,Item."Order Tracking Policy"::None);
      CreateJobPlanningLine(JobPlanningLine);
      ModifyJobPlanningLine(
        JobPlanningLine,PurchaseLine."No.",PurchaseLine.Quantity,PurchaseLine."Expected Receipt Date",PurchaseLine."Location Code");

      // Assign global variable for verification in page handler.
      JobPlanningLine2 := JobPlanningLine;

      // 2. Exercise: Run Order Tracking page from Job Planning Line.
      JobPlanningLine.ShowTracking;

      // 3. Verify: Verify there are no Order Tracking Entry on Order Tracking page handler.

      // 4. Teardown.
      Teardown;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,NoTrackingPage)]
    PROCEDURE PlanningLineTrackingLocation@3();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1003 : Record 39;
      JobPlanningLine@1001 : Record 1003;
      Location@1002 : Record 14;
      LibraryWarehouse@1004 : Codeunit 132204;
    BEGIN
      // Test Order Tracking Entries from Job Planning Line with Item having Order Tracking Policy Tracking Only with different Locations.

      // 1. Setup: Create Item with Order Tracking Policy Tracking Only, Purchase Header with Document Type Order, Purchase Line,
      // Location, Job, Job Task and Job Planning Line.
      Initialize;
      PurchaseOrderWithTracking(PurchaseLine,Item."Order Tracking Policy"::"Tracking Only");
      LibraryWarehouse.CreateLocation(Location);
      CreateJobPlanningLine(JobPlanningLine);
      ModifyJobPlanningLine(
        JobPlanningLine,PurchaseLine."No.",PurchaseLine.Quantity,PurchaseLine."Expected Receipt Date",Location.Code);

      // Assign global variable for verification in page handler.
      PurchaseLine2 := PurchaseLine;
      JobPlanningLine2 := JobPlanningLine;

      // 2. Exercise: Run Order Tracking page from Job Planning Line.
      JobPlanningLine.ShowTracking;

      // 3. Verify: Verify there are no Order Tracking Entry on Order Tracking page handler.

      // 4. Teardown.
      Teardown;
    END;

    [Test]
    [HandlerFunctions(AvailableToPromisePageHandler)]
    PROCEDURE AvailableToPromiseOnJobPlanningLine@154();
    VAR
      JobPlanningLine@1005 : Record 1003;
    BEGIN
      // Check that Dates have no effect on the Order Promising page.

      // 1. Setup: Create Job Planning Line.
      Initialize;
      OrderPromisingOnJobPlanningLine(JobPlanningLine);

      // 2. Exercise.
      JobPlanningLine.ShowOrderPromisingLine;

      // 3. Verify: Verify that date on the Order Promising page. Verification done in 'AvailableToPromisePageHandler'.
    END;

    [Test]
    [HandlerFunctions(CapableToPromisePageHandler)]
    PROCEDURE CapableToPromiseOnJobPlanningLine@4();
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      // Check that Dates on Order Promising page.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      OrderPromisingOnJobPlanningLine(JobPlanningLine);

      // 2. Exercise.
      JobPlanningLine.ShowOrderPromisingLine;

      // 3. Verify: Verify that date on the Order Promising page. Verification done in 'CapableToPromisePageHandler'.
    END;

    [Test]
    [HandlerFunctions(AcceptPageHandler)]
    PROCEDURE AcceptOnJobPlanningLine@54();
    VAR
      JobPlanningLine@1005 : Record 1003;
    BEGIN
      // Check that Dates are same on the Order Promising page as in JobPlanningLine's Planning Date.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      OrderPromisingOnJobPlanningLine(JobPlanningLine);

      // 2. Exercise.
      JobPlanningLine.ShowOrderPromisingLine;

      // 3. Verify: Verify that date on the Order Promising page. Verification done in 'AcceptPageHandler'.
    END;

    [Test]
    [HandlerFunctions(AvailableToPromisePageHandler)]
    PROCEDURE AvailableToPromiseOnPlanningLineWithPurchaseOrder@10();
    BEGIN
      // Check that Dates have no effect on the Order Promising page for Available To Promise with lesser Quantity on Job Planning Line than Purchase Order.

      Initialize;
      CreatePlanningLineWithExpectedDate(RANDOM(10));  // Used Random value for Quantity.

      // 3. Verify: Verify that dates are same as in JobPlanningLine. Verification done in 'AvailableToPromisePageHandler'.
    END;

    [Test]
    [HandlerFunctions(AcceptPageHandler)]
    PROCEDURE AcceptOnPlanningLineWithPurchaseOrder@14();
    BEGIN
      // Check that Dates have no effect on the Order Promising page for Accept with lesser Quantity on Job Planning Line than Purchase Order.

      Initialize;
      CreatePlanningLineWithExpectedDate(RANDOM(10));  // Used Random value for Quantity.

      // 3. Verify: Verify that date are same as in JobPlanningLine. Verification done in 'AcceptPageHandler'.
    END;

    [Test]
    [HandlerFunctions(AvailableToPromisePageHandler)]
    PROCEDURE AvailableToPromiseOnPlanningLineWithSupply@11();
    BEGIN
      // Check that Dates on the Order Promising page for Available To Promise with greater Quantity on Job Planning Line than Purchase Order.

      Initialize;
      CreatePlanningLineWithExpectedDate(RANDOM(10) + 1000);  // Added here 1000 because Planning Line need greater Quantity than Purchase Line. Used Random value for Quantity.

      // 3. Verify: Verify that dates are same as in JobPlanningLine. Verification done in 'AvailableToPromisePageHandler'.
    END;

    [Test]
    [HandlerFunctions(AcceptPageHandler)]
    PROCEDURE AcceptOnPlanningLineWithSupply@18();
    BEGIN
      // Check that Dates on the Order Promising page for Accept with greater Quantity on Job Planning Line than Purchase Order.

      Initialize;
      CreatePlanningLineWithExpectedDate(RANDOM(10) + 1000);  // Added here 1000 because Planning Line need greater Quantity than Purchase Line. Used Random value for Quantity.

      // 3. Verify: Verify that dates are same as in JobPlanningLine. Verification done in 'AcceptPageHandler'.
    END;

    [Test]
    PROCEDURE OrderPlanningForJob@28();
    VAR
      Location@1002 : Record 14;
      JobPlanningLine@1006 : Record 1003;
      RequisitionLine@1001 : Record 246;
      LibraryPlanning@1000 : Codeunit 132203;
    BEGIN
      // Check Quantity on Order Planning Worksheet for Job after running Calculate Plan.

      // Setup: Create Job Planning Line with Item having Zero inventory.
      Initialize;
      CreateJobPlanningLine(JobPlanningLine);
      ModifyJobPlanningLine(JobPlanningLine,CreateItemWithVendorNo,RANDOM(10),WORKDATE,LibraryJob.FindLocation(Location));  // Taking random value for Quantity.

      // Exercise: Run Calculate Plan from Order Planning Worksheet.
      LibraryPlanning.CalculateOrderPlanJob(RequisitionLine);

      // Verify: Verify that Requisition Line has same quantity as on Job Planning Line.
      VerifyRequisitionLine(JobPlanningLine."Job No.");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MakeOrderForJobDemand@25();
    VAR
      Location@1003 : Record 14;
      RequisitionLine@1002 : Record 246;
      JobPlanningLine@1000 : Record 1003;
      LibraryPlanning@1001 : Codeunit 132203;
    BEGIN
      // Check Creation of Purchase Order after doing Make Order for Job Demand from Order Planning.

      // Setup: Create Job Planning Line with Item having Zero inventory. Run Calculate Plan from Order Planning Worksheet.
      Initialize;
      CreateJobPlanningLine(JobPlanningLine);
      ModifyJobPlanningLine(JobPlanningLine,CreateItemWithVendorNo,RANDOM(10),WORKDATE,LibraryJob.FindLocation(Location));  // Taking random value for Quantity.
      LibraryPlanning.CalculateOrderPlanJob(RequisitionLine);

      // Exercise: Make Order from Order Planning Worksheet.
      MakeSupplyOrdersActiveOrder(JobPlanningLine."Job No.");

      // Verify: Verify that Purchase Order has been created with same quantity as on Job Planning Line.
      VerifyPurchaseOrder(JobPlanningLine."Job No.");

      // Tear Down: Delete the earlier created Manufacturing User Template.
      DeleteManufacturingUserTemplate;
    END;

    LOCAL PROCEDURE CreateItemWithVendorNo@30() : Code[20];
    VAR
      Item@1000 : Record 27;
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithTrackingPolicy@87(OrderTrackingPolicy@1002 : Option) : Code[20];
    VAR
      Item@1001 : Record 27;
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@91(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1002 : Record 167;
      JobTask@1001 : Record 1001;
    BEGIN
      // Create Job, Job Task, Job Planning Line.
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,JobTask,JobPlanningLine);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@8(VAR PurchaseLine@1000 : Record 39;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,RANDOM(100) + 100,LocationCode,
        CALCDATE('<' + FORMAT(RANDOM(5)) + 'D>',WORKDATE));  // Used Random to calculate the Expected Receipt Date.
    END;

    LOCAL PROCEDURE CreatePlanningLineWithPurchaseOrder@24(VAR JobPlanningLine@1004 : Record 1003;LocationCode@1005 : Code[10];Quantity@1006 : Integer);
    VAR
      Item@1001 : Record 27;
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrder(PurchaseLine,Item."No.",LocationCode);
      CreateJobPlanningLine(JobPlanningLine);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Item);
      JobPlanningLine.VALIDATE("No.",PurchaseLine."No.");
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE("Planning Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));  // Used Random to calculate the Planning Date.
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePlanningLineWithExpectedDate@16(Quantity@1000 : Decimal);
    VAR
      JobPlanningLine@1005 : Record 1003;
      Location@1003 : Record 14;
    BEGIN
      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Location.FINDFIRST;
      CreatePlanningLineWithPurchaseOrder(JobPlanningLine,Location.Code,Quantity);
      ExpectedDate := JobPlanningLine."Planning Date";  // Assign in global variable.

      // 2. Exercise.
      JobPlanningLine.ShowOrderPromisingLine;
    END;

    LOCAL PROCEDURE DeleteManufacturingUserTemplate@64();
    VAR
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      ManufacturingUserTemplate.GET(USERID);
      ManufacturingUserTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindRequisitionLine@67(VAR RequisitionLine@1000 : Record 246;JobNo@1002 : Code[20];No@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",JobNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@31(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option);
    VAR
      LibraryPlanning@1003 : Codeunit 132203;
    BEGIN
      LibraryPlanning.CreateManufUserTemplate(
        ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned",
        ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrder@15(JobNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
      LibraryPlanning@1001 : Codeunit 132203;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",JobNo);
      RequisitionLine.FINDFIRST;
      GetManufacturingUserTemplate(ManufacturingUserTemplate,ManufacturingUserTemplate."Make Orders"::"The Active Order");
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE ModifyJobPlanningLine@26(VAR JobPlanningLine@1002 : Record 1003;ItemNo@1001 : Code[20];Quantity@1003 : Decimal;PlanningDate@1004 : Date;LocationCode@1000 : Code[10]);
    BEGIN
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE("Planning Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',PlanningDate));  // Used Random to calculate the Planning Date.
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.VALIDATE("No.",ItemNo);
      JobPlanningLine.VALIDATE(Quantity,Quantity * LibraryUtility.GenerateRandomFraction);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PurchaseOrderWithTracking@37(VAR PurchaseLine@1000 : Record 39;OrderTrackingPolicy@1003 : Option);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithTrackingPolicy(OrderTrackingPolicy),
        RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Use random for Quantity.
    END;

    LOCAL PROCEDURE OrderPromisingOnJobPlanningLine@46(VAR JobPlanningLine@1000 : Record 1003);
    BEGIN
      CreateJobPlanningLine(JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE("Planning Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));  // Used Random to calculate the Planning Date.
      JobPlanningLine.VALIDATE(Quantity,RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Used Random value for Quantity.
      JobPlanningLine.MODIFY(TRUE);
      ExpectedDate := JobPlanningLine."Planning Date";  // Assign in global variable
    END;

    LOCAL PROCEDURE Teardown@13();
    BEGIN
      ASSERTERROR ERROR(RollBack);
    END;

    LOCAL PROCEDURE VerifyDocumentNo@6(Name@1000 : Text[30];DocumentNo@1001 : Text[30]);
    BEGIN
      Assert.IsTrue(STRPOS(Name,DocumentNo) > 0,STRSUBSTNO(WrongDocumentError,Name,DocumentNo));
    END;

    LOCAL PROCEDURE VerifyPurchaseOrder@29(JobNo@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1001 : Record 39;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.FINDFIRST;
      Item.GET(JobPlanningLine."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",JobPlanningLine."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Buy-from Vendor No.",Item."Vendor No.");
      PurchaseLine.TESTFIELD("Location Code",JobPlanningLine."Location Code");
      PurchaseLine.TESTFIELD(Quantity,JobPlanningLine.Quantity);
      PurchaseLine.TESTFIELD("Expected Receipt Date",JobPlanningLine."Planning Date");
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@65(JobNo@1000 : Code[20]);
    VAR
      JobPlanningLine@1004 : Record 1003;
      RequisitionLine@1002 : Record 246;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.FINDFIRST;
      FindRequisitionLine(RequisitionLine,JobPlanningLine."Job No.",JobPlanningLine."No.",JobPlanningLine."Location Code");
      RequisitionLine.TESTFIELD("Due Date",JobPlanningLine."Planning Date");
      RequisitionLine.TESTFIELD(Quantity,JobPlanningLine.Quantity);
      RequisitionLine.TESTFIELD("Demand Quantity",JobPlanningLine.Quantity);
      RequisitionLine.TESTFIELD("Needed Quantity",JobPlanningLine.Quantity);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@76(Text@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE NoTrackingPage@9(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(JobPlanningLine2.Quantity);
      OrderTracking."Total Quantity".ASSERTEQUALS(JobPlanningLine2.Quantity);
    END;

    [ModalPageHandler]
    PROCEDURE PlanningLineTrackingPage@12(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(0);
      OrderTracking."Item No.".ASSERTEQUALS(JobPlanningLine2."No.");
      OrderTracking."Total Quantity".ASSERTEQUALS(JobPlanningLine2.Quantity);
      OrderTracking.Quantity.ASSERTEQUALS(-JobPlanningLine2.Quantity);
      VerifyDocumentNo(OrderTracking.Name.VALUE,PurchaseLine2."Document No.");
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseLineTrackingPage@142(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(PurchaseLine2.Quantity - JobPlanningLine2.Quantity);
      OrderTracking."Item No.".ASSERTEQUALS(JobPlanningLine2."No.");
      OrderTracking."Total Quantity".ASSERTEQUALS(PurchaseLine2.Quantity);
      OrderTracking.Quantity.ASSERTEQUALS(JobPlanningLine2.Quantity);
      VerifyDocumentNo(OrderTracking.Name.VALUE,JobPlanningLine2."Job No.");
    END;

    [ModalPageHandler]
    PROCEDURE AvailableToPromisePageHandler@40(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.AvailableToPromise.INVOKE;
      OrderPromisingLines."Requested Shipment Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CapableToPromisePageHandler@5(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.CapableToPromise.INVOKE;
      OrderPromisingLines."Original Shipment Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AcceptPageHandler@55(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines."Requested Shipment Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines.AcceptButton.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@71(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [Order Tracking] [Job]
      Test Order Tracking for Job Planning Lines:
       1. Test Order Tracking Entries from Job Planning Line with Item having Order Tracking Policy Tracking Only.
       2. Test Order Tracking Entries from Purchase Line with Item having Order Tracking Policy Tracking Only.
       3. Test Order Tracking Entries from Job Planning Line with Item having Order Tracking Policy None.
       4. Test Order Tracking Entries from Job Planning Line with Item having Order Tracking Policy Tracking Only with different Locations.
       5. Check that Dates have no effect on the Order Promising page.
       6. Check that Dates on Order Promising page.
       7. Check that Dates are same on the Order Promising page as in JobPlanningLine's Planning Date.
       8. Check that Dates have no effect on the Order Promising page for Available To Promise with lesser Quantity on Job Planning Line than Purchase Order.
       9. Check that Dates have no effect on the Order Promising page for Accept with lesser Quantity on Job Planning Line than Purchase Order.
       10. Check that Dates on the Order Promising page for Available To Promise with greater Quantity on Job Planning Line than Purchase Order.
       11. Check that Dates on the Order Promising page for Accept with greater Quantity on Job Planning Line than Purchase Order.
       12. Test for Make Order for Job Demand from Order Planning.
       13. Test for showing demand for Job in Order Planning.

      TFS_TS_ID = 235358
      Cover Test cases:
      --------------------------------------------------
      Test Function Name                          TFS ID
      --------------------------------------------------
      PlanningLineTracking, PurchaseLineTracking   176516
      PlanningLineTrackingWithNone                 176524
      PlanningLineTrackingLocation                 176526

      TFS_TS_ID = 235358
      Cover Test cases:
      -----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      -----------------------------------------------------------------------------------------------------------
      AvailableToPromiseOnJobPlanningLine, CapableToPromiseOnJobPlanningLine, AcceptOnJobPlanningLine     176842
      AvailableToPromiseOnPlanningLineWithPurchaseOrder, AcceptOnPlanningLineWithPurchaseOrder            176859
      AvailableToPromiseOnPlanningLineWithSupply, AcceptOnPlanningLineWithSupply                          176864

      TFS_TS_ID = 277822
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ----------------------------------------------------------------------------------------------------------
      OrderPlanningForJob,MakeOrderForJobDemand                                                        176538,176546
    }
    END.
  }
}

