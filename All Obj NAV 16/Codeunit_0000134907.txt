OBJECT Codeunit 134907 ERM Invoice and Reminder
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1005 : Codeunit 130509;
      LibraryERM@1001 : Codeunit 131300;
      LibraryInventory@1007 : Codeunit 132201;
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1003 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      ReminderLineErr@1004 : TextConst '@@@={Locked};ENU=The %1 on the %2 and the %3 must be the same.';
      AmountErr@1006 : TextConst '@@@={Locked};ENU=Amount must be %1 in %2.';

    [Test]
    PROCEDURE CreateInvoiceAndModifyReminder@8();
    VAR
      ReminderHeader@1005 : Record 295;
      SalesLine@1000 : Record 37;
      CustLedgerEntry@1007 : Record 21;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Check Reminder Line Error after Post Sales Invoice and Modify Reminder Header.

      // Setup: Create Sales Invoice, Reminder Header and Modify it with New Currency.
      Initialize;
      DocumentNo := CreateAndPostSalesInvoice(SalesLine);
      CreateReminderHeader(ReminderHeader,SalesLine."Sell-to Customer No.");
      ModifyReminderHeader(ReminderHeader);

      // Exercise: Create Reminder Line After Modify Reminder Header.
      ASSERTERROR CreateReminderLine(ReminderHeader."No.",DocumentNo);

      // Verify: Check Reminder Line Currency Error.
      Assert.AreEqual(
        STRSUBSTNO(ReminderLineErr,ReminderHeader.FIELDCAPTION("Currency Code"),
          ReminderHeader.TABLECAPTION,CustLedgerEntry.TABLECAPTION),GETLASTERRORTEXT,'Error must be same.');
    END;

    [Test]
    PROCEDURE CreateInvoiceAndReminder@17();
    VAR
      Currency@1009 : Record 4;
      ReminderHeader@1005 : Record 295;
      ReminderLine@1001 : Record 296;
      SalesLine@1000 : Record 37;
      SalesInvoiceHeader@1010 : Record 112;
      RemainingAmount@1008 : Decimal;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Reminder Line Remaining Amount after Post Sales Invoice.

      // Setup: Create Sales Invoice, Reminder Header and Line.
      Initialize;
      DocumentNo := CreateAndPostSalesInvoice(SalesLine);

      // Exercise: Create Reminder Header and Line.
      CreateReminderHeader(ReminderHeader,SalesLine."Sell-to Customer No.");
      RemainingAmount := CreateReminderLine(ReminderHeader."No.",DocumentNo);

      // Verify: Check Remaining Amount on Reminder Line after Posting Sales Invoice.
      Currency.GET(ReminderHeader."Currency Code");
      SalesInvoiceHeader.GET(DocumentNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      Assert.AreNearlyEqual(
        SalesInvoiceHeader."Amount Including VAT",RemainingAmount,Currency."Appln. Rounding Precision",
        STRSUBSTNO(AmountErr,SalesInvoiceHeader."Amount Including VAT",
          ReminderLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SuggestReminderLinesOutOfGracePeriodOverduesOnlyTrue@1();
    VAR
      Customer@1006 : Record 18;
      ReminderLine@1000 : Record 296;
      ReminderHeader@1001 : Record 295;
      WeekDateFormula@1002 : DateFormula;
      InvoiceDocNo@1009 : ARRAY [2] OF Code[20];
      ReminderPostingDate@1014 : ARRAY [2] OF Date;
    BEGIN
      // [FEATURE] [Payment Terms]
      Initialize;

      // [GIVEN] Reminder Terms "RT" with 3 levels where summary of "Due Date Calculation" = 3W
      // [GIVEN] Level[1] with "Grace Period" = 1W,"Due Date Calculation" = 1W
      // [GIVEN] Level[2] with "Grace Period" = <blank>,"Due Date Calculation" = 1W
      // [GIVEN] Level[3] with "Grace Period" = <blank>,"Due Date Calculation" = 1W
      // [GIVEN] Payment Terms "PT" where "Due Date Calculation" = 1W
      // [GIVEN] Customer "C" where "Payment Terms Code" = "PT" and "Reminder Terms Code" = "RT"
      EVALUATE(WeekDateFormula,'<1W>');
      ReminderPostingDate[1] := CALCDATE('<3W+1D>',WORKDATE);
      ReminderPostingDate[2] := CALCDATE('<1W+1D>',ReminderPostingDate[1]);
      CreateCustomerWithPaymentAndReminderTerms(Customer,WeekDateFormula);

      // [GIVEN] Posted invoice "I[1]" for customer "C" where "Posting Date" = 01/01/17
      InvoiceDocNo[1] := PostSalesInvoice(Customer."No.",WORKDATE);

      // [GIVEN] Issued reminder for invoice "I[1]" where "Posting Date" = 22/01/17 (>3W from "I[1]"."Posting Date")
      RunSuggestReminderLines(Customer,FALSE,ReminderPostingDate[1]);
      VerifyReminderLineTypeForDocument(ReminderLine,InvoiceDocNo[1],ReminderLine."Line Type"::"Reminder Line");

      ReminderHeader.SETRANGE("No.",ReminderLine."Reminder No.");
      REPORT.RUNMODAL(REPORT::"Issue Reminders",FALSE,TRUE,ReminderHeader);

      // [GIVEN] Posted invoice "I[2]" for customer "C" where "Posting Date" = 06/01/17 (>"I[1]"."Posting Date" and <"I[1]"."Postsing Date" + 1W)
      InvoiceDocNo[2] := PostSalesInvoice(Customer."No.",CALCDATE(WeekDateFormula,WORKDATE) - 1);

      // [GIVEN] Reminder for customer "C" with "Posting Date" = 01/02/2017 (>3W from "I[2]"."Posting Date")
      // [WHEN] Run report "Suggest Reminder Lines" where "Overdues Only" = TRUE
      RunSuggestReminderLines(Customer,TRUE,ReminderPostingDate[2]);

      // [THEN] Reminder lines for both invoices created with "Line Type" = "Reminder Line"
      VerifyReminderLineTypeForDocument(ReminderLine,InvoiceDocNo[1],ReminderLine."Line Type"::"Reminder Line");
      VerifyReminderLineTypeForDocument(ReminderLine,InvoiceDocNo[2],ReminderLine."Line Type"::"Reminder Line");
    END;

    [Test]
    PROCEDURE SuggestReminderLinesOutOfGracePeriodOverduesOnlyFalse@46();
    VAR
      Customer@1006 : Record 18;
      ReminderLine@1000 : Record 296;
      ReminderHeader@1001 : Record 295;
      WeekDateFormula@1002 : DateFormula;
      InvoiceDocNo@1009 : ARRAY [2] OF Code[20];
      ReminderPostingDate@1014 : ARRAY [2] OF Date;
    BEGIN
      // [FEATURE] [Payment Terms]
      Initialize;

      // [GIVEN] Reminder Terms "RT" with 3 levels where summary of "Due Date Calculation" = 3W
      // [GIVEN] Level[1] with "Grace Period" = 1W,"Due Date Calculation" = 1W
      // [GIVEN] Level[2] with "Grace Period" = <blank>,"Due Date Calculation" = 1W
      // [GIVEN] Level[3] with "Grace Period" = <blank>,"Due Date Calculation" = 1W
      // [GIVEN] Payment Terms "PT" where "Due Date Calculation" = 1W
      // [GIVEN] Customer "C" where "Payment Terms Code" = "PT" and "Reminder Terms Code" = "RT"
      EVALUATE(WeekDateFormula,'<1W>');
      ReminderPostingDate[1] := CALCDATE('<3W+1D>',WORKDATE);
      ReminderPostingDate[2] := CALCDATE('<1W+1D>',ReminderPostingDate[1]);
      CreateCustomerWithPaymentAndReminderTerms(Customer,WeekDateFormula);

      // [GIVEN] Posted invoice "I[1]" for customer "C" where "Posting Date" = 01/01/17
      InvoiceDocNo[1] := PostSalesInvoice(Customer."No.",WORKDATE);

      // [GIVEN] Issued reminder for invoice "I[1]" where "Posting Date" = 22/01/17 (>3W from "I[1]"."Posting Date")
      RunSuggestReminderLines(Customer,FALSE,ReminderPostingDate[1]);
      VerifyReminderLineTypeForDocument(ReminderLine,InvoiceDocNo[1],ReminderLine."Line Type"::"Reminder Line");

      ReminderHeader.SETRANGE("No.",ReminderLine."Reminder No.");
      REPORT.RUNMODAL(REPORT::"Issue Reminders",FALSE,TRUE,ReminderHeader);

      // [GIVEN] Posted invoice "I[2]" for customer "C" where "Posting Date" = 06/01/17 (>"I[1]"."Posting Date" and <"I[1]"."Postsing Date" + 1W)
      InvoiceDocNo[2] := PostSalesInvoice(Customer."No.",CALCDATE(WeekDateFormula,WORKDATE) - 1);

      // [GIVEN] Reminder for customer "C" with "Posting Date" = 01/02/2017 (>3W from "I[2]"."Posting Date")
      // [WHEN] Run report "Suggest Reminder Lines" where "Overdues Only" = FALSE
      RunSuggestReminderLines(Customer,FALSE,ReminderPostingDate[2]);

      // [THEN] Reminder lines for both invoices created with "Line Type" = "Reminder Line"
      VerifyReminderLineTypeForDocument(ReminderLine,InvoiceDocNo[1],ReminderLine."Line Type"::"Reminder Line");
      VerifyReminderLineTypeForDocument(ReminderLine,InvoiceDocNo[2],ReminderLine."Line Type"::"Reminder Line");
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@10(VAR SalesLine@1001 : Record 37) DocumentNo : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      Item@1002 : Record 27;
    BEGIN
      // Take Random Quantity for Sales Line.
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2));
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@25() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateCustomer@2() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CreateCurrency);
      Customer.VALIDATE("Reminder Terms Code",CreateReminderTerms);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentAndReminderTerms@31(VAR Customer@1000 : Record 18;WeekDateFormula@1004 : DateFormula);
    VAR
      ReminderTerms@1002 : Record 292;
      PaymentTerms@1003 : Record 3;
      BlankDateFormula@1005 : DateFormula;
      FeeAmount@1001 : Decimal;
    BEGIN
      FeeAmount := LibraryRandom.RandDecInRange(5,10,2);

      LibraryERM.CreateReminderTerms(ReminderTerms);
      CreateReminderLevelDueDateCalculation(ReminderTerms.Code,WeekDateFormula,WeekDateFormula,FeeAmount);
      CreateReminderLevelDueDateCalculation(ReminderTerms.Code,BlankDateFormula,WeekDateFormula,FeeAmount * 2);
      CreateReminderLevelDueDateCalculation(ReminderTerms.Code,BlankDateFormula,WeekDateFormula,FeeAmount * 3);

      LibraryERM.CreatePaymentTerms(PaymentTerms);
      PaymentTerms.VALIDATE("Due Date Calculation",WeekDateFormula);
      PaymentTerms.MODIFY(TRUE);

      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.VALIDATE("Reminder Terms Code",ReminderTerms.Code);
      Customer.MODIFY(TRUE);

      Customer.SETRECFILTER;
    END;

    LOCAL PROCEDURE CreateReminderTerms@3() : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      CreateReminderLevel(ReminderTerms.Code);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateReminderLevel@4(ReminderTermsCode@1003 : Code[10]);
    VAR
      ReminderLevel@1000 : Record 293;
    BEGIN
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderLevelDueDateCalculation@20(ReminderTermsCode@1001 : Code[10];GraceFormula@1002 : DateFormula;DueFormula@1003 : DateFormula;FeeAmount@1004 : Decimal);
    VAR
      ReminderLevel@1000 : Record 293;
    BEGIN
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      ReminderLevel.VALIDATE("Grace Period",GraceFormula);
      ReminderLevel.VALIDATE("Due Date Calculation",DueFormula);
      ReminderLevel.VALIDATE("Additional Fee (LCY)",FeeAmount);
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderHeader@14(VAR ReminderHeader@1000 : Record 295;CustomerNo@1001 : Code[20]);
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustomerNo);
      ReminderHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderLine@19(ReminderHeaderNo@1001 : Code[20];DocumentNo@1003 : Code[20]) : Decimal;
    VAR
      ReminderLine@1004 : Record 296;
    BEGIN
      LibraryERM.CreateReminderLine(ReminderLine,ReminderHeaderNo,ReminderLine.Type::"Customer Ledger Entry");
      ReminderLine.VALIDATE("Document No.",DocumentNo);
      ReminderLine.MODIFY(TRUE);
      EXIT(ReminderLine."Remaining Amount");
    END;

    LOCAL PROCEDURE ModifyReminderHeader@15(VAR ReminderHeader@1000 : Record 295);
    BEGIN
      ReminderHeader.VALIDATE("Currency Code",CreateCurrency);
      ReminderHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostSalesInvoice@27(CustomerNo@1000 : Code[20];PostingDate@1001 : Date) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandIntInRange(100,200));
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE));
    END;

    LOCAL PROCEDURE RunSuggestReminderLines@12(VAR Customer@1000 : Record 18;OverdueEntriesOnly@1001 : Boolean;ReminderPostingDate@1003 : Date);
    VAR
      CreateReminders@1004 : Report 188;
    BEGIN
      CreateReminders.SETTABLEVIEW(Customer);
      CreateReminders.InitializeRequest(ReminderPostingDate,ReminderPostingDate,OverdueEntriesOnly,FALSE,FALSE);
      CreateReminders.USEREQUESTPAGE(FALSE);
      CreateReminders.RUN;
    END;

    LOCAL PROCEDURE VerifyReminderLineTypeForDocument@29(VAR ReminderLine@1002 : Record 296;DocumentNo@1000 : Code[20];ExpectedReminderLineType@1001 : Option);
    BEGIN
      ReminderLine.SETRANGE("Document No.",DocumentNo);
      ReminderLine.FINDFIRST;
      ReminderLine.TESTFIELD("Line Type",ExpectedReminderLineType);
    END;

    BEGIN
    {
      // [FEATURE] [Reminder] [Sales]
      Unsupported version tags:
      NA: Unable to Execute

      Test Reminder Functionalities on Sales Invoice.
       1. Create Sales Invoice with Reminder Header and Line and Check Reminder Line Error after Modifying Header.
       2. Create Sales Invoice with Reminder Header and Line and Check Reminder Line Amount.

        Covers Test Cases
        ---------------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------------
        CreateInvoiceAndModifyReminder        125672,125673
        CreateInvoiceAndReminder              125673,125674
    }
    END.
  }
}

