OBJECT Codeunit 134087 ERM Update Currency - Sales
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryInventory@1011 : Codeunit 132201;
      LibraryERM@1002 : Codeunit 131300;
      LibrarySales@1006 : Codeunit 130509;
      LibraryResource@1007 : Codeunit 130511;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      AmountError@1005 : TextConst 'ENU="%1 must be %2 in \\%3 %4=%5."';
      UnitPriceError@1008 : TextConst 'ENU=%1 must be %2 in %3.';
      ExpectedMessage@1009 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      IncorrectValueErr@1010 : TextConst 'ENU=Incorrect value %1 for field %2.';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateLocalPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ModifyPostingDateOnInvoice@12();
    VAR
      SalesHeader@1000 : Record 36;
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // Check after changing Posting Date, Application generates an error if Exchange Rate does not exist.

      // 1. Setup: Create Sales Invoice and new Currency with Exchange Rate.
      Initialize;
      CreateSalesDocument(SalesHeader,CurrencyExchangeRate,SalesHeader."Document Type"::Invoice);

      // 2. Exercise: Modify Posting Date with a date lesser that Existing Starting Date of Exchange Rate.
      SalesHeader.SetHideValidationDialog(TRUE);
      ASSERTERROR SalesHeader.VALIDATE("Posting Date",
          CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',CurrencyExchangeRate."Starting Date"));

      // 3. Verify: Error occurs while changing Posting Date.
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE ModifyAmountOnInvoice@19();
    VAR
      SalesHeader@1003 : Record 36;
      CurrencyExchangeRate@1002 : Record 330;
      NewStartingDate@1000 : Date;
    BEGIN
      // Check after changing Posting Date, Unit Price and Line Amount of Sales Line get updated as per new Exchange Rate.

      // 1. Setup: Create Sales Invoice and new Currency with Exchange Rate.
      Initialize;
      CreateSalesDocument(SalesHeader,CurrencyExchangeRate,SalesHeader."Document Type"::Invoice);

      // 2. Exercise: Create new Exchange Rate for Currency with different Starting Date.
      NewStartingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',CurrencyExchangeRate."Starting Date");
      CreateExchangeRate(CurrencyExchangeRate,CurrencyExchangeRate."Currency Code",NewStartingDate);
      UpdatePostingDateSalesHeader(SalesHeader,NewStartingDate);
      UpdateSalesLines(SalesHeader."Document Type",SalesHeader."No.");

      // 3. Verify: Verify Sales Line Unit Price and Line Amount updated as per new Exchange Rate.
      VerifySalesDocumentValues(
        SalesHeader,CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    PROCEDURE ModifyCurrencyCreditMemoHeader@5();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Credit Memo, Currency Factor get updated.
      ChangeCurrencyOnHeader(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE ModifyCurrencyInvoiceHeader@9();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Invoice, Currency Factor get updated.
      ChangeCurrencyOnHeader(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE ModifyCurrencyOrderHeader@18();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Order, Currency Factor get updated.
      ChangeCurrencyOnHeader(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE ModifyCurrencyQuoteHeader@23();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Quote, Currency Factor get updated.
      ChangeCurrencyOnHeader(SalesHeader."Document Type"::Quote);
    END;

    LOCAL PROCEDURE ChangeCurrencyOnHeader@33(DocumentType@1002 : Option);
    VAR
      SalesHeader@1001 : Record 36;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // 1. Setup: Create Sales Document and new Currency with Exchange rate.
      Initialize;
      CreateSalesHeaderWithCurrency(SalesHeader,CurrencyExchangeRate,DocumentType);

      // 2. Exercise: Create new Currency with Exchange rate and update Sales Header.
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      UpdateCurrencyOnSalesHeader(SalesHeader,CurrencyExchangeRate."Currency Code");

      // 3. Verify: Verify Sales Header Currency Factor get updated as per new Currency.
      SalesHeader.TESTFIELD("Currency Factor",CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyCurrencyCreditMemo@35();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Credit Memo, Unit Price and Line Amount of Sales Line get updated as per
      // new Currency.
      ChangeCurrencyOnDocument(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyCurrencyInvoice@11();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Invoice, Unit Price and Line Amount of Sales Line get updated as
      // per new Currency.
      ChangeCurrencyOnDocument(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyCurrencyOrder@15();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Order, Unit Price and Line Amount of Sales Line get updated as
      // per new Currency.
      ChangeCurrencyOnDocument(SalesHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyCurrencyQuote@25();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check after changing Currency in Sales Quote, Unit Price and Line Amount of Sales Line get updated as
      // per new Currency.
      ChangeCurrencyOnDocument(SalesHeader."Document Type"::Quote);
    END;

    LOCAL PROCEDURE ChangeCurrencyOnDocument@21(DocumentType@1002 : Option);
    VAR
      SalesHeader@1001 : Record 36;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // 1. Setup: Create Sales Document and new Currency with Exchange rate.
      Initialize;
      CreateSalesDocument(SalesHeader,CurrencyExchangeRate,DocumentType);

      // 2. Exercise: Create new Currency with Exchange rate and update Sales Header and Line.
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      UpdateCurrencyOnSalesHeader(SalesHeader,CurrencyExchangeRate."Currency Code");
      UpdateSalesLines(SalesHeader."Document Type",SalesHeader."No.");

      // 3. Verify: Verify Sales Line Unit Price and Line Amount updated as per Currency.
      VerifySalesDocumentValues(
        SalesHeader,CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyCustWithCurrencyOnOrder@49();
    VAR
      CurrencyExchangeRate@1005 : Record 330;
      SalesHeader@1004 : Record 36;
    BEGIN
      Initialize;

      CreateOrderWithLCY(SalesHeader);
      ValidateCustWithFCYOnOrder(CurrencyExchangeRate,SalesHeader);

      SalesHeader.TESTFIELD("Currency Factor",CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    PROCEDURE FlowCurrencyOnCreditMemo@24();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check Sales Credit Memo get updated with Customer Currency Code.
      CheckCurrencyOnHeader(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE FlowCurrencyOnInvoice@39();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check Sales Invoice get updated with Customer Currency Code.
      CheckCurrencyOnHeader(SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE FlowCurrencyOnOrder@40();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check Sales Order get updated with Customer Currency Code.
      CheckCurrencyOnHeader(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE FlowCurrencyOnQuote@41();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check Sales Quote get updated with Customer Currency Code.
      CheckCurrencyOnHeader(SalesHeader."Document Type"::Quote);
    END;

    LOCAL PROCEDURE CheckCurrencyOnHeader@26(DocumentType@1000 : Option);
    VAR
      CurrencyExchangeRate@1005 : Record 330;
      SalesHeader@1004 : Record 36;
    BEGIN
      // 1. Setup:
      Initialize;

      // 2. Exercise: Create new Currency, Customer, Sales Document and update with Currency.
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomerWithCurrency(CurrencyExchangeRate));

      // 3. Verify: Verify Sales Document Currency Code match with Customer Currency Code.
      SalesHeader.TESTFIELD("Currency Code",CurrencyExchangeRate."Currency Code");
    END;

    [Test]
    PROCEDURE CheckCurrencyOnCustomer@28();
    VAR
      Customer@1001 : Record 18;
      CurrencyExchangeRate@1004 : Record 330;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Check Customer get updated with Currency Code.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create new Currency and update Customer.
      CustomerNo := CreateCustomerWithCurrency(CurrencyExchangeRate);

      // 3. Verify: Verify Customer updated with new Currency Code.
      Customer.GET(CustomerNo);
      Customer.TESTFIELD("Currency Code",CurrencyExchangeRate."Currency Code");
    END;

    [Test]
    PROCEDURE AmountWithRelationalCurrency@36();
    VAR
      CurrencyExchangeRate@1000 : Record 330;
      CurrencyExchangeRate2@1002 : Record 330;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Check General Journal Line Amount(LCY) get updated with Base Currency Exchange Rate and Relational Currency Exchange Rate.

      // 1. Setup: Create Currency with Exchange rate, Create another Currency with two Exchange rates and assign first Currency as
      // Relational Currency.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate2);
      ModifyCurrency(CurrencyExchangeRate,CurrencyExchangeRate2);

      // 2. Exercise: Create General Journal Line with Customer and second Currency.
      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate2."Currency Code",CreateCustomer(''),
        LibraryRandom.RandDec(100,2),GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer);

      // 3. Verify: Verify Amount(LCY) updated as per Currency Exchange Rate.
      VerifyGenJournalAmount(
        GenJournalLine,CurrencyExchangeRate2,
        LibraryERM.ConvertCurrency(GenJournalLine.Amount,CurrencyExchangeRate."Currency Code",'',CurrencyExchangeRate."Starting Date"),
        CurrencyExchangeRate."Starting Date");
    END;

    [Test]
    PROCEDURE AmountExceptRelationalCurrency@34();
    VAR
      CurrencyExchangeRate@1000 : Record 330;
      CurrencyExchangeRate2@1002 : Record 330;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Check General Journal Line Amount(LCY) get updated with Base Currency Exchange Rate.

      // 1. Setup: Create Currency with Exchange rate, Create another Currency with two Exchange rates and assign first Currency as
      // Relational Currency.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate2);
      ModifyCurrency(CurrencyExchangeRate,CurrencyExchangeRate2);

      // 2. Exercise: Create General Journal Line with Customer and second Currency.
      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate2."Starting Date",CurrencyExchangeRate2."Currency Code",CreateCustomer(''),
        LibraryRandom.RandDec(100,2),GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer);

      // 3. Verify: Verify Amount(LCY) updated as per Currency Exchange Rate.
      VerifyGenJournalAmount(GenJournalLine,CurrencyExchangeRate2,GenJournalLine.Amount,CurrencyExchangeRate2."Starting Date");
    END;

    [Test]
    PROCEDURE CreateAndPostInvoice@37();
    VAR
      CurrencyExchangeRate@1000 : Record 330;
      SalesHeader@1001 : Record 36;
      CustomerNo@1003 : Code[20];
      PostedSaleInvoiceNo@1005 : Code[20];
    BEGIN
      // Check Currency Code and Currency Factor posted properly in Posted Sales Invoice.

      // 1. Setup: Create Customer and Currency with Exchange rate.
      Initialize;
      CustomerNo := CreateCustomerWithCurrency(CurrencyExchangeRate);

      // 2. Exercise: Create Sales Invoice and Post.
      PostedSaleInvoiceNo := CreateAndPostSalesInvoice(SalesHeader,CustomerNo);

      // 3. Verify: Verify Currency flow on Posted Sales Invoice.
      VerifySalesInvoiceCurrency(PostedSaleInvoiceNo,CurrencyExchangeRate);
    END;

    [Test]
    [HandlerFunctions(ApplyEntryPageHandler)]
    PROCEDURE PostJournalLineWithInvoice@43();
    VAR
      SalesHeader@1001 : Record 36;
      CurrencyExchangeRate@1000 : Record 330;
      GenJournalLine@1006 : Record 81;
      PostedSaleInvoiceNo@1002 : Code[20];
    BEGIN
      // Check Amount posted correctly as per Currency Exchange Rate from Invoice to GL Entry.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Customer, Currency, Sales Invoice, Post and Apply.
      PostedSaleInvoiceNo := CreateAndPostSalesInvoice(SalesHeader,CreateCustomerWithCurrency(CurrencyExchangeRate));
      // Passing Amount Zero as it will update after Apply Entry.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",SalesHeader."Sell-to Customer No.",0,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer);
      ApplyInvoice(GenJournalLine,PostedSaleInvoiceNo,SalesHeader."Document Type"::Invoice);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Amount Posted correctly on GL Entry.
      VerifyGLEntry(
        CurrencyExchangeRate,GenJournalLine."Document No.",LibraryERM.ConvertCurrency(
          GenJournalLine.Amount,CurrencyExchangeRate."Currency Code",'',CurrencyExchangeRate."Starting Date"));
    END;

    [Test]
    PROCEDURE CreateAndCheckCurrency@64();
    VAR
      Currency@1002 : Record 4;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Create New Currency with Exchange rate.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create new Currency with Exchange rate.
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);

      // 3. Verify: Verify that correct Currency created.
      Currency.GET(CurrencyExchangeRate."Currency Code");
    END;

    [Test]
    PROCEDURE CreateAndCheckCustomerCurrency@63();
    VAR
      Customer@1003 : Record 18;
      Currency@1001 : Record 4;
      CurrencyExchangeRate@1000 : Record 330;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Create New Currency with Exchange rate and Customer.

      // 1. Setup:
      Initialize;

      // 2. Exercise:  Create Customer and Currency with Exchange rate.
      CustomerNo := CreateCustomerWithCurrency(CurrencyExchangeRate);

      // 3. Verify: Verify that correct Currency and Customer created.
      Currency.GET(CurrencyExchangeRate."Currency Code");
      Customer.GET(CustomerNo);
      Customer.TESTFIELD("Currency Code",CurrencyExchangeRate."Currency Code");
    END;

    [Test]
    [HandlerFunctions(CreditMemoConfirmHandler)]
    PROCEDURE PostCreditMemoWithCurrency@48();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Check after Posting Sales Credit Memo, Currency flow in Customer Ledger Entry.
      Initialize;
      DocumentNo := PostDocumentWithCurrency(SalesHeader,SalesHeader."Document Type"::"Credit Memo",FALSE,TRUE);

      // 3. Verify: Verify Currency flow in Customer Ledger Entry.
      VerifyCustomerLedgerEntry(DocumentNo,SalesHeader."Currency Code");
    END;

    [Test]
    [HandlerFunctions(CreditMemoConfirmHandler)]
    PROCEDURE PostInvoiceWithCurrency@47();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Check after Posting Sales Invoice, Currency flow in Customer Ledger Entry.
      Initialize;
      DocumentNo := PostDocumentWithCurrency(SalesHeader,SalesHeader."Document Type"::Invoice,FALSE,TRUE);

      // 3. Verify: Verify Currency flow in Customer Ledger Entry.
      VerifyCustomerLedgerEntry(DocumentNo,SalesHeader."Currency Code");
    END;

    [Test]
    [HandlerFunctions(CreditMemoConfirmHandler)]
    PROCEDURE PostOrderWithCurrency@46();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Check after Posting Sales Order, Currency flow in Customer Ledger Entry.
      Initialize;
      DocumentNo := PostDocumentWithCurrency(SalesHeader,SalesHeader."Document Type"::Order,TRUE,TRUE);

      // 3. Verify: Verify Currency flow in Customer Ledger Entry.
      VerifyCustomerLedgerEntry(DocumentNo,SalesHeader."Currency Code");
    END;

    LOCAL PROCEDURE PostDocumentWithCurrency@65(VAR SalesHeader@1000 : Record 36;DocumentType@1002 : Option;Ship@1003 : Boolean;Invoice@1004 : Boolean) DocumentNo : Code[20];
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // 1. Setup: Create Sales Document and new Currency with Exchange rate.
      CreateSalesDocument(SalesHeader,CurrencyExchangeRate,DocumentType);

      // 2. Exercise: Post Sales Credit Memo.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);
      ExecuteUIHandler;
    END;

    [Test]
    PROCEDURE AdjustExchangeRateOrder@56();
    VAR
      SalesHeader@1000 : Record 36;
      CurrencyExchangeRate@1001 : Record 330;
      OldRelationalExchangeRate@1002 : Decimal;
    BEGIN
      // Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry created
      // with Correct Amount in Sales Order.
      Initialize;
      OldRelationalExchangeRate := AdjustExchangeRateDocument(SalesHeader,CurrencyExchangeRate,SalesHeader."Document Type"::Order);

      // 3. Verify: Verify G/L Entry made for correct Amount after running Adjust Exchange Rate Batch Job.
      VerifyGLEntryForOrder(CurrencyExchangeRate,SalesHeader."No.",OldRelationalExchangeRate);
    END;

    [Test]
    PROCEDURE AdjustExchangeRateInvoice@53();
    VAR
      SalesHeader@1000 : Record 36;
      CurrencyExchangeRate@1002 : Record 330;
      OldRelationalExchangeRate@1001 : Decimal;
    BEGIN
      // Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry created
      // with Correct Amount in Sales Invoice.
      Initialize;
      OldRelationalExchangeRate := AdjustExchangeRateDocument(SalesHeader,CurrencyExchangeRate,SalesHeader."Document Type"::Invoice);

      // 3. Verify: Verify G/L Entry made for correct Amount after running Adjust Exchange Rate Batch Job.
      VerifyGLEntryForInvoice(CurrencyExchangeRate,SalesHeader."No.",OldRelationalExchangeRate);
    END;

    LOCAL PROCEDURE AdjustExchangeRateDocument@60(VAR SalesHeader@1000 : Record 36;VAR CurrencyExchangeRate@1001 : Record 330;DocumentType@1004 : Option) OldRelationalExchangeRate : Decimal;
    BEGIN
      // 1. Setup: Create and Post Sales Document with new Currency and Exchange rate.
      CreateSalesDocument(SalesHeader,CurrencyExchangeRate,DocumentType);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      OldRelationalExchangeRate := CurrencyExchangeRate."Relational Exch. Rate Amount";
      UpdateExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run Adjust Exchange Rate batch job.
      RunAdjustExchangeRates(CurrencyExchangeRate,SalesHeader."No.");
    END;

    [Test]
    PROCEDURE EntriesAfterAdjustExchangeRate@59();
    VAR
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1000 : Record 330;
      CustomerNo@1001 : Code[20];
    BEGIN
      // Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry and
      // Detailed Customer Ledger Entry created with Correct Amount.

      // 1. Setup: Create and Post General Journal Line for Customer.
      Initialize;
      CustomerNo := CreateCustomerWithCurrency(CurrencyExchangeRate);
      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",CustomerNo,
        LibraryRandom.RandDec(100,2),GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run Adjust Exchange Rate batch job.
      RunAdjustExchangeRates(CurrencyExchangeRate,GenJournalLine."Document No.");

      // 3. Verify: Verify G/L Entry and Detailed Customer Ledger Entry made for correct Amount after running
      // Adjust Exchange Rate Batch Job.
      VerifyGLEntryAdjustExchange(GenJournalLine,CurrencyExchangeRate,GenJournalLine."Document No.");
      VerifyDetailedCustomerLedger(GenJournalLine,CurrencyExchangeRate,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE LossEntryAdjustExchangeRate@75();
    VAR
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check that after Modify lower Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
      // GL Entry updated with Correct Amount for Customer.

      // 1. Setup: Create and Post General Journal Line for Customer and Update Exchange rate.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);

      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",CreateCustomer(''),
        LibraryRandom.RandDec(100,2),GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateLowerExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run Adjust Exchange Rate batch job.
      RunAdjustExchangeRates(CurrencyExchangeRate,GenJournalLine."Document No.");

      // 3. Verify: Verify G/L Entry made for correct Amount after running Adjust Exchange Rate Batch Job.
      VerifyGLEntryLowerExchangeRate(GenJournalLine,CurrencyExchangeRate);
    END;

    [Test]
    [HandlerFunctions(ApplyEntryPageHandler)]
    PROCEDURE PaymentAfterAdjustExchange@73();
    VAR
      GenJournalLine@1002 : Record 81;
      GenJournalLine2@1003 : Record 81;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check that after Modify lower Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
      // GL Entry updated with Correct Amount for Customer with payment.

      // 1. Setup: Create and Post General Journal Line for Customer, Update Exchange Rate and run adjust exchange batch job.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);

      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",CreateCustomer(''),
        LibraryRandom.RandDec(100,2),GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateLowerExchangeRate(CurrencyExchangeRate);
      RunAdjustExchangeRates(CurrencyExchangeRate,GenJournalLine."Document No.");

      // 2. Exercise: Make payment and apply invoice.
      // Passing Amount as 0 because it will update after apply.
      CreateGeneralJournalLine(
        GenJournalLine2,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",GenJournalLine."Account No.",0,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer);
      ApplyInvoice(GenJournalLine2,GenJournalLine."Document No.",GenJournalLine2."Document Type"::Invoice);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);

      // 3. Verify: Verify Payment applies properly to the invoice.
      VerifyRemaningAmount(GenJournalLine."Account No.");
    END;

    [Test]
    PROCEDURE LossAdjustExchangeRateForBank@72();
    VAR
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check that after Modify Lower Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
      // GL Entry updated with Correct Amount for Bank.

      // 1. Setup: Create and Post General Journal Line for Bank Account and Update Lower Exchange rate.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);

      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",
        CreateBankWithCurrency(CurrencyExchangeRate."Currency Code"),LibraryRandom.RandDec(100,2),
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"Bank Account");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateLowerExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run Adjust Exchange Rate batch job.
      RunAdjustExchangeRates(CurrencyExchangeRate,GenJournalLine."Document No.");

      // 3. Verify: Verify G/L Entry made for correct Amount after running Adjust Exchange Rate Batch Job.
      VerifyGLEntryLowerExchangeRate(GenJournalLine,CurrencyExchangeRate);
    END;

    [Test]
    PROCEDURE AdjustExchangeRateForBank@81();
    VAR
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check that after Modify Upper Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
      // GL Entry updated with Correct Amount for Bank.

      // 1. Setup: Create and Post General Journal Line for Bank Account and Update Upper Exchange rate.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);

      // Required Random Value for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Currency Code",
        CreateBankWithCurrency(CurrencyExchangeRate."Currency Code"),LibraryRandom.RandDec(100,2),
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"Bank Account");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run Adjust Exchange Rate batch job.
      RunAdjustExchangeRates(CurrencyExchangeRate,GenJournalLine."Document No.");

      // 3. Verify: Verify G/L Entry made for correct Amount after running Adjust Exchange Rate Batch Job.
      VerifyGLEntryAdjustExchange(GenJournalLine,CurrencyExchangeRate,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE CurrencyOnCustomerJobCard@86();
    VAR
      TempJob@1000 : TEMPORARY Record 167;
      Customer@1001 : Record 18;
    BEGIN
      // Check that correct fields updated for Currency on Customer Job Card.

      // Setup: Find a Customer with Currency attached.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      Customer.MODIFY(TRUE);

      // Exercise: Create Job For Customer.
      CreateJob(TempJob,Customer."No.");

      // Verify: Verify different Currency Field On Job Card.
      TempJob.TESTFIELD("Currency Code",'');
      TempJob.TESTFIELD("Invoice Currency Code",Customer."Currency Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnSalesQuotePage@52();
    VAR
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
      Resource@1004 : Record 156;
      Currency@1005 : Record 4;
      SalesQuotePage@1000 : TestPage 41;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryResource.FindResource(Resource);
      LibraryERM.FindCurrency(Currency);
      SalesQuotePage.OPENEDIT;
      SalesQuotePage.NEW;
      SalesQuotePage."Sell-to Customer No.".VALUE(Customer."No.");
      SalesQuotePage.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::Resource));
      SalesQuotePage.SalesLines."No.".VALUE(Resource."No.");
      SalesQuotePage.SalesLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      SalesQuotePage."Currency Code".VALUE(Currency.Code);
      DocumentNo := SalesQuotePage."No.".VALUE;
      SalesQuotePage.CLOSE;

      VerifyCurrencyInSalesLine(SalesLine."Document Type"::Quote,DocumentNo,Resource."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnSalesOrderPage@94();
    VAR
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
      Resource@1004 : Record 156;
      Currency@1005 : Record 4;
      SalesOrderPage@1000 : TestPage 42;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryResource.FindResource(Resource);
      LibraryERM.FindCurrency(Currency);
      SalesOrderPage.OPENEDIT;
      SalesOrderPage.NEW;
      SalesOrderPage."Sell-to Customer No.".VALUE(Customer."No.");
      SalesOrderPage.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::Resource));
      SalesOrderPage.SalesLines."No.".VALUE(Resource."No.");
      SalesOrderPage.SalesLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      SalesOrderPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := SalesOrderPage."No.".VALUE;
      SalesOrderPage.CLOSE;

      VerifyCurrencyInSalesLine(SalesLine."Document Type"::Order,DocumentNo,Resource."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnSalesInvoicePage@95();
    VAR
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
      Resource@1004 : Record 156;
      Currency@1005 : Record 4;
      SalesInvoicePage@1000 : TestPage 43;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryResource.FindResource(Resource);
      LibraryERM.FindCurrency(Currency);
      SalesInvoicePage.OPENEDIT;
      SalesInvoicePage.NEW;
      SalesInvoicePage."Sell-to Customer No.".VALUE(Customer."No.");
      SalesInvoicePage.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::Resource));
      SalesInvoicePage.SalesLines."No.".VALUE(Resource."No.");
      SalesInvoicePage.SalesLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      SalesInvoicePage."Currency Code".VALUE(Currency.Code);
      DocumentNo := SalesInvoicePage."No.".VALUE;
      SalesInvoicePage.CLOSE;

      VerifyCurrencyInSalesLine(SalesLine."Document Type"::Invoice,DocumentNo,Resource."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnSalesCrMemoPage@96();
    VAR
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
      Resource@1004 : Record 156;
      Currency@1005 : Record 4;
      SalesCrMemoPage@1000 : TestPage 44;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryResource.FindResource(Resource);
      LibraryERM.FindCurrency(Currency);
      SalesCrMemoPage.OPENEDIT;
      SalesCrMemoPage.NEW;
      SalesCrMemoPage."Sell-to Customer No.".VALUE(Customer."No.");
      SalesCrMemoPage.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::Resource));
      SalesCrMemoPage.SalesLines."No.".VALUE(Resource."No.");
      SalesCrMemoPage.SalesLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      SalesCrMemoPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := SalesCrMemoPage."No.".VALUE;
      SalesCrMemoPage.CLOSE;

      VerifyCurrencyInSalesLine(SalesLine."Document Type"::"Credit Memo",DocumentNo,Resource."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnBlanketSalesOrderPage@97();
    VAR
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
      Resource@1004 : Record 156;
      Currency@1005 : Record 4;
      BlanketSalesOrderPage@1000 : TestPage 507;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryResource.FindResource(Resource);
      LibraryERM.FindCurrency(Currency);
      BlanketSalesOrderPage.OPENEDIT;
      BlanketSalesOrderPage.NEW;
      BlanketSalesOrderPage."Sell-to Customer No.".VALUE(Customer."No.");
      BlanketSalesOrderPage.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::Resource));
      BlanketSalesOrderPage.SalesLines."No.".VALUE(Resource."No.");
      BlanketSalesOrderPage.SalesLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      BlanketSalesOrderPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := BlanketSalesOrderPage."No.".VALUE;
      BlanketSalesOrderPage.CLOSE;

      VerifyCurrencyInSalesLine(SalesLine."Document Type"::"Blanket Order",DocumentNo,Resource."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnSalesReturnOrderPage@98();
    VAR
      SalesLine@1001 : Record 37;
      Customer@1003 : Record 18;
      Resource@1004 : Record 156;
      Currency@1005 : Record 4;
      SalesReturnOrderPage@1000 : TestPage 6630;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryResource.FindResource(Resource);
      LibraryERM.FindCurrency(Currency);
      SalesReturnOrderPage.OPENEDIT;
      SalesReturnOrderPage.NEW;
      SalesReturnOrderPage."Sell-to Customer No.".VALUE(Customer."No.");
      SalesReturnOrderPage.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::Resource));
      SalesReturnOrderPage.SalesLines."No.".VALUE(Resource."No.");
      SalesReturnOrderPage.SalesLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      SalesReturnOrderPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := SalesReturnOrderPage."No.".VALUE;
      SalesReturnOrderPage.CLOSE;

      VerifyCurrencyInSalesLine(SalesLine."Document Type"::"Return Order",DocumentNo,Resource."No.",Currency.Code);
    END;

    LOCAL PROCEDURE ApplyInvoice@44(VAR GenJournalLine@1002 : Record 81;DocumentNo@1007 : Code[20];DocumentType@1000 : Option);
    VAR
      CustLedgerEntry@1003 : Record 21;
      GenJnlApply@1005 : Codeunit 225;
      CustEntrySetApplID@1004 : Codeunit 101;
      ApplyCustomerEntries@1001 : Page 232;
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.SETRANGE("Document Type",DocumentType);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustEntrySetApplID.SetApplId(CustLedgerEntry,CustLedgerEntry,GenJournalLine."Document No.");
        ApplyCustomerEntries.CalcApplnAmount;
      UNTIL CustLedgerEntry.NEXT = 0;
      COMMIT;
      GenJnlApply.RUN(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateItem@13() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2)); // Use Random Value for Unit Price field
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@38(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocument@14(VAR SalesHeader@1001 : Record 36;VAR CurrencyExchangeRate@1000 : Record 330;DocumentType@1002 : Option);
    BEGIN
      CreateSalesHeaderWithCurrency(SalesHeader,CurrencyExchangeRate,DocumentType);
      CreateSalesLines(SalesHeader);
    END;

    LOCAL PROCEDURE CreateOrderWithLCY@82(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(''));
      CreateSalesLines(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesHeaderWithCurrency@16(VAR SalesHeader@1000 : Record 36;VAR CurrencyExchangeRate@1001 : Record 330;DocumentType@1002 : Option);
    BEGIN
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer(''));
      UpdateCurrencyOnSalesHeader(SalesHeader,CurrencyExchangeRate."Currency Code");
    END;

    LOCAL PROCEDURE CreateSalesLines@17(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      Counter@1004 : Integer;
    BEGIN
      // Create Multiple Lines - Boundary 2 is important.
      FOR Counter := 2 TO 2 + LibraryRandom.RandInt(9) DO
        // Required Random Value for Quantity field.
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@22(VAR CurrencyExchangeRate@1002 : Record 330);
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      CreateExchangeRate(CurrencyExchangeRate,Currency.Code,WORKDATE);
    END;

    LOCAL PROCEDURE CreateExchangeRate@3(VAR CurrencyExchangeRate@1001 : Record 330;CurrencyCode@1000 : Code[10];StartingDate@1002 : Date);
    BEGIN
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);

      // Using Random Exchange Rate Amount and Adjustment Exchange Rate.
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exchange Rate Amount and Relational Adjmt Exchange Rate Amount always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",LibraryRandom.RandDec(100,2) + CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrency@29(VAR CurrencyExchangeRate@1000 : Record 330) : Code[20];
    BEGIN
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      EXIT(CreateCustomer(CurrencyExchangeRate."Currency Code"));
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@31(VAR GenJournalLine@1000 : Record 81;PostingDate@1001 : Date;CurrencyCode@1006 : Code[10];CustomerNo@1004 : Code[20];Amount@1008 : Decimal;DocumentType@1002 : Option;AccountType@1009 : Option);
    VAR
      GenJournalBatch@1007 : Record 232;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,DocumentType,AccountType,CustomerNo,Amount);
      GenJournalLine.VALIDATE(
        "Document No.",LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@55(VAR SalesHeader@1005 : Record 36;CustomerNo@1000 : Code[20]) DocumentNo : Code[20];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      CreateSalesLines(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateBankWithCurrency@80(CurrencyCode@1000 : Code[10]) : Code[20];
    VAR
      BankAccount@1001 : Record 270;
      BankAccountPostingGroup@1002 : Record 277;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryERM.FindBankAccountPostingGroup(BankAccountPostingGroup);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccountPostingGroup.Code);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateJob@87(VAR TempJob@1000 : TEMPORARY Record 167;BillToCustomerNo@1001 : Code[20]);
    BEGIN
      TempJob.INIT;
      TempJob.INSERT;
      TempJob.VALIDATE("Bill-to Customer No.",BillToCustomerNo);
      TempJob.MODIFY;
    END;

    LOCAL PROCEDURE FindSalesInvoiceAmount@71(DocumentNo@1002 : Code[20]) SalesInvoiceAmount : Decimal;
    VAR
      SalesInvoiceLine@1001 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDSET;
      REPEAT
        SalesInvoiceAmount += SalesInvoiceLine."Amount Including VAT";
      UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindSalesLines@27(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDSET;
    END;

    LOCAL PROCEDURE ModifyCurrency@32(VAR CurrencyExchangeRate@1001 : Record 330;VAR CurrencyExchangeRate2@1000 : Record 330);
    BEGIN
      CurrencyExchangeRate2.VALIDATE("Relational Currency Code",CurrencyExchangeRate."Currency Code");
      CurrencyExchangeRate2.MODIFY(TRUE);
      CreateExchangeRate(
        CurrencyExchangeRate2,CurrencyExchangeRate2."Currency Code",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',CurrencyExchangeRate2."Starting Date"));
    END;

    LOCAL PROCEDURE RunAdjustExchangeRates@57(CurrencyExchangeRate@1000 : Record 330;DocumentNo@1003 : Code[20]);
    VAR
      Currency@1002 : Record 4;
      AdjustExchangeRates@1001 : Report 595;
    BEGIN
      // Using Random Number Generator for Document No.
      Currency.SETRANGE(Code,CurrencyExchangeRate."Currency Code");
      CLEAR(AdjustExchangeRates);
      AdjustExchangeRates.SETTABLEVIEW(Currency);
      AdjustExchangeRates.InitializeRequest2(
        CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Starting Date",'Test',CurrencyExchangeRate."Starting Date",
        DocumentNo,TRUE,FALSE);
      AdjustExchangeRates.USEREQUESTPAGE(FALSE);
      AdjustExchangeRates.RUN;
    END;

    LOCAL PROCEDURE UpdateCurrencyOnSalesHeader@2(VAR SalesHeader@1000 : Record 36;CurrencyCode@1001 : Code[10]);
    BEGIN
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePostingDateSalesHeader@10(VAR SalesHeader@1003 : Record 36;PostingDate@1001 : Date);
    BEGIN
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLines@4(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      FindSalesLines(SalesLine,DocumentType,DocumentNo);
      REPEAT
        SalesLine.VALIDATE("No.");
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateExchangeRate@54(VAR CurrencyExchangeRate@1000 : Record 330);
    BEGIN
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + LibraryRandom.RandInt(4));
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateLowerExchangeRate@78(VAR CurrencyExchangeRate@1000 : Record 330);
    BEGIN
      // Use 2 to Update Lower Exchange Rate.
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" / 2);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetGLEntry@67(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDLAST;
    END;

    LOCAL PROCEDURE GetCurrency@70(VAR Currency@1000 : Record 4;CurrencyCode@1001 : Code[10]);
    BEGIN
      Currency.GET(CurrencyCode);
      Currency.InitRoundingPrecision;
    END;

    LOCAL PROCEDURE GetGLEntryForExchangeRate@77(DocumentNo@1001 : Code[20]) GLAmount : Decimal;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::" ");
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        GLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcCurrencyFactor@85(CurrencyExchangeRate@1000 : Record 330) : Decimal;
    BEGIN
      WITH CurrencyExchangeRate DO
        EXIT("Exchange Rate Amount" / "Relational Exch. Rate Amount");
    END;

    LOCAL PROCEDURE ValidateCustWithFCYOnOrder@51(VAR CurrencyExchangeRate@1002 : Record 330;VAR SalesHeader@1000 : Record 36);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.GOTORECORD(SalesHeader);
      SalesOrder."Sell-to Customer No.".SETVALUE(CreateCustomerWithCurrency(CurrencyExchangeRate));
      SalesOrder.CLOSE;
      SalesHeader.FIND;
    END;

    LOCAL PROCEDURE VerifySalesDocumentValues@1(SalesHeader@1000 : Record 36;CurrencyFactor@1001 : Decimal);
    BEGIN
      SalesHeader.TESTFIELD("Currency Factor",CurrencyFactor);
      VerifySalesLineValues(SalesHeader);
    END;

    LOCAL PROCEDURE VerifySalesLineValues@20(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1003 : Record 37;
      Item@1002 : Record 27;
      Currency@1001 : Record 4;
    BEGIN
      // Replace TESTFIELD with AssertNealyEqual to fix GDL Failures.
      GetCurrency(Currency,SalesHeader."Currency Code");
      FindSalesLines(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      REPEAT
        Item.GET(SalesLine."No.");
        Assert.AreNearlyEqual(
          SalesLine."Unit Price",Item."Unit Price" * SalesHeader."Currency Factor",Currency."Unit-Amount Rounding Precision",
          STRSUBSTNO(
            UnitPriceError,SalesLine.FIELDCAPTION("Unit Price"),
            Item."Unit Price" * SalesHeader."Currency Factor",SalesLine.TABLECAPTION));
        SalesLine.TESTFIELD("Line Amount",ROUND(SalesLine.Quantity * SalesLine."Unit Price",Currency."Amount Rounding Precision"));
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGenJournalAmount@30(GenJournalLine@1000 : Record 81;CurrencyExchangeRate@1001 : Record 330;Amount@1002 : Decimal;StartingDate@1004 : Date);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      GetCurrency(Currency,CurrencyExchangeRate."Currency Code");
      GenJournalLine.TESTFIELD(
        "Amount (LCY)",ROUND(LibraryERM.ConvertCurrency(Amount,CurrencyExchangeRate."Currency Code",'',StartingDate),
          Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE VerifySalesInvoiceCurrency@50(SalesInvoiceNo@1000 : Code[20];CurrencyExchangeRate@1001 : Record 330);
    VAR
      SalesInvoiceHeader@1005 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("No.",SalesInvoiceNo);
      SalesInvoiceHeader.FINDFIRST;
      SalesInvoiceHeader.TESTFIELD("Currency Code",CurrencyExchangeRate."Currency Code");
      SalesInvoiceHeader.TESTFIELD("Currency Factor",CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntry@42(CurrencyExchangeRate@1000 : Record 330;DocumentNo@1001 : Code[20];Amount@1006 : Decimal);
    VAR
      Currency@1005 : Record 4;
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER(Amount,'<0');
      GLEntry.FINDLAST;
      Currency.GET(CurrencyExchangeRate."Currency Code");
      GLEntry.TESTFIELD("Posting Date",CurrencyExchangeRate."Starting Date");
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountError,GLEntry.FIELDCAPTION(Amount),Amount,
          GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),GLEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyGLEntryAmount@79(CurrencyExchangeRate@1003 : Record 330;SalesInvoiceHeaderNo@1005 : Code[20];DocumentNo@1002 : Code[20];OldRelationalExchangeRate@1001 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
      Currency@1006 : Record 4;
      ExpectedAmount@1004 : Decimal;
    BEGIN
      GetCurrency(Currency,CurrencyExchangeRate."Currency Code");
      GetGLEntry(GLEntry,DocumentNo);

      ExpectedAmount :=
        FindSalesInvoiceAmount(SalesInvoiceHeaderNo) *
        (CurrencyExchangeRate."Relational Exch. Rate Amount" - OldRelationalExchangeRate) /
        CurrencyExchangeRate."Exchange Rate Amount";
      Assert.AreNearlyEqual(
        ExpectedAmount,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountError,GLEntry.FIELDCAPTION(Amount),GLEntry.Amount,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),
          GLEntry."Entry No."));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntryForOrder@58(CurrencyExchangeRate@1003 : Record 330;DocumentNo@1001 : Code[20];OldRelationalExchangeRate@1005 : Decimal);
    VAR
      SalesInvoiceHeader@1006 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",DocumentNo);
      SalesInvoiceHeader.FINDFIRST;
      VerifyGLEntryAmount(CurrencyExchangeRate,SalesInvoiceHeader."No.",DocumentNo,OldRelationalExchangeRate);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntryForInvoice@62(CurrencyExchangeRate@1003 : Record 330;DocumentNo@1001 : Code[20];OldRelationalExchangeRate@1005 : Decimal);
    VAR
      SalesInvoiceHeader@1006 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",DocumentNo);
      SalesInvoiceHeader.FINDFIRST;
      VerifyGLEntryAmount(CurrencyExchangeRate,SalesInvoiceHeader."No.",DocumentNo,OldRelationalExchangeRate);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntryAdjustExchange@61(GenJournalLine@1000 : Record 81;CurrencyExchangeRate@1003 : Record 330;DocumentNo@1001 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
      Currency@1004 : Record 4;
      ExpectedGLAmount@1005 : Decimal;
    BEGIN
      GetCurrency(Currency,CurrencyExchangeRate."Currency Code");
      GetGLEntry(GLEntry,DocumentNo);

      ExpectedGLAmount :=
        GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" /
        CurrencyExchangeRate."Exchange Rate Amount" - GenJournalLine."Amount (LCY)";
      Assert.AreNearlyEqual(
        ExpectedGLAmount,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountError,GLEntry.FIELDCAPTION(Amount),GLEntry.Amount,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),
          GLEntry."Entry No."));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDetailedCustomerLedger@69(GenJournalLine@1000 : Record 81;CurrencyExchangeRate@1003 : Record 330;DocumentNo@1001 : Code[20]);
    VAR
      Currency@1002 : Record 4;
      DetailedCustLedgEntry@1009 : Record 379;
      ExpectedDetailCustEntryAmount@1006 : Decimal;
    BEGIN
      GetCurrency(Currency,CurrencyExchangeRate."Currency Code");
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.FINDLAST;
      ExpectedDetailCustEntryAmount :=
        GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount" -
        GenJournalLine."Amount (LCY)";
      Assert.AreNearlyEqual(
        ExpectedDetailCustEntryAmount,DetailedCustLedgEntry."Amount (LCY)",Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountError,DetailedCustLedgEntry.FIELDCAPTION("Amount (LCY)"),DetailedCustLedgEntry."Amount (LCY)",
          DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@66(DocumentNo@1000 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.TESTFIELD("Currency Code",CurrencyCode);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntryLowerExchangeRate@76(GenJournalLine@1000 : Record 81;CurrencyExchangeRate@1003 : Record 330);
    VAR
      GLEntry@1002 : Record 17;
      Currency@1004 : Record 4;
      ExpectedGLAmount@1005 : Decimal;
      GLAmount@1001 : Decimal;
    BEGIN
      GetCurrency(Currency,CurrencyExchangeRate."Currency Code");
      ExpectedGLAmount :=
        GenJournalLine."Amount (LCY)" -
        GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" /
        CurrencyExchangeRate."Exchange Rate Amount";
      GLAmount := GetGLEntryForExchangeRate(GenJournalLine."Document No.");

      Assert.AreNearlyEqual(
        ExpectedGLAmount,GLAmount,Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountError,GLEntry.FIELDCAPTION(Amount),GLAmount,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),
          GLEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyRemaningAmount@74(CustomerNo@1000 : Code[20]);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.CALCFIELDS("Remaining Amount");
        CustLedgerEntry.TESTFIELD("Remaining Amount",0);
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCurrencyInSalesLine@88(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];No@1003 : Code[20];CurrencyCode@1004 : Code[10]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreEqual(No,"No.",
          STRSUBSTNO(IncorrectValueErr,"No.",FIELDCAPTION("No.")));
        Assert.AreEqual(CurrencyCode,"Currency Code",
          STRSUBSTNO(IncorrectValueErr,"Currency Code",FIELDCAPTION("Currency Code")));
      END;
    END;

    LOCAL PROCEDURE ExecuteUIHandler@84();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE CreditMemoConfirmHandler@83(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@7(ConfirmMessage@1000 : Text[1024];VAR Result@1001 : Boolean);
    BEGIN
      Result := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@6(Message@1000 : Text[1024]);
    BEGIN
      // Just for Handle the Message.
    END;

    [ModalPageHandler]
    PROCEDURE ApplyEntryPageHandler@45(VAR ApplyCustomerEntries@1000 : Page 232;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [FCY] [Sales]
      Unsupported version tags:
      DE: Unable to Execute
      CH: Unable to Execute (TFS ID: 50699)

      Test for Currency Validation while making new Sales Document.
        1. Check after changing Posting Date, Application generates an error if Exchange Rate does not exist.
        2. Check after changing Posting Date, Unit Price and Line Amount of Sales Line get updated as per new Exchange Rate.
        3. Check after changing Currency in Sales Credit Memo, Currency Factor get updated.
        4. Check after changing Currency in Sales Invoice, Currency Factor get updated.
        5. Check after changing Currency in Sales Order, Currency Factor get updated.
        6. Check after changing Currency in Sales Quote, Currency Factor get updated.
        7. Check after changing Currency in Sales Credit Memo, Unit Price and Line Amount of Sales Line get updated as per
           new Currency.
        8. Check after changing Currency in Sales Invoice, Unit Price and Line Amount of Sales Line get updated as
           per new Currency.
        9. Check after changing Currency in Sales Order, Unit Price and Line Amount of Sales Line get updated as
           per new Currency.
       10. Check after changing Currency in Sales Quote, Unit Price and Line Amount of Sales Line get updated as
           per new Currency.
       11. Check Sales Credit Memo get updated with Customer Currency Code.
       12. Check Sales Invoice get updated with Customer Currency Code.
       13. Check Sales Order get updated with Customer Currency Code.
       14. Check Sales Quote get updated with Customer Currency Code.
       15. Check Customer get updated with Currency Code.
       16. Check General Journal Line Amount(LCY) get updated with Base Currency Exchange Rate and Relational Currency Exchange Rate.
       17. Check General Journal Line Amount(LCY) get updated with Base Currency Exchange Rate.
       18. Check Currency Code and Currency Factor posted properly in Posted Sales Invoice.
       19. Check Amount posted correctly as per Currency Exchange Rate from Invoice to GL Entry.
       20. Create New Currency with Exchange rate.
       21. Create New Currency with Exchange rate and Customer.
       22. Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry created
           with Correct Amount in Sales Order.
       23. Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry created
           with Correct Amount in Sales Invoice.
       24. Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry and
           Detailed Customer Ledger Entry created with Correct Amount.
       25. Check that after Modify lower Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
           GL Entry updated with Correct Amount for Customer.
       26. Check that after Modify lower Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
           GL Entry updated with Correct Amount for Customer with payment.
       27. Check that after Modify lower Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
           GL Entry updated with Correct Amount for Bank.
       28. Check that after Modify Upper Relational Exch. Rate Amount and run Adjust Exchange rate batch job,
           GL Entry updated with Correct Amount for Bank.
       29. Check that correct fields updated on Customer Job Card for a Customer having Currency attached.
       30. Check after changing Sell-to Customer in Sales Order, Currency Factor get updated.

      TFS_TS_ID = 188068
      Covers Test cases:
      ---------------------------------
      Test Function Name         TFS ID
      ---------------------------------
      ModifyPostingDateOnInvoice 124327
      ModifyAmountOnInvoice      124328

      TFS_TS_ID = 188078
      Covers Test cases:
      --------------------------------------------
      Test Function Name             TFS ID
      --------------------------------------------
      ModifyCurrencyCreditMemoHeader 124344
      ModifyCurrencyCreditMemo       124345,124346

      TFS_TS_ID = 188081
      Covers Test cases:
      ------------------------------------------
      Test Function Name          TFS ID
      ------------------------------------------
      ModifyCurrencyInvoiceHeader 124347
      ModifyCurrencyInvoice       124348,124349

      TFS_TS_ID = 188085
      Covers Test cases:
      ----------------------------------------
      Test Function Name        TFS ID
      ----------------------------------------
      ModifyCurrencyOrderHeader 124350
      ModifyCurrencyOrder       124350,124352

      TFS_TS_ID = 188087
      Covers Test cases:
      ---------------------------------------
      Test Function Name        TFS ID
      ---------------------------------------
      ModifyCurrencyQuoteHeader 124353
      ModifyCurrencyQuote       124354,124692

      TFS_TS_ID = 188098
      Covers Test cases:
      -------------------------------
      Test Function Name       TFS ID
      -------------------------------
      FlowCurrencyOnCreditMemo 124335
      FlowCurrencyOnInvoice    124336
      FlowCurrencyOnOrder      124337
      FlowCurrencyOnQuote      124338
      CheckCurrencyOnCustomer  124329

      TFS_TS_ID = 198715
      Covers Test cases:
      --------------------------------------------
      Test Function Name             TFS ID
      --------------------------------------------
      AmountWithRelationalCurrency   125533
      AmountExceptRelationalCurrency 125532
      CreateAndPostInvoice           125535
      PostJournalLineWithInvoice     125536,125537

      TFS_TS_ID = 203692
      Covers Test cases:
      -------------------------------------
      Test Function Name             TFS ID
      -------------------------------------
      CreateAndCheckCurrency         125531
      CreateAndCheckCustomerCurrency 125534

      TFS_TS_ID = 198716
      Covers Test cases:
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      --------------------------------------------------------------------------------
      PostCreditMemoWithCurrency, PostInvoiceWithCurrency, PostOderWithCurrency 127906
      AdjustExchangeRateOrder                                                   127004
      AdjustExchangeRateInvoice                                                 127905
      EntriesAfterAdjustExchangeRate                                            121695

      TFS_TS_ID = 216990
      Covers Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ---------------------------------------------------------------------
      LossEntryAdjustExchangeRate, PaymentAfterAdjustExchange 124972,124996
      LossAdjustExchangeRateForBank,AdjustExchangeRateForBank 124970

      Covers Test cases: TFS_TS_ID: 254041.
      ---------------------------------------------
      Test Function Name                  TFS ID
      ---------------------------------------------
      CurrencyOnCustomerJobCard           203781

      ---------------------------------
      Test Function Name         TFS ID
      ---------------------------------
      ModifyCustWithCurrencyOnOrder 333214
    }
    END.
  }
}

