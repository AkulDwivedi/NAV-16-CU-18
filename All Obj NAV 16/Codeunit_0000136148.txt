OBJECT Codeunit 136148 Service Order Warehouse Orange
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryService@1003 : Codeunit 131902;
      LibrarySales@1002 : Codeunit 130509;
      LibraryWarehouse@1001 : Codeunit 132204;
      LibraryInventory@1011 : Codeunit 132201;
      LibraryRandom@1021 : Codeunit 130440;
      OrangeLocation@1015 : Code[10];
      WkshName@1010 : Code[10];
      isInitialized@1000 : Boolean;
      ERR_ShipmentAndWorksheetLinesNotEqual@1006 : TextConst 'ENU=Number of shipment lines are not equal to number of worksheet lines added for warehouse shipment';
      ERR_SourceLineNoMismatchedInShipmentLineAndWorksheetLine@1007 : TextConst 'ENU="""Source Line No."" of shipment line is different from that of worksheet line for warehouse shipment"';
      ERR_NoWorksheetLinesCreated@1008 : TextConst 'ENU=There are no Warehouse Worksheet Lines created.';
      ErrorMessage@1009 : Text[1024];
      ERR_MultipleWhseWorksheetTemplate@1012 : TextConst 'ENU=There exist multiple warehouse worksheet templates for page %1.';
      ERR_Unexpected@1014 : TextConst 'ENU=Unexpected error.';
      PickWorksheetPage@1013 : TextConst 'ENU=Pick Worksheet';
      REC@1018 : TextConst 'ENU=REC';
      SHIP@1017 : TextConst 'ENU=SHIP';
      PICKPUT@1016 : TextConst 'ENU=PICKPUT';
      BinMandatoryErrorTxt@1019 : TextConst 'ENU="Bin Code must have a value in Service Line: Document Type="';
      QuantityInsufficientErrorTxt@1020 : TextConst 'ENU=Quantity (Base) is not sufficient to complete this action. The quantity in the bin is';

    [Test]
    [HandlerFunctions(HandleRequestPageCreatePick,HandleConfirm,HandleMessage,HandlePickSelectionPage,HandleModalWhsWkshName)]
    PROCEDURE TestPickWorksheetCreatePick@22();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
      WhseWorksheetLine@1005 : Record 7326;
    BEGIN
      // Setup
      Initialize;
      DeleteExistingWhsWorksheetPickLines;
      // execute
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,1);
      // setup
      ReceiveItemStockInWarehouse(ServiceLine);
      COMMIT;
      GetLatestWhseWorksheetLines(WarehouseShipmentHeader,WhseWorksheetLine);
      // verify
      REPEAT
        WhseWorksheetLine.VALIDATE("Qty. to Handle",WhseWorksheetLine.Quantity);
        WhseWorksheetLine.MODIFY(TRUE);
      UNTIL WhseWorksheetLine.NEXT <= 0;
      COMMIT;
      // execute
      GetLatestWhseWorksheetLines(WarehouseShipmentHeader,WhseWorksheetLine);
      IF NOT WhseWorksheetLine.ISEMPTY THEN
        CODEUNIT.RUN(CODEUNIT::"Whse. Create Pick",WhseWorksheetLine);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage,HandleModalWhsWkshName)]
    PROCEDURE TestErrorOnRecreatingPickWorksheet@10();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1003 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,3);
      // Verify
      ASSERTERROR InvokeGetWarehouseDocument;
      ErrorMessage := ERR_NoWorksheetLinesCreated;
      Assert.AreEqual(ErrorMessage,GETLASTERRORTEXT,ERR_Unexpected);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage,HandleModalWhsWkshName)]
    PROCEDURE TestPickWorksheetGetWarehouseDocuments@5();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceLine@1002 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,3);
      // verify
      ValidateWorksheetLinesWithShipmentLines(WarehouseShipmentHeader,WarehouseShipmentLine);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage,HandleModalWhsWkshName)]
    PROCEDURE TestPickWkshtGetWhseDocumentsOnReopenEditRelease@8();
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ServiceItemLine@1004 : Record 5901;
      Item@1011 : Record 27;
      ServiceItem@1010 : Record 5940;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
      WhseShptRelease@1009 : Codeunit 7310;
    BEGIN
      // Setup
      Initialize;
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,4);
      // reopen service order, add new lines and release again
      LibraryService.ReopenServiceDocument(ServiceHeader);
      LibraryInventory.CreateItem(Item);
      CreateServiceItem(ServiceItem,ServiceHeader."Customer No.",Item."No.");
      CLEAR(ServiceItemLine);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // execute
      // release warehouse shipment and create pick worksheet again
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
      WarehouseShipmentHeader.FINDLAST;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShptRelease.Release(WarehouseShipmentHeader);
      InvokeGetWarehouseDocument;
      // Validate result
      ValidateWorksheetLinesWithShipmentLines(WarehouseShipmentHeader,WarehouseShipmentLine);
    END;

    [Test]
    PROCEDURE TestWhsePickRequestOnReleaseWhseShipment@3();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1004 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      // Setup
      Initialize;
      // execute
      CreateAndReleaseWhseShipment(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,3);
      // validate
      WITH WhsePickRequest DO
        GET("Document Type"::Shipment,"Document Subtype"::"0",WarehouseShipmentHeader."No.",OrangeLocation);
    END;

    [Normal]
    LOCAL PROCEDURE ValidateWorksheetLinesWithShipmentLines@9(VAR WarehouseShipmentHeader@1002 : Record 7320;VAR WarehouseShipmentLine@1000 : Record 7321);
    VAR
      WhseWorksheetLine@1001 : Record 7326;
    BEGIN
      GetLatestWhseWorksheetLines(WarehouseShipmentHeader,WhseWorksheetLine);
      Assert.AreEqual(WhseWorksheetLine.COUNT,WarehouseShipmentLine.COUNT,
        ERR_ShipmentAndWorksheetLinesNotEqual + ' ' + WarehouseShipmentHeader."No.");
      REPEAT
        Assert.AreEqual(WhseWorksheetLine."Source Line No.",WarehouseShipmentLine."Source Line No.",
          ERR_SourceLineNoMismatchedInShipmentLineAndWorksheetLine + ' ' + WarehouseShipmentHeader."No.");
        WarehouseShipmentLine.NEXT;
      UNTIL WhseWorksheetLine.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(HandleStrMenu)]
    PROCEDURE AssertErrorPostAfterRelease@41();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServPostYesNo@1000 : Codeunit 5981;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServPostYesNo.PostDocumentWithLines(ServHeader,ServiceLine);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineGeneralProductPostingGroup@36();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE("Gen. Prod. Posting Group",CreateNewGenProductPostingGroup);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineJobRemainQuantity@35();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE("Job Remaining Qty.",(ServiceLine."Job Remaining Qty." - 1.0));
      ASSERTERROR ServiceLine.VALIDATE("Job Remaining Qty.",(ServiceLine."Job Remaining Qty." + 1.0));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineAllowInvoiceDiscount@34();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE("Allow Invoice Disc.",(NOT ServiceLine."Allow Invoice Disc."));
    END;

    [Test]
    [HandlerFunctions(HandleServiceLinePageLineDiscountPct)]
    PROCEDURE AssertErrorServiceLineLineDiscountPercent@32();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceOrderTestPage@1004 : TestPage 5900;
    BEGIN
      // Setup
      Initialize;
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // Execute
      ServiceOrderTestPage.OPENEDIT;
      ServiceOrderTestPage.GOTORECORD(ServHeader);
      // validate
      ServiceOrderTestPage.ServItemLines."Service Lines".INVOKE;
      ServiceOrderTestPage.CLOSE;
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineLineDiscountAmount@31();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE("Line Discount Amount",(10 + ServiceLine."Line Discount Amount"));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineLocation@28();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,1);
      Location.SETFILTER(Code,'<>%1',ServiceLine."Location Code");
      Location.FINDFIRST;
      // validate
      ASSERTERROR ServiceLine.VALIDATE("Location Code",Location.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineNeedByDate@29();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      NeedDate@1000 : Date;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      NeedDate := ServiceLine."Needed by Date";
      // validate
      IF NeedDate <> 0D THEN
        ASSERTERROR
          ServiceLine.VALIDATE("Needed by Date",CALCDATE('<+6M>',NeedDate))
      ELSE
        ASSERTERROR ServiceLine.VALIDATE("Needed by Date",WORKDATE);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineNo@27();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE("No.",LibraryInventory.CreateItemNo);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLinePlanDeliveryDate@26();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      PlanDate@1000 : Date;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      PlanDate := ServiceLine."Planned Delivery Date";
      // validate
      IF PlanDate <> 0D THEN
        ASSERTERROR
          ServiceLine.VALIDATE("Planned Delivery Date",CALCDATE('<+6M>',PlanDate))
      ELSE
        ASSERTERROR ServiceLine.VALIDATE("Planned Delivery Date",WORKDATE);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineQuantity@24();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE(Quantity,(ServiceLine.Quantity + 1.0));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineQuantityWarehouseShipment@42();
    VAR
      ServHeader@1007 : Record 5900;
      ServiceLine@1005 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateWhseShptReopenOrder(ServHeader,ServiceLine);
      // validate
      ASSERTERROR ServiceLine.VALIDATE(Quantity,(ServiceLine.Quantity + 1.0));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineQuantityInvoice@23();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      // validate
      ASSERTERROR ServiceLine.VALIDATE("Qty. to Invoice",(ServiceLine."Qty. to Invoice" + 1.0));
    END;

    [Test]
    [HandlerFunctions(HandleServiceLinePageQtyToShip)]
    PROCEDURE AssertErrorServiceLineQuantityShip@21();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceOrderTestPage@1000 : TestPage 5900;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      ServiceOrderTestPage.OPENNEW;
      ServiceOrderTestPage.GOTORECORD(ServHeader);
      // validate
      ServiceOrderTestPage.ServItemLines."Service Lines".INVOKE;
      ServiceOrderTestPage.CLOSE;
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineType@19();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServHeader,ServiceLine,ServiceItemLine,1);
      COMMIT;
      // validate
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Resource);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Cost);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::"G/L Account");
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineTypeWarehouseShipment@40();
    VAR
      ServHeader@1007 : Record 5900;
      ServiceLine@1005 : Record 5902;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateWhseShptReopenOrder(ServHeader,ServiceLine);
      COMMIT;
      // validate
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Resource);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Cost);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::"G/L Account");
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineUOMCode@15();
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceLine@1004 : Record 5902;
      ItemUOM@1001 : Record 5404;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,1);
      ItemUOM.SETRANGE("Item No.",ServiceLine."No.");
      ItemUOM.SETFILTER(Code,'<>%1',ServiceLine."Unit of Measure Code");
      // validate
      IF ItemUOM.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Unit of Measure Code",ItemUOM.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineCodeWarehouseShipment@46();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ItemUOM@1002 : Record 5404;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateWhseShptReopenOrder(ServiceHeader,ServiceLine);
      ItemUOM.SETRANGE("Item No.",ServiceLine."No.");
      ItemUOM.SETFILTER(Code,'<>%1',ServiceLine."Unit of Measure Code");
      // validate
      IF ItemUOM.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Unit of Measure Code",ItemUOM.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineVariantCode@6();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      ItemVariant@1001 : Record 5401;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,1);
      ItemVariant.SETRANGE("Item No.",ServiceLine."No.");
      ItemVariant.SETFILTER(Code,'<>%1',ServiceLine."Variant Code");
      // validate
      IF ItemVariant.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Variant Code",ItemVariant.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineVariantCodeWarehouseShipment@44();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ItemVariant@1000 : Record 5401;
    BEGIN
      // Setup
      Initialize;
      // Execute
      CreateWhseShptReopenOrder(ServiceHeader,ServiceLine);
      ItemVariant.SETRANGE("Item No.",ServiceLine."No.");
      ItemVariant.SETFILTER(Code,'<>%1',ServiceLine."Variant Code");
      // validate
      IF ItemVariant.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Variant Code",ItemVariant.Code);
    END;

    [Test]
    PROCEDURE PostServiceInvoiceOrangeNonItemLines@76();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      Initialize;

      // Post a Service Invoice on ORANGE Location with lines of type not item.
      TestPostServiceDocumentWithNonItemLines(OrangeLocation,ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PostServiceCreditMemoOrangeNonItemLines@54();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      Initialize;

      // Post a Service Credit Memo on ORANGE Location with lines of type not item.
      TestPostServiceDocumentWithNonItemLines(OrangeLocation,ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PostServiceInvoiceOrangeWithItemEmptyBinCode@245();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      Initialize;

      // Post service invoice for an Item with empty bin code for an item in stock
      ASSERTERROR TestPostServiceDocumentWithItem(ServiceHeader."Document Type"::Invoice,1,TRUE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,BinMandatoryErrorTxt) > 0,BinMandatoryErrorTxt);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PostServiceInvoiceOrangeWithItemInStock@71();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      Initialize;

      // Post service invoice for an Item with empty bin code
      TestPostServiceDocumentWithItem(ServiceHeader."Document Type"::Invoice,1,FALSE);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PostServiceInvoiceOrangeWithItemOutOfStock@74();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      Initialize;

      // Post service invoice for an Item with empty bin code
      ASSERTERROR TestPostServiceDocumentWithItem(ServiceHeader."Document Type"::Invoice,-1,FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,QuantityInsufficientErrorTxt) > 0,QuantityInsufficientErrorTxt);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PostServiceCrMemoOrangeWithItemEmptyBinCode@82();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      Initialize;

      // Post service Credit Memo for an Item with empty bin code for an item in stock
      ASSERTERROR TestPostServiceDocumentWithItem(ServiceHeader."Document Type"::"Credit Memo",1,TRUE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,BinMandatoryErrorTxt) > 0,BinMandatoryErrorTxt);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PostServiceCrMemoOrangeWithItemInStock@84();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      Initialize;

      // Post service Credit Memo for an Item with empty bin code
      TestPostServiceDocumentWithItem(ServiceHeader."Document Type"::"Credit Memo",1,FALSE);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm)]
    PROCEDURE PostServiceCrMemoOrangeWithItemOutOfStock@86();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      Initialize;

      // Post service Credit Memo for an Item with empty bin code
      TestPostServiceDocumentWithItem(ServiceHeader."Document Type"::"Credit Memo",-1,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE AddItemServiceLinesToHeader@85(VAR ServiceHeader@1002 : Record 5900;ServiceItemLineNo@1007 : Integer;ItemNo@1009 : Code[20];ItemQuantity@1008 : Integer;LocationCode@1005 : Code[10]) : Integer;
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      UpdateServiceLine(ServiceLine,ServiceItemLineNo,ItemQuantity);
      ServiceLine.SetHideReplacementDialog(TRUE);
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.MODIFY;
      EXIT(ServiceLine."Line No.");
    END;

    [Normal]
    LOCAL PROCEDURE AddNonItemServiceLinesToDocument@30(VAR ServiceHeader@1002 : Record 5900;ServiceItemLineNo@1007 : Integer);
    VAR
      GLAccount@1006 : Record 15;
      Resource@1001 : Record 156;
      ServiceLine@1000 : Record 5902;
      ServiceCost@1005 : Record 5905;
      LibraryERM@1004 : Codeunit 131300;
      LibraryResource@1003 : Codeunit 130511;
    BEGIN
      LibraryResource.FindResource(Resource);
      CreateAndUpdateServiceLines(ServiceLine,ServiceHeader,ServiceItemLineNo,
        ServiceLine.Type::Resource,Resource."No.",LibraryRandom.RandInt(100));

      LibraryERM.FindGLAccount(GLAccount);
      CreateAndUpdateServiceLines(ServiceLine,ServiceHeader,ServiceItemLineNo,
        ServiceLine.Type::"G/L Account",GLAccount."No.",LibraryRandom.RandInt(100));

      LibraryService.FindServiceCost(ServiceCost);
      CreateAndUpdateServiceLines(ServiceLine,ServiceHeader,ServiceItemLineNo,
        ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandInt(100));
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndUpdateServiceLines@64(VAR ServiceLine@1000 : Record 5902;VAR ServiceHeader@1002 : Record 5900;ServiceItemLineNo@1007 : Integer;ServiceLineType@1008 : Option;No@1009 : Code[20];LineQuantity@1010 : Integer);
    BEGIN
      CLEAR(ServiceLine);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLineType,No);
      UpdateServiceLine(ServiceLine,ServiceItemLineNo,LineQuantity);
    END;

    [Normal]
    LOCAL PROCEDURE CreateBin@37(VAR Bin@1002 : Record 7354;Locationcode@1000 : Code[10];Code@1001 : Code[10]);
    BEGIN
      CLEAR(Bin);
      Bin.INIT;
      Bin.VALIDATE("Location Code",Locationcode);
      Bin.VALIDATE(Code,Code);
      Bin.VALIDATE(Empty,TRUE);
      Bin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateOrangeLocation@117() : Code[10];
    VAR
      Location@1006 : Record 14;
      Bin@1000 : Record 7354;
      WhseWorksheetName@1118 : Record 7327;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,TRUE,TRUE,TRUE);
      Location.VALIDATE("Use Put-away Worksheet",FALSE);
      Location.VALIDATE("Directed Put-away and Pick",FALSE);
      Location.VALIDATE("Use ADCS",FALSE);
      Location.VALIDATE("Default Bin Selection",Location."Default Bin Selection"::"Fixed Bin");

      CreateBin(Bin,Location.Code,REC);
      Location.VALIDATE("Receipt Bin Code",Bin.Code);
      CreateBin(Bin,Location.Code,SHIP);
      Location.VALIDATE("Shipment Bin Code",Bin.Code);
      CreateBin(Bin,Location.Code,PICKPUT);
      Location.VALIDATE("Default Bin Code",Bin.Code);
      Location.MODIFY(TRUE);

      CreateWhseWorksheetName(WhseWorksheetName,Location.Code);
      WkshName := WhseWorksheetName.Name;
      EXIT(Location.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateNewGenProductPostingGroup@43() : Code[10];
    VAR
      GenProductPostingGroup@1000 : Record 251;
      VatProductPostingGroup@1001 : Record 324;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      VatProductPostingGroup.FINDFIRST;
      GenProductPostingGroup."Def. VAT Prod. Posting Group" := VatProductPostingGroup.Code;
      GenProductPostingGroup."Auto Insert Default" := TRUE;
      GenProductPostingGroup.MODIFY(TRUE);
      EXIT(GenProductPostingGroup.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreatePickWorksheet@12(VAR ServiceHeader@1004 : Record 5900;VAR ServiceLine@1000 : Record 5902;VAR WarehouseShipmentHeader@1003 : Record 7320;VAR WarehouseShipmentLine@1002 : Record 7321;NumberOfServLines@1001 : Integer);
    BEGIN
      // release warehouse shipment and create pick worksheet again
      CreateAndReleaseWhseShipment(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,NumberOfServLines);
      InvokeGetWarehouseDocument;
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceOrder@52(VAR ServiceHeader@1002 : Record 5900;VAR ServiceLine@1001 : Record 5902;VAR ServiceItemLine@1000 : Record 5901;NumberOfServLines@1006 : Integer);
    VAR
      Item@1004 : Record 27;
      ServiceItem@1003 : Record 5940;
      CustomerNo@1005 : Code[20];
      LineCount@1007 : Integer;
    BEGIN
      IF NumberOfServLines <= 0 THEN
        EXIT;
      LibraryInventory.CreateItem(Item);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateServiceItem(ServiceItem,CustomerNo,Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      // creating multiple service lines
      IF NumberOfServLines > 1 THEN BEGIN
        CreateServiceItem(ServiceItem,CustomerNo,Item."No.");
        CLEAR(ServiceItemLine);
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
        FOR LineCount := 2 TO NumberOfServLines DO
          CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      END;
      CLEAR(ServiceLine);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FIND('-');
    END;

    LOCAL PROCEDURE CreateAndReleaseServiceOrder@4(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1004 : Record 5902;VAR ServiceItemLine@1003 : Record 5901;NumberOfServLines@1001 : Integer);
    BEGIN
      CreateServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,NumberOfServLines);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndReleaseWhseShipment@1(VAR ServiceHeader@1003 : Record 5900;VAR ServiceLine@1004 : Record 5902;VAR WarehouseShipmentHeader@1001 : Record 7320;VAR WarehouseShipmentLine@1000 : Record 7321;NumberOfServLines@1005 : Integer);
    VAR
      WhseShptRelease@1002 : Codeunit 7310;
    BEGIN
      CreateWarehouseShipment(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,NumberOfServLines);
      WhseShptRelease.Release(WarehouseShipmentHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateWarehouseShipment@33(VAR ServiceHeader@1004 : Record 5900;VAR ServiceLine@1002 : Record 5902;VAR WarehouseShipmentHeader@1006 : Record 7320;VAR WarehouseShipmentLine@1005 : Record 7321;NumberOfServLines@1007 : Integer);
    VAR
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,NumberOfServLines);
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
      WarehouseShipmentHeader.FINDLAST;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE CreateWhseShptReopenOrder@45(VAR ServiceHeader@1004 : Record 5900;VAR ServiceLine@1003 : Record 5902);
    VAR
      ServiceItemLine@1006 : Record 5901;
    BEGIN
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,2);
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
      LibraryService.ReopenServiceDocument(ServiceHeader);
    END;

    LOCAL PROCEDURE CreateServiceItem@101(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      CLEAR(ServiceItem);
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocumentWithServiceLine@91(VAR ServiceHeader@1004 : Record 5900;ServiceDocumentType@1002 : Option;ItemNo@1001 : Code[20];ItemQuantity@1000 : Integer;LocationCode@1009 : Code[10]);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceDocumentType,Customer."No.");
      ServiceHeader.VALIDATE("Location Code",LocationCode);
      ServiceHeader.MODIFY(TRUE);
      AddItemServiceLinesToHeader(ServiceHeader,0,ItemNo,ItemQuantity,LocationCode);
    END;

    LOCAL PROCEDURE CreateServiceLine@94(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItem@1001 : Record 5940);
    VAR
      Item@1002 : Record 27;
    BEGIN
      CLEAR(ServiceLine);
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItem."No.");
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random For Quantity and Quantity to Consume.
      ServiceLine.VALIDATE("Location Code",OrangeLocation);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@53(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    [Normal]
    LOCAL PROCEDURE DeleteExistingWhsWorksheetPickLines@16();
    VAR
      WhseWorksheetLine@1000 : Record 7326;
      WhseWorksheetTemplate@1001 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE("Page ID",PAGE::"Pick Worksheet");
      Assert.AreEqual(1,WhseWorksheetTemplate.COUNT,STRSUBSTNO(ERR_MultipleWhseWorksheetTemplate,PickWorksheetPage));
      IF WhseWorksheetTemplate.FINDFIRST THEN BEGIN
        WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetTemplate.Name);
        WhseWorksheetLine.DELETEALL;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE FindFirstServiceLineByServiceHeader@62(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceCreditMemoHeader@87(VAR ServiceCrMemoHeader@1000 : Record 5994;PreAssignedNo@1001 : Code[20]);
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@103(VAR ServiceInvoiceHeader@1000 : Record 5992;PreAssignedNo@1001 : Code[20]);
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceInvoiceHeader.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE GetWarehouseEntries@57(VAR ServiceLine@1000 : Record 5902;VAR WarehouseEntry@1001 : Record 7312;EntryType@1002 : Option);
    BEGIN
      WarehouseEntry.SETRANGE("Source Document",WarehouseEntry."Source Document"::"Serv. Order");
      WarehouseEntry.SETRANGE("Source No.",ServiceLine."Document No.");
      WarehouseEntry.SETRANGE("Source Line No.",ServiceLine."Line No.");
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE GetLatestWhseWorksheetLines@17(VAR WarehouseShipmentHeader@1000 : Record 7320;VAR WhseWorksheetLine@1001 : Record 7326);
    BEGIN
      WhseWorksheetLine.SETRANGE("Whse. Document Type",WhseWorksheetLine."Whse. Document Type"::Shipment);
      WhseWorksheetLine.SETRANGE("Whse. Document No.",WarehouseShipmentHeader."No.");
      WhseWorksheetLine.FIND('-');
    END;

    [Normal]
    LOCAL PROCEDURE RANDOMRANGE@47(RangeMin@1000 : Integer;RangeMax@1001 : Integer) : Integer;
    BEGIN
      // Method returns a random value within a range
      Assert.IsTrue(RangeMax >= RangeMin,'Range is Valid');
      EXIT(LibraryRandom.RandIntInRange(RangeMin,RangeMax));
    END;

    LOCAL PROCEDURE SaveServiceLineInTempTable@132(VAR TempServiceLine@1001 : TEMPORARY Record 5902;ServiceLine@1000 : Record 5902);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
      REPEAT
        TempServiceLine := ServiceLine;
        TempServiceLine.INSERT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServiceLine@38(VAR ServiceLine@1003 : Record 5902;ServiceItemLineNo@1002 : Integer;ItemQuantity@1000 : Integer);
    BEGIN
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,ItemQuantity);  // Use Random to select Random Quantity.
      ServiceLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE TestPostServiceDocumentWithNonItemLines@113(LocationCode@1005 : Code[10];ServiceDocumentType@1006 : Option);
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItem@1004 : Record 5940;
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceCrMemoHeader@1000 : Record 5994;
      Customer@1003 : Record 18;
    BEGIN
      // Setup: Create a service invoice with service lines of type resource, gl and cost
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceDocumentType,Customer."No.");
      ServiceHeader.VALIDATE("Location Code",LocationCode);
      ServiceHeader.MODIFY(TRUE);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      AddNonItemServiceLinesToDocument(ServiceHeader,0);

      // EXECUTE: Post the Service Header
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // VERIFY: The Header has been posted
      IF ServiceHeader."Document Type" = ServiceHeader."Document Type"::Invoice THEN
        FindServiceInvoiceHeader(ServiceInvoiceHeader,ServiceHeader."No.")
      ELSE
        FindServiceCreditMemoHeader(ServiceCrMemoHeader,ServiceHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE TestPostServiceDocumentWithItem@146(ServiceDocumentType@1004 : Option;LineQuantityDelta@1009 : Integer;IsBlankBincode@1010 : Boolean);
    VAR
      Item@1002 : Record 27;
      Location@1003 : Record 14;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1008 : Record 5902;
      WarehouseEntry@1013 : Record 7312;
      TempServiceLine@1006 : TEMPORARY Record 5902;
      Quantity@1007 : Integer;
      LineQuantity@1000 : Integer;
      LocationCode@1011 : Code[10];
      BinCode@1012 : Code[20];
    BEGIN
      // PARAM: LineQuantityDelta: Quantity to subtract from the supply quantity set on the line
      // PARAM: IsBlankBincode: Set Bin code ot blank in the service line

      // SETUP: Create an new location, create a new item.
      // SETUP: Create Supply for that item in the specific location and bin.
      Quantity := RANDOMRANGE(2,100);
      LineQuantity := Quantity - LineQuantityDelta;

      LocationCode := OrangeLocation;
      BinCode := '';
      IF NOT IsBlankBincode THEN BEGIN
        Location.GET(LocationCode);
        BinCode := Location."Default Bin Code";
      END;

      LibraryInventory.CreateItem(Item);

      // EXECUTE: Create Service Document on the Location.
      CreateServiceDocumentWithServiceLine(ServiceHeader,ServiceDocumentType,Item."No.",Quantity,LocationCode);
      FindFirstServiceLineByServiceHeader(ServiceLine,ServiceHeader);
      ReceiveItemStockInWarehouse(ServiceLine);
      ServiceLine.VALIDATE(Quantity,LineQuantity);
      ServiceLine.VALIDATE("Bin Code",BinCode);
      ServiceLine.MODIFY(TRUE);

      // VERIFY: Service Document has been posted
      SaveServiceLineInTempTable(TempServiceLine,ServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      IF ServiceDocumentType = ServiceHeader."Document Type"::Invoice THEN BEGIN
        VerifyQtyOnItemLedgerEntry(TempServiceLine,LineQuantity);
        GetAndVerifyWarehouseEntry(ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Negative Adjmt.",-ServiceLine.Quantity);
      END ELSE BEGIN
        VerifyQtyOnItemLedgerEntry(TempServiceLine,-LineQuantity);
        GetAndVerifyWarehouseEntry(ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Positive Adjmt.",ServiceLine.Quantity);
      END;
      Assert.AreEqual(WarehouseEntry.COUNT,1,'No. of warehouse entries created');
      WarehouseEntry.TESTFIELD("Bin Code",BinCode);
    END;

    [ConfirmHandler]
    PROCEDURE HandleConfirm@11(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE HandleMessage@2(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE HandlePickSelectionPage@7(VAR PickSelectionTestPage@1000 : TestPage 7343);
    BEGIN
      PickSelectionTestPage.LAST;
      PickSelectionTestPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE HandleRequestPageCreatePick@14(VAR CreatePickTestPage@1000 : TestRequestPage 5754);
    BEGIN
      CreatePickTestPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HandleModalWhsWkshName@25(VAR WorksheetNames@1000 : TestPage 7346);
    BEGIN
      WorksheetNames.FILTER.SETFILTER("Location Code",OrangeLocation);
      WorksheetNames.FILTER.SETFILTER(Name,WkshName);
      WorksheetNames.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE HandleStrMenu@48(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      // Select the ship option
      Choice := 1;
    END;

    [ModalPageHandler]
    PROCEDURE HandleServiceLinePageLineDiscountPct@49(VAR ServiceLinesPage@1000 : TestPage 5905);
    VAR
      Disc@1001 : Decimal;
    BEGIN
      IF ServiceLinesPage."Line Discount %".VALUE = '' THEN
        Disc := 0
      ELSE
        EVALUATE(Disc,ServiceLinesPage."Line Discount %".VALUE);
      ASSERTERROR ServiceLinesPage."Line Discount %".SETVALUE(99.55 - Disc);
    END;

    [ModalPageHandler]
    PROCEDURE HandleServiceLinePageQtyToShip@50(VAR ServiceLinesPage@1000 : TestPage 5905);
    VAR
      QtyToShip@1001 : Decimal;
    BEGIN
      IF ServiceLinesPage."Qty. to Ship".VALUE = '' THEN
        QtyToShip := 0
      ELSE
        EVALUATE(QtyToShip,ServiceLinesPage."Qty. to Ship".VALUE);
      ASSERTERROR ServiceLinesPage."Qty. to Ship".SETVALUE(1 + QtyToShip);
    END;

    LOCAL PROCEDURE Initialize@20();
    VAR
      WarehouseEmployee@1000 : Record 7301;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(ErrorMessage);
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      OrangeLocation := CreateOrangeLocation;
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,OrangeLocation,(NOT WarehouseEmployee.FINDFIRST));
      COMMIT;
      isInitialized := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE InvokeGetWarehouseDocument@13();
    VAR
      PickWorksheetTestPage@1000 : TestPage 7345;
    BEGIN
      PickWorksheetTestPage.TRAP;
      PickWorksheetTestPage.OPENEDIT;
      PickWorksheetTestPage.CurrentWkshName.LOOKUP;
      PickWorksheetTestPage."Get Warehouse Documents".INVOKE;
      PickWorksheetTestPage.CLOSE;
    END;

    [Normal]
    LOCAL PROCEDURE ReceiveItemStockInWarehouse@18(VAR ServiceLine@1000 : Record 5902);
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      WhseActivityLine@1006 : Record 5767;
      Location@1001 : Record 14;
      WhseReceiptHeader@1002 : Record 7316;
      LibraryPurchase@1003 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      WITH ServiceLine DO
        REPEAT
          CLEAR(PurchaseLine);
          IF Type = Type::Item THEN BEGIN
            LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,"No.",Quantity);
            PurchaseLine.VALIDATE("Location Code","Location Code");
            PurchaseLine.MODIFY(TRUE);
          END;
        UNTIL NEXT <= 0;

      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      WhseReceiptHeader.GET(
        LibraryWarehouse.FindWhseReceiptNoBySourceDoc(
          DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No."));
      LibraryWarehouse.PostWhseReceipt(WhseReceiptHeader);
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::"Put-away");
        SETRANGE("Source No.",PurchaseHeader."No.");
        FIND('-');
        Location.GET(OrangeLocation);
        REPEAT
          IF "Action Type" = "Action Type"::Place THEN BEGIN
            VALIDATE("Bin Code",Location."Default Bin Code");
            MODIFY(TRUE);
          END;
        UNTIL NEXT <= 0
      END;
      CODEUNIT.RUN(CODEUNIT::"Whse.-Act.-Register (Yes/No)",WhseActivityLine);
    END;

    LOCAL PROCEDURE VerifyQtyOnItemLedgerEntry@56(VAR TempServiceLineBeforePosting@1000 : TEMPORARY Record 5902;QuantityShipped@1002 : Decimal);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      // Verify that the value of the field Quantity of the Item Ledger Entry is equal to the value of the field Qty. to Ship of the
      // relevant Service Line.
      TempServiceLineBeforePosting.FINDSET;
      IF TempServiceLineBeforePosting."Document Type"::"Credit Memo" = TempServiceLineBeforePosting."Document Type" THEN
        ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Service Credit Memo")
      ELSE
        ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Service Shipment");

      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Service);
      ItemLedgerEntry.SETRANGE("Order No.",TempServiceLineBeforePosting."Document No.");
      REPEAT
        ItemLedgerEntry.SETRANGE("Document Line No.",TempServiceLineBeforePosting."Line No.");
        ItemLedgerEntry.FINDLAST;  // Find the Item Ledger Entry for the second action.
        ItemLedgerEntry.TESTFIELD(Quantity,-QuantityShipped);
      UNTIL TempServiceLineBeforePosting.NEXT = 0;
    END;

    LOCAL PROCEDURE GetAndVerifyWarehouseEntry@68(VAR ServiceLine@1001 : Record 5902;VAR WarehouseEntry@1000 : Record 7312;EntryType@1003 : Option;QuantityPosted@1002 : Decimal);
    BEGIN
      CLEAR(WarehouseEntry);
      GetWarehouseEntries(ServiceLine,WarehouseEntry,EntryType);
      VerifyWarehouseEntry(ServiceLine,WarehouseEntry,EntryType,QuantityPosted);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@99(VAR ServiceLine@1001 : Record 5902;VAR WarehouseEntry@1000 : Record 7312;EntryType@1003 : Option;QuantityPosted@1002 : Decimal);
    BEGIN
      WarehouseEntry.TESTFIELD("Location Code",ServiceLine."Location Code");
      WarehouseEntry.TESTFIELD("Item No.",ServiceLine."No.");
      WarehouseEntry.TESTFIELD(Quantity,QuantityPosted);
      WarehouseEntry.TESTFIELD("Qty. (Base)",QuantityPosted);
      WarehouseEntry.TESTFIELD("Entry Type",EntryType);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Service]
      test for service warehouse integration for orange location

      Test scenarios Part1:
      1. test purchase order->release->whse recpt->put-away->Register put-away. Push scenario.
      2. test service order->release->whse shpt(Push scenario)->pick worksheet(Pull scenario)->creating Pick.
      3. Test on recreating pick worksheet while it already exists.
      4. Validating warehouse worksheet lines with warehouse shipment lines.
      5. Validating test scenario 4 after reopening->adding new service lines->recreating Picks.

      Test scenarios Part2:
      1. Editing content of service header fields should either throw an error or blocked by editable property
         of page controls. This is for blocked fields of service header.
      2. Editing content of service header fields should be successful. This is for allowed fields of service
         header.
      3. Actions on the page should either be disabled by page control or they should throw error on running
         those actions. This is for blocked actions on service order page.
      4. Actions on the page should be able to run successfully. This is for allowed actions on service order page.
      5. Test criteria 1 for service line fields.
      6. Test criteria 2 for service line fields.
      7. Test criteria 3 for line actions on service line page.
      8. Test criteria 4 for line actions on service line page.

      Test Procedures-
      1. Create a service order and run action 'release to ship'.
      2. Test criteria 1 to 8 on released service order.
      3. Create a service invoice and run action 'release to ship'.
    }
    END.
  }
}

