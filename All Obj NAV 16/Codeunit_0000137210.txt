OBJECT Codeunit 137210 SCM Copy Production BOM
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryManufacturing@1011 : Codeunit 132202;
      LibraryInventory@1007 : Codeunit 132201;
      LibraryUtility@1008 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      NoSeriesManagement@1006 : Codeunit 396;
      IsInitialized@1000 : Boolean;
      ErrAutoCopy@1002 : TextConst 'ENU=The Production BOM Header cannot be copied to itself.';
      ErrBOMIsCertified@1003 : TextConst 'ENU=Status on Production BOM Header %1 must not be Certified';
      ProdBOMVersionCode@1004 : Code[20];
      ErrBomVersionIsCertified@1009 : TextConst 'ENU=Status on Production BOM Version %1';
      ProdBOMNo@1012 : Code[20];
      CountError@1010 : TextConst 'ENU=Version Count Must Match.';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(ProdBOMNo);
      CLEAR(ProdBOMVersionCode);

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CopyToHeader@17(VAR ProductionBOMHeader@1001 : Record 99000771;BOMStatus@1000 : Option);
    VAR
      ProductionBOMVersion@1003 : Record 99000779;
      ProductionBOMCopy@1002 : Codeunit 99000768;
    BEGIN
      // Setup: Create source Production BOM and Version.
      Initialize;
      SetupCopyBOM(ProductionBOMHeader,ProductionBOMVersion,BOMStatus);

      // Create destination Production BOM Header.
      CreateProductionBOM(ProductionBOMHeader);

      // Set status on destination BOM Header.
      ProductionBOMHeader.VALIDATE(Status,BOMStatus);
      ProductionBOMHeader.MODIFY(TRUE);

      // Exercise: Copy BOM from source Production BOM Header.
      ProductionBOMCopy.CopyBOM(ProdBOMNo,'',ProductionBOMHeader,'');

      // Verify: Production BOM lines are retrieved from source Production BOM.
      VerifyProductionBOMLines(ProdBOMNo,ProductionBOMHeader."No.",'','');
    END;

    [Test]
    PROCEDURE FromHeaderToHeader@11();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CopyToHeader(ProductionBOMHeader,ProductionBOMHeader.Status::New);
    END;

    [Test]
    PROCEDURE FromHeaderToCertifiedHeader@3();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      ASSERTERROR CopyToHeader(ProductionBOMHeader,ProductionBOMHeader.Status::Certified);

      // Verify: Error: Destination BOM should not be certified.
      Assert.AreEqual(STRSUBSTNO(ErrBOMIsCertified,ProductionBOMHeader."No."),GETLASTERRORTEXT,'');
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE FromHeaderToSameHeader@9();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMCopy@1000 : Codeunit 99000768;
    BEGIN
      CopyToHeader(ProductionBOMHeader,ProductionBOMHeader.Status::New);

      // Exercise: Copy BOM from the same Production BOM Header.
      ProductionBOMHeader.GET(ProdBOMNo);
      ASSERTERROR ProductionBOMCopy.CopyBOM(ProdBOMNo,'',ProductionBOMHeader,'');

      // Verify: Error: BOM header cannot be copied to itself.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrAutoCopy) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE FromSameHeaderTwiceToHeader@16();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMCopy@1000 : Codeunit 99000768;
    BEGIN
      CopyToHeader(ProductionBOMHeader,ProductionBOMHeader.Status::New);

      // Exercise: Copy again from Production BOM Header.
      ProductionBOMCopy.CopyBOM(ProdBOMNo,'',ProductionBOMHeader,'');

      // Verify: Production BOM lines are retrieved from source Production BOM.
      VerifyProductionBOMLines(ProdBOMNo,ProductionBOMHeader."No.",'','');
    END;

    [Normal]
    LOCAL PROCEDURE CopyFromHeaderToVersion@20(VAR ProductionBOMVersion@1001 : Record 99000779;BOMStatus@1000 : Option);
    VAR
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      // Setup: Create source Production BOM and version.
      Initialize;
      SetupCopyBOM(ProductionBOMHeader,ProductionBOMVersion,BOMStatus);

      // Exercise: Copy BOM from source Production BOM Header.
      ProductionBOMCopy.CopyBOM(ProductionBOMHeader."No.",'',ProductionBOMHeader,ProductionBOMVersion."Version Code");
      ProductionBOMVersion.VALIDATE("Unit of Measure Code",ProductionBOMHeader."Unit of Measure Code");
      ProductionBOMVersion.MODIFY(TRUE);

      // Verify: Production BOM lines are retrieved from source Production BOM Header.
      VerifyProductionBOMLines(ProductionBOMHeader."No.",ProductionBOMHeader."No.",'',ProductionBOMVersion."Version Code");
    END;

    [Test]
    PROCEDURE FromHeaderToVersion@5();
    VAR
      ProductionBOMVersion@1001 : Record 99000779;
    BEGIN
      CopyFromHeaderToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::New);
    END;

    [Test]
    PROCEDURE FromHeaderToCertifiedVersion@31();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      ASSERTERROR CopyFromHeaderToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::Certified);

      // Verify: Error: destination should not be certified.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrBomVersionIsCertified,ProdBOMNo)) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE FromSameHeaderTwiceToVersion@21();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMVersion@1000 : Record 99000779;
      ProductionBOMCopy@1002 : Codeunit 99000768;
    BEGIN
      CopyFromHeaderToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::New);

      // Exercise: Copy BOM from source Production BOM Header again.
      ProductionBOMHeader.GET(ProdBOMNo);
      ProductionBOMCopy.CopyBOM(ProdBOMNo,'',ProductionBOMHeader,ProductionBOMVersion."Version Code");
      ProductionBOMVersion.VALIDATE("Unit of Measure Code",ProductionBOMHeader."Unit of Measure Code");
      ProductionBOMVersion.MODIFY(TRUE);

      // Verify: Production BOM lines are retrieved from source Production BOM Header.
      VerifyProductionBOMLines(ProductionBOMHeader."No.",ProductionBOMHeader."No.",'',ProductionBOMVersion."Version Code");
    END;

    [Normal]
    LOCAL PROCEDURE CopyFromVersionToVersion@25(VAR ProductionBOMVersion@1002 : Record 99000779;BOMStatus@1005 : Option);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      // Setup: Create source Production BOM and version.
      Initialize;
      SetupCopyBOM(ProductionBOMHeader,ProductionBOMVersion,BOMStatus);

      // Exercise: Copy BOM version from the desired BOM version.
      ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);

      // Verify: Production BOM lines are retrieved from source Production BOM Version.
      VerifyProductionBOMLines(ProductionBOMHeader."No.",ProductionBOMHeader."No.",ProdBOMVersionCode,
        ProductionBOMVersion."Version Code");
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE FromVersionToVersion@12();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      CopyFromVersionToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::New);
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE FromVersionToSameVersion@7();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
      ProductionBOMCopy@1001 : Codeunit 99000768;
    BEGIN
      CopyFromVersionToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::New);

      // Exercise: Copy BOM version to same BOM version.
      ProductionBOMVersion.GET(ProdBOMNo,ProdBOMVersionCode);
      ASSERTERROR ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);

      // Verify: Error: Cannot use the same version as source.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrAutoCopy) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE FromVersionToCertifiedVersion@33();
    VAR
      ProductionBOMVersion@1001 : Record 99000779;
    BEGIN
      ASSERTERROR CopyFromVersionToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::Certified);

      // Verify: Error: destination should not be certified.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrBomVersionIsCertified,ProdBOMNo)) > 0,GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE FromSameVersionTwiceToVersion@13();
    VAR
      ProductionBOMVersion@1002 : Record 99000779;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      CopyFromVersionToVersion(ProductionBOMVersion,ProductionBOMVersion.Status::New);

      // Exercise: Copy again from same version.
      ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);

      // Verify: Production BOM lines are retrieved from source Production BOM Version.
      VerifyProductionBOMLines(ProdBOMNo,ProdBOMNo,ProdBOMVersionCode,ProductionBOMVersion."Version Code");
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE FromVersionThenHeader@14();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMVersion@1002 : Record 99000779;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      // Setup: Create source Production BOM and version.
      Initialize;
      SetupCopyBOM(ProductionBOMHeader,ProductionBOMVersion,ProductionBOMHeader.Status::New);

      // Exercise: Copy BOM version, first from the BOM version, then from the Production BOM header.
      ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);
      ProductionBOMCopy.CopyBOM(ProductionBOMHeader."No.",'',ProductionBOMHeader,ProductionBOMVersion."Version Code");
      ProductionBOMVersion.VALIDATE("Unit of Measure Code",ProductionBOMHeader."Unit of Measure Code");
      ProductionBOMVersion.MODIFY(TRUE);

      // Verify: BOM lines are copied from previous header only once.
      VerifyProductionBOMLines(ProductionBOMHeader."No.",ProductionBOMHeader."No.",'',ProductionBOMVersion."Version Code");
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE FromHeaderThenVersion@15();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMVersion@1002 : Record 99000779;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      // Setup: Create source Production BOM and version.
      Initialize;
      SetupCopyBOM(ProductionBOMHeader,ProductionBOMVersion,ProductionBOMHeader.Status::New);

      // Exercise: Copy BOM version from Header, then from the other Production BOM version.
      ProductionBOMCopy.CopyBOM(ProductionBOMHeader."No.",'',ProductionBOMHeader,ProductionBOMVersion."Version Code");
      ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);

      // Verify: Error: BOM lines are copied from previous version only once.
      VerifyProductionBOMLines(ProductionBOMHeader."No.",ProductionBOMHeader."No.",ProdBOMVersionCode,
        ProductionBOMVersion."Version Code");
    END;

    [Test]
    [HandlerFunctions(ProdBOMListHandler)]
    PROCEDURE MatrixPageVersionToVersion@19();
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMVersion@1002 : Record 99000779;
      ProductionBOMCopy@1003 : Codeunit 99000768;
      VersionCode@1005 : ARRAY [32] OF Text[1024];
      VersionCount@1000 : Integer;
    BEGIN
      // Setup: Create source Production BOM and version.
      Initialize;
      SetupCopyBOM(ProductionBOMHeader,ProductionBOMVersion,ProductionBOMVersion.Status::New);

      // Exercise: Copy BOM version from the desired BOM version, Generating Matrix Data and Calculating Total No. of Version Count And
      // version.
      ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);
      VersionCount := GenerateMatrixData(VersionCode,ProductionBOMHeader."No.");

      // Verify : BOM Matrix Column Count And Column with source Production BOM Version.
      VerifyMatrixBOMVersion(ProductionBOMHeader."No.",VersionCode,VersionCount);
    END;

    [Normal]
    LOCAL PROCEDURE CreateProductionBOM@1(VAR ProductionBOMHeader@1000 : Record 99000771);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
      UnitOfMeasure@1007 : Record 204;
      Item@1005 : Record 27;
      Counter@1002 : Integer;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure.Code);
      ProductionBOMHeader.VALIDATE("Version Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      ProductionBOMHeader.MODIFY(TRUE);

      FOR Counter := 1 TO 2 DO BEGIN
        LibraryInventory.CreateItem(Item);
        LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",
          LibraryRandom.RandInt(10));
      END;
    END;

    [Normal]
    LOCAL PROCEDURE FindProductionBOMLines@4(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20];VersionCode@1002 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.SETRANGE("Version Code",VersionCode);
      ProductionBOMLine.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyProductionBOMLines@6(FromProductionBOMNo@1000 : Code[20];ToProductionBOMNo@1001 : Code[20];FromVersionCode@1002 : Code[20];ToVersionCode@1003 : Code[20]);
    VAR
      ProductionBOMLine@1004 : Record 99000772;
      ProductionBOMLine1@1005 : Record 99000772;
      IsLastRecord@1006 : Integer;
    BEGIN
      FindProductionBOMLines(ProductionBOMLine,FromProductionBOMNo,FromVersionCode);
      FindProductionBOMLines(ProductionBOMLine1,ToProductionBOMNo,ToVersionCode);

      // Navigate through source and destination Production BOM Lines in parallel.
      REPEAT
        ProductionBOMLine1.TESTFIELD(Type,ProductionBOMLine.Type);
        ProductionBOMLine1.TESTFIELD("No.",ProductionBOMLine."No.");
        ProductionBOMLine1.TESTFIELD("Unit of Measure Code",ProductionBOMLine."Unit of Measure Code");
        ProductionBOMLine1.TESTFIELD(Quantity,ProductionBOMLine.Quantity);
        ProductionBOMLine1.TESTFIELD("Variant Code",ProductionBOMLine."Variant Code");
        ProductionBOMLine1.TESTFIELD("Starting Date",ProductionBOMLine."Starting Date");
        ProductionBOMLine1.TESTFIELD("Ending Date",ProductionBOMLine."Ending Date");
        ProductionBOMLine1.TESTFIELD("Calculation Formula",ProductionBOMLine."Calculation Formula");
        ProductionBOMLine1.TESTFIELD("Quantity per",ProductionBOMLine."Quantity per");
        IsLastRecord := ProductionBOMLine1.NEXT;
      UNTIL ProductionBOMLine.NEXT = 0;

      Assert.AreEqual(0,IsLastRecord,'There are more lines in the destination Production BOM.');
    END;

    [ModalPageHandler]
    PROCEDURE ProdBOMListHandler@10(VAR ProdBOMVersionList@1000 : Page 99000800;VAR Response@1001 : Action);
    VAR
      ProductionBOMVersion@1002 : Record 99000779;
    BEGIN
      // Select source version from Production BOM Version List lookup page.
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProdBOMNo);
      ProductionBOMVersion.SETRANGE("Version Code",ProdBOMVersionCode);
      ProductionBOMVersion.FINDFIRST;
      ProdBOMVersionList.SETTABLEVIEW(ProductionBOMVersion);
      ProdBOMVersionList.SETRECORD(ProductionBOMVersion);
      Response := ACTION::LookupOK;
    END;

    [Normal]
    LOCAL PROCEDURE SetupCopyBOM@18(VAR ProductionBOMHeader@1001 : Record 99000771;VAR ProductionBOMVersion@1002 : Record 99000779;BOMStatus@1005 : Option);
    VAR
      Item@1003 : Record 27;
      ProductionBOMLine@1004 : Record 99000772;
      VersionCode@1000 : Text[20];
    BEGIN
      // Create source Production BOM Header.
      CreateProductionBOM(ProductionBOMHeader);
      ProdBOMNo := ProductionBOMHeader."No.";

      // Add first version to BOM Header.
      VersionCode := NoSeriesManagement.GetNextNo(ProductionBOMHeader."Version Nos.",WORKDATE,TRUE);
      LibraryManufacturing.CreateProductionBOMVersion(ProductionBOMVersion,ProductionBOMHeader."No.",
        COPYSTR(VersionCode,STRLEN(VersionCode) - 9,10),ProductionBOMHeader."Unit of Measure Code");
      ProdBOMVersionCode := ProductionBOMVersion."Version Code";

      // Make sure the first version is not empty.
      LibraryInventory.CreateItem(Item);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,ProductionBOMVersion."Version Code",
        ProductionBOMLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // Create destination version.
      CLEAR(ProductionBOMVersion);
      VersionCode := NoSeriesManagement.GetNextNo(ProductionBOMHeader."Version Nos.",WORKDATE,TRUE);
      LibraryManufacturing.CreateProductionBOMVersion(ProductionBOMVersion,ProductionBOMHeader."No.",
        COPYSTR(VersionCode,STRLEN(VersionCode) - 9,10),ProductionBOMHeader."Unit of Measure Code");

      // Set status on version.
      ProductionBOMVersion.VALIDATE(Status,BOMStatus);
      ProductionBOMVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GenerateMatrixData@2(VAR VersionCode@1008 : ARRAY [32] OF Text[1024];ProductionBOMNo@1007 : Code[20]) : Integer;
    VAR
      ProductionBOMVersion@1004 : Record 99000779;
      MatrixManagement@1005 : Codeunit 9200;
      RecRef@1006 : RecordRef;
      SetWanted@1001 : 'First,Previous,Same,Next';
      CaptionRange@1002 : Text[1024];
      FirstMatrixRecInSet@1000 : Text[100];
      ColumnCount@1009 : Integer;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      RecRef.GETTABLE(ProductionBOMVersion);
      MatrixManagement.GenerateMatrixData(
        RecRef,SetWanted::First,ARRAYLEN(VersionCode),ProductionBOMVersion.FIELDNO("Version Code"),
        FirstMatrixRecInSet,VersionCode,CaptionRange,ColumnCount);
      EXIT(ColumnCount);
    END;

    LOCAL PROCEDURE VerifyMatrixBOMVersion@23(ProductionBOMNo@1001 : Code[20];VersionCode@1002 : ARRAY [32] OF Text[1024];VersionCount@1000 : Integer);
    VAR
      ProductionBOMVersion@1003 : Record 99000779;
      I@1004 : Integer;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMVersion.FINDFIRST;
      Assert.AreEqual(VersionCount,ProductionBOMVersion.COUNT,CountError);

      FOR I := 1 TO VersionCount DO BEGIN
        ProductionBOMVersion.SETRANGE("Version Code",VersionCode[VersionCount]);
        ProductionBOMVersion.FINDFIRST;
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Production BOM] [SCM]
      1. Check Production BOM Copy functionality in the following cases:
           a. Copy from other BOM Header
           b. Copy version from other BOM version.
           c. Copy version from own BOM header.
      2. Check Production BOM Matrix column has Same version and number of column.

      Covers Test cases: 233893
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        MatrixFromVersionToVersion        141372
    }
    END.
  }
}

