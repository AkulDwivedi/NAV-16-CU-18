OBJECT Codeunit 134903 ERM Appln Rounding for Vendor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryUtility@1008 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountError@1004 : TextConst 'ENU=%1 must be %2 in %3.';

    [Test]
    PROCEDURE HigherPaymentWithApplRundng@11();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      Amount@1005 : Decimal;
      DocumentNo@1001 : Code[20];
      ApplnRounding@1002 : Decimal;
      CurrencyCode@1003 : Code[10];
      ExchRateAmount@1004 : Decimal;
      ExchRateAmount2@1006 : Decimal;
    BEGIN
      // Check that Application Rounding entry Created in Detailed Ledger Entry after Post Invoice and Payment from General Journal
      // Lines and Modify Exchange Rate and Modify General Ledger Setup for Appln. Rounding Precision.

      // Create and Post General Line for Invoice and Payment with currency, Modify Exchange Rate and Apply invoice and Modify
      // General Ledger Setup for Random Appln. Roudning Precision.
      Initialize;
      GeneralLedgerSetup.GET;
      ApplnRounding := GeneralLedgerSetup."Appln. Rounding Precision";
      CurrencyCode := CreateCurrency;
      Amount := LibraryRandom.RandInt(100);
      ExchRateAmount := LibraryERM.ConvertCurrency(Amount,CurrencyCode,'',WORKDATE);
      ExchRateAmount2 := ExchRateAmount + LibraryUtility.GenerateRandomFraction;
      ApplyPaymentWithHigherValue(DocumentNo,CurrencyCode,-Amount,ExchRateAmount2,LibraryRandom.RandInt(2));
      Amount := ExchRateAmount2 - ExchRateAmount;

      // Verify: Verify that Application Rounding Entry created on Detailed Ledger Entry.
      VerifyDetailedLedgerEntry(DocumentNo,-Amount,CurrencyCode);

      // TearDown: Set Zero on General Ledger Setup for Application Rounding Precision.
      ModifyGenLedgerSetup(ApplnRounding);
    END;

    [Test]
    PROCEDURE HigherPaymentWithoutApplRundng@25();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      ApplnRounding@1003 : Decimal;
      Amount@1005 : Decimal;
      DocumentNo@1004 : Code[20];
      ExchRateAmount@1001 : Decimal;
    BEGIN
      // Check that Application Rounding entry not Created in Detailed Ledger Entry after Post Invoice and Payment from General Journal
      // Lines and Modify Exchange Rate and Modify General Ledger Setup for Appln. Rounding Precision.

      // Create and Post General Line for Invoice and Payment with currency, Modify Exchange Rate and Apply invoice and Modify
      // General Ledger Setup for Random Appln. Roudning Precision
      Initialize;
      GeneralLedgerSetup.GET;
      ApplnRounding := GeneralLedgerSetup."Appln. Rounding Precision";
      Amount := LibraryRandom.RandInt(100);
      ExchRateAmount := Amount - LibraryUtility.GenerateRandomFraction;
      ApplyPaymentWithHigherValue(DocumentNo,'',-Amount,ExchRateAmount,LibraryRandom.RandInt(2));

      // Verify: Verify that Application Rounding Entry not created on Detailed Ledger Entry.
      VerifyDetldLdgrWithoutRounding(DocumentNo);

      // TearDown: Set Zero on General Ledger Setup for Application Rounding Precision.
      ModifyGenLedgerSetup(ApplnRounding);
    END;

    [Test]
    PROCEDURE LowerPaymentWithApplRundng@6();
    VAR
      Amount@1005 : Decimal;
      DocumentNo@1004 : Code[20];
      CurrencyCode@1002 : Code[10];
      ExchRateAmount@1001 : Decimal;
    BEGIN
      // Check that Application Rounding entry not Created in Detailed Ledger Entry after Post Invoice and Payment from General Journal
      // Lines Without currency and Modify General Ledger Setup for Appln. Rounding Precision.

      // Create and Post General Line for Invoice and Payment with currency, Modify Exchange Rate and Apply invoice.
      Initialize;
      CurrencyCode := CreateCurrency;
      Amount := LibraryRandom.RandInt(100);
      ExchRateAmount := LibraryERM.ConvertCurrency(Amount,CurrencyCode,'',WORKDATE) + LibraryUtility.GenerateRandomFraction;
      ApplyPaymentWithLowerValue(DocumentNo,CurrencyCode,-Amount,ExchRateAmount,0);
    END;

    [Test]
    PROCEDURE LowerPaymentWithoutApplRundng@20();
    VAR
      Amount@1005 : Decimal;
      DocumentNo@1004 : Code[20];
      CurrencyCode@1002 : Code[10];
      ExchRateAmount@1001 : Decimal;
    BEGIN
      // Check that Application Rounding entry not Created in Detailed Ledger Entry after Post Invoice and Payment from General Journal
      // Lines Without currency and Modify General Ledger Setup for Appln. Rounding Precision.
      Initialize;
      CurrencyCode := CreateCurrency;
      Amount := LibraryRandom.RandInt(100);
      ExchRateAmount := Amount - LibraryUtility.GenerateRandomFraction;
      ApplyPaymentWithLowerValue(DocumentNo,CurrencyCode,-Amount,ExchRateAmount,0);
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler)]
    PROCEDURE ApplyVendorEntriesFieldsValue@19();
    VAR
      Vendor@1006 : Record 23;
      GeneralLedgerSetup@1004 : Record 98;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1000 : Record 81;
      GeneralJournal@1005 : TestPage 39;
      Amount@1001 : Decimal;
    BEGIN
      // Check Application Rounding and Balance field's value on Apply Vendor Entries Page.

      // Setup: Create General Line for Invoice and Post with Random Values.
      Initialize;
      GeneralLedgerSetup.GET;
      SelectGenJournalBatch(GenJournalBatch);
      LibraryPurchase.CreateVendor(Vendor);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,Vendor."No.",-LibraryRandom.RandInt(100),
        CreateAndModifyCurrency);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create Another general line for Payment with Posted Entry.
      Amount := GenJournalLine.Amount + GeneralLedgerSetup."Inv. Rounding Precision (LCY)";
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,GenJournalLine."Account No.",-Amount,
        GenJournalLine."Currency Code");

      // Verify: Open Apply Vendor Entries page through General Journal and Verify Balance and Rounding Values with ApplyVendorEntriesPageHandler.
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
      GeneralJournal."Apply Entries".INVOKE;
    END;

    LOCAL PROCEDURE Initialize@14();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyPaymentWithHigherValue@32(VAR DocumentNo@1001 : Code[20];CurrencyCode@1004 : Code[10];Amount@1006 : Decimal;ExchRateAmt@1005 : Decimal;ApplyRoundingPrecision@1008 : Decimal);
    BEGIN
      // Modify General Ledger Setup for Appl. Rounding Precision, Create Invoice, Payment and Post them and Apply with Currency.
      ApplyPaymentWithExchRate(DocumentNo,CurrencyCode,Amount,ExchRateAmt,ApplyRoundingPrecision);
    END;

    LOCAL PROCEDURE ApplyPaymentWithLowerValue@15(VAR DocumentNo@1007 : Code[20];CurrencyCode@1006 : Code[10];Amount@1005 : Decimal;ExchRateAmt@1004 : Decimal;ApplyRoundingPrecision@1001 : Decimal);
    BEGIN
      // Modify General Ledger Setup for Appl. Rounding Precision, Create Invoice, Payment and Post them and Apply
      // without Currency.
      ApplyPaymentWithExchRate(DocumentNo,CurrencyCode,Amount,ExchRateAmt,ApplyRoundingPrecision);

      // Verify: Verify that Application Rounding Entry not created on Detailed Ledger Entry.
      VerifyDetldLdgrWithoutRounding(DocumentNo);
    END;

    LOCAL PROCEDURE ApplyPaymentWithExchRate@2(VAR DocumentNo@1007 : Code[20];CurrencyCode@1001 : Code[10];Amount@1006 : Decimal;ExchRateAmount@1004 : Decimal;ApplyRoundingPrecision@1005 : Decimal);
    VAR
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1000 : Record 81;
      Vendor@1003 : Record 23;
    BEGIN
      // Setup: Modify General Ledger Setup for Appl. Rounding Precision, Create Invoice, Payment and Post them and Apply with Currency.
      ModifyGenLedgerSetup(ApplyRoundingPrecision);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,Vendor."No.",Amount,CurrencyCode);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,Vendor."No.",ExchRateAmount,'');
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply Payment Against Invoice and Post it.
      ApplyAndPostVendorEntry(GenJournalLine."Document No.",ExchRateAmount);
      DocumentNo := GenJournalLine."Document No.";
    END;

    [Test]
    PROCEDURE CorrectionOfRemAmtWithCurrencyAmounts@18();
    VAR
      Vendor@1001 : Record 23;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Check that detailed vendor ledger entry with type Correction for Remaining Amount included into (Amount LCY)
      // and reconcile with G/L entries for receivables account

      // Create and Post General Line for Two Invoices and apply Payment with currency to both invoices
      Initialize;
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,3,3);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY;

      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",-1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",-1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply Payment Against Invoice and Post it.
      ApplyAndPostVendorPayment(GenJournalLine."Document No.");

      // Verify: Account Receivables amount should be -0.67, Correction amount should be 0.1
      VerifyCorrAmountGLEntries(Vendor,GenJournalLine."Document No.",0.67,-0.01);
      VerifyCorrAmountVendLedgEntries(GenJournalLine."Document No.",0.66);
      VerifyCorrAmountDtldVendLedgEntries(GenJournalLine."Document No.",-0.01);
    END;

    LOCAL PROCEDURE CreateAndModifyCurrency@16() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      // Take Random value for Application Rounding Precision.
      Currency.GET(CreateCurrency);
      Currency.VALIDATE("Appln. Rounding Precision",LibraryRandom.RandDec(10,2));
      Currency.MODIFY(TRUE);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrency@8() : Code[10];
    VAR
      Currency@1001 : Record 4;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      LibraryERM.CreateCurrency(Currency);

      // Create Random Exchange Rate to keep the value lower from General Line's Exchange Rate Amount.
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      CurrencyExchangeRate.SETRANGE("Currency Code",Currency.Code);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandInt(2));
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",LibraryUtility.GenerateRandomFraction);
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@13(VAR GenJournalLine@1007 : Record 81;GenJournalBatch@1002 : Record 232;DocumentType@1003 : Option;VendorNo@1000 : Code[20];Amount@1004 : Decimal;CurrencyCode@1001 : Code[10]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostVendorEntry@3(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1004 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,DocumentNo);
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,AmountToApply);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry2,VendorLedgerEntry2."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry2.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry2.VALIDATE("Amount to Apply",VendorLedgerEntry2."Remaining Amount");
      VendorLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry2);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyAndPostVendorPayment@10(DocumentNo@1002 : Code[20]);
    VAR
      VendLedgerEntry@1003 : Record 25;
      VendLedgerEntry2@1000 : Record 25;
    BEGIN
      // Apply Payment Entry on Posted Invoice.
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntry,VendLedgerEntry."Document Type"::Payment,DocumentNo);
      VendLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyVendorEntry(VendLedgerEntry,VendLedgerEntry."Remaining Amount");

      // Set Applies-to ID.
      VendLedgerEntry2.SETCURRENTKEY("Vendor No.",Open,Positive);
      VendLedgerEntry2.SETRANGE("Vendor No.",VendLedgerEntry."Vendor No.");
      VendLedgerEntry2.SETRANGE("Document Type",VendLedgerEntry2."Document Type"::Invoice);
      VendLedgerEntry2.SETRANGE(Open,TRUE);
      IF VendLedgerEntry2.FINDSET THEN
        REPEAT
          LibraryERM.SetAppliestoIdVendor(VendLedgerEntry2);
        UNTIL VendLedgerEntry2.NEXT = 0;

      // Post Application Entries.
      LibraryERM.PostVendLedgerApplication(VendLedgerEntry);
    END;

    LOCAL PROCEDURE FindDetailedLedgerEntry@4(VAR DetailedVendorLedgEntry@1000 : Record 380;DocumentNo@1001 : Code[20]);
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Entry Type",DetailedVendorLedgEntry."Entry Type"::"Appln. Rounding");
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
    END;

    [Normal]
    LOCAL PROCEDURE ModifyGenLedgerSetup@9(ApplnRoundingPrecision@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecision);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@1(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE VerifyDetailedLedgerEntry@17(DocumentNo@1003 : Code[20];Amount@1000 : Decimal;CurrencyCode@1004 : Code[10]);
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
      Currency@1002 : Record 4;
    BEGIN
      FindDetailedLedgerEntry(DetailedVendorLedgEntry,DocumentNo);
      DetailedVendorLedgEntry.FINDFIRST;
      Currency.GET(CurrencyCode);
      Assert.AreNearlyEqual(Amount,DetailedVendorLedgEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountError,DetailedVendorLedgEntry.FIELDCAPTION(Amount),Amount,DetailedVendorLedgEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyDetldLdgrWithoutRounding@28(DocumentNo@1003 : Code[20]);
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
    BEGIN
      FindDetailedLedgerEntry(DetailedVendorLedgEntry,DocumentNo);
      Assert.IsFalse(DetailedVendorLedgEntry.FINDFIRST,'Application Rounding entry should not present.');
    END;

    LOCAL PROCEDURE VerifyCorrAmountGLEntries@7(Vendor@1001 : Record 23;DocumentNo@1000 : Code[20];PayablesAmount@1004 : Decimal;CorrectionAmount@1005 : Decimal);
    VAR
      VendorPostingGroup@1002 : Record 93;
      GLEntry@1003 : Record 17;
    BEGIN
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Payment);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",VendorPostingGroup."Payables Account");
      GLEntry.FIND('-');
      Assert.AreEqual(PayablesAmount,GLEntry.Amount,STRSUBSTNO('G/L payables amount should be %1',PayablesAmount));
      GLEntry.NEXT;
      Assert.AreEqual(CorrectionAmount,GLEntry.Amount,STRSUBSTNO('G/L correction amount should be %1.',CorrectionAmount));
    END;

    LOCAL PROCEDURE VerifyCorrAmountVendLedgEntries@21(DocumentNo@1000 : Code[20];ExpectedAmount@1001 : Decimal);
    VAR
      VendLedgerEntry@1002 : Record 25;
    BEGIN
      VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Payment);
      VendLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendLedgerEntry.FINDFIRST;
      VendLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreEqual(
        ExpectedAmount,VendLedgerEntry."Amount (LCY)",
        STRSUBSTNO('Amount (LCY) in payment customer entry should be %1.',ExpectedAmount));
    END;

    LOCAL PROCEDURE VerifyCorrAmountDtldVendLedgEntries@5(DocumentNo@1000 : Code[20];ExpectedAmount@1002 : Decimal);
    VAR
      DetailedVendLedgEntry@1001 : Record 380;
    BEGIN
      DetailedVendLedgEntry.SETRANGE("Document Type",DetailedVendLedgEntry."Document Type"::Payment);
      DetailedVendLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendLedgEntry.SETRANGE("Entry Type",DetailedVendLedgEntry."Entry Type"::"Correction of Remaining Amount");
      DetailedVendLedgEntry.FINDLAST;
      Assert.AreEqual(ExpectedAmount,
        DetailedVendLedgEntry."Amount (LCY)",
        STRSUBSTNO('Correction of remaining Amount (LCY) should be %1',ExpectedAmount));
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesPageHandler@24(VAR ApplyVendorEntries@1000 : TestPage 233);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Take Zero for Validation on Apply Customer Entries Page.
      GeneralLedgerSetup.GET;
      ApplyVendorEntries.ActionSetAppliesToID.INVOKE;
      Assert.AreEqual(
        0,ApplyVendorEntries.ApplnRounding.ASDECIMAL,
        STRSUBSTNO(AmountError,ApplyVendorEntries.ApplnRounding.CAPTION,0,ApplyVendorEntries.CAPTION));
      Assert.AreEqual(
        -GeneralLedgerSetup."Inv. Rounding Precision (LCY)",ApplyVendorEntries.ControlBalance.ASDECIMAL,
        STRSUBSTNO(
          AmountError,ApplyVendorEntries.ControlBalance.CAPTION,GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
          ApplyVendorEntries.CAPTION));
    END;

    BEGIN
    {
      // [FEATURE] [Application Rounding] [Purchase]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute

      Test Application Rounding entry on Detailed Ledger Entry for Vendor.
        1. Create General Journal Line with Invoice, Payment and Currency, Modify Exchange Rate and Modify General Ledger Setup
           for Application Rounding Precision 1 Apply Invoice and Check Detailed Ledger Entry for Application Rounding Precision.
        2. Create General Journal Line with Invoice, Payment and Currency, Modify Exchange Rate and Modify General Ledger Setup
           for Application Rounding Precision Zero Apply Invoice and Check Detailed Ledger Entry for Application Rounding Precision.
        3. Create General Journal Line with Invoice, Payment and Without Currency, Modify Exchange Rate and Modify General Ledger Setup
           for Application Rounding Precision 1 Apply Invoice and Check Detailed Ledger Entry for Application Rounding Precision.
        4. Create General Journal Line with Invoice, Payment and Without Currency, Modify Exchange Rate and Modify General Ledger Setup
           for Application Rounding Precision Zero Apply Invoice and Check Detailed Ledger Entry for Application Rounding Precision.
        5. Check Application Rounding and Balance field's value on Apply Vendor Entries Page.

        Covers Test Cases:
        ---------------------------------------------
        Test Function Name            TFS ID
        ---------------------------------------------
        HigherPaymentWithApplRundng     125873 to 125874
        LowerPaymentWithApplRundng      125875 to 125876
        HigherPaymentWithoutApplRundng  125877 to 125878
        LowerPaymentWithoutApplRundng   125879 to 125880

        Covers Test Cases: 264422
        -------------------------------------------------------
        Test Function Name               Test TFS ID
        -------------------------------------------------------
        ApplyVendorEntriesFieldsValue   121800
        CorrectionOfRemAmtWithCurrencyAmounts  97134
    }
    END.
  }
}

