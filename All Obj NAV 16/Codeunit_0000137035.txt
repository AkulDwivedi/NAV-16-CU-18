OBJECT Codeunit 137035 SCM PS Bugs-I
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1003 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryCosting@1035 : Codeunit 132200;
      LibraryPurchase@1013 : Codeunit 130512;
      LibraryPlanning@1033 : Codeunit 132203;
      LibrarySales@1008 : Codeunit 130509;
      LibraryManufacturing@1002 : Codeunit 132202;
      LibraryUtility@1011 : Codeunit 131000;
      LibraryInventory@1034 : Codeunit 132201;
      LibraryItemTracking@1024 : Codeunit 130502;
      LibraryWarehouse@1017 : Codeunit 132204;
      LibrarySetupStorage@1025 : Codeunit 131009;
      Assert@1009 : Codeunit 130000;
      isInitialized@1001 : Boolean;
      ErrMessageNotFoundZeroAmt@1010 : TextConst 'ENU=The WIP amount totals must be Zero.';
      ErrMessageCostNotSame@1012 : TextConst 'ENU=Cost must be Equal.';
      ErrInventoryValueCalculated@1014 : TextConst 'ENU=Inventory Value Calculated must be equal.';
      ErrCrossReferenceNo@1006 : TextConst 'ENU=There are no items with cross reference: %1';
      ErrorGeneratedMustBeSame@1007 : TextConst 'ENU=Error Generated Must Be Same.';
      ExpectedOutputMissing@1019 : TextConst 'ENU=You cannot finish line %1 on Production Order %2. It has consumption or capacity posted with no output.';
      ErrNoOfLinesMustBeEqual@1021 : TextConst 'ENU=No. of Line Must Be Equal.';
      RefText@1020 : TextConst 'ENU=%1 %2.';
      MessageCounter@1022 : Integer;
      MSG_Firm_Planned_Prod@1027 : TextConst 'ENU=Firm Planned Prod. Order';
      MSG_Average_Cost_Calc@1026 : TextConst 'ENU=Average Cost Calc. Type has been changed to Item & Location & Variant. You should now run Adjust Cost - Item Entries.';
      MSG_Average_Cost_Calc_Item@1028 : TextConst 'ENU=Average Cost Calc. Type has been changed to Item. You should now run Adjust Cost - Item Entries.';
      MSG_EXP_Cost_Yes@1023 : TextConst 'ENU=Expected Cost Posting to G/L has been changed to Yes. You should now run Post Inventory Cost to G/L.';
      ConfirmCounter@1030 : Integer;
      MSG_Average_Cost_Calc_Q@1029 : TextConst 'ENU=If you change the Average Cost Calc. Type, the program must adjust all item entries.The adjustment of all entries can take several hours.\Do you really want to change the Average Cost Calc. Type?';
      MSG_Change_Status_Q@1032 : TextConst 'ENU=Production Order';
      Msg_Still_Want_To_Finish@1038 : TextConst 'ENU=Some consumption is still missing. Do you still want to finish the order?';
      MSG_EXP_Cost_Posting_Several_Hours@1037 : TextConst 'ENU=If you change the Expected Cost Posting to G/L, the program must update table Post Value Entry to G/L.This can take several hours.\Do you really want to change the Expected Cost Posting to G/L?';
      WrongDescriptionInOrderErr@1018 : TextConst 'ENU=Wrong description in %1.';

    [Test]
    PROCEDURE CalcProdOrderLineQuantity@43();
    BEGIN
      // Create Production order Family and Check Production Order Line Quantity.
      Initialize;
      ProdOrderLineQuantity(FALSE);
    END;

    [Test]
    PROCEDURE CalcProdOrderLineQuantityUOM@46();
    BEGIN
      // Create Production order Family with one Item having alternate UOM and Check Production Order Line Quantity.
      Initialize;
      ProdOrderLineQuantity(TRUE);
    END;

    [Test]
    PROCEDURE CalcRegPlanAndCarryOutActMsg@30();
    VAR
      Item@1000 : Record 27;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1003 : Record 246;
      ProductionOrder@1006 : Record 5405;
      ItemNo@1005 : Code[20];
    BEGIN
      // Setup : Update Sales Setup.
      Initialize;

      // Create Item with Replenishment System as Production Order.Create Sales Order.
      CreateItemAndSalesOrder(Item,Item."Replenishment System"::"Prod. Order");
      ItemNo := Item."No.";

      // Create Item with Replenishment System as Purchase.Create Sales Order.
      CreateItemAndSalesOrder(Item,Item."Replenishment System"::Purchase);

      // Execute : Calculate regenerative Plan and Carry Out Action Message Plan for Production Order.
      CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Template Type"::Planning);
      CalculateRegenerativePlan(ItemNo,Item."No.");

      // Verify : Verify two Requisition Lines created for both Items.
      RequisitionLine.SETFILTER("No.",'%1|%2',ItemNo,Item."No.");
      Assert.AreEqual(2,RequisitionLine.COUNT,ErrNoOfLinesMustBeEqual);

      // Execute : Carry Out Action Message for Reference Order Type Production Order.
      CarryOutActMsgPlan(RequisitionLine,ItemNo);

      // Verify : Verify one Requisition Lines Exist after Carry Out Action Message.
      RequisitionLine.SETRANGE("No.",Item."No.");
      Assert.AreEqual(1,RequisitionLine.COUNT,ErrNoOfLinesMustBeEqual);

      // Verify Planned Production Order Created.
      FindProdOrder(ProductionOrder,ProductionOrder.Status::Planned,ItemNo);
    END;

    [Test]
    PROCEDURE CrossRefDisconBarCode@7();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1000 : Record 39;
      SalesHeader@1005 : Record 36;
      ItemCrossReference@1002 : Record 5717;
      ItemNo@1004 : Code[20];
      PurchOrderNoQty@1006 : Decimal;
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item with Variant and Item cross Reference.Create Purchase Order.
      // Update Purchase Line with Cross reference number of Type Bar Code.
      Initialize;
      ItemCrossReferenceSetup(
        PurchaseLine,ItemCrossReference,ItemCrossReference."Cross-Reference Type"::"Bar Code",
        COPYSTR(
          PurchaseLine."Buy-from Vendor No.",1,
          LibraryUtility.GetFieldLength(DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Buy-from Vendor No."))),TRUE);

      UpdateItemCrossReference(PurchaseLine,ItemCrossReference."Cross-Reference No.");
      ItemNo := PurchaseLine."No.";
      PurchOrderNoQty := PurchaseLine.Quantity;

      // Execute : Post Purchase Order.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify Cross Reference Number in Item Ledger Entry.
      VerifyCrossReferenceNo(PurchaseHeader."No.",ItemCrossReference."Cross-Reference No.");

      // Execute : Update Cross reference in Item Card.Create Sales Order and Update Cross Reference in Sales Line.
      ItemCrossReference.VALIDATE("Discontinue Bar Code",TRUE);
      ItemCrossReference.MODIFY(TRUE);
      CreateSalesOrder(SalesHeader,ItemNo,PurchOrderNoQty);
      ASSERTERROR UpdateSalesLine(SalesHeader,ItemCrossReference."Cross-Reference No.",'');

      // Verify : Verify Error message generated on Validation Cross reference Number.
      Assert.AreEqual(
        STRSUBSTNO(ErrCrossReferenceNo,ItemCrossReference."Cross-Reference No."),GETLASTERRORTEXT,ErrorGeneratedMustBeSame);
    END;

    [Test]
    PROCEDURE CrossRefPurchaseOrderUnitCost@65();
    VAR
      PurchaseLine@1004 : Record 39;
      ItemCrossReference@1002 : Record 5717;
      DirectUnitCost@1005 : Decimal;
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item. Create Purchase Order and Item cross Reference.
      Initialize;
      ItemCrossReferenceSetup(PurchaseLine,ItemCrossReference,0,'',FALSE);

      // 2. Execute : Update Cross Reference in Purchase Line.
      DirectUnitCost := PurchaseLine."Direct Unit Cost";
      UpdateItemCrossReference(PurchaseLine,ItemCrossReference."Cross-Reference No.");

      // 3. Verify : Verify Direct Unit Cost of Purchase Line.
      PurchaseLine.TESTFIELD("Direct Unit Cost",DirectUnitCost);
    END;

    [Test]
    PROCEDURE DeleteProdOrderLineConsumption@20();
    VAR
      Item@1000 : Record 27;
      ItemJournalBatch@1002 : Record 233;
      ProductionOrder@1006 : Record 5405;
      RoutingHeader@1005 : Record 99000763;
      ProductionBOMHeader@1007 : Record 99000771;
      ProdOrderNo@1001 : Code[20];
    BEGIN
      // Setup : Update Sales Setup.Create Item and Update Item Inventory.
      Initialize;

      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");

      // Create Released Production Order and Refresh it.
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // Create Consumption Journal.Go to released production order delete prod order line.Post Consumption Journal.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,'',ItemJournalBatch."Template Type"::Consumption,ProdOrderNo);
      DeleteProdOrderLine(ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Create Output Journal and Post it.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,Item."No.",ItemJournalBatch."Template Type"::Output,ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProdOrderNo);

      // Exercise : Run Adjust cost batch Job.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      LibraryCosting.PostInvtCostToGL(FALSE,WORKDATE,'');

      // Verify : WIP Account.
      VerifyTotalWIPAccountAmount(Item."No.",ProdOrderNo);
    END;

    [Test]
    PROCEDURE InventoryValueCalcRevalJrnl@24();
    VAR
      Item@1000 : Record 27;
      ItemJournalBatch@1006 : Record 233;
      ItemJournalLine@1001 : Record 83;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1003 : Record 36;
      GeneralLedgerSetup@1004 : Record 98;
      InventoryValueCalculated@1005 : Decimal;
      CalculatePer@1008 : 'Item Ledger Entry,Item';
      CalculationBase@1007 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and Update Inventory.Random values used are not important for test.
      Initialize;

      CreateItem(
        Item,Item."Costing Method"::Average,'','',Item."Manufacturing Policy",Item."Reordering Policy",Item."Replenishment System");
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(50,1));
      Item.MODIFY(TRUE);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100) + 10);

      // Create Purchase Order and Post receipt.Create Sale Order and Post it.Update Direct unit Cost and Post Invoice.
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandInt(100),LibraryRandom.RandDec(50,2));
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,Item."No.",Item.Inventory - 5); // Value used is important for test.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      UpdatePurchaseOrderDirectCost(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 2. Execute : Run Adjust cost and create Revaluation Journal.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      Item.GET(Item."No.");
      CreateItemJournalBatch(ItemJournalBatch);
      Item.SETRANGE("No.",Item."No.");
      LibraryCosting.CreateRevaluationJournal(
        ItemJournalBatch,Item,WORKDATE,ItemJournalLine."Document No.",CalculatePer::Item,FALSE,FALSE,FALSE,CalculationBase::" ",FALSE);

      // 3. Verify : Inventory Value (Calculated) in Revaluation Journal with Inventory Value at Item card.
      InventoryValueCalculated := GetInventoryValue(Item."No.");
      Item.CALCFIELDS(Inventory);
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        InventoryValueCalculated,Item."Unit Cost" * Item.Inventory,GeneralLedgerSetup."Amount Rounding Precision",
        ErrInventoryValueCalculated);
    END;

    [Test]
    PROCEDURE ItemLastDirectCost@42();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      ItemJournalLine@1004 : Record 83;
      GeneralLedgerSetup@1005 : Record 98;
      PurchaseDirectCost@1003 : Decimal;
    BEGIN
      // 1. Setup Update Sales and Inventory Setup.Create Negative Adjustment and Post it. Random values used are not important for test.
      Initialize;

      CreateItem(
        Item,Item."Costing Method"::Average,'','',Item."Manufacturing Policy",Item."Reordering Policy",Item."Replenishment System");
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100));

      // 2 : Create Purchase Order and Post it.Random values used are not important for test.
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandInt(10),LibraryRandom.RandDec(50,2));
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      PurchaseDirectCost := PurchaseLine."Direct Unit Cost";
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3 : Verify Item Last Direct Cost.
      Item.GET(Item."No.");
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        PurchaseDirectCost,Item."Last Direct Cost",GeneralLedgerSetup."Amount Rounding Precision",ErrMessageCostNotSame);
    END;

    [Test]
    PROCEDURE OutputJrnlEndingTime@64();
    VAR
      Item@1001 : Record 27;
      ProductionOrder@1003 : Record 5405;
      ItemJournalBatch@1004 : Record 233;
      ItemLedgerEntry@1005 : Record 32;
      RoutingHeader@1007 : Record 99000763;
      ProductionBOMHeader@1006 : Record 99000771;
      ProdOrderNo@1002 : Code[20];
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and Update Item Inventory.
      Initialize;

      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Stock",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");

      // Create Released Production Order and Refresh it.
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // 2. Execute : Create Output Journal. Update Start Time and End time, End time must be less than Start time.Post it.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,Item."No.",ItemJournalBatch."Template Type"::Output,ProdOrderNo);
      UpdateOutputJrnl(ProdOrderNo,000000T + RANDOM(LibraryUtility.ConvertHoursToMilliSec(12)));
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // 3. Verify : Verify Item Ledger Entry Posted of Entry Type Output.
      ItemLedgerEntry.SETRANGE("Document No.",ProdOrderNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);
      ItemLedgerEntry.FINDFIRST;
    END;

    [Test]
    PROCEDURE ProdOrderCompChangeWithVariant@59();
    VAR
      Item@1000 : Record 27;
      ItemVariant@1002 : Record 5401;
      ProductionOrder@1006 : Record 5405;
      ProdOrderComponent@1007 : Record 5407;
      ProductionBOMHeader@1008 : Record 99000771;
      ProdOrderNo@1001 : Code[20];
      ItemNo@1003 : Code[20];
      ComponentItemDescription@1004 : Code[50];
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and Update Item Inventory.Random values used are not important for test.
      Initialize;

      CreateItem(
        Item,Item."Costing Method",'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");
      ItemNo := Item."No.";
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      ComponentItemDescription := ItemVariant.Description;

      // Create Finished Item.
      CreateProdBOM(ProductionBOMHeader,Item,Item."Base Unit of Measure");
      CreateItem(
        Item,Item."Costing Method",'',ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Stock",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");

      // 2. Execute : Create Released Production Order with Stock keeping Unit Location and Refresh it and Create
      // Production order component.
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');
      UpdateProdOrderComponent(ProdOrderComponent,ProdOrderNo,ItemNo,ItemVariant.Code);

      // 3. Verify : Verify Component Item Description.
      ProdOrderComponent.TESTFIELD(Description,ComponentItemDescription);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandler,FirmPlannedProdOrderMessageHandler,ConfirmHandler)]
    PROCEDURE ProdOrderOutputMissing@71();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      ItemJournalLine@1006 : Record 83;
      ProdOrderLine@1007 : Record 5406;
      RoutingHeader@1002 : Record 99000763;
      ProductionBOMHeader@1008 : Record 99000771;
      ProductionOrder@1003 : Record 5405;
      ProdOrderNo@1005 : Code[20];
    BEGIN
      // 1. Setup : Update Sales Setup.Create and Update Item Inventory.
      Initialize;

      CreateItem(
        Item,Item."Costing Method",'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::Purchase);
      UpdateItem(Item,Item."Flushing Method"::Backward,Item."Reordering Policy",0);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100));

      // Create Routing with Flushing Method Backward.Create Production BOM.
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method"::Backward);
      CreateProdBOM(ProductionBOMHeader,Item,Item."Base Unit of Measure");

      // Create Finished Item.
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");
      UpdateItem(Item,Item."Flushing Method"::Manual,Item."Reordering Policy",0);

      // Create Sales Order and Create Firm Planned Prod order using order Planning.Change Status to Released.
      CreateSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandInt(10));
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesHeader."No.",Item."No.");
      ProdOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);

      // 2. Execute : Change Status from Released to Finished.
      ASSERTERROR LibraryManufacturing.ChangeStatusReleasedToFinished(ProdOrderNo);

      // 3. Verify: Verify Output entry missing.
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDFIRST;
      Assert.AreEqual(
        STRSUBSTNO(ExpectedOutputMissing,ProdOrderLine."Line No.",ProdOrderLine."Prod. Order No."),GETLASTERRORTEXT,
        ErrorGeneratedMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE QuantityOnItemLedgerEntryAfterPostingItemJournal@28();
    VAR
      Item@1002 : Record 27;
      Item2@1004 : Record 27;
      ItemLedgerEntry@1006 : Record 32;
      LocationCode@1001 : Code[10];
      Quantity@1003 : Integer;
    BEGIN
      // Verify Quantity on Item Ledger Entry after Posting Item Journal.

      // Setup: Create and modify Location and Items.Post Item Journal.
      Initialize;
      LocationCode := CreateAndModifyLocationCode;
      CreateAndModifyItem(Item,Item."Replenishment System"::"Prod. Order",'','','');
      CreateAndModifyItem(
        Item2,Item."Replenishment System"::Purchase,CreateAndModifyItemTrackingCode,LibraryUtility.GetGlobalNoSeriesCode,'');
      Quantity := LibraryRandom.RandIntInRange(2,10);

      // Exercise: Create and Post Item Journal.
      CreateAndPostItemJournalLine(Item."No.",Item2."No.",LocationCode,Quantity);

      // Verify: Verify Quantity and Location Code on Item Ledger Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry,Item."No.",LocationCode,Quantity);
      VerifyItemLedgerEntry(ItemLedgerEntry,Item2."No.",LocationCode,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerAsTrue,CreateInvtPutawayPickMvmtRequestPageHandler,MessageHandler)]
    PROCEDURE QuantityAfterPostingWareHouseInventoryActivity@41();
    VAR
      Item@1002 : Record 27;
      Item2@1004 : Record 27;
      Item3@1005 : Record 27;
      ProductionOrder@1003 : Record 5405;
      WarehouseEmployee@1007 : Record 7301;
      ItemLedgerEntry@1010 : Record 32;
      LocationCode@1000 : Code[10];
      WarehouseActivityHeaderSourceNo@1006 : Code[20];
      Quantity@1011 : Integer;
    BEGIN
      // Verify Quantity on Item Ledger Entry after Posting Warehouse Inventory Activity.

      // 1. Setup: Create and modify Location and Items.Post Item Journal.Create and Refresh Prod. Order.
      Initialize;
      LocationCode := CreateAndModifyLocationCode;
      CreateAndModifyItem(Item,Item."Replenishment System"::"Prod. Order",'','','');
      CreateAndModifyItem(
        Item2,Item."Replenishment System"::Purchase,CreateAndModifyItemTrackingCode,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreateAndModifyItem(
        Item3,Item."Replenishment System"::Purchase,'','',
        CreateAndModifyProductionBOM(Item."Base Unit of Measure",Item."No.",Item2."No."));
      Quantity := LibraryRandom.RandIntInRange(2,10);
      CreateAndPostItemJournalLine(Item."No.",Item2."No.",LocationCode,Quantity);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,FALSE);
      CreateAndRefreshProductionOrder(ProductionOrder,Item3."No.",Item2."No.",LocationCode);

      // Exercise: Create and Post WareHouse Inventory Activity
      WarehouseActivityHeaderSourceNo :=
        CreateAndPostWareHouseInventoryActivity(ProductionOrder."Source No.",Item."No.",Item2."No.",Quantity);

      // 3. Verify: Verify Invoiced Quantity on Item Ledger Entry.
      ItemLedgerEntry.SETRANGE("Document No.",WarehouseActivityHeaderSourceNo);
      VerifyItemLedgerEntry(ItemLedgerEntry,Item."No.",LocationCode,-1 * Quantity);
    END;

    [Test]
    PROCEDURE RefreshProdOrder@49();
    VAR
      Item@1005 : Record 27;
      ProductionOrder@1002 : Record 5405;
      ProdOrderLine@1006 : Record 5406;
      RoutingHeader@1001 : Record 99000763;
      ProductionBOMHeader@1007 : Record 99000771;
      ProdOrderNo@1004 : Code[20];
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and attach it to BOM.
      Initialize;

      CreateItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");
      CreateProdBOM(ProductionBOMHeader,Item,Item."Base Unit of Measure");
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");

      // Create Finished Item.
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");

      // 2. Execute : Create Released Production Order,refresh it.
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // 3. Verify : Production Order Line Created.
      FindProdOrderLine(ProdOrderLine,ProdOrderNo,ProductionOrder.Status);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandler,FirmPlannedProdOrderMessageHandler)]
    PROCEDURE SalesOrderUnitCost@1();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1004 : Record 36;
      ItemJournalLine@1001 : Record 83;
      SalesLine@1002 : Record 37;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionOrder@1006 : Record 5405;
      RoutingHeader@1008 : Record 99000763;
      ProdOrderNo@1000 : Code[20];
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and Update Item Inventory.Random values used are not important for test.
      Initialize;

      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100));

      // Create Sales Order and Auto reserve.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,Item."No.",Item.Inventory);
      AutoReserveSalesLine(SalesHeader);

      // Create Sales Order and Create Firm Planned Prod order using order Planning.
      CLEAR(SalesHeader);
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,Item."No.",Item.Inventory);
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesHeader."No.",Item."No.");

      // 2. Execute : Find firm planned order and Change Status to released with Update unit cost as TRUE.
      ProdOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);

      // 3. Verify : Sales Order Unit Cost.
      FindSalesLine(SalesHeader,SalesLine);
      VerifyProdComponentUnitCost(ProductionOrder.Status::Released,ProdOrderNo,SalesLine."Unit Cost");
    END;

    [Test]
    PROCEDURE SelectCrossReferenceWithType@61();
    VAR
      PurchaseLine@1004 : Record 39;
      ItemCrossReference@1002 : Record 5717;
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item. Create Purchase Order and Item cross Reference with Type as Bar Code.
      Initialize;
      ItemCrossReferenceSetup(
        PurchaseLine,ItemCrossReference,ItemCrossReference."Cross-Reference Type"::"Bar Code",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemCrossReference.FIELDNO("Cross-Reference Type No."),DATABASE::"Item Cross Reference"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Item Cross Reference",ItemCrossReference.FIELDNO("Cross-Reference Type No."))),
        FALSE);

      // 2. Execute : Update Cross Reference in Purchase Line.
      ASSERTERROR UpdateItemCrossReference(PurchaseLine,ItemCrossReference."Cross-Reference No.");

      // 3. Verify : Verify Error message generated on Validation Cross reference Number.
      Assert.AreEqual(
        STRSUBSTNO(ErrCrossReferenceNo,ItemCrossReference."Cross-Reference No."),GETLASTERRORTEXT,ErrorGeneratedMustBeSame);
    END;

    [Test]
    [HandlerFunctions(AvgCostCalcTypeConfirmHandler,AvgCostCalcTypeMessageHandler)]
    PROCEDURE SKUUnitCost@40();
    VAR
      Item@1001 : Record 27;
      StockkeepingUnit@1002 : Record 5700;
      ProductionOrder@1005 : Record 5405;
      ProductionBOMHeader@1000 : Record 99000771;
      InventorySetup@1003 : Record 313;
      ProductionOrderNo@1006 : Code[20];
    BEGIN
      // 1. Setup : Update Sales and Inventory Setup.
      Initialize;

      UpdateInventorySetup(InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant",FALSE,FALSE);
      LibraryERM.SetUseLegacyGLEntryLocking(FALSE);

      // Create BOM Item and Create Stock keeping Unit.
      CreateItem(
        Item,Item."Costing Method",'','',Item."Manufacturing Policy"::"Make-to-Stock",Item."Reordering Policy",
        Item."Replenishment System");
      CreateSKUAndUpdateUnitCost(StockkeepingUnit,Item."No.");

      // Create Finished Item.
      CreateProdBOM(ProductionBOMHeader,Item,Item."Base Unit of Measure");
      CreateItem(
        Item,Item."Costing Method",'',ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Stock",
        Item."Reordering Policy",Item."Replenishment System");

      // 2. Execute : Create Released Production Order with Stock keeping Unit Location and Refresh it.
      ProductionOrderNo :=
        CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",StockkeepingUnit."Location Code");

      // 3. Verify : Production order Component cost with SKU Unit Cost.
      VerifyProdComponentUnitCost(ProductionOrder.Status::Released,ProductionOrderNo,StockkeepingUnit."Unit Cost");
    END;

    [Test]
    PROCEDURE SpecialOrderCarryOutActMsg@80();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      SalesHeader@1003 : Record 36;
      Vendor@1004 : Record 23;
      Purchasing@1005 : Record 5721;
      PurchaseHeader@1007 : Record 38;
      PurchInvHeader@1009 : Record 122;
      RequisitionWkshName@1010 : Record 245;
      RequisitionLine@1006 : Record 246;
      ItemVendor@1011 : Record 99;
      PurchaseHeaderNo@1008 : Code[20];
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and Vendor. Update Item Inventory.
      Initialize;

      CreateItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::Purchase);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryInventory.CreateItemVendor(ItemVendor,Vendor."No.",Item."No.");
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100));

      // Create Sales Order and Update sales line to make it a Special Order.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,Item."No.",Item.Inventory);
      Purchasing.SETRANGE("Special Order",TRUE);
      Purchasing.FINDFIRST;
      UpdateSalesLine(SalesHeader,'',Purchasing.Code);

      // Create Requisition Line. Get sales Order.Perform Carry out Action Message.
      CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Template Type"::"Req.");
      GetSalesOrder(RequisitionLine,Item."No.");
      UpdateReqLine(RequisitionLine,Vendor."No.",Item."No.");
      LibraryPlanning.CarryOutReqWksh(
        RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,
        STRSUBSTNO(RefText,RequisitionLine.FIELDCAPTION("Vendor No."),RequisitionLine."Vendor No."));

      // Find Purchase Order and Post Reciept.Post Shipment,
      FindPurchaseHeader(PurchaseHeader,Vendor."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // 2. Execute : Update Direct Unit Cost on Purchase Line and Post Purchase Invoice.
      UpdatePurchaseOrderDirectCost(PurchaseHeader);
      PurchaseHeaderNo := PurchaseHeader."No.";
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify : Verify Purchase Invoice posted.
      PurchInvHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchInvHeader.SETRANGE("Order No.",PurchaseHeaderNo);
      PurchInvHeader.FINDFIRST;
    END;

    [Test]
    PROCEDURE UOMComponentCost@36();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      ProductionOrder@1006 : Record 5405;
      ProductionBOMHeader@1005 : Record 99000771;
      UnitOfMeasure@1007 : Record 204;
      ProductionOrderNo@1002 : Code[20];
      ComponentUnitCost@1003 : Decimal;
    BEGIN
      // 1. Setup : Update Sales and Inventory Setup.
      Initialize;

      // Create BOM Item and Create Unit of measure code.
      CreateItem(
        Item,Item."Costing Method",'','',Item."Manufacturing Policy"::"Make-to-Stock",Item."Reordering Policy",
        Item."Replenishment System");
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,1);
      ComponentUnitCost := Item."Unit Cost";

      // Create Finished Item.
      CreateProdBOM(ProductionBOMHeader,Item,Item."Base Unit of Measure");
      CreateItem(
        Item,Item."Costing Method",'',ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Stock",
        Item."Reordering Policy",Item."Replenishment System");

      // 2. Execute : Create Released Production Order with Stock keeping Unit Location and Refresh it.
      ProductionOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // 3. Verify : Production order component cost with Unit Cost in UOM.
      VerifyProdComponentUnitCost(
        ProductionOrder.Status::Released,ProductionOrderNo,ComponentUnitCost * ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    PROCEDURE UOMComponentCostManual@68();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1006 : Record 83;
      ItemUnitOfMeasure@1007 : Record 5404;
      ItemJournalBatch@1002 : Record 233;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1009 : Record 99000763;
      ProductionBOMHeader@1003 : Record 99000771;
      UnitOfMeasure@1010 : Record 204;
      ProdOrderNo@1005 : Code[20];
      ComponentUnitCost@1008 : Decimal;
    BEGIN
      // 1. Setup : Update Sales Setup.Create Item and attach Alternate Unit of measure to it.
      Initialize;

      CreateItem(
        Item,Item."Costing Method",'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::Purchase);
      UpdateItem(Item,Item."Flushing Method"::Backward,Item."Reordering Policy",0);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,1);
      ComponentUnitCost := Item."Unit Cost";

      // Update Item Inventory.
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100) + 50);

      // Create Production BOM and Production BOM line with Alternate unit of measure.
      CreateProdBOM(ProductionBOMHeader,Item,ItemUnitOfMeasure.Code);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");

      // Create Finished Item.
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");
      UpdateItem(Item,Item."Flushing Method"::Manual,Item."Reordering Policy",0);

      // Create Released Production Order and Refresh it.
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // Create Output Journal and Post it.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,Item."No.",ItemJournalBatch."Template Type"::Output,ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // 2. Execute : Change Status from Released To Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProdOrderNo);

      // 3. Verify : Production Components Cost.
      VerifyProdComponentUnitCost(
        ProductionOrder.Status::Finished,ProdOrderNo,ComponentUnitCost * ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ValueEntryCostAmtExpNoConsmpConfirmHandler,ExpCostMessageHandler)]
    PROCEDURE ValueEntryCostAmtExpNoConsmp@38();
    VAR
      Item@1005 : Record 27;
      ItemJournalBatch@1004 : Record 233;
      ProductionOrder@1002 : Record 5405;
      RoutingHeader@1008 : Record 99000763;
      ProductionBOMHeader@1007 : Record 99000771;
      InventorySetup@1000 : Record 313;
      ProdOrderNo@1001 : Code[20];
    BEGIN
      // 1. Setup : Update Sales and Inventory Setup.
      Initialize;

      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      InventorySetup.GET;
      UpdateInventorySetup(InventorySetup."Average Cost Calc. Type",TRUE,TRUE);
      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Stock",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");

      // Create Released Production Order and Refresh it.
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // Create Output Journal and Post it.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,Item."No.",ItemJournalBatch."Template Type"::Output,ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // 2. Execute : Change Status from Released To Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProdOrderNo);

      // 3. Verify : Value Entry Cost Amount Expected.
      VerifyValueEntry(ProdOrderNo,Item."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerAsTrue)]
    PROCEDURE RoutingNoOnProductionOrderLine@97();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      ItemJournalLine@1002 : Record 83;
      ProductionBOMHeader@1005 : Record 99000771;
      ProductionOrder@1008 : Record 5405;
      ProdOrderLine@1009 : Record 5406;
      RoutingHeader@1001 : Record 99000763;
      CreateProdOrderLines@1010 : Codeunit 99000787;
      Direction@1011 : 'Forward,Backward';
      Quantity@1003 : Decimal;
    BEGIN
      // Check Routing No. on Prod. Order Line after changing Status from Released to Finished.

      // Setup : Create Production BOM,Production Order and Production Order Lines and Refresh Production Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateProdBOM(ProductionBOMHeader,Item,'');
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method"::Manual);
      CreateItem(
        Item2,Item2."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",
        Item2."Manufacturing Policy"::"Make-to-Stock",Item2."Reordering Policy",Item2."Replenishment System"::Purchase);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item2."No.",Quantity);
      CreateProdOrderLines.Copy(ProductionOrder,Direction::Backward,'',TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Exercise : Change Status from Released To Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify : Verify Quantity on Production Order Header and Routing No. On Prod. Order Line.
      FindProdOrder(ProductionOrder,ProductionOrder.Status::Finished,Item2."No.");
      FindProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status::Finished);
      ProductionOrder.TESTFIELD(Quantity,Quantity);
      ProdOrderLine.TESTFIELD("Routing No.",Item2."Routing No.");
    END;

    [Test]
    PROCEDURE ItemCrossReferenceDescriptionInPurchOrder@96();
    VAR
      ItemCrossReference@1002 : Record 5717;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      VendNo@1000 : Code[20];
    BEGIN
      // Check that purchase order description validates with cross reference description

      Initialize;
      VendNo := LibraryPurchase.CreateVendorNo;
      CreateItemWithCrossReference(
        ItemCrossReference,ItemCrossReference."Cross-Reference Type"::Vendor,VendNo);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,VendNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemCrossReference."Item No.",LibraryRandom.RandInt(100));
      Assert.AreEqual(
        ItemCrossReference.Description,PurchaseLine.Description,STRSUBSTNO(WrongDescriptionInOrderErr,PurchaseHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ItemCrossReferenceDescriptionInSalesOrder@98();
    VAR
      ItemCrossReference@1002 : Record 5717;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      CustNo@1003 : Code[20];
    BEGIN
      // Check that sales order description validates with cross reference description

      Initialize;
      CustNo := LibrarySales.CreateCustomerNo;
      CreateItemWithCrossReference(
        ItemCrossReference,ItemCrossReference."Cross-Reference Type"::Customer,CustNo);
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::Order,CustNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,ItemCrossReference."Item No.",LibraryRandom.RandInt(100));
      Assert.AreEqual(
        ItemCrossReference.Description,SalesLine.Description,STRSUBSTNO(WrongDescriptionInOrderErr,SalesHeader.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(OutputJournalItemLookupHandler)]
    PROCEDURE OutputJournalForProdOrderWithMultipleLinesForSameItem@101();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
      RoutingHeader@1005 : Record 99000763;
      ProductionBOMHeader@1007 : Record 99000771;
      ProdOrderLine@1008 : Record 5406;
      ProdOrderLine2@1011 : Record 5406;
      OutputJournal@1009 : TestPage 99000823;
    BEGIN
      // Setup : Update Sales Setup.Create Item and Update Item Inventory.
      Initialize;

      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");

      // Create Released Production Order and Refresh it.
      CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.",'');

      // Add second line for the same item
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDLAST;
      ProdOrderLine2 := ProdOrderLine;
      ProdOrderLine2."Line No." := ProdOrderLine."Line No." + 10000;
      ProdOrderLine2.Quantity := 2 * ProdOrderLine.Quantity;
      ProdOrderLine2.INSERT;
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,TRUE,FALSE);

      // Create Output Journal and Post it.
      // LibraryInventory.CreateItemJournal(ItemJournalBatch,Item."No.",ItemJournalBatch."Template Type"::Output,ProdOrderNo);
      OutputJournal.OPENEDIT;
      OutputJournal."Order No.".SETVALUE(ProductionOrder."No.");
      OutputJournal."Order Line No.".SETVALUE(ProdOrderLine2."Line No.");
      OutputJournal."Item No.".LOOKUP;
      OutputJournal."Order Line No.".ASSERTEQUALS(ProdOrderLine2."Line No.");
      OutputJournal.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE NoDateConflictWarningTrackedNotReservedPurchaseOrder@34();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseOrder@1003 : TestPage 50;
      ReceiptDate@1004 : Date;
    BEGIN
      // [FEATURE] [Purchase] [Item Tracking]
      // [SCENARIO 217878] Changing expected receipt date in a purchase order should not raise the date conflict warning when the item is tracked and not reserved

      Initialize;

      // [GIVEN] Lot tracked item "I"
      CreateAndModifyItem(
        Item,Item."Replenishment System"::Purchase,CreateAndModifyItemTrackingCode,LibraryUtility.GetGlobalNoSeriesCode,'');

      // [GIVEN] Purchase order for the item "I"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(100));
      ReceiptDate := PurchaseLine."Expected Receipt Date";

      // [GIVEN] Assign lot no. to the purchase order line
      PurchaseLine.OpenItemTrackingLines;

      // [WHEN] Move expected receipt date in the order line to an earlier day
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.GOTORECORD(PurchaseHeader);
      PurchaseOrder.PurchLines."Expected Receipt Date".SETVALUE(PurchaseLine."Expected Receipt Date" - 1);
      PurchaseOrder.OK.INVOKE;

      // [THEN] Expected receipt date is updated without warning
      PurchaseLine.FIND;
      PurchaseLine.TESTFIELD("Expected Receipt Date",ReceiptDate - 1);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibrarySales.SetCreditWarningsToNoWarnings;
      LibrarySales.SetStockoutWarning(FALSE);
      CLEAR(MessageCounter);
      CLEAR(ConfirmCounter);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      NoSeriesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AutoReserveSalesLine@11(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Auto Reserve.
      FindSalesLine(SalesHeader,SalesLine);
      LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE CalculateRegenerativePlan@85(ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<-1M>',WORKDATE),CALCDATE('<-1M>',WORKDATE));
    END;

    LOCAL PROCEDURE CarryOutActMsgPlan@82(VAR RequisitionLine@1000 : Record 246;No@1005 : Code[20]);
    VAR
      NewProdOrderChoice@1004 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      NewPurchOrderChoice@1003 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      NewTransOrderChoice@1002 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      NewAsmOrderChoice@1006 : ' ,Make Assembly Orders,Make Assembly Orders & Print';
    BEGIN
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutPlanWksh(
        RequisitionLine,NewProdOrderChoice::Planned,NewPurchOrderChoice::" ",NewTransOrderChoice::" ",NewAsmOrderChoice::" ",'','',
        '','');
    END;

    LOCAL PROCEDURE ConvertMessage@89(ErrorMessage@1000 : Text[1024]) : Text[1024];
    VAR
      NewLine@1001 : Text[1];
    BEGIN
      // Remove New Line Character from Error Message.
      NewLine[1] := 13;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    LOCAL PROCEDURE CreateAndModifyItem@78(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;ItemTrackingCode@1002 : Code[10];LotNos@1003 : Code[10];ProductionBOMHeaderNo@1004 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Lot Nos.",LotNos);
      Item.VALIDATE("Production BOM No.",ProductionBOMHeaderNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyItemJournalLine@81(JournalTemplateName@1001 : Code[10];ItemJournalBatchName@1003 : Code[10];ItemNo@1005 : Code[20];LocationCode@1002 : Code[10];Quantity@1004 : Integer);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,JournalTemplateName,ItemJournalBatchName,ItemJournalLine."Entry Type"::Purchase,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyItemTrackingCode@100() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateAndModifyLocationCode@22() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateAndModifyProductionBOM@94(BaseUnitofMeasure@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20]) : Code[20];
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitofMeasure);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo2,LibraryRandom.RandInt(10));
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      EXIT(ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@111(ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20];LocationCode@1008 : Code[10];Quantity@1009 : Integer);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1004 : Record 82;
      ItemJournal@1005 : TestPage 40;
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      CreateAndModifyItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemNo2,LocationCode,Quantity);
      CreateAndModifyItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemNo,LocationCode,Quantity);
      COMMIT;  // Due to a limitation in Page Testability, COMMIT is needed in this case.
      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalBatch.Name);
      ItemJournal.ItemTrackingLines.INVOKE;
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJrnl@25(EntryType@1002 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Create Item Journal to populate Item Quantity.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostWareHouseInventoryActivity@93(ProductionOrderSourceNo@1000 : Code[20];ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];Quantity@1003 : Integer) : Code[20];
    VAR
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityHeader.SETRANGE("Destination No.",ProductionOrderSourceNo);
      WarehouseActivityHeader.FINDFIRST;
      WarehouseActivityLine.SETRANGE("No.",WarehouseActivityHeader."No.");
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.VALIDATE("Qty. to Handle",Quantity);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo2);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.DELETE;
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);
      EXIT(WarehouseActivityHeader."Source No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@92(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];ItemNo2@1004 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      ProdOrderComponents@1003 : TestPage 99000818;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandInt(10));
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      ProdOrderComponents.OPENVIEW;
      ProdOrderComponents.FILTER.SETFILTER("Item No.",ItemNo2);
      ProdOrderComponents.ItemTrackingLines.INVOKE;
      ProductionOrder.CreateInvtPutAwayPick;
    END;

    LOCAL PROCEDURE CreateItem@48(VAR Item@1000 : Record 27;CostingMethod@1004 : Option;RoutingNo@1001 : Code[20];ProductionBOMNo@1003 : Code[20];ManufacturingPolicy@1005 : Option;ReorderingPolicy@1006 : Option;ReplenishmentSystem@1007 : Option);
    BEGIN
      // Random values used are not important for test.
      LibraryManufacturing.CreateItemManufacturing(
        Item,CostingMethod,LibraryRandom.RandDec(50,2) + LibraryRandom.RandDec(10,2),ReorderingPolicy,
        Item."Flushing Method",RoutingNo,ProductionBOMNo);

      Item.VALIDATE("Manufacturing Policy",ManufacturingPolicy);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithCrossReference@99(VAR ItemCrossReference@1000 : Record 5717;CrossRefType@1002 : Option;CrossRefTypeNo@1003 : Code[30]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemCrossReference(
        ItemCrossReference,Item."No.",CrossRefType,CrossRefTypeNo);
      ItemCrossReference.VALIDATE(Description,LibraryUtility.GenerateGUID);
      ItemCrossReference.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAndSalesOrder@83(VAR Item@1001 : Record 27;ReplenishmentSystem@1000 : Option);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CreateItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        ReplenishmentSystem);
      UpdateItem(Item,Item."Flushing Method",Item."Reordering Policy"::"Fixed Reorder Qty.",LibraryRandom.RandInt(10));
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,Item."No.",Item.Inventory);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@95(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Revaluation);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@69(VAR MachineCenter@1003 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random values used are important for test.Calculate calendar.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
    END;

    LOCAL PROCEDURE CreateProdBOM@44(VAR ProductionBOMHeader@1000 : Record 99000771;Item@1002 : Record 27;UnitOfMeasureCode@1003 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);
      ProductionBOMLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdBOMUpdateInventory@5(VAR ProductionBOMHeader@1000 : Record 99000771);
    VAR
      Item@1002 : Record 27;
      ItemJournalLine@1005 : Record 83;
      ItemNo@1001 : Code[20];
    BEGIN
      CreateItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");
      ItemNo := Item."No.";
      CLEAR(Item);
      CreateItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Stock",Item."Reordering Policy",
        Item."Replenishment System");
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ItemNo,Item."No.",1); // Value important for Test.

      // Update Production BOM Inventory.
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandInt(100) + 100);
      CreateAndPostItemJrnl(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandInt(100) + 100);
    END;

    LOCAL PROCEDURE CreateProductionFamily@52(VAR Family@1000 : Record 99000773;Item@1002 : Record 27;Item2@1003 : Record 27);
    VAR
      FamilyLine@1001 : Record 99000774;
    BEGIN
      LibraryManufacturing.CreateFamily(Family);
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",Item."No.",LibraryRandom.RandInt(100));
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",Item2."No.",LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;ItemNo@1004 : Code[20];Quantity@1001 : Decimal;DirectUnitCost@1002 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Order with One Item Line.Random values used are not important for test.
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,Quantity,'',0D);
      UpdateDirectUnitCostPurchaseLine(PurchaseLine,DirectUnitCost);
      UpdateVendorInvoiceNoPurchaseHeader(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateRefreshRelProdOrder@3(VAR ProductionOrder@1000 : Record 5405;SourceType@1003 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10]) : Code[20];
    BEGIN
      // Random values used are not important for test.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,SourceType,SourceNo,LibraryRandom.RandInt(5));
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);

      // Refresh Production order.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      EXIT(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateRequisitionLine@76(VAR RequisitionLine@1001 : Record 246;TemplateType@1000 : Option);
    VAR
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",TemplateType);
      RequisitionWkshName.FINDFIRST;

      RequisitionLine.INIT;
      RequisitionLine.VALIDATE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.VALIDATE("Journal Batch Name",RequisitionWkshName.Name);
    END;

    LOCAL PROCEDURE CreateRoutingLine@17(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random is used, values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateRoutingSetup@9(VAR RoutingHeader@1001 : Record 99000763;FlushingMethod@1000 : Option);
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      MachineCenter@1002 : Record 99000758;
    BEGIN
      CreateWorkCenter(WorkCenter,FlushingMethod);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,Quantity,'',0D);
    END;

    LOCAL PROCEDURE CreateSKUAndUpdateUnitCost@32(VAR StockkeepingUnit@1004 : Record 5700;ItemNo@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE);

      // Update SKU Unit Cost.Random values used are not important for test.
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      StockkeepingUnit.FINDFIRST;
      StockkeepingUnit.VALIDATE("Unit Cost",StockkeepingUnit."Unit Cost" + LibraryRandom.RandDec(10,2));
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@70(VAR WorkCenter@1001 : Record 99000754;FlushingMethod@1004 : Option);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Flushing Method",FlushingMethod);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteProdOrderLine@18(ProdOrderNo@1000 : Code[20]);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDLAST;
      ProdOrderLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@67(VAR ItemLedgerEntry@1002 : Record 32;EntryType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindLastOperationNo@19(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE FindProdOrder@66(VAR ProductionOrder@1002 : Record 5405;Status@1000 : Option;SourceNo@1001 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProdOrderLine@57(VAR ProdOrderLine@1001 : Record 5406;ProdOrderNo@1000 : Code[20];Status@1002 : Option);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDSET;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@79(VAR PurchaseHeader@1000 : Record 38;BuyfromVendorNo@1001 : Code[20]);
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyfromVendorNo);
      PurchaseHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@60(VAR PurchaseLine@1001 : Record 39;DocumentNo@1000 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@33(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetInventoryValue@31(ItemNo@1000 : Code[20]) : Decimal;
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      EXIT(ItemJournalLine."Inventory Value (Calculated)");
    END;

    LOCAL PROCEDURE GetSalesOrder@74(VAR RequisitionLine@1004 : Record 246;No@1000 : Code[20]);
    VAR
      SalesLine@1003 : Record 37;
      GetSalesOrders@1002 : Report 698;
      NewRetrieveDimensionsFrom@1001 : 'Item,Sales Line';
    BEGIN
      SalesLine.SETRANGE("No.",No);
      GetSalesOrders.SetReqWkshLine(RequisitionLine,1);  // value used is important for test.
      GetSalesOrders.SETTABLEVIEW(SalesLine);
      GetSalesOrders.InitializeRequest(NewRetrieveDimensionsFrom::Item);
      GetSalesOrders.USEREQUESTPAGE(FALSE);
      GetSalesOrders.RUN;
    END;

    LOCAL PROCEDURE ItemCrossReferenceSetup@8(VAR PurchaseLine@1000 : Record 39;VAR ItemCrossReference@1006 : Record 5717;CrossReferenceType@1002 : Option;CrossReferenceTypeNo@1001 : Code[10];VariantExist@1007 : Boolean);
    VAR
      PurchaseHeader@1005 : Record 38;
      Item@1003 : Record 27;
      ItemVariant@1008 : Record 5401;
    BEGIN
      // Update Sales Setup.Create Item and Item Variant.Create Item cross Reference.
      // Random values used are not important for test.

      CreateItem(
        Item,Item."Costing Method",'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");
      IF VariantExist THEN
        LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreatePurchaseOrder(PurchaseHeader,Item."No.",LibraryRandom.RandInt(100),Item."Unit Cost");
      LibraryInventory.CreateItemCrossReference(ItemCrossReference,Item."No.",CrossReferenceType,CrossReferenceTypeNo);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE NoSeriesSetup@6();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ProdOrderLineQuantity@63(UOMExist@1000 : Boolean);
    VAR
      Item@1007 : Record 27;
      ItemUnitOfMeasure@1006 : Record 5404;
      ProductionOrder@1004 : Record 5405;
      TempItem@1003 : TEMPORARY Record 27;
      ProductionBOMHeader@1008 : Record 99000771;
      Family@1010 : Record 99000773;
      ProdOrderNo@1002 : Code[20];
    BEGIN
      // 1. Setup : Update Sales and Inventory Setup.Create Finished Item.
      // Create alternate unit of measure and attach the same to Item.Create second Finished Item.

      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateItem(
        Item,Item."Costing Method"::Standard,'',ProductionBOMHeader."No.",Item."Manufacturing Policy",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");
      IF UOMExist THEN
        LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      TransferItemToTemp(TempItem,Item);
      CreateProdBOMUpdateInventory(ProductionBOMHeader);
      CreateItem(
        Item,Item."Costing Method"::Standard,'',ProductionBOMHeader."No.",Item."Manufacturing Policy",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");

      // Create Family and Update unit of measure with alternate unit of measure.
      // Create and Refresh Released Production Order.Refresh it.
      CreateProductionFamily(Family,TempItem,Item);
      IF UOMExist THEN
        UpdateFamilyUOM(Family."No.",TempItem."No.",ItemUnitOfMeasure.Code);
      ProdOrderNo := CreateRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Family,Family."No.",'');

      // 3. Verify : Family Quantity with Production Order line Quantity.
      VerifyFamilyProdOrderQuantity(ProdOrderNo,Family."No.");
    END;

    LOCAL PROCEDURE TransferItemToTemp@53(VAR TempItem@1000 : TEMPORARY Record 27;VAR Item@1001 : Record 27);
    BEGIN
      Item.SETRANGE("No.",Item."No.");
      Item.FINDFIRST;
      TempItem := Item;
      TempItem.INSERT;
    END;

    LOCAL PROCEDURE UpdateDirectUnitCostPurchaseLine@15(VAR PurchaseLine@1000 : Record 39;DirectUnitCost@1001 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFamilyUOM@23(FamilyNo@1002 : Code[20];ItemNo@1000 : Code[20];UnitOfMeasureCode@1003 : Code[10]);
    VAR
      FamilyLine@1001 : Record 99000774;
    BEGIN
      FamilyLine.SETRANGE("Family No.",FamilyNo);
      FamilyLine.SETRANGE("Item No.",ItemNo);
      FamilyLine.FINDFIRST;
      FamilyLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      FamilyLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventorySetup@2(AverageCostCalcType@1000 : Option;AutomaticCostPosting@1002 : Boolean;ExpectedCostPostingtoGL@1003 : Boolean);
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Average Cost Calc. Type",AverageCostCalcType);
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPostingtoGL);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItem@72(VAR Item@1000 : Record 27;FlushingMethod@1001 : Option;ReorderingPolicy@1002 : Option;ReorderQuantity@1003 : Decimal);
    BEGIN
      Item.VALIDATE("Flushing Method",FlushingMethod);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Reorder Quantity",ReorderQuantity);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemCrossReference@77(VAR PurchaseLine@1000 : Record 39;ItemCrossReferenceNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.VALIDATE("Cross-Reference No.",ItemCrossReferenceNo);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateOutputJrnl@16(ProdOrderNo@1000 : Code[20];StartingTime@1003 : Time);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Order No.",ProdOrderNo);
      ItemJournalLine.FINDSET;
      REPEAT
        ItemJournalLine.VALIDATE("Starting Time",StartingTime);
        ItemJournalLine.VALIDATE("Ending Time",StartingTime - RANDOM(LibraryUtility.ConvertHoursToMilliSec(1)));
        ItemJournalLine.MODIFY(TRUE);
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateProdOrderComponent@55(VAR ProdOrderComponent@1000 : Record 5407;ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10]);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.VALIDATE("Variant Code",VariantCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseOrderDirectCost@84(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Random values used are not important for test.
      PurchaseHeader.VALIDATE(Status,PurchaseHeader.Status::Open);
      UpdateVendorInvoiceNoPurchaseHeader(PurchaseHeader);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      UpdateDirectUnitCostPurchaseLine(PurchaseLine,PurchaseLine."Direct Unit Cost" + LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE UpdateReqLine@73(VAR RequisitionLine@1002 : Record 246;VendorNo@1000 : Code[20];No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLine@62(SalesHeader@1000 : Record 36;ItemCrossReferenceNo@1001 : Code[20];PurchasingCode@1002 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      FindSalesLine(SalesHeader,SalesLine);
      SalesLine.VALIDATE("Purchasing Code",PurchasingCode);
      SalesLine.VALIDATE("Cross-Reference No.",ItemCrossReferenceNo);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceNoPurchaseHeader@14(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCrossReferenceNo@75(OrderNo@1000 : Code[20];CrossReferenceNo@1003 : Code[20]);
    VAR
      PurchRcptHeader@1001 : Record 120;
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,PurchRcptHeader."No.");
      ItemLedgerEntry.TESTFIELD("Cross-Reference No.",CrossReferenceNo);
    END;

    LOCAL PROCEDURE VerifyFamilyProdOrderQuantity@45(ProdOrderNo@1000 : Code[20];FamilyNo@1001 : Code[20]);
    VAR
      FamilyLine@1004 : Record 99000774;
      ProductionOrder@1002 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
      ItemUnitOfMeasure@1006 : Record 5404;
      ExpProdOrderQuantity@1003 : Decimal;
      ActualProdOrderQuantity@1007 : Decimal;
    BEGIN
      FindProdOrderLine(ProdOrderLine,ProdOrderNo,ProductionOrder.Status::Released);
      REPEAT
        ItemUnitOfMeasure.GET(ProdOrderLine."Item No.",ProdOrderLine."Unit of Measure Code");
        ActualProdOrderQuantity += ProdOrderLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure";
      UNTIL ProdOrderLine.NEXT = 0;
      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrderNo);
      FamilyLine.SETRANGE("Family No.",FamilyNo);
      FamilyLine.FINDSET;
      REPEAT
        ItemUnitOfMeasure.GET(FamilyLine."Item No.",FamilyLine."Unit of Measure Code");
        ExpProdOrderQuantity += ProductionOrder.Quantity * FamilyLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure";
      UNTIL FamilyLine.NEXT = 0;
      Assert.AreEqual(ExpProdOrderQuantity,ActualProdOrderQuantity,ErrMessageCostNotSame);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@51(VAR ItemLedgerEntry@1001 : Record 32;ItemNo@1000 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Integer);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyProdComponentUnitCost@50(Status@1004 : Option;ProdOrderNo@1000 : Code[20];UnitCost@1001 : Decimal);
    VAR
      ProdOrderComponent@1002 : Record 5407;
      GeneralLedgerSetup@1005 : Record 98;
      ExpComponentCost@1003 : Decimal;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDSET;
      REPEAT
        ExpComponentCost += ProdOrderComponent."Unit Cost";
      UNTIL ProdOrderComponent.NEXT = 0;
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(UnitCost,ExpComponentCost,GeneralLedgerSetup."Amount Rounding Precision",ErrMessageCostNotSame);
    END;

    LOCAL PROCEDURE VerifyTotalWIPAccountAmount@21(ItemNo@1001 : Code[20];ProdOrderNo@1005 : Code[20]);
    VAR
      Item@1003 : Record 27;
      GLEntry@1000 : Record 17;
      InventoryPostingSetup@1004 : Record 5813;
      TotalAmount@1002 : Decimal;
    BEGIN
      // Select GL Entry of Production Order for WIP Account and Total the same.
      Item.GET(ItemNo);
      InventoryPostingSetup.SETRANGE("Invt. Posting Group Code",Item."Inventory Posting Group");
      InventoryPostingSetup.FINDFIRST;
      GLEntry.SETRANGE("G/L Account No.",InventoryPostingSetup."WIP Account");
      GLEntry.SETRANGE("Document No.",ProdOrderNo);
      IF GLEntry.FINDSET THEN
        REPEAT
          TotalAmount += GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;

      // Verify Total WIP Account amount is Zero.
      Assert.AreEqual(0,TotalAmount,ErrMessageNotFoundZeroAmt);
    END;

    LOCAL PROCEDURE VerifyValueEntry@35(ProdOrderNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      ProductionOrder@1004 : Record 5405;
      ValueEntry@1002 : Record 5802;
      Item@1005 : Record 27;
      GeneralLedgerSetup@1006 : Record 98;
      ValueEntryActCost@1003 : Decimal;
    BEGIN
      ValueEntry.SETRANGE("Document No.",ProdOrderNo);
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.FINDSET;
      REPEAT
        ValueEntryActCost += ValueEntry."Cost Amount (Expected)";
      UNTIL ValueEntry.NEXT = 0;

      ProductionOrder.GET(ProductionOrder.Status::Finished,ProdOrderNo);
      Item.GET(ItemNo);
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        ProductionOrder.Quantity * Item."Unit Cost",ValueEntryActCost,GeneralLedgerSetup."Amount Rounding Precision",
        ErrMessageCostNotSame);
    END;

    [ConfirmHandler]
    PROCEDURE AvgCostCalcTypeConfirmHandler@87(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      ConfirmCounter += 1;

      CASE ConfirmCounter OF
        1:
          Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_Average_Cost_Calc_Q) > 0,Question);
        2:
          Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_Average_Cost_Calc_Q) > 0,Question);
      END;
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE AvgCostCalcTypeMessageHandler@86(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_Average_Cost_Calc) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_Average_Cost_Calc_Item) > 0,Message);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@90(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_Change_Status_Q) > 0,Question);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerAsTrue@54(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateInvtPutawayPickMvmtRequestPageHandler@58(VAR CreateInvtPutawayPickMvmt@1000 : TestRequestPage 7323);
    BEGIN
      CreateInvtPutawayPickMvmt.CreateInventorytPutAway.SETVALUE(TRUE);
      CreateInvtPutawayPickMvmt.CInvtPick.SETVALUE(TRUE);
      CreateInvtPutawayPickMvmt.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ExpCostMessageHandler@10(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      Assert.IsTrue(STRPOS(Message,MSG_EXP_Cost_Yes) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE FirmPlannedProdOrderMessageHandler@88(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_Firm_Planned_Prod) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@37(VAR ItemtrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemtrackingLines."Assign Lot No.".INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@91(Message@1000 : Text[1024]);
    BEGIN
      // Dummy Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandler@12(VAR CreateOrderFromSales@1000 : Page 99000884;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ConfirmHandler]
    PROCEDURE ValueEntryCostAmtExpNoConsmpConfirmHandler@26(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      ConfirmCounter += 1;

      CASE ConfirmCounter OF
        1:
          Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_EXP_Cost_Posting_Several_Hours) > 0,Question);
        2:
          Assert.IsTrue(STRPOS(ConvertMessage(Question),Msg_Still_Want_To_Finish) > 0,Question);
        3:
          Assert.IsTrue(STRPOS(Question,MSG_EXP_Cost_Posting_Several_Hours) > 0,Question);
      END;
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE OutputJournalItemLookupHandler@103(VAR ProdOrderLineList@1001 : TestPage 5406);
    BEGIN
      ProdOrderLineList.FIRST;
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute

      Test for PS Bugs:
        1. Create Sales Order and Create Firm Planned Prod order using order Planning.
           Change Status to released state with Update unit cost.Verify Unit Cost in Sales Order.
        2. Create Consumption Journal.Delete production order line.Post Consumption Journal.Verify WIP account to be Zero.
        3. Check Inventory Value (Calculated) in Revaluation Journal with Inventory Value on Item card.
        4. Create SKU for Component Item and check Unit cost on Production component Lines.
        5. Create UOM for Component Items and Check Unit cost on Production component Lines.
        6. Create Item and check Last direct cost changes after Purchase Invoice is posted.
        7. Create Production order Family and Check Production Order Line Quantity.
        8. Create Production order Family with one Item having alternate UOM and Check Production Order Line Quantity.
        9. Create Released Production Order,Post output change it to Finished and check Cost Amount actual of Value Entry.
       10. Create Released Production Order with two Item lines and Refresh it.
       11. Item description change on Production order component when selecting a Variant Code.
       12. Create Purchase Order and Validate Item Cross reference.Check Direct Unit Cost.
       13. Create Purchase Order and Validate Cross reference with Cross reference Type.
       14. Create Released Production Order with No Output posted. Check change status to finished.
       15. Create Released Production order,Check Output posting with Ending Time less than starting time.
       16. Create UOM for Component Items with Flushing Method Manual and Check Unit cost on Production component Lines.
       17. Create Purchase Order and Validate Cross reference with Cross reference Type of Bar Code.
           Check Discontinue Bar Code as True in Item Cross reference.
       18. Create Special Sales Order, carry out Action Message and update of Direct Cost on Purchase Order.Check Purchase Invoice posted.
       19. Create Two Items with different Replenishment systems, Create Sales Orders. In Planning Worksheet check 'Calculate
           Regenerative Plan' and 'Carry Out Action Message'.
       20. Verify Quantity on Item Ledger Entry after Posting Item Journal.
       21. Verify Quantity on Item Ledger Entry after Posting Warehouse Inventory Activity.
       22. Check Routing No. on Prod. Order Line after changing Status from Released to Finished.

        Covers Test cases:
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        SalesOrderUnitCost                127602,185170
        DeleteProdOrderLineConsumption    127572,185106
        InventoryValueCalcRevalJrnl       185244
        SKUUnitCost                       127535,135433,185071
        UOMComponentCost                  127634,135497,185200
        ItemLastDirectCost                127597,135520,185164,127701,135534,185267
        CalcProdOrderLineQuantity         127686,135541,185252,127696,135545,185262
        CalcProdOrderLineQuantityUOM      127570,135559,185104
        ValueEntryCostAmtExpNoConsmp      127604,135531,185172
        RefreshProdOrder                  127590,135515,185144
        ProdOrderCompChangeWithVariant    127534,135446,185070
        CrossRefPurchaseOrderUnitCost     127544,135436,185079
        SelectCrossReferenceWithType      127646,127647,135598,185213
        CrossRefDisconBarCode             127693,135544,185259
        ProdOrderOutputMissing            127682,135587,185248
        OutputJrnlEndingTime              127539,135445,185074
        UOMComponentCostManual            127676,135599,185242
        SpecialOrderCarryOutActMsg        127671,135583,185237
        CalcRegPlanAndCarryOutActMsg      127608,135481,185177

        Covers Test cases: Bug ID - 299055
        --------------------------------------------------------------------------------------
        Test Function Name                                           TFS ID
        --------------------------------------------------------------------------------------
        QuantityOnItemLedgerEntryAfterPostingItemJournal,
        QuantityAfterPostingWareHouseInventoryActivity               298559

        Covers Test cases: Bug ID - 301151
        --------------------------------------------------------------------------------------
        Test Function Name                                           TFS ID
        --------------------------------------------------------------------------------------
        RoutingNoOnProductionOrderLine                               301982

        ItemCrossReferenceDescriptionInPurchOrder                    354747
        ItemCrossReferenceDescriptionInSalesOrder                    354747
    }
    END.
  }
}

