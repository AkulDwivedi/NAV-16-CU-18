OBJECT Codeunit 134325 ERM Purchase Quote
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1006 : Codeunit 132201;
      LibraryERM@1003 : Codeunit 131300;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryMarketing@1008 : Codeunit 131900;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountErrorMessage@1004 : TextConst 'ENU=%1 must be %2 in %3.';
      FieldError@1005 : TextConst 'ENU=%1 not updated correctly.';

    [Test]
    PROCEDURE PurchaseQuoteCreation@3();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test that a Purchase Quote Header and Lines exist after Purchase Quote creation.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Quote.
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);

      // Verify: Verify that Correct Purchase Quote created.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Quote,PurchaseHeader."No.");
      PurchaseLine.GET(PurchaseLine."Document Type"::Quote,PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE VATAmountOnPurchaseQuote@4();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      GeneralLedgerSetup@1006 : Record 98;
      VATAmountLine@1005 : Record 290;
      QtyType@1003 : 'General,Invoicing,Shipping';
    BEGIN
      // Test VAT Amount calculated correctly on Purchase Quote.

      // Setup: Create a Purchase Quote.
      Initialize;
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);

      // Exercise: Calculate VAT Amount on VAT Amount Line from Purchase Line.
      PurchaseLine.CalcVATAmountLines(QtyType::Invoicing,PurchaseHeader,PurchaseLine,VATAmountLine);

      // Verify: Verify VAT Amount on Purchase Quote.
      GeneralLedgerSetup.GET;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);
      Assert.AreNearlyEqual(
        PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErrorMessage,VATAmountLine.FIELDCAPTION("VAT Amount"),PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,
          VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseQuoteReport@5();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchaseQuote@1002 : Report 404;
      LibraryUtility@1001 : Codeunit 131000;
      FilePath@1000 : Text[1024];
    BEGIN
      // Test that a Report generated from Purchase Quote.

      // Setup: Create a Purchase Quote.
      Initialize;
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);

      // Exercise: Generate Purchase Quote Report and save it as external file.
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Quote);
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseQuote.SETTABLEVIEW(PurchaseHeader);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      PurchaseQuote.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PurchaseOrderFromPurchaseQuote@6();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      LineCount@1002 : Integer;
    BEGIN
      // Test that a Purchase Order created from Purchase Quote.

      // Setup: Create Purchase Quote and save the line count into a variable.
      Initialize;
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Quote);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      LineCount := PurchaseLine.COUNT;

      // Exercise: Create Purchase Order form Purchase Quote.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order",PurchaseHeader);

      // Verify: Verify that New Purchase Order created from Purchase Quote and No. of Lines are equal to Purchase Quote Lines.
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      Assert.AreEqual(LineCount,PurchaseLine.COUNT,'No. of Lines must be Equal.');
    END;

    [Test]
    PROCEDURE PurchaseQuoteForContact@7();
    VAR
      PurchaseHeader@1001 : Record 38;
      ContactBusinessRelation@1000 : Record 5054;
      Contact@1002 : Record 5050;
      BusinessRelation@1003 : Record 5053;
    BEGIN
      // Test that a Purchase Quote can be created for a Contact.

      // Setup:  Find a Contact Business Relation.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      LibraryMarketing.CreateContactBusinessRelation(ContactBusinessRelation,Contact."No.",BusinessRelation.Code);
      ContactBusinessRelation.VALIDATE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.VALIDATE("No.",LibraryPurchase.CreateVendorNo);
      ContactBusinessRelation.MODIFY(TRUE);

      // Exercise: Create a Purchase Quote for the Contact.
      PurchaseHeader.INSERT(TRUE);
      PurchaseHeader.VALIDATE("Buy-from Contact No.",ContactBusinessRelation."Contact No.");
      PurchaseHeader.MODIFY(TRUE);

      // Verify: Verify that the Purchase Header Contains the correct Contact.
      Assert.AreEqual(
        ContactBusinessRelation."Contact No.",
        PurchaseHeader."Buy-from Contact No.",STRSUBSTNO(FieldError,PurchaseHeader.FIELDCAPTION("Buy-from Contact No.")));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ChangeVendorOnPurchaseQuote@8();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Test the Buy From Vendor No. after changing it on Purchase Quote.

      // Setup: Create a Purchase Quote.
      Initialize;
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);

      // Exercise: Change the Buy From Vendor No. of Purchase Quote.
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",CreateVendor);
      PurchaseHeader.MODIFY(TRUE);

      // Verify: Verify that correct Buy From Vendor No. updated in Purchase Line table.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      Assert.AreEqual(
        PurchaseHeader."Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.",
        STRSUBSTNO(FieldError,PurchaseLine.FIELDCAPTION("Buy-from Vendor No.")));
    END;

    [Test]
    PROCEDURE PurchOrderInvDiscFrmPurchQuote@1();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      InvDiscountAmount@1003 : Decimal;
    BEGIN
      // Check Invoice Discount has been flow correctly on Purchase Order after Make Order from Purchase Quote.

      // Setup: Create Purchase Quote and Calculate Invoice Discount.
      Initialize;
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendorInvDiscount(CreateVendor));
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      PurchaseLine.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.");
      InvDiscountAmount := PurchaseLine."Inv. Discount Amount";

      // Exercise: Create Purchase Order form Purchase Quote.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order",PurchaseHeader);

      // Verify: Verify Invoice Discount Amount on Create Purchase Order.
      GeneralLedgerSetup.GET;
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      Assert.AreNearlyEqual(
        InvDiscountAmount,PurchaseLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErrorMessage,PurchaseLine.FIELDCAPTION("Inv. Discount Amount"),InvDiscountAmount,PurchaseLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseOrderFromPurchaseQuoteWithPostingDateBlank@18();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchasesPayablesSetup@1004 : Record 312;
      OldDefaultPostingDate@1003 : Option;
    BEGIN
      // Check that blank Posting Date is populating on created Purchase Order from Purchase Quote while Default Posting Date is set to No Date on the Purchase & Payables Setup.

      // Setup: Update Purchase & Payables Setup and create Purchase Quote.
      Initialize;
      UpdatePurchasePayablesSetup(OldDefaultPostingDate,PurchasesPayablesSetup."Default Posting Date"::"No Date");
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);

      // Exercise: Create Purchase Order from Purchase Quote.
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order",PurchaseHeader);

      // Verify: Verify that New Purchase Order created from Purchase Quote with Posting Date blank.
      VerifyPostingDateOnOrder(PurchaseHeader);

      // Tear Down.
      UpdatePurchasePayablesSetup(OldDefaultPostingDate,OldDefaultPostingDate);
    END;

    [Test]
    PROCEDURE PurchaseQuoteInitializedWithOrderDate@10();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [SCENARIO 382251] New purchase quote has default Order Date = WORKDATE.
      Initialize;

      // [WHEN] Create Purchase Quote with one line.
      CreatePurchaseQuote(PurchaseHeader,PurchaseLine,CreateVendor);

      // [THEN] The header and the line of the quote have "Order Date" = WORKDATE.
      PurchaseHeader.TESTFIELD("Order Date",WORKDATE);
      PurchaseLine.TESTFIELD("Order Date",WORKDATE);
    END;

    LOCAL PROCEDURE Initialize@12();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateVendor@15() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VATPostingSetup@1003 : Record 325;
      LibraryPurchase@1004 : Codeunit 130512;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorInvDiscount@16(VendorNo@1001 : Code[20]) : Code[20];
    VAR
      VendorInvoiceDisc@1000 : Record 24;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,VendorNo,'',0); // Set Zero for Charge Amount.
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));  // Take Random Discount.
      VendorInvoiceDisc.MODIFY(TRUE);
      EXIT(VendorNo);
    END;

    LOCAL PROCEDURE CreatePurchaseQuote@11(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1000 : Record 39;VendorNo@1003 : Code[20]);
    VAR
      LibraryPurchase@1001 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Quote,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);

      // Create Purchase Quote Line with Random Quantity and Direct Unit Cost. Take Unit Cost in multiple of 100 (Standard Value).
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",100 * LibraryRandom.RandInt(10));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindPurchaseLine@2(VAR PurchaseLine@1001 : Record 39;QuoteNo@1002 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SETRANGE("Quote No.",QuoteNo);
      PurchaseHeader.FINDFIRST;
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdatePurchasePayablesSetup@82(VAR OldDefaultPostingDate@1001 : Option;DefaultPostingDate@1002 : Option);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      OldDefaultPostingDate := PurchasesPayablesSetup."Default Posting Date";
      PurchasesPayablesSetup.VALIDATE("Default Posting Date",DefaultPostingDate);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPostingDateOnOrder@17(PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseHeader.SETRANGE("Quote No.",PurchaseHeader."No.");
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.FINDFIRST;
      PurchaseHeader.TESTFIELD("Posting Date",0D);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Quote] [Purchase]
      Unsupported version tags:
      NA: Unable to Compile

      Create and Verify various functionalities of Purchase Quote.
        1. Test that a Purchase Quote Header and Lines exist after Purchase Quote creation.
        2. Test VAT Amount calculated correctly on Purchase Quote.
        3. Test that a Report generated from Purchase Quote.
        4. Test that a Purchase Order created from Purchase Quote.
        5. Test that a Purchase Quote can be created for a Contact.
        6. Test the Buy From Vendor No. after changing it on Purchase Quote.
        7. Check Invoice Discount has been flow correctly on Purchase Order after Make Order from Purchase Quote.
        8. Check that field 'VAT Amount' is not editable on Purchase Quote Statistics page.
        9. Check that blank Posting Date is populating on created Purchase Order from Purchase Quote while Default Posting Date is set to No Date on the Purchase & Payables Setup.

      This test code unit replaces Manual Test Suite (TS0136).

      TS_TFS ID=21544
      Covers Test Cases:
        TFS_TC_ID= 122387 and 136768: TC00663
        TFS_TC_ID= 122388 and 136769: TC00664
        TFS_TC_ID= 122389 and 136770: TC00665
        TFS_TC_ID= 122393 and 136774: TC00666
        TFS_TC_ID= 122394 and 136775: TC00667
        TFS_TC_ID= 122395 and 136776: TC00668

        Covers Test Cases for WI - 219040
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        PurchOrderInvDiscFrmPurchQuote                           127390

        Covers Test Cases for WI - 260981
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        VATAmountNonEditableOnStatistics                         127318

        Covers Test Cases for WI - 264826
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        PurchaseOrderFromPurchaseQuoteWithPostingDateBlank       263320
    }
    END.
  }
}

