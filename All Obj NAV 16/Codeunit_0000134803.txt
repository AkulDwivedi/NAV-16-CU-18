OBJECT Codeunit 134803 Test RED Setup Gen. Jnl.
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
            Initialize;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryRandom@1016 : Codeunit 130440;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryERM@1001 : Codeunit 131300;
      LibrarySales@1013 : Codeunit 130509;
      LibraryPurchase@1014 : Codeunit 130512;
      LibraryReportDataset@1007 : Codeunit 131007;
      LibraryVariableStorage@1011 : Codeunit 131004;
      LibrarySetupStorage@1010 : Codeunit 131009;
      LibraryJournals@1015 : Codeunit 131306;
      DeferralUtilities@1006 : Codeunit 1720;
      CalcMethod@1003 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';
      DeferralDocType@1002 : 'Purchase,Sales,G/L';
      StartDate@1004 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';
      isInitialized@1012 : Boolean;
      DecimalPlacesInDeferralPctErr@1009 : TextConst 'ENU=Wrong decimal places count in "Defferal %" field.';
      AccTypeMustBeGLAccountErr@1008 : TextConst 'ENU=Account Type must be equal to ''G/L Account''';

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestCreationOfDeferralCode@1();
    VAR
      DeferralTemplate@1002 : Record 1700;
      DeferralCode@1001 : Code[10];
      GoodAccountNumber@1006 : Code[20];
    BEGIN
      // [SCENARIO 127727] Phyllis can setup a Deferral template in the system
      // Setup
      DeferralCode := LibraryUtility.GenerateRandomCode(DeferralTemplate.FIELDNO("Deferral Code"),DATABASE::"Deferral Template");
      GoodAccountNumber := LibraryERM.CreateGLAccountNo;

      // Exercise
      DeferralTemplate.INIT;
      DeferralTemplate."Deferral Code" := DeferralCode;

      // Test for error message when trying to use an invalid account
      ASSERTERROR DeferralTemplate.VALIDATE("Deferral Account",COPYSTR(FORMAT(CREATEGUID),1,20));

      DeferralTemplate."Deferral Account" := GoodAccountNumber;
      DeferralTemplate."Calc. Method" := CalcMethod::"Straight-Line";
      DeferralTemplate."Start Date" := StartDate::"Posting Date";

      // Number of periods cannot be less than 1
      ASSERTERROR DeferralTemplate.VALIDATE("No. of Periods",0);
      DeferralTemplate."No. of Periods" := 6;

      DeferralTemplate."Deferral Code" := DeferralCode;
      // Deferral percentage cannot be less than 0
      ASSERTERROR DeferralTemplate.VALIDATE("Deferral %",-5.0);

      // Deferral percentage cannot be greater than 100
      ASSERTERROR DeferralTemplate.VALIDATE("Deferral %",105.0);
      DeferralTemplate."Deferral %" := 100.0;
      DeferralTemplate."Period Description" := '%1 Deferral %5';
      DeferralTemplate.INSERT;
    END;

    [Test]
    PROCEDURE AssignDefaultCodeToItem@3();
    VAR
      DeferralTemplate@1005 : Record 1700;
      Item@1000 : Record 27;
      DeferralCode@1001 : Code[10];
      ItemNumber@1002 : Code[20];
    BEGIN
      // [SCENARIO 127729] Apply Default template to Item Card
      DeferralCode := CreateDeferralCode;

      ItemNumber := LibraryUtility.GenerateRandomCode(Item.FIELDNO("No."),DATABASE::Item);
      Item.INIT;
      Item."No." := ItemNumber;
      // Try to insert with an invalid deferral code
      ASSERTERROR Item.VALIDATE("Default Deferral Template Code",COPYSTR(FORMAT(CREATEGUID),1,10));
      Item."Default Deferral Template Code" := DeferralCode;
      Item.INSERT;

      // Try to delete the deferral code that is now attached to the item
      IF DeferralTemplate.GET(DeferralCode) THEN
        ASSERTERROR DeferralTemplate.DELETE;

      Item.DELETE;
      IF DeferralTemplate.GET(DeferralCode) THEN
        DeferralTemplate.DELETE;
    END;

    [Test]
    PROCEDURE AssignDefaultCodeToAccount@4();
    VAR
      DeferralTemplate@1005 : Record 1700;
      GLAccount@1000 : Record 15;
      DeferralCode@1001 : Code[10];
      AccountNumber@1002 : Code[20];
    BEGIN
      // [SCENARIO 127731] Apply default template to G/L Account card
      DeferralCode := CreateDeferralCode;

      AccountNumber := LibraryUtility.GenerateRandomCode(GLAccount.FIELDNO("No."),DATABASE::"G/L Account");
      GLAccount.INIT;
      GLAccount."No." := AccountNumber;
      // Try to insert with an invalid deferral code
      ASSERTERROR GLAccount.VALIDATE("Default Deferral Template Code",COPYSTR(FORMAT(CREATEGUID),1,10));
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.INSERT;

      // Try to delete the deferral code that is now attached to the account
      IF DeferralTemplate.GET(DeferralCode) THEN
        ASSERTERROR DeferralTemplate.DELETE;

      GLAccount.DELETE;
      IF DeferralTemplate.GET(DeferralCode) THEN
        DeferralTemplate.DELETE;
    END;

    [Test]
    PROCEDURE AssignDefaultCodeToResource@5();
    VAR
      DeferralTemplate@1005 : Record 1700;
      Resource@1000 : Record 156;
      DeferralCode@1001 : Code[10];
      ResourceNumber@1002 : Code[20];
    BEGIN
      // [SCENARIO 127730] Apply default template to Resource Card
      DeferralCode := CreateDeferralCode;

      ResourceNumber := LibraryUtility.GenerateRandomCode(Resource.FIELDNO("No."),DATABASE::Resource);
      Resource.INIT;
      Resource."No." := ResourceNumber;
      // Try to insert with an invalid deferral code
      ASSERTERROR Resource.VALIDATE("Default Deferral Template Code",COPYSTR(FORMAT(CREATEGUID),1,10));
      Resource."Default Deferral Template Code" := DeferralCode;
      Resource.INSERT;

      // Try to delete the deferral code that is now attached to the resource
      IF DeferralTemplate.GET(DeferralCode) THEN
        ASSERTERROR DeferralTemplate.DELETE;

      Resource.DELETE;
      IF DeferralTemplate.GET(DeferralCode) THEN
        DeferralTemplate.DELETE;
    END;

    [Test]
    PROCEDURE CreateGLTrxandVerifySchedule@8();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      GLAccount@1003 : Record 15;
      DeferralHeader@1000 : Record 1701;
      DeferralCode@1001 : Code[10];
      DeferralCode99@1006 : Code[10];
      DeferralCodeDays@1007 : Code[10];
    BEGIN
      // [SCENARIO 127776] Create deferral schedule based on transaction and template
      // Setup - create deferral codes
      DeferralCode := CreateStraightLine6Periods;
      DeferralCodeDays := CreateDaysPerPeriod6Periods;
      DeferralCode99 := CreateDaysPerPeriod99Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Generate GL trx with new account, give it an amount
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalBatch."Bal. Account Type",GenJournalBatch."Bal. Account No.",100.55);
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      GenJournalLine.VALIDATE("Deferral Code");
      COMMIT;
      // Validate : Using a deferral code with too many periods will give warning about accounting periods not being set up
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",DeferralCode99);
      DeferralCode99 := CreateUserDefined99Periods; // For code coverage
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",DeferralCode99);
      GenJournalLine.MODIFY(TRUE);
      COMMIT;

      // Validate : Gen Journal Line contains the Deferral Code
      GenJournalLine.TESTFIELD("Deferral Code",DeferralCode);

      // Validate : Deferral Schedule Exists given the key values for GL.
      IF NOT DeferralHeader.GET(DeferralDocType::"G/L",
           GenJournalLine."Journal Template Name",
           GenJournalLine."Journal Batch Name",0,'',
           GenJournalLine."Line No.")
      THEN
        ASSERTERROR;

      // Validate : For positive amount, you cannot enter an amount for the deferral schedule larger than the line amount, or less than 0
      ASSERTERROR DeferralHeader.VALIDATE("Amount to Defer",200);
      ASSERTERROR DeferralHeader.VALIDATE("Amount to Defer",-200);
      GenJournalLine.VALIDATE("Deferral Code",DeferralCodeDays); // Code to create deferral using days per period, for code coverage

      // Code coverage for covering the 2 uncovered settings for Start Date
      DeferralCodeDays := CreateDaysPerPeriod6PeriodsEOP;
      GenJournalLine.VALIDATE("Deferral Code",DeferralCodeDays);
      DeferralCodeDays := CreateDaysPerPeriod6PeriodsBONP;
      GenJournalLine.VALIDATE("Deferral Code",DeferralCodeDays);

      DeferralCode := CreateStraightLine6PeriodsEOP;
      GenJournalLine.VALIDATE("Deferral Code",DeferralCode);
    END;

    [Test]
    PROCEDURE CreateGLTrxForNegativeAmount@46();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      GLAccount@1003 : Record 15;
      DeferralHeader@1000 : Record 1701;
      DeferralCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 127776] Create deferral schedule based on transaction and template
      // Setup - create deferral code
      DeferralCode := CreateStraightLine6Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Generate GL trx with new account, give it an amount
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalBatch."Bal. Account Type",GenJournalBatch."Bal. Account No.",-100.0);
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      GenJournalLine.VALIDATE("Deferral Code");
      GenJournalLine.MODIFY(TRUE);
      COMMIT;

      // Validate : Gen Journal Line contains the Deferral Code
      GenJournalLine.TESTFIELD("Deferral Code",DeferralCode);

      // Validate : Deferral Schedule Exists given the key values for GL.
      IF NOT DeferralHeader.GET(DeferralDocType::"G/L",
           GenJournalLine."Journal Template Name",
           GenJournalLine."Journal Batch Name",0,'',
           GenJournalLine."Line No.")
      THEN
        ASSERTERROR;

      // Validate : For positive amount, you cannot enter an amount for the deferral schedule larger than the line amount, or less than 0
      ASSERTERROR DeferralHeader.VALIDATE("Amount to Defer",-200.0);
      ASSERTERROR DeferralHeader.VALIDATE("Amount to Defer",100.0);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,DeferralScheduleHandler)]
    PROCEDURE CreateGLTrxandVerifyScheduleUI@10();
    VAR
      GenJournalLine@1005 : Record 81;
      GLAccount@1003 : Record 15;
      GeneralJournal@1006 : TestPage 39;
      DeferralCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 127776] Create deferral schedule based on transaction and template
      // Verify view deferral schedule has been added to page actions

      // Setup - create deferral code
      DeferralCode := CreateStraightLine6Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Create General Journal Line.
      CreateGeneralJournalLineByPage(GeneralJournal,GLAccount,GenJournalLine,100.56);

      // 2. Exercise and verify Deferral Schedule Action can be invoked
      GeneralJournal.DeferralSchedule.INVOKE;
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,DeferralScheduleHandler)]
    PROCEDURE CreateGLTrxandVerifyScheduleUINewCode@24();
    VAR
      GenJournalLine@1005 : Record 81;
      GLAccount@1003 : Record 15;
      GeneralJournal@1006 : TestPage 39;
      DeferralCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 127776] Create deferral schedule based on transaction and template
      // Verify view deferral schedule has been added to page actions
      // Setup - create deferral code
      DeferralCode := CreateStraightLine2Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Create General Journal Line.
      CreateGeneralJournalLineByPage(GeneralJournal,GLAccount,GenJournalLine,100.56);

      // Remove deferral schedule fields
      DeferralUtilities.RemoveOrSetDeferralSchedule('',DeferralDocType::"G/L",GenJournalLine."Journal Template Name",
        GenJournalLine."Journal Batch Name",0,'',GenJournalLine."Line No.",0,0D,'','',TRUE);

      // Verify Deferral Schedule is removed: as Action is invoked, if no schedule, window will not open
      GeneralJournal.DeferralSchedule.INVOKE;

      // Create deferral schedule
      DeferralUtilities.RemoveOrSetDeferralSchedule(DeferralCode,DeferralDocType::"G/L",GenJournalLine."Journal Template Name",
        GenJournalLine."Journal Batch Name",0,'',GenJournalLine."Line No.",GenJournalLine.Amount,GenJournalLine."Posting Date",
        '',GenJournalLine."Currency Code",TRUE);

      // Verify Deferral Schedule is added: as Action is invoked, if no schedule, window will open
      GeneralJournal.DeferralSchedule.INVOKE;
    END;

    [Test]
    PROCEDURE CreateGLTrxandVerifyPosting@9();
    VAR
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1006 : Record 81;
      GLAccount@1005 : Record 15;
      GLEntry@1004 : Record 17;
      DeferralTemplate@1000 : Record 1700;
      DeferralCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 127776] Create deferral schedule based on transaction and template
      // Setup - create deferral code
      DeferralCode := CreateEqual5Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Create General Journal Line.
      // Generate GL trx with new account, give it an amount
      CreateGeneralJournalBatch(GenJournalBatch);

      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalBatch."Bal. Account Type",GenJournalBatch."Bal. Account No.",100.58);
      GenJournalLine.VALIDATE("Bal. Account No.");
      GenJournalLine.VALIDATE("Deferral Code");
      GenJournalLine.MODIFY(TRUE);
      COMMIT;

      // 2. Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify the count of posted GL Entries with total number of lines entered for deferral schedule.
      VerifyTotalNumberOfPostedGLEntries(GenJournalLine,14);

      // Description in total deferral line matches Gen. Journal Line's Description (TFS 203345)
      DeferralTemplate.GET(DeferralCode);
      VerifyDescriptionOnTotalDeferralLine(
        GenJournalLine."Document No.",DeferralTemplate."Deferral Account",GenJournalLine."Posting Date",GenJournalLine.Description);

      GLEntry.SETRANGE("G/L Account No.",DeferralTemplate."Deferral Account");
      GLEntry.SETRANGE("Posting Date",GenJournalLine."Posting Date");
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Description,GenJournalLine.Description);
    END;

    [Test]
    PROCEDURE CreateGLTrxandVerifyPostingAmounts@17();
    VAR
      DeferralLine@1000 : Record 1702;
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1006 : Record 81;
      GLAccount@1005 : Record 15;
      GLEntry@1004 : Record 17;
      DeferralCode@1001 : Code[10];
      DeferralAmount@1009 : Decimal;
    BEGIN
      // [SCENARIO 127776] Create deferral schedule based on transaction and template
      // Setup - create deferral code
      DeferralCode := CreateEqual5Periods80Percent;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Create General Journal Line.
      // Generate GL trx with new account, give it an amount
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalBatch."Bal. Account Type",GenJournalBatch."Bal. Account No.",100);
      GenJournalLine.VALIDATE("Bal. Account No.");
      GenJournalLine.VALIDATE("Deferral Code");
      GenJournalLine.MODIFY(TRUE);
      COMMIT;

      // Trap the amount created for the Deferral Schedule
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",GenJournalLine."Journal Template Name");
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",GenJournalLine."Journal Batch Name");
      DeferralLine.SETRANGE("Document Type",0);
      DeferralLine.SETRANGE("Document No.",'');
      DeferralLine.SETRANGE("Line No.",GenJournalLine."Line No.");
      IF DeferralLine.FINDFIRST THEN
        DeferralAmount := DeferralLine.Amount;

      // 2. Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify the count of posted GL Entries with correct value
      // Initial value = 100, 80%=80, each period = 16.00
      GLEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      GLEntry.SETRANGE(Amount,DeferralAmount);
      Assert.AreEqual(5,GLEntry.COUNT,'An incorrect number of lines was posted');
    END;

    [Test]
    PROCEDURE ValidateInvalidPostingDateForLine@15();
    VAR
      GenJournalLine@1009 : Record 81;
      GLAccount@1008 : Record 15;
      GenJournalBatch@1003 : Record 232;
      DeferralLine@1007 : Record 1702;
      DeferralCode@1006 : Code[10];
      OutOfBoundsDate@1001 : Date;
    BEGIN
      // Set a date that is outside of set up accounting periods...20 years should do...
      OutOfBoundsDate := CALCDATE('<20Y>',WORKDATE);
      // Setup - create deferral code
      DeferralCode := CreateStraightLine6Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Generate GL trx with new account, give it an amount
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalBatch."Bal. Account Type",GenJournalBatch."Bal. Account No.",-100.0);
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      GenJournalLine.VALIDATE("Deferral Code");
      GenJournalLine.MODIFY(TRUE);
      COMMIT;

      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType::"G/L");
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",GenJournalLine."Journal Template Name");
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",GenJournalLine."Journal Batch Name");
      DeferralLine.SETRANGE("Document Type",0);
      DeferralLine.SETRANGE("Document No.",'');
      DeferralLine.SETRANGE("Line No.",GenJournalLine."Line No.");
      IF DeferralLine.FINDLAST THEN
        // Validate : Changing the posting date to the "out of bounds" date should give an error.
        ASSERTERROR DeferralLine.VALIDATE("Posting Date",OutOfBoundsDate);
    END;

    [Test]
    [HandlerFunctions(GLDeferralSummaryReportHandler)]
    PROCEDURE GLDeferralSummaryReport@28();
    VAR
      PostedDeferralHeader@1000 : Record 1704;
      GenJournalBatch@1006 : Record 232;
      GenJournalLine@1005 : Record 81;
      GLAccount@1004 : Record 15;
      DeferralSummaryGL@1001 : Report 1700;
      DeferralCode@1002 : Code[10];
    BEGIN
      // [SCENARIO 127756] Phyllis can view a deferral report
      // Test and verify Deferral Summary - G/L Report.

      // 1. Setup: Create Deferral Template, post General Journal entry using this template code
      // Setup - create deferral code
      DeferralCode := CreateEqual5Periods;

      // Create new GL Account
      LibraryERM.CreateGLAccount(GLAccount);

      // Assign the deferral code to new GL Account
      GLAccount."Default Deferral Template Code" := DeferralCode;
      GLAccount.MODIFY;

      // Create General Journal Line.
      // Generate GL trx with new account, give it an amount
      CreateGeneralJournalBatch(GenJournalBatch);

      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalBatch."Bal. Account Type",GenJournalBatch."Bal. Account No.",100.0);
      GenJournalLine.VALIDATE("Bal. Account No.");
      GenJournalLine.VALIDATE("Deferral Code");
      GenJournalLine.MODIFY(TRUE);
      COMMIT;

      // Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Run Deferral Summary - G/L Report.
      COMMIT;
      PostedDeferralHeader.SETRANGE("Deferral Doc. Type",PostedDeferralHeader."Deferral Doc. Type"::"G/L");
      PostedDeferralHeader.SETRANGE("Gen. Jnl. Document No.",GenJournalLine."Document No.");
      PostedDeferralHeader.SETRANGE("Account No.",GLAccount."No.");
      PostedDeferralHeader.SETRANGE("Document Type",0);
      PostedDeferralHeader.SETRANGE("Document No.",'');
      PostedDeferralHeader.SETRANGE("Line No.",GenJournalLine."Line No.");
      CLEAR(DeferralSummaryGL);
      DeferralSummaryGL.SETTABLEVIEW(PostedDeferralHeader);
      DeferralSummaryGL.RUN;

      // 3. Verify: Verify Values on Deferral Summary - G/L Report.
      PostedDeferralHeader.SETRANGE("Deferral Doc. Type",PostedDeferralHeader."Deferral Doc. Type"::"G/L");
      PostedDeferralHeader.SETRANGE("Gen. Jnl. Document No.",GenJournalLine."Document No.");
      PostedDeferralHeader.SETRANGE("Account No.",GLAccount."No.");
      PostedDeferralHeader.SETRANGE("Document Type",0);
      PostedDeferralHeader.SETRANGE("Document No.",'');
      PostedDeferralHeader.SETRANGE("Line No.",GenJournalLine."Line No.");
      PostedDeferralHeader.FINDFIRST;
      VerifyValuesonGLDeferralSummary(PostedDeferralHeader);
    END;

    [Test]
    PROCEDURE ItemMiniListShowsDeferralTemplateColumn@30();
    VAR
      Item@1000 : Record 27;
      MiniItemList@1003 : TestPage 1303;
      DeferralCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 143447] Mini Item List should have Default Deferral Template field displayed.
      DeferralCode := CreateDeferralCode;

      Item.INIT;
      Item."Default Deferral Template Code" := DeferralCode;
      Item.INSERT(TRUE);

      MiniItemList.OPENVIEW;
      MiniItemList.GOTORECORD(Item);
      MiniItemList."Default Deferral Template Code".ASSERTEQUALS(Item."Default Deferral Template Code");
    END;

    [Test]
    PROCEDURE ItemMiniCardShowsDeferralTemplateColumn@32();
    VAR
      Item@1000 : Record 27;
      MiniItemCard@1003 : TestPage 1302;
      DeferralCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 143447] Mini Item Card should have Default Deferral Template field displayed.
      DeferralCode := CreateDeferralCode;

      Item.INIT;
      Item."Default Deferral Template Code" := DeferralCode;
      Item.INSERT(TRUE);

      MiniItemCard.OPENVIEW;
      MiniItemCard.GOTORECORD(Item);
      MiniItemCard."Default Deferral Template Code".ASSERTEQUALS(Item."Default Deferral Template Code");
    END;

    [Test]
    PROCEDURE DeferralPctUT@31();
    VAR
      DummyDeferralTemplate@1000 : Record 1700;
    BEGIN
      // [FEATURE] [Deferral] [UT]
      // [SCENARIO] "Deferral %" field of Deferral Template must not show empty decimals
      DummyDeferralTemplate.VALIDATE("Deferral %",10);
      Assert.AreEqual('10',FORMAT(DummyDeferralTemplate."Deferral %"),DecimalPlacesInDeferralPctErr);
    END;

    [Test]
    PROCEDURE DeferralPctUIUT@37();
    VAR
      DeferralTemplate@1000 : Record 1700;
      DeferralTemplateList@1001 : TestPage 1701;
    BEGIN
      // [FEATURE] [Deferral] [UT]
      // [SCENARIO] "Deferral %" field of Deferral Template (1700) must not show empty decimals in Deferral Templates page (1701)
      DeferralTemplate.INIT;
      DeferralTemplate.VALIDATE("Deferral %",10);
      DeferralTemplate.INSERT;
      DeferralTemplateList.TRAP;
      PAGE.RUN(PAGE::"Deferral Template List",DeferralTemplate);
      Assert.AreEqual('10',FORMAT(DeferralTemplateList."Deferral %"),DecimalPlacesInDeferralPctErr);
    END;

    [Test]
    PROCEDURE CreateGLTrxandVerifyPostingCustomer@38();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      GLEntry@1004 : Record 17;
      CustomerPostingGroup@1000 : Record 92;
      InvoiceNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 377994] Posted GL trx for Customer must have G/L entry for Customer Posting Group's Receivable Account with the posted amount
      Initialize;

      // [GIVEN] Defferal setup - 5 equal periods
      // [GIVEN] Invoice with Customer Posting Group "G" and Amount = 100
      // [GIVEN] "G"."Receivables Account" = "A"
      CreateSalesInvoiceWithLineDeferral(SalesHeader,SalesLine,CreateEqual5Periods);

      // [WHEN] Post Sales Invoice.
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] "G/L Entry" for "G/L Account" "G" created with Amount = 100
      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");
      GLEntry.SETRANGE("G/L Account No.",CustomerPostingGroup.GetReceivablesAccount);
      GLEntry.SETRANGE("Document No.",InvoiceNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CreateGLTrxandVerifyPostingVendor@39();
    VAR
      GLEntry@1004 : Record 17;
      VendorPostingGroup@1000 : Record 93;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      InvoiceNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 377994] Posted GL trx for Vendor must have G/L entry for Vendo Posting Group's Receivable Account with the posted amount
      Initialize;

      // [GIVEN] Defferal setup - 5 equal periods
      // [GIVEN] Invoice with Vendor Posting Group "G" and Amount = 100
      // [GIVEN] "G"."Receivaables Account" = "A"
      CreatePurchInvoiceWithLineDeferral(PurchaseHeader,PurchaseLine,CreateEqual5Periods);

      // [WHEN] Post General Journal Line.
      InvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] "G/L Entry" for "G/L Account" "G" created with Amount = 100
      VendorPostingGroup.GET(PurchaseHeader."Vendor Posting Group");
      GLEntry.SETRANGE("G/L Account No.",VendorPostingGroup.GetPayablesAccount);
      GLEntry.SETRANGE("Document No.",InvoiceNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,-PurchaseLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE ValidateDeferralCodeWithCustAccountType@34();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [SCENARIO 379538] User cannot use deferral code for gen. journal line with Account Type = Customer
      // Unlocking this scenario must extend test case for PostGenJournalForGLAccountWithDifferentSourceCode TFS 217437
      Initialize;

      // [GIVEN] Gen. Journal Line with Account Type = Customer
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Customer);

      // [WHEN] User tries to set Deferral Code
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",CreateEqual5Periods);

      // [THEN] Error "You cannot specify a deferral code for this type of account." appears
      Assert.ExpectedError(AccTypeMustBeGLAccountErr);
    END;

    [Test]
    PROCEDURE ValidateDeferralCodeWithVendAccountType@36();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [SCENARIO 379538] User cannot use deferral code for gen. journal line with Account Type = Vendor
      // Unlocking this scenario must extend test case for PostGenJournalForGLAccountWithDifferentSourceCode TFS 217437
      Initialize;

      // [GIVEN] Gen. Journal Line with Account Type = Vendor
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Vendor);

      // [WHEN] User tries to set Deferral Code
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",CreateEqual5Periods);

      // [THEN] Error "You cannot specify a deferral code for this type of account." appears
      Assert.ExpectedError(AccTypeMustBeGLAccountErr);
    END;

    [Test]
    PROCEDURE ValidateDeferralCodeWithBankAccountType@35();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [SCENARIO 379538] User cannot use deferral code for gen. journal line with Account Type = Bank Account
      // Unlocking this scenario must extend test case for PostGenJournalForGLAccountWithDifferentSourceCode TFS 217437
      Initialize;

      // [GIVEN] Gen. Journal Line with Account Type = Bank Account
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"Bank Account");

      // [WHEN] User tries to set Deferral Code
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",CreateEqual5Periods);

      // [THEN] Error "You cannot specify a deferral code for this type of account." appears
      Assert.ExpectedError(AccTypeMustBeGLAccountErr);
    END;

    [Test]
    PROCEDURE ValidateDeferralCodeWithFAAccountType@40();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [SCENARIO 379538] User cannot use deferral code for gen. journal line with Account Type = Fixed Asset
      // Unlocking this scenario must extend test case for PostGenJournalForGLAccountWithDifferentSourceCode TFS 217437
      Initialize;

      // [GIVEN] Gen. Journal Line with Account Type = Fixed Asset
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"Fixed Asset");

      // [WHEN] User tries to set Deferral Code
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",CreateEqual5Periods);

      // [THEN] Error "You cannot specify a deferral code for this type of account." appears
      Assert.ExpectedError(AccTypeMustBeGLAccountErr);
    END;

    [Test]
    PROCEDURE ValidateDeferralCodeWithICPartnerAccountType@41();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [SCENARIO 379538] User cannot use deferral code for gen. journal line with Account Type = IC Partner
      // Unlocking this scenario must extend test case for PostGenJournalForGLAccountWithDifferentSourceCode TFS 217437
      Initialize;

      // [GIVEN] Gen. Journal Line with Account Type = IC Partner
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"IC Partner");

      // [WHEN] User tries to set Deferral Code
      ASSERTERROR GenJournalLine.VALIDATE("Deferral Code",CreateEqual5Periods);

      // [THEN] Error "You cannot specify a deferral code for this type of account." appears
      Assert.ExpectedError(AccTypeMustBeGLAccountErr);
    END;

    [Test]
    PROCEDURE PostGenJournalForGLAccountWithDifferentSourceCode@42();
    VAR
      GenJournalTemplate@1006 : Record 80;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // [FEATURE] [General Journal] [Source Code]
      // [SCENARIO 217437] Cassie can post general journal with deferrals when "Source Code" differs from setup.
      Initialize;

      // [GIVEN] Source codes "X" and "Y". "Source Code Setup".General = "X"
      // [GIVEN] General journal template "T" with "Source Code" = "Y"
      UpdateGeneralJournalInSourceCodeSetup;
      CreateGeneralGenJournalTemplateWithSourceCode(GenJournalTemplate);

      // [GIVEN] Deferral Template "D" where "Deferral Account" = "A", "Type" = "Equal per Period" and "No. of Periods" = 5
      // [GIVEN] General journal line where "General Journal Template" = "T", "Account Type" = "G/L Account" and "Deferral Code" = "D"
      CreateGenJournalLineWithTemplate(
        GenJournalLine,GenJournalTemplate,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo);

      // [WHEN] Post journal
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] System generates 6 (5 periods + 1 total balancing) G/L Entries for "A"
      VerifyTotalNumberOfPostedGLEntries(GenJournalLine,14);
      VerifyTotalNumberOfPostedDeferralGLEntries(GenJournalLine,6);
    END;

    LOCAL PROCEDURE Initialize@26();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Source Code Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDeferralCode@6() DeferralCode : Code[10];
    VAR
      DeferralTemplate@1000 : Record 1700;
    BEGIN
      DeferralTemplate.INIT;
      DeferralTemplate."Deferral Code" :=
        LibraryUtility.GenerateRandomCode(DeferralTemplate.FIELDNO("Deferral Code"),DATABASE::"Deferral Template");

      DeferralTemplate.INSERT;
      DeferralCode := DeferralTemplate."Deferral Code";

      EXIT(DeferralCode);
    END;

    PROCEDURE CreateMasterDeferralRecord@7(CalcMethod@1004 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';StartDate@1005 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';NumOfPeriods@1006 : Integer;PeriodDescription@1007 : Text[50];DeferralPercentage@1001 : Decimal) Code : Code[10];
    VAR
      DeferralTemplate@1002 : Record 1700;
      DeferralCode@1003 : Code[10];
      GLAccountNumber@1000 : Code[20];
    BEGIN
      // Setup
      DeferralCode := LibraryUtility.GenerateRandomCode(DeferralTemplate.FIELDNO("Deferral Code"),DATABASE::"Deferral Template");
      GLAccountNumber := LibraryERM.CreateGLAccountNo;

      DeferralTemplate.INIT;
      DeferralTemplate."Deferral Code" := DeferralCode;
      DeferralTemplate."Deferral Account" := GLAccountNumber;
      DeferralTemplate."Calc. Method" := CalcMethod;
      DeferralTemplate."Start Date" := StartDate;
      DeferralTemplate."No. of Periods" := NumOfPeriods;
      DeferralTemplate."Period Description" := PeriodDescription;
      DeferralTemplate."Deferral %" := DeferralPercentage;
      DeferralTemplate.INSERT;

      Code := DeferralTemplate."Deferral Code";

      EXIT(Code);
    END;

    LOCAL PROCEDURE CreateEqual5Periods80Percent@13() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Equal per Period",StartDate::"Posting Date",5,'%1 Deferral %5',80.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateEqual5Periods@29() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Equal per Period",StartDate::"Posting Date",5,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateStraightLine2Periods@25() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Straight-Line",StartDate::"Beginning of Period",2,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateStraightLine6Periods@2() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Straight-Line",StartDate::"Posting Date",6,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateStraightLine6PeriodsEOP@23() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Straight-Line",StartDate::"End of Period",6,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateDaysPerPeriod6Periods@19() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Days per Period",StartDate::"Beginning of Period",6,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateDaysPerPeriod6PeriodsEOP@20() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Days per Period",StartDate::"End of Period",6,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateDaysPerPeriod6PeriodsBONP@22() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Days per Period",StartDate::"Beginning of Next Period",6,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateDaysPerPeriod99Periods@14() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"Days per Period",StartDate::"Beginning of Next Period",99,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateUserDefined99Periods@16() DeferralCode : Code[10];
    BEGIN
      DeferralCode :=
        CreateMasterDeferralRecord(CalcMethod::"User-Defined",StartDate::"Posting Date",99,'%1 Deferral %5',100.0);
      EXIT(DeferralCode);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@11(VAR GenJournalBatch@1001 : Record 232);
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineByPage@12(VAR GeneralJournal@1003 : TestPage 39;GLAccount@1000 : Record 15;VAR GenJournalLine@1001 : Record 81;Amount@1002 : Decimal);
    VAR
      GenJournalBatch@1005 : Record 232;
    BEGIN
      // Find General Journal Template and Create General Journal Batch.
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryVariableStorage.Enqueue(GenJournalBatch."Journal Template Name");
      COMMIT;

      // Create General Journal Line.
      GeneralJournal.OPENEDIT;
      GeneralJournal."Account Type".SETVALUE(GenJournalLine."Account Type"::"G/L Account");
      GeneralJournal."Account No.".SETVALUE(GLAccount."No.");
      GeneralJournal.Amount.SETVALUE(Amount);
      GeneralJournal."Document No.".SETVALUE(GenJournalBatch.Name);

      GenJournalLine.VALIDATE("Deferral Code");
      COMMIT;

      // Create G/L Account No for Bal. Account No.
      GLAccount.SETFILTER("No.",'<>%1',GLAccount."No.");
      LibraryERM.CreateGLAccount(GLAccount);
      GeneralJournal."Bal. Account Type".SETVALUE(GenJournalLine."Account Type"::"G/L Account");
      GeneralJournal."Bal. Account No.".SETVALUE(GLAccount."No.");

      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateSalesInvoiceWithLineDeferral@53(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DeferralCode@1003 : Code[10]);
    VAR
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup,
        VATPostingSetup."VAT Calculation Type"::"Normal VAT",
        LibraryRandom.RandIntInRange(10,20));

      LibrarySales.CreateSalesHeader(
        SalesHeader,
        SalesHeader."Document Type"::Invoice,
        LibrarySales.CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,0),1);

      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(100,200,2));
      SalesLine.VALIDATE("Deferral Code",DeferralCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchInvoiceWithLineDeferral@62(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DeferralCode@1003 : Code[10]);
    VAR
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup,
        VATPostingSetup."VAT Calculation Type"::"Normal VAT",
        LibraryRandom.RandIntInRange(10,20));

      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,
        PurchaseHeader."Document Type"::Invoice,
        LibraryPurchase.CreateVendorWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,0),1);

      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(100,200,2));
      PurchaseLine.VALIDATE("Deferral Code",DeferralCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJournalLineWithTemplate@54(VAR GenJournalLine@1000 : Record 81;GenJournalTemplate@1001 : Record 80;AccountType@1003 : Option;AccountNo@1004 : Code[20]);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",AccountType,AccountNo,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        LibraryRandom.RandDecInRange(1000,2000,2));

      GenJournalLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      GenJournalLine.VALIDATE("Source Code",GenJournalTemplate."Source Code");
      GenJournalLine.VALIDATE("Deferral Code",CreateEqual5Periods);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralGenJournalTemplateWithSourceCode@64(VAR GenJournalTemplate@1000 : Record 80);
    VAR
      SourceCode@1002 : Record 230;
    BEGIN
      LibraryERM.CreateSourceCode(SourceCode);

      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Source Code",SourceCode.Code);
      GenJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralJournalInSourceCodeSetup@51();
    VAR
      SourceCodeSetup@1001 : Record 242;
      SourceCode@1002 : Record 230;
    BEGIN
      LibraryERM.CreateSourceCode(SourceCode);

      SourceCodeSetup.GET;
      SourceCodeSetup.VALIDATE("General Journal",SourceCode.Code);
      SourceCodeSetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@44(VAR GeneralJournalTemplateHandler@1000 : TestPage 250);
    BEGIN
      // General Journal Template Name filter with GeneralJournalTemplateName Global Variable.
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,LibraryVariableStorage.DequeueText);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleHandler@21(VAR DeferralSchedule@1000 : TestPage 1702);
    BEGIN
      DeferralSchedule.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateGenJournalLine@18(VAR GenJournalLine@1321 : Record 81;JournalTemplateName@1001 : Code[10];JournalBatchName@1003 : Code[10];DocumentType@1004 : Option;AccountType@1005 : Option;AccountNo@1006 : Code[20];BalAccountType@1002 : Option;BalAccountNo@1000 : Code[20];Amount@1007 : Decimal);
    VAR
      GenJournalBatch@1021 : Record 232;
      NoSeries@1022 : Record 308;
      NoSeriesMgt@1024 : Codeunit 396;
      RecRef@1027 : RecordRef;
    BEGIN
      // Find a balanced template/batch pair.
      GenJournalBatch.GET(JournalTemplateName,JournalBatchName);

      // Create a General Journal Entry.
      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      GenJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(GenJournalLine);
      GenJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,GenJournalLine.FIELDNO("Line No.")));
      GenJournalLine.INSERT(TRUE);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);  // Defaults to work date.
      GenJournalLine.VALIDATE("Document Type",DocumentType);
      GenJournalLine.VALIDATE("Account Type",AccountType);
      GenJournalLine.VALIDATE("Account No.",AccountNo);
      GenJournalLine.VALIDATE(Amount,Amount);
      IF NoSeries.GET(GenJournalBatch."No. Series") THEN
        GenJournalLine.VALIDATE("Document No.",NoSeriesMgt.GetNextNo(GenJournalBatch."No. Series",WORKDATE,FALSE)) // Unused but required field for posting.
      ELSE
        GenJournalLine.VALIDATE(
          "Document No.",LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
      GenJournalLine.VALIDATE("External Document No.",GenJournalLine."Document No.");  // Unused but required for vendor posting.
      GenJournalLine.VALIDATE("Source Code",LibraryERM.FindGeneralJournalSourceCode);  // Unused but required for AU, NZ builds
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyValuesonGLDeferralSummary@27(PostedDeferralHeader@1000 : Record 1704);
    VAR
      GLAccount@1002 : Record 15;
      GLEntry@1004 : Record 17;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.SetRange('GenJnlDocNo',PostedDeferralHeader."Gen. Jnl. Document No.");
      LibraryReportDataset.SetRange('No_GLAcc',PostedDeferralHeader."Account No.");
      LibraryReportDataset.SetRange('DocumentType',PostedDeferralHeader."Document Type");
      LibraryReportDataset.GetNextRow;

      IF GLAccount.GET(PostedDeferralHeader."Account No.") THEN
        LibraryReportDataset.AssertCurrentRowValue(
          'AccountName',
          GLAccount.Name);

      IF GLEntry.GET(PostedDeferralHeader."Entry No.") THEN BEGIN
        LibraryReportDataset.AssertCurrentRowValue(
          'PostingDate',
          FORMAT(GLEntry."Posting Date"));

        LibraryReportDataset.AssertCurrentRowValue(
          'DocumentType',
          GLEntry."Document Type");
      END;

      LibraryReportDataset.AssertCurrentRowValue(
        'DeferralAccount',
        PostedDeferralHeader."Deferral Account");

      LibraryReportDataset.AssertCurrentRowValue(
        'DeferralStartDate',
        FORMAT(PostedDeferralHeader."Start Date"));

      LibraryReportDataset.AssertCurrentRowValue(
        'NumOfPeriods',
        PostedDeferralHeader."No. of Periods");

      LibraryReportDataset.AssertCurrentRowValue(
        'TotalAmtDeferred',
        PostedDeferralHeader."Amount to Defer (LCY)");
    END;

    LOCAL PROCEDURE VerifyDescriptionOnTotalDeferralLine@33(DocNo@1000 : Code[20];GLAccNo@1001 : Code[20];PostingDate@1002 : Date;DefDescription@1003 : Text[50]);
    VAR
      GLEntry@1004 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.SETRANGE("Posting Date",PostingDate);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Description,DefDescription);
    END;

    LOCAL PROCEDURE VerifyTotalNumberOfPostedGLEntries@60(GenJournalLine@1000 : Record 81;ExpectedGLEntriesCount@1003 : Integer);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.INIT;
      GLEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      Assert.RecordCount(GLEntry,ExpectedGLEntriesCount);
    END;

    LOCAL PROCEDURE VerifyTotalNumberOfPostedDeferralGLEntries@45(GenJournalLine@1000 : Record 81;ExpectedGLEntriesCount@1003 : Integer);
    VAR
      GLEntry@1001 : Record 17;
      DeferralTemplate@1002 : Record 1700;
    BEGIN
      GLEntry.INIT;
      GLEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      DeferralTemplate.GET(GenJournalLine."Deferral Code");
      GLEntry.SETRANGE("G/L Account No.",DeferralTemplate."Deferral Account");
      Assert.RecordCount(GLEntry,ExpectedGLEntriesCount);
    END;

    [RequestPageHandler]
    PROCEDURE GLDeferralSummaryReportHandler@135(VAR DeferralSummaryGL@1000 : TestRequestPage 1700);
    BEGIN
      DeferralSummaryGL.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Revenue Expense Deferral] [Deferral]
    }
    END.
  }
}

