OBJECT Codeunit 134923 ERM Finance Performance
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      DrillDownAccScheduleLine@1011 : Record 85;
      DrillDownColumnLayout@1012 : Record 334;
      DrillDownGLAccount@1016 : Record 15;
      DrillDownCostType@1018 : Record 1103;
      DrillDownCFAccount@1019 : Record 841;
      DrillDownAnalysisViewEntry@1021 : Record 365;
      LibraryERM@1000 : Codeunit 131300;
      LibraryCostAcc@1007 : Codeunit 131340;
      LibraryCashFlow@1008 : Codeunit 131331;
      LibraryVariableStorage@1003 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryUtility@1002 : Codeunit 131000;
      Assert@1004 : Codeunit 130000;
      DimensionValueNotEqualERR@1005 : TextConst 'ENU=X-Axis Dimension value for interval no. %1 differs from expected value.';
      AmountNotEqualERR@1006 : TextConst 'ENU=Amount does not match expected value for measure %1, X-axis dimension %2.';
      CostAccUpdateMSG@1009 : TextConst 'ENU=has been updated in Cost Accounting';
      ColFormulaMSG@1010 : TextConst 'ENU=Column formula: %1.';
      RowFormulaMSG@1014 : TextConst 'ENU=Row formula: %1.';
      FormulaDrillDownERR@1013 : TextConst 'ENU=Incorrect %1 Formula message.';
      AccSchedChartManagement@1022 : Codeunit 762;
      AccSchedManagement@1015 : Codeunit 8;
      DrillDownValERR@1017 : TextConst 'ENU="DrillDown page Amount does not match the expected value for Acc. Sched. Line %1,Column Layout %2, Date Filter %3. "';
      IsInitialized@1020 : Boolean;
      MaxNumberOfMeasures@1023 : TextConst 'ENU=The number of measures added should not exceed the number of different colors that can be shown on the chart.';
      ErrMaxNumberOfMeasures@1024 : TextConst 'ENU=You cannot add more than %1 measures.';

    LOCAL PROCEDURE Initialize@148();
    VAR
      CostAccSetup@1001 : Record 1108;
    BEGIN
      CostAccSetup.GET;
      CostAccSetup."Align G/L Account" := CostAccSetup."Align G/L Account"::"No Alignment";
      CostAccSetup.MODIFY;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE TestChart_Period_Day@3();
    VAR
      AccountSchedulesChartSetup@1006 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Day,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Week@4();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Week,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Month@5();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Month,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Quarter@6();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Quarter,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Year@7();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Year,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_SchedLine@13();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0);
    END;

    [Test]
    PROCEDURE TestChart_ColLayout@10();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestChart(AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",AccountSchedulesChartSetup."Period Length",0);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_MonthToDay@14();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Month,
        LibraryRandom.RandIntInRange(5,15),AccountSchedulesChartSetup."Period Length"::Day);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_QuarterToWeek@16();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Quarter,
        LibraryRandom.RandIntInRange(5,15),AccountSchedulesChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_DayToWeek@15();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Day,
        LibraryRandom.RandIntInRange(5,15),AccountSchedulesChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_WeekToMonth@17();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,AccountSchedulesChartSetup."Period Length"::Week,
        LibraryRandom.RandIntInRange(5,15),AccountSchedulesChartSetup."Period Length"::Month);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_SchedLine_MonthToDay@24();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",AccountSchedulesChartSetup."Period Length"::Month,0,
        AccountSchedulesChartSetup."Period Length"::Day);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_SchedLine_QuarterToWeek@23();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",AccountSchedulesChartSetup."Period Length"::Quarter,0,
        AccountSchedulesChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_ColLayout_DayToWeek@22();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",AccountSchedulesChartSetup."Period Length"::Day,0,
        AccountSchedulesChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_ColLayout_WeekToMonth@21();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_ChangePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",AccountSchedulesChartSetup."Period Length"::Week,0,
        AccountSchedulesChartSetup."Period Length"::Month);
    END;

    [Test]
    PROCEDURE TestAction_NextPeriod_Period@18();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_MovePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),MovePeriod::Next);
    END;

    [Test]
    PROCEDURE TestAction_PrevPeriod_Period@19();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_MovePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),MovePeriod::Previous);
    END;

    [Test]
    PROCEDURE TestAction_NextPeriod_SchedLine@26();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_MovePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        MovePeriod::Next);
    END;

    [Test]
    PROCEDURE TestAction_PrevPeriod_SchedLine@25();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_MovePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        MovePeriod::Previous);
    END;

    [Test]
    PROCEDURE TestAction_NextPeriod_ColLayout@49();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_MovePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        MovePeriod::Next);
    END;

    [Test]
    PROCEDURE TestAction_PrevPeriod_ColLayout@47();
    VAR
      AccountSchedulesChartSetup@1001 : Record 762;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestAction_MovePeriod(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        MovePeriod::Previous);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_ColumnFormula_Period@20();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::ColumnFormula);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler,MsgHandler)]
    PROCEDURE TestAction_DrillDown_RowFormula_Period@79();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::RowFormula);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,GLChartofAccountsHandler)]
    PROCEDURE TestAction_DrillDown_GLAccount_Period@95();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::GLAccount);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,ChartofCostTypeHandler)]
    PROCEDURE TestAction_DrillDown_CostType_Period@96();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::CostType);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,ChartofCashFlowHandler)]
    PROCEDURE TestAction_DrillDown_CashFlowAccount_Period@97();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::CashFlowAccount);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_ColumnFormula_SchedLine@109();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::ColumnFormula);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler,MsgHandler)]
    PROCEDURE TestAction_DrillDown_RowFormula_SchedLine@108();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::RowFormula);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,GLChartofAccountsHandler)]
    PROCEDURE TestAction_DrillDown_GLAccount_SchedLine@107();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::GLAccount);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,ChartofCostTypeHandler)]
    PROCEDURE TestAction_DrillDown_CostType_SchedLine@106();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::CostType);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,ChartofCashFlowHandler)]
    PROCEDURE TestAction_DrillDown_CashFlowAccount_SchedLine@105();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::CashFlowAccount);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_ColumnFormula_ColLayout@141();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;

      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::ColumnFormula);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler,MsgHandler)]
    PROCEDURE TestAction_DrillDown_RowFormula_ColLayout@140();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::RowFormula);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,GLChartofAccountsHandler)]
    PROCEDURE TestAction_DrillDown_GLAccount_ColLayout@139();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::GLAccount);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,ChartofCostTypeHandler)]
    PROCEDURE TestAction_DrillDown_CostType_ColLayout@138();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::CostType);
    END;

    [Test]
    [HandlerFunctions(MsgHandler,ChartofCashFlowHandler)]
    PROCEDURE TestAction_DrillDown_CashFlowAccount_ColLayout@137();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDown(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column",LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::CashFlowAccount);
    END;

    [Test]
    [HandlerFunctions(ChartofAccAnalysisViewHandler)]
    PROCEDURE TestAction_DrillDown_AnalysisViewGLAccount_Period@67();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      AnalysisViewType@1001 : 'GLAccount,CashFlow';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDownWithAnalysisView(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),AnalysisViewType::GLAccount);
    END;

    [Test]
    [HandlerFunctions(ChartofAccAnalysisViewHandler)]
    PROCEDURE TestAction_DrillDown_AnalysisViewGLAccount_SchedLine@41();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      AnalysisViewType@1002 : 'GLAccount,CashFlow';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDownWithAnalysisView(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        AnalysisViewType::GLAccount);
    END;

    [Test]
    [HandlerFunctions(ChartofAccAnalysisViewHandler)]
    PROCEDURE TestAction_DrillDown_AnalysisViewGLAccount_ColLayout@42();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      AnalysisViewType@1002 : 'GLAccount,CashFlow';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDownWithAnalysisView(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        AnalysisViewType::GLAccount);
    END;

    [Test]
    [HandlerFunctions(ChartofAccAnalysisViewHandler)]
    PROCEDURE TestAction_DrillDown_AnalysisViewCashFlowAccount_Period@70();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      AnalysisViewType@1001 : 'GLAccount,CashFlow';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDownWithAnalysisView(
        AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),AnalysisViewType::CashFlow);
    END;

    [Test]
    [HandlerFunctions(ChartofAccAnalysisViewHandler)]
    PROCEDURE TestAction_DrillDown_AnalysisViewCashFlowAccount_SchedLine@69();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      AnalysisViewType@1002 : 'GLAccount,CashFlow';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDownWithAnalysisView(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        AnalysisViewType::CashFlow);
    END;

    [Test]
    [HandlerFunctions(ChartofAccAnalysisViewHandler)]
    PROCEDURE TestAction_DrillDown_AnalysisViewCashFlowAccount_ColLayout@66();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      AnalysisViewType@1002 : 'GLAccount,CashFlow';
    BEGIN
      Initialize;
      AccountSchedulesChartSetup.INIT;

      TestDrillDownWithAnalysisView(
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",LibraryRandom.RandIntInRange(1,5) - 1,0,
        AnalysisViewType::CashFlow);
    END;

    [Test]
    PROCEDURE TestBusChartBuffer_GetMaxNoOfMeasures@8();
    VAR
      BusinessChartBuffer@1000 : Record 485;
    BEGIN
      Assert.AreEqual(6,BusinessChartBuffer.GetMaxNumberOfMeasures,MaxNumberOfMeasures);
    END;

    [Test]
    PROCEDURE TestBusChartBuffer_ErrorOnExceedingMaxNoOfMeasures@27();
    VAR
      BusinessChartBuffer@1000 : Record 485;
    BEGIN
      ASSERTERROR BusinessChartBuffer.RaiseErrorMaxNumberOfMeasuresExceeded;
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrMaxNumberOfMeasures,BusinessChartBuffer.GetMaxNumberOfMeasures)) > 0,
        MaxNumberOfMeasures);
    END;

    [Test]
    [HandlerFunctions(AnalysisViewBudgetEntriesPageHandler)]
    PROCEDURE TestAction_DrillDown_ChartOfAccAnalyViewBudgetAmt@57();
    VAR
      AccountSchedulesChartSetup@1011 : Record 762;
      AccScheduleLine@1010 : Record 85;
      AnalysisView@1012 : Record 363;
      AnalysisViewBudgetEntry@1016 : Record 366;
      ColumnLayout@1003 : Record 334;
      GLAccountNo@1008 : Code[20];
      StartDate@1001 : Date;
      EndDate@1002 : Date;
      AnalysisViewType@1000 : 'GLAccount,CashFlow';
    BEGIN
      // Test Drilldown from Chart Of Accs. Analysis View Budget Amount will open Analysis Budget View Entries.

      // Setup: Create Analysis View Budget Entry with Column Layout.
      Initialize;
      AccountSchedulesChartSetup.INIT;
      SetupStartAndEndDates(
        StartDate,EndDate,AccountSchedulesChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5),0);
      SetupAccountScheduleWithAnalysisView2Cols(AccScheduleLine,ColumnLayout,AnalysisView,GLAccountNo,AnalysisViewType::GLAccount);
      CreateAnalysisViewBudgetEntry(AnalysisViewBudgetEntry,StartDate,AnalysisView.Code,GLAccountNo);
      LibraryVariableStorage.Enqueue(AnalysisView.Code);
      LibraryVariableStorage.Enqueue(GLAccountNo);

      // Exercise: Drilldown Chart Of Accs. Analysis View Budget Amount.
      DrillDownChartOfAccsAnalysisViewBudgetAmt(GLAccountNo);

      // Verify: Verify Drilldown from Chart Of Accs. Analysis View Budget Amount will open Analysis Budget View Entries in AnalysisViewBudgetEntriesPageHandler.
    END;

    LOCAL PROCEDURE SetupChartParam@32(VAR AccountSchedulesChartSetup@1000 : Record 762;VAR AccScheduleLine@1003 : Record 85;VAR ColumnLayout@1001 : Record 334;ShowPer@1002 : Option;PeriodLength@1006 : Option;StartDate@1004 : Date;EndDate@1005 : Date;NoOfPeriods@1007 : Integer);
    BEGIN
      CLEAR(AccountSchedulesChartSetup);
      AccountSchedulesChartSetup."User ID" := USERID;
      AccountSchedulesChartSetup.Name :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AccountSchedulesChartSetup.FIELDNO(Name),DATABASE::"Account Schedules Chart Setup"),1,30);
      AccountSchedulesChartSetup."Account Schedule Name" := AccScheduleLine."Schedule Name";
      AccountSchedulesChartSetup."Column Layout Name" := ColumnLayout."Column Layout Name";
      AccountSchedulesChartSetup."Base X-Axis on" := ShowPer;
      AccountSchedulesChartSetup."Period Length" := PeriodLength;
      AccountSchedulesChartSetup."Start Date" := StartDate;
      IF AccountSchedulesChartSetup."Base X-Axis on" = AccountSchedulesChartSetup."Base X-Axis on"::Period THEN
        AccountSchedulesChartSetup."No. of Periods" := NoOfPeriods
      ELSE
        AccountSchedulesChartSetup."End Date" := EndDate;
      AccountSchedulesChartSetup.INSERT;

      CreatePerfIndSetupLines(AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout);
    END;

    LOCAL PROCEDURE CreatePerfIndSetupLines@36(VAR AccountSchedulesChartSetup@1002 : Record 762;VAR AccScheduleLine@1001 : Record 85;VAR ColumnLayout@1000 : Record 334);
    VAR
      MeasureName@1003 : Text[111];
    BEGIN
      AccScheduleLine.FINDSET;
      CASE AccountSchedulesChartSetup."Base X-Axis on" OF
        AccountSchedulesChartSetup."Base X-Axis on"::Period:
          REPEAT
            ColumnLayout.FINDSET;
            REPEAT
              MeasureName := AccScheduleLine.Description + ' ' + ColumnLayout."Column Header";
              CreateOnePerfIndSetupLine(AccountSchedulesChartSetup,AccScheduleLine."Line No.",ColumnLayout."Line No.",MeasureName,
                FORMAT(AccScheduleLine."Line No.") + ' ' + FORMAT(ColumnLayout."Line No."),LibraryRandom.RandIntInRange(1,3));
            UNTIL ColumnLayout.NEXT = 0;
          UNTIL AccScheduleLine.NEXT = 0;
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column":
          BEGIN
            REPEAT
              MeasureName := AccScheduleLine.Description;
              CreateOnePerfIndSetupLine(
                AccountSchedulesChartSetup,AccScheduleLine."Line No.",0,MeasureName,FORMAT(AccScheduleLine."Line No."),
                LibraryRandom.RandIntInRange(1,3));
            UNTIL AccScheduleLine.NEXT = 0;
            ColumnLayout.FINDSET;
            REPEAT
              MeasureName := ColumnLayout."Column Header";
              CreateOnePerfIndSetupLine(
                AccountSchedulesChartSetup,0,ColumnLayout."Line No.",MeasureName,FORMAT(ColumnLayout."Line No."),
                LibraryRandom.RandIntInRange(1,3));
            UNTIL ColumnLayout.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE CreateOnePerfIndSetupLine@52(VAR AccountSchedulesChartSetup@1001 : Record 762;AccScheduleLineNo@1003 : Integer;ColLayoutLineNo@1005 : Integer;MeasureName@1006 : Text[111];MeasureValue@1007 : Text[30];ChartType@1002 : Option);
    VAR
      AccSchedChartSetupLine@1000 : Record 763;
    BEGIN
      WITH AccSchedChartSetupLine DO BEGIN
        INIT;
        "User ID" := AccountSchedulesChartSetup."User ID";
        Name := AccountSchedulesChartSetup.Name;
        "Account Schedule Name" := AccountSchedulesChartSetup."Account Schedule Name";
        "Account Schedule Line No." := AccScheduleLineNo;
        "Column Layout Name" := AccountSchedulesChartSetup."Column Layout Name";
        "Column Layout Line No." := ColLayoutLineNo;
        "Original Measure Name" := MeasureName;
        "Measure Name" := MeasureName;
        "Measure Value" := MeasureValue;
        "Chart Type" := ChartType;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SetupGLEntries@33(VAR GLEntry@1000 : Record 17;AccountNo@1004 : Code[20];BalAccountNo@1005 : Code[20];StartingDate@1001 : Date;EndingDate@1002 : Date;PeriodLength@1003 : Option);
    VAR
      PostingDate@1006 : Date;
    BEGIN
      PostingDate := StartingDate;

      REPEAT
        CreateGLEntry(GLEntry,PostingDate,AccountNo,BalAccountNo,LibraryRandom.RandDecInDecimalRange(1,100,2));
        PostingDate := CalculateNextDate(PostingDate,1,PeriodLength);
      UNTIL PostingDate > EndingDate;
    END;

    LOCAL PROCEDURE CreateGLEntry@39(VAR GLEntry@1001 : Record 17;PostingDate@1004 : Date;AccountNo@1000 : Code[20];BalAccountNo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      LastGLEntry@1005 : Record 17;
    BEGIN
      CLEAR(GLEntry);
      GLEntry."G/L Account No." := AccountNo;
      GLEntry."Bal. Account No." := BalAccountNo;
      GLEntry."Posting Date" := PostingDate;
      GLEntry.Amount := Amount;
      IF LastGLEntry.FINDLAST THEN;
      GLEntry."Entry No." := LastGLEntry."Entry No." + 1;
      GLEntry.INSERT;
    END;

    LOCAL PROCEDURE SetupCostEntries@62(VAR CostEntry@1000 : Record 1104;CostTypeNo@1004 : Code[20];StartingDate@1001 : Date;EndingDate@1002 : Date;PeriodLength@1003 : Option);
    VAR
      PostingDate@1006 : Date;
    BEGIN
      PostingDate := StartingDate;

      REPEAT
        CreateCostEntry(CostEntry,PostingDate,CostTypeNo,LibraryRandom.RandDecInDecimalRange(1,100,2));
        PostingDate := CalculateNextDate(PostingDate,1,PeriodLength);
      UNTIL PostingDate > EndingDate;
    END;

    LOCAL PROCEDURE CreateCostEntry@61(VAR CostEntry@1001 : Record 1104;PostingDate@1004 : Date;CostTypeNo@1000 : Code[20];Amount@1003 : Decimal);
    VAR
      LastCostEntry@1005 : Record 1104;
    BEGIN
      CLEAR(CostEntry);
      CostEntry."Cost Type No." := CostTypeNo;
      CostEntry."Posting Date" := PostingDate;
      CostEntry.Amount := Amount;
      IF LastCostEntry.FINDLAST THEN;
      CostEntry."Entry No." := LastCostEntry."Entry No." + 1;
      CostEntry.INSERT;
    END;

    LOCAL PROCEDURE SetupCashFlowEntries@54(VAR CashFlowForecastEntry@1000 : Record 847;CFAccountNo@1004 : Code[20];StartingDate@1001 : Date;EndingDate@1002 : Date;PeriodLength@1003 : Option);
    VAR
      PostingDate@1006 : Date;
    BEGIN
      PostingDate := StartingDate;

      REPEAT
        CreateCashFlowEntry(CashFlowForecastEntry,PostingDate,CFAccountNo,LibraryRandom.RandDecInDecimalRange(1,100,2));
        PostingDate := CalculateNextDate(PostingDate,1,PeriodLength);
      UNTIL PostingDate > EndingDate;
    END;

    LOCAL PROCEDURE CreateCashFlowEntry@46(VAR CashFlowForecastEntry@1001 : Record 847;PostingDate@1004 : Date;CFAccountNo@1000 : Code[20];Amount@1003 : Decimal);
    VAR
      LastCashFlowForecastEntry@1005 : Record 847;
    BEGIN
      CLEAR(CashFlowForecastEntry);

      CashFlowForecastEntry."Cash Flow Account No." := CFAccountNo;
      CashFlowForecastEntry."Cash Flow Date" := PostingDate;
      CashFlowForecastEntry."Amount (LCY)" := Amount;
      IF LastCashFlowForecastEntry.FINDLAST THEN;
      CashFlowForecastEntry."Entry No." := LastCashFlowForecastEntry."Entry No." + 1;
      CashFlowForecastEntry.INSERT;
    END;

    LOCAL PROCEDURE SetupAnalysisViewEntries@34(VAR AnalysisViewEntry@1000 : Record 365;AnalysisViewCode@1004 : Code[10];GLAccountNo@1005 : Code[20];StartingDate@1001 : Date;EndingDate@1002 : Date;PeriodLength@1003 : Option;AnalysisViewType@1008 : 'GLAccount,CashFlow');
    VAR
      PostingDate@1006 : Date;
      EntryNo@1007 : Integer;
    BEGIN
      PostingDate := StartingDate;
      EntryNo := 1;

      REPEAT
        CreateAnalysisViewEntry(
          AnalysisViewEntry,PostingDate,AnalysisViewCode,GLAccountNo,LibraryRandom.RandDecInDecimalRange(1,100,2),EntryNo,
          AnalysisViewType);
        PostingDate := CalculateNextDate(PostingDate,1,PeriodLength);
        EntryNo += 1;
      UNTIL PostingDate > EndingDate;
    END;

    LOCAL PROCEDURE CreateAnalysisViewEntry@31(VAR AnalysisViewEntry@1001 : Record 365;PostingDate@1004 : Date;AnalysisViewCode@1000 : Code[10];GLAccountNo@1002 : Code[20];Amount@1003 : Decimal;EntryNo@1006 : Integer;AnalysisViewType@1005 : 'GLAccount,CashFlow');
    BEGIN
      CLEAR(AnalysisViewEntry);

      AnalysisViewEntry."Analysis View Code" := AnalysisViewCode;
      AnalysisViewEntry."Account No." := GLAccountNo;
      AnalysisViewEntry."Account Source" := AnalysisViewType;
      AnalysisViewEntry."Posting Date" := PostingDate;
      AnalysisViewEntry.Amount := Amount;
      AnalysisViewEntry."Entry No." := EntryNo;
      AnalysisViewEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateAnalysisViewBudgetEntry@60(VAR AnalysisViewBudgetEntry@1001 : Record 366;PostingDate@1004 : Date;AnalysisViewCode@1000 : Code[10];GLAccountNo@1002 : Code[20]);
    BEGIN
      CLEAR(AnalysisViewBudgetEntry);
      WITH AnalysisViewBudgetEntry DO BEGIN
        "Analysis View Code" := AnalysisViewCode;
        "G/L Account No." := GLAccountNo;
        "Posting Date" := PostingDate;
        Amount := LibraryRandom.RandDec(1000,2);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ClearDrillDownGlobalParams@38();
    BEGIN
      CLEAR(DrillDownAccScheduleLine);
      CLEAR(DrillDownColumnLayout);
      CLEAR(DrillDownGLAccount);
      CLEAR(DrillDownCostType);
      CLEAR(DrillDownCFAccount);
      CLEAR(DrillDownAnalysisViewEntry);
    END;

    LOCAL PROCEDURE DrillDownChartOfAccsAnalysisViewBudgetAmt@86(No@1001 : Code[20]);
    VAR
      ChartOfAccsAnalysisView@1000 : TestPage 569;
    BEGIN
      ChartOfAccsAnalysisView.OPENVIEW;
      ChartOfAccsAnalysisView.FILTER.SETFILTER("No.",No);
      ChartOfAccsAnalysisView."Budgeted Amount".DRILLDOWN;
    END;

    LOCAL PROCEDURE SetupDrillDownData@63(VAR AccountSchedulesChartSetup@1003 : Record 762;VAR AccScheduleLine@1002 : Record 85;VAR ColumnLayout@1001 : Record 334;VAR BusinessChartBuffer@1000 : Record 485;TestDrillDownType@1004 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount');
    VAR
      NoOfLines@1005 : Integer;
      NoOfColumns@1006 : Integer;
      FromDate@1007 : Date;
      ToDate@1008 : Date;
    BEGIN
      // This function assumes the last account schedule line and the last column layout records are of type formula
      ClearDrillDownGlobalParams;

      NoOfLines := AccScheduleLine.COUNT;
      NoOfColumns := ColumnLayout.COUNT;

      CASE AccountSchedulesChartSetup."Base X-Axis on" OF
        AccountSchedulesChartSetup."Base X-Axis on"::Period:
          BEGIN
            BusinessChartBuffer."Drill-Down X Index" :=
              LibraryRandom.RandIntInRange(1,AccountSchedulesChartSetup."No. of Periods") - 1;
            ToDate := BusinessChartBuffer.GetXValueAsDate(BusinessChartBuffer."Drill-Down X Index");
            FromDate := BusinessChartBuffer.CalcFromDate(ToDate);
            CASE TestDrillDownType OF
              TestDrillDownType::ColumnFormula:
                BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(1,NoOfLines) * NoOfColumns - 1;
              TestDrillDownType::RowFormula:
                BusinessChartBuffer."Drill-Down Measure Index" :=
                  (NoOfLines - 1) * NoOfColumns + LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
              TestDrillDownType::GLAccount:
                BusinessChartBuffer."Drill-Down Measure Index" := 0;
              TestDrillDownType::CostType:
                BusinessChartBuffer."Drill-Down Measure Index" := 2;
              TestDrillDownType::CashFlowAccount:
                BusinessChartBuffer."Drill-Down Measure Index" := 4;
            END;
          END;
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line":
          BEGIN
            FromDate := AccountSchedulesChartSetup."Start Date";
            ToDate := AccountSchedulesChartSetup."End Date";
            CASE TestDrillDownType OF
              TestDrillDownType::ColumnFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := LibraryRandom.RandIntInRange(1,NoOfLines) - 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := NoOfColumns - 1;
                END;
              TestDrillDownType::RowFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := NoOfLines - 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                END;
              TestDrillDownType::GLAccount:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := 0;
                  BusinessChartBuffer."Drill-Down Measure Index" := 0;
                END;
              TestDrillDownType::CostType:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := 0;
                END;
              TestDrillDownType::CashFlowAccount:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := 2;
                  BusinessChartBuffer."Drill-Down Measure Index" := 0;
                END;
            END;
          END;
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column":
          BEGIN
            FromDate := AccountSchedulesChartSetup."Start Date";
            ToDate := AccountSchedulesChartSetup."End Date";
            CASE TestDrillDownType OF
              TestDrillDownType::ColumnFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := NoOfColumns - 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(1,NoOfLines) - 1;
                END;
              TestDrillDownType::RowFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                  BusinessChartBuffer."Drill-Down Measure Index" := NoOfLines - 1;
                END;
              TestDrillDownType::GLAccount:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := 0;
                  BusinessChartBuffer."Drill-Down Measure Index" := 0;
                END;
              TestDrillDownType::CostType:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := 0;
                  BusinessChartBuffer."Drill-Down Measure Index" := 1;
                END;
              TestDrillDownType::CashFlowAccount:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := 0;
                  BusinessChartBuffer."Drill-Down Measure Index" := 2;
                END;
            END;
          END;
      END;

      SetupDrillDownFilters(AccScheduleLine,ColumnLayout,TestDrillDownType,FromDate,ToDate);
    END;

    LOCAL PROCEDURE SetupDrillDownFilters@129(VAR AccScheduleLine@1003 : Record 85;VAR ColumnLayout@1002 : Record 334;TestDrillDownType@1000 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount';FromDate@1007 : Date;ToDate@1008 : Date);
    BEGIN
      CASE TestDrillDownType OF
        TestDrillDownType::ColumnFormula:
          BEGIN
            ColumnLayout.FINDLAST;
            DrillDownColumnLayout := ColumnLayout;
            DrillDownAccScheduleLine.INIT;
          END;
        TestDrillDownType::RowFormula:
          BEGIN
            AccScheduleLine.FINDLAST;
            DrillDownAccScheduleLine := AccScheduleLine;
            DrillDownColumnLayout.INIT;
          END;
        TestDrillDownType::GLAccount:
          BEGIN
            AccScheduleLine.FINDFIRST;
            ColumnLayout.FINDFIRST;
            AccScheduleLine.SETRANGE("Date Filter",FromDate,ToDate);
            AccSchedManagement.SetStartDateEndDate(FromDate,ToDate);
            AccSchedManagement.SetGLAccRowFilters(DrillDownGLAccount,AccScheduleLine);
            AccSchedManagement.SetGLAccColumnFilters(DrillDownGLAccount,AccScheduleLine,ColumnLayout);
            DrillDownAccScheduleLine.COPY(AccScheduleLine);
            DrillDownColumnLayout.COPY(ColumnLayout);
          END;
        TestDrillDownType::CostType:
          BEGIN
            AccScheduleLine.FINDSET;
            AccScheduleLine.NEXT;
            ColumnLayout.FINDFIRST;
            AccScheduleLine.SETRANGE("Date Filter",FromDate,ToDate);
            AccSchedManagement.SetStartDateEndDate(FromDate,ToDate);
            AccSchedManagement.SetCostTypeRowFilters(DrillDownCostType,AccScheduleLine,ColumnLayout);
            AccSchedManagement.SetCostTypeColumnFilters(DrillDownCostType,AccScheduleLine,ColumnLayout);
            DrillDownAccScheduleLine.COPY(AccScheduleLine);
            DrillDownColumnLayout.COPY(ColumnLayout);
          END;
        TestDrillDownType::CashFlowAccount:
          BEGIN
            AccScheduleLine.FINDSET;
            AccScheduleLine.NEXT(2);
            ColumnLayout.FINDFIRST;
            AccScheduleLine.SETRANGE("Date Filter",FromDate,ToDate);
            AccSchedManagement.SetStartDateEndDate(FromDate,ToDate);
            AccSchedManagement.SetCFAccRowFilter(DrillDownCFAccount,AccScheduleLine);
            AccSchedManagement.SetCFAccColumnFilter(DrillDownCFAccount,AccScheduleLine,ColumnLayout);
            DrillDownAccScheduleLine.COPY(AccScheduleLine);
            DrillDownColumnLayout.COPY(ColumnLayout);
          END;
      END;
    END;

    LOCAL PROCEDURE SetupDrillDownDataAnalysisView@55(VAR AccountSchedulesChartSetup@1003 : Record 762;VAR AccScheduleLine@1002 : Record 85;VAR ColumnLayout@1001 : Record 334;VAR BusinessChartBuffer@1000 : Record 485;AnalysisViewCode@1006 : Code[10];AnalysisViewType@1008 : 'GLAccount,CashFlow');
    VAR
      GLAccount@1007 : Record 15;
      CFAccount@1009 : Record 841;
      FromDate@1004 : Date;
      ToDate@1005 : Date;
    BEGIN
      ClearDrillDownGlobalParams;

      CASE AccountSchedulesChartSetup."Base X-Axis on" OF
        AccountSchedulesChartSetup."Base X-Axis on"::Period:
          BEGIN
            BusinessChartBuffer."Drill-Down X Index" :=
              LibraryRandom.RandIntInRange(1,AccountSchedulesChartSetup."No. of Periods") - 1;
            BusinessChartBuffer."Drill-Down Measure Index" := 0;
            ToDate := BusinessChartBuffer.GetXValueAsDate(BusinessChartBuffer."Drill-Down X Index");
            FromDate := BusinessChartBuffer.CalcFromDate(ToDate);
          END;
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line",
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column":
          BEGIN
            FromDate := AccountSchedulesChartSetup."Start Date";
            ToDate := AccountSchedulesChartSetup."End Date";
            BusinessChartBuffer."Drill-Down X Index" := 0;
            BusinessChartBuffer."Drill-Down Measure Index" := 0;
          END;
      END;

      AccScheduleLine.FINDFIRST;
      ColumnLayout.FINDFIRST;
      AccScheduleLine.SETRANGE("Date Filter",FromDate,ToDate);
      AccSchedManagement.SetStartDateEndDate(FromDate,ToDate);
      IF AnalysisViewType = AnalysisViewType::GLAccount THEN BEGIN
        AccSchedManagement.SetGLAccRowFilters(GLAccount,AccScheduleLine);
        AccSchedManagement.SetGLAccColumnFilters(GLAccount,AccScheduleLine,ColumnLayout);
      END ELSE BEGIN
        AccSchedManagement.SetCFAccRowFilter(CFAccount,AccScheduleLine);
        AccSchedManagement.SetCFAccColumnFilter(CFAccount,AccScheduleLine,ColumnLayout);
      END;
      DrillDownAccScheduleLine.COPY(AccScheduleLine);
      DrillDownColumnLayout.COPY(ColumnLayout);
      CLEAR(DrillDownAnalysisViewEntry);
      DrillDownAnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisViewCode);
      IF AnalysisViewType = AnalysisViewType::GLAccount THEN BEGIN
        DrillDownAnalysisViewEntry.SETRANGE("Account No.",GLAccount.GETFILTER("No."));
        DrillDownAnalysisViewEntry.SETRANGE("Account Source",DrillDownAnalysisViewEntry."Account Source"::"G/L Account");
        GLAccount.COPYFILTER("Date Filter",DrillDownAnalysisViewEntry."Posting Date");
      END ELSE BEGIN
        DrillDownAnalysisViewEntry.SETRANGE("Account No.",CFAccount.GETFILTER("No."));
        DrillDownAnalysisViewEntry.SETRANGE("Account Source",DrillDownAnalysisViewEntry."Account Source"::"Cash Flow Account");
        CFAccount.COPYFILTER("Date Filter",DrillDownAnalysisViewEntry."Posting Date");
      END;
    END;

    LOCAL PROCEDURE SetupStartAndEndDates@75(VAR StartDate@1000 : Date;VAR EndDate@1001 : Date;ShowPer@1003 : 'Period,Acc. Sched. Line,Acc. Sched. Column';PeriodLength@1004 : Option;NoOfPeriods@1002 : Integer);
    BEGIN
      StartDate := WORKDATE;

      IF ShowPer = ShowPer::Period THEN
        EndDate := CalculatePeriodEndDate(CalculateNextDate(StartDate,NoOfPeriods - 1,PeriodLength),PeriodLength)
      ELSE
        EndDate := CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandIntInRange(100,200)),WORKDATE);
    END;

    LOCAL PROCEDURE TestChart@30(ShowPer@1008 : Option;PeriodLength@1000 : Option;NoOfPeriods@1009 : Integer);
    VAR
      AccountSchedulesChartSetup@1010 : Record 762;
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1001 : Record 334;
      BusinessChartBuffer@1011 : Record 485;
      StartDate@1003 : Date;
      EndDate@1004 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2Accounts2Cols(
        AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,0);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);
    END;

    LOCAL PROCEDURE TestAction_ChangePeriod@28(ShowPer@1008 : Option;PeriodLength@1000 : Option;NoOfPeriods@1009 : Integer;NewPeriodLength@1012 : Option);
    VAR
      AccountSchedulesChartSetup@1010 : Record 762;
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1001 : Record 334;
      BusinessChartBuffer@1011 : Record 485;
      StartDate@1003 : Date;
      EndDate@1004 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2Accounts2Cols(
        AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,0);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);

      AccountSchedulesChartSetup."Period Length" := NewPeriodLength;
      AccountSchedulesChartSetup.MODIFY;
      IF ShowPer = AccountSchedulesChartSetup."Base X-Axis on"::Period THEN
        EndDate :=
          CalculatePeriodEndDate(
            CalculateNextDate(StartDate,NoOfPeriods - 1,AccountSchedulesChartSetup."Period Length"),
            AccountSchedulesChartSetup."Period Length")
      ELSE BEGIN
        StartDate := CalculatePeriodStartDate(EndDate,AccountSchedulesChartSetup."Period Length");
        EndDate := CalculatePeriodEndDate(EndDate,AccountSchedulesChartSetup."Period Length");
      END;

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,0);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);
    END;

    LOCAL PROCEDURE TestAction_MovePeriod@44(ShowPer@1008 : Option;PeriodLength@1000 : Option;NoOfPeriods@1009 : Integer;PeriodToCheck@1015 : Option);
    VAR
      AccountSchedulesChartSetup@1010 : Record 762;
      AccScheduleLine@1002 : Record 85;
      ColumnLayout@1001 : Record 334;
      BusinessChartBuffer@1011 : Record 485;
      StartDate@1003 : Date;
      EndDate@1004 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2Accounts2Cols(
        AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,0);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);

      ShiftPeriod(
        StartDate,EndDate,PeriodToCheck,AccountSchedulesChartSetup."Period Length",AccountSchedulesChartSetup."Base X-Axis on");

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,PeriodToCheck);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);
    END;

    LOCAL PROCEDURE TestDrillDown@51(ShowPer@1004 : Option;PeriodLength@1003 : Option;NoOfPeriods@1000 : Integer;TestDrillDownType@1015 : 'ColumnFormula,RowFormula,GLAccount,CostType,CashFlowAccount');
    VAR
      AccountSchedulesChartSetup@1011 : Record 762;
      AccScheduleLine@1010 : Record 85;
      ColumnLayout@1009 : Record 334;
      GLAccount@1008 : Record 15;
      BalGLAccount@1007 : Record 15;
      GLEntry@1006 : Record 17;
      CostEntry@1016 : Record 1104;
      CashFlowForecastEntry@1014 : Record 847;
      BusinessChartBuffer@1005 : Record 485;
      CostType@1013 : Record 1103;
      CashFlowAccount@1012 : Record 841;
      StartDate@1001 : Date;
      EndDate@1002 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupAccountScheduleCFandTotAccounts2Cols(AccScheduleLine,ColumnLayout,GLAccount,CostType,CashFlowAccount);
      LibraryERM.CreateGLAccount(BalGLAccount);

      SetupChartParam(AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);
      SetupGLEntries(GLEntry,GLAccount."No.",BalGLAccount."No.",StartDate,EndDate,PeriodLength);
      SetupCostEntries(CostEntry,CostType."No.",StartDate,EndDate,PeriodLength);
      SetupCashFlowEntries(CashFlowForecastEntry,CashFlowAccount."No.",StartDate,EndDate,PeriodLength);

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,0);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);

      SetupDrillDownData(AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,BusinessChartBuffer,TestDrillDownType);
      IF TestDrillDownType = TestDrillDownType::RowFormula THEN
        LibraryVariableStorage.Enqueue(BusinessChartBuffer);
      DrillDownChart(BusinessChartBuffer,AccountSchedulesChartSetup);
    END;

    LOCAL PROCEDURE TestDrillDownWithAnalysisView@29(ShowPer@1004 : Option;PeriodLength@1003 : Option;NoOfPeriods@1000 : Integer;AnalysisViewType@1014 : 'GLAccount,CashFlow');
    VAR
      AccountSchedulesChartSetup@1011 : Record 762;
      AccScheduleLine@1010 : Record 85;
      ColumnLayout@1009 : Record 334;
      BalGLAccount@1007 : Record 15;
      GLEntry@1006 : Record 17;
      CashFlowForecastEntry@1015 : Record 847;
      BusinessChartBuffer@1005 : Record 485;
      AnalysisView@1012 : Record 363;
      AnalysisViewEntry@1013 : Record 365;
      AccountNo@1008 : Code[20];
      StartDate@1001 : Date;
      EndDate@1002 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupAccountScheduleWithAnalysisView2Cols(AccScheduleLine,ColumnLayout,AnalysisView,AccountNo,AnalysisViewType);

      SetupChartParam(AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);
      IF AnalysisViewType = AnalysisViewType::GLAccount THEN BEGIN
        LibraryERM.CreateGLAccount(BalGLAccount);
        SetupGLEntries(GLEntry,AccountNo,BalGLAccount."No.",StartDate,EndDate,PeriodLength);
      END ELSE
        SetupCashFlowEntries(CashFlowForecastEntry,AccountNo,StartDate,EndDate,PeriodLength);

      SetupAnalysisViewEntries(AnalysisViewEntry,AnalysisView.Code,AccountNo,StartDate,EndDate,PeriodLength,AnalysisViewType);

      RunChart(BusinessChartBuffer,AccountSchedulesChartSetup,0);
      VerifyChart(AccountSchedulesChartSetup,BusinessChartBuffer,AccScheduleLine,ColumnLayout,StartDate,EndDate);

      SetupDrillDownDataAnalysisView(
        AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,BusinessChartBuffer,AnalysisView.Code,AnalysisViewType);

      DrillDownChart(BusinessChartBuffer,AccountSchedulesChartSetup);
    END;

    LOCAL PROCEDURE RunChart@48(VAR BusinessChartBuffer@1001 : Record 485;VAR AccountSchedulesChartSetup@1002 : Record 762;Period@1003 : Option);
    BEGIN
      AccSchedChartManagement.UpdateData(BusinessChartBuffer,Period,AccountSchedulesChartSetup);
      AccSchedChartManagement.GetAccSchedMgtRef(AccSchedManagement);
    END;

    LOCAL PROCEDURE DrillDownChart@11(VAR BusinessChartBuffer@1001 : Record 485;VAR AccountSchedulesChartSetup@1002 : Record 762);
    BEGIN
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);
    END;

    LOCAL PROCEDURE VerifyChart@53(VAR AccountSchedulesChartSetup@1000 : Record 762;VAR BusinessChartBuffer@1001 : Record 485;VAR AccScheduleLine@1003 : Record 85;VAR ColumnLayout@1002 : Record 334;StartDate@1004 : Date;EndDate@1006 : Date);
    VAR
      PeriodFormManagement@1011 : Codeunit 359;
      ActualChartValue@1005 : Variant;
      PeriodStart@1007 : Date;
      PeriodEnd@1008 : Date;
      RowIndex@1010 : Integer;
      MeasureName@1009 : Text[111];
    BEGIN
      CASE AccountSchedulesChartSetup."Base X-Axis on" OF
        AccountSchedulesChartSetup."Base X-Axis on"::Period:
          BEGIN
            PeriodStart := StartDate;
            PeriodEnd := CalculatePeriodEndDate(PeriodStart,AccountSchedulesChartSetup."Period Length");
            RowIndex := 0;
            REPEAT
              CLEAR(ActualChartValue);
              BusinessChartBuffer.GetValue(FORMAT(BusinessChartBuffer."Period Length"),RowIndex,ActualChartValue);
              IF BusinessChartBuffer."Period Length" = BusinessChartBuffer."Period Length"::Day THEN
                Assert.AreEqual(PeriodEnd,DT2DATE(ActualChartValue),STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1))
              ELSE
                Assert.AreEqual(
                  PeriodFormManagement.CreatePeriodFormat(BusinessChartBuffer."Period Length",PeriodEnd),ActualChartValue,
                  STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1));

              AccScheduleLine.FINDSET;
              REPEAT
                ColumnLayout.FINDSET;
                REPEAT
                  MeasureName := AccScheduleLine.Description + ' ' + ColumnLayout."Column Header";
                  VerifyChartMeasure(
                    BusinessChartBuffer,AccScheduleLine,ColumnLayout,MeasureName,FORMAT(PeriodEnd),RowIndex,PeriodStart,PeriodEnd);
                UNTIL ColumnLayout.NEXT = 0;
              UNTIL AccScheduleLine.NEXT = 0;
              PeriodStart := PeriodEnd + 1;
              PeriodEnd :=
                CalculatePeriodEndDate(
                  CalculateNextDate(PeriodEnd,1,AccountSchedulesChartSetup."Period Length"),
                  AccountSchedulesChartSetup."Period Length");
              RowIndex += 1;
            UNTIL PeriodEnd >= EndDate;
          END;
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Line":
          BEGIN
            AccScheduleLine.FINDSET;
            RowIndex := 0;
            REPEAT
              CLEAR(ActualChartValue);
              BusinessChartBuffer.GetValue(AccScheduleLine.FIELDCAPTION(Description),RowIndex,ActualChartValue);
              Assert.AreEqual(AccScheduleLine.Description,ActualChartValue,STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1));

              ColumnLayout.FINDSET;
              REPEAT
                VerifyChartMeasure(
                  BusinessChartBuffer,AccScheduleLine,ColumnLayout,ColumnLayout."Column Header",AccScheduleLine.Description,RowIndex,
                  StartDate,EndDate);
              UNTIL ColumnLayout.NEXT = 0;
              RowIndex += 1;
            UNTIL AccScheduleLine.NEXT = 0;
          END;
        AccountSchedulesChartSetup."Base X-Axis on"::"Acc. Sched. Column":
          BEGIN
            ColumnLayout.FINDSET;
            RowIndex := 0;
            REPEAT
              CLEAR(ActualChartValue);
              BusinessChartBuffer.GetValue(ColumnLayout.FIELDCAPTION("Column Header"),RowIndex,ActualChartValue);
              Assert.AreEqual(ColumnLayout."Column Header",ActualChartValue,STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1));

              AccScheduleLine.FINDSET;
              REPEAT
                MeasureName := AccScheduleLine.Description;
                VerifyChartMeasure(
                  BusinessChartBuffer,AccScheduleLine,ColumnLayout,MeasureName,ColumnLayout."Column Header",RowIndex,StartDate,
                  EndDate);
              UNTIL AccScheduleLine.NEXT = 0;
              RowIndex += 1;
            UNTIL ColumnLayout.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyChartMeasure@72(VAR BusinessChartBuffer@1001 : Record 485;VAR AccScheduleLine@1009 : Record 85;VAR ColumnLayout@1008 : Record 334;MeasureName@1002 : Text[111];DimensionValue@1011 : Text[80];RowIndex@1003 : Integer;PeriodStart@1004 : Date;PeriodEnd@1005 : Date);
    VAR
      CalcAccSchedLine@1006 : Record 85;
      CalcColumnLayout@1007 : Record 334;
      RefAccSchedManagement@1010 : Codeunit 8;
      ActualChartValue@1000 : Variant;
    BEGIN
      CLEAR(ActualChartValue);
      BusinessChartBuffer.GetValue(MeasureName,RowIndex,ActualChartValue);
      CalcAccSchedLine.SETRANGE("Date Filter",PeriodStart,PeriodEnd);
      CalcAccSchedLine.GET(AccScheduleLine."Schedule Name",AccScheduleLine."Line No.");
      CalcColumnLayout.GET(ColumnLayout."Column Layout Name",ColumnLayout."Line No.");
      Assert.AreEqual(RefAccSchedManagement.CalcCell(CalcAccSchedLine,CalcColumnLayout,FALSE),ActualChartValue,
        STRSUBSTNO(AmountNotEqualERR,MeasureName,DimensionValue) + FORMAT(RowIndex) + STRSUBSTNO('|%1..%2',PeriodStart,PeriodEnd));
    END;

    LOCAL PROCEDURE SetupChart2Accounts2Cols@64(VAR AccountSchedulesChartSetup@1010 : Record 762;VAR AccScheduleLine@1000 : Record 85;VAR ColumnLayout@1001 : Record 334;ShowPer@1009 : Option;PeriodLength@1008 : Option;StartDate@1007 : Date;EndDate@1006 : Date;NoOfPeriods@1005 : Integer);
    VAR
      GLAccount@1004 : ARRAY [2] OF Record 15;
      BalGLAccount@1003 : Record 15;
      GLEntry@1002 : ARRAY [2] OF Record 17;
    BEGIN
      SetupAccountSchedule2Accounts2Cols(AccScheduleLine,ColumnLayout,GLAccount);
      LibraryERM.CreateGLAccount(BalGLAccount);
      SetupChartParam(AccountSchedulesChartSetup,AccScheduleLine,ColumnLayout,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);
      SetupGLEntries(GLEntry[1],GLAccount[1]."No.",BalGLAccount."No.",StartDate,EndDate,PeriodLength);
      SetupGLEntries(GLEntry[2],GLAccount[2]."No.",BalGLAccount."No.",StartDate,EndDate,PeriodLength);
    END;

    [Normal]
    LOCAL PROCEDURE SetupAccountSchedule2Accounts2Cols@35(VAR AccScheduleLine@1003 : Record 85;VAR ColumnLayout@1000 : Record 334;VAR GLAccount@1002 : ARRAY [2] OF Record 15);
    VAR
      AccScheduleName@1001 : Record 84;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount[1]);
      LibraryERM.CreateGLAccount(GLAccount[2]);
      CreateColumnLayoutWithNameAndDesc(ColumnLayout);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      CreateAccScheduleLine(
        AccScheduleLine,AccScheduleName.Name,GLAccount[1]."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");
      CreateAccScheduleLine(
        AccScheduleLine,AccScheduleName.Name,GLAccount[2]."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");

      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
      AccScheduleLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE SetupAccountScheduleCFandTotAccounts2Cols@9(VAR AccScheduleLine@1003 : Record 85;VAR ColumnLayout@1000 : Record 334;VAR GLAccount@1002 : Record 15;VAR CostType@1007 : Record 1103;VAR CashFlowAccount@1008 : Record 841);
    VAR
      AccScheduleName@1001 : Record 84;
      TotalingFormula@1006 : Text[250];
    BEGIN
      LibraryCostAcc.CreateCostType(CostType);
      LibraryCashFlow.CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
      GLAccount.GET(CostType."G/L Account Range");

      CreateColumnLayoutWithNameAndDesc(ColumnLayout);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name,GLAccount."No.",AccScheduleLine."Totaling Type"::"Posting Accounts");
      TotalingFormula := AccScheduleLine."Row No.";
      CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name,CostType."No.",AccScheduleLine."Totaling Type"::"Cost Type");
      TotalingFormula += '|' + AccScheduleLine."Row No.";
      CreateAccScheduleLine(
        AccScheduleLine,AccScheduleName.Name,CashFlowAccount."No.",AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts");
      TotalingFormula += '|' + AccScheduleLine."Row No.";
      CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name,TotalingFormula,AccScheduleLine."Totaling Type"::Formula);

      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
      AccScheduleLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupAccountScheduleWithAnalysisView2Cols@2(VAR AccScheduleLine@1001 : Record 85;VAR ColumnLayout@1000 : Record 334;VAR AnalysisView@1004 : Record 363;VAR AccountNo@1002 : Code[20];AnalysisViewType@1005 : 'GLAccount,CashFlow');
    VAR
      AccScheduleName@1003 : Record 84;
      GLAccount@1006 : Record 15;
      CashFlowAccount@1007 : Record 841;
    BEGIN
      LibraryERM.CreateAnalysisView(AnalysisView);
      IF AnalysisViewType = AnalysisViewType::GLAccount THEN BEGIN
        LibraryERM.CreateGLAccount(GLAccount);
        AnalysisView."Account Source" := AnalysisView."Account Source"::"G/L Account";
        AnalysisView."Account Filter" := GLAccount."No.";
        AccountNo := GLAccount."No.";
      END ELSE BEGIN
        LibraryCashFlow.CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
        AnalysisView."Account Source" := AnalysisView."Account Source"::"Cash Flow Account";
        AnalysisView."Account Filter" := CashFlowAccount."No.";
        AccountNo := CashFlowAccount."No.";
      END;
      AnalysisView.MODIFY;

      CreateColumnLayoutWithNameAndDesc(ColumnLayout);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      AccScheduleName."Analysis View Name" := COPYSTR(AnalysisView.Name,1,10);
      AccScheduleName.MODIFY;

      IF AnalysisViewType = AnalysisViewType::GLAccount THEN
        CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name,AccountNo,AccScheduleLine."Totaling Type"::"Posting Accounts")
      ELSE
        CreateAccScheduleLine(
          AccScheduleLine,AccScheduleName.Name,AccountNo,AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts");

      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
      AccScheduleLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateColumnLayoutWithNameAndDesc@1(VAR ColumnLayout@1000 : Record 334);
    VAR
      ColumnLayoutName@1001 : Record 333;
      OldColumnNo@1002 : Code[10];
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      ColumnLayoutName.VALIDATE(Description,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ColumnLayoutName.FIELDNO(Description),DATABASE::"Column Layout Name"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Column Layout Name",ColumnLayoutName.FIELDNO(Description))));
      ColumnLayoutName.MODIFY(TRUE);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      ColumnLayout.VALIDATE("Column No.",FORMAT(LibraryRandom.RandInt(10)));
      // Select any column type other than Formula
      ColumnLayout.VALIDATE("Column Type",LibraryRandom.RandIntInRange(1,6));
      ColumnLayout.VALIDATE("Column Header",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ColumnLayout.FIELDNO("Column Header"),DATABASE::"Column Layout"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Column Layout",ColumnLayout.FIELDNO("Column Header"))));
      ColumnLayout.MODIFY(TRUE);
      OldColumnNo := ColumnLayout."Column No.";

      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      ColumnLayout.VALIDATE("Column No.",FORMAT(LibraryRandom.RandInt(10)));
      ColumnLayout.VALIDATE("Column Type",ColumnLayout."Column Type"::Formula);
      ColumnLayout.VALIDATE(Formula,'-' + OldColumnNo);
      ColumnLayout.VALIDATE("Column Header",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ColumnLayout.FIELDNO("Column Header"),DATABASE::"Column Layout"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Column Layout",ColumnLayout.FIELDNO("Column Header"))));
      ColumnLayout.MODIFY(TRUE);

      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
      ColumnLayout.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAccScheduleLine@37(VAR AccScheduleLine@1002 : Record 85;AccScheduleName@1001 : Code[10];Totaling@1000 : Text[250];TotalingType@1003 : Option);
    BEGIN
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName);
      AccScheduleLine.VALIDATE("Row No.",FORMAT(LibraryRandom.RandInt(100)));
      AccScheduleLine.VALIDATE(
        Description,COPYSTR(LibraryUtility.GenerateRandomCode(AccScheduleLine.FIELDNO(Description),DATABASE::"Acc. Schedule Line"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Acc. Schedule Line",AccScheduleLine.FIELDNO(Description))));
      AccScheduleLine.VALIDATE("Totaling Type",TotalingType);
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateNextDate@40(StartDate@1000 : Date;NoOfPeriods@1001 : Integer;PeriodLength@1002 : 'Day,Week,Month,Quarter,Year') : Date;
    BEGIN
      EXIT(CALCDATE(STRSUBSTNO('<%1%2>',NoOfPeriods,GetPeriodString(PeriodLength)),StartDate));
    END;

    LOCAL PROCEDURE CalculatePeriodStartDate@59(PeriodDate@1002 : Date;PeriodLength@1000 : 'Day,Week,Month,Quarter,Year') : Date;
    BEGIN
      CASE PeriodLength OF
        PeriodLength::Day:
          EXIT(PeriodDate);
        PeriodLength::Week,
        PeriodLength::Month,
        PeriodLength::Quarter,
        PeriodLength::Year:
          EXIT(CALCDATE(STRSUBSTNO('<-C%1>',GetPeriodString(PeriodLength)),PeriodDate));
      END;
    END;

    LOCAL PROCEDURE CalculatePeriodEndDate@50(PeriodDate@1002 : Date;PeriodLength@1000 : 'Day,Week,Month,Quarter,Year') : Date;
    BEGIN
      CASE PeriodLength OF
        PeriodLength::Day:
          EXIT(PeriodDate);
        PeriodLength::Week,
        PeriodLength::Month,
        PeriodLength::Quarter,
        PeriodLength::Year:
          EXIT(CALCDATE(STRSUBSTNO('<C%1>',GetPeriodString(PeriodLength)),PeriodDate));
      END;
    END;

    LOCAL PROCEDURE ShiftPeriod@12(VAR StartDate@1000 : Date;VAR EndDate@1001 : Date;PeriodToCheck@1002 : ' ,Next,Previous';PeriodLength@1003 : 'Day,Week,Month,Quarter,Year';ShowPer@1005 : 'Period,Acc. Sched. Line,Acc. Sched. Column');
    VAR
      PeriodIncrement@1004 : Integer;
    BEGIN
      IF PeriodToCheck = PeriodToCheck::" " THEN
        EXIT;

      IF PeriodToCheck = PeriodToCheck::Next THEN
        PeriodIncrement := 1
      ELSE
        PeriodIncrement := -1;

      IF ShowPer = ShowPer::Period THEN
        StartDate := CalculatePeriodStartDate(CalculateNextDate(StartDate,PeriodIncrement,PeriodLength),PeriodLength)
      ELSE
        StartDate := CalculatePeriodStartDate(CalculateNextDate(EndDate,PeriodIncrement,PeriodLength),PeriodLength);
      EndDate := CalculatePeriodEndDate(CalculateNextDate(EndDate,PeriodIncrement,PeriodLength),PeriodLength);
    END;

    LOCAL PROCEDURE GetPeriodString@43(PeriodLength@1000 : 'Day,Week,Month,Quarter,Year') : Text[1];
    BEGIN
      CASE PeriodLength OF
        PeriodLength::Day:
          EXIT('D');
        PeriodLength::Week:
          EXIT('W');
        PeriodLength::Month:
          EXIT('M');
        PeriodLength::Quarter:
          EXIT('Q');
        PeriodLength::Year:
          EXIT('Y');
      END;
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@58(Message@1000 : Text[1024]);
    BEGIN
      IF STRPOS(Message,CostAccUpdateMSG) > 0 THEN
        EXIT;

      IF DrillDownColumnLayout."Column Type" = DrillDownColumnLayout."Column Type"::Formula THEN
        Assert.AreEqual(
          STRSUBSTNO(ColFormulaMSG,DrillDownColumnLayout.Formula),Message,
          STRSUBSTNO(FormulaDrillDownERR,DrillDownColumnLayout.TABLECAPTION))
      ELSE
        IF DrillDownAccScheduleLine."Totaling Type" = DrillDownAccScheduleLine."Totaling Type"::Formula THEN
          Assert.AreEqual(
            STRSUBSTNO(RowFormulaMSG,DrillDownAccScheduleLine.Totaling),Message,
            STRSUBSTNO(FormulaDrillDownERR,DrillDownAccScheduleLine.TABLECAPTION));
    END;

    [PageHandler]
    PROCEDURE GLChartofAccountsHandler@104(VAR ChartOfAccountsPage@1000 : TestPage 570);
    VAR
      PageNetChangeValue@1001 : Decimal;
    BEGIN
      DrillDownGLAccount.FINDFIRST;
      DrillDownGLAccount.CALCFIELDS("Net Change");
      IF ChartOfAccountsPage."Net Change".VALUE <> '' THEN
        EVALUATE(PageNetChangeValue,ChartOfAccountsPage."Net Change".VALUE);
      Assert.AreEqual(DrillDownGLAccount."Net Change",PageNetChangeValue,
        COPYSTR(
          STRSUBSTNO(
            DrillDownValERR,DrillDownAccScheduleLine.Description,DrillDownColumnLayout."Column Header",
            DrillDownAccScheduleLine.GETFILTER("Date Filter")),1,250));
    END;

    [PageHandler]
    PROCEDURE ChartofCostTypeHandler@45(VAR ChartofCostTypePage@1000 : TestPage 1100);
    VAR
      PageNetChangeValue@1001 : Decimal;
    BEGIN
      DrillDownCostType.FINDFIRST;
      DrillDownCostType.CALCFIELDS("Net Change");
      IF ChartofCostTypePage."Net Change".VALUE <> '' THEN
        EVALUATE(PageNetChangeValue,ChartofCostTypePage."Net Change".VALUE);
      Assert.AreEqual(DrillDownCostType."Net Change",PageNetChangeValue,
        COPYSTR(
          STRSUBSTNO(
            DrillDownValERR,DrillDownAccScheduleLine.Description,DrillDownColumnLayout."Column Header",
            DrillDownAccScheduleLine.GETFILTER("Date Filter")),1,250));
    END;

    [PageHandler]
    PROCEDURE ChartofCashFlowHandler@81(VAR ChartofCashFlowAccPage@1000 : TestPage 851);
    VAR
      PageAmountValue@1001 : Decimal;
    BEGIN
      DrillDownCFAccount.FINDFIRST;
      DrillDownCFAccount.CALCFIELDS(Amount);
      IF ChartofCashFlowAccPage.Amount.VALUE <> '' THEN
        EVALUATE(PageAmountValue,ChartofCashFlowAccPage.Amount.VALUE);
      Assert.AreEqual(DrillDownCFAccount.Amount,PageAmountValue,
        COPYSTR(
          STRSUBSTNO(
            DrillDownValERR,DrillDownAccScheduleLine.Description,DrillDownColumnLayout."Column Header",
            DrillDownAccScheduleLine.GETFILTER("Date Filter")),1,250));
    END;

    [PageHandler]
    PROCEDURE ChartofAccAnalysisViewHandler@73(VAR ChartofAccAnalysisViewPage@1000 : TestPage 569);
    VAR
      PageNetChangeValue@1001 : Decimal;
    BEGIN
      DrillDownAnalysisViewEntry.CALCSUMS(DrillDownAnalysisViewEntry.Amount);
      IF ChartofAccAnalysisViewPage."Net Change".VALUE <> ''THEN
        EVALUATE(PageNetChangeValue,ChartofAccAnalysisViewPage."Net Change".VALUE);
      Assert.AreEqual(DrillDownAnalysisViewEntry.Amount,PageNetChangeValue,
        COPYSTR(
          STRSUBSTNO(
            DrillDownValERR,DrillDownAccScheduleLine.Description,DrillDownColumnLayout."Column Header",
            DrillDownAccScheduleLine.GETFILTER("Date Filter")),1,250));
    END;

    [PageHandler]
    PROCEDURE AnalysisViewBudgetEntriesPageHandler@71(VAR AnalysisViewBudgetEntries@1000 : TestPage 559);
    VAR
      AnalysisViewCode@1001 : Variant;
      GLAccountNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AnalysisViewCode);
      LibraryVariableStorage.Dequeue(GLAccountNo);
      AnalysisViewBudgetEntries.FILTER.SETFILTER("G/L Account No.",GLAccountNo);
      AnalysisViewBudgetEntries."Analysis View Code".ASSERTEQUALS(AnalysisViewCode);
      AnalysisViewBudgetEntries.CLOSE;
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewHandler@56(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      BusinessChartBuffer@1002 : Record 485;
      BusinessChartBufferVar@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BusinessChartBufferVar);
      BusinessChartBuffer := BusinessChartBufferVar;
      Assert.AreEqual(
        DrillDownAccScheduleLine."Schedule Name",
        AccScheduleOverview.CurrentSchedName.VALUE,
        'Unexpected account schedule in the overview page.');
      Assert.AreEqual(
        DrillDownAccScheduleLine."Row No.",
        AccScheduleOverview."Row No.".VALUE,
        'Unexpected account schedule line selected in the overview page.');
      Assert.AreEqual(
        BusinessChartBuffer."Period Length",
        AccScheduleOverview.PeriodType.ASINTEGER,
        'Unexpected account schedule period selected in the overview page.');

      AccScheduleOverview.CLOSE;
    END;

    BEGIN
    {
      // [FEATURE] [Account Schedule] [Chart]
      Test - Finance Performance.
      1. Test Drilldown from Chart Of Accs. Analysis View Budget Amount will open Analysis Budget View Entries.

      Covers Test Case for Bug_ID = 71355
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      TestAction_DrillDown_ChartOfAccAnalyViewBudgetAmt
    }
    END.
  }
}

