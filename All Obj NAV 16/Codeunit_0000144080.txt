OBJECT Codeunit 144080 Job Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryJob@1500000 : Codeunit 131920;
      LibraryWarehouse@1500007 : Codeunit 132204;
      LibraryRandom@1500006 : Codeunit 130440;
      LibraryERM@1500008 : Codeunit 131300;
      Assert@1500002 : Codeunit 130000;
      JobTaskType@1500001 : 'Posting,Heading,Total,Begin-Total,End-Total';
      JobPlanningErr@1500003 : TextConst '@@@="Line Type must be equal to ''Schedule''  in Job Planning Line: Job No.=%1, Job Task No.=%2, Line No.=%3. Current value is ''Contract''.";ENU="Line Type must be equal to ''Schedule''  in Job Planning Line: Job No.=%1, Job Task No.=%2, Line No.=%3. Current value is ''Contract''."';
      LineType@1500004 : ' ,Schedule,Contract,Both Schedule and Contract';
      ValueErr@1500009 : TextConst 'ENU=Value does not match';

    [Test]
    PROCEDURE VerifyLevelsInJobTaskLines@1500001();
    VAR
      JobPostingGroup@1500001 : Record 208;
      Job@1500000 : Record 167;
      JobTask@1500007 : ARRAY [5] OF Record 1001;
      JobPlanningLine@1500003 : Record 1003;
    BEGIN
      // [SCENARIO 164069] Check if the system is allowing creating levels and elements of CWIP in Job Task Lines, and allowing creating Job Task Planning Lines for each job task line, and tests if the system is allowing selecting Line Type as "Contract,
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Posting Group,Job
      LibraryJob.CreateJobWithPostingGroup(Job,JobPostingGroup);

      // [WHEN] Create Job Task Lines, Job Planning Lines
      CreateJobTaskLines(Job,JobTask[1],JobTaskType::Heading);
      CreateJobTaskLines(Job,JobTask[2],JobTaskType::"Begin-Total");
      CreateJobTaskLines(Job,JobTask[3],JobTaskType::Posting);
      CreateJobTaskLines(Job,JobTask[4],JobTaskType::"End-Total");
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask[3],JobPlanningLine);
      ASSERTERROR ChangeJobPlanningLine(JobPlanningLine);

      // [THEN] Created Job Plannnig Lines
      Assert.ExpectedError(
        STRSUBSTNO(
          JobPlanningErr,Job."No.",JobTask[3]."Job Task No.",JobPlanningLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE VerifyCapitalizeCWIPWithJobTaskLines@1500000();
    VAR
      Location@1500006 : Record 14;
      JobPostingGroup@1500003 : Record 208;
      Job@1500002 : Record 167;
      JobTask@1500001 : ARRAY [5] OF Record 1001;
      JobPlanningLine@1500000 : Record 1003;
      JobJournalLine@1500005 : Record 210;
      CapitalizeCWIPHeader@1500004 : Record 16597;
      CapitalizeCWIPLine@1500008 : Record 16598;
      ExpectedCapitalizeCWIPLine@1500007 : Record 16598;
      ExpectedCapitalizeCWIPLine2@1500009 : Record 16598;
    BEGIN
      // [SCENARIO 163859] Verify program behaves correctly after creating a Capitalize CWIP entry and making changes to fields "% to capitalize" and "Amount to capitalize".
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Posting Group,Job,Location
      LibraryJob.CreateJobWithPostingGroup(Job,JobPostingGroup);
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] Create Job Task Lines, Job Planning Lines and capitalize CWIP Document
      CreateJobTaskLines(Job,JobTask[1],JobTaskType::Heading);
      CreateJobTaskLines(Job,JobTask[2],JobTaskType::"Begin-Total");
      CreateJobTaskLines(Job,JobTask[3],JobTaskType::Posting);
      CreateJobTaskLines(Job,JobTask[4],JobTaskType::"End-Total");
      CreateAndPostJobJournalLines(JobJournalLine,JobTask[3],Location,1,LibraryRandom.RandDec(100000,2));
      CalculateAndPostWIPToGL(Job);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask[3],JobPlanningLine);
      LibraryJob.CreateCapitalizeCWIPHeader(CapitalizeCWIPHeader,Job."No.");
      GenerateJobTaskLines(CapitalizeCWIPHeader."No.",Job."No.");
      ChangePercentageInJobLines(CapitalizeCWIPLine,CapitalizeCWIPHeader."No.",LibraryRandom.RandDec(10,2),TRUE);
      CalculateExpectedCWIPLineAmount(
        ExpectedCapitalizeCWIPLine,CapitalizeCWIPLine."Remaining CWIP Amt (Material)",
        CapitalizeCWIPLine."Remaining CWIP Amt (Overheads)",CapitalizeCWIPLine."Remaining CWIP Amt (Overheads)",
        CapitalizeCWIPLine."% to Capitalize (Labor)");

      // [THEN] Created capitalized CWIP Lines
      VerifyCWIPLines(CapitalizeCWIPLine,ExpectedCapitalizeCWIPLine);

      // [WHEN] Create Job Task Lines, Job Planning Lines and capitalize CWIP Document
      ChangePercentageInJobLines(CapitalizeCWIPLine,CapitalizeCWIPHeader."No.",LibraryRandom.RandDec(10,2),FALSE);
      CalculateExpectedRemainingAmount(
        ExpectedCapitalizeCWIPLine2,CapitalizeCWIPLine."Amt to Capitalize (Labor)",CapitalizeCWIPLine."Remaining CWIP Amt (Labor)");

      // [THEN] Created Capitalized CWIP Lines With Capitalize Amount(Labour),Capitalize Amount(material),Capitalize Amount(Overheads)
      VerifyCWIPLinesWithPercentage(CapitalizeCWIPLine,ExpectedCapitalizeCWIPLine2);
    END;

    LOCAL PROCEDURE CreateJobTaskLines@1500003(Job@1500000 : Record 167;VAR JobTask@1500001 : Record 1001;JobTaskType@1500002 : Option);
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);
      JobTask.VALIDATE("Job Task Type",JobTaskType);
      JobTask.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithBatch@1500010(VAR JobJournalLine@1500003 : Record 210;JobTask@1500000 : Record 1001;LocationCode@1500004 : Code[10];Qty@1500005 : Decimal;UnitCost@1500006 : Decimal;CWIPType@1500007 : Option);
    BEGIN
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLineForType(LineType::Schedule,Type::"G/L Account",JobTask,JobJournalLine);
        VALIDATE("No.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Location Code",LocationCode);
        VALIDATE(Quantity,Qty);
        VALIDATE("Unit Cost",UnitCost);
        VALIDATE("CWIP G/L Type",CWIPType);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLines@1500073(VAR JobJournalLine@1500000 : Record 210;JobTask@1500001 : Record 1001;Location@1500003 : Record 14;Quantity@1500004 : Decimal;Amount@1500005 : Decimal);
    BEGIN
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Overheads);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Labor);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Material);
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CalculateWIP@1500263(Job@1000 : Record 167);
    VAR
      JobCalculateWIP@1500463 : Report 1086;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      JobCalculateWIP.SETTABLEVIEW(Job);
      JobCalculateWIP.InitializeRequest(FORMAT(TIME - 000000T));
      JobCalculateWIP.USEREQUESTPAGE(FALSE);
      JobCalculateWIP.RUNMODAL
    END;

    LOCAL PROCEDURE CalculateAndPostWIPToGL@1500076(VAR Job@1500000 : Record 167);
    BEGIN
      CalculateWIP(Job);
      PostWIPToGL(Job);
    END;

    LOCAL PROCEDURE CalculateExpectedCWIPLineAmount@1500019(VAR CapitalizeCWIPLine@1500000 : Record 16598;MaterialAmount@1500001 : Decimal;OverheadsAmount@1500002 : Decimal;LabourAmount@1500003 : Decimal;CapitalizePercentage@1500005 : Decimal);
    BEGIN
      WITH CapitalizeCWIPLine DO BEGIN
        "Amt to Capitalize (Labor)" := LabourAmount * (CapitalizePercentage / 100);
        "Amt to Capitalize (Material)" := MaterialAmount * (CapitalizePercentage / 100);
        "Amt to Capitalize (Overheads)" := OverheadsAmount * (CapitalizePercentage / 100);
      END;
    END;

    LOCAL PROCEDURE CalculateExpectedRemainingAmount@1500020(VAR CapitalizeCWIPLine@1500000 : Record 16598;CapitalizeAmount@1500001 : Decimal;RemainingAmount@1500002 : Decimal);
    BEGIN
      WITH CapitalizeCWIPLine DO BEGIN
        "% to Capitalize (Labor)" := (CapitalizeAmount / RemainingAmount) * 100;
        "% to Capitalize (Material)" := (CapitalizeAmount / RemainingAmount) * 100;
        "% to Capitalize (Overheads)" := (CapitalizeAmount / RemainingAmount) * 100;
      END;
    END;

    LOCAL PROCEDURE ChangeJobPlanningLine@1500002(JobPlanningLine@1500000 : Record 1003);
    BEGIN
      JobPlanningLine.VALIDATE("Line Type",JobPlanningLine."Line Type"::Contract);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangePercentageInJobLines@1500008(VAR CapitalizeCWIPLine@1500000 : Record 16598;CapitalizeCWIPHeaderNo@1500001 : Code[20];CapitalizePercentage@1500003 : Decimal;PayInPercentage@1500004 : Boolean);
    BEGIN
      WITH CapitalizeCWIPLine DO BEGIN
        SETRANGE("Document No.",CapitalizeCWIPHeaderNo);
        SETRANGE("Job Task Type","Job Task Type"::Posting);
        FINDFIRST;
        IF PayInPercentage THEN BEGIN
          VALIDATE("% to Capitalize (Labor)",CapitalizePercentage);
          VALIDATE("% to Capitalize (Material)",CapitalizePercentage);
          VALIDATE("% to Capitalize (Overheads)",CapitalizePercentage);
        END ELSE BEGIN
          VALIDATE("Amt to Capitalize (Labor)",CapitalizePercentage);
          VALIDATE("Amt to Capitalize (Material)",CapitalizePercentage);
          VALIDATE("Amt to Capitalize (Overheads)",CapitalizePercentage);
        END;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GenerateJobTaskLines@1500005(DocumentNo@1500003 : Code[20];JobNo@1500000 : Code[20]);
    VAR
      JobTask@1500001 : Record 1001;
      GetJobTaskLines@1500002 : Report 16597;
    BEGIN
      JobTask.SETRANGE("Job No.",JobNo);
      IF JobTask.FINDFIRST THEN BEGIN
        GetJobTaskLines.SETTABLEVIEW(JobTask);
        GetJobTaskLines.InitReport(DocumentNo,JobNo);
        GetJobTaskLines.USEREQUESTPAGE(FALSE);
        GetJobTaskLines.RUNMODAL;
      END;
    END;

    LOCAL PROCEDURE PostWIPToGL@1500326(Job@1500426 : Record 167);
    VAR
      JobPostWIPToGL@1500526 : Report 1085;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      JobPostWIPToGL.SETTABLEVIEW(Job);
      JobPostWIPToGL.InitializeRequest(FORMAT(TIME - 000000T));
      JobPostWIPToGL.USEREQUESTPAGE(FALSE);
      JobPostWIPToGL.RUNMODAL;
    END;

    LOCAL PROCEDURE VerifyCWIPLines@1500009(CapitalizeCWIPLine@1500000 : Record 16598;ExpectedCapitalizeCWIPLine@1500001 : Record 16598);
    BEGIN
      Assert.AreEqual(
        ROUND(ExpectedCapitalizeCWIPLine."Amt to Capitalize (Labor)"),CapitalizeCWIPLine."Amt to Capitalize (Labor)",ValueErr);
      Assert.AreEqual(
        ROUND(ExpectedCapitalizeCWIPLine."Amt to Capitalize (Material)"),CapitalizeCWIPLine."Amt to Capitalize (Material)",ValueErr);
      Assert.AreEqual(
        ROUND(ExpectedCapitalizeCWIPLine."Amt to Capitalize (Overheads)"),CapitalizeCWIPLine."Amt to Capitalize (Overheads)",ValueErr);
    END;

    LOCAL PROCEDURE VerifyCWIPLinesWithPercentage@1500027(CapitalizeCWIPLine@1500000 : Record 16598;ExpectedCapitalizeCWIPLine@1500001 : Record 16598);
    BEGIN
      Assert.AreEqual(
        ExpectedCapitalizeCWIPLine."% to Capitalize (Labor)",CapitalizeCWIPLine."% to Capitalize (Labor)",ValueErr);
      Assert.AreEqual(
        ExpectedCapitalizeCWIPLine."% to Capitalize (Material)",CapitalizeCWIPLine."% to Capitalize (Material)",ValueErr);
      Assert.AreEqual(
        ExpectedCapitalizeCWIPLine."% to Capitalize (Overheads)",CapitalizeCWIPLine."% to Capitalize (Overheads)",ValueErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500170(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500626(Message@1500726 : Text[1024]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

