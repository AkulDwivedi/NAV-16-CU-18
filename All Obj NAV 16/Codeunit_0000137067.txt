OBJECT Codeunit 137067 SCM Plan-Req. Wksht
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1012 : Record 82;
      ItemJournalBatch@1013 : Record 233;
      ConsumptionItemJournalTemplate@1025 : Record 82;
      ConsumptionItemJournalBatch@1024 : Record 233;
      LocationYellow@1020 : Record 14;
      LocationRed@1017 : Record 14;
      LocationInTransit@1009 : Record 14;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryPlanning@1005 : Codeunit 132203;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryManufacturing@1011 : Codeunit 132202;
      LibrarySales@1014 : Codeunit 130509;
      LibraryPurchase@1033 : Codeunit 130512;
      LibraryWarehouse@1023 : Codeunit 132204;
      LibraryPatterns@1037 : Codeunit 132212;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryERMCountryData@1099 : Codeunit 131305;
      LibrarySetupStorage@1019 : Codeunit 131009;
      Assert@1002 : Codeunit 130000;
      LibraryVariableStorage@1016 : Codeunit 131004;
      AvailabilityMgt@1026 : Codeunit 99000889;
      DemandType@1035 : ' ,Production,Sales,Service,Jobs,Assembly';
      isInitialized@1006 : Boolean;
      RequisitionLineMustNotExistTxt@1008 : TextConst '@@@="%1 = Item No.";ENU=Requisition Line must not exist for Item %1.';
      ShipmentDateMessageTxt@1004 : TextConst 'ENU=Shipment Date';
      NewWorksheetMessageTxt@1003 : TextConst 'ENU=You are now in worksheet';
      ReleasedProductionOrderCreatedTxt@1010 : TextConst 'ENU=Released Prod. Order';
      PostJournalLinesConfirmationMessageTxt@1018 : TextConst 'ENU=Do you want to post the journal lines';
      JournalLinesPostedMessageTxt@1015 : TextConst 'ENU=The journal lines were successfully posted.';
      CancelReservationConfirmationMessageTxt@1022 : TextConst 'ENU=Cancel reservation';
      NumberOfRowsErr@1027 : TextConst 'ENU=Number of rows must match.';
      ReservationEntryErr@1029 : TextConst 'ENU=Reservation Entry is not correct';
      FirmPlannedProdOrderErr@1028 : TextConst '@@@="%1 = Due Date";ENU=Firm Planned Prod. Order line with Due Date %1 is not correct.';
      ModifiedPromisedReceiptDateMsg@1030 : TextConst 'ENU=You have modified Promised Receipt Date.';
      ReservationsExistMsg@1031 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.';
      DateConflictWithExistingReservationsErr@1032 : TextConst 'ENU=The change leads to a date conflict with existing reservations.';
      WillNotAffectExistingMsg@1036 : TextConst 'ENU=The change will not affect existing entries';
      AutoReservNotPossibleMsg@1034 : TextConst 'ENU=Full automatic Reservation is not possible.';

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ReqWkshErrorAfterCarryOutForSalesShipmentOutsideLotAccumPeriodLFLItem@4();
    VAR
      Item@1000 : Record 27;
      ShipmentDate@1001 : Date;
      PlanningEndDate@1002 : Date;
    BEGIN
      // Setup: Create LFL Item. Shipment Date outside Lot Accumulation Period. Parameters: Shipment Date and Planning End Dates.
      Initialize;
      CreateLotForLotItem(Item,LibraryRandom.RandInt(50),GetLotAccumulationPeriod(2,5));  // Lot Accumulation Period based on Random Quantity.
      ShipmentDate := GetRequiredDate(2,0,WORKDATE,-1);  // Shipment Date relative to Work Date.
      PlanningEndDate := GetRequiredDate(2,0,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),-1);  // Planning End Date relative to Lot Accumulation period.
      ReqWkshErrorAfterCarryOutActionMsgWithSalesOrdersLFLItem(Item,ShipmentDate,PlanningEndDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ReqWkshErrorAfterCarryOutForSalesShipmentInLotAccumPeriodLFLItem@6();
    VAR
      Item@1000 : Record 27;
      ShipmentDate@1002 : Date;
      PlanningEndDate@1001 : Date;
    BEGIN
      // Setup: Create LFL Item. Shipment Date within Lot Accumulation Period. Parameters: Shipment Date and Planning End Dates.
      Initialize;
      CreateLotForLotItem(Item,LibraryRandom.RandInt(50),GetLotAccumulationPeriod(2,5));  // Lot Accumulation Period based on Random Quantity.
      ShipmentDate := GetRequiredDate(20,0,WORKDATE,1);  // Shipment Date relative to Work Date.
      PlanningEndDate := GetRequiredDate(10,0,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),-1);  // Planning End Date relative to Lot Accumulation period.
      ReqWkshErrorAfterCarryOutActionMsgWithSalesOrdersLFLItem(Item,ShipmentDate,PlanningEndDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ReqWkshErrorAfterCarryOutForSalesPlanningEndDateGreaterThanLotAccumPeriodLFLItem@22();
    VAR
      Item@1000 : Record 27;
      ShipmentDate@1002 : Date;
      PlanningEndDate@1001 : Date;
    BEGIN
      // Setup: Create LFL Item. Planning Ending Date greater than Lot Accumulation Period. Parameters: Shipment Date and Planning End Dates.
      Initialize;
      CreateLotForLotItem(Item,LibraryRandom.RandInt(50),GetLotAccumulationPeriod(2,5));  // Lot Accumulation Period based on Random Quantity.
      ShipmentDate := GetRequiredDate(20,0,WORKDATE,-1);  // Shipment Date relative to Work Date.
      PlanningEndDate := GetRequiredDate(10,0,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),1);  // Planning End Date relative to Lot Accumulation period.
      ReqWkshErrorAfterCarryOutActionMsgWithSalesOrdersLFLItem(Item,ShipmentDate,PlanningEndDate);
    END;

    LOCAL PROCEDURE ReqWkshErrorAfterCarryOutActionMsgWithSalesOrdersLFLItem@26(Item@1009 : Record 27;ShipmentDate@1003 : Date;EndingDate@1005 : Date);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1007 : Record 246;
    BEGIN
      // Create Sales Order and Update Shipment Date.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandInt(20));
      IF ShipmentDate < WORKDATE THEN
        LibraryVariableStorage.Enqueue(ShipmentDateMessageTxt);  // Required inside MessageHandler.
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);  // Shipment Date value important for Test.

      // Calculate Plan for Requisition Worksheet with the required Start and End dates, Carry out Action Message.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,EndingDate);
      AcceptActionMessage(Item."No.");
      SelectRequisitionLine(RequisitionLine,Item."No.");
      LibraryVariableStorage.Enqueue(NewWorksheetMessageTxt);  // Required inside MessageHandler.
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');

      // Exercise: Calculate Plan for Requisition Worksheet again after Carry Out Action Message.
      RequisitionWkshName.FINDFIRST;
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,WORKDATE,EndingDate);

      // Verify: Verify that no Requisition line is created for Requisition Worksheet.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExistTxt,Item."No."));
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PlanningFlexibilityUnlimitedAndCarryOutCalcPlanTwiceWithSalesOrderLFLItem@1();
    VAR
      Item@1000 : Record 27;
      SalesLine@1012 : Record 37;
      SalesLine2@1011 : Record 37;
      RequisitionWkshName@1014 : Record 245;
      RequisitionLine@1013 : Record 246;
      ItemJournalLine@1003 : Record 83;
      PurchaseLine@1002 : Record 39;
      ShipmentDate@1005 : Date;
      ShipmentDate2@1006 : Date;
      PlanningEndDate@1008 : Date;
      PlanningEndDate2@1007 : Date;
      Quantity@1001 : Integer;
      ReqLineQuantity@1004 : Integer;
    BEGIN
      // Setup: Create LFL Item  with Lot Accumulation Period and update Inventory.
      Initialize;
      CreateLotForLotItem(Item,LibraryRandom.RandInt(50),GetLotAccumulationPeriod(2,5));  // Lot Accumulation Period based on Random Quantity.
      UpdateInventory(ItemJournalLine,Item."No.",WORKDATE,Item."Safety Stock Quantity" - LibraryRandom.RandInt(5));  // Inventory Value required for Test.

      // Create Sales Order with multiple Lines having different Shipment Dates. Second Shipment Date is greater than first but difference less than Lot Accumulation Period.
      Quantity := LibraryRandom.RandInt(10) + 10;  // Random Quantity.
      ShipmentDate := GetRequiredDate(10,0,WORKDATE,1);  // Shipment Date relative to Work Date.
      ShipmentDate2 := GetRequiredDate(5,0,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),-1);  // Shipment Date relative to Lot Accumulation period.
      CreateSalesOrderWithMultipleLinesAndRequiredShipment(
        SalesLine,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5),Quantity - SalesLine.Quantity,ShipmentDate,
        ShipmentDate2);

      // Calculate Plan for Requisition Worksheet having End Date which excludes Shipment Date of Second Sales Line, with Planning Flexibility - Unlimited and Carry out Action Message.
      PlanningEndDate := GetRequiredDate(10,5,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),-1);  // Planning End Date relative to Lot Accumulation period.
      LibraryVariableStorage.Enqueue(NewWorksheetMessageTxt);  // Required inside MessageHandler.
      CalcPlanAndCarryOutActionMessageWithPlanningFlexibility(
        RequisitionWkshName,Item,RequisitionLine."Planning Flexibility"::Unlimited,PlanningEndDate);

      // Exercise: Calculate Plan for Requisition Worksheet again after Carry Out Action Message, Shipment Dates are included in Start and End Date.
      RequisitionWkshName.FINDFIRST;
      PlanningEndDate2 := GetRequiredDate(10,5,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),1);  // Planning End Date relative to Lot Accumulation period.
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,WORKDATE,PlanningEndDate2);

      // Verify: Verify Requisition Line values.
      Item.CALCFIELDS(Inventory);
      SelectPurchaseLine(PurchaseLine,Item."No.");
      SelectRequisitionLine(RequisitionLine,Item."No.");
      ReqLineQuantity := SalesLine.Quantity + SalesLine2.Quantity + Item."Safety Stock Quantity" - Item.Inventory;
      VerifyRequisitionLineQuantity(RequisitionLine,ReqLineQuantity,PurchaseLine.Quantity,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PlanningFlexibilityNoneAndCarryOutCalcPlanTwiceWithSalesOrderLFLItem@23();
    VAR
      Item@1016 : Record 27;
      SalesLine@1013 : Record 37;
      SalesLine2@1012 : Record 37;
      RequisitionWkshName@1011 : Record 245;
      RequisitionLine@1010 : Record 246;
      PurchaseLine@1001 : Record 39;
      ItemJournalLine@1000 : Record 83;
      ShipmentDate@1003 : Date;
      ShipmentDate2@1002 : Date;
      PlanningEndDate@1004 : Date;
      PlanningEndDate2@1005 : Date;
      Quantity@1006 : Integer;
    BEGIN
      // Setup: Create LFL Item with Lot Accumulation Period and update Inventory.
      Initialize;
      CreateLotForLotItem(Item,LibraryRandom.RandInt(50),GetLotAccumulationPeriod(2,5));  // Lot Accumulation Period based on Random Quantity.
      UpdateInventory(ItemJournalLine,Item."No.",WORKDATE,Item."Safety Stock Quantity" - LibraryRandom.RandInt(5));  // Inventory Value required for Test.

      // Create Sales Order with multiple Lines have different Shipment Dates. Second Shipment Date is greater than first but difference less than Lot Accumulation Period.
      Quantity := LibraryRandom.RandInt(10) + 10;  // Random Quantity.
      ShipmentDate := GetRequiredDate(10,0,WORKDATE,1);  // Shipment Date relative to Work Date.
      ShipmentDate2 := GetRequiredDate(5,0,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),-1);  // Shipment Date relative to Lot Accumulation period.
      CreateSalesOrderWithMultipleLinesAndRequiredShipment(
        SalesLine,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5),Quantity - SalesLine.Quantity,ShipmentDate,
        ShipmentDate2);

      // Calculate Plan for Requisition Worksheet having End Date which excludes Shipment Date of Second Sales Line, Update Planning Flexibility - None and Carry out Action Message.
      PlanningEndDate := GetRequiredDate(10,5,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),-1);  // Planning End Date relative to Lot Accumulation period.
      LibraryVariableStorage.Enqueue(NewWorksheetMessageTxt);  // Required inside MessageHandler.
      CalcPlanAndCarryOutActionMessageWithPlanningFlexibility(
        RequisitionWkshName,Item,RequisitionLine."Planning Flexibility"::None,PlanningEndDate);

      // Exercise: Calculate Plan for Requisition Worksheet again after Carry Out Action Message, Shipment Dates are included in Start and End Date.
      RequisitionWkshName.FINDFIRST;
      PlanningEndDate2 := GetRequiredDate(10,5,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),1);  // Planning End Date relative to Lot Accumulation period.
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,WORKDATE,PlanningEndDate2);

      // Verify: Verify Requisition Line values.
      SelectPurchaseLine(PurchaseLine,Item."No.");
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    PROCEDURE CalcPlanForReqWkshWithSalesAndPurchaseFRQItem@16();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      SalesHeader@1005 : Record 36;
      SalesLine@1010 : Record 37;
      SalesLine2@1009 : Record 37;
      ItemJournalLine@1002 : Record 83;
      RequisitionWkshName@1012 : Record 245;
      RequisitionLine@1013 : Record 246;
      PurchaseLine@1016 : Record 39;
      PostingDate@1017 : Date;
      ExpectedReceiptDate@1007 : Date;
      ShipmentDate@1008 : Date;
      ShipmentDate2@1011 : Date;
      StartDate@1014 : Date;
      EndDate@1015 : Date;
      Quantity@1006 : Integer;
    BEGIN
      // Setup: Create Fixed Reorder Quantity Item.
      Initialize;
      CreateFixedReorderQtyItem(Item);
      Quantity := LibraryRandom.RandInt(10) + 5;  // Random Quantity.
      UpdateLeadTimeCalculationForItem(Item,'<' + FORMAT(LibraryRandom.RandInt(5) + 10) + 'D>');  // Random Lead Time Calculation.
      PostingDate := GetRequiredDate(10,10,WORKDATE,-1);
      UpdateInventory(ItemJournalLine,Item."No.",PostingDate,Quantity);

      // Create Purchase Order.
      ExpectedReceiptDate := GetRequiredDate(5,10,WORKDATE,1);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",ExpectedReceiptDate,Quantity - LibraryRandom.RandInt(5));  // Expected Receipt date, Quantity required.

      // Create Sales Order multiple lines.
      ShipmentDate := GetRequiredDate(20,10,WORKDATE,1);  // Shipment Date relative to Work Date.
      ShipmentDate2 := GetRequiredDate(20,20,WORKDATE,1);  // Shipment Date relative to Work Date.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",ItemJournalLine.Quantity);  // Item Journal Line Quantity value required.
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine2,SalesHeader,SalesLine2.Type::Item,Item."No.",ShipmentDate2,Quantity + LibraryRandom.RandInt(5));

      // Exercise: Calculate Plan on Requisition Worksheet.
      StartDate := GetRequiredDate(5,0,ShipmentDate,-1);  // Start Date Less than Shipment Date of first Sales Line.
      EndDate := GetRequiredDate(5,0,ShipmentDate2,1);  // End Date greater than Shipment Date of second Sales Line.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,StartDate,EndDate);

      // Verify: Verify Entries in Requisition Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectPurchaseLine(PurchaseLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,Item."Reorder Point" - PurchaseLine.Quantity + Item."Reorder Quantity",0,
        RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,PurchaseLine.Quantity - Item."Reorder Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ItemJournalLine.Quantity + Item."Safety Stock Quantity" + Item."Reorder Quantity",0,
        RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    PROCEDURE CalcPlanForSalesShipmentDatesSameForSalesLinesLFLItem@32();
    VAR
      SalesShipmentDate@1000 : Date;
      SalesShipmentDate2@1001 : Date;
      LotAccumulationPeriod@1002 : Text[30];
    BEGIN
      // Setup: Check Requisition Worksheet when Calculating Plan for Item having Lot Accumulation Period (1 Day) and Sales Order with multiple lines having same Shipment Dates.
      Initialize;
      LotAccumulationPeriod := '<1D>';
      SalesShipmentDate := GetRequiredDate(20,10,WORKDATE,1);  // Shipment Date relative to Work Date.
      SalesShipmentDate2 := SalesShipmentDate;  // Shipment Dates on Sales Line must be same.
      CalcPlanOnSalesOrderMultipleLinesLotAccumPeriodLFLItem(LotAccumulationPeriod,SalesShipmentDate,SalesShipmentDate2,TRUE,FALSE);  // Lot Accumulation Period and shipment Date important for test.
    END;

    [Test]
    PROCEDURE CalcPlanForSalesShipmentDatesDiffForSalesLinesLFLItem@33();
    VAR
      SalesShipmentDate@1003 : Date;
      SalesShipmentDate2@1002 : Date;
      LotAccumulationPeriod@1001 : Text[30];
    BEGIN
      // Setup: Check Requisition Worksheet when Calculating Plan for Item having Lot Accumulation Period (1 Day) and Sales Order with multiple lines having different Shipment Dates.
      Initialize;
      LotAccumulationPeriod := '<1D>';
      SalesShipmentDate := WORKDATE;
      SalesShipmentDate2 := GetRequiredDate(20,10,WORKDATE,1);  // Shipment Date relative to Work Date.
      CalcPlanOnSalesOrderMultipleLinesLotAccumPeriodLFLItem(LotAccumulationPeriod,SalesShipmentDate,SalesShipmentDate2,FALSE,TRUE);  // Lot Accumulation Period and shipment Date important for test.
    END;

    [Test]
    PROCEDURE CalcPlanForSalesShipmentDatesDiffForSalesLinesWithNoLotAccumPeriodLFLItem@34();
    VAR
      SalesShipmentDate@1003 : Date;
      SalesShipmentDate2@1002 : Date;
      LotAccumulationPeriod@1001 : Text[30];
    BEGIN
      // Setup: Check Requisition Worksheet when Calculating Plan for Item having Lot Accumulation Period (0 Day) and Sales Order with multiple lines having different Shipment Dates.
      Initialize;
      LotAccumulationPeriod := '<0D>';
      SalesShipmentDate := WORKDATE ;
      SalesShipmentDate2 := GetRequiredDate(20,10,WORKDATE,1);  // Shipment Date relative to Work Date.
      CalcPlanOnSalesOrderMultipleLinesLotAccumPeriodLFLItem(LotAccumulationPeriod,SalesShipmentDate,SalesShipmentDate2,FALSE,TRUE);  // Lot Accumulation Period and shipment Date important for test.
    END;

    LOCAL PROCEDURE CalcPlanOnSalesOrderMultipleLinesLotAccumPeriodLFLItem@10(LotAccumulationPeriod@1011 : Text[30];ShipmentDate@1010 : Date;ShipmentDate2@1012 : Date;SameShipmentDate@1008 : Boolean;PurchaseOrder@1013 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesLine@1002 : Record 37;
      SalesLine2@1004 : Record 37;
      RequisitionWkshName@1007 : Record 245;
      RequisitionLine@1006 : Record 246;
      PurchaseHeader@1014 : Record 38;
      ExpectedReceiptDate@1009 : Date;
      PlanningEndDate@1003 : Date;
      Quantity@1005 : Integer;
    BEGIN
      // Create Lot for Lot Item and Sales Order with multiple lines.
      CreateLotForLotItem(Item,LibraryRandom.RandInt(50),LotAccumulationPeriod);
      UpdateLeadTimeCalculationForItem(Item,'<1D>');
      Quantity := LibraryRandom.RandInt(10) + 100;  // Large Random Quantity.
      CreateSalesOrderWithMultipleLinesAndRequiredShipment(
        SalesLine,SalesLine2,Item."No.",Quantity,Quantity,ShipmentDate,ShipmentDate2);

      IF PurchaseOrder THEN BEGIN
        ExpectedReceiptDate := GetRequiredDate(10,0,ShipmentDate2,1);
        CreatePurchaseOrder(PurchaseHeader,Item."No.",ExpectedReceiptDate,SalesLine.Quantity + SalesLine2.Quantity);  // Expected Receipt date, Quantity required.
      END;

      // Exercise: Calculate Plan for Requisition Worksheet.
      PlanningEndDate := GetRequiredDate(10,30,CALCDATE('<+' + FORMAT(Item."Lot Accumulation Period"),WORKDATE),1);
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,PlanningEndDate);

      // Verify: Verify Entries in Requisition Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      IF SameShipmentDate THEN BEGIN
        VerifyRequisitionLineQuantity(RequisitionLine,Item."Safety Stock Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
        VerifyRequisitionLineQuantity(
          RequisitionLine,SalesLine.Quantity + SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      END ELSE BEGIN
        VerifyRequisitionLineQuantity(
          RequisitionLine,Item."Safety Stock Quantity" + SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
        VerifyRequisitionLineQuantity(
          RequisitionLine,0,SalesLine.Quantity + SalesLine2.Quantity,RequisitionLine."Ref. Order Type"::Purchase);
      END;
    END;

    [Test]
    PROCEDURE CalcPlanOnSalesAndOrderItemWithReservedQuantity@17();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      StartDate@1005 : Date;
      EndDate@1003 : Date;
      Quantity@1004 : Integer;
    BEGIN
      // Setup: Create Item of Order Type Reordering Policy. Create Sales order.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      Quantity := LibraryRandom.RandInt(10);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);

      // Exercise: Calculate Plan for Requisition Worksheet having Start Date less than Work Date.
      StartDate := GetRequiredDate(20,0,WORKDATE,-1);
      EndDate := GetRequiredDate(20,0,WORKDATE,1);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);

      // Verify: Verify Reserved Quantity is updated same as quantity on Sales Line.
      SelectSalesLineFromSalesDocument(SalesLine,SalesHeader."No.");
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",Quantity);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE CalcPlanForLFLItemFinishProductionOrderFromSalesOrder@13();
    BEGIN
      // [FEATURE] [Calculate Regenerative Plan] [Production]
      // [SCENARIO] Verify Quantity on Requisition Line: Lot-for-Lot Item, Sales Order - Production Order from sales - post Prod Jnl - finish Prod Order - reduce sales Qty - create 2nd Sales Order - calc Regen plan.

      // Setup.
      Initialize;
      CalcPlanForLFLItemProductionOrderCreatedFromSalesOrder(FALSE);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE CalcPlanTwiceForLFLItemFinishProductionOrderFromSalesOrderWithSalesShip@40();
    BEGIN
      // [FEATURE] [Calculate Regenerative Plan] [Production]
      // [SCENARIO] Verify Quantity on Requisition Line: Lot-for-Lot Item, Sales Order - Production Order from sales - post Prod Jnl - finish Prod Order - reduce sales Qty - create 2nd Sales Order - calc Regen plan - post 1st Sales - calc Regen plan.

      // Setup.
      Initialize;
      CalcPlanForLFLItemProductionOrderCreatedFromSalesOrder(TRUE);
    END;

    LOCAL PROCEDURE CalcPlanForLFLItemProductionOrderCreatedFromSalesOrder@44(PostSalesAndCalcPlan@1001 : Boolean);
    VAR
      Item@1027 : Record 27;
      SalesHeader@1026 : Record 36;
      SalesLine@1025 : Record 37;
      ProductionOrder@1024 : Record 5405;
      SalesHeader2@1023 : Record 36;
      SalesLine2@1022 : Record 37;
      RequisitionLine@1020 : Record 246;
      OrderType@1019 : 'ItemOrder,ProjectOrder';
      StartDate@1018 : Date;
      EndDate@1017 : Date;
      Quantity@1016 : Integer;
    BEGIN
      // Create Lot for Lot Item. Create Sales order. Create Production Order from Sales Order.
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock -0.
      Quantity := LibraryRandom.RandInt(10) + 20;  // Large Random Quantity.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      LibraryVariableStorage.Enqueue(ReleasedProductionOrderCreatedTxt);  // Required inside MessageHandler.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ItemOrder);

      // Open Production Journal and Post. Handler used -ProductionJournalHandler.
      OpenProductionJournalForReleasedProductionOrder(Item."No.");
      SelectProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released);

      // Change Status of Production Order from released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      UpdateQuantityOnSalesLine(SalesLine,Quantity - LibraryRandom.RandInt(10));

      // Create new sales Order.
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",SalesLine.Quantity - LibraryRandom.RandInt(5));

      // Exercise: Calculate Plan for Planning Worksheet.
      StartDate := GetRequiredDate(10,0,WORKDATE,-1);
      EndDate := GetRequiredDate(5,10,WORKDATE,1);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);

      // Exercise: Calculate Plan for Planning Worksheet after First Sales Order Posting.
      IF PostSalesAndCalcPlan THEN BEGIN
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
        LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);
      END;

      // Verify: Verify Quantity on Requisition Line.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Finished);
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity + SalesLine2.Quantity - ProductionOrder.Quantity,0,
        RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForSalesOrderFromBlanketOrderUsingForecastOrderItem@48();
    BEGIN
      // Setup.
      Initialize;
      PlanningForSalesOrderFromBlanketOrderUsingForecastOrderItem(FALSE);  // Post Sales Order -False.
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForSalesOrderFromBlanketOrderWithSalesShipUsingForecastOrderItem@46();
    BEGIN
      // Setup.
      Initialize;
      PlanningForSalesOrderFromBlanketOrderUsingForecastOrderItem(TRUE);  // Post Sales Order -True.
    END;

    LOCAL PROCEDURE PlanningForSalesOrderFromBlanketOrderUsingForecastOrderItem@45(PostSalesAndCalcPlan@1000 : Boolean);
    VAR
      Item@1001 : Record 27;
      SalesReceivablesSetup@1008 : Record 311;
      ProductionForecastEntry@1002 : ARRAY [3] OF Record 99000852;
      SalesHeader@1004 : Record 36;
      SalesOrderHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionLine@1007 : Record 246;
      RequisitionWkshName@1010 : Record 245;
      PlanningWorksheet@1011 : TestPage 99000852;
      OldStockoutWarning@1009 : Boolean;
      OldCreditWarnings@1012 : Option;
      Quantity@1003 : Integer;
    BEGIN
      // Create Item, Production Forecast, Create Sales Order from Blanket Order.
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,TRUE);
      Quantity := LibraryRandom.RandInt(10);  // Random Quantity.
      CreateSalesOrderFromBlanketOrder(SalesHeader,SalesOrderHeader,Item."No.",Quantity);
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Exercise: Calculate regenerative Plan for Planning Worksheet. Calculate regenerative Plan again if required after posting Sales Order.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      SelectSalesLineFromSalesDocument(SalesLine,SalesOrderHeader."No.");
      IF PostSalesAndCalcPlan THEN
        PostSalesAndCalcRegenPlan(SalesLine,SalesOrderHeader,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Entries in Planning Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      IF  NOT PostSalesAndCalcPlan THEN
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,OldStockoutWarning,OldCreditWarnings);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForBlanketOrderUpdatedOnSalesOrderUsingForecastOrderItem@42();
    BEGIN
      // Setup.
      Initialize;
      PlanningForBlanketOrderUpdatedOnSalesOrderUsingForecastOrderItem(FALSE);  // Post Sales Order and Calculate Plan -False.
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForBlanketOrderUpdatedOnSalesOrderWithSalesShipUsingForecastOrderItem@41();
    BEGIN
      // Setup.
      Initialize;
      PlanningForBlanketOrderUpdatedOnSalesOrderUsingForecastOrderItem(TRUE);  // Post Sales Order and Calculate Plan -True.
    END;

    LOCAL PROCEDURE PlanningForBlanketOrderUpdatedOnSalesOrderUsingForecastOrderItem@39(PostSalesAndCalcPlan@1007 : Boolean);
    VAR
      Item@1006 : Record 27;
      ProductionForecastEntry@1005 : ARRAY [3] OF Record 99000852;
      SalesHeader@1004 : Record 36;
      SalesLine@1010 : Record 37;
      SalesHeader2@1003 : Record 36;
      SalesLine2@1002 : Record 37;
      RequisitionLine@1001 : Record 246;
      RequisitionWkshName@1009 : Record 245;
      PlanningWorksheet@1008 : TestPage 99000852;
      Quantity@1000 : Integer;
    BEGIN
      // Create Item of Order Type Reordering Policy. Create Production Forecast. Create Blanket Order and Sales Order.
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,TRUE);
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less than Blanket Order.
      UpdateBlanketOrderNoOnSalesLine(SalesLine,SalesHeader."No.");  // Update Blanket Order No on Sales Order.
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Exercise: Calculate regenerative Plan for Planning Worksheet. Calculate regenerative Plan again if required after posting Sales Order.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      IF PostSalesAndCalcPlan THEN
        PostSalesAndCalcRegenPlan(SalesLine2,SalesHeader2,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Entries in Planning Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      IF  NOT PostSalesAndCalcPlan THEN
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,(SalesLine.Quantity - SalesLine2.Quantity) + ProductionForecastEntry[1]."Forecast Quantity (Base)",0,
        RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForBlanketOrderSalesOrderForSameItemUsingForecastOrderItem@38();
    BEGIN
      // Setup.
      Initialize;
      PlanningForBlanketOrderSalesOrderForSameItemUsingForecastOrderItem(FALSE);  // Update Blanket Order on Sales Order -False, Post Sales Order -False.
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForBlanketOrderSalesOrderForSameItemUpdateBlanketOnSalesUsingForecastOrderItem@37();
    BEGIN
      // Setup.
      Initialize;
      PlanningForBlanketOrderSalesOrderForSameItemUsingForecastOrderItem(TRUE);  // Update Blanket Order on Sales Order -True, Post Sales Order -False.
    END;

    LOCAL PROCEDURE PlanningForBlanketOrderSalesOrderForSameItemUsingForecastOrderItem@24(BlanketOnSales@1001 : Boolean);
    VAR
      Item@1008 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      SalesHeader@1006 : Record 36;
      SalesHeader2@1005 : Record 36;
      SalesLine@1004 : Record 37;
      SalesLine2@1011 : Record 37;
      RequisitionLine@1003 : Record 246;
      RequisitionWkshName@1009 : Record 245;
      PlanningWorksheet@1010 : TestPage 99000852;
      Quantity@1002 : Integer;
    BEGIN
      // Create Order Item, Create Production Forecast, Create Blanket Order and Create Sales Order.
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,TRUE);
      Quantity := LibraryRandom.RandInt(10) + 5;  // Random Quantity.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less than Blanket order.
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Exercise: Calculate regenerative Plan for Planning Worksheet. Calculate regenerative Plan again after updating Blanket Order no on posting Sales Order.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      IF BlanketOnSales THEN
        UpdateBlanketOnSalesAndCalcRegenPlan(
          SalesLine,PlanningWorksheet,SalesHeader."No.",RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,(SalesLine.Quantity - SalesLine2.Quantity) + ProductionForecastEntry[1]."Forecast Quantity (Base)",0,
        RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanThriceForBlanketOrderSalesOrderForSameOrderItemUpdateBlanketOnSalesWithSalesShipUsingForecast@36();
    VAR
      Item@1009 : Record 27;
      ProductionForecastEntry@1008 : ARRAY [3] OF Record 99000852;
      SalesHeader@1007 : Record 36;
      SalesHeader2@1006 : Record 36;
      SalesLine@1005 : Record 37;
      SalesLine2@1004 : Record 37;
      RequisitionLine@1003 : Record 246;
      RequisitionWkshName@1002 : Record 245;
      PlanningWorksheet@1001 : TestPage 99000852;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item, Create Production Forecast, Create Blanket Order and Create Sales Order.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,TRUE);
      Quantity := LibraryRandom.RandInt(10) + 5;  // Random Quantity.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less than Blanket order.
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Calculate regenerative Plan for Planning Worksheet. Calculate regenerative Plan again after updating Blanket Order no on posting Sales Order.Calculate Plan again after Posting Sales Order.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      UpdateBlanketOnSalesAndCalcRegenPlan(
        SalesLine2,PlanningWorksheet,SalesHeader."No.",RequisitionWkshName.Name,Item."No.",Item."No.");
      PostSalesAndCalcRegenPlan(SalesLine2,SalesHeader2,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity + ProductionForecastEntry[1]."Forecast Quantity (Base)",0,
        RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForBlanketOrderSalesOrderForItemAndChildItemOfUsingForecastOrderItem@92();
    BEGIN
      // Setup.
      Initialize;
      PlanningForBlanketOrderSalesOrderForItemAndChildItemUsingForecastOrderItem(FALSE);  // Post Sales Order and Calculate Plan -False.
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForBlanketOrderSalesOrderForItemAndChildItemWithSalesShipUsingForecastOrderItem@93();
    BEGIN
      // Setup.
      Initialize;
      PlanningForBlanketOrderSalesOrderForItemAndChildItemUsingForecastOrderItem(TRUE);  // Post Sales Order and Calculate Plan -True.
    END;

    LOCAL PROCEDURE PlanningForBlanketOrderSalesOrderForItemAndChildItemUsingForecastOrderItem@70(PostSalesAndCalcPlan@1016 : Boolean);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      Item@1001 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionForecastEntry@1002 : ARRAY [3] OF Record 99000852;
      ProductionForecastEntry2@1003 : ARRAY [3] OF Record 99000852;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      SalesHeader2@1009 : Record 36;
      SalesLine2@1008 : Record 37;
      SalesLine3@1007 : Record 37;
      SalesLine4@1014 : Record 37;
      RequisitionWkshName@1011 : Record 245;
      RequisitionLine@1013 : Record 246;
      RequisitionLine2@1015 : Record 246;
      PlanningWorksheet@1012 : TestPage 99000852;
      Quantity@1010 : Integer;
    BEGIN
      // Create Item and Child Item. Create Production BOM, Create Production Forecast.
      CreateOrderItem(ChildItem,'',ChildItem."Replenishment System"::Purchase);  // Child Item.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");  // Parent Item.
      CreateOrderItem(Item,ProductionBOMHeader."No.",Item."Replenishment System"::"Prod. Order");
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,TRUE);
      CreateProductionForecastSetup(ProductionForecastEntry2,ChildItem."No.",WORKDATE,TRUE);

      // Create Blanket Order with multiple Lines of Parent and Child Item.
      Quantity := LibraryRandom.RandInt(10) + 5;  // Random Quantity.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);
      LibrarySales.CreateSalesLine(SalesLine2,SalesHeader,SalesLine2.Type::Item,ChildItem."No.",Quantity);

      // Create Sales Order with multiple Lines of Parent and Child Item.
      CreateSalesOrder(SalesHeader2,SalesLine3,Item."No.",Quantity - LibraryRandom.RandInt(5));
      LibrarySales.CreateSalesLine(SalesLine4,SalesHeader2,SalesLine4.Type::Item,ChildItem."No.",SalesLine.Quantity);

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",ChildItem."No.");

      // Calculate regenerative Plan again after posting Sales Order.
      IF PostSalesAndCalcPlan THEN BEGIN
        SalesLine3.ShowReservationEntries(TRUE);  // Cancel Reservation. Handler used -ReservationEntry Handler.
        PostSalesAndCalcRegenPlan(SalesLine4,SalesHeader2,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",ChildItem."No.");
      END;

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectRequisitionLine(RequisitionLine2,ChildItem."No.");
      IF PostSalesAndCalcPlan THEN BEGIN
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
        VerifyRequisitionLineQuantity(RequisitionLine2,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      END ELSE BEGIN
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine3.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
        VerifyRequisitionLineQuantity(RequisitionLine2,SalesLine3.Quantity,0,RequisitionLine2."Ref. Order Type"::Purchase);
        VerifyRequisitionLineQuantity(RequisitionLine2,SalesLine.Quantity,0,RequisitionLine2."Ref. Order Type"::Purchase);
        VerifyRequisitionLineQuantity(RequisitionLine2,SalesLine4.Quantity,0,RequisitionLine2."Ref. Order Type"::Purchase);
      END;

      VerifyRequisitionLineQuantity(
        RequisitionLine2,ProductionForecastEntry2[1]."Forecast Quantity (Base)" - (SalesLine4.Quantity - SalesLine2.Quantity),0,
        RequisitionLine2."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine2,ProductionForecastEntry2[2]."Forecast Quantity (Base)",0,RequisitionLine2."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine2,ProductionForecastEntry2[3]."Forecast Quantity (Base)",0,RequisitionLine2."Ref. Order Type"::Purchase);
    END;

    [Test]
    PROCEDURE CalcPlanForReqWkshWithoutAnyDemandFRQItem@125();
    VAR
      Item@1000 : Record 27;
      RequisitionWkshName@1005 : Record 245;
      RequisitionLine@1006 : Record 246;
    BEGIN
      // [FEATURE] [Planning Worksheet]
      // [SCENARIO 127791] Calc a regenerative Plan without demands when default "Blank Overflow Level".
      Initialize;

      // [GIVEN] Create Item with Fixed Reorder Quantity, "Reorder Quantity" more than "Reorder Point".
      CreateItemAndSetFRQ(Item);

      // [WHEN] Calculate a regenerative Plan in Planning Worksheet without demands.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,WORKDATE);

      // [THEN] Planning Wksht contains 2 Entries with Quantity equal "Reorder Quantity" and "Safety Stock Quantity" from Item.
      VerifyQtyInTwoRequisitionLines(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE CalcPlanForReqWkshUseItemValuesFRQItemNoDemand@157();
    VAR
      Item@1000 : Record 27;
      RequisitionWkshName@1005 : Record 245;
      RequisitionLine@1006 : Record 246;
    BEGIN
      // [FEATURE] [Planning Worksheet]
      // [SCENARIO 378374] Calc a regenerative Plan without demands when "Blank Overflow Level" is "Use Item/SKU Values Only".
      Initialize;

      // [GIVEN] Set "Blank Overflow Level" in "Manufacturing Setup" as "Use Item/SKU Values Only".
      SetBlankOverflowLevelAsUseItemValues;
      // [GIVEN] Create Item with Fixed Reorder Quantity, "Reorder Quantity" more than "Reorder Point".
      CreateItemAndSetFRQ(Item);

      // [WHEN] Calculate a regenerative Plan in Planning Worksheet without demands.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,WORKDATE);

      // [THEN] Planning Wksht contains 2 Entries with Quantity equal "Reorder Quantity" and "Safety Stock Quantity" from Item.
      VerifyQtyInTwoRequisitionLines(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE CalcRegenerativePlanForTransferOrder@124();
    VAR
      Item@1012 : Record 27;
      TransferLine@1005 : Record 5741;
      RequisitionLine@1004 : Record 246;
      Quantity@1002 : Integer;
      EndDate@1000 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item, Create Transfer Order.
      Initialize;
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase);
      Quantity := LibraryRandom.RandInt(10) + 10;  // Random Quantity.

      // Create Transfer Order.
      CreateTransferOrderWithTransferRoute(TransferLine,Item."No.",LocationYellow.Code,LocationRed.Code,Quantity);

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      EndDate := GetRequiredDate(10,20,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Verify: Verify Entries in Planning Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,0,TransferLine.Quantity,RequisitionLine."Ref. Order Type"::Transfer);
    END;

    [Test]
    PROCEDURE CalcNetChangePlanForTransferOrder@122();
    VAR
      Item@1012 : Record 27;
      Item2@1011 : Record 27;
      PurchaseHeader@1010 : Record 38;
      PurchaseLine@1007 : Record 39;
      TransferLine@1005 : Record 5741;
      RequisitionLine@1004 : Record 246;
      RequisitionLine2@1003 : Record 246;
      Quantity@1002 : Integer;
      ExpectedReceiptDate@1001 : Date;
      EndDate@1000 : Date;
    BEGIN
      // Setup : Create Lot for Lot Items.
      Initialize;
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase);
      CreateItem(Item2,Item2."Reordering Policy"::"Lot-for-Lot",Item2."Replenishment System"::Purchase);
      Quantity := LibraryRandom.RandInt(10) + 10;  // Random Quantity.
      ExpectedReceiptDate := GetRequiredDate(10,10,WORKDATE,1);  // Expected Receipt Date relative to Workdate.

      // Create Purchase Order and Transfer Order for different Items.
      CreatePurchaseOrder(PurchaseHeader,Item."No.",ExpectedReceiptDate,Quantity);  // Expected Receipt date, Quantity required.
      CreateTransferOrderWithTransferRoute(
        TransferLine,Item2."No.",LocationYellow.Code,LocationRed.Code,Quantity - LibraryRandom.RandInt(5));

      // Calculate Regenerative Plan for Planning Worksheet. Modify supply for one Item.
      EndDate := GetRequiredDate(10,20,WORKDATE,1);  // End Date relative to Workdate.
      Item.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);
      UpdateQuantityOnPurchaseLine(PurchaseLine,Item."No.",Quantity - LibraryRandom.RandInt(5));

      // Exercise: Calculate Net Change Plan after change in supply pattern.
      Item.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,EndDate,FALSE);

      // Verify: Verify Entries after Net change planning in Planning Worksheet.
      SelectPurchaseLine(PurchaseLine,Item."No.");
      SelectRequisitionLine(RequisitionLine,Item2."No.");
      SelectRequisitionLine(RequisitionLine2,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,0,TransferLine.Quantity,RequisitionLine."Ref. Order Type"::Transfer);
      VerifyRequisitionLineQuantity(RequisitionLine2,0,PurchaseLine.Quantity,RequisitionLine2."Ref. Order Type"::Purchase);
    END;

    [Test]
    PROCEDURE CalcPlanForSalesOrderFromBlanketOrderForProductionOrderOrderItem@121();
    VAR
      Item@1012 : Record 27;
      SalesReceivablesSetup@1005 : Record 311;
      SalesHeader@1010 : Record 36;
      SalesOrderHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      RequisitionLine@1006 : Record 246;
      OldStockoutWarning@1004 : Boolean;
      OldCreditWarnings@1003 : Option;
      ShipmentDate@1001 : Date;
      EndDate@1002 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item.
      Initialize;
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      CreateOrderItem(Item,'',Item."Replenishment System"::"Prod. Order");
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.

      // Create Sales Order from Blanket Order.
      CreateSalesOrderFromBlanketOrder(SalesHeader,SalesOrderHeader,Item."No.",Quantity);

      // Update Shipment Date in newly created Sales Order from Blanket Order.
      ShipmentDate := GetRequiredDate(5,0,SalesHeader."Shipment Date",1);  // Shipment Date more than Shipment Date Of Blanket Order.
      UpdateShipmentDateOnSalesHeader(SalesOrderHeader,ShipmentDate);

      // Exercise: Calculate Regenerative Plan for Planning Worksheet.
      EndDate := GetRequiredDate(10,20,ShipmentDate,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectSalesLineFromSalesDocument(SalesLine,SalesOrderHeader."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");

      // Teardown.
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,OldStockoutWarning,OldCreditWarnings);
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForSalesOrderFromBlanketOrderWithSalesShipUsingForecastForProductionOrderOrderItem@109();
    VAR
      Item@1012 : Record 27;
      SalesReceivablesSetup@1015 : Record 311;
      ProductionForecastEntry@1004 : ARRAY [3] OF Record 99000852;
      SalesHeader@1010 : Record 36;
      SalesLine@1009 : Record 37;
      SalesOrderHeader@1008 : Record 36;
      SalesLine2@1007 : Record 37;
      RequisitionLine@1006 : Record 246;
      RequisitionWkshName@1011 : Record 245;
      PlanningWorksheet@1003 : TestPage 99000852;
      OldStockoutWarning@1014 : Boolean;
      OldCreditWarnings@1013 : Option;
      ForecastDate@1005 : Date;
      ShipmentDate@1002 : Date;
      ShipmentDate2@1001 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item, Create Production Forecast for Production Order.
      Initialize;
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      CreateOrderItem(Item,'',Item."Replenishment System"::"Prod. Order");
      ForecastDate := GetRequiredDate(30,20,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean -False, for Single Forecast Entry.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.
      ShipmentDate := GetRequiredDate(10,0,ProductionForecastEntry[1]."Forecast Date",-1);  // Shipment Date relative to Forecast Date.

      // Create Sales Order from Blanket Order.
      CreateSalesOrderFromBlanketOrderWithNewQuantityToShip(SalesHeader,SalesOrderHeader,SalesLine,Item."No.",Quantity,ShipmentDate);

      // Update Shipment date in newly created Sales Order from Blanket Order.
      ShipmentDate2 := GetRequiredDate(5,0,SalesHeader."Shipment Date",-1);  // Shipment Date less than Shipment Date Of Blanket Order.
      UpdateShipmentDateOnSalesHeader(SalesOrderHeader,ShipmentDate2);
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Calculate Regenerative Plan for Planning Worksheet.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Exercise: Calculate Regenerative Plan again after posting Sales Order.
      SelectSalesLineFromSalesDocument(SalesLine2,SalesOrderHeader."No.");
      PostSalesAndCalcRegenPlan(SalesLine2,SalesOrderHeader,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity - SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::"Prod. Order");

      // Teardown.
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,OldStockoutWarning,OldCreditWarnings);
    END;

    [Test]
    PROCEDURE CalcPlanForBlanketOrderUpdatedOnSalesOrderForProductionOrderOrderItem@107();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1010 : Record 36;
      SalesLine@1009 : Record 37;
      SalesHeader2@1008 : Record 36;
      SalesLine2@1007 : Record 37;
      RequisitionLine@1006 : Record 246;
      EndDate@1013 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::"Prod. Order");
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.

      // Create Blanket Order.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);

      // Create Sales Order. Update Quantity and Blanket Order No.
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less than Blanket Order.
      UpdateQuantityOnSalesLine(SalesLine2,SalesLine2.Quantity - LibraryRandom.RandInt(5));  // Quantity less than previous Quantity.
      UpdateBlanketOrderNoOnSalesLine(SalesLine2,SalesHeader."No.");  // Update Blanket Order No on Sales Order.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      EndDate := GetRequiredDate(10,20,SalesHeader."Shipment Date",1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity - SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForBlanketOrderUpdatedOnSalesOrderWithSalesShipUsingForecastProductionOrderOrderItem@73();
    VAR
      Item@1012 : Record 27;
      ProductionForecastEntry@1011 : ARRAY [3] OF Record 99000852;
      SalesHeader@1010 : Record 36;
      SalesLine@1009 : Record 37;
      SalesHeader2@1008 : Record 36;
      SalesLine2@1007 : Record 37;
      RequisitionLine@1006 : Record 246;
      RequisitionWkshName@1005 : Record 245;
      PlanningWorksheet@1004 : TestPage 99000852;
      ForecastDate@1003 : Date;
      ShipmentDate@1002 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item, Create Production Forecast for Production Order.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::"Prod. Order");
      ForecastDate := GetRequiredDate(30,20,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean -False, for Single Forecast Entry.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.

      // Create Blanket Order.
      ShipmentDate := GetRequiredDate(10,0,ProductionForecastEntry[1]."Forecast Date",-1);  // Shipment Date relative to Forecast Date.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,ShipmentDate);

      // Create Sales Order. Update Quantity and Blanket Order No.
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less than Blanket Order.
      UpdateQuantityOnSalesLine(SalesLine2,SalesLine2.Quantity - LibraryRandom.RandInt(5));  // Quantity less than Quantity of first Sales Line.
      UpdateBlanketOrderNoOnSalesLine(SalesLine2,SalesHeader."No.");  // Update Blanket Order No on Sales Order.

      // Calculate regenerative Plan for Planning Worksheet
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Exercise: Calculate regenerative Plan again after posting Sales Order.
      PostSalesAndCalcRegenPlan(SalesLine2,SalesHeader2,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForBlanketOrderUpdatedOnSalesOrderWithForecastProductionOrderOrderItem@66();
    VAR
      Item@1016 : Record 27;
      ProductionForecastEntry@1014 : ARRAY [3] OF Record 99000852;
      SalesHeader@1012 : Record 36;
      SalesLine@1011 : Record 37;
      SalesLine2@1010 : Record 37;
      SalesHeader2@1009 : Record 36;
      RequisitionLine@1006 : Record 246;
      RequisitionLine2@1005 : Record 246;
      RequisitionWkshName@1004 : Record 245;
      PlanningWorksheet@1003 : TestPage 99000852;
      ForecastDate@1002 : Date;
      Quantity@1000 : Integer;
      SalesLineQuantity@1001 : Integer;
    BEGIN
      // Setup: Create Order Item, Create Production Forecast.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::"Prod. Order");
      ForecastDate := GetRequiredDate(20,20,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - False, for Single Forecast Entry.

      // Create Blanket Order.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);

      // Create Sales Order with multiple lines and update Quantity and Blanket Order No.
      CreateSalesOrderTwoLinesWithBlanketOrderNo(
        SalesHeader2,SalesHeader."No.",Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less then Quantity of Blanket Order.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectSalesLineFromSalesDocument(SalesLine2,SalesHeader2."No.");
      SalesLineQuantity := SalesLine2.Quantity;  // Select Quantity from first Sales Line.
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLineQuantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
      SalesLine2.NEXT;  // Move to second Sales Line.
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity - SalesLineQuantity - SalesLine2.Quantity,0,
        RequisitionLine2."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForBlanketOrderUpdatedOnMultiLineSalesOrderSalesShipUsingForecastProductionOrderOrderItem@58();
    VAR
      Item@1016 : Record 27;
      ProductionForecastEntry@1014 : ARRAY [3] OF Record 99000852;
      SalesHeader@1012 : Record 36;
      SalesLine@1011 : Record 37;
      SalesLine2@1010 : Record 37;
      SalesHeader2@1009 : Record 36;
      RequisitionLine@1006 : Record 246;
      RequisitionWkshName@1004 : Record 245;
      PlanningWorksheet@1003 : TestPage 99000852;
      ForecastDate@1002 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Items, Create Production Forecast.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::"Prod. Order");
      ForecastDate := GetRequiredDate(20,20,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - False, for Single Forecast Entry.

      // Create Blanket Order.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Quantity.
      CreateBlanketOrder(SalesHeader,SalesLine,Item."No.",Quantity,WORKDATE);

      // Create Sales Order with multiple lines and update Quantity and Blanket Order No.
      CreateSalesOrderTwoLinesWithBlanketOrderNo(
        SalesHeader2,SalesHeader."No.",Item."No.",Quantity - LibraryRandom.RandInt(5));  // Quantity less then Quantity of Blanket Order.
      SelectSalesLineFromSalesDocument(SalesLine2,SalesHeader2."No.");

      // Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      SalesLine2.ShowReservationEntries(TRUE);  // Cancel Reservation for first Sales Line. Handler used - ReservationEntry Handler.
      SalesLine2.NEXT;  // Move to second Sales Line.

      // Exercise: Calculate regenerative Plan again after posting Sales Order.
      PostSalesAndCalcRegenPlan(SalesLine2,SalesHeader2,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Requisition Lines for Quantity.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForMultiLineSalesOrderUsingForecastOrderItems@67();
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1002 : Record 37;
      ProductionForecastEntry@1008 : ARRAY [3] OF Record 99000852;
      ProductionForecastEntry2@1012 : ARRAY [3] OF Record 99000852;
      RequisitionLine@1014 : Record 246;
      RequisitionLine2@1015 : Record 246;
      RequisitionWkshName@1011 : Record 245;
      PlanningWorksheet@1010 : TestPage 99000852;
      ForecastDate@1009 : Date;
      ForecastDate2@1013 : Date;
      Quantity@1004 : Integer;
    BEGIN
      // Setup: Create Order Item, Create Production Forecast for multiple Items.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateOrderItem(Item2,'',Item2."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      ForecastDate2 := GetRequiredDate(2,1,ForecastDate,1);  // Forecast Date Relative to Forecast Date of first Item.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - False, for Single Forecast Entry.
      CreateProductionForecastSetup(ProductionForecastEntry2,Item2."No.",ForecastDate2,FALSE);  // Boolean - False, for Single Forecast Entry.

      // Create Sales Order with multiple Lines.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      LibrarySales.CreateSalesLine(
        SalesLine2,SalesHeader,SalesLine2.Type::Item,Item2."No.",SalesLine.Quantity - LibraryRandom.RandInt(5));  // Quantity less than first Sales Line Quantity.
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item2."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectRequisitionLine(RequisitionLine2,Item2."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(RequisitionLine2,SalesLine2.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine2,ProductionForecastEntry2[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForForecastAndSalesForDifferentOrderItems@89();
    VAR
      Item@1002 : Record 27;
      Item2@1001 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionWkshName@1011 : Record 245;
      RequisitionLine@1012 : Record 246;
      RequisitionLine2@1005 : Record 246;
      PlanningWorksheet@1010 : TestPage 99000852;
      ForecastDate@1006 : Date;
      Quantity@1004 : Integer;
    BEGIN
      // Setup: Create Order Item, Create Production Forecast.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateOrderItem(Item2,'',Item2."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - False, for Single Forecast Entry.

      // Create Sales Order for different Item.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateSalesOrder(SalesHeader,SalesLine,Item2."No.",Quantity);
      CreateRequisitionWorksheetName(RequisitionWkshName);

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item2."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectRequisitionLine(RequisitionLine2,Item2."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(RequisitionLine2,SalesLine.Quantity,0,RequisitionLine2."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForSalesOrderUsingForecastOrderItem@123();
    BEGIN
      // Setup.
      Initialize;
      PlanningForSalesOrderUsingForecastOrderItem(FALSE);  // Post Sales Order and Calculate Plan - False.
    END;

    [Test]
    [HandlerFunctions(ReservationEntryPageHandler,ConfirmHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanTwiceForSalesOrderWithSalesShipUsingForecastOrderItem@59();
    BEGIN
      // Setup.
      Initialize;
      PlanningForSalesOrderUsingForecastOrderItem(TRUE);  // Post Sales Order and Calculate Plan - True.
    END;

    LOCAL PROCEDURE PlanningForSalesOrderUsingForecastOrderItem@7(PostSalesAndCalcPlan@1015 : Boolean);
    VAR
      Item@1017 : Record 27;
      ProductionForecastEntry@1014 : ARRAY [3] OF Record 99000852;
      SalesHeader@1013 : Record 36;
      SalesLine@1010 : Record 37;
      RequisitionWkshName@1007 : Record 245;
      RequisitionLine@1000 : Record 246;
      PlanningWorksheet@1006 : TestPage 99000852;
      ForecastDate@1005 : Date;
      ShipmentDate@1004 : Date;
      Quantity@1001 : Integer;
    BEGIN
      // Create Order Item, Create Production Forecast.
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.

      // Create Sales Order. Update Shipment Date on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      ShipmentDate := GetRequiredDate(2,1,ForecastDate,1);  // Shipment Date Relative to Forecast Date.
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);

      // Exercise: Calculate regenerative Plan for Planning Worksheet. Calculate regenerative Plan again if required after posting Sales Order.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      IF PostSalesAndCalcPlan THEN
        PostSalesAndCalcRegenPlan(SalesLine,SalesHeader,PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      IF NOT PostSalesAndCalcPlan THEN BEGIN
        VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
        VerifyRequisitionLineQuantity(
          RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)" - SalesLine.Quantity,0,
          RequisitionLine."Ref. Order Type"::Purchase);
      END ELSE
        VerifyRequisitionLineQuantity(
          RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity (Base)",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForSalesOrderUsingForecastOrderItemsForZeroQuantity@113();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      ProductionForecastEntry2@1007 : ARRAY [3] OF Record 99000852;
      RequisitionWkshName@1006 : Record 245;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      RequisitionLine@1011 : Record 246;
      PlanningWorksheet@1005 : TestPage 99000852;
      ForecastDate@1002 : Date;
      Quantity@1004 : Integer;
    BEGIN
      // Setup: Create Order Items.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateOrderItem(Item2,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.

      // Create Production Forecasts for different Items with single entry.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - False, for Single Forecast Entry.
      CreateAndUpdateProductionForecastSetup(ProductionForecastEntry2,Item2."No.",ForecastDate,0,FALSE);  // Update Production Forecast Quantity to - 0. Boolean - False, for Single Forecast Entry.

      // Create Sales Order for first Item.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);

      // Exercise: Calculate Regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item2."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForForecastOrderItemForNegativeQuantity@115();
    VAR
      Item@1000 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      RequisitionWkshName@1006 : Record 245;
      RequisitionLine@1001 : Record 246;
      PlanningWorksheet@1004 : TestPage 99000852;
      ForecastDate@1002 : Date;
    BEGIN
      // Setup: Create Order Item.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.

      // Create Production Forecasts for different Item with single entry.
      CreateAndUpdateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,-LibraryRandom.RandInt(10),FALSE);  // Boolean - False, for Single Forecast Entry. Update Production Forecast Quantity to Negative Quantity.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify that no Requisition line is created for Requisition Worksheet.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExistTxt,Item."No."));
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanUsingDifferentForecastEntriesForDifferentOrderItem@83();
    VAR
      Item@1008 : Record 27;
      Item2@1000 : Record 27;
      ProductionForecastEntry@1006 : ARRAY [3] OF Record 99000852;
      ProductionForecastEntry2@1005 : ARRAY [3] OF Record 99000852;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1003 : Record 246;
      PlanningWorksheet@1002 : TestPage 99000852;
      ForecastDate@1001 : Date;
    BEGIN
      // Setup: Create Order Item.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      CreateOrderItem(Item2,'',Item2."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.

      // Create Production Forecasts for same Item with multiple entries.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.
      CreateProductionForecastSetup(ProductionForecastEntry2,Item2."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item2."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item2."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry2[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry2[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry2[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForSalesOrdersWithFirmAndReleasedProdOrderUsingForecastTypeSalesItem@117();
    VAR
      Item@1000 : Record 27;
      ProductionForecastEntry@1001 : ARRAY [3] OF Record 99000852;
      ProductionOrder@1003 : Record 5405;
      ProductionOrder2@1006 : Record 5405;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
      SalesLine2@1007 : Record 37;
      RequisitionWkshName@1010 : Record 245;
      RequisitionLine@1012 : Record 246;
      PlanningWorksheet@1004 : TestPage 99000852;
      ForecastDate@1002 : Date;
      Quantity@1005 : Integer;
    BEGIN
      // Setup: Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.

      // Create Released Production Order.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity,FALSE,0D);

      // Create Firm Planned Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder2,Item."No.",ProductionOrder2.Status::"Firm Planned",Quantity - LibraryRandom.RandInt(5),FALSE,0D);  // Quantity less than Released Production Order.

      // Create Sales Order with multiple Lines.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      LibrarySales.CreateSalesLine(
        SalesLine2,SalesHeader,SalesLine2.Type::Item,Item."No.",SalesLine.Quantity - LibraryRandom.RandInt(5));  // Quantity less than First Sales Line.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity + SalesLine2.Quantity,ProductionOrder.Quantity,
        RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(RequisitionLine,0,ProductionOrder2.Quantity,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForFirmAndReleasedProdOrderUsingForecastTypeComponent@74();
    VAR
      Item@1001 : Record 27;
      ProductionForecastEntry@1000 : ARRAY [3] OF Record 99000852;
      ProductionOrder@1008 : Record 5405;
      ProductionOrder2@1007 : Record 5405;
      RequisitionWkshName@1012 : Record 245;
      RequisitionLine@1010 : Record 246;
      PlanningWorksheet@1011 : TestPage 99000852;
      ForecastDate@1002 : Date;
      Quantity@1003 : Integer;
    BEGIN
      // Setup:  Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.

      // Create Production Forecast. Update Production Forecast Type - Component.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.
      UpdateProductionForecastType(ProductionForecastEntry,TRUE);

      // Create Released Production Order.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity,FALSE,0D);

      // Create Firm Planned Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder2,Item."No.",ProductionOrder2.Status::"Firm Planned",Quantity - LibraryRandom.RandInt(5),FALSE,0D);  // Quantity less than Released Production Order.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,0,ProductionOrder.Quantity,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(RequisitionLine,0,ProductionOrder2.Quantity,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForOrderItemWithInventoryUsingForecast@85();
    VAR
      Item@1002 : Record 27;
      ProductionForecastEntry@1001 : ARRAY [3] OF Record 99000852;
      ItemJournalLine@1003 : Record 83;
      RequisitionWkshName@1007 : Record 245;
      RequisitionLine@1006 : Record 246;
      PlanningWorksheet@1005 : TestPage 99000852;
      ForecastDate@1004 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item. Create Production forecast for multiple entries.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.
      Quantity := LibraryRandom.RandInt(10) + 10;  // Random Integer Quantity Required.

      // Create and Post Item Journal Line.
      UpdateInventory(ItemJournalLine,Item."No.",WORKDATE,Quantity);  // Inventory Value required for Test.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForOrderItemWithInventoryAndReleasedProdOrderUsingForecast@78();
    VAR
      Item@1002 : Record 27;
      ProductionForecastEntry@1001 : ARRAY [3] OF Record 99000852;
      ItemJournalLine@1003 : Record 83;
      ProductionOrder@1008 : Record 5405;
      RequisitionWkshName@1007 : Record 245;
      RequisitionLine@1006 : Record 246;
      PlanningWorksheet@1005 : TestPage 99000852;
      ForecastDate@1004 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Order Item. Create Production forecast for multiple entries.
      Initialize;
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.
      Quantity := LibraryRandom.RandInt(10) + 10;  // Random Integer Quantity Required.

      // Create and Post Item Journal Line.
      UpdateInventory(ItemJournalLine,Item."No.",WORKDATE,Quantity);  // Inventory Value required for Test.

      // Create Released Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity,FALSE,0D);

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,0,ProductionOrder.Quantity,RequisitionLine."Ref. Order Type"::"Prod. Order");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSForSalesOrderOrderItemUsingForecast@111();
    VAR
      Item@1008 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1003 : Record 246;
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      PlanningWorksheet@1002 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1005 : Boolean;
      Quantity@1000 : Integer;
      ForecastDate@1001 : Date;
      ShipmentDate@1013 : Date;
    BEGIN
      // Setup: Create Order Item. Create Production Forecast.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);

      // Create Sales Order. Update Shipment Date.
      Quantity := LibraryRandom.RandInt(10);
      ShipmentDate := GetRequiredDate(10,0,ForecastDate,1);  // Shipment Date Relative to Forecast Date.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity" - SalesLine.Quantity,0,
        RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSForProductionForecastOrderItem@110();
    VAR
      Item@1011 : Record 27;
      ProductionForecastEntry@1010 : ARRAY [3] OF Record 99000852;
      RequisitionWkshName@1007 : Record 245;
      RequisitionLine@1006 : Record 246;
      PlanningWorksheet@1005 : TestPage 99000852;
      ForecastDate@1004 : Date;
      OldCombinedMPSMRPCalculation@1013 : Boolean;
    BEGIN
      // Setup: Create Order Item. Create Production Forecast.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    PROCEDURE CalcPlanWithMPSForSalesOrderOrderItem@108();
    VAR
      Item@1011 : Record 27;
      RequisitionLine@1006 : Record 246;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      OldCombinedMPSMRPCalculation@1004 : Boolean;
      EndDate@1000 : Date;
      Quantity@1003 : Integer;
    BEGIN
      // Setup: Create Order Item.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateOrderItem(Item,'',Item."Replenishment System"::Purchase);

      // Create Sales Order. Update Shipment Date.
      Quantity := LibraryRandom.RandInt(10);  // Random Integer Quantity Required.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      EndDate := GetRequiredDate(20,0,SalesLine."Shipment Date",1);  // End Date related to Sales Line Shipment Date.

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSForReleasedProdOrderWithConsumptionJournalLFLItemUsingForecast@106();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      ProductionBOMHeader@1005 : Record 99000771;
      ProductionOrder@1006 : Record 5405;
      RequisitionWkshName@1008 : Record 245;
      ItemJournalLine@1010 : Record 83;
      RequisitionLine@1011 : Record 246;
      PlanningWorksheet@1007 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1009 : Boolean;
      ForecastDate@1002 : Date;
      Quantity@1001 : Integer;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateLotForLotItem(ChildItem,0,'<0D>');  // Safety Stock - 0. Child Item.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");

      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0. Parent Item.
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Create Production Forecast with single Entry.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,ChildItem."No.",ForecastDate,FALSE);

      // Create Released Production Order. Create and Post Consumption Journal.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity,FALSE,0D);
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,Quantity);  // Inventory Value required for Test.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,ChildItem."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForReleasedProdOrderWithConsumptionJournalLFLItemUsingForecast@102();
    VAR
      Item@1009 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      ProductionBOMHeader@1006 : Record 99000771;
      ProductionOrder@1005 : Record 5405;
      RequisitionWkshName@1002 : Record 245;
      ItemJournalLine@1010 : Record 83;
      RequisitionLine@1011 : Record 246;
      PlanningWorksheet@1001 : TestPage 99000852;
      ForecastDate@1003 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItem(ChildItem,0,'<0D>');  // Safety Stock - 0. Child Item.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");

      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0. Parent Item.
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Create Production Forecast with single Entry.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,ChildItem."No.",ForecastDate,FALSE);

      // Create Released Production Order. Create and Post Consumption Journal.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity,FALSE,0D);
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,Quantity);  // Inventory Value required for Test.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,ChildItem."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanForMultipleReleasedProdOrdersWithConsumptionJournalLFLItemUsingMultipleForecastEntries@86();
    VAR
      Item@1009 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      ProductionBOMHeader@1006 : Record 99000771;
      ProductionOrder@1005 : Record 5405;
      ProductionOrder2@1013 : Record 5405;
      RequisitionWkshName@1002 : Record 245;
      ItemJournalLine@1010 : Record 83;
      RequisitionLine@1012 : Record 246;
      PlanningWorksheet@1001 : TestPage 99000852;
      ForecastDate@1003 : Date;
      DueDate@1004 : Date;
      Quantity@1000 : Integer;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItem(ChildItem,0,'<0D>');  // Safety Stock - 0. Child Item.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");

      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0. Parent Item.
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Create Production Forecast with multiple entries.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,ChildItem."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.

      // Create multiple Released Production Orders. Create and Post Consumption Journal.
      Quantity := LibraryRandom.RandInt(5) + 10;  // Random Integer Quantity Required.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity,FALSE,0D);
      DueDate := GetRequiredDate(10,0,ProductionOrder."Due Date",1);  // Due Date Relative to Due Date of first Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder2,Item."No.",ProductionOrder.Status::Released,Quantity,TRUE,DueDate);
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,Quantity);  // Inventory Value required for Test.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,ChildItem."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSNegativeSalesUsingForecastLFLItemForZeroQuantity@72();
    VAR
      Item@1004 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      RequisitionWkshName@1009 : Record 245;
      RequisitionLine@1008 : Record 246;
      PlanningWorksheet@1007 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1002 : Boolean;
      ForecastDate@1001 : Date;
    BEGIN
      // Setup: Create Lot for Lot  Item. Create Production Forecast with multiple Entries.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0, Lot Accumulation Period - 0D.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateAndUpdateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,0,TRUE); // Boolean - TRUE, for multiple Forecast Entries. Update Production Forecast Quantity to - 0.

      // Create Sales Order with Negative Quantity.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",-LibraryRandom.RandDec(10,2));  // Negative Random Quantity Required.

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity" + SalesLine.Quantity,0,
        RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSSalesShipUsingForecastLFLItemForZeroQuantity@68();
    VAR
      Item@1004 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      RequisitionWkshName@1009 : Record 245;
      RequisitionLine@1008 : Record 246;
      PlanningWorksheet@1007 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1002 : Boolean;
      ForecastDate@1001 : Date;
    BEGIN
      // Setup: Create Lot for Lot  Item.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0, Lot Accumulation Period - 0D.

      // Create Production Forecast with multiple Entries. Update Production Forecast Quantity to - 0.
      ForecastDate := GetRequiredDate(30,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateAndUpdateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,0,TRUE); // Boolean - TRUE, for multiple Forecast Entries.

      // Create Sales Order with Negative Quantity.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",-LibraryRandom.RandDec(10,2));  // Negative Random Quantity Required.

      // Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");
      UpdateQuantityOnSalesLine(SalesLine,LibraryRandom.RandDec(10,2));  // Update random quantity On Sales Line.

      // Exercise: Calculate Plan for Planning Worksheet after Sales Order Posting.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    PROCEDURE CalcPlanWithSalesForNewPlannedDeliveryDateLFLItem@57();
    VAR
      Item@1009 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      RequisitionLine@1000 : Record 246;
      ShipmentDate@1010 : Date;
      EndDate@1003 : Date;
    BEGIN
      // Setup: Create Lot for Lot  Item. Create Production Forecast with multiple Entries.
      Initialize;
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0, Lot Accumulation Period - 0D.

      // Create Sales Order. Update Shipment Date and Planned Delivery Date on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random quantity value not important.
      ShipmentDate := GetRequiredDate(2,1,WORKDATE,1);  // Shipment Date Relative to WORKDATE.
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);
      UpdatePlannedDeliveryDateOnSalesLine(SalesLine,ShipmentDate);

      // Exercise: Calculate Regenerative Plan for Planning Worksheet.
      EndDate := GetRequiredDate(10,20,SalesLine."Planned Delivery Date",1);  // End Date relative to Planned Delivery Date.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Verify: Verify Planned Delivery Date, Quantities and Reference Order Type on Planning Worksheet.
      VerifyPlannedDeliveryDate(Item."No.",SalesLine."Planned Delivery Date");
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,SalesLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithSalesPostForNewPlannedDeliveryDateUsingForecastLFLItem@43();
    VAR
      Item@1021 : Record 27;
      ProductionForecastEntry@1020 : ARRAY [3] OF Record 99000852;
      SalesHeader@1019 : Record 36;
      SalesLine@1018 : Record 37;
      ItemJournalLine@1000 : Record 83;
      RequisitionWkshName@1017 : Record 245;
      RequisitionLine@1016 : Record 246;
      PlanningWorksheet@1015 : TestPage 99000852;
      ShipmentDate@1014 : Date;
      ForecastDate@1013 : Date;
    BEGIN
      // Setup: Create Lot for Lot  Item. Create Production Forecast with multiple Entries.
      Initialize;
      CreateLotForLotItem(Item,0,'<0D>');  // Safety Stock - 0, Lot Accumulation Period - 0D.
      ForecastDate := GetRequiredDate(30,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.

      // Create Sales Order. Update Shipment Date and Planned Delivery Date on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random quantity value not important.
      ShipmentDate := GetRequiredDate(2,1,ForecastDate,1);  // Shipment Date Relative to Forecast Date.
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);
      UpdatePlannedDeliveryDateOnSalesLine(SalesLine,ShipmentDate);

      // Calculate Regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Update Item inventory.
      UpdateInventory(ItemJournalLine,Item."No.",WORKDATE,LibraryRandom.RandDec(10,2));  // Random quantity value not important.

      // Exercise: Calculate Plan for Planning Worksheet after Sales Order Posting.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Ship and Invoice - TRUE.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(
        RequisitionLine,SalesLine.Quantity - ItemJournalLine.Quantity,0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[1]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[2]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(
        RequisitionLine,ProductionForecastEntry[3]."Forecast Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE ReCalcPlanForUpdateSalesShipmentDateAndDeletePlanningLines@30();
    VAR
      TopItem@1000 : Record 27;
      MiddleItem@1001 : Record 27;
      BottomItem@1002 : Record 27;
      RequisitionLine@1005 : Record 246;
      ShipmentDate@1008 : Date;
      ShipmentDate2@1003 : Date;
    BEGIN
      // Setup: Plan and carry out the Demand. Change shipment date.
      CarryOutDemandAndUpdateSalesShipmentDate(TopItem,MiddleItem,BottomItem,ShipmentDate,ShipmentDate2);

      // Re-calculate.
      CalculateRegenerativePlanForPlanWorksheet(MiddleItem."No.",TopItem."No.");

      // Exercise: Delete the Requisition Worksheet lines.
      FilterOnRequisitionLines(RequisitionLine,MiddleItem."No.",TopItem."No.");
      RequisitionLine.DELETEALL(TRUE);

      // Verify: Reservation Entry.
      // Reservation lines existed with Source Type = Prod. Order Component (1 record) / Prod. Order Line (1 record).
      // No Tracking lines existed.
      VerifyReservationEntryOfReservationExist(MiddleItem."No.",TRUE,1);
      VerifyReservationEntryOfTrackingExist(MiddleItem."No.",ShipmentDate,FALSE);
      VerifyReservationEntryOfTrackingExist(MiddleItem."No.",ShipmentDate2,FALSE);

      // Verify: Firm Planned Prod. Order lines existed.
      VerifyFirmPlannedProdOrderExist(TopItem."No.",ShipmentDate,TRUE);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE ReCalcPlanForUpdateSalesShipmentDateAndCarryOut@127();
    VAR
      TopItem@1005 : Record 27;
      MiddleItem@1004 : Record 27;
      BottomItem@1003 : Record 27;
      ShipmentDate@1008 : Date;
      ShipmentDate2@1010 : Date;
    BEGIN
      // Setup: Plan and carry out the Demand. Change shipment date.
      CarryOutDemandAndUpdateSalesShipmentDate(TopItem,MiddleItem,BottomItem,ShipmentDate,ShipmentDate2);

      // Exercise: Re-calculate and Carry out.
      CalculateRegenerativePlanAndCarryOut(MiddleItem."No.",TopItem."No.",FALSE); // Default Accept Action Message is False for "Cancel" lines, True for "New" lines

      // Verify: Reservation Entry.
      // Reservation lines existed with Source Type = Prod. Order Component (2 records) / Prod. Order Line (2 records).
      // Tracking lines existed with Shipment Date = original Shipment Date.
      // Tracking lines existed with Shipment Date = Updated Shipment Date.
      VerifyReservationEntryOfReservationExist(MiddleItem."No.",TRUE,2);
      VerifyReservationEntryOfTrackingExist(TopItem."No.",ShipmentDate,TRUE);
      VerifyReservationEntryOfTrackingExist(TopItem."No.",ShipmentDate2,TRUE);

      // Verify: Firm Planned Prod. Order.
      // Firm Planned Prod. Order existed with Due Date = Original Shipment Date.
      // Firm Planned Prod. Order existed with Due Date = Updated Shipment Date.
      VerifyFirmPlannedProdOrderExist(TopItem."No.",ShipmentDate,TRUE);
      VerifyFirmPlannedProdOrderExist(TopItem."No.",ShipmentDate2,TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UpdatePromisedReceiptDateLateThanExpectedReceiptDate@79();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseLine@1006 : Record 39;
      TempOrderPromisingLine@1008 : TEMPORARY Record 99000880;
    BEGIN
      // Setup: Create Sales Order. Calculate Plan for Requisition Worksheet and Carry out Action Message.
      Initialize;
      CarryOutDemandInRequisitionWorksheet(Item,SalesHeader,SalesLine);

      // Exercise: Update the Promised Receipt Date in Purchase Order.
      LibraryVariableStorage.Enqueue(ModifiedPromisedReceiptDateMsg); // Required inside ConfirmHandler.
      LibraryVariableStorage.Enqueue(ReservationsExistMsg);
      SelectPurchaseLine(PurchaseLine,Item."No.");
      UpdatePromisedReceiptDateOnPurchaseHeader(PurchaseLine."Document No.",GetRequiredDate(10,0,WORKDATE,1));

      // Verify: Reservation Entry is removed.
      VerifyReservationEntry(Item."No.",FALSE,WORKDATE);

      // Exercise: Run Available to Promise in Sales Order.
      AvailabilityMgt.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcAvailableToPromise(TempOrderPromisingLine);

      // Verify: Verify the Earliest Shipment date in Order Promising Table.
      PurchaseLine.FINDFIRST;
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",PurchaseLine."Expected Receipt Date");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UpdatePromisedReceiptDateEarlyThanExpectedReceiptDate@135();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseLine@1006 : Record 39;
      TempOrderPromisingLine@1008 : TEMPORARY Record 99000880;
      ManufacturingSetup@1007 : Record 99000765;
      PromisedReceiptDate@1005 : Date;
    BEGIN
      // Setup: Create Sales Order. Calculate Plan for Requisition Worksheet and Carry out Action Message.
      Initialize;
      CarryOutDemandInRequisitionWorksheet(Item,SalesHeader,SalesLine);

      // Exercise: Update the Promised Receipt Date in Purchase Order.
      LibraryVariableStorage.Enqueue(ModifiedPromisedReceiptDateMsg); // Required inside ConfirmHandler.
      LibraryVariableStorage.Enqueue(ReservationsExistMsg);
      PromisedReceiptDate := GetRequiredDate(10,0,WORKDATE,-1);
      SelectPurchaseLine(PurchaseLine,Item."No.");
      UpdatePromisedReceiptDateOnPurchaseHeader(PurchaseLine."Document No.",PromisedReceiptDate);

      // Verify: Reservation Entry existed.
      ManufacturingSetup.GET;
      VerifyReservationEntry(Item."No.",TRUE,CALCDATE(ManufacturingSetup."Default Safety Lead Time",PromisedReceiptDate));

      // Exercise: Run Available to Promise in Sales Order.
      AvailabilityMgt.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcAvailableToPromise(TempOrderPromisingLine);

      // Verify: Verify the Earliest Shipment date in Order Promising Table.
      PurchaseLine.FINDFIRST;
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",SalesLine."Shipment Date");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UpdatePromisedReceiptDateInPurchaseOrderLine@139();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseLine@1006 : Record 39;
      PurchaseOrder@1005 : TestPage 50;
    BEGIN
      // Setup: Create Sales Order. Calculate Plan for Requisition Worksheet and Carry out Action Message.
      Initialize;
      CarryOutDemandInRequisitionWorksheet(Item,SalesHeader,SalesLine);

      // Exercise: Update the Promised Receipt Date in Purchase Order line.
      // Verify: Promised Receipt Date changed successfully if earlier than original date
      SelectPurchaseLine(PurchaseLine,Item."No.");
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseLine."Document No.");
      PurchaseOrder.PurchLines."Promised Receipt Date".SETVALUE(GetRequiredDate(10,0,WORKDATE,-1));

      // Exercise: Update the Promised Receipt Date in Purchase Order line.
      // Verify: Error message pops up if late than original date
      ASSERTERROR PurchaseOrder.PurchLines."Promised Receipt Date".SETVALUE(GetRequiredDate(20,0,WORKDATE,1));
      Assert.ExpectedError(DateConflictWithExistingReservationsErr);
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithOppositeTransferOrder@196();
    VAR
      Item@1012 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      TransferHeader@1002 : Record 5740;
      TransferLine@1005 : Record 5741;
      RequisitionLine@1004 : Record 246;
      Quantity@1000 : Decimal;
    BEGIN
      // [FEATURE] [Calculate Regeneration Plan]
      // [SCENARIO 363209] Can calculate regeneration plan for Item with opposite Transfer Order.

      // [GIVEN] Item with two SKUs.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Item.SETRANGE("No.",Item."No.");
      SelectTransferRoute(LocationYellow.Code,LocationRed.Code);

      // [GIVEN] SKU for location "A" with Purchase replenishment.
      CreateSKU(
        Item,LocationYellow.Code,StockkeepingUnit."Replenishment System"::Purchase,
        StockkeepingUnit."Reordering Policy"::"Lot-for-Lot",'',TRUE,
        '<' + FORMAT(LibraryRandom.RandIntInRange(7,14)) + 'D>',
        '<' + FORMAT(LibraryRandom.RandIntInRange(1,5)) + 'D>');

      // [GIVEN] SKU for location "B" with Transfer from "A" replenishment.
      CreateSKU(
        Item,LocationRed.Code,StockkeepingUnit."Replenishment System"::Transfer,
        StockkeepingUnit."Reordering Policy"::Order,LocationYellow.Code,FALSE,
        '','<' + FORMAT(LibraryRandom.RandIntInRange(1,5)) + 'W>');

      Quantity := LibraryRandom.RandIntInRange(5,10);

      // [GIVEN] Create Transfer from "B" to "A", with 1 day shipping time, no stock available.
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationRed.Code,LocationYellow.Code,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",Quantity);
      Item.SETFILTER("Location Filter",'%1|%2',LocationYellow.Code,LocationRed.Code);

      // [WHEN] Calculate Regeneration Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<-CY>',WORKDATE),CALCDATE('<+CY>',WORKDATE));

      // [THEN] Requisition Line created successfully.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,Quantity,0,RequisitionLine."Ref. Order Type"::Transfer);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,MessageHandler)]
    PROCEDURE TFS358446_RecalcReqPlanWithOrderToOrderBinding@137();
    VAR
      Item@1000 : Record 27;
      ReservEntry@1002 : Record 337;
    BEGIN
      InitializeOrderPlanRecalculdationScenario(Item,Item."Reordering Policy"::"Lot-for-Lot");
      RecalculateReqPlanAfterOrderPlan(DemandType::Sales,Item);

      Item.CALCFIELDS("Qty. on Sales Order");
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Reservation,Item."Qty. on Sales Order");
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,MessageHandler)]
    PROCEDURE TFS358867_CalcOrderPlanRecalculateReqPlanMaxQtyReplenishment@146();
    VAR
      Item@1000 : Record 27;
      ReservEntry@1002 : Record 337;
    BEGIN
      InitializeOrderPlanRecalculdationScenario(Item,Item."Reordering Policy"::"Maximum Qty.");
      RecalculateReqPlanAfterOrderPlan(DemandType::Sales,Item);

      Item.CALCFIELDS("Qty. on Sales Order");
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Reservation,Item."Qty. on Sales Order");
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Surplus,Item."Maximum Inventory");
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,MessageHandler)]
    PROCEDURE TFS358867_CalcOrderPlanRecalculateReqPlanForIncreasedSalesQuantity@152();
    VAR
      Item@1001 : Record 27;
      ReservEntry@1003 : Record 337;
    BEGIN
      InitializeOrderPlanRecalculdationScenario(Item,Item."Reordering Policy"::"Maximum Qty.");
      CalculateOrderPlanAndCarryOut(DemandType::Sales,Item."No.");

      RecalculateReqPlanForIncreasedSalesQty(Item);

      Item.CALCFIELDS("Qty. on Sales Order");
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Reservation,Item."Qty. on Sales Order");
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Surplus,Item."Maximum Inventory");
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,MessageHandler)]
    PROCEDURE TFS358867_CalculateReqPlanOnlyForIncreasedSalesQuantity@154();
    VAR
      Item@1001 : Record 27;
      ReservEntry@1000 : Record 337;
    BEGIN
      InitializeOrderPlanRecalculdationScenario(Item,Item."Reordering Policy"::"Maximum Qty.");

      RecalculateReqPlanForIncreasedSalesQty(Item);

      Item.CALCFIELDS("Qty. on Sales Order",Inventory);
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Tracking,Item."Qty. on Sales Order" - Item.Inventory);
      VerifyReservedQuantity(Item."No.",ReservEntry."Reservation Status"::Surplus,Item."Maximum Inventory");
    END;

    [Test]
    PROCEDURE TFS359949_CalcOrderPlanRecalculateReqPlanForProductionComponent@148();
    VAR
      CompItem@1001 : Record 27;
      ProdItem@1002 : Record 27;
      ReservEntry@1000 : Record 337;
      Qty@1003 : Integer;
    BEGIN
      // Setup: Create production order. Component's reordering policy is "Maximum quantity"
      Initialize;
      Qty := LibraryRandom.RandInt(100);
      CreateItemWithReorderPoint(
        CompItem,CompItem."Reordering Policy"::"Maximum Qty.",CompItem."Replenishment System"::Purchase,Qty,Qty + 1);
      LibraryPatterns.MAKEItemSimple(ProdItem,ProdItem."Costing Method"::FIFO,0);

      CreateReleasedProdOrder(ProdItem,CompItem,Qty);

      // Exercise: Recalculate requisition plan for component item
      RecalculateReqPlanAfterOrderPlan(DemandType::Production,CompItem);

      // Verify: Demand from production order is reserved, safety stock quantity purchase is planned
      CompItem.CALCFIELDS("Qty. on Component Lines");
      VerifyReservedQuantity(CompItem."No.",ReservEntry."Reservation Status"::Reservation,CompItem."Qty. on Component Lines");
      VerifyReservedQuantity(CompItem."No.",ReservEntry."Reservation Status"::Surplus,CompItem."Maximum Inventory");
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE StartingDateForRoutingHeaderWithNoLines@151();
    VAR
      ReqLine@1000 : Record 246;
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      // [FEATURE] [Requisition Line] [Routing]
      // [SCENARIO 375131] "Starting Date" field of "Requisition Line" table should be updated if appropriate Routing Header has no lines

      // [GIVEN] Routing Header "R" without Routing Lines
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // [GIVEN] Requisition Line for "R" with "Ending Date" = "X", "Starting Date" = "0D"
      MockRequisitionLine(ReqLine,RoutingHeader."No.",0D,TODAY);

      // [WHEN] Run CalcStartingDate
      ReqLine.CalcStartingDate('');

      // [THEN] "Starting Date" = "X"
      ReqLine.TESTFIELD("Starting Date",ReqLine."Ending Date");
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE EndingDateForRoutingHeaderWithNoLines@187();
    VAR
      ReqLine@1000 : Record 246;
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      // [FEATURE] [Requisition Line] [Routing]
      // [SCENARIO 375131] "Ending Date" field of "Requisition Line" table should be updated if appropriate Routing Header has no lines

      // [GIVEN] Routing Header "R" without Routing Lines
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // [GIVEN] Requisition Line for "R" with "Starting Date" = "X", "Ending Date" = "0D"
      MockRequisitionLine(ReqLine,RoutingHeader."No.",TODAY,0D);

      // [WHEN] Run CalcEndingDate
      ReqLine.CalcEndingDate('');

      // [THEN] "Ending Date" = "X"
      ReqLine.TESTFIELD("Ending Date",ReqLine."Starting Date");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE SurplusEntryOnShipmentDateUpdateProduction@164();
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1005 : Record 5700;
      ItemJournalLine@1007 : Record 83;
      SalesHeader@1006 : Record 36;
      SalesLine@1002 : Record 37;
      ProductionOrder@1008 : Record 5405;
      ReqWkshTemplate@1003 : Record 244;
      InventoryPostingSetup@1001 : Record 5813;
      OrderMultipleQty@1004 : Decimal;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Item Tracking] [Manufacturing]
      // [SCENARIO 376248] Surplus Reservation Entry exists after recalculation of Production Item supply and surplus exists because of "Order Multiple" rounding.

      Initialize;

      // [GIVEN] Production Item with Order Multiple = "X", "Order Tracking Policy" = "Tracking Only", available stock = "S".
      OrderMultipleQty := LibraryRandom.RandDecInRange(10,50,1);
      WITH Item DO BEGIN
        LibraryVariableStorage.Enqueue(WillNotAffectExistingMsg);
        CreateItem(Item,"Reordering Policy"::"Lot-for-Lot","Replenishment System"::"Prod. Order");
        VALIDATE("Minimum Order Quantity",OrderMultipleQty);
        VALIDATE("Order Multiple",OrderMultipleQty);
        VALIDATE("Order Tracking Policy","Order Tracking Policy"::"Tracking Only");
        MODIFY(TRUE);
        LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(
          StockkeepingUnit,LocationRed.Code,"No.",'');
        LibraryInventory.CreateInventoryPostingSetup(InventoryPostingSetup,LocationRed.Code,"Inventory Posting Group");
        LibraryInventory.UpdateInventoryPostingSetup(LocationRed);
        UpdateInventoryOnLocation(
          ItemJournalLine,"No.",LocationRed.Code,WORKDATE,LibraryRandom.RandDecInRange(100,200,2));
      END;

      // [GIVEN] Create Sales Order of Quantity = "S" + "X" / 2, delivery date = WORKDATE + 2 weeks. Calculate regeneration plan and carry out.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",ItemJournalLine.Quantity + OrderMultipleQty / 2);
      SalesLine.VALIDATE("Location Code",LocationRed.Code);
      SalesLine.MODIFY(TRUE);
      SalesHeader.VALIDATE("Requested Delivery Date",CALCDATE('<+2W>',WORKDATE));
      SalesHeader.MODIFY(TRUE);
      CalculateRegenerativePlanAndCarryOut(Item."No.",Item."No.",TRUE);

      // [GIVEN] Open created Production Order, set "Ending Date" to WORKDATE + 4 weeks.
      WITH ProductionOrder DO BEGIN
        SETRANGE("Source Type","Source Type"::Item);
        SETRANGE("Source No.",Item."No.");
        FINDFIRST;
        VALIDATE("Ending Date",CALCDATE('<+4W>',WORKDATE));
        MODIFY(TRUE);
      END;

      // [WHEN] Calculate regeneration plan and carry out.
      CalcRegenPlanAcceptAndCarryOut(
        FindRequisitionWkshName(ReqWkshTemplate.Type::Planning),Item."No.");

      // [THEN] Surplus Reservation Entry is present of Quantity = "X" / 2.
      VerifySurplusReservationEntry(Item."No.",OrderMultipleQty / 2);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanReqWkshRequestPageHandler)]
    PROCEDURE CalculatePlanFromReqWrkshtWithRespectPlanningParamsForCompItemSeparetelyForTransferAndPurchase@76();
    VAR
      MnfgLocation@1004 : Record 14;
      PurchaseLocation@1006 : Record 14;
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      StockkeepingUnit@1003 : Record 5700;
      RequisitionLine@1007 : Record 246;
      DueDate@1015 : Date;
      ReorderQty@1009 : Decimal;
      SafetyStockQty@1010 : Decimal;
      OrderQty@1013 : Decimal;
      i@1014 : Integer;
    BEGIN
      // [FEATURE] [SKU] [Planning Parameters]
      // [SCENARIO 202033] Calculating plan from requisition worksheet with "Respect Planning Parameters" for component item separetely for transfer and purchase replenishment systems.
      Initialize;

      // [GIVEN] Manufacturing Location "ML" and Purchase Location "PL"
      CreateLocationsChain(PurchaseLocation,MnfgLocation);

      // [GIVEN] Parent Item "PI" with Child Item "CI" as BOM Component
      CreateItemAndBOMWithComponentItem(ParentItem,ChildItem);

      // [GIVEN] 3 Released Production Orders at "ML" each with Quantity = "POQ" and different due dates
      OrderQty := LibraryRandom.RandIntInRange(5000,10000);
      DueDate := LibraryRandom.RandDateFromInRange(WORKDATE,5,10);
      FOR i := 1 TO 3 DO BEGIN
        CreateReleasedProductionOrderAtLocationWithDueDateAndRefresh(ParentItem."No.",OrderQty,DueDate,MnfgLocation.Code);
        DueDate := LibraryRandom.RandDateFromInRange(DueDate,5,10);
      END;

      // [GIVEN] SKU for "CI" at "PL" with "Replenishment System" = Purchase, "Reordering Policy" = "Fixed Reorder Qty.", "Reorder Quantity" "RQ" = 4 * "POQ", "Safety Stock Quantity" "SSQ" = 5 * "POQ"
      ReorderQty := OrderQty * 4;
      SafetyStockQty := OrderQty * 5;
      CreateSKUForLocationWithReplenishmentSystemAndReorderingPolicy(
        ChildItem."No.",PurchaseLocation.Code,StockkeepingUnit."Replenishment System"::Purchase,'',
        StockkeepingUnit."Reordering Policy"::"Fixed Reorder Qty.",ReorderQty,SafetyStockQty);

      // [GIVEN] SKU for "CI" at "ML" with "Replenishment System" = Transfer, "Transfer-from Code" = "PL", "Reordering Policy" = Order
      CreateSKUForLocationWithReplenishmentSystemAndReorderingPolicy(
        ChildItem."No.",MnfgLocation.Code,StockkeepingUnit."Replenishment System"::Transfer,PurchaseLocation.Code,
        StockkeepingUnit."Reordering Policy"::Order,0,0);

      // [GIVEN] Calculate Plan from Requisition Worksheet for "CI" from WORKDATE - 1 (at yerstaday) at location "ML", "Respect Planning Parameters" = TRUE
      ReqWorksheetCalculatePlan(ChildItem."No.",MnfgLocation.Code,WORKDATE - 1,DueDate,TRUE);

      // [WHEN] Calculate Plan from Requisition Worksheet for "CI" from WORKDATE - 1 (at yerstaday) at location "PL", "Respect Planning Parameters" = TRUE
      ReqWorksheetCalculatePlan(ChildItem."No.",PurchaseLocation.Code,WORKDATE - 1,DueDate,TRUE);

      FilterRequisitionLineByLocationAndPurchaseItem(RequisitionLine,PurchaseLocation.Code,ChildItem."No.");
      // [THEN] Two Requisition Lines at Location "PL" for Item "CI" with "Replenishment System" = Purchase are created
      Assert.RecordCount(RequisitionLine,2);

      // [THEN] One of them has Quantity = "RQ", second of them has Quantity = 2 * "RQ"
      RequisitionLine.SETRANGE(Quantity,ReorderQty);
      Assert.RecordCount(RequisitionLine,1);

      RequisitionLine.SETRANGE(Quantity,ReorderQty * 2);
      Assert.RecordCount(RequisitionLine,1);
    END;

    [Test]
    PROCEDURE CalculatePlanDoesNotIncludeDropShipmentSalesOrders@171();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // [FEATURE] [Order Planning] [Sales] [Drop Shipment]
      // [SCENARIO 214007] Sales orders for drop shipment should not be included in the list of demands when Calculate Plan is run on Order Planning page.
      Initialize;

      // [GIVEN] Sales Order for drop shipment of item "I".
      CreateSalesOrder(SalesHeader,SalesLine,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Drop Shipment",TRUE);
      SalesLine.MODIFY(TRUE);

      // [WHEN] Calculate plan for sales demand.
      CalculateOrderPlan(RequisitionLine,DemandType::Sales);

      // [THEN] Requisition line for item "I" is not created.
      FilterOnRequisitionLine(RequisitionLine,SalesLine."No.");
      Assert.RecordIsEmpty(RequisitionLine);
    END;

    LOCAL PROCEDURE Initialize@5();
    VAR
      ReservationEntry@1002 : Record 337;
      RequisitionLine@1001 : Record 246;
      RequisitionWkshName@1003 : Record 245;
    BEGIN
      ReservationEntry.DELETEALL;
      RequisitionLine.DELETEALL;
      RequisitionWkshName.DELETEALL;
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      NoSeriesSetup;
      ItemJournalSetup;
      CreateLocationSetup;
      ConsumptionJournalSetup;

      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitializeOrderPlanRecalculdationScenario@181(VAR Item@1001 : Record 27;ReorderingPolicy@1003 : Option);
    VAR
      Qty@1002 : Decimal;
    BEGIN
      Initialize;
      Qty := LibraryRandom.RandIntInRange(10,20);
      CreateItemWithReorderPoint(Item,ReorderingPolicy,Item."Replenishment System"::Purchase,Qty,Qty + 1);
      PostReceiptAndAutoReserveForSale(Item,Qty);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Blanket Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@54();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBlankOverflowLevelAsUseItemValues@177();
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      WITH ManufacturingSetup DO BEGIN
        GET;
        VALIDATE("Blank Overflow Level","Blank Overflow Level"::"Use Item/SKU Values Only");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AutoReserveForSalesLine@165(SalesLine@1000 : Record 37);
    VAR
      Reservation@1001 : Page 498;
    BEGIN
      LibraryVariableStorage.Enqueue(AutoReservNotPossibleMsg);
      Reservation.SetSalesLine(SalesLine);
      Reservation.RUNMODAL;
    END;

    LOCAL PROCEDURE CalculateOrderPlan@163(VAR ReqLine@1001 : Record 246;FilterOnDemandType@1002 : Option);
    VAR
      OrderPlanningMgt@1000 : Codeunit 5522;
    BEGIN
      CASE FilterOnDemandType OF
        DemandType::Production:
          OrderPlanningMgt.SetProdOrder;
        DemandType::Sales:
          OrderPlanningMgt.SetSalesOrder;
        DemandType::Service:
          OrderPlanningMgt.SetServOrder;
        DemandType::Jobs:
          OrderPlanningMgt.SetJobOrder;
        DemandType::Assembly:
          OrderPlanningMgt.SetAsmOrder;
      END;

      OrderPlanningMgt.GetOrdersToPlan(ReqLine);
    END;

    LOCAL PROCEDURE CarryOutActionPlan@158(VAR ReqLine@1000 : Record 246);
    VAR
      MfgUserTemplate@1001 : Record 5525;
      CarryOutActionMsgPlan@1002 : Report 99001020;
    BEGIN
      MfgUserTemplate.INIT;
      MfgUserTemplate.VALIDATE("Create Purchase Order",MfgUserTemplate."Create Purchase Order"::"Make Purch. Orders");

      ReqLine.SETRECFILTER;
      CarryOutActionMsgPlan.USEREQUESTPAGE(FALSE);
      CarryOutActionMsgPlan.SetDemandOrder(ReqLine,MfgUserTemplate);
      CarryOutActionMsgPlan.RUNMODAL;
    END;

    LOCAL PROCEDURE CreateLocationSetup@65();
    BEGIN
      LibraryWarehouse.CreateLocation(LocationYellow);
      LibraryWarehouse.CreateLocation(LocationRed);
      LibraryWarehouse.CreateLocation(LocationInTransit);
      LocationInTransit.VALIDATE("Use As In-Transit",TRUE);
      LocationInTransit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationsChain@170(VAR FromLocation@1007 : Record 14;VAR ToLocation@1005 : Record 14);
    VAR
      TransitLocation@1000 : Record 14;
      TransferRoute@1002 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocation(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(TransitLocation);
      LibraryInventory.CreateTransferRoute(TransferRoute,FromLocation.Code,ToLocation.Code);
      TransferRoute.VALIDATE("In-Transit Code",TransitLocation.Code);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      CLEAR(ConsumptionItemJournalTemplate);
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      CLEAR(ConsumptionItemJournalBatch);
      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItem@27(VAR Item@1000 : Record 27;ReorderingPolicy@1002 : Option;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSKU@203(Item@1000 : Record 27;LocationCode@1001 : Code[10];RepSystem@1002 : Option;ReordPolicy@1003 : Option;FromLocation@1004 : Code[10];IncludeInventory@1005 : Boolean;ReschedulingPeriod@1006 : Text;SafetyLeadTime@1009 : Text);
    VAR
      StockkeepingUnit@1008 : Record 5700;
      SKUCreationMethod@1007 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE);
      Item.SETRANGE("Location Filter");
      WITH StockkeepingUnit DO BEGIN
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Location Code",LocationCode);
        FINDFIRST;
        VALIDATE("Replenishment System",RepSystem);
        EVALUATE(
          "Lead Time Calculation",
          '<' + FORMAT(LibraryRandom.RandIntInRange(8,10)) + 'W>');
        VALIDATE("Flushing Method","Flushing Method"::Backward);
        VALIDATE("Reordering Policy",ReordPolicy);
        VALIDATE("Transfer-from Code",FromLocation);
        VALIDATE("Include Inventory",IncludeInventory);
        EVALUATE("Rescheduling Period",ReschedulingPeriod);
        EVALUATE("Safety Lead Time",SafetyLeadTime);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSKUForLocationWithReplenishmentSystemAndReorderingPolicy@206(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];ReplenishmentSystem@1002 : Option;TransferFromCode@1004 : Code[10];ReorderingPolicy@1003 : Option;ReorderQuantity@1005 : Decimal;SafetyStockQuantity@1006 : Decimal);
    VAR
      StockkeepingUnit@1008 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFromCode);
      StockkeepingUnit.VALIDATE("Reordering Policy",ReorderingPolicy);
      StockkeepingUnit.VALIDATE("Reorder Quantity",ReorderQuantity);
      StockkeepingUnit.VALIDATE("Safety Stock Quantity",SafetyStockQuantity);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithReorderPoint@166(VAR Item@1004 : Record 27;ReorderingPolicy@1003 : Option;ReplenishmentSystem@1002 : Option;ReorderPoint@1001 : Decimal;MaximumInventory@1000 : Decimal);
    BEGIN
      CreateItem(Item,ReorderingPolicy,ReplenishmentSystem);
      Item.VALIDATE("Reorder Point",ReorderPoint);
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItem@35(VAR Item@1000 : Record 27;SafetyStockQuantity@1003 : Integer;LotAccumulationPeriod@1002 : Text[30]);
    VAR
      LotAccumulationPeriod2@1001 : DateFormula;
    BEGIN
      // Create Lot-for-Lot Item.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Safety Stock Quantity",SafetyStockQuantity);
      EVALUATE(LotAccumulationPeriod2,LotAccumulationPeriod);
      Item.VALIDATE("Lot Accumulation Period",LotAccumulationPeriod2);
      Item.VALIDATE("Include Inventory",TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFixedReorderQtyItem@11(VAR Item@1001 : Record 27);
    BEGIN
      // Create Fixed Reorder Quantity Item.
      CreateItem(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Safety Stock Quantity",LibraryRandom.RandInt(10));
      Item.VALIDATE("Reorder Point",LibraryRandom.RandInt(10) + 10);  // Reorder Point more than Safety Stock Quantity or Reorder Quantity.
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandInt(5));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAndSetFRQ@173(VAR Item@1001 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        CreateItem(Item,"Reordering Policy"::"Fixed Reorder Qty.","Replenishment System"::Purchase);
        VALIDATE("Safety Stock Quantity",LibraryRandom.RandInt(30));
        VALIDATE("Reorder Point",LibraryRandom.RandInt(100));
        VALIDATE("Reorder Quantity",LibraryRandom.RandInt(50) + "Reorder Point");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateOrderItem@49(VAR Item@1000 : Record 27;ProductionBOMNo@1002 : Code[20];ReplenishmentSystem@1001 : Option);
    BEGIN
      // Create Order Item.
      CreateItem(Item,Item."Reordering Policy"::Order,ReplenishmentSystem);
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateManufacturingTreeItem@81(VAR TopItem@1002 : Record 27;VAR MiddleItem@1001 : Record 27;VAR BottomItem@1000 : Record 27);
    VAR
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBOMHeader2@1003 : Record 99000771;
    BEGIN
      CreateItem(BottomItem,BottomItem."Reordering Policy"::" ",BottomItem."Replenishment System"::Purchase);
      BottomItem.VALIDATE("Manufacturing Policy",MiddleItem."Manufacturing Policy"::"Make-to-Stock");
      BottomItem.MODIFY(TRUE);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,BottomItem."No.");

      CreateItem(MiddleItem,MiddleItem."Reordering Policy"::Order,MiddleItem."Replenishment System"::"Prod. Order");
      MiddleItem.VALIDATE("Manufacturing Policy",MiddleItem."Manufacturing Policy"::"Make-to-Order");
      MiddleItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      MiddleItem.MODIFY(TRUE);

      CreateAndCertifyProductionBOM(ProductionBOMHeader2,MiddleItem."No.");
      CreateItem(TopItem,TopItem."Reordering Policy"::"Lot-for-Lot",TopItem."Replenishment System"::"Prod. Order");
      TopItem.VALIDATE("Manufacturing Policy",TopItem."Manufacturing Policy"::"Make-to-Order");
      TopItem.VALIDATE("Production BOM No.",ProductionBOMHeader2."No.");
      TopItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAndBOMWithComponentItem@199(VAR ParentItem@1002 : Record 27;VAR ChildItem@1001 : Record 27);
    VAR
      ProductionBOMHeader@1004 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItem(ChildItem);
      LibraryInventory.CreateItem(ParentItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionForecastSetup@120(VAR ProductionForecastEntry@1005 : ARRAY [3] OF Record 99000852;ItemNo@1002 : Code[20];ForecastDate@1001 : Date;MultipleLine@1000 : Boolean);
    VAR
      ProductionForecastName@1003 : Record 99000851;
    BEGIN
      // Using Random Value and Dates based on WORKDATE.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      UpdateForecastOnManufacturingSetup(ProductionForecastName.Name);
      CreateAndUpdateProductionForecast(
        ProductionForecastEntry[1],ProductionForecastName.Name,ForecastDate,ItemNo,LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
      IF MultipleLine THEN BEGIN
        CreateAndUpdateProductionForecast(
          ProductionForecastEntry[2],ProductionForecastName.Name,GetRandomDateUsingWorkDate(1),ItemNo,
          LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
        CreateAndUpdateProductionForecast(
          ProductionForecastEntry[3],ProductionForecastName.Name,GetRandomDateUsingWorkDate(2),ItemNo,
          LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
      END;
    END;

    LOCAL PROCEDURE CreateReleasedProdOrder@189(ProdItem@1002 : Record 27;CompItem@1003 : Record 27;Qty@1004 : Decimal);
    VAR
      ProdBOMHeader@1000 : Record 99000771;
      ProdOrder@1005 : Record 5405;
    BEGIN
      LibraryPatterns.MAKEProductionBOM(ProdBOMHeader,ProdItem,CompItem,1,'');
      LibraryPatterns.MAKEProductionOrder(ProdOrder,ProdOrder.Status::Released,ProdItem,'','',Qty,WORKDATE);
    END;

    LOCAL PROCEDURE UpdateForecastOnManufacturingSetup@116(CurrentProductionForecast@1001 : Code[10]);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",CurrentProductionForecast);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecast@119(VAR ProductionForecastEntry@1000 : Record 99000852;Name@1003 : Code[10];Date@1001 : Date;ItemNo@1004 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionForecastEntry(ProductionForecastEntry,Name,ItemNo,'',Date,FALSE);
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",Quantity);
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBlanketOrder@51(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1003 : Record 37;ItemNo@1001 : Code[20];Quantity@1000 : Decimal;ShipmentDate@1004 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",'');
      UpdateShipmentDateOnSalesHeader(SalesHeader,ShipmentDate);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderFromBlanketOrder@50(VAR SalesHeader@1000 : Record 36;VAR SalesOrderHeader@1004 : Record 36;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
      BlanketSalesOrderToOrder@1005 : Codeunit 87;
    BEGIN
      CreateBlanketOrder(SalesHeader,SalesLine,ItemNo,Quantity,WORKDATE);
      BlanketSalesOrderToOrder.RUN(SalesHeader);
      BlanketSalesOrderToOrder.GetSalesOrderHeader(SalesOrderHeader);
    END;

    LOCAL PROCEDURE UpdateInventory@2(VAR ItemJournalLine@1006 : Record 83;ItemNo@1002 : Code[20];PostingDate@1001 : Date;Quantity@1003 : Decimal);
    BEGIN
      UpdateInventoryOnLocation(ItemJournalLine,ItemNo,'',PostingDate,Quantity);
    END;

    LOCAL PROCEDURE UpdateInventoryOnLocation@160(VAR ItemJournalLine@1006 : Record 83;ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];PostingDate@1001 : Date;Quantity@1003 : Decimal);
    BEGIN
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateSalesOrderFromBlanketOrderWithNewQuantityToShip@84(VAR SalesHeader@1000 : Record 36;VAR SalesOrderHeader@1005 : Record 36;VAR SalesLine@1006 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;ShipmentDate@1004 : Date);
    VAR
      BlanketSalesOrderToOrder@1001 : Codeunit 87;
    BEGIN
      CreateBlanketOrder(SalesHeader,SalesLine,ItemNo,Quantity,ShipmentDate);
      UpdateQuantityToShipOnSalesLine(SalesLine,Quantity - LibraryRandom.RandInt(5));  // Quantity to Ship less than Sales Line Quantity.
      BlanketSalesOrderToOrder.RUN(SalesHeader);
      BlanketSalesOrderToOrder.GetSalesOrderHeader(SalesOrderHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrderTwoLinesWithBlanketOrderNo@56(VAR SalesHeader@1000 : Record 36;DocumentNo@1005 : Code[20];ItemNo@1001 : Code[20];Quantity@1004 : Integer);
    VAR
      SalesLine@1003 : Record 37;
      SalesLine2@1002 : Record 37;
    BEGIN
      // Create Sales Order with multiple Lines and Update Blanket Order No.
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity);
      UpdateBlanketOrderNoOnSalesLine(SalesLine,DocumentNo);
      LibrarySales.CreateSalesLine(
        SalesLine2,SalesHeader,SalesLine2.Type::Item,ItemNo,SalesLine.Quantity - LibraryRandom.RandInt(5));  // Quantity less than first Sales Line of Sales Order.
      UpdateBlanketOrderNoOnSalesLine(SalesLine2,DocumentNo);
    END;

    LOCAL PROCEDURE CreateSalesOrder@8(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1007 : Record 37;ItemNo@1003 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithAutoReservation@200(Item@1003 : Record 27;Quantity@1002 : Integer);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibraryPatterns.MAKESalesOrder(
        SalesHeader,SalesLine,Item,'','',Quantity * LibraryRandom.RandDecInDecimalRange(1.5,2,2),WORKDATE,Item."Unit Cost");
      AutoReserveForSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@12(VAR PurchaseHeader@1003 : Record 38;ItemNo@1002 : Code[20];ExpectedReceiptDate@1006 : Date;Quantity@1005 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@53(VAR RequisitionWkshName@1001 : Record 245);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::Planning);
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@98(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1001 : Code[20]);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockRequisitionLine@174(VAR ReqLine@1000 : Record 246;RoutingHeaderNo@1001 : Code[20];StartingDate@1002 : Date;EndingDate@1003 : Date);
    BEGIN
      WITH ReqLine DO BEGIN
        "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
        "Routing No." := RoutingHeaderNo;
        "Starting Date" := StartingDate;
        "Ending Date" := EndingDate;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CalcPlanAndCarryOutActionMessageWithPlanningFlexibility@94(VAR RequisitionWkshName@1000 : Record 245;VAR Item@1004 : Record 27;PlanningFlexibility@1002 : Option;EndingDate@1003 : Date);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,EndingDate);
      SelectRequisitionLine(RequisitionLine,Item."No.");
      UpdatePlanningFlexiblityOnRequisitionWorksheet(RequisitionLine,Item."No.",PlanningFlexibility);
      AcceptActionMessage(Item."No.");
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshPage@99(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10];ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    BEGIN
      // Regenerative Planning using Page required where Forecast is used.
      LibraryVariableStorage.Enqueue(ItemNo);  // Set Global Value.
      LibraryVariableStorage.Enqueue(ItemNo2);  // Set Global Value.
      COMMIT;  // Required for Test.
      OpenPlanningWorksheetPage(PlanningWorksheet,Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE ReqWorksheetCalculatePlan@219(ItemFilter@1003 : Text;LocationFilter@1002 : Text;FromDate@1001 : Date;ToDate@1005 : Date;RespectPlanningParm@1006 : Boolean);
    VAR
      ReqWkshTemplate@1004 : Record 244;
      RequisitionWkshName@1007 : Record 245;
      ReqWorksheet@1000 : TestPage 291;
    BEGIN
      LibraryVariableStorage.Enqueue(FromDate);
      LibraryVariableStorage.Enqueue(ToDate);
      LibraryVariableStorage.Enqueue(ItemFilter);
      LibraryVariableStorage.Enqueue(LocationFilter);
      LibraryVariableStorage.Enqueue(RespectPlanningParm);
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      COMMIT;
      OpenRequisitionWorksheetPage(ReqWorksheet,FindRequisitionWkshName(ReqWkshTemplate.Type::"Req."));
      ReqWorksheet.CalculatePlan.INVOKE; // Open report on Handler CalculatePlanReqWkshWithPeriodItemNoLocationParamsRequestPageHandler
      ReqWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithMultipleLinesAndRequiredShipment@103(VAR SalesLine@1001 : Record 37;VAR SalesLine2@1002 : Record 37;ItemNo@1003 : Code[20];SalesLineQuantity@1006 : Integer;SalesLineQuantity2@1007 : Integer;ShipmentDate@1004 : Date;ShipmentDate2@1005 : Date);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,SalesLineQuantity);
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);
      LibrarySales.CreateSalesLine(SalesLine2,SalesHeader,SalesLine2.Type::Item,ItemNo,SalesLineQuantity2);
      UpdateShipmentDateOnSalesLine(SalesLine2,ShipmentDate2);
    END;

    LOCAL PROCEDURE CarryOutDemandInRequisitionWorksheet@143(VAR Item@1002 : Record 27;VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37);
    VAR
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Create Sales Order.
      CreateItem(Item,Item."Reordering Policy"::Order,Item."Replenishment System"::Purchase);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandInt(20));

      // Calculate Plan for Requisition Worksheet with the required Start and End dates, Carry out Action Message.
      LibraryVariableStorage.Enqueue(NewWorksheetMessageTxt);  // Required inside MessageHandler.
      CalcPlanAndCarryOutActionMessageWithPlanningFlexibility(
        RequisitionWkshName,Item,RequisitionLine."Planning Flexibility"::Unlimited,CALCDATE('<+2M>',WORKDATE));
    END;

    LOCAL PROCEDURE CarryOutDemandAndUpdateSalesShipmentDate@141(VAR TopItem@1004 : Record 27;VAR MiddleItem@1003 : Record 27;VAR BottomItem@1001 : Record 27;VAR ShipmentDate@1005 : Date;VAR ShipmentDate2@1007 : Date);
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      Initialize;

      // Setup: Create the manufacturing tree. Create demand. Plan and carry out the Demand.
      CreateManufacturingTreeItem(TopItem,MiddleItem,BottomItem);
      CreateSalesOrder(SalesHeader,SalesLine,TopItem."No.",LibraryRandom.RandInt(20));
      ShipmentDate := SalesLine."Shipment Date";
      CalculateRegenerativePlanAndCarryOut(MiddleItem."No.",TopItem."No.",TRUE); // Default Accept Action Message is False for 2 "New" lines

      // Change shipment date, replan and carry out.
      UpdateShipmentDateOnSalesLine(SalesLine,SalesLine."Shipment Date" + LibraryRandom.RandInt(5));
      ShipmentDate2 := SalesLine."Shipment Date";
    END;

    LOCAL PROCEDURE RecalculateReqPlanAfterOrderPlan@167(FilterOnDemandType@1002 : Option;VAR Item@1001 : Record 27);
    BEGIN
      CalculateOrderPlanAndCarryOut(FilterOnDemandType,Item."No.");
      CalculateReqWorksheetPlanForItem(Item);
    END;

    LOCAL PROCEDURE RecalculateReqPlanForIncreasedSalesQty@185(VAR Item@1000 : Record 27);
    BEGIN
      IncreaseQuantityOnSalesLine(Item."No.");
      CalculateReqWorksheetPlanForItem(Item);
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesLine@21(VAR SalesLine@1000 : Record 37;ShipmentDate@1001 : Date);
    BEGIN
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectTransferRoute@95(TransferFrom@1001 : Code[10];TransferTo@1000 : Code[10]);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      TransferRoute.SETRANGE("Transfer-from Code",TransferFrom);
      TransferRoute.SETRANGE("Transfer-to Code",TransferTo);

      // If Transfer Not Found then Create it.
      IF NOT TransferRoute.FINDFIRST THEN
        LibraryWarehouse.CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithTransferRoute@60(VAR TransferLine@1000 : Record 5741;ItemNo@1001 : Code[20];TransferFrom@1005 : Code[10];TransferTo@1006 : Code[10];Quantity@1002 : Integer);
    VAR
      TransferHeader@1004 : Record 5740;
    BEGIN
      SelectTransferRoute(TransferFrom,TransferTo);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferFrom,TransferTo,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE IncreaseQuantityOnSalesLine@155(ItemNo@1001 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("No.",ItemNo);
        FINDFIRST;
        VALIDATE(Quantity,Quantity * LibraryRandom.RandDecInRange(2,10,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostReceiptAndAutoReserveForSale@159(Item@1000 : Record 27;Quantity@1001 : Decimal);
    BEGIN
      PostPurchaseOrderReceipt(Item,Quantity);
      CreateSalesOrderWithAutoReservation(Item,Quantity);
    END;

    LOCAL PROCEDURE SelectPurchaseLine@15(VAR PurchaseLine@1000 : Record 39;ItemNo@1003 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterOnRequisitionLine@132(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
    END;

    LOCAL PROCEDURE FilterOnRequisitionLines@134(VAR RequisitionLine@1000 : Record 246;No@1002 : Code[20];No2@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No,No2);
    END;

    LOCAL PROCEDURE FilterRequisitionLineByLocationAndPurchaseItem@180(VAR RequisitionLine@1000 : Record 246;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("Replenishment System",RequisitionLine."Replenishment System"::Purchase);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
    END;

    LOCAL PROCEDURE FindRequisitionLineForItem@153(VAR ReqLine@1000 : Record 246;ItemNo@1002 : Code[20]);
    BEGIN
      WITH ReqLine DO BEGIN
        FilterOnRequisitionLine(ReqLine,ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE SelectRequisitionLine@64(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      FilterOnRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.FINDSET;
    END;

    LOCAL PROCEDURE SelectRequisitionLines@140(VAR RequisitionLine@1000 : Record 246;ItemNo@1002 : Code[20];ItemNo2@1001 : Code[20]);
    BEGIN
      FilterOnRequisitionLines(RequisitionLine,ItemNo,ItemNo2);
      RequisitionLine.FINDSET;
    END;

    LOCAL PROCEDURE SelectSalesLineFromSalesDocument@47(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectProductionOrder@52(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Status@1002 : Option);
    BEGIN
      ProductionOrder.SETRANGE("Source No.",ItemNo);
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@63(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE SetSupplyFromVendorOnRequisitionLine@149(VAR ReqLine@1001 : Record 246);
    BEGIN
      WITH ReqLine DO BEGIN
        VALIDATE("Supply From",LibraryPurchase.CreateVendorNo);
        VALIDATE(Reserve,TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AcceptActionMessage@14(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AcceptActionMessages@136(ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLines(RequisitionLine,ItemNo,ItemNo2);

      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePlanningFlexiblityOnRequisitionWorksheet@80(VAR RequisitionLine@1000 : Record 246;ItemNo@1002 : Code[20];PlanningFlexibility@1001 : Option);
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      REPEAT
        RequisitionLine.VALIDATE("Planning Flexibility",PlanningFlexibility);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateLeadTimeCalculationForItem@29(VAR Item@1001 : Record 27;LeadTimeCalculation@1002 : Text[30]);
    VAR
      LeadTimeCalculation2@1000 : DateFormula;
    BEGIN
      EVALUATE(LeadTimeCalculation2,LeadTimeCalculation);
      Item.VALIDATE("Lead Time Calculation",LeadTimeCalculation2);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLine@25(VAR SalesLine@1000 : Record 37;Quantity@1001 : Decimal);
    BEGIN
      SalesLine.FIND;
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBlanketOrderNoOnSalesLine@61(VAR SalesLine@1000 : Record 37;BlanketOrderNo@1001 : Code[20]);
    BEGIN
      SalesLine.VALIDATE("Blanket Order No.",BlanketOrderNo);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@71(VAR OldStockoutWarning@1000 : Boolean;VAR OldCreditWarnings@1002 : Option;NewStockoutWarning@1004 : Boolean;NewCreditWarnings@1005 : Option);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldStockoutWarning := SalesReceivablesSetup."Stockout Warning";
      OldCreditWarnings := SalesReceivablesSetup."Credit Warnings";
      SalesReceivablesSetup.VALIDATE("Stockout Warning",NewStockoutWarning);
      SalesReceivablesSetup.VALIDATE("Credit Warnings",NewCreditWarnings);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBlanketOnSalesAndCalcRegenPlan@104(VAR SalesLine@1000 : Record 37;PlanningWorksheet@1001 : TestPage 99000852;DocumentNo@1003 : Code[20];RequisitionWkshNameName@1002 : Code[10];ItemNo@1005 : Code[20];ItemNo2@1004 : Code[20]);
    BEGIN
      UpdateBlanketOrderNoOnSalesLine(SalesLine,DocumentNo);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshNameName,ItemNo,ItemNo2);
    END;

    LOCAL PROCEDURE PostSalesAndCalcRegenPlan@82(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;PlanningWorksheet@1002 : TestPage 99000852;RequisitionWkshNameName@1003 : Code[10];ItemNo@1004 : Code[20];ItemNo2@1005 : Code[20]);
    BEGIN
      SalesLine.ShowReservationEntries(TRUE);  // Cancel Reservation. Handler used -ReservationEntry Handler.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshNameName,ItemNo,ItemNo2);
    END;

    LOCAL PROCEDURE CalculateReqWorksheetPlanForItem@161(VAR Item@1000 : Record 27);
    VAR
      RequisitionWkshName@1001 : Record 245;
    BEGIN
      Item.SETRECFILTER;
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,WORKDATE);
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@91(VAR RequisitionWkshName@1001 : Record 245;Item@1005 : Record 27;StartDate@1000 : Date;EndDate@1004 : Date);
    VAR
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CalculateRegenerativePlanForPlanWorksheet@90(ItemNo@1003 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      RequisitionWkshName@1001 : Record 245;
      PlanningWorksheet@1000 : TestPage 99000852;
    BEGIN
      CLEAR(RequisitionWkshName);
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,ItemNo,ItemNo2);
    END;

    LOCAL PROCEDURE CalculateRegenerativePlanAndCarryOut@129(ItemNo@1007 : Code[20];ItemNo2@1000 : Code[20];CheckAllAcceptActionMessage@1001 : Boolean);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      CalculateRegenerativePlanForPlanWorksheet(ItemNo,ItemNo2);

      IF CheckAllAcceptActionMessage THEN
        AcceptActionMessages(ItemNo,ItemNo2);

      SelectRequisitionLines(RequisitionLine,ItemNo,ItemNo2);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CalcRegenPlanAcceptAndCarryOut@168(ReqWkshName@1001 : Code[10];ItemNo@1007 : Code[20]);
    VAR
      RequisitionLine@1005 : Record 246;
      PlanningWorksheet@1002 : TestPage 99000852;
    BEGIN
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,ReqWkshName,ItemNo,ItemNo);
      AcceptActionMessages(ItemNo,ItemNo);
      SelectRequisitionLines(RequisitionLine,ItemNo,ItemNo);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE FindRequisitionWkshName@169(ReqWkshTemplateType@1000 : Option) : Code[10];
    VAR
      ReqWkshTemplate@1001 : Record 244;
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplateType);
      WITH RequisitionWkshName DO BEGIN
        SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
        FINDFIRST;
        EXIT(Name);
      END;
    END;

    LOCAL PROCEDURE CalculateOrderPlanAndCarryOut@147(FilterOnDemandType@1002 : Option;ItemNo@1001 : Code[20]);
    VAR
      ReqLine@1003 : Record 246;
    BEGIN
      CalculateOrderPlan(ReqLine,FilterOnDemandType);
      FindRequisitionLineForItem(ReqLine,ItemNo);
      SetSupplyFromVendorOnRequisitionLine(ReqLine);
      CarryOutActionPlan(ReqLine);
    END;

    LOCAL PROCEDURE GetRequiredDate@9(Days@1000 : Integer;IncludeAdditionalPeriod@1003 : Integer;RelativeDate@1001 : Date;SignFactor@1002 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to WorkDate or Lot Accumulation period dates.
      NewDate :=
        CALCDATE('<' + FORMAT(SignFactor * LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'D>',RelativeDate);
    END;

    LOCAL PROCEDURE GetLotAccumulationPeriod@28(Days@1000 : Integer;IncludeAdditionalPeriod@1001 : Integer) : Text[30];
    BEGIN
      EXIT('<' + FORMAT(LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'W>');
    END;

    LOCAL PROCEDURE GetRandomDateUsingWorkDate@69(Month@1000 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to work date for different supply and demands.
      NewDate := CALCDATE('<' + FORMAT(Month) + 'M>',WORKDATE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@105(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Status@1003 : Option;Quantity@1002 : Decimal;NewDueDate@1005 : Boolean;DueDate@1004 : Date);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      IF NewDueDate THEN BEGIN
        ProductionOrder.VALIDATE("Due Date",DueDate);
        ProductionOrder.MODIFY(TRUE);
      END;
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateReleasedProductionOrderAtLocationWithDueDateAndRefresh@184(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;DueDate@1004 : Date;LocationCode@1005 : Code[10]);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesHeader@101(VAR SalesHeader@1000 : Record 36;ShipmentDate@1001 : Date);
    BEGIN
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToShipOnSalesLine@213(VAR SalesLine@1001 : Record 37;QtytoShip@1000 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtytoShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnPurchaseLine@87(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20];Quantity@1002 : Integer);
    BEGIN
      SelectPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.VALIDATE(Quantity,Quantity);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePromisedReceiptDateOnPurchaseHeader@145(PurchaseHeaderNo@1002 : Code[20];PromisedReceiptDate@1003 : Date);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        GET("Document Type"::Order,PurchaseHeaderNo);
        VALIDATE("Promised Receipt Date",PromisedReceiptDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateProductionForecastType@97(VAR ProductionForecastEntry@1000 : ARRAY [3] OF Record 99000852;ComponentForecast@1001 : Boolean);
    BEGIN
      // Update Forecast Type on first available Forecast Entry.
      ProductionForecastEntry[1].VALIDATE("Component Forecast",ComponentForecast);
      ProductionForecastEntry[1].MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionForecastQuantity@96(VAR ProductionForecastEntry@1000 : ARRAY [3] OF Record 99000852;ForecastQuantity@1001 : Decimal);
    BEGIN
      // Update Forecast Quantity on first available Forecast Entry.
      ProductionForecastEntry[1].VALIDATE("Forecast Quantity",ForecastQuantity);
      ProductionForecastEntry[1].MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@112(NewCombinedMPSMRPCalculation@1002 : Boolean) OldCombinedMPSMRPCalculation : Boolean;
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      OldCombinedMPSMRPCalculation := ManufacturingSetup."Combined MPS/MRP Calculation";
      ManufacturingSetup.VALIDATE("Combined MPS/MRP Calculation",NewCombinedMPSMRPCalculation);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@142(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@118(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecastSetup@114(VAR ProductionForecastEntry@1000 : ARRAY [3] OF Record 99000852;ItemNo@1004 : Code[20];ForecastDate@1002 : Date;ForecastQuantity@1001 : Decimal;MultipleLine@1003 : Boolean);
    BEGIN
      CreateProductionForecastSetup(ProductionForecastEntry,ItemNo,ForecastDate,MultipleLine);
      UpdateProductionForecastQuantity(ProductionForecastEntry,ForecastQuantity);
    END;

    LOCAL PROCEDURE UpdatePlannedDeliveryDateOnSalesLine@75(VAR SalesLine@1000 : Record 37;PlannedDeliveryDate@1001 : Date);
    BEGIN
      SalesLine.VALIDATE("Planned Delivery Date",PlannedDeliveryDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@150(VAR ItemJournalBatch@1001 : Record 233;VAR ItemJournalLine@1005 : Record 83;EntryType@1002 : Option;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE AreSameMessages@20(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE OpenProductionJournalForReleasedProductionOrder@100(ItemNo@1000 : Code[20]);
    VAR
      ReleasedProductionOrder@1001 : TestPage 99000831;
    BEGIN
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("Source No.",ItemNo);
      ReleasedProductionOrder.ProdOrderLines.ProductionJournal.INVOKE;
    END;

    LOCAL PROCEDURE OpenPlanningWorksheetPage@126(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10]);
    BEGIN
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.CurrentWkshBatchName.SETVALUE(Name);
    END;

    LOCAL PROCEDURE OpenRequisitionWorksheetPage@208(VAR ReqWorksheet@1000 : TestPage 291;Name@1001 : Code[10]);
    BEGIN
      ReqWorksheet.OPENEDIT;
      ReqWorksheet.CurrentJnlBatchName.SETVALUE(Name);
    END;

    LOCAL PROCEDURE PostPurchaseOrderReceipt@204(Item@1001 : Record 27;Quantity@1002 : Integer);
    VAR
      Vendor@1003 : Record 23;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineQuantity@18(VAR RequisitionLine@1000 : Record 246;Quantity@1001 : Decimal;OriginalQuantity@1004 : Decimal;RefOrderType@1003 : Option);
    BEGIN
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Original Quantity",OriginalQuantity);
      RequisitionLine.TESTFIELD("Ref. Order Type",RefOrderType);
      RequisitionLine.NEXT;
    END;

    LOCAL PROCEDURE VerifyQtyInTwoRequisitionLines@178(VAR RequisitionLine@1000 : Record 246;Item@1001 : Record 27);
    BEGIN
      SelectRequisitionLine(RequisitionLine,Item."No.");
      VerifyRequisitionLineQuantity(RequisitionLine,Item."Reorder Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
      VerifyRequisitionLineQuantity(RequisitionLine,Item."Safety Stock Quantity",0,RequisitionLine."Ref. Order Type"::Purchase);
    END;

    LOCAL PROCEDURE VerifyPlannedDeliveryDate@77(No@1001 : Code[20];DueDate@1003 : Date);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FilterOnRequisitionLine(RequisitionLine,No);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("Due Date",DueDate);
    END;

    LOCAL PROCEDURE VerifyReservationEntryOfReservationExist@128(ItemNo@1000 : Code[20];Exist@1003 : Boolean;RowsNumber@1001 : Integer);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Reservation);

      ReservationEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      Assert.AreEqual(Exist,ReservationEntry.FINDFIRST,ReservationEntryErr);
      Assert.AreEqual(RowsNumber,ReservationEntry.COUNT,NumberOfRowsErr);

      ReservationEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
      Assert.AreEqual(Exist,ReservationEntry.FINDFIRST,ReservationEntryErr);
      Assert.AreEqual(RowsNumber,ReservationEntry.COUNT,NumberOfRowsErr);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@133(ItemNo@1000 : Code[20];ReservationEntryExist@1002 : Boolean;ExpectedReceiptDate@1003 : Date);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);

      IF ReservationEntryExist THEN BEGIN
        ReservationEntry.FINDFIRST;
        ReservationEntry.TESTFIELD("Expected Receipt Date",ExpectedReceiptDate);
      END ELSE
        ASSERTERROR ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyReservationEntryOfTrackingExist@131(ItemNo@1000 : Code[20];ShipmentDate@1001 : Date;ShipmentDateExist@1006 : Boolean);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Tracking);

      ReservationEntry.SETRANGE("Shipment Date",ShipmentDate);
      Assert.AreEqual(ShipmentDateExist,ReservationEntry.FINDFIRST,ReservationEntryErr);
    END;

    LOCAL PROCEDURE VerifyReservedQuantity@162(ItemNo@1000 : Code[20];ReservStatus@1003 : Option;ExpectedQty@1001 : Decimal);
    VAR
      ReservEntry@1002 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE(Positive,TRUE);
        SETRANGE("Reservation Status",ReservStatus);
        CALCSUMS("Quantity (Base)");
        Assert.AreEqual(ExpectedQty,"Quantity (Base)",ReservationEntryErr);
      END;
    END;

    LOCAL PROCEDURE VerifyFirmPlannedProdOrderExist@130(ItemNo@1000 : Code[20];DueDate@1004 : Date;DueDateExist@1002 : Boolean);
    VAR
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::"Firm Planned");

      ProdOrderLine.SETRANGE("Due Date",DueDate);
      Assert.AreEqual(DueDateExist,ProdOrderLine.FINDFIRST,STRSUBSTNO(FirmPlannedProdOrderErr,DueDate));
    END;

    LOCAL PROCEDURE VerifySurplusReservationEntry@156(ItemNo@1000 : Code[20];ExpectedQuantity@1006 : Decimal);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Reservation Status","Reservation Status"::Surplus);
        FINDFIRST;
        TESTFIELD(Quantity,ExpectedQuantity);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanPlanWkshRequestPageHandler@55(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    VAR
      ItemNo@1001 : Variant;
      ItemNo2@1002 : Variant;
    BEGIN
      // Calculate Regenerative Plan using page. Required where Forecast is used.
      LibraryVariableStorage.Dequeue(ItemNo);
      LibraryVariableStorage.Dequeue(ItemNo2);
      CalculatePlanPlanWksh.Item.SETFILTER("No.",STRSUBSTNO('%1|%2',ItemNo,ItemNo2));
      CalculatePlanPlanWksh.StartingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.EndingDate.SETVALUE(GetRandomDateUsingWorkDate(90));
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanReqWkshRequestPageHandler@212(VAR CalculatePlanReqWksh@1000 : TestRequestPage 699);
    BEGIN
      CalculatePlanReqWksh.StartingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      CalculatePlanReqWksh.EndingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      CalculatePlanReqWksh.Item.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      CalculatePlanReqWksh.Item.SETFILTER("Location Filter",LibraryVariableStorage.DequeueText);
      CalculatePlanReqWksh.RespectPlanningParm.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      CalculatePlanReqWksh.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationEntryPageHandler@62(VAR ReservationEntries@1000 : TestPage 497);
    BEGIN
      LibraryVariableStorage.Enqueue(CancelReservationConfirmationMessageTxt);  // Required inside ConfirmHandler.
      ReservationEntries.CancelReservation.INVOKE;
      ReservationEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@144(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalHandler@19(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationMessageTxt);  // Required inside ConfirmHandler.
      LibraryVariableStorage.Enqueue(JournalLinesPostedMessageTxt);  // Required inside MessageHandler.
      ProductionJournal.Post.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@88(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(ConfirmMessage,ExpectedMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@3(Message@1000 : Text[1024]);
    VAR
      QueuedMsg@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedMsg);
      Assert.IsTrue(AreSameMessages(Message,QueuedMsg),Message);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Requisition Worksheet] [SCM]
      Test for Planning using Requisition Worksheet:

      1. Create Lot-for-Lot Item. Create Sales Order having Shipment Date outside Lot Accumulation Period. Calculate Plan and Carry Out Action Message. Calculate Plan again and Verify no lines exist.
      2. Create Lot-for-Lot Item. Create Sales Order having Shipment Date within Lot Accumulation Period. Calculate Plan and Carry Out Action Message. Calculate Plan again and Verify no lines exist.
      3. Create Lot-for-Lot Item. Create Sales Order having Shipment Date within Lot Accumulation Period. Calculate Plan and Carry Out Action Message with Ending Date greater than Lot Accumulation Period.
         Calculate Plan again and Verify no lines exist.
      4. Create Lot-for-Lot Item. Create Sales Order with multiple lines having different Shipment dates. Calculate Plan, update Planning Flexibility to Unlimited for Requisition Worksheet after Carry out Action Message
         and Verify entries with Action message Change Quantity on Requisition Worksheet.
      5. Create Lot-for-Lot Item. Create Sales Order with multiple lines having different Shipment dates. Calculate Plan, update Planning Flexibility to None for Requisition Worksheet after Carry out Action Message
         and Verify entries with Action message New on Requisition Worksheet.
      6. Create Fixed Reorder Quantity Item. Create Purchase Order and Sales Order with multiple lines. Calculate Plan for Requisition Worksheet and Verify Worksheet lines.
      7. Create Lot-for-Lot Item having Lot Accumulation Period (1 Day). Create Sales Order with multiple lines having same Shipment dates. Calculate Plan and verify Requisition Worksheet.
      8. Create Lot-for-Lot Item having Lot Accumulation Period (1 Day). Create Sales Order with multiple lines having different Shipment dates. Calculate Plan and verify Requisition Worksheet.
      9. Create Lot-for-Lot Item without Lot Accumulation Period (0 Day). Create Sales Order with multiple lines having different Shipment dates. Calculate Plan and verify Requisition Worksheet.
      10. Create Lot-for-Lot Item. Create Sales Order. Calculate Plan with Planning Worksheet and verify Reservation Entries on Sales Line.
      11. Create Lot-for-Lot Item. Create Production Order from created Sales Order. Create and post Production Journal from Production Order. Calculate Plan on Planning Worksheet.
      12. Create Lot-for-Lot Item. Create Production Order from created Sales Order. Create and post Production Journal from Production Order. Calculate Plan on Planning Worksheet. Post Sales Order and again Calculate Plan.
      13. Create Order  Item. Create Production Forecast for Item. Create Blanket Order from Sales Order. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      14. Create Order Item. Create Production Forecast for Item. Create Blanket Order from Sales Order. Calculate Regenerative Plan. Post Sales Order. Calculate Regenerative Plan again for Planning Worksheet and verify Planning Worksheet.
      15. Create Order Item. Create Production Forecast for Item. Create Blanket Order.Create Sales Order with less quantity on Blanket Order. Update Blanket Order on Sales Order.
          Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      16. Create Order Item. Create Production Forecast for Item.  Create Blanket Order.Create Sales Order with less quantity on Blanket Order. Update Blanket Order on Sales Order. Post Sales Order.
          Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      17. Create Order Item. Create Production Forecast for Item. Create Blanket Order and Sales Order for same Item. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      18. Create Order Item. Create Production Forecast for Item.  Create Blanket Order and Sales Order for same Item .Calculate Plan. Update Blanket order on Sales Order.
          Calculate Regenerative Plan again for Planning Worksheet and verify Planning Worksheet.
      19. Create Order Item. Create Production Forecast for Item. Create Blanket Order and Sales Order for same Item .Calculate Plan. Update Blanket order on Sales Order. Calculate Regenerative Plan again for Planning Worksheet.
          Post Sales Order and Calculate and verify Planning Worksheet.
      20. Create Order Item - Replenishment System - Production Order, Create Order Type child Item - Replenishment System  - Purchase, Create Production Forecast for Items. Create Production BOM, Create Blanket and  Sales Order for same Item.
          Calculate and verify Planning Worksheet
      21. Create Order Item - Replenishment System - Production Order, Create Order Type child Item - Replenishment System  - Purchase, Create Production Forecast for Items. Create Production BOM, Create Blanket and  Sales Order for same Item.
          Cancel Reservation. Post Sales Order. Calculate and verify Planning Worksheet.
      22. Create Fixed Reorder Quantity Item with Stockout Warning -False and "Credit Warnings -No Warning on Sales & Receivables Setup. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      23. Create Lot-for-Lot Item. Create Transfer Order. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      24. Create Lot-for-Lot Items. Create Purchase Order, Create Transfer Order. Calculate Regenerative Plan for Planning Worksheet Calculate Net Change Plan and Regenerative Plan
          again and verify Planning Worksheet.
      25. Create Order Item - Replenishment System - Production Order. Create Blanket Order from Sales Order. Update Quantities and Shipment Date on Blanket Order and Shipment Date on Sales Order
          Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      26. Create Order  Item - Replenishment System - Production Order. Create Production Forecast for Item for single Date. Create Blanket Order from Sales Order. Update Quantities and Shipment Date on Blanket Order and Shipment Date on Sales Order
          Calculate Regenerative Plan for Planning Worksheet. Post Sales Order. Calculate Regenerative Plan again for Planning Worksheet and verify Planning Worksheet.      27. Create Order Item - Replenishment System - Production Order.
          Create Blanket Order. Create Sales Order with less quantity on Blanket Order. Update Blanket Order,
          Shipment Date and Quantity on Sales Order. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      28. Create Order Item - Replenishment System - Production Order. Create Production Forecast for Item for single Date. Create Blanket Order. Create Sales Order with less quantity on Blanket Order.
          Update Blanket Order, Shipment Date and Quantity on Sales Order. Calculate Regenerative Plan for Planning Worksheet Post Sales Order. Calculate Regenerative Plan again for Planning Worksheet and verify Planning Worksheet.
      29. Create Order Item - Replenishment System - Production Order, Create Production Forecast. Create Blanket and  Sales Order  with
          multiple Lines for Items.Calculate and verify Planning Worksheet.
      30. Create Create Order Item - Replenishment System - Production Order, Create Production Forecast. Create Blanket and  Sales Order  with multiple Lines
          for Items. Calculate and verify Planning Worksheet. Post Sales Order. Calculate Regenerative Plan again for Planning Worksheet and verify Planning Worksheet.
      31. Create Order Items. Create Production Forecast. Create Sales Order with multiple Lines. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      32. Create Order Items. Create Production Forecast. Create Sales Order for different Item. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      33. Create Order Item. Create Production Forecast for different date. Create Sales Order. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      34. Create Order Item. Create Production Forecast for different date. Create Sales Order. Post Sales Order. Calculate Regenerative Plan again for Planning Worksheet and verify Planning Worksheet.
      35. Create Order Items. Create Production Forecast for multiple Items with single entry. Update Forecast Quantity to -0 for one Item. Create Sales Order. Calculate Regenerative Plan for Planning Worksheet.
          Verify Planning Worksheet.
      36. Create Order Item. Create Production Forecast single entry. Update Forecast Quantity to Negative Quantity. Calculate regenerative Plan for Planning Worksheet.Verify Planning Worksheet.
      37. Create Order Item. Create Production Forecasts for different Item with multiple entries.Calculate regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      38. Create Lot For Lot Item. Create Released Production Order. Create Firm Planned Production Order. Create Sales Order with multiple Lines. Calculate regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      39. Create Lot For Lot Item. Create Released Production Order. Create Firm Planned Production Order. Update Forecast Type - Component. Calculate regenerative Plan for Planning Worksheet.
          Verify Planning Worksheet.
      40. Create Order Item. Create Production forecast for multiple entries. Create and Post Item Journal Line. Calculate regenerative Plan for Planning Worksheet and Verify Planning Worksheet.
      41. Create Order Item. Create Production forecast for multiple entries. Create and Post Item Journal Line. Create Released Production Order. Calculate regenerative Plan for Planning Worksheet and Verify Planning Worksheet.
      42. Create Order Item. Create Production Forecast. Create Sales Order. Calculate regenerative Plan with MPS -TRUE and MRP - FALSE for Planning Worksheet and verify Planning Worksheet.
      43. Create Order Item. Create Production Forecast. Calculate regenerative Plan with MPS -TRUE and MRP - FALSE for Planning Worksheet and verify Planning Worksheet.
      44. Create Order Item. Create Sales Order. Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet and verify Planning Worksheet.
      45. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Production Forecast with single Entry. Create Released Production Order. Create and Post Consumption Journal.
          Calculate regenerative Plan with MPS -TRUE and MRP -FALSE for Planning Worksheet and verify Planning Worksheet.
      46. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Production Forecast with single Entry. Create Released Production Order. Create and Post Consumption Journal. Calculate regenerative Plan for Planning
          Worksheet and verify Planning Worksheet.
      47. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Production Forecast with multiple entries. Create Released Production Orders. Create and Post Consumption Journal.
          Calculate regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      48. Create Lot for Lot  Item. Create Production Forecast with multiple Entries. Update Production Forecast Quantity to - 0. Create Sales Order with Negative Quantity. Calculate Regenerative Plan with MPS -TRUE and MRP - FALSE for Planning Wksh
          and verify Planning Worksheet.
      49. Create Lot for Lot  Item. Create Production Forecast with multiple Entries. Update Production Forecast Quantity to - 0. Create Sales Order with Negative Quantity. Calculate Regenerative Plan with MPS -TRUE and MRP - FALSE
          for Planning Worksheet.Calculate Plan again after Sales Order Posting. and verify Planning Worksheet.
      50. Create Lot for Lot  Item. Create Sales Order. Update Shipment Date and Planned Delivery Date on Sales Line. Calculate Regenerative Plan for Planning Worksheet and verify Planning Worksheet.
      51. Create Lot for Lot  Item. Create Production Forecast with multiple Entries. Create Sales Order. Update Shipment Date and Planned Delivery Date on Sales Line. Calculate Regenerative Plan for Planning Worksheet.
          Create and Post Item Journal Line. Calculate Plan again after Sales Order Posting and verify Planning Worksheet.
      52. Create Sales Order. Calculate Regenerative Plan for Planning Worksheet and Carry Out for Firm Planned Production Order. Update the Shipment Date. Calculate Regenerative Plan.
          Delete the Planning Lines. Verify Reservation and Firm Planned Production Order.
      53. Create Sales Order. Calculate Regenerative Plan for Planning Worksheet and Carry Out for Firm Planned Production Order. Update the Shipment Date. Calculate Regenerative Plan.
          Carry Out for Firm Planned Production Order. Verify Reservation and Firm Planned Production Order.
      54. Create Sales Order. Calculate Plan for Requisition Worksheet and Carry Out Action Message. Update the Promised Receipt Date in Purchase Order late than original date.
          Verify Reservation Entries are removed and Earliest Shipment Date in Sales Order Promising lines.
      55. Create Sales Order. Calculate Plan for Requisition Worksheet and Carry Out Action Message. Update the Promised Receipt Date in Purchase Order earlier than original date.
          Verify Reservation Entries are updated and Earliest Shipment Date in Sales Order Promising lines.
      56. Create Sales Order. Calculate Plan for Requisition Worksheet and Carry Out Action Message. Update the Promised Receipt Date in Purchase Order Line.
          Verify Error message pops up if Promised Receipt Date late than original date.
      57. Can calculate regeneration plan for Item with opposite Transfer Order.
      57. Make reservation for sales order from insufficient inventory. Run order planning - this will create new purchase order with Order-To-Order binding.
          Calculate plan from requisition worksheet. Verify that action "Change Qty." for order-to-order is suggested, reservation from inventory is deleted.
      58. Create production order, run order planning to generate replenishment plan for components. Run requisition plan for component.
          Verify that safety stock replenishment is suggested, reservation created by order planning is left untouched.

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
         Test Function                                                                                            TFS ID
       ------------------------------------------------------------------------------------------------------------------
        ReqWkshErrorAfterCarryOutForSalesShipmentOutsideLotAccumPeriodLFLItem                                     143084
        ReqWkshErrorAfterCarryOutForSalesShipmentInLotAccumPeriodLFLItem                                          143084
        ReqWkshErrorAfterCarryOutForSalesPlanningEndDateGreaterThanLotAccumPeriodLFLItem                          143084
        PlanningFlexibilityUnlimitedAndCarryOutCalcPlanTwiceWithSalesOrderLFLItem                                 143092
        PlanningFlexibilityNoneAndCarryOutCalcPlanTwiceWithSalesOrderLFLItem                                      143092
        CalcPlanForReqWkshWithSalesAndPurchaseFRQItem                                                             143069
        CalcPlanForSalesShipmentDatesSameForSalesLinesLFLItem                                                     143071
        CalcPlanForSalesShipmentDatesDiffForSalesLinesLFLItem                                                     143071
        CalcPlanForSalesShipmentDatesDiffForSalesLinesWithNoLotAccumPeriodLFLItem                                 143071
        CalcPlanOnSalesAndOrderItemWithReservedQuantity                                                           143085
        CalcPlanForLFLItemFinishProductionOrderFromSalesOrder                                                     143094
        CalcPlanTwiceForLFLItemFinishProductionOrderFromSalesOrderWithSalesShip                                   143094

        Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                              TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcPlanForSalesOrderFromBlanketOrderUsingForecastOrderItem                                                 127957
        CalcPlanTwiceForSalesOrderFromBlanketOrderWithSalesShipUsingForecastOrderItem                               127957
        CalcPlanForBlanketOrderUpdatedOnSalesOrderUsingForecastOrderItem                                            127957
        CalcPlanTwiceForBlanketOrderUpdatedOnSalesOrderWithSalesShipUsingForecastOrderItem                          127957
        CalcPlanForBlanketOrderSalesOrderForSameItemUsingForecastOrderItem                                          127957
        CalcPlanTwiceForBlanketOrderSalesOrderForSameItemUpdateBlanketOnSalesUsingForecastOrderItem                 127957
        CalcPlanThriceForBlanketOrderSalesOrderForSameOrderItemUpdateBlanketOnSalesWithSalesShipUsingForecast       127957
        CalcPlanForBlanketOrderSalesOrderForItemAndChildItemOfUsingForecastOrderItem                                127957
        CalcPlanTwiceForBlanketOrderSalesOrderForItemAndChildItemWithSalesShipUsingForecastOrderItem                127957

       Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                              TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcPlanForReqWkshWithoutAnyDemandFRQItem                                                                   127791
        CalcRegenerativePlanForTransferOrder                                                                        127853
        CalcNetChangePlanForTransferOrder                                                                           127853

        Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                              TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcPlanForSalesOrderFromBlanketOrderForProductionOrderOrderItem                                              124860
        CalcPlanTwiceForSalesOrderFromBlanketOrderWithSalesShipUsingForecastForProductionOrderOrderItem               124860
        CalcPlanForBlanketOrderUpdatedOnSalesOrderForProductionOrderOrderItem                                         124861
        CalcPlanTwiceForBlanketOrderUpdatedOnSalesOrderWithSalesShipUsingForecastProductionOrderOrderItem             124861
        CalcPlanForBlanketOrderUpdatedOnSalesOrderUsingForecastProductionOrderOrderItem                               124863
        CalcPlanTwiceForBlanketOrderUpdatedOnMultiLineSalesOrderSalesShipUsingForecastProductionOrderOrderItem        124863

         Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
         Test Function                                                                                            TFS ID
       ------------------------------------------------------------------------------------------------------------------
         CalcPlanForMultiLineSalesOrderUsingForecastOrderItems                                                    120986
         CalcPlanForForecastAndSalesForDifferentOrderItems                                                        120986
         CalcPlanForSalesOrderUsingForecastOrderItem                                                              120987
         CalcPlanTwiceForSalesOrderWithSalesShipUsingForecastOrderItem                                            120988

        Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                              TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcPlanForSalesOrderUsingForecastOrderItemsForZeroQuantity                                                 120991
        CalcPlanForForecastOrderItemForNegativeQuantity                                                             120992
        CalcPlanUsingDifferentForecastEntriesForDifferentOrderItems                                                 120989
        CalcPlanForSalesOrdersWithFirmAndReleasedProdOrderUsingForecastTypeSalesItem                                120995
        CalcPlanForFirmAndReleasedProdOrderUsingForecastTypeComponent                                               120996

         Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
         Test Function                                                                                              TFS ID
       --------------------------------------------------------------------------------------------------------------------
         CalcPlanForOrderItemWithInventoryUsingForecast                                                             120993
         CalcPlanForOrderItemWithInventoryAndReleasedProdOrderUsingForecast                                         120994

        Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcPlanWithMPSForSalesOrderOrderItemUsingForecast                                                         121554
        CalcPlanWithMPSForProductionForecastOrderItem                                                              121555
        CalcPlanWithMPSForSalesOrderOrderItem                                                                      121556

        Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                               TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcPlanWithMPSForReleasedProdOrderWithConsumptionJournalLFLItemUsingForecast                               120979
        CalcPlanForReleasedProdOrderWithConsumptionJournalLFLItemUsingForecast                                      120980
        CalcPlanForMultipleReleasedProdOrdersWithConsumptionJournalLFLItemUsingMultipleForecastEntries              120981

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcPlanWithMPSNegativeSalesUsingForecastLFLItemForZeroQuantity                                           123589
        CalcPlanWithMPSSalesPostUsingForecastLFLItemForZeroQuantity                                               123589
        CalcPlanWithSalesForNewPlannedDeliveryDateLFLItem                                                         123590
        CalcPlanWithSalesShipForNewPlannedDeliveryDateUsingForecastLFLItem                                        123590

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        ReCalcPlanForUpdateSalesShipmentDateAndDeletePlanningLines                                                 50933
        ReCalcPlanForUpdateSalesShipmentDateAndCarryOut                                                            50933

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        UpdatePromisedReceiptDateLateThanExpectedReceiptDate                                                        56574
        UpdatePromisedReceiptDateEarlierThanExpectedReceiptDate                                                     57222
        UpdatePromisedReceiptDateInPurchaseOrderLine                                                                57223

        TFS358446_CalcOrderPlanRecalculateReqPlanLotForLotReplenishment                                            358446
        TFS358867_CalcOrderPlanRecalculateReqPlanMaxQtyReplenishment                                               358867
        TFS358867_CalcOrderPlanRecalculateReqPlanForIncreasedSalesQuantity                                         358867
        TFS358867_CalculateReqPlanOnlyForIncreasedSalesQuantity                                                    358867
        TFS359949_CalcOrderPlanRecalculateReqPlanForProductionComponent                                            359949

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanWithOppositeTransferOrder                                                                    363209
    }
    END.
  }
}

