OBJECT Codeunit 134481 ERM Dimension Archive Document
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1000 : Codeunit 130440;
      LibraryInventory@1005 : Codeunit 132201;
      LibrarySales@1001 : Codeunit 130509;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryDimension@1002 : Codeunit 131001;
      LibrarySetupStorage@1006 : Codeunit 131009;
      IsInitialized@1003 : Boolean;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DimSalesOrderArchive@40();
    VAR
      SalesHeader@1000 : Record 36;
      TempDimensionSetEntry@1008 : TEMPORARY Record 480;
    BEGIN
      // Verify Dimension on Archive Sales Order.

      // Create Customer with Default Dimension, Item, Sales Order.Archive Sales Order and Post it.
      Initialize;
      SalesOrderArchive(SalesHeader,TempDimensionSetEntry);

      // Verify Dimension on Archive Sales Order and Dimension Set Entry and Dimension on Sales Line successfully updated.
      VerifyDimOnSalesArchHeader(SalesHeader);
      VerifyDimOnSalesArchLine(SalesHeader);
      VerifyDimSetEntry(TempDimensionSetEntry,SalesHeader."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DimSalesOrderArchiveDelete@7();
    VAR
      SalesHeader@1000 : Record 36;
      TempDimensionSetEntry@1008 : TEMPORARY Record 480;
    BEGIN
      // Verify Dimensions are deleted on deletion of Archived Purchase order.

      // Create Customer with Default Dimension, Item, Sales Order.Archive Sales Order and Post it.
      Initialize;
      SalesOrderArchive(SalesHeader,TempDimensionSetEntry);
      DeleteArchiveSalesOrder(SalesHeader);

      // Verify Dimension Set Entry and Dimension on Sales Line successfully updated.
      VerifyDimSetEntry(TempDimensionSetEntry,SalesHeader."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DimPurchOrderArchive@20();
    VAR
      PurchaseHeader@1000 : Record 38;
      TempDimensionSetEntry@1008 : TEMPORARY Record 480;
    BEGIN
      // Verify Dimension on Archive Purchase Order.

      // Create Customer with Default Dimension, Item, Purchase Order.Archive Purchase Order and Post it.
      Initialize;
      PurchaseOrderArchive(PurchaseHeader,TempDimensionSetEntry);

      // Verify Dimension on Archive Purchase Order and Dimension Set Entry and Dimension on Purchase Line successfully updated.
      VerifyDimOnPurchArchHeader(PurchaseHeader);
      VerifyDimOnPurchArchLine(PurchaseHeader);
      VerifyDimSetEntry(TempDimensionSetEntry,PurchaseHeader."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DimPurchOrderArchiveDelete@15();
    VAR
      PurchaseHeader@1001 : Record 38;
      TempDimensionSetEntry@1008 : TEMPORARY Record 480;
    BEGIN
      // Verify Dimensions are deleted on deletion of Archived Sales order.

      // Create Customer with Default Dimension, Item, Purchase Order.Archive Purchase Order and Post it.
      Initialize;
      PurchaseOrderArchive(PurchaseHeader,TempDimensionSetEntry);
      DeleteArchivePurchOrder(PurchaseHeader);

      // Verify Dimension Set Entry and Dimension on Purchase Line successfully updated.
      VerifyDimSetEntry(TempDimensionSetEntry,PurchaseHeader."Dimension Set ID");
    END;

    [Test]
    PROCEDURE SalesOrderArchiveWithPartialShip@6();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Verify Sales Header Archive and Sales Line Archive values.

      // Setup: Update Sales & Receivable setup, create and post Sales Order.
      Initialize;
      CreateAndPostSalesArchiveOrder(SalesLine);

      // Exercise.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Verify: Verify Sales Header Archive and Sales Line Archive values.
      VerifySalesOrderArchive(SalesHeader,SalesLine,1);  // Used 1 for No. of Archived Verisons.
    END;

    [Test]
    PROCEDURE MultipleSalesOrderArchive@19();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Verify Sales Header Archive and Sales Line Archive values with multiple Sales Order Archive.

      // Setup: Update Sales & Receivable setup, create and post Sales Order.
      Initialize;
      CreateAndPostSalesArchiveOrder(SalesLine);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity / 2);  // Taken partial Qty. to Ship.
      SalesLine.MODIFY(TRUE);

      // Exercise.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Sales Header Archive and Sales Line Archive values with multiple Sales Order Archive.
      VerifySalesOrderArchive(SalesHeader,SalesLine,2);  // Used 2 for No. of Archived Verisons.
    END;

    [Test]
    PROCEDURE PurchaseOrderArchiveWithPartialReceive@61();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Verify Purchase Header Archive and Purchase Line Archive values.

      // Setup: Update Purchases & Payables setup, create and post Purchase Order.
      Initialize;
      CreateAndPostPurchaseArchiveOrder(PurchaseLine);

      // Exercise.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");

      // Verify: Verify Purchase Header Archive and Purchase Line Archive values.
      VerifyPurchaseOrderArchive(PurchaseHeader,PurchaseLine,1);  // Used 1 for No. of Archived Verisons.
    END;

    [Test]
    PROCEDURE MultiplePurchaseOrderArchive@32();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Verify Purchase Header Archive and Purchase Line Archive values with multiple Purchase Order Archive .

      // Setup: Update Purchases & Payables setup, create and post Purchase Order.
      Initialize;
      CreateAndPostPurchaseArchiveOrder(PurchaseLine);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity / 2);  // Taken partial Qty. to Receive.
      PurchaseLine.MODIFY(TRUE);

      // Exercise.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify Purchase Header Archive and Purchase Line Archive values with multiple Purchase Order Archive .
      VerifyPurchaseOrderArchive(PurchaseHeader,PurchaseLine,2);  // Used 2 for No. of Archived Verisons.
    END;

    [Test]
    PROCEDURE ArchiveSalesOrderOnFinalInvoicing@24();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order]
      // [SCENARIO 200401] System creates archive after posting final invoice when "Sales & Recievables Setup"."Archive Quotes and Orders" = TRUE

      // [GIVEN] Sales Order "SO" fully shipped and partially invoiced (1 archive exists)
      Initialize;
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      CreateSalesOrder(SalesHeader,SalesLine);
      SalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice" / 2);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      VerifySalesOrderArchive(SalesHeader,SalesLine,1);

      // [WHEN] Post final invoice
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] 2nd archive created
      VerifySalesOrderArchive(SalesHeader,SalesLine,2);
    END;

    [Test]
    PROCEDURE ArchivePurchaseOrderOnFinalInvoicing@28();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [Purchase] [Order]
      // [SCENARIO 200401] System creates archive after posting final invoice when "Purchases & Payables Setup"."Archive Quotes and Orders" = TRUE

      // [GIVEN] Purchase Order "PO" fully receipt and partially invoiced (1 archive exists)
      Initialize;
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      PurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice" / 2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      VerifyPurchaseOrderArchive(PurchaseHeader,PurchaseLine,1);

      // [WHEN] Post final invoice
      PurchaseHeader.VALIDATE("Vendor Invoice No.",INCSTR(PurchaseHeader."Vendor Invoice No."));
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] 2nd archive created
      VerifyPurchaseOrderArchive(PurchaseHeader,PurchaseLine,2);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesModalPageHandler)]
    PROCEDURE ArchiveSalesOrderFullyInvoicedOnDelete@30();
    VAR
      SalesHeaderOrder@1000 : Record 36;
      SalesHeaderInvoice@1002 : Record 36;
      SalesLineOrder@1001 : Record 37;
      SalesLineInvoice@1003 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Order] [Get Shipment Lines]
      // [SCENARIO 200401] System creates archive after delete invoiced sales order

      // [GIVEN] Sales Order "SO" fully shipped and not invoiced (1 archive exists)
      Initialize;
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      CreateSalesOrder(SalesHeaderOrder,SalesLineOrder);
      LibrarySales.PostSalesDocument(SalesHeaderOrder,TRUE,FALSE);

      VerifySalesOrderArchive(SalesHeaderOrder,SalesLineOrder,1);

      // [GIVEN] Sales Invoice created from "SO" with "Get Shipment Lines" and fully invoiced
      LibrarySales.CreateSalesHeader(
        SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,SalesHeaderOrder."Sell-to Customer No.");
      SalesLineInvoice.VALIDATE("Document Type",SalesHeaderInvoice."Document Type");
      SalesLineInvoice.VALIDATE("Document No.",SalesHeaderInvoice."No.");
      LibrarySales.GetShipmentLines(SalesLineInvoice);
      LibrarySales.PostSalesDocument(SalesHeaderInvoice,TRUE,TRUE);

      // [WHEN] Delete "SO"
      SalesHeaderOrder.FIND;
      SalesHeaderOrder.DELETE(TRUE);

      // [THEN] 2nd archive created
      VerifySalesOrderArchive(SalesHeaderOrder,SalesLineOrder,2);
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinesModalPageHandler)]
    PROCEDURE ArchivePurchaseOrderFullyInvoicedOnDelete@29();
    VAR
      PurchaseHeaderOrder@1000 : Record 38;
      PurchaseHeaderInvoice@1002 : Record 38;
      PurchaseLineOrder@1001 : Record 39;
      PurchaseLineInvoice@1003 : Record 39;
    BEGIN
      // [FEATURE] [Purchase] [Order] [Get Receipt Lines]
      // [SCENARIO 200401] System creates archive after delete invoiced purchase order

      // [GIVEN] Purchase Order "PO" fully receipt and not invoiced (1 archive exists)
      Initialize;
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      CreatePurchaseOrder(PurchaseHeaderOrder,PurchaseLineOrder);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeaderOrder,TRUE,FALSE);

      VerifyPurchaseOrderArchive(PurchaseHeaderOrder,PurchaseLineOrder,1);

      // [GIVEN] Purchase Invoice created from "PO" with "Get Receipt Lines" and fully invoiced
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeaderInvoice,PurchaseHeaderInvoice."Document Type"::Invoice,PurchaseHeaderOrder."Buy-from Vendor No.");
      PurchaseLineInvoice.VALIDATE("Document Type",PurchaseHeaderInvoice."Document Type");
      PurchaseLineInvoice.VALIDATE("Document No.",PurchaseHeaderInvoice."No.");
      LibraryPurchase.GetPurchaseReceiptLine(PurchaseLineInvoice);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeaderInvoice,TRUE,TRUE);

      // [WHEN] Delete "PO"
      PurchaseHeaderOrder.FIND;
      PurchaseHeaderOrder.DELETE(TRUE);

      // [THEN] 2nd archive created
      VerifyPurchaseOrderArchive(PurchaseHeaderOrder,PurchaseLineOrder,2);
    END;

    [Test]
    PROCEDURE ArchiveSalesQuoteOnDelete@33();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Quote]
      // [SCENARIO 200401] System creates archive when delete sales quote

      // [GIVEN] Sales Quote when the line
      Initialize;
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));

      // [WHEN] When delete sales quote
      SalesHeader.DELETE(TRUE);

      // [THEN] The archive for sales quote is created
      VerifySalesOrderArchive(SalesHeader,SalesLine,1);
    END;

    [Test]
    PROCEDURE ArchivePurchaseQuoteOnDelete@31();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [Purchase] [Quote]
      // [SCENARIO 200401] System creates archive when delete purchase quote

      // [GIVEN] Purchase Quote when the line
      Initialize;
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Quote,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));

      // [WHEN] When delete purchase quote
      PurchaseHeader.DELETE(TRUE);

      // [THEN] The archive for purchase quote is created
      VerifyPurchaseOrderArchive(PurchaseHeader,PurchaseLine,1);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE SalesOrderArchive@3(VAR SalesHeader@1006 : Record 36;VAR TempDimensionSetEntry@1002 : TEMPORARY Record 480);
    VAR
      ArchiveManagement@1001 : Codeunit 5063;
    BEGIN
      // Setup: Create Customer with Default Dimension, Item, Sales Order.
      CreateSalesOrderWithDim(SalesHeader,TempDimensionSetEntry);

      // Exercise: Archive Sales Order and Post it.
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PurchaseOrderArchive@4(VAR PurchaseHeader@1005 : Record 38;VAR TempDimensionSetEntry@1006 : TEMPORARY Record 480);
    VAR
      ArchiveManagement@1004 : Codeunit 5063;
    BEGIN
      // Setup: Create Customer with Default Dimension, Item, Purchase Order.
      CreatePurchOrderWithDim(PurchaseHeader,TempDimensionSetEntry);

      // Exercise: Archive Purchase Order and Post it.
      ArchiveManagement.ArchivePurchDocument(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesArchiveOrder@22(VAR SalesLine@1003 : Record 37);
    VAR
      Customer@1002 : Record 18;
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));  // Used Random value for Quantity.
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity / 2);  // Taken partial Qty. to Ship
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseArchiveOrder@111(VAR PurchaseLine@1003 : Record 39);
    VAR
      PurchaseHeader@1000 : Record 38;
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));  // Used Random value for Quantity.
      PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity / 2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateItem@18() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Used Random value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.")
    END;

    LOCAL PROCEDURE CreateSalesOrder@112(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomerWithDim);

      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItemWithDim,LibraryRandom.RandDec(10,2) * 2);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@9(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1002 : Record 39);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendorWithDim);

      // Use Random because value is not important.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithDim,LibraryRandom.RandDec(10,2) * 2);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionSetEntry@21(VAR DimensionSetID@1000 : Integer;ShortcutDimensionCode@1005 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      Dimension@1002 : Record 348;
    BEGIN
      Dimension.SETFILTER(Code,'<>%1',ShortcutDimensionCode);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,DimensionValue."Dimension Code",DimensionValue.Code);

      LibraryDimension.FindDimensionValue(DimensionValue,ShortcutDimensionCode);
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,ShortcutDimensionCode,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateDefaultDimension@23(DefaultDimension@1001 : Record 352);
    BEGIN
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::" ");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDimSetEntryHeader@157(VAR SalesHeader@1000 : Record 36;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := SalesHeader."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      SalesHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDimSetEntryLine@165(VAR SalesLine@1000 : Record 37;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := SalesLine."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      SalesLine.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchDimSetEntryHeader@14(VAR PurchaseHeader@1000 : Record 38;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := PurchaseHeader."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      PurchaseHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchDimSetEntryLine@13(VAR PurchaseLine@1000 : Record 39;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := PurchaseLine."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      PurchaseLine.VALIDATE("Dimension Set ID",DimensionSetID);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDim@12(VAR SalesHeader@1010 : Record 36;VAR TempDimensionSetEntry@1001 : TEMPORARY Record 480);
    VAR
      GeneralLedgerSetup@1007 : Record 98;
      DimensionSetEntry@1003 : Record 480;
      SalesLine@1000 : Record 37;
      ShortcutDimensionCode@1004 : Code[20];
    BEGIN
      // Create Customer, Item, Sales Header and Sales Line with Dimension.
      GeneralLedgerSetup.GET;
      ShortcutDimensionCode := GeneralLedgerSetup."Shortcut Dimension 1 Code";
      CreateSalesOrder(SalesHeader,SalesLine);
      CreateSalesDimSetEntryHeader(SalesHeader,ShortcutDimensionCode);
      CreateSalesDimSetEntryLine(SalesLine,ShortcutDimensionCode);

      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesLine."Dimension Set ID");
      CopyDimSetEntry(TempDimensionSetEntry,DimensionSetEntry);
      TempDimensionSetEntry.SETFILTER("Dimension Code",'<>%1',ShortcutDimensionCode);
      TempDimensionSetEntry.FINDSET;
    END;

    LOCAL PROCEDURE CreatePurchOrderWithDim@5(VAR PurchaseHeader@1002 : Record 38;VAR TempDimensionSetEntry@1001 : TEMPORARY Record 480);
    VAR
      GeneralLedgerSetup@1007 : Record 98;
      DimensionSetEntry@1003 : Record 480;
      PurchaseLine@1000 : Record 39;
      ShortcutDimensionCode@1004 : Code[20];
    BEGIN
      // Setup: Create Vendor, Item, Purchase Header and Purchase Line with Dimension.
      GeneralLedgerSetup.GET;
      ShortcutDimensionCode := GeneralLedgerSetup."Shortcut Dimension 1 Code";
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);
      CreatePurchDimSetEntryHeader(PurchaseHeader,ShortcutDimensionCode);
      CreatePurchDimSetEntryLine(PurchaseLine,ShortcutDimensionCode);

      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,PurchaseLine."Dimension Set ID");
      CopyDimSetEntry(TempDimensionSetEntry,DimensionSetEntry);
      TempDimensionSetEntry.SETFILTER("Dimension Code",'<>%1',ShortcutDimensionCode);
      TempDimensionSetEntry.FINDSET;
    END;

    LOCAL PROCEDURE CreateCustomerWithDim@88() : Code[20];
    VAR
      Customer@1002 : Record 18;
      Dimension@1000 : Record 348;
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,'');
      UpdateDefaultDimension(DefaultDimension);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithDim@10() : Code[20];
    VAR
      Vendor@1002 : Record 23;
      Dimension@1003 : Record 348;
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",Dimension.Code,'');
      UpdateDefaultDimension(DefaultDimension);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItemWithDim@110() : Code[20];
    VAR
      Item@1000 : Record 27;
      Dimension@1004 : Record 348;
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryInventory.CreateItem(Item);

      // Use Random because value is not important.
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,'');
      UpdateDefaultDimension(DefaultDimension);
      EXIT(Item."No.")
    END;

    LOCAL PROCEDURE CopyDimSetEntry@207(VAR TempDimensionSetEntry@1000 : TEMPORARY Record 480;VAR DimensionSetEntry@1001 : Record 480);
    BEGIN
      REPEAT
        TempDimensionSetEntry := DimensionSetEntry;
        TempDimensionSetEntry.INSERT;
      UNTIL DimensionSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteArchiveSalesOrder@1(SalesHeader@1000 : Record 36);
    VAR
      SalesHeaderArchive@1002 : Record 5107;
      DeleteSalesOrderVersions@1001 : Report 5180;
    BEGIN
      FindSalesDocumentArchive(SalesHeaderArchive,SalesHeader);
      DeleteSalesOrderVersions.USEREQUESTPAGE(FALSE);
      DeleteSalesOrderVersions.SETTABLEVIEW(SalesHeaderArchive);
      DeleteSalesOrderVersions.RUN;
    END;

    LOCAL PROCEDURE DeleteArchivePurchOrder@16(PurchaseHeader@1003 : Record 38);
    VAR
      PurchaseHeaderArchive@1002 : Record 5109;
      DeletePurchaseOrderVersions@1001 : Report 5178;
    BEGIN
      FindPurchDocumentArchive(PurchaseHeaderArchive,PurchaseHeader);
      DeletePurchaseOrderVersions.USEREQUESTPAGE(FALSE);
      DeletePurchaseOrderVersions.SETTABLEVIEW(PurchaseHeaderArchive);
      DeletePurchaseOrderVersions.RUN;
    END;

    LOCAL PROCEDURE FindSalesLineArchive@39(VAR SalesLineArchive@1000 : Record 5108;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLineArchive.SETRANGE("Document Type",DocumentType);
      SalesLineArchive.SETRANGE("Document No.",DocumentNo);
      SalesLineArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLineArchive@65(VAR PurchaseLineArchive@1000 : Record 5110;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseLineArchive.SETRANGE("Document Type",DocumentType);
      PurchaseLineArchive.SETRANGE("Document No.",DocumentNo);
      PurchaseLineArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesDocumentArchive@2(VAR SalesHeaderArchive@1000 : Record 5107;SalesHeader@1001 : Record 36);
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchDocumentArchive@17(VAR PurchaseHeaderArchive@1000 : Record 5109;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeaderArchive.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyDimOnSalesArchHeader@53(SalesHeader@1000 : Record 36);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
    BEGIN
      FindSalesDocumentArchive(SalesHeaderArchive,SalesHeader);
      SalesHeaderArchive.TESTFIELD("Dimension Set ID",SalesHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimOnSalesArchLine@57(SalesHeader@1000 : Record 36);
    VAR
      SalesLineArchive@1001 : Record 5108;
    BEGIN
      FindSalesLineArchive(SalesLineArchive,SalesHeader."Document Type",SalesHeader."No.");
      SalesLineArchive.TESTFIELD("Dimension Set ID",SalesHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimOnPurchArchHeader@26(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
    BEGIN
      FindPurchDocumentArchive(PurchaseHeaderArchive,PurchaseHeader);
      PurchaseHeaderArchive.TESTFIELD("Dimension Set ID",PurchaseHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimOnPurchArchLine@25(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLineArchive@1001 : Record 5110;
    BEGIN
      FindPurchaseLineArchive(PurchaseLineArchive,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLineArchive.TESTFIELD("Dimension Set ID",PurchaseHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimSetEntry@220(VAR TempDimensionSetEntry@1000 : TEMPORARY Record 480;DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      REPEAT
        DimensionSetEntry.SETRANGE("Dimension Code",TempDimensionSetEntry."Dimension Code");
        DimensionSetEntry.FINDFIRST;
        DimensionSetEntry.TESTFIELD("Dimension Value Code",TempDimensionSetEntry."Dimension Value Code");
      UNTIL TempDimensionSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderArchive@117(PurchaseHeader@1003 : Record 38;PurchaseLine@1000 : Record 39;VersionNo@1001 : Integer);
    VAR
      PurchaseHeaderArchive@1007 : Record 5109;
      PurchaseLineArchive@1006 : Record 5110;
    BEGIN
      FindPurchDocumentArchive(PurchaseHeaderArchive,PurchaseHeader);
      PurchaseHeaderArchive.SETRANGE("Version No.",VersionNo);
      PurchaseHeaderArchive.FINDFIRST;
      PurchaseHeaderArchive.TESTFIELD("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");

      FindPurchaseLineArchive(PurchaseLineArchive,PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLineArchive.TESTFIELD("No.",PurchaseLine."No.");
      PurchaseLineArchive.TESTFIELD("Qty. to Receive",PurchaseLine."Qty. to Receive");
      PurchaseLineArchive.TESTFIELD("Quantity Received",0);  // Verifying Quantity Received should be zero.
    END;

    LOCAL PROCEDURE VerifySalesOrderArchive@86(SalesHeader@1003 : Record 36;SalesLine@1000 : Record 37;VersionNo@1008 : Integer);
    VAR
      SalesHeaderArchive@1007 : Record 5107;
      SalesLineArchive@1006 : Record 5108;
    BEGIN
      FindSalesDocumentArchive(SalesHeaderArchive,SalesHeader);
      SalesHeaderArchive.SETRANGE("Version No.",VersionNo);
      SalesHeaderArchive.FINDFIRST;
      SalesHeaderArchive.TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");

      FindSalesLineArchive(SalesLineArchive,SalesHeader."Document Type",SalesHeader."No.");
      SalesLineArchive.TESTFIELD("No.",SalesLine."No.");
      SalesLineArchive.TESTFIELD("Qty. to Ship",SalesLine."Qty. to Ship");
      SalesLineArchive.TESTFIELD("Quantity Shipped",0);  // Quantity Shipped should be zero.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // Just to Handle the Message.
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesModalPageHandler@60(VAR GetShipmentLines@1000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReceiptLinesModalPageHandler@63(VAR GetReceiptLines@1000 : TestPage 5709);
    BEGIN
      GetReceiptLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Archive]
      1. Verify Dimensions on Archived Sales order.
      2. Verify Dimensions are not deleted on deletion of Archived Sales order.
      3. Verify Dimensions on Archived Purchase order.
      4. Verify Dimensions are not deleted on deletion of Archived Purchase order.
      5. Verify Sales Header Archive and Sales Line Archive values.
      6. Verify Sales Header Archive and Sales Line Archive values with multiple Sales Order Archive.
      7. Verify Purchase Header Archive and Purchase Line Archive values.
      8. Verify Purchase Header Archive and Purchase Line Archive values with multiple Purchase Order Archive .

      TFS_TS_ID = 253371
      Cover Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ---------------------------------------------------------------------
      DimSalesOrderArchive,DimSalesOrderArchiveDelete                237063
      DimPurchOrderArchive,DimPurchOrderArchiveDelete                237063

      TFS_TS_ID = 320048
      Cover Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ---------------------------------------------------------------------
      SalesOrderArchiveWithPartialShip, MultipleSalesOrderArchive    291784
      PurchaseOrderArchiveWithPartialReceive, MultiplePurchaseOrderArchive
    }
    END.
  }
}

