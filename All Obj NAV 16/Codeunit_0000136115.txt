OBJECT Codeunit 136115 Service Quote
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1003 : Codeunit 132201;
      LibrarySales@1004 : Codeunit 130509;
      LibraryService@1001 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      isInitialized@1000 : Boolean;

    LOCAL PROCEDURE Initialize@62();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      COMMIT;
      isInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(StringMenuHandlerOptionThree)]
    PROCEDURE SparePartActionOnServiceLines@1();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItem@1004 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      ItemNo@1000 : Code[20];
    BEGIN
      // Covers document number TC01104 - refer to TFS ID 21647.
      // Test Spare Part Action on Service Line.

      // 1. Setup: Create a new Service Item with a random Customer and new Service Item Component of Type as Item. Create
      // Service Quote for the Service Item - Service Header and Service Item Line.
      Initialize;
      ItemNo := CreateServiceItemWithComponent(ServiceItem);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Create a Service Line for the Service Item with an Item that is different from the Item selected as component.
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ItemNo,ServiceItem."No.");

      // 3. Verify: Check Spare Part Action on Service Line as Blank.
      ServiceLine.TESTFIELD("Spare Part Action",ServiceLine."Spare Part Action"::" ");
    END;

    [Test]
    PROCEDURE ServiceQuoteReport@15();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceQuote@1007 : Report 5902;
      FilePath@1002 : Text[1024];
    BEGIN
      // Covers document number TC01105 - refer to TFS ID 21647.
      // Test generation of Service Quote report.

      // 1. Setup: Create a new Service Item with a random Customer. Create a Service Quote for the Service Item - Service Header,
      // Service Item Line and Service Line with Random Quantity.
      Initialize;
      CreateServiceDocument(ServiceHeader,ServiceHeader."Document Type"::Quote);

      // 2. Exercise: Save Service Quote Report as XML and XLSX in local Temp folder.
      CLEAR(ServiceQuote);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      ServiceQuote.SETTABLEVIEW(ServiceHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceHeader."Document Type") + ServiceHeader."No." + '.xlsx';
      ServiceQuote.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ChangeCustomerOnServiceQuote@2();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1004 : Record 5900;
    BEGIN
      // Covers document number TC01106 - refer to TFS ID 21647.
      // Test changing of the Customer No. on Service Quote.

      // 1. Setup: Create a new Service Item with a random Customer. Create a Service Quote for the Service Item - Service Header,
      // Service Item Line and Service Line with random Quantity.
      Initialize;
      CreateServiceDocument(ServiceHeader,ServiceHeader."Document Type"::Quote);

      // 2. Exercise: Change the Customer No of the Service Quote.
      LibrarySales.CreateCustomer(Customer);
      ServiceHeader.VALIDATE("Customer No.",Customer."No.");
      ServiceHeader.MODIFY(TRUE);

      // 3. Verify: Check that the Customer No. on Service Quote was updated.
      ServiceHeader.TESTFIELD("Customer No.",Customer."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE MakeServiceOrderFromQuote@100();
    VAR
      ServiceHeader@1004 : Record 5900;
    BEGIN
      // Covers document number TC01107 - refer to TFS ID 21647.
      // Test creation of Service Order from Service Quote.

      // 1. Setup: Create a new Service Item with a random Customer. Create a Service Quote for the Service Item - Service Header,
      // Service Item Line and Service Line with random Quantity.
      Initialize;
      CreateServiceDocument(ServiceHeader,ServiceHeader."Document Type"::Quote);

      // 2. Exercise: Convert Service Quote to Service Order.
      CODEUNIT.RUN(CODEUNIT::"Serv-Quote to Order (Yes/No)",ServiceHeader);

      // 3. Verify: Check that the Service Quote is converted to Service Order.
      FindServOrderByQuoteNo(ServiceHeader,ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderReport@19();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceOrder@1007 : Report 5900;
      FilePath@1002 : Text[1024];
    BEGIN
      // Covers document number TC01108 - refer to TFS ID 21647.
      // Test generation of Service Order report.

      // 1. Setup: Create a new Service Item with a random Customer. Create a Service Order for the Service Item - Service Header,
      // Service Item Line and Service Line with Random Quantity.
      Initialize;
      CreateServiceDocument(ServiceHeader,ServiceHeader."Document Type"::Order);

      // 2. Exercise: Save Service Order Report as XML and XLSX in local Temp folder.
      CLEAR(ServiceOrder);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      ServiceOrder.SETTABLEVIEW(ServiceHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceHeader."Document Type") + ServiceHeader."No." + '.xlsx';
      ServiceOrder.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DiscountOnServiceQuote@5();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      CustInvoiceDisc@1007 : Record 19;
      ServiceLines@1001 : TestPage 5905;
    BEGIN
      // Test Unit Price on Service Quote after running Calculate Invoice Discount.

      // 1. Setup: Create Customer with Customer Invoice Discount, Service Header with Document Type as Quote and Service Line with
      // Type as Item.
      Initialize;
      CreateCustomerWithDiscount(CustInvoiceDisc);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,CustInvoiceDisc.Code);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,LibraryInventory.CreateItemNo,'');
      InputUnitPriceInServiceLine(ServiceLine,CustInvoiceDisc."Minimum Amount");

      // 2. Exercise: Run Calculate Invoice Discount.
      CLEAR(ServiceLines);
      ServiceLines.OPENVIEW;
      ServiceLines.FILTER.SETFILTER("Document Type",FORMAT(ServiceLine."Document Type"));
      ServiceLines.FILTER.SETFILTER("Document No.",ServiceLine."Document No.");
      ServiceLines.FIRST;
      ServiceLines."Calculate Invoice Discount".INVOKE;

      // 3. Verify: Verify Unit Price on Service Quote.
      VerifyUnitPrice(ServiceLine,CustInvoiceDisc."Service Charge");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ServiceOrderLineWithPostingDateEqualWorkDate@6();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // [SCENARIO 378534] Service Line of Service Order which was made from Servive Quote is equal Work Date

      Initialize;
      // [GIVEN] Service Quote with "Posting Date" = "01.01". Work Date = "10.01"
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,LibrarySales.CreateCustomerNo);
      ServiceHeader.VALIDATE("Posting Date",ServiceHeader."Posting Date" + 1);
      ServiceHeader.MODIFY(TRUE);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,LibraryInventory.CreateItemNo,'');

      // [WHEN] Make Service Order from Service Quote
      CODEUNIT.RUN(CODEUNIT::"Serv-Quote to Order (Yes/No)",ServiceHeader);

      // [THEN] "Posting Date" of Service Order is "10.01"
      VerifyServiceLinePostingDate(ServiceHeader."No.",WORKDATE);
    END;

    LOCAL PROCEDURE CreateCustomerWithDiscount@34(VAR CustInvoiceDisc@1001 : Record 19);
    VAR
      Customer@1002 : Record 18;
      LibrarySales@1000 : Codeunit 130509;
      LibraryERM@1003 : Codeunit 131300;
    BEGIN
      LibrarySales.CreateCustomer(Customer);

      // Use Random for Minimum Amount and Service Charge.
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,Customer."No.",'',RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      CustInvoiceDisc.VALIDATE("Service Charge",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocument@4(VAR ServiceHeader@1003 : Record 5900;Type@1006 : Option);
    VAR
      Customer@1005 : Record 18;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1000 : Record 5902;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,Type,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,LibraryInventory.CreateItemNo,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceItemWithComponent@75(VAR ServiceItem@1000 : Record 5940) : Code[20];
    VAR
      Item@1001 : Record 27;
      ServiceItemComponent@1004 : Record 5941;
    BEGIN
      // Create a new Service Item with random Service Item Components.
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceItemComponent(ServiceItemComponent,ServiceItem."No.",ServiceItemComponent.Type::Item,Item."No.");
      Item.NEXT;
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateServiceLineWithItem@33(VAR ServiceLine@1003 : Record 5902;ServiceHeader@1001 : Record 5900;ItemNo@1002 : Code[20];ServiceItemNo@1000 : Code[20]);
    BEGIN
      // Create Service Line with random value for Quantity.
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Required field - value is not important to test case.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InputUnitPriceInServiceLine@48(VAR ServiceLine@1003 : Record 5902;UnitPrice@1004 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Unit Price",UnitPrice);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindServOrderByQuoteNo@14(VAR ServiceHeader@1000 : Record 5900;QuoteNo@1001 : Code[20]);
    BEGIN
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.SETRANGE("Quote No.",QuoteNo);
      ServiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyUnitPrice@88(ServiceLine@1000 : Record 5902;UnitPrice@1001 : Decimal);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::"G/L Account");
      ServiceLine.FINDFIRST;
      ServiceLine.TESTFIELD(Quantity,1);  // Use 1 as it's required for test case.
      ServiceLine.TESTFIELD("Unit Price",UnitPrice);
    END;

    LOCAL PROCEDURE VerifyServiceLinePostingDate@8(QuoteNo@1000 : Code[20];ExpectedPostingDate@1001 : Date);
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      FindServOrderByQuoteNo(ServiceHeader,QuoteNo);
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDFIRST;
      ServiceLine.TESTFIELD("Posting Date",ExpectedPostingDate);
    END;

    [StrMenuHandler]
    PROCEDURE StringMenuHandlerOptionThree@28(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Choose the third option of the string menu.
      Choice := 3;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@3(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@13(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Quote] [Service]
      Unsupported version tags:
      NA: Unable to Execute

      Test for CRM Service - Check the functionalities of Service Quotes:
        1. Test Spare Part Action on Service Line.
        2. Test if Service Quote report is generated correctly.
        3. Test if Customer No. can be changed on Service Quotes.
        4. Test creation of Service Order from Service Quotes.
        5. Test if Service Order report is generated correctly.
        6. Test Unit Price on Service Quote after running Calculate Invoice Discount.

      TFS_TS_ID = 21647
      Covered Test cases:
        TC01104 TFS_TC_ID=31576 and 5792
        TC01105 TFS_TC_ID=31577 and 5793
        TC01106 TFS_TC_ID=31578 and 5794
        TC01107 TFS_TC_ID=31579 and 5795
        TC01108 TFS_TC_ID=31580 and 5796

      TFS_TS_ID = 245124
      Covers Test cases:
      ------------------------------------
      Test Function Name            TFS ID
      ------------------------------------
      DiscountOnServiceQuote        141349
    }
    END.
  }
}

