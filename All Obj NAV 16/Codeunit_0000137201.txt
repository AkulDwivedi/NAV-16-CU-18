OBJECT Codeunit 137201 SCM Sales Price Wksht
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      InventorySetup@1007 : Record 313;
      GeneralLedgerSetup@1006 : Record 98;
      ManufacturingSetup@1011 : Record 99000765;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryERM@1003 : Codeunit 131300;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryCosting@1008 : Codeunit 132200;
      LibrarySetupStorage@1009 : Codeunit 131009;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;

    [Test]
    PROCEDURE LineDiscountWithSalesPrice@21();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      SalesLine@1003 : Record 37;
      Item@1002 : Record 27;
      Customer@1000 : Record 18;
      SalesPrice@1004 : Record 7002;
      MinimumQty@1008 : Decimal;
      NewUnitPrice@1005 : Decimal;
    BEGIN
      // Setup: Create Sales Price Setup with Line Discount.
      Initialize;
      CreateSalesPriceSetup(SalesReceivablesSetup,Item,Customer);
      MinimumQty := LibraryRandom.RandDec(5,2) + 10;  // Random values not important.
      NewUnitPrice := Item."Unit Price" - LibraryRandom.RandInt(5);
      CreateSalesPrice(Item,SalesPrice."Sales Type"::Customer,Customer."No.",NewUnitPrice,MinimumQty);
      CreateSalesLineDiscount(Item,Customer."No.",MinimumQty);

      // Exercise: Create Sales Order.
      CreateSalesOrder(SalesLine,Customer."No.",Item."No.",MinimumQty);

      // Verify: Verify Line Amount on Sales Line as per reduced Sales Price.
      VerifySalesLine(SalesLine,NewUnitPrice,MinimumQty,GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
    END;

    [Test]
    PROCEDURE SuggestSalesPriceWithDiscount@1();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      SalesLine@1006 : Record 37;
      Item@1004 : Record 27;
      Customer@1003 : Record 18;
      SalesPriceWorksheet@1010 : Record 7023;
      SalesPrice@1001 : Record 7002;
      NewUnitPrice@1012 : Decimal;
      MinimumQty@1000 : Decimal;
      SalesType@1005 : 'Customer,Customer Price Group,All Customers,Campaign';
    BEGIN
      // Setup: Create Sales Price Setup with Line Discount and suggest new Sales Price.
      Initialize;
      SalesPriceWorksheet.DELETEALL;
      CreateSalesPriceSetup(SalesReceivablesSetup,Item,Customer);
      MinimumQty := LibraryRandom.RandDec(5,2) + 10;  // Random values not important.
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::Customer,Customer."No.",Item."Unit Price" - LibraryRandom.RandInt(5),MinimumQty);
      CreateSalesLineDiscount(Item,Customer."No.",MinimumQty);
      LibraryCosting.SuggestSalesPriceWorksheet(Item,Customer."No.",SalesType::Customer,0,1);  // Values important for test.
      NewUnitPrice := ImplementNewSalesPrice;

      // Exercise: Create Sales Order.
      CreateSalesOrder(SalesLine,Customer."No.",Item."No.",MinimumQty);

      // Verify: Verify Line Amount on Sales Line.
      VerifySalesLine(SalesLine,NewUnitPrice,MinimumQty,GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
    END;

    [Test]
    PROCEDURE SuggestItemPriceForCustomer@6();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      SalesLine@1006 : Record 37;
      Item@1004 : Record 27;
      SalesPrice@1001 : Record 7002;
      Customer@1003 : Record 18;
      SalesPriceWorksheet@1010 : Record 7023;
      NewUnitPrice@1012 : Decimal;
      MinimumQty@1000 : Decimal;
      SalesType@1005 : 'Customer,Customer Price Group,All Customers,Campaign';
    BEGIN
      // Setup: Create Sales Price Setup. Suggest Item Price and implement new price.
      Initialize;
      SalesPriceWorksheet.DELETEALL;
      CreateSalesPriceSetup(SalesReceivablesSetup,Item,Customer);
      MinimumQty := LibraryRandom.RandDec(5,2) + 10;  // Random values not important.
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::Customer,Customer."No.",Item."Unit Price" - LibraryRandom.RandInt(5),MinimumQty);
      LibraryCosting.SuggestItemPriceWorksheet(Item,Customer."No.",SalesType::Customer,0,1);  // Values important for test.
      NewUnitPrice := ImplementNewSalesPrice;

      // Exercise: Create Sales Order.
      CreateSalesOrder(SalesLine,Customer."No.",Item."No.",MinimumQty);

      // Verify: Verify Line Amount on Sales Line.
      SalesLine.TESTFIELD(
        "Line Amount",ROUND(NewUnitPrice * MinimumQty,GeneralLedgerSetup."Inv. Rounding Precision (LCY)"));
    END;

    [Test]
    PROCEDURE SuggestSalesPriceAllCustomers@26();
    VAR
      SalesReceivablesSetup@1007 : Record 311;
      SalesHeader@1013 : Record 36;
      SalesLine@1006 : Record 37;
      Item@1005 : Record 27;
      Customer@1004 : Record 18;
      SalesPriceWorksheet@1003 : Record 7023;
      SalesPrice@1008 : Record 7002;
      CustomerPriceGroup@1009 : Record 6;
      NewUnitPrice@1001 : ARRAY [3] OF Decimal;
      Quantity@1011 : ARRAY [3] OF Decimal;
      MinimumQty@1000 : Decimal;
      NoOfSalesLines@1012 : Integer;
      SalesType@1014 : 'Customer,Customer Price Group,All Customers,Campaign';
      Count@1002 : Integer;
    BEGIN
      // Setup: Create Sales Price Setup.
      Initialize;
      SalesPriceWorksheet.DELETEALL;

      // Create different Sales Prices for Customer, Customer Price Group and All Customer. Unit Prices and Quantities important for test.
      CreateSalesPriceSetup(SalesReceivablesSetup,Item,Customer);
      MinimumQty := LibraryRandom.RandDec(5,2) + 10;  // Random values not important.
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::Customer,Customer."No.",Item."Unit Price" - LibraryRandom.RandInt(5),MinimumQty);
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      UpdateCustomer(Customer,CustomerPriceGroup.Code);
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroup.Code,
        Item."Unit Price" - LibraryRandom.RandInt(5),MinimumQty + 10);
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::"All Customers",'',
        Item."Unit Price" - LibraryRandom.RandInt(5),MinimumQty + 100);
      LibraryCosting.SuggestSalesPriceWorksheet(Item,Customer."No.",SalesType::Customer,0,1);  // Values important for test.
      NoOfSalesLines := UpdateSalesPriceWorksheet(SalesPriceWorksheet,NewUnitPrice,Quantity);
      LibraryCosting.ImplementPriceChange(SalesPriceWorksheet);

      // Exercise: Create Sales Order with three different Sales line for different Quantities.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      FOR Count := 1 TO NoOfSalesLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity[Count]);

      // Verify: Verify Line Amounts on Sales Lines.
      FOR Count := 1 TO NoOfSalesLines DO BEGIN
        SelectSalesLine(SalesLine,SalesHeader,Quantity[Count]);
        SalesLine.TESTFIELD(
          "Line Amount",
          ROUND(NewUnitPrice[Count] * Quantity[Count],GeneralLedgerSetup."Inv. Rounding Precision (LCY)"));
      END;
    END;

    [Test]
    PROCEDURE SuggestSalesPriceForCampaign@12();
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      Item@1004 : Record 27;
      Customer@1003 : Record 18;
      SalesPriceWorksheet@1010 : Record 7023;
      SalesPrice@1005 : Record 7002;
      Campaign@1008 : Record 5071;
      LibraryMarketing@1007 : Codeunit 131900;
      NewUnitPrice@1012 : Decimal;
      MinimumQty@1000 : Decimal;
      SalesType@1011 : 'Customer,Customer Price Group,All Customers,Campaign';
    BEGIN
      // Setup: Create Sales Price Setup for Campaign.
      Initialize;
      SalesReceivablesSetup.GET;
      UpdateSalesReceivablesSetup(FALSE);
      SalesPriceWorksheet.DELETEALL;
      MinimumQty := LibraryRandom.RandDec(5,2) + 10;  // Random values not important.
      LibraryInventory.CreateItem(Item);
      UpdateItem(Item,Item.FIELDNO("Unit Price"),LibraryRandom.RandDec(5,2) + 10);  // Random values not important.
      LibrarySales.CreateCustomer(Customer);
      LibraryMarketing.CreateCampaign(Campaign);
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::Campaign,Campaign."No.",
        Item."Unit Price" - LibraryRandom.RandInt(5),MinimumQty);  // Random values not important.
      LibraryCosting.SuggestItemPriceWorksheet(Item,Campaign."No.",SalesType::Campaign,0,1);  // Values important for test.
      UpdateCampaignSalesPrices(Item,Campaign."No.",SalesPrice."Minimum Quantity");

      // Exercise: Implement Price Changes.
      NewUnitPrice := ImplementNewSalesPrice;

      // Verify: Verify Unit Price updated with new Sales price.
      SalesPrice.SETRANGE("Item No.",Item."No.");
      SalesPrice.FINDFIRST;
      SalesPrice.TESTFIELD("Unit Price",NewUnitPrice);
    END;

    [Test]
    PROCEDURE LineDiscountWithPurchasePrice@20();
    VAR
      PurchaseLine@1003 : Record 39;
      Item@1002 : Record 27;
      Vendor@1000 : Record 23;
      PurchasePrice@1004 : Record 7012;
      MinimumQty@1008 : Decimal;
      ExpectedLineAmount@1001 : Decimal;
    BEGIN
      // Setup: Create Item, Vendor, Purchase Price and Purchase Line Discount.
      Initialize;
      MinimumQty := LibraryRandom.RandDec(5,2) + 10;  // Random values not important.
      LibraryInventory.CreateItem(Item);
      UpdateItem(Item,Item.FIELDNO("Unit Cost"),LibraryRandom.RandDec(5,2) + 10);  // Random values not important.
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchasePrice(PurchasePrice,Item,Vendor."No.",MinimumQty);
      CreatePurchaseLineDiscount(Item,Vendor."No.",MinimumQty);

      // Exercise: Create Purchase Order.
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",MinimumQty);

      // Verify: Verify Line Amount on Purchase Line with reduced unit cost.
      ExpectedLineAmount :=
        ROUND((PurchasePrice."Direct Unit Cost" * MinimumQty) -
          ((PurchasePrice."Direct Unit Cost" * MinimumQty) * PurchaseLine."Line Discount %" / 100),
          GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
      PurchaseLine.TESTFIELD("Line Amount",ExpectedLineAmount);
    END;

    [Test]
    PROCEDURE PurchaseOrderExpReceiptDate@3();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      ItemVendor@1002 : Record 99;
      PurchaseLine@1005 : Record 39;
      ExpectedReceiptDate@1007 : Date;
      DateWithLeadTimeCalc@1008 : Date;
      DateWithSafetyLeadTime@1009 : Date;
    BEGIN
      // Setup: Create Item, Vendor and Item Vendor with Lead Time Calculation value.
      Initialize;
      ManufacturingSetup.GET;
      InventorySetup.GET;
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryInventory.CreateItemVendor(ItemVendor,Vendor."No.",Item."No.");
      UpdateItemVendor(ItemVendor);

      // Exercise: Create Purchase Order with quantity not required on Purchase Line.
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",0);
      DateWithLeadTimeCalc := CALCDATE(ItemVendor."Lead Time Calculation",PurchaseLine."Order Date");
      DateWithSafetyLeadTime := CALCDATE(ManufacturingSetup."Default Safety Lead Time",DateWithLeadTimeCalc);
      ExpectedReceiptDate := CALCDATE(InventorySetup."Inbound Whse. Handling Time",DateWithSafetyLeadTime);

      // Verify: Verify Expected Receipt Date on Purchase Line.
      PurchaseLine.TESTFIELD("Expected Receipt Date",ExpectedReceiptDate);
    END;

    [Test]
    PROCEDURE CheckSalesPricePageforCustomerPriceGroup@8();
    VAR
      CustomerPriceGroup@1000 : Record 6;
      Item@1001 : Record 27;
      SalesPrice@1002 : Record 7002;
    BEGIN
      // Check Customer Price Group page opened successfully with Correct Values.

      // Setup: Create Sales Price Setup.
      Initialize;
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      LibraryInventory.CreateItem(Item);

      // Create Sales Prices for Customer Price Group.
      CreateSalesPrice(
        Item,SalesPrice."Sales Type"::"Customer Price Group",CustomerPriceGroup.Code,
        LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandIntInRange(5,10));

      // Verify: Verify Customer Discount Group Code and Type on Sales Price Page.
      VerifySalesPriceLineOnPage(CustomerPriceGroup);
    END;

    [Test]
    PROCEDURE CurrentPriceIsFilledWithActualSalesPrice@30();
    VAR
      Item@1000 : Record 27;
      SalesPrice@1001 : Record 7002;
      ItemUnitPrice@1003 : Decimal;
      ActualSalesPrice@1004 : Decimal;
    BEGIN
      // [SCENARIO 381656] Current Unit Price on sales price worksheet is equal to current sales price if the latter exists.
      Initialize;

      // [GIVEN] Item with Unit Price "X".
      ItemUnitPrice := LibraryRandom.RandDec(10,2);
      CreateItemWithUnitPrice(Item,ItemUnitPrice);

      // [GIVEN] All customers' sales price "Y" for Item.
      ActualSalesPrice := LibraryRandom.RandDecInRange(11,20,2);
      CreateSalesPrice(Item,SalesPrice."Sales Type"::"All Customers",'',ActualSalesPrice,0);

      // [WHEN] Run "Suggest Item Price" on sales price worksheet.
      LibraryCosting.SuggestItemPriceWorksheet(
        Item,'',SalesPrice."Sales Type"::"All Customers",0,LibraryRandom.RandIntInRange(2,5));

      // [THEN] "Current Unit Price" on sales price worksheet line = "Y".
      VerifySalesPriceWorksheet(Item."No.",ActualSalesPrice);
    END;

    [Test]
    PROCEDURE CurrentPriceIsFilledWithItemUnitPriceIfSalesPriceDoesNotExist@28();
    VAR
      Item@1003 : Record 27;
      SalesPrice@1002 : Record 7002;
      ItemUnitPrice@1001 : Decimal;
    BEGIN
      // [SCENARIO 381656] Current Unit Price on sales price worksheet is equal to Unit Price of Item if current sales price does not exist.
      Initialize;

      // [GIVEN] Item with Unit Price "X".
      ItemUnitPrice := LibraryRandom.RandDec(10,2);
      CreateItemWithUnitPrice(Item,ItemUnitPrice);

      // [WHEN] Run "Suggest Item Price" on sales price worksheet.
      LibraryCosting.SuggestItemPriceWorksheet(
        Item,'',SalesPrice."Sales Type"::"All Customers",0,LibraryRandom.RandIntInRange(2,5));

      // [THEN] "Current Unit Price" on sales price worksheet line = "X".
      VerifySalesPriceWorksheet(Item."No.",ItemUnitPrice);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      GeneralLedgerSetup.GET;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@16(StockoutWarning@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@52(VAR Item@1000 : Record 27;UnitPrice@1001 : Decimal);
    BEGIN
      LibraryInventory.CreateItem(Item);
      UpdateItem(Item,Item.FIELDNO("Unit Price"),UnitPrice);
    END;

    LOCAL PROCEDURE CreateSalesPriceSetup@19(VAR SalesReceivablesSetup@1005 : Record 311;VAR Item@1000 : Record 27;VAR Customer@1001 : Record 18);
    BEGIN
      SalesReceivablesSetup.GET;
      UpdateSalesReceivablesSetup(FALSE);
      LibraryInventory.CreateItem(Item);
      UpdateItem(Item,Item.FIELDNO("Unit Price"),LibraryRandom.RandDec(5,2) + 100);  // Random values not important.
      LibrarySales.CreateCustomer(Customer);
    END;

    LOCAL PROCEDURE CreateSalesPrice@24(Item@1003 : Record 27;SalesType@1001 : Option;SalesCode@1002 : Code[20];UnitPrice@1000 : Decimal;Quantity@1004 : Decimal);
    VAR
      SalesPrice@1005 : Record 7002;
    BEGIN
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesType,SalesCode,Item."No.",WORKDATE,'','',Item."Base Unit of Measure",Quantity);
      SalesPrice.VALIDATE("Unit Price",UnitPrice);
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineDiscount@22(Item@1003 : Record 27;CustomerNo@1004 : Code[20];MinimumQty@1001 : Decimal);
    VAR
      SalesLineDiscount@1000 : Record 7004;
    BEGIN
      // Random Value for Line Discount percentage is not important.
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,Item."No.",
        SalesLineDiscount."Sales Type"::Customer,CustomerNo,WORKDATE,'','',Item."Base Unit of Measure",MinimumQty);
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasePrice@17(VAR PurchasePrice@1003 : Record 7012;Item@1004 : Record 27;VendorNo@1002 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryCosting.CreatePurchasePrice(
        PurchasePrice,VendorNo,Item."No.",WORKDATE,'','',Item."Base Unit of Measure",Quantity);
      PurchasePrice.VALIDATE("Direct Unit Cost",Item."Unit Cost" - LibraryRandom.RandInt(5));  // Value important for test.
      PurchasePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineDiscount@9(Item@1001 : Record 27;VendorNo@1003 : Code[20];MinimumQty@1002 : Decimal);
    VAR
      PurchaseLineDiscount@1000 : Record 7014;
    BEGIN
      // Random Value for Line Discount percentage is not important.
      LibraryERM.CreateLineDiscForVendor(
        PurchaseLineDiscount,Item."No.",VendorNo,WORKDATE,'','',Item."Base Unit of Measure",MinimumQty);
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItem@31(VAR Item@1000 : Record 27;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Item based on Field and its corresponding value.
      RecRef.GETTABLE(Item);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(Item);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@10(VAR SalesLine@1000 : Record 37;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];MinimumQty@1003 : Decimal);
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,MinimumQty);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@15(VAR PurchaseLine@1003 : Record 39;VendorNo@1002 : Code[20];ItemNo@1001 : Code[20];MinimumQty@1000 : Decimal);
    VAR
      PurchaseHeader@1004 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,MinimumQty);
    END;

    LOCAL PROCEDURE ImplementNewSalesPrice@18() NewUnitPrice : Decimal;
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      SalesPriceWorksheet.FINDFIRST;
      SalesPriceWorksheet.VALIDATE(
        "New Unit Price",SalesPriceWorksheet."New Unit Price" - LibraryRandom.RandInt(5));  // Value important for test.
      SalesPriceWorksheet.MODIFY(TRUE);
      NewUnitPrice := SalesPriceWorksheet."New Unit Price";
      LibraryCosting.ImplementPriceChange(SalesPriceWorksheet);
    END;

    LOCAL PROCEDURE UpdateSalesPriceWorksheet@5(VAR SalesPriceWorksheet@1000 : Record 7023;VAR NewUnitPrice@1001 : ARRAY [3] OF Decimal;VAR Quantity@1002 : ARRAY [3] OF Decimal) Count : Integer;
    BEGIN
      Count := 0;
      SalesPriceWorksheet.FINDSET;
      REPEAT
        Count += 1;
        SalesPriceWorksheet.VALIDATE("New Unit Price",SalesPriceWorksheet."New Unit Price" - LibraryRandom.RandInt(5));
        SalesPriceWorksheet.MODIFY(TRUE);
        NewUnitPrice[Count] := SalesPriceWorksheet."New Unit Price";
        Quantity[Count] := SalesPriceWorksheet."Minimum Quantity";
      UNTIL SalesPriceWorksheet.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateCampaignSalesPrices@25(Item@1000 : Record 27;CampaignNo@1003 : Code[20];MinimumQuantity@1004 : Decimal);
    VAR
      SalesPrice@1001 : Record 7002;
      SalesPriceWorksheet@1002 : Record 7023;
      SalesType@1005 : 'Customer,Customer Price Group,All Customers,Campaign';
    BEGIN
      SalesPrice.SETRANGE("Item No.",Item."No.");
      SalesPrice.FINDFIRST;
      SalesPriceWorksheet.FINDFIRST;
      SalesPriceWorksheet.RENAME(
        WORKDATE,WORKDATE,SalesType::Campaign,CampaignNo,'',Item."No.",'',Item."Base Unit of Measure",MinimumQuantity);
    END;

    LOCAL PROCEDURE UpdateItemVendor@36(VAR ItemVendor@1000 : Record 99);
    VAR
      LeadTimeCalculation@1001 : DateFormula;
    BEGIN
      EVALUATE(LeadTimeCalculation,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');  // Value not important for test.
      ItemVendor.VALIDATE("Lead Time Calculation",LeadTimeCalculation);
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCustomer@29(VAR Customer@1000 : Record 18;CustomerPriceGroupCode@1001 : Code[10]);
    BEGIN
      Customer.VALIDATE("Customer Price Group",CustomerPriceGroupCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectSalesLine@7(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;Quantity@1002 : Decimal);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Quantity,Quantity);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifySalesLine@2(SalesLine@1000 : Record 37;UnitPrice@1001 : Decimal;MinimumQty@1002 : Decimal;InvRoundingPrecision@1003 : Decimal);
    VAR
      ExpectedLineAmount@1004 : Decimal;
    BEGIN
      ExpectedLineAmount :=
        ROUND((UnitPrice * MinimumQty) -
          ((UnitPrice * MinimumQty) * SalesLine."Line Discount %" / 100),InvRoundingPrecision);
      SalesLine.TESTFIELD("Line Amount",ExpectedLineAmount);
    END;

    LOCAL PROCEDURE VerifySalesPriceLineOnPage@13(CustomerPriceGroup@1000 : Record 6);
    VAR
      CustomerPriceGroups@1002 : TestPage 7;
      SalesPrices@1003 : TestPage 7002;
    BEGIN
      CustomerPriceGroups.OPENEDIT;
      CustomerPriceGroups.GOTORECORD(CustomerPriceGroup);
      SalesPrices.TRAP;
      CustomerPriceGroups.SalesPrices.INVOKE;
      SalesPrices.SalesCodeFilterCtrl.ASSERTEQUALS(CustomerPriceGroup.Code);
    END;

    LOCAL PROCEDURE VerifySalesPriceWorksheet@50(ItemNo@1002 : Code[20];CurrentUnitPrice@1000 : Decimal);
    VAR
      SalesPriceWorksheet@1001 : Record 7023;
    BEGIN
      WITH SalesPriceWorksheet DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        TESTFIELD("Current Unit Price",CurrentUnitPrice);
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Price] [Order] [SCM]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute
      NZ: Unable to Execute

      Test Prices using Sales Price Worksheet:
       1. Create Sales Price Setup with Line Discount. Check Line Amount on Sales Order.
       2. Create Sales Price Setup with Line Discount. Suggest and Implement new Sales Price. Check Line Amount on Sales Order.
       3. Create Sales Price Setup. Suggest Item Price and implement new price. Check Line Amount on Sales Order.
       4. Create different Sales Prices for Customer, Customer Price Group and All Customer. Check Line Amount on Sales Order.
       5. Create Sales Price Setup for Campaign. Check new Sales Price update in Sales Price.
       6. Create Purchase Price with Purchase Line Discount. Check Line Amount on Purchase Order.
       7. Create Item Vendor with Lead Time Calculation value with random days. Check Expected Receipt Date on Purchase Order.
       8. Check Customer Price Group page opened successfully with Correct Values.

        Covers Test Cases:
        -------------------------------------------------------------------
        Test Function Name                       TFS ID
        -------------------------------------------------------------------
        LineDiscountWithSalesPrice                129300
        SuggestSalesPriceWithDiscount             129300
        SuggestItemPriceForCustomer               129300
        SuggestSalesPriceAllCustomers             129300
        SuggestSalesPriceForCampaign              129300
        LineDiscountWithPurchasePrice             129300
        PurchaseOrderExpReceiptDate               129300

      Covers Test cases: for Sicily Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                             TFS ID
      -----------------------------------------------------------------------------------------------------
      CheckSalesPricePageforCustomerPriceGroup                                                        71341
    }
    END.
  }
}

