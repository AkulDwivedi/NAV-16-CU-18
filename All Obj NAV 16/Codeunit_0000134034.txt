OBJECT Codeunit 134034 ERM Cust Date Compress Manual
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      EntryError@1003 : TextConst 'ENU=Entries posted after Date Compression End Date must not be compressed.';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressionByWeek@4();
    VAR
      DateComprRegister@1001 : Record 87;
    BEGIN
      // Check that entry Posted outside the Date Compression Period is not present in Compressed Customer Ledger Entries after
      // Running Date Compression by Week. Take One Week Difference between Entries.
      Initialize;
      CustomerDateCompression(DateComprRegister."Period Length"::Week,'<1W>');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressionByMonth@24();
    VAR
      DateComprRegister@1001 : Record 87;
    BEGIN
      // Check that entry Posted outside the Date Compression Period is not present in Compressed Customer Ledger Entries after
      // Running Date Compression by Month. Take One Month Difference between Entries.
      Initialize;
      CustomerDateCompression(DateComprRegister."Period Length"::Month,'<1M>');
    END;

    LOCAL PROCEDURE CustomerDateCompression@7(DateCompessionPeriod@1003 : Option;PeriodDifference@1005 : Text[10]);
    VAR
      GenJournalLine@1007 : Record 81;
      Customer@1008 : Record 18;
      LibrarySales@1006 : Codeunit 130509;
      LibraryFiscalYear@1001 : Codeunit 131302;
      PostingDate@1002 : Date;
      Counter@1000 : Integer;
    BEGIN
      // Setup: Close any open Fiscal Year. Create Customer, Post multiple Invoice and Payment Entries on different dates for Customer
      // and apply Payment over Invoice.
      LibraryFiscalYear.CloseFiscalYear;
      PostingDate := LibraryFiscalYear.GetFirstPostingDate(TRUE);
      LibrarySales.CreateCustomer(Customer);
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(2) DO BEGIN
        CreateAndPostGenJournalLines(GenJournalLine,Customer."No.",PostingDate,PeriodDifference);
        ApplyAndPostCustomerEntry(GenJournalLine);
        PostingDate := GenJournalLine."Posting Date";
      END;

      // Exercise: Run the Date Compress Customer Ledger Batch Report as per the option selected.
      DateCompressForCustomer(GenJournalLine,LibraryFiscalYear.GetFirstPostingDate(TRUE),DateCompessionPeriod);

      // Verify: Verify that Last Posted Entry must not be compressed.
      VerifyCustomerLedgerEntry(GenJournalLine."Posting Date");
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLines@6(VAR GenJournalLine@1000 : Record 81;CustomerNo@1001 : Code[20];PostingDate@1002 : Date;PeriodDifference@1003 : Text[10]);
    VAR
      GenJournalBatch@1004 : Record 232;
    BEGIN
      // Create Journal Lines with Random Decimal Amount and Post them. Take Invoice Value always greater than Payment.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,CustomerNo,PostingDate,
        1 + LibraryRandom.RandDec(50,2));
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,CustomerNo,
        CALCDATE('<' + PeriodDifference + '>',GenJournalLine."Posting Date"),
        -(GenJournalLine.Amount - LibraryRandom.RandDec(1,2)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerEntry@29(GenJournalLine@1004 : Record 81);
    VAR
      CustLedgerEntry@1003 : Record 21;
      CustLedgerEntry2@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,GenJournalLine.Amount);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");
      CustLedgerEntry2.CALCFIELDS("Remaining Amount");
      CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
      CustLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@40(VAR GenJournalLine@1005 : Record 81;GenJournalBatch@1000 : Record 232;DocumentType@1003 : Option;CustomerNo@1002 : Code[20];PostingDate@1001 : Date;Amount@1004 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DateCompressForCustomer@12(GenJournalLine@1002 : Record 81;StartingDate@1005 : Date;PeriodLength@1003 : Option);
    VAR
      CustLedgerEntry@1000 : Record 21;
      DateCompressCustomerLedger@1001 : Report 198;
    BEGIN
      // Run the Date Compress Customer Ledger Report. Take End Date a Day before Last Posted Entry's Posting Date.
      CustLedgerEntry.SETRANGE("Customer No.",GenJournalLine."Account No.");
      DateCompressCustomerLedger.SETTABLEVIEW(CustLedgerEntry);
      DateCompressCustomerLedger.InitializeRequest(
        StartingDate,CALCDATE('<-1D>',GenJournalLine."Posting Date"),PeriodLength,'',FALSE,FALSE,FALSE,'');
      DateCompressCustomerLedger.USEREQUESTPAGE(FALSE);
      DateCompressCustomerLedger.RUN;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@9(LastPostingDate@1000 : Date);
    VAR
      CustLedgerEntry@1001 : Record 21;
      GLRegister@1002 : Record 45;
    BEGIN
      GLRegister.FINDLAST;
      CustLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      CustLedgerEntry.FINDSET;
      REPEAT
        Assert.AreNotEqual(LastPostingDate,CustLedgerEntry."Posting Date",EntryError);
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler for Date Compression confirmation message.
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Date Compression] [Sales]
      Unsupported version tags:
      ES: Unable to Execute

      Test Customer Date Compression functionality for Entry posted outside Date Compression Period.
        1. Test Date Compression for Entry posted outside Date Compression Period with Period Length: Week.
        2. Test Date Compression for Entry posted outside Date Compression Period with Period Length: Month.

      Covers test cases:
            -------------------------------------------------------
            Test Function Name               Test TFS ID
            -------------------------------------------------------
            DateCompressionByWeek            127766,125034
            DateCompressionByMonth           127766,125035
    }
    END.
  }
}

