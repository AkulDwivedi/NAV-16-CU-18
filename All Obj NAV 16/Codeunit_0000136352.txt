OBJECT Codeunit 136352 UT T Job Task Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      Assert@1000 : Codeunit 130000;
      Text001@1004 : TextConst 'ENU=Rolling back changes...';
      IsInitialized@1005 : Boolean;

    LOCAL PROCEDURE Initialize@9();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE SetUp@1();
    VAR
      LibraryJob@1000 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY;

      LibraryJob.CreateJobTask(Job,JobTask);

      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
    END;

    [Normal]
    LOCAL PROCEDURE TearDown@2();
    BEGIN
      CLEAR(Job);
      CLEAR(JobTask);
      CLEAR(JobPlanningLine);
      ASSERTERROR ERROR(Text001);
      IsInitialized := FALSE;
    END;

    [Test]
    PROCEDURE TestDeletion@4();
    VAR
      JobWIPTotal@1000 : Record 1021;
    BEGIN
      Initialize;
      SetUp;

      // Verify that a Job Task can be deleted and that all Job Planning Lines and Job WIP Totals are deleted as well.
      JobWIPTotal.INIT;
      JobWIPTotal."Job No." := Job."No.";
      JobWIPTotal."Job Task No." := JobTask."Job Task No.";
      JobWIPTotal.INSERT;

      Assert.IsTrue(JobTask.DELETE(TRUE),'The Job Task could not be deleted.');
      JobPlanningLine.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobWIPTotal.SETRANGE("Job No.",JobTask."Job No.");
      JobWIPTotal.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobWIPTotal.SETRANGE("Posted to G/L",FALSE);
      Assert.IsFalse(JobPlanningLine.FINDFIRST,'Job Planning Lines still exist after deletion of Record.');
      Assert.IsFalse(JobWIPTotal.FINDFIRST,'Job WIP Totals still exist after deletion of Record.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestModification@6();
    VAR
      JobWIPEntry@1000 : Record 1004;
    BEGIN
      Initialize;
      SetUp;

      // Verify that a Job Task can be modified:
      JobTask.Description := 'Test';
      Assert.IsTrue(JobTask.MODIFY(TRUE),'The Job Task could not be modified.');

      // Verify that a Job Task can't be modified, when Job WIP Entries exist for the Job.
      IF JobWIPEntry.FINDLAST THEN
        JobWIPEntry."Entry No." += 1
      ELSE
        JobWIPEntry."Entry No." := 1;
      JobWIPEntry."Job No." := Job."No.";
      JobWIPEntry.INSERT;

      JobTask.Description := 'Test 2';
      ASSERTERROR JobTask.MODIFY(TRUE);

      TearDown;
    END;

    [Test]
    PROCEDURE TestJobTaskType@7();
    BEGIN
      Initialize;
      SetUp;

      WITH JobTask DO BEGIN
        // Prepare Job Task for later tests.
        VALIDATE("WIP-Total","WIP-Total"::Excluded);
        Assert.IsTrue("Job Posting Group" <> '','Job Posting Group is not initalized with a Job Posting Group');

        // Verify that Job Task Type can't be modified when Job Planning Lines exist.
        ASSERTERROR VALIDATE("Job Task Type","Job Task Type"::Total);

        // Verify that Job Task Type can be modified when no Job Planning Lines / Job Ledger Entries exist.
        JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
        JobPlanningLine.DELETEALL(TRUE);
        VALIDATE("Job Task Type","Job Task Type"::Total);
        Assert.AreEqual("Job Task Type"::Total,"Job Task Type",'Job Task Type was not set even if no Job Planning Lines existed.');
        Assert.IsTrue(
          "Job Posting Group" = '','Job Posting Group is not blanked when Type is set to something different then Posting');
        Assert.IsTrue("WIP-Total" = "WIP-Total"::" ",'WIP-Total is not blanked when Type is set to something different then Posting');
      END;

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldWIPTotal@5();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      Initialize;
      SetUp;

      // Validate that WIP Method is set correctly when WIP-Total is defined.
      JobWIPMethod.FINDFIRST;
      Job."WIP Method" := JobWIPMethod.Code;
      Job.MODIFY;
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Total);
      Assert.AreEqual(JobWIPMethod.Code,JobTask."WIP Method",'WIP Method is not defaulted correctly when WIP Total is set to Total.');

      // Validate that WIP Method is cleared when WIP-Total is set to Excluded.
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Excluded);
      Assert.AreEqual('',JobTask."WIP Method",'WIP Method is not cleared when WIP Total is set to Excluded.');

      // Validate that WIP Method is cleared when WIP-Total is cleared.
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Total);
      Assert.AreEqual(JobWIPMethod.Code,JobTask."WIP Method",'WIP Method is not defaulted correctly when WIP Total is set to Total.');
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::" ");
      Assert.AreEqual('',JobTask."WIP Method",'WIP Method is not cleared when WIP Total is cleared.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldWIPMethod@10();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      Initialize;
      SetUp;

      // Verify that WIP Method can be changed when WIP-Total is total.
      JobWIPMethod.FINDFIRST;
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Total);
      JobTask.VALIDATE("WIP Method",JobWIPMethod.Code);
      Assert.AreEqual(JobWIPMethod.Code,JobTask."WIP Method",'WIP Method cant be changed, even if WIP Total is total.');

      // Verify that WIP Method can't be set when WIP-Total is different from Total.
      JobWIPMethod.FINDLAST;
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::" ");
      ASSERTERROR JobTask.VALIDATE("WIP Method",JobWIPMethod.Code);

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldRemainingTotalCost@3();
    VAR
      JobPlanningLineSet@1001 : Record 1003;
      RemainingTotalCost@1000 : Decimal;
    BEGIN
      Initialize;
      SetUp;

      JobPlanningLineSet.SETRANGE("Job No.",Job."No.");
      JobPlanningLineSet.SETRANGE("Job Task No.",JobTask."Job Task No.");
      IF JobPlanningLineSet.FINDSET THEN
        REPEAT
          RemainingTotalCost += JobPlanningLineSet."Remaining Total Cost (LCY)";
        UNTIL JobPlanningLineSet.NEXT = 0;

      JobTask.CALCFIELDS("Remaining (Total Cost)");
      Assert.AreEqual(RemainingTotalCost,JobTask."Remaining (Total Cost)",'Remaining (Total Cost) does not have the correct value.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldRemainingTotalPrice@12();
    VAR
      JobPlanningLineSet@1001 : Record 1003;
      RemainingTotalPrice@1000 : Decimal;
    BEGIN
      Initialize;
      SetUp;

      JobPlanningLineSet.SETRANGE("Job No.",Job."No.");
      JobPlanningLineSet.SETRANGE("Job Task No.",JobTask."Job Task No.");
      IF JobPlanningLineSet.FINDSET THEN
        REPEAT
          RemainingTotalPrice += JobPlanningLineSet."Remaining Line Amount (LCY)";
        UNTIL JobPlanningLineSet.NEXT = 0;

      JobTask.CALCFIELDS("Remaining (Total Price)");
      Assert.AreEqual(
        RemainingTotalPrice,JobTask."Remaining (Total Price)",'Remaining (Total Price) does not have the correct value.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestFunctionInitWIPFields@8();
    VAR
      JobWIPMethod@1000 : Record 1006;
      JobWIPTotal@1001 : Record 1021;
    BEGIN
      Initialize;
      SetUp;

      // Test that InitWIPFields initalizes all fields correctly.
      JobWIPMethod.FINDFIRST;
      WITH JobTask DO BEGIN
        "Recognized Sales Amount" := 1;
        "Recognized Costs Amount" := 1;
        MODIFY;
      END;

      WITH JobWIPTotal DO BEGIN
        INIT;
        "Job No." := Job."No.";
        "Job Task No." := JobTask."Job Task No.";
        "WIP Posting Date" := WORKDATE;
        "WIP Method" := JobWIPMethod.Code;
        "Schedule (Total Cost)" := 1;
        "Schedule (Total Price)" := 1;
        "Usage (Total Cost)" := 1;
        "Usage (Total Price)" := 1;
        "Contract (Total Cost)" := 1;
        "Contract (Total Price)" := 1;
        "Contract (Invoiced Price)" := 1;
        "Contract (Invoiced Cost)" := 1;
        "WIP Posting Date Filter" := 'test';
        "WIP Planning Date Filter" := 'test';
        "Calc. Recog. Costs Amount" := 1;
        "Calc. Recog. Sales Amount" := 1;
        "Cost Completion %" := 1;
        "Invoiced %" := 1;
        INSERT;
      END;

      JobWIPTotal.SETRANGE("Job No.",Job."No.");
      JobWIPTotal.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobWIPTotal.SETRANGE("Posted to G/L",FALSE);
      Assert.IsTrue(JobWIPTotal.FINDFIRST,'Job WIP Total does not exist for the Job Task Line');

      JobTask.InitWIPFields;

      WITH JobTask DO BEGIN
        Assert.AreEqual(0,"Recognized Sales Amount",'Field initalized wrongly.');
        Assert.AreEqual(0,"Recognized Costs Amount",'Field initalized wrongly.');
      END;

      Assert.IsFalse(JobWIPTotal.FINDFIRST,'Job WIP Total does still exist for the Job Task Line');

      TearDown;
    END;

    BEGIN
    {
      // [FEATURE] [Job] [UT]
      This unit test codeunit tests all fields added during implementation of
      feature 92820 - "Planning and Execution Jobs and Service" and feature 92860 - "Jobs and WIP Compliance".

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');
    }
    END.
  }
}

