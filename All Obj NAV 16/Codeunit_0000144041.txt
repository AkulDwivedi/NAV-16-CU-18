OBJECT Codeunit 144041 Service Tax Sales Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500006 : Codeunit 130000;
      LibraryDimension@1500001 : Codeunit 131001;
      LibraryERM@1500005 : Codeunit 131300;
      LibraryServiceTax@1500004 : Codeunit 143001;
      LibraryUtility@1500008 : Codeunit 131000;
      ReverseServiceTaxHelper@1500007 : Codeunit 143006;
      LibraryRandom@1500003 : Codeunit 130440;
      ServiceTaxVerify@1500002 : Codeunit 143004;
      ApplyingEntryDocType@1500010 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      isInitialized@1500000 : Boolean;
      WrongAmountInSTEntryBase@1500018 : TextConst 'ENU=Wrong %1 in %2';
      WrongDimSetIDonGLEntryErr@1170000000 : TextConst 'ENU=Wrong Dimension Set ID on G/l Entry.';

    [Test]
    PROCEDURE AdvPmtPoT@1500005();
    BEGIN
      AdvPayPost(TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtNoPoT@1500041();
    BEGIN
      AdvPayPost(FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtToRefundPoT@1500006();
    VAR
      GenJournalLine@1500004 : Record 81;
      ServiceTaxSetup@1500003 : Record 16472;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := TRUE;
      CreateAndPostAdvancePayment(GenJournalLine);

      ConvertPaymentToRefund(GenJournalLine);
      ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);

      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDtlsSBCBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,0);
    END;

    [Test]
    PROCEDURE InvoiceNatureOfServiceExportNoPoT@1500035();
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      InvoiceNatureOfService(GenJournalLine,GenJournalLine."Nature of Services"::Export,FALSE);
      ApplyPaymentOffline(GenJournalLine);

      VerifyZeroServiceTaxEntry(GenJournalLine,LastTransactionNo,1);
    END;

    [Test]
    PROCEDURE InvoiceNatureOfServiceExemptedPoT@1500032();
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      InvoiceNatureOfService(GenJournalLine,GenJournalLine."Nature of Services"::Exempted,TRUE);

      VerifyZeroServiceTaxEntry(GenJournalLine,LastTransactionNo,1);
    END;

    LOCAL PROCEDURE InvoiceNatureOfService@1500048(VAR GenJournalLine@1170000000 : Record 81;NatureOfServices@1500004 : Option;PoT@1500001 : Boolean);
    BEGIN
      GenJournalLine.PoT := PoT;
      CreateSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      SetNatureOfServices(GenJournalLine,NatureOfServices);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Test]
    PROCEDURE InvoiceSTPureAgentNoPoT@1500052();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      InvoiceSTPureAgent(GenJournalLine,FALSE);
      ApplyPaymentOffline(GenJournalLine);

      VerifyZeroServiceTaxEntry(GenJournalLine,LastTransactionNo,1);
    END;

    [Test]
    PROCEDURE InvoiceSTPureAgentPoT@1500051();
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      InvoiceSTPureAgent(GenJournalLine,TRUE);

      VerifyZeroServiceTaxEntry(GenJournalLine,LastTransactionNo,1);
    END;

    LOCAL PROCEDURE InvoiceSTPureAgent@1500045(VAR GenJournalLine@1500003 : Record 81;PoT@1500001 : Boolean);
    BEGIN
      GenJournalLine.PoT := PoT;
      CreateSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      GenJournalLine.VALIDATE("ST Pure Agent",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Test]
    PROCEDURE OfflineInvToAdvPmtPoT@1500002();
    BEGIN
      OfflineApplyAdvPaymentAndDoc(TRUE,ApplyingEntryDocType::Invoice);
    END;

    [Test]
    PROCEDURE OfflineInvToAdvPmtNoPoT@1500000();
    BEGIN
      OfflineApplyAdvPaymentAndDoc(FALSE,ApplyingEntryDocType::Invoice);
    END;

    [Test]
    PROCEDURE OfflineAdvPmtToInvPoT@1500015();
    BEGIN
      OfflineApplyAdvPaymentAndDoc(TRUE,ApplyingEntryDocType::Payment);
    END;

    [Test]
    PROCEDURE OfflineAdvPmtToInvNoPoT@1500014();
    BEGIN
      OfflineApplyAdvPaymentAndDoc(FALSE,ApplyingEntryDocType::Payment);
    END;

    [Test]
    PROCEDURE OnlineInvToAdvPmtPoT@1500010();
    BEGIN
      OnlineApplyDocToAdvPayment(TRUE);
    END;

    [Test]
    PROCEDURE OnlineInvToAdvPmtNoPoT@1500009();
    BEGIN
      OnlineApplyDocToAdvPayment(FALSE);
    END;

    [Test]
    PROCEDURE OfflineInvToPmtPoT@1500040();
    BEGIN
      OfflineApplyPaymentAndDoc(TRUE,ApplyingEntryDocType::Invoice);
    END;

    [Test]
    PROCEDURE OfflineInvToPmtNoPoT@1500039();
    BEGIN
      OfflineApplyPaymentAndDoc(FALSE,ApplyingEntryDocType::Invoice);
    END;

    [Test]
    PROCEDURE OfflinePmtToInvPoT@1500022();
    BEGIN
      OfflineApplyPaymentAndDoc(TRUE,ApplyingEntryDocType::Payment);
    END;

    [Test]
    PROCEDURE OfflinePmtToInvNoPoT@1500021();
    BEGIN
      OfflineApplyPaymentAndDoc(FALSE,ApplyingEntryDocType::Payment);
    END;

    [Test]
    PROCEDURE OnlinePmtToInvPoT@1500020();
    BEGIN
      OnlineApplyPaymentToDoc(TRUE);
    END;

    [Test]
    PROCEDURE OnlinePmtToInvNoPoT@1500019();
    BEGIN
      OnlineApplyPaymentToDoc(FALSE);
    END;

    [Test]
    PROCEDURE OnlineCrMToInvPoT@1500016();
    BEGIN
      OnlineApplyCrMemoToInv(TRUE);
    END;

    [Test]
    PROCEDURE OnlineCrMToInvNoPoT@1500013();
    BEGIN
      OnlineApplyCrMemoToInv(FALSE);
    END;

    [Test]
    PROCEDURE OnlineRefToCrMPoT@1500027();
    BEGIN
      OnlineApplyRefundToCrM(TRUE);
    END;

    [Test]
    PROCEDURE OnlineRefToCrMNoPoT@1500025();
    BEGIN
      OnlineApplyRefundToCrM(FALSE);
    END;

    [Test]
    PROCEDURE PayTaxWithDimensionsInvPoT@1500003();
    VAR
      GenJournalLine@1500001 : Record 81;
      PaymentDocNo@1500002 : Code[20];
      ExpectedDimSetID@1170000000 : Integer;
    BEGIN
      Initialize;

      GenJournalLine.PoT := TRUE;
      PostSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      PaymentDocNo := PayServiceTaxWithDimensions(GenJournalLine,ExpectedDimSetID);

      VerifyDimsOnPostedPayment(PaymentDocNo,ExpectedDimSetID);
    END;

    LOCAL PROCEDURE Initialize@1500001() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE AdvPayPost@1500084(PoT@1500007 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
      ServiceTaxSetup@1500002 : Record 16472;
      TaxAmount@1500006 : Decimal;
      LastTransactionNo@1500000 : Integer;
      SBCAmount@1500001 : Decimal;
      KKCAmount@1500004 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      CreateAndPostAdvancePayment(GenJournalLine);
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxSetup);

      // expected posting PoT = Non PoT
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,TaxAmount,-TaxAmount);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,TaxAmount);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,0,0,SBCAmount,-SBCAmount);
      ServiceTaxVerify.STEntryDtlsSBCBalance(LastTransactionNo,SBCAmount);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,KKCAmount,-KKCAmount);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,KKCAmount);
    END;

    LOCAL PROCEDURE AmountInclServTax@1500064(GenJournalLine@1500000 : Record 81) : Decimal;
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      EXIT(GenJournalLine.Amount + ReverseServiceTaxHelper.CalculateServTaxTotal(GenJournalLine.Amount,ServiceTaxSetup) +
        ReverseServiceTaxHelper.CalculateKKCess(GenJournalLine.Amount,ServiceTaxSetup) +
        ReverseServiceTaxHelper.CalculateSBC(GenJournalLine.Amount,ServiceTaxSetup));
    END;

    LOCAL PROCEDURE ApplyAndPostCustLedgEntry@1500055(DocumentType@1500002 : Option;PostedDocNo@1500000 : Code[20];AppliedDocumentType@1500005 : Option;AppliedDocNo@1500004 : Code[20]);
    VAR
      CustLedgerEntry@1500001 : Record 21;
      AppliedCustLedgerEntry@1500003 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,PostedDocNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Remaining Amount");

      LibraryERM.FindCustomerLedgerEntry(AppliedCustLedgerEntry,AppliedDocumentType,AppliedDocNo);
      LibraryERM.SetAppliestoIdCustomer(AppliedCustLedgerEntry);

      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyOffline@1500036(ApplyingEntryDocType@1500000 : Option;PostedDocumentNo@1500002 : Code[20];PostedPaymentNo@1500001 : Code[20]);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      IF ApplyingEntryDocType = GenJournalLine."Document Type"::Invoice THEN
        ApplyAndPostCustLedgEntry(
          GenJournalLine."Document Type"::Invoice,PostedDocumentNo,
          GenJournalLine."Document Type"::Payment,PostedPaymentNo)
      ELSE
        ApplyAndPostCustLedgEntry(
          GenJournalLine."Document Type"::Payment,PostedPaymentNo,
          GenJournalLine."Document Type"::Invoice,PostedDocumentNo);
    END;

    LOCAL PROCEDURE ApplyPaymentOffline@1170000009(GenJournalLine@1170000001 : Record 81);
    VAR
      PostedPaymentNo@1170000000 : Code[20];
    BEGIN
      PostedPaymentNo := PostPayment(GenJournalLine,GenJournalLine."Document Type"::Payment);
      ApplyOffline(ApplyingEntryDocType::Payment,GenJournalLine."Document No.",PostedPaymentNo);
    END;

    LOCAL PROCEDURE ConvertPaymentToRefund@1500042(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine."Line No." += 10000;
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Document Type"::Payment);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
      GenJournalLine.VALIDATE("Document Type",GenJournalLine."Document Type"::Refund);
      GenJournalLine."Document No." := 'R' + GenJournalLine."Document No.";
      GenJournalLine.VALIDATE(Amount,-GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE CreateAdvancePayment@1500031(VAR GenJournalLine@1500006 : Record 81;DocumentType@1500002 : Option;PoT@1500000 : Boolean);
    BEGIN
      CreateJnlLineWithServiceTax(GenJournalLine,DocumentType);
      GenJournalLine.VALIDATE(PoT,PoT);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostAdvancePayment@1500030(VAR GenJournalLine@1500006 : Record 81) : Code[20];
    BEGIN
      CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine.PoT);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE CreateJnlLineWithServiceTax@1170000002(VAR GenJournalLine@1170000001 : Record 81;DocumentType@1500002 : Option);
    VAR
      ServiceTaxSetup@1500007 : Record 16472;
      ServiceTaxRegNoCode@1500006 : Code[20];
      BaseAmount@1500000 : Decimal;
      LineAmount@1500001 : Decimal;
      PoT@1500003 : Boolean;
    BEGIN
      ReverseServiceTaxHelper.CreateServiceTaxSetup(ServiceTaxSetup,ServiceTaxRegNoCode);
      BaseAmount := ReverseServiceTaxHelper.RandomAmountForSalesDocType(DocumentType);
      IF DocumentType IN [GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Refund] THEN
        LineAmount := BaseAmount + ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup)
      ELSE
        LineAmount := BaseAmount;
      PoT := GenJournalLine.PoT;
      ReverseServiceTaxHelper.CreateSalesJnlLineNormalPmt(
        GenJournalLine,DocumentType,ReverseServiceTaxHelper.CreateCustomer,
        LineAmount,ServiceTaxSetup."From Date");
      GenJournalLine.VALIDATE("Posting Date",ServiceTaxSetup."From Date");
      GenJournalLine.VALIDATE("Service Tax Group Code",ServiceTaxSetup.Code);
      GenJournalLine.VALIDATE("Service Tax Registration No.",ServiceTaxRegNoCode);
      IF DocumentType IN [GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Refund] THEN
        GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      ReverseServiceTaxHelper.InvokeForwardStaxCalculation(GenJournalLine);
      GenJournalLine.VALIDATE(PoT,PoT);
    END;

    LOCAL PROCEDURE CreateSalesDoc@1500038(VAR GenJournalLine@1500001 : Record 81;DocumentType@1500000 : Option);
    BEGIN
      IF GenJournalLine."Account No." = '' THEN
        CreateJnlLineWithServiceTax(GenJournalLine,ReverseServiceTaxHelper.GetApplyingDocType(DocumentType));
      ReverseServiceTaxHelper.CreateSalesDocFromGenJnl(
        GenJournalLine,DocumentType,-GenJournalLine."Service Tax Base Amount (LCY)",GenJournalLine."Posting Date",
        GenJournalLine."Service Tax Group Code",GenJournalLine."Service Tax Registration No.");
    END;

    LOCAL PROCEDURE CreateServiceTaxPaymentBuffer@1500008(ServiceTaxRegNo@1500002 : Code[20];ServiceTaxGroupCode@1500001 : Code[20];ReverseCharge@1500000 : Boolean;VAR ServiceTaxPaymentBuffer@1500007 : Record 16476;VAR DateFilter@1500005 : Text[30]);
    VAR
      ServiceTaxReturnPeriod@1500003 : Record 16588;
      ServiceTaxEntryDetail@1500008 : Record 16474;
      GLAccount@1500009 : Record 15;
      ServiceTaxMgt@1500006 : Codeunit 16471;
      PostingDate@1500004 : Date;
      DocNo@1500010 : Code[20];
    BEGIN
      // Step 1: for each eligible entry, a new record is inserted in ServiceTaxBuffer table
      ServiceTaxReturnPeriod.FINDLAST;
      PostingDate := LibraryServiceTax.GetSrvTaxReturnPeriodEndDate(ServiceTaxReturnPeriod);
      DateFilter :=
        FORMAT(LibraryServiceTax.GetSrvTaxReturnPeriodStartDate(ServiceTaxReturnPeriod)) + '..' + FORMAT(PostingDate);
      DocNo := LibraryUtility.GenerateRandomCode(ServiceTaxEntryDetail.FIELDNO("Document No."),DATABASE::"Service Tax Entry Details");

      ServiceTaxPaymentBuffer.DELETEALL;
      ServiceTaxMgt.CreateServiceTaxBufferForGroup(DocNo,PostingDate,ServiceTaxRegNo,DateFilter,ReverseCharge,ServiceTaxGroupCode);
      ServiceTaxPaymentBuffer.SETRANGE("Service Tax Group Code",ServiceTaxGroupCode);
      ServiceTaxPaymentBuffer.FINDFIRST;
      ServiceTaxPaymentBuffer."Account Type" := ServiceTaxPaymentBuffer."Account Type"::"G/L Account";
      LibraryERM.CreateGLAccount(GLAccount);
      ServiceTaxPaymentBuffer."Account No." := GLAccount."No.";
      ServiceTaxPaymentBuffer.VALIDATE("Payment Amount",ServiceTaxPaymentBuffer."Payment Liability");
      ServiceTaxPaymentBuffer.VALIDATE("Payment Amount (eCess)",ServiceTaxPaymentBuffer."Payment Liability (eCess)");
      ServiceTaxPaymentBuffer.VALIDATE("Payment Amount (SHECess)",ServiceTaxPaymentBuffer."Payment Liability (SHECess)");
      ServiceTaxPaymentBuffer.VALIDATE("Payment Amount (KKC)",ServiceTaxPaymentBuffer."Payment Liability (KKC)");
      ServiceTaxPaymentBuffer.VALIDATE("Payment Amount (SBC)",ServiceTaxPaymentBuffer."Payment Liability (SBC)");

      ServiceTaxPaymentBuffer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindDimensionValueCode@1500037(DimensionCode@1500000 : Code[20]) : Code[20];
    VAR
      DimensionValue@1500001 : Record 349;
    BEGIN
      WITH DimensionValue DO BEGIN
        SETRANGE("Dimension Code",DimensionCode);
        SETRANGE("Dimension Value Type","Dimension Value Type"::Standard);
        FINDFIRST;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE InsertDimForPaymentLine@1500033(VAR DimSetID@1170000000 : Integer;DimensionCode@1500001 : Code[20]);
    BEGIN
      DimSetID := LibraryDimension.CreateDimSet(DimSetID,DimensionCode,FindDimensionValueCode(DimensionCode));
    END;

    LOCAL PROCEDURE OfflineApplyAdvPaymentAndDoc@1500060(PoT@1500007 : Boolean;ApplyingEntryDocType@1500014 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      PostedDocumentNo@1500001 : Code[20];
      PostedPaymentNo@1500002 : Code[20];
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      PostedPaymentNo := CreateAndPostAdvancePayment(GenJournalLine);
      PostedDocumentNo := PostSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);

      ApplyOffline(ApplyingEntryDocType,PostedDocumentNo,PostedPaymentNo);

      VerifySTaxAfterApplication(GenJournalLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE OfflineApplyPaymentAndDoc@1500023(PoT@1500007 : Boolean;ApplyingEntryDocType@1500014 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      DocGenJournalLine@1500003 : Record 81;
      PostedDocumentNo@1500001 : Code[20];
      PostedPaymentNo@1500002 : Code[20];
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      PostedDocumentNo := PostSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      DocGenJournalLine := GenJournalLine;
      PostedPaymentNo := PostPayment(GenJournalLine,GenJournalLine."Document Type"::Payment);

      ApplyOffline(ApplyingEntryDocType,PostedDocumentNo,PostedPaymentNo);

      VerifySTaxAfterApplication(DocGenJournalLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE OnlineApplyDocToAdvPayment@1500012(PoT@1500007 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      CreateAndPostAdvancePayment(GenJournalLine);
      PostSalesDocWithAppliesTo(GenJournalLine,GenJournalLine."Document Type"::Invoice);

      VerifySTaxAfterApplication(GenJournalLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE OnlineApplyPaymentToDoc@1500024(PoT@1500007 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      PostSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      PostPaymentWithAppliesTo(GenJournalLine,GenJournalLine."Document Type"::Payment);

      VerifySTaxAfterApplication(GenJournalLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE OnlineApplyCrMemoToInv@1500018(PoT@1500007 : Boolean);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      PostSalesDoc(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      GenJournalLine."Service Tax Base Amount (LCY)" := -GenJournalLine."Service Tax Base Amount (LCY)";
      PostSalesDocWithAppliesTo(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo");

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,0);
    END;

    LOCAL PROCEDURE OnlineApplyRefundToCrM@1500028(PoT@1500007 : Boolean);
    VAR
      GenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500006 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      PostSalesDoc(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo");
      PostPaymentWithAppliesTo(GenJournalLine,GenJournalLine."Document Type"::Refund);

      VerifySTaxAfterApplication(GenJournalLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE PayServiceTaxWithDimensions@1500017(GenJournalLine@1500002 : Record 81;VAR ExpectedDimSetID@1170000000 : Integer) PaymentDocNo : Code[20];
    VAR
      ServiceTaxPaymentBuffer@1500000 : Record 16476;
      GLSetup@1500005 : Record 98;
      DateFilter@1500003 : Text[250];
    BEGIN
      CreateServiceTaxPaymentBuffer(
        GenJournalLine."Service Tax Registration No.",GenJournalLine."Service Tax Group Code",FALSE,
        ServiceTaxPaymentBuffer,DateFilter);

      GLSetup.GET;
      InsertDimForPaymentLine(ServiceTaxPaymentBuffer."Dimension Set ID",GLSetup."Global Dimension 1 Code");
      InsertDimForPaymentLine(ServiceTaxPaymentBuffer."Dimension Set ID",GLSetup."Shortcut Dimension 3 Code");
      ServiceTaxPaymentBuffer.MODIFY(TRUE);
      ExpectedDimSetID := ServiceTaxPaymentBuffer."Dimension Set ID";

      PostServiceTaxPayment(ServiceTaxPaymentBuffer,DateFilter,FALSE);

      EXIT(ServiceTaxPaymentBuffer."Document No.");
    END;

    LOCAL PROCEDURE PostPayment@1500026(GenJournalLine@1500006 : Record 81;DocumentType@1500001 : Option) : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreateSalesJnlLineNormalPmt(
        GenJournalLine,DocumentType,GenJournalLine."Account No.",-AmountInclServTax(GenJournalLine),GenJournalLine."Posting Date");
      GenJournalLine.MODIFY;

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE PostPaymentWithAppliesTo@1500034(GenJournalLine@1500006 : Record 81;DocumentType@1500001 : Option) : Code[20];
    VAR
      AppliesToDocJnlLine@1500000 : Record 81;
    BEGIN
      AppliesToDocJnlLine := GenJournalLine;

      ReverseServiceTaxHelper.CreateSalesJnlLineNormalPmt(
        GenJournalLine,DocumentType,GenJournalLine."Account No.",-AmountInclServTax(GenJournalLine),GenJournalLine."Posting Date");
      GenJournalLine.VALIDATE("Applies-to Doc. Type",AppliesToDocJnlLine."Document Type");
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliesToDocJnlLine."Document No.");
      GenJournalLine.MODIFY;

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE PostSalesDoc@1500088(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500002 : Option) PostedDocNo : Code[20];
    BEGIN
      CreateSalesDoc(GenJournalLine,DocumentType);
      PostedDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostSalesDocWithAppliesTo@1500004(GenJournalLine@1500000 : Record 81;DocumentType@1500003 : Option) PostedDocNo : Code[20];
    VAR
      AppliesToDocJnlLine@1500002 : Record 81;
    BEGIN
      AppliesToDocJnlLine := GenJournalLine;

      ReverseServiceTaxHelper.CreateSalesDocFromGenJnl(
        GenJournalLine,DocumentType,
        -GenJournalLine."Service Tax Base Amount (LCY)",GenJournalLine."Posting Date",
        GenJournalLine."Service Tax Group Code",GenJournalLine."Service Tax Registration No.");

      GenJournalLine.VALIDATE("Applies-to Doc. Type",AppliesToDocJnlLine."Document Type");
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliesToDocJnlLine."Document No.");
      GenJournalLine.MODIFY;

      PostedDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostServiceTaxPayment@1500007(ServiceTaxPaymentBuffer@1500003 : Record 16476;DateFilter@1500001 : Text[30];ReverseCharge@1500005 : Boolean) : Code[20];
    VAR
      ServiceTaxMgt@1500002 : Codeunit 16471;
    BEGIN
      WITH ServiceTaxPaymentBuffer DO BEGIN
        ServiceTaxMgt.CheckValidations("Document No.","Posting Date");
        ServiceTaxMgt.UpdateSourceDocDetail(ServiceTaxPaymentBuffer);
        ServiceTaxMgt.PostServiceTaxPayment("Document No.","Posting Date",DateFilter,ReverseCharge);
        EXIT("Document No.");
      END;
    END;

    LOCAL PROCEDURE SetNatureOfServices@1500046(VAR GenJournalLine@1500001 : Record 81;NatureOfServices@1500002 : Option);
    VAR
      Customer@1500000 : Record 18;
      PoT@1170000000 : Boolean;
    BEGIN
      Customer.GET(GenJournalLine."Account No.");
      Customer.VALIDATE("Nature of Services",NatureOfServices);
      Customer.MODIFY(TRUE);
      PoT := GenJournalLine.PoT;
      GenJournalLine.VALIDATE("Account No.");
      GenJournalLine.VALIDATE(PoT,PoT);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyDimsOnPostedPayment@1500029(PaymentDocNo@1170000001 : Code[20];ExpectedDimSetID@1170000000 : Integer);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",PaymentDocNo);
      GLEntry.FINDSET;
      REPEAT
        Assert.AreEqual(ExpectedDimSetID,GLEntry."Dimension Set ID",WrongDimSetIDonGLEntryErr);
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySTaxAfterApplication@1500011(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500001 : Integer);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      TaxAmount@1500002 : Decimal;
      SBCAmount@1500004 : Decimal;
      KKCAmount@1500005 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxSetup);

      IF GenJournalLine."Document Type" = GenJournalLine."Document Type"::"Credit Memo" THEN BEGIN
        TaxAmount := -TaxAmount;
        SBCAmount := -SBCAmount;
        KKCAmount := -KKCAmount;
      END;

      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,TaxAmount,0);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,TaxAmount);
      ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,TaxAmount);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,0,0,SBCAmount,0);
      ServiceTaxVerify.STEntryDtlsSBCBalance(LastTransactionNo,SBCAmount);
      ServiceTaxVerify.STEntryFullSBCBalance(LastTransactionNo,SBCAmount);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,KKCAmount,0);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,KKCAmount);
      ServiceTaxVerify.STEntryFullKKCBalance(LastTransactionNo,KKCAmount);
    END;

    LOCAL PROCEDURE VerifyZeroServiceTaxEntry@1500049(GenJournalLine@1500002 : Record 81;LastTransactionNo@1500000 : Integer;NoOfServTaxEntryDetails@1500003 : Integer);
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      ServiceTaxEntry@1170000000 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      ServiceTaxEntry.FINDLAST;
      Assert.AreEqual(-GenJournalLine."Amount (LCY)",ServiceTaxEntry."Service Tax Base Amount",
        STRSUBSTNO(WrongAmountInSTEntryBase,ServiceTaxEntry.FIELDCAPTION("Service Tax Base Amount"),ServiceTaxEntry.TABLECAPTION));
      Assert.AreEqual(-GenJournalLine."Amount (LCY)",ServiceTaxEntry."Amount Including Service Tax",
        STRSUBSTNO(WrongAmountInSTEntryBase,ServiceTaxEntry.FIELDCAPTION("Amount Including Service Tax"),ServiceTaxEntry.TABLECAPTION));

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,0);
      ServiceTaxVerify.CountOfServiceTaxEntries(LastTransactionNo,1,NoOfServTaxEntryDetails);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,0);

      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STEntryFullSBCBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDtlsSBCBalance(LastTransactionNo,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STEntryFullKKCBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,0);
    END;

    BEGIN
    END.
  }
}

