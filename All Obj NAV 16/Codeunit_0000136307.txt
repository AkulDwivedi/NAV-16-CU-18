OBJECT Codeunit 136307 Job Consumption - Planning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryJob@1000 : Codeunit 131920;
      Assert@1001 : Codeunit 130000;
      LibrarySales@1007 : Codeunit 130509;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryUtility@1008 : Codeunit 131000;
      LibraryUTUtility@1009 : Codeunit 131008;
      LibraryRandom@1010 : Codeunit 130440;
      Initialized@1002 : Boolean;
      ItemNo@1005 : Code[20];
      PlanningLineQuantity@1004 : Decimal;
      TotalQuantity@1003 : Decimal;
      LineTypeRef@1012 : ' ,Schedule,Contract,Both Schedule and Contract';

    [Test]
    PROCEDURE TransferScheduledItem@6();
    BEGIN
      // Transfer a scheduled item line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,1)
    END;

    [Test]
    PROCEDURE TransferScheduledResource@2();
    BEGIN
      // Transfer a scheduled resource line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,1)
    END;

    [Test]
    PROCEDURE TransferScheduledGL@3();
    BEGIN
      // Transfer a scheduled GL line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeSchedule,LibraryJob.GLAccountType,1)
    END;

    [Test]
    PROCEDURE TransferBothItem@12();
    BEGIN
      // Transfer a both scheduled and contracted item line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeBoth,LibraryJob.ItemType,1)
    END;

    [Test]
    PROCEDURE TransferBothResource@10();
    BEGIN
      // Transfer a both scheduled and contracted resource line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,1)
    END;

    [Test]
    PROCEDURE TransferBothGL@9();
    BEGIN
      // Transfer a both scheduled and contracted GL line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeBoth,LibraryJob.GLAccountType,1)
    END;

    [Test]
    PROCEDURE TransferContractItem@13();
    BEGIN
      // Transfer a contracted planning line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,1);
    END;

    [Test]
    PROCEDURE PTransferScheduledItem@11();
    BEGIN
      // Partially transfer a scheduled item line to job journal
      Transfer2Journal(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,RANDOM(99) / 100)
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ReservationForJobWithSalesReturnOrder@169();
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      // Check Reservation for Jobs with Sales Return Order.

      // Setup: Create and post Sales Return Order.
      Initialize;
      CreateSalesReturnOrder(SalesLine);
      CreateReservationOnJobPlanningLine(
        JobPlanningLine,SalesLine."No.",SalesLine."Location Code",SalesLine."Variant Code",JobPlanningLine.Reserve::Always);
      SalesHeader.GET(SalesLine."Document Type"::"Return Order",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      ItemNo := JobPlanningLine."No.";  // Assign in global variable.
      PlanningLineQuantity := JobPlanningLine.Quantity;  // Assign in global variable.
      TotalQuantity := SalesLine.Quantity;  // Assign in global variable.

      // Exercise.
      OpenPlanningLinePage(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");

      // Verify: Verify Reservation page values. Verification done in 'ReserveForSalesReturnOrderHandler'.
    END;

    [Test]
    PROCEDURE ChangeUOMOnJobPlanningLineForItem@64();
    VAR
      JobTask@1006 : Record 1001;
      JobPlanningLine@1007 : Record 1003;
      ItemNo@1001 : Code[20];
      ItemUnitOfMeasureCode@1002 : Code[10];
    BEGIN
      // Test Unit Cost, Unit Price, Total Price and Unit of Measure Code on Job Planning Line after changing Unit of Measure Code.

      // 1. Setup: Create Job with Job Task, Item and Create Item Unit Of Measure.
      Initialize;
      CreateJobWithJobTask(JobTask);
      ItemNo := LibraryJob.CreateConsumable(1);  // Use 1 for Item.
      ItemUnitOfMeasureCode := CreateItemUOM(ItemNo);

      // 2. Exercise: Create Job Planning Line with created Item and Change Unit of Measure on Job Planning Line.
      CreateReservationOnJobPlanningLine(JobPlanningLine,ItemNo,'','',JobPlanningLine.Reserve::Optional);
      JobPlanningLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasureCode);
      JobPlanningLine.MODIFY(TRUE);

      // 3. Verify: Verify values on Job Planning Lines.
      VerifyJobPlanningLineForItemUOM(JobPlanningLine,ItemNo,ItemUnitOfMeasureCode);
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler,JobCalculateWIPRequestPageHandler)]
    PROCEDURE CheckCalcRecogCostAmount@17();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      Job@1001 : Record 167;
      JobCreateInvoice@1004 : Codeunit 1002;
    BEGIN
      // Verify the Calc. Recog. Costs Amount on Job after running the Calculate WIP with Job Task Lines.

      // Setup: Create Job with multiple Job Task and Create Job Planning Line.
      Initialize;
      CreateJobWithMultipleJobTask(Job,JobTask);
      CreateJobPlanningLine(JobPlanningLine,JobTask);
      UpdateCustomerWithGenBusPostingGroup(Job."Bill-to Customer No.",JobPlanningLine."Gen. Bus. Posting Group");
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);
      FindAndPostSalesInvoice(Job."Bill-to Customer No.");

      // Exercise: Calculate WIP.
      Job.SETRANGE("No.",Job."No.");
      REPORT.RUN(REPORT::"Job Calculate WIP",TRUE,FALSE,Job);

      // Verify: Verifying Calc. Recog. Costs Amount on Job.
      VerifyCalcRecogCostsAmount(JobPlanningLine);
    END;

    [Test]
    [HandlerFunctions(JobJournalCofirmHandler,MessageHandler,JobCalculateWIPRequestPageHandler)]
    PROCEDURE WIPEntryAmountInJobWIPEntry@20();
    VAR
      Job@1002 : Record 167;
    BEGIN
      // Verify WIP Entry Amount on Job after running the Calculate WIP on Job.

      // Setup: Create Job, Job Task, Create Job Planning Line and posting Job Journal after creating Job Journal Line.
      Initialize;
      CreateJobWithWIPMethod(Job,CreateJobWIPMethod,Job."WIP Posting Method"::"Per Job Ledger Entry",TRUE);
      CreateAndPostJobJournal(Job);

      // Exercise: Calculate WIP.
      Job.SETRANGE("No.",Job."No.");
      Job.SETFILTER(
        "Posting Date Filter",'%1..%2',WORKDATE,CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandInt(3)),WORKDATE));
      REPORT.RUN(REPORT::"Job Calculate WIP",TRUE,FALSE,Job);

      // Verify: Verifying WIP Amount in Job WIP Entry.
      VerifyWIPEntryAmountInJobWIPEntry(Job,WORKDATE,CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandInt(3)),WORKDATE));
    END;

    [Test]
    [HandlerFunctions(JobJournalCofirmHandler,MessageHandler)]
    PROCEDURE TransferToJobPlanningLineSchedule@21();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      JobUsageLink@1005 : Record 1020;
    BEGIN
      // [SCENARIO 380443] Check Transfer Job Lenger Entry to Job Planning Line procedure
      Initialize;

      // [GIVEN] Posted Job Journal Line, where LineType = Schedule
      CreatePostJobJournalLine(Job,JobTask,TRUE,FALSE);

      // [WHEN] Transfer Job Lenger Entry to Job Planning Line
      TransferToPlanngLine(Job,LineTypeRef::Schedule);

      // [THEN] Job Planning Line with type "Schedule" is linked to Job Ledger Entry
      JobUsageLinkApplied(JobUsageLink,Job,JobPlanningLine."Line Type"::Schedule);
      Assert.RecordIsNotEmpty(JobUsageLink);

      // [THEN] Qty. to Transfer to Journal is zero
      VerifyQtyToTransferToJournal(Job);
    END;

    [Test]
    [HandlerFunctions(JobJournalCofirmHandler,MessageHandler)]
    PROCEDURE TransferToJobPlanningLineContract@41();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      JobUsageLink@1005 : Record 1020;
    BEGIN
      // [SCENARIO 380443] Check Transfer Job Lenger Entry to Job Planning Line procedure
      Initialize;

      // [GIVEN] Posted Job Journal Line, where LineType = Contract
      CreatePostJobJournalLine(Job,JobTask,TRUE,FALSE);

      // [WHEN] Transfer Job Lenger Entry to Job Planning Line
      TransferToPlanngLine(Job,LineTypeRef::Contract);

      // [THEN] Job Planning Line with type "Contact" has no link to Job Ledger Entry
      JobUsageLinkApplied(JobUsageLink,Job,JobPlanningLine."Line Type"::Contract);
      Assert.RecordIsEmpty(JobUsageLink);

      // [THEN] Qty. to Transfer to Journal is zero
      VerifyQtyToTransferToJournal(Job);
    END;

    [Test]
    [HandlerFunctions(JobJournalCofirmHandler,MessageHandler)]
    PROCEDURE TransferToJobPlanningLineBothOff@33();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      JobUsageLink@1005 : Record 1020;
    BEGIN
      // [SCENARIO 380443] Check Transfer Job Lenger Entry to Job Planning Line procedure
      Initialize;

      // [GIVEN] Posted Job Journal Line, where LineType = Both Schedule and Contract
      // [GIVEN] Job option "Allow Schedule/Contract Lines" is swiched off
      CreatePostJobJournalLine(Job,JobTask,TRUE,FALSE);

      // [WHEN] Transfer Job Lenger Entry to Job Planning Line
      TransferToPlanngLine(Job,LineTypeRef::"Both Schedule and Contract");

      // [THEN] Job Planning Line with type "Schedule" is linked to Job Ledger Entry
      JobUsageLinkApplied(JobUsageLink,Job,JobPlanningLine."Line Type"::Schedule);
      Assert.RecordIsNotEmpty(JobUsageLink);

      // [THEN] Job Planning Line with type "Contract" has no link to Job Ledger Entry
      JobUsageLinkApplied(JobUsageLink,Job,JobPlanningLine."Line Type"::Contract);
      Assert.RecordIsEmpty(JobUsageLink);

      // [THEN] Qty. to Transfer to Journal is zero
      VerifyQtyToTransferToJournal(Job);
    END;

    [Test]
    [HandlerFunctions(JobJournalCofirmHandler,MessageHandler)]
    PROCEDURE TransferToJobPlanningLineBothOn@67();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobUsageLink@1005 : Record 1020;
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // [SCENARIO 380443] Check Transfer Job Lenger Entry to Job Planning Line procedure
      Initialize;

      // [GIVEN] Posted Job Journal Line, where LineType = Both Schedule and Contract
      // [GIVEN] Job option "Allow Schedule/Contract Lines" is swiched on
      CreatePostJobJournalLine(Job,JobTask,TRUE,TRUE);

      // [WHEN] Transfer Job Lenger Entry to Job Planning Line
      TransferToPlanngLine(Job,LineTypeRef::"Both Schedule and Contract");

      // [THEN] Job Planning Line with type "Both Schedule and Contract" is linked to Job Ledger Entry
      JobUsageLinkApplied(JobUsageLink,Job,JobPlanningLine."Line Type"::"Both Schedule and Contract");
      Assert.RecordIsNotEmpty(JobUsageLink);

      // [THEN] Qty. to Transfer to Journal is zero
      VerifyQtyToTransferToJournal(Job);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(ItemNo);
      CLEAR(PlanningLineQuantity);
      CLEAR(TotalQuantity);

      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySales.SetStockoutWarning(FALSE);

      Initialized := TRUE;
      COMMIT
    END;

    LOCAL PROCEDURE Transfer2Journal@1(LineType@1005 : Option;ConsumableType@1006 : Option;Fraction@1009 : Decimal);
    VAR
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobJournalLine@1003 : Record 210;
      JobJournalTemplate@1007 : Record 209;
      JobJournalBatch@1008 : Record 237;
      Location@1011 : Record 14;
      ItemVariant@1013 : Record 5401;
      JobTransferLine@1004 : Codeunit 1004;
      LibraryWarehouse@1010 : Codeunit 132204;
    BEGIN
      // Create job, job task
      // Create job planning line with LineType and Type
      // Enable usage link
      // For Type = Item set location, variant
      // Set Qty. to Transfer to Journal
      // Transfer job planning line to journal
      // Verify journal line

      // Setup
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(LineType,ConsumableType,JobTask,JobPlanningLine);

      WITH JobPlanningLine DO BEGIN
        IF "Schedule Line" THEN
          VALIDATE("Usage Link",TRUE);
        IF ConsumableType <> LibraryJob.GLAccountType THEN
          VALIDATE("Unit of Measure Code",CreateUOM(Type,"No."));
        IF ConsumableType = LibraryJob.ItemType THEN BEGIN
          VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
          VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,"No."))
        END;
        VALIDATE("Qty. to Transfer to Journal",Fraction * Quantity);
        MODIFY(TRUE)
      END;

      // Exercise
      JobTransferLine.FromPlanningLineToJnlLine(JobPlanningLine,WORKDATE,LibraryJob.GetJobJournalTemplate(JobJournalTemplate),
        LibraryJob.CreateJobJournalBatch(LibraryJob.GetJobJournalTemplate(JobJournalTemplate),JobJournalBatch),JobJournalLine);

      // Verify
      WITH JobJournalLine DO BEGIN
        Assert.AreEqual("Job No.",JobPlanningLine."Job No.",FIELDCAPTION("Job No."));
        Assert.AreEqual("Job Task No.",JobPlanningLine."Job Task No.",FIELDCAPTION("Job Task No."));
        IF JobPlanningLine."Schedule Line" THEN
          Assert.AreEqual("Job Planning Line No.",JobPlanningLine."Line No.",FIELDCAPTION("Line No."))
        ELSE
          Assert.AreEqual("Job Planning Line No.",0,FIELDCAPTION("Line No."));
        Assert.AreEqual("Posting Date",WORKDATE,FIELDCAPTION("Posting Date"));
        Assert.AreEqual(Type,JobPlanningLine.Type,FIELDCAPTION(Type));
        Assert.AreEqual("No.",JobPlanningLine."No.",FIELDCAPTION("No."));
        Assert.AreEqual("Unit of Measure Code",JobPlanningLine."Unit of Measure Code",FIELDCAPTION("Unit of Measure Code"));
        Assert.AreEqual("Location Code",JobPlanningLine."Location Code",FIELDCAPTION("Location Code"));
        Assert.AreEqual("Variant Code",JobPlanningLine."Variant Code",FIELDCAPTION("Variant Code"));
        Assert.AreEqual(Quantity,JobPlanningLine."Qty. to Transfer to Journal",FIELDCAPTION(Quantity))
      END
    END;

    LOCAL PROCEDURE CreateUOM@14(Type@1000 : Option;No@1001 : Code[20]) : Code[10];
    BEGIN
      CASE Type OF
        LibraryJob.ItemType:
          EXIT(CreateItemUOM(No));
        LibraryJob.ResourceType:
          EXIT(CreateResourceUOM(No));
        ELSE
          ERROR(STRSUBSTNO('Unsupported consumable type: %1',Type));
      END
    END;

    LOCAL PROCEDURE CreateItemUOM@15(ItemNo@1000 : Code[20]) : Code[10];
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,1);
      EXIT(ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateAndPostJobJournal@22(VAR Job@1001 : Record 167);
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
      JobJournalLine@1003 : Record 210;
    BEGIN
      CreateJobTask(JobTask,Job);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::"G/L Account",JobTask,JobPlanningLine);
      CreateJobJournalLine(JobJournalLine,JobTask,JobPlanningLine,WORKDATE);
      CreateJobJournalLine(
        JobJournalLine,JobTask,JobPlanningLine,CALCDATE(STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(3)),WORKDATE));
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateJobJournalLine@43(VAR JobJournalLine@1003 : Record 210;JobTask@1002 : Record 1001;JobPlanningLine@1001 : Record 1003;PostingDate@1000 : Date);
    BEGIN
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLineForType(
          JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::"G/L Account",JobTask,JobJournalLine);
        VALIDATE("No.",JobPlanningLine."No.");
        VALIDATE(Quantity,JobPlanningLine.Quantity);
        VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@5(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobWithMultipleJobTask@36(VAR Job@1001 : Record 167;VAR JobTask@1000 : Record 1001);
    BEGIN
      CreateJobWithWIPMethod(Job,CreateJobWIPMethod,Job."WIP Posting Method"::"Per Job Ledger Entry",TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobWIPMethod@32() : Code[20];
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        LibraryJob.CreateJobWIPMethod(JobWIPMethod);
        VALIDATE("Recognized Costs","Recognized Costs"::"Cost of Sales");
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateJobWithWIPMethod@26(VAR Job@1001 : Record 167;JobWIPMethodCode@1000 : Code[20];WIPPostingMethod@1002 : Option;ApplyUsageLink@1003 : Boolean);
    VAR
      JobPostingGroup@1004 : Record 208;
    BEGIN
      LibraryJob.CreateJob(Job);
      JobPostingGroup.GET(Job."Job Posting Group");
      LibraryJob.UpdateJobPostingGroup(JobPostingGroup);
      WITH Job DO BEGIN
        VALIDATE("WIP Method",JobWIPMethodCode);
        VALIDATE("WIP Posting Method",WIPPostingMethod);
        VALIDATE("Apply Usage Link",ApplyUsageLink);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@19(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        LibraryJob.CreateJobPlanningLine("Line Type"::"Both Schedule and Contract",Type::"G/L Account",JobTask,JobPlanningLine);
        VALIDATE(Quantity,LibraryRandom.RandInt(5));
        VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
        VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobTask@66(VAR JobTask@1001 : Record 1001;Job@1000 : Record 167);
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Total);
      JobTask.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourceUOM@16(ResourceNo@1000 : Code[20]) : Code[10];
    VAR
      UnitOfMeasure@1003 : Record 204;
      ResourceUnitOfMeasure@1002 : Record 205;
      LibraryResource@1001 : Codeunit 130511;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryResource.CreateResourceUnitOfMeasure(ResourceUnitOfMeasure,ResourceNo,UnitOfMeasure.Code,1);
      EXIT(ResourceUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateSalesReturnOrder@7(VAR SalesLine@1005 : Record 37);
    VAR
      Item@1011 : Record 27;
      SalesHeader@1002 : Record 36;
      Location@1004 : Record 14;
      Customer@1000 : Record 18;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Customer."No.",
        LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location),Item."No.");
      SalesLine.VALIDATE("Return Qty. to Receive",SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReservationOnJobPlanningLine@275(VAR JobPlanningLine@1014 : Record 1003;No@1003 : Code[20];LocationCode@1002 : Code[10];VariantCode@1015 : Code[10];Reserve@1004 : Option);
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Item);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE(Reserve,Reserve);
      JobPlanningLine.VALIDATE("Variant Code",VariantCode);
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.MODIFY(TRUE);
      COMMIT;
      ModifyJobPlanningLine(Job."No.");
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");
    END;

    LOCAL PROCEDURE FindAndPostSalesInvoice@51(CustomerNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Sell-to Customer No.",CustomerNo);
        FINDFIRST;
      END;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE ModifyJobPlanningLine@8(No@1001 : Code[20]);
    VAR
      JobPlanningLines@1000 : TestPage 1007;
    BEGIN
      JobPlanningLines.OPENEDIT;
      JobPlanningLines.FILTER.SETFILTER("Job No.",No);
      JobPlanningLines.Quantity.SETVALUE(RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Used Random values for Quantity.
      JobPlanningLines."Unit Cost".SETVALUE(RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Used Random values for Unit Cost.
      JobPlanningLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesDocument@164(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;DocumentType@1003 : Option;CustomerNo@1001 : Code[20];LocationCode@1008 : Code[10];No@1007 : Code[20]);
    VAR
      ItemVariant@1006 : Record 5401;
    BEGIN
      ItemVariant.FINDFIRST;
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,No,RANDOM(10) + LibraryUtility.GenerateRandomFraction + 10);  // Taken 10 here because Sales Line needs greater value than Planning Line.
      SalesLine.VALIDATE("Unit Price",RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Used Random value for Unit Price
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,No));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenPlanningLinePage@74(JobNo@1002 : Code[20];JobTaskNo@1000 : Code[20]);
    VAR
      JobPlanningLines@1001 : TestPage 1007;
    BEGIN
      JobPlanningLines.OPENEDIT;
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobNo);
      JobPlanningLines.FILTER.SETFILTER("Job Task No.",JobTaskNo);
      JobPlanningLines.Reserve.INVOKE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateCustomerWithGenBusPostingGroup@50(CustomerNo@1000 : Code[20];GenBusinessPostingGroup@1001 : Code[10]);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE("Gen. Bus. Posting Group",GenBusinessPostingGroup);
      Customer.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@59(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.ItemNo.ASSERTEQUALS(ItemNo);
      Reservation.QtyToReserveBase.ASSERTEQUALS(PlanningLineQuantity);
      Reservation.QtyReservedBase.ASSERTEQUALS(PlanningLineQuantity);
      Reservation."Total Quantity".ASSERTEQUALS(TotalQuantity);
      Reservation."Current Reserved Quantity".ASSERTEQUALS(PlanningLineQuantity);
      Reservation.TotalAvailableQuantity.ASSERTEQUALS(TotalQuantity - PlanningLineQuantity);
    END;

    LOCAL PROCEDURE VerifyJobPlanningLineForItemUOM@18(JobPlanningLine@1000 : Record 1003;ItemNo@1004 : Code[20];UnitOfMeasureCode@1003 : Code[10]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Assert.AreNearlyEqual(
        Item."Unit Price",JobPlanningLine."Unit Price",0.01,'Unit Price on the line matches unit price on job planning line');
      Assert.AreNearlyEqual(Item."Unit Cost",JobPlanningLine."Unit Cost",0.01,'Unit Cost matches item unit cost');
      Assert.AreNearlyEqual(Item."Unit Price" * JobPlanningLine.Quantity,JobPlanningLine."Total Price",0.01,'Total Price Matches');
      JobPlanningLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyCalcRecogCostsAmount@60(JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1002 : Record 167;
    BEGIN
      Job.GET(JobPlanningLine."Job No.");
      Job.CALCFIELDS("Calc. Recog. Costs Amount");
      Job.TESTFIELD("Calc. Recog. Costs Amount",JobPlanningLine.Quantity * JobPlanningLine."Unit Cost");
    END;

    LOCAL PROCEDURE VerifyWIPEntryAmountInJobWIPEntry@39(Job@1000 : Record 167;StartingDate@1004 : Date;EndingDate@1003 : Date);
    VAR
      JobLedgerEntry@1001 : Record 169;
      JobWIPEntry@1002 : Record 1004;
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        SETRANGE("Job No.",Job."No.");
        SETFILTER("Posting Date",'%1..%2',StartingDate,EndingDate);
        CALCSUMS("Total Cost");
        JobWIPEntry.SETRANGE("Job No.",Job."No.");
        JobWIPEntry.FINDFIRST;
        JobWIPEntry.TESTFIELD("WIP Entry Amount",-"Total Cost");
      END;
    END;

    LOCAL PROCEDURE CreateJobJournal@24(VAR JobJournalLine@1003 : Record 210;JobTask@1002 : Record 1001);
    VAR
      LibraryResource@1000 : Codeunit 130511;
    BEGIN
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLine("Line Type"::" ",JobTask,JobJournalLine);
        VALIDATE(Type,Type::Resource);
        VALIDATE("No.",LibraryResource.CreateResourceNo);
        VALIDATE(Quantity,1);
        VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePostJobJournalLine@27(VAR Job@1005 : Record 167;VAR JobTask@1004 : Record 1001;ApplyUsageLink@1006 : Boolean;AllowScheduleContractLines@1007 : Boolean);
    VAR
      JobJournalLine@1001 : Record 210;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",ApplyUsageLink);
      Job.VALIDATE("Allow Schedule/Contract Lines",AllowScheduleContractLines);
      Job.MODIFY(TRUE);
      CreateJobTask(JobTask,Job);

      CreateJobJournal(JobJournalLine,JobTask);
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE TransferToPlanngLine@25(VAR Job@1005 : Record 167;LineType@1003 : ' ,Schedule,Contract,Both Schedule and Contract');
    VAR
      JobLedgerEntry@1002 : Record 169;
      JobCalcBatches@1000 : Codeunit 1005;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,Job);
      JobCalcBatches.TransferToPlanningLine(JobLedgerEntry,LineType);
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@23(VAR JobLedgerEntry@1001 : Record 169;Job@1000 : Record 167);
    BEGIN
      JobLedgerEntry.SETRANGE("Job No.",Job."No.");
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE JobUsageLinkApplied@42(VAR JobUsageLink@1000 : Record 1020;Job@1001 : Record 167;JobPlanningLineType@1002 : 'Schedule,Contract,Both Schedule and Contract');
    VAR
      JobPlanningLine@1003 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.SETRANGE("Line Type",JobPlanningLineType);
      JobPlanningLine.FINDFIRST;
      JobUsageLink.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobUsageLink.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      JobUsageLink.SETRANGE("Line No.",JobPlanningLine."Line No.");
    END;

    LOCAL PROCEDURE VerifyQtyToTransferToJournal@30(Job@1000 : Record 167);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.FINDSET;
      REPEAT
        JobPlanningLine.TESTFIELD("Qty. to Transfer to Journal",0)
      UNTIL JobPlanningLine.NEXT = 0;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@28(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [RequestPageHandler]
    PROCEDURE JobCalculateWIPRequestPageHandler@38(VAR JobCalculateWIP@1000 : TestRequestPage 1086);
    BEGIN
      JobCalculateWIP.PostingDate.SETVALUE(WORKDATE);
      JobCalculateWIP.DocumentNo.SETVALUE(LibraryUTUtility.GetNewCode);
      JobCalculateWIP.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE JobJournalCofirmHandler@34(ExpectedMessage@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesInvoiceRequestPageHandler@29(VAR JobTransferToSalesInvoice@1000 : TestRequestPage 1094);
    BEGIN
      JobTransferToSalesInvoice.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Job]
      Test for Reservation on Job Planning Lines:
        1. Check Reservation for Jobs with Sales Return Order.
        2. Test Unit Cost, Unit Price, Total Price and Unit of Measure Code on Job Planning Line after changing Unit of Measure Code.
        3. Verify the Calc. Recog. Costs Amount on Job after running the Calculate WIP with Job Task Lines.
        4. Verify WIP Entry Amount on Job after running the Calculate WIP on Job.

      Covers Test cases: 274085
        ---------------------------------------------------------------------
        Test Function Name                                            TFS ID
        ---------------------------------------------------------------------
        ReservationForJobWithSalesReturnOrder                         177970

      Covers Test cases: 278849
        ---------------------------------------------------------------------
        Test Function Name                                            TFS ID
        ---------------------------------------------------------------------
        ChangeUOMOnJobPlanningLineForItem                             202391

      BUG ID 66311
      -----------------------------------------------------------------------
        Test Function Name
      -----------------------------------------------------------------------
       CheckCalcRecogCostAmount

      BUG ID 66645
      -----------------------------------------------------------------------
        Test Function Name
      -----------------------------------------------------------------------
       WIPEntryAmountInJobWIPEntry
    }
    END.
  }
}

