OBJECT Codeunit 134996 UT Period Form Mgt
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PeriodFormMgt@1000 : Codeunit 359;
      Assert@1001 : Codeunit 130000;
      IncorrectDateFilterErr@1002 : TextConst 'ENU=Incorrect date filter.';
      LibraryRandom@1004 : Codeunit 130440;
      LibraryFiscalYear@1005 : Codeunit 131302;
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';

    [Test]
    PROCEDURE GetFullPeriodDateFilter_EmptyDateFilter@1();
    BEGIN
      Assert.AreEqual('',PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Day,''),IncorrectDateFilterErr);
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_Day@2();
    VAR
      DateFilter@1000 : Text;
    BEGIN
      DateFilter := GetRandomDateFilter;
      VerifyDateFilter(DateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Day,DateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_Week@25();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1003 : Text;
    BEGIN
      MakeRandomDateFilterByPeriod(ActualDateFilter,ExpectedDateFilter,PeriodType::Week);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Week,ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_Month@7();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeRandomDateFilterByPeriod(ActualDateFilter,ExpectedDateFilter,PeriodType::Month);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Month,ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_FullMonth@31();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      // Verify that full period gives the same full period result filter
      // Test for month only due to other period types use the same algoritm
      MakeRandomDateFilterByPeriod(ActualDateFilter,ExpectedDateFilter,PeriodType::Month);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Month,ExpectedDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_FewMonth@33();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeRandomDateFilterFewMonth(ActualDateFilter,ExpectedDateFilter);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Month,ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_MonthOneDayFilter@35();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeOneDayDateFilter(ActualDateFilter,ExpectedDateFilter);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Month,ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_Quarter@23();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeRandomDateFilterByPeriod(ActualDateFilter,ExpectedDateFilter,PeriodType::Quarter);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Quarter,ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_Year@24();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeRandomDateFilterByPeriod(ActualDateFilter,ExpectedDateFilter,PeriodType::Year);
      VerifyDateFilter(ExpectedDateFilter,PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::Year,ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_AccountPeriod@37();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeAccountingPeriodRandomFilter(ActualDateFilter,ExpectedDateFilter,1);
      VerifyDateFilter(ExpectedDateFilter,
        PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::"Accounting Period",ActualDateFilter));
    END;

    [Test]
    PROCEDURE GetFullPeriodDateFilter_FewAccountPeriods@51();
    VAR
      ActualDateFilter@1000 : Text;
      ExpectedDateFilter@1001 : Text;
    BEGIN
      MakeAccountingPeriodRandomFilter(ActualDateFilter,ExpectedDateFilter,LibraryRandom.RandIntInRange(5,10));
      VerifyDateFilter(ExpectedDateFilter,
        PeriodFormMgt.GetFullPeriodDateFilter(PeriodType::"Accounting Period",ActualDateFilter));
    END;

    LOCAL PROCEDURE GetRandomDateFilter@3() : Text;
    BEGIN
      EXIT(GetDateFilter(WORKDATE,WORKDATE + LibraryRandom.RandIntInRange(5,10)));
    END;

    LOCAL PROCEDURE GetDateFilter@8(StartDate@1000 : Date;EndDate@1002 : Date) : Text;
    VAR
      Period@1001 : Record 2000000007;
    BEGIN
      Period.SETRANGE("Period Start",StartDate,EndDate);
      EXIT(Period.GETFILTER("Period Start"));
    END;

    LOCAL PROCEDURE MakeRandomDateFilterByPeriod@4(VAR ActualDateFilter@1002 : Text;VAR ExpectedDateFilter@1006 : Text;PerType@1003 : Option);
    VAR
      ActualStartDate@1001 : Date;
      ActualEndDate@1000 : Date;
      ExpectedStartDate@1005 : Date;
      ExpectedEndDate@1004 : Date;
    BEGIN
      CASE PerType OF
        PeriodType::Week:
          BEGIN
            ActualStartDate := CALCDATE('<-CW+1D>',WORKDATE);
            ActualEndDate := CALCDATE('<CW-1D>',WORKDATE);
            ExpectedStartDate := CALCDATE('<-CW>',WORKDATE);
            ExpectedEndDate := CALCDATE('<CW>',WORKDATE);
          END;
        PeriodType::Month:
          BEGIN
            ActualStartDate := CALCDATE('<-CM+1D>',WORKDATE);
            ActualEndDate := CALCDATE('<CM-1D>',WORKDATE);
            ExpectedStartDate := CALCDATE('<-CM>',WORKDATE);
            ExpectedEndDate := CALCDATE('<CM>',WORKDATE);
          END;
        PeriodType::Quarter:
          BEGIN
            ActualStartDate := CALCDATE('<-CQ+1D>',WORKDATE);
            ActualEndDate := CALCDATE('<CQ-1D>',WORKDATE);
            ExpectedStartDate := CALCDATE('<-CQ>',WORKDATE);
            ExpectedEndDate := CALCDATE('<CQ>',WORKDATE);
          END;
        PeriodType::Year:
          BEGIN
            ActualStartDate := CALCDATE('<-CY+1D>',WORKDATE);
            ActualEndDate := CALCDATE('<CY-1D>',WORKDATE);
            ExpectedStartDate := CALCDATE('<-CY>',WORKDATE);
            ExpectedEndDate := CALCDATE('<CY>',WORKDATE);
          END;
      END;
      MakeActualAndExpectedDateFilters(ActualStartDate,ActualEndDate,ExpectedStartDate,ExpectedEndDate,
        ActualDateFilter,ExpectedDateFilter)
    END;

    LOCAL PROCEDURE MakeRandomDateFilterFewMonth@19(VAR ActualDateFilter@1002 : Text;VAR ExpectedDateFilter@1006 : Text);
    VAR
      ActualStartDate@1001 : Date;
      ActualEndDate@1000 : Date;
      ExpectedStartDate@1005 : Date;
      ExpectedEndDate@1004 : Date;
    BEGIN
      ActualStartDate := CALCDATE('<-CM+1D>',WORKDATE);
      ActualEndDate := CALCDATE(STRSUBSTNO('<%1M-1D>',LibraryRandom.RandInt(10)),WORKDATE);
      ExpectedStartDate := CALCDATE('<-CM>',ActualStartDate);
      ExpectedEndDate := CALCDATE('<CM>',ActualEndDate);

      MakeActualAndExpectedDateFilters(ActualStartDate,ActualEndDate,ExpectedStartDate,ExpectedEndDate,
        ActualDateFilter,ExpectedDateFilter)
    END;

    LOCAL PROCEDURE MakeOneDayDateFilter@32(VAR ActualDateFilter@1002 : Text;VAR ExpectedDateFilter@1006 : Text);
    VAR
      ActualStartDate@1001 : Date;
      ActualEndDate@1000 : Date;
      ExpectedStartDate@1005 : Date;
      ExpectedEndDate@1004 : Date;
    BEGIN
      ActualStartDate := WORKDATE;
      ActualEndDate := WORKDATE;
      ExpectedStartDate := CALCDATE('<-CM>',ActualStartDate);
      ExpectedEndDate := CALCDATE('<CM>',ActualEndDate);

      MakeActualAndExpectedDateFilters(ActualStartDate,ActualEndDate,ExpectedStartDate,ExpectedEndDate,
        ActualDateFilter,ExpectedDateFilter)
    END;

    LOCAL PROCEDURE MakeActualAndExpectedDateFilters@22(ActualStartDate@1003 : Date;ActualEndDate@1002 : Date;ExpectedStartDate@1001 : Date;ExpectedEndDate@1000 : Date;VAR ActualDateFilter@1005 : Text;VAR ExpectedDateFilter@1004 : Text);
    BEGIN
      ActualDateFilter := GetDateFilter(ActualStartDate,ActualEndDate);
      ExpectedDateFilter := GetDateFilter(ExpectedStartDate,ExpectedEndDate);
    END;

    LOCAL PROCEDURE MakeAccountingPeriodRandomFilter@49(VAR ActualDateFilter@1004 : Text;VAR ExpectedDateFilter@1005 : Text;NumberOfPeriods@1003 : Integer);
    VAR
      ExpectedAccPeriodStartDate@1001 : Date;
      ExpectedAccPeriodEndDate@1000 : Date;
    BEGIN
      LibraryFiscalYear.FindAccountingPeirodStartEndDate(ExpectedAccPeriodStartDate,ExpectedAccPeriodEndDate,NumberOfPeriods);

      MakeActualAndExpectedDateFilters(
        ExpectedAccPeriodStartDate + LibraryRandom.RandIntInRange(5,10),
        ExpectedAccPeriodEndDate - LibraryRandom.RandIntInRange(5,10),
        ExpectedAccPeriodStartDate,ExpectedAccPeriodEndDate,
        ActualDateFilter,ExpectedDateFilter)
    END;

    LOCAL PROCEDURE VerifyDateFilter@11(ExpectedDateFilter@1000 : Text;ActualDateFilter@1001 : Text);
    BEGIN
      Assert.AreEqual(ExpectedDateFilter,ActualDateFilter,IncorrectDateFilterErr);
    END;

    BEGIN
    {
      // [FEATURE] [Period] [Date Filter] [UT]
      Unit tests for codeunit 359 PeriodFormManatement

      Covers unit tests for function GetFullPeriodDateFilter (RFH 357309)

      GetFullPeriodDateFilter_EmptyDateFilter
      GetFullPeriodDateFilter_Day
      GetFullPeriodDateFilter_Week
      GetFullPeriodDateFilter_Month
      GetFullPeriodDateFilter_FullMonth
      GetFullPeriodDateFilter_FewMonth
      GetFullPeriodDateFilter_MonthOneDayFilter
      GetFullPeriodDateFilter_Quarter
      GetFullPeriodDateFilter_Year
      GetFullPeriodDateFilter_AccountPeriod
      GetFullPeriodDateFilter_FewAccountPeriods
    }
    END.
  }
}

