OBJECT Codeunit 136502 UT Time Sheets Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryResource@1002 : Codeunit 130511;
      LibraryService@1008 : Codeunit 131902;
      LibraryAssembly@1006 : Codeunit 132207;
      TimeSheetMgt@1009 : Codeunit 950;
      TimeSheetApprovalMgt@1004 : Codeunit 951;
      LibraryTimeSheet@1000 : Codeunit 131904;
      LibraryJob@1001 : Codeunit 131920;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1007 : Codeunit 130000;
      Text016@1014 : TextConst 'ENU=Time Sheet field %1 value is incorrect.';
      Text020@1010 : TextConst 'ENU=There is no Time Sheet';
      Text021@1012 : TextConst 'ENU=Unexpected time sheet searching error.';
      Text023@1011 : TextConst 'ENU=Quantity cannot be';
      Text024@1013 : TextConst 'ENU=%1 field %2 value is incorrect.';
      Text027@1016 : TextConst 'ENU=Service Line field %1 value is incorrect.';
      IsInitialized@1017 : Boolean;

    [Test]
    PROCEDURE TestResTimeSheetLinePosting@8();
    VAR
      ResJnlBatch@1002 : Record 236;
      ResJnlLine@1003 : Record 207;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ResJnlPostLine@1005 : Codeunit 212;
    BEGIN
      // function tests posting routines for time sheet line with Type = Resource
      Initialize;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // create time sheet line with type Resource
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');

      // create time sheet detail for first day
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",1);
      // create time sheet detail for second day
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date" + 1,2);

      // submit line
      TimeSheetApprovalMgt.Submit(TimeSheetLine);

      // approve line
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // create resource journal lines based on approved time sheet line
      FindResourceJournalBatch(ResJnlBatch);
      ResJnlLine."Journal Template Name" := ResJnlBatch."Journal Template Name";
      ResJnlLine."Journal Batch Name" := ResJnlBatch.Name;
      SuggestResourceJournalLines(ResJnlLine,TimeSheetHeader);

      // find and post created journal lines
      ResJnlLine.SETRANGE("Journal Template Name",ResJnlLine."Journal Template Name");
      ResJnlLine.SETRANGE("Journal Batch Name",ResJnlLine."Journal Batch Name");
      ResJnlLine.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
      REPEAT
        ResJnlPostLine.RunWithCheck(ResJnlLine);
      UNTIL ResJnlLine.NEXT = 0;

      // time sheet line must be marked as posted
      TimeSheetLine.GET(TimeSheetLine."Time Sheet No.",TimeSheetLine."Line No.");
      TimeSheetLine.TESTFIELD(Posted,TRUE);
    END;

    [Test]
    PROCEDURE TestJobTimeSheetLinePosting@1();
    VAR
      Resource@1008 : Record 156;
      Job@1009 : Record 167;
      JobTask@1010 : Record 1001;
      JobJnlLine@1003 : Record 210;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
      JobJnlPostLine@1005 : Codeunit 1012;
    BEGIN
      // function tests posting routines for time sheet line with Type = Job
      Initialize;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // find job and task
      LibraryTimeSheet.FindJob(Job);
      LibraryTimeSheet.FindJobTask(Job."No.",JobTask);
      // job's responsible person (resource) must have Owner ID filled in
      Resource.GET(Job."Person Responsible");
      Resource."Time Sheet Owner User ID" := USERID;
      Resource.MODIFY;

      // create time sheet line with type Job
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,
        TimeSheetLine,
        TimeSheetLine.Type::Job,
        Job."No.",
        JobTask."Job Task No.",
        '',
        '');

      // create time sheet detail for first day
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",1);
      // create time sheet detail for second day
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date" + 1,2);

      // submit line
      TimeSheetApprovalMgt.Submit(TimeSheetLine);

      // approve line
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // create resource journal lines based on approved time sheet line
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,TimeSheetLine);

      // find and post created journal lines
      FilterJobJournalLineByBatchTemplate(JobJnlLine,JobJnlLine."Journal Template Name",JobJnlLine."Journal Batch Name");
      JobJnlLine.SETRANGE(Type,JobJnlLine.Type::Resource);
      JobJnlLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      REPEAT
        JobJnlPostLine.RunWithCheck(JobJnlLine);
      UNTIL JobJnlLine.NEXT = 0;

      // time sheet line must be marked as posted
      TimeSheetLine.GET(TimeSheetLine."Time Sheet No.",TimeSheetLine."Line No.");
      TimeSheetLine.TESTFIELD(Posted,TRUE);
    END;

    [Test]
    PROCEDURE TestJobTimeSheetLinePostingWithChargeableFalse@17();
    VAR
      Resource@1008 : Record 156;
      Job@1009 : Record 167;
      JobTask@1010 : Record 1001;
      JobJnlLine@1003 : Record 210;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ResLedgerEntry@1002 : Record 203;
      JobJnlPostLine@1005 : Codeunit 1012;
    BEGIN
      // [SCENARIO 381031] Posting of Job Journal Lines based on Time Sheet with Chargeable = No
      Initialize;

      // [GIVEN] Approved Time Sheet for Resource "R" with Time Sheet Line where Chargeable = No
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      Resource.GET(TimeSheetHeader."Resource No.");
      Resource."Time Sheet Owner User ID" := USERID;
      Resource.MODIFY;

      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",JobTask."Job Task No.",'','');
      TimeSheetLine.VALIDATE(Chargeable,FALSE);
      TimeSheetLine.MODIFY(TRUE);
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",1);

      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // [GIVEN] Job Journal Line is created for approved Time Sheet line
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,TimeSheetLine);
      FilterJobJournalLineByBatchTemplate(JobJnlLine,JobJnlLine."Journal Template Name",JobJnlLine."Journal Batch Name");
      JobJnlLine.SETRANGE(Type,JobJnlLine.Type::Resource);
      JobJnlLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      JobJnlLine.FINDFIRST;

      // [WHEN] Job Journnal Line is posted
      JobJnlPostLine.RunWithCheck(JobJnlLine);

      // [THEN] Resource Ledger Entry is posted for Resource "R" with Chargeable = false
      ResLedgerEntry.SETRANGE("Resource No.",Resource."No.");
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD(Chargeable,FALSE);
    END;

    [Test]
    PROCEDURE TestTimeSheet_ServiceOrderShipConsume@41();
    VAR
      TimeSheetHeader@1004 : Record 950;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      SavedServiceLine@1000 : Record 5902;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Verify time sheet total quantity after ship and consume service order with timesheet resource.

      Initialize;
      LibraryTimeSheet.InitBackwayScenario(TimeSheetHeader,ServiceHeader,ServiceLine);

      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.MODIFY;

      // get values from service order
      SavedServiceLine.COPY(ServiceLine);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      LibraryTimeSheet.CheckServiceTimeSheetLine(TimeSheetHeader,SavedServiceLine."Document No.",SavedServiceLine."Line No.",
        SavedServiceLine."Qty. to Consume",FALSE);
    END;

    [Test]
    PROCEDURE TestTimeSheet_ServiceOrderShip@36();
    VAR
      TimeSheetHeader@1003 : Record 950;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1002 : Record 5902;
      SavedServiceLine@1004 : Record 5902;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Verify time sheet total quantity after ship service order with timesheet resource.

      Initialize;
      LibraryTimeSheet.InitBackwayScenario(TimeSheetHeader,ServiceHeader,ServiceLine);

      // get values from service order
      SavedServiceLine.COPY(ServiceLine);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      LibraryTimeSheet.CheckServiceTimeSheetLine(TimeSheetHeader,SavedServiceLine."Document No.",SavedServiceLine."Line No.",
        SavedServiceLine."Qty. to Ship",TRUE);
    END;

    [Test]
    PROCEDURE TestWithoutTimeSheet_ServiceOrderShip@39();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      Resource@1001 : Record 156;
      UserSetup@1006 : Record 91;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Verify an error when trying to ship service order with time sheet resource.

      Initialize;

      // create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,FALSE);

      // resource - person
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      Resource.VALIDATE("Time Sheet Owner User ID",UserSetup."User ID");
      Resource.VALIDATE("Time Sheet Approver User ID",USERID);
      Resource.MODIFY;

      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,WORKDATE);

      // create service line
      CreateServiceLine(ServiceLine,ServiceHeader,Resource."No.",LibraryTimeSheet.GetRandomDecimal);

      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text020) > 0,Text021);
    END;

    [Test]
    PROCEDURE TestCopyLinesFromTimeSheet_PostServiceOrderShip@38();
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheetLine@1003 : Record 951;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      SavedServiceLine@1000 : Record 5902;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Create time sheet resource and service order, copy service lines from time sheet into service order, ship service order, verify TS lines

      Initialize;
      // create time sheet with lines and linked to resource empty service order
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);

      // copy service lines from time sheet into service order
      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      // create service line
      CreateServiceLine(ServiceLine,ServiceHeader,TimeSheetHeader."Resource No.",LibraryTimeSheet.GetRandomDecimal);

      // get values from service order
      SavedServiceLine.COPY(ServiceLine);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      LibraryTimeSheet.CheckServiceTimeSheetLine(TimeSheetHeader,SavedServiceLine."Document No.",SavedServiceLine."Line No.",
        SavedServiceLine."Qty. to Ship",TRUE);
    END;

    [Test]
    PROCEDURE TestPostServiceOrderShip_CopyLinesFromTimeSheet@59();
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheetLine@1003 : Record 951;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      TimeSheetApprovalMgt@1009 : Codeunit 951;
      ServiceLineQuantity@1008 : Decimal;
      ServiceHeaderNo@1007 : Code[20];
      ServiceLineNo@1006 : Integer;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Ship service order with time sheet resource, create time sheet line and copy service lines from TS, verify Quantities in service lines.

      Initialize;
      // create service order with line and linked to resource empty time sheet
      LibraryTimeSheet.InitBackwayScenario(TimeSheetHeader,ServiceHeader,ServiceLine);

      // get values from service order
      ServiceLineQuantity := ServiceLine."Qty. to Ship";
      ServiceHeaderNo := ServiceHeader."No.";
      ServiceLineNo := ServiceLine."Line No.";

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Service,'','',ServiceHeader."No.",'');
      TimeSheetLine.VALIDATE("Service Order No.",ServiceHeader."No.");
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
      // submit and approve lines
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // copy service lines from time sheet into service order
      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeaderNo);
      Assert.AreEqual(2,ServiceLine.COUNT,
        STRSUBSTNO(Text016,'COUNT of rows'));

      ServiceLine.SETRANGE("Line No.",ServiceLineNo);
      ServiceLine.FINDFIRST;
      Assert.AreEqual(ServiceLineQuantity,ServiceLine.Quantity,
        STRSUBSTNO(Text016,ServiceLine.FIELDCAPTION(Quantity)));

      ServiceLine.RESET;
      ServiceLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      ServiceLine.FINDFIRST;
      Assert.AreEqual(TimeSheetLine."Total Quantity",ServiceLine.Quantity,
        STRSUBSTNO(Text016,ServiceLine.FIELDCAPTION(Quantity)));
    END;

    [Test]
    [HandlerFunctions(HndlConfirm)]
    PROCEDURE TestTimeSheet_ServiceOrderUndoShipment@68();
    VAR
      TimeSheetHeader@1004 : Record 950;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceShipmentLine@1005 : Record 5991;
      SavedServiceLine@1000 : Record 5902;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Check Quantity in time sheet line after undo shipment of service order with time sheet resource.

      Initialize;
      LibraryTimeSheet.InitBackwayScenario(TimeSheetHeader,ServiceHeader,ServiceLine);

      // get values from service order
      SavedServiceLine.COPY(ServiceLine);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ServiceShipmentLine.SETRANGE("Order No.",SavedServiceLine."Document No.");
      ServiceShipmentLine.FINDFIRST;
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);

      LibraryTimeSheet.CheckServiceTimeSheetLine(TimeSheetHeader,SavedServiceLine."Document No.",SavedServiceLine."Line No.",
        -SavedServiceLine."Qty. to Ship",TRUE);
    END;

    [Test]
    PROCEDURE TestTimeSheet_ServiceOrderPartialShipInvoice@31();
    VAR
      TimeSheetHeader@1008 : Record 950;
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ServiceLineQuantity@1002 : Decimal;
      ServiceHeaderNo@1001 : Code[20];
      ServiceLineNo@1000 : Integer;
      Iteration@1009 : Integer;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Check Quantity in timesheet line after partially shipping & invoicing service order with time sheet resource in two steps.

      Initialize;
      LibraryTimeSheet.InitBackwayScenario(TimeSheetHeader,ServiceHeader,ServiceLine);

      // get values from service order
      ServiceLineQuantity := ServiceLine."Qty. to Ship";
      ServiceHeaderNo := ServiceHeader."No.";
      ServiceLineNo := ServiceLine."Line No.";

      FOR Iteration := 1 TO 2 DO BEGIN
        ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
        ServiceLine.SETRANGE("Document No.",ServiceHeaderNo);
        IF ServiceLine.FINDSET THEN
          REPEAT
            ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity / 2);
            ServiceLine.MODIFY;
          UNTIL ServiceLine.NEXT = 0;
        ServiceHeader.FIND;
        LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
        LibraryTimeSheet.CheckServiceTimeSheetLine(TimeSheetHeader,ServiceHeaderNo,ServiceLineNo,ServiceLineQuantity / 2,TRUE);
      END;
    END;

    [Test]
    PROCEDURE TestTimeSheet_ServiceOrderPartialShipConsume@43();
    VAR
      TimeSheetHeader@1008 : Record 950;
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ServiceLineQuantity@1002 : Decimal;
      ServiceHeaderNo@1001 : Code[20];
      ServiceLineNo@1000 : Integer;
      Iteration@1009 : Integer;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Check Quantity in timesheet line after partially shipping & consuming service order with time sheet resource in two steps.

      Initialize;
      LibraryTimeSheet.InitBackwayScenario(TimeSheetHeader,ServiceHeader,ServiceLine);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.MODIFY;

      // get values from service order
      ServiceLineQuantity := ServiceLine."Qty. to Consume";
      ServiceHeaderNo := ServiceHeader."No.";
      ServiceLineNo := ServiceLine."Line No.";

      FOR Iteration := 1 TO 2 DO BEGIN
        ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
        ServiceLine.SETRANGE("Document No.",ServiceHeaderNo);
        IF ServiceLine.FINDSET THEN
          REPEAT
            ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity / 2);
            ServiceLine.VALIDATE("Qty. to Invoice",0);
            ServiceLine.MODIFY;
          UNTIL ServiceLine.NEXT = 0;
        ServiceHeader.FIND;
        LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
        LibraryTimeSheet.CheckServiceTimeSheetLine(TimeSheetHeader,ServiceHeaderNo,ServiceLineNo,ServiceLineQuantity / 2,FALSE);
      END;
    END;

    [Test]
    PROCEDURE TestJobJournal_PostingQtyMoreThanTimeSheetLine@12();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      JobJnlLine@1001 : Record 210;
      JobJnlPostLine@1002 : Codeunit 1012;
    BEGIN
      Initialize;
      LibraryTimeSheet.InitJobScenario(TimeSheetHeader,TimeSheetLine);

      // create resource journal lines based on approved time sheet line
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,TimeSheetLine);

      // find and post created journal lines
      FilterJobJournalLineByBatchTemplate(JobJnlLine,JobJnlLine."Journal Template Name",JobJnlLine."Journal Batch Name");
      JobJnlLine.SETRANGE(Type,JobJnlLine.Type::Resource);
      JobJnlLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      JobJnlLine.FINDFIRST;
      // change quantity to the next higher
      JobJnlLine.VALIDATE(Quantity,TimeSheetLine."Total Quantity" + 10);
      JobJnlLine.MODIFY;

      ASSERTERROR JobJnlPostLine.RunWithCheck(JobJnlLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text023) > 0,Text021);
    END;

    [Test]
    PROCEDURE TestResourceJournal_PostingQtyMoreThanTimeSheetLine@6();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      ResJnlLine@1000 : Record 207;
      ResJnlBatch@1001 : Record 236;
      ResJnlPostLine@1002 : Codeunit 212;
    BEGIN
      Initialize;
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,FALSE);

      FindResourceJournalBatch(ResJnlBatch);
      ResJnlLine."Journal Template Name" := ResJnlBatch."Journal Template Name";
      ResJnlLine."Journal Batch Name" := ResJnlBatch.Name;
      SuggestResourceJournalLines(ResJnlLine,TimeSheetHeader);

      // find and post created journal lines
      ResJnlLine.SETRANGE("Journal Template Name",ResJnlLine."Journal Template Name");
      ResJnlLine.SETRANGE("Journal Batch Name",ResJnlLine."Journal Batch Name");
      ResJnlLine.SETRANGE("Resource No.",TimeSheetHeader."Resource No.");
      ResJnlLine.FINDFIRST;
      // change quantity to the next higher
      ResJnlLine.VALIDATE(Quantity,TimeSheetLine."Total Quantity" + 10);
      ResJnlLine.MODIFY;

      ASSERTERROR ResJnlPostLine.RunWithCheck(ResJnlLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text023) > 0,Text021);
    END;

    [Test]
    PROCEDURE TestServiceOrder_PostingQtyMoreThanTimeSheetLine_Ship@5();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Verify that service order with service line having Quantity greater than timesheet line cannot be shipped.

      Initialize;
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);

      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      ServiceLine.FINDFIRST;
      ServiceLine.VALIDATE(Quantity,TimeSheetLine."Total Quantity" + LibraryTimeSheet.GetRandomDecimal);
      ServiceLine.MODIFY;

      ServiceHeader.FIND;
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text023) > 0,Text021);
    END;

    [Test]
    PROCEDURE TestServiceOrder_PostingQtyMoreThanTimeSheetLine_ShipConsume@15();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Verify that service order with service line having Quantity greater than timesheet line cannot be shipped and consumed.

      Initialize;
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);

      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      ServiceLine.FINDFIRST;
      ServiceLine.VALIDATE(Quantity,TimeSheetLine."Total Quantity" + LibraryTimeSheet.GetRandomDecimal);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.MODIFY;

      ServiceHeader.FIND;
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text023) > 0,Text021);
    END;

    [Test]
    PROCEDURE TestJobJournal_PartialPosting@25();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      JobJnlLine@1001 : Record 210;
      JobJnlPostLine@1002 : Codeunit 1012;
      Delta@1010 : Decimal;
      DocumentNo@1003 : Code[20];
    BEGIN
      Initialize;
      LibraryTimeSheet.InitJobScenario(TimeSheetHeader,TimeSheetLine);
      Delta := TimeSheetLine."Total Quantity" * (LibraryTimeSheet.GetRandomDecimal / 100);

      // create resource journal lines based on approved time sheet line
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,TimeSheetLine);

      TimeSheetLine.CALCFIELDS("Total Quantity");

      CheckJobJnlLineRemainingQuantity(JobJnlLine,TimeSheetHeader."Resource No.",TimeSheetLine."Total Quantity");

      DocumentNo := 'JJL1';
      JobJnlLine.VALIDATE("Document No.",DocumentNo);
      JobJnlLine.VALIDATE(Quantity,Delta);
      JobJnlLine.MODIFY;
      JobJnlPostLine.RunWithCheck(JobJnlLine);
      CheckTimeSheetPostingEntry(TimeSheetLine,DocumentNo,Delta);

      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,TimeSheetLine);

      CheckJobJnlLineRemainingQuantity(JobJnlLine,TimeSheetHeader."Resource No.",TimeSheetLine."Total Quantity" - Delta);
    END;

    [Test]
    PROCEDURE TestResourceJournal_PartialPosting@24();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      ResJnlLine@1000 : Record 207;
      ResJnlBatch@1001 : Record 236;
      ResJnlPostLine@1002 : Codeunit 212;
      Delta@1009 : Decimal;
      DocumentNo@1004 : Code[20];
    BEGIN
      Initialize;
      LibraryTimeSheet.InitResourceScenario(TimeSheetHeader,TimeSheetLine,FALSE);
      Delta := TimeSheetLine."Total Quantity" * (LibraryTimeSheet.GetRandomDecimal / 100);

      FindResourceJournalBatch(ResJnlBatch);
      ResJnlLine."Journal Template Name" := ResJnlBatch."Journal Template Name";
      ResJnlLine."Journal Batch Name" := ResJnlBatch.Name;
      SuggestResourceJournalLines(ResJnlLine,TimeSheetHeader);

      TimeSheetLine.CALCFIELDS("Total Quantity");

      CheckResJnlLineRemainingQuantity(ResJnlLine,TimeSheetHeader."Resource No.",TimeSheetLine."Total Quantity");

      DocumentNo := 'RJL1';
      ResJnlLine.VALIDATE("Document No.",DocumentNo);
      ResJnlLine.VALIDATE(Quantity,Delta);
      ResJnlLine.MODIFY;
      ResJnlPostLine.RunWithCheck(ResJnlLine);
      // verifying posted values function
      CheckTimeSheetPostingEntry(TimeSheetLine,DocumentNo,Delta);
      // get a new line in the resource journal
      SuggestResourceJournalLines(ResJnlLine,TimeSheetHeader);

      CheckResJnlLineRemainingQuantity(ResJnlLine,TimeSheetHeader."Resource No.",TimeSheetLine."Total Quantity" - Delta);
    END;

    [Test]
    PROCEDURE TestServiceOrder_PartialPosting_Ship@23();
    VAR
      TimeSheetHeader@1008 : Record 950;
      TimeSheetLine@1007 : Record 951;
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ServiceShipmentLine@1000 : Record 5991;
      ServiceHeaderNo@1001 : Code[20];
      ServiceLineNo@1002 : Integer;
      Delta@1004 : Decimal;
    BEGIN
      // [FEATURE] [Order] [Service]
      // [SCENARIO] Verify time sheet posting entry and Remaining Quantity in service line after partially shipping service order with time sheet resource.

      Initialize;
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);
      ServiceHeaderNo := ServiceHeader."No.";
      Delta := TimeSheetLine."Total Quantity" * (LibraryTimeSheet.GetRandomDecimal / 100);

      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      TimeSheetLine.CALCFIELDS("Total Quantity");
      CheckServicelLineRemainingQuantity(ServiceLine,ServiceHeaderNo,TimeSheetLine,TimeSheetLine."Total Quantity",FALSE);
      ServiceLineNo := ServiceLine."Line No.";

      ServiceLine.VALIDATE("Qty. to Ship",Delta);
      ServiceLine.MODIFY;
      ServiceHeader.FIND;
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ServiceShipmentLine.SETRANGE("Order No.",ServiceHeaderNo);
      ServiceShipmentLine.SETRANGE("Order Line No.",ServiceLineNo);
      ServiceShipmentLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      ServiceShipmentLine.FINDFIRST;
      CheckTimeSheetPostingEntry(TimeSheetLine,ServiceShipmentLine."Document No.",Delta);

      CheckServicelLineRemainingQuantity(ServiceLine,ServiceHeaderNo,TimeSheetLine,TimeSheetLine."Total Quantity" - Delta,FALSE);
    END;

    [Test]
    PROCEDURE TestTimeSheet_AbsenceEntryPost@16();
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      Employee@1004 : Record 5200;
      TimeSheetApprovalMgt@1001 : Codeunit 951;
      LibraryHumanResource@1003 : Codeunit 131901;
      Quantity@1006 : Decimal;
    BEGIN
      Initialize;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // create time sheet line with type Absence
      LibraryHumanResource.CreateEmployee(Employee);
      Employee."Resource No." := TimeSheetHeader."Resource No.";
      Employee.MODIFY;

      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Absence,'','','',
        GetCauseOfAbsenceCode);
      TimeSheetLine.Chargeable := FALSE;
      TimeSheetLine.MODIFY;

      Quantity := LibraryTimeSheet.GetRandomDecimal;

      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",Quantity);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      CheckTimeSheetPostingEntry(TimeSheetLine,'',Quantity);
    END;

    [Test]
    PROCEDURE TestTimeSheet_AssemblyOrderPost@50();
    VAR
      TimeSheetHeader@1001 : Record 950;
      AssemblyHeader@1005 : Record 900;
      AssemblyLine@1006 : Record 901;
      SavedAssemblyLine@1000 : Record 901;
    BEGIN
      Initialize;
      // create an assembly order with a resource line (Resource has property Use Time Sheet = TRUE), the time sheet of the resource exists
      LibraryTimeSheet.InitAssemblyBackwayScenario(TimeSheetHeader,AssemblyHeader,AssemblyLine,TRUE);

      // get values from assembly line (with type 'Resource') of the assembly order
      SavedAssemblyLine.COPY(AssemblyLine);

      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');

      LibraryTimeSheet.CheckAssemblyTimeSheetLine(TimeSheetHeader,SavedAssemblyLine."Document No.",SavedAssemblyLine."Line No.",
        SavedAssemblyLine."Quantity to Consume");
    END;

    [Test]
    PROCEDURE TestWithoutTimeSheet_AssemblyOrderPost@45();
    VAR
      TimeSheetHeader@1000 : Record 950;
      AssemblyHeader@1005 : Record 900;
      AssemblyLine@1007 : Record 901;
    BEGIN
      Initialize;
      // create an assembly order with a resource line (Resource has property Use Time Sheet = TRUE), the time sheet of the resource doesn't exist
      LibraryTimeSheet.InitAssemblyBackwayScenario(TimeSheetHeader,AssemblyHeader,AssemblyLine,FALSE);

      ASSERTERROR LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text020) > 0,Text021);
    END;

    [Test]
    PROCEDURE TestTimeSheet_AssemblyOrderPostWithSimilarLines@46();
    VAR
      Resource@1007 : Record 156;
      TimeSheetHeader@1006 : Record 950;
      AssemblyHeader@1004 : Record 900;
      AssemblyLine@1003 : Record 901;
      SavedAssemblyLine1@1010 : Record 901;
      SavedAssemblyLine2@1011 : Record 901;
    BEGIN
      Initialize;
      // create an assembly order with a resource line (Resource has property Use Time Sheet = TRUE), the time sheet of the resource exists
      LibraryTimeSheet.InitAssemblyBackwayScenario(TimeSheetHeader,AssemblyHeader,AssemblyLine,TRUE);
      // get values from the 1st assembly line (with type 'Resource') of the assembly order
      SavedAssemblyLine1.COPY(AssemblyLine);

      Resource.GET(TimeSheetHeader."Resource No.");
      LibraryAssembly.CreateAssemblyLine(
        AssemblyHeader,AssemblyLine,AssemblyLine.Type::Resource,TimeSheetHeader."Resource No.",
        Resource."Base Unit of Measure",4,2,'');
      AssemblyLine.SETRANGE("Document Type",AssemblyLine."Document Type"::Order);
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Resource);
      AssemblyLine.FINDLAST;
      // get values from the 2nd assembly line (with type 'Resource') of the assembly order
      SavedAssemblyLine2.COPY(AssemblyLine);

      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');

      LibraryTimeSheet.CheckAssemblyTimeSheetLine(
        TimeSheetHeader,SavedAssemblyLine1."Document No.",SavedAssemblyLine1."Line No.",
        SavedAssemblyLine1."Quantity to Consume");
      LibraryTimeSheet.CheckAssemblyTimeSheetLine(
        TimeSheetHeader,SavedAssemblyLine2."Document No.",SavedAssemblyLine2."Line No.",
        SavedAssemblyLine2."Quantity to Consume");
    END;

    [Test]
    PROCEDURE TestTimeSheet_AssemblyOrderPartialPost@47();
    VAR
      TimeSheetHeader@1006 : Record 950;
      TimeSheetLine@1005 : Record 951;
      AssemblyHeader@1004 : Record 900;
      AssemblyLine@1003 : Record 901;
      SavedAssemblyLine@1000 : Record 901;
      PostedAssemblyLine@1002 : Record 911;
      Delta@1001 : Decimal;
    BEGIN
      Initialize;
      // create an assembly order with a resource line (Resource has property Use Time Sheet = TRUE), the time sheet of the resource exists
      LibraryTimeSheet.InitAssemblyBackwayScenario(TimeSheetHeader,AssemblyHeader,AssemblyLine,TRUE);

      // get values from assembly order
      SavedAssemblyLine.COPY(AssemblyLine);

      // random quantity to post
      Delta := AssemblyHeader."Quantity to Assemble" * (LibraryTimeSheet.GetRandomDecimal / 100);

      AssemblyHeader.SETRANGE("No.",SavedAssemblyLine."Document No.");
      AssemblyHeader.FINDFIRST;
      AssemblyHeader.VALIDATE("Quantity to Assemble",Delta);
      AssemblyHeader.MODIFY;
      AssemblyLine.SETRANGE("Document Type",AssemblyLine."Document Type"::Order);
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Resource);
      AssemblyLine.FINDLAST;
      SavedAssemblyLine.COPY(AssemblyLine);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      IF TimeSheetLine.FINDLAST THEN
        LibraryTimeSheet.CheckAssemblyTimeSheetLine(
          TimeSheetHeader,SavedAssemblyLine."Document No.",SavedAssemblyLine."Line No.",SavedAssemblyLine."Quantity to Consume");

      PostedAssemblyLine.SETRANGE("Order No.",SavedAssemblyLine."Document No.");
      PostedAssemblyLine.SETRANGE("Order Line No.",SavedAssemblyLine."Line No.");
      PostedAssemblyLine.SETRANGE(Type,PostedAssemblyLine.Type::Resource);
      PostedAssemblyLine.SETRANGE("No.",TimeSheetHeader."Resource No.");
      PostedAssemblyLine.FINDFIRST;
      CheckTimeSheetPostingEntry(TimeSheetLine,PostedAssemblyLine."Document No.",PostedAssemblyLine.Quantity);
    END;

    [Test]
    PROCEDURE SuggestJobJournalLineTSLineDiscountPct@4();
    VAR
      TimeSheetHeader@1000 : Record 950;
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      TimeSheetLine@1004 : Record 951;
      JobResourcePrice@1005 : Record 1012;
      JobJnlLine@1008 : Record 210;
    BEGIN
      // [FEATURE] [Job] [Line Discount]
      // [SCENARIO 371948] Suggest Job Journal Line from Time Sheet with Line Discount %
      Initialize;
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // [GIVEN] Job, Job Task and Job Resource Price with Line Discount % = "X"
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobResourcePriceWithLineDiscountPct(
        JobResourcePrice,JobTask."Job No.",JobTask."Job Task No.",
        JobResourcePrice.Type::Resource,TimeSheetHeader."Resource No.");

      // [GIVEN] Approved and Submitted Time Sheet with Time Sheet Line for created Job Task
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,
        Job."No.",JobTask."Job Task No.",'','');
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",1);
      LibraryTimeSheet.SubmitAndApproveTimeSheetLine(TimeSheetLine);

      // [WHEN] Suggest Job Journal Line from Time Sheet
      SuggestJobJournalLines(JobJnlLine,TimeSheetHeader,TimeSheetLine);

      // [THEN] Created Job Journal Line has field Line Discount % = "X"
      FilterJobJournalLineByBatchTemplate(JobJnlLine,JobJnlLine."Journal Template Name",JobJnlLine."Journal Batch Name");
      JobJnlLine.FINDFIRST;
      JobJnlLine.TESTFIELD("Line Discount %",JobResourcePrice."Line Discount %");
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      UserSetup@1000 : Record 91;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryTimeSheet.Initialize;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateLocalData;

      // create current user id setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      COMMIT;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateJobResourcePriceWithLineDiscountPct@60(VAR JobResourcePrice@1000 : Record 1012;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];Type@1003 : Option;Code@1004 : Code[20]);
    BEGIN
      LibraryJob.CreateJobResourcePrice(
        JobResourcePrice,JobNo,JobTaskNo,
        Type,Code,'','');
      JobResourcePrice.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      JobResourcePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@13(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1002 : Record 5900;ResourceNo@1003 : Code[20];Qty@1001 : Decimal);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo);
      ServiceLine.VALIDATE("Service Item Line No.",10000);
      ServiceLine.VALIDATE(Quantity,Qty);
      ServiceLine.MODIFY;
    END;

    [Normal]
    LOCAL PROCEDURE FindResourceJournalBatch@20(VAR ResJournalBatch@1000 : Record 236);
    VAR
      ResJournalTemplate@1001 : Record 206;
    BEGIN
      ResJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryResource.FindResJournalTemplate(ResJournalTemplate);
      LibraryResource.FindResJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
    END;

    LOCAL PROCEDURE FilterJobJournalLineByBatchTemplate@72(VAR JobJournalLine@1000 : Record 210;JobJournalTemplateName@1001 : Code[10];JobJournalBatchName@1002 : Code[10]);
    BEGIN
      JobJournalLine.SETRANGE("Journal Template Name",JobJournalTemplateName);
      JobJournalLine.SETRANGE("Journal Batch Name",JobJournalBatchName);
    END;

    LOCAL PROCEDURE GetCauseOfAbsenceCode@3() : Code[10];
    VAR
      CauseOfAbsence@1000 : Record 5206;
      HumanResourceUnitOfMeasure@1001 : Record 5220;
    BEGIN
      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      WITH CauseOfAbsence DO BEGIN
        IF "Unit of Measure Code" = '' THEN BEGIN
          HumanResourceUnitOfMeasure.FINDFIRST;
          VALIDATE("Unit of Measure Code",HumanResourceUnitOfMeasure.Code);
          MODIFY(TRUE);
        END;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE SuggestJobJournalLines@51(VAR JobJnlLine@1000 : Record 210;TimeSheetHeader@1012 : Record 950;TimeSheetLine@1011 : Record 951);
    VAR
      JobJnlTemplate@1002 : Record 209;
      JobJnlBatch@1001 : Record 237;
      SuggestJobJnlLines@1005 : Report 952;
    BEGIN
      LibraryJob.GetJobJournalTemplate(JobJnlTemplate);
      LibraryJob.CreateJobJournalBatch(JobJnlTemplate.Name,JobJnlBatch);
      JobJnlLine."Journal Template Name" := JobJnlBatch."Journal Template Name";
      JobJnlLine."Journal Batch Name" := JobJnlBatch.Name;

      SuggestJobJnlLines.InitParameters(
        JobJnlLine,
        TimeSheetHeader."Resource No.",
        TimeSheetLine."Job No.",
        TimeSheetLine."Job Task No.",
        TimeSheetHeader."Starting Date",
        TimeSheetHeader."Ending Date");
      SuggestJobJnlLines.USEREQUESTPAGE(FALSE);
      SuggestJobJnlLines.RUN;
    END;

    LOCAL PROCEDURE SuggestResourceJournalLines@52(ResJnlLine@1003 : Record 207;TimeSheetHeader@1002 : Record 950);
    VAR
      SuggestResJnlLines@1000 : Report 951;
    BEGIN
      SuggestResJnlLines.InitParameters(
        ResJnlLine,
        TimeSheetHeader."Resource No.",
        TimeSheetHeader."Starting Date",
        TimeSheetHeader."Ending Date");
      SuggestResJnlLines.USEREQUESTPAGE(FALSE);
      SuggestResJnlLines.RUN;
    END;

    LOCAL PROCEDURE CheckTimeSheetPostingEntry@22(TimeSheetLine@1001 : Record 951;DocumentNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      TimeSheetPostingEntry@1003 : Record 958;
    BEGIN
      TimeSheetPostingEntry.SETRANGE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      TimeSheetPostingEntry.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
      TimeSheetPostingEntry.SETRANGE("Document No.",DocumentNo);
      TimeSheetPostingEntry.FINDLAST;
      Assert.AreEqual(
        Quantity,TimeSheetPostingEntry.Quantity,
        STRSUBSTNO(Text024,TimeSheetPostingEntry.TABLECAPTION,TimeSheetPostingEntry.FIELDCAPTION(Quantity)));
    END;

    LOCAL PROCEDURE CheckJobJnlLineRemainingQuantity@14(VAR JobJnlLine@1000 : Record 210;ResourceNo@1002 : Code[20];TimeSheetLineRemainingQuantity@1003 : Decimal);
    BEGIN
      FilterJobJournalLineByBatchTemplate(JobJnlLine,JobJnlLine."Journal Template Name",JobJnlLine."Journal Batch Name");
      JobJnlLine.SETRANGE(Type,JobJnlLine.Type::Resource);
      JobJnlLine.SETRANGE("No.",ResourceNo);
      JobJnlLine.FINDLAST;
      Assert.AreEqual(
        TimeSheetLineRemainingQuantity,JobJnlLine.Quantity,STRSUBSTNO(Text024,JobJnlLine.TABLECAPTION,JobJnlLine.FIELDCAPTION(Quantity)));
    END;

    LOCAL PROCEDURE CheckResJnlLineRemainingQuantity@18(VAR ResJnlLine@1000 : Record 207;ResourceNo@1002 : Code[20];TimeSheetLineRemainingQuantity@1003 : Decimal);
    BEGIN
      ResJnlLine.SETRANGE("Journal Template Name",ResJnlLine."Journal Template Name");
      ResJnlLine.SETRANGE("Journal Batch Name",ResJnlLine."Journal Batch Name");
      ResJnlLine.SETRANGE("Resource No.",ResourceNo);
      ResJnlLine.FINDLAST;
      Assert.AreEqual(
        TimeSheetLineRemainingQuantity,ResJnlLine.Quantity,STRSUBSTNO(Text024,ResJnlLine.TABLECAPTION,ResJnlLine.FIELDCAPTION(Quantity)));
    END;

    LOCAL PROCEDURE CheckServicelLineRemainingQuantity@27(VAR ServiceLine@1000 : Record 5902;ServiceHeaderNo@1004 : Code[20];TimeSheetLine@1002 : Record 951;TimeSheetLineRemainingQuantity@1003 : Decimal;Consume@1001 : Boolean);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeaderNo);
      ServiceLine.SETRANGE("Time Sheet No.",TimeSheetLine."Time Sheet No.");
      ServiceLine.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
      ServiceLine.FINDFIRST;
      IF NOT Consume THEN
        Assert.AreEqual(
          TimeSheetLineRemainingQuantity,ServiceLine."Qty. to Ship",STRSUBSTNO(Text027,ServiceLine.FIELDCAPTION("Qty. to Ship")))
      ELSE
        Assert.AreEqual(
          TimeSheetLineRemainingQuantity,ServiceLine."Qty. to Consume",STRSUBSTNO(Text027,ServiceLine.FIELDCAPTION("Qty. to Consume")));
    END;

    [ConfirmHandler]
    PROCEDURE HndlConfirm@42(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Time Sheet]
      Unsupported version tags:
      SE: Unable to Execute

      This unit test codeunit tests time sheets posting routines
    }
    END.
  }
}

