OBJECT Codeunit 5704 TransferOrder-Post Shipment
{
  OBJECT-PROPERTIES
  {
    Date=29-06-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48822,NAVIN9.00.00.48822;
  }
  PROPERTIES
  {
    TableNo=5740;
    Permissions=TableData 6507=i;
    OnRun=VAR
            Item@1000 : Record 27;
            SourceCodeSetup@1001 : Record 242;
            InvtSetup@1002 : Record 313;
            InventoryPostingSetup@1007 : Record 5813;
            NoSeriesMgt@1003 : Codeunit 396;
            UpdateAnalysisView@1004 : Codeunit 410;
            UpdateItemAnalysisView@1009 : Codeunit 7150;
            CreateReservEntry@1010 : Codeunit 99000830;
            RecordLinkManagement@1011 : Codeunit 447;
            Window@1006 : Dialog;
            LineCount@1005 : Integer;
            NextLineNo@1008 : Integer;
            TransShptHeader2@1500000 : Record 5744;
            TaxJnlLine@1500002 : Record 16587;
          BEGIN
            IF Status = Status::Open THEN BEGIN
              CODEUNIT.RUN(CODEUNIT::"Release Transfer Document",Rec);
              Status := Status::Open;
              MODIFY;
              COMMIT;
              Status := Status::Released;
            END;
            TransHeader := Rec;
            TransHeader.SetHideValidationDialog(HideValidationDialog);

            WITH TransHeader DO BEGIN
              TESTFIELD("Transfer-from Code");
              TESTFIELD("Transfer-to Code");
              IF "Transfer-from Code" = "Transfer-to Code" THEN
                ERROR
                (Text000,
                  "No.",FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"));
              TESTFIELD("In-Transit Code");
              TESTFIELD(Status,Status::Released);
              TESTFIELD("Posting Date");

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              IF "Shipping Advice" = "Shipping Advice"::Complete THEN
                IF NOT GetShippingAdvice THEN
                  ERROR(Text008);

              CheckDim;

              TransferBuffer[1].DELETEALL;
              ExcisePostingBuffer[1].DELETEALL;
              StrPostBuf[1].DELETEALL;
              GSTPostingBuffer[1].DELETEALL;
              TransLine.CalculateStructures(TransHeader);
              TransLine.AdjustStructureAmounts(TransHeader);
              TransLine.UpdateTransLines(TransHeader);

              TransLine.RESET;
              TransLine.SETRANGE("Document No.","No.");
              TransLine.SETRANGE("Derived From Line No.",0);
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Ship",'<>0');
              IF TransLine.ISEMPTY THEN
                ERROR(Text001);

              WhseShip := TempWhseShptHeader.FINDFIRST;
              InvtPickPutaway := WhseReference <> 0;
              CheckItemInInventoryAndWarehouse(TransLine,NOT (WhseShip OR InvtPickPutaway));

              GetLocation("Transfer-from Code");
              IF Location."Bin Mandatory" AND NOT (WhseShip OR InvtPickPutaway) THEN
                WhsePosting := TRUE;
              CheckCapitalItem;
              IF "Captive Consumption" THEN
                Location.TESTFIELD("Trading Location",FALSE);

              Window.OPEN(
                '#1#################################\\' +
                Text003);

              Window.UPDATE(1,STRSUBSTNO(Text004,"No."));

              SourceCodeSetup.GET;
              SourceCode := SourceCodeSetup.Transfer;
              InvtSetup.GET;
              InvtSetup.TESTFIELD("Posted Transfer Shpt. Nos.");
              InventoryPostingSetup.SETRANGE("Location Code","Transfer-from Code");
              InventoryPostingSetup.FINDFIRST;
              InventoryPostingSetup.SETRANGE("Location Code","Transfer-to Code");
              InventoryPostingSetup.FINDFIRST;

              NoSeriesLine.LOCKTABLE;
              IF NoSeriesLine.FINDLAST THEN;
              IF InvtSetup."Automatic Cost Posting" THEN BEGIN
                GLEntry.LOCKTABLE;
                IF GLEntry.FINDLAST THEN;
              END;

              // Insert shipment header
              PostedWhseShptHeader.LOCKTABLE;
              TransShptHeader.LOCKTABLE;
              TransShptHeader.INIT;
              TransShptHeader."Transfer-from Code" := "Transfer-from Code";
              TransShptHeader."Transfer-from Name" := "Transfer-from Name";
              TransShptHeader."Transfer-from Name 2" := "Transfer-from Name 2";
              TransShptHeader."Transfer-from Address" := "Transfer-from Address";
              TransShptHeader."Transfer-from Address 2" := "Transfer-from Address 2";
              TransShptHeader."Transfer-from Post Code" := "Transfer-from Post Code";
              TransShptHeader."Transfer-from City" := "Transfer-from City";
              TransShptHeader."Transfer-from County" := "Transfer-from County";
              TransShptHeader."Trsf.-from Country/Region Code" := "Trsf.-from Country/Region Code";
              TransShptHeader."Transfer-from Contact" := "Transfer-from Contact";
              TransShptHeader."Transfer-to Code" := "Transfer-to Code";
              TransShptHeader."Transfer-to Name" := "Transfer-to Name";
              TransShptHeader."Transfer-to Name 2" := "Transfer-to Name 2";
              TransShptHeader."Transfer-to Address" := "Transfer-to Address";
              TransShptHeader."Transfer-to Address 2" := "Transfer-to Address 2";
              TransShptHeader."Transfer-to Post Code" := "Transfer-to Post Code";
              TransShptHeader."Transfer-to City" := "Transfer-to City";
              TransShptHeader."Transfer-to County" := "Transfer-to County";
              TransShptHeader."Trsf.-to Country/Region Code" := "Trsf.-to Country/Region Code";
              TransShptHeader."Transfer-to Contact" := "Transfer-to Contact";
              TransShptHeader."Transfer Order Date" := "Posting Date";
              TransShptHeader."Posting Date" := "Posting Date";
              TransShptHeader."Shipment Date" := "Shipment Date";
              TransShptHeader."Receipt Date" := "Receipt Date";
              TransShptHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              TransShptHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              TransShptHeader."Dimension Set ID" := "Dimension Set ID";
              TransShptHeader."Transfer Order No." := "No.";
              TransShptHeader."External Document No." := "External Document No.";
              TransShptHeader."In-Transit Code" := "In-Transit Code";
              TransShptHeader."Shipping Agent Code" := "Shipping Agent Code";
              TransShptHeader."Shipping Agent Service Code" := "Shipping Agent Service Code";
              TransShptHeader."Shipment Method Code" := "Shipment Method Code";
              TransShptHeader."Transaction Type" := "Transaction Type";
              TransShptHeader."Transport Method" := "Transport Method";
              TransShptHeader."Entry/Exit Point" := "Entry/Exit Point";
              TransShptHeader.Area := Area;
              TransShptHeader."Transaction Specification" := "Transaction Specification";
              TransShptHeader."Captive Consumption" := "Captive Consumption";
              TransShptHeader."Time of Removal" := "Time of Removal";
              TransShptHeader."Vehicle No." := "Vehicle No.";
              TransShptHeader."LR/RR No." := "LR/RR No.";
              TransShptHeader."LR/RR Date" := "LR/RR Date";
              TransShptHeader."Mode of Transport" := "Mode of Transport";
              IF Location2.GET("Transfer-from Code") THEN
                TransShptHeader."E.C.C. No." := Location2."E.C.C. No.";
              IF NOT "Captive Consumption" THEN BEGIN
                IF Location."Transfer Shipment Nos." <> '' THEN BEGIN
                  TransShptHeader."No. Series" := Location."Transfer Shipment Nos.";
                  TransShptHeader."No." :=
                    NoSeriesMgt.GetNextNo(
                      Location."Transfer Shipment Nos.","Posting Date",TRUE);
                END ELSE BEGIN
              TransShptHeader."No. Series" := InvtSetup."Posted Transfer Shpt. Nos.";
              TransShptHeader."No." :=
                NoSeriesMgt.GetNextNo(
                  InvtSetup."Posted Transfer Shpt. Nos.","Posting Date",TRUE);
                END;
                IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
                  GSTManagement.CheckGSTAccountingPeriod("Posting Date");
                  Location.GET("Transfer-from Code");
                  Location.TESTFIELD("GST Transfer Shipment No.");
                  TransShptHeader."No. Series" := Location."GST Transfer Shipment No.";
                  TransShptHeader."No." := NoSeriesMgt.GetNextNo(Location."GST Transfer Shipment No.","Posting Date",TRUE);
                END;
              END;
              IF NOT Location."Trading Location" THEN
                IF "Captive Consumption" THEN BEGIN
                  IF Location."Sales Shipment Nos. (Captive)" <> '' THEN BEGIN
                    TransShptHeader."No. Series" := Location."Sales Shipment Nos. (Captive)";
                    TransShptHeader."No." := NoSeriesMgt.GetNextNo(Location."Sales Shipment Nos. (Captive)","Posting Date",TRUE);
                  END ELSE BEGIN
                    InvtSetup.TESTFIELD("Posted Shpt. Nos. (Captive)");
                    TransShptHeader."No. Series" := InvtSetup."Posted Shpt. Nos. (Captive)";
                    TransShptHeader."No." := NoSeriesMgt.GetNextNo(InvtSetup."Posted Shpt. Nos. (Captive)","Posting Date",TRUE);
                  END;
                END;
              TransShptHeader.Structure := Structure;
              TransShptHeader.INSERT;

              IF InvtSetup."Copy Comments Order to Shpt." THEN BEGIN
                CopyCommentLines(1,2,"No.",TransShptHeader."No.");
                RecordLinkManagement.CopyLinks(Rec,TransShptHeader);
              END;

              StrOrderDetails.RESET;
              StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Transfer);
              StrOrderDetails.SETRANGE("Document No.","No.");
              StrOrderDetails.SETRANGE("Structure Code",Structure);
              IF StrOrderDetails.FIND('-') THEN
                REPEAT
                  PostedStrOrderDetails.INIT;
                  PostedStrOrderDetails.TRANSFERFIELDS(StrOrderDetails);
                  PostedStrOrderDetails."No." := TransShptHeader."No.";
                  PostedStrOrderDetails.INSERT;
                UNTIL StrOrderDetails.NEXT = 0;

              IF WhseShip THEN BEGIN
                WhseShptHeader.GET(TempWhseShptHeader."No.");
                WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,TransShptHeader."No.","Posting Date");
              END;

              // Insert shipment lines
              LineCount := 0;
              IF WhseShip THEN
                PostedWhseShptLine.LOCKTABLE;
              IF InvtPickPutaway THEN
                WhseRqst.LOCKTABLE;
              TransShptLine.LOCKTABLE;
              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Ship");
              IF TransLine.FIND('-') THEN
                REPEAT
                  LineCount := LineCount + 1;
                  Window.UPDATE(2,LineCount);

                  IF TransLine."Item No." <> '' THEN BEGIN
                    Item.GET(TransLine."Item No.");
                    Item.TESTFIELD(Blocked,FALSE);
                    DivideAmount(TransLine."Qty. to Ship");
                    FillExcisePostingBuffer(TransLine);
                    IF (TransLine."GST Base Amount" <> 0) AND (TransLine."Qty. to Ship" <> 0) THEN
                      FillGSTPostingBuffer(TransLine);
                  END;

                  ExciseExistInStructure := FALSE;
                  StrOrdLineDetails.RESET;
                  StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Transfer);
                  StrOrdLineDetails.SETRANGE("Document No.",TransLine."Document No.");
                  StrOrdLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                  StrOrdLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                  StrOrdLineDetails.SETFILTER("Tax/Charge Type",'%1',StrOrdLineDetails."Tax/Charge Type"::Excise);
                  IF StrOrdLineDetails.FIND('-') THEN
                    ExciseExistInStructure := TRUE;

                  GetLocation(TransLine."Transfer-from Code");
                  IF (TransLine."Excise Accounting Type" = TransLine."Excise Accounting Type"::"With CENVAT") AND
                     (NOT Location."Trading Location") AND ExciseExistInStructure
                  THEN BEGIN
                    IF TransLine."Qty. to Ship" <> 0 THEN
                      IF NOT TransLine."Capital Item" THEN
                        ExciseInsertRGRegisters.InsertRG23APartITransferShip(TransLine,TransShptHeader)
                      ELSE
                        ExciseInsertRGRegisters.InsertRG23CPartITransferShip(TransLine,TransShptHeader);
                  END;
                  IF (TransLine."Excise Accounting Type" = TransLine."Excise Accounting Type"::"With CENVAT") AND
                     Location."Trading Location"
                  THEN
                    IF TransLine."Qty. to Ship" <> 0 THEN
                      ExciseInsertRGRegisters.InitRG23DTransferShip(TransLine,TransShptHeader);
                  IF "Captive Consumption" THEN
                    TransLine.TESTFIELD("Captive Consumption %");
                  IF Location.GET("Transfer-from Code") THEN
                    IF ECCNos.GET(Location."E.C.C. No.") THEN;

                  IF TransLine."Excise Prod. Posting Group" <> '' THEN
                    IF TransLine."Qty. to Ship" <> 0 THEN
                      IF ECCNos."Type of Unit" = ECCNos."Type of Unit"::Manufacturer THEN
                        ExciseInsertRGRegisters.InsertRT12Transfer(TransLine,TransShptHeader)
                      ELSE
                        IF ECCNos."Type of Unit" = ECCNos."Type of Unit"::"100% EOU" THEN
                          ExciseInsertRGRegisters.InsertER2Transfer(TransLine,TransShptHeader);
                  TransferCharges := 0;
                  StrOrdLineDetails.RESET;
                  StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Transfer);
                  StrOrdLineDetails.SETRANGE("Document No.",TransLine."Document No.");
                  StrOrdLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                  StrOrdLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                  StrOrdLineDetails.SETFILTER("Tax/Charge Type",'%1|%2',StrOrdLineDetails."Tax/Charge Type"::Charges,
                    StrOrdLineDetails."Tax/Charge Type"::"Other Taxes");
                  IF StrOrdLineDetails.FIND('-') THEN
                    REPEAT
                      FillStrPostBuffer(StrOrdLineDetails,TransLine."Qty. to Ship",TransLine.Quantity);
                    UNTIL StrOrdLineDetails.NEXT = 0;

                  TransShptLine.INIT;
                  TransShptLine."Document No." := TransShptHeader."No.";
                  TransShptLine."Line No." := TransLine."Line No.";
                  TransShptLine."Item No." := TransLine."Item No.";
                  TransShptLine.Description := TransLine.Description;
                  TransShptLine.Quantity := TransLine."Qty. to Ship";
                  TransShptLine."Unit of Measure" := TransLine."Unit of Measure";
                  TransShptLine."Shortcut Dimension 1 Code" := TransLine."Shortcut Dimension 1 Code";
                  TransShptLine."Shortcut Dimension 2 Code" := TransLine."Shortcut Dimension 2 Code";
                  TransShptLine."Dimension Set ID" := TransLine."Dimension Set ID";
                  TransShptLine."Gen. Prod. Posting Group" := TransLine."Gen. Prod. Posting Group";
                  TransShptLine."Inventory Posting Group" := TransLine."Inventory Posting Group";
                  TransShptLine."Quantity (Base)" := TransLine."Qty. to Ship (Base)";
                  TransShptLine."Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
                  TransShptLine."Unit of Measure Code" := TransLine."Unit of Measure Code";
                  TransShptLine."Gross Weight" := TransLine."Gross Weight";
                  TransShptLine."Net Weight" := TransLine."Net Weight";
                  TransShptLine."Unit Volume" := TransLine."Unit Volume";
                  TransShptLine."Variant Code" := TransLine."Variant Code";
                  TransShptLine."Units per Parcel" := TransLine."Units per Parcel";
                  TransShptLine."Description 2" := TransLine."Description 2";
                  TransShptLine."Transfer Order No." := TransLine."Document No.";
                  TransShptLine."Shipment Date" := TransLine."Shipment Date";
                  TransShptLine."Shipping Agent Code" := TransLine."Shipping Agent Code";
                  TransShptLine."Shipping Agent Service Code" := TransLine."Shipping Agent Service Code";
                  TransShptLine."In-Transit Code" := TransLine."In-Transit Code";
                  TransShptLine."Transfer-from Code" := TransLine."Transfer-from Code";
                  TransShptLine."Transfer-to Code" := TransLine."Transfer-to Code";
                  TransShptLine."Transfer-from Bin Code" := TransLine."Transfer-from Bin Code";
                  TransShptLine."Shipping Time" := TransLine."Shipping Time";
                  TransShptLine."Item Category Code" := TransLine."Item Category Code";
                  TransShptLine."Product Group Code" := TransLine."Product Group Code";
                  TransShptLine."Unit Price" := TransLine."Transfer Price";
                  TransShptLine.Amount := TransLine.Amount;
                  TransShptLine."Excise Accounting Type" := TransLine."Excise Accounting Type";
                  TransShptLine."Excise Prod. Posting Group" := TransLine."Excise Prod. Posting Group";
                  TransShptLine."Excise Bus. Posting Group" := TransLine."Excise Bus. Posting Group";
                  TransShptLine."BED Amount" := TransLine."BED Amount";
                  TransShptLine."AED(GSI) Amount" := TransLine."AED(GSI) Amount";
                  TransShptLine."AED(TTA) Amount" := TransLine."AED(TTA) Amount";
                  TransShptLine."SED Amount" := TransLine."SED Amount";
                  TransShptLine."SAED Amount" := TransLine."SAED Amount";
                  TransShptLine."CESS Amount" := TransLine."CESS Amount";
                  TransShptLine."NCCD Amount" := TransLine."NCCD Amount";
                  TransShptLine."eCess Amount" := TransLine."eCess Amount";
                  TransShptLine."SHE Cess Amount" := TransLine."SHE Cess Amount";
                  TransShptLine."ADET Amount" := TransLine."ADET Amount";
                  TransShptLine."ADE Amount" := TransLine."ADE Amount";
                  TransShptLine."Excise Amount" := TransLine."Excise Amount";
                  TransShptLine."Excise Base Amount" := TransLine."Excise Base Amount";
                  TransShptLine."Assessable Value" := TransLine."Assessable Value";
                  TransShptLine."Excise Loading on Inventory" := TransLine."Excise Loading on Inventory";
                  TransShptLine."ADC VAT Amount" := TransLine."ADC VAT Amount";
                  TransShptLine.CVD := TransLine.CVD;
                  TransShptLine."Applies-to Entry (RG 23 D)" := TransLine."Applies-to Entry (RG 23 D)";
                  TransShptLine."Cost of Production" := TransLine."Cost of Production";
                  TransShptLine."Captive Consumption %" := TransLine."Captive Consumption %";
                  TransShptLine."Admin. Cost %" := TransLine."Admin. Cost %";
                  TransShptLine."Cost Of Prod. Incl. Admin Cost" := TransLine."Cost Of Prod. Incl. Admin Cost";
                  TransShptLine."MRP Price" := TransLine."MRP Price";
                  TransShptLine.MRP := TransLine.MRP;
                  TransShptLine."Abatement %" := TransLine."Abatement %";
                  TransShptLine."Custom eCess Amount" := TransLine."Custom eCess Amount";
                  TransShptLine."Custom SHECess Amount" := TransLine."Custom SHECess Amount";
                  TransShptLine."Excise Effective Rate" := TransLine."Excise Effective Rate";
                  TransShptLine."GST Base Amount" := TransLine."GST Base Amount";
                  TransShptLine."GST %" := TransLine."GST %";
                  TransShptLine."Total GST Amount" := TransLine."Total GST Amount";
                  TransShptLine."GST Group Code" := TransLine."GST Group Code";
                  TransShptLine."GST Credit" := TransLine."GST Credit";
                  TransShptLine."HSN/SAC Code" := TransLine."HSN/SAC Code";
                  TransShptLine.Exempted := TransLine.Exempted;
                  CompanyInformation.GET;
                  IF Item.GET(TransShptLine."Item No.") THEN;
                  IF ECCNoItemCategory.GET(TransShptLine."Item No.",ECCNos.Code) THEN;
                  IF TransShptHeader2.GET(TransShptLine."Document No.") THEN
                    BEGIN
                    IF (CompanyInformation."Large Tax Payer" = TRUE) AND
                       (ECCNoItemCategory."Type of Item" = ECCNoItemCategory."Type of Item"::"Raw Material") AND
                       (Item."Excise Prod. Posting Group" <> '')
                    THEN BEGIN
                      ExciseNoSeries.GET(ExciseNoSeries.Type::"LTU RM",Location."E.C.C. No.");
                      TransShptHeader2."S. No. for RM" := NoSeriesMgt.GetNextNo(ExciseNoSeries."No. Series",
                          TransShptHeader2."Posting Date",TRUE);
                      TransShptHeader2.MODIFY;
                    END;
                    IF (CompanyInformation."Large Tax Payer" = TRUE) AND
                       (ECCNoItemCategory."Type of Item" = ECCNoItemCategory."Type of Item"::Intermediate) AND
                       (Item."Excise Prod. Posting Group" <> '')
                    THEN BEGIN
                      ExciseNoSeries.GET(ExciseNoSeries.Type::"LTU IM",Location."E.C.C. No.");
                      TransShptHeader2."S. No. for IM" := NoSeriesMgt.GetNextNo(ExciseNoSeries."No. Series",
                          TransShptHeader2."Posting Date",TRUE);
                      TransShptHeader2.MODIFY;
                    END;
                  END;

                  IF TransLine."Qty. to Ship" > 0 THEN BEGIN
                    OriginalQuantity := TransLine."Qty. to Ship";
                    OriginalQuantityBase := TransLine."Qty. to Ship (Base)";
                    PostItemJnlLine(TransLine,TransShptHeader,TransShptLine);
                    TransShptLine."Item Shpt. Entry No." := InsertShptEntryRelation(TransShptLine);
                    IF WhseShip THEN BEGIN
                      WhseShptLine.SETCURRENTKEY(
                        "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                      WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                      WhseShptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                      WhseShptLine.SETRANGE("Source No.",TransLine."Document No.");
                      WhseShptLine.SETRANGE("Source Line No.",TransLine."Line No.");
                      WhseShptLine.FINDFIRST;
                      WhseShptLine.TESTFIELD("Qty. to Ship",TransShptLine.Quantity);
                      WhsePostShpt.CreatePostedShptLine(
                        WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                    END;
                    IF WhsePosting THEN
                      PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase);
                  END;
                  TransShptLine.INSERT;

                  FillTransferBuffer(TransLine);

                  StrOrdLineDetails.RESET;
                  StrOrdLineDetails.SETRANGE(Type,StrOrderDetails.Type::Transfer);
                  StrOrdLineDetails.SETRANGE("Document No.","No.");
                  StrOrdLineDetails.SETRANGE("Structure Code",Structure);
                  StrOrdLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                  StrOrdLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                  IF StrOrdLineDetails.FIND('-') THEN
                    REPEAT
                      PostedStrOrdLineDetails.INIT;
                      PostedStrOrdLineDetails.TRANSFERFIELDS(StrOrdLineDetails);
                      PostedStrOrdLineDetails."Invoice No." := TransShptHeader."No.";
                      PostedStrOrdLineDetails."Base Amount" :=
                        ROUND(StrOrdLineDetails."Base Amount" * (TransLine."Qty. to Ship" / TransLine.Quantity));
                      PostedStrOrdLineDetails.Amount :=
                        ROUND(StrOrdLineDetails.Amount * (TransLine."Qty. to Ship" / TransLine.Quantity));
                      PostedStrOrdLineDetails."Amount (LCY)" :=
                        ROUND(StrOrdLineDetails."Amount (LCY)" * (TransLine."Qty. to Ship" / TransLine.Quantity));
                      PostedStrOrdLineDetails.INSERT;
                    UNTIL StrOrdLineDetails.NEXT = 0;
                UNTIL TransLine.NEXT = 0;

              InvtSetup.GET;
              IF InvtSetup."Automatic Cost Adjustment" <>
                 InvtSetup."Automatic Cost Adjustment"::Never
              THEN BEGIN
                InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
                InvtAdjmt.MakeMultiLevelAdjmt;
              END;
              IF TransferBuffer[1].FIND('+') THEN
                REPEAT
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Posting Date";
                  GenJnlLine."Document No." := TransShptHeader."No.";
                  GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                  InventoryPostingSetup.GET("In-Transit Code",TransferBuffer[1]."Inventory Posting Group");
                  InventoryPostingSetup.TESTFIELD("Unrealized Profit Account");
                  GenJnlLine."Account No." := InventoryPostingSetup."Unrealized Profit Account";
                  GenJnlLine."System-Created Entry" := TransferBuffer[1]."System-Created Entry";
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
                  GenJnlLine."Gen. Bus. Posting Group" := TransferBuffer[1]."Gen. Bus. Posting Group";
                  GenJnlLine."Gen. Prod. Posting Group" := TransferBuffer[1]."Gen. Prod. Posting Group";
                  GenJnlLine.Amount := TransferBuffer[1].Amount + TransferBuffer[1]."Charges Amount";
                  GenJnlLine.Quantity := TransferBuffer[1].Quantity;
                  GenJnlLine."Shortcut Dimension 1 Code" := TransferBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := TransferBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := TransferBuffer[1]."Dimension Set ID";
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                  GenJnlLine.Description := STRSUBSTNO(Text13700,TransShptHeader."No.");
                  IF GenJnlLine.Amount <> 0 THEN
                    RunGenJnlPostLine(GenJnlLine);

                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Posting Date";
                  GenJnlLine."Document No." := TransShptHeader."No.";
                  GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                  InventoryPostingSetup.GET("Transfer-from Code",TransferBuffer[1]."Inventory Posting Group");
                  InventoryPostingSetup.TESTFIELD("Unrealized Profit Account");
                  GenJnlLine."Account No." := InventoryPostingSetup."Unrealized Profit Account";
                  GenJnlLine."System-Created Entry" := TransferBuffer[1]."System-Created Entry";
                  GenJnlLine.Amount := -TransferBuffer[1]."Excise Amount";
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
                  GenJnlLine."Gen. Bus. Posting Group" := TransferBuffer[1]."Gen. Bus. Posting Group";
                  GenJnlLine."Gen. Prod. Posting Group" := TransferBuffer[1]."Gen. Prod. Posting Group";
                  GenJnlLine."Shortcut Dimension 1 Code" := TransferBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := TransferBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := TransferBuffer[1]."Dimension Set ID";
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                  GenJnlLine.Description := STRSUBSTNO(Text13700,TransShptHeader."No.");
                  IF TransferBuffer[1]."Excise Amount" <> 0 THEN
                    RunGenJnlPostLine(GenJnlLine);

                UNTIL TransferBuffer[1].NEXT(-1) = 0;
              TransferBuffer[1].DELETEALL;

              IF ExcisePostingBuffer[1].FIND('+') THEN
                REPEAT
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document No." := TransShptHeader."No.";
                  GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                  GenJnlLine."External Document No." := "No.";
                  GenJnlLine."Account No." := ExcisePostingBuffer[1]."Item No.";
                  GenJnlLine."System-Created Entry" := TransferBuffer[1]."System-Created Entry";
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                  GenJnlLine."Excise Bus. Posting Group" := ExcisePostingBuffer[1]."Excise Bus. Posting Group";
                  GenJnlLine."Excise Prod. Posting Group" := ExcisePostingBuffer[1]."Excise Prod. Posting Group";
                  GenJnlLine."Excise Base Amount" := -ExcisePostingBuffer[1]."Excise Base Amount";
                  GenJnlLine."BED %" := ExcisePostingBuffer[1]."BED %";
                  GenJnlLine."Amount Including Excise" := -ExcisePostingBuffer[1]."Amount Including Excise";
                  GenJnlLine."Excise Amount" := -ExcisePostingBuffer[1]."Excise Amount";
                  GenJnlLine."Source Curr. Excise Amount" := -ExcisePostingBuffer[1]."Excise Amount (ACY)";

                  TaxJnlLine.RESET;
                  TaxJnlLine.SETRANGE("Journal Template Name",'');
                  TaxJnlLine.SETRANGE("Journal Batch Name",'');
                  TaxJnlLine.SETRANGE("Document No.",GenJnlLine."Document No.");
                  IF NOT TaxJnlLine.FINDFIRST THEN BEGIN
                    TaxJnlLine."Journal Template Name" := '';
                    TaxJnlLine."Journal Batch Name" := '';
                    TaxJnlLine."Line No." := 0;
                    TaxJnlLine."Document No." := GenJnlLine."Document No.";
                    TaxJnlLine.INSERT;
                  END;

                  TaxJnlLine."BED Amount" := -ExcisePostingBuffer[1]."BED Amount";
                  TaxJnlLine."AED(GSI) Amount" := -ExcisePostingBuffer[1]."AED(GSI) Amount";
                  TaxJnlLine."AED(TTA) Amount" := -ExcisePostingBuffer[1]."AED(TTA) Amount";
                  TaxJnlLine."SED Amount" := -ExcisePostingBuffer[1]."SED Amount";
                  TaxJnlLine."SAED Amount" := -ExcisePostingBuffer[1]."SAED Amount";
                  TaxJnlLine."CESS Amount" := -ExcisePostingBuffer[1]."CESS Amount";
                  TaxJnlLine."NCCD Amount" := -ExcisePostingBuffer[1]."NCCD Amount";
                  TaxJnlLine."eCess Amount" := -ExcisePostingBuffer[1]."eCess Amount";
                  TaxJnlLine."SHE Cess Amount" := -ExcisePostingBuffer[1]."SHE Cess Amount";
                  TaxJnlLine."ADET Amount" := -ExcisePostingBuffer[1]."ADET Amount";
                  TaxJnlLine."ADE Amount" := -ExcisePostingBuffer[1]."ADE Amount";
                  TaxJnlLine."ADC VAT Amount" := -ExcisePostingBuffer[1]."ADC VAT Amount";
                  TaxJnlLine.MODIFY;

                  GenJnlLine."BED Calculation Type" := ExcisePostingBuffer[1]."BED Calculation Type";
                  GenJnlLine."ADC VAT Amount" := -ExcisePostingBuffer[1]."ADC VAT Amount";
                  GenJnlLine.CVD := ExcisePostingBuffer[1].CVD;
                  GenJnlLine."Excise Posting" := TRUE;
                  GenJnlLine.Quantity := ExcisePostingBuffer[1].Quantity;
                  GenJnlLine."Product Type" := GenJnlLine."Product Type"::Item;
                  GenJnlLine."Shortcut Dimension 1 Code" := ExcisePostingBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := ExcisePostingBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := ExcisePostingBuffer[1]."Dimension Set ID";
                  GenJnlLine.Description := STRSUBSTNO(Text13700,TransShptHeader."No.");
                  GenJnlLine."E.C.C. No." := ExcisePostingBuffer[1]."E.C.C. No.";
                  GetLocation("Transfer-from Code");
                  GenJnlLine.Trading := Location."Trading Location";
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                  GenJnlLine."Item No." := ExcisePostingBuffer[1]."Item No.";
                  GenJnlLine."Source Code" := SourceCode;
                  RunGenJnlPostLine(GenJnlLine);
                  TaxJnlLine.DELETE;
                UNTIL ExcisePostingBuffer[1].NEXT(-1) = 0;
              ExcisePostingBuffer[1].DELETEALL;
              // Post GST to G/L entries from GST posting buffer.. GST Sales
              IF GSTPostingBuffer[1].FINDLAST THEN
                REPEAT
                  PostTransLineToGenJnlLine(TransHeader);
                UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
              TransferLine.SETCURRENTKEY("Document No.","Item No.",Quantity);
              TransferLine.SETRANGE("Document No.","No.");
              TransferLine.SETFILTER("Item No.",'<>%1','');
              TransferLine.SETFILTER("Qty. to Ship",'<>%1',0);
              TransferLine.SETFILTER("GST Base Amount",'<>%1',0);
              IF TransferLine.FINDSET THEN
                REPEAT
                  GSTManagement.InsertDetailedGSTLedgEntryTransfer(
                    TransferLine,TransHeader,
                    TransShptHeader."No.",GenJnlLine."Document Type",
                    GenJnlPostLine.GetNextTransactionNo,DocTransferType::"Transfer Shipment");
                UNTIL TransferLine.NEXT = 0;
              GSTPostingBuffer[1].DELETEALL;

              IF StrPostBuf[1].FIND('+') THEN
                REPEAT
                  IF StrPostBuf[1].Amount <> 0 THEN BEGIN
                    GenJnlLine.INIT;
                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
                    GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                    GenJnlLine."Dimension Set ID" := "Dimension Set ID";
                    GenJnlLine."Document No." := TransShptHeader."No.";
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                    GenJnlLine."External Document No." := "No.";
                    GenJnlLine.Amount := -StrPostBuf[1].Amount;
                    GenJnlLine."Source Currency Amount" := -StrPostBuf[1]."Source Currency Amount";
                    GenJnlLine."Amount (LCY)" := -StrPostBuf[1].Amount;
                    GenJnlLine."System-Created Entry" := TRUE;
                    GenJnlLine.Description := STRSUBSTNO(Text13700,TransShptHeader."No.");
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                    IF StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header THEN BEGIN
                      GenJnlPostLine.RunWithCheck(GenJnlLine);
                    END ELSE
                      RunGenJnlPostLine(GenJnlLine);
                  END;
                UNTIL StrPostBuf[1].NEXT(-1) = 0;
              StrPostBuf[1].DELETEALL;
              PostDeferredExcise;

              IF WhseShip THEN
                WhseShptLine.LOCKTABLE;
              TransLine.LOCKTABLE;
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Ship",'<>0');
              IF TransLine.FIND('-') THEN BEGIN
                NextLineNo := AssignLineNo(TransLine."Document No.");
                REPEAT
                  TransLine2.INIT;
                  TransLine2 := TransLine;
                  TransLine2."Transfer-from Code" := TransLine."In-Transit Code";
                  TransLine2."In-Transit Code" := '';
                  TransLine2."Derived From Line No." := TransLine."Line No.";
                  TransLine2."Line No." := NextLineNo;
                  NextLineNo := NextLineNo + 10000;
                  TransLine2.Quantity := TransLine."Qty. to Ship";
                  TransLine2."Quantity (Base)" := TransLine."Qty. to Ship (Base)";
                  TransLine2."Qty. to Ship" := TransLine2.Quantity;
                  TransLine2."Qty. to Ship (Base)" := TransLine2."Quantity (Base)";
                  TransLine2."Qty. to Receive" := TransLine2.Quantity;
                  TransLine2."Qty. to Receive (Base)" := TransLine2."Quantity (Base)";
                  TransLine2."Quantity Shipped" := 0;
                  TransLine2."Qty. Shipped (Base)" := 0;
                  TransLine2."Quantity Received" := 0;
                  TransLine2."Qty. Received (Base)" := 0;
                  TransLine2."Qty. in Transit" := 0;
                  TransLine2."Qty. in Transit (Base)" := 0;
                  TransLine2."Outstanding Quantity" := TransLine2.Quantity;
                  TransLine2."Outstanding Qty. (Base)" := TransLine2."Quantity (Base)";
                  TransLine2.INSERT;

                  TransferTracking(TransLine,TransLine2,TransLine."Qty. to Ship (Base)");

                  TransLine.VALIDATE("Quantity Shipped",TransLine."Quantity Shipped" + TransLine."Qty. to Ship");

                  TransLine.UpdateWithWarehouseShipReceive;

                  TransLine.MODIFY;
                UNTIL TransLine.NEXT = 0;
              END;

              IF WhseShip THEN
                WhseShptLine.LOCKTABLE;
              LOCKTABLE;
              IF WhseShip THEN BEGIN
                WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                TempWhseShptHeader.DELETE;
              END;

              "Last Shipment No." := TransShptHeader."No.";
              MODIFY;

              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Ship");
              HeaderDeleted := DeleteOneTransferOrder(TransHeader,TransLine);
              IF NOT HeaderDeleted THEN BEGIN
                WhseTransferRelease.Release(TransHeader);
                ReserveTransLine.UpdateItemTrackingAfterPosting(TransHeader,0);
                CreateReservEntry.UpdReservEntryAfterPostingPick(TransHeader);
              END;

              IF NOT InvtPickPutaway THEN
                COMMIT;
              CLEAR(WhsePostShpt);
              CLEAR(InvtAdjmt);
              Window.CLOSE;
            END;
            UpdateAnalysisView.UpdateAll(0,TRUE);
            UpdateItemAnalysisView.UpdateAll(0,TRUE);
            Rec := TransHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Transfer order %2 cannot be posted because %3 and %4 are the same.;ENN=Transfer order %2 cannot be posted because %3 and %4 are the same.';
      Text001@1001 : TextConst 'ENU=There is nothing to post.;ENN=There is nothing to post.';
      Text002@1002 : TextConst 'ENU="Warehouse handling is required for Transfer order = %1, %2 = %3.";ENN="Warehouse handling is required for Transfer order = %1, %2 = %3."';
      Text003@1003 : TextConst 'ENU=Posting transfer lines     #2######;ENN=Posting transfer lines     #2######';
      Text004@1004 : TextConst 'ENU=Transfer Order %1;ENN=Transfer Order %1';
      Text005@1005 : TextConst 'ENU=The combination of dimensions used in transfer order %1 is blocked. %2;ENN=The combination of dimensions used in transfer order %1 is blocked. %2';
      Text006@1006 : TextConst 'ENU=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3;ENN=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3';
      Text007@1007 : TextConst 'ENU=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.;ENN=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.';
      TransShptHeader@1008 : Record 5744;
      TransShptLine@1009 : Record 5745;
      TransHeader@1010 : Record 5740;
      TransLine@1011 : Record 5741;
      TransLine2@1012 : Record 5741;
      Location@1015 : Record 14;
      ItemJnlLine@1016 : Record 83;
      WhseRqst@1027 : Record 5765;
      WhseShptHeader@1022 : Record 7320;
      TempWhseShptHeader@1030 : TEMPORARY Record 7320;
      WhseShptLine@1028 : Record 7321;
      PostedWhseShptHeader@1034 : Record 7322;
      PostedWhseShptLine@1035 : Record 7323;
      TempWhseSplitSpecification@1037 : TEMPORARY Record 336;
      TempHandlingSpecification@1018 : TEMPORARY Record 336;
      NoSeriesLine@1029 : Record 309;
      GLEntry@1040 : Record 17;
      GLSetup@1500011 : Record 98;
      StrOrdLineDetails@1500020 : Record 13795;
      TransferBuffer@1500019 : ARRAY [2] OF TEMPORARY Record 13715;
      StrPostBuf@1500018 : ARRAY [2] OF TEMPORARY Record 13796;
      ExcisePostingBuffer@1500017 : ARRAY [2] OF TEMPORARY Record 13706;
      DeferredExciseBuffer@1500016 : ARRAY [2] OF TEMPORARY Record 13706;
      StrOrderDetails@1500015 : Record 13794;
      PostedStrOrderDetails@1500014 : Record 13760;
      PostedStrOrdLineDetails@1500013 : Record 13798;
      GenJnlLine@1500012 : Record 81;
      Location2@1500005 : Record 14;
      ECCNos@1500004 : Record 13708;
      ExciseNoSeries@1500003 : Record 16500;
      CompanyInformation@1500002 : Record 79;
      ECCNoItemCategory@1500001 : Record 16566;
      ExcisePostingSetup@1500006 : Record 13711;
      GSTPostingBuffer@1500023 : ARRAY [2] OF TEMPORARY Record 16420;
      TransferLine@1500027 : Record 5741;
      ItemJnlPostLine@1021 : Codeunit 22;
      DimMgt@1017 : Codeunit 408;
      WhseTransferRelease@1019 : Codeunit 5773;
      ReserveTransLine@1020 : Codeunit 99000836;
      WhsePostShpt@1036 : Codeunit 5763;
      InvtAdjmt@1041 : Codeunit 5895;
      GenJnlPostLine@1500022 : Codeunit 12;
      ExciseInsertRGRegisters@1500021 : Codeunit 13701;
      InsertExciseRG@1500007 : Codeunit 13701;
      GSTManagement@1500026 : Codeunit 16401;
      SourceCode@1023 : Code[10];
      HideValidationDialog@1024 : Boolean;
      HeaderDeleted@1025 : Boolean;
      WhseShip@1026 : Boolean;
      WhsePosting@1033 : Boolean;
      InvtPickPutaway@1039 : Boolean;
      WhseReference@1038 : Integer;
      OriginalQuantity@1031 : Decimal;
      OriginalQuantityBase@1032 : Decimal;
      Text008@11042 : TextConst 'ENU=This order must be a complete shipment.;ENN=This order must be a complete shipment.';
      Text13700@1280000 : TextConst 'ENU=Transfer - %1;ENN=Transfer - %1';
      TransferCharges@1280006 : Decimal;
      Text13701@1280015 : TextConst 'ENU=Deferred Excise for %1 could not be fully Claimed.;ENN=Deferred Excise for %1 could not be fully Claimed.';
      ThirdPartyAmount@1500000 : Decimal;
      TransferCost@1500010 : Decimal;
      ExciseExistInStructure@1500008 : Boolean;
      Text16500@1500009 : TextConst 'ENU=Capital Item Should not be Used in Trading Transaction for location %1;ENN=Capital Item Should not be Used in Trading Transaction for location %1';
      GLSetupRead@1500024 : Boolean;
      Text009@1042 : TextConst 'ENU=Item %1 is not in inventory.;ENN=Item %1 is not in inventory.';
      DocTransactionType@1500025 : 'Purchase,Sales,Transfer';
      DocTransferType@1500028 : 'Transfer Shipment,Transfer Receipt';

    LOCAL PROCEDURE PostItemJnlLine@2(VAR TransLine3@1000 : Record 5741;TransShptHeader2@1001 : Record 5744;TransShptLine2@1002 : Record 5745);
    VAR
      TypeofDisposal@1500000 : Record 16565;
    BEGIN
      ItemJnlLine.INIT;
      ItemJnlLine."Posting Date" := TransShptHeader2."Posting Date";
      ItemJnlLine."Document Date" := TransShptHeader2."Posting Date";
      ItemJnlLine."Document No." := TransShptHeader2."No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Transfer Shipment";
      ItemJnlLine."Document Line No." := TransShptLine2."Line No.";
      ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Transfer;
      ItemJnlLine."Order No." := TransShptHeader2."Transfer Order No.";
      ItemJnlLine."Order Line No." := TransLine3."Line No.";
      ItemJnlLine."External Document No." := TransShptHeader2."External Document No.";
      ItemJnlLine."Captive Consumption" := TransShptHeader2."Captive Consumption";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Transfer;
      ItemJnlLine."Item No." := TransShptLine2."Item No.";
      ItemJnlLine.Description := TransShptLine2.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := TransShptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."New Shortcut Dimension 1 Code" := TransShptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := TransShptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."New Shortcut Dimension 2 Code" := TransShptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := TransShptLine2."Dimension Set ID";
      ItemJnlLine."New Dimension Set ID" := TransShptLine2."Dimension Set ID";
      ItemJnlLine."Location Code" := TransShptHeader2."Transfer-from Code";
      ItemJnlLine."New Location Code" := TransHeader."In-Transit Code";
      ItemJnlLine.Quantity := TransShptLine2.Quantity;
      ItemJnlLine."Invoiced Quantity" := TransShptLine2.Quantity;
      ItemJnlLine."Quantity (Base)" := TransShptLine2."Quantity (Base)";
      ItemJnlLine."Invoiced Qty. (Base)" := TransShptLine2."Quantity (Base)";
      ItemJnlLine."Source Code" := SourceCode;
      ItemJnlLine."Gen. Prod. Posting Group" := TransShptLine2."Gen. Prod. Posting Group";
      ItemJnlLine."Inventory Posting Group" := TransShptLine2."Inventory Posting Group";
      ItemJnlLine."Unit of Measure Code" := TransShptLine2."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := TransShptLine2."Qty. per Unit of Measure";
      ItemJnlLine."Variant Code" := TransShptLine2."Variant Code";
      ItemJnlLine."Bin Code" := TransLine."Transfer-from Bin Code";
      ItemJnlLine."Country/Region Code" := TransShptHeader2."Trsf.-from Country/Region Code";
      ItemJnlLine."Transaction Type" := TransShptHeader2."Transaction Type";
      ItemJnlLine."Transport Method" := TransShptHeader2."Transport Method";
      ItemJnlLine."Entry/Exit Point" := TransShptHeader2."Entry/Exit Point";
      ItemJnlLine.Area := TransShptHeader2.Area;
      ItemJnlLine."Transaction Specification" := TransShptHeader2."Transaction Specification";
      ItemJnlLine."Product Group Code" := TransLine."Product Group Code";
      ItemJnlLine."Item Category Code" := TransLine."Item Category Code";
      ItemJnlLine."Applies-to Entry" := TransLine."Applies-to Entry (Ship)";
      TypeofDisposal.RESET;
      TypeofDisposal.SETRANGE(Type,TypeofDisposal.Type::"Transfer Shipment");
      IF TypeofDisposal.FINDFIRST THEN BEGIN
        ItemJnlLine."Other Usage" := ItemJnlLine."Other Usage"::Disposal;
        ItemJnlLine."Nature of Disposal" := TypeofDisposal.Code;
        ItemJnlLine."Type of Disposal" := ItemJnlLine."Type of Disposal"::"Transfer Shipment";
      END;

      ItemJnlLine."BED Amount" := -TransShptLine2."BED Amount";
      ExcisePostingSetup.RESET;
      ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group",TransLine."Excise Bus. Posting Group");
      ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group",TransLine."Excise Prod. Posting Group");
      ExcisePostingSetup.SETRANGE("From Date",0D,TransHeader."Posting Date");
      ExcisePostingSetup.SETRANGE(SSI,FALSE);
      IF ExcisePostingSetup.FINDLAST THEN;

      ItemJnlLine."BED %" := ExcisePostingSetup."BED %";

      ItemJnlLine."Other Duties Amount" := -(TransShptLine2."AED(GSI) Amount" + TransShptLine2."SED Amount" + TransShptLine2.
                                             "SAED Amount"
                                             +
                                             TransShptLine2."AED(TTA) Amount" +
                                             TransShptLine2."NCCD Amount" + TransShptLine2."CESS Amount" +
                                             TransShptLine2."ADE Amount" +
                                             TransShptLine2."ADET Amount" + TransShptLine2."eCess Amount" +
                                             TransShptLine2."ADC VAT Amount" + TransShptLine2."SHE Cess Amount");

      GetLocation(TransLine3."Transfer-from Code");
      IF Location."Trading Location" AND (NOT TransHeader."Captive Consumption") THEN
        ItemJnlLine."Applies-to Entry (RG 23 D)" := TransLine3."Applies-to Entry (RG 23 D)";
      ItemJnlLine."From Transfer Order" := TRUE;

      ReserveTransLine.TransferTransferToItemJnlLine(TransLine3,
        ItemJnlLine,ItemJnlLine."Quantity (Base)",0);

      ItemJnlPostLine.RUN(ItemJnlLine);
      TransferCost := ItemJnlLine."Transfer Cost";

      IF (TransLine3."Capital Item" AND (TransShptLine2.Quantity <> 0) AND
          (TransLine3."Excise Accounting Type" = TransLine3."Excise Accounting Type"::"With CENVAT") AND
          TransLine3."Claim Deferred Excise")
      THEN
        ReverseDeferredExcise(
          TransShptHeader2."No.",TransShptHeader2."Posting Date",TransShptLine2."Item No.",TransShptLine2.Quantity);
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      InvtCommentLine@1004 : Record 5748;
      InvtCommentLine2@1005 : Record 5748;
    BEGIN
      InvtCommentLine.SETRANGE("Document Type",FromDocumentType);
      InvtCommentLine.SETRANGE("No.",FromNumber);
      IF InvtCommentLine.FIND('-') THEN
        REPEAT
          InvtCommentLine2 := InvtCommentLine;
          InvtCommentLine2."Document Type" := ToDocumentType;
          InvtCommentLine2."No." := ToNumber;
          InvtCommentLine2.INSERT;
        UNTIL InvtCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDim@34();
    BEGIN
      TransLine."Line No." := 0;
      CheckDimComb(TransHeader,TransLine);
      CheckDimValuePosting(TransHeader,TransLine);

      TransLine.SETRANGE("Document No.",TransHeader."No.");
      IF TransLine.FINDFIRST THEN BEGIN
        CheckDimComb(TransHeader,TransLine);
        CheckDimValuePosting(TransHeader,TransLine);
      END;
    END;

    LOCAL PROCEDURE CheckDimComb@30(TransferHeader@1001 : Record 5740;TransferLine@1000 : Record 5741);
    BEGIN
      IF TransferLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(TransferHeader."Dimension Set ID") THEN
          ERROR(
            Text005,
            TransHeader."No.",DimMgt.GetDimCombErr);
      IF TransferLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(TransferLine."Dimension Set ID") THEN
          ERROR(
            Text006,
            TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(TransferHeader@1001 : Record 5740;TransferLine@1000 : Record 5741);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableIDArr[1] := DATABASE::Item;
      NumberArr[1] := TransferLine."Item No.";
      IF TransferLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferHeader."Dimension Set ID") THEN
          ERROR(Text007,TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);

      IF TransferLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferLine."Dimension Set ID") THEN
          ERROR(Text007,TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE AssignLineNo@1(FromDocNo@1000 : Code[20]) : Integer;
    VAR
      TransLine3@1002 : Record 5741;
    BEGIN
      TransLine3.SETRANGE("Document No.",FromDocNo);
      IF TransLine3.FINDLAST THEN
        EXIT(TransLine3."Line No." + 10000);
    END;

    LOCAL PROCEDURE InsertShptEntryRelation@38(VAR TransShptLine@1002 : Record 5745) : Integer;
    VAR
      TempHandlingSpecification2@1000 : TEMPORARY Record 336;
      ItemEntryRelation@1001 : Record 6507;
      ItemTrackingMgt@1005 : Codeunit 6500;
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1004 : Boolean;
    BEGIN
      IF WhsePosting THEN BEGIN
        TempWhseSplitSpecification.RESET;
        TempWhseSplitSpecification.DELETEALL;
      END;

      TempHandlingSpecification2.RESET;
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
        TempHandlingSpecification2.SETRANGE("Buffer Status",0);
        IF TempHandlingSpecification2.FIND('-') THEN BEGIN
          REPEAT
            IF WhsePosting OR WhseShip OR InvtPickPutaway THEN BEGIN
              ItemTrackingMgt.CheckWhseItemTrkgSetup(
                TransShptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
              IF WhseSNRequired OR WhseLNRequired THEN BEGIN
                TempWhseSplitSpecification := TempHandlingSpecification2;
                TempWhseSplitSpecification."Source Type" := DATABASE::"Transfer Line";
                TempWhseSplitSpecification."Source ID" := TransLine."Document No.";
                TempWhseSplitSpecification."Source Ref. No." := TransLine."Line No.";
                TempWhseSplitSpecification.INSERT;
              END;
            END;

            ItemEntryRelation.INIT;
            ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
            ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
            ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
            ItemEntryRelation.TransferFieldsTransShptLine(TransShptLine);
            ItemEntryRelation.INSERT;
            TempHandlingSpecification := TempHandlingSpecification2;
            TempHandlingSpecification."Source Prod. Order Line" := TransShptLine."Line No.";
            TempHandlingSpecification."Buffer Status" := TempHandlingSpecification."Buffer Status"::MODIFY;
            TempHandlingSpecification.INSERT;
          UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END ELSE
        EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE TransferTracking@3(VAR FromTransLine@1003 : Record 5741;VAR ToTransLine@1004 : Record 5741;TransferQty@1001 : Decimal);
    VAR
      DummySpecification@1005 : Record 336;
    BEGIN
      TempHandlingSpecification.RESET;
      TempHandlingSpecification.SETRANGE("Source Prod. Order Line",ToTransLine."Derived From Line No.");
      IF TempHandlingSpecification.FIND('-') THEN BEGIN
        REPEAT
          ReserveTransLine.TransferTransferToTransfer(
            FromTransLine,ToTransLine,-TempHandlingSpecification."Quantity (Base)",1,TempHandlingSpecification);
          TransferQty += TempHandlingSpecification."Quantity (Base)";
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
      END;

      IF TransferQty > 0 THEN
        ReserveTransLine.TransferTransferToTransfer(
          FromTransLine,ToTransLine,TransferQty,1,DummySpecification);
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(TransLine@1000 : Record 5741);
    VAR
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      GetLocation(TransLine."Transfer-from Code");
      IF Location."Require Pick" OR Location."Require Shipment" THEN BEGIN
        IF Location."Bin Mandatory" THEN
          ShowError := TRUE
        ELSE
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               0,// Out
               TransLine."Document No.",
               TransLine."Line No.",
               0,
               TransLine.Quantity)
          THEN
            ShowError := TRUE;

        IF ShowError THEN
          ERROR(
            Text002,
            TransLine."Document No.",
            TransLine.FIELDCAPTION("Line No."),
            TransLine."Line No.");
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE PostWhseJnlLine@4(ItemJnlLine@1000 : Record 83;OriginalQuantity@1001 : Decimal;OriginalQuantityBase@1006 : Decimal);
    VAR
      WhseJnlLine@1002 : Record 7311;
      TempWhseJnlLine2@1005 : TEMPORARY Record 7311;
      ItemTrackingMgt@1004 : Codeunit 6500;
      WMSMgmt@1007 : Codeunit 7302;
      WhseJnlPostLine@1008 : Codeunit 7301;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("Location Code");
        IF Location."Bin Mandatory" THEN
          IF WMSMgmt.CreateWhseJnlLine(ItemJnlLine,1,WhseJnlLine,FALSE) THEN BEGIN
            WMSMgmt.SetTransferLine(TransLine,WhseJnlLine,0,TransShptHeader."No.");
            ItemTrackingMgt.SplitWhseJnlLine(
              WhseJnlLine,TempWhseJnlLine2,TempWhseSplitSpecification,TRUE);
            IF TempWhseJnlLine2.FIND('-') THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,TRUE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE SetWhseShptHeader@5(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE GetShippingAdvice@6() : Boolean;
    VAR
      TransLine@1000 : Record 5741;
    BEGIN
      TransLine.SETRANGE("Document No.",TransHeader."No.");
      IF TransLine.FIND('-') THEN
        REPEAT
          IF TransLine."Quantity (Base)" <>
             TransLine."Qty. to Ship (Base)" + TransLine."Qty. Shipped (Base)"
          THEN
            EXIT(FALSE);
        UNTIL TransLine.NEXT = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE DivideAmount@1280007(TransferLineQty@1280000 : Decimal);
    BEGIN
      WITH TransLine DO
        IF TransferLineQty = 0 THEN BEGIN
          Amount := 0;
          "Amount Including Excise" := 0;
          "Excise Amount" := 0;
          "BED Amount" := 0;
          "AED(GSI) Amount" := 0;
          "SED Amount" := 0;
          "SAED Amount" := 0;
          "CESS Amount" := 0;
          "NCCD Amount" := 0;
          "eCess Amount" := 0;
          "SHE Cess Amount" := 0;
          "ADC VAT Amount" := 0;
          "Amount Added to Inventory" := 0;
          "Charges to Transfer" := 0;
          "Total Amount to Transfer" := 0;
          "Total GST Amount" := 0;
        END ELSE BEGIN
          Amount := Amount * TransferLineQty / Quantity;
          "BED Amount" := RoundExciseAmount("BED Amount",TransferLineQty,Quantity);
          "AED(GSI) Amount" := RoundExciseAmount("AED(GSI) Amount",TransferLineQty,Quantity);
          "AED(TTA) Amount" := RoundExciseAmount("AED(TTA) Amount",TransferLineQty,Quantity);
          "SED Amount" := RoundExciseAmount("SED Amount",TransferLineQty,Quantity);
          "SAED Amount" := RoundExciseAmount("SAED Amount",TransferLineQty,Quantity);
          "CESS Amount" := RoundExciseAmount("CESS Amount",TransferLineQty,Quantity);
          "NCCD Amount" := RoundExciseAmount("NCCD Amount",TransferLineQty,Quantity);
          "eCess Amount" := RoundExciseAmount("eCess Amount",TransferLineQty,Quantity);
          "SHE Cess Amount" := RoundExciseAmount("SHE Cess Amount",TransferLineQty,Quantity);
          "ADET Amount" := RoundExciseAmount("ADET Amount",TransferLineQty,Quantity);
          "ADE Amount" := RoundExciseAmount("ADE Amount",TransferLineQty,Quantity);
          "ADC VAT Amount" := RoundExciseAmount("ADC VAT Amount",TransferLineQty,Quantity);
          "Excise Base Amount" := RoundExciseAmount("Excise Base Amount",TransferLineQty,Quantity);
          "Excise Amount" :=
            "BED Amount" + "AED(GSI) Amount" + "AED(TTA) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" +
            "NCCD Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
          "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
          "Amount Added to Inventory" := ROUND("Amount Added to Inventory" * TransferLineQty / Quantity);
          "Total Amount to Transfer" := ROUND("Total Amount to Transfer" * TransferLineQty / Quantity);
          "Charges to Transfer" := ROUND("Charges to Transfer" * TransferLineQty / Quantity);
          "GST Base Amount" :=
            ROUND("GST Base Amount" * TransferLineQty / Quantity);
          "Total GST Amount" := ROUND(GSTManagement.RoundTotalGSTAmountQtyFactor(DocTransactionType::Transfer,0,
            "Document No.","Line No.",TransferLineQty / Quantity,''));
        END;
    END;

    LOCAL PROCEDURE FillTransferBuffer@5804(TransLine@1000 : Record 5741);
    VAR
      Item@1280000 : Record 27;
    BEGIN
      WITH TransLine DO BEGIN
        IF "Qty. to Ship" = 0 THEN
          EXIT;
        CLEAR(TransferBuffer[1]);
        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETRANGE("From Date",0D,TransHeader."Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,FALSE);
        IF ExcisePostingSetup.FINDLAST THEN;

        TransferBuffer[1]."System-Created Entry" := TRUE;
        TransferBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        TransferBuffer[1]."BED %" := ExcisePostingSetup."BED %";
        TransferBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        TransferBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        TransferBuffer[1]."Dimension Set ID" := "Dimension Set ID";
        TransferBuffer[1]."Inventory Posting Group" := "Inventory Posting Group";
        TransferBuffer[1]."Item No." := "Item No.";
        TransferBuffer[1].Amount := "Excise Amount" + "Total GST Amount";
        TransferBuffer[1].Quantity := "Qty. to Ship";
        TransferBuffer[1]."Amount Loaded on Inventory" := "Amount Added to Inventory";
        TransferBuffer[1]."Charges Amount" := "Charges to Transfer";
        Item.GET("Item No.");
        TransferBuffer[1]."GST Amount" := "Total GST Amount";
        TransferBuffer[1]."Excise Amount" := ROUND(Amount - -TransferCost);
        TransferBuffer[1].Amount := TransferBuffer[1].Amount + TransferBuffer[1]."Excise Amount";
        UpdTransferBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdTransferBuffer@1280012();
    BEGIN
      TransferBuffer[1]."Dimension Set ID" := TransLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(TransferBuffer[1]."Dimension Set ID",
        TransferBuffer[1]."Global Dimension 1 Code",TransferBuffer[1]."Global Dimension 2 Code");

      TransferBuffer[2] := TransferBuffer[1];
      IF TransferBuffer[2].FIND THEN BEGIN
        TransferBuffer[2].Amount := TransferBuffer[2].Amount + TransferBuffer[1].Amount;
        TransferBuffer[2]."Excise Amount" := TransferBuffer[2]."Excise Amount" + TransferBuffer[1]."Excise Amount";
        TransferBuffer[2]."GST Amount" := TransferBuffer[2]."GST Amount" + TransferBuffer[1]."GST Amount";
        TransferBuffer[2].Quantity :=
          TransferBuffer[2].Quantity + TransferBuffer[1].Quantity;
        TransferBuffer[2]."Amount Loaded on Inventory" := TransferBuffer[2]."Amount Loaded on Inventory" +
          TransferBuffer[1]."Amount Loaded on Inventory";
        TransferBuffer[2]."Charges Amount" := TransferBuffer[2]."Charges Amount" +
          TransferBuffer[1]."Charges Amount";
        IF NOT TransferBuffer[1]."System-Created Entry" THEN
          TransferBuffer[2]."System-Created Entry" := FALSE;
        TransferBuffer[2].MODIFY;
      END ELSE
        TransferBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE FillExcisePostingBuffer@1280008(TransLine@1280000 : Record 5741);
    VAR
      Location@1000 : Record 14;
      CompanyInfo@1001 : Record 79;
    BEGIN
      WITH TransLine DO BEGIN
        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETRANGE("From Date",0D,TransHeader."Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,FALSE);
        IF ExcisePostingSetup.FINDLAST THEN;

        ExcisePostingBuffer[1]."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
        ExcisePostingBuffer[1]."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
        ExcisePostingBuffer[1].Type := ExcisePostingBuffer[1].Type::Item;
        ExcisePostingBuffer[1]."Item No." := "Item No.";
        ExcisePostingBuffer[1]."G/L Account" := ExcisePostingSetup."Excise Payable Account";
        ExcisePostingBuffer[1]."Amount Including Excise" := "Amount Including Excise";
        ExcisePostingBuffer[1]."BED Calculation Type" := ExcisePostingSetup."BED Calculation Type";
        ExcisePostingBuffer[1]."Excise Amount" := ROUND("Excise Amount");
        ExcisePostingBuffer[1]."Excise Base Amount" := "Excise Base Amount";
        ExcisePostingBuffer[1]."BED %" := ExcisePostingSetup."BED %";
        ExcisePostingBuffer[1]."BED Amount" := "BED Amount";
        ExcisePostingBuffer[1]."AED(GSI) Amount" := "AED(GSI) Amount";
        ExcisePostingBuffer[1]."AED(TTA) Amount" := "AED(TTA) Amount";
        ExcisePostingBuffer[1]."SED Amount" := "SED Amount";
        ExcisePostingBuffer[1]."SAED Amount" := "SAED Amount";
        ExcisePostingBuffer[1]."CESS Amount" := "CESS Amount";
        ExcisePostingBuffer[1]."NCCD Amount" := "NCCD Amount";
        ExcisePostingBuffer[1]."eCess Amount" := "eCess Amount";
        ExcisePostingBuffer[1]."SHE Cess Amount" := "SHE Cess Amount";
        ExcisePostingBuffer[1]."ADET Amount" := "ADET Amount";
        ExcisePostingBuffer[1]."ADE Amount" := "ADE Amount";
        ExcisePostingBuffer[1]."ADC VAT Amount" := "ADC VAT Amount";
        ExcisePostingBuffer[1].CVD := CVD;
        ExcisePostingBuffer[1].Quantity := "Qty. to Ship (Base)";
        ExcisePostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ExcisePostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        Location.GET("Transfer-from Code");
        IF Location."E.C.C. No." <> '' THEN
          ExcisePostingBuffer[1]."E.C.C. No." := Location."E.C.C. No."
        ELSE BEGIN
          CompanyInfo.GET;
          ExcisePostingBuffer[1]."E.C.C. No." := CompanyInfo."E.C.C. No.";
        END;
        UpdExcisePostingBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdExcisePostingBuffer@1280009();
    BEGIN
      ExcisePostingBuffer[1]."Dimension Set ID" := TransLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(ExcisePostingBuffer[1]."Dimension Set ID",
        ExcisePostingBuffer[1]."Global Dimension 1 Code",ExcisePostingBuffer[1]."Global Dimension 2 Code");

      ExcisePostingBuffer[2] := ExcisePostingBuffer[1];
      IF ExcisePostingBuffer[2].FIND THEN BEGIN
        ExcisePostingBuffer[2]."Amount Including Excise" += ExcisePostingBuffer[1]."Amount Including Excise";
        ExcisePostingBuffer[2]."Excise Amount" += ExcisePostingBuffer[1]."Excise Amount";
        ExcisePostingBuffer[2]."Excise Base Amount" += ExcisePostingBuffer[1]."Excise Base Amount";
        ExcisePostingBuffer[2]."BED Amount" += ExcisePostingBuffer[1]."BED Amount";
        ExcisePostingBuffer[2]."AED(GSI) Amount" += ExcisePostingBuffer[1]."AED(GSI) Amount";
        ExcisePostingBuffer[2]."AED(TTA) Amount" += ExcisePostingBuffer[1]."AED(TTA) Amount";
        ExcisePostingBuffer[2]."SED Amount" += ExcisePostingBuffer[1]."SED Amount";
        ExcisePostingBuffer[2]."SAED Amount" += ExcisePostingBuffer[1]."SAED Amount";
        ExcisePostingBuffer[2]."CESS Amount" += ExcisePostingBuffer[1]."CESS Amount";
        ExcisePostingBuffer[2]."NCCD Amount" += ExcisePostingBuffer[1]."NCCD Amount";
        ExcisePostingBuffer[2]."eCess Amount" += ExcisePostingBuffer[1]."eCess Amount";
        ExcisePostingBuffer[2]."SHE Cess Amount" += ExcisePostingBuffer[1]."SHE Cess Amount";
        ExcisePostingBuffer[2]."ADET Amount" += ExcisePostingBuffer[1]."ADET Amount";
        ExcisePostingBuffer[2]."ADE Amount" += ExcisePostingBuffer[1]."ADE Amount";
        ExcisePostingBuffer[2]."ADC VAT Amount" += ExcisePostingBuffer[1]."ADC VAT Amount";
        ExcisePostingBuffer[2].Quantity += ExcisePostingBuffer[1].Quantity;
        ExcisePostingBuffer[2].MODIFY;
      END ELSE
        ExcisePostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE FillStrPostBuffer@1280010(StrOrdLineDetails@1280003 : Record 13795;Quantity@1280002 : Decimal;ActQty@1280001 : Decimal);
    BEGIN
      WITH StrOrdLineDetails DO BEGIN
        StrPostBuf[1]."Document No." := "Document No.";
        StrPostBuf[1].Type := StrPostBuf[1].Type::Transfer;
        StrPostBuf[1]."Item No." := "Item No.";
        StrPostBuf[1]."Structure Code" := "Structure Code";
        StrPostBuf[1]."Tax/Charge Type" := "Tax/Charge Type";
        StrPostBuf[1]."Tax/Charge Group" := "Tax/Charge Group";
        StrPostBuf[1]."Tax/Charge Code" := "Tax/Charge Code";
        StrPostBuf[1]."Loading on Inventory" := "Loading on Inventory";
        StrPostBuf[1]."% Loading on Inventory" := "% Loading on Inventory";
        StrPostBuf[1]."Payable to Third Party" := "Payable to Third Party";
        StrPostBuf[1]."Third Party Code" := "Third Party Code";
        StrPostBuf[1]."Account No." := "Account No.";
        StrPostBuf[1]."Base Amount" := ROUND("Base Amount" * Quantity / ActQty);
        StrPostBuf[1].Amount := ROUND("Amount (LCY)" * Quantity / ActQty);
        StrPostBuf[1]."Source Currency Amount" := ROUND(Amount * Quantity / ActQty);
        TransferCharges := TransferCharges + StrPostBuf[1].Amount;
        IF "Payable to Third Party" THEN
          ThirdPartyAmount := ThirdPartyAmount + ROUND("Amount (LCY)" * Quantity / ActQty);
        UpdStrPostBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdStrPostBuffer@1280011();
    BEGIN
      StrPostBuf[1]."Dimension Set ID" := TransLine."Dimension Set ID";

      StrPostBuf[2] := StrPostBuf[1];
      IF StrPostBuf[2].FIND THEN BEGIN
        StrPostBuf[2].Amount := StrPostBuf[2].Amount + StrPostBuf[1].Amount;
        StrPostBuf[2]."Source Currency Amount" :=
          StrPostBuf[2]."Source Currency Amount" + StrPostBuf[1]."Source Currency Amount";
        StrPostBuf[2]."Base Amount" := StrPostBuf[2]."Base Amount" + StrPostBuf[1]."Base Amount";
        StrPostBuf[2].MODIFY;
      END ELSE
        StrPostBuf[1].INSERT;
    END;

    LOCAL PROCEDURE ReverseDeferredExcise@1280000(DocNo@1280003 : Code[20];PostingDate@1280002 : Date;ItemNo@1280001 : Code[20];Qty@1280000 : Decimal);
    VAR
      ItemReg@1280012 : Record 46;
      ItemLedgerEntry@1280011 : Record 32;
      ItemApplEntry@1280010 : Record 339;
      ValueEntry@1280009 : Record 5802;
      ExciseEntry@1280008 : Record 13712;
      OldDocNo@1280006 : Code[20];
      OldPostingDate@1280005 : Date;
      Rep@1280004 : Report 13775;
    BEGIN
      CLEAR(OldDocNo);
      CLEAR(OldPostingDate);
      ItemReg.FINDLAST;
      ItemLedgerEntry.LOCKTABLE;
      ItemApplEntry.LOCKTABLE;
      ValueEntry.LOCKTABLE;
      ExciseEntry.LOCKTABLE;

      ItemLedgerEntry.RESET;
      ItemLedgerEntry.SETCURRENTKEY("Location Code","Posting Date","Document No.","Item No.");
      ItemLedgerEntry.SETRANGE("Entry No.",ItemReg."From Entry No.",ItemReg."To Entry No.");
      ItemLedgerEntry.SETRANGE("Location Code",TransShptHeader."Transfer-from Code");
      ItemLedgerEntry.SETRANGE("Posting Date",TransShptHeader."Posting Date");
      ItemLedgerEntry.SETRANGE("Document No.",TransShptHeader."No.");
      ItemLedgerEntry.SETRANGE("Item No.",TransLine."Item No.");
      IF ItemLedgerEntry.FIND('+') THEN
        REPEAT
          ItemApplEntry.RESET;
          ItemApplEntry.SETCURRENTKEY("Outbound Item Entry No.");
          ItemApplEntry.SETRANGE("Outbound Item Entry No.",ItemLedgerEntry."Entry No.");
          IF ItemApplEntry.FIND('-') THEN
            REPEAT
              IF ABS(ItemApplEntry.Quantity) >= Qty THEN
                ItemApplEntry.Quantity := Qty;
              ValueEntry.RESET;
              ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
              ValueEntry.SETRANGE("Item Ledger Entry No.",ItemApplEntry."Inbound Item Entry No.");
              IF ValueEntry.FIND('-') THEN
                REPEAT
                  IF (OldDocNo <> ValueEntry."Document No.") AND (OldPostingDate <> ValueEntry."Posting Date") THEN BEGIN
                    ExciseEntry.RESET;
                    ExciseEntry.SETCURRENTKEY("Document No.","Posting Date",Deferred,"Remaining Quantity","Item No.");
                    ExciseEntry.SETRANGE("Document No.",ValueEntry."Document No.");
                    ExciseEntry.SETRANGE("Posting Date",ValueEntry."Posting Date");
                    ExciseEntry.SETRANGE(Deferred,TRUE);
                    ExciseEntry.SETRANGE("Item No.",ItemNo);
                    ExciseEntry.SETFILTER("Remaining Quantity",'>%1',0);
                    IF ExciseEntry.FIND('-') THEN
                      REPEAT
                        IF ExciseEntry."Remaining Quantity" >= ABS(ItemApplEntry.Quantity) THEN BEGIN
                          IF (ValueEntry."Posting Date" IN [CALCDATE('<1D>',Rep.GetFinancialYear(TransShptHeader."Posting Date"))..
                                                            Rep.GetCurrentFinancialYear(TransShptHeader."Posting Date")])
                          THEN
                            FillDeferredExciseBuffer(ExciseEntry."Entry No.",ItemApplEntry.Quantity);
                          Qty := Qty - ABS(ItemApplEntry.Quantity);
                          ItemApplEntry.Quantity := 0;
                        END ELSE BEGIN
                          IF NOT (ValueEntry."Posting Date" IN [0D..Rep.GetFinancialYear(TransShptHeader."Posting Date")]) THEN
                            FillDeferredExciseBuffer(ExciseEntry."Entry No.",ExciseEntry."Remaining Quantity");
                          Qty := Qty - ABS(ExciseEntry."Remaining Quantity");
                          ItemApplEntry.Quantity := ABS(ItemApplEntry.Quantity) - ExciseEntry."Remaining Quantity";
                        END;
                      UNTIL ((ExciseEntry.NEXT = 0) OR (ABS(ItemApplEntry.Quantity) = 0));
                  END;
                  OldDocNo := ValueEntry."Document No.";
                  OldPostingDate := ValueEntry."Posting Date";
                UNTIL ((ValueEntry.NEXT = 0) OR (ABS(ItemApplEntry.Quantity) = 0));
            UNTIL ((ItemApplEntry.NEXT = 0) OR (Qty = 0));
        UNTIL ((ItemLedgerEntry.NEXT(-1) = 0) OR (Qty = 0));

      IF Qty > 0 THEN
        MESSAGE(Text13701,ItemNo);
    END;

    LOCAL PROCEDURE FillDeferredExciseBuffer@1280022(ExciseEntryNo@1280000 : Integer;Qty@1280001 : Decimal);
    VAR
      ExciseEntry@1280002 : Record 13712;
      PrevExciseEntry@1280003 : Record 13712;
    BEGIN
      ExciseEntry.GET(ExciseEntryNo);
      PrevExciseEntry.GET(ExciseEntryNo - 1);
      DeferredExciseBuffer[1].INIT;
      DeferredExciseBuffer[1]."G/L Account" := PrevExciseEntry."Account No.";
      DeferredExciseBuffer[1]."Bal. Account" := ExciseEntry."Account No.";
      DeferredExciseBuffer[1].Amount := (ExciseEntry."BED Amount" + ExciseEntry."AED(GSI) Amount" + ExciseEntry."SED Amount" +
                                         ExciseEntry."AED(TTA) Amount" +
                                         ExciseEntry."ADET Amount" + ExciseEntry."ADE Amount" + ExciseEntry."SAED Amount" +
                                         ExciseEntry."NCCD Amount" +
                                         ExciseEntry."eCess Amount" + ExciseEntry."CESS Amount" + ExciseEntry."ADC VAT Amount" +
                                         ExciseEntry."SHE Cess Amount") * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."BED Amount" := ExciseEntry."BED Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."AED(GSI) Amount" := ExciseEntry."AED(GSI) Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."AED(TTA) Amount" := ExciseEntry."AED(TTA) Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."SED Amount" := ExciseEntry."SED Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."SAED Amount" := ExciseEntry."SAED Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."CESS Amount" := ExciseEntry."CESS Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."NCCD Amount" := ExciseEntry."NCCD Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."eCess Amount" := ExciseEntry."eCess Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."SHE Cess Amount" := ExciseEntry."SHE Cess Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."ADET Amount" := ExciseEntry."ADET Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."ADE Amount" := ExciseEntry."ADE Amount" * (Qty / ExciseEntry.Quantity);
      DeferredExciseBuffer[1]."ADC VAT Amount" := ExciseEntry."ADC VAT Amount" * (Qty / ExciseEntry.Quantity);
      InsertDetailSTDeferment(ExciseEntry,DeferredExciseBuffer[1]);
      UpdDeferredExciseBuffer;

      ExciseEntry."Remaining Quantity" -= Qty;
      ExciseEntry."Remaining BED Amount" -= (ExciseEntry."BED Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining AED(GSI) Amount" -= (ExciseEntry."AED(GSI) Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining AED(TTA) Amount" -= (ExciseEntry."AED(TTA) Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining SED Amount" -= (ExciseEntry."SED Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining SAED Amount" -= (ExciseEntry."SAED Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining NCCD Amount" -= (ExciseEntry."NCCD Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining eCess Amount" -= (ExciseEntry."eCess Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining SHE Cess Amount" -= (ExciseEntry."SHE Cess Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining ADET Amount" -= (ExciseEntry."ADET Amount" * (Qty / ExciseEntry.Quantity));
      ExciseEntry."Remaining ADE Amount" -= (ExciseEntry."ADE Amount" * (Qty / ExciseEntry.Quantity));

      ExciseEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdDeferredExciseBuffer@1280024();
    BEGIN
      DeferredExciseBuffer[2] := DeferredExciseBuffer[1];
      IF DeferredExciseBuffer[2].FIND THEN BEGIN
        DeferredExciseBuffer[2].Amount += DeferredExciseBuffer[1].Amount;
        DeferredExciseBuffer[2]."BED Amount" += DeferredExciseBuffer[1]."BED Amount";
        DeferredExciseBuffer[2]."AED(GSI) Amount" += DeferredExciseBuffer[1]."AED(GSI) Amount";
        DeferredExciseBuffer[2]."AED(TTA) Amount" += DeferredExciseBuffer[1]."AED(TTA) Amount";
        DeferredExciseBuffer[2]."SED Amount" += DeferredExciseBuffer[1]."SED Amount";
        DeferredExciseBuffer[2]."SAED Amount" += DeferredExciseBuffer[1]."SAED Amount";
        DeferredExciseBuffer[2]."CESS Amount" += DeferredExciseBuffer[1]."CESS Amount";
        DeferredExciseBuffer[2]."NCCD Amount" += DeferredExciseBuffer[1]."NCCD Amount";
        DeferredExciseBuffer[2]."eCess Amount" += DeferredExciseBuffer[1]."eCess Amount";
        DeferredExciseBuffer[2]."SHE Cess Amount" += DeferredExciseBuffer[1]."SHE Cess Amount";
        DeferredExciseBuffer[2]."ADET Amount" += DeferredExciseBuffer[1]."ADET Amount";
        DeferredExciseBuffer[2]."ADE Amount" += DeferredExciseBuffer[1]."ADE Amount";
        DeferredExciseBuffer[2]."ADC VAT Amount" += DeferredExciseBuffer[1]."ADC VAT Amount";
        DeferredExciseBuffer[2].MODIFY;
      END ELSE
        DeferredExciseBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostDeferredExcise@1280029();
    VAR
      RG23CPartII@1280000 : Record 13722;
      RG23CPartIIRec@1280001 : Record 13722;
      GenJnlLine@1280002 : Record 81;
      ECCNo@1000000001 : Code[20];
      ECCNoRec@1000000000 : Record 13708;
      EntryNo@1500000 : Integer;
    BEGIN
      IF DeferredExciseBuffer[1].FIND('+') THEN BEGIN
        RG23CPartIIRec.LOCKTABLE;
        RG23CPartIIRec.FINDLAST;
        EntryNo := RG23CPartIIRec."Entry No." + 1;
        ECCNo := '';
        IF TransShptHeader."Transfer-from Code" <> '' THEN BEGIN
          Location.GET(TransShptHeader."Transfer-from Code");
          ECCNo := Location."E.C.C. No."
        END;
        RG23CPartIIRec.SETCURRENTKEY("Location E.C.C. No.");
        RG23CPartIIRec.SETRANGE("Location E.C.C. No.",ECCNo);
        RG23CPartIIRec.FINDLAST;
        RG23CPartII.INIT;
        RG23CPartII.TRANSFERFIELDS(RG23CPartIIRec);
        RG23CPartII."Entry No." := EntryNo;
        RG23CPartII."Posting Date" := TransShptHeader."Posting Date";
        RG23CPartII."Document No." := TransShptHeader."No.";
        RG23CPartII."Document Date" := 0D;
        RG23CPartII."BED Debit" := 0;
        RG23CPartII."ADC VAT Debit" := 0;
        RG23CPartII."ADC VAT Credit" := 0;
        RG23CPartII."BED Credit" := 0;
        RG23CPartII."AED(GSI) Credit" := 0;
        RG23CPartII."SED Credit" := 0;
        RG23CPartII."SAED Credit" := 0;
        RG23CPartII."CESS Credit" := 0;
        RG23CPartII."NCCD Credit" := 0;
        RG23CPartII."eCess Credit" := 0;
        RG23CPartII."SHE Cess Credit" := 0;
        RG23CPartII."Location Code" := TransShptHeader."Transfer-from Code";
        RG23CPartII."Location E.C.C. No." := ECCNo;
        RG23CPartII."AED(GSI) Debit" := 0;
        RG23CPartII."SAED Debit" := 0;
        RG23CPartII."CESS Debit" := 0;
        RG23CPartII."NCCD Debit" := 0;
        RG23CPartII."eCess Debit" := 0;
        RG23CPartII."SHE Cess Debit" := 0;
        RG23CPartII."SED Debit" := 0;
        RG23CPartII."Cenvat Cr. Receivable Acc." := '';
        RG23CPartII.Type := RG23CPartII.Type::Sale;
        RG23CPartII."Excise Bus. Posting Group" := '';
        RG23CPartII."Excise Prod. Posting Group" := '';
        RG23CPartII."Vendor Shipment No." := '';
        RG23CPartII."Order no." := TransHeader."No.";
        RG23CPartII."Vendor Invoice No." := '';
        RG23CPartII."Vendor E.C.C. No." := '';
        RG23CPartII."Sales Invoice No." := '';
        RG23CPartII."Line No." := 0;
        RG23CPartII."ADET Credit" := 0;
        RG23CPartII."ADET Debit" := 0;
        RG23CPartII."ADE Credit" := 0;
        RG23CPartII."ADE Debit" := 0;
        RG23CPartII."AED(TTA) Credit" := 0;
        RG23CPartII."AED(TTA) Debit" := 0;
        RG23CPartII."Excise Credit Availed as ST" := FALSE;
        RG23CPartII."Remaining BED Credit" := 0;
        RG23CPartII."Remaining AED(GSI) Credit" := 0;
        RG23CPartII."Remaining SED Credit" := 0;
        RG23CPartII."Remaining SAED Credit" := 0;
        RG23CPartII."Remaining NCCD Credit" := 0;
        RG23CPartII."Remaining eCess Credit" := 0;
        RG23CPartII."Remaining SHECess Credit" := 0;
        RG23CPartII."Remaining ADET Credit" := 0;
        RG23CPartII."Remaining AED(TTA) Credit" := 0;
        RG23CPartII."Remaining ADE Credit" := 0;
        RG23CPartII."Remaining ADC VAT Credit" := 0;
        RG23CPartII."Remaining Excise Amount" := 0;
        RG23CPartII.Closed := FALSE;
        RG23CPartII."Excise as Service Tax Credit" := FALSE;
        RG23CPartII.Supplementary := FALSE;
        RG23CPartII."Source Document Type" := 0;
        RG23CPartII."Source Document No." := '';
        RG23CPartII.CVD := FALSE;
        RG23CPartII."Vendor Type" := RG23CPartII."Vendor Type"::" ";
        RG23CPartII."Type of Unit" := RG23CPartII."Type of Unit"::" ";
        RG23CPartII."Opening Balance Credit CY" := RG23CPartIIRec."Closing Balance Credit CY";
        RG23CPartII."Total CESS for Current Year" := RG23CPartIIRec."Total CESS for Current Year";
        RG23CPartII."Total CESS for Next Year" := RG23CPartIIRec."Total CESS for Next Year";
        REPEAT
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := TransShptHeader."Posting Date";
          GenJnlLine."Document No." := TransShptHeader."No.";
          GenJnlLine."Account No." := DeferredExciseBuffer[1]."G/L Account";
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          GenJnlLine."Bal. Account No." := DeferredExciseBuffer[1]."Bal. Account";
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
          GenJnlLine.Amount := DeferredExciseBuffer[1].Amount;
          GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
          CODEUNIT.RUN(12,GenJnlLine);
          RG23CPartII."BED Credit" += DeferredExciseBuffer[1]."BED Amount";
          RG23CPartII."AED(GSI) Credit" += DeferredExciseBuffer[1]."AED(GSI) Amount";
          RG23CPartII."AED(TTA) Credit" += DeferredExciseBuffer[1]."AED(TTA) Amount";
          RG23CPartII."SED Credit" += DeferredExciseBuffer[1]."SED Amount";
          RG23CPartII."SAED Credit" += DeferredExciseBuffer[1]."SAED Amount";
          RG23CPartII."NCCD Credit" += DeferredExciseBuffer[1]."NCCD Amount";
          RG23CPartII."eCess Credit" += DeferredExciseBuffer[1]."eCess Amount";
          RG23CPartII."SHE Cess Credit" += DeferredExciseBuffer[1]."SHE Cess Amount";
          RG23CPartII."ADET Credit" += DeferredExciseBuffer[1]."ADET Amount";
          RG23CPartII."ADE Credit" += DeferredExciseBuffer[1]."ADE Amount";
          RG23CPartII."ADC VAT Credit" += DeferredExciseBuffer[1]."ADC VAT Amount";
          RG23CPartII."Total BED for Current Year" += DeferredExciseBuffer[1]."BED Amount";
          RG23CPartII."Total BED for Next Year" -= DeferredExciseBuffer[1]."BED Amount";
          RG23CPartII."Total AED(GSI) for CY" += DeferredExciseBuffer[1]."AED(GSI) Amount";
          RG23CPartII."Total AED(GSI) for Next Year" -= DeferredExciseBuffer[1]."AED(GSI) Amount";
          RG23CPartII."Total AED(TTA) for CY" += DeferredExciseBuffer[1]."AED(TTA) Amount";
          RG23CPartII."Total AED(TTA) for Next Year" -= DeferredExciseBuffer[1]."AED(TTA) Amount";
          RG23CPartII."Total SED for Current Year" += DeferredExciseBuffer[1]."SED Amount";
          RG23CPartII."Total SED for Next Year" -= DeferredExciseBuffer[1]."SED Amount";
          RG23CPartII."Total SAED for Current Year" += DeferredExciseBuffer[1]."SAED Amount";
          RG23CPartII."Total SAED for Next Year" -= DeferredExciseBuffer[1]."SAED Amount";
          RG23CPartII."Total NCCD for Current Year" += DeferredExciseBuffer[1]."NCCD Amount";
          RG23CPartII."Total NCCD for Next Year" -= DeferredExciseBuffer[1]."NCCD Amount";
          RG23CPartII."Total eCess for Current Year" += DeferredExciseBuffer[1]."eCess Amount";
          RG23CPartII."Total eCess for Next Year" -= DeferredExciseBuffer[1]."eCess Amount";
          RG23CPartII."Total SHECESS for Current Year" += DeferredExciseBuffer[1]."SHE Cess Amount";
          RG23CPartII."Total SHECESS for Next Year" -= DeferredExciseBuffer[1]."SHE Cess Amount";
          RG23CPartII."Total ADE for Current Year" += DeferredExciseBuffer[1]."ADE Amount";
          RG23CPartII."Total ADE for Next Year" -= DeferredExciseBuffer[1]."ADE Amount";
          RG23CPartII."Total ADET for Current Year" += DeferredExciseBuffer[1]."ADET Amount";
          RG23CPartII."Total ADET for Next Year" -= DeferredExciseBuffer[1]."ADET Amount";
          RG23CPartII."Total ADC VAT for CY" += DeferredExciseBuffer[1]."ADC VAT Amount";
          RG23CPartII."Closing Balance Credit CY" := RG23CPartII."Closing Balance Credit CY" +
            DeferredExciseBuffer[1]."BED Amount" + DeferredExciseBuffer[1]."AED(GSI) Amount" +
            DeferredExciseBuffer[1]."AED(TTA) Amount" + DeferredExciseBuffer[1]."SED Amount" +
            DeferredExciseBuffer[1]."SAED Amount" + DeferredExciseBuffer[1]."NCCD Amount" +
            DeferredExciseBuffer[1]."eCess Amount" + DeferredExciseBuffer[1]."ADE Amount" +
            DeferredExciseBuffer[1]."ADET Amount" + DeferredExciseBuffer[1]."SHE Cess Amount";
        UNTIL DeferredExciseBuffer[1].NEXT(-1) = 0;
        RG23CPartII."Remaining BED Credit" := RG23CPartII."BED Credit";
        RG23CPartII."Remaining AED(GSI) Credit" := RG23CPartII."AED(GSI) Credit";
        RG23CPartII."Remaining SED Credit" := RG23CPartII."SED Credit";
        RG23CPartII."Remaining SAED Credit" := RG23CPartII."SAED Credit";
        RG23CPartII."Remaining NCCD Credit" := RG23CPartII."NCCD Credit";
        RG23CPartII."Remaining eCess Credit" := RG23CPartII."eCess Credit";
        RG23CPartII."Remaining SHECess Credit" := RG23CPartII."SHE Cess Credit";
        RG23CPartII."Remaining ADET Credit" := RG23CPartII."ADET Credit";
        RG23CPartII."Remaining AED(TTA) Credit" := RG23CPartII."AED(TTA) Credit";
        RG23CPartII."Remaining ADE Credit" := RG23CPartII."ADE Credit";
        RG23CPartII."Remaining ADC VAT Credit" := 0;
        RG23CPartII."Remaining Excise Amount" := RG23CPartII."Remaining BED Credit" + RG23CPartII."Remaining AED(GSI) Credit" +
          RG23CPartII."Remaining SED Credit" + RG23CPartII."Remaining SAED Credit" + RG23CPartII."Remaining NCCD Credit" +
          RG23CPartII."Remaining eCess Credit" + RG23CPartII."Remaining ADET Credit" + RG23CPartII."Remaining AED(TTA) Credit" +
          RG23CPartII."Remaining ADE Credit" + RG23CPartII."Remaining SHECess Credit";

        RG23CPartII.TESTFIELD("Location E.C.C. No.");
        RG23CPartII."Deferred Claim" := TRUE;
        IF ECCNoRec.GET(ECCNo) THEN
          RG23CPartII."Type of Unit" := ECCNoRec."Type of Unit";
        InsertExciseRG.GetRGEntryNo(RG23CPartII."Posting Date",3,RG23CPartII."Location E.C.C. No.",RG23CPartII."Document No.",
          RG23CPartII."RG Entry No.");

        RG23CPartII.INSERT;
      END;
      DeferredExciseBuffer[1].DELETEALL;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlPostLine.RUN(GenJnlLine);
    END;

    LOCAL PROCEDURE RoundExciseAmount@1280016(ExciseDutyAmount@1280000 : Decimal;Qty@1280003 : Decimal;TotalQty@1280004 : Decimal) : Decimal;
    VAR
      ExciseRoundingDirection@1280001 : Text[1];
      ExciseRoundingPrecision@1280002 : Decimal;
    BEGIN
      GetGLSetup;
      CASE GLSetup."Excise Rounding Type" OF
        GLSetup."Excise Rounding Type"::Nearest:
          ExciseRoundingDirection := '=';
        GLSetup."Excise Rounding Type"::Up:
          ExciseRoundingDirection := '>';
        GLSetup."Excise Rounding Type"::Down:
          ExciseRoundingDirection := '<';
      END;
      IF GLSetup."Excise Rounding Precision" <> 0 THEN
        ExciseRoundingPrecision := GLSetup."Excise Rounding Precision"
      ELSE
        ExciseRoundingPrecision := 0.01;
      EXIT(ROUND(ExciseDutyAmount * (Qty / TotalQty),ExciseRoundingPrecision,ExciseRoundingDirection));
    END;

    PROCEDURE InsertDetailSTDeferment@1500018(ExciseEntryRec@1500002 : Record 13712;DeferredExciseBuffer@1500006 : Record 13706);
    VAR
      DetailSTDeferment@1500000 : Record 16572;
      NextDetailSTDefermentEntryNo@1500001 : Integer;
      PostedPurchInvoice@1500003 : Record 122;
      Vendor@1500004 : Record 23;
      ECCNoRec@1500005 : Record 13708;
    BEGIN
      DetailSTDeferment.LOCKTABLE;
      IF DetailSTDeferment.FINDLAST THEN
        NextDetailSTDefermentEntryNo := DetailSTDeferment."Entry No." + 1
      ELSE
        NextDetailSTDefermentEntryNo := 1;
      DetailSTDeferment.INIT;
      DetailSTDeferment."Entry No." := NextDetailSTDefermentEntryNo;
      DetailSTDeferment."Excise Entry No." := ExciseEntryRec."Entry No.";
      DetailSTDeferment."Posting Date" := ExciseEntryRec."Posting Date";
      DetailSTDeferment."Document Type" := ExciseEntryRec."Document Type";
      DetailSTDeferment."Document No." := ExciseEntryRec."Document No.";
      DetailSTDeferment."Excise Bus. Posting Group" := ExciseEntryRec."Excise Bus. Posting Group";
      DetailSTDeferment."Excise Prod. Posting Group" := ExciseEntryRec."Excise Prod. Posting Group";
      DetailSTDeferment."BED Amount" := DeferredExciseBuffer."BED Amount";
      DetailSTDeferment."AED(GSI) Amount" := DeferredExciseBuffer."AED(GSI) Amount";
      DetailSTDeferment."SED Amount" := DeferredExciseBuffer."SED Amount";
      DetailSTDeferment."SAED Amount" := DeferredExciseBuffer."SAED Amount";
      DetailSTDeferment."NCCD Amount" := DeferredExciseBuffer."NCCD Amount";
      DetailSTDeferment."eCess Amount" := DeferredExciseBuffer."eCess Amount";
      DetailSTDeferment."ADET Amount" := DeferredExciseBuffer."ADET Amount";
      DetailSTDeferment."AED(TTA) Amount" := DeferredExciseBuffer."AED(TTA) Amount";
      DetailSTDeferment."ADE Amount" := DeferredExciseBuffer."ADE Amount";
      DetailSTDeferment."SHE Cess Amount" := DeferredExciseBuffer."SHE Cess Amount";

      DetailSTDeferment.Quantity := ExciseEntryRec."Remaining Quantity";
      DetailSTDeferment.Deferred := ExciseEntryRec.Deferred;
      DetailSTDeferment.CVD := ExciseEntryRec.CVD;
      DetailSTDeferment."E.C.C. No." := ExciseEntryRec."E.C.C. No.";
      IF PostedPurchInvoice.GET(DetailSTDeferment."Document No.") THEN BEGIN
        IF Vendor.GET(PostedPurchInvoice."Buy-from Vendor No.") THEN
          DetailSTDeferment."Vendor Type" := Vendor."Vendor Type";
      END;
      IF ECCNoRec.GET(DetailSTDeferment."E.C.C. No.") THEN
        DetailSTDeferment."Type of Unit" := ECCNoRec."Type of Unit";
      DetailSTDeferment.INSERT;
    END;

    PROCEDURE CheckCapitalItem@1500000();
    VAR
      Location2@1500000 : Record 14;
      TransferLine2@1500001 : Record 5741;
    BEGIN
      TransferLine2.RESET;
      TransferLine2.SETRANGE("Document No.",TransHeader."No.");
      TransferLine2.SETRANGE("Capital Item",TRUE);

      IF Location2.GET(TransHeader."Transfer-from Code") AND Location2."Trading Location" THEN BEGIN
        IF TransferLine2.FINDFIRST THEN
          ERROR(Text16500,TransHeader."Transfer-from Code");
      END;
      IF Location2.GET(TransHeader."Transfer-to Code") AND Location2."Trading Location" THEN BEGIN
        IF TransferLine2.FINDFIRST THEN
          ERROR(Text16500,TransHeader."Transfer-to Code");
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CheckItemInInventory@1043(TransLine@1000 : Record 5741);
    VAR
      Item@1001 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        GET(TransLine."Item No.");
        SETFILTER("Variant Filter",TransLine."Variant Code");
        SETFILTER("Location Filter",TransLine."Transfer-from Code");
        CALCFIELDS(Inventory);
        IF Inventory <= 0 THEN
          ERROR(Text009,TransLine."Item No.");
      END;
    END;

    LOCAL PROCEDURE CheckItemInInventoryAndWarehouse@8(VAR TransLine@1000 : Record 5741;NeedCheckWarehouse@1001 : Boolean);
    VAR
      TransLine2@1002 : Record 5741;
    BEGIN
      TransLine2.COPYFILTERS(TransLine);
      TransLine2.FINDSET;
      REPEAT
        CheckItemInInventory(TransLine2);
        IF  NeedCheckWarehouse THEN
          CheckWarehouse(TransLine2);
      UNTIL TransLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE FillGSTPostingBuffer@1500005(TransLine@1500110 : Record 5741);
    VAR
      Location@1500009 : Record 14;
      DetailedGSTEntryBuffer@1500006 : Record 16412;
      GSTManagement@1500005 : Codeunit 16401;
      QFactor@1500000 : Decimal;
      GSTStateCode@1500100 : Code[10];
    BEGIN
      WITH TransLine DO BEGIN
        Location.GET(TransHeader."Transfer-from Code");
        Location.TESTFIELD("State Code");
        GSTStateCode := Location."State Code";
        DetailedGSTEntryBuffer.RESET;
        DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
        DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Transfer);
        DetailedGSTEntryBuffer.SETRANGE("Document Type",0);
        DetailedGSTEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedGSTEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedGSTEntryBuffer.SETFILTER("GST Base Amount",'<>%1',0);
        IF DetailedGSTEntryBuffer.FINDSET THEN
          REPEAT
            GSTPostingBuffer[1].Type := GSTPostingBuffer[1].Type::Item;
            GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
            GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
            GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
            GSTPostingBuffer[1]."GST Group Code"  := "GST Group Code";
            QFactor := ABS("Qty. to Ship" / Quantity);
            GSTPostingBuffer[1]."GST Base Amount" :=
              GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Base Amount");
            GSTPostingBuffer[1]."GST Amount" :=
              GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount");
            GSTPostingBuffer[1]."GST %" := DetailedGSTEntryBuffer."GST %" ;
            GSTPostingBuffer[1]."GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            GSTPostingBuffer[1]."Account No." :=
              GSTManagement.GetGSTPayableAccountNo(GSTStateCode,DetailedGSTEntryBuffer."GST Component Code");
            UpdateGSTPostingBuffer;
          UNTIL DetailedGSTEntryBuffer.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE UpdateGSTPostingBuffer@1500004();
    BEGIN
      GSTPostingBuffer[1]."Dimension Set ID" := TransLine."Dimension Set ID";
      DimMgt.UpdateGlobalDimFromDimSetID(GSTPostingBuffer[1]."Dimension Set ID",
        GSTPostingBuffer[1]."Global Dimension 1 Code",GSTPostingBuffer[1]."Global Dimension 2 Code");
      GSTPostingBuffer[2] := GSTPostingBuffer[1];
      IF GSTPostingBuffer[2].FIND THEN BEGIN
        GSTPostingBuffer[2]."GST Base Amount" += GSTPostingBuffer[1]."GST Base Amount";
        GSTPostingBuffer[2]."GST Amount" += GSTPostingBuffer[1]."GST Amount";
        GSTPostingBuffer[2]."Interim Amount" += GSTPostingBuffer[1]."Interim Amount";
        GSTPostingBuffer[2].MODIFY;
      END ELSE
        GSTPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostTransLineToGenJnlLine@1500003(TransferHeader@1500000 : Record 5740);
    VAR
      SourceCodeSetup@1500003 : Record 242;
      GSTManagement@1500004 : Codeunit 16401;
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        "Posting Date" := TransferHeader."Posting Date";
        Description := STRSUBSTNO(Text13700,TransShptHeader."No.");
        "Document Type" := "Document Type"::Invoice;
        "Document No." := TransShptHeader."No.";
        "External Document No." := TransferHeader."No.";
        IF GSTPostingBuffer[1]."GST Amount" <> 0 THEN BEGIN
          VALIDATE(Amount,ROUND(GSTPostingBuffer[1]."GST Amount"));
          "Account No." := GSTPostingBuffer[1]."Account No.";
        END;
        "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
        "GST Base Amount" := GSTPostingBuffer[1]."GST Base Amount";
        "GST Group Code" := GSTPostingBuffer[1]."GST Group Code";
        "GST Component Code" := GSTPostingBuffer[1]."GST Component Code";
        "System-Created Entry" := TransferBuffer[1]."System-Created Entry";
        "Gen. Posting Type" := "Gen. Posting Type"::Sale;
        "Gen. Bus. Posting Group" := GSTPostingBuffer[1]."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer[1]."Gen. Prod. Posting Group";
        "Shortcut Dimension 1 Code" := GSTPostingBuffer[1]."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GSTPostingBuffer[1]."Global Dimension 2 Code";
        "Product Type" := "Product Type"::Item;
        "Dimension Set ID" := GSTPostingBuffer[1]."Dimension Set ID";
        "Location Code" := TransferHeader."Transfer-from Code";
         SourceCodeSetup.GET;
        "Source Code" := SourceCodeSetup.Transfer;
        "Account Type" := "Account Type"::"G/L Account";
        GSTManagement.InsertGSTLedgerEntryTransfer(
          GSTPostingBuffer[1],TransferHeader,
          GenJnlPostLine.GetNextTransactionNo,"Document Type",GenJnlLine."Document No.",
          SourceCodeSetup.Transfer,DocTransferType::"Transfer Shipment");
        RunGenJnlPostLine(GenJnlLine);
      END;
    END;

    BEGIN
    END.
  }
}

