OBJECT Codeunit 136212 Marketing Contacts Search II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      IsInitialized@1001 : Boolean;
      OriginalContactNo@1010 : Code[20];
      DuplicateContactNo@1011 : Code[20];
      ContactCompany@1000 : TextConst 'ENU=Contact Company';
      ContactPerson@1003 : TextConst 'ENU=Contact Person';
      ContactNotExistError@1006 : TextConst 'ENU=%1 must not exists in %2.';
      ContactExistError@1007 : TextConst 'ENU=%1 must exists in %2.';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryService@1001 : Codeunit 131902;
    BEGIN
      // Clear Global Variables.
      CLEAR(OriginalContactNo);
      CLEAR(DuplicateContactNo);

      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ContactDuplicatesPageHandler)]
    PROCEDURE CompanyContactDuplicatesTrue@15();
    VAR
      Contact@1001 : Record 5050;
      MarketingSetup@1003 : Record 5079;
    BEGIN
      // Check that Company Contacts with Similar Name will be listed in Contact Duplicate Page when Autosearch for Duplicate = TRUE.

      // 1. Setup: Update Marketing Setup, Create a new Contact of company type. Take 10 as Hit percent to match only one field's
      // value while searching duplicate. Value important for test. Assign Contact Nos. to global variables.
      Initialize;
      MarketingSetup.GET;
      UpdateMarketingSetup(TRUE,10);
      DuplicateContactNo := CreateContactCard(Contact.Type::Company,ContactCompany);

      // 2. Exercise: Create another Contact of Company Type with Same Name.
      OriginalContactNo := CreateContactCard(Contact.Type::Company,ContactCompany);

      // 3. Verify: Verify that duplicate Contact of company type is listed in Contact Duplicates Page.
      // Verification done in ContactDuplicatesPageHandler.

      // 4. Tear Down: Rollback setup done.
      UpdateMarketingSetup(MarketingSetup."Autosearch for Duplicates",MarketingSetup."Search Hit %");
    END;

    [Test]
    PROCEDURE CompanyContactDuplicatesFalse@11();
    VAR
      Contact@1001 : Record 5050;
      ContactDuplicate@1003 : Record 5085;
      MarketingSetup@1004 : Record 5079;
    BEGIN
      // Check that Company Contacts with Similar Name will be listed in Contact Duplicate table when Autosearch for Duplicate = FALSE.

      // 1. Setup: Update Marketing Setup, Create a new Contact of company type. Take 10 as Hit percent to match only one field's
      // value while searching duplicate. Value important for test. Assign Duplicate Contact No. to global variable.
      Initialize;
      MarketingSetup.GET;
      UpdateMarketingSetup(FALSE,10);
      DuplicateContactNo := CreateContactCard(Contact.Type::Company,ContactCompany);

      // 2. Exercise: Create another Contact of Company Type with Same Name.
      CreateContactCard(Contact.Type::Company,ContactCompany);

      // 3. Verify: Verify that duplicate Contact of company type is listed in Contact Duplicates Table however no page opened.
      ContactDuplicate.SETRANGE("Duplicate Contact No.",DuplicateContactNo);
      Assert.IsTrue(
        ContactDuplicate.FINDFIRST,
        STRSUBSTNO(ContactExistError,ContactDuplicate."Duplicate Contact No.",ContactDuplicate.TABLECAPTION));

      // 4. Tear Down: Rollback setup done.
      UpdateMarketingSetup(MarketingSetup."Autosearch for Duplicates",MarketingSetup."Search Hit %");
    END;

    [Test]
    PROCEDURE PersonContactDuplicatesTrue@70();
    VAR
      Contact@1001 : Record 5050;
    BEGIN
      // Check that Person Contacts with Similar Name are not searched for duplicate contacts.

      // Take 10 as Hit percent to match only one field's value while searching duplicate. Value important for test.
      DuplicateContacts(Contact.Type::Person,10,ContactPerson);
    END;

    [Test]
    PROCEDURE MultipleDuplicatesOnContact@37();
    VAR
      Contact@1001 : Record 5050;
    BEGIN
      // Check that Company Contacts with Similar Name are not present in Contact Duplicate Page when search hit percent is 90.

      // Take 90 as Hit percent to match atleast Nine field values while searching duplicate. Value important for test.
      DuplicateContacts(Contact.Type::Company,90,ContactCompany);
    END;

    LOCAL PROCEDURE DuplicateContacts@71(Type@1000 : Option;SearchHitPct@1001 : Integer;ContactName@1002 : Text[50]);
    VAR
      MarketingSetup@1003 : Record 5079;
    BEGIN
      // 1. Setup: Update Marketing Setup, Create a new Contact. Assign Duplicate Contact No. to global variable.
      Initialize;
      MarketingSetup.GET;
      UpdateMarketingSetup(TRUE,SearchHitPct);
      DuplicateContactNo := CreateContactCard(Type,ContactName);

      // 2. Exercise: Create another Contact with same name.
      CreateContactCard(Type,ContactName);

      // 3. Verify: Verify that duplicate Contact is not listed in Contact Duplicates Table.
      VerifyNoContactExists(DuplicateContactNo);

      // 4. Tear Down: Rollback setup done.
      UpdateMarketingSetup(MarketingSetup."Autosearch for Duplicates",MarketingSetup."Search Hit %");
    END;

    LOCAL PROCEDURE CreateContactCard@27(Type@1001 : Option;Name@1002 : Text[50]) ContactNo : Code[20];
    VAR
      ContactCard@1000 : TestPage 5050;
    BEGIN
      ContactCard.OPENNEW;
      ContactCard.Type.ACTIVATE;
      ContactCard.Type.SETVALUE(Type);
      ContactCard.Name.SETVALUE(Name);
      ContactNo := ContactCard."No.".VALUE;
      ContactCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateMarketingSetup@25(AutosearchForDuplicates@1002 : Boolean;SearchHitPct@1003 : Integer);
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Autosearch for Duplicates",AutosearchForDuplicates);
      MarketingSetup.VALIDATE("Search Hit %",SearchHitPct);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyNoContactExists@60(ContactNo@1001 : Code[20]);
    VAR
      ContactDuplicate@1000 : Record 5085;
    BEGIN
      ContactDuplicate.SETRANGE("Duplicate Contact No.",ContactNo);
      Assert.IsFalse(
        ContactDuplicate.FINDFIRST,
        STRSUBSTNO(ContactNotExistError,ContactDuplicate."Duplicate Contact No.",ContactDuplicate.TABLECAPTION));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ContactDuplicatesPageHandler@21(VAR ContactDuplicates@1000 : TestPage 5134);
    BEGIN
      ContactDuplicates."Contact No.".ASSERTEQUALS(OriginalContactNo);
      ContactDuplicates."Duplicate Contact No.".ASSERTEQUALS(DuplicateContactNo);
      ContactDuplicates.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Duplicate Contact] [Marketing]
      Test for Marketing Contact Search Duplicates:
       1. Test that Company Contacts with Similar Name will be listed in Contact Duplicate Page when Autosearch for Duplicate = TRUE.
       2. Test that Company Contacts with Similar Name will be listed in Contact Duplicate table when Autosearch for Duplicate = FALSE.
       3. Check that Person Contacts with Similar Name are not searched for duplicate contacts.
       4. Check that Company Contacts with Similar Name are not present in Contact Duplicate Page when search hit percent is 90.

      TFS_TS_ID = 257463
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      CompanyContactDuplicatesTrue, CompanyContactDuplicatesFalse, PersonContactDuplicatesTrue, MultipleDuplicatesOnContact     123234
    }
    END.
  }
}

