OBJECT Codeunit 137151 SCM Warehouse - Shipping
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1018 : Record 82;
      ItemJournalTemplate2@1049 : Record 82;
      ItemJournalBatch@1017 : Record 233;
      ItemJournalBatch2@1039 : Record 233;
      ItemJournalBatch3@1050 : Record 233;
      LocationWhite@1005 : Record 14;
      LocationWhite2@1035 : Record 14;
      LocationWhite3@1000 : Record 14;
      LocationGreen@1004 : Record 14;
      LocationGreen2@1003 : Record 14;
      LocationOrange@1015 : Record 14;
      LocationOrange2@1032 : Record 14;
      LocationOrange3@1026 : Record 14;
      LocationSilver@1024 : Record 14;
      LocationSilver2@1052 : Record 14;
      LocationSilver3@1055 : Record 14;
      LocationRed@1033 : Record 14;
      LocationBlue@1034 : Record 14;
      LocationInTransit@1028 : Record 14;
      LocationWithRequirePick@1007 : Record 14;
      WarehouseJournalTemplate@1046 : Record 7309;
      WarehouseJournalBatch@1045 : Record 7310;
      Assert@1002 : Codeunit 130000;
      LibraryVariableStorage@1038 : Codeunit 131004;
      LibrarySetupStorage@1070 : Codeunit 131009;
      LibraryPlanning@1040 : Codeunit 132203;
      LibraryManufacturing@1036 : Codeunit 132202;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1064 : Codeunit 130502;
      LibraryPurchase@1011 : Codeunit 130512;
      LibrarySales@1037 : Codeunit 130509;
      LibraryPatterns@1065 : Codeunit 132212;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryRandom@1006 : Codeunit 130440;
      ErrorQtyToHandleTxt@1019 : TextConst '@@@=Line No;ENU="Qty. to Ship must not be greater than 0 units in Warehouse Shipment Line No.=''%1''"';
      TrackingActionMsg@1041 : TextConst 'ENU=The change will not affect existing entries.';
      NothingToPostErr@1042 : TextConst 'ENU=There is nothing to post.';
      NothingToRegisterErr@1043 : TextConst 'ENU=There is nothing to register.';
      ShippingAdviceErr@1044 : TextConst '@@@=Sales Order No.;ENU=If Shipping Advice is Complete in Sales Order no. %1, then all associated lines where type is Item must use the same location.';
      LibraryDimension@1057 : Codeunit 131001;
      isInitialized@1008 : Boolean;
      ItemTrackingMode@1060 : 'Assign Lot No.,Assign Serial No.,Select Entries,VerifyTracking,Split Lot No.,AssitEditLotNo,Assign Multiple Lines,Set Lot No.';
      SerialNoErr@1012 : TextConst 'ENU=Serial No does not exist.';
      NumberOfLineEqualErr@1013 : TextConst 'ENU=Number of Lines must be same.';
      ChangeShipingAdviceMsg@1020 : TextConst '@@@=Shipping Advice;ENU=Do you want to change %1 in all related records in warehouse accordingly';
      InvPutAwayMsg@1022 : TextConst 'ENU=Number of Invt. Put-away activities created';
      InvPickMsg@1021 : TextConst 'ENU=Number of Invt. Pick activities created';
      QuantityMustNotBeEqualErr@1023 : TextConst 'ENU=Quantity must not be Equal';
      QuantityMustBeEqualErr@1069 : TextConst 'ENU=Quantities must be Equal';
      TransferOrderDeletedMsg@1029 : TextConst '@@@=Order No.;ENU=The transfer order %1 has been deleted.';
      RegisterPickConfirmMsg@1014 : TextConst 'ENU=Do you want to register the';
      PickActivityCreatedMsg@1025 : TextConst 'ENU="Pick activity no. "';
      PutAwayActivityCreatedMsg@1051 : TextConst 'ENU=Put-away activity no.';
      NothingToHandleErr@1047 : TextConst 'ENU=Nothing to handle. .';
      UnexpectedErr@1027 : TextConst 'ENU=UnexpectedErr.';
      UndoShipmentConfirmMsg@1054 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';
      UndoPickedShipmentConfirmMsg@1001 : TextConst 'ENU=The items have been picked';
      WarehouseClassCodeErr@1056 : TextConst '@@@="Warehouse Class Code ";ENU=Warehouse Class Code must be equal to ''%1''';
      ItemInventoryInErr@1053 : TextConst '@@@=Item No. is not in inventory;ENU=Item %1 is not in inventory';
      RemainingQuantityErr@1058 : TextConst '@@@=Remaining Quantity must be equal to Quantity  in Item Ledger Entry;ENU=Remaining Quantity must be equal to ''%1''  in Item Ledger Entry';
      CompleteShipmentErr@1059 : TextConst 'ENU=This order must be a complete shipment.';
      QuantityErr@1062 : TextConst 'ENU=The value of Quantity field  is not correct.';
      RequsitionLineShouldCreatedErr@1061 : TextConst 'ENU=Requisition Line cannot be found.';
      LotNoTxt@1048 : TextConst '@@@=LOT NO;ENU=LOT_NO_%1';
      ReservEntryNotExistErr@1063 : TextConst 'ENU=There is no Reservation Entry within the filters';
      UndoSalesShipmentErr@1066 : TextConst 'ENU=Shipment Line with zero Quantity should not be considered for Undo Shipemnt';
      WhsShpmtHeaderExternalDocumentNoIsWrongErr@1030 : TextConst 'ENU=Warehouse Shipment Header."External Document No." is wrong.';
      WhsRcptHeaderVendorShpmntNoIsWrongErr@1031 : TextConst 'ENU=Warehouse Receipt Header."Vendor Shipment No." is wrong.';
      AvailWarningMsg@1067 : TextConst 'ENU=There are availability warnings on one or more lines.';
      WrongQtyToHandleInTrackingSpecErr@1068 : TextConst '@@@=%1: Field(Item No.), %2: Field(Serial No.), %3: Field(Lot No.), %4: Field(Qty. to Handle (Base)), %5: expected quantity;ENU=Qty. to Handle (Base) in Tracking Specification for Item No. %1, Serial No.: %2, Lot No.: %3 is currently %4. It must be %5.';

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CalcPlanForComponentAfterStockPickedFromProdOrderWithTracking@217();
    VAR
      ComponentItem@1007 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      // Setup: Create Item with Item Tracking. Update Inventory using Warehouse Journal.
      // Create and Register Pick from released Production Order. Assign Lot No. for the component line.
      // Create Sales Order for Component Item.
      Initialize;
      RegisterPickFromProdOrderWithLotNo(ComponentItem);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',
        LocationWhite.Code,ComponentItem."No.",LibraryRandom.RandInt(10));

      // Exercise: Run calculate Net Change plan for ComponentItem.
      LibraryPlanning.CalcNetChangePlanForPlanWksh(ComponentItem,WORKDATE,WORKDATE,FALSE);

      // Verify: Verify a Requsition line of Quantity = SalesLine.Quantity is suggested for the sales order.
      VerifyRequsitionLine(ComponentItem."No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE ShipmentPostErrorWithBlankQuantityToHandleAndSerialNo@168();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1001 : Record 36;
      WarehouseActivityHeader@1006 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1013 : Decimal;
    BEGIN
      // Setup: Create Item. Create and register Put Away with Item tracking and post the Receipt. Create Pick from Sales Order. Delete Quantity to Handle on Activity Line.
      Initialize;
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',FALSE);  // Taking Serial No. as True. Taking Blank value for Lot Nos. on Item card.
      LibraryVariableStorage.Enqueue(TrackingActionMsg);  // Enqueue for MessageHandler.
      ModifyOrderTrackingPolicyInItem(Item);
      Quantity := LibraryRandom.RandInt(10);  // Taking Random Quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Serial No.",FALSE);  // Taking ItemTracking as True.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreatePickFromSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity,TRUE);  // Taking ItemTracking as True.
      DeleteQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityHeader.Type::Pick);

      // Exercise: Register Warehouse Pick and catch the error.
      ASSERTERROR RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // Verify: Error message.
      Assert.ExpectedError(STRSUBSTNO(NothingToRegisterErr));

      // Exercise and Verify: Open Item Tracking lines from Warehouse Shipment Line. Verify Serial No. is assigned on Item Tracking Lines.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::VerifyTracking);  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue Quantity for Handler.
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentLine.OpenItemTrackingLines;  // Verify Item Tracking lines on ItemTrackingPageHandler.

      // Exercise: Enter Quantity to Ship in Shipment Line and catch the error.
      ASSERTERROR WarehouseShipmentLine.VALIDATE("Qty. to Ship",1);  // Value required for the test.

      // Verify: Error message.
      Assert.ExpectedError(STRSUBSTNO(ErrorQtyToHandleTxt,WarehouseShipmentLine."No."));

      // Exercise: Post Warehouse Shipment and catch the error.
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // Verify: Error message on posting Warehouse Shipment without registering Pick.
      Assert.ExpectedError(STRSUBSTNO(NothingToPostErr));
    END;

    [Test]
    PROCEDURE GetSourceDocumentsOnWarehouseReceipt@11();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      WarehouseReceiptHeader@1006 : Record 7316;
      WarehouseReceiptLine@1007 : Record 7317;
      WarehouseSourceFilter@1005 : Record 5771;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Sales return order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      CreateAndReleaseSalesReturnOrder(SalesHeader,Item."No.",Quantity);

      // Exercise: Create Warehouse Receipt header and get source documents.
      CreateWarehouseReceiptHeaderWithLocation(WarehouseReceiptHeader,LocationWhite.Code);
      LibraryWarehouse.GetSourceDocumentsReceipt(WarehouseReceiptHeader,WarehouseSourceFilter,LocationWhite.Code);

      // Verify: Warehouse Receipt Line created for the Sales Return Order.
      VerifyWarehouseReceiptLine(WarehouseReceiptLine."Source Document"::"Sales Return Order",SalesHeader."No.",Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE WarehouseShipmentErrorWithShippingAdviceCompleteWithTwoLocations@13();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1003 : Record 36;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Sales Order with two Sales Lines for different locations with Shipping Advice Complete.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      LibraryVariableStorage.Enqueue(ChangeShipingAdviceMsg);  // Enqueue for ConfirmHandler.
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader,SalesHeader."Shipping Advice"::Complete,Item."No.",Item."No.",Quantity,Quantity,LocationGreen.Code,
        LocationGreen2.Code,TRUE);  // Taking True for Multiple Lines.

      // Exercise: Invoke Create Warehouse Shipment from Sales Order and catch error.
      ASSERTERROR LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Error message.
      Assert.ExpectedError(STRSUBSTNO(ShippingAdviceErr,SalesHeader."No."));
    END;

    [Test]
    PROCEDURE CreateWarehouseShipmentWithShippingAdvicePartialOnTwoLocations@72();
    VAR
      Item@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      WarehouseShipmentLine@1000 : Record 7321;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Sales Order with two Sales Lines for different locations with Shipping Advice Partial.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random quantity.
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader,SalesHeader."Shipping Advice"::Partial,Item."No.",Item."No.",Quantity,Quantity,LocationGreen.Code,
        LocationGreen2.Code,TRUE);  // Taking True for Multiple Lines.

      // Exercise.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Warehouse Shipment lines for both locations.
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationGreen.Code,Item."No.",Quantity);
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationGreen2.Code,Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE CreatePickWithDifferentSalesUnitOfMeasure@25();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1002 : Record 36;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1006 : Record 5767;
      Quantity@1011 : Decimal;
    BEGIN
      // Setup: Create Item with different Sales Unit of Measure. Create and register Put Away and post the Receipt.
      Initialize;
      CreateItemWithDifferentSalesUnitOfMeasure(Item,ItemUnitOfMeasure);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,FALSE,ItemTrackingMode::"Assign Lot No.",FALSE);

      // Exercise.
      CreatePickFromSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity,FALSE);

      // Verify: Warehouse Activity lines.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityHeader.Type::Pick,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity);
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityHeader.Type::Pick,WarehouseActivityLine."Action Type"::Place,Item."No.",
        ROUND(Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure",0.00001));
    END;

    [Test]
    PROCEDURE PostShipmentWithDifferentSalesUnitOfMeasure@93();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1006 : Record 38;
      SalesHeader@1004 : Record 36;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1007 : Record 7321;
      Quantity@1011 : Decimal;
      SalesQuantity@1014 : Decimal;
    BEGIN
      // Setup: Create Item with different Sales Unit of Measure. Create and register Put Away and post the Receipt. Create and register the Pick.
      Initialize;
      CreateItemWithDifferentSalesUnitOfMeasure(Item,ItemUnitOfMeasure);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite2.Code,Item."No.",Quantity,FALSE,ItemTrackingMode::"Assign Lot No.",FALSE);
      SalesQuantity := Quantity + LibraryRandom.RandDec(10,2);  // Adding Random quantity.
      CreatePickFromSalesOrder(SalesHeader,LocationWhite2.Code,Item."No.",SalesQuantity,FALSE);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify: Values on Item Card.
      Item.CALCFIELDS(Inventory);
      Item.TESTFIELD(Inventory,0);  // Value required for the test.
      Item.CALCFIELDS("Qty. on Sales Order");
      Item.TESTFIELD("Qty. on Sales Order",(SalesQuantity * ItemUnitOfMeasure."Qty. per Unit of Measure") - Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE PostPurchaseOrderAfterWarehousePutAwayRegisterWithLotNo@8();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      DocumentNo@1010 : Code[20];
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item with Item Tracking Code. Create and register Put Away from Purchase Order and post Receipt.
      Initialize;
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationGreen.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",FALSE);  // Taking ItemTracking as True.

      // Exercise: Post the Purchase Order as Receive and Invoice.
      PostPurchaseDocument(PurchaseHeader,DocumentNo);

      // Verify: Posted Purchase Invoice.
      VerifyPostedPurchaseInvoice(DocumentNo,Item."No.",LocationGreen.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostSalesOrderAfterWarehousePickRegisterWithLotNo@28();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1006 : Record 38;
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
      WarehouseShipmentLine@1007 : Record 7321;
      Variant@1014 : Variant;
      DocumentNo@1011 : Code[20];
      Quantity@1013 : Decimal;
    BEGIN
      // Setup: Create Item with Item Tracking Code. Create and register Put Away from Purchase Order and post Receipt. Create and register Pick from Sales Order and post Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationGreen.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",FALSE);  // Taking ItemTracking as True.
      LibraryVariableStorage.Dequeue(Variant);  // Dequeue LotNo for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreatePickFromSalesOrder(SalesHeader,LocationGreen.Code,Item."No.",Quantity,TRUE);  // Taking ItemTracking as True.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise: Post the Sales Order as Ship and Invoice.
      PostSalesDocument(SalesHeader,DocumentNo);

      // Verify: Posted Sales Invoice.
      VerifyPostedSalesInvoice(DocumentNo,Item."No.",LocationGreen.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(EnterQuantityToCreateHandler,ItemTrackingPageHandler)]
    PROCEDURE PostPurchaseOrderAfterWarehousePutAwayRegisterWithSerialNo@38();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      DocumentNo@1010 : Code[20];
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item with Item Tracking Code. Create and register Put Away from Purchase Order and post Receipt.
      Initialize;
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',FALSE);  // Taking Serial No. as True. Taking Blank value for Lot Nos. on Item card.
      Quantity := LibraryRandom.RandInt(10);  // Taking Random Quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationGreen.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Serial No.",FALSE);  // Taking Item Tracking as True.

      // Exercise: Post the Purchase Order as Receive and Invoice.
      PostPurchaseDocument(PurchaseHeader,DocumentNo);

      // Verify: Posted Purchase Invoice.
      VerifyPostedPurchaseInvoice(DocumentNo,Item."No.",LocationGreen.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreateHandler)]
    PROCEDURE PostSalesOrderAfterWarehousePickRegisterWithSerialNo@37();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      PurchaseHeader@1006 : Record 38;
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1005 : Record 7321;
      DocumentNo@1011 : Code[20];
      Quantity@1013 : Decimal;
    BEGIN
      // Setup: Create Item with Item Tracking Code. Create and register Put Away from Purchase Order and post Receipt. Create and register Pick from Sales Order and post Shipment.
      Initialize;
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',FALSE);  // Taking Serial No. as True. Taking Blank value for Lot Nos. on Item card.
      Quantity := LibraryRandom.RandInt(10);  // Taking Random Quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationGreen.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Serial No.",FALSE);  // Taking Item Tracking as True.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreatePickFromSalesOrder(SalesHeader,LocationGreen.Code,Item."No.",Quantity,TRUE);  // Taking ItemTracking as True.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise: Post the Sales Order as Ship and Invoice.
      PostSalesDocument(SalesHeader,DocumentNo);

      // Verify: Posted Sales Invoice.
      VerifyPostedSalesInvoice(DocumentNo,Item."No.",LocationGreen.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPutAwayAndPickFromSalesOrderWithMultipleItems@35();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      PostedInvtPutAwayLine@1004 : Record 7341;
      PostedInvtPickLine@1008 : Record 7343;
      SalesHeader@1002 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseRequest@1003 : Record 5765;
      Quantity@1007 : Decimal;
      Quantity2@1006 : Decimal;
    BEGIN
      // Setup: Create Items and update Item Inventory from Item Journal. Create and release Sales Order with multiple lines. Create Inventory Put-Away and Pick.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      Quantity := -LibraryRandom.RandDec(10,2);  // Taking Random value for Quantity.
      Quantity2 := LibraryRandom.RandDec(10,2);  // Taking Random value for Quantity.
      CreateAndPostItemJournalLine(Item2."No.",Quantity2,LocationOrange.Code,'',FALSE);  // Taking Blank for Bin Code and false for Item Tracking.
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader,SalesHeader."Shipping Advice"::Complete,Item."No.",Item2."No.",Quantity,Quantity2,LocationOrange.Code,
        LocationOrange.Code,TRUE);  // Taking True for Multiple Lines.
      LibraryVariableStorage.Enqueue(InvPutAwayMsg);  // Enqueue for MessageHandler.
      LibraryVariableStorage.Enqueue(InvPickMsg);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",TRUE,TRUE);  // Taking True for Put Away and Pick.
      AutoFillQtyToHandleOnWhseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      AutoFillQtyToHandleOnWhseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // Exercise: Post Inventory Put-Away and Inventory Pick.
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // Verify: Posted Inventory Put-Away and Inventory Pick line.
      VerifyPostedInventoryPutLine(
        PostedInvtPutAwayLine."Source Document"::"Sales Order",SalesHeader."No.",LocationOrange.Code,Item."No.",-Quantity);
      VerifyPostedInventoryPickLine(
        PostedInvtPickLine."Source Document"::"Sales Order",SalesHeader."No.",LocationOrange.Code,Item2."No.",Quantity2,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithItemReserveBeforePurchaseOrder@69();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create Item with Reserve. Create and post Purchase Order. Create and release Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      UpdateReserveOnItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random value for Quantity.
      CreatePurchaseOrder(PurchaseHeader,LocationOrange.Code,Item."No.",Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Receive as TRUE.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationOrange.Code,'',Item."No.",Item."No.",Quantity,0,FALSE,FALSE);  // Taking O for blank Quantity of second line.
      LibraryVariableStorage.Enqueue(InvPickMsg);  // Enqueue for MessageHandler.

      // Exercise: Create Inventory Pick from Sales Order.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE);  // Taking True for Pick.

      // Verify: Inventory Pick Line.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::" ",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPickFromSalesWithItemReserveAfterItemJournal@29();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1004 : Record 5765;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Item. Create and Post Item Journal line. Update Reserve as Always on Item. Create and release Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random value for Quantity.
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationOrange.Code,'',FALSE);  // Taking Blank for Bin Code and false for Item Tracking.
      UpdateReserveOnItem(Item);
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationOrange.Code,'',Item."No.",Item."No.",Quantity,0,FALSE,FALSE);  // Taking O for blank Quantity of second line.

      // Exercise and Verify: Calculate value for Reserved Quantity and verify that it is not equal to Sales Line Quantity.
      SalesLine.CALCFIELDS("Reserved Quantity");
      Assert.AreNotEqual(SalesLine.Quantity,SalesLine."Reserved Quantity",QuantityMustNotBeEqualErr);
      LibraryVariableStorage.Enqueue(InvPickMsg);  // Enqueue for MessageHandler.

      // Exercise: Create Inventory Pick from Sales Order.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE);  // Taking True for Pick.

      // Verify: Inventory Pick Line.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::" ",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithBin@62();
    VAR
      Bin@1005 : Record 7354;
      Item@1004 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseRequest@1002 : Record 5765;
      Quantity@1010 : Decimal;
    BEGIN
      // Setup: Create Item. Create and post Item Journal line with Bin Code. Create and release Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      FindBin(Bin,LocationSilver.Code);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationSilver.Code,Bin.Code,FALSE);
      CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice(
        SalesHeader,SalesHeader."Shipping Advice"::Complete,Item."No.",'',Quantity,0,LocationSilver.Code,LocationSilver.Code,FALSE);  // Taking False for Multiple Lines. Taking 0 for Quantity of blank line. Taking Blank for 2nd Item.
      LibraryVariableStorage.Enqueue(InvPickMsg);  // Enqueue for MessageHandler.

      // Exercise: Create Inventory Pick from Sales Order.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE);  // Taking True for Pick.

      // Verify: Verify Warehouse Activity line.
      VerifyWarehouseActivityLineWithBin(SalesHeader."No.",Item."No.",Quantity,LocationSilver.Code,Bin.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPickFromTransferOrder@61();
    VAR
      Item@1007 : Record 27;
      TransferHeader@1013 : Record 5740;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item. Create and post Item Journal line. Create and release Transfer Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationOrange.Code,'',FALSE);  // Taking Blank for Bin Code.
      CreateAndReleaseTransferOrder(TransferHeader,LocationOrange.Code,LocationOrange2.Code,Item."No.",Quantity,FALSE);

      // Exercise: Create and Post Inventory Pick from Transfer Order.
      CreateAndPostInvPickFromTransferOrder(TransferHeader."No.");

      // Verify: Posted Inventory Pick Line.
      VerifyPostedInventoryPickLineForTransferOrder(TransferHeader."No.",Item."No.",Quantity,LocationOrange.Code,'');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPutAwayFromTransferOrder@57();
    VAR
      Item@1013 : Record 27;
      PostedInvtPutAwayLine@1001 : Record 7341;
      TransferHeader@1006 : Record 5740;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item. Create and post Item Journal line. Create and release Transfer Order. Create and Post Inventory Pick from Transfer Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationOrange.Code,'',FALSE);  // Taking Blank for Bin Code.
      CreateAndReleaseTransferOrder(TransferHeader,LocationOrange.Code,LocationOrange2.Code,Item."No.",Quantity,FALSE);
      CreateAndPostInvPickFromTransferOrder(TransferHeader."No.");

      // Exercise: Create and Post Inventory Put Away from Transfer Order.
      CreateAndPostInvPutAwayFromTransferOrder(TransferHeader."No.");

      // Verify: Posted Inventory Put Away Line.
      VerifyPostedInventoryPutLine(
        PostedInvtPutAwayLine."Source Document"::"Inbound Transfer",TransferHeader."No.",LocationOrange2.Code,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickFromTransferOrderWithLotNo@75();
    VAR
      Item@1007 : Record 27;
      TransferHeader@1013 : Record 5740;
      LotNo@1000 : Variant;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Item Tracking code. Create and post Item Journal line. Create and release Transfer Order with Lot No.
      Initialize;
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationOrange.Code,'',TRUE);  // Taking Item Tracking as True and Blank for Bin Code.
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue LotNo for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreateAndReleaseTransferOrder(TransferHeader,LocationOrange.Code,LocationOrange2.Code,Item."No.",Quantity,TRUE);  // Taking Item Tracking as True.

      // Exercise: Create and Post Inventory Pick from Transfer Order.
      CreateAndPostInvPickFromTransferOrder(TransferHeader."No.");

      // Verify: Posted Inventory Pick Line.
      VerifyPostedInventoryPickLineForTransferOrder(TransferHeader."No.",Item."No.",Quantity,LocationOrange.Code,LotNo);
    END;

    [Test]
    PROCEDURE InventoryPutAwayAndPickFromSalesOrderWithMultipleItemsPartialShipment@213();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1009 : Record 37;
      Quantity@1007 : Decimal;
      Quantity2@1006 : Decimal;
    BEGIN
      // Setup: Create Items and update Item Inventory from Item Journal. Create and release Sales Order with multiple lines and partial shipment and Shipping Advice is Complete.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      Quantity := -LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      Quantity2 := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipping Advice",SalesHeader."Shipping Advice"::Complete);
      SalesHeader.MODIFY;
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item2."No.",Quantity2);
      SalesLine.VALIDATE("Qty. to Ship",ROUND(Quantity2 * 0.5));
      SalesLine.MODIFY;

      // post anf verify there is a error
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Nothing to handle Error.
      Assert.AreEqual(STRSUBSTNO(CompleteShipmentErr),GETLASTERRORTEXT,UnexpectedErr);
    END;

    [Test]
    PROCEDURE WarehouseShipmentFromSalesOrderWithMultipleLocations@55();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseShipmentLine@1005 : Record 7321;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Items. Create and release Sales Order with two lines for different Locations.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random value for Quantity.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationRed.Code,LocationBlue.Code,Item."No.",Item2."No.",Quantity,Quantity,TRUE,FALSE);

      // Exercise: Create Warehouse Shipment from Sales Order.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Warehouse Shipment Line.
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationRed.Code,Item."No.",Quantity);
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationBlue.Code,Item2."No.",Quantity);
    END;

    [Test]
    PROCEDURE WarehouseShipmentFromSalesOrderWithNewSalesLine@51();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1002 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentLine@1006 : Record 7321;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Items. Create and release Sales Order with multiple lines. Create Warehouse Shipment from Sales Order. Reopen Sales Order and create a new Sales Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      LibraryInventory.CreateItem(Item3);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random value for Quantity.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationRed.Code,LocationBlue.Code,Item."No.",Item2."No.",Quantity,Quantity,TRUE,FALSE);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      AddNewLineInSalesOrder(SalesHeader,LocationBlue.Code,Item3."No.",Quantity);

      // Exercise: Create Warehouse Shipment for new Sales line.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Warehouse Shipment Line.
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationBlue.Code,Item3."No.",Quantity);
    END;

    [Test]
    PROCEDURE GetSourceDocumentsOnWarehouseShipment@45();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseSourceFilter@1005 : Record 5771;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Sales Return Order. Create Warehouse Shipment Header with Location.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := -LibraryRandom.RandDec(10,2);  // Taking Random Quantity. Negative value required for test.
      CreateAndReleaseSalesReturnOrder(SalesHeader,Item."No.",Quantity);
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationWhite.Code);

      // Exercise: Get source document on Warehouse Shipment.
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationWhite.Code);

      // Verify: Quantity does not match on Warehouse Shipment Line with Sales Line Quantity.
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Return Order",SalesHeader."No.");
      Assert.AreNotEqual(Quantity,WarehouseShipmentLine.Quantity,QuantityMustNotBeEqualErr);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE GetSourceDocumentsOnWarehouseShipmentWithItemTracking@70();
    VAR
      Bin@1003 : Record 7354;
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseShipmentHeader@1006 : Record 7320;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Item Tracking. Update Inventory using Warehouse Journal. Create and release Sales Order. Create Warehouse Shipment for the Sales Order.
      Initialize;
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',FALSE);  // Taking Serial No. as True. Taking Blank value for Lot Nos. on Item card.
      Quantity := LibraryRandom.RandInt(10);  // Taking Random Quantity.
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Serial No.");  // Enqueue ItemTrackingMode for WhseItemTrackingLinesHandler.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",TRUE);  // Taking True for Item Tracking.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationWhite.Code,'',Item."No.",'',Quantity,0,FALSE,TRUE);  // Taking True for Item Tracking. Taking O for Quantity of blank line.
      GetSourceDocumentOnWarehouseShipment(WarehouseShipmentHeader,LocationWhite.Code);

      // Exercise: Create Pick from the Warehouse Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Serial No. and Quantity on the Warehouse Pick Lines.
      VerifySerialNoOnWarehouseActivityLine(SalesHeader."No.",WarehouseActivityLine."Action Type"::Take);
      VerifySerialNoOnWarehouseActivityLine(SalesHeader."No.",WarehouseActivityLine."Action Type"::Place);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CalculateConsumptionAfterPickFromReleasedProductionOrder@101();
    VAR
      Bin@1010 : Record 7354;
      ItemLedgerEntry@1002 : Record 32;
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      ProductionOrder@1003 : Record 5405;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create Item with BOM. Create Released Production Order. Create Requisition Line and Carry Out Action Message Plan.
      // Create Put Away from created Purchase Order. Create and Register Pick from Production Order.
      Initialize;
      CreateItemWithProductionBOM(ParentItem,ComponentItem,ParentItem."Replenishment System"::Purchase);
      Quantity := LibraryRandom.RandInt(10);  // Taking Random quantity.
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",Quantity,LocationWhite.Code,'');
      CreateRequisitionLineAndCarryOutActionMessagePlan(ParentItem."No.",LocationWhite.Code,Quantity);
      RegisterPutAwayFromPurchaseOrder(ParentItem."No.");
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem,Quantity,'',ParentItem."Base Unit of Measure",FALSE);
      CreateAndRegisterPickFromProductionOrder(ProductionOrder,Bin);

      // Exercise: Calculate Consumption and Post the Item Journal line.
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);

      // Verify: Item Ledger entry for the Consumption entry.
      VerifyItemLedgerEntry(ComponentItem."No.",ItemLedgerEntry."Entry Type"::Consumption,-Quantity,'');
    END;

    [Test]
    [HandlerFunctions(OrderPromisingHandler)]
    PROCEDURE ReservationWithoutItemTrackingUsingPlanningWorksheet@49();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseActivityHeader@1010 : Record 5766;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      // Setup: Create Item. Create Sales Order and invoke Capable-to-Promise to reserve. Carry out Action Message Plan on Planning Worksheet. Create Put Away from newly created Purchase Order.
      // Create Shipment and Get Source Document for the Sales Order. Create and Register the Pick from the Shipment.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',LocationWhite2.Code,Item."No.",
        LibraryRandom.RandDec(10,2));  // Taking Random Quantity.
      OpenOrderPromisingPage(SalesHeader."No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ModifyRequisitionLineAndCarryOutActionMessagePlan(Item."No.");
      RegisterPutAwayFromPurchaseOrder(Item."No.");
      GetSourceDocumentOnWarehouseShipment(WarehouseShipmentHeader,LocationWhite2.Code);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Exercise: Post the Warehouse Shipment.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify: Posted Warehouse Shipment line.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationWhite2.Code,
        LocationWhite2."Shipment Bin Code",Item."No.",SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE CreatePickWithTwoPutAwaysWithOneRegistered@100();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1005 : Record 38;
      SalesHeader@1008 : Record 36;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1006 : Record 5767;
      Quantity@1002 : Decimal;
      Quantity2@1003 : Decimal;
    BEGIN
      // Setup: Create Item. Create two Put-Aways for the Item. Register only one Put-Away.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random quantity.
      Quantity2 := LibraryRandom.RandDec(10,2);  // Taking Random quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite2.Code,Item."No.",Quantity,FALSE,ItemTrackingMode::"Assign Lot No.",FALSE);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader2,LocationWhite2.Code,Item."No.",Quantity2);
      PostWarehouseReceipt(PurchaseHeader2."No.");

      // Exercise: Create Pick for the Item against both Put-Aways.
      CreatePickFromSalesOrder(SalesHeader,LocationWhite2.Code,Item."No.",Quantity + Quantity2,FALSE);

      // Verify: Quantity in the Pick Lines is equal to the Quantity of the Registered Put-Away.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityHeader.Type::Pick,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity);
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityHeader.Type::Pick,WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(WarehouseActivityLinesHandler,WarehousePickHandler,ConfirmHandler)]
    PROCEDURE RegisterPickFromSalesOrderByPage@43();
    VAR
      Bin@1005 : Record 7354;
      Bin2@1008 : Record 7354;
      Item@1002 : Record 27;
      RegisteredWhseActivityLine@1007 : Record 5773;
      SalesHeader@1001 : Record 36;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
      WarehouseShipment@1004 : TestPage 7335;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create Item. Update Inventory using Warehouse Journal. Create Pick from Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",FALSE);
      CreatePickFromSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity,FALSE);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      FindBinWithBinTypeCode(Bin2,LocationWhite.Code,TRUE,FALSE,FALSE);  // Find SHIP Bin.

      // Exercise: Open Warehouse Activity Lines page from Warehouse Shipment. Open Warehouse Pick page from the Activity Lines page and Register the Pick.
      WarehouseShipment.OPENEDIT;
      WarehouseShipment.FILTER.SETFILTER("No.",WarehouseShipmentHeader."No.");
      WarehouseShipment."Page Warehouse Activity Lines".INVOKE;  // WarehouseActivityLinesHandler is called here which itself will call WarehousePickHandler.

      // Verify: Registered Warehouse Activity line.
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity,Bin.Code);
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity,
        Bin2.Code);
    END;

    [Test]
    PROCEDURE PickFromSalesOrderWithBinCodeModifiedOnPutAwayLine@108();
    VAR
      Item@1000 : Record 27;
      Bin@1004 : Record 7354;
      PurchaseHeader@1003 : Record 38;
      RegisteredWhseActivityLine@1005 : Record 5773;
      WarehouseActivityLine@1002 : Record 5767;
      SalesHeader@1009 : Record 36;
      Quantity@1001 : Decimal;
      BinCode@1006 : Code[20];
    BEGIN
      // Setup: Create Item. Create and Post Warehouse Receipt. Update Bin Code on Warehouse Receipt and Post it.
      // Change Bin Code on Place entry of Put Away and Register it. Create and Release Sales Order with Auto Reserve. Create Pick from Warehouse Shipment.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Value for Quantity.
      FindBin(Bin,LocationOrange3.Code);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationOrange3.Code,Item."No.",Quantity);
      UpdateZoneAndBinCodeOnWarehouseReceiptLine(Bin,PurchaseHeader."No.");
      BinCode := Bin.Code;  // Value is required for verification.
      PostWarehouseReceipt(PurchaseHeader."No.");
      Bin.NEXT;
      ModifyBinOnWarehouseActivityLineAndRegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Bin.Code);
      CreatePickFromSalesOrder(SalesHeader,LocationOrange3.Code,Item."No.",Quantity,FALSE);

      // Exercise: Register the Pick lines.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify: Registered Warehouse Activity Line.
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity,Bin.Code);
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity,BinCode);
    END;

    [Test]
    PROCEDURE CreatePartialPickFromPickWorksheetWithMultipleLines@98();
    VAR
      Bin@1008 : Record 7354;
      Item@1003 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseActivityHeader@1010 : Record 5766;
      WarehouseActivityLine@1009 : Record 5767;
      WhseWorksheetName@1006 : Record 7327;
      WhseWorksheetLine@1005 : Record 7326;
      Quantity@1002 : Decimal;
      Quantity2@1004 : Decimal;
    BEGIN
      // Setup: Create Item. Post Item Journal line with Pick Bin. Create Sales Order with multiple lines. Create and Release Warehouse Shipment.
      // Get Source Document on Pick Worksheet. Delete Auto fill Quantity to Handle and set partial Quantity to Handle on first line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      Quantity2 := Quantity + LibraryRandom.RandDec(10,2);  // Taking Random Quantity.
      ModifyDirectedPutAwayAndPickInLocationWhite(LocationWhite3);
      FindBinWithBinTypeCode(Bin,LocationWhite3.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      CreateAndPostItemJournalLine(Item."No.",Quantity + Quantity2,LocationWhite3.Code,Bin.Code,FALSE);  // Adding both the Quantities for posting the Item Journal.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationWhite3.Code,LocationWhite3.Code,Item."No.",Item."No.",Quantity,Quantity2,TRUE,FALSE);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(SalesHeader);
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite3.Code);
      UpdateQuantityToHandleOnWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationWhite3.Code,Item."No.",Quantity / 2);  // Update Partial Quantity.

      // Exercise.
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",
        WhseWorksheetName.Name,LocationWhite3.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);  // Taking 0 for MaxNoOfLines, MaxNoOfSourceDoc and SortPick.

      // Verify: Warehouse Activity Line.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityHeader.Type::Pick,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity / 2);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CreatePickFromReleasedProductionOrderFromFirmPlannedProductionOrder@111();
    VAR
      ParentItem@1001 : Record 27;
      ComponentItem@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1002 : Decimal;
      OldAlwaysCreatePickLine@1005 : Boolean;
    BEGIN
      // Setup: Create Item with BOM. Create and release Sales Order. Create Requisition Line and Carry Out Action Message Plan to create Firm Planned Order.
      // Change Status from Firm Planned to Released. Update Always Create Pick Line in Location to TRUE.
      Initialize;
      ModifyAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,TRUE);
      CreateItemWithProductionBOM(ParentItem,ComponentItem,ComponentItem."Replenishment System"::"Prod. Order");
      Quantity := LibraryRandom.RandInt(10);  // Taking Random quantity.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationWhite.Code,'',ParentItem."No.",'',Quantity,0,FALSE,FALSE);  // Taking O for Quantity of blank line.
      CreateRequisitionLineAndCarryOutPlanForFirmPlanned(ParentItem."No.",LocationWhite.Code,Quantity);
      FindProductionOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.");
      LibraryManufacturing.ChangeStatusFirmPlanToReleased(
        ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);
      UpdateProductionOrderAndRefresh(ProductionOrder,ParentItem."No.");
      LibraryVariableStorage.Enqueue(PickActivityCreatedMsg);  // Enqueue for MessageHandler.

      // Exercise: Create Pick from Production Order.
      ProductionOrder.CreatePick('',0,FALSE,FALSE,FALSE);  // Taking 0 for Sorting Method option.

      // Verify: Warehouse Activity line.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityHeader.Type::Pick,WarehouseActivityLine."Action Type"::Take,ComponentItem."No.",Quantity);

      // Tear Down:
      ModifyAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,OldAlwaysCreatePickLine);
    END;

    [Test]
    PROCEDURE CalculateConsumptionAndPickFromPickWorksheetFromReleasedProductionOrder@105();
    VAR
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      ItemLedgerEntry@1010 : Record 32;
      PurchaseHeader@1004 : Record 38;
      ProductionOrder@1003 : Record 5405;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1005 : Record 5767;
      WhseWorksheetName@1008 : Record 7327;
      WhseWorksheetLine@1009 : Record 7326;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create Item with BOM. Create Released Production Order. Get Source Document on Pick Worksheet and Create Pick. Register the Pick created.
      Initialize;
      CreateItemWithProductionBOM(ParentItem,ComponentItem,ComponentItem."Replenishment System"::Purchase);
      Quantity := LibraryRandom.RandInt(10);  // Taking Random quantity.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite2.Code,ComponentItem."No.",Quantity,FALSE,ItemTrackingMode::"Assign Serial No.",FALSE);
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",Quantity,LocationWhite2.Code,'');
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite2.Code);
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationWhite2.Code,ComponentItem."No.");
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationWhite2.Code,
        '',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);  // Taking 0 for MaxNoOfLines, MaxNoOfSourceDoc and SortPick.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",WarehouseActivityHeader.Type::Pick);

      // Exercise: Calculate Consumption and Post the Item Journal line.
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);

      // Verify: Item Ledger entry for the Consumption entry.
      VerifyItemLedgerEntry(ComponentItem."No.",ItemLedgerEntry."Entry Type"::Consumption,-Quantity,'');
    END;

    [Test]
    PROCEDURE CreatePickErrorWithAllowBreakBulkFalseOnLocation@107();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      SalesHeader2@1008 : Record 36;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Put-Away Unit of Measure. Create Purchase Order with, Warehouse Receipt from Purchase Order. Post Warehouse Receipt. Register Warehouse Activity, Create Pick from Warehouse Shipment. Update Allow Break Bulk on Location.
      Initialize;
      CreateItemWithPutAwayUOM(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Taking Random Value for Quantity.
      CreateAndReleasePurchaseOrderWithDifferentPutAwayUOM(Item,LocationWhite2.Code,Quantity);
      RegisterPutAwayFromPurchaseOrder(Item."No.");
      CreateAndReleaseSalesOrderWithDifferentPutAwayUOM(SalesHeader,Item,LocationWhite2.Code,Quantity);
      CreatePickFromWhseShipment(SalesHeader);
      ModifyAllowBreakBulkOnLocation(LocationWhite2,FALSE);  // Allow Break Bulk as FALSE.
      CreateAndReleaseSalesOrderWithDifferentPutAwayUOM(SalesHeader2,Item,LocationWhite2.Code,Quantity);

      // Exercise: Create Pick from Warehouse Shipment and catches the Error message.
      ASSERTERROR CreatePickFromWhseShipment(SalesHeader2);

      // Verify: Nothing to handle Error.
      Assert.AreEqual(STRSUBSTNO(NothingToHandleErr),GETLASTERRORTEXT,UnexpectedErr);

      // Tear Down: Allow break bulk TRUE on Location.
      ModifyAllowBreakBulkOnLocation(LocationWhite2,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler,ConfirmHandler,ItemTrackingListPageHandler,CreateInventoryPutAwayPickHandler,MessageHandler)]
    PROCEDURE PostPartialInventoryPickWithItemTrackingAndReservationForProdOrderComponent@97();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickWithItemTrackingAndReservationForProdOrderComponent(FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler,ConfirmHandler,ItemTrackingListPageHandler,CreateInventoryPutAwayPickHandler,MessageHandler)]
    PROCEDURE PostInventoryPickWithItemTrackingAndReservationForProdOrderComponent@149();
    BEGIN
      // Setup:
      Initialize;
      InventoryPickWithItemTrackingAndReservationForProdOrderComponent(TRUE);
    END;

    LOCAL PROCEDURE InventoryPickWithItemTrackingAndReservationForProdOrderComponent@151(PostRemainingPick@1005 : Boolean);
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1003 : Record 5405;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1007 : Record 5767;
      PostedInvtPickLine@1010 : Record 7343;
      Variant@1011 : Variant;
      Quantity@1001 : Decimal;
      Quantity2@1004 : Decimal;
    BEGIN
      // Create Item with Lot specific Tracking. Post Item Journal with Lot No. Create and Refresh Production Order.
      // Create Production Order Component with Item Tracking. Reserve the Component line. Create Inventory Pick.
      Quantity := LibraryRandom.RandInt(10);  // Taking Random Quantity.
      Quantity2 := Quantity + LibraryRandom.RandInt(10);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      CreateAndPostItemJournalLine(Item."No.",Quantity2,LocationWithRequirePick.Code,'',TRUE);
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",Quantity2,LocationWithRequirePick.Code,'');
      LibraryVariableStorage.Dequeue(Variant);  // Dequeue for ItemTrackingPageHandler.
      CreateAndReserveProdOrderComponentWithItemTracking(ProductionOrder);
      COMMIT;  // Commit is required here.
      ProductionOrder.CreateInvtPutAwayPick;

      // Exercise: Post Inventory Pick with Partial Quantity.
      UpdateQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityHeader.Type::"Invt. Pick",Quantity,FALSE);
      PostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",WarehouseActivityHeader.Type::"Invt. Pick");

      // Verify: Reservation entry.
      VerifyReservationEntry(LocationWithRequirePick.Code,Item."No.",-(Quantity2 - Quantity));  // Remaining Quantity which is not posted.

      IF PostRemainingPick THEN BEGIN
        // Exercise: Post the Inventory Pick with remaining Quantity.
        PostInventoryActivity(
          WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityHeader.Type::"Invt. Pick");

        // Verify: Posted Inventory Pick Line.
        VerifyPostedInventoryPickLine(
          PostedInvtPickLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",LocationWithRequirePick.Code,Item."No.",
          Quantity2 - Quantity,TRUE);  // Remaining Quantity.
      END;
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE CreatePutAwayOfFinishedItemUsingInternalPutAway@109();
    VAR
      Bin@1003 : Record 7354;
      ParentItem@1002 : Record 27;
      ComponentItem@1001 : Record 27;
      ProductionOrder@1005 : Record 5405;
      WarehouseActivityLine@1006 : Record 5767;
      WhseInternalPutAwayHeader@1008 : Record 7331;
      WhseInternalPutAwayLine@1009 : Record 7332;
      WhseIntPutAwayRelease@1004 : Codeunit 7316;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with BOM. Update Inventory for Parent Item. Create and refresh Production Order. Post Consumption Journal and Output Journal.
      // Create Warehouse Internal Put-Away and Run Get Bin Content report on the Put-Away.
      Initialize;
      CreateItemWithProductionBOM(ParentItem,ComponentItem,ComponentItem."Replenishment System"::"Prod. Order");
      Quantity := LibraryRandom.RandInt(10);  // Taking Random quantity.
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,FALSE);  // Find BULK Bin.
      UpdateInventoryUsingWhseJournal(Bin,ParentItem,Quantity,'',ParentItem."Base Unit of Measure",FALSE);
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",Quantity,LocationWhite.Code,Bin.Code);
      PostConsumptionJournal(ParentItem."No.",Quantity,ProductionOrder."No.",LocationWhite.Code,Bin.Code);
      PostOutputJournal(ParentItem."No.",ProductionOrder."No.",Quantity);
      CreateWarehouseInternalPutAway(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,Bin,ParentItem."No.",Quantity);
      RunGetBinContentOnWhseInternalPutAway(WhseInternalPutAwayHeader,ParentItem."No.");

      // Exercise: Create Put Away from Warehouse Internal Put Away.
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
      LibraryVariableStorage.Enqueue(PutAwayActivityCreatedMsg);  // Enqueue for MessageHandler.
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);

      // Verify: Warehouse Activity line.
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,0,'',WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,
        ParentItem."No.",Quantity);  // Taking 0 for Blank Source Document option.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentWithManualExpirationDateEntryRequired@77();
    BEGIN
      Initialize;
      PostWarehouseShipmentWithSerialLotAndManualExpirationDateEntryRequired(TRUE);  // Manual Expiration Date Entry Required as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreateHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentWithoutManualExpirationDateEntryRequired@140();
    BEGIN
      Initialize;
      PostWarehouseShipmentWithSerialLotAndManualExpirationDateEntryRequired(FALSE);  // Manual Expiration Date Entry Required as FALSE.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentWithSerialLotAndManualExpirationDateEntryRequired@142(ManExprDateEntryReqd@1013 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1011 : Record 27;
      PurchaseHeader@1010 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseActivityHeader@1006 : Record 5766;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentLine@1014 : Record 7321;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Multiple Item Tracking Codes and Items. Create and Release Purchase Order with Multiple Lines, create and Post Warehouse Receipt, update Bin and Zone on Warehouse Activity Line. Register Warehouse Activity.
      IF ManExprDateEntryReqd THEN
        CreateMultipleItemsWithTrackingCodes(Item,Item2,TRUE)
      ELSE
        CreateMultipleItemsWithTrackingCodes(Item,Item2,FALSE);  // Manual Expiration Date Entry Required as FALSE.
      Quantity := LibraryRandom.RandInt(5);
      CreateAndReleasePurchaseOrderWithTrackingOnMultipleLines(PurchaseHeader,Item."No.",Quantity,Item2."No.",LocationWhite2.Code);
      IF ManExprDateEntryReqd THEN
        UpdateExpirationDateOnReservationEntry(Item2."No.");
      CreateAndPostWarehouseReceipt(PurchaseHeader);
      ModifyZoneAndBinCodeOnPutAwayLine(PurchaseHeader."No.",LocationWhite2.Code);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
      CreateAndReleaseSalesOrderWithItemTrackingOnMultipleLines(SalesHeader,LocationWhite2.Code,Item."No.",Item2."No.",Quantity);
      CreatePickFromWhseShipment(SalesHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // Exercise: Post Warehouse Shipment.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify: Posted Warehouse Shipment Line.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationWhite2.Code,
        LocationWhite2."Shipment Bin Code",Item."No.",Quantity);
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationWhite2.Code,
        LocationWhite2."Shipment Bin Code",Item2."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE UndoShipmentForSalesOrderForItemsWithLotNoAndWithoutTracking@154();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesShipmentLine@1008 : Record 111;
      LotNo@1007 : Variant;
      Quantity@1004 : Decimal;
      Quantity2@1005 : Decimal;
      DocumentNo@1009 : Code[20];
    BEGIN
      // Setup: Create one Item without Tracking and another with Lot specific Tracking. Create and Post Sales Order as Ship for both Items with Lot No. for second Item.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(10,2);  // Value required for test.
      LibraryInventory.CreateItem(Item);
      CreateItemWithItemTrackingCode(Item2,FALSE,FALSE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. and Serial No. as False. Taking blank value for Serial Nos. on Item card.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,'','',Item."No.",Item2."No.",Quantity,Quantity2,TRUE,TRUE);  // Taking Location Code as Blank.
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue for ItemTrackingPageHandler.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Ship.

      // Exercise.
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmMsg);  // Enqueue for ConfirmHandler.
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);

      // Verify: Posted Sales Shipment lines and Item ledger entry for Tracked Item.
      VerifyPostedSalesShipmentLine(DocumentNo,Item."No.",Quantity);
      VerifyPostedSalesShipmentLine(DocumentNo,Item2."No.",Quantity2);
      VerifyItemLedgerEntryForUndoShipment(Item2."No.",TRUE,Quantity2);
      VerifyItemLedgerEntryForUndoShipment(Item2."No.",FALSE,-Quantity2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterPartialPickAndPostPartialShipmentWithMultipleLotNo@150();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostShipmentForSalesOrderWithMultipleLotNoForItem(FALSE);  // Taking False for not posting Remaining Pick.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterRemainingPickAndPostRemainingShipmentWithMultipleLotNo@148();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostShipmentForSalesOrderWithMultipleLotNoForItem(TRUE);  // taking True for posting Remaining Pick.
    END;

    LOCAL PROCEDURE RegisterPickAndPostShipmentForSalesOrderWithMultipleLotNoForItem@143(PostRemainingPick@1011 : Boolean);
    VAR
      Bin@1002 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseShipmentLine@1008 : Record 7321;
      LotNo@1004 : Variant;
      LotNo2@1005 : Variant;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Lot Specific Tracking. Post Item Journal Line with Bin Code with multiple Lot No.
      Quantity := LibraryRandom.RandDec(10,2);
      FindBin(Bin,LocationSilver2.Code);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Split Lot No.");  // Enqueue for ItemTrackingPageHandler.
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationSilver2.Code,Bin.Code,TRUE);  // Taking Blank for Bin Code and True for Item Tracking.
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue for ItemTrackingPageHandler.
      LibraryVariableStorage.Dequeue(LotNo2);  // Dequeue for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.

      // Create Warehouse Shipment from Sales Order with multiple Lot No. Modify Bin Code on Warehouse Shipment and Create Pick.
      CreateWarehouseShipmentFromSalesOrder(SalesHeader,LocationSilver2.Code,Item."No.",Quantity,TRUE);
      Bin.NEXT;
      UpdateBinOnWarehouseShipmentLine(Bin,SalesHeader."No.");
      CreatePick(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Delete Quantity to Handle on Warehouse Activity Line for second Lot No.
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo2);
      DeleteQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise: Register the Pick with Partial Quantity and Post the Warehouse Shipment.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      DeleteReservationEntry(Item."No.",LotNo2);
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationSilver2.Code,Bin.Code,Item."No.",
        Quantity / 2);  // Value required for test.

      IF PostRemainingPick THEN BEGIN
        // Exercise: Register the rest of the Pick and Post the rest of the Shipment.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

        // Verify.
        VerifyPostedWhseShipmentLine(
          WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationSilver2.Code,Bin.Code,Item."No.",
          Quantity / 2);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostShipmentAfterDeletingRemainingPickFromSalesOrderWithLotNo@160();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1006 : Record 38;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      LotNo@1005 : Variant;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Lot specific Tracking. Create and Register Put-Away from Purchase Order and Post receipt. Create Pick from Sales Order.
      // Register the Pick with Partial quantity. Delete the remaining Pick.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",TRUE);
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationWhite.Code,'',Item."No.",'',Quantity,0,FALSE,TRUE);
      CreatePickFromWhseShipment(SalesHeader);
      UpdateQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick,
        Quantity / 2,TRUE);  // Value required for test.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      DeletePick(WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify: Posted Warehouse Shipment line.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationWhite.Code,
        LocationWhite."Shipment Bin Code",Item."No.",Quantity / 2);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostShipmentAfterDeletingRemainingPickFromTransferOrderWithLotNo@159();
    VAR
      Bin@1014 : Record 7354;
      Item@1000 : Record 27;
      TransferHeader@1011 : Record 5740;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Lot specific Tracking. Update Inventory using Warehouse Journal. Create Pick from Transfer Order. Register the Pick with Partial quantity.
      // Delete the remaining Pick.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",TRUE);  // Taking True for Item Tracking.
      CreateWarehouseShipmentFromTransferOrderWithLotNo(TransferHeader,LocationWhite.Code,LocationSilver3.Code,Item."No.",Quantity);
      CreatePick(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      UpdateQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick,Quantity / 2,TRUE);  // Value required for test.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      DeletePick(WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

      // Verify: Posted Warehouse Shipment line.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",LocationWhite.Code,
        LocationWhite."Shipment Bin Code",Item."No.",Quantity / 2);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostShipmentAfterDeletingRemainingPickFromPurchaseReturnOrderWithLotNo@158();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseShipmentLine@1010 : Record 7321;
      LotNo@1004 : Variant;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Lot specific Tracking. Create and Register Put-Away from Purchase Order and Post receipt. Create Pick from Purchase Return Order.
      // Register the Pick with Partial quantity. Delete the remaining Pick.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt(
        PurchaseHeader,LocationWhite2.Code,Item."No.",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",TRUE);
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue for ItemTrackingPageHandler.
      CreateWarehouseShipmentFromPurchaseReturnOrderWithLotNo(PurchaseHeader,Item."No.",LocationWhite2.Code,Quantity);
      CreatePick(WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");
      UpdateQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick,Quantity / 2,TRUE);  // Value required for test.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      DeletePick(WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");

      // Verify: Posted Warehouse Shipment line.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",LocationWhite2.Code,
        LocationWhite2."Shipment Bin Code",Item."No.",Quantity / 2);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE PostWarehouseShipmentAfterRegisteringPickFromSalesOrderWithLotNo@174();
    VAR
      Bin@1006 : Record 7354;
      Item@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1002 : Record 7321;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Lot specific Tracking. Update Inventory using Warehouse Item Journal. Create and Register the Pick from Warehouse Shipment.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",TRUE);  // Taking True for Item Tracking.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
      CreatePickFromSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity,TRUE);  // Taking True for Item Tracking.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify: Posted Warehouse Shipment line.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationWhite.Code,
        LocationWhite."Shipment Bin Code",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE WarehouseShipmentFromTransferOrderWithLotNo@173();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisteringPickFromTransferOrderWithLotNo(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE CreatePickFromTransferOrderWithLotNo@172();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisteringPickFromTransferOrderWithLotNo(TRUE,FALSE);  // Taking True for create Warehouse Pick.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE PostWarehouseShipmentFromTransferOrderWithLotNo@171();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisteringPickFromTransferOrderWithLotNo(TRUE,TRUE);  // Taking True for create Pick and Verify Posted Warehouse Shipment.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterRegisteringPickFromTransferOrderWithLotNo@169(CreateWarehousePick@1010 : Boolean;VerifyPostedWarehouseShipment@1011 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      Item@1005 : Record 27;
      TransferHeader@1004 : Record 5740;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1002 : Record 7321;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Lot specific Tracking. Update Inventory using Warehouse Item Journal.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",TRUE);  // Taking True for Item Tracking.

      // Exercise.
      CreateWarehouseShipmentFromTransferOrderWithLotNo(TransferHeader,LocationWhite.Code,LocationSilver3.Code,Item."No.",Quantity);

      // Verify.
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",LocationWhite.Code,Item."No.",Quantity);

      IF CreateWarehousePick THEN BEGIN
        // Exercise.
        CreatePick(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

        // Verify.
        VerifyWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity);
        VerifyWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity);
      END;

      IF VerifyPostedWarehouseShipment THEN BEGIN
        // Exercise: Register the Pick and Post the Warehouse Shipment.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

        // Verify: Posted Warehouse Shipment line and Transfer Order line.
        VerifyPostedWhseShipmentLine(
          WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",LocationWhite.Code,
          LocationWhite."Shipment Bin Code",Item."No.",Quantity);
        VerifyTransferOrderLine(TransferHeader."No.",Item."No.",0,Quantity);
      END;
    END;

    [Test]
    PROCEDURE WarehousePickIncorrectAllocationWithSalesUnitOfMeasureDiffersFromBOM@289();
    VAR
      Item@1000 : Record 27;
      Bin@1002 : ARRAY [3] OF Record 7354;
      ItemUnitOfMeasure@1001 : Record 5404;
      SalesHeader@1003 : ARRAY [3] OF Record 36;
      WarehouseShipmentHeader@1005 : Record 7320;
      BackupLocation@1006 : Record 14;
      Quantity@1007 : ARRAY [3] OF Decimal;
    BEGIN
      // [FEATURE] [Warehouse Activity Line] [Warehouse Shipment] [Item Tracking]
      // [SCENARIO 379071] Pick lines with appropriate bin codes and quantities are created for item with Sales Unit of Measure differs from Base UoM.
      Initialize;

      Quantity[1] := LibraryRandom.RandInt(100);
      Quantity[2] := LibraryRandom.RandInt(100);
      Quantity[3] := LibraryRandom.RandInt(100);

      // [GIVEN] Item with Sales Unit of Measure = U1.
      CreateItemWithDifferentSalesUnitOfMeasure(Item,ItemUnitOfMeasure);

      // [GIVEN] Bins "B1", "B2", "B3" from "Require Shipment" Location with preconfigured Bins.
      BackupLocation := LocationSilver;
      FindBinsAndSetLocationParemeters(Bin,LocationSilver);

      // [GIVEN] Positive adjustment with quantity = "X" in bin "B1",quantity = "Y" in bin "B2",quantity = "Z" in bin "B3".
      // [GIVEN] Sales Order for Bin "B1" of Quantity = "X" and "Unit of Measure Code" = Base UoM.
      // [GIVEN] Sales Order for Bin "B2" of Quantity = "Y" and "Unit of Measure Code" = Base UoM.
      // [GIVEN] Sales Order for Bin "B3" of Quantity = "Z" and "Unit of Measure Code" = U1.
      CreateThreeSalesOrderForDifferentBins(
        SalesHeader,Item,Bin,LocationSilver.Code,Quantity,ItemUnitOfMeasure."Qty. per Unit of Measure");

      // [GIVEN] Calling Get Source Document On Warehouse Shipment.
      GetSourceDocumentOnWarehouseShipment(WarehouseShipmentHeader,LocationSilver.Code);

      // [WHEN] Create Pick on Warehouse Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Warehouse Activity Lines with quantity = "X" and bin "B1", quantity = "Y" and bin "B2", quantity = "Z" and bin "B3" are created.
      VerifyBinCodeAndQuantityOnWarehouseActivityLine(
        SalesHeader[1]."No.",Bin[1].Code,Quantity[1] / ItemUnitOfMeasure."Qty. per Unit of Measure");
      VerifyBinCodeAndQuantityOnWarehouseActivityLine(
        SalesHeader[2]."No.",Bin[2].Code,Quantity[2] / ItemUnitOfMeasure."Qty. per Unit of Measure");
      VerifyBinCodeAndQuantityOnWarehouseActivityLine(SalesHeader[3]."No.",Bin[3].Code,Quantity[3]);

      // Tear down.
      LocationSilver := BackupLocation;
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE WarehouseShipmentFromPurchaseReturnOrderWithLotNo@167();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisteringPickFromPurchaseReturnOrderWithLotNo(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE CreatePickFromPurchaseReturnOrderWithLotNo@166();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisteringPickFromPurchaseReturnOrderWithLotNo(TRUE,FALSE);  // Taking True for create Warehouse Pick.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingSummaryPageHandler,ItemTrackingPageHandler)]
    PROCEDURE PostWarehouseShipmentFromPurchaseReturnOrderWithLotNo@165();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisteringPickFromPurchaseReturnOrderWithLotNo(TRUE,TRUE);  // Taking True for create Pick and Verify Posted Warehouse Shipment.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterRegisteringPickFromPurchaseReturnOrderWithLotNo@155(CreateWarehousePick@1004 : Boolean;VerifyPostedWarehouseShipment@1002 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      Item@1005 : Record 27;
      PurchaseHeader@1009 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1007 : Record 7321;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Lot specific Tracking. Update Inventory using Warehouse Item Journal.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue for ItemTrackingPageHandler.
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",TRUE);  // Taking True for Item Tracking.

      // Exercise.
      CreateWarehouseShipmentFromPurchaseReturnOrderWithLotNo(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity);

      // Verify.
      VerifyWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",LocationWhite.Code,Item."No.",Quantity);

      IF CreateWarehousePick THEN BEGIN
        // Exercise.
        CreatePick(WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");

        // Verify.
        VerifyWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity);
        VerifyWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity);
      END;

      IF VerifyPostedWarehouseShipment THEN BEGIN
        // Exercise: Register the Pick and Post the Warehouse Shipment.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");

        // Verify: Posted Warehouse Shipment line and Purchase Return Order line.
        VerifyPostedWhseShipmentLine(
          WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",LocationWhite.Code,
          LocationWhite."Shipment Bin Code",Item."No.",Quantity);
        VerifyPurchaseReturnOrderLine(PurchaseHeader."No.",Item."No.",Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE PickFromWarehouseInternalPickWithItemVariantAndMultipleUOM@181();
    VAR
      Bin@1002 : Record 7354;
      Item@1013 : Record 27;
      Item2@1012 : Record 27;
      ItemVariant@1011 : Record 5401;
      ItemUnitOfMeasure@1006 : Record 5404;
      WhseInternalPickHeader@1008 : Record 7333;
      WarehouseEntry@1004 : Record 7312;
      ItemLedgerEntry@1003 : Record 32;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create an Item with Flushing Method as Forward and another with Flushing Method, Variant and two Item Unit of Measure. Update Inventory using Warehouse Journal. Create Pick from Warehouse Internal Pick.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithFlushingMethodForward(Item);
      CreateItemWithVariantAndFlushingMethod(ItemVariant);
      Item2.GET(ItemVariant."Item No.");
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item2."No.");
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'',Item."Base Unit of Measure",FALSE);  // Taking Blank for Variant Code.
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,ItemVariant.Code,ItemUnitOfMeasure.Code,FALSE);
      Bin.GET(LocationWhite.Code,LocationWhite."Open Shop Floor Bin Code");
      CreatePickFromWarehouseInternalPickWithMultipleLines(
        WhseInternalPickHeader,Bin,Item."No.",Item."Base Unit of Measure",Quantity,Item2."No.",ItemVariant.Code,
        ItemUnitOfMeasure.Code);

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify: Warehouse Entries, Item Ledger Entries and Bin Contents.
      VerifyWarehouseEntry(Item."No.",WarehouseEntry."Entry Type"::"Negative Adjmt.",'',-Quantity);  // Taking Blank for Variant Code.
      VerifyWarehouseEntry(Item."No.",WarehouseEntry."Entry Type"::"Positive Adjmt.",'',Quantity);  // Taking Blank for Variant Code.
      VerifyWarehouseEntry(Item2."No.",WarehouseEntry."Entry Type"::"Negative Adjmt.",ItemVariant.Code,-Quantity);
      VerifyWarehouseEntry(Item2."No.",WarehouseEntry."Entry Type"::"Positive Adjmt.",ItemVariant.Code,Quantity);
      VerifyItemLedgerEntry(Item."No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Quantity,'');  // Taking Blank for Variant Code.
      VerifyItemLedgerEntry(
        Item2."No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
        ItemVariant.Code);  // Value required for the test.
      VerifyBinContent(LocationWhite.Code,Bin.Code,Item."No.",'',Quantity,'');  // Taking Blank for Variant Code and Warehouse Class Code.
      VerifyBinContent(LocationWhite.Code,Bin.Code,Item2."No.",ItemVariant.Code,Quantity,'');  // Taking Blank for Warehouse Class Code.
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler,MessageHandler)]
    PROCEDURE ProductionOrderAfterPickFromWhseInternalPickWithItemVariantAndMultipleUOM@180();
    VAR
      Bin@1009 : Record 7354;
      ParentItem@1001 : Record 27;
      ProductionBOMHeader@1010 : Record 99000771;
      ComponentItem@1002 : Record 27;
      ComponentItem2@1007 : Record 27;
      ProductionOrder@1003 : Record 5405;
      ItemLedgerEntry@1004 : Record 32;
      ItemVariant@1008 : Record 5401;
      ItemUnitOfMeasure@1005 : Record 5404;
      WarehouseActivityLine@1012 : Record 5767;
      WhseInternalPickHeader@1006 : Record 7333;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create an Item with Production BOM with two Component Items, one without Variant and another with Variant and different Unit of Measure. Update Inventory using Warehouse Journal.
      // Create Pick from Warehouse Internal Pick and register the Pick.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithFlushingMethodForward(ParentItem);
      CreateItemWithFlushingMethodForward(ComponentItem);
      CreateItemWithVariantAndFlushingMethod(ItemVariant);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemVariant."Item No.");
      CreateAndCertifyBOMWithMultipleLines(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ComponentItem."No.",ItemVariant."Item No.",ItemVariant.Code,
        ItemUnitOfMeasure.Code);
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      ComponentItem2.GET(ItemVariant."Item No.");
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem,Quantity,'',ComponentItem."Base Unit of Measure",FALSE);  // Taking Blank for Zone and Variant Code.
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem2,Quantity,ItemVariant.Code,ItemUnitOfMeasure.Code,FALSE);  // Taking Blank for Zone Code.
      Bin.GET(LocationWhite.Code,LocationWhite."Open Shop Floor Bin Code");
      CreatePickFromWarehouseInternalPickWithMultipleLines(
        WhseInternalPickHeader,Bin,ComponentItem."No.",ComponentItem."Base Unit of Measure",Quantity,ComponentItem2."No.",
        ItemVariant.Code,ItemUnitOfMeasure.Code);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Exercise.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ParentItem."No.",Quantity,LocationWhite.Code,LocationWhite."Open Shop Floor Bin Code");

      // Verify: Item Ledger Entries and Bin contents.
      VerifyItemLedgerEntry(ComponentItem."No.",ItemLedgerEntry."Entry Type"::Consumption,-Quantity,'');  // Taking Blank for Variant Code.
      VerifyItemLedgerEntry(
        ComponentItem2."No.",ItemLedgerEntry."Entry Type"::Consumption,-Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
        ItemVariant.Code);  // Value required for the test.
      VerifyBinContent(LocationWhite.Code,Bin.Code,ComponentItem."No.",'',0,'');  // Value 0 is required for the test. Taking Blank for Variant Code and Warehouse Class Code.
      VerifyBinContent(LocationWhite.Code,Bin.Code,ComponentItem2."No.",ItemVariant.Code,0,'');  // Value 0 is required for the test. Taking Blank for Warehouse Class Code.
    END;

    [Test]
    PROCEDURE ShippingAgentCodeShouldBeChangedInSalesOrderAfterChangingInWhseShipment@350();
    VAR
      Location@1001 : Record 14;
      SalesHeader@1003 : Record 36;
      ShippingAgent@1002 : Record 291;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Shipping Agent]
      // [SCENARIO 379948] Shipping Agent Service Code should be modified after changing Shipping Agent Code in Warehouse Shipment if Shipping Agent Service Code is empty in Warehouse Shipment.
      Initialize;

      // [GIVEN] Create Location with shipment requirement.
      CreateAndUpdateLocation(Location,FALSE,FALSE,FALSE,TRUE,FALSE);

      // [GIVEN] Sales Order with Shipping Agent Code ="SA1" and filled Shipping Agent Service Code field.
      CreateSalesOrderWithPostingDate(SalesHeader,SalesHeader."Document Type"::Order,Location.Code);
      UpdateShippingAgentCodeAndShippingAgentServiceCode(SalesHeader);

      // [GIVEN] Warehouse Shipment with Shipping Agent Code ="SA2" and empty Shipping Agent Service Code field.
      CreateWarehouseShipmentFromSOWithPostingDate(WarehouseShipmentHeader,SalesHeader);
      UpdateShippingAgentCodeInWhseShipment(WarehouseShipmentHeader,ShippingAgent);

      // [WHEN] Post Warehouse Shipment
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Sales Order and Posted Sales Shipment should have empty Shipping Agent Service Code field.
      VerifySalesHeaderAndSalesShipmentHeader(SalesHeader."No.");
    END;

    [Test]
    PROCEDURE ShippingServiceAgentCodeShouldBeChangedAfterTwoPartialShipment@354();
    VAR
      Location@1001 : Record 14;
      SalesHeader@1003 : Record 36;
      ShippingAgent@1004 : Record 291;
      ShippingAgentServices@1002 : Record 5790;
      WarehouseShipmentHeader@1000 : Record 7320;
      PeriodLength@1005 : DateFormula;
      Quantity@1007 : Decimal;
      QuantityForFirstShip@1006 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Shipping Agent]
      // [SCENARIO 379948] Shipping Agent Service Code should be modified in Sales Header after two partial Warehouse Shipment if Shipping Agent Service Code was changed before posting second partial Warehouse Shipment.
      Initialize;

      // [GIVEN] Create Location with shipment requirement.
      CreateAndUpdateLocation(Location,FALSE,FALSE,FALSE,TRUE,FALSE);

      // [GIVEN] Sales Order with Shipping Agent Code ="SA1" and Shipping Agent Service Code = "SS1" field.
      Quantity := CreateSalesOrderWithDeterminedQuantity(SalesHeader,SalesHeader."Document Type"::Order,Location.Code);
      UpdateShippingAgentCodeAndShippingAgentServiceCode(SalesHeader);

      // [GIVEN] Warehouse Shipment with Shipping Agent Code ="SA2" and Shipping Agent Service Code = "SS2" field.
      CreateWarehouseShipmentFromSOWithPostingDate(WarehouseShipmentHeader,SalesHeader);
      UpdateShippingAgentCodeInWhseShipment(WarehouseShipmentHeader,ShippingAgent);
      QuantityForFirstShip := LibraryRandom.RandInt(Quantity - 1);
      EVALUATE(PeriodLength,'<1D>');
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,PeriodLength);
      UpdateWhseShipment(WarehouseShipmentHeader,ShippingAgentServices,QuantityForFirstShip);

      // [GIVEN] Post partial Warehouse Shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [GIVEN] Update existing Warehouse Shipment with Shipping Agent Service Code = "SS3" field.
      WarehouseShipmentHeader.FIND;
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,PeriodLength);
      UpdateWhseShipment(WarehouseShipmentHeader,ShippingAgentServices,Quantity - QuantityForFirstShip);

      // [WHEN] Post partial Warehouse Shipment second time.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Sales Order and Posted Sales Shipment should have Shipping Agent Service Code = "SS3".
      VerifyShippingAgentServiceInSalesHeaderAndSalesShipmentHeader(ShippingAgentServices,SalesHeader."No.");
    END;

    [Test]
    PROCEDURE WarehouseClassCodeErrorOnWarehouseReceipt@190();
    VAR
      WarehouseClass@1001 : Record 7304;
      Item@1002 : Record 27;
      Bin@1004 : Record 7354;
      PurchaseHeader@1005 : Record 38;
      Zone@1000 : Record 7300;
    BEGIN
      // Setup: Create Item with Product Group Code. Create Zone with Warehouse Class Code. Create Bin for new Zone. Create Warehouse Receipt from Purchase Order.
      Initialize;
      CreateItemWithWarehouseClassProductGroup(WarehouseClass,Item);
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationWhite.Code,LibraryWarehouse.SelectBinType(TRUE,FALSE,FALSE,FALSE),WarehouseClass.Code,'',0,FALSE);  // Value required for Zone Rank. Taking True for Receive Zone.
      CreateBinWithWarehouseClassCode(Bin,Zone,'');  // Taking blank for Warehouse Class Code.
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationWhite.Code,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Update Zone and Bin Code on Warehouse Receipt Line.
      ASSERTERROR UpdateZoneAndBinCodeOnWarehouseReceiptLine(Bin,PurchaseHeader."No.");

      // Verify: Error message.
      Assert.ExpectedError(STRSUBSTNO(WarehouseClassCodeErr,WarehouseClass.Code));
    END;

    [Test]
    PROCEDURE RegisterPutAwayWithWarehouseClassCode@189();
    VAR
      WarehouseClass@1000 : Record 7304;
      Item@1001 : Record 27;
      Bin@1004 : Record 7354;
      Bin2@1006 : Record 7354;
      PurchaseHeader@1005 : Record 38;
      RegisteredWhseActivityLine@1007 : Record 5773;
      WarehouseActivityLine@1003 : Record 5767;
      Zone@1009 : Record 7300;
      Quantity@1002 : Decimal;
      OldAlwaysCreatePutAwayLine@1008 : Boolean;
    BEGIN
      // Setup: Create Item with Product Group Code. Create and Post Warehouse Receipt from Purchase Order with Warehouse Class Code. Create Pick Zone with Warehouse Class Code. Create Bin with Warehouse Class Code.
      Initialize;
      ModifyAlwaysCreatePutAwayLineOnLocation(LocationWhite,OldAlwaysCreatePutAwayLine,TRUE);  // Taking True for Always Create Put-Away Line.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithWarehouseClassProductGroup(WarehouseClass,Item);
      PostWarehouseReceiptFromPurchaseOrderWithWarehouseClassCode(
        PurchaseHeader,Bin,LocationWhite.Code,WarehouseClass.Code,Item."No.",Quantity);
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE),WarehouseClass.Code,'',0,FALSE);  // Value required for Zone Rank. Taking True for Pick Zone.
      CreateBinWithWarehouseClassCode(Bin2,Zone,WarehouseClass.Code);

      // Exercise: Update Bin Code on Place Line and Register Put Away.
      ModifyBinOnWarehouseActivityLineAndRegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Bin2.Code);

      // Verify.
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity,
        Bin.Code);
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity,
        Bin2.Code);
      VerifyBinContent(LocationWhite.Code,Bin2.Code,Item."No.",'',Quantity,WarehouseClass.Code);  // Taking Blank for Variant Code.

      // Tear Down.
      ModifyAlwaysCreatePutAwayLineOnLocation(LocationWhite,OldAlwaysCreatePutAwayLine,OldAlwaysCreatePutAwayLine);
    END;

    [Test]
    PROCEDURE WarehouseClassCodeErrorOnWarehouseShipment@179();
    VAR
      WarehouseClass@1001 : Record 7304;
      Item@1002 : Record 27;
      Bin@1004 : Record 7354;
      Zone@1000 : Record 7300;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Setup: Create Item with Product Group Code. Create Zone with Warehouse Class Code. Create Bin for new Zone. Create Warehouse Shipment from Sales Order.
      Initialize;
      CreateItemWithWarehouseClassProductGroup(WarehouseClass,Item);
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,TRUE,FALSE,FALSE),WarehouseClass.Code,'',0,FALSE);  // Value required for Zone Rank. Taking True for Ship Zone.
      CreateBinWithWarehouseClassCode(Bin,Zone,'');  // Taking Blank for Warehouse Class Code.
      CreateWarehouseShipmentFromSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",LibraryRandom.RandDec(10,2),FALSE);

      // Exercise: Update Bin Code on Warehouse Shipment Line.
      ASSERTERROR UpdateBinOnWarehouseShipmentLine(Bin,SalesHeader."No.");

      // Verify: Error message.
      Assert.ExpectedError(STRSUBSTNO(WarehouseClassCodeErr,WarehouseClass.Code));
    END;

    [Test]
    PROCEDURE PostWarehouseShipmentFromSalesOrderWithWarehouseClassCode@231();
    VAR
      Item@1004 : Record 27;
      WarehouseClass@1003 : Record 7304;
      Bin@1001 : Record 7354;
      Bin2@1007 : Record 7354;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1009 : Record 38;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentLine@1006 : Record 7321;
      Zone@1011 : Record 7300;
      Quantity@1000 : Decimal;
      OldAlwaysCreatePickLine@1008 : Boolean;
      OldAlwaysCreatePutAwayLine@1010 : Boolean;
    BEGIN
      // Setup: Create Item with Product Group Code. Create and Post Warehouse Receipt from Purchase Order with Warehouse Class Code. Create Pick from Sales Order with
      // Warehouse Class Code and register the Pick.
      Initialize;
      ModifyAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,TRUE);  // Taking True for Always Create Pick Line.
      ModifyAlwaysCreatePutAwayLineOnLocation(LocationWhite,OldAlwaysCreatePutAwayLine,TRUE);  // Taking True for Always Create Put-Away Line.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithWarehouseClassProductGroup(WarehouseClass,Item);
      PostWarehouseReceiptFromPurchaseOrderWithWarehouseClassCode(
        PurchaseHeader,Bin,LocationWhite.Code,WarehouseClass.Code,Item."No.",Quantity);
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE),WarehouseClass.Code,'',0,FALSE);  // Value required for Zone Rank. Taking True for Pick Zone.
      CreateBinWithWarehouseClassCode(Bin2,Zone,WarehouseClass.Code);
      ModifyBinOnWarehouseActivityLineAndRegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,Bin2.Code);
      CreatePickFromSalesOrderWithWarehouseClassCode(SalesHeader,Bin,LocationWhite.Code,WarehouseClass.Code,Item."No.",Quantity);
      ModifyBinOnWarehouseActivityLineAndRegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick,
        WarehouseActivityLine."Action Type"::Take,Bin2.Code);

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify.
      VerifyPostedWhseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",LocationWhite.Code,Bin.Code,Item."No.",Quantity);

      // Tear Down.
      ModifyAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,OldAlwaysCreatePickLine);
      ModifyAlwaysCreatePutAwayLineOnLocation(LocationWhite,OldAlwaysCreatePutAwayLine,OldAlwaysCreatePutAwayLine);
    END;

    [Test]
    PROCEDURE CreateWarehouseReceiptFromPurchaseOrderWithMultipleLocation@186();
    VAR
      Item@1000 : Record 27;
      Location1@1001 : Record 14;
      Location2@1006 : Record 14;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1002 : Record 39;
      WarehouseReceiptLine@1005 : Record 7317;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Items. Create and release Sales Order with two lines for different Locations.
      Initialize;
      LibraryWarehouse.CreateLocationWMS(Location1,FALSE,TRUE,FALSE,TRUE,FALSE); // Create location require put-away and receive.
      LibraryWarehouse.CreateLocationWMS(Location2,FALSE,TRUE,FALSE,FALSE,FALSE); // Create location require put-away.
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2); // Taking Random value for Quantity.
      CreateAndReleasePurchaseOrderWithMultipleLocations(
        PurchaseHeader,PurchaseLine,Location1.Code,Location2.Code,Item."No.",Item."No.",Quantity,Quantity,TRUE);

      // Exercise: Create Warehouse Receipt from Purchase Order.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Verify: The first purchase line created Warehouse Receipt Line and the second not.
      VerifyWarehouseReceiptCreated(
        WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Location1.Code,Item."No.",TRUE);
      VerifyWarehouseReceiptCreated(
        WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Location2.Code,Item."No.",FALSE);
    END;

    [Test]
    PROCEDURE CreateWarehouseShipmentFromSalesOrderWithMultipleLocation@90();
    VAR
      Item@1000 : Record 27;
      Location1@1001 : Record 14;
      Location2@1006 : Record 14;
      SalesHeader@1004 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseShipmentLine@1005 : Record 7321;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Items. Create and release Sales Order with two lines for different Locations.
      Initialize;
      LibraryWarehouse.CreateLocationWMS(Location1,FALSE,FALSE,TRUE,FALSE,TRUE); // Create location require pick and shipment.
      LibraryWarehouse.CreateLocationWMS(Location2,FALSE,FALSE,TRUE,FALSE,FALSE); // Create location require pick.
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2); // Taking Random value for Quantity.
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,Location1.Code,Location2.Code,Item."No.",Item."No.",Quantity,Quantity,TRUE,FALSE);

      // Exercise: Create Warehouse Shipment from Sales Order.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify:  The first Sales line created Warehouse Shipment Line and the second not.
      VerifyWarehouseShipmentCreated(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Location1.Code,Item."No.",TRUE);
      VerifyWarehouseShipmentCreated(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Location2.Code,Item."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE CheckAllocationLotInPick@250();
    VAR
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      SalesHeader@1011 : Record 36;
      Delta@1019 : Decimal;
      QuantityToShip@1020 : Decimal;
      QuantityInItemTrackingLines@1021 : Decimal;
      LotNo@1026 : ARRAY [2] OF Code[20];
      QuantityForPartialPick@1001 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Tracking Specification]
      // [SCENARIO 378604] Item Tracking Lines with 2 lots lines should have correct quantities after two partial picks.

      Initialize;
      Delta := LibraryRandom.RandDecInRange(5,20,2);
      QuantityToShip := LibraryRandom.RandDecInDecimalRange(4 * Delta,100,2);
      QuantityInItemTrackingLines := QuantityToShip / 2;
      QuantityForPartialPick[1] := Delta / 2;
      QuantityForPartialPick[2] := Delta / 2;

      // [GIVEN] Create Whse Pick for Lot-Tracked Item, where Quantity=64 in Sales Line, "Quantity to handle"=32 in both Item tracking Lines connected to this Sales Line.
      CreateWarehousePickforLotTrackedItem(SalesHeader,LotNo,LocationWhite.Code,QuantityToShip,QuantityInItemTrackingLines);

      // [GIVEN] Register partial pick for both lots with quantities 8 and 8.
      ChangeQtyToHandleInWarehouseActivityLines(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick,
        QuantityForPartialPick,LotNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // [WHEN] Register partial pick for both lots again with quantities 0 and 16.
      QuantityForPartialPick[1] := 0;
      QuantityForPartialPick[2] := Delta;
      ChangeQtyToHandleInWarehouseActivityLines(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick,
        QuantityForPartialPick,LotNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // [THEN] Item Tracking Lines should have quantities 8 and 24.
      QuantityForPartialPick[1] := -(QuantityForPartialPick[1] + Delta / 2);
      QuantityForPartialPick[2] := -(QuantityForPartialPick[2] + Delta / 2);
      VerifyReservationEntryLine(
        SalesHeader."No.",LotNo[1],QuantityForPartialPick[1],-QuantityInItemTrackingLines - QuantityForPartialPick[1]);
      VerifyReservationEntryLine(
        SalesHeader."No.",LotNo[2],QuantityForPartialPick[2],-QuantityInItemTrackingLines - QuantityForPartialPick[2]);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CheckWareHouseActivityLineWithShippingValues@230();
    VAR
      ShipmentMethod@1000 : Record 10;
      ShippingAgent@1002 : Record 291;
      ShippingAgentServices@1003 : Record 5790;
      ShippingTime@1004 : DateFormula;
    BEGIN
      // Verify that Shipping Agent Code,Shipping Agent Service Code and Shipment method code populated when create Inventory Put-away/Pick from transfer order.
      Initialize;
      ShipmentMethod.FINDFIRST;
      EVALUATE(ShippingTime,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
      CreateShippingAgentWithServices(ShippingAgent,ShippingAgentServices,ShippingTime,1);
      ShippingValuesInWarehouseActivityLine(ShipmentMethod.Code,ShippingAgent.Code,ShippingAgentServices.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CheckWareHouseActivityLineWithOutShippingValues@232();
    BEGIN
      // Verify that Shipping Agent Code,Shipping Agent Service Code and Shipment method code does not populated when create Inventory Put-away/Pick from transfer order.
      Initialize;
      ShippingValuesInWarehouseActivityLine('','',''); // All Shipping Values Blank.
    END;

    [Test]
    PROCEDURE CheckInventoryErrorOnTransferOrder@201();
    VAR
      Location@1000 : Record 14;
      Item@1003 : Record 27;
      TransferHeader@1001 : Record 5740;
      Quantity@1007 : Decimal;
    BEGIN
      // Verify inventory error when posting transfer shipment.

      // Setup: Create and post sales and purchase order.Create and release transfer order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateAndPostPurchaseOrder(Location,LibraryInventory.CreateItem(Item),Quantity);
      CreateAndPostSalesOrder(Location.Code,Item."No.",Quantity);
      CreateAndReleaseTransferOrder(TransferHeader,Location.Code,LocationRed.Code,Item."No.",Quantity,FALSE);

      // Exercise: Post transfer order as ship.
      ASSERTERROR LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verifying inventory error.
      Assert.ExpectedError(STRSUBSTNO(ItemInventoryInErr,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckPostingOnTransferOrder@214();
    VAR
      Location@1001 : Record 14;
      Item@1003 : Record 27;
      TransferHeader@1009 : Record 5740;
      TransferShipmentHeader@1002 : Record 5744;
      PostedShipmentNo@1005 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Verify transfer shipment posted successfully with undo sales shipment.

      // Setup: Create and post sales and purchase order and undo sales shipment.Create and release transfer order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateAndPostPurchaseOrder(Location,LibraryInventory.CreateItem(Item),Quantity);
      PostedShipmentNo := CreateAndPostSalesOrder(Location.Code,Item."No.",Quantity);
      UndoSalesShipment(PostedShipmentNo,Item."No.");
      CreateAndReleaseTransferOrder(TransferHeader,Location.Code,LocationRed.Code,Item."No.",Quantity,FALSE);

      // Exercise: Post transfer order as ship.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verifying that transfer shipment header exist.
      TransferShipmentHeader.GET(TransferHeader."Last Shipment No.")
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForUndoPosetReceipt)]
    PROCEDURE CheckErrorOnTransferOrderWithUndoShipmentAndUndoReceipt@261();
    VAR
      Location@1008 : Record 14;
      Item@1005 : Record 27;
      TransferHeader@1001 : Record 5740;
      PurchRcptLine@1012 : Record 121;
      Quantity@1000 : Decimal;
      PostedReceiptNo@1009 : Code[20];
      PostedShipmentNo@1010 : Code[20];
    BEGIN
      // Verify remaining quantity error with undo shipment and with undo receipt.

      // Setup: Create and post sales and purchase order and undo sales shipment.Create and release transfer order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      PostedReceiptNo := CreateAndPostPurchaseOrder(Location,LibraryInventory.CreateItem(Item),Quantity);
      PostedShipmentNo := CreateAndPostSalesOrder(Location.Code,Item."No.",Quantity);
      UndoSalesShipment(PostedShipmentNo,Item."No.");
      CreateAndReleaseTransferOrder(TransferHeader,Location.Code,LocationRed.Code,Item."No.",Quantity,FALSE);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Exercise: Undo purchase recept line.
      PurchRcptLine.SETRANGE("Document No.",PostedReceiptNo);
      ASSERTERROR LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // Verify: Verifying remaining quanitity error.
      Assert.ExpectedError(STRSUBSTNO(RemainingQuantityErr,PurchRcptLine.Quantity));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckInventoryErrorOnTransferOrderWithUndoShipment@233();
    VAR
      Location@1007 : Record 14;
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      Item@1003 : Record 27;
      TransferHeader@1008 : Record 5740;
      Quantity@1004 : Decimal;
      PostedShipmentNo@1005 : Code[20];
    BEGIN
      // Verify inventory error with undo shipment and with posting transfer shipment.

      // Setup: Create and post sales and purchase order and undo sales shipment.Create and release transfer order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      LibrarySales.CreateCustomer(Customer);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesLine."Document Type"::Order,
        Customer."No.",Location.Code,LibraryInventory.CreateItem(Item),Quantity);
      PostedShipmentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      UndoSalesShipment(PostedShipmentNo,Item."No.");
      CreateAndReleaseTransferOrder(TransferHeader,Location.Code,LocationRed.Code,Item."No.",Quantity,FALSE);

      // Exercise: Post transfer order as ship.
      ASSERTERROR LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verifying inventory error.
      Assert.ExpectedError(STRSUBSTNO(ItemInventoryInErr,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CheckInventoryErrorOnTransferOrderMultipleLinesWithUndoShipment@240();
    VAR
      ItemX@1003 : Record 27;
      ItemY@1006 : Record 27;
      TransferHeader@1008 : Record 5740;
      Quantity@1004 : Decimal;
      PostedShipmentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Undo Shipment] [Transfer Order]
      // [SCENARIO 362491] Verify inventory error with Undo Shipment and Posting Transfer Order for multiple lines
      Initialize;

      // [GIVEN] Item "X" with Inventory and Item "Y" without Inventory
      Quantity := LibraryRandom.RandInt(10);
      LibraryInventory.CreateItem(ItemX);
      CreateAndPostItemJournalLine(ItemX."No.",Quantity + 1,LocationOrange.Code,'',FALSE);
      LibraryInventory.CreateItem(ItemY);

      // [GIVEN] Create and post Sales Order for both Items "X" and "Y"
      PostedShipmentNo := CreateAndPostSalesOrderWithTwoLines(ItemX."No.",ItemY."No.",LocationOrange.Code,Quantity);

      // [GIVEN] Undo Sales Shipment for Item "Y"
      UndoSalesShipment(PostedShipmentNo,ItemY."No.");

      // [GIVEN] Create and release Transfer Order for "X" and "Y"
      CreateAndReleaseTransferOrderWithTwoLines(
        TransferHeader,LocationOrange.Code,LocationRed.Code,ItemX."No.",ItemY."No.",Quantity);

      // [WHEN] Post Transfer Order as Ship
      ASSERTERROR LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // [THEN] Verifying inventory error
      Assert.ExpectedError(STRSUBSTNO(ItemInventoryInErr,ItemY."No."));
    END;

    LOCAL PROCEDURE FindBinsAndSetLocationParemeters@269(VAR Bin@1001 : ARRAY [3] OF Record 7354;VAR Location@1002 : Record 14);
    VAR
      WarehouseEmployee@1000 : Record 7301;
      ShipmentBin@1003 : Record 7354;
    BEGIN
      LibraryWarehouse.FindBin(ShipmentBin,Location.Code,'',4);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      WITH Location DO BEGIN
        VALIDATE("Require Shipment",TRUE);
        VALIDATE("Shipment Bin Code",ShipmentBin.Code);
        MODIFY(TRUE);
        LibraryWarehouse.FindBin(Bin[1],Code,'',1);
        LibraryWarehouse.FindBin(Bin[2],Code,'',2);
        LibraryWarehouse.CreateBin(Bin[3],Code,LibraryUtility.GenerateGUID,'','');
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE QtyToShipInTransferOrderAfterInvPick@300();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      TransferHeaderNo@1003 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      // Setup and Exercise: Create 2 items, update the inventory for the Item1, create Transfer Order, create Inventory Pick
      Quantity := LibraryRandom.RandDecInRange(3,10,2);
      TransferHeaderNo :=
        CreateAndPostInvPickFromTransferOrderForTwoItems(
          LibraryInventory.CreateItem(Item),LibraryInventory.CreateItem(Item2),Quantity,0,Quantity);

      // Verify: Qty. to Ship is correct in Transfer Order for Item2
      // Inventory Pick is not created for Item2 because there is no Item2 in Inventory,
      // So now, for Item2, Qty. to Ship = Quantity, Quantity Shipped = 0
      VerifyTransferOrderLine(TransferHeaderNo,Item2."No.",Quantity,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE QtyToReceiveInTransferOrderAfterInvPutaway@207();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      TransferHeaderNo@1003 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create 2 items, update the inventory for the Item1 and Item2, create Transfer Order, create Inventory Pick
      Quantity := LibraryRandom.RandDecInRange(3,10,2);
      TransferHeaderNo :=
        CreateAndPostInvPickFromTransferOrderForTwoItems(
          LibraryInventory.CreateItem(Item),LibraryInventory.CreateItem(Item2),Quantity,Quantity,Quantity);

      // Update the Qty to Receive in the Transfer Order for Item2
      UpdateTransferOrderLineForQtyToReceive(TransferHeaderNo,Item2."No.",0);

      // Exercise: Create and Post Inventory Put Away from Transfer Order.
      CreateAndPostInvPutAwayFromTransferOrder(TransferHeaderNo);

      // Verify: Qty. to Receive is correct in Transfer Order for Item2
      // Inventory Put-away is not created for Item2 because we updated the Qty. to Receive = 0 before create Inv. Put-away
      // So now, for Item2, Qty. to Ship = Quantity, Quantity Shipped = 0
      VerifyTransferOrderLineForQtyToReceive(TransferHeaderNo,Item2."No.",Quantity,0);
    END;

    [Test]
    PROCEDURE DimensionPopulatedOnTransferOrderLine@290();
    VAR
      Item@1005 : Record 27;
      TransferHeader@1004 : Record 5740;
      TransferLine@1003 : Record 5741;
      DimensionValue@1001 : ARRAY [2] OF Record 349;
      Quantity@1009 : Decimal;
    BEGIN
      // Setup: Create Item and update the inventory.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2); // Taking Random value for Quantity.
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationBlue.Code,'',FALSE); // Taking Blank for Bin Code and false for Item Tracking.

      // Create a Transfer Header and set the Dimension Value
      CreateTransferHeaderAndUpdateDimension(TransferHeader,DimensionValue);

      // Exercise: Update the Item No. and Quantity in Transfer Line
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",Quantity);

      // Verify: Dimension Code is filled in transfer line
      TransferLine.TESTFIELD("Shortcut Dimension 1 Code",DimensionValue[1].Code);
      TransferLine.TESTFIELD("Shortcut Dimension 2 Code",DimensionValue[2].Code);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingEditSeveralLinesLOT)]
    PROCEDURE RegisterTwoPickLinesWithSpecificQtyAndChangedLOT@225();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1007 : Record 37;
      Item@1001 : Record 27;
      WhseActivityLine@1009 : Record 5767;
      OrderQuantity@1008 : Decimal;
      QtyPerLOT@1002 : ARRAY [2] OF Decimal;
      AutoReserveLotNo@1004 : ARRAY [2] OF Code[20];
      NewPickLineQty@1003 : ARRAY [2] OF Decimal;
      NewLotNo@1010 : ARRAY [2] OF Code[20];
      i@1006 : Integer;
    BEGIN
      // Verify Reservation Entries after register pick lines with changing LOT and pick line's qty
      Initialize;
      OrderQuantity := 9; // Sales Order Item Qty
      QtyPerLOT[1] := 5; // Invt. Positive Adj. for 20 Qty: 5 Qty for each LOT
      QtyPerLOT[2] := 1; // Invt. Positive Adj. for 4 Qty: 1 Qty for each LOT
      NewPickLineQty[1] := 6; // new Pick Line1 Qty
      NewPickLineQty[2] := 3; // new Pick Line2 Qty
      AutoReserveLotNo[1] := STRSUBSTNO(LotNoTxt,1);
      AutoReserveLotNo[2] := STRSUBSTNO(LotNoTxt,2);
      NewLotNo[1] := STRSUBSTNO(LotNoTxt,3);
      NewLotNo[2] := STRSUBSTNO(LotNoTxt,4);

      CreateItemWithLOTAndAutoReserve(Item);

      FOR i := 1 TO ARRAYLEN(QtyPerLOT) DO BEGIN
        CreatePostPositiveInvtAdjWithSeveralLOTs(Item,AutoReserveLotNo,QtyPerLOT[i]);
        CreatePostPositiveInvtAdjWithSeveralLOTs(Item,NewLotNo,QtyPerLOT[i]);
      END;
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationWhite2.Code,'',Item."No.",'',OrderQuantity,0,FALSE,FALSE);
      SalesLine.AutoReserve;

      // Verify auto reserve status: 5 Qty for 'L01' LOT; 4 Qty for 'L02' LOT
      VerifyReservEntryLineExist(LocationWhite2.Code,Item."No.",AutoReserveLotNo[1],5);
      VerifyReservEntryLineExist(LocationWhite2.Code,Item."No.",AutoReserveLotNo[2],4);

      CreatePickFromWhseShipment(SalesHeader);

      // Change pick lines LOTs to following:
      // pick line1: 6 Qty for 'L03' LOT
      // pick line2: 3 Qty for 'L04' LOT
      SplitWhseActivityLines(SalesHeader."No.",NewPickLineQty);
      FOR i := 1 TO ARRAYLEN(NewPickLineQty) DO
        UpdatePickLinesLot(SalesHeader."No.",NewPickLineQty[i],NewLotNo[i]);
      RegisterWarehouseActivity(
        WhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WhseActivityLine."Activity Type"::Pick);

      // Reserve status should be: 5 Qty for 'L03' LOT; 1 Qty for 'L03' LOT; 3 Qty for 'L04' LOT
      VerifyReservEntryLineExist(LocationWhite2.Code,Item."No.",NewLotNo[1],5);
      VerifyReservEntryLineExist(LocationWhite2.Code,Item."No.",NewLotNo[1],1);
      VerifyReservEntryLineExist(LocationWhite2.Code,Item."No.",NewLotNo[2],3);
    END;

    [Test]
    PROCEDURE CheckPostedTransferShipmentPostingDate@263();
    VAR
      TransferHeader@1000 : Record 5740;
      WarehouseShipmentHeader@1004 : Record 7320;
      TransferShipmentHeader@1001 : Record 5744;
    BEGIN
      // [FEATURE] [Posting Date] [Transfer Order] [Warehouse Shipment]
      // [SCENARIO 372023] Posting date is updated in Posted Transfer Shipment if the Posting Date of the Whse. Shipment is less than the Posting Date of the Transfer Order
      Initialize;

      SetRequirePickOnLocation(LocationBlue,FALSE);

      // [GIVEN] Transfer Order "TO" with Posting Date = "X"
      CreateAndReleaseTransferOrderWithPostingDate(TransferHeader);

      // [GIVEN] Warehouse Shipment "WS" for "TO" with Posting Date = "Y", "Y" < "X"
      CreateWarehouseShipmentFromTransferOrderWithPostingDate(WarehouseShipmentHeader,TransferHeader);

      // [WHEN] Post "WS"
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Posted Transfer Shipment is created with Posting Date = "Y"
      WITH TransferShipmentHeader DO BEGIN
        SETRANGE("Transfer Order No.",TransferHeader."No.");
        FINDFIRST;
        TESTFIELD("Posting Date",WarehouseShipmentHeader."Posting Date");
      END;

      // Tear Down
      SetRequirePickOnLocation(LocationBlue,TRUE);
    END;

    [Test]
    PROCEDURE CheckPostedSalesShipmentPostingDate@242();
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      SalesShipmentHeader@1007 : Record 110;
    BEGIN
      // [FEATURE] [Posting Date] [Sales Order] [Warehouse Shipment]
      // [SCENARIO 372023] Posting date is updated in Posted Sales Shipment if the Posting Date of the Whse. Shipment is less than the Posting Date of the Sales Order
      Initialize;

      SetRequirePickOnLocation(LocationBlue,FALSE);

      // [GIVEN] Sales Order "SO" with Posting Date = "X"
      CreateAndReleaseSalesOrderWithPostingDate(SalesHeader,SalesHeader."Document Type"::Order,LocationBlue.Code);

      // [GIVEN] Warehouse Shipment "WS" for "SO" with Posting Date = "Y", "Y" < "X"
      CreateWarehouseShipmentFromSOWithPostingDate(WarehouseShipmentHeader,SalesHeader);

      // [WHEN] Post "WS"
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Posted Sales Shipment is created with Posting Date = "Y"
      WITH SalesShipmentHeader DO BEGIN
        SETRANGE("Order No.",SalesHeader."No.");
        FINDFIRST;
        TESTFIELD("Posting Date",WarehouseShipmentHeader."Posting Date");
      END;

      // Tear Down
      SetRequirePickOnLocation(LocationBlue,TRUE);
    END;

    [Test]
    PROCEDURE CheckPostedReturnShipmentPostingDate@243();
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseShipmentHeader@1004 : Record 7320;
      ReturnShipmentHeader@1001 : Record 6650;
    BEGIN
      // [FEATURE] [Posting Date] [Purchase Return Order] [Warehouse Shipment]
      // [SCENARIO 372023] Posting date is updated in Posted Return Shipment if the Posting Date of the Whse. Shipment is less than the Posting Date of the Purchase Return Order
      Initialize;

      SetRequirePickOnLocation(LocationBlue,FALSE);

      // [GIVEN] Purchase Return Order "PRO" with Posting Date = "X"
      CreateAndReleasePurchaseOrderWithPostingDate(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",LocationBlue.Code);

      // [GIVEN] Warehouse Shipment "WS" for "PRO" with Posting Date = "Y", "Y" < "X"
      CreateWarehouseShipmentFromPurchReturnOrderWithPostingDate(WarehouseShipmentHeader,PurchaseHeader);

      // [WHEN] Post "WS"
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Posted Return Shipment is created with Posting Date = "Y"
      WITH ReturnShipmentHeader DO BEGIN
        SETRANGE("Return Order No.",PurchaseHeader."No.");
        FINDFIRST;
        TESTFIELD("Posting Date",WarehouseShipmentHeader."Posting Date");
      END;

      // Tear Down
      SetRequirePickOnLocation(LocationBlue,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoPostedSalesShipmentForPickedItem@10();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesShipmentLine@1008 : Record 111;
      WarehouseShipmentLine@1006 : Record 7321;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseActivityHeader@1011 : Record 5766;
      Bin@1001 : Record 7354;
      Qty@1004 : Decimal;
    BEGIN
      // [FEATURE] [Undo Shipment] [Warehouse Pick]
      // [SCENARIO 380265] Undo Sales Shipment for partially picked Item sets "Qty. Shipped" and "Qty. Shipped (Base)" in Warehouse Shipment Line to zero.

      Initialize;

      // [GIVEN] Item is on hand in Warehouse Location.
      LibraryInventory.CreateItem(Item);
      Qty := 4 * LibraryRandom.RandIntInRange(10,20);
      FindBinWithBinTypeCode(Bin,LocationWhite2.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,Item,Qty,'',Item."Base Unit of Measure",FALSE);

      // [GIVEN] Create Sales Order, release, create Warehouse Shipment, create Pick, then pick partially, register and delete pick.
      CreatePickFromSalesOrder(SalesHeader,LocationWhite2.Code,Item."No.",Qty / 2,FALSE);
      WITH WarehouseActivityLine DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,"Source Document"::"Sales Order",SalesHeader."No.","Activity Type"::Pick);

        IF FINDSET THEN
          REPEAT
            VALIDATE("Qty. to Handle",Qty / 4);
            MODIFY;
          UNTIL NEXT = 0;

        WarehouseActivityHeader.GET("Activity Type","No.");
        LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
        DeletePick("Source Document"::"Sales Order",SalesHeader."No.");
      END;

      // [GIVEN] Post Warehouse Shipment as Ship.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // [WHEN] Undo Sales Shipment.
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmMsg);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(UndoPickedShipmentConfirmMsg);  // Enqueue for ConfirmHandler.
      SalesShipmentLine.SETRANGE("Order No.",SalesHeader."No.");
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);

      // [THEN] For Warehouse Shipment Line: "Qty. Shipped" and "Qty. Shipped (Base)" equals to 0.
      WITH WarehouseShipmentLine DO BEGIN
        FindWarehouseShipmentLine(WarehouseShipmentLine,"Source Document"::"Sales Order",SalesHeader."No.");
        TESTFIELD("Qty. Shipped",0);
        TESTFIELD("Qty. Shipped (Base)",0);
      END;
    END;

    [Test]
    PROCEDURE ShippingAgentServicesAreDeletedOnShippingAgentDeletion@34();
    VAR
      ShippingAgent@1000 : Record 291;
      ShippingAgentServices@1001 : Record 5790;
      PeriodLength@1002 : DateFormula;
    BEGIN
      // [FEATURE] [Shipping Agent]
      // [SCENARIO 380407] Shipping Agent Services are deleted on Shipping Agent deletion.
      Initialize;

      // [GIVEN] Shipping Agent with several Shipping Agent Services.
      EVALUATE(PeriodLength,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
      CreateShippingAgentWithServices(ShippingAgent,ShippingAgentServices,PeriodLength,LibraryRandom.RandInt(10));

      // [WHEN] Delete the Shipping Agent.
      ShippingAgent.DELETE(TRUE);

      // [THEN] Shipping Agent Services for the Shipping Agent are deleted.
      ShippingAgentServices.SETRANGE("Shipping Agent Code",ShippingAgent.Code);
      Assert.RecordIsEmpty(ShippingAgentServices);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoSalesShipmentForShipmentLinesWithQuantityZero@251();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesShipmentLine@1003 : Record 111;
      PostedShipmentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Undo Shipment]
      // [SCENARIO 378965] Undo Sales Shipment Job should not consider Shipment Lines with Quantity = 0
      Initialize;

      // [GIVEN] Sales Order with two Lines: "L1" and "L2"
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // [GIVEN] Set "Qty. to Ship" on "L2" to 0
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Post Shipment for Sales Order
      PostedShipmentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [WHEN] Undo Shipment
      UndoSalesShipment(PostedShipmentNo,Item."No.");

      // [THEN] Sales Shipment Line "L2" is not considered for Undo Job
      SalesShipmentLine.SETRANGE("No.",Item."No.");
      SalesShipmentLine.SETRANGE(Quantity,0);
      Assert.AreEqual(1,SalesShipmentLine.COUNT,UndoSalesShipmentErr);
    END;

    [Test]
    PROCEDURE WarehouseShipmentExternalDocumentNoIsEqualToSalesHeaderExternalDocumentNo@73();
    VAR
      SalesHeader@1003 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      ExternalDocumentNo@1000 : Code[35];
      ExternalDocumentNoLength@1005 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Shipment]
      // [SCENARIO 380429] "External Document No." in Warehouse Shipment must be same as in Source Sales Order
      Initialize;

      // [GIVEN] Sales Order with not blank "External Document No."
      ExternalDocumentNoLength := MAXSTRLEN(SalesHeader."External Document No.");
      ExternalDocumentNo := COPYSTR(LibraryUtility.GenerateRandomText(ExternalDocumentNoLength),1,ExternalDocumentNoLength);
      CreateAndReleaseSalesOrderWithExternalDocumentNo(SalesHeader,LocationGreen.Code,ExternalDocumentNo);

      // [WHEN] Create Warehouse Shipment for this Sales Order
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [THEN] "External Document No." in Warehouse Shipment must be same
      FindWarehouseShipmentHeaderBySalesHeader(WarehouseShipmentHeader,SalesHeader);
      Assert.AreEqual(ExternalDocumentNo,WarehouseShipmentHeader."External Document No.",WhsShpmtHeaderExternalDocumentNoIsWrongErr);
    END;

    [Test]
    PROCEDURE WarehouseShipmentExternalDocumentNoIsEqualToPurchaseHeaderVendorShipmentNo@296();
    VAR
      PurchaseHeader@1003 : Record 38;
      WarehouseShipmentHeader@1004 : Record 7320;
      ExternalDocumentNo@1000 : Code[35];
      ExternalDocumentNoLength@1005 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Shipment]
      // [SCENARIO 380429] "External Document No." in Warehouse Shipment must be same as "Vendor Shipment No." of Source Purchase Return Order
      Initialize;

      // [GIVEN] Purchase Return Order with not blank "Vendor Shipment No."
      ExternalDocumentNoLength := MAXSTRLEN(PurchaseHeader."Vendor Shipment No.");
      ExternalDocumentNo := COPYSTR(LibraryUtility.GenerateRandomText(ExternalDocumentNoLength),1,ExternalDocumentNoLength);
      CreateAndReleasePurchaseReturnOrderWithVendorShipmentNo(PurchaseHeader,LocationGreen.Code,ExternalDocumentNo);

      // [WHEN] Create Warehouse Shipment for this Purchase Return Order
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);

      // [THEN] "External Document No." in Warehouse Shipment must be same as "Vendor Shipment No." of Source Purchase Return Order
      FindWarehouseShipmentHeaderByPurchaseHeader(WarehouseShipmentHeader,PurchaseHeader);
      Assert.AreEqual(ExternalDocumentNo,WarehouseShipmentHeader."External Document No.",WhsShpmtHeaderExternalDocumentNoIsWrongErr);
    END;

    [Test]
    PROCEDURE WarehouseShipmentExternalDocumentNoIsEqualToTransferHeaderExternalDocumentNo@315();
    VAR
      TransferHeader@1003 : Record 5740;
      WarehouseShipmentHeader@1004 : Record 7320;
      ExternalDocumentNo@1000 : Code[35];
      ExternalDocumentNoLength@1005 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Shipment]
      // [SCENARIO 380429] "External Document No." in Warehouse Shipment must be same as in Source Transfer Order
      Initialize;

      // [GIVEN] Transfer Order with not blank "External Document No."
      ExternalDocumentNoLength := MAXSTRLEN(TransferHeader."External Document No.");
      ExternalDocumentNo := COPYSTR(LibraryUtility.GenerateRandomText(ExternalDocumentNoLength),1,ExternalDocumentNoLength);
      CreateAndReleaseTransferOrderWithExternalDocumentNo(TransferHeader,LocationGreen.Code,LocationWhite.Code,ExternalDocumentNo);

      // [WHEN] Create Warehouse Shipment for this Transfer Order
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);

      // [THEN] "External Document No." in Warehouse Shipment must be same as "External Document No." of Transfer Order
      FindWarehouseShipmentHeaderByTransferHeader(WarehouseShipmentHeader,TransferHeader);
      Assert.AreEqual(ExternalDocumentNo,WarehouseShipmentHeader."External Document No.",WhsShpmtHeaderExternalDocumentNoIsWrongErr);
    END;

    [Test]
    PROCEDURE WarehouseReceiptVendorShipmentNoIsEqualToPurchaseHeaderVendorShipmentNo@260();
    VAR
      PurchaseHeader@1003 : Record 38;
      WarehouseReceiptHeader@1004 : Record 7316;
      VendorShipmentNo@1000 : Code[35];
      ExternalDocumentNoLength@1005 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Receipt]
      // [SCENARIO 380429] "Vendor Shipment No." in Warehouse Receipt must be the same as in source Purchase Order
      Initialize;

      // [GIVEN] Purchase Order with not blank "Vendor Shipment No."
      ExternalDocumentNoLength := MAXSTRLEN(PurchaseHeader."Vendor Shipment No.");
      VendorShipmentNo := COPYSTR(LibraryUtility.GenerateRandomText(ExternalDocumentNoLength),1,ExternalDocumentNoLength);
      CreateAndReleasePurchaseOrderWithVendorShipmentNo(PurchaseHeader,LocationGreen.Code,VendorShipmentNo);

      // [WHEN] Create Warehouse Receipt for this Purchase Order
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // [THEN] "Vendor Shipment No." in Warehouse Receipt must be the same as in source Purchase Order
      FindWarehouseReceiptHeaderByPurchaseHeader(WarehouseReceiptHeader,PurchaseHeader);
      Assert.AreEqual(VendorShipmentNo,WarehouseReceiptHeader."Vendor Shipment No.",WhsRcptHeaderVendorShpmntNoIsWrongErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,GetShipmentLinesPageHandler)]
    PROCEDURE PartiallyPostedShipmentCanBeCompletedIfInvoiceForShippedQtyIsCreatedWithSameLot@264();
    VAR
      Item@1002 : Record 27;
      SalesHeaderOrder@1004 : Record 36;
      WarehouseShipmentLine@1005 : Record 7321;
      LotNo@1000 : Code[20];
      Qty@1003 : Decimal;
      ShipQty@1008 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Warehouse Shipment] [Sales Invoice]
      // [SCENARIO 382336] Available quantity to ship of a given lot should not be reduced by outstanding tracked sales invoice for previously shipped quantity.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);

      // [GIVEN] Location with required shipment.
      // [GIVEN] Sales Order for "X" units of the item. Lot No. = "L".
      // [GIVEN] Sales Order is partially shipped. Shipped quantity = "Y" < "X".
      Qty := LibraryRandom.RandIntInRange(20,30);
      ShipQty := LibraryRandom.RandInt(10);
      CreateAndPartiallyPostSalesShipmentForLotTrackedItem(SalesHeaderOrder,LotNo,Item."No.",Qty,ShipQty);

      // [GIVEN] Sales invoice for the shipped "Y" units.
      CreateSalesInvoiceForPostedShipment(SalesHeaderOrder);

      // [GIVEN] Item tracking lines page for the partially posted warehouse shipment is opened.
      // [GIVEN] Available quantity to ship is updated by viewing the item tracking summary for lot "L".
      SelectAvailableLotOnWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeaderOrder."No.",Qty);

      // [WHEN] Ship the remaining ("X" - "Y") quantity.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeaderOrder."No.");

      // [THEN] The sales order is completely shipped.
      WITH SalesHeaderOrder DO BEGIN
        FIND;
        CALCFIELDS("Completely Shipped");
        TESTFIELD("Completely Shipped",TRUE);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE PartiallyPostedShipmentShouldConsiderUnrelatedDemandWithSameLot@266();
    VAR
      Item@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseShipmentLine@1002 : Record 7321;
      LotNo@1008 : Code[20];
      Qty@1001 : Decimal;
      ShipQty@1000 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Warehouse Shipment]
      // [SCENARIO 382336] Available quantity to ship of a given lot should be reduced by other invoice if it has same lot tracking and does not relate to previously shipped quantity.
      Initialize;
      UpdateShipmentPostingPolicyOnWarehouseSetup;

      // [GIVEN] Lot-tracked Item.
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);

      // [GIVEN] Location with required shipment.
      // [GIVEN] Sales Order for "X" units of the item. Lot No. = "L".
      // [GIVEN] Sales Order is partially shipped. Shipped quantity = "Y" < "X".
      Qty := LibraryRandom.RandIntInRange(20,30);
      ShipQty := LibraryRandom.RandInt(10);
      CreateAndPartiallyPostSalesShipmentForLotTrackedItem(SalesHeader,LotNo,Item."No.",Qty,ShipQty);

      FindSalesLine(SalesLine,SalesHeader);
      CreateSalesInvoiceWithLotTracking(SalesLine."Sell-to Customer No.",SalesLine."Location Code",Item."No.",LotNo,ShipQty);

      // [GIVEN] Item tracking lines page for the partially posted warehouse shipment is opened.
      // [GIVEN] Available quantity to ship is updated by viewing the item tracking summary for lot "L".
      SelectAvailableLotOnWarehouseShipmentLine(
        WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Qty);

      // [WHEN] Ship the remaining ("X" - "Y") quantity.
      ASSERTERROR PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // [THEN] Error is raised reading that some of being shipped quantity is not tracked.
      Assert.ExpectedError(
        STRSUBSTNO(
          WrongQtyToHandleInTrackingSpecErr,
          Item."No.",'',LotNo,Qty - ShipQty * 2,Qty - ShipQty));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoShipmentCreatesValueEntryWithCurrentUserId@1000();
    VAR
      Item@1000 : Record 27;
      PostedShipmentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Undo Shipment]
      // [SCENARIO 203164] "User ID" field on corrective Value Entry created by Undo Shipment procedure should be populated with USERID of the current user.
      Initialize;

      // [GIVEN] Posted sales shipment.
      LibraryInventory.CreateItem(Item);
      PostedShipmentNo := CreateAndPostSalesOrder('',Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] "User ID" is changed from USERID to "XXX" on Value Entry representing the shipment.
      UpdateValueEntryUserID(Item."No.");

      // [WHEN] Undo the shipment.
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmMsg);
      UndoSalesShipment(PostedShipmentNo,Item."No.");

      // [THEN] New Value Entry related to the reversed shipment has "User ID" = USERID.
      VerifyValueEntryUserID(Item."No.",USERID);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      CreateTransferRoute;
      WarehouseJournalSetup(LocationWhite.Code);
      ConsumptionJournalSetup;
      OutputJournalSetup;

      LibrarySetupStorage.Save(DATABASE::"Warehouse Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      WarehouseSetup@1002 : Record 5769;
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@39();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",'');  // Blank value required for the test.
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
      CreateFullWarehouseSetup(LocationWhite2);  // Location: White2.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite2.Code,FALSE);
      CreateFullWarehouseSetup(LocationWhite3);  // Location: White3.
      LibraryWarehouse.CreateLocationWMS(LocationGreen,FALSE,TRUE,TRUE,TRUE,TRUE);  // Location Green with Require Put Away,Pick,Receive and Shipment.
      LibraryWarehouse.CreateLocationWMS(LocationGreen2,FALSE,TRUE,TRUE,TRUE,TRUE);  // Location Green2 with Require Put Away,Pick,Receive and Shipment.
      LibraryWarehouse.CreateLocationWMS(LocationOrange,FALSE,TRUE,TRUE,FALSE,FALSE);  // Location Orange with Require Put Away and Require Pick.
      LibraryWarehouse.CreateLocationWMS(LocationOrange2,FALSE,TRUE,TRUE,FALSE,FALSE);  // Location Orange2 with Require Put Away and Require Pick.
      LibraryWarehouse.CreateLocationWMS(LocationOrange3,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location Orange3.
      LibraryWarehouse.CreateNumberOfBins(LocationOrange3.Code,'','',2,FALSE);  // Value required for No. of Bins.
      LibraryWarehouse.CreateLocationWMS(LocationSilver,TRUE,FALSE,TRUE,FALSE,FALSE);  // Location Silver with Require Pick and Bin Mandatory.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value required.
      LibraryWarehouse.CreateLocationWMS(LocationSilver2,TRUE,FALSE,TRUE,FALSE,TRUE);  // Location Silver with Require Shipment, Require Pick and Bin Mandatory.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver2.Code,'','',2,FALSE);  // Value required for No. of Bins.
      LibraryWarehouse.CreateLocationWMS(LocationSilver3,TRUE,FALSE,FALSE,FALSE,FALSE);  // Location Silver3 with Bin Mandatory.
      LibraryWarehouse.CreateLocationWMS(LocationRed,FALSE,FALSE,TRUE,FALSE,TRUE);  // Location Red with Require Pick and Require Shipment.
      LibraryWarehouse.CreateLocationWMS(LocationBlue,FALSE,FALSE,TRUE,FALSE,TRUE);  // Location Blue with Require Pick and Require Shipment.
      LibraryWarehouse.CreateLocationWMS(LocationWithRequirePick,FALSE,FALSE,TRUE,FALSE,FALSE);  // Location with Require Pick.
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);  // Location: Location In Transit.
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@226();
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch2,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE OutputJournalSetup@32();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate2,ItemJournalTemplate2.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch3,ItemJournalTemplate2.Type,ItemJournalTemplate2.Name);
    END;

    LOCAL PROCEDURE RegisterPickFromProdOrderWithLotNo@222(VAR ComponentItem@1001 : Record 27);
    VAR
      Bin@1003 : Record 7354;
      ParentItem@1002 : Record 27;
      Quantity@1004 : Decimal;
    BEGIN
      CreateProdItemWithComponentWithTrackingAndReorderingPolicy(
        ParentItem,ComponentItem,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode); // Taking Lot No. as True. Taking Blank value for Lot Nos. on Item card.
      Quantity := LibraryRandom.RandInt(10);
      FindBinWithBinTypeCode(Bin,LocationWhite.Code,FALSE,TRUE,TRUE); // Find PICK Bin.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No."); // Enqueue ItemTrackingMode for WhseItemTrackingLinesHandler.
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem,Quantity,'',ComponentItem."Base Unit of Measure",TRUE); // Taking True for Item Tracking.

      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssitEditLotNo); // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);
      CreateAndRegisterPickFromProdOrderWithTrackingForComponent(
        ParentItem."No.",ComponentItem."No.",LocationWhite.Code,Bin.Code,Quantity);
    END;

    LOCAL PROCEDURE AddNewLineInSalesOrder@74(VAR SalesHeader@1000 : Record 36;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE AssignLotNoOnItemTrackingLine@88(VAR ItemTrackingLines@1000 : TestPage 6510;Quantity@1001 : Decimal);
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Dequeue for ItemTrackingPageHandler.
    END;

    LOCAL PROCEDURE AutoFillQtyToHandleOnWhseActivity@63(SourceNo@1002 : Code[20];ActivityType@1001 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,ActivityType);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE ShippingValuesInWarehouseActivityLine@200(ShipmentMethodCode@1006 : Code[10];ShippingAgentCode@1009 : Code[10];ShippingAgentServiceCode@1010 : Code[10]);
    VAR
      Item@1000 : Record 27;
      TransferHeader@1002 : Record 5740;
      WarehouseRequest@1007 : Record 5765;
      WarehouseActivityLine@1008 : Record 5767;
      TransferLine@1003 : Record 5741;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create item and Create and release transfer order with shipping values.
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationWithRequirePick.Code,'',FALSE);
      CreateAndUpdateTransferOrder(
        TransferHeader,TransferLine,ShipmentMethodCode,ShippingAgentCode,ShippingAgentServiceCode,Item."No.",Quantity);

      // Exercise: Create Inventory Put-away/Pick from Transfer Order.
      LibraryVariableStorage.Enqueue(InvPickMsg);
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Outbound Transfer",TransferHeader."No.",FALSE,TRUE);

      // Verify: Verifying Shipping values on Warehouse Activity line.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseRequest."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      VerifyShippingValuesInWarehouseActiityLine(WarehouseActivityLine,TransferHeader,TransferLine);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@91(VAR Location@1004 : Record 14;RequirePutAway@1002 : Boolean;RequirePick@1003 : Boolean;RequireReceive@1001 : Boolean;RequireShipment@1000 : Boolean;BinMandatory@1005 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Require Put-away",RequirePutAway);
      Location.VALIDATE("Require Pick",RequirePick);
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.VALIDATE("Require Shipment",RequireShipment);
      Location."Bin Mandatory" := BinMandatory;
      Location.MODIFY(TRUE);
      LibraryInventory.UpdateInventoryPostingSetup(Location);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@40(ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10];BinCode@1001 : Code[20];ItemTracking@1002 : Boolean);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ItemJournalSetup;
      ItemJournalBatch.VALIDATE("No. Series",'');  // Blank value required for the test.
      ItemJournalBatch.MODIFY(TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      IF ItemTracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Opens Item tracking lines page which is handled in the ItemTrackingPageHandler.
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostInvPickFromTransferOrder@67(TransferHeaderNo@1003 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      LibraryVariableStorage.Enqueue(InvPickMsg);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Outbound Transfer",TransferHeaderNo,FALSE,TRUE);  // Taking True for Pick.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeaderNo,
        WarehouseActivityHeader.Type::"Invt. Pick");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);  // Taking True for posting as Invoice.
    END;

    LOCAL PROCEDURE CreateAndPostInvPickFromTransferOrderForTwoItems@211(ItemNo@1004 : Code[20];ItemNo2@1003 : Code[20];UpdateQtyForItem@1005 : Decimal;UpdateQtyForItem2@1006 : Decimal;TransferQty@1007 : Decimal) : Code[20];
    VAR
      TransferHeader@1000 : Record 5740;
    BEGIN
      Initialize;
      CreateAndPostItemJournalLine(ItemNo,UpdateQtyForItem,LocationOrange.Code,'',FALSE);
      IF UpdateQtyForItem2 <> 0 THEN
        CreateAndPostItemJournalLine(ItemNo2,UpdateQtyForItem2,LocationOrange.Code,'',FALSE);

      // Create and release transfer order
      CreateAndReleaseTransferOrderWithTwoLines(
        TransferHeader,LocationOrange.Code,LocationOrange2.Code,ItemNo,ItemNo2,TransferQty);

      // Create and Post Inventory Pick
      CreateAndPostInvPickFromTransferOrder(TransferHeader."No.");
      EXIT(TransferHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostInvPutAwayFromTransferOrder@52(TransferHeaderNo@1004 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      LibraryVariableStorage.Enqueue(InvPutAwayMsg);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Inbound Transfer",TransferHeaderNo,TRUE,FALSE);  // Taking True for Put Away.
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeletedMsg,TransferHeaderNo));  // Enqueue for MessageHandler.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Inbound Transfer",TransferHeaderNo,
        WarehouseActivityHeader.Type::"Invt. Put-away");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);  // Taking True for posting as Invoice.
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithTwoLines@262(ItemXNo@1003 : Code[20];ItemYNo@1004 : Code[20];LocationCode@1005 : Code[10];Quantity@1006 : Decimal) : Code[20];
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesLine."Document Type"::Order,Customer."No.");
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemXNo,Quantity);
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemYNo,Quantity);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@26(VAR ProductionOrder@1002 : Record 5405;ItemNo@1000 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking@22(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1009 : Record 37;LocationCode@1002 : Code[10];LocationCode2@1007 : Code[10];ItemNo@1004 : Code[20];ItemNo2@1000 : Code[20];Quantity@1003 : Decimal;Quantity2@1005 : Decimal;MultipleLines@1006 : Boolean;ItemTracking@1008 : Boolean);
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',LocationCode,ItemNo,Quantity);
      IF MultipleLines THEN
        CreateSalesLine(SalesHeader,SalesLine,LocationCode2,ItemNo2,Quantity2);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      IF ItemTracking THEN
        SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on single line.
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithMultipleLocations@187(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1009 : Record 39;LocationCode@1002 : Code[10];LocationCode2@1007 : Code[10];ItemNo@1004 : Code[20];ItemNo2@1000 : Code[20];Quantity@1003 : Decimal;Quantity2@1005 : Decimal;MultipleLines@1006 : Boolean);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      IF MultipleLines THEN
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo2,Quantity2);
      PurchaseLine.VALIDATE("Location Code",LocationCode2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleLinesUsingShippingAdvice@42(VAR SalesHeader@1000 : Record 36;ShippingAdvice@1009 : Option;ItemNo@1002 : Code[20];ItemNo2@1005 : Code[20];Quantity@1003 : Decimal;Quantity2@1007 : Decimal;LocationCode@1004 : Code[10];LocationCode2@1008 : Code[10];MultipleLines@1006 : Boolean);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipping Advice",ShippingAdvice);   // Handling the Confirm Dialog.
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,Quantity);
      IF MultipleLines THEN
        CreateSalesLine(SalesHeader,SalesLine,LocationCode2,ItemNo2,Quantity2);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithPostingDate@248(VAR SalesHeader@1002 : Record 36;Type@1004 : Option;LocationCode@1003 : Code[10]);
    BEGIN
      CreateSalesOrderWithPostingDate(SalesHeader,Type,LocationCode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithPostingDate@249(VAR PurchaseHeader@1002 : Record 38;Type@1003 : Option;LocationCode@1004 : Code[10]);
    VAR
      PurchaseLine@1001 : Record 39;
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationCode,'','',LibraryRandom.RandIntInRange(10,100),WORKDATE,LibraryRandom.RandInt(10));
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,Type,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrderWithPostingDate@247(VAR TransferHeader@1002 : Record 5740);
    VAR
      TransferLine@1001 : Record 5741;
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationBlue.Code,'','',LibraryRandom.RandIntInRange(10,100),WORKDATE,LibraryRandom.RandInt(10));
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationWhite.Code,'','',LibraryRandom.RandIntInRange(10,100),WORKDATE,LibraryRandom.RandInt(10));
      LibraryInventory.CreateTransferHeader(TransferHeader,LocationBlue.Code,LocationWhite.Code,LocationInTransit.Code);
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,Item."No.",LibraryRandom.RandIntInRange(2,10));
      TransferLine.VALIDATE("Qty. to Ship",TransferLine.Quantity - 1);
      TransferLine.MODIFY(TRUE);
      LibraryInventory.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesReturnOrder@17(VAR SalesHeader@1005 : Record 36;ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",'',LocationWhite.Code,ItemNo,
        Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromProductionOrder@84(ProductionOrder@1000 : Record 5405;Bin@1001 : Record 7354);
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      ProductionOrder.VALIDATE("Location Code",Bin."Location Code");
      ProductionOrder.VALIDATE("Bin Code",Bin.Code);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      RegisterPickFromProdOrder(ProductionOrder);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromProdOrderWithTrackingForComponent@223(ParentItemNo@1002 : Code[20];ComponentItemNo@1003 : Code[20];LocationCode@1004 : Code[10];BinCode@1001 : Code[20];Quantity@1005 : Decimal);
    VAR
      ProdOrder@1000 : Record 5405;
    BEGIN
      CreateAndRefreshProductionOrder(ProdOrder,ParentItemNo,Quantity,LocationCode,BinCode);
      SelectItemTrackingForProdOrderComponents(ComponentItemNo);
      RegisterPickFromProdOrder(ProdOrder);
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromPurchaseOrderAndPostReceipt@41(VAR PurchaseHeader@1009 : Record 38;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1007 : Decimal;ItemTracking@1003 : Boolean;ItemTrackingMode@1004 : Option;UpdateBinCode@1010 : Boolean);
    VAR
      WarehouseActivityHeader@1006 : Record 5766;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseReceiptLine@1005 : Record 7317;
    BEGIN
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      IF ItemTracking THEN BEGIN
        FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
        LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue for ItemTrackingPageHandler.
        WarehouseReceiptLine.OpenItemTrackingLines;  // Item Tracking Lines page is handled using ItemTrackingLinesHandlerWithSerialNo
      END;
      PostWarehouseReceipt(PurchaseHeader."No.");
      IF UpdateBinCode THEN
        ModifyZoneAndBinCodeOnPutAwayLine(PurchaseHeader."No.",LocationCode);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@66(VAR TransferHeader@1001 : Record 5740;FromLocation@1003 : Code[10];ToLocation@1002 : Code[10];ItemNo@1005 : Code[20];Quantity@1006 : Decimal;ItemTracking@1008 : Boolean);
    VAR
      TransferLine@1000 : Record 5741;
      Direction@1007 : 'Outbound,Inbound';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      IF ItemTracking THEN
        TransferLine.OpenItemTrackingLines(Direction::Outbound);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrderWithTwoLines@203(VAR TransferHeader@1000 : Record 5740;TransferFromCode@1001 : Code[10];TransferToCode@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20];Quantity@1006 : Decimal);
    VAR
      TransferLine@1005 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferFromCode,TransferToCode,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo2,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromSalesOrder@124(SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndReserveProdOrderComponentWithItemTracking@127(ProductionOrder@1002 : Record 5405);
    VAR
      ProdOrderComponent@1001 : Record 5407;
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderComponent.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.SETRANGE("Item No.",ProductionOrder."Source No.");
      ProdOrderLine.FINDFIRST;
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      ProdOrderComponent.VALIDATE("Item No.",ProductionOrder."Source No.");
      ProdOrderComponent.VALIDATE("Quantity per",1);  // Value required for Quantity Per in the test.
      ProdOrderComponent.VALIDATE("Location Code",ProductionOrder."Location Code");
      ProdOrderComponent.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      ProdOrderComponent.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);  // Enqueue for ConfirmHandler.
      ProdOrderComponent.ShowReservation;
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithDifferentPutAwayUOM@133(Item@1006 : Record 27;LocationCode@1002 : Code[10];Quantity@1000 : Decimal);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Unit of Measure Code",Item."Put-away Unit of Measure Code");
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithItemTrackingOnMultipleLines@139(VAR SalesHeader@1000 : Record 36;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1006 : Code[20];Quantity@1004 : Decimal);
    VAR
      SalesLine@1005 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,Quantity);
      CreateSalesLine(SalesHeader,SalesLine2,LocationCode,ItemNo2,Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
      SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on First line.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
      SalesLine2.OpenItemTrackingLines; // Assign Item Tracking on second line.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithDifferentPutAwayUOM@132(VAR SalesHeader@1003 : Record 36;Item@1006 : Record 27;LocationCode@1002 : Code[10];Quantity@1000 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',LocationCode,Item."No.",Quantity);
      SalesLine.VALIDATE("Unit of Measure Code",Item."Put-away Unit of Measure Code");
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithTrackingOnMultipleLines@118(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;ItemNo2@1004 : Code[20];LocationCode@1005 : Code[10]);
    VAR
      PurchaseLine@1006 : Record 39;
      Variant@1009 : Variant;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithTracking(PurchaseLine,PurchaseHeader,ItemNo,Quantity,LocationCode,ItemTrackingMode::"Assign Serial No.");
      CreatePurchaseLineWithTracking(PurchaseLine,PurchaseHeader,ItemNo2,Quantity,LocationCode,ItemTrackingMode::"Assign Lot No.");
      LibraryVariableStorage.Dequeue(Variant);  // Dequeue for ItemTrackingPageHandler.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithExternalDocumentNo@259(VAR SalesHeader@1002 : Record 36;LocationCode@1001 : Code[10];ExternalDocumentNo@1000 : Code[35]);
    BEGIN
      CreateSalesOrderWithExternalDocumentNo(SalesHeader,LocationCode,ExternalDocumentNo);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrderWithVendorShipmentNo@301(VAR PurchaseHeader@1002 : Record 38;LocationCode@1001 : Code[10];VendorShipmentNo@1000 : Code[35]);
    BEGIN
      CreatePurchaseReturnOrderWithVendorShipmentNo(PurchaseHeader,LocationCode,VendorShipmentNo);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrderWithExternalDocumentNo@321(VAR TransferHeader@1002 : Record 5740;FromLocationCode@1001 : Code[10];ToLocationCode@1003 : Code[10];ExternalDocumentNo@1000 : Code[35]);
    BEGIN
      CreateTransferOrderWithExternalDocumentNo(TransferHeader,FromLocationCode,ToLocationCode,ExternalDocumentNo);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithVendorShipmentNo@275(VAR PurchaseHeader@1002 : Record 38;LocationCode@1001 : Code[10];VendorShipmentNo@1000 : Code[35]);
    BEGIN
      CreatePurchaseOrderWithVendorShipmentNo(PurchaseHeader,LocationCode,VendorShipmentNo);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@239(VAR Location@1000 : Record 14;ItemNo@1001 : Code[20];Quantity@1002 : Decimal) : Code[20];
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreatePurchaseOrder(PurchaseHeader,Location.Code,ItemNo,Quantity);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@236(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];Quantity@1002 : Decimal) : Code[20];
    VAR
      Customer@1003 : Record 18;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Customer."No.",LocationCode,ItemNo,Quantity);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateAndPartiallyPostSalesShipmentForLotTrackedItem@274(VAR SalesHeader@1003 : Record 36;VAR LotNo@1004 : Code[20];ItemNo@1009 : Code[20];Qty@1001 : Decimal;ShipQty@1000 : Decimal);
    VAR
      Location@1007 : Record 14;
      WarehouseEmployee@1006 : Record 7301;
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,FALSE,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");
      CreateAndPostItemJournalLine(ItemNo,Qty,Location.Code,'',TRUE);
      LotNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LotNo));

      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");
      CreateWarehouseShipmentFromSalesOrderWithLotNo(SalesHeader,ItemNo,Location.Code,Qty);

      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",ShipQty);
      WarehouseShipmentLine.MODIFY(TRUE);

      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceipt@147(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndCertifyBOMWithMultipleLines@188(VAR ProductionBOMHeader@1000 : Record 99000771;UnitOfMeasureCode@1002 : Code[10];ComponentItemNo@1003 : Code[20];ComponentItemNo2@1007 : Code[20];VariantCode@1005 : Code[10];ComponentUnitOfMeasure@1004 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ComponentItemNo,1);  // Value required for QuantityPer.
      IF ComponentItemNo2 <> '' THEN BEGIN
        LibraryManufacturing.CreateProductionBOMLine(
          ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ComponentItemNo2,1);  // Value required for QuantityPer.
        ProductionBOMLine.VALIDATE("Variant Code",VariantCode);
        ProductionBOMLine.VALIDATE("Unit of Measure Code",ComponentUnitOfMeasure);
        ProductionBOMLine.MODIFY(TRUE);
      END;
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateTransferOrder@216(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1004 : Record 5741;ShipmentMethodCode@1001 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1005 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationWithRequirePick.Code,LocationBlue.Code,LocationInTransit.Code);
      WITH TransferHeader DO BEGIN
        VALIDATE("Shipping Agent Code",ShippingAgentCode);
        VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);
        VALIDATE("Shipment Method Code",ShipmentMethodCode);
        MODIFY(TRUE);
      END;
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateBinWithWarehouseClassCode@192(VAR Bin@1000 : Record 7354;Zone@1004 : Record 7300;WarehouseClassCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Zone."Location Code",LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      Bin.VALIDATE("Warehouse Class Code",WarehouseClassCode);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithReplenishmentSystem@206(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithLOTAndAutoReserve@241(VAR Item@1000 : Record 27);
    BEGIN
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY;
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreatePick@176(SourceDocument@1003 : Option;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateProductGroupWithWarehouseClass@208(VAR ProductGroup@1001 : Record 5723;VAR WarehouseClass@1000 : Record 7304);
    BEGIN
      LibraryWarehouse.CreateWarehouseClass(WarehouseClass);
      LibraryInventory.CreateProductGroup(ProductGroup,'');
      ProductGroup.VALIDATE("Warehouse Class Code",WarehouseClass.Code);
      ProductGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesOrder@196(VAR SalesHeader@1000 : Record 36;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;ItemTracking@1005 : Boolean);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader,SalesLine,LocationCode,'',ItemNo,'',Quantity,0,FALSE,ItemTracking);  // Multiple Lines as FALSE. // Taking O for Quantity of blank line.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePickFromSalesOrder@53(VAR SalesHeader@1003 : Record 36;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal;ItemTracking@1004 : Boolean);
    VAR
      WarehouseShipmentLine@1006 : Record 7321;
    BEGIN
      CreateWarehouseShipmentFromSalesOrder(SalesHeader,LocationCode,ItemNo,Quantity,ItemTracking);
      CreatePick(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromSalesOrderWithWarehouseClassCode@198(VAR SalesHeader@1000 : Record 36;VAR Bin@1005 : Record 7354;LocationCode@1004 : Code[10];WarehouseClassCode@1003 : Code[10];ItemNo@1002 : Code[20];Quantity@1001 : Decimal);
    VAR
      WarehouseShipmentLine@1007 : Record 7321;
      Zone@1008 : Record 7300;
    BEGIN
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationCode,LibraryWarehouse.SelectBinType(FALSE,TRUE,FALSE,FALSE),WarehouseClassCode,'',0,FALSE);  // Value required for Zone Rank. Taking True for Ship Zone.
      CreateBinWithWarehouseClassCode(Bin,Zone,WarehouseClassCode);
      CreateWarehouseShipmentFromSalesOrder(SalesHeader,LocationCode,ItemNo,Quantity,FALSE);
      UpdateBinOnWarehouseShipmentLine(Bin,SalesHeader."No.");
      CreatePick(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromWhseShipment@134(VAR SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseInternalPickWithMultipleLines@183(VAR WhseInternalPickHeader@1000 : Record 7333;Bin@1010 : Record 7354;ItemNo@1004 : Code[20];UnitOfMeasureCode@1002 : Code[10];Quantity@1006 : Decimal;ItemNo2@1005 : Code[20];VariantCode@1008 : Code[10];UnitOfMeasureCode2@1001 : Code[10]);
    VAR
      WhseInternalPickLine@1003 : Record 7334;
      WhseInternalPickRelease@1007 : Codeunit 7315;
    BEGIN
      CreateWarehouseInternalPickHeader(WhseInternalPickHeader,Bin."Location Code",Bin.Code);
      CreateWarehouseInternalPickLine(WhseInternalPickHeader,ItemNo,Quantity,'',UnitOfMeasureCode);
      CreateWarehouseInternalPickLine(WhseInternalPickHeader,ItemNo2,Quantity,VariantCode,UnitOfMeasureCode2);
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
      LibraryVariableStorage.Enqueue(PickActivityCreatedMsg);  // Enqueue for MessageHandler.
      WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
      WhseInternalPickLine.CreatePickDoc(WhseInternalPickLine,WhseInternalPickHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@9(VAR Item@1000 : Record 27;Serial@1004 : Boolean;Lot@1005 : Boolean;SerialNos@1002 : Code[10];LotNos@1003 : Code[10];ManExprDateEntryReqd@1006 : Boolean);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,Serial,Lot,ManExprDateEntryReqd);
      LibraryInventory.CreateTrackedItem(Item,LotNos,SerialNos,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@80(VAR ParentItem@1002 : Record 27;VAR ComponentItem@1001 : Record 27;ReplenishmentSystem@1003 : Option);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateItemWithReplenishmentSystem(ParentItem,ReplenishmentSystem);
      CreateItemWithReplenishmentSystem(ComponentItem,ReplenishmentSystem);
      CreateAndCertifyBOMWithMultipleLines(ProductionBOMHeader,ParentItem."Base Unit of Measure",ComponentItem."No.",'','','');
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateProdItemWithComponentWithTrackingAndReorderingPolicy@224(VAR ParentItem@1002 : Record 27;VAR ComponentItem@1001 : Record 27;Serial@1007 : Boolean;Lot@1006 : Boolean;SerialNos@1005 : Code[10];LotNos@1004 : Code[10]);
    VAR
      ProdBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateItemWithReplenishmentSystem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateItemWithItemTrackingCode(ComponentItem,Serial,Lot,SerialNos,LotNos,FALSE);
      ComponentItem.VALIDATE("Reordering Policy",ComponentItem."Reordering Policy"::"Lot-for-Lot");
      ComponentItem.MODIFY(TRUE);
      CreateAndCertifyBOMWithMultipleLines(ProdBOMHeader,ParentItem."Base Unit of Measure",ComponentItem."No.",'','','');
      UpdateProductionBOMOnItem(ParentItem,ProdBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@99(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,1 + LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@5(VAR ItemTrackingCode@1003 : Record 6502;Serial@1000 : Boolean;Lot@1001 : Boolean;ManExprDateEntryReqd@1002 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ManExprDateEntryReqd);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithDifferentSalesUnitOfMeasure@6(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasure@1001 : Record 5404);
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithPutAwayUOM@131(VAR Item@1000 : Record 27);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      Item.VALIDATE("Put-away Unit of Measure Code",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithFlushingMethodForward@199(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Flushing Method",Item."Flushing Method"::Forward);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithVariantAndFlushingMethod@182(VAR ItemVariant@1001 : Record 5401);
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateItemWithFlushingMethodForward(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithWarehouseClassProductGroup@191(VAR WarehouseClass@1000 : Record 7304;VAR Item@1002 : Record 27);
    VAR
      ProductGroup@1001 : Record 5723;
    BEGIN
      CreateProductGroupWithWarehouseClass(ProductGroup,WarehouseClass);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Product Group Code",ProductGroup.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInventoryActivity@78(SourceDocument@1004 : Option;SourceNo@1001 : Code[20];PutAway@1003 : Boolean;Pick@1002 : Boolean);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Source Document",SourceDocument);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.FINDFIRST;
      LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,PutAway,Pick,FALSE);
    END;

    LOCAL PROCEDURE CreateTransferRoute@71();
    VAR
      TransferRoute@1003 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationOrange.Code,LocationOrange2.Code);
      TransferRoute.VALIDATE("In-Transit Code",LocationInTransit.Code);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferHeaderAndUpdateDimension@286(VAR TransferHeader@1005 : Record 5740;VAR DimensionValue@1001 : ARRAY [2] OF Record 349);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationBlue.Code,LocationRed.Code,LocationInTransit.Code);

      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue[1],GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue[2],GeneralLedgerSetup."Shortcut Dimension 2 Code");

      TransferHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue[1].Code);
      TransferHeader.VALIDATE("Shortcut Dimension 2 Code",DimensionValue[2].Code);
      TransferHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateThreeSalesOrderForDifferentBins@265(VAR SalesHeader@1004 : ARRAY [3] OF Record 36;Item@1000 : Record 27;Bin@1002 : ARRAY [3] OF Record 7354;LocationCode@1001 : Code[10];Quantity@1003 : ARRAY [3] OF Decimal;QtyperUnitofMeasure@1007 : Decimal);
    VAR
      SalesLine@1006 : ARRAY [3] OF Record 37;
    BEGIN
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationCode,'',Bin[1].Code,Quantity[1],WORKDATE,LibraryRandom.RandDec(100,2));
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationCode,'',Bin[2].Code,Quantity[2],WORKDATE,LibraryRandom.RandDec(100,2));
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationCode,'',Bin[3].Code,Quantity[3],WORKDATE,LibraryRandom.RandDec(100,2));

      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader[1],
        SalesLine[1],LocationCode,'',Item."No.",'',Quantity[1] / QtyperUnitofMeasure,0,FALSE,FALSE);

      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader[2],
        SalesLine[2],LocationCode,'',Item."No.",'',Quantity[2] / QtyperUnitofMeasure,0,FALSE,FALSE);

      CreateAndReleaseSalesOrderWithMultipleLinesAndItemTracking(
        SalesHeader[3],
        SalesLine[3],LocationCode,'',Item."No.",'',Quantity[3] / QtyperUnitofMeasure,0,FALSE,FALSE);

      SalesLine[3].VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
      SalesLine[3].VALIDATE(Quantity,ROUND(SalesLine[3].Quantity * QtyperUnitofMeasure));
      SalesLine[3].MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionLineAndCarryOutPlanForFirmPlanned@112(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      RequisitionWkshName@1001 : Record 245;
      RequisitionLine@1000 : Record 246;
      NewProdOrderChoice@1008 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      NewPurchOrderChoice@1007 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      NewTransOrderChoice@1006 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      NewAsmOrderChoice@1005 : ' ,Make Assembly Orders,Make Assembly Orders & Print';
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::Planning);
      RequisitionWkshName.FINDFIRST;
      CLEAR(RequisitionLine);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",ItemNo);
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.VALIDATE("Location Code",LocationCode);
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutPlanWksh(
        RequisitionLine,NewProdOrderChoice::"Firm Planned",NewPurchOrderChoice::" ",NewTransOrderChoice::" ",NewAsmOrderChoice::" ",
        '','','','');
    END;

    LOCAL PROCEDURE CreateRequisitionLineAndCarryOutActionMessagePlan@82(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      RequisitionWkshName@1001 : Record 245;
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::"Req.");
      RequisitionWkshName.FINDFIRST;
      CLEAR(RequisitionLine);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",ItemNo);
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.VALIDATE("Location Code",LocationCode);
      RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithTracking@138(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];ItemTrackingMode@1005 : Option);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDeterminedQuantity@369(VAR SalesHeader@1002 : Record 36;Type@1001 : Option;LocationCode@1000 : Code[10]) : Decimal;
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrderWithPostingDate(SalesHeader,Type,LocationCode);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      EXIT(SalesLine.Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithPostingDate@365(VAR SalesHeader@1002 : Record 36;Type@1001 : Option;LocationCode@1000 : Code[10]);
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1005 : Record 83;
      SalesLine@1004 : Record 37;
    BEGIN
      LibraryInventory.CreateItem(Item);
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",
        LibraryRandom.RandIntInRange(10,100));
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      CreateSalesDocument(
        SalesHeader,SalesLine,Type,LibrarySales.CreateCustomerNo,LocationCode,Item."No.",
        LibraryRandom.RandIntInRange(2,10));
    END;

    LOCAL PROCEDURE CreateSalesOrderWithExternalDocumentNo@271(VAR SalesHeader@1002 : Record 36;LocationCode@1001 : Code[10];ExternalDocumentNo@1000 : Code[35]);
    VAR
      Item@1003 : Record 27;
      SalesLine@1004 : Record 37;
    BEGIN
      CreateItemWithInventory(Item,LocationCode,1);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo,LocationCode,Item."No.",1);
      SalesHeader.VALIDATE("External Document No.",ExternalDocumentNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceForPostedShipment@282(SalesHeaderOrder@1005 : Record 36);
    VAR
      SalesHeaderInvoice@1000 : Record 36;
      SalesLineInvoice@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(
        SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,SalesHeaderOrder."Sell-to Customer No.");

      SalesLineInvoice."Document Type" := SalesHeaderInvoice."Document Type";
      SalesLineInvoice."Document No." := SalesHeaderInvoice."No.";
      LibrarySales.GetShipmentLines(SalesLineInvoice);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceWithLotTracking@342(CustomerNo@1009 : Code[20];LocationCode@1010 : Code[10];ItemNo@1011 : Code[20];LotNo@1012 : Code[20];Qty@1013 : Decimal);
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CustomerNo,LocationCode,ItemNo,Qty);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Set Lot No.");
      LibraryVariableStorage.Enqueue(Qty);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(AvailWarningMsg);
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithVendorShipmentNo@285(VAR PurchaseHeader@1002 : Record 38;LocationCode@1001 : Code[10];VendorShipmentNo@1000 : Code[35]);
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1004 : Record 39;
    BEGIN
      CreateItemWithInventory(Item,LocationCode,1);
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo,LocationCode,Item."No.",1);
      PurchaseHeader.VALIDATE("Vendor Shipment No.",VendorShipmentNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseReturnOrderWithVendorShipmentNo@308(VAR PurchaseHeader@1002 : Record 38;LocationCode@1001 : Code[10];VendorShipmentNo@1000 : Code[35]);
    VAR
      Item@1003 : Record 27;
      PurchaseLine@1004 : Record 39;
    BEGIN
      CreateItemWithInventory(Item,LocationCode,1);
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",
        LibraryPurchase.CreateVendorNo,LocationCode,Item."No.",1);
      PurchaseHeader.VALIDATE("Vendor Shipment No.",VendorShipmentNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithExternalDocumentNo@329(VAR TransferHeader@1002 : Record 5740;FromLocationCode@1001 : Code[10];ToLocationCode@1006 : Code[10];ExternalDocumentNo@1000 : Code[35]);
    VAR
      Item@1003 : Record 27;
      TransferLine@1004 : Record 5741;
    BEGIN
      CreateItemWithInventory(Item,FromLocationCode,1);
      CreateTransferDocument(TransferHeader,TransferLine,FromLocationCode,ToLocationCode,Item."No.",1);
      TransferHeader.VALIDATE("External Document No.",ExternalDocumentNo);
      TransferHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithInventory@238(VAR Item@1000 : Record 27;LocationCode@1001 : Code[10];Qty@1002 : Decimal);
    VAR
      ItemJournalLine@1005 : Record 83;
    BEGIN
      LibraryInventory.CreateItem(Item);
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateSalesDocument@21(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1004 : Record 37;DocumentType@1003 : Option;CustomerNo@1006 : Code[20];LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,LocationCode,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesLine@23(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1004 : Record 37;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@310(VAR PurchaseHeader@1005 : Record 38;VAR PurchaseLine@1004 : Record 39;DocumentType@1003 : Option;CustomerNo@1006 : Code[20];LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CustomerNo);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,LocationCode,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@312(VAR PurchaseHeader@1005 : Record 38;VAR PurchaseLine@1004 : Record 39;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferDocument@333(VAR TransferHeader@1005 : Record 5740;VAR TransferLine@1004 : Record 5741;FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateShippingAgentWithServices@256(VAR ShippingAgent@1000 : Record 291;VAR ShippingAgentServices@1001 : Record 5790;PeriodLength@1002 : DateFormula;NoOfServices@1003 : Integer);
    VAR
      i@1004 : Integer;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      FOR i := 1 TO NoOfServices DO
        LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,PeriodLength);
    END;

    LOCAL PROCEDURE CreateMultipleItemsWithTrackingCodes@157(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;ManExprDateEntryReqd@1002 : Boolean);
    BEGIN
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',FALSE);  // Taking Serial No. as True. Taking Blank value for Lot Nos. on Item card.
      CreateItemWithItemTrackingCode(Item2,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,ManExprDateEntryReqd);  // Taking Lot No. as True. Taking Blank value for Serial Nos. on Item card.
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPutAway@121(VAR WhseInternalPutAwayHeader@1001 : Record 7331;VAR WhseInternalPutAwayLine@1000 : Record 7332;Bin@1002 : Record 7354;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,Bin."Location Code");
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",Bin."Zone Code");
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",Bin.Code);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
      LibraryWarehouse.CreateWhseInternalPutawayLine(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPickHeader@212(VAR WhseInternalPickHeader@1002 : Record 7333;LocationCode@1001 : Code[10];BinCode@1000 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationCode);
      WhseInternalPickHeader.VALIDATE("To Zone Code",'');
      WhseInternalPickHeader.VALIDATE("To Bin Code",BinCode);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPickLine@215(VAR WhseInternalPickHeader@1001 : Record 7333;ItemNo@1006 : Code[20];Quantity@1005 : Decimal;VariantCode@1003 : Code[10];UnitOfMeasureCode@1002 : Code[10]);
    VAR
      WhseInternalPickLine@1000 : Record 7334;
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo,Quantity);
      WhseInternalPickLine.VALIDATE("Variant Code",VariantCode);
      WhseInternalPickLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WhseInternalPickLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@115(VAR PurchaseHeader@1000 : Record 38;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeaderWithLocation@1(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeaderWithLocation@76(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationCode);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSOWithPostingDate@245(VAR WarehouseShipmentHeader@1004 : Record 7320;SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WITH WarehouseShipmentHeader DO BEGIN
        GET(WarehouseShipmentLine."No.");
        VALIDATE("Posting Date",SalesHeader."Posting Date" - LibraryRandom.RandInt(10)); // Date less then in Sales Order
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromPurchReturnOrderWithPostingDate@268(VAR WarehouseShipmentHeader@1004 : Record 7320;PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");
      WITH WarehouseShipmentHeader DO BEGIN
        GET(WarehouseShipmentLine."No.");
        VALIDATE("Posting Date",PurchaseHeader."Posting Date" - LibraryRandom.RandInt(10)); // Date less then in Return Order
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromTransferOrderWithPostingDate@255(VAR WarehouseShipmentHeader@1004 : Record 7320;TransferHeader@1000 : Record 5740);
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      WITH WarehouseShipmentHeader DO BEGIN
        GET(WarehouseShipmentLine."No.");
        VALIDATE("Posting Date",TransferHeader."Posting Date" - LibraryRandom.RandInt(10)); // Date less then in Transfer Order
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromTransferOrderWithLotNo@164(VAR TransferHeader@1003 : Record 5740;FromLocation@1000 : Code[10];ToLocation@1002 : Code[10];ItemNo@1006 : Code[20];Quantity@1007 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue for ItemTrackingPageHandler.
      CreateAndReleaseTransferOrder(TransferHeader,FromLocation,ToLocation,ItemNo,Quantity,TRUE);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrderWithLotNo@277(VAR PurchaseHeader@1003 : Record 38;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromPurchaseReturnOrderWithLotNo@163(VAR PurchaseHeader@1006 : Record 38;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'');
      CreatePurchaseLineWithTracking(PurchaseLine,PurchaseHeader,ItemNo,Quantity,LocationCode,ItemTrackingMode::"Select Entries");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesOrderWithLotNo@280(VAR SalesHeader@1003 : Record 36;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal);
    VAR
      Customer@1004 : Record 18;
      SalesLine@1005 : Record 37;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(SalesHeader,SalesLine,SalesLine."Document Type"::Order,Customer."No.",LocationCode,ItemNo,Quantity);
      SalesLine.OpenItemTrackingLines;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehousePickforLotTrackedItem@253(VAR SalesHeader@1000 : Record 36;VAR LotNo@1007 : ARRAY [2] OF Code[20];LocationCode@1002 : Code[10];QuantityToShip@1003 : Decimal;QuantityInItemTrackingLines@1001 : Decimal);
    VAR
      Item@1009 : Record 27;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1006 : Record 5766;
      WarehouseShipmentLine@1008 : Record 7321;
    BEGIN
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,FALSE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Split Lot No."); // Enqueue for ItemTrackingPageHandler
      CreateWarehouseReceiptFromPurchaseOrderWithLotNo(PurchaseHeader,Item."No.",LocationCode,QuantityToShip);
      PostWarehouseReceipt(PurchaseHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
      LotNo[1] := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LotNo[1]));
      LotNo[2] := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LotNo[2]));
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Multiple Lines"); // Enqueue for ItemTrackingPageHandler
      LibraryVariableStorage.Enqueue(QuantityInItemTrackingLines); // Enqueue for ItemTrackingPageHandler
      LibraryVariableStorage.Enqueue(LotNo[1]); // Enqueue for ItemTrackingPageHandler
      LibraryVariableStorage.Enqueue(LotNo[2]); // Enqueue for ItemTrackingPageHandler
      CreateWarehouseShipmentFromSalesOrderWithLotNo(SalesHeader,Item."No.",LocationWhite.Code,QuantityToShip);
      CreatePick(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePostPositiveInvtAdjWithSeveralLOTs@234(Item@1005 : Record 27;LOT@1000 : ARRAY [4] OF Code[20];QtyPerLOT@1001 : Decimal);
    VAR
      Bin@1004 : Record 7354;
      i@1003 : Integer;
    BEGIN
      LibraryVariableStorage.Enqueue(ARRAYLEN(LOT));
      FOR i := 1 TO ARRAYLEN(LOT) DO BEGIN
        LibraryVariableStorage.Enqueue(QtyPerLOT);
        LibraryVariableStorage.Enqueue(LOT[i]);
      END;
      FindBinWithBinTypeCode(Bin,LocationWhite2.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWhseJournal(Bin,Item,ARRAYLEN(LOT) * QtyPerLOT,'',Item."Base Unit of Measure",TRUE);
    END;

    LOCAL PROCEDURE DeleteQuantityToHandleOnWarehouseActivityLine@33(VAR WarehouseActivityLine@1002 : Record 5767;SourceDocument@1003 : Option;SourceNo@1000 : Code[20];ActivityType@1001 : Option);
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.DeleteQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE DeleteReservationEntry@152(ItemNo@1002 : Code[20];LotNo@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Lot No.",LotNo);
      ReservationEntry.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeletePick@161(SourceDocument@1003 : Option;SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindBin@64(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinWithBinTypeCode@137(VAR Bin@1001 : Record 7354;LocationCode@1000 : Code[10];Ship@1004 : Boolean;PutAway@1005 : Boolean;Pick@1003 : Boolean);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,FALSE,Ship,PutAway,Pick);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,1); // Use 1 for Index.
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@284(VAR ItemLedgerEntry@1002 : Record 32;ItemNo@1000 : Code[20];IsPositive@1001 : Boolean);
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        RESET;
        SETRANGE("Item No.",ItemNo);
        SETRANGE(Positive,IsPositive);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindProductionOrder@114(VAR ProductionOrder@1002 : Record 5405;Status@1000 : Option;SourceNo@1001 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.SETRANGE("Source Type",ProductionOrder."Source Type"::Item);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@309(VAR SalesLine@1001 : Record 37;SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindTransferLine@210(VAR TransferLine@1003 : Record 5741;DocumentNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      TransferLine.SETRANGE("Document No.",DocumentNo);
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindValueEntry@293(VAR ValueEntry@1001 : Record 5802;ItemNo@1002 : Code[20];Positive@1003 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo,Positive);
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntry."Entry No.");
      ValueEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@141(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@2(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@56(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseWorksheetLine@54(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeaderBySalesHeader@278(VAR WarehouseShipmentHeader@1002 : Record 7320;SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader);
      FindWarehouseShipmentHeaderBySource(
        WarehouseShipmentHeader,DATABASE::"Sales Line",SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeaderByPurchaseHeader@305(VAR WarehouseShipmentHeader@1002 : Record 7320;PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      FindWarehouseShipmentHeaderBySource(
        WarehouseShipmentHeader,DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeaderByTransferHeader@326(VAR WarehouseShipmentHeader@1002 : Record 7320;TransferHeader@1000 : Record 5740);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDFIRST;
      FindWarehouseShipmentHeaderBySource(
        WarehouseShipmentHeader,DATABASE::"Transfer Line",0,TransferHeader."No.",TransferLine."Line No.");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeaderBySource@279(VAR WarehouseShipmentHeader@1002 : Record 7320;SourceType@1000 : Integer;SourceSubtype@1003 : Integer;SourceNo@1006 : Code[20];SourceLineNo@1005 : Integer);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      FindWarehouseShipmentLineBySource(WarehouseShipmentLine,SourceType,SourceSubtype,SourceNo,SourceLineNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLineBySource@288(VAR WarehouseShipmentLine@1001 : Record 7321;SourceType@1000 : Integer;SourceSubtype@1003 : Integer;SourceNo@1004 : Code[20];SourceLineNo@1005 : Integer);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Type",SourceType);
      WarehouseShipmentLine.SETRANGE("Source Subtype",SourceSubtype);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.SETRANGE("Source Line No.",SourceLineNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptHeaderByPurchaseHeader@281(VAR WarehouseReceiptHeader@1002 : Record 7316;PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      FindWarehouseReceiptHeaderBySource(
        WarehouseReceiptHeader,DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptHeaderBySource@291(VAR WarehouseReceiptHeader@1002 : Record 7316;SourceType@1000 : Integer;SourceSubtype@1003 : Integer;SourceNo@1006 : Code[20];SourceLineNo@1005 : Integer);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      FindWarehouseReceiptLineBySource(WarehouseReceiptLine,SourceType,SourceSubtype,SourceNo,SourceLineNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLineBySource@294(VAR WarehouseReceiptLine@1001 : Record 7317;SourceType@1000 : Integer;SourceSubtype@1003 : Integer;SourceNo@1004 : Code[20];SourceLineNo@1005 : Integer);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Type",SourceType);
      WarehouseReceiptLine.SETRANGE("Source Subtype",SourceSubtype);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.SETRANGE("Source Line No.",SourceLineNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@87(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10];Receive@1005 : Boolean;Ship@1004 : Boolean;PutAway@1003 : Boolean;Pick@1002 : Boolean);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(Receive,Ship,PutAway,Pick));
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE GetSourceDocumentOnWarehouseShipment@103(VAR WarehouseShipmentHeader@1002 : Record 7320;LocationCode@1001 : Code[10]);
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationCode);
    END;

    LOCAL PROCEDURE GetWarehouseDocumentOnWhseWorksheetLine@125(VAR WhseWorksheetName@1000 : Record 7327;LocationCode@1003 : Code[10]);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePickRequest.SETRANGE(Status,WhsePickRequest.Status::Released);
      WhsePickRequest.SETRANGE("Completely Picked",FALSE);
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      LibraryWarehouse.GetOutboundSourceDocuments(WhsePickRequest,WhseWorksheetName,LocationCode);
    END;

    LOCAL PROCEDURE ModifyAllowBreakBulkOnLocation@135(VAR Location@1000 : Record 14;BreakBulk@1001 : Boolean);
    BEGIN
      Location.VALIDATE("Allow Breakbulk",BreakBulk);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyBinOnWarehouseActivityLineAndRegisterWarehouseActivity@129(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1006 : Option;BinCode@1004 : Code[20]);
    VAR
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ModifyDirectedPutAwayAndPickInLocationWhite@123(VAR Location@1001 : Record 14);
    BEGIN
      Location.VALIDATE("Directed Put-away and Pick",FALSE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyOrderTrackingPolicyInItem@20(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking & Action Msg.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyRequisitionLineAndCarryOutActionMessagePlan@86(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE ModifyAlwaysCreatePickLineOnLocation@117(VAR Location@1001 : Record 14;VAR OldAlwaysCreatePickLine@1000 : Boolean;NewAlwaysCreatePickLine@1002 : Boolean);
    BEGIN
      OldAlwaysCreatePickLine := Location."Always Create Pick Line";
      Location.VALIDATE("Always Create Pick Line",NewAlwaysCreatePickLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyAlwaysCreatePutAwayLineOnLocation@194(VAR Location@1001 : Record 14;VAR OldAlwaysCreatePutAwayLine@1002 : Boolean;NewAlwaysCreatePutAwayLine@1000 : Boolean);
    BEGIN
      OldAlwaysCreatePutAwayLine := Location."Always Create Put-away Line";
      Location.VALIDATE("Always Create Put-away Line",NewAlwaysCreatePutAwayLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyZoneAndBinCodeOnPutAwayLine@146(SourceNo@1002 : Code[20];LocationCode@1005 : Code[10]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      Bin@1001 : Record 7354;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDSET;
      FindBinWithBinTypeCode(Bin,LocationCode,FALSE,TRUE,TRUE);  // Bin Type Code as PUTPICK.
      REPEAT
        WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
        WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SplitWhseActivityLines@227(SourceDocNo@1001 : Code[20];PickLineQty@1000 : ARRAY [2] OF Decimal);
    VAR
      WhseActivityLine@1005 : Record 5767;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Action Type","Action Type"::Take);
        SplitWhseActivityLine(WhseActivityLine,SourceDocNo,PickLineQty);
        SETRANGE("Action Type","Action Type"::Place);
        SplitWhseActivityLine(WhseActivityLine,SourceDocNo,PickLineQty);
      END;
    END;

    LOCAL PROCEDURE SplitWhseActivityLine@246(VAR WhseActivityLine@1002 : Record 5767;SourceDocNo@1001 : Code[20];PickLineQty@1000 : ARRAY [2] OF Decimal);
    BEGIN
      WITH WhseActivityLine DO BEGIN
        FindWarehouseActivityLine(WhseActivityLine,"Source Document"::"Sales Order",SourceDocNo,"Activity Type"::Pick);
        VALIDATE("Qty. to Handle",PickLineQty[1]);
        MODIFY;
        SplitLine(WhseActivityLine);

        UpdatePickLineZoneCodeAndBinCode(SourceDocNo,"Action Type","Zone Code","Bin Code",PickLineQty[2]);
      END;
    END;

    LOCAL PROCEDURE SetLotNoAndQuantityInItemTrackingLine@258(ItemTrackingLines@1001 : TestPage 6510;QtyInTrackingSpecification@1002 : Decimal);
    VAR
      LotNo@1000 : Code[20];
    BEGIN
      LotNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LotNo));
      ItemTrackingLines."Lot No.".SETVALUE(LotNo);
      ItemTrackingLines."Quantity (Base)".SETVALUE(QtyInTrackingSpecification);
    END;

    LOCAL PROCEDURE OpenOrderPromisingPage@145(SalesOrderNo@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",SalesOrderNo);
      SalesOrder.SalesLines.OrderPromising.INVOKE;
    END;

    LOCAL PROCEDURE PostConsumptionJournal@120(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;OrderNo@1003 : Code[20];LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name,ItemJournalLine."Entry Type"::Consumption,
        ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Source No.",ItemNo);
      ItemJournalLine.VALIDATE("Order No.",OrderNo);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);
    END;

    LOCAL PROCEDURE PostOutputJournal@119(ItemNo@1002 : Code[20];OrderNo@1003 : Code[20];Quantity@1001 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate2,ItemJournalBatch3);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,ItemJournalTemplate2,ItemJournalBatch3,ItemNo,OrderNo);
      ItemJournalLine.VALIDATE("Output Quantity",Quantity);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate2.Name,ItemJournalBatch3.Name);
    END;

    LOCAL PROCEDURE PostInventoryActivity@47(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    VAR
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Receive.
    END;

    LOCAL PROCEDURE PostPurchaseDocument@15(PurchaseHeader@1000 : Record 38;VAR DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Posting as Receive and Invoice.
    END;

    LOCAL PROCEDURE PostSalesDocument@7(SalesHeader@1000 : Record 36;VAR DocumentNo@1001 : Code[20]);
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Posting as Ship and Invoice.
    END;

    LOCAL PROCEDURE PostWarehouseReceiptFromPurchaseOrderWithWarehouseClassCode@195(VAR PurchaseHeader@1000 : Record 38;VAR Bin@1005 : Record 7354;LocationCode@1001 : Code[10];WarehouseClassCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      Zone@1006 : Record 7300;
    BEGIN
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationCode,LibraryWarehouse.SelectBinType(TRUE,FALSE,FALSE,FALSE),WarehouseClassCode,'',0,FALSE);  // Value required for Zone Rank. Taking True for Receive Zone.
      CreateBinWithWarehouseClassCode(Bin,Zone,WarehouseClassCode);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      UpdateZoneAndBinCodeOnWarehouseReceiptLine(Bin,PurchaseHeader."No.");
      PostWarehouseReceipt(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@3(SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@58(SourceDocument@1000 : Option;SourceNo@1003 : Code[20]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE RegisterPickFromProdOrder@229(ProdOrder@1000 : Record 5405);
    VAR
      WhseActivityHeader@1002 : Record 5766;
      WhseActivityLine@1003 : Record 5767;
    BEGIN
      LibraryVariableStorage.Enqueue(PickActivityCreatedMsg); // Enqueue for MessageHandler.
      ProdOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE); // SetBreakBulkFilter False,DoNotFillQtyToHandle False,PrintDocument False.
      RegisterWarehouseActivity(
        WhseActivityHeader."Source Document"::"Prod. Consumption",ProdOrder."No.",
        WhseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE RegisterPutAwayFromPurchaseOrder@83(ItemNo@1003 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(SourceDocument@1005 : Option;SourceNo@1002 : Code[20];ActivityType@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ChangeQtyToHandleInWarehouseActivityLines@270(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];ActivityType@1000 : Option;Quantity@1003 : ARRAY [2] OF Decimal;LotNo@1008 : ARRAY [2] OF Code[20]);
    BEGIN
      ChangeQtyToHandleInOneWarehouseActivityLine(SourceDocument,SourceNo,ActivityType,Quantity[1],LotNo[1]);
      ChangeQtyToHandleInOneWarehouseActivityLine(SourceDocument,SourceNo,ActivityType,Quantity[2],LotNo[2]);
    END;

    LOCAL PROCEDURE ChangeQtyToHandleInOneWarehouseActivityLine@283(SourceDocument@1005 : Option;SourceNo@1004 : Code[20];ActivityType@1003 : Option;QuantityToHandle@1001 : Decimal;LotNo@1000 : Code[20]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source Document",SourceDocument);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Activity Type",ActivityType);
        SETRANGE("Lot No.",LotNo);
        FINDSET(TRUE);
        REPEAT
          VALIDATE("Qty. to Handle",QuantityToHandle);
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RunGetBinContentOnWhseInternalPutAway@122(VAR WhseInternalPutAwayHeader@1005 : Record 7331;ItemNo@1004 : Code[20]);
    VAR
      BinContent@1003 : Record 7302;
      WhseWorksheetLine@1002 : Record 7326;
      WhseWorksheetName@1001 : Record 7327;
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationWhite.Code);
      WhseWorksheetLine.INIT;
      WhseWorksheetLine.VALIDATE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.VALIDATE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.VALIDATE("Location Code",LocationWhite.Code);
      BinContent.SETRANGE("Location Code",LocationWhite.Code);
      BinContent.SETRANGE("Item No.",ItemNo);
      LibraryWarehouse.WhseGetBinContent(BinContent,WhseWorksheetLine,WhseInternalPutAwayHeader,0);
    END;

    LOCAL PROCEDURE SetRequirePickOnLocation@252(VAR Location@1000 : Record 14;RequirePick@1001 : Boolean);
    BEGIN
      Location."Require Pick" := RequirePick;
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectAvailableLotOnWarehouseShipmentLine@298(SourceDocument@1001 : Option;SourceNo@1000 : Code[20];Qty@1003 : Decimal);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssitEditLotNo);
      LibraryVariableStorage.Enqueue(Qty);
      WarehouseShipmentLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE UndoSalesShipment@204(DocumentNo@1000 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmMsg);
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseShipmentLine@175(Bin@1001 : Record 7354;SourceNo@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SourceNo);
      WarehouseShipmentLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseShipmentLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@136(ItemNo@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",WORKDATE);  // Value required for test.
    END;

    LOCAL PROCEDURE UpdateZoneAndBinCodeOnWarehouseReceiptLine@48(Bin@1001 : Record 7354;SourceNo@1000 : Code[20]);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseReceiptLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWhseWorksheetLine@126(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode,ItemNo);
      WhseWorksheetLine.DeleteQtyToHandle(WhseWorksheetLine);
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.VALIDATE("Qty. to Handle",Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWarehouseActivityLine@144(SourceDocument@1004 : Option;SourceNo@1001 : Code[20];ActivityType@1005 : Option;QuantityToHandle@1000 : Decimal;NextLine@1006 : Boolean);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDSET;
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QuantityToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      IF NextLine THEN
        WarehouseActivityLine.NEXT;
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QuantityToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionOrderAndRefresh@116(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20]);
    BEGIN
      FindProductionOrder(ProductionOrder,ProductionOrder.Status::Released,SourceNo);
      ProductionOrder.VALIDATE("Due Date",WORKDATE);
      ProductionOrder.VALIDATE("Starting Date-Time",CURRENTDATETIME);
      ProductionOrder.VALIDATE("Ending Date-Time",CURRENTDATETIME);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseJournal@113(Bin@1000 : Record 7354;Item@1002 : Record 27;Quantity@1003 : Decimal;VariantCode@1008 : Code[10];UnitOfMeasureCode@1005 : Code[10];ItemTracking@1004 : Boolean);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      ItemJournalSetup;
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      WarehouseJournalLine.VALIDATE("Variant Code",VariantCode);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseJournalLine.MODIFY(TRUE);
      IF ItemTracking THEN
        WarehouseJournalLine.OpenItemTrackingLines;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateProductionBOMOnItem@202(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReserveOnItem@44(VAR Item@1000 : Record 27);
    BEGIN
      Item.FIND;
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTransferOrderLineForQtyToReceive@205(DocumentNo@1001 : Code[20];ItemNo@1000 : Code[20];QtyToReceive@1002 : Decimal);
    VAR
      TransferLine@1003 : Record 5741;
    BEGIN
      FindTransferLine(TransferLine,DocumentNo,ItemNo);
      TransferLine.VALIDATE("Qty. to Receive",QtyToReceive);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePickLineZoneCodeAndBinCode@228(SourceDocNo@1001 : Code[20];ActionType@1005 : Option;ZoneCode@1002 : Code[10];BinCode@1003 : Code[20];Qty@1004 : Decimal);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE(Quantity,Qty);
        SETRANGE("Action Type",ActionType);
        FindWarehouseActivityLine(WhseActivityLine,"Source Document"::"Sales Order",SourceDocNo,"Activity Type"::Pick);
        VALIDATE("Qty. to Handle",0);
        VALIDATE("Zone Code",ZoneCode);
        VALIDATE("Bin Code",BinCode);
        VALIDATE("Qty. to Handle",Qty);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateShippingAgentCodeInWhseShipment@377(VAR WarehouseShipmentHeader@1001 : Record 7320;VAR ShippingAgent@1002 : Record 291);
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      WarehouseShipmentHeader.VALIDATE("Shipping Agent Code",ShippingAgent.Code);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWhseShipment@357(VAR WarehouseShipmentHeader@1000 : Record 7320;VAR ShippingAgentServices@1005 : Record 5790;QtyToShip@1003 : Decimal);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      WarehouseShipmentHeader.VALIDATE("Shipping Agent Service Code",ShippingAgentServices.Code);
      WarehouseShipmentHeader.MODIFY(TRUE);
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",QtyToShip);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateShippingAgentCodeAndShippingAgentServiceCode@374(VAR SalesHeader@1000 : Record 36);
    VAR
      ShippingAgent@1001 : Record 291;
      ShippingAgentServices@1002 : Record 5790;
      PeriodLength@1003 : DateFormula;
    BEGIN
      EVALUATE(PeriodLength,'<1D>');
      CreateShippingAgentWithServices(ShippingAgent,ShippingAgentServices,PeriodLength,1);
      SalesHeader.VALIDATE("Shipping Agent Code",ShippingAgent.Code);
      SalesHeader.VALIDATE("Shipping Agent Service Code",ShippingAgentServices.Code);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE UpdatePickLinesLot@235(SourceDocNo@1005 : Code[20];PickLineQty@1001 : Decimal;NewLotNo@1002 : Code[20]);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE(Quantity,PickLineQty);
        FindWarehouseActivityLine(WhseActivityLine,"Source Document"::"Sales Order",SourceDocNo,"Activity Type"::Pick);
        MODIFYALL("Lot No.",NewLotNo);
      END;
    END;

    LOCAL PROCEDURE UpdateShipmentPostingPolicyOnWarehouseSetup@272();
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WITH WarehouseSetup DO BEGIN
        GET;
        VALIDATE("Shipment Posting Policy","Shipment Posting Policy"::"Stop and show the first posting error");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateValueEntryUserID@273(ItemNo@1000 : Code[20]);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      FindValueEntry(ValueEntry,ItemNo,FALSE);
      ValueEntry."User ID" := LibraryUtility.GenerateGUID;
      ValueEntry.MODIFY;
    END;

    LOCAL PROCEDURE SelectItemTrackingForProdOrderComponents@221(ComponentItemNo@1000 : Code[20]);
    VAR
      ProdOrderComponents@1001 : TestPage 99000818;
    BEGIN
      ProdOrderComponents.OPENVIEW;
      ProdOrderComponents.FILTER.SETFILTER("Item No.",ComponentItemNo);
      ProdOrderComponents.ItemTrackingLines.INVOKE; // Open ItemTrackingPageHandler and select Item Tracking on page handler.
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@341(VAR ItemJournalBatch@1000 : Record 233;TemplateType@1001 : Option);
    VAR
      ItemJournalTemplate@1002 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,TemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,TemplateType,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@85(ItemNo@1001 : Code[20];EntryType@1004 : Option;Quantity@1003 : Decimal;VariantCode@1002 : Code[10]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForUndoShipment@153(ItemNo@1001 : Code[20];Positive@1002 : Boolean;Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo,Positive);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPutLine@316(SourceDocument@1004 : Option;SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      PostedInvtPutAwayLine@1005 : Record 7341;
    BEGIN
      PostedInvtPutAwayLine.SETRANGE("Source Document",SourceDocument);
      PostedInvtPutAwayLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPutAwayLine.FINDFIRST;
      PostedInvtPutAwayLine.TESTFIELD("Location Code",LocationCode);
      PostedInvtPutAwayLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPutAwayLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@110(SourceDocument@1004 : Option;SourceNo@1000 : Code[20];LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;Next@1006 : Boolean);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source Document",SourceDocument);
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.FINDSET;
      IF Next THEN
        PostedInvtPickLine.NEXT;
      PostedInvtPickLine.TESTFIELD("Location Code",LocationCode);
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLineForTransferOrder@68(SourceNo@1000 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1001 : Code[10];LotNo@1005 : Code[10]);
    VAR
      PostedInvtPickLine@1002 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source Document",PostedInvtPickLine."Source Document"::"Outbound Transfer");
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD(Quantity,Quantity);
      PostedInvtPickLine.TESTFIELD("Location Code",LocationCode);
      PostedInvtPickLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseInvoice@24(No@1003 : Code[20];ItemNo@1000 : Code[20];LocationCode@1006 : Code[10];Quantity@1007 : Decimal);
    VAR
      PurchInvHeader@1002 : Record 122;
      PurchInvLine@1001 : Record 123;
    BEGIN
      PurchInvHeader.GET(No);
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.SETRANGE(Type,PurchInvLine.Type::Item);
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD("No.",ItemNo);
      PurchInvLine.TESTFIELD("Location Code",LocationCode);
      PurchInvLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@36(No@1005 : Code[20];ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesInvoiceHeader@1004 : Record 112;
      SalesInvoiceLine@1000 : Record 113;
    BEGIN
      SalesInvoiceHeader.GET(No);
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD("No.",ItemNo);
      SalesInvoiceLine.TESTFIELD("Location Code",LocationCode);
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesShipmentLine@156(DocumentNo@1003 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      SalesShipmentLine.FINDSET;
      SalesShipmentLine.TESTFIELD(Quantity,Quantity);
      SalesShipmentLine.NEXT;
      SalesShipmentLine.TESTFIELD(Quantity,-Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWhseShipmentLine@162(SourceDocument@1004 : Option;SourceNo@1003 : Code[20];LocationCode@1002 : Code[10];BinCode@1008 : Code[20];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      Bin@1007 : Record 7354;
      PostedWhseShipmentLine@1006 : Record 7323;
    BEGIN
      Bin.GET(LocationCode,BinCode);
      PostedWhseShipmentLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseShipmentLine.SETRANGE("Source No.",SourceNo);
      PostedWhseShipmentLine.SETRANGE("Location Code",LocationCode);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
      PostedWhseShipmentLine.TESTFIELD("Zone Code",Bin."Zone Code");
      PostedWhseShipmentLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyPurchaseReturnOrderLine@177(DocumentNo@1002 : Code[20];ItemNo@1001 : Code[20];ReturnQuantityShipped@1000 : Decimal);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Return Qty. to Ship",0);  // Value required for the test.
      PurchaseLine.TESTFIELD("Return Qty. Shipped",ReturnQuantityShipped);
    END;

    LOCAL PROCEDURE VerifyRegisteredWarehouseActivityLine@89(SourceDocument@1005 : Option;SourceNo@1001 : Code[20];ActivityType@1006 : Option;ActionType@1007 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;BinCode@1004 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.FINDFIRST;
      RegisteredWhseActivityLine.TESTFIELD("Item No.",ItemNo);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@128(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesHeaderAndSalesShipmentHeader@351(SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
      SalesShipmentHeader@1001 : Record 110;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeaderNo);
      SalesHeader.TESTFIELD("Shipping Agent Service Code",'');
      SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesShipmentHeader.FINDFIRST;
      SalesShipmentHeader.TESTFIELD("Shipping Agent Service Code",'');
    END;

    LOCAL PROCEDURE VerifyShippingAgentServiceInSalesHeaderAndSalesShipmentHeader@370(ShippingAgentServices@1001 : Record 5790;SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesHeader@1003 : Record 36;
      SalesShipmentHeader@1002 : Record 110;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeaderNo);
      SalesHeader.TESTFIELD("Shipping Agent Service Code",ShippingAgentServices.Code);
      SalesShipmentHeader.INIT;
      SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesShipmentHeader.SETRANGE("Shipping Agent Service Code",ShippingAgentServices.Code);
      Assert.RecordIsNotEmpty(SalesShipmentHeader);
    END;

    LOCAL PROCEDURE VerifySerialNoOnWarehouseActivityLine@79(SourceNo@1000 : Code[20];ActionType@1001 : Option);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      Count@1003 : Integer;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
      Count := 1;
      REPEAT
        WarehouseActivityLine.TESTFIELD("Serial No.",FORMAT(Count));  // Value required for the Serial No.
        WarehouseActivityLine.TESTFIELD(Quantity,1);  // Value required for the Quantity.
        Count += 1;
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShippingValuesInWarehouseActiityLine@219(WarehouseActivityLine@1003 : Record 5767;TransferHeader@1000 : Record 5740;TransferLine@1001 : Record 5741);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        TESTFIELD("Shipment Method Code",TransferHeader."Shipment Method Code");
        TESTFIELD("Shipping Agent Code",TransferLine."Shipping Agent Code");
        TESTFIELD("Shipping Agent Service Code",TransferLine."Shipping Agent Service Code");
      END;
    END;

    LOCAL PROCEDURE VerifyTransferOrderLine@178(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];QtyToShip@1005 : Decimal;QuantityShipped@1003 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      FindTransferLine(TransferLine,DocumentNo,ItemNo);
      TransferLine.TESTFIELD("Qty. to Ship",QtyToShip);  // Value required for the test.
      TransferLine.TESTFIELD("Quantity Shipped",QuantityShipped);
    END;

    LOCAL PROCEDURE VerifyTransferOrderLineForQtyToReceive@209(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];QtyToReceive@1005 : Decimal;QuantityReceived@1003 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      FindTransferLine(TransferLine,DocumentNo,ItemNo);
      TransferLine.TESTFIELD("Qty. to Receive",QtyToReceive);
      TransferLine.TESTFIELD("Quantity Received",QuantityReceived);
    END;

    LOCAL PROCEDURE VerifyValueEntryUserID@287(ItemNo@1001 : Code[20];CheckedUserId@1002 : Code[50]);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      FindValueEntry(ValueEntry,ItemNo,TRUE);
      ValueEntry.TESTFIELD("User ID",CheckedUserId);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@12(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1006 : Option;SourceNo@1003 : Code[20];ActivityType@1004 : Option;ActionType@1005 : Option;ItemNo@1002 : Code[20];Quantity@1001 : Decimal);
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLineWithBin@65(SourceNo@1003 : Code[20];ItemNo@1002 : Code[20];Quantity@1001 : Decimal;LocationCode@1006 : Code[10];BinCode@1007 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      VerifyWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::Take,ItemNo,Quantity);
      WarehouseActivityLine.TESTFIELD("Location Code",LocationCode);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWarehouseReceiptLine@19(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceDocument,SourceNo);
      WarehouseReceiptLine.TESTFIELD("Item No.",ItemNo);
      WarehouseReceiptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseReceiptCreated@193(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];LocationCode@1000 : Code[10];ItemNo@1004 : Code[20];Expected@1005 : Boolean);
    VAR
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceDocument,SourceNo);
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.SETRANGE("Location Code",LocationCode);
      Assert.AreNotEqual(Expected,WarehouseReceiptLine.ISEMPTY,
        'Expect the receipt line with location ' + LocationCode + ' exist: ' + FORMAT(Expected) +
        ', contrary to the actual result');
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentCreated@197(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];LocationCode@1000 : Code[10];ItemNo@1004 : Code[20];Expected@1006 : Boolean);
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.SETRANGE("Location Code",LocationCode);
      Assert.AreNotEqual(Expected,WarehouseShipmentLine.ISEMPTY,
        'Expect the shipment line with location ' + LocationCode + ' exist: ' + FORMAT(Expected) +
        ', contrary to the actual result');
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@59(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentLine.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@185(ItemNo@1003 : Code[20];EntryType@1005 : Option;VariantCode@1001 : Code[10];Quantity@1002 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD("Variant Code",VariantCode);
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyBinContent@184(LocationCode@1005 : Code[10];BinCode@1001 : Code[20];ItemNo@1000 : Code[20];VariantCode@1004 : Code[10];Quantity@1002 : Decimal;WarehouseClassCode@1006 : Code[10]);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      BinContent.TESTFIELD("Variant Code",VariantCode);
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
      BinContent.TESTFIELD("Warehouse Class Code",WarehouseClassCode);
    END;

    LOCAL PROCEDURE VerifyBinCodeAndQuantityOnWarehouseActivityLine@257(SourceNo@1001 : Code[20];ExpectedBinCode@1004 : Code[20];ExpectedQty@1003 : Decimal);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,"Source Document"::"Sales Order",SourceNo,
          "Activity Type"::Pick);
        SETRANGE("Action Type","Action Type"::Take);
        FINDFIRST;
        TESTFIELD("Bin Code",ExpectedBinCode);
        TESTFIELD(Quantity,ExpectedQty);
      END;
    END;

    LOCAL PROCEDURE VerifyRequsitionLine@218(ItemNo@1001 : Code[20];ExpectedQty@1002 : Decimal);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        Assert.IsFalse(ISEMPTY,RequsitionLineShouldCreatedErr);
        FINDFIRST;
        Assert.AreEqual(ExpectedQty,Quantity,QuantityErr);
      END;
    END;

    LOCAL PROCEDURE VerifyReservEntryLineExist@237(LocationCode@1005 : Code[20];ItemNo@1000 : Code[20];LotNo@1002 : Code[20];LotQty@1004 : Decimal);
    VAR
      ReservationEntry@1003 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        SETRANGE(Positive,TRUE);
        SETRANGE("Reservation Status","Reservation Status"::Reservation);
        SETRANGE(Quantity,LotQty);
        Assert.IsFalse(ISEMPTY,ReservEntryNotExistErr);
      END;
    END;

    LOCAL PROCEDURE VerifyReservationEntryLine@254(SalesHeaderNo@1003 : Code[20];LotNo@1002 : Code[20];ExpectedReservedQuantityForLotNo@1001 : Decimal;ExpectedSurplusQuantityForLotNo@1006 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
      ReservedQty@1004 : Decimal;
      SurplusQty@1005 : Decimal;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Reservation Status","Reservation Status"::Reservation);
        SETRANGE("Source ID",SalesHeaderNo);
        SETRANGE("Lot No.",LotNo);
        CALCSUMS("Qty. to Handle (Base)");
        ReservedQty := "Qty. to Handle (Base)";

        SETRANGE("Reservation Status","Reservation Status"::Surplus);
        CALCSUMS("Qty. to Handle (Base)");
        SurplusQty := "Qty. to Handle (Base)";
      END;
      Assert.AreEqual(ExpectedReservedQuantityForLotNo,ReservedQty,QuantityMustBeEqualErr);
      Assert.AreEqual(ExpectedSurplusQuantityForLotNo,SurplusQty,QuantityMustBeEqualErr);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@14(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      TrackingQuantity@1002 : Variant;
      DequeueVariable@1004 : Variant;
      LineCount@1001 : Integer;
      Quantity@1005 : Decimal;
      QtyInTrackingSpecification@1003 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Assign Serial No.":
          ItemTrackingLines."Assign Serial No.".INVOKE;
        ItemTrackingMode::"Assign Lot No.":
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::VerifyTracking:
          BEGIN
            ItemTrackingLines.LAST;
            REPEAT
              ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
              ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // Using One for Serial No.
              Assert.IsTrue(ItemTrackingLines."Serial No.".VALUE > ' ',SerialNoErr);
              LineCount += 1;
            UNTIL NOT ItemTrackingLines.PREVIOUS;
            LibraryVariableStorage.Dequeue(TrackingQuantity);
            Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualErr);  // Verify Number of line - Tracking Line.
          END;
        ItemTrackingMode::"Split Lot No.":
          BEGIN
            Quantity := ItemTrackingLines.Quantity3.ASDECIMAL / 2;  // Value required for test.
            AssignLotNoOnItemTrackingLine(ItemTrackingLines,Quantity);
            ItemTrackingLines.NEXT;
            AssignLotNoOnItemTrackingLine(ItemTrackingLines,Quantity);
          END;
        ItemTrackingMode::AssitEditLotNo:
          BEGIN
            ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
            ItemTrackingLines."Lot No.".ASSISTEDIT;
          END;
        ItemTrackingMode::"Set Lot No.":
          SetLotNoAndQuantityInItemTrackingLine(ItemTrackingLines,LibraryVariableStorage.DequeueDecimal);
        ItemTrackingMode::"Assign Multiple Lines":
          BEGIN
            QtyInTrackingSpecification := LibraryVariableStorage.DequeueDecimal;
            SetLotNoAndQuantityInItemTrackingLine(ItemTrackingLines,QtyInTrackingSpecification);
            ItemTrackingLines.NEW;
            SetLotNoAndQuantityInItemTrackingLine(ItemTrackingLines,QtyInTrackingSpecification);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreateHandler@16(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@30(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesHandler@102(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      DequeueVariable@1003 : Variant;
      TrackingQuantity@1002 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      TrackingQuantity := WhseItemTrackingLines.Quantity3.ASDECIMAL;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Assign Serial No.":
          BEGIN
            WhseItemTrackingLines.FIRST;
            REPEAT
              WhseItemTrackingLines."Serial No.".SETVALUE(FORMAT(TrackingQuantity));
              WhseItemTrackingLines.Quantity.SETVALUE(1);
              TrackingQuantity -= 1;
              WhseItemTrackingLines.NEXT;
            UNTIL TrackingQuantity = 0;
          END;
        ItemTrackingMode::"Assign Lot No.":
          BEGIN
            WhseItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            WhseItemTrackingLines.Quantity.SETVALUE(TrackingQuantity);
          END;
      END;
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingEditSeveralLinesLOT@244(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      DequeueVariable@1001 : Variant;
      NumOfLines@1005 : Integer;
      LOTQty@1002 : Decimal;
      LOTCode@1003 : Code[20];
      i@1004 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      NumOfLines := DequeueVariable;

      FOR i := 1 TO NumOfLines DO BEGIN
        LibraryVariableStorage.Dequeue(DequeueVariable);
        LOTQty := DequeueVariable;
        LibraryVariableStorage.Dequeue(DequeueVariable);
        LOTCode := DequeueVariable;
        WhseItemTrackingLines."Lot No.".SETVALUE(LOTCode);
        WhseItemTrackingLines.Quantity.SETVALUE(LOTQty);
        WhseItemTrackingLines.NEXT;
      END;

      WhseItemTrackingLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentHandler@170(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderPromisingHandler@130(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.CapableToPromise.INVOKE;
      OrderPromisingLines.AcceptButton.INVOKE;
    END;

    [PageHandler]
    PROCEDURE WarehouseActivityLinesHandler@96(VAR WarehouseActivityLines@1000 : TestPage 5785);
    BEGIN
      WarehouseActivityLines.Card.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WarehousePickHandler@95(VAR WarehousePick@1000 : TestPage 5779);
    BEGIN
      LibraryVariableStorage.Enqueue(RegisterPickConfirmMsg);  // Enqueue for MessageHandler.
      WarehousePick.RegisterPick.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingListPageHandler@50(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@94(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesPageHandler@292(VAR GetShipmentLines@1000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateInventoryPutAwayPickHandler@81(VAR CreateInvtPutAwayPickMvmt@1000 : TestRequestPage 7323);
    BEGIN
      LibraryVariableStorage.Enqueue(InvPickMsg);
      CreateInvtPutAwayPickMvmt.CInvtPick.SETVALUE(TRUE);
      CreateInvtPutAwayPickMvmt.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@104(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@18(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(
        STRPOS(ConfirmMessage,LocalMessage) > 0,STRSUBSTNO('ConfirmHandler got message %1, expected %2',ConfirmMessage,LocalMessage));
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerForUndoPosetReceipt@220(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
        1. Test the error message on posting the Shipment without registering the Pick.
        2. Test the functionality of Get Source Documents on Warehouse Receipt.
        3. Test the error while creating Warehouse Shipment for Sales Order with Sales Line of different locations when Shipping Advice is Complete.
        4. Test the functionality of creating Warehouse Shipment for Sales Order with two Sales Lines for different locations when Shipping Advice is Partial.
        5. Test the functionality of creating Pick with different Sales Unit of Measure.
        6. Test the functionality of posting Warehouse Shipment with different Sales Unit of Measure.
        7. Test the functionality of posting Purchase Order after registering Put Away with Lot No.
        8. Test the functionality of posting Sales Order after registering Pick with Lot No.
        9. Test the functionality of posting Purchase Order after registering Put Away with Serial No.
       10. Test the functionality of posting Sales Order after registering Pick with Serial No.
       11. Test the functionality of creating and posting Inventory Put-Away and Pick from Sales Order.
       12. Test the functionality of creating Inventory Pick from Sales Order with Item Reserve as Always before updating Item Inventory.
       13. Test the functionality of creating Inventory Pick from Sales Order with Item Reserve as Always after updating Item Inventory.
       14. Test the functionality of creating Inventory Pick from Sales Order with Bin Code.
       15. Test the functionality of creating Inventory Pick from Transfer Order.
       16. Test the functionality of creating Inventory Put Away from Transfer Order.
       17. Test the functionality of creating Inventory Pick from Transfer Order with Lot No.
       18. Test the functionality of creating Warehouse Shipment for Sales Order with two Sales Lines for different locations.
       19. Test the functionality of creating Warehouse Shipment for a new Sales Line in the Sales Order after creating two Shipments for different locations.
       20. Test the functionality of Get Source Document on Warehouse Shipment for Sales Return Order with negative Quantity.
       21. Test the functionality of Get Source Document on Warehouse Shipment with Item Tracking.
       22. Test the functionality of Calculate Consumption after creating Pick from Released Production Order.
       23. Test the functionality of Reservation without Item Tracking using Carry out Action Message Plan on Planning Worksheet.
       24. Test that the Pick is created with Quantity of only that Put Away which is registered.
       25. Test that the Pick can be created and registered by page using Pick Lines page called from the Warehouse Shipment.
       26. Test the creation of Pick from Sales Order with modified Bin Code on Place line of Put-Away.
       27. Test the creation of Partial Pick from Pick Worksheet with Multiple lines of Sales Order.
       28. Test the creation of Pick from Released Production Order created from Firm Planned Production Order.
       29. Test the functionality of Calculate Consumption after creating Pick from Pick Worksheet from Released Production Order.
       30. Test the error while creating Pick after updating Allow Break Bulk as false on Location after registering Put-Away.
       31. Test the partial posting of Inventory Pick with Item Tracking and Reservation of Production Order Component.
       32. Test the posting of Inventory Pick with Item Tracking and Reservation of Production Order Component.
       33. Test the creation of Put-Away of Finished Item from Warehouse Internal Put-Away.
       34. Test the functionality of posting Warehouse Shipment with multiple lines for Serial and Lot Tracking with Manual Expiration Entry Date Required true and Bin modified on Put-Away Line.
       35. Test the functionality of posting Warehouse Shipment with multiple lines for Serial and Lot Tracking and Bin modified on Put-Away Line.
       36. Test the functionality of Undo Shipment for Sales Order for both Items with Lot No. and without Tracking.
       37. Test the functionality of Register Partial Pick and Post Partial Shipment from Sales Order with Multiple Lot Nos.
       38. Test the functionality of Register remaining Pick and Posting remaining Shipment from Sales Order with Multiple Lot Nos.
       39. Test the functionality of Posting Shipment after deleting remaining Pick from Sales Order with Lot No.
       40. Test the functionality of Posting Shipment after deleting remaining Pick from Transfer Order with Lot No.
       41. Test the functionality of Posting Shipment after deleting remaining Pick from Purchase Return Order with Lot No.
       42. Test the functionality of Posting Shipment after registering Pick from Sales Order with Lot No.
       43. Test the functionality of creating Warehouse Shipment from Transfer Order with Lot No.
       44. Test the functionality of creating Pick from Warehouse Shipment from Transfer Order with Lot No.
       45. Test the functionality of posting Warehouse Shipment after registering Pick from Transfer Order with Lot No.
       46. Test the functionality of creating Warehouse Shipment from Purchase Return Order with Lot No.
       47. Test the functionality of creating Pick from Warehouse Shipment from Purchase Return Order with Lot No.
       48. Test the functionality of posting Warehouse Shipment after registering Pick from Purchase Return Order with Lot No.
       49. Test the functionality of creating Pick from Warehouse Internal Pick with Item Variant and different Unit of Measure Code.
       50. Test the functionality of creating Production Order after creating Pick from Warehouse Internal Pick with Item Variant and different Unit of Measure Code.
       51. Test the Error message while updating Bin Code on Warehouse Receipt Line as Warehouse Class Code was not updated on Bin.
       52. Test the functionality of creating and registering Put-Away from Purchase Order with Warehouse Class Code.
       53. Test the Error message while updating Bin Code on Warehouse Shipment Line as Warehouse Class Code was not updated on Bin.
       54. Test the functionality of posting Warehouse Shipment from Sales Order with Warehouse Class Code.
       55. Test the functionality of create Warehouse Receipt from a Purchase Order with multiple location and one location without Require Receive.
       56. Test the functionality of create Warehouse Shipment from a Sales Order with multiple location and one location without Require Shipment.
       57. Verify that Shipping Agent Code,Shipping Agent Service Code and Shipment method code populated when create Inventory Put-away/Pick from transfer order.
       58. Verify that Shipping Agent Code,Shipping Agent Service Code and Shipment method code does not populated when create Inventory Put-away/Pick from transfer order.
       59. Verify inventory error when posting transfer shipment.
       60. Verify transfer shipment posted successfully with undo sales shipment.
       61. Verify remaining quantity error with undo shipment and with undo receipt.
       62. Verify inventory error with undo shipment and with posting transfer shipment.
       63. Verify Qty. to Ship is correct in Transfer Order after a part of the Lines has been posted through an Inventory Pick.
       64. Verify Qty. to Receive is correct in Transfer Order after a part of the Lines has been posted through an Inventory Put-away.
       65. Test the functionality of populating Dimension Code on the transfer line according to the transfer header.
       66. Verify a Requsition line is suggested for Sales Order when calculate plan for component (stock has been picked from Released Production Order with Item Tracking).
       67. Verify Reservation Entries after register pick lines with changing LOT and pick line's qty

      Covers Test Cases for WI - 286178
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      ShipmentPostErrorWithBlankQuantityToHandleAndSerialNo                     127619
      GetSourceDocumentsOnWarehouseReceipt                                      127574
      WarehouseShipmentErrorWithShippingAdviceCompleteWithTwoLocations          127551
      CreateWarehouseShipmentWithShippingAdvicePartialOnTwoLocations            127551
      CreatePickWithDifferentSalesUnitOfMeasure                                 127569
      PostShipmentWithDifferentSalesUnitOfMeasure                               127569

      Covers Test Cases for WI - 285472
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PostPurchaseOrderAfterWarehousePutAwayRegisterWithLotNo                   124855
      PostSalesOrderAfterWarehousePickRegisterWithLotNo                         124855

      Covers Test Cases for WI - 285473
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PostPurchaseOrderAfterWarehousePutAwayRegisterWithSerialNo                124856
      PostSalesOrderAfterWarehousePickRegisterWithSerialNo                      124856

      Covers Test Cases for WI - 286203
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      InventoryPutAwayAndPickFromSalesOrderWithMultipleItems                    127585
      InventoryPickFromSalesOrderWithItemReserveBeforePurchaseOrder             127630
      InventoryPickFromSalesWithItemReserveAfterItemJournal                     127631

      Covers Test Cases for WI - 286208
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      InventoryPickFromSalesOrderWithBin                                        127558
      InventoryPickFromTransferOrder                                            127639
      InventoryPutAwayFromTransferOrder                                         127639
      InventoryPickFromTransferOrderWithLotNo                                   135577

      Covers Test Cases for WI - 288418
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      WarehouseShipmentFromSalesOrderWithMultipleLocations                      135470
      WarehouseShipmentFromSalesOrderWithNewSalesLine                           135470

      Covers Test Cases for WI -  288419
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      GetSourceDocumentsOnWarehouseShipment                                     135471

      Covers Test Cases for WI -  290161
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      GetSourceDocumentsOnWarehouseShipmentWithItemTracking                     128754
      CalculateConsumptionAfterPickFromReleasedProductionOrder                  128781
      ReservationWithoutItemTrackingUsingPlanningWorksheet                      128790
      CreatePickWithTwoPutAwaysWithOneRegistered                                127571
      RegisterPickFromSalesOrderByPage                                          127689

      Covers Test Cases for WI -  293077
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PickFromSalesOrderWithBinCodeModifiedOnPutAwayLine                        143066

      Covers Test Cases for WI -  293094
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      CreatePartialPickFromPickWorksheetWithMultipleLines                       142013
      CreatePickFromReleasedProductionOrderFromFirmPlannedProductionOrder       128782
      CalculateConsumptionAndPickFromPickWorksheetFromReleasedProductionOrder   128848

      Covers Test Cases for WI -  293095
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      CreatePickErrorWithAllowBreakBulkFalseOnLocation                          128836

      Covers Test Cases for WI -  293096
      --------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      --------------------------------------------------------------------------------------
      PostPartialInventoryPickWithItemTrackingAndReservationForProdOrderComponent     164132
      PostInventoryPickWithItemTrackingAndReservationForProdOrderComponent            164132

      Covers Test Cases for WI -  293097
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      CreatePutAwayOfFinishedItemUsingInternalPutAway                           128783

      Covers Test Cases for WI -  294070
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PostWarehouseShipmentWithManualExpirationDateEntryRequired                130763
      PostWarehouseShipmentWithoutManualExpirationDateEntryRequired             130764

      Covers Test Cases for WI - 295218
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      UndoShipmentForSalesOrderForItemsWithLotNoAndWithoutTracking              135582

      Covers Test Cases for WI - 290338
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      RegisterPartialPickAndPostPartialShipmentWithMultipleLotNo                143083
      RegisterRemainingPickAndPostRemainingShipmentWithMultipleLotNo            143083

      Covers Test Cases for WI - 290195
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PostShipmentAfterDeletingRemainingPickFromSalesOrderWithLotNo             234825
      PostShipmentAfterDeletingRemainingPickFromTransferOrderWithLotNo          234825
      PostShipmentAfterDeletingRemainingPickFromPurchaseReturnOrderWithLotNo    234825

      Covers Test Cases for WI - 297083
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      PostWarehouseShipmentAfterRegisteringPickFromSalesOrderWithLotNo          235348
      WarehouseShipmentFromTransferOrderWithLotNo                               235348
      CreatePickFromTransferOrderWithLotNo                                      235348
      PostWarehouseShipmentFromTransferOrderWithLotNo                           235348
      WarehouseShipmentFromPurchaseReturnOrderWithLotNo                         235348
      CreatePickFromPurchaseReturnOrderWithLotNo                                235348
      PostWarehouseShipmentFromPurchaseReturnOrderWithLotNo                     235348

      Covers Test Cases for WI - 290049
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      PickFromWarehouseInternalPickWithItemVariantAndMultipleUOM                    128843
      ProductionOrderAfterPickFromWhseInternalPickWithItemVariantAndMultipleUOM     128843

      Covers Test Cases for WI - 290074
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      WarehouseClassCodeErrorOnWarehouseReceipt                                     128745
      RegisterPutAwayWithWarehouseClassCode                                         128745
      WarehouseClassCodeErrorOnWarehouseShipment                                    128745
      PostWarehouseShipmentFromSalesOrderWithWarehouseClassCode                     128745

      Covers Test cases for Bug ID:7358
      ------------------------------------------------------------------------------------
      Test Function                                                                 TFS ID
      ------------------------------------------------------------------------------------
      CreateWarehouseReceiptFromPurchaseOrderWithMultipleLocation                   336593
      CreateWarehouseShipmentFromSalesOrderWithMultipleLocation                     336593

      BUG ID 53762
      ------------------------------------------------------------------------------------
      CheckWareHouseActivityLineWithShippingValues,
      CheckWareHouseActivityLineWithOutShippingValues
      ------------------------------------------------------------------------------------

      BUG ID 56856
      ------------------------------------------------------------------------------------
      CheckInventoryErrorOnTransferOrder,CheckPostingOnTransferOrder,
      CheckErrorOnTransferOrderWithUndoShipmentAndUndoReceipt,CheckInventoryErrorOnTransferOrderWithUndoShipment
      ------------------------------------------------------------------------------------

      Covers Code Defect for Bug ID: 70882
      ------------------------------------------------------------------------------------
      Test Function                                                                 TFS ID
      ------------------------------------------------------------------------------------
      QtyToShipInTransferOrderAfterInvPick                                          70882
      QtyToReceiveInTransferOrderAfterInvPutaway                                    70882

      Covers Test Cases for Hotfix - 71945
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      DimensionPopulatedOnTransferOrderLine                                         71945

      Covers Code Defect for Bug ID: 90932
      -------------------------------------------------------------------------------------
      Test Function                                                                  TFS ID
      -------------------------------------------------------------------------------------
      CalcPlanForComponentAfterStockPickedFromProdOrderWithTracking                  90932

      RegisterTwoPickLinesWithSpecificQtyAndChangedLOT                               103888
    }
    END.
  }
}

