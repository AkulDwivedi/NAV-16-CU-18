OBJECT Codeunit 136310 Job Batch Jobs
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryJob@1002 : Codeunit 131920;
      CreditMemoError@1008 : TextConst 'ENU=Credit Memo must not exist.';
      ThereIsNothingToChangeError@1003 : TextConst 'ENU=There is nothing to change.';
      TotalAmountError@1001 : TextConst 'ENU=Total amount must be equal.';
      SalesLineMustNotExistError@1015 : TextConst 'ENU=Sales Line must not exist.';
      UnknownError@1005 : TextConst 'ENU=Unknown Error';
      SalesInvoiceExistErr@1024 : TextConst 'ENU=%1 should be empty.';
      LibraryCosting@1029 : Codeunit 132200;
      LibraryERM@1007 : Codeunit 131300;
      LibraryInventory@1023 : Codeunit 132201;
      LibraryResource@1032 : Codeunit 130511;
      LibrarySales@1016 : Codeunit 130509;
      LibraryPurchase@1021 : Codeunit 130512;
      LibraryUtility@1017 : Codeunit 131000;
      LibraryUTUtility@1027 : Codeunit 131008;
      JobCreateInvoice@1028 : Codeunit 1002;
      LibraryRandom@1030 : Codeunit 130440;
      LibrarySetupStorage@1033 : Codeunit 131009;
      CancelJobTransferToCreditMemo@1013 : Boolean;
      ChangeCurrencyDate@1011 : Boolean;
      ChangePlanningDate@1012 : Boolean;
      CreateNewCreditMemo@1014 : Boolean;
      IsInitialized@1000 : Boolean;
      AppendSalesInvoice@1019 : Boolean;
      ReverseOnly@1006 : Boolean;
      IncludeLineType@1010 : ' ,Schedule,Contract,Schedule+Contract';
      PostingDate@1009 : Date;
      NewRelationalExchangeRateAmount@1018 : Decimal;
      SalesLineTransferError@1020 : TextConst 'ENU=The lines were not transferred to an invoice.';
      JobNoErr@1022 : TextConst 'ENU=The field Job No. of table Job Planning Line Invoice contains a value (%1) that cannot be found in the related table (Job).';
      JobTaskNoErr@1025 : TextConst 'ENU=The field Job Task No. of table Job Planning Line Invoice contains a value (%1) that cannot be found in the related table (Job Task).';
      LineNoErr@1026 : TextConst 'ENU=The field Job Planning Line No. of table Job Planning Line Invoice contains a value (%1) that cannot be found in the related table (Job Planning Line).';
      WrongValueErr@1031 : TextConst 'ENU=Wrong value for field %1';

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler)]
    PROCEDURE JobDateReportWithDefaultSetting@6();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for Default setting and handle error message.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);

      // 2. Exercise: Run Change Job Dates report.
      ASSERTERROR RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check the expected ERROR.
      Assert.AreEqual(STRSUBSTNO(ThereIsNothingToChangeError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler)]
    PROCEDURE JobDateReportWithoutChangeCurrencyAndPlanningDateForSchedule@9();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for false setting of change Currency and Planning date for include Line Type Schedule and handle error message.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      AssignGlobalVariable(FALSE,FALSE,IncludeLineType::Schedule);  // Assign global variables.

      // 2. Exercise: Run Change Job Dates report.
      ASSERTERROR RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check the expected ERROR.
      Assert.AreEqual(STRSUBSTNO(ThereIsNothingToChangeError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler,MessageHandler)]
    PROCEDURE JobDateReportWithChangeCurrencyAndPlanningDateForSchedule@65();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for true setting of change Currency and Planning date for include Line Type Schedule and validate Job Planning Line.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      AssignGlobalVariable(TRUE,TRUE,IncludeLineType::Schedule);  // Assign global variables.

      // 2. Exercise: Run Change Job Dates report.
      RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check Planning Date in Job Planning Line.
      VerifyJobPlanningLine(
        JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line Type"::Schedule,JobPlanningLine."No.");
    END;

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler,MessageHandler)]
    PROCEDURE JobDateReportWithChangeCurrencyAndPlanningDateForContract@71();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for true setting of change Currency and Planning date for include Line Type Contract and validate Job Planning Line.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      AssignGlobalVariable(TRUE,TRUE,IncludeLineType::Contract);  // Assign global variables.

      // 2. Exercise: Run Change Job Dates report.
      RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check Planning Date in Job Planning Line.
      VerifyJobPlanningLine(
        JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line Type"::Contract,JobPlanningLine."No.");
    END;

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler)]
    PROCEDURE JobDateReportWithoutChangeCurrencyAndPlanningDateForContract@75();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for false setting of change Currency and Planning date for include Line Type Contract and handle error message.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      AssignGlobalVariable(FALSE,FALSE,IncludeLineType::Contract);  // Assign global variables.

      // 2. Exercise: Run Change Job Dates report.
      ASSERTERROR RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check the expected ERROR.
      Assert.AreEqual(STRSUBSTNO(ThereIsNothingToChangeError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler,MessageHandler)]
    PROCEDURE JobDateReportWithChangeCurrencyAndPlanningDateForBothScheduleAndContract@78();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for true setting of change Currency and Planning date for include Line Type Both Schedule and Contract and validate Job Planning Line.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::"Both Schedule and Contract",JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      AssignGlobalVariable(TRUE,TRUE,IncludeLineType::"Schedule+Contract");  // Assign global variables.

      // 2. Exercise: Run Change Job Dates report.
      RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check Planning Date in Job Planning Line.
      VerifyJobPlanningLine(
        JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line Type"::"Both Schedule and Contract",
        JobPlanningLine."No.");
    END;

    [Test]
    [HandlerFunctions(ChangeJobDatesHandler)]
    PROCEDURE JobDateReportWithoutChangeCurrencyAndPlanningDateForBothScheduleAndContract@81();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Run Job Date report for false setting of change Currency and Planning date for include Line Type Both Schedule and Contract and handle error message.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::"Both Schedule and Contract",JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      AssignGlobalVariable(FALSE,FALSE,IncludeLineType::"Schedule+Contract");  // Assign global variables.

      // 2. Exercise: Run Change Job Dates report.
      ASSERTERROR RunChangeJobDates(JobTask."Job Task No.",JobTask."Job No.");  // Handler will be used for this report.

      // 3. Verify: Check the expected ERROR.
      Assert.AreEqual(STRSUBSTNO(ThereIsNothingToChangeError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobCalculateWIPBatch@8();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1004 : Record 210;
    BEGIN
      // Test functionality of Job Calculate WIP batch.

      // 1. Setup: Create Initial setup for Job.
      Initialize;
      CreateInitialSetupForJob(Job,JobJournalLine,JobTask."WIP-Total"::" ");

      // 2. Exercise: Run Job Calculate WIP.
      RunJobCalculateWIP(Job);

      // 3. Verify: Verify Total WIP Cost Amount.
      Assert.AreEqual(JobJournalLine."Total Cost",GetTotalWIPCostAmount(Job),TotalAmountError);
    END;

    [Test]
    [HandlerFunctions(JobPostWIPToGLHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPostWIPToGLBatchWithReverseOnlyFalse@25();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1004 : Record 210;
    BEGIN
      // Test functionality of Job Post WIP To G/L batch with ReverseOnly as False.

      // 1. Setup: Create Initial setup for Job. Run Job Calculate WIP.
      Initialize;
      CreateInitialSetupForJob(Job,JobJournalLine,JobTask."WIP-Total"::" ");
      RunJobCalculateWIP(Job);

      // 2. Exercise: Run Job Post WIP To G/L.
      RunJobPostWIPToGL(Job);

      // 3. Verify: Verify Total WIP Cost G/L Amount.
      Assert.AreEqual(JobJournalLine."Total Cost",GetTotalWIPCostGLAmount(Job),TotalAmountError);
    END;

    [Test]
    [HandlerFunctions(JobPostWIPToGLHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPostWIPToGLBatchWithReverseOnlyTrue@26();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1004 : Record 210;
    BEGIN
      // Test functionality of Job Post WIP To G/L batch with ReverseOnly as True.

      // 1. Setup: Create Initial setup for Job. Run Job Calculate WIP. Run Job Post WIP To G/L.
      Initialize;
      CreateInitialSetupForJob(Job,JobJournalLine,JobTask."WIP-Total"::" ");
      RunJobCalculateWIP(Job);
      RunJobPostWIPToGL(Job);

      // 2. Exercise: Run Job Post WIP To G/L with Reverse Only as True.
      ReverseOnly := TRUE;  // Use global variable ReverseOnly for JobPostWIPToGLHandler handler function.
      RunJobPostWIPToGL(Job);

      // 3. Verify: Verify Total WIP Cost G/L Amount.
      Assert.AreEqual(0,GetTotalWIPCostGLAmount(Job),TotalAmountError);
    END;

    [Test]
    [HandlerFunctions(JobPostWIPToGLHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPostWIPToGLBatchWithChangingPostingGroup@1();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1004 : Record 210;
      GLAccount@1006 : Record 15;
      OldWIPCostsAccount@1005 : Code[20];
    BEGIN
      // Test functionality of Job Post WIP To G/L batch with changing Posting Group.

      // 1. Setup: Create Initial setup for Job. Run Job Calculate WIP. Run Job Post WIP To G/L.
      Initialize;
      CreateInitialSetupForJob(Job,JobJournalLine,JobTask."WIP-Total"::" ");
      RunJobCalculateWIP(Job);
      RunJobPostWIPToGL(Job);

      // 2. Exercise: Create G/L Account and update WIP Costs Account. Run Job Calculate WIP. Run Job Post WIP To G/L.
      LibraryERM.CreateGLAccount(GLAccount);
      OldWIPCostsAccount := UpdateWIPCostsAccount(Job."Job Posting Group",GLAccount."No.");
      RunJobCalculateWIP(Job);
      RunJobPostWIPToGL(Job);

      // 3. Verify: Verify Job WIP G/L Entry.
      VerifyJobWIPGLEntryWithGLBalAccountNo(Job."No.",OldWIPCostsAccount);
      VerifyJobWIPGLEntryWithGLBalAccountNo(Job."No.",GLAccount."No.");

      // 4. Tear down: Rollback WIP Costs Account changes.
      UpdateWIPCostsAccount(Job."Job Posting Group",OldWIPCostsAccount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPostWIPToGLBatchWithChangingWIPMethod@4();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1004 : Record 210;
      JobWIPMethod@1000 : Record 1006;
      JobCalculateWIP@1005 : Codeunit 1000;
      TotalPrice@1003 : Decimal;
    BEGIN
      // Test functionality of Job Calculate WIP batch with changing WIP Method.

      // 1. Setup: Create Initial setup for Job. Run Job Calculate WIP.
      Initialize;
      TotalPrice := CreateInitialSetupForJob(Job,JobJournalLine,JobTask."WIP-Total"::" ");
      RunJobCalculateWIP(Job);

      // 2. Exercise: Delete WIP Entries and change WIP Method on the Job. Run Job Calculate WIP.
      JobCalculateWIP.DeleteWIP(Job);
      CreateJobWIPMethod(
        JobWIPMethod,JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",JobWIPMethod."Recognized Sales"::"Sales Value");
      UpdateWIPMethodOnJob(Job,JobWIPMethod.Code);
      RunJobCalculateWIP(Job);

      // 3. Verify: Verify Total WIP Sales Amount, Total WIP Cost Amount and Recog. Sales Amount.
      Assert.AreEqual(
        -JobJournalLine."Total Price" * JobJournalLine."Total Price" / TotalPrice,GetTotalWIPSalesAmount(Job),TotalAmountError);
      Assert.AreEqual(0,GetTotalWIPCostAmount(Job),TotalAmountError);
      Assert.AreEqual(
        JobJournalLine."Total Price" * JobJournalLine."Total Price" / TotalPrice,GetRecogSalesAmount(Job),TotalAmountError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobCalculateWIPBatchForExcludingPartOfJob@24();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobJournalLine@1004 : Record 210;
    BEGIN
      // Test functionality of Job Calculate WIP batch for excluding part of Job.

      // 1. Setup: Create Initial setup for Job.
      Initialize;
      CreateInitialSetupForJob(Job,JobJournalLine,JobTask."WIP-Total"::Excluded);

      // 2. Exercise: Run Job Calculate WIP.
      RunJobCalculateWIP(Job);

      // 3. Verify: Verify Total WIP Cost Amount.
      Assert.AreEqual(0,GetTotalWIPCostAmount(Job),TotalAmountError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE JobSplitPlanningLine@31();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
    BEGIN
      // Test functionality of Job Split Planning Line.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);

      // 2. Exercise: Run Job Split Planning Line.
      RunJobSplitPlanningLine(JobTask);

      // 3. Verify: Verify Job Planning lines.
      VerifyValuesOnJobPlanningLine(
        JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",LibraryJob.PlanningLineTypeSchedule,JobPlanningLine.Quantity);
      VerifyValuesOnJobPlanningLine(
        JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",LibraryJob.PlanningLineTypeContract,JobPlanningLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(JobTransferToPlanningLinesHandler,MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE JobTransferToPlanningLines@14();
    VAR
      JobTask@1002 : Record 1001;
      JobJournalLine@1003 : Record 210;
      LineNo@1004 : Integer;
    BEGIN
      // Test functionality of Job Transfer To Planning Lines.

      // 1. Setup: Create Job and Job Task. Create and post Job Journal Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeBoth,JobJournalLine.Type::Item,JobTask,JobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);
      LineNo := FindLastPlanningLineNo(JobTask);

      // 2. Exercise: Run Job Transfer To Planning Lines.
      RunJobTransferToPlanningLines(JobJournalLine."Document No.");

      // 3. Verify: Verify Transfer Job Planning Line.
      VerifyTransferJobPlanningLine(JobJournalLine,LibraryJob.PlanningLineTypeSchedule,LineNo);
      VerifyTransferJobPlanningLine(JobJournalLine,LibraryJob.PlanningLineTypeContract,LineNo);
    END;

    [Test]
    [HandlerFunctions(JobCalcRemainingUsageHandler,MessageHandler)]
    PROCEDURE JobCalcRemainingUsage@36();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalBatch@1006 : Record 237;
    BEGIN
      // Test functionality of Job Calc. Remaining Usage.

      // 1. Setup: Create Job, Job Task, Job Planning Line and Job Journal Batch.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,CreateResource,JobTask);
      CreateJobJournalBatch(JobJournalBatch);

      // 2. Exercise: Run Job Calc. Remaining Usage.
      RunJobCalcRemainingUsage(JobJournalBatch,JobTask);

      // 3. Verify: Verify Job Journal Line.
      VerifyJobJournalLine(JobJournalBatch,JobPlanningLine);
    END;

    [Test]
    PROCEDURE CreatePlanningLineFromPurchaseInvoice@45();
    VAR
      JobTask@1002 : Record 1001;
      Quantity@1000 : Decimal;
    BEGIN
      // Test Create Planning Line from Purchase Invoice.

      // 1. Setup: Create Job and Job Task.
      Initialize;
      CreateJobAndJobTask(JobTask);

      // 2. Exercise: Create and post Purchase Invoice.
      Quantity := CreateAndPostPurchaseInvoice(JobTask);

      // 3. Verify: Verify Job Planning Lines.
      VerifyValuesOnJobPlanningLine(JobTask."Job No.",JobTask."Job Task No.",LibraryJob.PlanningLineTypeSchedule,Quantity);
      VerifyValuesOnJobPlanningLine(JobTask."Job No.",JobTask."Job Task No.",LibraryJob.PlanningLineTypeContract,Quantity);
    END;

    [Test]
    [HandlerFunctions(JobTransferToCreditMemoHandler)]
    PROCEDURE JobTransferToCreditMemoWithoutPostingDate@34();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Test functionality of Job Transfer To Credit Memo without Posting Date.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);

      // 2. Exercise: Transfer Job to Credit Memo.
      TransferJobToSales(JobPlanningLine,TRUE);  // Use True for Credit Memo.

      // 3. Verify: Credit Memo must not exist.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.SETRANGE("Bill-to Customer No.",FindBillToCustomerNo(JobTask."Job No."));
      Assert.IsFalse(SalesHeader.FINDFIRST,CreditMemoError);
    END;

    [Test]
    [HandlerFunctions(JobTransferToCreditMemoHandler,MessageHandler)]
    PROCEDURE JobTransferToCreditMemoWithPostingDate@33();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test functionality of Job Transfer To Credit Memo with Posting Date.

      // 1. Setup: Create Job, Job Task and Job Planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);

      // 2. Exercise: Set Posting Date and Transfer Job to Credit Memo.
      PostingDate := WORKDATE;  // Set global variable PostingDate.
      CreateNewCreditMemo := TRUE;  // Set global variable CreateNewCreditMemo.
      TransferJobToSales(JobPlanningLine,TRUE);  // Use True for Credit Memo.

      // 3. Verify: Verify Values On Sales Line.
      VerifyValuesOnSalesLineForCreditMemo(
        FindSalesHeader(JobTask."Job No.",SalesHeader."Document Type"::"Credit Memo"),JobPlanningLine);
    END;

    [Test]
    [HandlerFunctions(JobTransferToCreditMemoHandler,MessageHandler)]
    PROCEDURE JobTransferToCreditMemoWithSetCancel@37();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobPlanningLine2@1004 : Record 1003;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Test functionality of Job Transfer To Credit Memo with Set Cancel.

      // 1. Setup: Create Job, Job Task and Job Planning Line. Set Posting Date and Transfer Job to Credit Memo.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);
      PostingDate := WORKDATE;  // Set global variable PostingDate.
      CreateNewCreditMemo := TRUE;  // Set global variable CreateNewCreditMemo.
      TransferJobToSales(JobPlanningLine,TRUE);  // Use True for Credit Memo.
      CreateJobPlanningLine(JobPlanningLine2,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);

      // 2. Exercise: Transfer Job to Credit Memo.
      CreateNewCreditMemo := FALSE;  // Set global variable CreateNewCreditMemo.
      CancelJobTransferToCreditMemo := TRUE;  // Set global variable CancelJobTransferToCreditMemo.
      TransferJobToSales(JobPlanningLine2,TRUE);  // Use True for Credit Memo.

      // 3. Verify: Second Job Planning Line must not append to Credit Memo.
      Assert.IsFalse(
        FindSalesLine(
          SalesLine,SalesLine."Document Type"::"Credit Memo",
          FindSalesHeader(JobTask."Job No.",SalesHeader."Document Type"::"Credit Memo"),JobPlanningLine2."No."),
        SalesLineMustNotExistError);
    END;

    [Test]
    [HandlerFunctions(JobTransferToCreditMemoHandler,MessageHandler,SalesListHandler)]
    PROCEDURE JobTransferToCreditMemoWithoutSetCancel@32();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobPlanningLine2@1004 : Record 1003;
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test functionality of Job Transfer To Credit Memo without Set Cancel.

      // 1. Setup: Create Job, Job Task and Job Planning Line. Set Posting Date and Transfer Job to Credit Memo.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);
      PostingDate := WORKDATE;  // Set global variable PostingDate.
      CreateNewCreditMemo := TRUE;  // Set global variable CreateNewCreditMemo.
      TransferJobToSales(JobPlanningLine,TRUE);  // Use True for Credit Memo.
      CreateJobPlanningLine(JobPlanningLine2,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);

      // 2. Exercise: Transfer Job to Credit Memo.
      CreateNewCreditMemo := FALSE;  // Set global variable CreateNewCreditMemo.
      TransferJobToSales(JobPlanningLine2,TRUE);  // Use True for Credit Memo.

      // 3. Verify: Second Job Planning Line must append to Credit Memo.
      VerifyValuesOnSalesLineForCreditMemo(
        FindSalesHeader(JobTask."Job No.",SalesHeader."Document Type"::"Credit Memo"),JobPlanningLine);
      VerifyValuesOnSalesLineForCreditMemo(
        FindSalesHeader(JobTask."Job No.",SalesHeader."Document Type"::"Credit Memo"),JobPlanningLine2);
    END;

    [Test]
    [HandlerFunctions(JobCreateSalesInvoiceHandler,MessageHandler)]
    PROCEDURE CreateSalesInvoiceFromJobTask@64();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Test functionality of Job Create Sales Invoice.

      // 1. Setup: Create Job, Job Task and Job planning Line.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);

      // 2. Exercise: Run Job Create Sales Invoice.
      RunJobCreateSalesInvoice(JobTask);

      // 3. Verify: Verify values on Sales Line for invoice.
      VerifyValuesOnSalesLineForInvoice(FindSalesHeader(JobTask."Job No.",SalesHeader."Document Type"::Invoice),JobPlanningLine);
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE CreateSalesInvoiceFromJobPlanningLine@49();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Create a Sales Invoice for a Job and verify that Total Cost (LCY) must be equal to Invoiced Cost Amount (LCY) on Job Planning Line.

      // 1. Setup: Create Job, Job Task and Job planning Line. Transfer Job to Sales Invoice.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeBoth,LibraryJob.ResourceType,CreateResource,JobTask);
      TransferJobToSales(JobPlanningLine,FALSE);  // Use False for Invoice.

      // 2. Exercise: Find and post Sales Invoice.
      FindAndPostSalesInvoice(JobTask."Job No.");

      // 3. Verify: Verify Total Cost (LCY) must be equal to Invoiced Cost Amount (LCY) on Job Planning Line.
      JobPlanningLine.CALCFIELDS("Invoiced Cost Amount (LCY)");
      JobPlanningLine.TESTFIELD("Total Cost (LCY)",JobPlanningLine."Invoiced Cost Amount (LCY)");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE LineDiscountAmountOnSalesInvoice@69();
    VAR
      JobTask@1002 : Record 1001;
      JobJournalLine@1001 : Record 210;
      JobPlanningLine@1000 : Record 1003;
      LineAmount@1003 : Decimal;
    BEGIN
      // Verify Line Discount Amount on Sales Invoice created from Job Planning Lines.

      // 1. Setup: Create Job, Job Task, Job Journal Line and post it after updating Line Amount.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LineAmount := CreateUpdateAndPostJobJournalLine(JobJournalLine,JobTask);
      FindJobPlanningLine(JobPlanningLine,JobTask);

      // 2. Exercise: Create Sales Invoice from Job Planning Lines.
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);  // Use False for Invoice.

      // 3. Verify: Verify Line Discount Amount on Sales Line.
      VerifyLineDiscountAmountOnSalesLine(JobJournalLine."Job No.",LineAmount - JobJournalLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE PostSalesInvoiceCreatedFromJobPlanningLine@72();
    VAR
      Customer@1004 : Record 18;
      JobTask@1003 : Record 1001;
      JobJournalLine@1002 : Record 210;
      JobPlanningLine@1005 : Record 1003;
      GeneralPostingSetup@1013 : Record 252;
      DocumentNo@1010 : Code[20];
      LineAmount@1000 : Decimal;
    BEGIN
      // Verify posting the Sales Invoice created from Job Planning Lines after updating Line Amount on Job Journal Line and post it.

      // 1. Setup: Create Job, Job Task, Job Journal Line and post it after updating Line Amount.Transfer Job to Sales Invoice.
      Initialize;
      CreateJobAndJobTask(JobTask);
      LineAmount := CreateUpdateAndPostJobJournalLine(JobJournalLine,JobTask);
      FindJobPlanningLine(JobPlanningLine,JobTask);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);  // Use False for Invoice.
      Customer.GET(FindBillToCustomerNo(JobTask."Job No."));
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",JobJournalLine."Gen. Prod. Posting Group");

      // 2. Exercise: Find and post Sales Invoice.
      DocumentNo := FindAndPostSalesInvoice(JobTask."Job No.");

      // 3. Verify: Verify values on Job Ledger Entry and G/L Entry.
      VerifyJobLedgerEntry(JobJournalLine,DocumentNo,LineAmount);
      VerifyGLEntry(GeneralPostingSetup."Sales Account",DocumentNo,-LineAmount);
      VerifyGLEntry(GeneralPostingSetup."Sales Line Disc. Account",DocumentNo,LineAmount - JobJournalLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(JobCreateSalesInvoiceHandler,MessageHandler)]
    PROCEDURE CreateSalesInvoiceForItemFromJobTask@59();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Check functionality of Job Create Sales Invoice with Type Item on Job Planning Line.

      // 1. Setup: Create Job, Job Task and Job planning Line with Item.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,CreateItem,JobTask);

      // 2. Exercise: Run Job Create Sales Invoice.
      RunJobCreateSalesInvoice(JobTask);

      // 3. Verify: Verify values on Sales Line for Invoice.
      VerifyValuesOnSalesLineForInvoice(FindSalesHeader(JobTask."Job No.",SalesHeader."Document Type"::Invoice),JobPlanningLine);
    END;

    [Test]
    PROCEDURE LineAmountOnJobJournalLine@105();
    VAR
      JobTask@1002 : Record 1001;
      JobJournalLine@1001 : Record 210;
      LineAmount@1003 : Decimal;
      DiscountAmount@1005 : Decimal;
      FractionValue@1000 : Decimal;
    BEGIN
      // Verify Line Amount and Line Discount Amount on Job Journal Line after updating the Line Amount.

      // 1. Setup: Create Job, Job Task.
      Initialize;
      CreateJobAndJobTask(JobTask);

      // 2. Exercise: Create Job Journal Line and update Line Amount and calculate values.
      FractionValue := LibraryRandom.RandInt(99) / 100;
      CreateAndUpdateJobJournalLine(JobJournalLine,JobTask,FractionValue);
      LineAmount := JobJournalLine.Quantity * JobJournalLine."Unit Price" - FractionValue;
      DiscountAmount := ROUND(JobJournalLine."Line Amount" * JobJournalLine."Line Discount %" / 100);

      // 3. Verify: Verify Line Amount and Line Discount Amount on Job Journal Line.
      Assert.AreNearlyEqual(LineAmount,JobJournalLine."Line Amount",LibraryERM.GetAmountRoundingPrecision,'Line Amount must match.');
      Assert.AreNearlyEqual(
        DiscountAmount,JobJournalLine."Line Discount Amount",LibraryERM.GetAmountRoundingPrecision,'Line Disc. Amount must match.');
    END;

    [Test]
    [HandlerFunctions(ChangeExchangeRatePageHandler,JobTransferToSalesInvoiceHandler,SalesListHandler,ConfirmHandlerFalse)]
    PROCEDURE SalesInvoiceLineWithExchangeRatesConfirmFalse@77();
    VAR
      CurrencyExchangeRate@1008 : Record 330;
      JobPlanningLine@1004 : Record 1003;
      SalesHeader@1003 : Record 36;
    BEGIN
      // Verify no Sales Invoice Line is created through append functionality on Job Planning Line when click No on the confirmation message.

      // 1. Setup: Create Currency with Exchange Rate, create Job Planning Line with Currency and Sales Invoice Header with Currency. Change Exchange Rate on Sales Invoice.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      NewRelationalExchangeRateAmount := CurrencyExchangeRate."Relational Exch. Rate Amount" - LibraryRandom.RandInt(10);  // Modify Relational Exchange Rate field with Random value and assign in Global variable.
      CreateJobPlanningLineWithCurrency(JobPlanningLine,CurrencyExchangeRate."Currency Code");
      ChangeExchangeRateOnSalesInvoice(SalesHeader,JobPlanningLine."Job No.",CurrencyExchangeRate."Currency Code");
      AppendSalesInvoice := TRUE;  // Assign in Global variable.

      // 2. Exercise: Create Sales Invoice Line through Job Planning Line.
      ASSERTERROR RunJobCreateInvoice(JobPlanningLine);

      // 3. Verify: Verify Sales Line is not created.
      Assert.ExpectedError(SalesLineTransferError);
    END;

    [Test]
    [HandlerFunctions(ChangeExchangeRatePageHandler,JobTransferToSalesInvoiceHandler,SalesListHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE CurrencyFactorOnJobPlanningLine@92();
    VAR
      CurrencyExchangeRate@1000 : Record 330;
      JobPlanningLine@1007 : Record 1003;
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      CurrencyFactor@1005 : Decimal;
    BEGIN
      // Verify Currency Factor on Job Planning Line and creation of Sales Invoice Line through append functionality on Job Planning Line when click Yes on the confirmation message
      // and Currency Exchange Rate is different between the Sales Invoice and Job Planning Line.

      // 1. Setup: Create Currency with Exchange Rate, create Job Planning Line with Currency and Sales Invoice Header with Currency. Change Exchange Rate on Sales Invoice.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      NewRelationalExchangeRateAmount := CurrencyExchangeRate."Relational Exch. Rate Amount" - LibraryRandom.RandInt(10);  // Modify Relational Exchange Rate field with Random value and assign in Global variable.
      CurrencyFactor := CurrencyExchangeRate."Exchange Rate Amount" / NewRelationalExchangeRateAmount;

      CreateJobPlanningLineWithCurrency(JobPlanningLine,CurrencyExchangeRate."Currency Code");
      ChangeExchangeRateOnSalesInvoice(SalesHeader,JobPlanningLine."Job No.",CurrencyExchangeRate."Currency Code");
      AppendSalesInvoice := TRUE;  // Assign in Global variable.

      // 2. Exercise: Create Sales Invoice Line through Job Planning Line.
      RunJobCreateInvoice(JobPlanningLine);

      // 3. Verify: Verify Currency Factor on Job Planning Line and Sales Invoice Line exists.
      JobPlanningLine.TESTFIELD("Currency Factor",CurrencyFactor);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",JobPlanningLine."No.");
    END;

    [Test]
    PROCEDURE JobUnitCostAfterAdjustCostItemEntries@90();
    VAR
      InventorySetup@1002 : Record 313;
      JobTask@1003 : Record 1001;
      DocumentNo@1004 : Code[20];
      ItemNo@1006 : Code[20];
      UnitCost@1000 : Decimal;
    BEGIN
      // [FEATURE] [Revaluation] [Adjust Cost Item Entries]
      // [SCENARIO 374796] Unit and Total Cost of Job Ledger Entry and Job Planning Line should be updated after posting Revaluation and executing Adjust Cost Item Entry with "Automatic Update Job Item Cost"

      // [GIVEN] "Automatic Update Job Item Cost" = Yes in Job Setup.
      Initialize;
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      UpdateCostFieldsInInventorySetup(TRUE,InventorySetup."Automatic Cost Adjustment"::Never);
      UpdateAutomaticCostOnJobsSetup(TRUE);
      // [GIVEN] Posted Purchase order
      ItemNo := CreateItem;
      DocumentNo := CreateAndPostPurchaseOrder(JobTask,ItemNo);
      // [GIVEN] Posted revaluation entry with "Unit Cost (Revalued)" = "Y"
      UnitCost := UpdateUnitCostAndPostRevaluationJournal(ItemNo);

      // [WHEN] Run Adjust Cost Item Entries Batch Job
      LibraryCosting.AdjustCostItemEntries(ItemNo,'');  // Passing Blank Value for Item Category Filter.

      // [THEN] "Unit Cost" on Job Ledger Entry = "Y"
      VerifyUnitCostInJobLedgerEntry(DocumentNo,ItemNo,UnitCost);

      // [THEN] "Total Cost" of Item Ledger Entries is equal "Posted Total Costs" of Job Planning Line.
      VerifyPostedTotalCostOfJobPlanningLine(JobTask,ItemNo);
    END;

    [Test]
    [HandlerFunctions(JobCreateSalesInvoiceHandler,MessageHandler,JobInvoicePageHandler,SalesInvoicePageHandler)]
    PROCEDURE CheckEntryAfterDeleteJoInvoiceOnPage@84();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Check Job Planning Line Invoice is Empty after delete the Sales Invoice.

      // 1. Setup: Create Job,Job Task,Job planning Line and Sale Invoice.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,CreateItem,JobTask);
      RunJobCreateSalesInvoice(JobTask);

      // 2. Exercise: Open Job List and Delete The Sales Invoice.
      OpenJobListToDeleteSalesInvoice(JobTask."Job No.");

      // 3. Verify: Verify Job Planning Line Invoice is empty.
      VerifyEntryIsEmptyOnJobPlanningLineInvoice(JobTask);
    END;

    [Test]
    PROCEDURE VerifyTableRelationForJobNo@96();
    VAR
      Job@1000 : Record 167;
      JobPlanningLineInvoice@1001 : Record 1022;
    BEGIN
      // Verify Job No. on Job Planning Line Invoice with Job No on Job.

      // Setup: Create job.
      Initialize;
      LibraryJob.CreateJob(Job);

      // Exercise: Validate Job No on Job Planning Line Invoice.
      CreateJobPlanningLineInvoiceTable(JobPlanningLineInvoice,Job."No.",'',0);

      // Verify: Verifying that Job No. on Job Planning Line Invoice with Job No on Job.
      JobPlanningLineInvoice.TESTFIELD("Job No.",Job."No.");
    END;

    [Test]
    PROCEDURE VerifyTableRelationForJobTaskNo@115();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLineInvoice@1001 : Record 1022;
    BEGIN
      // Verify Job Task No on Job Planning Line Invoice is same as Job Task.

      // Setup: Create Job and Job Task.
      Initialize;
      CreateJobAndJobTask(JobTask);

      // Exercise: Validate Job and Job Task No.
      CreateJobPlanningLineInvoiceTable(JobPlanningLineInvoice,JobTask."Job No.",JobTask."Job Task No.",0);

      // Verify: Verifying that Job Task No on Job Planning Line Invoice is same as Job Task.
      JobPlanningLineInvoice.TESTFIELD("Job No.",JobTask."Job No.");
      JobPlanningLineInvoice.TESTFIELD("Job Task No.",JobTask."Job Task No.");
    END;

    [Test]
    PROCEDURE VerifyTableRelationForJobPlanningLineNo@113();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobPlanningLineInvoice@1000 : Record 1022;
    BEGIN
      // Verify Job No, Job task No and Job Planning Line No on Job Planning Line Invoice.

      // Setup: Create Job, Job Task and Job Planning Line No.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(
        JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,CreateItem,JobTask);

      // Exercise: Validate Job, Job Task No and Job Planning Line No.
      CreateJobPlanningLineInvoiceTable(
        JobPlanningLineInvoice,JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");

      // Verify: Verifying that Job Planning Line No on Job Planning Line Invoice is not same as Job Planning Line.
      JobPlanningLineInvoice.TESTFIELD("Job No.",JobPlanningLine."Job No.");
      JobPlanningLineInvoice.TESTFIELD("Job Task No.",JobPlanningLine."Job Task No.");
      JobPlanningLineInvoice.TESTFIELD("Job Planning Line No.",JobPlanningLine."Line No.")
    END;

    [Test]
    PROCEDURE VerifyTableRelationErrorForJobNo@104();
    VAR
      JobPlanningLine@1001 : Record 1003;
      JobPlanningLineInvoice@1003 : Record 1022;
    BEGIN
      // Verify Job No. on Job Planning Line Invoice table is not same as Job No on Job table

      // Setup: Create Job Planning Line.
      Initialize;
      CreateJobPlanningLineTable(JobPlanningLine);

      // Exercise: Validate Job No of Job Planning Line Invoice.
      JobPlanningLineInvoice.INIT;
      ASSERTERROR JobPlanningLineInvoice.VALIDATE("Job No.",JobPlanningLine."Job No.");

      // Verify: Verifying that Job No. on Job Planning Line Invoice table is not same as Job No on Job.
      Assert.ExpectedError(STRSUBSTNO(JobNoErr,JobPlanningLine."Job No."));
    END;

    [Test]
    PROCEDURE VerifyTableRelationErrorForJobTaskNo@102();
    VAR
      JobPlanningLine@1001 : Record 1003;
      JobPlanningLineInvoice@1000 : Record 1022;
    BEGIN
      // Verify Job Task No on Job Planning Line Invoice table is not same as Job Task.

      // Setup: Create Job Planning Line.
      Initialize;
      CreateJobPlanningLineTable(JobPlanningLine);

      // Exercise: Validate Job and Job Task No of Job Planning Line Invoice.
      JobPlanningLineInvoice.INIT;
      ASSERTERROR JobPlanningLineInvoice.VALIDATE("Job Task No.",JobPlanningLine."Job Task No.");

      // Verify: Verifying that Job Task No on Job Planning Line Invoice Table is not same as Job Task.
      Assert.ExpectedError(STRSUBSTNO(JobTaskNoErr,JobPlanningLine."Job Task No."));
    END;

    [Test]
    PROCEDURE VerifyTableRelationErrorForJobPlanningLineNo@101();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobPlanningLineInvoice@1003 : Record 1022;
    BEGIN
      // Verify Job Planning Line No on Job Planning Line Invoice table is not same as Line No of Job Planning Line.

      // Setup: Create Job Planning Line with Job And Job Task and Job Planning Line Invoice.
      Initialize;
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLineTable(JobPlanningLine);
      CreateJobPlanningLineInvoiceTable(JobPlanningLineInvoice,JobTask."Job No.",JobTask."Job Task No.",0);

      // Exercise: Validate Job Planning Line No of Job Planning Line Invoice.
      ASSERTERROR JobPlanningLineInvoice.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");

      // Verify: Verifying that Job Planning Line No on Job Planning Line Invoice is not same as Line No of Job Planning Line.
      Assert.ExpectedError(STRSUBSTNO(LineNoErr,JobPlanningLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(JobPostWIPToGLHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPostWIPToGLForCost@111();
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      JobWIPMethod@1000 : Record 1006;
      Cost@1005 : Decimal;
    BEGIN
      // Setup: Create Job with WIP Method for Cost side. Create Job Task.
      Initialize;
      CreateInitialSetupForJobWithTask(
        Job,JobTask,Job."WIP Posting Method"::"Per Job Ledger Entry",JobWIPMethod."Recognized Costs"::"Cost Value",
        JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)",JobTask."WIP-Total"::" ");

      // Create Two Job planning Lines. Create and Post Job Journal Lines separately.
      // Exercise: Run Job Calculate WIP and Job WIP To G/L batches.
      // Verify: Verify the WIP Entry Amount on Job WIP G/L Entry.
      PostWIPToGLAndVerifyWIPEntryAmountForCost(Job,JobTask,Cost); // Cost is 1st planning line's Total Cost.
      PostWIPToGLAndVerifyWIPEntryAmountForCost(Job,JobTask,Cost); // Cost is 1st planning line's Total Cost + 2nd planning line's Total Cost .
    END;

    [Test]
    [HandlerFunctions(JobPostWIPToGLHandler,MessageHandler,JobTransferToSalesInvoiceWithPostingDateHandler)]
    PROCEDURE JobPostWIPToGLForSales@108();
    VAR
      Job@1001 : Record 167;
      JobWIPMethod@1008 : Record 1006;
      JobTask@1003 : Record 1001;
      LineAmount@1000 : Decimal;
    BEGIN
      // Setup: Create Job with WIP Method for Sales side. Create Job Task.
      Initialize;
      CreateInitialSetupForJobWithTask(
        Job,JobTask,Job."WIP Posting Method"::"Per Job Ledger Entry",JobWIPMethod."Recognized Costs"::"Usage (Total Cost)",
        JobWIPMethod."Recognized Sales"::"Sales Value",JobTask."WIP-Total"::" ");

      // Create Two Job planning Lines and transfer Job to Sales Invoice separately.
      // Exercise: Run Job Calculate WIP and Job WIP To G/L batches.
      // Verify: Verify the WIP Entry Amount on Job WIP G/L Entry.
      PostWIPToGLAndVerifyWIPEntryAmountForSales(Job,JobTask,LineAmount); // Line Amount is 1st planning line's Line Amount.
      PostWIPToGLAndVerifyWIPEntryAmountForSales(Job,JobTask,LineAmount); // Line Amount is 1st planning line's Line Amount + 2nd planning line's Line Amount.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE RunAdjustCostItemEntriesForJob@125();
    VAR
      JobTask@1001 : Record 1001;
      ItemNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Update Job Item Cost]
      // [SCENARIO] Posted Total Cost value for Job Planning Line was adjusted after Run Adjust Cost - Item Entries.

      // Setup: Set Automatic Update Job Item Cost = TRUE. Create Job with Task and Job Planning Line.
      // Create and post Item Journal Line. Create and Post Job Journal Line.
      Initialize;
      UpdateAutomaticCostOnJobsSetup(TRUE);
      ItemNo := InitSetupForAdjustCostItemEntries(JobTask);

      // Exercise: Run Adjust Cost Item Entries Batch Job.
      LibraryCosting.AdjustCostItemEntries(ItemNo,''); // Passing Blank Value for Item Category Filter.

      // Verify: Verify Posted Total Cost of Job Planning Line was adjusted.
      VerifyPostedTotalCostOfJobPlanningLine(JobTask,ItemNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VerifyWIPMethodAfterCalculateWIP@132();
    VAR
      Job@1000 : ARRAY [2] OF Record 167;
      JobWIPMethod@1002 : Record 1006;
      LineCount@1003 : Integer;
    BEGIN
      // Verify that WIP Method has not been set by Calculate WIP for all Job Task Lines except last line
      // for case when user does not set WIP-Total and WIP Method in Job Task lines

      // Create Job with user-defined WIP-Total fields and Job with empty WIP-Total fields
      CreateJobWIPMethod(JobWIPMethod,
        JobWIPMethod."Recognized Costs"::"Cost Value",
        JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)");
      LineCount := LibraryRandom.RandIntInRange(3,5);
      CreateJobAndJobTaskLinesForWIPTotal(Job[1],JobWIPMethod.Code,LineCount,TRUE);
      CreateJobAndJobTaskLinesForWIPTotal(Job[2],JobWIPMethod.Code,LineCount,FALSE);

      // Exercise: Run Calculate WIP Batch Job.
      RunJobCalculateWIP(Job[1]);
      RunJobCalculateWIP(Job[2]);

      // Verify: WIP Method must be empty for all line except Total line for 2nd case
      // WIP-Total and WIP Method fields should be the same as in 1st Job Task lines
      VerifyWIPTotalForJobTaskLines(Job[1]."No.",Job[2]."No.",LineCount);
    END;

    [Test]
    [HandlerFunctions(JobCreateSalesInvoiceHandler,MessageHandler)]
    PROCEDURE RunCreateSalesInvoicesForJobsWithDiffCurrency@134();
    VAR
      SalesHeader@1002 : Record 36;
      JobPlanningLineWithInvCurreny@1003 : Record 1003;
      JobPlanningLineWithCurrency@1001 : Record 1003;
      JobPlanningLineWithoutCurrency@1000 : Record 1003;
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376733] Batch job "Create Job Sales Invoice" should keep "Unit Price" in FCY if "Invoice Currency Code" is not defined and convert if defined

      Initialize;

      // [GIVEN] Job "A" with blank "Currency Code", "Invoice Currency Code" = EUR, "Unit Price" = 50, "Currency Factor" = 0.5
      CreateJobWithFCYPlanningLine(JobPlanningLineWithInvCurreny,'',LibraryERM.CreateCurrencyWithRandomExchRates);

      // [GIVEN] Job "B" wih "Currency Code" = USD, "Invoice Currency Code" is blank, "Unit Price" = 100
      CreateJobWithFCYPlanningLine(JobPlanningLineWithCurrency,LibraryERM.CreateCurrencyWithRandomExchRates,'');

      // [GIVEN] Job "C" wih blank "Currency Code", blank "Invoice Currency Code", "Unit Price" = 200
      CreateJobWithFCYPlanningLine(JobPlanningLineWithoutCurrency,'','');

      // [WHEN] Run batch job "Create Job Sales Invoice" for "A" and "B"
      RunJobCreateSalesInvoices(
        STRSUBSTNO('%1|%2|%3',JobPlanningLineWithInvCurreny."Job No.",
          JobPlanningLineWithCurrency."Job No.",JobPlanningLineWithoutCurrency."Job No."));

      // [THEN] Sales Invoice created for job "A" with "Unit Price" = 25
      VerifyUnitPriceOnJobPlanningLineInLCY(JobPlanningLineWithInvCurreny);

      // [THEN] Sales Invoice created for job "B" with "Unit Price" = 100
      VerifyValuesOnSalesLineForInvoice(
        FindSalesHeader(JobPlanningLineWithCurrency."Job No.",SalesHeader."Document Type"::Invoice),JobPlanningLineWithCurrency);

      // [THEN] Sales Invoice created for job "C" with "Unit Price" = 200
      VerifyValuesOnSalesLineForInvoice(
        FindSalesHeader(JobPlanningLineWithoutCurrency."Job No.",SalesHeader."Document Type"::Invoice),JobPlanningLineWithoutCurrency);
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Clear the needed global variables.
      ClearGlobals;
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      UpdateJobPostingGroups;
      IsInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"Jobs Setup");
      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
    END;

    LOCAL PROCEDURE InitSetupForAdjustCostItemEntries@126(VAR JobTask@1006 : Record 1001) : Code[20];
    VAR
      JobPlanningLine@1004 : Record 1003;
      JobJournalLine@1003 : Record 210;
      Qty@1002 : Decimal;
    BEGIN
      // Create Job with Task. Create Job Planning Line. Create and Post two Item Journal Lines with different Unit Cost.
      // Create and Post two Job Journal Lines.
      CreateJobAndJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,CreateItem,JobTask);
      UpdateUsageLinkOfJobPlanningLine(JobPlanningLine,TRUE);
      Qty := LibraryRandom.RandInt(5);
      CreateAndPostItemJournalLine(JobPlanningLine."No.",Qty,LibraryRandom.RandInt(10));
      CreateAndPostItemJournalLine(JobPlanningLine."No.",JobPlanningLine.Quantity - Qty,LibraryRandom.RandInt(10));

      CreateAndPostJobJournalLine(
        JobJournalLine,JobTask,LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::Item,JobPlanningLine."No.",
        Qty,JobPlanningLine."Unit Cost",WORKDATE);
      CreateAndPostJobJournalLine(
        JobJournalLine,JobTask,LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::Item,JobPlanningLine."No.",
        Qty,JobPlanningLine."Unit Cost",WORKDATE);

      EXIT(JobPlanningLine."No.");
    END;

    LOCAL PROCEDURE AssignGlobalVariable@5(ChangeCurrencyDate2@1001 : Boolean;ChangePlanningDate2@1000 : Boolean;IncludeLineType2@1002 : ' ,Schedule,Contract,Schedule+Contract');
    BEGIN
      ChangeCurrencyDate := ChangeCurrencyDate2;
      ChangePlanningDate := ChangePlanningDate2;
      IncludeLineType := IncludeLineType2
    END;

    LOCAL PROCEDURE ClearGlobals@79();
    BEGIN
      // Clear global variable.
      CLEAR(IncludeLineType);
      ChangeCurrencyDate := FALSE;
      ChangePlanningDate := FALSE;
      ReverseOnly := FALSE;
      CreateNewCreditMemo := FALSE;
      AppendSalesInvoice := FALSE;
      CancelJobTransferToCreditMemo := FALSE;
      PostingDate := 0D;
      NewRelationalExchangeRateAmount := 0;
    END;

    LOCAL PROCEDURE ClearRevaluationJournalLines@146(VAR ItemJournalBatch@1002 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Revaluation);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.SetupNewBatch;
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE ChangeExchangeRateOnSalesInvoice@85(VAR SalesHeader@1001 : Record 36;JobNo@1002 : Code[20];CurrencyCode@1003 : Code[10]);
    VAR
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,FindBillToCustomerNo(JobNo));
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);

      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice."Currency Code".ASSISTEDIT;
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLine@30(VAR JobJournalLine@1001 : Record 210;JobTask@1000 : Record 1001;LineType@1006 : Option;ConsumableType@1007 : Option;No@1005 : Code[20];Qty@1004 : Decimal;UnitCost@1003 : Decimal;PostingDate@1002 : Date);
    BEGIN
      LibraryJob.CreateJobJournalLineForType(LineType,ConsumableType,JobTask,JobJournalLine);
      WITH JobJournalLine DO BEGIN
        VALIDATE("No.",No);
        VALIDATE(Quantity,Qty);
        VALIDATE("Unit Cost",UnitCost);
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@51(JobTask@1006 : Record 1001) Quantity : Decimal;
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreatePurchaseDocumentWithJob(PurchaseLine,JobTask,PurchaseHeader."Document Type"::Invoice,CreateItem);
      Quantity := PurchaseLine.Quantity;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@154(VAR JobTask@1003 : Record 1001;ItemNo@1000 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreateJobAndJobTask(JobTask);
      CreatePurchaseDocumentWithJob(PurchaseLine,JobTask,PurchaseHeader."Document Type"::Order,ItemNo);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithJob@99(VAR PurchaseLine@1000 : Record 39;JobTask@1006 : Record 1001;DocumentType@1002 : Option;No@1001 : Code[20]);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,No,LibraryRandom.RandInt(100));  // Use random values for Quantity.
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.VALIDATE("Job Line Type",PurchaseLine."Job Line Type"::"Both Schedule and Contract");
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@82(VAR CurrencyExchangeRate@1000 : Record 330);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      CurrencyExchangeRate.SETRANGE("Currency Code",Currency.Code);
      CurrencyExchangeRate.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateUpdateAndPostJobJournalLine@86(VAR JobJournalLine@1001 : Record 210;JobTask@1003 : Record 1001) LineAmount : Decimal;
    BEGIN
      CreateJobJournalLine(JobJournalLine,JobTask,CreateItem);
      LineAmount := JobJournalLine."Line Amount";
      JobJournalLine.VALIDATE("Line Amount",JobJournalLine."Line Amount" - LibraryUtility.GenerateRandomFraction);  // Update Line Amount for generating Line Discount Amount.
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateInitialSetupForJob@50(VAR Job@1001 : Record 167;VAR JobJournalLine@1004 : Record 210;WIPTotal@1005 : Option) : Decimal;
    VAR
      JobWIPMethod@1000 : Record 1006;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
    BEGIN
      CreateInitialSetupForJobWithTask(
        Job,JobTask,Job."WIP Posting Method"::"Per Job",
        JobWIPMethod."Recognized Costs"::"At Completion",JobWIPMethod."Recognized Sales"::"At Completion",WIPTotal);

      CreateJobPlanningLine(JobPlanningLine,LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,CreateResource,JobTask);
      CreateAndPostJobJournalLine(
        JobJournalLine,JobTask,LibraryJob.UsageLineTypeContract,LibraryJob.ResourceType,JobPlanningLine."No.",
        JobPlanningLine.Quantity / 2,JobPlanningLine."Unit Cost",WORKDATE);
      CreateJobTask(JobTask,Job,JobTask."Job Task Type"::Total,JobTask."WIP-Total"::Total);
      EXIT(JobPlanningLine."Total Price");
    END;

    LOCAL PROCEDURE CreateInitialSetupForJobWithTask@114(VAR Job@1001 : Record 167;VAR JobTask@1002 : Record 1001;WIPPostingMethod@1003 : Option;CostsRecognition@1005 : Option;SalesRecognition@1004 : Option;WIPTotal@1006 : Option);
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      CreateJobWIPMethod(JobWIPMethod,CostsRecognition,SalesRecognition);
      CreateJob(Job,JobWIPMethod.Code);
      UpdateWIPPostingMethod(Job,WIPPostingMethod);
      CreateJobTask(JobTask,Job,JobTask."Job Task Type"::Posting,WIPTotal);
    END;

    LOCAL PROCEDURE CreateJob@29(VAR Job@1001 : Record 167;WIPMethod@1000 : Code[20]);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("WIP Method",WIPMethod);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobAndJobTask@11(VAR JobTask@1001 : Record 1001);
    VAR
      Customer@1000 : Record 18;
      Job@1002 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY(TRUE);
      LibrarySales.CreateCustomer(Customer);
      Job.VALIDATE("Bill-to Customer No.",Customer."No.");
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobJournalBatch@87(VAR JobJournalBatch@1000 : Record 237);
    VAR
      JobJournalTemplate@1001 : Record 209;
    BEGIN
      LibraryJob.GetJobJournalTemplate(JobJournalTemplate);
      LibraryJob.CreateJobJournalBatch(JobJournalTemplate.Name,JobJournalBatch);
    END;

    LOCAL PROCEDURE CreateJobJournalLine@70(VAR JobJournalLine@1000 : Record 210;JobTask@1001 : Record 1001;No@1002 : Code[20]);
    BEGIN
      LibraryJob.CreateJobJournalLineForType(2,JobJournalLine.Type::Item,JobTask,JobJournalLine);  // Use 2 for Contract.
      JobJournalLine.VALIDATE("No.",No);
      JobJournalLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));  // Use Random because value is not important.
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@28(VAR JobPlanningLine@1001 : Record 1003;LineType@1002 : Option;Type@1003 : Option;No@1004 : Code[20];JobTask@1000 : Record 1001);
    BEGIN
      // Use Random values for Quantity and Unit Cost because values are not important.
      LibraryJob.CreateJobPlanningLine(LineType,Type,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandIntInRange(10,20));  // Using Random value for Quantity because value is not important.
      JobPlanningLine.VALIDATE("Unit Cost",LibraryRandom.RandInt(100));  // Using Random value for Unit Cost because value is not important.
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithCurrency@97(VAR JobPlanningLine@1001 : Record 1003;CurrencyCode@1003 : Code[10]);
    VAR
      Job@1002 : Record 167;
      JobTask@1000 : Record 1001;
      GLAccount@1009 : Record 15;
      GenProductPostingGroup@1010 : Record 251;
    BEGIN
      CreateJobAndJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      Job.VALIDATE("Currency Code",CurrencyCode);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::"G/L Account",JobTask,JobPlanningLine);

      GLAccount.GET(JobPlanningLine."No.");
      GenProductPostingGroup.GET(GLAccount."Gen. Prod. Posting Group");
      GenProductPostingGroup."Def. VAT Prod. Posting Group" := GLAccount."VAT Prod. Posting Group"; // no validation to avoid massive update
      GenProductPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithPlanningDate@118(VAR JobPlanningLine@1001 : Record 1003;JobTask@1000 : Record 1001;LineType@1002 : Option;PlanningDate@1005 : Date);
    BEGIN
      CreateJobPlanningLine(JobPlanningLine,LineType,LibraryJob.ResourceType,CreateResource,JobTask);
      WITH JobPlanningLine DO BEGIN
        VALIDATE("Planning Date",PlanningDate);
        VALIDATE("Qty. to Transfer to Journal",Quantity);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobWithFCYPlanningLine@150(VAR JobPlanningLine@1000 : Record 1003;JobCurrencyCode@1002 : Code[10];InvoiceCurrencyCode@1001 : Code[10]);
    VAR
      Job@1003 : Record 167;
      JobTask@1004 : Record 1001;
    BEGIN
      CreateJobAndJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      Job.VALIDATE("Currency Code",JobCurrencyCode);
      Job.VALIDATE("Invoice Currency Code",InvoiceCurrencyCode);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@127(ItemNo@1001 : Code[20];Qty@1003 : Decimal;UnitCost@1002 : Decimal);
    VAR
      ItemJournalBatch@1008 : Record 233;
      ItemJournalTemplate@1004 : Record 82;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      ItemJournalLine.VALIDATE("Unit Cost",UnitCost);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateJobTask@27(VAR JobTask@1000 : Record 1001;Job@1001 : Record 167;JobTaskType@1003 : Option;WIPTotal@1002 : Option);
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);
      JobTask.VALIDATE("Job Task Type",JobTaskType);
      JobTask.VALIDATE("WIP-Total",WIPTotal);
      JobTask.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWIPMethod@23(VAR JobWIPMethod@1000 : Record 1006;RecognizedCosts@1001 : Option;RecognizedSales@1002 : Option);
    BEGIN
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);
      JobWIPMethod.VALIDATE("Recognized Costs",RecognizedCosts);
      JobWIPMethod.VALIDATE("Recognized Sales",RecognizedSales);
      JobWIPMethod.MODIFY(TRUE)
    END;

    LOCAL PROCEDURE CreateResource@20() : Code[20];
    BEGIN
      EXIT(LibraryResource.CreateResourceNo);
    END;

    LOCAL PROCEDURE CreateItem@88() : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Using Random value for Unit Price because value is not important.
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));  // Using Random value for Last Direct Cost because value is not important.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateRevaluationJournal@145(VAR ItemJournalLine@1001 : Record 83;ItemNo@1002 : Code[20];AppliesToEntry@1003 : Integer);
    VAR
      ItemJournalBatch@1000 : Record 233;
    BEGIN
      ClearRevaluationJournalLines(ItemJournalBatch);
      LibraryInventory.CreateItemJnlLineWithNoItem(
        ItemJournalLine,ItemJournalBatch,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::" ");
      ItemJournalLine.VALIDATE("Item No.",ItemNo);
      ItemJournalLine.VALIDATE("Value Entry Type",ItemJournalLine."Value Entry Type"::Revaluation);
      ItemJournalLine.VALIDATE(Quantity,1);  // Taking Quantity as 1 to avoid test Failure, Value is not important as it gets overridden by Applied Quantity after Application.
      ItemJournalLine.VALIDATE("Applies-to Entry",AppliesToEntry);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateJobJournalLine@109(VAR JobJournalLine@1001 : Record 210;JobTask@1003 : Record 1001;FractionValue@1000 : Decimal);
    BEGIN
      CreateJobJournalLine(JobJournalLine,JobTask,LibraryJob.CreateConsumable(1));  // Use 1 for Item.
      JobJournalLine.VALIDATE("Line Amount",JobJournalLine."Line Amount" - FractionValue);  // Update Line Amount for generating Line Discount Amount.
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobAndJobTaskLinesForWIPTotal@142(VAR Job@1001 : Record 167;JobWIPMethodCode@1000 : Code[20];LineCount@1004 : Integer;UpdateWIPTotal@1003 : Boolean);
    VAR
      JobTask@1002 : Record 1001;
      i@1005 : Integer;
    BEGIN
      CreateJob(Job,JobWIPMethodCode);

      FOR i := 1 TO LineCount DO
        CreateJobTask(JobTask,Job,JobTask."Job Task Type"::Posting,JobTask."WIP-Total"::" ");
      IF UpdateWIPTotal THEN
        UpdateJobTaskWIPTotal(JobTask,JobWIPMethodCode);
    END;

    LOCAL PROCEDURE PostWIPToGLAndVerifyWIPEntryAmountForCost@121(VAR Job@1004 : Record 167;JobTask@1003 : Record 1001;VAR Cost@1005 : Decimal);
    VAR
      JobPlanningLine@1002 : Record 1003;
      JobJournalLine@1001 : Record 210;
    BEGIN
      CreateJobPlanningLineWithPlanningDate(JobPlanningLine,JobTask,LibraryJob.PlanningLineTypeBoth,WORKDATE);
      Cost += JobPlanningLine."Total Cost";
      CreateAndPostJobJournalLine(
        JobJournalLine,JobTask,LibraryJob.UsageLineTypeBlank,
        LibraryJob.ResourceType,JobPlanningLine."No.",JobPlanningLine.Quantity,JobPlanningLine."Unit Cost",WORKDATE);
      RunJobCalculateWIP(Job);
      RunJobPostWIPToGL(Job);
      VerifyWIPEntryAmountOnJobWIPGLEntry(Job."No.",-Cost,WORKDATE);
      WORKDATE := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE PostWIPToGLAndVerifyWIPEntryAmountForSales@120(VAR Job@1004 : Record 167;JobTask@1003 : Record 1001;VAR LineAmount@1005 : Decimal);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      CreateJobPlanningLineWithPlanningDate(JobPlanningLine,JobTask,LibraryJob.PlanningLineTypeBoth,WORKDATE);
      LineAmount += JobPlanningLine."Line Amount";
      TransferJobToSales(JobPlanningLine,FALSE); // Use False for Invoice.
      FindAndPostSalesInvoice(Job."No.");
      RunJobCalculateWIP(Job);
      RunJobPostWIPToGL(Job);
      VerifyWIPEntryAmountOnJobWIPGLEntry(Job."No.",LineAmount,WORKDATE);
      WORKDATE := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE FindAndPostSalesInvoice@60(JobNo@1001 : Code[20]) DocumentNo : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesHeader.SETRANGE("Sell-to Customer No.",FindBillToCustomerNo(JobNo));
      SalesHeader.FINDFIRST;
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE FindBillToCustomerNo@62(No@1001 : Code[20]) : Code[20];
    VAR
      Job@1000 : Record 167;
    BEGIN
      Job.GET(No);
      EXIT(Job."Bill-to Customer No.");
    END;

    LOCAL PROCEDURE FindItemLedgerEntryNo@157(ItemNo@1001 : Code[20]) : Integer;
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.FINDFIRST;
      EXIT(ItemLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@167(VAR JobLedgerEntry@1000 : Record 169;DocumentNo@1001 : Code[20];No@1002 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("No.",No);
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindJobPlanningLine@68(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001);
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobTask."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobPlanningLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindLastPlanningLineNo@40(JobTask@1000 : Record 1001) : Integer;
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobTask."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobPlanningLine.FINDLAST;
      EXIT(JobPlanningLine."Line No.");
    END;

    LOCAL PROCEDURE FindSalesHeader@39(JobNo@1001 : Code[20];DocumentType@1002 : Option) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.SETRANGE("Bill-to Customer No.",FindBillToCustomerNo(JobNo));
      SalesHeader.FINDFIRST;
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE FindSalesLine@46(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];No@1003 : Code[20]) : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("No.",No);
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@129(ItemNo@1001 : Code[20];EntryType@1003 : Option) : Decimal;
    VAR
      ItemLedgerEntry@1000 : Record 32;
      TotalCost@1002 : Decimal;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Entry Type",EntryType);
        FINDSET;
        REPEAT
          CALCFIELDS("Cost Amount (Actual)");
          TotalCost += ABS("Cost Amount (Actual)");
        UNTIL NEXT = 0;
      END;
      EXIT(TotalCost);
    END;

    LOCAL PROCEDURE GetRecogSalesAmount@18(Job@1001 : Record 167) : Decimal;
    BEGIN
      Job.CALCFIELDS("Recog. Sales Amount");
      EXIT(Job."Recog. Sales Amount");
    END;

    LOCAL PROCEDURE GetTotalWIPCostAmount@19(Job@1001 : Record 167) : Decimal;
    BEGIN
      Job.CALCFIELDS("Total WIP Cost Amount");
      EXIT(Job."Total WIP Cost Amount");
    END;

    LOCAL PROCEDURE GetTotalWIPCostGLAmount@17(Job@1001 : Record 167) : Decimal;
    BEGIN
      Job.CALCFIELDS("Total WIP Cost G/L Amount");
      EXIT(Job."Total WIP Cost G/L Amount");
    END;

    LOCAL PROCEDURE GetTotalWIPSalesAmount@16(Job@1001 : Record 167) : Decimal;
    BEGIN
      Job.CALCFIELDS("Total WIP Sales Amount");
      EXIT(Job."Total WIP Sales Amount");
    END;

    LOCAL PROCEDURE GetSalesHeader@135(VAR SalesHeader@1002 : Record 36;JobNo@1001 : Code[20];DocumentType@1000 : Option);
    BEGIN
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.SETRANGE("Bill-to Customer No.",FindBillToCustomerNo(JobNo));
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE OpenJobListToDeleteSalesInvoice@89(JobNo@1001 : Code[20]);
    VAR
      JobList@1000 : TestPage 89;
    BEGIN
      JobList.OPENEDIT;
      JobList.FILTER.SETFILTER("No.",JobNo);
      JobList.SalesInvoicesCreditMemos.INVOKE;
    END;

    LOCAL PROCEDURE UpdateUnitCostAndPostRevaluationJournal@76(ItemNo@1002 : Code[20]) UnitCostRevalued : Decimal;
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Create Revaluation Journal for Item.
      CreateRevaluationJournal(ItemJournalLine,ItemNo,FindItemLedgerEntryNo(ItemNo));
      UpdateUnitCostOnRevaluationJournalLine(ItemJournalLine);
      UnitCostRevalued := ItemJournalLine."Unit Cost (Revalued)";  // Store Revalued Unit Cost in a variable to use it in Verification.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE RunChangeJobDates@7(JobTaskNo@1000 : Code[20];JobNo@1001 : Code[20]);
    VAR
      JobTask@1003 : Record 1001;
      ChangeJobDates@1002 : Report 1087;
    BEGIN
      COMMIT;  // Commit needs before run report.
      CLEAR(ChangeJobDates);
      JobTask.SETRANGE("Job Task No.",JobTaskNo);
      JobTask.SETRANGE("Job No.",JobNo);
      ChangeJobDates.SETTABLEVIEW(JobTask);
      ChangeJobDates.RUN;
    END;

    LOCAL PROCEDURE RunJobCalcRemainingUsage@47(JobJournalBatch@1000 : Record 237;JobTask@1001 : Record 1001);
    VAR
      JobCalcRemainingUsage@1002 : Report 1090;
    BEGIN
      JobTask.SETRANGE("Job No.",JobTask."Job No.");
      JobTask.SETRANGE("Job Task No.",JobTask."Job Task No.");
      COMMIT;  // Commit required for batch report.
      CLEAR(JobCalcRemainingUsage);
      JobCalcRemainingUsage.SetBatch(JobJournalBatch."Journal Template Name",JobJournalBatch.Name);
      JobCalcRemainingUsage.SetDocNo(JobJournalBatch.Name);
      JobCalcRemainingUsage.SETTABLEVIEW(JobTask);
      JobCalcRemainingUsage.RUN;
    END;

    LOCAL PROCEDURE RunJobCalculateWIP@21(Job@1000 : Record 167);
    VAR
      JobCalculateWIP@1001 : Report 1086;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      CLEAR(JobCalculateWIP);
      JobCalculateWIP.SETTABLEVIEW(Job);

      // Use Document No. as Job No. because value is not important.
      JobCalculateWIP.InitializeRequest(Job."No.");
      JobCalculateWIP.USEREQUESTPAGE(FALSE);
      JobCalculateWIP.RUN;
    END;

    LOCAL PROCEDURE RunJobCreateInvoice@74(VAR JobPlanningLine@1000 : Record 1003);
    BEGIN
      COMMIT;  // Commit is required before Create Sales Invoice batch job.
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);  // Use False for Invoice.
    END;

    LOCAL PROCEDURE RunJobCreateSalesInvoice@57(JobTask@1000 : Record 1001);
    VAR
      JobCreateSalesInvoice@1001 : Report 1093;
    BEGIN
      COMMIT;  // Commit required for batch report.
      JobTask.SETRANGE("Job No.",JobTask."Job No.");
      JobTask.SETRANGE("Job Task No.",JobTask."Job Task No.");
      CLEAR(JobCreateSalesInvoice);
      JobCreateSalesInvoice.SETTABLEVIEW(JobTask);
      JobCreateSalesInvoice.RUN;
    END;

    LOCAL PROCEDURE RunJobCreateSalesInvoices@139(JobFilter@1004 : Text);
    VAR
      JobTask@1003 : Record 1001;
      JobCreateSalesInvoice@1001 : Report 1093;
    BEGIN
      COMMIT;  // Commit required for batch report.
      JobTask.SETFILTER("Job No.",JobFilter);
      CLEAR(JobCreateSalesInvoice);
      JobCreateSalesInvoice.SETTABLEVIEW(JobTask);
      JobCreateSalesInvoice.RUN;
    END;

    LOCAL PROCEDURE RunJobPostWIPToGL@22(Job@1000 : Record 167);
    VAR
      JobPostWIPToGL@1001 : Report 1085;
    BEGIN
      Job.SETRANGE("No.",Job."No.");
      CLEAR(JobPostWIPToGL);
      JobPostWIPToGL.SETTABLEVIEW(Job);
      JobPostWIPToGL.RUN;
    END;

    LOCAL PROCEDURE RunJobSplitPlanningLine@43(JobTask@1000 : Record 1001);
    VAR
      JobSplitPlanningLine@1001 : Report 1088;
    BEGIN
      JobTask.SETRANGE("Job No.",JobTask."Job No.");
      JobTask.SETRANGE("Job Task No.",JobTask."Job Task No.");
      COMMIT;  // Commit required for batch report.
      CLEAR(JobSplitPlanningLine);
      JobSplitPlanningLine.SETTABLEVIEW(JobTask);
      JobSplitPlanningLine.USEREQUESTPAGE(FALSE);
      JobSplitPlanningLine.RUN;
    END;

    LOCAL PROCEDURE RunJobTransferToPlanningLines@42(DocumentNo@1001 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
      JobTransferToPlanningLines@1000 : Report 1091;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.FINDFIRST;
      COMMIT;  // Commit required for batch report.
      CLEAR(JobTransferToPlanningLines);
      JobTransferToPlanningLines.GetJobLedgEntry(JobLedgerEntry);
      JobTransferToPlanningLines.RUN;
    END;

    LOCAL PROCEDURE TransferJobToSales@35(VAR JobPlanningLine@1001 : Record 1003;CreditMemo@1002 : Boolean);
    BEGIN
      COMMIT;  // Commit required for batch report.
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,CreditMemo);  // Use True for Credit Memo and False for Invoice.
    END;

    LOCAL PROCEDURE UpdateAutomaticCostOnJobsSetup@80(AutomaticUpdateJobItemCost@1001 : Boolean);
    VAR
      JobsSetup@1000 : Record 315;
    BEGIN
      JobsSetup.GET;
      JobsSetup.VALIDATE("Automatic Update Job Item Cost",AutomaticUpdateJobItemCost);
      JobsSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCostFieldsInInventorySetup@83(AutomaticCostPosting@1001 : Boolean;AutomaticCostAdjustment@1002 : Option);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateJobPostingGroups@107();
    VAR
      JobPostingGroup@1002 : Record 208;
    BEGIN
      WITH JobPostingGroup DO
        IF FINDSET THEN
          REPEAT
            LibraryJob.UpdateJobPostingGroup(JobPostingGroup);
          UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateUnitCostOnRevaluationJournalLine@172(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.VALIDATE("Unit Cost (Revalued)",ItemJournalLine."Unit Cost (Revalued)" + LibraryRandom.RandInt(100));  // Update Unit Cost Revalued with Random Value.
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWIPCostsAccount@15(Code@1001 : Code[20];WIPCostsAccount@1002 : Code[20]) OldWIPCostsAccount : Code[20];
    VAR
      JobPostingGroup@1000 : Record 208;
    BEGIN
      JobPostingGroup.GET(Code);
      OldWIPCostsAccount := JobPostingGroup."WIP Costs Account";
      JobPostingGroup.VALIDATE("WIP Costs Account",WIPCostsAccount);
      JobPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWIPMethodOnJob@13(Job@1000 : Record 167;WIPMethod@1001 : Code[20]);
    BEGIN
      Job.GET(Job."No.");
      Job.VALIDATE("WIP Method",WIPMethod);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWIPPostingMethod@122(VAR Job@1001 : Record 167;WIPPostingMethod@1000 : Option);
    BEGIN
      Job.VALIDATE("WIP Posting Method",WIPPostingMethod);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUsageLinkOfJobPlanningLine@130(VAR JobPlanningLine@1000 : Record 1003;UsageLink@1001 : Boolean);
    BEGIN
      JobPlanningLine.VALIDATE("Usage Link",UsageLink);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateJobTaskWIPTotal@173(VAR JobTask@1000 : Record 1001;JobWIPMethodCode@1001 : Code[20]);
    BEGIN
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Total);
      JobTask.VALIDATE("WIP Method",JobWIPMethodCode);
      JobTask.MODIFY;
    END;

    LOCAL PROCEDURE CreateJobPlanningLineInvoiceTable@100(VAR JobPlanningLineInvoice@1003 : Record 1022;JobNo@1000 : Code[20];JobTaskNo@1001 : Code[20];LineNo@1002 : Integer);
    BEGIN
      WITH JobPlanningLineInvoice DO BEGIN
        INIT;
        VALIDATE("Job No.",JobNo);
        VALIDATE("Job Task No.",JobTaskNo);
        VALIDATE("Job Planning Line No.",LineNo);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateJobPlanningLineTable@112(VAR JobPlanningLine@1002 : Record 1003);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        INIT;
        "Job No." := LibraryUTUtility.GetNewCode;
        "Job Task No." := LibraryUTUtility.GetNewCode;
        RecRef.GETTABLE(JobPlanningLine);
        "Line No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntry@67(GLAccountNo@1002 : Code[20];DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyJobJournalLine@44(JobJournalBatch@1001 : Record 237;JobPlanningLine@1002 : Record 1003);
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      JobJournalLine.SETRANGE("Journal Template Name",JobJournalBatch."Journal Template Name");
      JobJournalLine.SETRANGE("Journal Batch Name",JobJournalBatch.Name);
      JobJournalLine.FINDFIRST;
      JobJournalLine.TESTFIELD("Job No.",JobPlanningLine."Job No.");
      JobJournalLine.TESTFIELD("Job Task No.",JobPlanningLine."Job Task No.");
      JobJournalLine.TESTFIELD(Quantity,JobPlanningLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntry@73(JobJournalLine@1005 : Record 210;DocumentNo@1001 : Code[20];LineAmount@1000 : Decimal);
    VAR
      JobLedgerEntry@1004 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobJournalLine."No.");
      JobLedgerEntry.TESTFIELD(Quantity,-JobJournalLine.Quantity);
      JobLedgerEntry.TESTFIELD("Unit Price (LCY)",JobJournalLine."Unit Price (LCY)");
      JobLedgerEntry.TESTFIELD("Total Price (LCY)",-JobJournalLine."Total Price (LCY)");
      JobLedgerEntry.TESTFIELD("Line Discount Amount",-(LineAmount - JobJournalLine."Line Amount"));
      JobJournalLine.TESTFIELD("Line Discount %",ROUND((LineAmount - JobJournalLine."Line Amount") / LineAmount * 100,0.00001));  // Taking rounding precision as used in Job Journal Line Table rounding precision.
    END;

    LOCAL PROCEDURE VerifyJobPlanningLine@91(JobNo@1003 : Code[20];JobTaskNo@1004 : Code[20];LineType@1000 : Option;No@1001 : Code[20]);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.SETRANGE("Job Task No.",JobTaskNo);
      JobPlanningLine.SETRANGE("Line Type",LineType);
      JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Resource);
      JobPlanningLine.SETRANGE("No.",No);
      JobPlanningLine.FINDFIRST;
      JobPlanningLine.TESTFIELD("Planning Date",TODAY);
    END;

    LOCAL PROCEDURE VerifyJobWIPGLEntryWithGLBalAccountNo@12(JobNo@1002 : Code[20];GLBalAccountNo@1001 : Code[20]);
    VAR
      JobWIPGLEntry@1000 : Record 1005;
    BEGIN
      JobWIPGLEntry.SETRANGE("Job No.",JobNo);
      JobWIPGLEntry.SETRANGE("G/L Bal. Account No.",GLBalAccountNo);
      JobWIPGLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyLineDiscountAmountOnSalesLine@95(JobNo@1002 : Code[20];LineDiscountAmount@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Job No.",JobNo);
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD("Line Discount Amount",LineDiscountAmount);
    END;

    LOCAL PROCEDURE VerifyUnitCostInJobLedgerEntry@128(DocumentNo@1000 : Code[20];No@1001 : Code[20];UnitCost@1002 : Decimal);
    VAR
      JobLedgerEntry@1003 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,No);
      JobLedgerEntry.TESTFIELD("Unit Cost",UnitCost);
    END;

    LOCAL PROCEDURE VerifyTransferJobPlanningLine@48(JobJournalLine@1000 : Record 210;LineType@1001 : Option;LineNo@1003 : Integer);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobJournalLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobJournalLine."Job Task No.");
      JobPlanningLine.SETRANGE("Line Type",LineType);
      JobPlanningLine.SETFILTER("Line No.",'>%1',LineNo);
      JobPlanningLine.FINDFIRST;
      JobPlanningLine.TESTFIELD(Quantity,JobJournalLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyValuesOnJobPlanningLine@41(JobNo@1000 : Code[20];JobTaskNo@1003 : Code[20];LineType@1001 : Option;Quantity@1004 : Decimal);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.SETRANGE("Job Task No.",JobTaskNo);
      JobPlanningLine.SETRANGE("Line Type",LineType);
      JobPlanningLine.FINDFIRST;
      JobPlanningLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyValuesOnSalesLineForCreditMemo@38(DocumentNo@1001 : Code[20];JobPlanningLine@1002 : Record 1003);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Credit Memo",DocumentNo,JobPlanningLine."No.");
      SalesLine.TESTFIELD(Quantity,-JobPlanningLine."Qty. Transferred to Invoice");
      SalesLine.TESTFIELD("Unit Price",JobPlanningLine."Unit Price");
    END;

    LOCAL PROCEDURE VerifyValuesOnSalesLineForInvoice@58(DocumentNo@1001 : Code[20];JobPlanningLine@1002 : Record 1003);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesLine."Document Type"::Invoice,DocumentNo,JobPlanningLine."No.");
      SalesLine.TESTFIELD(Quantity,JobPlanningLine.Quantity);
      SalesLine.TESTFIELD("Unit Price",JobPlanningLine."Unit Price");
    END;

    LOCAL PROCEDURE VerifyEntryIsEmptyOnJobPlanningLineInvoice@93(JobTask@1000 : Record 1001);
    VAR
      JobPlanningLineInvoice@1001 : Record 1022;
    BEGIN
      JobPlanningLineInvoice.SETRANGE("Job No.",JobTask."Job No.");
      JobPlanningLineInvoice.SETRANGE("Job Task No.",JobTask."Job Task No.");
      IF NOT JobPlanningLineInvoice.ISEMPTY THEN
        ERROR(SalesInvoiceExistErr,JobPlanningLineInvoice.TABLECAPTION);
    END;

    LOCAL PROCEDURE VerifyWIPEntryAmountOnJobWIPGLEntry@123(JobNo@1000 : Code[20];Amount@1001 : Decimal;PostingDate@1003 : Date);
    VAR
      JobWIPGLEntry@1002 : Record 1005;
    BEGIN
      WITH JobWIPGLEntry DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Posting Date",PostingDate);
        FINDFIRST;
        TESTFIELD("WIP Entry Amount",Amount);
      END;
    END;

    LOCAL PROCEDURE VerifyPostedTotalCostOfJobPlanningLine@131(JobTask@1001 : Record 1001;ItemNo@1002 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      JobPlanningLine@1004 : Record 1003;
      TotalCost@1003 : Decimal;
    BEGIN
      TotalCost := FindItemLedgerEntry(ItemNo,ItemLedgerEntry."Entry Type"::"Negative Adjmt.");
      JobPlanningLine.SETRANGE("Schedule Line",TRUE);
      FindJobPlanningLine(JobPlanningLine,JobTask);
      JobPlanningLine.TESTFIELD("Posted Total Cost",TotalCost);
    END;

    LOCAL PROCEDURE VerifyWIPTotalForJobTaskLines@133(JobNo1@1000 : Code[20];JobNo2@1003 : Code[20];LastLineNo@1004 : Integer);
    VAR
      JobTaskLine1@1001 : Record 1001;
      JobTaskLine2@1002 : Record 1001;
      LineNo@1005 : Integer;
    BEGIN
      JobTaskLine1.SETRANGE("Job No.",JobNo1);
      JobTaskLine1.FINDSET;
      WITH JobTaskLine2 DO BEGIN
        SETRANGE("Job No.",JobNo2);
        FINDSET;
        REPEAT
          LineNo += 1;
          IF LineNo <> LastLineNo THEN
            Assert.AreEqual('',"WIP Method",STRSUBSTNO(WrongValueErr,FIELDCAPTION("WIP Method")));
          Assert.AreEqual(JobTaskLine1."WIP-Total","WIP-Total",STRSUBSTNO(WrongValueErr,FIELDCAPTION("WIP-Total")));
          Assert.AreEqual(JobTaskLine1."WIP Method","WIP Method",STRSUBSTNO(WrongValueErr,FIELDCAPTION("WIP Method")));
          JobTaskLine1.NEXT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyUnitPriceOnJobPlanningLineInLCY@159(JobPlanningLine@1001 : Record 1003);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      GetSalesHeader(SalesHeader,JobPlanningLine."Job No.",SalesHeader."Document Type"::Invoice);
      JobPlanningLine."Unit Price" :=
        ROUND(
          JobPlanningLine."Unit Price" * SalesHeader."Currency Factor",
          LibraryJob.GetUnitAmountRoundingPrecision(SalesHeader."Currency Code"));
      VerifyValuesOnSalesLineForInvoice(SalesHeader."No.",JobPlanningLine);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@61(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeExchangeRatePageHandler@98(VAR ChangeExchangeRate@1000 : TestPage 511);
    BEGIN
      ChangeExchangeRate.RefExchRate.SETVALUE(NewRelationalExchangeRateAmount);
      ChangeExchangeRate.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ChangeJobDatesHandler@3(VAR ChangeJobDates@1000 : TestRequestPage 1087);
    BEGIN
      ChangeJobDates.ChangeCurrencyDate.SETVALUE(ChangeCurrencyDate);
      ChangeJobDates.FixedDateCurrency.SETVALUE(TODAY);
      ChangeJobDates.IncludeLineTypeCurrency.SETVALUE(IncludeLineType);
      ChangeJobDates.IncludeCurrDateFrom.SETVALUE(WORKDATE);
      ChangeJobDates.IncludeCurrDateTo.SETVALUE(WORKDATE);

      ChangeJobDates.ChangePlanningDate.SETVALUE(ChangePlanningDate);
      ChangeJobDates.FixedDatePlanning.SETVALUE(TODAY);
      ChangeJobDates.IncludeLineTypePlanning.SETVALUE(IncludeLineType);
      ChangeJobDates.IncludePlanDateFrom.SETVALUE(WORKDATE);
      ChangeJobDates.IncludePlanDateTo.SETVALUE(WORKDATE);
      ChangeJobDates.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobPostWIPToGLHandler@10(VAR JobPostWIPToGL@1000 : TestRequestPage 1085);
    BEGIN
      JobPostWIPToGL.ReversalPostingDate.SETVALUE(WORKDATE);
      JobPostWIPToGL.ReversalDocumentNo.SETVALUE(FORMAT(LibraryRandom.RandInt(10)));  // Use random Reversal Document No.
      JobPostWIPToGL.ReverseOnly.SETVALUE(ReverseOnly);
      JobPostWIPToGL.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToPlanningLinesHandler@55(VAR JobTransferToPlanningLines@1000 : TestRequestPage 1091);
    BEGIN
      JobTransferToPlanningLines.TransferTo.SETVALUE(2);  // Use 2 for Both Schedule and Contract.
      JobTransferToPlanningLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobCalcRemainingUsageHandler@52(VAR JobCalcRemainingUsage@1000 : TestRequestPage 1090);
    BEGIN
      JobCalcRemainingUsage.PostingDate.SETVALUE(FORMAT(WORKDATE));
      JobCalcRemainingUsage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToCreditMemoHandler@56(VAR JobTransferToCreditMemo@1000 : TestRequestPage 1092);
    BEGIN
      IF (PostingDate = 0D) OR CancelJobTransferToCreditMemo THEN BEGIN
        JobTransferToCreditMemo.Cancel.INVOKE;
        EXIT
      END;

      JobTransferToCreditMemo.PostingDate.SETVALUE(PostingDate);

      // If Credit Memo is already exist then append to existing Credit Memo, otherwise create new Credit Memo.
      JobTransferToCreditMemo.CreateNewCreditMemo.SETVALUE(CreateNewCreditMemo);
      IF NOT CreateNewCreditMemo THEN
        JobTransferToCreditMemo.AppendToCreditMemoNo.LOOKUP;

      JobTransferToCreditMemo.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesInvoiceHandler@66(VAR JobTransferToSalesInvoice@1000 : TestRequestPage 1094);
    BEGIN
      IF AppendSalesInvoice THEN BEGIN
        JobTransferToSalesInvoice.CreateNewInvoice.SETVALUE(AppendSalesInvoice);
        JobTransferToSalesInvoice.AppendToSalesInvoiceNo.LOOKUP;
      END;
      JobTransferToSalesInvoice.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesInvoiceWithPostingDateHandler@124(VAR JobTransferToSalesInvoice@1000 : TestRequestPage 1094);
    BEGIN
      JobTransferToSalesInvoice.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobCreateSalesInvoiceHandler@63(VAR JobCreateSalesInvoice@1000 : TestRequestPage 1093);
    BEGIN
      JobCreateSalesInvoice.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesListHandler@53(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@54(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@106(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE JobInvoicePageHandler@94(VAR JobInvoices@1000 : TestPage 1029);
    BEGIN
      JobInvoices.OpenSalesInvoiceCreditMemo.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesInvoicePageHandler@103(VAR SalesInvoice@1000 : TestPage 43);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesInvoice."No.".VALUE);
      SalesHeader.DELETE(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Job]

      Unsupported version tags:
      SE: Unable to Execute

       1. Run Job Date report for Default setting and handle error message.
       2. Run Job Date report for false setting of change Currency and Planning date for include Line Type Schedule and handle error message.
       3. Run Job Date report for true setting of change Currency and Planning date for include Line Type Schedule and validate Job Planning Line.
       4. Run Job Date report for true setting of change Currency and Planning date for include Line Type Contract and validate Job Planning Line.
       5. Run Job Date report for false setting of change Currency and Planning date for include Line Type Contract and handle error message.
       6. Run Job Date report for true setting of change Currency and Planning date for include Line Type Both Schedule and Contract and validate Job Planning Line.
       7. Run Job Date report for false setting of change Currency and Planning date for include Line Type Both Schedule and Contract and handle error message.
       8. Test functionality of Job Calculate WIP batch.
       9. Test functionality of Job Post WIP To G/L batch with ReverseOnly as False.
      10. Test functionality of Job Post WIP To G/L batch with ReverseOnly as True.
      11. Test functionality of Job Post WIP To G/L batch with changing Posting Group.
      12. Test functionality of Job Calculate WIP batch with changing WIP Method.
      13. Test functionality of Job Calculate WIP batch for excluding part of Job.
      14. Test functionality of Job Split Planning Line.
      15. Test functionality of Job Transfer To Planning Lines.
      16. Test functionality of Job Calc. Remaining Usage.
      17. Test Create Planning Line from Purchase Invoice.
      18. Test functionality of Job Transfer To Credit Memo without Posting Date.
      19. Test functionality of Job Transfer To Credit Memo with Posting Date.
      20. Test functionality of Job Transfer To Credit Memo with Set Cancel.
      21. Test functionality of Job Transfer To Credit Memo without Set Cancel.
      22. Test functionality of Job Create Sales Invoice.
      23. Create a Sales Invoice for a Job and verify that Total Cost (LCY) must be equal to Invoiced Cost Amount (LCY) on Job Planning Line.
      24. Verify Line Discount Amount on Sales Invoice created from Job Planning Lines.
      25. Verify posting the Sales Invoice created from Job Planning Lines after updating Line Amount on Job Journal Line and post it.
      26. Check functionality of Job Create Sales Invoice with Type Item on Job Planning Line.
      27. Verify Line Amount and Line Discount Amount on Job Journal Line after updating the Line Amount.
      28. Verify no Sales Invoice Line is created through append functionality on Job Planning Line when click No on the confirmation message.
      29. Verify Currency Factor on Job Planning Line and creation of Sales Invoice Line through append functionality on Job Planning Line when click Yes on the confirmation message
          and Currency Exchange Rate is different between the Sales Invoice and Job Planning Line.
      30. Test Unit Cost updated correctly on Job Ledger Entry after executing Adjust Cost Item Entries batch Job and Automatic Updates Job Item Cost is TRUE on Jobs Setup.
      31. Check Job Planning Line Invoice is empty after delete the Sales Invoice.
      32. Verify Job No. on Job Planning Line Invoice Table is same as Job No on Job.
      33. Verify Job Task No on Job Planning Line Invoice Table is same as Job Task.
      34. Vevrify Job Planning Line No on Job Planning Line Invoice Table is same as Line No of Job Planning Line.
      35. Verify Job No. on Job Planning Line Invoice Table is not same as Job No on Job.
      36. Verify Job Task No on Job Planning Line Invoice Table is not same as Job Task.
      37. Verify Job Planning Line No on Job Planning Line Invoice Table is not same as Line No of Job Planning Line.
      38. Test Job WIP amount is accumulated correctly when WIP Posting method equals Per Job Ledger Entry For Cost Value.
      39. Test Job WIP amount is accumulated correctly when WIP Posting method equals Per Job Ledger Entry For Sales Value.
      40. Test Posted Total Cost value for Job Planning Line was adjusted after Run Adjust Cost - Item Entries.

      TFS_TS_ID = 265571
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      JobDateReportWithDefaultSetting                                                        129018
      JobDateReportWithoutChangeCurrencyAndPlanningDateForSchedule                           129018
      JobDateReportWithChangeCurrencyAndPlanningDateForSchedule                              129018
      JobDateReportWithChangeCurrencyAndPlanningDateForContract                              129018
      JobDateReportWithoutChangeCurrencyAndPlanningDateForContract                           129018
      JobDateReportWithChangeCurrencyAndPlanningDateForBothScheduleAndContract               129018
      JobDateReportWithoutChangeCurrencyAndPlanningDateForBothScheduleAndContract            129018

      Covers Test Cases for WI - 264725
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobCalculateWIPBatch, JobPostWIPToGLBatchWithReverseOnlyFalse, JobPostWIPToGLBatchWithReverseOnlyTrue    130453

      Covers Test Cases for WI - 264726
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobPostWIPToGLBatchWithChangingPostingGroup                                                              130454

      Covers Test Cases for WI - 264727
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobPostWIPToGLBatchWithChangingWIPMethod                                                                 130455

      Covers Test Cases for WI - 264728
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobCalculateWIPBatchForExcludingPartOfJob                                                                130456

      Covers Test Cases for WI -266421
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobSplitPlanningLine                                                                                     173559

      Covers Test Cases for WI -266422
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobTransferToPlanningLines                                                                               173560

      Covers Test Cases for WI -266430
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobCalcRemainingUsage                                                                                    130449

      Covers Test Cases for WI -266431
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      CreatePlanningLineFromPurchaseInvoice                                                                    130448

      Covers Test Cases for WI -264618
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      JobTransferToCreditMemoWithoutPostingDate,JobTransferToCreditMemoWithPostingDate
      JobTransferToCreditMemoWithSetCancel,JobTransferToCreditMemoWithoutSetCancel                             129022

      Covers Test Cases for WI - 266432
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      CreateSalesInvoiceFromJobTask                                                                            173561

      Covers Test Cases for WI - 266433
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      CreateSalesInvoiceFromJobPlanningLine                                                                    130450

      Covers Test Cases for WI - 273843
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      LineDiscountAmountOnSalesInvoice, PostSalesInvoiceCreatedFromJobPlanningLine                             202395

      Covers Test Cases for WI - 278849
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      CreateSalesInvoiceForItemFromJobTask, LineAmountOnJobJournalLine                                         189264

      Covers Test Cases for WI - 278763
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                       TFS ID
      ---------------------------------------------------------------------------------------------------------------
      SalesInvoiceLineWithExchangeRatesConfirmFalse, CurrencyFactorOnJobPlanningLine                           173727

      Covers Test Cases for WI - 280991
      ---------------------------------------------------
      Test Function Name                        TFS ID
      ---------------------------------------------------
      JobUnitCostAfterAdjustCostItemEntries     173702

      BUG ID 6771
      -----------------------------------------------------------------------------
      Test Function Name                                                   TFS ID
      -----------------------------------------------------------------------------
      CheckEntryAfterDeleteJoInvoiceOnPage                                 6771

      BUG ID 59180
      -----------------------------------------------------------------------------
      Test Function Name                                                   TFS ID
      -----------------------------------------------------------------------------
      VerifyTableRelationForJobNo
      VerifyTableRelationForJobTaskNo
      VerifyTableRelationForJobPlanningLineNo
      VerifyTableRelationErrorForJobNo
      VerifyTableRelationErrorForJobTaskNo
      VerifyTableRelationErrorForJobPlanningLineNo

      BUG ID 88422
      -----------------------------------------------------------------------------
      Test Function Name                                                   TFS ID
      -----------------------------------------------------------------------------
      JobPostWIPToGLForCost, JobPostWIPToGLForSales                        88422

      BUG ID 91969
      -----------------------------------------------------------------------------
      Test Function Name                                                   TFS ID
      -----------------------------------------------------------------------------
      RunAdjustCostItemEntriesForJob                                       91969
    }
    END.
  }
}

