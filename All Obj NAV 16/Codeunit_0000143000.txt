OBJECT Codeunit 143000 Library - TDS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1500013 : Codeunit 131000;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryRandom@1500001 : Codeunit 130440;
      PhoneNoTxt@1500005 : TextConst 'ENU=6666666';
      EmailTxt@1500004 : TextConst 'ENU=Cronus@hotmail.com';
      LocationTxt@1500003 : TextConst 'ENU=blue';
      AddressTxt@1500002 : TextConst 'ENU=The Ring 5, Patel Nagar';
      LibraryPurchase@1500006 : Codeunit 130512;

    PROCEDURE CreateAssesseeCode@1170000008() : Code[10];
    VAR
      AssesseeCode@1500000 : Record 13727;
    BEGIN
      WITH AssesseeCode DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Assessee Code"));
        VALIDATE(Description,Code);
        INSERT(TRUE);
        EXIT(Code);
      END;
    END;

    PROCEDURE CreateDeductorCategory@1500011(VAR DeductorCategory@1500002 : Record 16498);
    BEGIN
      WITH DeductorCategory DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Deductor Category"));
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateIncomeTaxAccPeriod@1500006(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724);
    VAR
      StartingDate@1500001 : Date;
    BEGIN
      IF IncomeTaxAccountingPeriod.FINDLAST THEN
        StartingDate := CALCDATE('<1D>',IncomeTaxAccountingPeriod."Ending Date")
      ELSE
        StartingDate := WORKDATE;

      CreateTDSTCSFiscalYear(IncomeTaxAccountingPeriod,StartingDate);
    END;

    PROCEDURE CreateIncomeTaxPeriod@1500004(VAR IncomeTaxPeriodSetup@1500000 : Record 16501;IncomeTaxAccountingPeriodNo@1500001 : Integer;QuarterNo@1500002 : Integer);
    VAR
      IncomeTaxAccPeriod@1500003 : Record 13724;
      StartingDate@1500004 : Date;
    BEGIN
      IncomeTaxAccPeriod.GET(IncomeTaxAccountingPeriodNo);
      StartingDate := GetQuarterStartingDate(IncomeTaxAccPeriod."Starting Date",QuarterNo);

      WITH IncomeTaxPeriodSetup DO BEGIN
        INIT;
        VALIDATE("No.",IncomeTaxAccPeriod."No.");
        VALIDATE(Quarter,QuarterNo);
        VALIDATE("Starting Date",StartingDate);
        VALIDATE("Ending Date",CALCDATE('<CQ>',StartingDate));
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateIncomeTaxPeriodQuarters@1500003(IncomeTaxAccountingPeriodNo@1500001 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      Quarter@1500002 : Integer;
    BEGIN
      FOR Quarter := IncomeTaxPeriodSetup.Quarter::Q1 TO IncomeTaxPeriodSetup.Quarter::Q4 DO
        CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,Quarter);
    END;

    PROCEDURE CreateNODNOCHeader@1500000(VAR NODNOCHeader@1500000 : Record 13786;HeaderType@1500001 : Option;No@1500002 : Code[20];AssesseeCode@1500003 : Code[10]);
    BEGIN
      WITH NODNOCHeader DO BEGIN
        INIT;
        VALIDATE(Type,HeaderType);
        VALIDATE("No.",No);
        VALIDATE("Assesse Code",AssesseeCode);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateNODNOCLines@1500001(VAR NODNOCLines@1500000 : Record 13785;NODNOCHeader@1500001 : Record 13786;NODNOC@1500002 : Code[10];ThresholdOverlook@1500003 : Boolean;NatureOfRemittance@1170000000 : Code[10];ActApplicable@1170000001 : ' ,IT,DTAA');
    BEGIN
      WITH NODNOCLines DO BEGIN
        INIT;
        VALIDATE(Type,NODNOCHeader.Type);
        VALIDATE("No.",NODNOCHeader."No.");
        VALIDATE("NOD/NOC",NODNOC);
        VALIDATE("Threshold Overlook",ThresholdOverlook);
        IF NatureOfRemittance <> '' THEN
          VALIDATE("Nature of Remittance",NatureOfRemittance);
        IF ActApplicable <> ActApplicable::" " THEN
          VALIDATE("Act Applicable",ActApplicable);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateTANNo@1500005() : Code[10];
    VAR
      TANNos@1500000 : Record 13725;
    BEGIN
      WITH TANNos DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"T.A.N. Nos."));
        VALIDATE(Description,Code);
        INSERT(TRUE);
        EXIT(Code);
      END;
    END;

    PROCEDURE CreateTDSNatureDeduction@1500008(TDSGroup@1500001 : Option) : Code[10];
    VAR
      TDSNatureDeduction@1500000 : Record 13726;
    BEGIN
      WITH TDSNatureDeduction DO BEGIN
        INIT;
        VALIDATE(Code,
          COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"TDS Nature of Deduction"),
            1,LibraryUtility.GetFieldLength(DATABASE::"TDS Nature of Deduction",FIELDNO(Code))));
        VALIDATE(Description,Code);
        VALIDATE(Category,Category::C);
        VALIDATE("TDS Group",TDSGroup);
        INSERT(TRUE);
        EXIT(Code);
      END;
    END;

    PROCEDURE CreateTDSSetup@1500010(VAR TDSSetup@1500000 : Record 13728;TDSNatureDeduction@1500001 : Code[10];AssesseeCode@1500002 : Code[10];EffectiveDate@1500003 : Date;ConcessionalCode@1500004 : Code[10];NatureOfRemittance@1170000000 : Code[10];ActApplicable@1170000001 : Option;CountryCode@1170000002 : Code[10]);
    BEGIN
      WITH TDSSetup DO BEGIN
        INIT;
        VALIDATE("TDS Nature of Deduction",TDSNatureDeduction);
        VALIDATE("Assessee Code",AssesseeCode);
        VALIDATE("Effective Date",EffectiveDate);
        VALIDATE("Concessional Code",ConcessionalCode);
        VALIDATE("Nature of Remittance",NatureOfRemittance);
        VALIDATE("Act Applicable",ActApplicable);
        VALIDATE("Country Code",CountryCode);
        INSERT(TRUE);
      END;
    END;

    PROCEDURE CreateTDSTCSFiscalYear@1500007(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724;StartingDate@1500001 : Date);
    VAR
      CreateTDSTCSFiscalYear@1500002 : Report 13717;
    BEGIN
      CreateTDSTCSFiscalYear.InitializeRequest(StartingDate,CALCDATE('<1Y-1D>',StartingDate));
      CreateTDSTCSFiscalYear.USEREQUESTPAGE(FALSE);
      CreateTDSTCSFiscalYear.RUN;

      IncomeTaxAccountingPeriod.SETRANGE("Starting Date",StartingDate);
      IncomeTaxAccountingPeriod.FINDLAST;
    END;

    PROCEDURE CreateNatureOfRemittance@1170000000(VAR NatureOfRemittance@1170000000 : Record 13783);
    BEGIN
      NatureOfRemittance.INIT;
      NatureOfRemittance.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(NatureOfRemittance.FIELDNO(Code),DATABASE::"TDS Nature of Remittance"));
      NatureOfRemittance.INSERT(TRUE);
    END;

    PROCEDURE CreateTaxJournalTemplateTDSAdj@1500420(VAR TaxJournalTemplate@1500222 : Record 16585);
    BEGIN
      WITH TaxJournalTemplate DO BEGIN
        INIT;
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Template"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Template",FIELDNO(Name))));
        VALIDATE(Description,Name);
        INSERT(TRUE);
        VALIDATE(Type,Type::"TDS Adjustments");
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateTaxJournalBatchTDSAdj@1500421(VAR TaxJournalBatch@1500220 : Record 16586;JournalTemplateName@1500221 : Code[10]);
    BEGIN
      WITH TaxJournalBatch DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",JournalTemplateName);
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Batch"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Batch",FIELDNO(Name))));
        VALIDATE(Description,Name);
        INSERT(TRUE);
        VALIDATE("No. Series",CreateNoseries);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateNoseries@1500418() : Code[10];
    VAR
      NoSeries@1501000 : Record 308;
      NoSeriesLine@1501001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'00001','99999');
      EXIT(NoSeries.Code);
    END;

    PROCEDURE CreateParty@1170000001(VAR Party@1170000000 : Record 13730);
    BEGIN
      Party.INIT;
      Party.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(Party.FIELDNO(Code),DATABASE::Party));
      Party.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Party.FIELDNO("P.A.N. No."),DATABASE::Party));
      Party.INSERT(TRUE);
    END;

    PROCEDURE CreateForeignVendorWithPANAPPLIED@1500037(VAR Vendor@1500000 : Record 23;CurrencyCode@1500001 : Code[10];CountryCode@1500002 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANAPPLIED);
      Vendor.VALIDATE("P.A.N. Reference No.",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetQuarterStartingDate@1500002(AccPeriodStartingDate@1500001 : Date;Quarter@1500000 : ',Q1,Q2,Q3,Q4') StartingDate : Date;
    BEGIN
      StartingDate := CALCDATE('<' + FORMAT(Quarter - 1) + 'Q-CQ>',AccPeriodStartingDate);
    END;

    PROCEDURE SetInclServTaxOptionInStruct@1500009(Structure@1500001 : Code[10];Value@1500000 : Boolean);
    VAR
      StructureDetails@1500002 : Record 13793;
    BEGIN
      StructureDetails.SETFILTER(Code,Structure);
      StructureDetails.MODIFYALL("Include in TDS Base",Value);
    END;

    PROCEDURE SetInclServTaxOptionInGenJnl@1500014(VAR GenJournalLine@1500001 : Record 81;Value@1500000 : Boolean);
    BEGIN
      GenJournalLine.VALIDATE("Include Serv. Tax in TDS Base",Value);
      GenJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE RoundTDS@1500030(Amount@1500000 : Decimal) : Decimal;
    VAR
      GLSetup@1500001 : Record 98;
    BEGIN
      GLSetup.GET;
      EXIT(ROUND(Amount,GLSetup."TDS Rounding Precision"));
    END;

    PROCEDURE RoundTCSAmount@1500257(TCSAmount@1500000 : Decimal) : Decimal;
    VAR
      GLSetup@1500003 : Record 98;
      TCSRoundingDirection@1500002 : Text[1];
      TCSRoundingPrecision@1500001 : Decimal;
    BEGIN
      GLSetup.GET;
      WITH GLSetup DO BEGIN
        CASE "TCS Rounding Type" OF
          "TCS Rounding Type"::Nearest:
            TCSRoundingDirection := '=';
          "TCS Rounding Type"::Up:
            TCSRoundingDirection := '>';
          "TCS Rounding Type"::Down:
            TCSRoundingDirection := '<';
        END;

        IF "TCS Rounding Precision" <> 0 THEN
          TCSRoundingPrecision := "TCS Rounding Precision"
        ELSE
          TCSRoundingPrecision := 1;

        EXIT(ROUND(TCSAmount,TCSRoundingPrecision,TCSRoundingDirection));
      END;
    END;

    PROCEDURE CreateVendorWithPostingSetup@1500023() : Code[20];
    VAR
      Vendor@1500003 : Record 23;
      GenBusPostingGroup@1500002 : Record 250;
      GenProductPostingGroup@1500001 : Record 251;
      GeneralPostingSetup@1500000 : Record 252;
      LibraryPurchase@1500004 : Codeunit 130512;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusPostingGroup.Code,GenProductPostingGroup.Code);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    PROCEDURE CalcTDSAmountsFromBase@1500087(VAR ExpectedTDSAmounts@1500001 : Record 13729;TDSsetup@1500004 : Record 13728;TaxBaseAmount@1500003 : Decimal);
    BEGIN
      WITH ExpectedTDSAmounts DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        "TDS Amount" := RoundTDS(TDSsetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := RoundTDS(TDSsetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := RoundTDS(TDSsetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := RoundTDS(TDSsetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    PROCEDURE UpdateNODNOCLines@1500046(VAR NODNOCLines@1500004 : Record 13785;Type@1500003 : Option;ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean;MonthlyCertificate@1500000 : Boolean);
    BEGIN
      NODNOCLines.SETRANGE("No.",NODNOCLines."No.");
      NODNOCLines.SETRANGE(Type,Type);
      NODNOCLines.FINDSET;
      NODNOCLines.MODIFYALL("Monthly Certificate",MonthlyCertificate);
      NODNOCLines.MODIFYALL("Threshold Overlook",ThresholdOverlook);
      NODNOCLines.MODIFYALL("Surcharge Overlook",SurchargeOverlook);
    END;

    PROCEDURE CreateConcessionalCode@1500021(VAR ConCode@1500002 : Record 13718);
    BEGIN
      ConCode.INIT;
      ConCode.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ConCode.FIELDNO(Code),DATABASE::"Concessional Codes"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Concessional Codes",ConCode.FIELDNO(Code))));
      ConCode.VALIDATE(Description,ConCode.Code);
      ConCode.INSERT(TRUE);
    END;

    PROCEDURE CreateAssesseeandNODNOCSetup@1500013(VAR NODNOCHeader@1500000 : Record 13786;VAR TDSNatureofDeduction@1500001 : Record 13726;VAR TDSSetup@1500007 : Record 13728;CountryCode@1500004 : Code[10];VendorNo@1500005 : Code[20];Type@1500006 : Option;EffectiveDate@1500008 : Date);
    VAR
      AssesseeCode@1500003 : Record 13727;
    BEGIN
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      IF CountryCode <> '' THEN
        CreateTDSNatureDeductionAndTDSSetup(TDSNatureofDeduction,TDSSetup,
          TDSNatureofDeduction."TDS Group"::"Payable to Non Residents",AssesseeCode.Code,CountryCode,EffectiveDate)
      ELSE
        CreateTDSNatureDeductionAndTDSSetup(TDSNatureofDeduction,TDSSetup,
          TDSNatureofDeduction."TDS Group"::Contractor,AssesseeCode.Code,CountryCode,EffectiveDate);
      CreateNODNOCSetupforTDS(NODNOCHeader,Type,VendorNo,AssesseeCode.Code,TDSNatureofDeduction.Code);
    END;

    PROCEDURE CreateTDSNatureDeductionAndTDSSetup@10(VAR TDSNatureDeduction@1055 : Record 13726;VAR TDSSetup@1500002 : Record 13728;TDSGroup@1056 : Option;AssesseeCode@1057 : Code[10];CountryCode@1500000 : Code[10];EffectiveDate@1500001 : Date);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      CreateTDSSetupWithCountry(TDSSetup,TDSNatureDeduction.Code,AssesseeCode,CountryCode,EffectiveDate);
    END;

    PROCEDURE CreateNODNOCSetupforTDS@1500012(VAR NODNOCHeader@1040 : Record 13786;Type@1041 : Option;No@1042 : Code[20];AssesseeCode@1043 : Code[10];CodeContractor@1044 : Code[10]);
    VAR
      NODNOCLines@1046 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,Type,No);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor);
      UpdateNODNOCLines(NODNOCLines,Type,TRUE,TRUE,FALSE);
    END;

    PROCEDURE CreateTDSSetupWithCountry@1500016(VAR TDSSetup@1500002 : Record 13728;TDSNatureDeductionCode@1500001 : Code[10];AssesseeCode@1500000 : Code[10];CountryCode@1500003 : Code[10];EffectiveDate@1500004 : Date);
    BEGIN
      CreateTDSSetup(TDSSetup,TDSNatureDeductionCode,AssesseeCode,EffectiveDate,'','',TDSSetup."Act Applicable",CountryCode);
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TDSSetup.MODIFY(TRUE);
    END;

    PROCEDURE CreateAndUpdateTDSAccNo@1500040(TDSSetup@1500000 : Record 13728) : Code[20];
    VAR
      TDSGroup@1500001 : Record 13731;
      TDSAccount@1500003 : Code[20];
    BEGIN
      TDSAccount := LibraryERM.CreateGLAccountNo;
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Account",TDSAccount);
      TDSGroup.MODIFY;
      EXIT(TDSAccount);
    END;

    PROCEDURE UpdateTDSNilChallanInGeneralLedgerSetup@1500434();
    VAR
      GeneralLedgerSetup@1500166 : Record 98;
    BEGIN
      WITH GeneralLedgerSetup DO BEGIN
        GET;
        VALIDATE("TDS Nil Challan Nos.",LibraryERM.CreateNoSeriesCode);
        VALIDATE("Nil Pay TDS Document Nos.","TDS Nil Challan Nos.");
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE Form26QForm27QReportFieldsValidation@1500017();
    VAR
      CompanyInfo@1500004 : Record 79;
      Location@1500005 : Record 14;
    BEGIN
      CompanyInfo.GET;
      WITH CompanyInfo DO BEGIN
        VALIDATE("Phone No.",PhoneNoTxt);
        VALIDATE("E-Mail",EmailTxt);
        VALIDATE("Location Code",LocationTxt);
        VALIDATE(Address,AddressTxt);
        MODIFY(TRUE);
        Location.GET("Location Code");
        Location.VALIDATE("T.A.N. No.","T.A.N. No.");
        Location.MODIFY(TRUE);
        COMMIT;
      END;
    END;

    PROCEDURE PayTDS@1500034(VAR GenJournalLine@1500000 : Record 81);
    VAR
      TDSEntry@1500002 : Record 13729;
      PayTDS1@1500001 : Page 13788;
    BEGIN
      WITH GenJournalLine DO BEGIN
        TESTFIELD("Document No.");
        TESTFIELD("Account No.");
        TESTFIELD("T.A.N. No.");
        "Pay TDS" := TRUE;
        MODIFY;
        TDSEntry.RESET;
        TDSEntry.SETRANGE("Account No.","Account No.");
        TDSEntry.SETRANGE("T.A.N. No.","T.A.N. No.");
        TDSEntry.SETFILTER("Total TDS Including SHE CESS",'<>%1',0);
        TDSEntry.SETRANGE("TDS Paid",FALSE);
        TDSEntry.SETRANGE(Reversed,FALSE);
        IF TDSEntry.FINDFIRST THEN BEGIN
          PayTDS1.SetBatch("Journal Batch Name","Journal Template Name","Line No.");
          PayTDS1.PayTDS(TDSEntry)
        END;
      END;
    END;

    PROCEDURE CalcExpectedTDSAmounts@1500015(VAR ExpectedTDSAmtPurchaseLine@1500000 : Record 39;PurchaseLine@1500003 : Record 39;TDSSetup@1500002 : Record 13728);
    BEGIN
      WITH ExpectedTDSAmtPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := PurchaseLine.Amount;
        "TDS Amount" := RoundTDS((TDSSetup."TDS %" / 100 * "TDS Base Amount"));
        "Surcharge Amount" := RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500053(VAR CompanyInformation@1500000 : Record 79);
    VAR
      DeductorCategory@1500001 : Record 16498;
    BEGIN
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("T.A.N. No.",CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    PROCEDURE UpdateChallanDetails@1500038(DocNo@1500005 : Code[20];PaymentDocNo@1500000 : Code[20];ChallanDate@1500001 : Date) : Code[5];
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
      ChallanNo@1500004 : Code[5];
    BEGIN
      WITH TDSEntry DO BEGIN
        SETFILTER("Document No.",DocNo);
        FINDFIRST;
        ChallanNo := FORMAT(LibraryRandom.RandInt(1000));
        UpdateChallanDetails.InitializeRequest(PaymentDocNo,ChallanNo,ChallanDate,
          LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,
          ChallanDate,1);
        UpdateChallanDetails.USEREQUESTPAGE(FALSE);
        UpdateChallanDetails.RUN;
      END;
      EXIT(ChallanNo);
    END;

    PROCEDURE RunUpdateChallanRegister@1500217(ChallanNo@1501000 : Code[20];UpdatedTDSAmount@1500001 : Decimal);
    VAR
      ChallanRegister@1500201 : Record 16504;
      UpdateChallanRegister@1500203 : Report 16503;
    BEGIN
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      ChallanRegister.FINDFIRST;
      COMMIT;
      UpdateChallanRegister.SETTABLEVIEW(ChallanRegister);
      UpdateChallanRegister.UpdateChallan(UpdatedTDSAmount,UpdatedTDSAmount,UpdatedTDSAmount,ChallanRegister."Entry No.");
      UpdateChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateChallanRegister.RUNMODAL;
    END;

    PROCEDURE GetFormNo@1500031(Resident@1500000 : Boolean) : Integer;
    VAR
      BatchHeader@1500001 : Record 16503;
    BEGIN
      IF Resident THEN
        EXIT(BatchHeader."Form No."::"26Q");
      EXIT(BatchHeader."Form No."::"27Q");
    END;

    PROCEDURE GetPostedTDSAmount@1500018(DocumentNo@1500001 : Code[20];TDSAccountNo@1500000 : Code[20]) : Decimal;
    VAR
      TDSEntry@1500002 : Record 13729;
      Amount@1500003 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Pay TDS Document No.",DocumentNo);
      TDSEntry.SETRANGE("Account No.",TDSAccountNo);
      TDSEntry.SETRANGE("TDS Paid",FALSE);
      IF TDSEntry.FINDSET THEN
        REPEAT
          Amount := Amount + TDSEntry."Bal. TDS Including SHE CESS";
        UNTIL TDSEntry.NEXT = 0;
      EXIT(Amount);
    END;

    BEGIN
    END.
  }
}

