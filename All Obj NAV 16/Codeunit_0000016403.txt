OBJECT Codeunit 16403 GST Application Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVIN9.00.00.49326,TFS225680;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EarlierPostingDateErr@1500000 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = Payment, %4 = Payment Document";ENU=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.;ENN=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.';
      GSTDocumentErr@1500001 : TextConst 'ENU=You cannot apply and post an entry without GST to an entry with GST.;ENN=You cannot apply and post an entry without GST to an entry with GST.';
      GSTRefundDocumentErr@1500302 : TextConst 'ENU=You cannot apply a document with GST to a document without GST.;ENN=You cannot apply a document with GST to a document without GST.';
      AppliedAmtErr@1500303 : TextConst 'ENU=You cannot refund amount greater than applied amount.;ENN=You cannot refund amount greater than applied amount.';
      GeneralLedgerSetup@1500016 : Record 98;
      GSTManagement@1500004 : Codeunit 16401;
      QtyFactor@1500003 : Decimal;
      RegNoErr@1500005 : TextConst 'ENU=You cannot apply the documents, because they have different GST Registration Nos.;ENN=You cannot apply the documents, because they have different GST Registration Nos.';
      GSTGroupCodeEqualErr@1500014 : TextConst '@@@="%1 = Payment Entry No., %2 = Document Type, %3 = Document No.";ENU=GST Group Code must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.;ENN=GST Group Code must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.';
      GSTApplicationErr@1500017 : TextConst '@@@="%1 = Type, %2 = Document Type, %3 = Document No.";ENU=You cannot apply %1 Document Type %2 Document No. %3 with Advance Payment.;ENN=You cannot apply %1 Document Type %2 Document No. %3 with Advance Payment.';
      TransactionType2@1500018 : 'Purchase,Sales,Transfer,Service';
      GSTGroupAmountErr@1500021 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = GST Group Code, %4 = Amount, %5 = Payment Amount";ENU=Insufficient Balance, Available Amount in Document Type %1 Document No %2 GST Group Code %3  is Amount %4, and Payment Remaining Amount %5.;ENN=Insufficient Balance, Available Amount in Document Type %1 Document No %2 GST Group Code %3  is Amount %4, and Payment Remaining Amount %5.';
      NoGSTEntryErr@1500023 : TextConst '@@@="%1 = Entry No.";ENU=There is no Detailed GST Entry Records for Advance Payment Entry %1.;ENN=There is no Detailed GST Entry Records for Advance Payment Entry %1.';
      GSTCustomerTypeErr@1500022 : TextConst '@@@="%1 = Document No., %2 = Entry No.";ENU=Customer Type must not be Blank or Exempted in Document %1 and Entry No %2.;ENN=Customer Type must not be Blank or Exempted in Document %1 and Entry No %2.';
      OriginalDocumentType@1500024 : ' ,Payment,Invoice,Credit Memo,Transfer,Finance Charge Memo,Reminder';
      GSTGroupEqualErr@1500025 : TextConst '@@@="%1 = Payment Entry No., %2 = Document Type, %3 = Document No.";ENU=GST Group type must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.;ENN=GST Group type must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.';
      GSTVendorTypeErr@1500026 : TextConst '@@@="%1 = Document No., %2 = Entry No.";ENU=Purchase Document document must be Reverse Charge in Document %1 and Entry No %2.;ENN=Purchase Document document must be Reverse Charge in Document %1 and Entry No %2.';
      ApplyCurrencyFac@1500027 : Boolean;
      ApplyCurrencyFacInvoice@1500028 : Boolean;
      NoInvoiceGSTErr@1500029 : TextConst '@@@="%1 = Document No., %2 = GST Group Code";ENU=There is no Invoice GST Amount in Document %1, for GST Group Code %2.;ENN=There is no Invoice GST Amount in Document %1, for GST Group Code %2.';
      ExceedGroupAmtErr@1500030 : TextConst '@@@="%1 = Amount, %2 = GST Group Code";ENU=Since you are applying multiple GST applicable Advance Payment and Suggested Amount to Apply is %1 for GST Group Code %2, if you are applying more than suggested amount, it may cause an error while posting.;ENN=Since you are applying multiple GST applicable Advance Payment and Suggested Amount to Apply is %1 for GST Group Code %2, if you are applying more than suggested amount, it may cause an error while posting.';
      MismatchHSNErr@1500054 : TextConst '@@@="%1 = Payment Document No, %2 = Invoice Document No";ENU=There is mismatch in GST component of Payment and Invoice document, Payment Document No is %1 Invoice Document No %2;ENN=There is mismatch in GST component of Payment and Invoice document, Payment Document No is %1 Invoice Document No %2';
      ApplicationMandatoryErr@1500154 : TextConst '@@@="%1 = Document Type, %2 = Document No.";ENU=%1 %2 with GST cannot be posted without Application.;ENN=%1 %2 with GST cannot be posted without Application.';
      InvoiceAppliedErr@1500256 : TextConst '@@@="%1 = Field Name,%2 = Document Type";ENU=Only %1 %2 can be selected for application.;ENN=Only %1 %2 can be selected for application.';
      SalesDocumentErr@1500102 : TextConst 'ENU=Invoice posted from Sales Document is applicable for application.;ENN=Invoice posted from Sales Document is applicable for application.';
      OneApplicationDocumentErr@1500258 : TextConst '@@@="%1 = Document Type,%2 = Document No.";ENU=You cannot apply more than 1 Invoice to %1 %2.;ENN=You cannot apply more than 1 Invoice to %1 %2.';
      DiffLocationErr@1500259 : TextConst 'ENU=Location Code must be same in both the Documents.;ENN=Location Code must be same in both the Documents.';
      DiffGSTRegNoErr@1500260 : TextConst '@@@="%1 = Place Of Supply";ENU=GST Registration No. must be same in both the Documents for %1.;ENN=GST Registration No. must be same in both the Documents for %1.';
      PostingDateErr@1500261 : TextConst '@@@="%1 = Document No., %2 = Document No.";ENU=Posted Invoice No. %1 Posting Date must be earlier than Document No. %2.;ENN=Posted Invoice No. %1 Posting Date must be earlier than Document No. %2.';
      DateErr@1500262 : TextConst '@@@="%1 = Credit Memo Locking Date, %2 = Annual Return Filed Date";ENU=%1 and %2 cannot be blank in GST Accounting Period.;ENN=%1 and %2 cannot be blank in GST Accounting Period.';
      DateLockErr@1500263 : TextConst '@@@="%1 =Document No., %2 = Field Name, %3 = Date";ENU=Document No. %1 cannot be posted as Posting Date must be earlier than %2 %3.;ENN=Document No. %1 cannot be posted as Posting Date must be earlier than %2 %3.';
      PaidAdvPaymntForAppErr@1500002 : TextConst 'ENU=You cannot apply paid advance payment with order/invoice with same period month/year.;ENN=You cannot apply paid advance payment with order/invoice with same period month/year.';
      PurchaseDocumentErr@1500012 : TextConst 'ENU=Invoice posted from Purchase Document is applicable for application.;ENN=Invoice posted from Purchase Document is applicable for application.';
      OneDocumentErr@1500006 : TextConst '@@@="%1 = Document Type,%2 = Document No.";ENU=You cannot apply more than 1 Document to %1 %2.;ENN=You cannot apply more than 1 Document to %1 %2.';
      DiffJurisdictionErr@1500010 : TextConst '@@@="%1= GST Jurisdiction Type";ENU=%1  must be same in both the Documents.;ENN=%1  must be same in both the Documents.';
      DiffCurrencyCodeErr@1500009 : TextConst '@@@="%1 = Field Name";ENU=%1 must be same in both the documents.;ENN=%1 must be same in both the documents.';
      EqualDateLockErr@1500015 : TextConst '@@@="%1 =Document No., %2 = Field Name, %3 = Field Name, %4 = Date";ENU=Document No. %1 cannot be posted as Posting Date must be earlier than %2 & %3 %4.;ENN=Document No. %1 cannot be posted as Posting Date must be earlier than %2 & %3 %4.';
      DiffGSTWithoutPaymentOfDutyErr@1500215 : TextConst 'ENU=GST Without Payment of Duty must be same in both the Documents.;ENN=GST Without Payment of Duty must be same in both the Documents.';
      InvoiceNoBlankErr@1170000000 : TextConst '@@@="%1 =Document No., %2 = Invoice No.";ENU=Credit Memo No. %1 has already been applied against Invoice No. %2.;ENN=Credit Memo No. %1 has already been applied against Invoice No. %2.';

    PROCEDURE FillGSTApplicationBufferPurchase@1500031(PurchaseHeader@1500013 : Record 38;VAR VendorLedgerEntry@1500005 : Record 25) : Boolean;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        DeletePaymentAplicationBuffer(TransactionType2::Purchase,VendorLedgerEntry."Entry No.");
        VendorLedgerEntry.TESTFIELD("GST on Advance Payment",TRUE);
        VendorLedgerEntry.TESTFIELD("GST Reverse Charge",TRUE );
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::Order]) THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FIELDCAPTION("Document Type"),FORMAT("Document Type"),"No."));
        IF NOT GSTManagement.IsItReverseCharge(PurchaseHeader) THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FORMAT(FIELDCAPTION("GST Vendor Type")),FORMAT("Document Type"),"No."));
        IF NOT GSTManagement.IsGSTApplicable(Structure) THEN
          ERROR(GSTDocumentErr);
        IF VendorLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(VendorLedgerEntry."Document Type"),
              VendorLedgerEntry."Document No.",FORMAT("Document Type"),"No."));
        GSTPurchaseApplicationValidations(VendorLedgerEntry,PurchaseHeader);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE FillGSTApplicationBufferSales@1500000(VAR SalesHeader@1500001 : Record 36;VAR CustLedgerEntry@1500005 : Record 21) : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        DeletePaymentAplicationBuffer(TransactionType2::Sales,CustLedgerEntry."Entry No.");
        CustLedgerEntry.TESTFIELD("GST on Advance Payment",TRUE);
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::Order]) THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FIELDCAPTION("Document Type"),FORMAT("Document Type"),"No."));
        IF "GST Without Payment of Duty" THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FIELDCAPTION("GST Without Payment of Duty"),FORMAT("Document Type"),"No."));
        IF "GST Customer Type" IN ["GST Customer Type"::" ","GST Customer Type"::Exempted] THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FORMAT(FIELDCAPTION("GST Customer Type")),FORMAT("Document Type"),"No."));
        IF NOT GSTManagement.IsGSTApplicable(Structure) THEN
          ERROR(GSTDocumentErr);
        IF CustLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(CustLedgerEntry."Document Type"),
              CustLedgerEntry."Document No.",FORMAT("Document Type"),"No."));
        GSTSalesApplicationValidations(CustLedgerEntry,SalesHeader);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE FillAppBufferHSNComponentInvoice@1500003(TransactionType@1500004 : 'Purchase,Sales,Transfer,Service';AccountNo@1500005 : Code[20];InvoiceDocType@1500002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';InvoiceDocNo@1500003 : Code[20]);
    VAR
      GSTApplicationBuffer@1500001 : ARRAY [2] OF Record 16423;
      DetailedGSTEntryBuffer@1500000 : Record 16412;
    BEGIN
      CASE TransactionType OF
        TransactionType::Sales,TransactionType::Service:
          DeleteInvoiceApplicationBuffer(
            TransactionType::Sales,AccountNo,InvoiceDocType,InvoiceDocNo);
        TransactionType::Purchase:
          DeleteInvoiceApplicationBuffer(
            TransactionType::Purchase,AccountNo,InvoiceDocType,InvoiceDocNo);
      END;
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      CASE TransactionType OF
        TransactionType::Purchase:
          DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Purchase);
        TransactionType::Sales:
          DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Sales);
        TransactionType2::Service:
          DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Service);
      END;
      DetailedGSTEntryBuffer.SETRANGE("Document Type",InvoiceDocType);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",InvoiceDocNo);
      DetailedGSTEntryBuffer.SETRANGE("Source No.",AccountNo);
      DetailedGSTEntryBuffer.SETRANGE(Exempted,FALSE);
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH GSTApplicationBuffer[1] DO BEGIN
            IF DetailedGSTEntryBuffer."Transaction Type" = DetailedGSTEntryBuffer."Transaction Type"::Service THEN
              "Transaction Type" := DetailedGSTEntryBuffer."Transaction Type"::Sales
            ELSE
              "Transaction Type" := DetailedGSTEntryBuffer."Transaction Type";
            "Original Document Type" := InvoiceDocType;
            "Original Document No." := InvoiceDocNo;
            "Account No." := AccountNo;
            "GST Group Code" := DetailedGSTEntryBuffer."GST Group Code";
            "GST Group Type" := DetailedGSTEntryBuffer."GST Group Type";
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "Current Doc. Type" := InvoiceDocType;
            QtyFactor :=
              GetQtyFactor(
                TransactionType,DetailedGSTEntryBuffer."Document Type",
                DetailedGSTEntryBuffer."Document No.",DetailedGSTEntryBuffer."Line No.");
            "Current Doc. Type" := DetailedGSTEntryBuffer."Document Type";
            "Currency Code" := DetailedGSTEntryBuffer."Currency Code";
            "Currency Factor" := DetailedGSTEntryBuffer."Currency Factor";
            "GST Rounding Precision" := DetailedGSTEntryBuffer."GST Rounding Precision";
            "GST Rounding Type" := DetailedGSTEntryBuffer."GST Rounding Type";
            "Charge To Cust/Vend" := DetailedGSTEntryBuffer."Charge To Cust/Vend";
            "TDS/TCS Amount" := DetailedGSTEntryBuffer."TDS/TCS Amount";
            "GST Base Amount" := ROUND(DetailedGSTEntryBuffer."GST Base Amount" * QtyFactor,0.01);
            "GST Amount" :=
              GSTManagement.RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount" * QtyFactor);
            "GST Cess" := DetailedGSTEntryBuffer.Cess;
          END;
          GSTApplicationBuffer[2] := GSTApplicationBuffer[1];
          IF GSTApplicationBuffer[2].FIND THEN BEGIN
            GSTApplicationBuffer[2]."GST Base Amount" += GSTApplicationBuffer[1]."GST Base Amount";
            GSTApplicationBuffer[2]."GST Amount" += GSTApplicationBuffer[1]."GST Amount";
            GSTApplicationBuffer[2]."Charge To Cust/Vend" += GSTApplicationBuffer[1]."Charge To Cust/Vend";
            GSTApplicationBuffer[2]."TDS/TCS Amount" += GSTApplicationBuffer[1]."TDS/TCS Amount";
            GSTApplicationBuffer[2].MODIFY(TRUE);
          END ELSE
            GSTApplicationBuffer[2].INSERT(TRUE);
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
    END;

    PROCEDURE DeleteGSTApplicationBuffer@1500002(TransactionType@1500004 : 'Purchase,Sale';AccountNo@1500005 : Code[20];DocType@1500000 : Option;DocNo@1500001 : Code[20]);
    VAR
      GSTApplicationBuffer@1500002 : Record 16423;
      GSTApplicationBuffer1@1500003 : Record 16423;
    BEGIN
      GSTApplicationBuffer.SETRANGE("Transaction Type",TransactionType);
      GSTApplicationBuffer.SETRANGE("Account No.",AccountNo);
      GSTApplicationBuffer.SETRANGE("Applied Doc. Type",DocType);
      GSTApplicationBuffer.SETRANGE("Applied Doc. No.",DocNo);
      GSTApplicationBuffer.DELETEALL(TRUE);
      GSTApplicationBuffer1.SETRANGE("Transaction Type",TransactionType);
      GSTApplicationBuffer1.SETRANGE("Account No.",AccountNo);
      GSTApplicationBuffer1.SETRANGE("Original Document Type",DocType);
      GSTApplicationBuffer1.SETRANGE("Original Document No.",DocNo);
      GSTApplicationBuffer1.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteGSTApplicationBufferPosted@1500006(TransactionType@1500004 : 'Purchase,Sale';PostedDocType@1500006 : Option;PostedDocNo@1500000 : Code[20];AccountNo@1500001 : Code[20]);
    VAR
      GSTApplicationBuffer@1500002 : Record 16423;
      GSTApplicationBuffer1@1500003 : Record 16423;
    BEGIN
      GSTApplicationBuffer.SETRANGE("Transaction Type",TransactionType);
      GSTApplicationBuffer.SETRANGE("Account No.",AccountNo);
      GSTApplicationBuffer.SETRANGE("Applied Doc. Type(Posted)",PostedDocType);
      GSTApplicationBuffer.SETRANGE("Applied Doc. No.(Posted)",PostedDocNo);
      GSTApplicationBuffer.DELETEALL(TRUE);
      GSTApplicationBuffer1.SETRANGE("Transaction Type",TransactionType);
      GSTApplicationBuffer1.SETRANGE("Account No.",AccountNo);
      GSTApplicationBuffer1.SETRANGE("Original Document Type",PostedDocType);
      GSTApplicationBuffer1.SETRANGE("Original Document No.",PostedDocNo);
      GSTApplicationBuffer1.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteGSTApplicationBufferInvoice@1500206(TransactionType@1500004 : Option;DocType@1500000 : Option;DocNo@1500001 : Code[20];AccountNo@1500003 : Code[20]);
    VAR
      GSTApplicationBuffer@1500002 : Record 16423;
    BEGIN
      GSTApplicationBuffer.SETRANGE("Transaction Type",TransactionType);
      GSTApplicationBuffer.SETRANGE("Account No.",AccountNo);
      GSTApplicationBuffer.SETRANGE("Current Doc. Type",DocType);
      GSTApplicationBuffer.SETRANGE("Original Document No.",DocNo);
      GSTApplicationBuffer.DELETEALL(TRUE);
    END;

    PROCEDURE CheckValidationsRefund@1500116(TransactionType@1500001 : 'Purchase,Sale';GenJournalLine@1500002 : Record 81;TransactionNo@1500000 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500003 : Record 16419;
      CustLedgerEntry@1500004 : Record 21;
      VendorLedgerEntry@1500005 : Record 25;
      Location@1500006 : Record 14;
    BEGIN
      IF TransactionType = TransactionType::Sale THEN BEGIN
        CustLedgerEntry.SETCURRENTKEY("Transaction No.");
        CustLedgerEntry.SETRANGE("Transaction No.",TransactionNo);
        CustLedgerEntry.SETRANGE("GST Group Code",GenJournalLine."GST Group Code");
        CustLedgerEntry.SETRANGE("HSN/SAC Code",GenJournalLine."HSN/SAC Code");
        IF CustLedgerEntry.FINDFIRST THEN;
        CustLedgerEntry.CALCFIELDS("Remaining Amount");
        IF ABS(GenJournalLine.Amount) > ABS(CustLedgerEntry."Remaining Amount") THEN
          ERROR(AppliedAmtErr);
        IF (GenJournalLine."HSN/SAC Code" = '') OR (GenJournalLine."GST Group Code" = '') OR
           (GenJournalLine."GST Place of Supply" = GenJournalLine."GST Place of Supply"::" ")
        THEN
          ERROR(GSTRefundDocumentErr);
        IF GenJournalLine."Applies-to Doc. No." <> '' THEN BEGIN
          IF CustLedgerEntry."Posting Date" > GenJournalLine."Posting Date" THEN
            ERROR(
              STRSUBSTNO(
                EarlierPostingDateErr,CustLedgerEntry."Document Type",
                CustLedgerEntry."Document No.",GenJournalLine."Document Type",GenJournalLine."Document No."));
          DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction No.");
          DetailedGSTLedgerEntry.SETRANGE("Transaction No.",CustLedgerEntry."Transaction No.");
          DetailedGSTLedgerEntry.SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
          IF DetailedGSTLedgerEntry.FINDSET THEN
            REPEAT
              GenJournalLine.TESTFIELD("Location Code",DetailedGSTLedgerEntry."Location Code");
              GenJournalLine.TESTFIELD("Currency Code",DetailedGSTLedgerEntry."Currency Code");
              GenJournalLine.TESTFIELD("HSN/SAC Code",DetailedGSTLedgerEntry."HSN/SAC Code");
              GenJournalLine.TESTFIELD("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type");
            UNTIL DetailedGSTLedgerEntry.NEXT = 0;
        END ELSE
          IF GenJournalLine."Applies-to ID" <> '' THEN BEGIN
            CustLedgerEntry.SETRANGE("Applies-to ID",GenJournalLine."Applies-to ID");
            IF CustLedgerEntry.FINDSET THEN
              REPEAT
                IF CustLedgerEntry."Posting Date" <= GenJournalLine."Posting Date" THEN
                  ERROR(
                    STRSUBSTNO(
                      EarlierPostingDateErr,CustLedgerEntry."Document Type",
                      CustLedgerEntry."Document No.",GenJournalLine."Document Type",GenJournalLine."Document No."));
                DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction No.");
                DetailedGSTLedgerEntry.SETRANGE("Transaction No.",CustLedgerEntry."Transaction No.");
                IF DetailedGSTLedgerEntry.FINDSET THEN
                  REPEAT
                    GenJournalLine.TESTFIELD("Location Code",DetailedGSTLedgerEntry."Location Code");
                    GenJournalLine.TESTFIELD("Currency Code",DetailedGSTLedgerEntry."Currency Code");
                    GenJournalLine.TESTFIELD("HSN/SAC Code",DetailedGSTLedgerEntry."HSN/SAC Code");
                    GenJournalLine.TESTFIELD("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type");
                    CustLedgerEntry.CALCFIELDS(Amount);
                  UNTIL DetailedGSTLedgerEntry.NEXT = 0;
              UNTIL CustLedgerEntry.NEXT = 0;
          END;
      END ELSE
        IF TransactionType = TransactionType::Purchase THEN BEGIN
          VendorLedgerEntry.SETRANGE("Transaction No.",TransactionNo);
          VendorLedgerEntry.SETRANGE("GST Group Code",GenJournalLine."GST Group Code");
          VendorLedgerEntry.SETRANGE("HSN/SAC Code",GenJournalLine."HSN/SAC Code");
          IF VendorLedgerEntry.FINDFIRST THEN;
          VendorLedgerEntry.CALCFIELDS("Remaining Amount");
          IF ABS(GenJournalLine.Amount) > ABS(VendorLedgerEntry."Remaining Amount") THEN
            ERROR(AppliedAmtErr);
          IF (GenJournalLine."HSN/SAC Code" = '') OR (GenJournalLine."GST Group Code" = '') THEN
            ERROR(GSTRefundDocumentErr);
          IF GenJournalLine."Applies-to Doc. No." <> '' THEN BEGIN
            IF VendorLedgerEntry."Posting Date" > GenJournalLine."Posting Date" THEN
              ERROR(
                STRSUBSTNO(
                  EarlierPostingDateErr,VendorLedgerEntry."Document Type",
                  VendorLedgerEntry."Document No.",GenJournalLine."Document Type",GenJournalLine."Document No."));
            DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction No.");
            DetailedGSTLedgerEntry.SETRANGE("Transaction No.",VendorLedgerEntry."Transaction No.");
            DetailedGSTLedgerEntry.SETRANGE("HSN/SAC Code",GenJournalLine."HSN/SAC Code");
            IF DetailedGSTLedgerEntry.FINDSET THEN
              REPEAT
                GenJournalLine.TESTFIELD("Location Code",DetailedGSTLedgerEntry."Location Code");
                GenJournalLine.TESTFIELD("Currency Code",DetailedGSTLedgerEntry."Currency Code");
                GenJournalLine.TESTFIELD("HSN/SAC Code",DetailedGSTLedgerEntry."HSN/SAC Code");
                GenJournalLine.TESTFIELD("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type");
                Location.GET(GenJournalLine."Location Code");
                IF Location."GST Registration No." <> DetailedGSTLedgerEntry."Location  Reg. No." THEN
                  ERROR(RegNoErr);
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
          END ELSE
            IF GenJournalLine."Applies-to ID" <> '' THEN BEGIN
              VendorLedgerEntry.SetAppliesToIDFilter(
                GenJournalLine."Account No.",GenJournalLine."Applies-to ID");
              IF VendorLedgerEntry.FINDSET THEN
                REPEAT
                  IF VendorLedgerEntry."Posting Date" > GenJournalLine."Posting Date" THEN
                    ERROR(
                      STRSUBSTNO(
                        EarlierPostingDateErr,VendorLedgerEntry."Document Type",
                        VendorLedgerEntry."Document No.",GenJournalLine."Document Type",GenJournalLine."Document No."));
                  DetailedGSTLedgerEntry.SETRANGE("Transaction No.",VendorLedgerEntry."Transaction No.");
                  DetailedGSTLedgerEntry.SETRANGE("HSN/SAC Code",GenJournalLine."HSN/SAC Code");
                  IF DetailedGSTLedgerEntry.FINDSET THEN
                    REPEAT
                      GenJournalLine.TESTFIELD("Location Code",DetailedGSTLedgerEntry."Location Code");
                      GenJournalLine.TESTFIELD("Currency Code",DetailedGSTLedgerEntry."Currency Code");
                      GenJournalLine.TESTFIELD("HSN/SAC Code",DetailedGSTLedgerEntry."HSN/SAC Code");
                      GenJournalLine.TESTFIELD("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type");
                    UNTIL DetailedGSTLedgerEntry.NEXT = 0;
                UNTIL VendorLedgerEntry.NEXT = 0;
            END;
        END;
    END;

    PROCEDURE InsertGSTLedgerEntryAdvRefund@1500430(GSTPostingBuffer@1500004 : Record 16420;GenJournalLine@1500006 : Record 81;NextTransactionNo@1500001 : Integer;CurrencyCode@1500003 : Code[10];CurrencyFactor@1500005 : Decimal) : Integer;
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
      LastGSTLedgerEntry@1500008 : Record 16418;
      GetTransactionNo@1500007 : Integer;
      EntryNo@1500009 : Integer;
    BEGIN
      IF LastGSTLedgerEntry.FINDLAST THEN
        EntryNo := LastGSTLedgerEntry."Entry No.";
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        EntryNo += 1;
        "Entry No." := EntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := GenJournalLine."Posting Date";
        "Document No." := GenJournalLine."Document No.";
        "Document Type" := "Document Type"::Refund;
        CASE GSTPostingBuffer."Transaction Type" OF
          GSTPostingBuffer."Transaction Type"::Sales:
            BEGIN
              "Transaction Type" := "Transaction Type"::Sales;
              "Source Type" := "Source Type"::Customer;
            END;
          GSTPostingBuffer."Transaction Type"::Purchase:
            BEGIN
              "Transaction Type" := "Transaction Type"::Purchase;
              "Source Type" := "Source Type"::Vendor;
              "Reverse Charge" := TRUE;
            END;
        END;
        "GST Amount" := GSTPostingBuffer."GST Amount";
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "Source No." := GenJournalLine."Account No.";
        "User ID" := USERID;
        "Source Code" := GenJournalLine."Source Code";
        "Reason Code" := GenJournalLine."Reason Code";
        "Transaction No." := NextTransactionNo;
        GetTransactionNo := "Transaction No.";
        "Payment Type" := "Payment Type"::Advance;
        "External Document No." := GenJournalLine."External Document No.";
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        "Currency Code" := CurrencyCode;
        "Currency Factor" := CurrencyFactor;
        INSERT(TRUE);
      END;
      EXIT(GetTransactionNo);
    END;

    PROCEDURE InsertDetailedGSTEntryRefund@1500107(PostedDocNo@1500003 : Code[20];TransactionNo@1500000 : Integer;NewTransactionNo@1500002 : Integer;ApplicationFactor@1500010 : Decimal;AdvAdjstJournal@1500011 : Boolean;LedgerENntryNo@1500012 : Integer;PostingDate@1500004 : Date);
    VAR
      NewDetailedGSTLedgerEntry@1500007 : Record 16419;
      DetailedGSTLedgerEntry@1500001 : Record 16419;
      Vendor@1500005 : Record 23;
      GSTBaseAmount@1500014 : Decimal;
      GSTAmount@1500015 : Decimal;
      EntryNo@1500006 : Integer;
    BEGIN
      EntryNo := GSTManagement.GetNextGSTDetailEntryNo;
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction No.");
        SETRANGE("Transaction No.",TransactionNo);
        SETRANGE("CLE/VLE Entry No.",LedgerENntryNo);
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        IF FINDSET THEN BEGIN
          REPEAT
            GetRefundAmount(
              "Transaction Type","Original Doc. No.","Source No.","HSN/SAC Code","GST Component Code",PostedDocNo,
              GSTBaseAmount,GSTAmount,"GST Group Code");
            DeleteRefundAppBuffer(
              "Transaction Type","Source No.","Original Doc. No.",PostedDocNo,"HSN/SAC Code","GST Component Code",
              "GST Group Code");
            CLEAR(NewDetailedGSTLedgerEntry);
            NewDetailedGSTLedgerEntry.INIT;
            NewDetailedGSTLedgerEntry.TRANSFERFIELDS(DetailedGSTLedgerEntry);
            NewDetailedGSTLedgerEntry."Entry No." := EntryNo;
            NewDetailedGSTLedgerEntry."Document Type" := NewDetailedGSTLedgerEntry."Document Type"::Refund;
            NewDetailedGSTLedgerEntry."Document No." := PostedDocNo;
            NewDetailedGSTLedgerEntry."Transaction No." := NewTransactionNo;
            NewDetailedGSTLedgerEntry."Application Doc. Type" :=
              NewDetailedGSTLedgerEntry."Application Doc. Type"::Payment;
            NewDetailedGSTLedgerEntry."Application Doc. No" := "Document No.";
            NewDetailedGSTLedgerEntry."Applied From Entry No." := "Entry No.";
            NewDetailedGSTLedgerEntry."Entry Type" :=
              NewDetailedGSTLedgerEntry."Entry Type"::"Initial Entry";
            NewDetailedGSTLedgerEntry."CLE/VLE Entry No." := LedgerENntryNo;
            NewDetailedGSTLedgerEntry."Posting Date" := PostingDate;
            NewDetailedGSTLedgerEntry."GST Base Amount" := GSTBaseAmount * ApplicationFactor;
            NewDetailedGSTLedgerEntry."GST Amount" :=
              GSTManagement.RoundGSTPrecisionRefund(GSTAmount * ApplicationFactor,"GST Rounding Precision","GST Rounding Type");
            NewDetailedGSTLedgerEntry.Positive := NOT Positive;
            NewDetailedGSTLedgerEntry."GST on Advance Payment" := FALSE;
            IF ("Transaction Type" = "Transaction Type"::Purchase) AND ("Source Type" = "Source Type"::Vendor) THEN BEGIN
              Vendor.GET("Source No.");
              NewDetailedGSTLedgerEntry."Associated Enterprises" := Vendor."Associated Enterprises";
            END;
            NewDetailedGSTLedgerEntry."Payment Type" := NewDetailedGSTLedgerEntry."Payment Type"::Advance;
            NewDetailedGSTLedgerEntry."GST Credit" := "GST Credit";
            NewDetailedGSTLedgerEntry."Adv. Pmt. Adjustment" := AdvAdjstJournal;
            NewDetailedGSTLedgerEntry."Original Adv. Pmt Doc. No." := "Document No.";
            NewDetailedGSTLedgerEntry."Original Adv. Pmt Doc. Date" := "Posting Date";
            NewDetailedGSTLedgerEntry.Paid := FALSE;
            NewDetailedGSTLedgerEntry.INSERT(TRUE);
            EntryNo += 1;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetQtyFactor@1500007(TransactionType@1500000 : 'Purchase,Sales,Transfer,Service';DocumentType@1500001 : Option;DocumentNo@1500002 : Code[20];LineNo@1500003 : Integer) : Decimal;
    VAR
      SalesLine@1500004 : Record 37;
      PurchaseLine@1500005 : Record 39;
      ServiceLine@1500006 : Record 5902;
    BEGIN
      CASE TransactionType OF
        TransactionType::Purchase:
          BEGIN
            PurchaseLine.GET(DocumentType,DocumentNo,LineNo);
            IF PurchaseLine.Quantity <> 0 THEN
              EXIT(PurchaseLine."Qty. to Invoice" / PurchaseLine.Quantity)
          END;
        TransactionType::Sales:
          BEGIN
            SalesLine.GET(DocumentType,DocumentNo,LineNo);
            IF SalesLine.Quantity <> 0 THEN
              EXIT(SalesLine."Qty. to Invoice" / SalesLine.Quantity)
          END;
        TransactionType::Service:
          BEGIN
            ServiceLine.SETRANGE("Document Type",DocumentType);
            ServiceLine.SETRANGE("Document No.",DocumentNo);
            ServiceLine.SETRANGE("Line No.",LineNo);
            IF ServiceLine.FINDFIRST THEN
              IF ServiceLine.Quantity <> 0 THEN
                EXIT(ServiceLine."Qty. to Invoice" / ServiceLine.Quantity);
          END;
      END;
    END;

    LOCAL PROCEDURE GSTSalesApplicationValidations@1500026(VAR CustLedgerEntry@1500000 : Record 21;VAR SalesHeader@1500001 : Record 36);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
      DetailedGSTLedgerEntry2@1500006 : Record 16419;
      SalesLine@1500003 : Record 37;
      Location@1500004 : Record 14;
    BEGIN
      GeneralLedgerSetup.GET;
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
        SETRANGE("Transaction Type","Transaction Type"::Sales);
        SETRANGE("Source No.",CustLedgerEntry."Customer No.");
        SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
        SETRANGE("Document Type",CustLedgerEntry."Document Type");
        SETRANGE("Document No.",CustLedgerEntry."Document No.");
        SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
        IF FINDFIRST THEN BEGIN
          Location.GET(SalesHeader."Location Code");
          TESTFIELD("Location  Reg. No.",Location."GST Registration No.");
          TESTFIELD("Currency Code",SalesHeader."Currency Code");
          TESTFIELD("GST Rounding Precision",GeneralLedgerSetup."GST Rounding Precision");
          TESTFIELD("GST Rounding Type",GeneralLedgerSetup."GST Rounding Type");
          TESTFIELD("GST Customer Type",SalesHeader."GST Customer Type");
          CustLedgerEntry.CALCFIELDS("Remaining Amount");
          IF CustLedgerEntry."Remaining Amount" = 0 THEN
            CustLedgerEntry.TESTFIELD("Remaining Amount");
          SalesLine.SETCURRENTKEY("Document Type","Document No.",Type,"GST Group Code");
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
          SalesLine.SETRANGE("GST Group Code","GST Group Code");
          IF NOT SalesLine.FINDFIRST THEN
            ERROR(
              STRSUBSTNO(
                GSTGroupCodeEqualErr,CustLedgerEntry."Entry No.",
                FORMAT(SalesHeader."Document Type"),
                SalesHeader."No."));
          TESTFIELD("GST Jurisdiction Type",SalesLine."GST Jurisdiction Type");
          DetailedGSTLedgerEntry2.SETCURRENTKEY(
            "Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
          DetailedGSTLedgerEntry2.SETRANGE("Transaction Type",DetailedGSTLedgerEntry2."Transaction Type"::Sales);
          DetailedGSTLedgerEntry2.SETRANGE("Source No.",CustLedgerEntry."Customer No.");
          DetailedGSTLedgerEntry2.SETRANGE("Original Doc. Type",CustLedgerEntry."Document Type"::Payment);
          DetailedGSTLedgerEntry2.SETRANGE("Original Doc. No.",CustLedgerEntry."Document No.");
          DetailedGSTLedgerEntry2.SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
          DetailedGSTLedgerEntry2.SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
          IF DetailedGSTLedgerEntry2.FINDSET THEN
            REPEAT
              FillGSTAppBufferHSNComponentPayment(
                DetailedGSTLedgerEntry2,
                SalesHeader."Document Type",SalesHeader."No.",CustLedgerEntry."Customer No.",
                SalesHeader."Document Type",'');
            UNTIL DetailedGSTLedgerEntry2.NEXT = 0;
        END ELSE
          ERROR(STRSUBSTNO(NoGSTEntryErr,CustLedgerEntry."Entry No."));
      END;
    END;

    PROCEDURE FillGSTAppBufferHSNComponentPayment@1500036(VAR DetailedGSTLedgerEntry@1500004 : Record 16419;AppliedDocType@1500002 : Option;AppliedDocNo@1500003 : Code[20];AccountNo@1500008 : Code[20];AppliedDocTypePosted@1500007 : ' ,Payment,Invoice,Credit Memo,Transfer,Finance Charge Memo,Reminder';AppliedDocNoPosted@1500006 : Code[20]);
    VAR
      GSTApplicationBuffer@1500001 : ARRAY [2] OF Record 16423;
      CurrencyFactor@1500005 : Decimal;
    BEGIN
      WITH GSTApplicationBuffer[1] DO BEGIN
        CLEAR(GSTApplicationBuffer[1]);
        "Transaction Type" := DetailedGSTLedgerEntry."Transaction Type";
        "Account No." := AccountNo;
        "Transaction No." := DetailedGSTLedgerEntry."CLE/VLE Entry No.";
        "Original Document Type" := GSTApplicationBuffer[1]."Original Document Type"::Payment;
        "Original Document No." := DetailedGSTLedgerEntry."Original Doc. No.";
        "GST Group Code" := DetailedGSTLedgerEntry."GST Group Code";
        CurrencyFactor := 1;
        IF NOT ApplyCurrencyFac THEN
          IF DetailedGSTLedgerEntry."Currency Factor" <> 0 THEN
            CurrencyFactor := DetailedGSTLedgerEntry."Currency Factor";
        "GST Cess" := DetailedGSTLedgerEntry.Cess;
        "GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
        "GST Base Amount" := DetailedGSTLedgerEntry."GST Base Amount" * CurrencyFactor;
        "GST Amount" := DetailedGSTLedgerEntry."GST Amount" * CurrencyFactor;
        "CLE/VLE Entry No." := DetailedGSTLedgerEntry."CLE/VLE Entry No.";
        "Current Doc. Type" := DetailedGSTLedgerEntry."Document Type";
        "GST Group Type" := DetailedGSTLedgerEntry."GST Group Type";
        "Currency Code" := DetailedGSTLedgerEntry."Currency Code";
        "Currency Factor" := DetailedGSTLedgerEntry."Currency Factor";
        "GST Rounding Precision" := DetailedGSTLedgerEntry."GST Rounding Precision";
        "GST Rounding Type" := DetailedGSTLedgerEntry."GST Rounding Type";
        IF AppliedDocNo <> '' THEN BEGIN
          "Applied Doc. Type" := AppliedDocType;
          "Applied Doc. No." := AppliedDocNo;
        END;
        IF (AppliedDocNoPosted <> '') AND (AppliedDocTypePosted <> AppliedDocTypePosted::Payment) THEN BEGIN
          "Applied Doc. Type(Posted)" := AppliedDocTypePosted;
          "Applied Doc. No.(Posted)" := AppliedDocNoPosted;
        END;
      END;
      GSTApplicationBuffer[2] := GSTApplicationBuffer[1];
      IF GSTApplicationBuffer[2].FIND THEN BEGIN
        GSTApplicationBuffer[2]."GST Base Amount" += GSTApplicationBuffer[1]."GST Base Amount";
        GSTApplicationBuffer[2]."GST Amount" += GSTApplicationBuffer[1]."GST Amount";
        GSTApplicationBuffer[2].MODIFY(TRUE);
      END ELSE
        GSTApplicationBuffer[2].INSERT(TRUE);
    END;

    PROCEDURE GetApplicationRemainingAmount@1500038(TransactionType@1500000 : 'Purchase,Sale';DocumentType@1500001 : Option;DocumentNo@1500002 : Code[20];AccountNo@1500003 : Code[20];PaymentGSTGroupCode@1500014 : Code[20];AmountToApply@1500008 : Decimal;RemainingAmount@1500010 : Decimal;CustVendEntryNo@1500016 : Integer;IncludeGST@1500011 : Boolean;VAR InvoiceGSTAmount@1500017 : Decimal;VAR AppliedGSTAmount@1500018 : Decimal;VAR InvoiceBaseAmount@1500015 : Decimal) : Decimal;
    VAR
      GSTApplicationBuffer1@1500004 : Record 16423;
      ChargeAmount@1500009 : Decimal;
      TDSTCSAmount@1500007 : Decimal;
      TotalInvoiceAmount@1500006 : Decimal;
      PaymentAmount@1500005 : Decimal;
      GSTRoudingType@1500012 : 'Nearest,Up,Down';
      GSTRoundingPrecision@1500013 : Decimal;
      TotalPaymentLine@1500019 : Integer;
      GSTCredit@1500020 : ' ,Availment,Non-Availment';
    BEGIN
      AppliedGSTAmount := 0;
      InvoiceGSTAmount := 0;
      InvoiceBaseAmount := 0;
      WITH GSTApplicationBuffer1 DO BEGIN
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type",DocumentType);
        SETRANGE("Original Document No.",DocumentNo);
        SETRANGE("GST Group Code",PaymentGSTGroupCode);
        IF FINDSET THEN BEGIN
          GetInvoiceBaseAmount(
            GSTApplicationBuffer1,InvoiceBaseAmount,ChargeAmount,TDSTCSAmount,
            GSTRoudingType,GSTRoundingPrecision);
          GSTCredit := "GST Credit";
          REPEAT
            InvoiceGSTAmount += "GST Amount";
          UNTIL NEXT = 0;
        END;
      END;
      IF IncludeGST THEN
        TotalInvoiceAmount := InvoiceBaseAmount + InvoiceGSTAmount + ChargeAmount
      ELSE
        TotalInvoiceAmount := InvoiceBaseAmount + ChargeAmount;
      InvoiceBaseAmount += ChargeAmount;
      IF TotalInvoiceAmount = 0 THEN
        ERROR(STRSUBSTNO(NoInvoiceGSTErr,DocumentNo,PaymentGSTGroupCode));
      WITH GSTApplicationBuffer1 DO BEGIN
        RESET;
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type","Original Document Type"::Payment);
        SETRANGE("Applied Doc. Type",DocumentType);
        SETRANGE("Applied Doc. No.",DocumentNo);
        SETRANGE("GST Group Code",PaymentGSTGroupCode);
        SETRANGE("CLE/VLE Entry No.",CustVendEntryNo);
        TotalPaymentLine := COUNT;
        IF FINDFIRST THEN BEGIN
          VerifyNoOfGSTComponent(GSTApplicationBuffer1,TotalPaymentLine);
          REPEAT
            "GST Credit" := GSTCredit;
            VerifySameGSTComponent(GSTApplicationBuffer1);
            IF ABS(TotalInvoiceAmount) > ABS(AmountToApply) THEN
              IF ABS(AmountToApply) = ABS(RemainingAmount) THEN BEGIN
                "Applied Base Amount" := "GST Base Amount";
                "Applied Amount" := "GST Amount";
              END ELSE BEGIN
                "Applied Base Amount" := ROUND("GST Base Amount" * AmountToApply / RemainingAmount,0.01);
                "Applied Amount" :=
                  GSTApplicationRound(GSTRoudingType,GSTRoundingPrecision,"GST Amount" * AmountToApply / RemainingAmount);
              END
            ELSE BEGIN
              IF NOT "GST Cess" THEN
                "Applied Base Amount" := ROUND("GST Base Amount" * InvoiceBaseAmount / "GST Base Amount",0.01)
              ELSE
                "Applied Base Amount" :=
                  ROUND(
                    "GST Base Amount" *
                    GetInvoiceGSTComponentWise(GSTApplicationBuffer1,DocumentType,DocumentNo,TRUE) /
                    "GST Base Amount",0.01);
              "Applied Amount" :=
                GSTApplicationRound(GSTRoudingType,GSTRoundingPrecision,"GST Amount" *
                  GetInvoiceGSTComponentWise(GSTApplicationBuffer1,DocumentType,DocumentNo,FALSE) / "GST Amount");
            END;
            IF NOT "GST Cess" THEN
              IF PaymentAmount = 0 THEN
                PaymentAmount := "Applied Base Amount";
            AppliedGSTAmount += "Applied Amount";
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
      IF IncludeGST THEN
        PaymentAmount += AppliedGSTAmount;
      AdjustPaymentAmount(
        TransactionType,DocumentType,DocumentNo,AccountNo,PaymentGSTGroupCode,
        CustVendEntryNo,AmountToApply,PaymentAmount,RemainingAmount,
        TotalInvoiceAmount,GSTRoundingPrecision);
      EXIT(PaymentAmount);
    END;

    PROCEDURE DeletePaymentAplicationBuffer@1500039(TransactionType@1500000 : Option;EntryNo@1500002 : Integer);
    VAR
      GSTApplicationBuffer@1500001 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer DO BEGIN
        SETCURRENTKEY("Transaction No.","CLE/VLE Entry No.");
        SETRANGE("CLE/VLE Entry No.",EntryNo);
        SETRANGE("Transaction Type",TransactionType);
        DELETEALL(TRUE);
      END;
    END;

    PROCEDURE DeleteInvoiceApplicationBuffer@1500040(TranscationType@1500000 : Option;AccountNo@1500003 : Code[20];DocumentType@1500001 : Option;DocumentNo@1500002 : Code[20]);
    VAR
      GSTApplicationBuffer@1500004 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type",TranscationType);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type",DocumentType);
        SETRANGE("Original Document No.",DocumentNo);
        DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetInvoiceBaseAmount@1500048(VAR GSTApplicationBuffer@1500000 : Record 16423;VAR GSTBaseAmount@1500002 : Decimal;VAR TotalCharges@1500003 : Decimal;VAR TDSTCSAmount@1500006 : Decimal;VAR GSTRoundingType@1500004 : Option;VAR GSTRounding@1500005 : Decimal);
    VAR
      GSTApplicationBuffer2@1500001 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer2 DO BEGIN
        SETRANGE("Transaction Type",GSTApplicationBuffer."Transaction Type");
        SETRANGE("Account No.",GSTApplicationBuffer."Account No.");
        SETRANGE("Original Document Type",GSTApplicationBuffer."Original Document Type");
        SETRANGE("Original Document No.",GSTApplicationBuffer."Original Document No.");
        SETRANGE("Transaction No.",GSTApplicationBuffer."Transaction No.");
        SETRANGE("GST Group Code",GSTApplicationBuffer."GST Group Code");
        SETRANGE("GST Cess",FALSE);
        SETFILTER("GST Base Amount",'<>%1',0);
        IF FINDFIRST THEN BEGIN
          GSTBaseAmount := "GST Base Amount";
          TotalCharges := "Charge To Cust/Vend";
          TDSTCSAmount := "TDS/TCS Amount";
          GSTRounding := "GST Rounding Precision";
          GSTRoundingType := "GST Rounding Type";
        END;
      END;
    END;

    PROCEDURE CheckGroupAmount@1500041(DocumentType@1500004 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500005 : Code[20];AmountToApply@1500000 : Decimal;GSTGroupAmount@1500001 : Decimal;PaymentAmount@1500006 : Decimal;GSTGroupCode@1500007 : Code[20]);
    BEGIN
      IF ABS(AmountToApply) > ABS(GSTGroupAmount) THEN
        ERROR(
          STRSUBSTNO(
            GSTGroupAmountErr,FORMAT(DocumentType),DocumentNo,GSTGroupCode,GSTGroupAmount,PaymentAmount));
    END;

    PROCEDURE GetSalesInvoiceAmountOffline@1500042(VAR CustLedgerEntry@1500000 : Record 21;VAR ApplyingCustLedgEntry@1500001 : Record 21;TDSTCSAmount@1500002 : Decimal);
    BEGIN
      WITH ApplyingCustLedgEntry DO BEGIN
        TESTFIELD("Document Type","Document Type"::Invoice);
        IF "GST Customer Type" IN ["GST Customer Type"::" ","GST Customer Type"::Exempted] THEN
          ERROR(STRSUBSTNO(GSTCustomerTypeErr,"Document No.","Entry No."));
        IF CustLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(CustLedgerEntry."Document Type"),
              CustLedgerEntry."Document No.",FORMAT("Document Type"),"Customer No."));
        CALCFIELDS("Remaining Amount");
        TESTFIELD("Remaining Amount");
        TESTFIELD("GST Customer Type",CustLedgerEntry."GST Customer Type");
        TESTFIELD("GST Jurisdiction Type",CustLedgerEntry."GST Jurisdiction Type");
        TESTFIELD("Location State Code",CustLedgerEntry."Location State Code");
        TESTFIELD("Location GST Reg. No.",CustLedgerEntry."Location GST Reg. No.");
        TESTFIELD("Seller GST Reg. No.",CustLedgerEntry."Seller GST Reg. No.");
        TESTFIELD("Currency Code",CustLedgerEntry."Currency Code");
        TESTFIELD("Seller State Code",CustLedgerEntry."Seller State Code");
        FillAppBufferInvoiceOffline(TransactionType2::Sales,"Document No.","Customer No.",CustLedgerEntry."Document No.",TDSTCSAmount);
        FillSalesAppBufferPaymentOfflline(CustLedgerEntry,ApplyingCustLedgEntry);
      END;
    END;

    PROCEDURE FillAppBufferInvoiceOffline@1500043(TransactionType@1500008 : Option;InvoiceDocNo@1500004 : Code[20];AccountNo@1500011 : Code[20];PaymentDocNo@1500007 : Code[10];TDSTCSAmount@1500005 : Decimal);
    VAR
      GSTApplicationBuffer@1500001 : ARRAY [2] OF Record 16423;
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      GSTApplicationBuffer1@1500003 : Record 16423;
      CurrencyFactor@1500002 : Decimal;
    BEGIN
      DeleteInvoiceApplicationBufferOffline(
        TransactionType,AccountNo,GSTApplicationBuffer1."Original Document Type"::Invoice,InvoiceDocNo);
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type",
        "Document No.","GST Group Code");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",TransactionType);
      CASE TransactionType OF
        TransactionType2::Purchase:
          DetailedGSTLedgerEntry.SETRANGE("Source Type",DetailedGSTLedgerEntry."Source Type"::Vendor);
        TransactionType2::Sales:
          DetailedGSTLedgerEntry.SETRANGE("Source Type",DetailedGSTLedgerEntry."Source Type"::Customer);
      END;
      DetailedGSTLedgerEntry.SETRANGE("Source No.",AccountNo);
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETRANGE("Document No.",InvoiceDocNo);
      DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          WITH GSTApplicationBuffer[1] DO BEGIN
            CLEAR(GSTApplicationBuffer[1]);
            "Transaction Type" := DetailedGSTLedgerEntry."Transaction Type";
            "Original Document Type" := GSTApplicationBuffer[1]."Original Document Type"::Invoice;
            "Original Document No." := InvoiceDocNo;
            "Account No." := AccountNo;
            IF PaymentDocNo <> '' THEN BEGIN
              "Applied Doc. Type(Posted)" := "Applied Doc. Type(Posted)"::Payment;
              "Applied Doc. No.(Posted)" := PaymentDocNo;
              "Applied Doc. Type" := "Applied Doc. Type"::Payment;
              "Applied Doc. No." := PaymentDocNo;
            END;
            // DetailedGSTLedgerEntry.TESTFIELD(Paid,FALSE);
            "GST Group Code" := DetailedGSTLedgerEntry."GST Group Code";
            "GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
            "Current Doc. Type" := "Current Doc. Type"::Invoice;
            "Current Doc. Type" := DetailedGSTLedgerEntry."Document Type";
            "Currency Code" := DetailedGSTLedgerEntry."Currency Code";
            "Currency Factor" := DetailedGSTLedgerEntry."Currency Factor";
            "GST Rounding Precision" := DetailedGSTLedgerEntry."GST Rounding Precision";
            "GST Rounding Type" := DetailedGSTLedgerEntry."GST Rounding Type";
            "GST Group Type" := DetailedGSTLedgerEntry."GST Group Type";
            CurrencyFactor := 1;
            "GST Credit" := DetailedGSTLedgerEntry."GST Credit";
            IF ApplyCurrencyFacInvoice THEN
              IF DetailedGSTLedgerEntry."Currency Factor" <> 0 THEN
                CurrencyFactor := DetailedGSTLedgerEntry."Currency Factor";
            "TDS/TCS Amount" := TDSTCSAmount;
            IF "Currency Code" <> '' THEN
              "GST Base Amount" := ROUND(DetailedGSTLedgerEntry."GST Base Amount" * CurrencyFactor,0.01)
            ELSE
              "GST Base Amount" := DetailedGSTLedgerEntry."GST Base Amount";
            "GST Amount" := GSTManagement.RoundGSTPrecision(DetailedGSTLedgerEntry."GST Amount" * CurrencyFactor);
            "GST Cess" := DetailedGSTLedgerEntry.Cess;
          END;
          GSTApplicationBuffer[2] := GSTApplicationBuffer[1];
          IF GSTApplicationBuffer[2].FIND THEN BEGIN
            GSTApplicationBuffer[2]."GST Base Amount" += GSTApplicationBuffer[1]."GST Base Amount";
            GSTApplicationBuffer[2]."GST Amount" += GSTApplicationBuffer[1]."GST Amount";
            GSTApplicationBuffer[2].MODIFY(TRUE);
          END ELSE
            GSTApplicationBuffer[2].INSERT(TRUE);
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    PROCEDURE DeleteInvoiceApplicationBufferOffline@1500044(TranscationType@1500000 : Option;AccountNo@1500003 : Code[20];DocumentType@1500001 : Option;DocumentNo@1500002 : Code[20]);
    VAR
      GSTApplicationBuffer@1500004 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type",TranscationType);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type",DocumentType);
        SETRANGE("Original Document No.",DocumentNo);
        DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE FillSalesAppBufferPaymentOfflline@1500050(VAR CustLedgerEntry@1500000 : Record 21;VAR ApplyingCustLedgerEntry@1500001 : Record 21);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
      DetailedGSTLedgerEntry2@1500006 : Record 16419;
      DetailedGSTLedgerEntry3@1500003 : Record 16419;
    BEGIN
      DeletePaymentAplicationBuffer(TransactionType2::Sales,CustLedgerEntry."Entry No.");
      DetailedGSTLedgerEntry3.SETCURRENTKEY(
        "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
      DetailedGSTLedgerEntry3.SETRANGE("Transaction Type",TransactionType2::Sales);
      DetailedGSTLedgerEntry3.SETRANGE("Source No.",CustLedgerEntry."Customer No.");
      DetailedGSTLedgerEntry3.SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
      DetailedGSTLedgerEntry3.SETRANGE("Document Type",DetailedGSTLedgerEntry3."Document Type"::Payment);
      DetailedGSTLedgerEntry3.SETRANGE("Document No.",CustLedgerEntry."Document No.");
      DetailedGSTLedgerEntry3.SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
        SETRANGE("Transaction Type","Transaction Type"::Sales);
        SETRANGE("Source No.",ApplyingCustLedgerEntry."Customer No.");
        SETRANGE("Document Type",ApplyingCustLedgerEntry."Document Type"::Invoice);
        SETRANGE("Document No.",ApplyingCustLedgerEntry."Document No.");
        SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
        IF FINDFIRST THEN BEGIN
          IF DetailedGSTLedgerEntry3.FINDFIRST THEN;
          TESTFIELD("Location  Reg. No.",DetailedGSTLedgerEntry3."Location  Reg. No.");
          TESTFIELD("Currency Code",DetailedGSTLedgerEntry3."Currency Code");
          TESTFIELD("GST Rounding Precision",DetailedGSTLedgerEntry3."GST Rounding Precision");
          TESTFIELD("GST Rounding Type",DetailedGSTLedgerEntry3."GST Rounding Type");
          TESTFIELD("GST Group Type",DetailedGSTLedgerEntry3."GST Group Type");
          TESTFIELD("GST Customer Type",DetailedGSTLedgerEntry3."GST Customer Type");
          TESTFIELD("GST Jurisdiction Type",DetailedGSTLedgerEntry3."GST Jurisdiction Type");
        END ELSE
          ERROR(
            STRSUBSTNO(
              GSTGroupCodeEqualErr,CustLedgerEntry."Entry No.",
              FORMAT(ApplyingCustLedgerEntry."Document Type"),
              ApplyingCustLedgerEntry."Document No."));
      END;
      DetailedGSTLedgerEntry2.SETCURRENTKEY("Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
      DetailedGSTLedgerEntry2.SETRANGE("Transaction Type",DetailedGSTLedgerEntry2."Transaction Type"::Sales);
      DetailedGSTLedgerEntry2.SETRANGE("Source No.",CustLedgerEntry."Customer No.");
      DetailedGSTLedgerEntry2.SETRANGE("Original Doc. Type",CustLedgerEntry."Document Type"::Payment);
      DetailedGSTLedgerEntry2.SETRANGE("Original Doc. No.",CustLedgerEntry."Document No.");
      DetailedGSTLedgerEntry2.SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
      DetailedGSTLedgerEntry2.SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
      IF DetailedGSTLedgerEntry2.FINDSET THEN
        REPEAT
          FillGSTAppBufferHSNComponentPayment(
            DetailedGSTLedgerEntry2,
            OriginalDocumentType::Invoice,ApplyingCustLedgerEntry."Document No.",
            CustLedgerEntry."Customer No.",
            OriginalDocumentType::Invoice,'');
        UNTIL DetailedGSTLedgerEntry2.NEXT = 0
      ELSE
        ERROR(STRSUBSTNO(NoGSTEntryErr,CustLedgerEntry."Entry No."));
    END;

    PROCEDURE GetSalesInvoiceAmountWithPaymentOffline@1500045(VAR CustLedgerEntry@1500000 : Record 21;VAR ApplyingCustLedgerEntry@1500001 : Record 21;TDSTCSAmount@1500002 : Decimal);
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        TESTFIELD("Document Type","Document Type"::Invoice);
        IF "GST Customer Type" IN ["GST Customer Type"::" ","GST Customer Type"::Exempted] THEN
          ERROR(STRSUBSTNO(GSTCustomerTypeErr,"Document No.","Entry No."));
        IF ApplyingCustLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(ApplyingCustLedgerEntry."Document Type"),
              ApplyingCustLedgerEntry."Document No.",FORMAT("Document Type"),"Customer No."));
        TESTFIELD("GST Customer Type",ApplyingCustLedgerEntry."GST Customer Type");
        TESTFIELD("GST Jurisdiction Type",ApplyingCustLedgerEntry."GST Jurisdiction Type");
        TESTFIELD("Location State Code",ApplyingCustLedgerEntry."Location State Code");
        TESTFIELD("Location GST Reg. No.",ApplyingCustLedgerEntry."Location GST Reg. No.");
        TESTFIELD("Seller GST Reg. No.",ApplyingCustLedgerEntry."Seller GST Reg. No.");
        TESTFIELD("Currency Code",ApplyingCustLedgerEntry."Currency Code");
        TESTFIELD("Seller State Code",ApplyingCustLedgerEntry."Seller State Code");
        FillAppBufferInvoiceOffline(
          TransactionType2::Sales,"Document No.","Customer No.",
          ApplyingCustLedgerEntry."Document No.",TDSTCSAmount);
        FillSalesAppBufferPaymentOfflline(ApplyingCustLedgerEntry,CustLedgerEntry);
      END;
    END;

    LOCAL PROCEDURE GSTApplicationRound@1500046(GSTRoudingType@1500001 : 'Nearest,Up,Down';GSTRoundingPrecision@1500000 : Decimal;Amount@1500004 : Decimal) : Decimal;
    VAR
      GSTRoundingDirection@1500002 : Text[1];
    BEGIN
      CASE GSTRoudingType OF
        GSTRoudingType::Nearest:
          GSTRoundingDirection := '=';
        GSTRoudingType::Up:
          GSTRoundingDirection := '>';
        GSTRoudingType::Down:
          GSTRoundingDirection := '<';
      END;
      IF GSTRoundingPrecision = 0 THEN
        GSTRoundingPrecision := 0.01;
      EXIT(ROUND(Amount,GSTRoundingPrecision,GSTRoundingDirection));
    END;

    LOCAL PROCEDURE GSTPurchaseApplicationValidations@1500051(VAR VendorLedgerEntry@1500000 : Record 25;PurchaseHeader@1500001 : Record 38);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
      DetailedGSTLedgerEntry2@1500006 : Record 16419;
      PurchaseLine@1500003 : Record 39;
      Location@1500004 : Record 14;
    BEGIN
      GeneralLedgerSetup.GET;
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Source No.",VendorLedgerEntry."Vendor No.");
        SETRANGE("CLE/VLE Entry No.",VendorLedgerEntry."Entry No.");
        SETRANGE("Document Type",VendorLedgerEntry."Document Type");
        SETRANGE("Document No.",VendorLedgerEntry."Document No.");
        SETRANGE("GST Group Code",VendorLedgerEntry."GST Group Code");
        IF FINDFIRST THEN BEGIN
          // CheckPaidAdvancePayment(VendorLedgerEntry."Document No.",PurchaseHeader."Posting Date");
          Location.GET(PurchaseHeader."Location Code");
          TESTFIELD("Location  Reg. No.",Location."GST Registration No.");
          TESTFIELD("Currency Code",PurchaseHeader."Currency Code");
          TESTFIELD("GST Rounding Precision",GeneralLedgerSetup."GST Rounding Precision");
          TESTFIELD("GST Rounding Type",GeneralLedgerSetup."GST Rounding Type");
          TESTFIELD("GST Vendor Type",PurchaseHeader."GST Vendor Type");
          TESTFIELD("Reverse Charge",TRUE);
          VendorLedgerEntry.CALCFIELDS("Remaining Amount");
          IF VendorLedgerEntry."Remaining Amount" = 0 THEN
            VendorLedgerEntry.TESTFIELD("Remaining Amount");
          PurchaseLine.SETCURRENTKEY("Document Type","Document No.",Type,"GST Group Code");
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
          PurchaseLine.SETRANGE("GST Group Code","GST Group Code");
          IF NOT PurchaseLine.FINDFIRST THEN
            ERROR(
              STRSUBSTNO(
                GSTGroupCodeEqualErr,VendorLedgerEntry."Entry No.",
                FORMAT(PurchaseHeader."Document Type"),
                PurchaseHeader."No."));
          PurchaseLine.SETRANGE("GST Group Type","GST Group Type");
          IF NOT PurchaseLine.FINDFIRST THEN
            ERROR(
              STRSUBSTNO(
                GSTGroupEqualErr,VendorLedgerEntry."Entry No.",
                FORMAT(PurchaseHeader."Document Type"),
                PurchaseHeader."No."));
          TESTFIELD("GST Jurisdiction Type",PurchaseLine."GST Jurisdiction Type");
          DetailedGSTLedgerEntry2.SETCURRENTKEY(
            "Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
          DetailedGSTLedgerEntry2.SETRANGE("Transaction Type",DetailedGSTLedgerEntry2."Transaction Type"::Purchase);
          DetailedGSTLedgerEntry2.SETRANGE("Source No.",VendorLedgerEntry."Vendor No.");
          DetailedGSTLedgerEntry2.SETRANGE("Original Doc. Type",VendorLedgerEntry."Document Type"::Payment);
          DetailedGSTLedgerEntry2.SETRANGE("Original Doc. No.",VendorLedgerEntry."Document No.");
          DetailedGSTLedgerEntry2.SETRANGE("GST Group Code",VendorLedgerEntry."GST Group Code");
          DetailedGSTLedgerEntry2.SETRANGE("CLE/VLE Entry No.",VendorLedgerEntry."Entry No.");
          IF DetailedGSTLedgerEntry2.FINDSET THEN
            REPEAT
              FillGSTAppBufferHSNComponentPayment(
                DetailedGSTLedgerEntry2,
                PurchaseHeader."Document Type",PurchaseHeader."No.",VendorLedgerEntry."Vendor No.",
                PurchaseHeader."Document Type",'');
            UNTIL DetailedGSTLedgerEntry2.NEXT = 0;
        END ELSE
          ERROR(STRSUBSTNO(NoGSTEntryErr,VendorLedgerEntry."Entry No."));
      END;
    END;

    LOCAL PROCEDURE FillPurchaseAppBufferPaymentOfflline@1500053(VAR VendorLedgerEntry@1500000 : Record 25;VAR ApplyingVendorLedgerEntry@1500001 : Record 25);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
      DetailedGSTLedgerEntry2@1500006 : Record 16419;
      DetailedGSTLedgerEntry3@1500003 : Record 16419;
    BEGIN
      DeletePaymentAplicationBuffer(TransactionType2::Purchase,VendorLedgerEntry."Entry No.");
      DetailedGSTLedgerEntry3.SETCURRENTKEY(
        "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
      DetailedGSTLedgerEntry3.SETRANGE("Transaction Type",TransactionType2::Purchase);
      DetailedGSTLedgerEntry3.SETRANGE("Source No.",VendorLedgerEntry."Vendor No.");
      DetailedGSTLedgerEntry3.SETRANGE("CLE/VLE Entry No.",VendorLedgerEntry."Entry No.");
      DetailedGSTLedgerEntry3.SETRANGE("Document Type",DetailedGSTLedgerEntry3."Document Type"::Payment);
      DetailedGSTLedgerEntry3.SETRANGE("Document No.",VendorLedgerEntry."Document No.");
      DetailedGSTLedgerEntry3.SETRANGE("GST Group Code",VendorLedgerEntry."GST Group Code");
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY(
          "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type",
          "Document No.","GST Group Code");
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Source No.",ApplyingVendorLedgerEntry."Vendor No.");
        SETRANGE("Document Type",ApplyingVendorLedgerEntry."Document Type"::Invoice);
        SETRANGE("Document No.",ApplyingVendorLedgerEntry."Document No.");
        SETRANGE("GST Group Code",VendorLedgerEntry."GST Group Code");
        IF FINDFIRST THEN BEGIN
          IF DetailedGSTLedgerEntry3.FINDFIRST THEN;
          // CheckPaidAdvancePayment(DetailedGSTLedgerEntry3."Document No.","Posting Date");
          TESTFIELD("Location  Reg. No.",DetailedGSTLedgerEntry3."Location  Reg. No.");
          TESTFIELD("Currency Code",DetailedGSTLedgerEntry3."Currency Code");
          TESTFIELD("GST Rounding Precision",DetailedGSTLedgerEntry3."GST Rounding Precision");
          TESTFIELD("GST Rounding Type",DetailedGSTLedgerEntry3."GST Rounding Type");
          TESTFIELD("GST Group Type",DetailedGSTLedgerEntry3."GST Group Type");
          TESTFIELD("GST Vendor Type",DetailedGSTLedgerEntry3."GST Vendor Type");
          TESTFIELD("GST Jurisdiction Type",DetailedGSTLedgerEntry3."GST Jurisdiction Type");
          TESTFIELD("Reverse Charge",DetailedGSTLedgerEntry3."Reverse Charge");
        END ELSE
          ERROR(
            STRSUBSTNO(
              GSTGroupCodeEqualErr,VendorLedgerEntry."Entry No.",
              FORMAT(ApplyingVendorLedgerEntry."Document Type"),
              ApplyingVendorLedgerEntry."Document No."));
      END;
      DetailedGSTLedgerEntry2.SETCURRENTKEY("Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
      DetailedGSTLedgerEntry2.SETRANGE("Transaction Type",DetailedGSTLedgerEntry2."Transaction Type"::Purchase);
      DetailedGSTLedgerEntry2.SETRANGE("Source No.",VendorLedgerEntry."Vendor No.");
      DetailedGSTLedgerEntry2.SETRANGE("Original Doc. Type",VendorLedgerEntry."Document Type"::Payment);
      DetailedGSTLedgerEntry2.SETRANGE("Original Doc. No.",VendorLedgerEntry."Document No.");
      DetailedGSTLedgerEntry2.SETRANGE("GST Group Code",VendorLedgerEntry."GST Group Code");
      DetailedGSTLedgerEntry2.SETRANGE("CLE/VLE Entry No.",VendorLedgerEntry."Entry No.");
      IF DetailedGSTLedgerEntry2.FINDSET THEN
        REPEAT
          FillGSTAppBufferHSNComponentPayment(
            DetailedGSTLedgerEntry2,
            OriginalDocumentType::Invoice,ApplyingVendorLedgerEntry."Document No.",
            VendorLedgerEntry."Vendor No.",
            OriginalDocumentType::Invoice,'');
        UNTIL DetailedGSTLedgerEntry2.NEXT = 0
      ELSE
        ERROR(STRSUBSTNO(NoGSTEntryErr,VendorLedgerEntry."Entry No."));
    END;

    PROCEDURE GetPurchaseInvoiceAmountWithPaymentOffline@1500049(VAR VendorLedgerEntry@1500000 : Record 25;VAR ApplyingVendorLedgerEntry@1500001 : Record 25;TDSTCSAmount@1500002 : Decimal);
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        TESTFIELD("Document Type","Document Type"::Invoice);
        IF NOT "GST Reverse Charge" THEN
          ERROR(STRSUBSTNO(GSTVendorTypeErr,"Document No.","Entry No."));
        IF ApplyingVendorLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(ApplyingVendorLedgerEntry."Document Type"),
              ApplyingVendorLedgerEntry."Document No.",FORMAT("Document Type"),"Vendor No."));
        TESTFIELD("GST Reverse Charge",TRUE);
        TESTFIELD("GST Vendor Type",ApplyingVendorLedgerEntry."GST Vendor Type");
        TESTFIELD("GST Jurisdiction Type",ApplyingVendorLedgerEntry."GST Jurisdiction Type");
        TESTFIELD("Location State Code",ApplyingVendorLedgerEntry."Location State Code");
        TESTFIELD("Location GST Reg. No.",ApplyingVendorLedgerEntry."Location GST Reg. No.");
        TESTFIELD("Buyer GST Reg. No.",ApplyingVendorLedgerEntry."Buyer GST Reg. No.");
        TESTFIELD("Currency Code",ApplyingVendorLedgerEntry."Currency Code");
        TESTFIELD("Buyer State Code",ApplyingVendorLedgerEntry."Buyer State Code");
        FillAppBufferInvoiceOffline(
          TransactionType2::Purchase,"Document No.","Vendor No.",
          ApplyingVendorLedgerEntry."Document No.",TDSTCSAmount);
        FillPurchaseAppBufferPaymentOfflline(ApplyingVendorLedgerEntry,VendorLedgerEntry);
      END;
    END;

    PROCEDURE GetPurchaseInvoiceAmountOffline@1500054(VAR VendorLedgerEntry@1500000 : Record 25;VAR ApplyingVendorLedgerEntry@1500001 : Record 25;TDSTCSAmount@1500002 : Decimal);
    BEGIN
      WITH ApplyingVendorLedgerEntry DO BEGIN
        TESTFIELD("Document Type","Document Type"::Invoice);
        IF NOT "GST Reverse Charge" THEN
          ERROR(STRSUBSTNO(GSTVendorTypeErr,"Document No.","Entry No."));
        IF VendorLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(VendorLedgerEntry."Document Type"),
              VendorLedgerEntry."Document No.",FORMAT("Document Type"),"Vendor No."));
        CALCFIELDS("Remaining Amount");
        TESTFIELD("Remaining Amount");
        // CheckPaidAdvancePayment(VendorLedgerEntry."Document No.","Posting Date");
        TESTFIELD("GST Vendor Type",VendorLedgerEntry."GST Vendor Type");
        TESTFIELD("GST Reverse Charge",TRUE);
        TESTFIELD("GST Jurisdiction Type",VendorLedgerEntry."GST Jurisdiction Type");
        TESTFIELD("Location State Code",VendorLedgerEntry."Location State Code");
        TESTFIELD("Location GST Reg. No.",VendorLedgerEntry."Location GST Reg. No.");
        TESTFIELD("Buyer GST Reg. No.",VendorLedgerEntry."Buyer GST Reg. No.");
        TESTFIELD("Currency Code",VendorLedgerEntry."Currency Code");
        TESTFIELD("Buyer State Code",VendorLedgerEntry."Buyer State Code");
        FillAppBufferInvoiceOffline(
          TransactionType2::Purchase,"Document No.","Vendor No.",VendorLedgerEntry."Document No.",TDSTCSAmount);
        FillPurchaseAppBufferPaymentOfflline(VendorLedgerEntry,ApplyingVendorLedgerEntry);
      END;
    END;

    PROCEDURE FillGSTApplicationBufferService@1500055(ServiceHeader@1500001 : Record 5900;VAR CustLedgerEntry@1500005 : Record 21) : Boolean;
    BEGIN
      WITH ServiceHeader DO BEGIN
        DeletePaymentAplicationBuffer(TransactionType2::Sales,CustLedgerEntry."Entry No.");
        CustLedgerEntry.TESTFIELD("GST on Advance Payment",TRUE);
        IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::Order]) THEN
          ERROR(
            STRSUBSTNO(GSTApplicationErr,FIELDCAPTION("Document Type"),FORMAT("Document Type"),"No."));
        IF "GST Without Payment of Duty" THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FIELDCAPTION("GST Without Payment of Duty"),FORMAT("Document Type"),"No."));
        IF "GST Customer Type" IN ["GST Customer Type"::" ","GST Customer Type"::Exempted] THEN
          ERROR(STRSUBSTNO(GSTApplicationErr,FORMAT(FIELDCAPTION("GST Customer Type")),FORMAT("Document Type"),"No."));
        IF NOT GSTManagement.IsGSTApplicable(Structure) THEN
          ERROR(GSTDocumentErr);
        IF CustLedgerEntry."Posting Date" > "Posting Date" THEN
          ERROR(
            STRSUBSTNO(
              EarlierPostingDateErr,FORMAT(CustLedgerEntry."Document Type"),
              CustLedgerEntry."Document No.",FORMAT("Document Type"),"No."));
        GSTServiceApplicationValidations(CustLedgerEntry,ServiceHeader);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GSTServiceApplicationValidations@1500056(VAR CustLedgerEntry@1500000 : Record 21;ServiceHeader@1500001 : Record 5900);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
      DetailedGSTLedgerEntry2@1500006 : Record 16419;
      ServiceLine@1500003 : Record 5902;
      Location@1500004 : Record 14;
    BEGIN
      GeneralLedgerSetup.GET;
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY(
          "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
        SETRANGE("Transaction Type","Transaction Type"::Sales);
        SETRANGE("Source No.",CustLedgerEntry."Customer No.");
        SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
        SETRANGE("Document Type",CustLedgerEntry."Document Type");
        SETRANGE("Document No.",CustLedgerEntry."Document No.");
        SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
        IF FINDFIRST THEN BEGIN
          Location.GET(ServiceHeader."Location Code");
          TESTFIELD("Location  Reg. No.",Location."GST Registration No.");
          TESTFIELD("Currency Code",ServiceHeader."Currency Code");
          TESTFIELD("GST Rounding Precision",GeneralLedgerSetup."GST Rounding Precision");
          TESTFIELD("GST Rounding Type",GeneralLedgerSetup."GST Rounding Type");
          TESTFIELD("GST Customer Type",ServiceHeader."GST Customer Type");
          CustLedgerEntry.CALCFIELDS("Remaining Amount");
          IF CustLedgerEntry."Remaining Amount" = 0 THEN
            CustLedgerEntry.TESTFIELD("Remaining Amount");
          ServiceLine.SETCURRENTKEY("Document Type","Document No.",Type,"GST Group Code");
          ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
          ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
          ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::" ");
          ServiceLine.SETRANGE("GST Group Code","GST Group Code");
          IF NOT ServiceLine.FINDFIRST THEN
            ERROR(
              STRSUBSTNO(
                GSTGroupCodeEqualErr,CustLedgerEntry."Entry No.",
                FORMAT(ServiceHeader."Document Type"),
                ServiceHeader."No."));
          TESTFIELD("GST Jurisdiction Type",ServiceLine."GST Jurisdiction Type");
          DetailedGSTLedgerEntry2.SETCURRENTKEY(
            "Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
          DetailedGSTLedgerEntry2.SETRANGE("Transaction Type",DetailedGSTLedgerEntry2."Transaction Type"::Sales);
          DetailedGSTLedgerEntry2.SETRANGE("Source No.",CustLedgerEntry."Customer No.");
          DetailedGSTLedgerEntry2.SETRANGE("Original Doc. Type",CustLedgerEntry."Document Type"::Payment);
          DetailedGSTLedgerEntry2.SETRANGE("Original Doc. No.",CustLedgerEntry."Document No.");
          DetailedGSTLedgerEntry2.SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
          DetailedGSTLedgerEntry2.SETRANGE("CLE/VLE Entry No.",CustLedgerEntry."Entry No.");
          IF DetailedGSTLedgerEntry2.FINDSET THEN
            REPEAT
              FillGSTAppBufferHSNComponentPayment(
                DetailedGSTLedgerEntry2,
                ServiceHeader."Document Type",ServiceHeader."No.",CustLedgerEntry."Customer No.",
                ServiceHeader."Document Type",'');
            UNTIL DetailedGSTLedgerEntry2.NEXT = 0;
        END ELSE
          ERROR(STRSUBSTNO(NoGSTEntryErr,CustLedgerEntry."Entry No."));
      END;
    END;

    PROCEDURE ApplyCurrencyFactor@1500008(ApplyCurrencyFacL@1500000 : Boolean);
    BEGIN
      ApplyCurrencyFac := ApplyCurrencyFacL;
    END;

    PROCEDURE ApplyCurrencyFactorInvoice@1500009(ApplyCurrencyFacL@1500000 : Boolean);
    BEGIN
      ApplyCurrencyFacInvoice := ApplyCurrencyFacL;
    END;

    PROCEDURE CheckAppliedAmount@1500010(TransactionType@1500000 : 'Purchase,Sales,Transfer,Service';EntryNo@1500008 : Integer;AccountNo@1500001 : Code[20];InvoiceAmount@1500009 : Decimal;VAR AmounttoApply@1500003 : Decimal;GSTGroupCode@1500006 : Code[20];ShowWarning@1500010 : Boolean);
    VAR
      CustLedgerEntry@1500004 : Record 21;
      VendorLedgerEntry@1500005 : Record 25;
      AppliedAmount@1500007 : Decimal;
      Sign@1500002 : Integer;
      AmountRequired@1500012 : Decimal;
    BEGIN
      CASE TransactionType OF
        TransactionType::Purchase:
          WITH VendorLedgerEntry DO BEGIN
            SETCURRENTKEY("Vendor No.","Entry No.",Open,"Document Type","GST on Advance Payment","GST Group Code");
            SETRANGE("Vendor No.",AccountNo);
            SETFILTER("Entry No.",'<>%1',EntryNo);
            SETRANGE(Open,TRUE);
            SETRANGE("Document Type","Document Type"::Payment);
            SETRANGE("GST on Advance Payment",TRUE);
            SETRANGE("GST Group Code",GSTGroupCode);
            SETFILTER("Amount to Apply",'<>%1',0);
            IF FINDSET THEN
              REPEAT
                AppliedAmount += "Amount to Apply";
              UNTIL NEXT = 0;
          END;
        TransactionType::Sales:
          WITH CustLedgerEntry DO BEGIN
            SETCURRENTKEY("Customer No.","Entry No.",Open,"Document Type","GST on Advance Payment","GST Group Code");
            SETRANGE("Customer No.",AccountNo);
            SETFILTER("Entry No.",'<>%1',EntryNo);
            SETRANGE(Open,TRUE);
            SETRANGE("Document Type","Document Type"::Payment);
            SETRANGE("GST on Advance Payment",TRUE);
            SETRANGE("GST Group Code",GSTGroupCode);
            SETFILTER("Amount to Apply",'<>%1',0);
            IF FINDSET THEN
              REPEAT
                AppliedAmount += "Amount to Apply";
              UNTIL NEXT = 0;
          END;
      END;
      Sign := 1;
      IF (AppliedAmount <> 0) AND (InvoiceAmount <> 0) THEN BEGIN
        IF ABS(AppliedAmount) >= ABS(InvoiceAmount) THEN BEGIN
          AmounttoApply := 0;
          ERROR(STRSUBSTNO(ExceedGroupAmtErr,AmounttoApply,GSTGroupCode));
        END;
        AmountRequired := ABS(AppliedAmount) + ABS(AmounttoApply) - ABS(InvoiceAmount);
        IF AmountRequired <= 0 THEN
          EXIT;
        IF TransactionType = TransactionType::Sales THEN
          Sign := -1;
        AmountRequired *= Sign;
        IF AmountRequired <> AmounttoApply THEN BEGIN
          AmounttoApply := ABS(InvoiceAmount) - ABS(AppliedAmount);
          IF TransactionType = TransactionType::Sales THEN
            AmounttoApply *= Sign;
          IF ShowWarning THEN
            ERROR(STRSUBSTNO(ExceedGroupAmtErr,AmounttoApply,GSTGroupCode));
        END;
      END;
    END;

    PROCEDURE GetInvoiceBaseAmountGSTGroupWise@1500011(TransactionType@1500000 : Option;AccountNo@1500002 : Code[20];DocumentNo@1500001 : Code[20];GSTGroupCode@1500003 : Code[20];GSTComponent@1500005 : Code[10]) GroupBase : Decimal;
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Source No.",AccountNo);
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("GST Group Code",GSTGroupCode);
        SETRANGE("GST Component Code",GSTComponent);
        SETRANGE(Cess,FALSE);
        IF FINDSET THEN
          REPEAT
            GroupBase += "GST Base Amount";
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetInvoiceGSTAmountGSTGroupWise@1500017(TransactionType@1500000 : Option;AccountNo@1500002 : Code[20];DocumentNo@1500001 : Code[20];GSTGroupCode@1500003 : Code[20];VAR GSTBase@1500005 : Decimal) GroupGSTAmount : Decimal;
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY(
          "Transaction Type","Source No.","CLE/VLE Entry No.","Document Type","Document No.","GST Group Code");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Source No.",AccountNo);
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("GST Group Code",GSTGroupCode);
        IF FINDSET THEN
          REPEAT
            IF NOT Cess THEN
              IF GSTBase = 0 THEN
                GSTBase :=
                  GetInvoiceBaseAmountGSTGroupWise(
                    "Transaction Type",AccountNo,DocumentNo,GSTGroupCode,"GST Component Code");
            GroupGSTAmount += "GST Amount";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetInvoiceGSTComponentWise@1500018(VAR GSTApplicationBuffer@1500000 : Record 16423;DocumentType@1500003 : Option;DocumentNo@1500002 : Code[20];Base@1500004 : Boolean) : Decimal;
    VAR
      GSTApplicationBuffer2@1500001 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer2 DO BEGIN
        SETRANGE("Transaction Type",GSTApplicationBuffer."Transaction Type");
        SETRANGE("Account No.",GSTApplicationBuffer."Account No.");
        SETRANGE("Original Document Type",DocumentType);
        SETRANGE("Original Document No.",DocumentNo);
        SETRANGE("GST Component Code",GSTApplicationBuffer."GST Component Code");
        SETRANGE("GST Group Code",GSTApplicationBuffer."GST Group Code");
        IF FINDFIRST THEN BEGIN
          IF Base THEN
            EXIT("GST Base Amount");
          EXIT("GST Amount");
        END;
      END;
    END;

    LOCAL PROCEDURE AdjustPaymentAmount@1500052(TransactionType@1500008 : 'Purchase,Sale';DocumentType@1500007 : Option;DocumentNo@1500006 : Code[20];AccountNo@1500005 : Code[20];PaymentGSTGroupCode@1500004 : Code[20];CustVendEntryNo@1500003 : Integer;AmountToApply@1500000 : Decimal;VAR PaymentAmount@1500002 : Decimal;RemainingAmount@1500009 : Decimal;TotalInvoiceAmount@1500010 : Decimal;GSTRoundingPrecision@1500011 : Decimal);
    VAR
      GSTApplicationBuffer@1500001 : Record 16423;
    BEGIN
      IF (TransactionType = TransactionType::Sale) AND (ABS(PaymentAmount) < ABS(AmountToApply)) AND
         (ABS(RemainingAmount) >= ABS(AmountToApply)) AND
         (PaymentAmount <> 0) AND (ABS(AmountToApply) - ABS(PaymentAmount) > 0) AND
         (ABS(AmountToApply) - ABS(PaymentAmount) <= 1) AND
         (GSTRoundingPrecision > 0.1) AND (ABS(TotalInvoiceAmount) >= ABS(PaymentAmount))
      THEN
        WITH GSTApplicationBuffer DO BEGIN
          RESET;
          SETRANGE("Transaction Type",TransactionType);
          SETRANGE("Account No.",AccountNo);
          SETRANGE("Original Document Type","Original Document Type"::Payment);
          SETRANGE("Applied Doc. Type",DocumentType);
          SETRANGE("Applied Doc. No.",DocumentNo);
          SETRANGE("GST Group Code",PaymentGSTGroupCode);
          SETRANGE("CLE/VLE Entry No.",CustVendEntryNo);
          IF FINDSET THEN BEGIN
            REPEAT
              IF "Applied Base Amount" < 0 THEN
                "Applied Base Amount" -= ABS(AmountToApply) - ABS(PaymentAmount)
              ELSE
                "Applied Base Amount" += ABS(AmountToApply) - ABS(PaymentAmount);
              MODIFY(TRUE);
            UNTIL NEXT = 0;
            IF PaymentAmount < 0 THEN
              PaymentAmount -= ABS(AmountToApply) - ABS(PaymentAmount)
            ELSE
              PaymentAmount += ABS(AmountToApply) - ABS(PaymentAmount);
          END;
        END
      ELSE
        IF (TransactionType = TransactionType::Sale) AND (ABS(RemainingAmount) >= ABS(AmountToApply)) AND
           (PaymentAmount <> 0) AND (TotalInvoiceAmount <> 0) AND
           (ABS(PaymentAmount) - ABS(TotalInvoiceAmount) > 0) AND
           (ABS(PaymentAmount) - ABS(TotalInvoiceAmount) <= 1) AND
           (GSTRoundingPrecision > 0.1) AND (ABS(TotalInvoiceAmount) < ABS(PaymentAmount))
        THEN
          WITH GSTApplicationBuffer DO BEGIN
            RESET;
            SETRANGE("Transaction Type",TransactionType);
            SETRANGE("Account No.",AccountNo);
            SETRANGE("Original Document Type","Original Document Type"::Payment);
            SETRANGE("Applied Doc. Type",DocumentType);
            SETRANGE("Applied Doc. No.",DocumentNo);
            SETRANGE("GST Group Code",PaymentGSTGroupCode);
            SETRANGE("CLE/VLE Entry No.",CustVendEntryNo);
            IF FINDSET THEN BEGIN
              REPEAT
                IF "Applied Base Amount" < 0 THEN
                  "Applied Base Amount" += ABS(PaymentAmount) - ABS(TotalInvoiceAmount)
                ELSE
                  "Applied Base Amount" -= ABS(PaymentAmount) - ABS(TotalInvoiceAmount);
                MODIFY(TRUE);
              UNTIL NEXT = 0;
              IF PaymentAmount < 0 THEN
                PaymentAmount += ABS(PaymentAmount) - ABS(TotalInvoiceAmount)
              ELSE
                PaymentAmount -= ABS(PaymentAmount) - ABS(TotalInvoiceAmount);
            END;
          END;
    END;

    PROCEDURE FillAppBufferInvoice@1500001(TransactionType@1500008 : Option;InvoiceDocNo@1500004 : Code[20];AccountNo@1500011 : Code[20];PaymentDocNo@1500007 : Code[10];TDSTCSAmount@1500005 : Decimal);
    VAR
      GSTApplicationBuffer@1500001 : ARRAY [2] OF Record 16423;
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      GSTApplicationBuffer1@1500003 : Record 16423;
      CurrencyFactor@1500002 : Decimal;
    BEGIN
      DeleteInvoiceApplicationBufferOffline(
        TransactionType,AccountNo,GSTApplicationBuffer1."Original Document Type"::Invoice,InvoiceDocNo);
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Transaction Type","Source Type","Source No.","Document Type","Document No.","GST Group Type");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",TransactionType);
      CASE TransactionType OF
        TransactionType2::Purchase:
          DetailedGSTLedgerEntry.SETRANGE("Source Type",DetailedGSTLedgerEntry."Source Type"::Vendor);
        TransactionType2::Sales:
          DetailedGSTLedgerEntry.SETRANGE("Source Type",DetailedGSTLedgerEntry."Source Type"::Customer);
      END;
      DetailedGSTLedgerEntry.SETRANGE("Source No.",AccountNo);
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETRANGE("Document No.",InvoiceDocNo);
      DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          WITH GSTApplicationBuffer[1] DO BEGIN
            CLEAR(GSTApplicationBuffer[1]);
            "Transaction Type" := DetailedGSTLedgerEntry."Transaction Type";
            "Original Document Type" := GSTApplicationBuffer[1]."Original Document Type"::Invoice;
            "Original Document No." := InvoiceDocNo;
            "Account No." := AccountNo;
            IF PaymentDocNo <> '' THEN BEGIN
              "Applied Doc. Type(Posted)" := "Applied Doc. Type(Posted)"::Payment;
              "Applied Doc. No.(Posted)" := PaymentDocNo;
              "Applied Doc. Type" := "Applied Doc. Type"::Payment;
              "Applied Doc. No." := PaymentDocNo;
            END;
            // DetailedGSTLedgerEntry.TESTFIELD(Paid,FALSE);
            "GST Cess" := DetailedGSTLedgerEntry.Cess;
            "GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
            "Current Doc. Type" := "Current Doc. Type"::Invoice;
            "Current Doc. Type" := DetailedGSTLedgerEntry."Document Type";
            "Currency Code" := DetailedGSTLedgerEntry."Currency Code";
            "Currency Factor" := DetailedGSTLedgerEntry."Currency Factor";
            "GST Rounding Precision" := DetailedGSTLedgerEntry."GST Rounding Precision";
            "GST Rounding Type" := DetailedGSTLedgerEntry."GST Rounding Type";
            "GST Group Type" := DetailedGSTLedgerEntry."GST Group Type";
            CurrencyFactor := 1;
            "GST Credit" := DetailedGSTLedgerEntry."GST Credit";
            "TDS/TCS Amount" := TDSTCSAmount;
            IF ApplyCurrencyFacInvoice THEN
              IF DetailedGSTLedgerEntry."Currency Factor" <> 0 THEN
                CurrencyFactor := DetailedGSTLedgerEntry."Currency Factor";
            IF "Currency Code" <> '' THEN
              "GST Base Amount" := ROUND(DetailedGSTLedgerEntry."GST Base Amount" * CurrencyFactor,0.01)
            ELSE
              "GST Base Amount" := DetailedGSTLedgerEntry."GST Base Amount";
            "GST Amount" := GSTManagement.RoundGSTPrecision(DetailedGSTLedgerEntry."GST Amount" * CurrencyFactor);
          END;
          GSTApplicationBuffer[2] := GSTApplicationBuffer[1];
          IF GSTApplicationBuffer[2].FIND THEN BEGIN
            GSTApplicationBuffer[2]."GST Base Amount" += GSTApplicationBuffer[1]."GST Base Amount";
            GSTApplicationBuffer[2]."GST Base Amount" += 0;
            GSTApplicationBuffer[2]."GST Amount" += GSTApplicationBuffer[1]."GST Amount";
            GSTApplicationBuffer[2].MODIFY(TRUE);
          END ELSE
            GSTApplicationBuffer[2].INSERT(TRUE);
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    PROCEDURE AllocateGSTWithNormalPayment@1500004(AccountNo@1500001 : Code[20];DocumentNo@1500002 : Code[20];AmountToApply@1500003 : Decimal);
    VAR
      GSTApplicationBuffer@1500000 : Record 16423;
      InvoiceBase@1500004 : Decimal;
      Charges@1500009 : Decimal;
      TDSTCS@1500005 : Decimal;
      GSTRoudingType@1500008 : 'Nearest,Up,Down';
      GSTRoundingPrecision@1500007 : Decimal;
      TotalInvoiceAmount@1500010 : Decimal;
    BEGIN
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type","Original Document Type"::Invoice);
        SETRANGE("Original Document No.",DocumentNo);
        SETRANGE("GST Group Code",'');
        IF FINDSET THEN BEGIN
          GetInvoiceBaseAmount(GSTApplicationBuffer,InvoiceBase,Charges,TDSTCS,GSTRoudingType,GSTRoundingPrecision);
          TotalInvoiceAmount := InvoiceBase + Charges - ABS(TDSTCS);
          REPEAT
            IF ABS(TotalInvoiceAmount) > ABS(AmountToApply) THEN BEGIN
              "Applied Base Amount" := ROUND("GST Base Amount" * AmountToApply / TotalInvoiceAmount,0.01);
              "Applied Amount" :=
                GSTApplicationRound(GSTRoudingType,GSTRoundingPrecision,"GST Amount" * AmountToApply / TotalInvoiceAmount);
            END ELSE BEGIN
              "Applied Base Amount" :=
                ROUND(GetInvoiceGSTComponentWise(GSTApplicationBuffer,OriginalDocumentType::Invoice,DocumentNo,TRUE),0.01);
              "Applied Amount" := "GST Amount";
            END;
            MODIFY(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE VerifySameGSTComponent@1500005(GSTApplicationBuffer@1500000 : Record 16423);
    VAR
      GSTApplicationBuffer2@1500001 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer2 DO BEGIN
        SETRANGE("Transaction Type",GSTApplicationBuffer."Transaction Type");
        SETRANGE("Account No.",GSTApplicationBuffer."Account No.");
        SETRANGE("Original Document Type",GSTApplicationBuffer."Applied Doc. Type");
        SETRANGE("Original Document No.",GSTApplicationBuffer."Applied Doc. No.");
        SETRANGE("GST Group Code",GSTApplicationBuffer."GST Group Code");
        SETRANGE("GST Component Code",GSTApplicationBuffer."GST Component Code");
        IF ISEMPTY THEN
          ERROR(STRSUBSTNO(MismatchHSNErr,GSTApplicationBuffer."Original Document No.",GSTApplicationBuffer."Applied Doc. No."));
      END;
    END;

    LOCAL PROCEDURE VerifyNoOfGSTComponent@1500106(GSTApplicationBuffer@1500000 : Record 16423;TotalPaymentLine@1500001 : Integer);
    VAR
      GSTApplicationBuffer2@1500002 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer2 DO BEGIN
        SETRANGE("Transaction Type",GSTApplicationBuffer."Transaction Type");
        SETRANGE("Account No.",GSTApplicationBuffer."Account No.");
        SETRANGE("Original Document Type",GSTApplicationBuffer."Applied Doc. Type");
        SETRANGE("Original Document No.",GSTApplicationBuffer."Applied Doc. No.");
        SETRANGE("GST Group Code",GSTApplicationBuffer."GST Group Code");
        IF TotalPaymentLine <> COUNT THEN
          ERROR(STRSUBSTNO(MismatchHSNErr,GSTApplicationBuffer."Original Document No.",GSTApplicationBuffer."Applied Doc. No."));
      END;
    END;

    PROCEDURE CheckGSTSalesCrMemoValidations@1500037(SalesHeader@1500000 : Record 36);
    VAR
      CustLedgerEntry@1500002 : Record 21;
      SalesLine@1500003 : Record 37;
      SalesInvoiceHeader@1500876 : Record 112;
      GSTManagement@1500001 : Codeunit 16401;
      CurrDocumentGSTRegNo@1500004 : Code[15];
      PostedDocumentGSTRegNo@1500005 : Code[15];
      Type@1500008 : 'Sale,Service,Purchase';
      CurrDocGSTJurisdiction@1500009 : Code[10];
      PostedDocGSTJurisdiction@1500010 : Code[10];
      PostedCurrencyCode@1500011 : Code[10];
      CurrDocLocRegNo@1500007 : Code[15];
      PostedDocLocRegNo@1500006 : Code[15];
    BEGIN
      WITH SalesHeader DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
          EXIT;
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          IF ("Applies-to Doc. No." = '') AND ("Applies-to ID" = '') THEN
            ERROR(ApplicationMandatoryErr,"Document Type","No.");
          IF "Applies-to Doc. No." <> '' THEN
            IF SalesInvoiceHeader.GET("Applies-to Doc. No.") AND
               GSTManagement.IsGSTApplicable(SalesInvoiceHeader.Structure)
            THEN BEGIN
              CheckGSTAppliedDocument(Type::Sale,"Document Type","No.","Applies-to Doc. Type","Applies-to Doc. No.");
              CurrDocumentGSTRegNo := GetPlaceOfSupplyRegistrationNo(Type::Sale,"Document Type","No.",TRUE);
              PostedDocumentGSTRegNo :=
                GetPlaceOfSupplyRegistrationNo(Type::Sale,"Applies-to Doc. Type","Applies-to Doc. No.",FALSE);
              CurrDocLocRegNo := GetLocationRegistrationNo(Type::Sale,"Document Type","No.",TRUE);
              PostedDocLocRegNo := GetLocationRegistrationNo(Type::Sale,"Document Type","Applies-to Doc. No.",FALSE);
              CurrDocGSTJurisdiction := GetGSTJurisdiction(Type::Sale,"Document Type","No.",TRUE);
              PostedDocGSTJurisdiction := GetGSTJurisdiction(Type::Sale,"Applies-to Doc. Type","Applies-to Doc. No.",FALSE);
              PostedCurrencyCode :=
                GetCurrencyCode(Type::Sale,"Applies-to Doc. Type","Applies-to Doc. No.","Sell-to Customer No.");
              IF CurrDocumentGSTRegNo <> PostedDocumentGSTRegNo THEN
                ERROR(DiffGSTRegNoErr,SalesLine.FIELDNAME("GST Place of Supply"));
              IF CurrDocLocRegNo <> PostedDocLocRegNo THEN
                ERROR(DiffGSTRegNoErr,SalesLine.FIELDNAME("Location Code"));
              IF CurrDocGSTJurisdiction <> PostedDocGSTJurisdiction THEN
                ERROR(DiffJurisdictionErr,SalesLine.FIELDNAME("GST Jurisdiction Type"));
              IF PostedCurrencyCode <> "Currency Code" THEN
                ERROR(DiffCurrencyCodeErr,SalesLine.FIELDNAME("Currency Code"));
            END;
          IF "Applies-to ID" <> '' THEN BEGIN
            CustLedgerEntry.RESET;
            CustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID","Document No.");
            CustLedgerEntry.SETRANGE("Customer No.","Bill-to Customer No.");
            CustLedgerEntry.SETRANGE("Applies-to ID","Applies-to ID");
            CustLedgerEntry.SETFILTER("Amount to Apply",'<>0');
            IF CustLedgerEntry.COUNT > 1 THEN
              ERROR(OneApplicationDocumentErr,"Document Type","No.");
            CustLedgerEntry.FINDFIRST;
            IF SalesInvoiceHeader.GET(CustLedgerEntry."Document No.") AND
               GSTManagement.IsGSTApplicable(SalesInvoiceHeader.Structure)
            THEN BEGIN
              CheckGSTAppliedDocument(
                Type::Sale,"Document Type","No.",CustLedgerEntry."Document Type",CustLedgerEntry."Document No.");
              CurrDocumentGSTRegNo := GetPlaceOfSupplyRegistrationNo(Type::Sale,"Document Type","No.",TRUE);
              PostedDocumentGSTRegNo :=
                GetPlaceOfSupplyRegistrationNo(Type::Sale,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.",FALSE);
              CurrDocLocRegNo := GetLocationRegistrationNo(Type::Sale,"Document Type","No.",TRUE);
              PostedDocLocRegNo := GetLocationRegistrationNo(Type::Sale,"Document Type",CustLedgerEntry."Document No.",FALSE);
              CurrDocGSTJurisdiction := GetGSTJurisdiction(Type::Sale,"Document Type","No.",TRUE);
              PostedDocGSTJurisdiction :=
                GetGSTJurisdiction(Type::Sale,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.",FALSE);
              PostedCurrencyCode :=
                GetCurrencyCode(Type::Sale,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.","Sell-to Customer No.");
              IF CurrDocumentGSTRegNo <> PostedDocumentGSTRegNo THEN
                ERROR(DiffGSTRegNoErr,SalesLine.FIELDNAME("GST Place of Supply"));
              IF CurrDocLocRegNo <> PostedDocLocRegNo THEN
                ERROR(DiffGSTRegNoErr,SalesLine.FIELDNAME("Location Code"));
              IF CurrDocGSTJurisdiction <> PostedDocGSTJurisdiction THEN
                ERROR(DiffJurisdictionErr,SalesLine.FIELDNAME("GST Jurisdiction Type"));
              IF PostedCurrencyCode <> "Currency Code" THEN
                ERROR(DiffCurrencyCodeErr,SalesLine.FIELDNAME("Currency Code"));
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGSTAppliedDocument@1500014(Type@1500009 : 'Sale,Service,Purchase';DocumentType@1500007 : Option;DocumentNo@1500008 : Code[20];AppliestoDocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';AppliedDocumentNo@1500000 : Code[20]);
    VAR
      SalesInvoiceHeader@1500001 : Record 112;
      ServiceInvoiceHeader@1500010 : Record 5992;
      SalesHeader@1500006 : Record 36;
      ServiceHeader@1500011 : Record 5900;
      PurchInvHeader@1500012 : Record 122;
      PurchaseHeader@1500013 : Record 38;
    BEGIN
      CASE Type OF
        Type::Sale:
          BEGIN
            IF AppliestoDocumentType <> AppliestoDocumentType::Invoice THEN
              ERROR(InvoiceAppliedErr,SalesHeader.FIELDNAME("Document Type"),SalesHeader."Document Type"::Invoice);
            WITH SalesInvoiceHeader DO BEGIN
              IF NOT GET(AppliedDocumentNo) THEN
                ERROR(SalesDocumentErr);
              SalesHeader.GET(DocumentType,DocumentNo);
              IF SalesHeader."Posting Date" < "Posting Date" THEN
                ERROR(PostingDateErr,"No.",SalesHeader."No.");
              IF GSTManagement.IsGSTApplicable(SalesHeader.Structure) THEN
                IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
                  CheckGSTAccountingPeriod(DocumentNo,SalesHeader."Posting Date","Posting Date");
                  IF "GST Without Payment of Duty" <> SalesHeader."GST Without Payment of Duty" THEN
                    ERROR(DiffGSTWithoutPaymentOfDutyErr);
                END;
            END;
          END;
        Type::Service:
          BEGIN
            IF AppliestoDocumentType <> AppliestoDocumentType::Invoice THEN
              ERROR(InvoiceAppliedErr,ServiceHeader.FIELDNAME("Document Type"),ServiceHeader."Document Type"::Invoice);
            WITH ServiceInvoiceHeader DO BEGIN
              IF NOT GET(AppliedDocumentNo) THEN
                ERROR(SalesDocumentErr);
              ServiceHeader.GET(DocumentType,DocumentNo);
              IF ServiceHeader."Posting Date" < "Posting Date" THEN
                ERROR(PostingDateErr,"No.",ServiceHeader."No.");
              CheckGSTAccountingPeriod(DocumentNo,ServiceHeader."Posting Date","Posting Date");
              IF "GST Without Payment of Duty" <> ServiceHeader."GST Without Payment of Duty" THEN
                ERROR(DiffGSTWithoutPaymentOfDutyErr);
            END;
          END;
        Type::Purchase:
          BEGIN
            IF AppliestoDocumentType <> AppliestoDocumentType::Invoice THEN
              ERROR(InvoiceAppliedErr,PurchaseHeader.FIELDNAME("Document Type"),PurchaseHeader."Document Type"::Invoice);
            WITH PurchInvHeader DO BEGIN
              IF NOT GET(AppliedDocumentNo) THEN
                ERROR(PurchaseDocumentErr);
              PurchaseHeader.GET(DocumentType,DocumentNo);
              IF PurchaseHeader."Posting Date" < "Posting Date" THEN
                ERROR(PostingDateErr,"No.",PurchaseHeader."No.");
              CheckGSTAccountingPeriod(DocumentNo,PurchaseHeader."Posting Date","Posting Date");
            END;
          END;
      END;
    END;

    PROCEDURE GetPlaceOfSupplyRegistrationNo@1500013(DocType@1500008 : 'Sale,Service,Purchase';DocumentType@1500002 : Option;DocumentNo@1500000 : Code[20];CurrentDocument@1500006 : Boolean) GSTRegistrationNo : Code[15];
    VAR
      SalesHeader@1500005 : Record 36;
      SalesLine@1500001 : Record 37;
      ServiceHeader@1500009 : Record 5900;
      ServiceLine@1500010 : Record 5902;
      Customer@1500003 : Record 18;
      Vendor@1500093 : Record 23;
      ShipToAddress@1500004 : Record 222;
      DetailedGSTLedgerEntry@1500007 : Record 16419;
      PurchaseHeader@1500011 : Record 38;
    BEGIN
      IF CurrentDocument THEN
        CASE DocType OF
          DocType::Sale:
            BEGIN
              IF DocumentNo <> '' THEN
                SalesHeader.GET(DocumentType,DocumentNo);
              WITH SalesLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Type,'<>%1',Type::" ");
                IF FINDFIRST THEN
                  CASE "GST Place of Supply" OF
                    "GST Place of Supply"::"Bill-to Address":
                      BEGIN
                        Customer.GET("Bill-to Customer No.");
                        GSTRegistrationNo := Customer."GST Registration No.";
                      END;
                    "GST Place of Supply"::"Ship-to Address":
                      BEGIN
                        SalesHeader.TESTFIELD("Ship-to Code");
                        ShipToAddress.GET(SalesHeader."Bill-to Customer No.",SalesHeader."Ship-to Code");
                        GSTRegistrationNo := ShipToAddress."GST Registration No.";
                      END;
                    "GST Place of Supply"::"Location Address":
                      GSTRegistrationNo := Customer."GST Registration No.";
                  END;
                EXIT(GSTRegistrationNo);
              END;
            END;
          DocType::Service:
            BEGIN
              IF DocumentNo <> '' THEN
                ServiceHeader.GET(DocumentType,DocumentNo);
              WITH ServiceLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Type,'<>%1',Type::" ");
                IF FINDFIRST THEN
                  CASE "GST Place Of Supply" OF
                    "GST Place Of Supply"::"Bill-to Address":
                      BEGIN
                        Customer.GET("Bill-to Customer No.");
                        GSTRegistrationNo := Customer."GST Registration No.";
                      END;
                    "GST Place Of Supply"::"Ship-to Address":
                      BEGIN
                        SalesHeader.TESTFIELD("Ship-to Code");
                        ShipToAddress.GET(SalesHeader."Bill-to Customer No.",SalesHeader."Ship-to Code");
                        GSTRegistrationNo := ShipToAddress."GST Registration No.";
                      END;
                    "GST Place Of Supply"::"Location Address":
                      GSTRegistrationNo := Customer."GST Registration No.";
                  END;
                EXIT(GSTRegistrationNo);
              END;
            END;
          DocType::Purchase:
            BEGIN
              IF DocumentNo <> '' THEN BEGIN
                PurchaseHeader.GET(DocumentType,DocumentNo);
                Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
                GSTRegistrationNo := Vendor."GST Registration No.";
              END;
              EXIT(GSTRegistrationNo);
            END;
        END;
      WITH DetailedGSTLedgerEntry DO BEGIN
        RESET;
        IF DocType = DocType::Purchase THEN
          SETRANGE("Transaction Type","Transaction Type"::Purchase)
        ELSE
          SETRANGE("Transaction Type","Transaction Type"::Sales);
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        EXIT("Buyer/Seller Reg. No.");
      END;
    END;

    LOCAL PROCEDURE CheckGSTAccountingPeriod@1500012(DocumentNo@1500002 : Code[20];PostingDate@1500000 : Date;InvPostingDate@1500003 : Date);
    VAR
      GSTAccountingPeriod@1500001 : Record 16401;
    BEGIN
      WITH GSTAccountingPeriod DO BEGIN
        RESET;
        SETFILTER("Starting Date",'<=%1',InvPostingDate);
        SETFILTER("Ending Date",'>=%1',InvPostingDate);
        FINDLAST;
        IF ("Credit Memo Locking Date" = 0D) AND ("Annual Return Filed Date" = 0D) THEN
          ERROR(DateErr,FIELDNAME("Credit Memo Locking Date"),FIELDNAME("Annual Return Filed Date"));
        IF ("Annual Return Filed Date" <> 0D) AND ("Credit Memo Locking Date" <> 0D) THEN BEGIN
          IF ("Annual Return Filed Date" = "Credit Memo Locking Date") AND (PostingDate >= "Credit Memo Locking Date") THEN
            ERROR(EqualDateLockErr,DocumentNo,FIELDNAME("Credit Memo Locking Date"),
              FIELDNAME("Annual Return Filed Date"),"Credit Memo Locking Date");
          IF ("Annual Return Filed Date" > "Credit Memo Locking Date") AND (PostingDate >= "Credit Memo Locking Date") THEN
            ERROR(DateLockErr,DocumentNo,FIELDNAME("Credit Memo Locking Date"),"Credit Memo Locking Date");
          IF ("Annual Return Filed Date" < "Credit Memo Locking Date") AND (PostingDate >= "Annual Return Filed Date") THEN
            ERROR(DateLockErr,DocumentNo,FIELDNAME("Annual Return Filed Date"),"Annual Return Filed Date");
        END;
        IF ("Annual Return Filed Date" = 0D) AND ("Credit Memo Locking Date" <> 0D) THEN
          IF PostingDate >= "Credit Memo Locking Date" THEN
            ERROR(DateLockErr,DocumentNo,FIELDNAME("Credit Memo Locking Date"),"Credit Memo Locking Date");
        IF ("Annual Return Filed Date" <> 0D) AND ("Credit Memo Locking Date" = 0D) THEN
          IF PostingDate >= "Annual Return Filed Date" THEN
            ERROR(DateLockErr,DocumentNo,FIELDNAME("Annual Return Filed Date"),"Annual Return Filed Date");
      END;
    END;

    PROCEDURE GetBaseAmount@1500016(DocType@1500007 : 'Sale,Service,Purchase';DocumentType@1500002 : Option;DocumentNo@1500001 : Code[20];CurrentDocument@1500000 : Boolean) BaseAmount : Decimal;
    VAR
      SalesHeader@1500003 : Record 36;
      SalesLine@1500004 : Record 37;
      ServiceHeader@1500008 : Record 5900;
      ServiceLine@1500009 : Record 5902;
      DetailedGSTLedgerEntry@1500005 : Record 16419;
      PurchaseHeader@1500010 : Record 38;
      PurchaseLine@1500011 : Record 39;
      LineNo@1500006 : Integer;
    BEGIN
      IF CurrentDocument THEN BEGIN
        CASE DocType OF
          DocType::Sale:
            BEGIN
              IF DocumentNo <> '' THEN
                SalesHeader.GET(DocumentType,DocumentNo);
              WITH SalesLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Quantity,'<>%1',0);
                IF FINDSET THEN
                  REPEAT
                    BaseAmount += "GST Base Amount" * "Return Qty. to Receive" / Quantity;
                  UNTIL NEXT = 0;
              END;
              EXIT(BaseAmount);
            END;
        END;
        CASE DocType OF
          DocType::Service:
            BEGIN
              IF DocumentNo <> '' THEN
                ServiceHeader.GET(DocumentType,DocumentNo);
              WITH ServiceLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                IF FINDSET THEN
                  REPEAT
                    BaseAmount += "GST Base Amount";
                  UNTIL NEXT = 0;
              END;
              EXIT(BaseAmount);
            END;
        END;
        CASE DocType OF
          DocType::Purchase:
            BEGIN
              IF DocumentNo <> '' THEN
                PurchaseHeader.GET(DocumentType,DocumentNo);
              WITH PurchaseLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Quantity,'<>%1',0);
                IF FINDSET THEN
                  REPEAT
                    BaseAmount += "GST Base Amount" * "Return Qty. to Ship" / Quantity;
                  UNTIL NEXT = 0;
              END;
              EXIT(BaseAmount);
            END;
        END;
      END ELSE BEGIN
        WITH DetailedGSTLedgerEntry DO BEGIN
          RESET;
          SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
          IF DocType = DocType::Purchase THEN
            SETRANGE("Transaction Type","Transaction Type"::Purchase)
          ELSE
            SETRANGE("Transaction Type","Transaction Type"::Sales);
          SETRANGE("Document Type",DocumentType);
          SETRANGE("Document No.",DocumentNo);
          SETRANGE(Cess,FALSE);
          IF FINDSET THEN
            REPEAT
              IF LineNo <> "Document Line No." THEN
                BaseAmount += "GST Base Amount";
              LineNo := "Document Line No.";
            UNTIL NEXT = 0;

          RESET;
          SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
          IF DocType = DocType::Purchase THEN
            SETRANGE("Transaction Type","Transaction Type"::Purchase)
          ELSE
            SETRANGE("Transaction Type","Transaction Type"::Sales);
          SETRANGE("Original Invoice No.",DocumentNo);
          SETRANGE(Cess,FALSE);
          IF FINDSET THEN
            REPEAT
              IF LineNo <> "Document Line No." THEN
                BaseAmount += "GST Base Amount";
              LineNo := "Document Line No.";
            UNTIL NEXT = 0;
        END;
        EXIT(BaseAmount);
      END;
    END;

    PROCEDURE CheckGSTServiceCrMemoValidations@1500111(ServiceHeader@1500000 : Record 5900);
    VAR
      CustLedgerEntry@1500002 : Record 21;
      ServiceLine@1500003 : Record 5902;
      ServiceInvoiceHeader@1500903 : Record 5992;
      GSTManagement@1500001 : Codeunit 16401;
      CurrDocumentGSTRegNo@1500004 : Code[15];
      PostedDocumentGSTRegNo@1500005 : Code[15];
      Type@1500008 : 'Sale,Service,Purchase';
      CurrDocGSTJurisdiction@1500010 : Code[10];
      PostedDocGSTJurisdiction@1500009 : Code[10];
      PostedCurrencyCode@1500011 : Code[10];
      CurrDocLocRegNo@1500007 : Code[15];
      PostedDocLocRegNo@1500006 : Code[15];
    BEGIN
      WITH ServiceHeader DO BEGIN
        IF NOT ("Document Type" = "Document Type"::"Credit Memo") THEN
          EXIT;
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          IF ("Applies-to Doc. No." = '') AND ("Applies-to ID" = '') THEN
            ERROR(ApplicationMandatoryErr,"Document Type","No.");
          IF "Applies-to Doc. No." <> '' THEN
            IF ServiceInvoiceHeader.GET("Applies-to Doc. No.") AND
               GSTManagement.IsGSTApplicable(ServiceInvoiceHeader.Structure)
            THEN BEGIN
              CheckGSTAppliedDocument(Type::Service,"Document Type","No.","Applies-to Doc. Type","Applies-to Doc. No.");
              CurrDocumentGSTRegNo := GetPlaceOfSupplyRegistrationNo(Type::Service,"Document Type","No.",TRUE);
              PostedDocumentGSTRegNo :=
                GetPlaceOfSupplyRegistrationNo(Type::Service,"Applies-to Doc. Type","Applies-to Doc. No.",FALSE);
              CurrDocLocRegNo := GetLocationRegistrationNo(Type::Service,"Document Type","No.",TRUE);
              PostedDocLocRegNo := GetLocationRegistrationNo(Type::Service,"Document Type","Applies-to Doc. No.",FALSE);
              CurrDocGSTJurisdiction := GetGSTJurisdiction(Type::Service,"Document Type","No.",TRUE);
              PostedDocGSTJurisdiction := GetGSTJurisdiction(Type::Service,"Applies-to Doc. Type","Applies-to Doc. No.",FALSE);
              PostedCurrencyCode :=
                GetCurrencyCode(Type::Service,"Applies-to Doc. Type","Applies-to Doc. No.","Customer No.");
              IF CurrDocGSTJurisdiction <> PostedDocGSTJurisdiction THEN
                ERROR(DiffJurisdictionErr,ServiceLine.FIELDNAME("GST Jurisdiction Type"));
              IF CurrDocumentGSTRegNo <> PostedDocumentGSTRegNo THEN
                ERROR(DiffGSTRegNoErr,ServiceLine.FIELDNAME("GST Place Of Supply"));
              IF CurrDocLocRegNo <> PostedDocLocRegNo THEN
                ERROR(DiffGSTRegNoErr,ServiceLine.FIELDNAME("Location Code"));
              IF "Currency Code" <> PostedCurrencyCode THEN
                ERROR(DiffCurrencyCodeErr,"Currency Code");
            END;
          IF "Applies-to ID" <> '' THEN BEGIN
            CustLedgerEntry.RESET;
            CustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID","Document No.");
            CustLedgerEntry.SETRANGE("Customer No.","Bill-to Customer No.");
            CustLedgerEntry.SETRANGE("Applies-to ID","Applies-to ID");
            CustLedgerEntry.SETFILTER("Amount to Apply",'<>0');
            IF CustLedgerEntry.COUNT > 1 THEN
              ERROR(OneApplicationDocumentErr,"Document Type","No.");
            CustLedgerEntry.FINDFIRST;
            IF ServiceInvoiceHeader.GET(CustLedgerEntry."Document No.") AND
               GSTManagement.IsGSTApplicable(ServiceInvoiceHeader.Structure)
            THEN BEGIN
              CheckGSTAppliedDocument(
                Type::Service,"Document Type","No.",CustLedgerEntry."Document Type",CustLedgerEntry."Document No.");
              CurrDocumentGSTRegNo := GetPlaceOfSupplyRegistrationNo(Type::Service,"Document Type","No.",TRUE);
              PostedDocumentGSTRegNo :=
                GetPlaceOfSupplyRegistrationNo(Type::Service,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.",FALSE);
              CurrDocLocRegNo := GetLocationRegistrationNo(Type::Sale,"Document Type","No.",TRUE);
              PostedDocLocRegNo := GetLocationRegistrationNo(Type::Sale,"Document Type",CustLedgerEntry."Document No.",FALSE);
              CurrDocGSTJurisdiction := GetGSTJurisdiction(Type::Service,"Document Type","No.",TRUE);
              PostedDocGSTJurisdiction :=
                GetGSTJurisdiction(Type::Service,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.",FALSE);
              PostedCurrencyCode :=
                GetCurrencyCode(Type::Sale,CustLedgerEntry."Document Type",CustLedgerEntry."Document No.","Customer No.");
              IF CurrDocGSTJurisdiction <> PostedDocGSTJurisdiction THEN
                ERROR(DiffJurisdictionErr,ServiceLine.FIELDNAME("GST Jurisdiction Type"));
              IF CurrDocumentGSTRegNo <> PostedDocumentGSTRegNo THEN
                ERROR(DiffGSTRegNoErr,ServiceLine.FIELDNAME("GST Place Of Supply"));
              IF CurrDocLocRegNo <> PostedDocLocRegNo THEN
                ERROR(DiffGSTRegNoErr,ServiceLine.FIELDNAME("Location Code"));
              IF "Currency Code" <> PostedCurrencyCode THEN
                ERROR(DiffCurrencyCodeErr,"Currency Code");
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckPaidAdvancePayment@1500015(PaymentDocNo@1500001 : Code[20];PostingDate@1500000 : Date);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Payment);
      DetailedGSTLedgerEntry.SETRANGE("Document No.",PaymentDocNo);
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE(Paid,TRUE);
      IF DetailedGSTLedgerEntry.FINDFIRST THEN
        IF (DATE2DMY(PostingDate,2) = DATE2DMY(DetailedGSTLedgerEntry."Posting Date",2)) AND
           (DATE2DMY(PostingDate,3) = DATE2DMY(DetailedGSTLedgerEntry."Posting Date",3))
        THEN
          ERROR(PaidAdvPaymntForAppErr);
    END;

    PROCEDURE CheckGSTPurchCrMemoValidations@1500021(PurchaseHeader@1500000 : Record 38);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
      PurchaseLine@1500003 : Record 39;
      PurchInvHeader@1170000000 : Record 122;
      GSTManagement@1500001 : Codeunit 16401;
      CurrDocumentGSTRegNo@1500004 : Code[15];
      PostedDocumentGSTRegNo@1500005 : Code[15];
      Type@1500008 : 'Sale,Service,Purchase';
      CurrDocLocRegNo@1170000001 : Code[15];
      PostedDocLocRegNo@1170000002 : Code[15];
      CurrDocGSTJurisdiction@1500010 : Code[10];
      PostedDocGSTJurisdiction@1500009 : Code[10];
      PostedCurrencyCode@1500011 : Code[10];
    BEGIN
      WITH PurchaseHeader DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
          EXIT;
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          IF ("Applies-to Doc. No." = '') AND ("Applies-to ID" = '') THEN
            ERROR(ApplicationMandatoryErr,"Document Type","No.");
          IF "Applies-to Doc. No." <> '' THEN
            IF PurchInvHeader.GET("Applies-to Doc. No.") AND
               GSTManagement.IsGSTApplicable(PurchInvHeader.Structure)
            THEN BEGIN
              CheckGSTAppliedDocument(Type::Purchase,"Document Type","No.","Applies-to Doc. Type","Applies-to Doc. No.");
              CurrDocumentGSTRegNo := GetPlaceOfSupplyRegistrationNo(Type::Purchase,"Document Type","No.",TRUE);
              PostedDocumentGSTRegNo :=
                GetPlaceOfSupplyRegistrationNo(Type::Purchase,"Applies-to Doc. Type","Applies-to Doc. No.",FALSE);
              CurrDocLocRegNo := GetLocationRegistrationNo(Type::Purchase,"Document Type","No.",TRUE);
              PostedDocLocRegNo := GetLocationRegistrationNo(Type::Purchase,"Document Type","Applies-to Doc. No.",FALSE);
              CurrDocGSTJurisdiction := GetGSTJurisdiction(Type::Purchase,"Document Type","No.",TRUE);
              PostedDocGSTJurisdiction := GetGSTJurisdiction(Type::Purchase,"Applies-to Doc. Type","Applies-to Doc. No.",FALSE);
              PostedCurrencyCode :=
                GetCurrencyCode(Type::Purchase,"Applies-to Doc. Type","Applies-to Doc. No.","Buy-from Vendor No.");
              IF CurrDocumentGSTRegNo <> PostedDocumentGSTRegNo THEN
                ERROR(DiffGSTRegNoErr,PurchaseLine.FIELDNAME("Buy-from Vendor No."));
              IF CurrDocLocRegNo <> PostedDocLocRegNo THEN
                ERROR(DiffGSTRegNoErr,PurchaseLine.FIELDNAME("Location Code"));
              IF CurrDocGSTJurisdiction <> PostedDocGSTJurisdiction THEN
                ERROR(DiffJurisdictionErr,PurchaseLine.FIELDNAME("GST Jurisdiction Type"));
              IF "Currency Code" <> PostedCurrencyCode THEN
                ERROR(DiffCurrencyCodeErr,PurchaseLine.FIELDNAME("Currency Code"));
            END;
          IF "Applies-to ID" <> '' THEN BEGIN
            VendorLedgerEntry.RESET;
            VendorLedgerEntry.SETCURRENTKEY("Vendor No.","Applies-to ID","Document No.");
            VendorLedgerEntry.SETRANGE("Vendor No.","Buy-from Vendor No.");
            VendorLedgerEntry.SETRANGE("Applies-to ID","Applies-to ID");
            VendorLedgerEntry.SETFILTER("Amount to Apply",'<>0');
            IF VendorLedgerEntry.COUNT > 1 THEN
              ERROR(OneApplicationDocumentErr,"Document Type","No.");
            VendorLedgerEntry.FINDFIRST;
            IF PurchInvHeader.GET(VendorLedgerEntry."Document No.") AND
               GSTManagement.IsGSTApplicable(PurchInvHeader.Structure)
            THEN BEGIN
              CheckGSTAppliedDocument(
                Type::Purchase,"Document Type","No.",VendorLedgerEntry."Document Type",VendorLedgerEntry."Document No.");
              CurrDocumentGSTRegNo := GetPlaceOfSupplyRegistrationNo(Type::Purchase,"Document Type","No.",TRUE);
              PostedDocumentGSTRegNo :=
                GetPlaceOfSupplyRegistrationNo(
                  Type::Purchase,VendorLedgerEntry."Document Type",VendorLedgerEntry."Document No.",FALSE);
              CurrDocLocRegNo := GetLocationRegistrationNo(Type::Purchase,"Document Type","No.",TRUE);
              PostedDocLocRegNo :=
                GetLocationRegistrationNo(Type::Purchase,"Document Type",VendorLedgerEntry."Document No.",FALSE);
              CurrDocGSTJurisdiction := GetGSTJurisdiction(Type::Purchase,"Document Type","No.",TRUE);
              PostedDocGSTJurisdiction :=
                GetGSTJurisdiction(Type::Purchase,VendorLedgerEntry."Document Type",VendorLedgerEntry."Document No.",FALSE);
              PostedCurrencyCode :=
                GetCurrencyCode(
                  Type::Purchase,VendorLedgerEntry."Document Type",VendorLedgerEntry."Document No.","Buy-from Vendor No.");
              IF CurrDocumentGSTRegNo <> PostedDocumentGSTRegNo THEN
                ERROR(DiffGSTRegNoErr,PurchaseLine.FIELDNAME("Buy-from Vendor No."));
              IF CurrDocLocRegNo <> PostedDocLocRegNo THEN
                ERROR(DiffGSTRegNoErr,PurchaseLine.FIELDNAME("Location Code"));
              IF CurrDocGSTJurisdiction <> PostedDocGSTJurisdiction THEN
                ERROR(DiffJurisdictionErr,PurchaseLine.FIELDNAME("GST Jurisdiction Type"));
              IF "Currency Code" <> PostedCurrencyCode THEN
                ERROR(DiffCurrencyCodeErr,PurchaseLine.FIELDNAME("Currency Code"));
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CheckGSTPurchCrMemoValidationsOffline@1500316(VendorLedgerEntry@1500000 : Record 25;ApplyingVendorLedgerEntry@1500009 : Record 25;Entrys@1500013 : Integer);
    VAR
      VendorLedgerEntryInv@1500003 : Record 25;
      VendorLedgerEntryCrMemo@1500002 : Record 25;
      PurchInvHeader@1500011 : Record 122;
      PurchCrMemoHdr@1500004 : Record 124;
      Type@1500008 : 'Sale,Service,Purchase';
      InvGSTJurisdiction@1500001 : Code[10];
      CrMemoGSTJuridiction@1500005 : Code[10];
      OriginalInvNo@1170000000 : Code[20];
      DocType@1500012 : 'Sale,Purchase';
    BEGIN
      IF VendorLedgerEntry."Document Type" = VendorLedgerEntry."Document Type"::Invoice THEN BEGIN
        VendorLedgerEntryInv.COPY(VendorLedgerEntry);
        VendorLedgerEntryCrMemo.COPY(ApplyingVendorLedgerEntry);
      END ELSE BEGIN
        VendorLedgerEntryInv.COPY(ApplyingVendorLedgerEntry);
        VendorLedgerEntryCrMemo.COPY(VendorLedgerEntry);
      END;
      IF PurchInvHeader.GET(VendorLedgerEntryInv."Document No.") THEN;
      IF PurchCrMemoHdr.GET(VendorLedgerEntryCrMemo."Document No.") THEN;
      WITH PurchInvHeader DO BEGIN
        IF VendorLedgerEntry."Document Type" = VendorLedgerEntry."Document Type"::Invoice THEN
          IF (Entrys >= 1) AND GSTManagement.IsGSTApplicable(PurchCrMemoHdr.Structure) THEN
            ERROR(OneDocumentErr,ApplyingVendorLedgerEntry."Document Type",ApplyingVendorLedgerEntry."Document No.");
        IF CheckInvoiceNoFromDetGST(PurchCrMemoHdr."No.",OriginalInvNo) THEN
          ERROR(InvoiceNoBlankErr,PurchCrMemoHdr."No.",OriginalInvNo);
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          CheckGSTAppliedDocumentPosted(DocType::Purchase,"No.",PurchCrMemoHdr."No.");
          IF GSTManagement.IsGSTApplicable(PurchCrMemoHdr.Structure) THEN BEGIN
            IF VendorLedgerEntryInv."Location GST Reg. No." <> VendorLedgerEntryCrMemo."Location GST Reg. No." THEN
              ERROR(DiffGSTRegNoErr,VendorLedgerEntryInv.FIELDCAPTION("Location GST Reg. No."));
            IF VendorLedgerEntryInv."Buyer GST Reg. No." <> VendorLedgerEntryCrMemo."Buyer GST Reg. No." THEN
              ERROR(DiffGSTRegNoErr,VendorLedgerEntryInv.FIELDCAPTION("Buyer GST Reg. No."));
            InvGSTJurisdiction :=
              GetGSTJurisdiction(Type::Purchase,VendorLedgerEntryInv."Document Type",VendorLedgerEntryInv."Document No.",FALSE);
            CrMemoGSTJuridiction :=
              GetGSTJurisdiction(Type::Purchase,VendorLedgerEntryCrMemo."Document Type",
                VendorLedgerEntryCrMemo."Document No.",FALSE);
            IF InvGSTJurisdiction <> CrMemoGSTJuridiction THEN
              ERROR(DiffJurisdictionErr,VendorLedgerEntryInv.FIELDCAPTION("GST Jurisdiction Type"));
            IF VendorLedgerEntryInv."Currency Code" <> VendorLedgerEntryCrMemo."Currency Code" THEN
              ERROR(DiffCurrencyCodeErr,VendorLedgerEntryInv.FIELDCAPTION("Currency Code"));
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGSTAppliedDocumentPosted@1500019(Type@1500009 : 'Sale,Purchase';InvDocumentNo@1500008 : Code[20];CrDocumentNo@1500000 : Code[20]);
    VAR
      SalesInvoiceHeader@1500001 : Record 112;
      SalesCrMemoHeader@1500006 : Record 114;
      PurchInvHeader@1500012 : Record 122;
      PurchCrMemoHdr@1500013 : Record 124;
      ServiceCrMemoHeader@1500916 : Record 5994;
      ServiceInvoiceHeader@1500917 : Record 5992;
    BEGIN
      CASE Type OF
        Type::Sale:
          BEGIN
            IF SalesCrMemoHeader.GET(CrDocumentNo) THEN
              WITH SalesCrMemoHeader DO BEGIN
                SalesInvoiceHeader.GET(InvDocumentNo);
                IF "Posting Date" < SalesInvoiceHeader."Posting Date" THEN
                  ERROR(PostingDateErr,SalesInvoiceHeader."No.","No.");
                CheckGSTAccountingPeriod(CrDocumentNo,"Posting Date",SalesInvoiceHeader."Posting Date");
              END
            ELSE
              IF ServiceCrMemoHeader.GET(CrDocumentNo) THEN
                WITH ServiceCrMemoHeader DO BEGIN
                  ServiceInvoiceHeader.GET(InvDocumentNo);
                  IF "Posting Date" < ServiceInvoiceHeader."Posting Date" THEN
                    ERROR(PostingDateErr,ServiceInvoiceHeader."No.","No.");
                  CheckGSTAccountingPeriod(CrDocumentNo,"Posting Date",ServiceInvoiceHeader."Posting Date");
                END
          END;
        Type::Purchase:
          BEGIN
            PurchInvHeader.GET(InvDocumentNo);
            PurchCrMemoHdr.GET(CrDocumentNo);
            WITH PurchCrMemoHdr DO BEGIN
              IF "Posting Date" < PurchInvHeader."Posting Date" THEN
                ERROR(PostingDateErr,PurchInvHeader."No.","No.");
              CheckGSTAccountingPeriod(CrDocumentNo,"Posting Date",PurchInvHeader."Posting Date");
            END;
          END;
      END;
    END;

    PROCEDURE CheckGSTSalesCrMemoValidationsOffline@1500025(CustLedgerEntry@1500000 : Record 21;ApplyingCustLedgerEntry@1500009 : Record 21;Entrys@1500013 : Integer);
    VAR
      CustLedgerEntryInv@1500003 : Record 21;
      CustLedgerEntryCrMemo@1500002 : Record 21;
      SalesInvoiceHeader@1500011 : Record 112;
      SalesCrMemoHeader@1500004 : Record 114;
      ServiceInvoiceHeader@1500020 : Record 5992;
      ServiceCrMemoHeader@1500021 : Record 5994;
      Type@1500008 : 'Sale,Purchase';
      InvGSTJurisdiction@1500005 : Code[10];
      CrMemoGSTJuridiction@1500006 : Code[10];
      InvSellerRegNo@1500400 : Code[15];
      CrMemoSellerRegNo@1500401 : Code[15];
      OriginalInvNo@1500402 : Code[20];
      DocType@1500012 : 'Sale,Service,Purchase';
    BEGIN
      IF CustLedgerEntry."Document Type" = CustLedgerEntry."Document Type"::Invoice THEN BEGIN
        CustLedgerEntryInv.COPY(CustLedgerEntry);
        CustLedgerEntryCrMemo.COPY(ApplyingCustLedgerEntry);
      END ELSE BEGIN
        CustLedgerEntryInv.COPY(ApplyingCustLedgerEntry);
        CustLedgerEntryCrMemo.COPY(CustLedgerEntry);
      END;
      IF SalesInvoiceHeader.GET(CustLedgerEntryInv."Document No.") THEN;
      IF SalesCrMemoHeader.GET(CustLedgerEntryCrMemo."Document No.") THEN;
      WITH SalesInvoiceHeader DO BEGIN
        IF CustLedgerEntry."Document Type" = CustLedgerEntry."Document Type"::Invoice THEN
          IF (Entrys >= 1) AND GSTManagement.IsGSTApplicable(SalesCrMemoHeader.Structure) THEN
            ERROR(OneDocumentErr,ApplyingCustLedgerEntry."Document Type",ApplyingCustLedgerEntry."Document No.");
        IF CheckInvoiceNoFromDetGST(SalesCrMemoHeader."No.",OriginalInvNo) THEN
          ERROR(InvoiceNoBlankErr,SalesCrMemoHeader."No.",OriginalInvNo);
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          CheckGSTAppliedDocumentPosted(Type::Sale,"No.",SalesCrMemoHeader."No.");
          IF GSTManagement.IsGSTApplicable(SalesCrMemoHeader.Structure) THEN BEGIN
            IF CustLedgerEntryInv."Location GST Reg. No." <> CustLedgerEntryCrMemo."Location GST Reg. No." THEN
              ERROR(DiffGSTRegNoErr,CustLedgerEntryInv.FIELDCAPTION("Location GST Reg. No."));
            InvSellerRegNo :=
              GetPlaceOfSupplyRegistrationNo(DocType::Sale,CustLedgerEntryInv."Document Type",CustLedgerEntryInv."Document No.",FALSE);
            CrMemoSellerRegNo :=
              GetPlaceOfSupplyRegistrationNo(
                DocType::Sale,CustLedgerEntryCrMemo."Document Type",CustLedgerEntryCrMemo."Document No.",FALSE);
            IF InvSellerRegNo <> CrMemoSellerRegNo THEN
              ERROR(DiffGSTRegNoErr,CustLedgerEntryInv.FIELDCAPTION("Seller GST Reg. No."));
            InvGSTJurisdiction :=
              GetGSTJurisdiction(DocType::Sale,CustLedgerEntryInv."Document Type",CustLedgerEntryInv."Document No.",FALSE);
            CrMemoGSTJuridiction :=
              GetGSTJurisdiction(DocType::Sale,CustLedgerEntryCrMemo."Document Type",CustLedgerEntryCrMemo."Document No.",FALSE);
            IF InvGSTJurisdiction <> CrMemoGSTJuridiction THEN
              ERROR(DiffJurisdictionErr,CustLedgerEntryInv.FIELDCAPTION("GST Jurisdiction Type"));
            IF CustLedgerEntryInv."Currency Code" <> CustLedgerEntryCrMemo."Currency Code" THEN
              ERROR(DiffCurrencyCodeErr,CustLedgerEntryInv.FIELDCAPTION("Currency Code"));
          END;
        END;
      END;

      IF ServiceInvoiceHeader.GET(CustLedgerEntryInv."Document No.") THEN;
      IF ServiceCrMemoHeader.GET(CustLedgerEntryCrMemo."Document No.") THEN;
      WITH ServiceInvoiceHeader DO BEGIN
        IF CustLedgerEntry."Document Type" = CustLedgerEntry."Document Type"::Invoice THEN
          IF (Entrys >= 1) AND GSTManagement.IsGSTApplicable(ServiceCrMemoHeader.Structure) THEN
            ERROR(OneDocumentErr,ApplyingCustLedgerEntry."Document Type",ApplyingCustLedgerEntry."Document No.");
        IF CheckInvoiceNoFromDetGST(ServiceCrMemoHeader."No.",OriginalInvNo) THEN
          ERROR(InvoiceNoBlankErr,ServiceCrMemoHeader."No.",OriginalInvNo);
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          CheckGSTAppliedDocumentPosted(Type::Sale,"No.",ServiceCrMemoHeader."No.");
          IF GSTManagement.IsGSTApplicable(ServiceCrMemoHeader.Structure) THEN BEGIN
            IF NOT CheckInvoiceNoFromDetGST(ServiceCrMemoHeader."No.",OriginalInvNo) THEN
              ERROR(InvoiceNoBlankErr,ServiceCrMemoHeader."No.",OriginalInvNo);
            IF CustLedgerEntryInv."Location Code" <> CustLedgerEntryCrMemo."Location Code" THEN
              ERROR(DiffLocationErr);
            IF CustLedgerEntryInv."Seller GST Reg. No." <> CustLedgerEntryCrMemo."Seller GST Reg. No." THEN
              ERROR(DiffGSTRegNoErr,CustLedgerEntryInv.FIELDCAPTION("Seller GST Reg. No."));
            InvGSTJurisdiction :=
              GetGSTJurisdiction(DocType::Sale,CustLedgerEntryInv."Document Type",CustLedgerEntryInv."Document No.",FALSE);
            CrMemoGSTJuridiction :=
              GetGSTJurisdiction(DocType::Sale,CustLedgerEntryCrMemo."Document Type",CustLedgerEntryCrMemo."Document No.",FALSE);
            IF InvGSTJurisdiction <> CrMemoGSTJuridiction THEN
              ERROR(DiffJurisdictionErr,CustLedgerEntryInv.FIELDCAPTION("GST Jurisdiction Type"));
            IF CustLedgerEntryInv."Currency Code" <> CustLedgerEntryCrMemo."Currency Code" THEN
              ERROR(DiffCurrencyCodeErr,CustLedgerEntryInv.FIELDCAPTION("Currency Code"));
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetGSTJurisdiction@1170000004(DocType@1500003 : 'Sale,Service,Purchase';DocumentType@1500002 : Option;DocumentNo@1500001 : Code[20];CurrentDocument@1500000 : Boolean) : Code[10];
    VAR
      SalesHeader@1500011 : Record 36;
      SalesLine@1500010 : Record 37;
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500008 : Record 39;
      ServiceHeader@1500007 : Record 5900;
      ServiceLine@1500006 : Record 5902;
      DetailedGSTLedgerEntry@1500005 : Record 16419;
      GSTJurisdiction@1500004 : Code[10];
    BEGIN
      IF CurrentDocument THEN
        CASE DocType OF
          DocType::Sale:
            BEGIN
              IF DocumentNo <> '' THEN
                SalesHeader.GET(DocumentType,DocumentNo);
              WITH SalesLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Type,'<>%1',Type::" ");
                IF FINDFIRST THEN
                  GSTJurisdiction := FORMAT("GST Jurisdiction Type");
                EXIT(GSTJurisdiction);
              END;
            END;
          DocType::Service:
            BEGIN
              IF DocumentNo <> '' THEN
                ServiceHeader.GET(DocumentType,DocumentNo);
              WITH ServiceLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Type,'<>%1',Type::" ");
                IF FINDFIRST THEN
                  GSTJurisdiction := FORMAT("GST Jurisdiction Type");
                EXIT(GSTJurisdiction);
              END;
            END;
          DocType::Purchase:
            BEGIN
              IF DocumentNo <> '' THEN
                PurchaseHeader.GET(DocumentType,DocumentNo);
              WITH PurchaseLine DO BEGIN
                RESET;
                SETRANGE("Document Type",DocumentType);
                SETRANGE("Document No.",DocumentNo);
                SETFILTER(Type,'<>%1',Type::" ");
                IF FINDFIRST THEN
                  GSTJurisdiction := FORMAT("GST Jurisdiction Type");
                EXIT(GSTJurisdiction);
              END;
            END;
        END;
      WITH DetailedGSTLedgerEntry DO BEGIN
        RESET;
        IF DocType = DocType::Purchase THEN
          SETRANGE("Transaction Type","Transaction Type"::Purchase)
        ELSE
          SETRANGE("Transaction Type","Transaction Type"::Sales);
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        GSTJurisdiction := FORMAT("GST Jurisdiction Type");
        EXIT(GSTJurisdiction);
      END;
    END;

    LOCAL PROCEDURE GetCurrencyCode@1500029(DocType@1500003 : 'Sale,Service,Purchase';DocumentType@1500002 : Option;DocumentNo@1500001 : Code[20];VendCustNo@1500006 : Code[20]) : Code[10];
    VAR
      CustLedgerEntry@1500004 : Record 21;
      VendorLedgerEntry@1500005 : Record 25;
    BEGIN
      CASE DocType OF
        DocType::Sale,DocType::Service:
          BEGIN
            CustLedgerEntry.SETCURRENTKEY("Customer No.","Document Type","Document No.","GST on Advance Payment");
            CustLedgerEntry.SETRANGE("Customer No.",VendCustNo);
            CustLedgerEntry.SETRANGE("Document Type",DocumentType);
            CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
            IF CustLedgerEntry.FINDFIRST THEN
              EXIT(CustLedgerEntry."Currency Code");
          END;
        DocType::Purchase:
          BEGIN
            VendorLedgerEntry.SETCURRENTKEY("Vendor No.","Document Type","Document No.","GST on Advance Payment");
            VendorLedgerEntry.SETRANGE("Vendor No.",VendCustNo);
            VendorLedgerEntry.SETRANGE("Document Type",DocumentType);
            VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
            IF VendorLedgerEntry.FINDFIRST THEN
              EXIT(VendorLedgerEntry."Currency Code");
          END;
      END;
    END;

    PROCEDURE GetLocationRegistrationNo@1500432(DocType@1500008 : 'Sale,Service,Purchase';DocumentType@1500002 : Option;DocumentNo@1500000 : Code[20];CurrentDocument@1500006 : Boolean) GSTRegistrationNo : Code[15];
    VAR
      DetailedGSTLedgerEntry@1500007 : Record 16419;
      PurchaseHeader@1500011 : Record 38;
      Location@1500013 : Record 14;
      SalesHeader@1500907 : Record 36;
      ServiceHeader@1500707 : Record 5900;
    BEGIN
      IF CurrentDocument THEN
        CASE DocType OF
          DocType::Purchase:
            BEGIN
              IF DocumentNo <> '' THEN BEGIN
                PurchaseHeader.GET(DocumentType,DocumentNo);
                Location.GET(PurchaseHeader."Location Code");
                GSTRegistrationNo := Location."GST Registration No.";
              END;
              EXIT(GSTRegistrationNo);
            END;
          DocType::Sale:
            BEGIN
              IF DocumentNo <> '' THEN BEGIN
                SalesHeader.GET(DocumentType,DocumentNo);
                Location.GET(SalesHeader."Location Code");
                GSTRegistrationNo := Location."GST Registration No.";
              END;
              EXIT(GSTRegistrationNo);
            END;
          DocType::Service:
            BEGIN
              IF DocumentNo <> '' THEN BEGIN
                ServiceHeader.GET(DocumentType,DocumentNo);
                Location.GET(ServiceHeader."Location Code");
                GSTRegistrationNo := Location."GST Registration No.";
              END;
              EXIT(GSTRegistrationNo);
            END;
        END
      ELSE
        WITH DetailedGSTLedgerEntry DO BEGIN
          SETCURRENTKEY("Transaction Type","Entry Type","Document No.","Document Line No.");
          IF DocType = DocType::Purchase THEN
            SETRANGE("Transaction Type","Transaction Type"::Purchase)
          ELSE
            SETRANGE("Transaction Type","Transaction Type"::Sales);
          SETRANGE("Entry Type","Entry Type"::"Initial Entry");
          SETRANGE("Document Type","Document Type"::Invoice);
          SETRANGE("Document No.",DocumentNo);
          FINDFIRST;
          EXIT("Location  Reg. No.");
        END;
    END;

    PROCEDURE FillGSTAppBufferHSNComponentRefund@1500020(VAR DetailedGSTLedgerEntry@1500004 : Record 16419;RefundDocumentNo@1500000 : Code[20]);
    VAR
      GSTApplicationBuffer@1500001 : ARRAY [2] OF Record 16423;
    BEGIN
      WITH GSTApplicationBuffer[1] DO BEGIN
        CLEAR(GSTApplicationBuffer[1]);
        "Transaction Type" := DetailedGSTLedgerEntry."Transaction Type";
        "Account No." := DetailedGSTLedgerEntry."Source No.";
        "Original Document Type" := GSTApplicationBuffer[1]."Original Document Type"::Payment;
        "Original Document No." := DetailedGSTLedgerEntry."Original Doc. No.";
        "HSN/SAC Code" := DetailedGSTLedgerEntry."HSN/SAC Code";
        "GST Cess" := DetailedGSTLedgerEntry.Cess;
        "GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
        "GST Base Amount" := DetailedGSTLedgerEntry."GST Base Amount";
        "GST Amount" := DetailedGSTLedgerEntry."GST Amount";
        "CLE/VLE Entry No." := DetailedGSTLedgerEntry."CLE/VLE Entry No.";
        "Current Doc. Type" := DetailedGSTLedgerEntry."Document Type";
        "GST Group Type" := DetailedGSTLedgerEntry."GST Group Type";
        "Currency Code" := DetailedGSTLedgerEntry."Currency Code";
        "Currency Factor" := DetailedGSTLedgerEntry."Currency Factor";
        "GST Rounding Precision" := DetailedGSTLedgerEntry."GST Rounding Precision";
        "GST Rounding Type" := DetailedGSTLedgerEntry."GST Rounding Type";
        "Applied Doc. Type" := "Applied Doc. Type"::Refund;
        "Applied Doc. No." := RefundDocumentNo;
        "GST Group Code" := DetailedGSTLedgerEntry."GST Group Code";
      END;
      GSTApplicationBuffer[2] := GSTApplicationBuffer[1];
      IF GSTApplicationBuffer[2].FIND THEN BEGIN
        GSTApplicationBuffer[2]."GST Base Amount" += GSTApplicationBuffer[1]."GST Base Amount";
        GSTApplicationBuffer[2]."GST Amount" += GSTApplicationBuffer[1]."GST Amount";
        GSTApplicationBuffer[2].MODIFY(TRUE);
      END ELSE
        GSTApplicationBuffer[2].INSERT(TRUE);
    END;

    PROCEDURE DeleteRefundAppBuffer@1500022(TransactionType@1500003 : 'Purchase,Sale';AccountNo@1500002 : Code[20];PaymentDocumentNo@1500005 : Code[20];RefundDocumentNo@1500000 : Code[20];HSNCode@1500004 : Code[8];GSTComponent@1500006 : Code[10];GSTGroup@1500007 : Code[20]);
    VAR
      GSTApplicationBuffer@1500001 : Record 16423;
    BEGIN
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type","Original Document Type"::Payment);
        SETRANGE("Original Document No.",PaymentDocumentNo);
        SETRANGE("GST Group Code",GSTGroup);
        SETRANGE("HSN/SAC Code",HSNCode);
        IF GSTComponent <> '' THEN
          SETRANGE("GST Component Code",GSTComponent);
        SETRANGE("Applied Doc. Type","Applied Doc. Type"::Refund);
        SETRANGE("Applied Doc. No.",RefundDocumentNo);
        DELETEALL(TRUE);
      END;
    END;

    PROCEDURE GetRefundAmount@1500023(TransactionType@1500009 : 'Purchase,Sale';PaymentDocumentNo@1500007 : Code[20];AccountNo@1500006 : Code[20];HSNCode@1500005 : Code[8];GSTComponent@1500001 : Code[10];RefundDocumentNo@1500000 : Code[20];VAR GSTBaseAmount@1500003 : Decimal;VAR GSTAmount@1500002 : Decimal;GSTGroup@1500004 : Code[20]);
    VAR
      GSTApplicationBuffer@1500010 : Record 16423;
    BEGIN
      CLEAR(GSTBaseAmount);
      CLEAR(GSTAmount);
      WITH GSTApplicationBuffer DO BEGIN
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Account No.",AccountNo);
        SETRANGE("Original Document Type","Original Document Type"::Payment);
        SETRANGE("Original Document No.",PaymentDocumentNo);
        SETRANGE("GST Group Code",GSTGroup);
        SETRANGE("HSN/SAC Code",HSNCode);
        SETRANGE("GST Component Code",GSTComponent);
        SETRANGE("Applied Doc. Type","Applied Doc. Type"::Refund);
        SETRANGE("Applied Doc. No.",RefundDocumentNo);
        IF FINDFIRST THEN BEGIN
          GSTBaseAmount := "GST Base Amount";
          GSTAmount := "GST Amount";
        END;
      END;
    END;

    LOCAL PROCEDURE CheckInvoiceNoFromDetGST@1170000000(CrMemoDocNo@1170000000 : Code[20];VAR InvDocNo@1170000002 : Code[20]) : Boolean;
    VAR
      DetailedGSTLedgerEntry@1170000001 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE("Document Type","Document Type"::"Credit Memo");
        SETRANGE("Document No.",CrMemoDocNo);
        IF FINDFIRST THEN BEGIN
          InvDocNo := "Original Invoice No.";
          IF ("Original Invoice No." <> '') AND ("Original Invoice Date" <> 0D) THEN
            EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    END.
  }
}

