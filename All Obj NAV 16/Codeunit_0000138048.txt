OBJECT Codeunit 138048 SMB Office Pages
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryMarketing@1001 : Codeunit 131900;
      LibrarySales@1002 : Codeunit 130509;
      LibraryPurchase@1003 : Codeunit 130512;
      Assert@1005 : Codeunit 130000;
      TestEmail@1004 : Text[80];
      BusRelCodeForVendors@1007 : Code[10];
      BusRelCodeForCustomers@1008 : Code[10];
      EntityNo@1006 : Code[20];
      IsInitialized@1000 : Boolean;

    [Test]
    [HandlerFunctions(ConfirmNoHandler)]
    PROCEDURE MailEngineAsksToCreateNewContact@3();
    VAR
      Contact@1001 : Record 5050;
      OutlookMailEngine@1000 : TestPage 1600;
    BEGIN
      Initialize;
      TestEmail := STRSUBSTNO('%1@%2',CREATEGUID,'example.com');
      Contact.SETFILTER("E-Mail",'=%1',TestEmail);
      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine",Contact);
      OutlookMailEngine.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmYesHandler,ContactPageHandler)]
    PROCEDURE MailEngineAsksToCreateNewContactSayYes@1();
    VAR
      Contact@1001 : Record 5050;
      OutlookMailEngine@1000 : TestPage 1600;
    BEGIN
      Initialize;
      TestEmail := STRSUBSTNO('%1@%2',CREATEGUID,'example.com');
      Contact.SETFILTER("E-Mail",'=%1',TestEmail);
      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine",Contact);
      OutlookMailEngine.CLOSE;
    END;

    [Test]
    [HandlerFunctions(SingleCustomerEngineHandler)]
    PROCEDURE MailEngineRedirectsToCustomerPageIfOneCustomer@4();
    VAR
      Contact@1001 : Record 5050;
      OutlookMailEngine@1000 : TestPage 1600;
    BEGIN
      Initialize;
      TestEmail := STRSUBSTNO('%1@%2',CREATEGUID,'example.com');
      CreateContactFromCustomer(TestEmail);

      Contact.INIT;
      Contact.SETFILTER("E-Mail",'=%1',TestEmail);

      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine",Contact);

      Contact.SETRANGE("E-Mail",TestEmail);
      Contact.DELETEALL;

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Customers in Marketing Setup.
      ChangeBusinessRelationCodeForCustomers(BusRelCodeForCustomers);
    END;

    [Test]
    [HandlerFunctions(MailEngineListPageHandler)]
    PROCEDURE MailEngineShowsListIfMultipleCustomers@18();
    VAR
      Contact@1001 : Record 5050;
      OutlookMailEngine@1000 : TestPage 1600;
    BEGIN
      Initialize;
      TestEmail := STRSUBSTNO('%1@%2',CREATEGUID,'example.com');
      CreateContactFromCustomer(TestEmail);
      CreateContactFromCustomer(TestEmail);

      Contact.INIT;
      Contact.SETFILTER("E-Mail",'=%1',TestEmail);

      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine",Contact);

      Contact.SETRANGE("E-Mail",TestEmail);
      Contact.DELETEALL;

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Customers in Marketing Setup.
      ChangeBusinessRelationCodeForCustomers(BusRelCodeForCustomers);
      OutlookMailEngine.CLOSE;
    END;

    [Test]
    [HandlerFunctions(SingleVendorEngineHandler)]
    PROCEDURE MailEngineRedirectsToVendorPageIfOneVendor@5();
    VAR
      Contact@1003 : Record 5050;
      OutlookMailEngine@1004 : TestPage 1600;
      TestEmail@1000 : Text[80];
    BEGIN
      Initialize;
      TestEmail := STRSUBSTNO('%1@%2',CREATEGUID,'example.com');
      CreateContactFromVendor(TestEmail);

      Contact.SETFILTER("E-Mail",'=%1',TestEmail);

      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine",Contact);

      Contact.SETRANGE("E-Mail",TestEmail);
      Contact.DELETEALL;

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Vendors in Marketing Setup.
      ChangeBusinessRelationCodeForVendors(BusRelCodeForVendors);
      OutlookMailEngine.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ContactPageHandler)]
    PROCEDURE MailEngineRedirectsToContactPageIfNoBusinessEntities@6();
    VAR
      Contact@1001 : Record 5050;
      OutlookMailEngine@1002 : TestPage 1600;
    BEGIN
      Initialize;
      TestEmail := STRSUBSTNO('%1@%2',CREATEGUID,'example.com');
      LibraryMarketing.CreateContact(Contact);
      EntityNo := Contact."No.";
      Contact."E-Mail" := TestEmail;
      Contact.MODIFY(TRUE);

      CLEAR(Contact);
      Contact.SETFILTER("E-Mail",'=%1',TestEmail);
      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine",Contact);
    END;

    [Test]
    PROCEDURE MailEngineClosesIfNoFilters@106();
    VAR
      OutlookMailEngine@1000 : TestPage 1600;
    BEGIN
      Initialize;
      OutlookMailEngine.TRAP;
      PAGE.RUN(PAGE::"Outlook Mail Engine");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmNoHandler@11(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmYesHandler@2(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE SingleCustomerEngineHandler@30(VAR MiniCustomerCard@1000 : TestPage 1300);
    BEGIN
      Assert.AreEqual(MiniCustomerCard."No.".VALUE,EntityNo,'Unexpected customer opened on the mini customer card.');
      MiniCustomerCard.CLOSE;
    END;

    [PageHandler]
    PROCEDURE SingleVendorEngineHandler@94(VAR MiniVendorCard@1000 : TestPage 1330);
    BEGIN
      Assert.AreEqual(MiniVendorCard."No.".VALUE,EntityNo,'Unexpected vendor opened on the mini customer card.');
      MiniVendorCard.CLOSE;
    END;

    [PageHandler]
    PROCEDURE ContactPageHandler@102(VAR ContactCard@1000 : TestPage 5050);
    VAR
      Contact@1001 : Record 5050;
      ContactNo@1002 : Code[20];
    BEGIN
      ContactNo := ContactCard."No.".VALUE;

      IF EntityNo = '' THEN BEGIN
        Contact.SETRANGE("E-Mail",TestEmail);
        Contact.FINDFIRST;
        EntityNo := Contact."No.";
        Contact.DELETE;
      END;

      Assert.AreEqual(ContactNo,EntityNo,'Unexpected contact found.');
      ContactCard.CLOSE;
    END;

    [PageHandler]
    PROCEDURE MailEngineListPageHandler@23(VAR OutlookMailEngine@1000 : TestPage 1600);
    BEGIN
      OutlookMailEngine.FIRST;
      Assert.AreEqual(OutlookMailEngine."E-Mail".VALUE,TestEmail,'Unexpected contact e-mail.');
      OutlookMailEngine.NEXT;
      Assert.AreEqual(OutlookMailEngine."E-Mail".VALUE,TestEmail,'Unexpected contact e-mail.');
    END;

    LOCAL PROCEDURE CreateContactFromCustomer@39(Email@1002 : Text[80]);
    VAR
      Customer@1001 : Record 18;
      Contact@1007 : Record 5050;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromCustomers@1003 : Report 5195;
    BEGIN
      // Pirated from COD136201

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Customers of Marketing Setup. Create a
      // new Customer.
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForCustomers := ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      Customer.INIT;
      Customer."E-Mail" := Email;
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Create Contact from Customer by running the report Create Conts. from Customers.
      Customer.SETRANGE("No.",Customer."No.");
      EntityNo := Customer."No.";
      CreateContsFromCustomers.USEREQUESTPAGE(FALSE);
      CreateContsFromCustomers.SETTABLEVIEW(Customer);
      CreateContsFromCustomers.RUN;

      // 3. Verify: Check that the Contact has been created from the Customer.
      ContactBusinessRelation.SETRANGE("Business Relation Code",BusinessRelation.Code);
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      ContactBusinessRelation.FINDFIRST;
      Contact.GET(ContactBusinessRelation."Contact No.");
      Contact."E-Mail" := Email;
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactFromVendor@41(Email@1002 : Text[80]);
    VAR
      Vendor@1001 : Record 23;
      Contact@1007 : Record 5050;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromVendors@1003 : Report 5194;
    BEGIN
      // Pirated from COD136201

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Vendors of Marketing Setup. Create a
      // new Vendor.
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForVendors := ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryPurchase.CreateVendor(Vendor);

      // 2. Exercise: Create Contact from Vendor by running the report Create Conts. from Vendors.
      Vendor.SETRANGE("No.",Vendor."No.");
      EntityNo := Vendor."No.";
      CreateContsFromVendors.USEREQUESTPAGE(FALSE);
      CreateContsFromVendors.SETTABLEVIEW(Vendor);
      CreateContsFromVendors.RUN;

      // 3. Verify: Check that the Contact has been created from the Vendor.
      ContactBusinessRelation.SETRANGE("Business Relation Code",BusinessRelation.Code);
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.SETRANGE("No.",Vendor."No.");
      ContactBusinessRelation.FINDFIRST;
      Contact.GET(ContactBusinessRelation."Contact No.");
      Contact."E-Mail" := Email;
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeBusinessRelationCodeForCustomers@25(BusRelCodeForCustomers@1002 : Code[10]) OriginalBusRelCodeForCustomers : Code[10];
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      OriginalBusRelCodeForCustomers := MarketingSetup."Bus. Rel. Code for Customers";
      MarketingSetup.VALIDATE("Bus. Rel. Code for Customers",BusRelCodeForCustomers);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeBusinessRelationCodeForVendors@31(BusRelCodeForVendors@1002 : Code[10]) OriginalBusRelCodeForVendors : Code[10];
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      OriginalBusRelCodeForVendors := MarketingSetup."Bus. Rel. Code for Vendors";
      MarketingSetup.VALIDATE("Bus. Rel. Code for Vendors",BusRelCodeForVendors);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      SalesSetup@1002 : Record 311;
      MarketingSetup@1004 : Record 5079;
      SalespersonPurchaser@1005 : Record 13;
      LibraryVariableStorage@1001 : Codeunit 131004;
      LibraryUtility@1003 : Codeunit 131000;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      SalesSetup.GET;
      SalesSetup."Stockout Warning" := FALSE;
      IF SalesSetup."Blanket Order Nos." = '' THEN
        SalesSetup.VALIDATE("Blanket Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF SalesSetup."Return Order Nos." = '' THEN
        SalesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF SalesSetup."Order Nos." = '' THEN
        SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      IF SalesSetup."Quote Nos." = '' THEN
        SalesSetup.VALIDATE("Quote Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY;

      MarketingSetup.GET;
      IF MarketingSetup."Contact Nos." = '' THEN
        MarketingSetup.VALIDATE("Contact Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      MarketingSetup.MODIFY;

      LibrarySales.CreateSalesperson(SalespersonPurchaser);

      IsInitialized := TRUE;
      COMMIT;
    END;

    BEGIN
    {
      // [Feature] [Outlook Add-in] [SMB]
    }
    END.
  }
}

