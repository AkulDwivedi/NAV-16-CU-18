OBJECT Codeunit 136354 UT T Job WIP Method
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryRandom@1003 : Codeunit 130440;
      Text003Txt@1004 : TextConst '@@@=%1 - Caption of field "Recognized Costs", %2 - Caption of value "Recognized Costs"::"Usage (Total Cost)";ENU=You cannot modify this field when %1 is %2.';
      LibraryUtility@1001 : Codeunit 131000;

    [Test]
    PROCEDURE TestInitialization@3();
    VAR
      JobWIPMethod@1002 : Record 1006;
      LibraryJob@1000 : Codeunit 131920;
      Method@1001 : 'Completed Contract,Cost of Sales,Cost Value,POC,Sales Value';
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that Job WIP Method is initialized correctly.
        LibraryJob.GetJobWIPMethod(JobWIPMethod,Method::"Completed Contract");
        IF COUNT <> 1 THEN
          Assert.Fail('Job WIP Method Completed Contract did not initalize correctly');
        LibraryJob.GetJobWIPMethod(JobWIPMethod,Method::"Cost of Sales");
        IF COUNT <> 1 THEN
          Assert.Fail('Job WIP Method Cost of Sales did not initalize correctly');
        LibraryJob.GetJobWIPMethod(JobWIPMethod,Method::"Cost Value");
        IF COUNT <> 1 THEN
          Assert.Fail('Job WIP Method Cost Value did not initalize correctly');
        LibraryJob.GetJobWIPMethod(JobWIPMethod,Method::POC);
        IF COUNT <> 1 THEN
          Assert.Fail('Job WIP Method POC Contract did not initalize correctly');
        LibraryJob.GetJobWIPMethod(JobWIPMethod,Method::"Sales Value");
        IF COUNT <> 1 THEN
          Assert.Fail('Job WIP Method Sales Value did not initalize correctly');
      END;
    END;

    [Test]
    PROCEDURE TestDeletion@5();
    VAR
      JobWIPMethod@1002 : Record 1006;
      JobWIPEntry@1000 : Record 1004;
      JobsSetup@1001 : Record 315;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that system defined entries can't be deleted.
        SETRANGE("System Defined",TRUE);
        ASSERTERROR DELETEALL(TRUE);

        // Verify that user defined entries can be deleted.
        SETRANGE("System Defined",FALSE);
        CreateUserDefinedEntry(JobWIPMethod);
        Assert.IsTrue(DELETE(TRUE),'User defined Job WIP Method could not be deleted.');

        // Verify that entries with referenced WIP entries can't be deleted.
        CreateUserDefinedEntry(JobWIPMethod);
        JobWIPEntry.INIT;
        JobWIPEntry."WIP Method Used" := Code;
        JobWIPEntry.INSERT;
        ASSERTERROR DELETE(TRUE);

        // Verify that the default WIP Method can't be deleted.
        JobsSetup.GET;
        CreateUserDefinedEntry(JobWIPMethod);
        JobsSetup.VALIDATE("Default WIP Method",Code);
        JobsSetup.MODIFY;
        ASSERTERROR DELETE(TRUE);
      END;
    END;

    [Test]
    PROCEDURE TestFieldSystemDefined@4();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that system defined entries can't be modified.
        SETRANGE("System Defined",TRUE);
        FINDFIRST;
        ASSERTERROR VALIDATE(Code,'Test');
        ASSERTERROR VALIDATE(Description,'Test');
        ASSERTERROR VALIDATE("WIP Cost",NOT "WIP Cost");
        ASSERTERROR VALIDATE("WIP Sales",NOT "WIP Sales");
        ASSERTERROR VALIDATE("Recognized Costs","Recognized Costs"::"At Completion");
        ASSERTERROR VALIDATE("Recognized Sales","Recognized Sales"::"At Completion");
      END;
    END;

    [Test]
    PROCEDURE TestFieldValid@12();
    VAR
      JobWIPMethod@1001 : Record 1006;
      JobsSetup@1000 : Record 315;
    BEGIN
      // Verify that "Valid" from the default WIP Method can't be unchecked.
      JobsSetup.GET;
      CreateUserDefinedEntry(JobWIPMethod);
      JobsSetup.VALIDATE("Default WIP Method",JobWIPMethod.Code);
      JobsSetup.MODIFY;
      ASSERTERROR JobWIPMethod.VALIDATE(Valid,FALSE);
    END;

    [Test]
    PROCEDURE TestFieldWIPCost@6();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that you can't uncheck WIP Costs, unless "Recognized Costs" is "Usage (Total Cost)"
        CreateUserDefinedEntry(JobWIPMethod);
        SETRANGE("System Defined",FALSE);
        SETFILTER("Recognized Costs",'<> %1',"Recognized Costs"::"Usage (Total Cost)");
        IF FINDFIRST THEN
          ASSERTERROR VALIDATE("WIP Cost",FALSE);

        // Verify that you can uncheck WIP Costs, if "Recognized Costs" is "Usage (Total Cost)"
        RESET;
        CreateUserDefinedEntry(JobWIPMethod);
        SETRANGE("System Defined",FALSE);
        FINDFIRST;
        VALIDATE("Recognized Costs","Recognized Costs"::"Usage (Total Cost)");
        VALIDATE("WIP Cost",FALSE);
      END;
    END;

    [Test]
    PROCEDURE TestFieldWIPSales@7();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that you can't uncheck WIP Sales, unless "Recognized Sales" is "Contract (Invoiced Price)"
        CreateUserDefinedEntry(JobWIPMethod);
        SETRANGE("System Defined",FALSE);
        SETFILTER("Recognized Sales",'<> %1',"Recognized Sales"::"Contract (Invoiced Price)");
        IF FINDFIRST THEN
          ASSERTERROR VALIDATE("WIP Sales",FALSE);

        // Verify that you can uncheck WIP Sales, if "Recognized Sales" is "Contract (Invoiced Price)"
        RESET;
        CreateUserDefinedEntry(JobWIPMethod);
        SETRANGE("System Defined",FALSE);
        FINDFIRST;
        VALIDATE("Recognized Sales","Recognized Sales"::"Contract (Invoiced Price)");
        VALIDATE("WIP Sales",FALSE);
      END;
    END;

    [Test]
    PROCEDURE TestFieldRecognCosts@10();
    VAR
      JobWIPMethod@1001 : Record 1006;
      JobWIPEntry@1000 : Record 1004;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that WIP Cost is checked, if "Recognized Costs" anything else than "Usage (Total Cost)"
        CreateUserDefinedEntry(JobWIPMethod);
        VALIDATE("Recognized Costs","Recognized Costs"::"Usage (Total Cost)");
        VALIDATE("WIP Cost",FALSE);
        VALIDATE("Recognized Costs","Recognized Costs"::"Cost of Sales");
        Assert.IsTrue("WIP Cost",'WIP Cost is not true after Recognized Costs is set to something else than Usage (Total Cost).');

        // Verify that "Recognized Costs" from the default WIP Method can't be unchecked.
        CreateUserDefinedEntry(JobWIPMethod);
        JobWIPEntry.INIT;
        JobWIPEntry."WIP Method Used" := Code;
        JobWIPEntry.INSERT;
        ASSERTERROR VALIDATE("Recognized Costs",LibraryRandom.RandInt(4));
      END;
    END;

    [Test]
    PROCEDURE TestFieldRecognSales@8();
    VAR
      JobWIPMethod@1001 : Record 1006;
      JobWIPEntry@1000 : Record 1004;
    BEGIN
      WITH JobWIPMethod DO BEGIN
        // Verify that WIP Sales is checked, if "Recognized Sales" anything else than "Contract (Invoiced Price)"
        CreateUserDefinedEntry(JobWIPMethod);
        VALIDATE("Recognized Sales","Recognized Sales"::"Contract (Invoiced Price)");
        VALIDATE("WIP Sales",FALSE);
        VALIDATE("Recognized Sales","Recognized Sales"::"Sales Value");
        Assert.IsTrue(
          "WIP Sales",
          'WIP Sales is not true after Recognized Sales is set to something else than Contract (Invoiced Price).');

        // Verify that "Recognized Sales" from the default WIP Method can't be unchecked.
        CreateUserDefinedEntry(JobWIPMethod);
        JobWIPEntry.INIT;
        JobWIPEntry."WIP Method Used" := Code;
        JobWIPEntry.INSERT;
        ASSERTERROR VALIDATE("Recognized Sales",LibraryRandom.RandInt(4));
      END;
    END;

    [Test]
    PROCEDURE TestCreateUserDefinedEntry@9();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      CreateUserDefinedEntry(JobWIPMethod);
      Assert.IsFalse(JobWIPMethod."System Defined",'User Defined Entry has System Defined flag set.');
    END;

    [Test]
    PROCEDURE UTErrorOnValidateWIPCostJobWIPMethod@1();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376881] Error must be thrown on validating "Job WIP Method"."WIP Cost" when "Recognized Cost" is not equal to "Usage (Total Cost)"

      // [GIVEN] Record "Job WIP Method" with "Recognized Cost" <> "Usage (Total Cost)"
      JobWIPMethod.INIT;
      JobWIPMethod."System Defined" := FALSE;
      JobWIPMethod."Recognized Costs" := LibraryRandom.RandInt(4);

      // [WHEN] Validate "WIP Cost"
      ASSERTERROR JobWIPMethod.VALIDATE("WIP Cost",TRUE);

      // [THEN] Error "You cannot modify this field..." must be thrown
      Assert.ExpectedError(STRSUBSTNO(Text003Txt,JobWIPMethod.FIELDCAPTION("Recognized Costs"),JobWIPMethod."Recognized Costs"));
      Assert.ExpectedErrorCode('Dialog');
    END;

    LOCAL PROCEDURE CreateUserDefinedEntry@11(VAR JobWIPMethod@1001 : Record 1006);
    BEGIN
      WITH JobWIPMethod DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Job WIP Method");
        Description := 'WIPTEST';
        "WIP Cost" := TRUE;
        "WIP Sales" := TRUE;
        "Recognized Costs" := LibraryRandom.RandInt(4);
        "Recognized Sales" := LibraryRandom.RandInt(5);
        Valid := TRUE;
        INSERT(TRUE);
      END;
    END;

    BEGIN
    {
      // [FEATURE] [WIP Method] [Job]
      This unit test tests all fields added / modified during implementation of feature 92860 - "Jobs and WIP Compliance".

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');
    }
    END.
  }
}

