OBJECT Codeunit 136141 Service Order Release validate
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryService@1004 : Codeunit 131902;
      LibrarySales@1000 : Codeunit 130509;
      LibraryWarehouse@1011 : Codeunit 132204;
      LibraryInventory@1001 : Codeunit 132201;
      isInitialized@1002 : Boolean;

    [Test]
    PROCEDURE AssertErrorPostWarehouseShipmenReopenedOrder@25();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      WhseShptHeader@1000 : Record 7320;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServHeader);
      LibraryService.ReopenServiceDocument(ServHeader);
      WhseShptHeader.GET(
        LibraryWarehouse.FindWhseShipmentNoBySourceDoc(DATABASE::"Service Line",ServHeader."Document Type",ServHeader."No."));
      // to be done later as part of next deliverable with 'pick'
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WhseShptHeader,FALSE);
    END;

    [Test]
    [HandlerFunctions(HandleStrMenu)]
    PROCEDURE AssertErrorPostAfterRelease@14();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServPostYesNo@1000 : Codeunit 5981;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServPostYesNo.PostDocumentWithLines(ServHeader,ServiceLine);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineGeneralProductPostingGroup@26();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServiceHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE("Gen. Prod. Posting Group",CreateNewGenPPGroup);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineJobRemainQuantity@31();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE("Job Remaining Qty.",(ServiceLine."Job Remaining Qty." - 1.0));
      ASSERTERROR ServiceLine.VALIDATE("Job Remaining Qty.",(ServiceLine."Job Remaining Qty." + 1.0));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineAllowInvoiceDiscount@19();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE("Allow Invoice Disc.",(NOT ServiceLine."Allow Invoice Disc."));
    END;

    [Test]
    [HandlerFunctions(HandleServiceLinePageLineDiscountPct)]
    PROCEDURE AssertErrorServiceLineLineDiscountPercent@13();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceOrderTP@1004 : TestPage 5900;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ServiceOrderTP.OPENNEW;
      ServiceOrderTP.GOTORECORD(ServHeader);
      ServiceOrderTP.ServItemLines."Service Lines".INVOKE;
      ServiceOrderTP.CLOSE;
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineLineDiscountAmount@16();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE("Line Discount Amount",(10 + ServiceLine."Line Discount Amount"));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineLocation@1();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
      Location@1000 : Record 14;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServiceHeader,ServiceLine,ServiceItemLine);
      Location.SETFILTER(Code,'<>%1',ServiceLine."Location Code");
      Location.FINDFIRST;
      ASSERTERROR ServiceLine.VALIDATE("Location Code",Location.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineLocationWarehouseShipment@30();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1005 : Record 5902;
      Location@1000 : Record 14;
    BEGIN
      Initialize;
      Location.SETFILTER(Code,'<>%1',ServiceLine."Location Code");
      IF Location.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Location Code",Location.Code);
      CreateWhsShpReopenOrder(ServiceHeader,ServiceItemLine,ServiceLine);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineNeedByDate@29();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      NeedDate@1000 : Date;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      NeedDate := ServiceLine."Needed by Date";
      IF NeedDate <> 0D THEN
        ASSERTERROR
          ServiceLine.VALIDATE("Needed by Date",CALCDATE('<+6M>',NeedDate))
      ELSE
        ASSERTERROR ServiceLine.VALIDATE("Needed by Date",WORKDATE);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineNo@5();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServiceHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE("No.",LibraryInventory.CreateItemNo);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLinenoWarehouseShipment@38();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1005 : Record 5902;
    BEGIN
      Initialize;
      CreateWhsShpReopenOrder(ServiceHeader,ServiceItemLine,ServiceLine);
      ASSERTERROR ServiceLine.VALIDATE("No.",LibraryInventory.CreateItemNo);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLinePlanDeliveryDate@22();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      PlanDate@1000 : Date;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      PlanDate := ServiceLine."Planned Delivery Date";
      IF PlanDate <> 0D THEN
        ASSERTERROR
          ServiceLine.VALIDATE("Planned Delivery Date",CALCDATE('<+6M>',PlanDate))
      ELSE
        ASSERTERROR ServiceLine.VALIDATE("Planned Delivery Date",WORKDATE);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineQuantity@9();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE(Quantity,(ServiceLine.Quantity + 1.0));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineQuantityWarehouseShipment@42();
    VAR
      ServHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1005 : Record 5902;
    BEGIN
      Initialize;
      CreateWhsShpReopenOrder(ServHeader,ServiceItemLine,ServiceLine);
      ASSERTERROR ServiceLine.VALIDATE(Quantity,(ServiceLine.Quantity + 1.0));
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineQuantityInvoice@7();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ASSERTERROR ServiceLine.VALIDATE("Qty. to Invoice",(ServiceLine."Qty. to Invoice" + 1.0));
    END;

    [Test]
    [HandlerFunctions(HandleServiceLinePageQtyToShip)]
    PROCEDURE AssertErrorServiceLineQuantityShip@11();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceOrderTP@1000 : TestPage 5900;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      ServiceOrderTP.OPENNEW;
      ServiceOrderTP.GOTORECORD(ServHeader);
      ServiceOrderTP.ServItemLines."Service Lines".INVOKE;
      ServiceOrderTP.CLOSE;
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineType@3();
    VAR
      ServHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      COMMIT;
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Resource);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Cost);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::"G/L Account");
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineTypeWarehouseShipment@40();
    VAR
      ServHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1005 : Record 5902;
    BEGIN
      Initialize;
      CreateWhsShpReopenOrder(ServHeader,ServiceItemLine,ServiceLine);
      COMMIT;
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Resource);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::Cost);
      ASSERTERROR ServiceLine.VALIDATE(Type,ServiceLine.Type::"G/L Account");
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineUOMCode@17();
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceLine@1004 : Record 5902;
      ItemUOM@1001 : Record 5404;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServiceHeader,ServiceLine,ServiceItemLine);
      ItemUOM.SETRANGE("Item No.",ServiceLine."No.");
      ItemUOM.SETFILTER(Code,'<>%1',ServiceLine."Unit of Measure Code");
      IF ItemUOM.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Unit of Measure Code",ItemUOM.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineCodeWarehouseShipment@46();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1005 : Record 5902;
      ItemUOM@1002 : Record 5404;
    BEGIN
      Initialize;
      CreateWhsShpReopenOrder(ServiceHeader,ServiceItemLine,ServiceLine);
      ItemUOM.SETRANGE("Item No.",ServiceLine."No.");
      ItemUOM.SETFILTER(Code,'<>%1',ServiceLine."Unit of Measure Code");
      IF ItemUOM.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Unit of Measure Code",ItemUOM.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineVariantCode@12();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      ItemVariant@1001 : Record 5401;
    BEGIN
      Initialize;
      CreateAndReleaseServOrder(ServiceHeader,ServiceLine,ServiceItemLine);
      ItemVariant.SETRANGE("Item No.",ServiceLine."No.");
      ItemVariant.SETFILTER(Code,'<>%1',ServiceLine."Variant Code");
      IF ItemVariant.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Variant Code",ItemVariant.Code);
    END;

    [Test]
    PROCEDURE AssertErrorServiceLineVariantCodeWarehouseShipment@44();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1005 : Record 5902;
      ItemVariant@1000 : Record 5401;
    BEGIN
      Initialize;
      CreateWhsShpReopenOrder(ServiceHeader,ServiceItemLine,ServiceLine);
      ItemVariant.SETRANGE("Item No.",ServiceLine."No.");
      ItemVariant.SETFILTER(Code,'<>%1',ServiceLine."Variant Code");
      IF ItemVariant.FINDFIRST THEN
        ASSERTERROR ServiceLine.VALIDATE("Variant Code",ItemVariant.Code);
    END;

    [Test]
    PROCEDURE AssertReopenServiceOrderWarehouseShipment@49();
    VAR
      ServHeader@1002 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1000 : Record 5902;
      ServiceLine2@1003 : Record 5902;
    BEGIN
      Initialize;
      CreateServiceOrder(ServHeader,ServiceLine,ServiceItemLine);
      ServiceLine2.COPY(ServiceLine);
      LibraryService.ReleaseServiceDocument(ServHeader);
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServHeader);
      LibraryService.ReopenServiceDocument(ServHeader);
      Assert.AreEqual(ServHeader."Release Status"::Open,ServHeader."Release Status",'Verify Release Status');
      Assert.AreEqual(ServHeader.Status::Pending,ServHeader.Status,'Verify Status of Service Header');
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceOrder@52(VAR ServiceHeader@1002 : Record 5900;VAR ServiceLine@1001 : Record 5902;VAR ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo,LibraryInventory.CreateItemNo);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
    END;

    LOCAL PROCEDURE CreateAndReleaseServOrder@4(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1004 : Record 5902;VAR ServiceItemLine@1003 : Record 5901);
    BEGIN
      CreateServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateWhsShpReopenOrder@33(VAR ServHeader@1004 : Record 5900;VAR ServiceItemLine@1003 : Record 5901;VAR ServiceLine@1002 : Record 5902);
    BEGIN
      CreateAndReleaseServOrder(ServHeader,ServiceLine,ServiceItemLine);
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServHeader);
      LibraryService.ReopenServiceDocument(ServHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateNewGenPPGroup@6() : Code[10];
    VAR
      GenProductPostingGroup@1000 : Record 251;
      VatProductPostingGroup@1001 : Record 324;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      VatProductPostingGroup.FINDFIRST;
      GenProductPostingGroup."Def. VAT Prod. Posting Group" := VatProductPostingGroup.Code;
      GenProductPostingGroup."Auto Insert Default" := TRUE;
      GenProductPostingGroup.MODIFY(TRUE);
      EXIT(GenProductPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateServiceItem@101(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@94(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItem@1001 : Record 5940);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceLine.VALIDATE("Service Item No.",ServiceItem."No.");
      // Use Random For Quantity and Quantity to Consume.
      ServiceLine.VALIDATE(Quantity,RANDOM(10));
      ServiceLine.VALIDATE("Location Code",GetWhiteLocation);
      ServiceLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE GetWhiteLocation@48() : Code[10];
    VAR
      LocationWhite@1000 : Record 14;
    BEGIN
      LocationWhite.SETRANGE("Directed Put-away and Pick",TRUE);
      LocationWhite.FINDFIRST;
      EXIT(LocationWhite.Code);
    END;

    [StrMenuHandler]
    PROCEDURE HandleStrMenu@15(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      // Select the ship option
      Choice := 1;
    END;

    [ModalPageHandler]
    PROCEDURE HandleServiceLinePageLineDiscountPct@23(VAR ServiceLinesPage@1000 : TestPage 5905);
    VAR
      Disc@1001 : Decimal;
    BEGIN
      IF ServiceLinesPage."Line Discount %".VALUE = '' THEN
        Disc := 0
      ELSE
        EVALUATE(Disc,ServiceLinesPage."Line Discount %".VALUE);
      ASSERTERROR ServiceLinesPage."Line Discount %".SETVALUE(99.55 - Disc);
    END;

    [ModalPageHandler]
    PROCEDURE HandleServiceLinePageQtyToShip@39(VAR ServiceLinesPage@1000 : TestPage 5905);
    VAR
      QtyToShip@1001 : Decimal;
    BEGIN
      IF ServiceLinesPage."Qty. to Ship".VALUE = '' THEN
        QtyToShip := 0
      ELSE
        EVALUATE(QtyToShip,ServiceLinesPage."Qty. to Ship".VALUE);
      ASSERTERROR ServiceLinesPage."Qty. to Ship".SETVALUE(1 + QtyToShip);
    END;

    LOCAL PROCEDURE Initialize@20();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,GetWhiteLocation,FALSE);
      COMMIT;
      isInitialized := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Order] [Status] [Service]
      Test for validating editable/noneditable fields and actions(blocked/unblocked) in a service order
      page which is already released to ship. Use white location for all tests.

      Test criteria:
      1. Editing content of service header fields should either throw an error or blocked by editable property
         of page controls. This is for blocked fields of service header.
      2. Editing content of service header fields should be successful. This is for allowed fields of service
         header.
      3. Actions on the page should either be disabled by page control or they should throw error on running
         those actions. This is for blocked actions on service order page.
      4. Actions on the page should be able to run successfully. This is for allowed actions on service order page.
      5. Test criteria 1 for service line fields.
      6. Test criteria 2 for service line fields.
      7. Test criteria 3 for line actions on service line page.
      8. Test criteria 4 for line actions on service line page.

      Test Procedures-
      1. Create a service order and run action 'release to ship'.
      2. Test criteria 1 to 8 on released service order.
      3. Create a service invoice and run action 'release to ship'.

      Test results:
    }
    END.
  }
}

