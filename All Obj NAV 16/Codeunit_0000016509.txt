OBJECT Codeunit 16509 Post Capital WIP
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    TableNo=16597;
    Permissions=TableData 169=rm;
    OnRun=BEGIN
            IF NOT CONFIRM(Text16500) THEN
              EXIT;
            CLEARALL;
            CapitalizeCWIPHeader := Rec;
            JobsSetup.GET;
            JobsSetup.TESTFIELD("Capitalize CWIP Nos.");
            JobsSetup.TESTFIELD("Posted Capitalize CWIP Nos.");
            WITH CapitalizeCWIPHeader DO BEGIN
              TESTFIELD("Job No.");
              TESTFIELD("Posting Date");
              TESTFIELD("Depreciation Book");
              DepreciationBook.GET("Depreciation Book");
              DepreciationBook.TESTFIELD("FA Book Type",DepreciationBook."FA Book Type"::" ");
              DepreciationBook.TESTFIELD("G/L Integration - Acq. Cost",TRUE);
              FillFADetails("No.","Job No.");
              CheckCapitalizeCWIPLines;
              CheckFADepreciationBook;
              IF GUIALLOWED THEN
                Window.OPEN(Text16507 + Text16501);
              InitPstdCapCWIPHeader;
              InitCWIPBuffer;
              InitGenJnlLine;
              UpdateJobLedgerEntry;
              InitPstdCapCWIPLine;
              InitPostedCapitalization;
              InitPostedCWIPFADetails;
              DeleteDocument;
              IF GUIALLOWED THEN
                Window.CLOSE;
              MESSAGE(Text16506);
            END;
          END;

  }
  CODE
  {
    VAR
      JobsSetup@1500018 : Record 315;
      DepreciationBook@1500011 : Record 5611;
      PstdCapCWIPHeader@1500007 : Record 16599;
      CWIPPostBuffer@1500005 : ARRAY [2] OF TEMPORARY Record 13707;
      FADepreciationBook@1500028 : Record 5612;
      SourceCodeSetup@1500023 : Record 242;
      JobLedgerEntry@1500021 : Record 169;
      CapitalizeCWIPHeader@1500019 : Record 16597;
      NoSeriesMgt@1500004 : Codeunit 396;
      Text16500@1500003 : TextConst 'ENU=Do you want to post ?;ENN=Do you want to post ?';
      Text16501@1500006 : TextConst 'ENU=Posting lines    #2#############################;ENN=Posting lines    #2#############################';
      Text16502@1500000 : TextConst 'ENU=There is nothing to post.;ENN=There is nothing to post.';
      Text16503@1500008 : TextConst 'ENU="No Fixed Asset has been selected for Document No.=%1,Job No.=%2,Job Task No.=%3,Line No.=%4,Type=%5.";ENN="No Fixed Asset has been selected for Document No.=%1,Job No.=%2,Job Task No.=%3,Line No.=%4,Type=%5."';
      Text16504@1500009 : TextConst 'ENU="Total allocation amount must be equal to %1 for Document No.=%2,Job No.=%3,Job Task No.=%4,Line No.=%5,Type=%6";ENN="Total allocation amount must be equal to %1 for Document No.=%2,Job No.=%3,Job Task No.=%4,Line No.=%5,Type=%6"';
      Text16505@1500010 : TextConst 'ENU="You cannot allocate fixed assets when amount to capitalize is %1 for Document No.=%2,Job No.=%3,Job Task No.=%4,Line No.=%5,Type=%6";ENN="You cannot allocate fixed assets when amount to capitalize is %1 for Document No.=%2,Job No.=%3,Job Task No.=%4,Line No.=%5,Type=%6"';
      Text16506@1500012 : TextConst 'ENU=Capitalize CWIP posted successfully.;ENN=Capitalize CWIP posted successfully.';
      Text16507@1500013 : TextConst 'ENU=#1################################################\\;ENN=#1################################################\\';
      Text16508@1500014 : TextConst 'ENU=Capitalize CWIP No;ENN=Capitalize CWIP No';
      Text16509@1500015 : TextConst 'ENU=" -> Posted Capitalize CWIP No";ENN=" -> Posted Capitalize CWIP No"';
      Text16510@1500016 : TextConst 'ENU=Posting Capitalize CWIP Header;ENN=Posting Capitalize CWIP Header';
      Text16511@1500017 : TextConst 'ENU=Posting Capitalize CWIP Line;ENN=Posting Capitalize CWIP Line';
      Text16512@1500022 : TextConst 'ENU="Depreciation Book=%1 must be defined for Document No.=%2,Job No.=%3,FA No.=%4.";ENN="Depreciation Book=%1 must be defined for Document No.=%2,Job No.=%3,FA No.=%4."';
      GenJnlPostLine@1500024 : Codeunit 12;
      Window@1500001 : Dialog;
      RemCWIPAmt@1500025 : Decimal;
      Text16513@1500026 : TextConst 'ENU="Amount to capitalize amount=%1 must be less than remaining CWIP amount=%2 for Document No.=%3,Job No.=%4,Job Task No.=%5,Line No.=%6,Type=%7.";ENN="Amount to capitalize amount=%1 must be less than remaining CWIP amount=%2 for Document No.=%3,Job No.=%4,Job Task No.=%5,Line No.=%6,Type=%7."';
      Text16514@1500027 : TextConst 'ENU=Posting G/L Entries;ENN=Posting G/L Entries';
      Text16517@1500033 : TextConst 'ENU="Posting date=%1 of Capitalize CWIP must be greater than posting date of last job ledger entry=%2 for Document No.=%3,Job No.=%4,Job Task No.=%5,Type=%6.";ENN="Posting date=%1 of Capitalize CWIP must be greater than posting date of last job ledger entry=%2 for Document No.=%3,Job No.=%4,Job Task No.=%5,Type=%6."';
      Text16518@1500036 : TextConst 'ENU="Depr. until FA Posting Date must not be specified when G/L Integration - Depreciation = %1 in Depreciation Book=%2 in Document No.=%3,Job No.=%4,FA Code =%5..";ENN="Depr. until FA Posting Date must not be specified when G/L Integration - Depreciation = %1 in Depreciation Book=%2 in Document No.=%3,Job No.=%4,FA Code =%5.."';

    PROCEDURE InitPstdCapCWIPHeader@1500005();
    BEGIN
      PstdCapCWIPHeader.TRANSFERFIELDS(CapitalizeCWIPHeader);
      PstdCapCWIPHeader."No." := NoSeriesMgt.GetNextNo(CapitalizeCWIPHeader."Posting No. Series",WORKDATE,TRUE);
      Window.UPDATE(1,Text16508 + CapitalizeCWIPHeader."No." + Text16509 + PstdCapCWIPHeader."No.");
      Window.UPDATE(2,Text16510);
      PstdCapCWIPHeader."Capitalize CWIP No." := CapitalizeCWIPHeader."No.";
      PstdCapCWIPHeader.INSERT;
    END;

    PROCEDURE InitPstdCapCWIPLine@1500000();
    VAR
      PstdCapCWIPLine@1500002 : Record 13702;
      CapitalizeCWIPLine@1500003 : Record 16598;
    BEGIN
      Window.UPDATE(2,Text16511);
      CapitalizeCWIPLine.RESET;
      CapitalizeCWIPLine.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      IF CapitalizeCWIPLine.FINDSET THEN
        REPEAT
          PstdCapCWIPLine.INIT;
          PstdCapCWIPLine.TRANSFERFIELDS(CapitalizeCWIPLine);
          PstdCapCWIPLine."Document No." := PstdCapCWIPHeader."No.";
          PstdCapCWIPLine.INSERT;
        UNTIL (CapitalizeCWIPLine.NEXT = 0)
    END;

    PROCEDURE CheckCapitalizeCWIPLines@1500001();
    VAR
      CapitalizeCWIPLine@1500001 : Record 16598;
      TotalAmtToCapitalizeLabor@1500002 : Decimal;
      TotalAmtToCapitalizeMaterial@1500003 : Decimal;
      TotalAmtToCapitalizeOverheads@1500004 : Decimal;
      Type@1500005 : ' ,Labor,Material,Overheads';
      Flag@1500006 : Boolean;
      JobTask@1500007 : Record 1001;
      Job@1500008 : Record 167;
      JobPostingGroup@1500009 : Record 208;
      JobpostingGrp@1500010 : Code[10];
    BEGIN
      TotalAmtToCapitalizeLabor := 0;
      TotalAmtToCapitalizeMaterial := 0;
      TotalAmtToCapitalizeOverheads := 0;
      Flag := FALSE;
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("Capital WIP");
      CapitalizeCWIPLine.RESET;
      CapitalizeCWIPLine.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      CapitalizeCWIPLine.SETRANGE("Job No.",CapitalizeCWIPHeader."Job No.");
      CapitalizeCWIPLine.SETRANGE("Job Task Type",CapitalizeCWIPLine."Job Task Type"::Posting);
      IF CapitalizeCWIPLine.FINDSET THEN
        REPEAT
          Flag := TRUE;
          WITH CapitalizeCWIPLine DO BEGIN
            JobTask.RESET;
            JobTask.SETRANGE("Job No.","Job No.");
            JobTask.SETRANGE("Job Task No.","Job Task No.");
            IF JobTask.FINDFIRST THEN BEGIN
              IF JobTask."Job Posting Group" = '' THEN BEGIN
                Job.RESET;
                Job.GET("Job No.");
                Job.TESTFIELD("Job Posting Group");
                JobpostingGrp := Job."Job Posting Group";
              END ELSE
                JobpostingGrp := JobTask."Job Posting Group";

              JobPostingGroup.GET(JobpostingGrp);
              JobPostingGroup.TESTFIELD("WIP Costs Account");
            END;

            CheckAmountAllocated("Job Task No.","Line No.","Amt to Capitalize (Labor)",Type::Labor);
            CheckAmountAllocated("Job Task No.","Line No.","Amt to Capitalize (Material)",Type::Material);
            CheckAmountAllocated("Job Task No.","Line No.","Amt to Capitalize (Overheads)",Type::Overheads);

            IF "Amt to Capitalize (Labor)" <> 0 THEN BEGIN
              TotalAmtToCapitalizeLabor += "Amt to Capitalize (Labor)";
              CheckPostingDate("Job Task No.",Type::Labor);
            END;
            IF "Amt to Capitalize (Material)" <> 0 THEN BEGIN
              TotalAmtToCapitalizeMaterial += "Amt to Capitalize (Material)";
              CheckPostingDate("Job Task No.",Type::Material);
            END;
            IF "Amt to Capitalize (Overheads)" <> 0 THEN BEGIN
              TotalAmtToCapitalizeOverheads += "Amt to Capitalize (Overheads)";
              CheckPostingDate("Job Task No.",Type::Overheads);
            END;

            RemCWIPAmt := CheckRemainingCWIPAmount("Job Task No.",Type::Labor);
            IF RemCWIPAmt < "Amt to Capitalize (Labor)" THEN
              ERROR(Text16513,ROUND("Amt to Capitalize (Labor)"),ROUND(RemCWIPAmt),
                "Document No.","Job No.","Job Task No.","Line No.",'Labor');
            RemCWIPAmt := CheckRemainingCWIPAmount("Job Task No.",Type::Material);
            IF RemCWIPAmt < "Amt to Capitalize (Material)" THEN
              ERROR
              (Text16513,ROUND("Amt to Capitalize (Material)"),ROUND(RemCWIPAmt),"Document No.",
                "Job No.","Job Task No.","Line No.",'Material');
            RemCWIPAmt := CheckRemainingCWIPAmount("Job Task No.",Type::Overheads);
            IF RemCWIPAmt < "Amt to Capitalize (Overheads)" THEN
              ERROR(Text16513,ROUND("Amt to Capitalize (Overheads)"),ROUND(RemCWIPAmt),"Document No.",
                "Job No.","Job Task No.","Line No.",'Overheads');
          END;
        UNTIL (CapitalizeCWIPLine.NEXT = 0);
      IF NOT Flag THEN
        ERROR(Text16502);
      IF (TotalAmtToCapitalizeLabor = 0) AND (TotalAmtToCapitalizeMaterial = 0) AND (TotalAmtToCapitalizeOverheads = 0) THEN
        ERROR(Text16502);
    END;

    PROCEDURE CheckAmountAllocated@1500002(JobTaskNo@1500002 : Code[20];LineNo@1500006 : Integer;AmtToCapitalize@1500003 : Decimal;Type@1500004 : ' ,Labor,Material,Overheads');
    VAR
      Capitalization@1500005 : Record 16596;
      AllocationAmt@1500007 : Decimal;
    BEGIN
      Capitalization.RESET;
      Capitalization.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      Capitalization.SETRANGE("Job No.",CapitalizeCWIPHeader."Job No.");
      Capitalization.SETRANGE("Job Task No.",JobTaskNo);
      Capitalization.SETRANGE("Line No.",LineNo);
      IF Capitalization.FINDFIRST THEN BEGIN
        IF Type = Type::Labor THEN BEGIN
          Capitalization.CALCSUMS("Allocation Amt (Labor)");
          AllocationAmt := Capitalization."Allocation Amt (Labor)";
        END ELSE
          IF Type = Type::Material THEN BEGIN
            Capitalization.CALCSUMS("Allocation Amt (Material)");
            AllocationAmt := Capitalization."Allocation Amt (Material)";
          END ELSE
            IF Type = Type::Overheads THEN BEGIN
              Capitalization.CALCSUMS("Allocation Amt (Overheads)");
              AllocationAmt := Capitalization."Allocation Amt (Overheads)";
            END;
        IF (ROUND(AmtToCapitalize) <> ROUND(AllocationAmt)) AND (AmtToCapitalize = 0) THEN
          ERROR(Text16505,ROUND(AmtToCapitalize),CapitalizeCWIPHeader."No.",CapitalizeCWIPHeader."Job No.",JobTaskNo,LineNo,Type);
        IF ROUND(AllocationAmt) <> ROUND(AmtToCapitalize) THEN
          ERROR(Text16504,ROUND(AmtToCapitalize),CapitalizeCWIPHeader."No.",CapitalizeCWIPHeader."Job No.",JobTaskNo,LineNo,Type);
      END ELSE
        IF AmtToCapitalize <> 0 THEN
          ERROR(Text16503,CapitalizeCWIPHeader."No.",CapitalizeCWIPHeader."Job No.",JobTaskNo,LineNo,Type);
    END;

    PROCEDURE DeleteDocument@1500003();
    VAR
      CapitalizeCWIPLine@1500001 : Record 16598;
      Capitalization@1500002 : Record 16596;
      CWIPFADetails@1500003 : Record 13703;
    BEGIN
      CapitalizeCWIPLine.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      CapitalizeCWIPLine.DELETEALL;
      Capitalization.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      Capitalization.DELETEALL;
      CWIPFADetails.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      CWIPFADetails.DELETEALL;
      CapitalizeCWIPHeader.DELETE;
    END;

    PROCEDURE InitPostedCapitalization@1500007();
    VAR
      Capitalization@1500001 : Record 16596;
      PostedCapitalization@1500002 : Record 13704;
    BEGIN
      Capitalization.RESET;
      Capitalization.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      IF Capitalization.FINDSET THEN
        REPEAT
          PostedCapitalization.INIT;
          PostedCapitalization.TRANSFERFIELDS(Capitalization);
          PostedCapitalization."Document No." := PstdCapCWIPHeader."No.";
          PostedCapitalization.INSERT;
        UNTIL (Capitalization.NEXT = 0)
    END;

    PROCEDURE InitPostedCWIPFADetails@1500009();
    VAR
      CWIPFADetails@1500001 : Record 13703;
      PostedCWIPFADetails@1500002 : Record 13705;
    BEGIN
      CWIPFADetails.RESET;
      CWIPFADetails.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      IF CWIPFADetails.FINDSET THEN
        REPEAT
          PostedCWIPFADetails.INIT;
          PostedCWIPFADetails.TRANSFERFIELDS(CWIPFADetails);
          PostedCWIPFADetails."Document No." := PstdCapCWIPHeader."No.";
          PostedCWIPFADetails.INSERT;
        UNTIL (CWIPFADetails.NEXT = 0)
    END;

    LOCAL PROCEDURE FillCWIPPostingBuffer@1280034(Capitalization@1280001 : Record 16596);
    VAR
      JobTask@1500000 : Record 1001;
      Job@1500001 : Record 167;
      JobPostingGroup@1500003 : Record 208;
      CapitalizeCWIPLine@1500002 : Record 16598;
    BEGIN
      WITH Capitalization DO BEGIN
        JobTask.RESET;
        JobTask.SETRANGE("Job No.","Job No.");
        JobTask.SETRANGE("Job Task No.","Job Task No.");
        IF JobTask.FINDFIRST THEN BEGIN
          IF JobTask."Job Posting Group" = '' THEN BEGIN
            Job.GET("Job No.");
            Job.TESTFIELD("Job Posting Group");
            JobPostingGroup.GET(Job."Job Posting Group");
          END ELSE
            JobPostingGroup.GET(JobTask."Job Posting Group");
          JobPostingGroup.TESTFIELD("WIP Costs Account");
        END;

        CWIPPostBuffer[1]."Job No." := "Job No.";
        CWIPPostBuffer[1]."G/L Account No." := JobPostingGroup."WIP Costs Account";
        CWIPPostBuffer[1]."FA Code" := "FA Code";
        CapitalizeCWIPLine.GET("Document No.","Job No.","Job Task No.","Line No.");
        CWIPPostBuffer[1]."Shortcut Dimension 1 Code" := CapitalizeCWIPLine."Shortcut Dimension 1 Code";
        CWIPPostBuffer[1]."Shortcut Dimension 2 Code" := CapitalizeCWIPLine."Shortcut Dimension 2 Code";
        CWIPPostBuffer[1]."Dimension Set ID" := CapitalizeCWIPLine."Dimension Set ID";
        CWIPPostBuffer[1].Amount := "Allocation Amt (Labor)" + "Allocation Amt (Material)" + "Allocation Amt (Overheads)";
        UpdCWIPPostingBuffer(Capitalization);
      END;
    END;

    LOCAL PROCEDURE UpdCWIPPostingBuffer@1280033(Capitalization@1500000 : Record 16596);
    BEGIN
      CWIPPostBuffer[2] := CWIPPostBuffer[1];
      IF CWIPPostBuffer[2].FIND THEN BEGIN
        CWIPPostBuffer[2].Amount := CWIPPostBuffer[2].Amount + CWIPPostBuffer[1].Amount;
        CWIPPostBuffer[2].MODIFY;
      END ELSE
        CWIPPostBuffer[1].INSERT;
    END;

    PROCEDURE InitGenJnlLine@1500004();
    VAR
      CWIPFADetails@1500000 : Record 13703;
      CWIPFADetails2@1500007 : Record 13703;
      GenJnlLine@1500002 : Record 81;
      FixedAsset@1500003 : Record 5600;
      GLAccount@1500004 : Record 15;
      Capitalization@1500001 : Record 16596;
      TotalCWIPAcc@1500005 : Decimal;
      TotalFAAmount@1500006 : Decimal;
      DifferenceAmount@1500008 : Decimal;
      SkipCheck@1500009 : Boolean;
    BEGIN
      Window.UPDATE(2,Text16514);
      IF CWIPPostBuffer[1].FIND('+') THEN
        REPEAT
          GenJnlLine.INIT;
          GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
          GenJnlLine.VALIDATE("Account No.",CWIPPostBuffer[1]."G/L Account No.");
          GenJnlLine.VALIDATE("Posting Date",CapitalizeCWIPHeader."Posting Date");
          GenJnlLine.VALIDATE("System-Created Entry",TRUE);
          GenJnlLine.VALIDATE("Document Type",GenJnlLine."Document Type"::" ");
          GenJnlLine.VALIDATE("Document No.",PstdCapCWIPHeader."No.");
          GLAccount.GET(CWIPPostBuffer[1]."G/L Account No.");
          GenJnlLine.Description := GLAccount.Name;
          GenJnlLine.VALIDATE(Amount,(-1 * CWIPPostBuffer[1].Amount));
          TotalCWIPAcc += ABS(GenJnlLine.Amount);
          GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."Capital WIP");
          GenJnlLine.VALIDATE("Posting No. Series",PstdCapCWIPHeader."Posting No. Series");
          GenJnlLine.VALIDATE("Shortcut Dimension 1 Code",CWIPPostBuffer[1]."Shortcut Dimension 1 Code");
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code",CWIPPostBuffer[1]."Shortcut Dimension 2 Code");
          GenJnlLine."Dimension Set ID" := CWIPPostBuffer[1]."Dimension Set ID";
          GenJnlPostLine.RUN(GenJnlLine);
        UNTIL CWIPPostBuffer[1].NEXT(-1) = 0;
      CWIPPostBuffer[1].DELETEALL;

      CWIPFADetails.RESET;
      CWIPFADetails.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      IF CWIPFADetails.FINDSET THEN
        REPEAT
          CWIPFADetails2 := CWIPFADetails;
          Capitalization.RESET;
          Capitalization.SETCURRENTKEY("Document No.","Job No.","FA Code");
          Capitalization.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
          Capitalization.SETRANGE("Job No.",CapitalizeCWIPHeader."Job No.");
          Capitalization.SETRANGE("FA Code",CWIPFADetails."FA Code");
          Capitalization.CALCSUMS("Allocation Amt (Labor)","Allocation Amt (Material)","Allocation Amt (Overheads)");
          GenJnlLine.INIT;
          GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"Fixed Asset");
          GenJnlLine.VALIDATE("Account No.",CWIPFADetails."FA Code");
          GenJnlLine.VALIDATE("Posting Date",CapitalizeCWIPHeader."Posting Date");
          GenJnlLine.VALIDATE("System-Created Entry",TRUE);
          GenJnlLine.VALIDATE("Document Type",GenJnlLine."Document Type"::" ");
          GenJnlLine.VALIDATE("Document No.",PstdCapCWIPHeader."No.");
          FixedAsset.GET(CWIPFADetails."FA Code");
          GenJnlLine.Description := FixedAsset.Description;
          GenJnlLine.VALIDATE("Depreciation Book Code",CapitalizeCWIPHeader."Depreciation Book");
          GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::"Acquisition Cost";
          GenJnlLine.VALIDATE(Amount,(Capitalization."Allocation Amt (Labor)" + Capitalization."Allocation Amt (Material)" +
                                      Capitalization."Allocation Amt (Overheads)"));
          TotalFAAmount += ABS(GenJnlLine.Amount);

          IF CWIPFADetails2.NEXT = 0 THEN BEGIN
            DifferenceAmount := TotalCWIPAcc - TotalFAAmount;
            GenJnlLine.VALIDATE(Amount,GenJnlLine.Amount + DifferenceAmount);
            IF Capitalization.FINDLAST THEN BEGIN
              IF Capitalization."Allocation Amt (Labor)" <> 0 THEN BEGIN
                Capitalization."Allocation Amt (Labor)" += DifferenceAmount;
                SkipCheck := TRUE;
              END;
              IF (Capitalization."Allocation Amt (Material)" <> 0) AND NOT SkipCheck THEN BEGIN
                Capitalization."Allocation Amt (Material)" += DifferenceAmount;
                SkipCheck := TRUE;
              END;
              IF (Capitalization."Allocation Amt (Overheads)" <> 0) AND NOT SkipCheck THEN BEGIN
                Capitalization."Allocation Amt (Overheads)" += DifferenceAmount;
                SkipCheck := TRUE;
              END;
            END;
            Capitalization.MODIFY;
          END;

          GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."Capital WIP");
          GenJnlLine.VALIDATE("Depr. until FA Posting Date",CWIPFADetails."Depr. until FA Posting Date");
          GenJnlLine.VALIDATE("Posting No. Series",PstdCapCWIPHeader."Posting No. Series");
          GenJnlLine.VALIDATE("Shortcut Dimension 1 Code",CWIPFADetails."Shortcut Dimension 1 Code");
          GenJnlLine.VALIDATE("Shortcut Dimension 2 Code",CWIPFADetails."Shortcut Dimension 2 Code");
          GenJnlLine."Dimension Set ID" := CWIPFADetails."Dimension Set ID"; // Need to check
          GenJnlLine.CWIP := TRUE;
          GenJnlPostLine.RUN(GenJnlLine);
        UNTIL CWIPFADetails.NEXT = 0;
    END;

    PROCEDURE CheckFADepreciationBook@1500008();
    VAR
      CWIPFADetails@1500001 : Record 13703;
    BEGIN
      WITH CapitalizeCWIPHeader DO BEGIN
        CWIPFADetails.RESET;
        CWIPFADetails.SETRANGE("Document No.","No.");
        IF CWIPFADetails.FINDSET THEN
          REPEAT
            FADepreciationBook.RESET;
            FADepreciationBook.SETRANGE("FA No.",CWIPFADetails."FA Code");
            FADepreciationBook.SETRANGE("Depreciation Book Code","Depreciation Book");
            IF NOT FADepreciationBook.FINDFIRST THEN
              ERROR(Text16512,"Depreciation Book","No.","Job No.",CWIPFADetails."FA Code");
            DepreciationBook.GET("Depreciation Book");
            IF CWIPFADetails."Depr. until FA Posting Date" AND (NOT DepreciationBook."G/L Integration - Depreciation") THEN
              ERROR(Text16518,DepreciationBook."G/L Integration - Depreciation","Depreciation Book",CWIPFADetails."Document No.",
                CWIPFADetails."Job No.",CWIPFADetails."FA Code");
          UNTIL CWIPFADetails.NEXT = 0;
      END;
    END;

    PROCEDURE CheckRemainingCWIPAmount@1500006(JobTaskNo_@1500001 : Code[20];CWIPGLType_@1500002 : ',Labor,Material,Overheads') : Decimal;
    BEGIN
      FilterJobLedgerEntries(JobTaskNo_,CWIPGLType_,FALSE);
      JobLedgerEntry.CALCSUMS("Remaining CWIP Amt");
      IF JobLedgerEntry."Remaining CWIP Amt" < 0 THEN
        EXIT(0);
      EXIT(JobLedgerEntry."Remaining CWIP Amt");
    END;

    PROCEDURE UpdateJobLedgerEntry@1500011();
    VAR
      CapitalizeCWIPLine@1500001 : Record 16598;
      Type@1500000 : ' ,Labor,Material,Overheads';
      AmttoCapitalize@1500002 : Decimal;
    BEGIN
      CapitalizeCWIPLine.RESET;
      CapitalizeCWIPLine.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      CapitalizeCWIPLine.SETRANGE("Job No.",CapitalizeCWIPHeader."Job No.");
      CapitalizeCWIPLine.SETRANGE("Job Task Type",CapitalizeCWIPLine."Job Task Type"::Posting);
      IF CapitalizeCWIPLine.FINDSET THEN
        REPEAT
          IF CapitalizeCWIPLine."Amt to Capitalize (Labor)" <> 0 THEN BEGIN
            AmttoCapitalize := CapitalizeCWIPLine."Amt to Capitalize (Labor)";
            FilterJobLedgerEntries(CapitalizeCWIPLine."Job Task No.",Type::Labor,TRUE);
            ReduceJobLedgerCWIPAmt(AmttoCapitalize);
          END;
          IF CapitalizeCWIPLine."Amt to Capitalize (Material)" <> 0 THEN BEGIN
            AmttoCapitalize := CapitalizeCWIPLine."Amt to Capitalize (Material)";
            FilterJobLedgerEntries(CapitalizeCWIPLine."Job Task No.",Type::Material,TRUE);
            ReduceJobLedgerCWIPAmt(AmttoCapitalize);
          END;
          IF CapitalizeCWIPLine."Amt to Capitalize (Overheads)" <> 0 THEN BEGIN
            AmttoCapitalize := CapitalizeCWIPLine."Amt to Capitalize (Overheads)";
            FilterJobLedgerEntries(CapitalizeCWIPLine."Job Task No.",Type::Overheads,TRUE);
            ReduceJobLedgerCWIPAmt(AmttoCapitalize);
          END;
        UNTIL CapitalizeCWIPLine.NEXT = 0;
    END;

    PROCEDURE FilterJobLedgerEntries@1500012(JobTaskNo_@1500001 : Code[20];CWIPGLType_@1500000 : ',Labor,Material,Overheads';Flag@1500002 : Boolean);
    BEGIN
      JobLedgerEntry.RESET;
      JobLedgerEntry.SETCURRENTKEY("Job No.","Job Task No.","Posting Date","CWIP G/L Type","CWIP Posted to G/L");
      JobLedgerEntry.SETRANGE("Job No.",CapitalizeCWIPHeader."Job No.");
      JobLedgerEntry.SETRANGE("Job Task No.",JobTaskNo_);
      JobLedgerEntry.SETRANGE("CWIP G/L Type",CWIPGLType_);
      JobLedgerEntry.SETRANGE("CWIP Posted to G/L",TRUE);
      IF Flag THEN
        JobLedgerEntry.SETFILTER("Total Cost (LCY)",'>%1',0);
    END;

    PROCEDURE ReduceJobLedgerCWIPAmt@1500026(AmttoCapitalize@1500000 : Decimal);
    BEGIN
      IF JobLedgerEntry.FINDSET THEN
        REPEAT
          IF JobLedgerEntry."Remaining CWIP Amt" >= AmttoCapitalize THEN BEGIN
            JobLedgerEntry."Remaining CWIP Amt" := JobLedgerEntry."Remaining CWIP Amt" - AmttoCapitalize;
            AmttoCapitalize := 0;
            JobLedgerEntry.MODIFY;
          END ELSE BEGIN
            AmttoCapitalize := AmttoCapitalize - JobLedgerEntry."Remaining CWIP Amt";
            JobLedgerEntry."Remaining CWIP Amt" := 0;
            JobLedgerEntry.MODIFY;
            JobLedgerEntry.NEXT;
          END;
        UNTIL AmttoCapitalize = 0;
    END;

    PROCEDURE InitCWIPBuffer@1500010();
    VAR
      Capitalization@1500001 : Record 16596;
    BEGIN
      Capitalization.RESET;
      Capitalization.SETRANGE("Document No.",CapitalizeCWIPHeader."No.");
      IF Capitalization.FINDSET THEN
        REPEAT
          FillCWIPPostingBuffer(Capitalization);
        UNTIL Capitalization.NEXT = 0;
    END;

    PROCEDURE CheckPostingDate@1500013(JobTaskNo@1500000 : Code[20];Type@1500001 : ' ,Labor,Material,Overheads');
    BEGIN
      JobLedgerEntry.RESET;
      JobLedgerEntry.SETCURRENTKEY("Job No.","Job Task No.","Posting Date","CWIP G/L Type","CWIP Posted to G/L");
      JobLedgerEntry.SETRANGE("Job No.",CapitalizeCWIPHeader."Job No.");
      JobLedgerEntry.SETRANGE("Job Task No.",JobTaskNo);
      JobLedgerEntry.SETFILTER("Posting Date",'>%1',CapitalizeCWIPHeader."Posting Date");
      JobLedgerEntry.SETRANGE("CWIP G/L Type",Type);
      JobLedgerEntry.SETRANGE("CWIP Posted to G/L",TRUE);
      IF JobLedgerEntry.FINDLAST THEN
        ERROR(Text16517,CapitalizeCWIPHeader."Posting Date",JobLedgerEntry."Posting Date",CapitalizeCWIPHeader."No.",
          CapitalizeCWIPHeader."Job No.",JobTaskNo,Type);
    END;

    BEGIN
    END.
  }
}

