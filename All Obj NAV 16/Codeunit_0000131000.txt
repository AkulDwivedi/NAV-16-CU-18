OBJECT Codeunit 131000 Library - Utility
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      KeyNotFoundError@1000 : TextConst 'ENU=Field "%1" must be part of the primary key in the Table "%2".';
      ControlForFieldNotFoundError@1005 : TextConst 'ENU=Control for field %1 does not exist in Page %2.';
      FieldNotFoundError@1004 : TextConst 'ENU=Field %1 does not exist in Table %2.';
      PropertyValueUndefinedError@1003 : TextConst 'ENU=Property value is not defined.';
      ERR_NotCompatible@1006 : TextConst 'ENU=The two records are not compatible to compare. Field number %1 has a type mismatch. Type %2 cannot be compared with type %3.';
      PrimaryKeyNotCodeFieldErr@1001 : TextConst 'ENU=The primary key must be a sinlge field of type Code to use this function.';
      LibraryRandom@1002 : Codeunit 130440;
      FieldOptionTypeErr@1007 : TextConst '@@@=%1 - Field Name, %2 - Table Name;ENU=Field %1 in Table %2 must be option type.';

    PROCEDURE CreateNoSeries@30(VAR NoSeries@1003 : Record 308;Default@1002 : Boolean;Manual@1001 : Boolean;DateOrder@1000 : Boolean);
    BEGIN
      NoSeries.INIT;
      NoSeries.VALIDATE(Code,GenerateRandomCode(NoSeries.FIELDNO(Code),DATABASE::"No. Series"));
      NoSeries.VALIDATE("Default Nos.",Default);
      NoSeries.VALIDATE("Manual Nos.",Manual);
      NoSeries.VALIDATE("Date Order",DateOrder);
      NoSeries.INSERT(TRUE);
    END;

    PROCEDURE CreateNoSeriesLine@29(VAR NoSeriesLine@1003 : Record 309;SeriesCode@1002 : Code[10];StartingNo@1001 : Code[20];EndingNo@1000 : Code[20]);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      NoSeriesLine.INIT;
      NoSeriesLine.VALIDATE("Series Code",SeriesCode);
      RecRef.GETTABLE(NoSeriesLine);
      NoSeriesLine.VALIDATE("Line No.",GetNewLineNo(RecRef,NoSeriesLine.FIELDNO("Line No.")));

      IF StartingNo = '' THEN
        NoSeriesLine.VALIDATE("Starting No.",PADSTR(INSSTR(SeriesCode,'00000000',3),10))
      ELSE
        NoSeriesLine.VALIDATE("Starting No.",StartingNo);

      IF EndingNo = '' THEN
        NoSeriesLine.VALIDATE("Ending No.",PADSTR(INSSTR(SeriesCode,'99999999',3),10))
      ELSE
        NoSeriesLine.VALIDATE("Ending No.",EndingNo);

      NoSeriesLine.INSERT(TRUE)
    END;

    PROCEDURE CreateNoSeriesRelationship@5(Code@1002 : Code[10];SeriesCode@1000 : Code[10]);
    VAR
      NoSeriesRelationship@1004 : Record 310;
    BEGIN
      NoSeriesRelationship.INIT;
      NoSeriesRelationship.VALIDATE(Code,Code);
      NoSeriesRelationship.VALIDATE("Series Code",SeriesCode);
      NoSeriesRelationship.INSERT(TRUE);
    END;

    PROCEDURE CheckFieldExistenceInTable@1(TableNo@1000 : Integer;FieldName@1001 : Text[30]) : Boolean;
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      Field.SETRANGE(FieldName,FieldName);
      EXIT(Field.FINDFIRST);
    END;

    PROCEDURE CheckFileNotEmpty@24(FileName@1001 : Text) : Boolean;
    VAR
      File@1000 : File;
    BEGIN
      // The parameter FileName should contain the full File Name including path.
      IF FileName = '' THEN
        EXIT(FALSE);
      IF File.OPEN(FileName) THEN
        IF File.LEN > 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CompareTwoRecords@11(RecRef1@1000 : RecordRef;RecRef2@1001 : RecordRef;FieldCountsToBeIgnored@1002 : Integer;DiscardDateTimeFields@1008 : Boolean;VAR FieldNumbersNotMatched@1007 : ARRAY [200] OF Integer;VAR Value1@1010 : ARRAY [200] OF Variant;VAR Value2@1011 : ARRAY [200] OF Variant;VAR MismatchCount@1006 : Integer) : Boolean;
    VAR
      FieldRef1@1012 : FieldRef;
      FieldRef2@1013 : FieldRef;
      index1@1015 : Integer;
      index2@1003 : Integer;
      FldCount@1016 : Integer;
      fieldType@1004 : Text[30];
      continue@1017 : Boolean;
    BEGIN
      index1 := RecRef1.KEYINDEX(1).FIELDCOUNT + 1;
      index2 := RecRef2.KEYINDEX(1).FIELDCOUNT + 1;
      FldCount := RecRef1.FIELDCOUNT;
      IF RecRef2.FIELDCOUNT < RecRef1.FIELDCOUNT THEN
        FldCount := RecRef2.FIELDCOUNT;
      CLEAR(FieldNumbersNotMatched);
      CLEAR(Value1);
      CLEAR(Value2);
      MismatchCount := 0;
      WHILE (index1 <= FldCount) AND (index2 <= FldCount) DO BEGIN
        IF RecRef1.FIELDINDEX(index1).NUMBER > RecRef2.FIELDINDEX(index2).NUMBER THEN BEGIN
          index2 := index2 + 1;
          continue := TRUE;
        END ELSE
          IF RecRef2.FIELDINDEX(index2).NUMBER > RecRef1.FIELDINDEX(index1).NUMBER THEN BEGIN
            index1 := index1 + 1;
            continue := TRUE;
          END;
        IF NOT continue THEN BEGIN
          FieldRef1 := RecRef1.FIELDINDEX(index1);
          FieldRef2 := RecRef2.FIELDINDEX(index2);
          IF FORMAT(FieldRef1.TYPE) <> FORMAT(FieldRef2.TYPE) THEN
            ERROR(ERR_NotCompatible,FieldRef1.NUMBER,FORMAT(FieldRef1.TYPE),FORMAT(FieldRef2.TYPE));
          fieldType := UPPERCASE(FORMAT(FieldRef1.TYPE));
          IF DiscardDateTimeFields AND ((fieldType = 'DATE') OR (fieldType = 'TIME') OR (fieldType = 'DATETIME')) THEN
            continue := TRUE;
          IF NOT continue THEN
            IF FieldRef1.VALUE <> FieldRef2.VALUE THEN BEGIN
              MismatchCount := MismatchCount + 1;
              FieldNumbersNotMatched[MismatchCount] := FieldRef1.NUMBER;
              Value1[MismatchCount] := FieldRef1.VALUE;
              Value2[MismatchCount] := FieldRef2.VALUE;
            END;
          index1 := index1 + 1;
          index2 := index2 + 1;
        END;
        continue := FALSE;
      END;
      IF MismatchCount > FieldCountsToBeIgnored THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE ConvertMilliSecToHours@27(TimePeriod@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(TimePeriod / 3600000);
    END;

    PROCEDURE ConvertHoursToMilliSec@26(TimePeriod@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(TimePeriod * 3600000);
    END;

    PROCEDURE ConvertNumericToText@28(NumericCode@1000 : Text) : Text;
    BEGIN
      EXIT(CONVERTSTR(NumericCode,'0123456789','ABCDEFGHIJ'));
    END;

    PROCEDURE FindControl@20(ObjectNo@1004 : Integer;FieldNo@1000 : Integer) : Boolean;
    VAR
      ObjectMetadata@1003 : Record 2000000071;
      MetaDataInstream@1001 : InStream;
      TestString@1002 : Text[1024];
    BEGIN
      TestString := '';
      ObjectMetadata.GET(ObjectMetadata."Object Type"::Page,ObjectNo);
      ObjectMetadata.CALCFIELDS(Metadata);
      IF ObjectMetadata.Metadata.HASVALUE THEN
        ObjectMetadata.Metadata.CREATEINSTREAM(MetaDataInstream);
      WHILE NOT MetaDataInstream.EOS DO BEGIN
        MetaDataInstream.READTEXT(TestString);
        IF STRPOS(TestString,'DataColumnName="' + FORMAT(FieldNo) + '"') <> 0 THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FindEditable@25(ObjectNo@1001 : Integer;FieldNo@1000 : Integer) : Boolean;
    VAR
      Editable@1002 : Text[30];
    BEGIN
      // Find and return the Editable property for a page control. Generate an error if page control does not exists.
      Editable := GetPropertyValueForControl(ObjectNo,FieldNo,'Editable="',TRUE);
      IF Editable = 'FALSE' THEN
        EXIT(FALSE);
      IF (Editable = '') OR (Editable = 'TRUE') THEN
        EXIT(TRUE);
    END;

    PROCEDURE FindFieldNoInTable@2(TableNo@1001 : Integer;FieldName@1000 : Text[30]) : Integer;
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,TableNo);
      Field.SETRANGE(FieldName,FieldName);
      Field.FINDFIRST;
      EXIT(Field."No.");
    END;

    PROCEDURE FindMaxValueForField@17(ObjectNo@1001 : Integer;FieldNo@1000 : Integer) MaximumValue : Integer;
    BEGIN
      EVALUATE(MaximumValue,GetPropertyValueForField(ObjectNo,FieldNo,'MaxValue="',FALSE));
      EXIT(MaximumValue);
    END;

    PROCEDURE FindMinValueForField@19(ObjectNo@1001 : Integer;FieldNo@1000 : Integer) MinimumValue : Integer;
    BEGIN
      EVALUATE(MinimumValue,GetPropertyValueForField(ObjectNo,FieldNo,'MinValue="',FALSE));
      EXIT(MinimumValue);
    END;

    PROCEDURE FindVisible@23(ObjectNo@1002 : Integer;FieldNo@1001 : Integer) : Boolean;
    VAR
      Visible@1000 : Text[30];
    BEGIN
      Visible := GetPropertyValueForControl(ObjectNo,FieldNo,'Visible="',TRUE);
      IF Visible = 'FALSE' THEN
        EXIT(FALSE);
      IF (Visible = '') OR (Visible = 'TRUE') THEN
        EXIT(TRUE);
    END;

    PROCEDURE GetFieldLength@3(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      EXIT(FieldRef.LENGTH);
    END;

    PROCEDURE GetLastTransactionNo@103() : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      IF GLEntry.FINDLAST THEN
        EXIT(GLEntry."Transaction No.");

      EXIT(0);
    END;

    PROCEDURE GetNewRecNo@35(RecVariant@1000 : Variant;FieldNo@1001 : Integer) : Integer;
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVariant);
      EXIT(GetNewLineNo(RecRef,FieldNo));
    END;

    PROCEDURE GetNewLineNo@10(RecRef@1001 : RecordRef;FieldNo@1009 : Integer) : Integer;
    VAR
      RecRef2@1006 : RecordRef;
      FieldRef@1004 : FieldRef;
      FieldRef2@1005 : FieldRef;
      KeyRef@1002 : KeyRef;
      FieldCount@1003 : Integer;
      LineNumberFound@1007 : Boolean;
    BEGIN
      // Find the value of Line No. for a new line in the Record passed as Record Ref.
      // 1. It is assumed that the field passed is part of the primary key.
      // 2. It is assumed that all the primary key fields except Line No. field are already validated on the record.
      RecRef2.OPEN(RecRef.NUMBER,FALSE,COMPANYNAME);
      KeyRef := RecRef.KEYINDEX(1);  // The Primary Key always has index as 1.
      FOR FieldCount := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(FieldCount);
        IF FieldRef.NUMBER <> FieldNo THEN BEGIN
          FieldRef2 := RecRef2.FIELD(FieldRef.NUMBER);
          FieldRef2.SETRANGE(FieldRef.VALUE);  // Set filter on fields other than Line No with value as filled in on RecRef.
        END ELSE
          LineNumberFound := TRUE;
      END;

      IF NOT LineNumberFound THEN BEGIN
        FieldRef := RecRef2.FIELD(FieldNo);
        ERROR(STRSUBSTNO(KeyNotFoundError,FieldRef.NAME,RecRef2.NAME));
      END;

      IF RecRef2.FINDLAST THEN BEGIN
        FieldRef := RecRef2.FIELD(FieldNo);
        FieldCount := FieldRef.VALUE;
      END ELSE
        FieldCount := 0;
      EXIT(FieldCount + 10000);  // Add 10000 to the last Line No.
    END;

    PROCEDURE GetGlobalNoSeriesCode@44() : Code[10];
    VAR
      NoSeries@1001 : Record 308;
      NoSeriesLine@1000 : Record 309;
    BEGIN
      // Init, get the global no series
      IF NOT NoSeries.GET('GLOBAL') THEN BEGIN
        NoSeries.INIT;
        NoSeries.VALIDATE(Code,'GLOBAL');
        NoSeries.VALIDATE("Default Nos.",TRUE);
        NoSeries.VALIDATE("Manual Nos.",TRUE);
        NoSeries.INSERT(TRUE);
        CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'','');
      END;

      EXIT(NoSeries.Code)
    END;

    PROCEDURE GetNextNoSeriesSalesDate@15(NoSeriesCode@1000 : Code[10]) : Date;
    VAR
      NoSeries@1001 : Record 308;
    BEGIN
      NoSeries.GET(NoSeriesCode);
      NoSeries.TESTFIELD("Date Order",FALSE); // Use of Date Order is only tested on IT
      EXIT(WORKDATE);
    END;

    PROCEDURE GetNextNoSeriesPurchaseDate@13(NoSeriesCode@1000 : Code[10]) : Date;
    VAR
      NoSeries@1001 : Record 308;
    BEGIN
      NoSeries.GET(NoSeriesCode);
      NoSeries.TESTFIELD("Date Order",FALSE); // Use of Date Order is only tested on IT
      EXIT(WORKDATE);
    END;

    LOCAL PROCEDURE GetPropertyValue@4(ObjectType@1000 : Option;ObjectNo@1004 : Integer;FieldNo@1003 : Integer;PropertyName@1002 : Text[30];SuppressError@1001 : Boolean) : Text[30];
    VAR
      ObjectMetadata@1008 : Record 2000000071;
      MetaDataInstream@1007 : InStream;
      ControlFound@1006 : Boolean;
      TestString@1005 : Text[1024];
    BEGIN
      ObjectMetadata.GET(ObjectType,ObjectNo);
      ObjectMetadata.CALCFIELDS(Metadata);
      IF ObjectMetadata.Metadata.HASVALUE THEN
        ObjectMetadata.Metadata.CREATEINSTREAM(MetaDataInstream);
      WHILE NOT MetaDataInstream.EOS DO BEGIN
        MetaDataInstream.READTEXT(TestString);
        IF STRPOS(TestString,GetTextValue(ObjectType) + FORMAT(FieldNo) + '"') <> 0 THEN BEGIN
          ControlFound := TRUE;
          IF STRPOS(TestString,PropertyName) <> 0 THEN BEGIN
            TestString := COPYSTR(TestString,STRPOS(TestString,PropertyName) + STRLEN(PropertyName),10);
            EXIT(COPYSTR(TestString,1,STRPOS(TestString,'"') - 1));
          END;
          IF (STRPOS(TestString,'/>') <> 0) AND NOT SuppressError THEN
            ERROR(PropertyValueUndefinedError);
        END;
      END;
      IF NOT ControlFound THEN BEGIN
        IF ObjectType = ObjectMetadata."Object Type"::Page THEN
          ERROR(STRSUBSTNO(ControlForFieldNotFoundError,FieldNo,ObjectNo));
        ERROR(STRSUBSTNO(FieldNotFoundError,FieldNo,ObjectNo));
      END;
      EXIT('');
    END;

    PROCEDURE GetPropertyValueForControl@21(ObjectNo@1001 : Integer;FieldNo@1000 : Integer;PropertyName@1005 : Text[30];SuppressError@1003 : Boolean) : Text[30];
    VAR
      ObjectMetadata@1007 : Record 2000000071;
    BEGIN
      EXIT(GetPropertyValue(ObjectMetadata."Object Type"::Page,ObjectNo,FieldNo,PropertyName,SuppressError));
    END;

    PROCEDURE GetPropertyValueForField@16(ObjectNo@1001 : Integer;FieldNo@1000 : Integer;PropertyName@1002 : Text[30];SuppressError@1007 : Boolean) : Text[30];
    VAR
      ObjectMetadata@1008 : Record 2000000071;
    BEGIN
      EXIT(GetPropertyValue(ObjectMetadata."Object Type"::Table,ObjectNo,FieldNo,PropertyName,SuppressError));
    END;

    PROCEDURE GetNextNoFromNoSeries@38(NoSeriesCode@1001 : Code[10];PostingDate@1002 : Date) : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      EXIT(NoSeriesManagement.GetNextNo(NoSeriesCode,PostingDate,FALSE));
    END;

    PROCEDURE GenerateRandomCode@36(FieldNo@1001 : Integer;TableNo@1000 : Integer) : Code[10];
    VAR
      RecRef@1005 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Create a random and unique code for the any code field.

      RecRef.OPEN(TableNo,TRUE,COMPANYNAME);
      CLEAR(FieldRef);
      FieldRef := RecRef.FIELD(FieldNo);

      REPEAT
        IF FieldRef.LENGTH < 10 THEN
          FieldRef.SETRANGE(COPYSTR(GenerateGUID,10 - FieldRef.LENGTH + 1)) // Cut characters on the left side.
        ELSE
          FieldRef.SETRANGE(GenerateGUID);
      UNTIL RecRef.ISEMPTY;

      EXIT(FieldRef.GETFILTER)
    END;

    PROCEDURE GenerateRandomCodeWithLength@37(FieldNo@1001 : Integer;TableNo@1000 : Integer;CodeLength@1002 : Integer) : Code[10];
    VAR
      RecRef@1005 : RecordRef;
      FieldRef@1004 : FieldRef;
      NewCode@1003 : Code[10];
    BEGIN
      // Create a random and unique code for the any code field.
      RecRef.OPEN(TableNo,FALSE,COMPANYNAME);
      CLEAR(FieldRef);
      FieldRef := RecRef.FIELD(FieldNo);
      REPEAT
        NewCode := COPYSTR(GenerateRandomText(CodeLength),1,MAXSTRLEN(NewCode));
        FieldRef.SETRANGE(NewCode);
      UNTIL RecRef.ISEMPTY;

      EXIT(NewCode);
    END;

    PROCEDURE GenerateRandomText@58(Length@1000 : Integer) String : Text;
    VAR
      LibraryRandom@1001 : Codeunit 130440;
      i@1002 : Integer;
    BEGIN
      // Create a random string of length <length>.
      FOR i := 1 TO Length DO
        String[i] := LibraryRandom.RandIntInRange(33,126); // ASCII: ! (33) to ~ (126)

      EXIT(String)
    END;

    PROCEDURE GenerateRandomXMLText@59(Length@1000 : Integer) String : Text;
    VAR
      LibraryRandom@1001 : Codeunit 130440;
      i@1002 : Integer;
      Number@1003 : Integer;
    BEGIN
      // Create a random string of length <length> containing characters allowed by XML
      FOR i := 1 TO Length DO BEGIN
        Number := LibraryRandom.RandIntInRange(0,61);
        CASE Number OF
          0..9:
            Number += 48; // 0-9
          10..35:
            Number += 65 - 10; // A-Z
          36..61:
            Number += 97 - 36; // a-z
        END;
        String[i] := Number;
      END;
    END;

    PROCEDURE GenerateRandomAlphabeticText@93(Length@1000 : Integer;Option@1004 : 'Capitalized,Literal') String : Text;
    VAR
      LibraryRandom@1003 : Codeunit 130440;
      ASCIICodeFrom@1005 : Integer;
      ASCIICodeTo@1006 : Integer;
      Number@1002 : Integer;
      i@1001 : Integer;
    BEGIN
      CASE Option OF
        Option::Capitalized:
          BEGIN
            ASCIICodeFrom := 65;
            ASCIICodeTo := 90;
          END;
        Option::Literal:
          BEGIN
            ASCIICodeFrom := 97;
            ASCIICodeTo := 122;
          END;
        ELSE
          EXIT;
      END;
      FOR i := 1 TO Length DO BEGIN
        Number := LibraryRandom.RandIntInRange(ASCIICodeFrom,ASCIICodeTo);
        String[i] := Number;
      END;
    END;

    PROCEDURE GenerateRandomFraction@22() : Decimal;
    BEGIN
      EXIT(RANDOM(99) / 100);  // Generate any fraction between 0.01 to .99.
    END;

    PROCEDURE GenerateRandomDate@9(MinDate@1000 : Date;MaxDate@1001 : Date) : Date;
    VAR
      DateFormulaRandomDate@1002 : DateFormula;
      DateFormulaMinDate@1003 : DateFormula;
    BEGIN
      EVALUATE(DateFormulaMinDate,'<-1D>');
      EVALUATE(DateFormulaRandomDate,'<' + FORMAT(RANDOM(MaxDate - MinDate + 1)) + 'D>');
      EXIT(CALCDATE(DateFormulaRandomDate,CALCDATE(DateFormulaMinDate,MinDate)));
    END;

    PROCEDURE GenerateGUID@51() : Code[10];
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLine@1001 : Record 309;
      NoSeriesMgt@1002 : Codeunit 396;
    BEGIN
      IF NOT NoSeries.GET('GUID') THEN BEGIN
        NoSeries.INIT;
        NoSeries.VALIDATE(Code,'GUID');
        NoSeries.VALIDATE("Default Nos.",TRUE);
        NoSeries.VALIDATE("Manual Nos.",TRUE);
        NoSeries.INSERT(TRUE);

        CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'','');
      END;

      EXIT(NoSeriesMgt.GetNextNo(NoSeries.Code,WORKDATE,TRUE));
    END;

    PROCEDURE GenerateMOD97CompliantCode@12() CodeMod97Compliant : Code[10];
    VAR
      CompliantCodeBody@1000 : Integer;
    BEGIN
      CompliantCodeBody := LibraryRandom.RandIntInRange(1,100000000);
      CodeMod97Compliant := CONVERTSTR(FORMAT(CompliantCodeBody,8,'<Integer>'),' ','0');
      CodeMod97Compliant += CONVERTSTR(FORMAT(97 - CompliantCodeBody MOD 97,2,'<Integer>'),' ','0');
    END;

    PROCEDURE ExistsDecimalValueInArray@46(RowValueSet@1001 : ARRAY [250] OF Text[250];Value@1002 : Decimal) : Boolean;
    VAR
      Counter@1000 : Integer;
      CurrentValue@1003 : Decimal;
    BEGIN
      REPEAT
        Counter += 1;
        IF EVALUATE(CurrentValue,RowValueSet[Counter]) THEN;
      UNTIL (CurrentValue = Value) OR (Counter = ARRAYLEN(RowValueSet));
      EXIT(CurrentValue = Value);
    END;

    PROCEDURE FindRecord@6(VAR RecRef@1000 : RecordRef);
    BEGIN
      RecRef.FINDFIRST;
    END;

    LOCAL PROCEDURE GetTextValue@7(ObjectType@1001 : Option) : Text[30];
    VAR
      ObjectMetadata@1000 : Record 2000000071;
    BEGIN
      IF ObjectType = ObjectMetadata."Object Type"::Page THEN
        EXIT('DataColumnName="');
      EXIT('Field ID="');
    END;

    PROCEDURE LineBreak@53() : Text;
    VAR
      NewLine@1000 : Char;
    BEGIN
      NewLine := 10;
      EXIT(FORMAT(NewLine));
    END;

    PROCEDURE FindOrCreateCodeRecord@18(TableID@1001 : Integer) : Code[10];
    VAR
      RecRef@1000 : RecordRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      VerifyRecordHasCodeKey(TableID,RecRef,FieldRef);
      IF NOT RecRef.FINDFIRST THEN BEGIN
        FieldRef.VALIDATE(GenerateRandomCode(FieldRef.NUMBER,TableID));
        RecRef.INSERT(TRUE);
      END;
      EXIT(FieldRef.VALUE);
    END;

    PROCEDURE CreateCodeRecord@8(TableID@1001 : Integer) : Code[10];
    VAR
      RecRef@1000 : RecordRef;
      FieldRef@1002 : FieldRef;
    BEGIN
      VerifyRecordHasCodeKey(TableID,RecRef,FieldRef);
      FieldRef.VALIDATE(GenerateRandomCode(FieldRef.NUMBER,TableID));
      RecRef.INSERT(TRUE);
      EXIT(FieldRef.VALUE);
    END;

    PROCEDURE UpdateSetupNoSeriesCode@31(TableID@1000 : Integer;FieldID@1001 : Integer);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1002 : FieldRef;
      NoSeriesCode@1004 : Code[10];
    BEGIN
      RecRef.OPEN(TableID);
      RecRef.FIND;
      FieldRef := RecRef.FIELD(FieldID);
      NoSeriesCode := GetGlobalNoSeriesCode;
      IF FORMAT(FieldRef.VALUE) <> NoSeriesCode THEN BEGIN
        FieldRef.VALUE(NoSeriesCode);
        RecRef.MODIFY;
      END;
    END;

    LOCAL PROCEDURE VerifyRecordHasCodeKey@14(TableID@1000 : Integer;VAR RecRef@1001 : RecordRef;VAR FieldRef@1002 : FieldRef);
    VAR
      Field@1006 : Record 2000000041;
      KeyRef@1003 : KeyRef;
    BEGIN
      RecRef.OPEN(TableID);
      KeyRef := RecRef.KEYINDEX(1);
      FieldRef := KeyRef.FIELDINDEX(1);

      Field.GET(TableID,FieldRef.NUMBER);
      IF (KeyRef.FIELDCOUNT <> 1) OR (Field.Type <> Field.Type::Code) THEN
        ERROR(PrimaryKeyNotCodeFieldErr);
    END;

    PROCEDURE GetMaxOptionIndex@32(OptionString@1000 : Text) : Integer;
    BEGIN
      EXIT(STRLEN(DELCHR(OptionString,'=',DELCHR(OptionString,'=',','))));
    END;

    PROCEDURE GetMaxFieldOptionIndex@33(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      Field@1005 : Record 2000000041;
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);

      Field.GET(TableNo,FieldNo);
      IF Field.Type <> Field.Type::Option THEN
        ERROR(STRSUBSTNO(FieldOptionTypeErr,FieldRef.NAME,RecRef.NAME));
      EXIT(GetMaxOptionIndex(FieldRef.OPTIONCAPTION));
    END;

    PROCEDURE FillMaxText@34(RecVar@1000 : Variant;FieldNo@1001 : Integer);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(RecVar);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALUE := GenerateRandomText(FieldRef.LENGTH);
      RecRef.MODIFY;
    END;

    BEGIN
    {
      Contains all generic utility functions.
    }
    END.
  }
}

