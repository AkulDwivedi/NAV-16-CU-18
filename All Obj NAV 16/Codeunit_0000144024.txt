OBJECT Codeunit 144024 ERM TCS Nature Of Collection
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryTCS@1500006 : Codeunit 143008;
      LibraryRandom@1500004 : Codeunit 130440;
      Assert@1500003 : Codeunit 130000;
      LibraryERM@1500002 : Codeunit 131300;
      LibrarySales@1500001 : Codeunit 130509;
      LibraryInventory@1500007 : Codeunit 132201;
      LibrarySetupStorage@1500009 : Codeunit 131009;
      isInitialized@1500000 : Boolean;
      CreditAmountError@1500005 : TextConst 'ENU=The Amount in GL Entry is %1 and the actual value is %2.';
      AmountErr@1500008 : TextConst 'ENU=%1 is incorrect in %2.';

    [Test]
    PROCEDURE TestSalesOrderWithTCSInvAndLineDiscount@1500852();
    VAR
      SalesHeader@1500011 : Record 36;
      DocumentNo@1500007 : Code[20];
      TCSAmount@1500002 : ARRAY [2] OF Decimal;
      AccountNo@1500001 : ARRAY [2] OF Code[20];
      CustomerNo@1500000 : Code[20];
      i@1500875 : Integer;
    BEGIN
      // Setup: Create Sales Order and Post Sales Order
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      CustomerNo := CreateCustomerWithPANNo;
      CreateNODNOCSetup(CustomerNo);
      CreateSalesInvoice(SalesHeader,CustomerNo,TCSAmount,AccountNo);

      // Exercise:Post Sales Invoice
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // Verify: Verify Credit Amount On GL Entry.
      FOR i := 1 TO ARRAYLEN(TCSAmount) DO
        VerifyGLEntry(DocumentNo,AccountNo[i],TCSAmount[i]);
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesHandler)]
    PROCEDURE TestSalesPaymentAppliesToInvoiceCalculation@1500000();
    VAR
      GenJournalLine@1500005 : Record 81;
      SalesHeader@1500004 : Record 36;
      DocumentNo@1500003 : Code[20];
      TCSAmount@1500002 : ARRAY [2] OF Decimal;
      AccountNo@1500001 : ARRAY [2] OF Code[20];
      CustomerNo@1500000 : Code[20];
    BEGIN
      // Setup: Create Sales Order and Post Sales Order
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      CustomerNo := CreateCustomerWithPANNo;
      CreateNODNOCSetup(CustomerNo);
      CreateSalesInvoice(SalesHeader,CustomerNo,TCSAmount,AccountNo);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
      CreatePayment(GenJournalLine,DocumentNo);
      COMMIT;
      Assert.IsFalse(GenJournalLine."Total TDS/TCS Incl. SHE CESS" = 0,GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"));

      // Exercise:
      LookupToApplyInvoice(GenJournalLine,DocumentNo);

      // Verify: TCS is 0 as Payment amount does not exceed Invoice amount
      GenJournalLine.FIND;
      Assert.AreEqual(DocumentNo,GenJournalLine."Applies-to Doc. No.",GenJournalLine.FIELDNAME("Applies-to Doc. No."));
      Assert.AreEqual(0,GenJournalLine."Total TDS/TCS Incl. SHE CESS",GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"));
    END;

    [Test]
    PROCEDURE TestSalesCrMemoWithTCSAndThreshSurchOverlook@1500003();
    VAR
      SalesHeader@1500011 : Record 36;
      SalesLine@1500008 : Record 37;
      NODNOCHeader@1500002 : Record 13786;
      TCSNatureCollection@1500001 : Record 16507;
      TCSSetup@1500000 : Record 16508;
      AssesseeCode@1500004 : Record 13727;
      ExpectedTCSEntry@1500003 : Record 16514;
      DocumentNo@1500007 : Code[20];
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 163790] Created Setup, Posted Sales Cr. Memo with TCS, Threshold and Surcharge Overlook.
      // [FEATURE] [TCS][Sales Cr. Memo]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code, Customer and TCS Setup with Threshold and Surcharge Overlook.
      LibraryTCS.CreateInitialSetup(NODNOCHeader,TCSNatureCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDecInDecimalRange(1000,100000,2);

      // [WHEN] Created and Posted Sales Cr. Memo
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",NODNOCHeader."No.",
        TCSNatureCollection.Code,AssesseeCode.Code,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount,TRUE);

      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      //[THEN] TCS Entry has been created.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE TestSalesCrMemoWithTCSAndSurchOverlookWithoutThreshold@1500012();
    VAR
      SalesHeader@1500008 : Record 36;
      SalesLine@1500007 : Record 37;
      NODNOCHeader@1500006 : Record 13786;
      TCSNatureCollection@1500005 : Record 16507;
      TCSSetup@1500004 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      ExpectedTCSEntry@1500002 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163791] Created Setup, Posted Sales Cr. Memo with TCS, Surcharge Overlook and without Threshold.
      // [FEATURE] [TCS][Sales Cr. Memo]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code, Customer, TCS Setup without Threshold and with Surcharge Overlook.
      LibraryTCS.CreateInitialSetup(NODNOCHeader,TCSNatureCollection,TCSSetup,AssesseeCode,FALSE,TRUE,FALSE);
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDecInDecimalRange(10000,1000000,2);

      // [WHEN] Created and Posted Sales Cr. Memo
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",NODNOCHeader."No.",
        TCSNatureCollection.Code,AssesseeCode.Code,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount,TRUE);

      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      //[THEN] TCS Entry has been created.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE TestSalesCrMemoWithTCSAndThreshOverlookWithoutSurcharge@1500016();
    VAR
      SalesHeader@1500008 : Record 36;
      SalesLine@1500007 : Record 37;
      NODNOCHeader@1500006 : Record 13786;
      TCSNatureCollection@1500005 : Record 16507;
      TCSSetup@1500004 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      ExpectedTCSEntry@1500002 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163792] Created Setup, Posted Sales Cr. Memo with TCS, Threshold Overlook and without Surcharge.
      // [FEATURE] [TCS][Sales Cr. Memo]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code, Customer, TCS Setup with Threshold Overlook and without Surcharge.
      LibraryTCS.CreateInitialSetup(NODNOCHeader,TCSNatureCollection,TCSSetup,AssesseeCode,TRUE,FALSE,FALSE);
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDecInDecimalRange(100000,150000,2);

      // [WHEN] Created and Posted Sales Cr. Memo
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",NODNOCHeader."No.",
        TCSNatureCollection.Code,AssesseeCode.Code,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount,FALSE);

      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      //[THEN] TCS Entry has been created.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE TestSalesOrderWithTCSAndWithoutSurchargeThreshOverlook@1500006();
    VAR
      SalesHeader@1500008 : Record 36;
      SalesLine@1500007 : Record 37;
      NODNOCHeader@1500006 : Record 13786;
      TCSNatureCollection@1500005 : Record 16507;
      TCSSetup@1500004 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      ExpectedTCSEntry@1500002 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163823] Created Setup, Posted Sales Order with TCS, without Threshold Overlook and without Surcharge.
      // [FEATURE] [TCS][Sales Cr. Memo]
      Initialize;

      // [GIVEN] Created Setup for NOD/NOC, Assessee Code, Customer, TCS Setup without Threshold Overlook and without Surcharge.
      LibraryTCS.CreateInitialSetup(NODNOCHeader,TCSNatureCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDecInDecimalRange(100000,150000,2);

      // [WHEN] Created and Posted Sales Order
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NODNOCHeader."No.",
        TCSNatureCollection.Code,AssesseeCode.Code,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount,FALSE);

      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      //[THEN] TCS Entry has been created.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE Initialize@1500466();
    BEGIN
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500748();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF DeductorCategory.FINDFIRST THEN
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      ELSE BEGIN
        LibraryERM.CreateDeductorCategory(DeductorCategory);
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      END;
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500741();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500742(IncomeTaxAccountingPeriodNo@1000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := GetRequiredDateFromWorkDate(LibraryRandom.RandInt(2));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetRequiredDateFromWorkDate@1500999(Days@1500000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE CreatePayment@1500001(VAR GenJournalLine@1500000 : Record 81;PostedInvoiceNo@1500001 : Code[20]);
    VAR
      GenJournalBatch@1500003 : Record 232;
      TSCEntry@1500005 : Record 16514;
    BEGIN
      TSCEntry.SETRANGE("Document No.",PostedInvoiceNo);
      TSCEntry.FINDLAST;

      FindGenJournalBatchCash(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,TSCEntry."Party Code",
        -TSCEntry."TCS Base Amount" DIV 2);
      GenJournalLine.VALIDATE("Party Type",TSCEntry."Party Type");
      GenJournalLine.VALIDATE("Party Code",TSCEntry."Party Code");
      GenJournalLine.VALIDATE("T.C.A.N. No.",TSCEntry."T.C.A.N. No.");
      GenJournalLine.VALIDATE("TCS Nature of Collection",TSCEntry."TCS Nature of Collection");
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesHeader@1500525(VAR SalesHeader@1500002 : Record 36;CustomerNo@1500001 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Assessee Code",FindAssesseCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLines@1500236(VAR SalesLine@1500005 : Record 37;SalesHeader@1500004 : Record 36;TCSNature@1500852 : Code[20];Amount@1500002 : Decimal;LineDiscountPercentage@1500001 : Decimal;InvDiscountAmount@1500000 : Decimal);
    VAR
      Item@1500006 : Record 27;
    BEGIN
      LibrarySales.FindItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      SalesLine.VALIDATE("TCS Nature of Collection",TCSNature);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("Line Discount %",LineDiscountPercentage);
      SalesLine.VALIDATE("Inv. Discount Amount",InvDiscountAmount);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithPANNo@1500458() : Code[20];
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("P.A.N. No.",'PANAPPLIED');
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@1500556(NodNocNo@1500003 : Code[20]);
    VAR
      NODNOCHeader@1500014 : Record 13786;
      NODNOCLines@1500006 : Record 13785;
      TCSNatureOfCollection@1510014 : Record 16507;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,NODNOCHeader.Type::Customer,NodNocNo);
      NODNOCHeader.VALIDATE("Assesse Code",FindAssesseCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,FindTCSNatureOfCollection(TCSNatureOfCollection."TCS Type"::E));
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,FindTCSNatureOfCollection(TCSNatureOfCollection."TCS Type"::A));
      NODNOCLines.MODIFYALL("Threshold Overlook",TRUE);
      NODNOCLines.MODIFYALL("Surcharge Overlook",TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500225(DocumentNo@1500002 : Code[20];AccountNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo,AccountNo);
      Assert.AreEqual(ABS(GLEntry.Amount),Amount,STRSUBSTNO(CreditAmountError,GLEntry.Amount,Amount));
    END;

    LOCAL PROCEDURE FindGLEntry@1500566(VAR GLEntry@1500003 : Record 17;DocumentType@1500002 : Option;DocumentNo@1500001 : Code[20];AccountNo@1500000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",AccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindAssesseCode@1500885() : Code[20];
    VAR
      AssesseeCode@1500000 : Record 13727;
    BEGIN
      AssesseeCode.SETRANGE(Type,AssesseeCode.Type::Company);
      AssesseeCode.FINDFIRST;
      EXIT(AssesseeCode.Code);
    END;

    LOCAL PROCEDURE FindGenJournalBatchCash@1500013(VAR GenJournalBatch@1500000 : Record 232);
    VAR
      GenJournalTemplate@1500001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::"Cash Receipts");
      GenJournalTemplate.FINDFIRST;
      GenJournalBatch.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalBatch.SETRANGE("Bal. Account Type",GenJournalBatch."Bal. Account Type"::"Bank Account");
      GenJournalBatch.FINDFIRST;
    END;

    LOCAL PROCEDURE FindTCSNatureOfCollection@1500445(Type@1500000 : Option) : Code[20];
    VAR
      TCSNatureOfCollection@1500001 : Record 16507;
    BEGIN
      TCSNatureOfCollection.SETRANGE("TCS Type",Type);
      TCSNatureOfCollection.FINDFIRST;
      EXIT(TCSNatureOfCollection.Code);
    END;

    LOCAL PROCEDURE CalculateTCSForVerification@1500865(Amount@1500001 : Decimal;TCSSetup@1500000 : Record 16508) : Decimal;
    VAR
      TCSAmount@1500005 : Decimal;
      SurchargeAmount@1500004 : Decimal;
      eCESSAmount@1500003 : Decimal;
      SHECessAmount@1500002 : Decimal;
    BEGIN
      TCSAmount := RoundTCSAmount(TCSSetup."TCS %" * Amount / 100);
      SurchargeAmount := RoundTCSAmount((TCSSetup."TCS %" * Amount / 100) * (TCSSetup."Surcharge %" / 100));
      eCESSAmount := RoundTCSAmount((TCSAmount + SurchargeAmount) * TCSSetup."eCESS %" / 100);
      SHECessAmount := RoundTCSAmount((TCSAmount + SurchargeAmount) * TCSSetup."SHE Cess %" / 100);
      EXIT(TCSAmount + SurchargeAmount + eCESSAmount + SHECessAmount);
    END;

    LOCAL PROCEDURE CalcExpectedTCSAmounts@1500009(VAR ExpectedTCSEntry@1500009 : Record 16514;TCSSetup@1500001 : Record 16508;TaxBaseAmount@1500007 : Decimal;SurchargeOverlook@1500002 : Boolean);
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" := TaxBaseAmount;
        "TCS %" := TCSSetup."TCS %";
        "TCS Amount" := LibraryTCS.RoundTCS(TCSSetup."TCS %" / 100 * "TCS Base Amount");
        IF SurchargeOverlook THEN BEGIN
          "Surcharge %" := TCSSetup."Surcharge %";
          "Surcharge Amount" := LibraryTCS.RoundTCS(TCSSetup."Surcharge %" / 100 * "TCS Amount");
        END;
        "eCESS %" := TCSSetup."eCESS %";
        "eCESS Amount" := LibraryTCS.RoundTCS(TCSSetup."eCESS %" / 100 * ("TCS Amount" + "Surcharge Amount"));
        "SHE Cess %" := TCSSetup."SHE Cess %";
        "SHE Cess Amount" := LibraryTCS.RoundTCS(TCSSetup."SHE Cess %" / 100 * ("TCS Amount" + "Surcharge Amount"));
        "Total TCS Including SHE CESS" := "TCS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE LookupToApplyInvoice@1500002(GenJournalLine@1500000 : Record 81;InvoiceNo@1500001 : Code[20]);
    VAR
      CashReceiptJournal@1500002 : TestPage 255;
      ApplyCustomerEntries@1500003 : TestPage 232;
    BEGIN
      CashReceiptJournal.OPENEDIT;
      CashReceiptJournal.GOTORECORD(GenJournalLine);
      ApplyCustomerEntries.TRAP;
      CashReceiptJournal."Applies-to Doc. No.".LOOKUP;
      // ApplyCustomerEntriesHandler picks a first entry
      CashReceiptJournal."Applies-to Doc. No.".ASSERTEQUALS(InvoiceNo);
      CashReceiptJournal.OK.INVOKE;
    END;

    LOCAL PROCEDURE RoundTCSAmount@1500257(TCSAmount@1500000 : Decimal) : Decimal;
    VAR
      GLSetup@1500003 : Record 98;
      TCSRoundingDirection@1500002 : Text[1];
      TCSRoundingPrecision@1500001 : Decimal;
    BEGIN
      GLSetup.GET;
      WITH GLSetup DO BEGIN
        CASE "TCS Rounding Type" OF
          "TCS Rounding Type"::Nearest:
            TCSRoundingDirection := '=';
          "TCS Rounding Type"::Up:
            TCSRoundingDirection := '>';
          "TCS Rounding Type"::Down:
            TCSRoundingDirection := '<';
        END;

        IF "TCS Rounding Precision" <> 0 THEN
          TCSRoundingPrecision := "TCS Rounding Precision"
        ELSE
          TCSRoundingPrecision := 1;

        EXIT(ROUND(TCSAmount,TCSRoundingPrecision,TCSRoundingDirection));
      END;
    END;

    LOCAL PROCEDURE FindTCSSetup@1500665(VAR TCSSetup@1500004 : Record 16508;TCSCode@1500003 : Code[20];AssesseeCode@1500002 : Code[20];Type@1500001 : Option;EffecticeDate@1500000 : Date);
    BEGIN
      WITH TCSSetup DO BEGIN
        SETRANGE("TCS Nature of Collection",TCSCode);
        SETRANGE("Assessee Code",AssesseeCode);
        SETRANGE("TCS Type",Type);
        SETRANGE("Effective Date",0D,EffecticeDate);
        FINDLAST;
      END;
    END;

    LOCAL PROCEDURE CalculateTCSAmount@1500661(TCSNatureOfCollection@1500689 : Code[20];Type@1500852 : Option;EffecticeDate@1500611 : Date;VAR AccountNo@1500613 : Code[20];Amount@1500615 : Decimal;LineDisPer@1500616 : Decimal;InvDisAmount@1500617 : Decimal) : Decimal;
    VAR
      TCSSetup@1500654 : Record 16508;
    BEGIN
      FindTCSSetup(TCSSetup,TCSNatureOfCollection,FindAssesseCode,Type,EffecticeDate);
      AccountNo := TCSSetup."TCS Account No.";
      EXIT(CalculateTCSForVerification(Amount - ((Amount * (LineDisPer / 100)) + InvDisAmount),TCSSetup));
    END;

    LOCAL PROCEDURE CreateSalesInvoice@1500678(VAR SalesHeader@1500022 : Record 36;CustomerNo@1500033 : Code[20];VAR TCSAmount@1500044 : ARRAY [2] OF Decimal;VAR AccountNo@1500055 : ARRAY [2] OF Code[20]);
    VAR
      SalesLine@1500001 : Record 37;
      TCSNatureOfCollection@1500058 : Record 16507;
      Amount@1500002 : Decimal;
      LineDisPer@1500003 : Decimal;
      InvDisAmount@1500004 : Decimal;
    BEGIN
      Amount := LibraryRandom.RandDecInDecimalRange(1000,10000,2); // For Random Value.
      LineDisPer := LibraryRandom.RandIntInRange(1,10); // For Random Value.
      InvDisAmount := LibraryRandom.RandDecInDecimalRange(10,100,2); // For Random Value.
      CreateSalesHeader(SalesHeader,CustomerNo);
      CreateSalesLines(
        SalesLine,SalesHeader,FindTCSNatureOfCollection(TCSNatureOfCollection."TCS Type"::E),Amount,LineDisPer,InvDisAmount);
      CreateSalesLines(
        SalesLine,SalesHeader,FindTCSNatureOfCollection(TCSNatureOfCollection."TCS Type"::A),Amount,LineDisPer,InvDisAmount);
      TCSAmount[1] :=
        CalculateTCSAmount(FindTCSNatureOfCollection(TCSNatureOfCollection."TCS Type"::E),TCSNatureOfCollection."TCS Type"::E,
          SalesHeader."Posting Date",AccountNo[1],Amount,LineDisPer,InvDisAmount);
      TCSAmount[2] :=
        CalculateTCSAmount(FindTCSNatureOfCollection(TCSNatureOfCollection."TCS Type"::A),TCSNatureOfCollection."TCS Type"::A,
          SalesHeader."Posting Date",AccountNo[2],Amount,LineDisPer,InvDisAmount);
    END;

    LOCAL PROCEDURE CreateSalesDocument@1500005(VAR SalesHeader@1500007 : Record 36;VAR SalesLine@1500006 : Record 37;DocumentType@1500005 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';CustomerNo@1500004 : Code[20];TCSNatureCode@1500001 : Code[10];AssesseeCode@1500000 : Code[10];Amount@1500002 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE("Assessee Code",AssesseeCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,1);
      SalesLine.VALIDATE("TCS Nature of Collection",TCSNatureCode);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustomerEntriesHandler@1500033(VAR ApplyCustomerEntries@1500000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500004(ExpectedTCSEntry@1500003 : Record 16514;DocumentNo@1500002 : Code[20];DocumentType@1500001 : ',Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder');
    VAR
      TCSEntry@1500005 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("Document Type",DocumentType);
      TCSEntry.FINDLAST;

      Assert.AreEqual(
        ExpectedTCSEntry."TCS Base Amount",TCSEntry."TCS Base Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Base Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."TCS %",TCSEntry."TCS %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."TCS Amount",TCSEntry."TCS Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."Surcharge %",TCSEntry."Surcharge %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."Surcharge Amount",TCSEntry."Surcharge Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."eCESS %",TCSEntry."eCESS %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."eCESS Amount",TCSEntry."eCESS Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."SHE Cess %",TCSEntry."SHE Cess %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."SHE Cess Amount",TCSEntry."SHE Cess Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess Amount"),TCSEntry.TABLECAPTION));
    END;

    BEGIN
    END.
  }
}

