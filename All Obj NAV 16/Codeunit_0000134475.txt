OBJECT Codeunit 134475 ERM Dimension Sales
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      StandardCustomerSalesCode@1008 : Record 172;
      Assert@1004 : Codeunit 130000;
      LibrarySales@1005 : Codeunit 130509;
      LibraryDimension@1012 : Codeunit 131001;
      LibraryERM@1009 : Codeunit 131300;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryWarehouse@1017 : Codeunit 132204;
      LibraryVariableStorage@1013 : Codeunit 131004;
      LibrarySetupStorage@1006 : Codeunit 131009;
      LibraryRandom@1010 : Codeunit 130440;
      IsInitialized@1002 : Boolean;
      UnknownError@1003 : TextConst 'ENU=Unknown error.';
      DimensionHeaderError@1001 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. Select %3 %4 for the %5 %6 for %7 %8.';
      DimensionLineError@1000 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. Select %4 %5 for the %6 %7 for %8 %9.';
      DimensionValueCodeError@1007 : TextConst 'ENU=%1 must be %2.';
      DimSetEntryFilterError@1011 : TextConst 'ENU=There is no Dimension Set Entry within the filter.';
      UpdateAutomaticCostMessage@1015 : TextConst 'ENU=The field Automatic Cost Posting should not be set to Yes if field Use Legacy G/L Entry Locking in General Ledger Setup table is set to No because of possibility of deadlocks.';
      UpdateAutomaticCostPeriodMessage@1014 : TextConst 'ENU=Some unadjusted value entries will not be covered with the new setting.';
      NoSalesInvoiceDocWithDimSetIDErr@1018 : TextConst 'ENU="There is no Sales Invoice with Dimension Set ID = %1"';
      SalesInvoiceDocCntErr@1019 : TextConst 'ENU=Wrong number of created Sales Invoices.';
      UpdateFromHeaderLinesQst@1021 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateLineDimQst@1022 : TextConst 'ENU=You have changed one or more dimensions on the';

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE DimensionUpdateOnLine@16();
    VAR
      DimensionSetEntry@1004 : Record 480;
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimensionValueCode@1006 : Code[20];
      ShortcutDimensionCode@1002 : Code[20];
      DimensionSetID@1001 : Integer;
    BEGIN
      // Test Dimension on Sales Line updated successfully after updation of Dimension on Sales Header.

      // 1. Create Customer, Item, Sales Header with Dimension and Sales Line, Change Dimension Value for Sales Header Dimension
      // and Select Yes on Confirmation message occurs for updating Dimension on Sales Line.
      Initialize;
      CreateSalesOrderWithDimension(TempDimensionSetEntry,DimensionValueCode,ShortcutDimensionCode,DimensionSetID);

      // 2. Verify: Verify Dimension Set Entry and Dimension on Sales Line successfully updated.
      VerifyDimensionSetEntry(TempDimensionSetEntry,DimensionSetID);

      FindDimensionSetEntry(DimensionSetEntry,ShortcutDimensionCode,DimensionSetID);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE DimensionNotUpdateOnLine@2();
    VAR
      DimensionSetEntry@1004 : Record 480;
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimensionValueCode@1007 : Code[20];
      ShortcutDimensionCode@1002 : Code[20];
      DimensionSetID@1001 : Integer;
    BEGIN
      // Test Dimension on Sales Line not updated after updation of Dimension on Sales Header.

      // 1. Create Customer, Item, Sales Header with Dimension and Sales Line, Change Dimension Value for Sales Header Dimension
      // and Select No on Confirmation message occurs for updating Dimension on Sales Line.
      Initialize;
      CreateSalesOrderWithDimension(TempDimensionSetEntry,DimensionValueCode,ShortcutDimensionCode,DimensionSetID);

      // 2. Verify: Verify Dimension Set Entry and Dimension on Sales Line not updated.
      VerifyDimensionSetEntry(TempDimensionSetEntry,DimensionSetID);

      FindDimensionSetEntry(DimensionSetEntry,ShortcutDimensionCode,DimensionSetID);
      Assert.AreNotEqual(
        DimensionValueCode,
        DimensionSetEntry."Dimension Value Code",
        STRSUBSTNO(
          DimensionValueCodeError,DimensionSetEntry.FIELDCAPTION("Dimension Value Code"),DimensionSetEntry."Dimension Value Code"));
    END;

    [Test]
    PROCEDURE ValuePostingRuleOnHeader@3();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Customer@1005 : Record 18;
      Dimension@1002 : Record 348;
      DefaultDimension@1003 : Record 352;
    BEGIN
      // Test error occurs on Posting Sales Invoice with Invalid Dimension On Sales Header.

      // 1. Setup: Create Customer with Default Dimension, Item, Sales Header and Update value of Dimension on Sales Header.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,Dimension.Code,'',DefaultDimension."Value Posting"::"Same Code",SalesHeader."Document Type"::Invoice);
      UpdateDimensionOnSalesHeader(SalesHeader);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,SalesHeader."Sell-to Customer No.");

      // 2. Exercise: Post Sales Invoice.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Invalid Dimension" on Posting Sales Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          DimensionHeaderError,SalesHeader."Document Type",SalesHeader."No.",DefaultDimension.FIELDCAPTION("Dimension Value Code"),
          DefaultDimension."Dimension Value Code",DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",
          Customer.TABLECAPTION,DefaultDimension."No."),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE ValuePostingRuleOnLine@7();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
      Dimension@1004 : Record 348;
      DefaultDimension@1003 : Record 352;
    BEGIN
      // Test error occurs on Posting Sales Invoice with Invalid Dimension On Sales Line.

      // 1. Setup: Create Customer, Item with Default Dimension, Sales Header and Update value of Dimension on Sales Line.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,'',Dimension.Code,DefaultDimension."Value Posting"::"Same Code",SalesHeader."Document Type"::Invoice);
      UpdateDimensionOnSalesLine(SalesLine);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,SalesLine."No.");

      // 2. Exercise: Post Sales Invoice.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Invalid Dimension" on Posting Sales Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          DimensionLineError,SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
          DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",Item.TABLECAPTION,DefaultDimension."No."),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE OrderFromQuoteWithDimension@4();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Dimension@1004 : Record 348;
      DefaultDimension@1003 : Record 352;
      DimensionSetIdHeader@1015 : Integer;
      DimensionSetIdLine@1016 : Integer;
    BEGIN
      // Test Dimension on Sales Order Created from Sales Quote.

      // 1. Setup: Stockout warning False on Sales and Receivable Setup, Create Customer and Item with Default Dimension, Sales Order.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,Dimension.Code,FindDifferentDimension(Dimension.Code),DefaultDimension."Value Posting"::" ",
        SalesHeader."Document Type"::Quote);
      DimensionSetIdHeader := SalesHeader."Dimension Set ID";
      DimensionSetIdLine := SalesLine."Dimension Set ID";

      // 2. Exercise: Convert Sales Quote to Order.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);

      // 3. Verify: Verify Dimension on created Sales Header and Sales Line.
      FindSalesOrder(SalesHeader,SalesHeader."No.");
      SalesHeader.TESTFIELD("Dimension Set ID",DimensionSetIdHeader);

      FindSalesLine(SalesLine,SalesHeader);
      SalesLine.TESTFIELD("Dimension Set ID",DimensionSetIdLine);

      // 4. Teardown: Rollback Stockout warning on Sales and Receivable Setup.
      LibrarySales.SetStockoutWarning(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CombineShipment@5();
    VAR
      SalesLine@1001 : Record 37;
      SalesLine2@1015 : Record 37;
      CustNo@1000 : Code[20];
    BEGIN
      // Test Dimension on Sales Line created from Combine Shipment.

      // 1. Setup: Create Customer, Item with Default Dimension, Two Sales Order with Combine Shipment True and Post both as Ship.
      Initialize;
      CustNo := CreateCustWithCombShip;
      CreateAndPostSalesOrder(SalesLine,CustNo);
      CreateAndPostSalesOrder(SalesLine2,CustNo);

      // 2. Exercise: Run Combine Shipments Report.
      RunCombineShipment(SalesLine."Sell-to Customer No.");

      // 3. Verify: Verify Dimension on Sales Line created after Combine Shipment.
      VerifySalesLineDimension(SalesLine);
      VerifySalesLineDimension(SalesLine2);
    END;

    [Test]
    PROCEDURE GLEntryDimension@22();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1004 : Record 37;
      Dimension@1005 : Record 348;
      DefaultDimension@1003 : Record 352;
      DocumentNo@1015 : Code[20];
    BEGIN
      // Test Dimension on G/L Entry after Posting Sales Invoice.

      // 1. Setup: Create Customer, Items and Sales Invoice for different Items.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,'',Dimension.Code,DefaultDimension."Value Posting"::" ",SalesHeader."Document Type"::Invoice);

      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(
        SalesLine2,SalesHeader,SalesLine2.Type::Item,
        CreateItemWithDimension(FindDifferentDimension(Dimension.Code),DefaultDimension."Value Posting"::" "),
        LibraryRandom.RandDec(10,2));

      // 2. Exercise: Post the Sales Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // 3. Verify: Verify Dimension on G/L Entry.
      VerifyGLEntryDimension(SalesLine,DocumentNo);
      VerifyGLEntryDimension(SalesLine2,DocumentNo);
    END;

    [Test]
    PROCEDURE ChangeDimensionAfterPartial@29();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Dimension@1005 : Record 348;
      DefaultDimension@1004 : Record 352;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test Dimension on G/L Entry after Posting Sales Order in Multiple Steps with Change Dimension Value on Sales Line.

      // 1. Setup: Create Customer, Item, Create and Post Sales Order Partially.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,'',Dimension.Code,DefaultDimension."Value Posting"::" ",SalesHeader."Document Type"::Order);
      UpdatePartialQuantityToShip(SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Update Dimension Value on Sales Line Dimension and Post Sales Order.
      UpdateDimensionOnSalesLine(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify Dimension on G/L Entry.
      VerifyGLEntryDimension(SalesLine,DocumentNo);
    END;

    [Test]
    PROCEDURE ChangeShortcutDimensionInvoice@24();
    VAR
      SalesHeader@1005 : Record 36;
      Customer@1004 : Record 18;
      GeneralLedgerSetup@1003 : Record 98;
      DimensionValue@1002 : Record 349;
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      // Test Sales Header Dimension after change Shortcut Dimension 2 Code on Sales Invoice Header.

      // 1. Setup: Create Customer.
      Initialize;
      GeneralLedgerSetup.GET;
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Create Sales Header and Update Shortcut Dimension 2 Code on Sales Header.
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 2 Code");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
      SalesHeader.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
      SalesHeader.MODIFY(TRUE);

      // 3. Verify: Verify Sales Header Dimension.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesHeader."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",GeneralLedgerSetup."Shortcut Dimension 2 Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",SalesHeader."Shortcut Dimension 2 Code");
    END;

    [Test]
    PROCEDURE CopyDocumentWithDimension@1();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Dimension@1003 : Record 348;
      DefaultDimension@1004 : Record 352;
      SalesShipmentHeader@1007 : Record 110;
      SalesShipmentLine@1002 : Record 111;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Test Dimension on Sales Invoice Created from Copy Document.

      // 1. Setup: Set Stockout warning False on Sales and Receivable Setup, Create Customer with Default Dimension, Item,
      // Create and Post Sales Order.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,Dimension.Code,FindDifferentDimension(Dimension.Code),DefaultDimension."Value Posting"::" ",
        SalesHeader."Document Type"::Order);
      UpdatePartialQuantityToShip(SalesLine);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      SalesShipmentHeader.GET(DocumentNo);

      // 2. Exercise: Create Sales Invoice through Copy Document.
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,SalesLine."Sell-to Customer No.");
      RunCopySalesDocument(SalesHeader,SalesShipmentHeader."No.");

      // 3. Verify: Verify Dimension on Sales Header and Sales Line.
      SalesHeader.TESTFIELD("Dimension Set ID",SalesShipmentHeader."Dimension Set ID");
      SalesLine.SETFILTER(Type,'<>''''');
      FindSalesLine(SalesLine,SalesHeader);
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesShipmentLine.FINDFIRST;
      SalesLine.TESTFIELD("Dimension Set ID",SalesShipmentLine."Dimension Set ID");

      // 4. Teardown: Rollback Stockout warning on Sales and Receivable Setup.
      LibrarySales.SetStockoutWarning(TRUE);
    END;

    [Test]
    PROCEDURE DimensionOnInvoiceRounding@33();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Dimension@1002 : Record 348;
      DefaultDimension@1004 : Record 352;
    BEGIN
      // Test Dimension on G/L Entry of Invoice Rounding.

      // 1. Setup: Update Inv. Rounding Precision (LCY) on General Ledger Setup, Create Customer with Default Dimension, Item,
      // Create Sales Invoice and Update Line Amount on Sales Line.
      Initialize;
      LibraryDimension.FindDimension(Dimension);

      LibraryERM.SetInvRoundingPrecisionLCY(0.1);

      CreateSalesOrder(
        SalesHeader,SalesLine,Dimension.Code,'',DefaultDimension."Value Posting"::" ",SalesHeader."Document Type"::Invoice);
      UpdateInvoiceAmountForRounding(SalesLine);

      // 2. Exercise: Post Sales Invoice.
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // 3. Verify: Verify Dimension on G/L Entry of Invoice Rounding.
      VerifyDimensionOnRoundingEntry(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE ArchiveDocument@40();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Dimension@1003 : Record 348;
      DefaultDimension@1004 : Record 352;
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      // Test Dimension on Archive Sales Order.

      // 1. Setup: Create Customer with Default Dimension, Item, Sales Order.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateSalesOrder(
        SalesHeader,SalesLine,Dimension.Code,'',DefaultDimension."Value Posting"::" ",SalesHeader."Document Type"::Order);

      // 2. Exercise: Create Archive Sales Order.
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 3. Verify: Verify Dimension on Archive Sales Order.
      VerifyDimensionOnArchiveHeader(SalesHeader);
      VerifyDimensionOnArchiveLine(SalesLine);
    END;

    [Test]
    [HandlerFunctions(SalesCodePageHandler)]
    PROCEDURE DimensionStandardSalesCode@17();
    VAR
      Item@1005 : Record 27;
      Dimension@1003 : Record 348;
      StandardSalesLine@1009 : Record 171;
      Customer@1013 : Record 18;
      SalesHeader@1015 : Record 36;
      DifferentDimensionCode@1012 : Code[20];
    BEGIN
      // Test Dimension on Standard Sales Code.

      // 1. Setup : Create Item and find Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateItemWithExtendedText(Item,Dimension.Code);

      // 2. Exercise : Create Customer, GL Account, Standard Sales Code, Standard Sales Line and Standard Customer Sales Code.
      DifferentDimensionCode :=
        CreateStandardSalesDocument(
          StandardSalesLine,Dimension.Code,Item."No.",CreateGLAccountWithDimension(Dimension.Code,Item."VAT Prod. Posting Group"));
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomerSalesCode(StandardCustomerSalesCode,Customer."No.",StandardSalesLine."Standard Sales Code");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      StandardCustomerSalesCode.InsertSalesLines(SalesHeader);

      // 3. Verify : Verify that Line Dimensions copied from Standard Sales Line.
      VerifyDimensionCode(StandardSalesLine."Dimension Set ID",DifferentDimensionCode);
    END;

    [Test]
    [HandlerFunctions(SalesCodePageHandler)]
    PROCEDURE DimensionOnCustomerAndStandardSalesCode@30();
    VAR
      Item@1005 : Record 27;
      Dimension@1003 : Record 348;
      Customer@1006 : Record 18;
      StandardSalesLine@1009 : Record 171;
      SalesHeader@1015 : Record 36;
      SalesLine@1000 : Record 37;
      DefaultDimension@1001 : Record 352;
      StandardSalesCode@1004 : Record 170;
      DifferentDimensionCode@1007 : Code[20];
    BEGIN
      // Test Dimensions are "merged" between the ones coming from Standard Sales Code and Sales Header (customer)

      // 1. Setup : Create Item and customer with dimensions
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateItemWithExtendedText(Item,Dimension.Code);
      DifferentDimensionCode := FindDifferentDimension(Dimension.Code);
      Customer.GET(CreateCustomerWithDimension(DefaultDimension,DefaultDimension."Value Posting",DifferentDimensionCode));

      // Create Standard Codes and sales header
      LibrarySales.CreateStandardSalesCode(StandardSalesCode);
      CreateStandardSalesLine(StandardSalesLine,StandardSalesCode.Code,StandardSalesLine.Type::Item,Item."No.");
      UpdateDimensionSetID(StandardSalesLine,Dimension.Code);
      LibrarySales.CreateCustomerSalesCode(StandardCustomerSalesCode,Customer."No.",StandardSalesLine."Standard Sales Code");

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");

      // 2. Exercise
      StandardCustomerSalesCode.InsertSalesLines(SalesHeader);

      // 3. Verify : Verify that sales Line Dimensions are copied from Standard Sales Line and header
      FindSalesLine(SalesLine,SalesHeader);
      VerifyDimensionCode(SalesLine."Dimension Set ID",Dimension.Code);
      VerifyDimensionCode(SalesLine."Dimension Set ID",DefaultDimension."Dimension Code");
    END;

    [Test]
    PROCEDURE SalesLineDimension@39();
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      DefaultDimension@1000 : Record 352;
      DefaultDimension2@1001 : Record 352;
      SalesLine@1003 : Record 37;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      // Check Sales Line Dimension.

      // Setup.
      Initialize;

      // Exercise: Create Sales Credit Memo.
      GeneralLedgerSetup.GET;
      CreateSalesDocument(SalesLine,SetGLAccountDefaultDimension(DefaultDimension,GeneralLedgerSetup."Global Dimension 1 Code"),
        CreateCustomerWithDimension(DefaultDimension2,DefaultDimension."Value Posting",GeneralLedgerSetup."Global Dimension 1 Code"));

      // Verify: Verify Dimension Value on Sales Line.
      DimensionSetEntry.GET(SalesLine."Dimension Set ID",GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",SalesLine."Shortcut Dimension 1 Code");

      // Tear Down: Remove Default Dimension from G/L Account.
      DeleteDefaultDimension(DefaultDimension);
    END;

    [Test]
    PROCEDURE GLEntryDimensionsForSales@38();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      DefaultDimension@1000 : Record 352;
      DefaultDimension2@1001 : Record 352;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      PostedDocumentNo@1005 : Code[20];
    BEGIN
      // Test Dimension on G/L Entry after posting Sales document with IC Partner.

      // Setup: Set Default Dimension for G/L Account and Create Sales Credit Memo.
      Initialize;
      GeneralLedgerSetup.GET;
      CreateSalesDocument(SalesLine,SetGLAccountDefaultDimension(DefaultDimension,GeneralLedgerSetup."Global Dimension 1 Code"),
        CreateCustomerWithDimension(DefaultDimension2,DefaultDimension."Value Posting",GeneralLedgerSetup."Global Dimension 1 Code"));

      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("IC Partner Code",FindICPartner);
      SalesLine.VALIDATE("IC Partner Reference",FindICGLAccount);
      SalesLine.MODIFY(TRUE);

      // Exercise: Post Sales Credit Memo.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // Verify: Verify Dimension Value and IC Partner Code on GL Entry.
      VerifyGLEntryICPartner(PostedDocumentNo,SalesLine."IC Partner Code",DefaultDimension."Dimension Value Code");

      // Tear Down: Remove Default Dimension from G/L Account.
      DeleteDefaultDimension(DefaultDimension);
    END;

    [Test]
    PROCEDURE DimensionAfterApplyForCustomer@49();
    VAR
      Dimension@1001 : Record 348;
      DefaultDimension@1002 : Record 352;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Test Dimension on G/L Entry after Apply from Customer Ledger Entry.

      // Setup: Find Dimension, Create and Post General Journal Line.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      CreateAndPostGenJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::Customer,
        CreateCustomerWithDimension(DefaultDimension,DefaultDimension."Value Posting"::" ",Dimension.Code),
        LibraryRandom.RandDec(100,2));

      // Exercise: Apply Payment from Customer Ledger Entry.
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.",GenJournalLine.Amount,GenJournalLine."Document Type");

      // Verify: Verify Dimension on G/L Entry.
      VerifyGLEntry(GenJournalLine."Document No.",Dimension.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE ChangeSalesRetOrdDim@51();
    VAR
      DefaultDimension@1002 : Record 352;
      DimensionSetEntry@1008 : Record 480;
      GeneralLedgerSetup@1004 : Record 98;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Test changed Sales Return Header Shortcut Dimension 1 Code.

      // Setup: Create Sales Return Order.
      Initialize;
      GeneralLedgerSetup.GET;
      CreateSalesOrder(
        SalesHeader,SalesLine,GeneralLedgerSetup."Shortcut Dimension 1 Code",'',DefaultDimension."Value Posting"::"Same Code",
        SalesHeader."Document Type"::"Return Order");

      // Exercise: Change Shortcut Dimension 2 Code on Sales Return Header.
      ChangeDimensionOnSalesHeader(SalesHeader,GeneralLedgerSetup."Shortcut Dimension 1 Code");

      // Verify: Verify Sales Return Header Dimension.
      FindDimensionSetEntry(DimensionSetEntry,GeneralLedgerSetup."Shortcut Dimension 1 Code",SalesHeader."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",SalesHeader."Shortcut Dimension 1 Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE InsertSalesRetOrdDim@78();
    VAR
      DefaultDimension@1000 : Record 352;
      DimensionSetEntry@1005 : Record 480;
      GeneralLedgerSetup@1003 : Record 98;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Test inserted Sales Return Header Shortcut Dimension 2 Code.

      // Setup: Create Sales Return Order.
      Initialize;
      GeneralLedgerSetup.GET;
      CreateSalesOrder(
        SalesHeader,SalesLine,GeneralLedgerSetup."Shortcut Dimension 1 Code",'',DefaultDimension."Value Posting"::"Same Code",
        SalesHeader."Document Type"::"Return Order");

      // Exercise: Insert Shortcut Dimension 2 Code on Sales Return Header.
      InsertDimOnSalesHdr(SalesHeader,GeneralLedgerSetup."Shortcut Dimension 2 Code");

      // Verify: Verify Sales Return Header Shortcut Dimension 2 Code.
      FindDimensionSetEntry(DimensionSetEntry,GeneralLedgerSetup."Shortcut Dimension 2 Code",SalesHeader."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",SalesHeader."Shortcut Dimension 2 Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE DeleteSalesRetOrdDimError@86();
    VAR
      DefaultDimension@1000 : Record 352;
      DimensionSetEntry@1005 : Record 480;
      GeneralLedgerSetup@1003 : Record 98;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify error while filtering Dimension Set Entry after deleting Sales Return Header Shortcut Dimension 1 Code.

      // Setup: Create Sales Return Order, delete Shortcut Dimension 1 Code.
      Initialize;
      GeneralLedgerSetup.GET;
      CreateSalesOrder(
        SalesHeader,SalesLine,GeneralLedgerSetup."Shortcut Dimension 1 Code",'',DefaultDimension."Value Posting"::"Same Code",
        SalesHeader."Document Type"::"Return Order");
      SalesHeader.VALIDATE("Shortcut Dimension 1 Code",'');  // Balank value for Shortcut Dimension 1 Code.
      SalesHeader.MODIFY(TRUE);

      // Exercise: Find Shortcut Dimension 1 Code in Dimension Set Entry.
      ASSERTERROR LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesHeader."Dimension Set ID");

      // Verify: Verify error of Dimension Set Entry.
      Assert.ExpectedError(DimSetEntryFilterError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostSalesOrderWithDefaultDimension@35();
    VAR
      InventorySetup@1003 : Record 313;
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      DefaultDimension@1005 : Record 352;
      SalesHeader@1008 : Record 36;
      GLEntry@1004 : Record 17;
      PostedInvoiceNo@1000 : Code[20];
    BEGIN
      // Verify GL Entry after post Sales Order with Dimension which attached as a Default Dimension on Inventory Account.

      // Setup: Update Inventory Setup, create Item, create Location with Inventory Setup.
      Initialize;
      LibraryVariableStorage.Enqueue(UpdateAutomaticCostMessage);  // Enqueue for MessageHandler
      LibraryVariableStorage.Enqueue(UpdateAutomaticCostPeriodMessage);  // Enqueue for MessageHandler
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,TRUE,FALSE,InventorySetup."Automatic Cost Adjustment"::Always,InventorySetup."Average Cost Calc. Type",
        InventorySetup."Average Cost Period");
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // Set Default Dimension on Inventory Accout, create Sales Order and post.
      SetInvGLAccountDefaultDimension(DefaultDimension,Location.Code,Item."Inventory Posting Group");
      CreateSalesDocumentWithLocation(
        SalesHeader,DefaultDimension."Dimension Value Code",Location.Code,Item."No.",LibraryRandom.RandInt(10));  // Using Random Int for Unit Price.

      // Exercise.
      PostedInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify GL Entry after post Sales Order with Dimension.
      VerifyDimensionOnGLEntry(
        GLEntry."Document Type"::Invoice,PostedInvoiceNo,GLEntry."Gen. Posting Type"::Sale,DefaultDimension."Dimension Value Code");
      VerifyDimensionOnGLEntry(
        GLEntry."Document Type"::Invoice,PostedInvoiceNo,GLEntry."Gen. Posting Type"::" ",DefaultDimension."Dimension Value Code");

      // Tear Down.
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,InventorySetup."Average Cost Calc. Type",
        InventorySetup."Average Cost Period");
      DeleteDefaultDimension(DefaultDimension);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostPhysInvWithDefaultDimension@66();
    VAR
      InventorySetup@1003 : Record 313;
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      DefaultDimension@1005 : Record 352;
      SalesHeader@1008 : Record 36;
      GLEntry@1004 : Record 17;
      ItemJournalLine@1006 : Record 83;
    BEGIN
      // Verify GL Entry after post Physical Inventory Journal with Dimension which attached as a Default Dimension on Inventory Account.

      // Setup: Update Inventory Setup, create Item, create Location with Inventory Setup.
      Initialize;
      LibraryVariableStorage.Enqueue(UpdateAutomaticCostMessage);  // Enqueue for MessageHandler
      LibraryVariableStorage.Enqueue(UpdateAutomaticCostPeriodMessage);  // Enqueue for MessageHandler
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,TRUE,FALSE,InventorySetup."Automatic Cost Adjustment"::Always,InventorySetup."Average Cost Calc. Type",
        InventorySetup."Average Cost Period");
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      SetInvGLAccountDefaultDimension(DefaultDimension,Location.Code,Item."Inventory Posting Group");

      // Create Sales Order and Post, create Item Journal, Calculate Inventory.
      CreateSalesDocumentWithLocation(
        SalesHeader,DefaultDimension."Dimension Value Code",Location.Code,Item."No.",LibraryRandom.RandDec(10,2));  // Using Random Dec for Unit Price.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateItemJournalAndCalculateInventory(ItemJournalLine,Item."No.",DefaultDimension);

      // Exercise.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify GL Entry after post Physical Inventory Journal with Dimension.
      VerifyDimensionOnGLEntry(
        GLEntry."Document Type"::" ",ItemJournalLine."Document No.",GLEntry."Gen. Posting Type"::" ",
        DefaultDimension."Dimension Value Code");

      // Tear Down.
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,FALSE,FALSE,InventorySetup."Automatic Cost Adjustment"::Never,InventorySetup."Average Cost Calc. Type",
        InventorySetup."Average Cost Period");
      DeleteDefaultDimension(DefaultDimension);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CombineShipmentsWithDifferentDimensions@55();
    VAR
      SalesHeader@1002 : Record 36;
      CustomerNo@1000 : Code[20];
      DimSetID@1001 : ARRAY [2] OF Integer;
    BEGIN
      // [SCENARIO 122222] Combine Shipment Report combines documents by dimensions
      Initialize;
      DimSetID[1] := CreateDimSetID;
      DimSetID[2] := CreateDimSetID;

      // [GIVEN] Customer with "Combine Shipments"=TRUE
      CustomerNo := CreateCustWithCombShip;

      // [GIVEN] Create and Ship Sales Order with DimSetID = "D1"
      // [GIVEN] Create and Ship Sales Order with DimSetID = "D2"
      CreateShipTwoSalesOrdersWithGivenDimSetID(CustomerNo,DimSetID);

      // [GIVEN] Create and Ship Sales Order with DimSetID = "D1"
      // [GIVEN] Create and Ship Sales Order with DimSetID = "D2"
      CreateShipTwoSalesOrdersWithGivenDimSetID(CustomerNo,DimSetID);

      // [WHEN] Run Combine Shipments Report
      RunCombineShipment(CustomerNo);

      // [THEN] Report has generated 2 new Invoices
      SalesHeader.SETRANGE("Bill-to Customer No.",CustomerNo);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      Assert.AreEqual(2,SalesHeader.COUNT,SalesInvoiceDocCntErr);

      // [THEN] New Invoices have Dimension Set ID = "D1", "D2"
      SalesHeader.SETRANGE("Dimension Set ID",DimSetID[1]);
      Assert.IsFalse(SalesHeader.ISEMPTY,STRSUBSTNO(NoSalesInvoiceDocWithDimSetIDErr,DimSetID[1]));

      SalesHeader.SETRANGE("Dimension Set ID",DimSetID[2]);
      Assert.IsFalse(SalesHeader.ISEMPTY,STRSUBSTNO(NoSalesInvoiceDocWithDimSetIDErr,DimSetID[2]));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForSalesHeaderDimUpdate)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderGlobalDimConfirmYes@58();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      Initialize;

      // [SCENARIO 378707] Sales Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      // [GIVEN] Sales Order with partly shipped Item line
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Sales Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      SalesHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForSalesHeaderDimUpdate

      // [THEN] Sales Line dimension set contains "NewDimValue"
      SalesLine.FIND;
      VerifyDimensionOnDimSet(SalesLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForSalesHeaderDimUpdate)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderGlobalDimConfirmNo@69();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      SavedDimSetID := SalesLine."Dimension Set ID";
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Sales Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      ASSERTERROR SalesHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer No on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForSalesHeaderDimUpdate

      // [THEN] Sales Line dimension set left "InitialDimSetID"
      SalesLine.FIND;
      SalesLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForSalesHeaderDimUpdate,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderDimSetPageConfirmYes@80();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
      SalesOrder@1003 : TestPage 42;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Header dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Sales Header dimension set is being updated in Edit Dimension Set Entries page
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForSalesHeaderDimUpdate

      // [THEN] Sales Line dimension set contains "NewDimValue"
      SalesLine.FIND;
      VerifyDimensionOnDimSet(SalesLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForSalesHeaderDimUpdate,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderDimSetPageConfirmNo@109();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
      SalesOrder@1003 : TestPage 42;
      SavedDimSetID@1004 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Header dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      SavedDimSetID := SalesLine."Dimension Set ID";
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Sales Header dimension set is being updated in Edit Dimension Set Entries page
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      ASSERTERROR SalesOrder.Dimensions.INVOKE;

      // [WHEN] Answer No on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForSalesHeaderDimUpdate

      // [THEN] Sales Line dimension set left "InitialDimSetID"
      SalesLine.FIND;
      SalesLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE PartlyShippedLineDimChangeFromLineGlobalDimConfirmYes@115();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Line Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Sales Line Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      SalesLine.FIND;
      SalesLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Sales Line dimension set contains "NewDimValue"
      VerifyDimensionOnDimSet(SalesLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE PartlyShippedLineDimChangeFromLineGlobalDimConfirmNo@114();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Line Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      SavedDimSetID := SalesLine."Dimension Set ID";
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Sales Line Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      SalesLine.FIND;
      ASSERTERROR SalesLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer No on shipped line update confirmation

      // [THEN] Sales Line dimension set left "InitialDimSetID"
      SalesLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromLineDimSetPageConfirmYes@68();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
      SalesOrder@1003 : TestPage 42;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Line dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Sales Line dimension set is being updated in Edit Dimension Set Entries page
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder.SalesLines.FIRST;
      SalesOrder.SalesLines.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Sales Line dimension set contains "NewDimValue"
      SalesLine.FIND;
      VerifyDimensionOnDimSet(SalesLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromLineDimSetPageConfirmNo@67();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      DimensionValue@1002 : Record 349;
      SalesOrder@1003 : TestPage 42;
      SavedDimSetID@1004 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Sales Line dimension change from Edit Dimension Set Entries page causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Sales Order with partly shipped Item line with some initial value "InitialDimSetID"
      CreatePartlyShipSalesOrder(SalesHeader,SalesLine);
      SavedDimSetID := SalesLine."Dimension Set ID";
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Sales Line dimension set is being updated in Edit Dimension Set Entries page
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder.SalesLines.FIRST;
      ASSERTERROR SalesOrder.SalesLines.Dimensions.INVOKE;

      // [WHEN] Answer No on shipped line update confirmation

      // [THEN] Sales Line dimension set left "InitialDimSetID"
      SalesLine.FIND;
      SalesLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerEntry@42(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentType@1001 : Option);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,CustLedgerEntry2."Document Type"::Invoice,DocumentNo);
      CustLedgerEntry2.FINDSET;
      REPEAT
        CustLedgerEntry2.CALCFIELDS("Remaining Amount");
        CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
        CustLedgerEntry2.MODIFY(TRUE);
      UNTIL CustLedgerEntry2.NEXT = 0;

      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE ChangeDimensionOnSalesHeader@13(VAR SalesHeader@1000 : Record 36;ShortcutDimensionCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      // Update Dimension value on Sales Header.
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesHeader."Dimension Set ID");
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimensionCode);
      DimensionSetEntry.FINDFIRST;
      SalesHeader.VALIDATE(
        "Shortcut Dimension 1 Code",
        FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CopyDimensionSetEntry@207(VAR TempDimensionSetEntry@1000 : TEMPORARY Record 480;VAR DimensionSetEntry@1001 : Record 480);
    BEGIN
      REPEAT
        TempDimensionSetEntry := DimensionSetEntry;
        TempDimensionSetEntry.INSERT;
      UNTIL DimensionSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateItemJournalAndCalculateInventory@105(VAR ItemJournalLine@1005 : Record 83;ItemNo@1000 : Code[20];DefaultDimension@1001 : Record 352);
    VAR
      ItemJournalBatch@1003 : Record 233;
      NoSeriesManagement@1002 : Codeunit 396;
    BEGIN
      // Find Item journal Batch and create Item Journal and Calculate Inventory.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::"Phys. Inventory");
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryInventory.CalculateInventory(ItemJournalLine,ItemNo,WORKDATE,TRUE);

      // Find created Item Journal Line.
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;

      // Update Item Journal Line and attach Dimension.
      ItemJournalLine.VALIDATE(
        "Document No.",NoSeriesManagement.GetNextNo(ItemJournalBatch."No. Series",ItemJournalLine."Posting Date",FALSE));
      ItemJournalLine.VALIDATE("Qty. (Phys. Inventory)",0);
      ItemJournalLine.VALIDATE("Unit Amount",LibraryRandom.RandDec(10,2));
      ItemJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(
          ItemJournalLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@10(VAR SalesLine@1015 : Record 37;CustomerNo@1000 : Code[20]);
    VAR
      SalesHeader@1013 : Record 36;
      Dimension@1002 : Record 348;
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // Use Random because value is not important.
      LibraryDimension.FindDimension(Dimension);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,
        CreateItemWithDimension(Dimension.Code,DefaultDimension."Value Posting"::" "),LibraryRandom.RandDec(10,2));

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateShipTwoSalesOrdersWithGivenDimSetID@62(CustomerNo@1001 : Code[20];DimSetIDs@1000 : ARRAY [2] OF Integer);
    BEGIN
      CreateShipSalesOrderWithDimSetID(CustomerNo,DimSetIDs[1]);
      CreateShipSalesOrderWithDimSetID(CustomerNo,DimSetIDs[2]);
    END;

    LOCAL PROCEDURE CreateShipSalesOrderWithDimSetID@77(CustomerNo@1000 : Code[20];DimSetID@1002 : Integer);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Dimension Set ID",DimSetID);
      SalesHeader.MODIFY;

      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(100,2));

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE); // Ship
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@88(VAR DefaultDimension@1000 : Record 352;ValuePosting@1004 : Option;DimensionCode@1001 : Code[20]) : Code[20];
    VAR
      Customer@1002 : Record 18;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      IF DimensionCode = '' THEN
        EXIT(Customer."No.");
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateDimensionSetEntry@21(VAR DimensionSetID@1000 : Integer;ShortcutDimensionCode@1005 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,FindDifferentDimension(ShortcutDimensionCode));
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,DimensionValue."Dimension Code",DimensionValue.Code);

      LibraryDimension.FindDimensionValue(DimensionValue,ShortcutDimensionCode);
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,ShortcutDimensionCode,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimensionSetEntryHeader@157(VAR SalesHeader@1000 : Record 36;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := SalesHeader."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      SalesHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionSetEntryLine@165(VAR SalesLine@1000 : Record 37;ShortcutDimensionCode@1001 : Code[20]);
    VAR
      DimensionSetID@1002 : Integer;
    BEGIN
      DimensionSetID := SalesLine."Dimension Set ID";
      CreateDimensionSetEntry(DimensionSetID,ShortcutDimensionCode);
      SalesLine.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithDimension@110(DimensionCode@1004 : Code[20];ValuePosting@1001 : Option) ItemNo : Code[20];
    VAR
      Item@1000 : Record 27;
      DefaultDimension@1003 : Record 352;
      DimensionValue@1006 : Record 349;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryUtility@1005 : Codeunit 131000;
    BEGIN
      LibraryInventory.CreateItem(Item);
      // Use Random because value is not important.
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";
      IF DimensionCode = '' THEN
        EXIT;
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@112(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37;CustomerDimensionCode@1000 : Code[20];ItemDimensionCode@1001 : Code[20];ValuePosting@1004 : Option;DocumentType@1005 : Option);
    VAR
      DefaultDimension@1008 : Record 352;
    BEGIN
      LibrarySales.CreateSalesHeader(
        SalesHeader,DocumentType,CreateCustomerWithDimension(DefaultDimension,ValuePosting,CustomerDimensionCode));

      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItemWithDimension(ItemDimensionCode,ValuePosting),
        LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDimension@12(VAR TempDimensionSetEntry@1001 : TEMPORARY Record 480;VAR DimensionValueCode@1006 : Code[20];VAR ShortcutDimensionCode@1004 : Code[20];VAR DimensionSetID@1005 : Integer);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      GeneralLedgerSetup@1007 : Record 98;
      DefaultDimension@1008 : Record 352;
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      // Setup: Create Customer, Item, Sales Header and Sales Line with Dimension.
      GeneralLedgerSetup.GET;
      ShortcutDimensionCode := GeneralLedgerSetup."Shortcut Dimension 1 Code";
      CreateSalesOrder(SalesHeader,SalesLine,'','',DefaultDimension."Value Posting"::" ",SalesHeader."Document Type"::Order);
      CreateDimensionSetEntryHeader(SalesHeader,ShortcutDimensionCode);
      CreateDimensionSetEntryLine(SalesLine,ShortcutDimensionCode);

      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesLine."Dimension Set ID");
      CopyDimensionSetEntry(TempDimensionSetEntry,DimensionSetEntry);
      TempDimensionSetEntry.SETFILTER("Dimension Code",'<>%1',ShortcutDimensionCode);
      TempDimensionSetEntry.FINDSET;

      // Exercise: Change Dimension Value for Sales Header Shortcut Dimension.
      ChangeDimensionOnSalesHeader(SalesHeader,ShortcutDimensionCode);
      FindSalesLine(SalesLine,SalesHeader);
      DimensionValueCode := SalesHeader."Shortcut Dimension 1 Code";
      DimensionSetID := SalesLine."Dimension Set ID";
    END;

    LOCAL PROCEDURE CreateItemWithExtendedText@26(VAR Item@1005 : Record 27;DimensionCode@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1001 : Record 280;
      LibraryService@1006 : Codeunit 131902;
    BEGIN
      Item.GET(CreateItemWithDimension(DimensionCode,DefaultDimension."Value Posting"::" "));
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
    END;

    LOCAL PROCEDURE CreateGLAccountWithDimension@23(DimensionCode@1004 : Code[20];VATProdPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      GLAccount@1001 : Record 15;
      DefaultDimension@1003 : Record 352;
      DimensionValue@1006 : Record 349;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      GLAccount.MODIFY(TRUE);
      IF DimensionCode = '' THEN
        EXIT;
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::" ");
      DefaultDimension.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithLocation@104(VAR SalesHeader@1001 : Record 36;ShortcutDimension1Code@1002 : Code[20];LocationCode@1003 : Code[10];ItemNo@1007 : Code[20];UnitPrice@1004 : Decimal);
    VAR
      Customer@1006 : Record 18;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      SalesHeader.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));  // Using Random value for Quantity.
      SalesLine.VALIDATE("Location Code",SalesHeader."Location Code");
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStandardSalesDocument@20(VAR StandardSalesLine@1000 : Record 171;DimensionCode@1004 : Code[20];ItemNo@1001 : Code[20];GLAccountNo@1005 : Code[20]) DifferentDimensionCode : Code[20];
    VAR
      StandardSalesCode@1002 : Record 170;
    BEGIN
      LibrarySales.CreateStandardSalesCode(StandardSalesCode);
      CreateStandardSalesLine(StandardSalesLine,StandardSalesCode.Code,StandardSalesLine.Type::Item,ItemNo);
      DifferentDimensionCode := FindDifferentDimension(DimensionCode);

      UpdateDimensionSetID(StandardSalesLine,DifferentDimensionCode);
      CreateStandardSalesLine(StandardSalesLine,StandardSalesCode.Code,StandardSalesLine.Type::"G/L Account",GLAccountNo);

      // Use Random because value is not important.
      StandardSalesLine.VALIDATE("Amount Excl. VAT",StandardSalesLine.Quantity * LibraryRandom.RandDec(10,2));
      StandardSalesLine.MODIFY(TRUE);
      UpdateDimensionSetID(StandardSalesLine,DifferentDimensionCode);
    END;

    LOCAL PROCEDURE CreateStandardSalesLine@28(VAR StandardSalesLine@1000 : Record 171;StandardSalesCode@1001 : Code[10];Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      LibrarySales.CreateStandardSalesLine(StandardSalesLine,StandardSalesCode);
      StandardSalesLine.VALIDATE(Type,Type);
      StandardSalesLine.VALIDATE("No.",No);

      // Use Random because value is not important.
      StandardSalesLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));
      StandardSalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@27(VAR GenJournalLine@1000 : Record 81;AccountType@1002 : Option;AccountNo@1003 : Code[20];Amount@1004 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      // Use Random Number Generator for Amount.
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        AccountType,AccountNo,Amount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCustWithCombShip@70() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Combine Shipments",TRUE);
      Customer.MODIFY;
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateDimSetID@65() : Integer;
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1000 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      EXIT(LibraryDimension.CreateDimSet(0,Dimension.Code,DimensionValue.Code));
    END;

    LOCAL PROCEDURE CreatePartlyShipSalesOrder@61(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDecInDecimalRange(10,20,2));
      UpdatePartialQuantityToShip(SalesLine);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateGlobal1DimensionValue@72(VAR DimensionValue@1000 : Record 349) : Code[20];
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      GLSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GLSetup."Global Dimension 1 Code");
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindDifferentDimension@19(Code@1002 : Code[20]) : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      Dimension.SETFILTER(Code,'<>%1',Code);
      LibraryDimension.FindDimension(Dimension);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE FindDifferentDimensionValue@126(DimensionCode@1001 : Code[20];Code@1002 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      DimensionValue.SETFILTER(Code,'<>%1',Code);
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindDimensionSetEntry@63(VAR DimensionSetEntry@1000 : Record 480;ShortcutDimensionCode@1002 : Code[20];DimensionSetID@1001 : Integer);
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
    END;

    LOCAL PROCEDURE FindSalesLine@6(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesOrder@34(VAR SalesHeader@1000 : Record 36;QuoteNo@1001 : Code[20]);
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Quote No.",QuoteNo);
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE InsertDimOnSalesHdr@85(VAR SalesHeader@1000 : Record 36;ShortcutDimension2Code@1002 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,ShortcutDimension2Code);
      SalesHeader.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunCombineShipment@98(CustomerNo@1000 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
      CombineShipments@1001 : Report 295;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      CLEAR(CombineShipments);
      CombineShipments.SETTABLEVIEW(SalesHeader);
      CombineShipments.InitializeRequest(WORKDATE,WORKDATE,FALSE,FALSE,FALSE,FALSE);
      CombineShipments.USEREQUESTPAGE(FALSE);
      CombineShipments.RUN;
    END;

    LOCAL PROCEDURE RunCopySalesDocument@87(SalesHeader@1000 : Record 36;DocumentNo@1001 : Code[20]);
    VAR
      CopySalesDocument@1002 : Report 292;
      DocumentType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      COMMIT;
      CLEAR(CopySalesDocument);
      CopySalesDocument.SetSalesHeader(SalesHeader);
      CopySalesDocument.InitializeRequest(DocumentType::"Posted Shipment",DocumentNo,TRUE,FALSE);
      CopySalesDocument.USEREQUESTPAGE(FALSE);
      CopySalesDocument.RUN;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@32(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and delete General Journal Lines before creating new General Journal Lines in the General Journal
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE UpdatePartialQuantityToShip@64(SalesLine@1000 : Record 37);
    VAR
      LibraryUtility@1002 : Codeunit 131000;
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity * LibraryUtility.GenerateRandomFraction);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionSetID@14(VAR StandardSalesLine@1003 : Record 171;DifferentDimension@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      DimensionSetID@1002 : Integer;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DifferentDimension);
      DimensionSetID := LibraryDimension.CreateDimSet(StandardSalesLine."Dimension Set ID",DifferentDimension,DimensionValue.Code);
      StandardSalesLine.VALIDATE("Dimension Set ID",DimensionSetID);
      StandardSalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionOnSalesHeader@18(SalesHeader@1000 : Record 36) DimensionSetID : Integer;
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      // Update Dimension value on Sales Header Dimension.
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesHeader."Dimension Set ID");
      DimensionSetID :=
        LibraryDimension.EditDimSet(
          DimensionSetEntry."Dimension Set ID",DimensionSetEntry."Dimension Code",
          FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      SalesHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionOnSalesLine@36(VAR SalesLine@1000 : Record 37);
    VAR
      DimensionSetEntry@1001 : Record 480;
      DimensionSetID@1002 : Integer;
    BEGIN
      // Update Dimension value on Sales Line Dimension.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,SalesLine."Dimension Set ID");
      DimensionSetID :=
        LibraryDimension.EditDimSet(
          DimensionSetEntry."Dimension Set ID",DimensionSetEntry."Dimension Code",
          FindDifferentDimensionValue(DimensionSetEntry."Dimension Code",DimensionSetEntry."Dimension Value Code"));
      SalesLine.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInvoiceAmountForRounding@25(VAR SalesLine@1000 : Record 37);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      SalesLine.VALIDATE("Line Amount",100 + GeneralLedgerSetup."Inv. Rounding Precision (LCY)" / 2);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@50(VAR SalesLine@1003 : Record 37;GLAccountCode@1002 : Code[20];CustomerNo@1004 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Create Sales Credit Memo and modify Sales Line with Random values.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",GLAccountCode,LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@95(VAR ItemJournalBatch@1000 : Record 233;TemplateType@1002 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,TemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetDefaultDimension@54(VAR DefaultDimension@1003 : Record 352;DimensionCode@1000 : Code[20];No@1001 : Code[20]);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,No,DimensionCode,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetGLAccountDefaultDimension@48(VAR DefaultDimension@1003 : Record 352;DimensionCode@1000 : Code[20]) : Code[20];
    VAR
      GLAccount@1004 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      SetDefaultDimension(DefaultDimension,DimensionCode,GLAccount."No.");
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE SetInvGLAccountDefaultDimension@44(VAR DefaultDimension@1003 : Record 352;LocationCode@1004 : Code[10];InventoryPostingGroup@1000 : Code[10]);
    VAR
      GLAccount@1005 : Record 15;
      GeneralLedgerSetup@1006 : Record 98;
      InventoryPostingSetup@1032 : Record 5813;
    BEGIN
      // Get GL Account No. from Inventory Setup.
      InventoryPostingSetup.GET(LocationCode,InventoryPostingGroup);
      GLAccount.GET(InventoryPostingSetup."Inventory Account");
      GeneralLedgerSetup.GET;

      // Set Default Dimension.
      SetDefaultDimension(DefaultDimension,GeneralLedgerSetup."Global Dimension 1 Code",GLAccount."No.");
    END;

    LOCAL PROCEDURE FindICPartner@47() : Code[20];
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      ICPartner.SETRANGE(Blocked,FALSE);
      ICPartner.FINDFIRST;
      EXIT(ICPartner.Code);
    END;

    LOCAL PROCEDURE FindICGLAccount@46() : Code[20];
    VAR
      ICGLAccount@1000 : Record 410;
    BEGIN
      ICGLAccount.SETRANGE("Account Type",ICGLAccount."Account Type"::Posting);
      ICGLAccount.SETRANGE(Blocked,FALSE);
      ICGLAccount.FINDFIRST;
      EXIT(ICGLAccount."No.");
    END;

    LOCAL PROCEDURE DeleteDefaultDimension@52(DefaultDimension@1000 : Record 352);
    BEGIN
      DefaultDimension.GET(DefaultDimension."Table ID",DefaultDimension."No.",DefaultDimension."Dimension Code");
      DefaultDimension.DELETE(TRUE);
    END;

    LOCAL PROCEDURE VerifyDimensionOnArchiveHeader@53(SalesHeader@1000 : Record 36);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;
      SalesHeaderArchive.TESTFIELD("Dimension Set ID",SalesHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionOnArchiveLine@57(SalesLine@1000 : Record 37);
    VAR
      SalesLineArchive@1001 : Record 5108;
    BEGIN
      SalesLineArchive.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLineArchive.FINDFIRST;
      SalesLineArchive.TESTFIELD("Dimension Set ID",SalesLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionOnGLEntry@60(DocumentType@1004 : Option;DocumentNo@1001 : Code[20];GenPostingType@1003 : Option;GlobalDimension1Code@1005 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Gen. Posting Type",GenPostingType);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Global Dimension 1 Code",GlobalDimension1Code);
    END;

    LOCAL PROCEDURE VerifyDimensionOnRoundingEntry@290(SalesHeader@1004 : Record 36);
    VAR
      SalesInvoiceHeader@1003 : Record 112;
      GLEntry@1001 : Record 17;
      CustomerPostingGroup@1000 : Record 92;
    BEGIN
      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");

      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",SalesHeader."No.");
      SalesInvoiceHeader.FINDFIRST;

      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      GLEntry.SETRANGE("G/L Account No.",CustomerPostingGroup."Invoice Rounding Account");
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Dimension Set ID",SalesHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@220(VAR TempDimensionSetEntry@1000 : TEMPORARY Record 480;DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      REPEAT
        DimensionSetEntry.SETRANGE("Dimension Code",TempDimensionSetEntry."Dimension Code");
        DimensionSetEntry.FINDFIRST;
        DimensionSetEntry.TESTFIELD("Dimension Value Code",TempDimensionSetEntry."Dimension Value Code");
      UNTIL TempDimensionSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntryDimension@82(SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
      SalesInvoiceLine@1003 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETRANGE("No.",SalesLine."No.");
      SalesInvoiceLine.FINDFIRST;

      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE(Amount,-SalesInvoiceLine.Amount);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Dimension Set ID",SalesLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifySalesLineDimension@79(SalesLine@1000 : Record 37);
    VAR
      SalesShipmentHeader@1002 : Record 110;
      SalesLine2@1001 : Record 37;
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",SalesLine."Document No.");
      SalesShipmentHeader.FINDFIRST;

      SalesLine2.SETRANGE("Shipment No.",SalesShipmentHeader."No.");
      SalesLine2.SETRANGE("Shipment Line No.",SalesLine."Line No.");
      SalesLine2.FINDFIRST;
      SalesLine2.TESTFIELD("Dimension Set ID",SalesLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionCode@9(DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20]);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      Assert.IsTrue(DimensionSetEntry.FINDFIRST,
        FORMAT('Could not find dimensions with filters ' + DimensionSetEntry.GETFILTERS));
    END;

    LOCAL PROCEDURE VerifyGLEntryICPartner@41(DocumentNo@1003 : Code[20];ICPartnerCode@1001 : Code[20];GlobalDimensionCode@1004 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Bal. Account Type",GLEntry."Bal. Account Type"::"IC Partner");
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Global Dimension 1 Code",GlobalDimensionCode);
      GLEntry.TESTFIELD("IC Partner Code",ICPartnerCode);
    END;

    LOCAL PROCEDURE VerifyGLEntry@45(DocumentnNo@1001 : Code[20];DimensionCode@1005 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentnNo);
      GLEntry.FINDSET;
      REPEAT
        Assert.IsTrue(DimensionSetEntry.GET(GLEntry."Dimension Set ID",DimensionCode),'Dimension Set Entry must found');
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionOnDimSet@75(DimSetID@1001 : Integer;DimensionValue@1002 : Record 349);
    VAR
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimMgt@1003 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(TempDimensionSetEntry,DimSetID);
      TempDimensionSetEntry.SETRANGE("Dimension Code",DimensionValue."Dimension Code");
      TempDimensionSetEntry.FINDFIRST;
      TempDimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@43(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerForSalesHeaderDimUpdate@56(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      CASE TRUE OF
        Question = UpdateFromHeaderLinesQst:
          Reply := TRUE;
        STRPOS(Question,UpdateLineDimQst) <> 0:
          Reply := LibraryVariableStorage.DequeueBoolean;
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // Just for Handle the Message.
    END;

    [ModalPageHandler]
    PROCEDURE SalesCodePageHandler@31(VAR StandardCustomerSalesCodes@1000 : Page 173;VAR Response@1005 : Action);
    BEGIN
      // Modal Page Handler.
      StandardCustomerSalesCodes.SETRECORD(StandardCustomerSalesCode);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesHandler@96(VAR EditDimensionSetEntries@1000 : TestPage 480);
    BEGIN
      EditDimensionSetEntries.NEW;
      EditDimensionSetEntries."Dimension Code".SETVALUE(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Sales]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Compile

      Test for Dimension on Sales Documents:
        1. Test Dimension updation on Sales Line after updation of Dimension on Sales Header.
        2. Test error occurs on Posting Sales Invoice with Invalid Dimension.
        3. Test Dimension on Sales Order Created from Sales Quote.
        4. Test Dimension on Sales Line created from Combine Shipment.
        5. Test Dimension on G/L Entry after Posting Sales Invoice.
        6. Test Dimension on G/L Entry after Posting Sales Order in Multiple Steps with Change Dimension Value on Sales Line.
        7. Test Sales Header Dimension after change Shortcut Dimension 2 Code on Sales Invoice Header.
        8. Test Dimension on Sales Invoice Created from Copy Document.
        9. Test Dimension on G/L Entry of Invoice Rounding.
       10. Test Dimension on Archive Sales Order.
       11. Test Dimension on Standard Sales Code.
       12. Test Dimension on G/L Entry after Apply And Unapply from Customer Ledger Entry.
       13. Check Sales Line Dimension.
       14. Test Dimension on G/L Entry after posting Sales document with IC Partner.
       15. Test Dimension on G/L Entry after Apply from Customer Ledger Entry.
       16. Test changed Sales Return Header Shortcut Dimension 1 Code.
       17. Test inserted Sales Return Header Shortcut Dimension 2 Code.
       18. Verify error while filtering Dimension Set Entry after deleting Sales Return Header Shortcut Dimension 1 Code.
       19. Verify GL Entry after post Sales Order with Dimension which attached as a Default Dimension on Inventory Account.
       20. Verify GL Entry after post Physical Inventory Journal with Dimension which attached as a Default Dimension on Inventory Account.

      TFS_TS_ID = 198717, 198718
      Cover Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ---------------------------------------------------------------------
      DimensionUpdateOnLine, DimensionNotUpdateOnLine                140807
      ValuePostingRuleOnHeader, ValuePostingRuleOnLine               140808
      OrderFromQuoteWithDimension                                    140809
      CombineShipment                                                140810
      GLEntryDimension                                               140811
      ChangeDimensionAfterPartial                                    140812
      ChangeShortcutDimensionInvoice                                 140813
      CopyDocumentWithDimension                                      140814
      DimensionOnInvoiceRounding                                     140816
      ArchiveDocument                                                140818

      TFS_TS_ID = 216989
      Cover Test cases:
      ---------------------------------
      Test Function Name         TFS ID
      ---------------------------------
      DimensionStandardSalesCode 125318

      TFS_TS_ID = 237429
      Cover Test cases:
      ---------------------------------
      Test Function Name         TFS ID
      ---------------------------------
      DimensionAfterApplyUnapply  123758

      TFS_TS_ID = 252921
      Covers Test cases:
      ------------------------------------------------------
      Test Function Name                             TFS ID
      ------------------------------------------------------
      SalesLineDimension,GLEntryDimensionsForSales   237040

      TFS_TS_ID = 259855
      Covers Test cases:
      ------------------------------------------------------
      Test Function Name                             TFS ID
      ------------------------------------------------------
      DimensionAfterApplyForCustomer                 122006

      Workitem ID: 315338
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ChangeSalesRetOrdDim, InsertSalesRetOrdDim, DeleteSalesRetOrdDimError         128209

      Workitem ID: 315203
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      PostSalesOrderWithDefaultDimension, PostPhysInvWithDefaultDimension           258837
    }
    END.
  }
}

