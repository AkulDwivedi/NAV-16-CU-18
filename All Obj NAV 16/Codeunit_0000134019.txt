OBJECT Codeunit 134019 ERM Apply Diff Entries - Cust.
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1004 : Codeunit 131300;
      LibraryPmtDiscSetup@1003 : Codeunit 131303;
      LibraryRandom@1002 : Codeunit 130440;
      LibrarySetupStorage@1005 : Codeunit 131009;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      ErrorMessage@1006 : TextConst 'ENU=%1 must be %2 in %3, %4: %5.';

    [Test]
    PROCEDURE ApplyCrMemoInvoiceFullAmount@1();
    VAR
      Amount@1002 : Decimal;
    BEGIN
      // Check Application, Amount LCY after Posting Application of Credit Memo over Invoice with same Amount.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      ApplyCreditMemoToInvoice('',Amount,-Amount);
    END;

    [Test]
    PROCEDURE ApplyCrMemoInvoiceHalfAmount@2();
    VAR
      Amount@1000 : Decimal;
    BEGIN
      // Check Application, Amount LCY after Posting Application of Credit Memo over Invoice with Half Invoice Amount.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      ApplyCreditMemoToInvoice('',Amount,-Amount / 2);
    END;

    [Test]
    PROCEDURE ApplyCrMemoInvoiceFCY@3();
    VAR
      Amount@1002 : Decimal;
    BEGIN
      // Check Application, Amount LCY after Posting Application of Credit Memo over Invoice with same Amount and FCY.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      ApplyCreditMemoToInvoice(CreateCurrency,Amount,-Amount);
    END;

    LOCAL PROCEDURE ApplyCreditMemoToInvoice@22(CurrencyCode@1003 : Code[10];Amount@1005 : Decimal;Amount2@1006 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      DetailedCustLedgEntry@1007 : Record 379;
      CustLedgerEntry@1009 : Record 21;
      GeneralLedgerSetup@1008 : Record 98;
      PaymentDiscountAmount@1001 : Decimal;
      AmountFCY@1002 : Decimal;
      RemainingAmount@1004 : Decimal;
    BEGIN
      // Setup: Create Invoice and Credit Memo Entries for Customer. Take Random Amount for Invoice and Credit Memo.
      GeneralLedgerSetup.GET;
      CreateAndPostMultipleJnlLines(GenJournalLine,CurrencyCode,Amount,Amount2);
      PaymentDiscountAmount := ComputePaymentDiscountAmount(Amount);
      AmountFCY := ComputeAmountFCY(CurrencyCode,ABS(Amount2));
      RemainingAmount := Amount + Amount2;

      // Exercise: Apply Credit Memo on Invoice for the Customer.
      ApplyAndPostCustomerEntry(
        GenJournalLine."Document No.",GenJournalLine."Document No.",GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Invoice,Amount2);

      // Verify: Verify Remaining Amount, Payment Discount in Customer Ledger Entry, AmountLCY in Detailed Customer Ledger Entries.
      GetCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document No.",GenJournalLine."Document Type"::Invoice);
      Assert.AreNearlyEqual(
        RemainingAmount,CustLedgerEntry."Remaining Amount",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(ErrorMessage,CustLedgerEntry.FIELDCAPTION("Remaining Amount"),RemainingAmount,
          CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));

      Assert.AreNearlyEqual(
        PaymentDiscountAmount,CustLedgerEntry."Original Pmt. Disc. Possible",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(ErrorMessage,CustLedgerEntry.FIELDCAPTION("Original Pmt. Disc. Possible"),PaymentDiscountAmount,
          CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));

      VerifyDtldCustomerLedgerEntry(
        GenJournalLine."Document No.",DetailedCustLedgEntry."Entry Type"::Application,-AmountFCY,
        GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
    END;

    [Test]
    PROCEDURE ApplyCrMemoAndPaymentToInvoice@13();
    VAR
      GenJournalLine@1006 : Record 81;
      GenJournalBatch@1008 : Record 232;
      DetailedCustLedgEntry@1005 : Record 379;
      CustLedgerEntry@1007 : Record 21;
      GeneralLedgerSetup@1003 : Record 98;
      DocumentNo@1004 : Code[20];
      Amount@1002 : Decimal;
      PartialAmount@1000 : Decimal;
      RemainingAmount@1001 : Decimal;
    BEGIN
      // Check Application, Payment Discount, Amount LCY after posting Application Payment and Credit Memo over Invoice.

      // Setup: Create Invoice and Credit Memo Entries for Customer. Apply Credit Memo on Invoice with Partial Amount. Again Post
      // Payment Entry for the Remaining Amount. Take Random Decimal Amount for Invoice Amount. Deduct Integer Value from Amount
      // because sometimes Random Decimal Produces very less Amount for which Payment Discount can not be calculated.
      Initialize;
      GeneralLedgerSetup.GET;
      Amount := 100 + LibraryRandom.RandDec(100,2);
      PartialAmount := Amount - LibraryRandom.RandInt(10);
      CreateAndPostMultipleJnlLines(GenJournalLine,'',Amount,-PartialAmount);
      RemainingAmount := ComputePaymentDiscountAmount(Amount);
      RemainingAmount := RemainingAmount - ComputePaymentDiscountAmount(PartialAmount);
      DocumentNo := GenJournalLine."Document No.";
      ApplyAndPostCustomerEntry(
        GenJournalLine."Document No.",DocumentNo,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Invoice,-PartialAmount);
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,PartialAmount - Amount,'');
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply Payment on Previously Posted Invoice for the Customer.
      ApplyAndPostCustomerEntry(
        GenJournalLine."Document No.",DocumentNo,GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Invoice,
        PartialAmount - Amount);

      // Verify: Verify Remaining Amount in Customer Ledger Entry, Payment Discount Amount in Detailed Customer Ledger Entries.
      GetCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment);
      Assert.AreNearlyEqual(
        -RemainingAmount,CustLedgerEntry."Remaining Amount",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(ErrorMessage,CustLedgerEntry.FIELDCAPTION("Remaining Amount"),RemainingAmount,
          CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));

      VerifyDtldCustomerLedgerEntry(
        GenJournalLine."Document No.",DetailedCustLedgEntry."Entry Type"::"Payment Discount",-RemainingAmount,
        GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
    END;

    [Test]
    [HandlerFunctions(UnapplyCustomerEntriesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ApplyUnapplyDifferentDocumentTypesToPayment@8();
    VAR
      CustLedgerEntry@1006 : Record 21;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      GeneralLedgerSetup@1000 : Record 98;
      CustEntryApplyPostedEntries@1007 : Codeunit 226;
      Amount@1004 : Decimal;
    BEGIN
      // Verify Program populates correct Document Type value on G/L entry window after doing un application on Customer when adjust for payment discount is involved.

      // Setup: Post Invocie, Credit Memo and Payment Line.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      SelectGenJournalBatch(GenJournalBatch);
      Amount := LibraryRandom.RandDec(1000,2);  // Using Random value for Amount.
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,CreateCustomer,GenJournalLine."Document Type"::Invoice,Amount,'');
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::"Credit Memo",-Amount / 2,'');
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,GenJournalLine.Amount,'');
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ApplyAndPostMultipleCustomerEntries(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",-Amount / 2);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");

      // Exercise: Unapply Customer Entries.
      CustEntryApplyPostedEntries.UnApplyCustLedgEntry(CustLedgerEntry."Entry No.");

      // Verify: Verfiy Document Type should be Payment in G/L Entry.
      VerifyUnapplyGLEntry(CustLedgerEntry."Document No.");
    END;

    LOCAL PROCEDURE Initialize@11();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInCustomerPostingGroup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE ApplyAndPostMultipleCustomerEntries@14(DocumentType@1003 : Option;DocumentNo@1002 : Code[20];AmountToApply@1001 : Decimal);
    VAR
      ApplyingCustLedgerEntry@1004 : Record 21;
      CustLedgerEntry@1000 : Record 21;
      GLRegister@1005 : Record 45;
    BEGIN
      SetApplyCustomerEntry(ApplyingCustLedgerEntry,DocumentType,DocumentNo,AmountToApply);
      GLRegister.FINDLAST;
      CustLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      CustLedgerEntry.SETRANGE("Applying Entry",FALSE);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.CALCFIELDS("Remaining Amount");
        CustLedgerEntry.VALIDATE("Amount to Apply",CustLedgerEntry."Remaining Amount");
        CustLedgerEntry.MODIFY(TRUE);
      UNTIL CustLedgerEntry.NEXT = 0;
      SetAppliesToIDAndPostEntry(CustLedgerEntry,ApplyingCustLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerEntry@7(DocumentNo@1002 : Code[20];DocumentNo2@1006 : Code[20];DocumentType@1001 : Option;DocumentType2@1005 : Option;AmountToApply@1003 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      SetApplyCustomerEntry(CustLedgerEntry,DocumentType,DocumentNo,AmountToApply);
      CustLedgerEntry2.SETRANGE(Open,TRUE);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,DocumentType2,DocumentNo2);
      CustLedgerEntry2.FINDSET;
      REPEAT
        CustLedgerEntry2.CALCFIELDS("Remaining Amount");
        CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
        CustLedgerEntry2.MODIFY(TRUE);
      UNTIL CustLedgerEntry2.NEXT = 0;
      SetAppliesToIDAndPostEntry(CustLedgerEntry2,CustLedgerEntry);
    END;

    LOCAL PROCEDURE ComputeAmountFCY@9(CurrencyCode@1000 : Code[10];Amount@1001 : Decimal) : Decimal;
    VAR
      CurrencyExchangeRate@1003 : Record 330;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(Amount);
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      EXIT(Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount");
    END;

    LOCAL PROCEDURE ComputePaymentDiscountAmount@21(Amount@1001 : Decimal) : Decimal;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      // Calculate Payment Discount Amount for a given Amount. Make sure that Amount has correct decimal places using Round.
      PaymentTerms.GET(GetPaymentTerms);
      EXIT(ROUND(Amount * PaymentTerms."Discount %" / 100));
    END;

    LOCAL PROCEDURE CreateAndPostMultipleJnlLines@12(VAR GenJournalLine@1004 : Record 81;CurrencyCode@1000 : Code[10];Amount@1005 : Decimal;Amount2@1006 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,CreateCustomer,GenJournalLine."Document Type"::Invoice,Amount,CurrencyCode);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::"Credit Memo",Amount2,
        CurrencyCode);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@18() : Code[20];
    VAR
      Customer@1001 : Record 18;
      LibrarySales@1000 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",GetPaymentTerms);
      Customer.VALIDATE("Application Method",Customer."Application Method"::Manual);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@23(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;CustomerNo@1002 : Code[20];DocumentType@1004 : Option;Amount@1003 : Decimal;CurrencyCode@1005 : Code[10]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntry@16(VAR CustLedgerEntry@1003 : Record 21;DocumentNo@1000 : Code[20];DocumentType@1002 : Option);
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
    END;

    LOCAL PROCEDURE GetPaymentTerms@4() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE SetApplyCustomerEntry@20(VAR CustLedgerEntry@1000 : Record 21;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal);
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
    END;

    LOCAL PROCEDURE SetAppliesToIDAndPostEntry@28(VAR CustLedgerEntry@1000 : Record 21;CustLedgerEntry2@1001 : Record 21);
    BEGIN
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@6(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE VerifyDtldCustomerLedgerEntry@10(DocumentNo@1000 : Code[20];EntryType@1004 : Option;AmountLCY@1003 : Decimal;InvRoundingPrecisionLCY@1005 : Decimal);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        AmountLCY,DetailedCustLedgEntry."Amount (LCY)",InvRoundingPrecisionLCY,
        STRSUBSTNO(ErrorMessage,DetailedCustLedgEntry.FIELDCAPTION("Amount (LCY)"),AmountLCY,
          DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyUnapplyGLEntry@19(DocumentNo@1000 : Code[20]);
    VAR
      GLEntry@1001 : Record 17;
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Source Code",SourceCodeSetup."Unapplied Sales Entry Appln.");
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Document Type",GLEntry."Document Type"::Payment);
      UNTIL GLEntry.NEXT = 0;
    END;

    [ModalPageHandler]
    PROCEDURE UnapplyCustomerEntriesPageHandler@15(VAR UnapplyCustomerEntries@1000 : TestPage 623);
    BEGIN
      UnapplyCustomerEntries.Unapply.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@38(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@17(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Application] [Sales]
      Unsupported version tags:
      ES: Unable to Execute

      Test Multiple Documents Application on Single Document for Customer.
        1. Test application of Credit Memo on Invoice for a Customer. Use equal Amount for application.
        2. Test application of Credit Memo on Invoice for a Customer. Use half Amount for application.
        3. Test application of Credit Memo on Invoice for a Customer. Use FCY and full Amount for application.
        4. Test application of Credit Memo, Payment on Invoice for a Customer. Use Partial Amount for Credit Memo and Payment.
        5. Verify Program populates correct Document Type value on G/L entry window after doing un application on Customer when adjust for payment discount is involved

      Covers Test Case:
      ---------------------------------------------------------------------------------------------------------------
      Test Case Name                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------
      ApplyCrMemoInvoiceFullAmount                    125097, 125098, 121598, 125099, 125107, 125108, 125109, 125841.
      ApplyCrMemoInvoiceHalfAmount                    125100, 125101, 127769, 125102.
      ApplyCrMemoInvoiceFCY                           125103, 125104, 125105, 125106.
      ApplyCrMemoAndPaymentToInvoice                  125842, 125843, 125844, 125845.
      ApplyUnapplyDifferentDocumentTypesToPayment     277456
    }
    END.
  }
}

