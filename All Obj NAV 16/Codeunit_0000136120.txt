OBJECT Codeunit 136120 Service Warranty and Discounts
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryResource@1006 : Codeunit 130511;
      LibrarySales@1005 : Codeunit 130509;
      LibraryService@1002 : Codeunit 131902;
      isInitialized@1000 : Boolean;
      ServiceContractConfirmation@1001 : TextConst 'ENU=Do you want to create the contract using a contract template?';
      ServiceOrderMustNotExist@1004 : TextConst 'ENU="The %1 must not exist. Identification fields and values:%2=''%3'',%4=''%5''"';

    LOCAL PROCEDURE Initialize@20();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      COMMIT;
      isInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE NoWarrantyAndContractDiscount@13();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Covers document number TC-RSM-D-1 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created and discounts are registered correctly on the posted service invoice when the
      // service order is posted with discounts and the Exclude Warranty and the Exclude Contract Discount fields are not selected.

      WarrantyContractDiscount(FALSE,FALSE,ServiceLine."Line Discount Type"::"Warranty Disc.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE WarrantyWOContractDiscount@8();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Covers document number TC-RSM-D-2 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created and discounts are registered correctly on the posted service invoice when the
      // service order is posted with discounts and the Exclude Warranty is selected and the Exclude Contract Discount field is not
      // selected.

      WarrantyContractDiscount(TRUE,FALSE,ServiceLine."Line Discount Type"::"Contract Disc.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE WarrantyAndContractDiscount@10();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Covers document number TC-RSM-D-3 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created and discounts are registered correctly on the posted service invoice when the
      // service order is posted with discounts and the Exclude Warranty and the Exclude Contract Discount fields are selected.

      WarrantyContractDiscount(TRUE,TRUE,ServiceLine."Line Discount Type"::"Line Disc.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE ContractDiscountWOWarranty@33();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Covers document number TC-RSM-D-4 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created and discounts are registered correctly on the posted service invoice when the
      // service order is posted with discounts and the Exclude Warranty is not selected and the Exclude Contract Discount field
      // is selected.

      WarrantyContractDiscount(FALSE,TRUE,ServiceLine."Line Discount Type"::"Warranty Disc.");
    END;

    LOCAL PROCEDURE WarrantyContractDiscount@36(ExcludeWarranty@1002 : Boolean;ExcludeContractDiscount@1001 : Boolean;LineDiscountType@1006 : Option);
    VAR
      Customer@1007 : Record 18;
      Item@1003 : Record 27;
      Resource@1008 : Record 156;
      ServiceContractHeader@1005 : Record 5965;
      ServiceHeader@1000 : Record 5900;
      ServiceItem@1009 : Record 5940;
      TempServiceLine@1004 : TEMPORARY Record 5902;
      LibraryUtility@1013 : Codeunit 131000;
      SignServContractDoc@1012 : Codeunit 5944;
    BEGIN
      // 1. Setup: Create Resource. Create Resource Group, Assign it to the Resource.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      AssignResourceGroupToResource(Resource);

      // 2. Exercise: Create Item, Create Service Item. Create a new Contract with Contract/Service Discounts, Sign the Contract.
      // Create Service Order. Update Exclude Warranty and Exclude Contract Discount fields as per parameter.
      // Update Service Line and post the Service Order as Ship and Invoice.
      CreateItem(Item,Customer."No.",LibraryUtility.GenerateRandomFraction);
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.",LibraryUtility.GenerateRandomFraction);

      CreateServiceContract(ServiceContractHeader,ServiceItem);
      CreateDiscountServiceContract(
        ServiceContractHeader,ServiceItem."Service Item Group Code",Resource."Resource Group No.",
        LibraryUtility.GenerateRandomFraction);
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceContractHeader."Contract No.",Resource."No.");
      UpdateWarrantyServiceLine(ServiceHeader."No.",ExcludeWarranty,ExcludeContractDiscount);
      UpdateAndPostServiceLine(TempServiceLine,LineDiscountType,ServiceHeader."No.");

      // 3. Verify: The Service Order is deleted. Check Service Shipment. Check Service Ledger Entry, Customer Ledger Entries,
      // Detailed Customer Ledger Entries, Resource Leger Entry, VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyServiceOrderPost(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE ContractDiscountGreatest@22();
    VAR
      Customer@1009 : Record 18;
      Item@1000 : Record 27;
      Resource@1008 : Record 156;
      ServiceContractHeader@1006 : Record 5965;
      ServiceHeader@1005 : Record 5900;
      ServiceItem@1004 : Record 5940;
      ServiceLine@1003 : Record 5902;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      SignServContractDoc@1011 : Codeunit 5944;
      LibraryUtility@1012 : Codeunit 131000;
      LineDiscountPercentage@1001 : Decimal;
    BEGIN
      // Covers document number TC-RSM-D-5 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created correctly when the service order is posted with discounts, of which the
      // Contract Discount has the greatest value. Verify that discounts are correctly registered on the posted service invoice.

      // 1. Setup: Create Resource. Create Resource Group, Assign it to the Resource.
      // Set Contract Discount Greatest.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      AssignResourceGroupToResource(Resource);
      LineDiscountPercentage := LibraryUtility.GenerateRandomFraction;

      // 2. Exercise: Create Item, Create Service Item. Create a new Contract with Contract/Service Discounts,
      // Sign the Contract. Create Service Order. Update Service Line and post the Service Order as Ship and Invoice.
      CreateItem(Item,Customer."No.",LineDiscountPercentage);
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.",LineDiscountPercentage);

      CreateServiceContract(ServiceContractHeader,ServiceItem);

      // Use Random because value is not important.
      CreateDiscountServiceContract(
        ServiceContractHeader,ServiceItem."Service Item Group Code",Resource."Resource Group No.",LineDiscountPercentage + RANDOM(10));
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceContractHeader."Contract No.",Resource."No.");
      UpdateAndPostServiceLine(TempServiceLine,ServiceLine."Line Discount Type"::"Contract Disc.",ServiceHeader."No.");

      // 3. Verify: The Service Order is deleted. Check Service Shipment. Check Service Ledger Entry, Customer Ledger Entries,
      // Detailed Customer Ledger Entries, Resource Leger Entry, VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyServiceOrderPost(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE ItemLineDiscountGreatest@14();
    VAR
      Customer@1009 : Record 18;
      Item@1001 : Record 27;
      Resource@1008 : Record 156;
      ServiceContractHeader@1007 : Record 5965;
      ServiceHeader@1005 : Record 5900;
      ServiceItem@1004 : Record 5940;
      ServiceLine@1003 : Record 5902;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      LibraryUtility@1012 : Codeunit 131000;
      SignServContractDoc@1011 : Codeunit 5944;
      ContractDiscountPercentage@1000 : Decimal;
    BEGIN
      // Covers document number TC-RSM-D-6 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created correctly when the service order is posted with discounts, of which the
      // Line Discount has the greatest value. Verify that discounts are correctly registered on the posted service invoice.

      // 1. Setup: Create Resource. Create Resource Group, Assign it to the Resource.
      // Set Line Discount Greatest.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      AssignResourceGroupToResource(Resource);
      ContractDiscountPercentage := LibraryUtility.GenerateRandomFraction;

      // 2. Exercise: Create Item, Create Service Item. Create a new Contract with Contract/Service Discounts,
      // Sign the Contract. Create Service Order. Update Service Line and post the Service Order as Ship and Invoice.

      // Use Random because value is not important.
      CreateItem(Item,Customer."No.",ContractDiscountPercentage + RANDOM(10));
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.",ContractDiscountPercentage);

      CreateServiceContract(ServiceContractHeader,ServiceItem);
      CreateDiscountServiceContract(
        ServiceContractHeader,ServiceItem."Service Item Group Code",Resource."Resource Group No.",ContractDiscountPercentage);
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceContractHeader."Contract No.",Resource."No.");
      UpdateAndPostServiceLine(TempServiceLine,ServiceLine."Line Discount Type"::"Line Disc.",ServiceHeader."No.");

      // 3. Verify: The Service Order is deleted. Check Service Shipment. Check Service Ledger Entry, Customer Ledger Entries,
      // Detailed Customer Ledger Entries, Resource Leger Entry, VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyServiceOrderPost(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE WarrantyDiscountGreatest@6();
    VAR
      Customer@1011 : Record 18;
      Item@1001 : Record 27;
      Resource@1010 : Record 156;
      ServiceContractHeader@1003 : Record 5965;
      ServiceHeader@1007 : Record 5900;
      ServiceItem@1006 : Record 5940;
      ServiceLine@1005 : Record 5902;
      TempServiceLine@1004 : TEMPORARY Record 5902;
      LibraryUtility@1012 : Codeunit 131000;
      SignServContractDoc@1009 : Codeunit 5944;
      LineDiscountPercentage@1000 : Decimal;
    BEGIN
      // Covers document number TC-RSM-D-7 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created correctly when the service order is posted with discounts, of which the
      // Warranty Discount has the greatest value. Verify that discounts are correctly registered on the posted service invoice.

      // 1. Setup: Create Resource. Create Resource Group, Assign it to the Resource.
      // Set Warranty Discount Greatest.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      AssignResourceGroupToResource(Resource);
      LineDiscountPercentage := LibraryUtility.GenerateRandomFraction;

      // 2. Exercise: Create Item, Create Service Item. Create a new Contract with Contract/Service Discounts,
      // Sign the Contract. Create Service Order. Update Service Line and post the Service Order as Ship and Invoice.
      CreateItem(Item,Customer."No.",LineDiscountPercentage);

      // Use Random because value is not important.
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.",LineDiscountPercentage + RANDOM(10));

      CreateServiceContract(ServiceContractHeader,ServiceItem);
      CreateDiscountServiceContract(
        ServiceContractHeader,ServiceItem."Service Item Group Code",Resource."Resource Group No.",LineDiscountPercentage);
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceContractHeader."Contract No.",Resource."No.");
      UpdateAndPostServiceLine(TempServiceLine,ServiceLine."Line Discount Type"::"Warranty Disc.",ServiceHeader."No.");

      // 3. Verify: The Service Order is deleted. Check Service Shipment. Check Service Ledger Entry, Customer Ledger Entries,
      // Detailed Customer Ledger Entries, Resource Leger Entry, VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyServiceOrderPost(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE LineDiscountGreatestManual@18();
    VAR
      Customer@1009 : Record 18;
      Item@1006 : Record 27;
      Resource@1008 : Record 156;
      ServiceContractHeader@1010 : Record 5965;
      ServiceHeader@1005 : Record 5900;
      ServiceItem@1004 : Record 5940;
      ServiceLine@1003 : Record 5902;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      LibraryUtility@1013 : Codeunit 131000;
      SignServContractDoc@1012 : Codeunit 5944;
      LineDiscountPercentage@1001 : Decimal;
      ContractDiscountPercentage@1000 : Decimal;
    BEGIN
      // Covers document number TC-RSM-D-8 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created correctly when the service order is posted with discounts, of which the
      // Line Discount has the greatest value with manual modification on Line Discount field.
      // Verify that the discounts are correctly registered on the posted service invoice.

      // 1. Setup: Create Resource. Create Resource Group, Assign it to the Resource.
      // Set Line Discount Greatest.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      AssignResourceGroupToResource(Resource);
      ContractDiscountPercentage := LibraryUtility.GenerateRandomFraction;
      LineDiscountPercentage := ContractDiscountPercentage + RANDOM(10);  // Use Random for Discounts because value is not important.

      // 2. Exercise: Create Item, Create Service Item. Create a new Contract with Contract/Service Discounts, Sign the Contract.
      // Create Service Order.Update Service Line with manual Line Discount and post the Service Order as Ship and Invoice.
      CreateItem(Item,Customer."No.",LineDiscountPercentage);
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.",ContractDiscountPercentage);

      CreateServiceContract(ServiceContractHeader,ServiceItem);
      CreateDiscountServiceContract(
        ServiceContractHeader,ServiceItem."Service Item Group Code",Resource."Resource Group No.",LineDiscountPercentage);
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceContractHeader."Contract No.",Resource."No.");
      UpdateServiceLine(ServiceHeader."No.",ServiceLine."Line Discount Type"::"Line Disc.");
      LineDiscountPercentage += RANDOM(10);
      UpdateManualLineDiscount(ServiceHeader."No.",LineDiscountPercentage);

      GetServiceLines(ServiceLine,ServiceHeader."No.");
      CopyServiceLines(ServiceLine,TempServiceLine);
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Manual discount on Posted Invoice. The Service Order is deleted. Check Service Shipment.
      // Check Service Ledger Entry, Customer Ledger Entries, Detailed Customer Ledger Entries, Resource Leger Entry,
      // VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyManualLineDiscount(ServiceHeader."No.",LineDiscountPercentage);
      VerifyServiceOrderPost(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,ServiceItemReplacementHandler)]
    PROCEDURE WarrantyDiscountGreatestManual@21();
    VAR
      Customer@1011 : Record 18;
      Item@1002 : Record 27;
      Resource@1010 : Record 156;
      ServiceContractHeader@1008 : Record 5965;
      ServiceHeader@1007 : Record 5900;
      ServiceItem@1006 : Record 5940;
      ServiceLine@1005 : Record 5902;
      TempServiceLine@1004 : TEMPORARY Record 5902;
      LibraryUtility@1013 : Codeunit 131000;
      SignServContractDoc@1003 : Codeunit 5944;
      WarrantyDiscount@1001 : Decimal;
      LineDiscountPercentage@1000 : Decimal;
    BEGIN
      // Covers document number TC-RSM-D-9 - refer to TFS ID 20925.
      // Test that the relevant ledger entries are created correctly when the service order is posted with discounts, of which the
      // Warranty Discount has the greatest value with manual modification on Line Discount field.
      // Verify that the discounts are correctly registered on the posted service invoice.

      // 1. Setup: Create Resource. Create Resource Group, Assign it to the Resource.
      // Set Warranty Discount Greatest.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      AssignResourceGroupToResource(Resource);
      LineDiscountPercentage := LibraryUtility.GenerateRandomFraction;
      WarrantyDiscount := LineDiscountPercentage + RANDOM(10);  // Use Random for Discounts because value is not important.

      // 2. Exercise: Create Item, Create Service Item. Create a new Contract with Contract/Service Discounts, Sign the Contract.
      // Create Service Order.Update Service Line with manual Line Discount and post the Service Order as Ship and Invoice.
      CreateItem(Item,Customer."No.",LineDiscountPercentage);
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.",WarrantyDiscount);

      CreateServiceContract(ServiceContractHeader,ServiceItem);
      CreateDiscountServiceContract(
        ServiceContractHeader,ServiceItem."Service Item Group Code",Resource."Resource Group No.",LineDiscountPercentage);
      SignServContractDoc.SignContract(ServiceContractHeader);

      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceContractHeader."Contract No.",Resource."No.");
      UpdateServiceLine(ServiceHeader."No.",ServiceLine."Line Discount Type"::"Warranty Disc.");
      WarrantyDiscount += RANDOM(10);
      UpdateManualLineDiscount(ServiceHeader."No.",WarrantyDiscount);

      GetServiceLines(ServiceLine,ServiceHeader."No.");
      CopyServiceLines(ServiceLine,TempServiceLine);
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Manual discount on Posted Invoice. The Service Order is deleted. Check Service Shipment.
      // Check Service Ledger Entry, Customer Ledger Entries, Detailed Customer Ledger Entries, Resource Leger Entry,
      // VAT Entry and GL entries are created correctly for the posted Invoice.
      VerifyManualLineDiscount(ServiceHeader."No.",WarrantyDiscount);
      VerifyServiceOrderPost(TempServiceLine);
    END;

    LOCAL PROCEDURE AssignResourceGroupToResource@1(VAR Resource@1000 : Record 156);
    VAR
      ResourceGroup@1002 : Record 152;
    BEGIN
      // Create Resource Group, Resource and assign Resource Group to the Resource.
      LibraryResource.CreateResourceGroup(ResourceGroup);
      LibraryResource.CreateResourceNew(Resource);
      Resource.VALIDATE("Resource Group No.",ResourceGroup."No.");
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateTotalAmountOnInvoice@76(OrderNo@1001 : Code[20]) TotalAmount : Decimal;
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      ServiceInvoiceLine@1003 : Record 5993;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDSET;
      REPEAT
        TotalAmount += ServiceInvoiceLine."Amount Including VAT";
      UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyServiceLines@2(VAR FromServiceLine@1000 : Record 5902;VAR ToTempServiceLine@1001 : TEMPORARY Record 5902);
    BEGIN
      IF FromServiceLine.FINDSET THEN
        REPEAT
          ToTempServiceLine.INIT;
          ToTempServiceLine := FromServiceLine;
          ToTempServiceLine.INSERT;
        UNTIL FromServiceLine.NEXT = 0
    END;

    LOCAL PROCEDURE CreateDiscountServiceContract@75(ServiceContractHeader@1002 : Record 5965;ServiceItemGroupCode@1000 : Code[20];ResourceGroupNo@1007 : Code[20];ContractDiscountPercentage@1004 : Decimal);
    VAR
      ContractServiceDiscount@1006 : Record 5972;
      ServiceCost@1008 : Record 5905;
    BEGIN
      DiscountServiceContract(
        ServiceContractHeader,ContractServiceDiscount.Type::"Service Item Group",ServiceItemGroupCode,
        ContractDiscountPercentage);
      DiscountServiceContract(
        ServiceContractHeader,ContractServiceDiscount.Type::"Resource Group",ResourceGroupNo,ContractDiscountPercentage);
      ServiceCost.FINDFIRST;
      DiscountServiceContract(
        ServiceContractHeader,ContractServiceDiscount.Type::Cost,ServiceCost.Code,ContractDiscountPercentage);
    END;

    LOCAL PROCEDURE CreateItem@29(VAR Item@1004 : Record 27;CustomerNo@1002 : Code[20];LineDiscount@1003 : Decimal);
    VAR
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",RANDOM(10));  // Use Random because value is not important.
      Item.MODIFY(TRUE);
      UpdateItemDiscount(Item,CustomerNo,LineDiscount);
    END;

    LOCAL PROCEDURE CreateServiceContract@41(VAR ServiceContractHeader@1003 : Record 5965;ServiceItem@1002 : Record 5940);
    VAR
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      // Create Service Contract, Define Service Discounts. Sign the Contract.
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,ServiceItem."Customer No.");

      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Value",RANDOM(10) * 2);  // Multiplying by 2 as minimum value should be 2.
      ServiceContractLine.MODIFY(TRUE);

      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItem@23(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];WarrantyDiscountPercentage@1006 : Decimal);
    VAR
      ServiceItemGroup@1008 : Record 5904;
    BEGIN
      // Create Service Item and Define the Warranty Discounts.
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItem.VALIDATE("Warranty % (Parts)",WarrantyDiscountPercentage);
      ServiceItem.VALIDATE("Warranty % (Labor)",WarrantyDiscountPercentage + 1);
      ServiceItem.VALIDATE("Warranty Starting Date (Labor)",WORKDATE);
      ServiceItem.VALIDATE("Warranty Starting Date (Parts)",WORKDATE);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@16(ServiceHeader@1004 : Record 5900;Type@1003 : Option;No@1002 : Code[20]);
    VAR
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDFIRST;
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@24(VAR ServiceHeader@1000 : Record 5900;ServiceItem@1001 : Record 5940;ContractNo@1002 : Code[20];ResourceNo@1004 : Code[20]);
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1005 : Record 5902;
    BEGIN
      // Create Service Order with Contract No.- Service Header, Service Item Line, Service Line of Type Item and Resource.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      ServiceHeader.VALIDATE("Contract No.",ContractNo);
      ServiceHeader.MODIFY(TRUE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Item,ServiceItem."Item No.");
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Resource,ResourceNo);
    END;

    LOCAL PROCEDURE DiscountServiceContract@17(ServiceContractHeader@1000 : Record 5965;Type@1004 : Option;No@1001 : Code[20];ContractDiscountPercentage@1003 : Decimal);
    VAR
      ContractServiceDiscount@1002 : Record 5972;
    BEGIN
      LibraryService.CreateContractServiceDiscount(ContractServiceDiscount,ServiceContractHeader,Type,No);
      ContractServiceDiscount.VALIDATE("Discount %",ContractDiscountPercentage);
      ContractServiceDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetServiceLines@32(VAR ServiceLine@1000 : Record 5902;OrderNo@1001 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",OrderNo);
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE UpdateAndPostServiceLine@19(VAR TempServiceLine@1001 : TEMPORARY Record 5902;LineDiscountType@1003 : Option;OrderNo@1002 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceHeader@1004 : Record 5900;
    BEGIN
      // Update Service Line. Save the Service Lines in temporary table and post the Service Order as Ship and Invoice.
      UpdateServiceLine(OrderNo,LineDiscountType);
      GetServiceLines(ServiceLine,OrderNo);
      CopyServiceLines(ServiceLine,TempServiceLine);
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,OrderNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE UpdateItemDiscount@38(VAR Item@1002 : Record 27;CustomerNo@1003 : Code[20];LineDiscountPercentage@1004 : Decimal);
    VAR
      SalesLineDiscount@1001 : Record 7004;
      LibraryERM@1000 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,Item."No.",SalesLineDiscount."Sales Type"::Customer,CustomerNo,WORKDATE,'',
        '',Item."Base Unit of Measure",RANDOM(10));
      SalesLineDiscount.VALIDATE("Line Discount %",LineDiscountPercentage);
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManualLineDiscount@12(OrderNo@1000 : Code[20];LineDiscountPercentage@1002 : Decimal);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      GetServiceLines(ServiceLine,OrderNo);
      REPEAT
        ServiceLine.VALIDATE("Line Discount %",LineDiscountPercentage);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServiceLine@9(OrderNo@1004 : Code[20];LineDiscountType@1002 : Option);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      GetServiceLines(ServiceLine,OrderNo);
      REPEAT
        ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
        ServiceLine.VALIDATE("No.",ServiceLine."No.");
        ServiceLine.VALIDATE("Line Discount Type",LineDiscountType);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateWarrantyServiceLine@5(OrderNo@1004 : Code[20];ExcludeWarranty@1003 : Boolean;ExcludeContractDiscount@1002 : Boolean);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      GetServiceLines(ServiceLine,OrderNo);
      REPEAT
        ServiceLine.VALIDATE("Exclude Warranty",ExcludeWarranty);
        ServiceLine.VALIDATE("Exclude Contract Discount",ExcludeContractDiscount);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@68(DocumentNo@1002 : Code[20];PostingDate@1001 : Date);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE VerifyDetailedCustLedgerEntry@67(DocumentNo@1001 : Code[20];TotalAmount@1005 : Decimal);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document Type",DetailedCustLedgEntry."Document Type"::Invoice);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.TESTFIELD(Amount,TotalAmount);
    END;

    LOCAL PROCEDURE VerifyGLEntry@64(OrderNo@1001 : Code[20]);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      GLEntry@1002 : Record 17;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Source Type",GLEntry."Source Type"::Customer);
        GLEntry.TESTFIELD("Source No.",ServiceInvoiceHeader."Bill-to Customer No.");
        GLEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyManualLineDiscount@27(OrderNo@1000 : Code[20];LineDiscountPercentage@1003 : Decimal);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDSET;
      REPEAT
        ServiceInvoiceLine.TESTFIELD("Line Discount %",LineDiscountPercentage);
      UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyResourceEntryInvoice@70(OrderNo@1003 : Code[20]);
    VAR
      ServiceInvoiceLine@1001 : Record 5993;
      ServiceInvoiceHeader@1000 : Record 5992;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.SETRANGE(Type,ServiceInvoiceLine.Type::Resource);
      ServiceInvoiceLine.FINDFIRST;
      ResLedgerEntry.SETRANGE("Document No.",ServiceInvoiceLine."Document No.");
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD(Quantity,-ServiceInvoiceLine.Quantity);
      ResLedgerEntry.TESTFIELD("Order Type",ResLedgerEntry."Order Type"::Service);
      ResLedgerEntry.TESTFIELD("Order No.",ServiceInvoiceHeader."Order No.");
      ResLedgerEntry.TESTFIELD("Order Line No.",ServiceInvoiceLine."Line No.");
    END;

    LOCAL PROCEDURE VerifyServiceInvoice@45(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceInvoiceLine@1004 : Record 5993;
    BEGIN
      // Verify that the values of the fields Type and No. of Service Invoice Line are equal to the value of the
      // field Type and No. of the relevant Service Line.
      TempServiceLine.FINDSET;
      ServiceInvoiceHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      REPEAT
        ServiceInvoiceLine.GET(ServiceInvoiceHeader."No.",TempServiceLine."Line No.");
        ServiceInvoiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceInvoiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceInvoiceLine.TESTFIELD("Line Discount %",TempServiceLine."Line Discount %");
        ServiceInvoiceLine.TESTFIELD("Warranty Disc. %",TempServiceLine."Warranty Disc. %");
        ServiceInvoiceLine.TESTFIELD("Contract Disc. %",TempServiceLine."Contract Disc. %");
        ServiceInvoiceLine.TESTFIELD("Line Discount Type",TempServiceLine."Line Discount Type");
        ServiceInvoiceLine.TESTFIELD("Line Discount Amount",TempServiceLine."Line Discount Amount");
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@73(DocumentNo@1001 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Invoice);
      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD("Customer No.",CustomerNo);
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceOrderPost@52(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceHeader@1003 : Record 5900;
    BEGIN
      Assert.IsFalse(
        ServiceHeader.GET(ServiceHeader."Document Type"::Order,TempServiceLine."Document No."),
        STRSUBSTNO(
          ServiceOrderMustNotExist,ServiceHeader.TABLECAPTION,ServiceHeader.FIELDCAPTION("Document Type"),
          ServiceHeader."Document Type"::Order,ServiceHeader.FIELDCAPTION("No."),TempServiceLine."Document No."));

      VerifyServiceInvoice(TempServiceLine);
      VerifyServiceShipment(TempServiceLine);
      VerifyResourceEntryInvoice(TempServiceLine."Document No.");
      VerifyGLEntry(TempServiceLine."Document No.");

      ServiceInvoiceHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      VerifyServiceLedgerEntry(ServiceInvoiceHeader."No.",TempServiceLine."Customer No.");
      VerifyCustomerLedgerEntry(ServiceInvoiceHeader."No.",ServiceInvoiceHeader."Posting Date");
      VerifyDetailedCustLedgerEntry(ServiceInvoiceHeader."No.",CalculateTotalAmountOnInvoice(TempServiceLine."Document No."));
    END;

    LOCAL PROCEDURE VerifyServiceShipment@15(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceShipmentLine@1004 : Record 5991;
    BEGIN
      // Verify that the values of the fields Type and No. of Service Shipment Line are equal to the value of the
      // field Type and No. of the relevant Service Line.
      TempServiceLine.FINDSET;
      ServiceShipmentLine.SETRANGE("Order No.",TempServiceLine."Document No.");
      REPEAT
        ServiceShipmentLine.SETRANGE("Order Line No.",TempServiceLine."Line No.");
        ServiceShipmentLine.FINDFIRST;
        ServiceShipmentLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceShipmentLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceShipmentLine.TESTFIELD("Line Discount %",TempServiceLine."Line Discount %");
        ServiceShipmentLine.TESTFIELD("Line Discount Type",TempServiceLine."Line Discount Type");
        ServiceShipmentLine.TESTFIELD("Warranty Disc. %",TempServiceLine."Warranty Disc. %");
        ServiceShipmentLine.TESTFIELD("Contract Disc. %",TempServiceLine."Contract Disc. %");
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVATEntry@77(DocumentNo@1002 : Code[20];PostingDate@1001 : Date);
    VAR
      VATEntry@1003 : Record 254;
    BEGIN
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.FINDFIRST;
      VATEntry.TESTFIELD("Posting Date",PostingDate);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(MessageTest@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@3(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := NOT (Question = ServiceContractConfirmation);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemReplacementHandler@60(VAR ServiceItemReplacement@1001 : Page 5985;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::OK;
    END;

    BEGIN
    {
      // [FEATURE] [Contract Discount] [Service]
      Unsupported version tags:
      NA: Unable to Compile

      Test for Service Warranty and Discounts:
        1. Verification of the Service Discounts Priorities when All the Discounts Are of the Same Percentage.
           a. TC-RSM-D-1 - Posting a Service Order with Discounts when the Exclude Warranty and the Exclude Contract Discount
                           Fields Are Not Selected.
           b. TC-RSM-D-2 - Posting a Service Order with Discounts when the Exclude Warranty Field Is Selected while the Exclude
                           Contract Discount Field Is Not.
           c. TC-RSM-D-3 - Posting a Service Order with Discounts when Both the Exclude Warranty Field and the Exclude Contract
                           Discount Fields Are Selected.
           d. TC-RSM-D-4 - Posting a Service Order with Discounts when Exclude Contract Discount Field Is Selected while the Exclude
                           Warranty Field Is Not.
        2. Verification of the Service Discount Priorities When One Discount Is of a Greater Value than the Others, Verification
           of Correct Posting of Service Discounts Represented in Foreign Currency. Posting with the Manual Discount in LCY.
           a. TC-RSM-D-5 - Posting a Service Order with Discounts when the Contract Discount Has the Greatest Value of All.
                           Verification of Impossibility to Assign Manual Discount to the Service Line when the Line Discount
                           Type Is Contract Discount.
           b. TC-RSM-D-6 - Posting a Service Order with Discounts when the Item Line Discount Has the Greatest Value of All.
           c. TC-RSM-D-7 - Posting a Service Order with Discounts when the Warranty Discount Has the Greatest Value of All.
           d. TC-RSM-D-8 - Posting a Service Order with Discounts when the Item Line Discount Has the Greatest Value of All.
                           Verification of the Possibility to Manually Assign a Service Line Discount in This Case and to Post It.
           e. TC-RSM-D-9 - Posting a Service Order with Discounts (LCY) when the Warranty Line Discount Has the Greatest Value
                           of All. Verification of Possibility to Manually Assign a Service Line Discount in This Case and to Post It.

      TFS_TS_ID = 20925
      Covers Test case:
        TFS_TC_ID=12223 and 32015
        TFS_TC_ID=12224 and 32016
    }
    END.
  }
}

