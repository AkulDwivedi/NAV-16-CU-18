OBJECT Codeunit 134063 ERM Intrastat Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryInventory@1008 : Codeunit 132201;
      LibraryPurchase@1020 : Codeunit 130512;
      LibrarySales@1025 : Codeunit 130509;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryReportDataset@1030 : Codeunit 131007;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      LibraryVariableStorage@1001 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      IntrastatJnlErr@1010 : TextConst 'ENU=Intrastat journal contains invalid values.';
      IntrastatJnlNotEmptyErr@1007 : TextConst 'ENU=Intrastat journal not empty.';
      IntrastatJnlEmptyErr@1005 : TextConst 'ENU=Intrastat journal empty.';

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistWithItemJournalLine@3();
    VAR
      ItemJournalLine@1000 : Record 83;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1003 : Decimal;
    BEGIN
      // Test Intrastat Checklist report with Item Journal Line posting data.

      // Setup: Create and post two Item Journal Lines.
      Initialize;
      CreateAndPostItemJournalLine(
        ItemJournalLine,CreateItem,ItemJournalLine."Entry Type"::Purchase,GetTransactionType,GetTransportMethod,GetCountryRegionCode);
      Quantity := ItemJournalLine.Quantity;
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Item No.",ItemJournalLine."Entry Type"::Sale,GetTransactionType,GetTransportMethod,'');

      // Exercise: Generate Intrastat Checklist.
      RunIntrastatChecklist(
        IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,ItemJournalLine."Item No.",ItemJournalLine."Transaction Type");

      // Verify: Verify values on Intrastat Checklist.
      VerifyValuesOnIntrastatChecklist(GetTariffNo(ItemJournalLine."Item No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistWithPurchaseOrder@11();
    VAR
      PurchaseLine@1000 : Record 39;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Checklist report with Purchase Order posting data.

      // Setup: Create and post two Purchase Orders.
      Initialize;
      PostTwoPurchaseDocuments(PurchaseLine,PurchaseLine."Document Type"::Order,Quantity);

      // Exercise: Generate Intrastat Checklist.
      RunIntrastatChecklist(IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,PurchaseLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Checklist.
      VerifyValuesOnIntrastatChecklist(GetTariffNo(PurchaseLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistWithPurchaseCreditMemo@12();
    VAR
      PurchaseLine@1003 : Record 39;
      IntrastatJnlLine@1001 : Record 263;
      Quantity@1000 : Decimal;
    BEGIN
      // Test Intrastat Checklist report with Purchase Credit Memo posting data.

      // Setup: Create and post two Purchase Credit Memos.
      Initialize;
      PostTwoPurchaseDocuments(PurchaseLine,PurchaseLine."Document Type"::"Credit Memo",Quantity);

      // Exercise: Generate Intrastat Checklist.
      RunIntrastatChecklist(IntrastatJnlLine,IntrastatJnlLine.Type::Shipment,PurchaseLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Checklist.
      VerifyValuesOnIntrastatChecklist(GetTariffNo(PurchaseLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistPurchaseDocumentsMultipleBatches@56();
    VAR
      PurchaseLine@1000 : Record 39;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // [SCENARIO] Run 'Intrastat - Checklist' for purchase documents having mutiple intrastat journal batches.

      // [GIVEN] Two posted Purchase Orders
      Initialize;
      PostTwoPurchaseDocuments(PurchaseLine,PurchaseLine."Document Type"::Order,Quantity);
      // [GIVEN] Two Intrastat Journal Batches: B1, B2
      CreateIntrastatLineMultipleBatches(IntrastatJnlLine,WORKDATE);

      // [WHEN] Run 'Intrastat - Checklist' on on the Batch B2.
      RunGetItemEntriesAndIntrastatChecklist(
        IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,PurchaseLine."No.",GetTransactionType);

      // [THEN] Company info is printed on the report header.
      VerifyCompanyNameIsOnIntrastatChecklist;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistWithSalesOrder@32();
    VAR
      SalesLine@1000 : Record 37;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Checklist report with Sales Order posting data.

      // Setup: Create and post two Sales Orders.
      Initialize;
      PostTwoSalesDocuments(SalesLine,SalesLine."Document Type"::Order,Quantity);

      // Exercise: Generate Intrastat Checklist.
      RunIntrastatChecklist(IntrastatJnlLine,IntrastatJnlLine.Type::Shipment,SalesLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Checklist.
      VerifyValuesOnIntrastatChecklist(GetTariffNo(SalesLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistWithSalesCreditMemo@33();
    VAR
      SalesLine@1000 : Record 37;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Checklist report with Sales Credit Memo posting data.

      // Setup: Create and post two Sales Credit Memos.
      Initialize;
      PostTwoSalesDocuments(SalesLine,SalesLine."Document Type"::"Credit Memo",Quantity);

      // Exercise: Generate Intrastat Checklist.
      RunIntrastatChecklist(IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,SalesLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Checklist.
      VerifyValuesOnIntrastatChecklist(GetTariffNo(SalesLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatChecklist)]
    PROCEDURE IntrastatChecklistSalesDocumentMultipleBatches@57();
    VAR
      SalesLine@1000 : Record 37;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // [SCENARIO] Run 'Intrastat - Checklist' for sales documents having mutiple intrastat journal batches.

      // [GIVEN] Two posted Sales Orders
      Initialize;
      PostTwoSalesDocuments(SalesLine,SalesLine."Document Type"::Order,Quantity);
      // [GIVEN] Two Intrastat Journal Batches: B1, B2
      CreateIntrastatLineMultipleBatches(IntrastatJnlLine,WORKDATE);

      // [WHEN] Run 'Intrastat - Checklist' on on the Batch B2.
      RunGetItemEntriesAndIntrastatChecklist(
        IntrastatJnlLine,IntrastatJnlLine.Type::Shipment,SalesLine."No.",GetTransactionType);

      // [THEN] Company info is printed on the report header.
      VerifyCompanyNameIsOnIntrastatChecklist;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatForm)]
    PROCEDURE IntrastatFormWithItemJournalLine@24();
    VAR
      ItemJournalLine@1000 : Record 83;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Form report with Item Journal Line posting data.

      // Setup: Create and post two Item Journal Lines.
      Initialize;
      CreateAndPostItemJournalLine(
        ItemJournalLine,CreateItem,ItemJournalLine."Entry Type"::Purchase,GetTransactionType,GetTransportMethod,GetCountryRegionCode);
      Quantity := ItemJournalLine.Quantity;
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Item No.",ItemJournalLine."Entry Type"::Sale,GetTransactionType,GetTransportMethod,'');

      // Exercise: Generate Intrastat Form.
      RunIntrastatForm(IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,ItemJournalLine."Item No.",ItemJournalLine."Transaction Type");

      // Verify: Verify values on Intrastat Form.
      VerifyValuesOnIntrastatForm(GetTariffNo(ItemJournalLine."Item No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatForm)]
    PROCEDURE IntrastatFormWithPurchaseOrder@23();
    VAR
      PurchaseLine@1000 : Record 39;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Form report with Purchase Order posting data.

      // Setup: Create and post two Purchase Orders.
      Initialize;
      PostTwoPurchaseDocuments(PurchaseLine,PurchaseLine."Document Type"::Order,Quantity);

      // Exercise: Generate Intrastat Form.
      RunIntrastatForm(IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,PurchaseLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Form.
      VerifyValuesOnIntrastatForm(GetTariffNo(PurchaseLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatForm)]
    PROCEDURE IntrastatFormWithPurchaseCreditMemo@22();
    VAR
      PurchaseLine@1003 : Record 39;
      IntrastatJnlLine@1001 : Record 263;
      Quantity@1000 : Decimal;
    BEGIN
      // Test Intrastat Form report with Purchase Credit Memo posting data.

      // Setup: Create and post two Purchase Credit Memos.
      Initialize;
      PostTwoPurchaseDocuments(PurchaseLine,PurchaseLine."Document Type"::"Credit Memo",Quantity);

      // Exercise: Generate Intrastat Form.
      RunIntrastatForm(IntrastatJnlLine,IntrastatJnlLine.Type::Shipment,PurchaseLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Form.
      VerifyValuesOnIntrastatForm(GetTariffNo(PurchaseLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatForm)]
    PROCEDURE IntrastatFormWithSalesOrder@20();
    VAR
      SalesLine@1000 : Record 37;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Form report with Sales Order posting data.

      // Setup: Create and post two Sales Orders.
      Initialize;
      PostTwoSalesDocuments(SalesLine,SalesLine."Document Type"::Order,Quantity);

      // Exercise: Generate Intrastat Form.
      RunIntrastatForm(IntrastatJnlLine,IntrastatJnlLine.Type::Shipment,SalesLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Form.
      VerifyValuesOnIntrastatForm(GetTariffNo(SalesLine."No."),Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerIntrastatForm)]
    PROCEDURE IntrastatFormWithSalesCreditMemo@1();
    VAR
      SalesLine@1000 : Record 37;
      IntrastatJnlLine@1002 : Record 263;
      Quantity@1001 : Decimal;
    BEGIN
      // Test Intrastat Form report with Sales Credit Memo posting data.

      // Setup: Create and post two Sales Credit Memos.
      Initialize;
      PostTwoSalesDocuments(SalesLine,SalesLine."Document Type"::"Credit Memo",Quantity);

      // Exercise: Generate Intrastat Form.
      RunIntrastatForm(IntrastatJnlLine,IntrastatJnlLine.Type::Receipt,SalesLine."No.",GetTransactionType);

      // Verify: Verify values on Intrastat Form.
      VerifyValuesOnIntrastatForm(GetTariffNo(SalesLine."No."),Quantity);
    END;

    [Test]
    PROCEDURE IntrastatDefaultWithZeroAmount@16();
    VAR
      IntrastatJnlLine@1002 : Record 263;
      SalesLine@1000 : Record 37;
      Item@1004 : Record 27;
      Amount@1001 : Decimal;
      Quantity@1003 : Integer;
    BEGIN
      // Test default Intrastat report when Sales has zero amount.

      // Setup.
      Initialize;
      Item.GET(CreateItemWithNonZeroUnitPrice);

      CreateAndPostSalesDocumentWithUnitPrice(
        SalesLine,SalesLine."Document Type"::Order,Item."No.",
        GetTransactionType,GetTransportMethod,0);
      Quantity := SalesLine.Quantity;
      Amount := ABS(Quantity * Item."Unit Price");

      // Exercise.
      CreateIntrastatLine(IntrastatJnlLine,TODAY);
      RunGetItemEntries(
        IntrastatJnlLine,WORKDATE,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),FALSE);

      // Verify.
      VerifyValuesOnIntrastatJournal(IntrastatJnlLine,SalesLine."No.",Quantity,Amount);
    END;

    [Test]
    [HandlerFunctions(ReqPageHandlGetItemLedgEntries)]
    PROCEDURE IntrastatDontRecalcZerosWithZeroAmount@25();
    VAR
      IntrastatJnlLine@1002 : Record 263;
      SalesLine@1000 : Record 37;
      Quantity@1001 : Integer;
    BEGIN
      // Test Intrastat report with true 'Don't recalculate zero amounts' setting when Sales has zero amount.

      // Setup.
      Initialize;
      CreateAndPostSalesDocumentWithUnitPrice(
        SalesLine,SalesLine."Document Type"::Order,CreateItemWithNonZeroUnitPrice,
        GetTransactionType,GetTransportMethod,0);
      Quantity := SalesLine.Quantity;

      // Exercise.
      CreateIntrastatLine(IntrastatJnlLine,TODAY);
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(CALCDATE('<6M>',WORKDATE));
      RunGetItemEntries(
        IntrastatJnlLine,WORKDATE,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),TRUE);

      // Verify.
      VerifyValuesOnIntrastatJournal(IntrastatJnlLine,SalesLine."No.",Quantity,0);
    END;

    [Test]
    [HandlerFunctions(ReqPageHandlGetItemLedgEntries)]
    PROCEDURE IntrastatDontRecalcAndShowZerosWithZeroAmount@26();
    VAR
      SalesLine@1000 : Record 37;
      IntrastatJnlLine@1002 : Record 263;
    BEGIN
      // Test Intrastat report with true 'Don't recalculate zero amounts' and true 'Don't show zero amounts' setting when Sales has zero amount.

      // Setup.
      Initialize;
      CreateAndPostSalesDocumentWithUnitPrice(
        SalesLine,SalesLine."Document Type"::Order,CreateItemWithNonZeroUnitPrice,
        GetTransactionType,GetTransportMethod,0);

      // Exercise.
      CreateIntrastatLine(IntrastatJnlLine,TODAY);
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(CALCDATE('<6M>',WORKDATE));
      RunGetItemEntries(
        IntrastatJnlLine,WORKDATE,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),TRUE);

      // Verify.
      VerifyEmptyIntrastatJournal(IntrastatJnlLine,SalesLine."No.");
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;
      UpdateIntrastatCountryCode; // Required for Intrastat.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.CreateTransportMethodTableData;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@21(VAR ItemJournalLine@1000 : Record 83;ItemNo@1006 : Code[20];EntryType@1004 : Option;TransactionType@1002 : Code[10];TransportMethod@1003 : Code[10];CountryRegionCode@1005 : Code[10]);
    VAR
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,
        LibraryRandom.RandDec(100,2) * 100);
      ItemJournalLine.VALIDATE("Transaction Type",TransactionType);
      ItemJournalLine.VALIDATE("Transport Method",TransportMethod);
      ItemJournalLine.VALIDATE("Country/Region Code",CountryRegionCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@37(VAR PurchaseLine@1001 : Record 39;DocumentType@1003 : Option;ItemNo@1006 : Code[20];TransactionType@1004 : Code[10];TransportMethod@1005 : Code[10]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Create Purchase Document With Random Quantity and Direct Unit Cost.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Transaction Type",TransactionType);
      PurchaseHeader.VALIDATE("Transport Method",TransportMethod);
      PurchaseHeader.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2) * 100);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@18(VAR SalesLine@1000 : Record 37;DocumentType@1002 : Option;ItemNo@1006 : Code[20];TransactionType@1005 : Code[10];TransportMethod@1004 : Code[10]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Create Sales Document with Random Quantity and Unit Price.
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,ItemNo,TransactionType,TransportMethod);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentWithUnitPrice@7(VAR SalesLine@1000 : Record 37;DocumentType@1002 : Option;ItemNo@1006 : Code[20];TransactionType@1005 : Code[10];TransportMethod@1004 : Code[10];UnitPrice@1003 : Decimal);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Create Sales Document with Random Quantity and Unit Price.
      CreateSalesDocument(SalesHeader,SalesLine,DocumentType,ItemNo,TransactionType,TransportMethod);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@27(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1000 : Record 37;DocumentType@1002 : Option;ItemNo@1006 : Code[20];TransactionType@1005 : Code[10];TransportMethod@1004 : Code[10]);
    BEGIN
      // Create Sales Document with Random Quantity and Unit Price.
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      SalesHeader.VALIDATE("Transaction Type",TransactionType);
      SalesHeader.VALIDATE("Transport Method",TransportMethod);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2) * 100);
    END;

    LOCAL PROCEDURE CreateAndUpdateIntrastatBatch@9(VAR IntrastatJnlBatch@1000 : Record 262;JournalTemplateName@1001 : Code[10];JournalDate@1002 : Date);
    BEGIN
      LibraryERM.CreateIntrastatJnlBatch(IntrastatJnlBatch,JournalTemplateName);
      IntrastatJnlBatch.VALIDATE("Statistics Period",FORMAT(JournalDate,0,'<Year><Month,2>'));  // Take Value in YYMM format.
      IntrastatJnlBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@6() : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Country/Region Code",GetCountryRegionCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@10() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Country/Region Code",GetCountryRegionCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateIntrastatLine@40(VAR IntrastatJnlLine@1000 : Record 263;JournalDate@1003 : Date);
    VAR
      IntrastatJnlTemplate@1001 : Record 261;
      IntrastatJnlBatch@1002 : Record 262;
    BEGIN
      LibraryERM.CreateIntrastatJnlTemplate(IntrastatJnlTemplate);
      CreateAndUpdateIntrastatBatch(IntrastatJnlBatch,IntrastatJnlTemplate.Name,JournalDate);
      LibraryERM.CreateIntrastatJnlLine(IntrastatJnlLine,IntrastatJnlBatch."Journal Template Name",IntrastatJnlBatch.Name);
    END;

    LOCAL PROCEDURE CreateIntrastatLineMultipleBatches@30(VAR IntrastatJnlLine@1000 : Record 263;JournalDate@1003 : Date);
    VAR
      IntrastatJnlTemplate@1001 : Record 261;
      IntrastatJnlBatch@1002 : Record 262;
    BEGIN
      LibraryERM.CreateIntrastatJnlTemplate(IntrastatJnlTemplate);
      // Create Batch 1
      CreateAndUpdateIntrastatBatch(IntrastatJnlBatch,IntrastatJnlTemplate.Name,JournalDate);
      // Create Batch 2
      CreateAndUpdateIntrastatBatch(IntrastatJnlBatch,IntrastatJnlTemplate.Name,JournalDate);
      LibraryERM.CreateIntrastatJnlLine(IntrastatJnlLine,IntrastatJnlBatch."Journal Template Name",IntrastatJnlBatch.Name);
      IntrastatJnlLine.SETRANGE("Journal Template Name",IntrastatJnlBatch."Journal Template Name");
      IntrastatJnlLine.SETRANGE("Journal Batch Name",IntrastatJnlBatch.Name);
    END;

    LOCAL PROCEDURE CreateItem@2() : Code[20];
    VAR
      Item@1002 : Record 27;
      TariffNumber@1000 : Record 260;
    BEGIN
      TariffNumber.FINDFIRST;
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Tariff No.",TariffNumber."No.");
      Item.VALIDATE("Net Weight",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithNonZeroUnitPrice@28() : Code[20];
    VAR
      Item@1002 : Record 27;
      TariffNumber@1000 : Record 260;
    BEGIN
      TariffNumber.FINDFIRST;
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Tariff No.",TariffNumber."No.");
      Item.VALIDATE("Net Weight",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Unit Price",LibraryRandom.RandIntInRange(1,100)); // Creating integer because value is not important
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE GetCountryRegionCode@5() : Code[10];
    VAR
      CountryRegion@1000 : Record 9;
    BEGIN
      CountryRegion.SETFILTER("Intrastat Code",'<>%1','');
      CountryRegion.FINDFIRST;
      EXIT(CountryRegion.Code);
    END;

    LOCAL PROCEDURE GetTransactionType@38() : Code[10];
    VAR
      TransactionType@1000 : Record 258;
    BEGIN
      TransactionType.FINDFIRST;
      EXIT(TransactionType.Code);
    END;

    LOCAL PROCEDURE GetTransportMethod@4() : Code[10];
    VAR
      TransportMethod@1000 : Record 259;
    BEGIN
      TransportMethod.FINDFIRST;
      EXIT(TransportMethod.Code);
    END;

    LOCAL PROCEDURE GetTariffNo@15(ItemNo@1001 : Code[20]) : Code[10];
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      EXIT(Item."Tariff No.");
    END;

    LOCAL PROCEDURE PostTwoSalesDocuments@39(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;VAR Quantity@1002 : Decimal);
    BEGIN
      CreateAndPostSalesDocument(SalesLine,DocumentType,CreateItem,GetTransactionType,GetTransportMethod);
      Quantity := SalesLine.Quantity;
      CreateAndPostSalesDocument(SalesLine,DocumentType,SalesLine."No.",'','');
    END;

    LOCAL PROCEDURE PostTwoPurchaseDocuments@45(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;VAR Quantity@1002 : Decimal);
    BEGIN
      CreateAndPostPurchaseDocument(PurchaseLine,DocumentType,CreateItem,GetTransactionType,GetTransportMethod);
      Quantity := PurchaseLine.Quantity;
      CreateAndPostPurchaseDocument(PurchaseLine,DocumentType,PurchaseLine."No.",'','');
    END;

    LOCAL PROCEDURE RunIntrastatChecklist@14(IntrastatJnlLine@1000 : Record 263;Type@1004 : Option;ItemNo@1002 : Code[20];TransactionType@1003 : Code[10]);
    BEGIN
      CreateIntrastatLine(IntrastatJnlLine,WORKDATE);
      RunGetItemEntriesAndIntrastatChecklist(IntrastatJnlLine,Type,ItemNo,TransactionType);
    END;

    LOCAL PROCEDURE RunGetItemEntriesAndIntrastatChecklist@44(VAR IntrastatJnlLine@1000 : Record 263;Type@1004 : Option;ItemNo@1002 : Code[20];TransactionType@1003 : Code[10]);
    VAR
      IntrastatChecklist@1001 : Report 502;
    BEGIN
      RunGetItemEntries(IntrastatJnlLine,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),FALSE);

      COMMIT;
      CLEAR(IntrastatChecklist);
      IntrastatJnlLine.SETRANGE("Item No.",ItemNo);
      IntrastatJnlLine.SETRANGE("Transaction Type",TransactionType);
      IntrastatJnlLine.SETRANGE(Type,Type);
      IntrastatChecklist.SETTABLEVIEW(IntrastatJnlLine);
      IntrastatChecklist.RUN;
    END;

    LOCAL PROCEDURE RunIntrastatForm@13(IntrastatJnlLine@1000 : Record 263;Type@1004 : Option;ItemNo@1002 : Code[20];TransactionType@1003 : Code[10]);
    VAR
      IntrastatForm@1001 : Report 501;
    BEGIN
      CreateIntrastatLine(IntrastatJnlLine,TODAY);
      RunGetItemEntries(IntrastatJnlLine,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),FALSE);
      IntrastatJnlLine.SETRANGE("Item No.",ItemNo);
      IntrastatJnlLine.SETRANGE("Transaction Type",TransactionType);
      IntrastatJnlLine.SETRANGE(Type,Type);

      COMMIT;
      CLEAR(IntrastatForm);
      IntrastatForm.SETTABLEVIEW(IntrastatJnlLine);
      IntrastatForm.RUN;
    END;

    LOCAL PROCEDURE RunGetItemEntries@19(IntrastatJnlLine@1002 : Record 263;StartDate@1001 : Date;EndDate@1003 : Date;UseReqPage@1004 : Boolean);
    VAR
      GetItemLedgerEntries@1000 : Report 594;
    BEGIN
      GetItemLedgerEntries.InitializeRequest(StartDate,EndDate,0);
      GetItemLedgerEntries.SetIntrastatJnlLine(IntrastatJnlLine);
      IF UseReqPage THEN
        COMMIT
      ELSE
        GetItemLedgerEntries.USEREQUESTPAGE(FALSE);
      GetItemLedgerEntries.RUN;
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@17(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyValuesOnIntrastatChecklist@48(TariffNo@1000 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('IntrastatJnlLineQty',Quantity);
      LibraryReportDataset.AssertElementWithValueExists('IntrastatJnlLineTariffNo',TariffNo);
    END;

    LOCAL PROCEDURE VerifyCompanyNameIsOnIntrastatChecklist@29();
    VAR
      CompanyInformation@1002 : Record 79;
      CompanyInformationName@1000 : Variant;
    BEGIN
      CompanyInformation.GET;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetLastRow;
      CompanyInformationName := CompanyInformation.Name;
      LibraryReportDataset.FindCurrentRowValue('CompanyName',CompanyInformationName);
    END;

    LOCAL PROCEDURE VerifyValuesOnIntrastatJournal@34(IntrastatJnlLine@1003 : Record 263;ItemNo@1000 : Code[20];Quantity@1001 : Decimal;Amount@1002 : Decimal);
    BEGIN
      IntrastatJnlLine.SETRANGE("Item No.",ItemNo);
      IF IntrastatJnlLine.FINDFIRST THEN BEGIN
        Assert.AreEqual(Quantity,IntrastatJnlLine.Quantity,IntrastatJnlErr);
        Assert.AreEqual(Amount,IntrastatJnlLine.Amount,IntrastatJnlErr)
      END ELSE
        Assert.Fail(IntrastatJnlEmptyErr);
    END;

    LOCAL PROCEDURE VerifyEmptyIntrastatJournal@42(IntrastatJnlLine@1003 : Record 263;ItemNo@1000 : Code[20]);
    BEGIN
      IntrastatJnlLine.SETRANGE("Item No.",ItemNo);
      Assert.IsTrue(IntrastatJnlLine.ISEMPTY,IntrastatJnlNotEmptyErr);
    END;

    LOCAL PROCEDURE VerifyValuesOnIntrastatForm@47(TariffNo@1000 : Code[10];Quantity@1001 : Decimal);
    VAR
      TariffNumber@1004 : Record 260;
    BEGIN
      TariffNumber.GET(TariffNo);

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Quantity_IntraJnlLine',Quantity);
      LibraryReportDataset.AssertElementWithValueExists('TariffNo_IntraJnlLine',TariffNo);
      LibraryReportDataset.AssertElementWithValueExists('ItemDesc_IntraJnlLine',TariffNumber.Description);
    END;

    LOCAL PROCEDURE UpdateIntrastatCountryCode@100();
    VAR
      CompanyInformation@1000 : Record 79;
      CountryRegion@1001 : Record 9;
    BEGIN
      CompanyInformation.GET;
      CountryRegion.GET(CompanyInformation."Country/Region Code");
      IF CountryRegion."Intrastat Code" = '' THEN BEGIN
        CountryRegion."Intrastat Code" := CountryRegion.Code;
        CountryRegion.MODIFY(TRUE);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerIntrastatChecklist@200(VAR IntrastatChecklist@1000 : TestRequestPage 502);
    BEGIN
      IntrastatChecklist.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerIntrastatForm@43(VAR IntrastatForm@1000 : TestRequestPage 501);
    BEGIN
      IntrastatForm.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReqPageHandlGetItemLedgEntries@35(VAR GetItemLedgEntries@1000 : TestRequestPage 594);
    VAR
      SkipRecalcForZeros@1001 : Variant;
      SkipZeros@1002 : Variant;
      StartDate@1003 : Variant;
      EndDate@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SkipRecalcForZeros);
      LibraryVariableStorage.Dequeue(SkipZeros);
      LibraryVariableStorage.Dequeue(StartDate);
      LibraryVariableStorage.Dequeue(EndDate);
      GetItemLedgEntries.SkipRecalcForZeros.SETVALUE(SkipRecalcForZeros);
      GetItemLedgEntries.SkipZeros.SETVALUE(SkipZeros);
      GetItemLedgEntries.StartingDate.SETVALUE(StartDate);
      GetItemLedgEntries.EndingDate.SETVALUE(EndDate);
      GetItemLedgEntries.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Intrastat]
      Test Intrastat Reports.
      1. Test Intrastat Checklist report with Item Journal Line posting data.
      2. Test Intrastat Checklist report with Purchase Order posting data.
      3. Test Intrastat Checklist report with Purchase Credit Memo posting data.
      4. Test Intrastat Checklist report with Sales Order posting data.
      5. Test Intrastat Checklist report with Sales Credit Memo posting data.
      6. Test Intrastat Form report with Item Journal Line posting data.
      7. Test Intrastat Form report with Purchase Order posting data.
      8. Test Intrastat Form report with Purchase Credit Memo posting data.
      9. Test Intrastat Form report with Sales Order posting data.
      10. Test Intrastat Form report with Sales Credit Memo posting data.
      11. Test default Intrastat report when Sales has zero amount.
      12. Test Intrastat report with true 'Don't recalculate zero amounts' setting when Sales has zero amount.
      13. Test Intrastat report with true 'Don't recalculate zero amounts' and true 'Don't show zero amounts' setting when Sales has zero amount.
      14. Test Intrastat Check List report on multiple batches.

      Covers Test cases: 253885
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                TFS ID
      -----------------------------------------------------------------------------------------
      IntrastatChecklistWithItemJournalLine,IntrastatChecklistWithPurchaseOrder         130868
      IntrastatChecklistWithPurchaseCreditMemo,IntrastatChecklistWithSalesOrder         130868
      IntrastatChecklistWithSalesCreditMemo,IntrastatFormWithItemJournalLine            130868
      IntrastatFormWithPurchaseOrder,IntrastatFormWithPurchaseCreditMemo                130868
      IntrastatFormWithSalesOrder,IntrastatFormWithSalesCreditMemo                      130868

      TFS_HF_ID = 343953
      Covers Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                TFS ID
      -----------------------------------------------------------------------------------------
      IntrastatDefaultWithZeroAmount,
      IntrastatDontRecalcZerosWithZeroAmount,
      IntrastatDontRecalcAndShowZerosWithZeroAmount                                     343953

      TFS_HF_ID = 109090
      -----------------------------------------------------------------------------------------
      Test Function Name                                                                TFS ID
      -----------------------------------------------------------------------------------------
      IntrastatChecklistPurchaseDocumentsMultipleBatches
      IntrastatChecklistSalesDocumentMultipleBatches
    }
    END.
  }
}

