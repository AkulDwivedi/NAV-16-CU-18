OBJECT Codeunit 134975 ERM Dimension Report
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      GenJnlTemplate@1024 : Record 80;
      GenJnlBatch@1021 : Record 232;
      GenJournalLine@1022 : Record 81;
      Assert@1003 : Codeunit 130000;
      LibraryDimension@1001 : Codeunit 131001;
      LibrarySales@1006 : Codeunit 130509;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryReportDataset@1004 : Codeunit 131007;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryVariableStorage@1011 : Codeunit 131004;
      LibraryCashFlow@1005 : Codeunit 131331;
      LibraryERM@1014 : Codeunit 131300;
      LibraryUtility@1017 : Codeunit 131000;
      isInitialized@1000 : Boolean;
      CheckValuePostingError@1009 : TextConst 'ENU=Dimension Value Code %1 must be %2.';
      CheckItemJnlLineDimIDError@1010 : TextConst 'ENU="Dimension Set ID is incorrect in Line No. = %1."';
      AnalysisCodeMissing@1013 : TextConst 'ENU=Enter an analysis view code.';
      DateFilterMissing@1008 : TextConst 'ENU=Enter a date filter.';
      ColumnLayoutNameMissing@1015 : TextConst 'ENU=Enter a column layout name.';
      AccNoGenJnlLineCap@1035 : TextConst 'ENU=AccountNo_GenJnlLine';
      DimTextCap@1034 : TextConst 'ENU=DimText';
      AllocationDimTextCap@1037 : TextConst 'ENU=AllocationDimText';
      AccNoGenJnlAlloCap@1036 : TextConst 'ENU=AccountNo_GenJnlAllocation';
      FailureDimValCodeMsg@1012 : TextConst 'ENU=Dimension Value Code should match Shortcut Dimension 1 Code';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      ClearDimensionCombinations;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting2)]
    PROCEDURE ValuePostingReportNoCodeAndSameCodeCombination@23();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      CheckValuePostingReport(DefaultDimension."Value Posting"::"No Code",DefaultDimension."Value Posting"::"Same Code");
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting2)]
    PROCEDURE ValuePostingReportNoCodeAndCodeMandatoryCombination@10();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      CheckValuePostingReport(DefaultDimension."Value Posting"::"No Code",DefaultDimension."Value Posting"::"Code Mandatory");
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting2)]
    PROCEDURE ValuePostingReportSameCodeAndCodeMandatoryCombination@11();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      ASSERTERROR
        CheckValuePostingReport(DefaultDimension."Value Posting"::"Same Code",DefaultDimension."Value Posting"::"Code Mandatory");
      Assert.ExpectedError('No row found');
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting2)]
    PROCEDURE ValuePostingReportNoCodeAndEmptyCombination@14();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      ASSERTERROR CheckValuePostingReport(DefaultDimension."Value Posting"::"No Code",DefaultDimension."Value Posting"::" ");
      Assert.ExpectedError('No row found');
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting2)]
    PROCEDURE ValuePostingReportSameCodeAndEmptyCombination@15();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      ASSERTERROR CheckValuePostingReport(DefaultDimension."Value Posting"::"Same Code",DefaultDimension."Value Posting"::" ");
      Assert.ExpectedError('No row found');
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting2)]
    PROCEDURE ValuePostingReportCodeMandatoryAndEmptyCombination@16();
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      ASSERTERROR CheckValuePostingReport(DefaultDimension."Value Posting"::"Code Mandatory",DefaultDimension."Value Posting"::" ");
      Assert.ExpectedError('No row found');
    END;

    [Test]
    [HandlerFunctions(RPHandlerCheckValuePosting)]
    PROCEDURE DimensionCheckValuePostingReport@1();
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
      Vendor@1003 : Record 23;
      DimensionValueCode@1005 : Code[20];
    BEGIN
      // Test Check Value Posting report functionality.

      // Setup: Create initial data for Check Value Posting report.
      Initialize;
      DimensionValueCode := CreateDimensionValues(DimensionValue);
      LibraryPurchase.CreateVendor(Vendor);
      CreateDefaultDimensionVendor(
        DefaultDimension,Vendor."No.",DimensionValue."Dimension Code",DimensionValueCode,
        DefaultDimension."Value Posting"::"Code Mandatory");
      LibraryDimension.CreateAccTypeDefaultDimension(
        DefaultDimension,DATABASE::Vendor,DimensionValue."Dimension Code",DimensionValue.Code,
        DefaultDimension."Value Posting"::"Same Code");

      // Exercise: Run Check Value Posting.
      RunCheckValuePosting(DimensionValue."Dimension Code");

      // Verify: Verify conflict dimension error.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorMessage_DefaultDim2',
        STRSUBSTNO(CheckValuePostingError,DimensionValueCode,DimensionValue.Code));

      // Tear down: Delete Vendor Default Dimension and Account Type Default Dimension.
      ClearDefaultDimensionCodes(DATABASE::Vendor,Vendor."No.");
      ClearDefaultDimensionCodes(DATABASE::Vendor,'');
    END;

    [Test]
    PROCEDURE DimensionCheckCalcInvtReport@6();
    VAR
      Item@1011 : Record 27;
      ItemJournalLine@1010 : Record 83;
      ItemJournalBatch@1009 : Record 233;
      Dimension@1008 : Record 348;
      SelectedDimension@1007 : Record 369;
      LibraryDimension@1006 : Codeunit 131001;
      LibraryInventory@1005 : Codeunit 132201;
      ObjectType@1004 : Integer;
      ObjectID@1003 : Integer;
      DimensionSetID@1002 : ARRAY [10] OF Integer;
      Counter@1001 : Integer;
      MaxCount@1000 : Integer;
    BEGIN
      // Test case checks that report Calculate Inventory creates Item Journal Lines with correctly specified Dimension IDs.

      Initialize;
      // 1. Create Item
      LibraryInventory.CreateItem(Item);
      // 2. Find Item Journal Batch of 'Item' type
      FindItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,TRUE);
      // 3. Create Dimension
      LibraryDimension.CreateDimension(Dimension);
      // 4. 1> Random < 10 number of Dimension Set IDs and lines to generate
      MaxCount := RANDOM(9) + 1;
      // 5. Create MaxCount number of Dimension Set IDs and lines
      FOR Counter := 1 TO MaxCount DO BEGIN
        DimensionSetID[Counter] := CreateDimSetID(Dimension);
        CreateItemJnlLineWithDim(
          ItemJournalBatch,ItemJournalLine,WORKDATE,DimensionSetID[Counter],ItemJournalLine."Entry Type"::Purchase,
          Item."No.");
      END;
      // 6. Post Item Journal Lines
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // 7. Set Object Type = Report
      ObjectType := 3;
      // 8. Set Object ID = Calculate Inventory
      ObjectID := REPORT::"Calculate Inventory";

      // 9. Select Dimension to make Calculate Inventory Report include only needed Dimension(s)
      SelectDimension(ObjectType,ObjectID,Dimension.Code);

      // 10. Run Report Calculate Inventory (filtering by Item and Dimension)
      CalculateInventory(ItemJournalLine,Item."No.",CALCDATE('<+1D>',WORKDATE),FALSE);

      // 11. Validate each generated line has correct Dimension SET ID
      FOR Counter := 1 TO MaxCount DO BEGIN
        Assert.AreEqual(DimensionSetID[Counter],ItemJournalLine."Dimension Set ID",
          STRSUBSTNO(CheckItemJnlLineDimIDError,ItemJournalLine."Line No."));
        ItemJournalLine.NEXT;
      END;

      // 12. TearDown: Delete all lines/Cleare Selected Dimension
      ItemJournalLine.DELETEALL;
      CleanSelectedDimension(SelectedDimension,USERID,ObjectType,ObjectID);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionDetail,PHandlerDimensionSelectionLevel)]
    PROCEDURE DimensionDetailAnalysisCodeMissingError@17();
    BEGIN
      Initialize;

      // Setup:
      SetDimensionDetailParameters('',FORMAT(WORKDATE));

      // Exercise & Verify:
      ASSERTERROR REPORT.RUN(REPORT::"Dimensions - Detail");
      Assert.ExpectedError(AnalysisCodeMissing);
    END;

    [Test]
    PROCEDURE DimensionCheckCalcInvtReportForMultipleLines@21();
    VAR
      DefaultDimension@1017 : ARRAY [2] OF Record 352;
      ItemJournalLine@1018 : Record 83;
      LibraryInventory@1005 : Codeunit 132201;
      ItemFilter@1000 : Text;
      ItemNo@1001 : ARRAY [2] OF Code[20];
    BEGIN
      // Test case checks that report Calculate Inventory creates Item Journal Lines with correctly specified Dimension Value Code.

      Initialize;
      // 1. Create 2 Item Journal Lines with Items and Default Dimension
      CreateTwoJrnlLinesItemsWithDefaultDimension(ItemJournalLine,DefaultDimension,ItemNo);

      // 2. Post 2 Item Journal Lines
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // 3. Select Dimension to make Calculate Inventory Report include only needed Dimensions (3 = Report)
      SelectDimension(3,REPORT::"Calculate Inventory",DefaultDimension[1]."Dimension Code");

      // 4. Run Report Calculate Inventory (filtering by Item and Dimension)
      ItemFilter := STRSUBSTNO('%1|%2',ItemNo[1],ItemNo[2]);
      CalculateInventory(ItemJournalLine,ItemFilter,CALCDATE('<+1D>',WORKDATE),FALSE);

      // 5. Validate each generated line has correct Dimension Value Code
      VerifyDimValForItemJournalLine(ItemJournalLine,DefaultDimension);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionDetail,PHandlerDimensionSelectionLevel)]
    PROCEDURE DimensionDetailDateFilterMissingError@18();
    VAR
      AnalysisView@1000 : Record 363;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup:
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"G/L Account",GLAccount."No.");
      SetDimensionDetailParameters(AnalysisView.Code,'');

      // Exercise & Verify:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Dimensions - Detail");
      Assert.ExpectedError(DateFilterMissing);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionDetail,PHandlerDimensionSelectionLevel,ConfirmHandlerYes)]
    PROCEDURE DimensionDetailWithGLAccountSource@20();
    VAR
      AnalysisView@1000 : Record 363;
      GLAccount@1001 : Record 15;
      ExpectedAmount@1002 : Decimal;
    BEGIN
      Initialize;

      IF CONFIRM('',TRUE) THEN ; // dummy confirm

      // Setup:
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"G/L Account",GLAccount."No.");
      ExpectedAmount := LibraryRandom.RandDec(100,2);
      CreateAndPostGenJnlLine(AnalysisView,ExpectedAmount);
      UpdateAnalysisView(AnalysisView.Code);

      // Exercise:
      SetDimensionDetailParameters(AnalysisView.Code,FORMAT(WORKDATE));
      COMMIT;
      REPORT.RUN(REPORT::"Dimensions - Detail");

      // Verify:
      VerifyDimensionDetailReport(AnalysisView.Code,ExpectedAmount)
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionTotal,PHandlerDimensionSelectionLevel)]
    PROCEDURE DimensionTotalAnalysisCodeMissingError@28();
    BEGIN
      Initialize;

      // Setup:
      SetDimensionTotalParameters('',CreateColumnLayout,FORMAT(WORKDATE));

      // Exercise & Verify:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Dimensions - Total");
      Assert.ExpectedError(AnalysisCodeMissing);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionTotal,PHandlerDimensionSelectionLevel)]
    PROCEDURE DimensionTotalColumnLayoutMissingError@29();
    VAR
      AnalysisView@1000 : Record 363;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup:
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"G/L Account",GLAccount."No.");
      SetDimensionTotalParameters(AnalysisView.Code,'',FORMAT(WORKDATE));

      // Exercise & Verify:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Dimensions - Total");
      Assert.ExpectedError(ColumnLayoutNameMissing);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionTotal,PHandlerDimensionSelectionLevel)]
    PROCEDURE DimensionTotallDateFilterMissingError@26();
    VAR
      AnalysisView@1000 : Record 363;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup:
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"G/L Account",GLAccount."No.");
      SetDimensionTotalParameters(AnalysisView.Code,CreateColumnLayout,'');

      // Exercise & Verify:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Dimensions - Total");
      Assert.ExpectedError(DateFilterMissing);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionTotal,PHandlerDimensionSelectionLevel,ConfirmHandlerYes)]
    PROCEDURE DimensionTotalWithGLAccountSource@33();
    VAR
      AnalysisView@1000 : Record 363;
      GLAccount@1001 : Record 15;
      ExpectedAmount@1002 : Decimal;
    BEGIN
      Initialize;

      IF CONFIRM('',TRUE) THEN ; // dummy confirm

      // Setup:
      LibraryERM.CreateGLAccount(GLAccount);
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"G/L Account",GLAccount."No.");
      ExpectedAmount := LibraryRandom.RandDec(100,2);
      CreateAndPostGenJnlLine(AnalysisView,ExpectedAmount);
      UpdateAnalysisView(AnalysisView.Code);

      // Exercise:
      SetDimensionTotalParameters(AnalysisView.Code,CreateColumnLayout,FORMAT(WORKDATE));
      COMMIT;
      REPORT.RUN(REPORT::"Dimensions - Total");

      // Verify:
      VerifyDimensionTotalReport(AnalysisView.Code,ExpectedAmount)
    END;

    [Test]
    [HandlerFunctions(RPHandlerDimensionTotal,PHandlerDimensionSelectionLevel,ConfirmHandlerYes)]
    PROCEDURE DimensionTotalWithCashFlowAccountSource@50();
    VAR
      AnalysisView@1000 : Record 363;
      CashFlowAccount@1001 : Record 841;
      ExpectedAmount@1002 : Decimal;
    BEGIN
      Initialize;

      IF CONFIRM('',TRUE) THEN ; // dummy confirm

      // Setup:
      LibraryCashFlow.CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"Cash Flow Account",CashFlowAccount."No.");
      ExpectedAmount := LibraryRandom.RandDec(100,2);
      CreateAndPostCashFlowJnlLine(AnalysisView,ExpectedAmount);
      UpdateAnalysisView(AnalysisView.Code);

      // Exercise:
      SetDimensionTotalParameters(AnalysisView.Code,CreateColumnLayout,FORMAT(WORKDATE));
      COMMIT;
      REPORT.RUN(REPORT::"Dimensions - Total");

      // Verify:
      VerifyDimensionTotalReport(AnalysisView.Code,ExpectedAmount)
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTestHandler)]
    PROCEDURE SingleDimensionLineShowsInGenJnlTest@34();
    VAR
      GenJnlAllocation@1014 : Record 221;
      GLAccount@1005 : ARRAY [3] OF Record 15;
      Dimension@1006 : ARRAY [3] OF Record 348;
      DimensionValue@1002 : ARRAY [3] OF Record 349;
      DimSetID@1000 : ARRAY [3] OF Integer;
      i@1007 : Integer;
      ExpectedResult@1009 : ARRAY [3] OF Text;
    BEGIN
      // Setup
      FOR i := 1 TO 3 DO BEGIN
        LibraryERM.CreateGLAccount(GLAccount[i]);
        CreateDimensionAndValue(Dimension[i],DimensionValue[i]);
      END;

      FindJnlTemplate;

      // Exercise
      SetDifferDimensions(DimSetID,Dimension,DimensionValue,0);
      PrepareGeneralLine(GenJournalLine,GenJnlAllocation,GLAccount,DimSetID);

      RunReportGeneralJournalTest;

      // Verify single Dimension Line is displayed on the report
      GetExpectResult(Dimension,DimensionValue,ExpectedResult);
      LibraryReportDataset.LoadDataSetFile;

      VerifyDimensionInJournalLine(GLAccount[1]."No.",ExpectedResult[1]);
      VerifyDimensionInAllocationLine(GLAccount[2]."No.",ExpectedResult[2]);
      VerifyDimensionInAllocationLine(GLAccount[3]."No.",ExpectedResult[3]);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTestHandler)]
    PROCEDURE MultipleDimensionLinesShowInGenJnlTest@59();
    VAR
      GenJnlAllocation@1005 : Record 221;
      GLAccount@1004 : ARRAY [3] OF Record 15;
      Dimension@1009 : ARRAY [3] OF Record 348;
      DimensionValue@1010 : ARRAY [3] OF Record 349;
      DimSetID@1000 : ARRAY [6] OF Integer;
      i@1014 : Integer;
      ExpectedResult@1015 : ARRAY [3] OF Text;
      FirstDimensionLine@1018 : Text;
    BEGIN
      // Setup
      FOR i := 1 TO 3 DO BEGIN
        LibraryERM.CreateGLAccount(GLAccount[i]);
        CreateDimensionAndValue(Dimension[i],DimensionValue[i]);
        FirstDimensionLine += STRSUBSTNO('%1 - %2;',Dimension[i].Code,DimensionValue[i].Code);
      END;

      SetDifferDimensions(DimSetID,Dimension,DimensionValue,0);

      FOR i := 1 TO 3 DO
        CreateDimensionAndValue(Dimension[i],DimensionValue[i]);

      SetDifferDimensions(DimSetID,Dimension,DimensionValue,DimSetID[3]);

      FindJnlTemplate;

      // Exercise
      PrepareGeneralLine(GenJournalLine,GenJnlAllocation,GLAccount,DimSetID);

      RunReportGeneralJournalTest;

      // Verify multiple Dimension Lines are displayed on the report
      // First line of the dimension.
      FirstDimensionLine := COPYSTR(FirstDimensionLine,1,STRLEN(FirstDimensionLine) - 1);
      // Second line of the dimension.
      GetExpectResult(Dimension,DimensionValue,ExpectedResult);
      LibraryReportDataset.LoadDataSetFile;

      VerifyDimensionInJournalLine(GLAccount[1]."No.",FirstDimensionLine);
      VerifyDimensionInJournalLine(GLAccount[1]."No.",ExpectedResult[1]);
      VerifyDimensionInAllocationLine(GLAccount[2]."No.",FirstDimensionLine);
      VerifyDimensionInAllocationLine(GLAccount[2]."No.",ExpectedResult[2]);
      VerifyDimensionInAllocationLine(GLAccount[3]."No.",FirstDimensionLine);
      VerifyDimensionInAllocationLine(GLAccount[3]."No.",ExpectedResult[3]);
    END;

    LOCAL PROCEDURE CreateDimensionAndValue@43(VAR Dimension@1000 : Record 348;VAR DimensionValue@1001 : Record 349);
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE FindJnlTemplate@55();
    BEGIN
      LibraryERM.FindRecurringTemplateName(GenJnlTemplate);
      GenJnlBatch.SETFILTER("Journal Template Name",GenJnlTemplate.Name);
      IF NOT GenJnlBatch.FINDFIRST THEN
        LibraryERM.CreateRecurringBatchName(GenJnlBatch,GenJnlTemplate.Name);
    END;

    LOCAL PROCEDURE CreateRecurringGeneralJournal@45(VAR GenJournalLine@1006 : Record 81;AccountNo@1001 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJnlTemplate.Name,GenJnlBatch.Name,GenJournalLine."Document Type",
        GenJournalLine."Account Type"::"G/L Account",AccountNo,LibraryRandom.RandInt(-2000));
      GenJournalLine.VALIDATE("Recurring Method",GenJournalLine."Recurring Method"::"V  Variable");
      EVALUATE(GenJournalLine."Recurring Frequency",'<CM+1M>');
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAllocationLine@46(VAR GenJnlAllocation@1000 : Record 221;AccountNo@1001 : Code[20];AllocationPercent@1002 : Decimal);
    BEGIN
      LibraryERM.CreateGenJnlAllocation(
        GenJnlAllocation,GenJournalLine."Journal Template Name",
        GenJournalLine."Journal Batch Name",
        GenJournalLine."Line No.");
      GenJnlAllocation.VALIDATE("Account No.",AccountNo);
      GenJnlAllocation.VALIDATE("Allocation %",AllocationPercent);
      GenJnlAllocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunReportGeneralJournalTest@47();
    BEGIN
      REPORT.RUN(REPORT::"General Journal - Test");
    END;

    LOCAL PROCEDURE SetDifferDimensions@56(VAR DimSetID@1001 : ARRAY [3] OF Integer;Dimension@1005 : ARRAY [3] OF Record 348;DimensionValue@1006 : ARRAY [3] OF Record 349;OldDimSetID@1002 : Integer);
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO BEGIN
        DimSetID[i] := LibraryDimension.CreateDimSet(OldDimSetID,Dimension[i].Code,DimensionValue[i].Code);
        OldDimSetID := DimSetID[i];
      END;
    END;

    LOCAL PROCEDURE PrepareGeneralLine@48(VAR GenJournalLine@1000 : Record 81;VAR GenJnlAllocation@1001 : Record 221;GLAccount@1002 : ARRAY [3] OF Record 15;DimSetID@1003 : ARRAY [3] OF Integer);
    VAR
      QtyPercent@1004 : Integer;
    BEGIN
      CLEAR(GenJournalLine);
      GenJournalLine.DELETEALL;

      CreateRecurringGeneralJournal(GenJournalLine,GLAccount[1]."No.");
      GenJournalLine.VALIDATE("Dimension Set ID",DimSetID[1]);
      GenJournalLine.MODIFY(TRUE);

      CLEAR(GenJnlAllocation);
      GenJnlAllocation.DELETEALL;

      QtyPercent := LibraryRandom.RandInt(99);

      CreateAllocationLine(GenJnlAllocation,GLAccount[2]."No.",QtyPercent);
      GenJnlAllocation.VALIDATE("Dimension Set ID",DimSetID[2]);
      GenJnlAllocation.MODIFY(TRUE);

      CreateAllocationLine(GenJnlAllocation,GLAccount[3]."No.",100 - QtyPercent);
      GenJnlAllocation.VALIDATE("Dimension Set ID",DimSetID[3]);
      GenJnlAllocation.MODIFY(TRUE);

      COMMIT;
    END;

    LOCAL PROCEDURE GetExpectResult@49(Dimension@1001 : ARRAY [3] OF Record 348;DimensionValue@1000 : ARRAY [3] OF Record 349;VAR ExpectedResult@1002 : ARRAY [3] OF Text);
    BEGIN
      ExpectedResult[1] := STRSUBSTNO('%1 - %2',Dimension[1].Code,DimensionValue[1].Code);
      ExpectedResult[2] := STRSUBSTNO('%1 - %2;%3 - %4',
          Dimension[1].Code,DimensionValue[1].Code,
          Dimension[2].Code,DimensionValue[2].Code);
      ExpectedResult[3] := STRSUBSTNO('%1 - %2;%3 - %4;%5 - %6',
          Dimension[1].Code,DimensionValue[1].Code,
          Dimension[2].Code,DimensionValue[2].Code,
          Dimension[3].Code,DimensionValue[3].Code);
    END;

    LOCAL PROCEDURE VerifyDimensionInJournalLine@51(AccountNo@1001 : Code[20];ExpectedResult@1004 : Text);
    BEGIN
      LibraryReportDataset.SetRange(AccNoGenJnlLineCap,AccountNo);
      LibraryReportDataset.AssertElementWithValueExists(DimTextCap,ExpectedResult);
    END;

    LOCAL PROCEDURE VerifyDimensionInAllocationLine@57(AccountNo@1002 : Code[20];ExpectedResult@1008 : Text);
    BEGIN
      LibraryReportDataset.SetRange(AccNoGenJnlAlloCap,AccountNo);
      LibraryReportDataset.AssertElementWithValueExists(AllocationDimTextCap,ExpectedResult);
    END;

    LOCAL PROCEDURE CheckValuePostingReport@2(LocalValuePosting@1004 : Option;GlobalValuePosting@1005 : Option);
    VAR
      Dimension@1003 : Record 348;
      Customer@1000 : Record 18;
      DefaultDimension@1007 : Record 352;
      LocalValueCode@1002 : Code[20];
      GlobalValueCode@1001 : Code[20];
    BEGIN
      Initialize;

      // Setup
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LocalValueCode := GetDimensionValueCode(Dimension.Code);
      GlobalValueCode := GetDimensionValueCode(Dimension.Code);
      IF LocalValuePosting = DefaultDimension."Value Posting"::"No Code" THEN
        LocalValueCode := '';
      IF GlobalValuePosting = DefaultDimension."Value Posting"::"No Code" THEN
        GlobalValueCode := '';

      // Exercise
      CreateDefaultDimensionCodes(Customer."No.",Dimension.Code,LocalValueCode,LocalValuePosting);
      CreateDefaultDimensionCodes('',Dimension.Code,GlobalValueCode,GlobalValuePosting);

      // Verify
      VerifyValuePostingReport(Customer);
    END;

    LOCAL PROCEDURE VerifyValuePostingReport@13(Customer@1001 : Record 18);
    BEGIN
      LibraryVariableStorage.Enqueue(DATABASE::Customer);
      COMMIT;
      REPORT.RUN(REPORT::"Check Value Posting");

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('No_DefaultDim2',Customer."No.")
    END;

    LOCAL PROCEDURE CreateAnalysisView@24(VAR AnalysisView@1000 : Record 363;AccountSource@1003 : Option;AccountNo@1004 : Code[20]);
    BEGIN
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE("Account Source",AccountSource);
      AnalysisView.VALIDATE("Account Filter",AccountNo);
      AnalysisView.VALIDATE("Starting Date",WORKDATE);
      AnalysisView.VALIDATE("Dimension 1 Code",LibraryERM.GetGlobalDimensionCode(1));
      AnalysisView.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJnlLine@38(AnalysisView@1000 : Record 363;Amount@1005 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1002 : Record 81;
      DimensionValue@1004 : Record 349;
    BEGIN
      SelectAndClearGenJnlBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",AnalysisView."Account Filter",Amount);

      LibraryDimension.FindDimensionValue(DimensionValue,AnalysisView."Dimension 1 Code");
      GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostCashFlowJnlLine@53(AnalysisVIew@1000 : Record 363;Amount@1005 : Decimal);
    VAR
      CashFlowForecast@1002 : Record 840;
      CFWorksheetLine@1001 : Record 846;
      DimensionValue@1004 : Record 349;
    BEGIN
      LibraryCashFlow.ClearJournal;

      LibraryCashFlow.CreateCashFlowCard(CashFlowForecast);
      LibraryCashFlow.CreateJournalLine(CFWorksheetLine,CashFlowForecast."No.",AnalysisVIew."Account Filter");
      LibraryDimension.FindDimensionValue(DimensionValue,AnalysisVIew."Dimension 1 Code");
      CFWorksheetLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      CFWorksheetLine.VALIDATE("Amount (LCY)",Amount);
      CFWorksheetLine.MODIFY(TRUE);

      LibraryCashFlow.PostJournal;
    END;

    LOCAL PROCEDURE CreateColumnLayout@35() : Code[20];
    VAR
      ColumnLayoutName@1001 : Record 333;
      ColumnLayout@1000 : Record 334;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      ColumnLayout.VALIDATE("Column No.",FORMAT(LibraryUtility.GenerateGUID));
      ColumnLayout.VALIDATE("Column Type",ColumnLayout."Column Type"::"Net Change");
      ColumnLayout.MODIFY(TRUE);
      EXIT(ColumnLayout."Column Layout Name")
    END;

    LOCAL PROCEDURE CreateDefaultDimensionCodes@37(CustomerNo@1000 : Code[20];DimCode@1002 : Code[20];DimValCode@1004 : Code[20];ValuePosting@1001 : Option);
    VAR
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Clear existing dimension setup to make room for our new setup
      ClearDefaultDimensionCodes(DATABASE::Customer,CustomerNo);

      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo,DimCode,DimValCode);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimensionVendor@9(VAR DefaultDimension@1000 : Record 352;VendorNo@1001 : Code[20];DimCode@1002 : Code[20];DimValue@1003 : Code[20];ValuePosting@1004 : Option);
    BEGIN
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,VendorNo,DimCode,DimValue);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearDefaultDimensionCodes@42(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE ClearDimensionCombinations@40();
    VAR
      DimensionCombination@1000 : Record 350;
    BEGIN
      DimensionCombination.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionValues@3(VAR DimensionValue@1001 : Record 349) DimensionValueCode : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimensionValueCode := DimensionValue.Code;
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE GetDimensionValueCode@52(DimensionCode@1000 : Code[20]) : Code[20];
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
      DimensionValue.FINDSET;
      DimensionValue.NEXT(LibraryRandom.RandInt(DimensionValue.COUNT));
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE RunCheckValuePosting@7(DimensionCode@1001 : Code[20]);
    BEGIN
      COMMIT;
      LibraryVariableStorage.Enqueue(DimensionCode);
      REPORT.RUN(REPORT::"Check Value Posting");
    END;

    LOCAL PROCEDURE FindItemJournalBatch@85(VAR ItemJournalBatch@1000 : Record 233;TemplateType@1001 : Option;Clear@1002 : Boolean);
    BEGIN
      ItemJournalBatch.RESET;
      ItemJournalBatch.SETRANGE("Template Type",TemplateType);
      ItemJournalBatch.NEXT(RANDOM(ItemJournalBatch.COUNT));
      IF Clear THEN
        ClearItemJournal(ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateDimSetID@93(Dimension@1000 : Record 348) : Integer;
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      EXIT(LibraryDimension.CreateDimSet(0,DimensionValue."Dimension Code",DimensionValue.Code));
    END;

    LOCAL PROCEDURE CreateItemJnlLineWithDim@98(ItemJournalBatch@1000 : Record 233;VAR ItemJnlLine@1008 : Record 83;PostingDate@1002 : Date;DimSetID@1003 : Integer;EntryType@1004 : Option;ItemNo@1005 : Code[20]);
    VAR
      LibraryInventory@1007 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItemJournalLine(ItemJnlLine,ItemJournalBatch."Journal Template Name",
        ItemJournalBatch.Name,EntryType,ItemNo,RANDOM(10));
      ItemJnlLine."Posting Date" := PostingDate;
      ItemJnlLine."Dimension Set ID" := DimSetID;
      ItemJnlLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateTwoJrnlLinesItemsWithDefaultDimension@91(VAR ItemJournalLine@1008 : Record 83;VAR DefaultDimension@1000 : ARRAY [2] OF Record 352;VAR ItemNo@1001 : ARRAY [2] OF Code[20]);
    VAR
      ItemJournalBatch@1010 : Record 233;
      DimensionValue@1003 : Record 349;
      Item@1002 : ARRAY [2] OF Record 27;
      LibraryInventory@1004 : Codeunit 132201;
      Counter@1005 : Integer;
    BEGIN
      FindItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,TRUE);
      WITH DimensionValue DO BEGIN
        SETRANGE("Global Dimension No.",1);
        FINDSET;
        REPEAT
          Counter += 1;
          LibraryInventory.CreateItem(Item[Counter]);
          ItemNo[Counter] := Item[Counter]."No.";
          LibraryDimension.CreateDefaultDimensionItem(DefaultDimension[Counter],ItemNo[Counter],"Dimension Code",Code);
          LibraryInventory.CreateItemJournalLine(
            ItemJournalLine,ItemJournalBatch."Journal Template Name",
            ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo[Counter],LibraryRandom.RandInt(9) + 1);
        UNTIL (NEXT = 0) OR (Counter = 2)
      END;
    END;

    LOCAL PROCEDURE ClearItemJournal@107(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE SelectDimension@116(ObjectType@1002 : Integer;ObjectID@1003 : Integer;DimensionCode@1001 : Code[20]);
    VAR
      SelectedDimension@1000 : Record 369;
    BEGIN
      // Fill Selected Dimension Table
      CleanSelectedDimension(SelectedDimension,USERID,ObjectType,ObjectID);
      SelectedDimension.INIT;
      SelectedDimension."User ID" := USERID;
      SelectedDimension."Object Type" := ObjectType;
      SelectedDimension."Object ID" := ObjectID;
      SelectedDimension."Dimension Code" := DimensionCode;
      SelectedDimension.INSERT;
    END;

    LOCAL PROCEDURE CalculateInventory@122(VAR ItemJournalLine@1006 : Record 83;ItemFilter@1001 : Text;PostingDate@1004 : Date;ItemsNotOnInvt@1005 : Boolean);
    VAR
      ItemJournalBatch@1000 : Record 233;
      Item@1002 : Record 27;
      CalculateInventory@1007 : Report 790;
    BEGIN
      // Preparations
      FindItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::"Phys. Inventory",TRUE);

      ItemJournalLine.RESET;
      ItemJournalLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
      ItemJournalLine."Journal Batch Name" := ItemJournalBatch.Name;

      Item.RESET;
      Item.SETFILTER("No.",ItemFilter);

      // Run report Calculate Inventory
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      CalculateInventory.InitializeRequest(PostingDate,LibraryUtility.GenerateGUID,ItemsNotOnInvt);
      CalculateInventory.SetHideValidationDialog(TRUE);
      CalculateInventory.USEREQUESTPAGE(FALSE);
      CalculateInventory.SETTABLEVIEW(Item);
      CalculateInventory.RUNMODAL;
      CLEAR(CalculateInventory);

      // Restore ItemJournalLine Ranges
      ItemJournalLine.RESET;
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.SETFILTER("Item No.",ItemFilter);
      ItemJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE CleanSelectedDimension@4(VAR SelectedDimension@1000 : Record 369;UserID@1001 : Code[50];ObjectType@1002 : Integer;ObjectID@1003 : Integer);
    BEGIN
      SelectedDimension.SETRANGE("User ID",UserID);
      SelectedDimension.SETRANGE("Object Type",ObjectType);
      SelectedDimension.SETRANGE("Object ID",ObjectID);
      SelectedDimension.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE SelectAndClearGenJnlBatch@36(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE SetDimensionDetailParameters@30(AnalysisViewCode@1000 : Code[20];DateFilter@1001 : Text);
    BEGIN
      LibraryVariableStorage.Enqueue(AnalysisViewCode);
      LibraryVariableStorage.Enqueue(DateFilter);
      LibraryVariableStorage.Enqueue(FALSE);
    END;

    LOCAL PROCEDURE SetDimensionTotalParameters@31(AnalysisViewCode@1002 : Code[20];ColumnLayoutName@1003 : Code[20];DateFilter@1001 : Text);
    BEGIN
      LibraryVariableStorage.Enqueue(AnalysisViewCode);
      LibraryVariableStorage.Enqueue(ColumnLayoutName);
      LibraryVariableStorage.Enqueue(DateFilter);
      LibraryVariableStorage.Enqueue(FALSE);
    END;

    LOCAL PROCEDURE UpdateAnalysisView@27(AnalysisViewCode@1000 : Code[20]);
    VAR
      AnalysisView@1001 : Record 363;
    BEGIN
      AnalysisView.GET(AnalysisViewCode);
      LibraryERM.UpdateAnalysisView(AnalysisView);
    END;

    LOCAL PROCEDURE VerifyDimensionDetailReport@32(AnalysisViewCode@1000 : Code[20];ExpectedAmount@1001 : Decimal);
    VAR
      AnalysisView@1002 : Record 363;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      AnalysisView.GET(AnalysisViewCode);

      LibraryReportDataset.AssertElementWithValueExists('DimValCode_1_',AnalysisView."Account Filter");
      LibraryReportDataset.AssertElementWithValueExists('DimCode_1_',FORMAT(AnalysisView."Account Source"));
      LibraryReportDataset.AssertElementWithValueExists('DebitTotal_1_',ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyDimensionTotalReport@44(AnalysisViewCode@1000 : Code[20];ExpectedAmount@1001 : Decimal);
    VAR
      AnalysisView@1002 : Record 363;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      AnalysisView.GET(AnalysisViewCode);

      LibraryReportDataset.AssertElementWithValueExists('DimValCode_1_',AnalysisView."Account Filter");
      LibraryReportDataset.AssertElementWithValueExists('DimCode_1_',FORMAT(AnalysisView."Account Source"));
      LibraryReportDataset.AssertElementWithValueExists('ColumnValuesAsText_1_1_',FORMAT(ExpectedAmount));
    END;

    LOCAL PROCEDURE VerifyDimValForItemJournalLine@54(VAR ItemJournalLine@1000 : Record 83;DefaultDimension@1001 : ARRAY [2] OF Record 352);
    BEGIN
      ItemJournalLine.FINDSET;
      Assert.AreEqual(DefaultDimension[1]."Dimension Value Code",ItemJournalLine."Shortcut Dimension 1 Code",FailureDimValCodeMsg);
      ItemJournalLine.NEXT;
      Assert.AreEqual(DefaultDimension[2]."Dimension Value Code",ItemJournalLine."Shortcut Dimension 1 Code",FailureDimValCodeMsg);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@25(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCheckValuePosting@5(VAR CheckValuePosting@1000 : TestRequestPage 30);
    VAR
      DimensionCode@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DimensionCode);
      CheckValuePosting.DefaultDim1.SETFILTER("Dimension Code",DimensionCode);
      CheckValuePosting.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCheckValuePosting2@12(VAR CheckValuePosting@1000 : TestRequestPage 30);
    VAR
      TableID@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TableID);
      CheckValuePosting.DefaultDim1.SETFILTER("Table ID",FORMAT(TableID));
      CheckValuePosting.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDimensionDetail@19(VAR DimensionDetail@1000 : TestRequestPage 28);
    VAR
      AnalysisViewCode@1001 : Variant;
      DateFilter@1002 : Variant;
      ShowInAddCurrency@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AnalysisViewCode);
      LibraryVariableStorage.Dequeue(DateFilter);
      LibraryVariableStorage.Dequeue(ShowInAddCurrency);

      DimensionDetail.AnalysisViewCode.SETVALUE(AnalysisViewCode);
      DimensionDetail.DtFilter.SETVALUE(DateFilter);
      DimensionDetail.ShowAmountsInAddRepCurrency.SETVALUE(ShowInAddCurrency);

      LibraryVariableStorage.Enqueue(AnalysisViewCode);
      DimensionDetail.IncludeDimensions.ASSISTEDIT;

      DimensionDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDimensionTotal@39(VAR DimensionTotal@1000 : TestRequestPage 27);
    VAR
      AnalysisViewCode@1001 : Variant;
      ColumnLayoutName@1004 : Variant;
      DateFilter@1002 : Variant;
      ShowInAddCurrency@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AnalysisViewCode);
      LibraryVariableStorage.Dequeue(ColumnLayoutName);
      LibraryVariableStorage.Dequeue(DateFilter);
      LibraryVariableStorage.Dequeue(ShowInAddCurrency);

      DimensionTotal.AnalysisViewCode.SETVALUE(AnalysisViewCode);
      DimensionTotal.ColumnLayoutName.SETVALUE(ColumnLayoutName);
      DimensionTotal.DtFilter.SETVALUE(DateFilter);
      DimensionTotal.ShowAmountsInAddRepCurrency.SETVALUE(ShowInAddCurrency);

      LibraryVariableStorage.Enqueue(AnalysisViewCode);
      DimensionTotal.IncludeDimensions.ASSISTEDIT;

      DimensionTotal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GeneralJournalTestHandler@58(VAR GeneralJournalTest@1000 : TestRequestPage 2);
    BEGIN
      GeneralJournalTest.ShowDim.SETVALUE(TRUE);
      GeneralJournalTest."Gen. Journal Line".SETFILTER("Journal Template Name",GenJnlTemplate.Name);
      GeneralJournalTest."Gen. Journal Line".SETFILTER("Journal Batch Name",GenJnlBatch.Name);

      GeneralJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE PHandlerDimensionSelectionLevel@22(VAR DimensionSelectionLevel@1000 : TestPage 564);
    VAR
      DimensionSelectionBuffer@1001 : Record 368;
      AnalysisView@1002 : Record 363;
      AnalysisViewCode@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AnalysisViewCode);
      IF AnalysisView.GET(AnalysisViewCode) THEN BEGIN
        DimensionSelectionLevel.Level.SETVALUE(DimensionSelectionBuffer.Level::"Level 1");
        DimensionSelectionLevel.OK.INVOKE;
      END
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Value Posting]
       1. Test Check Value Posting report functionality.

       TFS_TS_ID = 264333
       Covers Test cases:
       ----------------------------------------------------------------
       Test Function Name                                       TFS ID
       ----------------------------------------------------------------
       DimensionCheckValuePostingReport                         202417
    }
    END.
  }
}

