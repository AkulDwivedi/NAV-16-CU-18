OBJECT Codeunit 136902 Resource Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryResource@1000 : Codeunit 130511;
      LibraryReportDataset@1007 : Codeunit 131007;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryService@1008 : Codeunit 131902;
      Assert@1004 : Codeunit 130000;
      isInitialized@1001 : Boolean;
      TextErr@1013 : TextConst 'ENU=Recurring Method must be specified.';
      ValidationErr@1006 : TextConst 'ENU=%1 must be %2 .';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ResourceRegisterReportHandler)]
    PROCEDURE ResourceRegisterReport@10();
    VAR
      ResJournalBatch@1005 : Record 236;
      ResJournalLine@1004 : Record 207;
      Resource@1003 : Record 156;
      Resource2@1002 : Record 156;
      ResourceRegister@1000 : Record 240;
      ResourceRegisterReport@1001 : Report 1103;
    BEGIN
      // Test and verify Resource Register Report.

      // 1. Setup: Create two Resource, Resource Journal Batch,
      // Create and Post two Resource Journal Lines with different Resource No.
      Initialize;
      CreateResource(Resource);
      CreateResource(Resource2);

      CreateResourceJournalBatch(ResJournalBatch,FALSE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Usage);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource2."No.",'',ResJournalLine."Entry Type"::Usage);

      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 2. Exercise: Run the Resource Register Report.
      CLEAR(ResourceRegisterReport);
      ResourceRegister.SETRANGE("Journal Batch Name",ResJournalBatch.Name);
      ResourceRegisterReport.SETTABLEVIEW(ResourceRegister);
      ResourceRegisterReport.RUN;

      // 3. Verify: Verify values on Resource Register Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyResourceRegister(Resource."No.");
      VerifyResourceRegister(Resource2."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ResourceCostBreakdownReportHandler)]
    PROCEDURE ResourceCostBreakdown@41();
    VAR
      ResJournalLine@1004 : Record 207;
      ResJournalBatch@1002 : Record 236;
      Resource@1000 : Record 156;
      WorkType@1005 : Record 200;
      WorkType2@1003 : Record 200;
      ResourceCostBreakdown@1001 : Report 1107;
    BEGIN
      // Test and verify Resource - Cost Breakdown Report.

      // 1. Setup: Create Resource, two Work Type, Resource Journal Batch,
      // Create and Post two Resource Journal Lines with same Resource No. and different Work Type Code.
      Initialize;
      CreateResource(Resource);
      LibraryResource.CreateWorkType(WorkType);
      LibraryResource.CreateWorkType(WorkType2);

      ModifyUnitOfMeasureOnWorkType(WorkType,Resource."Base Unit of Measure");
      ModifyUnitOfMeasureOnWorkType(WorkType2,Resource."Base Unit of Measure");

      CreateResourceJournalBatch(ResJournalBatch,FALSE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",WorkType.Code,ResJournalLine."Entry Type"::Usage);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",WorkType2.Code,ResJournalLine."Entry Type"::Usage);
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 2. Exercise: Run the Resource - Cost Breakdown Report.
      CLEAR(ResourceCostBreakdown);
      Resource.SETRANGE("No.",Resource."No.");
      ResourceCostBreakdown.SETTABLEVIEW(Resource);
      ResourceCostBreakdown.RUN;

      // 3. Verify: Verify values on Resource - Cost Breakdown Report.
      VerifyResourceCostBreakDown(Resource."No.",WorkType.Code,WorkType2.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ResourceUsageReportHandler)]
    PROCEDURE ResourceUsage@7();
    VAR
      ResJournalBatch@1002 : Record 236;
      ResJournalLine@1004 : Record 207;
      Resource@1000 : Record 156;
      ResourceUsage@1001 : Report 1106;
    BEGIN
      // Test and verify Resource Usage Report.

      // 1. Setup: Create Resource, Resource Journal Batch and Create and Post Resource Journal Line with Resource.
      Initialize;
      CreateResource(Resource);

      CreateResourceJournalBatch(ResJournalBatch,FALSE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Usage);
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 2. Exercise: Run the Resource Usage Report.
      CLEAR(ResourceUsage);
      Resource.SETRANGE("No.",Resource."No.");
      ResourceUsage.SETTABLEVIEW(Resource);
      ResourceUsage.RUN;

      // 3. Verify: Verify values on Resource Usage Report.
      VerifyResourceUsage(Resource);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ResourceStatisticsReportHandler)]
    PROCEDURE ResourceStatistics@29();
    VAR
      ResJournalBatch@1002 : Record 236;
      ResJournalLine@1004 : Record 207;
      Resource@1000 : Record 156;
      Resource2@1003 : Record 156;
      ResourceStatistics@1001 : Report 1105;
    BEGIN
      // Test and verify Resource Statistics Report.

      // 1. Setup: Create two Resource, Resource Journal Batch,
      // Create and Post Resource Journal Lines with different Resource No. and Entry Type.
      Initialize;
      CreateResource(Resource);
      CreateResource(Resource2);

      CreateResourceJournalBatch(ResJournalBatch,FALSE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Usage);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Sale);

      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource2."No.",'',ResJournalLine."Entry Type"::Usage);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource2."No.",'',ResJournalLine."Entry Type"::Sale);
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 2. Exercise: Run the Resource Statistics Report.
      CLEAR(ResourceStatistics);
      Resource.SETFILTER("No.",'%1|%2',Resource."No.",Resource2."No.");
      ResourceStatistics.SETTABLEVIEW(Resource);
      ResourceStatistics.RUN;

      // 3. Verify: Verify values on Resource Statistics Report.
      VerifyResourceStatistics(Resource,Resource2);
    END;

    [Test]
    [HandlerFunctions(ResourceJournalTestReportHandler)]
    PROCEDURE ResourceJournalTest@2();
    VAR
      ResJournalBatch@1002 : Record 236;
      ResJournalLine@1004 : Record 207;
      Resource@1000 : Record 156;
      Resource2@1003 : Record 156;
    BEGIN
      // Test and verify Resource Journal - Test Report.

      // 1. Setup: Create two Resource, Resource Journal Batch and Resource Journal Lines with different Resource No.
      Initialize;
      CreateResource(Resource);
      CreateResource(Resource2);

      CreateResourceJournalBatch(ResJournalBatch,FALSE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Usage);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource2."No.",'',ResJournalLine."Entry Type"::Usage);

      // 2. Exercise: Run the Resource Journal - Test Report.
      RunResourceJournalTestReport(ResJournalBatch."Journal Template Name",ResJournalBatch.Name,FALSE);

      // 3. Verify: Verify values on Resource Journal - Test Report.
      VerifyResourceJournalTest(Resource."No.",Resource2."No.");
    END;

    [Test]
    [HandlerFunctions(ResourceJournalTestReportHandler)]
    PROCEDURE ResourceJournalTestDimension@30();
    VAR
      DefaultDimension@1007 : Record 352;
      Dimension@1005 : Record 348;
      DimensionValue@1006 : Record 349;
      ResJournalBatch@1002 : Record 236;
      ResJournalLine@1004 : Record 207;
      Resource@1000 : Record 156;
      ResourceJournalTest@1001 : Report 1102;
      LibraryDimension@1003 : Codeunit 131001;
    BEGIN
      // Test and verify Resource Journal - Test Report with Show Dimension as True.

      // 1. Setup: Create Resource, Default Dimension for Resource, Resource Journal Batch and Resource Journal Line.
      Initialize;
      CreateResource(Resource);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Resource,Resource."No.",Dimension.Code,DimensionValue.Code);

      CreateResourceJournalBatch(ResJournalBatch,FALSE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Usage);

      // 2. Exercise: Run the Resource Journal - Test Report.
      COMMIT;
      ResourceJournalTest.SETTABLEVIEW(ResJournalBatch);
      ResourceJournalTest.InitializeRequest(TRUE);
      ResourceJournalTest.RUN;

      // 3. Verify: Verify values on Resource Journal - Test Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Name_ResJnlBatch',ResJournalBatch.Name);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the journal batch name');
      LibraryReportDataset.AssertCurrentRowValue('DimText',STRSUBSTNO('%1 - %2',DimensionValue."Dimension Code",DimensionValue.Code));
    END;

    [Test]
    [HandlerFunctions(ResourceJournalTestReportHandler)]
    PROCEDURE ResourceJournalTestWarning@49();
    VAR
      ResJournalBatch@1002 : Record 236;
      ResJournalLine@1004 : Record 207;
      Resource@1000 : Record 156;
    BEGIN
      // Test and verify Warnings on Resource Journal - Test Report.

      // 1. Setup: Create Resource, Resource Journal Batch with Recurring Resource Journal Template
      // Create Resource Journal Line.
      Initialize;
      CreateResource(Resource);
      CreateResourceJournalBatch(ResJournalBatch,TRUE);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch,Resource."No.",'',ResJournalLine."Entry Type"::Usage);

      // 2. Exercise: Run the Resource Journal - Test Report.
      RunResourceJournalTestReport(ResJournalBatch."Journal Template Name",ResJournalBatch.Name,FALSE);

      // 3. Verify: Verify values on Resource Journal - Test Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ResNo_ResJnlLine',Resource."No.");
      LibraryReportDataset.SetRange('ErrorTextNumber',TextErr);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no and error text');
    END;

    [Test]
    [HandlerFunctions(ResourceListReportHandler)]
    PROCEDURE ResourceListReport@1();
    VAR
      Resource@1000 : Record 156;
      ResourceList@1001 : Report 1101;
    BEGIN
      // Test and verify Resource List Report.

      // 1. Setup: Create Resource, Attach Resource Group and Global Dimensions.
      Initialize;
      CreateResource(Resource);
      InputResourceGroupOnResource(Resource);
      AttachResourceGlobalDimensions(Resource);

      // 2. Exercise: Run the Resource List Report.
      COMMIT;
      CLEAR(ResourceList);
      Resource.SETRANGE("No.",Resource."No.");
      ResourceList.SETTABLEVIEW(Resource);
      ResourceList.RUN;

      // 3. Verify: Verify values on Resource List Report.
      VerifyResource(Resource);
    END;

    [Test]
    [HandlerFunctions(ResourcePriceListReportHandler)]
    PROCEDURE ResourcePriceListReport@12();
    VAR
      Resource@1000 : Record 156;
      ResourcePrice@1002 : Record 201;
      WorkType@1003 : Record 200;
      ResourcePriceList@1001 : Report 1115;
    BEGIN
      // Test and verify Resource - Price List Report.

      // 1. Setup: Create Resource, Work Type and Resource Price.
      Initialize;
      CreateResource(Resource);
      LibraryResource.CreateWorkType(WorkType);
      CreateResourcePrice(ResourcePrice,Resource."No.",WorkType.Code);

      // 2. Exercise: Run the Resource - Price List Report.
      COMMIT;
      CLEAR(ResourcePriceList);
      Resource.SETRANGE("No.",Resource."No.");
      ResourcePriceList.SETTABLEVIEW(Resource);
      ResourcePriceList.RUN;

      // 3. Verify: Verify values on Resource - Price List Report.
      VerifyResourcePriceList(ResourcePrice,Resource."Unit Price");
    END;

    [Test]
    [HandlerFunctions(ResourcePriceListReportHandler)]
    PROCEDURE ResourcePriceListWithCurrency@9();
    VAR
      Resource@1000 : Record 156;
      Currency@1002 : Record 4;
      CurrencyExchangeRate@1005 : Record 330;
      Value@1001 : Variant;
      ActualUnitPrice@1003 : Decimal;
    BEGIN
      // Test and verify Resource - Price List Report with Currency.

      // 1. Setup: Create Resource, Currency and Currency Exchange Rate.
      Initialize;
      CreateResource(Resource);
      LibraryERM.CreateCurrency(Currency);
      CreateCurrencyExchangeRate(CurrencyExchangeRate,Currency.Code);

      // Calculation for Actual Unit Price is taken from Report.
      ActualUnitPrice :=
        ROUND(
          CurrencyExchangeRate.ExchangeAmtLCYToFCY(
            WORKDATE,Currency.Code,Resource."Unit Price",
            CurrencyExchangeRate.ExchangeRate(WORKDATE,Currency.Code)),
          Currency."Unit-Amount Rounding Precision");

      // 2. Exercise: Run the Resource - Price List Report with Currency.
      RunResourcePriceListReport(Resource."No.",Currency.Code);

      // 3. Verify: Verify values on Resource - Price List Report with Currency.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Resource',Resource."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no');

      LibraryReportDataset.FindCurrentRowValue('UnitPrice_Resource',Value);
      Assert.AreNearlyEqual(
        ActualUnitPrice,
        Value,
        Currency."Unit-Amount Rounding Precision",
        STRSUBSTNO(ValidationErr,Resource.FIELDCAPTION("Unit Price"),ActualUnitPrice));
    END;

    LOCAL PROCEDURE AttachResourceGlobalDimensions@52(VAR Resource@1000 : Record 156);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
      DimensionValue@1002 : Record 349;
      LibraryDimension@1003 : Codeunit 131001;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      Resource.VALIDATE("Global Dimension 1 Code",DimensionValue.Code);

      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 2 Code");
      Resource.VALIDATE("Global Dimension 2 Code",DimensionValue.Code);
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyExchangeRate@86(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10]);
    BEGIN
      // Create Currency Exchange Rate with Exchange Rate Amount, Relational Exch. Rate Amount as Random values.
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,WORKDATE);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount is always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",
        RANDOM(10) + LibraryUtility.GenerateRandomFraction + CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResource@21(VAR Resource@1002 : Record 156);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryResource.CreateResource(Resource,VATPostingSetup."VAT Bus. Posting Group");

      // Use Random because value is not important.
      Resource.VALIDATE(Capacity,RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourceJournalBatch@3(VAR ResJournalBatch@1001 : Record 236;Recurring@1002 : Boolean);
    VAR
      ResJournalTemplate@1000 : Record 206;
    BEGIN
      ResJournalTemplate.SETRANGE(Recurring,Recurring);
      LibraryResource.FindResJournalTemplate(ResJournalTemplate);
      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateResourceJournalLine@6(VAR ResJournalLine@1004 : Record 207;ResJournalBatch@1000 : Record 236;ResourceNo@1007 : Code[20];WorkTypeCode@1001 : Code[10];EntryType@1002 : Option);
    BEGIN
      LibraryResource.CreateResJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name);
      ResJournalLine.VALIDATE("Posting Date",WORKDATE);
      ResJournalLine.VALIDATE("Entry Type",EntryType);
      ResJournalLine.VALIDATE("Resource No.",ResourceNo);
      ResJournalLine.VALIDATE("Work Type Code",WorkTypeCode);

      // Use Document No. as Resource No. value is not important.
      ResJournalLine.VALIDATE("Document No.",ResourceNo);

      // Use Random because value is not important.
      ResJournalLine.VALIDATE(Quantity,RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      ResJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourcePrice@80(VAR ResourcePrice@1000 : Record 201;ResourceNo@1002 : Code[20];WorkTypeCode@1003 : Code[10]);
    BEGIN
      LibraryResource.CreateResourcePrice(ResourcePrice,ResourcePrice.Type,ResourceNo,WorkTypeCode,'');

      // Use Random because value is not important.
      ResourcePrice.VALIDATE("Unit Price",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      ResourcePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InputResourceGroupOnResource@191(VAR Resource@1000 : Record 156);
    VAR
      ResourceGroup@1001 : Record 152;
    BEGIN
      LibraryResource.CreateResourceGroup(ResourceGroup);
      Resource.VALIDATE("Resource Group No.",ResourceGroup."No.");
      Resource.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunResourceJournalTestReport@111(JournalTemplateName@1004 : Code[10];Name@1000 : Code[10];ShowDimensions@1001 : Boolean);
    VAR
      ResJournalBatch@1003 : Record 236;
      ResourceJournalTest@1002 : Report 1102;
    BEGIN
      CLEAR(ResourceJournalTest);
      COMMIT;
      ResJournalBatch.SETRANGE("Journal Template Name",JournalTemplateName);
      ResJournalBatch.SETRANGE(Name,Name);
      ResourceJournalTest.SETTABLEVIEW(ResJournalBatch);
      ResourceJournalTest.InitializeRequest(ShowDimensions);
      ResourceJournalTest.RUN;
    END;

    LOCAL PROCEDURE RunResourcePriceListReport@8(No@1000 : Code[20];CurrencyCode@1002 : Code[10]);
    VAR
      Resource@1004 : Record 156;
      ResourcePriceList@1003 : Report 1115;
    BEGIN
      COMMIT;
      CLEAR(ResourcePriceList);
      Resource.SETRANGE("No.",No);
      ResourcePriceList.SETTABLEVIEW(Resource);
      ResourcePriceList.InitializeRequest(CurrencyCode);
      ResourcePriceList.RUN;
    END;

    LOCAL PROCEDURE ModifyUnitOfMeasureOnWorkType@19(WorkType@1000 : Record 200;UnitOfMeasureCode@1001 : Code[10]);
    BEGIN
      WorkType.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WorkType.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyResource@28(Resource@1000 : Record 156);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Resource__No__',Resource."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no');

      LibraryReportDataset.AssertCurrentRowValue('Resource__Resource_Group_No__',Resource."Resource Group No.");
      LibraryReportDataset.AssertCurrentRowValue('Resource__Gen__Prod__Posting_Group_',Resource."Gen. Prod. Posting Group");
      LibraryReportDataset.AssertCurrentRowValue('Resource__Global_Dimension_1_Code_',Resource."Global Dimension 1 Code");
      LibraryReportDataset.AssertCurrentRowValue('Resource__Global_Dimension_2_Code_',Resource."Global Dimension 2 Code");
    END;

    LOCAL PROCEDURE VerifyResourceCostBreakDown@20(ResourceNo@1000 : Code[20];WorkTypeCode@1001 : Code[10];WorkTypeCode2@1002 : Code[10]);
    VAR
      ResLedgerEntry@1005 : Record 203;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No1_Resource',ResourceNo);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no');

      // Verify First Row Values on Resource - Cost Breakdown Report.
      ResLedgerEntry.SETRANGE("Work Type Code",WorkTypeCode);
      ResLedgerEntry.FINDFIRST;
      VerifyResourceCostBreakDownRow(ResLedgerEntry);

      // Verify Second Row Values on Resource - Cost Breakdown Report.
      ResLedgerEntry.SETRANGE("Work Type Code",WorkTypeCode2);
      ResLedgerEntry.FINDFIRST;
      VerifyResourceCostBreakDownRow(ResLedgerEntry);
    END;

    LOCAL PROCEDURE VerifyResourceCostBreakDownRow@78(ResLedgerEntry@1000 : Record 203);
    BEGIN
      LibraryReportDataset.SetRange('WorkTypeCode_ResLedgEntry',ResLedgerEntry."Work Type Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the work type code');

      LibraryReportDataset.AssertCurrentRowValue('Qty_ResLedgEntry',ResLedgerEntry.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('TotalCost_ResLedgEntry',ResLedgerEntry."Total Cost");
      LibraryReportDataset.AssertCurrentRowValue('TotalDirectCost',ResLedgerEntry.Quantity * ResLedgerEntry."Direct Unit Cost");
    END;

    LOCAL PROCEDURE VerifyResourceJournalTest@35(ResourceNo@1000 : Code[20];ResourceNo2@1001 : Code[20]);
    VAR
      ResJournalLine@1002 : Record 207;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      // Verify First Row Values on Resource Journal - Test Report.
      ResJournalLine.SETRANGE("Resource No.",ResourceNo);
      ResJournalLine.FINDFIRST;
      VerifyResourceJournalTestRow(ResJournalLine);

      // Verify Second Row Values on Resource Journal - Test Report.
      ResJournalLine.SETRANGE("Resource No.",ResourceNo2);
      ResJournalLine.FINDFIRST;
      VerifyResourceJournalTestRow(ResJournalLine);
    END;

    LOCAL PROCEDURE VerifyResourceJournalTestRow@44(ResJournalLine@1000 : Record 207);
    BEGIN
      LibraryReportDataset.SetRange('ResNo_ResJnlLine',ResJournalLine."Resource No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the work type code');

      LibraryReportDataset.AssertCurrentRowValue('Qty_ResJnlLine',ResJournalLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('TotalCost_ResJnlLine',ResJournalLine."Total Cost");
      LibraryReportDataset.AssertCurrentRowValue('TotalPrice_ResJnlLine',ResJournalLine."Total Price");
    END;

    LOCAL PROCEDURE VerifyResourcePriceList@53(ResourcePrice@1000 : Record 201;ResourceUnitPrice@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Resource',ResourcePrice.Code);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the work type code');
      LibraryReportDataset.AssertCurrentRowValue('UnitPrice_Resource',ResourceUnitPrice);

      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('No_Resource',ResourcePrice.Code);
      LibraryReportDataset.SetRange('WorkTypeCode_ResPrice',ResourcePrice."Work Type Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the work type code');
      LibraryReportDataset.AssertCurrentRowValue('UnitPrice_ResPrice',ResourcePrice."Unit Price");
    END;

    LOCAL PROCEDURE VerifyResourceRegister@13(ResourceNo@1002 : Code[20]);
    VAR
      ResLedgerEntry@1000 : Record 203;
    BEGIN
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      ResLedgerEntry.FINDFIRST;

      LibraryReportDataset.SetRange('Res__Ledger_Entry__Resource_No__',ResourceNo);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no');

      LibraryReportDataset.AssertCurrentRowValue('Res__Ledger_Entry_Quantity',ResLedgerEntry.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('Res__Ledger_Entry__Total_Cost_',ResLedgerEntry."Total Cost");
      LibraryReportDataset.AssertCurrentRowValue('Res__Ledger_Entry__Total_Price_',ResLedgerEntry."Total Price");
      LibraryReportDataset.AssertCurrentRowValue('Res__Ledger_Entry__Entry_No__',ResLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE VerifyResourceStatistics@71(Resource@1000 : Record 156;Resource2@1001 : Record 156);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Resource.CALCFIELDS("Sales (Price)","Usage (Price)");
      Resource2.CALCFIELDS("Sales (Price)","Usage (Price)");

      // Verify First Row Values on Resource Statistics Report.
      VerifyResourceStatisticsRow(Resource);

      // Verify First Row Values on Resource Statistics Report.
      VerifyResourceStatisticsRow(Resource2);
    END;

    LOCAL PROCEDURE VerifyResourceStatisticsRow@25(Resource@1000 : Record 156);
    BEGIN
      LibraryReportDataset.SetRange('No_Resource',Resource."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no');

      LibraryReportDataset.AssertCurrentRowValue('UsagePrice_Resource',Resource."Usage (Price)");
      LibraryReportDataset.AssertCurrentRowValue('SalesPrice_Resource',Resource."Sales (Price)");
    END;

    LOCAL PROCEDURE VerifyResourceUsage@22(Resource@1000 : Record 156);
    BEGIN
      Resource.CALCFIELDS(Capacity,"Usage (Qty.)");

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Resource',Resource."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the resource no');

      LibraryReportDataset.AssertCurrentRowValue('capacity_Resource',Resource.Capacity);
      LibraryReportDataset.AssertCurrentRowValue('UsageQty_Resource',Resource."Usage (Qty.)");
      LibraryReportDataset.AssertCurrentRowValue('CapacityUsageQty',Resource.Capacity - Resource."Usage (Qty.)");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@23(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ResourceJournalTestReportHandler@14(VAR ResourceJournalTestRequest@1000 : TestRequestPage 1102);
    BEGIN
      ResourceJournalTestRequest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ResourceRegisterReportHandler@11(VAR ResourceRegister@1000 : TestRequestPage 1103);
    BEGIN
      ResourceRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ResourceCostBreakdownReportHandler@15(VAR ResourceCostBreakdown@1000 : TestRequestPage 1107);
    BEGIN
      ResourceCostBreakdown.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ResourceUsageReportHandler@17(VAR ResourceUsage@1000 : TestRequestPage 1106);
    BEGIN
      ResourceUsage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ResourceListReportHandler@16(VAR ResourceList@1000 : TestRequestPage 1101);
    BEGIN
      ResourceList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ResourcePriceListReportHandler@31(VAR ResourcePriceList@1000 : TestRequestPage 1115);
    BEGIN
      ResourcePriceList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ResourceStatisticsReportHandler@27(VAR ResourceStatistics@1000 : TestRequestPage 1105);
    BEGIN
      ResourceStatistics.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Resource]
      Test and Verify Resource Reports
       1. Test and verify Resource Register Report.
       2. Test and verify Resource - Cost Breakdown Report.
       3. Test and verify Resource Usage Report.
       4. Test and verify Resource Statistics Report.
       5. Test and verify Resource Journal - Test Report.
       6. Test and verify Resource Journal - Test Report with Show Dimension as True.
       7. Test and verify Warnings on Resource Journal - Test Report.
       8. Test and verify Resource List Report.
       9. Test and verify Resource - Price List Report.
      10. Test and verify Resource - Price List Report with Currency.

      TFS_TS_ID = 234249
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ----------------------------------------------------------------------------------------------
      ResourceRegisterReport                                                                  139581
      ResourceCostBreakdown                                                                   139441
      ResourceUsage                                                                           139440
      ResourceStatistics                                                                      139439
      ResourceJournalTest,ResourceJournalTestDimension,ResourceJournalTestWarning             139427
      ResourceListReport                                                                      139426

      TFS_TS_ID = 236745
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ----------------------------------------------------------------------------------------------
      ResourcePriceListReport,ResourcePriceListWithCurrency                                   139442
    }
    END.
  }
}

