OBJECT Codeunit 137065 SCM Reservation II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1027 : Record 82;
      ItemJournalBatch@1026 : Record 233;
      OutputItemJournalTemplate@1024 : Record 82;
      OutputItemJournalBatch@1023 : Record 233;
      ConsumptionItemJournalTemplate@1022 : Record 82;
      ConsumptionItemJournalBatch@1021 : Record 233;
      WarehouseJournalTemplate@1020 : Record 7309;
      WarehouseJournalBatch@1019 : Record 7310;
      LocationWhite@1018 : Record 14;
      ManufacturingSetup@1009 : Record 99000765;
      LocationGreen@1013 : Record 14;
      LocationSilver@1025 : Record 14;
      LocationYellow@1030 : Record 14;
      LocationRed@1029 : Record 14;
      LocationRed2@1028 : Record 14;
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1046 : Codeunit 130502;
      LibraryUtility@1010 : Codeunit 131000;
      LibrarySales@1045 : Codeunit 130509;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryManufacturing@1001 : Codeunit 132202;
      LibraryWarehouse@1014 : Codeunit 132204;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryPlanning@1007 : Codeunit 132203;
      LibraryRandom@1006 : Codeunit 130440;
      LibrarySetupStorage@1008 : Codeunit 131009;
      IsInitialized@1000 : Boolean;
      Counter@1003 : Integer;
      MessageCancelReservation@1017 : TextConst 'ENU=Do you want to cancel all reservations in the %1?';
      MessageChangeNotAffected@1005 : TextConst 'ENU=The change will not affect existing entries.';
      ConfirmCalculateLowLevelCode@1011 : TextConst 'ENU=Calculate low-level code';
      PickActivitiesCreated@1015 : TextConst 'ENU=Number of Invt. Pick activities created';
      VersionCountError@1032 : TextConst 'ENU=Version count must match.';
      VersionCodeError@1033 : TextConst 'ENU=Version Code must match.';
      ReservationMessage@1036 : TextConst 'ENU=Full automatic Reservation is not possible.';
      ProductionOrderCreated@1035 : TextConst 'ENU=Released Prod. Order';
      JournalLinesPostedMsg@1034 : TextConst 'ENU=The journal lines were successfully posted.';
      PickErr@1038 : TextConst 'ENU=The Quantity is incorrect.';
      CostAmountActualInILEErr@1041 : TextConst 'ENU="Cost Amount (Actual) in Item Ledger Entry is not correct. Maximum is %1, minimum is %2  "';
      FinishOrderErr@1039 : TextConst 'ENU=Pick Qty. (Base) must be equal to ''0''  in Prod. Order Component';
      ErrorWrongMsg@1040 : TextConst 'ENU=Error message must be same';
      NothingAvailableToReserveErr@1042 : TextConst 'ENU=There is nothing available to reserve.';
      DateConflictWithExistingReservationsErr@1043 : TextConst 'ENU=The change leads to a date conflict with existing reservations.';
      PostJnlLinesMsg@1044 : TextConst 'ENU=Do you want to post the journal lines';

    [Test]
    [HandlerFunctions(ProdOrderComponentsHandler)]
    PROCEDURE ReleasedProdOrderComponentsPageWithLocation@127();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      ReleasedProductionOrder@1002 : TestPage 99000831;
      ItemNo@1003 : Code[20];
      InitialInventory@1000 : Decimal;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create and release Purchase Order. Create Released Production Order.
      Initialize;
      ItemNo := CreateItemsSetup(Item);
      InitialInventory := LibraryRandom.RandInt(100);
      LibraryVariableStorage.Enqueue(InitialInventory);  // Enqueue variable.
      LibraryVariableStorage.Enqueue(ItemNo);  // Enqueue variable.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LocationGreen.Code,InitialInventory);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",InitialInventory,LocationGreen.Code,'');

      // Exercise: Open components on Released Production Order.
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProductionOrder."No.");
      ReleasedProductionOrder.ProdOrderLines.Components.INVOKE;

      // Verify: Verify the value on Prod. Order Components page in ProdOrderComponentsHandler handler.
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE FullReservationOnReleasedProdOrderComponentsWithLocation@219();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      ProdOrderComponent@1007 : Record 5407;
      ItemNo@1002 : Code[20];
      PrevComponentsAtLocation@1003 : Code[10];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create and release Purchase Order and post it, create Released Production Order.
      Initialize;
      PrevComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationGreen.Code);

      ItemNo := CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LocationGreen.Code,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as Receive and Invoice.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,LocationGreen.Code,'');

      // Exercise: Reserve components on Released Production Order.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;

      // Verify: Verify the values on Production Order Components.
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status::Released,ItemNo,Quantity,'',Item."Flushing Method");

      // Teardown
      UpdateManufacturingSetupComponentsAtLocation(PrevComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE ReservationOnSalesOrderWithLocation@67();
    VAR
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Purchase Order and post it, create a Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LocationGreen.Code,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive only.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity,LocationGreen.Code);

      // Exercise: Reserve the Item on sales Order.
      SalesLine.ShowReservation;

      // Verify: Verify the reserved quantity on Sales Line.
      VerifyReservationQtyOnSalesLine(SalesHeader."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler,CancelReserveConfirmHandler)]
    PROCEDURE CancelReservationOnSalesOrderWithReleasedProdOrder@259();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create a Released Production Orders, Create Sales Order and reserve it.
      Initialize;
      CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,'','');
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity,'');
      SalesLine.ShowReservation;

      // Exercise: Cancel reservation on Sales Line.
      SalesLine.ShowReservation;

      // Verify: Verify the reserved quantity on Sales Line as zero after cancel reservation.
      VerifyReservationQtyOnSalesLine(SalesHeader."No.",0);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE PartialDeleteWithMultipleReleasedProductionOrderReservation@32();
    VAR
      Item@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProductionOrder2@1002 : Record 5405;
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create two Released Production Orders, Create Sales Order and reserve on it.
      Initialize;
      CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,LocationGreen.Code,'');
      CreateAndRefreshProdOrder(ProductionOrder2,ProductionOrder2.Status::Released,Item."No.",Quantity,LocationGreen.Code,'');
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity,LocationGreen.Code);
      SalesLine.ShowReservation;

      // Exercise: Delete first Production Order.
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      ProductionOrder.DELETE(TRUE);

      // Verify: Verify the reserved quantity on Sales Line after deletion of a single Production Order.
      VerifyReservationQtyOnSalesLine(SalesHeader."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE ReservationOnSalesOrderWithUpdatedReceiptDate@113();
    VAR
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesHeader@1003 : Record 36;
      SalesLine@1008 : Record 37;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item. Create and release Purchase Order and post it, create a Sales Order and reserve it.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",'',Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive only.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity,'');
      SalesLine.ShowReservation;

      // Exercise: Update Expected Receipt Date and Reserve it again.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PurchaseLine.VALIDATE("Expected Receipt Date",CALCDATE('<-' + FORMAT(RANDOM(5)) + 'D>',WORKDATE));
      PurchaseLine.MODIFY(TRUE);

      // Verify: Verify the reserved quantity on Sales Line.
      VerifyReservationQtyOnSalesLine(SalesHeader."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE ReservationOnFirmPlannedProdOrderComponentsWithLocation@30();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      ProdOrderComponent@1007 : Record 5407;
      ItemNo@1003 : Code[20];
      PrevComponentsAtLocation@1002 : Code[10];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create and release Purchase Order and Post as Receive and Invoice. Create a Firm Planned Production Order.
      Initialize;
      PrevComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationGreen.Code);

      ItemNo := CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LocationGreen.Code,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as Receive and Invoice.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",Quantity,LocationGreen.Code,'');

      // Exercise: Reserve Components on Firm Planned Prod. Order.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;

      // Verify: Verify the Reservation made on Firm Planned Prod. Order.
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status::"Firm Planned",ItemNo,Quantity,'',Item."Flushing Method");

      // Teardown
      UpdateManufacturingSetupComponentsAtLocation(PrevComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE ComponentsReservationOnChangeFirmPlannedProdOrderToReleased@266();
    VAR
      ProductionOrder@1007 : Record 5405;
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      ProdOrderComponent@1000 : Record 5407;
      ItemNo@1001 : Code[20];
      ProdOrderNo@1002 : Code[20];
      PrevComponentsAtLocation@1008 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Reservation] [Production]
      // [SCENARIO] Check reserved Quantity on production component after release Production Order (components reserved for Firm Planned Prod. Order).

      // [GIVEN] Create parent and child Item, create Production BOM. Create and release Purchase Order and post it. Create a Firm Planned Production Order and reserve its components.
      Initialize;
      PrevComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation('');

      ItemNo := CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandInt(100);  // Large value required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,'',Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive only.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",Quantity,'','');
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;

      // [WHEN] Change Firm Planned Prod. Order to Released Prod. Order.
      ProdOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);

      // [THEN] Verify the Changed status with values on Released Prod. Order.
      VerifyProdOrderComponent(ProdOrderNo,ProductionOrder.Status::Released,ItemNo,Quantity,'',Item."Flushing Method");

      // Teardown
      UpdateManufacturingSetupComponentsAtLocation(PrevComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler)]
    PROCEDURE RegisterWarehouseJournalLineWithLotTracking@43();
    VAR
      Item@1001 : Record 27;
      Bin@1021 : Record 7354;
      WarehouseEntry@1002 : Record 7312;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      // Setup: Create Item With Item Tracking Code, Create Warehouse Journal line and assign Tracking on it.
      Initialize;
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCode);
      WarehouseJournalSetup(LocationWhite.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));
      LibraryVariableStorage.Enqueue(FORMAT(WarehouseJournalLine.Quantity));
      LibraryVariableStorage.Enqueue(WarehouseJournalLine.Quantity);
      WarehouseJournalLine.OpenItemTrackingLines;  // Assign Lot No through WhseItemTrackingPageHandler.

      // Exercise: Register the Warehouse Journal Line.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      // Verify: Verify the Warehouse Entry for Registered Warehouse Journal Line.
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",WarehouseJournalLine.Quantity,Bin.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,WhseItemTrackingPageHandler)]
    PROCEDURE CalculateConsumptionWithLotTracking@60();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      ProductionOrder@1005 : Record 5405;
      ItemJournalLine@1004 : Record 83;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and refresh a Released Production order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemSetupWithLotTracking(Item,Item2);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Item2,Quantity);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationWhite.Code,'');

      // Exercise: Create Consumption Journal and calculate Consumption with Tracking.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Post Consumption FALSE.

      // Verify: Verify the Item Journal Line.
      VerifyItemJournalLine(Item."No.",ItemJournalLine."Entry Type"::Consumption);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler)]
    PROCEDURE RegisterAndPostItemsWithProductionBOMAndLotTracking@301();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ItemLedgerEntry@1007 : Record 32;
      WarehouseEntry@1000 : Record 7312;
      Bin@1008 : Record 7354;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create parent and child Items in a Production BOM and certify it.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);  // Large Random Value required for Test.
      CreateItemSetupWithLotTracking(Item,Item2);
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");

      // Exercise: Update the Items Inventory through Warehouse Item Journal.
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Item2,Quantity);

      // Verify: Verify the Warehouse Entries and Item Ledger Entries for the posted Items.
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",Quantity,Bin.Code);
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item2."No.",Quantity,Bin.Code);
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Quantity,TRUE);
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item2."No.",Quantity,TRUE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler)]
    PROCEDURE WarehousePickFromProductionOrderWithLotTracking@363();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityLine@1000 : Record 5767;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and refresh a Released Production order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);  // Large Random Value required for Test.
      CreateItemSetupWithLotTracking(Item,Item2);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Item2,Quantity);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationWhite.Code,
        LocationWhite."To-Production Bin Code");

      // Exercise: Create Warehouse Pick from the Released Production Order.
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // Verify: Verify the values on Warehouse Activity Lines.
      VerifyWarehouseActivityLine(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
        WarehouseActivityLine."Action Type"::Take);
      VerifyWarehouseActivityLine(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
        WarehouseActivityLine."Action Type"::Place);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler)]
    PROCEDURE RegisterWarehousePickFromProductionOrderWithLotTracking@368();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      RegisteredWhseActivityLine@1005 : Record 5773;
      WarehouseActivityLine@1008 : Record 5767;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Lot Tracking. Create and refresh a Released Production order.
      // Create a Pick from Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);  // Large Random Value required for Test.
      CreateItemSetupWithLotTracking(Item,Item2);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Item2,Quantity);
      CreateWarehousePickfromProductionOrderSetup(Item,Item2,ProductionOrder,Quantity);

      // Exercise: Register the Pick.
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",WarehouseActivityLine."Action Type"::Take);

      // Verify: Verify the Registered Warehouse Activity Lines.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",Item."No.",Quantity,
        RegisteredWhseActivityLine."Action Type"::Take);
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",Item."No.",Quantity,
        RegisteredWhseActivityLine."Action Type"::Place);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler,ItemTrackingPageHandler)]
    PROCEDURE PostConsumptionWithProductionOrderWithLotTracking@371();
    BEGIN
      // Setup.
      Initialize;
      OutputQuantityWithProductionOrderAndLotTracking(FALSE);  // Post Output Journal FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler,ItemTrackingPageHandler)]
    PROCEDURE PostOutputWithProductionOrderWithLotTracking@48();
    BEGIN
      // Setup.
      Initialize;
      OutputQuantityWithProductionOrderAndLotTracking(TRUE);  // Post Output Journal TRUE.
    END;

    LOCAL PROCEDURE OutputQuantityWithProductionOrderAndLotTracking@409(PostOutput@1000 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemLedgerEntry@1007 : Record 32;
      WarehouseActivityLine@1008 : Record 5767;
      Quantity@1003 : Decimal;
      ComponentsAtLocation@1002 : Code[10];
    BEGIN
      // Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Lot Tracking. Create and refresh a Released Production order.
      // Create a Pick from Production Order and register it. Create and post a Consumption Journal.
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandInt(100); // Large value required.
      CreateItemSetupWithLotTracking(Item,Item2);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Item2,Quantity);
      CreateWarehousePickfromProductionOrderSetup(Item,Item2,ProductionOrder,Quantity);
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",WarehouseActivityLine."Action Type"::Take);

      // Exercise: Create and post a Consumption Journal for the Production Order. Create and post a Output Journal for the Production Order.
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue variable.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",TRUE);  // Post Consumption TRUE.
      IF PostOutput THEN
        CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,Quantity);

      // Verify: Verify Item Ledger Entry.
      IF PostOutput THEN
        // Verify the Output Posted for the Production Order in Item Ledger Entry.
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item2."No.",Quantity,TRUE)
      ELSE
        // Verify the Consumption posted for the Production Order in Item Ledger Entry.
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Consumption,Item."No.",-Quantity,TRUE);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE QuantityReceiveFromOutputJournalWithLotTracking@115();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      Bin@1000 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ItemLedgerEntry@1008 : Record 32;
      WarehouseEntry@1013 : Record 7312;
    BEGIN
      // Setup: Create parent and child Items in a Production BOM and certify it. Create and refresh Released Production Order.
      Initialize;
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreateItemSetupWithLotTracking(Item,Item2);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",LibraryRandom.RandDec(100,2),LocationWhite.Code,
        LocationWhite."To-Production Bin Code");

      // Exercise: Create and Post Output journal with Tracking.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,ProductionOrder.Quantity);

      // Verify: Verify the Item Ledger Entry and Warehouse Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item2."No.",ProductionOrder.Quantity,TRUE);
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",Item2."No.",ProductionOrder.Quantity,LocationWhite."To-Production Bin Code");
    END;

    [Test]
    PROCEDURE ProductionBOMWithRoutingLink@185();
    VAR
      Item@1004 : Record 27;
      Item2@1009 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1001 : Record 99000772;
      RoutingLinkCode@1012 : Code[10];
    BEGIN
      // Setup: Create a child Item and update Inventory.
      Initialize;
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));

      // Exercise: Create Production BOM, Parent item and update Routing Link Code on Child Item.
      RoutingLinkCode := CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,TRUE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");

      // Verify: Verify the updated Production BOM Line.
      SelectProductionBOMLine(ProductionBOMLine,ProductionBOMHeader."No.");
      ProductionBOMLine.TESTFIELD("Routing Link Code",RoutingLinkCode);
    END;

    [Test]
    PROCEDURE ProductionBOMFlushingMethodOnComponentItem@289();
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1011 : Record 99000772;
      Item@1004 : Record 27;
      Item2@1009 : Record 27;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create child Item and update Inventory. Create Production BOM and Parent item.
      Initialize;
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));  // Child Item.
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item2."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item2."No.",1);  // Value important.
      CreateProductionItem(Item,ProductionBOMHeader."No.");  // Parent item with Production BOM No.

      // Exercise: Update Flushing Method On Child Item, after Production BOM No. updated on Parent Item. Certify Production BOM and create a Released Production Order.
      Item2.FIND;
      UpdateFlushingMethodAndCertifyBOM(Item2,ProductionBOMHeader);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify the updated Production Order Component.
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status::Released,Item2."No.",0,'',Item2."Flushing Method");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ReleasedProductionOrderWithChangedOrderTrackingPolicy@316();
    VAR
      ProductionOrder@1001 : Record 5405;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1011 : Record 99000772;
      Item@1004 : Record 27;
      Item2@1009 : Record 27;
    BEGIN
      // Setup: Create child Item and update Inventory. Create Production BOM and Parent item.
      Initialize;
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item2."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item2."No.",1);  // Value important.
      CreateProductionItem(Item,ProductionBOMHeader."No.");

      // Exercise: Update Order Tracking Policy on child Item. Create and refresh Released Production Order.
      LibraryVariableStorage.Enqueue(MessageChangeNotAffected);  // Enqueue variable.
      Item2.FIND;
      Item2.VALIDATE("Order Tracking Policy",Item2."Order Tracking Policy"::"Tracking & Action Msg.");
      Item2.MODIFY(TRUE);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify the Change Order Tracking Policy message in MessageHandler Handler. Verify the updated Production BOM Line.
      VerifyProductionOrder(ProductionOrder."No.",'',ProductionOrder.Quantity);
    END;

    [Test]
    PROCEDURE ReleasedProductionOrderWithRouting@188();
    BEGIN
      // Setup.
      Initialize;
      OutputFromProductionOrderWithRoutingSetup(FALSE);  // Post Output Journal FALSE.
    END;

    [Test]
    PROCEDURE PostOutputFromReleasedProductionOrderWithRoutingSetup@58();
    BEGIN
      // Setup.
      Initialize;
      OutputFromProductionOrderWithRoutingSetup(TRUE);  // Post Output Journal TRUE.
    END;

    LOCAL PROCEDURE OutputFromProductionOrderWithRoutingSetup@652(PostOutput@1011 : Boolean);
    VAR
      ProductionOrder@1010 : Record 5405;
      Item@1009 : Record 27;
      RoutingHeader@1003 : Record 99000763;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Create parent and child Item, create Production BOM. Create Routing Setup and update Routing on Item. Create and refresh a Released Production Order.
      CreateItemsSetup(Item);
      CreateRoutingAndUpdateItem(RoutingHeader,Item);

      // Exercise: Create and refresh a Released production Order. Create and post and Output Journal for the Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');
      IF PostOutput THEN
        CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,ProductionOrder.Quantity);

      // Verify: Verify the Item Ledger Entry for the posted Output. Verify the updated Released production Order.
      IF PostOutput THEN
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item."No.",ProductionOrder.Quantity,FALSE)
      ELSE
        VerifyProductionOrder(ProductionOrder."No.",RoutingHeader."No.",ProductionOrder.Quantity)
    END;

    [Test]
    PROCEDURE ReleasedProductionOrderComponentWithRoutingSetup@153();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      RoutingHeader@1003 : Record 99000763;
      ItemNo@1008 : Code[20];
      RoutingLinkCode@1010 : Code[10];
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create Routing Setup and update Routing on Item. Create and refresh a Released Production Order.
      Initialize;
      ItemNo := CreateItemsSetup(Item);
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Exercise: Update Routing Link on Production Order Component
      RoutingLinkCode := UpdateRoutingLinkOnProdOrderComponent(ProductionOrder."No.");

      // Verify: Verify the updated Production Order Component.
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status::Released,ItemNo,0,RoutingLinkCode,Item."Flushing Method");
    END;

    [Test]
    [HandlerFunctions(LowLevelCodeConfirmHandler)]
    PROCEDURE LowLevelCodeOnProductionBOMWithoutActiveBOMVersion@16();
    VAR
      Item@1001 : Record 27;
      DynamicLowLevelCode@1003 : Boolean;
    BEGIN
      // Setup: Create a Child Item and update Inventory, create a certified Production BOM, Parent Item and attach Production BOM.
      Initialize;
      DynamicLowLevelCode := UpdateManufacturingSetupDynamicLowLevelCode(FALSE);  // Dynamic Low Level Code False.
      CreateItemsSetup(Item);

      // Exercise: Calculate Low Level code.
      LibraryPlanning.CalculateLowLevelCode;

      // Verify: Verify Low Level Code on Production BOM.
      VerifyLowLevelCodeOnProductionBOM(Item."Production BOM No.",1);  // Value required. The Low Level Code in the Production BOM for the Child Item.

      // Tear Down: Restore original value of Dynamic Low Level Code.
      UpdateManufacturingSetupDynamicLowLevelCode(DynamicLowLevelCode);
    END;

    [Test]
    [HandlerFunctions(LowLevelCodeConfirmHandler)]
    PROCEDURE LowLevelCodeOnProductionBOMWithCertifiedBOMVersion@11();
    VAR
      Item@1001 : Record 27;
      ProductionBOMVersion@1002 : Record 99000779;
      DynamicLowLevelCode@1003 : Boolean;
    BEGIN
      // Setup: Create a Child Item and update Inventory, create a certified Production BOM, Parent Item and attach Production BOM.
      Initialize;
      DynamicLowLevelCode := UpdateManufacturingSetupDynamicLowLevelCode(FALSE);  // Dynamic Low Level Code False.
      CreateItemsSetup(Item);

      // Exercise: Create certified Production BOM Version. Calculate Low Level code.
      CreateProductionBOMVersion(Item."Production BOM No.",Item."Base Unit of Measure",ProductionBOMVersion.Status::Certified);
      LibraryPlanning.CalculateLowLevelCode;

      // Verify: Verify Low Level Code on Production BOM.
      VerifyLowLevelCodeOnProductionBOM(Item."Production BOM No.",1);  // Value required. The Low Level Code in the Production BOM for the Child Item.

      // Tear Down: Restore original value of Dynamic Low Level Code.
      UpdateManufacturingSetupDynamicLowLevelCode(DynamicLowLevelCode);
    END;

    [Test]
    [HandlerFunctions(LowLevelCodeConfirmHandler)]
    PROCEDURE LowLevelCodeOnProductionBOMWithClosedBOMVersion@26();
    VAR
      Item@1001 : Record 27;
      ProductionBOMVersion@1002 : Record 99000779;
      DynamicLowLevelCode@1003 : Boolean;
    BEGIN
      // Setup: Create a Child Item and update Inventory, create a certified Production BOM, Parent Item and attach Production BOM.
      Initialize;
      DynamicLowLevelCode := UpdateManufacturingSetupDynamicLowLevelCode(FALSE);  // Dynamic Low Level Code False.
      CreateItemsSetup(Item);

      // Exercise: Create closed Production BOM Version. Calculate Low Level code.
      CreateProductionBOMVersion(Item."Production BOM No.",Item."Base Unit of Measure",ProductionBOMVersion.Status::Closed);
      LibraryPlanning.CalculateLowLevelCode;

      // Verify: Verify Low Level Code on Production BOM.
      VerifyLowLevelCodeOnProductionBOM(Item."Production BOM No.",1);  // Value required. The Low Level Code in the Production BOM for the Child Item.

      // Tear Down: Restore original value of Dynamic Low Level Code.
      UpdateManufacturingSetupDynamicLowLevelCode(DynamicLowLevelCode);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE ItemTrackingOnReleasedProductionOrderWithCertifiedBOM@33();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ReleasedProductionOrder@1002 : TestPage 99000831;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Find Bin at Location, Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and refresh a Released Production order.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemSetupWithLotTracking(Item,Item2);

      // Update Inventory for parent and child Item on Silver Location.
      CreateAndPostItemJournalLine(Item."No.",Quantity,Bin.Code,LocationSilver.Code,TRUE);  // Using Tracking TRUE.
      CreateAndPostItemJournalLine(Item2."No.",Quantity,Bin.Code,LocationSilver.Code,TRUE);  // Using Tracking TRUE.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationSilver.Code,Bin.Code);

      // Exercise: Open Item Tracking page from Released Production Order.
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProductionOrder."No.");
      ReleasedProductionOrder.ProdOrderLines.ItemTrackingLines.INVOKE;

      // Verify: Verify the Released Production Order after opening Item Tracking Line successfully from it.
      VerifyProductionOrder(ProductionOrder."No.",'',ProductionOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE InventoryPickFromReleasedProductionOrderWithLotTracking@167();
    BEGIN
      // Setup.
      Initialize;
      WhseActivityFromReleasedProductionOrderWithLotTracking(FALSE);  // Post Inventory Pick FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE PostInventoryPickFromReleasedProductionOrderWithLotTracking@168();
    BEGIN
      // Setup.
      Initialize;
      WhseActivityFromReleasedProductionOrderWithLotTracking(TRUE);  // Post Inventory Pick TRUE.
    END;

    LOCAL PROCEDURE WhseActivityFromReleasedProductionOrderWithLotTracking@126(PostInventoryPick@1009 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and refresh a Released Production Order.
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationSilver.Code);
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      Quantity := LibraryRandom.RandDec(100,2);  // Large Random Value required for Test.
      CreateItemSetupWithLotTracking(Item,Item2);

      // Update Inventory For parent and child Items at Silver Location.
      CreateAndPostItemJournalLine(Item."No.",Quantity,Bin.Code,LocationSilver.Code,TRUE);  // Using Tracking TRUE.
      CreateAndPostItemJournalLine(Item2."No.",Quantity,Bin.Code,LocationSilver.Code,TRUE);  // Using Tracking TRUE.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationSilver.Code,Bin.Code);

      // Exercise: Create Inventory Pick from the Released Production Order.
      LibraryVariableStorage.Enqueue(PickActivitiesCreated);  // Enqueue variable required inside MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);
      IF PostInventoryPick THEN BEGIN
        // Auto fill Quantity To Handle for whole Quantity. Update Lot No on Whse Activity Line and post Inventory Pick.
        WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
        UpdateLotNoAndQtyToHandleOnWarehouseActivityLine(
          Item."No.",ProductionOrder."No.",WarehouseActivityLine."Action Type"::Take,WarehouseActivityLine."Qty. to Handle");
        FindWarehouseActivityHeader(
          WarehouseActivityHeader,ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",
          WarehouseActivityLine."Action Type"::Take);
        LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Invoice False.
      END;

      IF PostInventoryPick THEN
        // Verify: Verify that Inventory Pick posted successfully.
        VerifyPostedInventoryPickLine(ProductionOrder."No.",Item."No.",Bin.Code,Quantity,LocationSilver.Code)
      ELSE
        // Verify that Inventory Pick created successfully.
        VerifyWarehouseActivityLine(
          ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
          WarehouseActivityLine."Action Type"::Take);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE BOMLineWithNewUnitOfMeasure@54();
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1000 : Record 5404;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1011 : Record 99000772;
    BEGIN
      // Setup: Create Item and Item Unit Of Measure and update Inventory.
      Initialize;
      CreateItemUnitOfMeasureSetup(Item,ItemUnitOfMeasure);
      CreateAndPostItemJournalLine(Item."No.",LibraryRandom.RandDec(100,2),'','',FALSE);  // Using Tracking FALSE.

      // Exercise: Create Production BOM.
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // Verify: Verify that Unit Of Measure Code updated on Item is also updated on Production BOM Line.
      SelectProductionBOMLine(ProductionBOMLine,ProductionBOMHeader."No.");
      ProductionBOMLine.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure.Code);
    END;

    [Test]
    PROCEDURE ProductionBOMLowLevelCodeWithCertifiedBOMVersion@39();
    VAR
      Item@1001 : Record 27;
      ProductionBOMVersion@1002 : Record 99000779;
    BEGIN
      // Setup: Create a Child Item and update Inventory, create a certified Production BOM, Parent Item and attach Production BOM.
      Initialize;
      CreateItemsSetup(Item);

      // Exercise: Create certified Production BOM Version.
      CreateProductionBOMVersion(Item."Production BOM No.",Item."Base Unit of Measure",ProductionBOMVersion.Status::Certified);

      // Verify: Verify Low Level Code on Production BOM is same after adding Certified BOM version to it.
      VerifyLowLevelCodeOnProductionBOM(Item."Production BOM No.",1);  // Value required. The Low Level Code in the Production BOM for the Parent Item.
    END;

    [Test]
    PROCEDURE ProductionOrderComponentsWithRoutingLinkCode@38();
    VAR
      ProductionOrder@1008 : Record 5405;
      Item@1007 : Record 27;
      Item2@1002 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      RoutingHeader@1004 : Record 99000763;
      RoutingLinkCode@1001 : Code[10];
    BEGIN
      // Setup: Create child Item, create certified Production BOM, creat parent Item and attach Production BOM. Create Routing Setup and update Routing Link Code on Item.
      Initialize;
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));
      RoutingLinkCode := CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,TRUE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
      UpdateRoutingLine(RoutingHeader,RoutingLinkCode);

      // Exercise: Create and refresh a Firm Planned Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify Routing Link Code updated on Routing Line is updated on Production BOM Components of Firm Planned Production Order.
      VerifyProdOrderComponent(
        ProductionOrder."No.",ProductionOrder.Status::"Firm Planned",Item2."No.",0,RoutingLinkCode,Item."Flushing Method");
    END;

    [Test]
    PROCEDURE OutputJournalPostingForNegativeOutput@35();
    VAR
      ProductionOrder@1004 : Record 5405;
      Item@1003 : Record 27;
      RoutingHeader@1002 : Record 99000763;
      ItemLedgerEntry@1001 : Record 32;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create child Item, create certified Production BOM, parent Item and attach Production BOM. Create Routing Setup and update Routing Link Code on Item.
      Initialize;
      CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateRoutingAndUpdateItem(RoutingHeader,Item);

      // Exercise: Create and refresh a Released production Order. Create and post and Output Journal for the Production Order with negative Quantity.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,'','');
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,-Quantity);

      // Verify: Verify the Item Ledger Entry for the posted negative Output from Output Journal for Released Production Order.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item."No.",-ProductionOrder.Quantity,FALSE);
    END;

    [Test]
    PROCEDURE UnitCostPerOnProductionOrderWithRouting@57();
    VAR
      ProductionOrder@1008 : Record 5405;
      Item@1007 : Record 27;
      RoutingHeader@1004 : Record 99000763;
      RoutingLineUnitCostPer@1011 : Decimal;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM, attach Production BOM to parent Item and certify it. Create Routing Setup and update Routing on parent Item.
      Initialize;
      CreateItemsSetup(Item);
      RoutingLineUnitCostPer := CreateRoutingAndUpdateItem(RoutingHeader,Item);

      // Exercise: Create and refresh a Released Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify that Unit Cost Per is populated successfully on Routing Line.
      VerifyProductionOrderRoutingLine(ProductionOrder."No.",RoutingLineUnitCostPer);
    END;

    [Test]
    PROCEDURE UnitCostPerOnProductionOrderWithRoutingAndRegenerativePlan@132();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ProdOrderLine@1006 : Record 5406;
      Item@1007 : Record 27;
      RoutingHeader@1004 : Record 99000763;
      RoutingLineUnitCostPer@1011 : Decimal;
    BEGIN
      // Setup: Create Parent and child Items, create certified Production BOM attach Production BOM to parent Item,update Item for Planning. Create Routing Setup and update Routing on parent Item. Create a Sales Order.
      Initialize;
      UpdateItemPlanningParameters(Item);
      RoutingLineUnitCostPer := CreateRoutingAndUpdateItem(RoutingHeader,Item);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2) + 1000,'');

      // Exercise: Calculate Regenerative Plan through Planning Worksheet on WORKDATE. Accept and carry out Action Message.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      AcceptAndCarryOutActionMessage(Item."No.");

      // Verify: Verify the Unit Cost Per on Routing Line calculated correctly through Calculate Regenerative Plan.
      FindProductionOrderLine(ProdOrderLine,Item."No.");
      VerifyProductionOrderRoutingLine(ProdOrderLine."Prod. Order No.",RoutingLineUnitCostPer);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE ProductionOrderChangedRoutingNoWithLotTracking@166();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      RoutingHeader@1005 : Record 99000763;
      ProdOrderRoutingLine@1001 : Record 5409;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create parent and child Items with Tracking in a Production BOM and certify it. Create Routing and update Routing on parent Item. Update Inventory for Items with Tracking on a Location. Create and refresh a Released Production Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemSetupWithLotTracking(Item,Item2);
      CreateRoutingAndUpdateItem(RoutingHeader,Item2);
      CreateAndPostItemJournalLine(Item."No.",Quantity,'',LocationGreen.Code,TRUE);  // Using Tracking TRUE.
      CreateAndPostItemJournalLine(Item2."No.",Quantity,'',LocationGreen.Code,TRUE);  // Using Tracking TRUE.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationGreen.Code,'');

      // Exercise: Update Routing No to blank on Production Order.
      ProductionOrder.GET(ProductionOrder.Status::Released,ProductionOrder."No.");
      ProductionOrder.VALIDATE("Routing No.",'');
      ProductionOrder.MODIFY(TRUE);

      // Verify: Verify that Routing No is not blank on Production Order routing Line.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderRoutingLine.TESTFIELD("Routing No.",RoutingHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE WarehousePutAwayWithProductionBOMAndLotTracking@275();
    BEGIN
      // Setup.
      Initialize;
      WarehouseActivityWithProductionBOMAndLotTracking(TRUE,FALSE,FALSE);  // Create Warehouse Put Away TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisteredWhsePutAwayWithProductionBOMAndLotTracking@276();
    BEGIN
      // Setup.
      Initialize;
      WarehouseActivityWithProductionBOMAndLotTracking(FALSE,TRUE,FALSE);  // Register Warehouse Put Away TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE WarehousePickWithProductionBOMAndLotTracking@277();
    BEGIN
      // Setup.
      Initialize;
      WarehouseActivityWithProductionBOMAndLotTracking(FALSE,TRUE,TRUE);  // Register Warehouse Put Away and create Warehouse Pick TRUE.
    END;

    LOCAL PROCEDURE WarehouseActivityWithProductionBOMAndLotTracking@40(PostWarehouseReceipt@1015 : Boolean;RegisterPutAway@1014 : Boolean;CreatePick@1007 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      PurchaseHeader@1008 : Record 38;
      WarehouseReceiptHeader@1013 : Record 7316;
      WarehouseReceiptLine@1011 : Record 7317;
      PurchaseLine@1009 : Record 39;
      RegisteredWhseActivityLine@1005 : Record 5773;
      WarehouseActivityLine@1000 : Record 5767;
      Quantity@1003 : Decimal;
      PrevComponentsAtLocation@1001 : Code[10];
    BEGIN
      // Update Manufacturing Components at Location. Create parent and child Items with Tracking in a Production BOM and certify it. Create and release Purchase Order and assign Lot Tracking to it. Create Whse Receipt from it.
      PrevComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationYellow.Code);
      Quantity := LibraryRandom.RandInt(100);
      CreateItemSetupWithLotTracking(Item,Item2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LocationYellow.Code,Quantity);
      PurchaseLine.OpenItemTrackingLines;  // Invokes ItemTrackingPageHandler.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptNo(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Register the Put Away created.
      IF RegisterPutAway THEN BEGIN
        FindWarehouseActivityLine(
          WarehouseActivityLine,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",
          WarehouseActivityLine."Action Type");
        RegisterWarehouseActivity(
          PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",WarehouseActivityLine."Action Type");
      END;
      // Create and refresh a Released Production Order and create Pick from it.
      IF CreatePick THEN BEGIN
        CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationYellow.Code,'');
        LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      END;

      // Verify: Verify the posted Wraehouse Receipt.
      IF PostWarehouseReceipt THEN
        VerifyWarehouseActivityLine(
          PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order",Item."No.",Quantity,
          WarehouseActivityLine."Action Type")
        // Verify the Registered Put Away.
      ELSE
        IF RegisterPutAway AND NOT CreatePick THEN
          VerifyRegisteredWhseActivityLine(
            RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Item."No.",Quantity,
            RegisteredWhseActivityLine."Action Type")
        ELSE
          // Verify the Pick created from Released Production Order.
          VerifyWarehouseActivityLine(
            ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
            WarehouseActivityLine."Action Type");

      // Teardown.
      UpdateManufacturingSetupComponentsAtLocation(PrevComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler)]
    PROCEDURE ProductionJournalFromProdOrderWithBinAndLocation@50();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Setup: Find Bin at Location, Create parent and child Items in a Production BOM and certify it. Update Inventory for parent and child Items at Location.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      CreateItemsSetupWithLocationAndBin(Item,Item2,LibraryRandom.RandDec(100,2),LocationRed.Code,Bin.Code);

      // Exercise: Create and refresh a Released Production order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),LocationRed.Code,Bin.Code);

      // Verify: Verify that Production Journal page is opened successfully from Production Order and Verify Item No on Production Journal page.
      LibraryVariableStorage.Enqueue(Item."No.");  // Enqueue variable required inside ProductionJournalPageHandler.
      OpenProductionJournal(ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler)]
    PROCEDURE ProdJournalFromProductionOrderWithChangedBinAndLocationOnComponent@31();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Item3@1005 : Record 27;
      Bin@1001 : Record 7354;
      Bin2@1004 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ProdOrderComponent@1008 : Record 5407;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Find Bins at Locations, Create parent and child Items in a Production BOM and certify it. Update Inventory for parent and child Items at Location. Create and refresh a Released Production order.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      LibraryWarehouse.FindBin(Bin2,LocationRed2.Code,'',1);  // Find Bin of Index 1.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemsSetupWithLocationAndBin(Item,Item2,Quantity,LocationRed.Code,Bin.Code);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,LocationRed.Code,Bin.Code);

      // Create a new Production Order Component at different Location and Bin.
      LibraryInventory.CreateItem(Item3);
      CreateAndPostItemJournalLine(Item3."No.",Quantity,Bin2.Code,LocationRed2.Code,FALSE);  // Using Tracking TRUE.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      CreateAndUpdateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder."No.",Item3."No.",ProdOrderComponent."Quantity per",
        ProdOrderComponent."Prod. Order Line No.",LocationRed2.Code);

      // Exercise: Open Production Journal Page from Released Production Order.
      LibraryVariableStorage.Enqueue(Item3."No.");  // Enqueue variable for Page Handler - ProductionJournalHandler.
      OpenProductionJournal(ProductionOrder."No.");

      // Verify: Verify that Production Journal Page opens successfully after updating Component with different Location through ProductionOrderPageHandler.
    END;

    [Test]
    PROCEDURE PlannedProductionOrderWithLocation@98();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      ProdOrderLine@1002 : Record 5406;
      ItemNo@1000 : Code[20];
    BEGIN
      // Setup: Create parent and child Items and update their Inventory. Create Production BOM and certify it.
      Initialize;
      ItemNo := CreateItemsSetup(Item);

      // Exercise: Create and refresh Planned Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Planned,ItemNo,LibraryRandom.RandDec(100,2),LocationGreen.Code,'');

      // Verify: Verify that Planned Production Order Line is updated with Location Code.
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      ProdOrderLine.TESTFIELD("Location Code",LocationGreen.Code);
    END;

    [Test]
    PROCEDURE PlannedProductionOrderComponentWithRoutingLinkCode@83();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1000 : Record 27;
      RoutingHeader@1003 : Record 99000763;
      ProductionBOMHeader@1002 : Record 99000771;
      RoutingLinkCode@1010 : Code[10];
    BEGIN
      // Setup: Create child Item, create certified Production BOM, creat parent Item and attach Production BOM. Create Routing Setup and update Routing Link Code on Item.
      Initialize;
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));
      RoutingLinkCode := CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,TRUE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
      UpdateRoutingLine(RoutingHeader,RoutingLinkCode);

      // Exercise: Create and refresh a Planned Production Order.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Planned,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify Routing Link Code updated on Routing Line is updated on Production BOM Components of Planned Production Order.
      VerifyProdOrderComponent(
        ProductionOrder."No.",ProductionOrder.Status::Planned,Item2."No.",0,RoutingLinkCode,Item."Flushing Method");
    END;

    [Test]
    PROCEDURE ReplanProductionOrderWithRouting@61();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      ProdOrderRoutingLine@1005 : Record 5409;
      RoutingHeader@1003 : Record 99000763;
      Direction@1000 : 'Forward,Backward';
      CalcMethod@1002 : 'All Levels';
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create Routing Setup and update Routing on Item. Update Routing for Send Ahead Quantity. Create and refresh a Released Production Order.
      Initialize;
      CreateItemsSetup(Item);
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
      UpdateRoutingLine(RoutingHeader,'');
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Exercise: Replan Production Order.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All Levels");

      // Verify: Verify that Send Ahead Quantity exist after Replan Production Order.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderRoutingLine.TESTFIELD("Send-Ahead Quantity");
    END;

    [Test]
    PROCEDURE ExpectedQuantityBaseOnProductionOrderComponent@45();
    VAR
      ProductionOrder@1008 : Record 5405;
      Item@1007 : Record 27;
      Item2@1002 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      RoutingHeader@1004 : Record 99000763;
      ProdOrderComponent@1001 : Record 5407;
      RoutingLinkCode@1000 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create child Item, create certified Production BOM, creat parent Item and attach Production BOM. Create Routing Setup and update Routing Link Code on Item.
      Initialize;
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));
      Quantity := LibraryRandom.RandInt(100);
      RoutingLinkCode := CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,TRUE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
      UpdateRoutingLine(RoutingHeader,RoutingLinkCode);

      // Exercise: Create and refresh a Released Production Order.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,'','');

      // Verify: Verify the Expected Qty (Base) is populated correctly on Production Order Component.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.TESTFIELD("Expected Qty. (Base)",Quantity);
    END;

    [Test]
    PROCEDURE RoutingOnPlannedProductionOrder@77();
    VAR
      ProductionOrder@1010 : Record 5405;
      Item@1009 : Record 27;
      RoutingHeader@1003 : Record 99000763;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM. Create Routing setup and update Routing on Item.
      Initialize;
      CreateItemsSetup(Item);
      CreateRoutingAndUpdateItem(RoutingHeader,Item);

      // Exercise: Create and refresh a Planned Production Order.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Planned,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify the Routing updated on Planned Production Order.
      ProductionOrder.GET(ProductionOrder.Status::Planned,ProductionOrder."No.");
      ProductionOrder.TESTFIELD("Routing No.",RoutingHeader."No.");
    END;

    [Test]
    PROCEDURE ProductionBOMMatrixPerVersionWithCopyBOM@84();
    BEGIN
      // Verify the Production BOM Matrix Per Version with Copy BOM.
      // Setup.
      Initialize;
      ProductionBOMMatrixWithCopyBOM(FALSE);  // Multiple BOM Versions -FALSE.
    END;

    [Test]
    PROCEDURE ProductionBOMMatrixPerVersionWithCopyBOMAndMultipleBOMVersions@76();
    BEGIN
      // Verify the Production BOM Matrix Per Version with Copy BOM with multiple BOM Versions.
      // Setup.
      Initialize;
      ProductionBOMMatrixWithCopyBOM(TRUE);  // Multiple BOM Versions -TRUE.
    END;

    LOCAL PROCEDURE ProductionBOMMatrixWithCopyBOM@125(MultipleBOMVersions@1004 : Boolean);
    VAR
      Item@1003 : Record 27;
      VersionCode@1001 : ARRAY [4] OF Text[1024];
      VersionCount@1000 : Integer;
    BEGIN
      // Create Production Item, attach Production BOM to it. Create Production BOM version with Copy BOM.
      CreateItemsSetup(Item);
      CreateProductionBOMVersionWithCopyBOM(Item."Production BOM No.");
      IF MultipleBOMVersions THEN
        CreateProductionBOMVersionWithCopyBOM(Item."Production BOM No.");

      // Exercise: Generate matrix data to match the BOM Version created.
      VersionCount := GenerateMatrixDataForBOMVersion(VersionCode,Item."Production BOM No.");

      // Verify: Verify BOM Matrix Column Count and Column with source Production BOM Version.
      VerifyMatrixBOMVersion(Item."Production BOM No.",VersionCode,VersionCount);
    END;

    [Test]
    [HandlerFunctions(ProductionBOMListHandler)]
    PROCEDURE ProductionBOMMatrixPerVersionWithCopyVersion@73();
    BEGIN
      // Verify the Production BOM Matrix Per Version with Copy Version.
      // Setup.
      Initialize;
      ProductionBOMMatrixWithCopyVersion(FALSE);  // Multiple BOM Versions -FALSE.
    END;

    [Test]
    [HandlerFunctions(ProductionBOMListHandler)]
    PROCEDURE ProductionBOMMatrixPerVersionWithCopyVersionAndMultipleBOMVersions@75();
    BEGIN
      // Verify the Production BOM Matrix Per Version with Copy Version and multiple BOM Versions.
      // Setup.
      Initialize;
      ProductionBOMMatrixWithCopyVersion(TRUE);  // Multiple BOM Versions -TRUE.
    END;

    LOCAL PROCEDURE ProductionBOMMatrixWithCopyVersion@604(MultipleBOMVersions@1003 : Boolean);
    VAR
      Item@1004 : Record 27;
      VersionCode@1002 : ARRAY [4] OF Text[1024];
      VersionCount@1001 : Integer;
    BEGIN
      // Create Production Item, attach Production BOM to it. Create Production BOM version with Copy Version.
      CreateItemsSetup(Item);
      CreateBOMVersionWithCopyVersion(Item);
      IF MultipleBOMVersions THEN
        CreateBOMVersionWithCopyVersion(Item);

      // Exercise: Generate matrix data to match the BOM Version created.
      VersionCount := GenerateMatrixDataForBOMVersion(VersionCode,Item."Production BOM No.");

      // Verify: Verify BOM Matrix Column Count and Column with source Production BOM Version.
      VerifyMatrixBOMVersion(Item."Production BOM No.",VersionCode,VersionCount);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM@82();
    VAR
      ReplenishmentSystem@1000 : 'Purchase,Prod. Order';
    BEGIN
      // Verify that correct Surplus Quantity is populated on Purchase Order with Calculate Regenerative Plan from Requisition Worksheet.
      // Setup.
      Initialize;
      OrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM(ReplenishmentSystem::Purchase);  // Replenishment System -Purchase.
    END;

    [Test]
    PROCEDURE ProductionOrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM@469();
    VAR
      ReplenishmentSystem@1000 : 'Purchase,Prod. Order';
    BEGIN
      // Verify that correct Surplus Quantity is populated on Production Order with Calculate Regenerative Plan from Requisition Worksheet.
      // Setup.
      Initialize;
      OrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM(ReplenishmentSystem::"Prod. Order");  // Replenishment System -Prod. Order.
    END;

    LOCAL PROCEDURE OrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM@151(ReplenishmentSystem@1000 : 'Purchase,Prod. Order');
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1003 : Record 27;
      SurplusQuantity@1001 : Decimal;
    BEGIN
      // Create parent and child Items, create certified Production BOM, attach Production BOM to parent Item, update Item for Planning with safety Stock and Replenishment System. Create a Sales Order.
      SurplusQuantity := LibraryRandom.RandDec(100,2);
      CreateItemWithPlanningParametersAndProductionBOM(Item,ReplenishmentSystem,SurplusQuantity);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(100,2),'');

      // Exercise: Calculate Regenerative Plan through Planning Worksheet on WORKDATE. Accept and carry out Action Message.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      AcceptAndCarryOutActionMessage(Item."No.");

      // Verify: Verify that Production / Purchase Order Line created with Surplus Quantity in addition to the Quantity.
      IF ReplenishmentSystem = ReplenishmentSystem::"Prod. Order" THEN
        VerifyProductionOrderLine(Item."No.",SalesLine.Quantity + SurplusQuantity)
      ELSE
        VerifyPurchaseLine(Item."No.",SalesLine.Quantity + SurplusQuantity);
    END;

    [Test]
    PROCEDURE ProductionOrderWithNewProductionItemOnProductionBOM@80();
    VAR
      Item@1004 : Record 27;
      Item2@1009 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup: Create Item hierarchy with two Production BOMs and certify Production BOM.
      Initialize;
      CreateItemHierarchy(Item,Item2);

      // Exercise: Create a Released Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify that correct Item and Quantity is populated on Production Order Line.
      VerifyProductionOrderLine(Item."No.",ProductionOrder.Quantity);
    END;

    [Test]
    PROCEDURE RequisitionLineWithNewProductionItemOnProductionBOM@78();
    VAR
      Item@1004 : Record 27;
      Item2@1009 : Record 27;
      RequisitionLine@1011 : Record 246;
      SalesHeader@1010 : Record 36;
      SalesLine@1007 : Record 37;
    BEGIN
      // Setup: Create Item hierarchy with two Production BOMs and certify Production BOM. Update Reordering Policy on updated BOM Item. Create a Sales Order.
      Initialize;
      CreateItemHierarchy(Item,Item2);
      UpdateLotForLotReorderingPolicyOnItem(Item);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(100,2),'');

      // Exercise: Calculate Regenerative Plan through Planning Worksheet on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify the Quantity and Due Date on Requisition Line for correct Parent Item.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD(Quantity,SalesLine.Quantity);
      RequisitionLine.TESTFIELD("Due Date",SalesLine."Shipment Date");
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler,ReservationHandler,MessageHandler)]
    PROCEDURE ReservationOnSalesOrderWithLotTracking@100();
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Setup: Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking.
      Initialize;
      CreateItemSetupWithLotTracking(Item,Item2);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(LocationWhite,Item,Item2,LibraryRandom.RandDec(100,2));

      // Exercise: Create and release a Sales Order with reservation.
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item2."No.",LibraryRandom.RandDec(100,2),LocationWhite.Code);  // Quantity value required for Full Auto Reservation and Warehouse Shipment.

      // Verify: Verify the Shipment Date and Location Code in Reservation Entry for Sales Order. Verify the Automatic Reservation message in MessageHandler.
      VerifyReservationEntry(Item2."No.",LocationWhite.Code,SalesHeader."Shipment Date");
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler,ReservationHandler,MessageHandler)]
    PROCEDURE PickFromProductionOrderWithLotTrackingAndReservation@93();
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      ProductionOrder@1004 : Record 5405;
      WarehouseActivityLine@1003 : Record 5767;
      ComponentsAtLocation@1001 : Code[10];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and release a Sales Order with reservation. Create Warehouse Shipment.
      // Create Production Order from Sales Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemsAndWarehouseShipmentWithReservationAndTrackingSetup(Item,Item2,SalesHeader,LocationWhite,Quantity);
      CreateProductionOrderFromSalesOrder(ProductionOrder,SalesHeader);

      // Exercise: Create Warehouse Pick from the Released Production Order.
      CreatePickFromProductionOrder(ProductionOrder,Item2."No.");

      // Verify: Verify that Pick is created successfully from Production Order with Lot Tracking with Reservation.
      VerifyWarehouseActivityLine(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
        WarehouseActivityLine."Action Type"::Take);
      VerifyWarehouseActivityLine(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
        WarehouseActivityLine."Action Type"::Place);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler,ReservationHandler,ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE OutPutFromProductionOrderWithLotTrackingAndReservation@91();
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      ProductionOrder@1004 : Record 5405;
      ItemLedgerEntry@1002 : Record 32;
      ComponentsAtLocation@1001 : Code[10];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and release a Sales Order with reservation. Create Warehouse Shipment.
      // Create Production Order from Sales Order. Create a Warehouse Pick from Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemsAndWarehouseShipmentWithReservationAndTrackingSetup(Item,Item2,SalesHeader,LocationWhite,Quantity);
      CreateProductionOrderFromSalesOrder(ProductionOrder,SalesHeader);
      CreatePickFromProductionOrder(ProductionOrder,Item2."No.");

      // Exercise: Post Output Journal with Lot Tracking.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,Quantity);

      // Verify: Verify the Quantity and Tracking in Item Ledger Entry.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item2."No.",Quantity,TRUE);  // Lot Tracking -TRUE.

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(SerialItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PostOutputFromProductionOrderWithSerialTracking@87();
    VAR
      ProductionOrder@1010 : Record 5405;
      Item@1009 : Record 27;
      Item2@1002 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Setup: Create parent and child Items with Serial Tracking, Create Production BOM and certify it. Update Inventory of the parent Item. Create and refresh a Released Production Order.
      Initialize;
      CreateItemSetupWithSerialTracking(Item,Item2);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(10),'','');

      // Exercise: Create and post and Output Journal for the Production Order.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,ProductionOrder.Quantity);

      // Verify: Verify the Quantity and Serial Tracking in Item Ledger Entry for the posted Output.
      VerifySerialTrackingAndQuantityInItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,Item."No.",1);  // Serial Tracked Quantity.
    END;

    [Test]
    [HandlerFunctions(PostProductionJournalHandler,ConfirmHandler,ProductionJournalPostingMessageHandler)]
    PROCEDURE ConsumptionQuantityInMultiLevelProduction@89();
    VAR
      ProductionBOMHeader@1010 : ARRAY [4] OF Record 99000771;
      Item@1005 : ARRAY [3] OF Record 27;
      ProductionOrder@1007 : Record 5405;
      WarehouseActivityLine@1003 : Record 5767;
      ProdOrderLine@1000 : Record 5406;
      ItemNo@1006 : ARRAY [7] OF Code[20];
      CompItemNo1@1009 : ARRAY [4] OF Code[20];
      CompItemNo2@1008 : ARRAY [4] OF Code[20];
      Quantity@1002 : Integer;
      i@1013 : Integer;
      ConsumptionQty@1014 : ARRAY [4] OF Integer;
      OutputQty@1015 : ARRAY [4] OF Integer;
    BEGIN
      // Setup: Update Components at a Location.
      Initialize;
      UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);

      // Create a Item with multiple level Production BOM:
      // Item1(Item2(Item4(Item6, Item7), Item5)), Item3(Item6, Item7))
      CreateItems(ItemNo);
      CompItemNo1[1] := ItemNo[2];
      CompItemNo2[1] := ItemNo[3];
      CompItemNo1[2] := ItemNo[4];
      CompItemNo2[2] := ItemNo[5];
      CompItemNo1[3] := ItemNo[6];
      CompItemNo2[3] := ItemNo[7];
      CompItemNo1[4] := ItemNo[6];
      CompItemNo2[4] := ItemNo[7];
      Quantity := LibraryRandom.RandInt(5);
      FOR i := 1 TO 4 DO BEGIN
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader[i],CompItemNo1[i],CompItemNo2[i],Quantity);
        UpdateItemProdBOM(ItemNo[i],ProductionBOMHeader[i]."No.");
      END;

      // Update Inventory in Warehouse Item Journal and Item Journal.
      Item[1].GET(ItemNo[5]);
      Item[2].GET(ItemNo[6]);
      Item[3].GET(ItemNo[7]);
      UpdateInventoryInWhseItemJournal(LocationWhite.Code,Item,POWER(Quantity,4) + POWER(Quantity,3));

      // Create and Refresh Production Order, create and register Whse. Pick
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,ItemNo[1],Quantity,LocationWhite.Code,'');
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise: Post Production Journal lines in PostProductionJournalHandler.
      // Verify: Verify Consumption Qty and Output Qty in the Item Ledger Entries after post every production journal line.
      ConsumptionQty[4] := -POWER(Quantity,4);
      ConsumptionQty[3] := -POWER(Quantity,3);
      ConsumptionQty[2] := -POWER(Quantity,3);
      ConsumptionQty[1] := -POWER(Quantity,2);

      OutputQty[4] := POWER(Quantity,3);
      OutputQty[3] := POWER(Quantity,2);
      OutputQty[2] := POWER(Quantity,2);
      OutputQty[1] := Quantity;

      FOR i := 4 DOWNTO 1 DO BEGIN
        ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
        ProdOrderLine.SETRANGE("Item No.",ItemNo[i]);
        ProdOrderLine.FINDFIRST;
        LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");
        VerifyItemLedgerEntries(ItemNo[i],ConsumptionQty[i],OutputQty[i]);
      END;
    END;

    [Test]
    [HandlerFunctions(AssignOrEnterTrackingOnItemTrackingPageHandler)]
    PROCEDURE RegisterWhsePickWithLotTrackingFromProductionOrder@121();
    BEGIN
      Initialize;
      RegisterWhsePickWithTrackingFromProductionOrderByAddAndRemoveComponent(TRUE); // Whse. Pick With Lot Tracking.
    END;

    [Test]
    [HandlerFunctions(AssignOrEnterTrackingOnItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE RegisterWhsePickWithSNTrackingFromProductionOrder@124();
    BEGIN
      Initialize;
      RegisterWhsePickWithTrackingFromProductionOrderByAddAndRemoveComponent(FALSE); // Whse. Pick With Serial Tracking.
    END;

    LOCAL PROCEDURE RegisterWhsePickWithTrackingFromProductionOrderByAddAndRemoveComponent@122(LotTracking@1012 : Boolean);
    VAR
      ParentItem@1010 : Record 27;
      ChildItem@1006 : Record 27;
      ChildItem2@1005 : Record 27;
      Location@1000 : Record 14;
      Bin@1001 : Record 7354;
      Bin2@1004 : Record 7354;
      ProductionOrder@1002 : Record 5405;
      ProdOrderComponent@1008 : Record 5407;
      WarehouseActivityLine@1011 : Record 5767;
      Quantity@1003 : Decimal;
      TrackingAction@1007 : 'AssignSerialNo,AssignLotNo,EnterValues';
    BEGIN
      // Setup: Create parent and child Items with Lot Tracking in a Production BOM and certify it.
      CreateItemSetupWithLotTracking(ChildItem,ParentItem);

      // Create a new Production Order Component with Lot Tracking or Serial Tracking.
      IF LotTracking THEN BEGIN
        CreateItemWithItemTrackingCode(ChildItem2,CreateItemTrackingCode);
        TrackingAction := TrackingAction::AssignLotNo; // Setting tracking action on AssignOrEnterTrackingOnItemTrackingPageHandler for Item Journal Line.
        Quantity := LibraryRandom.RandInt(100);
      END ELSE BEGIN
        CreateItemWithItemTrackingCode(ChildItem2,CreateItemTrackingCodeForSerial);
        TrackingAction := TrackingAction::AssignSerialNo;// Setting tracking action on AssignOrEnterTrackingOnItemTrackingPageHandler for Item Journal Line.
        Quantity := 1; // The values of Quantity is important as the Quantity(Base) of Serial Tracking cannot more than 1.
      END;

      CreateLocationSetupWithBinsAndWhseEmployee(Location,TRUE,TRUE,TRUE,TRUE,TRUE);
      LibraryWarehouse.FindBin(Bin,Location.Code,'',1); // Find Bin of Index 1.
      LibraryWarehouse.FindBin(Bin2,Location.Code,'',2); // Find Bin of Index 2.

      // Post Item Journal with Location, Bin and Lot Tracking or Serial Tracking for the component.
      LibraryVariableStorage.Enqueue(TrackingAction); // Enqueue value for AssignOrEnterTrackingOnItemTrackingPageHandler.
      CreateAndPostItemJournalLine(ChildItem2."No.",Quantity,Bin.Code,Location.Code,TRUE); // Using Tracking TRUE.

      // Create and refresh a Released Production order.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",Quantity,Location.Code,'');

      // Find Component. Add a new Component with Bin and Lot Tracking or Serial Tracking for the Production Order.
      AddProductionOrderComponentWithBin(ProdOrderComponent,ProductionOrder."No.",ChildItem2."No.",Location.Code,Bin2.Code);

      TrackingAction := TrackingAction::EnterValues;
      LibraryVariableStorage.Enqueue(TrackingAction); // Enqueue value for AssignOrEnterTrackingOnItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(Quantity); // Enqueue value for AssignOrEnterTrackingOnItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(ChildItem2."No."); // Enqueue value for AssignOrEnterTrackingOnItemTrackingPageHandler.
      ProdOrderComponent.OpenItemTrackingLines;

      // Remove the original Component.
      RemoveProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.",ChildItem."No.");

      // Create Wharehouse Pick from the Production Order.
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // Exercise and Verify: Register the Pick and verify no error pops up.
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",WarehouseActivityLine."Action Type"::Take);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler2)]
    PROCEDURE RegisterPickPartiallyWithSameLotNo@134();
    VAR
      Bin@1000 : Record 7354;
      Bin2@1009 : Record 7354;
      Item@1002 : Record 27;
      ChildItem@1010 : Record 27;
      Item2@1001 : Record 27;
      ProductionOrder@1005 : Record 5405;
      WarehouseActivityLine@1006 : Record 5767;
      RegisteredWhseActivityLine@1007 : Record 5773;
      Quantity@1003 : ARRAY [3] OF Decimal;
      SumQuantity@1012 : ARRAY [2] OF Decimal;
      ActionType@1004 : ',Take,Place';
      i@1011 : Integer;
      PutAway@1013 : Boolean;
      Pick@1014 : Boolean;
    BEGIN
      // Setup: Setup Location and Bin. Create Item With Item Tracking Code.
      Initialize;

      // Save them before updating for tearing down.
      LocationSilver.GET(LocationSilver.Code);
      PutAway := LocationSilver."Require Put-away";
      Pick := LocationSilver."Require Pick";

      UpdateLocation(LocationSilver,TRUE,TRUE,TRUE,TRUE,TRUE);
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1); // Find Bin of Index 1.
      LibraryWarehouse.FindBin(Bin2,LocationSilver.Code,'',2); // Find Bin of Index 2.

      // Create three Items.
      CreateItemSetupWithLotTracking(ChildItem,Item);
      CreateItemWithItemTrackingCode(Item2,CreateItemTrackingCode);

      // Create Warehouse Journal Line and assign Tracking on it.
      Quantity[1] := LibraryRandom.RandIntInRange(100,200);
      Quantity[2] := Quantity[1] - LibraryRandom.RandInt(40);
      Quantity[3] := LibraryRandom.RandInt(2);
      LibraryVariableStorage.Enqueue(Quantity[1]);
      CreateAndPostItemJournalLine(Item2."No.",Quantity[1],Bin.Code,LocationSilver.Code,TRUE); // Using Tracking TRUE.

      // Create Released Production Order. Add component for the Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity[3],LocationSilver.Code,Bin.Code);
      CreateProdOrderComponent(ProductionOrder,Item2."No.",Quantity[1] / Quantity[3],LocationSilver.Code,Bin2.Code);

      // Create Warehouse Pick from the Released Production Order.
      CreatePickFromProductionOrder(ProductionOrder,Item."No.");

      // Exercise: Update Lot No. and Qty. To Handle on Warehouse Activity Line for partial registering.
      FOR ActionType := RegisteredWhseActivityLine."Action Type"::Take TO RegisteredWhseActivityLine."Action Type"::Place DO
        UpdateLotNoAndQtyToHandleOnWarehouseActivityLine(Item2."No.",ProductionOrder."No.",ActionType,Quantity[2]);

      // Partial register pick.
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",
        WarehouseActivityLine."Action Type"::Take);

      // Register the rest of pick.
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",
        WarehouseActivityLine."Action Type"::Take);

      // Verify: Verify the Registered Warehouse Activity Lines and total quantity.
      FOR ActionType := RegisteredWhseActivityLine."Action Type"::Take TO RegisteredWhseActivityLine."Action Type"::Place DO
        FOR i := 1 TO 2 DO BEGIN
          SumQuantity[i] :=
            VerifyRegisteredWhseActivityLineAndCalcTotalQty(
              RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",Item2."No.",ActionType);
          Assert.AreEqual(Quantity[1],SumQuantity[i],PickErr);
        END;

      // Tear Down.
      UpdateLocation(
        LocationSilver,PutAway,Pick,LocationSilver."Require Receive",
        LocationSilver."Require Shipment",LocationSilver."Bin Mandatory");
    END;

    [Test]
    [HandlerFunctions(CalculateStandardCostMenuHandler,AssignOrEnterTrackingOnItemTrackingPageHandler,ItemTrackingSummaryHandler,QuantityToCreatePageHandler,ConfirmHandler,AdjustCostItemEntriesHandler)]
    PROCEDURE CostAmountActualForOutputEntriesWithSerialNoTracking@154();
    VAR
      Item@1005 : Record 27;
      ChildItem@1001 : Record 27;
      ProductionBOMHeader@1010 : Record 99000771;
      ProductionOrder@1007 : Record 5405;
      Quantity@1002 : Integer;
      TrackingAction@1000 : 'AssignSerialNo,AssignLotNo,EnterValues,SelectEntries';
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries] [Item Tracking]
      // [SCENARIO] Verify Cost Amount (Actual) in ILEs after: create and refresh Production Order, post Output Journal (with assigned Serial No.), then post Item Journal fpr Sale with Tracking, then finish Production Order and run Adjust Cost.

      Initialize;

      // [GIVEN] Create a Item with Production BOM and Routing.
      CreateItemWithProductionBOMAndRouting(Item,ChildItem,ProductionBOMHeader);

      // [GIVEN] Update Inventory for ChildItem by Item Journal
      Quantity := 17;  // 17 is very important for this case - also you can use other prime - make system to generate 17 item generate ledger entries and there is a rounding difference.
      CreateAndPostItemJournalLine(ChildItem."No.",Quantity,'','',FALSE);

      // [GIVEN] Create and Refresh Production Order, Post output journal
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,'','');
      LibraryVariableStorage.Enqueue(TrackingAction::AssignSerialNo);  // Enqueue for AssignOrEnterTrackingOnItemTrackingPageHandler.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,ProductionOrder.Quantity);

      // [GIVEN] Post Item Journal for Sale
      LibraryVariableStorage.Enqueue(TrackingAction::SelectEntries);  // Enqueue for AssignOrEnterTrackingOnItemTrackingPageHandler.
      CreateAndPostItemJournalLineForSaleWithItemTracking(Item."No.",Quantity,LibraryRandom.RandInt(1000));

      // [GIVEN] Change Status to Finish
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // [WHEN] Run Adjust Cost - Item Entries
      RunAdjustCostItemEntries(Item."No.");

      // [THEN] Cost Amount (Actual) in Item Ledger Entries are correct - the difference between maximum value and minimum must equal or less than 0.01
      VerifyItemLedgerEntriesForCostAmountActual(Item."No.");
    END;

    [Test]
    [HandlerFunctions(ProdBOMMatrixPerVersionHandler,ShowMatrixHandler)]
    PROCEDURE ShowMatrixWithMaxLengthOfDescription@156();
    VAR
      Item@1004 : Record 27;
      ProductionBOM@1002 : TestPage 99000786;
      ItemNo@1003 : Code[20];
    BEGIN
      // Setup: Create parent and child Item, create Production BOM.
      Initialize;
      ItemNo := CreateItemsSetup(Item);
      LibraryVariableStorage.Enqueue(ItemNo); // Enqueue variable for ShowMatrixHandler.
      UpdateProductionBOMDescription(Item."Production BOM No."); // Required for test.

      // Exercise: Open Matrix per Version on Production BOM page.
      ProductionBOM.OPENEDIT;
      ProductionBOM.FILTER.SETFILTER("No.",Item."Production BOM No.");
      ProductionBOM.Action10.INVOKE; // To invoke ProdBOMMatrixPerVersionHandler.

      // Verify: Verify the Item No. through ShowMatrixHandler.
    END;

    [Test]
    [HandlerFunctions(WhereUsedHandler)]
    PROCEDURE WhereUsedWithMaxLengthOfDescription@146();
    VAR
      Item@1004 : Record 27;
      ProductionBOM@1002 : TestPage 99000786;
    BEGIN
      // Setup: Create parent and child Item, create Production BOM.
      Initialize;
      CreateItemsSetup(Item);
      LibraryVariableStorage.Enqueue(Item."No."); // Enqueue variable for WhereUsedHandler.
      UpdateProductionBOMDescription(Item."Production BOM No."); // Required for test.

      // Exercise: Open Where-Used on Production BOM page.
      ProductionBOM.OPENEDIT;
      ProductionBOM.FILTER.SETFILTER("No.",Item."Production BOM No.");
      ProductionBOM.Action21.INVOKE; // To invoke WhereUsedHandler.

      // Verify: Verify the Item No. through WhereUsedHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE FinishProdOrderBeforeInventoryPickPosted@161();
    VAR
      Item@1009 : Record 27;
      Location@1001 : Record 14;
      ProdOrderRoutingLine@1008 : Record 5409;
      ProductionOrder@1002 : Record 5405;
      WarehouseActivityLine@1004 : Record 5767;
      RoutingHeader@1000 : Record 99000763;
      ComponentsAtLocation@1005 : Code[10];
    BEGIN
      // [FEATURE] [Production] [Warehouse]
      // [SCENARIO] Verify error on finishing Production Order having Inventory Pick for component.

      // [GIVEN] Create Location with "Require Pick"=TRUE. Update Components at a Location.
      Initialize;
      CreateLocationSetupWithBinsAndWhseEmployee(Location,FALSE,TRUE,FALSE,FALSE,FALSE);
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(Location.Code);

      // [GIVEN] Parent and child Item, create Production BOM. Create Routing Setup and update Routing on Item.
      CreateItemsSetupWithRoutingAndBOM(Item,RoutingHeader,Location.Code,LibraryRandom.RandIntInRange(5,10));

      // [GIVEN] Released Production order. Modify Routing Link Code of Components. Modify the Flushing Method as backward for routing line.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5),Location.Code,'');

      UpdateRoutingLine(RoutingHeader,UpdateRoutingLinkOnProdOrderComponent(ProductionOrder."No."));
      UpdateProdOrderRoutingLine(
        ProdOrderRoutingLine,ProductionOrder."No.",ProdOrderRoutingLine."Flushing Method"::Backward);

      // [GIVEN] Create Inventory Pick from the Released Production Order.
      LibraryVariableStorage.Enqueue(PickActivitiesCreated); // Enqueue variable required inside MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // [WHEN] Finish the Released Prod. Order.
      ASSERTERROR LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // [THEN] Verify the warning message through ConfirmHandlerForFinish.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,FinishOrderErr) > 0,ErrorWrongMsg);

      // Tear down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler)]
    PROCEDURE ReserveFromCurrentLineTwiceOnSalesOrder@183();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1005 : Record 37;
      ItemJournalLine@1001 : Record 83;
      Quantity@1009 : Decimal;
      Quantity2@1002 : Decimal;
    BEGIN
      // Test to verify an error message pops up when clicking Reserve From Current Line
      // at the 2nd time when there is nothing availalbe to reserve.

      // Setup: Create Item. Add inventory for Item.
      Initialize;
      ItemJournalLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandIntInRange(40,50);
      Quantity2 := LibraryRandom.RandIntInRange(10,20);
      UpdateInventoryUsingWhseJournal(LocationWhite,Item,Quantity);

      // Create 1st Sales Order. Create Pick from Sales Order.
      CreatePickFromSalesOrder(SalesHeader,Item."No.",Quantity2,LocationWhite.Code);

      // Create 2nd Sales Order. Create Pick from Sales Order. The Quantity should be greater than the available qty.
      // Reserve Item for 2nd Sales Order by clicking Reserve From Current Line in CancelReservationPageHandler.
      CreatePickFromSalesOrder(
        SalesHeader,Item."No.",Quantity - Quantity2 + LibraryRandom.RandInt(10),LocationWhite.Code);
      FindSalesLine(SalesLine,SalesHeader."No.",Item."No.");
      SalesLine.ShowReservation;

      // Exercise & Verify: Reserve the Item for 2nd Sales Order by clicking Reserve From Current Line again
      // in CancelReservationPageHandler. Verify the error message pops up when clicking
      // Reserve From Current Line at the 2nd time when there is nothing availalbe to reserve.
      // Clear Counter to click Reserve From Current Line again.
      CLEAR(Counter);
      ASSERTERROR SalesLine.ShowReservation;
      Assert.ExpectedError(NothingAvailableToReserveErr);
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE ChangeStartingDateInProdOrderRoutingLine@299();
    VAR
      SalesLine@1002 : Record 37;
      ProdOrderRoutingLine@1001 : Record 5409;
      ProdOrderNo@1000 : Code[20];
    BEGIN
      // Verify that error "date conflict with existing reservations" pops up when changing Starting Date in Prod. Order Routing line.

      // Setup: Create and refresh a Released production Order with Routing Line. Create Sales Order and reserve with Production Order
      Initialize;
      ProdOrderNo := ReserveSalesOrderWithProdOrder(SalesLine);

      // Exercise: Change Starting Date in Prod. Order Routing line
      // Verify: Verify the error pops up when changing leads to a date conflict with existing reservations.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo);
      ASSERTERROR ProdOrderRoutingLine.VALIDATE("Starting Date",SalesLine."Shipment Date");
      Assert.ExpectedError(DateConflictWithExistingReservationsErr);
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE ChangeSetupTimeInProdOrderRoutingLine@174();
    VAR
      SalesLine@1002 : Record 37;
      ProdOrderRoutingLine@1001 : Record 5409;
      ProdOrderNo@1000 : Code[20];
    BEGIN
      // Verify that error "date conflict with existing reservations" pops up when changing Setup Time in Prod. Order Routing line.

      // Setup: Create and refresh a Released production Order with Routing Line. Create Sales Order and reserve with Production Order
      Initialize;
      ProdOrderNo := ReserveSalesOrderWithProdOrder(SalesLine);

      // Exercise: Change Setup Time in Prod. Order Routing line
      // Verify: Verify the error pops up when changing leads to a date conflict with existing reservations.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo);
      ASSERTERROR ProdOrderRoutingLine.VALIDATE(
          "Setup Time",ProdOrderRoutingLine."Setup Time" * LibraryRandom.RandIntInRange(1000,2000));
      Assert.ExpectedError(DateConflictWithExistingReservationsErr);
    END;

    [Test]
    PROCEDURE ProdOrderComponentForReleasedProdOrder@173();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      QtyPer@1000 : Integer;
    BEGIN
      // Test to verify Quantity Per and Expected Quantity are correct on Prod. Order Component for Released Production Order.

      // Setup: Create parent and child Item, create Production BOM. Update UOM and Quantity Per on Production BOM.
      Initialize;
      QtyPer := LibraryRandom.RandIntInRange(80,100);
      CreateItemsSetup(Item);
      UpdateItemProdBOMUOMAndQtyPer(Item,2083,2083 * QtyPer); // Values are important for reproducing the rounding issue.

      // Exercise: Create and refresh a Released Production Order.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(100),'','');

      // Verify: Verify the Quantity Per and Expected Quantity on Production Order Component.
      // "Quantity Per" = 2083 * QtyPer(qty per in the production BOM) / 2083 (qty per of new Item uom) = QtyPer
      // "Expected Quantity" = QtyPer * ProductionOrder.Quantity
      VerifyQtyOnProdOrderComponent(ProductionOrder."No.",QtyPer,QtyPer * ProductionOrder.Quantity);
    END;

    [Test]
    PROCEDURE PlanningComponentForPlanningWorksheetLine@192();
    VAR
      SalesHeader@1001 : Record 36;
      Item@1004 : Record 27;
      ComponentItemNo@1008 : Code[20];
      QtyPer@1000 : Integer;
      SalesOrderQty@1002 : Integer;
    BEGIN
      // Test to verify Quantity Per and Expected Quantity are correct on Planning Component for Planning Worksheet line.

      // Setup: Create parent with Planning Parameters and child Item, create Production BOM. Update UOM and Quantity Per on Production BOM.
      Initialize;
      QtyPer := LibraryRandom.RandIntInRange(80,100);
      SalesOrderQty := LibraryRandom.RandInt(100);
      ComponentItemNo := UpdateItemPlanningParameters(Item);
      UpdateItemProdBOMUOMAndQtyPer(Item,2083,2083 * QtyPer); // Values are important for reproducing the rounding issue.

      // Create and release Sales Order.
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",SalesOrderQty,'');

      // Exercise: Calculate Regenerative Plan through Planning Worksheet on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify the Quantity Per and Expected Quantity on Planning Component.
      // "Quantity Per" = 2083 * QtyPer(qty per in the production BOM) / 2083 (qty per of new Item uom) = QtyPer
      // "Expected Quantity" = QtyPer * SalesOrderQty(Qty of Sales Order)
      VerifyQtyOnPlanningComponent(ComponentItemNo,QtyPer,QtyPer * SalesOrderQty);
    END;

    [Test]
    [HandlerFunctions(CancelReservationPageHandler,PostProductionJournalHandler,ProdJnlPostConfirmHandler,MessageHandler)]
    PROCEDURE CheckSelfReservedQty@175();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      ProductionOrder@1005 : Record 5405;
      ProdOrderComponent@1008 : Record 5407;
      ItemNo@1001 : Code[20];
      Quantity@1002 : Decimal;
    BEGIN
      Initialize;
      UpdateManufacturingSetupComponentsAtLocation(LocationGreen.Code);
      ItemNo := CreateItemsSetup(Item);
      Quantity := LibraryRandom.RandInt(100);

      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LocationGreen.Code,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,LocationGreen.Code,'');
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;

      // Verify that Production Journal is succesfully posted
      // Verify that there's no confirm negative adjustment warning in ProdJnlPostConfirmHandler confirm Handler
      LibraryVariableStorage.Enqueue(JournalLinesPostedMsg);
      OpenProductionJournal(ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE ChangeBinCodeForPick@99();
    VAR
      Zone@1004 : Record 7300;
      Bin@1002 : Record 7354;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      WhseShipmentHeader@1011 : Record 7320;
      WhseActivityHeader@1008 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      WarehousePick@1009 : TestPage 5779;
      ItemNo@1000 : Code[20];
      WhseShipmentHeaderNo@1010 : Code[20];
      Qty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Bin] [Reservation]
      // [SCENARIO 376801] Can change Bin code in Pick line, if Item is reserved and stock is available.

      // [GIVEN] Item on hand in two bins in Warehouse Location, each of Quantity "Q".
      Initialize;
      WarehouseJournalSetup(LocationWhite.Code);

      ItemNo := LibraryInventory.CreateItemNo;
      Qty := LibraryRandom.RandDec(10,2);

      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,1); // Find first Bin
      AddWarehouseInventory(ItemNo,Qty,Bin);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,2); // Find second Bin
      AddWarehouseInventory(ItemNo,Qty,Bin);

      // [GIVEN] Create Sales Order of Quantity "Q", reserve.
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Qty,LocationWhite.Code);
      SalesLine.ShowReservation;

      // [GIVEN] Release Sales Order, create Warehouse Shipment, create Pick.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WhseShipmentHeaderNo :=
        LibraryWarehouse.FindWhseShipmentNoBySourceDoc(
          DATABASE::"Sales Line",SalesHeader."Document Type",SalesHeader."No.");
      WhseShipmentHeader.GET(WhseShipmentHeaderNo);
      LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);

      WITH WhseActivityLine DO BEGIN
        // [GIVEN] Set "Qty. to Handle" to "Q".
        FindWarehouseActivityLine(
          WhseActivityLine,SalesHeader."No.","Source Document"::"Sales Order","Action Type"::Take);
        SETRANGE("Action Type");
        MODIFYALL("Qty. to Handle",Qty);

        // [WHEN] Try to change Bin Code.
        LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,1); // Specific value
        FindWarehouseActivityHeader(
          WhseActivityHeader,SalesHeader."No.","Source Document"::"Sales Order","Action Type"::Take);
        CLEAR(WarehousePick);
        WarehousePick.OPENEDIT;
        WarehousePick.GOTORECORD(WhseActivityHeader);
        WarehousePick.WhseActivityLines."Bin Code".SETVALUE(Bin.Code);

        // [THEN] Bin code successfully changed.
        FindWarehouseActivityLine(
          WhseActivityLine,SalesHeader."No.","Source Document"::"Sales Order","Action Type"::Take);
        TESTFIELD("Bin Code",Bin.Code);
      END;
    END;

    [Test]
    PROCEDURE ReservedAndPickedComponentsConsideredInAvailableToPickCalculation@102();
    VAR
      ComponentItem@1000 : Record 27;
      ParentItem@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      Zone@1003 : Record 7300;
      Bin@1004 : Record 7354;
      ProductionOrder@1005 : Record 5405;
      WhseActivityLine@1008 : Record 5767;
      WhseWorksheetLine@1009 : Record 7326;
      ProdOrderQty@1006 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Bin] [Production]
      // [SCENARIO 378145] Components reserved and picked for active production order should be considered when calculating quantity available to pick

      Initialize;

      // [GIVEN] Component item "CI"
      LibraryInventory.CreateItem(ComponentItem);
      ComponentItem.VALIDATE(Reserve,ComponentItem.Reserve::Always);
      ComponentItem.MODIFY(TRUE);
      FindZone(Zone,LocationWhite.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,1);
      // [GIVEN] Location "L" with directed put-away and pick
      WarehouseJournalSetup(LocationWhite.Code);

      // [GIVEN] Post positive adjustment of 100 pcs of item "CI" on location "L"
      ProdOrderQty[1] := LibraryRandom.RandIntInRange(50,100);
      ProdOrderQty[2] := LibraryRandom.RandIntInRange(50,100);
      AddWarehouseInventory(ComponentItem."No.",ProdOrderQty[1] + ProdOrderQty[2],Bin);

      // [GIVEN] Manufactured item "MI" with "CI" as a component
      CreateCertifiedProductionBOM(ProductionBOMHeader,ComponentItem,FALSE);
      CreateProductionItem(ParentItem,ProductionBOMHeader."No.");

      // [GIVEN] Create production order "PO1" for 65 pcs of item "MI" and reserve component
      CreateProdOrderWithAutoreservedComponent(ProductionOrder,ParentItem."No.",ProdOrderQty[1],LocationWhite.Code);

      // [GIVEN] Create and register warehouse pick from production order "PO1"
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      RegisterWarehouseActivity(
        ProductionOrder."No.",WhseActivityLine."Source Document"::"Prod. Consumption",WhseActivityLine."Action Type"::Take);

      // [GIVEN] Create production order "PO2" for 35 pcs of item "MI" and reserve component
      CreateProdOrderWithAutoreservedComponent(ProductionOrder,ParentItem."No.",ProdOrderQty[2],LocationWhite.Code);
      // [GIVEN] Create pick worksheet line from prod. order "PO2"
      CreatePickWorksheetLineFromProdOrder(WhseWorksheetLine,ProductionOrder.Status,ProductionOrder."No.",LocationWhite.Code);

      // [WHEN] Create warehouse pick from pick worksheet
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetLine."Worksheet Template Name",LocationWhite.Code,
        LocationWhite.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);

      // [THEN] Warehouse pick for 35 pcs of item "CI" successfully created
      VerifyWarehouseActivityLine(
        ProductionOrder."No.",WhseActivityLine."Source Document"::"Prod. Consumption",
        ComponentItem."No.",ProdOrderQty[2],WhseActivityLine."Action Type"::Take);
      VerifyWarehouseActivityLine(
        ProductionOrder."No.",WhseActivityLine."Source Document"::"Prod. Consumption",
        ComponentItem."No.",ProdOrderQty[2],WhseActivityLine."Action Type"::Place);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingPageHandler,DummyMessageHandler)]
    PROCEDURE QtyInMoveToBinShouldNotReduceQuantityAvailableToPick@123();
    VAR
      Item@1001 : Record 27;
      Location@1000 : Record 14;
      Zone@1003 : Record 7300;
      FromBin@1004 : Record 7354;
      ToBin@1008 : Record 7354;
      BinContent@1002 : Record 7302;
      ReplenishQty@1005 : Decimal;
      LotNo@1006 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Warehouse] [Bin] [Movement Worksheet] [FEFO]
      // [SCENARIO 308293] When creating a warehouse movement from movement worksheet, quantity available on bin being replenished should not be included in total available to pick

      Initialize;

      // [GIVEN] Item with lot no. tracking
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCode);
      // [GIVEN] WMS location with FEFO pick
      CreateFEFOLocation(Location);

      // [GIVEN] Pick bin "B1" with "Minimum Qty."
      // [GIVEN] Pick bin "B2" without quantity setup
      ReplenishQty := LibraryRandom.RandIntInRange(50,100);
      FindZone(Zone,Location.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      LibraryWarehouse.FindBin(ToBin,Location.Code,Zone.Code,1);
      LibraryWarehouse.FindBin(FromBin,Location.Code,Zone.Code,2);
      ToBin.VALIDATE("Bin Ranking",FromBin."Bin Ranking" + 1);
      ToBin.MODIFY(TRUE);
      CreateBinContent(BinContent,ToBin,Item,ReplenishQty,ReplenishQty * 3,ToBin."Bin Ranking");

      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      WarehouseJournalSetup(Location.Code);
      // [GIVEN] Post postive adjustment on "B2", expiration date = WORKDATE, quantity = "X", lot no. = "L1"
      PostWhsePositiveAdjmtWithLotExpirationDate(Location.Code,FromBin,Item."No.",ReplenishQty,LotNo[1],WORKDATE);
      // [GIVEN] Post postive adjustment on "B2", expiration date = WORKDATE + 1, quantity = "X", lot no. = "L2"
      PostWhsePositiveAdjmtWithLotExpirationDate(Location.Code,FromBin,Item."No.",ReplenishQty,LotNo[2],WORKDATE + 1);
      // [GIVEN] Post postive adjustment on "B1", quantity is below minimum quantity for this bin
      PostWhsePositiveAdjmtWithLotExpirationDate(Location.Code,ToBin,Item."No.",ReplenishQty / 2,LotNo[1],WORKDATE);

      CalculateAndPostWarehouseAdjustment(Item."No.");

      // [WHEN] Calculate and carry out replenishment for bin "B1"
      CalculateBinReplenishment(BinContent);

      // [THEN] Warehouse movement with 2 activities created. First line: quantity = "X", lot no. = "L1", second line: quantity = "X", lot no. = "L2"
      VerifyWarehouseActivityLineLot(Location.Code,Item."No.",LotNo[1],ReplenishQty);
      VerifyWarehouseActivityLineLot(Location.Code,Item."No.",LotNo[2],ReplenishQty);
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(Counter);
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      ConsumptionJournalSetup;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");
    END;

    LOCAL PROCEDURE CalculateAndPostWarehouseAdjustment@152(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      Item.SETRANGE("No.",ItemNo);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required to avoid the Document No mismatch.
    END;

    LOCAL PROCEDURE CalculateBinReplenishment@234(BinContent@1003 : Record 7302);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
      WhseWorksheetName@1001 : Record 7327;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Movement);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,BinContent."Location Code");
      LibraryWarehouse.CalculateBinReplenishment(BinContent,WhseWorksheetName,BinContent."Location Code",FALSE,TRUE,FALSE);
      LibraryWarehouse.CreateWhseMovement(WhseWorksheetName.Name,BinContent."Location Code",0,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@137();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateAndUpdateLocation(LocationGreen,FALSE,FALSE,FALSE,FALSE,FALSE);  // Location Green.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);

      CreateAndUpdateLocation(LocationSilver,TRUE,TRUE,FALSE,FALSE,TRUE);  // Location Silver.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value  required for Number of Bins.

      LibraryWarehouse.CreateFullWMSLocation(LocationWhite,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);

      CreateAndUpdateLocation(LocationRed,FALSE,FALSE,FALSE,FALSE,TRUE);  // Location Red.
      LibraryWarehouse.CreateNumberOfBins(LocationRed.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value  required for Number of Bins.

      CreateAndUpdateLocation(LocationRed2,FALSE,FALSE,FALSE,FALSE,TRUE);  // Location Red2.
      LibraryWarehouse.CreateNumberOfBins(LocationRed2.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value  required for Number of Bins.

      CreateAndUpdateLocation(LocationYellow,TRUE,TRUE,TRUE,TRUE,FALSE);  // Location Yellow.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationSetupWithBinsAndWhseEmployee@130(VAR Location@1007 : Record 14;RequirePutAway@1006 : Boolean;RequirePick@1005 : Boolean;RequireReceive@1004 : Boolean;RequireShipment@1003 : Boolean;BinMandatory@1000 : Boolean);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      CreateAndUpdateLocation(Location,RequirePutAway,RequirePick,RequireReceive,RequireShipment,BinMandatory); // Location require Putaway, Pick, Receive, ship and Bin Mandatory.
      LibraryWarehouse.CreateNumberOfBins(Location.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE); // Value required for Number of Bins.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE NoSeriesSetup@2();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesSetup@1004 : Record 311;
      WarehouseSetup@1001 : Record 5769;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);
    END;

    LOCAL PROCEDURE ItemJournalSetup@3();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",'');  // Value required to avoid the Document No mismatch.
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@81();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@205(LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@17();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE AssignNoSeriesForItemJournalBatch@118(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AcceptActionMessage@63(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AcceptAndCarryOutActionMessage@95(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      AcceptActionMessage(ItemNo);
      SelectRequisitionLine(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE AutoReserveProdOrderComponent@221(ProdOrderLine@1001 : Record 5406);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE(Status,ProdOrderLine.Status);
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        FINDFIRST;
        AutoReserve;
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@138(VAR Location@1004 : Record 14;RequirePutAway@1000 : Boolean;RequirePick@1001 : Boolean;RequireReceive@1003 : Boolean;RequireShipment@1005 : Boolean;BinMandatory@1002 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      UpdateLocation(Location,RequirePutAway,RequirePick,RequireReceive,RequireShipment,BinMandatory);
    END;

    LOCAL PROCEDURE CreateItemAndUpdateInventory@23(VAR Item@1001 : Record 27;Quantity@1000 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemJournalLine(ItemJournalLine,Item."No.",Quantity,'','');
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@42(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;BinCode@1004 : Code[20];LocationCode@1000 : Code[10]);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@12(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateBinContent@229(VAR BinContent@1000 : Record 7302;Bin@1001 : Record 7354;Item@1002 : Record 27;MinQty@1004 : Decimal;MaxQty@1005 : Decimal;BinRanking@1003 : Integer);
    BEGIN
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Fixed,TRUE);
      BinContent.VALIDATE("Min. Qty.",MinQty);
      BinContent.VALIDATE("Max. Qty.",MaxQty);
      BinContent.VALIDATE("Bin Ranking",BinRanking);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFEFOLocation@240(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderWithAutoreservedComponent@227(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,SourceNo,Quantity,LocationCode,'');
      FindProductionOrderLine(ProdOrderLine,SourceNo);
      AutoReserveProdOrderComponent(ProdOrderLine);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@14(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@15(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,0D);
    END;

    LOCAL PROCEDURE CreateItemsSetup@79(VAR Item@1005 : Record 27) : Code[20];
    VAR
      Item2@1001 : Record 27;
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Child Item.
      CreateItemAndUpdateInventory(Item2,LibraryRandom.RandDec(100,2));

      // Create Production BOM, Parent item and Attach Production BOM.
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,FALSE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
      EXIT(Item2."No.");
    END;

    LOCAL PROCEDURE CreateItemsSetupWithRoutingAndBOM@162(VAR Item@1005 : Record 27;VAR RoutingHeader@1006 : Record 99000763;LocationCode@1002 : Code[10];Quantity@1004 : Decimal);
    VAR
      Item2@1001 : Record 27;
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Child Item.
      LibraryInventory.CreateItem(Item2);
      CreateAndPostItemJournalLine(Item2."No.",Quantity,'',LocationCode,FALSE); // Using Tracking FALSE

      // Create Production BOM, Parent item and Attach Production BOM.
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,FALSE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");

      // Create Routing and attach Routing for Parent Item.
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
    END;

    LOCAL PROCEDURE CreateCertifiedProductionBOM@29(VAR ProductionBOMHeader@1001 : Record 99000771;Item@1002 : Record 27;UseRoutingLink@1003 : Boolean) : Code[10];
    VAR
      ProductionBOMLine@1000 : Record 99000772;
      RoutingLink@1004 : Record 99000777;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);  // Value important.
      IF UseRoutingLink THEN BEGIN
        RoutingLink.FINDFIRST;
        ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLink.Code);
        ProductionBOMLine.MODIFY(TRUE);
      END;
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      EXIT(ProductionBOMLine."Routing Link Code");
    END;

    LOCAL PROCEDURE CreateProductionItem@34(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@46(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItemSetupWithLotTracking@20(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCode);
      CreateItemWithItemTrackingCode(Item2,CreateItemTrackingCode);
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item,FALSE);
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@13(VAR Item@1001 : Record 27;ItemTrackingCode@1002 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOMAndRouting@190(VAR Item@1005 : Record 27;VAR ChildItem@1001 : Record 27;VAR ProductionBOMHeader@1010 : Record 99000771);
    VAR
      RoutingHeader@1002 : Record 99000763;
      CalculateStandardCost@1000 : Codeunit 5812;
      CalcLevel@1003 : ',SingleLevel,MultiLevel';
    BEGIN
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCodeForSerial);
      LibraryInventory.CreateItem(ChildItem);
      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,ChildItem."No.",LibraryRandom.RandInt(10));
      CreateRouting(
        RoutingHeader,LibraryRandom.RandDec(50,2),LibraryRandom.RandDec(50,2),
        LibraryRandom.RandInt(10),LibraryRandom.RandInt(10));
      WITH Item DO BEGIN
        VALIDATE("Costing Method","Costing Method"::Standard);
        VALIDATE("Indirect Cost %",LibraryRandom.RandInt(10));
        VALIDATE("Replenishment System","Replenishment System"::"Prod. Order");
        VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
        VALIDATE("Routing No.",RoutingHeader."No.");
        MODIFY(TRUE);
      END;
      ChildItem.VALIDATE("Unit Cost",LibraryRandom.RandDec(10000,5));
      ChildItem.MODIFY(TRUE);

      LibraryVariableStorage.Enqueue(CalcLevel::MultiLevel); // Enqueue for CalculateStandardCostMenuHandler, Calculate Standard Cost for All Level.
      CalculateStandardCost.CalcItem(Item."No.",FALSE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@22() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateWarehousePickfromProductionOrderSetup@129(VAR Item@1000 : Record 27;VAR Item2@1002 : Record 27;VAR ProductionOrder@1001 : Record 5405;Quantity@1003 : Decimal);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationWhite.Code,
        LocationWhite."To-Production Bin Code");
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      UpdateLotNoAndQtyToHandleOnWarehouseActivityLine(
        Item."No.",ProductionOrder."No.",WarehouseActivityLine."Action Type"::Place,Quantity);
      UpdateLotNoAndQtyToHandleOnWarehouseActivityLine(
        Item."No.",ProductionOrder."No.",WarehouseActivityLine."Action Type"::Take,Quantity);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournalWithItemTracking@86(ProductionOrderNo@1001 : Code[20];Tracking@1002 : Boolean;Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ProductionOrderNo);
      SelectItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      IF Tracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      ItemJournalLine.VALIDATE(Quantity,Quantity);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournalWithItemTracking@142(ProductionOrderNo@1000 : Code[20];PostJournal@1001 : Boolean);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      SelectItemJournalLine(ItemJournalLine,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      IF PostJournal THEN
        LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithExlpodeRouting@155(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE CreatePickWorksheetLineFromProdOrder@231(VAR WhseWorksheetLine@1003 : Record 7326;ProdOrderStatus@1000 : Option;ProdOrderNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      WhsePickRequest@1004 : Record 7325;
    BEGIN
      WhsePickRequest.GET(WhsePickRequest."Document Type"::Production,ProdOrderStatus,ProdOrderNo,LocationCode);
      LibraryWarehouse.GetWhseDocsPickWorksheet(WhseWorksheetLine,WhsePickRequest,LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@271(VAR Item@1006 : ARRAY [3] OF Record 27;Quantity@1002 : Decimal;Location@1004 : Record 14);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      Bin@1003 : Record 7354;
      i@1007 : Integer;
    BEGIN
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);
      LibraryVariableStorage.Enqueue(Quantity);

      FOR i := 1 TO 3 DO
        LibraryWarehouse.CreateWhseJournalLine(
          WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,
          Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item[i]."No.",Quantity);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLineAndAssignTracking@88(VAR Item@1001 : Record 27;Quantity@1002 : Decimal;Location@1004 : Record 14);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      Bin@1003 : Record 7354;
    BEGIN
      Bin.GET(Location.Code,Location."Cross-Dock Bin Code");
      LibraryVariableStorage.Enqueue(FORMAT(Quantity));
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,Bin."Zone Code",
        Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      WarehouseJournalLine.OpenItemTrackingLines;  // Assign Lot No through WhseItemTrackingPageHandler.
    END;

    LOCAL PROCEDURE CreateWorkCenter@70(VAR WorkCenter@1001 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateRouting@194(VAR RoutingHeader@1001 : Record 99000763;DirectUnitCost@1005 : Decimal;OverheadRate@1002 : Decimal;SetupTime@1007 : Decimal;RunTime@1008 : Decimal);
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      OperationNo@1006 : Code[10];
    BEGIN
      ManufacturingSetup.GET;

      CreateWorkCenter(WorkCenter);
      WorkCenter.VALIDATE("Direct Unit Cost",DirectUnitCost);
      WorkCenter.VALIDATE("Overhead Rate",OverheadRate);
      WorkCenter.MODIFY(TRUE);

      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      // Random value used so that the Next Operation No is greater than the previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLineSetup(RoutingLine,RoutingHeader,WorkCenter."No.",OperationNo,SetupTime,RunTime);

      // Certify Routing after Routing lines creation.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CreateRoutingAndUpdateItem@24(VAR RoutingHeader@1001 : Record 99000763;Item@1000 : Record 27) : Decimal;
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
    BEGIN
      ManufacturingSetup.GET;
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");

      // Certify Routing after Routing lines creation.
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
      // Update Routing No on Item.
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);
      EXIT(RoutingLine."Unit Cost per");
    END;

    LOCAL PROCEDURE CreateRoutingLine@21(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random value used so that the Next Operation No is greater than the previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateProductionBOMVersion@27(ProductionBOMNo@1000 : Code[20];BaseUnitOfMeasure@1002 : Code[10];Status@1003 : Option);
    VAR
      ProductionBOMVersion@1001 : Record 99000779;
    BEGIN
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMNo,FORMAT(LibraryRandom.RandInt(10)),BaseUnitOfMeasure);
      ProductionBOMVersion.VALIDATE(Status,Status);
      ProductionBOMVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasureSetup@116(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasure@1001 : Record 5404);
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5));
      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@56(ItemNo@1001 : Code[20];Quantity@1000 : Decimal;BinCode@1003 : Code[20];LocationCode@1004 : Code[10];Tracking@1005 : Boolean);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity,BinCode,LocationCode);
      IF Tracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineForSaleWithItemTracking@191(ItemNo@1002 : Code[20];Quantity@1001 : Decimal;UnitAmount@1005 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Sale,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.MODIFY(TRUE);

      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionOrderComponent@44(VAR ProdOrderComponent@1000 : Record 5407;ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];QuantityPer@1003 : Decimal;ProdOrderLineNo@1005 : Integer;LocationCode@1004 : Code[10]);
    BEGIN
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProdOrderComponent.Status::Released,ProductionOrderNo,ProdOrderLineNo);
      ProdOrderComponent.VALIDATE("Item No.",ItemNo);
      ProdOrderComponent.VALIDATE("Quantity per",QuantityPer);
      ProdOrderComponent.VALIDATE("Location Code",LocationCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemsSetupWithLocationAndBin@179(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;Quantity@1003 : Decimal;LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItem(Item2);
      CreateAndPostItemJournalLine(Item2."No.",Quantity,BinCode,LocationCode,FALSE);  // Using Tracking TRUE.
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item2,FALSE);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
      CreateAndPostItemJournalLine(Item."No.",Quantity,BinCode,LocationCode,FALSE);  // Using Tracking TRUE.
    END;

    LOCAL PROCEDURE CreateItemWithPlanningParametersAndProductionBOM@74(VAR Item@1000 : Record 27;ReplenishmentSystem@1003 : Option;SafetyStockQuantity@1002 : Decimal);
    BEGIN
      CreateItemsSetup(Item);
      UpdateLotForLotReorderingPolicyOnItem(Item);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Safety Stock Quantity",SafetyStockQuantity);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionBOMVersionWithCopyBOM@72(ProductionBOMNo@1002 : Code[20]) : Code[10];
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      ProductionBOMHeader.GET(ProductionBOMNo);
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMNo,COPYSTR(
          LibraryUtility.GenerateRandomCode(ProductionBOMVersion.FIELDNO("Version Code"),DATABASE::"Production BOM Version"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Production BOM Version",
            ProductionBOMVersion.FIELDNO("Version Code"))),ProductionBOMHeader."Unit of Measure Code");
      ProductionBOMCopy.CopyBOM(ProductionBOMNo,'',ProductionBOMHeader,ProductionBOMVersion."Version Code");
      EXIT(ProductionBOMVersion."Version Code");
    END;

    LOCAL PROCEDURE CreateProductionBOMVersionWithCopyBOMVersion@232(ProductionBOMNo@1002 : Code[20]);
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
      ProductionBOMHeader@1001 : Record 99000771;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      ProductionBOMHeader.GET(ProductionBOMNo);
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,ProductionBOMNo,FORMAT(LibraryRandom.RandInt(5)),
        ProductionBOMHeader."Unit of Measure Code");  // Use Random Version Code.
      ProductionBOMCopy.CopyFromVersion(ProductionBOMVersion);
    END;

    LOCAL PROCEDURE CreateBOMVersionWithCopyVersion@449(VAR Item@1000 : Record 27);
    VAR
      ProdBOMVersionCode@1001 : Code[10];
    BEGIN
      ProdBOMVersionCode := CreateProductionBOMVersionWithCopyBOM(Item."Production BOM No.");
      LibraryVariableStorage.Enqueue(Item."Production BOM No.");  // Enqueue variable.
      LibraryVariableStorage.Enqueue(ProdBOMVersionCode);  // Enqueue variable.
      CreateProductionBOMVersionWithCopyBOMVersion(Item."Production BOM No.");
    END;

    LOCAL PROCEDURE CreateItemSetupWithSerialTracking@247(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCodeForSerial);
      CreateItemWithItemTrackingCode(Item2,CreateItemTrackingCodeForSerial);
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item,FALSE);
      UpdateProductionBOMNoOnItem(Item2,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeForSerial@248() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreatePickFromProductionOrder@238(VAR ProductionOrder@1002 : Record 5405;ItemNo@1001 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      ProductionOrder.GET(ProdOrderLine.Status::Released,ProdOrderLine."Prod. Order No.");

      // Create Warehouse Pick from the Released Production Order.
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithReservation@104(VAR SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1005 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibraryVariableStorage.Enqueue(ReservationMessage);  // Enqueue variable for reservation message in MessageHandler.
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.ShowReservation;  // Invokes ReservationHandler.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@184(VAR SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1005 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesOrder@109(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateProductionOrderFromSalesOrder@105(VAR ProductionOrder@1001 : Record 5405;SalesHeader@1000 : Record 36);
    VAR
      OrderType@1002 : 'ItemOrder,ProjectOrder';
    BEGIN
      LibraryVariableStorage.Enqueue(ProductionOrderCreated);  // Enqueue variable for created Production Order message in MessageHandler.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ItemOrder);
    END;

    LOCAL PROCEDURE CreateItemsAndWarehouseShipmentWithReservationAndTrackingSetup@147(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;VAR SalesHeader@1003 : Record 36;Location@1004 : Record 14;Quantity@1002 : Decimal);
    BEGIN
      CreateItemSetupWithLotTracking(Item,Item2);
      UpdateInventoryAndAssignTrackingInWhseItemJournal(Location,Item,Item2,Quantity);
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item2."No.",2 * Quantity,Location.Code);  // Twice Quantity required for Full Auto Reservation and Warehouse Shipment.
      CreateWarehouseShipmentFromSalesOrder(SalesHeader);
    END;

    LOCAL PROCEDURE CreateItems@106(VAR ItemNo@1002 : ARRAY [7] OF Code[20]);
    VAR
      Item@1000 : Record 27;
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO 7 DO BEGIN
        LibraryInventory.CreateItem(Item);
        ItemNo[i] := Item."No.";
      END;
    END;

    LOCAL PROCEDURE CreateAndReleaseWhseShipmentFromSO@222(VAR SalesHeader@1000 : Record 36;VAR WarehouseShipmentHeader@1002 : Record 7320);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      CreateWarehouseShipmentFromSalesOrder(SalesHeader);
      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateProdOrderComponent@139(ProductionOrder@1001 : Record 5405;ItemNo@1002 : Code[20];QuantityPer@1004 : Decimal;LocationCode@1005 : Code[10];BinCode@1006 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status);
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      WITH ProdOrderComponent DO BEGIN
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Quantity per",QuantityPer);
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Bin Code",BinCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePickFromSalesOrder@186(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,ItemNo,Quantity,LocationCode);
      CreateAndReleaseWhseShipmentFromSO(SalesHeader,WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE AddWarehouseInventory@136(ItemNo@1000 : Code[20];Qty@1001 : Decimal;Bin@1002 : Record 7354);
    VAR
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);

      CalculateAndPostWarehouseAdjustment(ItemNo);
    END;

    LOCAL PROCEDURE FindProductionOrderComponent@9(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE AddProductionOrderComponentWithBin@131(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20];ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      // Find Component. Create Component with Bin and Lot Tracking for the Production Order.
      FindProductionOrderComponent(ProdOrderComponent,ProdOrderNo);
      CreateAndUpdateProductionOrderComponent(
        ProdOrderComponent,ProdOrderNo,ItemNo,ProdOrderComponent."Quantity per",
        ProdOrderComponent."Prod. Order Line No.",LocationCode);
      ProdOrderComponent.VALIDATE("Bin Code",BinCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RemoveProductionOrderComponent@117(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1002 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE("Prod. Order No.",ProdOrderNo);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@7(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1002 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@10(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20];SourceDocument@1002 : Option;ActionType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@8(VAR WarehouseActivityHeader@1001 : Record 5766;SourceNo@1002 : Code[20];SourceDocument@1003 : Option;ActionType@1004 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument,ActionType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindLastOperationNo@25(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@59(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderRoutingLine@97(VAR ProdOrderRoutingLine@1000 : Record 5409;ProductionOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@120(VAR ProdOrderLine@1001 : Record 5406;ItemNo@1000 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinForPickZone@268(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];Pick@1002 : Boolean);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,Pick));
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,LibraryRandom.RandInt(Bin.COUNT));
    END;

    LOCAL PROCEDURE FindZone@269(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10];BinTypeCode@1002 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",BinTypeCode);
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisteredWhseActivityLine@144(VAR RegisteredWhseActivityLine@1000 : Record 5773;SourceDocument@1004 : Option;SourceNo@1003 : Code[20];ActionType@1001 : Option);
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETRANGE("Source Document",SourceDocument);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Action Type",ActionType);
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@187(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@189(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20];No@1002 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("No.",No);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE GenerateMatrixDataForBOMVersion@171(VAR VersionCode@1008 : ARRAY [4] OF Text[1024];ProductionBOMNo@1007 : Code[20]) : Integer;
    VAR
      ProductionBOMVersion@1004 : Record 99000779;
      MatrixManagement@1005 : Codeunit 9200;
      RecRef@1006 : RecordRef;
      SetWanted@1001 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      CaptionRange@1002 : Text[1024];
      FirstMatrixRecInSet@1000 : Text[1024];
      ColumnCount@1009 : Integer;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      RecRef.GETTABLE(ProductionBOMVersion);
      MatrixManagement.GenerateMatrixData(
        RecRef,SetWanted::Initial,ARRAYLEN(VersionCode),ProductionBOMVersion.FIELDNO("Version Code"),
        FirstMatrixRecInSet,VersionCode,CaptionRange,ColumnCount);
      EXIT(ColumnCount);
    END;

    LOCAL PROCEDURE OpenProductionJournal@51(No@1000 : Code[20]);
    VAR
      ReleasedProductionOrder@1001 : TestPage 99000831;
    BEGIN
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",No);
      ReleasedProductionOrder.ProdOrderLines.ProductionJournal.INVOKE;
    END;

    LOCAL PROCEDURE PostWhsePositiveAdjmtWithLotExpirationDate@226(LocationCode@1001 : Code[10];Bin@1002 : Record 7354;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LotNo@1005 : Code[20];ExpirationDate@1007 : Date);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
      WhseItemTrackingLine@1008 : Record 6550;
    BEGIN
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      WarehouseJournalLine.OpenItemTrackingLines;

      SetExpirationDateOnItemTracking(WhseItemTrackingLine,WarehouseJournalLine,ExpirationDate);

      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,TRUE);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@18(SourceNo@1001 : Code[20];SourceDocument@1002 : Option;ActionType@1003 : Option);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo,SourceDocument,ActionType);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReserveSalesOrderWithProdOrder@172(VAR SalesLine@1001 : Record 37) : Code[20];
    VAR
      Item@1006 : Record 27;
      ProductionOrder@1005 : Record 5405;
      SalesHeader@1004 : Record 36;
      RoutingHeader@1002 : Record 99000763;
    BEGIN
      // Create and refresh a Released production Order with Routing Line
      CreateItemsSetup(Item);
      CreateRoutingAndUpdateItem(RoutingHeader,Item);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(100),'','');

      // Create Sales Order and reserve with Production Order
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",ProductionOrder.Quantity,'');
      SalesLine.ShowReservation; // Invokes ReservationHandler

      EXIT(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE RunAdjustCostItemEntries@163(ItemNoFilter@1002 : Text[250]);
    VAR
      AdjustCostItemEntries@1000 : Report 795;
    BEGIN
      CLEAR(AdjustCostItemEntries);
      COMMIT;  // Commit required for batch job reports.
      AdjustCostItemEntries.InitializeRequest(ItemNoFilter,'');
      AdjustCostItemEntries.USEREQUESTPAGE(TRUE);
      AdjustCostItemEntries.RUNMODAL;
    END;

    LOCAL PROCEDURE SelectItemJournalLine@211(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectRequisitionLine@68(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectProductionBOMLine@64(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectProdOrderLine@143(VAR ProdOrderLine@1000 : Record 5406;ProdOrderNo@1001 : Code[20];Status@1002 : Option);
    BEGIN
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetExpirationDateOnItemTracking@178(VAR WhseItemTrackingLine@1000 : Record 6550;WarehouseJournalLine@1001 : Record 7311;ExpirationDate@1002 : Date);
    BEGIN
      WITH WhseItemTrackingLine DO BEGIN
        SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
        SETRANGE("Source ID",WarehouseJournalLine."Journal Batch Name");
        SETRANGE("Location Code",WarehouseJournalLine."Location Code");
        SETRANGE("Source Ref. No.",WarehouseJournalLine."Line No.");
        FINDFIRST;
        VALIDATE("Expiration Date",ExpirationDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateInventoryInWhseItemJournal@119(LocationCode@1000 : Code[10];VAR CompItem@1001 : ARRAY [3] OF Record 27;Quantity@1002 : Decimal);
    VAR
      Item@1003 : Record 27;
    BEGIN
      // Create and register the Warehouse Item Journal Lines.
      WarehouseJournalSetup(LocationCode);

      CreateWarehouseJournalLine(CompItem,Quantity,LocationWhite);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,TRUE);

      // Calculate Warehouse adjustment and post Item Journal.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      Item.SETRANGE("No.",CompItem[1]."No.",CompItem[3]."No.");
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required to avoid the Document No mismatch.
    END;

    LOCAL PROCEDURE UpdateInventoryAndAssignTrackingInWhseItemJournal@41(Location@1000 : Record 14;VAR Item@1001 : Record 27;VAR Item2@1004 : Record 27;Quantity@1002 : Decimal);
    BEGIN
      // Assign Tracking and register the Warehouse Item Journal Lines.
      WarehouseJournalSetup(Location.Code);
      CreateWarehouseJournalLineAndAssignTracking(Item,Quantity,LocationWhite);
      CreateWarehouseJournalLineAndAssignTracking(Item2,Quantity,LocationWhite);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);

      // Calculate Warehouse adjustment and post Item Journal.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      Item.SETRANGE("No.",Item."No.",Item2."No.");
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required to avoid the Document No mismatch.
    END;

    LOCAL PROCEDURE UpdateLotNoAndQtyToHandleOnWarehouseActivityLine@135(ItemNo@1000 : Code[20];ProductionOrderNo@1001 : Code[20];ActionType@1003 : Option;QtyToHandle@1002 : Decimal);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ItemNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,ProductionOrderNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",ActionType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
        WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
        WarehouseActivityLine.MODIFY(TRUE);
        ItemLedgerEntry.NEXT;
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateManufacturingSetupComponentsAtLocation@5(NewComponentsAtLocation@1000 : Code[10]) ComponentsAtLocation : Code[10];
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ComponentsAtLocation := ManufacturingSetup."Components at Location";
      ManufacturingSetup.VALIDATE("Components at Location",NewComponentsAtLocation);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@92(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingLinkOnProdOrderComponent@624(ProductionOrderNo@1002 : Code[20]) : Code[10];
    VAR
      ProdOrderComponent@1001 : Record 5407;
      RoutingLink@1000 : Record 99000777;
    BEGIN
      RoutingLink.FINDFIRST;
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      ProdOrderComponent.VALIDATE("Routing Link Code",RoutingLink.Code);
      ProdOrderComponent.MODIFY(TRUE);
      EXIT(RoutingLink.Code);
    END;

    LOCAL PROCEDURE UpdateFlushingMethodAndCertifyBOM@107(VAR Item@1000 : Record 27;ProductionBOMHeader@1001 : Record 99000771);
    BEGIN
      Item.VALIDATE("Flushing Method",Item."Flushing Method"::Backward);
      Item.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetupDynamicLowLevelCode@49(NewDynamicLowLevelCode@1000 : Boolean) DynamicLowLevelCode : Boolean;
    BEGIN
      ManufacturingSetup.GET;
      DynamicLowLevelCode := ManufacturingSetup."Dynamic Low-Level Code";
      ManufacturingSetup.VALIDATE("Dynamic Low-Level Code",NewDynamicLowLevelCode);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemPlanningParameters@94(VAR Item@1000 : Record 27) : Code[20];
    VAR
      ComponentItemNo@1002 : Code[20];
    BEGIN
      ComponentItemNo := CreateItemsSetup(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
      EXIT(ComponentItemNo);
    END;

    LOCAL PROCEDURE UpdateRoutingStatus@112(VAR RoutingHeader@1000 : Record 99000763;Status@1001 : Option);
    BEGIN
      RoutingHeader.VALIDATE(Status,Status);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingLine@128(VAR RoutingHeader@1000 : Record 99000763;RoutingLinkCode@1002 : Code[10]);
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
      RoutingLine.FINDFIRST;
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::"Under Development");
      RoutingLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      RoutingLine.VALIDATE("Send-Ahead Quantity",LibraryRandom.RandDec(10,2));
      RoutingLine.MODIFY(TRUE);
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE UpdateProdOrderRoutingLine@169(VAR ProdOrderRoutingLine@1256 : Record 5409;ProdOrderNo@1257 : Code[20];FlushingMethod@1001 : Option);
    BEGIN
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo);
      ProdOrderRoutingLine.VALIDATE("Flushing Method",FlushingMethod);
      ProdOrderRoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMStatus@201(Status@1001 : Option;ProductionBOMNo@1002 : Code[20]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      ProductionBOMHeader.GET(ProductionBOMNo);
      ProductionBOMHeader.VALIDATE(Status,Status);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMDescription@157(ProductionBOMNo@1002 : Code[20]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      ProductionBOMHeader.GET(ProductionBOMNo);
      ProductionBOMHeader.VALIDATE(
        Description,PADSTR(ProductionBOMHeader.Description,MAXSTRLEN(ProductionBOMHeader.Description),'0'));
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemOnProductionBOMLine@242(ProductionBOMNo@1001 : Code[20];No@1002 : Code[20]);
    VAR
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      SelectProductionBOMLine(ProductionBOMLine,ProductionBOMNo);
      ProductionBOMLine.VALIDATE("No.",No);
      ProductionBOMLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemProdBOMUOMAndQtyPer@180(Item@1005 : Record 27;QtyPerUnitOfMeasure@1004 : Decimal;QtyPer@1003 : Decimal);
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",QtyPerUnitOfMeasure);
      UpdateProductionBOMStatus(ProductionBOMHeader.Status::"Under Development",Item."Production BOM No.");
      ProductionBOMHeader.GET(Item."Production BOM No.");
      ProductionBOMHeader.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      ProductionBOMHeader.MODIFY(TRUE);
      UpdateQtyPerOnProductionBOM(Item."Production BOM No.",QtyPer);
      UpdateProductionBOMStatus(ProductionBOMHeader.Status::Certified,Item."Production BOM No.");
    END;

    LOCAL PROCEDURE UpdateLotForLotReorderingPolicyOnItem@66(VAR Item@1000 : Record 27);
    BEGIN
      Item.GET(Item."No.");  // Used to avoid the update record error.
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemProdBOM@108(ItemNo@1001 : Code[20];ProductionBOMNo@1002 : Code[20]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        GET(ItemNo);
        VALIDATE("Replenishment System","Replenishment System"::"Prod. Order");
        VALIDATE("Manufacturing Policy","Manufacturing Policy"::"Make-to-Order");
        VALIDATE("Production BOM No.",ProductionBOMNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateLocation@141(VAR Location@1005 : Record 14;PutAway@1004 : Boolean;Pick@1003 : Boolean;Receive@1002 : Boolean;Shipment@1001 : Boolean;BinMandatory@1000 : Boolean);
    BEGIN
      WITH Location DO BEGIN
        VALIDATE("Require Receive",Receive);
        VALIDATE("Require Receive",Receive);
        VALIDATE("Require Shipment",Shipment);
        VALIDATE("Require Put-away",PutAway);
        VALIDATE("Require Pick",Pick);
        "Bin Mandatory" := BinMandatory; // Skip Validate to improve performance.
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseJournal@199(Location@1000 : Record 14;Item@1002 : Record 27;Quantity@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      WarehouseJournalSetup(Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,'',
        Location."Cross-Dock Bin Code",WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,''); // Value required to avoid the Document No mismatch.
    END;

    LOCAL PROCEDURE UpdateQtyPerOnProductionBOM@207(ProductionBOMNo@1001 : Code[20];QtyPer@1002 : Decimal);
    VAR
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      SelectProductionBOMLine(ProductionBOMLine,ProductionBOMNo);
      ProductionBOMLine.VALIDATE("Quantity per",QtyPer);
      ProductionBOMLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemHierarchy@85(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      // Create Item Hierarchy.
      CreateItemsSetup(Item);
      CreateItemsSetup(Item2);
      UpdateProductionBOMStatus(ProductionBOMHeader.Status::"Under Development",Item2."Production BOM No.");
      UpdateItemOnProductionBOMLine(Item2."Production BOM No.",Item."No.");  // Update Production Item from Previous Production BOM.
      UpdateProductionBOMStatus(ProductionBOMHeader.Status::Certified,Item2."Production BOM No.");
    END;

    LOCAL PROCEDURE VerifyProdOrderComponent@62(ProdOrderNo@1004 : Code[20];Status@1003 : Option;ItemNo@1002 : Code[20];ReservedQuantity@1001 : Decimal;RoutingLinkCode@1005 : Code[10];FlushingMethod@1006 : Option);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.TESTFIELD(Status,Status);
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      ProdOrderComponent.CALCFIELDS("Reserved Quantity");
      ProdOrderComponent.TESTFIELD("Reserved Quantity",ReservedQuantity);
      ProdOrderComponent.TESTFIELD("Routing Link Code",RoutingLinkCode);
      ProdOrderComponent.TESTFIELD("Flushing Method",FlushingMethod);
    END;

    LOCAL PROCEDURE VerifyQtyOnProdOrderComponent@196(ProdOrderNo@1004 : Code[20];QtyPer@1002 : Decimal;ExpectedQty@1001 : Decimal);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE("Prod. Order No.",ProdOrderNo);
        FINDFIRST;
        Assert.AreEqual(QtyPer,"Quantity per",FIELDCAPTION("Quantity per"));
        Assert.AreEqual(ExpectedQty,"Expected Quantity",FIELDCAPTION("Expected Quantity"));
      END;
    END;

    LOCAL PROCEDURE VerifyQtyOnPlanningComponent@193(ItemNo@1002 : Code[20];QtyPer@1001 : Decimal;ExpectedQty@1003 : Decimal);
    VAR
      PlanningComponent@1000 : Record 99000829;
    BEGIN
      WITH PlanningComponent DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        Assert.AreEqual(QtyPer,"Quantity per",FIELDCAPTION("Quantity per"));
        Assert.AreEqual(ExpectedQty,"Expected Quantity",FIELDCAPTION("Expected Quantity"));
      END;
    END;

    LOCAL PROCEDURE VerifyReservationQtyOnSalesLine@36(DocumentNo@1000 : Code[20];ReservedQuantity@1002 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",ReservedQuantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@164(SourceNo@1004 : Code[20];SourceDocument@1003 : Option;ItemNo@1001 : Code[20];Quantity@1006 : Decimal;ActionType@1000 : Option);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument,ActionType);
      REPEAT
        WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
        WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLineLot@243(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];LotNo@1003 : Code[20];ExpectedQty@1004 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        FINDSET;
        REPEAT
          Assert.AreEqual(ExpectedQty,Quantity,PickErr);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLine@148(SourceDocument@1004 : Option;SourceNo@1003 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal;ActionType@1005 : Option);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.FINDSET;
      REPEAT
        RegisteredWhseActivityLine.TESTFIELD("Lot No." );
        RegisteredWhseActivityLine.TESTFIELD("Item No.",ItemNo);
        RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      UNTIL RegisteredWhseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@55(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;Tracking@1004 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      REPEAT
        ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
        IF Tracking THEN
          ItemLedgerEntry.TESTFIELD("Lot No.");
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntries@111(SourceNo@1001 : Code[20];Quantity1@1004 : Integer;Quantity2@1003 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Source No.",SourceNo);
        FINDSET;

        TESTFIELD(Quantity,Quantity1);
        NEXT;
        TESTFIELD(Quantity,Quantity1);
        NEXT;
        TESTFIELD(Quantity,Quantity2);
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntriesForCostAmountActual@195(ItemNo@1000 : Code[20]);
    VAR
      ItemLedgerEntry@1006 : Record 32;
      MaxValue@1002 : Decimal;
      MinValue@1001 : Decimal;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Output);
      ItemLedgerEntry.FINDSET;

      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      MaxValue := ItemLedgerEntry."Cost Amount (Actual)";
      MinValue := ItemLedgerEntry."Cost Amount (Actual)";

      REPEAT
        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
        IF ItemLedgerEntry."Cost Amount (Actual)" > MaxValue THEN
          MaxValue := ItemLedgerEntry."Cost Amount (Actual)";
        IF ItemLedgerEntry."Cost Amount (Actual)" < MinValue THEN
          MinValue := ItemLedgerEntry."Cost Amount (Actual)";
        Assert.AreNearlyEqual(MaxValue,MinValue,0.01,STRSUBSTNO(CostAmountActualInILEErr,MaxValue,MinValue)); // The difference between MaxValue and MinValue should not be greater than 0.01.
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@90(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;BinCode@1004 : Code[20]);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
      WarehouseEntry.TESTFIELD("Bin Code",BinCode);
      WarehouseEntry.TESTFIELD("Lot No.");
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@47(ItemNo@1002 : Code[20];EntryType@1003 : Option);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Entry Type",EntryType);
    END;

    LOCAL PROCEDURE VerifyProductionOrder@150(No@1000 : Code[20];RoutingNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ProductionOrder@1003 : Record 5405;
    BEGIN
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE("No.",No);
      ProductionOrder.FINDFIRST;
      ProductionOrder.TESTFIELD("Routing No.",RoutingNo);
      ProductionOrder.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyLowLevelCodeOnProductionBOM@28(No@1001 : Code[20];LowLevelCode@1002 : Integer);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      ProductionBOMHeader.GET(No);
      ProductionBOMHeader.TESTFIELD("Low-Level Code",LowLevelCode);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@110(SourceNo@1000 : Code[20];ItemNo@1002 : Code[20];BinCode@1004 : Code[20];Quantity@1006 : Decimal;LocationCode@1001 : Code[10]);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD("Bin Code",BinCode);
      PostedInvtPickLine.TESTFIELD(Quantity,Quantity);
      PostedInvtPickLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyProductionOrderRoutingLine@65(ProdOrderNo@1001 : Code[20];UnitCostPer@1002 : Decimal);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProdOrderNo);
      ProdOrderRoutingLine.TESTFIELD("Unit Cost per",UnitCostPer);
    END;

    LOCAL PROCEDURE VerifyMatrixBOMVersion@170(ProductionBOMNo@1001 : Code[20];VersionCode@1002 : ARRAY [4] OF Text[1024];VersionCount@1000 : Integer);
    VAR
      ProductionBOMVersion@1003 : Record 99000779;
      LineCounter@1004 : Integer;
    BEGIN
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMVersion.FINDFIRST;
      Assert.AreEqual(VersionCount,ProductionBOMVersion.COUNT,VersionCountError);  // Verify the BOM Version count for Production BOM.
      FOR LineCounter := 1 TO VersionCount DO BEGIN
        ProductionBOMVersion.SETRANGE("Version Code",VersionCode[VersionCount]);
        ProductionBOMVersion.FINDFIRST;
        Assert.AreEqual(VersionCode[VersionCount],ProductionBOMVersion."Version Code",VersionCodeError);  // Verify the BOM Version Code for particular BOM Version per Item.
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@176(No@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyProductionOrderLine@177(ItemNo@1002 : Code[20];Quantity@1001 : Decimal);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@101(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];ShipmentDate@1002 : Date);
    VAR
      ReservationEntry@1003 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry.TESTFIELD("Location Code",LocationCode);
        ReservationEntry.TESTFIELD("Shipment Date",ShipmentDate);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySerialTrackingAndQuantityInItemLedgerEntry@145(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      REPEAT
        ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
        ItemLedgerEntry.TESTFIELD("Serial No.");
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLineAndCalcTotalQty@140(SourceDocument@1004 : Option;SourceNo@1003 : Code[20];ItemNo@1001 : Code[20];ActionType@1005 : Option) SumQuantity : Decimal;
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      FindRegisteredWhseActivityLine(RegisteredWhseActivityLine,SourceDocument,SourceNo,ActionType);
      WITH RegisteredWhseActivityLine DO BEGIN
        REPEAT
          TESTFIELD("Lot No.");
          TESTFIELD("Item No.",ItemNo);
          SumQuantity += Quantity;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AreSameMessages@149(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    [PageHandler]
    PROCEDURE ProdOrderComponentsHandler@19(VAR ProdOrderComponents@1000 : TestPage 99000818);
    VAR
      ItemInventory@1001 : Variant;
      ItemNo@1002 : Variant;
    BEGIN
      // Verifying the values on Prod. Order Components page.
      LibraryVariableStorage.Dequeue(ItemInventory);  // Dequeue variable.
      ProdOrderComponents."Expected Quantity".ASSERTEQUALS(ItemInventory);
      LibraryVariableStorage.Dequeue(ItemNo);  // Dequeue variable.
      ProdOrderComponents."Item No.".ASSERTEQUALS(ItemNo);
      ProdOrderComponents.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CancelReservationPageHandler@52(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Counter += 1;
      CASE Counter OF
        1:
          Reservation."Reserve from Current Line".INVOKE;
        2:
          Reservation.CancelReservationCurrentLine.INVOKE;  // Cancel Reservation.
      END;
    END;

    [ConfirmHandler]
    PROCEDURE CancelReserveConfirmHandler@53(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(AreSameMessages(Question,MessageCancelReservation),Question);
      Reply := TRUE;
    END;

    [StrMenuHandler]
    PROCEDURE CalculateStandardCostMenuHandler@197(Option@1000 : Text[1024];VAR CalcLevel@1001 : Integer;Instruction@1002 : Text[1024]);
    VAR
      DequeueVariable@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CalcLevel := DequeueVariable;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@4(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler2@6(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      TrackingQuantity@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TrackingQuantity);
      ItemTrackingLines."Lot No.".SETVALUE(TrackingQuantity);
      ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryHandler@181(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AssignOrEnterTrackingOnItemTrackingPageHandler@114(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      Quantity@1003 : Variant;
      ItemNo@1002 : Variant;
      TrackingAction2@1004 : Variant;
      TrackingAction@1005 : 'AssignSerialNo,AssignLotNo,EnterValues,SelectEntries';
    BEGIN
      COMMIT;
      LibraryVariableStorage.Dequeue(TrackingAction2);
      TrackingAction := TrackingAction2;
      CASE TrackingAction OF
        TrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;  // Item Tracking Summary Page is handled in 'ItemTrackingSummaryPageHandler'.
        TrackingAction::EnterValues:
          BEGIN
            LibraryVariableStorage.Dequeue(Quantity);
            LibraryVariableStorage.Dequeue(ItemNo);
            FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ItemNo);
            ItemTrackingLines."Serial No.".SETVALUE(ItemLedgerEntry."Serial No.");
            ItemTrackingLines."Lot No.".SETVALUE(ItemLedgerEntry."Lot No.");
            ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE AdjustCostItemEntriesHandler@165(VAR AdjustCostItemEntries@1000 : TestRequestPage 795);
    BEGIN
      AdjustCostItemEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingPageHandler@71(VAR WhseItemTrackingLine@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLine."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
      WhseItemTrackingLine.Quantity.SETVALUE(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler@69(VAR ProductionJournal@1000 : TestPage 5510);
    VAR
      ItemNo@1001 : Variant;
    BEGIN
      // Verifying the values on Production Journal page.
      LibraryVariableStorage.Dequeue(ItemNo);  // Dequeue variable.
      ProductionJournal.NEXT; // To verify the next component updated.
      ProductionJournal."Item No.".ASSERTEQUALS(ItemNo);
      ProductionJournal.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SerialItemTrackingPageHandler@305(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Serial No.".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@133(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@348(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(AreSameMessages(Message,ExpectedMessage),Message);
    END;

    [MessageHandler]
    PROCEDURE DummyMessageHandler@212(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE LowLevelCodeConfirmHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(AreSameMessages(Question,ConfirmCalculateLowLevelCode),Question);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionBOMListHandler@96(VAR ProdBOMVersionList@1000 : Page 99000800;VAR Response@1001 : Action);
    VAR
      ProductionBOMVersion@1002 : Record 99000779;
      ProductionBOMNo@1003 : Variant;
      VersionCode@1004 : Variant;
    BEGIN
      // Select source version from Production BOM Version List lookup page.
      LibraryVariableStorage.Dequeue(ProductionBOMNo);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(VersionCode);  // Dequeue variable.
      ProductionBOMVersion.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMVersion.SETRANGE("Version Code",VersionCode);
      ProductionBOMVersion.FINDFIRST;
      ProdBOMVersionList.SETTABLEVIEW(ProductionBOMVersion);
      ProdBOMVersionList.SETRECORD(ProductionBOMVersion);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@103(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostProductionJournalHandler@290(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal.Post.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ProductionJournalPostingMessageHandler@1017(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,JournalLinesPostedMsg) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@293(ConfirmMessage@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ProdJnlPostConfirmHandler@182(ConfirmMessage@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Assert.IsTrue(AreSameMessages(ConfirmMessage,PostJnlLinesMsg),ConfirmMessage);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ProdBOMMatrixPerVersionHandler@160(VAR ProdBOMMatrixPerVersion@1000 : TestPage 99000812);
    BEGIN
      ProdBOMMatrixPerVersion.Action77.INVOKE; // To invoke ShowMatrixHandler.
    END;

    [ModalPageHandler]
    PROCEDURE ShowMatrixHandler@159(VAR ProdBOMMatPeVerMatrix@1000 : TestPage 9287);
    VAR
      ItemNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      ProdBOMMatPeVerMatrix."Item No.".ASSERTEQUALS(ItemNo);
      ProdBOMMatPeVerMatrix.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhereUsedHandler@158(VAR ProdBOMWhereUsed@1000 : TestPage 99000811);
    VAR
      ItemNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      ProdBOMWhereUsed."Item No.".ASSERTEQUALS(ItemNo);
      ProdBOMWhereUsed.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Reservation] [SCM]
      Test cases for SCM Reservation:

       1. Test to verify that Released Prod. Order Components page is open successfully with Location.
       2. Test to verify that Released Prod. Order Components can be reserved with Location.
       3. Test to verify the multiple Released Prod. Order reservation on Sales Order when one of the prod. Order is deleted.
       4. Test to verify the Released Prod. Order cancel reservation on Sales Order with blank Location.
       5. Test to verify the reservation on Sales Order with Updated Expected Receipt Date on Purchase Order.
       6. Test to verify the Released Prod. Order reservation on Sales Order with Location.
       7. Test to verify the reservation on Firm Planned Prod. Order Components with Location.
       8. Test to verify the reservation on Released Prod. Order Components when Changing the Firm Planned Prod. Order to Released Prod. Order.
       9. Test to verify registered items from Warehouse Journal with Lot Tracking.
      10. Test to verify Calculate Consumption with released Production Order items with Lot Tracking.
      11. Test to verify the Item in a Production BOM are posted on white Location with Lot Tracking.
      12. Test to verify that Warehouse Pick is created from Released Production Order with Lot Tracking.
      13. Test to verify that Warehouse Pick created from Released Production Order is registered successfully with Lot Tracking.
      14. Test to verify Calculate Consumption and post it with Released Production Order with Lot Tracking.
      15. Test to verify Output Quatity posted with Released Production Order and Lot Tracking.
      16. Test to verify Output Quatity posted with Released Production Order with positive Quantity and Lot Tracking.
      17. Test to verfy that Routing Link can be attached to the Child Item in a Production BOM.
      18. Test to verify that the Flushing Method can be changed on the Child item in a Production BOM.
      19. Test to verify that the Order Tracking Policy to Tracking & Action Msg. can not be changed on Item in a production BOM.
      20. Test to verify the creation of Released Production Order with Routing setup.
      21. Test to verify the posting of Output Journal from Released Production Order With Routing Setup.
      22. Test to verify the creation of Released Production Order Components with Routing setup.
      23. Test to verify Low level Code after Calculate Low Level Code with Dynamic Low Level Code False in Manufacturing Setup and with Active Versions blank in BOM Header.
      24. Test to verify Low level Code after Calculate Low Level Code with Dynamic Low Level Code False in Manufacturing Setup and with certified BOM Versions in BOM Header.
      25. Test to verify Low level Code after Calculate Low Level Code with Dynamic Low Level Code False in Manufacturing Setup and with closed BOM Versions in BOM Header.
      26. Test to verify the Item Tracking page opens successfully from Released Production Order.
      27. Test to verify the creation of Inventory Pick from Released Production Order with Lot Tracking.
      28. Test to verify the posting of Inventory Pick from Released Production Order with Lot Tracking.
      29. Test to verify that the new Unit Of Measure is updated on Production BOM when it is changed on Item.
      30. Test to verify the Low level Code on Production BOM when BOM Version is added to it.
      31. Test to verify that Routing Link Code is updated correctly on Firm Planned Production Order Components.
      32. Test to verify the posting of Output Journal With negative quantity with Released Production Order.
      33. Test to verify that Unit Cost Per On Production Order With Routing is calculated successfully.
      34. Test to verify that Unit Cost Per On Production Order With Routing is calculated successfully through Calculate Regenerative Plan on Planning Worksheet.
      35. Test to verify that Production Order Changed Routing No is not effected on Production Order Routing Line With Lot Tracking.
      36. Test to verify that Warehouse Put Away is created successfully with Production BOM and Lot Tracking without Bins.
      37. Test to verify that Warehouse Put Away is registered successfully with Production BOM and Lot Tracking without Bins.
      38. Test to verify that Warehouse Pick is created successfully with Production BOM and Lot Tracking without Bins.
      39. Test to verify that Production Journal is opened successfully from Production Order with Bin and Location.
      40. Test to verify that Production Journal is opened successfully from Production Order With new component and changed Bin and Location.
      41. Test to verify that Planned Production Order is created successfully with Location.
      42. Test to verify that Routing Link Code on Planned Production Order Component is updated successfully.
      43. Test to verify that Send Ahead Quantity exist on Released Production Order Routing Line when Replan Production Order.
      44. Test to verify that Expected Qty Base is calculated correctly on Production Order component.
      45. Test to verify that Routing No is updated successfully on Planned Production Order.
      46. Test to verify the BOM Matrix Per Version when BOM Version is attached to the Production BOM with Copy BOM.
      47. Test to verify the BOM Matrix Per Version when BOM Versions are attached to the Production BOM with Copy BOM.
      48. Test to verify the BOM Matrix Per Version when BOM Version is attached to the Production BOM with copy BOM Version.
      49. Test to verify the BOM Matrix Per Version when BOM Versions are attached to the Production BOM with copy BOM Version.
      50. Test to verify that Purchase Order is created correctly with Surplus Quantity from Calculate Regenerative Plan on Planning Worksheet with Production BOM.
      51. Test to verify that Production Order is created correctly with Surplus Quantity from Calculate Regenerative Plan on Planning Worksheet with Production BOM.
      52. Test to verify that Released Production Order is created successfully with new Production Item on Production BOM.
      53. Test to verify that correct Item and Due Date is filtered on Requisition Line with new Production Item on Production BOM.
      54. Test to verify the Shipment Date and Location Code on Reservation Entry from Sales Order with Lot Tracking.
      55. Test to verify that Pick is created successfully from Production Order with Lot Tracking and Reservation.
      56. Test to verify that Output from Production Order with Lot Tracking and Reservation.
      57. Test to verify the Item Ledger Entry after posting Output from Production Order with Serial Tracking and Reservation.
      58. Test to verify the Consumption and Output Qty in the Item Ledger Entries for multiple level production order with warehouse pick.
      59. Test to verify that Warehouse Pick can be registered successfully with Lot Tracking when created from Production Order by adding and removing component.
      60. Test to verify that Warehouse Pick can be registered successfully with Serial Tracking when created from Production Order by adding and removing component.
      61. Test to verify the Pick is partial registered successfully with same Lot No.
      62. Test to verify that Cost Amount (Actual) with for the Output entries with Serial tracked units carries a standard cost.
      63. Test to verify that Show Matrix page can show correct data when Production BOM description length increased to 50.
      64. Test to verify that Where-Used page can show correct data when Production BOM description length increased to 50.
      65. Test to verify that there is a Warning Message to prevent finish the Production Order before Inventory Pick was posted.
      66. Test to verify an error message pops up when clicking Reserve From Current Line at the 2nd time when there is nothing availalbe to reserve.
      67. Test to verify that error "date conflict with existing reservations" pops up when changing Starting Date in Prod. Order Routing line.
      68. Test to verify that error "date conflict with existing reservations" pops up when changing Setup Time in Prod. Order Routing line.
      69. Test to verify Quantity Per and Expected Quantity are correct on Prod. Order Component for Released Production Order.
      70. Test to verify Quantity Per and Expected Quantity are correct on Planning Component for Planning Worksheet line.
      71. Test to verify that there's no Confirm Message when reserved Item is used in Prod. Order Journal posting

        Cover Test Cases for WI - 286188
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        ReleasedProdOrderComponentsPageWithLocation                            124108
        FullReservationOnReleasedProdOrderComponentsWithLocation               124108
        ReservationOnSalesOrderWithLocation                                    124110
        CancelReservationOnSalesOrderWithReleasedProdOrder                     124111

        Covers Test Cases for WI - 286189
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        PartialDeleteWithMultipleReleasedProductionOrderReservation            124113
        ReservationOnSalesOrderWithUpdatedReceiptDate                          124114
        ReservationOnFirmPlannedProdOrderComponentsWithLocation                124115
        ComponentsReservationOnChangeFirmPlannedProdOrderToReleased            124115

        Covers Test Cases for WI - 286190
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        RegisterWarehouseJournalLineWithLotTracking                            233170
        CalculateConsumptionWithLotTracking                                    120975
        RegisterAndPostItemsWithProductionBOMAndLotTracking                    233170
        WarehousePickFromProductionOrderWithLotTracking                        233170
        RegisterWarehousePickFromProductionOrderWithLotTracking                233170
        PostConsumptionWithProductionOrderWithLotTracking                      233170
        PostOutputWithProductionOrderWithLotTracking                           233170
        QuantityReceiveFromOutputJournalWithLotTracking                        233170

        Covers Test Cases for WI - 286191
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        ProductionBOMWithRoutingLink                                           123592
        ProductionBOMFlushingMethodOnComponentItem                             123592
        ReleasedProductionOrderWithChangedOrderTrackingPolicy                  123593
        ReleasedProductionOrderWithRouting                                     123593
        PostOutputFromReleasedProductionOrderWithRoutingSetup                  124839
        ReleasedProductionOrderComponentWithRoutingSetup                       124839

        Covers Test Cases for WI - 286192
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        LowLevelCodeOnProductionBOMWithoutActiveBOMVersion                     278735
        LowLevelCodeOnProductionBOMWithCertifiedBOMVersion                     278735
        LowLevelCodeOnProductionBOMWithClosedBOMVersion                        278735

        Covers Test Cases for WI - 290387
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        ItemTrackingOnReleasedProductionOrderWithCertifiedBOM                  127622
        InventoryPickFromReleasedProductionOrderWithLotTracking                127622
        PostInventoryPickFromReleasedProductionOrderWithLotTracking            127622
        BOMLineWithNewUnitOfMeasure                                            127629

        Covers Test Cases for WI - 286194
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        ProductionBOMLowLevelCodeWithCertifiedBOMVersion                       143077
        ProductionOrderComponentsWithRoutingLinkCode                           124842
        OutputJournalPostingForNegativeOutput                                  124842

        Covers Test Cases for WI - 286193
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        UnitCostPerOnProductionOrderWithRouting                                142988
        UnitCostPerOnProductionOrderWithRoutingAndRegenerativePlan             142988
        ProductionOrderChangedRoutingNoWithLotTracking                         127870

        Covers Test Cases for WI - 290389
        -------------------------------------------------------------------------------
        Test Function Name                                                    TFS ID
        -------------------------------------------------------------------------------
        WarehousePutAwayWithProductionBOMAndLotTracking                       127598
        RegisteredWhsePutAwayWithProductionBOMAndLotTracking                  127598
        WarehousePickWithProductionBOMAndLotTracking                          127598
        ReplanProductionOrderWithRouting                                      135550

        Covers Test Cases for WI - 286195
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ProductionJournalFromProdOrderWithBinAndLocation                             143089
        ProdJournalFromProductionOrderWithChangedBinAndLocationOnComponent           143089
        PlannedProductionOrderWithLocation                                           127852
        PlannedProductionOrderComponentWithRoutingLinkCode                           127852

        Covers Test Cases for WI - 290383
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ExpectedQuantityBaseOnProductionOrderComponent                               229617
        RoutingOnPlannedProductionOrder                                              229617

        Covers Test Cases for WI - 290388
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ProductionBOMMatrixPerVersionWithCopyBOM                                     128885
        ProductionBOMMatrixPerVersionWithCopyBOMAndMultipleBOMVersions               128885
        ProductionBOMMatrixPerVersionWithCopyVersion                                 128885
        ProductionBOMMatrixPerVersionWithCopyVersionAndMultipleBOMVersions           128885
        PurchaseOrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM        127621
        ProductionOrderWithSurplusQuantityFromRegenerativePlanWithProductionBOM      127621
        ProductionOrderWithNewProductionItemOnProductionBOM                          135501
        RequisitionLineWithNewProductionItemOnProductionBOM                          135501

        Covers Test Cases for WI - 294365
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ReservationOnSalesOrderWithLotTracking                                       127555
        PickFromProductionOrderWithLotTrackingAndReservation                         127555
        OutPutFromProductionOrderWithLotTrackingAndReservation                       127555
        PostOutputFromProductionOrderWithSerialTracking                              127548

        Covers Test Cases for WI - 49170
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ConsumptionQuantityInMultiLevelProduction                                    49170

        Covers Test Cases for WI
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        RegisterWhsePickWithLotTrackingFromProductionOrder                           54688
        RegisterWhsePickWithSNTrackingFromProductionOrder                            54688
        RegisterPickPartiallyWithSameLotNo                                           54576

        Covers Test Cases for WI
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        CostAmountActualForOutputEntriesWithSerialNoTracking                          56571

        Covers Test Cases for WI
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ShowMatrixWithMaxLengthOfDescription                                         346116
        WhereUsedWithMaxLengthOfDescription                                          346116

        Covers Test Cases for WI
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        FinishProdOrderBeforeInventoryPickPosted                                     57572
        Covers Test Cases for WI - 73739
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ReserveFromCurrentLineTwiceOnSalesOrder                                      73739

        Covers Test Cases for WI
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        ChangeStartingDateInProdOrderRoutingLine                                      73740
        ChangeSetupTimeInProdOrderRoutingLine                                         73740
        ProdOrderComponentForReleasedProdOrder                                        89564
        PlanningComponentForPlanningWorksheetLine                                     89564
        CheckSelfReservedQty                                                          100691
    }
    END.
  }
}

