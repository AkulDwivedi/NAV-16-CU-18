OBJECT Codeunit 136356 UT T Job WIP Entry
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Job@1001 : Record 167;
      JobTask@1003 : Record 1001;
      JobWIPEntry@1004 : Record 1004;
      Assert@1000 : Codeunit 130000;
      Text001@1002 : TextConst 'ENU=Rolling back changes...';
      LibraryRandom@1008 : Codeunit 130440;
      LibraryJob@1006 : Codeunit 131920;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryERM@1010 : Codeunit 131300;
      IsInitialized@1005 : Boolean;
      IncorrectWIPEntryAmountErr@1009 : TextConst 'ENU=Incorrect WIP Entry Amount.';

    [Test]
    PROCEDURE TestFunctionDeleteForJob@5();
    BEGIN
      Initialize;
      SetUp;

      // Validate that the Job WIP Entry gets deleted.
      JobWIPEntry.DeleteEntriesForJob(Job);
      JobWIPEntry.SETRANGE("Job No.",Job."No.");
      Assert.IsFalse(JobWIPEntry.FINDFIRST,'Job WIP Entry was not deleted.');

      TearDown;
    END;

    [Test]
    PROCEDURE CalcRecognizedCostsSalesOnNegativeEntryForOrderJob@3();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobCalculateWIP@1004 : Codeunit 1000;
      ExpectedCostAmount@1002 : Decimal;
      ExpectedSalesAmount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Costs/Sales calculation]
      // [SCENARIO 123634] Verify that Recognized Costs/Sales calculation is considered the negative entry for Job in status Order
      Initialize;
      // [GIVEN] Job in status Order with WIP Method for Recognized Costs/Sales calculation
      CreateJobWithWIPMethod(JobTask,Job.Status::Order);
      // [GIVEN] Job Ledger entries for Costs and Sales with negative amount = "X"
      CreateJobLedgerEntries(Job,ExpectedCostAmount,ExpectedSalesAmount,JobTask);
      // [WHEN] Calculate Job WIP
      JobCalculateWIP.JobCalcWIP(Job,WORKDATE,LibraryUtility.GenerateGUID);
      // [THEN] Job WIP Entry is created with negative amount = "X"
      VerifyJobWIPEntryAmount(Job."No.",JobWIPEntry.Type::"Recognized Costs",ExpectedCostAmount);
      VerifyJobWIPEntryAmount(Job."No.",JobWIPEntry.Type::"Recognized Sales",ExpectedSalesAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CalcRecognizedCostSalesOnNegativeEntryForCompletedJob@21();
    VAR
      Job@1000 : Record 167;
      JobTask@1004 : Record 1001;
      JobCalculateWIP@1003 : Codeunit 1000;
      ExpectedCostAmount@1002 : Decimal;
      ExpectedSalesAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Costs/Sales calculation]
      // [SCENARIO 123634] Verify that Recognized Costs/Sales calculation is considered the negative entry for Job in status Completed
      Initialize;
      // [GIVEN] Job in status Completed with WIP Method for Recognized Costs/Sales calculation
      CreateJobWithWIPMethod(JobTask,Job.Status::Completed);
      // [GIVEN] Job Ledger entries for Costs and Sales with negative amount = "X"
      CreateJobLedgerEntries(Job,ExpectedCostAmount,ExpectedSalesAmount,JobTask);
      // [WHEN] Calculate Job WIP
      JobCalculateWIP.JobCalcWIP(Job,WORKDATE,LibraryUtility.GenerateGUID);
      // [THEN] Job WIP Entry is created with negative amount = "X"
      VerifyJobWIPEntryAmount(Job."No.",JobWIPEntry.Type::"Recognized Costs",ExpectedCostAmount);
      VerifyJobWIPEntryAmount(Job."No.",JobWIPEntry.Type::"Recognized Sales",ExpectedSalesAmount);
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE SetUp@1();
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      IF JobWIPEntry.FINDLAST THEN
        JobWIPEntry."Entry No." += 1
      ELSE
        JobWIPEntry."Entry No." := 1;
      JobWIPEntry."Job No." := Job."No.";
      JobWIPEntry.INSERT;

      JobWIPEntry.MODIFY;
    END;

    LOCAL PROCEDURE TearDown@2();
    BEGIN
      CLEAR(Job);
      CLEAR(JobTask);
      CLEAR(JobWIPEntry);
      ASSERTERROR ERROR(Text001);
    END;

    LOCAL PROCEDURE CreateJobLedgerEntries@8(VAR Job@1000 : Record 167;VAR ExpectedCostAmount@1003 : Decimal;VAR ExpectedSalesAmount@1002 : Decimal;JobTask@1001 : Record 1001);
    VAR
      JobLedgerEntry@1004 : Record 169;
    BEGIN
      Job.GET(JobTask."Job No.");
      ExpectedCostAmount := CreateJobLedgEntry(JobTask,JobLedgerEntry."Entry Type"::Usage);
      ExpectedSalesAmount := CreateJobLedgEntry(JobTask,JobLedgerEntry."Entry Type"::Sale);
    END;

    LOCAL PROCEDURE CreateJobWithWIPMethod@30(VAR JobTask@1000 : Record 1001;JobStatus@1002 : Option);
    VAR
      Job@1001 : Record 167;
      JobWIPMethod@1003 : Record 1006;
    BEGIN
      LibraryJob.CreateJobWIPMethod(JobWIPMethod);
      JobWIPMethod.VALIDATE("Recognized Costs",JobWIPMethod."Recognized Costs"::"Usage (Total Cost)");
      JobWIPMethod.VALIDATE("Recognized Sales",JobWIPMethod."Recognized Sales"::"Contract (Invoiced Price)");
      JobWIPMethod.MODIFY(TRUE);
      LibraryJob.CreateJob(Job);
      Job.VALIDATE(Status,JobStatus);
      Job.VALIDATE("WIP Method",JobWIPMethod.Code);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
      UpdateJobPostingGroup(Job."Job Posting Group");
    END;

    LOCAL PROCEDURE CreateJobLedgEntry@36(JobTask@1002 : Record 1001;EntryType@1003 : Option) : Decimal;
    VAR
      JobLedgerEntry@1000 : Record 169;
      RecRef@1001 : RecordRef;
    BEGIN
      WITH JobLedgerEntry DO BEGIN
        RecRef.GETTABLE(JobLedgerEntry);
        INIT;
        "Entry No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Posting Date" := WORKDATE;
        "Job No." := JobTask."Job No.";
        "Job Task No." := JobTask."Job Task No.";
        "Entry Type" := EntryType;
        "Line Amount (LCY)" := -LibraryRandom.RandDec(100,2);
        "Total Cost (LCY)" := "Line Amount (LCY)";
        INSERT;
        EXIT("Total Cost (LCY)");
      END;
    END;

    LOCAL PROCEDURE UpdateJobPostingGroup@4(JobPostingGroupCode@1000 : Code[10]);
    VAR
      JobPostingGroup@1001 : Record 208;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      WITH JobPostingGroup DO BEGIN
        GET(JobPostingGroupCode);
        VALIDATE("WIP Invoiced Sales Account",GLAccount."No.");
        VALIDATE("Job Sales Applied Account",GLAccount."No.");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyJobWIPEntryAmount@41(JobNo@1003 : Code[20];ExpectedType@1001 : Option;ExpectedAmount@1002 : Decimal);
    VAR
      JobWIPEntry@1000 : Record 1004;
    BEGIN
      WITH JobWIPEntry DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE(Type,ExpectedType);
        CALCSUMS("WIP Entry Amount");
        Assert.AreEqual(ExpectedAmount,"WIP Entry Amount",IncorrectWIPEntryAmountErr);
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@69(Message@1000 : Text);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [WIP Entry] [Job]

      This unit test tests all fields added / modified during implementation of feature 92860 - "Jobs and WIP Compliance".

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');

      ----------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ----------------------------------------------------------------------
      CalcRecognizedCostsSalesOnNegativeEntryForOrderJob             123634
      CalcRecognizedCostSalesOnNegativeEntryForCompletedJob          123634
    }
    END.
  }
}

