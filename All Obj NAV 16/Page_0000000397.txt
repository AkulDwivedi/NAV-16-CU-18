OBJECT Page 397 Sales Invoice Statistics
{
  OBJECT-PROPERTIES
  {
    Date=23-02-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48067,NAVIN9.00.00.48067;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Sales Invoice Statistics;
               ENN=Sales Invoice Statistics];
    LinksAllowed=No;
    SourceTable=Table112;
    PageType=ListPlus;
    OnAfterGetRecord=VAR
                       CostCalcMgt@1001 : Codeunit 5836;
                       CustLedgEntry@1000 : Record 21;
                       ServiceTaxEntry@1500000 : Record 16473;
                     BEGIN
                       CLEARALL;

                       IF "Currency Code" = '' THEN
                         currency.InitRoundingPrecision
                       ELSE
                         currency.GET("Currency Code");

                       SalesInvLine.SETRANGE("Document No.","No.");
                       IF SalesInvLine.FIND('-') THEN
                         REPEAT
                           CustAmount := CustAmount + SalesInvLine.Amount;
                           ExciseAmount := ExciseAmount + SalesInvLine."Excise Amount";
                           TaxAmount := TaxAmount + SalesInvLine."Tax Amount";
                           // VATAmt := VATAmt + SalesInvLine."VAT Amount";
                           ServiceTaxAmount := ServiceTaxAmount + SalesInvLine."Service Tax Amount";
                           ServiceTaxSBCAmount := ServiceTaxSBCAmount + SalesInvLine."Service Tax SBC Amount";
                           ServiceTaxeCessAmount := ServiceTaxeCessAmount + SalesInvLine."Service Tax eCess Amount";
                           ServiceTaxSHECessAmount := ServiceTaxSHECessAmount + SalesInvLine."Service Tax SHE Cess Amount";
                           KKCessAmount := KKCessAmount + SalesInvLine."KK Cess Amount";
                           ChargeAmount := ChargeAmount + SalesInvLine."Charges To Customer";
                           NetTotal := NetTotal + SalesInvLine."Amount To Customer";
                           GSTAmount := GSTAmount+SalesInvLine."Total GST Amount";
                           // AmountInclVAT := AmountInclVAT + SalesInvLine."Amount Including VAT";
                           AmountInclVAT := CustAmount;
                           IF "Prices Including VAT" THEN
                             InvDiscAmount := InvDiscAmount + SalesInvLine."Inv. Discount Amount" / (1 + SalesInvLine."VAT %" / 100)
                           ELSE
                             InvDiscAmount := InvDiscAmount + SalesInvLine."Inv. Discount Amount";
                           CostLCY := CostLCY + (SalesInvLine.Quantity * SalesInvLine."Unit Cost (LCY)");
                           LineQty := LineQty + SalesInvLine.Quantity;
                           TotalNetWeight := TotalNetWeight + (SalesInvLine.Quantity * SalesInvLine."Net Weight");
                           TotalGrossWeight := TotalGrossWeight + (SalesInvLine.Quantity * SalesInvLine."Gross Weight");
                           TotalVolume := TotalVolume + (SalesInvLine.Quantity * SalesInvLine."Unit Volume");
                           IF SalesInvLine."Units per Parcel" > 0 THEN
                             TotalParcels := TotalParcels + ROUND(SalesInvLine.Quantity / SalesInvLine."Units per Parcel",1,'>');
                           IF SalesInvLine."VAT %" <> VATPercentage THEN
                             IF VATPercentage = 0 THEN
                               VATPercentage := SalesInvLine."VAT %"
                             ELSE
                               VATPercentage := -1;
                           TCSAmount += SalesInvLine."Total TDS/TCS Incl. SHE CESS";
                           TotalAdjCostLCY := TotalAdjCostLCY + CostCalcMgt.CalcSalesInvLineCostLCY(SalesInvLine);
                         UNTIL SalesInvLine.NEXT = 0;
                       VATAmount := AmountInclVAT - CustAmount;
                       InvDiscAmount := ROUND(InvDiscAmount,currency."Amount Rounding Precision");

                       IF VATPercentage <= 0 THEN
                         VATAmountText := Text000
                       ELSE
                         VATAmountText := STRSUBSTNO(Text001,VATPercentage);

                       IF "Currency Code" = '' THEN
                         AmountLCY := CustAmount
                       ELSE
                         AmountLCY :=
                           CurrExchRate.ExchangeAmtFCYToLCY(
                             WORKDATE,"Currency Code",CustAmount,"Currency Factor");

                       CustLedgEntry.SETCURRENTKEY("Document No.");
                       CustLedgEntry.SETRANGE("Document No.","No.");
                       CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                       CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                       IF CustLedgEntry.FINDFIRST THEN
                         AmountLCY := CustLedgEntry."Sales (LCY)";

                       ProfitLCY := AmountLCY - CostLCY;
                       IF AmountLCY <> 0 THEN
                         ProfitPct := ROUND(100 * ProfitLCY / AmountLCY,0.1);

                       AdjProfitLCY := AmountLCY - TotalAdjCostLCY;
                       IF AmountLCY <> 0 THEN
                         AdjProfitPct := ROUND(100 * AdjProfitLCY / AmountLCY,0.1);

                       IF Cust.GET("Bill-to Customer No.") THEN
                         Cust.CALCFIELDS("Balance (LCY)")
                       ELSE
                         CLEAR(Cust);

                       CASE TRUE OF
                         Cust."Credit Limit (LCY)" = 0:
                           CreditLimitLCYExpendedPct := 0;
                         Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" < 0:
                           CreditLimitLCYExpendedPct := 0;
                         Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" > 1:
                           CreditLimitLCYExpendedPct := 10000;
                         ELSE
                           CreditLimitLCYExpendedPct := ROUND(Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" * 10000,1);
                       END;

                       SalesInvLine.CalcVATAmountLines(Rec,TempVATAmountLine);
                       // CurrForm.Subform.PAGE.SetTempVATAmountLine(TempVATAmountLine);
                       // CurrForm.Subform.PAGE.InitGlobals("Currency Code",FALSE,FALSE,FALSE,FALSE,"VAT Base Discount %");

                       IF "Transaction No. Serv. Tax" <> 0 THEN BEGIN
                         ServiceTaxAmount2 := ServiceTaxAmount;
                         ServiceTaxeCessAmount2 := ServiceTaxeCessAmount;
                         ServiceTaxSHECessAmount2 := ServiceTaxSHECessAmount;
                         ServiceTaxSBCAmount2 := ServiceTaxSBCAmount;
                         KKCessAmount2 := KKCessAmount;
                         ServiceTaxEntry.RESET;
                         ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
                         ServiceTaxEntry.SETRANGE("Document Type",ServiceTaxEntry."Document Type"::Invoice);
                         ServiceTaxEntry.SETRANGE("Document No.","No.");
                         IF ServiceTaxEntry.FINDFIRST THEN BEGIN

                           IF "Currency Code" <> '' THEN BEGIN
                             ServiceTaxEntry."Service Tax Amount" :=
                               ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
                                   "Posting Date","Currency Code",
                                   ServiceTaxEntry."Service Tax Amount","Currency Factor"));
                             ServiceTaxEntry."eCess Amount" :=
                               ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
                                   "Posting Date","Currency Code",
                                   ServiceTaxEntry."eCess Amount","Currency Factor"));
                             ServiceTaxEntry."SHE Cess Amount" :=
                               ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
                                   "Posting Date","Currency Code",
                                   ServiceTaxEntry."SHE Cess Amount","Currency Factor"));
                             ServiceTaxEntry."Service Tax SBC Amount" :=
                               ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
                                   "Posting Date","Currency Code",
                                   ServiceTaxEntry."Service Tax SBC Amount","Currency Factor"));
                             ServiceTaxEntry."KK Cess Amount" :=
                               ROUND(CurrExchRate.ExchangeAmtLCYToFCY(
                                   "Posting Date","Currency Code",
                                   ServiceTaxEntry."KK Cess Amount","Currency Factor"));

                           END;

                           ServiceTaxAmount := ABS(ServiceTaxEntry."Service Tax Amount");
                           ServiceTaxSBCAmount := ABS(ServiceTaxEntry."Service Tax SBC Amount");
                           ServiceTaxeCessAmount := ABS(ServiceTaxEntry."eCess Amount");
                           ServiceTaxSHECessAmount := ABS(ServiceTaxEntry."SHE Cess Amount");
                           KKCessAmount := ABS(ServiceTaxEntry."KK Cess Amount");
                           NetTotal := NetTotal - ServiceTaxAmount2 - ServiceTaxSBCAmount2 - ServiceTaxeCessAmount2 -
                             KKCessAmount2 - ServiceTaxSHECessAmount2 +
                             ServiceTaxAmount + ServiceTaxSBCAmount + ServiceTaxeCessAmount + ServiceTaxSHECessAmount + KKCessAmount;
                         END ELSE BEGIN
                           ServiceTaxAmount := ServiceTaxAmount - ServiceTaxAmount2;
                           ServiceTaxSBCAmount := ServiceTaxSBCAmount - ServiceTaxSBCAmount2;
                           ServiceTaxeCessAmount := ServiceTaxeCessAmount - ServiceTaxeCessAmount2;
                           ServiceTaxSHECessAmount := ServiceTaxSHECessAmount - ServiceTaxSHECessAmount2;
                           KKCessAmount := KKCessAmount - KKCessAmount2;
                           NetTotal := NetTotal - ServiceTaxAmount2 - ServiceTaxeCessAmount2 - ServiceTaxSHECessAmount2 -
                             ServiceTaxSBCAmount2 - KKCessAmount2;
                         END;
                       END;

                       // NetTotal := NetTotal + VATAmount;

                       VATAmount := 0;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 36  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENN=General] }

    { 2   ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ENN=Amount];
                SourceExpr=CustAmount + InvDiscAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code" }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Inv. Discount Amount;
                           ENN=Inv. Discount Amount];
                SourceExpr=InvDiscAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code" }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Total;
                           ENN=Total];
                SourceExpr=CustAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code" }

    { 1280000;2;Field     ;
                CaptionML=[ENU=Excise Amount;
                           ENN=Excise Amount];
                SourceExpr=ExciseAmount }

    { 1280001;2;Field     ;
                CaptionML=[ENU=Tax Amount;
                           ENN=Tax Amount];
                SourceExpr=TaxAmount }

    { 1500000;2;Field     ;
                CaptionML=[ENU=GST Amount;
                           ENN=GST Amount];
                SourceExpr=GSTAmount;
                Editable=FALSE }

    { 1280007;2;Field     ;
                CaptionML=[ENU=Service Tax Amount;
                           ENN=Service Tax Amount];
                SourceExpr=ServiceTaxAmount + ServiceTaxeCessAmount + ServiceTaxSHECessAmount + ServiceTaxSBCAmount + KKCessAmount }

    { 1280012;2;Field     ;
                CaptionML=[ENU=Charges;
                           ENN=Charges];
                SourceExpr=ChargeAmount }

    { 1500002;2;Field     ;
                CaptionML=[ENU=TCS Amount;
                           ENN=TCS Amount];
                SourceExpr=TCSAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code" }

    { 1280015;2;Field     ;
                CaptionML=[ENU=Net Total;
                           ENN=Net Total];
                SourceExpr=[NetTotal ];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code" }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ENN=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=LineQty }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Parcels;
                           ENN=Parcels];
                DecimalPlaces=0:5;
                SourceExpr=TotalParcels }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Net Weight;
                           ENN=Net Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalNetWeight }

    { 10  ;2   ;Field     ;
                CaptionML=[ENU=Gross Weight;
                           ENN=Gross Weight];
                DecimalPlaces=0:5;
                SourceExpr=TotalGrossWeight }

    { 17  ;2   ;Field     ;
                CaptionML=[ENU=Volume;
                           ENN=Volume];
                DecimalPlaces=0:5;
                SourceExpr=TotalVolume }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Original Cost (LCY);
                           ENN=Original Cost (LCY)];
                SourceExpr=CostLCY;
                AutoFormatType=1 }

    { 35  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Cost (LCY);
                           ENN=Adjusted Cost (LCY)];
                SourceExpr=TotalAdjCostLCY;
                AutoFormatType=1 }

    { 39  ;2   ;Field     ;
                CaptionML=[ENU=Cost Adjmt. Amount (LCY);
                           ENN=Cost Adjmt. Amount (LCY)];
                SourceExpr=TotalAdjCostLCY - CostLCY;
                AutoFormatType=1;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries;
                         END;
                          }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Sales (LCY);
                           ENN=Sales (LCY)];
                SourceExpr=AmountLCY;
                AutoFormatType=1 }

    { 30  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit (LCY);
                           ENN=Original Profit (LCY)];
                SourceExpr=ProfitLCY;
                AutoFormatType=1 }

    { 43  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit (LCY);
                           ENN=Adjusted Profit (LCY)];
                SourceExpr=AdjProfitLCY;
                AutoFormatType=1 }

    { 32  ;2   ;Field     ;
                CaptionML=[ENU=Original Profit %;
                           ENN=Original Profit %];
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct }

    { 41  ;2   ;Field     ;
                CaptionML=[ENU=Adjusted Profit %;
                           ENN=Adjusted Profit %];
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct }

    { 1903289601;1;Group  ;
                CaptionML=[ENU=Customer;
                           ENN=Customer] }

    { 24  ;2   ;Field     ;
                CaptionML=[ENU=Balance (LCY);
                           ENN=Balance (LCY)];
                SourceExpr=Cust."Balance (LCY)";
                AutoFormatType=1 }

    { 21  ;2   ;Field     ;
                CaptionML=[ENU=Credit Limit (LCY);
                           ENN=Credit Limit (LCY)];
                SourceExpr=Cust."Credit Limit (LCY)";
                AutoFormatType=1 }

    { 37  ;2   ;Field     ;
                ExtendedDatatype=Ratio;
                CaptionML=[ENU=Expended % of Credit Limit (LCY);
                           ENN=Expended % of Credit Limit (LCY)];
                ToolTipML=[ENU=Expended % of Credit Limit (LCY);
                           ENN=Expended % of Credit Limit (LCY)];
                SourceExpr=CreditLimitLCYExpendedPct }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=VAT Amount;ENN=VAT Amount';
      Text001@1001 : TextConst 'ENU=%1% VAT;ENN=%1% VAT';
      CurrExchRate@1002 : Record 330;
      SalesInvLine@1003 : Record 113;
      Cust@1004 : Record 18;
      TempVATAmountLine@1005 : TEMPORARY Record 290;
      currency@1022 : Record 4;
      TotalAdjCostLCY@1023 : Decimal;
      CustAmount@1006 : Decimal;
      AmountInclVAT@1007 : Decimal;
      InvDiscAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      CostLCY@1010 : Decimal;
      ProfitLCY@1011 : Decimal;
      ProfitPct@1012 : Decimal;
      AdjProfitLCY@1027 : Decimal;
      AdjProfitPct@1026 : Decimal;
      LineQty@1013 : Decimal;
      TotalNetWeight@1014 : Decimal;
      TotalGrossWeight@1015 : Decimal;
      TotalVolume@1016 : Decimal;
      TotalParcels@1017 : Decimal;
      AmountLCY@1018 : Decimal;
      CreditLimitLCYExpendedPct@1019 : Decimal;
      VATPercentage@1020 : Decimal;
      VATAmountText@1021 : Text[30];
      ExciseAmount@1280007 : Decimal;
      TaxAmount@1280006 : Decimal;
      NetTotal@1280005 : Decimal;
      ChargeAmount@1280004 : Decimal;
      ServiceTaxAmount@1280000 : Decimal;
      ServiceTaxeCessAmount@1500000 : Decimal;
      TCSAmount@1500001 : Decimal;
      ServiceTaxAmount2@1500003 : Decimal;
      ServiceTaxeCessAmount2@1500002 : Decimal;
      ServiceTaxSHECessAmount@1500004 : Decimal;
      ServiceTaxSHECessAmount2@1500005 : Decimal;
      ServiceTaxSBCAmount@1500010 : Decimal;
      ServiceTaxSBCAmount2@1500011 : Decimal;
      KKCessAmount@1500006 : Decimal;
      KKCessAmount2@1500007 : Decimal;
      GSTAmount@1500008 : Decimal;

    BEGIN
    END.
  }
}

