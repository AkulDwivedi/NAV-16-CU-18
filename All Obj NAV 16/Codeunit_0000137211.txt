OBJECT Codeunit 137211 SCM Update Unit Cost
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Item@1004 : Record 27;
      Assert@1005 : Codeunit 130000;
      LibraryERM@1001 : Codeunit 131300;
      LibraryManufacturing@1007 : Codeunit 132202;
      LibraryInventory@1002 : Codeunit 132201;
      LibrarySales@1014 : Codeunit 130509;
      LibraryRandom@1006 : Codeunit 130440;
      IsInitialized@1000 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE TestUpdateUnitCost@2(ParentCostingMethod@1001 : Option;CompCostingMethod@1002 : Option;UpdateReservations@1003 : Boolean);
    VAR
      Item@1010 : Record 27;
      ProductionOrder@1004 : Record 5405;
      ProdOrderLine@1000 : Record 5406;
      ProdOrderLine1@1007 : Record 5406;
      CalcMethod@1006 : 'One Level,All Levels';
      ExpectedUnitCost@1008 : Decimal;
      ExpectedCostAmount@1009 : Decimal;
    BEGIN
      // Setup. Create Production BOM Structure.
      Initialize;
      SetupProdItem(Item,ParentCostingMethod,CompCostingMethod);

      // Create and Refresh Released Production Order.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandInt(10));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,TRUE,TRUE,TRUE);

      // Reserve document line against Prod. Order.
      FindProdOrderLine(ProdOrderLine,ProductionOrder);
      ReserveDocument(ProdOrderLine);
      ExpectedCostAmount := CalcExpectedOrderCost(ProductionOrder);
      ExpectedUnitCost := ExpectedCostAmount / ProdOrderLine."Quantity (Base)";
      // Exercise: Calculate Prod. Order Cost.
      UpdateOrderCost(ProductionOrder,CalcMethod::"All Levels",UpdateReservations);

      // Verify: Unit Cost on Prod. Order Line and related reserved document line.
      FindProdOrderLine(ProdOrderLine1,ProductionOrder);
      Assert.AreNearlyEqual(ExpectedUnitCost,ProdOrderLine1."Unit Cost",LibraryERM.GetUnitAmountRoundingPrecision,
        'Wrong prod. order line unit cost.');
      Assert.AreNearlyEqual(ExpectedCostAmount,ProdOrderLine1."Cost Amount",LibraryERM.GetAmountRoundingPrecision,
        'Wrong prod. order line cost amount.');

      // Reserved line unit cost should not be updated if UpdateReservations is false.
      IF NOT UpdateReservations THEN
        ExpectedUnitCost := ProdOrderLine."Unit Cost";
      VerifyReservedLineUnitCost(ProductionOrder,ExpectedUnitCost);
    END;

    [Test]
    PROCEDURE AvgParentStdCompNoUpd@7();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Average,Item."Costing Method"::Standard,FALSE);
    END;

    [Test]
    PROCEDURE AvgParentStdCompUpdRes@9();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Average,Item."Costing Method"::Standard,TRUE);
    END;

    [Test]
    PROCEDURE AvgParentAvgCompNoUpd@10();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Average,Item."Costing Method"::Average,FALSE);
    END;

    [Test]
    PROCEDURE AvgParentAvgCompUpd@11();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Average,Item."Costing Method"::Average,TRUE);
    END;

    [Test]
    PROCEDURE StdParentAvgCompUpd@12();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Standard,Item."Costing Method"::Average,TRUE);
    END;

    [Test]
    PROCEDURE StdParentAvgCompNoUpd@13();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Standard,Item."Costing Method"::Average,FALSE);
    END;

    [Test]
    PROCEDURE StdParentStdCompUpdRes@14();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Standard,Item."Costing Method"::Standard,TRUE);
    END;

    [Test]
    PROCEDURE StdParentStdCompNoUpd@6();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Standard,Item."Costing Method"::Standard,FALSE);
    END;

    [Test]
    PROCEDURE AvgParentFIFOCompNoUpd@17();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::Average,Item."Costing Method"::FIFO,FALSE);
    END;

    [Test]
    PROCEDURE FIFOParentAvgCompUpdRes@16();
    BEGIN
      TestUpdateUnitCost(Item."Costing Method"::FIFO,Item."Costing Method"::Average,TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE SetupProdItem@18(VAR Item@1004 : Record 27;ParentCostingMethod@1001 : Option;CompCostingMethod@1002 : Option);
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      // Create source Production BOM.
      CreateProductionBOM(ProductionBOMHeader,CompCostingMethod);

      // Create and setup the production item card.
      LibraryInventory.CreateItem(Item);
      IF Item."Base Unit of Measure" <> ProductionBOMHeader."Unit of Measure Code" THEN
        LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",ProductionBOMHeader."Unit of Measure Code",1);
      Item.VALIDATE("Costing Method",ParentCostingMethod);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateProductionBOM@1(VAR ProductionBOMHeader@1000 : Record 99000771;CostingMethod@1004 : Option);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
      UnitOfMeasure@1007 : Record 204;
      Item@1005 : Record 27;
      Counter@1002 : Integer;
    BEGIN
      // Create Production BOM Header.
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure.Code);

      // Add 2 BOM component lines.
      FOR Counter := 1 TO 2 DO BEGIN
        LibraryInventory.CreateItem(Item);
        Item.VALIDATE("Costing Method",CostingMethod);
        Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
        Item.MODIFY(TRUE);
        LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",
          LibraryRandom.RandInt(10));
      END;

      // Certify the BOM.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ReserveDocument@19(ProdOrderLine@1000 : Record 5406);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ProdOrderLine."Item No.",ProdOrderLine.Quantity);
      LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateOrderCost@20(ProductionOrder@1000 : Record 5405;CalcMethod@1002 : Option;UpdateReservations@1003 : Boolean);
    VAR
      UpdateUnitCost@1001 : Report 99001014;
    BEGIN
      UpdateUnitCost.InitializeRequest(CalcMethod,UpdateReservations);
      UpdateUnitCost.SETTABLEVIEW(ProductionOrder);
      UpdateUnitCost.USEREQUESTPAGE(FALSE);
      UpdateUnitCost.RUNMODAL;
    END;

    [Normal]
    LOCAL PROCEDURE CalcExpectedOrderCost@4(ProductionOrder@1000 : Record 5405) : Decimal;
    VAR
      ProdOrderComponent@1001 : Record 5407;
      Item@1003 : Record 27;
      ProdOrderCost@1002 : Decimal;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderCost := 0;

      // Add actual component cost.
      IF ProdOrderComponent.FINDSET THEN
        REPEAT
          Item.GET(ProdOrderComponent."Item No.");
          ProdOrderCost += Item."Unit Cost" * ProdOrderComponent."Expected Qty. (Base)";
        UNTIL ProdOrderComponent.NEXT = 0;

      Item.GET(ProductionOrder."Source No.");
      IF Item."Costing Method" = Item."Costing Method"::Standard THEN
        EXIT(ProductionOrder."Cost Amount");
      EXIT(ProdOrderCost);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyReservedLineUnitCost@5(ProductionOrder@1000 : Record 5405;ExpectedUnitCost@1006 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
      ReservationEntry@1002 : Record 337;
    BEGIN
      // Find matching reservation entry for Production Order.
      ReservationEntry.SETRANGE("Source Type",5406);
      ReservationEntry.SETRANGE("Source ID",ProductionOrder."No.");
      ReservationEntry.SETRANGE("Item No.",ProductionOrder."Source No.");
      ReservationEntry.FINDFIRST;

      // Find Sales side reservation entry.
      ReservationEntry.GET(ReservationEntry."Entry No.",FALSE);

      // Find Sales Line based on reservation info.
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",ReservationEntry."Source ID");
      SalesLine.FINDFIRST;

      Assert.AreNearlyEqual(ExpectedUnitCost,SalesLine."Unit Cost (LCY)",LibraryERM.GetUnitAmountRoundingPrecision,
        'Wrong unit cost in reserved sales line.');
    END;

    [Normal]
    LOCAL PROCEDURE FindProdOrderLine@3(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1001 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [Update Unit Cost] [SCM]
      Test for CU99000757: Update Unit Cost - Update Prod. Order Unit Cost as per the actual components list,
      with the following variations:
      - Different costing method for parent and components (Standard vs. Average)
      - Update Reservations made against the Prod. Order Line or not.
      - All levels of BOM
    }
    END.
  }
}

