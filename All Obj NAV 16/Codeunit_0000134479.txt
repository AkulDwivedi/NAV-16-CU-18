OBJECT Codeunit 134479 ERM Dimension Combination
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryDimension@1012 : Codeunit 131001;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPurchase@1020 : Codeunit 130512;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryRandom@1010 : Codeunit 130440;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryVariableStorage@1015 : Codeunit 131004;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      UnknownError@1005 : TextConst 'ENU=Unknown error.';
      DimensionCombinationError@1003 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. Dimensions %5 and %6 can''t be used concurrently.';
      LineDimensionCombinationError@1007 : TextConst '@@@="%1:Field Value;%2:Field Value;%3:Field Value;%4:Field Value;%5:Field Value;";ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. Dimensions %4 and %5 can''t be used concurrently.';
      HeaderDimensionCombinationError@1021 : TextConst '@@@="%1:Field Value;%2:Field Value;%3:Field Value;%4:Field Value;";ENU=The combination of dimensions used in %1 %2 is blocked. Dimensions %3 and %4 can''t be used concurrently.';
      BlockedDimensionCombinationErr@1008 : TextConst '@@@="%1=First Dimension;%2=Second Dimension";ENU=Dimensions %1 and %2 can''t be used concurrently.';
      DimensionValueCombinationErr@1011 : TextConst '@@@=%1: TableCaption, %2: Field(Gen. Journal Template), %3: Field(Gen. Journal Batch), %4: Field(Line No.), %5: Field(Dimension Code), %6: Field(Dimension Value Code), %7: Field(Dimension Code), %8: Field(Code);ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. Dimension combinations %5 - %6 and %7 - %8 can''t be used concurrently.';
      ColumnInvisibleErr@1014 : TextConst 'ENU=Last column should be visible.';
      ColumnVisibleErr@1013 : TextConst 'ENU=Last column should be invisible.';

    [Test]
    PROCEDURE DimensionCombinationRule@40();
    VAR
      GenJournalLine@1012 : Record 81;
      DimensionCombination@1014 : Record 350;
      DimensionValue@1004 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Test error occurs on Posting General Journal with Dimension Combination for Combination Restriction Blocked.

      // 1. Setup: Create Dimension, Dimension Value, Customer with Default Dimension, Dimension Combination for Combination
      // Restriction Blocked and General Journal with Dimension.
      Initialize;
      CreateCustomerWithDimension(DefaultDimension);
      CreateDimensionCombination(DimensionCombination,DimensionValue,DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Blocked);
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,DefaultDimension."No.");

      // 2. Exercise: Post the General Journal.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify error occurs "Dimension Combination Blocked" on Posting General Journal.
      Assert.AreEqual(
        STRSUBSTNO(
          DimensionCombinationError,GenJournalLine.TABLECAPTION,GenJournalLine."Journal Template Name",
          GenJournalLine."Journal Batch Name",GenJournalLine."Line No.",DefaultDimension."Dimension Code",
          DimensionCombination."Dimension 2 Code"),
        GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE CustomerLedgerEntryCombination@4();
    VAR
      GenJournalLine@1012 : Record 81;
      DimensionCombination@1014 : Record 350;
      DimensionValueCombination@1001 : Record 351;
      DimensionValue@1004 : Record 349;
      DefaultDimension@1002 : Record 352;
      DimensionSetID@1000 : Integer;
    BEGIN
      // Test Dimension on Customer Ledger Entry after Posting General Journal with Limited Dimension Combination.

      // 1. Setup: Create Dimension, Dimension Value, Customer with Default Dimension, Dimension Combination for Combination
      // Restriction Limited and General Journal with Dimension.
      Initialize;
      CreateCustomerWithDimension(DefaultDimension);
      CreateDimensionCombination(DimensionCombination,DimensionValue,DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Limited);
      LibraryDimension.CreateDimValueCombination(
        DimensionValueCombination,DefaultDimension."Dimension Code",DimensionValue."Dimension Code",
        DefaultDimension."Dimension Value Code",DimensionValue.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionValue."Dimension Code");
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,DefaultDimension."No.");
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2. Exercise: Post the General Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Dimension on Customer Ledger Entry.
      VerifyCustomerLedgerDimension(DefaultDimension."No.",DimensionSetID);
      VerifyDimensionSetEntry(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code",DimensionSetID);
      VerifyDimensionSetEntry(DimensionValue."Dimension Code",DimensionValue.Code,DimensionSetID);
    END;

    [Test]
    PROCEDURE PostSalesInvoiceWithBlockedDimensionsOnLine@12();
    VAR
      DimensionCombination@1002 : Record 350;
      DimensionValue@1001 : Record 349;
      DefaultDimension@1000 : Record 352;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
    BEGIN
      // Test the Posting of Sales Invoice with restricts dimension.

      // 1.Setup: Create Dimension, Dimension Value, Customer with Default Dimension, Dimension Combination for Combination
      // Restriction Blocked and Create Sales Invoice with dimensions.
      Initialize;
      CreateCustomerWithDimension(DefaultDimension);
      CreateDimensionCombination(DimensionCombination,DimensionValue,DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Blocked);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,DefaultDimension."No.");
      CreateSalesLine(SalesLine,SalesHeader);
      UpdateSalesLineDimensionSetID(SalesLine,DimensionValue);

      // 2.Exercise: Post Sales Invoice.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3.Verify: Verify Restrict Dimension Error.
      Assert.ExpectedError(
        STRSUBSTNO(
          LineDimensionCombinationError,SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.",
          DefaultDimension."Dimension Code",DimensionCombination."Dimension 2 Code"));
    END;

    [Test]
    PROCEDURE PostPurchaseInvoiceWithBlockedDimensionsOnLine@2();
    VAR
      Item@1003 : Record 27;
      DimensionCombination@1002 : Record 350;
      DimensionValue@1001 : Record 349;
      DefaultDimension@1000 : Record 352;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
    BEGIN
      // Test error occurs on Posting Purchase Invoice with Blocked Dimensions on Line.

      // 1.Setup: Create Item, Vendor with Default Dimension, Dimension Combination for Combination Restriction Blocked and Create Purchase Invoice with dimensions on line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateVendorWithDimension(DefaultDimension);
      CreateDimensionCombination(DimensionCombination,DimensionValue,DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Blocked);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,DefaultDimension."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      UpdatePurchaseLineDimensionSetID(PurchaseLine,DimensionValue);

      // 2.Exercise: Post Purchase Invoice.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3.Verify: Verify Blocked Dimension Error.
      Assert.ExpectedError(
        STRSUBSTNO(
          LineDimensionCombinationError,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.",
          DefaultDimension."Dimension Code",DimensionCombination."Dimension 2 Code"));
    END;

    [Test]
    PROCEDURE PostPurchaseInvoiceWithBlockedDimensionsOnHeader@32();
    VAR
      DimensionCombination@1002 : Record 350;
      DimensionValue@1001 : Record 349;
      DefaultDimension@1000 : Record 352;
      PurchaseHeader@1009 : Record 38;
    BEGIN
      // Test error occurs on Posting Purchase Invoice with Blocked Dimensions on Header.

      // 1.Setup: Create Vendor with Default Dimension, Dimension Combination for Combination Restriction Blocked and Create Purchase Invoice with dimensions on header.
      Initialize;
      CreateVendorWithDimension(DefaultDimension);
      CreateDimensionCombination(DimensionCombination,DimensionValue,DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Blocked);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,DefaultDimension."No.");
      UpdatePurchaseHeaderDimensionSetID(PurchaseHeader,DimensionValue);

      // 2.Exercise: Post Purchase Invoice.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3.Verify: Verify Blocked Dimension Error.
      Assert.ExpectedError(
        STRSUBSTNO(
          HeaderDimensionCombinationError,PurchaseHeader."Document Type",PurchaseHeader."No.",DefaultDimension."Dimension Code",
          DimensionCombination."Dimension 2 Code"))
    END;

    [Test]
    PROCEDURE CreateGLBudgetEntryWithBlockedDimensions@1();
    VAR
      GLBudgetEntry@1004 : Record 96;
      DimensionValue1@1007 : Record 349;
      DimensionValue2@1009 : Record 349;
      NewDimSetID@1000 : Integer;
    BEGIN
      // [SCENARIO] Creating G/L Budget Entry with dimensions, witch included in blocked Dimension Combination. It should not be possible to enter blocked Dimension Combinations in G/L Budget Entry
      Initialize;
      // [GIVEN] Create blocked Dimension Combination and Dimension Set
      NewDimSetID := CreateBlockedDimensionCombination(DimensionValue1,DimensionValue2);
      // [GIVEN] Create G/L Budget Entry with dimensions created below
      CreateGLBudgetEntry(GLBudgetEntry,DimensionValue1."Dimension Code",DimensionValue2."Dimension Code");
      // [WHEN] Create G/L Budget Entry and assign blocked Dimension Set
      ASSERTERROR GLBudgetEntry.VALIDATE("Dimension Set ID",NewDimSetID);
      // [THEN] Expected error
      Assert.ExpectedError(
        STRSUBSTNO(BlockedDimensionCombinationErr,DimensionValue1."Dimension Code",DimensionValue2."Dimension Code"));
    END;

    [Test]
    PROCEDURE TestErrorBlockDimensionCombination@3();
    VAR
      DefaultDimension@1001 : Record 352;
      DimensionValue@1002 : Record 349;
      DimensionCombination@1000 : Record 350;
      GenJournalLine@1003 : Record 81;
      GenJnlPostLine@1004 : Codeunit 12;
    BEGIN
      // [SCENARIO 379598] Gen Journal Line with blank PK fields throws dimension error without referencing to these fields
      Initialize;

      // [GIVEN] Blocked dimension combination
      CreateCustomerWithDimension(DefaultDimension);
      CreateDimensionCombination(DimensionCombination,DimensionValue,DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Blocked);

      // [GIVEN] Gen. Journal Line with blocked dimension combination and blank PK fields
      MockGenJournalLineWithDim(GenJournalLine,DefaultDimension."No.",DimensionValue);

      // [WHEN] Invoke "Gen. Jnl.-Post Line".RunWithCheck
      ASSERTERROR GenJnlPostLine.RunWithCheck(GenJournalLine);

      // [THEN] Error occurs "Dimensions X and Y can't be used concurrently."
      Assert.ExpectedError(
        STRSUBSTNO(
          BlockedDimensionCombinationErr,DimensionCombination."Dimension 1 Code",
          DimensionCombination."Dimension 2 Code"));
    END;

    [Test]
    [HandlerFunctions(MyDimValueCombinationsPageHandler,BlockDimValueCombinationStrMenuHandler)]
    PROCEDURE RestrictionOnLastColumnInDimValueCombMatrixBlocksPosting@10();
    VAR
      DimensionValue@1004 : Record 349;
      DefaultDimension@1001 : Record 352;
      GenJournalLine@1006 : Record 81;
    BEGIN
      // [FEATURE] [Dimension Value Combination]
      // [SCENARIO 380833] Gen. Journal Line cannot be posted with a blocked combination of dimension values when that restriction is set on the last (32-nd) column in Dimension Value Combination Matrix.
      Initialize;

      // [GIVEN] Dimension "D" with 32 values "D1..D32".
      // [GIVEN] Customer with Default Dimension "C" and value "C1".
      // [GIVEN] Combination of values "C1" and "D32" is blocked.
      CreateDimensionsWithLimitedCombinationRestriction(DimensionValue,DefaultDimension);

      // [GIVEN] Gen. Journal Line with dimensions values "C1" and "D32" is created.
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,DefaultDimension."No.");

      // [WHEN] Post the General Journal.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] The posting fails. An error is thrown reading that the combinations of dimension values is blocked.
      Assert.ExpectedError(
        STRSUBSTNO(
          DimensionValueCombinationErr,GenJournalLine.TABLECAPTION,GenJournalLine."Journal Template Name",
          GenJournalLine."Journal Batch Name",GenJournalLine."Line No.",DefaultDimension."Dimension Code",
          DefaultDimension."Dimension Value Code",DimensionValue."Dimension Code",DimensionValue.Code));
    END;

    [Test]
    [HandlerFunctions(MyDimValueCombinationsCheckVisibilityPageHandler)]
    PROCEDURE ColumnVisibilityInDimValueCombMatrixIsUpdatedOnNextColumnAction@61();
    VAR
      DimensionValue@1004 : Record 349;
      DefaultDimension@1003 : Record 352;
    BEGIN
      // [FEATURE] [Dimension Value Combination]
      // [SCENARIO 380833] The last column in Dimension Value Combination Matrix should become invisible when a set of dimension values in columns is shifted left by clicking "Next Column" button.
      Initialize;

      // [GIVEN] Dimension "D" with 32 values "D1..D32".
      // [GIVEN] Dimension "C" with value "C1".

      // [WHEN] Click "Next Column" button on Dimension Value Combination with "C1" in row and "D1..D32" in columns.
      CreateDimensionsWithLimitedCombinationRestriction(DimensionValue,DefaultDimension);

      // [THEN] Column 32 becomes invisible.
      // The vefication is done is MyDimValueCombinationsCheckVisibilityPageHandler.
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@47(VAR DefaultDimension@1000 : Record 352);
    VAR
      Customer@1002 : Record 18;
      Dimension@1001 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimensionCombination@293(VAR DimensionCombination@1000 : Record 350;VAR DimensionValue@1001 : Record 349;DimensionCode@1003 : Code[20]);
    BEGIN
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDimensionCombination(DimensionCombination,DimensionCode,DimensionValue."Dimension Code");
    END;

    LOCAL PROCEDURE CreateBlockedDimensionCombination@20(VAR DimensionValue1@1001 : Record 349;VAR DimensionValue2@1003 : Record 349) NewDimSetID : Integer;
    VAR
      DimensionCombination@1004 : Record 350;
    BEGIN
      CreateDimensionWithValue(DimensionValue1);
      CreateDimensionWithValue(DimensionValue2);
      LibraryDimension.CreateDimensionCombination(DimensionCombination,
        DimensionValue1."Dimension Code",DimensionValue2."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Blocked);
      NewDimSetID := LibraryDimension.CreateDimSet(NewDimSetID,DimensionValue1."Dimension Code",DimensionValue1.Code);
      NewDimSetID := LibraryDimension.CreateDimSet(NewDimSetID,DimensionValue2."Dimension Code",DimensionValue2.Code);
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@235(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateDimensionWithSetOfValues@5(VAR DimensionValue@1000 : Record 349;NoOfValues@1001 : Integer);
    VAR
      Dimension@1003 : Record 348;
      i@1002 : Integer;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      FOR i := 1 TO NoOfValues DO
        LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateDimensionsWithLimitedCombinationRestriction@6(VAR DimensionValue@1003 : Record 349;VAR DefaultDimension@1001 : Record 352);
    VAR
      DimensionCombination@1002 : Record 350;
      MyDimValueCombinations@1000 : Page 9252;
    BEGIN
      CreateDimensionWithSetOfValues(DimensionValue,32); // 32 is a maximum number of columns in Dim. Values Combination Matrix
      CreateCustomerWithDimension(DefaultDimension);

      LibraryDimension.CreateDimensionCombination(
        DimensionCombination,DimensionValue."Dimension Code",DefaultDimension."Dimension Code");
      UpdateCombinationRestriction(DimensionCombination,DimensionCombination."Combination Restriction"::Limited);
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Value Code");
      MyDimValueCombinations.Load(DefaultDimension."Dimension Code",DimensionValue."Dimension Code",TRUE);
      MyDimValueCombinations.RUNMODAL;
    END;

    LOCAL PROCEDURE CreateJournalLine@50(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1002 : Record 232;DocumentType@1000 : Option;AccountType@1005 : Option;AccountNo@1004 : Code[20];Amount@1006 : Decimal);
    VAR
      GLAccount@1007 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalLineWithDimension@51(VAR GenJournalLine@1003 : Record 81;DimensionValue@1000 : Record 349;AccountNo@1004 : Code[20]);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      FindJournalBatchAndTemplate(GenJournalBatch);
      CreateJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,AccountNo,
        LibraryRandom.RandDec(100,2));  // Use Random because value is not important.
      GenJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockGenJournalLineWithDim@33(VAR GenJournalLine@1000 : Record 81;AccountNo@1001 : Code[20];DimensionValue@1002 : Record 349);
    VAR
      SourceCode@1003 : Record 230;
      GenJournalTemplate@1004 : Record 80;
    BEGIN
      CLEAR(GenJournalLine);
      GenJournalLine.INIT;
      GenJournalLine."Account Type" := GenJournalLine."Account Type"::Customer;
      GenJournalLine.VALIDATE("Account No.",AccountNo);
      GenJournalLine.VALIDATE("Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine."Posting Date" := WORKDATE;
      GenJournalLine."Document No." :=
        LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line");
      GenJournalLine.Amount := LibraryRandom.RandDec(1000,2);
      LibraryERM.CreateSourceCode(SourceCode);
      GenJournalLine."Source Code" := SourceCode.Code;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalLine."Journal Template Name" := GenJournalTemplate.Name;
    END;

    LOCAL PROCEDURE CreateSalesLine@22(VAR SalesLine@1002 : Record 37;SalesHeader@1003 : Record 36);
    BEGIN
      // Using Random Number Generator for Amount and Quantity.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,
        SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@1020(VAR DefaultDimension@1000 : Record 352);
    VAR
      Vendor@1002 : Record 23;
      Dimension@1001 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateGLBudgetEntry@28(VAR GLBudgetEntry@1000 : Record 96;Dimension1Code@1001 : Code[20];Dimension2Code@1003 : Code[20]);
    VAR
      GLBudgetName@1005 : Record 95;
      GLAccount@1006 : Record 15;
    BEGIN
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      WITH GLBudgetName DO BEGIN
        VALIDATE("Budget Dimension 1 Code",Dimension1Code);
        VALIDATE("Budget Dimension 2 Code",Dimension2Code);
        MODIFY(TRUE);
      END;
      GLBudgetEntry.INIT;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,WORKDATE,GLAccount."No.",GLBudgetName.Name);
    END;

    LOCAL PROCEDURE FindJournalBatchAndTemplate@94(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.FindGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);  // Added fix to make test world ready.
    END;

    LOCAL PROCEDURE UpdateCombinationRestriction@97(VAR DimensionCombination@1000 : Record 350;CombinationRestriction@1001 : Option);
    BEGIN
      DimensionCombination.VALIDATE("Combination Restriction",CombinationRestriction);
      DimensionCombination.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseHeaderDimensionSetID@1021(VAR PurchaseHeader@1000 : Record 38;DimensionValue@1001 : Record 349);
    BEGIN
      PurchaseHeader.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(PurchaseHeader."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLineDimensionSetID@11(VAR PurchaseLine@1000 : Record 39;DimensionValue@1001 : Record 349);
    BEGIN
      PurchaseLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(PurchaseLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLineDimensionSetID@19(VAR SalesLine@1000 : Record 37;DimensionValue@1001 : Record 349);
    BEGIN
      SalesLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(SalesLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerDimension@323(CustomerNo@1000 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@336(DimensionCode@1000 : Code[20];DimensionValueCode@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    [ModalPageHandler]
    PROCEDURE MyDimValueCombinationsPageHandler@9(VAR MyDimValueCombinations@1000 : TestPage 9252);
    BEGIN
      MyDimValueCombinations.MatrixForm.FILTER.SETFILTER(Code,LibraryVariableStorage.DequeueText);
      MyDimValueCombinations.MatrixForm.Field32.ASSISTEDIT;
      MyDimValueCombinations.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MyDimValueCombinationsCheckVisibilityPageHandler@7(VAR MyDimValueCombinations@1000 : TestPage 9252);
    BEGIN
      Assert.IsTrue(MyDimValueCombinations.MatrixForm.Field32.VISIBLE,ColumnInvisibleErr);
      MyDimValueCombinations.NextColumn.INVOKE;
      Assert.IsFalse(MyDimValueCombinations.MatrixForm.Field32.VISIBLE,ColumnVisibleErr);
    END;

    [StrMenuHandler]
    PROCEDURE BlockDimValueCombinationStrMenuHandler@26(Options@1000 : Text;VAR Choice@1001 : Integer;Instructions@1002 : Text);
    BEGIN
      Choice := 2;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Combination Restriction]
      Unsupported version tags:
      NA: Unable to Execute

      Test for Dimension on General Documents:
        1. Test on Posting General Journal with Dimension Combination for Combination Restriction Blocked error occurs.
        2. Test Dimension on Customer Ledger Entry after Posting General Journal with Limited Dimension Combination.
           error occurs.
        3. Test the Posting of Sales Invoice with Dimension Combination for Combination Restriction Blocked error occurs.
        4. Test error occurs on Posting Purchase Invoice with Blocked Dimensions on Line.
        5. Test error occurs on Posting Purchase Invoice with Blocked Dimensions on Header.
        6. Test error occurs on creating new G/L Budget Entry.

      TFS_TS_ID = 202356
      Cover Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ---------------------------------------------------------------------
      DimensionCombinationRule, CustomerLedgerEntryCombination       140733

      TFS_TS_ID = 206078
      Covers Test cases:
      ----------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ----------------------------------------------------------------------
      PostSalesInvoiceWithBlockedDimensionsOnLine                    141386

      TFS_TS_ID = 291175
      Covers Test cases:
      ----------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ----------------------------------------------------------------------
      PostPurchaseInvoiceWithBlockedDimensionsOnLine,                291175
      PostPurchaseInvoiceWithBlockedDimensionsOnHeader

      ----------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ----------------------------------------------------------------------
      CreateGLBudgetEntryWithBlockedDimensionCombination             360943
    }
    END.
  }
}

