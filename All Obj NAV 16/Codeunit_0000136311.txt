OBJECT Codeunit 136311 Job Reports II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      JobsUtil@1003 : Codeunit 131920;
      Assert@1002 : Codeunit 130000;
      LibraryERM@1027 : Codeunit 131300;
      LibraryService@1001 : Codeunit 131902;
      LibraryReportValidation@1007 : Codeunit 131002;
      LibraryVariableStorage@1035 : Codeunit 131004;
      LibraryReportDataset@1036 : Codeunit 131007;
      LibraryUtility@1041 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      AmountError@1006 : TextConst 'ENU=Total amount must be equal.';
      CurrencyField@1016 : 'Local Currency,Foreign Currency';
      AmountField@1020 : ' ,Schedule Price,Usage Price,Contract Price,Invoiced Price,Schedule Cost,Usage Cost,Contract Cost,Invoiced Cost,Schedule Profit,Usage Profit,Contract Profit,Invoiced Profit';
      ContractPriceCaption@1026 : TextConst 'ENU=Contract Price\%1';
      ContractCostCaption@1025 : TextConst 'ENU=Contract Cost\%1';
      ContractProfitCaption@1024 : TextConst 'ENU=Contract Profit\%1';
      JobJournalTemplateName@1028 : Code[10];
      JobJournalBatchName@1029 : Code[10];
      ContractLineAmount@1009 : TextConst 'ENU=Contract Line Amount';
      DimensionText@1033 : TextConst 'ENU=%1 - %2';
      FormatString@1015 : TextConst 'ENU=<Precision,0:2><Standard Format,1>';
      InvoicedPriceCaption@1023 : TextConst 'ENU=Inv. Price\%1';
      InvoicedCostCaption@1022 : TextConst 'ENU=Inv. Cost\%1';
      InvoicedProfitCaption@1021 : TextConst 'ENU=Inv. Profit\%1';
      LineDiscountAmount@1019 : TextConst 'ENU=Line Discount Amount (%1)';
      LineAmount@1018 : TextConst 'ENU=Line Amount (%1)';
      SchedulePriceCaption@1012 : TextConst 'ENU=Sch. Price\%1';
      ScheduleCostCaption@1011 : TextConst 'ENU=Sch. Cost\%1';
      ScheduleProfitCaption@1010 : TextConst 'ENU=Sch. Profit\%1';
      ScheduleLineAmount@1004 : TextConst 'ENU=Schedule Line Amount';
      TotalContract@1034 : TextConst 'ENU=Total Contract';
      TotalCost@1017 : TextConst 'ENU=Total Cost (%1)';
      UsagePriceCaption@1032 : TextConst 'ENU=Usage Price\%1';
      UsageCostCaption@1031 : TextConst 'ENU=Usage Cost\%1';
      UsageProfitCaption@1030 : TextConst 'ENU=Usage Profit\%1';
      UsageLineAmount@1005 : TextConst 'ENU=Usage Line Amount';
      ValueNotFoundError@1014 : TextConst 'ENU=Value must exist.';
      ValueFoundError@1013 : TextConst 'ENU=Value must not exist.';
      ValueNotMatchError@1008 : TextConst 'ENU=Value must match.';
      DocEntryTableNameCaption@1037 : TextConst 'ENU=DocEntryTableName';
      DocEntryNoofRecordsCaption@1038 : TextConst 'ENU=DocEntryNoofRecords';
      PostingDateCaption@1039 : TextConst 'ENU=PstDate_ResLedgEntry';
      UnitCostResLedgEntryCaption@1040 : TextConst 'ENU=UnitCost_ResLedgEntry';
      CouldNotFindPostingGroupErr@1170000000 : TextConst 'ENU=Could not find a posting group for customer';

    LOCAL PROCEDURE Initialize@42();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // To clear all Global variables.
      ClearGlobals;

      IF IsInitialized THEN
        EXIT;
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPerCustomerReport@4();
    VAR
      Job@1001 : Record 167;
    BEGIN
      // Verify Jobs Per Customer report.

      // 1. Setup.
      Initialize;
      CreateInitialSetupForJob(Job);

      // 2. Exercise: Run Jobs Per Customer Report.
      RunJobPerCustomerReport(Job."Bill-to Customer No.");

      // 3. Verify: Verify Jobs Per Customer report preview.
      VerifyJobPerCustomerReport(Job."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ItemPerJobReport@38();
    VAR
      JobJournalLine@1007 : Record 210;
      JobNo@1000 : Code[20];
    BEGIN
      // Verify Item Per Job report.

      // 1. Setup: Create Job with Job Task and Resource.
      Initialize;
      JobNo := CreateAndPostJobJournalLine(JobJournalLine."Line Type"::" ",'');

      // 2. Exercise: Run Item Per Job Report.
      RunItemPerJobReport(JobNo);

      // 3. Verify: Verify Items PerJob report preview.
      VerifyItemPerJobReport(JobNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobPerItemReport@9();
    VAR
      JobJournalLine@1007 : Record 210;
      JobNo@1000 : Code[20];
    BEGIN
      // Verify Job Per Item report.

      // 1. Setup: Create Job with Job Task.
      Initialize;
      JobNo := CreateAndPostJobJournalLine(JobJournalLine."Line Type"::" ",'');

      // 2. Exercise: Run Job Per Item Report.
      RunJobPerItemReport(JobNo);

      // 3. Verify: Verify Job Per Item report preview.
      VerifyJobPerItemReport(JobNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobRegisterReport@61();
    VAR
      JobJournalLine@1007 : Record 210;
      JobNo@1000 : Code[20];
    BEGIN
      // Verify Job Register report.

      // 1. Setup: Create Job with Job Task.
      Initialize;
      JobNo := CreateAndPostJobJournalLine(JobJournalLine."Line Type"::" ",'');

      // 2. Exercise: Run Job Register Report.
      RunJobRegisterReport(JobNo);

      // 3. Verify: Verify Job Register report preview.
      VerifyJobRegisterReport(JobNo);
    END;

    [Test]
    PROCEDURE JobPlanningLinesReportWithLCY@25();
    BEGIN
      // Verify Job Planning Lines Report with Local Currency.
      Initialize;
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      JobPlanningLinesReportWithCurrency('',GetLCYCode);  // Use blank for Currency.
    END;

    [Test]
    PROCEDURE JobPlanningLinesReportWithFCY@27();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Verify Job Planning Lines Report with Foreign Currency.
      Initialize;
      CurrencyField := CurrencyField::"Foreign Currency";  // Assign in Global variable.
      CurrencyCode := CreateCurrencyWithExchangeRate;
      JobPlanningLinesReportWithCurrency(CurrencyCode,CurrencyCode);
    END;

    [Test]
    PROCEDURE VerifyJobPlanningLinesReportDates@79();
    VAR
      JobPlanningLine@1001 : Record 1003;
      ContractPrice@1004 : Decimal;
      ContractCost@1005 : Decimal;
    BEGIN
      // Verify Job Planning Lines report with Planning Date Filter.

      // Setup.
      Initialize;
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      PrepareJobPlanningLinesReportWithCurrency('',JobPlanningLine,ContractPrice,ContractCost);
      WITH JobPlanningLine DO BEGIN
        VALIDATE("Planning Date",CALCDATE('<+1M>',WORKDATE));
        MODIFY;
      END;

      // Exercise.
      RunJobPlanningLinesReportWorkdate(JobPlanningLine);

      // Verify.
      VerifyJobPlanningLinesReportWorkdate(
        JobPlanningLine."Line Amount",JobPlanningLine."Total Cost",ContractPrice,ContractCost);
    END;

    [Test]
    PROCEDURE JobPlanningLineReportHeading@80();
    VAR
      Job@1002 : Record 167;
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Verify printing of job no. header info in Job Planning Lines report.

      // Setup.
      Initialize;
      JobsUtil.CreateJob(Job);
      Job.VALIDATE(Description,LibraryUtility.GenerateGUID);
      Job.MODIFY(TRUE);
      JobsUtil.CreateJobTask(Job,JobTask);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);

      // Exercise.
      RunJobPlanningLinesReportWorkdate(JobPlanningLine);

      // Verify
      VerifyJobPlanningLinesReportHeading(Job);
    END;

    LOCAL PROCEDURE JobPlanningLinesReportWithCurrency@36(CurrencyCode@1000 : Code[10];CurrencyOption@1002 : Code[10]);
    VAR
      JobPlanningLine@1001 : Record 1003;
      ContractPrice@1005 : Decimal;
      ContractCost@1004 : Decimal;
    BEGIN
      // 1. Setup.
      PrepareJobPlanningLinesReportWithCurrency(CurrencyCode,JobPlanningLine,ContractPrice,ContractCost);

      // 2. Exercise: Save Job Planning Lines Report.
      RunJobPlanningLinesReport(JobPlanningLine);

      // 3. Verify: Verify Job Planning Lines Report.
      VerifyJobPlanningLinesReport(
        JobPlanningLine,CurrencyOption,JobPlanningLine."Line Amount",JobPlanningLine."Total Cost",ContractPrice,ContractCost);
    END;

    LOCAL PROCEDURE PrepareJobPlanningLinesReportWithCurrency@88(CurrencyCode@1000 : Code[10];VAR JobPlanningLine@1004 : Record 1003;VAR ContractPrice@1001 : Decimal;VAR ContractCost@1003 : Decimal);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      // Create Job and Job Task with Currency and create Job Planning Lines for Schedule and Contract.
      CreateJobWithJobTask(JobTask,CurrencyCode);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      ContractPrice := JobPlanningLine."Line Amount";
      ContractCost := JobPlanningLine."Total Cost";
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
    END;

    [Test]
    PROCEDURE JobAnalysisReportForScheduleWithLCY@2();
    BEGIN
      // Verify Job Analysis report for Schedule Price, Schedule Cost and Schedule Profit in Local Currency.
      Initialize;
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      JobAnalysisReportForSchedule('',GetLCYCode);  // Use blank for Currency.
    END;

    [Test]
    PROCEDURE JobAnalysisReportForScheduleWithFCY@3();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Verify Job Analysis report for Schedule Price, Schedule Cost and Schedule Profit in Foreign Currency.
      Initialize;
      CurrencyField := CurrencyField::"Foreign Currency";  // Assign in Global variable.
      CurrencyCode := CreateCurrencyWithExchangeRate;
      JobAnalysisReportForSchedule(CurrencyCode,CurrencyCode);
    END;

    LOCAL PROCEDURE JobAnalysisReportForSchedule@49(CurrencyCode@1001 : Code[10];CurrencyOption@1000 : Code[10]);
    VAR
      JobTask@1005 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      NewAmountField@1003 : ARRAY [8] OF Option;
      NewCurrencyField@1002 : ARRAY [8] OF Option;
    BEGIN
      // 1. Setup: Create Job and Job Task with Currency and create Job Planning Lines for Schedule.
      CreateJobWithJobTask(JobTask,CurrencyCode);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      SetupAmountArray(NewAmountField,AmountField::"Schedule Price",AmountField::"Schedule Cost",AmountField::"Schedule Profit");
      SetupCurrencyArray(NewCurrencyField);

      // 2. Exercise: Save Job Analysis Report.
      RunJobAnalysisReport(JobPlanningLine."Job No.",NewAmountField,NewCurrencyField,FALSE);

      // 3. Verify: Verify Job Analysis Report.
      VerifyJobAnalysisReport(JobPlanningLine,STRSUBSTNO(SchedulePriceCaption,CurrencyOption),
        STRSUBSTNO(ScheduleCostCaption,CurrencyOption),STRSUBSTNO(ScheduleProfitCaption,CurrencyOption));
    END;

    [Test]
    PROCEDURE JobAnalysisReportForContractWithLCY@5();
    BEGIN
      // Verify Job Analysis report for Contract Price, Contract Cost and Contract Profit in Local Currency.
      Initialize;
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      JobAnalysisReportForContract('',GetLCYCode);  // Use blank for Currency.
    END;

    [Test]
    PROCEDURE JobAnalysisReportForContractWithFCY@18();
    VAR
      CurrencyCode@1004 : Code[10];
    BEGIN
      // Verify Job Analysis report for Contract Price, Contract Cost and Contract Profit in Foreign Currency.
      Initialize;
      CurrencyField := CurrencyField::"Foreign Currency";  // Assign in Global variable.
      CurrencyCode := CreateCurrencyWithExchangeRate;
      JobAnalysisReportForContract(CurrencyCode,CurrencyCode);
    END;

    LOCAL PROCEDURE JobAnalysisReportForContract@17(CurrencyCode@1001 : Code[10];CurrencyOption@1000 : Code[10]);
    VAR
      JobTask@1005 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      NewAmountField@1003 : ARRAY [8] OF Option;
      NewCurrencyField@1002 : ARRAY [8] OF Option;
    BEGIN
      // 1. Setup: Create Job and Job Task with Currency and create Job Planning Lines for Contract.
      CreateJobWithJobTask(JobTask,CurrencyCode);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      SetupAmountArray(NewAmountField,AmountField::"Contract Price",AmountField::"Contract Cost",AmountField::"Contract Profit");
      SetupCurrencyArray(NewCurrencyField);

      // 2. Exercise: Save Job Analysis Report.
      RunJobAnalysisReport(JobPlanningLine."Job No.",NewAmountField,NewCurrencyField,FALSE);

      // 3. Verify: Verify Job Analysis Report.
      VerifyJobAnalysisReport(JobPlanningLine,STRSUBSTNO(ContractPriceCaption,CurrencyOption),
        STRSUBSTNO(ContractCostCaption,CurrencyOption),STRSUBSTNO(ContractProfitCaption,CurrencyOption));
    END;

    [Test]
    [HandlerFunctions(JobTransferJobPlanningLinePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobAnalysisReportForUsageWithLCY@21();
    BEGIN
      // Verify Job Analysis report for Usage Price, Usage Cost and Usage Profit in Local Currency.
      Initialize;
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      JobAnalysisReportForUsage('',GetLCYCode);  // Use blank for Currency.
    END;

    [Test]
    [HandlerFunctions(JobTransferJobPlanningLinePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobAnalysisReportForUsageWithFCY@26();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Verify Job Analysis report for Usage Price, Usage Cost and Usage Profit in Foreign Currency.
      Initialize;
      CurrencyField := CurrencyField::"Foreign Currency";  // Assign in Global variable.
      CurrencyCode := CreateCurrencyWithExchangeRate;
      JobAnalysisReportForUsage(CurrencyCode,CurrencyCode);
    END;

    LOCAL PROCEDURE JobAnalysisReportForUsage@45(CurrencyCode@1001 : Code[10];CurrencyOption@1000 : Code[10]);
    VAR
      JobPlanningLine@1004 : Record 1003;
      NewAmountField@1003 : ARRAY [8] OF Option;
      NewCurrencyField@1002 : ARRAY [8] OF Option;
    BEGIN
      // 1. Setup: Post Usage for Job with Currency.
      CreateAndPostJobJournalLineForUsage(JobPlanningLine,CurrencyCode);
      SetupAmountArray(NewAmountField,AmountField::"Usage Price",AmountField::"Usage Cost",AmountField::"Usage Profit");
      SetupCurrencyArray(NewCurrencyField);

      // 2. Exercise: Save Job Analysis Report.
      RunJobAnalysisReport(JobPlanningLine."Job No.",NewAmountField,NewCurrencyField,FALSE);

      // 3. Verify: Verify Job Analysis Report.
      VerifyJobAnalysisReport(JobPlanningLine,STRSUBSTNO(UsagePriceCaption,CurrencyOption),
        STRSUBSTNO(UsageCostCaption,CurrencyOption),STRSUBSTNO(UsageProfitCaption,CurrencyOption));
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE JobAnalysisReportForInvoiceWithLCY@28();
    BEGIN
      // Verify Job Analysis report for Invoiced Price, Invoiced Cost and Invoiced Profit in Local Currency.
      Initialize;
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      JobAnalysisReportForInvoice('',GetLCYCode);  // Use blank for Currency.
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE JobAnalysisReportForInvoiceWithFCY@29();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Verify Job Analysis report for Invoiced Price, Invoiced Cost and Invoiced Profit in Foreign Currency.
      Initialize;
      CurrencyField := CurrencyField::"Foreign Currency";  // Assign in Global variable.
      CurrencyCode := CreateCurrencyWithExchangeRate;
      JobAnalysisReportForInvoice(CurrencyCode,CurrencyCode);
    END;

    LOCAL PROCEDURE JobAnalysisReportForInvoice@46(CurrencyCode@1001 : Code[10];CurrencyOption@1000 : Code[10]);
    VAR
      JobPlanningLine@1004 : Record 1003;
      NewAmountField@1003 : ARRAY [8] OF Option;
      NewCurrencyField@1002 : ARRAY [8] OF Option;
    BEGIN
      // 1. Setup: Post Sales Invoice for Job with Currency.
      CreateAndPostSalesInvoiceForJob(JobPlanningLine,CurrencyCode);
      SetupAmountArray(NewAmountField,AmountField::"Invoiced Price",AmountField::"Invoiced Cost",AmountField::"Invoiced Profit");
      SetupCurrencyArray(NewCurrencyField);

      // 2. Exercise: Save Job Analysis Report.
      RunJobAnalysisReport(JobPlanningLine."Job No.",NewAmountField,NewCurrencyField,FALSE);

      // 3. Verify: Verify Job Analysis Report.
      VerifyJobAnalysisReport(JobPlanningLine,STRSUBSTNO(InvoicedPriceCaption,CurrencyOption),
        STRSUBSTNO(InvoicedCostCaption,CurrencyOption),STRSUBSTNO(InvoicedProfitCaption,CurrencyOption));
    END;

    [Test]
    PROCEDURE JobAnalysisReportExcludeZeroLine@41();
    VAR
      JobTaskNo@1000 : Code[20];
    BEGIN
      // Verify Job Task Line with zero amount does not exist on Job Analysis Report when Exclude Zero Lines boolean is True.
      Initialize;
      JobTaskNo := RunJobAnalysisReportWithMultipleJobTask(TRUE);  // True is to Exclude Zero Lines.

      // 3. Verify: Verify Job Task Line with zero amount does not exist on Job Analysis Report.
      LibraryReportValidation.OpenFile;
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(JobTaskNo),ValueFoundError);
    END;

    [Test]
    PROCEDURE JobAnalysisReportIncludeZeroLine@1();
    VAR
      JobTaskNo@1001 : Code[20];
    BEGIN
      // Verify Job Task Line with zero amount exists on Job Analysis Report when Exclude Zero Lines boolean is False.
      Initialize;
      JobTaskNo := RunJobAnalysisReportWithMultipleJobTask(FALSE);  // False is to Include Zero Lines.

      // 3. Verify: Verify Job Task Line with zero amount exists on Job Analysis Report.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(JobTaskNo),ValueNotFoundError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobActualToBudgetWithLCY@58();
    BEGIN
      // Verify Job Actual To Budget Report.
      JobActualToBudget('',CurrencyField::"Local Currency");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobActualToBudgetWithFCY@86();
    BEGIN
      // Verify Job Actual To Budget Report With Currency.
      JobActualToBudget(CreateCurrencyWithExchangeRate,CurrencyField::"Foreign Currency");
    END;

    LOCAL PROCEDURE JobActualToBudget@71(CurrencyCode@1001 : Code[10];NewCurrencyField@1000 : Option);
    VAR
      JobJournalLine@1004 : Record 210;
      JobLedgerEntry@1003 : Record 169;
      JobNo@1002 : Code[20];
    BEGIN
      // 1. Setup.
      Initialize;
      CurrencyField := NewCurrencyField;  // Assign in Global variable.
      JobNo := CreateAndPostJobJournalLine(JobJournalLine."Line Type"::Contract,CurrencyCode);

      // 2. Exercise: Run Job Actual To Budget Report.
      RunJobActualToBudgetReport(JobNo);

      // 3. Verify: Verify Job Actual To Budget Report.
      FindJobLedgerEntry(JobLedgerEntry,JobNo);
      VerfiyJobActualToBudgetReport(JobLedgerEntry);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobSuggestedBillingWithLCY@57();
    BEGIN
      // Verify Job Suggested Billing Report.

      // 1. Setup.
      Initialize;
      JobSuggestedBilling('',GetLCYCode,CurrencyField::"Local Currency");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobSuggestedBillingWithFCY@56();
    VAR
      CurrencyCode@1005 : Code[10];
    BEGIN
      // Verify Job Suggested Billing Report with Curreny.

      // 1. Setup.
      Initialize;
      CurrencyCode := CreateCurrencyWithExchangeRate;
      JobSuggestedBilling(CurrencyCode,CurrencyCode,CurrencyField::"Foreign Currency");
    END;

    LOCAL PROCEDURE JobSuggestedBilling@73(CurrencyCode@1003 : Code[10];LCYCurrencyCode@1005 : Code[10];NewCurrencyField@1004 : Option);
    VAR
      JobJournalLine@1000 : Record 210;
      JobLedgerEntry@1002 : Record 169;
      JobNo@1001 : Code[20];
    BEGIN
      CurrencyField := NewCurrencyField;  // Assign in Global variable.
      JobNo := CreateAndPostJobJournalLine(JobJournalLine."Line Type"::Contract,CurrencyCode);

      // 2. Exercise: Run Job Suggested Billing Report.
      RunJobSuggestedBilling(JobNo);

      // 3. Verify: Verify Job Suggested Billing Report.
      FindJobLedgerEntry(JobLedgerEntry,JobNo);
      VerfiyJobSuggestedBillingReport(JobLedgerEntry);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(LCYCurrencyCode),ValueNotFoundError);
    END;

    [Test]
    PROCEDURE JobJournalTest@55();
    VAR
      JobTask@1001 : Record 1001;
      JobJournalLine@1000 : Record 210;
    BEGIN
      // Verify Job Journal Test Report.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask,'');
      JobsUtil.CreateJobJournalLineForType(JobJournalLine."Line Type"::Contract,JobJournalLine.Type::Item,JobTask,JobJournalLine);

      // 2. Exercise: Run Job Journal Test Report.
      RunJobJournalTestReport(JobJournalLine,FALSE);

      // 3. Verify: Verify Job Journal Test Report preview.
      VerifyJobJournalTestReport(JobJournalLine);
    END;

    [Test]
    PROCEDURE JobJournalTestWithDimension@53();
    VAR
      Dimension@1005 : Record 348;
      DefaultDimension@1004 : Record 352;
      DimensionValue@1003 : Record 349;
      Item@1002 : Record 27;
      JobTask@1001 : Record 1001;
      JobJournalLine@1000 : Record 210;
      LibraryDimension@1006 : Codeunit 131001;
      LibraryInventory@1007 : Codeunit 132201;
    BEGIN
      // Verify Job Journal Test Report with Dimension.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask,'');
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(
        DefaultDimension,LibraryInventory.CreateItem(Item),Dimension.Code,DimensionValue.Code);
      JobsUtil.CreateJobJournalLineForType(JobJournalLine."Line Type"::Contract,JobJournalLine.Type::Item,JobTask,JobJournalLine);
      UpdateJobJournalLine(JobJournalLine,Item."No.",RANDOM(100),RANDOM(100));  // Using Random for Quantity and Unit Cost.

      // 2. Exercise: Run Job Journal Test Report.
      RunJobJournalTestReport(JobJournalLine,TRUE);

      // 3. Verify: Verify Job Journal Test Report preview.
      VerifyJobJournalTestReport(JobJournalLine);
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(STRSUBSTNO(DimensionText,Dimension.Code,DimensionValue.Code)),ValueNotMatchError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobTransactionDetailWithLCY@52();
    BEGIN
      // Verify Job Transaction Detail Report.
      JobTransactionDetail('',CurrencyField::"Local Currency");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobTransactionDetailWithFCY@51();
    BEGIN
      // Verify Job Transaction Detail Report with Curreny.
      JobTransactionDetail(CreateCurrencyWithExchangeRate,CurrencyField::"Foreign Currency");
    END;

    LOCAL PROCEDURE JobTransactionDetail@81(CurrencyCode@1004 : Code[10];NewCurrencyField@1000 : Option);
    VAR
      JobJournalLine@1001 : Record 210;
      JobLedgerEntry@1003 : Record 169;
      JobNo@1002 : Code[20];
    BEGIN
      // 1. Setup.
      Initialize;
      CurrencyField := NewCurrencyField;
      JobNo := CreateAndPostJobJournalLine(JobJournalLine."Line Type"::Contract,CurrencyCode);

      // 2. Exercise: Run Job Journal Test Report.
      RunJobTransactionDetail(JobNo);

      // 3. Verify: Verify Job Transaction Detail Report.
      FindJobLedgerEntry(JobLedgerEntry,JobNo);
      VerfiyJobTransactionDetailReport(JobLedgerEntry);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,DocumentEntriesReqPageHandler,NavigatePageHandler)]
    PROCEDURE DocumentEntriesForJobAndResource@74();
    VAR
      JobTask@1000 : Record 1001;
      JobJournalLine@1001 : Record 210;
      JobLedgerEntry@1004 : Record 169;
      ResLedgerEntry@1003 : Record 203;
      JobLedgerEntries@1002 : TestPage 92;
    BEGIN
      // Verify: Verify Document Entries Report with Job Ledger, Res. Ledger and Unit Cost.

      // Setup: Create Job Task, create Job Journal Line and post.
      Initialize;
      CreateJobWithJobTask(JobTask,CreateCurrencyWithExchangeRate);
      JobsUtil.CreateJobJournalLineForType(JobJournalLine."Line Type"::Contract,JobJournalLine.Type::Resource,JobTask,JobJournalLine);
      JobsUtil.PostJobJournal(JobJournalLine);
      LibraryVariableStorage.Enqueue(FALSE);  // Enqueue for DocumentEntriesReqPageHandler.
      JobLedgerEntries.OPENVIEW;
      JobLedgerEntries.FILTER.SETFILTER("Job No.",JobTask."Job No.");

      // Exercise.
      JobLedgerEntries.Action22.INVOKE;  // Navigate.

      // Verify: Verify Document Entries Report with Job Ledger, Res. Ledger and Unit Cost.
      JobLedgerEntry.SETRANGE("Job No.",JobTask."Job No.");
      LibraryReportDataset.LoadDataSetFile;
      VerifyDocumentEntries(JobLedgerEntry.TABLECAPTION,JobLedgerEntry.COUNT);
      ResLedgerEntry.SETRANGE("Job No.",JobTask."Job No.");
      VerifyDocumentEntries(ResLedgerEntry.TABLECAPTION,ResLedgerEntry.COUNT);
      FindJobLedgerEntry(JobLedgerEntry,JobTask."Job No.");
      LibraryReportDataset.SetRange(PostingDateCaption,FORMAT(JobLedgerEntry."Posting Date"));
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(UnitCostResLedgEntryCaption,JobLedgerEntry."Unit Cost (LCY)");
    END;

    LOCAL PROCEDURE RunJobAnalysisReportWithMultipleJobTask@43(ExcludeZeroLines@1006 : Boolean) : Code[20];
    VAR
      Job@1005 : Record 167;
      JobTask@1004 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      NewAmountField@1001 : ARRAY [8] OF Option;
      NewCurrencyField@1000 : ARRAY [8] OF Option;
    BEGIN
      // 1. Setup: Create Job and Job Planning Lines with Multiple Job Tasks.
      CurrencyField := CurrencyField::"Local Currency";  // Assign in Global variable.
      JobsUtil.CreateJob(Job);
      JobsUtil.CreateJobTask(Job,JobTask);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobsUtil.CreateJobTask(Job,JobTask);
      JobsUtil.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::"G/L Account",JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Quantity,0); // Take zero Quantity to make the Amounts zero on the line.
      JobPlanningLine.MODIFY(TRUE);
      SetupAmountArray(NewAmountField,AmountField::"Contract Price",AmountField::"Contract Cost",AmountField::"Contract Profit");
      SetupCurrencyArray(NewCurrencyField);

      // 2. Exercise: Save Job Analysis Report.
      RunJobAnalysisReport(JobPlanningLine."Job No.",NewAmountField,NewCurrencyField,ExcludeZeroLines);
      EXIT(JobPlanningLine."Job Task No.");
    END;

    LOCAL PROCEDURE ClearGlobals@40();
    BEGIN
      CLEAR(LibraryReportValidation);
      CLEAR(CurrencyField);
      CLEAR(AmountField);
      JobJournalTemplateName := '';
      JobJournalBatchName := '';
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLine@6(LineType@1000 : Option;CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      JobJournalLine@1001 : Record 210;
      JobTask@1003 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask,CurrencyCode);
      JobsUtil.CreateJobJournalLineForType(LineType,JobJournalLine.Type::Item,JobTask,JobJournalLine);
      JobsUtil.PostJobJournal(JobJournalLine);
      EXIT(JobTask."Job No.");
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@82() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateInitialSetupForJob@50(VAR Job@1001 : Record 167);
    VAR
      JobWIPMethod@1000 : Record 1006;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1004 : Record 210;
    BEGIN
      JobsUtil.CreateJobWIPMethod(JobWIPMethod);
      CreateJobWithWIPMethod(Job,JobWIPMethod.Code);
      CreateJobTask(JobTask,Job,JobTask."Job Task Type"::Posting,JobTask."WIP-Total"::" ");
      CreateJobPlanningLine(JobPlanningLine,JobTask);
      JobsUtil.CreateJobJournalLineForType(JobsUtil.UsageLineTypeContract,JobsUtil.ResourceType,JobTask,JobJournalLine);
      UpdateJobJournalLine(JobJournalLine,JobPlanningLine."No.",JobPlanningLine.Quantity / 2,JobPlanningLine."Unit Cost");  // Use partial Quantity.
      JobsUtil.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@13(VAR JobPlanningLine@1001 : Record 1003;JobTask@1000 : Record 1001);
    BEGIN
      // Use Random values for Quantity and Unit Cost because values are not important.
      JobsUtil.CreateJobPlanningLine(JobsUtil.PlanningLineTypeSchedule,JobsUtil.ResourceType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",CreateResource);
      JobPlanningLine.VALIDATE(Quantity,RANDOM(100));
      JobPlanningLine.VALIDATE("Unit Cost",RANDOM(100));
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobTask@10(VAR JobTask@1000 : Record 1001;Job@1001 : Record 167;JobTaskType@1003 : Option;WIPTotal@1002 : Option);
    BEGIN
      JobsUtil.CreateJobTask(Job,JobTask);
      JobTask.VALIDATE("Job Task Type",JobTaskType);
      JobTask.VALIDATE("WIP-Total",WIPTotal);
      JobTask.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeCustBusPostingGroup@1170000001(Job@1170000000 : Record 167);
    VAR
      Customer@1170000001 : Record 18;
      GeneralPostingSetup@1170000002 : Record 252;
      GeneralPostingSetup2@1170000003 : Record 252;
    BEGIN
      Customer.GET(Job."Bill-to Customer No.");

      // We cannot post in India foreign currency against captive, we need to find a group with full set of records defined
      WITH GeneralPostingSetup DO BEGIN
        SETFILTER("Gen. Bus. Posting Group",'<>%1','');
        SETFILTER("Gen. Prod. Posting Group",'<>%1','');
        SETFILTER("Sales Account",'<>%1','');
        SETFILTER("Purch. Account",'<>%1','');
        SETFILTER("COGS Account",'<>%1','');
        SETFILTER("COGS Account (Interim)",'<>%1','');
        SETFILTER("Inventory Adjmt. Account",'<>%1','');
        SETFILTER("Sales Credit Memo Account",'<>%1','');
        SETFILTER("Purch. Credit Memo Account",'<>%1','');
        SETFILTER("Direct Cost Applied Account",'<>%1','');
        SETFILTER("Overhead Applied Account",'<>%1','');
        SETFILTER("Purchase Variance Account",'<>%1','');
        SETFILTER("Purchase Variance Account",'<>%1','');
        SETFILTER("Sales Prepayments Account",'<>%1','');
        SETFILTER("Purch. Prepayments Account",'<>%1','');
      END;

      GeneralPostingSetup.FINDSET;
      REPEAT
        GeneralPostingSetup2.SETFILTER("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        IF GeneralPostingSetup2.COUNT > 1 THEN BEGIN
          Customer.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
          Customer.MODIFY(TRUE);
          EXIT;
        END;
      UNTIL GeneralPostingSetup.NEXT = 0;

      ERROR(CouldNotFindPostingGroupErr);
    END;

    LOCAL PROCEDURE CreateJobWithWIPMethod@23(VAR Job@1001 : Record 167;WIPMethod@1000 : Code[20]);
    BEGIN
      JobsUtil.CreateJob(Job);
      Job.VALIDATE("WIP Method",WIPMethod);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResource@11() : Code[20];
    VAR
      VATPostingSetup@1000 : Record 325;
      Resource@1002 : Record 156;
      LibraryResource@1001 : Codeunit 130511;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryResource.CreateResource(Resource,VATPostingSetup."VAT Bus. Posting Group");
      EXIT(Resource."No.");
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@39(VAR JobTask@1000 : Record 1001;CurrencyCode@1002 : Code[10]);
    VAR
      Job@1001 : Record 167;
    BEGIN
      JobsUtil.CreateJob(Job);
      Job.VALIDATE("Currency Code",CurrencyCode);
      Job.MODIFY(TRUE);
      JobsUtil.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceForJob@35(VAR JobPlanningLine@1000 : Record 1003;CurrencyCode@1001 : Code[10]);
    VAR
      Job@1002 : Record 167;
      JobTask@1007 : Record 1001;
      SalesHeader@1004 : Record 36;
      LibrarySales@1005 : Codeunit 130509;
      JobCreateInvoice@1003 : Codeunit 1002;
    BEGIN
      // Create Job and Job Task with Currency and create and modify Job Planning Lines for Contract.
      CreateJobWithJobTask(JobTask,CurrencyCode);
      Job.GET(JobTask."Job No.");
      ChangeCustBusPostingGroup(Job);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      UpdateJobPlanningLineForQuantity(JobPlanningLine,JobPlanningLine.Quantity,0);  // Use zero for Qty. to Transfer to Journal.
      COMMIT;  // Commit is required before running the Job Transfer to Sales Invoice Report.

      // Create Sales Invoice from Job Planning Line.
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);  // Use False To create Sales Invoice.

      // Post Sales Invoice.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      SalesHeader.SETRANGE("Currency Code",CurrencyCode);
      SalesHeader.SETRANGE("Sell-to Customer No.",Job."Bill-to Customer No.");
      SalesHeader.FINDFIRST;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLineForUsage@33(VAR JobPlanningLine@1000 : Record 1003;CurrencyCode@1001 : Code[10]);
    VAR
      JobTask@1007 : Record 1001;
      JobJournalBatch@1006 : Record 237;
      JobJournalLine@1005 : Record 210;
      JobJournalTemplate@1004 : Record 209;
      JobPlanningLines@1002 : TestPage 1007;
    BEGIN
      // Create Job and Job Task with Currency and create and modify Job Planning Lines for Contract.
      CreateJobWithJobTask(JobTask,CurrencyCode);
      JobsUtil.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      UpdateJobPlanningLineForQuantity(JobPlanningLine,0,JobPlanningLine.Quantity);  // Use zero for Qty. to Transfer to Invoice.

      // Create Job Journal Line through Job Planning Line. Here we are using Job Planning Lines page since the code is written on page to create Job Journal Line.
      JobJournalTemplateName := JobsUtil.GetJobJournalTemplate(JobJournalTemplate);  // Assign in Global variable.
      JobJournalBatchName := JobsUtil.CreateJobJournalBatch(JobJournalTemplateName,JobJournalBatch);  // Assign in Global variable.
      JobPlanningLines.OPENEDIT;
      JobPlanningLines.FILTER.SETFILTER("Job No.",JobPlanningLine."Job No.");
      JobPlanningLines.CreateJobJournalLines.INVOKE;

      // Post Job Journal Line for Usage.
      JobJournalLine.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobJournalLine.FINDFIRST;
      JobsUtil.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CropTo@85(String@1000 : Text[1024];Length@1001 : Integer) : Text[250];
    BEGIN
      IF STRLEN(String) > Length THEN
        EXIT(PADSTR(String,Length));
      EXIT(String)
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@69(VAR JobLedgerEntry@1001 : Record 169;JobNo@1000 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GetLCYCode@44() : Code[10];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."LCY Code");
    END;

    LOCAL PROCEDURE RunJobActualToBudgetReport@70(No@1000 : Code[20]);
    VAR
      Job@1001 : Record 167;
      JobActualToBudget@1002 : Report 1009;
    BEGIN
      Job.SETRANGE("No.",No);
      JobActualToBudget.SETTABLEVIEW(Job);
      LibraryReportValidation.SetFileName(No);
      JobActualToBudget.InitializeRequest(CurrencyField);
      JobActualToBudget.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobAnalysisReport@22(No@1000 : Code[20];NewAmountField@1005 : ARRAY [8] OF Option;NewCurrencyField@1003 : ARRAY [8] OF Option;NewExcludeJobTask@1004 : Boolean);
    VAR
      Job@1002 : Record 167;
      JobAnalysis@1001 : Report 1008;
    BEGIN
      CLEAR(JobAnalysis);
      Job.SETRANGE("No.",No);
      JobAnalysis.SETTABLEVIEW(Job);
      JobAnalysis.InitializeRequest(NewAmountField,NewCurrencyField,NewExcludeJobTask);
      LibraryReportValidation.SetFileName(No);
      JobAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobJournalTestReport@68(JobJournalLine@1003 : Record 210;NewShowDim@1002 : Boolean);
    VAR
      JobJournalBatch@1001 : Record 237;
      JobJournalTest@1000 : Report 1005;
    BEGIN
      CLEAR(JobJournalTest);
      JobJournalBatch.SETRANGE("Journal Template Name",JobJournalLine."Journal Template Name");
      JobJournalBatch.SETRANGE(Name,JobJournalLine."Journal Batch Name");
      JobJournalTest.SETTABLEVIEW(JobJournalBatch);
      LibraryReportValidation.SetFileName(JobJournalLine."Document No.");
      JobJournalTest.InitializeRequest(NewShowDim);
      JobJournalTest.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobPerCustomerReport@15(No@1002 : Code[20]);
    VAR
      Customer@1001 : Record 18;
      JobsPerCustomer@1000 : Report 1012;
    BEGIN
      Customer.SETRANGE("No.",No);
      CLEAR(JobsPerCustomer);
      JobsPerCustomer.SETTABLEVIEW(Customer);
      LibraryReportValidation.SetFileName(No);
      JobsPerCustomer.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunItemPerJobReport@12(No@1002 : Code[20]);
    VAR
      Job@1001 : Record 167;
      ItemsPerJob@1000 : Report 1013;
    BEGIN
      Job.SETRANGE("No.",No);
      CLEAR(ItemsPerJob);
      ItemsPerJob.SETTABLEVIEW(Job);
      LibraryReportValidation.SetFileName(No);
      ItemsPerJob.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobPerItemReport@19(No@1002 : Code[20]);
    VAR
      Item@1003 : Record 27;
      JobsPerItem@1000 : Report 1014;
    BEGIN
      CLEAR(JobsPerItem);
      JobsPerItem.SETTABLEVIEW(Item);
      LibraryReportValidation.SetFileName(No);
      JobsPerItem.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobPlanningLinesReport@8(JobPlanningLine@1000 : Record 1003);
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLines@1001 : Report 1006;
    BEGIN
      CLEAR(JobPlanningLines);
      JobTask.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobTask.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      RunJobPlanningLinesReportWithJobTask(JobTask);
    END;

    LOCAL PROCEDURE RunJobPlanningLinesReportWorkdate@94(JobPlanningLine@1000 : Record 1003);
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLines@1001 : Report 1006;
    BEGIN
      CLEAR(JobPlanningLines);
      JobTask.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobTask.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      JobTask.SETFILTER("Planning Date Filter",FORMAT(WORKDATE));
      JobTask.SETFILTER("Posting Date Filter",FORMAT(WORKDATE));
      RunJobPlanningLinesReportWithJobTask(JobTask);
    END;

    LOCAL PROCEDURE RunJobPlanningLinesReportWithJobTask@97(VAR JobTask@1000 : Record 1001);
    VAR
      JobPlanningLines@1001 : Report 1006;
    BEGIN
      JobPlanningLines.SETTABLEVIEW(JobTask);
      JobPlanningLines.InitializeRequest(CurrencyField);
      LibraryReportValidation.SetFileName(JobTask.GETFILTER("Job No."));
      JobPlanningLines.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobRegisterReport@64(No@1002 : Code[20]);
    VAR
      JobRegister@1003 : Record 241;
      JobRegisterReport@1000 : Report 1015;
    BEGIN
      CLEAR(JobRegisterReport);
      JobRegisterReport.SETTABLEVIEW(JobRegister);
      LibraryReportValidation.SetFileName(No);
      JobRegisterReport.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobSuggestedBilling@67(No@1001 : Code[20]);
    VAR
      Job@1002 : Record 167;
      JobSuggestedBilling@1000 : Report 1011;
    BEGIN
      CLEAR(JobSuggestedBilling);
      Job.SETRANGE("No.",No);
      JobSuggestedBilling.SETTABLEVIEW(Job);
      LibraryReportValidation.SetFileName(No);
      JobSuggestedBilling.InitializeRequest(CurrencyField);
      JobSuggestedBilling.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE RunJobTransactionDetail@66(No@1002 : Code[20]);
    VAR
      Job@1003 : Record 167;
      JobTransactionDetail@1001 : Report 1007;
    BEGIN
      Job.SETRANGE("No.",No);
      JobTransactionDetail.SETTABLEVIEW(Job);
      LibraryReportValidation.SetFileName(No);
      JobTransactionDetail.InitializeRequest(CurrencyField);
      JobTransactionDetail.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    LOCAL PROCEDURE SetupAmountArray@31(VAR NewAmountField@1002 : ARRAY [8] OF ' ,Schedule Price,Usage Price,Contract Price,Invoiced Price,Schedule Cost,Usage Cost,Contract Cost,Invoiced Cost,Schedule Profit,Usage Profit,Contract Profit,Invoiced Profit';AmountOption@1000 : Option;AmountOption2@1001 : Option;AmountOption3@1003 : Option);
    BEGIN
      NewAmountField[1] := AmountOption;
      NewAmountField[2] := AmountOption2;
      NewAmountField[3] := AmountOption3;
      NewAmountField[4] := AmountField::" ";
      NewAmountField[5] := AmountField::" ";
      NewAmountField[6] := AmountField::" ";
      NewAmountField[7] := AmountField::" ";
      NewAmountField[8] := AmountField::" ";
    END;

    LOCAL PROCEDURE SetupCurrencyArray@32(VAR NewCurrencyField@1001 : ARRAY [8] OF Option);
    VAR
      Counter@1000 : Integer;
    BEGIN
      FOR Counter := 1 TO 8 DO
        NewCurrencyField[Counter] := CurrencyField;
    END;

    LOCAL PROCEDURE UpdateJobJournalLine@65(VAR JobJournalLine@1001 : Record 210;No@1000 : Code[20];Quantity@1003 : Decimal;UnitCost@1002 : Decimal);
    BEGIN
      JobJournalLine.VALIDATE("No.",No);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.VALIDATE("Unit Cost",UnitCost);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateJobPlanningLineForQuantity@48(VAR JobPlanningLine@1000 : Record 1003;QtyToTransferToInvoice@1001 : Decimal;QtyToTransferToJournal@1002 : Decimal);
    BEGIN
      JobPlanningLine.VALIDATE("Qty. to Transfer to Invoice",QtyToTransferToInvoice);
      JobPlanningLine.VALIDATE("Qty. to Transfer to Journal",QtyToTransferToJournal);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyDocumentEntries@111(DocEntryTableName@1000 : Text[50];RowValue@1001 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange(DocEntryTableNameCaption,DocEntryTableName);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(DocEntryNoofRecordsCaption,RowValue)
    END;

    LOCAL PROCEDURE VerfiyJobActualToBudgetReport@72(JobLedgerEntry@1005 : Record 169);
    VAR
      Job@1001 : Record 167;
      JobCalculateBatches@1002 : Codeunit 1005;
    BEGIN
      Job.GET(JobLedgerEntry."Job No.");
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(FORMAT(JobLedgerEntry."Total Cost",0,FormatString)),ValueNotFoundError);
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(FORMAT(JobLedgerEntry."Line Amount",0,FormatString)),ValueNotFoundError);
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(JobCalculateBatches.GetCurrencyCode(Job,0,CurrencyField)),ValueNotFoundError);
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(JobCalculateBatches.GetCurrencyCode(Job,3,CurrencyField)),ValueNotFoundError);
    END;

    LOCAL PROCEDURE VerifyJobAnalysisReport@24(JobPlanningLine@1000 : Record 1003;Column@1002 : Text[250];Column2@1003 : Text[250];Column3@1004 : Text[250]);
    BEGIN
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobPlanningLine.FIELDCAPTION("Job Task No."),FORMAT(JobPlanningLine."Job Task No."));
      LibraryReportValidation.SetColumn(Column);
      Assert.AreEqual(FORMAT(JobPlanningLine."Line Amount",0,FormatString),LibraryReportValidation.GetValue,ValueNotMatchError);
      LibraryReportValidation.SetColumn(Column2);
      Assert.AreEqual(FORMAT(JobPlanningLine."Total Cost",0,FormatString),LibraryReportValidation.GetValue,ValueNotMatchError);
      LibraryReportValidation.SetColumn(Column3);
      Assert.AreEqual(FORMAT(JobPlanningLine."Line Amount" - JobPlanningLine."Total Cost",0,FormatString),
        LibraryReportValidation.GetValue,ValueNotMatchError);
    END;

    LOCAL PROCEDURE VerifyJobJournalTestReport@59(JobJournalLine@1000 : Record 210);
    BEGIN
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobJournalLine.FIELDCAPTION("Posting Date"),FORMAT(JobJournalLine."Posting Date"));
      VerifyJobReports(JobJournalLine.FIELDCAPTION(Quantity),JobJournalLine.Quantity);
      VerifyJobReports(JobJournalLine.FIELDCAPTION("Unit Cost (LCY)"),JobJournalLine."Unit Cost (LCY)");
      VerifyJobReports(JobJournalLine.FIELDCAPTION("Total Cost (LCY)"),JobJournalLine."Total Cost (LCY)");
      VerifyJobReportsNearlyEqual(JobJournalLine.FIELDCAPTION("Unit Price"),JobJournalLine."Unit Price",0.01);
      VerifyJobReports(JobJournalLine.FIELDCAPTION("Line Amount"),JobJournalLine."Line Amount");
    END;

    LOCAL PROCEDURE VerifyJobReports@7(ColumnCaption@1000 : Text[250];LineAmount@1001 : Decimal);
    VAR
      Amount@1002 : Decimal;
    BEGIN
      VerifyJobReportsNearlyEqual(ColumnCaption,LineAmount,0);
    END;

    LOCAL PROCEDURE VerifyJobReportsNearlyEqual@1170000003(ColumnCaption@1000 : Text[250];LineAmount@1001 : Decimal;Delta@1170000000 : Decimal);
    VAR
      Amount@1002 : Decimal;
    BEGIN
      LibraryReportValidation.SetColumn(ColumnCaption);
      EVALUATE(Amount,LibraryReportValidation.GetValue);
      Assert.AreNearlyEqual(LineAmount,Amount,Delta,AmountError);
    END;

    LOCAL PROCEDURE VerifyJobPerCustomerReport@16(No@1001 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
      LibraryUtility@1000 : Codeunit 131000;
      UsageAmount@1004 : Decimal;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,No);
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobLedgerEntry.FIELDCAPTION("Job No."),No);
      UsageAmount := JobLedgerEntry.Quantity * JobLedgerEntry."Unit Price";

      VerifyJobReports(ScheduleLineAmount,JobLedgerEntry."Line Amount" + UsageAmount);

      VerifyJobReports(CropTo(CONVERTSTR(UsageLineAmount,' ',LibraryUtility.LineBreak),250),UsageAmount);
      VerifyJobReports(CropTo(CONVERTSTR(ContractLineAmount,' ',LibraryUtility.LineBreak),250),JobLedgerEntry."Line Amount");
    END;

    LOCAL PROCEDURE VerifyItemPerJobReport@34(No@1001 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,No);
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(ItemLedgerEntry.FIELDCAPTION("Item No."),JobLedgerEntry."No.");
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION(Quantity),JobLedgerEntry.Quantity);
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Total Cost"),JobLedgerEntry."Total Cost");
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Line Amount"),JobLedgerEntry."Line Amount");
    END;

    LOCAL PROCEDURE VerifyJobPerItemReport@47(No@1001 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,No);
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobLedgerEntry.FIELDCAPTION("Job No."),No);
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION(Quantity),JobLedgerEntry.Quantity);
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Total Cost"),JobLedgerEntry."Total Cost");
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Line Amount"),JobLedgerEntry."Line Amount");
    END;

    LOCAL PROCEDURE VerifyJobPlanningLinesReport@20(JobPlanningLine@1000 : Record 1003;CurrencyCode@1001 : Code[10];SchedulePrice@1006 : Decimal;ScheduleCost@1005 : Decimal;ContractPrice@1004 : Decimal;ContractCost@1003 : Decimal);
    BEGIN
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FORMAT(SchedulePrice,0,FormatString)),ValueNotFoundError);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FORMAT(ScheduleCost,0,FormatString)),ValueNotFoundError);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FORMAT(ContractPrice,0,FormatString)),ValueNotFoundError);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FORMAT(ContractCost,0,FormatString)),ValueNotFoundError);

      JobPlanningLine.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      JobPlanningLine.FINDSET;
      REPEAT
        LibraryReportValidation.SetRange(JobPlanningLine.FIELDCAPTION("No."),FORMAT(JobPlanningLine."No."));
        LibraryReportValidation.SetColumn(FORMAT(JobPlanningLine.FIELDCAPTION(Quantity)));
        Assert.AreEqual(FORMAT(JobPlanningLine.Quantity),FORMAT(LibraryReportValidation.GetValue),ValueNotMatchError);

        LibraryReportValidation.SetColumn(JobPlanningLine.FIELDCAPTION("Unit of Measure Code"));
        Assert.AreEqual(FORMAT(JobPlanningLine."Unit of Measure Code"),LibraryReportValidation.GetValue,ValueNotMatchError);

        LibraryReportValidation.SetColumn(STRSUBSTNO(TotalCost,CurrencyCode));
        Assert.AreEqual(FORMAT(JobPlanningLine."Total Cost",0,FormatString),LibraryReportValidation.GetValue,ValueNotMatchError);

        LibraryReportValidation.SetColumn(STRSUBSTNO(LineDiscountAmount,CurrencyCode));
        Assert.AreEqual(
          FORMAT(JobPlanningLine."Line Discount Amount",0,FormatString),LibraryReportValidation.GetValue,ValueNotMatchError);

        LibraryReportValidation.SetColumn(STRSUBSTNO(LineAmount,CurrencyCode));
        Assert.AreEqual(FORMAT(JobPlanningLine."Line Amount",0,FormatString),LibraryReportValidation.GetValue,ValueNotMatchError);
      UNTIL JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyJobPlanningLinesReportWorkdate@75(SchedulePrice@1006 : Decimal;ScheduleCost@1005 : Decimal;ContractPrice@1004 : Decimal;ContractCost@1003 : Decimal);
    BEGIN
      LibraryReportValidation.OpenFile;
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(SchedulePrice,0,FormatString)),ValueFoundError);
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(ScheduleCost,0,FormatString)),ValueFoundError);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FORMAT(ContractPrice,0,FormatString)),ValueNotFoundError);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FORMAT(ContractCost,0,FormatString)),ValueNotFoundError);
    END;

    LOCAL PROCEDURE VerifyJobPlanningLinesReportHeading@93(Job@1000 : Record 167);
    BEGIN
      LibraryReportValidation.OpenFile;
      WITH Job DO
        Assert.IsTrue(
          LibraryReportValidation.CheckIfValueExists(STRSUBSTNO('%1 %2 %3 %4',TABLECAPTION,FIELDCAPTION("No."),"No.",Description)),
          ValueNotFoundError);
    END;

    LOCAL PROCEDURE VerifyJobRegisterReport@63(No@1001 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,No);
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobLedgerEntry.FIELDCAPTION("Job No."),No);
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION(Quantity),JobLedgerEntry.Quantity);
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Total Cost (LCY)"),JobLedgerEntry."Total Cost (LCY)");
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Line Amount (LCY)"),JobLedgerEntry."Line Amount (LCY)");
    END;

    LOCAL PROCEDURE VerfiyJobSuggestedBillingReport@62(JobLedgerEntry@1000 : Record 169);
    BEGIN
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobLedgerEntry.FIELDCAPTION("Job Task No."),JobLedgerEntry."Job Task No.");
      VerifyJobReports(TotalContract,JobLedgerEntry."Total Cost");
    END;

    LOCAL PROCEDURE VerfiyJobTransactionDetailReport@60(JobLedgerEntry@1000 : Record 169);
    VAR
      Job@1002 : Record 167;
      JobCalculateBatches@1001 : Codeunit 1005;
    BEGIN
      Job.GET(JobLedgerEntry."Job No.");
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(JobLedgerEntry.FIELDCAPTION("Posting Date"),FORMAT(JobLedgerEntry."Posting Date"));
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION(Quantity),JobLedgerEntry.Quantity);
      VerifyJobReports(JobLedgerEntry.FIELDCAPTION("Entry No."),JobLedgerEntry."Entry No.");
      VerifyJobReports(JobCalculateBatches.GetCurrencyCode(Job,1,CurrencyField),JobLedgerEntry."Total Price");
      VerifyJobReports(JobCalculateBatches.GetCurrencyCode(Job,0,CurrencyField),JobLedgerEntry."Total Cost");
      VerifyJobReports(JobCalculateBatches.GetCurrencyCode(Job,3,CurrencyField),JobLedgerEntry."Line Amount");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@54(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE DocumentEntriesReqPageHandler@77(VAR DocumentEntries@1000 : TestRequestPage 35);
    VAR
      CurrecnyInLcy@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CurrecnyInLcy);
      DocumentEntries.Control3.SETVALUE(CurrecnyInLcy);  // Boolean Show Amount in LCY
      DocumentEntries.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@14(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE JobTransferJobPlanningLinePageHandler@30(VAR JobTransferJobPlanningLine@1000 : TestPage 1014);
    BEGIN
      JobTransferJobPlanningLine.JobJournalTemplateName.SETVALUE(JobJournalTemplateName);
      JobTransferJobPlanningLine.JobJournalBatchName.SETVALUE(JobJournalBatchName);
      JobTransferJobPlanningLine.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesInvoiceRequestPageHandler@37(VAR JobTransferToSalesInvoice@1000 : TestRequestPage 1094);
    BEGIN
      JobTransferToSalesInvoice.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE NavigatePageHandler@76(VAR Navigate@1000 : TestPage 344);
    BEGIN
      Navigate.Print.INVOKE;
    END;

    BEGIN
    {
       1. Verify Jobs Per Customer report.
       2. Verify Item Per Job report.
       3. Verify Job Per Item report.
       4. Verify Job Register report.
       5. Verify Job Planning Lines report with Local Currency.
       6. Verify Job Planning Lines report with Foreign Currency.
       7. Verify Job Analysis report for Schedule Price, Schedule Cost and Schedule Profit in Local Currency.
       8. Verify Job Analysis report for Schedule Price, Schedule Cost and Schedule Profit in Foreign Currency.
       9. Verify Job Analysis report for Contract Price, Contract Cost and Contract Profit in Local Currency.
      10. Verify Job Analysis report for Contract Price, Contract Cost and Contract Profit in Foreign Currency.
      11. Verify Job Analysis report for Usage Price, Usage Cost and Usage Profit in Local Currency.
      12. Verify Job Analysis report for Usage Price, Usage Cost and Usage Profit in Foreign Currency.
      13. Verify Job Analysis report for Invoiced Price, Invoiced Cost and Invoiced Profit in Local Currency.
      14. Verify Job Analysis report for Invoiced Price, Invoiced Cost and Invoiced Profit in Foreign Currency.
      15. Verify Job Task Line with zero amount does not exist on Job Analysis Report when Exclude Zero Lines boolean is True.
      16. Verify Job Task Line with zero amount exists on Job Analysis Report when Exclude Zero Lines boolean is False.
      17. Verify Job Actual To Budget Report for Local and Foreign Currency.
      18. Verify Job Suggested Billing Report for Local and Foreign Currency.
      19. Verify Job Jouranl Test Report for With and Without Dimension.
      20. Verify Job Transaction Detail Report for Local and Foreign Currency.
      21. Verify Document Entries Report with Job Ledger, Res. Ledger and Unit Cost.
      22. Verify Job Planning Lines report with Planning Date Filter.

      Covers Test Cases for WI - 273616
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        JobPerCustomerReport,ItemPerJobReport,JobPerItemReport,JobRegisterReport                                 139436

      Covers Test Cases for WI - 281680
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        JobPlanningLinesReportWithLCY, JobPlanningLinesReportWithFCY                                             139432
        JobAnalysisReportForScheduleWithLCY, JobAnalysisReportForScheduleWithFCY
        JobAnalysisReportForContractWithLCY, JobAnalysisReportForContractWithFCY
        JobAnalysisReportForUsageWithLCY, JobAnalysisReportForUsageWithFCY
        JobAnalysisReportForInvoiceWithLCY, JobAnalysisReportForInvoiceWithFCY
        JobAnalysisReportExcludeZeroLine, JobAnalysisReportIncludeZeroLine                                       139433

      Covers Test Cases for WI - 281681
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        JobActualToBudgetWithLCY,JobActualToBudgetWithFCY                                                        139434
        JobSuggestedBillingWithLCY,JobSuggestedBillingWithFCY                                                    139435
        JobJournalTest,JobJournalTestWithDimension                                                               139486
        JobTransactionDetailWithLCY,JobTransactionDetailWithFCY                                                  139487

      Covers Test Cases for WI - 325238
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        DocumentEntriesForJobAndResource                                                                         139311

      Covers Test Cases for WI - 85161
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        VerifyJobPlanningLinesReportDates                                                                         85161

      Covers Test Cases for WI - 358415
        ---------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                       TFS ID
        ---------------------------------------------------------------------------------------------------------------
        JobPlanningLineReportHeading                                                                             358415
    }
    END.
  }
}

