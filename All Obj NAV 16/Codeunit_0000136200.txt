OBJECT Codeunit 136200 Marketing Campaign Segments
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1016 : Codeunit 130509;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryMarketing@1002 : Codeunit 131900;
      LibrarySetupStorage@1022 : Codeunit 131009;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1001 : Boolean;
      CampaignNo2@1003 : Code[20];
      CampaignNo3@1013 : Code[20];
      InteractionTemplateCode@1004 : Code[10];
      ContactMustNotExistError@1006 : TextConst 'ENU=%1 with %2 %3 must not exist.';
      ContactMustExistError@1007 : TextConst 'ENU=%1 with %2 %3 must exist.';
      SegmentLineMustNotExistError@1008 : TextConst 'ENU="%1 with %2=%3,%4=%5 must not exist."';
      PhoneNumberError@1009 : TextConst 'ENU=You must fill in the phone number.';
      DescriptionError@1011 : TextConst 'ENU=You must fill in the Description field.';
      CallNotLoggedError@1012 : TextConst 'ENU=Call was not logged.';
      UnknownError@1010 : TextConst 'ENU=Unknown error.';
      WrongMailingGroupDescriptionFieldLengthErr@1017 : TextConst 'ENU=Wrong Mailing Group Description field length.';
      InteractionTemplateCode2@1014 : Code[10];
      SegmentHeaderNo2@1015 : Code[20];
      InterTemplateSalesInvoicesNotSpecifiedErr@1018 : TextConst 'ENU=The Invoices field on the Sales FastTab in the Interaction Template Setup window must be filled in.';

    [Test]
    [HandlerFunctions(CreateInteractModalFormHandler)]
    PROCEDURE CampaignAndInteractionsLinked@1();
    VAR
      Campaign@1000 : Record 5071;
      CampaignStatus@1001 : Record 5073;
      Contact@1002 : Record 5050;
      InteractionTemplate@1003 : Record 5064;
    BEGIN
      // Covers document number TC0064 - refer to TFS ID 21741.
      // Test creation of a campaign and the interactions linked to the campaign.

      // 1. Setup: Create new Campaign Status and Campaign. Link the Campaign Status to the Campaign. Create new Interaction Template
      // with Unit Cost (LCY) and Unit Duration (Min.).
      Initialize;
      LibraryMarketing.CreateCampaignStatus(CampaignStatus);
      LibraryMarketing.CreateCampaign(Campaign);
      Campaign.VALIDATE("Status Code",CampaignStatus.Code);
      Campaign.MODIFY(TRUE);
      CampaignNo2 := Campaign."No.";  // Set global variable for form handler.
      CreateInteractionTemplate(InteractionTemplate);

      // 2. Exercise: Create Interaction for a Contact.
      Contact.FINDFIRST;
      Contact.CreateInteraction;

      // 3. Verify: Check that the Interaction Log Entry and Campaign Entry are created correctly.
      VerifyInteractionLogEntry(InteractionTemplate,Contact."No.",Campaign."No.");
      VerifyCampaignEntry(InteractionTemplate,Campaign."No.");
    END;

    [Test]
    PROCEDURE AddingContactsToSegments@3();
    VAR
      SegmentHeader@1000 : Record 5076;
      Contact@1002 : Record 5050;
    BEGIN
      // Covers document number TC0065 - refer to TFS ID 21741.
      // Test adding Contacts to Segments.

      // 1. Setup: Create new Segment Header.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);

      // 2. Exercise: Add Contact to Segment by running Add Contacts.
      Contact.FINDFIRST;
      Contact.SETRANGE("No.",Contact."No.");
      AddContactsToSegment(Contact,SegmentHeader);

      // 3. Verify: Check that the Contact was added successfully to the Segment Line.
      VerifyContactAddedSegmentLine(Contact,SegmentHeader."No.");
      SegmentHeader.CALCFIELDS("No. of Lines");
      SegmentHeader.TESTFIELD("No. of Lines",1);
    END;

    [Test]
    PROCEDURE ReducingContactsFromSegments@10();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1004 : Record 5077;
      Contact@1002 : Record 5050;
      SecondContactSalespersonCode@1001 : Code[10];
    BEGIN
      // Covers document number TC0065 - refer to TFS ID 21741.
      // Test reducing Contacts from Segments.

      // 1. Setup: Create new Segment Header. Add Contacts with different Salespersons to Segment by running Add Contacts.
      Initialize;
      SecondContactSalespersonCode := CreateSegmentWithContact(SegmentHeader,Contact);

      // 2. Exercise: Reduce contacts for a specific Salesperson from the Segment Line by running Reduce Contacts - Remove.
      Contact.SETRANGE("Salesperson Code",Contact."Salesperson Code");
      RemoveContactsFromSegment(Contact,SegmentHeader);

      // 3. Verify: Check that the Contact was reduced/removed successfully from the Segment Line and contacts with other Salespersons
      // exist on Segment Line.
      SegmentLine.SETRANGE("Segment No.",SegmentHeader."No.");
      SegmentLine.SETRANGE("Salesperson Code",Contact."Salesperson Code");
      Assert.IsFalse(
        SegmentLine.FINDFIRST,
        STRSUBSTNO(
          ContactMustNotExistError,SegmentLine.TABLECAPTION,SegmentLine.FIELDCAPTION("Salesperson Code"),
          SegmentLine."Salesperson Code"));
      SegmentLine.SETRANGE("Salesperson Code",SecondContactSalespersonCode);
      Assert.IsTrue(
        SegmentLine.FINDFIRST,
        STRSUBSTNO(
          ContactMustExistError,SegmentLine.TABLECAPTION,SegmentLine.FIELDCAPTION("Salesperson Code"),SegmentLine."Salesperson Code"));
    END;

    [Test]
    PROCEDURE RefiningContactsOnSegments@15();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1004 : Record 5077;
      Contact@1002 : Record 5050;
      SecondContactSalespersonCode@1001 : Code[10];
    BEGIN
      // Covers document number TC0065 - refer to TFS ID 21741.
      // Test refining Contacts on Segments.

      // 1. Setup: Create new Segment Header. Add Contacts with different Salespersons to Segment by running Add Contacts.
      Initialize;
      SecondContactSalespersonCode := CreateSegmentWithContact(SegmentHeader,Contact);

      // 2. Exercise: Refine contacts for a specific Salesperson from the Segment Line by running Reduce Contacts - Refine.
      Contact.SETRANGE("Salesperson Code",Contact."Salesperson Code");
      RefineContactsOnSegment(Contact,SegmentHeader);

      // 3. Verify: Check that the Segment Line was refined successfully. The Segment Lines with the Salesperson code refined exist and
      // contacts with other Salesperson do not exist on Segment Line.
      SegmentLine.SETRANGE("Segment No.",SegmentHeader."No.");
      SegmentLine.SETRANGE("Salesperson Code",Contact."Salesperson Code");
      Assert.IsTrue(
        SegmentLine.FINDFIRST,
        STRSUBSTNO(
          ContactMustExistError,SegmentLine.TABLECAPTION,SegmentLine.FIELDCAPTION("Salesperson Code"),SegmentLine."Salesperson Code"));
      SegmentLine.SETRANGE("Salesperson Code",SecondContactSalespersonCode);
      Assert.IsFalse(
        SegmentLine.FINDFIRST,
        STRSUBSTNO(
          ContactMustNotExistError,SegmentLine.TABLECAPTION,SegmentLine.FIELDCAPTION("Salesperson Code"),
          SegmentLine."Salesperson Code"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RemoveAllContactsFromSegments@11();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1004 : Record 5077;
      Contact@1002 : Record 5050;
    BEGIN
      // Covers document number TC0065 - refer to TFS ID 21741.
      // Test removing all Contacts from Segments.

      // 1. Setup: Create new Segment Header. Add Contacts with different Salespersons to Segment by running Add Contacts.
      Initialize;
      CreateSegmentWithContact(SegmentHeader,Contact);

      // 2. Exercise: Reduce all contacts from the Segment Line by running Reduce Contacts - Remove.
      Contact.SETRANGE("Salesperson Code");  // Remove all filters from Contact.
      RemoveContactsFromSegment(Contact,SegmentHeader);

      // 3. Verify: Check that Segment Lines for all contacts were removed.
      SegmentLine.SETRANGE("Segment No.",SegmentHeader."No.");
      Assert.IsFalse(
        SegmentLine.FINDFIRST,
        STRSUBSTNO(
          SegmentLineMustNotExistError,SegmentLine.TABLECAPTION,SegmentLine.FIELDCAPTION("Segment No."),SegmentLine."Segment No.",
          SegmentLine.FIELDCAPTION("Line No."),SegmentLine."Line No."));
      SegmentHeader.CALCFIELDS("No. of Lines");
      SegmentHeader.TESTFIELD("No. of Lines",0);
    END;

    [Test]
    [HandlerFunctions(NumberErrorModalFormHandler)]
    PROCEDURE MakePhoneCallNumberError@12();
    BEGIN
      // Covers document number TC0066 - refer to TFS ID 21741.
      // Test that the application generates an error if Phone Number is left blank in the Make Phone Call wizard, called from the
      // Segment window. The handler function called should be NumberErrorModalFormHandler.

      InvokeMakePhoneCallError(PhoneNumberError);
    END;

    [Test]
    [HandlerFunctions(DescriptionModalFormHandler)]
    PROCEDURE MakePhoneCallDescriptionError@20();
    BEGIN
      // Covers document number TC0066 - refer to TFS ID 21741.
      // Test that the application generates an error if Description is left blank in the Make Phone Call wizard, called from the
      // Segment window. The handler function called should be DescriptionModalFormHandler.

      InvokeMakePhoneCallError(DescriptionError);
    END;

    [Test]
    [HandlerFunctions(CallLoggedModalFormHandler)]
    PROCEDURE MakePhoneCallNotLoggedError@24();
    BEGIN
      // Covers document number TC0066 - refer to TFS ID 21741.
      // Test that the application generates an error if Dial Contact on Next is unchecked in Make Phone Call wizard, called from the
      // Segment window. The handler function called should be CallLoggedModalFormHandler.

      InvokeMakePhoneCallError(CallNotLoggedError);
    END;

    LOCAL PROCEDURE InvokeMakePhoneCallError@14(ErrorMessage@1002 : Text[1024]);
    VAR
      SegmentHeader@1001 : Record 5076;
      SegmentLine@1000 : Record 5077;
    BEGIN
      // 1. Setup: Create new Segment Header, Segment Line.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");

      // 2. Exercise: Run Make Phone Call wizard.
      ASSERTERROR SegmentLine.CreateCall;

      // 3. Verify: Check that the application generates an error if some field is not there in the Make Phone Call wizard.
      Assert.AreEqual(STRSUBSTNO(ErrorMessage),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(CallNeutralModalFormHandler)]
    PROCEDURE MakePhoneCallNeutralEvaluation@23();
    BEGIN
      // Covers document number TC0066 - refer to TFS ID 21741.
      // Test the Neutral Evaluation option in Make Phone Call wizard, called from the Segment window. The handler function called should
      // be CallNeutralModalFormHandler.

      InvokeMakePhoneCall(FALSE);
    END;

    [Test]
    [HandlerFunctions(AttemptFailedModalFormHandler)]
    PROCEDURE MakePhoneCallAttemptFailed@30();
    BEGIN
      // Covers document number TC0066 - refer to TFS ID 21741.
      // Test the Neutral Evaluation option in Make Phone Call wizard with Attempt Failed unchecked, called from the Segment window. The
      // handler function called should be AttemptFailedModalFormHandler.

      InvokeMakePhoneCall(TRUE);
    END;

    LOCAL PROCEDURE InvokeMakePhoneCall@32(AttemptFailed@1002 : Boolean);
    VAR
      SegmentHeader@1001 : Record 5076;
      SegmentLine@1000 : Record 5077;
    BEGIN
      // 1. Setup: Create new Segment Header, Segment Line.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");

      // 2. Exercise: Run Make Phone Call wizard.
      SegmentLine.CreateCall;

      // 3. Verify: Check that the Interaction Log Entry created contains Evaluation as Neutral and Attempt Failed as parameter passed.
      VerifyNeutralInteractionLog(SegmentHeader."No.",AttemptFailed);
    END;

    [Test]
    [HandlerFunctions(CallPositiveModalFormHandler)]
    PROCEDURE MakePhonePositiveEvaluation@28();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1001 : Record 5077;
      Campaign@1003 : Record 5071;
      Opportunity@1004 : Record 5092;
    BEGIN
      // Covers document number TC0066 - refer to TFS ID 21741.
      // Test the Very Positive Evaluation option in Make Phone Call wizard, called from the Segment window.

      // 1. Setup: Create new Segment Header, Segment Line, Campaign, Opportunity for Contact in Segment Line.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");
      LibraryMarketing.CreateCampaign(Campaign);
      CampaignNo3 := Campaign."No.";  // Set global variable for form handler.
      LibraryMarketing.CreateOpportunity(Opportunity,SegmentLine."Contact No.");

      // 2. Exercise: Run Make Phone Call wizard.
      SegmentLine.CreateCall;

      // 3. Verify: Check that the Interaction Log Entry created contains Evaluation as Very Positive, Attempt Failed as FALSE and
      // Opportunity No. as that of opportunity created.
      VerifyPositiveInteractionLog(SegmentHeader."No.",Opportunity."No.");
    END;

    [Test]
    PROCEDURE SegmentInteractionTemplateCode@41();
    VAR
      SegmentHeader@1000 : Record 5076;
      Contact@1002 : Record 5050;
    BEGIN
      // Covers document number TC0069 - refer to TFS ID 21741.
      // Test that the Interaction Template information flows from the Segment Header to the Segment Lines.

      // 1. Setup: Create new Segment Header, Interaction Template.
      Initialize;
      CreateSegmentHeaderInteraction(SegmentHeader);

      // 2. Exercise: Create Segment Line by Add Contacts.
      FilterContacts(Contact);
      AddContactsToSegment(Contact,SegmentHeader);

      // 3. Verify: Check that the value of Interaction Template on Segment Lines matches the value of Interaction Template on Segment
      // Header.
      VerifyInteractionTemplate(SegmentHeader);
    END;

    [Test]
    [HandlerFunctions(SaveSegmentModalFormHandler,CriteriaListModalFormHandler)]
    PROCEDURE SegmentSaveCriteriaAndReuse@31();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentHeader2@1003 : Record 5076;
      Contact@1002 : Record 5050;
    BEGIN
      // Covers document number TC0069 - refer to TFS ID 21741.
      // Test that it is possible to save criteria for the Segment and create new Segment by using the saved criteria.

      // 1. Setup: Create new Segment Header, Interaction Template. Create Segment Line by Add Contacts. Save Criteria.
      Initialize;
      CreateSegmentHeaderInteraction(SegmentHeader);

      FilterContacts(Contact);
      AddContactsToSegment(Contact,SegmentHeader);
      InteractionTemplateCode2 := SegmentHeader."Interaction Template Code";  // Set global variable for form handler.
      SegmentHeaderNo2 := SegmentHeader."No.";
      SegmentHeader.SaveCriteria;

      // 2. Exercise: Create new Segment Header. Input the same Interaction Code as was used earlier. Run Reuse Criteria.
      LibraryMarketing.CreateSegmentHeader(SegmentHeader2);
      SegmentHeader2.VALIDATE("Interaction Template Code",SegmentHeader."Interaction Template Code");
      SegmentHeader2.MODIFY(TRUE);
      SegmentHeader2.ReuseCriteria;

      // 3. Verify: Check that the Segment Lines created in new Segment by using the saved criteria have the same information as
      // Segment Lines for Segment for which Criteria was saved.
      VerifySaveCriteriaAndReuse(SegmentHeader."No.",SegmentHeader2."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CampaignSalesPriceActivation@43();
    VAR
      Campaign@1000 : Record 5071;
      SalesPrice@1002 : Record 7002;
      SalesLineDiscount@1001 : Record 7004;
      ContactBusinessRelation@1006 : Record 5054;
      CampaignTargetGroupMgt@1004 : Codeunit 7030;
      CustomerNo@1003 : Code[20];
      SalesHeaderNo@1005 : Code[20];
    BEGIN
      // Covers document number TC0070 - refer to TFS ID 21741.
      // Test that Sales Prices and Discounts are suggested on the Sales Line when all the required criteria are met for Activated
      // Campaign.

      // 1. Setup: Create new Campaign, Sales Price and Sales line Discount for Campaign, Segment Header with Campaign. Add Contacts to
      // Segment and Activate Campaign.
      Initialize;
      CreateCampaignPriceDiscount(Campaign,SalesPrice,SalesLineDiscount);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateSegmentWithCampaign(Campaign."No.",ContactBusinessRelation."Link to Table"::Customer,CustomerNo);
      CampaignTargetGroupMgt.ActivateCampaign(Campaign);

      // 2. Exercise: Create a new Sales Order- Sales Header and three Sales Lines with different quantities so that the conditions for
      // Sales Price and Line Discount are met.
      SalesHeaderNo := CreateSalesOrderForCampaign(SalesPrice,CustomerNo,SalesLineDiscount."Minimum Quantity");

      // 3. Verify: Check that Sales Prices and Discounts are suggested on the Sales Line when all the required criteria are met for
      // Activated Campaign.
      VerifyPriceDiscountsActivated(SalesPrice,SalesLineDiscount,SalesHeaderNo);
    END;

    [Test]
    PROCEDURE CampaignSalesPriceDeactivation@51();
    VAR
      Campaign@1000 : Record 5071;
      SalesPrice@1002 : Record 7002;
      SalesLineDiscount@1001 : Record 7004;
      ContactBusinessRelation@1004 : Record 5054;
      CustomerNo@1003 : Code[20];
      SalesHeaderNo@1005 : Code[20];
    BEGIN
      // Covers document number TC0070 - refer to TFS ID 21741.
      // Test that Sales Prices and Discounts are not suggested on the Sales Line when all the required criteria are met for Campaign
      // that is deactivated.

      // 1. Setup: Create new Campaign, Sales Price and Sales line Discount for Campaign, Segment Header with Campaign. Add Contacts to
      // Segment.
      Initialize;
      CreateCampaignPriceDiscount(Campaign,SalesPrice,SalesLineDiscount);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateSegmentWithCampaign(Campaign."No.",ContactBusinessRelation."Link to Table"::Customer,CustomerNo);

      // 2. Exercise: Create a new Sales Order- Sales Header and three Sales Lines with different quantities so that the conditions for
      // Sales Price and Line Discount are met.
      SalesHeaderNo := CreateSalesOrderForCampaign(SalesPrice,CustomerNo,SalesLineDiscount."Minimum Quantity");

      // 3. Verify: Check that Sales Prices and Discounts are not suggested on the Sales Line when all the required criteria are met for
      // Campaign that is deactivated.
      VerifyPriceDiscountDeactivated(SalesHeaderNo);
    END;

    [Test]
    PROCEDURE ContactMailingGroupDescription@84();
    VAR
      ContactMailingGroup@1001 : Record 5056;
      MailingGroup@1000 : Record 5055;
    BEGIN
      // Verifies Mailing Group Description flowfield calculation - refer to TFS ID 51572
      Assert.AreEqual(
        LibraryUtility.GetFieldLength(DATABASE::"Mailing Group",MailingGroup.FIELDNO(Description)),
        LibraryUtility.GetFieldLength(DATABASE::"Contact Mailing Group",ContactMailingGroup.FIELDNO("Mailing Group Description")),
        WrongMailingGroupDescriptionFieldLengthErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ApplyMailingGroup@54();
    VAR
      ContactMailingGroup@1001 : Record 5056;
      MailingGroup@1003 : Record 5055;
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1002 : Record 5077;
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test that on Apply Mailing Group from the segment the Mailing Group is attached to the Contact.

      // 1. Setup: Create new Segment Header, Segment Line.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");

      // 2. Exercise: Create Mailing Group and Apply Mailing Group to the Segment.
      LibraryMarketing.CreateMailingGroup(MailingGroup);
      ApplyMailingGroupToSegment(SegmentHeader,MailingGroup.Code);

      // 3. Verify: Check that Mailing group is attached to the Contact.
      ContactMailingGroup.SETRANGE("Mailing Group Code",MailingGroup.Code);
      ContactMailingGroup.FINDFIRST;
      ContactMailingGroup.TESTFIELD("Contact No.",SegmentLine."Contact No.");
    END;

    [Test]
    PROCEDURE ReduceContactFromSegment@59();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1004 : Record 5077;
      SegmentLine2@1003 : Record 5077;
      Contact@1002 : Record 5050;
      FirstContactNo@1001 : Code[20];
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test that removing a Contact from Segment does not remove all the contacts.

      // 1. Setup: Create new Segment Header. Add Contacts.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");

      FirstContactNo := SegmentLine."Contact No.";
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");

      // 2. Exercise: Reduce the first contacts from the Segment Line by running Reduce Contacts - Remove.
      Contact.SETRANGE("No.",FirstContactNo);
      RemoveContactsFromSegment(Contact,SegmentHeader);

      // 3. Verify: Check on Segment Lines only first contact is removed and Second contact still exists.
      SegmentLine2.SETRANGE("Segment No.",SegmentHeader."No.");
      SegmentLine2.SETRANGE("Contact No.",FirstContactNo);
      Assert.IsFalse(
        SegmentLine2.FINDFIRST,
        STRSUBSTNO(
          SegmentLineMustNotExistError,SegmentLine2.TABLECAPTION,SegmentLine2.FIELDCAPTION("Segment No."),SegmentLine2."Segment No.",
          SegmentLine2.FIELDCAPTION("Line No."),SegmentLine2."Line No."));

      SegmentLine2.SETRANGE("Contact No.",SegmentLine."Contact No.");
      SegmentLine2.FINDFIRST;  // Second contact still exists.
    END;

    [Test]
    PROCEDURE RefineContactFromSegment@56();
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1004 : Record 5077;
      SegmentLine2@1003 : Record 5077;
      Contact@1002 : Record 5050;
      FirstContactNo@1001 : Code[20];
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test that refining a Contact from Segment removes all other Contact on Segment Lines.

      // 1. Setup: Create new Segment Header. Add Contacts.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");
      FirstContactNo := SegmentLine."Contact No.";
      CreateSegmentLineWithContact(SegmentLine,SegmentHeader."No.");

      // 2. Exercise: Refine the first contact from the Segment Line by running Reduce Contacts - Refine.
      Contact.SETRANGE("No.",FirstContactNo);
      RefineContactsOnSegment(Contact,SegmentHeader);

      // 3. Verify: Check that the Segment Line was refined successfully. First Segment Line refined exist and the second line
      // for the contact do not exist on Segment Line.
      SegmentLine2.SETRANGE("Segment No.",SegmentHeader."No.");
      SegmentLine2.SETRANGE("Contact No.",FirstContactNo);
      SegmentLine2.FINDFIRST;  // First Segment line is Refined.

      SegmentLine2.SETRANGE("Contact No.",SegmentLine."Contact No.");
      Assert.IsFalse(
        SegmentLine2.FINDFIRST,
        STRSUBSTNO(
          ContactMustNotExistError,SegmentLine2.TABLECAPTION,SegmentLine2.FIELDCAPTION("Contact No."),SegmentLine2."Contact No."));
    END;

    [Test]
    PROCEDURE CreateNewSegmentWithDetails@60();
    VAR
      SegmentHeader@1000 : Record 5076;
      Contact@1001 : Record 5050;
    BEGIN
      // Test Creation of a new Segment along with other details such as Salesperson and Campaign.

      // 1. Setup: Create new Segment Header.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);

      // 2. Exercise: Add a new Salesperson to Segment and add Contact to Segment by running Add Contacts. Add Campaign.
      AddSalespersonToSegment(SegmentHeader);

      LibraryMarketing.FindContact(Contact);
      Contact.SETRANGE("No.",Contact."No.");
      AddContactsToSegment(Contact,SegmentHeader);

      AddCampaignToSegment(SegmentHeader);

      // 3. Verify: Verify that the Salesperson and Campaign has been added on the Segment Line.
      VerifySalespersonCampaignLines(SegmentHeader);
    END;

    [Test]
    [HandlerFunctions(NoSeriesListModalPageHandler)]
    PROCEDURE CreateCampaignWithNoSeries@69();
    VAR
      MarketingSetup@1001 : Record 5079;
      NoSeriesManagement@1002 : Codeunit 396;
      CampaignCard@1000 : TestPage 5086;
      CampaignNo@1003 : Code[20];
    BEGIN
      // Test Creation of a new Campaign from Card with No Series.

      // 1. Setup:
      Initialize;
      MarketingSetup.GET;

      // 2. Exercise: Create new Campaign from Card.
      CampaignNo := NoSeriesManagement.GetNextNo(MarketingSetup."Campaign Nos.",WORKDATE,FALSE);
      CampaignCard.OPENNEW;
      CampaignCard."No.".ASSISTEDIT;

      // 3. Verify: Verify Created Campaign Number with Number Series Value.
      CampaignCard."No.".ASSERTEQUALS(CampaignNo);
    END;

    [Test]
    PROCEDURE CreateCampaignFromCardDetails@70();
    VAR
      CampaignStatus@1002 : Record 5073;
      SalespersonCode@1001 : Code[10];
      CampaignNo@1003 : Code[20];
    BEGIN
      // Test Creation of a new Campaign from Card with details.

      // 1. Setup: Find Salesperson and create Campaign Status.
      Initialize;
      SalespersonCode := FindSalespersonPurchaser;
      LibraryMarketing.CreateCampaignStatus(CampaignStatus);

      // 2. Exercise: Create new Campaign from Card with Details.
      CampaignNo := CreateCampaignWithDetails(SalespersonCode,CampaignStatus.Code);

      // 3. Verify: Verify Campaign with Details;
      VerifyCampaignWithDetails(CampaignNo,SalespersonCode,CampaignStatus.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SalesPriceDiscountActivation@64();
    VAR
      Campaign@1000 : Record 5071;
      SalesPrice@1001 : Record 7002;
      SalesLineDiscount@1002 : Record 7004;
      CustomerNo@1003 : Code[20];
      SalesOrderNo@1005 : Code[20];
    BEGIN
      // Test to verify that Sales Price and Sales Line Discount are suggested on the Sales Line for an activated Campaign.

      // 1. Setup: Create new Campaign, Sales Price and Sales line Discount for Campaign, a Segment with the Campaign. Add Contacts to
      // Segment and Activate Campaign.
      SalesPriceDiscountScenario(Campaign,SalesPrice,CustomerNo,SalesLineDiscount);
      ActivatePagePriceLineDiscount(Campaign."No.");

      // 2. Exercise: Create a new Sales Order.
      SalesOrderPageOpenNew(SalesOrderNo);
      UpdateSalesOrderForCampaign(SalesPrice,SalesOrderNo,CustomerNo,SalesLineDiscount."Minimum Quantity");

      // 3. Verify: Verify that Sales Price and Sales Line Discount are suggested on the Sales Line for an activated Campaign.
      VerifyPriceDiscountActivation(SalesOrderNo,SalesPrice."Unit Price",SalesLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE SalesPriceDiscountDeactivation@61();
    VAR
      Campaign@1007 : Record 5071;
      SalesPrice@1006 : Record 7002;
      SalesLineDiscount@1005 : Record 7004;
      CustomerNo@1001 : Code[20];
      SalesOrderNo@1000 : Code[20];
    BEGIN
      // Test to verify that Sales Price and Sales Line Discount are not suggested on the Sales Line for a deactivated Campaign.

      // 1. Setup: Create new Campaign, Sales Price and Sales line Discount for Campaign, a Segment with the Campaign. Add Contacts to
      // Segment.
      SalesPriceDiscountScenario(Campaign,SalesPrice,CustomerNo,SalesLineDiscount);

      // 2. Exercise: Create a new Sales Order.
      SalesOrderPageOpenNew(SalesOrderNo);
      UpdateSalesOrderForCampaign(SalesPrice,SalesOrderNo,CustomerNo,SalesLineDiscount."Minimum Quantity");

      // 3. Verify: Verify that Sales Price and Sales Line Discount are not suggested on the Sales Line for a Campaign.
      VerifyPriceDiscountDeactivate(SalesOrderNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CampaignEntryCreatedWhenPostSalesOrderWithActivatedCampaign@78();
    VAR
      Campaign@1000 : Record 5071;
      SalesHeader@1002 : Record 36;
      SalesPrice@1004 : Record 7002;
      CustomerNo@1001 : Code[20];
    BEGIN
      // [SCENARIO 381140] Campaign Entry is created when post Sales Order with activated campaign

      Initialize;

      // [GIVEN] Activated Campaign "X"
      ActivatedSalesCampaignScenario(Campaign,SalesPrice,CustomerNo);

      // [GIVEN] Sales Order with Campaign "X"
      SalesHeader.GET(
        SalesHeader."Document Type"::Order,CreateSalesOrderForCampaign(SalesPrice,CustomerNo,1));

      // [WHEN] Post Sales Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Campaign Entry with Campaign "X" exists
      VerifyCampaignEntryExist(Campaign."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CampaignEntryNotCreatedWhenPostSalesOrderWithDeactivatedCampaign@94();
    VAR
      Campaign@1004 : Record 5071;
      SalesHeader@1003 : Record 36;
      SalesPrice@1002 : Record 7002;
      CampaignTargetGroupMgt@1001 : Codeunit 7030;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 381140] Campaign Entry is not created when post Sales Order with deactivated campaign

      Initialize;

      // [GIVEN] Deactivated Campaign "X"
      ActivatedSalesCampaignScenario(Campaign,SalesPrice,CustomerNo);
      CampaignTargetGroupMgt.DeactivateCampaign(Campaign,FALSE);

      // [GIVEN] Sales Order with Campaign "X"
      SalesHeader.GET(
        SalesHeader."Document Type"::Order,CreateSalesOrderForCampaign(SalesPrice,CustomerNo,1));

      // [WHEN] Post Sales Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Campaign Entry with Campaign "X" does not exist
      VerifyCampaignEntryDoesNotExist(Campaign."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UT_CampaignEntryNotCreatedIfInteractionLogEntryAlreadyExist@93();
    VAR
      Campaign@1004 : Record 5071;
      ContactBusinessRelation@1001 : Record 5054;
      SalesHeader@1003 : Record 36;
      SalesPrice@1002 : Record 7002;
      SegManagement@1005 : Codeunit 5051;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 381140] Sales Campaign Entry is not created when Interaction Log Entry for this "Document No." already exists

      Initialize;

      // [GIVEN] Activated Campaign "X"
      ActivatedSalesCampaignScenario(Campaign,SalesPrice,CustomerNo);

      // [GIVEN] Sales Order "Y" with Campaign "X"
      SalesHeader.GET(
        SalesHeader."Document Type"::Order,CreateSalesOrderForCampaign(SalesPrice,CustomerNo,1));

      // [GIVEN] Interaction Log Entry with "Document Type" = "Sales Order Confirmation", "Document No." = "Y"
      // Interaction Log Entry with type "Sales Order Confirmation" inserts when print "Sales Order Confirmation" report
      MockInteractionLogEntry(
        SegManagement.SalesInvoiceInterDocType,SalesHeader."No.",
        GetContactBusinessRelation(ContactBusinessRelation."Link to Table"::Customer,SalesHeader."Bill-to Customer No."));

      // [WHEN] Post Sales Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Campaign Entry with Campaign "X" does not exist
      VerifyCampaignEntryDoesNotExist(Campaign."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CampaignEntryNotCreatedWhenPostSalesOrderWithActivatedCampaignOutsidePostingDate@89();
    VAR
      Campaign@1005 : Record 5071;
      SalesHeader@1003 : Record 36;
      SalesPrice@1002 : Record 7002;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 201851] Campaign Entry is not create when Sales Order with Activated Campaign and "Posting Date" outside campaign's dates

      Initialize;

      // [GIVEN] Activated Campaign "X" with "Starting Date" = 01.01 and "Ending Date" = 01.02
      ActivatedSalesCampaignScenario(Campaign,SalesPrice,CustomerNo);

      // [GIVEN] Sales Order "Y" with Campaign "X" and "Posting Date" = 05.02
      SalesHeader.GET(
        SalesHeader."Document Type"::Order,CreateSalesOrderForCampaign(SalesPrice,CustomerNo,1));
      SalesHeader.VALIDATE("Posting Date",Campaign."Ending Date" + 1);
      SalesHeader.MODIFY(TRUE);

      // [WHEN] Post Sales Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Campaign Entry with Campaign "X" does not exist
      VerifyCampaignEntryDoesNotExist(Campaign."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InteractionTemplateVerificationWhePostSalesOrderWithActivatedCampaign@95();
    VAR
      InteractionTemplateSetup@1001 : Record 5122;
      Campaign@1004 : Record 5071;
      SalesHeader@1003 : Record 36;
      SalesPrice@1002 : Record 7002;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 201851] Interaction template is verified and error message is raised if it does not exist when Sales Order with activated campaign is posted

      Initialize;

      // [GIVEN] Activated Campaign "X"
      ActivatedSalesCampaignScenario(Campaign,SalesPrice,CustomerNo);

      // [GIVEN] Interaction Template code for "Sales Invoices" is not specified in "Interaction Template Setup"
      InteractionTemplateSetup.GET;
      InteractionTemplateSetup."Sales Invoices" := '';
      InteractionTemplateSetup.MODIFY;

      // [GIVEN] Sales Order with Campaign "X"
      SalesHeader.GET(
        SalesHeader."Document Type"::Order,CreateSalesOrderForCampaign(SalesPrice,CustomerNo,1));

      // [WHEN] Post Sales Order
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Error message "You must specify interaction template code "Sales Invoices" in Interaction Template Setup" is thrown
      Assert.ExpectedError(InterTemplateSalesInvoicesNotSpecifiedErr);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Interaction Template Setup");
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE SalesPriceDiscountScenario@88(VAR Campaign@1004 : Record 5071;VAR SalesPrice@1002 : Record 7002;VAR CustomerNo@1000 : Code[20];VAR SalesLineDiscount@1001 : Record 7004);
    VAR
      SalesAndReceivablesSetup@1003 : Record 311;
      ContactBusinessRelation@1005 : Record 5054;
    BEGIN
      Initialize;
      SalesAndReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryMarketing.CreateCampaign(Campaign);
      UpdateCampaign(Campaign);
      CreateSalesPrice(SalesPrice,Campaign."No.");
      CreateSalesLineDiscount(SalesLineDiscount,SalesPrice);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateSegmentWithCampaign(Campaign."No.",ContactBusinessRelation."Link to Table"::Customer,CustomerNo);
    END;

    LOCAL PROCEDURE ActivatedSalesCampaignScenario@80(VAR Campaign@1001 : Record 5071;VAR SalesPrice@1000 : Record 7002;VAR CustomerNo@1004 : Code[20]);
    VAR
      InteractionTemplateSetup@1005 : Record 5122;
      InteractionTemplate@1006 : Record 5064;
      ContactBusinessRelation@1003 : Record 5054;
      CampaignTargetGroupMgt@1002 : Codeunit 7030;
    BEGIN
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      InteractionTemplateSetup.GET;
      InteractionTemplateSetup.VALIDATE("Sales Invoices",InteractionTemplate.Code);
      InteractionTemplateSetup.MODIFY(TRUE);
      LibraryMarketing.CreateCampaign(Campaign);
      UpdateCampaign(Campaign);
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateSegmentWithCampaign(Campaign."No.",ContactBusinessRelation."Link to Table"::Customer,CustomerNo);
      CreateSalesPrice(SalesPrice,Campaign."No.");
      CampaignTargetGroupMgt.ActivateCampaign(Campaign);
      Campaign.FIND; // get latest version after activation
    END;

    LOCAL PROCEDURE AddCampaignToSegment@74(VAR SegmentHeader@1000 : Record 5076);
    BEGIN
      SegmentHeader.VALIDATE("Campaign No.",FindCampaign);
      SegmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddContactsToSegment@16(VAR Contact@1002 : Record 5050;SegmentHeader@1001 : Record 5076);
    VAR
      AddContacts@1000 : Report 5198;
    BEGIN
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");
      AddContacts.SETTABLEVIEW(SegmentHeader);
      AddContacts.SETTABLEVIEW(Contact);
      AddContacts.USEREQUESTPAGE(FALSE);
      AddContacts.RUNMODAL;
    END;

    LOCAL PROCEDURE AddSalespersonToSegment@66(VAR SegmentHeader@1000 : Record 5076);
    BEGIN
      SegmentHeader.VALIDATE("Salesperson Code",FindSalespersonPurchaser);
      SegmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ApplyMailingGroupToSegment@63(SegmentHeader@1002 : Record 5076;MailingGroupCode@1003 : Code[10]);
    VAR
      MailingGroup@1000 : Record 5055;
      ApplyMailingGroup@1001 : Report 5184;
    BEGIN
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");
      ApplyMailingGroup.SETTABLEVIEW(SegmentHeader);
      MailingGroup.SETRANGE(Code,MailingGroupCode);
      ApplyMailingGroup.SETTABLEVIEW(MailingGroup);
      ApplyMailingGroup.USEREQUESTPAGE(FALSE);
      ApplyMailingGroup.RUNMODAL;
    END;

    LOCAL PROCEDURE CreateCampaignPriceDiscount@49(VAR Campaign@1000 : Record 5071;VAR SalesPrice@1002 : Record 7002;VAR SalesLineDiscount@1001 : Record 7004);
    BEGIN
      LibraryMarketing.CreateCampaign(Campaign);
      Campaign.VALIDATE("Starting Date",WORKDATE);
      Campaign.VALIDATE("Ending Date",WORKDATE);
      Campaign.MODIFY(TRUE);
      CreateSalesPrice(SalesPrice,Campaign."No.");
      CreateSalesLineDiscount(SalesLineDiscount,SalesPrice);
    END;

    LOCAL PROCEDURE CreateCampaignWithDetails@72(SalespersonCode@1000 : Code[10];StatusCode@1001 : Code[10]) CampaignNo : Code[20];
    VAR
      CampaignCard@1002 : TestPage 5086;
    BEGIN
      CampaignCard.OPENNEW;
      CampaignCard."No.".ACTIVATE;
      CampaignCard."Salesperson Code".SETVALUE(SalespersonCode);
      CampaignCard."Starting Date".SETVALUE(WORKDATE);
      CampaignCard."Ending Date".SETVALUE(WORKDATE);
      CampaignCard."Status Code".SETVALUE(StatusCode);
      CampaignNo := CampaignCard."No.".VALUE;
      CampaignCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateInteractionTemplate@6(VAR InteractionTemplate@1000 : Record 5064);
    BEGIN
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      InteractionTemplate.VALIDATE("Unit Cost (LCY)",RANDOM(100));
      InteractionTemplate.VALIDATE("Unit Duration (Min.)",RANDOM(100));
      InteractionTemplate.MODIFY(TRUE);
      InteractionTemplateCode := InteractionTemplate.Code;  // Set global variable for form handler.
    END;

    LOCAL PROCEDURE CreateSalesLine@55(SalesHeader@1004 : Record 36;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      CLEAR(SalesLine);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesLineDiscount@40(VAR SalesLineDiscount@1001 : Record 7004;SalesPrice@1000 : Record 7002);
    BEGIN
      LibraryMarketing.CreateSalesLineDiscount(SalesLineDiscount,SalesPrice."Sales Code",SalesPrice."Item No.");
      // Add random number to input Minimum Quantity greater than Minimum Quantity of Sales Price.
      SalesLineDiscount.RENAME(
        SalesLineDiscount.Type,SalesLineDiscount.Code,SalesLineDiscount."Sales Type",SalesLineDiscount."Sales Code",
        SalesLineDiscount."Starting Date",SalesLineDiscount."Currency Code",SalesLineDiscount."Variant Code",
        SalesPrice."Unit of Measure Code",SalesPrice."Minimum Quantity" + RANDOM(10));
      SalesLineDiscount.VALIDATE("Line Discount %",RANDOM(99));  // Any percentage between 1 and 99.
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderForCampaign@47(SalesPrice@1001 : Record 7002;CustomerNo@1003 : Code[20];SalesLineDiscountQuantity@1004 : Decimal) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.SetHideValidationDialog(TRUE);
      SalesHeader.VALIDATE("Bill-to Customer No.",CustomerNo);
      SalesHeader.VALIDATE("Currency Code",SalesPrice."Currency Code");
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesPrice."Item No.",SalesPrice."Minimum Quantity" - 1);  // For not meeting Sales Price condition.
      CreateSalesLine(SalesHeader,SalesPrice."Item No.",SalesPrice."Minimum Quantity");
      CreateSalesLine(SalesHeader,SalesPrice."Item No.",SalesLineDiscountQuantity);
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateSalesPrice@37(VAR SalesPrice@1001 : Record 7002;CampaignNo@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
      LibraryInventory@1003 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",RANDOM(1000) + LibraryUtility.GenerateRandomFraction);  // To generate large decimal value.
      Item.MODIFY(TRUE);
      LibraryMarketing.CreateSalesPriceForCampaign(SalesPrice,Item."No.",CampaignNo);
      SalesPrice.RENAME(
        SalesPrice."Item No.",SalesPrice."Sales Type",SalesPrice."Sales Code",SalesPrice."Starting Date",SalesPrice."Currency Code",
        SalesPrice."Variant Code",Item."Base Unit of Measure",RANDOM(10) + 1);
      // Addition by 1 ensures that Quantity is greater than 1.
      SalesPrice.VALIDATE("Unit Price",RANDOM(10000) + LibraryUtility.GenerateRandomFraction);  // To generate large decimal value.
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ActivatePagePriceLineDiscount@76(No@1001 : Code[20]);
    VAR
      CampaignCard@1000 : TestPage 5086;
    BEGIN
      CampaignCard.OPENVIEW;
      CampaignCard.FILTER.SETFILTER("No.",No);
      CampaignCard.ActivateSalesPricesLineDisc.INVOKE;
    END;

    LOCAL PROCEDURE SalesOrderPageOpenNew@77(VAR SalesOrderNo@1001 : Code[20]);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENNEW;
      SalesOrder."Sell-to Customer No.".ACTIVATE;
      SalesOrderNo := SalesOrder."No.".VALUE;
      SalesOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE SalesOrderPageOpenEdit@75(SalesOrder@1002 : TestPage 42;No@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("Document Type",FORMAT(SalesHeader."Document Type"::Order));
      SalesOrder.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE SalesOrderPageOpenView@71(SalesOrder@1001 : TestPage 42;No@1000 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("Document Type",FORMAT(SalesHeader."Document Type"::Order));
      SalesOrder.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE CreateSegmentHeaderInteraction@46(VAR SegmentHeader@1000 : Record 5076);
    VAR
      InteractionTemplate@1001 : Record 5064;
    BEGIN
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      SegmentHeader.VALIDATE("Interaction Template Code",InteractionTemplate.Code);
      SegmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSegmentLineWithContact@18(VAR SegmentLine@1000 : Record 5077;SegmentHeaderNo@1001 : Code[20]);
    VAR
      Contact@1002 : Record 5050;
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      IF Contact."Phone No." = '' THEN BEGIN
        Contact.VALIDATE("Phone No.",FORMAT(RANDOM(10000)));  // Required field - value is not important to test case.
        Contact.MODIFY(TRUE);
      END;

      LibraryMarketing.CreateSegmentLine(SegmentLine,SegmentHeaderNo);
      SegmentLine.VALIDATE("Contact No.",Contact."No.");
      SegmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSegmentWithCampaign@48(CampaignNo@1003 : Code[20];LinkToTable@1005 : Option;AccountNo@1006 : Code[20]);
    VAR
      SegmentHeader@1000 : Record 5076;
      Contact@1004 : Record 5050;
    BEGIN
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      SegmentHeader.VALIDATE("Campaign No.",CampaignNo);
      SegmentHeader.MODIFY(TRUE);

      Contact.SETRANGE("No.",GetContactBusinessRelation(LinkToTable,AccountNo));
      AddContactsToSegment(Contact,SegmentHeader);

      ModifyCampaignTargetLines(SegmentHeader."No.");
    END;

    LOCAL PROCEDURE CreateSegmentWithContact@27(VAR SegmentHeader@1003 : Record 5076;VAR Contact@1002 : Record 5050) SecondContactSalespersonCode : Code[10];
    BEGIN
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      SecondContactSalespersonCode := FilterContacts(Contact);
      AddContactsToSegment(Contact,SegmentHeader);
    END;

    LOCAL PROCEDURE CreateTemporarySegmentLine@39(VAR TempSegmentLine@1000 : TEMPORARY Record 5077);
    VAR
      Contact@1001 : Record 5050;
    BEGIN
      TempSegmentLine.INSERT;  // Insert temporary Segment Line to modify fields later.
      Contact.GET(TempSegmentLine."Contact No.");
      TempSegmentLine.VALIDATE("Contact Via",Contact."Phone No.");
      TempSegmentLine.VALIDATE(Description,TempSegmentLine."Contact No.");
      TempSegmentLine.VALIDATE("Salesperson Code",Contact."Salesperson Code");
    END;

    LOCAL PROCEDURE FilterContacts@53(VAR Contact@1001 : Record 5050) : Code[10];
    VAR
      Contact2@1000 : Record 5050;
    BEGIN
      Contact.SETFILTER("Salesperson Code",'<>''''');  // It is necessary to have Sales Person for the test case.
      Contact.FINDFIRST;
      Contact2.SETFILTER("Salesperson Code",'<>%1',Contact."Salesperson Code");
      Contact2.SETFILTER("No.",'<>%1',Contact."No.");
      Contact2.FINDFIRST;
      Contact.SETRANGE("No.",Contact."No.",Contact2."No.");
      EXIT(Contact2."Salesperson Code");
    END;

    LOCAL PROCEDURE FindCampaign@79() : Code[20];
    VAR
      Campaign@1000 : Record 5071;
    BEGIN
      LibraryMarketing.CreateCampaign(Campaign);
      EXIT(Campaign."No.");
    END;

    LOCAL PROCEDURE FindSalesOrderLines@83(VAR SalesLine@1001 : Record 37;DocumentNo@1000 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDSET;
    END;

    LOCAL PROCEDURE FindSalespersonPurchaser@62() : Code[10];
    VAR
      SalespersonPurchaser@1000 : Record 13;
    BEGIN
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      EXIT(SalespersonPurchaser.Code);
    END;

    LOCAL PROCEDURE FinishMakePhoneCallWizard@52(VAR TempSegmentLine@1000 : TEMPORARY Record 5077);
    BEGIN
      TempSegmentLine.MODIFY;
      TempSegmentLine.CheckStatus2;
      TempSegmentLine.FinishWizard2;
    END;

    LOCAL PROCEDURE ModifyCampaignTargetLines@45(SegmentHeaderNo@1000 : Code[20]);
    VAR
      SegmentLine@1001 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeaderNo);
      SegmentLine.FINDSET;
      REPEAT
        SegmentLine.VALIDATE("Campaign Target",TRUE);
        SegmentLine.MODIFY(TRUE);
      UNTIL SegmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE NextStepMakePhoneCallWizard@57(VAR TempSegmentLine@1000 : TEMPORARY Record 5077);
    BEGIN
      TempSegmentLine.MODIFY;
      TempSegmentLine.CheckStatus2;
      TempSegmentLine.PerformNextWizardStatus2;
    END;

    LOCAL PROCEDURE RefineContactsOnSegment@19(VAR Contact@1002 : Record 5050;SegmentHeader@1001 : Record 5076);
    VAR
      RemoveContactsRefine@1000 : Report 5196;
    BEGIN
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");
      RemoveContactsRefine.SETTABLEVIEW(SegmentHeader);
      RemoveContactsRefine.SETTABLEVIEW(Contact);
      RemoveContactsRefine.USEREQUESTPAGE(FALSE);
      RemoveContactsRefine.RUNMODAL;
    END;

    LOCAL PROCEDURE RemoveContactsFromSegment@8(VAR Contact@1002 : Record 5050;SegmentHeader@1001 : Record 5076);
    VAR
      RemoveContactsReduce@1000 : Report 5197;
    BEGIN
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");
      RemoveContactsReduce.SETTABLEVIEW(SegmentHeader);
      RemoveContactsReduce.SETTABLEVIEW(Contact);
      RemoveContactsReduce.USEREQUESTPAGE(FALSE);
      RemoveContactsReduce.RUNMODAL;
    END;

    LOCAL PROCEDURE GetContactBusinessRelation@91(LinkToTable@1001 : Option;AccountNo@1002 : Code[20]) : Code[20];
    VAR
      ContBusRelation@1000 : Record 5054;
    BEGIN
      ContBusRelation.SETRANGE("Link to Table",LinkToTable);
      ContBusRelation.SETRANGE("No.",AccountNo);
      ContBusRelation.FINDFIRST;
      EXIT(ContBusRelation."Contact No.");
    END;

    LOCAL PROCEDURE UpdateCampaign@65(Campaign@1000 : Record 5071);
    BEGIN
      Campaign.VALIDATE("Starting Date",WORKDATE);
      Campaign.VALIDATE("Ending Date",CALCDATE('<' + FORMAT(RANDOM(5)) + 'Y>',WORKDATE));
      Campaign.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesOrderForCampaign@67(SalesPrice@1001 : Record 7002;No@1002 : Code[20];CustomerNo@1008 : Code[20];Quantity@1007 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrderPageOpenEdit(SalesOrder,No);
      SalesOrder."Sell-to Customer No.".SETVALUE(CustomerNo);
      SalesOrder."Bill-to Customer No.".SETVALUE(CustomerNo);
      SalesOrder."Currency Code".SETVALUE(SalesPrice."Currency Code");
      SalesOrder.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      SalesOrder.SalesLines."No.".SETVALUE(SalesPrice."Item No.");
      SalesOrder.SalesLines.Quantity.SETVALUE(Quantity);
      SalesOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE MockInteractionLogEntry@96(DocType@1000 : Option;DocNo@1001 : Code[20];ContactNo@1004 : Code[20]);
    VAR
      InteractionLogEntry@1002 : Record 5065;
      InteractionTemplate@1005 : Record 5064;
      SegManagement@1003 : Codeunit 5051;
    BEGIN
      InteractionLogEntry.INIT;
      InteractionLogEntry."Entry No." :=
        LibraryUtility.GetNewRecNo(InteractionLogEntry,InteractionLogEntry.FIELDNO("Entry No."));
      InteractionLogEntry."Contact No." := ContactNo;
      InteractionLogEntry."Document Type" := DocType;
      InteractionLogEntry."Document No." := DocNo;
      InteractionTemplate.GET(SegManagement.FindInteractTmplCode(DocType));
      InteractionLogEntry."Interaction Template Code" := InteractionTemplate.Code;
      InteractionLogEntry."Interaction Group Code" := InteractionTemplate."Interaction Group Code";
      InteractionLogEntry.INSERT;
    END;

    LOCAL PROCEDURE VerifyCampaignEntry@13(InteractionTemplate@1000 : Record 5064;CampaignNo@1001 : Code[20]);
    VAR
      CampaignEntry@1002 : Record 5072;
    BEGIN
      CampaignEntry.SETRANGE("Campaign No.",CampaignNo);
      CampaignEntry.FINDFIRST;
      CampaignEntry.CALCFIELDS("No. of Interactions","Cost (LCY)","Duration (Min.)");
      CampaignEntry.TESTFIELD("No. of Interactions",1);  // Number of interactions should be only 1.
      CampaignEntry.TESTFIELD("Cost (LCY)",InteractionTemplate."Unit Cost (LCY)");
      CampaignEntry.TESTFIELD("Duration (Min.)",InteractionTemplate."Unit Duration (Min.)");
    END;

    LOCAL PROCEDURE VerifyCampaignWithDetails@81(CampaignNo@1003 : Code[20];SalespersonCode@1000 : Code[10];StatusCode@1001 : Code[10]);
    VAR
      CampaignCard@1002 : TestPage 5086;
    BEGIN
      CampaignCard.OPENVIEW;
      CampaignCard.FILTER.SETFILTER("No.",CampaignNo);
      CampaignCard."Salesperson Code".ASSERTEQUALS(SalespersonCode);
      CampaignCard."Starting Date".ASSERTEQUALS(WORKDATE);
      CampaignCard."Ending Date".ASSERTEQUALS(WORKDATE);
      CampaignCard."Status Code".ASSERTEQUALS(StatusCode);
      CampaignCard."Last Date Modified".ASSERTEQUALS(TODAY);
    END;

    LOCAL PROCEDURE VerifyContactAddedSegmentLine@7(Contact@1000 : Record 5050;SegmentHeaderNo@1001 : Code[20]);
    VAR
      SegmentLine@1002 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeaderNo);
      SegmentLine.FINDFIRST;
      SegmentLine.TESTFIELD("Contact No.",Contact."No.");
      SegmentLine.TESTFIELD("Salesperson Code",Contact."Salesperson Code");
      SegmentLine.TESTFIELD("Correspondence Type",Contact."Correspondence Type");
    END;

    LOCAL PROCEDURE VerifyInteractionLogEntry@5(InteractionTemplate@1002 : Record 5064;ContactNo@1001 : Code[20];CampaignNo@1003 : Code[20]);
    VAR
      InteractionLogEntry@1000 : Record 5065;
    BEGIN
      InteractionLogEntry.SETRANGE("Contact No.",ContactNo);
      InteractionLogEntry.FINDLAST;
      InteractionLogEntry.TESTFIELD("Information Flow",InteractionTemplate."Information Flow");
      InteractionLogEntry.TESTFIELD("Initiated By",InteractionTemplate."Initiated By");
      InteractionLogEntry.TESTFIELD("Interaction Group Code",InteractionTemplate."Interaction Group Code");
      InteractionLogEntry.TESTFIELD("Interaction Template Code",InteractionTemplate.Code);
      InteractionLogEntry.TESTFIELD("Attachment No.",InteractionTemplate."Attachment No.");
      InteractionLogEntry.TESTFIELD("Campaign No.",CampaignNo);
      InteractionLogEntry.TESTFIELD("Cost (LCY)",InteractionTemplate."Unit Cost (LCY)");
      InteractionLogEntry.TESTFIELD("Duration (Min.)",InteractionTemplate."Unit Duration (Min.)");
    END;

    LOCAL PROCEDURE VerifyInteractionTemplate@38(SegmentHeader@1000 : Record 5076);
    VAR
      SegmentLine@1001 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeader."No.");
      SegmentLine.FINDSET;
      REPEAT
        SegmentLine.TESTFIELD("Interaction Template Code",SegmentHeader."Interaction Template Code");
      UNTIL SegmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyNeutralInteractionLog@26(SegmentHeaderNo@1000 : Code[20];AttemptFailed@1003 : Boolean);
    VAR
      SegmentLine@1001 : Record 5077;
      InteractionLogEntry@1002 : Record 5065;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeaderNo);
      SegmentLine.FINDFIRST;
      InteractionLogEntry.SETRANGE("Contact No.",SegmentLine."Contact No.");
      InteractionLogEntry.FINDLAST;
      InteractionLogEntry.TESTFIELD(Evaluation,InteractionLogEntry.Evaluation::Neutral);
      InteractionLogEntry.TESTFIELD("Attempt Failed",AttemptFailed);
    END;

    LOCAL PROCEDURE VerifyPositiveInteractionLog@25(SegmentHeaderNo@1000 : Code[20];OpportunityNo@1003 : Code[20]);
    VAR
      SegmentLine@1001 : Record 5077;
      InteractionLogEntry@1002 : Record 5065;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeaderNo);
      SegmentLine.FINDFIRST;
      InteractionLogEntry.SETRANGE("Contact No.",SegmentLine."Contact No.");
      InteractionLogEntry.FINDLAST;
      InteractionLogEntry.TESTFIELD(Evaluation,InteractionLogEntry.Evaluation::"Very Positive");
      InteractionLogEntry.TESTFIELD("Opportunity No.",OpportunityNo);
      InteractionLogEntry.TESTFIELD("Attempt Failed",FALSE);
    END;

    LOCAL PROCEDURE VerifyPriceDiscountsActivated@50(SalesPrice@1001 : Record 7002;SalesLineDiscount@1000 : Record 7004;SalesHeaderNo@1002 : Code[20]);
    VAR
      SalesLine@1003 : Record 37;
      Item@1004 : Record 27;
    BEGIN
      FindSalesOrderLines(SalesLine,SalesHeaderNo);
      REPEAT
        IF SalesLine.Quantity < SalesPrice."Minimum Quantity" THEN BEGIN
          Item.GET(SalesLine."No.");
          SalesLine.TESTFIELD("Unit Price",Item."Unit Price");
          SalesLine.TESTFIELD("Line Discount %",0);
        END;
        IF (SalesLine.Quantity >= SalesPrice."Minimum Quantity") AND (SalesLine.Quantity < SalesLineDiscount."Minimum Quantity")
        THEN BEGIN
          SalesLine.TESTFIELD("Unit Price",SalesPrice."Unit Price");
          SalesLine.TESTFIELD("Line Discount %",0);
        END;
        IF SalesLine.Quantity >= SalesLineDiscount."Minimum Quantity" THEN BEGIN
          SalesLine.TESTFIELD("Unit Price",SalesPrice."Unit Price");
          SalesLine.TESTFIELD("Line Discount %",SalesLineDiscount."Line Discount %");
        END;
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPriceDiscountDeactivated@58(SalesHeaderNo@1002 : Code[20]);
    VAR
      SalesLine@1003 : Record 37;
      Item@1004 : Record 27;
    BEGIN
      FindSalesOrderLines(SalesLine,SalesHeaderNo);
      REPEAT
        Item.GET(SalesLine."No.");
        SalesLine.TESTFIELD("Unit Price",Item."Unit Price");
        SalesLine.TESTFIELD("Line Discount %",0);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalespersonCampaignLines@68(SegmentHeader@1000 : Record 5076);
    VAR
      SegmentLine@1001 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeader."No.");
      SegmentLine.FINDSET;
      REPEAT
        SegmentLine.TESTFIELD("Salesperson Code",SegmentHeader."Salesperson Code");
        SegmentLine.TESTFIELD("Campaign No.",SegmentHeader."Campaign No.");
      UNTIL SegmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySaveCriteriaAndReuse@44(SegmentHeaderNo@1000 : Code[20];SegmentHeaderNo3@1001 : Code[20]);
    VAR
      SegmentLine@1002 : Record 5077;
      SegmentLine2@1003 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeaderNo);
      SegmentLine.FINDSET;
      REPEAT
        SegmentLine2.GET(SegmentHeaderNo3,SegmentLine."Line No.");  // Line Nos. are same for both set of Segment Lines.
        SegmentLine2.TESTFIELD("Interaction Template Code",SegmentLine."Interaction Template Code");
        SegmentLine2.TESTFIELD("Contact No.",SegmentLine."Contact No.");
      UNTIL SegmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPriceDiscountActivation@82(SalesOrderNo@1000 : Code[20];UnitPrice@1002 : Decimal;LineDiscountPct@1001 : Decimal);
    VAR
      SalesOrder@1003 : TestPage 42;
    BEGIN
      SalesOrderPageOpenView(SalesOrder,SalesOrderNo);
      SalesOrder.SalesLines."Unit Price".ASSERTEQUALS(UnitPrice);
      SalesOrder.SalesLines."Line Discount %".ASSERTEQUALS(LineDiscountPct);
    END;

    LOCAL PROCEDURE VerifyPriceDiscountDeactivate@87(SalesOrderNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
      SalesOrder@1002 : TestPage 42;
    BEGIN
      SalesOrderPageOpenView(SalesOrder,SalesOrderNo);
      Item.GET(SalesOrder.SalesLines."No.".VALUE);
      SalesOrder.SalesLines."Unit Price".ASSERTEQUALS(Item."Unit Price");
      SalesOrder.SalesLines."Line Discount %".ASSERTEQUALS(0);
    END;

    LOCAL PROCEDURE VerifyCampaignEntryExist@85(CampaignNo@1001 : Code[20]);
    VAR
      DummyCampaignEntry@1000 : Record 5072;
    BEGIN
      DummyCampaignEntry.SETRANGE("Campaign No.",CampaignNo);
      Assert.RecordIsNotEmpty(DummyCampaignEntry);
    END;

    LOCAL PROCEDURE VerifyCampaignEntryDoesNotExist@86(CampaignNo@1000 : Code[20]);
    VAR
      DummyCampaignEntry@1001 : Record 5072;
    BEGIN
      DummyCampaignEntry.SETRANGE("Campaign No.",CampaignNo);
      Assert.RecordIsEmpty(DummyCampaignEntry);
    END;

    [ModalPageHandler]
    PROCEDURE AttemptFailedModalFormHandler@36(VAR MakePhoneCall@1000 : Page 5147;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
    BEGIN
      MakePhoneCall.GETRECORD(TempSegmentLine);
      CreateTemporarySegmentLine(TempSegmentLine);
      NextStepMakePhoneCallWizard(TempSegmentLine);

      TempSegmentLine.VALIDATE(Evaluation,TempSegmentLine.Evaluation::Neutral);
      TempSegmentLine.VALIDATE("Interaction Successful",FALSE);
      FinishMakePhoneCallWizard(TempSegmentLine);
    END;

    [ModalPageHandler]
    PROCEDURE CallLoggedModalFormHandler@22(VAR MakePhoneCall@1000 : Page 5147;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
    BEGIN
      MakePhoneCall.GETRECORD(TempSegmentLine);
      CreateTemporarySegmentLine(TempSegmentLine);
      TempSegmentLine.VALIDATE("Dial Contact",FALSE);  // Validate Dial contact as FALSE since default value is TRUE here.
      NextStepMakePhoneCallWizard(TempSegmentLine);

      TempSegmentLine.PerformPostStep2;
    END;

    [ModalPageHandler]
    PROCEDURE CallNeutralModalFormHandler@29(VAR MakePhoneCall@1000 : Page 5147;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
    BEGIN
      MakePhoneCall.GETRECORD(TempSegmentLine);
      CreateTemporarySegmentLine(TempSegmentLine);
      NextStepMakePhoneCallWizard(TempSegmentLine);

      TempSegmentLine.VALIDATE(Evaluation,TempSegmentLine.Evaluation::Neutral);
      FinishMakePhoneCallWizard(TempSegmentLine);
    END;

    [ModalPageHandler]
    PROCEDURE CallPositiveModalFormHandler@34(VAR MakePhoneCall@1000 : Page 5147;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
      Opportunity@1004 : Record 5092;
    BEGIN
      MakePhoneCall.GETRECORD(TempSegmentLine);
      CreateTemporarySegmentLine(TempSegmentLine);
      NextStepMakePhoneCallWizard(TempSegmentLine);

      TempSegmentLine.VALIDATE(Evaluation,TempSegmentLine.Evaluation::"Very Positive");
      NextStepMakePhoneCallWizard(TempSegmentLine);

      Opportunity.SETRANGE("Contact No.",TempSegmentLine."Contact No.");
      Opportunity.FINDFIRST;
      TempSegmentLine.VALIDATE("Campaign No.",CampaignNo3);
      TempSegmentLine.VALIDATE("Opportunity No.",Opportunity."No.");
      FinishMakePhoneCallWizard(TempSegmentLine);
    END;

    [ModalPageHandler]
    PROCEDURE CreateInteractModalFormHandler@2(VAR CreateInteraction@1000 : Page 5077;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
      TempAttachment@1004 : TEMPORARY Record 5062;
    BEGIN
      CreateInteraction.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;  // Insert temporary Segment Line to modify fields later.
      TempSegmentLine.VALIDATE("Interaction Template Code",InteractionTemplateCode);
      TempSegmentLine.VALIDATE(Description,InteractionTemplateCode);
      TempSegmentLine.VALIDATE("Campaign No.",CampaignNo2);
      TempSegmentLine.FinishWizard(TRUE,TempAttachment);
    END;

    [ModalPageHandler]
    PROCEDURE CriteriaListModalFormHandler@35(VAR SavedSegmentCriteriaList@1000 : Page 5141;VAR Response@1001 : Action);
    VAR
      SavedSegmentCriteria@1002 : Record 5098;
    BEGIN
      SavedSegmentCriteria.SETRANGE(Code,InteractionTemplateCode2);
      SavedSegmentCriteria.FINDFIRST;
      SavedSegmentCriteriaList.SETRECORD(SavedSegmentCriteria);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE DescriptionModalFormHandler@21(VAR MakePhoneCall@1000 : Page 5147;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
      Contact@1003 : Record 5050;
    BEGIN
      MakePhoneCall.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;  // Insert temporary Segment Line to modify fields later.
      Contact.GET(TempSegmentLine."Contact No.");
      TempSegmentLine.VALIDATE("Contact Via",Contact."Phone No.");
      TempSegmentLine.MODIFY;
      TempSegmentLine.CheckStatus2;
    END;

    [ModalPageHandler]
    PROCEDURE NumberErrorModalFormHandler@17(VAR MakePhoneCall@1000 : Page 5147;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
    BEGIN
      MakePhoneCall.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;  // Insert temporary Segment Line to modify fields later.
      TempSegmentLine.VALIDATE("Contact Via",'');  // Validate Contact Via as blank to generate error.
      TempSegmentLine.MODIFY;
      TempSegmentLine.CheckStatus2;
    END;

    [ModalPageHandler]
    PROCEDURE NoSeriesListModalPageHandler@73(VAR NoSeriesList@1000 : TestPage 571);
    BEGIN
      NoSeriesList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SaveSegmentModalFormHandler@33(VAR SaveSegmentCriteria@1000 : Page 5142;VAR Response@1001 : Action);
    VAR
      SavedSegmentCriteria@1002 : Record 5098;
      SegmentCriteriaLine@1003 : Record 5097;
      SavedSegmentCriteriaLine@1004 : Record 5099;
    BEGIN
      SavedSegmentCriteria.INIT;
      SavedSegmentCriteria.VALIDATE(Code,InteractionTemplateCode2);
      SavedSegmentCriteria.INSERT(TRUE);

      SegmentCriteriaLine.SETRANGE("Segment No.",SegmentHeaderNo2);
      SegmentCriteriaLine.FINDSET;
      REPEAT
        SavedSegmentCriteriaLine.INIT;
        SavedSegmentCriteriaLine.VALIDATE("Segment Criteria Code",SavedSegmentCriteria.Code);
        SavedSegmentCriteriaLine.VALIDATE("Line No.",SegmentCriteriaLine."Line No.");
        SavedSegmentCriteriaLine.VALIDATE(Action,SegmentCriteriaLine.Action);
        SavedSegmentCriteriaLine.VALIDATE(Type,SegmentCriteriaLine.Type);
        SavedSegmentCriteriaLine.VALIDATE("Table No.",SegmentCriteriaLine."Table No.");
        SavedSegmentCriteriaLine.VALIDATE(View,SegmentCriteriaLine.View);
        SavedSegmentCriteriaLine.VALIDATE("Allow Existing Contacts",SegmentCriteriaLine."Allow Existing Contacts");
        SavedSegmentCriteriaLine.VALIDATE("Expand Contact",SegmentCriteriaLine."Expand Contact");
        SavedSegmentCriteriaLine.VALIDATE("Allow Company with Persons",SegmentCriteriaLine."Allow Company with Persons");
        SavedSegmentCriteriaLine.VALIDATE("Ignore Exclusion",SegmentCriteriaLine."Ignore Exclusion");
        SavedSegmentCriteriaLine.VALIDATE("Entire Companies",SegmentCriteriaLine."Entire Companies");
        SavedSegmentCriteriaLine.VALIDATE("No. of Filters",SegmentCriteriaLine."No. of Filters");
        SavedSegmentCriteriaLine.INSERT(TRUE);
      UNTIL SegmentCriteriaLine.NEXT = 0;
      Response := ACTION::OK;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@9(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@42(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Marketing] [Campaign] [Segment] [Sales]
      Unsupported version tags:
      NA: Unable to Compile

      Test for Marketing Campaign Segmentation:
        1. Test creation of a campaign and the interactions linked to the campaign.
        2. Test creating segments, adding contacts to a segment, removing contacts by reducing or refining a segment.
        3. Test that an interaction log entry is created after creation of an interaction in the Make Phone Call wizard, called from the
           Segment window.
        4. Test that it is possible to save criteria for the Segment and create new Segment by using the saved criteria.
        5. Test creation, activation or deactivation of Sales Prices and Line Discounts for a Campaign. Verify that the Sales Prices and
           Discounts are suggested on the Sales Line when all the required criteria are met.
        6. Apply Mailing Group from the segment the Mailing Group is attached to the Contact.
        7. Test that Removing a Contact from Segment does not remove all the contacts.
        8. Test that refining a Contact from Segment removes all other Contact on Segment Lines.
        9. Test creation of a Segment with details such as Salesperson and Campaign.
       10. Test Creation of a new Campaign from Card with No Series.
       11. Test Creation of a new Campaign from Card with details.
       12. Test to verify that Sales Price and Sales Line Discount are Suggested on the Sales Line for an activated Campaign.
       13. Test to verify that Sales Price and Sales Line Discount are not suggested on the Sales Line for deactivated Campaign.

      TFS_TS_ID = 21741
      Cover Test cases:
        TC0064 TFS_TC_ID=12026 and 31827
        TC0065 TFS_TC_ID=12027 and 31828
        TC0066 TFS_TC_ID=12028 and 31829
        TC0069 TFS_TC_ID=12031 and 31832
        TC0070 TFS_TC_ID=12032 and 31833

      TFS_TS_ID = 160766
      Cover Test cases:
        TFS_TC_ID=129050
        TFS_TC_ID=129052
        TFS_TC_ID=129060

      TFS_TS_ID = 206137
      Cover Test cases:
      ---------------------------------------
      Test Function Name               TFS ID
      ---------------------------------------
      CreateNewSegmentWithDetails      139869

      TFS_TS_ID = 245059
      Cover Test cases:
      ---------------------------------------
      Test Function Name               TFS ID
      ---------------------------------------
      CreateCampaignWithNoSeries,      130462
      CreateCampaignFromCardDetails    130462

      TFS_TS_ID = 245884
      Cover Test cases:
      --------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      --------------------------------------------------------------------------
      SalesPriceDiscountActivation, SalesPriceDiscountDeactivation       139870

      --------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      --------------------------------------------------------------------------
      ContactMailingGroupDescription                                     51572
    }
    END.
  }
}

