OBJECT Codeunit 144012 TCS Document Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500007 : Record 98;
      AssesseeCode@1500013 : Record 13727;
      NodNocHeader@1500012 : Record 13786;
      TcsNatureOfCollection@1500011 : Record 16507;
      TCSSetup@1500010 : Record 16508;
      CompanyInformation@1500014 : Record 79;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryRandom@1500001 : Codeunit 130440;
      LibraryInventory@1500003 : Codeunit 132201;
      LibrarySales@1500004 : Codeunit 130509;
      LibrarySetupStorage@1500009 : Codeunit 131009;
      LibraryVariableStorage@1500008 : Codeunit 131004;
      LibraryTCS@1500002 : Codeunit 143008;
      LibraryTDS@1500019 : Codeunit 143000;
      LibraryUtility@1500016 : Codeunit 131000;
      Assert@1500006 : Codeunit 130000;
      isInitialized@1500005 : Boolean;
      AmountErr@1500018 : TextConst '@@@="%1 and %2 = TDS% and TDS field Caption";ENU=%1 is incorrect in %2.';
      ExpectedPayTDSErr@1500015 : TextConst '@@@="%1 =TCS Accunt No ";ENU=There are no TCS entries for Account No. %1.';
      MatchErr@1500017 : TextConst 'ENU=Paid by book entry can be true only for government organisations.';

    [Test]
    PROCEDURE CreateSalesInvoiceWithOutTCSAndVerifyTCSPaymentJournal@1500016();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
    BEGIN
      // [SCENARIO 163704] Create Payment Journal for TCS Payment after Posting Sales Order Without TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order Without TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Payment Journal
      CreateAndPostSalesDocumentWithoutTCS;
      CreateJournalForTCSPaymentWithBalAcc(GenJournalLine,GenJournalTemplate.Type::Payments,GenJournalTemplate."Sub Type"::" ");

      // [THEN] Error is thrown upon invoking calulate TCS
      VerifyTCSPaymentErrorOnJournal(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE CreateSalesInvoiceWithTCSAndVerifyTCSPaymentJournal@1500036();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      DocumentNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163705] Create Payment Journal for TCS Payment after Posting Sales Order With TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order With TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Payment Journal
      DocumentNo := CreateAndPostSalesDocument;
      CreateJournalForTCSPaymentWithBalAcc(GenJournalLine,GenJournalTemplate.Type::Payments,GenJournalTemplate."Sub Type"::" ");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      PayTCS(GenJournalLine."Journal Batch Name");

      // [THEN] Payment Amount is verified and posted without error
      VerifyTCSAmountAndPost(GenJournalLine."Document No.",DocumentNo);
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceWithOutTCSAndVerifyTCSCashPmntVoucher@1500027();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
    BEGIN
      // [SCENARIO 163706] Create Cash Payment Voucher for TCS Payment after Posting Sales Order Without TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order Without TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Cash Payment Voucher
      CreateAndPostSalesDocumentWithoutTCS;
      CreateJournalForTCSPaymentWithBalAcc(
        GenJournalLine,GenJournalTemplate.Type::General,GenJournalTemplate."Sub Type"::"Cash Payment Voucher");

      // [THEN] Error is thrown upon invoking calulate TCS
      VerifyTCSPaymentErrorOnJournal(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE CreateSalesInvoiceWithTCSAndVerifyTCSCashPmntVoucher@1500022();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      DocumentNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163707] Create Cash Payment Voucher for TCS Payment after Posting Sales Order With TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order With TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Payment Voucher
      DocumentNo := CreateAndPostSalesDocument;
      CreateJournalForTCSPaymentWithBalAcc(
        GenJournalLine,GenJournalTemplate.Type::General,GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      PayTCSCash(GenJournalLine."Journal Batch Name");

      // [THEN] Payment Amount is verified and posted without error
      VerifyTCSAmountAndPost(GenJournalLine."Document No.",DocumentNo);
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceWithOutTCSAndVerifyTCSBankPmntVoucher@1500033();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
    BEGIN
      // [SCENARIO 163708] Create Bank Payment Voucher for TCS Payment after Posting Sales Order Without TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order Without TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Bank Payment Voucher
      CreateAndPostSalesDocumentWithoutTCS;
      CreateJournalForTCSPaymentWithBalAcc(
        GenJournalLine,GenJournalTemplate.Type::General,GenJournalTemplate."Sub Type"::"Bank Payment Voucher");

      // [THEN] Error is thrown upon invoking calulate TCS
      VerifyTCSPaymentErrorOnJournal(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE CreateSalesInvoiceWithTCSAndVerifyTCSBankPmntVoucher@1500030();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      DocumentNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163709] Create Bank Payment Voucher for TCS Payment after Posting Sales Order With TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order With TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Bank Payment Voucher
      DocumentNo := CreateAndPostSalesDocument;
      CreateJournalForTCSPaymentWithBalAcc(
        GenJournalLine,GenJournalTemplate.Type::General,GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      PayTCSBank(GenJournalLine."Journal Batch Name");

      // [THEN] Payment Amount is verified and posted without error
      VerifyTCSAmountAndPost(GenJournalLine."Document No.",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateTCSChallanRequestPageHandler)]
    PROCEDURE SalesInvoiceWithTCSPaymentAndUpdateTCSChallan@1500042();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      DocumentNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163758] Create Payment Journal and Update challan for TCS Payment after Posting Sales Order With TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order With TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Payment Journal and post
      DocumentNo := CreateAndPostSalesDocument;
      CreateJournalForTCSPaymentWithBalAcc(GenJournalLine,GenJournalTemplate.Type::Payments,GenJournalTemplate."Sub Type"::" ");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      PayTCS(GenJournalLine."Journal Batch Name");
      VerifyTCSAmountAndPost(GenJournalLine."Document No.",DocumentNo);

      // [THEN] TCS Challan is updated and verified
      VerifyAndUpdateTCSChallan(GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateTCSChallanRegisterRequestPageHandler,UpdateTCSChallanRequestPageHandler)]
    PROCEDURE SalesInvoiceWithTCSPaymentAndUpdateTCSRegister@1500001();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      DocumentNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163759] Create Payment Journal and Update challan for TCS Payment after Posting Sales Order With TCS
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS And Posted Sales Order With TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Payment Journal and post
      DocumentNo := CreateAndPostSalesDocument;
      CreateJournalForTCSPaymentWithBalAcc(GenJournalLine,GenJournalTemplate.Type::Payments,GenJournalTemplate."Sub Type"::" ");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      PayTCS(GenJournalLine."Journal Batch Name");
      VerifyTCSAmountAndPost(GenJournalLine."Document No.",DocumentNo);

      // [THEN] TCS Challan and Register is updated and verified
      VerifyAndUpdateTCSChallanAndRegister(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE SalesOrderWithTCSonChargeItem@1500002();
    VAR
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
      Item@1500000 : Code[20];
      ItemBaseAmount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 163831] Create Sales Order With Charge Item , Calculate TCS and Verify TCS Entries.
      // [FEATURE] [TCS Document Transactions]

      // [GIVEN] Created Setup for TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Sales Order With TCS
      DocumentNo := CreateAndPostSalesDocumentWithChargeItem(
          SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item,ItemBaseAmount);

      // [THEN] TCS Entry has been created.
      VerifyGlAccOnChargeItemPost(SalesLine,DocumentNo,Item,ItemBaseAmount);
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      CompanyInformation.GET;
      CreateDeductoryCodeInCompanyInformation;
      GeneralLedgerSetup.GET;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      isInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@1500442() : Code[20];
    VAR
      SalesHeader@1500001 : Record 36;
      SalesLine@1500000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocHeader."No.");
      CreateSalesLine(SalesHeader,SalesLine);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentWithChargeItem@1500004(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;DocumentType@1500951 : Option;VAR Item@1500001 : Code[20];VAR ItemBaseAmount@1500000 : Decimal) : Code[20];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocHeader."No.");
      CreateSalesLine(SalesHeader,SalesLine);
      Item := SalesLine."No.";
      CreateSalesLineChargeItem(SalesHeader,SalesLine);
      SalesLine.RESET;
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
      ItemBaseAmount := SalesLine."TDS/TCS Base Amount";
      SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      SalesLine.FINDFIRST;
      VerifyStatisticsForTCS(SalesHeader);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentWithoutTCS@1500019();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocHeader."No.");
      CreateSalesLineWithOutTCS(SalesHeader,SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeInCompanyInformation@1500332();
    VAR
      DeductorCategory@1500921 : Record 16498;
    BEGIN
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@1500012(VAR GenJournalBatch@1500001 : Record 232;TemplateType@1500000 : Option;TemplateSubtype@1500003 : Option);
    VAR
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,TemplateType);
      GenJournalTemplate.VALIDATE("Sub Type",TemplateSubtype);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateJournalForTCSPaymentWithBalAcc@1500017(VAR GenJournalLine@1500000 : Record 81;TemplateType@1500004 : Option;TemplateSubtype@1500003 : Option) : Code[20];
    VAR
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch,TemplateType,TemplateSubtype);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",
        TCSSetup."TCS Account No.",0);
      GenJournalLine.VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateSalesLine@1500000(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37);
    VAR
      Item@1500000 : Record 27;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandDec(1,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(10000,20000,2));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.CalculateTCS(SalesHeader);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineWithOutTCS@1500026(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37);
    VAR
      Item@1500000 : Record 27;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandDec(1,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(10000,20000,2));
      SalesLine.CalculateTCS(SalesHeader);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineChargeItem@1500006(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37);
    VAR
      ItemChargeAssignmentSales@1500001 : Record 5809;
      SalesLine1@1500000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine1,SalesHeader,SalesLine1.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,LibraryRandom.RandDec(2,0));
      SalesLine1.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(10000,20000,0));
      SalesLine1.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine1.MODIFY(TRUE);
      LibraryInventory.CreateItemChargeAssignment(
        ItemChargeAssignmentSales,SalesLine1,SalesHeader."Document Type"::Order,SalesHeader."No.",SalesLine."Line No.",
        SalesLine."No.");
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",SalesLine1.Quantity);
      ItemChargeAssignmentSales.MODIFY(TRUE);
      SalesLine1.CalculateTCS(SalesHeader);
    END;

    LOCAL PROCEDURE GetCustomerAccount@1500013(CustomerNo@1500000 : Code[20]) : Code[20];
    VAR
      Customer@1500001 : Record 18;
      CustomerPostingGroup@1500002 : Record 92;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      EXIT(CustomerPostingGroup."Receivables Account");
    END;

    LOCAL PROCEDURE GetSalesAccount@1500011(CustomerNo@1500001 : Code[20];ItemNo@1500000 : Code[20]) : Code[20];
    VAR
      Customer@1500002 : Record 18;
      Item@1500003 : Record 27;
      GeneralPostingSetup@1500004 : Record 252;
    BEGIN
      Customer.GET(CustomerNo);
      Item.GET(ItemNo);
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      EXIT(GeneralPostingSetup."Sales Account");
    END;

    LOCAL PROCEDURE GetSalesAccountCharge@1500010(CustomerNo@1500001 : Code[20];ItemChargeNo@1500000 : Code[20]) : Code[20];
    VAR
      Customer@1500002 : Record 18;
      ItemCharge@1500003 : Record 5800;
      GeneralPostingSetup@1500004 : Record 252;
    BEGIN
      Customer.GET(CustomerNo);
      ItemCharge.GET(ItemChargeNo);
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",ItemCharge."Gen. Prod. Posting Group");
      EXIT(GeneralPostingSetup."Sales Account");
    END;

    LOCAL PROCEDURE PayTCSBank@1500043(JournalBatchName@1500126 : Code[20]);
    VAR
      BankPaymentVoucher@1500127 : TestPage 16577;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      BankPaymentVoucher.OPENEDIT;
      BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      BankPaymentVoucher.Action1500034.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    LOCAL PROCEDURE PayTCSCash@1500044(JournalBatchName@1500126 : Code[20]);
    VAR
      CashPaymentVoucher@1500127 : TestPage 16576;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      CashPaymentVoucher.OPENEDIT;
      CashPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      CashPaymentVoucher.Action1500034.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    LOCAL PROCEDURE PayTCS@1500045(JournalBatchName@1500126 : Code[20]);
    VAR
      PaymentJournal@1500127 : TestPage 256;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      PaymentJournal.Action1500045.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    LOCAL PROCEDURE VerifyAndUpdateTCSChallan@1500073(GenJournalDoc@1500000 : Code[20]);
    VAR
      TCSEntry@1500001 : Record 16514;
      ChallanNo@1500002 : Code[4];
      BankName@1500003 : Code[20];
      BSRCode@1500004 : Code[7];
    BEGIN
      TCSEntry.SETRANGE("Pay TCS Document No.",GenJournalDoc);
      TCSEntry.FINDFIRST;
      VerifyTCSChallanBeforeUpdate(TCSEntry);
      ChallanNo := FORMAT(LibraryRandom.RandInt(1000));
      BankName := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      BSRCode := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(7,0),1,7);
      UpdateTCSChallanDetails(GenJournalDoc,ChallanNo,BankName,BSRCode);
      VerifyTCSChallanAfterUpdate(GenJournalDoc,ChallanNo,BankName,BSRCode);
    END;

    LOCAL PROCEDURE VerifyAndUpdateTCSChallanAndRegister@1500003(GenJournalDoc@1500000 : Code[20]);
    VAR
      TCSEntry@1500001 : Record 16514;
      ChallanNo@1500002 : Code[4];
      BankName@1500003 : Code[20];
      BSRCode@1500004 : Code[7];
      InterestAmount@1500005 : Decimal;
    BEGIN
      TCSEntry.SETRANGE("Pay TCS Document No.",GenJournalDoc);
      TCSEntry.FINDFIRST;
      ChallanNo := FORMAT(LibraryRandom.RandInt(2000));
      BankName := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      BSRCode := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(7,0),1,7);
      UpdateTCSChallanDetails(GenJournalDoc,ChallanNo,BankName,BSRCode);
      VerifyTCSChallanRegisterBeforeUpdate(ChallanNo);
      InterestAmount := LibraryRandom.RandDec(100,2);
      ASSERTERROR REPORT.RUN(REPORT::"Update TCS Challan Register");
      Assert.ExpectedError(MatchErr);
      UpdateTCSChallanRegisterDetails(GenJournalDoc,InterestAmount);
      VerifyTCSChallanRegisterAfterUpdate(ChallanNo,InterestAmount);
      InterestAmount += InterestAmount;
      UpdateTCSChallanRegisterDetails(GenJournalDoc,InterestAmount);
      VerifyTCSChallanRegisterAfterUpdate(ChallanNo,InterestAmount);
    END;

    LOCAL PROCEDURE VerifyGlAccOnChargeItemPost@1500005(SalesLine@1500001 : Record 37;DocumentNo@1500200 : Code[20];ItemNo@1500007 : Code[20];ItemBaseAmount@1500000 : Decimal);
    VAR
      TCSEntry@1500115 : Record 16514;
    BEGIN
      VerifyGLEntry(GetSalesAccountCharge(NodNocHeader."No.",SalesLine."No."),DocumentNo,-SalesLine."TDS/TCS Base Amount");
      VerifyGLEntry(GetSalesAccount(NodNocHeader."No.",ItemNo),DocumentNo,-ItemBaseAmount);
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      VerifyGLEntry(TCSSetup."TCS Account No.",DocumentNo,-TCSEntry."Total TCS Including SHE CESS");
      VerifyGLEntry(
        GetCustomerAccount(NodNocHeader."No."),DocumentNo,
        ItemBaseAmount + SalesLine."TDS/TCS Base Amount" + TCSEntry."Total TCS Including SHE CESS");
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500009(GLAccNo@1500002 : Code[20];DocNo@1500001 : Code[20];ExpectedAmount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ExpectedAmount,GLEntry.Amount,GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDNAME(Amount),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyStatisticsForTCS@1500007(VAR SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500002 : Record 37;
      SalesOrderStatistics@1500001 : TestPage 402;
      ActualAmount@1500005 : Decimal;
      ExpectedTCSAmount@1500004 : Decimal;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
      REPEAT
        ExpectedTCSAmount += SalesLine."TDS/TCS Base Amount" * TCSSetup."TCS %" / 100;
      UNTIL SalesLine.NEXT = 0;
      ExpectedTCSAmount += ExpectedTCSAmount * TCSSetup."Surcharge %" / 100;
      ExpectedTCSAmount += ExpectedTCSAmount * TCSSetup."eCESS %" / 100 + ExpectedTCSAmount * TCSSetup."SHE Cess %" / 100;
      ExpectedTCSAmount := LibraryTDS.RoundTCSAmount(ExpectedTCSAmount);
      SalesOrderStatistics.OPENVIEW;
      SalesOrderStatistics.GOTORECORD(SalesHeader);
      ActualAmount := SalesOrderStatistics.Control1500015.ASDECIMAL;
      Assert.AreNearlyEqual(ExpectedTCSAmount,ActualAmount,GeneralLedgerSetup."TCS Rounding Precision",STRSUBSTNO(AmountErr));
    END;

    LOCAL PROCEDURE VerifyTCSAmountAndPost@1500065(JournalDocNo@1500000 : Code[20];DocumentNo@1500002 : Code[20]);
    VAR
      TCSEntry@1500001 : Record 16514;
      GenJournalLine@1500003 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Document No.",JournalDocNo);
      GenJournalLine.FINDFIRST;
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        TCSEntry."Bal. TCS Including SHE CESS",GenJournalLine.Amount,GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(AmountErr,GenJournalLine.FIELDNAME(Amount),GenJournalLine.TABLECAPTION));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyTCSPaymentErrorOnJournal@1500032(GenJournalLine@1500000 : Record 81);
    VAR
      PaymentOfTaxes@1500001 : Codeunit 13705;
    BEGIN
      ASSERTERROR PaymentOfTaxes.PayTCS(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(ExpectedPayTDSErr,GenJournalLine."Account No."));
    END;

    LOCAL PROCEDURE VerifyTCSChallanBeforeUpdate@1500076(TCSEntry@1500000 : Record 16514);
    BEGIN
      Assert.AreEqual(
        WORKDATE,TCSEntry."Posting Date",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Posting Date"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        0D,TCSEntry."Challan Date",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Challan Date"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        '',TCSEntry."Challan No.",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Challan No."),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        '',TCSEntry."BSR Code",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("BSR Code"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        '',TCSEntry."Bank Name",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Bank Name"),TCSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTCSChallanAfterUpdate@1500081(PayTCSDocNo@1500004 : Code[20];ChallanNo@1500003 : Code[4];BankName@1500002 : Code[20];BSRCode@1500001 : Code[7]);
    VAR
      TCSEntry@1500000 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSEntry.FINDFIRST;
      Assert.AreEqual(
        ChallanNo,TCSEntry."Challan No.",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Challan No."),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        WORKDATE,TCSEntry."Challan Date",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Challan Date"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        BankName,TCSEntry."Bank Name",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Bank Name"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        BSRCode,TCSEntry."BSR Code",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("BSR Code"),TCSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTCSChallanRegisterBeforeUpdate@1500038(ChallanNo@1500000 : Code[4]);
    VAR
      TCSChallanRegister@1500001 : Record 16516;
    BEGIN
      TCSChallanRegister.SETRANGE("Challan No.",ChallanNo);
      TCSChallanRegister.FINDFIRST;
      Assert.AreEqual(
        0,TCSChallanRegister."TCS Interest Amount",
        STRSUBSTNO(AmountErr,TCSChallanRegister.FIELDNAME("TCS Interest Amount"),TCSChallanRegister.TABLECAPTION));
      Assert.AreEqual(
        0,TCSChallanRegister."TCS Others",
        STRSUBSTNO(AmountErr,TCSChallanRegister.FIELDNAME("TCS Others"),TCSChallanRegister.TABLECAPTION));
      Assert.AreEqual(
        FALSE,TCSChallanRegister."Paid By Book Entry",
        STRSUBSTNO(AmountErr,TCSChallanRegister.FIELDNAME("Paid By Book Entry"),TCSChallanRegister.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTCSChallanRegisterAfterUpdate@1500061(ChallanNo@1500000 : Code[4];InterestAmount@1500002 : Decimal);
    VAR
      TCSChallanRegister@1500001 : Record 16516;
    BEGIN
      TCSChallanRegister.SETRANGE("Challan No.",ChallanNo);
      TCSChallanRegister.FINDFIRST;
      Assert.AreEqual(
        InterestAmount,TCSChallanRegister."TCS Interest Amount",
        STRSUBSTNO(AmountErr,TCSChallanRegister.FIELDNAME("TCS Interest Amount"),TCSChallanRegister.TABLECAPTION));
      Assert.AreEqual(
        InterestAmount,TCSChallanRegister."TCS Others",
        STRSUBSTNO(AmountErr,TCSChallanRegister.FIELDNAME("TCS Others"),TCSChallanRegister.TABLECAPTION));
      Assert.AreEqual(
        FALSE,TCSChallanRegister."Paid By Book Entry",
        STRSUBSTNO(AmountErr,TCSChallanRegister.FIELDNAME("Paid By Book Entry"),TCSChallanRegister.TABLECAPTION));
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500029(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    VAR
      GenJournalTemplateName@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GenJournalTemplateName);
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GenJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateTCSAccNo@1500040();
    BEGIN
      TCSSetup.GET(
        TCSSetup."TCS Nature of Collection",TCSSetup."Assessee Code",TCSSetup."Effective Date",TCSSetup."Concessional Code");
      TCSSetup.VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
      TCSSetup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateTCSChallanDetails@1500050(PayTCSDocNo@1500001 : Code[20];ChallanNo@1500003 : Code[4];BankName@1500002 : Code[20];BSRCode@1500000 : Code[7]);
    BEGIN
      LibraryVariableStorage.Enqueue(PayTCSDocNo);
      LibraryVariableStorage.Enqueue(ChallanNo);
      LibraryVariableStorage.Enqueue(BankName);
      LibraryVariableStorage.Enqueue(BSRCode);
      COMMIT;
      REPORT.RUN(REPORT::"Update TCS Challan Details");
    END;

    LOCAL PROCEDURE UpdateTCSChallanRegisterDetails@1500034(PayTCSDocNo@1500001 : Code[20];InterestAmount@1500003 : Decimal);
    VAR
      TCSChallanRegister@1500000 : Record 16516;
      UpdateTCSChallanRegister@1500002 : Report 16522;
    BEGIN
      TCSChallanRegister.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSChallanRegister.FINDFIRST;
      COMMIT;
      UpdateTCSChallanRegister.SETTABLEVIEW(TCSChallanRegister);
      UpdateTCSChallanRegister.UpdateChallan(InterestAmount,InterestAmount,InterestAmount,TCSChallanRegister."Entry No.");
      UpdateTCSChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateTCSChallanRegister.RUNMODAL;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSChallanRequestPageHandler@1500039(VAR UpdateTCSChallanDetails@1500118 : TestRequestPage 16520);
    VAR
      PayTCSDocumentNo@1500001 : Variant;
      ChallanNo@1500003 : Variant;
      BankName@1500002 : Variant;
      BSRCode@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PayTCSDocumentNo);
      LibraryVariableStorage.Dequeue(ChallanNo);
      LibraryVariableStorage.Dequeue(BankName);
      LibraryVariableStorage.Dequeue(BSRCode);
      UpdateTCSChallanDetails.Control1500001.SETVALUE(PayTCSDocumentNo);
      UpdateTCSChallanDetails.Control1500002.SETVALUE(ChallanNo);
      UpdateTCSChallanDetails.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.Control1500007.SETVALUE(BankName);
      UpdateTCSChallanDetails.Control1500009.SETVALUE(BSRCode);
      UpdateTCSChallanDetails.Control1500010.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      UpdateTCSChallanDetails.Control1500012.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSChallanRegisterRequestPageHandler@1500008(VAR UpdateTCSChallanRegister@1500118 : TestRequestPage 16522);
    BEGIN
      UpdateTCSChallanRegister.Control1500004.SETVALUE(TRUE);
    END;

    BEGIN
    END.
  }
}

