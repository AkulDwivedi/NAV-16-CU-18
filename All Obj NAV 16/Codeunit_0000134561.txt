OBJECT Codeunit 134561 ERM Account Schedule Charts
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      DrillDownAccScheduleLine@1006 : Record 85;
      AccSchedChartManagement@1005 : Codeunit 762;
      Assert@1004 : Codeunit 130000;
      LibraryERM@1001 : Codeunit 131300;
      LibraryVariableStorage@1007 : Codeunit 131004;
      LibraryUtility@1002 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      ColumnFormulaMessage@1003 : TextConst 'ENU=Column formula: %1.';
      DuplicateDescriptionError@1009 : TextConst '@@@="%1:Field Value;";ENU=Account Schedule %1 has duplicate Description values.';
      DuplicateColumnHeaderError@1008 : TextConst '@@@="%1:Field Value;";ENU=Column Layout %1 has duplicate Column Header values.';

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtOnOpenPage@1();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
    BEGIN
      // Test that OnOpenPage will create a new record in table Account Schedule Chart Setup if table is empty.

      // Setup : Delete the record from table Account Schedule Chart Setup.
      Initialize;
      AccountSchedulesChartSetup.DELETEALL;

      // Call function OnOpenPage.
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,'',0);

      // Verify that new record has been inserted in table Account Schedule Chart Setup with user id and period length.
      AccountSchedulesChartSetup.TESTFIELD("User ID",USERID);
      AccountSchedulesChartSetup.TESTFIELD("Period Length",AccountSchedulesChartSetup."Period Length"::Day);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler)]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalingTypeFormula@3();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      MessageOnAccountSchedulesChartMgtDrillDown(AccScheduleLine,AccScheduleLine."Totaling Type"::Formula);
    END;

    [Test]
    [HandlerFunctions(AccScheduleOverviewHandler)]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalingTypeSetBaseForPercent@11();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      MessageOnAccountSchedulesChartMgtDrillDown(AccScheduleLine,AccScheduleLine."Totaling Type"::"Set Base For Percent");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalingTypeCostType@4();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfCostTypePageOpensOnAccountSchedulesChartMgtDrillDown(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalingTypeCostTypeTotal@14();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfCostTypePageOpensOnAccountSchedulesChartMgtDrillDown(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type Total");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalingTypeCashFlowEntryAccounts@6();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfCashFlowAccountsPageOpensOnAccountSchedulesChartMgtDrillDown(
        AccScheduleLine,AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalingTypeCashFlowTotalAccounts@22();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfCashFlowAccountsPageOpensOnAccountSchedulesChartMgtDrillDown(
        AccScheduleLine,AccScheduleLine."Totaling Type"::"Cash Flow Total Accounts");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalAccounts@9();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfAccountsGLPageOpensOnAccountSchedulesChartMgtDrillDown(AccScheduleLine,AccScheduleLine."Totaling Type"::"Total Accounts");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForPostingAccounts@29();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfAccountsGLPageOpensOnAccountSchedulesChartMgtDrillDown(
        AccScheduleLine,AccScheduleLine."Totaling Type"::"Posting Accounts");
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForCashFlowEntryAccountsWithAnalysisView@7();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfAccsAnalysisViewPageOpensOnAccountSchedulesChartMgtDrillDown(
        AccScheduleLine,AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts")
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForTotalAccountsWithAnalysisView@12();
    VAR
      AccScheduleLine@1007 : Record 85;
    BEGIN
      ChartOfAccsAnalysisViewPageOpensOnAccountSchedulesChartMgtDrillDown(
        AccScheduleLine,AccScheduleLine."Totaling Type"::"Total Accounts")
    END;

    [Test]
    [HandlerFunctions(MessageHandlerForColumn)]
    PROCEDURE TestAccountSchedulesChartMgtDrillDownForColumnTypeFormula@2();
    VAR
      ColumnLayout@1004 : Record 334;
      BusinessChartBuffer@1000 : Record 485;
      AccScheduleLine@1009 : Record 85;
      AccountSchedulesChartSetup@1001 : Record 762;
    BEGIN
      // Test that Message comes up when Column Type field in Column Layout table is set to Formula.

      // Setup: Create Account Sch. line and column layout and also update business chart buffer table.
      Initialize;
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type",''),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::Formula),
        AccountSchedulesChartSetup);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(ColumnFormulaMessage,ColumnLayout.Formula));

      // Exercise: Call function DrillDown.
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);

      // Verify: Verify that expected message comes up when Column Type is Formula.
      // Verification has been done in message handler MessageHandlerForColumn.
    END;

    [Test]
    PROCEDURE TestAccountSchedulesChartMgtUpdateData@19();
    VAR
      ColumnLayout@1002 : Record 334;
      BusinessChartBuffer@1001 : Record 485;
      AccScheduleLine@1000 : Record 85;
      AccountSchedulesChartSetup@1003 : Record 762;
    BEGIN
      // Test that UpdataData function will fill the required values in the business chart buffer.

      // Setup.
      Initialize;

      // Exercise: Create Account Sch. line and column layout and also update business chart buffer table.
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type",''),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::Formula),
        AccountSchedulesChartSetup);

      // Verify: Verify that Business Chart Buffer is filled with expected values.
      BusinessChartBuffer.TESTFIELD("Period Length",AccountSchedulesChartSetup."Period Length");
      BusinessChartBuffer.TESTFIELD("Data Type",BusinessChartBuffer."Data Type"::Decimal);
    END;

    [Test]
    PROCEDURE TestUniqueDescriptionValueForAccScheduleName@23();
    VAR
      AccScheduleLine@1001 : Record 85;
      AccScheduleLine2@1006 : Record 85;
      AccountSchedulesChartSetup@1002 : Record 762;
    BEGIN
      // To check that error is thrown when Acc. Schedule Name (having duplicate Name and description values) is set on AccountSchedulesChartSetup.

      // Setup: To create two Account Schedule Lines having same Name and Description.
      Initialize;
      CreateAccountScheduleLine(AccScheduleLine,AccScheduleLine."Totaling Type"::"Cost Type",'');
      LibraryERM.CreateAccScheduleLine(AccScheduleLine2,AccScheduleLine."Schedule Name");
      AccScheduleLine2.Description := AccScheduleLine.Description;
      AccScheduleLine2.MODIFY;

      // Exercise: To capture the error generated when Acc. Schedule Name, having duplicate description values, is set on Account Schedule Chart Setup.
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,'',0);
      ASSERTERROR AccountSchedulesChartSetup.VALIDATE("Account Schedule Name",AccScheduleLine."Schedule Name");

      // Verify: To check that expected error is generated.
      Assert.ExpectedError(STRSUBSTNO(DuplicateDescriptionError,AccScheduleLine."Schedule Name"));
    END;

    [Test]
    PROCEDURE TestUniqueColumnHeaderForColumnLayoutName@21();
    VAR
      ColumnLayout@1001 : Record 334;
      ColumnLayout2@1006 : Record 334;
      AccountSchedulesChartSetup@1002 : Record 762;
    BEGIN
      // To check that error is thrown when Column Layout Name (which has duplicate Name and Column Header values) is set on AccountSchedulesChartSetup.

      // Setup: To create two Column Layouts having same Name and Column Header Values.
      Initialize;
      CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::Formula);
      LibraryERM.CreateColumnLayout(ColumnLayout2,ColumnLayout."Column Layout Name");
      ColumnLayout2."Column Header" := ColumnLayout."Column Header";
      ColumnLayout2.MODIFY;

      // Exercise: To capture the error generated when Column Layout Name, having duplicate description values, is set on Account Schedule Chart Setup.
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,'',0);
      ASSERTERROR AccountSchedulesChartSetup.VALIDATE("Column Layout Name",ColumnLayout."Column Layout Name");

      // Verify: To check that expected error is generated.
      Assert.ExpectedError(STRSUBSTNO(DuplicateColumnHeaderError,ColumnLayout."Column Layout Name"));
    END;

    [Test]
    PROCEDURE TestColumnLayoutNameOnAccScheduleChartSetup@20();
    VAR
      AccScheduleName@1000 : Record 84;
      ColumnLayoutName@1001 : Record 333;
      AccountSchedulesChartSetup@1002 : TestPage 763;
    BEGIN
      // To verify that Default Column Layout, corresponding to Account Schedule Name, is set automatically as Column Layout Name on Acc. Schedule Chart Setup Page.

      // Setup: To create Account Schedule Name with Default Column Layout.
      Initialize;
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      AccScheduleName."Default Column Layout" := ColumnLayoutName.Name;
      AccScheduleName.MODIFY;

      // Exercise: To set Acc. Schedule Name on Account Schedule Chart Setup.
      AccountSchedulesChartSetup.OPENEDIT;
      AccountSchedulesChartSetup."Account Schedule Name".SETVALUE(AccScheduleName.Name);

      // Verify: To check that Column Layout corresponding to Acc. Schedule Name is automatically set on Acc. Schedule Chart Setup.
      AccScheduleName.TESTFIELD("Default Column Layout",AccountSchedulesChartSetup."Column Layout Name".VALUE);
    END;

    [Test]
    PROCEDURE GetChartByNameForCurrentUser@25();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      ChartName@1002 : Text[30];
    BEGIN
      Initialize;
      ChartName := Insert4LinesIntoAccSchedChartSetupReturn2nd(USERID);

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartName,0);

      ValidateAccSchedChartSetup(USERID,ChartName,AccountSchedulesChartSetup);
    END;

    [Test]
    PROCEDURE GetChartByNameForEmptyUser@42();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      ChartName@1002 : Text[30];
    BEGIN
      Initialize;
      ChartName := Insert4LinesIntoAccSchedChartSetupReturn2nd('');

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartName,0);

      ValidateAccSchedChartSetup('',ChartName,AccountSchedulesChartSetup);
    END;

    [Test]
    PROCEDURE GetChartSomeChartIfNoLastViewedSet@43();
    VAR
      AccountSchedulesChartSetupActual@1000 : Record 762;
      AccountSchedulesChartSetupExpected@1001 : Record 762;
    BEGIN
      Initialize;
      Insert4LinesIntoAccSchedChartSetupReturn2nd(USERID);

      AccountSchedulesChartSetupExpected.SETFILTER("User ID",USERID);
      AccountSchedulesChartSetupExpected.FINDFIRST;

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetupActual,'',0);

      ValidateAccSchedChartSetup(USERID,AccountSchedulesChartSetupExpected.Name,AccountSchedulesChartSetupActual);
    END;

    [Test]
    PROCEDURE MoveChartPrev@26();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      ExpectedAccountSchedulesChartSetup@1003 : Record 762;
      ChartName@1002 : Text[30];
      Move@1004 : Integer;
    BEGIN
      Initialize;
      ChartName := Insert4LinesIntoAccSchedChartSetupReturn2nd(USERID);
      Move := -1;

      ExpectedAccountSchedulesChartSetup.SETRANGE("User ID",USERID);
      ExpectedAccountSchedulesChartSetup.GET(USERID,ChartName);
      ExpectedAccountSchedulesChartSetup.NEXT(Move);

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartName,Move);

      ValidateAccSchedChartSetup(USERID,ExpectedAccountSchedulesChartSetup.Name,AccountSchedulesChartSetup);
    END;

    [Test]
    PROCEDURE MoveChartNext@31();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      ExpectedAccountSchedulesChartSetup@1003 : Record 762;
      ChartName@1002 : Text[30];
      Move@1004 : Integer;
    BEGIN
      Initialize;
      ChartName := Insert4LinesIntoAccSchedChartSetupReturn2nd(USERID);
      Move := 1;

      ExpectedAccountSchedulesChartSetup.SETRANGE("User ID",USERID);
      ExpectedAccountSchedulesChartSetup.GET(USERID,ChartName);
      ExpectedAccountSchedulesChartSetup.NEXT(Move);

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartName,Move);

      ValidateAccSchedChartSetup(USERID,ExpectedAccountSchedulesChartSetup.Name,AccountSchedulesChartSetup);
    END;

    [Test]
    PROCEDURE MovePreviousFromFirstRecord@28();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      ExpectedAccountSchedulesChartSetup@1003 : Record 762;
      ChartName@1002 : Text[30];
    BEGIN
      Initialize;
      ChartName := Insert4LinesIntoAccSchedChartSetupReturn2nd(USERID);

      ExpectedAccountSchedulesChartSetup.SETRANGE("User ID",USERID);
      ExpectedAccountSchedulesChartSetup.FINDFIRST;

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartName,1);
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,AccountSchedulesChartSetup.Name,1);

      ValidateAccSchedChartSetup(USERID,ExpectedAccountSchedulesChartSetup.Name,AccountSchedulesChartSetup);
    END;

    [Test]
    PROCEDURE MoveNextFromLastRecord@27();
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      ExpectedAccountSchedulesChartSetup@1003 : Record 762;
      ChartName@1002 : Text[30];
    BEGIN
      Initialize;
      ChartName := Insert4LinesIntoAccSchedChartSetupReturn2nd(USERID);

      ExpectedAccountSchedulesChartSetup.SETRANGE("User ID",USERID);
      ExpectedAccountSchedulesChartSetup.FINDLAST;

      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,ChartName,-1);
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,AccountSchedulesChartSetup.Name,-1);

      ValidateAccSchedChartSetup(USERID,ExpectedAccountSchedulesChartSetup.Name,AccountSchedulesChartSetup);
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibraryVariableStorage.Clear;

      IF IsInitialized THEN
        EXIT;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateColumnLayout@5(VAR ColumnLayout@1000 : Record 334;ColumnType@1002 : Option) : Code[10];
    VAR
      ColumnLayoutName@1001 : Record 333;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
      ColumnLayout."Column No." :=
        COPYSTR(LibraryUtility.GenerateRandomCode(ColumnLayout.FIELDNO("Column No."),DATABASE::"Column Layout"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Column Layout",ColumnLayout.FIELDNO("Column No.")));
      ColumnLayout."Column Header" :=
        COPYSTR(LibraryUtility.GenerateRandomCode(ColumnLayout.FIELDNO("Column Header"),DATABASE::"Column Layout"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Column Layout",ColumnLayout.FIELDNO("Column Header")));
      ColumnLayout."Column Type" := ColumnType;
      ColumnLayout.Formula := ColumnLayout."Column No.";
      ColumnLayout.MODIFY;
      EXIT(ColumnLayout."Column Layout Name");
    END;

    LOCAL PROCEDURE CreateAccountScheduleLine@47(VAR AccScheduleLine@1001 : Record 85;TotalingType@1002 : Option;AnalysisViewCode@1003 : Code[10]) : Code[10];
    VAR
      AccScheduleName@1000 : Record 84;
    BEGIN
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      AccScheduleName."Analysis View Name" := AnalysisViewCode;
      AccScheduleName.MODIFY;
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      AccScheduleLine."Row No." :=
        LibraryUtility.GenerateRandomCode(AccScheduleLine.FIELDNO("Row No."),DATABASE::"Acc. Schedule Line");
      AccScheduleLine.Description :=
        COPYSTR(LibraryUtility.GenerateRandomCode(AccScheduleLine.FIELDNO(Description),DATABASE::"Acc. Schedule Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Acc. Schedule Line",AccScheduleLine.FIELDNO(Description)));
      AccScheduleLine."Totaling Type" := TotalingType;
      AccScheduleLine.Totaling := AccScheduleLine."Row No.";
      AccScheduleLine.MODIFY;
      EXIT(AccScheduleName.Name);
    END;

    LOCAL PROCEDURE Insert4LinesIntoAccSchedChartSetupReturn2nd@32(SetUserId@1002 : Text[132]) : Text[30];
    VAR
      AccountSchedulesChartSetup@1000 : Record 762;
      i@1001 : Integer;
    BEGIN
      WITH AccountSchedulesChartSetup DO BEGIN
        DELETEALL;

        FOR i := 1 TO 3 DO BEGIN
          INIT;
          "User ID" := SetUserId;
          Name := FORMAT(i);
          "Last Viewed" := FALSE;
          INSERT;
        END;

        INIT;
        "User ID" := 'other user';
        Name := FORMAT(2);
        INSERT;

        EXIT(FORMAT(2));
      END;
    END;

    LOCAL PROCEDURE UpdateBusinessChartBuffer@44(VAR BusinessChartBuffer@1009 : Record 485;AccountSchName@1005 : Code[10];ColumnLayoutName@1010 : Code[10];VAR AccountSchedulesChartSetup@1001 : Record 762);
    VAR
      Period@1000 : ' ,Next,Previous';
    BEGIN
      AccSchedChartManagement.GetSetupRecordset(AccountSchedulesChartSetup,'',0);
      CLEAR(AccountSchedulesChartSetup);
      AccountSchedulesChartSetup."User ID" := USERID;
      AccountSchedulesChartSetup.Name :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AccountSchedulesChartSetup.FIELDNO(Name),DATABASE::"Account Schedules Chart Setup"),1,30);
      AccountSchedulesChartSetup."Start Date" := WORKDATE;
      AccountSchedulesChartSetup.INSERT(TRUE);
      AccountSchedulesChartSetup.VALIDATE("Base X-Axis on",AccountSchedulesChartSetup."Base X-Axis on"::Period);
      AccountSchedulesChartSetup.VALIDATE("Account Schedule Name",AccountSchName);
      AccountSchedulesChartSetup.VALIDATE("Column Layout Name",ColumnLayoutName);
      AccountSchedulesChartSetup.MODIFY(TRUE);
      AccSchedChartManagement.UpdateData(BusinessChartBuffer,Period,AccountSchedulesChartSetup);
    END;

    LOCAL PROCEDURE MessageOnAccountSchedulesChartMgtDrillDown@16(AccScheduleLine@1000 : Record 85;TotalingType@1002 : Option);
    VAR
      ColumnLayout@1001 : Record 334;
      BusinessChartBuffer@1004 : Record 485;
      AccountSchedulesChartSetup@1003 : Record 762;
    BEGIN
      // Test that Message comes up when Totaling Type field in Account Sch. Line table is set to either Formula or Set Base For Percent.

      // Setup: Create Account Sch. line and column layout and also update business chart buffer table.
      Initialize;
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,TotalingType,''),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::"Net Change"),
        AccountSchedulesChartSetup);
      LibraryVariableStorage.Enqueue(BusinessChartBuffer);
      DrillDownAccScheduleLine := AccScheduleLine;

      // Exercise: Call function DrillDown.
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);

      // Verify: Verify that expected message comes up when Totaling Type is Formula or Set Base For Percent.
      // Verification has been done in message handler MessageHandlerForRow.
    END;

    LOCAL PROCEDURE ChartOfCostTypePageOpensOnAccountSchedulesChartMgtDrillDown@17(AccScheduleLine@1005 : Record 85;TotalingType@1004 : Option);
    VAR
      ColumnLayout@1003 : Record 334;
      BusinessChartBuffer@1002 : Record 485;
      AccountSchedulesChartSetup@1001 : Record 762;
      ChartOfCostType@1000 : TestPage 1100;
    BEGIN
      // Test that Chart of cost type page opens when Totaling Type field in Account Sch. Line table is set to either Cost type or Cost type total.

      // Setup: Create Account Sch. line and column layout and also update business chart buffer table.
      Initialize;
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,TotalingType,''),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::"Net Change"),
        AccountSchedulesChartSetup);

      // Exercise: Call function DrillDown.
      ChartOfCostType.TRAP;
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);

      // Verify: Verify that Chart of cost type page opens successfully by trap with expected filters.
      AccScheduleLine.TESTFIELD(Totaling,ChartOfCostType.FILTER.GETFILTER("No."));
    END;

    LOCAL PROCEDURE ChartOfCashFlowAccountsPageOpensOnAccountSchedulesChartMgtDrillDown@15(AccScheduleLine@1005 : Record 85;TotalingType@1004 : Option);
    VAR
      ColumnLayout@1003 : Record 334;
      BusinessChartBuffer@1002 : Record 485;
      AccountSchedulesChartSetup@1001 : Record 762;
      ChartOfCashFlowAccounts@1000 : TestPage 851;
    BEGIN
      // Test that Chart of cash flow accounts page opens when Totaling Type field in Account Sch. Line table is set to either Cash Flow Entry Accounts or Cash Flow Total Accounts.

      // Setup: Create Account Sch. line and column layout and also update business chart buffer table.
      Initialize;
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,TotalingType,''),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::"Net Change"),
        AccountSchedulesChartSetup);

      // Exercise: Call function DrillDown.
      ChartOfCashFlowAccounts.TRAP;
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);

      // Verify: Verify that Chart of cash flow accounts page opens successfully by trap with expected filters.
      AccScheduleLine.TESTFIELD(Totaling,ChartOfCashFlowAccounts.FILTER.GETFILTER("No."));
    END;

    LOCAL PROCEDURE ChartOfAccountsGLPageOpensOnAccountSchedulesChartMgtDrillDown@24(AccScheduleLine@1005 : Record 85;TotalingType@1004 : Option);
    VAR
      ColumnLayout@1003 : Record 334;
      BusinessChartBuffer@1002 : Record 485;
      AccountSchedulesChartSetup@1000 : Record 762;
      ChartOfAccountsGL@1001 : TestPage 570;
    BEGIN
      // Test that Chart of Accounts (G/L) page opens when Totaling Type field in Account Sch. Line table is set to either Total Accounts or Posting Accounts.

      // Setup: Create Account Sch. line and column layout and also update business chart buffer table.
      Initialize;
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,TotalingType,''),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::"Net Change"),
        AccountSchedulesChartSetup);

      // Exercise: Call function DrillDown.
      ChartOfAccountsGL.TRAP;
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);

      // Verify: Verify that Chart of Accounts (G/L) page opens successfully by trap with expected filters.
      AccScheduleLine.TESTFIELD(Totaling,ChartOfAccountsGL.FILTER.GETFILTER("No."));
    END;

    LOCAL PROCEDURE ChartOfAccsAnalysisViewPageOpensOnAccountSchedulesChartMgtDrillDown@10(AccScheduleLine@1002 : Record 85;TotalingType@1005 : Option);
    VAR
      ColumnLayout@1004 : Record 334;
      BusinessChartBuffer@1003 : Record 485;
      AnalysisView@1001 : Record 363;
      AccountSchedulesChartSetup@1006 : Record 762;
      ChartOfAccsAnalysisView@1000 : TestPage 569;
    BEGIN
      // Test that Chart of Accs. (Analysis View) page opens when Analysis View Name field in Account Schedule Name table is not blank.

      // Setup: Create Analysis View, Account Sch. line and column layout and also update business chart buffer table.
      Initialize;
      LibraryERM.CreateAnalysisView(AnalysisView);
      UpdateBusinessChartBuffer(BusinessChartBuffer,
        CreateAccountScheduleLine(AccScheduleLine,TotalingType,AnalysisView.Code),
        CreateColumnLayout(ColumnLayout,ColumnLayout."Column Type"::"Net Change"),
        AccountSchedulesChartSetup);

      // Exercise: Call function DrillDown.
      ChartOfAccsAnalysisView.TRAP;
      AccSchedChartManagement.DrillDown(BusinessChartBuffer,AccountSchedulesChartSetup);

      // Verify: Verify that Chart of Accs. (Analysis View) page opens successfully by trap with expected filters.
      AnalysisView.TESTFIELD(Code,ChartOfAccsAnalysisView.FILTER.GETFILTER("Analysis View Filter"));
    END;

    [MessageHandler]
    PROCEDURE MessageHandlerForColumn@18(Message@1000 : Text[1024]);
    VAR
      RowFormula@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(RowFormula);
      Assert.IsTrue(STRPOS(Message,RowFormula) > 0,Message);
    END;

    LOCAL PROCEDURE ValidateAccSchedChartSetup@39(SetUserId@1000 : Text[132];ChartName@1001 : Text[30];AccountSchedulesChartSetup@1002 : Record 762);
    BEGIN
      Assert.AreEqual(SetUserId,AccountSchedulesChartSetup."User ID",'Wrong Chart');
      Assert.AreEqual(ChartName,AccountSchedulesChartSetup.Name,'Wrong Chart');
      Assert.IsTrue(AccountSchedulesChartSetup."Last Viewed",'Last Viewed was not updated.');
    END;

    [PageHandler]
    PROCEDURE AccScheduleOverviewHandler@30(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      BusinessChartBuffer@1002 : Record 485;
      BusinessChartBufferVar@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BusinessChartBufferVar);
      BusinessChartBuffer := BusinessChartBufferVar;
      Assert.AreEqual(
        DrillDownAccScheduleLine."Schedule Name",
        AccScheduleOverview.CurrentSchedName.VALUE,
        'Unexpected account schedule in the overview page.');
      Assert.AreEqual(
        DrillDownAccScheduleLine."Row No.",
        AccScheduleOverview."Row No.".VALUE,
        'Unexpected account schedule line selected in the overview page.');
      Assert.AreEqual(
        BusinessChartBuffer."Period Length",
        AccScheduleOverview.PeriodType.ASINTEGER,
        'Unexpected account schedule period selected in the overview page.');

      AccScheduleOverview.CLOSE;
    END;

    BEGIN
    {
      // [FEATURE] [Account Schedule] [Chart]
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ----------------------------------------------------------------------------------------------------------
      TestAccountSchedulesChartMgtOnOpenPage,                                                             299316
      TestAccountSchedulesChartMgtDrillDownForTotalingTypeFormula,
      TestAccountSchedulesChartMgtDrillDownForTotalingTypeSetBaseForPercent,
      TestAccountSchedulesChartMgtDrillDownForTotalingTypeCostType,
      TestAccountSchedulesChartMgtDrillDownForTotalingTypeCostTypeTotal,
      TestAccountSchedulesChartMgtDrillDownForTotalingTypeCashFlowEntryAccounts,
      TestAccountSchedulesChartMgtDrillDownForTotalingTypeCashFlowTotalAccounts,
      TestAccountSchedulesChartMgtDrillDownForTotalAccounts,
      TestAccountSchedulesChartMgtDrillDownForPostingAccounts,
      TestAccountSchedulesChartMgtDrillDownForCashFlowEntryAccountsWithAnalysisView,
      TestAccountSchedulesChartMgtDrillDownForTotalAccountsWithAnalysisView,
      TestAccountSchedulesChartMgtDrillDownForColumnTypeFormula
      TestAccountSchedulesChartMgtUpdateData
      TestUniqueDescriptionValueForAccScheduleName,                                                       299314
      TestUniqueColumnHeaderForColumnLayoutName,
      TestColumnLayoutNameOnAccScheduleChartSetup.
    }
    END.
  }
}

