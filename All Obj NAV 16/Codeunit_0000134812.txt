OBJECT Codeunit 134812 ERM CA GL Transfer
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryCostAccounting@1005 : Codeunit 131340;
      LibraryDimension@1007 : Codeunit 131001;
      LibraryERM@1006 : Codeunit 131300;
      LibraryFiscalYear@1010 : Codeunit 131302;
      isInitialized@1000 : Boolean;
      CostRegisterEntriesError@1004 : TextConst 'ENU=The number of expected Cost Register entries is different than the actual one';
      ExpectedValueIsDifferentError@1008 : TextConst 'ENU=Expected value of %1 field is different than the actual one.';
      NoEntriesToTransferError@1009 : TextConst 'ENU=Could not transfer general ledger entries to Cost Accounting.';
      UnexpectedErrorMessage@1011 : TextConst 'ENU=Unexpected error message: %1.';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryCostAccounting.InitializeCASetup;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateLocalData;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithCCDimension@3();
    BEGIN
      // Post a Gen. Journal Line for an account which has a default dimension corresponding to Cost Centers and
      // verify that the G/L entry gets transferred

      TransferGLEntry(TRUE,TRUE,FALSE,FALSE,LibraryRandom.RandDec(1000,2));

      // Verify:
      ValidateEntriesTransfered;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithCODimension@5();
    BEGIN
      // Post a Gen. Journal Line for an account which has a default dimension corresponding to Cost Objects and
      // verify that the G/L entry gets transferred

      TransferGLEntry(TRUE,FALSE,TRUE,FALSE,LibraryRandom.RandDec(1000,2));

      // Verify:
      ValidateEntriesTransfered;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithCCAndCODimension@7();
    VAR
      CostEntryNo@1000 : Integer;
    BEGIN
      // Post a Gen. Journal Line for an account which has default dimensions corresponding to Cost Centers and Cost Objects and
      // verify that the cost center code takes precedence during the transfer

      TransferGLEntry(TRUE,TRUE,TRUE,FALSE,LibraryRandom.RandDec(1000,2));

      // Verify:
      CostEntryNo := ValidateEntriesTransfered;
      ValidateCostEntryFields(CostEntryNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithNoCostTypeLink@4();
    VAR
      CostRegister@1001 : Record 1105;
      ExpectedCostRegisterEntries@1000 : Integer;
    BEGIN
      // Post a Gen. Journal Line for an account which does not have a valid Cost Type associated and
      // verify that no Cost Register entries are created (no G/L entries are transferred).

      ExpectedCostRegisterEntries := CostRegister.COUNT;
      TransferGLEntry(FALSE,TRUE,FALSE,FALSE,LibraryRandom.RandDec(1000,2));

      // Verify:
      Assert.AreEqual(ExpectedCostRegisterEntries,CostRegister.COUNT,CostRegisterEntriesError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithNoDimensions@9();
    VAR
      CostRegister@1001 : Record 1105;
      ExpectedCostRegisterEntries@1000 : Integer;
    BEGIN
      // Post a Gen. Journal Line for an account which does not have dimensions set corresponding to a Cost Center or a Cost Object and
      // verify that no Cost Register entries are created (no G/L entries are transferred).

      ExpectedCostRegisterEntries := CostRegister.COUNT;
      TransferGLEntry(TRUE,FALSE,FALSE,FALSE,LibraryRandom.RandDec(1000,2));

      // Verify:
      Assert.AreEqual(ExpectedCostRegisterEntries,CostRegister.COUNT,CostRegisterEntriesError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithClosingDate@21();
    VAR
      CostRegister@1002 : Record 1105;
      ExpectedCostRegisterEntries@1001 : Integer;
    BEGIN
      // Post a Gen. Journal Line with a closing date and verify that the G/L entry does not get transferred

      ExpectedCostRegisterEntries := CostRegister.COUNT;
      TransferGLEntry(TRUE,TRUE,FALSE,TRUE,LibraryRandom.RandDec(1000,2));

      // Verify:
      Assert.AreEqual(ExpectedCostRegisterEntries,CostRegister.COUNT,CostRegisterEntriesError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferWithAmountZero@24();
    VAR
      CostRegister@1001 : Record 1105;
      ExpectedCostRegisterEntries@1003 : Integer;
    BEGIN
      // Post a Gen. Journal Line with an Amount =0 and verify that the G/L entry does not get transferred

      ExpectedCostRegisterEntries := CostRegister.COUNT;
      TransferGLEntry(TRUE,FALSE,TRUE,FALSE,0);

      // Verify:
      Assert.AreEqual(ExpectedCostRegisterEntries,CostRegister.COUNT,CostRegisterEntriesError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE GLTransferForNonIncomeAccount@10();
    VAR
      GLAccount@1000 : Record 15;
      CostRegister@1002 : Record 1105;
      CostType@1003 : Record 1103;
      ExpectedCostRegisterEntries@1001 : Integer;
    BEGIN
      // Post a Gen. Journal Line for a BalanceSheet account type and verify that the G/L entry does not get transferred

      Initialize;

      // Cost Accounting Setup with Autotransfer = TRUE
      CostAccountingSetup(TRUE);
      CreateBalanceSheetAccount(GLAccount);
      SetAccWithDefaultDimensions(GLAccount."No.",TRUE,FALSE);
      ExpectedCostRegisterEntries := CostRegister.COUNT;

      // Excercise:
      PostGenJournalLine(GLAccount."No.",LibraryRandom.RandDec(1000,2),FALSE);

      // Verify:
      Assert.AreEqual(ExpectedCostRegisterEntries,CostRegister.COUNT,CostRegisterEntriesError);

      // Clean-up:
      CostType.GET(GLAccount."No.");
      CostType.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE GLTransferForDeletedAccount@29();
    VAR
      GLAccount@1000 : Record 15;
      CostRegister@1002 : Record 1105;
      ExpectedCostRegisterEntries@1001 : Integer;
      LastErrorText@1003 : Text[1024];
    BEGIN
      // Post a Gen. Journal Line and delete the corresponding account afterwards
      // Run the Transfer G/L Entries batch job and verify that the G/L entries whose G/L account got deleted do not get transferred

      Initialize;

      // Setup:
      CostAccountingSetup(FALSE);
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);
      SetAccWithDefaultDimensions(GLAccount."No.",TRUE,FALSE);

      PostJournalLines(GLAccount."No.");

      // Delete GL Account
      GLAccount.FIND;
      GLAccount.DELETE(TRUE);
      ExpectedCostRegisterEntries := CostRegister.COUNT;

      // Exercise:
      ASSERTERROR LibraryCostAccounting.TransferGLEntries;

      // Verify:
      LastErrorText := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(LastErrorText,NoEntriesToTransferError) > 0,STRSUBSTNO(UnexpectedErrorMessage,LastErrorText));
      Assert.AreEqual(ExpectedCostRegisterEntries,CostRegister.COUNT,CostRegisterEntriesError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TransferMultipleGLEntries@19();
    VAR
      GLAccount@1000 : Record 15;
      NoOfJnlPostings@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      Initialize;

      // Setup:
      CostAccountingSetup(TRUE); // set Autotransfer to TRUE so that all previously untransferred entries get transferred
      CostAccountingSetup(FALSE);
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);
      SetAccWithDefaultDimensions(GLAccount."No.",TRUE,FALSE);

      // Create multiple G/L entries
      NoOfJnlPostings := 3;
      FOR I := 1 TO NoOfJnlPostings DO
        PostGenJournalLine(GLAccount."No.",LibraryRandom.RandDec(1000,2),FALSE);

      // Exercise:
      LibraryCostAccounting.TransferGLEntries;

      // Verify:
      ValidateTransfer(NoOfJnlPostings);
    END;

    [Normal]
    LOCAL PROCEDURE CheckBlockedDimensionValues@33(AccountNo@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Un-block any blocked default dimension values for an account

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",AccountNo);
      IF DefaultDimension.FINDSET THEN
        REPEAT
          DimensionValue.GET(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
          IF DimensionValue.Blocked THEN BEGIN
            DimensionValue.VALIDATE(Blocked,FALSE);
            DimensionValue.MODIFY(TRUE);
          END;
        UNTIL DefaultDimension.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE CheckBlockedDimCombination@16();
    VAR
      DimensionCombination@1000 : Record 350;
    BEGIN
      DimensionCombination.SETFILTER("Dimension 1 Code",'%1|%2',CostCenterDimension,CostObjectDimension);
      DeleteBlockedDimCombinations(DimensionCombination);

      CLEAR(DimensionCombination);
      DimensionCombination.SETFILTER("Dimension 2 Code",'%1|%2',CostCenterDimension,CostObjectDimension);
      DeleteBlockedDimCombinations(DimensionCombination);
    END;

    [Normal]
    LOCAL PROCEDURE CostAccountingSetup@14(Autotransfer@1001 : Boolean);
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align G/L Account"),
        CostAccountingSetup."Align G/L Account"::Automatic);
      LibraryCostAccounting.SetAutotransferFromGL(Autotransfer);
    END;

    [Normal]
    LOCAL PROCEDURE CostCenterDimension@25() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Center Dimension");
    END;

    [Normal]
    LOCAL PROCEDURE CostObjectDimension@26() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Object Dimension");
    END;

    [Normal]
    LOCAL PROCEDURE CreateBalanceSheetAccount@35(VAR GLAccount@1001 : Record 15);
    BEGIN
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);
      GLAccount.VALIDATE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
      GLAccount.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateJnlLine@22(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1005 : Record 232;PostingDate@1004 : Date;AccountNo@1002 : Code[20];Amount@1003 : Decimal);
    BEGIN
      // Create General Journal Line.
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment ,GenJournalLine."Account Type"::"G/L Account",AccountNo,Amount);

      // Update journal line to avoid Posting errors
      GenJournalLine.VALIDATE("Gen. Posting Type",GenJournalLine."Gen. Posting Type"::" ");
      GenJournalLine.VALIDATE("Gen. Bus. Posting Group",'');
      GenJournalLine.VALIDATE("Gen. Prod. Posting Group",'');
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Allow Zero-Amount Posting",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE DeleteBlockedDimCombinations@39(VAR DimensionCombination@1001 : Record 350);
    BEGIN
      IF DimensionCombination.FINDSET THEN
        REPEAT
          IF DimensionCombination."Combination Restriction" = DimensionCombination."Combination Restriction"::Blocked THEN
            DimensionCombination.DELETE(TRUE);
        UNTIL DimensionCombination.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE DeleteDefaultDimension@11(AccountNo@1000 : Code[20];DimensionCode@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      IF DefaultDimension.GET(DATABASE::"G/L Account",AccountNo,DimensionCode) THEN
        DefaultDimension.DELETE(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE PostGenJournalLine@31(AccountNo@1000 : Code[20];Amount@1004 : Decimal;WithClosingDate@1002 : Boolean);
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1005 : Record 232;
    BEGIN
      SetupGeneralJnlBatch(GenJournalBatch);
      CreateJnlLine(GenJournalLine,GenJournalBatch,WORKDATE,AccountNo,Amount);
      IF WithClosingDate THEN BEGIN
        GenJournalLine.VALIDATE("Posting Date",CLOSINGDATE(CALCDATE('<-1D>',LibraryFiscalYear.GetFirstPostingDate(FALSE))));
        GenJournalLine.MODIFY(TRUE);
      END;

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE PostJournalLines@12(AccountNo@1003 : Code[20]);
    VAR
      GenJournalLine@1002 : Record 81;
      GenJournalBatch@1001 : Record 232;
      Amount@1000 : Decimal;
    BEGIN
      // Select Gen Journal Batch and clear existing journal entries
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // Post Journal Lines which set the Account Balance to 0
      Amount := LibraryRandom.RandDec(1000,2);
      CreateJnlLine(GenJournalLine,GenJournalBatch,LibraryFiscalYear.GetLastPostingDate(TRUE),AccountNo,Amount);
      CreateJnlLine(GenJournalLine,GenJournalBatch,LibraryFiscalYear.GetLastPostingDate(TRUE),AccountNo,-Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE SetAccWithDefaultDimensions@1(AccountNo@1002 : Code[20];HasCostCenterDimension@1000 : Boolean;HasCostObjectDimension@1001 : Boolean);
    BEGIN
      IF HasCostCenterDimension THEN BEGIN
        SetDefaultDimension(AccountNo,CostCenterDimension);
        IF NOT HasCostObjectDimension THEN
          DeleteDefaultDimension(AccountNo,CostObjectDimension);
      END;

      IF HasCostObjectDimension THEN BEGIN
        SetDefaultDimension(AccountNo,CostObjectDimension);
        IF NOT HasCostCenterDimension THEN
          DeleteDefaultDimension(AccountNo,CostCenterDimension);
      END;

      CheckBlockedDimensionValues(AccountNo); // check for blocked default dimension values, which prevent posting
      CheckBlockedDimCombination; // check for blocked dimension combinations, which prevent posting
    END;

    [Normal]
    LOCAL PROCEDURE SetDefaultDimension@36(GLAccountNo@1000 : Code[20];DimensionCode@1003 : Code[20]);
    VAR
      DimValue@1002 : Record 349;
      DefaultDimension@1001 : Record 352;
    BEGIN
      IF NOT DefaultDimension.GET(DATABASE::"G/L Account",GLAccountNo,DimensionCode) THEN BEGIN
        LibraryDimension.FindDimensionValue(DimValue,DimensionCode);
        LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccountNo,DimValue."Dimension Code",DimValue.Code);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE SetupGeneralJnlBatch@58(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryCostAccounting.CreateBalanceSheetGLAccount(GLAccount);
      GenJournalBatch.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalBatch.MODIFY(TRUE);

      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    [Normal]
    LOCAL PROCEDURE TransferGLEntry@18(EntryHasCostTypeLink@1004 : Boolean;EntryHasCostCenterDimension@1000 : Boolean;EntryHasCostObjectDimension@1001 : Boolean;EntryHasClosingDate@1002 : Boolean;Amount@1006 : Decimal);
    VAR
      GLAccount@1003 : Record 15;
      CostType@1005 : Record 1103;
    BEGIN
      Initialize;

      // Setup:
      CostAccountingSetup(TRUE);
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);
      SetAccWithDefaultDimensions(GLAccount."No.",EntryHasCostCenterDimension,EntryHasCostObjectDimension);

      IF NOT EntryHasCostTypeLink THEN BEGIN
        // Delete the Cost Type -> the GL Account has no valid Cost Type associated
        CostType.GET(GLAccount."No.");
        CostType.DELETE(TRUE);
      END;

      // Exercise:
      PostGenJournalLine(GLAccount."No.",Amount,EntryHasClosingDate);
    END;

    [Normal]
    LOCAL PROCEDURE ValidateEntriesTransfered@23() : Integer;
    VAR
      GLRegister@1000 : Record 45;
      CostRegister@1001 : Record 1105;
      GLEntry@1002 : Record 17;
      CostEntry@1003 : Record 1104;
    BEGIN
      GLRegister.FINDLAST;

      // Find transferred G/L Entry
      GLEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      GLEntry.FINDFIRST;

      // Find corresponfing Cost Register entry
      CostRegister.SETFILTER(Source,FORMAT(CostRegister.Source::"Transfer from G/L"));
      CostRegister.FINDLAST;

      // Find corresponding Cost Entry
      CostEntry.SETRANGE("G/L Entry No.",GLEntry."Entry No.");
      CostEntry.FINDFIRST;

      Assert.AreEqual(GLEntry.Description,CostEntry.Description,
        STRSUBSTNO(ExpectedValueIsDifferentError,CostEntry.FIELDNAME(Description)));

      EXIT(CostEntry."Entry No.");
    END;

    [Normal]
    LOCAL PROCEDURE ValidateTransfer@37(NoOfGLRegisters@1000 : Integer);
    VAR
      GLRegister@1004 : Record 45;
      CostRegister@1003 : Record 1105;
      GLEntry@1002 : Record 17;
      CostEntry@1001 : Record 1104;
      TotalAmount@1007 : Decimal;
    BEGIN
      // Find G/L registers
      GLRegister.FIND('+');
      GLRegister.NEXT(-NoOfGLRegisters + 1);

      // Find transferred G/L Entries
      GLEntry.SETFILTER("Entry No.",'>=%1',GLRegister."From Entry No.");
      GLEntry.FINDSET;

      // Find corresponfing Cost Register entry
      CostRegister.SETFILTER(Source,FORMAT(CostRegister.Source::"Transfer from G/L"));
      CostRegister.FINDLAST;

      // Find corresponding Cost Entries
      CostEntry.SETRANGE("Entry No.",CostRegister."From Cost Entry No.",CostRegister."To Cost Entry No.");
      CostEntry.FINDSET;

      // Validate Cost Entries fields
      REPEAT
        Assert.AreEqual(GLEntry."Entry No.",CostEntry."G/L Entry No.",
          STRSUBSTNO(ExpectedValueIsDifferentError,CostEntry.FIELDNAME("G/L Entry No.")));
        Assert.AreEqual(GLEntry.Amount,CostEntry.Amount,
          STRSUBSTNO(ExpectedValueIsDifferentError,CostEntry.FIELDNAME(Amount)));
        TotalAmount := TotalAmount + CostEntry.Amount;
        GLEntry.NEXT(2);
      UNTIL CostEntry.NEXT = 0;

      // Validate Cost Register fields
      Assert.AreEqual(CostRegister."To Cost Entry No." - CostRegister."From Cost Entry No." + 1,CostRegister."No. of Entries",
        STRSUBSTNO(ExpectedValueIsDifferentError,CostRegister.FIELDNAME("No. of Entries")));
      Assert.AreEqual(TotalAmount,CostRegister."Debit Amount",
        STRSUBSTNO(ExpectedValueIsDifferentError,CostRegister.FIELDNAME("Debit Amount")));
    END;

    [Normal]
    LOCAL PROCEDURE ValidateCostEntryFields@20(CostEntryNo@1000 : Integer);
    VAR
      GLEntry@1002 : Record 17;
      CostCenter@1004 : Record 1112;
      CostEntry@1001 : Record 1104;
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      CostEntry.GET(CostEntryNo);
      GLEntry.GET(CostEntry."G/L Entry No.");
      DimensionSetEntry.GET(GLEntry."Dimension Set ID",CostCenterDimension);

      // check if corresponding cost center exists first
      CostCenter.SETFILTER(Code,DimensionSetEntry."Dimension Value Code");
      IF CostCenter.FINDFIRST THEN
        Assert.AreEqual(DimensionSetEntry."Dimension Value Code",CostEntry."Cost Center Code",
          STRSUBSTNO(ExpectedValueIsDifferentError,CostEntry.FIELDNAME("Cost Center Code")));

      Assert.AreEqual('',CostEntry."Cost Object Code",
        STRSUBSTNO(ExpectedValueIsDifferentError,CostEntry.FIELDNAME("Cost Object Code")));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@17(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@34(Message@1000 : Text[1024]);
    BEGIN
      // dummy message handler
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting] [G/L Integration]
    }
    END.
  }
}

