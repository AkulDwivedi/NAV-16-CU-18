OBJECT Codeunit 136201 Marketing Contacts
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1051 : Codeunit 131300;
      LibrarySales@1050 : Codeunit 130509;
      LibraryPurchase@1053 : Codeunit 130512;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryMarketing@1002 : Codeunit 131900;
      LibraryVariableStorage@1033 : Codeunit 131004;
      LibrarySetupStorage@1003 : Codeunit 131009;
      LibraryRandom@1004 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1001 : Boolean;
      RelationErrorServiceTier@1017 : TextConst 'ENU="%1 must have a value in %2: Primary Key=. It cannot be zero or empty."';
      ValidationError@1029 : TextConst 'ENU=%1: %2 must exist.';
      ErrorMessage@1030 : TextConst 'ENU=%1: %2 must not exist.';
      ExpectedMessage@1031 : TextConst 'ENU=The field IBAN is mandatory. You will not be able to use the account in a payment file until the IBAN is correctly filled in.\\Are you sure you want to continue?';
      BusinessRelationError@1026 : TextConst '@@@="%1: Table Caption;%2: Field Value,%3: Table Caption2; %4: Field Value2";ENU=%1 %2 already has a Contact Business Relation with %3 %4.';
      WrongDescriptionFieldLengthErr@1027 : TextConst 'ENU=Wrong description field length in table %1.';
      EmptyAttachmentErr@1028 : TextConst 'ENU=The attachment is empty';
      ExtensionTxt@1032 : TextConst 'ENU=txt';
      WrongCalcdCurValueErr@1034 : TextConst 'ENU=%1 should be updated with "Sales (LCY)" value.';
      BusRelContactValidationErr@1035 : TextConst '@@@=.;ENU=%1 %2 is used when a %3 is linked with a %4.';

    [Test]
    PROCEDURE AlternativeAddressForContact@1();
    VAR
      Contact@1000 : Record 5050;
      ContactAltAddress@1001 : Record 5051;
      ContactAltAddrDateRange@1002 : Record 5052;
      SegmentHeader@1003 : Record 5076;
      SegmentLine@1004 : Record 5077;
    BEGIN
      // Covers document number TC0054 - refer to TFS ID 21740.
      // Test assignment and activation of Alternative Address linked to a Contact.

      // 1. Setup: Create a new Contact, Contact Alternative Address and Contact Alternative Address Date Range.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Contact.FIELDNO(Address),DATABASE::Contact),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Contact,Contact.FIELDNO(Address))));
      Contact.MODIFY(TRUE);

      LibraryMarketing.CreateContactAltAddress(ContactAltAddress,Contact."No.");
      LibraryMarketing.CreateContactAltAddrDateRange(ContactAltAddrDateRange,Contact."No.",WORKDATE);
      ContactAltAddrDateRange.VALIDATE("Contact Alt. Address Code",ContactAltAddress.Code);
      ContactAltAddrDateRange.MODIFY(TRUE);

      // 2. Exercise: Create a new Segment Header for the date range in which alternative address is activated, Segment Line and link the
      // Contact to the Segment Line.
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      LibraryMarketing.CreateSegmentLine(SegmentLine,SegmentHeader."No.");
      SegmentLine.VALIDATE("Contact No.",Contact."No.");
      SegmentLine.MODIFY(TRUE);

      // 3. Verify: Check that the Contact Alternative Address Code on the Segment Line is the same as that created earlier.
      SegmentLine.TESTFIELD("Contact Alt. Address Code",ContactAltAddress.Code);
    END;

    [Test]
    PROCEDURE IndustryGroupForContact@2();
    VAR
      Contact@1000 : Record 5050;
      ContactIndustryGroup@1001 : Record 5058;
      IndustryGroup@1002 : Record 5057;
    BEGIN
      // Covers document number TC0054 - refer to TFS ID 21740.
      // Test creation and linking of Industry Group for Contact.

      // 1. Setup: Create a new Contact. Find an Industry Group.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      IndustryGroup.FINDFIRST;

      // 2. Exercise: Create a Contact Industry Group for the Contact created earlier.
      LibraryMarketing.CreateContactIndustryGroup(ContactIndustryGroup,Contact."No.",IndustryGroup.Code);

      // 3. Verify: Check that the field No. of Industry Groups on Contact is updated.
      Contact.CALCFIELDS("No. of Industry Groups");
      Contact.TESTFIELD("No. of Industry Groups",1);  // Value 1 is important to test case since one Industry Group has been linked.
    END;

    [Test]
    PROCEDURE BusinessRelationForContact@6();
    VAR
      Contact@1000 : Record 5050;
      BusinessRelation@1001 : Record 5053;
      ContactBusinessRelation@1002 : Record 5054;
    BEGIN
      // Covers document number TC0054 - refer to TFS ID 21740.
      // Test creation and linking of Business Relation for Contact.

      // 1. Setup: Create a new Contact, Business Relation.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);

      // 2. Exercise: Create a new Contact Business Relation for the Contact and Business Relation created earlier.
      LibraryMarketing.CreateContactBusinessRelation(ContactBusinessRelation,Contact."No.",BusinessRelation.Code);

      // 3. Verify: Check that the field No. of Business Relations on Contact is updated.
      Contact.CALCFIELDS("No. of Business Relations");
      // Value 1 is important to test case since one Business Relation has been linked.
      Contact.TESTFIELD("No. of Business Relations",1);
    END;

    [Test]
    PROCEDURE MailingGroupForContact@3();
    VAR
      Contact@1000 : Record 5050;
      MailingGroup@1001 : Record 5055;
      ContactMailingGroup@1002 : Record 5056;
    BEGIN
      // Covers document number TC0054 - refer to TFS ID 21740.
      // Test creation and linking of Mailing Group for Contact.

      // 1. Setup: Create a new Contact, Mailing Group.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateMailingGroup(MailingGroup);

      // 2. Exercise: Create a new Contact Mailing Group for the Contact and Mailing Group created earlier.
      LibraryMarketing.CreateContactMailingGroup(ContactMailingGroup,Contact."No.",MailingGroup.Code);

      // 3. Verify: Check that the field No. of Mailing Groups on Contact is updated.
      Contact.CALCFIELDS("No. of Mailing Groups");
      Contact.TESTFIELD("No. of Mailing Groups",1);  // Value 1 is important to test case since one Mailing Group has been linked.
    END;

    [Test]
    PROCEDURE ContactBusinessRelationDescription@84();
    VAR
      BusinessRelation@1001 : Record 5053;
      ContactBusinessRelation@1000 : Record 5054;
    BEGIN
      Initialize;
      Assert.AreEqual(
        LibraryUtility.GetFieldLength(DATABASE::"Business Relation",BusinessRelation.FIELDNO(Description)),
        LibraryUtility.GetFieldLength(DATABASE::"Contact Business Relation",
          ContactBusinessRelation.FIELDNO("Business Relation Description")),
        STRSUBSTNO(WrongDescriptionFieldLengthErr,ContactBusinessRelation.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ContactIndustryGroupDescription@87();
    VAR
      IndustryGroup@1000 : Record 5057;
      ContactIndustryGroup@1001 : Record 5058;
    BEGIN
      Initialize;
      Assert.AreEqual(
        LibraryUtility.GetFieldLength(DATABASE::"Industry Group",IndustryGroup.FIELDNO(Description)),
        LibraryUtility.GetFieldLength(DATABASE::"Contact Industry Group",
          ContactIndustryGroup.FIELDNO("Industry Group Description")),
        STRSUBSTNO(WrongDescriptionFieldLengthErr,ContactIndustryGroup.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ContactWebSourceDescription@88();
    VAR
      WebSource@1000 : Record 5059;
      ContactWebSource@1001 : Record 5060;
    BEGIN
      Initialize;
      Assert.AreEqual(
        LibraryUtility.GetFieldLength(DATABASE::"Web Source",WebSource.FIELDNO(Description)),
        LibraryUtility.GetFieldLength(DATABASE::"Contact Web Source",
          ContactWebSource.FIELDNO("Web Source Description")),
        STRSUBSTNO(WrongDescriptionFieldLengthErr,ContactWebSource.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ContactJobResponsibilityDescription@89();
    VAR
      JobResponsibility@1000 : Record 5066;
      ContactJobResponsibility@1001 : Record 5067;
    BEGIN
      Initialize;
      Assert.AreEqual(
        LibraryUtility.GetFieldLength(DATABASE::"Job Responsibility",JobResponsibility.FIELDNO(Description)),
        LibraryUtility.GetFieldLength(DATABASE::"Contact Job Responsibility",
          ContactJobResponsibility.FIELDNO("Job Responsibility Description")),
        STRSUBSTNO(WrongDescriptionFieldLengthErr,ContactJobResponsibility.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CommentForContact@7();
    VAR
      Contact@1000 : Record 5050;
      RlshpMgtCommentLine@1001 : Record 5061;
      Comment@1002 : Text[80];
    BEGIN
      // Covers document number TC0054 - refer to TFS ID 21740.
      // Test creation and linking of Comment for Contact.

      // 1. Setup: Create a new Contact.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Create Comment for Contact.
      LibraryMarketing.CreateRlshpMgtCommentContact(RlshpMgtCommentLine,Contact."No.");
      Comment :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(RlshpMgtCommentLine.FIELDNO(Comment),DATABASE::"Rlshp. Mgt. Comment Line"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Rlshp. Mgt. Comment Line",RlshpMgtCommentLine.FIELDNO(Comment)));
      RlshpMgtCommentLine.VALIDATE(Comment,Comment);
      RlshpMgtCommentLine.MODIFY(TRUE);

      // 3. Verify: Verify that the Comment has been linked correctly with Contact.
      RlshpMgtCommentLine.SETRANGE("Table Name",RlshpMgtCommentLine."Table Name"::Contact);
      RlshpMgtCommentLine.SETRANGE("No.",Contact."No.");
      RlshpMgtCommentLine.FINDFIRST;
      RlshpMgtCommentLine.TESTFIELD(Comment,Comment);
    END;

    [Test]
    PROCEDURE ContactOfTypePerson@8();
    VAR
      Contact@1000 : Record 5050;
      Contact2@1001 : Record 5050;
    BEGIN
      // Covers document number TC0055 - refer to TFS ID 21740.
      // Test creation of an independent Contact of the Person type and linking it with the existing Contact of the Company type.

      // 1. Setup: Create a new Contact and input Type as Person.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE(Type,Contact.Type::Person);

      // 2. Exercise: Search for another Contact of Type as Company and link it to the Contact created earlier.
      Contact2.SETRANGE(Type,Contact2.Type::Company);
      Contact2.FINDFIRST;
      Contact.VALIDATE("Company No.",Contact2."No.");
      Contact.MODIFY(TRUE);

      // Verify: Check that the values populated on the new Contact are the same as those on Contact of Type as Company.
      Contact.TESTFIELD(Address,Contact2.Address);
      Contact.TESTFIELD("Address 2",Contact2."Address 2");
      Contact.TESTFIELD(City,Contact2.City);
      Contact.TESTFIELD("Post Code",Contact2."Post Code");
      Contact.TESTFIELD("Salesperson Code",Contact2."Salesperson Code");
    END;

    [Test]
    [HandlerFunctions(NameDetailsModalFormHandler)]
    PROCEDURE ContactAfterUpdateNameDetails@5();
    VAR
      Contact@1000 : Record 5050;
      Salutation@1002 : Record 5068;
      Language@1003 : Record 8;
    BEGIN
      // Covers document number TC0055, TC0062 - refer to TFS ID 21740.
      // Test updation of Contact after updation of Name Details associated with the Contact.
      Initialize;

      // 1. Setup: Create a new Contact and input Type as Person. Find Salutation and Language.
      CreateContactAsPerson(Contact);
      Salutation.FINDFIRST;
      Language.FINDFIRST;

      // 2. Exercise: Open the Name Details form and fill in the details.
      LibraryVariableStorage.Enqueue(Salutation.Code);
      LibraryVariableStorage.Enqueue(Language.Code);
      RunNameDetails(Contact);

      // 3. Verify: Check that the Contact has been updated with the details filled earlier.
      Contact.GET(Contact."No.");  // Get refreshed instance.
      VerifyContactNameDetails(Contact,Salutation.Code,Language.Code);
    END;

    [Test]
    PROCEDURE JobResponsibilityForContact@10();
    VAR
      Contact@1000 : Record 5050;
      JobResponsibility@1001 : Record 5066;
      ContactJobResponsibility@1002 : Record 5067;
    BEGIN
      // Covers document number TC0055 - refer to TFS ID 21740.
      // Test creation and linking of Job Responsibility for Contact.
      Initialize;

      // 1. Setup: Create a new Contact and input Type as Person. Create a new Job Responsibility.
      CreateContactAsPerson(Contact);
      LibraryMarketing.CreateJobResponsibility(JobResponsibility);

      // 2. Exercise: Create Contact Job Responsibility for Contact and Job Responsibility created earlier.
      LibraryMarketing.CreateContactJobResponsibility(ContactJobResponsibility,Contact."No.",JobResponsibility.Code);

      // 3. Verify: Check that the field No. of Job Responsibilities on Contact is updated.
      Contact.CALCFIELDS("No. of Job Responsibilities");
      // Value 1 is important to test case since one Job Responsibility has been linked.
      Contact.TESTFIELD("No. of Job Responsibilities",1);
    END;

    [Test]
    PROCEDURE LinkContactWithCustomerError@58();
    VAR
      Contact@1005 : Record 5050;
      MarketingSetup@1006 : Record 5079;
    BEGIN
      // Covers document number TC0058 - refer to TFS ID 21740.
      // Test error generated on linking Contact with an existing Customer if Bus. Rel. Code for Customers field in Marketing
      // Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Customers of Marketing Setup as blank. Create a new Contact.
      Initialize;
      ChangeBusinessRelationCodeForCustomers('');
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Try to link Contact with an existing Customer.
      ASSERTERROR Contact.CreateCustomerLink;

      // 3. Verify: Check that the application generates an error on linking Contact with an existing Customer if Bus. Rel.
      // Code for Customers field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Customers"),MarketingSetup.TABLECAPTION);
    END;

    [Test]
    PROCEDURE LinkContactWithVendorError@50();
    VAR
      Contact@1005 : Record 5050;
      MarketingSetup@1006 : Record 5079;
    BEGIN
      // Covers document number TC0058 - refer to TFS ID 21740.
      // Test error generated on linking Contact with an existing Vendor if Bus. Rel. Code for Vendors field in Marketing
      // Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Vendors of Marketing Setup as blank. Create a new Contact.
      Initialize;
      ChangeBusinessRelationCodeForVendors('');
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Try to link Contact with an existing Vendor.
      ASSERTERROR Contact.CreateVendorLink;

      // 3. Verify: Check that the application generates an error on linking Contact with an existing Vendor if Bus. Rel.
      // Code for Vendors field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Vendors"),MarketingSetup.TABLECAPTION);
    END;

    [Test]
    PROCEDURE LinkContactWithBankAccError@44();
    VAR
      Contact@1005 : Record 5050;
      MarketingSetup@1006 : Record 5079;
      BusRelCodeForBankAccs@1001 : Code[10];
    BEGIN
      // Covers document number TC0058 - refer to TFS ID 21740.
      // Test error generated on linking Contact with an existing Bank Account if Bus. Rel. Code for Bank Accs. field in Marketing
      // Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Bank Accs. of Marketing Setup as blank. Create a new Contact.
      Initialize;
      BusRelCodeForBankAccs := ChangeBusinessRelationCodeForBankAccount('');
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Try to link Contact with an existing Bank Account.
      ASSERTERROR Contact.CreateBankAccountLink;

      // 3. Verify: Check that the application generates an error on linking Contact with an existing Bank Account if Bus. Rel.
      // Code for Bank Accs. field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Bank Accs."),MarketingSetup.TABLECAPTION);

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Bank Accs. in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccs);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,CustomerTempModalFormHandler,MessageHandler)]
    PROCEDURE CreationOfCustomerFromContact@17();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      CustomerPriceGroup@1002 : Record 6;
      CustomerTemplate@1004 : Record 5105;
    BEGIN
      // Covers document number TC0059 - refer to TFS ID 21740.
      // [FEATURE] [Customer]
      // [SCENARIO 378041] Test creation of a Customer from Customer using the Customer Template from Demodata.
      // "Invoice Disc. Code" should not be set to blank on the Customer page if create a new Customer from a Contact using a template where this field was not informed

      // [GIVEN] Create a new Business Relation and input it in the field Bus. Rel. Code for Customers of Marketing Setup. Create a
      // new Customer Price Group and link it with a new Customer Template. Create a new Contact.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      CreateCustomerTemplate(CustomerTemplate,CustomerPriceGroup.Code);
      LibraryMarketing.CreateContact(Contact);

      // [GIVEN] Blank "Invoice Disc. Code" in the Customer Template
      CustomerTemplate.VALIDATE("Invoice Disc. Code",'');
      CustomerTemplate.MODIFY(TRUE);

      // [WHEN] Create Customer from Contact (the Customer Template created earlier is being chosen through Modal Form Handler).
      Contact.CreateCustomer(Contact.ChooseCustomerTemplate);

      // [THEN] Check that the values in the Customer created match the values in the Customer Template and Customer Price Group.
      // [THEN] "Invoice Disc. Code" is not blank in Customer card
      // [THEN] "Territory Code", "Currency Code" and "Country/Region Code" in the Customer created match the values in the Customer Template and Customer Price Group - TFS 380269
      VerifyCustomerCreatedByContact(CustomerTemplate,Contact."No.",CustomerPriceGroup.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,CustomerTempModalFormHandler)]
    PROCEDURE CreateCustomerFromContactError@29();
    VAR
      Contact@1005 : Record 5050;
      MarketingSetup@1006 : Record 5079;
      CustomerPriceGroup@1000 : Record 6;
      CustomerTemplate@1002 : Record 5105;
    BEGIN
      // Covers document number TC0059 - refer to TFS ID 21740.
      // Test error generated on creation of a Customer from Contact if Bus. Rel. Code for Customers field in Marketing Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Customers of Marketing Setup as blank. Create a new Contact.
      Initialize;
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      CreateCustomerTemplate(CustomerTemplate,CustomerPriceGroup.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Try to create Customer from Contact.
      ASSERTERROR Contact.CreateCustomer(Contact.ChooseCustomerTemplate);

      // 3. Verify: Check that the application generates an error on creation of a Customer from Contact if Bus. Rel. Code for Customers
      // field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Customers"),MarketingSetup.TABLECAPTION);
    END;

    [Test]
    PROCEDURE CreateVendorFromContactError@34();
    VAR
      Contact@1000 : Record 5050;
      MarketingSetup@1002 : Record 5079;
    BEGIN
      // Covers document number TC0059 - refer to TFS ID 21740.
      // Test error generated on creation of Vendor from Contact if Bus. Rel. Code for Vendors field in Marketing Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Vendors of Marketing Setup as blank. Create a new Contact.
      Initialize;
      ChangeBusinessRelationCodeForVendors('');
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Try to create Vendor from Contact.
      ASSERTERROR Contact.CreateVendor;

      // 3. Verify: Check that the application generates an error on creation of a Vendor from Contact if Bus. Rel. Code for Vendors
      // field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Vendors"),MarketingSetup.TABLECAPTION);
    END;

    [Test]
    PROCEDURE CreateBankAccFromContactError@37();
    VAR
      Contact@1000 : Record 5050;
      MarketingSetup@1002 : Record 5079;
      BusRelCodeForBankAccs@1001 : Code[10];
    BEGIN
      // Covers document number TC0059 - refer to TFS ID 21740.
      // Test error generated on creation of a Bank Account from Contact if Bus. Rel. Code for Bank Accs. field in Marketing Setup
      // is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Bank Accs. of Marketing Setup as blank. Create a new Contact.
      Initialize;
      BusRelCodeForBankAccs := ChangeBusinessRelationCodeForBankAccount('');
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Try to create Bank Account from Contact.
      ASSERTERROR Contact.CreateBankAccount;

      // 3. Verify: Check that the application generates an error on creation of a Bank Account from Contact if Bus. Rel. Code for
      // Bank Accs. field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Bank Accs."),MarketingSetup.TABLECAPTION);

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Bank Accs. in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccs);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE CreateContactFromCustomerError@36();
    VAR
      Customer@1001 : Record 18;
      MarketingSetup@1003 : Record 5079;
    BEGIN
      // Covers document number TC0058, TC0060 - refer to TFS ID 21740.
      // Test error generated on creation of a Contact from Customer if Bus. Rel. Code for Customers field in Marketing Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Customers of Marketing Setup as blank. Create a new Customer.
      Initialize;
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Try to create Contact from Customer.
      ASSERTERROR Customer.ShowContact;

      // 3. Verify: Check that the application generates an error on creation of a Contact from Customer if Bus. Rel. Code for Customers
      // field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Customers"),MarketingSetup.TABLECAPTION);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE CreateContactFromVendorError@35();
    VAR
      Vendor@1001 : Record 23;
      MarketingSetup@1003 : Record 5079;
    BEGIN
      // Covers document number TC0058, TC0060 - refer to TFS ID 21740.
      // Test error generated on creation of a Contact from Vendor if Bus. Rel. Code for Vendors field in Marketing Setup is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Vendors of Marketing Setup as blank. Create a new Vendor.
      Initialize;
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);

      // 2. Exercise: Try to create Contact from Vendor.
      ASSERTERROR Vendor.ShowContact;

      // 3. Verify: Check that the application generates an error on creation of a Contact from Vendor if Bus. Rel. Code for Vendors
      // field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Vendors"),MarketingSetup.TABLECAPTION);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE CreateContactFromBankAccError@38();
    VAR
      BankAccount@1001 : Record 270;
      MarketingSetup@1003 : Record 5079;
      BusRelCodeForBankAccs@1000 : Code[10];
    BEGIN
      // Covers document number TC0058, TC0060 - refer to TFS ID 21740.
      // Test error generated on creation of a Contact from Bank Account if Bus. Rel. Code for Bank Accs. field in Marketing Setup
      // is blank.

      // 1. Setup: Input the field Bus. Rel. Code for Bank Accs. of Marketing Setup as blank. Create a new Bank Account.
      Initialize;
      BusRelCodeForBankAccs := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);

      // 2. Exercise: Try to create Contact from Bank Account.
      ASSERTERROR BankAccount.ShowContact;

      // 3. Verify: Check that the application generates an error on creation of a Contact from Bank Account if Bus. Rel. Code
      // for Bank Accs. field in Marketing Setup is blank.
      VerifyContactErrorMessage(MarketingSetup.FIELDCAPTION("Bus. Rel. Code for Bank Accs."),MarketingSetup.TABLECAPTION);

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Bank Accs. in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccs);
    END;

    [Test]
    PROCEDURE CreateContactFromCustomer@39();
    VAR
      Customer@1001 : Record 18;
      Contact@1007 : Record 5050;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromCustomers@1003 : Report 5195;
    BEGIN
      // Covers document number TC0060 - refer to TFS ID 21740.
      // Test creation of a Contact from Customer.

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Customers of Marketing Setup. Create a
      // new Customer.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Create Contact from Customer by running the report Create Conts. from Customers.
      Customer.SETRANGE("No.",Customer."No.");
      CreateContsFromCustomers.USEREQUESTPAGE(FALSE);
      CreateContsFromCustomers.SETTABLEVIEW(Customer);
      CreateContsFromCustomers.RUN;

      // 3. Verify: Check that the Contact has been created from the Customer.
      ContactBusinessRelation.SETRANGE("Business Relation Code",BusinessRelation.Code);
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Customer."No.");
      ContactBusinessRelation.FINDFIRST;
      Contact.GET(ContactBusinessRelation."Contact No.");
    END;

    [Test]
    PROCEDURE CreateContactFromVendor@41();
    VAR
      Vendor@1001 : Record 23;
      Contact@1007 : Record 5050;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromVendors@1003 : Report 5194;
    BEGIN
      // Covers document number TC0060 - refer to TFS ID 21740.
      // Test creation of a Contact from Vendor.

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Vendors of Marketing Setup. Create a
      // new Vendor.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryPurchase.CreateVendor(Vendor);

      // 2. Exercise: Create Contact from Vendor by running the report Create Conts. from Vendors.
      Vendor.SETRANGE("No.",Vendor."No.");
      CreateContsFromVendors.USEREQUESTPAGE(FALSE);
      CreateContsFromVendors.SETTABLEVIEW(Vendor);
      CreateContsFromVendors.RUN;

      // 3. Verify: Check that the Contact has been created from the Vendor.
      ContactBusinessRelation.SETRANGE("Business Relation Code",BusinessRelation.Code);
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.SETRANGE("No.",Vendor."No.");
      ContactBusinessRelation.FINDFIRST;
      Contact.GET(ContactBusinessRelation."Contact No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE CreateContactFromBankAcc@40();
    VAR
      BankAccount@1001 : Record 270;
      Contact@1007 : Record 5050;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromBankAccs@1003 : Report 5193;
      BusRelCodeForBankAccs@1000 : Code[10];
    BEGIN
      // Covers document number TC0060 - refer to TFS ID 21740.
      // Test creation of a Contact from Bank Account.

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Bank Accs. of Marketing Setup. Create a
      // new Bank Account.
      Initialize;
      ExecuteUIHandler;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccs := ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryERM.CreateBankAccount(BankAccount);

      // 2. Exercise: Create Contact from Bank Account by running the report Create Conts. from Bank Account.
      BankAccount.SETRANGE("No.",BankAccount."No.");
      CreateContsFromBankAccs.USEREQUESTPAGE(FALSE);
      CreateContsFromBankAccs.SETTABLEVIEW(BankAccount);
      CreateContsFromBankAccs.RUN;

      // 3. Verify: Check that the Contact has been created from the Bank Account.
      ContactBusinessRelation.SETRANGE("Business Relation Code",BusinessRelation.Code);
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::"Bank Account");
      ContactBusinessRelation.SETRANGE("No.",BankAccount."No.");
      ContactBusinessRelation.FINDFIRST;
      Contact.GET(ContactBusinessRelation."Contact No.");

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Bank Accs. in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccs);
    END;

    [Test]
    [HandlerFunctions(CreateInteractModalFormHandler)]
    PROCEDURE InteractionStatisticsOnContact@47();
    VAR
      Contact@1000 : Record 5050;
      InteractionTemplate@1001 : Record 5064;
      CostLCY@1002 : Decimal;
      DurationMin@1003 : Decimal;
    BEGIN
      // Covers document number TC0061 - refer to TFS ID 21740.
      // Test the Interaction statistics information on the Contact card.

      // 1. Setup: Create a new Contact, Interaction Template.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);

      // Set global variables for form handler with any random decimal value.
      CostLCY := LibraryRandom.RandDec(100,2);
      DurationMin := LibraryRandom.RandDec(100,2);
      LibraryVariableStorage.Enqueue(InteractionTemplate.Code);
      LibraryVariableStorage.Enqueue(CostLCY);
      LibraryVariableStorage.Enqueue(DurationMin);

      // 2. Exercise: Create a new Interaction for Contact.
      Contact.CreateInteraction;

      // 3. Verify: Check that the Statistics for Interaction has been updated on Contact.
      Contact.CALCFIELDS("Cost (LCY)","Duration (Min.)","No. of Interactions");
      Contact.TESTFIELD("No. of Interactions",1);
      Contact.TESTFIELD("Cost (LCY)",CostLCY);
      Contact.TESTFIELD("Duration (Min.)",DurationMin);
    END;

    [Test]
    [HandlerFunctions(CreateInteractModalFormHandler,ConfirmHandlerTrue)]
    PROCEDURE CancelInteractionOnContact@51();
    VAR
      Contact@1000 : Record 5050;
      InteractionTemplate@1001 : Record 5064;
      InteractionLogEntry@1002 : Record 5065;
      CostLCY@1003 : Decimal;
      DurationMin@1004 : Decimal;
    BEGIN
      // Covers document number TC0061 - refer to TFS ID 21740.
      // Test the Interaction statistics information on the Contact card.

      // 1. Setup: Create a new Contact, Interaction Template. Create a new Interaction for Contact.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);

      // Set global variables for form handler with any random decimal value.
      CostLCY := LibraryRandom.RandDec(100,2);
      DurationMin := LibraryRandom.RandDec(100,2);
      LibraryVariableStorage.Enqueue(InteractionTemplate.Code);
      LibraryVariableStorage.Enqueue(CostLCY);
      LibraryVariableStorage.Enqueue(DurationMin);
      Contact.CreateInteraction;

      // 2. Exercise: Cancel the Interaction.
      InteractionLogEntry.SETRANGE("Contact No.",Contact."No.");
      InteractionLogEntry.SETRANGE("Interaction Template Code",InteractionTemplate.Code);
      InteractionLogEntry.ToggleCanceledCheckmark;

      // 3. Verify: Check that the Statistics for Interaction has been updated on Contact.
      Contact.CALCFIELDS("Cost (LCY)","Duration (Min.)","No. of Interactions");
      Contact.TESTFIELD("No. of Interactions",0);
      Contact.TESTFIELD("Cost (LCY)",0);
      Contact.TESTFIELD("Duration (Min.)",0);
    END;

    [Test]
    [HandlerFunctions(CreateOpportModalFormHandler)]
    PROCEDURE OpportunityStatisticsOnContact@60();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1002 : Record 5092;
      SalesCycle@1001 : Record 5090;
      TempOpportunity@1003 : TEMPORARY Record 5092;
      WizardEstimatedValueLCY@1004 : Decimal;
      WizardChancesofSuccessPercent@1005 : Decimal;
    BEGIN
      // Covers document number TC0061 - refer to TFS ID 21740.
      // Test the Opportunity statistics information on the Contact card.

      // 1. Setup: Create a new Contact and Sales Cycle.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // 2. Exercise: Create a new Opportunity for Contact. Set global variables for Form Handler with any random decimal values.
      WizardEstimatedValueLCY := LibraryRandom.RandDec(100,2);
      WizardChancesofSuccessPercent := LibraryRandom.RandDec(100,2);
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      LibraryVariableStorage.Enqueue(SalesCycle.Code);
      LibraryVariableStorage.Enqueue(WizardEstimatedValueLCY);
      LibraryVariableStorage.Enqueue(WizardChancesofSuccessPercent);
      TempOpportunity.CreateOppFromOpp(Opportunity);

      // 3. Verify: Check that the Statistics for Opportunity has been updated on Contact.
      Contact.CALCFIELDS("Estimated Value (LCY)","Calcd. Current Value (LCY)","No. of Opportunities");
      Contact.TESTFIELD("No. of Opportunities",1);  // Since one opportunity has been created and linked.
      Contact.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY);
      TempOpportunity.TESTFIELD(
        "Calcd. Current Value (LCY)",TempOpportunity."Estimated Value (LCY)" * TempOpportunity."Probability %" / 100);
    END;

    [Test]
    [HandlerFunctions(CreateOpportModalFormHandler,CloseOpportModalFormHandler,MessageHandler)]
    PROCEDURE CloseOpportunityOnContact@46();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1002 : Record 5092;
      SalesCycle@1001 : Record 5090;
      CloseOpportunityCode@1004 : Record 5094;
      TempOpportunity@1003 : TEMPORARY Record 5092;
      WizardEstimatedValueLCY@1005 : Decimal;
      WizardChancesofSuccessPercent@1006 : Decimal;
      CalcCurrentValueLCY@1007 : Decimal;
    BEGIN
      // Covers document number TC0061 - refer to TFS ID 21740.
      // Test the Opportunity statistics information on the Contact card after Closing the Opportunity.

      // 1. Setup: Create a new Contact and Sales Cycle. Create a new Opportunity for Contact. Set global variables for Form Handler with
      // any random decimal values. Create a new Close Opportunity Code.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // Set global variables for form handler with any random decimal values.
      WizardEstimatedValueLCY := LibraryRandom.RandDec(100,2);
      WizardChancesofSuccessPercent := LibraryRandom.RandDec(100,2);
      LibraryVariableStorage.Enqueue(SalesCycle.Code);
      LibraryVariableStorage.Enqueue(WizardEstimatedValueLCY);
      LibraryVariableStorage.Enqueue(WizardChancesofSuccessPercent);

      Opportunity.SETRANGE("Contact No.",Contact."No.");
      TempOpportunity.CreateOppFromOpp(Opportunity);
      LibraryMarketing.CreateCloseOpportunityCode(CloseOpportunityCode);

      // Set global variable for form handler with any random decimal value.
      CalcCurrentValueLCY := LibraryRandom.RandDec(100,2);
      LibraryVariableStorage.Enqueue(CloseOpportunityCode.Code);
      LibraryVariableStorage.Enqueue(CalcCurrentValueLCY);

      // 2. Exercise: Close the Opportunity.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;

      // 3. Verify: Check that the Statistics for Opportunity has been updated on Contact.
      Contact.CALCFIELDS("Estimated Value (LCY)","Calcd. Current Value (LCY)","No. of Opportunities");
      Contact.TESTFIELD("No. of Opportunities",1);  // Since one opportunity has been closed as Won.
      TempOpportunity.TESTFIELD("Calcd. Current Value (LCY)",TempOpportunity."Estimated Value (LCY)");
      // Verify: Check that the Opportunity Entry field "Calcd. Current Value" was updated with (Sales (LCY)) value.
      VerifyOpportunityEntry(Opportunity."No.",CalcCurrentValueLCY);
    END;

    [Test]
    [HandlerFunctions(VerifyNameModalFormHandler)]
    PROCEDURE NameDetailsAfterUpdateContact@20();
    VAR
      Contact@1000 : Record 5050;
      Salutation@1002 : Record 5068;
      Language@1003 : Record 8;
    BEGIN
      // Covers document number TC0062 - refer to TFS ID 21740.
      // Test updation of Name Details after updation of Contact associated with the Name Details.
      Initialize;

      // 1. Setup: Create a new Contact and input Type as Person. Find Salutation and Language.
      CreateContactAsPerson(Contact);
      Salutation.FINDFIRST;
      Language.FINDFIRST;

      // 2. Exercise: Fill in the details in the Contact.
      LibraryVariableStorage.Enqueue(Salutation.Code);
      LibraryVariableStorage.Enqueue(Language.Code);
      UpdateContactNameDetails(Contact,Salutation.Code,Language.Code);

      // 3. Verify: Open the Name Details form and check that the Name Details has been updated with the details filled earlier. This
      // will be done within the form Handler.
      RunNameDetails(Contact);
    END;

    [Test]
    [HandlerFunctions(CompanyDetailsModalFormHandler)]
    PROCEDURE ContactUpdateCompanyDetails@11();
    VAR
      Contact@1000 : Record 5050;
      PostCode@1002 : Record 225;
      PhoneNumber@1001 : Text[30];
    BEGIN
      // Covers document number TC0062 - refer to TFS ID 21740.
      // Test updation of Contact after updation of Company Details associated with the Contact.

      // 1. Setup: Create a new Contact. Find a Post Code and Country/Region.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      PostCode.FINDFIRST;
      PhoneNumber := FORMAT(LibraryRandom.RandIntInRange(1000000,9999999));

      // 2. Exercise: Open the Company Details form and fill in the details.
      LibraryVariableStorage.Enqueue(PostCode.Code);
      LibraryVariableStorage.Enqueue(PostCode."Country/Region Code");
      LibraryVariableStorage.Enqueue(PhoneNumber);
      RunCompanyDetails(Contact);

      // 3. Verify: Check that the Contact has been updated with the details filled earlier.
      Contact.GET(Contact."No.");  // Get refreshed instance.
      VerifyContactCompanyDetails(Contact,PostCode.Code,PostCode."Country/Region Code",PhoneNumber);
    END;

    [Test]
    [HandlerFunctions(VerifyCompanyModalFormHandler)]
    PROCEDURE CompanyDetailsAfterContact@14();
    VAR
      Contact@1000 : Record 5050;
      PostCode@1003 : Record 225;
      PhoneNumber@1001 : Text[30];
    BEGIN
      // Covers document number TC0062 - refer to TFS ID 21740.
      // Test updation of Company Details after updation of Contact associated with the Company Details.

      // 1. Setup: Create a new Contact. Find a Post Code and Country/Region.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      PostCode.FINDFIRST;
      PhoneNumber := FORMAT(LibraryRandom.RandIntInRange(1000000,9999999));

      // 2. Exercise: Fill in the details in the Contact.
      LibraryVariableStorage.Enqueue(PostCode.Code);
      LibraryVariableStorage.Enqueue(PostCode."Country/Region Code");
      LibraryVariableStorage.Enqueue(PhoneNumber);
      UpdateContactCompanyDetails(Contact,PostCode.Code,PostCode."Country/Region Code",PhoneNumber);

      // 3. Verify: Open the Company Details form and check that the Company Details have been updated with the details
      // filled earlier. This will be done within the form Handler.
      RunCompanyDetails(Contact);
    END;

    [Test]
    [HandlerFunctions(ModalFormMarketingSetup,ConfirmHandlerTrue)]
    PROCEDURE RelocateAttachments@55();
    VAR
      Attachment@1002 : Record 5062;
      MarketingSetup2@1000 : Record 5079;
      MarketingSetup@1004 : Page 5094;
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test Relocation of Attachment.

      // 1. Setup:
      Initialize;
      MarketingSetup2.GET;

      // 2. Exercise: Change the Location for the Attachments.
      CLEAR(MarketingSetup);
      MarketingSetup.SETRECORD(MarketingSetup2);
      MarketingSetup.RUNMODAL;

      // 3. Verify: Check that location has been changed for attachments.
      Attachment.FINDSET;
      REPEAT
        LibraryUtility.CheckFileNotEmpty(TEMPORARYPATH + FORMAT(Attachment."No."))
      UNTIL Attachment.NEXT = 0;
    END;

    [Test]
    PROCEDURE ContactFromCustomerCurrency@61();
    VAR
      Currency@1005 : Record 4;
      Customer@1001 : Record 18;
      Contact@1007 : Record 5050;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromCustomers@1003 : Report 5195;
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test creation of a Contact from Customer With Currency.

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Customers of Marketing Setup. Create a
      // new Customer. Update Currency on Customer.
      Initialize;
      LibraryERM.CreateCurrency(Currency);
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      CreateCustomerWithCurrency(Customer,Currency.Code);

      // 2. Exercise: Create Contact from Customer by running the report Create Conts. from Customer report with Customer Currency Filter.
      Customer.SETRANGE("No.",Customer."No.");
      Customer.SETRANGE("Currency Code",Currency.Code);
      CreateContsFromCustomers.USEREQUESTPAGE(FALSE);
      CreateContsFromCustomers.SETTABLEVIEW(Customer);
      CreateContsFromCustomers.RUN;

      // 3. Verify: Check that the Contact has been created from the Customer.
      FindContactBusinessRelation(
        ContactBusinessRelation,BusinessRelation.Code,ContactBusinessRelation."Link to Table"::Customer,Customer."No.");
      Contact.GET(ContactBusinessRelation."Contact No.");
    END;

    [Test]
    PROCEDURE ContactFromVendorCurrency@59();
    VAR
      Vendor@1001 : Record 23;
      Contact@1007 : Record 5050;
      Currency@1005 : Record 4;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromVendors@1003 : Report 5194;
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test creation of a Contact from Vendor With Currency.

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Vendor of Marketing Setup. Create a
      // new Vendor. Update Currency on Vendor.
      Initialize;
      LibraryERM.CreateCurrency(Currency);
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      CreateVendorWithCurrency(Vendor,Currency.Code);

      // 2. Exercise: Create Contact from Vendor by running the report Create Conts. from Vendors report with Vendor Currency Filter.
      Vendor.SETRANGE("No.",Vendor."No.");
      Vendor.SETRANGE("Currency Code",Currency.Code);
      CreateContsFromVendors.USEREQUESTPAGE(FALSE);
      CreateContsFromVendors.SETTABLEVIEW(Vendor);
      CreateContsFromVendors.RUN;

      // 3. Verify: Check that the Contact has been created from the Vendor.
      FindContactBusinessRelation(
        ContactBusinessRelation,BusinessRelation.Code,ContactBusinessRelation."Link to Table"::Vendor,Vendor."No.");
      Contact.GET(ContactBusinessRelation."Contact No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ContactFromBankAccountCurrency@56();
    VAR
      BankAccount@1001 : Record 270;
      Contact@1007 : Record 5050;
      Currency@1005 : Record 4;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1006 : Record 5054;
      CreateContsFromBankAccs@1003 : Report 5193;
      BusRelCodeForBankAccs@1000 : Code[10];
    BEGIN
      // Covers document number TC0001 - refer to TFS ID 160766.
      // Test creation of a Contact from Bank Account With Currency.

      // 1. Setup: Create a new Business Relation and input it in the field Bus. Rel. Code for Bank Accs. of Marketing Setup. Create a
      // new Bank Account. Update Currency on Bank Account.
      Initialize;
      ExecuteUIHandler;
      LibraryERM.CreateCurrency(Currency);
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccs := ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryERM.CreateBankAccount(BankAccount);
      CreateBankAccountWithCurrency(BankAccount,Currency.Code);

      // 2. Exercise: Create Contact from Bank Account by running the report Create Conts. from Bank report
      // with Bank Account Currency Filter.
      BankAccount.SETRANGE("No.",BankAccount."No.");
      BankAccount.SETRANGE("Currency Code",Currency.Code);
      CreateContsFromBankAccs.USEREQUESTPAGE(FALSE);
      CreateContsFromBankAccs.SETTABLEVIEW(BankAccount);
      CreateContsFromBankAccs.RUN;

      // 3. Verify: Check that the Contact has been created from the Bank Account.
      FindContactBusinessRelation(
        ContactBusinessRelation,BusinessRelation.Code,ContactBusinessRelation."Link to Table"::"Bank Account",BankAccount."No.");
      Contact.GET(ContactBusinessRelation."Contact No.");

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Bank Accs. in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccs);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler)]
    PROCEDURE LinkContactWithCustomerAsContact@127();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      Name@1004 : Text[50];
      CurrMasterFields@1006 : 'Contact,Customer';
    BEGIN
      // Check that Contact Name has not been changed after linking Customer to a Contact as Contact.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Contact);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Name := Contact.Name;  // Store contact name into a variable to use it for verification.

      // 2. Exercise: Link Contact with an existing Customer.
      Contact.CreateCustomerLink;

      // 3. Verify: Verify that Contact still has same name as it has prior to linking with Customer.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,Name);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler)]
    PROCEDURE LinkContactWithCustomer@12();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      CurrMasterFields@1004 : 'Contact,Customer';
    BEGIN
      // Check that Contact Name has changed to Customer Name after linking Customer to a Contact as Customer.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Link Contact with an existing Customer.
      Contact.CreateCustomerLink;

      // 3. Verify: Verify that Contact Name updated with Customer Name after Linking with Customer.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler)]
    PROCEDURE LinkContactWithVendor@92();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      Vendor@1002 : Record 23;
    BEGIN
      // Check that Contact Name has changed to Vendor Name after linking Vendor to a Contact as Vendor.

      // 1. Setup: Blank the Business Relation code for Vendor to create Vendor without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(Vendor."No.");

      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Link Contact with an existing Vendor.
      Contact.CreateVendorLink;

      // 3. Verify: Verify that Contact Name updated with Vendor Name after Linking with Vendor.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,Vendor.Name);
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE LinkContactWithBankAccount@66();
    VAR
      BankAccount@1002 : Record 270;
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      BusRelCodeForBankAccount@1001 : Code[10];
    BEGIN
      // Check that Contact Name has changed to Bank Account Name after linking Bank Account to a Contact as Bank.

      // 1. Setup: Blank the Business Relation code for Bank Account to create Bank Account without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      ExecuteUIHandler;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccount := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");

      ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Link Contact with Bank Account.
      Contact.CreateBankAccountLink;

      // 3. Verify: Verify that Contact Name updated with Bank Account Name after Linking with Bank Account.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,BankAccount.Name);

      // 4. Tear Down: Input the original value of the field Bus. Rel. Code for Bank Account in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccount);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler)]
    PROCEDURE CustomerLinkedContact@82();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      ContactList@1004 : TestPage 5052;
      CurrMasterFields@1006 : 'Contact,Customer';
    BEGIN
      // Check that Correct Contact No and Name appears on Contact List Page after Linking Contact to Customer.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      // Link Contact with an existing Customer.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateCustomerLink;

      // 2. Exercise: Open Contact List Page for Customer.
      ContactList.TRAP;
      Customer.ShowContact;

      // 3. Verify: Verify Contact No. and Name in Contact List Page.
      ContactList."No.".ASSERTEQUALS(Contact."No.");
      ContactList.Name.ASSERTEQUALS(Customer.Name);
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler)]
    PROCEDURE VendorLinkedContact@106();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      Vendor@1002 : Record 23;
      ContactList@1004 : TestPage 5052;
    BEGIN
      // Check that Correct Contact No and Name appears on Contact List Page after Linking Contact to Vendor.

      // 1. Setup: Blank the Business Relation code for Vendor to create Vendor without Contact, Again update it with some value, Create a new Contact.
      // Link Contact with an existing Vendor.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateVendorLink;

      // 2. Exercise: Open Contact List Page for Vendor.
      ContactList.TRAP;
      Vendor.ShowContact;

      // 3. Verify: Verify correct Contact No. and Name appearing in Contact List Page.
      ContactList."No.".ASSERTEQUALS(Contact."No.");
      ContactList.Name.ASSERTEQUALS(Vendor.Name);
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE BankAccountLinkedContact@116();
    VAR
      BankAccount@1002 : Record 270;
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      ContactList@1004 : TestPage 5052;
      BusRelCodeForBankAccount@1001 : Code[10];
    BEGIN
      // Check that Correct Contact No and Name appears on Contact List Page after Linking Contact to Bank Account.

      // 1. Setup: Blank the Business Relation code for Bank Account to create Bank Account without Contact, Again update it with some value, Create a new Contact.
      // Link Contact with an existing Bank Account.
      Initialize;
      ExecuteUIHandler;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccount := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");

      ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateBankAccountLink;

      // 2. Exercise: Open Contact List Page for Bank Account.
      ContactList.TRAP;
      BankAccount.ShowContact;

      // 3. Verify: Verify correct Contact No. and Name appearing in Contact List Page.
      ContactList."No.".ASSERTEQUALS(Contact."No.");
      ContactList.Name.ASSERTEQUALS(BankAccount.Name);

      // 4. Tear Down: Input the original value of the field Bus. Rel. Code for Bank Account in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccount);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler)]
    PROCEDURE ContactWithUpdatedCustomer@70();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      CustomerCard@1004 : TestPage 21;
      NewName@1007 : Text[50];
      CurrMasterFields@1006 : 'Contact,Customer';
    BEGIN
      // Check that Contact Name gets updated after updating Customer Name for a Customer linked with Contact.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      // Link Contact with an existing Customer.
      Initialize;
      NewName := LibraryUtility.GenerateGUID;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateCustomerLink;

      // 2. Exercise: Update Customer Name with some new name.
      CustomerCard.OPENEDIT;
      CustomerCard.FILTER.SETFILTER("No.",Customer."No.");
      CustomerCard.Name.SETVALUE(NewName);
      CustomerCard.OK.INVOKE;

      // 3. Verify: Verify that Contact Name gets updated with the new Customer Name.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,NewName);
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler)]
    PROCEDURE ContactWithUpdatedVendor@81();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      Vendor@1002 : Record 23;
      VendorCard@1004 : TestPage 26;
      NewName@1007 : Text[50];
    BEGIN
      // Check that Contact Name gets updated after updating Vendor Name for a Vendor linked with Contact.

      // 1. Setup: Blank the Business Relation code for Vendor to create Vendor without Contact, Again update it with some value, Create a new Contact.
      // Link Contact with an existing Vendor.
      Initialize;
      NewName := LibraryUtility.GenerateGUID;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateVendorLink;

      // 2. Exercise: Update Vendor Name.
      VendorCard.OPENEDIT;
      VendorCard.FILTER.SETFILTER("No.",Vendor."No.");
      VendorCard.Name.SETVALUE(NewName);
      VendorCard.OK.INVOKE;

      // 3. Verify: Verify that updated Vendor Name reflected in Contact Name.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,NewName);
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ContactWithUpdatedBankAccount@67();
    VAR
      BankAccount@1002 : Record 270;
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      BankAccountCard@1004 : TestPage 370;
      BusRelCodeForBankAccount@1001 : Code[10];
      NewName@1007 : Text[50];
    BEGIN
      // Check that Contact Name gets updated after updating Bank Account Name for a Bank Account linked with Contact.

      // 1. Setup: Blank the Business Relation code for Bank Account to create Bank Account without Contact, Again update it with some value, Create a new Contact.
      // Link Contact with an existing Bank Account.
      Initialize;
      ExecuteUIHandler;
      NewName := LibraryUtility.GenerateGUID;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccount := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateBankAccountLink;

      // 2. Exercise: Update Bank Account Name on Bank Account Card.
      BankAccountCard.OPENEDIT;
      BankAccountCard.FILTER.SETFILTER("No.",BankAccount."No.");
      BankAccountCard.Name.SETVALUE(NewName);
      BankAccountCard.OK.INVOKE;

      // 3. Verify: Verify that updated Bank Account Name reflects on Contact.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD(Name,NewName);

      // 4. Tear Down: Input the original value of the field Bus. Rel. Code for Bank Account in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccount);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler)]
    PROCEDURE UpdateContactLinkedToCustomer@68();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      NewName@1004 : Text[50];
      CurrMasterFields@1006 : 'Contact,Customer';
    BEGIN
      // Check that Customer Name updated after Linking Contact to Customer and updating Contact Name on Contact Card.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateCustomerLink;
      NewName := LibraryUtility.GenerateGUID;

      // 2. Exercise.
      UpdateNameOnContactCard(Contact."No.",NewName);

      // 3. Verify: Verify that updated Contact Name reflected on Customer.
      Customer.GET(Customer."No.");
      Customer.TESTFIELD(Name,NewName);
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler)]
    PROCEDURE UpdateContactLinkedToVendor@71();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      Vendor@1002 : Record 23;
      NewName@1007 : Text[50];
    BEGIN
      // Check that Vendor Name updated after Linking Contact to Vendor and updating Contact Name on Contact Card.

      // 1. Setup: Blank the Business Relation code for Vendor to create Vendor without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(Vendor."No.");

      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateVendorLink;
      NewName := LibraryUtility.GenerateGUID;

      // 2. Exercise.
      UpdateNameOnContactCard(Contact."No.",NewName);

      // 3. Verify: Verify that updated Contact Name reflected on Vendor.
      Vendor.GET(Vendor."No.");
      Vendor.TESTFIELD(Name,NewName);
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE UpdateContactLinkedToBankAccount@69();
    VAR
      BankAccount@1002 : Record 270;
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      NewName@1007 : Text[50];
      BusRelCodeForBankAccount@1001 : Code[10];
    BEGIN
      // Check that Bank Account Name updated after Linking Contact to Bank Account and updating Contact Name on Contact Card.

      // 1. Setup: Blank the Business Relation code for Bank Account to create Bank Account without Contact, Again update it with some value, Create a new Contact.
      Initialize;
      ExecuteUIHandler;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccount := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateBankAccountLink;
      NewName := LibraryUtility.GenerateGUID;

      // 2. Exercise.
      UpdateNameOnContactCard(Contact."No.",NewName);

      // 3. Verify: Verify that updated Contact Name reflected on Bank Account.
      BankAccount.GET(BankAccount."No.");
      BankAccount.TESTFIELD(Name,NewName);

      // 4. Cleanup: Input the original value of the field Bus. Rel. Code for Bank Account in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccount);
    END;

    [Test]
    PROCEDURE ContactDeletion@79();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Check Deletion of Contact Created.

      // 1. Setup.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Delete the contact created earlier.
      Contact.DELETE(TRUE);

      // 3. Verify: Verify that Contact not exist after deletion.
      Contact.SETRANGE("No.",Contact."No.");
      Assert.IsFalse(Contact.FINDFIRST,STRSUBSTNO(ErrorMessage,Contact.TABLECAPTION,Contact."No."));
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler)]
    PROCEDURE DeleteContactLinkedToCustomer@78();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      CurrMasterFields@1004 : 'Contact,Customer';
    BEGIN
      // Check that Customer still exists after deleting Contact linked with Customer.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      // Create Contact Link for Customer.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateCustomerLink;

      // 2. Exercise.
      Contact.DELETE(TRUE);

      // 3. Verify: Verify that Customer linked to Contact still exists.
      Customer.SETRANGE("No.",Customer."No.");
      Assert.IsTrue(Customer.FINDFIRST,STRSUBSTNO(ValidationError,Customer.TABLECAPTION,Customer."No."));
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler)]
    PROCEDURE DeleteContactLinkedToVendor@76();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      Vendor@1002 : Record 23;
    BEGIN
      // Check that Vendor still exists after deleting Contact linked with Vendor.

      // 1. Setup: Blank the Business Relation code for Vendor to create Vendor without Contact, Again update it with some value, Create a new Contact.
      // Create Contact Link for Vendor.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateVendorLink;

      // 2. Exercise.
      Contact.DELETE(TRUE);

      // 3. Verify: Verify that Vendor linked to Contact still exists.
      Assert.IsTrue(Vendor.GET(Vendor."No."),STRSUBSTNO(ValidationError,Vendor.TABLECAPTION,Vendor."No."));
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE DeleteContactLinkedToBankAccount@75();
    VAR
      BankAccount@1002 : Record 270;
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      BusRelCodeForBankAccount@1001 : Code[10];
    BEGIN
      // Check that Bank Account still exists after deleting Contact linked with Bank Account.

      // 1. Setup: Blank the Business Relation code for Bank Account to create Bank Account without Contact, Again update it with some value, Create a new Contact.
      // Create Contact Link for Bank Account.
      Initialize;
      ExecuteUIHandler;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccount := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");

      ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateBankAccountLink;

      // 2. Exercise.
      Contact.DELETE(TRUE);

      // 3. Verify: Verify that Bank Account linked to Contact still exists.
      Assert.IsTrue(BankAccount.GET(BankAccount."No."),STRSUBSTNO(ValidationError,BankAccount.TABLECAPTION,BankAccount."No."));

      // 4. Tear Down: Input the original value of the field Bus. Rel. Code for Bank Account in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccount);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE DeleteCustomerLinkedToContact@83();
    VAR
      Contact@1005 : Record 5050;
      Customer@1003 : Record 18;
      BusinessRelation@1000 : Record 5053;
      ContactList@1004 : TestPage 5052;
      ContactNo@1007 : Code[20];
      CurrMasterFields@1006 : 'Contact,Customer';
    BEGIN
      // Check that new Contact exists after deleting Contact and then its linked Customer.

      // 1. Setup: Blank the Business Relation code for Customer to create Customer without Contact, Again update it with some value, Create a new Contact.
      // Create Customer link for Contact. Delete the Contact and then open Contact List Page for Customer.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers('');
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(Customer."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateCustomerLink;  // Create Customer Link for Contact.
      Contact.DELETE(TRUE);
      ContactList.TRAP;
      Customer.ShowContact;  // Show contact for Customer.
      ContactNo := ContactList."No.".VALUE;

      // 2. Exercise.
      Customer.FIND;
      Customer.DELETE(TRUE);

      // 3. Verify: Verify that Contact still exists after deleting linked Customer.
      Assert.IsTrue(Contact.GET(ContactNo),STRSUBSTNO(ValidationError,Contact.TABLECAPTION,ContactNo));
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE DeleteVendorLinkedToContact@85();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      Vendor@1002 : Record 23;
      ContactList@1007 : TestPage 5052;
      ContactNo@1004 : Code[20];
    BEGIN
      // Check that new Contact exists after deleting Contact and then its linked Vendor.

      // 1. Setup: Blank the Business Relation code for Vendor to create Vendor without Contact, Again update it with some value, Create a new Contact.
      // Create Vendor link for Contact. Delete the Contact and then open Contact List Page for Vendor.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForVendors('');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      ChangeBusinessRelationCodeForVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateVendorLink;
      Contact.DELETE(TRUE);
      ContactList.TRAP;
      Vendor.ShowContact;  // Show contact for Customer.
      ContactNo := ContactList."No.".VALUE;

      // 2. Exercise.
      Vendor.FIND;
      Vendor.DELETE(TRUE);

      // 3. Verify: Verify that Contact still exists after deleting linked Vendor.
      Assert.IsTrue(Contact.GET(ContactNo),STRSUBSTNO(ValidationError,Contact.TABLECAPTION,ContactNo));
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,ConfirmHandlerTrue)]
    PROCEDURE DeleteBankAccountLinkedToContact@86();
    VAR
      BankAccount@1002 : Record 270;
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      ContactList@1007 : TestPage 5052;
      ContactNo@1004 : Code[20];
      BusRelCodeForBankAccount@1001 : Code[10];
    BEGIN
      // Check that new Contact exists after deleting Contact and then its linked Bank Account.

      // 1. Setup: Blank the Business Relation code for Bank Account to create Bank Account without Contact, Again update it with some value, Create a new Contact.
      // Create Bank Account link for Contact. Delete the Contact and then open Contact List Page for Bank Account.
      Initialize;
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      BusRelCodeForBankAccount := ChangeBusinessRelationCodeForBankAccount('');
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      ChangeBusinessRelationCodeForBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateBankAccountLink;
      Contact.DELETE(TRUE);

      ContactList.TRAP;
      BankAccount.ShowContact;  // Show contact for Customer.
      ContactNo := ContactList."No.".VALUE;

      // 2. Exercise.
      BankAccount.FIND;
      BankAccount.DELETE(TRUE);

      // 3. Verify: Verify that Contact still exists after deleting linked Bank Account.
      Assert.IsTrue(Contact.GET(ContactNo),STRSUBSTNO(ValidationError,Contact.TABLECAPTION,ContactNo));

      // 4. Tear Down: Input the original value of the field Bus. Rel. Code for Bank Account in Marketing Setup.
      ChangeBusinessRelationCodeForBankAccount(BusRelCodeForBankAccount);
    END;

    [Test]
    [HandlerFunctions(CustomerLinkPageHandler,MessageHandler)]
    PROCEDURE ContactLinkErrorForCustomer@73();
    VAR
      Contact@1000 : Record 5050;
      ContactBusinessRelation@1001 : Record 5054;
      MarketingSetup@1002 : Record 5079;
      CurrMasterFields@1003 : 'Contact,Customer';
    BEGIN
      // Check Error Message while trying to create a new Customer Link for Contact that is already having Customer Link.
      Initialize;

      // 1. Setup: Find a Contact that is having Customer as Business Relation.
      MarketingSetup.GET;
      FindContactBusinessRelation(
        ContactBusinessRelation,MarketingSetup."Bus. Rel. Code for Customers",ContactBusinessRelation."Link to Table"::Customer,
        '<>''''');
      Contact.GET(ContactBusinessRelation."Contact No.");
      LibraryVariableStorage.Enqueue(ContactBusinessRelation."No.");
      LibraryVariableStorage.Enqueue(CurrMasterFields::Customer);

      // 2. Exercise: Try to create Customer Link for Contact.
      Contact.CreateCustomerLink;

      // 3. Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          BusinessRelationError,Contact.TABLECAPTION,Contact."No.",ContactBusinessRelation."Link to Table",
          ContactBusinessRelation."No."));
    END;

    [Test]
    [HandlerFunctions(VendorLinkPageHandler,MessageHandler)]
    PROCEDURE ContactLinkErrorForVendor@72();
    VAR
      Contact@1000 : Record 5050;
      ContactBusinessRelation@1001 : Record 5054;
      MarketingSetup@1002 : Record 5079;
    BEGIN
      // Check Error Message while trying to create a new Vendor Link for Contact that is already having Vendor Link.
      Initialize;

      // 1. Setup: Find a Contact that is having Vendor as Business Relation.
      MarketingSetup.GET;
      FindContactBusinessRelation(
        ContactBusinessRelation,MarketingSetup."Bus. Rel. Code for Vendors",ContactBusinessRelation."Link to Table"::Vendor,'<>''''');
      Contact.GET(ContactBusinessRelation."Contact No.");
      LibraryVariableStorage.Enqueue(ContactBusinessRelation."No.");

      // 2. Exercise: Try to create Vendor Link for Contact.
      Contact.CreateVendorLink;

      // 3. Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          BusinessRelationError,Contact.TABLECAPTION,Contact."No.",ContactBusinessRelation."Link to Table",
          ContactBusinessRelation."No."));
    END;

    [Test]
    [HandlerFunctions(BankAccountLinkPageHandler,MessageHandler)]
    PROCEDURE ContactLinkErrorForBank@77();
    VAR
      Contact@1000 : Record 5050;
      ContactBusinessRelation@1001 : Record 5054;
      MarketingSetup@1002 : Record 5079;
    BEGIN
      // Check Error Message while trying to create a new Bank Account Link for Contact that is already having Bank Account Link.
      Initialize;

      // 1. Setup: Find a Contact that is having Bank Account as Business Relation.
      MarketingSetup.GET;
      FindContactBusinessRelation(
        ContactBusinessRelation,MarketingSetup."Bus. Rel. Code for Bank Accs.",
        ContactBusinessRelation."Link to Table"::"Bank Account",'<>''''');
      Contact.GET(ContactBusinessRelation."Contact No.");
      LibraryVariableStorage.Enqueue(ContactBusinessRelation."No.");

      // 2. Exercise: Try to create Bank Account Link for Contact.
      Contact.CreateBankAccountLink;

      // 3. Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          BusinessRelationError,Contact.TABLECAPTION,Contact."No.",ContactBusinessRelation."Link to Table",
          ContactBusinessRelation."No."));
    END;

    [Test]
    PROCEDURE ModifyAttachmentOnContactInteraction@90();
    VAR
      SegmentLine@1003 : Record 5077;
      Attachment@1004 : Record 5062;
      TempNewAttachment@1000 : TEMPORARY Record 5062;
      TempInterLogEntryCommentLine@1002 : TEMPORARY Record 5123;
      SegMgt@1001 : Codeunit 5051;
    BEGIN
      // create new interaction with attachment
      Initialize;

      CreateWriteAttachment(Attachment);
      CreateSegmentLine(SegmentLine,Attachment."No.");
      CreateInteractLogEntry(SegmentLine."Line No.");

      // create new attachment
      CreateWriteAttachment(TempNewAttachment);

      // update current interaction with new attachment
      SegMgt.LogInteraction(SegmentLine,TempNewAttachment,TempInterLogEntryCommentLine,FALSE,TRUE);

      // verify that attachment is exist
      Attachment.FIND;
      Assert.IsTrue(Attachment.Attachment.HASVALUE,EmptyAttachmentErr);
    END;

    [Test]
    PROCEDURE ContactBracketsOpenContactCard@94();
    VAR
      Contact@1000 : Record 5050;
      ContactCard@1001 : TestPage 5050;
    BEGIN
      // [SCENARIO] Check Contact with brackets in 'No.' can be opened without errors
      Initialize;
      // [GIVEN] Contact with Brackets symbols in 'No.' field
      CreateSimpleContact(Contact,CreateContactNameWithBrackets);
      // [WHEN] Contact Card for Contact with brackets in 'No.' is opened
      ContactCard.OPENEDIT;
      ContactCard.GOTORECORD(Contact);
      // [THEN] Contact Card successfully opened with no Errors
      ContactCard.OK.INVOKE;

      // Tear Down
      Contact.DELETE;
    END;

    [Test]
    PROCEDURE ContactBracketsOpenTodoList@108();
    VAR
      Contact@1000 : Record 5050;
      ContactCard@1001 : TestPage 5050;
      TodoList@1002 : TestPage 5096;
    BEGIN
      // [SCENARIO] Check To-do List page can be opened without errors for Contact with brackets in 'No.'
      Initialize;
      // [GIVEN] Contact with Brackets symbols in 'No.' field
      CreateSimpleContact(Contact,CreateContactNameWithBrackets);
      // [WHEN] To-do List page opened from Contact with Brackets symbols in 'No.' field
      ContactCard.OPENEDIT;
      ContactCard.GOTORECORD(Contact);
      TodoList.TRAP;
      ContactCard."Page To-do List".INVOKE;
      // [THEN] Page To-do List successfully opened
      TodoList.CLOSE;

      // Tear Down
      Contact.DELETE;
    END;

    [Test]
    [HandlerFunctions(CreateTodoModalFormHandler)]
    PROCEDURE ContactBracketsCreateTodo@95();
    VAR
      Contact@1000 : Record 5050;
      ContactCard@1001 : TestPage 5050;
      TodoList@1002 : TestPage 5096;
    BEGIN
      // [SCENARIO] Create To-do for Contact with Brackets in 'No.'
      Initialize;
      // [GIVEN] Contact with Brackets symbols in 'No.' field
      CreateSimpleContact(Contact,CreateContactNameWithBrackets);
      // [WHEN] To-do created using Wizard
      ContactCard.OPENEDIT;
      ContactCard.GOTORECORD(Contact);
      TodoList.TRAP;
      ContactCard."Page To-do List".INVOKE;
      TodoList.Action33.INVOKE;
      // [THEN] To-Do line successfully created for Contact with Brackets in 'No.'
      TodoList.FIRST;
      TodoList."Contact No.".ASSERTEQUALS(Contact."No.");
      TodoList.CLOSE;

      // Tear Down
      Contact.DELETE;
    END;

    [Test]
    [HandlerFunctions(ContactHandler)]
    PROCEDURE InsertContactWithCompanyFilter@97();
    VAR
      Contact@1002 : Record 5050;
      CompanyFilter@1001 : Code[20];
    BEGIN
      // [SCENARIO 375315] New Contact for the Company should be of Type Person linked to the Company
      Initialize;

      // [GIVEN] Filter "X" on field "Company No." of Contact Page
      CompanyFilter := LibraryUtility.GenerateGUID;
      CreateCompanyContact(CompanyFilter);
      Contact.INIT;
      Contact.SETRANGE("Company No.",CompanyFilter);

      // [WHEN] Insert Contact
      LibraryVariableStorage.Enqueue(CompanyFilter); // Enqueue for ContactHandler
      LibraryVariableStorage.Enqueue('Person');
      PAGE.RUN(PAGE::"Contact Card",Contact);

      // [THEN] Contact is created where "Company No." is "X", Type = "Person"
      // Verified in ContactHandler
    END;

    [Test]
    [HandlerFunctions(ContactHandler)]
    PROCEDURE InsertContactWithoutCompanyFilter@107();
    VAR
      Contact@1001 : Record 5050;
    BEGIN
      // [SCENARIO 375315] New Contact should be of Type Company not linked to a Company
      Initialize;

      // [GIVEN] No filters applied on field "Company No." of Contact Page
      Contact.INIT;

      // [WHEN] Insert Contact
      LibraryVariableStorage.Enqueue(''); // Enqueue for ContactHandler
      LibraryVariableStorage.Enqueue('Company');
      PAGE.RUN(PAGE::"Contact Card",Contact);

      // [THEN] Contact is created where "Company No." is blank, Type = "Company"
      // Verified in ContactHandler
    END;

    [Test]
    PROCEDURE ContactBusinessRelationIsCreatedWithoutValidationCheckWhenNonUIRun@100();
    VAR
      Contact@1001 : Record 5050;
      BusinessRelation@1002 : Record 5053;
      ContactBusinessRelation@1003 : Record 5054;
    BEGIN
      // [FEATURE] [Contact Business Relation]
      // [SCENARIO 375531] Contact Business Relation record is created without "Business Relation Code" field validation check in case of non-UI running
      Initialize;

      // [GIVEN] Create new Business Relation Code "X".
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);

      // [GIVEN] Modify MarketingSetup."Bus. Rel. Code for Customers" = "X".
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      // [GIVEN] Create Contact "C"
      LibraryMarketing.CreateContact(Contact);

      // [WHEN] Create Contact Business Relation without UI validation: "Contact No." = "C", "Business Relation Code" = "X"
      LibraryMarketing.CreateContactBusinessRelation(ContactBusinessRelation,Contact."No.",BusinessRelation.Code);

      // [THEN] New Contact Business Relation record is created without "Business Relation Code" field validation check
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");
      Assert.RecordIsNotEmpty(ContactBusinessRelation);
    END;

    [Test]
    PROCEDURE ContactBusinessRelationIsCreatedWithValidationCheckWhenUIRun@101();
    VAR
      Contact@1003 : Record 5050;
      Customer@1005 : Record 18;
      BusinessRelation@1002 : Record 5053;
      ContactBusinessRelation@1001 : Record 5054;
      BusinessRelationContacts@1004 : TestPage 5062;
    BEGIN
      // [FEATURE] [Contact Business Relation]
      // [SCENARIO 375531] Contact Business Relation record is created with "Business Relation Code" field validation check in case of UI running
      Initialize;

      // [GIVEN] Create new Business Relation Code "X".
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);

      // [GIVEN] Modify MarketingSetup."Bus. Rel. Code for Customers" = "X".
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      // [GIVEN] Create Contact "C"
      LibraryMarketing.CreateContact(Contact);

      // [WHEN] Create Contact Business Relation with through UI page: "Contact No." = "C"
      BusinessRelationContacts.OPENEDIT;
      BusinessRelationContacts.FILTER.SETFILTER("Business Relation Code",BusinessRelation.Code);
      BusinessRelationContacts.NEW;
      ASSERTERROR BusinessRelationContacts."Contact No.".SETVALUE(Contact."No.");

      // [THEN] Error occurs: "Business Relation Code" field validation check
      Assert.ExpectedErrorCode('TestValidation');
      Assert.ExpectedError(
        STRSUBSTNO(
          BusRelContactValidationErr,
          ContactBusinessRelation.FIELDCAPTION("Business Relation Code"),
          BusinessRelation.Code,
          Contact.TABLECAPTION,Customer.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PageContactBusinessRelationsShowsDetailsFields@98();
    VAR
      Customer@1005 : Record 18;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1001 : Record 5054;
      ContactBusinessRelations@1000 : TestPage 5061;
    BEGIN
      // [SCENARIO 375706] Check "Contact Business Relations" page 5061 shows "Link to Table" and "No." fields
      Initialize;

      // [GIVEN] Business Relation "X". Set "X" as default Business Relation Code for Customers.
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      // [GIVEN] Customer "A" linked to Contact "B".
      LibrarySales.CreateCustomer(Customer);

      // [WHEN] Open "Contact Business Relations" page for Contact "B".
      FindContactBusinessRelation(
        ContactBusinessRelation,BusinessRelation.Code,ContactBusinessRelation."Link to Table"::Customer,Customer."No.");
      ContactBusinessRelations.OPENVIEW;
      ContactBusinessRelations.GOTORECORD(ContactBusinessRelation);

      // [THEN] Contact Business Relation "B" is shown, where "Business Relation Code" = "X", "Link to Table" = Customer, "No."= "A"
      ContactBusinessRelations."Business Relation Code".ASSERTEQUALS(BusinessRelation.Code);
      ContactBusinessRelations."Link to Table".ASSERTEQUALS(ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelations."No.".ASSERTEQUALS(Customer."No.");
    END;

    [Test]
    PROCEDURE PageBusinessRelationContactsShowsDetailsFields@112();
    VAR
      Customer@1005 : Record 18;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1001 : Record 5054;
      BusinessRelationContacts@1000 : TestPage 5062;
    BEGIN
      // [SCENARIO 375706] Check "Business Relation Contacts" page 5062 shows "Link to Table" and "No." fields
      Initialize;

      // [GIVEN] Business Relation "X". Set "X" as default Business Relation Code for Customers.
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      // [GIVEN] Customer "A" linked to Contact "B".
      LibrarySales.CreateCustomer(Customer);

      // [WHEN] Open "Business Relation Contacts" page for "X" code.
      FindContactBusinessRelation(
        ContactBusinessRelation,BusinessRelation.Code,ContactBusinessRelation."Link to Table"::Customer,Customer."No.");
      BusinessRelationContacts.OPENVIEW;
      BusinessRelationContacts.GOTORECORD(ContactBusinessRelation);

      // [THEN] Business Relation Contact "X" is shown, where "Contact No." = "B", "Link to Table" = Customer, "No."= "A"
      BusinessRelationContacts."Contact No.".ASSERTEQUALS(ContactBusinessRelation."Contact No.");
      BusinessRelationContacts."Link to Table".ASSERTEQUALS(ContactBusinessRelation."Link to Table"::Customer);
      BusinessRelationContacts."No.".ASSERTEQUALS(Customer."No.");
    END;

    [Test]
    PROCEDURE DrillDownOnToDosContactName@339();
    VAR
      Contact@1004 : Record 5050;
      ContactCard@1002 : TestPage 5050;
      ToDoList@1001 : TestPage 5096;
      ToDoCard@1000 : TestPage 5098;
      ContactList@1003 : TestPage 5052;
    BEGIN
      // [FEATURE] [To-Do] [UI]
      // [SCENARIO 379509] DrillDown on To-Do's field "Contact Name" should open Contact List page

      Initialize;

      CreateContactWithToDos(Contact);

      ContactCard.OPENEDIT;
      ContactCard.FILTER.SETFILTER("No.",Contact."No.");
      ToDoList.TRAP;
      ContactCard."Page To-do List".INVOKE;
      ToDoCard.TRAP;
      ToDoList."Page To-do Card".INVOKE;
      ContactList.TRAP;
      ToDoCard."Contact Name".DRILLDOWN;

      ContactList."No.".ASSERTEQUALS(Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,CustomerTempModalFormHandler,MessageHandler)]
    PROCEDURE PredefinedDataInContactAssignsToCustomer@102();
    VAR
      Contact@1005 : Record 5050;
      BusinessRelation@1000 : Record 5053;
      CustomerTemplate@1004 : Record 5105;
    BEGIN
      // [FEATURE] [Customer]
      // [SCENARIO 216960] The predefined data from Contact assigns to Customer when create Customer from Contact

      Initialize;

      // [GIVEN] Business Relation and input it in the field Bus. Rel. Code for Customers of Marketing Setup.
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      // [GIVEN] Customer Template with "Currency Code" = EUR, "Country/Region" = DE, "Territory" = "FOREIGN"
      CreateCustomerTemplate(CustomerTemplate,'');

      // [GIVEN] Contact with "Currency Code" = GBP, "Country/Region" = GB, "Territory" = "LONDON"
      CreateContactWithData(Contact);

      // [WHEN] Create Customer from Contact with selected Customer Template
      Contact.CreateCustomer(Contact.ChooseCustomerTemplate);

      // [THEN] Contact is created with "Currency Code" = GBP, "Country/Region" = GB, "Territory" = "LONDON"
      VerifyCustomerInheritsDataFromContact(Contact);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,CustomerTempModalFormHandler,MessageHandler)]
    PROCEDURE CustomerCreatedFromContactWithNoData@103();
    VAR
      Contact@1003 : Record 5050;
      BusinessRelation@1002 : Record 5053;
      CustomerTemplate@1000 : Record 5105;
    BEGIN
      // [FEATURE] [Customer]
      // [SCENARIO 216960] Customer creates from Contact with no data assigned if no data specified in Contact

      Initialize;

      // [GIVEN] Business Relation and input it in the field Bus. Rel. Code for Customers of Marketing Setup.
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      ChangeBusinessRelationCodeForCustomers(BusinessRelation.Code);

      // [GIVEN] Customer Template with "blank Currency Code", "Country/Region" and "Territory"
      LibrarySales.CreateCustomerTemplate(CustomerTemplate);
      LibraryVariableStorage.Enqueue(CustomerTemplate.Code);

      // [GIVEN] Contact with blank "Currency Code", "Country/Region" and "Territory"
      LibraryMarketing.CreateContact(Contact);

      // [WHEN] Create Customer from Contact with selected Customer Template
      Contact.CreateCustomer(Contact.ChooseCustomerTemplate);

      // [THEN] Contact is created with blank "Currency Code", "Country/Region" and "Territory"
      VerifyCustomerInheritsDataFromContact(Contact);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Marketing Setup");

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ChangeBusinessRelationCodeForCustomers@25(BusRelCodeForCustomers@1002 : Code[10]);
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Bus. Rel. Code for Customers",BusRelCodeForCustomers);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeBusinessRelationCodeForVendors@31(BusRelCodeForVendors@1002 : Code[10]);
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Bus. Rel. Code for Vendors",BusRelCodeForVendors);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeBusinessRelationCodeForBankAccount@33(BusRelCodeForBankAccs@1002 : Code[10]) OriginalBusRelCodeForBankAccs : Code[10];
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      OriginalBusRelCodeForBankAccs := MarketingSetup."Bus. Rel. Code for Bank Accs.";
      MarketingSetup.VALIDATE("Bus. Rel. Code for Bank Accs.",BusRelCodeForBankAccs);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankAccountWithCurrency@54(VAR BankAccount@1000 : Record 270;CurerncyCode@1001 : Code[10]);
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurerncyCode);
      BankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactAsPerson@43(VAR Contact@1000 : Record 5050);
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE(Type,Contact.Type::Person);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSimpleContact@96(VAR Contact@1000 : Record 5050;ContactNo@1001 : Code[20]);
    BEGIN
      Contact.INIT;
      Contact.VALIDATE("No.",ContactNo);
      Contact.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateCompanyContact@113(CompanyNo@1001 : Code[20]);
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      WITH Contact DO BEGIN
        INIT;
        "No." := CompanyNo;
        Type := Type::Company;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateCustomerTemplate@19(VAR CustomerTemplate@1000 : Record 5105;CustomerPriceGroupCode@1002 : Code[10]);
    VAR
      Customer2@1001 : Record 18;
      CountryRegion@1003 : Record 9;
      Currency@1004 : Record 4;
      Territory@1005 : Record 286;
    BEGIN
      LibrarySales.CreateCustomer(Customer2);
      LibrarySales.CreateCustomerTemplate(CustomerTemplate);
      CustomerTemplate.VALIDATE("Customer Price Group",CustomerPriceGroupCode);
      CustomerTemplate.VALIDATE("Gen. Bus. Posting Group",Customer2."Gen. Bus. Posting Group");
      CustomerTemplate.VALIDATE("VAT Bus. Posting Group",Customer2."VAT Bus. Posting Group");
      CustomerTemplate.VALIDATE("Customer Posting Group",Customer2."Customer Posting Group");
      CustomerTemplate.VALIDATE("Allow Line Disc.",TRUE);
      CustomerTemplate.VALIDATE("Payment Terms Code",Customer2."Payment Terms Code");
      CustomerTemplate.VALIDATE("Payment Method Code",Customer2."Payment Method Code");
      CustomerTemplate.VALIDATE("Shipment Method Code",Customer2."Shipment Method Code");
      LibraryERM.CreateCountryRegion(CountryRegion);
      CustomerTemplate.VALIDATE("Country/Region Code",CountryRegion.Code);
      LibraryERM.CreateCurrency(Currency);
      CustomerTemplate.VALIDATE("Currency Code",Currency.Code);
      Territory.FINDFIRST;
      CustomerTemplate.VALIDATE("Territory Code",Territory.Code);
      CustomerTemplate.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(CustomerTemplate.Code);
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrency@62(VAR Customer@1000 : Record 18;CurerncyCode@1001 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurerncyCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithCurrency@53(VAR Vendor@1000 : Record 23;CurerncyCode@1001 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurerncyCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSegmentLine@120(VAR SegmentLine@1000 : Record 5077;AttachmentNo@1001 : Integer);
    BEGIN
      WITH SegmentLine DO BEGIN
        INIT;
        "Segment No." := LibraryUtility.GenerateRandomCode(FIELDNO("Segment No."),DATABASE::"Segment Line");
        "Line No." := 10000;
        "Attachment No." := AttachmentNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateInteractLogEntry@93(SegmentLineNo@1002 : Integer);
    VAR
      InteractLogEntry@1000 : Record 5065;
    BEGIN
      WITH InteractLogEntry DO BEGIN
        INIT;
        "Entry No." := SegmentLineNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateWriteAttachment@132(VAR Attachment@1000 : Record 5062);
    VAR
      LastNo@1001 : Integer;
    BEGIN
      IF Attachment.FINDLAST THEN
        LastNo := Attachment."No.";
      Attachment.INIT;
      Attachment."No." := LastNo + 1;
      Attachment.Attachment.IMPORT(CreateWriteTempFile);
      Attachment.INSERT;
    END;

    LOCAL PROCEDURE CreateWriteTempFile@111() FileName : Text;
    VAR
      FileMgt@1001 : Codeunit 419;
      TempFile@1000 : File;
    BEGIN
      FileName := FileMgt.ServerTempFileName(ExtensionTxt);
      WITH TempFile DO BEGIN
        TEXTMODE(TRUE);
        WRITEMODE(TRUE);
        IF NOT EXISTS(FileName) THEN
          CREATE(FileName)
        ELSE
          OPEN(FileName);
        WRITE(NAME); // write FileName into file
        CLOSE;
      END;
    END;

    LOCAL PROCEDURE CreateContactWithData@109(VAR Contact@1000 : Record 5050);
    VAR
      CountryRegion@1003 : Record 9;
      Currency@1002 : Record 4;
      Territory@1001 : Record 286;
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      LibraryERM.CreateCountryRegion(CountryRegion);
      Contact.VALIDATE("Country/Region Code",CountryRegion.Code);
      LibraryERM.CreateCurrency(Currency);
      Contact.VALIDATE("Currency Code",Currency.Code);
      LibraryERM.CreateTerritory(Territory);
      Contact.VALIDATE("Territory Code",Territory.Code);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactWithToDos@261(VAR Contact@1000 : Record 5050);
    VAR
      ToDo@1003 : ARRAY [2] OF Record 5080;
    BEGIN
      LibraryMarketing.CreateCompanyContact(Contact);
      CreateAndUpdateToDo(ToDo[1],Contact);
      CreateAndUpdateToDo(ToDo[2],Contact);
      ToDo[2].VALIDATE("Organizer To-do No.",ToDo[1]."Organizer To-do No.");
      ToDo[2].MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateToDo@234(VAR ToDo@1000 : Record 5080;Contact@1001 : Record 5050);
    BEGIN
      LibraryMarketing.CreateToDo(ToDo);
      ToDo.VALIDATE(Date,WORKDATE);
      ToDo.VALIDATE("Contact No.",Contact."No.");
      ToDo.VALIDATE("Salesperson Code",Contact."Salesperson Code");
      ToDo.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindContactBusinessRelation@64(VAR ContactBusinessRelation@1000 : Record 5054;BusinessRelationCode@1001 : Code[20];LinkToTable@1003 : Option;No@1002 : Code[20]);
    BEGIN
      ContactBusinessRelation.SETRANGE("Business Relation Code",BusinessRelationCode);
      ContactBusinessRelation.SETRANGE("Link to Table",LinkToTable);
      ContactBusinessRelation.SETFILTER("No.",No);
      ContactBusinessRelation.FINDFIRST;
    END;

    LOCAL PROCEDURE GetCustFromContact@118(ContactNo@1000 : Code[20]) : Code[20];
    VAR
      ContactBusinessRelation@1001 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("Contact No.",ContactNo);
      ContactBusinessRelation.FINDFIRST;
      EXIT(ContactBusinessRelation."No.");
    END;

    LOCAL PROCEDURE NextStepOpportunityWizard@52(VAR TempOpportunity@1000 : TEMPORARY Record 5092);
    BEGIN
      TempOpportunity.MODIFY;
      TempOpportunity.CheckStatus;
      TempOpportunity.PerformNextWizardStatus;
    END;

    LOCAL PROCEDURE NextStepMakePhoneCallWizard@57(VAR TempSegmentLine@1000 : TEMPORARY Record 5077);
    BEGIN
      TempSegmentLine.MODIFY;
      TempSegmentLine.CheckStatus2;
      TempSegmentLine.PerformNextWizardStatus2;
    END;

    LOCAL PROCEDURE RunCompanyDetails@16(Contact@1000 : Record 5050);
    VAR
      CompanyDetails@1001 : Page 5054;
    BEGIN
      CLEAR(CompanyDetails);
      Contact.SETRANGE("No.",Contact."No.");
      CompanyDetails.SETTABLEVIEW(Contact);
      CompanyDetails.SETRECORD(Contact);
      CompanyDetails.RUNMODAL;
    END;

    LOCAL PROCEDURE RunNameDetails@15(Contact@1000 : Record 5050);
    VAR
      NameDetails@1001 : Page 5055;
    BEGIN
      CLEAR(NameDetails);
      Contact.SETRANGE("No.",Contact."No.");
      NameDetails.SETTABLEVIEW(Contact);
      NameDetails.SETRECORD(Contact);
      NameDetails.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateContactCompanyDetails@28(VAR Contact@1003 : Record 5050;ContactPostCode@1002 : Code[20];ContactCountryRegionCode@1001 : Code[10];ContactPhoneNumber@1000 : Text[30]);
    BEGIN
      Contact.VALIDATE("Post Code",ContactPostCode);
      Contact.VALIDATE(Name,ContactPostCode);  // Input the same value as value is not important.
      Contact.VALIDATE(Address,ContactPostCode);  // Input the same value as value is not important.
      Contact.VALIDATE("Country/Region Code",ContactCountryRegionCode);
      Contact.VALIDATE("Phone No.",ContactPhoneNumber);
      Contact.VALIDATE("Fax No.",ContactPhoneNumber);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContactNameDetails@26(VAR Contact@1002 : Record 5050;ContactSalutationCode@1001 : Code[10];ContactLanguageCode@1000 : Code[10]);
    BEGIN
      Contact.VALIDATE("Salutation Code",ContactSalutationCode);
      Contact.VALIDATE(Name,ContactSalutationCode);  // Input the same value as value is not important.
      Contact.VALIDATE("Job Title",ContactSalutationCode);  // Input the same value as value is not important.
      Contact.VALIDATE(Initials,COPYSTR(ContactSalutationCode,1,2));  // Input first two characters of Salutation Code as Initials.
      Contact.VALIDATE("Language Code",ContactLanguageCode);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateNameOnContactCard@80(No@1000 : Code[20];Name@1001 : Text[50]);
    VAR
      ContactCard@1002 : TestPage 5050;
    BEGIN
      ContactCard.OPENEDIT;
      ContactCard.FILTER.SETFILTER("No.",No);
      ContactCard.Name.SETVALUE(Name);
      ContactCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyContactCompanyDetails@22(VAR Contact@1000 : Record 5050;ContactPostCode@1001 : Code[20];ContactCountryRegionCode@1002 : Code[10];ContactPhoneNumber@1003 : Text[30]);
    BEGIN
      Contact.TESTFIELD("Post Code",ContactPostCode);
      Contact.TESTFIELD(Name,ContactPostCode);
      Contact.TESTFIELD(Address,ContactPostCode);
      Contact.TESTFIELD("Country/Region Code",ContactCountryRegionCode);
      Contact.TESTFIELD("Phone No.",ContactPhoneNumber);
      Contact.TESTFIELD("Fax No.",ContactPhoneNumber);
    END;

    LOCAL PROCEDURE VerifyContactNameDetails@23(VAR Contact@1000 : Record 5050;ContactSalutationCode@1001 : Code[10];ContactLanguageCode@1002 : Code[10]);
    BEGIN
      Contact.TESTFIELD("Salutation Code",ContactSalutationCode);
      Contact.TESTFIELD(Name,ContactSalutationCode);
      Contact.TESTFIELD("Job Title",ContactSalutationCode);
      Contact.TESTFIELD(Initials,COPYSTR(ContactSalutationCode,1,2));  // Since first two characters were input as Initials.
      Contact.TESTFIELD("Language Code",ContactLanguageCode);
    END;

    LOCAL PROCEDURE VerifyCustomerCreatedByContact@21(CustomerTemplate@1004 : Record 5105;ContactNo@1001 : Code[20];CustomerPriceGroupCode@1003 : Code[10]);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.GET(GetCustFromContact(ContactNo));

      Customer.TESTFIELD("Customer Price Group",CustomerPriceGroupCode);
      Customer.TESTFIELD("Gen. Bus. Posting Group",CustomerTemplate."Gen. Bus. Posting Group");
      Customer.TESTFIELD("VAT Bus. Posting Group",CustomerTemplate."VAT Bus. Posting Group");
      Customer.TESTFIELD("Customer Posting Group",CustomerTemplate."Customer Posting Group");
      Customer.TESTFIELD("Allow Line Disc.",CustomerTemplate."Allow Line Disc.");
      Customer.TESTFIELD("Payment Method Code",CustomerTemplate."Payment Method Code");
      Customer.TESTFIELD("Payment Terms Code",CustomerTemplate."Payment Terms Code");
      Customer.TESTFIELD("Shipment Method Code",CustomerTemplate."Shipment Method Code");
      Customer.TESTFIELD("Invoice Disc. Code");
      Customer.TESTFIELD("Territory Code",CustomerTemplate."Territory Code");
      Customer.TESTFIELD("Country/Region Code",CustomerTemplate."Country/Region Code");
      Customer.TESTFIELD("Currency Code",CustomerTemplate."Currency Code");
    END;

    LOCAL PROCEDURE VerifyCustomerInheritsDataFromContact@115(Contact@1001 : Record 5050);
    VAR
      Customer@1000 : Record 18;
    BEGIN
      Customer.GET(GetCustFromContact(Contact."No."));
      Customer.TESTFIELD("Currency Code",Contact."Currency Code");
      Customer.TESTFIELD("Country/Region Code",Contact."Country/Region Code");
      Customer.TESTFIELD("Territory Code",Contact."Territory Code");
    END;

    LOCAL PROCEDURE VerifyContactErrorMessage@32(FieldCaptionOfMarketingField@1000 : Text[30];TableCaptionOfTable@1001 : Text[30]);
    BEGIN
      Assert.ExpectedError(STRSUBSTNO(RelationErrorServiceTier,FieldCaptionOfMarketingField,TableCaptionOfTable));
    END;

    LOCAL PROCEDURE CreateContactNameWithBrackets@105() Code : Code[20];
    BEGIN
      Code := LibraryUtility.GenerateGUID;
      Code[STRLEN(Code) + 1] := ')';
      Code[STRLEN(Code) DIV 2] := '(';
      EXIT(Code);
    END;

    [ModalPageHandler]
    PROCEDURE NameDetailsModalFormHandler@13(VAR NameDetails@1000 : Page 5055;VAR Reply@1001 : Action);
    VAR
      Contact@1002 : Record 5050;
    BEGIN
      Contact.INIT;  // Required to initialize the variable.
      NameDetails.GETRECORD(Contact);
      UpdateContactNameDetails(Contact,
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Salutation Code")),
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Language Code")));
      Reply := ACTION::OK;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyNameModalFormHandler@30(VAR NameDetails@1000 : Page 5055;VAR Reply@1001 : Action);
    VAR
      Contact@1002 : Record 5050;
    BEGIN
      Contact.INIT;  // Required to initialize the variable.
      NameDetails.GETRECORD(Contact);
      VerifyContactNameDetails(Contact,
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Salutation Code")),
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Language Code")));
      Reply := ACTION::OK;
    END;

    LOCAL PROCEDURE VerifyOpportunityEntry@99(OppNo@1000 : Code[20];ExpectedValue@1002 : Decimal);
    VAR
      OpportunityEntry@1001 : Record 5093;
    BEGIN
      WITH OpportunityEntry DO BEGIN
        SETRANGE("Opportunity No.",OppNo);
        SETRANGE(Active,TRUE);
        FINDFIRST;
        Assert.AreEqual(
          ExpectedValue,"Calcd. Current Value (LCY)",
          STRSUBSTNO(WrongCalcdCurValueErr,FIELDCAPTION("Calcd. Current Value (LCY)")));
      END;
    END;

    [ModalPageHandler]
    PROCEDURE CompanyDetailsModalFormHandler@27(VAR CompanyDetails@1000 : Page 5054;VAR Reply@1001 : Action);
    VAR
      Contact@1002 : Record 5050;
    BEGIN
      Contact.INIT;  // Required to initialize the variable.
      CompanyDetails.GETRECORD(Contact);
      UpdateContactCompanyDetails(
        Contact,
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Post Code")),
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Country/Region Code")),
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Phone No.")));
      Reply := ACTION::OK;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyCompanyModalFormHandler@24(VAR CompanyDetails@1000 : Page 5054;VAR Reply@1001 : Action);
    VAR
      Contact@1002 : Record 5050;
    BEGIN
      Contact.INIT;  // Required to initialize the variable.
      CompanyDetails.GETRECORD(Contact);
      VerifyContactCompanyDetails(
        Contact,
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Post Code")),
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Country/Region Code")),
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(Contact."Phone No.")));
      Reply := ACTION::OK;
    END;

    [ModalPageHandler]
    PROCEDURE CustomerTempModalFormHandler@18(VAR CustomerTemplateList@1000 : Page 5156;VAR Reply@1001 : Action);
    VAR
      CustomerTemplate@1002 : Record 5105;
    BEGIN
      CustomerTemplate.INIT;  // Required to initialize the variable.
      CustomerTemplate.GET(LibraryVariableStorage.DequeueText);
      CustomerTemplateList.SETRECORD(CustomerTemplate);
      Reply := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE CreateInteractModalFormHandler@48(VAR CreateInteraction@1000 : Page 5077;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
      TempAttachment@1004 : TEMPORARY Record 5062;
      InteractionTemplateCode@1003 : Code[10];
    BEGIN
      TempSegmentLine.INIT;  // Required to initialize the variable.
      CreateInteraction.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;  // Insert temporary Segment Line to modify fields later.
      InteractionTemplateCode :=
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(TempSegmentLine."Interaction Template Code"));
      TempSegmentLine.VALIDATE("Interaction Template Code",InteractionTemplateCode);
      TempSegmentLine.VALIDATE(Description,InteractionTemplateCode);
      NextStepMakePhoneCallWizard(TempSegmentLine);
      NextStepMakePhoneCallWizard(TempSegmentLine);

      TempSegmentLine."Cost (LCY)" := LibraryVariableStorage.DequeueDecimal;
      TempSegmentLine."Duration (Min.)" := LibraryVariableStorage.DequeueDecimal;
      TempSegmentLine.MODIFY(TRUE);
      TempSegmentLine.FinishWizard(TRUE,TempAttachment);
    END;

    [ModalPageHandler]
    PROCEDURE CreateOpportModalFormHandler@45(VAR CreateOpportunity@1000 : Page 5126;VAR Reply@1001 : Action);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
      SalesCycleCode@1003 : Code[10];
    BEGIN
      TempOpportunity.INIT;  // Required to initialize the variable.
      CreateOpportunity.GETRECORD(TempOpportunity);
      TempOpportunity.INSERT;  // Insert temporary Opportunity to modify fields later.
      SalesCycleCode :=
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(TempOpportunity."Sales Cycle Code"));
      TempOpportunity.VALIDATE(Description,SalesCycleCode);
      NextStepOpportunityWizard(TempOpportunity);

      TempOpportunity.VALIDATE("Sales Cycle Code",SalesCycleCode);
      NextStepOpportunityWizard(TempOpportunity);
      NextStepOpportunityWizard(TempOpportunity);

      TempOpportunity.VALIDATE("Activate First Stage",TRUE);
      TempOpportunity.VALIDATE("Wizard Estimated Value (LCY)",LibraryVariableStorage.DequeueDecimal);
      TempOpportunity.VALIDATE("Wizard Chances of Success %",LibraryVariableStorage.DequeueDecimal);
      TempOpportunity.MODIFY;
      TempOpportunity.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE CloseOpportModalFormHandler@49(VAR CloseOpportunity@1000 : Page 5128;VAR Reply@1001 : Action);
    VAR
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
    BEGIN
      TempOpportunityEntry.INIT;  // Required to initialize the variable.
      CloseOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.VALIDATE("Action Taken",TempOpportunityEntry."Action Taken"::Won);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus;
      TempOpportunityEntry.PerformNextWizardStatus;

      TempOpportunityEntry.VALIDATE("Close Opportunity Code",
        COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(TempOpportunityEntry."Close Opportunity Code")));
      TempOpportunityEntry.VALIDATE("Calcd. Current Value (LCY)",LibraryVariableStorage.DequeueDecimal);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE CreateTodoModalFormHandler@117(VAR CreateToDo@1001 : TestPage 5097);
    VAR
      ToDo@1000 : Record 5080;
      SalespersonPurchaser@1002 : Record 13;
    BEGIN
      CreateToDo.Type.SETVALUE(ToDo.Type::"Phone Call");
      CreateToDo.Description.SETVALUE(LibraryUtility.GenerateGUID);
      CreateToDo.Date.SETVALUE(WORKDATE);
      CreateToDo.NextStep.INVOKE;
      SalespersonPurchaser.FINDFIRST;
      CreateToDo."Salesperson Code".SETVALUE(SalespersonPurchaser.Code);
      CreateToDo.Finish.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@9(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@42(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormMarketingSetup@63(VAR MarketingSetup@1003 : Page 5094;VAR Response@1000 : Action);
    VAR
      MarketingSetup2@1001 : Record 5079;
    BEGIN
      MarketingSetup.GETRECORD(MarketingSetup2);
      MarketingSetup2."Attachment Storage Type" := MarketingSetup2."Attachment Storage Type"::"Disk File";
      MarketingSetup.SETRECORD(MarketingSetup2);
      MarketingSetup.SetAttachmentStorageType;

      MarketingSetup2.GET;
      MarketingSetup2."Attachment Storage Location" := TEMPORARYPATH;
      MarketingSetup.SETRECORD(MarketingSetup2);
      MarketingSetup.SetAttachmentStorageLocation;
    END;

    [ModalPageHandler]
    PROCEDURE BankAccountLinkPageHandler@65(VAR BankAccountLink@1000 : TestPage 5137);
    VAR
      CurrMasterFields@1001 : 'Contact,Bank';
    BEGIN
      BankAccountLink."No.".SETVALUE(LibraryVariableStorage.DequeueText);
      BankAccountLink.CurrMasterFields.SETVALUE(CurrMasterFields::Bank);  // Taking Value from Base Page's Option.
      BankAccountLink.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CustomerLinkPageHandler@74(VAR CustomerLink@1000 : TestPage 5135);
    BEGIN
      CustomerLink."No.".SETVALUE(LibraryVariableStorage.DequeueText);
      CustomerLink.CurrMasterFields.SETVALUE(LibraryVariableStorage.DequeueInteger);  // Taking Value from Base Page's Option from test case.
      CustomerLink.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VendorLinkPageHandler@91(VAR VendorLink@1000 : TestPage 5136);
    VAR
      CurrMasterFields@1001 : 'Contact,Vendor';
    BEGIN
      VendorLink."No.".SETVALUE(LibraryVariableStorage.DequeueText);
      VendorLink.CurrMasterFields.SETVALUE(CurrMasterFields::Vendor);  // Taking Value from Base Page's Option.
      VendorLink.OK.INVOKE;
    END;

    LOCAL PROCEDURE ExecuteUIHandler@9192();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN;
    END;

    [PageHandler]
    PROCEDURE ContactHandler@195(VAR Contact@1000 : TestPage 5050);
    BEGIN
      Contact.NEW;
      Contact."Company No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      Contact.Type.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    BEGIN
    {
      // [FEATURE] [Contact] [Marketing]
      Unsupported version tags:
      NA: Unable to Execute

      Test for Marketing Contacts:
        1.  Test creation of Contact Companies and assignment of alternative addresses, Industry Groups, Business Relations, Web Sources,
            entering comments for these.
        2.  Test creation of an independent Contact of the Person type and linking it with the existing Contact of the Company type.
        3.  Test linking Contacts to existing Customers, Vendors, and/or Bank Accounts.
        4.  Test creation of a Contact as a Customer using the Customer Template from Demodata.
        5.  Test creation of Contacts from Vendors using the Create Contacts from Vendors report.
        6.  Test the statistics information on the Contact card.
        7.  Test working with the Name Details and Company Details forms.
        8.  Test Relocation of Attachment.
        9.  Test creation of a Contact from Customer With Currency.
        10. Test creation of a Contact from Vendor With Currency.
        11. Test creation of a Contact from Bank Account With Currency.
        12. Test Contact Name has not been changed after linking Customer to a Contact as Contact.
        13. Test Contact Name has changed to Customer Name after linking Customer to a Contact as Customer.
        14. Test Contact Name has changed to Vendor Name after linking Vendor to a Contact as Vendor.
        15. Test Contact Name has changed to Bank Account Name after linking Bank Account to a Contact as Bank.
        16. Test Correct Contact No and Name appears on Contact List Page after linking Contact to Customer.
        17. Test Correct Contact No and Name appears on Contact List Page after linking Contact to Vendor.
        18. Test Correct Contact No and Name appears on Contact List Page after linking Contact to Bank Account.
        19. Test that Contact Name gets updated after updating Customer Name for a Customer linked with Contact.
        20. Test that Contact Name gets updated after updating Vendor Name for a Vendor linked with Contact.
        21. Test that Contact Name gets updated after updating Bank Account Name for a Bank Account linked with Contact.
        22. Test Customer Name updated after linking Contact to Customer and updating Contact Name on Contact Card.
        23. Test Vendor Name updated after linking Contact to Vendor and updating Contact Name on Contact Card.
        24. Test Bank Account Name updated after linking Contact to Bank Account and updating Contact Name on Contact Card.
        25. Test Deletion of Contact.
        26. Test that Customer still exists after deleting Contact linked with Customer.
        27. Test that Vendor still exists after deleting Contact linked with Vendor.
        28. Test that Bank Account still exists after deleting Contact linked with Bank Account.
        29. Test that new Contact exists after deleting Contact and then its linked Customer.
        30. Test that new Contact exists after deleting Contact and then its linked Vendor.
        31. Test that new Contact exists after deleting Contact and then its linked Bank Account.
        32. Test Error Message while trying to create a new Customer Link for Contact that is already having Customer Link.
        33. Test Error Message while trying to create a new Vendor Link for Contact that is already having Vendor Link.
        34. Test Error Message while trying to create a new Bank Account Link for Contact that is already having Bank Account Link.
        35. Test modification of existing Interaction's Attachment
        36. Test to check Contact Page can be opened for Contact with brackets in 'No.'
        37. Test to check To-do List Page can be opened for Contact with brackets in 'No.'
        38. Test to check To-do can be created using wizard for Contact with brackets in 'No.'

      TFS_TS_ID = 21740
      Cover Test cases:
        TC0054 TFS_TC_ID=12016 and 31817
        TC0055 TFS_TC_ID=12017 and 31818
        TC0058 TFS_TC_ID=12020 and 31821
        TC0059 TFS_TC_ID=12021 and 31822
        TC0060 TFS_TC_ID=12022 and 31823
        TC0061 TFS_TC_ID=12023 and 31824
        TC0062 TFS_TC_ID=12024 and 31825

      TFS_TS_ID = 160766
      Cover Test cases:
        TFS_TC_ID=129047
        TFS_TC_ID=129058
        TFS_TC_ID=129059
        TFS_TC_ID=138400

      TFS_TS_ID = 257465
      Covers Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                    TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      LinkContactWithCustomerAsContact, LinkContactWithCustomer, LinkContactWithVendor, LinkContactWithBankAccount
      CustomerLinkedContact, VendorLinkedContact, BankAccountLinkedContact
      ContactWithUpdatedCustomer, ContactWithUpdatedVendor, ContactWithUpdatedBankAccount                                   128015
      UpdateContactLinkedToCustomer, UpdateContactLinkedToVendor, UpdateContactLinkedToBankAccount
      ContactDeletion, DeleteContactLinkedToCustomer, DeleteContactLinkedToVendor, DeleteContactLinkedToBankAccount
      DeleteCustomerLinkedToContact, DeleteVendorLinkedToContact,DeleteBankAccountLinkedToContact

      Covers Test cases: TFS_TS_ID = 274950
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      --------------------------------------------------------------------------------------------------
      ContactLinkErrorForCustomer, ContactLinkErrorForVendor, ContactLinkErrorForBank         261071
      ContactBusinessRelationDescription,ContactIndustryGroupDescription,                     61039
      ContactJobResponsibilityDescription,ContactWebSourceDescription

      ModifyAttachmentOnContactInteraction                                                    89498
    }
    END.
  }
}

