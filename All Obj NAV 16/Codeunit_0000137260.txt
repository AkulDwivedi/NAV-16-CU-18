OBJECT Codeunit 137260 SCM Inventory Item Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1007 : Codeunit 130000;
      LibraryCosting@1011 : Codeunit 132200;
      LibraryERM@1009 : Codeunit 131300;
      LibraryInventory@1013 : Codeunit 132201;
      LibraryItemTracking@1037 : Codeunit 130502;
      LibraryManufacturing@1029 : Codeunit 132202;
      LibraryPlanning@1031 : Codeunit 132203;
      LibraryPurchase@1002 : Codeunit 130512;
      LibrarySales@1018 : Codeunit 130509;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryVariableStorage@1014 : Codeunit 131004;
      LibraryWarehouse@1005 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      RegisterJournalLine@1006 : TextConst 'ENU=Do you want to register the journal lines?';
      RegisterWhseMessage@1008 : TextConst 'ENU=The journal lines were successfully registered.You are now';
      AvailabilityWarining@1017 : TextConst 'ENU=There are availability warnings on one or more lines.';
      ITConfirmMessage@1016 : TextConst 'ENU=Item tracking is defined for item';
      DeletedSalesLineError@1015 : TextConst 'ENU=The Sales Line does not exist.';
      DeletionMessage@1027 : TextConst 'ENU=Do you want to delete it anyway?';
      DeletedPurchaseLineError@1024 : TextConst 'ENU=The Purchase Line does not exist.';
      DeleteSalesLineWhseShptError@1022 : TextConst 'ENU=The Sales Line cannot be deleted when a related Warehouse Shipment Line exists.';
      PurchaseHeaderExistError@1026 : TextConst 'ENU=The Purchase Header does not exist.';
      ReservEntryError@1012 : TextConst 'ENU=There is no Reservation Entry within the filter.';
      RequisitionLineError@1028 : TextConst 'ENU=There is no Requisition Line within the filter.';
      SerialNoError@1025 : TextConst '@@@=%1 - Item No.;ENU=You must assign a serial number for item %1.';
      VariantMessage@1010 : TextConst 'ENU=Variant  cannot be fully applied.';
      CancelReservMessage@1020 : TextConst 'ENU=Do you want to cancel all reservations in the';
      TrackingPolicyMessage@1003 : TextConst 'ENU=The change will not affect existing entries.';
      WhseShptError@1023 : TextConst 'ENU=There is no Warehouse Shipment Line within the filter.';
      TrackingOption@1032 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot,AssignLotNos,SetQtyToInvoice,AssignManualSN';
      WhseShpmtWasNotPostedErr@1033 : TextConst 'ENU=Warehouse Shipment cannot be posted.';
      ProdOrderCreatedMsg@1034 : TextConst 'ENU=Released Prod. Order';
      PostJournalQst@1035 : TextConst 'ENU=Do you want to post the journal lines?';
      JournalPostedMsg@1036 : TextConst 'ENU=The journal lines were successfully posted.';
      CouldNotRegisterWhseActivityErr@1021 : TextConst 'ENU=Could not register Warehouse Activity.';
      QtyHandledMustBeZeroErr@1019 : TextConst 'ENU=Quantity Handled (Base) must be equal to ''0''';

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,RegisterWhseMessageHandler,ConfirmHandler)]
    PROCEDURE ItemJournalWithItemTracking@3();
    VAR
      Bin@1008 : Record 7354;
      Item@1000 : Record 27;
      ItemJournalBatch@1011 : Record 233;
      WarehouseJournalLine@1003 : Record 7311;
      WarehouseEmployee@1002 : Record 7301;
      ExpirationDate@1001 : Date;
    BEGIN
      // Verify Expiration Date on Item Tracking Line on Item Journal.

      // Setup: Create Item with Lot Specific Item Tracking and create Location with Bin. Use Random value to set Expiration Date later than Workdate.
      Initialize;
      ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);  // Assign in global variable.
      LibraryVariableStorage.Enqueue(ExpirationDate);
      CreateItem(Item,CreateItemTrackingCode(TRUE,TRUE,TRUE,FALSE));
      CreateWhiteLocation(Bin,Item);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Bin."Location Code",TRUE);

      // Create Whse. Item Journal with new Bin and assign Item Tracking with Expiration Date.
      LibraryWarehouse.CreateBin(Bin,Bin."Location Code",LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.");
      WarehouseJournalLine.OpenItemTrackingLines;
      UpdateExpirationDateOnWhseItemTrackingLine(Bin."Location Code",Item."No.");
      LibraryVariableStorage.Enqueue(RegisterJournalLine);  // Enqueue value for ConfirmHandler.

      // Register Warehouse Item Journal.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",FALSE);  // Use False for Use Batch.

      // Select Item Journal Batch.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);

      // Exercise: Calculate Whse. Adjustment.
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryVariableStorage.Enqueue(ExpirationDate);

      // Verify: Verify Item Tracking Lines for Expiration Date.
      VerifyExpirationDateForItemTracking(Bin."Location Code",Item."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LotTrackingOnSalesOrderWithBin@6();
    VAR
      Item@1003 : Record 27;
      Bin@1002 : Record 7354;
      Bin2@1004 : Record 7354;
      TrackingOption@1005 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
      Quantity@1000 : Decimal;
      LotNo@1001 : Code[10];
    BEGIN
      // Verify available Lot No. and Bin Content on Item Tracking Line for Sales Order with Bin.

      // Setup: Create Location with Bins. Use Random values for Quantity.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Using Random for Quantity.
      LotNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Item.FIELDNO("Lot Nos."),DATABASE::Item),1,
          LibraryUtility.GetFieldLength(DATABASE::Item,Item.FIELDNO("Lot Nos.")));
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::VerifyLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(LotNo);
      CreateSilverLocation(Bin);
      LibraryWarehouse.CreateBin(Bin2,Bin."Location Code",LibraryUtility.GenerateGUID,'','');  // Use blank values for Unit Of Measure Code and Zone Code.
      CreateAndVerifyTrackingLinesForSales(Bin."Location Code",Bin.Code,Bin2.Code,Bin.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LotTrackingOnSalesOrderWithoutBin@9();
    VAR
      Bin@1002 : Record 7354;
      Item@1003 : Record 27;
      Quantity@1000 : Decimal;
      TrackingOption@1004 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
      LotNo@1001 : Code[10];
    BEGIN
      // Verify available Lot No. and Bin Content on Item Tracking Line for Sales Order without Bin.

      // Setup: Create Location with Bin. Use Random values for Quantity.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Assign in global variable. Multiply by 2 to avoide decimal values.
      LotNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Item.FIELDNO("Lot Nos."),DATABASE::Item),1,
          LibraryUtility.GetFieldLength(DATABASE::Item,Item.FIELDNO("Lot Nos.")));
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::VerifyLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(LotNo);
      CreateSilverLocation(Bin);
      CreateAndVerifyTrackingLinesForSales(Bin."Location Code",Bin.Code,Bin.Code,'');  // Use blank value for Bin Code for Sales.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE GetBinContentUsingTransferOrder@14();
    VAR
      Bin@1002 : Record 7354;
      Location@1004 : Record 14;
      TransferHeader@1003 : Record 5740;
      ItemNo@1000 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      // Verify Get Bin Content on Transfer Order after posting Purchase Order.

      // Setup: Create Item with Serial Specific Item Tracking and create Location with Bin, Create and Post Purchase Order, Create Transfer Order.
      Initialize;
      ItemNo := CreateSerialTrackedItem;
      CreateSilverLocation(Bin);
      LibraryWarehouse.CreateLocation(Location);
      Quantity := CreateAndPostPurchaseOrderWithBin(ItemNo,Bin.Code,Bin."Location Code",FALSE);  // Use False for Invoice.
      LibraryWarehouse.CreateTransferHeader(TransferHeader,Bin."Location Code",Location.Code,CreateTransitLocation);

      // Exercise: Get Bin Content on Transfer Order.
      LibraryWarehouse.GetBinContentTransferOrder(TransferHeader,Bin."Location Code",ItemNo,Bin.Code);

      // Verify: Verify Quantity after Get Bin Content on Transfer Order.
      VerifyQuantityOnTransferLine(TransferHeader."No.",ItemNo,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE RevaluationJournalWithSerialNo@13();
    VAR
      Bin@1001 : Record 7354;
      ItemJournalLine@1004 : Record 83;
      ItemNo@1000 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // Verify Revaluation Journal after posting Purchase Order with Item Tracking.

      // Setup: Create Item with Serial Specific Item Tracking and create Location with Bin. Create and Post Purchase Order.
      Initialize;
      ItemNo := CreateSerialTrackedItem;
      CreateSilverLocation(Bin);
      Quantity := CreateAndPostPurchaseOrderWithBin(ItemNo,Bin.Code,Bin."Location Code",TRUE);  // Use True for Invoice.

      // Exercise: Create Item Journal Line for Revaluation and Calculate Inventory value.
      CreateItemJournalForRevaluation(ItemJournalLine,ItemNo);

      // Verify: Verify Quantity on Item Journal Line.
      FindItemJournalLine(ItemJournalLine,ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      ItemJournalLine.TESTFIELD(Quantity,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE MessageWithDeleteSalesLineIT@30();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify Item Tracking Message using Sales Line, verification done in ConfirmHandler.

      // Setup: Create Item with Item Tracking Code, create Sales Order and assign Item Tracking.
      Initialize;

      // Exercise:
      DeleteSalesLineIT(SalesLine);

      // Verify: Verify Item Tracking Message using Sales Line, verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ErrorForDeletedSalesLine@142();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify error for Sales Line deletion.

      // Setup: Create Item with Item Tracking Code, create Sales Order and assign Item Tracking and delete Item Tracking Lines.
      Initialize;
      DeleteSalesLineIT(SalesLine);
      SalesLine.DELETE(TRUE);

      // Exercise: Get Sales Line.
      ASSERTERROR SalesLine.GET(SalesLine."Document Type"::Order,SalesLine."Document No.",SalesLine."Line No.");

      // Verify: Verify error for Sales Line deletion.
      Assert.ExpectedError(DeletedSalesLineError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ReservEntryErrorForDeletedSalesLine@158();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify error for deleted Reservation Entry.

      // Setup: Create Item with Item Tracking Code, create Sales Order and assign Item Tracking and delete Item Tracking Lines and Sales Line.
      Initialize;
      DeleteSalesLineIT(SalesLine);
      SalesLine.DELETE(TRUE);

      // Exercise: Find Reservation Entry for Sales Line.
      ASSERTERROR FindReservEntry(SalesLine."Document No.");

      // Verify: Verify error for deleted Reservation Entry.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerForReservation)]
    PROCEDURE ConfirmErrorForDeletedSalesLine@28();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify error message while using False on Confirmation message.

      // Setup: Create Item with Item Tracking Code, create Sales Order and assign Item Tracking.
      Initialize;

      // Exercise:
      DeleteSalesLineITWithConfirmFalse(SalesLine);

      // Verify: Verify error message while using False on Confirmation message.
      Assert.ExpectedError(ITConfirmMessage);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerForReservation)]
    PROCEDURE ReservEntryForDeletedSalesLineITWithConfirmFalse@176();
    VAR
      SalesLine@1001 : Record 37;
      ReservationEntry@1005 : Record 337;
    BEGIN
      // Verify Reservation Entry is showing the entry after getting an error.

      // Setup: Create Item with Item Tracking Code, create Sales Order and assign Item Tracking.
      Initialize;

      // Exercise:
      DeleteSalesLineITWithConfirmFalse(SalesLine);

      // Verify: Verify Reservation Entry is showing the entry after getting an error.
      ReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Item No.",SalesLine."No.");
      ReservationEntry.TESTFIELD(Quantity,-1);  // Taking 1 because single Quantity is assigned while using Assign Serial No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerForReservation)]
    PROCEDURE PostErrorForDeleteSalesLineIT@196();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify error message while posting Sales Order.

      // Setup: Create Item with Item Tracking Code, create Sales Order and assign Item Tracking.
      Initialize;
      DeleteSalesLineITWithConfirmFalse(SalesLine);
      SalesHeader.GET(SalesLine."Document Type"::Order,SalesLine."Document No.");

      // Exercise: Post Sales Order.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify error message while posting Sales Order.
      Assert.ExpectedError(VariantMessage);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler,ItemTrackingListPageHandler,ConfirmHandler)]
    PROCEDURE ReservErrorUsingDeleteSalesLineITWithCancelReserv@144();
    VAR
      DocumentNo@1012 : Code[20];
    BEGIN
      // Verify Reservation Message after deleting Sales Line.

      // Setup: Delete Sales Line after assigning Item Tracking and performing Reservation.
      Initialize;
      DocumentNo := DeleteSalesLineITWithCancelReserv;

      // Exercise: Find Reservation Entry for Sales Line.
      ASSERTERROR FindReservEntry(DocumentNo);

      // Verify: Verify error for deleted Reservation Entry.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler,ItemTrackingListPageHandler,ConfirmHandler)]
    PROCEDURE MessageUsingDeleteSalesLineITWithCancelReserv@108();
    BEGIN
      // Verify Item Tracking Message using Sales Line with Item Tracking and Reservation.

      // Setup: Delete Sales Line after assigning Item Tracking and performing Reservation.
      Initialize;

      // Exercise:
      DeleteSalesLineITWithCancelReserv;

      // Verify: Verify Item Tracking Message using Sales Line, verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler,ItemTrackingListPageHandler,ConfirmHandler)]
    PROCEDURE CancelReservMessageUsingSalesLineWithIT@41();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify QtyReserve and Cancel Reservation From Current Line message.

      // Setup: Delete Sales Line after assigning Item Tracking and performing Reservation.
      Initialize;
      CreateAndReservSalesLine(SalesLine);

      // Verify: Verify QtyReserve and Cancel Reservation From Current Line, verification done in ReservationPageHandler and ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,InvokeItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE MessageUsingDeleteSalesLineWithOrderTracking@45();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Verify Item Tracking Message using Sales Line with Order Tracking.

      // Setup: Delete Sales Line after assigning Item Tracking with Order Tracking.
      Initialize;

      // Exercise:
      CreatePOAndDeleteSalesLineWithOrderTracking(SalesLine);

      // Verify: Verify Item Tracking Message using Sales Line with Order Tracking, verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,InvokeItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE ErrorUsingDeleteSalesLineWithOrderTracking@156();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Verify Reservation Message after deleting Sales Line using Order Tracking.

      // Setup: Delete Sales Line after assigning Item Tracking with Order Tracking.
      Initialize;
      CreatePOAndDeleteSalesLineWithOrderTracking(SalesLine);

      // Exercise: Find Reservation Entry for Sales Line.
      ASSERTERROR FindReservEntry(SalesLine."Document No.");

      // Verify: Verify Reservation Message after deleting Sales Line using Order Tracking.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,DummyConfirmHandler)]
    PROCEDURE FirstExpiringLotSuggestingAfterUndoWhseShipment@87();
    VAR
      Location@1000 : Record 14;
      Bin@1001 : Record 7354;
      Item@1003 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ItemJournalBatch@1005 : Record 233;
      SalesHeader@1008 : Record 36;
      WarehouseShipmentHeader@1011 : Record 7320;
      ExpirationDate@1018 : Date;
      ShipmentBinCode@1016 : Code[10];
      LotNo@1017 : ARRAY [2] OF Code[10];
      Quantity@1002 : Integer;
    BEGIN
      // [FEATURE] [Undo Shipment] [FEFO] [Bin] [Item Reclassification Journal]
      // [SCENARIO 379434] System should suggest the first-expiring lot according to FEFO when it has been returned and placed back into pickable bins.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);

      // [GIVEN] Create Location with pick according to FEFO.
      CreateLocationWithPostingSetupAndPickAccordingTOFEFO(Location,ShipmentBinCode);

      // [GIVEN] Item with Lot No. tracking.
      LibraryInventory.CreateTrackedItem(Item,'','',CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));

      // [GIVEN] Positive adjustment with Lot = "X" and ExpirationDate = D1 , Lot = "Y" and ExpirationDate = D2 and D2 > D1.
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      SelectItemJournalAndPostItemJournalLine(
        LotNo[1],Bin.Code,'',Item."No.",Location.Code,'',Quantity,ExpirationDate,
        ItemJournalBatch."Template Type"::Item,ItemJournalLine."Entry Type"::"Positive Adjmt.",FALSE);
      SelectItemJournalAndPostItemJournalLine(
        LotNo[2],Bin.Code,'',Item."No.",Location.Code,'',Quantity,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ExpirationDate),
        ItemJournalBatch."Template Type"::Item,ItemJournalLine."Entry Type"::"Positive Adjmt.",FALSE);

      // [GIVEN] Sales order, Warehouse Shipment from this Sales Order, Pick From Warehouse Shipment.
      CreatePickFromSOAndPostShipment(SalesHeader,Item."No.",Location.Code,Quantity);

      // [GIVEN] Undo Posted Shipment Line.
      UndoPostedShipmentLine(SalesHeader."No.",Item."No.");

      // [GIVEN] Return inventory from shipment bin to current bin using Item Reclassification Journal.
      SelectItemJournalAndPostItemJournalLine(
        LotNo[1],ShipmentBinCode,Bin.Code,Item."No.",Location.Code,LotNo[1],Quantity,ExpirationDate,
        ItemJournalBatch."Template Type"::Transfer,ItemJournalLine."Entry Type"::Transfer,TRUE);

      // [GIVEN] Delete Sales Order.
      SalesHeader.FIND;
      SalesHeader.DELETE(TRUE);

      // [GIVEN] Sales order and Warehouse Shipment from this Sales Order.
      CreateAndReleaseSO(SalesHeader,Item."No.",Location.Code,Quantity);
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);

      // [WHEN] Pick From Warehouse Shipment.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Warehouse Activity Line with Lot = "X" is created.
      VerifyLotNoInWarehouseActivityLine(Item."No.",SalesHeader."No.",LotNo[1]);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,InvokeItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE DeleteSalesLineErrorUsingOrderTracking@160();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Verify error for Sales Line deletion using Order Tracking.

      // Setup: Delete Sales Line after assigning Item Tracking with Order Tracking.
      Initialize;
      CreatePOAndDeleteSalesLineWithOrderTracking(SalesLine);
      SalesLine.DELETE(TRUE);

      // Exercise: Get Sales Line.
      ASSERTERROR SalesLine.GET(SalesLine."Document Type"::Order,SalesLine."Document No.",SalesLine."Line No.");

      // Verify: Verify error for Sales Line deletion using Order Tracking.
      Assert.ExpectedError(DeletedSalesLineError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,InvokeItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE DeleteSalesLineWithBinAndIT@283();
    BEGIN
      // Verify Item Tracking Message using Delete Sales Line with Item Tracking and and Bin.

      // Setup: Delete Sales Line with Bin after assigning Item Tracking.
      Initialize;

      // Exercise:
      DeleteSalesLineUsingBinWithIT;

      // Verify: Verify Item Tracking Message using Delete Sales Line with Item Tracking and and Bin., verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,InvokeItemTrackingSummaryPageHandler,ConfirmHandler)]
    PROCEDURE ReservEntryUsingDeleteSalesLineWithBinAndIT@49();
    VAR
      DocumentNo@1013 : Code[20];
    BEGIN
      // Verify Reservation error message after deleting Sales Line using Bin and Item Tracking.

      // Setup: Delete Sales Line with Bin after assigning Item Tracking.
      Initialize;
      DocumentNo := DeleteSalesLineUsingBinWithIT;

      // Exercise: Find Reservation Entry for Sales Line with Bin.
      ASSERTERROR FindReservEntry(DocumentNo);

      // Verify: Verify Reservation error message after deleting Sales Line using Bin and Item Tracking.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE DeleteSalesLineUsingWhseShptWithIT@66();
    VAR
      SalesLine@1006 : Record 37;
      SalesLineReserve@1009 : Codeunit 99000832;
    BEGIN
      // Verify Item Tracking Message using Delete Sales Line with Item Tracking and Warehouse Shipment

      // Setup: Create Warhouse Location, create Sales Order assign Item Tracking and Release.
      Initialize;
      CreateWhseShptWithIT(SalesLine,TrackingOption::AssignSerialNo);
      LibraryVariableStorage.Enqueue(ITConfirmMessage);  // Enqueue value for ConfirmHandler.
      SalesLineReserve.DeleteLineConfirm(SalesLine);

      // Exercise:
      SalesLineReserve.DeleteLine(SalesLine);

      // Verify: Verify Item Tracking Message using Delete Sales Line with Item Tracking and Warehouse Shipment, verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE WhseShptErrorUsingDeleteSalesLineWithIT@149();
    VAR
      SalesHeader@1014 : Record 36;
      SalesLine@1006 : Record 37;
      WhseValidateSourceLine@1010 : Codeunit 5777;
    BEGIN
      // Verify Warehouse Shipment exit error using Item Tracking Message using Delete Sales Line with Item Tracking and Warehouse Shipment

      // Setup: Create Warhouse Location, create Sales Order assign Item Tracking and Release.
      Initialize;
      CreateWhseShptWithIT(SalesLine,TrackingOption::AssignSerialNo);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesLine.GET(SalesLine."Document Type"::Order,SalesHeader."No.",SalesLine."Line No.");
      DeleteSalesLine(SalesLine);

      // Exercise:
      ASSERTERROR WhseValidateSourceLine.SalesLineDelete(SalesLine);

      // Verify: Verify Warehouse Shipment exit error using Item Tracking Message using Delete Sales Line with Item Tracking and Warehouse Shipment, verification done in ConfirmHandler.
      Assert.ExpectedError(DeleteSalesLineWhseShptError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE WhseShptErrorAfterDeleteWhseShptLine@95();
    VAR
      SalesLine@1006 : Record 37;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      // Verify Warehouse Shipment error after create and delete Warehouse Shipment Line.

      // Setup: Create Warhouse Location, create Sales Order assign Item Tracking and Release.
      Initialize;
      CreateWhseShptWithIT(SalesLine,TrackingOption::AssignSerialNo);
      FindWhseShptLine(WarehouseShipmentLine,DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.");
      WarehouseShipmentLine.DELETE(TRUE);
      WarehouseShipmentLine.SETRANGE("Source No.",SalesLine."Document No.");

      // Exercise.
      ASSERTERROR WarehouseShipmentLine.FINDFIRST;

      // Verify: Verify Warehouse Shipment error after create and delete Warehouse Shipment Line.
      Assert.ExpectedError(WhseShptError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ITMessageUsingDeletePurchaseLine@50();
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify Item Tracking Message using Delete Purchase Line.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;

      // Exercise: Delete Purchase Line.
      DeleteTrackingOnPurchaseLine(PurchaseLine);

      // Verify: Verify Item Tracking Message using Delete Purchase Line, verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE DeletePurchaseLineErrorWithIT@107();
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify error for Purchase Line deletion.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;
      DeleteTrackingOnPurchaseLine(PurchaseLine);
      PurchaseLine.DELETE(TRUE);

      // Exercise: Get Purchase Line.
      ASSERTERROR PurchaseLine.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.",PurchaseLine."Line No.");

      // Verify: Verify error for Purchase Line deletion.
      Assert.ExpectedError(DeletedPurchaseLineError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ReservEntryErrorUsingDeletePurchaseLineWithIT@117();
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify error for deleted Reservation Entry.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;
      DeleteTrackingOnPurchaseLine(PurchaseLine);
      PurchaseLine.DELETE(TRUE);

      // Exercise: Find Reservation Entry for Purchase Line.
      ASSERTERROR FindReservEntry(PurchaseLine."Document No.");

      // Verify: Verify error for deleted Reservation Entry.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE SerialNoErrorUsingDeletePurchaseLineWithIT@122();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify error while posting Purchase Order after deleting Item Tracking Lines.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;
      DeleteTrackingOnPurchaseLine(PurchaseLine);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");

      // Exercise.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify error while posting Purchase Order after deleting Item Tracking Lines.
      Assert.ExpectedError(STRSUBSTNO(SerialNoError,PurchaseLine."No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE PurchaseHeaderExistErrorWithIT@145();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify error while finding Purchase Order after deleting Item Tracking Lines and Purchase Header.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;
      DeleteTrackingOnPurchaseLine(PurchaseLine);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.DELETE(TRUE);

      // Exercise: Find Purchase Order.
      ASSERTERROR PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");

      // Verify: Verify error while finding Purchase Order after deleting Item Tracking Lines and Purchase Header.
      Assert.ExpectedError(PurchaseHeaderExistError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE MessageUsingDeletePOWithIT@173();
    BEGIN
      // Verify Item Tracking Message while deleting Purchase Order.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;

      // Exercise: Create and delete Purchase Order.
      CreateAndDeletePurchaseHeader;

      // Verify: Verify Item Tracking Message while deleting Purchase Order, verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ReservEntryErrorAfterDeletePOWithIT@59();
    VAR
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify Reservation Entry error after deleting Purchase Order.

      // Setup: Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      Initialize;
      DocumentNo := CreateAndDeletePurchaseHeader;

      // Exercise: Find Reservation Entry for Purchase Line.
      ASSERTERROR FindReservEntry(DocumentNo);

      // Verify: Verify Reservation Entry error after deleting Purchase Order.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ErrorWithDeleteRequisitionLine@57();
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Verify error for deleted Requisition Line.

      // Setup: Create Tracked Item, create Vendor, create Requisition Line assign Item Tracking and delete the Requisition Line.
      Initialize;
      DeleteRequisitionLine(RequisitionLine);
      RequisitionLine.SETRANGE("No.",RequisitionLine."No.");

      // Exercise.
      ASSERTERROR RequisitionLine.FINDFIRST;

      // Verify: Verify error for deleted Requisition Line.
      Assert.ExpectedError(RequisitionLineError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ReservEntryErrorForDeletedRequistionLine@79();
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Verify error for deleted Reservation Entry.

      // Setup: Create Tracked Item, create Vendor, create Requisition Line assign Item Tracking and delete the Requisition Line.
      Initialize;
      DeleteRequisitionLine(RequisitionLine);

      // Exercise: Find Reservation Entry for Requisition Line.
      ASSERTERROR FindReservEntry(RequisitionLine."Worksheet Template Name");

      // Verify: Verify error for deleted Reservation Entry.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ErrorForDeleteItemJnlLineWithIT@11();
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Verify Item Tracking error message while deleting Item Journal Lines.

      // Setup: Create Item Journal Line with Item Tracking.
      Initialize;
      CreateItemJnlLineWithIT(ItemJournalLine,'','');

      // Exercise:
      ASSERTERROR ItemJournalLine.DELETE(TRUE);

      // Verify: Verify Item Tracking error message while deleting Item Journal Lines.
      Assert.ExpectedError(ITConfirmMessage);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ReservEntryUsingItemJnlLineWithIT@82();
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Verify Reservation Entry must be exist after creating Item Journal Line with Item Tracking Line.

      // Setup.
      Initialize;

      // Exercise: Create Item Journal Line with Item Tracking.
      CreateItemJnlLineWithIT(ItemJournalLine,'','');

      // Verify: Verify Reservation Entry must be exist after creating Item Journal Line with Item Tracking Line.
      VerifyReservationEntry(ItemJournalLine."Item No.",1);  // Taken 1 because only one Quantity is assigned at the time of Assingning Serial No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ErrorForDeletedPlanningWkshWithComponent@44();
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Verify error for deleted Requisition Line with Component Line.

      // Setup: Create Requisition Line assign Item Tracking and delete the Requisition Line with Component.
      Initialize;
      CreateAndDeletedPlanningWkshWithComponent(RequisitionLine);
      RequisitionLine.SETRANGE("No.",RequisitionLine."No.");

      // Exercise.
      ASSERTERROR RequisitionLine.FINDFIRST;

      // Verify: Verify error for deleted Requisition Line with Component Line.
      Assert.ExpectedError(RequisitionLineError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ErrorWithReservEntryForDeletedPlanningWksh@155();
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Verify Reservation Entry error for deleted Requisition Line with Component Line.

      // Setup: Create Requisition Line assign Item Tracking and delete the Requisition Line with Component.
      Initialize;
      CreateAndDeletedPlanningWkshWithComponent(RequisitionLine);

      // Exercise: Find Reservation Entry for Requisition Line.
      ASSERTERROR FindReservEntry(RequisitionLine."Worksheet Template Name");

      // Verify: Verify Reservation Entry error for deleted Requisition Line with Component Line.
      Assert.ExpectedError(ReservEntryError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ProdOrderDeletionError@52();
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      // Verify error message for deletion of Production Order Line with Item Tracking.

      // Setup: Create and find Production Order using Item Tracking.
      Initialize;
      CreateAndFindProdOrderWithIT(ProdOrderLine);

      // Exercise.
      ASSERTERROR ProdOrderLine.DELETE(TRUE);

      // Verify: Verify error message for deletion of Production Order Line with Item Tracking.
      Assert.ExpectedError(ITConfirmMessage);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE ReservEntryForProdOrderWithIT@133();
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      // Verify Reservation Entry must be exist after creating Released Production Order with Item Tracking Line.

      // Setup: .
      Initialize;

      // Exercise: Create and find Production Order using Item Tracking.
      CreateAndFindProdOrderWithIT(ProdOrderLine);

      // Verify: Verify Reservation Entry must be exist after creating Released Production Order with Item Tracking Line.
      VerifyReservationEntry(ProdOrderLine."Item No.",1);  // Taken 1 because only one Quantity is assigned at the time of Assingning Serial No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE DeleteProdOrderHeader@311();
    VAR
      Item@1007 : Record 27;
      ProductionOrder@1008 : Record 5405;
      TrackingOption@1010 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
    BEGIN
      // Verify message while deleting Production Order.

      // Setup: Create tracked Item, create and refresh Production Order and assign Item Tracking.
      Initialize;
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      OpenItemTrackingLinesForProduction(ProductionOrder.Status,ProductionOrder."No.");
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      LibraryVariableStorage.Enqueue(DeletionMessage);  // Enqueue value for ConfirmHandler.

      // Exercise.
      ProductionOrder.DELETE(TRUE);

      // Verify: Verify message while deleting Production Order. Verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE DeletionErrorWithProdOrderComponent@120();
    VAR
      ProductionOrder@1008 : Record 5405;
      ProdOrderComponent@1012 : Record 5407;
      ComponentItem@1013 : Code[20];
    BEGIN
      // Verify error message for deletion of Production Order Component with Item Tracking.

      // Setup: Create tracked Items for Production Order Component, create Production BOM, attach it to Item, create and refresh Production Order and assign Item Tracking and find Production Order Component.
      Initialize;
      ComponentItem := CreateProdOrderComponentWithIT(ProductionOrder);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ComponentItem);

      // Exercise.
      ASSERTERROR ProdOrderComponent.DELETE(TRUE);

      // Verify: Verify error message for deletion of Production Order Component with Item Tracking.
      Assert.ExpectedError(ITConfirmMessage);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ReservEntryUsingProdOrderComponent@186();
    VAR
      ProductionOrder@1008 : Record 5405;
      ComponentItem@1013 : Code[20];
    BEGIN
      // Verify Reservation Entry must be exist after creating Released Production Order with Component Item and Item Tracking Line.

      // Setup: Create tracked Items for Production Order Component, create Production BOM, attach it to Item, create and refresh Production Order and assign Item Tracking and find Production Order Component.
      Initialize;

      // Exercise.
      ComponentItem := CreateProdOrderComponentWithIT(ProductionOrder);

      // Verify: Verify Reservation Entry must be exist after creating Released Production Order with Component Item and Item Tracking Line.
      VerifyReservationEntry(ComponentItem,-1);  // Taken -1 because only one Quantity is assigned at the time of Assingning Serial No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE DeletionErrorUsingTransferLine@258();
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      // Verify error while deleting Transfer Line with Item Tracking.

      // Setup: Create Transfer Order with Item Tracking.
      Initialize;
      CreateTransferOrderWithIT(TransferLine);

      // Exercise.
      ASSERTERROR TransferLine.DELETE(TRUE);

      // Verify: Verify error while deleting Transfer Line with Item Tracking.
      Assert.ExpectedError(ITConfirmMessage);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE ReservEntryUsingTransferOrder@67();
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      // Verify Reservation Entry must be exist after creating Transfer Order with Item Tracking Line.

      // Setup.
      Initialize;

      // Exercise: Create Transfer Order with Item Tracking.
      CreateTransferOrderWithIT(TransferLine);

      // Verify: Verify Reservation Entry must be exist after creating Transfer Order with Item Tracking Line.
      VerifyReservationEntry(TransferLine."Item No.",-1);  // Taken -1 because only one Quantity is assigned at the time of Assingning Serial No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE DeletionForTransferOrder@116();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1000 : Record 5741;
    BEGIN
      // Verify message while deleting Transfer Order.

      // Setup: Create Transfer Order with Item Tracking.
      Initialize;
      CreateTransferOrderWithIT(TransferLine);
      TransferHeader.GET(TransferLine."Document No.");
      LibraryVariableStorage.Enqueue(DeletionMessage);  // Enqueue value for ConfirmHandler.

      // Exercise.
      TransferHeader.DELETE(TRUE);

      // Verify: Verify message while deleting Transfer Order. Verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreateWithGivenQtyPageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE LateBindingSerial@65();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      // Setup.
      Initialize;

      // Exercise.
      LateBindingSalesVsPurchase(SalesLine,TRUE,FALSE,1);

      // Verify: Verify Reservation Entry after posting should cover only the unreceived qty.
      VerifyReservationEntry(SalesLine."No.",-SalesLine."Qty. to Ship");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreateWithGivenQtyPageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE LateBindingSerialMultipleReceipts@88();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      // Setup.
      Initialize;

      // Exercise.
      LateBindingSalesVsPurchase(SalesLine,TRUE,FALSE,LibraryRandom.RandIntInRange(2,4));

      // Verify: Verify Reservation Entry after posting should cover only the unreceived qty.
      VerifyReservationEntry(SalesLine."No.",-SalesLine."Qty. to Ship");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE LateBindingLot@91();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      // Setup.
      Initialize;

      // Exercise.
      LateBindingSalesVsPurchase(SalesLine,FALSE,TRUE,1);

      // Verify: Verify Reservation Entry after posting should cover only the unreceived qty.
      VerifyReservationEntry(SalesLine."No.",-SalesLine."Qty. to Ship");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE LateBindingLotMultipleReceipts@90();
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      // Setup.
      Initialize;

      // Exercise.
      LateBindingSalesVsPurchase(SalesLine,FALSE,TRUE,LibraryRandom.RandIntInRange(2,4));

      // Verify: Verify Reservation Entry after posting should cover only the unreceived qty.
      VerifyReservationEntry(SalesLine."No.",-SalesLine."Qty. to Ship");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler)]
    PROCEDURE PostWhseShptAfterPickDeletion@55();
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1000 : Record 37;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO] Can post Warehouse Shipment for tracked Item, first partially picked, then Warehouse Pick deleted.

      // [GIVEN] Sales Order with tracked Item, Location require Pick/Put-Away.
      Initialize;

      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));

      CreatePurchaseOrder(PurchaseLine,Item."No.");
      PurchaseLine.VALIDATE("Location Code",CreateWhseLocation(TRUE));
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLot);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreatePostWhseRcpt(PurchaseHeader);
      FindRegisterPutAway(PurchaseHeader);

      CreateSalesDocument(SalesLine,PurchaseLine."No.",PurchaseLine."Location Code",PurchaseLine.Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries); // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWhseShpt(SalesLine."Document No.");
      FindWhseShptLine(WarehouseShipmentLine,DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.");

      // [GIVEN] Register Warehouse Pick with partial Quantity, then delete Warehouse Pick.
      CreateRegisterWhsePick(WarehouseActivityHeader,WarehouseShipmentLine,SalesLine.Quantity - 1);
      WarehouseActivityHeader.FIND;
      WarehouseActivityHeader.DELETE(TRUE);

      // [WHEN] Post Warehouse Shipment.
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Posted Warehouse Shipment created successfully.
      VerifyPostedWhseShipment(WarehouseShipmentHeader);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,ProductionJournalPageHandler,ConfirmHandler)]
    PROCEDURE PostWhseShptPartiallyPickedProductionItem@58();
    VAR
      Item@1004 : Record 27;
      ProductionOrder@1006 : Record 5405;
      SalesHeader@1005 : Record 36;
      SalesLine@1000 : Record 37;
      WarehouseShipmentHeader@1007 : Record 7320;
      OrderStatus@1008 : 'ItemOrder,ProjectOrder';
      LotNo@1009 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO] Can post Warehouse Shipment for partially produced and picked tracked Item.

      // [GIVEN] Sales Order with tracked Item (replenished with production), Quantity = 3 * X, Location require Pick/Put-Away.
      Initialize;

      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
      CreateSalesDocument(SalesLine,Item."No.",CreateWhseLocation(FALSE),3 * LibraryRandom.RandIntInRange(10,20));
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibraryVariableStorage.Enqueue(ProdOrderCreatedMsg); // Enqueue value for MessagePageHandler.

      // [GIVEN] Create Produciton Order from Sales Order.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderStatus::ItemOrder);

      // [GIVEN] Post production with two lines of quantities X, assign different lots.
      LotNo := PostProductionOutputWithIT(Item."No.",SalesLine.Quantity / 3,SalesLine.Quantity / 3);

      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWhseShpt(SalesLine."Document No.");
      FindWhseShptHeader(WarehouseShipmentHeader,SalesLine."Document Type",SalesLine."Document No.");
      LibraryWarehouse.CreateWhsePick(WarehouseShipmentHeader);

      // [GIVEN] Register Pick for first lot, Quantity of X.
      ModifyRegisterWhsePick(WarehouseShipmentHeader,LotNo);

      // [WHEN] Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] Posted Warehouse Shipment created successfully.
      VerifyPostedWhseShipment(WarehouseShipmentHeader);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE RegisterPickWithDiffTrackedItems@70();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ManufItem@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1005 : Record 83;
      SalesLine@1007 : Record 37;
      SalesHeader@1008 : Record 36;
      WarehouseShipmentHeader@1010 : Record 7320;
      WarehouseActivityHeader@1013 : Record 5766;
      WarehouseActivityLine@1012 : Record 5767;
      LocationCode@1006 : Code[10];
      LotNo@1011 : Code[10];
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO] Warehouse Pick posted successfully when having two items, first is Lot tracked, second is not tracked.

      // [GIVEN] Two Items, one (A) is lot tracked, another (B) is not tracked.
      Initialize;

      CreateTrackedItem(
        Item,Item."Order Tracking Policy"::"Tracking Only",CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));
      LibraryVariableStorage.Enqueue(TrackingPolicyMessage);
      LibraryInventory.CreateItem(Item2);
      Item2.VALIDATE("Order Tracking Policy",Item2."Order Tracking Policy"::"Tracking Only");
      Item2.MODIFY(TRUE);

      // [GIVEN] Create manufactured Item with Item B as BOM component.
      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,Item."No.",1);
      CreateItem(ManufItem,'');
      WITH ManufItem DO BEGIN
        VALIDATE("Replenishment System","Replenishment System"::"Prod. Order");
        VALIDATE("Reordering Policy","Reordering Policy"::Order);
        VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
        MODIFY(TRUE);
      END;

      // [GIVEN] Add stock for Items A and B (warehouse location).
      LocationCode := CreateWhseLocation(FALSE);
      SetBinMandatory(LocationCode,FALSE);
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item."No.",LocationCode,'',LibraryRandom.RandIntInRange(10,20),
        ItemJournalLine."Entry Type"::"Positive Adjmt.");
      LotNo := LibraryUtility.GenerateGUID;
      WITH LibraryVariableStorage DO BEGIN // for ItemTrackingLinesPageHandler
        Enqueue(TrackingOption::AssignLotNo);
        Enqueue(LotNo);
        Enqueue(ItemJournalLine.Quantity);
      END;
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item2."No.",LocationCode,'',LibraryRandom.RandIntInRange(10,20),
        ItemJournalLine."Entry Type"::"Positive Adjmt.");
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [GIVEN] Create Sales Order with two lines: Item A of Qty 1, Item B of Qty 1, create Warehouse Shipment, create Pick.
      CreateSalesDocument(SalesLine,Item."No.",LocationCode,1);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item2."No.",1);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWhseShpt(SalesLine."Document No.");
      FindWhseShptHeader(WarehouseShipmentHeader,SalesLine."Document Type",SalesLine."Document No.");
      LibraryWarehouse.CreateWhsePick(WarehouseShipmentHeader);
      FindWhseActivityLine(WarehouseActivityLine,WarehouseShipmentHeader);
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);

      // [GIVEN] Create Planning Worksheet with manufactured Item, refresh worksheet.
      CreateRefreshPlanningWksh(ManufItem."No.",LocationCode,LibraryRandom.RandIntInRange(100,200));

      // [WHEN] Register Pick.
      WarehouseActivityLine.FIND;
      WarehouseActivityHeader.INIT;
      RegisterWhsePick(WarehouseActivityHeader,WarehouseActivityLine);

      // [THEN] Pick registered successfully.
      VerifyRegisteredWhseActivity(Item."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingLinesSynchedAfterPartialShipmentAndInvoice@53();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      Quantity@1005 : Integer;
    BEGIN
      // [FEATURE] [Sales Order] [Item Tracking] [Partial Shipment]
      // [SCENARIO 732242] "Item Tracking Lines" page should be synchronized with the database when sales order with tracking is partially shipped, then invoiced

      // [GIVEN] Item tracked by lot no.
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,FALSE,TRUE,FALSE));
      Quantity := LibraryRandom.RandIntInRange(10,20);
      PostPositiveAdjustmentWithLotNo(Item."No.",Quantity);

      // [GIVEN] Sales order with one line: quantity = "X"
      // [GIVEN] Post partial shipment of the sales order. "Qty. to Ship" = "X / 2"
      CreateSalesDocument(SalesLine,Item."No.",'',Quantity);
      SalesLine.VALIDATE("Qty. to Ship",SalesLine."Qty. to Ship" / 2);
      SalesLine.MODIFY(TRUE);

      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);
      SalesLine.OpenItemTrackingLines;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [GIVEN] Set "Qty. to Invoice" = "X / 2" on the sales line
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice" / 2);
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Open "Item Tracking Lines" page and set "Qty. to Invoice" = "X / 2"
      LibraryVariableStorage.Enqueue(TrackingOption::SetQtyToInvoice);
      LibraryVariableStorage.Enqueue(SalesLine."Qty. to Invoice");
      SalesLine.OpenItemTrackingLines;

      // [WHEN] Close "Item Tracking Lines"
      // [THEN] "Qty. to Invoice (Base)" in the item tracking specification = "X / 2"
      VerifyTrackingSpecQtyToInvoice(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE LateBindingOnTwoSalesLinesLotTracking@76();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : ARRAY [2] OF Record 37;
      LotNo@1006 : ARRAY [2] OF Code[20];
      LotQty@1001 : ARRAY [2] OF Decimal;
      DeltaQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Reservation] [Late Binding]
      // [SCENARIO] Late binding should create reservation for the specified lot no. when updating non-specific reservation

      Initialize;

      // [GIVEN] Item "I" with lot tracking
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,FALSE,TRUE,FALSE));
      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      LotQty[2] := LibraryRandom.RandDecInRange(10,20,2);
      LotQty[1] := LotQty[2] * 2;
      DeltaQty := LibraryRandom.RandDecInDecimalRange(LotQty[2],LotQty[1] - 1,2);

      // [GIVEN] Stock of item "I" in two lots: 20 pcs of "LotA" and 10 pcs of "LotB"
      PostPositiveAdjustmentWithLotTracking(Item."No.",'','',LotNo[1],LotQty[1]);
      PostPositiveAdjustmentWithLotTracking(Item."No.",'','',LotNo[2],LotQty[2]);

      // [GIVEN] Sales order with 2 lines (11 pcs and 19 pcs). Both have non-specific reservation of item "I" against inventory
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine[1],SalesHeader,SalesLine[1].Type::Item,Item."No.",LotQty[2] + DeltaQty);
      LibrarySales.AutoReserveSalesLine(SalesLine[1]);
      LibrarySales.CreateSalesLine(
        SalesLine[2],SalesHeader,SalesLine[2].Type::Item,Item."No.",LotQty[1] - DeltaQty);
      LibrarySales.AutoReserveSalesLine(SalesLine[2]);

      // [WHEN] Open "Item Tracking Lines" and create specific reservation of 19 pcs of "LotA" for the second sales line
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);
      LibraryVariableStorage.Enqueue(LotNo[1]);
      LibraryVariableStorage.Enqueue(SalesLine[2].Quantity);
      SalesLine[2].OpenItemTrackingLines;

      // [THEN] 11 pcs of item "I" are reserved for the first sales line with no lot specified
      VerifyLotReservation(SalesLine[1],'');
      // [THEN] 19 pcs of item "I" are reserved for the second line with "Lot No." = "LotA"
      VerifyLotReservation(SalesLine[2],LotNo[1]);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE LateBindingOnTwoSalesLinesSNTracking@118();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : ARRAY [2] OF Record 37;
      SerialNo@1001 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Reservation] [Late Binding]
      // [SCENARIO] Late binding should create reservation for the specified serial no. when updating non-specific reservation

      Initialize;

      // [GIVEN] Item "I" with serial no. tracking
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      SerialNo[1] := LibraryUtility.GenerateGUID;
      SerialNo[2] := LibraryUtility.GenerateGUID;

      // [GIVEN] 2 pcs of item "I" on inventory: "SN1" and "SN2"
      PostPositiveAdjustmentWithSNTracking(Item."No.",SerialNo[1]);
      PostPositiveAdjustmentWithSNTracking(Item."No.",SerialNo[2]);

      // [GIVEN] Sales order with 2 lines, both have non-specific reservation of item "I". "SN1" is reserved for the first line, "SN2" - second line
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine[1],SalesHeader,SalesLine[1].Type::Item,Item."No.",1);
      LibrarySales.AutoReserveSalesLine(SalesLine[1]);
      LibrarySales.CreateSalesLine(SalesLine[2],SalesHeader,SalesLine[2].Type::Item,Item."No.",1);
      LibrarySales.AutoReserveSalesLine(SalesLine[2]);

      // [WHEN] Open "Item Tracking Lines" and create specific reservation of "SN1" for the second sales line
      LibraryVariableStorage.Enqueue(TrackingOption::AssignManualSN);
      LibraryVariableStorage.Enqueue(SerialNo[1]);
      SalesLine[2].OpenItemTrackingLines;

      // [THEN] Non-specific reservation of item "I" exists for the first line
      VerifySerialReservation(SalesLine[1],'');
      // [THEN] Item "I" with serial no. = "SN1" is reserved for the second line
      VerifySerialReservation(SalesLine[2],SerialNo[1]);
    END;

    [Test]
    PROCEDURE RetrieveInvoiceSpecificationClear@78();
    VAR
      SalesLine@1000 : Record 37;
      TrackingSpecification@1002 : Record 336;
      SalesLineReserve@1001 : Codeunit 99000832;
    BEGIN
      // [FEATURE] [Tracking Specification] [UT]

      // [GIVEN] Tracking Specification for Sales with "Entry No." = "X"
      SalesLine.INIT;
      SalesLine.Type := SalesLine.Type::Item;
      TrackingSpecification.INIT;
      TrackingSpecification."Entry No." := LibraryRandom.RandInt(5);

      // [WHEN] Call RetrieveInvoiceSpecification in Sales Line-Reserve codeunit
      SalesLineReserve.RetrieveInvoiceSpecification(SalesLine,TrackingSpecification);

      // [THEN] Tracking Specification has "Entry No." = 0
      TrackingSpecification.TESTFIELD("Entry No.",0);
    END;

    [Test]
    PROCEDURE PurchaseRetrieveInvoiceSpecificationClear@83();
    VAR
      PurchaseLine@1000 : Record 39;
      TrackingSpecification@1002 : Record 336;
      PurchLineReserve@1001 : Codeunit 99000834;
    BEGIN
      // [FEATURE] [Tracking Specification] [UT]
      // [SCENARIO 379053] Item tracking specification should be deleted when new purchase line is considered in the posting routine.

      // [GIVEN] Tracking Specification for Purchase with "Entry No." = "X"
      PurchaseLine.INIT;
      PurchaseLine.Type := PurchaseLine.Type::Item;
      TrackingSpecification.INIT;
      TrackingSpecification."Entry No." := LibraryRandom.RandInt(5);

      // [WHEN] Call RetrieveInvoiceSpecification in Purch. Line-Reserve codeunit
      PurchLineReserve.RetrieveInvoiceSpecification(PurchaseLine,TrackingSpecification);

      // [THEN] Tracking Specification has "Entry No." = 0
      TrackingSpecification.TESTFIELD("Entry No.",0);
    END;

    [Test]
    PROCEDURE ServiceRetrieveInvoiceSpecificationClear@86();
    VAR
      ServiceLine@1000 : Record 5902;
      TrackingSpecification@1002 : Record 336;
      ServiceLineReserve@1001 : Codeunit 99000842;
    BEGIN
      // [FEATURE] [Tracking Specification] [UT]
      // [SCENARIO 379053] Item tracking specification should be deleted when new service line is considered in the posting routine.

      // [GIVEN] Tracking Specification for Service with "Entry No." = "X"
      ServiceLine.INIT;
      ServiceLine.Type := ServiceLine.Type::Item;
      TrackingSpecification.INIT;
      TrackingSpecification."Entry No." := LibraryRandom.RandInt(5);

      // [WHEN] Call RetrieveInvoiceSpecification in Service Line-Reserve codeunit
      ServiceLineReserve.RetrieveInvoiceSpecification(ServiceLine,TrackingSpecification,FALSE);

      // [THEN] Tracking Specification has "Entry No." = 0
      TrackingSpecification.TESTFIELD("Entry No.",0);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler)]
    PROCEDURE WhseItemTrackingCreatePickAfterTrackingUpdate@94();
    VAR
      Item@1000 : Record 27;
      Location@1006 : Record 14;
      Bin@1001 : ARRAY [2] OF Record 7354;
      SalesHeader@1003 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseActivityLine@1010 : Record 5767;
      LotNo@1009 : ARRAY [2] OF Code[20];
      Quantity@1012 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Shipment] [Pick]
      // [SCENARIO 380440] Pick created after changing Lot No. in sales order should receive new Lot No.

      Initialize;

      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      Quantity[1] := LibraryRandom.RandDecInRange(10,20,2);
      Quantity[2] := LibraryRandom.RandDecInRange(10,20,2);

      // [GIVEN] Location "L" with "Require Ship" = TRUE and "Require Pick" = FALSE.
      CreateLocationWithRequireShipAndTwoBins(Location,Bin);

      // [GIVEN] Item "I" with lot tracking, stock on location "L" in two lots "LOT1" and "LOT2"
      CreateTrackedItemWithInventoryStock(Item,LotNo,Quantity,Bin[2]);

      // [GIVEN] Create sales order for item "I" on location "L", select lot no. "LOT1"
      CreateSalesDocumentWithTracking(SalesHeader,SalesLine,Item."No.",Location.Code,LibraryRandom.RandDecInRange(1,10,2));

      // [GIVEN] Create warehouse shipment from sales order
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);

      // [GIVEN] Change lot no. in sales order line. New lot no. = "LOT2"
      AssignLotNoToSalesLine(SalesLine,LotNo[2]);

      // [WHEN] Create pick from warehouse shipment
      UpdateQtyToShipInWhseShipment(WarehouseShipmentHeader."No.",0);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [THEN] Lot no. in pick line is "LOT2"
      FindWhseActivityLine(WarehouseActivityLine,WarehouseShipmentHeader);
      WarehouseActivityLine.TESTFIELD("Lot No.",LotNo[2]);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler)]
    PROCEDURE WhseItemTrackingTryUpdateAfterPickCreated@93();
    VAR
      Item@1010 : Record 27;
      Location@1009 : Record 14;
      Bin@1008 : ARRAY [2] OF Record 7354;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseActivityLine@1002 : Record 5767;
      LotNo@1001 : ARRAY [2] OF Code[20];
      Quantity@1000 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Shipment] [Pick]
      // [SCENARIO 380440] It should not be allowed to change Lot No. in sales order after pick is created

      Initialize;

      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      Quantity[1] := LibraryRandom.RandDecInRange(10,20,2);
      Quantity[2] := LibraryRandom.RandDecInRange(10,20,2);

      // [GIVEN] Location "L" with "Require Ship" = TRUE and "Require Pick" = FALSE.
      CreateLocationWithRequireShipAndTwoBins(Location,Bin);
      CreateTrackedItemWithInventoryStock(Item,LotNo,Quantity,Bin[2]);

      // [GIVEN] Create sales order for item "I" on location "L", select lot no. "LOT1"
      CreateSalesDocumentWithTracking(SalesHeader,SalesLine,Item."No.",Location.Code,LibraryRandom.RandDecInRange(1,10,2));

      // [GIVEN] Create warehouse shipment from sales order
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);

      // [GIVEN] Create pick from warehouse shipment
      UpdateQtyToShipInWhseShipment(WarehouseShipmentHeader."No.",0);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [WHEN] Change lot no. in sales order line. New lot no. = "LOT2"
      ASSERTERROR AssignLotNoToSalesLine(SalesLine,LotNo[2]);

      // [THEN] Field update fails with error
      Assert.ExpectedError(QtyHandledMustBeZeroErr);

      // [THEN] Lot No. in pick line is "LOT1"
      FindWhseActivityLine(WarehouseActivityLine,WarehouseShipmentHeader);
      WarehouseActivityLine.TESTFIELD("Lot No.",LotNo[1]);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler)]
    PROCEDURE WhseItemTrackingTryUpdateAfterShipPartiallyShipped@97();
    VAR
      Item@1008 : Record 27;
      Bin@1006 : Record 7354;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1003 : Record 7320;
      LotNo@1001 : ARRAY [2] OF Code[20];
      Quantity@1000 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Shipment]
      // [SCENARIO 380440] It should not be allowed to change Lot No. in sales order after warehouse shipment is partially shipped

      Initialize;

      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      Quantity[1] := LibraryRandom.RandDecInRange(10,20,2);
      Quantity[2] := LibraryRandom.RandDecInRange(10,20,2);

      // [GIVEN] Location "L" with "Require Ship" = TRUE and "Require Pick" = FALSE.
      CreateLocationWithRequireShip(Bin);
      CreateTrackedItemWithInventoryStock(Item,LotNo,Quantity,Bin);

      // [GIVEN] Create sales order for item "I" on location "L", select lot no. "LOT1". Quantity = "X"
      CreateSalesDocumentWithTracking(SalesHeader,SalesLine,Item."No.",Bin."Location Code",LibraryRandom.RandDecInRange(5,10,2));

      // [GIVEN] Create warehouse shipment from sales order
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);

      // [GIVEN] Set "Qty. to Ship" in warehouse shipment line to "X" / 2 and post partial shipment
      UpdateQtyToShipInWhseShipment(WarehouseShipmentHeader."No.",LibraryRandom.RandDecInDecimalRange(1,SalesLine.Quantity / 2,2));
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [WHEN] Change lot no. in sales order line. New lot no. = "LOT2"
      ASSERTERROR AssignLotNoToSalesLine(SalesLine,LotNo[2]);

      // [THEN] Field update fails with error
      Assert.ExpectedError(QtyHandledMustBeZeroErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,InvokeItemTrackingSummaryPageHandler)]
    PROCEDURE WhseItemTrackingAssignTrackingAfterShipmentCreated@143();
    VAR
      Item@1008 : Record 27;
      Bin@1006 : Record 7354;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1003 : Record 7320;
      WhseItemTrackingLine@1009 : Record 6550;
      LotNo@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse] [Shipment]
      // [SCENARIO 380440] Warehouse item tracking line should be created when Lot No. is assigned to sales line after creating warehouse shipment

      Initialize;

      LotNo := LibraryUtility.GenerateGUID;
      Quantity := LibraryRandom.RandDecInRange(10,20,2);

      // [GIVEN] Location "L" with "Require Ship" = TRUE and "Require Pick" = FALSE.
      CreateLocationWithRequireShip(Bin);
      CreateItem(Item,CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));  // Lot specific tracking without expiration date
      PostPositiveAdjustmentWithLotTracking(Item."No.",Bin."Location Code",Bin.Code,LotNo,Quantity);

      // [GIVEN] Create sales order for item "I" on location "L" without tracking code
      CreateSalesDocument(SalesLine,Item."No.",Bin."Location Code",LibraryRandom.RandDecInRange(1,10,2));
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");

      // [GIVEN] Create warehouse shipment from sales order
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);

      // [WHEN] Assign lot no. = "LOT1" in sales line
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);
      SalesLine.OpenItemTrackingLines;

      // [THEN] Warehouse item tracking line is created with lot no. = "LOT1"
      WhseItemTrackingLine.SETRANGE("Item No.",Item."No.");
      WhseItemTrackingLine.FINDFIRST;
      WhseItemTrackingLine.TESTFIELD("Lot No.",LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ProductionJournalPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE RegisterPickReservedSalesOrderWithQtyManuallyChanged@96();
    VAR
      Location@1004 : Record 14;
      Item@1002 : Record 27;
      WarehouseActivityLine@1016 : Record 5767;
      SalesHeader@1012 : Record 36;
      SalesLine@1013 : Record 37;
      WarehouseShipmentHeader@1015 : Record 7320;
      ReservationEntries@1018 : TestPage 497;
      LotNos@1003 : ARRAY [2] OF Code[20];
      LotQty@1000 : Decimal;
    BEGIN
      // [FEATURE] [Pick] [Reservation]
      // [SCENARIO 201925] Registering pick should reserve sales order when reservation quantity is changed manually, and there is surplus from another source

      Initialize;

      // [GIVEN] Item "I" with lot tracking
      CreateItem(Item,CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));
      LibraryWarehouse.CreateFullWMSLocation(Location,2);

      // [GIVEN] Post production output of 50 pcs of item "I" on a WMS location. Split output in 2 lots "L1" and "L2"
      LotQty := LibraryRandom.RandIntInRange(10,50);
      PostProdOrderOutputWithLotTracking(
        Item."No.",Location.Code,FindPutPickBin(Location),LotQty * 2 + LibraryRandom.RandInt(20),LotQty,LotQty);
      FindPostedLotNos(LotNos,Location.Code,Item."No.");

      // [GIVEN] Create sales order for 40 pcs of item "I" and reserve
      CreateSalesDocument(SalesLine,Item."No.",Location.Code,LotQty * 2);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.AutoReserveSalesLine(SalesLine);

      // [GIVEN] Open reservation entries and change reserved quantity for lot "L2" from 20 to 19
      ReservationEntries.TRAP;
      SalesLine.ShowReservationEntries(FALSE);
      ReservationEntries.LAST;
      ReservationEntries."Quantity (Base)".SETVALUE(-LotQty + LibraryRandom.RandInt(5));

      // [GIVEN] Create warehouse shipment and pick from the sales order
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // [GIVEN] Split pick lines and assign lot numbers
      SplitWhseActivityLineAndUpdateTracking(Item."No.",WarehouseActivityLine."Action Type"::Take,LotQty,LotNos);
      SplitWhseActivityLineAndUpdateTracking(Item."No.",WarehouseActivityLine."Action Type"::Place,LotQty,LotNos);

      // [GIVEN] Register pick
      RegisterWarehouseActivity(WarehouseShipmentHeader);

      // [THEN] Total reserved quantity for the sales order is 50
      // Expected quantity is negative, since we are on the outbound side
      VerifyReservedQuantity(SalesHeader."Document Type",SalesHeader."No.",-LotQty * 2);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      InventorySetup@1000 : Record 313;
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      // Clear Global variables.
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryInventory.NoSeriesSetup(InventorySetup);
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndFindProdOrderWithIT@147(VAR ProdOrderLine@1004 : Record 5406);
    VAR
      Item@1001 : Record 27;
      ProductionOrder@1000 : Record 5405;
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      OpenItemTrackingLinesForProduction(ProductionOrder.Status,ProductionOrder."No.");
      FindProductionOrderLine(ProdOrderLine,ProductionOrder.Status,ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateAndPostMultipleItemJournalLineWithTracking@8(ItemNo@1004 : Code[20];LocationCode@1005 : Code[10];BinCode@1001 : Code[20];BinCode2@1002 : Code[20]);
    VAR
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1000 : Record 83;
      Quantity@1006 : Variant;
    BEGIN
      // Item Tracking Lines page is handled in ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Dequeue(Quantity);
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch,ItemNo,LocationCode,BinCode,Quantity,ItemJournalLine."Entry Type"::"Positive Adjmt.");
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch,ItemNo,LocationCode,BinCode2,Quantity,ItemJournalLine."Entry Type"::"Positive Adjmt.");
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndVerifyTrackingLinesForSales@22(LocationCode@1004 : Code[10];BinCode@1003 : Code[20];BinCode2@1002 : Code[20];BinCode3@1000 : Code[20]);
    VAR
      Item@1007 : Record 27;
      SalesLine@1006 : Record 37;
      Quantity@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Quantity);
      CreateItem(Item,CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));
      CreateAndPostMultipleItemJournalLineWithTracking(Item."No.",LocationCode,BinCode,BinCode2);

      // Exercise: Create Sales Order with Location and Bin.
      CreateSalesOrderWithBin(SalesLine,Item."No.",Quantity,LocationCode,BinCode3);

      // Verify: Verify available Lot No. on Item Tracking Line.
      SalesLine.OpenItemTrackingLines;  // Item Tracking Lines page is handled in ItemTrackingLinesPageHandler and Verification done in ItemTrackingSummaryPageHandler.
    END;

    LOCAL PROCEDURE CreateAndReservSalesLine@154(VAR SalesLine@1001 : Record 37);
    VAR
      ItemJournalLine@1003 : Record 83;
      TrackingOption@1005 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries';
      ReservationOption@1009 : 'ReserveFromCurrentLine,CancelReservFromCurrentLine,VerifyQuantity';
    BEGIN
      CreateAndPostItemJnlLine(ItemJournalLine,'','');
      CreateSalesDocument(SalesLine,ItemJournalLine."Item No.",'',ItemJournalLine.Quantity);  // Take random for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;

      // Reserve from current line.
      LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);  // Enqueue value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(ReservationOption::ReserveFromCurrentLine);  // Enqueue value for ReservationFromCurrentLineHandler.
      SalesLine.ShowReservation;

      // Cancel from current line.
      SalesLine.GET(SalesLine."Document Type"::Order,SalesLine."Document No.",SalesLine."Line No.");
      LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);  // Enqueue value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(ReservationOption::CancelReservFromCurrentLine);  // Enqueue value for ReservationFromCurrentLineHandler.
      LibraryVariableStorage.Enqueue(CancelReservMessage);  // Enqueue value for ConfirmHandler.
      SalesLine.ShowReservation;
    END;

    LOCAL PROCEDURE LateBindingSalesVsPurchase@42(VAR SalesLine@1001 : Record 37;Serial@1004 : Boolean;Lot@1005 : Boolean;PartialReceipts@1007 : Integer);
    VAR
      ReservationEntry@1012 : Record 337;
      SalesHeader@1000 : Record 36;
      Item@1003 : Record 27;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1011 : Record 39;
      ReservationOption@1009 : 'ReserveFromCurrentLine,CancelReservFromCurrentLine,VerifyQuantity';
      TrackingOption@1006 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot';
      QtyReceived@1010 : Decimal;
      count@1008 : Integer;
      LotNo@1013 : Text;
    BEGIN
      // Create Purchase Order.
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,Lot,Serial));
      CreatePurchaseOrder(PurchaseLine,Item."No.");
      UpdateGeneralPostingSetup(PurchaseLine);

      // Create Sales Order and reserve against purchase.
      CreateSalesDocument(SalesLine,Item."No.",'',PurchaseLine.Quantity);
      SalesLine.VALIDATE("Shipment Date",PurchaseLine."Expected Receipt Date" + LibraryRandom.RandInt(7));
      SalesLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ReservationOption::ReserveFromCurrentLine);  // Enqueue value for ReservationFromCurrentLineHandler.
      SalesLine.ShowReservation;

      // Receive purchase order partially with item tracking.
      LotNo := LibraryUtility.GenerateRandomCode(ReservationEntry.FIELDNO("Lot No."),DATABASE::"Reservation Entry");
      FOR count := 1 TO PartialReceipts DO BEGIN
        PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
        PurchaseLine2.VALIDATE("Qty. to Receive",count);
        PurchaseLine2.MODIFY(TRUE);

        CASE TRUE OF
          Serial:
            BEGIN
              LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
              LibraryVariableStorage.Enqueue(PurchaseLine2."Qty. to Receive"); // Specify the qty to create for serial nos.
            END;
          Lot:
            BEGIN
              LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
              LibraryVariableStorage.Enqueue(LotNo);
              LibraryVariableStorage.Enqueue(PurchaseLine2.Quantity);
            END;
        END;

        QtyReceived += PurchaseLine2."Qty. to Receive";
        AssignITAndPostPurchaseOrder(PurchaseLine2,FALSE);
      END;

      // Assign item tracking on sales order.
      SalesLine.VALIDATE("Qty. to Ship",QtyReceived);
      SalesLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;

      // Verify Reservation Entries after closing the item tracking page.
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      ReservationEntry.SETRANGE("Item Tracking",ReservationEntry."Item Tracking"::None);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Qty. to Invoice (Base)",-(SalesLine."Quantity (Base)" - SalesLine."Qty. to Ship (Base)"));
      ReservationEntry.TESTFIELD("Quantity (Base)",-(SalesLine.Quantity - SalesLine."Qty. to Ship"));

      // Post Sales Order.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    LOCAL PROCEDURE CreateAndPostItemJnlLine@61(VAR ItemJournalLine@1006 : Record 83;LocationCode@1002 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      CreateItemJnlLineWithIT(ItemJournalLine,LocationCode,BinCode);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreatePOAndDeleteSalesLineWithOrderTracking@177(VAR SalesLine@1004 : Record 37);
    VAR
      Item@1002 : Record 27;
      PurchaseLine@1001 : Record 39;
      TrackingOption@1010 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot';
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingPolicyMessage);  // Enqueue value for MessageHandler.
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,FALSE,TRUE,FALSE));
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");
      Item.MODIFY(TRUE);

      // Create and Post Purchase Order with Item Tracking Lot.
      CreatePurchaseOrder(PurchaseLine,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLot);  // Enqueue value for ItemTrackingLinesPageHandler.
      AssignITAndPostPurchaseOrder(PurchaseLine,FALSE);

      // Create Sales Order, assign Item Tracking and delete Sales Line.
      CreateSalesDocument(SalesLine,PurchaseLine."No.",'',PurchaseLine.Quantity);  // Take random for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      DeleteSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE CreateAndDeletedPlanningWkshWithComponent@171(VAR RequisitionLine@1002 : Record 246);
    VAR
      PlanningComponent@1006 : Record 99000829;
    BEGIN
      // Setup: Create Tracked Item, create Requisition Line assign Item Tracking and delete the Requisition Line.
      CreateRequisitionLineWithIT(RequisitionLine);
      LibraryPlanning.CreatePlanningComponent(PlanningComponent,RequisitionLine);
      PlanningComponent.VALIDATE("Item No.",RequisitionLine."No.");
      PlanningComponent.VALIDATE(Quantity,RequisitionLine.Quantity);
      PlanningComponent.VALIDATE("Quantity per",RequisitionLine.Quantity);
      PlanningComponent.MODIFY(TRUE);
      RequisitionLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@84(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandInt(10));  // Use Random value for Quantity.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateCustomer@38() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@5(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@7(VAR ItemJournalLine@1003 : Record 83;ItemJournalBatch@1001 : Record 233;ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];BinCode@1004 : Code[20];Quantity@1005 : Decimal;EntryType@1006 : Option);
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLinePrepareBatch@153(VAR ItemJournalLine@1005 : Record 83;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];BinCode@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      ItemJournalBatch@1006 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch,ItemNo,LocationCode,BinCode,Quantity,ItemJournalLine."Entry Type"::"Positive Adjmt.");
    END;

    LOCAL PROCEDURE CreateItemJnlLineWithIT@104(VAR ItemJournalLine@1001 : Record 83;LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    VAR
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries';
    BEGIN
      // Create Item Journal Line with Item Tracking.
      CreateItemJournalLinePrepareBatch(ItemJournalLine,CreateSerialTrackedItem,LocationCode,BinCode,LibraryRandom.RandInt(10));
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    LOCAL PROCEDURE CreateItemJournalForRevaluation@46(VAR ItemJournalLine@1001 : Record 83;ItemNo@1000 : Code[20]);
    VAR
      ItemJournalBatch@1002 : Record 233;
      Item@1003 : Record 27;
      CalculatePer@1005 : 'Item Ledger Entry,Item';
      CalcBase@1004 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      CreateRevaluationJournalBatch(ItemJournalBatch);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryCosting.CalculateInventoryValue(
        ItemJournalLine,Item,WORKDATE,LibraryUtility.GetGlobalNoSeriesCode,CalculatePer::Item,FALSE,FALSE,FALSE,CalcBase::" ",FALSE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@17(ManExpirDateEntryReqd@1001 : Boolean;LotWarehouseTracking@1002 : Boolean;LOTSpecific@1003 : Boolean;SNSpecific@1004 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecific,LOTSpecific);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",LotWarehouseTracking);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ManExpirDateEntryReqd);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateWhseShipmentFromSO@211(VAR WarehouseShipmentHeader@1009 : Record 7320;SalesHeader@1003 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWhseShptHeader(WarehouseShipmentHeader,SalesHeader."Document Type",SalesHeader."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateSerialTrackedItem@16() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",CreateSerialTrackingCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSerialTrackingCode@20() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      ItemTrackingCode.VALIDATE(Description,ItemTrackingCode.Code);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateTrackedItem@54(VAR Item@1000 : Record 27;OrderTrackingPolicy@1001 : Option;ItemTrackingCode@1002 : Code[10]);
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingPolicyMessage);
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingCode);
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTrackedItemWithInventoryStock@98(VAR Item@1000 : Record 27;LotNos@1001 : ARRAY [2] OF Code[20];Quantity@1002 : ARRAY [2] OF Decimal;Bin@1003 : Record 7354);
    VAR
      I@1004 : Integer;
    BEGIN
      CreateItem(Item,CreateItemTrackingCode(FALSE,TRUE,TRUE,FALSE));  // Lot specific tracking without expiration date

      FOR I := 1 TO ARRAYLEN(LotNos) DO
        PostPositiveAdjustmentWithLotTracking(Item."No.",Bin."Location Code",Bin.Code,LotNos[I],Quantity[I]);
    END;

    LOCAL PROCEDURE CreateSalesDocument@37(VAR SalesLine@1001 : Record 37;No@1004 : Code[20];LocationCode@1007 : Code[10];Quantity@1002 : Decimal);
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,No,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithTracking@115(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      CreateSalesDocument(SalesLine,ItemNo,LocationCode,Quantity);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");

      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);
      SalesLine.OpenItemTrackingLines;

      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateLocationWithPostingSetup@2(VAR Location@1000 : Record 14;BinMandatory@1005 : Boolean;DirectedPutawayAndPick@1006 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",BinMandatory);
      Location.VALIDATE("Directed Put-away and Pick",DirectedPutawayAndPick);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithBin@36(ItemNo@1002 : Code[20];BinCode@1004 : Code[20];LocationCode@1005 : Code[10];Invoice@1006 : Boolean) : Decimal;
    VAR
      PurchaseLine@1001 : Record 39;
      TrackingOption@1007 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
    BEGIN
      CreatePurchaseOrder(PurchaseLine,ItemNo);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
      UpdateGeneralPostingSetup(PurchaseLine);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      AssignITAndPostPurchaseOrder(PurchaseLine,Invoice);
      EXIT(PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE CreateAndReleaseSO@128(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@223(VAR PurchaseLine@1002 : Record 39;ItemNo@1000 : Code[20]);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandIntInRange(10,50));  // Use random value for Quantity and taking integer value required for Test case.
    END;

    LOCAL PROCEDURE CreateProdOrderComponentWithIT@204(VAR ProductionOrder@1008 : Record 5405) : Code[20];
    VAR
      Item@1007 : Record 27;
      Item2@1005 : Record 27;
      Item3@1004 : Record 27;
      ManufacturingSetup@1000 : Record 99000765;
      ProductionBOMHeader@1003 : Record 99000771;
      TrackingOption@1010 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
    BEGIN
      // Create tracked Items for Production Order Component, create Production BOM, attach it to Item, create and refresh Production Order and assign Item Tracking and find Production Order Component.
      ManufacturingSetup.GET;
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      LibraryInventory.CreateTrackedItem(Item2,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      LibraryInventory.CreateTrackedItem(Item3,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));

      // Random value taken for Quantity per.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,Item2."No.",Item3."No.",LibraryRandom.RandInt(5));
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      OpenItemTrackingLinesForProduction(ProductionOrder.Status,ProductionOrder."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarining);  // Enqueue value for ConfirmHandler.
      OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",Item2."No.");
      EXIT(Item2."No.");
    END;

    LOCAL PROCEDURE CreatePickFromSOAndPostShipment@209(VAR SalesHeader@1000 : Record 36;ItemNo@1008 : Code[20];LocationCode@1009 : Code[10];Quantity@1010 : Integer);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      CreateAndReleaseSO(SalesHeader,ItemNo,LocationCode,Quantity);
      CreateWhseShipmentFromSO(WarehouseShipmentHeader,SalesHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(WarehouseShipmentHeader);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationWithPostingSetupAndPickAccordingTOFEFO@198(VAR Location@1002 : Record 14;VAR ShipmentBinCode@1003 : Code[20]);
    VAR
      Bin@1004 : Record 7354;
    BEGIN
      CreateLocationWithPostingSetup(Location,TRUE,FALSE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      ShipmentBinCode := Bin.Code;
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Shipment Bin Code",Bin.Code);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithRequireShip@175(VAR Bin@1001 : Record 7354);
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
    END;

    LOCAL PROCEDURE CreateLocationWithRequireShipAndTwoBins@106(VAR Location@1000 : Record 14;VAR Bin@1001 : ARRAY [2] OF Record 7354);
    VAR
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      LibraryWarehouse.CreateBin(Bin[1],Location.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBin(Bin[2],Location.Code,LibraryUtility.GenerateGUID,'','');

      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Shipment Bin Code",Bin[1].Code);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateRefreshPlanningWksh@135(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1002 : Decimal);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      CleanUpAndCreateReqLine(RequisitionLine,ItemNo,'',Quantity);
      WITH RequisitionLine DO BEGIN
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Ending Date",WORKDATE);
        MODIFY(TRUE);
        SETRANGE("Worksheet Template Name","Worksheet Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        SETRANGE("Line No.","Line No.");
        REPORT.RUNMODAL(REPORT::"Refresh Planning Demand",FALSE,FALSE,RequisitionLine);
      END;
    END;

    LOCAL PROCEDURE AssignITAndPostPurchaseOrder@244(VAR PurchaseLine@1000 : Record 39;Invoice@1002 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,Invoice);
    END;

    LOCAL PROCEDURE AssignLotNoToSalesLine@127(SalesLine@1000 : Record 37;LotNo@1001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateRevaluationJournalBatch@32(VAR ItemJournalBatch@1002 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Revaluation);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateRequisitionLineWithIT@183(VAR RequisitionLine@1002 : Record 246);
    VAR
      Item@1001 : Record 27;
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
    BEGIN
      // Setup: Create Tracked Item, create Requisition Line assign Item Tracking and delete the Requisition Line.
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CleanUpAndCreateReqLine(RequisitionLine,Item."No.",CreateVendor,LibraryRandom.RandInt(10));
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      RequisitionLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateTransferOrderWithIT@257(VAR TransferLine@1001 : Record 5741);
    VAR
      Item@1003 : Record 27;
      Location@1000 : Record 14;
      LocationTo@1008 : Record 14;
      LocationInTransit@1010 : Record 14;
      TransferHeader@1006 : Record 5740;
      TrackingOption@1007 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot';
      Direction@1002 : 'Outbound,Inbound';
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      LibraryWarehouse.CreateLocation(Location);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationTo);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,Location.Code,LocationTo.Code,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",LibraryRandom.RandInt(10));
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarining);  // Enqueue value for ConfirmHandler.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE CleanUpAndCreateReqLine@228(VAR RequisitionLine@1001 : Record 246;No@1002 : Code[20];VendorNo@1003 : Code[20];QtyToSet@1004 : Decimal);
    VAR
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      FindWkshTemplate(RequisitionWkshName,RequisitionWkshName."Template Type"::Planning);
      WITH RequisitionLine DO BEGIN
        DELETEALL(TRUE);
        LibraryPlanning.CreateRequisitionLine(
          RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",No);
        VALIDATE("Vendor No.",VendorNo);
        VALIDATE(Quantity,QtyToSet);  // Using Random value for Quantity.
        VALIDATE("Action Message","Action Message"::New);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithBin@15(VAR SalesLine@1000 : Record 37;No@1004 : Code[20];Quantity@1005 : Decimal;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',No,Quantity,LocationCode,0D);
      SalesLine.VALIDATE("Bin Code",BinCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSilverLocation@10(VAR Bin@1001 : Record 7354);
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateLocationWithPostingSetup(Location,TRUE,FALSE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');  // Use blank values for Unit Of Measure Code and Zone Code.
    END;

    LOCAL PROCEDURE CreateTransitLocation@35() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(Location);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateVendor@124() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@19(VAR WarehouseJournalLine@1000 : Record 7311;LocationCode@1001 : Code[10];ZoneCode@1002 : Code[10];BinCode@1003 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      WarehouseJournalBatch@1006 : Record 7310;
      WarehouseJournalTemplate@1005 : Record 7309;
    BEGIN
      // Use Random value for Quantity.
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,LocationCode,ZoneCode,BinCode,
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateWhiteLocation@1(VAR Bin@1000 : Record 7354;Item@1004 : Record 27);
    VAR
      BinContent@1003 : Record 7302;
      Location@1001 : Record 14;
      Zone@1002 : Record 7300;
    BEGIN
      CreateLocationWithPostingSetup(Location,TRUE,TRUE);
      CreateZone(Zone,Location.Code);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      LibraryWarehouse.CreateBinContent(BinContent,Location.Code,Zone.Code,Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      Location.VALIDATE("Adjustment Bin Code",Bin.Code);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseShptWithIT@74(VAR SalesLine@1017 : Record 37;TrackingOptionValue@1000 : Option);
    VAR
      SalesHeader@1014 : Record 36;
    BEGIN
      CreateSalesDocument(SalesLine,CreateSerialTrackedItem,CreateWhseLocation(TRUE),LibraryRandom.RandInt(10));  // Take random for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOptionValue);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarining);  // Enqueue value for ConfirmHandler.
      IF TrackingOptionValue = TrackingOption::AssignLotNo THEN BEGIN
        LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
        LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      END;
      SalesLine.OpenItemTrackingLines;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWhseShpt(SalesLine."Document No.");
    END;

    LOCAL PROCEDURE CreateWhseLocation@48(DirectedPutAwayPick@1002 : Boolean) : Code[10];
    VAR
      Location@1000 : Record 14;
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      Location.VALIDATE("Directed Put-away and Pick",DirectedPutAwayPick);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateWhseShpt@73(DocumentNo@1002 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePostWhseRcpt@105(PurchHeader@1002 : Record 38);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchHeader);
      FindWhseRcptHeader(WarehouseReceiptHeader,PurchHeader."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateZone@26(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10]);
    VAR
      WarehouseClass@1003 : Record 7304;
    BEGIN
      // Select Bin Type where Receive, Ship is False and Put Away, Pick is True.
      LibraryWarehouse.CreateWarehouseClass(WarehouseClass);
      LibraryWarehouse.CreateZone(
        Zone,'',LocationCode,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE),WarehouseClass.Code,'',0,FALSE);  // Use zero for Zone Ranking and False for Cross-Dock Bin Zone.
    END;

    LOCAL PROCEDURE CreateRegisterWhsePick@68(VAR WarehouseActivityHeader@1000 : Record 5766;WarehouseShipmentLine@1001 : Record 7321;QtyToPost@1002 : Decimal);
    VAR
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreateWhsePick(WarehouseShipmentHeader);
      ModifyWhsePick(WarehouseActivityLine,WarehouseShipmentHeader,QtyToPost);
      RegisterWhsePick(WarehouseActivityHeader,WarehouseActivityLine);
    END;

    LOCAL PROCEDURE ModifyRegisterWhsePick@157(WarehouseShipmentHeader@1001 : Record 7320;LotNo@1000 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      ModifyWhsePick(WarehouseActivityLine,WarehouseShipmentHeader,0);
      WarehouseActivityHeader.INIT;
      RegisterWhsePick(WarehouseActivityHeader,WarehouseActivityLine);
    END;

    LOCAL PROCEDURE ModifyWhsePick@47(VAR WarehouseActivityLine@1000 : Record 5767;WarehouseShipmentHeader@1001 : Record 7320;QtyToSet@1002 : Decimal);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,WarehouseShipmentHeader);
      WITH WarehouseActivityLine DO BEGIN
        FINDSET;
        REPEAT
          VALIDATE("Qty. to Handle",QtyToSet);
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RegisterWhsePick@69(VAR WarehouseActivityHeader@1002 : Record 5766;WarehouseActivityLine@1000 : Record 5767);
    BEGIN
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE SetBinMandatory@179(LocationCode@1000 : Code[10];BinMandatoryToSet@1001 : Boolean);
    VAR
      Location@1002 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        GET(LocationCode);
        VALIDATE("Bin Mandatory",BinMandatoryToSet);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SelectItemJournalAndPostItemJournalLine@202(VAR LotNo@1000 : Code[10];BinCode@1001 : Code[20];NewBinCode@1013 : Code[20];ItemNo@1009 : Code[20];LocationCode@1004 : Code[10];NewLotNo@1010 : Code[10];Quantity@1002 : Integer;ExpirationDate@1003 : Date;ItemJournalTemplateType@1011 : Option;EntryType@1012 : Option;IsReclass@1005 : Boolean);
    VAR
      ItemJournalBatch@1008 : Record 233;
      ItemJournalLine@1006 : Record 83;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalTemplateType);
      CreateItemJournalLine(ItemJournalLine,ItemJournalBatch,ItemNo,LocationCode,BinCode,Quantity,EntryType);
      IF NewBinCode <> '' THEN
        ItemJournalLine.VALIDATE("New Bin Code",NewBinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      IF LotNo = '' THEN
        LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      ItemJournalLine.OpenItemTrackingLines(IsReclass);
      SetExpirationDateAndLotNoInItemTrackingLine(ItemNo,ItemJournalBatch.Name,NewLotNo,ExpirationDate);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE PostProductionOutputWithIT@81(ItemNo@1000 : Code[20];Quantity1@1001 : Decimal;Quantity2@1002 : Decimal) LotNo : Code[20];
    VAR
      ProductionOrder@1006 : Record 5405;
      ProdOrderLine@1004 : Record 5406;
      ProductionJournalMgt@1005 : Codeunit 5510;
    BEGIN
      WITH LibraryVariableStorage DO BEGIN // Enqueue for ItemTrackingLinesPageHandler
        Enqueue(TrackingOption::AssignLotNos);
        Enqueue(2); // Number of lines
        Enqueue(LibraryUtility.GenerateGUID); // Lot No to assign
        Enqueue(Quantity1);
        LotNo := LibraryUtility.GenerateGUID;
        Enqueue(LotNo); // Lot no to assign
        Enqueue(Quantity2);

        Enqueue(Quantity1 + Quantity2); // Enqueue for ProductionJournalHandler
        Enqueue(PostJournalQst); // Enqueue for ConfirmHandler
        Enqueue(JournalPostedMsg); // Enqueue for MessageHandler
      END;

      WITH ProdOrderLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        ProductionOrder.GET(ProductionOrder.Status::Released,"Prod. Order No.");
        ProductionJournalMgt.Handling(ProductionOrder,"Line No.");
      END;
    END;

    LOCAL PROCEDURE DeleteTrackingOnPurchaseLine@92(VAR PurchaseLine@1001 : Record 39);
    VAR
      Item@1002 : Record 27;
      PurchLineReserve@1000 : Codeunit 99000834;
      TrackingOption@1010 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot';
    BEGIN
      // Create Tracked Item, create Purchase Order with Item Tracking and delete the Tracking Lines.
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CreatePurchaseOrder(PurchaseLine,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(ITConfirmMessage);  // Enqueue value for ConfirmHandler.
      PurchLineReserve.DeleteLineConfirm(PurchaseLine);
      PurchLineReserve.DeleteLine(PurchaseLine);
    END;

    LOCAL PROCEDURE CreateAndDeletePurchaseHeader@132() : Code[20];
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      TrackingOption@1010 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot';
    BEGIN
      // Create Tracked Item, create Purchase Order with Item Tracking and delete the Purchase Header with Tracking Lines.
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CreatePurchaseOrder(PurchaseLine,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(DeletionMessage);  // Enqueue value for ConfirmHandler.
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.DELETE(TRUE);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE DeleteRequisitionLine@102(VAR RequisitionLine@1000 : Record 246);
    BEGIN
      CreateRequisitionLineWithIT(RequisitionLine);
      RequisitionLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteSalesLineITWithConfirmFalse@40(VAR SalesLine@1001 : Record 37);
    VAR
      Item@1000 : Record 27;
      SalesLineReserve@1003 : Codeunit 99000832;
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
      ConfirmOption@1004 : 'SerialSpecificTrue,SerialSpecificFalse';
    BEGIN
      // Create Item with Item Tracking Code, create Sales Order and assign Item Tracking.
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CreateSalesDocument(SalesLine,Item."No.",'',LibraryRandom.RandInt(10));  // Take random for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarining);  // Enqueue value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(ConfirmOption::SerialSpecificTrue);  // Enqueue value for ConfirmHandlerForReservation.
      SalesLine.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(ITConfirmMessage);  // Enqueue value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(ConfirmOption::SerialSpecificFalse);  // Enqueue value for ConfirmHandlerForReservation.
      SalesLineReserve.DeleteLineConfirm(SalesLine);
      ASSERTERROR SalesLineReserve.DeleteLine(SalesLine);
    END;

    LOCAL PROCEDURE DeleteSalesLineIT@25(VAR SalesLine@1004 : Record 37);
    VAR
      Item@1006 : Record 27;
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,VerifyLotNo';
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,FALSE,FALSE,TRUE));
      CreateSalesDocument(SalesLine,Item."No.",'',LibraryRandom.RandInt(10));  // Take random for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarining);  // Enqueue value for ConfirmHandler.
      SalesLine.OpenItemTrackingLines;
      DeleteSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE DeleteSalesLineITWithCancelReserv@56() : Code[20];
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateAndReservSalesLine(SalesLine);
      DeleteSalesLine(SalesLine);
      EXIT(SalesLine."Document No.");
    END;

    LOCAL PROCEDURE DeleteSalesLine@62(SalesLine@1001 : Record 37);
    VAR
      SalesLineReserve@1000 : Codeunit 99000832;
    BEGIN
      LibraryVariableStorage.Enqueue(ITConfirmMessage);  // Enqueue value for ConfirmHandler.
      SalesLineReserve.DeleteLineConfirm(SalesLine);
      SalesLineReserve.DeleteLine(SalesLine);
    END;

    LOCAL PROCEDURE DeleteSalesLineUsingBinWithIT@89() : Code[20];
    VAR
      Bin@1007 : Record 7354;
      ItemJournalLine@1011 : Record 83;
      SalesLine@1001 : Record 37;
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,VerifyLotNo,SelectEntries,AssignLot';
    BEGIN
      CreateSilverLocation(Bin);
      CreateAndPostItemJnlLine(ItemJournalLine,Bin."Location Code",Bin.Code);
      CreateSalesDocument(SalesLine,ItemJournalLine."Item No.",Bin."Location Code",ItemJournalLine.Quantity);  // Take random for Quantity.
      ModifySalesLine(SalesLine,ItemJournalLine."Bin Code");
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      DeleteSalesLine(SalesLine);
      EXIT(SalesLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyReservationEntry@168(ItemNo@1008 : Code[20];QuantityBase@1000 : Decimal);
    VAR
      ReservationEntry@1007 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Quantity (Base)",QuantityBase);
    END;

    LOCAL PROCEDURE FilterReservationBySource@188(VAR ReservEntry@1000 : Record 337;SourceType@1001 : Integer;SourceNo@1002 : Code[20];SourceRefNo@1003 : Integer);
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source ID",SourceNo);
        SETRANGE("Source Ref. No.",SourceRefNo);
      END;
    END;

    LOCAL PROCEDURE FindItemJournalLine@34(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPostedLotNos@159(VAR LotNos@1001 : ARRAY [2] OF Code[20];LocationCode@1002 : Code[10];ItemNo@1003 : Code[20]);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;

        LotNos[1] := "Lot No.";
        FINDLAST;
        LotNos[2] := "Lot No.";
      END;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@205(VAR ProdOrderLine@1000 : Record 5406;ProdOrderStatus@1002 : Option;ProdOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.SETRANGE(Status,ProdOrderStatus);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProdOrderComponent@111(VAR ProdOrderComponent@1000 : Record 5407;Status@1001 : Option;ProdOrderNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPutPickBin@110(Location@1002 : Record 14) : Code[20];
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      Bin.SETRANGE("Cross-Dock Bin",FALSE);
      Bin.FINDFIRST;

      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE FindReservEntry@51(SourceID@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShptHeader@248(VAR WarehouseShipmentHeader@1001 : Record 7320;DocumentType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWhseShptLine(WarehouseShipmentLine,DATABASE::"Sales Line",DocumentType,DocumentNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE FindWhseShptLine@101(VAR WarehouseShipmentLine@1001 : Record 7321;SourceType@1002 : Integer;SourceSubtype@1003 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Type",SourceType);
      WarehouseShipmentLine.SETRANGE("Source Subtype",SourceSubtype);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseActivityLine@75(VAR WarehouseActivityLine@1002 : Record 5767;WarehouseShipmentHeader@1001 : Record 7320);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Whse. Document Type","Whse. Document Type"::Shipment);
        SETRANGE("Whse. Document No.",WarehouseShipmentHeader."No.");
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE FindWhseRcptHeader@114(VAR WarehouseReceiptHeader@1001 : Record 7316;SourceNo@1000 : Code[20]);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FindWkshTemplate@226(VAR RequisitionWkshName@1000 : Record 245;TemplateType@1001 : Option);
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",TemplateType);
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      RequisitionWkshName.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisterPutAway@125(PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",PurchaseHeader."No.");
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ModifySalesLine@33(SalesLine@1000 : Record 37;Bincode@1001 : Code[20]);
    BEGIN
      SalesLine.VALIDATE("Bin Code",Bincode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenItemTrackingLinesForProduction@80(ProdOrderStatus@1002 : Option;ProdOrderNo@1001 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ProdOrderStatus,ProdOrderNo);
      ProdOrderLine.OpenItemTrackingLines;  // Open Item Tracking Lines on Page Handler.
    END;

    LOCAL PROCEDURE OpenItemTrackingLinesForProdOrderComponent@126(Status@1002 : Option;ProdOrderNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,Status,ProdOrderNo,ItemNo);
      ProdOrderComponent.OpenItemTrackingLines;  // Open Tracking Line on Page Handler.
    END;

    LOCAL PROCEDURE PostItemJournalLineWithTracking@191(ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentWithLotTracking@152(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];BinCode@1002 : Code[20];LotNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1005 : Record 83;
    BEGIN
      CreateItemJournalLinePrepareBatch(ItemJournalLine,ItemNo,LocationCode,BinCode,Quantity);

      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
      PostItemJournalLineWithTracking(ItemJournalLine);
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentWithLotNo@85(ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      CreateItemJournalLinePrepareBatch(ItemJournalLine,ItemNo,'','',Quantity);

      LibraryVariableStorage.Enqueue(TrackingOption::AssignLot);
      PostItemJournalLineWithTracking(ItemJournalLine);
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentWithSNTracking@190(ItemNo@1000 : Code[20];SerialNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItemJournalLinePrepareBatch(ItemJournalLine,ItemNo,'','',1);

      LibraryVariableStorage.Enqueue(TrackingOption::AssignManualSN);
      LibraryVariableStorage.Enqueue(SerialNo);
      PostItemJournalLineWithTracking(ItemJournalLine);
    END;

    LOCAL PROCEDURE PostProdOrderOutputWithLotTracking@212(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];BinCode@1006 : Code[20];OutputQty@1003 : Decimal;Lot1Qty@1004 : Decimal;Lot2Qty@1005 : Decimal);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,OutputQty);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      PostProductionOutputWithIT(ItemNo,Lot1Qty,Lot2Qty);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@242(WarehouseShipmentHeader@1001 : Record 7320);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,WarehouseShipmentHeader);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@21(VAR ItemJournalBatch@1001 : Record 233;ItemJnlTemplateType@1002 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJnlTemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJnlTemplateType,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetExpirationDateAndLotNoInItemTrackingLine@109(ItemNo@1000 : Code[20];ItemJournalBatchName@1003 : Code[10];NewLotNo@1004 : Code[10];ExpirationDate@1001 : Date);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Source Batch Name",ItemJournalBatchName);
      ReservationEntry.FINDFIRST;
      ReservationEntry.VALIDATE("Expiration Date",ExpirationDate);
      ReservationEntry.VALIDATE("New Lot No.",NewLotNo);
      ReservationEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SplitWhseActivityLine@227(ItemNo@1000 : Code[20];ActionType@1001 : Option;NewQtyToHandle@1002 : Decimal);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Action Type",ActionType);
        FINDFIRST;
        VALIDATE("Qty. to Handle",NewQtyToHandle);
        MODIFY(TRUE);
        SplitLine(WarehouseActivityLine);
      END;
    END;

    LOCAL PROCEDURE SplitWhseActivityLineAndUpdateTracking@233(ItemNo@1000 : Code[20];ActionType@1001 : Option;NewQtyToHandle@1002 : Decimal;LotNos@1003 : ARRAY [2] OF Code[20]);
    VAR
      WarehouseActivityLine@1006 : Record 5767;
      ZoneCode@1004 : Code[10];
      BinCode@1005 : Code[20];
    BEGIN
      SplitWhseActivityLine(ItemNo,ActionType,NewQtyToHandle);

      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Action Type",ActionType);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        ZoneCode := "Zone Code";
        BinCode := "Bin Code";
        VALIDATE("Lot No.",LotNos[1]);
        MODIFY(TRUE);

        FINDLAST;
        VALIDATE("Zone Code",ZoneCode);
        VALIDATE("Bin Code",BinCode);
        VALIDATE("Lot No.",LotNos[2]);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnWhseItemTrackingLine@43(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      WhseItemTrackingLine@1003 : Record 6550;
      ExpirationDate@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpirationDate);
      WhseItemTrackingLine.SETRANGE("Location Code",LocationCode);
      WhseItemTrackingLine.SETRANGE("Item No.",ItemNo);
      WhseItemTrackingLine.FINDFIRST;
      WhseItemTrackingLine.VALIDATE("Expiration Date",ExpirationDate);
      WhseItemTrackingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@64(PurchaseLine@1000 : Record 39);
    VAR
      GLAccount@1001 : Record 15;
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE("Purch. Account",GLAccount."No.");
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToShipInWhseShipment@136(WhseShipmentNo@1001 : Code[20];NewQty@1002 : Decimal);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",WhseShipmentNo);
      WarehouseShipmentLine.MODIFYALL("Qty. to Ship",NewQty);
    END;

    LOCAL PROCEDURE VerifyExpirationDateForItemTracking@27(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
      ExpirationDate@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpirationDate);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Expiration Date",ExpirationDate);
    END;

    LOCAL PROCEDURE VerifyQuantityOnTransferLine@24(DocumentNo@1005 : Code[20];ItemNo@1001 : Code[20];Quantity@1004 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Document No.",DocumentNo);
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      TransferLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWhseShipment@163(WarehouseShipmentHeader@1005 : Record 7320);
    VAR
      PostedWhseShipmentHeader@1000 : Record 7322;
    BEGIN
      PostedWhseShipmentHeader.SETRANGE("Whse. Shipment No.",WarehouseShipmentHeader."No.");
      Assert.IsFalse(PostedWhseShipmentHeader.ISEMPTY,WhseShpmtWasNotPostedErr);
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivity@162(ItemNo@1000 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      Assert.IsFalse(RegisteredWhseActivityLine.ISEMPTY,CouldNotRegisterWhseActivityErr);
    END;

    LOCAL PROCEDURE VerifyLotReservation@167(SalesLine@1000 : Record 37;LotNo@1002 : Code[20]);
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        FilterReservationBySource(ReservEntry,DATABASE::"Sales Line",SalesLine."Document No.",SalesLine."Line No.");
        SETRANGE(Positive,FALSE);
        SETRANGE("Lot No.",LotNo);
        CALCSUMS(Quantity);
        TESTFIELD(Quantity,-SalesLine.Quantity);
      END;
    END;

    LOCAL PROCEDURE VerifyReservedQuantity@182(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];ExpectedQty@1003 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",DocumentType);
        SETRANGE("Source ID",DocumentNo);
        CALCSUMS(Quantity);

        TESTFIELD(Quantity,ExpectedQty);
      END;
    END;

    LOCAL PROCEDURE VerifySerialReservation@187(SalesLine@1002 : Record 37;SerialNo@1001 : Code[20]);
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        FilterReservationBySource(ReservEntry,DATABASE::"Sales Line",SalesLine."Document No.",SalesLine."Line No.");
        FINDFIRST;
        TESTFIELD("Serial No.",SerialNo);
      END;
    END;

    LOCAL PROCEDURE VerifyTrackingSpecQtyToInvoice@72(SalesLine@1001 : Record 37);
    VAR
      TrackingSpec@1000 : Record 336;
    BEGIN
      WITH TrackingSpec DO BEGIN
        SETRANGE("Item No.",SalesLine."No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source ID",SalesLine."Document No.");
        FINDFIRST;
        TESTFIELD("Qty. to Invoice (Base)",-SalesLine."Qty. to Invoice");
      END;
    END;

    LOCAL PROCEDURE VerifyLotNoInWarehouseActivityLine@224(ItemNo@1000 : Code[20];SalesHeaderNo@1001 : Code[20];ExpectedLotNo@1002 : Code[10]);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Source No.",SalesHeaderNo);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Lot No.",ExpectedLotNo);
    END;

    LOCAL PROCEDURE UndoPostedShipmentLine@213(SalesHeaderNo@1000 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      SalesShipmentLine.SETRANGE("Order No.",SalesHeaderNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@63(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@29(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreateWithGivenQtyPageHandler@77(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    VAR
      DecimalValue@1002 : Variant;
      Qty@1001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DecimalValue);  // Dequeue variable.
      Qty := DecimalValue;  // To convert Variant into Option.
      EnterQuantityToCreate.QtyToCreate.SETVALUE(Qty);
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(FALSE);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@39(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      TrackingOptionValue@1006 : Option;
    BEGIN
      TrackingOptionValue := LibraryVariableStorage.DequeueInteger;
      CASE TrackingOptionValue OF
        TrackingOption::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingOption::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        TrackingOption::AssignLot:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingOption::AssignLotNo:
          BEGIN
            ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
            ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
          END;
        TrackingOption::VerifyLotNo:
          ItemTrackingLines."Lot No.".ASSISTEDIT;
        TrackingOption::AssignLotNos:
          AssignLotNos(ItemTrackingLines);
        TrackingOption::SetQtyToInvoice:
          ItemTrackingLines."Qty. to Invoice (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
        TrackingOption::AssignManualSN:
          BEGIN
            ItemTrackingLines."Serial No.".SETVALUE(LibraryVariableStorage.DequeueText);
            ItemTrackingLines."Quantity (Base)".SETVALUE(1);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@31(VAR ItemTrackingSummary@1000 : TestPage 6500);
    VAR
      BinQuantity@1002 : Variant;
      QuantityVariant@1004 : Variant;
      LotNo@1001 : Variant;
      Quantity@1003 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(QuantityVariant);
      LibraryVariableStorage.Dequeue(BinQuantity);
      LibraryVariableStorage.Dequeue(LotNo);
      Quantity := QuantityVariant;
      ItemTrackingSummary."Lot No.".ASSERTEQUALS(LotNo);
      ItemTrackingSummary."Total Quantity".ASSERTEQUALS(2 * Quantity);
      ItemTrackingSummary."Total Available Quantity".ASSERTEQUALS(2 * Quantity);
      ItemTrackingSummary."Total Requested Quantity".ASSERTEQUALS(0);  // Total Requested Quantity must be zero before assigning the Lot No.
      ItemTrackingSummary."Bin Content".ASSERTEQUALS(BinQuantity);
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingListPageHandler@71(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InvokeItemTrackingSummaryPageHandler@23(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE RegisterWhseMessageHandler@18(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
      Assert.IsTrue(STRPOS(Message,RegisterWhseMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@12(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      WhseItemTrackingLines.Quantity.SETVALUE(WhseItemTrackingLines.Quantity3.ASINTEGER);
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerForReservation@138(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
      OptionValue@1003 : Variant;
      ConfirmOption@1005 : Option;
      OptionString@1004 : 'SerialSpecificTrue,SerialSpecificFalse';
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      ConfirmOption := OptionValue;  // To convert Variant into Option.
      CASE ConfirmOption OF
        OptionString::SerialSpecificTrue:
          Reply := TRUE;
        OptionString::SerialSpecificFalse:
          Reply := FALSE;
      END;
    END;

    [ConfirmHandler]
    PROCEDURE DummyConfirmHandler@103(ConfirmMessage@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@60(VAR Reservation@1000 : TestPage 498);
    VAR
      OptionValue@1004 : Variant;
      OptionString@1005 : 'ReserveFromCurrentLine,CancelReservFromCurrentLine,VerifyQuantity';
      ReservationOption@1003 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      ReservationOption := OptionValue;  // To convert Variant into Option.
      CASE ReservationOption OF
        OptionString::ReserveFromCurrentLine:
          Reservation."Reserve from Current Line".INVOKE;
        OptionString::CancelReservFromCurrentLine:
          BEGIN
            Reservation.CancelReservationCurrentLine.INVOKE;
            Reservation.QtyReservedBase.ASSERTEQUALS(0);
          END;
      END;
      Reservation.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@100(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler@99(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal.ItemTrackingLines.INVOKE;
      ProductionJournal."Output Quantity".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      ProductionJournal.Post.INVOKE;
    END;

    LOCAL PROCEDURE AssignLotNos@121(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LinesToProcess@1001 : Integer;
      LotNo@1002 : Text;
      LotQty@1003 : Decimal;
    BEGIN
      WITH ItemTrackingLines DO BEGIN
        FIRST;
        FOR LinesToProcess := LibraryVariableStorage.DequeueInteger DOWNTO 1 DO BEGIN
          LotNo := LibraryVariableStorage.DequeueText;
          LotQty := LibraryVariableStorage.DequeueDecimal;
          "Lot No.".SETVALUE(LotNo);
          "Quantity (Base)".SETVALUE(LotQty);
          NEXT;
        END;
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [SCM]
      Test for Item Tracking:
        1. Verify Expiration Date on Item Tracking Line on Item Journal.
        2. Verify available Lot No. and Bin Content on Item Tracking Line for Sales Order with Bin.
        3. Verify available Lot No. and Bin Content on Item Tracking Line for Sales Order without Bin.
        4. Verify Get Bin Content on Transfer Order after posting Purchase Order.
        5. Verify Revaluation Journal after posting Purchase Order with Item Tracking.
        6. Verify Item Tracking Message using Sales Line, verification done in ConfirmHandler.
        7. Verify error for Sales Line deletion.
        8. Verify error for deleted Reservation Entry.
        9. Verify error message while using False on Confirmation message.
       10. Verify Reservation Entry is showing the entry after getting an error.
       11. Verify error message while posting Sales Order.
       12. Verify Reservation Message after deleting Sales Line.
       13. Verify Item Tracking Message using Sales Line with Item Tracking and Reservation.
       14. Verify QtyReserve and Cancel Reservation From Current Line message.
       15. Verify Item Tracking Message using Sales Line with Order Tracking.
       16. Verify Reservation Message after deleting Sales Line using Order Tracking.
       17. Verify error for Sales Line deletion using Order Tracking.
       18. Verify Item Tracking Message using Delete Sales Line with Item Tracking and and Bin.
       19. Verify Reservation error message after deleting Sales Line using Bin and Item Tracking.
       20. Verify Item Tracking Message using Delete Sales Line with Item Tracking and Warehouse Shipment
       21. Verify Warehouse Shipment exit error using Item Tracking Message using Delete Sales Line with Item Tracking and Warehouse Shipment
       22. Verify Warehouse Shipment error after create and delete Warehouse Shipment Line.
       23. Verify Item Tracking Message using Delete Purchase Line.
       24. Verify error for Purchase Line deletion.
       25. Verify error for deleted Reservation Entry.
       26. Verify error while posting Purchase Order after deleting Item Tracking Lines.
       27. Verify error while finding Purchase Order after deleting Item Tracking Lines and Purchase Header.
       28. Verify Item Tracking Message while deleting Purchase Order.
       29. Verify Reservation Entry error after deleting Purchase Order.
       30. Verify error for deleted Requisition Line.
       31. Verify error for deleted Reservation Entry.
       32. Verify Item Tracking error message while deleting Item Journal Lines.
       33. Verify Reservation Entry must be exist after creating Item Journal Line with Item Tracking Line.
       34. Verify error for deleted Requisition Line with Component Line.
       35. Verify Reservation Entry error for deleted Requisition Line with Component Line.
       36. Verify error message for deletion of Production Order Line with Item Tracking.
       37. Verify Reservation Entry must be exist after creating Released Production Order with Item Tracking Line.
       38. Verify message while deleting Production Order.
       39. Verify error message for deletion of Production Order Component with Item Tracking.
       40. Verify Reservation Entry must be exist after creating Released Production Order with Component Item and Item Tracking Line.
       41. Verify error while deleting Transfer Line with Item Tracking.
       42. Verify Reservation Entry must be exist after creating Transfer Order with Item Tracking Line.
       43. Verify message while deleting Transfer Order.
       44. Can post Warehouse Shipment for tracked Item, first partially picked, then Warehouse Pick deleted.
       45. Can post Warehouse Shipment for partially produced and picked tracked Item.
       46. Warehouse Pick posted successfully when having two items, first is Lot tracked, second is not tracked.

      Covers Test cases: for WI - 286214
      ----------------------------------------------------
      Test Function Name                          TFS ID
      ----------------------------------------------------
      ItemJournalWithItemTracking                 127594

      Covers Test cases: for WI - 286215
      ----------------------------------------------------
      Test Function Name                          TFS ID
      ----------------------------------------------------
      LotTrackingOnSalesOrderWithBin              127644
      LotTrackingOnSalesOrderWithoutBin           127645

      Covers Test cases: for WI - 284723
      ----------------------------------------------------
      Test Function Name                          TFS ID
      ----------------------------------------------------
      GetBinContentUsingTransferOrder             142545

      Covers Test cases: for WI - 243255
      ----------------------------------------------------
      Test Function Name                          TFS ID
      ----------------------------------------------------
      RevaluationJournalWithSerialNo              142538

      Covers Test cases: for WI - 302770
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                           TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      MessageWithDeleteSalesLineIT, ErrorForDeletedSalesLine, ReservEntryErrorForDeletedSalesLine                                  129220
      ConfirmErrorForDeletedSalesLine, ReservEntryForDeletedSalesLineITWithConfirmFalse, PostErrorForDeleteSalesLineIT

      Covers Test cases: for WI - 304927
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                           TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      ReservErrorUsingDeleteSalesLineITWithCancelReserv, MessageUsingDeleteSalesLineITWithCancelReserv                             129220
      CancelReservMessageUsingSalesLineWithIT, MessageUsingDeleteSalesLineWithOrderTracking, ErrorUsingDeleteSalesLineWithOrderTracking
      DeleteSalesLineErrorUsingOrderTracking, DeleteSalesLineWithBinAndIT, ReservEntryUsingDeleteSalesLineWithBinAndIT
      DeleteSalesLineUsingWhseShptWithIT, WhseShptErrorUsingDeleteSalesLineWithIT, WhseShptErrorAfterDeleteWhseShptLine

      Covers Test cases: for WI - 304927
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                           TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      ITMessageUsingDeletePurchaseLine, DeletePurchaseLineErrorWithIT, ReservEntryErrorUsingDeletePurchaseLineWithIT               129221
      SerialNoErrorUsingDeletePurchaseLineWithIT, PurchaseHeaderExistErrorWithIT, MessageUsingDeletePOWithIT,
      ReservEntryErrorAfterDeletePOWithIT
      ErrorWithDeleteRequisitionLine, ReservEntryErrorForDeletedRequistionLine                                                      129222
      ErrorForDeleteItemJnlLineWithIT, ReservEntryUsingItemJnlLineWithIT                                                           129224

      Covers Test cases: for WI - 306227
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                           TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      ErrorForDeletedPlanningWkshWithComponent, ErrorWithReservEntryForDeletedPlanningWksh                                         129223
      ProdOrderDeletionError, ReservEntryForProdOrderWithIT, DeleteProdOrderHeader                                                 129226
      DeletionErrorWithProdOrderComponent, ReservEntryUsingProdOrderComponent                                                      129227
      DeletionErrorUsingTransferLine, ReservEntryUsingTransferOrder, DeletionForTransferOrder                                      129228

      Covers Test cases: for WI - 123680
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                           TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      PostWhseShptAfterPickDeletion                                                                                                219555
      PostWhseShptPartiallyPickedProductionItem                                                                                    123680

      Covers Test cases: for WI - 362441
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                           TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      RegisterPickWithDiffTrackedItems                                                                                             362441
    }
    END.
  }
}

