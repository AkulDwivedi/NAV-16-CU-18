OBJECT Codeunit 131003 Library - Text File Validation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NoSuchFieldPositionErr@1004 : TextConst 'ENU=There is no field position %1 in the line.';

    PROCEDURE NewFindLineWithValue@1(FileName@1000 : Text;StartingPosition@1001 : Integer;FieldLength@1002 : Integer;Value@1003 : Text) Line : Text;
    VAR
      NewFileName@1004 : Text[1024];
      NewValue@1005 : Text[1024];
    BEGIN
      NewFileName := COPYSTR(FileName,1);
      NewValue := COPYSTR(Value,1);

      EXIT(FindLineWithValue(NewFileName,StartingPosition,FieldLength,NewValue));
    END;

    PROCEDURE FindLineWithValue@1001(FileName@1000 : Text;StartingPosition@1001 : Integer;FieldLength@1002 : Integer;Value@1003 : Text) Line : Text;
    VAR
      File@1006 : File;
      InStr@1004 : InStream;
      FieldValue@1008 : Text[1024];
    BEGIN
      File.TEXTMODE(TRUE);
      File.OPEN(FileName);
      File.READ(Line);
      File.CREATEINSTREAM(InStr);
      WHILE (NOT InStr.EOS) AND (FieldValue <> Value) DO BEGIN
        InStr.READTEXT(Line);
        FieldValue := COPYSTR(Line,StartingPosition,FieldLength);
      END;
      IF FieldValue <> Value THEN
        Line := '';  // If value is not found in the file, this will return an empty line.
    END;

    PROCEDURE FindLineContainingValue@2(FileName@1000 : Text;StartingPosition@1001 : Integer;FieldLength@1002 : Integer;Value@1003 : Text) Line : Text;
    VAR
      File@1006 : File;
      InStr@1004 : InStream;
      FieldValue@1008 : Text[1024];
    BEGIN
      File.TEXTMODE(TRUE);
      File.OPEN(FileName);
      File.READ(Line);
      File.CREATEINSTREAM(InStr);
      WHILE (NOT InStr.EOS) AND (STRPOS(FieldValue,Value) = 0) DO BEGIN
        InStr.READTEXT(Line);
        FieldValue := COPYSTR(Line,StartingPosition,FieldLength);
      END;
      IF STRPOS(FieldValue,Value) = 0 THEN
        Line := '';  // If value is not found in the file, this will return an empty line.
    END;

    PROCEDURE DoesFileContainValue@3(FileName@1000 : Text;Value@1003 : Text) : Boolean;
    VAR
      StreamReader@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Line@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      StreamReader := StreamReader.StreamReader(FileName);
      Line := StreamReader.ReadLine;
      WHILE NOT ISNULL(Line) DO BEGIN
        Line := StreamReader.ReadLine;
        IF NOT ISNULL(Line) THEN
          IF Line.Contains(Value) THEN
            EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE CountNoOfLinesWithValue@1002(FileName@1001 : Text;Value@1003 : Text[1024];StartingPosition@1004 : Integer;FieldLength@1005 : Integer) NoOfLines : Integer;
    VAR
      File@1006 : File;
      InStr@1007 : InStream;
      Line@1008 : Text[1024];
      FieldValue@1009 : Text[1024];
    BEGIN
      NoOfLines := 0;
      File.TEXTMODE(TRUE);
      File.OPEN(FileName);
      File.CREATEINSTREAM(InStr);
      WHILE NOT InStr.EOS DO BEGIN
        InStr.READTEXT(Line);
        FieldValue := COPYSTR(Line,StartingPosition,FieldLength);
        IF FieldValue = Value THEN
          NoOfLines += 1;
      END;
    END;

    PROCEDURE ReadLine@1003(FileName@1004 : Text;LineNumber@1005 : Integer) Line : Text[1024];
    VAR
      File@1008 : File;
      InStr@1000 : InStream;
      i@1011 : Integer;
    BEGIN
      File.TEXTMODE(TRUE);
      File.OPEN(FileName);
      File.CREATEINSTREAM(InStr);
      FOR i := 1 TO LineNumber DO
        InStr.READTEXT(Line);
    END;

    PROCEDURE ReadValue@1000(Line@1000 : Text[1024];StartingPosition@1001 : Integer;Length@1002 : Integer) FieldValue : Text[1024];
    BEGIN
      FieldValue := COPYSTR(Line,StartingPosition,Length);
    END;

    PROCEDURE ReadValueFromLine@1008(FileName@1001 : Text[1024];LineNumber@1000 : Integer;StartingPosition@1003 : Integer;Length@1004 : Integer) FieldValue : Text[1024];
    VAR
      Line@1002 : Text[1024];
    BEGIN
      Line := ReadLine(FileName,LineNumber);
      FieldValue := ReadValue(Line,StartingPosition,Length);
    END;

    PROCEDURE ReadField@1005(Line@1000 : Text;FieldPosition@1001 : Integer;Delimiter@1002 : Text[1]) FieldValue : Text;
    VAR
      CurrFieldPos@1003 : Integer;
      Pos@1004 : Integer;
      LastField@1006 : Boolean;
    BEGIN
      CurrFieldPos := 1;
      REPEAT
        Pos := STRPOS(Line,Delimiter);
        LastField := Pos = 0;
        IF LastField THEN BEGIN
          IF FieldPosition <> CurrFieldPos THEN
            ERROR(STRSUBSTNO(NoSuchFieldPositionErr,FieldPosition));
          FieldValue := Line;
        END ELSE
          FieldValue := COPYSTR(Line,1,Pos - 1);
        Line := COPYSTR(Line,Pos + 1);
        CurrFieldPos += 1;
      UNTIL FieldPosition < CurrFieldPos;
      EXIT(FieldValue);
    END;

    LOCAL PROCEDURE AreEqualValues@1010(ActualValue@1000 : ARRAY [5] OF Text;ExpectedValue@1001 : ARRAY [5] OF Text) AreEqual : Boolean;
    VAR
      i@1002 : Integer;
    BEGIN
      AreEqual := TRUE;
      FOR i := 1 TO ARRAYLEN(ActualValue) DO
        AreEqual := AreEqual AND (ActualValue[i] = ExpectedValue[i]);
      EXIT(AreEqual);
    END;

    PROCEDURE FindLineWithValues@1011(FileName@1000 : Text[1024];StartingPosition@1001 : ARRAY [5] OF Integer;FieldLength@1002 : ARRAY [5] OF Integer;ExpectedValue@1003 : ARRAY [5] OF Text) Line : Text[1024];
    VAR
      File@1006 : File;
      InStr@1004 : InStream;
      ActualValue@1008 : ARRAY [5] OF Text;
      AreEqual@1010 : Boolean;
    BEGIN
      File.TEXTMODE(TRUE);
      File.OPEN(FileName);
      File.READ(Line);
      File.CREATEINSTREAM(InStr);
      WHILE (NOT InStr.EOS) AND NOT AreEqual DO BEGIN
        InStr.READTEXT(Line);
        GetFieldValues(Line,StartingPosition,FieldLength,ActualValue);
        AreEqual := AreEqualValues(ActualValue,ExpectedValue);
      END;
      IF NOT AreEqual THEN
        Line := '';  // If value is not found in the file, this will return an empty line.
    END;

    PROCEDURE FindLineNoWithValue@1012(FileName@1000 : Text[1024];StartingPosition@1001 : Integer;FieldLength@1002 : Integer;Value@1003 : Text[1024];Occurrence@1004 : Integer) LineNo : Integer;
    VAR
      File@1005 : File;
      InStr@1006 : InStream;
      FieldValue@1007 : Text[1024];
      Line@1008 : Text[1024];
      OccurrenceNo@1009 : Integer;
    BEGIN
      OccurrenceNo := 0;
      File.TEXTMODE(TRUE);
      File.OPEN(FileName);
      File.READ(Line);
      LineNo := 0;
      File.CREATEINSTREAM(InStr);
      WHILE (NOT InStr.EOS) AND (OccurrenceNo <> Occurrence) DO BEGIN
        InStr.READTEXT(Line);
        FieldValue := COPYSTR(Line,StartingPosition,FieldLength);
        LineNo += 1;
        IF FieldValue = Value THEN
          OccurrenceNo += 1;
      END;
      IF (FieldValue <> Value) OR (OccurrenceNo <> Occurrence) THEN
        LineNo := 0;  // If value is not found in the file, this will return 0
    END;

    LOCAL PROCEDURE GetFieldValues@1013(Line@1000 : Text;StartingPosition@1001 : ARRAY [5] OF Integer;FieldLength@1002 : ARRAY [5] OF Integer;VAR ActualValue@1003 : ARRAY [5] OF Text);
    VAR
      i@1004 : Integer;
    BEGIN
      CLEAR(ActualValue);
      FOR i := 1 TO ARRAYLEN(ActualValue) DO
        IF FieldLength[i] > 0 THEN
          ActualValue[i] := COPYSTR(Line,StartingPosition[i],FieldLength[i]);
    END;

    BEGIN
    {
      // Contains functions for text file validation.
    }
    END.
  }
}

