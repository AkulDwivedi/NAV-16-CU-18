OBJECT Codeunit 137275 SCM Inventory Journals
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ReclassificationItemJournalTemplate@1018 : Record 82;
      ReclassificationItemJournalBatch@1017 : Record 233;
      LibraryDimension@1042 : Codeunit 131001;
      LibraryERM@1037 : Codeunit 131300;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryItemTracking@1048 : Codeunit 130502;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryPurchase@1016 : Codeunit 130512;
      LibraryVariableStorage@1033 : Codeunit 131004;
      LibraryWarehouse@1032 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      AdjustCostItemEntriesBatchJobMessage@1039 : TextConst 'ENU=Some unadjusted value entries will not be covered with the new setting.';
      ChangeAverageCostCalcType@1040 : TextConst 'ENU=If you change the Average Cost Calc. Type, the program must adjust all item entries.';
      ChangeAverageCostCalcTypeMessage@1041 : TextConst 'ENU=Average Cost Calc. Type has been changed to';
      SerialNoListPageCaption@1007 : TextConst 'ENU=Serial No. Information List';
      ValidationError@1006 : TextConst 'ENU=Caption must be same.';
      SerialNoError@1003 : TextConst 'ENU=Serial No. %1 is already on inventory.';
      Assert@1008 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      GlobalNewSerialNo@1009 : Code[20];
      GlobalNewLotNo@1022 : Code[20];
      GlobalItemNo@1013 : Code[20];
      GlobalOriginalQuantity@1015 : Decimal;
      GlobalItemTrackingAction@1014 : 'SelectEntriesSerialNo,SelectEntriesLotNo,AssignSerialNo,EditItemTrackingSerialNo,EditItemTrackingLotNo,EditNewSerialNo,AssignLotNo,EditNewLotNo,CopyInfo,LotNoAvailability,EditLotNo,ModifyQuantity,EditLotNoInformation,EditTrackedQuantity,EditQuantityBase,ItemTrackingSerialAndLot';
      GlobalExpirationDate@1012 : Date;
      GlobalDescription@1011 : Text[50];
      GlobalComment@1010 : Text[80];
      AvailabilityWarning@1005 : TextConst 'ENU=There are availability warnings on one or more lines.';
      SerialNoConfirmaton@1019 : TextConst 'ENU=Do you want to overwrite the existing information?';
      LotNoListPageCaption@1026 : TextConst 'ENU=Lot No. Information List';
      LotNoError@1025 : TextConst '@@@=%1:TableCaption1,%2:FieldCaption1,%3:Value1,%4:FieldCaption2,%5:FieldCaption3,%6::Value2;ENU="The %1 does not exist. Identification fields and values: %2=''%3'',%4='''',%5=''%6''"';
      LotNoInformationError@1023 : TextConst 'ENU=Do you want to overwrite the existing information?';
      LocationErr@1034 : TextConst 'ENU=Wrong Location Code in Item Journal Line.';
      NewExpirationDate@1021 : TextConst 'ENU=You have insufficient quantity of Item';
      NothingToPost@1020 : TextConst 'ENU=There is nothing to post.';
      ErrorMustMatch@1031 : TextConst 'ENU=Error must be same.';
      CorrectionsError@1030 : TextConst 'ENU=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?';
      BlockedLotNoInformationError@1029 : TextConst '@@@=%1:FieldCaption1,%2:TableCaption1,%3:FieldCaption2,%4:Value1,%5:FieldCaption3,%6:FieldCaption4,%7::Value2;ENU="%1 must be equal to ''No''  in %2: %3=%4, %5=, %6=%7. Current value is ''Yes''."';
      QuantityError@1028 : TextConst 'ENU=Quantity must be positive.';
      QuantityErr@1043 : TextConst 'ENU=Quantity must be same.';
      LotNumberError@1027 : TextConst '@@@=%1:Value1;ENU=You must assign a lot number for item %1.';
      QtyToHandleBaseError@1024 : TextConst '@@@=%1:FieldCaption1,%2:FieldCaption2,%3:Value1,%4:FieldCaption3,%5:FieldCaption4,%6::Value2,%7::Value3,%8::Value4,;ENU=%1 in Tracking Specification for %2 %3, %4: , %5: %6 is currently %7. It must be %8.';
      RegisteredMessage@1035 : TextConst 'ENU=The journal lines were successfully registered.';
      NotOnInventoryError@1036 : TextConst 'ENU=You have insufficient quantity of Item %1 on inventory.';
      ValueNotMatchedError@1038 : TextConst 'ENU=Value must be same.';
      ItemJournalLineNotExistErr@1044 : TextConst 'ENU=%1 with Variant %2, Location %3, Bin %4 is not exist.';
      QtyCalculatedErr@1045 : TextConst 'ENU=Qty. Calculated is not correct for %1 with Variant %2, Location %3, Bin %4.';
      ItemExistErr@1050 : TextConst 'ENU=Item No. must have a value';
      ItemJournalLineDimErr@1046 : TextConst 'ENU=Dimensions on Item Journal Line should be same as on Item Ledger Entry if Calculate Inventory using By Dimensions';
      ByDimensionFilteringErr@1047 : TextConst 'ENU=You must not filter on dimensions if you calculate locations with Bin Mandatory is Yes';

    [Test]
    PROCEDURE ItemJournalWithMultipleUOM@1();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1005 : Record 83;
      ItemLedgerEntry@1006 : Record 32;
      UnitOfMeasureCode@1001 : Code[10];
    BEGIN
      // Verify Unit Of Measure and Quantity on Item Ledger Entry after posting Item Journal with different Unit Of Measure Code.

      // Setup: Create Item, Item unit Of Measure and two Item Journal Lines with different Unit Of Measure Code and Quantity.
      Initialize;
      CreateItem(Item,Item."Costing Method"::FIFO);
      UnitOfMeasureCode := CreateItemUnitOfMeasure(Item."No.");
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",WORKDATE,LibraryRandom.RandInt(10));  // Use Random value for Unit Amount.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name",ItemJournalLine."Entry Type",
        Item."No.",2 * ItemJournalLine.Quantity);  // Use Random value for Quantity.
      ModifyUnitOfMeasureOnItemJournal(ItemJournalLine,UnitOfMeasureCode);

      // Exercise: Post Item Journal Lines.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify Item Ledger Entry for Quantity.
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.SETRANGE("Unit of Measure Code",ItemJournalLine."Unit of Measure Code");
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,ItemJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,AvailabilityConfirmationHandler)]
    PROCEDURE ItemTrackingOnItemReclassJournal@83();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify New Expiration Date and New Serial No. on Item Tracking Lines page.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::AssignSerialNo,LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,
        GlobalItemTrackingAction::AssignSerialNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verify New Expiration Date and New Serial No. on Item Tracking Lines page, Verification done in 'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,SerialNoInformationListPageHander,SerialNumberConfirmationHandler)]
    PROCEDURE CopyInfoOnSerialNoInformationCard@6();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Serial No. Information List page caption.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditItemTrackingSerialNo,LibraryUtility.GetGlobalNoSeriesCode,
        FALSE,TRUE,GlobalItemTrackingAction::AssignSerialNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verification done in 'Serial No. Information List page' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,InvokeSerialNoInformationListPageHander,SerialNumberConfirmationHandler)]
    PROCEDURE PostItemReclassJournalWithItemTracking@3();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Posting of Item Reclass. Journal.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditItemTrackingSerialNo,LibraryUtility.GetGlobalNoSeriesCode,
        FALSE,TRUE,GlobalItemTrackingAction::AssignSerialNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      LibraryInventory.PostItemJournalLine(
        ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Serial Number on Item Ledger Entry.
      VerifySerialNoOnItemLedgerEntry;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,InvokeSerialNoInformationListPageHander,SerialNumberConfirmationHandler)]
    PROCEDURE ItemReclassJournalWithExistingItemTrackingError@18();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Error message after Posting Item Reclass. Journal while updating New Serial No. with existing Serial Number.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditNewSerialNo,LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,
        GlobalItemTrackingAction::AssignSerialNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNoError,GlobalNewSerialNo));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmationHandler)]
    PROCEDURE ItemTrackingUsingLotOnItemReclassJournal@10();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify New Lot No. on Item Tracking Lines page.

      // Setup: Create and post Purchase Order with Item Tracking and Item without Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::AssignLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verify New Lot No. on Item Tracking Lines page, Verification done in ItemTrackingPageHandler'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,LotNoInformationListPageHander,ConfirmationHandler)]
    PROCEDURE CopyInfoOnLotlNoInformationCard@29();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Lot No. Information List page caption.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditItemTrackingLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,
        FALSE,GlobalItemTrackingAction::AssignLotNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verification done in 'LotNoInformationListpage' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,InvokeLotNoInformationListPageHander,ConfirmationHandler)]
    PROCEDURE PostItemReclassJournalWithLotNo@52();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Posting of Item Reclass. Journal with Item Tracking Lot Number.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditItemTrackingLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,
        FALSE,GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      LibraryInventory.PostItemJournalLine(
        ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Lot Number on Item Ledger Entry.
      VerifyLotNoOnItemLedgerEntry;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemReclassJournalWithExistingLotNoError@64();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
      LotNoInformation@1003 : Record 6505;
    BEGIN
      // Verify Error message after Posting Item Reclass. Journal while updating New Lot No. with existing Lot Number.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditNewLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      UpdateItemTrackingCode(TRUE,TRUE);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          LotNoError,LotNoInformation.TABLECAPTION,LotNoInformation.FIELDCAPTION("Item No."),GlobalItemNo,
          ReclassificationItemJournalLine.FIELDCAPTION("Variant Code"),
          ReclassificationItemJournalLine.FIELDCAPTION("Lot No."),GlobalNewLotNo));

      // Tear Down.
      UpdateItemTrackingCode(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,LotNoInformationListPageHander,LotNoInformationConfirmHandler)]
    PROCEDURE CopyInfoOnLotlNoInformationCardError@38();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Error message on Lot No. Information Card using Copy Info.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::CopyInfo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verify Error message, verification done in 'LotNoInformationConfirmHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,AvailabilityConfirmHandler)]
    PROCEDURE AvailabilityErrorOnLotlNoInformationCard@51();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Lot No. Availability warning.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::LotNoAvailability,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verify error message, verification done in 'AvailabilityConfirmHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ConfirmationHandler)]
    PROCEDURE NewExpirationDateError@89();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Error message after Posting Item Reclass. Journal while updating Lot Number.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(NewExpirationDate);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ConfirmationHandler,NothingToPostConfirmHandler)]
    PROCEDURE ItemReclassJournalPostingError@133();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
      ItemReclassJournal@1004 : TestPage 393;
    BEGIN
      // Verify Error message while posting Item Reclass. Journal using page.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::SelectEntriesLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal using page.
      ItemReclassJournal.OPENEDIT;
      ItemReclassJournal.FILTER.SETFILTER("Document No.",ReclassificationItemJournalLine."Document No.");
      ItemReclassJournal.Post.INVOKE;

      // Verify: Verify that the application generates an error as 'There is nothing to post', verification done in 'NothingToPostConfirmHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,InvokeLotNoInformationListPageHander,ConfirmationHandler)]
    PROCEDURE InventoryOnLotNoInformation@25();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
      LotNoInformation@1001 : Record 6505;
    BEGIN
      // Verify values on Lot No. Information after posting Recalss. Journal.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditItemTrackingLotNo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,
        FALSE,GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      LibraryInventory.PostItemJournalLine(
        ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify values on Lot No. Information after posting Recalss. Journal.
      FindLotNoInformation(LotNoInformation,ReclassificationItemJournalLine."Item No.");
      LotNoInformation.CALCFIELDS(Inventory,Comment);
      LotNoInformation.TESTFIELD(Comment,TRUE);
      Assert.AreEqual(LotNoInformation.Inventory,ReclassificationItemJournalLine.Quantity,ErrorMustMatch);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,InvokeLotNoInformationListPageHander,InvokeSerialNoInformationListPageHander,ConfirmationHandler)]
    PROCEDURE SerialAndLotNoOnItemTrackingComment@42();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
      LotNoInformation@1001 : Record 6505;
      ItemTrackingComment@1002 : Record 6506;
    BEGIN
      // Verify values on Item Tracking Comment using Recalss. Journal.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::ItemTrackingSerialAndLot,LibraryUtility.GetGlobalNoSeriesCode,TRUE,
        FALSE,GlobalItemTrackingAction::AssignLotNo);

      // Exercise.
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Verify: Verify values on Item Tracking Comment.
      FindLotNoInformation(LotNoInformation,ReclassificationItemJournalLine."Item No.");
      FindItemTrackingComment(ItemTrackingComment,ItemTrackingComment.Type::"Lot No.",LotNoInformation."Item No.");
      ItemTrackingComment.TESTFIELD("Serial/Lot No.",LotNoInformation."Lot No.");

      FindItemTrackingComment(ItemTrackingComment,ItemTrackingComment.Type::"Serial No.",LotNoInformation."Item No.");
      ItemTrackingComment.TESTFIELD("Serial/Lot No.",GlobalNewSerialNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,CorrectionsConfirmHandler)]
    PROCEDURE ItemTrackingLineErrorWithUpdatedQuantity@80();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Corrections error message on Item Tracking Lines page while taking greater Quantity (Base).

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::ModifyQuantity,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);

      // Exercise.
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Verify: Verification done in 'CorrectionsPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,InvokeLotNoInformationListPageHander,ConfirmationHandler)]
    PROCEDURE LotNoInformationErrorWithBlockedTrue@76();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
      LotNoInformation@1001 : Record 6505;
    BEGIN
      // Verify posting Recalss. Journal with Blocked TRUE on Lot No. Information Card page.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditLotNoInformation,LibraryUtility.GetGlobalNoSeriesCode,TRUE,
        FALSE,GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Exercise: Post Item Reclass. Journal.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          BlockedLotNoInformationError,LotNoInformation.FIELDCAPTION(Blocked),LotNoInformation.TABLECAPTION,
          LotNoInformation.FIELDCAPTION("Item No."),GlobalItemNo,ReclassificationItemJournalLine.FIELDCAPTION("Variant Code"),
          ReclassificationItemJournalLine.FIELDCAPTION("Lot No."),GlobalNewLotNo));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,LotNoInformationListPageHander,LotNoInformationConfirmHandlerFalse)]
    PROCEDURE LotNoInformationUsingCopyInfo@146();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify message on Lot No. Information Card using Copy Info and verify value of Lot No on Lot No. Information same as Item Tracking Line.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::CopyInfo,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);

      // Exercise:
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);  // Assign Item Tracking on page handler.

      // Verify: Verify Error message, verification done in 'LotNoInformationConfirmHandlerFalse' and 'ItemTrackingLinesPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,InvokeLotNoInformationListPageHander,ConfirmationHandler)]
    PROCEDURE ItemTrackingLinesNegativeQuantityBaseError@215();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify error message while taking negative Quantity (Base) in Item Tracking Line.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditTrackedQuantity,LibraryUtility.GetGlobalNoSeriesCode,TRUE,
        FALSE,GlobalItemTrackingAction::AssignLotNo);

      // Exercise.
      ASSERTERROR ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Verify: Verify Error message.
      Assert.ExpectedError(QuantityError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ConfirmationHandler)]
    PROCEDURE ReclassJournalWithItemTrackingError@277();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify error message while posting Reclassification Journal with Lot Number.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::ModifyQuantity,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Exercise.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(LotNumberError,ReclassificationItemJournalLine."Item No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingLinesQuantityHandleBaseError@311();
    VAR
      ReclassificationItemJournalLine@1000 : Record 83;
      TrackingSpecification@1005 : Record 336;
    BEGIN
      // Verify error message while taking less Quantity (Base) on Item Tracking Line than Reclass Journal Quantity.

      // Setup: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      Initialize;
      ReclassificationJournalWithPurchaseOrder(
        ReclassificationItemJournalLine,GlobalItemTrackingAction::EditQuantityBase,LibraryUtility.GetGlobalNoSeriesCode,TRUE,FALSE,
        GlobalItemTrackingAction::AssignLotNo);
      ReclassificationItemJournalLine.OpenItemTrackingLines(TRUE);    // Assign Item Tracking on page handler.

      // Exercise.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          QtyToHandleBaseError,TrackingSpecification.FIELDCAPTION("Qty. to Handle (Base)"),
          ReclassificationItemJournalLine.FIELDCAPTION("Item No."),GlobalItemNo,
          ReclassificationItemJournalLine.FIELDCAPTION("Serial No."),ReclassificationItemJournalLine.FIELDCAPTION("Lot No."),
          GlobalNewLotNo,ReclassificationItemJournalLine.Quantity - 1,ReclassificationItemJournalLine.Quantity));
    END;

    [Test]
    PROCEDURE RevaluationJournalDimension@13();
    VAR
      DefaultDimension@1002 : Record 352;
      Item@1000 : Record 27;
      DimensionSetID@1003 : Integer;
    BEGIN
      // Verify Dimension on Revaluation Journal after posting Transfer Order and running Calculate Inventory Value Report.

      // Setup: Create Item with Dimension, Create and post Transfer Order.
      Initialize;
      CreateItem(Item,Item."Costing Method"::FIFO);
      UpdateItemDimension(DefaultDimension,Item."No.");
      CreateAndPostTransferOrder(Item."No.");

      // Exercise.
      DimensionSetID := RunCalculateInventoryValueReport(DefaultDimension."No.");

      // Verify: Verify Dimension on Revaluation Journal.
      VerifyDimensionOnRevaluationJournal(DefaultDimension,DimensionSetID);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmationHandler)]
    PROCEDURE ReclassificationJournalUsingWarehouseReceipt@84();
    VAR
      Bin@1002 : Record 7354;
      BinContent@1001 : Record 7302;
      Location@1006 : Record 14;
      PurchaseLine@1000 : Record 39;
      WarehouseJournalLine@1007 : Record 7311;
      WarehouseJournalBatch@1009 : Record 7310;
    BEGIN
      // Verify Warehouse Reclassification Journal Line registered successfully.

      // Setup: Create Warehouse Receipt from Purchase Order, Post Warehouse Receipt and find Bin Content and Zone.

      // Enqueue values for Message Handler.
      LibraryVariableStorage.Enqueue(RegisteredMessage);

      CreateFullWarehouseSetup(Location);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseLine,Location.Code);
      PostWarehouseReceipt(PurchaseLine."Document No.");
      FindBinContent(BinContent,PurchaseLine."No.");
      FindBinWithZone(Bin,Location.Code,BinContent."Zone Code");

      CreateWarehouseJournalBatch(WarehouseJournalBatch,Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,
        BinContent."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",PurchaseLine."No.",PurchaseLine.Quantity);

      // Exercise.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Location.Code,FALSE);

      // Verify: Verify Posting message. Verification done in MessageHandler.
    END;

    [Test]
    [HandlerFunctions(ConfirmationHandler,NothingToPostConfirmHandler)]
    PROCEDURE ErrorOnReclassificationJournalWithLocation@23();
    VAR
      ReclassificationItemJournalLine@1016 : Record 83;
      ItemReclassJournal@1017 : TestPage 393;
      Qty@1000 : Decimal;
    BEGIN
      // Verify error message while posting Reclassfication Journal with Location and without New Location Code.

      // Setup:
      Initialize;
      Qty := LibraryRandom.RandDec(10,2);
      CreateItemReclassJournal(ReclassificationItemJournalLine,'','',Qty,Qty + LibraryRandom.RandDec(10,2));  // Use value blank for Location Code.

      // Exercise: Post Item Reclass. Journal using page.
      ItemReclassJournal.OPENEDIT;
      ItemReclassJournal.FILTER.SETFILTER("Document No.",ReclassificationItemJournalLine."Document No.");
      ItemReclassJournal.Post.INVOKE;

      // Verify: Verify 'Nothing To Post' message. Verification done in MessageHandler.
    END;

    [Test]
    PROCEDURE ErrorNotOnInventoryOnReclassificationJournal@112();
    VAR
      Location@1006 : Record 14;
      ReclassificationItemJournalLine@1016 : Record 83;
      Qty@1000 : Decimal;
    BEGIN
      // Verify error message while posting Reclassfication Journal with New Location Code.

      // Setup:
      Initialize;
      Qty := LibraryRandom.RandDec(10,2);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateItemReclassJournal(ReclassificationItemJournalLine,Location.Code,'',Qty,Qty + LibraryRandom.RandDec(10,2));

      // Exercise: Post Item Reclass. Journal with New Location Code.
      ASSERTERROR LibraryInventory.PostItemJournalLine(
          ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(NotOnInventoryError,ReclassificationItemJournalLine."Item No."));
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ChangeAverageCostCalcTypeConfirmHandler)]
    PROCEDURE ItemUnitCostWithNegativeInventory@35();
    VAR
      Item@1002 : Record 27;
      InventorySetup@1001 : Record 313;
      ItemJournalLine@1004 : Record 83;
      Location@1003 : Record 14;
      StockkeepingUnit@1008 : Record 5700;
      Quantity@1009 : Decimal;
      UnitAmount@1000 : Decimal;
    BEGIN
      // Verify updated Unit cost on Item when Inventory is negative.

      // Setup: Create Item and Stockkeeping Unit, create Location, post Sales entry.
      Initialize;
      LibraryVariableStorage.Enqueue(AdjustCostItemEntriesBatchJobMessage);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcType);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcTypeMessage);
      InventorySetup.GET;
      UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Adjustment"::Always,
        InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant");
      CreateItem(Item,Item."Costing Method"::Average);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,Location.Code,Item."No.",'');
      Quantity := LibraryRandom.RandDec(10,2);  // Use Random value for Quantity.
      UnitAmount := LibraryRandom.RandDec(100,2);  // Use Random value for Unit Amount.
      UpdateItemInventory(Item."No.",Location.Code,'',Quantity,ItemJournalLine."Entry Type"::Sale,LibraryRandom.RandDec(10,2));  // Use Random value for Unit Amount.

      // Exercise: Post Purchase entry.
      UpdateItemInventory(Item."No.",Location.Code,'',Quantity / 2,ItemJournalLine."Entry Type"::Purchase,UnitAmount);

      // Verify: Verify updated Unit Cost on Item.
      Item.GET(Item."No.");
      Assert.AreNearlyEqual(Item."Unit Cost",UnitAmount,LibraryERM.GetAmountRoundingPrecision,ValueNotMatchedError);

      // Tear Down.
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcType);
      LibraryVariableStorage.Enqueue(ChangeAverageCostCalcTypeMessage);
      UpdateInventorySetup(InventorySetup,InventorySetup."Automatic Cost Adjustment",InventorySetup."Average Cost Calc. Type");
    END;

    [Test]
    PROCEDURE ItemVariantDescriptionOnPhysInventoryLedgerEntry@32();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1003 : Record 83;
      ItemJournalBatch@1001 : Record 233;
      ItemVariant@1004 : Record 5401;
      PhysInventoryLedgerEntry@1005 : Record 281;
    BEGIN
      // Verify Item Variant Description is updated in Phys. Inventory Ledger when Calculate Inventory on Phys. Inventory Journal.

      // Setup: Create Item with Variant and update Inventory by posting Item Journal.
      Initialize;
      CreateItem(Item,Item."Costing Method"::FIFO);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      UpdateItemInventory(
        Item."No.",'',ItemVariant.Code,LibraryRandom.RandDec(10,2),ItemJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryRandom.RandDec(10,2));  // Use Random value for Quantity and Unit Amount.

      // Excercise: Post Physical Inventory Journal after Calculating Inventory.
      CreateAndPostPhysInventoryJournal(ItemJournalLine,ItemJournalBatch,Item."No.",TRUE);

      // Verify: Check Item Variant Description on Phys. Inventory Ledger.
      PhysInventoryLedgerEntry.SETRANGE("Item No.",ItemVariant."Item No.");
      PhysInventoryLedgerEntry.FINDFIRST;
      PhysInventoryLedgerEntry.TESTFIELD(Description,ItemVariant.Description);
    END;

    [Test]
    [HandlerFunctions(CalculateInventory,MultipleDimSelectionHandler)]
    PROCEDURE DimensionOnPhysInventoryJournal@24();
    VAR
      DefaultDimension@1002 : Record 352;
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1003 : Record 233;
      Location@1004 : Record 14;
      SelectedDimension@1006 : Record 369;
      BinCode@1005 : Code[20];
    BEGIN
      // Verify no Dimension is populated when Calculate Inventory on Phys. Inventory Journal with Bin Mandatory Location.

      // Setup: Create Item with different Dimensions, Create and post Item Journal.
      Initialize;
      BinCode := CreateLocationAndBin(Location);
      CreateItem(Item,Item."Costing Method"::FIFO);
      UpdateItemDimension(DefaultDimension,Item."No.");
      CreateAndPostItemJournal(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",'',Location.Code,BinCode,LibraryRandom.RandDec(10,2)); // Use Random values for Quantity.

      // Exercise: Create Phys. Inventory Journal and Calculate Inventory with By Dimensions.
      LibraryVariableStorage.Enqueue(DefaultDimension."Dimension Code");
      LibraryVariableStorage.Enqueue(Item."No.");
      ASSERTERROR RunCalculateInventoryByDimensions(ItemJournalBatch);
      Assert.ExpectedError(STRSUBSTNO(ByDimensionFilteringErr));

      // Tear Down
      SelectedDimension.DELETEALL;
    END;

    [Test]
    PROCEDURE DimensionOnPhysInventoryJournalWhenItemDefaultDimensionValueIsEmpty@111();
    VAR
      DefaultDimension@1002 : Record 352;
      Dimension@1007 : Record 348;
      DimensionValue@1008 : Record 349;
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1005 : Record 233;
      DimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Dimensions] [Calculate Inventory] [Default Dimension]
      // [SCENARIO 381581] Calculate Inventory report for Item where Default dimension value is not specified
      Initialize;

      // [GIVEN] Item where default dimension "Dim1" with value "Val1", second default dimension "Dim2" with value empty but mandatory
      CreateItem(Item,Item."Costing Method"::FIFO);
      UpdateItemDimension(DefaultDimension,Item."No.");
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      DefaultDimension.VALIDATE("Dimension Value Code",'');
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);

      // [GIVEN] Item Journal Line created with default dimension "Dim1" with value "Val1" matching Dimension Set ID = "DS"
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",WORKDATE,LibraryRandom.RandDec(10,2));
      DimSetID := ItemJournalLine."Dimension Set ID";
      // [GIVEN] Posted Item Journal Line with updated mandatory dimension "Dim2" with value "Val2"
      ItemJournalLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
      ItemJournalLine.VALIDATE("Dimension Set ID",
        LibraryDimension.CreateDimSet(ItemJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [WHEN] Run Calculate Inventory in Phys. Inventory Journal
      ItemJournalBatch.INIT;
      CreateAndPostPhysInventoryJournal(ItemJournalLine,ItemJournalBatch,Item."No.",FALSE);

      // [THEN] Phys. Inventory Journal is created with Dimension Set ID = "DS"
      ItemJournalLine.FIND;
      ItemJournalLine.TESTFIELD("Dimension Set ID",DimSetID);
    END;

    [Test]
    [HandlerFunctions(VerifyDimensionSetEntryHandler)]
    PROCEDURE CalcInventoryUsesDefaultDimOfItemIfByDimIsNotSetUpForBinMandatoryLocation@71();
    VAR
      DefaultDimension@1002 : Record 352;
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1003 : Record 233;
      Location@1004 : Record 14;
      BinCode@1005 : Code[20];
    BEGIN
      // [FEATURE] [Dimensions][Phys. Inventory Journal]
      // [SCENARIO 362270] Dimensions are copied to Item Journal Line from Item's Default Dimensions by "Calculate Inventory" job ran with blank "By Dimension" with Bin Mandatory Location
      Initialize;

      // [GIVEN] Item Ledger Entry with "Dimension Code" = "D" for Bin Mandatory Location
      // [GIVEN] Bin Mandatory Location
      BinCode := CreateLocationAndBin(Location);
      CreateItem(Item,Item."Costing Method"::FIFO);
      UpdateItemDimension(DefaultDimension,Item."No.");
      CreateAndPostItemJournal(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",'',Location.Code,BinCode,LibraryRandom.RandDec(10,2)); // Use Random values for Quantity.

      // [WHEN] Calculate Inventory where "By Dimensions" is blank
      CreateAndPostPhysInventoryJournal(ItemJournalLine,ItemJournalBatch,Item."No.",FALSE);

      // [THEN] Created Item Journal Line with dimension set to "D"
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch,Item."No.");
      LibraryVariableStorage.Enqueue(DefaultDimension);
      ItemJournalLine.ShowDimensions;
    END;

    [Test]
    [HandlerFunctions(VerifyDimensionSetEntryHandler)]
    PROCEDURE CalculateInventoryUsesDefaultDimensionOfItemIfByDimensionIsNotSetUp@59();
    VAR
      DefaultDimension@1002 : Record 352;
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      // [FEATURE] [Dimensions][Phys. Inventory Journal]
      // [SCENARIO 361495] Dimensions are copied to Item Journal Line from Item's Default Dimensions by "Calculate Inventory" job ran with blank "By Dimension"
      Initialize;

      // [GIVEN] Item with Default Dimension "D" = "X"
      CreateItem(Item,Item."Costing Method"::FIFO);
      UpdateItemDimensionUsingGlobal(DefaultDimension,Item."No.");
      CreateAndPostItemJournal(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",'','','',LibraryRandom.RandDec(10,2));

      // [WHEN] Calculate Inventory where "By Dimensions" is blank
      CreateAndPostPhysInventoryJournal(ItemJournalLine,ItemJournalBatch,Item."No.",FALSE);

      // [THEN] Created Item Journal Line has dimension "D" = "X"
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch,Item."No.");
      LibraryVariableStorage.Enqueue(DefaultDimension);
      ItemJournalLine.ShowDimensions;
    END;

    [Test]
    [HandlerFunctions(CalculateInventory,MultipleDimSelectionHandler)]
    PROCEDURE CalculateInventoryUsesDimensionOfItemJournalLineIfByDimensionIsSetUp@68();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1003 : Record 233;
      SelectedDimension@1004 : Record 369;
      DimSetID@1002 : ARRAY [2] OF Integer;
      DimCode@1005 : Code[20];
    BEGIN
      // [FEATURE] [Dimensions][Phys. Inventory Journal]
      // [SCENARIO 361495] Dimensions are copied through Item Journal Line by "Calculate Inventory" job ran with "By Dimension" not blank
      Initialize;

      // [GIVEN] Item Ledger Entry 1 with "Dimension Code" = "D" and "Dimension Value Code" = "C1"
      // [GIVEN] Item Ledger Entry 2 with Dimension Code = "D" and "Dimension Value Code" = "C2"
      CreateItem(Item,Item."Costing Method"::FIFO);
      DimCode := GetGlobalDimCode;

      CreateAndPostItemJournalWithDimension(
        DimSetID[1],DimCode,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(10,2));
      CreateAndPostItemJournalWithDimension(
        DimSetID[2],DimCode,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(10,2));

      // [WHEN] Calculate Inventory where "By Dimensions" is set to "D"
      LibraryVariableStorage.Enqueue(DimCode);
      LibraryVariableStorage.Enqueue(Item."No.");
      RunCalculateInventoryByDimensions(ItemJournalBatch);

      // [THEN] Created Item Journal Line 1 with "Dimension Code" = "D" and "Dimension Value Code" = "C1"
      // [THEN] Created Item Journal Line 2 with "Dimension Code" = "D" and "Dimension Value Code" = "C2"
      VerifyDimOnItemJournalLine(ItemJournalBatch,Item."No.",DimSetID);

      // Tear Down
      SelectedDimension.DELETEALL;
    END;

    [Test]
    [HandlerFunctions(CalculateInventoryIncludeItemWithoutTransactionHandler)]
    PROCEDURE CalcInventoryWithIncludeItemWithoutTransactionComplexLocationFilter@115();
    VAR
      Item@1002 : Record 27;
      Location@1001 : ARRAY [2] OF Record 14;
      LocationCode@1000 : ARRAY [2] OF Code[10];
    BEGIN
      // [FEATURE] [Phys. Inventory Journal]
      // [SCENARIO 378919] Two lines should be added in Phys. Inventory Journal after setting Location Filter = "L1|L2" in Calculate Inventory page.
      Initialize;

      // [GIVEN] Create Item.
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create two Locations: "L1" and "L2".
      LocationCode[1] := LibraryWarehouse.CreateLocation(Location[1]);
      LocationCode[2] := LibraryWarehouse.CreateLocation(Location[2]);

      // [WHEN] Invoke Calculate Inventory with Location Filter = "L1|L2".
      CalculateInventoryAndGetLocationCodeFromFirstTwoLines(Item."No.",LocationCode);

      // [THEN] Two Phys. Inventory Journal Lines are populated: with "Location Code" = "L1" and "Location Code" = "L2"
      Assert.AreEqual(Location[1].Code,LocationCode[1],LocationErr);
      Assert.AreEqual(Location[2].Code,LocationCode[2],LocationErr);
    END;

    [Test]
    [HandlerFunctions(CalculateInventoryIncludeItemWithoutTransactionHandler)]
    PROCEDURE CalcInventoryWithIncludeItemWithoutTransactionEmptyLocationFilter@98();
    VAR
      Item@1002 : Record 27;
      LocationCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Phys. Inventory Journal]
      // [SCENARIO 378919] "Location Code" field in Phys. Inventory Journal Line should be empty after Calculate Inventory if filter is blank.
      Initialize;

      // [GIVEN] Create Item.
      LibraryInventory.CreateItem(Item);

      // [WHEN] Invoke Calculate Inventory with blank location filter.
      LocationCode := CalculateInventoryAndGetLocationCodeFromLastLine(Item."No.",'');

      // [THEN] Phys. Inventory Journal Line is populated: with blank "Location Code".
      Assert.AreEqual('',LocationCode,LocationErr);
    END;

    [Test]
    [HandlerFunctions(CalculateInventoryIncludeItemWithoutTransactionHandler)]
    PROCEDURE CalcInventoryWithIncludeItemWithoutTransactionAppropriateLocationFilter@100();
    VAR
      Item@1002 : Record 27;
      Location@1003 : Record 14;
      LocationCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Phys. Inventory Journal]
      // [SCENARIO 378919] "Location Code" field in Phys. Inventory Journal line should be empty after Calculate Inventory if transit location is selected in Location Filter.
      Initialize;

      // [GIVEN] Create Item.
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create transit location "L".
      LibraryWarehouse.CreateInTransitLocation(Location);

      // [WHEN] Invoke Calculate Inventory with Location Filter = "L".
      LocationCode := CalculateInventoryAndGetLocationCodeFromLastLine(Item."No.",Location.Code);

      // [THEN] Phys. Inventory Journal Line is populated: with blank "Location Code"
      Assert.AreEqual('',LocationCode,LocationErr);
    END;

    [Test]
    PROCEDURE PostItemReclassJournalFromLocationToBinMandatoryLocation@58();
    VAR
      ItemLedgerEntry@1004 : Record 32;
      Location@1001 : Record 14;
      ReclassificationItemJournalLine@1000 : Record 83;
      BinCode@1002 : Code[10];
      Qty@1003 : Decimal;
    BEGIN
      // Verify: Verify we can use Item Reclass. Journal to transfer item from non Bin Mandatory Location to Bin Mandatory Location.

      // Setup: Create Location with Bin.
      Initialize;
      Qty := LibraryRandom.RandDec(10,2);
      BinCode := CreateLocationAndBin(Location);

      // Exercise: Create and post Item Reclass. Journal from a non Bin Mandatory Location to a Bin Mandatory Location.
      CreateItemReclassJournal(ReclassificationItemJournalLine,Location.Code,BinCode,Qty,Qty);
      LibraryInventory.PostItemJournalLine(
        ReclassificationItemJournalLine."Journal Template Name",ReclassificationItemJournalLine."Journal Batch Name");

      // Verfiy: Verify Item was already transfered into Bin Mandatory Location.
      FindItemLedgerEntryWithLocation(
        ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Transfer,ReclassificationItemJournalLine."Item No.",Location.Code);
      Assert.AreEqual(ItemLedgerEntry.Quantity,Qty,QuantityErr);
    END;

    [Test]
    PROCEDURE CalculateInventoryForItemWithMultipleVariantsAndLocations@48();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1003 : Record 83;
      ItemJournalBatch@1001 : Record 233;
      Location@1002 : ARRAY [3] OF Record 14;
      ItemVariant@1004 : ARRAY [3] OF Record 5401;
      BinCode@1007 : ARRAY [3] OF Code[20];
      i@1006 : Integer;
      Quantity@1008 : Decimal;
    BEGIN
      // Verify all inventory are calculated for item when inventory exists multiple variants and locations.

      // Setup: Create Item with two Variants and create two Locations with Bins.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Costing Method"::FIFO);
      FOR i := 1 TO 2 DO BEGIN
        LibraryInventory.CreateItemVariant(ItemVariant[i],Item."No.");
        BinCode[3 - i] := CreateLocationAndBin(Location[3 - i]);
      END;

      ItemVariant[3] := ItemVariant[2];
      Location[3] := Location[1];
      BinCode[3] := BinCode[1];

      // Create and Post three Item Journals.
      // 1st: ItemVariant[1].Code, Location[2].Code, BinCode[2]
      // 2nd: ItemVariant[2].Code, Location[1].Code, BinCode[1]
      // 3rd: ItemVariant[2].Code, Location[2].Code, BinCode[2]
      FOR i := 1 TO ARRAYLEN(ItemVariant) DO
        CreateAndPostItemJournal(
          ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",ItemVariant[i].Code,Location[i].Code,BinCode[i],Quantity);

      // Exercise: Create Phys. Inventory Journal and Calculate Inventory.
      CreateAndPostPhysInventoryJournal(ItemJournalLine,ItemJournalBatch,Item."No.",FALSE); // FALSE means do not post the Phys. Inventory Journal.

      // Verify: Verify all inventory are calculated for item on Item Journal Line.
      FOR i := 1 TO ARRAYLEN(ItemVariant) DO
        VerifyItemJournalLine(Item."No.",ItemVariant[i].Code,Location[i].Code,BinCode[i],Quantity);
    END;

    [Test]
    PROCEDURE CheckQuantityOnItemJournalLineWithBlankItem@55();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // [SCENARIO 364321] An error is thrown while validating Quantity with blank "Item No."

      // [GIVEN] Item Journal Line with "Item No." blank
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::"Positive Adjmt.");

      // [WHEN] Set Quantity to "X"
      ASSERTERROR ItemJournalLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));

      // [THEN] Error is thrown: "Item No. must have a value"
      Assert.ExpectedError(ItemExistErr);
    END;

    [Test]
    PROCEDURE CheckLocationOnItemJournalLineWithBlankItem@343();
    VAR
      ItemJournalLine@1000 : Record 83;
      Location@1001 : Record 14;
    BEGIN
      // [SCENARIO 364321] An error is thrown while validating Location Code with blank "Item No."

      // [GIVEN] Location with Code = "X"
      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] Item Journal Line with "Item No." blank
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::Transfer);

      // [WHEN] Set Location Code to "X"
      ASSERTERROR ItemJournalLine.VALIDATE("Location Code",Location.Code);

      // [THEN] Error is thrown: "Item No. must have a value"
      Assert.ExpectedError(ItemExistErr);
    END;

    [Test]
    PROCEDURE ReclassJournalLineWithUnchangedLocationIsNotPostedInItemLedger@85();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      NewLocation@1007 : Record 14;
      NewBin@1006 : Record 7354;
      ItemJournalLine@1002 : Record 83;
      ItemLedgerEntry@1005 : Record 32;
      BinCode@1003 : Code[20];
      DocumentNo@1004 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Reclassification Journal]
      // [SCENARIO 382075] Item reclassification journal for changing bin code on same location is not posted into the item ledger.
      Initialize;

      // [GIVEN] Location "L1" with two bins - "B1" and "B2".
      BinCode := CreateLocationAndBin(Location);
      LibraryWarehouse.CreateBin(NewBin,Location.Code,LibraryUtility.GenerateGUID,'','');

      // [GIVEN] Location "L2".
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(NewLocation);

      // [GIVEN] Item "I" is in stock in bin "B1" on location "L1".
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournal(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",'',Location.Code,BinCode,
        LibraryRandom.RandIntInRange(10,20));

      // [GIVEN] Reclassification Journal with two lines:
      // [GIVEN] Line 1: transfer part of stock of item "I" from "L1" to "L2".
      // [GIVEN] Line 2: move part of stock of item "I" on location "L1" from bin "B1" to "B2".
      CreateItemReclassJournalWithTwoLines(ItemJournalLine,DocumentNo,Item."No.",Location.Code,BinCode,NewLocation.Code,NewBin.Code);

      // [WHEN] Post the reclassification journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [THEN] Transfer Line 1 is posted to the item ledger.
      ItemLedgerEntry.INIT;
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo[1]);
      Assert.RecordIsNotEmpty(ItemLedgerEntry);

      // [THEN] Internal movement Line 2 is not posted to the item ledger.
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo[2]);
      Assert.RecordIsEmpty(ItemLedgerEntry);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      ClearGlobalVariable;
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      ReclassificationJournalSetup;
      SetGlobalDescriptionAndComments;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalculateInventoryAndGetLocationCodeFromLastLine@109(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]) : Code[10];
    VAR
      PhysInvJournal@1000 : TestPage 392;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNo); // Enqueue for CalculateInventoryIncludeItemWithoutTransaction handler
      LibraryVariableStorage.Enqueue(LocationCode); // Enqueue for CalculateInventoryIncludeItemWithoutTransaction handler
      COMMIT;
      PhysInvJournal.OPENEDIT;
      PhysInvJournal.CalculateInventory.INVOKE;
      PhysInvJournal.LAST;
      EXIT(PhysInvJournal."Location Code".VALUE)
    END;

    LOCAL PROCEDURE CalculateInventoryAndGetLocationCodeFromFirstTwoLines@77(ItemNo@1001 : Code[20];LocationCode@1000 : ARRAY [2] OF Code[10]);
    VAR
      PhysInvJournal@1003 : TestPage 392;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNo); // Enqueue for CalculateInventoryIncludeItemWithoutTransaction handler
      LibraryVariableStorage.Enqueue(STRSUBSTNO('%1|%2',LocationCode[1],LocationCode[2])); // Enqueue for CalculateInventoryIncludeItemWithoutTransaction handler
      COMMIT;
      PhysInvJournal.OPENEDIT;
      PhysInvJournal.CalculateInventory.INVOKE;
      PhysInvJournal.FIRST;
      LocationCode[1] := PhysInvJournal."Location Code".VALUE;
      PhysInvJournal.NEXT;
      LocationCode[2] := PhysInvJournal."Location Code".VALUE;
    END;

    LOCAL PROCEDURE ClearGlobalVariable@22();
    BEGIN
      // Clear Global variables.
      GlobalNewSerialNo := '';
      GlobalItemNo := '';
      GlobalNewLotNo := '';
      GlobalOriginalQuantity := 0;
      GlobalExpirationDate := 0D;
      GlobalDescription := '';
      GlobalComment := '';
    END;

    LOCAL PROCEDURE CreateAndPostPhysInventoryJournal@45(VAR ItemJournalLine@1002 : Record 83;VAR ItemJournalBatch@1003 : Record 233;ItemNo@1001 : Code[20];IsPost@1000 : Boolean);
    BEGIN
      ItemJournalLine.INIT;
      CreateItemJournalBatch(ItemJournalBatch);
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryInventory.CalculateInventory(ItemJournalLine,ItemNo,WORKDATE,TRUE);
      IF IsPost THEN
        LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournal@28(EntryType@1002 : Option;ItemNo@1001 : Code[20];VariantCode@1006 : Code[10];LocationCode@1000 : Code[10];BinCode@1005 : Code[20];Qty@1007 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,EntryType,ItemNo,WORKDATE,LibraryRandom.RandDec(10,2)); // Use Random value for Unit Amount.
      PostItemJournalLine(ItemJournalLine,VariantCode,LocationCode,BinCode,Qty);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalWithDimension@79(VAR DimSetID@1011 : Integer;DimensionCode@1004 : Code[20];EntryType@1002 : Option;ItemNo@1001 : Code[20];Qty@1007 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,EntryType,ItemNo,WORKDATE,LibraryRandom.RandDec(10,2));
      CreateDimSetForItemJournalLine(ItemJournalLine,DimSetID,DimensionCode);
      PostItemJournalLine(ItemJournalLine,'','','',Qty);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@256(VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];Quantity@1006 : Decimal);
    VAR
      PurchaseHeader@1005 : Record 38;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Quantity);
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrder@167(ItemNo@1004 : Code[20]);
    VAR
      ItemJournalLine@1005 : Record 83;
      LocationFrom@1006 : Record 14;
      LocationTo@1000 : Record 14;
      LocationInTransit@1008 : Record 14;
      TransferHeader@1003 : Record 5740;
      TransferLine@1001 : Record 5741;
      Quantity@1002 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandDec(100,2);  // Use Random value for Quantity.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationFrom);
      UpdateItemInventory(
        ItemNo,LocationFrom.Code,'',Quantity,ItemJournalLine."Entry Type"::"Positive Adjmt.",LibraryRandom.RandDec(10,2));  // Use Random value for Unit Amount.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationTo);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationFrom.Code,LocationTo.Code,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateDimSetForItemJournalLine@104(VAR ItemJournalLine@1000 : Record 83;VAR DimSetID@1001 : Integer;DimensionCode@1003 : Code[20]);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      DimSetID := LibraryDimension.CreateDimSet(DimSetID,DimensionValue."Dimension Code",DimensionValue.Code);
      ItemJournalLine.VALIDATE("Dimension Set ID",DimSetID);
      ItemJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateItem@5(VAR Item@1000 : Record 27;CostingMethod@1003 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));  // Use Random value for Unit Cost.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@46(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::"Phys. Inventory");
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@7(VAR ItemJournalLine@1003 : Record 83;EntryType@1006 : Option;ItemNo@1002 : Code[20];PostingDate@1000 : Date;UnitAmount@1004 : Decimal);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1005 : Record 82;
    BEGIN
      // Use Random value for Quantity.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,
        LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@2(ItemNo@1002 : Code[20]) : Code[10];
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,1);
      EXIT(ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateItemReclassJournal@168(VAR ReclassificationItemJournalLine@1001 : Record 83;LocationCode@1005 : Code[10];BinCode@1006 : Code[10];Qty@1004 : Decimal;Qty2@1000 : Decimal);
    VAR
      Item@1017 : Record 27;
      Location@1016 : Record 14;
      PurchaseHeader@1015 : Record 38;
      ReclassificationItemJournalTemplate@1003 : Record 82;
      ReclassificationItemJournalBatch@1002 : Record 233;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateItem(Item,Item."Costing Method"::FIFO);
      CreatePurchaseOrder(PurchaseHeader,Item."No.",Location.Code,Qty);  // Use Random value for Quantity.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      SelectAndClearItemJournalBatch(ReclassificationItemJournalBatch,ReclassificationItemJournalTemplate.Type::Transfer);
      CreateItemReclassJournalLine(
        ReclassificationItemJournalLine,ReclassificationItemJournalBatch,Item."No.",Location.Code,'',LocationCode,BinCode,Qty2);
    END;

    LOCAL PROCEDURE CreateItemReclassJournalLine@87(VAR ReclassItemJournalLine@1000 : Record 83;ReclassItemJournalBatch@1001 : Record 233;ItemNo@1007 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20];NewLocationCode@1005 : Code[10];NewBinCode@1006 : Code[20];Qty@1002 : Decimal);
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ReclassItemJournalLine,ReclassItemJournalBatch."Journal Template Name",
        ReclassItemJournalBatch.Name,ReclassItemJournalLine."Entry Type"::Transfer,ItemNo,Qty);
      WITH ReclassItemJournalLine DO BEGIN
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Bin Code",BinCode);
        VALIDATE("New Location Code",NewLocationCode);
        VALIDATE("New Bin Code",NewBinCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemReclassJournalWithTwoLines@1000(VAR ItemJournalLine@1000 : Record 83;VAR DocumentNo@1008 : ARRAY [2] OF Code[20];ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];BinCode@1005 : Code[20];NewLocationCode@1006 : Code[10];NewBinCode@1007 : Code[20]);
    VAR
      ItemJournalTemplate@1002 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Transfer);
      CreateItemReclassJournalLine(
        ItemJournalLine,ItemJournalBatch,ItemNo,LocationCode,BinCode,NewLocationCode,'',LibraryRandom.RandInt(5));
      DocumentNo[1] := ItemJournalLine."Document No.";

      CreateItemReclassJournalLine(
        ItemJournalLine,ItemJournalBatch,ItemNo,LocationCode,BinCode,LocationCode,NewBinCode,LibraryRandom.RandInt(5));
      DocumentNo[2] := ItemJournalLine."Document No.";
    END;

    LOCAL PROCEDURE CreateLocationAndBin@43(VAR Location@1000 : Record 14) : Code[10];
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE CreateTrackedItem@20(LotNos@1003 : Code[10];SerialNos@1002 : Code[10];LotSpecificTracking@1006 : Boolean;SerialNoSpecificTracking@1004 : Boolean) : Code[20];
    VAR
      Item@1001 : Record 27;
      ExpirationCalculation@1005 : DateFormula;
    BEGIN
      EVALUATE(ExpirationCalculation,'<' + FORMAT(RANDOM(5)) + 'D>');
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",FindItemTrackingCode(LotSpecificTracking,SerialNoSpecificTracking));
      Item.VALIDATE("Serial Nos.",SerialNos);
      Item.VALIDATE("Lot Nos.",LotNos);
      Item.VALIDATE("Expiration Calculation",ExpirationCalculation);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@128(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1004 : Code[10];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,0D);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalBatch@113(VAR WarehouseJournalBatch@1000 : Record 7310;LocationCode@1002 : Code[10]);
    VAR
      WarehouseJournalTemplate@1001 : Record 7309;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Reclassification);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@33(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@70(VAR PurchaseLine@1001 : Record 39;LocationCode@1004 : Code[10]);
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreateItem(Item,Item."Costing Method"::FIFO);
      CreateAndReleasePurchaseOrder(PurchaseLine,Item."No.",LocationCode,LibraryRandom.RandInt(100));  // Use Random value for Quantity.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE GetGlobalDimCode@88() : Code[20];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."Global Dimension 1 Code");
    END;

    LOCAL PROCEDURE FindPurchaseOrderLine@40(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemTrackingCode@54(LotSpecificTracking@1002 : Boolean;SerialNoSpecificTracking@1003 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("Man. Expir. Date Entry Reqd.",FALSE);
      ItemTrackingCode.SETRANGE("Lot Specific Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("Lot Sales Inbound Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("Lot Sales Outbound Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Specific Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@31(VAR ItemLedgerEntry@1000 : Record 32);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",GlobalItemNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntryWithLocation@44(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1002 : Option;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Entry Type",EntryType);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindItemTrackingComment@12(VAR ItemTrackingComment@1000 : Record 6506;Type@1001 : Option;ItemNo@1002 : Code[20]);
    BEGIN
      ItemTrackingComment.SETRANGE(Type,Type);
      ItemTrackingComment.SETRANGE("Item No.",ItemNo);
      ItemTrackingComment.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemJournalLine@47(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233;ItemNo@1002 : Code[20]);
    BEGIN
      WITH ItemJournalLine DO BEGIN
        SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
        SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindLotNoInformation@82(VAR LotNoInformation@1000 : Record 6505;ItemNo@1001 : Code[20]);
    BEGIN
      LotNoInformation.SETRANGE("Item No.",ItemNo);
      LotNoInformation.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinContent@107(VAR BinContent@1000 : Record 7302;ItemNo@1001 : Code[20]);
    BEGIN
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDLAST;  // Finding last Bin Content due to availability of diffrerent entries for the same Item.
    END;

    LOCAL PROCEDURE FindBinWithZone@105(VAR Bin@1001 : Record 7354;LocationCode@1000 : Code[10];ZoneCode@1002 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",ZoneCode);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE ModifyUnitOfMeasureOnItemJournal@16(VAR ItemJournalLine@1000 : Record 83;UnitOfMeasureCode@1001 : Code[10]);
    BEGIN
      ItemJournalLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostItemJournalLine@73(ItemJournalLine@1004 : Record 83;VariantCode@1003 : Code[10];LocationCode@1002 : Code[10];BinCode@1001 : Code[20];Qty@1000 : Decimal);
    BEGIN
      WITH ItemJournalLine DO BEGIN
        VALIDATE("Variant Code",VariantCode);
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Bin Code",BinCode);
        VALIDATE(Quantity,Qty);
        MODIFY(TRUE);
        LibraryInventory.PostItemJournalLine("Journal Template Name","Journal Batch Name");
      END;
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithItemTracking@14(LotNos@1006 : Code[10];SerialNos@1005 : Code[10];LotSpecificTracking@1003 : Boolean;SerialNoSpecificTracking@1002 : Boolean;ItemTrackingAction2@1004 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      GlobalItemNo := CreateTrackedItem(LotNos,SerialNos,LotSpecificTracking,SerialNoSpecificTracking);  // Assign Item No. to global variable and blank value is taken for Serial No.
      GlobalOriginalQuantity := 1 + RANDOM(10);  // Random Integer value greater than 1 required for test. Assign it to Global Variable.
      CreatePurchaseOrder(PurchaseHeader,GlobalItemNo,'',GlobalOriginalQuantity);
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      GlobalItemTrackingAction := ItemTrackingAction2;
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@141(SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE ReclassificationJournalSetup@86();
    BEGIN
      CLEAR(ReclassificationItemJournalTemplate);
      ReclassificationItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(
        ReclassificationItemJournalTemplate,ReclassificationItemJournalTemplate.Type::Transfer);

      CLEAR(ReclassificationItemJournalBatch);
      ReclassificationItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ReclassificationItemJournalBatch,ReclassificationItemJournalTemplate.Type,ReclassificationItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE ReclassificationJournalWithPurchaseOrder@49(VAR ReclassificationItemJournalLine@1003 : Record 83;TrackingAction@1001 : Option;LotNo@1002 : Code[10];LotSpecific@1004 : Boolean;SerialSpecific@1005 : Boolean;GlobalAction@1006 : Option);
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Create and post Purchase Order with Item Tracking and Item with Expiration Calculation and create Reclassification Journal with Item Tracking.
      PostPurchaseOrderWithItemTracking(LotNo,LibraryUtility.GetGlobalNoSeriesCode,LotSpecific,SerialSpecific,GlobalAction);
      Item.GET(GlobalItemNo);
      GlobalExpirationDate := CALCDATE(Item."Expiration Calculation",WORKDATE);  // Assigned in global variable.

      LibraryInventory.ClearItemJournal(ReclassificationItemJournalTemplate,ReclassificationItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ReclassificationItemJournalLine,ReclassificationItemJournalBatch."Journal Template Name",
        ReclassificationItemJournalBatch.Name,ReclassificationItemJournalLine."Entry Type"::Transfer,GlobalItemNo,
        GlobalOriginalQuantity);
      GlobalItemTrackingAction := TrackingAction;
    END;

    LOCAL PROCEDURE RunCalculateInventoryValueReport@15(ItemNo@1000 : Code[20]) : Integer;
    VAR
      Item@1003 : Record 27;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalLine@1001 : Record 83;
      ItemJournalTemplate@1007 : Record 82;
      LibraryCosting@1002 : Codeunit 132200;
      CalculatePer@1004 : 'Item Ledger Entry,Item';
      CalcBase@1006 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Revaluation);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type",ItemNo,0);
      Item.SETRANGE("No.",ItemNo);
      LibraryCosting.CalculateInventoryValue(
        ItemJournalLine,Item,WORKDATE,ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."),CalculatePer::Item,
        FALSE,FALSE,FALSE,CalcBase::" ",FALSE);
      EXIT(ItemJournalLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE RunCalculateInventoryByDimensions@69(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1002 : Record 83;
      CalculateInventory@1000 : Report 790;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch);
      WITH ItemJournalLine DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
        VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      END;
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      COMMIT;
      CalculateInventory.RUNMODAL;
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@21(VAR ItemJournalBatch@1001 : Record 233;Type@1002 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetGlobalDescriptionAndComments@19();
    VAR
      SerialNoInformation@1000 : Record 6504;
      ItemTrackingComment@1001 : Record 6506;
    BEGIN
      GlobalDescription :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(SerialNoInformation.FIELDNO(Description),DATABASE::"Serial No. Information"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Serial No. Information",SerialNoInformation.FIELDNO(Description)));
      GlobalComment :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemTrackingComment.FIELDNO(Comment),DATABASE::"Item Tracking Comment"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Tracking Comment",ItemTrackingComment.FIELDNO(Comment)));
    END;

    LOCAL PROCEDURE UpdateAndVerifySerialNoInformationAndComments@74(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      SerialNoInformationList@1002 : TestPage 6509;
      ItemTrackingComments@1001 : TestPage 6506;
      SerialNoInformationCard@1003 : TestPage 6504;
    BEGIN
      // Update Description on Serial No information Card and add Comments for Serial No.
      SerialNoInformationCard.TRAP;
      ItemTrackingLines.NewSerialNoInformation.INVOKE;
      SerialNoInformationCard.Description.SETVALUE(GlobalDescription);
      ItemTrackingComments.TRAP;
      SerialNoInformationCard."Page Item Tracking Comments".INVOKE;
      ItemTrackingComments.Date.SETVALUE(WORKDATE);
      ItemTrackingComments.Comment.SETVALUE(GlobalComment);
      ItemTrackingComments.OK.INVOKE;
      COMMIT;
      SerialNoInformationList.TRAP;
      SerialNoInformationCard.CopyInfo.INVOKE;
    END;

    LOCAL PROCEDURE UpdateAndVerifyLotNoInformationAndComments@41(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LotNoInformationList@1002 : TestPage 6508;
      ItemTrackingComments@1001 : TestPage 6506;
      LotNoInformationCard@1003 : TestPage 6505;
    BEGIN
      // Update Description on Serial No information Card and add Comments for Serial No.
      LotNoInformationCard.TRAP;
      ItemTrackingLines.NewLotNoInformation.INVOKE;
      LotNoInformationCard.Description.SETVALUE(GlobalDescription);
      ItemTrackingComments.TRAP;
      LotNoInformationCard."Page Item Tracking Comments".INVOKE;
      ItemTrackingComments.Date.SETVALUE(WORKDATE);
      ItemTrackingComments.Comment.SETVALUE(GlobalComment);
      ItemTrackingComments.OK.INVOKE;
      COMMIT;
      LotNoInformationList.TRAP;
      LotNoInformationCard.CopyInfo.INVOKE;
    END;

    LOCAL PROCEDURE UpdateInventorySetup@30(InventorySetup@1001 : Record 313;AutomaticCostAdjustment@1000 : Option;AverageCostCalcType@1002 : Option);
    BEGIN
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",AutomaticCostAdjustment,
        AverageCostCalcType,InventorySetup."Average Cost Period"::Day);
    END;

    LOCAL PROCEDURE UpdateItemDimension@50(VAR DefaultDimension@1005 : Record 352;ItemNo@1002 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1004 : Record 349;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateItemDimensionUsingGlobal@78(VAR DefaultDimension@1002 : Record 352;ItemNo@1004 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.CreateDefaultDimensionItem(
        DefaultDimension,ItemNo,GeneralLedgerSetup."Global Dimension 1 Code" ,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateItemInventory@27(ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];VariantCode@1005 : Code[10];Quantity@1001 : Decimal;EntryType@1003 : Option;UnitAmount@1004 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,EntryType,ItemNo,WORKDATE,LibraryRandom.RandInt(10));  // Use Random value for Unit Amount.
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.VALIDATE(Quantity,Quantity);
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE UpdateItemTrackingCode@94(LotInfoInbound@1005 : Boolean;LotInfoOutbound@1006 : Boolean);
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
    BEGIN
      Item.GET(GlobalItemNo);
      ItemTrackingCode.GET(Item."Item Tracking Code");
      ItemTrackingCode.VALIDATE("Lot Info. Inbound Must Exist",LotInfoInbound);
      ItemTrackingCode.VALIDATE("Lot Info. Outbound Must Exist",LotInfoOutbound);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyDimensionOnRevaluationJournal@17(DefaultDimension@1000 : Record 352;DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.TESTFIELD("Dimension Code",DefaultDimension."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifySerialNoOnItemLedgerEntry@161();
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",GlobalItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Transfer);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Serial No.");
    END;

    LOCAL PROCEDURE VerifyLotNoOnItemLedgerEntry@53();
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",GlobalItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Transfer);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Lot No.");
    END;

    LOCAL PROCEDURE FilterItemJournalLine@61(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LocationCode@1003 : Code[20];BinCode@1004 : Code[20]);
    BEGIN
      WITH ItemJournalLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Bin Code",BinCode);
      END;
    END;

    LOCAL PROCEDURE VerifyDimOnItemJournalLine@91(ItemJournalBatch@1000 : Record 233;ItemNo@1001 : Code[20];DimSetID@1005 : ARRAY [2] OF Integer);
    VAR
      ItemJournalLine@1002 : Record 83;
      iDim@1003 : Integer;
    BEGIN
      WITH ItemJournalLine DO BEGIN
        SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
        SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          iDim += 1;
          Assert.AreEqual(DimSetID[iDim],"Dimension Set ID",ItemJournalLineDimErr);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@60(ItemNo@1004 : Code[20];VariantCode@1003 : Code[10];LocationCode@1002 : Code[20];BinCode@1001 : Code[20];QtyCalculated@1005 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      FilterItemJournalLine(ItemJournalLine,ItemNo,VariantCode,LocationCode,BinCode);
      Assert.IsTrue(
        ItemJournalLine.FINDFIRST,STRSUBSTNO(ItemJournalLineNotExistErr,ItemJournalLine.TABLECAPTION,VariantCode,LocationCode,BinCode));
      Assert.AreEqual(
        QtyCalculated,ItemJournalLine."Qty. (Calculated)",
        STRSUBSTNO(QtyCalculatedErr,ItemJournalLine.TABLECAPTION,VariantCode,LocationCode,BinCode))
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@26(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ItemLedgerEntry@1002 : Record 32;
      LotNoInformation@1004 : Record 6505;
      SerialNoInformation@1003 : Record 6504;
      TrackingSpecification@1001 : Record 336;
    BEGIN
      COMMIT;
      CASE GlobalItemTrackingAction OF
        GlobalItemTrackingAction::SelectEntriesSerialNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines."New Serial No.".ASSERTEQUALS(ItemTrackingLines."Serial No.");
            ItemTrackingLines."New Expiration Date".ASSERTEQUALS(GlobalExpirationDate);
          END;
        GlobalItemTrackingAction::SelectEntriesLotNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines."New Lot No.".ASSERTEQUALS(ItemTrackingLines."Lot No.");
            ItemTrackingLines."New Expiration Date".ASSERTEQUALS(GlobalExpirationDate);
          END;
        GlobalItemTrackingAction::EditItemTrackingSerialNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            ItemTrackingLines."New Serial No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("New Serial No."),DATABASE::"Tracking Specification"));
            ItemTrackingLines."New Expiration Date".SETVALUE(LibraryUtility.GenerateRandomDate(WORKDATE,WORKDATE));
            LibraryItemTracking.CreateSerialNoInformation(
              SerialNoInformation,GlobalItemNo,'',ItemTrackingLines."New Serial No.".VALUE);
            UpdateAndVerifySerialNoInformationAndComments(ItemTrackingLines);
          END;
        GlobalItemTrackingAction::EditItemTrackingLotNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            ItemTrackingLines."New Lot No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("New Lot No."),DATABASE::"Tracking Specification"));
            ItemTrackingLines."New Expiration Date".SETVALUE(LibraryUtility.GenerateRandomDate(WORKDATE,WORKDATE));
            LibraryItemTracking.CreateLotNoInformation(LotNoInformation,GlobalItemNo,'',ItemTrackingLines."New Lot No.".VALUE);
            UpdateAndVerifyLotNoInformationAndComments(ItemTrackingLines);
          END;
        GlobalItemTrackingAction::ItemTrackingSerialAndLot:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            ItemTrackingLines."New Lot No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("New Lot No."),DATABASE::"Tracking Specification"));
            ItemTrackingLines."New Expiration Date".SETVALUE(LibraryUtility.GenerateRandomDate(WORKDATE,WORKDATE));
            LibraryItemTracking.CreateLotNoInformation(LotNoInformation,GlobalItemNo,'',ItemTrackingLines."New Lot No.".VALUE);
            UpdateAndVerifyLotNoInformationAndComments(ItemTrackingLines);

            ItemTrackingLines."New Serial No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("New Serial No."),DATABASE::"Tracking Specification"));
            ItemTrackingLines."New Expiration Date".SETVALUE(LibraryUtility.GenerateRandomDate(WORKDATE,WORKDATE));
            LibraryItemTracking.CreateSerialNoInformation(
              SerialNoInformation,GlobalItemNo,'',ItemTrackingLines."New Serial No.".VALUE);
            UpdateAndVerifySerialNoInformationAndComments(ItemTrackingLines);
            GlobalNewSerialNo := SerialNoInformation."Serial No.";
          END;
        GlobalItemTrackingAction::EditNewSerialNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            LibraryItemTracking.CreateSerialNoInformation(
              SerialNoInformation,GlobalItemNo,'',ItemTrackingLines."New Serial No.".VALUE);
            UpdateAndVerifySerialNoInformationAndComments(ItemTrackingLines);
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewSerialNo := ItemLedgerEntry."Serial No.";
            ItemTrackingLines."New Serial No.".SETVALUE(GlobalNewSerialNo);
          END;
        GlobalItemTrackingAction::EditNewLotNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewLotNo := ItemLedgerEntry."Lot No.";
            ItemTrackingLines."New Lot No.".SETVALUE(GlobalNewLotNo);
          END;
        GlobalItemTrackingAction::CopyInfo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            LibraryItemTracking.CreateLotNoInformation(LotNoInformation,GlobalItemNo,'',ItemTrackingLines."New Lot No.".VALUE);
            UpdateAndVerifyLotNoInformationAndComments(ItemTrackingLines);
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewLotNo := ItemLedgerEntry."Lot No.";
          END;
        GlobalItemTrackingAction::LotNoAvailability:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines."Lot No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("Lot No."),DATABASE::"Tracking Specification"));
          END;
        GlobalItemTrackingAction::EditLotNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            ItemTrackingLines."Lot No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("Lot No."),DATABASE::"Tracking Specification"));
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewLotNo := ItemLedgerEntry."Lot No.";
            GlobalExpirationDate := ItemLedgerEntry."Expiration Date";
            ItemTrackingLines."New Lot No.".SETVALUE(GlobalNewLotNo);
          END;
        GlobalItemTrackingAction::ModifyQuantity:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewLotNo := ItemLedgerEntry."Lot No.";
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemLedgerEntry.Quantity + 1);  // Greater Quantity is needed.
          END;
        GlobalItemTrackingAction::EditLotNoInformation:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            LibraryItemTracking.CreateLotNoInformation(LotNoInformation,GlobalItemNo,'',ItemTrackingLines."New Lot No.".VALUE);
            LotNoInformation.VALIDATE(Blocked,TRUE);
            LotNoInformation.MODIFY(TRUE);
            UpdateAndVerifyLotNoInformationAndComments(ItemTrackingLines);
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewLotNo := ItemLedgerEntry."Lot No.";
          END;
        GlobalItemTrackingAction::EditTrackedQuantity:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.LAST;
            ItemTrackingLines."New Lot No.".SETVALUE(
              LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("New Lot No."),DATABASE::"Tracking Specification"));
            ItemTrackingLines."New Expiration Date".SETVALUE(LibraryUtility.GenerateRandomDate(WORKDATE,WORKDATE));
            LibraryItemTracking.CreateLotNoInformation(LotNoInformation,GlobalItemNo,'',ItemTrackingLines."New Lot No.".VALUE);
            UpdateAndVerifyLotNoInformationAndComments(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemLedgerEntry.Quantity - 1);  // Less Quantity is needed.
          END;
        GlobalItemTrackingAction::EditQuantityBase:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            FindItemLedgerEntry(ItemLedgerEntry);
            GlobalNewLotNo := ItemLedgerEntry."Lot No.";
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemLedgerEntry.Quantity - 1);  // Less Quantity is needed.
          END;
        GlobalItemTrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        GlobalItemTrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InvokeSerialNoInformationListPageHander@34(VAR SerialNoInformationList@1000 : TestPage 6509);
    BEGIN
      SerialNoInformationList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SerialNoInformationListPageHander@145(VAR SerialNoInformationList@1000 : TestPage 6509);
    BEGIN
      Assert.AreEqual(STRSUBSTNO(SerialNoListPageCaption),SerialNoInformationList.CAPTION,ValidationError);
      SerialNoInformationList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@65(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@173(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE AvailabilityConfirmationHandler@8(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,AvailabilityWarning) > 0,ConfirmMessage);
      Reply := TRUE
    END;

    [ConfirmHandler]
    PROCEDURE SerialNumberConfirmationHandler@9(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,STRSUBSTNO(SerialNoConfirmaton)) > 0,ConfirmMessage);
      Reply := TRUE
    END;

    [ModalPageHandler]
    PROCEDURE LotNoInformationListPageHander@36(VAR LotNoInformationList@1000 : TestPage 6508);
    BEGIN
      Assert.AreEqual(STRSUBSTNO(LotNoListPageCaption),LotNoInformationList.CAPTION,ValidationError);
      LotNoInformationList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InvokeLotNoInformationListPageHander@39(VAR LotNoInformationList@1000 : TestPage 6508);
    BEGIN
      LotNoInformationList.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ChangeAverageCostCalcTypeConfirmHandler@63(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE LotNoInformationConfirmHandler@57(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,STRSUBSTNO(LotNoInformationError)) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE LotNoInformationConfirmHandlerFalse@150(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,STRSUBSTNO(LotNoInformationError)) > 0,ConfirmMessage);
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE AvailabilityConfirmHandler@67(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,STRSUBSTNO(AvailabilityWarning)) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE NothingToPostConfirmHandler@261(ConfirmMessage@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,STRSUBSTNO(NothingToPost)) > 0,ConfirmMessage);
    END;

    [ConfirmHandler]
    PROCEDURE CorrectionsConfirmHandler@56(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,STRSUBSTNO(CorrectionsError)) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmationHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@106(ExpectedMessage@1000 : Text[1024]);
    VAR
      Message@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Message);  // Dequeue variable.
      Assert.IsTrue(STRPOS(ExpectedMessage,Message) > 0,ExpectedMessage);
    END;

    [ModalPageHandler]
    PROCEDURE VerifyDimensionSetEntryHandler@72(VAR DimensionSetEntry@1000 : TestPage 480);
    VAR
      DefaultDimension@1001 : Record 352;
      DimVar@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DimVar);
      DefaultDimension := DimVar;
      DimensionSetEntry."Dimension Code".ASSERTEQUALS(DefaultDimension."Dimension Code");
      DimensionSetEntry.DimensionValueCode.ASSERTEQUALS(DefaultDimension."Dimension Value Code");
      DimensionSetEntry.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculateInventory@81(VAR CalculateInventory@1000 : TestRequestPage 790);
    VAR
      VarItemNo@1001 : Variant;
      ItemNo@1002 : Code[20];
    BEGIN
      CalculateInventory.ByDimensions.ASSISTEDIT;
      LibraryVariableStorage.Dequeue(VarItemNo);
      ItemNo := VarItemNo;
      CalculateInventory.Item.SETFILTER("No.",ItemNo);
      CalculateInventory.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculateInventoryIncludeItemWithoutTransactionHandler@75(VAR CalculateInventory@1000 : TestRequestPage 790);
    BEGIN
      CalculateInventory.Item.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      CalculateInventory.Item.SETFILTER("Location Filter",LibraryVariableStorage.DequeueText);
      CalculateInventory.ItemsNotOnInventory.SETVALUE(TRUE);
      CalculateInventory.IncludeItemWithNoTransaction.SETVALUE(TRUE);
      CalculateInventory.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MultipleDimSelectionHandler@66(VAR MultipleDimSelection@1000 : TestPage 562);
    VAR
      DimVar@1001 : Variant;
      DimCode@1002 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(DimVar);
      DimCode := DimVar;
      MultipleDimSelection.GOTOKEY(DimCode);

      MultipleDimSelection.Selected.SETVALUE(TRUE);
      MultipleDimSelection.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Journal] [SCM]
      Test for Inventory Journals:
        1. Verify Unit Of Measure and Quantity on Item Ledger Entry after posting Item Journal with different Unit Of Measure Code.
        2. Verify New Expiration Date and New Serial No. on Item Tracking Lines page.
        3. Verify Serial No. Information List page caption.
        4. Verify Posting of Item Reclass. Journal.
        5. Verify Error message after Posting Item Reclass. Journal while updating New Serial No. with existing Serial Number.
        6. Verify New Lot No. on Item Tracking Lines page.
        7. Verify Lot No. Information List page caption.
        8. Verify Posting of Item Reclass. Journal with Item Tracking Lot Number.
        9. Verify Error message after Posting Item Reclass. Journal while updating New Lot No. with existing Lot Number.
       10. Verify Error message on Lot No. Information Card using Copy Info.
       11. Verify Lot No. Availability warning.
       12. Verify Error message after Posting Item Reclass. Journal while updating Lot Number.
       13. Verify Error message while posting Item Reclass. Journal using page.
       14. Verify values on Lot No. Information after posting Recalss. Journal.
       15. Verify values on Item Tracking Comment using Recalss. Journal.
       16. Verify Corrections error message on Item Tracking Lines page while taking greater Quantity (Base).
       17. Verify posting Recalss. Journal with Blocked TRUE on Lot No. Information Card page.
       18. Verify message on Lot No. Information Card using Copy Info and verify value of Lot No on Lot No. Information same as Item Tracking Line.
       19. Verify error message while taking negative Quantity (Base) in Item Tracking Line.
       20. Verify error message while posting Reclassification Journal with Lot Number.
       21. Verify error message while taking less Quantity (Base) on Item Tracking Line than Reclass Journal Quantity.
       22. Verify Dimension on Revaluation Journal after posting Transfer Order and running Calculate Inventory Value Report.
       23. Verify Warehouse Reclassification Journal Line registered successfully.
       24. Verify error message while posting Reclassfication Journal with Location and without New Location Code.
       25  Verify error message while posting Reclassfication Journal with New Location Code.
       26. Verify updated Unit cost on Item when Inventory is negative.
       27. Verify Item Variant Description is updated in Phys. Inventory Ledger when Calculate Inventory on Phys. Inventory Journal.
       28. Verify no Dimension is populated when Calculate Inventory on Phys. Inventory Journal with Bin Mandatory Location.
       29. Verify we can use Item Reclass. Journal to transfer item from non Bin Mandatory Location to Bin Mandatory Location.
       30. Verify all inventory are calculated for item when inventory exists multiple variants and locations.

      Covers Test cases: for WI - 286214
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ----------------------------------------------------------------------------------------------
      ItemJournalWithMultipleUOM                                                              127579

      Covers Test cases: for WI - 286283
      ----------------------------------------------------------------------------------------------
      Test Function Name                          TFS ID
      ----------------------------------------------------------------------------------------------
      ItemTrackingOnItemReclassJournal, CopyInfoOnSerialNoInformationCard                     129233
      PostItemReclassJournalWithItemTracking, ItemReclassJournalWithExistingItemTrackingError

      Covers Test cases: for WI - 286284
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ----------------------------------------------------------------------------------------------
      ItemTrackingUsingLotOnItemReclassJournal, CopyInfoOnLotlNoInformationCard               129234
      PostItemReclassJournalWithLotNo, ItemReclassJournalWithExistingLotNoError
      CopyInfoOnLotlNoInformationCardError, AvailabilityErrorOnLotlNoInformationCard
      NewExpirationDateError, ItemReclassJournalPostingError

      Covers Test cases: for WI - 286285
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ----------------------------------------------------------------------------------------------
      InventoryOnLotNoInformation, SerialAndLotNoOnItemTrackingComment                        129234
      ItemTrackingLineErrorWithUpdatedQuantity, LotNoInformationErrorWithBlockedTrue
      LotNoInformationUsingCopyInfo, ItemTrackingLinesNegativeQuantityBaseError
      ReclassJournalWithItemTrackingError, ItemTrackingLinesQuantityHandleBaseError

      Covers Test cases: for WI - 287255
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      RevaluationJournalDimension                                                              127623

      Covers Test cases: for WI - 243264
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      ReclassificationJournalUsingWarehouseReceipt                                             127531
      ErrorOnReclassificationJournalWithLocation                                               127650
      ErrorNotOnInventoryOnReclassificationJournal                                             127650

      Covers Test cases: for WI - 295267
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      ItemUnitCostWithNegativeInventory                                                        143054

      Covers Test Cases for WI - 243266
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      ItemVariantDescriptionOnPhysInventoryLedgerEntry                                         264569

      Covers Test Cases for WI - 346386
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      DimensionOnPhysInventoryJournal                                                          346386

      Covers Test Cases for WI -70126
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      PostItemReclassJournalFromLocationToBinMandatoryLocation                                  70126

      Covers Test Cases for WI - 94534
      -----------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      -----------------------------------------------------------------------------------------------
      CalculateInventoryForItemWithMultipleVariantsAndLocations                                 94534
    }
    END.
  }
}

