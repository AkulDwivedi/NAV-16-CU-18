OBJECT Codeunit 134162 Payroll Import Gen. Jnl Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibraryJournals@1003 : Codeunit 131306;
      LibraryPaymentFormat@1001 : Codeunit 130101;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1005 : Codeunit 130440;
      NotFindReadWritingErr@1006 : TextConst 'ENU=You must specify either a reading/writing XMLport or a reading/writing codeunit.';

    [Test]
    PROCEDURE ImportPayrollFileEmptyBatch@1();
    VAR
      GenJournalLine@1003 : Record 81;
      DataExchDef@1002 : Record 1222;
      TempBlob@1001 : Record 99008535;
      ImportPayrollTransaction@1000 : Codeunit 1202;
      GenJournalLineDocNo@1006 : ARRAY [2] OF Code[20];
      GenJournalLineAmount@1005 : ARRAY [2] OF Decimal;
    BEGIN
      // [SCENARIO] Import a Payroll file into Gen Jnl.

      // [GIVEN] A payroll xml file
      DefinePayrollImportFormat(DataExchDef);
      CreateTestValues(GenJournalLineDocNo,GenJournalLineAmount);
      WritePayrollFile(TempBlob,GenJournalLineDocNo,GenJournalLineAmount);

      // [GIVEN] Empty Gen. Journal Batch to import into.
      CreateGenJournal(GenJournalLine);
      GenJournalLine.DELETE;

      // [WHEN] Import Payroll file into Gen. Journal
      ImportPayrollTransaction.ImportPayrollDataToGL(GenJournalLine,'',TempBlob,DataExchDef.Code);

      // [THEN] Gen. Jnl. Lines are created as per the file content.
      VerifyGenJnlLine(GenJournalLine,GenJournalLineDocNo,GenJournalLineAmount,2);
    END;

    [Test]
    PROCEDURE ImportPayrollFileAppendToBatch@3();
    VAR
      GenJournalLine@1003 : Record 81;
      DataExchDef@1002 : Record 1222;
      TempBlob@1001 : Record 99008535;
      ImportPayrollTransaction@1000 : Codeunit 1202;
      GenJournalLineDocNo@1006 : ARRAY [2] OF Code[20];
      GenJournalLineAmount@1005 : ARRAY [2] OF Decimal;
    BEGIN
      // [SCENARIO] Import a Payroll file into Gen Jnl. with line

      // [GIVEN] Data Exchange Definition with defined Reading/Writing XMLport Number
      // [GIVEN] A payroll xml file
      DefinePayrollImportFormat(DataExchDef);
      CreateTestValues(GenJournalLineDocNo,GenJournalLineAmount);
      WritePayrollFile(TempBlob,GenJournalLineDocNo,GenJournalLineAmount);

      // [GIVEN] Gen. Journal Batch with existing line.
      CreateGenJournal(GenJournalLine);

      // [WHEN] Import Payroll file into Gen. Journal
      ImportPayrollTransaction.ImportPayrollDataToGL(GenJournalLine,'',TempBlob,DataExchDef.Code);

      // [THEN] Gen. Jnl. Lines are created as per the file content.
      VerifyGenJnlLine(GenJournalLine,GenJournalLineDocNo,GenJournalLineAmount,3);
    END;

    [Test]
    PROCEDURE ImportPayrollFileTextFixedLength@2();
    VAR
      GenJournalLine@1004 : Record 81;
      TempBlob@1002 : Record 99008535;
      DataExchDef@1003 : Record 1222;
      ImportPayrollTransaction@1000 : Codeunit 1202;
      AccountNo@1001 : Code[20];
      GenJournalLineDocNo@1007 : ARRAY [2] OF Code[20];
      GenJournalLineAmount@1005 : ARRAY [2] OF Decimal;
    BEGIN
      // [SCENARIO 380588] Import a Payroll file into Gen Jnl. when fields having fixed length format

      // [GIVEN] Data Exchange Definition with defined Reading/Writing Codeunit Number
      // [GIVEN] A payroll file with 2 strings having fixed length fields without delimiter
      // [GIVEN] 1st: "Document No." = "D1", "Account No.",Amount = "A1"
      // [GIVEN] 2nd: "Document No." = "D2", "Account No.",Amount = "A2"
      DefinePayrollImportFixedFormat(DataExchDef);
      CreateTestValues(GenJournalLineDocNo,GenJournalLineAmount);
      AccountNo := LibraryERM.CreateGLAccountNo;
      CreateTempBlob(TempBlob,GenJournalLineDocNo,GenJournalLineAmount,AccountNo,DataExchDef.Code);

      // [GIVEN] Gen. Journal Batch with existing line
      CreateGenJournal(GenJournalLine);

      // [WHEN] Import Payroll file into Gen Jnl.
      ImportPayrollTransaction.ImportPayrollDataToGL(GenJournalLine,'',TempBlob,DataExchDef.Code);

      // [THEN] Gen. Jnl. Lines are created. "GJL1": "Document No." = "D1", Amount = "A1", "GJL2": "Document No." = "D2", Amount = "A2".
      VerifyGenJnlLine(GenJournalLine,GenJournalLineDocNo,GenJournalLineAmount,3);
    END;

    [Test]
    PROCEDURE ErrorWhenImportCodeunitAndXmlPortBothNotDefinedOnDataExchDef@8();
    VAR
      GenJournalLine@1004 : Record 81;
      TempBlob@1002 : Record 99008535;
      ImportPayrollTransaction@1003 : Codeunit 1202;
      DataExchDefCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [UT]

      // [SCENARIO 380588] Error on import a Payroll file into Gen Jnl. when neither XMLPORT nor CODEUNIT will be defined

      // [GIVEN] Data Exchange Definition having Reading/Writing Coueunit and XMLport set to zero.
      DataExchDefCode := MockDataExchDef(0,0);
      GenJournalLine.INIT;
      TempBlob.INIT;

      // [WHEN] Import Payroll file into Gen Jnl.
      ASSERTERROR ImportPayrollTransaction.ImportPayrollDataToGL(GenJournalLine,'',TempBlob,DataExchDefCode);

      // [THEN] Error "You must specify either a reading/writing XMLport or a reading/writing codeunit." is thrown
      Assert.ExpectedError(NotFindReadWritingErr);
    END;

    [Test]
    PROCEDURE ErrorWhenImportCodeunitAndXmlPortBothDefinedOnDataExchDef@12();
    VAR
      GenJournalLine@1004 : Record 81;
      TempBlob@1002 : Record 99008535;
      ImportPayrollTransaction@1003 : Codeunit 1202;
      DataExchDefCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [UT]

      // [SCENARIO 380588] Error on import a Payroll file into Gen Jnl. when both XMLPORT and CODEUNIT will be defined

      // [GIVEN] Data Exchange Definition having both Reading/Writing Coueunit and XMLport.
      DataExchDefCode := MockDataExchDef(LibraryRandom.RandInt(100),LibraryRandom.RandInt(100));
      GenJournalLine.INIT;
      TempBlob.INIT;

      // [WHEN] Import Payroll file into Gen Jnl.
      ASSERTERROR ImportPayrollTransaction.ImportPayrollDataToGL(GenJournalLine,'',TempBlob,DataExchDefCode);

      // [THEN] Error "You must specify either a reading/writing XMLport or a reading/writing codeunit." is thrown
      Assert.ExpectedError(NotFindReadWritingErr);
    END;

    LOCAL PROCEDURE DefinePayrollImportFormat@5(VAR DataExchDef@1001 : Record 1222);
    VAR
      GenJournalLine@1003 : Record 81;
      DataExchLineDef@1002 : Record 1227;
      DataExchMapping@1000 : Record 1224;
      DataExchFieldMapping@1006 : Record 1225;
      DataExchColumnDef@1005 : Record 1223;
    BEGIN
      LibraryPaymentFormat.CreateDataExchDef(DataExchDef,0,0,
        0,XMLPORT::"Data Exch. Import - CSV",CODEUNIT::"Read Data Exch. from File",0);
      DataExchDef.VALIDATE(Type,DataExchDef.Type::"Payroll Import");
      DataExchDef.VALIDATE("File Encoding",DataExchDef."File Encoding"::WINDOWS);
      DataExchDef.VALIDATE("Column Separator",DataExchDef."Column Separator"::Comma);
      DataExchDef.MODIFY(TRUE);

      DataExchLineDef.InsertRec(DataExchDef.Code,DataExchDef.Code,DataExchDef.Code,2);

      DataExchColumnDef.InsertRec(DataExchDef.Code,DataExchLineDef.Code,1,GenJournalLine.FIELDCAPTION("Document No."),
        TRUE,DataExchColumnDef."Data Type"::Text,'','',GenJournalLine.FIELDNAME("Document No."));
      DataExchColumnDef.InsertRec(DataExchDef.Code,DataExchLineDef.Code,2,GenJournalLine.FIELDCAPTION(Amount),
        TRUE,DataExchColumnDef."Data Type"::Decimal,'<Precision,2><sign><Integer><Decimals><Comma,.>','en-US',
        GenJournalLine.FIELDNAME(Amount));

      DataExchMapping.InsertRecForExport(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",DataExchDef.Code,CODEUNIT::"Process Gen. Journal  Lines");
      DataExchFieldMapping.InsertRec(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",1,GenJournalLine.FIELDNO("Document No."),FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",2,GenJournalLine.FIELDNO(Amount),FALSE,1);
    END;

    LOCAL PROCEDURE DefinePayrollImportFixedFormat@4(VAR DataExchDef@1001 : Record 1222);
    VAR
      GenJournalLine@1005 : Record 81;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1003 : Record 1224;
      DataExchFieldMapping@1002 : Record 1225;
      DataExchColumnDef@1000 : Record 1223;
    BEGIN
      LibraryPaymentFormat.CreateDataExchDef(DataExchDef,0,0,
        CODEUNIT::"Fixed File Import",0,CODEUNIT::"Read Data Exch. from File",0);
      DataExchDef.VALIDATE(Type,DataExchDef.Type::"Payroll Import");
      DataExchDef.VALIDATE("File Type",DataExchDef."File Type"::"Fixed Text");
      DataExchDef.MODIFY(TRUE);

      DataExchLineDef.InsertRec(DataExchDef.Code,DataExchDef.Code,DataExchDef.Code,2);

      DataExchColumnDef.InsertRecForExport(
        DataExchDef.Code,DataExchLineDef.Code,1,GenJournalLine.FIELDCAPTION("Document No."),
        DataExchColumnDef."Data Type"::Text,'',10,'');
      DataExchColumnDef.InsertRecForExport(
        DataExchDef.Code,DataExchLineDef.Code,2,GenJournalLine.FIELDCAPTION("Account No."),
        DataExchColumnDef."Data Type"::Text,'',20,'');
      DataExchColumnDef.InsertRecForExport(
        DataExchDef.Code,DataExchLineDef.Code,3,GenJournalLine.FIELDCAPTION(Amount),
        DataExchColumnDef."Data Type"::Decimal,'<Precision,2><sign><Integer><Decimals><Comma,.>',10,'');

      DataExchMapping.InsertRecForExport(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",DataExchDef.Code,CODEUNIT::"Process Gen. Journal  Lines");
      DataExchFieldMapping.InsertRec(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",1,GenJournalLine.FIELDNO("Document No."),FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",2,GenJournalLine.FIELDNO("Account No."),FALSE,0);
      DataExchFieldMapping.InsertRec(DataExchDef.Code,DataExchLineDef.Code,
        DATABASE::"Gen. Journal Line",3,GenJournalLine.FIELDNO(Amount),FALSE,1);
    END;

    LOCAL PROCEDURE MockDataExchDef@13(CodeuninNo@1000 : Integer;XMLPortNo@1001 : Integer) : Code[10];
    VAR
      DataExchDef@1002 : Record 1222;
    BEGIN
      DataExchDef.INIT;
      DataExchDef.Code := LibraryUtility.GenerateGUID;
      DataExchDef."Reading/Writing XMLport" := XMLPortNo;
      DataExchDef."Reading/Writing Codeunit" := CodeuninNo;
      DataExchDef.INSERT;
      EXIT(DataExchDef.Code);
    END;

    LOCAL PROCEDURE CreateGenJournal@11(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,0);
      GenJournalLine."Document No." := '';
      GenJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateTestValues@15(VAR GenJournalLineDocNo@1001 : ARRAY [2] OF Code[20];VAR GenJournalLineAmount@1000 : ARRAY [2] OF Decimal);
    BEGIN
      GenJournalLineDocNo[1] := LibraryUtility.GenerateGUID;
      GenJournalLineAmount[1] := LibraryRandom.RandInt(100);
      GenJournalLineDocNo[2] := LibraryUtility.GenerateGUID;
      GenJournalLineAmount[2] := LibraryRandom.RandInt(100);
    END;

    LOCAL PROCEDURE CreateTempBlob@10(VAR TempBlob@1000 : Record 99008535;VAR GenJournalLineDocNo@1004 : ARRAY [2] OF Code[20];VAR GenJournalLineAmount@1005 : ARRAY [2] OF Decimal;AccountNo@1006 : Code[20];DataExchDefCode@1002 : Code[20]);
    VAR
      DataExch@1003 : Record 1220;
      TempBlobInStream@1007 : InStream;
      OutStream@1001 : OutStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,TEXTENCODING::MSDos);
      CreateTempBlobString(OutStream,GenJournalLineDocNo[1],GenJournalLineAmount[1],AccountNo);
      CreateTempBlobString(OutStream,GenJournalLineDocNo[2],GenJournalLineAmount[2],AccountNo);
      TempBlob.Blob.CREATEINSTREAM(TempBlobInStream);
      DataExch.InsertRec('',TempBlobInStream,DataExchDefCode);
    END;

    LOCAL PROCEDURE CreateTempBlobString@7(VAR OutStream@1000 : OutStream;GenJournalLineDocNo@1004 : Code[20];GenJournalLineAmount@1005 : Decimal;AccountNo@1001 : Code[20]);
    BEGIN
      OutStream.WRITETEXT(GenJournalLineDocNo,10);
      OutStream.WRITETEXT(PADSTR(AccountNo,20));
      OutStream.WRITETEXT(FORMAT(GenJournalLineAmount,10));
      OutStream.WRITETEXT;
    END;

    LOCAL PROCEDURE WritePayrollFile@17(VAR TempBlob@1000 : Record 99008535;GenJournalLineDocNo@1003 : ARRAY [2] OF Code[20];GenJournalLineAmount@1002 : ARRAY [2] OF Decimal);
    VAR
      OutStream@1001 : OutStream;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,TEXTENCODING::Windows);
      OutStream.WRITETEXT(GenJournalLineDocNo[1] + ',' + FORMAT(GenJournalLineAmount[1]));
      OutStream.WRITETEXT;
      OutStream.WRITETEXT(GenJournalLineDocNo[2] + ',' + FORMAT(GenJournalLineAmount[2]));
      OutStream.WRITETEXT;
    END;

    LOCAL PROCEDURE VerifyGenJnlLine@42(VAR GenJournalLine@1002 : Record 81;ExpDocNo@1003 : ARRAY [2] OF Code[20];ExpAmount@1001 : ARRAY [2] OF Decimal;ExpCountOfGenJournalLine@1000 : Integer);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      Assert.RecordCount(GenJournalLine,ExpCountOfGenJournalLine);

      GenJournalLine.SETRANGE("Document No.",ExpDocNo[1]);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD(Amount,ExpAmount[1]);
      GenJournalLine.SETRANGE("Document No.",ExpDocNo[2]);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD(Amount,ExpAmount[2]);
    END;

    BEGIN
    {
      // [FEATURE] [Payroll] [Import]
    }
    END.
  }
}

