OBJECT Codeunit 134251 Match General Jnl Lines Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1002 : Codeunit 130440;
      LibraryERMCountryData@1007 : Codeunit 131305;
      LibraryVariableStorage@1003 : Codeunit 131004;
      LibraryERM@1001 : Codeunit 131300;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryUtility@1000 : Codeunit 131000;
      Assert@1008 : Codeunit 130000;
      isInitialized@1060 : Boolean;
      MatchSummaryMsg@1006 : TextConst 'ENU=%1 payment lines out of %2 are matched.';
      MissingMatchMsg@1009 : TextConst 'ENU=Text shorter than 4 characters cannot be matched.';

    LOCAL PROCEDURE MatchWithCustInvoice@3(CurrencyCode@1060 : Code[10]);
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      CustLedgerEntry@1008 : Record 21;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      SetupGeneralJournal(GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithCustInvoiceNoCurrency@1068();
    BEGIN
      MatchWithCustInvoice('');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithCustInvoiceAddnlCurrency@1069();
    VAR
      CurrencyExchangeRate@1061 : Record 330;
      Currency@1062 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateExchRate(CurrencyExchangeRate,Currency.Code,0D);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.MODIFY(TRUE);

      MatchWithCustInvoice(Currency.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithCustInvoiceAndPost@6();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      CustLedgerEntry@1008 : Record 21;
      CustLedgerEntry2@1009 : Record 21;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      SetupGeneralJournal(GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FindCustLedgerEntry(CustLedgerEntry2,Customer."No.");

      // Verify.
      VerifyCustLedgerEntry(CustLedgerEntry,FALSE,'',0);
      CustLedgerEntry2.TESTFIELD(Open,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithCustCreditMemo@14();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      GenJournalLine2@1004 : Record 81;
      CustLedgerEntry@1008 : Record 21;
      GenJournalBatch@1001 : Record 232;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,
        GenJournalLine."Document Type"::"Credit Memo",Customer."No.",-Amount);

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,GenJournalLine."Document No.",-GenJournalLine.Amount);

      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine2."Document No.",-Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithVendorInvoice@5();
    VAR
      VendorLedgerEntry@1004 : Record 25;
      Vendor@1000 : Record 23;
      GenJournalLine@1001 : Record 81;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := -LibraryRandom.RandDec(100,2);
      LibraryPurchase.CreateVendor(Vendor);
      SetupGeneralJournal(GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",Amount);
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",
        GenJournalLine."Account Type"::Vendor,Vendor."No.",TRUE);
      VerifyVendorLedgerEntry(VendorLedgerEntry,TRUE,GenJournalLine."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithVendorInvoiceAndPost@2();
    VAR
      Vendor@1000 : Record 23;
      GenJournalLine@1001 : Record 81;
      VendorLedgerEntry@1008 : Record 25;
      VendorLedgerEntry2@1009 : Record 25;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := -LibraryRandom.RandDec(100,2);
      LibraryPurchase.CreateVendor(Vendor);
      SetupGeneralJournal(GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",Amount);
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",
        GenJournalLine."Account Type"::Vendor,Vendor."No.",TRUE);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FindVendorLedgerEntry(VendorLedgerEntry2,Vendor."No.");

      // Verify.
      VerifyVendorLedgerEntry(VendorLedgerEntry,FALSE,'',0);
      VendorLedgerEntry2.TESTFIELD(Open,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithVendorCreditMemo@17();
    VAR
      Vendor@1000 : Record 23;
      GenJournalLine@1002 : Record 81;
      GenJournalLine2@1004 : Record 81;
      VendorLedgerEntry@1008 : Record 25;
      GenJournalBatch@1001 : Record 232;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibraryPurchase.CreateVendor(Vendor);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Vendor,
        GenJournalLine."Document Type"::"Credit Memo",Vendor."No.",Amount);

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,GenJournalLine."Document No.",-GenJournalLine.Amount);

      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Vendor,Vendor."No.",TRUE);
      VerifyVendorLedgerEntry(VendorLedgerEntry,TRUE,GenJournalLine2."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithCustVendorInvoices@22();
    VAR
      Vendor@1002 : Record 23;
      Customer@1000 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1004 : Record 81;
      GenJournalBatch@1003 : Record 232;
      CustLedgerEntry@1008 : Record 21;
      VendorLedgerEntry@1007 : Record 25;
      Amount@1006 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Vendor,GenJournalLine."Document Type"::Invoice,
        Vendor."No.",-Amount);
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,'',-Amount);

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine2."Document No.",Amount);
      VerifyVendorLedgerEntry(VendorLedgerEntry,TRUE,'',0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithCustVendorInvoicesCompetingCriteria@57();
    VAR
      Vendor@1002 : Record 23;
      Customer@1000 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1004 : Record 81;
      GenJournalBatch@1003 : Record 232;
      CustLedgerEntry@1008 : Record 21;
      VendorLedgerEntry@1007 : Record 25;
      Amount@1006 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Name,COPYSTR(CREATEGUID,1,50));
      Customer.MODIFY(TRUE);
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateLedgerEntry(
        GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",Amount + LibraryRandom.RandDec(100,2));
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      CreateLedgerEntry(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,GenJournalLine."Document Type"::Invoice,
        Vendor."No.",-Amount - LibraryRandom.RandDec(100,2));
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,Customer.Name + GenJournalLine."Document No.",-Amount);

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine2."Document No.",Amount);
      VerifyVendorLedgerEntry(VendorLedgerEntry,TRUE,'',0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithVendorCustInvoices@56();
    VAR
      Vendor@1002 : Record 23;
      Customer@1000 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1004 : Record 81;
      GenJournalBatch@1003 : Record 232;
      CustLedgerEntry@1008 : Record 21;
      VendorLedgerEntry@1007 : Record 25;
      Amount@1006 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Vendor,
        GenJournalLine."Document Type"::Invoice,Vendor."No.",-Amount);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,'',Amount);
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Vendor,Vendor."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,'',0);
      VerifyVendorLedgerEntry(VendorLedgerEntry,TRUE,GenJournalLine2."Document No.",-Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchWithConflictingInvoiceCriteria@23();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1003 : Record 81;
      GenJournalLine3@1004 : Record 81;
      GenJournalBatch@1006 : Record 232;
      CustLedgerEntry@1008 : Record 21;
      CustLedgerEntry2@1007 : Record 21;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Name,COPYSTR(CREATEGUID,1,50));
      Customer.MODIFY(TRUE);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry2,Customer."No.");

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,Customer.Name,-Amount);
      CreateGenJnlLineForMatching(GenJournalLine3,GenJournalBatch,GenJournalLine."Document No.",-Amount);

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyGenJnlLine(GenJournalLine3,GenJournalLine3."Document Type"::Payment,GenJournalLine3."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine2."Document No.",Amount);
      VerifyCustLedgerEntry(CustLedgerEntry2,TRUE,GenJournalLine3."Document No.",Amount);
    END;

    LOCAL PROCEDURE MatchWithPartialInvoiceApplication@21(InvoiceAmount@1060 : Decimal;PaidAmount@1061 : Decimal;AppliedAmount@1062 : Decimal);
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1003 : Record 81;
      GenJournalBatch@1006 : Record 232;
      CustLedgerEntry@1008 : Record 21;
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Name,COPYSTR(CREATEGUID,1,50));
      Customer.MODIFY(TRUE);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",InvoiceAmount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,Customer.Name,PaidAmount);

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine2."Document No.",AppliedAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchInvoiceWithPartialPayment@1060();
    VAR
      InvoiceAmount@1062 : Decimal;
      PaidAmount@1061 : Decimal;
    BEGIN
      InvoiceAmount := LibraryRandom.RandDec(100,2);
      PaidAmount := -InvoiceAmount - LibraryRandom.RandDecInDecimalRange(1,InvoiceAmount,2);
      MatchWithPartialInvoiceApplication(InvoiceAmount,PaidAmount,InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchPartiallyInvoiceWithPayment@1061();
    VAR
      InvoiceAmount@1061 : Decimal;
      PaidAmount@1060 : Decimal;
    BEGIN
      InvoiceAmount := LibraryRandom.RandDec(100,2);
      PaidAmount := -InvoiceAmount + LibraryRandom.RandDecInDecimalRange(1,InvoiceAmount,2);
      MatchWithPartialInvoiceApplication(InvoiceAmount,PaidAmount,-PaidAmount);
    END;

    [Normal]
    LOCAL PROCEDURE MatchCustNamePartially@19(FirstCustomerName@1007 : Text[50];SecondCustomerName@1008 : Text[50];Description@1009 : Text[50]);
    VAR
      Customer@1005 : Record 18;
      Customer2@1006 : Record 18;
      GenJournalLine@1004 : Record 81;
      GenJournalLine2@1003 : Record 81;
      GenJournalBatch@1002 : Record 232;
      CustLedgerEntry@1001 : Record 21;
      Amount@1000 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Name,FirstCustomerName);
      Customer.MODIFY(TRUE);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer."No.",Amount + LibraryRandom.RandDec(100,2));
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      LibrarySales.CreateCustomer(Customer2);
      Customer2.VALIDATE(Name,SecondCustomerName);
      Customer2.MODIFY(TRUE);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer2."No.",Amount + LibraryRandom.RandDec(100,2));

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,Description,-Amount);

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,GenJournalLine2."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,GenJournalLine2."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchPartiallyTwoCustNames@47();
    VAR
      Name@1006 : Text[50];
    BEGIN
      Name := CREATEGUID;
      MatchCustNamePartially(COPYSTR(Name,1,8),PADSTR(COPYSTR(Name,1,4),8,'-'),Name);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchPartiallyOneCustName@40();
    VAR
      Name@1000 : Text[50];
    BEGIN
      Name := CREATEGUID;
      MatchCustNamePartially(COPYSTR(Name,1,8),'',Name);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DoNotMatchWithCustInvoice@16();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      GenJournalLine2@1001 : Record 81;
      GenJournalBatch@1004 : Record 232;
      CustLedgerEntry@1008 : Record 21;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Customer,
        GenJournalLine."Document Type"::Invoice,Customer."No.",Amount);

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,GenJournalLine."Document No.",GenJournalLine.Amount);

      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      // Exercise.
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,'',0,'',FALSE);
      VerifyCustLedgerEntry(CustLedgerEntry,TRUE,'',0);
    END;

    [Test]
    [HandlerFunctions(MatchSummaryMsgHandler)]
    PROCEDURE DoNotMatchWithVendorInvoice@15();
    VAR
      Vendor@1000 : Record 23;
      GenJournalLine@1002 : Record 81;
      GenJournalLine2@1001 : Record 81;
      GenJournalBatch@1004 : Record 232;
      VendorLedgerEntry@1008 : Record 25;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibraryPurchase.CreateVendor(Vendor);
      CreateLedgerEntry(GenJournalLine,GenJournalLine."Account Type"::Vendor,
        GenJournalLine."Document Type"::Invoice,Vendor."No.",-Amount);

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,GenJournalLine."Document No.",GenJournalLine.Amount);

      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");

      // Exercise.
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(1);
      LibraryVariableStorage.Enqueue(MissingMatchMsg);
      GenJournalLine2.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,'',0,'',FALSE);
      VerifyVendorLedgerEntry(VendorLedgerEntry,TRUE,'',0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,TemplateListPageHandler)]
    PROCEDURE RemoveAccNoAfterMatching@52();
    VAR
      CustLedgerEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
      Customer@1004 : Record 18;
      GeneralJournal@1002 : TestPage 39;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      SetupGeneralJournal(GenJnlLine,GenJnlLine."Account Type"::Customer,Customer."No.",Amount);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      GenJnlLine.MatchSingleLedgerEntry;

      // Exercise.
      LibraryVariableStorage.Enqueue(GenJnlLine."Journal Template Name");
      GeneralJournal.OPENEDIT;
      GeneralJournal.GOTORECORD(GenJnlLine);
      GeneralJournal."Account No.".SETVALUE('');
      GeneralJournal.OK.INVOKE;

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapGLAccountDebit@18();
    VAR
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::"G/L Account",'',1);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::"G/L Account",TextToAccMapping."Debit Acc. No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapGLAccountCredit@64();
    VAR
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::"G/L Account",'',-1);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::"G/L Account",TextToAccMapping."Credit Acc. No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapVendorAccount@33();
    VAR
      Vendor@1005 : Record 23;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Vendor,Vendor."No.",1);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::Vendor,Vendor."No.",TRUE);
      VerifyAppliedDocLine(GenJournalLine,GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapCustomerAccount@35();
    VAR
      Customer@1005 : Record 18;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Customer,Customer."No.",-1);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyAppliedDocLine(GenJournalLine,GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapVendorAccountPost@1090();
    VAR
      VendorLedgerEntry@1006 : Record 25;
      Vendor@1005 : Record 23;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
      DocNo@1000 : Code[20];
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Vendor,Vendor."No.",1);

      // Exercise.
      DocNo := GenJournalLine."Document No.";
      GenJournalLine.MatchSingleLedgerEntry;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify.
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");
      VendorLedgerEntry.TESTFIELD("Document No.",DocNo);
      VendorLedgerEntry.TESTFIELD("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VerifyVendorLedgerEntry(VendorLedgerEntry,FALSE,'',0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapCustomerAccountPost@1091();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1005 : Record 18;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
      DocNo@1002 : Code[20];
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Customer,Customer."No.",-1);

      // Exercise.
      DocNo := GenJournalLine."Document No.";
      GenJournalLine.MatchSingleLedgerEntry;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify.
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      CustLedgerEntry.TESTFIELD("Document No.",DocNo);
      CustLedgerEntry.TESTFIELD("Document Type",GenJournalLine."Document Type"::Invoice);
      VerifyCustLedgerEntry(CustLedgerEntry,FALSE,'',0);
    END;

    [Test]
    [HandlerFunctions(MatchSummaryMsgHandler)]
    PROCEDURE MatchCustomerWithMappingAndPost@25();
    VAR
      TextToAccMapping@1001 : Record 1251;
      Customer@1000 : Record 18;
      GenJournalLine@1002 : Record 81;
      CustLedgerEntry@1008 : Record 21;
      DocNo@1004 : Code[20];
      Amount@1003 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      LibrarySales.CreateCustomer(Customer);
      SetupGeneralJournal(GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",Amount);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Customer,Customer."No.",-1);
      DocNo := GenJournalLine."Document No.";

      // Exercise.
      LibraryVariableStorage.Enqueue(1);
      LibraryVariableStorage.Enqueue(1);
      LibraryVariableStorage.Enqueue('');
      GenJournalLine.MatchSingleLedgerEntry;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");

      // Verify.
      CustLedgerEntry.TESTFIELD(Open,FALSE);
      CustLedgerEntry.TESTFIELD("Document No.",DocNo);
      CustLedgerEntry.TESTFIELD("Document Type",GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapVendorAccountWRefund@38();
    VAR
      Vendor@1005 : Record 23;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Vendor,Vendor."No.",-1);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Refund,'',
        GenJournalLine."Account Type"::Vendor,Vendor."No.",TRUE);
      VerifyAppliedDocLine(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapCustomerAccountWRefund@36();
    VAR
      Customer@1005 : Record 18;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Customer,Customer."No.",1);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Refund,'',
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyAppliedDocLine(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapVendorAccountPostRefund@30();
    VAR
      VendorLedgerEntry@1006 : Record 25;
      Vendor@1005 : Record 23;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
      DocNo@1000 : Code[20];
    BEGIN
      Initialize;

      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Vendor,Vendor."No.",-1);

      // Exercise.
      DocNo := GenJournalLine."Document No.";
      GenJournalLine.MatchSingleLedgerEntry;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify.
      FindVendorLedgerEntry(VendorLedgerEntry,Vendor."No.");
      VendorLedgerEntry.TESTFIELD("Document No.",DocNo);
      VendorLedgerEntry.TESTFIELD("Document Type",VendorLedgerEntry."Document Type"::"Credit Memo");
      VerifyVendorLedgerEntry(VendorLedgerEntry,FALSE,'',0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapCustomerAccountPostRefund@27();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1005 : Record 18;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
      DocNo@1002 : Code[20];
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Customer,Customer."No.",1);

      // Exercise.
      DocNo := GenJournalLine."Document No.";
      GenJournalLine.MatchSingleLedgerEntry;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify.
      FindCustLedgerEntry(CustLedgerEntry,Customer."No.");
      CustLedgerEntry.TESTFIELD("Document No.",DocNo);
      CustLedgerEntry.TESTFIELD("Document Type",GenJournalLine."Document Type"::"Credit Memo");
      VerifyCustLedgerEntry(CustLedgerEntry,FALSE,'',0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapVsMatch@37();
    VAR
      Customer@1005 : Record 18;
      GenJournalLine@1001 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Name,COPYSTR(CREATEGUID,1,50));
      Customer.MODIFY(TRUE);
      SetupGeneralJournal(GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",LibraryRandom.RandDec(100,2));
      CreateAccountMapping(TextToAccMapping,GenJournalLine."Document No.",
        TextToAccMapping."Bal. Source Type"::Customer,Customer."No.");

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapResilience@29();
    VAR
      Customer@1005 : Record 18;
      Customer2@1006 : Record 18;
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1002 : Record 81;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      LibrarySales.CreateCustomer(Customer);
      SetupAccountMapping(TextToAccMapping,GenJournalLine,TextToAccMapping."Bal. Source Type"::Customer,Customer."No.",-1);

      GenJournalLine.MatchSingleLedgerEntry;

      LibrarySales.CreateCustomer(Customer2);
      CreateLedgerEntry(GenJournalLine2,GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice,
        Customer2."No.",-GenJournalLine.Amount);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::Customer,Customer."No.",TRUE);
      VerifyAppliedDocLine(GenJournalLine,GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapMultipleRules@39();
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalLine2@1002 : Record 81;
      GenJournalBatch@1003 : Record 232;
      TextToAccMapping@1004 : Record 1251;
      TextToAccMapping2@1006 : Record 1251;
      Keyword@1005 : Text[50];
      Amount@1000 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      Keyword := CREATEGUID;
      CreateAccountMapping(TextToAccMapping,COPYSTR(Keyword,1,5),TextToAccMapping."Bal. Source Type"::"G/L Account",'');
      CreateAccountMapping(TextToAccMapping2,COPYSTR(Keyword,1,10),TextToAccMapping."Bal. Source Type"::"G/L Account",'');

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine,GenJournalBatch,
        COPYSTR(Keyword,1,5) + ' ' + COPYSTR(Keyword,7,1),Amount);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,COPYSTR(Keyword,1,10),Amount);

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::"G/L Account",TextToAccMapping."Debit Acc. No.",TRUE);
      VerifyGenJnlLine(GenJournalLine2,GenJournalLine2."Document Type"::Payment,'',
        GenJournalLine."Account Type"::"G/L Account",TextToAccMapping2."Debit Acc. No.",TRUE);
    END;

    LOCAL PROCEDURE AddMappingRule@45(AccountType@1007 : Option);
    VAR
      GLAccount@1006 : Record 15;
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1003 : Record 81;
      TextToAccMapping@1002 : Record 1251;
      Customer@1008 : Record 18;
      Vendor@1009 : Record 23;
      GeneralJournal@1005 : TestPage 39;
      Keyword@1001 : Text[50];
      Amount@1000 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      Amount := LibraryRandom.RandDec(100,2);
      Keyword :=
        LibraryUtility.GenerateRandomCode(
          TextToAccMapping.FIELDNO("Mapping Text"),DATABASE::"Text-to-Account Mapping") + '{[(*)]} ';

      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine,GenJournalBatch,'',Amount);
      GenJournalLine.VALIDATE("Account Type",AccountType);
      CASE AccountType OF
        GenJournalLine."Account Type"::Customer:
          BEGIN
            LibrarySales.CreateCustomer(Customer);
            GenJournalLine.VALIDATE("Account No.",Customer."No.");
          END;
        GenJournalLine."Account Type"::Vendor:
          BEGIN
            LibraryPurchase.CreateVendor(Vendor);
            GenJournalLine.VALIDATE("Account No.",Vendor."No.");
          END;
      END;
      GenJournalLine.VALIDATE(Description,Keyword);
      GenJournalLine.MODIFY(TRUE);

      // Exercise.
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryVariableStorage.Enqueue(GenJournalBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(GLAccount."No.");

      GeneralJournal.OPENVIEW;
      GeneralJournal.GOTORECORD(GenJournalLine);
      GeneralJournal.AddMappingRule.INVOKE;
      GeneralJournal.OK.INVOKE;

      // Verify.
      TextToAccMapping.SETRANGE("Mapping Text",Keyword);
      TextToAccMapping.FINDFIRST;
      TextToAccMapping.TESTFIELD("Bal. Source Type",AccountType);
    END;

    [Test]
    [HandlerFunctions(TemplateListPageHandler,MappingPageHandler)]
    PROCEDURE AddRuleGLAccount@31();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      AddMappingRule(GenJournalLine."Account Type"::"G/L Account");
    END;

    [Test]
    [HandlerFunctions(TemplateListPageHandler,MappingPageHandler)]
    PROCEDURE AddRuleCustomer@32();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      AddMappingRule(GenJournalLine."Account Type"::Customer);
    END;

    [Test]
    [HandlerFunctions(TemplateListPageHandler,MappingPageHandler)]
    PROCEDURE AddRuleVendor@34();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      AddMappingRule(GenJournalLine."Account Type"::Vendor);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE NoMapFound@41();
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1003 : Record 232;
      TextToAccMapping@1004 : Record 1251;
    BEGIN
      Initialize;

      // Setup.
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine,GenJournalBatch,'',-LibraryRandom.RandDec(100,2));
      CreateAccountMapping(TextToAccMapping,
        LibraryUtility.GenerateRandomCode(TextToAccMapping.FIELDNO("Line No."),DATABASE::"Text-to-Account Mapping"),
        TextToAccMapping."Bal. Source Type"::"G/L Account",'');

      // Exercise.
      GenJournalLine.MatchSingleLedgerEntry;

      // Verify.
      VerifyGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::Payment,'',
        GenJournalLine."Account Type"::"G/L Account",'',FALSE);
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      LibraryVariableStorage.Clear;
      CloseExistingEntries;
      IF isInitialized THEN
        EXIT;

      LibraryVariableStorage.Clear;
      LibraryERMCountryData.UpdateLocalData;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE FindCustLedgerEntry@4(VAR CustLedgerEntry@1000 : Record 21;CustNo@1001 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@10(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1001 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE CloseExistingEntries@1063();
    VAR
      CustLedgerEntry@1060 : Record 21;
      VendorLedgerEntry@1061 : Record 25;
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.MODIFYALL(Open,FALSE);
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.MODIFYALL(Open,FALSE);
    END;

    LOCAL PROCEDURE CreateGenJnlLineForMatching@24(VAR GenJournalLine@1001 : Record 81;GenJournalBatch@1000 : Record 232;Description@1002 : Text[250];Amount@1003 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,0,'',Amount);
      GenJournalLine.Description :=
        COPYSTR(Description,1,LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Line",GenJournalLine.FIELDNO(Description)));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJnlBatchWithBalanceAccount@9(VAR GenJournalBatch@1001 : Record 232);
    VAR
      GLAccount@1002 : Record 15;
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGLAccount(GLAccount);
      GenJournalBatch.VALIDATE("Bal. Account Type",GenJournalBatch."Bal. Account Type"::"G/L Account");
      GenJournalBatch.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLedgerEntry@26(VAR GenJournalLine@1002 : Record 81;AccountType@1003 : Option;DocumentType@1001 : Option;AccountNo@1005 : Code[20];Amount@1000 : Decimal);
    VAR
      GenJournalBatch@1004 : Record 232;
    BEGIN
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Document No.",COPYSTR(CREATEGUID,1,15));
      GenJournalLine.VALIDATE(Description,GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAccountMapping@20(VAR TextToAccMapping@1000 : Record 1251;Keyword@1004 : Text[50];BalSourceType@1002 : Option;BalSourceNo@1003 : Code[20]);
    VAR
      GLAccount@1001 : Record 15;
      LastLineNo@1005 : Integer;
    BEGIN
      WITH TextToAccMapping DO BEGIN
        IF FINDLAST THEN
          LastLineNo := "Line No.";

        INIT;
        VALIDATE("Line No.",LastLineNo + 1);
        VALIDATE("Mapping Text",Keyword);
        LibraryERM.CreateGLAccount(GLAccount);
        VALIDATE("Debit Acc. No.",GLAccount."No.");
        LibraryERM.CreateGLAccount(GLAccount);
        VALIDATE("Credit Acc. No.",GLAccount."No.");
        VALIDATE("Bal. Source Type",BalSourceType);
        VALIDATE("Bal. Source No.",BalSourceNo);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetupGeneralJournal@12(VAR GenJournalLine2@1000 : Record 81;AccountType@1004 : Option;AccountNo@1006 : Code[20];Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1002 : Record 81;
    BEGIN
      CreateLedgerEntry(GenJournalLine,AccountType,GenJournalLine."Document Type"::Invoice,AccountNo,Amount);
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine2,GenJournalBatch,GenJournalLine."Document No.",-GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE SetupAccountMapping@46(VAR TextToAccMapping@1007 : Record 1251;VAR GenJournalLine@1008 : Record 81;BalSourceType@1001 : Option;BalSourceNo@1002 : Code[20];Sign@1003 : Integer);
    VAR
      GenJournalBatch@1004 : Record 232;
      Amount@1000 : Decimal;
    BEGIN
      Amount := Sign * LibraryRandom.RandDec(100,2);
      CreateAccountMapping(TextToAccMapping,COPYSTR(CREATEGUID,1,50),BalSourceType,BalSourceNo);
      CreateGenJnlBatchWithBalanceAccount(GenJournalBatch);
      CreateGenJnlLineForMatching(GenJournalLine,GenJournalBatch,TextToAccMapping."Mapping Text",Amount);
    END;

    LOCAL PROCEDURE VerifyGenJnlLine@7(VAR GenJnlLine@1000 : Record 81;DocType@1001 : Option;DocNo@1002 : Code[50];AccountType@1003 : Option;AccountNo@1004 : Code[20];Applied@1005 : Boolean);
    BEGIN
      GenJnlLine.FIND;
      GenJnlLine.TESTFIELD("Document Type",DocType);
      GenJnlLine.TESTFIELD("Applies-to ID",DocNo);
      GenJnlLine.TESTFIELD("Account Type",AccountType);
      GenJnlLine.TESTFIELD("Account No.",AccountNo);
      GenJnlLine.TESTFIELD("Applied Automatically",Applied);
    END;

    LOCAL PROCEDURE VerifyAppliedDocLine@42(GenJnlLine@1000 : Record 81;DocType@1002 : Option);
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine2.SETRANGE("Applies-to Doc. Type",GenJnlLine."Document Type");
      GenJnlLine2.SETRANGE("Applies-to Doc. No.",GenJnlLine."Document No.");
      GenJnlLine2.SETRANGE("Account Type",GenJnlLine."Account Type");
      GenJnlLine2.SETRANGE("Account No.",GenJnlLine."Account No.");
      Assert.AreEqual(1,GenJnlLine2.COUNT,GenJnlLine2.GETFILTERS);
      GenJnlLine2.FINDFIRST;
      GenJnlLine2.TESTFIELD("Document Type",DocType);
      GenJnlLine2.TESTFIELD("Applied Automatically",TRUE);
    END;

    LOCAL PROCEDURE VerifyCustLedgerEntry@8(CustLedgerEntry@1000 : Record 21;Open@1001 : Boolean;AppliesToID@1002 : Code[50];AmountToApply@1003 : Decimal);
    BEGIN
      CustLedgerEntry.FIND;
      CustLedgerEntry.TESTFIELD(Open,Open);
      CustLedgerEntry.TESTFIELD("Applies-to ID",AppliesToID);
      CustLedgerEntry.TESTFIELD("Amount to Apply",AmountToApply);
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@11(VendorLedgerEntry@1000 : Record 25;Open@1001 : Boolean;AppliesToID@1002 : Code[50];AmountToApply@1003 : Decimal);
    BEGIN
      VendorLedgerEntry.FIND;
      VendorLedgerEntry.TESTFIELD(Open,Open);
      VendorLedgerEntry.TESTFIELD("Applies-to ID",AppliesToID);
      VendorLedgerEntry.TESTFIELD("Amount to Apply",AmountToApply);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@13(Msg@1000 : Text[1024]);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE MatchSummaryMsgHandler@44(Msg@1000 : Text[1024]);
    VAR
      MatchedLinesCount@1001 : Variant;
      TotalLinesCount@1002 : Variant;
      AdditionalText@1003 : Variant;
      CRLF@1004 : Text[2];
    BEGIN
      LibraryVariableStorage.Dequeue(MatchedLinesCount);
      LibraryVariableStorage.Dequeue(TotalLinesCount);
      LibraryVariableStorage.Dequeue(AdditionalText);
      CRLF[1] := 10;
      CRLF[2] := 13;
      Assert.AreEqual(DELCHR(Msg,'=',CRLF),STRSUBSTNO(MatchSummaryMsg,MatchedLinesCount,TotalLinesCount) + FORMAT(AdditionalText),'');
    END;

    [PageHandler]
    PROCEDURE MappingPageHandler@50(VAR TextToAccMappingPage@1000 : TestPage 1251);
    VAR
      TextToAccMapping@1002 : Record 1251;
      GLAccount@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GLAccount);
      Assert.AreEqual(TextToAccMappingPage."Bal. Source Type".VALUE <> FORMAT(TextToAccMapping."Bal. Source Type"::"G/L Account"),
        TextToAccMappingPage."Bal. Source No.".ENABLED,'Wrong Bal. Source No. enabled state.');
      TextToAccMappingPage."Debit Acc. No.".SETVALUE(GLAccount);
      TextToAccMappingPage."Credit Acc. No.".SETVALUE(GLAccount);
      TextToAccMappingPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE TemplateListPageHandler@28(VAR GeneralJournalTemplateList@1000 : TestPage 250);
    VAR
      TemplateName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TemplateName);
      GeneralJournalTemplateList.FILTER.SETFILTER(Name,TemplateName);
      GeneralJournalTemplateList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [General Journal] [Match]
    }
    END.
  }
}

