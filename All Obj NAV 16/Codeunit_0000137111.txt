OBJECT Codeunit 137111 SCM Production Backlog Chart
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryManufacturing@1015 : Codeunit 132202;
      LibraryAssembly@1013 : Codeunit 132207;
      LibraryERMCountryData@1008 : Codeunit 131305;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1007 : Codeunit 130440;
      isInitialized@1006 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    BEGIN
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE SetupDelayedProdOrders@11(ProdItems@1005 : Integer;Simulated@1006 : Integer;Planned@1008 : Integer;FirmPlanned@1009 : Integer;Released@1010 : Integer);
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1015 : Record 27;
      TempItem@1002 : TEMPORARY Record 27;
      DelayedProdOrdersByCost@1000 : Query 5400;
      Qty@1003 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1011 : Decimal;
      PrevTotalCostAmount@1012 : Decimal;
      count@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      FOR count := 1 TO ProdItems DO BEGIN
        LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::"Prod. Order",'','');
        LibraryAssembly.CreateBOM(Item,1);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Simulated,Simulated);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Planned,Planned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::"Firm Planned",FirmPlanned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Released,Released);
        TempItem := Item;
        TempItem.INSERT;
      END;

      // Verify query: Query - database consistency.
      DelayedProdOrdersByCost.OPEN;
      count := 0;
      WHILE DelayedProdOrdersByCost.READ DO BEGIN
        count += 1;
        GetExpectedProdOrderBacklog(
          Qty,CostAmount,TotalCostAmount,'<=',FALSE,DelayedProdOrdersByCost.Status,DelayedProdOrdersByCost.Item_No);
        IF count > 1 THEN
          Assert.IsTrue(
            PrevTotalCostAmount >= TotalCostAmount,
            'Query is not sorted by ' + DelayedProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreEqual(Qty,DelayedProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + DelayedProdOrdersByCost.Item_No + '; field: ' + DelayedProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
        Assert.AreEqual(
          TotalCostAmount,DelayedProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + DelayedProdOrdersByCost.Item_No + '; field: ' + DelayedProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreNotEqual(
          ProductionOrder.Status::Simulated,DelayedProdOrdersByCost.Status,'Item: ' + DelayedProdOrdersByCost.Item_No + '; field: ' + DelayedProdOrdersByCost.COLUMNCAPTION(Status));
        Assert.AreNotEqual(
          ProductionOrder.Status::Finished,DelayedProdOrdersByCost.Status,'Item: ' + DelayedProdOrdersByCost.Item_No + '; field: ' + DelayedProdOrdersByCost.COLUMNCAPTION(Status));
        PrevTotalCostAmount := TotalCostAmount;
      END;
      DelayedProdOrdersByCost.CLOSE;

      // Verify query: Database - query consistency.
      TempItem.FINDSET;
      REPEAT
        VerifyDelayedBacklogRecords(TempItem."No.",ProductionOrder.Status::Planned);
        VerifyDelayedBacklogRecords(TempItem."No.",ProductionOrder.Status::"Firm Planned");
        VerifyDelayedBacklogRecords(TempItem."No.",ProductionOrder.Status::Released);
      UNTIL TempItem.NEXT = 0;
    END;

    [Test]
    PROCEDURE DelayedProdOrdersByCost@13();
    BEGIN
      SetupDelayedProdOrders(2,2,2,2,2);
    END;

    [Normal]
    LOCAL PROCEDURE SetupTop10ProdOrders@4(ProdItems@1005 : Integer;Simulated@1006 : Integer;Planned@1008 : Integer;FirmPlanned@1009 : Integer;Released@1010 : Integer);
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1015 : Record 27;
      Top10ProdOrdersByCost@1000 : Query 5402;
      Qty@1003 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1011 : Decimal;
      PrevTotalCostAmount@1012 : Decimal;
      count@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      FOR count := 1 TO ProdItems DO BEGIN
        LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::"Prod. Order",'','');
        LibraryAssembly.CreateBOM(Item,1);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Simulated,Simulated);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Planned,Planned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::"Firm Planned",FirmPlanned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Released,Released);
      END;

      // Verify query: Query - database consistency.
      count := 0;
      Top10ProdOrdersByCost.OPEN;
      WHILE Top10ProdOrdersByCost.READ DO BEGIN
        GetExpectedProdOrderBacklog(
          Qty,CostAmount,TotalCostAmount,'',FALSE,Top10ProdOrdersByCost.Status,Top10ProdOrdersByCost.Item_No);
        count += 1;
        IF count > 1 THEN
          Assert.IsTrue(
            PrevTotalCostAmount >= TotalCostAmount,
            'Query is not sorted by ' + Top10ProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreEqual(Qty,Top10ProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + Top10ProdOrdersByCost.Item_No + '; field: ' + Top10ProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
        Assert.AreEqual(
          TotalCostAmount,Top10ProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + Top10ProdOrdersByCost.Item_No + '; field: ' + Top10ProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreNotEqual(ProductionOrder.Status::Simulated,Top10ProdOrdersByCost.Status,'Item: ' + Top10ProdOrdersByCost.Item_No + '; field: ' + Top10ProdOrdersByCost.COLUMNCAPTION(Status));
        Assert.AreNotEqual(ProductionOrder.Status::Finished,Top10ProdOrdersByCost.Status,'Item: ' + Top10ProdOrdersByCost.Item_No + '; field: ' + Top10ProdOrdersByCost.COLUMNCAPTION(Status));
        PrevTotalCostAmount := TotalCostAmount;
      END;
      Top10ProdOrdersByCost.CLOSE;
      Assert.IsTrue(Top10ProdOrdersByCost.TOPNUMBEROFROWS = 10,'More than 10 records returned by query.');
    END;

    [Test]
    PROCEDURE Top10ProdOrdersByCost@2();
    BEGIN
      SetupTop10ProdOrders(1,2,2,2,2);
    END;

    [Normal]
    LOCAL PROCEDURE SetupPendingProdOrders@17(ProdItems@1005 : Integer;Simulated@1006 : Integer;Planned@1008 : Integer;FirmPlanned@1009 : Integer;Released@1010 : Integer);
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1015 : Record 27;
      TempItem@1002 : TEMPORARY Record 27;
      PendingProdOrdersByCost@1000 : Query 5401;
      Qty@1003 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1011 : Decimal;
      PrevTotalCostAmount@1012 : Decimal;
      count@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      FOR count := 1 TO ProdItems DO BEGIN
        LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::"Prod. Order",'','');
        LibraryAssembly.CreateBOM(Item,1);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Simulated,Simulated);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Planned,Planned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::"Firm Planned",FirmPlanned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Released,Released);
        TempItem := Item;
        TempItem.INSERT;
      END;

      // Verify query: Query - database consistency.
      PendingProdOrdersByCost.OPEN;
      count := 0;
      WHILE PendingProdOrdersByCost.READ DO BEGIN
        count += 1;
        GetExpectedProdOrderBacklog(
          Qty,CostAmount,TotalCostAmount,'>=',FALSE,PendingProdOrdersByCost.Status,PendingProdOrdersByCost.Item_No);
        IF count > 1 THEN
          Assert.IsTrue(
            PrevTotalCostAmount >= TotalCostAmount,
            'Query is not sorted by ' + PendingProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreEqual(Qty,PendingProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + PendingProdOrdersByCost.Item_No + '; field: ' + PendingProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
        Assert.AreEqual(
          TotalCostAmount,PendingProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + PendingProdOrdersByCost.Item_No + '; field: ' + PendingProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreNotEqual(
          ProductionOrder.Status::Simulated,PendingProdOrdersByCost.Status,'Item: ' + PendingProdOrdersByCost.Item_No + '; field: ' + PendingProdOrdersByCost.COLUMNCAPTION(Status));
        Assert.AreNotEqual(
          ProductionOrder.Status::Finished,PendingProdOrdersByCost.Status,'Item: ' + PendingProdOrdersByCost.Item_No + '; field: ' + PendingProdOrdersByCost.COLUMNCAPTION(Status));
        PrevTotalCostAmount := TotalCostAmount;
      END;
      PendingProdOrdersByCost.CLOSE;

      // Verify query: Database - query consistency.
      TempItem.FINDSET;
      REPEAT
        VerifyPendingBacklogRecords(TempItem."No.",ProductionOrder.Status::Planned);
        VerifyPendingBacklogRecords(TempItem."No.",ProductionOrder.Status::"Firm Planned");
        VerifyPendingBacklogRecords(TempItem."No.",ProductionOrder.Status::Released);
      UNTIL TempItem.NEXT = 0;
    END;

    [Test]
    PROCEDURE PendingProdOrdersByCost@15();
    BEGIN
      SetupPendingProdOrders(2,2,2,2,2);
    END;

    [Normal]
    LOCAL PROCEDURE SetupMyDelayedProdOrders@1(ProdItems@1005 : Integer;Simulated@1006 : Integer;Planned@1008 : Integer;FirmPlanned@1009 : Integer;Released@1010 : Integer);
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1015 : Record 27;
      TempItem@1002 : TEMPORARY Record 27;
      MyItem@1011 : Record 9152;
      MyDelayedProdOrders@1000 : Query 5404;
      Qty@1003 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1012 : Decimal;
      count@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      FOR count := 1 TO ProdItems DO BEGIN
        LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::"Prod. Order",'','');
        LibraryAssembly.CreateBOM(Item,1);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Simulated,Simulated);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Planned,Planned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::"Firm Planned",FirmPlanned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Released,Released);
        IF count MOD 2 = 0 THEN BEGIN
          MyItem.INIT;
          MyItem.VALIDATE("User ID",USERID);
          MyItem.VALIDATE("Item No.",Item."No.");
          MyItem.INSERT;
        END;
        TempItem := Item;
        TempItem.INSERT;
      END;

      // Verify query: Query - database consistency.
      MyDelayedProdOrders.SETFILTER(User_ID,USERID);
      MyDelayedProdOrders.OPEN;
      WHILE MyDelayedProdOrders.READ DO BEGIN
        GetExpectedProdOrderBacklog(Qty,CostAmount,TotalCostAmount,'<=',TRUE,MyDelayedProdOrders.Status,MyDelayedProdOrders.Item_No);
        Assert.AreEqual(Qty,MyDelayedProdOrders.Sum_Remaining_Quantity,'Item: ' + MyDelayedProdOrders.Item_No + '; field: ' + MyDelayedProdOrders.COLUMNCAPTION(Sum_Remaining_Quantity));
        Assert.AreNotEqual(ProductionOrder.Status::Simulated,MyDelayedProdOrders.Status,'Item: ' + MyDelayedProdOrders.Item_No + '; field: ' + MyDelayedProdOrders.COLUMNCAPTION(Status));
        Assert.AreNotEqual(ProductionOrder.Status::Finished,MyDelayedProdOrders.Status,'Item: ' + MyDelayedProdOrders.Item_No + '; field: ' + MyDelayedProdOrders.COLUMNCAPTION(Status));
      END;
      MyDelayedProdOrders.CLOSE;

      // Verify query: Database - query consistency.
      TempItem.FINDSET;
      REPEAT
        VerifyMyDelayedBacklogRecords(TempItem."No.",ProductionOrder.Status::Planned);
        VerifyMyDelayedBacklogRecords(TempItem."No.",ProductionOrder.Status::"Firm Planned");
        VerifyMyDelayedBacklogRecords(TempItem."No.",ProductionOrder.Status::Released);
      UNTIL TempItem.NEXT = 0;
    END;

    [Test]
    PROCEDURE MyDelayedProdOrders@9();
    BEGIN
      SetupMyDelayedProdOrders(3,2,2,2,2);
    END;

    [Normal]
    LOCAL PROCEDURE SetupMyProdOrders@27(ProdItems@1005 : Integer;Simulated@1006 : Integer;Planned@1008 : Integer;FirmPlanned@1009 : Integer;Released@1010 : Integer);
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1015 : Record 27;
      TempItem@1002 : TEMPORARY Record 27;
      MyItem@1011 : Record 9152;
      MyProdOrdersByCost@1000 : Query 5403;
      Qty@1003 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1012 : Decimal;
      PrevTotalCostAmount@1013 : Decimal;
      count@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      FOR count := 1 TO ProdItems DO BEGIN
        LibraryAssembly.CreateItem(Item,Item."Costing Method"::Standard,Item."Replenishment System"::"Prod. Order",'','');
        LibraryAssembly.CreateBOM(Item,1);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Simulated,Simulated);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Planned,Planned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::"Firm Planned",FirmPlanned);
        CreateProdOrders(Item."No.",ProductionOrder.Status::Released,Released);
        IF count MOD 2 = 0 THEN BEGIN
          MyItem.INIT;
          MyItem.VALIDATE("User ID",USERID);
          MyItem.VALIDATE("Item No.",Item."No.");
          MyItem.INSERT;
        END;
        TempItem := Item;
        TempItem.INSERT;
      END;

      // Verify query: Query - database consistency.
      MyProdOrdersByCost.SETFILTER(User_ID,USERID);
      MyProdOrdersByCost.OPEN;
      count := 0;
      WHILE MyProdOrdersByCost.READ DO BEGIN
        count += 1;
        GetExpectedProdOrderBacklog(Qty,CostAmount,TotalCostAmount,'',TRUE,MyProdOrdersByCost.Status,MyProdOrdersByCost.Item_No);
        IF count > 1 THEN
          Assert.IsTrue(
            PrevTotalCostAmount >= TotalCostAmount,
            'Query is not sorted by ' + MyProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreEqual(Qty,MyProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + MyProdOrdersByCost.Item_No + '; field: ' + MyProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
        Assert.AreEqual(TotalCostAmount,MyProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + MyProdOrdersByCost.Item_No + '; field: ' + MyProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
        Assert.AreNotEqual(ProductionOrder.Status::Simulated,MyProdOrdersByCost.Status,'Item: ' + MyProdOrdersByCost.Item_No + '; field: ' + MyProdOrdersByCost.COLUMNCAPTION(Status));
        Assert.AreNotEqual(ProductionOrder.Status::Finished,MyProdOrdersByCost.Status,'Item: ' + MyProdOrdersByCost.Item_No + '; field: ' + MyProdOrdersByCost.COLUMNCAPTION(Status));
        PrevTotalCostAmount := TotalCostAmount;
      END;
      MyProdOrdersByCost.CLOSE;

      // Verify query: Database - query consistency.
      TempItem.FINDSET;
      REPEAT
        VerifyMyBacklogRecords(TempItem."No.",ProductionOrder.Status::Planned);
        VerifyMyBacklogRecords(TempItem."No.",ProductionOrder.Status::"Firm Planned");
        VerifyMyBacklogRecords(TempItem."No.",ProductionOrder.Status::Released);
      UNTIL TempItem.NEXT = 0;
    END;

    [Test]
    PROCEDURE MyProdOrdersByCost@26();
    BEGIN
      SetupMyProdOrders(3,2,2,2,2);
    END;

    [Normal]
    LOCAL PROCEDURE CreateProdOrders@3(ItemNo@1004 : Code[20];Status@1001 : Option;NoOfOrders@1000 : Integer);
    VAR
      ManufacturingSetup@1005 : Record 99000765;
      ProductionOrder@1002 : Record 5405;
      count@1003 : Integer;
    BEGIN
      ManufacturingSetup.GET;
      FOR count := 1 TO NoOfOrders DO BEGIN
        LibraryManufacturing.CreateProductionOrder(
          ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandDec(10,2));
        ProductionOrder.VALIDATE("Ending Date",TODAY + 10 * POWER(-1,count) * count);
        ProductionOrder.VALIDATE("Due Date",ProductionOrder."Ending Date");
        ProductionOrder.MODIFY(TRUE);
        LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE GetExpectedProdOrderBacklog@7(VAR Qty@1002 : Decimal;VAR CostAmount@1003 : Decimal;VAR TotalCostAmount@1008 : Decimal;DateFilter@1000 : Text;UseMyItem@1007 : Boolean;Status@1004 : Option;ItemNo@1005 : Code[20]);
    VAR
      ProdOrderLine@1001 : Record 5406;
      MyItem@1006 : Record 9152;
      Item@1009 : Record 27;
    BEGIN
      Qty := 0;
      CostAmount := 0;
      TotalCostAmount := 0;

      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      IF DateFilter <> '' THEN
        ProdOrderLine.SETFILTER("Due Date",DateFilter + '%1',TODAY)
      ELSE
        ProdOrderLine.SETRANGE("Due Date");

      IF UseMyItem AND (NOT MyItem.GET(USERID,ItemNo)) THEN
        EXIT;

      IF ProdOrderLine.FINDSET THEN
        REPEAT
          Qty += ProdOrderLine."Remaining Quantity";
          CostAmount += ProdOrderLine."Cost Amount";
        UNTIL ProdOrderLine.NEXT = 0;

      Item.GET(ItemNo);
      Item.CALCFIELDS("Cost of Open Production Orders");
      TotalCostAmount := Item."Cost of Open Production Orders";
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDelayedBacklogRecords@19(ItemNo@1008 : Code[20];Status@1007 : Option);
    VAR
      DelayedProdOrdersByCost@1006 : Query 5400;
      Qty@1005 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1000 : Decimal;
      ExpQueryRecords@1002 : Integer;
      ActQueryRecords@1001 : Integer;
    BEGIN
      GetExpectedProdOrderBacklog(Qty,CostAmount,TotalCostAmount,'<=',FALSE,Status,ItemNo);
      ExpQueryRecords := 0;
      IF Qty > 0 THEN
        ExpQueryRecords := 1;

      DelayedProdOrdersByCost.OPEN;
      WHILE DelayedProdOrdersByCost.READ DO
        IF (DelayedProdOrdersByCost.Item_No = ItemNo) AND (DelayedProdOrdersByCost.Status = Status) THEN BEGIN
          Assert.AreEqual(Qty,DelayedProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + DelayedProdOrdersByCost.Item_No + '; field: ' + DelayedProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
          Assert.AreEqual(
            TotalCostAmount,DelayedProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + DelayedProdOrdersByCost.Item_No + '; field: ' + DelayedProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
          ActQueryRecords += 1;
        END;
      Assert.AreEqual(
        ExpQueryRecords,ActQueryRecords,'Unexpected no. of query records for item ' + ItemNo + ' and status ' + FORMAT(Status));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyPendingBacklogRecords@23(ItemNo@1008 : Code[20];Status@1007 : Option);
    VAR
      PendingProdOrdersByCost@1006 : Query 5401;
      Qty@1005 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1000 : Decimal;
      ExpQueryRecords@1002 : Integer;
      ActQueryRecords@1001 : Integer;
    BEGIN
      GetExpectedProdOrderBacklog(Qty,CostAmount,TotalCostAmount,'>=',FALSE,Status,ItemNo);
      ExpQueryRecords := 0;
      IF Qty > 0 THEN
        ExpQueryRecords := 1;

      PendingProdOrdersByCost.OPEN;
      WHILE PendingProdOrdersByCost.READ DO
        IF (PendingProdOrdersByCost.Item_No = ItemNo) AND (PendingProdOrdersByCost.Status = Status) THEN BEGIN
          Assert.AreEqual(Qty,PendingProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + PendingProdOrdersByCost.Item_No + '; field: ' + PendingProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
          Assert.AreEqual(
            TotalCostAmount,PendingProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + PendingProdOrdersByCost.Item_No + '; field: ' + PendingProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
          ActQueryRecords += 1;
        END;
      Assert.AreEqual(
        ExpQueryRecords,ActQueryRecords,'Unexpected no. of query records for item ' + ItemNo + ' and status ' + FORMAT(Status));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyMyDelayedBacklogRecords@18(ItemNo@1008 : Code[20];Status@1007 : Option);
    VAR
      MyDelayedProdOrders@1006 : Query 5404;
      Qty@1005 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1003 : Decimal;
      ExpQueryRecords@1002 : Integer;
      ActQueryRecords@1001 : Integer;
    BEGIN
      GetExpectedProdOrderBacklog(Qty,CostAmount,TotalCostAmount,'<=',TRUE,Status,ItemNo);
      ExpQueryRecords := 0;
      IF Qty > 0 THEN
        ExpQueryRecords := 1;

      MyDelayedProdOrders.SETFILTER(User_ID,USERID);
      MyDelayedProdOrders.OPEN;
      WHILE MyDelayedProdOrders.READ DO
        IF (MyDelayedProdOrders.Item_No = ItemNo) AND (MyDelayedProdOrders.Status = Status) THEN BEGIN
          Assert.AreEqual(Qty,MyDelayedProdOrders.Sum_Remaining_Quantity,'Item: ' + MyDelayedProdOrders.Item_No + '; field: ' + MyDelayedProdOrders.COLUMNCAPTION(Sum_Remaining_Quantity));
          ActQueryRecords += 1;
        END;
      Assert.AreEqual(
        ExpQueryRecords,ActQueryRecords,'Unexpected no. of query records for item ' + ItemNo + ' and status ' + FORMAT(Status));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyMyBacklogRecords@29(ItemNo@1008 : Code[20];Status@1007 : Option);
    VAR
      MyProdOrdersByCost@1006 : Query 5403;
      Qty@1005 : Decimal;
      CostAmount@1004 : Decimal;
      TotalCostAmount@1003 : Decimal;
      ExpQueryRecords@1002 : Integer;
      ActQueryRecords@1001 : Integer;
    BEGIN
      GetExpectedProdOrderBacklog(Qty,CostAmount,TotalCostAmount,'',TRUE,Status,ItemNo);
      ExpQueryRecords := 0;
      IF Qty > 0 THEN
        ExpQueryRecords := 1;

      MyProdOrdersByCost.SETFILTER(User_ID,USERID);
      MyProdOrdersByCost.OPEN;
      WHILE MyProdOrdersByCost.READ DO
        IF (MyProdOrdersByCost.Item_No = ItemNo) AND (MyProdOrdersByCost.Status = Status) THEN BEGIN
          Assert.AreEqual(Qty,MyProdOrdersByCost.Sum_Remaining_Quantity,'Item: ' + MyProdOrdersByCost.Item_No + '; field: ' + MyProdOrdersByCost.COLUMNCAPTION(Sum_Remaining_Quantity));
          Assert.AreEqual(TotalCostAmount,MyProdOrdersByCost.Cost_of_Open_Production_Orders,'Item: ' + MyProdOrdersByCost.Item_No + '; field: ' + MyProdOrdersByCost.COLUMNCAPTION(Cost_of_Open_Production_Orders));
          ActQueryRecords += 1;
        END;
      Assert.AreEqual(
        ExpQueryRecords,ActQueryRecords,'Unexcepted no. of query records for item ' + ItemNo + ' and status ' + FORMAT(Status));
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [Production Order] [SCM]
      This CU contains scenarios for the Backlog queries that the charts are based on.
    }
    END.
  }
}

