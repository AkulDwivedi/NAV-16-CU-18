OBJECT Codeunit 130100 Library - Payment Export
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryERM@1003 : Codeunit 131300;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryUtility@1001 : Codeunit 131000;
      LibraryRandom@1000 : Codeunit 130440;

    PROCEDURE GetRandomCreditorNo@2() : Code[20];
    BEGIN
      EXIT(LibraryUtility.GenerateGUID + FORMAT(LibraryRandom.RandIntInRange(111111111,999999999)));
    END;

    PROCEDURE GetRandomPaymentReference@3() : Code[50];
    VAR
      RandomValue@1000 : Code[10];
    BEGIN
      RandomValue := FORMAT(LibraryRandom.RandIntInRange(111111111,999999999));
      EXIT(LibraryUtility.GenerateGUID + RandomValue + RandomValue);
    END;

    PROCEDURE CreatePaymentMethod@1(VAR PaymentMethod@1000 : Record 289);
    BEGIN
      LibraryERM.CreatePaymentMethod(PaymentMethod);
    END;

    PROCEDURE VerifyGenJnlLineErr@39(GenJnlLine@1000 : Record 81;ExpectedError@1001 : Text[250]);
    VAR
      PaymentJnlExportErrorText@1002 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      PaymentJnlExportErrorText.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      PaymentJnlExportErrorText.SETRANGE("Document No.",GenJnlLine."Document No.");
      PaymentJnlExportErrorText.SETRANGE("Journal Line No.",GenJnlLine."Line No.");
      PaymentJnlExportErrorText.SETRANGE("Error Text",ExpectedError);
      Assert.IsFalse(PaymentJnlExportErrorText.ISEMPTY,'Expected Error message cannot be found.');
    END;

    PROCEDURE CreateSimpleDataExchDefWithMapping@28(VAR DataExchMapping@1007 : Record 1224;TableID@1000 : Integer;FieldID@1002 : Integer);
    VAR
      DataExchDef@1001 : Record 1222;
      DataExchFieldMapping@1005 : Record 1225;
    BEGIN
      CreateSimpleDataExchDefWithMapping2(DataExchDef,DataExchMapping,DataExchFieldMapping,TableID,FieldID);
    END;

    PROCEDURE CreateSimpleDataExchDefWithMapping2@16(VAR DataExchDef@1003 : Record 1222;VAR DataExchMapping@1007 : Record 1224;VAR DataExchFieldMapping@1001 : Record 1225;TableID@1005 : Integer;FieldID@1008 : Integer);
    VAR
      DataExchLineDef@1002 : Record 1227;
      DataExchColDef@1006 : Record 1223;
      DataExchDefCode@1000 : Code[20];
      DataExchLineDefCode@1004 : Code[20];
    BEGIN
      DataExchDefCode := LibraryUtility.GenerateRandomCode(DataExchDef.FIELDNO(Code),DATABASE::"Data Exch. Def");
      DataExchDef.INIT;
      DataExchDef.Code := DataExchDefCode;
      DataExchDef.Name := DataExchDef.Code;
      DataExchDef.Type := DataExchDef.Type::"Payment Export";
      DataExchDef.INSERT;

      DataExchLineDefCode := LibraryUtility.GenerateRandomCode(DataExchLineDef.FIELDNO(Code),DATABASE::"Data Exch. Line Def");
      DataExchLineDef.INIT;
      DataExchLineDef.Code := DataExchLineDefCode;
      DataExchLineDef."Data Exch. Def Code" := DataExchDefCode;
      DataExchLineDef.INSERT;

      DataExchColDef.INIT;
      DataExchColDef."Data Exch. Def Code" := DataExchDefCode;
      DataExchColDef."Data Exch. Line Def Code" := DataExchLineDefCode;
      DataExchColDef."Column No." := 1;
      DataExchColDef.INSERT;

      DataExchMapping.INIT;
      DataExchMapping."Data Exch. Def Code" := DataExchDefCode;
      DataExchMapping."Data Exch. Line Def Code" := DataExchLineDefCode;
      DataExchMapping."Table ID" := TableID;
      DataExchMapping.INSERT;

      DataExchFieldMapping.INIT;
      DataExchFieldMapping."Data Exch. Def Code" := DataExchDefCode;
      DataExchFieldMapping."Data Exch. Line Def Code" := DataExchLineDefCode;
      DataExchFieldMapping."Table ID" := DataExchMapping."Table ID";
      DataExchFieldMapping."Column No." := 1;
      DataExchFieldMapping."Field ID" := FieldID;
      DataExchFieldMapping.INSERT;
    END;

    PROCEDURE SelectPaymentJournalTemplate@8() : Code[10];
    VAR
      GenJnlTemplate@1000 : Record 80;
    BEGIN
      WITH GenJnlTemplate DO BEGIN
        SETRANGE(Type,Type::Payments);
        SETRANGE(Recurring,FALSE);

        IF NOT FINDFIRST THEN BEGIN
          INIT;
          Name := LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Gen. Journal Template");
          Type := Type::Payments;
          Recurring := FALSE;
          INSERT;
        END;

        EXIT(Name);
      END;
    END;

    PROCEDURE SetPmtToDomestic@51(VAR BankAccount@1001 : Record 270;VAR VendorBankAccount@1000 : Record 288);
    VAR
      CompanyInformation@1002 : Record 79;
    BEGIN
      CompanyInformation.GET;
      BankAccount.VALIDATE("Country/Region Code",CompanyInformation."Country/Region Code");
      BankAccount.MODIFY(TRUE);
      VendorBankAccount.VALIDATE("Country/Region Code",BankAccount."Country/Region Code");
      VendorBankAccount.MODIFY(TRUE);
    END;

    PROCEDURE SetPmtToInternational@54(VAR BankAccount@1001 : Record 270;VAR VendorBankAccount@1000 : Record 288);
    VAR
      CompanyInformation@1002 : Record 79;
      CountryRegion@1003 : Record 9;
    BEGIN
      CompanyInformation.GET;
      BankAccount.VALIDATE("Country/Region Code",CompanyInformation."Country/Region Code");
      BankAccount.MODIFY(TRUE);
      CountryRegion.SETFILTER(Code,'<>%1',BankAccount."Country/Region Code");
      CountryRegion.FINDFIRST;
      VendorBankAccount.VALIDATE("Country/Region Code",CountryRegion.Code);
      VendorBankAccount.MODIFY(TRUE);
    END;

    PROCEDURE SetRefundToDomestic@79(VAR BankAccount@1001 : Record 270;VAR CustomerBankAccount@1000 : Record 287);
    VAR
      CompanyInformation@1002 : Record 79;
    BEGIN
      CompanyInformation.GET;
      BankAccount.VALIDATE("Country/Region Code",CompanyInformation."Country/Region Code");
      BankAccount.MODIFY(TRUE);
      CustomerBankAccount.VALIDATE("Country/Region Code",BankAccount."Country/Region Code");
      CustomerBankAccount.MODIFY(TRUE);
    END;

    PROCEDURE SetRefundToInternational@78(VAR BankAccount@1001 : Record 270;VAR CustomerBankAccount@1000 : Record 287);
    VAR
      CompanyInformation@1002 : Record 79;
      CountryRegion@1003 : Record 9;
    BEGIN
      CompanyInformation.GET;
      BankAccount.VALIDATE("Country/Region Code",CompanyInformation."Country/Region Code");
      BankAccount.MODIFY(TRUE);
      CountryRegion.SETFILTER(Code,'<>%1',BankAccount."Country/Region Code");
      CountryRegion.FINDFIRST;
      CustomerBankAccount.VALIDATE("Country/Region Code",CountryRegion.Code);
      CustomerBankAccount.MODIFY(TRUE);
    END;

    PROCEDURE CreateVendorWithBankAccount@4(VAR Vendor@1000 : Record 23);
    VAR
      PaymentMethod@1002 : Record 289;
      VendorBankAccount@1001 : Record 288;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreateVendorBankAccount(VendorBankAccount,Vendor."No.");
      LibraryERM.CreatePaymentMethod(PaymentMethod);

      Vendor.VALIDATE("Payment Method Code",PaymentMethod.Code);
      Vendor.VALIDATE("Preferred Bank Account",VendorBankAccount.Code);
      Vendor.MODIFY(TRUE);

      VendorBankAccount."Bank Branch No." := FORMAT(LibraryRandom.RandIntInRange(111111,999999));
      VendorBankAccount."Bank Account No." := FORMAT(LibraryRandom.RandIntInRange(111111111,999999999));
      VendorBankAccount.MODIFY;
    END;

    PROCEDURE CreatePaymentExportBatch@5(VAR GenJournalBatch@1001 : Record 232;DataExchDefCode@1002 : Code[20]);
    VAR
      BankAccount@1000 : Record 270;
      BankExportImportSetup@1003 : Record 1200;
    BEGIN
      CreateBankAccount(BankAccount);
      CreateBankExportImportSetup(BankExportImportSetup,DataExchDefCode);
      BankAccount.VALIDATE("Payment Export Format",BankExportImportSetup.Code);
      BankAccount.MODIFY;
      CreateGenJournalBatch(GenJournalBatch,GenJournalBatch."Bal. Account Type"::"Bank Account",BankAccount."No.",TRUE);
    END;

    PROCEDURE CreateBankAccount@6(VAR BankAccount@1000 : Record 270);
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount."Bank Branch No." := FORMAT(LibraryRandom.RandIntInRange(111111,999999));
      BankAccount."Bank Account No." := FORMAT(LibraryRandom.RandIntInRange(111111111,999999999));
      BankAccount.MODIFY;
    END;

    PROCEDURE CreateBankExportImportSetup@10(VAR BankExportImportSetup@1000 : Record 1200;DataExchDefCode@1001 : Code[20]);
    BEGIN
      WITH BankExportImportSetup DO BEGIN
        IF GET(DataExchDefCode) THEN
          DELETE;
        RESET;
        Code := DataExchDefCode;
        Direction := Direction::Export;
        "Data Exch. Def. Code" := DataExchDefCode;
        INSERT;
      END;
    END;

    PROCEDURE CreateGenJournalBatch@7(VAR GenJournalBatch@1000 : Record 232;BalAccountType@1001 : Option;BalAccountNo@1002 : Code[20];AllowPaymentExport@1003 : Boolean);
    BEGIN
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,LibraryPurchase.SelectPmtJnlTemplate);
      GenJournalBatch.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalBatch.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalBatch.VALIDATE("Allow Payment Export",AllowPaymentExport);
      GenJournalBatch.MODIFY(TRUE);
    END;

    PROCEDURE CreateVendorPmtJnlLine@9(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;VendorNo@1002 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,VendorNo,LibraryRandom.RandDec(1000,2));
    END;

    BEGIN
    END.
  }
}

