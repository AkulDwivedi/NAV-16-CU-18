OBJECT Report 16410 GSTR-1 File Format
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    CaptionML=[ENU=GSTR-1 File Format;
               ENN=GSTR-1 File Format];
    ProcessingOnly=Yes;
    EnableHyperlinks=No;
    OnPostReport=BEGIN
                   ExcelBuffer.OnlyOpenExcel;
                 END;

    UseRequestPage=Yes;
  }
  DATASET
  {
    { 1500105; ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               ExcelBuffer.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  CASE FileFormat OF
                                    FileFormat::" ":
                                      ERROR(FileformatErr);
                                    FileFormat::B2B:
                                      BEGIN
                                        MakeExcelBodyB2B;
                                        ExcelBuffer.OnlyCreateBook(B2BTxt,B2BTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::B2CL:
                                      BEGIN
                                        MakeExcelBodyB2CL;
                                        ExcelBuffer.OnlyCreateBook(B2CLTxt,B2CLTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::B2CS:
                                      BEGIN
                                        MakeExcelBodyB2CS;
                                        ExcelBuffer.OnlyCreateBook(B2CSTxt,B2CSTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::AT:
                                      BEGIN
                                        MakeExcelBodyAT;
                                        ExcelBuffer.OnlyCreateBook(ATTxt,ATTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::ATADJ:
                                      ERROR(ATADJErr);
                                    FileFormat::CDNR:
                                      BEGIN
                                        MakeExcelBodyCDNR;
                                        ExcelBuffer.OnlyCreateBook(CDNRTxt,CDNRTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::CDNUR:
                                      BEGIN
                                        MakeExcelBodyCDNUR;
                                        ExcelBuffer.OnlyCreateBook(CDNURTxt,CDNURTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::EXP:
                                      BEGIN
                                        MakeExcelBodyEXP;
                                        ExcelBuffer.OnlyCreateBook(EXPTxt,EXPTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                    FileFormat::HSN:
                                      BEGIN
                                        MakeExcelBodyHSN;
                                        ExcelBuffer.OnlyCreateBook(HSNTxt,HSNTxt,COMPANYNAME,USERID,FALSE);
                                      END;
                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1500003;0;Container ;
                  ContainerType=ContentArea }

      { 1500002;1;Group     ;
                  CaptionML=[ENU=Options;
                             ENN=Options] }

      { 1500001;2;Field     ;
                  Name=GSTIN;
                  CaptionML=[ENU=GSTIN of the location;
                             ENN=GSTIN of the location];
                  SourceExpr=GSTIN;
                  TableRelation="GST Registration Nos.".Code }

      { 1500000;2;Field     ;
                  Name=Date;
                  CaptionML=[ENU=Date;
                             ENN=Date];
                  SourceExpr=Date;
                  OnValidate=BEGIN
                               Month := DATE2DMY(Date,2);
                               Year := DATE2DMY(Date,3);
                             END;
                              }

      { 1500004;2;Field     ;
                  Name=FileFormat;
                  CaptionML=[ENU=File Format;
                             ENN=File Format];
                  SourceExpr=FileFormat }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ExcelBuffer@1500102 : TEMPORARY Record 370;
      GSTIN@1500000 : Code[15];
      Date@1500001 : Date;
      Month@1500003 : Integer;
      Year@1500002 : Integer;
      CESSAmount@1500008 : Decimal;
      B2BTxt@1500051 : TextConst 'ENU=b2b;ENN=b2b';
      B2CLTxt@1500052 : TextConst 'ENU=b2cl;ENN=b2cl';
      B2CSTxt@1500053 : TextConst 'ENU=b2cs;ENN=b2cs';
      CDNRTxt@1500054 : TextConst 'ENU=cdnr;ENN=cdnr';
      CDNURTxt@1500117 : TextConst 'ENU=cdnur;ENN=cdnur';
      ATTxt@1500055 : TextConst 'ENU=at;ENN=at';
      EXPTxt@1500056 : TextConst 'ENU=exp;ENN=exp';
      HSNTxt@1500122 : TextConst 'ENU=hsn;ENN=hsn';
      GSTINUINTxt@1500017 : TextConst 'ENU=GSTIN/UIN of Recipient;ENN=GSTIN/UIN of Recipient';
      InvoiceNoTxt@1500018 : TextConst 'ENU=Invoice Number;ENN=Invoice Number';
      InvoiceDateTxt@1500019 : TextConst 'ENU=Invoice Date;ENN=Invoice Date';
      InvoiceValueTxt@1500020 : TextConst 'ENU=Invoice Value;ENN=Invoice Value';
      PlaceOfSupplyTxt@1500021 : TextConst 'ENU=Place Of Supply;ENN=Place Of Supply';
      ReverseChargeTxt@1500022 : TextConst 'ENU=Reverse Charge;ENN=Reverse Charge';
      ECommGSTINTxt@1500024 : TextConst 'ENU=E-Commerce GSTIN;ENN=E-Commerce GSTIN';
      HSNSACofSupplyTxt@1500026 : TextConst 'ENU=HSN/SAC of Supply;ENN=HSN/SAC of Supply';
      TaxableValueTxt@1500027 : TextConst 'ENU=Taxable Value;ENN=Taxable Value';
      IGSTAmountTxt@1500029 : TextConst 'ENU=IGST Amount;ENN=IGST Amount';
      CGSTAmountTxt@1500031 : TextConst 'ENU=CGST Amount;ENN=CGST Amount';
      SGSTAmountTxt@1500033 : TextConst 'ENU=SGST Amount;ENN=SGST Amount';
      CESSAmountTxt@1500035 : TextConst 'ENU=CESS Amount;ENN=CESS Amount';
      TypeTxt@1500038 : TextConst 'ENU=Type;ENN=Type';
      DocumentTypeTxt@1500039 : TextConst 'ENU=Document Type;ENN=Document Type';
      ReasonForIssuingNoteTxt@1500040 : TextConst 'ENU=Reason For Issuing document;ENN=Reason For Issuing document';
      DebitNoteNoTxt@1500041 : TextConst 'ENU=Note/Refund Voucher Number;ENN=Note/Refund Voucher Number';
      DebitNoteDateTxt@1500042 : TextConst 'ENU=Note/Refund Voucher Date;ENN=Note/Refund Voucher Date';
      OtherECommTxt@1500092 : TextConst 'ENU=oe;ENN=oe';
      ExportTypeTxt@1500047 : TextConst 'ENU=Export Type;ENN=Export Type';
      PortCodeTxt@1500048 : TextConst 'ENU=Port Code;ENN=Port Code';
      ShipBillNoTxt@1500049 : TextConst 'ENU=Shipping Bill Number;ENN=Shipping Bill Number';
      ShipBillDateTxt@1500050 : TextConst 'ENU=Shipping Bill Date;ENN=Shipping Bill Date';
      WOPAYTxt@1500058 : TextConst 'ENU=wopay;ENN=wopay';
      WPAYTxt@1500059 : TextConst 'ENU=wpay;ENN=wpay';
      OriginalInvNoTxt@1500066 : TextConst 'ENU=Invoice/Advance Receipt Number;ENN=Invoice/Advance Receipt Number';
      OriginalInvDateTxt@1500067 : TextConst 'ENU=Invoice/Advance Receipt date;ENN=Invoice/Advance Receipt date';
      InvoiceTypeTxt@1500109 : TextConst 'ENU=Invoice Type;ENN=Invoice Type';
      RateTxt@1500110 : TextConst 'ENU=Rate;ENN=Rate';
      RegularTxt@1500105 : TextConst 'ENU=Regular;ENN=Regular';
      EXPWOPayTxt@1500120 : TextConst 'ENU=expwop;ENN=expwop';
      EXPWPayTxt@1500119 : TextConst 'ENU=expwp;ENN=expwp';
      DeemedExportTxt@1500108 : TextConst 'ENU=Deemed Export;ENN=Deemed Export';
      RefundVoucherValueTxt@1500114 : TextConst 'ENU=Note/Refund Voucher Value;ENN=Note/Refund Voucher Value';
      PreGSTTxt@1500115 : TextConst 'ENU=Pre GST;ENN=Pre GST';
      URTypeTxt@1500118 : TextConst 'ENU=UR Type;ENN=UR Type';
      GrossAdvanceRcvdTxt@1500121 : TextConst 'ENU=Gross Advance Received;ENN=Gross Advance Received';
      TotalBaseAmount@1500112 : Decimal;
      TotalGSTAmount@1500073 : Decimal;
      CESSAmountApp@1500097 : Decimal;
      TotalBaseAmountApp@1500103 : Decimal;
      GSTPer@1500111 : Decimal;
      FileFormat@1500104 : ' ,B2B,B2CL,B2CS,EXP,CDNUR,CDNR,ATADJ,AT,HSN';
      FileformatErr@1500113 : TextConst 'ENU=You must select GSTR File Format.;ENN=You must select GSTR File Format.';
      DescTxt@1500126 : TextConst 'ENU=Desciption Text;ENN=Desciption Text';
      TotalQtyTxt@1500125 : TextConst 'ENU=Total Quantity;ENN=Total Quantity';
      TotalValTxt@1500124 : TextConst 'ENU=Total Value;ENN=Total Value';
      UQCTxt@1500127 : TextConst 'ENU=uqc;ENN=uqc';
      CompReportView@1500134 : ' ,CGST,SGST / UTGST,IGST,CESS';
      HSNSGSTAmt@1500133 : Decimal;
      HSNCGSTAmt@1500132 : Decimal;
      HSNIGSTAmt@1500131 : Decimal;
      HSNCessAmt@1500130 : Decimal;
      HSNQty@1500129 : Decimal;
      GSTBaseAmount@1500128 : Decimal;
      ATADJErr@1500135 : TextConst 'ENU=This feature will be available in the next release.;ENN=This feature will be available in the next release.';

    PROCEDURE MakeExcelHeaderB2B@1170000010();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(GSTINUINTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PlaceOfSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ReverseChargeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceTypeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ECommGSTINTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyB2B@1500101();
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      State@1500000 : Record 13762;
      GSTComponent@1500002 : Record 16405;
      DocumentNo@1500003 : Code[20];
      GSTPercentage@1500001 : Decimal;
    BEGIN
      MakeExcelHeaderB2B;
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Location  Reg. No.","Posting Date","Entry Type","Document Type","Document No.","GST %");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETFILTER("Entry Type",'%1',DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETRANGE("Nature of Supply",DetailedGSTLedgerEntry."Nature of Supply"::B2B);
      DetailedGSTLedgerEntry.SETFILTER(
        "Sales Invoice Type",'<>%1|<>%2',DetailedGSTLedgerEntry."Sales Invoice Type"::"Debit Note",
        DetailedGSTLedgerEntry."Sales Invoice Type"::Supplementary);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF (DocumentNo <> DetailedGSTLedgerEntry."Document No.") OR (GSTPercentage <> DetailedGSTLedgerEntry."GST %") THEN
            IF (DetailedGSTLedgerEntry."GST Customer Type" IN [DetailedGSTLedgerEntry."GST Customer Type"::"Deemed Export",
                                                               DetailedGSTLedgerEntry."GST Customer Type"::Registered])
            THEN BEGIN
              CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
              ClearVariables;
              IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;
              GetComponentValues(DetailedGSTLedgerEntry);

              GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
              IF GSTComponent.FINDFIRST THEN
                IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                  ExcelBuffer.NewRow;
                  IF DetailedGSTLedgerEntry."Reverse Charge" THEN
                    ExcelBuffer.AddColumn(
                      DetailedGSTLedgerEntry."Location  Reg. No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                  ELSE
                    ExcelBuffer.AddColumn(
                      DetailedGSTLedgerEntry."Buyer/Seller Reg. No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  ExcelBuffer.AddColumn(
                    GetInvoiceValue(DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Document Type"),
                    FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    State."State Code (GST Reg. No.)" + '-' + State.Description,FALSE,'',FALSE,FALSE,
                    FALSE,'',ExcelBuffer."Cell Type"::Text);
                  IF DetailedGSTLedgerEntry."Reverse Charge" THEN
                    ExcelBuffer.AddColumn('Y',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                  ELSE
                    ExcelBuffer.AddColumn('N',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    GetInvoiceType(DetailedGSTLedgerEntry),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No.",FALSE,'',FALSE,FALSE,
                    FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    CESSAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                END;
            END;
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
              DocumentNo := DetailedGSTLedgerEntry."Document No.";
              GSTPercentage := DetailedGSTLedgerEntry."GST %";
            END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelHeaderB2CL@1500005();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(InvoiceNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PlaceOfSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ECommGSTINTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyB2CL@1500002();
    VAR
      DetailedGSTLedgerEntry@1500200 : Record 16419;
      State@1500000 : Record 13762;
      GSTComponent@1500002 : Record 16405;
      CustLedgerEntry@1500008 : Record 21;
      DocumentNo@1500007 : Code[20];
      GSTPercentage@1500006 : Decimal;
    BEGIN
      MakeExcelHeaderB2CL;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Location  Reg. No.","Posting Date","Entry Type","Document Type","Document No.","GST %");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETFILTER("Entry Type",'%1',DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETRANGE("Nature of Supply",DetailedGSTLedgerEntry."Nature of Supply"::B2C);
      DetailedGSTLedgerEntry.SETRANGE("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type"::Interstate);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF (DocumentNo <> DetailedGSTLedgerEntry."Document No.") OR (GSTPercentage <> DetailedGSTLedgerEntry."GST %") THEN BEGIN
            CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
            ClearVariables;
            IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;
            GetComponentValues(DetailedGSTLedgerEntry);

            CustLedgerEntry.SETRANGE("Transaction No.",DetailedGSTLedgerEntry."Transaction No.");
            IF CustLedgerEntry.FINDFIRST THEN
              CustLedgerEntry.CALCFIELDS(Amount);

            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                IF CustLedgerEntry.Amount >= 250000 THEN BEGIN
                  ExcelBuffer.NewRow;
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  ExcelBuffer.AddColumn(
                    GetInvoiceValue(DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Document Type"),
                    FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    State."State Code (GST Reg. No.)" + '-' + State.Description,FALSE,'',
                    FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(CESSAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No.",FALSE,'',
                    FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                END;
          END;
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
              DocumentNo := DetailedGSTLedgerEntry."Document No.";
              GSTPercentage := DetailedGSTLedgerEntry."GST %";
            END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelHeaderB2CS@1500008();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(TypeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PlaceOfSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ECommGSTINTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyB2CS@1500003();
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      CustLedgerEntry@1500006 : Record 21;
      GSTComponent@1500002 : Record 16405;
      State@1500000 : Record 13762;
      BuyerSellerStateCode@1500005 : Code[10];
      GSTPercentage@1500001 : Decimal;
      ECommCode@1500003 : Code[15];
    BEGIN
      MakeExcelHeaderB2CS;
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Location  Reg. No.","Document Type","Buyer/Seller State Code","GST %","e-Comm. Operator GST Reg. No.");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETRANGE("Nature of Supply",DetailedGSTLedgerEntry."Nature of Supply"::B2C);
      DetailedGSTLedgerEntry.SETRANGE("GST Customer Type",DetailedGSTLedgerEntry."GST Customer Type"::Unregistered);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF (BuyerSellerStateCode <> DetailedGSTLedgerEntry."Buyer/Seller State Code") OR
             (GSTPercentage <> DetailedGSTLedgerEntry."GST %") OR
             (ECommCode <> DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No.")
          THEN BEGIN
            CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
            ClearVariables;
            GetGSTPlaceWiseValues(DetailedGSTLedgerEntry);
            IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;

            CustLedgerEntry.SETRANGE("Transaction No.",DetailedGSTLedgerEntry."Transaction No.");
            IF CustLedgerEntry.FINDFIRST THEN
              CustLedgerEntry.CALCFIELDS(Amount);

            IF ((DetailedGSTLedgerEntry."GST Jurisdiction Type" = DetailedGSTLedgerEntry."GST Jurisdiction Type"::Interstate) AND
                (CustLedgerEntry.Amount <= 250000)) OR
               (DetailedGSTLedgerEntry."GST Jurisdiction Type" = DetailedGSTLedgerEntry."GST Jurisdiction Type"::Intrastate)
            THEN BEGIN
              GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
              IF GSTComponent.FINDFIRST THEN
                IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                  ExcelBuffer.NewRow;
                  IF DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No." <> '' THEN
                    ExcelBuffer.AddColumn('E',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                  ELSE
                    ExcelBuffer.AddColumn(UPPERCASE(OtherECommTxt),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    State."State Code (GST Reg. No.)" + '-' + State.Description,
                    FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(CESSAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No.",FALSE,'',
                    FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                END;
            END;
          END;
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
              BuyerSellerStateCode := DetailedGSTLedgerEntry."Buyer/Seller State Code";
              GSTPercentage := DetailedGSTLedgerEntry."GST %";
              ECommCode := DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No.";
            END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelHeaderCDNR@1500009();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(GSTINUINTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(OriginalInvNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(OriginalInvDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DebitNoteNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DebitNoteDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DocumentTypeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ReasonForIssuingNoteTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PlaceOfSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RefundVoucherValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PreGSTTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyCDNR@1500000();
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      State@1500000 : Record 13762;
      GSTComponent@1500002 : Record 16405;
      DocumentNo@1500005 : Code[20];
      GSTPercentage@1500006 : Decimal;
    BEGIN
      MakeExcelHeaderCDNR;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Location  Reg. No.","Posting Date","Entry Type","Document Type","Document No.","GST %");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry.SETFILTER(
        "Document Type",'%1|%2|%3',DetailedGSTLedgerEntry."Document Type"::"Credit Memo",
        DetailedGSTLedgerEntry."Document Type"::Invoice,DetailedGSTLedgerEntry."Document Type"::Refund);
      DetailedGSTLedgerEntry.SETFILTER(
        "GST Customer Type",'%1|%2',DetailedGSTLedgerEntry."GST Customer Type"::"Deemed Export",
        DetailedGSTLedgerEntry."GST Customer Type"::Registered);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF (DocumentNo <> DetailedGSTLedgerEntry."Document No.") OR (GSTPercentage <> DetailedGSTLedgerEntry."GST %") THEN BEGIN
            CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
            ClearVariables;
            IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;
            GetComponentValues(DetailedGSTLedgerEntry);

            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                IF (DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::"Credit Memo",
                                                               DetailedGSTLedgerEntry."Document Type"::Refund]) OR
                   ((DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Invoice) AND
                    (DetailedGSTLedgerEntry."Sales Invoice Type" IN [DetailedGSTLedgerEntry."Sales Invoice Type"::"Debit Note",
                                                               DetailedGSTLedgerEntry."Sales Invoice Type"::Supplementary]))
                THEN BEGIN
                  ExcelBuffer.NewRow;
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Buyer/Seller Reg. No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  IF (DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::"Credit Memo",
                                                                 DetailedGSTLedgerEntry."Document Type"::Invoice])
                  THEN BEGIN
                    ExcelBuffer.AddColumn(
                      DetailedGSTLedgerEntry."Original Invoice No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                    ExcelBuffer.AddColumn(
                      DetailedGSTLedgerEntry."Original Invoice Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  END;
                  IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Refund THEN BEGIN
                    ExcelBuffer.AddColumn(
                      DetailedGSTLedgerEntry."Original Adv. Pmt Doc. No.",FALSE,'',
                      FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                    ExcelBuffer.AddColumn(
                      DetailedGSTLedgerEntry."Original Adv. Pmt Doc. Date",FALSE,'',
                      FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  END;
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::"Credit Memo" THEN
                    ExcelBuffer.AddColumn('C',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                  ELSE
                    IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Invoice THEN
                      ExcelBuffer.AddColumn('D',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                    ELSE
                      IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Refund THEN
                        ExcelBuffer.AddColumn('R',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    GetReturnReasonCode(DetailedGSTLedgerEntry."Document No."),FALSE,'',
                    FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    State."State Code (GST Reg. No.)" + '-' + State.Description,FALSE,'',
                    FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  IF DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::Invoice,
                                                                DetailedGSTLedgerEntry."Document Type"::"Credit Memo"]
                  THEN
                    ExcelBuffer.AddColumn(
                      GetInvoiceValue(DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Document Type"),
                      FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number)
                  ELSE
                    ExcelBuffer.AddColumn(
                      TotalBaseAmount + TotalGSTAmount + CESSAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(CESSAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  IF CheckPreGST(
                       DetailedGSTLedgerEntry."Document Type",DetailedGSTLedgerEntry."Original Invoice No.",
                       DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Original Adv. Pmt Doc. No.")
                  THEN
                    ExcelBuffer.AddColumn('Y',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number)
                  ELSE
                    ExcelBuffer.AddColumn('N',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                END;
          END;
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
              DocumentNo := DetailedGSTLedgerEntry."Document No.";
              GSTPercentage := DetailedGSTLedgerEntry."GST %";
            END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelHeaderCDNUR@1500020();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(URTypeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DebitNoteNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DebitNoteDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DocumentTypeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(OriginalInvNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(OriginalInvDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ReasonForIssuingNoteTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PlaceOfSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RefundVoucherValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PreGSTTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyCDNUR@1500019();
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      State@1500000 : Record 13762;
      GSTComponent@1500002 : Record 16405;
      DocumentNo@1500005 : Code[20];
      GSTPercentage@1500006 : Decimal;
      UnRegCustomer@1500007 : Boolean;
    BEGIN
      MakeExcelHeaderCDNUR;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Location  Reg. No.","Posting Date","Entry Type","Document Type","Document No.","GST %");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry.SETFILTER(
        "Document Type",'%1|%2|%3',DetailedGSTLedgerEntry."Document Type"::"Credit Memo",
        DetailedGSTLedgerEntry."Document Type"::Invoice,DetailedGSTLedgerEntry."Document Type"::Refund);
      DetailedGSTLedgerEntry.SETRANGE("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type"::Interstate);
      DetailedGSTLedgerEntry.SETFILTER(
        "GST Customer Type",'%1|%2',DetailedGSTLedgerEntry."GST Customer Type"::Export,
        DetailedGSTLedgerEntry."GST Customer Type"::Unregistered);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          UnRegCustomer := FALSE;
          IF NOT (DetailedGSTLedgerEntry."GST Without Payment of Duty" OR DetailedGSTLedgerEntry."GST Exempted Goods") THEN BEGIN
            IF (DocumentNo <> DetailedGSTLedgerEntry."Document No.") OR (GSTPercentage <> DetailedGSTLedgerEntry."GST %") THEN BEGIN
              CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
              ClearVariables;
              IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;
              GetComponentValues(DetailedGSTLedgerEntry);

              IF ((DetailedGSTLedgerEntry."GST Customer Type" = DetailedGSTLedgerEntry."GST Customer Type"::Unregistered) AND
                  ((GetBaseAmount(DetailedGSTLedgerEntry) + GetGSTAmount(DetailedGSTLedgerEntry)) >= 250000) AND
                  ((DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::"Credit Memo"]) OR
                   (DetailedGSTLedgerEntry."Sales Invoice Type" IN [DetailedGSTLedgerEntry."Sales Invoice Type"::"Debit Note",
                                                              DetailedGSTLedgerEntry."Sales Invoice Type"::Supplementary])))
              THEN
                UnRegCustomer := TRUE;

              IF (DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::Refund]) OR
                 ((DetailedGSTLedgerEntry."GST Customer Type" = DetailedGSTLedgerEntry."GST Customer Type"::Export) AND
                  (DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::"Credit Memo") OR
                  (DetailedGSTLedgerEntry."Sales Invoice Type" IN [DetailedGSTLedgerEntry."Sales Invoice Type"::"Debit Note",
                                                             DetailedGSTLedgerEntry."Sales Invoice Type"::Supplementary])) OR
                 UnRegCustomer
              THEN BEGIN
                GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
                IF GSTComponent.FINDFIRST THEN
                  IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                    MakeExcelBodyLinesCDNUR(DetailedGSTLedgerEntry,State);
              END;
            END;
            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                DocumentNo := DetailedGSTLedgerEntry."Document No.";
                GSTPercentage := DetailedGSTLedgerEntry."GST %";
              END;
          END ELSE BEGIN
            IF DocumentNo <> DetailedGSTLedgerEntry."Document No." THEN BEGIN
              CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
              ClearVariables;
              IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;
              GetComponentValues(DetailedGSTLedgerEntry);

              IF ((DetailedGSTLedgerEntry."GST Customer Type" = DetailedGSTLedgerEntry."GST Customer Type"::Unregistered) AND
                  ((GetBaseAmount(DetailedGSTLedgerEntry) + GetGSTAmount(DetailedGSTLedgerEntry)) >= 250000) AND
                  ((DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::"Credit Memo"]) OR
                   (DetailedGSTLedgerEntry."Sales Invoice Type" IN [DetailedGSTLedgerEntry."Sales Invoice Type"::"Debit Note",
                                                              DetailedGSTLedgerEntry."Sales Invoice Type"::Supplementary])))
              THEN
                UnRegCustomer := TRUE;

              IF (DetailedGSTLedgerEntry."Document Type" IN [DetailedGSTLedgerEntry."Document Type"::Refund]) OR
                 ((DetailedGSTLedgerEntry."GST Customer Type" = DetailedGSTLedgerEntry."GST Customer Type"::Export) AND
                  (DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::"Credit Memo") OR
                  (DetailedGSTLedgerEntry."Sales Invoice Type" IN [DetailedGSTLedgerEntry."Sales Invoice Type"::"Debit Note",
                                                             DetailedGSTLedgerEntry."Sales Invoice Type"::Supplementary])) OR
                 UnRegCustomer
              THEN BEGIN
                GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
                IF GSTComponent.FINDFIRST THEN
                  IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                    MakeExcelBodyLinesCDNUR(DetailedGSTLedgerEntry,State);
              END;
            END;
            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                DocumentNo := DetailedGSTLedgerEntry."Document No.";
          END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelBodyLinesCDNUR@1500032(DetailedGSTLedgerEntry@1500000 : Record 16419;State@1500001 : Record 13762);
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(
        GetURType(DetailedGSTLedgerEntry),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(
        DetailedGSTLedgerEntry."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(
        DetailedGSTLedgerEntry."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::"Credit Memo" THEN
        ExcelBuffer.AddColumn('C',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
      ELSE
        IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Invoice THEN
          ExcelBuffer.AddColumn('D',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
        ELSE
          IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Refund THEN
            ExcelBuffer.AddColumn('R',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(
        DetailedGSTLedgerEntry."Original Invoice No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(
        DetailedGSTLedgerEntry."Original Invoice Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
      ExcelBuffer.AddColumn(
        GetReturnReasonCode(DetailedGSTLedgerEntry."Document No."),FALSE,'',
        FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(
        State."State Code (GST Reg. No.)" + '-' + State.Description,FALSE,'',
        FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(
        GetInvoiceValue(DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Document Type"),
        FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
      ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
      ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
      ExcelBuffer.AddColumn(CESSAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
      IF CheckPreGST(
           DetailedGSTLedgerEntry."Document Type",DetailedGSTLedgerEntry."Original Invoice No.",
           DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Original Adv. Pmt Doc. No.")
      THEN
        ExcelBuffer.AddColumn('Y',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number)
      ELSE
        ExcelBuffer.AddColumn('N',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
    END;

    LOCAL PROCEDURE MakeExcelHeaderAT@1500001();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(PlaceOfSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(GrossAdvanceRcvdTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyAT@1500012();
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      State@1500000 : Record 13762;
      GSTComponent@1500002 : Record 16405;
      CustLedgerEntry@1500022 : Record 21;
      BuyerSellerStateCode@1500006 : Code[10];
      GSTPercentage@1500005 : Decimal;
    BEGIN
      MakeExcelHeaderAT;
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Location  Reg. No.","Entry Type","Transaction Type","Document Type","Buyer/Seller State Code","GST %");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETFILTER("Document Type",'%1',DetailedGSTLedgerEntry."Document Type"::Payment);
      DetailedGSTLedgerEntry.SETRANGE(Reversed,FALSE);
      DetailedGSTLedgerEntry.SETRANGE("GST on Advance Payment",TRUE);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF (BuyerSellerStateCode <> DetailedGSTLedgerEntry."Buyer/Seller State Code") OR
             (GSTPercentage <> DetailedGSTLedgerEntry."GST %")
          THEN BEGIN
            CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
            ClearVariables;
            IF State.GET(DetailedGSTLedgerEntry."Buyer/Seller State Code") THEN;

            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                GetComponentValueAdvPayment(DetailedGSTLedgerEntry);
                GetApplicationRemAmt(DetailedGSTLedgerEntry);
                CustLedgerEntry.SETRANGE("Transaction No.",DetailedGSTLedgerEntry."Transaction No.");
                CustLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
                IF CustLedgerEntry.FINDFIRST THEN
                  CustLedgerEntry.CALCFIELDS("Remaining Amount");
                IF TotalBaseAmount - TotalBaseAmountApp <> 0 THEN BEGIN
                  ExcelBuffer.NewRow;
                  ExcelBuffer.AddColumn(
                    State."State Code (GST Reg. No.)" + '-' + State.Description,FALSE,'',
                    FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    TotalBaseAmount - TotalBaseAmountApp,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(CESSAmount - CESSAmountApp,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                END;
              END;
          END;
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
              BuyerSellerStateCode := DetailedGSTLedgerEntry."Buyer/Seller State Code";
              GSTPercentage := DetailedGSTLedgerEntry."GST %";
            END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelHeaderEXP@1500010();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(ExportTypeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(InvoiceValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(PortCodeTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ShipBillNoTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(ShipBillDateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(RateTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyEXP@1500015();
    VAR
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      GSTComponent@1500002 : Record 16405;
      DocumentNo@1500006 : Code[20];
      GSTPercentage@1500005 : Decimal;
    BEGIN
      MakeExcelHeaderEXP;
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Location  Reg. No.","Posting Date","Entry Type","Document Type","Document No.","GST %");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETFILTER("GST Customer Type",'%1',DetailedGSTLedgerEntry."GST Customer Type"::Export);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF NOT (DetailedGSTLedgerEntry."GST Without Payment of Duty" OR DetailedGSTLedgerEntry."GST Exempted Goods") THEN BEGIN
            IF (DocumentNo <> DetailedGSTLedgerEntry."Document No.") OR (GSTPercentage <> DetailedGSTLedgerEntry."GST %") THEN BEGIN
              CheckComponentReportView(DetailedGSTLedgerEntry."GST Component Code");
              ClearVariables;
              GetComponentValues(DetailedGSTLedgerEntry);

              GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
              IF GSTComponent.FINDFIRST THEN
                IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                  ExcelBuffer.NewRow;
                  IF GetGSTPaymentOfDuty(DetailedGSTLedgerEntry."Document No.") THEN
                    ExcelBuffer.AddColumn(UPPERCASE(WOPAYTxt),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                  ELSE
                    ExcelBuffer.AddColumn(UPPERCASE(WPAYTxt),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  ExcelBuffer.AddColumn(
                    GetInvoiceValue(DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Document Type"),
                    FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    GetExitPoint(DetailedGSTLedgerEntry."Document No."),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Bill Of Export No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Bill Of Export Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                END;
            END;
            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                DocumentNo := DetailedGSTLedgerEntry."Document No.";
                GSTPercentage := DetailedGSTLedgerEntry."GST %";
              END;
          END ELSE BEGIN
            IF DocumentNo <> DetailedGSTLedgerEntry."Document No." THEN BEGIN
              ClearVariables;
              GetComponentValues(DetailedGSTLedgerEntry);

              GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
              IF GSTComponent.FINDFIRST THEN
                IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN BEGIN
                  ExcelBuffer.NewRow;
                  IF GetGSTPaymentOfDuty(DetailedGSTLedgerEntry."Document No.") THEN
                    ExcelBuffer.AddColumn(UPPERCASE(WOPAYTxt),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text)
                  ELSE
                    ExcelBuffer.AddColumn(UPPERCASE(WPAYTxt),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Document No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Posting Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  ExcelBuffer.AddColumn(
                    GetInvoiceValue(DetailedGSTLedgerEntry."Document No.",DetailedGSTLedgerEntry."Document Type"),
                    FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(
                    GetExitPoint(DetailedGSTLedgerEntry."Document No."),FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Bill Of Export No.",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
                  ExcelBuffer.AddColumn(
                    DetailedGSTLedgerEntry."Bill Of Export Date",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Date);
                  ExcelBuffer.AddColumn(GSTPer,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                  ExcelBuffer.AddColumn(TotalBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
                END;
            END;
            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                DocumentNo := DetailedGSTLedgerEntry."Document No.";
          END;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE MakeExcelHeaderHSN@1500022();
    BEGIN
      ExcelBuffer.NewRow;
      ExcelBuffer.AddColumn(HSNSACofSupplyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(DescTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(UPPERCASE(UQCTxt),FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TotalQtyTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TotalValTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(TaxableValueTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(IGSTAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CGSTAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(SGSTAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
      ExcelBuffer.AddColumn(CESSAmountTxt,FALSE,'',TRUE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE MakeExcelBodyHSN@1500013();
    VAR
      DetailedGSTLedgerEntry@1500008 : Record 16419;
      UnitofMeasure@1500002 : Record 204;
      HsnSac@1500003 : Record 16411;
      HSNCode@1500001 : Code[8];
      UOMCode@1500000 : Code[10];
    BEGIN
      MakeExcelHeaderHSN;
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Location  Reg. No.","Entry Type","Transaction Type",
          "Document Type","HSN/SAC Code",UOM,"Document No.","Document Line No.","Original Invoice No.",
          "Item Charge Assgn. Line No.");
        SETRANGE("Location  Reg. No.",GSTIN);
        SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE("Transaction Type","Transaction Type"::Sales);
        SETRANGE("Document Type","Document Type"::Invoice);
        IF FINDSET THEN
          REPEAT
            IF (HSNCode <> "HSN/SAC Code") OR (UOMCode <> UOM) THEN BEGIN
              CheckComponentReportView("GST Component Code");
              ClearHSNInfo;
              GSTBaseAmount += GetGSTAmountComp("HSN/SAC Code",UOM,CompReportView::IGST,TRUE,FALSE);
              HSNIGSTAmt += GetGSTAmountComp("HSN/SAC Code",UOM,CompReportView::IGST,FALSE,FALSE);
              HSNCGSTAmt += GetGSTAmountComp("HSN/SAC Code",UOM,CompReportView::CGST,FALSE,FALSE);
              HSNSGSTAmt += GetGSTAmountComp("HSN/SAC Code",UOM,CompReportView::"SGST / UTGST",FALSE,FALSE);
              HSNCessAmt += GetGSTAmountComp("HSN/SAC Code",UOM,CompReportView::CESS,FALSE,FALSE);
              HSNQty += GetGSTAmountComp("HSN/SAC Code",UOM,CompReportView::CESS,FALSE,TRUE);
              ExcelBuffer.NewRow;
              ExcelBuffer.AddColumn("HSN/SAC Code",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
              HsnSac.GET("GST Group Code","HSN/SAC Code");
              ExcelBuffer.AddColumn(HsnSac.Description,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
              IF UnitofMeasure.GET(UOM) THEN;
              ExcelBuffer.AddColumn(UnitofMeasure."GST Reporting UQC",FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Text);
              ExcelBuffer.AddColumn(-HSNQty,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
              ExcelBuffer.AddColumn(-(GSTBaseAmount + HSNIGSTAmt + HSNCGSTAmt + HSNSGSTAmt + HSNCessAmt),
                FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
              ExcelBuffer.AddColumn(-GSTBaseAmount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
              ExcelBuffer.AddColumn(-HSNIGSTAmt,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
              ExcelBuffer.AddColumn(-HSNCGSTAmt,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
              ExcelBuffer.AddColumn(-HSNSGSTAmt,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
              ExcelBuffer.AddColumn(-HSNCessAmt,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuffer."Cell Type"::Number);
            END;
            HSNCode := "HSN/SAC Code";
            UOMCode := UOM;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearVariables@1500100();
    BEGIN
      CESSAmount := 0;
      GSTPer := 0;
      TotalBaseAmount := 0;
      TotalGSTAmount := 0;
      CESSAmountApp := 0;
      TotalBaseAmountApp := 0;
    END;

    LOCAL PROCEDURE GetComponentValues@1500006(DetailedGSTLedgerEntry@1500002 : Record 16419);
    VAR
      DetailedGSTLedgerEntry1@1500000 : Record 16419;
      DetailedGSTLedgerEntry2@1500004 : Record 16419;
      DetailedGSTLedgerEntry3@1500008 : Record 16419;
      GSTComponent@1500003 : Record 16405;
      LineNo@1500001 : Integer;
      LineNo1@1500009 : Integer;
      ItemChargeLineNo@1500010 : Integer;
      ItemChargeLineNoCess@1500011 : Integer;
      c@1500005 : Integer;
    BEGIN
      DetailedGSTLedgerEntry1.SETCURRENTKEY("Entry Type","Document No.","GST %");
      DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry1.SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
      DetailedGSTLedgerEntry1.SETRANGE("GST %",DetailedGSTLedgerEntry."GST %");
      IF DetailedGSTLedgerEntry1.FINDSET THEN
        REPEAT
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry1."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
              IF DetailedGSTLedgerEntry1."GST Jurisdiction Type" =
                 DetailedGSTLedgerEntry1."GST Jurisdiction Type"::Intrastate
              THEN
                IF NOT DetailedGSTLedgerEntry1."Item Charge Entry" THEN BEGIN
                  IF LineNo <> DetailedGSTLedgerEntry1."Document Line No." THEN BEGIN
                    TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                    c += 1;
                  END;
                  GSTPer += DetailedGSTLedgerEntry1."GST %";
                  TotalGSTAmount += ABS(DetailedGSTLedgerEntry1."GST Amount");
                  LineNo := DetailedGSTLedgerEntry1."Document Line No.";
                END ELSE BEGIN
                  IF ItemChargeLineNo <> DetailedGSTLedgerEntry1."Item Charge Assgn. Line No." THEN BEGIN
                    TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                    c += 1;
                  END;
                  GSTPer += DetailedGSTLedgerEntry1."GST %";
                  TotalGSTAmount += ABS(DetailedGSTLedgerEntry1."GST Amount");
                  ItemChargeLineNo := DetailedGSTLedgerEntry1."Item Charge Assgn. Line No.";
                END
              ELSE BEGIN
                GSTPer := DetailedGSTLedgerEntry1."GST %";
                IF NOT DetailedGSTLedgerEntry1."Item Charge Entry" THEN BEGIN
                  IF LineNo <> DetailedGSTLedgerEntry1."Document Line No." THEN BEGIN
                    TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                    TotalGSTAmount += ABS(DetailedGSTLedgerEntry1."GST Amount");
                  END;
                  LineNo := DetailedGSTLedgerEntry1."Document Line No."
                END ELSE BEGIN
                  TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                  TotalGSTAmount += ABS(DetailedGSTLedgerEntry1."GST Amount");
                END;
              END;
        UNTIL DetailedGSTLedgerEntry1.NEXT = 0;
      IF c > 1 THEN
        GSTPer := GSTPer / c;

      GSTComponent.RESET;
      GSTComponent.SETRANGE("Report View",GSTComponent."Report View"::CESS);
      IF GSTComponent.FINDSET THEN
        REPEAT
          DetailedGSTLedgerEntry2.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
          DetailedGSTLedgerEntry2.SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
          DetailedGSTLedgerEntry2.SETRANGE("GST %",DetailedGSTLedgerEntry."GST %");
          DetailedGSTLedgerEntry2.SETFILTER("GST Component Code",'<>%1',GSTComponent.Code);
          IF DetailedGSTLedgerEntry2.FINDSET THEN
            REPEAT
              DetailedGSTLedgerEntry3.SETRANGE("Document No.",DetailedGSTLedgerEntry2."Document No.");
              DetailedGSTLedgerEntry3.SETRANGE("Document Line No.",DetailedGSTLedgerEntry2."Document Line No.");
              DetailedGSTLedgerEntry3.SETRANGE("GST Component Code",GSTComponent.Code);
              IF DetailedGSTLedgerEntry3.FINDSET THEN
                REPEAT
                  IF NOT DetailedGSTLedgerEntry3."Item Charge Entry" THEN BEGIN
                    IF LineNo1 <> DetailedGSTLedgerEntry2."Document Line No." THEN
                      CESSAmount += ABS(DetailedGSTLedgerEntry3."GST Amount");
                    LineNo1 := DetailedGSTLedgerEntry2."Document Line No.";
                  END ELSE BEGIN
                    IF ItemChargeLineNoCess <> DetailedGSTLedgerEntry2."Item Charge Assgn. Line No." THEN
                      CESSAmount += ABS(DetailedGSTLedgerEntry3."GST Amount");
                    ItemChargeLineNoCess := DetailedGSTLedgerEntry2."Item Charge Assgn. Line No.";
                  END;
                UNTIL DetailedGSTLedgerEntry3.NEXT = 0;
            UNTIL DetailedGSTLedgerEntry2.NEXT = 0;
        UNTIL GSTComponent.NEXT = 0;
    END;

    PROCEDURE GetBaseAmount@1500016(DetailedGSTLedgerEntry@1500000 : Record 16419) BaseAmount : Decimal;
    VAR
      DetailedGSTLedgerEntry1@1500001 : Record 16419;
      LineNo@1500006 : Integer;
    BEGIN
      WITH DetailedGSTLedgerEntry1 DO BEGIN
        RESET;
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
        SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type");
        SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type");
        SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
        IF FINDSET THEN
          REPEAT
            IF LineNo <> "Document Line No." THEN
              BaseAmount += ABS("GST Base Amount");
            LineNo := "Document Line No.";
          UNTIL NEXT = 0;
      END;
      EXIT(BaseAmount);
    END;

    PROCEDURE GetGSTAmount@1500004(DetailedGSTLedgerEntry@1500000 : Record 16419) GSTAmount : Decimal;
    VAR
      DetailedGSTLedgerEntry1@1500001 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry1 DO BEGIN
        RESET;
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
        SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type");
        SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type");
        SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
        IF FINDSET THEN
          REPEAT
            GSTAmount += ABS("GST Amount");
          UNTIL NEXT = 0;
      END;
      EXIT(GSTAmount);
    END;

    LOCAL PROCEDURE GetReturnReasonCode@1500017(DocumentNo@1500000 : Code[20]) : Text[250];
    VAR
      SalesCrMemoLine@1500001 : Record 115;
      ReturnReason@1500002 : Record 6635;
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      IF SalesCrMemoLine.FINDFIRST THEN BEGIN
        ReturnReason.SETRANGE(Code,SalesCrMemoLine."Return Reason Code");
        IF ReturnReason.FINDFIRST THEN
          EXIT(FORMAT(ReturnReason."GST Reporting Reason Code"));
      END;
    END;

    LOCAL PROCEDURE GetExitPoint@1500023(DocumentNo@1500000 : Code[20]) : Code[10];
    VAR
      SalesInvoiceHeader@1500001 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET(DocumentNo);
      EXIT(SalesInvoiceHeader."Exit Point");
    END;

    LOCAL PROCEDURE GetApplicationRemAmt@1500011(DetailedGSTLedgerEntry@1500000 : Record 16419);
    VAR
      GSTComponent@1500001 : Record 16405;
      DetailedGSTLedgerEntry1@1500002 : Record 16419;
      DetailedGSTLedgerEntry2@1500006 : Record 16419;
      DetailedGSTLedgerEntry3@1500007 : Record 16419;
      DocumentNo@1500005 : Code[20];
      DocumentNo1@1500009 : Code[20];
      LineNo@1500004 : Integer;
    BEGIN
      DetailedGSTLedgerEntry1.SETRANGE("Location  Reg. No.",DetailedGSTLedgerEntry."Location  Reg. No.");
      DetailedGSTLedgerEntry1.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry1."Entry Type"::Application);
      DetailedGSTLedgerEntry1.SETRANGE(Reversed,FALSE);
      DetailedGSTLedgerEntry1.SETRANGE(UnApplied,FALSE);
      DetailedGSTLedgerEntry1.SETRANGE("GST %",DetailedGSTLedgerEntry."GST %");
      IF DetailedGSTLedgerEntry1.FINDSET THEN
        REPEAT
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry1."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
              IF DetailedGSTLedgerEntry1."GST Jurisdiction Type" =
                 DetailedGSTLedgerEntry1."GST Jurisdiction Type"::Intrastate
              THEN BEGIN
                IF (DocumentNo <> DetailedGSTLedgerEntry1."Document No.") OR
                   (LineNo <> DetailedGSTLedgerEntry1."Document Line No.")
                THEN
                  TotalBaseAmountApp += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                LineNo := DetailedGSTLedgerEntry1."Document Line No.";
                DocumentNo := DetailedGSTLedgerEntry1."Document No.";
              END ELSE BEGIN
                IF LineNo <> DetailedGSTLedgerEntry1."Document Line No." THEN
                  TotalBaseAmountApp += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                LineNo := DetailedGSTLedgerEntry1."Document Line No.";
              END;
        UNTIL DetailedGSTLedgerEntry1.NEXT = 0;

      GSTComponent.RESET;
      GSTComponent.SETRANGE("Report View",GSTComponent."Report View"::CESS);
      IF GSTComponent.FINDSET THEN
        REPEAT
          DetailedGSTLedgerEntry.SETCURRENTKEY(
            "Location  Reg. No.","Posting Date","Entry Type","Transaction Type","Document Type","Buyer/Seller State Code","GST %");
          DetailedGSTLedgerEntry2.SETRANGE("Location  Reg. No.",DetailedGSTLedgerEntry."Location  Reg. No.");
          DetailedGSTLedgerEntry2.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
          DetailedGSTLedgerEntry2.SETRANGE("Entry Type",DetailedGSTLedgerEntry2."Entry Type"::Application);
          DetailedGSTLedgerEntry2.SETRANGE("Transaction Type",DetailedGSTLedgerEntry2."Transaction Type"::Sales);
          DetailedGSTLedgerEntry2.SETRANGE("Document Type",DetailedGSTLedgerEntry2."Document Type"::Invoice);
          DetailedGSTLedgerEntry2.SETRANGE("Buyer/Seller State Code",DetailedGSTLedgerEntry."Buyer/Seller State Code");
          DetailedGSTLedgerEntry2.SETRANGE("GST Jurisdiction Type",DetailedGSTLedgerEntry."GST Jurisdiction Type");
          DetailedGSTLedgerEntry2.SETRANGE("GST %",DetailedGSTLedgerEntry."GST %");
          DetailedGSTLedgerEntry2.SETFILTER("GST Component Code",'<>%1',GSTComponent.Code);
          DetailedGSTLedgerEntry2.SETRANGE(Reversed,FALSE);
          DetailedGSTLedgerEntry2.SETRANGE(UnApplied,FALSE);
          IF DetailedGSTLedgerEntry2.FINDSET THEN
            REPEAT
              IF DocumentNo1 <> DetailedGSTLedgerEntry2."Application Doc. No" THEN BEGIN
                DetailedGSTLedgerEntry3.SETRANGE("Location  Reg. No.",DetailedGSTLedgerEntry2."Location  Reg. No.");
                DetailedGSTLedgerEntry3.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
                DetailedGSTLedgerEntry3.SETRANGE("Entry Type",DetailedGSTLedgerEntry2."Entry Type"::Application);
                DetailedGSTLedgerEntry3.SETRANGE("Application Doc. No",DetailedGSTLedgerEntry2."Application Doc. No");
                DetailedGSTLedgerEntry3.SETRANGE(Reversed,FALSE);
                DetailedGSTLedgerEntry3.SETRANGE(UnApplied,FALSE);
                DetailedGSTLedgerEntry3.SETRANGE("GST Component Code",GSTComponent.Code);
                IF DetailedGSTLedgerEntry3.FINDSET THEN
                  REPEAT
                    CESSAmountApp += ABS(DetailedGSTLedgerEntry3."GST Amount");
                  UNTIL DetailedGSTLedgerEntry3.NEXT = 0;
              END;
              IF CESSAmountApp <> 0 THEN
                DocumentNo1 := DetailedGSTLedgerEntry2."Application Doc. No";
            UNTIL DetailedGSTLedgerEntry2.NEXT = 0;
        UNTIL GSTComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE GetInvoiceType@1500030(DetailedGSTLedgerEntry@1500000 : Record 16419) : Text[50];
    BEGIN
      CASE DetailedGSTLedgerEntry."GST Customer Type" OF
        DetailedGSTLedgerEntry."GST Customer Type"::Registered:
          EXIT(RegularTxt);
        DetailedGSTLedgerEntry."GST Customer Type"::"Deemed Export":
          EXIT(DeemedExportTxt);
      END;
      IF DetailedGSTLedgerEntry."GST Vendor Type" = DetailedGSTLedgerEntry."GST Vendor Type"::Registered THEN
        EXIT(RegularTxt);
    END;

    LOCAL PROCEDURE CheckPreGST@1500018(DocType@1500000 : ' ,Payment,Invoice,Credit Memo,,,,Refund';OriginalInvoiceNo@1500002 : Code[20];DocumentNo@1500003 : Code[20];ApplicationDocNo@1500004 : Code[20]) : Boolean;
    VAR
      DetailedGSTLedgerEntry1@1500001 : Record 16419;
    BEGIN
      IF DocType = DocType::"Credit Memo" THEN BEGIN
        DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry1."Entry Type"::"Initial Entry");
        DetailedGSTLedgerEntry1.SETRANGE("Document Type",DetailedGSTLedgerEntry1."Document Type"::Invoice);
        DetailedGSTLedgerEntry1.SETRANGE("Document No.",OriginalInvoiceNo);
        IF DetailedGSTLedgerEntry1.FINDFIRST THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
      IF DocType = DocType::Invoice THEN BEGIN
        DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry1."Entry Type"::"Initial Entry");
        DetailedGSTLedgerEntry1.SETRANGE("Document Type",DetailedGSTLedgerEntry1."Document Type"::Invoice);
        DetailedGSTLedgerEntry1.SETRANGE("Document No.",DocumentNo);
        IF DetailedGSTLedgerEntry1.FINDFIRST THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
      IF DocType = DocType::Refund THEN BEGIN
        DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry1."Entry Type"::"Initial Entry");
        DetailedGSTLedgerEntry1.SETRANGE("Document Type",DetailedGSTLedgerEntry1."Document Type"::Payment);
        DetailedGSTLedgerEntry1.SETRANGE("Document No.",ApplicationDocNo);
        IF DetailedGSTLedgerEntry1.FINDFIRST THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetURType@1500031(DetailedGSTLedgerEntry@1500000 : Record 16419) : Text[50];
    BEGIN
      CASE DetailedGSTLedgerEntry."GST Customer Type" OF
        DetailedGSTLedgerEntry."GST Customer Type"::Unregistered:
          EXIT(B2CLTxt);
        DetailedGSTLedgerEntry."GST Customer Type"::Export,
        DetailedGSTLedgerEntry."GST Customer Type"::"Deemed Export":
          BEGIN
            IF DetailedGSTLedgerEntry."GST Without Payment of Duty" THEN
              EXIT(UPPERCASE(EXPWOPayTxt));
            EXIT(UPPERCASE(EXPWPayTxt));
          END;
      END;
    END;

    LOCAL PROCEDURE GetGSTPlaceWiseValues@1500025(DetailedGSTLedgerEntry@1500002 : Record 16419);
    VAR
      DetailedGSTLedgerEntry1@1500000 : Record 16419;
      GSTComponent@1500003 : Record 16405;
      LineNo@1500001 : Integer;
      c@1500005 : Integer;
      DocumentNo@1170000000 : Code[20];
      OriginalInvoiceNo@1500010 : Code[20];
      ItemChargeAssgntLineNo@1500011 : Integer;
    BEGIN
      DetailedGSTLedgerEntry1.SETRANGE("Location  Reg. No.",DetailedGSTLedgerEntry."Location  Reg. No.");
      DetailedGSTLedgerEntry1.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry1.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry1.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry1.SETRANGE("Nature of Supply",DetailedGSTLedgerEntry."Nature of Supply"::B2C);
      DetailedGSTLedgerEntry1.SETRANGE("GST Customer Type",DetailedGSTLedgerEntry."GST Customer Type"::Unregistered);
      DetailedGSTLedgerEntry1.SETRANGE("e-Comm. Operator GST Reg. No.",DetailedGSTLedgerEntry."e-Comm. Operator GST Reg. No.");
      DetailedGSTLedgerEntry1.SETRANGE("Buyer/Seller State Code",DetailedGSTLedgerEntry."Buyer/Seller State Code");
      DetailedGSTLedgerEntry1.SETRANGE("GST %",DetailedGSTLedgerEntry."GST %");
      IF DetailedGSTLedgerEntry1.FINDSET THEN
        REPEAT
          IF ((DetailedGSTLedgerEntry1."GST Jurisdiction Type" = DetailedGSTLedgerEntry1."GST Jurisdiction Type"::Interstate) AND
              (GetInvoiceValue(DetailedGSTLedgerEntry1."Document No.",DetailedGSTLedgerEntry1."Document Type") <= 250000)) OR
             (DetailedGSTLedgerEntry1."GST Jurisdiction Type" = DetailedGSTLedgerEntry1."GST Jurisdiction Type"::Intrastate)
          THEN BEGIN
            GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry1."GST Component Code");
            IF GSTComponent.FINDFIRST THEN
              IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
                IF DetailedGSTLedgerEntry1."GST Jurisdiction Type" =
                   DetailedGSTLedgerEntry1."GST Jurisdiction Type"::Intrastate
                THEN BEGIN
                  IF (DocumentNo <> DetailedGSTLedgerEntry1."Document No.") OR
                     (LineNo <> DetailedGSTLedgerEntry1."Document Line No.") OR
                     (OriginalInvoiceNo <> DetailedGSTLedgerEntry1."Original Invoice No.") OR
                     (ItemChargeAssgntLineNo <> DetailedGSTLedgerEntry1."Item Charge Assgn. Line No.")
                  THEN BEGIN
                    TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                    CESSAmount += GetCessAmount(DetailedGSTLedgerEntry1);
                    c += 1;
                  END;
                  GSTPer += DetailedGSTLedgerEntry1."GST %";
                  DocumentNo := DetailedGSTLedgerEntry1."Document No.";
                  LineNo := DetailedGSTLedgerEntry1."Document Line No.";
                  OriginalInvoiceNo := DetailedGSTLedgerEntry1."Original Invoice No.";
                  ItemChargeAssgntLineNo := DetailedGSTLedgerEntry1."Item Charge Assgn. Line No.";
                END ELSE BEGIN
                  IF (DocumentNo <> DetailedGSTLedgerEntry1."Document No.") OR
                     (OriginalInvoiceNo <> DetailedGSTLedgerEntry1."Original Invoice No.") OR
                     (ItemChargeAssgntLineNo <> DetailedGSTLedgerEntry1."Item Charge Assgn. Line No.")
                  THEN BEGIN
                    GSTPer := DetailedGSTLedgerEntry1."GST %";
                    TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                    CESSAmount += GetCessAmount(DetailedGSTLedgerEntry1);
                  END;
                  DocumentNo := DetailedGSTLedgerEntry1."Document No.";
                  OriginalInvoiceNo := DetailedGSTLedgerEntry1."Original Invoice No.";
                  ItemChargeAssgntLineNo := DetailedGSTLedgerEntry1."Item Charge Assgn. Line No.";
                END;
          END;
        UNTIL DetailedGSTLedgerEntry1.NEXT = 0;
      IF c > 1 THEN
        GSTPer := GSTPer / c;
    END;

    LOCAL PROCEDURE GetComponentValueAdvPayment@1500028(DetailedGSTLedgerEntry@1500002 : Record 16419);
    VAR
      DetailedGSTLedgerEntry1@1500000 : Record 16419;
      GSTComponent@1500003 : Record 16405;
      LineNo@1500001 : Integer;
      DocumentNo@1500009 : Code[20];
      c@1500005 : Integer;
    BEGIN
      DetailedGSTLedgerEntry1.SETRANGE("Location  Reg. No.",DetailedGSTLedgerEntry."Location  Reg. No.");
      DetailedGSTLedgerEntry1.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry1.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type");
      DetailedGSTLedgerEntry1.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type");
      DetailedGSTLedgerEntry1.SETRANGE(Reversed,FALSE);
      DetailedGSTLedgerEntry1.SETRANGE("GST on Advance Payment",TRUE);
      DetailedGSTLedgerEntry1.SETRANGE("GST %",DetailedGSTLedgerEntry."GST %");
      IF DetailedGSTLedgerEntry1.FINDSET THEN
        REPEAT
          GSTComponent.SETRANGE(Code,DetailedGSTLedgerEntry1."GST Component Code");
          IF GSTComponent.FINDFIRST THEN
            IF GSTComponent."Report View" <> GSTComponent."Report View"::CESS THEN
              IF DetailedGSTLedgerEntry1."GST Jurisdiction Type" =
                 DetailedGSTLedgerEntry1."GST Jurisdiction Type"::Intrastate
              THEN BEGIN
                IF (DocumentNo <> DetailedGSTLedgerEntry1."Document No.") OR
                   (LineNo <> DetailedGSTLedgerEntry1."Document Line No.")
                THEN BEGIN
                  TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                  CESSAmount += GetCessAmount(DetailedGSTLedgerEntry1);
                  c += 1;
                END;
                GSTPer += DetailedGSTLedgerEntry1."GST %";
                DocumentNo := DetailedGSTLedgerEntry1."Document No.";
                LineNo := DetailedGSTLedgerEntry1."Document Line No.";
              END ELSE BEGIN
                GSTPer := DetailedGSTLedgerEntry1."GST %";
                TotalBaseAmount += ABS(DetailedGSTLedgerEntry1."GST Base Amount");
                CESSAmount += GetCessAmount(DetailedGSTLedgerEntry1);
              END;
        UNTIL DetailedGSTLedgerEntry1.NEXT = 0;
      IF c > 1 THEN
        GSTPer := GSTPer / c;
    END;

    LOCAL PROCEDURE GetGSTAmountComp@1500227(HSNSACCode@1500003 : Code[8];UOMCode@1500007 : Code[10];ReportView@1500006 : Option;Base@1500000 : Boolean;Qty@1500011 : Boolean) : Decimal;
    VAR
      GSTComponent@1500005 : Record 16405;
      DetailedGSTLedgerEntry@1500004 : Record 16419;
      GSTAmount@1500002 : Decimal;
      DocumentNo@1500008 : Code[20];
      LineNo@1500001 : Integer;
      OriginalInvoiceNo@1500009 : Code[20];
      ItemChargesAssgnLineNo@1500010 : Integer;
    BEGIN
      DetailedGSTLedgerEntry.SETCURRENTKEY(
        "Location  Reg. No.","Posting Date","Entry Type","Transaction Type","Document Type",
        "HSN/SAC Code",UOM,"Document No.","Document Line No.");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTIN);
      DetailedGSTLedgerEntry.SETRANGE("Posting Date",DMY2DATE(1,Month,Year),CALCDATE('<1M - 1D>',DMY2DATE(1,Month,Year)));
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Sales);
      DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice);
      DetailedGSTLedgerEntry.SETRANGE("HSN/SAC Code",HSNSACCode);
      DetailedGSTLedgerEntry.SETRANGE(UOM,UOMCode);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          IF Base OR Qty THEN
            IF (DocumentNo <> DetailedGSTLedgerEntry."Document No.") OR
               (LineNo <> DetailedGSTLedgerEntry."Document Line No.") OR
               (OriginalInvoiceNo <> DetailedGSTLedgerEntry."Original Invoice No.") OR
               (ItemChargesAssgnLineNo <> DetailedGSTLedgerEntry."Item Charge Assgn. Line No.")
            THEN BEGIN
              IF Base THEN
                GSTAmount += DetailedGSTLedgerEntry."GST Base Amount"
              ELSE
                IF Qty THEN
                  GSTAmount += DetailedGSTLedgerEntry.Quantity;
            END ELSE BEGIN
              IF GSTComponent.GET(DetailedGSTLedgerEntry."GST Component Code") THEN
                IF GSTComponent."Report View" = ReportView THEN
                  GSTAmount += DetailedGSTLedgerEntry."GST Amount";
            END;
          DocumentNo := DetailedGSTLedgerEntry."Document No.";
          LineNo := DetailedGSTLedgerEntry."Document Line No.";
          OriginalInvoiceNo := DetailedGSTLedgerEntry."Original Invoice No.";
          ItemChargesAssgnLineNo := DetailedGSTLedgerEntry."Item Charge Assgn. Line No.";
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
      EXIT(GSTAmount);
    END;

    LOCAL PROCEDURE ClearHSNInfo@1500328();
    BEGIN
      CLEAR(GSTBaseAmount);
      CLEAR(HSNIGSTAmt);
      CLEAR(HSNCGSTAmt);
      CLEAR(HSNSGSTAmt);
      CLEAR(HSNCessAmt);
      CLEAR(HSNQty);
    END;

    LOCAL PROCEDURE GetCessAmount@1170000000(DetailedGSTLedgerEntry@1170000000 : Record 16419) : Decimal;
    VAR
      DetailedGSTLedgerEntry1@1170000001 : Record 16419;
      GSTComponent@1170000002 : Record 16405;
      DocCessAmount@1170000003 : Decimal;
    BEGIN
      DetailedGSTLedgerEntry1.SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
      DetailedGSTLedgerEntry1.SETRANGE("Document Line No.",DetailedGSTLedgerEntry."Document Line No.");
      IF DetailedGSTLedgerEntry1.FINDSET THEN
        REPEAT
          GSTComponent.GET(DetailedGSTLedgerEntry1."GST Component Code");
          IF GSTComponent."Report View" = GSTComponent."Report View"::CESS THEN
            DocCessAmount += ABS(DetailedGSTLedgerEntry1."GST Amount");
        UNTIL DetailedGSTLedgerEntry1.NEXT = 0;
      EXIT(DocCessAmount);
    END;

    LOCAL PROCEDURE GetInvoiceValue@1170000002(DocumentNo@1170000000 : Code[20];DocumentType@1170000004 : ' ,Payment,Invoice,Credit Memo,,,,Refund') : Decimal;
    VAR
      CustLedgerEntry@1500000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",DocumentType);
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      IF CustLedgerEntry.FINDFIRST THEN
        CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      EXIT(ABS(CustLedgerEntry."Amount (LCY)"));
    END;

    LOCAL PROCEDURE GetGSTPaymentOfDuty@1170000005(DocumentNo@1170000000 : Code[20]) : Boolean;
    VAR
      DetailedGSTLedgerEntry@1170000001 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.SETRANGE("Document No.",DocumentNo);
      IF DetailedGSTLedgerEntry.FINDFIRST THEN
        EXIT(DetailedGSTLedgerEntry."GST Without Payment of Duty");
    END;

    LOCAL PROCEDURE CheckComponentReportView@1500035(ComponentCode@1500000 : Code[10]);
    VAR
      GSTComponent@1500001 : Record 16405;
    BEGIN
      GSTComponent.GET(ComponentCode);
      GSTComponent.TESTFIELD("Report View");
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

