OBJECT Codeunit 134328 ERM Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryDimension@1024 : Codeunit 131001;
      LibraryERM@1003 : Codeunit 131300;
      LibraryFixedAsset@1021 : Codeunit 131330;
      LibraryInventory@1022 : Codeunit 132201;
      LibraryPurchase@1002 : Codeunit 130512;
      LibrarySales@1025 : Codeunit 130509;
      LibraryUtility@1023 : Codeunit 131000;
      LibraryWarehouse@1026 : Codeunit 132204;
      LibraryCosting@1029 : Codeunit 132200;
      LibraryRandom@1001 : Codeunit 130440;
      LibrarySetupStorage@1019 : Codeunit 131009;
      LibraryService@1020 : Codeunit 131902;
      LibraryVariableStorage@1030 : Codeunit 131004;
      LibraryJob@1014 : Codeunit 131920;
      DocType@1031 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      isInitialized@1000 : Boolean;
      VATAmountErr@1008 : TextConst '@@@="%1 = Amount";ENU=VAT Amount must be %1 in VAT Amount Line.';
      FieldErr@1007 : TextConst 'ENU=Number of Lines for Purchase Line and Purchase Receipt Line must be Equal.';
      AmountErr@1006 : TextConst '@@@="%1 = Field Name, %2 = Field Value";ENU=%1 must be Equal in %2.';
      CurrencyErr@1005 : TextConst '@@@="%1 = Table Name";ENU=Currency Code must be Equal in %1.';
      InvoiceDiscountErr@1009 : TextConst '@@@="%1 = Field Name, %2 = Amount, %3 = Table Name";ENU=%1 must be %2 in %3.';
      ValidateErr@1011 : TextConst '@@@="%1 = Field Name, %2 =Amount, %3 = Table Name, %4 = Entry No.";ENU="%1 must be %2 in %3 Entry No. = %4."';
      PageNotOpenErr@1012 : TextConst 'ENU=The TestPage is not open.';
      NoOfRecordErr@1013 : TextConst 'ENU=No. of records must be 1.';
      WhseReceiveIsRequiredErr@1016 : TextConst 'ENU=Warehouse Receive is required for Line No.';
      WrongErrorReturnedErr@1010 : TextConst '@@@="%1 = Error Text";ENU=Wrong error returned: %1.';
      CopyDocDateOrderConfirmMsg@1032 : TextConst 'ENU=The Posting Date of the copied document is different from the Posting Date of the original document. The original document already has a Posting No. based on a number series with date order. When you post the copied document, you may have the wrong date order in the posted documents.\Do you want to continue?';
      DocumentShouldNotBeCopiedErr@1028 : TextConst 'ENU=Document should not be copied';
      DocumentShouldBeCopiedErr@1027 : TextConst 'ENU=Document should be copied';
      WrongConfirmationMsgErr@1033 : TextConst 'ENU=Wrong confirmation message';
      TestFieldTok@1095 : TextConst 'ENU=TestField';
      VATBusPostingGroupErr@1097 : TextConst 'ENU=VAT Bus. Posting Group must be equal to';

    [Test]
    PROCEDURE PurchaseInvoiceCreation@3();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Test New Purchase Invoice creation.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Invoice.
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateVendor(''));

      // Verify: Verify Purchase Invoice created.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE VATAmountOnPurchaseInvoice@4();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      VATAmountLine@1002 : Record 290;
      QtyType@1003 : 'General,Invoicing,Shipping';
    BEGIN
      // Create a Purchase Invoice, Calculates applicable VAT for a VAT Posting Group and verify it with VAT Amount Line.

      // Setup.
      Initialize;
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateVendor(''));

      // Exercise: Calculate VAT Amount on Purchase Invoice.
      PurchaseLine.CalcVATAmountLines(QtyType::Invoicing,PurchaseHeader,PurchaseLine,VATAmountLine);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);

      // Verify: Verify VAT Amount on Purchase Invoice.
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(
        PurchaseHeader.Amount * PurchaseLine."VAT %" / 100,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(VATAmountErr,PurchaseHeader.Amount * PurchaseLine."VAT %" / 100));
    END;

    [Test]
    PROCEDURE PurchaseInvoiceReport@5();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseDocumentTest@1005 : Report 402;
      FilePath@1003 : Text[1024];
    BEGIN
      // Create New Purchase Invoice and save as external file and verify saved files have data.

      // Setup.
      Initialize;
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateVendor(''));

      // Exercise: Generate Report as external file for Purchase Invoice.
      CLEAR(PurchaseDocumentTest);
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseDocumentTest.SETTABLEVIEW(PurchaseHeader);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      PurchaseDocumentTest.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PostPurchaseInvoice@14();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchInvHeader@1001 : Record 122;
      PurchRcptLine@1004 : Record 121;
      VATPostingSetup@1009 : Record 325;
      NoSeriesManagement@1002 : Codeunit 396;
      PurchaseLineCount@1007 : Integer;
      PostedInvoiceNo@1003 : Code[20];
      DocumentNo@1000 : Code[20];
    BEGIN
      // Create and Post Purchase Invoice and verify Purchase Posted Receipt Line,Vendor Ledger, GL Entry, and VAT Entry.

      // Setup: Update Purchase and Payable Setup to generate Posted Purchase Receipt document from Purchase Invoice.
      // Create Purchase Invoice, Store Line count of Purchase Invoice, Posted Receipt No. and Posted Invoice No. in a variable.
      Initialize;
      UpdatePurchaseAndPayableSetup(TRUE);
      FindVATPostingSetup(VATPostingSetup);
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateAndModifyVendor('',VATPostingSetup."VAT Bus. Posting Group"));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchaseLineCount := PurchaseLine.COUNT;
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      CLEAR(NoSeriesManagement);

      // Exercise: Post Purchase Invoice.
      PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Posted Purchase Receipt,GL Entry, Vendor Ledger Entry, Value Entry and VAT Entry.
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      Assert.AreEqual(PurchaseLineCount,PurchRcptLine.COUNT,FieldErr);
      PurchInvHeader.GET(PostedInvoiceNo);
      PurchInvHeader.CALCFIELDS(Amount,"Amount Including VAT");
      VerifyGLEntry(PostedInvoiceNo,PurchInvHeader."Amount Including VAT");
      VerifyVendorLedgerEntry(PostedInvoiceNo,PurchInvHeader."Amount Including VAT");
      VerifyValueEntry(PostedInvoiceNo,PurchInvHeader.Amount);
    END;

    [Test]
    PROCEDURE PostedPurchaseInvoiceReport@12();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvHeader@1003 : Record 122;
      PurchaseInvoice@1005 : Report 406;
      NoSeriesManagement@1004 : Codeunit 396;
      FilePath@1006 : Text[1024];
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Test if Post a Purchase Invoice and generate Posted Purchase Invoice Report.

      // Setup.
      Initialize;
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateVendor(''));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Generate Report as external file for Posted Purchase Invoice.
      CLEAR(PurchaseInvoice);
      PurchInvHeader.SETRANGE("No.",PostedDocumentNo);
      PurchaseInvoice.SETTABLEVIEW(PurchInvHeader);
      FilePath := TEMPORARYPATH + FORMAT('Purchase - Invoice') + PurchInvHeader."No." + '.xlsx';
      PurchaseInvoice.SAVEASEXCEL(FilePath);

      // Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceForWhseLocation@16();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchRcptLine@1009 : Record 121;
      WarehouseEmployee@1003 : Record 7301;
      NoSeriesManagement@1010 : Codeunit 396;
      PostedDocumentNo@1008 : Code[20];
    BEGIN
      // Test if Post a Purchase Invoice with Warehouse Location and verify Posted Purchase Receipt Entry.

      // Setup: Update Purchase and Payable Setup to generate Posted Purchase Receipt document from Purchase Invoice.
      Initialize;
      UpdatePurchaseAndPayableSetup(TRUE);

      // Exercise: Create Purchase Invoice for Warehouse Location. Using RANDOM Quantity for Purchase Line, value is not important.
      CreatePurchaseHeader(PurchaseHeader,CreateVendor(''),PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Location Code",UpdateWarehouseLocation(TRUE));
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,PurchaseLine."Location Code",FALSE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Quantity Posted Receipt Document.
      PurchRcptLine.SETRANGE("Document No.",PostedDocumentNo);
      PurchRcptLine.FINDFIRST;
      Assert.AreEqual(PurchaseLine.Quantity,PurchRcptLine.Quantity,FieldErr);

      // Tear Down: Rollback Setup changes for Location and Warehouse Employee.
      UpdateWarehouseLocation(FALSE);
      WarehouseEmployee.GET(USERID,PurchaseLine."Location Code");
      WarehouseEmployee.DELETE;
    END;

    [Test]
    PROCEDURE LineDiscountOnPurchaseInvoice@21();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchaseLineDiscount@1005 : Record 7014;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Test Line Discount on Purchase Invoice, Post Invoice and verify Posted GL Entry.

      // Setup: Create Line Discount Setup.
      Initialize;
      SetupLineDiscount(PurchaseLineDiscount);

      // Exercise: Create and Post Invoice with Random Quantity. Take Quantity greater than Purchase Line Discount Minimum Quantity.
      CreatePurchaseHeader(PurchaseHeader,PurchaseLineDiscount."Vendor No.",PurchaseHeader."Document Type"::Invoice);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLineDiscount."Item No.",
        PurchaseLineDiscount."Minimum Quantity" + LibraryRandom.RandInt(10));
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Line Discount Amount.
      VerifyLineDiscountAmount(
        PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * PurchaseLineDiscount."Line Discount %" / 100);
    END;

    [Test]
    PROCEDURE InvDiscountOnPurchaseInvoice@29();
    VAR
      VendorInvoiceDisc@1002 : Record 24;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create New Invoice Discount Setup for Vendor and make new Purchase Invoice, Post Invoice and verify Posted GL Entry.

      // Setup: Create Invoice Discount Setup.
      Initialize;
      SetupInvoiceDiscount(VendorInvoiceDisc,LibraryRandom.RandInt(10));

      // Exercise: Create Purchase Invoice using Random value for Quantity, calculate Invoice Discount and Post Invoice.
      CreatePurchaseHeader(PurchaseHeader,VendorInvoiceDisc.Code,PurchaseHeader."Document Type"::Invoice);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));

      // Invoice Value always greater than Minimum Amount of Invoice Discount Setup.
      PurchaseLine.VALIDATE("Direct Unit Cost",VendorInvoiceDisc."Minimum Amount");
      PurchaseLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Line and Posted G/L Entry for Invoice Discount Amount.
      VerifyInvoiceDiscountAmount(
        PurchaseLine,PostedDocumentNo,
        (PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost") * VendorInvoiceDisc."Discount %" / 100);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithFCY@25();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1005 : Record 122;
      PostedDocumentNo@1000 : Code[20];
    BEGIN
      // Create and Post a Purchase Invoice with Currency and verify currency on Posted Purchase Invoice Entry.

      // Setup.
      Initialize;

      // Exercise: Create Purchase Invoice, attach new Currency on Purchase Invoice and Post Invoice.
      CreatePurchaseHeader(PurchaseHeader,CreateVendor(''),PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Currency Code",CreateCurrency);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Currency Code in Purchase Line and Posted Purchase Invoice Header.
      PurchInvHeader.GET(PostedDocumentNo);
      Assert.AreEqual(
        PurchaseHeader."Currency Code",PurchaseLine."Currency Code",
        STRSUBSTNO(CurrencyErr,PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        PurchaseHeader."Currency Code",PurchInvHeader."Currency Code",
        STRSUBSTNO(CurrencyErr,PurchInvHeader.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseInvoiceBeforeRelease@6();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      LineDiscountAmount@1003 : Decimal;
      OutStandingAmountLCY@1007 : Decimal;
    BEGIN
      // Check Purchase Lines Field after Create and before Release Purchase Invoice with Currency.

      // Setup.
      Initialize;
      CreatePurchaseInvoiceCurrency(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice);

      // Exercise: Calculate Line Discount and Outstanding Amount LCY field  on Purchase Line.
      LineDiscountAmount := ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost" * PurchaseLine."Line Discount %" / 100);
      OutStandingAmountLCY := ROUND(LibraryERM.ConvertCurrency(PurchaseLine."Line Amount",PurchaseHeader."Currency Code",'',WORKDATE));
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");

      // Verify: Verify Purchase Line fields before releasing.
      PurchaseLine.TESTFIELD("Line Discount Amount",LineDiscountAmount);
      PurchaseLine.TESTFIELD("VAT Base Amount",PurchaseLine.Amount);
      PurchaseLine.TESTFIELD("Line Amount",PurchaseLine."Amount Including VAT");
      PurchaseLine.TESTFIELD("Outstanding Amount (LCY)",OutStandingAmountLCY);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceAfterRelease@38();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      Currency@1003 : Record 4;
      GeneralLedgerSetup@1000 : Record 98;
      LineAmount@1007 : Decimal;
      RoundingPrecision@1004 : Decimal;
    BEGIN
      // Check Purchase Lines Field after Create and Release Purchase Invoice with Currency.

      // Setup.
      Initialize;
      CreatePurchaseInvoiceCurrency(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice);
      IF Currency.GET(PurchaseLine."Currency Code") THEN
        RoundingPrecision := Currency."Amount Rounding Precision";
      IF RoundingPrecision = 0 THEN BEGIN
        GeneralLedgerSetup.GET;
        RoundingPrecision := GeneralLedgerSetup."Amount Rounding Precision";
      END;
      LineAmount :=
        ROUND(
          PurchaseLine."Line Amount" - (PurchaseLine."Line Amount" * PurchaseLine."VAT %") / (PurchaseLine."VAT %" + 100),
          RoundingPrecision);

      // Exercise.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS("Amount Including VAT");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");

      // Verify: Verify Purchase Line Fields after Releasing.
      PurchaseLine.TESTFIELD("VAT Base Amount",LineAmount);
      PurchaseLine.TESTFIELD(Amount,LineAmount);
      PurchaseLine.TESTFIELD("Amount Including VAT",PurchaseHeader."Amount Including VAT");
    END;

    [Test]
    PROCEDURE PurchaseOrderAfterInvDiscount@13();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchCalcDiscount@1003 : Codeunit 70;
      InvDiscAmountToInvoice@1007 : Decimal;
      InvoiceDiscount@1000 : Decimal;
      TotalAmount@1005 : Decimal;
    BEGIN
      // Check Purchase Lines Field after Create and Calculate Invoice Discount on Purchase order with Currency.

      // Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      InvoiceDiscount := CreatePurchaseInvoiceCurrency(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      PurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine.Quantity / 2);
      PurchaseLine.MODIFY(TRUE);
      TotalAmount := PurchaseLine."Direct Unit Cost" * PurchaseLine."Qty. to Invoice";
      InvDiscAmountToInvoice := ROUND((TotalAmount - (TotalAmount * PurchaseLine."Line Discount %" / 100)) * InvoiceDiscount / 100);

      // Exercise.
      PurchCalcDiscount.CalculateInvoiceDiscount(PurchaseHeader,PurchaseLine);
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");

      // Verify: Verify Purchase Line Fields after Calculate Invoice Discount.
      Assert.AreNearlyEqual(
        InvDiscAmountToInvoice,PurchaseLine."Inv. Disc. Amount to Invoice",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(
          InvoiceDiscountErr,PurchaseLine.FIELDCAPTION("Inv. Disc. Amount to Invoice"),InvDiscAmountToInvoice,
          PurchaseLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE InvDiscountPurchStatistics@26();
    VAR
      GeneralLedgerSetup@1020 : Record 98;
      PurchaseHeader@1000 : Record 38;
      VATAmountLine@1004 : Record 290;
      PurchaseLine@1001 : Record 39;
      QtyType@1003 : 'General,Invoicing,Shipping';
      InvDiscountAmount@1019 : Decimal;
    BEGIN
      // Check Invoice Discount Amount on Purchase Order for Partial Posting.

      // Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      CreateAndPostPurchaseOrder(PurchaseLine,InvDiscountAmount);

      // Exercise: Calculate VAT Amount.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PurchaseLine.CalcVATAmountLines(QtyType::Invoicing,PurchaseHeader,PurchaseLine,VATAmountLine);

      // Verify: Verify Invoice Discount Amount.
      Assert.AreNearlyEqual(
        ROUND(InvDiscountAmount / 2),VATAmountLine."Invoice Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(
          InvoiceDiscountErr,VATAmountLine.FIELDCAPTION("Invoice Discount Amount"),InvDiscountAmount / 2,VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE InvDiscountPstdPurchStatistics@20();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1009 : Record 122;
      PurchInvLine@1004 : Record 123;
      VATAmountLine@1002 : Record 290;
      GeneralLedgerSetup@1000 : Record 98;
      InvDiscountAmount@1005 : Decimal;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Check Invoice Discount Amount on Purchase Order for Posted Purchase Invoice.

      // Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,InvDiscountAmount);

      // Exercise: Calculate VAT Amount.
      PurchInvHeader.GET(DocumentNo);
      PurchInvLine.CalcVATAmountLines(PurchInvHeader,VATAmountLine);

      // Verify: Verify Invoice Discount Amount.
      Assert.AreNearlyEqual(
        ROUND(InvDiscountAmount / 2),VATAmountLine."Invoice Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(
          InvoiceDiscountErr,VATAmountLine.FIELDCAPTION("Invoice Discount Amount"),InvDiscountAmount / 2,VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchaseInvoiceFixedAssets@30();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1005 : Record 122;
      CurrencyCode@1007 : Code[10];
      DocumentNo@1004 : Code[20];
    BEGIN
      // Create Vendor with Currency and post Purchase Invoice for same while purchasing Fixed Asset and Verifying the
      // Purchase Invoice Header.

      // Setup: Create Currency,Vendor and Update Additional Currency on General Ledger Setup.
      Initialize;
      CurrencyCode := CreateCurrency;
      LibraryERM.SetAddReportingCurrency(CurrencyCode);

      CreatePurchaseHeader(PurchaseHeader,CreateVendor(CurrencyCode),PurchaseHeader."Document Type"::Invoice);

      // Using RANDOM Quantity for Purchase Line, value is not important.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",FindFixedAsset,LibraryRandom.RandInt(10));

      // Exercise: Post Purchase order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Invoice Header created with Currency Code for Fixed Assets.
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.TESTFIELD("Currency Code",CurrencyCode);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithACY@33();
    VAR
      GeneralPostingSetup@1007 : Record 252;
      VATPostingSetup@1000 : Record 325;
      PurchaseLine@1010 : Record 39;
      CurrencyCode@1005 : Code[10];
      PostedDocumentNo@1001 : Code[20];
      InvoiceAmountLCY@1008 : Decimal;
    BEGIN
      // Verify Amount on G/L Entry and Amount LCY on Vendor Ledger Entry after posting Purchase Invoice with ACY.

      // Setup: Create Currency and Exchange Rate. Update Inv. Rounding Precision LCY and Additional Currency on General Ledger Setup.
      // Run Additional Reporting Currency and create Vendor with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      LibraryERM.SetInvRoundingPrecisionLCY(1);  // 1 used for Inv. Rounding Precision LCY according to script.
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");

      // Exercise: Create and Post Purchase Invoice.
      PostedDocumentNo := CreateAndPostPurchaseInvoice(PurchaseLine,PurchaseLine.Type::Item,CurrencyCode,VATPostingSetup);
      InvoiceAmountLCY := LibraryERM.ConvertCurrency(PurchaseLine."Line Amount",CurrencyCode,'',WORKDATE);

      // Verify: Verify Amount on G/L Entry and Amount LCY on Vendor Ledger Entry.
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      VerifyAmountOnGLEntry(PostedDocumentNo,GeneralPostingSetup."Purch. Account",InvoiceAmountLCY);
      VerifyAmountLCYOnVendorLedger(PostedDocumentNo,-InvoiceAmountLCY);
    END;

    [Test]
    PROCEDURE PurchaserCodePurchaseInvoice@40();
    VAR
      GeneralLedgerSetup@1009 : Record 98;
      VendorLedgerEntry@1008 : Record 25;
      GLEntry@1007 : Record 17;
      PaymentMethod@1004 : Record 289;
      GLAccount@1019 : Record 15;
      SalespersonPurchaser@1003 : Record 13;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Amount@1005 : Decimal;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Check GL And Vendor Ledger Entry for Amount and Purchaser Code after Posting Purchase Invoice.

      // Setup: Create and Post Purchase Invoice with Payment Method and Purchaser Code with Random Values.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreatePaymentMethod(PaymentMethod);
      PaymentMethod.VALIDATE("Bal. Account No.",GLAccount."No.");
      PaymentMethod.MODIFY(TRUE);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      CreatePurchaseHeader(PurchaseHeader,CreateVendor(''),PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Purchaser Code",SalespersonPurchaser.Code);
      PurchaseHeader.VALIDATE("Payment Method Code",PaymentMethod.Code);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      Amount := PurchaseLine."Line Amount" + (PurchaseLine."Line Amount" * PurchaseLine."VAT %" / 100);

      // Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify GL And Vendor Ledger Entry for Amount and Purchaser Code.
      GeneralLedgerSetup.GET;
      FindGLEntry(GLEntry,DocumentNo,PaymentMethod."Bal. Account No.");
      Assert.AreNearlyEqual(
        -Amount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),-Amount));

      FindVendorLedgerEntry(VendorLedgerEntry,DocumentNo,VendorLedgerEntry."Document Type"::Payment);
      Assert.AreEqual(
        PurchaseHeader."Purchaser Code",VendorLedgerEntry."Purchaser Code",
        STRSUBSTNO(AmountErr,PurchaseHeader.FIELDCAPTION("Purchaser Code"),PurchaseHeader."Purchaser Code"));
    END;

    [Test]
    PROCEDURE LineAmountOnPurchaseInvoice@43();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Check Line Amount on Purchase Invoice for New Vendor.

      // Setup:
      Initialize;

      // Exercise: Create Purchase Invoice.
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateVendor(''));

      // Verify: Check Line Amount of Purchase Invoice.
      VerifyPurchLineAmount(PurchaseHeader."No.",PurchaseLine."No.",PurchaseLine."Line Amount");
    END;

    [Test]
    PROCEDURE BalanceLCYonVendor@53();
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1006 : Record 39;
    BEGIN
      // Check Total (LCY) and Balance (LCY) of Vendor after post Purchase Invoice.

      // Setup: Create Vendor, Item and Purchase Invoice.
      Initialize;
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,CreateVendor(''));
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS("Amount Including VAT");

      // Exercise: Post the Purchase Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Check Balance(LCY) and Total(LCY) of Vendor.
      VerifyAmountOnVendor(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Amount Including VAT");
    END;

    [Test]
    PROCEDURE PurchInvWithMultipleLinesFCY@48();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      GeneralPostingSetup@1015 : Record 252;
      Vendor@1016 : Record 23;
      Item@1017 : Record 27;
      DocumentNo@1009 : Code[20];
      GLAccountNo@1000 : Code[20];
      LineAmtGLAccount@1013 : Decimal;
      LineAmtItem@1014 : Decimal;
    BEGIN
      // Verify program allows to posting the purchase invoice with multiple lines when FCY is involved and
      // verify Amount and Additional amount on GL entry.

      // Setup: Create G/L Account, Create Currency and its Exchange rate, Create Vendor and Item.
      Initialize;
      GLAccountNo := LibraryERM.CreateGLAccountWithPurchSetup;
      Vendor.GET(CreateVendor(CreateCurrency));
      LibraryERM.SetAddReportingCurrency(Vendor."Currency Code");
      Item.GET(CreateItem);
      GeneralPostingSetup.GET(Vendor."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      LineAmtGLAccount := CreatePurchLineWithReturnAmt(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo);
      LineAmtItem := CreatePurchLineWithReturnAmt(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.");

      // Exercise: Create and post Purchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Amount and Additional Currency Amount on G/L entries.
      VerifyAdditionalAmtOnGLEntry(DocumentNo,GLAccountNo,LineAmtGLAccount);
      VerifyAmountOnGLEntry(DocumentNo,GLAccountNo,LibraryERM.ConvertCurrency(LineAmtGLAccount,Vendor."Currency Code",'',WORKDATE));
      VerifyAdditionalAmtOnGLEntry(DocumentNo,GeneralPostingSetup."Purch. Account",LineAmtItem);
      VerifyAmountOnGLEntry(
        DocumentNo,GeneralPostingSetup."Purch. Account",LibraryERM.ConvertCurrency(LineAmtItem,Vendor."Currency Code",'',WORKDATE));
    END;

    [Test]
    PROCEDURE PurchaseReceiptInvoice@52();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verifying that the posted purchase receipt and posted purchase invoice have been created after posting Purchase Order.

      // Setup: Create Purchase Order.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,CreateVendor(''),PurchaseHeader."Document Type"::Order);

      // Using Random Number Generator for Random Quantity.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));

      // Exercise: Post Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Purchase Order.
      VerifyPurchRcptLine(PurchaseLine,FindPurchRcptHeaderNo(PurchaseHeader."No."));
      VerifyPurchInvLine(PurchaseLine,FindPostedPurchaseInvoiceNo(PurchaseHeader."No."));
    END;

    [Test]
    PROCEDURE OpenAndCloseVendorPageToVerifyError@103();
    VAR
      VendorCard@1003 : TestPage 26;
    BEGIN
      // open and close Vendor page and verify error message after closing the Vendor page.

      // Setup.
      Initialize;
      VendorCard.OPENVIEW;
      VendorCard.CLOSE;

      // Exercise: Open and close Vendor Page.
      ASSERTERROR VendorCard.CLOSE;

      // Verify: Verify error message on Vendor page.
      Assert.ExpectedError(PageNotOpenErr);
    END;

    [Test]
    PROCEDURE VendorCreationByPage@68();
    VAR
      Vendor@1002 : Record 23;
      VendorNo@1000 : Code[20];
    BEGIN
      // Check Vendor after Creating a new Vendor with Page.

      // Setup.
      Initialize;

      // Exercise: Create Vendor with Page.
      VendorNo := CreateVendorCard;

      // Verify: Verify value on Vendor.
      Vendor.GET(VendorNo);
    END;

    [Test]
    PROCEDURE VendorWithDimension@34();
    VAR
      DefaultDimension@1008 : Record 352;
    BEGIN
      // Check Dimension on Vendor after creating a Vendor with Dimension.

      // Setup.
      Initialize;

      // Exercise: Create Vendor with Dimension.
      CreateVendorWithDimension(DefaultDimension);

      // Verify: Verify Dimension.
      DefaultDimension.GET(DefaultDimension."Table ID",DefaultDimension."No.",DefaultDimension."Dimension Code");
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinesPageHandler)]
    PROCEDURE GetReceiptLineOnPurchaseInvoice@70();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchRcptLine@1002 : Record 121;
    BEGIN
      // Verify Receipts on Get Receipt Lines are filtered according to Buy-from Vendor No. on Purchase Invoice.

      // Setup: Create and Receive two Purchase Orders using different Buy-from Vendor No. and same Pay-to Vendor No. and create Purchase Invoice using First Vendor.
      Initialize;
      CreateReceiptsAndPurchaseInvoice(PurchaseHeader);

      // Exercise: Open created Purchase Invoice page and do Get Receipt Lines.
      OpenPurchaseInvoiceAndGetReceiptLine(PurchaseHeader."No.");

      // Verify: Verify Buy-from Vendor No. on Get Receipt Lines page.
      PurchRcptLine.SETRANGE("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      Assert.AreEqual(1,PurchRcptLine.COUNT,NoOfRecordErr);  // Take 1 for the Purchase Receipt Line.
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinesPageHandler)]
    PROCEDURE GLEntriesAfterGetReceiptLine@69();
    VAR
      GeneralPostingSetup@1005 : Record 252;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify the GL Entries when posting the Purchase Invoice after Get Receipt Lines using page.

      // Setup: Create and Receive two Purchase Orders using different Vendors and create Purchase Invoice using first Vendor. Open created Purchase Invoice page and do Get Receipt Lines.
      Initialize;
      CreateReceiptsAndPurchaseInvoice(PurchaseHeader);
      OpenPurchaseInvoiceAndGetReceiptLine(PurchaseHeader."No.");
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");

      // Exercise: Post the created Purchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Amount on GL Entry.
      VerifyAmountOnGLEntry(DocumentNo,GeneralPostingSetup."Purch. Account",PurchaseLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(QuantityOnGetReceiptLinesPageHandler,MessageHandler)]
    PROCEDURE GetReceiptLinesAfterPartialPosting@78();
    VAR
      PurchaseHeader@1000 : Record 38;
      GetReceiptLines@1003 : TestPage 5709;
    BEGIN
      // Verify Get Receipt Lines page that lines are filtered according to Purchase Order.

      // Setup: Post the Purchase Order.
      Initialize;
      PartiallyPostPurchaseOrder(PurchaseHeader);

      // Exercise: Open Get Receipt Lines page.
      GetReceiptLines.OPENEDIT;

      // Verify: Verify that both lines are exists on Get Receipt Lines page with same Quantity on which Purchase Order is posted.

      // Verification done in QuantityOnGetReceiptLinesPageHandler page handler.
    END;

    [Test]
    [HandlerFunctions(QuantityFilterUsingGetReceiptLinesPageHandler,MessageHandler)]
    PROCEDURE GetReceiptLinesAfterPartialPostingWithQuantityFilter@76();
    VAR
      PurchaseHeader@1000 : Record 38;
      GetReceiptLines@1003 : TestPage 5709;
    BEGIN
      // Verify Filter on Get Receipt Lines page filtered according to Quantity.

      // Setup: Post the Purchase Order.
      Initialize;
      PartiallyPostPurchaseOrder(PurchaseHeader);

      // Exercise: Open Get Receipt Lines page.
      GetReceiptLines.OPENEDIT;

      // Verify: Verify Quantity Filter on Get Receipt Lines page, Verification done in the QuantityFilterUsingGetReceiptLinesPageHandler page handler.
    END;

    [Test]
    [HandlerFunctions(InvokeGetReceiptLinesPageHandler,MessageHandler)]
    PROCEDURE PostPurchaseInvoiceAfterQuantityFilterOnGetReceiptLine@75();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchInvHeader@1012 : Record 122;
      GetReceiptLines@1003 : TestPage 5709;
      DocumentNo@1011 : Code[20];
    BEGIN
      // Verify G/L Entry for Posted Purchase Invoice after Get Receipt Line on Purchase Invoice.

      // Setup: Post the Purchase Order and open Get Receipt Lines page.
      Initialize;
      PartiallyPostPurchaseOrder(PurchaseHeader);
      GetReceiptLines.OPENEDIT;

      // Exercise: Post the Purchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Value on G/L Entry.
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      VerifyGLEntry(DocumentNo,PurchInvHeader."Amount Including VAT");
    END;

    [Test]
    PROCEDURE PurchInvoiceWithoutPriceInclVAT@106();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1002 : Record 122;
      PurchaseLineDiscount@1003 : Record 7014;
      PostedDocumentNo@1004 : Code[20];
      Amount@1005 : Decimal;
    BEGIN
      // Verify GL Entry after post Purhcase Invoice without Price Including VAT.
      Initialize;
      SetupLineDiscount(PurchaseLineDiscount);
      CreatePurchInvWithPricesIncludingVAT(PurchaseHeader,PurchaseLineDiscount,FALSE);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      Amount := PurchaseLine."Line Discount Amount" + PurchaseLine."Line Discount Amount" * PurchaseLine."VAT %" / 100;

      // Exercise.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify GL Entry after post Purhcase Invoice.
      PurchInvHeader.GET(PostedDocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      VerifyGLEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT" + Amount);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithPriceInclVAT@107();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchInvHeader@1002 : Record 122;
      PurchaseLineDiscount@1003 : Record 7014;
      PostedDocumentNo@1004 : Code[20];
    BEGIN
      // Verify GL Entry after post Purhcase Invoice with Price Including VAT.
      Initialize;
      SetupLineDiscount(PurchaseLineDiscount);
      CreatePurchInvWithPricesIncludingVAT(PurchaseHeader,PurchaseLineDiscount,TRUE);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");

      // Exercise.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify GL Entry after post Purhcase Invoice.
      PurchInvHeader.GET(PostedDocumentNo);
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      VerifyGLEntry(PostedDocumentNo,PurchInvHeader."Amount Including VAT" + PurchaseLine."Line Discount Amount");
    END;

    [Test]
    PROCEDURE DueDateOnPurchaseCreditMemoAfterCopyDocument@110();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Due Date is calculated on Purchase Credit memo after running Copy Purchase Document Report.
      DueDateOnPurchaseDocumentAfterCopyDocument(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE DueDateOnPurchaseReturnOrderAfterCopyDocument@115();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Due Date is calculated on Purchase Return Order after running Copy Purchase Document Report.
      DueDateOnPurchaseDocumentAfterCopyDocument(PurchaseHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceLineWhiteLocationQtyError@94();
    BEGIN
      // Unit test
      ASSERTERROR PurchDocLineQtyValidation;
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,WhseReceiveIsRequiredErr) > 0,STRSUBSTNO(WrongErrorReturnedErr,GETLASTERRORTEXT));
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceLineWithJobAndJobTask@96();
    VAR
      PurchaseLine@1002 : Record 39;
      JobNo@1000 : Code[10];
      JobTaskNo@1001 : Code[10];
    BEGIN
      // [FEATURE] [Dimension] [Job]
      // [SCENARIO 376908] Purchase Line's global dim values are updated after validate Job Task No.
      Initialize;
      UpdateGlobalDims;

      // [GIVEN] Job "X" with global dim1 value = "D1". Job task "Y" with global dim2 value = "D2".
      CreateJobAndJobTaskWithDimensions(JobNo,JobTaskNo);
      // [GIVEN] Purchase Line with "Job No." = "X"
      CreatePurchaseInvoiceWithJob(PurchaseLine,JobNo);

      // [WHEN] Validate PurchaseLine."Job Task No." = "Y"
      PurchaseLine.VALIDATE("Job Task No.",JobTaskNo);

      // [THEN] PurchaseLine."Shortcut Dimension 1 Code" =  "D1"
      // [THEN] PurchaseLine."Shortcut Dimension 2 Code" =  "D2"
      // [THEN] PurchaseLine."Dimension Set ID" = DimensionSetEntry."Dimension Set ID", where DimensionSetEntry is linked to "D1", "D2"
      VerifyPurchaseLineDimensions(PurchaseLine,JobNo,JobTaskNo);
    END;

    [Test]
    PROCEDURE DeleteLineWithExtendedTextInPurchaseOrder@248();
    VAR
      Item@1004 : Record 27;
      PurchHeader@1006 : Record 38;
      PurchLine@1001 : Record 39;
      PurchCalcDiscByType@1003 : Codeunit 66;
    BEGIN
      // [FEATURE] [Extended Text] [Purchase Order] [Invoice Discount]
      // [SCENARIO 363756] Purchase Line is deleted from Purchase Order when there is Extended Text and "Calc Inv. Discount" is TRUE
      Initialize;
      UpdatePurchasePayablesSetupCalcInvDisc(TRUE);

      // [GIVEN] Vendor and Item "X" with Extended Text
      CreateItemAndExtendedText(Item);

      // [GIVEN] Purchase Header
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,'');

      // [GIVEN] Purchase Line with Item, second Purchase Line with Extended Text
      CreatePurchLineWithExtendedText(PurchHeader,Item."No.");
      // [GIVEN] Purchase - Calc Discount By Type calculation
      PurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,PurchHeader);
      COMMIT; // Commit to close transaction.

      // [WHEN] Delete Purchase Line with Item
      DeletePurchaseLine(PurchHeader."No.",PurchLine.Type::Item,Item."No.");

      // [THEN] Purchase Lines with Extended Text of "X" deleted
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETRANGE("No.",Item."No.");
      Assert.RecordIsEmpty(PurchLine);
    END;

    [Test]
    PROCEDURE DeleteLineWithExtendedTextInPurchaseOrderWithShptLines@79();
    VAR
      PurchHeader@1000 : Record 38;
      InvoicePurchaseHeader@1001 : Record 38;
      PurchRcptLine@1004 : Record 121;
      PurchLine@1009 : Record 39;
      Item@1007 : Record 27;
      PurchGetReceipt@1003 : Codeunit 74;
      PurchCalcDiscByType@1008 : Codeunit 66;
      LineDiscAmt@1002 : Decimal;
      VATPercent@1005 : Decimal;
    BEGIN
      // [FEATURE] [Extended Text] [Purchase Order] [Invoice Discount]
      // [SCENARIO 363756] Purchase Line is deleted from Purchase Order when there is Extended Text and Receipt Lines
      Initialize;
      UpdatePurchasePayablesSetupCalcInvDisc(TRUE);
      LineDiscAmt := LibraryRandom.RandDec(10,2);

      // [GIVEN] Received purchase order with line discount OrderLineDiscAmt and Prices Including VAT = OrderPricesInclVAT
      CreateReceivePurchOrderWithPricesInclVATAndLineDisc(
        PurchHeader,VATPercent,LineDiscAmt,FALSE);
      // [GIVEN] Purchase Invoice with Prices Including VAT = InvPricesInclVAT
      CreatePurchDocWithPricesInclVAT(
        InvoicePurchaseHeader,InvoicePurchaseHeader."Document Type"::Invoice,PurchHeader."Buy-from Vendor No.",TRUE);
      // [GIVEN] Posted Receipt Line associated with Order
      FindRcptLine(PurchRcptLine,PurchHeader."No.");
      PurchGetReceipt.SetPurchHeader(InvoicePurchaseHeader);

      // [WHEN] Invoice Line created from Receipt Line
      PurchGetReceipt.CreateInvLines(PurchRcptLine);

      // [GIVEN] Item "X" with Extended Text
      CreateItemAndExtendedText(Item);
      // [GIVEN] Purchase Line with Item, second Purchase Line with Extended Text
      CreatePurchLineWithExtendedText(InvoicePurchaseHeader,Item."No.");

      // [GIVEN] Purchase - Calc Discount By Type calculation
      PurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,InvoicePurchaseHeader);
      COMMIT; // Commit to close transaction.

      // [WHEN] Delete Purchase Line with Item
      DeletePurchaseLine(InvoicePurchaseHeader."No.",PurchLine.Type::Item,Item."No.");

      // [THEN] Line Discount Amount on Invoice is InvLineDiscAmt
      VerifyLineDiscAmountInLine(InvoicePurchaseHeader,ROUND(LineDiscAmt * (1 + VATPercent / 100)));
    END;

    [Test]
    PROCEDURE LineDiscInPriceInclVATInvWithRcptLinesFromPriceExclVATOrder@191();
    VAR
      PurchHeader@1000 : Record 38;
      InvoicePurchaseHeader@1005 : Record 38;
      LineDiscAmt@1002 : Decimal;
      VATPercent@1001 : Decimal;
    BEGIN
      // [FEATURE] [Discount]
      // [SCENARIO 360474] Line Discount Amount of with Prices Incl. VAT generated by GetRcptLines function from order with Prices Excl. VAT is increased by VAT %
      Initialize;
      LineDiscAmt := LibraryRandom.RandDec(10,2);

      // [GIVEN] Received purchase order with line discount OrderLineDiscAmt and Prices Including VAT = FALSE
      CreateReceivePurchOrderWithPricesInclVATAndLineDisc(
        PurchHeader,VATPercent,LineDiscAmt,FALSE);

      // [WHEN] Invoice Line created from Receipt Line associated with Order
      LineDiscInInvWithDiffPricesInclVATThenSourceOrder(
        PurchHeader,InvoicePurchaseHeader,TRUE);

      // [THEN] Line Discount Amount on Invoice is InvLineDiscAmt
      VerifyLineDiscAmountInLine(InvoicePurchaseHeader,ROUND(LineDiscAmt * (1 + VATPercent / 100)));
    END;

    [Test]
    PROCEDURE LineDiscInPriceExclVATInvWithRcptLinesFromPriceInclVATOrder@141();
    VAR
      PurchHeader@1001 : Record 38;
      InvoicePurchaseHeader@1005 : Record 38;
      LineDiscAmt@1000 : Decimal;
      VATPercent@1002 : Decimal;
    BEGIN
      // [FEATURE] [Discount]
      // [SCENARIO 360474] Line Discount Amount of with Prices Excl. VAT generated by GetRcptLines function from order with Prices Incl. VAT is decreased by VAT %
      Initialize;
      LineDiscAmt := LibraryRandom.RandDec(10,2);

      // [GIVEN] Received purchase order with line discount OrderLineDiscAmt and Prices Including VAT = TRUE
      CreateReceivePurchOrderWithPricesInclVATAndLineDisc(
        PurchHeader,VATPercent,LineDiscAmt,TRUE);

      // [WHEN] Invoice Line created from Receipt Line associated with Order
      LineDiscInInvWithDiffPricesInclVATThenSourceOrder(
        PurchHeader,InvoicePurchaseHeader,FALSE);

      // [THEN] Line Discount Amount on Invoice is InvLineDiscAmt
      VerifyLineDiscAmountInLine(InvoicePurchaseHeader,ROUND(LineDiscAmt / (1 + VATPercent / 100)));
    END;

    [Test]
    PROCEDURE OutstandingAmountForPurchaseOrderLineWithZeroQuantity@112();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [SCENARIO] Outstanding Amounts should be 0 after changing Quanity to 0 in Sales Line
      Initialize;

      // [GIVEN] Create Sales Invoice Line with non zero Quantity and Outstanding amount
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);

      // [THEN] Outstanding Amounts should be non zero
      Assert.AreNotEqual(0,PurchaseLine."Outstanding Amount",'should be non zero');
      Assert.AreNotEqual(0,PurchaseLine."Outstanding Amount (LCY)",'should be non zero');
      Assert.AreNotEqual(0,PurchaseLine."Outstanding Amt. Ex. VAT (LCY)",'should be non zero');

      // [WHEN] Set Quantity as zero
      PurchaseLine.VALIDATE(Quantity,0);

      // [THEN] Outstanding Amounts should be 0
      Assert.AreEqual(0,PurchaseLine."Outstanding Amount",'should be zero');
      Assert.AreEqual(0,PurchaseLine."Outstanding Amount (LCY)",'should be zero');
      Assert.AreEqual(0,PurchaseLine."Outstanding Amt. Ex. VAT (LCY)",'should be zero');
    END;

    [Test]
    PROCEDURE UpdateUnitCostWithPurchPriceWhenChangeVendorNo@134();
    VAR
      PurchHeader@1000 : Record 38;
      PurchLine@1001 : Record 39;
      PurchPrice@1002 : Record 7012;
    BEGIN
      // [FEATURE] [Purchase Price] [UT]
      // [SCENARIO 375443] Direct Unit Cost should be updated when change Buy-From Vendor No. with Purchase Prices defined

      Initialize;
      // [GIVEN] Purchase Invoice with Vendor "A", Item "X" and "Direct Unit Cost" = 100
      CreatePurchaseHeader(PurchHeader,LibraryPurchase.CreateVendorNo,PurchHeader."Document Type"::Invoice);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);

      // [GIVEN] Vendor "B" with Purchase Price defined: Item "X", "Direct Unit Cost" = 150
      LibraryCosting.CreatePurchasePrice(
        PurchPrice,LibraryPurchase.CreateVendorNo,PurchLine."No.",0D,'','','',0);
      PurchPrice.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchPrice.MODIFY(TRUE);
      PurchHeader.SetHideValidationDialog(TRUE);

      // [WHEN] Change "Buy From Vendor No." from "A" to "B" in Purchase Invoice
      PurchHeader.VALIDATE("Buy-from Vendor No.",PurchPrice."Vendor No.");

      // [THEN] "Direct Unit Cost" in Purchase Line is 150
      PurchLine.FIND;
      PurchLine.TESTFIELD("Direct Unit Cost",PurchPrice."Direct Unit Cost");
    END;

    [Test]
    PROCEDURE UnitCostNotUpdatedWithoutPurchPriceWhenChangeVendorNo@131();
    VAR
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
      ExpectedDirectUnitCost@1000 : Decimal;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 375443] Direct Unit Cost should not be updated when change Buy-From Vendor No. without Purchase Prices defined

      Initialize;
      // [GIVEN] Purchase Invoice with Vendor "A", Item "X" and "Direct Unit Cost" = 100
      CreatePurchaseHeader(PurchHeader,LibraryPurchase.CreateVendorNo,PurchHeader."Document Type"::Invoice);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);
      ExpectedDirectUnitCost := PurchLine."Direct Unit Cost";
      PurchHeader.SetHideValidationDialog(TRUE);

      // [WHEN] Change "Buy From Vendor No." from "A" to "B" in Purchase Invoice
      PurchHeader.VALIDATE("Buy-from Vendor No.",LibraryPurchase.CreateVendorNo);

      // [THEN] "Direct Unit Cost" in Purchase Line is 100
      PurchLine.FIND;
      PurchLine.TESTFIELD("Direct Unit Cost",ExpectedDirectUnitCost);
    END;

    [Test]
    [HandlerFunctions(ConfirmCopyDocDateOrderHandlerVerify)]
    PROCEDURE CopyPostedInvShptDateOrderNonConfirm@154();
    VAR
      PurchHeader@1000 : Record 38;
      PurchRcptHeader@1007 : Record 120;
      VendorNo@1009 : Code[20];
      PostedDocNo@1004 : Code[20];
      InitialPostingDate@1006 : Date;
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Purchase Invoice and Receipt with Date Order enabled and user not accepted confirmation
      Initialize;

      // [GIVEN] Posted Purchase Invoice with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimplePurchaseDocument(PurchHeader."Document Type"::Invoice,VendorNo);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Purchase Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreatePurchaseHeaderWithPostingNo(
        PurchHeader,LibraryPurchase.CreateVendorNo,
        LibraryRandom.RandInt(5),PostedDocNo);
      InitialPostingDate := PurchHeader."Posting Date";
      LibraryVariableStorage.Enqueue(FALSE);

      // [WHEN] Run Copy Document from Posted Purchase Invoice to Purchase Document with Include Header = TRUE
      CopyDocument(PurchHeader,DocType::"Posted Invoice",PostedDocNo);
      PurchHeader.FIND;

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      Assert.AreEqual(InitialPostingDate,PurchHeader."Posting Date",DocumentShouldNotBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Purchase Receipt to Purchase Document with Include Header = TRUE
      PurchRcptHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchRcptHeader.FINDFIRST;
      LibraryVariableStorage.Enqueue(FALSE);
      CopyDocument(PurchHeader,DocType::"Posted Receipt",PurchRcptHeader."No.");
      PurchHeader.FIND;

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      Assert.AreEqual(InitialPostingDate,PurchHeader."Posting Date",DocumentShouldNotBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmCopyDocDateOrderHandlerVerify)]
    PROCEDURE CopyPostedCrMemoRetRecDateOrderNonConfirm@196();
    VAR
      PurchHeader@1000 : Record 38;
      ReturnShptHeader@1006 : Record 6650;
      VendorNo@1005 : Code[20];
      PostedDocNo@1004 : Code[20];
      InitialPostingDate@1009 : Date;
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Purchase Credit Memo and Return Shipment with Date Order enabled and user not accepted confirmation
      Initialize;

      // [GIVEN] Posted Credit Memo with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimplePurchaseDocument(PurchHeader."Document Type"::"Return Order",VendorNo);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Purchase Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreatePurchaseHeaderWithPostingNo(
        PurchHeader,LibraryPurchase.CreateVendorNo,
        LibraryRandom.RandInt(5),PostedDocNo);
      InitialPostingDate := PurchHeader."Posting Date";
      LibraryVariableStorage.Enqueue(FALSE);

      // [WHEN] Run Copy Document from Posted Purchase Cr. Memo to Purchase Document with Include Header = TRUE
      CopyDocument(PurchHeader,DocType::"Posted Credit Memo",PostedDocNo);

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      PurchHeader.FIND;
      Assert.AreEqual(InitialPostingDate,PurchHeader."Posting Date",DocumentShouldNotBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Return Shipment to Purchase Document with Include Header = TRUE
      ReturnShptHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      ReturnShptHeader.FINDFIRST;
      LibraryVariableStorage.Enqueue(FALSE);
      CopyDocument(PurchHeader,DocType::"Posted Return Shipment",ReturnShptHeader."No.");
      PurchHeader.FIND;

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      Assert.AreEqual(InitialPostingDate,PurchHeader."Posting Date",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmCopyDocDateOrderHandlerVerify)]
    PROCEDURE CopyQuoteDateOrderNonConfirm@155();
    VAR
      PurchHeaderSrc@1000 : Record 38;
      PurchHeaderDst@1008 : Record 38;
      VendorNo@1005 : Code[20];
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Purchase Quote with Date Order enabled and user not accepted confirmation
      Initialize;

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Purchase Quote with Posting Date = "X"
      LibraryPurchase.CreatePurchHeader(
        PurchHeaderSrc,PurchHeaderSrc."Document Type"::Quote,LibraryPurchase.CreateVendorNo);

      // [GIVEN] Purchase Document with Posting Date = "X" + 1 day and Posting No. assigned
      VendorNo := LibraryPurchase.CreateVendorNo;
      CreatePurchaseHeaderWithPostingNo(
        PurchHeaderDst,VendorNo,LibraryRandom.RandInt(5),
        LibraryUtility.GenerateRandomCode(PurchHeaderDst.FIELDNO("Posting No."),DATABASE::"Purchase Header"));
      LibraryVariableStorage.Enqueue(FALSE);

      // [WHEN] Run Copy Document from Purchase Quote to Purchase Document with Include Header = TRUE
      CopyDocument(PurchHeaderDst,DocType::Quote,PurchHeaderSrc."No.");

      // [THEN] Confirmation dialog appears with warning and Document not copied (user pressed cancel)
      PurchHeaderDst.FIND;
      Assert.AreEqual(VendorNo,PurchHeaderDst."Buy-from Vendor No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyPostedInvShptDateOrderConfirm@164();
    VAR
      PurchHeader1@1000 : Record 38;
      PurchHeader2@1008 : Record 38;
      PurchRcptHeader@1007 : Record 120;
      PostedDocNo@1004 : Code[20];
      VendorNoSrc@1006 : Code[20];
      VendorNoDst@1010 : Code[20];
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Purchase Invoice and Receipt with Date Order enabled and user accepted confirmation
      Initialize;

      // [GIVEN] Posted Purchase Invoice with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimplePurchaseDocument(PurchHeader1."Document Type"::Invoice,VendorNoSrc);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Purchase Document with Posting Date = "X" + 1 day and Posting No. assigned
      VendorNoDst := LibraryPurchase.CreateVendorNo;
      CreatePurchaseHeaderWithPostingNo(PurchHeader1,VendorNoDst,LibraryRandom.RandInt(5),PostedDocNo);
      // [WHEN] Run Copy Document from Posted Purchase Invoice to Purchase Document with Include Header = TRUE
      CopyDocument(PurchHeader1,DocType::"Posted Invoice",PostedDocNo);
      PurchHeader1.FIND;

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      Assert.AreEqual(VendorNoSrc,PurchHeader1."Buy-from Vendor No.",DocumentShouldBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Purchase Receipt to Purchase Document with Include Header = TRUE
      PurchRcptHeader.SETRANGE("Buy-from Vendor No.",VendorNoSrc);
      PurchRcptHeader.FINDFIRST;
      CreatePurchaseHeaderWithPostingNo(PurchHeader2,VendorNoDst,LibraryRandom.RandInt(5),PostedDocNo);
      CopyDocument(PurchHeader2,DocType::"Posted Receipt",PurchRcptHeader."No.");
      PurchHeader2.FIND;

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      Assert.AreEqual(VendorNoSrc,PurchHeader2."Buy-from Vendor No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyPostedCrMemoRetRecDateOrderConfirm@162();
    VAR
      PurchHeader1@1000 : Record 38;
      PurchHeader2@1008 : Record 38;
      ReturnShipmentHeader@1006 : Record 6650;
      VendorNo@1009 : Code[20];
      PostedDocNo@1004 : Code[20];
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Posted Purchase Credit Memo and Return Shipment with Date Order enabled and user accepted confirmation
      Initialize;

      // [GIVEN] Posted Credit Memo with Posting Date = "X"
      PostedDocNo :=
        CreateAndPostSimplePurchaseDocument(PurchHeader1."Document Type"::"Return Order",VendorNo);

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Purchase Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreatePurchaseHeaderWithPostingNo(
        PurchHeader1,LibraryPurchase.CreateVendorNo,LibraryRandom.RandInt(5),PostedDocNo);

      // [WHEN] Run Copy Document from Posted Purchase Cr. Memo to Purchase Document with Include Header = TRUE
      CopyDocument(PurchHeader1,DocType::"Posted Credit Memo",PostedDocNo);

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      PurchHeader1.FIND;
      Assert.AreEqual(VendorNo,PurchHeader1."Buy-from Vendor No.",DocumentShouldBeCopiedErr);

      // [WHEN] Run Copy Document from Posted Return Shipment to Purchase Document with Include Header = TRUE
      CreatePurchaseHeaderWithPostingNo(
        PurchHeader2,LibraryPurchase.CreateVendorNo,LibraryRandom.RandInt(5),PostedDocNo);

      ReturnShipmentHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      ReturnShipmentHeader.FINDFIRST;
      CopyDocument(PurchHeader2,DocType::"Posted Return Shipment",ReturnShipmentHeader."No.");
      PurchHeader2.FIND;

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      Assert.AreEqual(VendorNo,PurchHeader2."Buy-from Vendor No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyQuoteDateOrderConfirm@158();
    VAR
      PurchHeaderSrc@1000 : Record 38;
      PurchHeaderDst@1008 : Record 38;
      OldDateOrder@1001 : Boolean;
    BEGIN
      // [FEATURE] [Date Order]
      // [SCENARIO 375365] Copy Document from Purchase Quote with Date Order enabled and user accepted confirmation
      Initialize;

      // [GIVEN] Posted Invoice Nos. has "Date Order" = TRUE
      OldDateOrder := SetNoSeriesDateOrder(TRUE);

      // [GIVEN] Purchase Quote with Posting Date = "X"
      LibraryPurchase.CreatePurchHeader(
        PurchHeaderSrc,PurchHeaderSrc."Document Type"::Quote,LibraryPurchase.CreateVendorNo);

      // [GIVEN] Purchase Document with Posting Date = "X" + 1 day and Posting No. assigned
      CreatePurchaseHeaderWithPostingNo(
        PurchHeaderDst,LibraryPurchase.CreateVendorNo,LibraryRandom.RandInt(5),
        LibraryUtility.GenerateRandomCode(PurchHeaderDst.FIELDNO("Posting No."),DATABASE::"Purchase Header"));

      // [WHEN] Run Copy Document from Purchase Quote to Purchase Document with Include Header = TRUE
      CopyDocument(PurchHeaderDst,DocType::Quote,PurchHeaderSrc."No.");

      // [THEN] Confirmation dialog appears with warning and Document is copied after user confirmation
      PurchHeaderDst.FIND;
      Assert.AreEqual(
        PurchHeaderSrc."Buy-from Vendor No.",PurchHeaderDst."Buy-from Vendor No.",DocumentShouldBeCopiedErr);

      SetNoSeriesDateOrder(OldDateOrder);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CopyDocument@126(PurchHeader@1000 : Record 38;DocumentType@1004 : Option;DocumentNo@1003 : Code[20]);
    BEGIN
      LibraryPurchase.CopyPurchaseDocument(PurchHeader,DocumentType,DocumentNo,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Last Direct Cost.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemAndExtendedText@97(VAR Item@1001 : Record 27) : Text[50];
    VAR
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1002 : Record 280;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);

      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      UpdateTextInExtendedTextLine(ExtendedTextLine,Item."No.");
      EXIT(ExtendedTextLine.Text);
    END;

    LOCAL PROCEDURE CreateAndModifyItem@59(VATProductPostingGroup@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));  // Using RANDOM value for Last Direct Cost.
      Item.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@41(VAR PurchaseLine@1002 : Record 39;Type@1003 : Option;CurrencyCode@1005 : Code[10];VATPostingSetup@1006 : Record 325) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
      No@1004 : Code[20];
      VendorNo@1001 : Code[20];
    BEGIN
      VendorNo := CreateAndModifyVendor(CurrencyCode,VATPostingSetup."VAT Bus. Posting Group");

      CASE Type OF
        PurchaseLine.Type::Item:
          No := CreateAndModifyItem(VATPostingSetup."VAT Prod. Posting Group");
        PurchaseLine.Type::"Fixed Asset":
          No := CreateFixedAssetWithGroup(VATPostingSetup);
      END;

      // Use Random values for Quantity and Direct Unit Cost.
      CreatePurchaseHeader(PurchaseHeader,VendorNo,PurchaseHeader."Document Type"::Invoice);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSimplePurchaseDocument@118(DocType@1001 : Option;VAR VendorNo@1002 : Code[20]) : Code[20];
    VAR
      PurchHeader@1000 : Record 38;
      PurchLine@1003 : Record 39;
    BEGIN
      VendorNo := LibraryPurchase.CreateVendorNo;
      CreatePurchaseHeader(PurchHeader,VendorNo,DocType);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndReceivePurchaseDocument@73(BuyFromVendorNo@1004 : Code[20];PayToVendorNo@1005 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Create Purchase document using Random Quantity.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,BuyFromVendorNo,PayToVendorNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateFixedAssetWithGroup@37(VATPostingSetup@1004 : Record 325) : Code[20];
    VAR
      FixedAsset@1000 : Record 5600;
      FAPostingGroup@1002 : Record 5606;
      FADepreciationBook@1003 : Record 5612;
    BEGIN
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      UpdateFAPostingGroup(FAPostingGroup,VATPostingSetup);
      FixedAsset.VALIDATE("FA Posting Group",FAPostingGroup.Code);
      FixedAsset.MODIFY(TRUE);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset);
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@47(VAR FADepreciationBook@1000 : Record 5612;FixedAsset@1001 : Record 5600);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",LibraryFixedAsset.GetDefaultDeprBook);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Random Number Generator for Ending date.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.VALIDATE("FA Posting Group",FixedAsset."FA Posting Group");
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@35(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithPostingNo@121(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20];PostingDateShift@1002 : Integer;PostingNo@1003 : Code[20]);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,VendorNo,PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Posting Date",PurchaseHeader."Posting Date" + PostingDateShift);
      PurchaseHeader.VALIDATE("Posting No.",PostingNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoice@10(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VendorNo@1003 : Code[20]);
    VAR
      Counter@1002 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);

      // Create Multiple purchase line and using RANDOM for Quantity.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(10) DO
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreatePurchInvWithPricesIncludingVAT@92(VAR PurchaseHeader@1000 : Record 38;PurchaseLineDiscount@1002 : Record 7014;PricesIncludingVAT@1003 : Boolean);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseLineDiscount."Vendor No.",PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.VALIDATE("Prices Including VAT",PricesIncludingVAT);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,PurchaseLineDiscount."Item No.",
        PurchaseLineDiscount."Minimum Quantity" + LibraryRandom.RandInt(10));  // Take Quantity greater than Purchase Line Discount Minimum Quantity.
    END;

    LOCAL PROCEDURE CreatePurchaseLine@50(VAR PurchaseLine@1005 : Record 39;PurchaseHeader@1004 : Record 38;InvDiscountAmount@1000 : Decimal);
    VAR
      QtyToReceive@1001 : Decimal;
    BEGIN
      // Using RANDOM value for Quantity and Direct Unit Cost. Amount greater than 100 needed to avoid rounding issue.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,2 * LibraryRandom.RandInt(20));
      QtyToReceive := PurchaseLine.Quantity / 2; // Taking here 2 for partial posting.
      // Used in QuantityOnGetReceiptLinesPageHandler, QuantityFilterUsingGetReceiptLinesPageHandler and InvokeGetReceiptLinesPageHandler
      LibraryVariableStorage.Enqueue(QtyToReceive);
      PurchaseLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchaseLine.VALIDATE("Direct Unit Cost",100 + LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Inv. Discount Amount",InvDiscountAmount);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchLineWithReturnAmt@63(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;Type@1002 : Option;No@1003 : Code[20]) : Decimal;
    BEGIN
      // Take random values for Quantity and Unit Cost Amount greater than 100 needed to avoid rounding issue.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,10 + LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",100 + LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(PurchaseLine."Line Amount");
    END;

    LOCAL PROCEDURE CreatePurchLineWithExtendedText@259(PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
      TransferExtendedText@1003 : Codeunit 378;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
      TransferExtendedText.PurchCheckIfAnyExtText(PurchaseLine,TRUE);
      TransferExtendedText.InsertPurchExtText(PurchaseLine);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@28(VAR PurchaseLine@1001 : Record 39;VAR InvDiscountAmount@1002 : Decimal) DocumentNo : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      InvDiscountAmount := 10 + 10 * LibraryRandom.RandDec(10,2);  // Using RANDOM value for Invoice Discount Amount.
      CreatePurchaseHeader(PurchaseHeader,CreateVendor(''),PurchaseHeader."Document Type"::Order);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,InvDiscountAmount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchDocWithPricesInclVAT@123(VAR PurchHeader@1001 : Record 38;DocType@1003 : Option;VendNo@1002 : Code[20];PricesInclVAT@1000 : Boolean);
    BEGIN
      WITH PurchHeader DO BEGIN
        LibraryPurchase.CreatePurchHeader(
          PurchHeader,DocType,VendNo);
        VALIDATE("Prices Including VAT",PricesInclVAT);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendor@1(CurrencyCode@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTermsCode@114(PaymentTermsCode@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      Vendor.GET(CreateVendor(''));
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateAndModifyVendor@46(CurrencyCode@1000 : Code[10];VATBusinessPostingGroup@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      Vendor.GET(CreateVendor(CurrencyCode));
      Vendor.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceCurrency@19(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39;DocumentType@1003 : Option) : Decimal;
    VAR
      VendorInvoiceDisc@1002 : Record 24;
    BEGIN
      // Take Random Amount for Quantity and Line Discount % in Purchase Line and Zero for Minimum Amount in Invoice Discount.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,SetupInvoiceDiscount(VendorInvoiceDisc,0));
      PurchaseHeader.VALIDATE("Prices Including VAT",TRUE);
      PurchaseHeader.VALIDATE("Currency Code",CreateCurrency);
      PurchaseHeader.MODIFY(TRUE);

      // Take Quantity in Multiple of 2 so that we can take half equal value without Decimal.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10) * 2);
      PurchaseLine.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(VendorInvoiceDisc."Discount %");
    END;

    LOCAL PROCEDURE CreateVendorCard@65() VendorNo : Code[20];
    VAR
      VendorCard@1001 : TestPage 26;
    BEGIN
      VendorCard.OPENNEW;
      VendorCard.Name.ACTIVATE;
      VendorNo := VendorCard."No.".VALUE;
      VendorCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@72(VAR DefaultDimension@1001 : Record 352);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1000 : Record 349;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionVendor(
        DefaultDimension,CreateVendor(''),DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateGLAccount@81() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      VATPostingSetup@1001 : Record 325;
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      FindVATPostingSetup(VATPostingSetup);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Purchase);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateReceiptsAndPurchaseInvoice@74(VAR PurchaseHeader@1000 : Record 38);
    VAR
      Vendor@1002 : Record 23;
      Vendor2@1003 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndReceivePurchaseDocument(Vendor."No.",Vendor."No.");
      LibraryPurchase.CreateVendor(Vendor2);
      CreateAndReceivePurchaseDocument(Vendor2."No.",Vendor2."No.");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@93(VAR PurchaseHeader@1003 : Record 38;DocumentType@1004 : Option;BuyFromVendorNo@1002 : Code[20];PayToVendorNo@1001 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase document using Random Quantity and Direct Unit Cost.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
      PurchaseHeader.VALIDATE("Pay-to Vendor No.",PayToVendorNo);
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,0);  // Using 0 for Invoice Discount.
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@87(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VendorNo@1002 : Code[20];DocumentType@1003 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateReceivePurchOrderWithPricesInclVATAndLineDisc@198(VAR PurchHeader@1000 : Record 38;VAR VATPercent@1003 : Decimal;LineDiscAmt@1005 : Decimal;PricesInclVAT@1002 : Boolean);
    VAR
      PurchLine@1004 : Record 39;
    BEGIN
      WITH PurchHeader DO BEGIN
        CreatePurchDocWithPricesInclVAT(
          PurchHeader,"Document Type"::Order,LibraryPurchase.CreateVendorNo,PricesInclVAT);
        LibraryPurchase.CreatePurchaseLine(
          PurchLine,PurchHeader,PurchLine.Type::Item,LibraryInventory.CreateItemNo,
          LibraryRandom.RandIntInRange(100,1000));
        VATPercent := PurchLine."VAT %";
        PurchLine.VALIDATE("Line Discount Amount",LineDiscAmt);
        PurchLine.MODIFY(TRUE);
        LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLine@268(DocumentNo@1000 : Code[20];Type@1001 : Option;ItemNo@1003 : Code[20]);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      FindPurchaseLineByType(PurchLine,DocumentNo,Type,ItemNo);
      PurchLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DueDateOnPurchaseDocumentAfterCopyDocument@116(PurchaseHeaderDocumentType@1000 : Option);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseHeader2@1598 : Record 38;
      PurchaseLine@1005 : Record 39;
      PaymentTerms@1004 : Record 3;
      PurchaseInvoiceNo@1002 : Code[20];
      DocumentType@1001 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Setup: Create and Post Purchase Order and Create Purchase Document.
      Initialize;
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,CreateVendorWithPaymentTermsCode(PaymentTerms.Code),PurchaseHeader."Document Type"::Order);
      PurchaseInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader2,PurchaseHeaderDocumentType,PurchaseHeader."Buy-from Vendor No.");

      // Exercise: Run Copy Purchase Document Report with Include Header,Recalculate Lines as True.
      PurchaseCopyDocument(PurchaseHeader2,PurchaseInvoiceNo,DocumentType::"Posted Invoice",TRUE);

      // Verify: Verify Due Date on Purchase Header.
      VerifyDueDateOnPurchaseDocumentHeader(PurchaseHeader2,PaymentTerms."Due Date Calculation");
    END;

    LOCAL PROCEDURE FindFixedAsset@56() : Code[20];
    VAR
      FixedAsset@1000 : Record 5600;
    BEGIN
      FixedAsset.SETRANGE(Blocked,FALSE);
      FixedAsset.FINDFIRST;
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE FindGLEntry@39(VAR GLEntry@1000 : Record 17;DocumentNo@1002 : Code[20];GLAccountNo@1001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@67(VAR PurchaseLine@1002 : Record 39;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETFILTER(Type,'<>''''');
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLineByType@245(VAR PurchLine@1000 : Record 39;DocumentNo@1001 : Code[20];Type@1002 : Option;ItemNo@1003 : Code[20]);
    BEGIN
      PurchLine.SETRANGE("Document No.",DocumentNo);
      PurchLine.SETRANGE(Type,Type);
      PurchLine.SETRANGE("No.",ItemNo);
      PurchLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@42(VAR VendorLedgerEntry@1000 : Record 25;DocumentNo@1002 : Code[20];DocumentType@1001 : Option);
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.CALCFIELDS(Amount);
    END;

    LOCAL PROCEDURE FindVATPostingSetup@89(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    LOCAL PROCEDURE FindPostedPurchaseInvoiceNo@77(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;
      EXIT(PurchInvHeader."No.");
    END;

    LOCAL PROCEDURE FindPurchRcptHeaderNo@168(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      PurchRcptHeader@1001 : Record 120;
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
      EXIT(PurchRcptHeader."No.");
    END;

    LOCAL PROCEDURE FindICPartner@64() : Code[20];
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      ICPartner.SETRANGE(Blocked,FALSE);
      ICPartner.FINDFIRST;
      EXIT(ICPartner.Code);
    END;

    LOCAL PROCEDURE FindICGLAccount@82() : Code[20];
    VAR
      ICGLAccount@1000 : Record 410;
    BEGIN
      ICGLAccount.SETRANGE("Account Type",ICGLAccount."Account Type"::Posting);
      ICGLAccount.SETRANGE(Blocked,FALSE);
      ICGLAccount.FINDFIRST;
      EXIT(ICGLAccount."No.");
    END;

    LOCAL PROCEDURE FilterQuantityOnGetReceiptLines@91(VAR GetReceiptLines@1000 : TestPage 5709;DocumentNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      GetReceiptLines.FILTER.SETFILTER("Document No.",DocumentNo);
      GetReceiptLines.FILTER.SETFILTER(Quantity,FORMAT(Quantity));
      GetReceiptLines.Quantity.ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE FindRcptLine@192(VAR PurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20]);
    VAR
      PurchRcptHeader@1002 : Record 120;
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE OpenPurchaseInvoiceAndGetReceiptLine@62(No@1000 : Code[20]);
    VAR
      PurchaseInvoice@1001 : TestPage 51;
    BEGIN
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.FILTER.SETFILTER("No.",No);
      PurchaseInvoice.PurchLines.GetReceiptLines.INVOKE;
    END;

    LOCAL PROCEDURE PartiallyPostPurchaseOrder@100(VAR PurchaseHeader@1011 : Record 38);
    VAR
      VATPostingSetup@1002 : Record 325;
      VendorNo@1003 : Code[20];
    BEGIN
      // Create and Receive two Purchase Orders using same Vendor and create Purchase Invoice.

      // Using global variables(PostedDocumentNo and PostedDocumentNo2) due to need in verification.
      FindVATPostingSetup(VATPostingSetup);
      VendorNo := CreateAndModifyVendor('',VATPostingSetup."VAT Bus. Posting Group");
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo,VendorNo);
      LibraryVariableStorage.Enqueue(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));

      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.");
      LibraryVariableStorage.Enqueue(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);

      // Open created Purchase Invoice page and do Get Receipt Line.
      OpenPurchaseInvoiceAndGetReceiptLine(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE PurchaseCopyDocument@80(PurchaseHeader@1000 : Record 38;DocumentNo@1003 : Code[20];DocumentType@1002 : Option;ReCalculateLines@1004 : Boolean);
    VAR
      CopyPurchaseDocument@1001 : Report 492;
    BEGIN
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(DocumentType,DocumentNo,TRUE,ReCalculateLines);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    LOCAL PROCEDURE UpdateFAPostingGroup@44(FAPostingGroup@1000 : Record 5606;VATPostingSetup@1001 : Record 325);
    VAR
      FAPostingGroup2@1002 : Record 5606;
      GLAccount@1004 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      FAPostingGroup2.SETFILTER("Acquisition Cost Account",'<>''''');
      FAPostingGroup2.FINDFIRST;
      FAPostingGroup.TRANSFERFIELDS(FAPostingGroup2,FALSE);

      GLAccountNo :=
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase);
      FAPostingGroup.VALIDATE("Acquisition Cost Account",GLAccountNo);
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWarehouseLocation@17(RequireReceive@1003 : Boolean) : Code[10];
    VAR
      Location@1002 : Record 14;
    BEGIN
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE UpdateTextInExtendedTextLine@99(VAR ExtendedTextLine@1000 : Record 280;TextLineText@1001 : Text[50]);
    BEGIN
      ExtendedTextLine.VALIDATE(Text,TextLineText);
      ExtendedTextLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseAndPayableSetup@18(ReceiptOnInvoice@1002 : Boolean);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      // Update Purchase and Payable Setup to generate Posted Purchase Receipt document from Purchase Invoice.
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Receipt on Invoice",ReceiptOnInvoice);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchasePayablesSetupCalcInvDisc@253(CalcInvDiscount@1000 : Boolean);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Calc. Inv. Discount",CalcInvDiscount);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDims@117();
    VAR
      Dimension@1000 : ARRAY [2] OF Record 348;
    BEGIN
      IF (LibraryERM.GetGlobalDimensionCode(1) = '') OR (LibraryERM.GetGlobalDimensionCode(2) = '') THEN BEGIN
        LibraryDimension.CreateDimension(Dimension[1]);
        LibraryDimension.CreateDimension(Dimension[2]);
        LibraryDimension.ChangeGlobalDimensions(Dimension[1].Code,Dimension[2].Code);
      END;
    END;

    LOCAL PROCEDURE SetNoSeriesDateOrder@206(DateOrder@1000 : Boolean) OldDateOrder : Boolean;
    VAR
      PurchasesPayablesSetup@1002 : Record 312;
      NoSeries@1001 : Record 308;
    BEGIN
      PurchasesPayablesSetup.GET;
      NoSeries.GET(PurchasesPayablesSetup."Posted Invoice Nos.");
      OldDateOrder := NoSeries."Date Order";
      NoSeries.VALIDATE("Date Order",DateOrder);
      NoSeries.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupInvoiceDiscount@31(VAR VendorInvoiceDisc@1001 : Record 24;MinimumAmount@1000 : Decimal) : Code[20];
    BEGIN
      // Required Random Value for "Minimum Amount" and "Discount %" fields value is not important.
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,CreateVendor(''),'',MinimumAmount);
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandInt(10));
      VendorInvoiceDisc.MODIFY(TRUE);
      EXIT(VendorInvoiceDisc.Code);
    END;

    LOCAL PROCEDURE SetupLineDiscount@22(VAR PurchaseLineDiscount@1000 : Record 7014);
    VAR
      GeneralPostingSetup@1005 : Record 252;
      Item@1002 : Record 27;
      VATPostingSetup@1003 : Record 325;
      Vendor@1004 : Record 23;
    BEGIN
      // Required Random Value for "Minimum Quantity" and "Line Discount %" fields value is not important.
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      Item.GET(CreateAndModifyItem(VATPostingSetup."VAT Prod. Posting Group"));
      LibraryERM.CreateLineDiscForVendor(
        PurchaseLineDiscount,Item."No.",CreateAndModifyVendor('',VATPostingSetup."VAT Bus. Posting Group"),WORKDATE,'','',
        Item."Base Unit of Measure",LibraryRandom.RandInt(10));
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      PurchaseLineDiscount.MODIFY(TRUE);

      // Set unique "Purch. Line Disc. Account"
      Vendor.GET(PurchaseLineDiscount."Vendor No.");
      GeneralPostingSetup.GET(Vendor."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE(
        "Purch. Line Disc. Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"));
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAdditionalAmtOnGLEntry@105(DocumentNo@1002 : Code[20];GLAccountNo@1001 : Code[20];AdditionalCurrencyAmount@1000 : Decimal);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          AdditionalCurrencyAmount,"Additional-Currency Amount",LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(
            ValidateErr,FIELDCAPTION("Additional-Currency Amount"),AdditionalCurrencyAmount,TABLECAPTION,"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyAmountOnGLEntry@57(DocumentNo@1000 : Code[20];GLAccountNo@1003 : Code[20];Amount2@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          Amount2,Amount,LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(ValidateErr,FIELDCAPTION(Amount),Amount2,TABLECAPTION,"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyAmountOnVATEntry@83(DocumentNo@1001 : Code[20];VATProdPostingGroupCode@1003 : Code[10];Amount2@1002 : Decimal);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("VAT Prod. Posting Group",VATProdPostingGroupCode); // required for BE to avoid finding rounding VAT Entry
        FINDFIRST;
        Assert.AreNearlyEqual(
          Amount2,Amount,LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(ValidateErr,FIELDCAPTION(Amount),Amount2,TABLECAPTION,"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyAmountOnVendor@54(VendorNo@1000 : Code[20];Amount@1003 : Decimal);
    VAR
      Vendor@1001 : Record 23;
      TotalAmountLCY@1002 : Decimal;
    BEGIN
      Vendor.GET(VendorNo);
      Vendor.CALCFIELDS("Balance (LCY)","Outstanding Orders (LCY)","Amt. Rcd. Not Invoiced (LCY)","Outstanding Invoices (LCY)");
      TotalAmountLCY :=
        Vendor."Balance (LCY)" +
        Vendor."Outstanding Orders (LCY)" + Vendor."Amt. Rcd. Not Invoiced (LCY)" + Vendor."Outstanding Invoices (LCY)";
      Vendor.TESTFIELD("Balance (LCY)",Amount);
      Assert.AreEqual(TotalAmountLCY,Amount,STRSUBSTNO(AmountErr,'Total LCY',Vendor.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyAmountLCYOnVendorLedger@58(DocumentNo@1001 : Code[20];AmountLCY@1002 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        CALCFIELDS("Amount (LCY)");
        Assert.AreNearlyEqual(
          AmountLCY,"Amount (LCY)",LibraryERM.GetInvoiceRoundingPrecisionLCY,
          STRSUBSTNO(ValidateErr,FIELDCAPTION("Amount (LCY)"),AmountLCY,TABLECAPTION,"Entry No."));
      END;
    END;

    LOCAL PROCEDURE VerifyPurchLineAmount@49(DocumentNo@1001 : Code[20];No@1002 : Code[20];LineAmount@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Line Amount",LineAmount);
    END;

    LOCAL PROCEDURE VerifyGLEntry@2(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      GeneralLedgerSetup@1004 : Record 98;
      TotalGLAmount@1003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETFILTER(Amount,'>0');
      GLEntry.FINDSET;
      REPEAT
        TotalGLAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        Amount,TotalGLAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyValueEntry@15(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      ValueEntry@1002 : Record 5802;
      PurchaseAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDSET;
      REPEAT
        PurchaseAmount += ValueEntry."Purchase Amount (Actual)";
      UNTIL ValueEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        Amount,PurchaseAmount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,ValueEntry.FIELDCAPTION("Purchase Amount (Actual)"),ValueEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@11(DocumentNo@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      VendorLedgerEntry@1002 : Record 25;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreNearlyEqual(
        -Amount,VendorLedgerEntry."Amount (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyInvoiceDiscountAmount@24(PurchaseLine@1005 : Record 39;DocumentNo@1004 : Code[20];InvoiceDiscountAmount@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      GeneralPostingSetup@1001 : Record 252;
      GLEntry@1000 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Inv. Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        -InvoiceDiscountAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,PurchaseLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Inv. Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLineDiscountAmount@23(PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];LineDiscountAmount@1002 : Decimal);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
      GeneralPostingSetup@1004 : Record 252;
      GLEntry@1003 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Line Disc. Account");
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        -LineDiscountAmount,GLEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDCAPTION(Amount),GLEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        LineDiscountAmount,PurchaseLine."Line Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDCAPTION("Line Discount Amount"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPurchRcptLine@61(PurchaseLine@1003 : Record 39;DocumentNo@1004 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchRcptLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyPurchInvLine@60(PurchaseLine@1003 : Record 39;PostedInvoiceNo@1000 : Code[20]);
    VAR
      PurchInvLine@1002 : Record 123;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",PostedInvoiceNo);
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchInvLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyDueDateOnPurchaseDocumentHeader@120(PurchaseHeader@1002 : Record 38;DueDateCalculation@1003 : DateFormula);
    VAR
      PurchaseHeader2@1000 : Record 38;
    BEGIN
      PurchaseHeader2.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeader2.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseHeader2.FINDFIRST;
      PurchaseHeader2.TESTFIELD("Due Date",CALCDATE(DueDateCalculation,PurchaseHeader."Document Date"));
    END;

    LOCAL PROCEDURE VerifyLineDiscAmountInLine@113(VAR PurchHeader@1000 : Record 38;ExpectedLineDiscAmt@1001 : Decimal);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      FindPurchaseLine(PurchLine,PurchHeader."Document Type",PurchHeader."No.");
      Assert.AreEqual(
        ExpectedLineDiscAmt,PurchLine."Line Discount Amount",
        STRSUBSTNO(AmountErr,PurchLine.FIELDCAPTION("Line Discount Amount"),PurchLine."Line Discount Amount"));
    END;

    LOCAL PROCEDURE PurchDocLineQtyValidation@90();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1001 : Record 39;
      Location@1004 : Record 14;
      Item@1008 : Record 27;
      LibraryWarehouse@1002 : Codeunit 132204;
      PurchaseInvoice@1009 : TestPage 51;
      VendorNo@1000 : Code[20];
      i@1003 : Integer;
    BEGIN
      // SETUP:
      LibraryWarehouse.CreateFullWMSLocation(Location,3);
      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader.Status := PurchaseHeader.Status::Open;
      VendorNo := LibraryPurchase.CreateVendorNo;
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
      i := 0;
      REPEAT
        i += 1;
        PurchaseHeader."No." := 'TEST' + FORMAT(i);
      UNTIL PurchaseHeader.INSERT;
      PurchaseLine.INIT;
      PurchaseLine."Document Type" := PurchaseLine."Document Type"::Invoice;
      PurchaseLine."Document No." := PurchaseHeader."No.";
      PurchaseLine."Line No." := 10000;
      PurchaseLine.Type := PurchaseLine.Type::Item;
      LibraryInventory.CreateItem(Item);
      PurchaseLine."No." := Item."No.";
      PurchaseLine."Location Code" := Location.Code;
      PurchaseLine."Pay-to Vendor No." := VendorNo;
      PurchaseLine.INSERT;
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseHeader);
      // EXECUTE:
      PurchaseInvoice.PurchLines.Quantity.SETVALUE(100);
      // VERIFY: In the test method
    END;

    LOCAL PROCEDURE CreateJobAndJobTaskWithDimensions@111(VAR JobNo@1000 : Code[10];VAR JobTaskNo@1001 : Code[10]);
    VAR
      Job@1002 : Record 167;
    BEGIN
      JobNo := CreateJobWithDimension(Job);
      JobTaskNo := CreateJobTaskWithDimension(Job);
    END;

    LOCAL PROCEDURE InsertJobTaskDim@109(VAR JobTaskDim@1000 : Record 1002;JobTask@1001 : Record 1001;DimValue@1005 : Record 349);
    BEGIN
      WITH JobTaskDim DO BEGIN
        INIT;
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Dimension Code",DimValue."Dimension Code");
        VALIDATE("Dimension Value Code",DimValue.Code);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobWithDimension@108(VAR Job@1000 : Record 167) : Code[10];
    VAR
      DimensionValue@1003 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Job,Job."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(Job."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceWithJob@104(VAR PurchaseLine@1001 : Record 39;JobNo@1002 : Code[10]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CreateVendor(''));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Job No.",JobNo);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineDimensions@102(PurchaseLine@1000 : Record 39;JobNo@1001 : Code[10];JobTaskNo@1002 : Code[10]);
    VAR
      DummyDimensionSetEntry@1003 : Record 480;
      JobTaskDimension@1004 : Record 1002;
    BEGIN
      FindJobTaskDimension(JobTaskDimension,JobNo,JobTaskNo);
      REPEAT
        WITH DummyDimensionSetEntry DO BEGIN
          SETRANGE("Dimension Set ID",PurchaseLine."Dimension Set ID");
          SETRANGE("Dimension Code",JobTaskDimension."Dimension Code");
          SETRANGE("Dimension Value Code",JobTaskDimension."Dimension Value Code");
          Assert.RecordIsNotEmpty(DummyDimensionSetEntry);
        END;
      UNTIL JobTaskDimension.NEXT = 0;

      JobTaskDimension.SETRANGE("Dimension Code",LibraryERM.GetGlobalDimensionCode(1));
      FindJobTaskDimension(JobTaskDimension,JobNo,JobTaskNo);
      Assert.AreEqual(
        JobTaskDimension."Dimension Value Code",PurchaseLine."Shortcut Dimension 1 Code",
        PurchaseLine.FIELDCAPTION("Shortcut Dimension 1 Code"));

      JobTaskDimension.SETRANGE("Dimension Code",LibraryERM.GetGlobalDimensionCode(2));
      FindJobTaskDimension(JobTaskDimension,JobNo,JobTaskNo);
      Assert.AreEqual(
        JobTaskDimension."Dimension Value Code",PurchaseLine."Shortcut Dimension 2 Code",
        PurchaseLine.FIELDCAPTION("Shortcut Dimension 2 Code"));
    END;

    LOCAL PROCEDURE CreateJobTaskWithDimension@101(Job@1000 : Record 167) : Code[10];
    VAR
      JobTask@1001 : Record 1001;
      DimensionValue@1004 : Record 349;
      JobTaskDimension@1005 : Record 1002;
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(2));
      InsertJobTaskDim(JobTaskDimension,JobTask,DimensionValue);
      EXIT(JobTask."Job Task No.");
    END;

    LOCAL PROCEDURE FindJobTaskDimension@98(VAR JobTaskDimension@1000 : Record 1002;JobNo@1001 : Code[10];JobTaskNo@1002 : Code[10]);
    BEGIN
      JobTaskDimension.SETRANGE("Job No.",JobNo);
      JobTaskDimension.SETRANGE("Job Task No.",JobTaskNo);
      JobTaskDimension.FINDSET;
    END;

    LOCAL PROCEDURE LineDiscInInvWithDiffPricesInclVATThenSourceOrder@298(PurchHeader@1000 : Record 38;VAR InvoicePurchaseHeader@1001 : Record 38;InvPricesInclVAT@1002 : Boolean);
    VAR
      PurchRcptLine@1007 : Record 121;
      PurchGetReceipt@1008 : Codeunit 74;
    BEGIN
      CreatePurchDocWithPricesInclVAT(
        InvoicePurchaseHeader,InvoicePurchaseHeader."Document Type"::Invoice,PurchHeader."Buy-from Vendor No.",InvPricesInclVAT);
      FindRcptLine(PurchRcptLine,PurchHeader."No.");
      PurchGetReceipt.SetPurchHeader(InvoicePurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);
    END;

    [ModalPageHandler]
    PROCEDURE GetReceiptLinesPageHandler@66(VAR GetReceiptLines@1000 : TestPage 5709);
    BEGIN
      GetReceiptLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityOnGetReceiptLinesPageHandler@86(VAR GetReceiptLines@1000 : TestPage 5709);
    VAR
      QtyToReceive@1001 : Variant;
    BEGIN
      // Verification for both lines filtering in the Get Receipt Lines page which is partially posted Purchase Order for same vendor.
      LibraryVariableStorage.Dequeue(QtyToReceive);
      FilterQuantityOnGetReceiptLines(GetReceiptLines,COPYSTR(LibraryVariableStorage.DequeueText,1,20),QtyToReceive);
      FilterQuantityOnGetReceiptLines(GetReceiptLines,COPYSTR(LibraryVariableStorage.DequeueText,1,20),QtyToReceive);
    END;

    [ModalPageHandler]
    PROCEDURE QuantityFilterUsingGetReceiptLinesPageHandler@85(VAR GetReceiptLines@1000 : TestPage 5709);
    VAR
      QtyToReceive@1001 : Variant;
    BEGIN
      // Verification for filter in the Get Receipt Lines page according to Quantity.
      LibraryVariableStorage.Dequeue(QtyToReceive);
      FilterQuantityOnGetReceiptLines(GetReceiptLines,COPYSTR(LibraryVariableStorage.DequeueText,1,20),QtyToReceive);
    END;

    [ModalPageHandler]
    PROCEDURE InvokeGetReceiptLinesPageHandler@84(VAR GetReceiptLines@1000 : TestPage 5709);
    VAR
      QtyToReceive@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(QtyToReceive);
      FilterQuantityOnGetReceiptLines(GetReceiptLines,COPYSTR(LibraryVariableStorage.DequeueText,1,20),QtyToReceive);
      GetReceiptLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@88(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@138(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Confirm Handler for the Confirmation message and always send reply as TRUE.
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmCopyDocDateOrderHandlerVerify@189(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedConfirmText@1002 : Text;
    BEGIN
      ExpectedConfirmText := CopyDocDateOrderConfirmMsg;
      Assert.AreEqual(ExpectedConfirmText,Question,WrongConfirmationMsgErr);
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    BEGIN
    {
      // [FEATURE] [Invoice] [Purchase]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      SE: Unable to Execute

      Check the functionalities of Purchase Invoice.
       1. Test if the system allows to create a New Purchase Invoice for Vendor.
       2. Test if the system calculates applicable VAT on Purchase Invoice and verify VAT Amount with VAT Amount Line.
       3. Test if the system generates Purchase Invoice Report and verify new external file created.
       4. Test if Purchase Invoice allowing to Post and verify Posted Purchase Receipt Entry Posted G/L Entry, VAT Entry,
          Value Entry and Vendor Ledger Entry.
       5. Test if the system generates Posted Purchase Invoice Report and verify new external file created.
       6. Test if the system allows creating a Purchase Invoice with a Location having Warehouse Receipt checked, system
          allow to post the Invoice and verify Posted Receipt Entry.
       7. Test if the system calculates Line Discount on Purchase Invoice and after Post, creates G/L entry for Discount.
       8. Test if the system calculates Invoice Discount on Purchase Invoice and after Post, creates G/L entry for Invoice Discount.
       9. Test if the system allows creating Purchase Invoice with Foreign Currency and allow to Post the Purchase Invoice
          with Foreign Currency.
      10. Check Purchase Lines Field after Create and before Release Purchase Invoice with Currency.
      11. Check Purchase Lines Field after Create and Release Purchase Invoice with Currency.
      12. Check Purchase Lines Field after Create and Calculate Invoice Discount on Purchase order with Currency.
      13. Check Invoice Discount Amount on Purchase Order for Partial Posting
      14. Check Invoice Discount Amount on Purchase Order for Posted Purchase Order.
      15. Create vendor with currency and post purchase invoice for same while purchasing fixed asset and verifying the
          purchase invoice header.
      16. Verify Amount on G/L Entry and Amount LCY on Vendor Ledger Entry after posting Purchase Invoice with ACY.
      17. Verify VAT Amount on G/L Entry and VAT Entry after posting Purchase Invoice with ACY.
      18. Check GL And Vendor Ledger Entry for Amount and Purchaser Code after Posting Purchase Invoice.
      19. Check Line Amount on Purchase Invoice for New Vendor.
      20. Check Total (LCY) and Balance (LCY) of Vendor after post Purchase Invoice.
      21. Check program allows posting of purchase invoice with multiple lines when FCY is involved and verify Amount and
          Additional amount on GL entry.
      22. Verifying that the posted purchase receipt and posted purchase invoice have been created after posting.
      23. open and close Vendor page and verify error message after closing the Vendor page.
      24. Check Vendor after Creating a new Vendor with Page.
      25. Check Dimension on Vendor after creating a Vendor with Dimension.
      26. Check Base on VAT Entry after posting Purchase Invoice with IC Partner.
      27. Verify Receipts on Get Receipt Lines page filtered according to Buy-from Vendor No. on Purchase Invoice.
      28. Verify the GL Entries when posting the Purchase Invoice after Get Receipt Lines using page.
      29. Verify Get Receipt Lines page that lines are filtered according to Purchase Order.
      30. Verify Filter on Get Receipt Lines page filtered according to Quantity.
      31. Verify G/L Entry for Posted Purchase Invoice after Get Receipt Line on Purchase Invoice.
      32. Verify GL Entry after post Purhcase Invoice without Price Including VAT.
      33. Verify GL Entry after post Purhcase Invoice with Price Including VAT.
      34. Verify Invoice field on Purchase Order after post invoice using Get Receipt Line.
      35. Verify Receive field on Purchase Order after Receipt and Undo Receipt Line.
      36. Verify Receive field on Purchase Order after Copy Document.
      37. Verify that a purchase invoice cannot be made for WHITE location (with directed put-away and pick)
      38. Test Dimensions in Purchase Invoce Line after assigned Job and Job Task

      TS_TFS ID=21547
      Covers Test Cases:
      ---------------------------------------------------------------------------------------------
      Test Cases                                          TFS ID
      ---------------------------------------------------------------------------------------------
      PurchaseInvoiceCreation                             122419
      VATAmountOnPurchaseInvoice                          122420
      PurchaseInvoiceReport                               122421
      PostPurchaseInvoice                                 122422, 122423, 122425 to 122428
      PostedPurchaseInvoiceReport                         122424
      PurchaseInvoiceForWhseLocation                      122429,122430
      LineDiscountOnPurchaseInvoice                       122431,122432
      InvDiscountOnPurchaseInvoice                        122433,122434
      PurchaseInvoiceWithFCY                              122435,122436

      TS_TFS ID=231188
      Covers Test Cases:
      ---------------------------------------------------------------------------------------------
      Test Cases                                          TFS ID
      ---------------------------------------------------------------------------------------------
      PurchaseInvoiceBeforeRelease                        126922
      PurchaseInvoiceAfterRelease                         126922
      PurchaseOrderAfterInvDiscount                       126922

      TS_TFS ID=231186
      Covers Test Cases:
      ---------------------------------------------------------------------------------------------
      Test Cases                                          TFS ID
      ---------------------------------------------------------------------------------------------
      InvDiscountPurchStatistics                         127186,127187,127188
      InvDiscountPstdPurchStatistics                     127189,127190,127724,127725

      Covers Test Cases: 240821
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      PurchaseInvoiceFixedAssets                          185723

      Covers Test Cases: 252933
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      PurchaseInvoiceWithACY                              125007
      PurchaseInvoiceVATWithACY                           125009

      Covers Test Cases: 256664
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      PurchaserCodePurchaseInvoice                        236604

      Covers Test Cases: 252918
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      LineAmountOnPurchaseInvoice,BalanceLCYonVendor      126149

      TS_TFS ID=258824
      Covers Test Cases:
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      PurchInvWithMultipleLinesFCY                         253282

      Workitem ID:259816
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      PurchaseReceiptInvoice                              129644

      Workitem ID:264019
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      OpenAndCloseVendorPageToVerifyError,                127881
      VendorCreationByPage,VendorWithDimension

      Workitem ID:264423
      ----------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ----------------------------------------------------------------------------------
      VATEntryForPurchaseInvoiceWithICPartner             236600

      Workitem ID: 270754
      ------------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ------------------------------------------------------------------------------------
      GetReceiptLineOnPurchaseInvoice,
      GLEntriesAfterGetReceiptLine                        269537

      Workitem ID: 272899
      ------------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ------------------------------------------------------------------------------------
      GetReceiptLinesAfterPartialPosting                  267983
      GetReceiptLinesAfterPartialPostingWithQtyFilter
      PostPurchaseInvoiceAfterQuantityFilterOnGetReceiptLine

      Workitem ID: 314556
      ------------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ------------------------------------------------------------------------------------
      PurchInvoiceWithoutPriceInclVAT,
      PurchInvoiceWithPriceInclVAT                        282802

      Workitem ID: 315448
      ------------------------------------------------------------------------------------
      Test Function Name                                  TFS ID
      ------------------------------------------------------------------------------------
      UpdateInvoiceAfterPostInvoice,
      UpdateReceiveAfterUndoReceipt,
      UpdateReceiveAfterCopyDocument                      326483

      Workitem ID: 334921
      ------------------------------------------------------------------------------------
      Test Function Name
      ------------------------------------------------------------------------------------
      CreatePurchaseInvoiceLineWhiteLocationQtyError

      Workitem ID: 359937
      ------------------------------------------------------------------------------------
      CreatePurchaseInvoiceLineWithJobAndJobTask

      Workitem ID: 360474
      ------------------------------------------------------------------------------------
      LineDiscInPriceInclVATInvWithRcptLinesFromPriceExclVATOrder
      LineDiscInPriceExclVATInvWithRcptLinesFromPriceInclVATOrder
    }
    END.
  }
}

