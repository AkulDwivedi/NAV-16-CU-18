OBJECT Codeunit 134017 ERM Payment Tolerance Sales
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryInventory@1020 : Codeunit 132201;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPmtDiscSetup@1008 : Codeunit 131303;
      LibrarySetupStorage@1009 : Codeunit 131009;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      AmountErrorMessage@1006 : TextConst 'ENU=%1 must be %2 in %3 %4 %5.';
      DocumentType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      ExpectedMessage@1007 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesInvoiceWithLCY@15();
    VAR
      DocumentNo@1001 : Code[20];
      ExpectedPmtTolAmount@1000 : Decimal;
    BEGIN
      // Covers Test Case 124094,124095.
      // Check Customer Ledger Entry for Payment Tolerance after posting Sales Invoice without Currency.

      // Create and Post Sales Invoice without Currency.
      DocumentNo := CreateAndPostSalesDocument('',DocumentType::Invoice);

      // Verify: Verify Customer Ledger Entry Amount.
      ExpectedPmtTolAmount := CalcPaymentTolInvoiceLCY(DocumentNo);
      VerifyMaxPaymentTolInvoice(DocumentNo,ExpectedPmtTolAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesCreditMemoWithLCY@5();
    VAR
      SalesCrMemoHeader@1002 : Record 114;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Covers Test Case 124087,124088.
      // Check Customer Ledger Entry for Payment Tolerance after posting Sales Credit Memo without Currency.

      // Create and Post Sales Credit Memo without Currency.
      DocumentNo := CreateAndPostSalesDocument('',DocumentType::"Credit Memo");

      // Verify: Verify Customer Ledger Entry Amount.
      SalesCrMemoHeader.GET(DocumentNo);
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      VerifyCustomerLedgerEntry(SalesCrMemoHeader."Amount Including VAT",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesInvoiceWithFCY@16();
    VAR
      DocumentNo@1000 : Code[20];
      ExpectedPmtTolAmount@1001 : Decimal;
    BEGIN
      // Covers Test Case 124094,124095.
      // Check Customer Ledger Entry for Payment Tolerance after posting Sales Invoice with Currency.

      // Create and Post Sales Invoice with Currency.
      DocumentNo := CreateAndPostSalesDocument(CreateCurrency,DocumentType::Invoice);

      // Verify: Verify Customer Ledger Entry Amount.
      ExpectedPmtTolAmount := CalcPaymentTolInvoiceFCY(DocumentNo);
      VerifyMaxPaymentTolInvoice(DocumentNo,ExpectedPmtTolAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesCreditMemoWithFCY@13();
    VAR
      SalesCrMemoHeader@1002 : Record 114;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Covers Test Case 124087,124088.
      // Check Customer Ledger Entry  for Payment Tolerance after posting Sales Credit Memo with Currency.

      // Create and Post Sales Credit Memo with Currency.
      DocumentNo := CreateAndPostSalesDocument(CreateCurrency,DocumentType::"Credit Memo");

      // Verify: Verify Customer Ledger Entry Amount.
      SalesCrMemoHeader.GET(DocumentNo);
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      VerifyCustomerLedgerEntry(SalesCrMemoHeader."Amount Including VAT",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCopyDocument@4();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentType@1007 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocumentNo@1003 : Code[20];
      SalesInvoiceNo@1004 : Code[20];
    BEGIN
      // Covers Test Case 124089.
      // Check Customer Ledger Entry for Payment Tolerance after posting Sales Credit Memo and Copy Document.

      // Setup: Update General ledger Setup and Create and Post Sales Invoice.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      CreateSalesDocument(SalesHeader,'',SalesHeader."Document Type"::Invoice);
      SalesInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.INSERT(TRUE);

      // Exercise: Create and Post Sales Credit Memo after Copy Document with Document Type Posted Invoice.
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Invoice",SalesInvoiceNo,TRUE,TRUE);
      SalesHeader.SETRANGE("Applies-to Doc. No.",SalesInvoiceNo);
      SalesHeader.FINDFIRST;
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Max Payment Tolerance is zero for Credit Memo applied to Invoice.
      VerifyMaxPaymentTolCreditMemo(DocumentNo,0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCopyDocumentLineOnly@10();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      DocumentType@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocumentNo@1004 : Code[20];
      SalesInvoiceNo@1006 : Code[20];
      ExpectedPmtTolAmount@1003 : Decimal;
    BEGIN
      // Covers Test Case 124090.
      // Check Customer Ledger Entry for Payment Tolerance after posting Sales Credit Memo and Copy Document with Only Line.

      // Setup: Update General Ledger Setup and Create and Post Sales invoice and take a Random quantity.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer);
      SalesHeader.VALIDATE("Payment Discount %",LibraryRandom.RandInt(5)); // Use Random value for Payment Discount.
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      SalesInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesHeader."Sell-to Customer No.");

      // Exercise: Create and Post Sales Credit Memo after Copy Document with Document Type Posted Invoice.
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Invoice",SalesInvoiceNo,FALSE,TRUE);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Max Payment Tolerance field in Customer Ledger Entry.
      ExpectedPmtTolAmount := CalcPaymentTolCreditMemoLCY(DocumentNo);
      VerifyMaxPaymentTolCreditMemo(DocumentNo,ExpectedPmtTolAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCopyDocumentOpenInv@6();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentType@1000 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      DocumentNo@1002 : Code[20];
      ExpectedPmtTolAmount@1003 : Decimal;
    BEGIN
      // Covers Test Case 124091.
      // Check Customer Ledger Entry for Payment Tolerance after posting Sales Credit Memo and Copy Document with Document Type Invoice.

      // Setup: Update General Ledger Setup and Create Sales Invoice and Insert new record with Document Type Credit memo.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      CreateSalesDocument(SalesHeader,'',SalesHeader."Document Type"::Invoice);
      SalesHeader.VALIDATE("Payment Discount %",LibraryRandom.RandInt(5)); // Use Random value for Payment Discount.
      SalesHeader.MODIFY(TRUE);
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.INSERT(TRUE);

      // Exercise: Create and Post Sales Credit Memo after Copy Document with Document Type Invoice.
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::Invoice,SalesHeader."No.",TRUE,TRUE);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      SalesHeader.FINDFIRST;
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Max Payment Tolerance field in Customer Ledger Entry.
      ExpectedPmtTolAmount := CalcPaymentTolCreditMemoLCY(DocumentNo);
      VerifyMaxPaymentTolCreditMemo(DocumentNo,ExpectedPmtTolAmount);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      ExecuteUIHandler;  // This function required for confirmation message to appear always.

      // Setup demo data.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@2(CurrencyCode@1001 : Code[10];DocType@1002 : Option) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Setup: Update General Ledger Setup and Create Sales Document.
      Initialize;
      LibraryPmtDiscSetup.SetPmtTolerance(5);
      CreateSalesDocument(SalesHeader,CurrencyCode,DocType);

      // Exercise: Post Sales Document.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CreateCurrency@3() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      // Use Random value for Payment Tolerance and Max Payment Tolerance Amount.
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Payment Tolerance %",LibraryRandom.RandInt(5));
      Currency.VALIDATE("Max. Payment Tolerance Amount",LibraryRandom.RandInt(5));
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@1() : Code[20];
    VAR
      Customer@1001 : Record 18;
      PaymentTerms@1002 : Record 3;
    BEGIN
      // Find Payment Terms Code and Update.
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);

      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.VALIDATE("Application Method",Customer."Application Method"::Manual);
      Customer.VALIDATE("Block Payment Tolerance",FALSE);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@38() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      // Price should be small enough to not make a document exceed Max. Payment Tolerance
      Item.VALIDATE("Unit Price",LibraryRandom.RandInt(7));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocument@9(VAR SalesHeader@1001 : Record 36;CurrencyCode@1002 : Code[10];DocumentType@1005 : Option);
    VAR
      SalesLine@1000 : Record 37;
      Counter@1003 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);

      // Use Counter for Creating Multiple Sales Lines with Random Quantity.
      FOR Counter := 1 TO LibraryRandom.RandInt(3) DO BEGIN
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(3));
        IF DocumentType = SalesLine."Document Type"::"Credit Memo" THEN BEGIN
          SalesLine.VALIDATE("Qty. to Ship",0); // Quantity to ship must be 0 for Sales Credit Memo.
          SalesLine.MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE FindCustomerLedgerEntry@26(VAR CustLedgerEntry@1002 : Record 21;DocumentNo@1001 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS(Amount);
    END;

    LOCAL PROCEDURE CalcPaymentTolInvoiceFCY@18(DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      Currency@1001 : Record 4;
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET(DocumentNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      Currency.GET(SalesInvoiceHeader."Currency Code");
      EXIT(SalesInvoiceHeader."Amount Including VAT" * Currency."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE CalcPaymentTolInvoiceLCY@23(DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      GeneralLedgerSetup.GET;
      SalesInvoiceHeader.GET(DocumentNo);
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      EXIT(SalesInvoiceHeader."Amount Including VAT" * GeneralLedgerSetup."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE CalcPaymentTolCreditMemoLCY@32(DocumentNo@1002 : Code[20]) : Decimal;
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      GeneralLedgerSetup.GET;
      SalesCrMemoHeader.GET(DocumentNo);
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      EXIT(SalesCrMemoHeader."Amount Including VAT" * GeneralLedgerSetup."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@14(Amount@1004 : Decimal;DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1001 : Record 21;
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindCustomerLedgerEntry(CustLedgerEntry,DocumentNo);
      Assert.AreNearlyEqual(-Amount,CustLedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErrorMessage,CustLedgerEntry.FIELDCAPTION(Amount),Amount,CustLedgerEntry.TABLECAPTION,
          CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyMaxPaymentTolInvoice@27(DocumentNo@1001 : Code[20];ExpectedPmtTolAmount@1000 : Decimal);
    VAR
      CustLedgerEntry@1003 : Record 21;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindCustomerLedgerEntry(CustLedgerEntry,DocumentNo);
      Assert.AreNearlyEqual(ExpectedPmtTolAmount,CustLedgerEntry."Max. Payment Tolerance",
        GeneralLedgerSetup."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,CustLedgerEntry.FIELDCAPTION(Amount),
          ExpectedPmtTolAmount,CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyMaxPaymentTolCreditMemo@33(DocumentNo@1001 : Code[20];ExpectedPmtTolAmount@1004 : Decimal);
    VAR
      CustLedgerEntry@1003 : Record 21;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindCustomerLedgerEntry(CustLedgerEntry,DocumentNo);
      Assert.AreNearlyEqual(-ExpectedPmtTolAmount,CustLedgerEntry."Max. Payment Tolerance",
        GeneralLedgerSetup."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,CustLedgerEntry.FIELDCAPTION(Amount),
          ExpectedPmtTolAmount,CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@17(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Payment Tolerance] [Sales]
      Unsupported version tags:
      NA: Unable to Compile

      Test for Creating and Posting of Sales Credit Memo using Copy Document:
        1. Test Customer Ledger Entry after posting Sales Invoice with LCY.
        2. Test Customer Ledger Entry after posting Sales Credit Memo with LCY.
        3. Test Customer Ledger Entry after posting Sales Invoice with FCY.
        4. Test Customer Ledger Entry after posting Sales Credit Memo with FCY.
        5. Test Customer Ledger Entry after posting Sales Credit Memo and Copy Document.
        6. Test Customer Ledger Entry after posting Sales Credit Memo and Copy Document with Only Line.
        7. Test Customer Ledger Entry after posting Sales Credit Memo and Copy Document with Document Type Invoice.

      Cover Test cases:
        TFS_TC_ID= 124094: TC6624
        TFS_TC_ID= 124095: TC6625
        TFS_TC_ID= 124087: TC6617
        TFS_TC_ID= 124088: TC6618
        TFS_TC_ID= 124089: TC6619
        TFS_TC_ID= 124090: TC6620
        TFS_TC_ID= 124091: TC6621
        TFS_TC_ID= 124093: TC6622
    }
    END.
  }
}

