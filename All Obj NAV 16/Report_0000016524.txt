OBJECT Report 16524 Generate e-TCS 27EQ
{
  OBJECT-PROPERTIES
  {
    Date=29-09-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.47042;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Generate e-TCS 27EQ;
               ENN=Generate e-TCS 27EQ];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  FileMgt@1500000 : Codeunit 419;
                  CompanyInformation@1500001 : Record 79;
                BEGIN
                  CompanyInformation.GET;
                  IF FileName = '' THEN
                    ERROR(Text16500);
                  IF CurrentQuarter = 0 THEN
                    ERROR(Text16501);
                  IF FinancialYear = '' THEN
                    ERROR(Text16502);
                  IF TCANLocation = '' THEN
                    ERROR(Text16503);
                  IF PersonName = '' THEN
                    ERROR(Text16504);
                  IF Designation = '' THEN
                    ERROR(Text16505);
                  IF CreationDate = 0D THEN
                    ERROR(Text16506);
                  IF NameofReturnPrepUtility = '' THEN
                    ERROR(Text16524);
                  IF PANNo = '' THEN
                    ERROR(PANNoEmptyErr);
                  IF CompanyInformation."Phone No." = '' THEN
                    ERROR(CompInfoPhoneNoEmptyErr);
                  IF CompanyInformation."E-Mail" = '' THEN
                    ERROR(CompInfoEmailEmptyErr);
                  IF CompanyInformation."Location Code" = '' THEN
                    ERROR(CompInfoLocationEmptyErr);

                  ServerFile := FileMgt.ServerTempFileName('txt');

                  CompanyInformation.TESTFIELD(State);

                  Form27EQEntry.SETRANGE("Financial Year",FinancialYear);
                  Form27EQEntry.SETRANGE(Quarter,CurrentQuarter);
                  Form27EQEntry.SETRANGE("T.C.A.N. No.",TCANLocation);
                  Form27EQEntry.SETRANGE(Printed,TRUE);
                  IF Form27EQEntry.FINDFIRST THEN
                    Execute := 1;

                  TCSBatchHeader.SETRANGE("Financial Year",FinancialYear);
                  TCSBatchHeader.SETRANGE(Quarter,CurrentQuarter);
                  TCSBatchHeader.SETRANGE("Collector T.C.A.N. No.",TCANLocation);
                  NoOfBatches := TCSBatchHeader.COUNT;
                  SequenceNo := 1;

                  IF (CompanyInformation."Company Status" <> CompanyInformation."Company Status"::Government) AND
                     (STRLEN(MobileNo) <> 10)
                  THEN
                    ERROR(Text16525);
                END;

    OnPostReport=VAR
                   FileMgt@1500001 : Codeunit 419;
                 BEGIN
                   IF FileOpened THEN
                     OutFile.CLOSE;
                   FileMgt.DownloadToFile(ServerFile,FileName);
                 END;

  }
  DATASET
  {
    { 9977;    ;DataItem;                    ;
               DataItemTable=Table16515;
               DataItemTableView=SORTING(Entry No.)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               IF Execute = 0 THEN
                                 ERROR(Text16509);
                               SETRANGE("Financial Year",FinancialYear);
                               SETRANGE(Quarter,CurrentQuarter);
                               SETRANGE("Collector T.C.A.N. No.",TCANLocation);

                               IF FINDFIRST THEN;
                               IF NOT CalledFromY THEN BEGIN
                                 SETRANGE(Revised,FALSE);
                                 SETRANGE(Filed,FALSE);
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT FileOpened THEN BEGIN
                                    OutFile.CREATE(ServerFile);
                                    OutFile.CREATEOUTSTREAM(OStream);
                                    CreateFileHeader;
                                    FileOpened := TRUE;
                                  END;

                                  TCSChallanRegister.RESET;
                                  TCSChallanRegister.SETCURRENTKEY(Quarter,"Financial Year");
                                  TCSChallanRegister.SETRANGE(Quarter,CurrentQuarter);
                                  TCSChallanRegister.SETRANGE("Financial Year",FinancialYear);
                                  ChallanCount := 0;
                                  IF TCSChallanRegister.FIND('-') THEN
                                    REPEAT
                                      TCSChallanRegister.CALCFIELDS("Total TCS Including SHE Cess");
                                      BatchAmount += TCSChallanRegister."Total TCS Including SHE Cess" + TCSChallanRegister."Oltas Interest" +
                                        TCSChallanRegister."Oltas Others" + TCSChallanRegister."TCS Fee";
                                      ChallanCount += 1;
                                    UNTIL TCSChallanRegister.NEXT = 0;
                                  CreateBatchHeader;

                                  "Normal eTCS Generated" := TRUE;
                                  MODIFY;
                                END;
                                 }

    { 8281;1   ;DataItem;                    ;
               DataItemTable=Table16516;
               DataItemTableView=SORTING(Quarter,Financial Year)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               SETRANGE("Financial Year",FinancialYear);
                               SETRANGE(Quarter,CurrentQuarter);
                               SETRANGE("T.C.A.N. No.",TCANLocation);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT CalledFromY THEN
                                    IF (NOT "Correction-Y") AND (Revised OR Filed) THEN
                                      CurrReport.SKIP;

                                  Form27EQEntry.RESET;
                                  Form27EQEntry.SETRANGE("Challan Register Entry No.","Entry No.");
                                  Form27EQEntry.SETFILTER("Document Type",'<>%1',Form27EQEntry."Document Type"::"Credit Memo");
                                  PartyCount := Form27EQEntry.COUNT;
                                  CALCFIELDS("Total TCS Amount","Total Surcharge Amount","Total eCess Amount","Total SHE Cess Amount",
                                    "Total TCS Including SHE Cess");

                                  CreateChallanDetails;
                                  "Normal eTCS Generated" := TRUE;
                                  MODIFY;
                                END;

               DataItemLink=Quarter=FIELD(Quarter),
                            Financial Year=FIELD(Financial Year) }

    { 5365;2   ;DataItem;                    ;
               DataItemTable=Table16517;
               DataItemTableView=SORTING(Challan Register Entry No.)
                                 ORDER(Ascending);
               OnPreDataItem=BEGIN
                               SETRANGE("Financial Year",FinancialYear);
                               SETRANGE(Quarter,CurrentQuarter);

                               SETRANGE("T.C.A.N. No.",TCANLocation);
                               SETRANGE(Printed,TRUE);
                               IF COUNT = 0 THEN
                                 ERROR(Text16509);
                               SNo := 0;
                             END;

               OnAfterGetRecord=VAR
                                  EntryNo@1500000 : Integer;
                                  CreditmemoEntryNo@1500002 : Integer;
                                BEGIN
                                  EntryNo := 0;
                                  CreditmemoEntryNo := 0;
                                  IF STRLEN("Party P.A.N. No.") <> 10 THEN
                                    ERROR(Text16508);
                                  SNo += 1;

                                  IF "Document Type" = "Document Type"::Invoice THEN
                                    AdjustAppliedEntries("Form 27EQ Entry");
                                  IF "Document Type" <> "Document Type"::"Credit Memo" THEN
                                    CreatePartyDetails;

                                  Form27EQEntry.GET("Entry No.");
                                  Form27EQEntry."Normal eTCS Generated" := TRUE;
                                  Form27EQEntry.MODIFY;
                                END;

               DataItemLink=Challan Register Entry No.=FIELD(Entry No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENN=Options] }

      { 1500007;2;Field     ;
                  Name=FileName;
                  AssistEdit=Yes;
                  CaptionML=[ENU=File Name;
                             ENN=File Name];
                  SourceExpr=FileName;
                  OnAssistEdit=VAR
                                 FileMgt@1001 : Codeunit 419;
                               BEGIN
                                 IF FileName = '' THEN
                                   FileName := '.txt';
                                 FileName := FileMgt.SaveFileDialog(Text16507,FileName,'');
                               END;
                                }

      { 1500009;2;Field     ;
                  CaptionML=[ENU=T.CA.N. Location;
                             ENN=T.CA.N. Location];
                  SourceExpr=TCANLocation;
                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(16515,TCANNo) = ACTION::LookupOK THEN
                               TCANLocation := TCANNo.Code;
                           END;
                            }

      { 1500005;2;Field     ;
                  CaptionML=[ENU=Report Frequency;
                             ENN=Report Frequency];
                  SourceExpr=CurrentQuarter }

      { 1500013;2;Field     ;
                  CaptionML=[ENU=Financial Year;
                             ENN=Financial Year];
                  SourceExpr=FinancialYear;
                  OnLookup=VAR
                             IncomeTaxAccountingPeriod@1500000 : Record 13724;
                           BEGIN
                             IF CurrentQuarter > 0 THEN BEGIN
                               TDSTCSPeriodSetup.RESET;
                               TDSTCSPeriodSetup.SETRANGE(Quarter,CurrentQuarter);
                               IF TDSTCSPeriodSetup.FINDFIRST THEN BEGIN
                                 IncomeTaxAccountingPeriod.GET(TDSTCSPeriodSetup."No.");
                                 IF PAGE.RUNMODAL(PAGE::"Income Tax Accounting Periods",IncomeTaxAccountingPeriod) = ACTION::LookupOK THEN
                                   FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";
                               END;
                             END;
                           END;
                            }

      { 1500000;2;Field     ;
                  CaptionML=[ENU=Full Name;
                             ENN=Full Name];
                  SourceExpr=PersonName }

      { 1500002;2;Field     ;
                  CaptionML=[ENU="Designation ";
                             ENN="Designation "];
                  SourceExpr=Designation }

      { 1500011;2;Field     ;
                  CaptionML=[ENU=Printing Date;
                             ENN=Printing Date];
                  SourceExpr=CreationDate }

      { 1500406;2;Field     ;
                  Name=P.A.N No.;
                  CaptionML=[ENU=P.A.N No.;
                             ENN=P.A.N No.];
                  SourceExpr=PANNo }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Name of Return Preparation Utility;
                             ENN=Name of Return Preparation Utility];
                  SourceExpr=NameofReturnPrepUtility }

      { 1500015;2;Field     ;
                  CaptionML=[ENU=Email;
                             ENN=Email];
                  SourceExpr=EMail }

      { 1500017;2;Field     ;
                  CaptionML=[ENU=Mobile No.;
                             ENN=Mobile No.];
                  SourceExpr=MobileNo }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyInformation@1500027 : Record 79;
      TCSBatchHeader@1500026 : Record 16515;
      Form27EQEntry@1500025 : Record 16517;
      NodNocCertificate@1500100 : Record 13784;
      TCANNo@1500024 : Record 16512;
      TCSChallanRegister@1500023 : Record 16516;
      TDSTCSPeriodSetup@1500022 : Record 16501;
      OutFile@1500020 : File;
      OStream@1500019 : OutStream;
      SequenceNo@1500018 : Integer;
      NoOfBatches@1500017 : Integer;
      PersonName@1500016 : Text[75];
      Designation@1500015 : Text[20];
      ChallanCount@1500014 : Integer;
      Execute@1500013 : Integer;
      FileName@1500012 : Text[250];
      FinancialYear@1500011 : Code[6];
      TCANLocation@1500010 : Code[10];
      SNo@1500009 : Integer;
      CurrentQuarter@1500008 : ' ,Q1,Q2,Q3,Q4';
      CreationDate@1500006 : Date;
      BatchAmount@1500004 : Decimal;
      PartyCount@1500003 : Integer;
      LineNo@1500002 : Integer;
      CalledFromY@1500001 : Boolean;
      FileOpened@1500000 : Boolean;
      Text16500@1500036 : TextConst 'ENU=You must enter a file name.;ENN=You must enter a file name.';
      Text16501@1500035 : TextConst 'ENU=You must enter a report frequency.;ENN=You must enter a report frequency.';
      Text16502@1500034 : TextConst 'ENU=You must enter a financial year.;ENN=You must enter a financial year.';
      Text16503@1500033 : TextConst 'ENU=You must enter a T.C.A.N. No.;ENN=You must enter a T.C.A.N. No.';
      Text16504@1500032 : TextConst 'ENU=You must enter a person name.;ENN=You must enter a person name.';
      Text16505@1500031 : TextConst 'ENU=You must enter a designation.;ENN=You must enter a designation.';
      Text16506@1500030 : TextConst 'ENU=You must enter a printing date.;ENN=You must enter a printing date.';
      Text16507@1500029 : TextConst 'ENU=Export to text file.;ENN=Export to text file.';
      Text16508@1500028 : TextConst 'ENU=The party P.A.N. is invalid.;ENN=The party P.A.N. is invalid.';
      Text16509@1500005 : TextConst 'ENU=You must print Form 27EQ before generating e TCS.;ENN=You must print Form 27EQ before generating e TCS.';
      Customer@1500037 : Record 18;
      TDSTCSParty@1500038 : Record 13730;
      PartyName@1500039 : Text[30];
      Text16510@1500042 : TextConst 'ENU=^;ENN=^';
      Text16511@1500043 : TextConst 'ENU=Y;ENN=Y';
      Text16512@1500044 : TextConst 'ENU=N;ENN=N';
      Text16513@1500045 : TextConst 'ENU=FH;ENN=FH';
      Text16514@1500046 : TextConst 'ENU=TC1;ENN=TC1';
      Text16515@1500047 : TextConst 'ENU=R;ENN=R';
      Text16516@1500048 : TextConst 'ENU=D;ENN=D';
      Text16517@1500049 : TextConst 'ENU=BH;ENN=BH';
      Text16518@1500050 : TextConst 'ENU=27EQ;ENN=27EQ';
      Text16519@1500051 : TextConst 'ENU=CD;ENN=CD';
      Text16520@1500052 : TextConst 'ENU=DD;ENN=DD';
      Text16521@1500053 : TextConst 'ENU=O;ENN=O';
      NameofReturnPrepUtility@1500098 : Text[75];
      Text16524@1500200 : TextConst 'ENU=You must enter name of the return preparation utility.;ENN=You must enter name of the return preparation utility.';
      EMail@1500096 : Text[75];
      MobileNo@1500087 : Text[10];
      ServerFile@1500055 : Text[1024];
      Text16525@1500061 : TextConst 'ENU=You must specify a valid mobile number. Enter a 10 digit mobile number.;ENN=You must specify a valid mobile number. Enter a 10 digit mobile number.';
      NotFiledBatchQst@1500007 : TextConst 'ENU=An e-TCS return for the previous period was not filed: Financial Year %1 Quarter %2. Do you want to continue?;ENN=An e-TCS return for the previous period was not filed: Financial Year %1 Quarter %2. Do you want to continue?';
      PANNo@1500400 : Code[10];
      PANNoEmptyErr@1500101 : TextConst 'ENU=Select P.A.N. No.;ENN=Select P.A.N. No.';
      CompInfoPhoneNoEmptyErr@1500402 : TextConst 'ENU=The Phone No. field must have a value in the Company Information.;ENN=The Phone No. field must have a value in the Company Information.';
      CompInfoEmailEmptyErr@1500403 : TextConst 'ENU=The Email field must have a value in Company Information.;ENN=The Email field must have a value in Company Information.';
      CompInfoLocationEmptyErr@1500404 : TextConst 'ENU=The Location field must have a value in Company Information.;ENN=The Location field must have a value in Company Information.';
      CertificateNo@1500401 : Code[25];

    PROCEDURE CreateFileHeader@1280000();
    VAR
      FieldText@1500000 : ARRAY [100] OF Text[250];
    BEGIN
      LineNo := 1;
      FieldText[1] := FORMAT(LineNo) + Text16510;
      FieldText[2] := Text16513 + Text16510;
      FieldText[3] := Text16514 + Text16510;
      FieldText[4] := Text16515 + Text16510;
      FieldText[5] := FORMAT(CreationDate,0,'<Day,2><Month,2><Year4>') + Text16510;
      FieldText[6] := FORMAT(SequenceNo) + Text16510;
      FieldText[7] := Text16516 + Text16510;
      FieldText[8] := PADSTR("TCS Batch Header"."Collector T.C.A.N. No.",10 ,' ') + Text16510;
      IF NoOfBatches > 0 THEN
        FieldText[9] := FORMAT(NoOfBatches) + Text16510
      ELSE
        FieldText[9] := Text16510;
      FieldText[10] := NameofReturnPrepUtility + Text16510;
      FieldText[11] := Text16510;
      FieldText[12] := Text16510;
      FieldText[13] := Text16510;
      FieldText[14] := Text16510;
      FieldText[15] := Text16510;
      FieldText[16] := Text16510;
      FieldText[17] := '';
      FieldText[18] := Text16510;
      WriteToStream(FieldText,18);
    END;

    PROCEDURE CreateBatchHeader@1280001();
    VAR
      PrevBatchHeader@1500002 : Record 16515;
      FieldText@1500001 : ARRAY [100] OF Text[250];
      PreviousRRRNo@1500000 : Code[20];
    BEGIN
      WITH "TCS Batch Header" DO BEGIN
        IF FindBatchOfPreviousPeriod(PrevBatchHeader) THEN
          PreviousRRRNo := GetPrevProvRecepit(PrevBatchHeader);
        LineNo += 1;
        FieldText[1] := FORMAT(LineNo) + Text16510;
        FieldText[2] := Text16517 + Text16510;
        FieldText[3] := FORMAT(NoOfBatches) + Text16510;
        IF ChallanCount > 0 THEN
          FieldText[4] := FORMAT(ChallanCount) + Text16510
        ELSE
          FieldText[4] := Text16510;
        FieldText[5] := Text16518 + Text16510;
        FieldText[6] := Text16510;
        FieldText[7] := Text16510;
        FieldText[8] := Text16510;
        FieldText[9] := PreviousRRRNo + Text16510;
        FieldText[10] := Text16510;
        FieldText[11] := Text16510;
        FieldText[12] := Text16510;
        FieldText[13] := PADSTR("Collector T.C.A.N. No.",10 ,' ') + Text16510;
        FieldText[14] := Text16510;
        FieldText[15] := PADSTR("Collector P.A.N. No.",10 ,' ') + Text16510;
        FieldText[16] := "Assessment Year" + Text16510;
        FieldText[17] := FinancialYear + Text16510;
        FieldText[18] := FORMAT(CurrentQuarter) + Text16510;
        FieldText[19] := "Collector Name" + Text16510;
        FieldText[20] := "Collector Branch/Division" + Text16510;
        FieldText[21] := "Collector Address" + Text16510;
        FieldText[22] := "Collector Address 2" + Text16510;
        FieldText[23] := "Collector Address 3" + Text16510;
        FieldText[24] := "Collector Address 4" + Text16510;
        FieldText[25] := "Collector Address 5" + Text16510;
        FieldText[26] := "Collector State" + Text16510;
        FieldText[27] := "Collector Post Code" + Text16510;
        FieldText[28] := "Collector E-Mail" + Text16510;
        IF ("Collector STD Code" <> '') AND ("Collector Phone No." <> '') THEN BEGIN
          FieldText[29] := "Collector STD Code" + Text16510;
          FieldText[30] := "Collector Phone No." + Text16510;
        END ELSE BEGIN
          FieldText[29] := Text16510;
          FieldText[30] := Text16510;
        END;
        IF "Change of Add of Collector" THEN
          FieldText[31] := Text16511 + Text16510
        ELSE
          FieldText[31] := Text16512 + Text16510;
        FieldText[32] := FORMAT("Collector Category") + Text16510;
        CreateBatchHeaderForRespPerson(FieldText);
        FieldText[47] := FORMAT(BatchAmount,0,'<Sign><Integer>.00') + Text16510;
        FieldText[48] := Text16510;
        FieldText[49] := Text16510;
        FieldText[50] := Text16510;
        FieldText[51] := Text16512 + Text16510;
        FieldText[52] := BooleanToYN(PreviousRRRNo <> '') + Text16510;
        FieldText[53] := Text16510;
        FieldText[54] := "State Code" + Text16510;
        FieldText[55] := "PAO Code" + Text16510;
        FieldText[56] := "DDO Code" + Text16510;
        FieldText[57] := "Ministry Name Code" + Text16510;
        FieldText[58] := "Ministry Name Other" + Text16510;
        FieldText[59] := PANNo + Text16510;
        FieldText[60] := "PAO Registration No." + Text16510;
        FieldText[61] := "DDO Registration No." + Text16510;
        FieldText[62] := Text16510;
        FieldText[63] := Text16510;
        FieldText[64] := Text16510;
        FieldText[65] := Text16510;
        FieldText[66] := Text16510;
        FieldText[67] := Text16510;
        FieldText[68] := Text16510;
        FieldText[69] := '';
      END;
      WriteToStream(FieldText,69);
    END;

    PROCEDURE CreateBatchHeaderForRespPerson@1500200(VAR FieldText@1500201 : ARRAY [100] OF Text[250]);
    BEGIN
      WITH "TCS Batch Header" DO BEGIN
        FieldText[33] := PersonName + Text16510;
        FieldText[34] := Designation + Text16510;
        FieldText[35] := "Responsible Person Address" + Text16510;
        FieldText[36] := "Responsible Person Address 2" + Text16510;
        FieldText[37] := "Responsible Person Address 3" + Text16510;
        FieldText[38] := "Responsible Person Address 4" + Text16510;
        FieldText[39] := "Responsible Person Address 5" + Text16510;
        FieldText[40] := "Responsible Person State" + Text16510;
        FieldText[41] := "Responsible Person Post Code" + Text16510;
        IF EMail <> '' THEN
          FieldText[42] := EMail + Text16510
        ELSE
          FieldText[42] := "Responsible Person E-Mail" + Text16510;
        IF MobileNo <> '' THEN
          FieldText[43] := MobileNo + Text16510
        ELSE
          FieldText[43] := Text16510;
        IF ("Responsible Person STD Code" <> '') AND ("Responsible Person Phone No." <> '') THEN BEGIN
          FieldText[44] := "Responsible Person STD Code" + Text16510;
          FieldText[45] := "Responsible Person Phone No." + Text16510;
        END ELSE BEGIN
          FieldText[44] := Text16510;
          FieldText[45] := Text16510;
        END;
        IF "Change of Add of Collector" THEN
          FieldText[46] := Text16511 + Text16510
        ELSE
          FieldText[46] := Text16512 + Text16510;
      END;
    END;

    PROCEDURE CreateChallanDetails@1280002();
    VAR
      FieldText@1500001 : ARRAY [100] OF Text[250];
    BEGIN
      WITH "TCS Challan Register" DO BEGIN
        LineNo += 1;
        FieldText[1] := FORMAT(LineNo) + Text16510;
        FieldText[2] := Text16519 + Text16510;
        FieldText[3] := FORMAT(NoOfBatches) + Text16510;
        FieldText[4] := FORMAT("Challan-Detail Record No.") + Text16510;
        IF PartyCount > 0 THEN
          FieldText[5] := FORMAT(PartyCount) + Text16510
        ELSE
          FieldText[5] := Text16510;
        IF "Nil Challan Indicator" THEN
          FieldText[6] := Text16511 + Text16510
        ELSE
          FieldText[6] := Text16512 + Text16510;
        FieldText[7] := Text16510;
        FieldText[8] := Text16510;
        FieldText[9] := Text16510;
        FieldText[10] := Text16510;
        FieldText[11] := Text16510;
        IF NOT (CompanyInformation."Company Status" = CompanyInformation."Company Status"::Government) THEN
          FieldText[12] := PADSTR("Challan No.",5,' ') + Text16510
        ELSE
          FieldText[12] := Text16510;
        FieldText[13] := Text16510;
        FieldText[14] := "Transfer Voucher No." + Text16510;
        FieldText[15] := Text16510;
        IF CompanyInformation."Company Status" = CompanyInformation."Company Status"::Government THEN
          FieldText[16] := Text16510
        ELSE
          FieldText[16] := PADSTR("BSR Code",7,' ') + Text16510;
        FieldText[17] := Text16510;
        FieldText[18] := FORMAT("Challan Date",0,'<Day,2><Month,2><Year4>') + Text16510;
        FieldText[19] := Text16510;
        FieldText[20] := Text16510;
        FieldText[21] := Text16510;
        CreateChallanDetailsForAmount(FieldText);
        FieldText[36] := Text16510;
        IF "Paid By Book Entry" OR ("Transfer Voucher No." <> '') THEN
          FieldText[37] := Text16511 + Text16510
        ELSE
          FieldText[37] := Text16512 + Text16510;
        FieldText[38] := Remarks + Text16510;
        FieldText[39] := FORMAT("TCS Fee",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[40] := FORMAT("Minor Head Code") + Text16510;
        FieldText[41] := '';
      END;
      WriteToStream(FieldText,41);
    END;

    PROCEDURE CreateChallanDetailsForAmount@1500210(VAR FieldText@1500211 : ARRAY [100] OF Text[250]);
    VAR
      OltasAmount@1500212 : Decimal;
    BEGIN
      WITH "TCS Challan Register" DO BEGIN
        FieldText[22] := FORMAT("Total TCS Amount",0,'<Sign><Integer>.00') + Text16510;
        FieldText[23] := FORMAT("Total Surcharge Amount",0,'<Sign><Integer>.00') + Text16510;
        FieldText[24] := FORMAT("Total eCess Amount" + "Total SHE Cess Amount",0,'<Sign><Integer>.00') + Text16510;
        FieldText[25] := FORMAT("Oltas Interest",0,'<Sign><Integer>.00') + Text16510;
        FieldText[26] := FORMAT("Oltas Others",0,'<Sign><Integer>.00') + Text16510;
        OltasAmount :=
          ROUND("Total TCS Amount",1,'=') +
          ROUND("Total Surcharge Amount",1,'=') +
          ROUND("Total eCess Amount" + "Total SHE Cess Amount",1,'=') +
          ROUND("Oltas Interest",1,'=') +
          ROUND("Oltas Others",1,'=') + ROUND("TCS Fee",1,'=');
        FieldText[27] := FORMAT(OltasAmount,0,'<Sign><Integer>.00') + Text16510;
        FieldText[28] := Text16510;
        FieldText[29] := FORMAT("Total TCS Including SHE Cess",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[30] := FORMAT("Total TCS Amount",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[31] := FORMAT("Total Surcharge Amount",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[32] := FORMAT("Total eCess Amount" + "Total SHE Cess Amount",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[33] := FORMAT("Total TCS Including SHE Cess",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[34] := FORMAT("Oltas Interest",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[35] := FORMAT("Oltas Others",0,'<Sign><Integer><Decimals,3>') + Text16510;
      END;
    END;

    PROCEDURE CreatePartyDetails@1280003();
    VAR
      FieldText@1500005 : ARRAY [100] OF Text[250];
    BEGIN
      WITH "Form 27EQ Entry" DO BEGIN
        LineNo += 1;
        FieldText[1] := FORMAT(LineNo) + Text16510;
        FieldText[2] := Text16520 + Text16510;
        IF NoOfBatches > 0 THEN
          FieldText[3] := FORMAT(NoOfBatches) + Text16510
        ELSE
          FieldText[3] := Text16510;
        FieldText[4] := FORMAT("Challan-Detail Record No.") + Text16510;
        FieldText[5] := FORMAT(SNo) + Text16510;
        FieldText[6] := Text16521 + Text16510;
        FieldText[7] := Text16510;
        FieldText[8] := "Party Code1" + Text16510;
        FieldText[9] := Text16510;
        FieldText[10] := "Party P.A.N. No." + Text16510;
        FieldText[11] := Text16510;
        IF "Party P.A.N. No." = 'PANAPPLIED' THEN
          FieldText[12] := "Party P.A.N. Ref. No." + Text16510
        ELSE
          FieldText[12] := Text16510;
        IF "Party Type" = "Party Type"::Customer THEN BEGIN
          Customer.GET("Party Code");
          PartyName := Customer.Name;
        END;
        IF "Party Type" = "Party Type"::Party THEN BEGIN
          TDSTCSParty.GET("Party Code");
          PartyName := TDSTCSParty.Name
        END;
        FieldText[13] := PartyName + Text16510;
        CreatePartyDetailsForAmounts(FieldText);
        FieldText[27] := Text16510;
        FieldText[28] := Text16510;
        FieldText[29] := Text16510;
        FieldText[30] := COPYSTR("Concessional Code",1,1) + Text16510;
        FieldText[31] := Text16510;
        FieldText[32] := Text16510;
        FieldText[33] := "TCS Nature of Collection" + Text16510;
        CertificateNo := '';
        IF "Concessional Code" = 'A' THEN BEGIN
          NodNocCertificate.RESET;
          NodNocCertificate.SETRANGE(Type,"Party Type");
          NodNocCertificate.SETRANGE("No.","Party Code");
          IF NodNocCertificate.FINDFIRST THEN
            CertificateNo := NodNocCertificate."Certificate No.";
        END;
        FieldText[34] := CertificateNo + Text16510;
        FieldText[35] := Text16510;
        FieldText[36] := Text16510;
        FieldText[37] := Text16510;
        FieldText[38] := Text16510;
        FieldText[39] := ''
      END;
      WriteToStream(FieldText,39);
    END;

    PROCEDURE CreatePartyDetailsForAmounts@1500220(VAR FieldText@1500221 : ARRAY [100] OF Text[250]);
    VAR
      InvoiceAmount@1500222 : Decimal;
    BEGIN
      WITH "Form 27EQ Entry" DO BEGIN
        FieldText[14] := FORMAT("TCS Amount",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[15] := FORMAT("Surcharge Amount",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[16] := FORMAT("eCESS Amount" + "SHE CESS Amount",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[17] := FORMAT("Total TCS Including SHE CESS",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[18] := Text16510;
        FieldText[19] := FORMAT("Total TCS Including SHE CESS",0,'<Sign><Integer><Decimals,3>') + Text16510;
        FieldText[20] := Text16510;
        IF "Document Type" = "Document Type"::Invoice THEN
          InvoiceAmount := ABS("Invoice Amount")
        ELSE
          InvoiceAmount := 0;
        FieldText[21] := FORMAT(InvoiceAmount,0,'<Integer><Decimals,3>') + Text16510;
        FieldText[22] := FORMAT("TCS Base Amount",0,'<Integer><Decimals,3>') + Text16510;
        FieldText[23] := FORMAT("Posting Date",0,'<Day,2><Month,2><Year4>') + Text16510;
        FieldText[24] := FORMAT("Posting Date",0,'<Day,2><Month,2><Year4>') + Text16510;
        FieldText[25] := Text16510;
        FieldText[26] :=
          FORMAT(
            ("TCS %" + ("TCS %" * "Surcharge %" / 100)) * (1 + ("eCESS %" + "SHE CESS %") / 100),
            0,'<Sign><Integer><Decimals,5>') + Text16510;
      END;
    END;

    LOCAL PROCEDURE GetPrevProvRecepit@1500005(PrevBatchHeader@1500000 : Record 16515) : Code[20];
    BEGIN
      IF PrevBatchHeader."Original RRR No." = '' THEN
        IF NOT CONFIRM(STRSUBSTNO(NotFiledBatchQst,PrevBatchHeader."Financial Year",PrevBatchHeader.Quarter)) THEN
          ERROR('');
      EXIT(PrevBatchHeader."Original RRR No.");
    END;

    LOCAL PROCEDURE WriteToStream@1500009(FieldText@1500000 : ARRAY [100] OF Text[250];FieldCount@1500001 : Integer);
    VAR
      x@1500002 : Integer;
    BEGIN
      FOR x := 1 TO FieldCount DO
        IF FieldText[x] <> '' THEN
          OStream.WRITETEXT(FieldText[x]);
      OStream.WRITETEXT;
    END;

    PROCEDURE SetProperties@1500001(NewFileName@1500000 : Text[250];NewTANLocation@1500001 : Code[10];NewCurrentQuarter@1500002 : Option;NewFinancialYear@1500003 : Code[6];NewPersonName@1500004 : Text[30];NewDesignation@1500005 : Text[30];NewCreationDate@1500006 : Date;NewCalledFromY@1500007 : Boolean);
    BEGIN
      ServerFile := NewFileName;
      TCANLocation := NewTANLocation;
      CurrentQuarter := NewCurrentQuarter;
      FinancialYear := NewFinancialYear;
      PersonName := NewPersonName;
      Designation := NewDesignation;
      CreationDate := NewCreationDate;
      CalledFromY := NewCalledFromY;
    END;

    PROCEDURE AdjustAppliedEntries@1(VAR Form27EQEntry2@1500003 : Record 16517);
    VAR
      DtldCustLedgEntry1@1001 : Record 379;
      DtldCustLedgEntry2@1000 : Record 379;
      CustLedEntry@1500001 : Record 21;
      CustLedEntry2@1500002 : Record 21;
      Form27EQEntry3@1500000 : Record 16517;
    BEGIN
      CustLedEntry.SETCURRENTKEY("Document No.");
      CustLedEntry.SETRANGE("Document No.",Form27EQEntry2."Document No.");
      IF NOT CustLedEntry.FINDFIRST THEN
        EXIT;

      DtldCustLedgEntry1.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.",CustLedEntry."Entry No.");
      DtldCustLedgEntry1.SETRANGE(Unapplied,FALSE);
      IF DtldCustLedgEntry1.FIND('-') THEN
        REPEAT
          IF DtldCustLedgEntry1."Cust. Ledger Entry No." =
             DtldCustLedgEntry1."Applied Cust. Ledger Entry No."
          THEN BEGIN
            DtldCustLedgEntry2.INIT;
            DtldCustLedgEntry2.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
            DtldCustLedgEntry2.SETRANGE(
              "Applied Cust. Ledger Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            DtldCustLedgEntry2.SETRANGE("Entry Type",DtldCustLedgEntry2."Entry Type"::Application);
            DtldCustLedgEntry2.SETRANGE(Unapplied,FALSE);
            IF DtldCustLedgEntry2.FIND('-') THEN
              REPEAT
                IF DtldCustLedgEntry2."Cust. Ledger Entry No." <>
                   DtldCustLedgEntry2."Applied Cust. Ledger Entry No."
                THEN BEGIN
                  CustLedEntry2.SETCURRENTKEY("Entry No.");
                  CustLedEntry2.SETRANGE("Entry No.",DtldCustLedgEntry2."Cust. Ledger Entry No.");
                  IF CustLedEntry2.FIND('-') THEN
                    CustLedEntry2.MARK(TRUE);
                END;
              UNTIL DtldCustLedgEntry2.NEXT = 0;
          END ELSE BEGIN
            CustLedEntry2.SETCURRENTKEY("Entry No.");
            CustLedEntry2.SETRANGE("Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            IF CustLedEntry2.FIND('-') THEN
              CustLedEntry2.MARK(TRUE);
          END;
        UNTIL DtldCustLedgEntry1.NEXT = 0;

      CustLedEntry2.MARKEDONLY(TRUE);

      IF CustLedEntry2.FIND('-') THEN
        REPEAT
          Form27EQEntry3.SETRANGE("Document No.",CustLedEntry2."Document No.");
          IF Form27EQEntry3.FINDFIRST THEN
            IF Form27EQEntry3."TCS Paid" THEN
              IF Form27EQEntry3."Document Type" <> Form27EQEntry3."Document Type"::Payment THEN BEGIN
                Form27EQEntry2."Invoice Amount" += Form27EQEntry3."Invoice Amount";
                Form27EQEntry2."TCS Base Amount" += Form27EQEntry3."TCS Base Amount";
                Form27EQEntry2."Surcharge Base Amount" += Form27EQEntry3."Surcharge Base Amount";
                Form27EQEntry2."TCS Amount" += Form27EQEntry3."TCS Amount";
                Form27EQEntry2."Surcharge Amount" += Form27EQEntry3."Surcharge Amount";
                Form27EQEntry2."eCESS Amount" += Form27EQEntry3."eCESS Amount";
                Form27EQEntry2."SHE CESS Amount" += Form27EQEntry3."SHE CESS Amount";
                Form27EQEntry2."TCS Amount Including Surcharge" += Form27EQEntry3."TCS Amount Including Surcharge";
                Form27EQEntry2."Total TCS Including SHE CESS" += Form27EQEntry3."Total TCS Including SHE CESS";
                Form27EQEntry2."Bal. TCS Including SHE CESS" += Form27EQEntry3."Bal. TCS Including SHE CESS";
                Form27EQEntry2."Rem. Total TCS Incl. SHE CESS" += Form27EQEntry3."Rem. Total TCS Incl. SHE CESS";
              END;
        UNTIL CustLedEntry2.NEXT = 0;
    END;

    LOCAL PROCEDURE BooleanToYN@1500000(Bool@1500000 : Boolean) : Code[1];
    BEGIN
      IF Bool THEN
        EXIT('Y');
      EXIT('N');
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

