OBJECT Codeunit 137501 SCM Available to Pick UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1000 : Codeunit 132201;
      LibraryPurchase@1016 : Codeunit 130512;
      LibrarySales@1002 : Codeunit 130509;
      LibraryWarehouse@1008 : Codeunit 132204;
      ErrorTooManyPickLines@1003 : TextConst 'ENU=There were too many pick lines generated.';
      ErrorDifferentQty@1004 : TextConst 'ENU=Quantity on pick line different from quantity on shipment line.';
      LibraryUtility@1009 : Codeunit 131000;
      Assert@1005 : Codeunit 130000;
      ErrorNothingToHandle@1006 : TextConst 'ENU=Nothing to handle.';
      ErrorNothingToCreate@1011 : TextConst 'ENU=There is nothing to create.';
      InvtPutAwayMessage@1012 : TextConst 'ENU=Number of Invt. Put-away activities created: 1 out of a total of 1.';
      InvtPickMessage@1013 : TextConst 'ENU=Number of Invt. Pick activities created: 1 out of a total of 1.';
      MissingExpectedError@1014 : TextConst 'ENU="Unexpected message: "';
      LibraryRandom@1010 : Codeunit 130440;
      IsInitialized@1007 : Boolean;
      OverStockErr@1015 : TextConst 'ENU=item no. %1 is not available';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      // Setup Demonstration data.
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE DirectedPutawayAndPickPositive@1();
    VAR
      TestType@1018 : 'Partial,Positive,Negative';
    BEGIN
      DirectedPutawayAndPick(TestType::Positive);
    END;

    [Test]
    PROCEDURE DirectedPutawayAndPickNegative@3();
    VAR
      TestType@1019 : 'Partial,Positive,Negative';
    BEGIN
      DirectedPutawayAndPick(TestType::Negative);
    END;

    [Test]
    PROCEDURE DirectedPutawayAndPickPartial@4();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      DirectedPutawayAndPick(TestType::Partial);
    END;

    [Normal]
    LOCAL PROCEDURE DirectedPutawayAndPick@13(TestType@1000 : 'Partial,Positive,Negative');
    VAR
      PurchaseHeader@1020 : Record 38;
      PurchaseLine@1019 : Record 39;
      WhseReceiptLine@1015 : Record 7317;
      WhseActivityLine@1014 : Record 5767;
      SalesHeader@1011 : Record 36;
      SalesLine@1010 : Record 37;
      WhseShipmentHeader@1006 : Record 7320;
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseReceiptHeader@1005 : Record 7316;
      WhseShipmentLine@1007 : Record 7321;
      FirstSOQty@1002 : Decimal;
      SecondSOQty@1001 : Decimal;
    BEGIN
      Initialize;
      SetupLocation(Location,TRUE,TRUE,TRUE);
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",10);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      WhseReceiptLine.SETRANGE("Source Document",WhseReceiptLine."Source Document"::"Purchase Order");
      WhseReceiptLine.SETRANGE("Source No.",PurchaseHeader."No.");
      WhseReceiptLine.FINDFIRST;

      WhseReceiptHeader.GET(WhseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WhseReceiptHeader);

      RegisterWhseActivity(
        WhseActivityLine."Activity Type"::"Put-away",39,WhseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",9,'','');

      // Set up behaviour based on test type
      CASE TestType OF
        TestType::Partial:
          BEGIN
            FirstSOQty := 7;
            SecondSOQty := 4;
          END;
        TestType::Positive:
          BEGIN
            FirstSOQty := 5;
            SecondSOQty := 4;
          END;
        TestType::Negative:
          BEGIN
            FirstSOQty := 9;
            SecondSOQty := 4;
          END;
      END;

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",FirstSOQty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.AutoReserveSalesLine(SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      WhseShipmentLine.SETRANGE("Source Document",WhseShipmentLine."Source Document"::"Sales Order");
      WhseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseShipmentLine.FINDFIRST;

      WhseShipmentHeader.GET(WhseShipmentLine."No.");
      LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);

      RegisterWhseActivity(
        WhseActivityLine."Activity Type"::Pick,37,WhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",1,'','');

      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",SecondSOQty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      WhseShipmentLine.SETRANGE("Source Document",WhseShipmentLine."Source Document"::"Sales Order");
      WhseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseShipmentLine.FINDFIRST;

      WhseShipmentHeader.GET(WhseShipmentLine."No.");

      CASE TestType OF
        TestType::Positive:
          BEGIN
            LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);
            CheckPick(WhseActivityLine."Action Type"::Take,SalesHeader."No.",WhseShipmentLine.Quantity);
            CheckPick(WhseActivityLine."Action Type"::Place,SalesHeader."No.",WhseShipmentLine.Quantity);
          END;
        TestType::Partial:
          BEGIN
            LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);
            CheckPick(WhseActivityLine."Action Type"::Take,SalesHeader."No.",2);
            CheckPick(WhseActivityLine."Action Type"::Place,SalesHeader."No.",2);
          END;
        TestType::Negative:
          BEGIN
            ASSERTERROR LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);
            Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorNothingToHandle) > 0,'Unexpected error message');
            CLEARLASTERROR;
          END;
      END;
    END;

    [Test]
    PROCEDURE PickAndShipmentPositive@20();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      PickAndShipment(TestType::Positive);
    END;

    [Test]
    PROCEDURE PickAndShipmentNegative@21();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      PickAndShipment(TestType::Negative);
    END;

    [Test]
    PROCEDURE PickAndShipmentPartial@22();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      PickAndShipment(TestType::Partial);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PickPositive@16();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      Pick(TestType::Positive);
    END;

    [Test]
    [HandlerFunctions(ErrorHandler)]
    PROCEDURE PickNegative@17();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      Pick(TestType::Negative);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PickPartial@23();
    VAR
      TestType@1000 : 'Partial,Positive,Negative';
    BEGIN
      Pick(TestType::Partial);
    END;

    [Normal]
    LOCAL PROCEDURE PickAndShipment@10(TestType@1017 : 'Partial,Positive,Negative');
    VAR
      PurchaseHeader@1014 : Record 38;
      PurchaseLine@1013 : Record 39;
      WhseReceiptHeader@1010 : Record 7316;
      WhseReceiptLine@1009 : Record 7317;
      WhseActivityLine@1008 : Record 5767;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      WhseShipmentLine@1003 : Record 7321;
      WhseShipmentHeader@1002 : Record 7320;
      Item@1001 : Record 27;
      Location@1000 : Record 14;
      FirstSOQty@1016 : Decimal;
      SecondSOQty@1015 : Decimal;
    BEGIN
      Initialize;
      CLEAR(Location);
      SetupLocation(Location,FALSE,TRUE,TRUE);
      SetupWarehouse(Location.Code);
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",10);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      WhseReceiptLine.SETRANGE("Source Document",WhseReceiptLine."Source Document"::"Purchase Order");
      WhseReceiptLine.SETRANGE("Source No.",PurchaseHeader."No.");
      WhseReceiptLine.FINDFIRST;
      WhseReceiptLine.VALIDATE("Bin Code",'RECEIPT');
      WhseReceiptLine.MODIFY;

      WhseReceiptHeader.GET(WhseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WhseReceiptHeader);

      RegisterWhseActivity(
        WhseActivityLine."Activity Type"::"Put-away",39,WhseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",10,'RECEIPT','PICK');

      // Set up behaviour based on test type
      CASE TestType OF
        TestType::Partial:
          BEGIN
            FirstSOQty := 7;
            SecondSOQty := 5;
          END;
        TestType::Positive:
          BEGIN
            FirstSOQty := 6;
            SecondSOQty := 4;
          END;
        TestType::Negative:
          BEGIN
            FirstSOQty := 10;
            SecondSOQty := 5;
          END;
      END;

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",FirstSOQty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.AutoReserveSalesLine(SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      WhseShipmentLine.SETRANGE("Source Document",WhseShipmentLine."Source Document"::"Sales Order");
      WhseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseShipmentLine.FINDFIRST;
      WhseShipmentLine.VALIDATE("Bin Code",'SHIPMENT');
      WhseShipmentLine.MODIFY;

      WhseShipmentHeader.GET(WhseShipmentLine."No.");
      LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);

      CLEAR(SalesHeader);
      CLEAR(WhseShipmentHeader);
      CLEAR(WhseShipmentLine);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",SecondSOQty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      WhseShipmentLine.SETRANGE("Source Document",WhseShipmentLine."Source Document"::"Sales Order");
      WhseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseShipmentLine.FINDFIRST;
      WhseShipmentLine.VALIDATE("Bin Code",'SHIPMENT');
      WhseShipmentLine.MODIFY;

      WhseShipmentHeader.GET(WhseShipmentLine."No.");

      CASE TestType OF
        TestType::Positive:
          BEGIN
            LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);
            CheckPick(WhseActivityLine."Action Type"::Take,SalesHeader."No.",WhseShipmentLine.Quantity);
            CheckPick(WhseActivityLine."Action Type"::Place,SalesHeader."No.",WhseShipmentLine.Quantity);
          END;
        TestType::Partial:
          BEGIN
            LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);
            CheckPick(WhseActivityLine."Action Type"::Take,SalesHeader."No.",3);
            CheckPick(WhseActivityLine."Action Type"::Place,SalesHeader."No.",3);
          END;
        TestType::Negative:
          BEGIN
            ASSERTERROR LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);
            Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorNothingToHandle) > 0,'Unexpected error message');
            CLEARLASTERROR;
          END;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE Pick@15(TestType@1010 : 'Partial,Positive,Negative');
    VAR
      PurchaseHeader@1015 : Record 38;
      PurchaseLine@1014 : Record 39;
      WhseActivityLine@1009 : Record 5767;
      SalesHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      Item@1002 : Record 27;
      Location@1001 : Record 14;
      FirstSOQty@1016 : Decimal;
      SecondSOQty@1011 : Decimal;
    BEGIN
      Initialize;
      CLEAR(Location);
      SetupLocation(Location,FALSE,FALSE,TRUE);
      SetupWarehouse(Location.Code);
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",10);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateInvtPutPickPurchaseOrder(PurchaseHeader);

      RegisterWhseActivity(
        WhseActivityLine."Activity Type"::"Invt. Put-away",39,WhseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",10,'','PICK');

      // Set up behaviour based on test type
      CASE TestType OF
        TestType::Partial:
          BEGIN
            FirstSOQty := 7;
            SecondSOQty := 5;
          END;
        TestType::Positive:
          BEGIN
            FirstSOQty := 6;
            SecondSOQty := 4;
          END;
        TestType::Negative:
          BEGIN
            FirstSOQty := 10;
            SecondSOQty := 5;
          END;
      END;

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",FirstSOQty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.AutoReserveSalesLine(SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickSalesOrder(SalesHeader);

      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",SecondSOQty);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickSalesOrder(SalesHeader);

      CASE TestType OF
        TestType::Positive:
          BEGIN
            LibraryWarehouse.CreateInvtPutPickSalesOrder(SalesHeader);
            CheckPick(WhseActivityLine."Action Type"::Take,SalesHeader."No.",SalesLine.Quantity);
          END;
        TestType::Partial:
          BEGIN
            LibraryWarehouse.CreateInvtPutPickSalesOrder(SalesHeader);
            CheckPick(WhseActivityLine."Action Type"::Take,SalesHeader."No.",3);
          END;
        TestType::Negative:
          LibraryWarehouse.CreateInvtPutPickSalesOrder(SalesHeader);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByPeriodHandler)]
    PROCEDURE ShowItemAvailabilityByPeriodFromPick@24();
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      // Bug 335697: http://vstfnav:8080/tfs/web/wi.aspx?pcguid=d3e6cf82-0023-4026-88e3-9235f1398970&id=335697
      // The test verification is that the correct page opens (corresponds to page handler)
      SetupWhseActivityLineForShowItemAvailability(WarehouseActivityLine);
      WarehouseActivityLine.ShowItemAvailabilityByPeriod;
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByLocationHandler)]
    PROCEDURE ShowItemAvailabilityByLocationFromPick@25();
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      // Bug 335697: http://vstfnav:8080/tfs/web/wi.aspx?pcguid=d3e6cf82-0023-4026-88e3-9235f1398970&id=335697
      // The test verification is that the correct page opens (corresponds to page handler)
      SetupWhseActivityLineForShowItemAvailability(WarehouseActivityLine);
      WarehouseActivityLine.ShowItemAvailabilityByLocation;
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByVariantHandler)]
    PROCEDURE ShowItemAvailabilityByVariantFromPick@27();
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      // Bug 335697: http://vstfnav:8080/tfs/web/wi.aspx?pcguid=d3e6cf82-0023-4026-88e3-9235f1398970&id=335697
      // The test verification is that the correct page opens (corresponds to page handler)
      SetupWhseActivityLineForShowItemAvailability(WarehouseActivityLine);
      WarehouseActivityLine.ShowItemAvailabilityByVariant;
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByEventHandler)]
    PROCEDURE ShowItemAvailabilityByEventFromPick@28();
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      // Bug 335697: http://vstfnav:8080/tfs/web/wi.aspx?pcguid=d3e6cf82-0023-4026-88e3-9235f1398970&id=335697
      // The test verification is that the correct page opens (corresponds to page handler)
      SetupWhseActivityLineForShowItemAvailability(WarehouseActivityLine);
      WarehouseActivityLine.ShowItemAvailabilityByEvent;
    END;

    [Test]
    PROCEDURE SalesOrderAvailabilityByVariant@30();
    VAR
      SalesHeader@1001 : Record 36;
      TempItemVariant@1008 : TEMPORARY Record 5401;
      GetSourceDocOutbound@1000 : Codeunit 5752;
      i@1003 : Integer;
      ItemVariantQuantity@1011 : Decimal;
    BEGIN
      // [SCENARIO 361061.1] Verify overstock by Variant in case of different Variant codes used in one Sales Order
      Initialize;

      // [GIVEN] 2 items "Item[i]", 2 Variant Codes "Var[i][j]" per each "Item[i]"
      CreateItemsWithVariants(TempItemVariant,2,2);

      // [GIVEN] Sales Order with "Shipping Advice" = COMPLETE, several Sales Lines per each "Var[i][j]"
      // [GIVEN] All item variants have exact inventory to comply the sales order
      MockSalesHeader(SalesHeader);
      TempItemVariant.FINDSET;
      REPEAT
        ItemVariantQuantity := 0;
        FOR i := 1 TO 2 DO
          ItemVariantQuantity += MockSalesLine(SalesHeader,TempItemVariant);
        MockPositiveILE(TempItemVariant,ItemVariantQuantity);
      UNTIL TempItemVariant.NEXT = 0;

      // [GIVEN] Additional Sales Line with "Var[1][2]" for overstock condition
      TempItemVariant.FINDFIRST;
      TempItemVariant.SETRANGE("Item No.",TempItemVariant."Item No.");
      TempItemVariant.FINDLAST;
      MockSalesLine(SalesHeader,TempItemVariant);

      // [WHEN] Check Sales Order Availability
      ASSERTERROR GetSourceDocOutbound.CheckSalesHeader(SalesHeader,TRUE);

      // [THEN] Error: 'item no. "Item[1]" is not available'
      Assert.ExpectedError(STRSUBSTNO(OverStockErr,TempItemVariant."Item No."));
    END;

    [Test]
    PROCEDURE TransferOrderAvailabilityByVariant@40();
    VAR
      TransferHeader@1001 : Record 5740;
      TempItemVariant@1008 : TEMPORARY Record 5401;
      GetSourceDocOutbound@1000 : Codeunit 5752;
      i@1003 : Integer;
      ItemVariantQuantity@1011 : Decimal;
    BEGIN
      // [SCENARIO 361061.2] Verify overstock by Variant in case of different Variant codes used in one Transfer Order
      Initialize;

      // [GIVEN] 2 items "Item[i]", 2 Variant Codes "Var[i][j]" per each "Item[i]"
      CreateItemsWithVariants(TempItemVariant,2,2);

      // [GIVEN] Transfer Order with "Shipping Advice" = COMPLETE, several Transfer Lines per each "Var[i][j]"
      // [GIVEN] All item variants have exact inventory to comply the Transfer Order
      MockTransferHeader(TransferHeader);
      TempItemVariant.FINDSET;
      REPEAT
        ItemVariantQuantity := 0;
        FOR i := 1 TO 2 DO
          ItemVariantQuantity += MockTransferLine(TempItemVariant,TransferHeader."No.");
        MockPositiveILE(TempItemVariant,ItemVariantQuantity);
      UNTIL TempItemVariant.NEXT = 0;

      // [GIVEN] Additional Transfer Line with "Var[1][2]" for overstock condition
      TempItemVariant.FINDFIRST;
      TempItemVariant.SETRANGE("Item No.",TempItemVariant."Item No.");
      TempItemVariant.FINDLAST;
      MockTransferLine(TempItemVariant,TransferHeader."No.");

      // [WHEN] Check Transfer Order Availability
      ASSERTERROR GetSourceDocOutbound.CheckTransferHeader(TransferHeader,TRUE);

      // [THEN] Error: 'item no. "Item[1]" is not available'
      Assert.ExpectedError(STRSUBSTNO(OverStockErr,TempItemVariant."Item No."));
    END;

    LOCAL PROCEDURE SetupWhseActivityLineForShowItemAvailability@29(VAR WarehouseActivityLine@1000 : Record 5767);
    BEGIN
      Initialize;
      WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::Pick;
      WarehouseActivityLine."Item No." := LibraryInventory.CreateItemNo;
    END;

    [Normal]
    LOCAL PROCEDURE SetupWarehouse@7(LocationCode@1002 : Code[10]);
    VAR
      WarehouseEmployee@1000 : Record 7301;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE SetupLocation@6(VAR Location@1000 : Record 14;IsDirected@1001 : Boolean;ShipmentRequired@1002 : Boolean;BinMandatory@1003 : Boolean);
    VAR
      Bin@1004 : Record 7354;
    BEGIN
      Location.INIT;
      Location.SETRANGE("Bin Mandatory",BinMandatory);
      Location.SETRANGE("Require Shipment",ShipmentRequired);
      Location.SETRANGE("Require Receive",TRUE);
      Location.SETRANGE("Require Pick",TRUE);
      Location.SETRANGE("Require Put-away",TRUE);
      Location.SETRANGE("Directed Put-away and Pick",IsDirected);

      IF NOT Location.FINDFIRST THEN
        IF NOT IsDirected THEN BEGIN
          LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
          Location.VALIDATE("Require Put-away",TRUE);
          Location.VALIDATE("Require Pick",TRUE);
          Location.VALIDATE("Require Receive",ShipmentRequired);
          Location.VALIDATE("Require Shipment",ShipmentRequired);
          Location.VALIDATE("Bin Mandatory",BinMandatory);
          Location.MODIFY(TRUE);
          CreateBin(Bin,Location.Code,'RECEIPT','','');
          CreateBin(Bin,Location.Code,'PICK','','');
          CreateBin(Bin,Location.Code,'SHIPMENT','','');
        END;

      Location.VALIDATE("Always Create Pick Line",FALSE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBin@18(VAR Bin@1000 : Record 7354;LocationCode@1001 : Text[10];BinCode@1002 : Text[20];ZoneCode@1003 : Text[10];BinTypeCode@1004 : Text[10]);
    BEGIN
      CLEAR(Bin);
      Bin.INIT;
      Bin.VALIDATE("Location Code",LocationCode);
      Bin.VALIDATE(Code,BinCode);
      Bin.VALIDATE("Zone Code",ZoneCode);
      Bin.VALIDATE("Bin Type Code",BinTypeCode);
      Bin.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateItemsWithVariants@33(VAR ItemVariant@1000 : Record 5401;ItemCnt@1001 : Integer;VariantCntPerItem@1002 : Integer);
    VAR
      ItemNo@1005 : Code[20];
      i@1003 : Integer;
      j@1004 : Integer;
    BEGIN
      FOR i := 1 TO ItemCnt DO BEGIN
        ItemNo := MockItem;
        FOR j := 1 TO VariantCntPerItem DO BEGIN
          ItemVariant.INIT;
          ItemVariant."Item No." := ItemNo;
          ItemVariant.Code := MockItemVariantCode(ItemNo);
          ItemVariant.INSERT;
        END;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE CheckPick@19(LineType@1000 : 'Take,Place';SalesOrderNo@1003 : Code[20];ExpectedQty@1001 : Decimal);
    VAR
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      CLEAR(WhseActivityLine);
      WhseActivityLine.SETRANGE("Source Type",37);
      WhseActivityLine.SETRANGE("Source Document",WhseActivityLine."Source Document"::"Sales Order");
      WhseActivityLine.SETRANGE("Source No.",SalesOrderNo);
      WhseActivityLine.SETRANGE("Action Type",LineType);
      Assert.AreEqual(WhseActivityLine.COUNT,1,ErrorTooManyPickLines);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual(WhseActivityLine.Quantity,ExpectedQty,ErrorDifferentQty);
    END;

    [Normal]
    LOCAL PROCEDURE RegisterWhseActivity@14(ActivityType@1005 : ',Put-away,Pick,Movement,Invt. Put-away,Invt. Pick';SourceType@1000 : Integer;SourceDocument@1003 : 'Sales Order,Purchase Order';SourceNo@1004 : Code[20];QtyToHandle@1006 : Decimal;TakeBinCode@1007 : Code[10];PlaceBinCode@1008 : Code[10]);
    VAR
      WhseActivityLine@1001 : Record 5767;
      WhseActivityHeader@1002 : Record 5766;
    BEGIN
      CLEAR(WhseActivityLine);
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Source Type",SourceType);
      WhseActivityLine.SETRANGE("Source Document",SourceDocument);
      WhseActivityLine.SETRANGE("Source No.",SourceNo);
      WhseActivityLine.FINDSET;
      REPEAT
        WhseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
        IF (WhseActivityLine."Action Type" = WhseActivityLine."Action Type"::Take) AND (TakeBinCode <> '') THEN BEGIN
          WhseActivityLine."Bin Code" := TakeBinCode;
        END ELSE
          IF (WhseActivityLine."Action Type" = WhseActivityLine."Action Type"::Place) AND (PlaceBinCode <> '') THEN
            WhseActivityLine."Bin Code" := PlaceBinCode;

        WhseActivityLine.MODIFY;
      UNTIL WhseActivityLine.NEXT = 0;

      CLEAR(WhseActivityHeader);
      WhseActivityHeader.SETRANGE(Type,ActivityType);
      WhseActivityHeader.SETRANGE("No.",WhseActivityLine."No.");
      WhseActivityHeader.FINDFIRST;
      IF (ActivityType = ActivityType::"Put-away") OR (ActivityType = ActivityType::Pick) THEN BEGIN
        LibraryWarehouse.RegisterWhseActivity(WhseActivityHeader);
      END ELSE
        LibraryWarehouse.PostInventoryActivity(WhseActivityHeader,FALSE);
    END;

    LOCAL PROCEDURE MockItem@32() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::Item);
        INSERT;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE MockItemVariantCode@44(ItemNo@1000 : Code[20]) : Code[10];
    VAR
      ItemVariant@1001 : Record 5401;
    BEGIN
      WITH ItemVariant DO BEGIN
        INIT;
        "Item No." := ItemNo;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Item Variant");
        INSERT;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE MockPositiveILE@37(ItemVariant@1001 : Record 5401;ILEQty@1004 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      LastEntryNo@1003 : Integer;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        FINDLAST;
        LastEntryNo := "Entry No.";
        INIT;
        "Entry No." := LastEntryNo + 1;
        "Item No." := ItemVariant."Item No.";
        "Variant Code" := ItemVariant.Code;
        Quantity := ILEQty;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockSalesHeader@31(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Sales Header");
        "Shipping Advice" := "Shipping Advice"::Complete;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockSalesLine@48(SalesHeader@1001 : Record 36;ItemVariant@1002 : Record 5401) : Decimal;
    VAR
      SalesLine@1000 : Record 37;
      LastLineNo@1004 : Integer;
    BEGIN
      WITH SalesLine DO BEGIN
        LastLineNo := 0;
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FINDLAST THEN
          LastLineNo := "Line No.";
        INIT;
        "Document Type" := SalesHeader."Document Type";
        "Document No." := SalesHeader."No.";
        "Line No." := LastLineNo + 10000;
        Type := Type::Item;
        "No." := ItemVariant."Item No.";
        "Variant Code" := ItemVariant.Code;
        "Outstanding Qty. (Base)" := LibraryRandom.RandDec(100,2);
        INSERT;
        EXIT("Outstanding Qty. (Base)");
      END;
    END;

    LOCAL PROCEDURE MockTransferHeader@41(VAR TransferHeader@1000 : Record 5740);
    BEGIN
      WITH TransferHeader DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Transfer Header");
        "Shipping Advice" := "Shipping Advice"::Complete;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockTransferLine@43(ItemVariant@1003 : Record 5401;TransferHeaderNo@1000 : Code[20]) : Decimal;
    VAR
      TransferLine@1001 : Record 5741;
      LastLineNo@1002 : Integer;
    BEGIN
      WITH TransferLine DO BEGIN
        LastLineNo := 0;
        SETRANGE("Document No.",TransferHeaderNo);
        IF FINDLAST THEN
          LastLineNo := "Line No.";
        INIT;
        "Document No." := TransferHeaderNo;
        "Line No." := LastLineNo + 10000;
        "Item No." := ItemVariant."Item No.";
        "Variant Code" := ItemVariant.Code;
        "Outstanding Qty. (Base)" := LibraryRandom.RandDec(100,2);
        INSERT;
        EXIT("Outstanding Qty. (Base)");
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@2(Message@1000 : Text[1024]);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE ErrorHandler@11(Message@1000 : Text[1024]);
    BEGIN
      Message := DELCHR(Message,'<>');
      IF NOT (Message IN [ErrorNothingToCreate,InvtPutAwayMessage,InvtPickMessage]) THEN
        ERROR(MissingExpectedError + Message);
    END;

    [ModalPageHandler]
    PROCEDURE ItemAvailabilityByPeriodHandler@26(VAR ItemAvailabilityByPeriods@1000 : Page 157;VAR Response@1001 : Action);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ItemAvailabilityByLocationHandler@34(VAR ItemAvailabilityByLocation@1000 : Page 492;VAR Response@1001 : Action);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ItemAvailabilityByVariantHandler@36(VAR ItemAvailabilityByVariant@1000 : Page 5414;VAR Response@1001 : Action);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ItemAvailabilityByEventHandler@38(VAR ItemAvailabilityByEvent@1000 : Page 5530;VAR Response@1001 : Action);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
    }
    END.
  }
}

