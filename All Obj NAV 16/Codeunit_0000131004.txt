OBJECT Codeunit 131004 Library - Variable Storage
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      Variables@1000 : ARRAY [25] OF Variant;
      EndIndex@1001 : Integer;
      StartIndex@1006 : Integer;
      AssertEmptyError@1005 : TextConst 'ENU=Queue is not empty.';
      AssertFullError@1007 : TextConst 'ENU=Queue is empty.';
      TotalCount@1008 : Integer;
      OverflowError@1004 : TextConst 'ENU=Queue overflow.';
      UnderflowError@1003 : TextConst 'ENU=Queue underflow.';
      OutOfBoundsErr@1009 : TextConst 'ENU=Index out of bounds.';

    PROCEDURE AssertEmpty@12();
    BEGIN
      Assert.AreEqual(0,TotalCount,AssertEmptyError);
    END;

    PROCEDURE AssertFull@4();
    BEGIN
      Assert.AreEqual(MaxLength,TotalCount,AssertFullError);
    END;

    PROCEDURE AssertNotOverflow@16();
    BEGIN
      Assert.IsFalse(TotalCount + 1 > MaxLength,OverflowError);
    END;

    PROCEDURE AssertNotUnderflow@17();
    BEGIN
      Assert.IsTrue(TotalCount > 0,UnderflowError);
    END;

    PROCEDURE AssertPeekAvailable@23(Index@1000 : Integer);
    BEGIN
      Assert.IsTrue(Index > 0,OutOfBoundsErr);
      Assert.IsTrue(Index <= TotalCount,OutOfBoundsErr);
    END;

    PROCEDURE Clear@8();
    BEGIN
      StartIndex := 0;
      EndIndex := 0;
      TotalCount := 0;
    END;

    PROCEDURE Dequeue@3(VAR Variable@1000 : Variant);
    BEGIN
      StartIndex := (StartIndex MOD MaxLength) + 1;
      AssertNotUnderflow;
      Variable := Variables[StartIndex];
      TotalCount -= 1;
    END;

    PROCEDURE Peek@18(VAR Variable@1000 : Variant;Index@1001 : Integer);
    BEGIN
      AssertPeekAvailable(Index);
      Variable := Variables[((StartIndex + (Index - 1)) MOD MaxLength) + 1];
    END;

    PROCEDURE Enqueue@2(Variable@1000 : Variant);
    BEGIN
      EndIndex := (EndIndex MOD MaxLength) + 1;
      AssertNotOverflow;
      Variables[EndIndex] := Variable;
      TotalCount += 1;
    END;

    PROCEDURE Length@1() : Integer;
    BEGIN
      EXIT(TotalCount);
    END;

    PROCEDURE MaxLength@5() : Integer;
    BEGIN
      EXIT(ARRAYLEN(Variables));
    END;

    PROCEDURE DequeueText@21() : Text;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Dequeue(ExpectedValue);
      EXIT(FORMAT(ExpectedValue));
    END;

    PROCEDURE DequeueDecimal@72() : Decimal;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Dequeue(ExpectedValue);
      EXIT(ExpectedValue);
    END;

    PROCEDURE DequeueInteger@6() : Integer;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Dequeue(ExpectedValue);
      EXIT(ExpectedValue);
    END;

    PROCEDURE DequeueDate@68() : Date;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Dequeue(ExpectedValue);
      EXIT(ExpectedValue);
    END;

    PROCEDURE DequeueTime@70() : Time;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Dequeue(ExpectedValue);
      EXIT(ExpectedValue);
    END;

    PROCEDURE DequeueBoolean@7() : Boolean;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Dequeue(ExpectedValue);
      EXIT(ExpectedValue);
    END;

    PROCEDURE PeekText@15(Index@1001 : Integer) : Text;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Peek(ExpectedValue,Index);
      EXIT(FORMAT(ExpectedValue));
    END;

    PROCEDURE PeekDecimal@14(Index@1001 : Integer) : Decimal;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Peek(ExpectedValue,Index);
      EXIT(ExpectedValue);
    END;

    PROCEDURE PeekInteger@13(Index@1001 : Integer) : Integer;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Peek(ExpectedValue,Index);
      EXIT(ExpectedValue);
    END;

    PROCEDURE PeekDate@11(Index@1001 : Integer) : Date;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Peek(ExpectedValue,Index);
      EXIT(ExpectedValue);
    END;

    PROCEDURE PeekTime@10(Index@1001 : Integer) : Time;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Peek(ExpectedValue,Index);
      EXIT(ExpectedValue);
    END;

    PROCEDURE PeekBoolean@9(Index@1001 : Integer) : Boolean;
    VAR
      ExpectedValue@1000 : Variant;
    BEGIN
      Peek(ExpectedValue,Index);
      EXIT(ExpectedValue);
    END;

    BEGIN
    END.
  }
}

