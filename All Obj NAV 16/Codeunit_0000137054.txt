OBJECT Codeunit 137054 SCM Supply Planning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      GlobalPurchaseHeader@1024 : ARRAY [2] OF Record 38;
      GlobalSalesHeader@1023 : ARRAY [3] OF Record 36;
      GlobalProductionOrder@1025 : ARRAY [3] OF Record 5405;
      ItemJournalTemplate@1014 : Record 82;
      ItemJournalBatch@1013 : Record 233;
      OutputItemJournalTemplate@1015 : Record 82;
      OutputItemJournalBatch@1017 : Record 233;
      LocationBlue@1011 : Record 14;
      LocationRed@1001 : Record 14;
      RequisitionLine@1002 : Record 246;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryManufacturing@1005 : Codeunit 132202;
      LibraryPlanning@1009 : Codeunit 132203;
      LibraryWarehouse@1012 : Codeunit 132204;
      LibrarySales@1019 : Codeunit 130509;
      LibraryPurchase@1018 : Codeunit 130512;
      LibraryService@1022 : Codeunit 131902;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryVariableStorage@1035 : Codeunit 131004;
      Assert@1004 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      NumberOfLineEqualError@1007 : TextConst 'ENU=Number of Lines must be same.';
      NumberOfLineNotEqualError@1008 : TextConst 'ENU=Number of Lines must not be same.';
      GlobalItemNo@1003 : Code[20];
      MaximumOrderQuantityErr@1020 : TextConst 'ENU=Quantity(%1) on RequisitionLine is more than Maximum Order Quantity(%2) of the Item.';
      SafetyStockQuantityErr@1021 : TextConst 'ENU=After calculating supply and demand of the Item, its inventory(%1) does not meet Safety Stock Quantity(%2). Supply should meet both demand and Safety Stock Quantity.';
      RequisitionLineNotEmptyErr@1026 : TextConst 'ENU=There should be no Requisition Line.';
      OrderDateErr@1027 : TextConst 'ENU=Order Date (%1) on Requisition Line is not equal to Order Date (%2) on Purchase Line.';
      ExceptionMsg@1028 : TextConst 'ENU=Exception: The projected available inventory is below Safety Stock Quantity %1 on %2.';
      RequisitionWorksheetErr@1029 : TextConst 'ENU=Requisition Worksheet cannot be used to create Prod. Order replenishment.';
      ReqLineOrderDateErr@1030 : TextConst 'ENU=Order Date (%1) on Requisition Line is not equal to Starting Date on Planning Worksheet.';
      ExpectedReceiptDateErr@1032 : TextConst 'ENU=Expected Receipt Date in Reservation Entry is not correct.';
      QuantityErr@1031 : TextConst 'ENU=Quantity on Requisition Line is incorrect';
      CouldNotChangeSupplyTxt@1033 : TextConst 'ENU=The supply type could not be changed in order';
      WrongMessageTxt@1034 : TextConst 'ENU=Wrong message appears.';
      LineCountErr@1036 : TextConst 'ENU=Wrong line count in planning worksheet.';
      ProjectedInventoryNegativeMsg@1037 : TextConst 'ENU=Projected inventory goes negative.';
      ConfirmTok@1045 : TextConst 'ENU=Confirm';
      AvailabilityTok@1042 : TextConst 'ENU=Availability';
      ReservationEntryTok@1041 : TextConst 'ENU=ReservationEntry';

    [Test]
    PROCEDURE DemandSupplyOutsideReschedPeriodWeekReplenishProdOrder@15();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyReschedulingPeriodWeek('<1W>',FALSE);  // Rescheduling Period, Action Message Reschedule -False.
    END;

    [Test]
    PROCEDURE DemandSupplyPartialInReschedPeriodTwoWeekReplenishProdOrder@98();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyReschedulingPeriodWeek('<2W>',TRUE);  // Rescheduling Period, Action Message Reschedule -True.
    END;

    LOCAL PROCEDURE DemandSupplyReschedulingPeriodWeek@13(ReschedulingPeriod@1006 : Text[30];ActionMessageReschedule@1005 : Boolean);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",ReschedulingPeriod,ReschedulingPeriod,TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales, Purchase and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(40),GetRandomDateUsingWorkDate(5),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[1],LibraryRandom.RandDec(10,2) + 40,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for different Action Messages.
      // Action Message: Cancel.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[2],SupplyQuantityValue[2],0,0D,'','');

      // Action Message: New.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2],0D,'','');

      // Action Message: Reschedule otherwise Cancel and New.
      IF ActionMessageReschedule THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Reschedule,DemandDateValue[1],0,DemandQuantityValue[1],SupplyDateValue[1],'',
          '');
        VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLineCount(4);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyOutsideReschedPeriodWithoutReserveFlexibilityNoneReplenishProdOrder@124();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyOutsideReschedulingPeriodFlexibilityNone(FALSE);  // Reserve -False;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailableSalesLinesPageHandler)]
    PROCEDURE DemandSupplyOutsideReschedPeriodWithReserveFlexibilityNoneReplenishProdOrder@137();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyOutsideReschedulingPeriodFlexibilityNone(TRUE);  // Reserve -True;
    END;

    LOCAL PROCEDURE DemandSupplyOutsideReschedulingPeriodFlexibilityNone@41(Reserve@1004 : Boolean);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply setup with Reservation if required and Random Values taking Global Variable for Sales, Purchase and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(40),GetRandomDateUsingWorkDate(5),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[1],LibraryRandom.RandDec(10,2) + 40,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');
      UpdatePlanningFlexibilityOnProduction(GlobalProductionOrder[1]."No.",GlobalProductionOrder[1].Status);

      IF Reserve THEN
        ReservePurchaseLine(GlobalPurchaseHeader[1]."No.");  // Reservation on Page Handler ReservationPageHandler.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for different Action Messages.
      // Action Message: New.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'','');

      // Action Message: New otherwise Cancel and New.
      IF Reserve THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,
          DemandQuantityValue[2] - DemandQuantityValue[1] - SupplyQuantityValue[2],0D,'','');
        VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[2],SupplyQuantityValue[2],0,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2] - DemandQuantityValue[1],0D,
          '','');
        VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyInReschedPeriodTwoMonthWithProdOrderReplenishProdOrder@47();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyInReschedulingPeriodMonth(TRUE);  // Production -True.
    END;

    [Test]
    PROCEDURE DemandSupplyInReschedPeriodTwoMonthWithoutProdOrderReplenishProdOrder@67();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyInReschedulingPeriodMonth(FALSE);  // Production -False.
    END;

    LOCAL PROCEDURE DemandSupplyInReschedulingPeriodMonth@32(Production@1006 : Boolean);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<2M>','<2M>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales, Purchase and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(40),GetRandomDateUsingWorkDate(5),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[1],LibraryRandom.RandDec(10,2) + 40,0,0,0);
      IF Production THEN BEGIN
        CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
        CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');
        UpdatePlanningFlexibilityOnProduction(GlobalProductionOrder[1]."No.",GlobalProductionOrder[1].Status);
      END;
      CreatePurchaseOrder(GlobalPurchaseHeader[1],Item."No.",SupplyQuantityValue[2],SupplyDateValue[2]);  // Dates based on WORKDATE.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for Action Message: Reschedule and Change Quantity.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[2],
        DemandQuantityValue[2] + DemandQuantityValue[1],SupplyDateValue[2],'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyOutsideReschedPeriodCarryOutActionMessageReplenishProdOrder@75();
    VAR
      Item@1000 : Record 27;
      PlanningLinesCountBeforeCarryOut@1003 : Integer;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales, Purchase and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(40),GetRandomDateUsingWorkDate(5),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[1],LibraryRandom.RandDec(10,2) + 40,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Exercise: Carry Out Action Message on Planning Worksheet lines.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
    END;

    [Test]
    PROCEDURE DemandSupplyOutsideReschedPeriodWeekReplenishPurchase@40();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyReschedulingPeriodForReplenishmentPurchase('<1W>',FALSE);  // Action Message Reschedule -False.
    END;

    [Test]
    PROCEDURE DemandSupplyPartialInReschedPeriodYearReplenishPurchase@39();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyReschedulingPeriodForReplenishmentPurchase('<1Y>',TRUE);  // Action Message Reschedule -True.
    END;

    LOCAL PROCEDURE DemandSupplyReschedulingPeriodForReplenishmentPurchase@38(ReschedulingPeriod@1006 : Text[30];ActionMessageReschedule@1005 : Boolean);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,ReschedulingPeriod,ReschedulingPeriod,TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(10,2) + 40,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for different Action Messages.
      IF ActionMessageReschedule THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[1],
          DemandQuantityValue[1] + DemandQuantityValue[2],SupplyDateValue[1],'','');
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2],0D,'','');
        VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyWithoutReserveFlexibilityNoneReplenishPurchase@37();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyInReschedulingPeriodMonthFlexibilityNone(FALSE);  // Reserve -False;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailableSalesLinesPageHandler)]
    PROCEDURE DemandSupplyWithReserveFlexibilityNoneReplenishPurchase@36();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyInReschedulingPeriodMonthFlexibilityNone(TRUE);  // Reserve -True;
    END;

    LOCAL PROCEDURE DemandSupplyInReschedulingPeriodMonthFlexibilityNone@35(Reserve@1004 : Boolean);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,'<1M>','<1M>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with Random Value taking Global Variable for Sales and Purchase, with reservation if required.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(10,2) + 40,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
      UpdatePlanningFlexibilityOnPurchase(GlobalPurchaseHeader[1]."No.");
      IF Reserve THEN
        ReservePurchaseLine(GlobalPurchaseHeader[1]."No.");  // Reservation on Page Handler ReservationPageHandler.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for different Action Messages.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,
        DemandQuantityValue[1] + DemandQuantityValue[2] - SupplyQuantityValue[1],0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyInReschedPeriodCarryOutActionMessageReplenishPurchase@18();
    VAR
      Item@1000 : Record 27;
      PlanningLinesCountBeforeCarryOut@1003 : Integer;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with Random Value taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(50),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2) + 60,LibraryRandom.RandDec(10,2) + 180,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(10,2) + 40,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Exercise: Carry Out Action Message on Planning Worksheet lines.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
    END;

    [Test]
    PROCEDURE DemandSupplyOnMultipleLocations@5();
    VAR
      Item@1001 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply and Demand with Random Value taking Global Variable for Sales and Production and different locations- Blue and Red.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(80),GetRandomDateUsingWorkDate(60),GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 80,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(15),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'',LocationBlue.Code);

      UpdateLocationForSales(GlobalSalesHeader[2]."No.",LocationRed.Code);
      UpdateLocationForSales(GlobalSalesHeader[3]."No.",LocationBlue.Code);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for Action messages on all locations.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'','');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2],0D,LocationRed.Code,'');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[3],SupplyQuantityValue[1],
        DemandQuantityValue[3],SupplyDateValue[1],LocationBlue.Code,'');
      VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyOnMultipleLocationsWithPlanningForProductionLocation@6();
    VAR
      Item@1001 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply and Demand with Random Value taking Global Variable for Sales and Production and different locations- Blue and Red.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(80),GetRandomDateUsingWorkDate(60),GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 80,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(15),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'',LocationBlue.Code);

      UpdateLocationForSales(GlobalSalesHeader[2]."No.",LocationRed.Code);
      UpdateLocationForSales(GlobalSalesHeader[3]."No.",LocationBlue.Code);

      // Exercise: Calculate Regenerative Plan for Location Blue only.
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",LocationBlue.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for Location - Blue.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[3],SupplyQuantityValue[1],
        DemandQuantityValue[3],SupplyDateValue[1],LocationBlue.Code,'');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyOnMultipleLocationsWithPlanningForSalesLocation@11();
    VAR
      Item@1001 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply and Demand with Random Value taking Global Variable for Sales and Production and different locations- Blue and Red.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(80),GetRandomDateUsingWorkDate(60),GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 80,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(15),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'',LocationBlue.Code);

      UpdateLocationForSales(GlobalSalesHeader[2]."No.",LocationRed.Code);
      UpdateLocationForSales(GlobalSalesHeader[3]."No.",LocationBlue.Code);

      // Exercise: Calculate Regenerative Plan for Location Red only.
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",LocationRed.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for Location - Red.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2],0D,LocationRed.Code,'');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyOnMultipleLocationsWithVariant@7();
    VAR
      Item@1001 : Record 27;
      ItemVariant@1003 : Record 5401;
      SalesLine@1002 : Record 37;
      SupplyQuantityValue@1006 : ARRAY [5] OF Decimal;
      SupplyDateValue@1005 : ARRAY [5] OF Date;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply and Demand with Random Value taking Global Variable for Sales and Production and different locations with Variant.
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(80),GetRandomDateUsingWorkDate(60),GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 80,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(15),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'',LocationBlue.Code);

      UpdateLocationForSales(GlobalSalesHeader[2]."No.",LocationRed.Code);
      UpdateLocationForSales(GlobalSalesHeader[3]."No.",LocationBlue.Code);
      UpdateVariantOnSales(SalesLine,GlobalSalesHeader[1]."No.",ItemVariant.Code);

      // Exercise: Calculate Regenerative Plan with Variant Filter only.
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Variant Filter",ItemVariant.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines for Item with Variant.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'',ItemVariant.Code);
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyOnMultipleLocationsCarryOutActionMessage@10();
    VAR
      Item@1001 : Record 27;
      PlanningLinesCountBeforeCarryOut@1009 : Integer;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply and Demand with Random Value taking Global Variable for Sales and Production and different locations.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(80),GetRandomDateUsingWorkDate(60),GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 80,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(15),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'',LocationBlue.Code);

      UpdateLocationForSales(GlobalSalesHeader[2]."No.",LocationRed.Code);
      UpdateLocationForSales(GlobalSalesHeader[3]."No.",LocationBlue.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Exercise: Carry Out Action Message on Planning Worksheet lines.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
    END;

    [Test]
    PROCEDURE SupplyFromSafetyStockOnly@12();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Setup: Create Item with Safety Stock without supply or demand.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,LibraryRandom.RandDec(5,2) + 10,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));

      // Verify: Verify Planning Worksheet lines for Order Line generated for Safety Stock Qty.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,WORKDATE,0,Item."Safety Stock Quantity",0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithSafetyStock@20();
    VAR
      Item@1001 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,LibraryRandom.RandDec(5,2) + 10,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario With Random Value taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 15,LibraryRandom.RandDec(5,2),
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,WORKDATE,0,
        Item."Safety Stock Quantity" + DemandQuantityValue[1] + DemandQuantityValue[2] + DemandQuantityValue[3],0D,'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithSafetyStockWithInventory@21();
    VAR
      Item@1001 : Record 27;
      SafetyStockQty@1002 : Decimal;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      SafetyStockQty := LibraryRandom.RandDec(5,2) + 5;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,SafetyStockQty,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply scenario with random values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,SafetyStockQty,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",LocationBlue.Code);
      UpdateItemInventory(Item."No.",2 * SafetyStockQty);  // Values important for test.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[2],SupplyQuantityValue[1],
        DemandQuantityValue[2] + DemandQuantityValue[3],SupplyDateValue[1],'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithoutSafetyStockAndInventory@23();
    VAR
      Item@1001 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',FALSE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 15,LibraryRandom.RandDec(5,2),
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[1],
        DemandQuantityValue[1] + DemandQuantityValue[2] + DemandQuantityValue[3],SupplyDateValue[1],'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandWithSafetyStockAndInventory@24();
    VAR
      Item@1001 : Record 27;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<2W>','<2W>',TRUE,LibraryRandom.RandDec(5,2) + 10,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand only  with random values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 15,LibraryRandom.RandDec(5,2),
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,WORKDATE,0,Item."Safety Stock Quantity" + DemandQuantityValue[1],0D,'','');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2] + DemandQuantityValue[3],0D,'',
        '');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE SupplyFromPurchaseWithoutSafetyStock@26();
    VAR
      Item@1001 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      SupplyType@1002 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<2W>','<2W>',FALSE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply only  with random values taking Global Variable for Purchase.
      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithSafetyStockCarryOutActionMessage@27();
    VAR
      Item@1001 : Record 27;
      PlanningLinesCountBeforeCarryOut@1012 : Integer;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,LibraryRandom.RandDec(5,2) + 10,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 15,LibraryRandom.RandDec(5,2),
        LibraryRandom.RandDec(5,2) + 10);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));  // Dates based on WORKDATE.

      // Exercise: Carry Out Action Message on Planning Worksheet lines.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
    END;

    [Test]
    PROCEDURE SupplyLessThanDampenerWithoutActionMessage@29();
    BEGIN
      // Setup.
      Initialize;
      SupplyWithDampenerQuantity(LibraryRandom.RandDec(10,2) + 50,LibraryRandom.RandDec(5,2) + 5,FALSE);  // Dampener quantity greater than Purchase Qty.
    END;

    [Test]
    PROCEDURE SupplyMoreThanDampenerWithActionMessage@30();
    BEGIN
      // Setup.
      Initialize;
      SupplyWithDampenerQuantity(LibraryRandom.RandDec(10,2) + 50,LibraryRandom.RandDec(5,2) + 100,TRUE);  // Dampener quantity less than Purchase Qty.
    END;

    LOCAL PROCEDURE SupplyWithDampenerQuantity@49(DampenerQty@1000 : Decimal;PurchaseQty@1001 : Decimal;ActionMessageCancel@1005 : Boolean);
    VAR
      Item@1002 : Record 27;
      RequisitionLine2@1006 : Record 246;
      SupplyQuantityValue@1008 : ARRAY [5] OF Decimal;
      SupplyDateValue@1007 : ARRAY [5] OF Date;
      SupplyType@1004 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with supply and Dampener Quantity to avoid frequent action messages.
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,'<1Y>','<1Y>',TRUE,0,DampenerQty);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Supply only  with random values taking Global Variable for Purchase.
      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(30),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,PurchaseQty,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify action messages if supply more than dampener else check that no lines is generated on Planning worksheet.
      IF ActionMessageCancel THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        RequisitionLine2.SETRANGE("No.",Item."No.");
        Assert.AreEqual(0,RequisitionLine2.COUNT,NumberOfLineEqualError);
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyInReschedulingWithoutLotAccumulation@34();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithReschedulingOnly('<1Y>');
    END;

    [Test]
    PROCEDURE DemandSupplyOutsideReschedulingWithoutLotAccumulation@42();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithReschedulingOnly('<1W>');
    END;

    LOCAL PROCEDURE DemandSupplyWithReschedulingOnly@52(ReschedulingPeriod@1001 : Text[30]);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,ReschedulingPeriod,'<0D>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(30),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 10,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Change Qty.",DemandDateValue[1],SupplyQuantityValue[1],DemandQuantityValue[1],
        0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyInLotAccumulationPeriodWithoutRescheduling@43();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithLotAccumulationOnly('<1W>');
    END;

    [Test]
    PROCEDURE DemandSupplyOutsideLotAccumulationPeriodWithoutRescheduling@44();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithLotAccumulationOnly('<1Y>');
    END;

    LOCAL PROCEDURE DemandSupplyWithLotAccumulationOnly@53(LotAccumulationPeriod@1001 : Text[30]);
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,'<0D>',LotAccumulationPeriod,TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(30),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 10,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Change Qty.",DemandDateValue[1],SupplyQuantityValue[1],DemandQuantityValue[1],
        0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithDifferentReschedulingAndLotAccumulation@45();
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,'<1W>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 20,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(30),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 10,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Change Qty.",DemandDateValue[1],SupplyQuantityValue[1],DemandQuantityValue[1],
        0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailableProdOrderLineReservePageHandler)]
    PROCEDURE DemandSupplyInReschedulingAndFirstFromFirstReservationForLFLItem@267();
    VAR
      ItemNo@1001 : Code[20];
      DummyCount@1007 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Sales Order] [Production Order] [Reservation]
      // [SCENARIO 379964] The sequence of supply and demand documents, in which the earliest demand is reserved from the earliest supply, should provide continious Item availability after the supplies are rescheduled.
      Initialize;

      // [GIVEN] Item with Lot-for-Lot Reordering Policy and Rescheduling Period.
      // [GIVEN] Two Sales Orders "S1", "S2" (sorted by Shipment Date) within the Rescheduling Period.
      // [GIVEN] Two Released Production Orders "P1", "P2" (sorted by Due Date) within the Rescheduling Period.
      // [GIVEN] Sales Order "S1" is reserved from Production Order "P1".
      // [GIVEN] Regenerative Plan is calculated.
      PrepareSupplyAndDemandWithReservationAndCalcRegenPlan(ItemNo,1,1);

      // [WHEN] Carry Out Action Message.
      AcceptActionMessageAndCarryOutActionMessagePlan(ItemNo,DummyCount);

      // [THEN] Projected inventory for Item never goes negative.
      VerifyProjectedInventory(ItemNo);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailableProdOrderLineReservePageHandler)]
    PROCEDURE DemandSupplyInReschedulingAndFirstFromLastReservationForLFLItem@281();
    VAR
      ItemNo@1001 : Code[20];
      DummyCount@1000 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Sales Order] [Production Order] [Reservation]
      // [SCENARIO 379964] The sequence of supply and demand documents, in which the earliest demand is reserved from the latest supply, should provide continious Item availability after the supplies are rescheduled.
      Initialize;

      // [GIVEN] Item with Lot-for-Lot Reordering Policy and Rescheduling Period.
      // [GIVEN] Two Sales Orders "S1", "S2" (sorted by Shipment Date) within the Rescheduling Period.
      // [GIVEN] Two Released Production Orders "P1", "P2" (sorted by Due Date) within the Rescheduling Period.
      // [GIVEN] Sales Order "S1" is reserved from Production Order "P2".
      // [GIVEN] Regenerative Plan is calculated.
      PrepareSupplyAndDemandWithReservationAndCalcRegenPlan(ItemNo,1,2);

      // [WHEN] Carry Out Action Message.
      AcceptActionMessageAndCarryOutActionMessagePlan(ItemNo,DummyCount);

      // [THEN] Projected inventory for Item never goes negative.
      VerifyProjectedInventory(ItemNo);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailableProdOrderLineReservePageHandler)]
    PROCEDURE DemandSupplyInReschedulingAndLastFromFirstReservationForLFLItem@285();
    VAR
      ItemNo@1001 : Code[20];
      DummyCount@1000 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Sales Order] [Production Order] [Reservation]
      // [SCENARIO 379964] The sequence of supply and demand documents, in which the latest demand is reserved from the earliest supply, should provide continious Item availability after the supplies are rescheduled.
      Initialize;

      // [GIVEN] Item with Lot-for-Lot Reordering Policy and Rescheduling Period.
      // [GIVEN] Two Sales Orders "S1", "S2" (sorted by Shipment Date) within the Rescheduling Period.
      // [GIVEN] Two Released Production Orders "P1", "P2" (sorted by Due Date) within the Rescheduling Period.
      // [GIVEN] Sales Order "S2" is reserved from Production Order "P1".
      // [GIVEN] Regenerative Plan is calculated.
      PrepareSupplyAndDemandWithReservationAndCalcRegenPlan(ItemNo,2,1);

      // [WHEN] Carry Out Action Message.
      AcceptActionMessageAndCarryOutActionMessagePlan(ItemNo,DummyCount);

      // [THEN] Projected inventory for Item never goes negative.
      VerifyProjectedInventory(ItemNo);
    END;

    LOCAL PROCEDURE CreateAssemblyOrderFromPlanningWorksheet@363(VAR AssemblyHeader@1004 : Record 900;Item@1001 : Record 27);
    VAR
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      SalesQuantity@1000 : Decimal;
      DummyCount@1005 : Integer;
    BEGIN
      SalesQuantity := Item."Maximum Inventory" + Item."Reorder Point" + 1;
      CreateDemandDate(DemandDateValue,WORKDATE,0D,0D); // Shipment Date is WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,SalesQuantity,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1); // Number of Sales Order : 1.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE + 30); // Dates based on WORKDATE. Planning Period - 1 Month, covers Sales shipments.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",DummyCount);
      AssemblyHeader.SETRANGE("Item No.",Item."No.");
      AssemblyHeader.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailableProdOrderLineReservePageHandler)]
    PROCEDURE DemandSupplyInReschedulingAndLastFromLastReservationForLFLItem@286();
    VAR
      ItemNo@1001 : Code[20];
      DummyCount@1000 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Sales Order] [Production Order] [Reservation]
      // [SCENARIO 379964] The sequence of supply and demand documents, in which the latest demand is reserved from the latest supply, should provide continious Item availability after the supplies are rescheduled.
      Initialize;

      // [GIVEN] Item with Lot-for-Lot Reordering Policy and Rescheduling Period.
      // [GIVEN] Two Sales Orders "S1", "S2" (sorted by Shipment Date) within the Rescheduling Period.
      // [GIVEN] Two Released Production Orders "P1", "P2" (sorted by Due Date) within the Rescheduling Period.
      // [GIVEN] Sales Order "S2" is reserved from Production Order "P2".
      // [GIVEN] Regenerative Plan is calculated.
      PrepareSupplyAndDemandWithReservationAndCalcRegenPlan(ItemNo,2,2);

      // [WHEN] Carry Out Action Message.
      AcceptActionMessageAndCarryOutActionMessagePlan(ItemNo,DummyCount);

      // [THEN] Projected inventory for Item never goes negative.
      VerifyProjectedInventory(ItemNo);
    END;

    [Test]
    PROCEDURE DemandSupplyReschedulingPeriodInWeek@59();
    VAR
      Item@1000 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(6),GetRandomDateUsingWorkDate(8),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 10,LibraryRandom.RandDec(5,2) + 30,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(7),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,LibraryRandom.RandDec(5,2) + 15,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[1],
        DemandQuantityValue[1] + DemandQuantityValue[2],SupplyDateValue[1],'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[2],SupplyQuantityValue[2],0,0D,'','');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyReschedulingPeriodInWeekWithOutput@61();
    VAR
      Item@1009 : Record 27;
      SupplyQuantityValue@1003 : ARRAY [5] OF Decimal;
      SupplyDateValue@1002 : ARRAY [5] OF Date;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1005 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(6),GetRandomDateUsingWorkDate(8),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 10,LibraryRandom.RandDec(5,2) + 30,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(7),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,LibraryRandom.RandDec(5,2) + 15,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');
      CreateAndPostOutputJournal(Item."No.",GlobalProductionOrder[1]."No.");

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[2],
        DemandQuantityValue[1] + DemandQuantityValue[2] - SupplyQuantityValue[1],SupplyDateValue[2],'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyReschedulingPeriodInWeekWithSalesVariant@62();
    VAR
      Item@1010 : Record 27;
      SalesLine@1004 : Record 37;
      ItemVariant@1011 : Record 5401;
      SupplyQuantityValue@1003 : ARRAY [5] OF Decimal;
      SupplyDateValue@1002 : ARRAY [5] OF Date;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(6),GetRandomDateUsingWorkDate(8),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 10,LibraryRandom.RandDec(5,2) + 30,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(7),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,LibraryRandom.RandDec(5,2) + 15,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      CreateAndPostOutputJournal(Item."No.",GlobalProductionOrder[1]."No.");
      UpdateVariantOnSales(SalesLine,GlobalSalesHeader[1]."No.",ItemVariant.Code);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[2],SupplyQuantityValue[2],
        DemandQuantityValue[2] - SupplyQuantityValue[1],SupplyDateValue[2],'','');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'',ItemVariant.Code);
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyReschedulingPeriodInWeekWithProductionVariant@63();
    VAR
      Item@1011 : Record 27;
      SalesLine@1005 : Record 37;
      ItemVariant@1000 : Record 5401;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(6),GetRandomDateUsingWorkDate(8),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 10,LibraryRandom.RandDec(5,2) + 30,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(7),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 5,LibraryRandom.RandDec(5,2) + 15,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      CreateAndPostOutputJournal(Item."No.",GlobalProductionOrder[1]."No.");
      UpdateVariantOnSales(SalesLine,GlobalSalesHeader[1]."No.",ItemVariant.Code);
      UpdateVariantOnProduction(GlobalProductionOrder[2]."No.",GlobalProductionOrder[2].Status,ItemVariant.Code);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[2],
        DemandQuantityValue[1],SupplyDateValue[2],'',ItemVariant.Code);
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,DemandQuantityValue[2] - SupplyQuantityValue[1],0D,'',
        '');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithReschedulingPeriodWeekWithoutChildItem@65();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithProdBOM(FALSE);  // ChildItem -False.
    END;

    [Test]
    PROCEDURE DemandSupplyWithReschedulingPeriodWeekWithoutProdBOMOnItem@66();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithProdBOM(TRUE);  // ChildItem -True.
    END;

    LOCAL PROCEDURE DemandSupplyWithProdBOM@81(ChildItem@1000 : Boolean);
    VAR
      Item@1011 : Record 27;
      Item2@1010 : Record 27;
      ProductionBOMHeader@1012 : Record 99000771;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1006 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      IF ChildItem THEN
        CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1W>');  // Rescheduling Period

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(55),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(100) + 800,LibraryRandom.RandInt(100) + 1000,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(50),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[2],DemandQuantityValue[2],DemandQuantityValue[2],0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE
      IF ChildItem THEN
        LibraryPlanning.CalcRegenPlanForPlanWksh(Item2,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Change Qty.",SupplyDateValue[2],SupplyQuantityValue[2],DemandQuantityValue[1],
        0D,'','');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::Reschedule,DemandDateValue[2],0,SupplyQuantityValue[3],SupplyDateValue[3],'','');
      VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithReschedulingPeriodWeekWithProdBOMOnItem@70();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithProdComponentAndProdBOM(FALSE);  // ProductionComponent -True;
    END;

    [Test]
    PROCEDURE DemandSupplyWithReschedulingPeriodWeekWithProdComponent@68();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithProdComponentAndProdBOM(TRUE);  // ProductionComponent -True;
    END;

    LOCAL PROCEDURE DemandSupplyWithProdComponentAndProdBOM@93(ProductionComponent@1001 : Boolean);
    VAR
      Item@1018 : Record 27;
      Item2@1017 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      RequisitionLine2@1004 : Record 246;
      PlanningComponent@1002 : Record 99000829;
      Direction@1000 : 'Forward,Backward';
      SupplyQuantityValue@1008 : ARRAY [5] OF Decimal;
      SupplyDateValue@1007 : ARRAY [5] OF Date;
      DemandDateValue@1006 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      SupplyType@1010 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1W>');  // Rescheduling Period

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(55),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(100) + 800,LibraryRandom.RandInt(100) + 1000,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(50),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[2],DemandQuantityValue[2],DemandQuantityValue[2],0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      IF ProductionComponent THEN
        CreateProdOrderComponent(GlobalProductionOrder[2],Item2."No.");

      // Exercise: Calculate Regenerative Plan.
      FilterRequisitionLine(RequisitionLine2,Item."No.");
      LibraryPlanning.RefreshPlanningLine(RequisitionLine2,Direction::Backward,TRUE,TRUE);

      // Verify: Verify planning worksheet.
      PlanningComponent.SETRANGE("Item No.",Item2."No.");
      Assert.AreEqual(0,PlanningComponent.COUNT,NumberOfLineEqualError);  // Zero for empty line.
    END;

    [Test]
    PROCEDURE DemandSupplyWithReschedulingPeriodWeekParentAndChildItem@76();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithParentAndChildItem('<1W>',TRUE);  // ReschedulingPeriod - One Week and Reschedule as True.
    END;

    [Test]
    PROCEDURE DemandSupplyWithReschedulingPeriodYearParentAndChildItem@73();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithParentAndChildItem('<1Y>',FALSE);  // ReschedulingPeriod - One Year and Reschedule as False.
    END;

    LOCAL PROCEDURE DemandSupplyWithParentAndChildItem@104(ReschedulingPeriod@1000 : Text[30];Reschedule@1007 : Boolean);
    VAR
      Item@1019 : Record 27;
      Item2@1018 : Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",ReschedulingPeriod,ReschedulingPeriod,TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1W>');  // Rescheduling Period
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(55),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(100) + 800,LibraryRandom.RandInt(100) + 1000,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(50),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[2],DemandQuantityValue[2],DemandQuantityValue[2],0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      // Exercise: Calculate Regenerative Plan.
      Item.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE

      // Verify: Verify planning worksheet.
      IF Reschedule THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Change Qty.",SupplyDateValue[2],SupplyQuantityValue[2],
          DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Reschedule,DemandDateValue[2],0,SupplyQuantityValue[3],SupplyDateValue[3],'',
          '');
        VerifyRequisitionLine(
          Item2."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(DemandDateValue[1],-1),0,
          DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLine(
          Item2."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(DemandDateValue[2],-1),0,
          DemandQuantityValue[2],0D,'','');
        VerifyRequisitionLineCount(5);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Change Qty.",SupplyDateValue[2],SupplyQuantityValue[2],
          SupplyQuantityValue[2] + DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,DemandDateValue[1],SupplyQuantityValue[1],0,SupplyDateValue[1],'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[3],SupplyQuantityValue[3],0,0D,'','');
        VerifyRequisitionLine(
          Item2."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(DemandDateValue[1],-1),0,
          DemandQuantityValue[1] + DemandQuantityValue[2],0D,'','');
        VerifyRequisitionLineCount(4);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyCarryOutActionMessageParentItem@78();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyCarryOutActionMessageParentAndChildItem(FALSE);  // CarryOutActionMsgForChild -False.
    END;

    [Test]
    PROCEDURE DemandSupplyCarryOutActionMessageChildItem@79();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyCarryOutActionMessageParentAndChildItem(TRUE);  // CarryOutActionMsgForChild -True.
    END;

    LOCAL PROCEDURE DemandSupplyCarryOutActionMessageParentAndChildItem@113(CarryOutActionMsgForChild@1001 : Boolean);
    VAR
      Item@1021 : Record 27;
      Item2@1020 : Record 27;
      Item3@1019 : Record 27;
      ProductionBOMHeader@1007 : Record 99000771;
      PlanningLinesCountBeforeCarryOut@1000 : Integer;
      SupplyQuantityValue@1006 : ARRAY [5] OF Decimal;
      SupplyDateValue@1005 : ARRAY [5] OF Date;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1Y>');  // Rescheduling Period
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(55),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(100) + 800,LibraryRandom.RandInt(100) + 1000,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(15),GetRandomDateUsingWorkDate(25),GetRandomDateUsingWorkDate(50),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[2],DemandQuantityValue[2],DemandQuantityValue[2],0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      Item3.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);
      IF CarryOutActionMsgForChild THEN
        AcceptActionMessageAndCarryOutActionMessagePlan(Item2."No.",PlanningLinesCountBeforeCarryOut);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE

      // Verify: Verify planning worksheet.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
      IF CarryOutActionMsgForChild THEN
        VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item2."No.")
      ELSE BEGIN
        VerifyRequisitionLine(
          Item2."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(DemandDateValue[1],-1),0,
          DemandQuantityValue[1] + DemandQuantityValue[2],0D,'','');
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyWithPurchaseOfChildItem@84();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      SupplyQuantityValue@1006 : ARRAY [5] OF Decimal;
      SupplyDateValue@1005 : ARRAY [5] OF Date;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1Y>');  // Rescheduling Period
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales, Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(12),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(10) + 900,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(45),GetRandomDateUsingWorkDate(25),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandInt(10) + 1000,LibraryRandom.RandInt(10) + 800,
        LibraryRandom.RandInt(10) + 1100,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item2."No.",'');

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item2,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item2."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",SelectDateWithSafetyLeadTime(SupplyDateValue[1],-1),
        SupplyQuantityValue[3],SupplyQuantityValue[1] + SupplyQuantityValue[2],SupplyDateValue[3],'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE ModifyDueDateOnRequisitionLineWithBaseCalendar@243();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1006 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1001 : Record 36;
      PlanningWorksheet@1003 : TestPage 99000852;
      DefaultSafetyLeadTime@1004 : Integer;
    BEGIN
      // Calculate Regenerative Plan (LFL Item) with Base Calender. Modify "Due Date" and verify "Ending Date" in Requisition line.
      // Have a dependency on DemandSupplyWithChildItemOnRequisitionWorksheetNewBatch,DemandSupplyWithParentItemOnRequisitionWorksheetNewBatch running together.
      Initialize;
      ManufacturingSetup.GET;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, create Vendor, bind the calendar
      // to the Vendor, create a Lot-For-Lot Item, set the vendor as the supplier. Create a Sales Order, set the shipment date
      // of the sales line as Saturday, set ManufacturingSetup."Default Safety Lead Time" to random value.
      DefaultSafetyLeadTime := LibraryRandom.RandInt(10);
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD6>',GetRandomDateUsingWorkDate(30)),DefaultSafetyLeadTime);

      // Calculate Regenerative Plan on Planning worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Open Planning Worksheet page and go to the generated requisition line.
      FindRequisitionLine(RequisitionLine,Item."No.");
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.GOTORECORD(RequisitionLine);

      // Exercise: Update Due Date from Planning Worksheet page.
      PlanningWorksheet."Due Date".SETVALUE(CALCDATE('<WD6>',RequisitionLine."Ending Date"));

      // Verify: Verify calculating Ending Date from Due Date doesn't need to consider Vendor's calendar.
      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD("Ending Date",PlanningWorksheet."Due Date".ASDATE - DefaultSafetyLeadTime);

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithChildItemOnRequisitionWorksheetNewBatch@46();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyOnRequisitionWorksheetNewBatch(FALSE);  // Child Item -False.
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithParentItemOnRequisitionWorksheetNewBatch@16();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyOnRequisitionWorksheetNewBatch(TRUE);  // Child Item -True.
    END;

    LOCAL PROCEDURE DemandSupplyOnRequisitionWorksheetNewBatch@90(ChildItem@1011 : Boolean);
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      RequisitionWkshName@1008 : Record 245;
      ReqWkshTemplate@1009 : Record 244;
      PlanningWorksheet@1003 : TestPage 99000852;
      SupplyQuantityValue@1007 : ARRAY [5] OF Decimal;
      SupplyDateValue@1006 : ARRAY [5] OF Date;
      DemandDateValue@1005 : ARRAY [3] OF Date;
      DemandQuantityValue@1004 : ARRAY [3] OF Decimal;
      SupplyType@1010 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1Y>');  // Rescheduling Period
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales, Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(12),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(10) + 900,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(45),GetRandomDateUsingWorkDate(25),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandInt(10) + 1000,LibraryRandom.RandInt(10) + 800,
        LibraryRandom.RandInt(10) + 1100,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item2."No.",'');
      CreateRequisitionWorksheetName(RequisitionWkshName,ReqWkshTemplate.Type::Planning);
      IF ChildItem THEN
        GlobalItemNo := Item2."No." // Assign Global Variable for Page Handler.
      ELSE
        GlobalItemNo := Item."No.";  // Assign Global Variable for Page Handler.

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      OpenPlanningWorksheetPage(PlanningWorksheet,RequisitionWkshName.Name);
      IF ChildItem THEN BEGIN
        VerifyPlanningWorksheet(
          PlanningWorksheet,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",GlobalItemNo,
          SelectDateWithSafetyLeadTime(SupplyDateValue[1],-1),SupplyQuantityValue[3],SupplyQuantityValue[1] + SupplyQuantityValue[2],
          SupplyDateValue[3]);
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        VerifyPlanningWorksheet(
          PlanningWorksheet,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",GlobalItemNo,DemandDateValue[1],
          SupplyQuantityValue[1],DemandQuantityValue[1],SupplyDateValue[1]);
        PlanningWorksheet.NEXT;
        VerifyPlanningWorksheet(
          PlanningWorksheet,RequisitionLine."Action Message"::Cancel,GlobalItemNo,SupplyDateValue[2],SupplyQuantityValue[2],0,0D);
        VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyWithChildAndParentItemWithoutDefaultDampenerPeriod@118();
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      DemandSupplyWithChildAndParentItemDefaultDampenerPeriod(FALSE);  // Dampener Period -False.
    END;

    [Test]
    PROCEDURE DemandSupplyWithChildAndParentItemWithDefaultDampenerPeriod@123();
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      DemandSupplyWithChildAndParentItemDefaultDampenerPeriod(TRUE);  // Dampener Period -True.
    END;

    LOCAL PROCEDURE DemandSupplyWithChildAndParentItemDefaultDampenerPeriod@94(DampenerPeriod@1009 : Boolean);
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ManufacturingSetup@1007 : Record 99000765;
      DefaultDampenerPeriod@1008 : DateFormula;
      SupplyQuantityValue@1006 : ARRAY [5] OF Decimal;
      SupplyDateValue@1005 : ARRAY [5] OF Date;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      SupplyType@1011 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      ManufacturingSetup.GET;
      IF DampenerPeriod THEN BEGIN
        EVALUATE(DefaultDampenerPeriod,'<2W>');
        UpdateManufacturingSetup(DefaultDampenerPeriod);
      END;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1Y>');  // Rescheduling Period
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales, Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(12),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(10) + 900,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(45),GetRandomDateUsingWorkDate(25),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandInt(10) + 1000,LibraryRandom.RandInt(10) + 800,
        LibraryRandom.RandInt(10) + 1100,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item2."No.",'');

      // Exercise: Calculate Regenerative Plan.
      Item.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[2],SupplyQuantityValue[2],0,0D,'','');
      IF DampenerPeriod THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Change Qty.",SupplyDateValue[1],SupplyQuantityValue[1],
          DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLine(
          Item2."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",SelectDateWithSafetyLeadTime(SupplyDateValue[1],-1),
          SupplyQuantityValue[3],DemandQuantityValue[1],SupplyDateValue[3],'','');
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],SupplyQuantityValue[1],
          DemandQuantityValue[1],SupplyDateValue[1],'','');
        VerifyRequisitionLine(
          Item2."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",SelectDateWithSafetyLeadTime(DemandDateValue[1],-1),
          SupplyQuantityValue[3],DemandQuantityValue[1],SupplyDateValue[3],'','');
      END;
      VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
      // Tear Down.
      UpdateManufacturingSetup(ManufacturingSetup."Default Dampener Period");
    END;

    [Test]
    PROCEDURE DemandSupplyWithPurchaseOfChildItemCarryOutActionMessage@139();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      PlanningLinesCountBeforeCarryOut@1009 : Integer;
      SupplyQuantityValue@1006 : ARRAY [5] OF Decimal;
      SupplyDateValue@1005 : ARRAY [5] OF Date;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1Y>','<1Y>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,'<1Y>');  // Rescheduling Period
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");

      // Create Demand - Supply Scenario with random values taking Global Variable for Sales, Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(12),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(10) + 900,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(45),GetRandomDateUsingWorkDate(25),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandInt(10) + 1000,LibraryRandom.RandInt(10) + 800,
        LibraryRandom.RandInt(10) + 1100,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item2."No.",'');

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Verify planning worksheet.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
    END;

    [Test]
    PROCEDURE CalculateRegenerativePlanWithPositiveAdjustment@107();
    VAR
      Item@1000 : Record 27;
      RequisitionLine2@1001 : Record 246;
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItemInventory(Item."No.",LibraryRandom.RandDec(5,2));

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Empty planning worksheet.
      RequisitionLine2.SETRANGE("No.",Item."No.");
      Assert.AreEqual(0,RequisitionLine2.COUNT,NumberOfLineEqualError);
    END;

    [Test]
    PROCEDURE DemandWithPositiveAdjustment@105();
    BEGIN
      // Setup.
      Initialize;
      DemandWithPositiveAdjustmentAndCarryOutActionMessage(FALSE) // Change Quantity on Demand as False.
    END;

    [Test]
    PROCEDURE DemandWithChangeQtyAfterCarryOutActionMessage@103();
    BEGIN
      // Setup.
      Initialize;
      DemandWithPositiveAdjustmentAndCarryOutActionMessage(TRUE) // Change Quantity on Demand as True.
    END;

    LOCAL PROCEDURE DemandWithPositiveAdjustmentAndCarryOutActionMessage@157(ChangeQuantityOnDemand@1003 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesLine@1006 : Record 37;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      PlanningLinesCountBeforeCarryOut@1005 : Integer;
      Quantity@1007 : Decimal;
    BEGIN
      // Create Item with Planning parameters.
      Quantity := LibraryRandom.RandDec(5,2) + 50;  // Using Random Value.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItemInventory(Item."No.",Quantity);

      // Create Demand setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 30 ,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 20);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.
      IF ChangeQuantityOnDemand THEN BEGIN
        CalcRegenPlanAndCarryOutActionMessagePlan(Item,PlanningLinesCountBeforeCarryOut);
        UpdateQuantityForSales(SalesLine,GlobalSalesHeader[1]."No.",LibraryRandom.RandDec(5,2) + 60);  // Using Random Values.
      END;

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify planning worksheet.
      IF ChangeQuantityOnDemand THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[1],
          DemandQuantityValue[1] + DemandQuantityValue[2] + DemandQuantityValue[3] - Quantity,
          SalesLine.Quantity + DemandQuantityValue[2] - Quantity,DemandDateValue[2],'','');
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[3],0,DemandQuantityValue[3],0D,'','');
        VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,
          DemandQuantityValue[1] + DemandQuantityValue[2] + DemandQuantityValue[3] - Quantity,0D,'','');
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandWithMultipleChangeQtyAfterCarryOutActionMessage@102();
    BEGIN
      // Setup.
      Initialize;
      DemandWithMultipleChangeQtyAndCarryOutActionMessage(FALSE);  // Carry Out Action Message as False.
    END;

    [Test]
    PROCEDURE DemandWithPositiveAdjustmentCarryOutActionMessage@134();
    BEGIN
      // Setup.
      Initialize;
      DemandWithMultipleChangeQtyAndCarryOutActionMessage(TRUE);  // Carry Out Action Message as True.
    END;

    LOCAL PROCEDURE DemandWithMultipleChangeQtyAndCarryOutActionMessage@166(CarryOutActionMessage@1008 : Boolean);
    VAR
      SalesHeader@1007 : Record 36;
      Item@1000 : Record 27;
      SalesLine@1006 : Record 37;
      SalesLine2@1003 : Record 37;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      PlanningLinesCountBeforeCarryOut@1005 : Integer;
      Quantity@1004 : Decimal;
    BEGIN
      // Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      Quantity := LibraryRandom.RandDec(5,2) + 50;  // Using Random Values.
      UpdateItemInventory(Item."No.",Quantity);

      // Create Demand setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15));  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,Quantity - 20,Quantity - 10,Quantity - 30);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.

      CalcRegenPlanAndCarryOutActionMessagePlan(Item,PlanningLinesCountBeforeCarryOut);
      UpdateQuantityForSales(SalesLine,GlobalSalesHeader[1]."No.",LibraryRandom.RandDec(5,2) + 60);  // Using Random Values.

      CalcRegenPlanAndCarryOutActionMessagePlan(Item,PlanningLinesCountBeforeCarryOut);
      UpdateQuantityForSales(SalesLine2,GlobalSalesHeader[1]."No.",LibraryRandom.RandDec(5,2) + 5);  // Using Random Values.
      CreateSalesOrder(SalesHeader,Item."No.",Quantity,GetRandomDateUsingWorkDate(20));
      IF CarryOutActionMessage THEN
        CalcRegenPlanAndCarryOutActionMessagePlan(Item,PlanningLinesCountBeforeCarryOut);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify planning worksheet. Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
      IF CarryOutActionMessage THEN
        VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.")
      ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,DemandDateValue[1],
          SalesLine.Quantity + DemandQuantityValue[2] - Quantity,0,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Change Qty.",GetRandomDateUsingWorkDate(15),DemandQuantityValue[3],
          DemandQuantityValue[2] + DemandQuantityValue[3] + SalesLine2.Quantity,0D,'','');
        VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandWithForecast@95();
    VAR
      Item@1001 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      ManufacturingSetup@1002 : Record 99000765;
      RequisitionWkshName@1010 : Record 245;
      PlanningWorksheet@1006 : TestPage 99000852;
      DemandDateValue@1005 : ARRAY [3] OF Date;
      DemandQuantityValue@1004 : ARRAY [3] OF Decimal;
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      ManufacturingSetup.GET;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      GlobalItemNo := Item."No.";  // Assign Global Variable for Page Handler.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",FALSE);

      // Create Demand setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 210,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.
      RequisitionWkshName.FINDFIRST;

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,WORKDATE,0,ProductionForecastEntry[1]."Forecast Quantity",0D,'','');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithForecastWithoutPostSalesOrder@89();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithForecast(FALSE);  // Post Sales Order as False.
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithForecastWithPostSalesOrder@86();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithForecast(TRUE);  // Post Sales Order as True.
    END;

    LOCAL PROCEDURE DemandSupplyWithForecast@128(PostSalesOrder@1011 : Boolean);
    VAR
      Item@1001 : Record 27;
      ManufacturingSetup@1002 : Record 99000765;
      RequisitionWkshName@1004 : Record 245;
      ProductionForecastEntry@1010 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1009 : TestPage 99000852;
      SupplyQuantityValue@1008 : ARRAY [5] OF Decimal;
      SupplyDateValue@1007 : ARRAY [5] OF Date;
      DemandDateValue@1006 : ARRAY [3] OF Date;
      DemandQuantityValue@1005 : ARRAY [3] OF Decimal;
      SupplyType@1003 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      ManufacturingSetup.GET;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      GlobalItemNo := Item."No.";  // Assign Global Variable for Page Handler.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",TRUE);

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales,Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(4),GetRandomDateUsingWorkDate(56),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 240,LibraryRandom.RandDec(5,2) + 210,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::Purchase,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(55),GetRandomDateUsingWorkDate(33),GetRandomDateUsingWorkDate(80),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 270,LibraryRandom.RandDec(5,2) + 260,
        LibraryRandom.RandDec(5,2) + 220,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');

      IF PostSalesOrder THEN
        UpdatePostingDateAndPostMultipleSalesOrder(
          GlobalSalesHeader[1],GlobalSalesHeader[2],GetRandomDateUsingWorkDate(4),GetRandomDateUsingWorkDate(56));

      // Exercise: Calculate Regenerative Plan.
      RequisitionWkshName.FINDFIRST;
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,ProductionForecastEntry[2]."Forecast Date",0,
        ProductionForecastEntry[2]."Forecast Quantity" - DemandQuantityValue[2],0D,'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[2],SupplyQuantityValue[2],0,0D,'','');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,ProductionForecastEntry[3]."Forecast Date",0,
        ProductionForecastEntry[3]."Forecast Quantity",0D,'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[3],SupplyQuantityValue[3],0,0D,'','');
      IF PostSalesOrder THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,-1),0,
          DemandQuantityValue[1] + DemandQuantityValue[2],0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
      END ELSE BEGIN
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1],0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[2],SupplyQuantityValue[1],
          DemandQuantityValue[2],SupplyDateValue[1],'','');
      END;
      VerifyRequisitionLineCount(6);  // Expected no of lines in Planning Worksheet. Value important.
      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithForecastChangeReschedPeriodWithoutPostPurchaseOrder@74();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithForecastChangeReschedPeriod(FALSE);  // Post Purchase Order as False.
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithForecastChangeReschedPeriodWithPostPurchaseOrder@58();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithForecastChangeReschedPeriod(TRUE);  // Post Purchase Order as True.
    END;

    LOCAL PROCEDURE DemandSupplyWithForecastChangeReschedPeriod@131(PostPurchaseOrder@1011 : Boolean);
    VAR
      Item@1001 : Record 27;
      ManufacturingSetup@1002 : Record 99000765;
      RequisitionWkshName@1004 : Record 245;
      ProductionForecastEntry@1010 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1009 : TestPage 99000852;
      SupplyQuantityValue@1008 : ARRAY [5] OF Decimal;
      SupplyDateValue@1007 : ARRAY [5] OF Date;
      DemandDateValue@1006 : ARRAY [3] OF Date;
      DemandQuantityValue@1005 : ARRAY [3] OF Decimal;
      SupplyType@1003 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with Planning parameters.
      ManufacturingSetup.GET;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      GlobalItemNo := Item."No.";  // Assign Global Variable for Page Handler.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",TRUE);

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales,Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(4),GetRandomDateUsingWorkDate(56),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 240,LibraryRandom.RandDec(5,2) + 210,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::Purchase,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(55),GetRandomDateUsingWorkDate(33),GetRandomDateUsingWorkDate(80),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 270,LibraryRandom.RandDec(5,2) + 260,
        LibraryRandom.RandDec(5,2) + 220,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');

      UpdatePostingDateAndPostMultipleSalesOrder(
        GlobalSalesHeader[1],GlobalSalesHeader[2],GetRandomDateUsingWorkDate(4),GetRandomDateUsingWorkDate(56));
      RequisitionWkshName.FINDFIRST;
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);
      ChangePeriodForItem(Item,'<20D>','<20D>');  // Rescheduling Period, Lot Accumulation Period.

      IF PostPurchaseOrder THEN
        LibraryPurchase.PostPurchaseDocument(GlobalPurchaseHeader[1],TRUE,FALSE);

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",ProductionForecastEntry[3]."Forecast Date",
        SupplyQuantityValue[1],ProductionForecastEntry[3]."Forecast Quantity",SupplyDateValue[1],'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[3],SupplyQuantityValue[3],0,0D,'','');
      IF PostPurchaseOrder THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,-1),0,
          DemandQuantityValue[1] + DemandQuantityValue[2] - SupplyQuantityValue[2],0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,ProductionForecastEntry[2]."Forecast Date",0,
          ProductionForecastEntry[2]."Forecast Quantity" - DemandQuantityValue[2],0D,'','');
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,-1),0,
          DemandQuantityValue[1] + DemandQuantityValue[2],0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",ProductionForecastEntry[2]."Forecast Date",
          SupplyQuantityValue[2],ProductionForecastEntry[2]."Forecast Quantity" - DemandQuantityValue[2],SupplyDateValue[2],'','');
      END;
      VerifyRequisitionLineCount(4);  // Expected no of lines in Planning Worksheet. Value important.

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithForecastAndCarryOutActionMessage@57();
    VAR
      Item@1001 : Record 27;
      ManufacturingSetup@1002 : Record 99000765;
      RequisitionWkshName@1004 : Record 245;
      ProductionForecastEntry@1010 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1009 : TestPage 99000852;
      SupplyQuantityValue@1008 : ARRAY [5] OF Decimal;
      SupplyDateValue@1007 : ARRAY [5] OF Date;
      DemandDateValue@1006 : ARRAY [3] OF Date;
      DemandQuantityValue@1005 : ARRAY [3] OF Decimal;
      PlanningLinesCountBeforeCarryOut@1011 : Integer;
      SupplyType@1003 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      ManufacturingSetup.GET;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      GlobalItemNo := Item."No.";  // Assign Global Variable for Page Handler.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",TRUE);

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales,Production and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(4),GetRandomDateUsingWorkDate(56),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 240,LibraryRandom.RandDec(5,2) + 210,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::FirmPlanned,SupplyType::Purchase,SupplyType::Purchase,SupplyType::None,SupplyType::None);
      CreateSupplyDate(
        SupplyDateValue,GetRandomDateUsingWorkDate(55),GetRandomDateUsingWorkDate(33),GetRandomDateUsingWorkDate(80),0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(
        SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 270,LibraryRandom.RandDec(5,2) + 260,
        LibraryRandom.RandDec(5,2) + 220,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');

      UpdatePostingDateAndPostMultipleSalesOrder(
        GlobalSalesHeader[1],GlobalSalesHeader[2],GetRandomDateUsingWorkDate(4),GetRandomDateUsingWorkDate(56));
      RequisitionWkshName.FINDFIRST;
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);
      ChangePeriodForItem(Item,'<20D>','<20D>');  // Rescheduling Period, Lot Accumulation Period.
      LibraryPurchase.PostPurchaseDocument(GlobalPurchaseHeader[1],TRUE,FALSE);
      CalcRegenPlanAndCarryOutActionMessagePlan(Item,PlanningLinesCountBeforeCarryOut);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    PROCEDURE DemandWithMultipleUOMReschedPeriodWeek@133();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMultipleUOM(FALSE);  // Supply as False.
    END;

    [Test]
    PROCEDURE DemandSupplyWithMultipleUOMReschedPeriodWeek@127();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMultipleUOM(TRUE);  // Supply as True.
    END;

    LOCAL PROCEDURE DemandSupplyWithMultipleUOM@147(Supply@1005 : Boolean);
    VAR
      Item@1004 : Record 27;
      ItemUnitOfMeasure@1009 : Record 5404;
      ItemUnitOfMeasure2@1010 : Record 5404;
      Quantity@1011 : Decimal;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyQuantityValue@1003 : ARRAY [5] OF Decimal;
      SupplyDateValue@1002 : ARRAY [5] OF Date;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Quantity := LibraryRandom.RandDec(5,2) + 80 ;  // Using Random Value.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItemInventory(Item."No.",Quantity);
      CreateMultipleItemUnitOfMeasure(ItemUnitOfMeasure,ItemUnitOfMeasure2,Item."No.");

      // Create Demand -Supply setup with multiples UOM with Random Values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 30,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 20);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.
      UpdateUnitOfMeasureForSales(GlobalSalesHeader[1]."No.",ItemUnitOfMeasure.Code);
      UpdateUnitOfMeasureForSales(GlobalSalesHeader[3]."No.",ItemUnitOfMeasure2.Code);

      IF Supply THEN BEGIN
        CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None);
        CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(17),0D,0D,0D);  // Dates based on WORKDATE.
        CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[1],LibraryRandom.RandDec(5,2) + 10,0,0,0);
        CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
        UpdateUnitOfMeasureForPurchase(GlobalPurchaseHeader[1]."No.",ItemUnitOfMeasure.Code);
      END;

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      IF Supply THEN BEGIN
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::"Change Qty.",DemandDateValue[1],SupplyQuantityValue[1],
          DemandQuantityValue[1] +
          DemandQuantityValue[2] /
          ItemUnitOfMeasure."Qty. per Unit of Measure" - Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure" ,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",DemandDateValue[3],SupplyQuantityValue[2],
          ItemUnitOfMeasure2."Qty. per Unit of Measure" * DemandQuantityValue[3],SupplyDateValue[2],'','');
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,
          ItemUnitOfMeasure."Qty. per Unit of Measure" * DemandQuantityValue[1] + DemandQuantityValue[2] - Quantity ,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[3],0,
          ItemUnitOfMeasure2."Qty. per Unit of Measure" * DemandQuantityValue[3],0D,'','');
      END;
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyWithMultipleUOMCarryOutActionMessage@122();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMultipleUOMWithCarryOutActionMessage(FALSE);  // Calculate Regenerative Plan After Carry Out Action Message - FALSE.
    END;

    [Test]
    PROCEDURE DemandSupplyWithMultipleUOMCarryOutActionMessageAndRerunRegenerativePlan@121();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMultipleUOMWithCarryOutActionMessage(TRUE);  // Calculate Regenerative Plan After Carry Out Action Message - TRUE.
    END;

    LOCAL PROCEDURE DemandSupplyWithMultipleUOMWithCarryOutActionMessage@155(CalculateRegenerativePlanAfterCarryOutActionMessage@1005 : Boolean);
    VAR
      Item@1004 : Record 27;
      ItemUnitOfMeasure@1009 : Record 5404;
      ItemUnitOfMeasure2@1010 : Record 5404;
      Quantity@1011 : Decimal;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyQuantityValue@1003 : ARRAY [5] OF Decimal;
      SupplyDateValue@1002 : ARRAY [5] OF Date;
      PlanningLinesCountBeforeCarryOut@1012 : Integer;
      SupplyType@1007 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      Quantity := LibraryRandom.RandDec(5,2) + 80 ;  // Using Random Value.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<1W>','<1W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItemInventory(Item."No.",Quantity);
      CreateMultipleItemUnitOfMeasure(ItemUnitOfMeasure,ItemUnitOfMeasure2,Item."No.");

      // Create Demand - Supply setup with multiple UOMs with Random Values taking Global Variable for Sales and Purchase Order.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(15));  // Dates based on WORKDATE.
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandDec(5,2) + 30,LibraryRandom.RandDec(5,2) + 40,
        LibraryRandom.RandDec(5,2) + 20);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",3);  // Number of Sales Order.
      UpdateUnitOfMeasureForSales(GlobalSalesHeader[1]."No.",ItemUnitOfMeasure.Code);
      UpdateUnitOfMeasureForSales(GlobalSalesHeader[3]."No.",ItemUnitOfMeasure2.Code);

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(5),GetRandomDateUsingWorkDate(17),0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,DemandQuantityValue[1],LibraryRandom.RandDec(5,2) + 10,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
      UpdateUnitOfMeasureForPurchase(GlobalPurchaseHeader[1]."No.",ItemUnitOfMeasure.Code);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Exercise: Accept and Carry out Action message.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify Purchase Line.
      VerifyPurchaseLine(
        GlobalPurchaseHeader[1]."No.",
        DemandQuantityValue[1] +
        DemandQuantityValue[2] /
        ItemUnitOfMeasure."Qty. per Unit of Measure" - Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure");
      VerifyPurchaseLine(GlobalPurchaseHeader[2]."No.",ItemUnitOfMeasure2."Qty. per Unit of Measure" * DemandQuantityValue[3]);

      IF CalculateRegenerativePlanAfterCarryOutActionMessage THEN BEGIN
        // Exercise: Calculate Regenerative Plan.
        LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

        // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
        VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.")
      END;
    END;

    [Test]
    PROCEDURE DemandWithMaximumOrderQuantity@117();
    VAR
      Item@1004 : Record 27;
      RequisitionLine2@1002 : Record 246;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
    BEGIN
      // Setup: Create Item with Planning parameters.
      Initialize;
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<2W>','<2W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItem(Item,Item.FIELDNO("Maximum Order Quantity"),LibraryRandom.RandDec(5,2) + 9);  // Maximum Order Quantity.

      // Create Demand setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 30,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      VerifyRequisitionLineForMaximumOrderQuantity(
        RequisitionLine2,Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],Item."Maximum Order Quantity",0D,
        DemandQuantityValue[1] DIV Item."Maximum Order Quantity");
      RequisitionLine2.TESTFIELD(Quantity,DemandQuantityValue[1] MOD Item."Maximum Order Quantity");
    END;

    [Test]
    PROCEDURE DemandWithMaximumOrderQuantityAndChangeQtyOnDemand@114();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMaximumOrderQuantityAndChangeQty(FALSE);  // Supply as False.
    END;

    [Test]
    PROCEDURE DemandSupplyWithMaximumOrderQuantityAndChangeQtyOnDemand@110();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMaximumOrderQuantityAndChangeQty(TRUE);  // Supply as True.
    END;

    LOCAL PROCEDURE DemandSupplyWithMaximumOrderQuantityAndChangeQty@177(Supply@1007 : Boolean);
    VAR
      Item@1004 : Record 27;
      SalesLine@1005 : Record 37;
      RequisitionLine2@1006 : Record 246;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyQuantityValue@1003 : ARRAY [5] OF Decimal;
      SupplyDateValue@1002 : ARRAY [5] OF Date;
      PlanningLinesCountBeforeCarryOut@1012 : Integer;
      SupplyType@1009 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<2W>','<2W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItem(Item,Item.FIELDNO("Maximum Order Quantity"),LibraryRandom.RandDec(5,2) + 9);  // Maximum Order Quantity.

      // Create Demand -Supply setup with Random Values taking Global Variable for Sales and Purchase.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 30,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);
      UpdateQuantityForSales(SalesLine,GlobalSalesHeader[1]."No.",DemandQuantityValue[1] + 5);

      IF Supply THEN BEGIN
        UpdateShipmentDateForSales(SalesLine,GlobalSalesHeader[1]."No.",GetRandomDateUsingWorkDate(15));
        CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
        CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(11),0D,0D,0D,0D);  // Dates based on WORKDATE.
        CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 60,0,0,0,0);
        CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
      END;

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet lines.
      IF Supply THEN BEGIN
        VerifyRequisitionLineForMaximumOrderQuantity(
          RequisitionLine2,Item."No.",RequisitionLine."Action Message"::Reschedule,SalesLine."Shipment Date",
          Item."Maximum Order Quantity",DemandDateValue[1],(DemandQuantityValue[1] DIV Item."Maximum Order Quantity") - 1);
        SelectRequisitionLineForActionMessage(
          RequisitionLine2,Item."No.",RequisitionLine."Action Message"::"Resched. & Chg. Qty.",SalesLine."Shipment Date");
        VerifyQuantityAndDateOnRequisitionLine(
          RequisitionLine2,DemandDateValue[1],Item."Maximum Order Quantity",DemandQuantityValue[1] MOD Item."Maximum Order Quantity");
        RequisitionLine2.NEXT;
        VerifyQuantityAndDateOnRequisitionLine(
          RequisitionLine2,SupplyDateValue[1],SalesLine.Quantity MOD Item."Maximum Order Quantity",SupplyQuantityValue[1]);
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Change Qty.",DemandDateValue[1],
          DemandQuantityValue[1] MOD Item."Maximum Order Quantity",Item."Maximum Order Quantity",0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,
          SalesLine.Quantity -
          DemandQuantityValue[1] + DemandQuantityValue[1] MOD Item."Maximum Order Quantity" - Item."Maximum Order Quantity",0D,'','');
        VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandSupplyWithMaximumOrderQuantityAndCarryOutActionMessage@144();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMaximumOrderQuantityWithCarryOutActionMessage(FALSE);  // Change Quantity on Purchase as False.
    END;

    [Test]
    PROCEDURE DemandSupplyWithMaximumOrderQuantityCarryOutActionMessageAndChangeQtyOnSupply@129();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithMaximumOrderQuantityWithCarryOutActionMessage(TRUE);  // Change Quantity on Purchase as True.
    END;

    LOCAL PROCEDURE DemandSupplyWithMaximumOrderQuantityWithCarryOutActionMessage@170(ChangeQuantityOnPurchase@1006 : Boolean);
    VAR
      Item@1004 : Record 27;
      SalesLine@1005 : Record 37;
      PurchaseLine@1008 : Record 39;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
      SupplyQuantityValue@1003 : ARRAY [5] OF Decimal;
      SupplyDateValue@1002 : ARRAY [5] OF Date;
      PlanningLinesCountBeforeCarryOut@1012 : Integer;
      SupplyType@1009 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Setup: Create Item with Planning parameters.
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",'<2W>','<2W>',TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      UpdateItem(Item,Item.FIELDNO("Maximum Order Quantity"),LibraryRandom.RandDec(5,2) + 9);  // Maximum Order Quantity.

      // Create Demand -Supply setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(5),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 30,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);
      UpdateQuantityForSales(SalesLine,GlobalSalesHeader[1]."No.",DemandQuantityValue[1] + 5);
      UpdateShipmentDateForSales(SalesLine,GlobalSalesHeader[1]."No.",GetRandomDateUsingWorkDate(15));

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(11),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 60,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,'',Item."No.",'');
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      IF ChangeQuantityOnPurchase THEN
        UpdateQuantityForPurchase(PurchaseLine,GlobalPurchaseHeader[1]."No.",Item."Maximum Order Quantity");

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet Lines and all the Planning Worksheet Lines are cleared after Carry Out Action message.
      IF ChangeQuantityOnPurchase THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::"Change Qty.",SalesLine."Shipment Date",Item."Maximum Order Quantity",
          SalesLine.Quantity MOD Item."Maximum Order Quantity",0D,'','');
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
      END ELSE
        VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
    END;

    [Test]
    PROCEDURE DemandAfterSupplyForFRQItem@213();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyForItemWithReorderPointPolicy(TRUE,FALSE);  // FRQ Item, Carry out action message - FALSE,  Calculate regenerative plan only.
    END;

    [Test]
    PROCEDURE DemandSupplyForFRQItemCarryOutActionMessage@222();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyForItemWithReorderPointPolicy(TRUE,TRUE);  // FRQ Item, Carry out action message.
    END;

    [Test]
    PROCEDURE DemandAfterSupplyForMQItem@163();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyForItemWithReorderPointPolicy(FALSE,FALSE);  // MQ Item, Carry out action message - FALSE,  Calculate regenerative plan only.
    END;

    [Test]
    PROCEDURE DemandSupplyForMQItemCarryOutActionMessage@160();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyForItemWithReorderPointPolicy(FALSE,TRUE);  // MQ Item, Carry out action message.
    END;

    LOCAL PROCEDURE DemandSupplyForItemWithReorderPointPolicy@151(FRQItem@1008 : Boolean;CarryOutActionMessage@1000 : Boolean);
    VAR
      Item@1006 : Record 27;
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      PlanningLinesCountBeforeCarryOut@1001 : Integer;
      NewProdOrderDate@1007 : Date;
      PlanningWorksheetQuantity@1009 : Decimal;
      SupplyType@1011 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateReorderPointPolicyItem(Item,FRQItem,LibraryRandom.RandDec(5,2) + 500,0,0);  // Reorder Qty or Maximum Inventory, Reorder Point, Safety Stock Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(20),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 900,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(10),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 1200,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');
      PlanningWorksheetQuantity := SelectItemQuantity(Item,FRQItem);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      IF CarryOutActionMessage THEN BEGIN
        // Exercise: Carry Out Action Message on Planning Worksheet lines.
        AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

        // Verify: Verify that all the Planning Worksheet Lines are cleared after Carry Out Action message.
        VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
      END ELSE BEGIN
        // Verify: Verify Planning Worksheet.
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,PlanningWorksheetQuantity,0D,
          '','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,DemandQuantityValue[1] - PlanningWorksheetQuantity,
          0D,'','');
        NewProdOrderDate := SelectDateWithSafetyLeadTime(DemandDateValue[1],1);
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,CALCDATE('<1D>',NewProdOrderDate),0,PlanningWorksheetQuantity,0D,'','');
        VerifyRequisitionLineCount(4);  // Expected no of lines in Planning Worksheet. Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandLessThanReorderQtyAndBeforeSupplyForFRQItem@214();
    BEGIN
      // Setup.
      Initialize;
      DemandLessThanReorderQtyAndBeforeSupply(TRUE);  // FRQ Item.
    END;

    [Test]
    PROCEDURE DemandLessThanReorderQtyAndBeforeSupplyForMQItem@179();
    BEGIN
      // Setup.
      Initialize;
      DemandLessThanReorderQtyAndBeforeSupply(FALSE);  // MQ Item.
    END;

    LOCAL PROCEDURE DemandLessThanReorderQtyAndBeforeSupply@180(FRQItem@1000 : Boolean);
    VAR
      Item@1005 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      PlanningWorksheetQuantity@1006 : Decimal;
      SupplyType@1008 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateReorderPointPolicyItem(Item,FRQItem,LibraryRandom.RandDec(5,2) + 1000,0,0);  // Reorder Qty or Maximum Inventory, Reorder Point, Safety Stock Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 100,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 1200,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');
      PlanningWorksheetQuantity := SelectItemQuantity(Item,FRQItem);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,PlanningWorksheetQuantity,0D,'',
        '');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Change Qty.",SupplyDateValue[1],SupplyQuantityValue[1],DemandQuantityValue[1],
        0D,'','');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandMoreThanReorderQtyForFRQItem@217();
    BEGIN
      // Setup.
      Initialize;
      DemandMoreThanReorderAndMaxInventory(TRUE);  // FRQ Item.
    END;

    [Test]
    PROCEDURE DemandMoreThanMaximumInventoryForMQItem@181();
    BEGIN
      // Setup.
      Initialize;
      DemandMoreThanReorderAndMaxInventory(FALSE);  // MQ Item.
    END;

    LOCAL PROCEDURE DemandMoreThanReorderAndMaxInventory@182(FRQItem@1000 : Boolean);
    VAR
      Item@1006 : Record 27;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      NewProdOrderDate@1001 : Date;
      PlanningWorksheetQuantity@1007 : Decimal;
    BEGIN
      // Create Item with planning parameters.
      CreateReorderPointPolicyItem(Item,FRQItem,LibraryRandom.RandDec(5,2) + 1000,0,0);  // Reorder Qty or Maximum Inventory, Reorder Point, Safety Stock Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(30),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 900,LibraryRandom.RandDec(5,2) + 200,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.
      PlanningWorksheetQuantity := SelectItemQuantity(Item,FRQItem);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,PlanningWorksheetQuantity,0D,'',
        '');
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[2],0,
        DemandQuantityValue[1] + DemandQuantityValue[2] - PlanningWorksheetQuantity,0D,'','');
      NewProdOrderDate := SelectDateWithSafetyLeadTime(DemandDateValue[2],1);
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,CALCDATE('<1D>',NewProdOrderDate),0,PlanningWorksheetQuantity,0D,'','');
      VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandSupplyForFRQItemWithReorderPoint@218();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithReorderPoint(TRUE);  // FRQ Item.
    END;

    [Test]
    PROCEDURE DemandSupplyForMQItemWithReorderPoint@183();
    BEGIN
      // Setup.
      Initialize;
      DemandSupplyWithReorderPoint(FALSE);  // MQ Item.
    END;

    LOCAL PROCEDURE DemandSupplyWithReorderPoint@184(FRQItem@1006 : Boolean);
    VAR
      Item@1005 : Record 27;
      SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      DemandQuantityValue@1001 : ARRAY [3] OF Decimal;
      NewProdOrderDate@1000 : Date;
      PlanningWorksheetQuantity@1007 : Decimal;
      SupplyType@1009 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
    BEGIN
      // Create Item with planning parameters.
      CreateReorderPointPolicyItem(Item,FRQItem,LibraryRandom.RandDec(5,2) + 1000,LibraryRandom.RandDec(5,2) + 200,0);  // Reorder Quantity or Maximum Inventory, Reorder Point, Safety Stock Qty.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales and Production.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(30),0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 900,LibraryRandom.RandDec(5,2) + 200,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);  // Number of Sales Order.

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,GetRandomDateUsingWorkDate(20),0D,0D,0D,0D);  // Dates based on WORKDATE.
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandDec(5,2) + 1200,0,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');
      PlanningWorksheetQuantity := SelectItemQuantity(Item,FRQItem);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,PlanningWorksheetQuantity,0D,'',
        '');
      NewProdOrderDate := SelectDateWithSafetyLeadTime(DemandDateValue[1],1);
      IF FRQItem THEN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,CALCDATE('<1D>',NewProdOrderDate),0,PlanningWorksheetQuantity,0D,'','')
      ELSE
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,CALCDATE('<1D>',NewProdOrderDate),0,DemandQuantityValue[1],0D,'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::Cancel,SupplyDateValue[1],SupplyQuantityValue[1],0,0D,'','');
      VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandOnlyForFRQItemWithReorderPointAndSafetyStock@221();
    BEGIN
      // Setup.
      Initialize;
      DemandOnlyForWithReorderPointAndSafetyStock(TRUE);  // FRQ Item.
    END;

    [Test]
    PROCEDURE DemandOnlyForMQItemWithReorderPointAndSafetyStock@185();
    BEGIN
      // Setup.
      Initialize;
      DemandOnlyForWithReorderPointAndSafetyStock(FALSE);  // MQ Item.
    END;

    LOCAL PROCEDURE DemandOnlyForWithReorderPointAndSafetyStock@186(FRQItem@1005 : Boolean);
    VAR
      Item@1004 : Record 27;
      DemandDateValue@1001 : ARRAY [3] OF Date;
      DemandQuantityValue@1000 : ARRAY [3] OF Decimal;
    BEGIN
      // Create Item with planning parameters.
      CreateReorderPointPolicyItem(
        Item,FRQItem,LibraryRandom.RandDec(5,2) + 500,LibraryRandom.RandDec(5,2) + 50,
        LibraryRandom.RandDec(5,2) + 10);  // Reorder Quantity or Maximum Inventory, Reorder Point, Safety Stock.

      // Create Demand - Supply setup with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(20),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2) + 100,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.

      // Verify: Verify Planning Worksheet.
      IF FRQItem THEN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,Item."Reorder Quantity",0D,'','')
      ELSE
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,
          Item."Maximum Inventory" - Item."Safety Stock Quantity",0D,'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,WORKDATE,0,Item."Safety Stock Quantity",0D,'','');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandLessThanMaximumInventoryWithReorderPointMQItem@187();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.
      DemandWithReorderPointAndMaxInventory(Item,Item."Reorder Point" + 1);  // Sales Quantity greater than Reorder Point but Less than Maximum Inventory.
    END;

    [Test]
    PROCEDURE DemandEqualsMaximumInventoryMQItem@178();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.
      DemandWithReorderPointAndMaxInventory(Item,Item."Maximum Inventory");  // Sales Qty equals Maximum Inventory.
    END;

    [Test]
    PROCEDURE DemandEqualsMaximumInventoryAndReorderPointMQItem@175();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.
      DemandWithReorderPointAndMaxInventory(Item,Item."Maximum Inventory" + Item."Reorder Point");  // Sales Qty equals Sum of Maximum Inventory and Reorder Point.
    END;

    [Test]
    PROCEDURE DemandGreaterThanMaximumInventoryAndReorderPointMQItem@174();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.
      DemandWithReorderPointAndMaxInventory(Item,Item."Maximum Inventory" + Item."Reorder Point" + 1);  // Sales Qty greater than Sum of Maximum Inventory and Reorder Point.
    END;

    LOCAL PROCEDURE DemandWithReorderPointAndMaxInventory@169(Item@1005 : Record 27;SalesQty@1004 : Decimal);
    VAR
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
    BEGIN
      // Create Demand setup with Random Values.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(0),0D,0D);  // Shipment Date is WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,SalesQty,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order : 1.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));  // Dates based on WORKDATE. Planning Period - 1 Month, covers Sales shipments.

      // Verify: Verify Planning Worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,Item."Maximum Inventory",0D,'','');
      VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,SalesQty,0D,'','');
      VerifyRequisitionLineCount(2);  // Expected no of lines in Planning Worksheet. Count Value important.
    END;

    [Test]
    PROCEDURE DemandLessThanExistingInventoryAndMaximumInventoryMQItem@167();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.
      DemandWithReorderPointMaxInventoryAndExistingInventory(Item,TRUE,Item."Maximum Inventory" - 1,Item."Reorder Point" + 1);  // Boolean - Existing Inventory More than Sales Quantity.
    END;

    [Test]
    PROCEDURE DemandMoreThanExistingInventoryLessThanMaximumInventoryMQItem@165();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.
      DemandWithReorderPointMaxInventoryAndExistingInventory(Item,FALSE,Item."Reorder Point" - 1,Item."Reorder Point" + 1);  // Boolean - Existing Inventory less than Sales Qty and less than Maximum Inventory.
    END;

    LOCAL PROCEDURE DemandWithReorderPointMaxInventoryAndExistingInventory@152(Item@1005 : Record 27;ExistingInventoryMoreThanDemand@1000 : Boolean;InventoryQty@1006 : Decimal;SalesQty@1004 : Decimal);
    VAR
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      NewPurchOrderDate@1001 : Date;
    BEGIN
      // Update Item with inventory.
      UpdateItemInventory(Item."No.",InventoryQty);

      // Create Demand setup with Random Values.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(0),0D,0D);  // Shipment Date is WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,SalesQty,0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order : 1.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));  // Dates based on WORKDATE. Planning Period - 1 Month, must cover any shipments.

      // Verify: Verify Planning Worksheet.
      Item.CALCFIELDS(Inventory);
      NewPurchOrderDate := SelectDateWithSafetyLeadTime(DemandDateValue[1],1);
      IF ExistingInventoryMoreThanDemand THEN BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,CALCDATE('<1D>',NewPurchOrderDate),0,
          Item."Maximum Inventory" - (Item.Inventory - SalesQty),0D,'','');
        VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Count Value important.
      END ELSE BEGIN
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,
          Item."Maximum Inventory" - Item.Inventory,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,DemandDateValue[1],0,SalesQty - Item.Inventory,0D,'','');
        VerifyRequisitionLine(
          Item."No.",RequisitionLine."Action Message"::New,CALCDATE('<1D>',NewPurchOrderDate),0,Item.Inventory,0D,'','');
        VerifyRequisitionLineCount(3);  // Expected no of lines in Planning Worksheet. Count Value important.
      END;
    END;

    [Test]
    PROCEDURE DemandLessThanMaxInventoryMQItem@195();
    VAR
      Item@1005 : Record 27;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      PlanningWorksheetQuantity@1001 : Decimal;
    BEGIN
      // Setup.
      Initialize;

      // Create Maximum Quantity Item with planning parameters - Max. Inventory.
      CreateMQItem(Item,Item."Replenishment System"::Purchase,LibraryRandom.RandDec(5,2) + 100,0,0);

      // Create Demand - with Random Values taking Global Variable for Sales. Sales Qty less than Max. Inventory.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2),0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.
      PlanningWorksheetQuantity := SelectItemQuantity(Item,FALSE);  // False for Maximum Inventory.

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Date based on WORKDATE.

      // Verify: Verify Requisition lines on Planning Worksheet.
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::New,SelectDateWithSafetyLeadTime(WORKDATE,1),0,PlanningWorksheetQuantity,0D,'',
        '');
      VerifyRequisitionLineCount(1);  // Expected no of lines in Planning Worksheet. Value important.
    END;

    [Test]
    PROCEDURE DemandForMQItemReplenishPurchaseWithMaxInventoryCarryOutAM@198();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      DemandWithMaximumInventory(Item."Replenishment System"::Purchase);
    END;

    [Test]
    PROCEDURE DemandForMQItemReplenishProdOrderWithMaxInventoryCarryOutAM@197();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      DemandWithMaximumInventory(Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(CheckOrderExistsMessageHandler)]
    PROCEDURE DemandChangingWithDeletionPlanningWorksheetLineProductionOrder@261();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1005 : Record 5405;
      RequisitionLine@1003 : Record 246;
      DummyCount@1001 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Production]
      // [SCENARIO 378897] Carry Out Action Message should not delete requisition line and give warning if production order was deleted after creating from Carry Out Action Message.

      Initialize;

      // [GIVEN] Create Sales Order and connected Product Order by using Carry Out Action Message.
      // [GIVEN] Calculate Regenerative Plan after updating Sales Order.
      CreatePlanWkshLineWithChangeQtyActionMessage(Item,Item."Replenishment System"::"Prod. Order",LibraryRandom.RandInt(50));

      // [GIVEN] Delete Production Order.
      ProductionOrder.GET(ProductionOrder.Status::"Firm Planned",GetOrderNo(Item."No."));
      ProductionOrder.DELETE(TRUE);

      // [WHEN] Carry out planning lines in Production Order.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",DummyCount);

      // [THEN] 'The supply type could not be changed in order.' message appeared.
      // Verification is done in CheckOrderExistsMessageHandler
      // [THEN] Requisition line exists for deleted Production Order.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.RecordIsNotEmpty(RequisitionLine);
    END;

    [Test]
    [HandlerFunctions(CheckOrderExistsMessageHandler)]
    PROCEDURE DemandChangingWithDeletionPlanningWorksheetLineAssemblyOrder@264();
    VAR
      Item@1006 : Record 27;
      AssemblyHeader@1001 : Record 900;
      RequisitionLine@1002 : Record 246;
      DummyCount@1000 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Assembly]
      // [SCENARIO 378897] Carry Out Action Message should not delete requisition line and give warning if assembly order was deleted after creating from Carry Out Action Message.

      Initialize;

      // [GIVEN] Create Sales Order and connected Assembly Order by using Carry Out Action Message.
      // [GIVEN] Calculate Regenerative Plan after updating Sales Order.
      CreatePlanWkshLineWithChangeQtyActionMessage(Item,Item."Replenishment System"::Assembly,LibraryRandom.RandInt(50));

      // [GIVEN] Delete Assembly Order.
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,GetOrderNo(Item."No."));
      AssemblyHeader.DELETE(TRUE);

      // [WHEN] Carry out planning lines in Assembly Order.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",DummyCount);

      // [THEN] 'The supply type could not be changed in order.' message appeared.
      // Verification is done in CheckOrderExistsMessageHandler.
      // [THEN] Requisition line exists for deleted Assembly Order.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.RecordIsNotEmpty(RequisitionLine);
    END;

    [Test]
    [HandlerFunctions(CheckOrderExistsMessageHandler)]
    PROCEDURE DemandChangingWithDeletionPlanningWorksheetLinePurchaseOrder@276();
    VAR
      Item@1003 : Record 27;
      PurchaseHeader@1002 : Record 38;
      RequisitionLine@1001 : Record 246;
      DummyCount@1000 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Purchase]
      // [SCENARIO 378897] Carry Out Action Message should not delete requisition line and give warning if purchase order was deleted after creating from Carry Out Action Message.

      Initialize;

      // [GIVEN] Create Sales Order and connected Purchase Order by using Carry Out Action Message.
      // [GIVEN] Calculate Regenerative Plan after updating Sales Order.
      CreatePlanWkshLineWithChangeQtyActionMessage(Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(50));

      // [GIVEN] Delete Purchase Order.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,GetOrderNo(Item."No."));
      PurchaseHeader.DELETE(TRUE);

      // [WHEN] Carry out planning lines in Purchase Order.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",DummyCount);

      // [THEN] 'The supply type could not be changed in order.'error message appeared.
      // Verification is done in CheckOrderExistsMessageHandler.
      // [THEN] Requisition line exists for deleted Assembly Order.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.RecordIsNotEmpty(RequisitionLine);
    END;

    LOCAL PROCEDURE DemandWithMaximumInventory@196(ReplenishmentSystem@1007 : Option);
    VAR
      Item@1005 : Record 27;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      PlanningWorksheetQuantity@1001 : Decimal;
      PlanningLinesCountBeforeCarryOut@1006 : Integer;
    BEGIN
      // Create Maximum Quantity Item with planning parameters.
      CreateMQItem(Item,ReplenishmentSystem,LibraryRandom.RandDec(5,2) + 100,0,0);

      // Create Demand - with Random Values taking Global Variable for Sales. Sales Qty less than Max. Inventory.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(5,2),0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.
      PlanningWorksheetQuantity := SelectItemQuantity(Item,FALSE);  // False for Maximum Inventory.

      // Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Date based on WORKDATE.

      // Exercise: Accept and Carry Out Action Message for Planning Worksheet lines.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify Planning Worksheet Lines are cleared after Carry Out Action message and New Purchase or Production Order is created with required quantity.
      VerifyPlanningWorksheetEmpty(PlanningLinesCountBeforeCarryOut,Item."No.");
      IF ReplenishmentSystem = Item."Replenishment System"::Purchase THEN
        VerifyPurchaseOrderQuantity(Item."No.",PlanningWorksheetQuantity)
      ELSE
        VerifyProdOrderQuantity(Item."No.",PlanningWorksheetQuantity);
    END;

    [Test]
    PROCEDURE DemandForMQItemReplenishPurchaseCarryOutAMWithFlexibilityNone@190();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      DemandForMQItemCarryOutAMWithFlexibilityNone(Item."Replenishment System"::Purchase)
    END;

    [Test]
    PROCEDURE DemandForMQItemReplenishProdOrderCarryOutAMWithFlexibilityNone@194();
    VAR
      Item@1005 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      DemandForMQItemCarryOutAMWithFlexibilityNone(Item."Replenishment System"::"Prod. Order")
    END;

    LOCAL PROCEDURE DemandForMQItemCarryOutAMWithFlexibilityNone@200(ReplenishmentSystem@1006 : Option);
    VAR
      Item@1005 : Record 27;
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      PlanningLinesCountBeforeCarryOut@1000 : Integer;
    BEGIN
      // Create Maximum Quantity Item with planning parameter - Max. Inventory.
      CreateMQItem(Item,ReplenishmentSystem,LibraryRandom.RandDec(10,2) + 100,0,0);

      // Create Demand - with Random Values taking Global Variable for Sales.
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),0D,0D);  // Dates based on WORKDATE.
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandDec(10,2),0,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);  // Number of Sales Order.

      // Calculate Regenerative Plan and update Planning Flexibility to None on the generated Requisition Line.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(30));  // Date based on WORKDATE.
      UpdatePlanningFlexibilityOnRequisition(Item."No.");

      // Exercise: Accept and Carry Out Action Message for Planning Worksheet lines.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);

      // Verify: Verify created Purchase or Production Order line has Planning Flexibility - None.
      IF ReplenishmentSystem = Item."Replenishment System"::Purchase THEN
        VerifyPurchaseOrderPlanningFlexibility(Item."No.")
      ELSE
        VerifyProdOrderPlanningFlexibility(Item."No.");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithMaximumOrderQtyWithPurchaseOrderAndItemInventory@19();
    VAR
      ManufacturingSetup@1005 : Record 99000765;
      Item@1000 : Record 27;
      RequisitionWkshName@1002 : Record 245;
      ProductionForecastEntry@1004 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1003 : TestPage 99000852;
    BEGIN
      // Setup: Create Item, create Purchase Order, update Item Inventory.
      Initialize;

      // Create Lot For Lot Item and demand on Production Forecast.
      // First TRUE: create a Purchase Order, second TRUE: update Item Inventory.
      GeneralSetupForPlanningWorksheet(ManufacturingSetup,Item,ProductionForecastEntry,RequisitionWkshName,TRUE,TRUE);

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      // Verify quantity on RequisitionLine of Planning Worksheet was less than Maximum Order Quantity of the Item.
      // Verify supply have met demand and Safety Stock Quantity.
      VerifyPlanWkshLineForMaximumOrderQuantity(ProductionForecastEntry,Item,PlanningWorksheet,RequisitionWkshName.Name);

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithMaximumOrderQtyWithPurchaseOrder@224();
    VAR
      ManufacturingSetup@1006 : Record 99000765;
      Item@1005 : Record 27;
      RequisitionWkshName@1003 : Record 245;
      ProductionForecastEntry@1002 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1001 : TestPage 99000852;
    BEGIN
      // Setup: Create Item, create Purchase Order.
      Initialize;

      // Create Lot For Lot Item and demand on Production Forecast.
      // TRUE: create a Purchase Order,FALSE: no Item Inventory.
      GeneralSetupForPlanningWorksheet(ManufacturingSetup,Item,ProductionForecastEntry,RequisitionWkshName,TRUE,FALSE);

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      // Verify quantity on RequisitionLine of Planning Worksheet was less than Maximum Order Quantity of the Item.
      // Verify supply have met demand and Safety Stock Quantity.
      VerifyPlanWkshLineForMaximumOrderQuantity(ProductionForecastEntry,Item,PlanningWorksheet,RequisitionWkshName.Name);

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithMaximumOrderQtyWithItemInventory@225();
    VAR
      ManufacturingSetup@1006 : Record 99000765;
      Item@1005 : Record 27;
      RequisitionWkshName@1003 : Record 245;
      ProductionForecastEntry@1002 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1001 : TestPage 99000852;
    BEGIN
      // Setup: Create Item, update Item Inventory.
      Initialize;

      // Create Lot For Lot Item and demand on Production Forecast.
      // FALSE: do not create a Purchase Order, TRUE: update Item Inventory.
      GeneralSetupForPlanningWorksheet(ManufacturingSetup,Item,ProductionForecastEntry,RequisitionWkshName,FALSE,TRUE);

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      // Verify quantity on RequisitionLine of Planning Worksheet was less than Maximum Order Quantity of the Item.
      // Verify supply have met demand and Safety Stock Quantity.
      VerifyPlanWkshLineForMaximumOrderQuantity(ProductionForecastEntry,Item,PlanningWorksheet,RequisitionWkshName.Name);

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DemandSupplyWithMaximumOrderQtyWithoutPurchaseOrderAndItemInventory@226();
    VAR
      ManufacturingSetup@1006 : Record 99000765;
      Item@1005 : Record 27;
      RequisitionWkshName@1003 : Record 245;
      ProductionForecastEntry@1002 : ARRAY [3] OF Record 99000852;
      PlanningWorksheet@1001 : TestPage 99000852;
    BEGIN
      // Setup: Create Item.
      Initialize;

      // Create Lot For Lot Item and demand on Production Forecast.
      // First FALSE: do not create a Purchase Order, second FALSE: no Item Inventory.
      GeneralSetupForPlanningWorksheet(ManufacturingSetup,Item,ProductionForecastEntry,RequisitionWkshName,FALSE,FALSE);

      // Exercise: Calculate Regenerative Plan.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name);

      // Verify: Verify planning worksheet.
      // Verify quantity on RequisitionLine of Planning Worksheet was less than Maximum Order Quantity of the Item.
      // Verify supply have met demand and Safety Stock Quantity.
      VerifyPlanWkshLineForMaximumOrderQuantity(ProductionForecastEntry,Item,PlanningWorksheet,RequisitionWkshName.Name);

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
    END;

    [Test]
    PROCEDURE DemandSupplyWithBaseCalendarForPlanningWorksheet@199();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1006 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Calculate Regenerative Plan (LFL Item) with Base Calender and Carry out Action Message.
      // Verify "Expected Receipt Date" in Purchase order is consistent with "Shipment Date" of the Sales Demand.
      Initialize;
      ManufacturingSetup.GET;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, Create Vendor, bind the calendar
      // to the Vendor, create a Lot-For-Lot Item, set the vendor as the supplier. Create a Sales Order, set the shipment date
      // of the sales line as Friday, set ManufacturingSetup."Default Safety Lead Time" to 0D.
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD5>',GetRandomDateUsingWorkDate(30)),0);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60)); // Calculate Regenerative Plan on Planning worksheet
      SelectSalesLine(SalesLine,SalesHeader."No.");
      SelectRequisitionLineForActionMessage(
        RequisitionLine,Item."No.",RequisitionLine."Action Message"::New,SalesLine."Shipment Date");

      // Exercise: Carry out action message on the planning worksheet.
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);

      // Verify: Verify Expected Receipt Date = SalesLine."Shipment Date", Planned Receipt Date = SalesLine."Shipment Date",
      // and Order Date is the latest working day (Sunday) before the Planned Receipt Date.
      VerifyDateOnPurchaseLine(
        Item."No.",SalesLine."Shipment Date",SalesLine."Shipment Date",CALCDATE('<-WD7>',SalesLine."Shipment Date"));

      // Exercise: Calculate Regenerative Plan on Planning worksheet again.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: No requisition line exists for the item.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,RequisitionLineNotEmptyErr);

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE DemandSupplyWithBaseCalendarForOrderPlanning@206();
    VAR
      Item@1005 : Record 27;
      RequisitionLine@1003 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1000 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      // Calculate Order Planning with Base Calender and Make to Order.
      // Verify "Expected Receipt Date" in Purchase order is consistent with "Shipment Date" of the Sales Demand.
      Initialize;
      ManufacturingSetup.GET;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, Create Vendor, bind the calendar
      // to the Vendor, create a Lot-For-Lot Item, set the vendor as the supplier. Create a Sales Order, set the shipment date
      // of the sales line as Friday, set ManufacturingSetup."Default Safety Lead Time" to 0D.
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD5>',WORKDATE),0);

      // Exercise: Calculate Order Planning for Sales Order.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Find the requisition line in Order Planning.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.FINDFIRST;
      SelectSalesLine(SalesLine,SalesHeader."No.");

      // Verify: Due Date of Requisition Line equals the Shipment Date of Sales demand.
      RequisitionLine.TESTFIELD("Due Date",SalesLine."Shipment Date");

      // Exercise: Make the requisition line to Purchase Order
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify: Verify Expected Receipt Date = SalesLine."Shipment Date", Planned Receipt Date = SalesLine."Shipment Date",
      // and Order Date is the latest working day (Sunday) before the Planned Receipt Date.
      VerifyDateOnPurchaseLine(
        Item."No.",SalesLine."Shipment Date",SalesLine."Shipment Date",CALCDATE('<-WD7>',SalesLine."Shipment Date"));

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    PROCEDURE CalculatePlanningWorksheetWithBaseCalendar@219();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1006 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1001 : Record 36;
      DefaultSafetyLeadTime@1003 : Integer;
    BEGIN
      // Calculate Regenerative Plan (Maximum Qty. Item) with Base Calender. Verify "Due Date" in Requisition line.
      Initialize;
      ManufacturingSetup.GET;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, create Vendor, bind the calendar
      // to the Vendor, create an Item with Reordering Policy = Maximum Qty., set the vendor as the supplier. Create a Sales Order, set the shipment date
      // of the sales line as Saturday, set ManufacturingSetup."Default Safety Lead Time" to random value.
      DefaultSafetyLeadTime := LibraryRandom.RandInt(10);
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD6>',GetRandomDateUsingWorkDate(30)),DefaultSafetyLeadTime);
      UpdateItemReorderingPolicy(Item,Item."Reordering Policy"::"Maximum Qty.");

      // Exercise: Calculate Regenerative Plan on Planning worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // Verify: Find the requistion line and verify calculating Due Date from Ending Date doesn't need to consider Vendor's calendar.
      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD("Due Date",RequisitionLine."Ending Date" + DefaultSafetyLeadTime);

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    PROCEDURE CalculatePlanningWorksheetAndCarryOutWithBaseCalendar@232();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1006 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1001 : Record 36;
      PurchaseLine@1007 : Record 39;
      OrderDate@1005 : Date;
    BEGIN
      // Calculate Regenerative Plan (LFL Item) with Base Calender and carry out Purchase Order.
      // Verify "Order Date" in Requisition line is consistent with the "Order Date" on carried out Purchase Line.
      Initialize;
      ManufacturingSetup.GET;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, create Vendor, bind the calendar
      // to the Vendor, create a Lot-For-Lot Item with setting Lead Time Calculation, set the vendor as the supplier. Create a Sales Order, set the shipment date
      // of the sales line as Saturday, set ManufacturingSetup."Default Safety Lead Time" to random value.
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD6>',GetRandomDateUsingWorkDate(30)),LibraryRandom.RandInt(10));
      UpdateItemLeadTimeCalculation(Item,LibraryRandom.RandInt(10));

      // Exercise: Calculate Regenerative Plan on Planning worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));
      FindRequisitionLine(RequisitionLine,Item."No.");
      OrderDate := RequisitionLine."Order Date";

      // Carry out action message on the planning worksheet.
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
      FilterPurchaseOrderLine(PurchaseLine,Item."No.");

      // Verify: Verify "Order Date" in Requisition line consistent with the "Order Date" on carried out Purchase Line.
      Assert.AreEqual(PurchaseLine."Order Date",OrderDate,STRSUBSTNO(OrderDateErr,OrderDate,PurchaseLine."Order Date"));

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    [Test]
    PROCEDURE CalculatePlanningWorksheetWithFilledMaximumQuantity@366();
    VAR
      Item@1000 : Record 27;
      PositiveAdjustmentQuantity@1005 : Integer;
      MaxOrderQuantity@1007 : Integer;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Sales Order]
      // [SCENARIO 379231] Calculate Regenerative Plan should suggest correct quantity if supply with Source Type = "Item Ledger Entry" and Source Type = "Prod. Order Line" exists.
      Initialize;

      PositiveAdjustmentQuantity := LibraryRandom.RandInt(10);
      MaxOrderQuantity := LibraryRandom.RandIntInRange(PositiveAdjustmentQuantity,100);

      // [GIVEN] Lot-For-Lot Item with Minimum and Maximum Order Quantity.
      CreateLFLItemWithMaximumAndMinimumOrderQuantity(Item,MaxOrderQuantity);

      // [GIVEN] Posted positive adjustment and Sales Order with three lines with Quantity = "X".
      PostPositiveAdjustmentAndCreateSalesOrderWithThreeLines(Item,PositiveAdjustmentQuantity,MaxOrderQuantity);

      // [GIVEN] Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // [GIVEN] Carry out first line in Planning Worksheet with Quantity = 2 * "X".
      ChangeQuantityAndAcceptActionMessageInRequisitionLine(Item."No.",2 * MaxOrderQuantity);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);

      // [WHEN] Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // [THEN] Planning Worksheet has one line with Quantity = "X".
      FilterRequisitionLine(RequisitionLine,Item."No.");
      VerifyPlanningWorksheetQuantityAndLineCount(RequisitionLine,MaxOrderQuantity);
    END;

    [Test]
    PROCEDURE ProductionOrderStatusChangingWhenRequisitionLineExist@265();
    VAR
      Item@1003 : Record 27;
      ProductionOrder@1005 : Record 5405;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Production]
      // [SCENARIO 378897] Changing Production Order Status should pass successfully if connected requisition line in Planning Worksheet exists.
      Initialize;

      // [GIVEN] Create Sales Order and connected Product Order by using Carry Out Action Message.
      // [GIVEN] Calculate Regenerative Plan after updating Sales Order.
      CreatePlanWkshLineWithChangeQtyActionMessage(Item,Item."Replenishment System"::"Prod. Order",LibraryRandom.RandInt(50));

      // [GIVEN] Change Production Order status to Released.
      LibraryManufacturing.ChangeStatusFirmPlanToReleased(
        GetOrderNo(Item."No."),ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released);

      // [THEN] Production Order Status is Released.
      ProductionOrder.GET(ProductionOrder.Status::Released,GetOrderNo(Item."No."));
    END;

    [Test]
    PROCEDURE SupplyWithCompanyBaseCalendarCode@269();
    VAR
      Item@1000 : Record 27;
      ServiceMgtSetup@1004 : Record 5911;
      OldBaseCalendarCode@1005 : Code[10];
      ExpectedDate@1001 : Date;
    BEGIN
      // Setup: Create Vendor, Item and add Base Calendar Code to Company Information.
      CreateItemWithVendorNoReorderingPolicy(Item);

      ServiceMgtSetup.GET;
      OldBaseCalendarCode := UpdateCompanyInformationBaseCalendarCode(ServiceMgtSetup."Base Calendar Code");

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));
      FindRequisitionLine(RequisitionLine,Item."No.");

      // Verify: verify Order Date in created requisition line.
      ExpectedDate := FindClosestWorkingDay(ServiceMgtSetup."Base Calendar Code",WORKDATE);
      Assert.AreEqual(ExpectedDate,RequisitionLine."Order Date",STRSUBSTNO(ReqLineOrderDateErr,ExpectedDate));

      // Tear Down.
      UpdateCompanyInformationBaseCalendarCode(OldBaseCalendarCode);
    END;

    [Test]
    PROCEDURE SupplyWithoutCompanyBaseCalendarCode@270();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create Vendor with blank Base Calendar Code, Item.
      CreateItemWithVendorNoReorderingPolicy(Item);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));
      FindRequisitionLine(RequisitionLine,Item."No.");

      // Verify: verify Order Date in created requisition line.
      Assert.AreEqual(WORKDATE,RequisitionLine."Order Date",STRSUBSTNO(ReqLineOrderDateErr,WORKDATE));
    END;

    [Test]
    PROCEDURE SupplyWithCompanyAndVendorBaseCalendarCode@255();
    VAR
      Item@1000 : Record 27;
      ServiceMgtSetup@1004 : Record 5911;
      OldBaseCalendarCode@1005 : Code[10];
      VendorNo@1003 : Code[20];
      ExpectedDate@1001 : Date;
    BEGIN
      // Setup: Create Vendor with Base Calendar Code, Item
      // and add Base Calendar Code to Company Information.
      VendorNo := CreateItemWithVendorNoReorderingPolicy(Item);

      ServiceMgtSetup.GET;
      OldBaseCalendarCode := UpdateCompanyInformationBaseCalendarCode(ServiceMgtSetup."Base Calendar Code");
      UpdateVendorBaseCalendarCode(VendorNo,ServiceMgtSetup."Base Calendar Code");

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));
      FindRequisitionLine(RequisitionLine,Item."No.");

      // Verify: verify Order Date in created requisition line.
      ExpectedDate := FindClosestWorkingDay(ServiceMgtSetup."Base Calendar Code",WORKDATE);
      Assert.AreEqual(ExpectedDate,RequisitionLine."Order Date",STRSUBSTNO(ReqLineOrderDateErr,ExpectedDate));

      // Tear Down.
      UpdateCompanyInformationBaseCalendarCode(OldBaseCalendarCode);
    END;

    [Test]
    PROCEDURE CalculateOrderPlanningWithBaseCalendar@238();
    VAR
      Item@1005 : Record 27;
      RequisitionLine@1003 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1000 : Record 36;
      OrderPromisingSetup@1006 : Record 99000875;
      ReqWkshTemplate@1007 : Record 244;
      DefaultSafetyLeadTime@1001 : Integer;
      OldReqTemplateType@1008 : Option;
    BEGIN
      // Calculate Order Planning (LFL Item) with Base Calender. Verify "Ending Date" in Requisition line.
      Initialize;
      ManufacturingSetup.GET;
      OrderPromisingSetup.GET;
      ReqWkshTemplate.GET(OrderPromisingSetup."Order Promising Template");
      IF ReqWkshTemplate.Type <> ReqWkshTemplate.Type::Planning THEN BEGIN
        OldReqTemplateType := ReqWkshTemplate.Type;
        ReqWkshTemplate.Type := ReqWkshTemplate.Type::Planning;
        ReqWkshTemplate.MODIFY;
      END;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, create Vendor, bind the calendar
      // to the Vendor, create a Lot-For-Lot Item, set the vendor as the supplier. Create a Sales Order, set the shipment date
      // of the sales line as Saturday, set ManufacturingSetup."Default Safety Lead Time" to random value.
      DefaultSafetyLeadTime := LibraryRandom.RandInt(10);
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD6>',WORKDATE),DefaultSafetyLeadTime);

      // Exercise: Calculate Order Planning for Sales Order.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify: Find the requistion line and verify calculating Ending Date from Due Date doesn't need to consider Vendor's calendar.
      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD("Ending Date",RequisitionLine."Due Date" - DefaultSafetyLeadTime);

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
      IF ReqWkshTemplate.Type <> OldReqTemplateType THEN BEGIN
        ReqWkshTemplate.Type := OldReqTemplateType;
        ReqWkshTemplate.MODIFY;
      END;
    END;

    [Test]
    PROCEDURE CalculatePlanningWorksheetWithBaseCalendarAndItemVendorForLotForLotItem@247();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Calculate Regenerative Plan (LFL Item) with Base Calender and Item Vendor. Verify "Ending Date" in Requisition line.
      CalculatePlanningWorksheetWithBaseCalendarAndItemVendor(Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    PROCEDURE CalculatePlanningWorksheetWithBaseCalendarAndItemVendorForOrderItem@249();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Calculate Regenerative Plan (Order Item) with Base Calender and Item Vendor. Verify "Ending Date" in Requisition line.
      CalculatePlanningWorksheetWithBaseCalendarAndItemVendor(Item."Reordering Policy"::Order);
    END;

    [Test]
    PROCEDURE CalcReqWkshForFRQItemWithSupply@230();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1004 : Record 246;
      OrderDate@1001 : Date;
    BEGIN
      // Calculate Plan (FRQ Item) on Requisition Worksheet with Supply for blank Location. Verify Requisition Worksheet.

      // Setup: Create Item with Reordering Policy = Fixed Reorder Qty., set Item's Lead Time Calculation.
      // Create a Purchase Line for Item and Quantity greater than Item's Reorder Point.
      // Exercise: Calculate Plan for Item with Starting Date = Ending Date = PurchaseLine."Order Date".
      // Verify: Verify no error pops up.
      Initialize;
      CreatePurchOrdWithFRQItemAndCalculatePlan(Item,OrderDate,FALSE); // FALSE indicates no location code on Purchase Line

      // Verify: No Requisition Line calculated since the Quantity on Purchase Line is greater than Item's Reorder Point.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,RequisitionLineNotEmptyErr);
    END;

    [Test]
    PROCEDURE CalcReqWkshForFRQItemWithSupplyForLocation@227();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1004 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      OrderDate@1001 : Date;
    BEGIN
      // Calculate Plan (FRQ Item) on Requisition Worksheet with Supply for specified Location. Verify Requisition Worksheet.

      // Setup: Create Item with Reordering Policy = Fixed Reorder Qty., set Item's Lead Time Calculation.
      // Create a Purchase Line with Location Code for Item and Quantity greater than Item's Reorder Point.
      // Exercise: Calculate Plan for Item with Starting Date = Ending Date = PurchaseLine."Order Date".
      // Verify: Verify no error pops up.
      Initialize;
      CreatePurchOrdWithFRQItemAndCalculatePlan(Item,OrderDate,TRUE); // TRUE indicates filling location code on Purchase Line

      // Verify: 1 Requisition Line for blank Location with New Action Message is calculated.
      ManufacturingSetup.GET;
      SelectRequisitionLineForActionMessage(
        RequisitionLine,Item."No.",RequisitionLine."Action Message"::New,
        CALCDATE(ManufacturingSetup."Default Safety Lead Time",CALCDATE(Item."Lead Time Calculation",OrderDate)));
      RequisitionLine.TESTFIELD(Quantity,Item."Reorder Quantity");
      RequisitionLine.TESTFIELD("Location Code",'');
    END;

    [Test]
    PROCEDURE CalculateRegenerativePlanForFRQWithExceptionLine@242();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      UntrackedPlanningElement@1002 : Record 99000855;
      Quantity@1007 : Decimal;
    BEGIN
      // Calculate Regenerative Plan (FRQ Item) with Exception Line when Order Multiple is set on Item.
      // Verify Order Multiple should not be respected for the Exception Line.

      // Setup: Create FRQ Item. Update Order Multiple. Create Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(30,35);
      CreateAndUpdateFRQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(20),
        LibraryRandom.RandInt(10),LibraryRandom.RandInt(5),
        LibraryRandom.RandIntInRange(25,28));
      CreateSalesOrder(SalesHeader,Item."No.",Quantity,WORKDATE);

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(5));

      // Verify: Verify Quantity is correct without respecting by Order Multiple with Exception Line in Planning Worksheet.
      // Quantity equals to the demand in Sales order plus the Safety Stock Quantity.
      FindUntrackedPlanningElementLine(
        UntrackedPlanningElement,Item."No.",STRSUBSTNO(ExceptionMsg,Item."Safety Stock Quantity",WORKDATE));
      VerifyQuantityOnRequisitionLine(
        Item."No.",UntrackedPlanningElement."Worksheet Line No.",Quantity + Item."Safety Stock Quantity");
    END;

    [Test]
    PROCEDURE CalcReqWkshWithReplenishmentIsProdOrderInSKU@250();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Calculate Plan (MQ Item) on Requisition Worksheet with Replenishement = Prod. Order in SKU.

      // Setup: Create Item. Create SKU.
      // Item Maximum Inventory is greater than Item Reorder Point. Safety Stock is Zero.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 20,
        LibraryRandom.RandInt(10) + 10,0);
      CreateAndUpdateStockKeepingUnit(Item,LocationBlue.Code,Item."Replenishment System"::"Prod. Order");

      // Exercise: Calculate Plan in Requisition Worksheet.
      CalculatePlanForReqWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify the line with Replenishment = Prod. Order not be generated in Requisition Worksheet.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,RequisitionLineNotEmptyErr);
    END;

    [Test]
    PROCEDURE ReCalcPlanForReschedulePlanningLinesAfterDeleteFirstPlanningLine@220();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1004 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      DemandDateValue@1009 : ARRAY [3] OF Date;
      PlanningLinesCountBeforeCarryOut@1007 : Integer;
    BEGIN
      // Re-calculate Regenerative plan in the Planning Worksheet for Reschedule Planning Lines after deleting the first Planning Line.
      // Verify no message pops up and the count of Requistion Lines.

      // Setup: Create Item with Planning parameters and BOM. Create a Sales Order.
      Initialize;
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(10),GetRandomDateUsingWorkDate(20),0D);
      CreateItemWithPlanningParametersAndBOM(Item,Item2,'<1M>','<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',TRUE);
      CreateSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandInt(5),DemandDateValue[1]);

      // Calculate Regenerative Plan and Carry Out Action Message.
      Item3.SETFILTER("No.",'%1|%2',Item."No.",Item2."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,DemandDateValue[1]);
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);
      AcceptActionMessageAndCarryOutActionMessagePlan(Item2."No.",PlanningLinesCountBeforeCarryOut);

      // Exercise: Update the Shipment Date within the rescheduling period on Sales Order, then Calculate Regenerative Plan.
      // Delete the first line in the Planning Worksheet then Re-Calculate Regenerative Plan.
      UpdateShipmentDateForSales(SalesLine,SalesHeader."No.",DemandDateValue[2]);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,DemandDateValue[2]);
      DeleteFirstRequisitionLine(10000); // Line No. is important, here is an empty line.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item3,WORKDATE,DemandDateValue[2]);

      // Verify: Verify no error message pops up and there are two Requistion Lines for Parent Item and Child Item.
      VerifyRequisitionLineCount(2);
    END;

    [Test]
    PROCEDURE UpdateReplenishmentInRequsitionWorksheet@290();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Test an error pops up when updating Replenishment to Prod. Order in Req. Worksheet.

      // Setup: Create Item. Item Maximum Inventory is greater than Item Reorder Point. Safety Stock is Zero.
      Initialize;
      CreateMQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandInt(10) + 20,
        LibraryRandom.RandInt(10) + 10,0);

      // Exercise: Calculate Plan in Requisition Worksheet and update Replenishment to Prod. Order.
      CalculatePlanForReqWksh(Item,WORKDATE,WORKDATE);
      FindRequisitionLine(RequisitionLine,Item."No.");
      ASSERTERROR RequisitionLine.VALIDATE("Replenishment System",RequisitionLine."Replenishment System"::"Prod. Order");

      // Verify: Verify the error message.
      Assert.ExpectedError(RequisitionWorksheetErr);
    END;

    [Test]
    PROCEDURE ReCalcPlngWkshAfterDemandDateChangedAndQuantityIncreased@300();
    BEGIN
      // Recalculate Regenerative Plan (Order Item) after Shipment Date is changed and demand Quantity increased,
      // and then delete the Requisition Line. Test and verify Expected Receipt Date in Reservation Entry is correct.
      ReCalcPlngWkshAfterDemandChanged(LibraryRandom.RandIntInRange(40,50));
    END;

    [Test]
    PROCEDURE ReCalcPlngWkshAfterDemandDateChangedAndQuantityDecreased@301();
    BEGIN
      // Recalculate Regenerative Plan (Order Item) after Shipment Date is changed and demand Quantity decreased,
      // and then delete the Requisition Line. Test and verify Expected Receipt Date in Reservation Entry is correct.
      ReCalcPlngWkshAfterDemandChanged(LibraryRandom.RandInt(10));
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithMaximumInventoryLessThenOne@260();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ReqLine@1003 : Record 246;
      ReorderPoint@1004 : Decimal;
      MaxQty@1005 : Decimal;
      Qty@1006 : Decimal;
    BEGIN
      // [FEATURE] [Calculate Regenerative Plan]
      // [SCENARIO 377525] Calculate Regenerative Plan should process correctly if "Reorder Point" and "Maximum Inventory" are less than 1
      Initialize;

      // [GIVEN] Item with Maximum Inventory "M" and Reorder Point "R". "R" < "M" < 1
      ReorderPoint := LibraryRandom.RandDecInDecimalRange(0,0.5,2);
      MaxQty := LibraryRandom.RandDecInDecimalRange(0.51,1,2);
      CreateMQItem(Item,Item."Replenishment System"::Purchase,MaxQty,ReorderPoint,0);

      // [GIVEN] Sales Order for Item of Quantity = "Q"
      Qty := LibraryRandom.RandInt(10);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Qty);

      // [WHEN] Calculate Regenerative Plan
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));

      // [THEN] Two Requisition Line are created for Item: with Quantity = "M" and "Q" accordingly
      WITH ReqLine DO BEGIN
        SETRANGE("No.",Item."No.");
        FINDSET;
        Assert.AreEqual(MaxQty,Quantity,QuantityErr);
        NEXT;
        Assert.AreEqual(Qty,Quantity,QuantityErr);
      END;
    END;

    [Test]
    PROCEDURE SuppliesRescheduledIfCancelNewActionsBlockedByLargeDampenerQty@278();
    VAR
      Item@1005 : Record 27;
      SalesLine@1009 : Record 37;
      ProdItemNo@1001 : Code[20];
      CompItemNo@1000 : Code[20];
      DemandDateValue@1004 : ARRAY [3] OF Date;
      DemandQuantityValue@1003 : ARRAY [3] OF Decimal;
      PlanningLinesCount@1008 : Integer;
      i@1010 : Integer;
    BEGIN
      // [FEATURE] [Calculate Regenerative Plan] [Dampener Quantity]
      // [SCENARIO 381346] Purchases for Lot-for-Lot component Items should be rescheduled to supply production, if "cancel"+"new" actions are not permitted by Dampener Quantity larger than quantity of the purchases.
      Initialize;

      // [GIVEN] Purchased component Item with Lot-for-Lot reordering policy and Dampener Quantity = "DQ".
      // [GIVEN] Production Item with BOM containing the component Item.
      CreateProductionItemWithLFLComponent(ProdItemNo,CompItemNo);

      // [GIVEN] Sequence of sales orders for the production Item. Quantity to be shipped is less than "DQ". Shipment Dates are "D1", "D2", "D3".
      SetDemandDates(DemandDateValue,1,30);
      CreateDemandQuantity(
        DemandQuantityValue,LibraryRandom.RandInt(10),LibraryRandom.RandInt(10),LibraryRandom.RandInt(10));
      CreateDemand(DemandDateValue,DemandQuantityValue,ProdItemNo,3);

      // [GIVEN] Regenerative Plan for both items is calculated, action messages are accepted.
      Item.SETFILTER("No.",'%1|%2',ProdItemNo,CompItemNo);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<+1Y>',WORKDATE));
      AcceptActionMessageAndCarryOutActionMessagePlan(ProdItemNo,PlanningLinesCount);
      AcceptActionMessageAndCarryOutActionMessagePlan(CompItemNo,PlanningLinesCount);

      // [GIVEN] Shipment dates are shifted forward, so supplies will precede demands. New Shipment Dates are "D1+", "D2+", "D3+".
      SetDemandDates(DemandDateValue,90,120);
      FOR i := 1 TO ARRAYLEN(DemandDateValue) DO
        UpdateShipmentDateForSales(SalesLine,GlobalSalesHeader[i]."No.",DemandDateValue[i]);

      // [WHEN] Recalculate the Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<+1Y>',WORKDATE));

      // [THEN] Due Dates for supplies of the component Item are suggested one day before "D1+", "D2+", "D3+".
      VerifyDueDatesOnRequisitionLine(CompItemNo,DemandDateValue);
    END;

    [Test]
    [HandlerFunctions(AssemblyAvailabilityModalPageHandler,ConfirmHandlerYes)]
    PROCEDURE AssemblyOrderWithReservationChangeStartingDate@341();
    VAR
      Item@1004 : Record 27;
      AssemblyHeader@1000 : Record 900;
      NameValueBuffer@1003 : Record 823;
      SCMSupplyPlanning@1001 : Codeunit 137054;
    BEGIN
      // [SCENARIO 381886] Stan can increase "Starting date" in assembly order when it has related reservation entries.
      Initialize;

      // [GIVEN] Assembly Order having two reservation entries created via Planning Worksheet.
      CreateMQItemAssembly(Item);
      CreateAssemblyOrderFromPlanningWorksheet(AssemblyHeader,Item);

      NameValueBuffer.DELETEALL;
      BINDSUBSCRIPTION(SCMSupplyPlanning);

      // [WHEN] Increase "Starting date" in assembly order
      AssemblyHeader.VALIDATE("Starting Date",CALCDATE('<1D>',AssemblyHeader."Starting Date"));
      AssemblyHeader.MODIFY(TRUE);

      // [THEN] Assembly Avalailability dialog appeared => Confirmation dialog appeared => Reservation entries modified
      Assert.RecordCount(NameValueBuffer,4);
      NameValueBuffer.FINDSET;
      NameValueBuffer.TESTFIELD(Name,AvailabilityTok);
      NameValueBuffer.NEXT;
      VerifyNameValueBufferSequence(NameValueBuffer,ConfirmTok);
    END;

    [Test]
    [HandlerFunctions(AssemblyAvailabilityModalPageHandler,ConfirmHandlerYes)]
    PROCEDURE AssemblyOrderWithReservationChangeEndingDate@340();
    VAR
      Item@1004 : Record 27;
      AssemblyHeader@1000 : Record 900;
      NameValueBuffer@1003 : Record 823;
      SCMSupplyPlanning@1001 : Codeunit 137054;
    BEGIN
      // [SCENARIO 381886] Stan can increase "Ending date" in assembly order when it has related reservation entries.
      Initialize;

      // [GIVEN] Assembly Order having two reservation entries created via Planning Worksheet.
      CreateMQItemAssembly(Item);
      CreateAssemblyOrderFromPlanningWorksheet(AssemblyHeader,Item);

      NameValueBuffer.DELETEALL;
      BINDSUBSCRIPTION(SCMSupplyPlanning);

      // [WHEN] Increase "Ending date" in assembly order
      AssemblyHeader.VALIDATE("Ending Date",CALCDATE('<1D>',AssemblyHeader."Ending Date"));
      AssemblyHeader.MODIFY(TRUE);

      // [THEN] Assembly Avalailability dialog appeared => Confirmation dialog appeared => Reservation entries modified
      Assert.RecordCount(NameValueBuffer,4);
      NameValueBuffer.FINDSET;
      NameValueBuffer.TESTFIELD(Name,AvailabilityTok);
      NameValueBuffer.NEXT;
      VerifyNameValueBufferSequence(NameValueBuffer,ConfirmTok);
    END;

    [Test]
    [HandlerFunctions(AssemblyAvailabilityModalPageHandler)]
    PROCEDURE AssemblyOrderWithReservationChangeDueDate@338();
    VAR
      Item@1004 : Record 27;
      AssemblyHeader@1000 : Record 900;
      NameValueBuffer@1003 : Record 823;
      SCMSupplyPlanning@1001 : Codeunit 137054;
    BEGIN
      // [SCENARIO 381886] Stan can increase "Due date" in assembly order when it has related reservation entries.
      Initialize;

      // [GIVEN] Assembly Order having two reservation entries created via Planning Worksheet.
      CreateMQItemAssembly(Item);
      CreateAssemblyOrderFromPlanningWorksheet(AssemblyHeader,Item);

      NameValueBuffer.DELETEALL;
      BINDSUBSCRIPTION(SCMSupplyPlanning);

      // [WHEN] Increase "Due date" in assembly order
      AssemblyHeader.VALIDATE("Due Date",CALCDATE('<1D>',AssemblyHeader."Due Date"));
      AssemblyHeader.MODIFY(TRUE);

      // [THEN] Assembly Avalailability dialog appeared => Reservation entries modified
      Assert.RecordCount(NameValueBuffer,3);
      NameValueBuffer.FINDFIRST;
      VerifyNameValueBufferSequence(NameValueBuffer,AvailabilityTok);
    END;

    [Test]
    PROCEDURE SupplyNotReplannedIfItExceedsDemandLessOrEqualThanDampenerQtyMinusSafetyStock@282();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1006 : Record 246;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Dampener Quantity] [Safety Stock]
      // [SCENARIO 205829] Supply that exceeds demand by more than Dampener Qty. should not be replanned if with the consideration of safety stock it makes that difference less or equal than the Dampener Qty.
      Initialize;

      // [GIVEN] Item with Lot-for-Lot reordering policy. Dampener Qty. = "D". Safety stock qty. = "S" (e.g. "D" = 10, "S" = 5).
      // [GIVEN] Two purchases of the item for "QP1" and "QP2" pcs correspondently (e.g. "QP1" = 40, "QP2" = 50).
      // [GIVEN] Sales order of the item for "QS", so that "QP1" + "QP2" - "QS" > "D", but "QP1" + "QP2" - "QS" - "S" <= "D". (E.g. "QS" = 75).
      PrepareSupplyAndDemandWithDampenerQtyAndSafetyStock(Item,10,5,LibraryRandom.RandIntInRange(11,15));

      // [WHEN] Calculate regenerative plan for the period that includes the second purchase only.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE + 1,GetRandomDateUsingWorkDate(90));

      // [THEN] No planning lines are created. No change is suggested for the purchase.
      FilterRequisitionLine(RequisitionLine,Item."No.");
      Assert.RecordIsEmpty(RequisitionLine);
    END;

    [Test]
    PROCEDURE SupplyReplannedIfItExceedsDemandMoreThanDampenerQtyMinusSafetyStock@330();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1006 : Record 246;
      PurchaseLine@1001 : Record 39;
      ExceedingQty@1003 : Decimal;
      SafetyStockQty@1004 : Decimal;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Dampener Quantity] [Safety Stock]
      // [SCENARIO 205829] Supply that exceeds demand plus safety stock for more than Dampener Qty. should be replanned.
      Initialize;

      // [GIVEN] Item with Lot-for-Lot reordering policy. Dampener Qty. = "D". Safety stock qty. = "S" (e.g. "D" = 10, "S" = 5).
      // [GIVEN] Two purchases of the item for "QP1" and "QP2" pcs correspondently (e.g. "QP1" = 40, "QP2" = 50).
      // [GIVEN] Sales order of the item for "QS", so that "QP1" + "QP2" - "QS" - "S" > "D". (E.g. "QS" = 60).
      SafetyStockQty := 5;
      ExceedingQty := LibraryRandom.RandIntInRange(16,20);
      PrepareSupplyAndDemandWithDampenerQtyAndSafetyStock(Item,10,SafetyStockQty,ExceedingQty);

      // [WHEN] Calculate regenerative plan for the period that includes the second purchase only.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE + 1,GetRandomDateUsingWorkDate(90));

      // [THEN] The purchase is suggested to be replanned so that "QP1" + "QP2" = "QS" + "S" (in the example, new "QP2" = 25).
      SelectPurchaseLine(PurchaseLine,GlobalPurchaseHeader[2]."No.");
      VerifyRequisitionLine(
        Item."No.",RequisitionLine."Action Message"::"Change Qty.",PurchaseLine."Expected Receipt Date",PurchaseLine.Quantity,
        PurchaseLine.Quantity - ExceedingQty + SafetyStockQty,0D,'','');
    END;

    [Test]
    PROCEDURE OrderReorderingPolicyRespectedForAssemblyComponent@359();
    VAR
      AsmItem@1000 : Record 27;
      CompItem@1001 : Record 27;
      Item@1008 : Record 27;
      RequisitionLine@1009 : Record 246;
      DemandDateValue@1005 : ARRAY [3] OF Date;
      DemandQuantityValue@1004 : ARRAY [3] OF Decimal;
      i@1010 : Integer;
    BEGIN
      // [FEATURE] [Assembly]
      // [SCENARIO 213101] For each requisition line replesenting an assembled item, should be created its own requisition line for the component item, if the component has Reordering Policy = Order.
      Initialize;

      // [GIVEN] Assembled item "I" with Reordering Policy = Order.
      CreateItem(AsmItem,AsmItem."Replenishment System"::Assembly);
      UpdateItemReorderingPolicy(AsmItem,AsmItem."Reordering Policy"::Order);

      // [GIVEN] Component item "C" with Reordering Policy = Order. Quantity of the component per 1 pc of "I" = 1.
      CreateItem(CompItem,CompItem."Replenishment System"::Purchase);
      UpdateItemReorderingPolicy(CompItem,CompItem."Reordering Policy"::Order);
      CreateBOMComponent(AsmItem."No.",CompItem."No.",1);

      // [GIVEN] Three sales orders for "I", quantity on the orders = "Q1", "Q2", "Q3".
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(30),GetRandomDateUsingWorkDate(60),GetRandomDateUsingWorkDate(90));
      CreateDemandQuantity(DemandQuantityValue,LibraryRandom.RandInt(50),LibraryRandom.RandInt(50),LibraryRandom.RandInt(50));
      CreateDemand(DemandDateValue,DemandQuantityValue,AsmItem."No.",3);

      // [WHEN] Calculate regenerative plan for both "I" and "C".
      Item.SETFILTER("No.",'%1|%2',AsmItem."No.",CompItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(90));

      // [THEN] 3 lines are created for the component item "C".
      FilterRequisitionLine(RequisitionLine,CompItem."No.");
      Assert.RecordCount(RequisitionLine,3);

      // [THEN] Quantities on these lines are equal to "Q1", "Q2", "Q3".
      FOR i := 1 TO ARRAYLEN(DemandQuantityValue) DO BEGIN
        RequisitionLine.NEXT;
        RequisitionLine.TESTFIELD(Quantity,DemandQuantityValue[i]);
      END;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      ClearGlobals;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      LocationSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobals@106();
    VAR
      ReservationEntry@1000 : Record 337;
      UntrackedPlanningElement@1001 : Record 99000855;
    BEGIN
      ReservationEntry.DELETEALL;
      UntrackedPlanningElement.DELETEALL;
      RequisitionLine.RESET;
      RequisitionLine.DELETEALL;

      CLEAR(GlobalSalesHeader);
      CLEAR(GlobalPurchaseHeader);
      CLEAR(GlobalProductionOrder);
      CLEAR(GlobalItemNo);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Customer Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LocationSetup@17();
    BEGIN
      CreateAndUpdateLocation(LocationBlue);  // Location: Blue.
      CreateAndUpdateLocation(LocationRed);  // Location: Red.
    END;

    LOCAL PROCEDURE ItemJournalSetup@22();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@101();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
      OutputItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculatePlanningWorksheetWithBaseCalendarAndItemVendor@229(ReorderingPolicy@1008 : Option);
    VAR
      Item@1000 : Record 27;
      ItemVendor@1005 : Record 99;
      RequisitionLine@1006 : Record 246;
      ManufacturingSetup@1002 : Record 99000765;
      SalesHeader@1001 : Record 36;
      DefaultSafetyLeadTime@1003 : Integer;
    BEGIN
      Initialize;
      ManufacturingSetup.GET;

      // Setup: Create Base Calendar, set Sunday as working day, other days as non-working day, create Vendor, bind the calendar
      // to the Vendor, create an Item. Create a Sales Order, set the shipment date of the sales line as Saturday,
      // set ManufacturingSetup."Default Safety Lead Time" to random value. Create Item Vendor.
      DefaultSafetyLeadTime := LibraryRandom.RandInt(10);
      SetupDemandWithBaseCalendar(Item,SalesHeader,CALCDATE('<WD6>',GetRandomDateUsingWorkDate(30)),DefaultSafetyLeadTime);
      UpdateItemReorderingPolicy(Item,ReorderingPolicy);
      CreateItemVendor(ItemVendor,Item,LibraryRandom.RandInt(5));
      UpdateItemVendorNo(Item,''); // Clear the Vendor No. on Item Card.

      // Calculate Regenerative Plan on Planning worksheet.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));
      FindRequisitionLine(RequisitionLine,Item."No.");

      // Exercise: Fill in the Vendor No., then Due Date or Ending Date will be recalculated.
      UpdateVendorNoOnRequisitionLine(RequisitionLine,ItemVendor."Vendor No.");

      // Verify: Verify calculating Ending Date from Due Date or calculating Due Date from Ending Date doesn't need to consider Vendor's calendar.
      RequisitionLine.TESTFIELD("Ending Date",CALCDATE('<-' + FORMAT(DefaultSafetyLeadTime) + 'D>',RequisitionLine."Due Date"));

      // Tear Down.
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(ManufacturingSetup."Default Safety Lead Time");
    END;

    LOCAL PROCEDURE ReCalcPlngWkshAfterDemandChanged@256(Quantity@1007 : Decimal);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1004 : Record 37;
      RequisitionLine@1002 : Record 246;
      PlanningLinesCountBeforeCarryOut@1003 : Integer;
    BEGIN
      // Setup: Create and update Item. Create Sales Order.
      Initialize;
      CreateAndUpdateOrderItem(Item);
      CreateSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandIntInRange(20,30),WORKDATE);

      // Calculate Plan and Carry Out Action Message in Planning Worksheet.
      // Update Quantity and Shipment Date for Sales.
      CalcRegenPlanAndCarryOutActionMessagePlan(Item,PlanningLinesCountBeforeCarryOut);
      UpdateQuantityForSales(SalesLine,SalesHeader."No.",Quantity);
      UpdateShipmentDateForSales(
        SalesLine,SalesHeader."No.",GetRandomDateUsingWorkDate(LibraryRandom.RandInt(20)));

      // Exercise: Re-calc Plan for Planning Worksheet, then delete the Requisition Line.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,SalesLine."Shipment Date");
      FindRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.DELETE;

      // Verify: Verify the Excepted Receipt Date in Reservation Entry.
      VerifyExpectedReceiptDateOnReservationEntry(Item."No.",WORKDATE);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@91(VAR Location@1004 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
    END;

    LOCAL PROCEDURE CreateLFLItem@14(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;ReschedulingPeriod@1006 : Text[30];LotAccumulationPeriod@1005 : Text[30];IncludeInventory@1004 : Boolean;SafetyStockQty@1003 : Decimal;DampenerQty@1002 : Decimal);
    BEGIN
      CreateItem(Item,ReplenishmentSystem);

      // Lot-for-Lot Planning parameters.
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Include Inventory",IncludeInventory);
      UpdatePlanningPeriodForItem(Item,ReschedulingPeriod,LotAccumulationPeriod);
      Item.VALIDATE("Dampener Quantity",DampenerQty);
      UpdateItem(Item,Item.FIELDNO("Safety Stock Quantity"),SafetyStockQty);
    END;

    LOCAL PROCEDURE CreateLFLItemWithSettingPlanningTab@201(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Reordering Policy","Reordering Policy"::"Lot-for-Lot");
        VALIDATE("Include Inventory",TRUE); // Only Setup Include Inventory as TRUE if set value in Safety Stock Quantity.
        VALIDATE("Safety Stock Quantity",LibraryRandom.RandInt(100));
        VALIDATE("Minimum Order Quantity",LibraryRandom.RandInt(100));
        VALIDATE("Maximum Order Quantity",LibraryRandom.RandIntInRange(100,200));
        VALIDATE("Order Multiple",LibraryRandom.RandInt(100));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateLFLItemWithVendorNo@211(VAR Item@1000 : Record 27;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLFLItemWithMaximumAndMinimumOrderQuantity@273(VAR Item@1000 : Record 27;Quantity@1001 : Decimal);
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Reordering Policy","Reordering Policy"::"Lot-for-Lot");
        VALIDATE("Minimum Order Quantity",Quantity);
        VALIDATE("Maximum Order Quantity",Quantity);
        VALIDATE("Replenishment System","Replenishment System"::"Prod. Order");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithVendorNoReorderingPolicy@259(VAR Item@1000 : Record 27) : Code[20];
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandInt(1000));
      UpdateItemLeadTimeCalculation(Item,LibraryRandom.RandIntInRange(10,15));
      Item.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateProductionItemWithLFLComponent@315(VAR ProdItemNo@1001 : Code[20];VAR CompItemNo@1000 : Code[20]);
    VAR
      ProdItem@1004 : Record 27;
      CompItem@1003 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateLFLItem(CompItem,CompItem."Replenishment System"::Purchase,'1Y','',FALSE,0,100);
      CreateItem(ProdItem,ProdItem."Replenishment System"::"Prod. Order");
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ProdItem."Base Unit of Measure",CompItem."No.");
      UpdateItem(ProdItem,ProdItem.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
      UpdateItem(ProdItem,ProdItem.FIELDNO("Reordering Policy"),ProdItem."Reordering Policy"::Order);

      ProdItemNo := ProdItem."No.";
      CompItemNo := CompItem."No.";
    END;

    LOCAL PROCEDURE CreateFRQItem@150(VAR Item@1006 : Record 27;ReplenishmentSystem@1005 : Option;ReorderQuantity@1000 : Decimal;ReorderPoint@1004 : Decimal;SafetyStockQty@1001 : Decimal);
    BEGIN
      CreateItem(Item,ReplenishmentSystem);

      // Fixed Reorder Qty. Planning parameters.
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Reorder Quantity",ReorderQuantity);
      Item.VALIDATE("Reorder Point",ReorderPoint);
      UpdateItem(Item,Item.FIELDNO("Safety Stock Quantity"),SafetyStockQty);
    END;

    LOCAL PROCEDURE CreateAndUpdateOrderItem@302(VAR Item@1000 : Record 27);
    BEGIN
      CreateItem(Item,Item."Replenishment System"::Purchase);
      UpdateItemReorderingPolicy(Item,Item."Reordering Policy"::Order);
      UpdateItemVendorNo(Item,LibraryPurchase.CreateVendorNo);
    END;

    LOCAL PROCEDURE CreateMQItem@257(VAR Item@1006 : Record 27;ReplenishmentSystem@1005 : Option;MaximumInventory@1000 : Decimal;ReorderPoint@1004 : Decimal;SafetyStockQty@1001 : Decimal);
    BEGIN
      CreateItem(Item,ReplenishmentSystem);

      // Maximum Qty. Planning parameters.
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Maximum Qty.");
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Reorder Point",ReorderPoint);
      UpdateItem(Item,Item.FIELDNO("Safety Stock Quantity"),SafetyStockQty);
    END;

    LOCAL PROCEDURE CreateMQItemAssembly@358(VAR Item@1000 : Record 27);
    VAR
      ChildItem@1001 : Record 27;
    BEGIN
      CreateMQItem(
        Item,Item."Replenishment System"::Assembly,LibraryRandom.RandInt(10) + 50,LibraryRandom.RandInt(10) + 20,0);  // Item Maximum Inventory greater than Item Reorder Point. Safety Stock is Zero.

      LibraryInventory.CreateItem(ChildItem);
      CreateBOMComponent(Item."No.",ChildItem."No.",LibraryRandom.RandInt(3));
    END;

    LOCAL PROCEDURE CreateItem@138(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      UpdateItem(Item,Item.FIELDNO("Replenishment System"),ReplenishmentSystem);
    END;

    LOCAL PROCEDURE CreateItemWithPlanningParametersAndBOM@253(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;ReschedulingPeriod@1006 : Text[30];LotAccumulationPeriod@1005 : Text[30];IncludeInventory@1004 : Boolean);
    VAR
      ProductionBOMHeader@1008 : Record 99000771;
    BEGIN
      CreateLFLItem(Item,Item."Replenishment System"::"Prod. Order",ReschedulingPeriod,LotAccumulationPeriod,IncludeInventory,0,0);
      CreateChildItemSetup(Item2,Item."Base Unit of Measure",ProductionBOMHeader,ReschedulingPeriod);
      UpdateItem(Item,Item.FIELDNO("Production BOM No."),ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemVendor@231(VAR ItemVendor@1000 : Record 99;Item@1001 : Record 27;LeadTimeCalculation@1002 : Integer);
    BEGIN
      LibraryInventory.CreateItemVendor(ItemVendor,Item."Vendor No.",Item."No.");
      EVALUATE(ItemVendor."Lead Time Calculation",FORMAT(LeadTimeCalculation) + 'D');
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateFRQItem@245(VAR Item@1000 : Record 27;ReplenishmentSystem@1005 : Option;ReorderQuantity@1006 : Decimal;ReorderPoint@1001 : Decimal;SafetyStockQty@1002 : Decimal;OrderMultiple@1003 : Decimal);
    BEGIN
      CreateFRQItem(Item,ReplenishmentSystem,ReorderQuantity,ReorderPoint,SafetyStockQty);
      Item.VALIDATE("Order Multiple",OrderMultiple);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateStockKeepingUnit@252(VAR Item@1001 : Record 27;LocationCode@1004 : Code[10];ReplenishmentSystem@1003 : Option);
    VAR
      StockkeepingUnit@1000 : Record 5700;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE); // Use False for Item InInventory Only and Replace Previous SKUs fields.
      StockkeepingUnit.GET(LocationCode,Item."No.",''); // Use blank value for Variant Code.
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetOrderNo@283(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      FilterRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.FINDFIRST;
      EXIT(RequisitionLine."Ref. Order No.");
    END;

    LOCAL PROCEDURE UpdatePlanningPeriodForItem@143(VAR Item@1006 : Record 27;ReschedulingPeriod@1004 : Text[30];LotAccumulationPeriod@1003 : Text[30]);
    VAR
      ReschedulingPeriod2@1001 : DateFormula;
      LotAccumulationPeriod2@1000 : DateFormula;
    BEGIN
      EVALUATE(ReschedulingPeriod2,ReschedulingPeriod);
      EVALUATE(LotAccumulationPeriod2,LotAccumulationPeriod);
      Item.VALIDATE("Rescheduling Period",ReschedulingPeriod2);
      Item.VALIDATE("Lot Accumulation Period",LotAccumulationPeriod2);
    END;

    LOCAL PROCEDURE UpdateItem@153(VAR Item@1000 : Record 27;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Item based on Field and its corresponding value.
      RecRef.GETTABLE(Item);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(Item);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemInventory@112(ItemNo@1000 : Code[20];ItemQty@1001 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,ItemQty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemReorderingPolicy@237(VAR Item@1000 : Record 27;ReorderingPolicy@1001 : Option);
    BEGIN
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
        Item.VALIDATE("Maximum Inventory",LibraryRandom.RandInt(50));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemLeadTimeCalculation@233(VAR Item@1000 : Record 27;LeadTimeCalculation@1001 : Integer);
    BEGIN
      EVALUATE(Item."Lead Time Calculation",FORMAT(LeadTimeCalculation) + 'D');
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeQuantityAndAcceptActionMessageInRequisitionLine@287(ItemNo@1000 : Code[20];MaximumOrderQuantity@1001 : Decimal);
    BEGIN
      WITH RequisitionLine DO BEGIN
        SelectRequisitionLineForActionMessage(
          RequisitionLine,ItemNo,"Action Message"::New,WORKDATE);
        VALIDATE(Quantity,MaximumOrderQuantity);
        VALIDATE("Accept Action Message",TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateItemVendorNo@241(VAR Item@1000 : Record 27;VendorNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@51(VAR PurchaseHeader@1003 : Record 38;ItemNo@1001 : Code[20];Quantity@1000 : Decimal;ExpectedReceiptDate@1004 : Date);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,ExpectedReceiptDate);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithNewVendor@244(VAR PurchaseHeader@1003 : Record 38;ItemNo@1001 : Code[20];Quantity@1000 : Decimal;ExpectedReceiptDate@1004 : Date);
    VAR
      PurchaseLine@1002 : Record 39;
      Vendor@1005 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,ExpectedReceiptDate);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@54(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;ExpectedReceiptDate@1004 : Date);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",'');
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@55(VAR SalesHeader@1004 : Record 36;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;ShipmentDate@1000 : Date);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE(
        "External Document No.",LibraryUtility.GenerateRandomCode(SalesHeader.FIELDNO("External Document No."),DATABASE::"Sales Header"));
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,ShipmentDate);
    END;

    LOCAL PROCEDURE CreateSalesLine@56(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;ShipmentDate@1000 : Date);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderAndConnectedOrder@280(VAR SalesHeader@1000 : Record 36;Item@1001 : Record 27;Quantity@1003 : Decimal);
    VAR
      DummyCount@1002 : Integer;
    BEGIN
      CreateSalesOrder(SalesHeader,Item."No.",Quantity,WORKDATE);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,LibraryRandom.RandDate(7));
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",DummyCount);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@80(VAR ProductionOrder@1000 : Record 5405;Status@1003 : Option;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;DueDate@1005 : Date;LocationCode@1006 : Code[10]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      IF Status = ProductionOrder.Status::Released THEN
        UpdateDueDateOnReleasedProdOrder(ProductionOrder."No.",DueDate)
      ELSE
        UpdateDueDateOnFirmPlannedProdOrder(ProductionOrder."No.",DueDate);
      COMMIT;  // Need to COMMIT the changes in page before fetching Production Order again in the next step.

      // Retrieve the updated instance of Production Order and Refresh.
      ProductionOrder.GET(Status,ProductionOrder."No.");
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateDueDateOnFirmPlannedProdOrder@83(ProdOrderNo@1001 : Code[20];DueDate@1000 : Date);
    VAR
      FirmPlannedProdOrder@1002 : TestPage 99000829;
    BEGIN
      FirmPlannedProdOrder.OPENEDIT;
      FirmPlannedProdOrder.FILTER.SETFILTER("No.",ProdOrderNo);
      FirmPlannedProdOrder."Due Date".SETVALUE(DueDate);
      FirmPlannedProdOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateDueDateOnReleasedProdOrder@71(ProdOrderNo@1001 : Code[20];DueDate@1000 : Date);
    VAR
      ReleasedProductionOrder@1002 : TestPage 99000831;
    BEGIN
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProdOrderNo);
      ReleasedProductionOrder."Due Date".SETVALUE(DueDate);
      ReleasedProductionOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE ReservePurchaseLine@60(No@1000 : Code[20]);
    VAR
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",No);
      PurchaseOrder.PurchLines.Reserve.INVOKE;  // Open the Page - Reservation on Handler ReservationPageHandler.
    END;

    LOCAL PROCEDURE UpdatePlanningFlexibilityOnPurchase@48(DocumentNo@1001 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      PurchaseLine.VALIDATE("Planning Flexibility",PurchaseLine."Planning Flexibility"::None);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningFlexibilityOnProduction@2(ProdOrderNo@1001 : Code[20];Status@1002 : Option);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProdOrderNo,Status);
      ProdOrderLine.VALIDATE("Planning Flexibility",ProdOrderLine."Planning Flexibility"::None);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningFlexibilityOnRequisition@193(ItemNo@1002 : Code[20]);
    VAR
      RequisitionLine2@1000 : Record 246;
    BEGIN
      FilterRequisitionLine(RequisitionLine2,ItemNo);
      RequisitionLine2.FINDFIRST;
      RequisitionLine2.VALIDATE("Planning Flexibility",RequisitionLine2."Planning Flexibility"::None);
      RequisitionLine2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectProdOrderLine@9(VAR ProdOrderLine@1000 : Record 5406;ProdOrderNo@1001 : Code[20];Status@1002 : Option);
    BEGIN
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectSalesLine@1(VAR SalesLine@1002 : Record 37;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectPurchaseLine@3(VAR PurchaseLine@1002 : Record 39;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetRandomDateUsingWorkDate@69(Day@1000 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to work date for different supply and demands.
      NewDate := CALCDATE('<' + FORMAT(Day) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE GeneralSetupForPlanningWorksheet@235(VAR ManufacturingSetup@1004 : Record 99000765;VAR Item@1008 : Record 27;VAR ProductionForecastEntry@1010 : ARRAY [3] OF Record 99000852;VAR RequisitionWkshName@1003 : Record 245;CreatePurchOrder@1000 : Boolean;AddItemInventory@1001 : Boolean);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      ManufacturingSetup.GET;
      CreateLFLItemWithSettingPlanningTab(Item); // Create Lot For Lot Item with planning parameters.
      GlobalItemNo := Item."No."; // Assign Global Variable for CalculatePlanPlanWkshRequestPageHandler.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",TRUE); // Create Demand on Production Forecast

      // create a Purchase Line and let its Expected Receipt Date between the date of first demand(WORKDATE) and the date of second demand(WORKDATE+16D).
      IF CreatePurchOrder THEN
        CreatePurchaseOrder(
          PurchaseHeader,Item."No.",LibraryRandom.RandInt(100),GetRandomDateUsingWorkDate(LibraryRandom.RandInt(15)));
      IF AddItemInventory THEN
        UpdateItemInventory(Item."No.",LibraryRandom.RandInt(100));
      RequisitionWkshName.FINDFIRST;
    END;

    LOCAL PROCEDURE AcceptActionMessage@132(ItemNo@1001 : Code[20];VAR PlanningLinesCountBeforeCarryOut@1002 : Integer);
    VAR
      VendorNo@1000 : Code[20];
    BEGIN
      FilterRequisitionLine(RequisitionLine,ItemNo);
      PlanningLinesCountBeforeCarryOut := RequisitionLine.COUNT;
      VendorNo := LibraryPurchase.CreateVendorNo;
      RequisitionLine.FINDSET;
      REPEAT
        IF RequisitionLine."Ref. Order Type" = RequisitionLine."Ref. Order Type"::Purchase THEN
          RequisitionLine.VALIDATE("Vendor No.",VendorNo);
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateVariantOnSales@33(VAR SalesLine@1000 : Record 37;SalesHeaderNo@1001 : Code[20];VariantCode@1003 : Code[10]);
    BEGIN
      SelectSalesLine(SalesLine,SalesHeaderNo);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantOnProduction@72(ProductionOrderNo@1001 : Code[20];Status@1002 : Option;VariantCode@1003 : Code[10]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProductionOrderNo,Status);
      ProdOrderLine.VALIDATE("Variant Code",VariantCode);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectRequisitionLineForActionMessage@156(VAR RequisitionLine2@1000 : Record 246;No@1001 : Code[20];ActionMessage@1002 : Option;DueDate@1003 : Date);
    BEGIN
      FilterRequisitionLine(RequisitionLine2,No);
      RequisitionLine2.SETRANGE("Action Message",ActionMessage);
      RequisitionLine2.SETRANGE("Due Date",DueDate);
      RequisitionLine2.FINDFIRST;
    END;

    LOCAL PROCEDURE DeleteFirstRequisitionLine@254(LineNo@1001 : Integer);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Line No.",LineNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindClosestWorkingDay@266(BaseCalendarCode@1001 : Code[10];BaseDate@1002 : Date) ResultDate : Date;
    VAR
      CalendarManagement@1003 : Codeunit 7600;
      Description@1004 : Text[50];
    BEGIN
      ResultDate := BaseDate;
      WHILE CalendarManagement.CheckDateStatus(BaseCalendarCode,ResultDate,Description) DO
        ResultDate -= 1;
    END;

    LOCAL PROCEDURE FilterRequisitionLine@100(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
    END;

    LOCAL PROCEDURE FindRequisitionLine@228(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      FilterRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateVendorNoOnRequisitionLine@251(VAR RequisitionLine@1000 : Record 246;VendorNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@64(ItemNo@1001 : Code[20];ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(
        ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,ItemNo,ProductionOrderNo);
      ItemJournalLine.VALIDATE("Output Quantity",LibraryRandom.RandDec(5,2));  // Used Random Value for Output Quantity.
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(OutputItemJournalTemplate.Name,OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@77(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];No@1004 : Code[20]);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,No,1);  // Use One for Quantity per.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOMComponent@293(ParentItemNo@1001 : Code[20];ChildItemNo@1002 : Code[20];QuantityPer@1003 : Decimal);
    VAR
      BOMComponent@1000 : Record 90;
    BEGIN
      LibraryManufacturing.CreateBOMComponent(BOMComponent,ParentItemNo,BOMComponent.Type::Item,ChildItemNo,QuantityPer,'');
    END;

    LOCAL PROCEDURE CreateProdOrderComponent@130(ProductionOrder@1001 : Record 5405;ItemNo@1002 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status);
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      ProdOrderComponent.VALIDATE("Item No.",ItemNo);
      ProdOrderComponent.VALIDATE("Quantity per",1);  // Used One for Quantity per.
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AcceptActionMessageAndCarryOutActionMessagePlan@136(ItemNo@1001 : Code[20];VAR PlanningLinesCountBeforeCarryOut@1000 : Integer);
    VAR
      RequisitionLine2@1002 : Record 246;
    BEGIN
      AcceptActionMessage(ItemNo,PlanningLinesCountBeforeCarryOut);
      FilterRequisitionLine(RequisitionLine2,ItemNo);
      RequisitionLine2.FINDFIRST;
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine2);
    END;

    LOCAL PROCEDURE CreateChildItemSetup@82(VAR Item@1000 : Record 27;BaseUnitOfMeasure@1001 : Code[10];VAR ProductionBOMHeader@1002 : Record 99000771;ReschedulingPeriod@1003 : Text[30]);
    BEGIN
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,ReschedulingPeriod,ReschedulingPeriod,TRUE,0,0);  // Rescheduling Period, Lot Accumulation Period, Include Inventory, Safety Stock, Dampener Qty.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,BaseUnitOfMeasure,Item."No.");
    END;

    LOCAL PROCEDURE CreateDemandDate@88(VAR DemandDateValue@1003 : ARRAY [3] OF Date;DemandDate@1007 : Date;DemandDate2@1001 : Date;DemandDate3@1002 : Date);
    BEGIN
      // Taking an Array of 3 for Demand document Dates.
      DemandDateValue[1] := DemandDate;
      DemandDateValue[2] := DemandDate2;
      DemandDateValue[3] := DemandDate3;
    END;

    LOCAL PROCEDURE CreateDemandQuantity@87(VAR DemandQuantityValue@1000 : ARRAY [3] OF Decimal;DemandQuantity@1001 : Decimal;DemandQuantity2@1002 : Decimal;DemandQuantity3@1003 : Decimal);
    BEGIN
      // Taking an Array of 3 for Demand document Quantity.
      DemandQuantityValue[1] := DemandQuantity;
      DemandQuantityValue[2] := DemandQuantity2;
      DemandQuantityValue[3] := DemandQuantity3;
    END;

    LOCAL PROCEDURE CreateSupplyDate@97(VAR SupplyDateValue@1006 : ARRAY [5] OF Date;SupplyDate@1007 : Date;SupplyDate2@1002 : Date;SupplyDate3@1003 : Date;SupplyDate4@1004 : Date;SupplyDate5@1000 : Date);
    BEGIN
      // Taking an Array of 5 for Supply document Dates.
      SupplyDateValue[1] := SupplyDate;
      SupplyDateValue[2] := SupplyDate2;
      SupplyDateValue[3] := SupplyDate3;
      SupplyDateValue[4] := SupplyDate4;
      SupplyDateValue[5] := SupplyDate5;
    END;

    LOCAL PROCEDURE CreateSupplyQuantity@92(VAR SupplyQuantityValue@1008 : ARRAY [5] OF Decimal;SupplyQuantity@1001 : Decimal;SupplyQuantity2@1003 : Decimal;SupplyQuantity3@1004 : Decimal;SupplyQuantity4@1005 : Decimal;SupplyQuantity5@1000 : Decimal);
    BEGIN
      // Taking an Array of 5 for Supply document Quantity.
      SupplyQuantityValue[1] := SupplyQuantity;
      SupplyQuantityValue[2] := SupplyQuantity2;
      SupplyQuantityValue[3] := SupplyQuantity3;
      SupplyQuantityValue[4] := SupplyQuantity4;
      SupplyQuantityValue[5] := SupplyQuantity5;
    END;

    LOCAL PROCEDURE CreateSupply@111(SupplyDateValue@1002 : ARRAY [5] OF Date;SupplyQuantityValue@1004 : ARRAY [5] OF Decimal;SupplyType@1011 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';ItemNo@1006 : Code[20];ItemNo2@1001 : Code[20];LocationCode@1009 : Code[10]);
    VAR
      Count@1007 : Integer;
      PurchaseCounter@1003 : Integer;
    BEGIN
      // Create Production Order and Purchase Order.
      PurchaseCounter := 0;
      FOR Count := 1 TO 5 DO   // Using Array size. Value important.
        CASE SupplyType[Count] OF
          SupplyType::Released:
            CreateAndRefreshProductionOrder(
              GlobalProductionOrder[Count],GlobalProductionOrder[1].Status::Released,ItemNo,SupplyQuantityValue[Count],
              SupplyDateValue[Count],LocationCode);  // Dates based on WORKDATE.
          SupplyType::FirmPlanned:
            CreateAndRefreshProductionOrder(
              GlobalProductionOrder[Count],GlobalProductionOrder[1].Status::"Firm Planned",ItemNo,SupplyQuantityValue[Count],
              SupplyDateValue[Count],LocationCode);  // Dates based on WORKDATE.
          SupplyType::Purchase:
            BEGIN
              PurchaseCounter += 1;
              CreatePurchaseOrder(GlobalPurchaseHeader[PurchaseCounter],ItemNo2,SupplyQuantityValue[Count],SupplyDateValue[Count]);  // Dates based on WORKDATE.
            END;
        END;
    END;

    LOCAL PROCEDURE CreateDemand@96(DemandDateValue@1002 : ARRAY [3] OF Date;DemandQuantityValue@1003 : ARRAY [3] OF Decimal;ItemNo@1000 : Code[20];NoOfSalesOrder@1001 : Integer);
    VAR
      Count@1004 : Integer;
    BEGIN
      FOR Count := 1 TO NoOfSalesOrder DO
        CreateSalesOrder(GlobalSalesHeader[Count],ItemNo,DemandQuantityValue[Count],DemandDateValue[Count]);
    END;

    LOCAL PROCEDURE CreatePurchOrdWithFRQItem@236(VAR Item@1000 : Record 27;VAR PurchaseHeaderNo@1003 : Code[20]);
    VAR
      ManufacturingSetup@1002 : Record 99000765;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreateFRQItem(
        Item,Item."Replenishment System"::Purchase,LibraryRandom.RandDecInRange(11,20,2),
        LibraryRandom.RandDec(10,2),0); // Safety Stock must be 0 to repro bug in TFS346168
      EVALUATE(Item."Lead Time Calculation",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      Item.MODIFY(TRUE);
      ManufacturingSetup.GET;
      CreatePurchaseOrderWithNewVendor(
        PurchaseHeader,Item."No.",LibraryRandom.RandDecInRange(11,20,2),
        CALCDATE(ManufacturingSetup."Default Safety Lead Time",CALCDATE(Item."Lead Time Calculation",WORKDATE)));
      PurchaseHeaderNo := PurchaseHeader."No.";
    END;

    LOCAL PROCEDURE CreatePurchOrdWithFRQItemAndCalculatePlan@234(VAR Item@1000 : Record 27;VAR OrderDate@1005 : Date;UseLocation@1002 : Boolean);
    VAR
      PurchaseLine@1003 : Record 39;
      PurchaseHeaderNo@1004 : Code[20];
    BEGIN
      CreatePurchOrdWithFRQItem(Item,PurchaseHeaderNo);
      IF UseLocation THEN
        UpdateLocationForPurchase(PurchaseLine,PurchaseHeaderNo,LocationBlue.Code)
      ELSE
        SelectPurchaseLine(PurchaseLine,PurchaseHeaderNo);
      CalculatePlanForReqWksh(Item,PurchaseLine."Order Date",PurchaseLine."Order Date");
      OrderDate := PurchaseLine."Order Date";
    END;

    LOCAL PROCEDURE CreatePlanWkshLineWithChangeQtyActionMessage@268(VAR Item@1000 : Record 27;ItemReplenishmentSystem@1001 : Option;Quantity@1004 : Decimal);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      CreateLFLItem(Item,ItemReplenishmentSystem,'<1W>','<1W>',TRUE,0,0);
      CreateSalesOrderAndConnectedOrder(SalesHeader,Item,Quantity);
      UpdateQuantityForSales(SalesLine,SalesHeader."No.",Quantity + LibraryRandom.RandInt(5));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,LibraryRandom.RandDate(60));
    END;

    LOCAL PROCEDURE UpdateLocationForSales@85(DocumentNo@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
      ShipmentDate@1003 : Date;
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      ShipmentDate := SalesLine."Shipment Date";
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationForPurchase@239(VAR PurchaseLine@1002 : Record 39;DocumentNo@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      ExpectedReceiptDate@1003 : Date;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      ExpectedReceiptDate := PurchaseLine."Expected Receipt Date";
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@125(DefaultDampenerPeriod@1002 : DateFormula);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Default Dampener Period",DefaultDampenerPeriod);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCompanyInformationBaseCalendarCode@295(BaseCalendarCode@1001 : Code[10]) OldBaseCalendarCode : Code[10];
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      OldBaseCalendarCode := CompanyInformation."Base Calendar Code";
      CompanyInformation.VALIDATE("Base Calendar Code",BaseCalendarCode);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorBaseCalendarCode@263(VendorNo@1002 : Code[20];BaseCalendarCode@1001 : Code[10]);
    VAR
      Vendor@1003 : Record 23;
    BEGIN
      Vendor.GET(VendorNo);
      Vendor.VALIDATE("Base Calendar Code",BaseCalendarCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@50(VAR RequisitionWkshName@1001 : Record 245;ReqWkshTemplateType@1002 : Option);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplateType);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshPage@99(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10]);
    BEGIN
      COMMIT;
      OpenPlanningWorksheetPage(PlanningWorksheet,Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CalculatePlanForReqWksh@240(Item@1000 : Record 27;StartingDate@1001 : Date;EndingDate@1002 : Date);
    VAR
      RequisitionWkshName@1003 : Record 245;
      ReqWkshTemplate@1004 : Record 244;
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,StartingDate,EndingDate);
    END;

    LOCAL PROCEDURE UpdateQuantityForSales@142(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcRegenPlanAndCarryOutActionMessagePlan@149(Item@1000 : Record 27;VAR PlanningLinesCountBeforeCarryOut@1001 : Integer);
    BEGIN
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,GetRandomDateUsingWorkDate(60));  // Dates based on WORKDATE.
      AcceptActionMessageAndCarryOutActionMessagePlan(Item."No.",PlanningLinesCountBeforeCarryOut);
    END;

    LOCAL PROCEDURE UpdateForecastOnManufacturingSetup@116(CurrentProductionForecast@1001 : Code[10];UseForecastOnLocations@1002 : Boolean);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",CurrentProductionForecast);
      ManufacturingSetup.VALIDATE("Use Forecast on Locations",UseForecastOnLocations);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangePeriodForItem@115(VAR Item@1006 : Record 27;ReschedulingPeriod@1004 : Text[30];LotAccumulationPeriod@1003 : Text[30]);
    BEGIN
      Item.GET(Item."No.");
      UpdatePlanningPeriodForItem(Item,ReschedulingPeriod,LotAccumulationPeriod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionForecastSetup@120(VAR ProductionForecastEntry@1005 : ARRAY [3] OF Record 99000852;ItemNo@1002 : Code[20];Multiple@1004 : Boolean);
    VAR
      ProductionForecastName@1003 : Record 99000851;
    BEGIN
      // Using Random Value and Dates based on WORKDATE.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      UpdateForecastOnManufacturingSetup(ProductionForecastName.Name,TRUE);
      CreateAndUpdateProductionForecast(
        ProductionForecastEntry[1],ProductionForecastName.Name,WORKDATE,ItemNo,LibraryRandom.RandDec(5,2) + 230);
      IF Multiple THEN BEGIN
        CreateAndUpdateProductionForecast(
          ProductionForecastEntry[2],ProductionForecastName.Name,GetRandomDateUsingWorkDate(16),ItemNo,
          LibraryRandom.RandDec(5,2) + 250);
        CreateAndUpdateProductionForecast(
          ProductionForecastEntry[3],ProductionForecastName.Name,GetRandomDateUsingWorkDate(64),ItemNo,
          LibraryRandom.RandDec(5,2) + 290);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecast@119(VAR ProductionForecastEntry@1000 : Record 99000852;Name@1003 : Code[10];Date@1001 : Date;ItemNo@1004 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionForecastEntry(ProductionForecastEntry,Name,ItemNo,'',Date,FALSE);
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",Quantity);
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePostingDateAndPostSalesOrder@109(VAR SalesHeader@1000 : Record 36;PostingDate@1001 : Date);
    BEGIN
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE OpenPlanningWorksheetPage@126(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10]);
    BEGIN
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.CurrentWkshBatchName.SETVALUE(Name);
    END;

    LOCAL PROCEDURE CreateMultipleItemUnitOfMeasure@145(VAR ItemUnitOfMeasure@1000 : Record 5404;VAR ItemUnitOfMeasure2@1005 : Record 5404;ItemNo@1002 : Code[20]);
    VAR
      UnitOfMeasure@1001 : Record 204;
      UnitOfMeasure2@1004 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure2);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,UnitOfMeasure.Code,ItemNo,LibraryRandom.RandInt(5) + 10);  // Using Random Value.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure2,UnitOfMeasure2.Code,ItemNo,LibraryRandom.RandInt(5) + 15);  // Using Random Value.
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@172(VAR ItemUnitOfMeasure@1000 : Record 5404;UnitOfMeasureCode@1005 : Code[10];ItemNo@1002 : Code[20];QtyPerUnitOfMeasure@1003 : Decimal);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasureCode,QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE UpdateUnitOfMeasureForSales@141(DocumentNo@1001 : Code[20];UnitOfMeasureCode@1002 : Code[10]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      SalesLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitOfMeasureForPurchase@140(DocumentNo@1001 : Code[20];UnitOfMeasureCode@1002 : Code[10]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateShipmentDateForSales@135(VAR SalesLine@1002 : Record 37;DocumentNo@1000 : Code[20];ShipmentDate@1001 : Date);
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityForPurchase@159(VAR PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      PurchaseLine.VALIDATE(Quantity,Quantity);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePostingDateAndPostMultipleSalesOrder@164(VAR SalesHeader@1000 : Record 36;VAR SalesHeader2@1001 : Record 36;PostingDate@1002 : Date;PostingDate2@1003 : Date);
    BEGIN
      UpdatePostingDateAndPostSalesOrder(SalesHeader,PostingDate);
      UpdatePostingDateAndPostSalesOrder(SalesHeader2,PostingDate2);
    END;

    LOCAL PROCEDURE UpdateDefaultSafetyLeadTimeOnManufacturingSetup@223(DefaultSafetyLeadTime@1001 : DateFormula);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Default Safety Lead Time",DefaultSafetyLeadTime);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentAndCreateSalesOrderWithThreeLines@284(Item@1000 : Record 27;PositiveAdjustmentQuantity@1002 : Decimal;MaximumOrderQuantity@1001 : Decimal);
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : ARRAY [2] OF Record 37;
    BEGIN
      UpdateItemInventory(Item."No.",PositiveAdjustmentQuantity);
      CreateSalesOrder(SalesHeader,Item."No.",MaximumOrderQuantity,WORKDATE);
      CreateSalesLine(SalesHeader,SalesLine[1],Item."No.",MaximumOrderQuantity,WORKDATE);
      CreateSalesLine(SalesHeader,SalesLine[2],Item."No.",MaximumOrderQuantity,WORKDATE);
    END;

    LOCAL PROCEDURE SelectDateWithSafetyLeadTime@176(DateValue@1000 : Date;SignFactor@1001 : Integer) : Date;
    VAR
      ManufacturingSetup@1002 : Record 99000765;
    BEGIN
      // Add Safety lead time to the required date and return the Date value.
      ManufacturingSetup.GET;
      IF SignFactor < 0 THEN
        EXIT(CALCDATE('<' + '-' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',DateValue));
      EXIT(CALCDATE('<' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',DateValue));
    END;

    LOCAL PROCEDURE SelectItemQuantity@158(Item@1000 : Record 27;FRQItem@1001 : Boolean) PlanningWorksheetQty : Decimal;
    BEGIN
      IF FRQItem THEN
        PlanningWorksheetQty := Item."Reorder Quantity"
      ELSE
        PlanningWorksheetQty := Item."Maximum Inventory";
    END;

    LOCAL PROCEDURE CreateReorderPointPolicyItem@171(VAR Item@1000 : Record 27;FRQItem@1001 : Boolean;Quantity@1002 : Decimal;ReorderPoint@1003 : Decimal;SafetyStockQty@1004 : Decimal);
    BEGIN
      IF FRQItem THEN
        CreateFRQItem(Item,Item."Replenishment System"::"Prod. Order",Quantity,ReorderPoint,SafetyStockQty)
      ELSE
        CreateMQItem(Item,Item."Replenishment System"::"Prod. Order",Quantity,ReorderPoint,SafetyStockQty);
    END;

    LOCAL PROCEDURE CreateSupplyType@173(VAR SupplyTypeValue@1000 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';SupplyType@1001 : Option;SupplyType2@1002 : Option;SupplyType3@1003 : Option;SupplyType4@1004 : Option;SupplyType5@1005 : Option);
    BEGIN
      // Taking an Array of 5 for Supply document Type.
      SupplyTypeValue[1] := SupplyType;
      SupplyTypeValue[2] := SupplyType2;
      SupplyTypeValue[3] := SupplyType3;
      SupplyTypeValue[4] := SupplyType4;
      SupplyTypeValue[5] := SupplyType5;
    END;

    LOCAL PROCEDURE CreateBaseCalendarWithBaseCalendarChange@204(VAR BaseCalendar@1001 : Record 7600);
    VAR
      BaseCalendarChange@1000 : Record 7601;
      I@1002 : Integer;
    BEGIN
      LibraryService.CreateBaseCalendar(BaseCalendar);
      FOR I := BaseCalendarChange.Day::Monday TO BaseCalendarChange.Day::Saturday DO
        LibraryInventory.CreateBaseCalendarChange(
          BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,I);  // Use 0D for Date.
    END;

    LOCAL PROCEDURE CreateVendorWithBaseCalendarCode@216(VAR Vendor@1000 : Record 23;BaseCalendarCode@1001 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Base Calendar Code",BaseCalendarCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FilterFirmPlannedProdOrderLine@189(VAR ProdOrderLine@1001 : Record 5406;ItemNo@1000 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupDemandWithBaseCalendar@205(VAR Item@1001 : Record 27;VAR SalesHeader@1007 : Record 36;ShipmentDate@1002 : Date;SafetyLeadTime@1000 : Integer);
    VAR
      BaseCalendar@1003 : Record 7600;
      Vendor@1004 : Record 23;
      DefaultSafetyLeadTime@1005 : DateFormula;
    BEGIN
      EVALUATE(DefaultSafetyLeadTime,'<' + FORMAT(SafetyLeadTime) + 'D>');
      UpdateDefaultSafetyLeadTimeOnManufacturingSetup(DefaultSafetyLeadTime);

      CreateBaseCalendarWithBaseCalendarChange(BaseCalendar);
      CreateVendorWithBaseCalendarCode(Vendor,BaseCalendar.Code);
      CreateLFLItemWithVendorNo(Item,Vendor."No.");
      CreateSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandInt(10),ShipmentDate);
    END;

    LOCAL PROCEDURE FilterPurchaseOrderLine@203(VAR PurchaseLine@1001 : Record 39;No@1000 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindUntrackedPlanningElementLine@246(VAR UntrackedPlanningElement@1000 : Record 99000855;No@1001 : Code[20];Source@1002 : Text);
    BEGIN
      UntrackedPlanningElement.SETRANGE("Item No.",No);
      UntrackedPlanningElement.SETRANGE(Source,Source);
      UntrackedPlanningElement.FINDFIRST;
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrder@207(DemandOrderNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Order",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");
    END;

    LOCAL PROCEDURE MakeSupplyOrders@208(VAR RequisitionLine@1000 : Record 246;MakeOrders@1001 : Option;CreateProductionOrder@1002 : Option);
    VAR
      ManufacturingUserTemplate@1003 : Record 5525;
    BEGIN
      GetManufacturingUserTemplate(ManufacturingUserTemplate,MakeOrders,CreateProductionOrder);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE PrepareSupplyAndDemandWithinReschedulingPeriod@275(Item@1000 : Record 27);
    VAR
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      DemandQuantityValue@1004 : ARRAY [3] OF Decimal;
      SupplyDateValue@1003 : ARRAY [5] OF Date;
      DemandDateValue@1002 : ARRAY [3] OF Date;
      SupplyType@1001 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
      Quantity@1008 : Decimal;
      Dates@1011 : ARRAY [4] OF Date;
      i@1006 : Integer;
    BEGIN
      Quantity := LibraryRandom.RandInt(10);

      Dates[1] := WORKDATE;
      FOR i := 2 TO ARRAYLEN(Dates) DO // ascending sequence of dates
        Dates[i] := LibraryRandom.RandDateFrom(Dates[i - 1],LibraryRandom.RandInt(20));

      CreateSupplyType(SupplyType,SupplyType::Released,SupplyType::Released,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyDate(SupplyDateValue,Dates[1],Dates[2],0D,0D,0D);
      CreateSupplyQuantity(SupplyQuantityValue,Quantity,Quantity,0,0,0);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",'','');

      CreateDemandDate(DemandDateValue,Dates[3],Dates[4],0D);
      CreateDemandQuantity(DemandQuantityValue,Quantity,Quantity,0);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",2);
    END;

    LOCAL PROCEDURE PrepareSupplyAndDemandWithReservationAndCalcRegenPlan@277(VAR ItemNo@1000 : Code[20];ReservToDocIndex@1002 : Integer;ReservFromDocIndex@1001 : Integer);
    VAR
      Item@1003 : Record 27;
      SalesLine@1004 : Record 37;
    BEGIN
      CreateLFLItem(
        Item,Item."Replenishment System"::"Prod. Order",'<' + FORMAT(LibraryRandom.RandIntInRange(20,50)) + 'W>','',TRUE,0,0);
      ItemNo := Item."No.";

      PrepareSupplyAndDemandWithinReschedulingPeriod(Item);

      LibraryVariableStorage.Enqueue(GlobalProductionOrder[ReservFromDocIndex]."No.");
      SelectSalesLine(SalesLine,GlobalSalesHeader[ReservToDocIndex]."No.");
      SalesLine.ShowReservation;

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<+1Y>',WORKDATE));
    END;

    LOCAL PROCEDURE PrepareSupplyAndDemandWithDampenerQtyAndSafetyStock@331(VAR Item@1007 : Record 27;DampenerQty@1008 : Decimal;SafetyStock@1009 : Decimal;ExceedingQty@1010 : Decimal);
    VAR
      SupplyQuantityValue@1005 : ARRAY [5] OF Decimal;
      SupplyDateValue@1004 : ARRAY [5] OF Date;
      DemandDateValue@1003 : ARRAY [3] OF Date;
      DemandQuantityValue@1002 : ARRAY [3] OF Decimal;
      SupplyType@1001 : ARRAY [5] OF 'None,Released,FirmPlanned,Purchase';
      DampenerPeriod@1000 : DateFormula;
    BEGIN
      CreateLFLItem(Item,Item."Replenishment System"::Purchase,'<1Y>','<1Y>',TRUE,SafetyStock,DampenerQty);
      EVALUATE(DampenerPeriod,'<1Y>');
      UpdateItem(Item,Item.FIELDNO("Dampener Period"),DampenerPeriod);

      CreateSupplyType(SupplyType,SupplyType::Purchase,SupplyType::Purchase,SupplyType::None,SupplyType::None,SupplyType::None);
      CreateSupplyQuantity(SupplyQuantityValue,LibraryRandom.RandIntInRange(30,50),LibraryRandom.RandIntInRange(30,50),0,0,0);
      CreateSupplyDate(SupplyDateValue,WORKDATE,GetRandomDateUsingWorkDate(30),0D,0D,0D);
      CreateSupply(SupplyDateValue,SupplyQuantityValue,SupplyType,Item."No.",Item."No.",'');

      CreateDemandQuantity(
        DemandQuantityValue,SupplyQuantityValue[1] + SupplyQuantityValue[2] - ExceedingQty,0,0);
      CreateDemandDate(DemandDateValue,GetRandomDateUsingWorkDate(60),0D,0D);
      CreateDemand(DemandDateValue,DemandQuantityValue,Item."No.",1);
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@210(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;CreateProductionOrder@1002 : Option);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders",
          CreateProductionOrder,ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE InsertTempItemLedgerEntry@279(VAR TempItemLedgerEntry@1000 : TEMPORARY Record 32;Qty@1001 : Decimal;Date@1002 : Date);
    VAR
      EntryNo@1003 : Integer;
    BEGIN
      WITH TempItemLedgerEntry DO BEGIN
        IF FINDLAST THEN
          EntryNo := "Entry No." + 1
        ELSE
          EntryNo := 1;

        INIT;
        "Entry No." := EntryNo;
        Quantity := Qty;
        "Posting Date" := Date;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SetDemandDates@310(VAR DemandDateValue@1000 : ARRAY [3] OF Date;FromRange@1001 : Integer;ToRange@1002 : Integer);
    BEGIN
      DemandDateValue[1] := LibraryRandom.RandDateFromInRange(WORKDATE,FromRange,ToRange);
      DemandDateValue[2] := LibraryRandom.RandDateFromInRange(DemandDateValue[1],FromRange,ToRange);
      DemandDateValue[3] := LibraryRandom.RandDateFromInRange(DemandDateValue[2],FromRange,ToRange);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@162(No@1004 : Code[20];ActionMessage@1003 : Option;DueDate@1002 : Date;OriginalQuantity@1001 : Decimal;Quantity@1005 : Decimal;OriginalDueDate@1006 : Date;LocationCode@1007 : Code[10];VariantCode@1008 : Code[10]);
    VAR
      RequisitionLine2@1000 : Record 246;
    BEGIN
      SelectRequisitionLineForActionMessage(RequisitionLine2,No,ActionMessage,DueDate);
      VerifyQuantityAndDateOnRequisitionLine(RequisitionLine2,OriginalDueDate,Quantity,OriginalQuantity);
      RequisitionLine2.TESTFIELD("Location Code",LocationCode);
      RequisitionLine2.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyPlanningWorksheetEmpty@25(PlanningLinesCountBeforeCarryOut@1000 : Integer;ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine2@1002 : Record 246;
    BEGIN
      RequisitionLine2.SETRANGE("No.",ItemNo);
      Assert.AreNotEqual(PlanningLinesCountBeforeCarryOut,RequisitionLine2.COUNT,NumberOfLineNotEqualError);
      Assert.AreEqual(0,RequisitionLine2.COUNT,NumberOfLineEqualError);
    END;

    LOCAL PROCEDURE VerifyPlanningWorksheet@146(VAR PlanningWorksheet@1000 : TestPage 99000852;ActionMessage@1001 : Option;No@1002 : Code[20];DueDate@1003 : Date;OriginalQuantity@1004 : Decimal;Quantity@1005 : Decimal;OriginalDueDate@1006 : Date);
    BEGIN
      // Verification of Planning Worksheet using page.
      PlanningWorksheet."Action Message".ASSERTEQUALS(ActionMessage);
      PlanningWorksheet."No.".ASSERTEQUALS(No);
      PlanningWorksheet."Due Date".ASSERTEQUALS(DueDate);
      PlanningWorksheet."Original Quantity".ASSERTEQUALS(OriginalQuantity);
      PlanningWorksheet.Quantity.ASSERTEQUALS(Quantity);
      PlanningWorksheet."Original Due Date".ASSERTEQUALS(OriginalDueDate);
    END;

    LOCAL PROCEDURE VerifyPlanningWorksheetQuantityAndLineCount@271(RequisitionLine@1000 : Record 246;ExpectedQuantity@1001 : Decimal);
    BEGIN
      Assert.AreEqual(1,RequisitionLine.COUNT,LineCountErr);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@161(DocumentNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineForMaximumOrderQuantity@148(VAR RequisitionLine2@1000 : Record 246;No@1004 : Code[20];ActionMessage@1003 : Option;DueDate@1002 : Date;Quantity@1005 : Decimal;OriginalDueDate@1006 : Date;NoOfLine@1007 : Integer);
    VAR
      Count@1001 : Integer;
    BEGIN
      SelectRequisitionLineForActionMessage(RequisitionLine2,No,ActionMessage,DueDate);
      FOR Count := 1 TO NoOfLine DO BEGIN
        VerifyQuantityAndDateOnRequisitionLine(RequisitionLine2,OriginalDueDate,Quantity,0);
        RequisitionLine2.NEXT
      END;
    END;

    LOCAL PROCEDURE VerifyQuantityAndDateOnRequisitionLine@168(VAR RequisitionLine2@1007 : Record 246;OriginalDueDate@1000 : Date;Quantity@1004 : Decimal;OriginalQuantity@1003 : Decimal);
    BEGIN
      RequisitionLine2.TESTFIELD(Quantity,Quantity);
      RequisitionLine2.TESTFIELD("Original Due Date",OriginalDueDate);
      RequisitionLine2.TESTFIELD("Original Quantity",OriginalQuantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineCount@154(ExpectedReqLinesCount@1000 : Integer);
    VAR
      RequisitionLine2@1001 : Record 246;
    BEGIN
      RequisitionLine2.SETFILTER("No.",'<>''''');
      Assert.AreEqual(ExpectedReqLinesCount,RequisitionLine2.COUNT,NumberOfLineEqualError);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderQuantity@191(ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      FilterPurchaseOrderLine(PurchaseLine,ItemNo);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderQuantity@188(ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      FilterFirmPlannedProdOrderLine(ProdOrderLine,ItemNo);
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderPlanningFlexibility@202(ItemNo@1000 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      FilterPurchaseOrderLine(PurchaseLine,ItemNo);
      PurchaseLine.TESTFIELD("Planning Flexibility",PurchaseLine."Planning Flexibility"::None);
    END;

    LOCAL PROCEDURE VerifyProdOrderPlanningFlexibility@192(ItemNo@1000 : Code[20]);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      FilterFirmPlannedProdOrderLine(ProdOrderLine,ItemNo);
      ProdOrderLine.TESTFIELD("Planning Flexibility",ProdOrderLine."Planning Flexibility"::None);
    END;

    LOCAL PROCEDURE VerifyPlanWkshLineForMaximumOrderQuantity@209(ProductionForecastEntry@1002 : ARRAY [3] OF Record 99000852;Item@1008 : Record 27;PlanningWorksheet@1000 : TestPage 99000852;RequisitionWkshName@1001 : Code[10]);
    VAR
      RequisitionLine@1170000000 : Record 246;
      i@1003 : Integer;
      DemandQuantity@1004 : Decimal;
      SupplyQuantity@1006 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(ProductionForecastEntry) DO
        DemandQuantity += ProductionForecastEntry[i]."Forecast Quantity";
      OpenPlanningWorksheetPage(PlanningWorksheet,RequisitionWkshName);

      // Verify quantity on RequisitionLine was less than Maximum Order Quantity of the Item.
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDSET;
      REPEAT
        SupplyQuantity += RequisitionLine.Quantity;
        Assert.IsTrue(
          RequisitionLine.Quantity <= Item."Maximum Order Quantity",
          STRSUBSTNO(MaximumOrderQuantityErr,RequisitionLine.Quantity,Item."Maximum Order Quantity"));
      UNTIL RequisitionLine.NEXT = 0;

      // Verify supply have met demand and Safety Stock Quantity.
      Item.CALCFIELDS(Inventory);
      Assert.IsTrue(
        Item.Inventory + SupplyQuantity - DemandQuantity >= Item."Safety Stock Quantity",
        STRSUBSTNO(SafetyStockQuantityErr,Item.Inventory + SupplyQuantity - DemandQuantity,Item."Safety Stock Quantity"));
    END;

    LOCAL PROCEDURE VerifyDateOnPurchaseLine@212(ItemNo@1000 : Code[20];ExpectedReceiptDate@1001 : Date;PlannedReceiptDate@1002 : Date;OrderDate@1003 : Date);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      FilterPurchaseOrderLine(PurchaseLine,ItemNo);
      PurchaseLine.TESTFIELD("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.TESTFIELD("Planned Receipt Date",PlannedReceiptDate);
      PurchaseLine.TESTFIELD("Order Date",OrderDate);
    END;

    LOCAL PROCEDURE VerifyQuantityOnRequisitionLine@248(No@1003 : Code[20];LineNo@1001 : Integer;Quantity@1000 : Decimal);
    BEGIN
      FilterRequisitionLine(RequisitionLine,No);
      RequisitionLine.SETRANGE("Line No.",LineNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyDueDatesOnRequisitionLine@311(ItemNo@1000 : Code[20];DueDates@1001 : ARRAY [3] OF Date);
    VAR
      RequisitionLine@1002 : Record 246;
      i@1003 : Integer;
    BEGIN
      WITH RequisitionLine DO BEGIN
        FindRequisitionLine(RequisitionLine,ItemNo);
        FOR i := 1 TO ARRAYLEN(DueDates) DO BEGIN
          TESTFIELD("Due Date",DueDates[i] - 1);
          NEXT;
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyExpectedReceiptDateOnReservationEntry@258(ItemNo@1001 : Code[20];ExpectedReceiptDate@1002 : Date);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      Assert.AreEqual(ExpectedReceiptDate,ReservationEntry."Expected Receipt Date",ExpectedReceiptDateErr);
    END;

    LOCAL PROCEDURE VerifyProjectedInventory@274(ItemNo@1000 : Code[20]);
    VAR
      ProdOrderLine@1004 : Record 5406;
      SalesLine@1003 : Record 37;
      TempItemLedgerEntry@1002 : TEMPORARY Record 32;
      ProjectedInventory@1001 : Decimal;
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      IF ProdOrderLine.FINDSET THEN
        REPEAT
          InsertTempItemLedgerEntry(TempItemLedgerEntry,ProdOrderLine.Quantity,ProdOrderLine."Due Date");
        UNTIL ProdOrderLine.NEXT = 0;

      SalesLine.SETRANGE("No.",ItemNo);
      IF SalesLine.FINDSET THEN
        REPEAT
          InsertTempItemLedgerEntry(TempItemLedgerEntry,-SalesLine.Quantity,SalesLine."Shipment Date");
        UNTIL SalesLine.NEXT = 0;

      TempItemLedgerEntry.SETCURRENTKEY("Item No.","Posting Date");
      IF TempItemLedgerEntry.FINDSET THEN
        REPEAT
          ProjectedInventory += TempItemLedgerEntry.Quantity;
          Assert.IsTrue(ProjectedInventory >= 0,ProjectedInventoryNegativeMsg);
        UNTIL TempItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyNameValueBufferSequence@342(VAR NameValueBuffer@1000 : Record 823;FirstToken@1001 : Text);
    BEGIN
      NameValueBuffer.TESTFIELD(Name,FirstToken);
      NameValueBuffer.NEXT;
      NameValueBuffer.TESTFIELD(Name,ReservationEntryTok);
      NameValueBuffer.NEXT;
      NameValueBuffer.TESTFIELD(Name,ReservationEntryTok);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@8(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.AvailableToReserve.INVOKE;  // Open the page - Available Sales Line, on Handler AvailableSalesLinesPageHandler.
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AvailableProdOrderLineReservePageHandler@272(VAR AvailableProdOrderLines@1000 : TestPage 99000897);
    VAR
      ProdOrderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ProdOrderNo);
      AvailableProdOrderLines.FILTER.SETFILTER("Prod. Order No.",FORMAT(ProdOrderNo));
      AvailableProdOrderLines.Reserve.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AvailableSalesLinesPageHandler@28(VAR AvailableSalesLines@1000 : TestPage 499);
    BEGIN
      AvailableSalesLines.FILTER.SETFILTER("Document No.",GlobalSalesHeader[2]."No.");
      AvailableSalesLines.Reserve.INVOKE;  // Reserve line.
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanPlanWkshRequestPageHandler@108(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    BEGIN
      // Calculate Regenerative Plan using page.
      CalculatePlanPlanWksh.Item.SETFILTER("No.",GlobalItemNo);
      CalculatePlanPlanWksh.StartingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.EndingDate.SETVALUE(GetRandomDateUsingWorkDate(90));
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE CheckOrderExistsMessageHandler@262(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,CouldNotChangeSupplyTxt) > 0,WrongMessageTxt);
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@215(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    LOCAL PROCEDURE InsertNameValueBufferEntry@348(NewName@1001 : Text[30]);
    VAR
      NameValueBuffer@1000 : Record 823;
    BEGIN
      NameValueBuffer.INIT;
      NameValueBuffer.Name := NewName;
      NameValueBuffer.INSERT;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@347(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
      InsertNameValueBufferEntry(ConfirmTok);
    END;

    [ModalPageHandler]
    PROCEDURE AssemblyAvailabilityModalPageHandler@346(VAR AssemblyAvailability@1000 : TestPage 908);
    BEGIN
      InsertNameValueBufferEntry(AvailabilityTok);
      AssemblyAvailability.Yes.INVOKE;
    END;

    [EventSubscriber(Table,337,OnBeforeModifyEvent)]
    LOCAL PROCEDURE InsertRecordBufferOnBeforeModifyEvent@345(VAR Rec@1000 : Record 337;VAR xRec@1001 : Record 337;RunTrigger@1002 : Boolean);
    BEGIN
      InsertNameValueBufferEntry(ReservationEntryTok);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Test SCM Supply Planning Suite-191:
        1. Calculate Regenerative Plan (LFL Item) for a week when demand and Supply outside Rescheduling Period.Verify Planning Worksheet.
        2. Calculate Regenerative Plan (LFL Item) for Two week when  demand and Supply partial in Rescheduling Period.Verify Planning Worksheet.
        3. Calculate Regenerative Plan (LFL Item) for a week, Production order Flexibility None.Verify Planning Worksheet.
        4. Calculate Regenerative Plan (LFL Item) for a week, Production order Flexibility None and Reservation of Purchase  line.Verify Planning Worksheet.
        5. Calculate Regenerative Plan (LFL Item) for Two Month when demand and Supply in Rescheduling Period supply also with Production Order.Verify Planning Worksheet.
        6. Calculate Regenerative Plan (LFL Item) for Two Month when demand and Supply in Rescheduling Period supply without Production Order.Verify Planning Worksheet.
        7. Calculate Regenerative Plan (LFL Item) and Carry Out Action Message and Verify there are no lines on Planning Worksheet.
        8. Calculate Regenerative Plan (LFL Item) for a week for replenishment - Purchase when demand outside Rescheduling Period. Verify Planning Worksheet.
        9. Calculate Regenerative Plan (LFL Item) for a year for replenishment - Purchase when  demand and Supply partial in Rescheduling Period.Verify Planning Worksheet.
       10. Calculate Regenerative Plan (LFL Item) for a month for replenishment - Purchase. Planning Flexibility - None without Reservation. Verify Planning Worksheet.
       11. Calculate Regenerative Plan (LFL Item) for a month for replenishment - Purchase. Planning Flexibility - None with Reservation. Verify Planning Worksheet.
       12. Calculate Regenerative Plan (LFL Item) for a year  for replenishment - Purchase. Carry Out Action Message and Verify Planning Worksheet.
       13. Calculate Regenerative Plan (LFL Item) for Multiple Location with Rescheduling Period and Lot Accumulation period of a year. Verify Planning Worksheet.
       14. Calculate Regenerative Plan (LFL Item) for Multiple Location with a single production location-Blue. Verify Planning Worksheet.
       15. Calculate Regenerative Plan (LFL Item) for Multiple Location with a single Sales location-Red. Verify Planning Worksheet.
       16. Calculate Regenerative Plan (LFL Item) for Multiple Location with Variant only and verify Planning Worksheet.
       17. Calculate Regenerative Plan (LFL Item) for Multiple Location and Carry Out Action Message. Verify there are no lines on Planning Worksheet.
       18. Calculate Regenerative Plan (LFL Item) with Safety Stock for Item and Including Inventory without supply and demand. Verify Planning Worksheet.
       19. Calculate Regenerative Plan (LFL Item) with Safety Stock for Item and Including Inventory with supply and demand. Verify Planning Worksheet.
       20. Calculate Regenerative Plan (LFL Item) with Safety Stock for Item and Including Inventory. Post positive adjustment with for demand. Verify Planning Worksheet.
       21. Calculate Regenerative Plan (LFL Item) without including Inventory for demand. Verify Planning Worksheet.
       22. Calculate Regenerative Plan (LFL Item) with Safety Stock for Item and Including Inventory with demand. Rescheduling Period of Two weeks. Verify Planning Worksheet.
       23. Calculate Regenerative Plan (LFL Item) without including Inventory. Rescheduling Period of Two weeks with only supply. Verify Planning Worksheet.
       24. Calculate Regenerative Plan (LFL Item) with Safety Stock for Item and Including Inventory with supply and demand. Carry Out Action Message and Verify there are no lines on Planning Worksheet.
       25. Calculate Regenerative Plan (LFL Item) with Supply below Dampener Quantity.
       26. Calculate Regenerative Plan (LFL Item) with Supply over Dampener Quantity.
       27. Calculate Regenerative Plan (LFL Item) with Supply Demand below Rescheduling period.
       28. Calculate Regenerative Plan (LFL Item) with Supply Demand above Rescheduling period.
       29. Calculate Regenerative Plan (LFL Item) with Supply Demand below Lot Accumulation period.
       30. Calculate Regenerative Plan (LFL Item) with Supply Demand above Lot Accumulation period.
       31. Calculate Regenerative Plan (LFL Item) with Supply Demand having different Rescheduling and Lot Accumulation period.
       32. Calculate Regenerative Plan (LFL Item) with Supply Demand Within Rescheduling Period,Sales Order and Released Production Order.Verify Planning Worksheet.
       33. Calculate Regenerative Plan (LFL Item) with Supply Demand Within Rescheduling Period,Sales Order and Released Production Order with Output.Verify Planning Worksheet.
       34. Calculate Regenerative Plan (LFL Item) with Supply Demand Within Rescheduling Period,Sales Order, Released Production Order with Output and variant on sales. Verify Planning Worksheet.
       35. Calculate Regenerative Plan (LFL Item) with Supply Demand Within Rescheduling Period,Sales Order, Released Production Order with Output, variant on sales and Production.Verify Planning Worksheet.
       36. Calculate Regenerative Plan (LFL Item) with Supply Demand for Multiple Sales Order, Released Prod Order. Verify Planning Worksheet.
       37. Calculate Regenerative Plan (LFL Item) with Supply Demand for Multiple Sales Order, Released Prod Order without attached Prod BOM on Parent Item. Verify Planning Worksheet.
       38. Calculate Regenerative Plan (LFL Item) with Supply Demand for Multiple Sales Order, Released Prod Order after creating Prod Order attached Prod BOM on Parent Item. Verify Planning Worksheet.
       39. Calculate Regenerative Plan (LFL Item) with Supply Demand for Multiple Sales Order, Released Prod Order after creating Prod Order,Create Prod Order Component,attached Prod BOM on Parent Item. Verify Planning Worksheet.
       40. Calculate Regenerative Plan (LFL Item) for Parent and Child Item for one Week, Supply Demand for Multiple Sales Order, Released Prod Order. Verify Planning Worksheet.
       41. Calculate Regenerative Plan (LFL Item) for Parent and Child Item for one Year, Supply Demand for Multiple Sales Order, Released Prod Order. Verify Planning Worksheet.
       42. Calculate Regenerative Plan (LFL Item) for Parent and Child Item for one Year, Supply Demand for Multiple Sales Order, Released Prod Order and Carry Out Action Message for Parent Item. Verify Planning Worksheet.
       43. Calculate Regenerative Plan (LFL Item) for Parent and Child Item for one Year, Supply Demand for Multiple Sales Order, Released Prod Order and Carry Out Action Message for Child Item. Verify Planning Worksheet.
       44. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order, Production Order for Parent Item and Purchase order for child Item.Verify Planning Worksheet for Child Item.
       45. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order, Production Order for Parent Item and Purchase order for child Item.Verify Planning Worksheet Page for Child Item.
       46. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order, Production Order for Parent Item and Purchase order for child Item.Verify Planning Worksheet Page for Parent Item.
       47. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order, Production Order for Parent Item and Purchase order for child Item.Verify Planning Worksheet for Parent and Child Item.
       48. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order, Production Order for Parent Item and Purchase order for child Item.Verify Planning Worksheet for Parent and Child Item with Default Dampener Period.
       49. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order, Production Order for Parent Item and Purchase order for child Item and Carry Out Action Message for Child Item. Verify Planning Worksheet.
       50. Calculate Regenerative Plan (LFL Item) with Positive adjustment. Verify Planning Worksheet.
       51. Calculate Regenerative Plan (LFL Item) with Positive adjustment, Demand Multiple Sales Order. Verify Planning Worksheet.
       52. Calculate Regenerative Plan (LFL Item) with Positive adjustment, Demand Multiple Sales Order and change quantity after Carry Out Action Message Plan. Verify Planning Worksheet.
       53. Calculate Regenerative Plan (LFL Item) with Positive adjustment, Demand Multiple Sales Order and change quantity multiple times after Carry Out Action Message. Verify Planning Worksheet.
       54. Calculate Regenerative Plan (LFL Item) with Positive adjustment, Demand Multiple Sales Order, Carry Out Action Message. Verify Planning Worksheet.
       55. Calculate Regenerative Plan (LFL Item) with Forecast, Demand Multiple Sales Order. Verify Planning Worksheet.
       56. Calculate Regenerative Plan (LFL Item) with Forecast, Supply Demand Multiple Sales Order. Verify Planning Worksheet.
       57. Calculate Regenerative Plan (LFL Item) with Forecast, Supply Demand Multiple Sales Order and Post Sales Order. Verify Planning Worksheet.
       58. Calculate Regenerative Plan (LFL Item) with Forecast, Supply Demand Multiple Sales Order, Post Sales Order, Change Rescheduling Period and Lot Accumulation Period on Item. Verify Planning Worksheet.
       59. Calculate Regenerative Plan (LFL Item) with Forecast, Supply Demand Multiple Sales Order, Post Sales Order, Post Purchase Order, Change Rescheduling Period and Lot Accumulation Period on Item. Verify Planning Worksheet.
       60  Calculate Regenerative Plan (LFL Item) with Forecast,Supply Demand Multiple Sales Order,Post Sales Order,Post Purchase Order,Change Rescheduling Period and Lot Accumulation Period on Item, Carry Out Action Message. Verify Planning Wksh.
       61. Calculate Regenerative Plan (LFL Item) with Demand Multiple Sales Order With different UOM. Verify Planning Worksheet.
       62. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order With different UOM. Verify Planning Worksheet.
       63. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order With different UOM, Carry Out Action Message. Verify Purchase Line.
       64. Calculate Regenerative Plan (LFL Item) with Supply Demand Multiple Sales Order With different UOM, Carry Out Action Message and again Calculate Regenerative Plan. Verify Planning Worksheet.
       65. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for Item with Demand. Verify Planning Worksheet.
       66. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for Item with Demand, Carry Out Action Message and Change Quantity on Demand. Verify Planning Worksheet.
       67. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for Item with Supply Demand, Carry Out Action Message and Change Quantity on Demand. Verify Planning Worksheet.
       68. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for Item with Supply Demand, Carry Out Action Message, Change Quantity on Demand again Calculate Regenerative Plan and Carry Out Action Message. Verify Planning Worksheet.
       69. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for Item with Supply Demand, Carry Out Action Message, Change Quantity on Demand and Supply, Carry Out Action Message, Calculate Regenerative Plan. Verify Planning Wksh.
       70. Calculate Regenerative Plan (FRQ Item) with Supply Demand and Reorder Qty. Verify Planning Worksheet.
       71. Calculate Regenerative Plan (FRQ Item) with Supply Demand and Reorder Qty. Carry Out Action message and Verify Planning Worksheet.
       72. Calculate Regenerative Plan (MQ Item)  with Supply Demand and Maximum Inventory. Verify Planning Worksheet.
       73. Calculate Regenerative Plan (MQ Item)  with Supply Demand and Maximum Inventory. Carry Out Action message and Verify Planning Worksheet.
       74. Calculate Regenerative Plan (FRQ Item) with Demand less than Reorder Qty and before Supply. Verify Planning Worksheet.
       75. Calculate Regenerative Plan (MQ Item)  with Demand less than Reorder Qty and before Supply. Verify Planning Worksheet.
       76. Calculate Regenerative Plan (FRQ Item) with Demand more than Reorder Qty. Verify Planning Worksheet.
       77. Calculate Regenerative Plan (MQ Item)  with Demand more than Maximum Inventory. Verify Planning Worksheet.
       78. Calculate Regenerative Plan (FRQ Item) with Supply Demand and Reorder Qty with Reorder Point. Verify Planning Worksheet.
       79. Calculate Regenerative Plan (MQ Item)  with Supply Demand and Maximum Inventory with Reorder Point. Verify Planning Worksheet.
       80. Calculate Regenerative Plan (FRQ Item) with Supply Demand and Reorder Qty with Rorder Point and Safety Stock. Verify Planning Worksheet.
       81. Calculate Regenerative Plan (MQ Item)  with Supply Demand and Maximum Inventory with Rorder Point and Safety Stock. Verify Planning Worksheet.
       82. Calculate Regenerative Plan (MQ Item) with Demand Quantity greater than Reorder Point but Less than Maximum Inventory.
       83. Calculate Regenerative Plan (MQ Item) with Demand Quantity  equals Maximum Inventory.
       84. Calculate Regenerative Plan (MQ Item) with Demand Quantity equals Sum of Maximum Inventory and Reorder Point.
       85. Calculate Regenerative Plan (MQ Item) with Demand Quantity greater than Sum of Maximum Inventory and Reorder Point.
       86. Calculate Regenerative Plan (MQ Item) with Existing Inventory More than Demand Quantity.
       87. Calculate Regenerative Plan (MQ Item) with Existing Inventory less than Demand Quantity.
       88. Calculate Regenerative Plan (MQ Item) Demand less than Maximum Inventory. Verify Planning worksheet.
       89. Calculate Regenerative Plan (MQ Item), Item replenishment - Purchase. Carry Out Action Message. Verify worksheet is empty and newly created Purchase Order.
       90. Calculate Regenerative Plan (MQ Item), Item replenishment - Prod. Order. Carry Out Action Message. Verify worksheet is empty and newly created Production Order.
       91. Calculate Regenerative Plan (MQ Item), Item replenishment - Purchase. Update Planning Flexibility to None on Requisition Line. Carry Out Action Message. Verify new Purchase Order for Planning Flexibility.
       92. Calculate Regenerative Plan (MQ Item), Item replenishment - Prod. Order. Update Planning Flexibility to None on Requisition Line. Carry Out Action Message. Verify new Production Order for Planning Flexibility.
       93. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for replenishment, Verify Planning Worksheet with supply from Purchase Order and Item Inventory.
       94. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for replenishment, Verify Planning Worksheet with supply from Purchase Order.
       95. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for replenishment, Verify Planning Worksheet with supply from Item Inventory.
       96. Calculate Regenerative Plan (LFL Item) with Maximum Order Quantity for replenishment, Verify Planning Worksheet without any supply.
       97. Calculate Regenerative Plan (LFL Item) with Base Calender and Carry out Action Message. Verify "Expected Receipt Date" in Purchase order is consistent with "Shipment Date" of the Sales Demand.
       98. Calculate Order Planning with Base Calender and Make to Order. Verify "Expected Receipt Date" in Purchase order is consistent with "Shipment Date" of the Sales Demand.
       99. Calculate Regenerative Plan (Maximum Qty. Item) with Base Calender. Verify "Due Date" in Requisition line.
      100. Calculate Regenerative Plan (LFL Item) with Base Calender and carry out Purchase Order.Verify "Order Date" in Requisition line is consistent with the "Order Date" on carried out Purchase Line.
      101. Calculate Order Planning (LFL Item) with Base Calender. Verify "Ending Date" in Requisition line.
      102. Calculate Regenerative Plan (LFL Item) with Base Calender and Item Vendor. Verify "Ending Date" in Requisition line.
      103. Calculate Regenerative Plan (Order Item) with Base Calender and Item Vendor. Verify "Ending Date" in Requisition line.
      104. Calculate Regenerative Plan (LFL Item) with Base Calender. Modify "Due Date" and verify "Ending Date" in Requisition line.
      105. Calculate Plan (FRQ Item) on Requisition Worksheet with Supply for blank Location. Verify Requisition Worksheet.
      106. Calculate Plan (FRQ Item) on Requisition Worksheet with Supply for specified Location. Verify Requisition Worksheet.
      107. Calculate Regenerative Plan (FRQ Item) with Exception Line when Order Multiple is set on Item. Verify Order Multiple should not be respected for the Exception Line.
      108. Calculate Plan (MQ Item) on Requisition Worksheet with Replenishement = Prod. Order in SKU.
      109. Re-calculate Regenerative plan in the Planning Worksheet for Reschedule Planning Lines after deleting the first Planning Line. Verify no message pops up and the count of Requistion Lines.
      110. Test an error pops up when updating Replenishment to Prod. Order in Req. Worksheet.
      111. Recalculate Regenerative Plan (Order Item) after Shipment Date is changed and demand Quantity increased,
           and then delete the Requisition Line. Test and verify Expected Receipt Date in Reservation Entry is correct.
      112. Recalculate Regenerative Plan (Order Item) after Shipment Date is changed and demand Quantity Decreased,
           and then delete the Requisition Line. Test and verify Expected Receipt Date in Reservation Entry is correct.

         Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                    TFS ID
        ---------------------------------------------------------------------------------------------
        DemandSupplyOutsideReschedPeriodWeekReplenishProdOrder                          121501,143360
        DemandSupplyPartialInReschedPeriodTwoWeekReplenishProdOrder                     121501,143360
        DemandSupplyOutsideReschedPeriodWithoutReserveFlexibilityNoneReplenishProdOrder 121501,143360
        DemandSupplyOutsideReschedPeriodWithReserveFlexibilityNoneReplenishProdOrder    121501,143360
        DemandSupplyInReschedPeriodTwoMonthWithProdOrderReplenishProdOrder              121501,143360
        DemandSupplyInReschedPeriodTwoMonthWithoutProdOrderReplenishProdOrder           121501,143360
        DemandSupplyOutsideReschedPeriodCarryOutActionMessageReplenishProdOrder         121501,143360
        DemandSupplyOutsideReschedPeriodWeekReplenishPurchase                           121511
        DemandSupplyPartialInReschedPeriodYearReplenishPurchase                         121511
        DemandSupplyWithoutReserveFlexibilityNoneReplenishPurchase                      121512, 121513
        DemandSupplyWithReserveFlexibilityNoneReplenishPurchase                         121512, 121513
        DemandSupplyInReschedPeriodCarryOutActionMessageReplenishPurchase               121516
        DemandSupplyOnMultipleLocations                                                 120958
        DemandSupplyOnMultipleLocationsWithPlanningForProductionLocation                120958
        DemandSupplyOnMultipleLocationsWithPlanningForSalesLocation                     120958
        DemandSupplyOnMultipleLocationsWithVariant                                      120958
        DemandSupplyOnMultipleLocationsCarryOutActionMessage                            120958
        SupplyFromSafetyStockOnly                                                       121549
        DemandSupplyWithSafetyStock                                                     121549
        DemandSupplyWithSafetyStockWithInventory                                        121549
        DemandSupplyWithoutSafetyStockAndInventory                                      121549
        DemandWithSafetyStockAndInventory                                               121549
        SupplyFromPurchaseWithoutSafetyStock                                            121549
        DemandSupplyWithSafetyStockCarryOutActionMessage                                121549
        SupplyLessThanDampenerWithoutActionMessage                                      143363
        SupplyMoreThanDampenerWithActionMessage                                         143363
        DemandSupplyInReschedulingWithoutLotAccumulation                                143363
        DemandSupplyOutsideReschedulingWithoutLotAccumulation                           143363
        DemandSupplyInLotAccumulationPeriodWithoutRescheduling                          143363
        DemandSupplyOutsideLotAccumulationPeriodWithoutRescheduling                     143363
        DemandSupplyWithDifferentReschedulingAndLotAccumulation                         143363

        Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ---------------------------------------------------------------------------------------------
         DemandSupplyReschedulingPeriodInWeek                                            143364
         DemandSupplyReschedulingPeriodInWeekWithOutput                                  143364
         DemandSupplyReschedulingPeriodInWeekWithSalesVariant                            143364
         DemandSupplyReschedulingPeriodInWeekWithProductionVariant                       143364

        Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ---------------------------------------------------------------------------------------------
         DemandSupplyWithReschedulingPeriodWeekWithoutChildItem                          121144
         DemandSupplyWithReschedulingPeriodWeekWithoutProdBOMOnItem                      121145
         DemandSupplyWithReschedulingPeriodWeekWithProdBOMOnItem                         121146
         DemandSupplyWithReschedulingPeriodWeekWithProdComponent                         121147
         DemandSupplyWithReschedulingPeriodWeekParentAndChildItem                        121502
         DemandSupplyWithReschedulingPeriodYearParentAndChildItem                        121503
         DemandSupplyCarryOutActionMessageParentItem                                     121504
         DemandSupplyCarryOutActionMessageChildItem                                      121505

        Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ---------------------------------------------------------------------------------------------
         DemandSupplyWithPurchaseOfChildItem                                             121143
         DemandSupplyWithChildItemOnRequisitionWorksheetNewBatch                         121143
         DemandSupplyWithParentItemOnRequisitionWorksheetNewBatch                        121143
         DemandSupplyWithChildAndParentItemWithoutDefaultDampenerPeriod                  121143
         DemandSupplyWithChildAndParentItemWithDefaultDampenerPeriod                     121143
         DemandSupplyWithPurchaseOfChildItemCarryOutActionMessage                        121143

        Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ---------------------------------------------------------------------------------------------
         CalculateRegenerativePlanWithPositiveAdjustment                              121152,143361
         DemandWithPositiveAdjustment                                                 121152,143361
         DemandWithChangeQtyAfterCarryOutActionMessage                                121152,143361
         DemandWithMultipleChangeQtyAfterCarryOutActionMessage                        121152,143361
         DemandWithPositiveAdjustmentCarryOutActionMessage                            121152,143361
         DemandWithForecast                                                               121548
         DemandSupplyWithForecastWithoutPostSalesOrder                                    121154
         DemandSupplyWithForecastWithPostSalesOrder                                       121155
         DemandSupplyWithForecastChangeReschedPeriodWithoutPostPurchaseOrder              121156
         DemandSupplyWithForecastChangeReschedPeriodWithPostPurchaseOrder                 121157
         DemandSupplyWithForecastAndCarryOutActionMessage                                 121158

        Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ---------------------------------------------------------------------------------------------
         DemandWithMultipleUOMReschedPeriodWeek                                       121153,143362
         DemandSupplyWithMultipleUOMReschedPeriodWeek                                 121153,143362
         DemandSupplyWithMultipleUOMCarryOutActionMessage                             121153,143362
         DemandSupplyWithMultipleUOMCarryOutActionMessageAndRerunRegenerativePlan     121153,143362
         DemandWithMaximumOrderQuantity                                                    121509
         DemandWithMaximumOrderQuantityAndChangeQtyOnDemand                                121509
         DemandSupplyWithMaximumOrderQuantityAndChangeQtyOnDemand                          121509
         DemandSupplyWithMaximumOrderQuantityAndCarryOutActionMessage                      121509
         DemandSupplyWithMaximumOrderQuantityCarryOutActionMessageAndChangeQtyOnSupply     121509

        Covers Test cases :
        ---------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ---------------------------------------------------------------------------------------------
         DemandAfterSupplyForFRQItem                                                     121508
         DemandSupplyForFRQItemCarryOutActionMessage                                     121508
         DemandAfterSupplyForMQItem                                                      121148
         DemandSupplyForMQItemCarryOutActionMessage                                      121151
         DemandLessThanReorderQtyAndBeforeSupplyForFRQItem                               121508
         DemandLessThanReorderQtyAndBeforeSupplyForMQItem                                121149
         DemandMoreThanReorderQtyForFRQItem                                              121508
         DemandMoreThanMaximumInventoryForMQItem                                         121506
         DemandSupplyForFRQItemWithReorderPoint                                          121508
         DemandSupplyForMQItemWithReorderPoint                                           121150,121506,121507
         DemandOnlyForFRQItemWithReorderPointAndSafetyStock                              121508
         DemandOnlyForMQItemWithReorderPointAndSafetyStock                               121150,121506,121507

        Covers Test cases :
        ------------------------------------------------------------------------------------------------------------
         Test Function                                                                            TFS ID
        ------------------------------------------------------------------------------------------------------------
        DemandLessThanMaximumInventoryWithReorderPointMQItem                             123512,123513,123514,127974
        DemandEqualsMaximumInventoryMQItem                                               123512,123513,123514,127974
        DemandEqualsMaximumInventoryAndReorderPointMQItem                                123512,123513,123514,127974
        DemandGreaterThanMaximumInventoryAndReorderPointMQItem                           123512,123513,123514,127974
        DemandLessThanExistingInventoryAndMaximumInventoryMQItem                         123512,123513,123514,127974
        DemandMoreThanExistingInventoryLessThanMaximumInventoryMQItem                    123512,123513,123514,127974

        Covers Test cases :
        ------------------------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ------------------------------------------------------------------------------------------------------------
        DemandLessThanMaxInventoryMQItem                                                 129148
        DemandForMQItemReplenishPurchaseWithMaxInventoryCarryOutAM                       129149
        DemandForMQItemReplenishProdOrderWithMaxInventoryCarryOutAM                      129149
        DemandForMQItemReplenishPurchaseCarryOutAMWithFlexibilityNone                    143098
        DemandForMQItemReplenishProdOrderCarryOutAMWithFlexibilityNone                   143098

        Covers Test cases for Sicily Code Defect
        ------------------------------------------------------------------------------------------------------------
         Test Function                                                                   TFS ID
        ------------------------------------------------------------------------------------------------------------
        DemandSupplyWithMaximumOrderQtyWithPurchaseOrderAndItemInventory                 50944
        DemandSupplyWithMaximumOrderQtyWithPurchaseOrder                                 50944
        DemandSupplyWithMaximumOrderQtyWithItemInventory                                 50944
        DemandSupplyWithMaximumOrderQtyWithoutPurchaseOrderAndItemInventory              50944
        DemandSupplyWithBaseCalendarForPlanningWorksheet                                 54599
        DemandSupplyWithBaseCalendarForOrderPlanning                                     54599
        CalculatePlanningWorksheetWithBaseCalendar                                       56561
        CalculatePlanningWorksheetAndCarryOutWithBaseCalendar                            56561
        CalculateOrderPlanningWithBaseCalendar                                           56561
        CalculatePlanningWorksheetWithBaseCalendarAndItemVendorForLotForLotItem          56561
        CalculatePlanningWorksheetWithBaseCalendarAndItemVendorForOrderItem              56561
        ModifyDueDateOnRequisitionLineWithBaseCalendar                                   56561
        CalcReqWkshForFRQItemWithSupply                                                  57765
        CalcReqWkshForFRQItemWithSupplyForLocation                                       57765
        CalculateRegenerativePlanForFRQWithExceptionLine                                 66364
        CalcReqWkshWithReplenishmentIsProdOrderInSKU                                     70129

        Covers Test cases For Sicily Code Defect:
        ------------------------------------------------------------------------------------------------------------
        Test Function                                                                   TFS ID
        ------------------------------------------------------------------------------------------------------------
        ReCalcPlanForReschedulePlanningLinesAfterDeleteFirstPlanningLine                70657
        UpdateReplenishmentInRequsitionWorksheet                                        71388
        ReCalcPlngWkshAfterDemandDateChangedAndQuantityIncreased                        90043
        ReCalcPlngWkshAfterDemandDateChangedAndQuantityDecreased                        90043
    }
    END.
  }
}

