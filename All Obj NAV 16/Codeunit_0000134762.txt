OBJECT Codeunit 134762 Test Purchase Preview
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1008 : Codeunit 132201;
      Assert@1003 : Codeunit 130000;
      LibraryPurchase@1006 : Codeunit 130512;
      GenJnlPostPreview@1004 : Codeunit 19;
      LibraryRandom@1012 : Codeunit 130440;
      ExpectedCost@1013 : Decimal;
      ExpectedQuantity@1009 : Decimal;
      NoRecordsErr@1000 : TextConst 'ENU=There are no preview records to show.';
      NothingToPostErr@1001 : TextConst 'ENU=There is nothing to post.';

    [Test]
    PROCEDURE PurchInvoiceOpensPreview@7();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseInvoice@1001 : TestPage 51;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoice should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,ExpectedCost,ExpectedQuantity);

      // Execute the page
      PurchaseInvoice.TRAP;
      PAGE.RUN(PAGE::"Purchase Invoice",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseInvoice.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchOrderOpensPreview@19();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseOrder@1001 : TestPage 50;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,ExpectedCost,ExpectedQuantity);

      // Execute the page
      PurchaseOrder.TRAP;
      PAGE.RUN(PAGE::"Purchase Order",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseOrder.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchCreditMemoOpensPreview@2();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseCreditMemo@1001 : TestPage 52;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",ExpectedCost,ExpectedQuantity);

      PurchaseHeader."Vendor Cr. Memo No." := '98771337';
      PurchaseHeader.MODIFY(TRUE);

      // Execute the page
      PurchaseCreditMemo.TRAP;
      PAGE.RUN(PAGE::"Purchase Credit Memo",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseCreditMemo.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchReturnOrderOpensPreview@4();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseReturnOrder@1001 : TestPage 6640;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",ExpectedCost,ExpectedQuantity);

      PurchaseHeader."Vendor Cr. Memo No." := '98771337';
      PurchaseHeader.MODIFY(TRUE);

      // Execute the page
      PurchaseReturnOrder.TRAP;
      PAGE.RUN(PAGE::"Purchase Return Order",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseReturnOrder.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniPurchInvoiceOpensPreview@22();
    VAR
      PurchaseHeader@1000 : Record 38;
      MiniPurchaseInvoice@1001 : TestPage 1354;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoice should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,ExpectedCost,ExpectedQuantity);

      // Execute the page
      MiniPurchaseInvoice.TRAP;
      PAGE.RUN(PAGE::"Mini Purchase Invoice",PurchaseHeader);

      GLPostingPreview.TRAP;
      MiniPurchaseInvoice.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniPurchCreditMemoOpensPreview@14();
    VAR
      PurchaseHeader@1000 : Record 38;
      MiniPurchaseCreditMemo@1001 : TestPage 1369;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",ExpectedCost,ExpectedQuantity);

      PurchaseHeader."Vendor Cr. Memo No." := '98771337';
      PurchaseHeader.MODIFY(TRUE);

      // Execute the page
      MiniPurchaseCreditMemo.TRAP;
      PAGE.RUN(PAGE::"Mini Purchase Credit Memo",PurchaseHeader);

      GLPostingPreview.TRAP;
      MiniPurchaseCreditMemo.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    [HandlerFunctions(PaymentRegistrationSetup)]
    PROCEDURE PaymentRegistrationErrorsWhenNothingToPost@3();
    VAR
      PaymentRegistration@1000 : TestPage 981;
    BEGIN
      PaymentRegistration.TRAP;
      PAGE.RUN(PAGE::"Payment Registration");

      ASSERTERROR PaymentRegistration.PreviewPayments.INVOKE;
      IF GETLASTERRORTEXT <> NothingToPostErr THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(PaymentRegistrationSetup)]
    PROCEDURE PaymentRegistrationLumpErrorsWhenNothingToPost@10();
    VAR
      PaymentRegistration@1000 : TestPage 981;
    BEGIN
      PaymentRegistration.TRAP;
      PAGE.RUN(PAGE::"Payment Registration");

      ASSERTERROR PaymentRegistration.PreviewLump.INVOKE;
      IF GETLASTERRORTEXT <> NothingToPostErr THEN
        ERROR(GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE PurchInvoiceListOpensPreview@5();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseInvoices@1001 : TestPage 9308;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoices should open G/L Posting Preview Page
      // Initialize the purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,ExpectedCost,ExpectedQuantity);

      // Execute the page
      PurchaseInvoices.TRAP;
      PAGE.RUN(PAGE::"Purchase Invoices",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseInvoices.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchOrderListOpensPreview@17();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseOrderList@1001 : TestPage 9307;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order List should open G/L Posting Preview Page
      // Initialize the purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,ExpectedCost,ExpectedQuantity);

      // Execute the page
      PurchaseOrderList.TRAP;
      PAGE.RUN(PAGE::"Purchase Order List",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseOrderList.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchCreditMemoListOpensPreview@12();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseCreditMemos@1001 : TestPage 9309;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",ExpectedCost,ExpectedQuantity);

      PurchaseHeader."Vendor Cr. Memo No." := '98771337';
      PurchaseHeader.MODIFY(TRUE);

      // Execute the page
      PurchaseCreditMemos.TRAP;
      PAGE.RUN(PAGE::"Purchase Credit Memos",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseCreditMemos.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchReturnOrderListOpensPreview@9();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseReturnOrderList@1001 : TestPage 9311;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",ExpectedCost,ExpectedQuantity);

      PurchaseHeader."Vendor Cr. Memo No." := '98771337';
      PurchaseHeader.MODIFY(TRUE);

      // Execute the page
      PurchaseReturnOrderList.TRAP;
      PAGE.RUN(PAGE::"Purchase Return Order List",PurchaseHeader);

      GLPostingPreview.TRAP;
      PurchaseReturnOrderList.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniPurchInvoiceListOpensPreview@23();
    VAR
      PurchaseHeader@1000 : Record 38;
      MiniPurchaseInvoiceList@1001 : TestPage 1356;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoices should open G/L Posting Preview Page
      // Initialize the purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,ExpectedCost,ExpectedQuantity);

      // Execute the page
      MiniPurchaseInvoiceList.TRAP;
      PAGE.RUN(PAGE::"Mini Purchase Invoice List",PurchaseHeader);

      GLPostingPreview.TRAP;
      MiniPurchaseInvoiceList.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniPurchCreditMemoListOpensPreview@16();
    VAR
      PurchaseHeader@1000 : Record 38;
      MiniPurchaseCreditMemos@1001 : TestPage 1367;
      GLPostingPreview@1002 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Order should open G/L Posting Preview Page
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",ExpectedCost,ExpectedQuantity);

      PurchaseHeader."Vendor Cr. Memo No." := '98771337';
      PurchaseHeader.MODIFY(TRUE);

      // Execute the page
      MiniPurchaseCreditMemos.TRAP;
      PAGE.RUN(PAGE::"Mini Purchase Credit Memos",PurchaseHeader);

      GLPostingPreview.TRAP;
      MiniPurchaseCreditMemos.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PurchInvoicePreviewCorrectResults@8();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchPostYesNo@1002 : Codeunit 91;
      ValueEntriesPreview@1001 : TestPage 5807;
      GLPostingPreview@1003 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoice should have the expected results in the Value Entry Preview page.
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,ExpectedCost,ExpectedQuantity);

      // Execute the preview
      GLPostingPreview.TRAP;
      ASSERTERROR PurchPostYesNo.Preview(PurchaseHeader);
      Assert.AreEqual('',GETLASTERRORTEXT,'Expected empty error from Preview. Actual error: ' + GETLASTERRORTEXT);
      GLPostingPreview.CLOSE;

      // Show the pages. Verification done in page handlers.
      ValueEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Value Entry");

      // Verify results
      Assert.AreEqual(ExpectedQuantity,
        ValueEntriesPreview."Valued Quantity".ASINTEGER,'Valued quantity is not as expected.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,
        ValueEntriesPreview."Cost Amount (Actual)".ASDECIMAL,
        'Posted cost amount is not as expected.');
      Assert.AreEqual(0,ValueEntriesPreview."Cost Amount (Non-Invtbl.)".ASDECIMAL,'Non-inventoriable cost amount is non-zero.');

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
    END;

    [Test]
    PROCEDURE PurchOrderPreviewCorrectResults@11();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchPostYesNo@1002 : Codeunit 91;
      ItemLedgerEntriesPreview@1001 : TestPage 167;
      GLPostingPreview@1003 : TestPage 115;
    BEGIN
      // [SCENARIO] Preview action on Purchase Invoice should have the expected results in the Item Ledger Entry Preview page.
      // Initialize purchase header
      ExpectedCost := LibraryRandom.RandInt(100);
      ExpectedQuantity := LibraryRandom.RandInt(10);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,ExpectedCost,ExpectedQuantity);

      // Execute the preview
      GLPostingPreview.TRAP;
      ASSERTERROR PurchPostYesNo.Preview(PurchaseHeader);
      Assert.AreEqual('',GETLASTERRORTEXT,'Expected empty error from Preview. Actual error: ' + GETLASTERRORTEXT);
      GLPostingPreview.CLOSE;

      // Show the pages. Verification done in page handlers.
      ItemLedgerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Item Ledger Entry");

      Assert.AreEqual(ExpectedQuantity,ItemLedgerEntriesPreview.Quantity.ASINTEGER,'Posted quantity is not as expected.');
      Assert.AreEqual(
        ExpectedQuantity * ExpectedCost,
        ItemLedgerEntriesPreview.CostAmountActual.ASDECIMAL,
        'Posted cost amount is not as expected.');
      Assert.AreEqual(0,ItemLedgerEntriesPreview.CostAmountNonInvtbl.ASDECIMAL,'Non-inventoriable cost amount is non-zero.');

      // Cleanup
      PurchaseHeader.DELETE;
      CLEARALL;
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithCalcInvAndDiscPreview@81();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchPostYesNo@1003 : Codeunit 91;
      GLPostingPreview@1001 : TestPage 115;
    BEGIN
      // [FEATURE] [Invoice]
      // [SCENARIO 381357] Stan can see posting preview of released purchase invoice when "Calc. Inv. and Pmt. Discount" is set in setup.
      // [GIVEN] "Calc. Inv. and Pmt. Discount" = TRUE in "Purchases & Payables Setup"
      // [GIVEN] Released purchase invoice where "Payment Discount %" = 5%
      CreatePurchaseDocumentWithItem(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);

      // [WHEN] Stan calls "Post Preview" from invoice
      GLPostingPreview.TRAP;
      ASSERTERROR PurchPostYesNo.Preview(PurchaseHeader);
      Assert.ExpectedError('');

      // [THEN] Posting preview page opens without errors.
      GLPostingPreview.CLOSE;
    END;

    [Test]
    PROCEDURE PurchaseOrderWithCalcInvAndDiscPreview@15();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchPostYesNo@1003 : Codeunit 91;
      GLPostingPreview@1001 : TestPage 115;
    BEGIN
      // [FEATURE] [Order]
      // [SCENARIO 202205] Stan can see posting preview of released purchase order when "Calc. Inv. and Pmt. Discount" is set in setup.
      // [GIVEN] "Calc. Inv. and Pmt. Discount" = TRUE in "Purchases & Payables Setup"
      // [GIVEN] Released purchase order where "Payment Discount %" = 5%
      CreatePurchaseDocumentWithItem(PurchaseHeader,PurchaseHeader."Document Type"::Order);

      // [WHEN] Stan calls "Post Preview" from invoice
      GLPostingPreview.TRAP;
      ASSERTERROR PurchPostYesNo.Preview(PurchaseHeader);
      Assert.ExpectedError('');

      // [THEN] Posting preview page opens without errors.
      GLPostingPreview.CLOSE;
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@6(VAR PurchaseHeader@1000 : Record 38;DocumentType@1005 : Option;ItemCost@1004 : Decimal;Quantity@1007 : Decimal);
    VAR
      Vendor@1002 : Record 23;
      Item@1001 : Record 27;
      PurchaseLine@1003 : Record 39;
      VATPostingSetup@1006 : Record 325;
      LibraryERM@1008 : Codeunit 131300;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,Vendor."No.");
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",ItemCost);
      Item.MODIFY(TRUE);

      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",Vendor."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",Item."VAT Prod. Posting Group");
      IF NOT VATPostingSetup.FINDFIRST THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,Vendor."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");

      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Quantity);
      COMMIT;
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithItem@13(VAR PurchaseHeader@1002 : Record 38;DocumentType@1001 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.SetCalcInvDiscount(TRUE);
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,DocumentType,'','',LibraryRandom.RandIntInRange(5,10),'',WORKDATE);
      PurchaseHeader.VALIDATE("Payment Discount %",LibraryRandom.RandIntInRange(5,10));
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      COMMIT;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentRegistrationSetup@21(VAR PaymentRegistrationSetup@1000 : TestPage 982);
    BEGIN
      PaymentRegistrationSetup.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Post Preview] [Purchase] [UI]
    }
    END.
  }
}

