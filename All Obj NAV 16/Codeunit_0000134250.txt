OBJECT Codeunit 134250 Match General Jnl Lines UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1000 : Codeunit 130440;
      LibraryUtility@1001 : Codeunit 131000;
      Assert@1002 : Codeunit 130000;
      isInitialized@1060 : Boolean;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryGeneral@5();
    VAR
      CustLedgerEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1005 : Record 232;
      Customer@1004 : Record 18;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",CustLedgerEntry."Document No." + Customer.Name,'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryCustNoVsAmt@38();
    VAR
      CustLedgerEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1002 : Record 81;
      GenJnlBatch@1005 : Record 232;
      Customer@1004 : Record 18;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount" - LibraryRandom.RandDec(100,2),
        Customer."No.",'');
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'','');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryDocNoAndName@13();
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1003 : Record 21;
      Customer@1005 : Record 18;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertCustLedgerEntry(CustLedgerEntry2,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",CustLedgerEntry."Document No." + Customer.Name,'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);
      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryDocNoVsName@15();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1005 : Record 18;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1003 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",CustLedgerEntry."Document No.",'');
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-CustLedgerEntry."Remaining Amount",Customer.Name,'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryDocNoAndNameDesc2@37();
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1003 : Record 21;
      Customer@1005 : Record 18;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertCustLedgerEntry(CustLedgerEntry2,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'',CustLedgerEntry."Document No." + Customer.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);
      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryDocNoVsNoDesc2@36();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1005 : Record 18;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1003 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'',CustLedgerEntry."Document No.");
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'',Customer."No.");

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryDocNoVsNameDesc2@40();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1005 : Record 18;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1003 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'',CustLedgerEntry."Document No.");
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'',Customer.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchCustLedgerEntryDescVsDesc2@35();
    VAR
      CustLedgerEntry@1000 : Record 21;
      Customer@1005 : Record 18;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1003 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",'',CustLedgerEntry."Document No.");
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-CustLedgerEntry."Remaining Amount",Customer."No.",'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Customer,CustLedgerEntry."Customer No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryGeneral@10();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1005 : Record 232;
      Vendor@1004 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",VendorLedgerEntry."Document No." + Vendor.Name,'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryVendorNoVsAmt@46();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1002 : Record 81;
      GenJnlBatch@1005 : Record 232;
      Vendor@1004 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",Vendor."No.",'');
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",'','');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryDocNoAndName@14();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Vendor@1005 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertVendorLedgerEntry(VendorLedgerEntry2,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",VendorLedgerEntry."Document No." + Vendor.Name,'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryDocNoVsName@16();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1004 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Vendor@1005 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",VendorLedgerEntry."Document No.",'');
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",Vendor.Name,'');

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryDocNoAndNameDesc2@49();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1004 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Vendor@1005 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertVendorLedgerEntry(VendorLedgerEntry2,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",'',VendorLedgerEntry."Document No." + Vendor.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryDocNoVsNameDesc2@48();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1004 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Vendor@1005 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",'',VendorLedgerEntry."Document No.");
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",'',Vendor.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchVendorLedgerEntryDocNoVsNoDesc2@50();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlLine2@1004 : Record 81;
      GenJnlBatch@1006 : Record 232;
      Vendor@1005 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",'',VendorLedgerEntry."Document No.");
      InsertGenJnlLine(GenJnlLine2,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",'',Vendor."No.");

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,GenJnlLine."Document No.",GenJnlLine."Account Type"::Vendor,VendorLedgerEntry."Vendor No.",TRUE);
      VerifyGenJnlLine(GenJnlLine2,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchToEarlierCustLedgerEntryNotAllowed@1060();
    VAR
      CustLedgerEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1005 : Record 232;
      Customer@1004 : Record 18;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertCustomer(Customer);
      InsertCustLedgerEntry(CustLedgerEntry,Customer."No.",Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-CustLedgerEntry."Remaining Amount",CustLedgerEntry."Document No." + Customer.Name,'');

      // Exercise
      CustLedgerEntry."Posting Date" := GenJnlLine."Posting Date" + LibraryRandom.RandInt(10);
      CustLedgerEntry.MODIFY;
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MatchToEarlierVendorLedgerEntryNotAllowed@1061();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1005 : Record 232;
      Vendor@1004 : Record 23;
      Amount@1003 : Decimal;
    BEGIN
      Initialize;
      // Setup
      Amount := LibraryRandom.RandDec(100,2);
      InsertVendor(Vendor);
      InsertVendorLedgerEntry(VendorLedgerEntry,Vendor."No.",-Amount);
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,-VendorLedgerEntry."Remaining Amount",VendorLedgerEntry."Document No." + Vendor.Name,'');

      // Exercise
      VendorLedgerEntry."Posting Date" := GenJnlLine."Posting Date" + LibraryRandom.RandInt(10);
      VendorLedgerEntry.MODIFY;
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',0,'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapToDebitGLAccount@20();
    VAR
      TextToAccMapping@1000 : Record 1251;
      GenJnlLine@1005 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToGL(GenJnlLine,TextToAccMapping);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::"G/L Account",TextToAccMapping."Debit Acc. No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MapToCreditGLAccount@26();
    VAR
      TextToAccMapping@1000 : Record 1251;
      GenJnlLine@1005 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToGL(GenJnlLine,TextToAccMapping);
      GenJnlLine.Amount := -GenJnlLine.Amount;
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::"G/L Account",TextToAccMapping."Credit Acc. No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MaptToCustomerDebitGLAccount@21();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToCustomer(GenJnlLine,TextToAccMapping);
      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::Customer,TextToAccMapping."Bal. Source No.",TRUE);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::"Credit Memo");
      VerifyAppliedInvGenJnlLine(
        GenJnlLine,GenJnlLine."Document Type"::Refund,GenJnlLine."Document No.",
        GenJnlLine."Account Type"::Customer,TextToAccMapping."Bal. Source No.",TextToAccMapping."Debit Acc. No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MaptToCustomerCreditGLAccount@28();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToCustomer(GenJnlLine,TextToAccMapping);
      GenJnlLine.Amount := -GenJnlLine.Amount;
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::Customer,TextToAccMapping."Bal. Source No.",TRUE);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::Invoice);
      VerifyAppliedInvGenJnlLine(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Document No.",
        GenJnlLine."Account Type"::Customer,TextToAccMapping."Bal. Source No.",TextToAccMapping."Credit Acc. No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MaptToVendorDebitGLAccount@30();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToVendor(GenJnlLine,TextToAccMapping);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::Vendor,TextToAccMapping."Bal. Source No.",TRUE);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::Invoice);
      VerifyAppliedInvGenJnlLine(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Document No.",
        GenJnlLine."Account Type"::Vendor,TextToAccMapping."Bal. Source No.",TextToAccMapping."Debit Acc. No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MaptToVendorCreditGLAccount@31();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToVendor(GenJnlLine,TextToAccMapping);
      GenJnlLine.Amount := -GenJnlLine.Amount;
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::Vendor,TextToAccMapping."Bal. Source No.",TRUE);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::"Credit Memo");
      VerifyAppliedInvGenJnlLine(
        GenJnlLine,GenJnlLine."Document Type"::Refund,GenJnlLine."Document No.",
        GenJnlLine."Account Type"::Vendor,TextToAccMapping."Bal. Source No.",TextToAccMapping."Credit Acc. No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MappingWithSpecialChars@42();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToGL(GenJnlLine,TextToAccMapping);

      // Add special chars.
      GenJnlLine.Description += ' {[(*)]}';
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::"G/L Account",TextToAccMapping."Debit Acc. No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DeleteInvoiceAfterMapping@43();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
      GenJnlLine1@1000 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToCustomer(GenJnlLine,TextToAccMapping);
      GenJnlLine.Amount := -GenJnlLine.Amount;
      GenJnlLine.MODIFY;
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Exercise.
      GenJnlLine1.COPY(GenJnlLine);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::Invoice);
      GenJnlLine.DELETE(TRUE);

      // Verify.
      VerifyGenJnlLine(GenJnlLine1,'',GenJnlLine1."Account Type"::"G/L Account",'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UnapplyAfterMapping@53();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
      GenJnlLine1@1000 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToVendor(GenJnlLine,TextToAccMapping);
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Exercise.
      GenJnlLine1.COPY(GenJnlLine);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::Invoice);
      GenJnlLine.VALIDATE("Applies-to Doc. No.",'');
      GenJnlLine.MODIFY(TRUE);

      // Verify.
      VerifyGenJnlLine(GenJnlLine1,'',GenJnlLine1."Account Type"::"G/L Account",'',FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE RemoveDocTypeAfterMapping@45();
    VAR
      TextToAccMapping@1004 : Record 1251;
      GenJnlLine@1001 : Record 81;
      GenJnlLine1@1000 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToVendor(GenJnlLine,TextToAccMapping);
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Exercise.
      GenJnlLine1.COPY(GenJnlLine);
      FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::Invoice);
      GenJnlLine.VALIDATE("Applies-to Doc. Type",GenJnlLine."Applies-to Doc. Type"::" ");
      GenJnlLine.MODIFY(TRUE);

      // Verify.
      GenJnlLine.TESTFIELD("Applies-to Doc. No.",'');
      VerifyGenJnlLine(GenJnlLine1,'',GenJnlLine1."Account Type"::"G/L Account",'',FALSE);
    END;

    [Test]
    PROCEDURE CalcNearnessDiffStrings@34();
    VAR
      RecordMatchMgt@1001 : Codeunit 1251;
      FullString@1000 : Text;
      Nearness@1002 : Integer;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Nearness := RecordMatchMgt.CalculateStringNearness(COPYSTR(FullString,1,10),
          COPYSTR(FullString,11,20),10,10);

      // Verify.
      Assert.AreEqual(0,Nearness,'Wrong nearness.');
    END;

    [Test]
    PROCEDURE CalcNearnessSimilarStrings@44();
    VAR
      RecordMatchMgt@1001 : Codeunit 1251;
      FullString@1000 : Text;
      Nearness@1002 : Integer;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Nearness := RecordMatchMgt.CalculateStringNearness(COPYSTR(FullString,1,10),
          COPYSTR(FullString,5,15),6,10);

      // Verify.
      Assert.AreEqual(6,Nearness,'Wrong nearness.');
    END;

    [Test]
    PROCEDURE CalcNearnessSameStrings@54();
    VAR
      RecordMatchMgt@1001 : Codeunit 1251;
      FullString@1000 : Text;
      Nearness@1002 : Integer;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Nearness := RecordMatchMgt.CalculateStringNearness(FullString,FullString,5,10);

      // Verify.
      Assert.AreEqual(10,Nearness,'Wrong nearness.');
    END;

    [Test]
    PROCEDURE CalcNearnessEmptyString@39();
    VAR
      RecordMatchMgt@1001 : Codeunit 1251;
      FullString@1000 : Text;
      Nearness@1002 : Integer;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Nearness := RecordMatchMgt.CalculateStringNearness(FullString,'',5,10);

      // Verify.
      Assert.AreEqual(0,Nearness,'Wrong nearness.');
    END;

    [Test]
    PROCEDURE GetLCSSimilarStrings@47();
    VAR
      RecordMatchMgt@1003 : Codeunit 1251;
      FullString@1000 : Text;
      Result@1002 : Text;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Result := RecordMatchMgt.GetLongestCommonSubstring(COPYSTR(FullString,1,10),COPYSTR(FullString,5,15));

      // Verify.
      Assert.AreEqual(COPYSTR(FullString,5,6),Result,'Wrong LCS.');
    END;

    [Test]
    PROCEDURE GetLCSSameStrings@51();
    VAR
      RecordMatchMgt@1001 : Codeunit 1251;
      FullString@1000 : Text;
      Result@1002 : Text;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Result := RecordMatchMgt.GetLongestCommonSubstring(FullString,FullString);

      // Verify.
      Assert.AreEqual(FullString,Result,'Wrong LCS.');
    END;

    [Test]
    PROCEDURE GetLCSEmptyString@41();
    VAR
      RecordMatchMgt@1001 : Codeunit 1251;
      FullString@1000 : Text;
      Result@1002 : Text;
    BEGIN
      // Setup.
      FullString := CREATEGUID;

      // Exercise.
      Result := RecordMatchMgt.GetLongestCommonSubstring('',FullString);

      // Verify.
      Assert.AreEqual(0,STRLEN(Result),'Wrong LCS.');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InsertInvoiceNextInteger@32();
    VAR
      TextToAccMapping@1001 : Record 1251;
      GenJnlLine@1000 : Record 81;
      GenJnlLine2@1002 : Record 81;
    BEGIN
      Initialize;
      // Setup
      SetupMappingToCustomer(GenJnlLine,TextToAccMapping);
      GenJnlLine2.COPY(GenJnlLine);
      GenJnlLine2."Line No." := GenJnlLine."Line No." + 1;
      GenJnlLine2.INSERT;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",GenJnlLine);

      // Verify.
      VerifyGenJnlLine(GenJnlLine,'',GenJnlLine."Account Type"::Customer,TextToAccMapping."Bal. Source No.",TRUE);
      ASSERTERROR
        FindInvoiceLineFromPayment(GenJnlLine,GenJnlLine."Document Type"::Invoice)
    END;

    LOCAL PROCEDURE Initialize@1064();
    BEGIN
      CloseExistingEntries;
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE InsertCustLedgerEntry@2(VAR CustLedgerEntry@1000 : Record 21;CustomerNo@1003 : Code[20];Amount@1002 : Decimal);
    VAR
      LastEntryNo@1001 : Integer;
    BEGIN
      CustLedgerEntry.FINDLAST;
      LastEntryNo := CustLedgerEntry."Entry No.";
      InsertDetailedCustLedgerEntry(LastEntryNo + 1,Amount);
      CustLedgerEntry.INIT;
      CustLedgerEntry."Entry No." := LastEntryNo + 1;
      CustLedgerEntry."Posting Date" := WORKDATE;
      CustLedgerEntry."Customer No." := CustomerNo;
      CustLedgerEntry."Document No." := COPYSTR(CREATEGUID,1,20);
      CustLedgerEntry.Open := TRUE;
      CustLedgerEntry.INSERT;
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
    END;

    LOCAL PROCEDURE InsertVendorLedgerEntry@3(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1003 : Code[20];Amount@1002 : Decimal);
    VAR
      LastEntryNo@1001 : Integer;
    BEGIN
      VendorLedgerEntry.FINDLAST;
      LastEntryNo := VendorLedgerEntry."Entry No.";
      InsertDetailedVendorLedgerEntry(LastEntryNo + 1,Amount);
      VendorLedgerEntry.INIT;
      VendorLedgerEntry."Entry No." := LastEntryNo + 1;
      VendorLedgerEntry."Posting Date" := WORKDATE;
      VendorLedgerEntry."Vendor No." := VendorNo;
      VendorLedgerEntry."Document No." := COPYSTR(CREATEGUID,1,20);
      VendorLedgerEntry.Open := TRUE;
      VendorLedgerEntry.INSERT;
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
    END;

    LOCAL PROCEDURE InsertDetailedCustLedgerEntry@4(CustLedgerEntryNo@1002 : Integer;Amount@1003 : Decimal);
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
      LastEntryNo@1001 : Integer;
    BEGIN
      DetailedCustLedgEntry.FINDLAST;
      LastEntryNo := DetailedCustLedgEntry."Entry No.";
      DetailedCustLedgEntry.INIT;
      DetailedCustLedgEntry."Entry No." := LastEntryNo + 1;
      DetailedCustLedgEntry."Cust. Ledger Entry No." := CustLedgerEntryNo;
      DetailedCustLedgEntry.Amount := Amount;
      DetailedCustLedgEntry."Amount (LCY)" := Amount;
      DetailedCustLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE InsertDetailedVendorLedgerEntry@11(VendorLedgerEntryNo@1002 : Integer;Amount@1003 : Decimal);
    VAR
      DetailedVendorLedgEntry@1000 : Record 380;
      LastEntryNo@1001 : Integer;
    BEGIN
      DetailedVendorLedgEntry.FINDLAST;
      LastEntryNo := DetailedVendorLedgEntry."Entry No.";
      DetailedVendorLedgEntry.INIT;
      DetailedVendorLedgEntry."Entry No." := LastEntryNo + 1;
      DetailedVendorLedgEntry."Vendor Ledger Entry No." := VendorLedgerEntryNo;
      DetailedVendorLedgEntry.Amount := Amount;
      DetailedVendorLedgEntry."Amount (LCY)" := Amount;
      DetailedVendorLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE InsertGenJnlLine@6(VAR GenJnlLine@1000 : Record 81;GenJnlBatch@1004 : Record 232;Amount@1002 : Decimal;Description@1003 : Text;PayerInfo@1001 : Text);
    VAR
      LastLineNo@1005 : Integer;
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      IF GenJnlLine.FINDLAST THEN
        LastLineNo := GenJnlLine."Line No.";

      GenJnlLine.INIT;
      GenJnlLine."Document No." := LibraryUtility.GenerateRandomCode(GenJnlLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line");
      GenJnlLine."Journal Template Name" := GenJnlBatch."Journal Template Name";
      GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
      GenJnlLine."Line No." := LastLineNo + 10000;
      GenJnlLine.Description :=
        COPYSTR(Description,1,LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Line",GenJnlLine.FIELDNO(Description)));
      GenJnlLine."Payer Information" :=
        COPYSTR(PayerInfo,1,LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Line",GenJnlLine.FIELDNO("Payer Information")));
      GenJnlLine."Posting Date" := WORKDATE;
      GenJnlLine.Amount := Amount;
      GenJnlLine."Amount (LCY)" := Amount;
      GenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE InsertGenJnlBatch@8(VAR GenJnlBatch@1000 : Record 232);
    BEGIN
      GenJnlBatch.INIT;
      GenJnlBatch."Journal Template Name" := InsertGenJnlTemplate;
      GenJnlBatch.Name :=
        LibraryUtility.GenerateRandomCode(GenJnlBatch.FIELDNO(Name),DATABASE::"Gen. Journal Batch");
      GenJnlBatch.INSERT;
    END;

    LOCAL PROCEDURE InsertGenJnlTemplate@18() : Code[10];
    VAR
      GenJnlTemplate@1000 : Record 80;
    BEGIN
      GenJnlTemplate.INIT;
      GenJnlTemplate.Name :=
        LibraryUtility.GenerateRandomCode(GenJnlTemplate.FIELDNO(Name),DATABASE::"Gen. Journal Template");
      GenJnlTemplate.INSERT;
      EXIT(GenJnlTemplate.Name);
    END;

    LOCAL PROCEDURE InsertCustomer@9(VAR Customer@1001 : Record 18);
    BEGIN
      Customer.INIT;
      Customer."No." := LibraryUtility.GenerateRandomCode(Customer.FIELDNO("No."),DATABASE::Customer);
      Customer.Name := COPYSTR(CREATEGUID,1,50);
      Customer."Payment Terms Code" := InsertPaymentTerms;
      Customer."Payment Method Code" := InsertPaymentMethod;
      Customer.INSERT;
    END;

    LOCAL PROCEDURE InsertVendor@12(VAR Vendor@1001 : Record 23);
    BEGIN
      Vendor.INIT;
      Vendor."No." := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("No."),DATABASE::Vendor);
      Vendor.Name := COPYSTR(CREATEGUID,1,50);
      Vendor."Payment Terms Code" := InsertPaymentTerms;
      Vendor."Payment Method Code" := InsertPaymentMethod;
      Vendor.INSERT;
    END;

    LOCAL PROCEDURE InsertPaymentTerms@19() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      PaymentTerms.INIT;
      PaymentTerms.Code := LibraryUtility.GenerateRandomCode(PaymentTerms.FIELDNO(Code),DATABASE::"Payment Terms");
      PaymentTerms.INSERT;
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE InsertPaymentMethod@1() : Code[10];
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      PaymentMethod.INIT;
      PaymentMethod.Code := LibraryUtility.GenerateRandomCode(PaymentMethod.FIELDNO(Code),DATABASE::"Payment Method");
      PaymentMethod.INSERT;
      EXIT(PaymentMethod.Code);
    END;

    LOCAL PROCEDURE InsertAccountMapping@23(VAR TextToAccMapping@1000 : Record 1251;DebitAccNo@1001 : Code[20];CreditAccNo@1002 : Code[20];SourceType@1003 : Option;SourceNo@1004 : Code[20]);
    VAR
      LastLineNo@1005 : Integer;
    BEGIN
      WITH TextToAccMapping DO BEGIN
        IF FINDLAST THEN
          LastLineNo := "Line No.";

        INIT;
        "Line No." := LastLineNo + 1;
        "Mapping Text" := COPYSTR(CREATEGUID,1,50);
        "Debit Acc. No." := DebitAccNo;
        "Credit Acc. No." := CreditAccNo;
        "Bal. Source Type" := SourceType;
        "Bal. Source No." := SourceNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertGLAccount@24(VAR GLAccount@1000 : Record 15);
    BEGIN
      GLAccount.INIT;
      GLAccount."No." := LibraryUtility.GenerateRandomCode(GLAccount.FIELDNO("No."),DATABASE::"G/L Account");
      GLAccount.INSERT;
    END;

    [Normal]
    LOCAL PROCEDURE CloseExistingEntries@1063();
    VAR
      CustLedgerEntry@1060 : Record 21;
      VendorLedgerEntry@1061 : Record 25;
    BEGIN
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.MODIFYALL(Open,FALSE);
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      VendorLedgerEntry.MODIFYALL(Open,FALSE);
    END;

    LOCAL PROCEDURE SetupMappingToGL@22(VAR GenJnlLine@1000 : Record 81;VAR TextToAccMapping@1004 : Record 1251);
    VAR
      DebitGLAccount@1003 : Record 15;
      CreditGLAccount@1002 : Record 15;
      GenJnlBatch@1001 : Record 232;
    BEGIN
      InsertGLAccount(DebitGLAccount);
      InsertGLAccount(CreditGLAccount);
      InsertAccountMapping(TextToAccMapping,DebitGLAccount."No.",CreditGLAccount."No.",
        TextToAccMapping."Bal. Source Type"::"G/L Account",'');
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,LibraryRandom.RandDec(100,2),TextToAccMapping."Mapping Text",'');
    END;

    LOCAL PROCEDURE SetupMappingToCustomer@25(VAR GenJnlLine@1000 : Record 81;VAR TextToAccMapping@1006 : Record 1251);
    VAR
      DebitGLAccount@1003 : Record 15;
      CreditGLAccount@1002 : Record 15;
      GenJnlBatch@1001 : Record 232;
      Customer@1005 : Record 18;
    BEGIN
      InsertGLAccount(DebitGLAccount);
      InsertGLAccount(CreditGLAccount);
      InsertCustomer(Customer);
      InsertAccountMapping(TextToAccMapping,DebitGLAccount."No.",CreditGLAccount."No.",
        TextToAccMapping."Bal. Source Type"::Customer,Customer."No.");
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,LibraryRandom.RandDec(100,2),TextToAccMapping."Mapping Text",'');
    END;

    LOCAL PROCEDURE SetupMappingToVendor@33(VAR GenJnlLine@1000 : Record 81;VAR TextToAccMapping@1006 : Record 1251);
    VAR
      DebitGLAccount@1003 : Record 15;
      CreditGLAccount@1002 : Record 15;
      GenJnlBatch@1001 : Record 232;
      Vendor@1005 : Record 23;
    BEGIN
      InsertGLAccount(DebitGLAccount);
      InsertGLAccount(CreditGLAccount);
      InsertVendor(Vendor);
      InsertAccountMapping(TextToAccMapping,DebitGLAccount."No.",CreditGLAccount."No.",
        TextToAccMapping."Bal. Source Type"::Vendor,Vendor."No.");
      InsertGenJnlBatch(GenJnlBatch);
      InsertGenJnlLine(GenJnlLine,GenJnlBatch,LibraryRandom.RandDec(100,2),TextToAccMapping."Mapping Text",'');
    END;

    LOCAL PROCEDURE FindInvoiceLineFromPayment@27(VAR GenJnlLine@1000 : Record 81;DocType@1001 : Option);
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine.SETRANGE("Document Type",DocType);
      GenJnlLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyGenJnlLine@7(VAR GenJnlLine@1000 : Record 81;DocNo@1002 : Code[50];AccountType@1003 : Option;AccountNo@1004 : Code[20];Applied@1001 : Boolean);
    BEGIN
      GenJnlLine.FIND;
      GenJnlLine.TESTFIELD("Applies-to ID",DocNo);
      GenJnlLine.TESTFIELD("Account Type",AccountType);
      GenJnlLine.TESTFIELD("Account No.",AccountNo);
      GenJnlLine.TESTFIELD("Applied Automatically",Applied);
    END;

    LOCAL PROCEDURE VerifyAppliedInvGenJnlLine@29(VAR GenJnlLine@1000 : Record 81;AppliesToDocType@1005 : Option;AppliesToDocNo@1002 : Code[50];AccountType@1003 : Option;AccountNo@1004 : Code[20];BalAccountNo@1001 : Code[20]);
    BEGIN
      GenJnlLine.FIND;
      GenJnlLine.TESTFIELD("Account Type",AccountType);
      GenJnlLine.TESTFIELD("Account No.",AccountNo);
      GenJnlLine.TESTFIELD("Applies-to Doc. Type",AppliesToDocType);
      GenJnlLine.TESTFIELD("Applies-to Doc. No.",AppliesToDocNo);
      GenJnlLine.TESTFIELD("Bal. Account Type",GenJnlLine."Bal. Account Type"::"G/L Account");
      GenJnlLine.TESTFIELD("Bal. Account No.",BalAccountNo);
      GenJnlLine.TESTFIELD("Applied Automatically",TRUE);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@17(Msg@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [General Journal] [Match] [UT]
    }
    END.
  }
}

