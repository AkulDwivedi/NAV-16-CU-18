OBJECT Codeunit 134252 Match Bank Reconciliation - UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryVariableStorage@1004 : Codeunit 131004;
      MatchSummaryMsg@1005 : TextConst 'ENU=%1 reconciliation lines out of %2 are matched.';
      WrongValueOfFieldErr@1006 : TextConst 'ENU=Wrong value of field.';

    [Test]
    [HandlerFunctions(MatchSummaryMsgHandler)]
    PROCEDURE OneBankEntryMoreRecLinesFullMatch@7();
    VAR
      BankAccReconciliation@1009 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1010 : Integer;
      ExpectedMatchedEntryNo@1001 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      LibraryVariableStorage.Enqueue(1);
      LibraryVariableStorage.Enqueue(4);
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesAmtVsDesc@30();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesAmtVsDocNo@32();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesDocNoVsDesc@28();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,DocumentNo,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesNoDate@11();
    VAR
      BankAccReconciliation@1009 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1010 : Integer;
      ExpectedMatchedEntryNo@1001 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,0D,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MatchRecLinesReqPageHandler,MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesDateRange@2();
    VAR
      BankAccReconciliation@1011 : Record 273;
      MatchBankEntries@1010 : Report 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      DateRange@1009 : Integer;
      ExpectedMatchedLineNo@1012 : Integer;
      ExpectedMatchedEntryNo@1000 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      DateRange := LibraryRandom.RandIntInRange(2,10);

      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,
          PostingDate - LibraryRandom.RandInt(DateRange),Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate + DateRange + LibraryRandom.RandInt(10),Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      LibraryVariableStorage.Enqueue(DateRange);
      COMMIT;
      MatchBankEntries.USEREQUESTPAGE(TRUE);
      MatchBankEntries.SETTABLEVIEW(BankAccReconciliation);
      REPORT.RUN(REPORT::"Match Bank Entries",TRUE,FALSE,BankAccReconciliation);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MatchRecLinesReqPageHandler,MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesDateVsRange@10();
    VAR
      BankAccReconciliation@1011 : Record 273;
      MatchBankEntries@1010 : Report 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      DateRange@1009 : Integer;
      ExpectedMatchedLineNo@1012 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      DateRange := LibraryRandom.RandIntInRange(2,10);

      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      CreateBankAccRecLine(BankAccReconciliation,
        PostingDate + LibraryRandom.RandInt(DateRange),Description,'',Amount);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,WORKDATE,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      LibraryVariableStorage.Enqueue(DateRange);
      COMMIT;
      MatchBankEntries.USEREQUESTPAGE(TRUE);
      MatchBankEntries.SETTABLEVIEW(BankAccReconciliation);
      REPORT.RUN(REPORT::"Match Bank Entries",TRUE,FALSE,BankAccReconciliation);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesAmtVsDescDesc2@20();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,'',DocumentNo,Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesAmtVsDocNoDesc2@17();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,'','',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,'',DocumentNo,Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesDocNoVsDescDesc2@16();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,'',DocumentNo,Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OneBankEntryMoreRecLinesDescVsDesc2@23();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1008 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,'',DocumentNo,Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MoreBankEntriesOneRecLineFullMatch@37();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1011 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccLedgerEntry(BankAccountNo,WORKDATE,DocumentNo,'',Amount,'');
      CreateBankAccLedgerEntry(BankAccountNo,WORKDATE,'WRONG DOC NO','',Amount,'');
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2),Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MoreBankEntriesOneRecLineAmtVsDescription@43();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1011 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2),Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MoreBankEntriesOneRecLineAmtVsDocNo@44();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1011 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,'WRONG DOC NO','',Amount,'');
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount - LibraryRandom.RandDec(100,2),'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MoreBankEntriesOneRecLineDocNoVsDescription@19();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1000 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,'WRONG DOC NO','',Amount,Description);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE MoreBankEntriesOneRecLineDocNoVsExtDocNo@6();
    VAR
      BankAccReconciliation@1010 : Record 273;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1009 : Integer;
      ExpectedMatchedEntryNo@1000 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,'WRONG DOC NO',DocumentNo,Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,DocumentNo,'',Amount);

      // Exercise.
      BankAccReconciliation.MatchSingle(0);

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    [HandlerFunctions(MatchRecLinesReqPageHandler,MessageHandler)]
    PROCEDURE MultipleBankRec@14();
    VAR
      BankAccReconciliation@1011 : Record 273;
      BankAccReconciliation1@1008 : Record 273;
      BankAccReconciliationPage@1009 : TestPage 379;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1012 : Integer;
      ExpectedMatchedEntryNo@1000 : Integer;
      AdditionalLineNo@1001 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      ExpectedMatchedEntryNo := CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,'');
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,
          PostingDate,Description,'',Amount);
      CreateBankAccRec(BankAccReconciliation1,BankAccountNo,
        LibraryUtility.GenerateRandomCode(BankAccReconciliation1.FIELDNO("Statement No."),DATABASE::"Bank Acc. Reconciliation"));
      AdditionalLineNo := CreateBankAccRecLine(BankAccReconciliation1,PostingDate,Description,'',Amount);

      // Exercise.
      LibraryVariableStorage.Enqueue(0);
      COMMIT;
      BankAccReconciliationPage.OPENEDIT;
      BankAccReconciliationPage.GOTORECORD(BankAccReconciliation);
      BankAccReconciliationPage.MatchAutomatically.INVOKE;

      // Verify.
      VerifyOneToOneMatch(BankAccReconciliation,ExpectedMatchedLineNo,ExpectedMatchedEntryNo,Amount);
      ASSERTERROR VerifyOneToOneMatch(BankAccReconciliation1,AdditionalLineNo,ExpectedMatchedEntryNo,Amount);
    END;

    [Test]
    PROCEDURE ManyToOneNotSupported@4();
    VAR
      TempBankAccReconciliationLine@1008 : TEMPORARY Record 274;
      TempBankAccountLedgerEntry@1011 : TEMPORARY Record 271;
      BankAccReconciliation@1000 : Record 273;
      MatchBankRecLines@1009 : Codeunit 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1010 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);
      CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',Amount);

      // Exercise.
      AddBankRecLinesToTemp(TempBankAccReconciliationLine,BankAccReconciliation);
      AddBankEntriesToTemp(TempBankAccountLedgerEntry,BankAccountNo);
      MatchBankRecLines.MatchManually(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,ExpectedMatchedLineNo,1,Amount);
    END;

    [Test]
    PROCEDURE OneToManyPartialBRL@18();
    VAR
      TempBankAccReconciliationLine@1008 : TEMPORARY Record 274;
      TempBankAccountLedgerEntry@1011 : TEMPORARY Record 271;
      BankAccReconciliation@1000 : Record 273;
      MatchBankRecLines@1009 : Codeunit 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1001 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',
          2 * Amount - LibraryRandom.RandDec(100,2));

      // Exercise.
      AddBankRecLinesToTemp(TempBankAccReconciliationLine,BankAccReconciliation);
      AddBankEntriesToTemp(TempBankAccountLedgerEntry,BankAccountNo);
      MatchBankRecLines.MatchManually(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,ExpectedMatchedLineNo,2,2 * Amount);
    END;

    [Test]
    PROCEDURE OneToManyPartialBLE@34();
    VAR
      TempBankAccReconciliationLine@1008 : TEMPORARY Record 274;
      TempBankAccountLedgerEntry@1011 : TEMPORARY Record 271;
      BankAccReconciliation@1000 : Record 273;
      MatchBankRecLines@1009 : Codeunit 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      Delta@1060 : Decimal;
      ExpectedMatchedLineNo@1001 : Integer;
    BEGIN
      Initialize;

      // Setup.
      Delta := LibraryRandom.RandDec(100,2);
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount - Delta,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',2 * Amount);

      // Exercise.
      AddBankRecLinesToTemp(TempBankAccReconciliationLine,BankAccReconciliation);
      AddBankEntriesToTemp(TempBankAccountLedgerEntry,BankAccountNo);
      MatchBankRecLines.MatchManually(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,ExpectedMatchedLineNo,2,2 * Amount - Delta);
    END;

    [Test]
    PROCEDURE RemoveMatchOneToMany@36();
    VAR
      TempBankAccReconciliationLine@1008 : TEMPORARY Record 274;
      TempBankAccountLedgerEntry@1011 : TEMPORARY Record 271;
      BankAccReconciliation@1000 : Record 273;
      MatchBankRecLines@1009 : Codeunit 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1010 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',2 * Amount);
      AddBankRecLinesToTemp(TempBankAccReconciliationLine,BankAccReconciliation);
      AddBankEntriesToTemp(TempBankAccountLedgerEntry,BankAccountNo);
      MatchBankRecLines.MatchManually(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Exercise.
      MatchBankRecLines.RemoveMatch(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,ExpectedMatchedLineNo,0,0);
    END;

    [Test]
    PROCEDURE RemoveMatchFromBLE@39();
    VAR
      TempBankAccReconciliationLine@1008 : TEMPORARY Record 274;
      TempBankAccountLedgerEntry@1011 : TEMPORARY Record 271;
      BankAccReconciliation@1000 : Record 273;
      MatchBankRecLines@1009 : Codeunit 1252;
      PostingDate@1007 : Date;
      BankAccountNo@1003 : Code[20];
      StatementNo@1004 : Code[20];
      DocumentNo@1005 : Code[20];
      Description@1006 : Text[50];
      Amount@1002 : Decimal;
      ExpectedMatchedLineNo@1010 : Integer;
    BEGIN
      Initialize;

      // Setup.
      CreateInputData(PostingDate,BankAccountNo,StatementNo,DocumentNo,Description,Amount);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccLedgerEntry(BankAccountNo,PostingDate,DocumentNo,'',Amount,Description);
      CreateBankAccRec(BankAccReconciliation,BankAccountNo,StatementNo);
      ExpectedMatchedLineNo := CreateBankAccRecLine(BankAccReconciliation,PostingDate,Description,'',2 * Amount);
      AddBankRecLinesToTemp(TempBankAccReconciliationLine,BankAccReconciliation);
      AddBankEntriesToTemp(TempBankAccountLedgerEntry,BankAccountNo);
      MatchBankRecLines.MatchManually(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Exercise.
      TempBankAccReconciliationLine.DELETEALL;
      TempBankAccountLedgerEntry.FINDLAST;
      TempBankAccountLedgerEntry.DELETE;
      MatchBankRecLines.RemoveMatch(TempBankAccReconciliationLine,TempBankAccountLedgerEntry);

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,ExpectedMatchedLineNo,1,Amount);
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE UTFieldsBankAccReconciliationLine@25();
    VAR
      BankAccReconciliationLine@1002 : Record 274;
      FirstValue@1001 : Text[250];
      SecondValue@1000 : Text[100];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 375536] Fields "Related-Party Name" and "Related-Party Bank Acc. No." of "Bank Acc. Reconciliation Line" should have length of 250 and 100 respectively
      Initialize;

      // [GIVEN] Record of "Bank Acc. Reconciliation Line" - "BACL"
      BankAccReconciliationLine.INIT;
      // [GIVEN] Length of string "X" = 250
      FirstValue := PADSTR('',250,'0');
      // [GIVEN] Length of string "Y" = 100
      SecondValue := PADSTR('',100,'0');

      // [WHEN] Validate "BACL"."Related-Party Name" with string "X", "BACL"."Related-Party Bank Acc. No." with string "Y"
      BankAccReconciliationLine.VALIDATE("Related-Party Name",FirstValue);
      BankAccReconciliationLine.VALIDATE("Related-Party Bank Acc. No.",SecondValue);

      // [THEN] Value of "BACL"."Related-Party Name" = "X"
      Assert.AreEqual(FirstValue,BankAccReconciliationLine."Related-Party Name",WrongValueOfFieldErr);
      // [THEN] Value of "BACL"."Related-Party Bank Acc. No." = "Y"
      Assert.AreEqual(SecondValue,BankAccReconciliationLine."Related-Party Bank Acc. No.",WrongValueOfFieldErr);
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE UTFieldsPostedPaymentReconLine@29();
    VAR
      PostedPaymentReconLine@1000 : Record 1296;
      StringValue@1001 : Text[250];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 375536] Field "Related-Party Name" of "Posted Payment Recon. Line" should has length of 250
      Initialize;

      // [GIVEN] Record of "Posted Payment Recon. Line" - "PPRL"
      PostedPaymentReconLine.INIT;
      // [GIVEN] Length of string "X" = 250
      StringValue := PADSTR('',250,'0');

      // [WHEN] Validate "PPRL"."Related-Party Name" with string "X"
      PostedPaymentReconLine.VALIDATE("Related-Party Name",StringValue);

      // [THEN] Value of "PPRL"."Related-Party Name" = "X"
      Assert.AreEqual(StringValue,PostedPaymentReconLine."Related-Party Name",WrongValueOfFieldErr);
    END;

    [Test]
    PROCEDURE GenerateAppliesToID@26();
    VAR
      DummyBankAccReconciliationLine@1000 : Record 274;
    BEGIN
      // [SCENARIO 198751] "Applies-to ID" must be unique for each Bank Account Reconciliation Line
      WITH DummyBankAccReconciliationLine DO BEGIN
        "Statement No." := 'STATEMENT_0000012345';
        "Statement Line No." := 1234567890;
        Assert.AreEqual(
          'STATEMENT_0000012345-1234567890',
          GetAppliesToID,
          'Wrong BankAccReconciliationLine.GenerateAppliesToID() return result');
      END;
    END;

    LOCAL PROCEDURE Initialize@15();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE AddBankRecLinesToTemp@8(VAR TempBankAccReconciliationLine@1001 : TEMPORARY Record 274;BankAccReconciliation@1000 : Record 273);
    VAR
      BankAccReconciliationLine@1002 : Record 274;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      IF BankAccReconciliationLine.FINDSET THEN
        REPEAT
          TempBankAccReconciliationLine := BankAccReconciliationLine;
          TempBankAccReconciliationLine.INSERT;
        UNTIL BankAccReconciliationLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddBankEntriesToTemp@12(VAR TempBankAccLedgerEntry@1001 : TEMPORARY Record 271;BankAccountNo@1000 : Code[20]);
    VAR
      BankAccLedgerEntry@1002 : Record 271;
    BEGIN
      BankAccLedgerEntry.SETRANGE("Bank Account No.",BankAccountNo);
      IF BankAccLedgerEntry.FINDSET THEN
        REPEAT
          TempBankAccLedgerEntry := BankAccLedgerEntry;
          TempBankAccLedgerEntry.INSERT;
        UNTIL BankAccLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateInputData@24(VAR PostingDate@1005 : Date;VAR BankAccountNo@1004 : Code[20];VAR StatementNo@1003 : Code[20];VAR DocumentNo@1002 : Code[20];VAR Description@1001 : Text[50];VAR Amount@1000 : Decimal);
    VAR
      BankAccReconciliationLine@1006 : Record 274;
    BEGIN
      Amount := -LibraryRandom.RandDec(1000,2);
      PostingDate := WORKDATE + LibraryRandom.RandInt(10);
      BankAccountNo := LibraryUtility.GenerateRandomCode(BankAccReconciliationLine.FIELDNO("Bank Account No."),
          DATABASE::"Bank Acc. Reconciliation Line");
      StatementNo := LibraryUtility.GenerateRandomCode(BankAccReconciliationLine.FIELDNO("Statement No."),
          DATABASE::"Bank Acc. Reconciliation Line");
      DocumentNo := LibraryUtility.GenerateRandomCode(BankAccReconciliationLine.FIELDNO("Document No."),
          DATABASE::"Bank Acc. Reconciliation Line");
      Description := COPYSTR(CREATEGUID,1,50);
    END;

    LOCAL PROCEDURE CreateBankAccRec@13(VAR BankAccReconciliation@1000 : Record 273;BankAccountNo@1001 : Code[20];StatementNo@1002 : Code[20]);
    BEGIN
      BankAccReconciliation.INIT;
      BankAccReconciliation."Bank Account No." := BankAccountNo;
      BankAccReconciliation."Statement No." := StatementNo;
      BankAccReconciliation."Statement Date" := WORKDATE;
      BankAccReconciliation.INSERT;
    END;

    LOCAL PROCEDURE CreateBankAccRecLine@1(VAR BankAccReconciliation@1000 : Record 273;TransactionDate@1005 : Date;Description@1004 : Text[50];PayerInfo@1001 : Text[50];Amount@1006 : Decimal) : Integer;
    VAR
      BankAccReconciliationLine@1007 : Record 274;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      IF BankAccReconciliationLine.FINDLAST THEN;

      BankAccReconciliationLine.INIT;
      BankAccReconciliationLine."Bank Account No." := BankAccReconciliation."Bank Account No.";
      BankAccReconciliationLine."Statement Type" := BankAccReconciliation."Statement Type";
      BankAccReconciliationLine."Statement No." := BankAccReconciliation."Statement No.";
      BankAccReconciliationLine."Statement Line No." += 10000;
      BankAccReconciliationLine."Transaction Date" := TransactionDate;
      BankAccReconciliationLine.Description := Description;
      BankAccReconciliationLine."Related-Party Name" := PayerInfo;
      BankAccReconciliationLine."Statement Amount" := Amount;
      BankAccReconciliationLine.Difference := Amount;
      BankAccReconciliationLine.Type := BankAccReconciliationLine.Type::"Bank Account Ledger Entry";
      BankAccReconciliationLine.INSERT;

      EXIT(BankAccReconciliationLine."Statement Line No.");
    END;

    LOCAL PROCEDURE CreateBankAccLedgerEntry@5(BankAccountNo@1001 : Code[20];PostingDate@1005 : Date;DocumentNo@1004 : Code[20];ExtDocNo@1007 : Code[35];Amount@1002 : Decimal;Description@1006 : Text[50]) : Integer;
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
    BEGIN
      IF BankAccountLedgerEntry.FINDLAST THEN;

      BankAccountLedgerEntry.INIT;
      BankAccountLedgerEntry."Entry No." += 1;
      BankAccountLedgerEntry."Bank Account No." := BankAccountNo;
      BankAccountLedgerEntry."Posting Date" := PostingDate;
      BankAccountLedgerEntry."Document No." := DocumentNo;
      BankAccountLedgerEntry.Amount := Amount;
      BankAccountLedgerEntry."Remaining Amount" := Amount;
      BankAccountLedgerEntry.Description := Description;
      BankAccountLedgerEntry."External Document No." := ExtDocNo;
      BankAccountLedgerEntry.Open := TRUE;
      BankAccountLedgerEntry."Statement Status" := BankAccountLedgerEntry."Statement Status"::Open;
      BankAccountLedgerEntry.INSERT;

      EXIT(BankAccountLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE VerifyOneToOneMatch@27(BankAccReconciliation@1001 : Record 273;ExpRecLineNo@1004 : Integer;ExpBankEntryNo@1005 : Integer;ExpAmount@1002 : Decimal);
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
      BankAccReconciliationLine@1003 : Record 274;
    BEGIN
      BankAccReconciliationLine.GET(
        BankAccReconciliation."Statement Type",
        BankAccReconciliation."Bank Account No.",
        BankAccReconciliation."Statement No.",
        ExpRecLineNo);
      BankAccountLedgerEntry.GET(ExpBankEntryNo);

      Assert.AreEqual(ExpAmount,BankAccReconciliationLine."Applied Amount",'Wrong applied amt.');
      Assert.AreEqual(1,BankAccReconciliationLine."Applied Entries",'Wrong no. of applied entries.');
      Assert.AreEqual(ExpAmount,BankAccountLedgerEntry."Remaining Amount",'Wrong remaining amt.');
      Assert.AreEqual(BankAccReconciliation."Statement No.",BankAccountLedgerEntry."Statement No.",'Wrong statement no.');
      Assert.AreEqual(ExpRecLineNo,BankAccountLedgerEntry."Statement Line No.",
        'Wrong statement line no.');

      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.SETFILTER("Applied Amount",'<>%1',0);
      Assert.AreEqual(1,BankAccReconciliationLine.COUNT,'Too many matches.');

      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccountLedgerEntry.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccountLedgerEntry.SETRANGE("Statement Line No.",ExpRecLineNo);
      Assert.AreEqual(1,BankAccountLedgerEntry.COUNT,'Too many matches.');
    END;

    LOCAL PROCEDURE VerifyOneToManyMatch@21(BankAccReconciliation@1001 : Record 273;ExpRecLineNo@1004 : Integer;ExpBankEntryMatches@1005 : Integer;ExpAmount@1002 : Decimal);
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
      BankAccReconciliationLine@1003 : Record 274;
    BEGIN
      BankAccReconciliationLine.GET(
        BankAccReconciliation."Statement Type",
        BankAccReconciliation."Bank Account No.",
        BankAccReconciliation."Statement No.",
        ExpRecLineNo);
      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccountLedgerEntry.SETRANGE("Statement Status",BankAccountLedgerEntry."Statement Status"::"Bank Acc. Entry Applied");
      BankAccountLedgerEntry.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccountLedgerEntry.SETRANGE("Statement Line No.",ExpRecLineNo);
      BankAccountLedgerEntry.SETRANGE(Open,TRUE);
      Assert.AreEqual(ExpBankEntryMatches,BankAccountLedgerEntry.COUNT,'Wrong no of applied entries.');
      Assert.AreEqual(ExpAmount,BankAccReconciliationLine."Applied Amount",'Wrong applied amt.');
      Assert.AreEqual(ExpBankEntryMatches,BankAccReconciliationLine."Applied Entries",'Wrong no. of applied entries.');
    END;

    [RequestPageHandler]
    PROCEDURE MatchRecLinesReqPageHandler@9(VAR MatchBankAccReconciliation@1001 : TestRequestPage 1252);
    VAR
      DateRange@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DateRange);
      MatchBankAccReconciliation.DateRange.SETVALUE(DateRange);
      MatchBankAccReconciliation.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@3(Message@1000 : Text[1024]);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE MatchSummaryMsgHandler@22(Message@1000 : Text[1024]);
    VAR
      MatchedLinesCount@1003 : Variant;
      TotalLinesCount@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(MatchedLinesCount);
      LibraryVariableStorage.Dequeue(TotalLinesCount);
      Assert.IsTrue(STRPOS(Message,STRSUBSTNO(MatchSummaryMsg,MatchedLinesCount,TotalLinesCount)) > 0,Message);
    END;

    BEGIN
    {
      // [FEATURE] [Bank Reconciliation] [Match] [UT]
    }
    END.
  }
}

