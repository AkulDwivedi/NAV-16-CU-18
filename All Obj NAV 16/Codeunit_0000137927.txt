OBJECT Codeunit 137927 SCM Assembly Copy
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempAsmLine@1014 : TEMPORARY Record 901;
      LibrarySales@1002 : Codeunit 130509;
      LibraryWarehouse@1004 : Codeunit 132204;
      AssemblyItemNo@1000 : ARRAY [4] OF Code[20];
      SellToCustomerNo@1001 : Code[20];
      ResourceNo@1023 : Code[20];
      SalesShipmentNo@1015 : Code[20];
      SalesInvoiceNo@1016 : Code[20];
      UsedVariantCode@1026 : ARRAY [4] OF Code[10];
      UsedLocationCode@1027 : Code[10];
      AssemblyTemplate@1012 : Code[10];
      AssemblyBatch@1007 : Code[10];
      NoSeriesName@1008 : Code[10];
      OldSalesOrderNoSeriesName@1010 : Code[10];
      OldInvoiceNoSeriesName@1011 : Code[10];
      OldStockoutWarning@1017 : Boolean;
      OldAssemblyOrderNoSeries@1019 : Code[10];
      OldCreditWarning@1025 : Integer;
      ThisObj@1021 : Code[9];
      StockoutWarningSet@1024 : Boolean;
      HeaderType@1030 : 'Quote,Order,BlanketOrder';
      BasicDataInitialized@1006 : Boolean;
      SetupDataInitialized@1035 : Boolean;
      Initialized@1003 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@10();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      Initialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE QuoteToQuote@46();
    BEGIN
      Initialize;
      // Test 1
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::Quote,HeaderType::Quote);
    END;

    [Test]
    PROCEDURE QuoteToOrder@48();
    BEGIN
      Initialize;
      // Test 2
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::Quote,HeaderType::Order);
    END;

    [Test]
    PROCEDURE QuoteToBlanketOrder@50();
    BEGIN
      Initialize;
      // Test 3
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::Quote,HeaderType::BlanketOrder);
    END;

    [Test]
    PROCEDURE OrderToQuote@37();
    BEGIN
      Initialize;
      // Test 4
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::Order,HeaderType::Quote);
    END;

    [Test]
    PROCEDURE OrderToOrder@33();
    BEGIN
      Initialize;
      // Test 5
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::Order,HeaderType::Order);
    END;

    [Test]
    PROCEDURE OrderToBlanketOrder@77();
    BEGIN
      Initialize;
      // Test 6
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::Order,HeaderType::BlanketOrder);
    END;

    [Test]
    PROCEDURE BlanketOrderToQuote@53();
    BEGIN
      Initialize;
      // Test 7
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::BlanketOrder,HeaderType::Quote);
    END;

    [Test]
    PROCEDURE BlanketOrderToOrder@76();
    BEGIN
      Initialize;
      // Test 8
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::BlanketOrder,HeaderType::Order);
    END;

    [Test]
    PROCEDURE BlanketOrderToBlanketOrder@55();
    BEGIN
      Initialize;
      // Test 9
      CheckCopyingBtwNonPostedSalesDocs(HeaderType::BlanketOrder,HeaderType::BlanketOrder);
    END;

    [Test]
    PROCEDURE ShipmentToQuote@60();
    VAR
      ToSalesHeader@1000 : Record 36;
      CopyDocumentMgt@1001 : Codeunit 6620;
      ToDocNo@1003 : Code[20];
      FromDocNo@1002 : Code[20];
    BEGIN
      Initialize;
      // Test 10
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,4);
      ToDocNo := CreateAssemblySalesDocument(0,HeaderType::Quote,TRUE);
      ToSalesHeader.GET(ToSalesHeader."Document Type"::Quote,ToDocNo);
      CopyDocumentMgt.CopySalesDoc(6,SalesShipmentNo,ToSalesHeader); // 6 = from Sales Shipment
      CompareAsmLines(HeaderType::Quote,ToDocNo,TRUE,HeaderType::Quote,SalesShipmentNo);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShipmentToOrder@35();
    VAR
      ToDocNo@1000 : Code[20];
    BEGIN
      Initialize;
      // Test 11
      CheckInit;
      PostOrderAsShip(CreateAssemblySalesDocument(4,HeaderType::Order,TRUE),4);
      ToDocNo := CreateAssemblySalesDocument(0,HeaderType::Order,TRUE);
      CopyShipmentLinesToSalesOrder(ToDocNo);
      CompareAsmLines(HeaderType::Order,ToDocNo,TRUE,HeaderType::Order,SalesShipmentNo);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShipmentToBlanketOrder@54();
    VAR
      ToSalesHeader@1000 : Record 36;
      CopyDocumentMgt@1001 : Codeunit 6620;
      EmptyBlanketOrderNo@1003 : Code[20];
      FromDocNo@1004 : Code[20];
    BEGIN
      Initialize;
      // Test 12
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,4);
      EmptyBlanketOrderNo := CreateAssemblySalesDocument(0,HeaderType::BlanketOrder,TRUE);
      ToSalesHeader.GET(ToSalesHeader."Document Type"::"Blanket Order",EmptyBlanketOrderNo);
      CopyDocumentMgt.CopySalesDoc(6,SalesShipmentNo,ToSalesHeader); // 6 = from Sales Shipment
      CompareAsmLines(HeaderType::BlanketOrder,EmptyBlanketOrderNo,TRUE,HeaderType::Quote,SalesShipmentNo);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE InvoiceToQuote1Shipment@65();
    VAR
      ToSalesHeader@1001 : Record 36;
      CopyDocumentMgt@1000 : Codeunit 6620;
      EmptyQuoteNo@1002 : Code[20];
      FromDocNo@1003 : Code[20];
    BEGIN
      Initialize;
      // Test 13
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,4);
      PostOrderAsInvoice(FromDocNo);
      EmptyQuoteNo := CreateAssemblySalesDocument(4,HeaderType::Quote,TRUE);
      ToSalesHeader.GET(ToSalesHeader."Document Type"::Quote,EmptyQuoteNo);
      CopyDocumentMgt.CopySalesDoc(7,SalesInvoiceNo,ToSalesHeader); // 7 -> From Posted Invoice
      CompareAsmLines(HeaderType::Quote,EmptyQuoteNo,TRUE,HeaderType::Quote,SalesShipmentNo);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE InvoiceToQuote2Shipments@63();
    VAR
      ToDocNo@1000 : Code[20];
      FromDocNo@1001 : Code[20];
    BEGIN
      Initialize;
      // Test 14
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,3);
      PostOrderAsShip(FromDocNo,1);
      PostOrderAsInvoice(FromDocNo);
      ToDocNo := CreateAssemblySalesDocument(0,HeaderType::Quote,TRUE);
      ASSERTERROR CopyInvoiceLinesToSalesQuote(ToDocNo);  // Error expected
      CleanSetupData;
    END;

    [Test]
    PROCEDURE InvoiceToOrder1Shipment@38();
    VAR
      ToDocNo@1000 : Code[20];
      FromDocNo@1001 : Code[20];
    BEGIN
      Initialize;
      // Test 15
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,4);
      PostOrderAsInvoice(FromDocNo);
      ToDocNo := CreateAssemblySalesDocument(0,HeaderType::Order,TRUE);
      CopyInvoiceLinesToSalesOrder(ToDocNo);
      CompareAsmLines(HeaderType::Order,ToDocNo,TRUE,HeaderType::Order,SalesShipmentNo); // Lines are taken from shipment, not invoice
      CleanSetupData;
    END;

    [Test]
    PROCEDURE InvoiceToOrder2Shipments@40();
    VAR
      ToDocNo@1000 : Code[20];
      FromDocNo@1001 : Code[20];
    BEGIN
      Initialize;
      // Test 16
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,3);
      PostOrderAsShip(FromDocNo,1);
      PostOrderAsInvoice(FromDocNo);
      ToDocNo := CreateAssemblySalesDocument(0,HeaderType::Order,TRUE);
      ASSERTERROR CopyInvoiceLinesToSalesOrder(ToDocNo);  // Error expected
      CleanSetupData;
    END;

    [Test]
    PROCEDURE InvoiceToBlanketOrder1Shipment@66();
    VAR
      ToSalesHeader@1001 : Record 36;
      CopyDocumentMgt@1000 : Codeunit 6620;
      EmptyBlanketOrderNo@1002 : Code[20];
      FromDocNo@1003 : Code[20];
    BEGIN
      Initialize;
      // Test 17
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,4);
      PostOrderAsInvoice(FromDocNo);
      EmptyBlanketOrderNo := CreateAssemblySalesDocument(4,HeaderType::BlanketOrder,TRUE);
      ToSalesHeader.GET(ToSalesHeader."Document Type"::"Blanket Order",EmptyBlanketOrderNo);
      CopyDocumentMgt.CopySalesDoc(7,SalesInvoiceNo,ToSalesHeader); // 7 -> From Posted Invoice
      CompareAsmLines(HeaderType::BlanketOrder,EmptyBlanketOrderNo,TRUE,HeaderType::Quote,SalesShipmentNo);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE InvoiceToBlanketOrder2Shipmnts@64();
    VAR
      ToDocNo@1000 : Code[20];
      FromDocNo@1001 : Code[20];
    BEGIN
      Initialize;
      // Test 18
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,3);
      PostOrderAsShip(FromDocNo,1);
      PostOrderAsInvoice(FromDocNo);
      ToDocNo := CreateAssemblySalesDocument(0,HeaderType::BlanketOrder,TRUE);
      ASSERTERROR CopyInvoiceLinesToSalesBlOrder(ToDocNo);  // Error expected
      CleanSetupData;
    END;

    [Test]
    PROCEDURE AssemblyOrderToAssemblyOrder@42();
    VAR
      SalesOrderNo@1000 : Code[20];
      EmptyAssemblyOrderNo@1002 : Code[20];
      FullAssemblyOrderNo@1001 : Code[20];
    BEGIN
      Initialize;
      // Test 19
      CheckInit;
      SalesOrderNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      CollectAsmLinesFromNonPosted(HeaderType::Order,SalesOrderNo,FullAssemblyOrderNo);
      CreateAssemblyOrderHeader(EmptyAssemblyOrderNo);
      CopyAsmOrderToAsmOrder(FullAssemblyOrderNo,EmptyAssemblyOrderNo);
      CompareAsmOrderHeaders(EmptyAssemblyOrderNo);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE PostedAssemblyOrderToAssemblyOrder@45();
    VAR
      EmptyAssemblyOrderNo@1000 : Code[20];
      FromDocNo@1001 : Code[20];
      FullAssemblyOrderNo@1002 : Code[20];
    BEGIN
      Initialize;
      // Test 20
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,HeaderType::Order,TRUE);
      PostOrderAsShip(FromDocNo,4);
      CreateAssemblyOrderHeader(EmptyAssemblyOrderNo);
      CopyShipmentLinesToAsmHeader(EmptyAssemblyOrderNo);
      CollectAsmLinesFromShipment(SalesShipmentNo,FullAssemblyOrderNo);
      CompareAsmOrderHeaders(EmptyAssemblyOrderNo);
      CleanSetupData;
    END;

    LOCAL PROCEDURE CleanSetupData@8();
    VAR
      SalesSetup@1001 : Record 311;
      AssemblySetup@1002 : Record 905;
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      IF NOT SetupDataInitialized THEN
        EXIT;

      SalesSetup.GET;
      IF OldSalesOrderNoSeriesName <> '' THEN BEGIN
        SalesSetup.VALIDATE("Order Nos.",OldSalesOrderNoSeriesName);
        OldSalesOrderNoSeriesName := '';
      END;
      IF OldInvoiceNoSeriesName <> '' THEN BEGIN
        SalesSetup.VALIDATE("Posted Invoice Nos.",OldInvoiceNoSeriesName);
        OldInvoiceNoSeriesName := '';
      END;
      IF StockoutWarningSet THEN BEGIN
        SalesSetup.VALIDATE("Stockout Warning",OldStockoutWarning);
        StockoutWarningSet := FALSE;
      END;
      SalesSetup."Credit Warnings" := OldCreditWarning;
      SalesSetup.MODIFY;

      IF OldAssemblyOrderNoSeries <> '' THEN BEGIN
        AssemblySetup.GET;
        AssemblySetup."Assembly Order Nos." := OldAssemblyOrderNoSeries;
        AssemblySetup.MODIFY;
      END;

      IF ItemJournalBatch.GET(AssemblyTemplate,AssemblyBatch) THEN
        ItemJournalBatch.DELETE(TRUE);

      SetupDataInitialized := FALSE;
    END;

    LOCAL PROCEDURE CreateCustomer@1();
    BEGIN
      SellToCustomerNo := LibrarySales.CreateCustomerNo;
    END;

    LOCAL PROCEDURE CreateTestNoSeriesBackupData@5();
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLine@1001 : Record 309;
      SalesSetup@1004 : Record 311;
      AssemblySetup@1003 : Record 905;
    BEGIN
      // No. series
      NoSeriesName := 'ASMB__TEST';
      CLEAR(NoSeries);
      NoSeries.INIT;
      NoSeries.Code := NoSeriesName;
      NoSeries.Description := NoSeriesName;
      NoSeries."Default Nos." := TRUE;
      IF NoSeries.INSERT THEN BEGIN
        NoSeriesLine.INIT;
        NoSeriesLine."Series Code" := NoSeriesName;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := 'X00001';
        NoSeriesLine."Ending No." := 'X99999';
        NoSeriesLine."Increment-by No." := 1;
        NoSeriesLine.INSERT;
      END;
      // Setup data
      SalesSetup.GET;
      OldSalesOrderNoSeriesName := SalesSetup."Order Nos.";
      OldInvoiceNoSeriesName := SalesSetup."Posted Invoice Nos.";
      OldStockoutWarning := SalesSetup."Stockout Warning";
      StockoutWarningSet := TRUE;
      SalesSetup."Stockout Warning" := FALSE;
      OldCreditWarning := SalesSetup."Credit Warnings";
      SalesSetup."Credit Warnings" := SalesSetup."Credit Warnings"::"No Warning";
      SalesSetup."Order Nos." := NoSeriesName;
      SalesSetup."Posted Invoice Nos." := NoSeriesName;
      SalesSetup.MODIFY;

      AssemblySetup.GET;
      OldAssemblyOrderNoSeries := AssemblySetup."Assembly Order Nos.";
      AssemblySetup."Assembly Order Nos." := NoSeriesName;
      AssemblySetup.MODIFY;
    END;

    LOCAL PROCEDURE CreateAssemblyItem@2();
    VAR
      Item@1002 : Record 27;
      LibraryAssembly@1000 : Codeunit 132207;
      i@1001 : Integer;
    BEGIN
      LibraryAssembly.CreateItem(Item,0,3,'','');
      Item.VALIDATE("Assembly Policy",Item."Assembly Policy"::"Assemble-to-Order");
      Item.MODIFY;
      AssemblyItemNo[1] := Item."No.";
      CreateVariant(1);
      FOR i := 2 TO 4 DO BEGIN
        LibraryAssembly.CreateItem(Item,0,0,'','');
        AssemblyItemNo[i] := Item."No.";
        CreateVariant(i);
        CreateAssemblyComponent(AssemblyItemNo[1],AssemblyItemNo[i],i,i,1);
      END;
      CreateAssemblyComponent(AssemblyItemNo[1],'',0,5,0);         // Comment line
      CreateAssemblyComponent(AssemblyItemNo[1],ResourceNo,1,6,2); // Resource line
    END;

    LOCAL PROCEDURE CreateVariant@36(VariantNo@1000 : Integer);
    VAR
      ItemVariant@1001 : Record 5401;
    BEGIN
      UsedVariantCode[VariantNo] := 'TESTVAR_ ' + FORMAT(VariantNo);
      ItemVariant.INIT;
      ItemVariant."Item No." := AssemblyItemNo[VariantNo];
      ItemVariant.Code := UsedVariantCode[VariantNo];
      ItemVariant.Description := UsedVariantCode[VariantNo];
      ItemVariant.INSERT;
    END;

    LOCAL PROCEDURE CreateAssemblyComponent@3(ParentItemNo@1000 : Code[20];ChildNo@1001 : Code[20];Quantity@1002 : Decimal;Line@1005 : Integer;Type@1006 : ' ,Item,Resource');
    VAR
      BOMComponent@1004 : Record 90;
    BEGIN
      BOMComponent.INIT;
      BOMComponent."Parent Item No." := ParentItemNo;
      BOMComponent."Line No." := (Line - 1) * 10000;
      CASE Type OF
        Type::" ":
          BEGIN
            BOMComponent.Type := BOMComponent.Type::" ";
            BOMComponent.Description := 'Empty Line';
          END;
        Type::Item:
          BOMComponent.Type := BOMComponent.Type::Item;
        Type::Resource:
          BOMComponent.Type := BOMComponent.Type::Resource;
      END;
      IF Type <> Type::" " THEN BEGIN
        BOMComponent.VALIDATE("No.",ChildNo);
        BOMComponent.VALIDATE("Quantity per",Quantity);
        IF Line < 5 THEN
          BOMComponent.VALIDATE("Variant Code",UsedVariantCode[Line]);
      END;
      BOMComponent.INSERT(TRUE);
    END;

    LOCAL PROCEDURE GetResource@25();
    VAR
      Resource@1001 : Record 156;
      LibraryResource@1000 : Codeunit 130511;
    BEGIN
      LibraryResource.CreateResourceNew(Resource);
      ResourceNo := Resource."No.";
    END;

    LOCAL PROCEDURE ProvideAssemblyComponentSupply@12();
    VAR
      ItemJournalTemplate@1003 : Record 82;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1001 : Record 83;
      LibraryInventory@1000 : Codeunit 132201;
      i@1002 : Integer;
    BEGIN
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      AssemblyTemplate := ItemJournalTemplate.Name;
      CLEAR(ItemJournalBatch);
      ItemJournalBatch."Journal Template Name" := AssemblyTemplate;
      i := 1;
      WHILE ItemJournalBatch.GET(AssemblyTemplate,'B' + FORMAT(i)) DO
        i += 1;
      ItemJournalBatch.Name := 'B' + FORMAT(i);
      AssemblyBatch := ItemJournalBatch.Name;
      ItemJournalBatch.INSERT(TRUE);
      FOR i := 2 TO 4 DO BEGIN
        LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,AssemblyBatch,0,AssemblyItemNo[i],1000);
        ItemJournalLine.VALIDATE("Location Code",UsedLocationCode);
        ItemJournalLine.VALIDATE("Variant Code",UsedVariantCode[i]);
        ItemJournalLine.MODIFY;
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,AssemblyBatch);
    END;

    LOCAL PROCEDURE CopyShipmentLinesToSalesOrder@6(EmptySalesOrderNo@1005 : Code[20]);
    VAR
      FromSalesShipmentLine@1000 : Record 111;
      PostedAsmHeader@1003 : Record 910;
      ToSalesHeader@1004 : Record 36;
      Assert@1001 : Codeunit 130000;
      CopyDocumentMgt@1002 : Codeunit 6620;
    BEGIN
      FromSalesShipmentLine.SETRANGE("Document No.",SalesShipmentNo);
      FromSalesShipmentLine.SETRANGE(Type,FromSalesShipmentLine.Type::Item);
      FromSalesShipmentLine.FINDSET;
      REPEAT
        Assert.IsTrue(FromSalesShipmentLine.AsmToShipmentExists(PostedAsmHeader),
          STRSUBSTNO('%1: No Assembly orders exist for %2: Order %3 line %4',ThisObj,FromSalesShipmentLine.TABLECAPTION,
            FromSalesShipmentLine.FIELDCAPTION("Document No."),FromSalesShipmentLine.FIELDCAPTION("Line No.")));
      UNTIL FromSalesShipmentLine.NEXT = 0;
      ToSalesHeader.GET(ToSalesHeader."Document Type"::Order,EmptySalesOrderNo);
      CopyDocumentMgt.CopySalesDoc(6,SalesShipmentNo,ToSalesHeader); // 6 = from Sales Shipment
    END;

    LOCAL PROCEDURE CopyShipmentLinesToAsmHeader@31(AssemblyHeaderNo@1006 : Code[20]);
    VAR
      FromSalesShipmentLine@1000 : Record 111;
      PostedAsmHeader@1001 : Record 910;
      ToAsmHeader@1004 : Record 900;
      Assert@1002 : Codeunit 130000;
      CopyDocumentMgt@1003 : Codeunit 6620;
    BEGIN
      FromSalesShipmentLine.SETRANGE("Document No.",SalesShipmentNo);
      FromSalesShipmentLine.SETRANGE(Type,FromSalesShipmentLine.Type::Item);
      FromSalesShipmentLine.FINDSET;
      REPEAT
        Assert.IsTrue(FromSalesShipmentLine.AsmToShipmentExists(PostedAsmHeader),
          STRSUBSTNO('%1: No Assembly orders exist for %2: Order %3 line %4',FromSalesShipmentLine.TABLECAPTION,
            FromSalesShipmentLine.FIELDCAPTION("Document No."),FromSalesShipmentLine.FIELDCAPTION("Line No.")));
      UNTIL FromSalesShipmentLine.NEXT = 0;
      ToAsmHeader.GET(ToAsmHeader."Document Type"::Order,AssemblyHeaderNo);
      CopyDocumentMgt.CopyPostedAsmHeaderToAsmHeader(PostedAsmHeader,ToAsmHeader,TRUE);
    END;

    LOCAL PROCEDURE CopyInvoiceLinesToSalesOrder@20(ToDocNo@1002 : Code[20]);
    VAR
      ToSalesHeader@1000 : Record 36;
      CopyDocumentMgt@1001 : Codeunit 6620;
    BEGIN
      ToSalesHeader.GET(ToSalesHeader."Document Type"::Order,ToDocNo);
      CopyDocumentMgt.CopySalesDoc(7,SalesInvoiceNo,ToSalesHeader); // 7 -> From Posted Invoice
    END;

    LOCAL PROCEDURE CopyInvoiceLinesToSalesQuote@61(ToDocNo@1002 : Code[20]);
    VAR
      ToSalesHeader@1001 : Record 36;
      CopyDocumentMgt@1000 : Codeunit 6620;
    BEGIN
      ToSalesHeader.GET(ToSalesHeader."Document Type"::Quote,ToDocNo);
      CopyDocumentMgt.CopySalesDoc(7,SalesInvoiceNo,ToSalesHeader); // 7 -> From Posted Invoice
    END;

    LOCAL PROCEDURE CopyInvoiceLinesToSalesBlOrder@62(ToDocNo@1002 : Code[20]);
    VAR
      ToSalesHeader@1001 : Record 36;
      CopyDocumentMgt@1000 : Codeunit 6620;
    BEGIN
      ToSalesHeader.GET(ToSalesHeader."Document Type"::"Blanket Order",ToDocNo);
      CopyDocumentMgt.CopySalesDoc(7,SalesInvoiceNo,ToSalesHeader); // 7 -> From Posted Invoice
    END;

    LOCAL PROCEDURE CopyAsmOrderToAsmOrder@28(From@1000 : Code[20];To_@1001 : Code[20]);
    VAR
      FromAsmHeader@1003 : Record 900;
      ToAsmHeader@1004 : Record 900;
      CopyDocumentMgt@1002 : Codeunit 6620;
    BEGIN
      FromAsmHeader.GET(FromAsmHeader."Document Type"::Order,From);
      ToAsmHeader.GET(ToAsmHeader."Document Type"::Order,To_);
      CopyDocumentMgt.CopyAsmHeaderToAsmHeader(FromAsmHeader,ToAsmHeader,TRUE);
    END;

    LOCAL PROCEDURE CompareAsmOrderHeaders@23(To_@1001 : Code[20]);
    VAR
      ToAsmLine@1003 : Record 901;
      Assert@1004 : Codeunit 130000;
    BEGIN
      ToAsmLine.SETRANGE("Document Type",ToAsmLine."Document Type"::Order);
      ToAsmLine.SETRANGE("Document No.",To_);
      Assert.AreEqual(TempAsmLine.COUNT,ToAsmLine.COUNT,'No. of Asm lines when copying from one Asm header to another');
      TempAsmLine.FINDSET;
      ToAsmLine.FINDSET;
      REPEAT
        Assert.AreEqual(TempAsmLine.Type,ToAsmLine.Type,GetMsg(ToAsmLine.FIELDCAPTION(Type)));
        Assert.AreEqual(TempAsmLine."No.",ToAsmLine."No.",GetMsg(ToAsmLine.FIELDCAPTION("No.")));
        Assert.AreEqual(TempAsmLine.Quantity,ToAsmLine.Quantity,GetMsg(ToAsmLine.FIELDCAPTION(Quantity)));
        Assert.AreEqual(TempAsmLine."Quantity (Base)",ToAsmLine."Quantity (Base)",GetMsg(ToAsmLine.FIELDCAPTION("Quantity (Base)")));
      UNTIL (ToAsmLine.NEXT = 0) AND (TempAsmLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CreateAssemblyOrderHeader@21(VAR AssemblyHeaderNo@1001 : Code[20]);
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      CLEAR(AssemblyHeader);
      AssemblyHeader."Document Type" := AssemblyHeader."Document Type"::Order;
      AssemblyHeader.INSERT(TRUE);
      AssemblyHeaderNo := AssemblyHeader."No.";
    END;

    LOCAL PROCEDURE CreateAssemblySalesDocument@4(AssemblyItemQuantity@1002 : Decimal;HeaderType@1004 : 'Quote,Order,BlanketOrder';CustomizeOrder@1005 : Boolean) : Code[20];
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1001 : Record 37;
      ManufacturingSetup@1003 : Record 99000765;
    BEGIN
      CASE HeaderType OF
        HeaderType::Quote:
          LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,SellToCustomerNo);
        HeaderType::Order:
          LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,SellToCustomerNo);
        HeaderType::BlanketOrder:
          LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",SellToCustomerNo);
      END;
      ManufacturingSetup.GET;
      SalesHeader.VALIDATE(
        "Shipment Date",CALCDATE(ManufacturingSetup."Default Safety Lead Time",WORKDATE));
      SalesHeader.VALIDATE("Location Code",UsedLocationCode);
      SalesHeader.MODIFY;
      IF AssemblyItemQuantity > 0 THEN BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,2,AssemblyItemNo[1],AssemblyItemQuantity); // 2 -> Item
        SalesLine.VALIDATE("Location Code",UsedLocationCode);
        SalesLine.VALIDATE("Variant Code",UsedVariantCode[1]);
        SalesLine.MODIFY(TRUE);
        IF CustomizeOrder THEN
          CustomizeAssemblyOrder(SalesLine);
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,3,ResourceNo,1);                           // 3 -> Resource
      END;
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CustomizeAssemblyOrder@32(SalesLine@1000 : Record 37);
    VAR
      AsmHeader@1001 : Record 900;
      AsmLine@1003 : Record 901;
      i@1002 : Integer;
      LineNo@1004 : Integer;
    BEGIN
      IF NOT SalesLine.AsmToOrderExists(AsmHeader) THEN
        EXIT;
      LineNo := 50000;
      FOR i := 4 DOWNTO 2 DO BEGIN
        LineNo += 10000;
        CLEAR(AsmLine);
        AsmLine."Document Type" := AsmHeader."Document Type";
        AsmLine."Document No." := AsmHeader."No.";
        AsmLine."Line No." := LineNo;
        AsmLine.INSERT(TRUE);
        AsmLine.Type := AsmLine.Type::Item;
        AsmLine.VALIDATE("No.",AssemblyItemNo[i]);
        AsmLine.VALIDATE(Quantity,10 * i);
        AsmLine.VALIDATE("Quantity per",i);
        AsmLine.VALIDATE("Variant Code",UsedVariantCode[i]);
        AsmLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CollectAsmLinesFromNonPosted@7(HeaderType@1003 : 'Quote,Order,BlanketOrder';SalesOrderNo@1000 : Code[20];VAR FullAssemblyOrderHeaderNo@1005 : Code[20]);
    VAR
      AssembleToOrderLink@1001 : Record 904;
      AsmLine@1002 : Record 901;
    BEGIN
      FullAssemblyOrderHeaderNo := '';
      TempAsmLine.DELETEALL;
      CASE HeaderType OF
        HeaderType::Quote:
          AssembleToOrderLink.SETRANGE("Document Type",AssembleToOrderLink."Document Type"::Quote);
        HeaderType::Order:
          AssembleToOrderLink.SETRANGE("Document Type",AssembleToOrderLink."Document Type"::Order);
        HeaderType::BlanketOrder:
          AssembleToOrderLink.SETRANGE("Document Type",AssembleToOrderLink."Document Type"::"Blanket Order");
      END;

      AssembleToOrderLink.SETRANGE("Document No.",SalesOrderNo);
      IF NOT AssembleToOrderLink.FINDSET THEN
        EXIT;
      FullAssemblyOrderHeaderNo := AssembleToOrderLink."Assembly Document No.";
      REPEAT
        AsmLine.SETRANGE("Document Type",AssembleToOrderLink."Assembly Document Type");
        AsmLine.SETRANGE("Document No.",AssembleToOrderLink."Assembly Document No.");
        IF AsmLine.FINDSET THEN
          REPEAT
            TempAsmLine := AsmLine;
            TempAsmLine.INSERT;
          UNTIL AsmLine.NEXT = 0;
      UNTIL AssembleToOrderLink.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectAsmLinesFromShipment@9(ShipmentNo@1000 : Code[20];VAR FullAssemblyOrderNo@1003 : Code[20]);
    VAR
      PostedAssembleToOrderLink@1002 : Record 914;
      PostedAsmLine@1001 : Record 911;
    BEGIN
      FullAssemblyOrderNo := '';
      TempAsmLine.DELETEALL;
      PostedAssembleToOrderLink.SETRANGE("Document Type",PostedAssembleToOrderLink."Document Type"::"Sales Shipment");
      PostedAssembleToOrderLink.SETRANGE("Document No.",ShipmentNo);
      IF NOT PostedAssembleToOrderLink.FINDSET THEN
        EXIT;
      FullAssemblyOrderNo := PostedAssembleToOrderLink."Assembly Document No.";
      REPEAT
        PostedAsmLine.SETRANGE("Document No.",PostedAssembleToOrderLink."Assembly Document No.");
        IF PostedAsmLine.FINDSET THEN
          REPEAT
            TempAsmLine.TRANSFERFIELDS(PostedAsmLine);
            TempAsmLine."Document Type" := TempAsmLine."Document Type"::Order;
            TempAsmLine."Document No." := PostedAsmLine."Document No.";
            TempAsmLine."Line No." := PostedAsmLine."Line No.";
            TempAsmLine.INSERT;
          UNTIL PostedAsmLine.NEXT = 0;
      UNTIL PostedAssembleToOrderLink.NEXT = 0;
    END;

    LOCAL PROCEDURE CompareAsmLines@11(NewDocType@1006 : 'Quote,Order,BlanketOrder';NewSalesHeaderNo@1000 : Code[20];Posted@1001 : Boolean;OriginalDocType@1007 : 'Quote,Order,BlanketOrder';OriginalDocNo@1002 : Code[20]);
    VAR
      ToAsmLine@1003 : Record 901;
      AssembleToOrderLink@1004 : Record 904;
      Assert@1005 : Codeunit 130000;
      FullAssemblyOrderNo@1008 : Code[20];
      AsmHeaderNo@1009 : Code[20];
    BEGIN
      IF Posted THEN
        CollectAsmLinesFromShipment(OriginalDocNo,FullAssemblyOrderNo)
      ELSE
        CollectAsmLinesFromNonPosted(OriginalDocType,OriginalDocNo,AsmHeaderNo);
      CASE NewDocType OF
        NewDocType::Quote:
          AssembleToOrderLink.SETRANGE("Document Type",AssembleToOrderLink."Document Type"::Quote);
        NewDocType::Order:
          AssembleToOrderLink.SETRANGE("Document Type",AssembleToOrderLink."Document Type"::Order);
        NewDocType::BlanketOrder:
          AssembleToOrderLink.SETRANGE("Document Type",AssembleToOrderLink."Document Type"::"Blanket Order");
      END;
      AssembleToOrderLink.SETRANGE("Document No.",NewSalesHeaderNo);
      AssembleToOrderLink.FINDFIRST;
      CASE NewDocType OF
        NewDocType::Quote:
          ToAsmLine.SETRANGE("Document Type",ToAsmLine."Document Type"::Quote);
        NewDocType::Order:
          ToAsmLine.SETRANGE("Document Type",ToAsmLine."Document Type"::Order);
        NewDocType::BlanketOrder:
          ToAsmLine.SETRANGE("Document Type",ToAsmLine."Document Type"::"Blanket Order");
      END;
      ToAsmLine.SETRANGE("Document No.",AssembleToOrderLink."Assembly Document No.");
      Assert.AreEqual(TempAsmLine.COUNT,ToAsmLine.COUNT,
        'The number of assembly lines on the copied document must match the number on the original');
      TempAsmLine.FINDSET;
      ToAsmLine.FINDSET;
      REPEAT
        Assert.AreEqual(TempAsmLine.Type,ToAsmLine.Type,TempAsmLine.FIELDCAPTION(Type));
        Assert.AreEqual(TempAsmLine."No.",ToAsmLine."No.",GetMsg(TempAsmLine.FIELDCAPTION("No.")));
        Assert.AreEqual(TempAsmLine.Type,ToAsmLine.Type,GetMsg(TempAsmLine.FIELDCAPTION(Type)));
        Assert.AreEqual(TempAsmLine.Description,ToAsmLine.Description,GetMsg(TempAsmLine.FIELDCAPTION(Description)));
        IF TempAsmLine.Type <> TempAsmLine.Type::" " THEN
          Assert.AreEqual(TempAsmLine."Quantity per",ToAsmLine."Quantity per",GetMsg(TempAsmLine.FIELDCAPTION("Quantity per")));
        Assert.AreEqual(TempAsmLine."Unit Cost",ToAsmLine."Unit Cost",GetMsg(TempAsmLine.FIELDCAPTION("Unit Cost")));
        Assert.AreEqual(TempAsmLine."Location Code",ToAsmLine."Location Code",GetMsg(TempAsmLine.FIELDCAPTION("Location Code")));
        Assert.AreEqual(TempAsmLine."Variant Code",ToAsmLine."Variant Code",GetMsg(TempAsmLine.FIELDCAPTION("Variant Code")));
        Assert.AreEqual(TempAsmLine."Location Code",ToAsmLine."Location Code",GetMsg(TempAsmLine.FIELDCAPTION("Location Code")));
      UNTIL (TempAsmLine.NEXT = 0) AND (ToAsmLine.NEXT = 0);
    END;

    LOCAL PROCEDURE PostOrderAsShip@18(NonEmptySalesOrderNo@1005 : Code[20];QtyToShip@1000 : Decimal) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesShipmentHeader@1004 : Record 110;
    BEGIN
      SalesLine.GET(SalesLine."Document Type"::Order,NonEmptySalesOrderNo,GetFirstItemLineNo(NonEmptySalesOrderNo));
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
      SalesHeader.GET(SalesHeader."Document Type"::Order,NonEmptySalesOrderNo);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      SalesShipmentHeader.SETCURRENTKEY("Order No.");
      SalesShipmentHeader.SETRANGE("Order No.",NonEmptySalesOrderNo);
      SalesShipmentHeader.FINDFIRST;
      SalesShipmentNo := SalesShipmentHeader."No.";
      EXIT(SalesShipmentNo);
    END;

    LOCAL PROCEDURE PostOrderAsInvoice@14(NonEmptySalesOrderNo@1004 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      ItemLedgerEntry@1002 : Record 32;
      ValueEntry@1003 : Record 5802;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,NonEmptySalesOrderNo);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ItemLedgerEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
      ItemLedgerEntry.SETRANGE("Document No.",SalesShipmentNo);
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Sales Shipment");
      ItemLedgerEntry.FINDFIRST;
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntry."Entry No.");
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Sales Invoice");
      ValueEntry.FINDFIRST;
      SalesInvoiceNo := ValueEntry."Document No.";
      EXIT(SalesInvoiceNo);
    END;

    LOCAL PROCEDURE GetMsg@13(FieldName@1000 : Text[50]) : Text[1024];
    BEGIN
      EXIT(STRSUBSTNO('COD132600 Value mismatch in %1',FieldName));
    END;

    LOCAL PROCEDURE GetSKU@34();
    VAR
      SKU@1000 : Record 5700;
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO 4 DO BEGIN
        SKU.INIT;
        SKU."Location Code" := UsedLocationCode;
        SKU."Item No." := AssemblyItemNo[1];
        SKU."Variant Code" := UsedVariantCode[i];
        IF SKU.INSERT(TRUE) THEN;
        SKU.VALIDATE("Unit Cost",(i + 1) * 10);
        SKU.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetFirstItemLineNo@22(OrderNo@1000 : Code[20]) : Integer;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",OrderNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF NOT SalesLine.FINDFIRST THEN
        EXIT(0);
      EXIT(SalesLine."Line No.");
    END;

    LOCAL PROCEDURE CheckInit@24();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // INIT
      IF NOT SetupDataInitialized THEN BEGIN
        ThisObj := 'COD137927';
        CreateTestNoSeriesBackupData;
        SetupDataInitialized := TRUE;
      END;
      IF NOT BasicDataInitialized THEN BEGIN
        CreateCustomer;
        GetResource;
        UsedLocationCode := LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
        CreateAssemblyItem;
        GetSKU;
        ProvideAssemblyComponentSupply;
        BasicDataInitialized := TRUE;
      END;
    END;

    LOCAL PROCEDURE CheckCopyingBtwNonPostedSalesDocs@26(FromDocType@1000 : 'Quote,Order,BlanketOrder';ToDocType@1001 : 'Quote,Order,BlanketOrder');
    VAR
      ToSalesHeader@1004 : Record 36;
      CopyDocumentMgt@1005 : Codeunit 6620;
      FromDocNo@1002 : Code[20];
      ToDocNo@1003 : Code[20];
      FromDocEnum@1006 : Integer;
    BEGIN
      CheckInit;
      FromDocNo := CreateAssemblySalesDocument(4,FromDocType,TRUE);
      ToDocNo := CreateAssemblySalesDocument(0,ToDocType,TRUE);
      CASE ToDocType OF
        ToDocType::Quote:
          ToSalesHeader.GET(ToSalesHeader."Document Type"::Quote,ToDocNo);
        ToDocType::Order:
          ToSalesHeader.GET(ToSalesHeader."Document Type"::Order,ToDocNo);
        ToDocType::BlanketOrder:
          ToSalesHeader.GET(ToSalesHeader."Document Type"::"Blanket Order",ToDocNo);
      END;
      CASE FromDocType OF
        FromDocType::Quote:
          FromDocEnum := 0;
        FromDocType::Order:
          FromDocEnum := 2;
        FromDocType::BlanketOrder:
          FromDocEnum := 1;
      END;
      CopyDocumentMgt.CopySalesDoc(FromDocEnum,FromDocNo,ToSalesHeader);
      CompareAsmLines(ToDocType,ToDocNo,FALSE,FromDocType,FromDocNo);
      CleanSetupData;
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Copy Document] [SCM]

      Tests
      ==============================
      1 : Quote to quote
      2 : Quote to order
      3 : Quote to Blanket Order
      4 : Order to Quote
      5 : Order to Order
      6 : Order to Blanket Order
      7 : Blanket order to Quote
      8 : Blanket order to Order
      9 : Blanket order to Blanket Order
      10: Shipment to Quote
      11: Shipment To Order
      12: Shipment to Blanket order
      13: Invoice to Quote, 1 shipment
      14: Invoice to Quote, 2 shipments
      15: Invoice to Order, 1 shipment
      16: Invoice to Order, 2 shipments
      17: Invoice to Blanket Order, 1 shipment
      18: Invoice to Blanket Order, 2 shipments
      19: Assembly Order to Assembly Order
      20: Posted Assembly Order to Assembly Order
    }
    END.
  }
}

