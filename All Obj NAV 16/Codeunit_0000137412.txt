OBJECT Codeunit 137412 SCM Prevent Negative Inventory
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1000 : Codeunit 132201;
      LibrarySales@1002 : Codeunit 130509;
      LibraryPurchase@1010 : Codeunit 130512;
      LibraryPatterns@1006 : Codeunit 132212;
      LibraryERMCountryData@1009 : Codeunit 131305;
      LibraryRandom@1007 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      isInitialized@1003 : Boolean;
      PreventNegativeInventory@1004 : Boolean;
      PreventNegativeInventoryTestType@1005 : 'Default,No,Yes';
      ExpectedErrorErr@1008 : TextConst 'ENU=You have insufficient quantity of Item %1 on inventory.';

    LOCAL PROCEDURE Initialize@2();
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      IF isInitialized THEN
        EXIT;
      InventorySetup.GET;
      PreventNegativeInventory := InventorySetup."Prevent Negative Inventory";
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
    END;

    [Test]
    PROCEDURE TestInventoryPostingItemYes@3();
    BEGIN
      TestInventoryPosting(PreventNegativeInventoryTestType::Yes,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE TestInventoryPostingItemNo@4();
    BEGIN
      TestInventoryPosting(PreventNegativeInventoryTestType::No,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE TestInventoryPostingItemDefaultGlobalYes@5();
    BEGIN
      TestInventoryPosting(PreventNegativeInventoryTestType::Default,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE TestInventoryPostingItemDefaultGlobalNo@6();
    BEGIN
      TestInventoryPosting(PreventNegativeInventoryTestType::Default,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE TestNegativeAdjmtPostingSourceEmptyYes@10();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Check the Error in posting Item Journal Line
      // "Prevent Negative Inventory" = TRUE, Item Journal Line's Source Type is empty

      TestNegativeAdjmtPosting(TRUE,ItemJournalLine."Source Type"::" ");
    END;

    [Test]
    PROCEDURE TestNegativeAdjmtPostingSourceItemYes@11();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Check the Error in posting Item Journal Line
      // "Prevent Negative Inventory" = TRUE, Item Journal Line's Source Type is Item

      TestNegativeAdjmtPosting(TRUE,ItemJournalLine."Source Type"::Item);
    END;

    [Test]
    PROCEDURE OuboundILEReappliedOnCrMemoPostingInventorySufficientWithPreventNegInventory@8();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PostedRcptNo@1003 : Code[20];
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Credit Memo] [Purchase]
      // [SCENARIO 371705] Purchase credit memo with cost application should be posted when inventory is sufficient and "Prevent Negative Inventory" = TRUE

      // [GIVEN] InventorySetup."Prevent Negative Inventory" = TRUE
      LibrarySales.SetPreventNegativeInventory(TRUE);

      // [GIVEN] Receive "X" pcs. of item "I"
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreatePurchaseDocument(PurchaseHeader,Item."No.",Quantity);
      PostedRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Take "X" pcs. of item "I" from location, so that remainig quantity is 0
      LibraryPatterns.POSTNegativeAdjustment(Item,'','','',Quantity,WORKDATE,0);
      // [GIVEN] Receive "X" pcs of item "I", quantity on inventory = "X"
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',Quantity,WORKDATE,0);

      // [WHEN] Post purchase credit memo for "X" pcs of item "I", apply to the first purchase receipt
      CreateCreditMemoForPostedPurchaseReceipt(PurchaseHeader,PostedRcptNo,PurchaseHeader."Buy-from Vendor No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Outbound item ledger entry is reapplied to the second receipt
      VerifyItemLedgEntryRemainigQty(Item."No.");

      LibrarySales.SetPreventNegativeInventory(PreventNegativeInventory);
    END;

    [Test]
    PROCEDURE ErrorOnCrMemoPostingInventoryInsufficientWithPreventNegInventory@38();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PostedRcptNo@1003 : Code[20];
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Credit Memo] [Purchase]
      // [SCENARIO 371705] Purchase credit memo with cost application should not be posted when inventory is insufficient and "Prevent Negative Inventory" = TRUE

      // [GIVEN] InventorySetup."Prevent Negative Inventory" = TRUE
      LibrarySales.SetPreventNegativeInventory(TRUE);

      // [GIVEN] Receive "X" pcs. of item "I"
      Quantity := LibraryRandom.RandDecInRange(100,200,2);
      LibraryInventory.CreateItem(Item);
      CreatePurchaseDocument(PurchaseHeader,Item."No.",Quantity);
      PostedRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Take "X" pcs. of item "I" from location, so that remainig quantity is 0
      LibraryPatterns.POSTNegativeAdjustment(Item,'','','',Quantity,WORKDATE,0);
      // [GIVEN] Receive "X" - 1 pcs of item "I", quantity on inventory = "X" - 1
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',Quantity - 1,WORKDATE,0);

      // [WHEN] Post purchase credit memo for "X" pcs of item "I", apply to the first purchase receipt
      CreateCreditMemoForPostedPurchaseReceipt(PurchaseHeader,PostedRcptNo,PurchaseHeader."Buy-from Vendor No.");
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Error message: You have insufficient quantity of Item "I" on inventory.
      Assert.ExpectedError(STRSUBSTNO(ExpectedErrorErr,Item."No."));

      LibrarySales.SetPreventNegativeInventory(PreventNegativeInventory);
    END;

    LOCAL PROCEDURE TestInventoryPosting@1(ItemPreventNegativeInventory@1000 : 'Default,No,Yes';SetupPreventNegativeInventory@1001 : Boolean;Expected@1009 : Boolean);
    VAR
      Item@1002 : Record 27;
      Customer@1004 : Record 18;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ItemInventoryQty@1003 : Decimal;
    BEGIN
      Initialize;
      LibrarySales.SetPreventNegativeInventory(SetupPreventNegativeInventory);
      LibraryInventory.CreateItem(Item);
      Item."Prevent Negative Inventory" := ItemPreventNegativeInventory;
      Item.MODIFY;
      ItemInventoryQty := LibraryRandom.RandInt(100);
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',ItemInventoryQty,WORKDATE,Item."Unit Cost");
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",2 * ItemInventoryQty);
      SalesHeader.Ship := TRUE;
      SalesHeader.Invoice := TRUE;

      IF Expected THEN BEGIN
        ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
        Assert.IsTrue(GETLASTERRORTEXT = STRSUBSTNO(ExpectedErrorErr,Item."No."),'');
      END ELSE BEGIN
        CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
        Assert.IsTrue(GETLASTERRORTEXT = '','');
      END;

      LibrarySales.SetPreventNegativeInventory(PreventNegativeInventory);
    END;

    LOCAL PROCEDURE TestNegativeAdjmtPosting@7(SetupPreventNegativeInventory@1004 : Boolean;SourceType@1005 : Option);
    VAR
      Item@1000 : Record 27;
      ItemJnlTemplate@1001 : Record 82;
      ItemJnlBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      Initialize;

      // Validate "Prevent Negative Inventory" in Inventory Setup
      LibrarySales.SetPreventNegativeInventory(SetupPreventNegativeInventory);

      LibraryInventory.CreateItem(Item);

      // Create Item Journal Template and Batch
      LibraryInventory.CreateItemJournalTemplate(ItemJnlTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJnlBatch,ItemJnlTemplate.Name);

      // Create Negative Adjustment Item Journal line and set Source Type
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJnlTemplate.Name,ItemJnlBatch.Name,ItemJournalLine."Entry Type"::"Negative Adjmt.",
        Item."No.",LibraryRandom.RandInt(10));
      ItemJournalLine."Source Type" := SourceType;
      ItemJournalLine.MODIFY;

      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Line",ItemJournalLine);
      Assert.ExpectedError(STRSUBSTNO(ExpectedErrorErr,Item."No."));

      // Tear Down
      LibrarySales.SetPreventNegativeInventory(PreventNegativeInventory);
    END;

    LOCAL PROCEDURE CreateCreditMemoForPostedPurchaseReceipt@41(VAR PurchaseHeader@1000 : Record 38;PostedRcptNo@1003 : Code[20];VendorNo@1002 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
      DocType@1004 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",PostedRcptNo);
      PurchRcptLine.FINDFIRST;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocType::"Posted Receipt",PostedRcptNo,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@21(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,Quantity,'',0D);
    END;

    LOCAL PROCEDURE VerifyItemLedgEntryRemainigQty@31(ItemNo@1000 : Code[20]);
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Entry Type","Entry Type"::"Positive Adjmt.");
        FINDFIRST;
        TESTFIELD("Remaining Quantity",0);
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Prevent Negative Inventory] [SCM]
    }
    END.
  }
}

