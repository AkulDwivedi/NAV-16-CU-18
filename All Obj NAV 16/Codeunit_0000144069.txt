OBJECT Codeunit 144069 LC Transaction
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryPurchase@1500000 : Codeunit 130512;
      LibrarySales@1500007 : Codeunit 130509;
      LibraryInventory@1500002 : Codeunit 132201;
      LibraryRandom@1500003 : Codeunit 130440;
      LibraryUtility@1500004 : Codeunit 131000;
      LibraryERM@1500005 : Codeunit 131300;
      LibraryReportDataset@1500006 : Codeunit 131007;
      isInitialized@1500001 : Boolean;

    [Test]
    [HandlerFunctions(PendingLCRequestPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE CreatePurchDocWithLCDetail@1500001();
    VAR
      Vendor@1500000 : Record 23;
      Customer@1500005 : Record 18;
      LCDetail@1500008 : Record 16300;
      LCDetail1@1500009 : Record 16300;
      CurrencyCode@1500001 : Code[10];
      UnitCost@1500007 : Decimal;
    BEGIN
      // [SCENARIO BUG ID 172770] Pending LC report is showing wrong value in "Remaining Amount" field.
      // [FEATURE] [LC Transaction]

      // [GIVEN] Created LC Setup.
      Initialize;
      UnitCost := LibraryRandom.RandDec(100,1);
      CurrencyCode := CreateLCSetup(Vendor,Customer,LCDetail,LCDetail1);

      // [WHEN] Create and Post Purchase & Sales Document.
      CreateAndPostPurchaseDocument(Vendor."No.",LCDetail."No.",UnitCost);
      CreateAndPostSalesDocument(Customer."No.",LCDetail1."No.",UnitCost,CurrencyCode);

      // [THEN] Remaining Amount has been updated in Pending LC's report.
      VerifyValuesOnPendingLCPreview(LCDetail,REPORT::"Pending LC's");
      VerifyValuesOnPendingLCPreview(LCDetail1,REPORT::"Pending LC's");
    END;

    LOCAL PROCEDURE Initialize@1500090();
    BEGIN
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@1500000(VendorNo@1500003 : Code[20];LCDetailNo@1500004 : Code[20];UnitCost@1500005 : Decimal) : Code[20];
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500001 : Record 39;
      Item@1500000 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("LC No.",LCDetailNo);
      PurchaseHeader.MODIFY(TRUE);
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(
        Item,LibraryRandom.RandDecInDecimalRange(1,100,2),LibraryRandom.RandDecInDecimalRange(1,100,2));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(2,0));
      PurchaseLine.VALIDATE("Direct Unit Cost",UnitCost);
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@1500008(CustomerNo@1500003 : Code[20];LCDetailNo@1500004 : Code[20];UnitCost@1500005 : Decimal;CurrencyCode@1500006 : Code[10]) : Code[20];
    VAR
      SalesHeader@1500002 : Record 36;
      SalesLine@1500001 : Record 37;
      Item@1500000 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.VALIDATE("LC No.",LCDetailNo);
      SalesHeader.MODIFY(TRUE);
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(
        Item,LibraryRandom.RandDecInDecimalRange(1,100,2),LibraryRandom.RandDecInDecimalRange(1,100,2));
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(2,0));
      SalesLine.VALIDATE("Unit Cost",UnitCost);
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateLCNoSeries@1500024(VAR LCDetail@1500002 : Record 16300);
    VAR
      LCSetup@1500000 : Record 16303;
      NoSeriesCode@1500001 : Code[10];
    BEGIN
      LCSetup.GET;
      NoSeriesCode := LibraryUtility.GetGlobalNoSeriesCode;
      IF NoSeriesCode <> LCSetup."Detail Nos." THEN BEGIN
        LCSetup.VALIDATE("Detail Nos.",NoSeriesCode);
        LCSetup.MODIFY(TRUE);
      END;
      CLEAR(LCDetail);
      LCDetail.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateLCDetailsPurchase@1500003(VAR LCDetail@1500002 : Record 16300;IssuedToReceivedFrom@1500004 : Code[20];BankAcNo@1500005 : Code[20];TransactionType@1500003 : Option);
    BEGIN
      CreateLCNoSeries(LCDetail);
      CreateLCDetails(LCDetail,IssuedToReceivedFrom,BankAcNo,'',TransactionType);
      WITH LCDetail DO BEGIN
        VALIDATE("Type of LC","Type of LC"::Inland);
        VALIDATE("Type of Credit Limit","Type of Credit Limit"::Fixed);
        MODIFY(TRUE);
      END;
      ReleasedLCValue(LCDetail);
    END;

    LOCAL PROCEDURE CreateLCDetailsSales@1500012(VAR LCDetail@1500002 : Record 16300;IssuedToReceivedFrom@1500004 : Code[20];BankAcNo@1500005 : Code[20];CurrencyCode@1500006 : Code[10];TransactionType@1500003 : Option);
    BEGIN
      CreateLCNoSeries(LCDetail);
      CreateLCDetails(LCDetail,IssuedToReceivedFrom,BankAcNo,CurrencyCode,TransactionType);
      WITH LCDetail DO BEGIN
        VALIDATE("Type of LC","Type of LC"::Foreign);
        VALIDATE("Type of Credit Limit","Type of Credit Limit"::Revolving);
        VALIDATE("Revolving Cr. Limit Types","Revolving Cr. Limit Types"::Automatic);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
      END;
      ReleasedLCValue(LCDetail);
    END;

    PROCEDURE CreateLCDetails@1500009(VAR LCDetail@1500004 : Record 16300;IssuedToReceivedFrom@1500003 : Code[20];BankAcNo@1500002 : Code[20];CurrencyCode@1500001 : Code[10];TransactionType@1500000 : Option);
    BEGIN
      WITH LCDetail DO BEGIN
        VALIDATE("LC No.",
          LibraryUtility.GenerateRandomCode(FIELDNO("LC No."),DATABASE::"LC Detail"));
        VALIDATE(Description,
          LibraryUtility.GenerateRandomCode(FIELDNO(Description),DATABASE::"LC Detail"));
        VALIDATE("Transaction Type",TransactionType);
        VALIDATE("Issued To/Received From",IssuedToReceivedFrom);
        VALIDATE("Issuing Bank",BankAcNo);
        VALIDATE("Date of Issue",WORKDATE);
        VALIDATE("Expiry Date",CALCDATE('<1Y>',WORKDATE));
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("LC Value",LibraryRandom.RandDec(1000,1));
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateLCSetup@1500004(VAR Vendor@1500004 : Record 23;VAR Customer@1500003 : Record 18;VAR LCDetail@1500002 : Record 16300;VAR LCDetail1@1500001 : Record 16300) : Code[10];
    VAR
      BankAcNo@1500005 : Code[20];
      CurrencyCode@1500006 : Code[10];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibrarySales.CreateCustomer(Customer);
      BankAcNo := LibraryERM.CreateBankAccAndLCCrLimit;
      CreateLCDetailsPurchase(LCDetail,Vendor."No.",BankAcNo,1);
      CurrencyCode := LibraryERM.CreateCurrencyWithRandomExchRates;
      CreateLCDetailsSales(LCDetail1,Customer."No.",BankAcNo,CurrencyCode,0);
      EXIT(CurrencyCode);
    END;

    LOCAL PROCEDURE ReleasedLCValue@1500007(LCDetail@1500001 : Record 16300);
    VAR
      LCDetailList@1500000 : TestPage 16311;
    BEGIN
      LCDetailList.OPENEDIT;
      LCDetailList.FILTER.SETFILTER("No.",LCDetail."No.");
      LCDetailList.Action1280043.INVOKE;
    END;

    LOCAL PROCEDURE VerifyValuesOnPendingLCPreview@1500436(LCDetail@1500001 : Record 16300;ReportID@1500000 : Integer);
    VAR
      LCOrders@1500003 : Record 16306;
      RemainingAmount@1500004 : Decimal;
    BEGIN
      LCOrders.SETRANGE("LC No.",LCDetail."No.");
      LCOrders.FINDSET;
      REPEAT
        RemainingAmount += LCDetail."LC Value LCY" - LCOrders."Order Value";
      UNTIL LCOrders.NEXT = 0;

      REPORT.RUN(ReportID);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('LC_Detail__Remaining_Amount_',RemainingAmount);
    END;

    [RequestPageHandler]
    PROCEDURE PendingLCRequestPageHandler@1500490(VAR PendingLC@1500000 : TestRequestPage 16302);
    BEGIN
      PendingLC.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500101(Question@1500200 : Text;VAR Reply@1500201 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500102(Message@1500203 : Text[250]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

