OBJECT Codeunit 144085 ERM - Miscellaneous
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500008 : Record 98;
      GenJournalTemplate@1500026 : Record 80;
      Assert@1500009 : Codeunit 130000;
      LibraryERM@1500019 : Codeunit 131300;
      LibraryWarehouse@1500001 : Codeunit 132204;
      LibraryInventory@1500002 : Codeunit 132201;
      LibraryPurchase@1500003 : Codeunit 130512;
      LibrarySales@1500027 : Codeunit 130509;
      LibraryRandom@1500004 : Codeunit 130440;
      LibraryReportDataset@1500021 : Codeunit 131007;
      LibraryUtility@1500012 : Codeunit 131000;
      LibraryVariableStorage@1500005 : Codeunit 131004;
      GLAccountType@1500023 : Option;
      InvalidQuantityErr@1500013 : TextConst '@@@="%1 and %2 = Quantity and Quantity";ENU=%1 must be %2';
      CreditAmountErr@1500006 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The expected value is %1 and the actual value is %2.';
      TotalErr@1500015 : TextConst 'ENU=Debit Amount and Credit Amount is not matching';
      CheckLedgerEntryErr@1500007 : TextConst '@@@="%1 = Date";ENU="Cheque Ledger entry can be marked as Stale only after %1. "';
      ChequeAlreadyMakedErr@1500000 : TextConst 'ENU=The cheque has already been marked stale.';
      VoidCheckErr@1500010 : TextConst '@@@="%1 and %2 = Entry No. and Status";ENU="Entry Status must be equal to ''Posted''  in Check Ledger Entry: Entry No.=%1. Current value is ''%2''."';
      isInitialized@1500014 : Boolean;

    [Test]
    PROCEDURE PartialWarehouseShipmentAndReceipt@1500000();
    VAR
      Item@1500001 : Record 27;
      Location@1500002 : Record 14;
      PurchaseLine@1500005 : Record 39;
      TransferLine@1500007 : Record 5741;
      TransferHeader@1500003 : Record 5740;
      PurchRcptLine@1500011 : Record 121;
      TransferShipmentLine@1500012 : Record 5745;
      WarehouseEmployee@1500000 : Record 7301;
    BEGIN
      // [SCENARIO 163524] Program populates correct item ledger entry after posting the transfer Order as partial Receipt and shipment
      // [FEATURE] [WareHouse Transactions]
      Initialize;

      // [GIVEN] Created Location,Item and Inventory Setup
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,TRUE,TRUE);
      CreateItemWithoutVATPostingGroupAndInventorySetup(Item,Location);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);

      // [WHEN] Create and Post release Purchase Order and transfer order
      CreateAndPostWarehouseReceiptforReleasedPurchaseOrder(PurchRcptLine,PurchaseLine,Location.Code,Item."No.");
      CreateTransferOrder(TransferHeader,TransferLine,Item,PurchaseLine."Location Code",PurchaseLine.Quantity);
      CreateAndPostWarehouseShipment(TransferShipmentLine,TransferHeader);
      CreateAndPostPartialWarehouseReceiptforTransferOrder(TransferHeader);

      // [THEN] Verified Item ledger entry
      VerifyItemLedgerEntry(PurchRcptLine."Document No.",Location.Code,PurchaseLine.Quantity,TRUE,TRUE);
      VerifyTransferDoc(TransferShipmentLine,TransferHeader);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,CashBookRPH,VoucherAccountsHandler)]
    PROCEDURE CashPaymentVoucherWithNarration@1500002();
    VAR
      Location@1500002 : Record 14;
      GenJournalLine@1500000 : Record 81;
      DummyGenJnlBatch@1500003 : Record 232;
      GLAccount@1500001 : Record 15;
    BEGIN
      // [SCENARIO 163921] Voucher Interface - Check if the system is generating Cash Book containing all cash transactions.
      // [FEATURE] [Cash Payment Voucher Transaction]
      Initialize;

      // [GIVEN] Created G/L Account and Location Setup
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,TRUE,TRUE);
      CreateGLAccountWithVoucherAcc(
        GLAccount,GenJournalTemplate."Sub Type"::"Cash Payment Voucher",GenJournalLine."Account Type"::"G/L Account",Location.Code);

      // [WHEN] Create and Post Cash Payment Voucher
      CreateCashPaymentVoucherWithNarration(GenJournalLine,DummyGenJnlBatch,GLAccount."No.",Location.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(Location.Code);
      REPORT.RUNMODAL(REPORT::"Cash Book",TRUE,FALSE,GLAccount);

      // [THEN] Verified Cash Book
      VerifyCashVoucherReport(GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,BankBookRPH,VoucherAccountsHandler)]
    PROCEDURE BankPaymentVoucherWithNarration@1500192();
    VAR
      Location@1500003 : Record 14;
      BankAccount@1500000 : Record 270;
      DummyGenJnlBatch@1500001 : Record 232;
      GenJournalLine@1500002 : Record 81;
    BEGIN
      // [SCENARIO 163922] Voucher Interface - Check if the system is generating Bank Book containing all bank transactions.
      // [FEATURE] [Cash Payment Voucher Transaction]
      Initialize;

      // [GIVEN] Created G/L Account and Location Setup
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,TRUE,TRUE);
      CreateBankAccountWithVoucherAcc(
        BankAccount,GenJournalTemplate."Sub Type"::"Bank Payment Voucher",GenJournalLine."Account Type"::"Bank Account",Location.Code);

      // [WHEN] Create and Post Bank Payment Voucher
      CreateBankPaymentVoucherWithNarration(GenJournalLine,DummyGenJnlBatch,BankAccount."No.",Location.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(Location.Code);
      REPORT.RUNMODAL(REPORT::"Bank Book",TRUE,FALSE,BankAccount);

      // [THEN] Verified Bank Book Payment
      VerifyBankVoucherReport(GenJournalLine."Document No.",GenJournalLine.Amount,TRUE);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,VoucherAccountsHandler,LedgerRPH)]
    PROCEDURE CashReceiptVoucherWithNarration@1500005();
    VAR
      Location@1500004 : Record 14;
      GenJournalBatch@1500002 : Record 232;
      GenJournalLinePayment@1500003 : Record 81;
      GenJournalLine@1500001 : Record 81;
      GLAccount@1500000 : Record 15;
    BEGIN
      // [SCENARIO 163923] Voucher Interface - Check if the system is generating Ledgers (Report) for all types of transactions.
      // [FEATURE] [Cash Receipt Voucher and Contra Voucher Transaction]
      Initialize;

      // [GIVEN] Created G/L Account and Location Setup
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,TRUE,TRUE);
      CreateGLAccountWithVoucherAcc(
        GLAccount,GenJournalTemplate."Sub Type"::"Cash Receipt Voucher",GenJournalLine."Account Type"::"G/L Account",Location.Code);

      // [WHEN] Create and Post Cash Receipt Voucher and contra voucher
      CreateCashReceiptVoucherWithNarration(GenJournalLine,GenJournalBatch,GLAccount."No.",Location.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateContraVoucherWithNarration(GenJournalLinePayment,GenJournalBatch,GLAccount."No.",Location.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLinePayment);
      LibraryVariableStorage.Enqueue(Location.Code);
      REPORT.RUNMODAL(REPORT::Ledger,TRUE,FALSE,GLAccount);

      // [THEN] Verified ledger Payment
      VerifyLedgerReport(GenJournalLine."Document No.",GenJournalLinePayment."Document No.");
    END;

    [Test]
    [HandlerFunctions(BankBookRPH,VoucherAccountsHandler,DayBookRequestPageHandler)]
    PROCEDURE BankReceiptVoucherwithCurrencyCode@1500008();
    VAR
      Location@1500003 : Record 14;
      GenJournalLine@1500004 : Record 81;
      BankAccount@1500001 : Record 270;
      CurrencyCode@1500000 : Code[10];
      Amount@1500002 : Decimal;
    BEGIN
      // [SCENARIO 163902] Reports-Bank-Bank Book report displays multiple currencies
      // [FEATURE] [Bank Payment Receipt Transaction]
      Initialize;

      // [GIVEN] Created Bank Account and Location Setup
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,TRUE,TRUE);
      CreateBankAccountWithVoucherAcc(
        BankAccount,GenJournalTemplate."Sub Type"::"Bank Receipt Voucher",GenJournalLine."Account Type"::"Bank Account",Location.Code);
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,LibraryRandom.RandDec(200,2),LibraryRandom.RandDec(200,2));

      // [WHEN] Create and Post Bank Receipt voucher
      CreateBankPmtGenJnlLineWithCurrencycode(
        GenJournalLine,CurrencyCode,BankAccount."No.",GenJournalLine."Bal. Account Type"::"Bank Account",Amount,Location.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(Location.Code);
      REPORT.RUNMODAL(REPORT::"Bank Book",TRUE,FALSE,BankAccount);

      // [THEN] Verified G/L Entry,Bank Receipt Voucher and Day Book
      VerifyGLEntry(GenJournalLine."Document No.",-Amount);
      VerifyBankVoucherReport(GenJournalLine."Document No.",0,FALSE);
      VerifyDayBookReport(GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyStaleChequeEntriesInBankReconciliation@1500042();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
      BankAccReconciliation@1500004 : Record 273;
    BEGIN
      // [SCENARIO 164379] Stale Cheque - Check if the system is displaying the stale cheque ledger entries in the bank reconciliation window.
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created bank Account With Last check no and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals,Print Report Check and Create Bank Reconciliation
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Computer Check");
      StaleCheck(GenJournalLine."Document No.",TRUE);
      CreateBankAccReconciliation(BankAccReconciliation,BankAccount."No.");
      SuggestLines(BankAccReconciliation,BankAccount,TRUE);

      // [THEN] Verified the stale cheque ledger entries in the bank reconciliation window
      VerifyBankAccReconciliationLineCount(BankAccReconciliation."Statement No.",2);
      VerifyBankAccReconciliationLine(BankAccReconciliation."Statement No.")
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyStaleChequeBeforeStaleChequeStipulatedPeriod@1500039();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
    BEGIN
      // [SCENARIO 164377] Stale Cheque - Check if the system allows to Stale Check before the Stale Cheque Stipulated Period
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account With Last check no and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals,Print Report Check, Stale check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Computer Check");
      ASSERTERROR StaleCheck(GenJournalLine."Document No.",FALSE);

      // [THEN] Expected Error has been thrown : Cheque Ledger entry can be marked as Stale only after Date
      Assert.ExpectedError(STRSUBSTNO(CheckLedgerEntryErr,WORKDATE));
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyStaleChequeAsStaleAgainInCheckLedgerEntry@1500034();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
    BEGIN
      // [SCENARIO 164378] Stale Cheque - Check if the system allows marking a Stale Check as Stale again in the Check Ledger Entry
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account With Last check no and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals , Print Report Check and  Stale Check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Computer Check");
      StaleCheck(GenJournalLine."Document No.",TRUE);
      ASSERTERROR StaleCheck(GenJournalLine."Document No.",TRUE);

      // [THEN] Expected Error has been thrown : The cheque has already been marked stale.
      Assert.ExpectedError(ChequeAlreadyMakedErr);
    END;

    [Test]
    PROCEDURE VerifyNegativeDecimalInStaleChequeStipulatedPeriod@1500031();
    VAR
      BankAccount@1500001 : Record 270;
      StaleChequeStipulatedPeriod@1500000 : Text;
    BEGIN
      // [SCENARIO 164373] Stale Cheque - Check if the system allows entering any negative decimal value in the stale cheque stipulated period field on the bank account card.
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account
      CreateBankAccountLastCheckNo(BankAccount);

      // [WHEN] Negative decimal value in the stale cheque stipulated period field on the bank account card.
      StaleChequeStipulatedPeriod := FORMAT(-LibraryRandom.RandDec(70,2));
      ASSERTERROR EVALUATE(BankAccount."Stale Cheque Stipulated Period",StaleChequeStipulatedPeriod);

      // [THEN] Expected Error has been thrown :  specified as a prefix to the time unit.
      Assert.ExpectedError(GetStaleChequeStipulatedPeriod(BankAccount,StaleChequeStipulatedPeriod));
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler)]
    PROCEDURE VerifyCheckLedgerEntriesBeforeStaleChequeWithComputerCheck@1500023();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
      EntryStatus@1500005 : ',Printed,Voided,Posted,Financially Voided,Test Print';
    BEGIN
      // [SCENARIO 164371] Stale Cheque - Verify the stale cheque field, cheque stale date and check if system changes status to financially void in check ledger entry for bank payment type "Computer Check"
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals Computer Check ,Print Report Check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Computer Check");

      // [THEN] Verified Check Ledger Entries Before Cheque gets staled
      VerifyCheckLedgerEntry(GenJournalLine,EntryStatus::Posted,FALSE);
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyCheckLedgerEntriesAfterVoidChequeWithComputerCheck@1500041();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
      CheckLedgerEntry@1500002 : Record 272;
    BEGIN
      // [SCENARIO 164371] Stale Cheque - Verify the stale cheque field, cheque stale date and check if system changes status to financially void in check ledger entry for bank payment type "Computer Check"
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals Computer Check ,Print Report Check AND Void check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Computer Check");
      StaleCheck(GenJournalLine."Document No.",TRUE);
      CheckLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      CheckLedgerEntry.FINDFIRST;
      ASSERTERROR VoidCheck(GenJournalLine."Document No.");

      // [THEN] Expected Error has been thrown : Entry status must be equal to 'Posted' in Check Ledger Entry
      Assert.ExpectedError(STRSUBSTNO(VoidCheckErr,CheckLedgerEntry."Entry No.",CheckLedgerEntry."Entry Status"));
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyBankLedgerEntryAfterStaleChequeWithComputerCheck@1500035();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
    BEGIN
      // [SCENARIO 164371] Stale Cheque - Verify the stale cheque field, cheque stale date and check if system changes status to financially void in check ledger entry for bank payment type "Computer Check"
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals Computer Check ,Print Report Check , Stale Check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Computer Check");
      StaleCheck(GenJournalLine."Document No.",TRUE);

      // [THEN] Verified G/L Entries and Bank Account Ledger Entries
      VerifyGLEntryCount(GenJournalLine."Document No.",4);
      VerifyBankAccountLedgerEntry(GenJournalLine."Document No.",-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler)]
    PROCEDURE VerifyCheckLedgerEntriesBeforeStaleChequeWithManualCheck@1500033();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
      EntryStatus@1500005 : ',Printed,Voided,Posted,Financially Voided,Test Print';
    BEGIN
      // [SCENARIO 164375] Stale Cheque - Check if the system populating the cheque number field in the check ledger after posting the Journal, passing a reverse entry when a cheque becomes stale.
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals in  Manual Check ,Print Report Check , Stale Check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Manual Check");

      // [THEN] Verified Check Ledger Entries Before Cheque gets staled
      VerifyCheckLedgerEntry(GenJournalLine,EntryStatus::Posted,FALSE);
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyCheckLedgerEntriesAfterVoidChequeWithManualCheck@1500021();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
      CheckLedgerEntry@1500002 : Record 272;
    BEGIN
      // [SCENARIO 164375] Stale Cheque - Check if the system populating the cheque number field in the check ledger after posting the Journal, passing a reverse entry when a cheque becomes stale.
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Bank Account and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals in  Manual Check ,Print Report Check , Stale Check and Void Check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Manual Check");
      StaleCheck(GenJournalLine."Document No.",TRUE);
      CheckLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      CheckLedgerEntry.FINDFIRST;
      ASSERTERROR VoidCheck(GenJournalLine."Document No.");

      // [THEN] Expected Error has been thrown : Entry status must be equal to Posted in Check Ledger Entry
      Assert.ExpectedError(STRSUBSTNO(VoidCheckErr,CheckLedgerEntry."Entry No.",CheckLedgerEntry."Entry Status"));
    END;

    [Test]
    [HandlerFunctions(CheckRequestPageHandler,ConfirmFinancialStaleModelPage)]
    PROCEDURE VerifyBankLedgerEntryAfterStaleChequeWithManualCheck@1500020();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
    BEGIN
      // [SCENARIO 164375] Stale Cheque - Check if the system populating the cheque number field in the check ledger after posting the Journal, passing a reverse entry when a cheque becomes stale.
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created bank Account and Vendor
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals in  Manual Check ,Print Report Check , Stale Check
      CreateGenJnlLineAndPrintCheckAndPostGenJnlLine(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::"Manual Check");
      StaleCheck(GenJournalLine."Document No.",TRUE);

      // [THEN] Verified G/L Entries and Bank Account Ledger Entries
      VerifyGLEntryCount(GenJournalLine."Document No.",4);
      VerifyBankAccountLedgerEntry(GenJournalLine."Document No.",-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(LCAmendedDetailsModelPage,MessageHandler,ConfirmHandler)]
    PROCEDURE CreatePurchDocWithLCDetail@1500019();
    VAR
      Vendor@1500001 : Record 23;
      LCDetail@1500000 : Record 16300;
      PurchaseHeader@1500002 : Record 38;
      CurrencyCode@1500003 : Code[10];
      DocumentNo@1500004 : Code[20];
      Type@1500005 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';
      DocumentType@1500006 : 'Sales,Purchase';
    BEGIN
      // [SCENARIO 164381] Details - Purchase-Error on posting of Purchase Order with LC - India localization
      // [FEATURE] [LC Transaction]
      Initialize;

      // [GIVEN] Created LC Detail With Vendor and Currency Code
      CurrencyCode := CreateLCSetupWithVendor(Vendor,LCDetail);

      // [WHEN] Create and Post Purchase Order with LC Detail
      CreatePurchaseOrderUsingLCDetail(PurchaseHeader,LCDetail."No.",Vendor."No.",CurrencyCode,Type::Item,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] Verified The Purchase order is successfully posted as Receive without any error message
      VerifyPurchRcptAndSalesShipmentHeader(DocumentNo,DocumentType::Purchase);
    END;

    [Test]
    [HandlerFunctions(LCAmendedDetailsModelPage,MessageHandler,ConfirmHandler)]
    PROCEDURE CreateSalesDocWithLCDetail@1500016();
    VAR
      Customer@1500001 : Record 18;
      LCDetail@1500000 : Record 16300;
      SalesHeader@1500002 : Record 36;
      CurrencyCode@1500003 : Code[10];
      DocumentNo@1500004 : Code[20];
      DocumentType@1500005 : 'Sales,Purchase';
    BEGIN
      // [SCENARIO 164173] Details - Sales-Error on posting of Purchase Order with LC - India localization
      // [FEATURE] [LC Transaction]
      Initialize;

      // [GIVEN] Created LC Detail With Customer and Currency Code
      CurrencyCode := CreateLCSetupWithCustomer(Customer,LCDetail);

      // [WHEN] Create and Post Sales Order with LC Detail
      CreateSalesDocument(SalesHeader,Customer."No.",LCDetail."No.",CurrencyCode);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] Verified the Sales order is successfully posted as Ship without any error message
      VerifyPurchRcptAndSalesShipmentHeader(DocumentNo,DocumentType::Sales);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsModelPage)]
    PROCEDURE InvoiceDiscountOnStatisticsForSalesOrder@1500028();
    VAR
      Customer@1500000 : Record 18;
      SalesHeader@1500001 : Record 36;
      DocumentNo@1500002 : Code[20];
    BEGIN
      // [SCENARIO 164172] Details - Sales-Inconsistency Error when posting a Sales Order in FCY and having Invoice Discount.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created Customer
      LibrarySales.CreateCustomer(Customer);

      // [WHEN] Create and Post Sales Order with Invoice Discount
      CreateSalesDocument(SalesHeader,Customer."No.",'','');
      SalesHeader.OpenSalesOrderStatistics;
      SalesHeader.CALCFIELDS("Amount to Customer");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verified The G/L entries
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(DocumentNo,SalesHeader."Amount to Customer");
    END;

    [Test]
    PROCEDURE VerifySalesInconsistencyWithInvoiceRounding@1500015();
    VAR
      CountryRegion@1500001 : Record 9;
      Customer@1500002 : Record 18;
      SalesHeader@1500003 : Record 36;
      CurrencyCode@1500000 : Code[10];
      DocumentNo@1500004 : Code[20];
    BEGIN
      // [SCENARIO 164174] Details - Sales-Inconsistency error with invoice rounding precision
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created Customer and Inv Rounding percision
      LibrarySales.CreateCustomer(Customer);

      // [WHEN] Create and Post Sales Order with Currency Code
      LibraryERM.CreateCountryRegion(CountryRegion);
      CurrencyCode :=
        LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,LibraryRandom.RandDec(10,2),
          LibraryRandom.RandDec(10,2));
      CreateSalesDocument(SalesHeader,Customer."No.",'',CurrencyCode);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verified the Posted Sales Invoice with GL Entries
      VerifyGLEntryCount(DocumentNo,3);
    END;

    [Test]
    PROCEDURE VerifyBankPaymentEntry@1500012();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
    BEGIN
      // [SCENARIO 164369] Verify Program allows to selecting value on Applies-to Doc. type in Purchase Invoice Header which one is created Get receipt lines
      // [FEATURE] [Bank Payment Transaction]
      Initialize;

      // [GIVEN] Created Vendor and bank Account
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals
      CreateAndUpdateGenJnlLineBankAccWithJnlTemplateAndBatch(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::" ");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verified G/L Entries
      VerifyGLEntryCount(GenJournalLine."Document No.",2);
      VerifyGLEntry(GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinesPageHandler)]
    PROCEDURE VerifyGetReceiptLineWithAppliestoDocInPurchaseInvoice@1500040();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankAccount@1500001 : Record 270;
      Vendor@1500003 : Record 23;
      PurchaseHeader@1500004 : Record 38;
      DocumentNo@1500005 : Code[20];
      Type@1500006 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';
    BEGIN
      // [SCENARIO 164369] Verify Program allows to selecting value on Applies-to Doc. type in Purchase Invoice Header which one is created Get receipt lines
      // [FEATURE] [Purchase Invoice]
      Initialize;

      // [GIVEN] Created Vendor and bank Account
      InitializeSetup(BankAccount,Vendor);

      // [WHEN] Create and Post General Journals and Purchase Receive and Get Receipt Lines then Purchase Invoice
      CreateAndUpdateGenJnlLineBankAccWithJnlTemplateAndBatch(
        GenJournalLine,BankAccount,Vendor."No.",GenJournalLine."Bank Payment Type"::" ");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreatePurchaseOrderUsingLCDetail(PurchaseHeader,'',Vendor."No.",'',Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      GetReceiptLineAndAppliedDocNo(PurchaseHeader,GenJournalLine."Document No.",Vendor."No.");
      PurchaseHeader.CALCFIELDS("Amount to Vendor");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified G/L Entries
      VerifyGLEntryCount(DocumentNo,2);
      VerifyGLEntry(DocumentNo,PurchaseHeader."Amount to Vendor");
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibraryVariableStorage.Clear;
      GeneralLedgerSetup.GET;
      IF isInitialized THEN
        EXIT;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitializeSetup@1500043(VAR BankAccount@1500004 : Record 270;VAR Vendor@1500000 : Record 23);
    BEGIN
      CreateBankAccountLastCheckNo(BankAccount);
      LibraryPurchase.CreateVendor(Vendor);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@1500051(VAR PurchaseHeader@1500005 : Record 38;VAR PurchaseLine@1500003 : Record 39;VendorNo@1500002 : Code[20];LocationCode@1500001 : Code[10];ItemNo@1500000 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",WORKDATE);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10000,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptforReleasedPurchaseOrder@1500013(VAR PurchRcptLine@1500002 : Record 121;VAR PurchaseLine@1500009 : Record 39;LocationCode@1500007 : Code[10];ItemNo@1500003 : Code[20]);
    VAR
      PurchaseHeader@1500000 : Record 38;
      WarehouseReceiptHeader@1500001 : Record 7316;
      Vendor@1500008 : Record 23;
      WarehouseReceiptLine@1500004 : Record 7317;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendor(Vendor),LocationCode,ItemNo);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      GetWarehouseReceiptline(
        WarehouseReceiptHeader,WarehouseReceiptLine,0,
        PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      PurchRcptLine.SETRANGE("Order No.",PurchaseHeader."No.");
      PurchRcptLine.SETRANGE("Location Code",LocationCode);
      PurchRcptLine.FINDLAST;
    END;

    LOCAL PROCEDURE CreateAndPostPartialWarehouseReceiptforTransferOrder@1500006(TransferHeader@1500000 : Record 5740);
    VAR
      WarehouseReceiptHeader@1500004 : Record 7316;
      WarehouseReceiptLine@1500003 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      GetWarehouseReceiptline(
        WarehouseReceiptHeader,WarehouseReceiptLine,LibraryRandom.RandInt(2),
        TransferHeader."No.",WarehouseReceiptLine."Source Document"::"Inbound Transfer");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      GetWarehouseReceiptline(
        WarehouseReceiptHeader,WarehouseReceiptLine,LibraryRandom.RandInt(2),
        TransferHeader."No.",WarehouseReceiptLine."Source Document"::"Inbound Transfer");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      IF WarehouseReceiptLine."Qty. to Receive" > 0 THEN BEGIN
        GetWarehouseReceiptline(
          WarehouseReceiptHeader,WarehouseReceiptLine,WarehouseReceiptLine."Qty. to Receive",
          TransferHeader."No.",WarehouseReceiptLine."Source Document"::"Inbound Transfer");
        LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseShipment@1500004(VAR TransferShipmentLine@1500003 : Record 5745;TransferHeader@1500002 : Record 5740);
    VAR
      WarehouseShipmentLine@1500000 : Record 7321;
      WarehouseShipmentHeader@1500001 : Record 7320;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      GetWarehouseShipmentLine(
        WarehouseShipmentHeader,WarehouseShipmentLine,
        WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
      TransferShipmentLine.SETRANGE("Transfer Order No.",TransferHeader."No.");
      TransferShipmentLine.SETRANGE("Transfer-to Code",TransferHeader."Transfer-to Code");
      TransferShipmentLine.FINDLAST;
    END;

    LOCAL PROCEDURE CreateTransferOrder@1500109(VAR TransferHeader@1500007 : Record 5740;VAR TransferLine@1500000 : Record 5741;Item@1500005 : Record 27;LocationCode@1500001 : Code[10];Quantity@1500006 : Decimal);
    VAR
      Location2@1500003 : Record 14;
      Location1@1500004 : Record 14;
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(Location2);
      LibraryWarehouse.CreateLocationWMS(Location1,FALSE,FALSE,FALSE,TRUE,TRUE);
      LibraryWarehouse.CreateTransferHeader(
        TransferHeader,LocationCode,Location1.Code,Location2.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",Quantity);
      TransferLine.VALIDATE("Transfer Price",LibraryRandom.RandDec(10000,2));
      TransferLine.MODIFY(TRUE);
      LibraryInventory.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateItemWithoutVATPostingGroupAndInventorySetup@1500024(VAR Item@1500000 : Record 27;Location@1500002 : Record 14);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",'');
      Item.MODIFY(TRUE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location)
    END;

    LOCAL PROCEDURE CreateGLAccountWithVoucherAcc@1500069(VAR GLAccount@1500001 : Record 15;SubType@1500000 : Option;AccountType@1500002 : Option;LocationCode@1500003 : Code[10]);
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryVariableStorage.Enqueue(GLAccount."No.");
      CreateVoucherAccount(GLAccount."No.",AccountType,SubType,FORMAT(SubType),LocationCode);
      GLAccount.SETRANGE("No.",GLAccount."No.");
      GLAccount.SETFILTER("Date Filter",'%1..%2',CALCDATE('< -1M >',WORKDATE),CALCDATE('< +1Y >',WORKDATE));
      GLAccount.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateBankAccountWithVoucherAcc@1500080(VAR BankAccount@1500000 : Record 270;SubType@1500001 : Option;AccountType@1500002 : Option;LocationCode@1500003 : Code[10]);
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      CreateVoucherAccount(BankAccount."No.",AccountType,SubType,FORMAT(SubType),LocationCode);
      BankAccount.SETRANGE("No.",BankAccount."No.");
      BankAccount.SETFILTER("Date Filter",'%1..%2',CALCDATE('< -1M >',WORKDATE),CALCDATE('< +1Y >',WORKDATE));
      BankAccount.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndUpdateGenJnlLineBankAccWithJnlTemplateAndBatch@1500082(VAR GenJournalLine@1500005 : Record 81;BankAccount@1500004 : Record 270;VendorNo@1500003 : Code[20];BankPaymentType@1500000 : Option);
    VAR
      GenJournalTemplate@1500002 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLineWithBalAcc(
          GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,"Document Type"::Payment,
          "Account Type"::Vendor,VendorNo,"Bal. Account Type"::"Bank Account",
          BankAccount."No.",LibraryRandom.RandDec(7000,2));
        VALIDATE("Bank Payment Type",BankPaymentType);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Cheque Date",WORKDATE);
        VALIDATE("Cheque No.",COPYSTR(BankAccount."Last Check No.",1,10));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLineAndPrintCheckAndPostGenJnlLine@1500059(VAR GenJournalLine@1500003 : Record 81;BankAccount@1500002 : Record 270;VendorNo@1500001 : Code[20];BankPaymentType@1500000 : Option);
    BEGIN
      CreateAndUpdateGenJnlLineBankAccWithJnlTemplateAndBatch(GenJournalLine,BankAccount,VendorNo,BankPaymentType);
      PrintCheckAndPostGenJnlLine(GenJournalLine,BankAccount."No.",BankAccount."Last Check No.");
    END;

    LOCAL PROCEDURE CreateBankAccountLastCheckNo@1500078(VAR BankAccount@1500000 : Record 270);
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE(
        "Last Check No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Last Check No."),DATABASE::"Bank Account"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Bank Account",BankAccount.FIELDNO("Last Check No."))));
      BankAccount.MODIFY(TRUE);
      RollbackChangesMadeToDataBase;
    END;

    LOCAL PROCEDURE CreateSalesDocument@1500055(VAR SalesHeader@1500001 : Record 36;CustomerNo@1500005 : Code[20];LCDetailNo@1500002 : Code[20];CurrnecyCode@1500000 : Code[10]);
    BEGIN
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Order,CustomerNo);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Currency Code",CurrnecyCode);
        VALIDATE("LC No.",LCDetailNo);
        MODIFY(TRUE);
        CreateSalesLine(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@1500054(SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandDec(4,2));
      WITH SalesLine DO BEGIN
        VALIDATE("Unit Price",LibraryRandom.RandDec(400,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderUsingLCDetail@1500062(VAR PurchaseHeader@1500004 : Record 38;LCDetailNo@1500002 : Code[20];VendorNo@1500003 : Code[20];CurrnecyCode@1500000 : Code[10];Type@1500005 : Option;GLAccountNo@1500006 : Code[20]);
    BEGIN
      WITH PurchaseHeader DO BEGIN
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,"Document Type"::Order,VendorNo);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("LC No.",LCDetailNo);
        VALIDATE("Currency Code",CurrnecyCode);
        MODIFY(TRUE);
        CreatePurchaseLine(PurchaseHeader,Type,GLAccountNo);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500053(VAR PurchaseHeader@1500000 : Record 38;type@1500002 : Option;GLAccountNo@1500003 : Code[20]);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,type,GLAccountNo,LibraryRandom.RandDec(4,2));
      WITH PurchaseLine DO BEGIN
        VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(5,2));
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateLCSetupWithVendor@1500050(VAR Vendor@1500004 : Record 23;VAR LCDetail@1500002 : Record 16300) : Code[10];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(CreateLCDetailsSalesAndPurchase(
          LCDetail,Vendor."No.",LibraryERM.CreateBankAccAndLCCrLimit,LibraryERM.CreateCurrencyWithRandomExchRates,1));
    END;

    PROCEDURE CreateLCSetupWithCustomer@1500048(VAR Customer@1500004 : Record 18;VAR LCDetail@1500002 : Record 16300) : Code[10];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(CreateLCDetailsSalesAndPurchase(
          LCDetail,Customer."No.",LibraryERM.CreateBankAccAndLCCrLimit,LibraryERM.CreateCurrencyWithRandomExchRates,0));
    END;

    LOCAL PROCEDURE CreateLCDetailsSalesAndPurchase@1500047(VAR LCDetail@1500002 : Record 16300;IssuedToReceivedFrom@1500004 : Code[20];BankAcNo@1500005 : Code[20];CurrencyCode@1500000 : Code[10];TransactionType@1500003 : Option) : Code[10];
    BEGIN
      InsertLCDetailAndUpdateLCSetup(LCDetail);
      CASE TransactionType OF
        0:
          WITH LCDetail DO BEGIN
            ModifyLCDetails(LCDetail,IssuedToReceivedFrom,BankAcNo,CurrencyCode,TransactionType);
            VALIDATE("Type of LC","Type of LC"::Foreign);
            VALIDATE("Type of Credit Limit","Type of Credit Limit"::Revolving);
            VALIDATE("Revolving Cr. Limit Types","Revolving Cr. Limit Types"::Automatic);
            VALIDATE("Currency Code",CurrencyCode);
            MODIFY(TRUE);
          END;
        1:
          WITH LCDetail DO BEGIN
            ModifyLCDetails(LCDetail,IssuedToReceivedFrom,BankAcNo,'',TransactionType);
            VALIDATE("Type of LC","Type of LC"::Inland);
            VALIDATE("Type of Credit Limit","Type of Credit Limit"::Fixed);
            VALIDATE("Currency Code",CurrencyCode);
            MODIFY(TRUE);
          END;
      END;
      ReleasedLCValue(LCDetail);
      AmendmentLCValue(LCDetail);
      EXIT(CurrencyCode);
    END;

    LOCAL PROCEDURE InsertLCDetailAndUpdateLCSetup@1500045(VAR LCDetail@1500002 : Record 16300);
    VAR
      DummyLCSetup@1500000 : Record 16303;
    BEGIN
      DummyLCSetup.VALIDATE("Detail Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      LCDetail.INSERT(TRUE);
    END;

    PROCEDURE ModifyLCDetails@1500044(VAR LCDetail@1500004 : Record 16300;IssuedToReceivedFrom@1500003 : Code[20];BankAcNo@1500002 : Code[20];CurrencyCode@1500001 : Code[10];TransactionType@1500000 : Option);
    BEGIN
      WITH LCDetail DO BEGIN
        VALIDATE("LC No.",
          LibraryUtility.GenerateRandomCode(FIELDNO("LC No."),DATABASE::"LC Detail"));
        VALIDATE(Description,
          LibraryUtility.GenerateRandomCode(FIELDNO(Description),DATABASE::"LC Detail"));
        VALIDATE("Transaction Type",TransactionType);
        VALIDATE("Issued To/Received From",IssuedToReceivedFrom);
        VALIDATE("Issuing Bank",BankAcNo);
        VALIDATE("Date of Issue",WORKDATE);
        VALIDATE("Expiry Date",CALCDATE('<1Y>',WORKDATE));
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("LC Value",LibraryRandom.RandDec(100000,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetWarehouseReceiptline@1500030(VAR WarehouseReceiptHeader@1500004 : Record 7316;VAR WarehouseReceiptLine@1500001 : Record 7317;Quantity@1500000 : Decimal;TransferHeaderNo@1500002 : Code[20];SourceDocument@1500003 : Option);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",TransferHeaderNo);
      WarehouseReceiptLine.FINDFIRST;
      IF Quantity <> 0 THEN BEGIN
        WarehouseReceiptLine.VALIDATE("Qty. to Receive",Quantity);
        WarehouseReceiptLine.MODIFY(TRUE);
      END;
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE GetWarehouseShipmentLine@1500086(VAR WarehouseShipmentHeader@1500000 : Record 7320;WarehouseShipmentLine@1500002 : Record 7321;SourceDocument@1500001 : Option;TransferHeaderNo@1500003 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",TransferHeaderNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE CreateCashPaymentVoucherWithNarration@1500007(VAR GenJournalLine@1500002 : Record 81;GenJournalBatch@1500003 : Record 232;GLAccountNo@1500000 : Code[20];LocationCode@1500001 : Code[10]);
    BEGIN
      CreatePaymentVoucherTemplate(GenJournalBatch,GenJournalTemplate."Sub Type"::"Cash Payment Voucher",LocationCode);
      CreateMultiLinesinVoucherForVendor(
        GenJournalLine,GenJournalBatch.Name,GLAccountNo,GenJournalLine."Account Type"::"G/L Account");
      AssignLineNarrationForVoucher(GenJournalLine,PAGE::"Cash Payment Voucher",GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherWithNarration@1500202(VAR GenJournalLine@1500001 : Record 81;GenJournalBatch@1500004 : Record 232;BankAccountNo@1500000 : Code[20];LocationCode@1500002 : Code[10]);
    BEGIN
      CreatePaymentVoucherTemplate(GenJournalBatch,GenJournalTemplate."Sub Type"::"Bank Payment Voucher",LocationCode);
      CreateMultiLinesinVoucherForVendor(
        GenJournalLine,GenJournalBatch.Name,BankAccountNo,GenJournalLine."Account Type"::"Bank Account");
      AssignLineNarrationForVoucher(GenJournalLine,PAGE::"Bank Payment Voucher",GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateCashReceiptVoucherWithNarration@1500025(VAR GenJournalLine@1500002 : Record 81;GenJournalBatch@1500004 : Record 232;GLAccountNo@1500000 : Code[20];LocationCode@1500001 : Code[10]);
    BEGIN
      CreatePaymentVoucherTemplate(GenJournalBatch,GenJournalTemplate."Sub Type"::"Cash Receipt Voucher",LocationCode);
      CreateMultiLinesinVoucherForCustomer(
        GenJournalLine,GenJournalBatch.Name,GLAccountNo,GenJournalLine."Account Type"::"G/L Account");
      AssignLineNarrationForVoucher(GenJournalLine,PAGE::"Cash Receipt Voucher",GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateContraVoucherWithNarration@1500018(VAR GenJournalLine@1500005 : Record 81;VAR GenJournalBatch@1500004 : Record 232;GLAccountNo@1500000 : Code[20];LocationCode@1500001 : Code[10]);
    BEGIN
      CreatePaymentVoucherTemplate(GenJournalBatch,GenJournalTemplate."Sub Type"::"Contra Voucher",LocationCode);
      CreateMultiplePaymentVoucherlines(
        GenJournalLine,GenJournalBatch.Name,GLAccountNo,GenJournalLine."Account Type"::"G/L Account");
      AssignLineNarrationForVoucher(GenJournalLine,PAGE::"Contra Voucher",GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateGenJnlLine@1500037(VAR GenJournalLine@1500000 : Record 81;GenJnlBatchName@1500001 : Code[10];AccountType@1500003 : Option;AccountNo@1500004 : Code[20];Amount@1500002 : Decimal;PostingDate@1500005 : Date) : Code[20];
    BEGIN
      LibraryERM.CreateGeneralJnlLine2(GenJournalLine,GenJournalTemplate.Name,GenJnlBatchName,GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreatePaymentVoucherTemplate@1500036(VAR GenJournalBatch@1500000 : Record 232;SubType@1500001 : Option;LocationCode@1500002 : Code[10]);
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Location Code",LocationCode);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultiLinesinVoucherForVendor@1500052(VAR GenJournalLine@1500004 : Record 81;GenJnlBatchName@1500002 : Code[10];AccountNo@1500001 : Code[20];AccountType@1500000 : Option);
    BEGIN
      CreateGenJnlLine(
        GenJournalLine,GenJnlBatchName,AccountType,AccountNo,-LibraryRandom.RandDecInDecimalRange(10000,6000,2),
        CALCDATE('< 1M >',WORKDATE));
      CreateGenJnlLine(
        GenJournalLine,GenJnlBatchName,GenJournalLine."Account Type"::Vendor,LibraryPurchase.CreateVendorNo,
        LibraryRandom.RandDecInDecimalRange(10000,6000,2),CALCDATE('< 1M >',WORKDATE));
    END;

    LOCAL PROCEDURE CreateMultiLinesinVoucherForCustomer@1500011(VAR GenJournalLine@1500004 : Record 81;GenJnlBatchName@1500002 : Code[10];AccountNo@1500001 : Code[20];AccountType@1500000 : Option);
    BEGIN
      CreateGenJnlLine(
        GenJournalLine,GenJnlBatchName,AccountType,AccountNo,LibraryRandom.RandDecInDecimalRange(10000,6000,2),
        CALCDATE('< 1M >',WORKDATE));
      CreateGenJnlLine(
        GenJournalLine,GenJnlBatchName,GenJournalLine."Account Type"::Customer,
        LibrarySales.CreateCustomerNo,-LibraryRandom.RandDecInDecimalRange(10000,6000,2),CALCDATE('< 1M >',WORKDATE));
    END;

    LOCAL PROCEDURE CreateMultiplePaymentVoucherlines@1500032(VAR GenJournalLine@1500006 : Record 81;GenJnlBatchName@1500002 : Code[10];AccountNo@1500001 : Code[20];AccountType@1500000 : Option);
    BEGIN
      LibraryERM.CreateGeneralJnlLine2(GenJournalLine,GenJournalTemplate.Name,GenJnlBatchName,
        GenJournalLine."Document Type"::Payment,AccountType,AccountNo,-LibraryRandom.RandDecInDecimalRange(10000,6000,2));
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.CreateGeneralJnlLine2(GenJournalLine,GenJournalTemplate.Name,GenJnlBatchName,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,LibraryRandom.RandDecInDecimalRange(10000,6000,2));
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPmtGenJnlLineWithCurrencycode@1500009(VAR GenJournalLine@1500004 : Record 81;CurrencyCode@1500001 : Code[10];BalAccNo@1500002 : Code[20];BalAccType@1500003 : Option;VAR Amount2@1500008 : Decimal;LocationCode@1500005 : Code[10]);
    VAR
      Customer@1500007 : Record 18;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      CreatePaymentVoucherTemplate(GenJournalBatch,GenJournalTemplate."Sub Type"::"Bank Receipt Voucher",LocationCode);
      LibrarySales.CreateCustomer(Customer);
      CreateGenJnlLine(
        GenJournalLine,GenJournalBatch.Name,GenJournalLine."Account Type"::Customer,
        Customer."No.",-LibraryRandom.RandDec(20000,2),CALCDATE('< 1M >',WORKDATE));
      CreateGenJnlLine(
        GenJournalLine,GenJournalBatch.Name,GenJournalLine."Account Type"::Customer,
        Customer."No.",-LibraryRandom.RandDec(20000,2),CALCDATE('< 2M >',WORKDATE));
      CreateGenJnlLine(
        GenJournalLine,GenJournalBatch.Name,GenJournalLine."Account Type"::Customer,
        Customer."No.",-LibraryRandom.RandDec(20000,2),CALCDATE('< 3M >',WORKDATE));
      WITH GenJournalLine DO BEGIN
        FINDSET;
        REPEAT
          VALIDATE("Currency Code",CurrencyCode);
          VALIDATE("Bal. Account Type",BalAccType);
          VALIDATE("Bal. Account No.",BalAccNo);
          MODIFY(TRUE);
          Amount2 += "Amount (LCY)";
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateVoucherAccount@1500150(AccountNo@1500001 : Code[20];AccType@1500005 : Option;SubType@1500006 : Option;TemplateSubType@1500007 : Text;LocationCode@1500004 : Code[10]);
    VAR
      VoucherAccount@1500000 : Record 16547;
      CompanyInformationPage@1500002 : TestPage 1;
      VoucherNoSeries@1500003 : TestPage 16574;
    BEGIN
      WITH VoucherAccount DO BEGIN
        INIT;
        VALIDATE("Location code",LocationCode);
        VALIDATE("Sub Type",SubType);
        VALIDATE("Account Type",AccType);
        VALIDATE("Account No.",AccountNo);
        INSERT;
      END;
      GLAccountType := AccType;
      CompanyInformationPage.OPENEDIT;
      VoucherNoSeries.TRAP;
      CompanyInformationPage."Page Voucher No. Series".INVOKE;
      VoucherNoSeries.FILTER.SETFILTER("Sub Type",TemplateSubType);
      VoucherNoSeries.FILTER.SETFILTER("Location Code",LocationCode);
      VoucherNoSeries.Action1500002.INVOKE;
    END;

    LOCAL PROCEDURE CreateBankAccReconciliation@1500091(VAR BankAccReconciliation@1500001 : Record 273;BankAccountNo@1500000 : Code[20]);
    BEGIN
      LibraryERM.CreateBankAccReconciliation(BankAccReconciliation,BankAccountNo,
        BankAccReconciliation."Statement Type"::"Bank Reconciliation");
      BankAccReconciliation.VALIDATE("Statement Date",WORKDATE);
      BankAccReconciliation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignLineNarrationForVoucher@1500085(GenJournalLine@1500009 : Record 81;PageID@1500000 : Integer;GenJnlBatch@1500008 : Code[20]);
    VAR
      BankPaymentVoucher@1500004 : TestPage 16577;
      BankReceiptVoucher@1500005 : TestPage 16569;
      CashPaymentVoucher@1500001 : TestPage 16576;
      CashReceiptVoucher@1500002 : TestPage 16579;
      GenJournalNarration@1500006 : TestPage 16572;
      ContraVoucher@1500003 : TestPage 16570;
    BEGIN
      COMMIT;
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJnlBatch);
      CASE PageID OF
        PAGE::"Bank Receipt Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                BankReceiptVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                BankReceiptVoucher.GOTORECORD(GenJournalLine);
                BankReceiptVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
                BankReceiptVoucher.OK.INVOKE;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Bank Payment Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                BankPaymentVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                BankPaymentVoucher.GOTORECORD(GenJournalLine);
                BankPaymentVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
                BankPaymentVoucher.OK.INVOKE;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Cash Payment Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                CashPaymentVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                CashPaymentVoucher.GOTORECORD(GenJournalLine);
                CashPaymentVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
                CashPaymentVoucher.OK.INVOKE;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Cash Receipt Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                CashReceiptVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                CashReceiptVoucher.GOTORECORD(GenJournalLine);
                CashReceiptVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
                CashReceiptVoucher.OK.INVOKE;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Contra Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                ContraVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                ContraVoucher.GOTORECORD(GenJournalLine);
                ContraVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
                ContraVoucher.OK.INVOKE;
              UNTIL GenJournalLine.NEXT = 0;
          END;
      END;
      AssignVoucherNarrForVoucher(PageID,GenJnlBatch);
    END;

    LOCAL PROCEDURE AssignVoucherNarrForVoucher@1500103(PageID@1500000 : Integer;GenJnlBatch@1500007 : Code[20]);
    VAR
      BankPaymentVoucher@1500005 : TestPage 16577;
      BankReceiptVoucher@1500004 : TestPage 16569;
      CashPaymentVoucher@1500003 : TestPage 16576;
      CashReceiptVoucher@1500002 : TestPage 16579;
      GenJournalVoucherNarration@1500006 : TestPage 16573;
      ContraVoucher@1500001 : TestPage 16570;
    BEGIN
      COMMIT;
      CASE PageID OF
        PAGE::"Cash Payment Voucher":
          BEGIN
            CashPaymentVoucher.OPENEDIT;
            CashPaymentVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatch);
            GenJournalVoucherNarration.TRAP;
            CashPaymentVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
          END;
        PAGE::"Bank Payment Voucher":
          BEGIN
            BankPaymentVoucher.OPENEDIT;
            BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatch);
            GenJournalVoucherNarration.TRAP;
            BankPaymentVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
          END;
        PAGE::"Bank Receipt Voucher":
          BEGIN
            BankReceiptVoucher.OPENEDIT;
            BankReceiptVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatch);
            GenJournalVoucherNarration.TRAP;
            BankReceiptVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
          END;
        PAGE::"Cash Receipt Voucher":
          BEGIN
            CashReceiptVoucher.OPENEDIT;
            CashReceiptVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatch);
            GenJournalVoucherNarration.TRAP;
            CashReceiptVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
          END;
        PAGE::"Contra Voucher":
          BEGIN
            ContraVoucher.OPENEDIT;
            ContraVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatch);
            GenJournalVoucherNarration.TRAP;
            ContraVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(LibraryUtility.GenerateRandomText(50));
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyTransferDoc@1500027(TransferShipmentLine@1500002 : Record 5745;TransferHeader@1500001 : Record 5740);
    VAR
      TransferReceiptLine@1500000 : Record 5747;
    BEGIN
      VerifyItemLedgerEntry(
        TransferShipmentLine."Document No.",TransferHeader."Transfer-from Code",-TransferShipmentLine.Quantity,FALSE,TRUE);
      TransferReceiptLine.SETRANGE("Transfer Order No.",TransferHeader."No.");
      TransferReceiptLine.SETRANGE("Transfer-to Code",TransferHeader."Transfer-to Code");
      TransferReceiptLine.FINDSET;
      REPEAT
        VerifyItemLedgerEntry(
          TransferReceiptLine."Document No.",TransferHeader."Transfer-to Code",TransferReceiptLine.Quantity,FALSE,FALSE);
      UNTIL TransferReceiptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCashVoucherReport@1500026(DocumentNo@1500000 : Code[20];Amount@1500001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('DocumentNo_GLEntry',DocumentNo);
      LibraryReportDataset.AssertElementWithValueExists('CreditAmount_GLEntry',Amount);
    END;

    LOCAL PROCEDURE VerifyBankVoucherReport@1500057(DocumentNo@1500000 : Code[20];Amount@1500002 : Decimal;BankReceipt@1500003 : Boolean);
    VAR
      BankAccountLedgerEntry@1500001 : Record 271;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      IF BankReceipt THEN BEGIN
        LibraryReportDataset.AssertElementWithValueExists('G_L_Entry__Document_No__',DocumentNo);
        LibraryReportDataset.AssertElementWithValueExists('G_L_Entry__Credit_Amount_',Amount);
      END ELSE BEGIN
        BankAccountLedgerEntry.SETRANGE("Document No.",DocumentNo);
        BankAccountLedgerEntry.FINDSET;
        REPEAT
          LibraryReportDataset.AssertElementWithValueExists('Bank_Account_No_',BankAccountLedgerEntry."Bank Account No.");
          LibraryReportDataset.AssertElementWithValueExists('G_L_Entry__Debit_Amount_',BankAccountLedgerEntry.Amount);
        UNTIL BankAccountLedgerEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyLedgerReport@1500022(CreditDocumentNo@1500001 : Code[20];DebitDocumentNo@1500003 : Code[20]);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETFILTER("Document No.",'%1..%2',CreditDocumentNo,DebitDocumentNo);
      GLEntry.FINDSET;
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        LibraryReportDataset.AssertElementWithValueExists('DocumentNo_GLEntry',GLEntry."Document No.");
        LibraryReportDataset.AssertElementWithValueExists('CreditAmoutnt_GLEntry',GLEntry."Credit Amount");
        LibraryReportDataset.AssertElementWithValueExists('DebitAmount_GLEntry',GLEntry."Debit Amount");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDayBookReport@1500014(DocumentNo@1500001 : Code[20]);
    VAR
      GLEntry@1500000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      REPORT.RUN(REPORT::"Day Book",TRUE,FALSE,GLEntry);
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(LibraryReportDataset.Sum('DebitAmount_GLEntry'),LibraryReportDataset.Sum('CreditAmount_GLEntry'),TotalErr);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@1500001(DocumentNo@1500006 : Code[20];LocationCode@1500002 : Code[10];Quantity@1500003 : Decimal;PurchaseOrder@1500004 : Boolean;Shipment@1500005 : Boolean);
    VAR
      ItemLedgerEntry@1500000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.FINDLAST;

      Assert.AreEqual(
        Quantity,ItemLedgerEntry.Quantity,
        STRSUBSTNO(InvalidQuantityErr,ItemLedgerEntry.Quantity,Quantity));

      IF PurchaseOrder THEN
        Assert.AreEqual(
          0,ItemLedgerEntry."Invoiced Quantity",
          STRSUBSTNO(InvalidQuantityErr,ItemLedgerEntry."Invoiced Quantity",0))
      ELSE
        Assert.AreEqual(
          Quantity,ItemLedgerEntry."Invoiced Quantity",
          STRSUBSTNO(InvalidQuantityErr,ItemLedgerEntry."Invoiced Quantity",Quantity));

      IF Shipment THEN
        Assert.AreEqual(
          0,ItemLedgerEntry."Remaining Quantity",
          STRSUBSTNO(InvalidQuantityErr,ItemLedgerEntry."Remaining Quantity",0))
      ELSE
        Assert.AreEqual(
          Quantity,ItemLedgerEntry."Remaining Quantity",
          STRSUBSTNO(InvalidQuantityErr,ItemLedgerEntry."Remaining Quantity",Quantity));
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500038(DocumentNo@1500001 : Code[20];Amount@1500002 : Decimal);
    VAR
      GLEntry@1500004 : Record 17;
      CreditAmount@1500007 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500068(DocumentNo@1500002 : Code[20];ExpectedCount@1500001 : Integer);
    VAR
      DummyGLEntry@1500000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    PROCEDURE VerifyCheckLedgerEntry@1500046(GenJournalLine@1500002 : Record 81;EntryStatus@1500001 : Option;StaleCheque@1500000 : Boolean);
    VAR
      CheckLedgerEntry@1500003 : Record 272;
    BEGIN
      WITH CheckLedgerEntry DO BEGIN
        SETRANGE("Document No.",GenJournalLine."Document No.");
        SETRANGE("Bank Account No.",GenJournalLine."Bal. Account No.");
        FINDFIRST;
        TESTFIELD("Bank Payment Type",GenJournalLine."Bank Payment Type");
        TESTFIELD("Entry Status",EntryStatus);
        TESTFIELD(Amount,GenJournalLine.Amount);
        TESTFIELD("Stale Cheque",StaleCheque);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchRcptAndSalesShipmentHeader@1500066(DocumentNo@1500002 : Code[20];DocumentType@1500000 : 'Sales,Purchase');
    VAR
      PurchRcptHeader@1500003 : Record 120;
      SalesShipmentHeader@1500001 : Record 110;
    BEGIN
      CASE DocumentType OF
        DocumentType::Sales:
          BEGIN
            SalesShipmentHeader.SETRANGE("No.",DocumentNo);
            SalesShipmentHeader.FINDFIRST;
          END;
        DocumentType::Purchase:
          BEGIN
            PurchRcptHeader.SETRANGE("No.",DocumentNo);
            PurchRcptHeader.FINDFIRST;
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyBankAccountLedgerEntry@1500065(DocumentNo@1500001 : Code[20];Amount1@1500002 : Decimal);
    VAR
      BankAccountLedgerEntry@1500000 : Record 271;
    BEGIN
      WITH BankAccountLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        TESTFIELD(Open,TRUE);
        TESTFIELD("Stale Cheque",TRUE);
        TESTFIELD(Amount,Amount1);
      END;
    END;

    LOCAL PROCEDURE VerifyBankAccReconciliationLine@1500064(StatementNo@1500000 : Code[20]);
    VAR
      BankAccReconciliationLine@1500001 : Record 274;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Statement No.",StatementNo);
      BankAccReconciliationLine.FINDLAST;
      BankAccReconciliationLine.TESTFIELD(Type,BankAccReconciliationLine.Type::"Check Ledger Entry");
    END;

    LOCAL PROCEDURE VerifyBankAccReconciliationLineCount@1500100(StatementNo@1500002 : Code[20];ExpectedCount@1500001 : Integer);
    VAR
      DummyBankAccReconciliationLine@1500000 : Record 274;
    BEGIN
      DummyBankAccReconciliationLine.SETRANGE("Statement No.",StatementNo);
      Assert.RecordCount(DummyBankAccReconciliationLine,ExpectedCount);
    END;

    LOCAL PROCEDURE GetReceiptLineAndAppliedDocNo@1500063(PurchaseHeader@1500000 : Record 38;DocumentNo@1500001 : Code[20];VendorNo@1500002 : Code[20]);
    BEGIN
      WITH PurchaseHeader DO BEGIN
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,"Document Type"::Invoice,VendorNo);
        OpenPurchaseInvoiceAndGetReceiptLine("No.");
        VALIDATE("Applies-to Doc. Type","Applies-to Doc. Type"::Payment);
        VALIDATE("Applies-to Doc. No.",DocumentNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PrintCheckAndPostGenJnlLine@1500061(VAR GenJournalLine@1500000 : Record 81;BankAccountNo@1500001 : Code[20];LastCheckNo@1500002 : Code[20]);
    BEGIN
      COMMIT;
      EnqueueValuesInCheckReqPageHandler(BankAccountNo,LastCheckNo);
      REPORT.RUN(REPORT::Check);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE SuggestLines@1500106(BankAccReconciliation@1500002 : Record 273;BankAccount@1500001 : Record 270;IncludeCheck@1500000 : Boolean);
    VAR
      SuggestBankAccReconLines@1500003 : Report 1496;
    BEGIN
      CLEAR(SuggestBankAccReconLines);
      BankAccount.SETRANGE("No.",BankAccount."No.");
      WITH SuggestBankAccReconLines DO BEGIN
        SETTABLEVIEW(BankAccount);
        InitializeRequest(0D,WORKDATE,IncludeCheck);
        USEREQUESTPAGE(FALSE);
        SetStmt(BankAccReconciliation);
        RUN;
      END;
    END;

    LOCAL PROCEDURE VoidCheck@1500060(DocumentNo@1500001 : Code[20]);
    VAR
      CheckLedgerEntry@1500000 : Record 272;
      CheckLedgerEntries@1500002 : TestPage 374;
    BEGIN
      CheckLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CheckLedgerEntry.FINDFIRST;
      WITH CheckLedgerEntries DO BEGIN
        OPENEDIT;
        Action36.INVOKE;
      END;
    END;

    LOCAL PROCEDURE StaleCheck@1500058(DocumentNo@1500001 : Code[20];Date1@1500003 : Boolean);
    VAR
      CheckLedgerEntry@1500000 : Record 272;
      CheckLedgerEntries@1500002 : TestPage 374;
    BEGIN
      IF Date1 THEN
        WORKDATE := CALCDATE('<' + FORMAT(3) + 'M>',WORKDATE);
      CheckLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CheckLedgerEntry.FINDFIRST;
      WITH CheckLedgerEntries DO BEGIN
        OPENEDIT;
        Action1500000.INVOKE;
      END;
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500056();
    VAR
      CheckLedgerEntry@1500000 : Record 272;
    BEGIN
      CheckLedgerEntry.DELETEALL;
    END;

    LOCAL PROCEDURE OpenPurchaseInvoiceAndGetReceiptLine@1500107(No@1500000 : Code[20]);
    VAR
      PurchaseInvoice@1500001 : TestPage 51;
    BEGIN
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.FILTER.SETFILTER("No.",No);
      PurchaseInvoice.PurchLines.GetReceiptLines.INVOKE;
    END;

    LOCAL PROCEDURE ReleasedLCValue@1500072(LCDetail@1500001 : Record 16300);
    VAR
      LCDetailList@1500000 : TestPage 16311;
    BEGIN
      LCDetailList.OPENEDIT;
      LCDetailList.FILTER.SETFILTER("No.",LCDetail."No.");
      LCDetailList.Action1280043.INVOKE;
    END;

    LOCAL PROCEDURE AmendmentLCValue@1500071(LCDetail@1500001 : Record 16300);
    VAR
      LCDetailList@1500000 : TestPage 16311;
    BEGIN
      LCDetailList.OPENEDIT;
      LCDetailList.FILTER.SETFILTER("No.",LCDetail."No.");
      LCDetailList.Action1280044.INVOKE;
    END;

    LOCAL PROCEDURE GetStaleChequeStipulatedPeriod@1500083(BankAccount@1500002 : Record 270;StaleChequeStipulatedPeriod@1500001 : Text) : Text;
    BEGIN
      ASSERTERROR EVALUATE(BankAccount."Stale Cheque Stipulated Period",StaleChequeStipulatedPeriod);
      EXIT(GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE EnqueueValuesInCheckReqPageHandler@1500070(BankAccountNo@1500000 : Code[20];LastCheckNo@1500001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(BankAccountNo);
      LibraryVariableStorage.Enqueue(LastCheckNo);
    END;

    [ModalPageHandler]
    PROCEDURE ConfirmFinancialStaleModelPage@1500075(VAR ConfirmFinancialStale@1500000 : TestPage 13740);
    VAR
      VoidType@1500001 : 'Unapply and Stale check,Stale check only';
    BEGIN
      ConfirmFinancialStale.VoidType.SETVALUE(VoidType::"Stale check only");
      ConfirmFinancialStale.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE LCAmendedDetailsModelPage@1500074(VAR LCAmendedDetails@1500000 : TestPage 16312);
    BEGIN
      LCAmendedDetails."Expiry Date".SETVALUE(WORKDATE);
      LCAmendedDetails."Bank Amended No.".SETVALUE(LibraryRandom.RandInt(10));
      LCAmendedDetails.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VoucherAccountsHandler@1500177(VAR VoucherAccounts@1500000 : TestPage 16575);
    VAR
      AccountNo@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AccountNo);
      VoucherAccounts."Account Type".SETVALUE(GLAccountType);
      VoucherAccounts."Account No.".SETVALUE(AccountNo);
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderStatisticsModelPage@1500073(VAR SalesOrderStatistics@1500000 : TestPage 402);
    BEGIN
      SalesOrderStatistics.InvDiscountAmount_General.SETVALUE(LibraryRandom.RandDec(10,2));
      SalesOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReceiptLinesPageHandler@1500110(VAR GetReceiptLines@1500000 : TestPage 5709);
    BEGIN
      GetReceiptLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500029(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GenJournalTemplate.Name);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CashBookRPH@1500111(VAR CashBook@1500000 : TestRequestPage 16565);
    VAR
      LocationCode@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LocationCode);
      CashBook.Control1500000.SETVALUE(TRUE);
      CashBook.Control1500002.SETVALUE(TRUE);
      CashBook.Control1500004.SETVALUE(TRUE);
      CashBook.Control1500007.SETVALUE(LocationCode);
      CashBook.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE BankBookRPH@1500017(VAR BankBook@1500000 : TestRequestPage 16566);
    VAR
      LocationCode@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LocationCode);
      BankBook.Control1500000.SETVALUE(TRUE);
      BankBook.Control1500002.SETVALUE(TRUE);
      BankBook.Control1500004.SETVALUE(TRUE);
      BankBook.Control1500007.SETVALUE(LocationCode);
      BankBook.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE LedgerRPH@1500003(VAR Ledger@1500000 : TestRequestPage 16563);
    VAR
      LocationCode@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LocationCode);
      Ledger.Control1500000.SETVALUE(TRUE);
      Ledger.Control1500002.SETVALUE(TRUE);
      Ledger.Control1500004.SETVALUE(TRUE);
      Ledger.Control1500007.SETVALUE(LocationCode);
      Ledger.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CheckRequestPageHandler@1500112(VAR CheckRequestPage@1500002 : TestRequestPage 1401);
    VAR
      LastCheckNo@1500001 : Variant;
      BankAccountNo@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BankAccountNo);
      LibraryVariableStorage.Dequeue(LastCheckNo);
      CheckRequestPage.BankAccount.SETVALUE(FORMAT(BankAccountNo));
      CheckRequestPage.LastCheckNo.SETVALUE(FORMAT(LastCheckNo));
      CheckRequestPage.OneCheckPerVendorPerDocumentNo.SETVALUE(TRUE);
      CheckRequestPage.ReprintChecks.SETVALUE(TRUE);
      CheckRequestPage.SAVEASPDF(FORMAT(CREATEGUID));
    END;

    [RequestPageHandler]
    PROCEDURE DayBookRequestPageHandler@1500010(VAR DayBook@1500000 : TestRequestPage 16562);
    BEGIN
      DayBook.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500101(Question@1500200 : Text;VAR Reply@1500201 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500102(Message@1500203 : Text[250]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

