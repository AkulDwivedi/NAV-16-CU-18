OBJECT Codeunit 136403 Resource Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TempDocumentEntry@1004 : TEMPORARY Record 265;
      LibraryERM@1009 : Codeunit 131300;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryResource@1003 : Codeunit 130511;
      IsInitialized@1002 : Boolean;
      TemplateName@1006 : Code[20];
      UnitPriceError@1008 : TextConst 'ENU=Unit Price must be equal.';

    LOCAL PROCEDURE Initialize@11();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Clear global variable.
      TemplateName := '';
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      IsInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,NavigatePageHandler)]
    PROCEDURE ResourceNavigation@1();
    VAR
      ResJournalLine@1001 : Record 207;
      ResLedgerEntry@1006 : Record 203;
      Navigate@1005 : Page 344;
      ResourceNo@1000 : Code[20];
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test the functionality of Navigation from Navigation pane on Resource Planning.

      // 1. Setup: Create new Resource, Resource Journal Line.
      Initialize;
      ResourceNo := CreateResource;
      CreateMultipleJournalLines(ResJournalLine,ResourceNo);
      DocumentNo := ResJournalLine."Document No.";  // Assign Value in Global Variable.

      // 2. Exercise: Post Resource Journal Line and open the Navigate page.
      LibraryResource.PostResourceJournalLine(ResJournalLine);
      Navigate.SetDoc(WORKDATE,DocumentNo);
      Navigate.RUN;

      // 3. Verify: Verify number of entries for Res. Ledger Entry table.
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      VerifyNavigateRecords(TempDocumentEntry,DATABASE::"Res. Ledger Entry",ResLedgerEntry.COUNT);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE ResourceJournalPosting@4();
    VAR
      TempResJournalLine@1002 : TEMPORARY Record 207;
      ResJournalLine@1000 : Record 207;
      ResJournalBatch@1003 : Record 236;
    BEGIN
      // Test the Posting of Resource Journal Line.

      // 1. Setup: Create Resource, Resource Journal Template, Resource Journal Batch and create Resource Journal Line.
      Initialize;
      FindResourceJournalBatch(ResJournalBatch);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,CreateResource);
      TempResJournalLine := ResJournalLine;

      // 2. Exercise: Post the Resource Journal Line.
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 3. Verify: Verify that both the Resource Journal Line and Resource Ledger Entry have same Resource No and same Quantity.
      VerifyResourceLedgerEntry(TempResJournalLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE PostJournalWithDifferentBatch@18();
    VAR
      ResJournalLine@1002 : Record 207;
      TempResJournalLine@1005 : TEMPORARY Record 207;
      TempResJournalLine2@1004 : TEMPORARY Record 207;
      ResJournalTemplate@1000 : Record 206;
      ResJournalBatch@1001 : Record 236;
      Resource@1003 : Record 156;
    BEGIN
      // Test the Creation of Resource Journal Template, assign Resource Journal Batches and Resource Journal Line Posting.

      // 1. Setup: Create Resource Journal Template, Create Resource Batch.
      Initialize;
      LibraryResource.FindResource(Resource);
      CreateResourceJournalTemplate(ResJournalTemplate);
      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,ResJournalTemplate.Name);

      // 2. Exercise: Create and Post The Resource Journal Line.
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,Resource."No.");
      TempResJournalLine := ResJournalLine;
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      CLEAR(ResJournalLine);
      CLEAR(ResJournalBatch);
      CreateResourceJournalTemplate(ResJournalTemplate);
      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,Resource."No.");
      TempResJournalLine2 := ResJournalLine;
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 3. Verify: Verify that both the Resource Journal Line and Resource Ledger Entry have same Resource No, same Quantity,same Direct
      // Unit Cost for this particular Resource Journal Batch.
      VerifyResourceLedgerEntry(TempResJournalLine);
      VerifyResourceLedgerEntry(TempResJournalLine2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE PostRecurringJournalNewBatch@6();
    VAR
      ResJournalLine@1000 : Record 207;
      TempResJournalLine@1008 : TEMPORARY Record 207;
      TempResJournalLine2@1011 : TEMPORARY Record 207;
      ResJournalBatch@1003 : Record 236;
      Resource@1001 : Record 156;
    BEGIN
      // Test the Posting of Resource Journal line using the Recurring Resource Journal Template and Recurring Resource Journal Batch.

      // 1. Setup: Find Recurring Resource Journal Template, Create Recurring Resource Journal Batch.
      Initialize;
      LibraryResource.FindResource(Resource);
      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,CreateRecurringJournalTemplate);

      // 2. Exercise: Create Resource Journal Line and Post Resource Journal Line.
      JournalLineRecurringFrequency(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,Resource."No.");
      TempResJournalLine := ResJournalLine;
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,ResJournalLine."Journal Template Name");
      JournalLineRecurringFrequency(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,Resource."No.");
      TempResJournalLine2 := ResJournalLine;
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 3. Verify: Verify that both the Resource Journal Line and Resource Ledger Entry have same fields for this particular Resource
      // Journal Batch.Verify that Resource Journal Line has one Extra line created after posting of Recurring Journal.
      VerifyResourceLedgerEntry(TempResJournalLine);
      VerifyResourceLedgerEntry(TempResJournalLine2);
      ResJournalLine.GET(
        TempResJournalLine."Journal Template Name",TempResJournalLine."Journal Batch Name",TempResJournalLine."Line No.");
      VerifyRecurringJournalLine(TempResJournalLine);
      ResJournalLine.GET(
        TempResJournalLine2."Journal Template Name",TempResJournalLine2."Journal Batch Name",TempResJournalLine2."Line No.");
      VerifyRecurringJournalLine(TempResJournalLine2);
    END;

    [Test]
    PROCEDURE CheckValueOnResourcePage@8();
    VAR
      TempResource@1002 : TEMPORARY Record 156;
    BEGIN
      // Create New Resource by Page and verify it.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Resource by Resource Card Page.
      InsertValuesOnTempResource(TempResource);
      InsertValuesOnResourceCard(TempResource);

      // 3. Verify: Check value on Resource.
      VerifyValuesOnResource(TempResource);
    END;

    [Test]
    [HandlerFunctions(ResJournalTemplateListHandler)]
    PROCEDURE CheckResourceJournalLineValues@13();
    VAR
      Resource@1001 : Record 156;
      ResJournalBatch@1002 : Record 236;
      ResourceJournal@1000 : TestPage 207;
    BEGIN
      // Check Resource Journal Line values by Page.

      // 1. Setup: Create Resource.
      Initialize;
      Resource.GET(CreateResource);
      FindResourceJournalBatch(ResJournalBatch);
      TemplateName := ResJournalBatch."Journal Template Name";  // Assign global variable.

      // 2. Exercise: Create Resource Journal Line by page.
      ResourceJournal.OPENEDIT;
      CreateResourceJournalLineByPage(ResourceJournal,ResJournalBatch.Name,Resource."No.",'');
      ResourceJournal.OK.INVOKE;

      // 3. Verify: Check Resource Journal Line values.
      VerifyResourceJournalLineUnitPrice(Resource."No.",'',Resource."Unit Price",ResJournalBatch.Name);
    END;

    [Test]
    [HandlerFunctions(ResJournalTemplateListHandler)]
    PROCEDURE CheckResourcePriceWithAndWithoutWorkType@7();
    VAR
      Resource@1001 : Record 156;
      ResourcePrice@1002 : Record 201;
      ResourcePrice2@1007 : Record 201;
      ResJournalBatch@1003 : Record 236;
      WorkType@1004 : Record 200;
      ResourceJournal@1000 : TestPage 207;
    BEGIN
      // Check Resource Price on Resource Journal Line with and without Work Type by Page.

      // 1. Setup: Create Resource and Resource Price.
      Initialize;
      Resource.GET(CreateResource);
      LibraryResource.CreateWorkType(WorkType);
      CreateResourcePrice(ResourcePrice,ResourcePrice.Type::Resource,Resource."No.",'','');
      CreateResourcePrice(ResourcePrice2,ResourcePrice.Type::Resource,Resource."No.",WorkType.Code,'');
      FindResourceJournalBatch(ResJournalBatch);
      TemplateName := ResJournalBatch."Journal Template Name";  // Assign global variable.

      // 2. Exercise: Create Resource Journal Lines without and with Work Type with same Document No.
      ResourceJournal.OPENEDIT;
      CreateResourceJournalLineByPage(ResourceJournal,ResJournalBatch.Name,Resource."No.",'');
      ResourceJournal.NEW;
      CreateResourceJournalLineByPage(ResourceJournal,ResJournalBatch.Name,Resource."No.",WorkType.Code);
      ResourceJournal.OK.INVOKE;

      // 3. Verify: Check Unit Price of Resource Journal Lines.
      VerifyResourceJournalLineUnitPrice(Resource."No.",'',ResourcePrice."Unit Price",ResJournalBatch.Name);
      VerifyResourceJournalLineUnitPrice(Resource."No.",WorkType.Code,ResourcePrice2."Unit Price",ResJournalBatch.Name);
    END;

    [Test]
    [HandlerFunctions(ResJournalTemplateListHandler,ConfirmHandlerTrue)]
    PROCEDURE CheckResourcePriceAfterUseBatchJob@69();
    VAR
      Resource@1006 : Record 156;
      ResourcePrice@1007 : Record 201;
      ResourcePrice2@1002 : Record 201;
      ResJournalBatch@1005 : Record 236;
      WorkType@1000 : Record 200;
      ResourceJournal@1003 : TestPage 207;
      UnitPrice@1008 : Decimal;
      UnitPrice2@1009 : Decimal;
    BEGIN
      // Check Resource Price on Resource Journal Line after used batch job Resource Price Change Resource and Resource Price Change Resource Prices.

      // 1. Setup: Create Resource and Resource Price.
      Initialize;
      Resource.GET(CreateResource);
      LibraryResource.CreateWorkType(WorkType);
      CreateResourcePrice(ResourcePrice,ResourcePrice.Type::Resource,Resource."No.",'','');
      CreateResourcePrice(ResourcePrice2,ResourcePrice.Type::Resource,Resource."No.",WorkType.Code,'');
      FindResourceJournalBatch(ResJournalBatch);
      TemplateName := ResJournalBatch."Journal Template Name";  // Assign global variable.

      // Create Resource Journal Lines without and with Work Type with same Document No.
      ResourceJournal.OPENEDIT;
      CreateResourceJournalLineByPage(ResourceJournal,ResJournalBatch.Name,Resource."No.",'');
      ResourceJournal.NEW;
      CreateResourceJournalLineByPage(ResourceJournal,ResJournalBatch.Name,Resource."No.",WorkType.Code);
      ResourceJournal.OK.INVOKE;

      // 2. Exercise: Run Suggest Resource Price Change Resource, Suggest Resource Price Change Price and Implement Resource Price Change report.
      RunSuggestResPriceChgResBatchJob(Resource."No.",'');
      RunSuggestResPriceChgPriceBatchJob(Resource."No.",WorkType.Code);
      UnitPrice := GetResourcePrice(Resource."No.",'');
      UnitPrice2 := GetResourcePrice(Resource."No.",WorkType.Code);
      RunImplementResPriceChangeBatchJob(Resource."No.");

      // 3. Verify: Check Unit price in Resource Price.
      VerifyResourcePrice(Resource."No.",'',UnitPrice);
      VerifyResourcePrice(Resource."No.",WorkType.Code,UnitPrice2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE BlankDescriptionOnResourceLedgerEntry@40();
    BEGIN
      // Test Blank Description in Resource Ledger Entries after Posting Resource Journal Line with Blank Description.

      Initialize;
      PostResourceJournalWithDescription('');  // Passing Blank Value for Description.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE DescriptionOnResourceLedgerEntry@12();
    BEGIN
      // Test Description updated correctly in Resource Ledger Entries after Posting Resource Journal Line with some Description.

      Initialize;
      PostResourceJournalWithDescription(LibraryUtility.GenerateGUID);  // Passing any Value for Description.
    END;

    LOCAL PROCEDURE PostResourceJournalWithDescription@15(Description@1005 : Text[50]);
    VAR
      ResJournalLine@1000 : Record 207;
      ResJournalBatch@1003 : Record 236;
      ResLedgerEntry@1002 : Record 203;
      TempResJournalLine@1001 : TEMPORARY Record 207;
    BEGIN
      // 1. Setup: Create Resource Journal Line and update Description as on it.
      ClearResourceJournalLines(ResJournalBatch);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,CreateResource);
      UpdateDescriptionOnResourceJournalLine(ResJournalLine,Description);
      TempResJournalLine := ResJournalLine;

      // 2. Exercise: Post the Resource Journal Line.
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 3. Verify: Verify that Description updated correctly in Resource Ledger Entry.
      FindResourceLedgerEntry(ResLedgerEntry,TempResJournalLine."Document No.",ResJournalBatch.Name,TempResJournalLine."Resource No.");
      ResLedgerEntry.TESTFIELD(Description,Description);
    END;

    [Test]
    PROCEDURE WorkTypeWithUOMOnResourceJournalLine@32();
    VAR
      ResourceUnitOfMeasure@1001 : Record 205;
      ResJournalLine@1000 : Record 207;
    BEGIN
      // Test various Costs and Prices on Resource Journal Line after updating Work Type with Unit of Measure containing larger Quantity Per Unit of Measure.

      // 1. Setup: Create Resource and update a new Unit of Measure for it.
      Initialize;
      CreateResourceAndUpdateUOM(ResourceUnitOfMeasure);

      // 2. Exercise. Create Resource Journal Line with Work Type contains Resource Unit of Measure.
      CreateAndUpdateResourceJournalLine(ResJournalLine,ResourceUnitOfMeasure."Resource No.",ResourceUnitOfMeasure.Code);

      // 3. Verify: Verify Costs and Prices updated correctly on Resource Journal Line.
      VerifyCostAndPriceOnResourceJornalLine(ResJournalLine,ResourceUnitOfMeasure);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE WorkTypeWithUOMAfterPostingResourceJournalLine@81();
    VAR
      ResourceUnitOfMeasure@1001 : Record 205;
      ResJournalLine@1000 : Record 207;
      ResLedgerEntry@1002 : Record 203;
      TempResJournalLine@1003 : TEMPORARY Record 207;
    BEGIN
      // Test Quantity Per Unit of Measure and Base Quantity in Resource Ledger Entry after Posting Resource Journal with Work Type having Unit Of Measure attached.

      // 1. Setup: Create Resource and update a new Unit of Measure for it, Create Resource Journal Line with Work Type contains Resource Unit of Measure.
      Initialize;
      CreateResourceAndUpdateUOM(ResourceUnitOfMeasure);
      CreateAndUpdateResourceJournalLine(ResJournalLine,ResourceUnitOfMeasure."Resource No.",ResourceUnitOfMeasure.Code);
      TempResJournalLine := ResJournalLine;

      // 2. Exercise.
      LibraryResource.PostResourceJournalLine(ResJournalLine);

      // 3. Verify: Verify Qty. per Unit of Measure and Quantity (Base) updated correctly on Resource Ledger Entries.
      FindResourceLedgerEntry(
        ResLedgerEntry,TempResJournalLine."Document No.",TempResJournalLine."Journal Batch Name",ResourceUnitOfMeasure."Resource No.");
      ResLedgerEntry.TESTFIELD("Qty. per Unit of Measure",ResourceUnitOfMeasure."Qty. per Unit of Measure");
      ResLedgerEntry.TESTFIELD("Quantity (Base)",TempResJournalLine.Quantity * ResourceUnitOfMeasure."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE ClearResourceJournalLines@17(VAR ResJournalBatch@1000 : Record 236);
    VAR
      ResJournalLine@1001 : Record 207;
    BEGIN
      FindResourceJournalBatch(ResJournalBatch);
      ResJournalLine.SETRANGE("Journal Template Name",ResJournalBatch."Journal Template Name");
      ResJournalLine.SETRANGE("Journal Batch Name",ResJournalBatch.Name);
      ResJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateResourceJournalLine@46(VAR ResJournalLine@1001 : Record 207;ResourceNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10]);
    VAR
      ResJournalBatch@1000 : Record 236;
    BEGIN
      ClearResourceJournalLines(ResJournalBatch);
      CreateResourceJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,ResourceNo);
      ResJournalLine.VALIDATE("Work Type Code",CreateAndUpdateWorkType(UnitOfMeasureCode));  // Update Work Type Code on Resource Journal Line.
      ResJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateWorkType@59(UnitOfMeasureCode@1000 : Code[10]) : Code[10];
    VAR
      WorkType@1001 : Record 200;
    BEGIN
      LibraryResource.CreateWorkType(WorkType);
      WorkType.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WorkType.MODIFY(TRUE);
      EXIT(WorkType.Code);
    END;

    LOCAL PROCEDURE CreateResourceAndUpdateUOM@24(VAR ResourceUnitOfMeasure@1000 : Record 205);
    VAR
      Resource@1001 : Record 156;
    BEGIN
      Resource.GET(CreateResource);
      LibraryResource.CreateResourceUnitOfMeasure(ResourceUnitOfMeasure,Resource."No.",FindUnitOfMeasure,1);
      ResourceUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",1 + RANDOM(10));  // Take Random Quantity greater than One, value important for test.
      ResourceUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResource@33() : Code[20];
    BEGIN
      EXIT(LibraryResource.CreateResourceNo);
    END;

    LOCAL PROCEDURE CreateResourcePrice@115(VAR ResourcePrice@1004 : Record 201;Type@1003 : Option;ResourceNo@1002 : Code[20];WorkTypeCode@1001 : Code[10];CurrencyCode@1000 : Code[10]);
    BEGIN
      LibraryResource.CreateResourcePrice(ResourcePrice,Type,ResourceNo,WorkTypeCode,CurrencyCode);
      ResourcePrice.VALIDATE("Unit Price",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      ResourcePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRecurringJournalTemplate@25() : Code[10];
    VAR
      ResJournalTemplate@1000 : Record 206;
    BEGIN
      LibraryResource.CreateResourceJournalTemplate(ResJournalTemplate);
      ResJournalTemplate.VALIDATE(Recurring,TRUE);
      ResJournalTemplate.MODIFY(TRUE);
      EXIT(ResJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateResourceJournalTemplate@14(VAR ResJournalTemplate@1000 : Record 206);
    BEGIN
      LibraryResource.CreateResourceJournalTemplate(ResJournalTemplate);
      ResJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ResJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourceJournalLineByPage@29(VAR ResourceJournal@1000 : TestPage 207;BatchName@1001 : Code[10];ResourceNo@1007 : Code[20];WorkTypeCode@1004 : Code[10]);
    VAR
      ResJournalLine@1002 : Record 207;
    BEGIN
      ResourceJournal.CurrentJnlBatchName.SETVALUE(BatchName);
      ResourceJournal."Entry Type".SETVALUE(ResJournalLine."Entry Type"::Sale);
      ResourceJournal."Document No.".SETVALUE(BatchName);
      ResourceJournal."Resource No.".SETVALUE(ResourceNo);
      ResourceJournal."Work Type Code".SETVALUE(WorkTypeCode);
      ResourceJournal.Quantity.SETVALUE(RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Value is not important here.
    END;

    LOCAL PROCEDURE CreateResourceJournalLine@21(VAR ResJournalLine@1000 : Record 207;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10];ResourceNo@1003 : Code[20]);
    BEGIN
      LibraryResource.CreateResJournalLine(ResJournalLine,JournalTemplateName,JournalBatchName);
      ResJournalLine.VALIDATE("Resource No.",ResourceNo);
      ResJournalLine.VALIDATE("Posting Date",WORKDATE);
      ResJournalLine.VALIDATE("Document No.",ResourceNo);

      // Use Random Quantity because value is not important.
      ResJournalLine.VALIDATE(Quantity,RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      ResJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleJournalLines@3(VAR ResJournalLine@1000 : Record 207;ResourceNo@1001 : Code[20]);
    VAR
      ResJournalBatch@1003 : Record 236;
      NoOfRecords@1002 : Integer;
    BEGIN
      FindResourceJournalBatch(ResJournalBatch);
      FOR NoOfRecords := 1 TO 1 + RANDOM(5) DO   // Use Random Number because value is not important.
        CreateResourceJournalLine(ResJournalLine,ResJournalBatch."Journal Template Name",ResJournalBatch.Name,ResourceNo);
    END;

    LOCAL PROCEDURE FindResourceLedgerEntry@45(VAR ResLedgerEntry@1000 : Record 203;DocumentNo@1001 : Code[20];JournalBatchName@1002 : Code[10];ResourceNo@1003 : Code[20]);
    BEGIN
      ResLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ResLedgerEntry.SETRANGE("Journal Batch Name",JournalBatchName);
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      ResLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindUnitOfMeasure@27() : Code[10];
    VAR
      UnitOfMeasure@1000 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      EXIT(UnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE GetResourcePrice@48(ResourceNo@1000 : Code[20];WorkTypeCode@1001 : Code[10]) : Decimal;
    VAR
      ResourcePriceChange@1002 : Record 335;
    BEGIN
      ResourcePriceChange.SETRANGE(Code,ResourceNo);
      ResourcePriceChange.SETRANGE("Work Type Code",WorkTypeCode);
      ResourcePriceChange.FINDFIRST;
      EXIT(ResourcePriceChange."New Unit Price");
    END;

    LOCAL PROCEDURE InsertValuesOnResourceCard@60(Resource@1000 : Record 156);
    VAR
      ResourceCard@1001 : TestPage 76;
    BEGIN
      ResourceCard.OPENNEW;
      ResourceCard."No.".SETVALUE(Resource."No.");
      ResourceCard.Name.SETVALUE(Resource.Name);
      ResourceCard."Direct Unit Cost".SETVALUE(Resource."Direct Unit Cost");
      ResourceCard."Unit Price".SETVALUE(Resource."Unit Price");
      ResourceCard."Gen. Prod. Posting Group".SETVALUE(Resource."Gen. Prod. Posting Group");
      ResourceCard."VAT Prod. Posting Group".SETVALUE(Resource."VAT Prod. Posting Group");
      ResourceCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE InsertValuesOnTempResource@30(VAR TempResource@1001 : TEMPORARY Record 156);
    VAR
      GeneralPostingSetup@1004 : Record 252;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");

      TempResource.INIT;
      TempResource.VALIDATE("No.",LibraryUtility.GenerateRandomCode(TempResource.FIELDNO("No."),DATABASE::Resource));
      TempResource.VALIDATE(Name,TempResource."No.");  // Validate Name as No. because value is not important.
      TempResource.VALIDATE("Direct Unit Cost",RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Value is not important here.
      TempResource.VALIDATE("Unit Price",RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Value is not important here.
      TempResource.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      TempResource.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      TempResource.INSERT(TRUE);
    END;

    LOCAL PROCEDURE JournalLineRecurringFrequency@19(VAR ResJournalLine@1000 : Record 207;JournalTemplateName@1002 : Code[10];JournalBatchName@1001 : Code[10];ResourceNo@1003 : Code[20]);
    VAR
      RecurringFrequency@1008 : DateFormula;
    BEGIN
      CreateResourceJournalLine(ResJournalLine,JournalTemplateName,JournalBatchName,ResourceNo);
      ResJournalLine.VALIDATE("Recurring Method",ResJournalLine."Recurring Method"::Fixed);
      EVALUATE(RecurringFrequency,'<' + FORMAT(RANDOM(5)) + 'M>'); // Use Random Number because value is not important.
      ResJournalLine.VALIDATE("Recurring Frequency",RecurringFrequency);
      ResJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindResourceJournalBatch@20(VAR ResJournalBatch@1000 : Record 236);
    VAR
      ResJournalTemplate@1001 : Record 206;
    BEGIN
      ResJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryResource.FindResJournalTemplate(ResJournalTemplate);
      LibraryResource.FindResJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
    END;

    LOCAL PROCEDURE RunImplementResPriceChangeBatchJob@43(ResourceNo@1002 : Code[20]);
    VAR
      ResourcePriceChange@1001 : Record 335;
      ImplementResPriceChange@1000 : Report 1193;
    BEGIN
      CLEAR(ImplementResPriceChange);
      ResourcePriceChange.SETRANGE(Type,ResourcePriceChange.Type::Resource);
      ResourcePriceChange.SETRANGE(Code,ResourceNo);
      ImplementResPriceChange.SETTABLEVIEW(ResourcePriceChange);
      ImplementResPriceChange.USEREQUESTPAGE(FALSE);
      ImplementResPriceChange.RUN;
    END;

    LOCAL PROCEDURE RunSuggestResPriceChgResBatchJob@26(ResourceNo@1000 : Code[20];WorkTypeCode@1003 : Code[10]);
    VAR
      Resource@1001 : Record 156;
      SuggestResPriceChgRes@1002 : Report 1191;
    BEGIN
      CLEAR(SuggestResPriceChgRes);
      Resource.SETRANGE("No.",ResourceNo);
      SuggestResPriceChgRes.InitializeCopyToResPrice('',WorkTypeCode);
      SuggestResPriceChgRes.InitializeRequest(0,RANDOM(10) + LibraryUtility.GenerateRandomFraction,'',TRUE);  // Value is not important here.
      SuggestResPriceChgRes.SETTABLEVIEW(Resource);
      SuggestResPriceChgRes.USEREQUESTPAGE(FALSE);
      SuggestResPriceChgRes.RUN;
    END;

    LOCAL PROCEDURE RunSuggestResPriceChgPriceBatchJob@23(ResourceNo@1000 : Code[20];WorkTypeCode@1003 : Code[10]);
    VAR
      ResourcePrice@1002 : Record 201;
      SuggestResPriceChgPrice@1001 : Report 1192;
    BEGIN
      CLEAR(SuggestResPriceChgPrice);
      ResourcePrice.SETRANGE(Type,ResourcePrice.Type);
      ResourcePrice.SETRANGE(Code,ResourceNo);
      SuggestResPriceChgPrice.InitializeCopyToResPrice('',WorkTypeCode);
      SuggestResPriceChgPrice.InitializeRequest(0,RANDOM(10) + LibraryUtility.GenerateRandomFraction,'',TRUE);  // Value is not important here.
      SuggestResPriceChgPrice.SETTABLEVIEW(ResourcePrice);
      SuggestResPriceChgPrice.USEREQUESTPAGE(FALSE);
      SuggestResPriceChgPrice.RUN;
    END;

    LOCAL PROCEDURE UpdateDescriptionOnResourceJournalLine@37(ResJournalLine@1001 : Record 207;Description@1000 : Text[50]);
    BEGIN
      ResJournalLine.VALIDATE(Description,Description);
      ResJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCostAndPriceOnResourceJornalLine@57(ResJournalLine@1000 : Record 207;ResourceUnitOfMeasure@1002 : Record 205);
    VAR
      Resource@1001 : Record 156;
    BEGIN
      Resource.GET(ResourceUnitOfMeasure."Resource No.");
      ResJournalLine.TESTFIELD("Qty. per Unit of Measure",ResourceUnitOfMeasure."Qty. per Unit of Measure");
      ResJournalLine.TESTFIELD("Unit Cost",Resource."Unit Cost" * ResourceUnitOfMeasure."Qty. per Unit of Measure");
      ResJournalLine.TESTFIELD("Direct Unit Cost",Resource."Direct Unit Cost" * ResourceUnitOfMeasure."Qty. per Unit of Measure");
      ResJournalLine.TESTFIELD("Unit Price",Resource."Unit Price" * ResourceUnitOfMeasure."Qty. per Unit of Measure");
      ResJournalLine.TESTFIELD(
        "Total Price",ResJournalLine.Quantity * Resource."Unit Price" * ResourceUnitOfMeasure."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE VerifyNavigateRecords@10(VAR TempDocumentEntry2@1001 : TEMPORARY Record 265;TableID@1000 : Integer;NoOfRecords@1002 : Integer);
    BEGIN
      TempDocumentEntry2.SETRANGE("Table ID",TableID);
      TempDocumentEntry2.FINDFIRST;
      TempDocumentEntry2.TESTFIELD("No. of Records",NoOfRecords);
    END;

    LOCAL PROCEDURE VerifyResourceJournalLineUnitPrice@113(ResourceNo@1001 : Code[20];WorkTypeCode@1002 : Code[10];UnitPrice@1000 : Decimal;DocumentNo@1003 : Code[20]);
    VAR
      ResJournalLine@1004 : Record 207;
    BEGIN
      ResJournalLine.SETRANGE("Document No.",DocumentNo);
      ResJournalLine.SETRANGE("Resource No.",ResourceNo);
      ResJournalLine.SETRANGE("Work Type Code",WorkTypeCode);
      ResJournalLine.FINDFIRST;
      ResJournalLine.TESTFIELD("Unit Price",UnitPrice);
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@2(ResJournalLine@1003 : Record 207);
    VAR
      ResLedgerEntry@1001 : Record 203;
    BEGIN
      FindResourceLedgerEntry(
        ResLedgerEntry,ResJournalLine."Document No.",ResJournalLine."Journal Batch Name",ResJournalLine."Resource No.");
      ResLedgerEntry.TESTFIELD(Quantity,ResJournalLine.Quantity);
      ResLedgerEntry.TESTFIELD("Direct Unit Cost",ResJournalLine."Direct Unit Cost");
    END;

    LOCAL PROCEDURE VerifyResourcePrice@36(ResourceNo@1000 : Code[20];WorkTypeCode@1005 : Code[10];UnitPrice@1001 : Decimal);
    VAR
      ResourcePrice@1003 : Record 201;
      Assert@1004 : Codeunit 130000;
    BEGIN
      ResourcePrice.SETRANGE(Code,ResourceNo);
      ResourcePrice.SETRANGE("Work Type Code",WorkTypeCode);
      ResourcePrice.FINDFIRST;
      Assert.AreEqual(UnitPrice,ResourcePrice."Unit Price",UnitPriceError);
    END;

    LOCAL PROCEDURE VerifyRecurringJournalLine@22(TempResJournalLine@1001 : TEMPORARY Record 207);
    VAR
      ResJournalLine@1000 : Record 207;
    BEGIN
      ResJournalLine.SETRANGE("Journal Batch Name",TempResJournalLine."Journal Batch Name");
      ResJournalLine.SETRANGE("Document No.",TempResJournalLine."Document No.");
      ResJournalLine.FINDFIRST;
      ResJournalLine.TESTFIELD(Quantity,TempResJournalLine.Quantity);
      ResJournalLine.TESTFIELD("Unit Cost",TempResJournalLine."Unit Cost");
      ResJournalLine.TESTFIELD("Total Price",TempResJournalLine."Total Price");
      ResJournalLine.TESTFIELD("Posting Date",CALCDATE(TempResJournalLine."Recurring Frequency",WORKDATE));
    END;

    LOCAL PROCEDURE VerifyValuesOnResource@53(Resource@1000 : Record 156);
    VAR
      Resource2@1001 : Record 156;
    BEGIN
      Resource2.GET(Resource."No.");
      Resource2.TESTFIELD(Name,Resource.Name);
      Resource2.TESTFIELD("Direct Unit Cost",Resource."Direct Unit Cost");
      Resource2.TESTFIELD("Unit Price",Resource."Unit Price");
      Resource2.TESTFIELD("Gen. Prod. Posting Group",Resource."Gen. Prod. Posting Group");
      Resource2.TESTFIELD("VAT Prod. Posting Group",Resource."VAT Prod. Posting Group");
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@16(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE NavigatePageHandler@9(VAR Navigate@1000 : Page 344);
    BEGIN
      Navigate.UpdateNavigateForm(FALSE);
      Navigate.FindRecordsOnOpen;
      Navigate.ReturnDocumentEntry(TempDocumentEntry);
    END;

    [ModalPageHandler]
    PROCEDURE ResJournalTemplateListHandler@41(VAR ResJournalTemplateList@1000 : TestPage 271);
    BEGIN
      ResJournalTemplateList.FILTER.SETFILTER(Name,TemplateName);
      ResJournalTemplateList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Resource]
      1. Test the functionality of Navigation from Navigation pane on Resource Planning.
      2. Test the functionality of Resource Journal Line Posting.
      3. Test the Creation of Resource Journal Template, assign Resource Journal Batches and Resource Journal Line Posting.
      4. Test the Posting of Resource Journal line using the Recurring Resource Journal Template and Recurring Resource Batch created.
      5. Create New Resource by Page and verify it.
      6. Check Resource Journal Line values by Page.
      7. Check Resource Price on Resource Journal Line with and without Work Type by Page.
      8. Check Resource Price on Resource Journal Line after used batch job Resource Price Change Resource and Resource Price Change Resource Prices.
      9. Test Blank Description in Resource Ledger Entries after Posting Resource Journal Line with Blank Description.
      10. Test Description updated correctly in Resource Ledger Entries after Posting Resource Journal Line with some Description.
      11. Test various Costs and Prices on Resource Journal Line after updating Work Type with Unit of Measure containing larger Quantity Per Unit of Measure.
      12. Test Quantity Per Unit of Measure and Base Quantity in Resource Ledger Entry after Posting Resource Journal with Work Type having Unit Of Measure attached.

      TFS_TS_ID = 234735
      Covers Test cases:
      ----------------------------------------------------------------
      Test Function Name                                        TFS ID
      ----------------------------------------------------------------
      ResourceNavigation                                        128929

      TFS_TS_ID = 234732
      Covers Test cases:
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      --------------------------------------------------------------------------------
      ResourceJournalPosting                                                    141286
      PostJournalWithDifferentBatch, PostRecurringJournalNewBatch               141375

      TFS_TS_ID = 264627
      Covers Test cases:
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      --------------------------------------------------------------------------------
      CheckValueOnResourcePage                                                  129307

      TFS_TS_ID = 264623
      Covers Test cases:
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      --------------------------------------------------------------------------------
      CheckResourceJournalLineValues                                            129301
      CheckResourcePriceWithAndWithoutWorkType                                  129302
      CheckResourcePriceAfterUseBatchJob                                        129302

      Covers Test cases: TFS_TS_ID = 281986
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                        TFS ID
      --------------------------------------------------------------------------------------------------
      BlankDescriptionOnResourceLedgerEntry, DescriptionOnResourceLedgerEntry                   280727
      WorkTypeWithUOMOnResourceJournalLine, WorkTypeWithUOMAfterPostingResourceJournalLine      281467
    }
    END.
  }
}

