OBJECT Codeunit 131920 Library - Job
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PrefixLbl@1000 : TextConst 'ENU=ZZZ';
      TemplateNameLbl@1001 : TextConst '@@@=Suffix in Job Journal template to look for;ENU=T';
      Assert@1002 : Codeunit 130000;
      LibraryUtility@1008 : Codeunit 131000;
      NoSeriesCodeLbl@1010 : TextConst '@@@=A test code for the code in No. Series table;ENU=JOBTEST';
      ErrorMsgErr@1004 : TextConst 'ENU=Unsupported type.';
      JobNoErr@1007 : TextConst 'ENU=GLEntry."Job No."';
      LibraryERM@1023 : Codeunit 131300;
      LibrarySales@1003 : Codeunit 130509;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryRandom@1013 : Codeunit 130440;
      LibraryResource@1012 : Codeunit 130511;
      LibraryService@1006 : Codeunit 131902;
      LibraryInventory@1014 : Codeunit 132201;
      ConsumptionSource@1011 : 'Job,Service,GenJournal,Purchase';

    PROCEDURE CreateJob@4(VAR Job@1002 : Record 167);
    VAR
      JobNo@1000 : Code[20];
    BEGIN
      // create a (LCY) job for a random customer

      // Find the next available job no.
      JobNo := PrefixLbl + 'J000';
      REPEAT
        JobNo := INCSTR(JobNo);
      UNTIL NOT Job.GET(JobNo);

      Job.INIT;
      Job.VALIDATE("No.",JobNo);
      Job.INSERT(TRUE);
      Job.VALIDATE("Bill-to Customer No.",CreateCustomer);
      Job.VALIDATE("Job Posting Group",FindJobPostingGroup);
      Job.MODIFY(TRUE)
    END;

    PROCEDURE CreateJobTask@5(Job@1000 : Record 167;VAR JobTask@1001 : Record 1001);
    VAR
      JobTaskLocal@1002 : Record 1001;
      JobTaskNo@1003 : Code[20];
    BEGIN
      // Create a (posting) task for a job

      JobTaskNo := PrefixLbl + 'JT001';

      // Find the last task no. (as an integer)
      JobTaskLocal.SETRANGE("Job No.",Job."No.");
      IF JobTaskLocal.FINDLAST THEN
        JobTaskNo := INCSTR(JobTaskLocal."Job Task No.");

      JobTask.INIT;
      JobTask.VALIDATE("Job No.",Job."No.");
      JobTask.VALIDATE("Job Task No.",JobTaskNo);
      JobTask.INSERT(TRUE);

      JobTask.VALIDATE("Job Task Type",JobTask."Job Task Type"::Posting);
      JobTask.MODIFY(TRUE)
    END;

    PROCEDURE CreateJobPlanningLine@2(LineType@1002 : Integer;Type@1003 : Integer;JobTask@1000 : Record 1001;VAR JobPlanningLine@1001 : Record 1003);
    BEGIN
      // Create a job planning line for job task <JobTask> of type <LineType> for consumable type <Type>

      JobPlanningLine.INIT;
      JobPlanningLine.VALIDATE("Job No.",JobTask."Job No.");
      JobPlanningLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      JobPlanningLine.VALIDATE("Line No.",GetNextLineNo(JobPlanningLine));
      JobPlanningLine.INSERT(TRUE);

      JobPlanningLine.VALIDATE("Planning Date",WORKDATE);
      JobPlanningLine.VALIDATE("Line Type",LineType);
      JobPlanningLine.VALIDATE(Type,Type);
      JobPlanningLine.VALIDATE("No.",FindConsumable(Type));
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(100)); // 1 <= Quantity <= 100
      IF Type = GLAccountType THEN BEGIN
        JobPlanningLine.VALIDATE("Unit Cost",LibraryRandom.RandInt(10)); // 1 <= Unit Cost <= 10
        JobPlanningLine.VALIDATE("Unit Price",JobPlanningLine."Unit Cost" * (LibraryRandom.RandIntInRange(2,10) / 10)); // 10% <= Markup <= 100%
      END;
      JobPlanningLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      JobPlanningLine.MODIFY(TRUE);

      JobPlanningLine.SETRANGE("Job No.",JobTask."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobTask."Job Task No.")
    END;

    PROCEDURE CreateJobJournalLine@6(LineType@1005 : Option;JobTask@1001 : Record 1001;VAR JobJournalLine@1000 : Record 210);
    VAR
      JobJournalTemplate@1002 : Record 209;
      JobJournalBatch@1003 : Record 237;
      NoSeriesMgt@1004 : Codeunit 396;
    BEGIN
      // Create a job journal line for a job task.
      // This helper function allows to easily create multiple journal lines in a single batch.

      WITH JobJournalLine DO BEGIN
        SETRANGE("Job No.",JobTask."Job No.");
        // Setup primary keys and filters.
        IF FINDLAST THEN
          // A job journal line for this task already exists: increase line and document nos.
          VALIDATE("Line No.","Line No." + 1)
        ELSE BEGIN
          // No job journal lines exist for this task: setup the first one.
          CreateJobJournalBatch(GetJobJournalTemplate(JobJournalTemplate),JobJournalBatch);
          VALIDATE("Journal Template Name",JobJournalTemplate.Name);
          VALIDATE("Journal Batch Name",JobJournalBatch.Name);
          VALIDATE("Line No.",1);
          // Only use these template and batch.
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
        END;

        INIT;
        INSERT(TRUE);

        VALIDATE("Line Type",LineType);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        JobJournalBatch.GET(GetJobJournalTemplate(JobJournalTemplate),"Journal Batch Name");
        VALIDATE("Document No.",NoSeriesMgt.GetNextNo(JobJournalBatch."No. Series","Posting Date",FALSE));
        MODIFY(TRUE)
      END
    END;

    PROCEDURE CreateJobJournalLineForType@22(LineType@1003 : Option;ConsumableType@1002 : Option;JobTask@1001 : Record 1001;VAR JobJournalLine@1000 : Record 210);
    BEGIN
      CreateJobJournalLine(LineType,JobTask,JobJournalLine);

      // Attach requested consumable type to the created job journal line
      Attach2JobJournalLine(ConsumableType,JobJournalLine);
      JobJournalLine.VALIDATE(Description,FORMAT(LibraryUtility.GenerateGUID));
      JobJournalLine.MODIFY(TRUE)
    END;

    PROCEDURE CreateJobJournalLineForPlan@39(JobPlanningLine@1000 : Record 1003;UsageLineType@1002 : Option;Fraction@1004 : Decimal;VAR JobJournalLine@1001 : Record 210);
    VAR
      JobTask@1003 : Record 1001;
      ChangeFactor@1005 : Decimal;
    BEGIN
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage link should be enabled');

      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      CreateJobJournalLine(UsageLineType,JobTask,JobJournalLine);
      WITH JobJournalLine DO BEGIN
        VALIDATE(Type,JobPlanningLine.Type);
        VALIDATE("No.",JobPlanningLine."No.");
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        VALIDATE(Quantity,ROUND(Fraction * JobPlanningLine."Remaining Qty."));
        // unit costs, prices may change (e.g., +/- 10%)
        IF NOT IsStandardCosting(Type,"No.") THEN BEGIN
          ChangeFactor := ROUND((1 + (LibraryRandom.RandInt(21) - 11) / 100));
          VALIDATE("Unit Cost",ROUND(ChangeFactor * JobPlanningLine."Unit Cost") / JobPlanningLine.Quantity);
          VALIDATE("Unit Price",ROUND(ChangeFactor * JobPlanningLine."Unit Price") / JobPlanningLine.Quantity)
        END;
        MODIFY(TRUE)
      END
    END;

    PROCEDURE CreateGenJournalLineForPlan@60(JobPlanningLine@1003 : Record 1003;UsageLineType@1002 : Option;Fraction@1001 : Decimal;VAR GenJournalLine@1000 : Record 81);
    VAR
      JobTask@1004 : Record 1001;
    BEGIN
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage link should be enabled');

      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      CreateJobGLJournalLine(UsageLineType,JobTask,GenJournalLine);

      WITH GenJournalLine DO BEGIN
        "Account No." := JobPlanningLine."No.";
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
        VALIDATE("Job Quantity",ROUND(Fraction * JobPlanningLine."Remaining Qty."));
        MODIFY(TRUE)
      END
    END;

    PROCEDURE CreateJobWIPMethod@70(VAR JobWIPMethod@1000 : Record 1006);
    BEGIN
      JobWIPMethod.INIT;
      JobWIPMethod.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(JobWIPMethod.FIELDNO(Code),DATABASE::"Job WIP Method"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Job WIP Method",JobWIPMethod.FIELDNO(Code))));
      JobWIPMethod.INSERT(TRUE)
    END;

    PROCEDURE CreatePurchaseLineForPlan@65(JobPlanningLine@1000 : Record 1003;UsageLineType@1002 : Option;Fraction@1004 : Decimal;VAR PurchaseLine@1001 : Record 39);
    VAR
      Job@1008 : Record 167;
      JobTask@1003 : Record 1001;
      PurchaseHeader@1006 : Record 38;
    BEGIN
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage link should be enabled');

      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      Job.GET(JobPlanningLine."Job No.");

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Job2PurchaseConsumableType(JobPlanningLine.Type),
        JobPlanningLine."No.",ROUND(Fraction * JobPlanningLine."Remaining Qty."));

      WITH PurchaseLine DO BEGIN
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        VALIDATE("Unit of Measure Code",JobPlanningLine."Unit of Measure Code");
        VALIDATE("Job Line Type",UsageLineType);
        VALIDATE("Job No.",JobPlanningLine."Job No.");
        VALIDATE("Job Task No.",JobPlanningLine."Job Task No.");
        VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
        MODIFY(TRUE)
      END
    END;

    PROCEDURE CreateServiceLineForPlan@54(JobPlanningLine@1000 : Record 1003;UsageLineType@1002 : Option;Fraction@1004 : Decimal;VAR ServiceLine@1001 : Record 5902);
    VAR
      Job@1008 : Record 167;
      JobTask@1003 : Record 1001;
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1007 : Record 5901;
    BEGIN
      Assert.IsTrue(JobPlanningLine."Usage Link",'Usage link should be enabled');

      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
      Job.GET(JobPlanningLine."Job No.");

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Job."Bill-to Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(
        ServiceLine,ServiceHeader,Job2ServiceConsumableType(JobPlanningLine.Type),JobPlanningLine."No.");

      WITH ServiceLine DO BEGIN
        VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        VALIDATE("Location Code",FindLocationForPostingGroup(ServiceLine));
        VALIDATE(Quantity,ROUND(Fraction * JobPlanningLine."Remaining Qty."));
        VALIDATE("Unit of Measure Code",JobPlanningLine."Unit of Measure Code");
        VALIDATE("Qty. to Consume",Quantity);
        VALIDATE("Job No.",JobPlanningLine."Job No.");
        VALIDATE("Job Task No.",JobPlanningLine."Job Task No.");
        VALIDATE("Job Line Type",UsageLineType);
        VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
        MODIFY(TRUE)
      END
    END;

    PROCEDURE CreateJobGLAccountPrice@71(VAR JobGLAccountPrice@1001 : Record 1014;JobNo@1000 : Code[20];JobTaskNo@1003 : Code[20];GLAccountNo@1004 : Code[20];CurrencyCode@1006 : Code[10]);
    BEGIN
      JobGLAccountPrice.INIT;
      JobGLAccountPrice.VALIDATE("Job No.",JobNo);
      JobGLAccountPrice.VALIDATE("Job Task No.",JobTaskNo);
      JobGLAccountPrice.VALIDATE("G/L Account No.",GLAccountNo);
      JobGLAccountPrice.VALIDATE("Currency Code",CurrencyCode);
      JobGLAccountPrice.INSERT(TRUE);
    END;

    PROCEDURE CreateJobItemPrice@72(VAR JobItemPrice@1001 : Record 1013;JobNo@1000 : Code[20];JobTaskNo@1003 : Code[20];ItemNo@1004 : Code[20];CurrencyCode@1006 : Code[10];VariantCode@1002 : Code[10];UnitOfMeasureCode@1005 : Code[10]);
    BEGIN
      JobItemPrice.INIT;
      JobItemPrice.VALIDATE("Job No.",JobNo);
      JobItemPrice.VALIDATE("Job Task No.",JobTaskNo);
      JobItemPrice.VALIDATE("Item No.",ItemNo);
      JobItemPrice.VALIDATE("Currency Code",CurrencyCode);
      JobItemPrice.VALIDATE("Variant Code",VariantCode);
      JobItemPrice.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      JobItemPrice.INSERT(TRUE);
    END;

    PROCEDURE CreateJobResourcePrice@74(VAR JobResourcePrice@1001 : Record 1012;JobNo@1000 : Code[20];JobTaskNo@1003 : Code[20];Type@1002 : Option;Code@1004 : Code[20];WorkTypeCode@1007 : Code[10];CurrencyCode@1006 : Code[10]);
    BEGIN
      JobResourcePrice.INIT;
      JobResourcePrice.VALIDATE("Job No.",JobNo);
      JobResourcePrice.VALIDATE("Job Task No.",JobTaskNo);
      JobResourcePrice.VALIDATE(Type,Type);
      JobResourcePrice.VALIDATE(Code,Code);
      JobResourcePrice.VALIDATE("Work Type Code",WorkTypeCode);
      JobResourcePrice.VALIDATE("Currency Code",CurrencyCode);
      JobResourcePrice.INSERT(TRUE);
    END;

    PROCEDURE CreateJobJournalBatch@12(JobJournalTemplateName@1002 : Code[10];VAR JobJournalBatch@1000 : Record 237) BatchName : Code[10];
    BEGIN
      CLEAR(JobJournalBatch);

      // Find a unique batch name (wrt existing and previously posted batches)
      BatchName := PrefixLbl + 'B000';
      REPEAT
        BatchName := INCSTR(BatchName);
      UNTIL NOT JobJournalBatch.GET(JobJournalTemplateName,BatchName);

      JobJournalBatch.VALIDATE("Journal Template Name",JobJournalTemplateName);
      JobJournalBatch.VALIDATE(Name,BatchName);
      JobJournalBatch.SetupNewBatch;
      JobJournalBatch.INSERT(TRUE)
    END;

    PROCEDURE CreateJobJournalTemplate@75(VAR JobJournalTemplate@1001 : Record 209);
    BEGIN
      JobJournalTemplate.INIT;
      JobJournalTemplate.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(JobJournalTemplate.FIELDNO(Name),DATABASE::"Job Journal Template"));
      JobJournalTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateJobPostingGroup@16(VAR JobPostingGroup@1000 : Record 208);
    BEGIN
      CLEAR(JobPostingGroup);
      JobPostingGroup.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(JobPostingGroup.FIELDNO(Code),DATABASE::"Job Posting Group"));
      JobPostingGroup.VALIDATE("WIP Costs Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("WIP Accrued Costs Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Job Costs Applied Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Job Costs Adjustment Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("G/L Expense Acc. (Contract)",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Job Sales Adjustment Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("WIP Accrued Sales Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("WIP Invoiced Sales Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Job Sales Applied Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Recognized Costs Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Recognized Sales Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Item Costs Applied Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("Resource Costs Applied Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.VALIDATE("G/L Costs Applied Account",LibraryERM.CreateGLAccountNo);
      JobPostingGroup.INSERT(TRUE);
    END;

    PROCEDURE GetJobJournalTemplate@1(VAR JobJournalTemplate@1000 : Record 209) : Code[10];
    BEGIN
      CLEAR(JobJournalTemplate);
      IF NOT JobJournalTemplate.GET(PrefixLbl + TemplateNameLbl) THEN BEGIN
        JobJournalTemplate.VALIDATE(Name,PrefixLbl + TemplateNameLbl);
        JobJournalTemplate.INSERT(TRUE)
      END;

      JobJournalTemplate.VALIDATE("No. Series",GetJobTestNoSeries);
      JobJournalTemplate.MODIFY(TRUE);
      EXIT(JobJournalTemplate.Name)
    END;

    PROCEDURE CreateJobGLJournalLine@50(JobLineType@1006 : Option;JobTask@1000 : Record 1001;VAR GenJournalLine@1001 : Record 81);
    VAR
      GenJournalTemplate@1004 : Record 80;
      GenJournalBatch@1005 : Record 232;
      GLAccount@1003 : Record 15;
      NoSeriesMgt@1002 : Codeunit 396;
    BEGIN
      // Create a general journal line for a job task.
      // This helper function allows to easily create multiple journal lines in a single batch.
      // These journal lines can be traced using their document number and batch.
      LibraryERM.CreateGLAccount(GLAccount);
      WITH GenJournalLine DO BEGIN
        SETRANGE("Job No.",JobTask."Job No.");
        IF FINDLAST THEN
          VALIDATE("Line No.","Line No." + 1)
        ELSE BEGIN
          CLEAR(GenJournalLine);
          CreateGenJournalBatch(GetGenJournalTemplate(GenJournalTemplate),GenJournalBatch);
          VALIDATE("Journal Template Name",GenJournalTemplate.Name);
          VALIDATE("Journal Batch Name",GenJournalBatch.Name);
          VALIDATE("Line No.",1);
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
        END;

        INIT;
        INSERT(TRUE);

        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Account Type","Account Type"::"G/L Account");
        VALIDATE("Account No.",GLAccount."No.");
        VALIDATE(Description,GLAccount."No.");
        LibraryERM.CreateGLAccount(GLAccount);
        VALIDATE("Bal. Account No.",GLAccount."No.");
        VALIDATE(Amount,LibraryRandom.RandDec(100,2));
        VALIDATE("Job Line Type",JobLineType);
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Job Quantity",LibraryRandom.RandInt(10));
        GenJournalBatch.GET(GetGenJournalTemplate(GenJournalTemplate),"Journal Batch Name");
        VALIDATE("Document No.",NoSeriesMgt.GetNextNo(GenJournalBatch."No. Series","Posting Date",FALSE));
        VALIDATE("Source Code",GenJournalTemplate."Source Code");
        MODIFY(TRUE)
      END
    END;

    PROCEDURE CreateGenJournalBatch@62(GenJournalTemplateName@1002 : Code[10];VAR GenJournalBatch@1000 : Record 232);
    VAR
      GLEntry@1003 : Record 17;
      JobLedgerEntry@1004 : Record 169;
      BatchName@1001 : Code[10];
    BEGIN
      CLEAR(GenJournalBatch);

      // Find a unique name (wrt existing and previously posted batches)
      BatchName := PrefixLbl + 'B000';
      REPEAT
        BatchName := INCSTR(BatchName);
        GLEntry.SETRANGE("Journal Batch Name",BatchName);
        JobLedgerEntry.SETRANGE("Journal Batch Name",BatchName);
      UNTIL GLEntry.ISEMPTY AND JobLedgerEntry.ISEMPTY AND NOT GenJournalBatch.GET(GenJournalTemplateName,BatchName);

      GenJournalBatch.VALIDATE("Journal Template Name",GenJournalTemplateName);
      GenJournalBatch.VALIDATE(Name,BatchName);
      GenJournalBatch.SetupNewBatch;
      GenJournalBatch.INSERT(TRUE)
    END;

    PROCEDURE GetGenJournalTemplate@61(VAR GenJournalTemplate@1000 : Record 80) : Code[10];
    BEGIN
      // In this test codeunit we always use the same gen. journal template

      CLEAR(GenJournalTemplate);
      IF NOT GenJournalTemplate.GET(PrefixLbl + TemplateNameLbl) THEN BEGIN
        GenJournalTemplate.VALIDATE(Name,PrefixLbl + TemplateNameLbl);
        GenJournalTemplate.INSERT(TRUE)
      END;

      GenJournalTemplate.VALIDATE("No. Series",GetJobTestNoSeries);
      GenJournalTemplate.MODIFY(TRUE);

      EXIT(GenJournalTemplate.Name)
    END;

    PROCEDURE GetJobTestNoSeries@49() : Code[10];
    VAR
      NoSeries@1001 : Record 308;
      NoSeriesLine@1002 : Record 309;
    BEGIN
      IF NOT NoSeries.GET(NoSeriesCodeLbl) THEN BEGIN
        LibraryUtility.CreateNoSeries(NoSeries,TRUE,FALSE,FALSE);
        NoSeries.RENAME(NoSeriesCodeLbl);
        LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'','')
      END;

      EXIT(NoSeries.Code)
    END;

    PROCEDURE CreateConsumable@20(Type@1000 : Integer) : Code[20];
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1005 : Record 5404;
      Resource@1002 : Record 156;
      ResourceUnitOfMeasure@1004 : Record 205;
      GLAccount@1003 : Record 15;
    BEGIN
      CASE Type OF
        ResourceType:
          BEGIN
            Resource.GET(FindConsumable(Type));
            ResourceUnitOfMeasure.GET(Resource."No.",Resource."Base Unit of Measure");
            Resource."No." := '';
            Resource.INSERT(TRUE);
            ResourceUnitOfMeasure."Resource No." := Resource."No.";
            ResourceUnitOfMeasure.INSERT(TRUE);
            EXIT(Resource."No.")
          END;
        ItemType:
          BEGIN
            Item.GET(FindConsumable(Type));
            ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
            Item."No." := '';
            Item.INSERT(TRUE);
            ItemUnitOfMeasure."Item No." := Item."No.";
            ItemUnitOfMeasure.INSERT(TRUE);
            EXIT(Item."No.")
          END;
        GLAccountType:
          BEGIN
            GLAccount.GET(FindConsumable(Type));
            GLAccount."No." := '';
            GLAccount.INSERT(TRUE);
            EXIT(GLAccount."No.")
          END;
        ELSE
          Assert.Fail('Unsupported consumable type');
      END
    END;

    PROCEDURE Attach2PurchaseLine@44(ConsumableType@1001 : Option;VAR PurchaseLine@1000 : Record 39);
    BEGIN
      // Attach a random number of random consumables to the purchase line.

      WITH PurchaseLine DO BEGIN
        VALIDATE(Type,ConsumableType);
        VALIDATE("No.",FindConsumable(Purchase2JobConsumableType(ConsumableType)));
        VALIDATE(Quantity,LibraryRandom.RandInt(100));
        IF Type = Type::"G/L Account" THEN
          VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
        MODIFY(TRUE)
      END
    END;

    LOCAL PROCEDURE Attach2JobJournalLine@26(ConsumableType@1002 : Option;VAR JobJournalLine@1000 : Record 210);
    BEGIN
      // Attach a random number of random consumables to the job journal line.

      WITH JobJournalLine DO BEGIN
        VALIDATE(Type,ConsumableType);
        VALIDATE("No.",FindConsumable(ConsumableType));
        VALIDATE(Quantity,LibraryRandom.RandInt(100));
        IF Type = Type::"G/L Account" THEN
          VALIDATE("Unit Price",LibraryRandom.RandInt(100));
        MODIFY(TRUE)
      END
    END;

    PROCEDURE AttachJobTask2PurchaseLine@35(JobTask@1000 : Record 1001;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      // Attach the job task to the purchase line.

      WITH PurchaseLine DO BEGIN
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        MODIFY(TRUE)
      END
    END;

    LOCAL PROCEDURE CreateCustomer@59() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.")
    END;

    PROCEDURE FindConsumable@3(Type@1000 : Integer) : Code[20];
    BEGIN
      CASE Type OF
        ResourceType:
          EXIT(LibraryResource.CreateResourceNo);
        ItemType:
          EXIT(FindItem);
        GLAccountType:
          EXIT(LibraryERM.CreateGLAccountWithSalesSetup);
        ELSE
          ERROR(ErrorMsgErr);
      END
    END;

    PROCEDURE FindItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    PROCEDURE FindJobPostingGroup@8() : Code[10];
    VAR
      JobPostingGroup@1000 : Record 208;
    BEGIN
      IF NOT JobPostingGroup.FINDFIRST THEN
        CreateJobPostingGroup(JobPostingGroup);
      EXIT(JobPostingGroup.Code);
    END;

    PROCEDURE UseJobPlanningLine@11(JobPlanningLine@1000 : Record 1003;UsageLineType@1004 : Option;Fraction@1001 : Decimal;VAR JobJournalLine@1003 : Record 210);
    BEGIN
      CreateJobJournalLineForPlan(JobPlanningLine,UsageLineType,Fraction,JobJournalLine);
      PostJobJournal(JobJournalLine)
    END;

    PROCEDURE UseJobPlanningLineExplicit@25(JobPlanningLine@1000 : Record 1003;UsageLineType@1004 : Integer;Fraction@1001 : Decimal;Source@1002 : Option;VAR JobJournalLine@1003 : Record 210);
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceLine@1006 : Record 5902;
      PurchaseHeader@1014 : Record 38;
      PurchaseLine@1015 : Record 39;
      GenJournalLine@1012 : Record 81;
      TempServiceLine@1011 : TEMPORARY Record 5902;
      ServicePost@1005 : Codeunit 5980;
      Ship@1008 : Boolean;
      Consume@1009 : Boolean;
      Invoice@1010 : Boolean;
    BEGIN
      CASE Source OF
        JobConsumption:
          BEGIN
            CreateJobJournalLineForPlan(JobPlanningLine,UsageLineType,Fraction,JobJournalLine);
            JobJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
            JobJournalLine.MODIFY(TRUE);
            PostJobJournal(JobJournalLine)
          END;
        ServiceConsumption:
          BEGIN
            Ship := TRUE;
            Consume := TRUE;
            Invoice := FALSE;
            CreateServiceLineForPlan(JobPlanningLine,UsageLineType,Fraction,ServiceLine);
            ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
            ServicePost.PostWithLines(ServiceHeader,TempServiceLine,Ship,Consume,Invoice);
            WITH ServiceLine DO BEGIN
              JobJournalLine."Line Type" := "Job Line Type";
              JobJournalLine."Remaining Qty." := "Job Remaining Qty.";
              JobJournalLine.Quantity := "Qty. to Consume";
              JobJournalLine.Description := Description;
              JobJournalLine."Total Cost" := ROUND("Qty. to Consume" * "Unit Cost");
              JobJournalLine."Total Cost (LCY)" := ROUND("Qty. to Consume" * "Unit Cost (LCY)");
              JobJournalLine."Line Amount" := "Qty. to Consume" * "Unit Price"
            END
          END;
        GenJournalConsumption:
          BEGIN
            Assert.AreEqual(GLAccountType,JobPlanningLine.Type,'Can only consume G/L Account via Job Gen. Journal.');
            CreateGenJournalLineForPlan(JobPlanningLine,UsageLineType,Fraction,GenJournalLine);
            LibraryERM.PostGeneralJnlLine(GenJournalLine);
            WITH GenJournalLine DO BEGIN
              JobJournalLine."Line Type" := "Job Line Type";
              JobJournalLine."Remaining Qty." := "Job Remaining Qty.";
              JobJournalLine.Quantity := "Job Quantity";
              JobJournalLine.Description := Description;
              JobJournalLine."Total Cost" := "Job Total Cost";
              JobJournalLine."Total Cost (LCY)" := "Job Total Cost (LCY)";
              JobJournalLine."Line Amount" := "Job Line Amount";
            END
          END;
        PurchaseConsumption:
          BEGIN
            CreatePurchaseLineForPlan(JobPlanningLine,UsageLineType,Fraction,PurchaseLine);
            PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
            LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
            WITH PurchaseLine DO BEGIN
              JobJournalLine."Line Type" := "Job Line Type";
              JobJournalLine."Remaining Qty." := "Job Remaining Qty.";
              JobJournalLine.Quantity := "Qty. to Invoice";
              JobJournalLine.Description := Description;
              JobJournalLine."Total Cost" := "Qty. to Invoice" * "Unit Cost (LCY)";
              JobJournalLine."Total Cost (LCY)" := "Qty. to Invoice" * "Unit Cost (LCY)";
              JobJournalLine."Total Price" := "Job Total Price";
              JobJournalLine."Line Amount" := "Job Line Amount";
            END
          END;
        ELSE
          Assert.Fail('Consumption method not supported')
      END
    END;

    PROCEDURE PostJobJournal@7(VAR JobJournalLine@1000 : Record 210);
    VAR
      JobJournalLine2@1001 : Record 210;
    BEGIN
      // Post a job journal.
      JobJournalLine2 := JobJournalLine;
      CODEUNIT.RUN(CODEUNIT::"Job Jnl.-Post",JobJournalLine2)
    END;

    LOCAL PROCEDURE GetGLEntry@40(VAR JobLedgerEntry@1000 : Record 169;VAR GLEntry@1001 : Record 17);
    VAR
      Item@1002 : Record 27;
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      GLEntry.RESET;
      GLEntry.SETRANGE("Posting Date",JobLedgerEntry."Posting Date");
      GLEntry.SETRANGE("Document No.",JobLedgerEntry."Document No.");
      GLEntry.SETRANGE("Job No.",JobLedgerEntry."Job No.");

      CASE JobLedgerEntry."Ledger Entry Type" OF
        JobLedgerEntry."Ledger Entry Type"::"G/L Account":
          GLEntry.SETRANGE("G/L Account No.",JobLedgerEntry."No.");
        JobLedgerEntry."Ledger Entry Type"::Item:
          BEGIN
            GeneralPostingSetup.GET(JobLedgerEntry."Gen. Bus. Posting Group",JobLedgerEntry."Gen. Prod. Posting Group");
            Item.GET(JobLedgerEntry."No.");
            GLEntry.SETRANGE("Gen. Prod. Posting Group",JobLedgerEntry."Gen. Prod. Posting Group");
            GLEntry.SETRANGE("Gen. Bus. Posting Group",JobLedgerEntry."Gen. Bus. Posting Group");
            GLEntry.SETRANGE("VAT Prod. Posting Group",Item."VAT Prod. Posting Group");
            GLEntry.SETRANGE("G/L Account No.",GeneralPostingSetup."Purch. Account");

            GLEntry.SETRANGE("Tax Group Code",Item."Tax Group Code");
          END;
        ELSE
          Assert.Fail(STRSUBSTNO('Unsupported entry type: %1',JobLedgerEntry."Ledger Entry Type"));
      END;

      GLEntry.FINDFIRST
    END;

    PROCEDURE VerifyGLEntries@42(VAR JobLedgerEntry@1000 : Record 169);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      // Verify that each job entry has corresponding g/l entry with a job no.
      JobLedgerEntry.FINDSET;
      REPEAT
        GetGLEntry(JobLedgerEntry,GLEntry);
        Assert.AreEqual(JobLedgerEntry."Job No.",GLEntry."Job No.",JobNoErr)
      UNTIL JobLedgerEntry.NEXT = 0
    END;

    PROCEDURE VerifyPurchaseDocPostingForJob@28(VAR PurchaseLine@1000 : Record 39);
    VAR
      TempJobJournalLine@1001 : TEMPORARY Record 210;
      Job@1002 : Record 167;
    BEGIN
      // Verify posting of a purchase line for a job.
      PurchaseLine.SETFILTER("Job No.",'<>''''');
      PurchaseLine.FINDSET;
      Job.GET(PurchaseLine."Job No.");

      REPEAT
        WITH TempJobJournalLine DO BEGIN
          "Line No." := PurchaseLine."Line No.";
          "Job No." := PurchaseLine."Job No.";
          "Job Task No." := PurchaseLine."Job Task No.";
          Description := PurchaseLine.Description;
          "Line Type" := PurchaseLine."Job Line Type";
          Quantity := PurchaseLine.Quantity;
          "Unit Cost (LCY)" := PurchaseLine."Unit Cost (LCY)";
          "Unit Price (LCY)" := PurchaseLine."Unit Price (LCY)";
          "Currency Code" := Job."Currency Code";
          INSERT
        END
      UNTIL PurchaseLine.NEXT = 0;

      VerifyJobJournalPosting(FALSE,TempJobJournalLine)
    END;

    PROCEDURE VerifyJobJournalPosting@67(UsageLink@1001 : Boolean;VAR JobJournalLine@1000 : Record 210);
    BEGIN
      // Verify that the journal lines were posted correctly.

      Assert.IsFalse(JobJournalLine.ISEMPTY,'Not verifying any Job Journal Lines!');
      JobJournalLine.FINDSET;
      REPEAT
        VerifyJobLedger(JobJournalLine);
        VerifyPlanningLines(JobJournalLine,UsageLink)
      UNTIL JobJournalLine.NEXT = 0
    END;

    PROCEDURE VerifyJobLedger@57(JobJournalLine@1000 : Record 210);
    VAR
      JobLedgerEntry@1001 : Record 169;
      Precision@1002 : Decimal;
    BEGIN
      // A posted job journal line gives one corresponding entry in the job ledger.

      WITH JobLedgerEntry DO BEGIN
        SETRANGE(Description,JobJournalLine.Description);

        Assert.AreEqual(
          1,COUNT,
          STRSUBSTNO(
            'Invalid Job Ledger Entry for Batch %1 Document %2',JobJournalLine."Journal Batch Name",
            JobJournalLine."Document No."));

        FINDFIRST;
        Precision := Max(GetAmountRoundingPrecision(''),GetAmountRoundingPrecision(JobJournalLine."Currency Code"));
        Assert.AreEqual(JobJournalLine."Job No.","Job No.",FIELDCAPTION("Job No."));
        Assert.AreEqual(JobJournalLine."Job Task No.","Job Task No.",FIELDCAPTION("Job Task No."));
        Assert.AreNearlyEqual(JobJournalLine."Unit Cost (LCY)","Unit Cost (LCY)",Precision * 10,FIELDCAPTION("Unit Cost (LCY)"));
        Assert.AreNearlyEqual(JobJournalLine."Unit Price (LCY)","Unit Price (LCY)",Precision,FIELDCAPTION("Unit Price (LCY)"));
        Assert.AreEqual(JobJournalLine.Quantity,Quantity,FIELDCAPTION(Quantity));
      END
    END;

    PROCEDURE VerifyPlanningLines@46(JobJournalLine@1000 : Record 210;UsageLink@1002 : Boolean);
    VAR
      JobPlanningLine@1001 : Record 1003;
      Precision@1003 : Decimal;
    BEGIN
      // A posted job journal line gives
      // 0 (Blank),
      // 1 (Contract or Schedule), or
      // 2 (Both)
      // corresponding planning lines.

      WITH JobPlanningLine DO BEGIN
        SETRANGE(Description,JobJournalLine.Description);

        // Verify line count and type
        CASE JobJournalLine."Line Type" OF
          UsageLineTypeBlank:
            VerifyPlanningLineCountBlank(JobJournalLine,UsageLink);
          UsageLineTypeSchedule:
            VerifyPlanningLineCountSchedul(JobJournalLine);
          UsageLineTypeContract:
            VerifyPlanningLineCountContrac(JobJournalLine,UsageLink);
          UsageLineTypeBoth:
            VerifyPlanningLineCountBoth(JobJournalLine);
          ELSE
            Assert.Fail('Invalid line type.');
        END;

        // Verify Unit Cost, Price.
        Precision := Max(GetAmountRoundingPrecision(''),GetAmountRoundingPrecision(JobJournalLine."Currency Code"));
        IF FINDSET THEN
          REPEAT
            Assert.AreEqual(JobJournalLine.Quantity,Quantity,FIELDCAPTION(Quantity));
            Assert.AreEqual(JobJournalLine."Job No.","Job No.",FIELDCAPTION("Job No."));
            Assert.AreEqual(JobJournalLine."Job Task No.","Job Task No.",FIELDCAPTION("Job Task No."));
            Assert.AreNearlyEqual(JobJournalLine."Unit Cost (LCY)","Unit Cost (LCY)",Precision * 10,FIELDCAPTION("Unit Cost (LCY)"));
            Assert.AreNearlyEqual(JobJournalLine."Unit Price (LCY)","Unit Price (LCY)",Precision,FIELDCAPTION("Unit Price (LCY)"))
          UNTIL NEXT = 0
      END
    END;

    LOCAL PROCEDURE VerifyPlanningLineCountBlank@24(JobJournalLine@1000 : Record 210;UsageLink@1003 : Boolean);
    VAR
      JobPlanningLine@1001 : Record 1003;
      Job@1002 : Record 167;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        SETRANGE(Description,JobJournalLine.Description);
        Job.GET(JobJournalLine."Job No.");
        IF UsageLink THEN BEGIN
          Assert.AreEqual(1,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
          FINDFIRST;
          Assert.AreEqual(PlanningLineTypeSchedule,"Line Type",FIELDCAPTION("Line Type"))
        END ELSE
          Assert.IsTrue(ISEMPTY,STRSUBSTNO('No planning lines should be created for %1.',JobJournalLine."Line Type"));
      END
    END;

    LOCAL PROCEDURE VerifyPlanningLineCountSchedul@45(JobJournalLine@1000 : Record 210);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        SETRANGE(Description,JobJournalLine.Description);
        Assert.AreEqual(1,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
        FINDFIRST;
        Assert.AreEqual(PlanningLineTypeSchedule,"Line Type",FIELDCAPTION("Line Type"))
      END
    END;

    LOCAL PROCEDURE VerifyPlanningLineCountContrac@48(JobJournalLine@1000 : Record 210;UsageLink@1003 : Boolean);
    VAR
      Job@1002 : Record 167;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        SETRANGE(Description,JobJournalLine.Description);
        IF UsageLink THEN BEGIN
          Job.GET(JobJournalLine."Job No.");
          IF Job."Allow Schedule/Contract Lines" THEN BEGIN
            Assert.AreEqual(1,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
            FINDFIRST;
            Assert.AreEqual(PlanningLineTypeBoth,"Line Type",FIELDCAPTION("Line Type"))
          END ELSE BEGIN
            Assert.AreEqual(2,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
            SETRANGE("Line Type",PlanningLineTypeSchedule);
            Assert.AreEqual(1,COUNT,STRSUBSTNO('# schedule planning line for Line Type %1.',JobJournalLine."Line Type"));
            SETRANGE("Line Type",PlanningLineTypeContract);
            Assert.AreEqual(1,COUNT,STRSUBSTNO('# contract planning lines for Line Type %1.',JobJournalLine."Line Type"))
          END
        END ELSE BEGIN
          Assert.AreEqual(1,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
          FINDFIRST;
          Assert.AreEqual(PlanningLineTypeContract,"Line Type",FIELDCAPTION("Line Type"))
        END
      END
    END;

    LOCAL PROCEDURE VerifyPlanningLineCountBoth@29(JobJournalLine@1000 : Record 210);
    VAR
      Job@1002 : Record 167;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        SETRANGE(Description,JobJournalLine.Description);
        Job.GET(JobJournalLine."Job No.");
        IF Job."Allow Schedule/Contract Lines" THEN BEGIN
          Assert.AreEqual(1,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
          FINDFIRST;
          Assert.AreEqual(PlanningLineTypeBoth,"Line Type",FIELDCAPTION("Line Type"))
        END ELSE BEGIN
          Assert.AreEqual(2,COUNT,STRSUBSTNO('# planning lines for Line Type %1.',JobJournalLine."Line Type"));
          SETRANGE("Line Type",PlanningLineTypeSchedule);
          Assert.AreEqual(1,COUNT,STRSUBSTNO('# schedule planning line for Line Type %1.',JobJournalLine."Line Type"));
          SETRANGE("Line Type",PlanningLineTypeContract);
          Assert.AreEqual(1,COUNT,STRSUBSTNO('# contract planning lines for Line Type %1.',JobJournalLine."Line Type"))
        END
      END
    END;

    PROCEDURE UpdateJobPostingGroup@107(VAR JobPostingGroup@1170000000 : Record 208);
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      WITH JobPostingGroup DO BEGIN
        LibraryERM.CreateGLAccount(GLAccount);
        VALIDATE("WIP Costs Account",GLAccount."No.");
        VALIDATE("WIP Invoiced Sales Account",GLAccount."No.");
        VALIDATE("WIP Accrued Costs Account",GLAccount."No.");
        VALIDATE("WIP Accrued Sales Account",GLAccount."No.");
        VALIDATE("Job Costs Applied Account",GLAccount."No.");
        VALIDATE("Job Costs Adjustment Account",GLAccount."No.");
        VALIDATE("Job Sales Applied Account",GLAccount."No.");
        VALIDATE("Job Sales Adjustment Account",GLAccount."No.");
        VALIDATE("Resource Costs Applied Account",GLAccount."No.");
        VALIDATE("Recognized Costs Account",GLAccount."No.");
        VALIDATE("Recognized Sales Account",GLAccount."No.");
        VALIDATE("G/L Costs Applied Account",GLAccount."No.");
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE ConfigureGeneralPosting@51();
    VAR
      GeneralPostingSetup@1000 : Record 252;
      GenProductPostingGroup@1001 : Record 251;
      GenBusinessPostingGroup@1002 : Record 250;
      RecordRef@1004 : RecordRef;
      GenBusinessPostingGroupCode@1003 : Code[10];
    BEGIN
      // create a posting setup for each combination of product and business group
      // including "empty" business group (in the first iteration)

      REPEAT
        GenBusinessPostingGroupCode := GenBusinessPostingGroup.Code;
        GenProductPostingGroup.FINDSET;
        REPEAT
          IF NOT GeneralPostingSetup.GET(GenBusinessPostingGroupCode,GenProductPostingGroup.Code) THEN
            CreateGeneralPostingSetup(GenBusinessPostingGroupCode,GenProductPostingGroup.Code,GeneralPostingSetup);

          RecordRef.GETTABLE(GeneralPostingSetup);
          // general posting => income statement
          SetIncomeStatementGLAccounts(RecordRef)
        UNTIL GenProductPostingGroup.NEXT = 0
      UNTIL GenBusinessPostingGroup.NEXT = 0
    END;

    PROCEDURE CreateGeneralPostingSetup@52(GenBusinessPostingGroupCode@1000 : Code[10];GenProductPostingGroupCode@1001 : Code[10];VAR GeneralPostingSetup@1002 : Record 252);
    BEGIN
      WITH GeneralPostingSetup DO BEGIN
        "Gen. Bus. Posting Group" := GenBusinessPostingGroupCode;
        "Gen. Prod. Posting Group" := GenProductPostingGroupCode;
        INIT;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE ConfigureVATPosting@58();
    VAR
      VATPostingSetup@1000 : Record 325;
      VATProductPostingGroup@1001 : Record 324;
      VATBusinessPostingGroup@1002 : Record 323;
      RecordRef@1005 : RecordRef;
      VATBusinessPostingGroupCode@1003 : Code[10];
      VATProductPostingGroupCode@1004 : Code[10];
    BEGIN
      // create a posting setup for each combination of product and business group
      // including "empty" business and product group combinations

      REPEAT
        VATBusinessPostingGroupCode := VATBusinessPostingGroup.Code;
        CLEAR(VATProductPostingGroup);
        REPEAT
          VATProductPostingGroupCode := VATProductPostingGroup.Code;
          IF NOT VATPostingSetup.GET(VATBusinessPostingGroupCode,VATProductPostingGroupCode) THEN
            CreateVATPostingSetup(VATBusinessPostingGroupCode,VATProductPostingGroupCode,VATPostingSetup);

          RecordRef.GETTABLE(VATPostingSetup);
          // VAT posting => income statement
          SetIncomeStatementGLAccounts(RecordRef)
        UNTIL VATProductPostingGroup.NEXT = 0
      UNTIL VATBusinessPostingGroup.NEXT = 0
    END;

    PROCEDURE CreateVATPostingSetup@56(VATBusinessPostingGroupCode@1000 : Code[10];VATProductPostingGroupCode@1001 : Code[10];VAR VATPostingSetup@1002 : Record 325);
    BEGIN
      WITH VATPostingSetup DO BEGIN
        "VAT Bus. Posting Group" := VATBusinessPostingGroupCode;
        "VAT Prod. Posting Group" := VATProductPostingGroupCode;
        INIT;
        "VAT %" := LibraryRandom.RandIntInRange(10,25); // 10 <= VAT % <= 25
        "VAT Identifier" := FORMAT("VAT %");
        "Sales VAT Account" := LibraryERM.CreateGLAccountWithSalesSetup;
        "Sales VAT Unreal. Account" := "Sales VAT Account";
        "Purchase VAT Account" := "Sales VAT Account";
        "Purch. VAT Unreal. Account" := "Sales VAT Account";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE SetIncomeStatementGLAccounts@53(RecordRef@1000 : RecordRef);
    VAR
      GLAccount@1003 : Record 15;
      FieldRef@1002 : FieldRef;
      Idx@1001 : Integer;
    BEGIN
      // Set all GLAccount fields in RecordRef to a (different) account
      FOR Idx := 1 TO RecordRef.FIELDCOUNT DO BEGIN
        FieldRef := RecordRef.FIELDINDEX(Idx);
        IF FieldRef.RELATION = DATABASE::"G/L Account" THEN BEGIN
          GLAccount.GET(LibraryERM.CreateGLAccountWithSalesSetup);
          GLAccount."Income/Balance" := GLAccount."Income/Balance"::"Income Statement";
          GLAccount.MODIFY(TRUE);
          FieldRef.VALUE := GLAccount."No.";
          FieldRef.TESTFIELD;
          RecordRef.MODIFY;
        END
      END
    END;

    PROCEDURE GetNextLineNo@19(JobPlanningLine@1000 : Record 1003) : Integer;
    BEGIN
      JobPlanningLine.RESET;
      JobPlanningLine.SETRANGE("Job No.",JobPlanningLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      IF JobPlanningLine.FINDLAST THEN
        EXIT(JobPlanningLine."Line No." + 10000);
      EXIT(10000)
    END;

    LOCAL PROCEDURE IsStandardCosting@27(Type@1000 : Option;No@1001 : Code[20]) : Boolean;
    VAR
      Item@1002 : Record 27;
    BEGIN
      IF Type <> ItemType THEN
        EXIT(FALSE);

      Item.GET(No);
      EXIT(Item."Costing Method" = Item."Costing Method"::Standard)
    END;

    PROCEDURE Service2JobConsumableType@17(Type@1000 : ' ,Item,Resource,Cost,G/L Account') : Integer;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      CASE Type OF
        ServiceLine.Type::Item:
          EXIT(ItemType);
        ServiceLine.Type::Resource:
          EXIT(ResourceType);
        ServiceLine.Type::"G/L Account":
          EXIT(GLAccountType);
        ELSE
          Assert.Fail('Unsupported consumable type');
      END
    END;

    PROCEDURE Purchase2JobConsumableType@15(Type@1000 : ' ,Item,Resource,Cost,G/L Account') : Integer;
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CASE Type OF
        PurchaseLine.Type::Item:
          EXIT(ItemType);
        PurchaseLine.Type::"G/L Account":
          EXIT(GLAccountType);
        ELSE
          Assert.Fail('Unsupported consumable type');
      END
    END;

    PROCEDURE Job2PurchaseConsumableType@55(Type@1000 : 'Resource,Item,G/L Account,Text') : Integer;
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CASE Type OF
        ItemType:
          EXIT(PurchaseLine.Type::Item);
        GLAccountType:
          EXIT(PurchaseLine.Type::"G/L Account");
        ELSE
          Assert.Fail('Unsupported consumable type');
      END
    END;

    PROCEDURE Job2SalesConsumableType@43(Type@1000 : 'Resource,Item,G/L Account,Text') : Integer;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CASE Type OF
        ResourceType:
          EXIT(SalesLine.Type::Resource);
        ItemType:
          EXIT(SalesLine.Type::Item);
        GLAccountType:
          EXIT(SalesLine.Type::"G/L Account");
        ELSE
          Assert.Fail('Unsupported consumable type');
      END
    END;

    PROCEDURE Job2ServiceConsumableType@73(Type@1000 : 'Resource,Item,G/L Account,Text') : Integer;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      CASE Type OF
        ResourceType:
          EXIT(ServiceLine.Type::Resource);
        ItemType:
          EXIT(ServiceLine.Type::Item);
        GLAccountType:
          EXIT(ServiceLine.Type::"G/L Account");
        ELSE
          Assert.Fail('Unsupported consumable type');
      END
    END;

    PROCEDURE GetUnitAmountRoundingPrecision@10(CurrencyCode@1000 : Code[10]) : Decimal;
    VAR
      Currency@1002 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(LibraryERM.GetUnitAmountRoundingPrecision);
      Currency.GET(CurrencyCode);
      EXIT(Currency."Unit-Amount Rounding Precision")
    END;

    PROCEDURE GetAmountRoundingPrecision@23(CurrencyCode@1000 : Code[10]) : Decimal;
    VAR
      Currency@1002 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(LibraryERM.GetAmountRoundingPrecision);
      Currency.GET(CurrencyCode);
      EXIT(Currency."Amount Rounding Precision")
    END;

    PROCEDURE CopyPurchaseLines@41(VAR FromPurchaseLine@1000 : Record 39;VAR ToPurchaseLine@1001 : Record 39);
    BEGIN
      FromPurchaseLine.FINDSET;
      REPEAT
        ToPurchaseLine := FromPurchaseLine;
        ToPurchaseLine.INSERT;
      UNTIL FromPurchaseLine.NEXT = 0
    END;

    PROCEDURE CopyJobJournalLines@69(VAR FromJobJournalLine@1000 : Record 210;VAR ToJobJournalLine@1001 : Record 210);
    BEGIN
      FromJobJournalLine.FINDSET;
      REPEAT
        ToJobJournalLine := FromJobJournalLine;
        ToJobJournalLine.INSERT(TRUE);
      UNTIL FromJobJournalLine.NEXT = 0;
      ToJobJournalLine.COPYFILTERS(FromJobJournalLine)
    END;

    PROCEDURE UsageLineType@37(PlanningLineType@1000 : Option) : Integer;
    BEGIN
      CASE PlanningLineType OF
        PlanningLineTypeSchedule:
          EXIT(UsageLineTypeSchedule);
        PlanningLineTypeContract:
          EXIT(UsageLineTypeContract);
        PlanningLineTypeBoth:
          EXIT(UsageLineTypeBoth);
        ELSE
          Assert.Fail(STRSUBSTNO('Invalid job planning line type: %1',PlanningLineType))
      END
    END;

    PROCEDURE UsageLineTypeBlank@21() : Integer;
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      EXIT(JobJournalLine."Line Type"::" ")
    END;

    PROCEDURE UsageLineTypeSchedule@31() : Integer;
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      EXIT(JobJournalLine."Line Type"::Schedule)
    END;

    PROCEDURE UsageLineTypeContract@32() : Integer;
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      EXIT(JobJournalLine."Line Type"::Contract)
    END;

    PROCEDURE UsageLineTypeBoth@33() : Integer;
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      EXIT(JobJournalLine."Line Type"::"Both Schedule and Contract")
    END;

    PROCEDURE PlanningLineType@38(UsageLineType@1000 : Option) : Integer;
    BEGIN
      CASE UsageLineType OF
        UsageLineTypeSchedule:
          EXIT(PlanningLineTypeSchedule);
        UsageLineTypeContract:
          EXIT(PlanningLineTypeContract);
        UsageLineTypeBoth:
          EXIT(PlanningLineTypeContract);
        ELSE
          Assert.Fail(STRSUBSTNO('No matching job planning line type exists for job usage line type: %1',UsageLineType))
      END
    END;

    PROCEDURE PlanningLineTypeSchedule@30() : Integer;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      EXIT(JobPlanningLine."Line Type"::Schedule)
    END;

    PROCEDURE PlanningLineTypeContract@34() : Integer;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      EXIT(JobPlanningLine."Line Type"::Contract)
    END;

    PROCEDURE PlanningLineTypeBoth@36() : Integer;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      EXIT(JobPlanningLine."Line Type"::"Both Schedule and Contract")
    END;

    PROCEDURE ItemType@18() : Integer;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      EXIT(JobPlanningLine.Type::Item)
    END;

    PROCEDURE ResourceType@13() : Integer;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      EXIT(JobPlanningLine.Type::Resource)
    END;

    PROCEDURE GLAccountType@14() : Integer;
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      EXIT(JobPlanningLine.Type::"G/L Account")
    END;

    PROCEDURE Max@47(Left@1000 : Decimal;Right@1001 : Decimal) : Decimal;
    BEGIN
      IF Left > Right THEN
        EXIT(Left);

      EXIT(Right)
    END;

    PROCEDURE ServiceConsumption@63() : Integer;
    BEGIN
      EXIT(ConsumptionSource::Service)
    END;

    PROCEDURE JobConsumption@64() : Integer;
    BEGIN
      EXIT(ConsumptionSource::Job)
    END;

    PROCEDURE GenJournalConsumption@66() : Integer;
    BEGIN
      EXIT(ConsumptionSource::GenJournal)
    END;

    PROCEDURE PurchaseConsumption@68() : Integer;
    BEGIN
      EXIT(ConsumptionSource::Purchase)
    END;

    PROCEDURE FindLocation@133(VAR Location@1000 : Record 14) : Code[10];
    BEGIN
      Location.SETRANGE("Use As In-Transit",FALSE);
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.NEXT(LibraryRandom.RandInt(Location.COUNT));
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE FindLocationForPostingGroup@135(ServiceLine@1000 : Record 5902) : Code[10];
    VAR
      InventoryPostingSetup@1002 : Record 5813;
      Location@1001 : Record 14;
    BEGIN
      IF ServiceLine.Type <> ServiceLine.Type::Item THEN
        EXIT(ServiceLine."Location Code");

      InventoryPostingSetup.SETRANGE("Invt. Posting Group Code",ServiceLine."Posting Group");
      InventoryPostingSetup.SETFILTER("Location Code",'<>%1','');
      InventoryPostingSetup.FINDSET;
      REPEAT
        Location.GET(InventoryPostingSetup."Location Code");
        IF NOT Location."Use As In-Transit" AND NOT Location."Bin Mandatory" AND NOT Location."Require Shipment" THEN
          EXIT(Location.Code)
      UNTIL InventoryPostingSetup.NEXT = 0;
      EXIT('');
    END;

    [Normal]
    PROCEDURE GetJobWIPMethod@76(VAR JobWIPMethod@1000 : Record 1006;Method@1001 : 'Completed Contract,Cost of Sales,Cost Value,POC,Sales Value');
    BEGIN
      WITH JobWIPMethod DO BEGIN
        CASE Method OF
          Method::"Completed Contract":
            BEGIN
              SETRANGE("Recognized Costs","Recognized Costs"::"At Completion");
              SETRANGE("Recognized Sales","Recognized Sales"::"At Completion");
            END;
          Method::"Cost of Sales":
            BEGIN
              SETRANGE("Recognized Costs","Recognized Costs"::"Cost of Sales");
              SETRANGE("Recognized Sales","Recognized Sales"::"Contract (Invoiced Price)");
            END;
          Method::"Cost Value":
            BEGIN
              SETRANGE("Recognized Costs","Recognized Costs"::"Cost Value");
              SETRANGE("Recognized Sales","Recognized Sales"::"Contract (Invoiced Price)");
            END;
          Method::POC:
            BEGIN
              SETRANGE("Recognized Costs","Recognized Costs"::"Usage (Total Cost)");
              SETRANGE("Recognized Sales","Recognized Sales"::"Percentage of Completion");
            END;
          Method::"Sales Value":
            BEGIN
              SETRANGE("Recognized Costs","Recognized Costs"::"Usage (Total Cost)");
              SETRANGE("Recognized Sales","Recognized Sales"::"Sales Value");
            END;
        END;
        FINDFIRST;
      END;
    END;

    PROCEDURE RunUpdateJobItemCost@77(JobNo@1002 : Code[20]);
    VAR
      Job@1001 : Record 167;
      UpdateJobItemCost@1000 : Report 1095;
    BEGIN
      CLEAR(UpdateJobItemCost);
      Job.SETRANGE("No.",JobNo);
      UpdateJobItemCost.SETTABLEVIEW(Job);
      UpdateJobItemCost.USEREQUESTPAGE(FALSE);
      UpdateJobItemCost.RUN;
    END;

    PROCEDURE CreateJobWithPostingGroup@1500015(VAR Job@1500000 : Record 167;VAR JobPostingGroup@1500001 : Record 208);
    BEGIN
      CreateJob(Job);
      CreateJobPostingGroup(JobPostingGroup);
      Job.VALIDATE("Bill-to Customer No.",'');
      Job.VALIDATE("Job Posting Group",JobPostingGroup.Code);
      Job.VALIDATE("Job Type",Job."Job Type"::"Capital WIP");
      Job.MODIFY(TRUE);
    END;

    PROCEDURE CreateCapitalizeCWIPHeader@1500005(VAR CapitalizeCWIPHeader@1500000 : Record 16597;JobNo@1500001 : Code[20]);
    VAR
      Job@1500002 : Record 167;
      JobsSetup@1500003 : Record 315;
      LibraryERM@1500004 : Codeunit 131300;
    BEGIN
      CLEAR(CapitalizeCWIPHeader);
      JobsSetup.GET;
      JobsSetup.VALIDATE("Capitalize CWIP Nos.",LibraryERM.CreateNoSeriesCode);
      JobsSetup.VALIDATE("Posted Capitalize CWIP Nos.",LibraryERM.CreateNoSeriesCode);
      JobsSetup.MODIFY(TRUE);
      CapitalizeCWIPHeader.INSERT(TRUE);
      IF JobNo = '' THEN BEGIN
        CreateJob(Job);
        JobNo := Job."No.";
      END;
      CapitalizeCWIPHeader.VALIDATE("Job No.",JobNo);
      CapitalizeCWIPHeader.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

