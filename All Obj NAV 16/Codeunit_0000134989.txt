OBJECT Codeunit 134989 ERM Cash Flow - Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1007 : Codeunit 131300;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryCFHelper@1001 : Codeunit 131332;
      LibraryCF@1004 : Codeunit 131331;
      LibraryDimension@1008 : Codeunit 131001;
      LibraryFixedAsset@1011 : Codeunit 131330;
      LibraryReportDataset@1013 : Codeunit 131007;
      LibraryPurchase@1006 : Codeunit 130512;
      LibrarySales@1005 : Codeunit 130509;
      IsInitialized@1000 : Boolean;
      DocumentNoFilterText@1002 : Text[250];
      EmptyDateFormula@1012 : DateFormula;
      SourceType@1009 : ' ,Receivables,Payables,Liquid Funds,Cash Flow Manual Expense,Cash Flow Manual Revenue,Sales Order,Purchase Order,Fixed Assets Budget,Fixed Assets Disposal,Service Orders,G/L Budget';
      CFForecastNo@1010 : Code[20];

    [Test]
    [HandlerFunctions(RHCashFlowDateList)]
    PROCEDURE AllSourcesOnePeriodDateList@6();
    VAR
      CashFlowForecast@1000 : Record 840;
      SalesHeader@1001 : Record 36;
      PurchHeader@1002 : Record 38;
      CFManualRevenue@1005 : Record 849;
      CFManualExpense2@1006 : Record 850;
      FixedAsset@1009 : Record 5600;
      FixedAsset2@1010 : Record 5600;
      IntervalLength@1008 : DateFormula;
      TotalAmount@1007 : Decimal;
      CustomDateFormula@1013 : DateFormula;
      DeprecStartDateFormula@1014 : DateFormula;
      DeprecEndDateFormula@1015 : DateFormula;
      ConsiderSource@1018 : ARRAY [11] OF Boolean;
      SourceTypeValues@1019 : ARRAY [11] OF Decimal;
    BEGIN
      // Setup
      Initialize;
      LibraryCFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CreateDocumentsOnDate('<0D>',SalesHeader,PurchHeader,SourceTypeValues[10],CustomDateFormula);
      SourceTypeValues[1] := CreateCustLedgEntry(SalesHeader);
      SourceTypeValues[2] := CreateVendLedgEntry(PurchHeader);
      LibraryCFHelper.CreateManualRevenue(CFManualRevenue);
      AppendDocumentNoToFilter(CFManualRevenue.Code);
      LibraryCFHelper.CreateManualPayment(CFManualExpense2);
      AppendDocumentNoToFilter(CFManualExpense2.Code);
      // Investment in FA source
      SourceTypeValues[8] := LibraryRandom.RandDec(1000,2);
      LibraryCFHelper.CreateFixedAssetForInvestment(
        FixedAsset,LibraryFixedAsset.GetDefaultDeprBook,CustomDateFormula,SourceTypeValues[8]);
      AppendDocumentNoToFilter(FixedAsset."No.");
      // Disposal of FA source
      SourceTypeValues[9] := LibraryRandom.RandDec(1000,2);
      EVALUATE(DeprecStartDateFormula,'<-2Y>');
      EVALUATE(DeprecEndDateFormula,'<-1D>');
      LibraryCFHelper.CreateFixedAssetForDisposal(
        FixedAsset2,LibraryFixedAsset.GetDefaultDeprBook,DeprecStartDateFormula,
        DeprecEndDateFormula,CustomDateFormula,SourceTypeValues[9]);
      AppendDocumentNoToFilter(FixedAsset2."No.");
      SourceTypeValues[6] := GetSalesAmountIncVAT(SalesHeader);
      SourceTypeValues[7] := GetPurchaseAmountIncVAT(PurchHeader);
      TotalAmount :=
        CashFlowForecast.CalcAmountFromSource(SourceType::"Liquid Funds") +
        SourceTypeValues[6] + SourceTypeValues[10] - SourceTypeValues[7] + SourceTypeValues[1] +
        SourceTypeValues[2] + CFManualRevenue.Amount - CFManualExpense2.Amount - SourceTypeValues[8] + SourceTypeValues[9];

      FOR SourceType := 1 TO ARRAYLEN(ConsiderSource) DO
        ConsiderSource[SourceType] := TRUE;
      ConsiderSource[SourceType::"Liquid Funds"] := FALSE;
      ConsiderSource[SourceType::"G/L Budget"] := FALSE;
      FillAndPostCFJournal(ConsiderSource,CashFlowForecast."No.",DocumentNoFilterText,WORKDATE);

      // Exercise
      EVALUATE(IntervalLength,'<1D>');
      RunAndExportCFDateListReport(WORKDATE,1,IntervalLength,CashFlowForecast."No."); // include just 1 day (workdate)

      // Verify
      LibraryReportDataset.LoadDataSetFile;
      VerifyExpDateListSourceLine(SourceTypeValues,CFManualRevenue.Amount,-CFManualExpense2.Amount,TotalAmount,
        'FORMAT_DateFrom_',WORKDATE);
    END;

    [Test]
    [HandlerFunctions(RHCashFlowDateList)]
    PROCEDURE PartialSrcMultPeriodDateList@3();
    VAR
      CashFlowForecast@1016 : Record 840;
      SalesHeader@1015 : Record 36;
      PurchHeader@1014 : Record 38;
      IntervalLength@1006 : DateFormula;
      TotalAmountPeriod1@1005 : Decimal;
      TotalAmountPeriod2@1001 : Decimal;
      CustomDateFormula@1000 : DateFormula;
      ConsiderSource@1004 : ARRAY [11] OF Boolean;
      SourceTypeValues@1007 : ARRAY [11] OF Decimal;
    BEGIN
      // Setup
      Initialize;
      LibraryCFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CreateDocumentsOnDate('<1D>',SalesHeader,PurchHeader,SourceTypeValues[10],CustomDateFormula);
      SourceTypeValues[1] := CreateCustLedgEntry(SalesHeader);
      SourceTypeValues[2] := CreateVendLedgEntry(PurchHeader);

      TotalAmountPeriod1 :=
        CashFlowForecast.CalcAmountFromSource(SourceType::"Liquid Funds") + SourceTypeValues[1] + SourceTypeValues[2];
      TotalAmountPeriod2 :=
        TotalAmountPeriod1 + GetSalesAmountIncVAT(SalesHeader) + SourceTypeValues[10] - GetPurchaseAmountIncVAT(PurchHeader);
      ConsiderSalesPurchSources(ConsiderSource);
      FillAndPostCFJournal(ConsiderSource,CashFlowForecast."No.",DocumentNoFilterText,WORKDATE);

      // Exercise
      EVALUATE(IntervalLength,'<1D>');
      RunAndExportCFDateListReport(WORKDATE,2,IntervalLength,CashFlowForecast."No."); // include just 1 day (workdate)

      // Verify

      LibraryReportDataset.LoadDataSetFile;
      VerifyTotalAmount(TotalAmountPeriod1,'FORMAT_DateFrom_',WORKDATE);
      VerifyTotalAmount(TotalAmountPeriod2,'FORMAT_DateFrom_',CALCDATE(CustomDateFormula,WORKDATE));
    END;

    [Test]
    [HandlerFunctions(RHCashFlowDateList)]
    PROCEDURE BeforeAndAfterDateList@13();
    VAR
      CashFlowForecast@1000 : Record 840;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1017 : Record 36;
      PurchHeader@1002 : Record 38;
      PurchHeader2@1018 : Record 38;
      IntervalLength@1008 : DateFormula;
      TotalAmountBefore@1007 : Decimal;
      TotalAmountPeriod@1006 : Decimal;
      TotalAmountAfter@1005 : Decimal;
      CustomDateFormula@1013 : DateFormula;
      ConsiderSource@1014 : ARRAY [11] OF Boolean;
      SouceTypeValuesBefore@1015 : ARRAY [11] OF Decimal;
      SouceTypeValuesAfter@1009 : ARRAY [11] OF Decimal;
    BEGIN
      // Setup
      Initialize;
      LibraryCFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      // Sales and purchase order source - before date list period
      CreateDocumentsOnDate('<-1D>',SalesHeader,PurchHeader,SouceTypeValuesBefore[10],CustomDateFormula);
      // Sales and purchase order source - after date list period
      CreateDocumentsOnDate('<2D>',SalesHeader2,PurchHeader2,SouceTypeValuesAfter[10],CustomDateFormula);
      SouceTypeValuesBefore[1] := CreateCustLedgEntry(SalesHeader);
      SouceTypeValuesBefore[2] := CreateVendLedgEntry(PurchHeader);
      SouceTypeValuesBefore[6] := GetSalesAmountIncVAT(SalesHeader);
      SouceTypeValuesBefore[7] := GetPurchaseAmountIncVAT(PurchHeader);
      SouceTypeValuesAfter[6] := GetSalesAmountIncVAT(SalesHeader2);
      SouceTypeValuesAfter[7] := GetPurchaseAmountIncVAT(PurchHeader2);
      TotalAmountBefore :=
        CashFlowForecast.CalcAmountFromSource(SourceType::"Liquid Funds") +
        SouceTypeValuesBefore[6] + SouceTypeValuesBefore[10] - SouceTypeValuesBefore[7];
      TotalAmountPeriod := SouceTypeValuesBefore[1] + SouceTypeValuesBefore[2] + TotalAmountBefore;
      TotalAmountAfter := SouceTypeValuesAfter[6] + SouceTypeValuesAfter[10] - SouceTypeValuesAfter[7] + TotalAmountPeriod;

      // Fill and post journal
      ConsiderSalesPurchSources(ConsiderSource);
      FillAndPostCFJournal(ConsiderSource,CashFlowForecast."No.",DocumentNoFilterText,CALCDATE('<-1D>',WORKDATE));

      // Exercise
      EVALUATE(IntervalLength,'<1D>');
      RunAndExportCFDateListReport(WORKDATE,1,IntervalLength,CashFlowForecast."No.");

      // Verify
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('NewCFSumTotal',TotalAmountBefore);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('NewCFSumTotal',TotalAmountPeriod);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('NewCFSumTotal',TotalAmountAfter);
    END;

    [Test]
    [HandlerFunctions(RHCashFlowDimensionsDetail)]
    PROCEDURE DimensionDetailCashFlowForecast@2();
    VAR
      Object@1007 : Record 2000000001;
      CashFlowForecast@1000 : Record 840;
      CashFlowForecastEntry@1005 : Record 847;
      AnalysisView@1002 : Record 363;
      SelectedDimension@1003 : Record 369;
      CashFlowDimensionsDetail@1001 : Report 852;
      DateFilter@1006 : Text[30];
      ConsiderSource@1013 : ARRAY [11] OF Boolean;
      CashFlowStartDate@1008 : Date;
      CashFlowEndDate@1009 : Date;
    BEGIN
      // Tests the Dimension - Total report with cash flow view and column layout

      // Setup
      LibraryCF.FindCashFlowCard(CashFlowForecast);
      LibraryCF.FindCashFlowAnalysisView(AnalysisView);

      SelectedDimension.DELETEALL;
      LibraryDimension.CreateSelectedDimension(
        SelectedDimension,Object.Type::Report,REPORT::"Cash Flow Dimensions - Detail",AnalysisView.Code,
        LibraryERM.GetGlobalDimensionCode(2));
      SelectedDimension.VALIDATE(Level,SelectedDimension.Level::"Level 1");
      SelectedDimension.MODIFY(TRUE);

      ConsiderSource[SourceType::Receivables] := TRUE;
      FillAndPostCFJournal(ConsiderSource,CashFlowForecast."No.",'',GetCustLedgEntryPostingDate);

      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);

      CashFlowForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.","Cash Flow Date");
      CashFlowForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CashFlowForecastEntry.SETFILTER("Dimension Set ID",'<>%1',0);
      CashFlowForecastEntry.FINDFIRST;
      CashFlowStartDate := CashFlowForecastEntry."Cash Flow Date";
      CashFlowForecastEntry.FINDLAST;
      CashFlowEndDate := CashFlowForecastEntry."Cash Flow Date";
      CashFlowForecastEntry.SETRANGE("Cash Flow Date",CashFlowStartDate,CashFlowEndDate);
      DateFilter := FORMAT(CashFlowStartDate) + '..' + FORMAT(CashFlowEndDate);

      // Exercise
      CashFlowDimensionsDetail.InitializeRequest(AnalysisView.Code,CashFlowForecast."No.",DateFilter,FALSE);
      COMMIT;
      CashFlowDimensionsDetail.RUN;

      // Verify
      // Check that all CF LEs are included in the report
      CashFlowForecastEntry.FINDSET;
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        LibraryReportDataset.SetRange('TempCFLedgEntryEntryNo',CashFlowForecastEntry."Entry No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertElementWithValueExists('TempCFLedgEntryAmt',CashFlowForecastEntry."Amount (LCY)");
      UNTIL CashFlowForecastEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE AppendDocumentNoToFilter@9(DocumentNo@1000 : Code[20]);
    BEGIN
      IF STRLEN(DocumentNoFilterText) = 0 THEN
        DocumentNoFilterText := DocumentNo
      ELSE
        DocumentNoFilterText += STRSUBSTNO('|%1',DocumentNo);
    END;

    LOCAL PROCEDURE CalcServiceHeaderAmt@16(VAR ServiceHeader@1000 : Record 5900) : Decimal;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.CALCSUMS("Amount Including VAT");
      EXIT(ServiceLine."Amount Including VAT");
    END;

    LOCAL PROCEDURE CreateSalesOrder@37(VAR SalesHeader@1000 : Record 36;DocumentDate@1001 : Date;PaymentTermsCode@1003 : Code[10]);
    BEGIN
      LibraryCFHelper.CreateSpecificSalesOrder(SalesHeader,'',PaymentTermsCode);
      SalesHeader.VALIDATE("Document Date",DocumentDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS(Amount);
    END;

    LOCAL PROCEDURE CreateServiceOrder@1(VAR ServiceHeader@1000 : Record 5900;DocumentDate@1001 : Date;PaymentTermsCode@1003 : Code[10]);
    BEGIN
      LibraryCFHelper.CreateSpecificServiceOrder(ServiceHeader,'',PaymentTermsCode);
      ServiceHeader.VALIDATE("Document Date",DocumentDate);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@38(VAR PurchaseHeader@1000 : Record 38;DocumentDate@1001 : Date;PaymentTermsCode@1003 : Code[10]);
    BEGIN
      LibraryCFHelper.CreateSpecificPurchaseOrder(PurchaseHeader,'',PaymentTermsCode);
      PurchaseHeader.VALIDATE("Document Date",DocumentDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS(Amount);
    END;

    LOCAL PROCEDURE FillAndPostCFJournal@40(ConsiderSource@1012 : ARRAY [11] OF Boolean;CFNo@1001 : Code[20];DocumentNoFilterText@1014 : Text[250];CashFlowStartDate@1000 : Date);
    VAR
      CFWorksheetLine@1015 : Record 846;
    BEGIN
      LibraryCF.ClearJournal;
      LibraryCF.FillJournal(ConsiderSource,CFNo,FALSE);
      CFWorksheetLine.SETFILTER("Document No.",DocumentNoFilterText);
      CFWorksheetLine.SETFILTER("Cash Flow Date",'>=%1',CashFlowStartDate);
      LibraryCF.PostJournalLines(CFWorksheetLine);
    END;

    LOCAL PROCEDURE GetSalesAmountIncVAT@52(SalesHeader@1001 : Record 36) : Decimal;
    BEGIN
      SalesHeader.CALCFIELDS("Amount Including VAT");
      EXIT(SalesHeader."Amount Including VAT");
    END;

    LOCAL PROCEDURE GetPurchaseAmountIncVAT@65(PurchHeader@1001 : Record 38) : Decimal;
    BEGIN
      PurchHeader.CALCFIELDS("Amount Including VAT");
      EXIT(PurchHeader."Amount Including VAT");
    END;

    LOCAL PROCEDURE GetCustLedgEntryPostingDate@55() : Date;
    VAR
      CustLedgEntry@1000 : Record 21;
    BEGIN
      CustLedgEntry.FINDFIRST;
      EXIT(CustLedgEntry."Posting Date");
    END;

    LOCAL PROCEDURE RunAndExportCFDateListReport@18(FromDate@1000 : Date;NumberOfIntervals@1001 : Integer;IntervalLength@1002 : DateFormula;CFNo@1003 : Code[20]);
    VAR
      CashFlowForecast@1005 : Record 840;
      CFDateList@1004 : Report 846;
    BEGIN
      CashFlowForecast.SETRANGE("No.",CFNo);
      CFDateList.SETTABLEVIEW(CashFlowForecast);
      CFDateList.InitializeRequest(FromDate,NumberOfIntervals,IntervalLength);
      COMMIT;
      CFDateList.RUN;
    END;

    LOCAL PROCEDURE VerifyExpDateListSourceLine@7(SourceValues@1000 : ARRAY [11] OF Decimal;NeutrRevenues@1004 : Decimal;NeutrExpenses@1003 : Decimal;CFInterference@1002 : Decimal;ElementName@1005 : Text;FilterValue@1001 : Date);
    BEGIN
      LibraryReportDataset.SetRange(ElementName,FORMAT(FilterValue));
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Receivables',SourceValues[1]);
      LibraryReportDataset.AssertCurrentRowValue('Payables',SourceValues[2]);
      LibraryReportDataset.AssertCurrentRowValue('Sales_Orders_',SourceValues[6]);
      LibraryReportDataset.AssertCurrentRowValue('Purchase_Orders_',-SourceValues[7]);
      LibraryReportDataset.AssertCurrentRowValue('InvFixedAssets',-SourceValues[8]);
      LibraryReportDataset.AssertCurrentRowValue('SaleFixedAssets',SourceValues[9]);
      LibraryReportDataset.AssertCurrentRowValue('Service_Orders_',SourceValues[10]);
      LibraryReportDataset.AssertCurrentRowValue('ManualRevenues',NeutrRevenues);
      LibraryReportDataset.AssertCurrentRowValue('ManualExpenses',NeutrExpenses);
      LibraryReportDataset.AssertCurrentRowValue('NewCFSumTotal',CFInterference);
    END;

    LOCAL PROCEDURE VerifyTotalAmount@12(CFInterference@1002 : Decimal;ElementName@1005 : Text;FilterValue@1001 : Date);
    BEGIN
      LibraryReportDataset.SetRange(ElementName,FORMAT(FilterValue));
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('NewCFSumTotal',CFInterference);
    END;

    [Test]
    [HandlerFunctions(RHCashFlowDateList)]
    PROCEDURE TestLiquidFundonCashFlowDateListReport@94();
    VAR
      CFForecastEntry@1000 : Record 847;
    BEGIN
      TestAmountsonCashFlowDateListReport(CFForecastEntry."Source Type"::"Liquid Funds");
    END;

    [Test]
    [HandlerFunctions(RHCashFlowDateList)]
    PROCEDURE TestGLBudgetonCashFlowDateListReport@92();
    VAR
      CFForecastEntry@1000 : Record 847;
    BEGIN
      TestAmountsonCashFlowDateListReport(CFForecastEntry."Source Type"::"G/L Budget");
    END;

    LOCAL PROCEDURE TestAmountsonCashFlowDateListReport@82(CFEntryType@1000 : Option);
    VAR
      CFForecastEntry@1004 : Record 847;
      CFForecast@1003 : Record 840;
      Amount@1002 : Decimal;
      IntervalLength@1001 : DateFormula;
    BEGIN
      // Bug 279751 - To check Liquidity and G/L budget columns on Cash Flow Date List report Using CashFlowDateListReportHandler.
      // Setup : Create Cash Flow card and insert Cash Flow Forecast Entry.
      Initialize;
      LibraryCF.CreateCashFlowCard(CFForecast);
      CFForecastNo := CFForecast."No.";
      Amount := LibraryRandom.RandDec(100,2);
      LibraryCFHelper.InsertCFLedgerEntry(CFForecastNo,'',CFEntryType,WORKDATE,Amount);

      // Exercise : Run report Cash Flow Date List.
      EVALUATE(IntervalLength,'<1D>');
      RunAndExportCFDateListReport(WORKDATE,0,IntervalLength,CFForecastNo); // include just 1 day (workdate)
      LibraryReportDataset.LoadDataSetFile;

      // Verify : Liquidity or G/L budget column amounts on Cash flow date list report.
      IF CFEntryType = CFForecastEntry."Source Type"::"Liquid Funds" THEN
        LibraryReportDataset.AssertElementWithValueExists('Liquidity',Amount)
      ELSE
        LibraryReportDataset.AssertElementWithValueExists('GLBudget',Amount);
    END;

    LOCAL PROCEDURE Initialize@19();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      DocumentNoFilterText := '';
      EVALUATE(EmptyDateFormula,'<0D>');

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDocumentsOnDate@5(DateString@1000 : Text;VAR SalesHeader@1003 : Record 36;VAR PurchHeader@1001 : Record 38;VAR ServiceHeaderAmount@1004 : Decimal;VAR CustomDateFormula@1005 : DateFormula);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      EVALUATE(CustomDateFormula,DateString);
      CreateSalesOrder(SalesHeader,CALCDATE(CustomDateFormula,WORKDATE),'');
      AppendDocumentNoToFilter(SalesHeader."No.");
      CreateServiceOrder(ServiceHeader,CALCDATE(CustomDateFormula,WORKDATE),'');
      AppendDocumentNoToFilter(ServiceHeader."No.");
      ServiceHeaderAmount := CalcServiceHeaderAmt(ServiceHeader);
      CreatePurchaseOrder(PurchHeader,CALCDATE(CustomDateFormula,WORKDATE),'');
      AppendDocumentNoToFilter(PurchHeader."No.");
    END;

    LOCAL PROCEDURE CreateCustLedgEntry@22(SalesHeader@1000 : Record 36) : Decimal;
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      LibraryCFHelper.CreateLedgerEntry(GenJournalLine,SalesHeader."Sell-to Customer No.",SalesHeader.Amount,
        GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice);
      AppendDocumentNoToFilter(GenJournalLine."Document No.");
      EXIT(GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE CreateVendLedgEntry@23(PurchHeader@1000 : Record 38) : Decimal;
    VAR
      GenJournalLine2@1001 : Record 81;
    BEGIN
      LibraryCFHelper.CreateLedgerEntry(GenJournalLine2,PurchHeader."Buy-from Vendor No.",-PurchHeader.Amount,
        GenJournalLine2."Account Type"::Vendor,GenJournalLine2."Document Type"::Invoice);
      AppendDocumentNoToFilter(GenJournalLine2."Document No.");
      EXIT(GenJournalLine2.Amount);
    END;

    LOCAL PROCEDURE ConsiderSalesPurchSources@33(VAR ConsiderSource@1000 : ARRAY [11] OF Boolean);
    BEGIN
      ConsiderSource[SourceType::Receivables] := TRUE;
      ConsiderSource[SourceType::Payables] := TRUE;
      ConsiderSource[SourceType::"Sales Order"] := TRUE;
      ConsiderSource[SourceType::"Purchase Order"] := TRUE;
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE RHCashFlowDateList@10(VAR CashFlowDateList@1000 : TestRequestPage 846);
    BEGIN
      CashFlowDateList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHCashFlowDimensionsDetail@11(VAR CashFlowDimensionsDetail@1000 : TestRequestPage 852);
    BEGIN
      CashFlowDimensionsDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow]
      Area:     Reporting
                Basic report tests
                - CF Date List report
    }
    END.
  }
}

