OBJECT Table 14 Location
{
  OBJECT-PROPERTIES
  {
    Date=23-11-17;
    Time=11:52:08 AM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnDelete=VAR
               TransferRoute@1000 : Record 5742;
               WhseEmployee@1003 : Record 7301;
               WorkCenter@1004 : Record 99000754;
             BEGIN
               WMSCheckWarehouse;

               TransferRoute.SETRANGE("Transfer-from Code",Code);
               TransferRoute.DELETEALL;
               TransferRoute.RESET;
               TransferRoute.SETRANGE("Transfer-to Code",Code);
               TransferRoute.DELETEALL;

               WhseEmployee.SETRANGE("Location Code",Code);
               WhseEmployee.DELETEALL(TRUE);

               WorkCenter.SETRANGE("Location Code",Code);
               IF WorkCenter.FINDSET(TRUE) THEN
                 REPEAT
                   WorkCenter.VALIDATE("Location Code",'');
                   WorkCenter.MODIFY(TRUE);
                 UNTIL WorkCenter.NEXT = 0;
             END;

    CaptionML=[ENU=Location;
               ENN=Location];
    LookupPageID=Page15;
    DrillDownPageID=Page15;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENN=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENN=Name] }
    { 130 ;   ;Default Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Default Bin Code;
                                                              ENN=Default Bin Code] }
    { 5700;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENN=Name 2] }
    { 5701;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ENN=Address] }
    { 5702;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENN=Address 2] }
    { 5703;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 5704;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 5705;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No. 2;
                                                              ENN=Phone No. 2] }
    { 5706;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENN=Telex No.] }
    { 5707;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 5713;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              ENN=Contact] }
    { 5714;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                Postcode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Post Code] }
    { 5715;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County] }
    { 5718;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENN=E-Mail] }
    { 5719;   ;Home Page           ;Text90        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENN=Home Page] }
    { 5720;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 5724;   ;Use As In-Transit   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use As In-Transit" THEN BEGIN
                                                                  TESTFIELD("Require Put-away",FALSE);
                                                                  TESTFIELD("Require Pick",FALSE);
                                                                  TESTFIELD("Use Cross-Docking",FALSE);
                                                                  TESTFIELD("Require Receive",FALSE);
                                                                  TESTFIELD("Require Shipment",FALSE);
                                                                  TESTFIELD("Bin Mandatory",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5740=R;
                                                   CaptionML=[ENU=Use As In-Transit;
                                                              ENN=Use As In-Transit] }
    { 5726;   ;Require Put-away    ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseRcptHeader@1001 : Record 7316;
                                                              BEGIN
                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF WhseRcptHeader.FINDFIRST THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Put-away"),xRec."Require Put-away",WhseRcptHeader.TABLECAPTION);

                                                                IF NOT "Require Put-away" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF WhseActivHeader.FINDFIRST THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Put-away"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE
                                                                  CreateInboundWhseRequest;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Require Put-away;
                                                              ENN=Require Put-away] }
    { 5727;   ;Require Pick        ;Boolean       ;OnValidate=VAR
                                                                WhseActivHeader@1000 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                              BEGIN
                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF WhseShptHeader.FINDFIRST THEN
                                                                  ERROR(Text008,FIELDCAPTION("Require Pick"),xRec."Require Pick",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Require Pick" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF WhseActivHeader.FINDFIRST THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Pick"),TRUE,WhseActivHeader.TABLECAPTION);
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "Pick According to FEFO" := FALSE;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Require Pick;
                                                              ENN=Require Pick] }
    { 5728;   ;Cross-Dock Due Date Calc.;DateFormula;
                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Cross-Dock Due Date Calc.;
                                                              ENN=Cross-Dock Due Date Calc.] }
    { 5729;   ;Use Cross-Docking   ;Boolean       ;OnValidate=BEGIN
                                                                IF "Use Cross-Docking" THEN BEGIN
                                                                  TESTFIELD("Require Receive");
                                                                  TESTFIELD("Require Shipment");
                                                                  TESTFIELD("Require Put-away");
                                                                  TESTFIELD("Require Pick");
                                                                END ELSE
                                                                  "Cross-Dock Bin Code" := '';
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Use Cross-Docking;
                                                              ENN=Use Cross-Docking] }
    { 5730;   ;Require Receive     ;Boolean       ;OnValidate=VAR
                                                                WhseRcptHeader@1000 : Record 7316;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Receive" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                  WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                  IF WhseRcptHeader.FINDFIRST THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),TRUE,WhseRcptHeader.TABLECAPTION);
                                                                  "Receipt Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF WhseActivHeader.FINDFIRST THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Receive"),FALSE,WhseActivHeader.TABLECAPTION);

                                                                  CreateInboundWhseRequest;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7316=R;
                                                   CaptionML=[ENU=Require Receive;
                                                              ENN=Require Receive] }
    { 5731;   ;Require Shipment    ;Boolean       ;OnValidate=VAR
                                                                WhseShptHeader@1000 : Record 7320;
                                                                WhseActivHeader@1001 : Record 5766;
                                                              BEGIN
                                                                IF NOT "Require Shipment" THEN BEGIN
                                                                  TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                  WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                  WhseShptHeader.SETRANGE("Location Code",Code);
                                                                  IF WhseShptHeader.FINDFIRST THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),TRUE,WhseShptHeader.TABLECAPTION);
                                                                  "Shipment Bin Code" := '';
                                                                  "Use Cross-Docking" := FALSE;
                                                                  "Cross-Dock Bin Code" := '';
                                                                END ELSE BEGIN
                                                                  WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                                                                  WhseActivHeader.SETRANGE("Location Code",Code);
                                                                  IF WhseActivHeader.FINDFIRST THEN
                                                                    ERROR(Text008,FIELDCAPTION("Require Shipment"),FALSE,WhseActivHeader.TABLECAPTION);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=[ENU=Require Shipment;
                                                              ENN=Require Shipment] }
    { 5732;   ;Bin Mandatory       ;Boolean       ;OnValidate=VAR
                                                                ItemLedgEntry@1004 : Record 32;
                                                                WhseEntry@1000 : Record 7312;
                                                                WhseActivHeader@1001 : Record 5766;
                                                                WhseShptHeader@1002 : Record 7320;
                                                                WhseRcptHeader@1003 : Record 7316;
                                                                WhseIntegrationMgt@1006 : Codeunit 7317;
                                                                Window@1005 : Dialog;
                                                              BEGIN
                                                                IF "Bin Mandatory" AND NOT xRec."Bin Mandatory" THEN BEGIN
                                                                  Window.OPEN(Text010);
                                                                  ItemLedgEntry.SETRANGE(Open,TRUE);
                                                                  ItemLedgEntry.SETRANGE("Location Code",Code);
                                                                  IF NOT ItemLedgEntry.ISEMPTY THEN
                                                                    ERROR(Text009,FIELDCAPTION("Bin Mandatory"));

                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                END;

                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text008,FIELDCAPTION("Bin Mandatory"),xRec."Bin Mandatory",WhseShptHeader.TABLECAPTION);

                                                                IF NOT "Bin Mandatory" AND xRec."Bin Mandatory" THEN BEGIN
                                                                  WhseEntry.SETRANGE("Location Code",Code);
                                                                  WhseEntry.CALCSUMS("Qty. (Base)");
                                                                  IF WhseEntry."Qty. (Base)" <> 0 THEN
                                                                    ERROR(Text002,FIELDCAPTION("Bin Mandatory"));
                                                                END;

                                                                IF NOT "Bin Mandatory" THEN BEGIN
                                                                  "Open Shop Floor Bin Code" := '';
                                                                  "To-Production Bin Code" := '';
                                                                  "From-Production Bin Code" := '';
                                                                  "Adjustment Bin Code" := '';
                                                                  "Receipt Bin Code" := '';
                                                                  "Shipment Bin Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  "To-Assembly Bin Code" := '';
                                                                  "From-Assembly Bin Code" := '';
                                                                  WhseIntegrationMgt.CheckLocationOnManufBins(Rec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Bin Mandatory;
                                                              ENN=Bin Mandatory] }
    { 5733;   ;Directed Put-away and Pick;Boolean ;OnValidate=VAR
                                                                WhseActivHeader@1002 : Record 5766;
                                                                WhseShptHeader@1001 : Record 7320;
                                                                WhseRcptHeader@1000 : Record 7316;
                                                              BEGIN
                                                                WhseActivHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseActivHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseActivHeader.TABLECAPTION);

                                                                WhseRcptHeader.SETCURRENTKEY("Location Code");
                                                                WhseRcptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseRcptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseRcptHeader.TABLECAPTION);

                                                                WhseShptHeader.SETCURRENTKEY("Location Code");
                                                                WhseShptHeader.SETRANGE("Location Code",Code);
                                                                IF NOT WhseShptHeader.ISEMPTY THEN
                                                                  ERROR(Text014,FIELDCAPTION("Directed Put-away and Pick"),WhseShptHeader.TABLECAPTION);

                                                                IF "Directed Put-away and Pick" THEN BEGIN
                                                                  TESTFIELD("Use As In-Transit",FALSE);
                                                                  TESTFIELD("Bin Mandatory");
                                                                  VALIDATE("Require Receive",TRUE);
                                                                  VALIDATE("Require Shipment",TRUE);
                                                                  VALIDATE("Require Put-away",TRUE);
                                                                  VALIDATE("Require Pick",TRUE);
                                                                  VALIDATE("Use Cross-Docking",TRUE);
                                                                  "Default Bin Selection" := "Default Bin Selection"::" ";
                                                                END ELSE
                                                                  VALIDATE("Adjustment Bin Code",'');

                                                                IF (NOT "Directed Put-away and Pick") AND xRec."Directed Put-away and Pick" THEN BEGIN
                                                                  "Default Bin Selection" := "Default Bin Selection"::"Fixed Bin";
                                                                  "Use Put-away Worksheet" := FALSE;
                                                                  VALIDATE("Use Cross-Docking",FALSE);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Directed Put-away and Pick;
                                                              ENN=Directed Put-away and Pick] }
    { 5734;   ;Default Bin Selection;Option       ;OnValidate=BEGIN
                                                                IF ("Default Bin Selection" <> xRec."Default Bin Selection") AND ("Default Bin Selection" = "Default Bin Selection"::" ") THEN
                                                                  TESTFIELD("Directed Put-away and Pick");
                                                              END;

                                                   AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Default Bin Selection;
                                                              ENN=Default Bin Selection];
                                                   OptionCaptionML=[ENU=" ,Fixed Bin,Last-Used Bin";
                                                                    ENN=" ,Fixed Bin,Last-Used Bin"];
                                                   OptionString=[ ,Fixed Bin,Last-Used Bin] }
    { 5790;   ;Outbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5791;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENN=Inbound Whse. Handling Time] }
    { 7305;   ;Put-away Template Code;Code10      ;TableRelation="Put-away Template Header";
                                                   CaptionML=[ENU=Put-away Template Code;
                                                              ENN=Put-away Template Code] }
    { 7306;   ;Use Put-away Worksheet;Boolean     ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Use Put-away Worksheet;
                                                              ENN=Use Put-away Worksheet] }
    { 7307;   ;Pick According to FEFO;Boolean     ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Pick According to FEFO;
                                                              ENN=Pick According to FEFO] }
    { 7308;   ;Allow Breakbulk     ;Boolean       ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Allow Breakbulk;
                                                              ENN=Allow Breakbulk] }
    { 7309;   ;Bin Capacity Policy ;Option        ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Bin Capacity Policy;
                                                              ENN=Bin Capacity Policy];
                                                   OptionCaptionML=[ENU=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap.;
                                                                    ENN=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap.];
                                                   OptionString=Never Check Capacity,Allow More Than Max. Capacity,Prohibit More Than Max. Cap. }
    { 7313;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=Open Shop Floor Bin Code;
                                                              ENN=Open Shop Floor Bin Code] }
    { 7314;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=To-Production Bin Code;
                                                              ENN=To-Production Bin Code] }
    { 7315;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=From-Production Bin Code;
                                                              ENN=From-Production Bin Code] }
    { 7317;   ;Adjustment Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=BEGIN
                                                                IF "Adjustment Bin Code" <> xRec."Adjustment Bin Code" THEN BEGIN
                                                                  IF "Adjustment Bin Code" = '' THEN
                                                                    CheckEmptyBin(
                                                                      xRec."Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"))
                                                                  ELSE
                                                                    CheckEmptyBin(
                                                                      "Adjustment Bin Code",FIELDCAPTION("Adjustment Bin Code"));

                                                                  CheckWhseAdjmtJnl;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Adjustment Bin Code;
                                                              ENN=Adjustment Bin Code] }
    { 7319;   ;Always Create Put-away Line;Boolean;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Always Create Put-away Line;
                                                              ENN=Always Create Put-away Line] }
    { 7320;   ;Always Create Pick Line;Boolean    ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Always Create Pick Line;
                                                              ENN=Always Create Pick Line] }
    { 7321;   ;Special Equipment   ;Option        ;AccessByPermission=TableData 5771=R;
                                                   CaptionML=[ENU=Special Equipment;
                                                              ENN=Special Equipment];
                                                   OptionCaptionML=[ENU=" ,According to Bin,According to SKU/Item";
                                                                    ENN=" ,According to Bin,According to SKU/Item"];
                                                   OptionString=[ ,According to Bin,According to SKU/Item] }
    { 7323;   ;Receipt Bin Code    ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Receipt Bin Code;
                                                              ENN=Receipt Bin Code] }
    { 7325;   ;Shipment Bin Code   ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Shipment Bin Code;
                                                              ENN=Shipment Bin Code] }
    { 7326;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   CaptionML=[ENU=Cross-Dock Bin Code;
                                                              ENN=Cross-Dock Bin Code] }
    { 7330;   ;To-Assembly Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "To-Assembly Bin Code",
                                                                  FIELDCAPTION("To-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=To-Assembly Bin Code;
                                                              ENN=To-Assembly Bin Code] }
    { 7331;   ;From-Assembly Bin Code;Code20      ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "From-Assembly Bin Code",
                                                                  FIELDCAPTION("From-Assembly Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=From-Assembly Bin Code;
                                                              ENN=From-Assembly Bin Code] }
    { 7332;   ;Asm.-to-Order Shpt. Bin Code;Code20;TableRelation=Bin.Code WHERE (Location Code=FIELD(Code));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit 7317;
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode(Code,
                                                                  "Asm.-to-Order Shpt. Bin Code",
                                                                  FIELDCAPTION("Asm.-to-Order Shpt. Bin Code"),
                                                                  DATABASE::Location,Code);
                                                              END;

                                                   CaptionML=[ENU=Asm.-to-Order Shpt. Bin Code;
                                                              ENN=Asm.-to-Order Shpt. Bin Code] }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENN=Base Calendar Code] }
    { 7700;   ;Use ADCS            ;Boolean       ;AccessByPermission=TableData 7700=R;
                                                   CaptionML=[ENU=Use ADCS;
                                                              ENN=Use ADCS] }
    { 13701;  ;Purch. Invoice Nos. ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Invoice Nos.;
                                                              ENN=Purch. Invoice Nos.] }
    { 13702;  ;Purch. Receipt Nos. ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Receipt Nos.;
                                                              ENN=Purch. Receipt Nos.] }
    { 13703;  ;Sales Invoice Nos.  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Invoice Nos.;
                                                              ENN=Sales Invoice Nos.] }
    { 13704;  ;Sales Shipment Nos. ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Shipment Nos.;
                                                              ENN=Sales Shipment Nos.] }
    { 13707;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13708;  ;E.C.C. No.          ;Code20        ;TableRelation="E.C.C. Nos.";
                                                   CaptionML=[ENU=E.C.C. No.;
                                                              ENN=E.C.C. No.] }
    { 13714;  ;State Code          ;Code10        ;TableRelation=State;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("GST Registration No.",'');
                                                              END;

                                                   CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 16360;  ;Subcontracting Location;Boolean    ;CaptionML=[ENU=Subcontracting Location;
                                                              ENN=Subcontracting Location] }
    { 16361;  ;Subcontractor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Subcontractor No.;
                                                              ENN=Subcontractor No.] }
    { 16362;  ;T.A.N. No.          ;Code10        ;TableRelation="T.A.N. Nos.";
                                                   CaptionML=[ENU=T.A.N. No.;
                                                              ENN=T.A.N. No.] }
    { 16363;  ;T.I.N. No.          ;Code11        ;TableRelation="T.I.N. Nos.";
                                                   OnValidate=BEGIN
                                                                IF State.GET("State Code") THEN BEGIN
                                                                  IF (COPYSTR(State."State Code for TIN",1,2) <> COPYSTR("T.I.N. No.",1,2)) AND ("T.I.N. No." <> '') THEN
                                                                    ERROR(Text16500,"State Code",COPYSTR(State."State Code for TIN",1,2));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=T.I.N. No.;
                                                              ENN=T.I.N. No.] }
    { 16364;  ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.".Code;
                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 16500;  ;T.C.A.N. No.        ;Code10        ;TableRelation="T.C.A.N. No.";
                                                   CaptionML=[ENU=T.C.A.N. No.;
                                                              ENN=T.C.A.N. No.] }
    { 16501;  ;Composition         ;Boolean       ;CaptionML=[ENU=Composition;
                                                              ENN=Composition] }
    { 16502;  ;Export or Deemed Export;Boolean    ;CaptionML=[ENU=Export or Deemed Export;
                                                              ENN=Export or Deemed Export] }
    { 16503;  ;Composition Type    ;Option        ;CaptionML=[ENU=Composition Type;
                                                              ENN=Composition Type];
                                                   OptionCaptionML=[ENU=" ,Retailer,Works Contract,Bakery,Restaurant / Club,Second Hand Motor Vehicle";
                                                                    ENN=" ,Retailer,Works Contract,Bakery,Restaurant / Club,Second Hand Motor Vehicle"];
                                                   OptionString=[ ,Retailer,Works Contract,Bakery,Restaurant / Club,Second Hand Motor Vehicle] }
    { 16504;  ;Trading Location    ;Boolean       ;CaptionML=[ENU=Trading Location;
                                                              ENN=Trading Location] }
    { 16505;  ;Testing Location    ;Boolean       ;CaptionML=[ENU=Testing Location;
                                                              ENN=Testing Location] }
    { 16506;  ;Input Service Distributor;Boolean  ;CaptionML=[ENU=Input Service Distributor;
                                                              ENN=Input Service Distributor] }
    { 16507;  ;Sales Shipment Nos. (Captive);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Shipment Nos. (Captive);
                                                              ENN=Sales Shipment Nos. (Captive)] }
    { 16508;  ;Purch. Credit Memo Nos.;Code10     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Credit Memo Nos.;
                                                              ENN=Purch. Credit Memo Nos.] }
    { 16509;  ;Sales Return Receipt Nos.;Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Return Receipt Nos.;
                                                              ENN=Sales Return Receipt Nos.] }
    { 16510;  ;Sales Credit Memo Nos.;Code10      ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Credit Memo Nos.;
                                                              ENN=Sales Credit Memo Nos.] }
    { 16511;  ;Purch. Ret. Shipment Nos.;Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Ret. Shipment Nos.;
                                                              ENN=Purch. Ret. Shipment Nos.] }
    { 16512;  ;Transfer Shipment Nos.;Code10      ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Transfer Shipment Nos.;
                                                              ENN=Transfer Shipment Nos.] }
    { 16513;  ;Transfer Receipt Nos.;Code10       ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Transfer Receipt Nos.;
                                                              ENN=Transfer Receipt Nos.] }
    { 16514;  ;Purh. Invoice Nos. (Trading);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purh. Invoice Nos. (Trading);
                                                              ENN=Purh. Invoice Nos. (Trading)] }
    { 16515;  ;Sales Invoice Nos. (Trading);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Invoice Nos. (Trading);
                                                              ENN=Sales Invoice Nos. (Trading)] }
    { 16516;  ;Sales Ret Rcpt Nos. (Trading);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Ret Rcpt Nos. (Trading);
                                                              ENN=Sales Ret Rcpt Nos. (Trading)] }
    { 16517;  ;Purch. Ret Shpt Nos. (Trading);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Ret Shpt Nos. (Trading);
                                                              ENN=Purch. Ret Shpt Nos. (Trading)] }
    { 16518;  ;Purch. Rcpt. Nos. (Trading);Code10 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Rcpt. Nos. (Trading);
                                                              ENN=Purch. Rcpt. Nos. (Trading)] }
    { 16519;  ;Sales Shpt. Nos. (Trading);Code10  ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Shpt. Nos. (Trading);
                                                              ENN=Sales Shpt. Nos. (Trading)] }
    { 16520;  ;Purch Cr. Memo Nos. (Trading);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch Cr. Memo Nos. (Trading);
                                                              ENN=Purch Cr. Memo Nos. (Trading)] }
    { 16521;  ;Sale Cr. Memo Nos. (Trading);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sale Cr. Memo Nos. (Trading);
                                                              ENN=Sale Cr. Memo Nos. (Trading)] }
    { 16522;  ;L.S.T. No.          ;Code20        ;CaptionML=[ENU=L.S.T. No.;
                                                              ENN=L.S.T. No.] }
    { 16523;  ;C.S.T No.           ;Code20        ;CaptionML=[ENU=C.S.T No.;
                                                              ENN=C.S.T No.] }
    { 16524;  ;C.E. Range          ;Code20        ;CaptionML=[ENU=C.E. Range;
                                                              ENN=C.E. Range] }
    { 16525;  ;C.E. Commissionerate;Code20        ;CaptionML=[ENU=C.E. Commissionerate;
                                                              ENN=C.E. Commissionerate] }
    { 16526;  ;C.E. Division       ;Code20        ;CaptionML=[ENU=C.E. Division;
                                                              ENN=C.E. Division] }
    { 16527;  ;Posted Serv. Shipment Nos.;Code10  ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Serv. Shipment Nos.;
                                                              ENN=Posted Serv. Shipment Nos.] }
    { 16528;  ;Posted Serv. Invoice Nos.;Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Serv. Invoice Nos.;
                                                              ENN=Posted Serv. Invoice Nos.] }
    { 16529;  ;Posted Serv. Cr. Memo Nos.;Code10  ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Serv. Cr. Memo Nos.;
                                                              ENN=Posted Serv. Cr. Memo Nos.] }
    { 16530;  ;Serv. Shipment Nos. (Trading);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Shipment Nos. (Trading);
                                                              ENN=Serv. Shipment Nos. (Trading)] }
    { 16531;  ;Serv. Invoice Nos. (Trading);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Invoice Nos. (Trading);
                                                              ENN=Serv. Invoice Nos. (Trading)] }
    { 16532;  ;Serv. Cr. Memo Nos. (Trading);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Cr. Memo Nos. (Trading);
                                                              ENN=Serv. Cr. Memo Nos. (Trading)] }
    { 16600;  ;GST Registration No.;Code15        ;TableRelation="GST Registration Nos." WHERE (State Code=FIELD(State Code));
                                                   OnValidate=VAR
                                                                GSTRegistrationNos@1500000 : Record 16400;
                                                              BEGIN
                                                                                                                 "GST Input Service Distributor" := FALSE;
                                                                                                                 IF GSTRegistrationNos.GET("GST Registration No.") THEN
                                                                                                                   "GST Input Service Distributor" := GSTRegistrationNos."Input Service Distributor";
                                                              END;

                                                   CaptionML=[ENU=GST Registration No.;
                                                              ENN=GST Registration No.] }
    { 16608;  ;Sales Inv. Nos. (Exempt);Code10    ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Inv. Nos. (Exempt);
                                                              ENN=Sales Inv. Nos. (Exempt)] }
    { 16609;  ;Sales Cr. Memo Nos. (Exempt);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Cr. Memo Nos. (Exempt);
                                                              ENN=Sales Cr. Memo Nos. (Exempt)] }
    { 16610;  ;Sales Inv. No. (Export);Code10     ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Inv. No. (Export);
                                                              ENN=Sales Inv. No. (Export)] }
    { 16611;  ;Sales Cr. Memo No. (Export);Code10 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Cr. Memo No. (Export);
                                                              ENN=Sales Cr. Memo No. (Export)] }
    { 16612;  ;Sales Inv. No. (Supp);Code10       ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Inv. No. (Supp);
                                                              ENN=Sales Inv. No. (Supp)] }
    { 16613;  ;Sales Cr. Memo No. (Supp);Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Cr. Memo No. (Supp);
                                                              ENN=Sales Cr. Memo No. (Supp)] }
    { 16614;  ;Sales Inv. No. (Debit Note);Code10 ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Inv. No. (Debit Note);
                                                              ENN=Sales Inv. No. (Debit Note)] }
    { 16615;  ;Serv. Inv. Nos. (Exempt);Code10    ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Inv. Nos. (Exempt);
                                                              ENN=Serv. Inv. Nos. (Exempt)] }
    { 16616;  ;Serv. Cr. Memo Nos. (Exempt);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Cr. Memo Nos. (Exempt);
                                                              ENN=Serv. Cr. Memo Nos. (Exempt)] }
    { 16617;  ;Serv. Inv. Nos. (Export);Code10    ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Inv. Nos. (Export);
                                                              ENN=Serv. Inv. Nos. (Export)] }
    { 16618;  ;Serv. Cr. Memo Nos. (Export);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Cr. Memo Nos. (Export);
                                                              ENN=Serv. Cr. Memo Nos. (Export)] }
    { 16619;  ;Serv. Inv. Nos. (Supp);Code10      ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Inv. Nos. (Supp);
                                                              ENN=Serv. Inv. Nos. (Supp)] }
    { 16620;  ;Serv. Cr. Memo Nos. (Supp);Code10  ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Cr. Memo Nos. (Supp);
                                                              ENN=Serv. Cr. Memo Nos. (Supp)] }
    { 16621;  ;Serv. Inv. Nos. (Debit Note);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Serv. Inv. Nos. (Debit Note);
                                                              ENN=Serv. Inv. Nos. (Debit Note)] }
    { 16622;  ;Sales Inv. Nos. (Non-GST);Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Inv. Nos. (Non-GST);
                                                              ENN=Sales Inv. Nos. (Non-GST)] }
    { 16623;  ;Sales Cr. Memo Nos. (Non-GST);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Sales Cr. Memo Nos. (Non-GST);
                                                              ENN=Sales Cr. Memo Nos. (Non-GST)] }
    { 16624;  ;Posted Serv. Trans. Shpt. Nos.;Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Serv. Trans. Shpt. Nos.;
                                                              ENN=Posted Serv. Trans. Shpt. Nos.] }
    { 16625;  ;Posted Serv. Trans. Rcpt. Nos.;Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Serv. Trans. Rcpt. Nos.;
                                                              ENN=Posted Serv. Trans. Rcpt. Nos.] }
    { 16626;  ;GST Liability Invoice;Code10       ;TableRelation="No. Series";
                                                   CaptionML=[ENU=GST Liability Invoice;
                                                              ENN=GST Liability Invoice] }
    { 16627;  ;GST Input Service Distributor;Boolean;
                                                   CaptionML=[ENU=GST Input Service Distributor;
                                                              ENN=GST Input Service Distributor];
                                                   Editable=No }
    { 16628;  ;Purch. Inv. Nos. (Unreg);Code10    ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Inv. Nos. (Unreg);
                                                              ENN=Purch. Inv. Nos. (Unreg)] }
    { 16629;  ;Purch. Cr. Memo Nos. (Unreg);Code10;TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Cr. Memo Nos. (Unreg);
                                                              ENN=Purch. Cr. Memo Nos. (Unreg)] }
    { 16630;  ;Purch. Inv. Nos. (Unreg Supp);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Purch. Inv. Nos. (Unreg Supp);
                                                              ENN=Purch. Inv. Nos. (Unreg Supp)] }
    { 16631;  ;Pur. Inv. Nos.(Unreg Deb.Note);Code10;
                                                   TableRelation="No. Series";
                                                   CaptionML=[ENU=Pur. Inv. Nos.(Unreg Deb.Note);
                                                              ENN=Pur. Inv. Nos.(Unreg Deb.Note)] }
    { 16632;  ;GST Transfer Shipment No.;Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=GST Transfer Shipment No.;
                                                              ENN=GST Transfer Shipment No.] }
    { 16633;  ;Posted Dist. Invoice Nos.;Code10   ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Dist. Invoice Nos.;
                                                              ENN=Posted Dist. Invoice Nos.] }
    { 16634;  ;Posted Dist. Cr. Memo Nos.;Code10  ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posted Dist. Cr. Memo Nos.;
                                                              ENN=Posted Dist. Cr. Memo Nos.] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Name                                     }
    {    ;Use As In-Transit,Bin Mandatory          }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,City,County                    }
  }
  CODE
  {
    VAR
      Bin@1000 : Record 7354;
      Postcode@1001 : Record 225;
      WhseSetup@1002 : Record 5769;
      InvtSetup@1003 : Record 313;
      Location@1004 : Record 14;
      Text000@1005 : TextConst 'ENU=You cannot delete the %1 %2, because they contain items.;ENN=You cannot delete the %1 %2, because they contain items.';
      Text001@1006 : TextConst 'ENU=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.;ENN=You cannot delete the %1 %2, because one or more Warehouse Activity Lines exist for this %1.';
      Text002@1007 : TextConst 'ENU=%1 must be Yes, because the bins contain items.;ENN=%1 must be Yes, because the bins contain items.';
      Text003@1009 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      Text004@1010 : TextConst 'ENU=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\;ENN=The total quantity of items in the warehouse is 0, but the Adjustment Bin contains a negative quantity and other bins contain a positive quantity.\';
      Text005@1012 : TextConst 'ENU=Do you still want to delete this %1?;ENN=Do you still want to delete this %1?';
      Text006@1011 : TextConst 'ENU=You cannot change the %1 until the inventory stored in %2 %3 is 0.;ENN=You cannot change the %1 until the inventory stored in %2 %3 is 0.';
      Text007@1013 : TextConst 'ENU=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.;ENN=You have to delete all Adjustment Warehouse Journal Lines first before you can change the %1.';
      Text008@1008 : TextConst 'ENU=%1 must be %2, because one or more %3 exist.;ENN=%1 must be %2, because one or more %3 exist.';
      Text009@1014 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries on this location.;ENN=You cannot change %1 because there are one or more open ledger entries on this location.';
      Text010@1015 : TextConst 'ENU=Checking item ledger entries for open entries...;ENN=Checking item ledger entries for open entries...';
      Text011@1016 : TextConst 'ENU=You cannot change the %1 to %2 until the inventory stored in this bin is 0.;ENN=You cannot change the %1 to %2 until the inventory stored in this bin is 0.';
      Text012@1017 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text013@1018 : TextConst 'ENU=You cannot delete %1 because there are one or more ledger entries on this location.;ENN=You cannot delete %1 because there are one or more ledger entries on this location.';
      Text014@1019 : TextConst 'ENU=You cannot change %1 because one or more %2 exist.;ENN=You cannot change %1 because one or more %2 exist.';
      State@1500000 : Record 13762;
      Text16500@1500001 : TextConst 'ENU=The T.I.N. no. for the state %1 should be start with %2.;ENN=The T.I.N. no. for the state %1 should be start with %2.';

    PROCEDURE RequireShipment@5(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Shipment");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Shipment");
    END;

    PROCEDURE RequirePicking@1(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Pick");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Pick");
    END;

    PROCEDURE RequireReceive@4(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Receive");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Receive");
    END;

    PROCEDURE RequirePutaway@2(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Require Put-away");
      WhseSetup.GET;
      EXIT(WhseSetup."Require Put-away");
    END;

    PROCEDURE GetLocationSetup@3(LocationCode@1000 : Code[10];VAR Location2@1001 : Record 14) : Boolean;
    BEGIN
      IF NOT GET(LocationCode) THEN
        WITH Location2 DO BEGIN
          INIT;
          WhseSetup.GET;
          Code := LocationCode;
          "Use As In-Transit" := FALSE;
          "Require Put-away" := WhseSetup."Require Put-away";
          "Require Pick" := WhseSetup."Require Pick";
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
          "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
          "Require Receive" := WhseSetup."Require Receive";
          "Require Shipment" := WhseSetup."Require Shipment";
          EXIT(FALSE);
        END;

      Location2 := Rec;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE WMSCheckWarehouse@7300();
    VAR
      Zone@1005 : Record 7300;
      Bin@1006 : Record 7354;
      BinContent@1004 : Record 7302;
      WhseActivLine@1003 : Record 5767;
      WarehouseEntry@1002 : Record 7312;
      WarehouseEntry2@1001 : Record 7312;
      WhseJnlLine@1000 : Record 7311;
      ItemLedgerEntry@1007 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Location Code",Code);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgerEntry.ISEMPTY THEN
        ERROR(Text013,Code);

      WarehouseEntry.SETRANGE("Location Code",Code);
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      IF WarehouseEntry."Qty. (Base)" = 0 THEN BEGIN
        IF "Adjustment Bin Code" <> '' THEN BEGIN
          WarehouseEntry2.SETRANGE("Bin Code","Adjustment Bin Code");
          WarehouseEntry2.SETRANGE("Location Code",Code);
          WarehouseEntry2.CALCSUMS("Qty. (Base)");
          IF WarehouseEntry2."Qty. (Base)" < 0 THEN
            IF NOT CONFIRM(Text004 + Text005,FALSE,TABLECAPTION) THEN
              ERROR(Text003)
        END;
      END ELSE
        ERROR(Text000,TABLECAPTION,Code);

      WhseActivLine.SETRANGE("Location Code",Code);
      WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type"::Movement);
      WhseActivLine.SETFILTER("Qty. Outstanding",'<>0');
      IF NOT WhseActivLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      WhseJnlLine.SETRANGE("Location Code",Code);
      WhseJnlLine.SETFILTER(Quantity,'<>0');
      IF NOT WhseJnlLine.ISEMPTY THEN
        ERROR(Text001,TABLECAPTION,Code);

      Zone.SETRANGE("Location Code",Code);
      Zone.DELETEALL;
      Bin.SETRANGE("Location Code",Code);
      Bin.DELETEALL;
      BinContent.SETRANGE("Location Code",Code);
      BinContent.DELETEALL;
    END;

    LOCAL PROCEDURE CheckEmptyBin@7302(BinCode@1001 : Code[20];CaptionOfField@1002 : Text[30]);
    VAR
      WarehouseEntry@1003 : Record 7312;
      WhseEntry2@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code","Item No.");
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Location Code",Code);
      IF WarehouseEntry.FINDFIRST THEN
        REPEAT
          WarehouseEntry.SETRANGE("Item No.",WarehouseEntry."Item No.");

          WhseEntry2.SETCURRENTKEY("Item No.","Bin Code","Location Code");
          WhseEntry2.COPYFILTERS(WarehouseEntry);
          WhseEntry2.CALCSUMS("Qty. (Base)");
          IF WhseEntry2."Qty. (Base)" <> 0 THEN BEGIN
            IF (BinCode = "Adjustment Bin Code") AND (xRec."Adjustment Bin Code" = '') THEN
              ERROR(Text011,CaptionOfField,BinCode);

            ERROR(Text006,CaptionOfField,Bin.TABLECAPTION,BinCode);
          END;

          WarehouseEntry.FINDLAST;
          WarehouseEntry.SETRANGE("Item No.");
        UNTIL WarehouseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWhseAdjmtJnl@7303();
    VAR
      WhseJnlTemplate@1002 : Record 7309;
      WhseJnlLine@1003 : Record 7311;
    BEGIN
      WhseJnlTemplate.SETRANGE(Type,WhseJnlTemplate.Type::Item);
      IF WhseJnlTemplate.FIND('-') THEN
        REPEAT
          WhseJnlLine.SETRANGE("Journal Template Name",WhseJnlTemplate.Name);
          WhseJnlLine.SETRANGE("Location Code",Code);
          IF WhseJnlLine.FINDFIRST THEN
            ERROR(
              Text007,
              FIELDCAPTION("Adjustment Bin Code"));
        UNTIL WhseJnlTemplate.NEXT = 0;
    END;

    PROCEDURE GetRequirementText@6(FieldNumber@1000 : Integer) : Text[50];
    VAR
      Text000@1002 : TextConst 'ENU=Shipment,Receive,Pick,Put-Away;ENN=Shipment,Receive,Pick,Put-Away';
    BEGIN
      CASE FieldNumber OF
        FIELDNO("Require Shipment"):
          EXIT(SELECTSTR(1,Text000));
        FIELDNO("Require Receive"):
          EXIT(SELECTSTR(2,Text000));
        FIELDNO("Require Pick"):
          EXIT(SELECTSTR(3,Text000));
        FIELDNO("Require Put-away"):
          EXIT(SELECTSTR(4,Text000));
      END;
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Location,GETPOSITION)
      ELSE
        MESSAGE(Text012);
    END;

    PROCEDURE IsBWReceive@8() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Receive");
    END;

    PROCEDURE IsBWShip@12() : Boolean;
    BEGIN
      EXIT("Bin Mandatory" AND (NOT "Directed Put-away and Pick") AND "Require Shipment");
    END;

    PROCEDURE IsBinBWReceiveOrShip@11(BinCode@1000 : Code[20]) : Boolean;
    BEGIN
      EXIT(("Receipt Bin Code" <> '') AND (BinCode = "Receipt Bin Code") OR
        ("Shipment Bin Code" <> '') AND (BinCode = "Shipment Bin Code"));
    END;

    PROCEDURE CheckTradingLocation@1500017(LocationCode@1500001 : Code[20]);
    VAR
      Location@1500000 : Record 14;
    BEGIN
      IF Location.GET(LocationCode) THEN BEGIN
        Location.TESTFIELD("Trading Location");
        Location.TESTFIELD("E.C.C. No.");
      END;
    END;

    PROCEDURE IsInTransit@10(LocationCode@1000 : Code[10]) : Boolean;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location."Use As In-Transit");
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateInboundWhseRequest@13();
    VAR
      TransferHeader@1002 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
      WhseTransferRelease@1003 : Codeunit 5773;
    BEGIN
      TransferLine.SETRANGE("Transfer-to Code",Code);
      IF TransferLine.FINDSET THEN
        REPEAT
          IF TransferLine."Quantity Received" <> TransferLine."Quantity Shipped" THEN BEGIN
            TransferHeader.GET(TransferLine."Document No.");
            WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
            WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

            TransferLine.SETRANGE("Document No.",TransferLine."Document No.");
            TransferLine.FINDLAST;
            TransferLine.SETRANGE("Document No.");
          END;
        UNTIL TransferLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

