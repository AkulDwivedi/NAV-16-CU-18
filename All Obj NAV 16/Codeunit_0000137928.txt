OBJECT Codeunit 137928 SCM Assembly UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1010 : Codeunit 130509;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryRandom@1012 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      DueDateBeforeEndingDateErr@1003 : TextConst '@@@=%1: Field(Due Date), %2: Field(Ending Date);ENU=Due Date %1 is before Ending Date %2.';
      DatesChangedConfirmHandlerQuestion@1004 : Text;
      UpdateDueDateQst@1006 : TextConst '@@@=%1: xRec.Field(Due Date), %2: Field(Due Date);ENU=Do you want to update the Due Date from %1 to %2?';
      UpdateEndingDateQst@1007 : TextConst '@@@=%1: xRec.Field(Ending Date), %2: Field(Ending Date);ENU=Do you want to update the Ending Date from %1 to %2?';
      UpdateEndingAndDueDateQst@1008 : TextConst '@@@=%1: xRec.Field(Ending Date), %2: Field(Ending Date), %3: xRec.Field(Due Date), %4: Field(Due Date);ENU=Do you want to update the Ending Date from %1 to %2 and the Due Date from %3 to %4?';
      FullATOPostedMismatchMsg@1009 : TextConst '@@@=%1: Function(FullATOPosted);ENU=FullATOPosted should return %1.';
      WrongQtyInAsmBinErr@1013 : TextConst 'ENU=Quantity in Assembly Bin is incorrect.';

    [Test]
    PROCEDURE ErrorWhenEndDateAdvancesBeyondDueDateOnATO@56();
    VAR
      AssemblyHeader@1000 : Record 900;
      OldDueDate@1001 : Date;
      NewEndDate@1002 : Date;
    BEGIN
      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      WarningForDueDateWhenEndDateChangeMakeATO(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";

      // EXERCISE & VERIFY error
      NewEndDate := AssemblyHeader."Ending Date" + 10; // change Ending Date by value much greater than the difference between Ending and Due Date.
      AssemblyHeader."Ending Date" := NewEndDate;
      ASSERTERROR AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Ending Date"),FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(DueDateBeforeEndingDateErr,OldDueDate,NewEndDate)) > 0,'');
    END;

    [Test]
    PROCEDURE NoWarningForDueDateWhenEndDateAdvancesOnATO@1();
    BEGIN
      NoWarningForDueDateWhenEndDateChangesOnATO(+1);
    END;

    [Test]
    PROCEDURE NoWarningForDueDateWhenEndDateRegressesOnATO@43();
    BEGIN
      NoWarningForDueDateWhenEndDateChangesOnATO(-1);
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE NoErrorWhenEndDateAdvancesBeyondDueDateOnATS@76();
    VAR
      AssemblyHeader@1000 : Record 900;
      OldDueDate@1001 : Date;
      OldStartDate@1002 : Date;
    BEGIN
      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldStartDate := AssemblyHeader."Starting Date";

      // EXERCISE & VERIFY error
      AssemblyHeader."Ending Date" := AssemblyHeader."Ending Date" + 10; // change Ending Date by value much greater than the difference between Ending and Due Date.
      DatesChangedConfirmHandlerQuestion := STRSUBSTNO(UpdateDueDateQst,OldDueDate,OldDueDate + 10);
      AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Ending Date"),FALSE); // successful completion of this is proof of no error

      Assert.AreEqual(OldDueDate + 10,AssemblyHeader."Due Date",AssemblyHeader.FIELDCAPTION("Due Date"));
      Assert.AreEqual(OldStartDate + 10,AssemblyHeader."Starting Date",AssemblyHeader.FIELDCAPTION("Starting Date"));
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE WarningForDueDateWhenEndDateAdvancesOnATS@5();
    BEGIN
      WarningForDueDateWhenEndDateChangesOnATS(+1);
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE WarningForDueDateWhenEndDateRegressesOnATS@6();
    BEGIN
      WarningForDueDateWhenEndDateChangesOnATS(-1);
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE ErrorWhenStartDateAdvancesBeyondDueDateOnATO@61();
    VAR
      AssemblyHeader@1000 : Record 900;
      Item@1004 : Record 27;
      OldDueDate@1001 : Date;
      OldEndDate@1003 : Date;
      NewStartDate@1002 : Date;
    BEGIN
      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      WarningForDueDateWhenEndDateChangeMakeATO(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldEndDate := AssemblyHeader."Ending Date";
      Item.GET(AssemblyHeader."Item No.");

      // EXERCISE & VERIFY error
      NewStartDate := AssemblyHeader."Starting Date" + 10; // change Starting Date by value much greater than the difference between Starting and Due Date.
      AssemblyHeader."Starting Date" := NewStartDate;
      DatesChangedConfirmHandlerQuestion := STRSUBSTNO(UpdateEndingDateQst,OldEndDate,OldEndDate + 10);
      ASSERTERROR AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Starting Date"),FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,
          STRSUBSTNO(DueDateBeforeEndingDateErr,OldDueDate,CALCDATE(Item."Lead Time Calculation",NewStartDate))) > 0,'');
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE NoWarningForDueDateWhenStartDateAdvancesOnATO@49();
    BEGIN
      NoWarningForDueDateWhenStartDateChangesOnATO(+1);
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE NoWarningForDueDateWhenStartDateRegressesOnATO@50();
    BEGIN
      NoWarningForDueDateWhenStartDateChangesOnATO(-1);
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE NoErrorWhenStartDateAdvancesBeyondDueDateOnATS@80();
    VAR
      AssemblyHeader@1000 : Record 900;
      Item@1004 : Record 27;
      OldDueDate@1001 : Date;
      OldEndDate@1003 : Date;
      NewStartDate@1002 : Date;
    BEGIN
      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldEndDate := AssemblyHeader."Ending Date";
      Item.GET(AssemblyHeader."Item No.");

      // EXERCISE & VERIFY no error
      NewStartDate := AssemblyHeader."Starting Date" + 10; // change Starting Date by value much greater than the difference between Starting and Due Date.
      AssemblyHeader."Starting Date" := NewStartDate;
      DatesChangedConfirmHandlerQuestion :=
        STRSUBSTNO(UpdateEndingAndDueDateQst,OldEndDate,OldEndDate + 10,OldDueDate,OldDueDate + 10);
      AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Starting Date"),FALSE); // successful completion of this is proof of no error
      Assert.AreEqual(OldDueDate + 10,AssemblyHeader."Due Date",AssemblyHeader.FIELDCAPTION("Due Date"));
      Assert.AreEqual(OldEndDate + 10,AssemblyHeader."Ending Date",AssemblyHeader.FIELDCAPTION("Ending Date"));
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE WarningForDueDateWhenStartDateAdvancesOnATS@11();
    BEGIN
      WarningForDueDateWhenStartDateChangesOnATS(+1);
    END;

    [Test]
    [HandlerFunctions(DatesChangedConfirmHandler)]
    PROCEDURE WarningForDueDateWhenStartDateRegressesOnATS@12();
    BEGIN
      WarningForDueDateWhenStartDateChangesOnATS(-1);
    END;

    [Test]
    PROCEDURE FullATOPostedCheckATSFirstSameWhseShpt@7();
    VAR
      ATSWhseShptLine@1002 : Record 7321;
    BEGIN
      // Based on VSTF 329599
      // Setup
      SetupFullATOPostedCheckWarehouseShpt(ATSWhseShptLine,2,1,0,0,1,FALSE);

      // Exercise + Verify
      Assert.IsFalse(ATSWhseShptLine.FullATOPosted,STRSUBSTNO(FullATOPostedMismatchMsg,FALSE));
    END;

    [Test]
    PROCEDURE FullATOPostedCheckATSFIrstDiffWhseShpt@32();
    VAR
      ATSWhseShptLine@1002 : Record 7321;
    BEGIN
      // Based on VSTF 329599
      // Setup
      SetupFullATOPostedCheckWarehouseShpt(ATSWhseShptLine,2,1,0,0,1,TRUE);

      // Exercise + Verify
      Assert.IsFalse(ATSWhseShptLine.FullATOPosted,STRSUBSTNO(FullATOPostedMismatchMsg,FALSE));
    END;

    [Test]
    PROCEDURE FullATOPostedCheckBothLinesSameWhseShpt@35();
    VAR
      ATSWhseShptLine@1002 : Record 7321;
    BEGIN
      // Based on VSTF 329599
      // Setup
      SetupFullATOPostedCheckWarehouseShpt(ATSWhseShptLine,2,1,0,1,1,FALSE);

      // Exercise + Verify
      Assert.IsTrue(ATSWhseShptLine.FullATOPosted,STRSUBSTNO(FullATOPostedMismatchMsg,TRUE));
    END;

    [Test]
    PROCEDURE FullATOPostedCheckATOAlreadyShipped@42();
    VAR
      ATSWhseShptLine@1002 : Record 7321;
    BEGIN
      // Based on VSTF 329599
      // Setup
      SetupFullATOPostedCheckWarehouseShpt(ATSWhseShptLine,2,1,1,0,1,FALSE);

      // Exercise + Verify
      Assert.IsTrue(ATSWhseShptLine.FullATOPosted,STRSUBSTNO(FullATOPostedMismatchMsg,TRUE));
    END;

    [Test]
    PROCEDURE ReopenATOSalesQuoteReopensAsmQuote@8();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Refer to VSTF 333539
      ReopenAReleasedAsmDoc(SalesHeader."Document Type"::Quote,TRUE);
    END;

    [Test]
    PROCEDURE ReopenATOSalesBOrderReopensAsmBOrder@33();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Refer to VSTF 333539
      ReopenAReleasedAsmDoc(SalesHeader."Document Type"::"Blanket Order",TRUE);
    END;

    [Test]
    PROCEDURE ReopenATOSalesOrderDoesNotReopenAsmOrder@38();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Refer to VSTF 333539
      ReopenAReleasedAsmDoc(SalesHeader."Document Type"::Order,FALSE);
    END;

    [Test]
    PROCEDURE QtyOnAssemblyBinZeroWhenAsmBinIsNotSetUp@15();
    VAR
      Location@1000 : Record 14;
      WarehouseAvailabilityMgt@1004 : Codeunit 7314;
      ItemNo@1003 : ARRAY [2] OF Code[20];
      LotNo@1002 : ARRAY [2] OF Code[20];
      SerialNo@1001 : ARRAY [2] OF Code[20];
      QtyBase@1006 : Decimal;
      QtyInAsmBin@1005 : Decimal;
    BEGIN
      // [SCENARIO 381763] Function CalcQtyOnAssemblyBin in codeunit 7314 should return 0 if "To-Assembly Bin Code" on location is blank.

      // [GIVEN] Location with blank "To-Assembly Bin Code".
      // [GIVEN] Warehouse entries on Location "L" for two items, each of them has two lots, for which there are two serial nos. Quantity of each entry = "Q".
      QtyBase := LibraryRandom.RandInt(10);
      MockLocation(Location,'');
      MockItemsLotsSerials(ItemNo,LotNo,SerialNo);
      MockWhseEntries(Location,ItemNo,LotNo,SerialNo,QtyBase);

      // [WHEN] Invoke CalcQtyOnAssemblyBin function in codeunit 7314.
      QtyInAsmBin := WarehouseAvailabilityMgt.CalcQtyOnAssemblyBin(Location.Code,ItemNo[1],'','','');

      // [THEN] The function returns 0.
      Assert.AreEqual(0,QtyInAsmBin,WrongQtyInAsmBinErr);
    END;

    [Test]
    PROCEDURE QtyOnAssemblyBinWithItemFilter@16();
    VAR
      Location@1006 : Record 14;
      WarehouseAvailabilityMgt@1005 : Codeunit 7314;
      ItemNo@1004 : ARRAY [2] OF Code[20];
      LotNo@1003 : ARRAY [2] OF Code[20];
      SerialNo@1002 : ARRAY [2] OF Code[20];
      QtyBase@1001 : Decimal;
      QtyInAsmBin@1000 : Decimal;
    BEGIN
      // [SCENARIO 381763] Function CalcQtyOnAssemblyBin in codeunit 7314 should return sum of "Qty (Base)" for warehouse entries in assembly bin for a given item.

      // [GIVEN] Location with "To-Assembly Bin Code".
      // [GIVEN] Warehouse entries on Location "L" for two items, each of them has two lots, for which there are two serial nos. Quantity of each entry = "Q".
      QtyBase := LibraryRandom.RandInt(10);
      MockLocation(Location,LibraryUtility.GenerateGUID);
      MockItemsLotsSerials(ItemNo,LotNo,SerialNo);
      MockWhseEntries(Location,ItemNo,LotNo,SerialNo,QtyBase);

      // [WHEN] Invoke CalcQtyOnAssemblyBin function in codeunit 7314 with first Item No. as a parameter.
      QtyInAsmBin := WarehouseAvailabilityMgt.CalcQtyOnAssemblyBin(Location.Code,ItemNo[1],'','','');

      // [THEN] The function returns 4 * Q (sum of 4 entries).
      Assert.AreEqual(QtyBase * ARRAYLEN(LotNo) * ARRAYLEN(SerialNo),QtyInAsmBin,WrongQtyInAsmBinErr);
    END;

    [Test]
    PROCEDURE QtyOnAssemblyBinWithItemAndLotFilter@17();
    VAR
      Location@1006 : Record 14;
      WarehouseAvailabilityMgt@1005 : Codeunit 7314;
      ItemNo@1004 : ARRAY [2] OF Code[20];
      LotNo@1003 : ARRAY [2] OF Code[20];
      SerialNo@1002 : ARRAY [2] OF Code[20];
      QtyBase@1001 : Decimal;
      QtyInAsmBin@1000 : Decimal;
    BEGIN
      // [SCENARIO 381763] Function CalcQtyOnAssemblyBin in codeunit 7314 should return sum of "Qty (Base)" for warehouse entries in assembly bin for a given item and lot.

      // [GIVEN] Location with "To-Assembly Bin Code".
      // [GIVEN] Warehouse entries on Location "L" for two items, each of them has two lots, for which there are two serial nos. Quantity of each entry = "Q".
      QtyBase := LibraryRandom.RandInt(10);
      MockLocation(Location,LibraryUtility.GenerateGUID);
      MockItemsLotsSerials(ItemNo,LotNo,SerialNo);
      MockWhseEntries(Location,ItemNo,LotNo,SerialNo,QtyBase);

      // [WHEN] Invoke CalcQtyOnAssemblyBin function in codeunit 7314 with first Item No. and Lot No. as parameters.
      QtyInAsmBin := WarehouseAvailabilityMgt.CalcQtyOnAssemblyBin(Location.Code,ItemNo[1],'',LotNo[1],'');

      // [THEN] The function returns 2 * Q (sum of 2 entries).
      Assert.AreEqual(QtyBase * ARRAYLEN(SerialNo),QtyInAsmBin,WrongQtyInAsmBinErr);
    END;

    [Test]
    PROCEDURE QtyOnAssemblyBinWithItemAndLotAndSerialNoFilter@20();
    VAR
      Location@1006 : Record 14;
      WarehouseAvailabilityMgt@1005 : Codeunit 7314;
      ItemNo@1004 : ARRAY [2] OF Code[20];
      LotNo@1003 : ARRAY [2] OF Code[20];
      SerialNo@1002 : ARRAY [2] OF Code[20];
      QtyBase@1001 : Decimal;
      QtyInAsmBin@1000 : Decimal;
    BEGIN
      // [SCENARIO 381763] Function CalcQtyOnAssemblyBin in codeunit 7314 should return sum of "Qty (Base)" for warehouse entries in assembly bin for a given item, lot and serial no.

      // [GIVEN] Location with "To-Assembly Bin Code".
      // [GIVEN] Warehouse entries on Location "L" for two items, each of them has two lots, for which there are two serial nos. Quantity of each entry = "Q".
      QtyBase := LibraryRandom.RandInt(10);
      MockLocation(Location,LibraryUtility.GenerateGUID);
      MockItemsLotsSerials(ItemNo,LotNo,SerialNo);
      MockWhseEntries(Location,ItemNo,LotNo,SerialNo,QtyBase);

      // [WHEN] Invoke CalcQtyOnAssemblyBin function in codeunit 7314 with first Item No., Lot No. and Serial No. as parameters.
      QtyInAsmBin := WarehouseAvailabilityMgt.CalcQtyOnAssemblyBin(Location.Code,ItemNo[1],'',LotNo[1],SerialNo[1]);

      // [THEN] The function returns Q (one entry).
      Assert.AreEqual(QtyBase,QtyInAsmBin,WrongQtyInAsmBinErr);
    END;

    [Test]
    PROCEDURE AssemblyOrderCanBeReleasedOnListPageInvokedFromSalesOrder@13();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      AssemblyHeader@1002 : Record 900;
      SalesOrder@1003 : TestPage 42;
      AssemblyOrders@1004 : TestPage 902;
    BEGIN
      // [FEATURE] [Sales Order] [Assemble-to-Order] [UI]
      // [SCENARIO 205220] "Release" button pushed on Assembly Orders page invoked from a linked Sales Order should release opened Assembly Order.

      // [GIVEN] Sales Order with assemble-to-order line.
      // [GIVEN] Status on linked Assembly Order = "Open".
      CreateSalesLine(SalesHeader."Document Type"::Order,SalesHeader,SalesLine);
      CreateATOAssembly(SalesHeader."Document Type"::Order,AssemblyHeader,SalesLine);
      AssemblyHeader.Status := AssemblyHeader.Status::Open;
      AssemblyHeader.MODIFY;

      // [GIVEN] Navigate to the list of assembly orders from the sales order.
      SalesOrder.OPENEDIT;
      SalesOrder.GOTORECORD(SalesHeader);
      AssemblyOrders.TRAP;
      SalesOrder.AssemblyOrders.INVOKE;

      // [WHEN] Push "Release" button on the assembly order list.
      AssemblyOrders.Release.INVOKE;

      // [THEN] The Assembly Order is released.
      AssemblyHeader.FIND;
      AssemblyHeader.TESTFIELD(Status,AssemblyHeader.Status::Released);
    END;

    [Test]
    PROCEDURE AssemblyOrderCanBeReopenedOnListPageInvokedFromSalesOrder@14();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      AssemblyHeader@1002 : Record 900;
      SalesOrder@1001 : TestPage 42;
      AssemblyOrders@1000 : TestPage 902;
    BEGIN
      // [FEATURE] [Sales Order] [Assemble-to-Order] [UI]
      // [SCENARIO 205220] "Reopen" button pushed on Assembly Orders page invoked from a linked Sales Order should reopen released Assembly Order.

      // [GIVEN] Sales Order with assemble-to-order line.
      // [GIVEN] Status on linked Assembly Order = "Release".
      CreateSalesLine(SalesHeader."Document Type"::Order,SalesHeader,SalesLine);
      CreateATOAssembly(SalesHeader."Document Type"::Order,AssemblyHeader,SalesLine);

      // [GIVEN] Navigate to the list of assembly orders from the sales order.
      SalesOrder.OPENEDIT;
      SalesOrder.GOTORECORD(SalesHeader);
      AssemblyOrders.TRAP;
      SalesOrder.AssemblyOrders.INVOKE;

      // [WHEN] Push "Reopen" button on the assembly order list.
      AssemblyOrders.Reopen.INVOKE;

      // [THEN] The Assembly Order is open.
      AssemblyHeader.FIND;
      AssemblyHeader.TESTFIELD(Status,AssemblyHeader.Status::Open);
    END;

    LOCAL PROCEDURE MockItemsLotsSerials@26(VAR ItemNo@1002 : ARRAY [2] OF Code[20];VAR LotNo@1001 : ARRAY [2] OF Code[20];VAR SerialNo@1000 : ARRAY [2] OF Code[20]);
    VAR
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(ItemNo) DO
        ItemNo[i] := LibraryUtility.GenerateGUID;
      FOR i := 1 TO ARRAYLEN(LotNo) DO
        LotNo[i] := LibraryUtility.GenerateGUID;
      FOR i := 1 TO ARRAYLEN(SerialNo) DO
        SerialNo[i] := LibraryUtility.GenerateGUID;
    END;

    LOCAL PROCEDURE MockLocation@22(VAR Location@1000 : Record 14;ToAsmBinCode@1001 : Code[20]);
    BEGIN
      WITH Location DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateGUID;
        "To-Assembly Bin Code" := ToAsmBinCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockWhseEntries@24(Location@1007 : Record 14;ItemNo@1001 : ARRAY [2] OF Code[20];LotNo@1002 : ARRAY [2] OF Code[20];SerialNo@1003 : ARRAY [2] OF Code[20];QtyBase@1008 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
      i@1004 : Integer;
      j@1005 : Integer;
      k@1006 : Integer;
    BEGIN
      WITH WarehouseEntry DO
        FOR i := 1 TO ARRAYLEN(ItemNo) DO
          FOR j := 1 TO ARRAYLEN(LotNo) DO
            FOR k := 1 TO ARRAYLEN(SerialNo) DO BEGIN
              INIT;
              "Entry No." := LibraryUtility.GetNewRecNo(WarehouseEntry,FIELDNO("Entry No."));
              "Location Code" := Location.Code;
              "Bin Code" := Location."To-Assembly Bin Code";
              "Item No." := ItemNo[i];
              "Lot No." := LotNo[j];
              "Serial No." := SerialNo[k];
              "Qty. (Base)" := QtyBase;
              INSERT;
            END;
    END;

    LOCAL PROCEDURE ReopenAReleasedAsmDoc@34(SalesDocType@1001 : Option;AsmDocReopens@1004 : Boolean);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1007 : Record 37;
      AsmHeader@1000 : Record 900;
    BEGIN
      // SETUP: Create released ATO sales and assembly header
      CreateSalesLine(SalesDocType,SalesHeader,SalesLine);
      CreateATOAssembly(SalesDocType,AsmHeader,SalesLine);

      // EXERCISE - reopen
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // VERIFY - status is same if no change, otherwise released
      AsmHeader.GET(AsmHeader."Document Type",AsmHeader."No.");
      IF AsmDocReopens THEN
        Assert.AreEqual(AsmHeader.Status::Open,AsmHeader.Status,'The status is open as doc has been reopened.')
      ELSE
        Assert.AreEqual(AsmHeader.Status::Released,AsmHeader.Status,'The status is not changed from released.');
    END;

    LOCAL PROCEDURE CreateSalesLine@9(SalesDocType@1000 : Option;VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37);
    BEGIN
      SalesHeader."Document Type" := SalesDocType;
      SalesHeader."No." := LibraryUtility.GenerateGUID;
      SalesHeader.Status := SalesHeader.Status::Released;
      SalesHeader.INSERT;

      SalesLine.INIT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine.INSERT;
    END;

    LOCAL PROCEDURE CreateATOAssembly@10(SalesDocType@1000 : Option;VAR AsmHeader@1003 : Record 900;SalesLine@1004 : Record 37);
    VAR
      ATOLink@1002 : Record 904;
      AsmLine@1001 : Record 901;
    BEGIN
      CASE SalesDocType OF
        SalesLine."Document Type"::Quote:
          AsmHeader."Document Type" := AsmHeader."Document Type"::Quote;
        SalesLine."Document Type"::"Blanket Order":
          AsmHeader."Document Type" := AsmHeader."Document Type"::"Blanket Order";
        SalesLine."Document Type"::Order:
          AsmHeader."Document Type" := AsmHeader."Document Type"::Order;
      END;
      AsmHeader."No." := LibraryUtility.GenerateGUID;
      AsmHeader.Status := AsmHeader.Status::Released;
      AsmHeader.INSERT;

      // make ATO Link
      ATOLink."Assembly Document Type" := AsmHeader."Document Type";
      ATOLink."Assembly Document No." := AsmHeader."No.";
      ATOLink.Type := ATOLink.Type::Sale;
      ATOLink."Document Type" := SalesLine."Document Type";
      ATOLink."Document No." := SalesLine."Document No.";
      ATOLink."Document Line No." := SalesLine."Line No.";
      ATOLink.INSERT;

      // make assembly line to avoid error "Nothing to Release"
      AsmLine."Document Type" := AsmHeader."Document Type";
      AsmLine."Document No." := AsmHeader."No.";
      AsmLine.Type := AsmLine.Type::Item;
      AsmLine.Quantity := 1;
      AsmLine.INSERT;
    END;

    LOCAL PROCEDURE SetupFullATOPostedCheckWarehouseShpt@23(VAR ATSWhseShptLine@1000 : Record 7321;SalesLineQty@1003 : Integer;SalesLineQtyToAsm@1004 : Integer;SalesLineQtyShipped@1008 : Integer;ATOQtyToShip@1005 : Integer;ATSQtyToShip@1006 : Integer;ATOandATSinDiffShip@1007 : Boolean);
    VAR
      SalesLine@1002 : Record 37;
      ATOWhseShptLine@1001 : Record 7321;
    BEGIN
      SalesLine."Document Type" := SalesLine."Document Type"::Order;
      SalesLine."Document No." := LibraryUtility.GenerateRandomCode(SalesLine.FIELDNO("Document No."),DATABASE::"Sales Line");
      SalesLine."Quantity (Base)" := SalesLineQty;
      SalesLine."Qty. to Asm. to Order (Base)" := SalesLineQtyToAsm;
      SalesLine."Qty. Shipped (Base)" := SalesLineQtyShipped;
      SalesLine."Line No." := 10000;
      SalesLine.INSERT;

      ATSWhseShptLine."No." := LibraryUtility.GenerateRandomCode(ATSWhseShptLine.FIELDNO("No."),DATABASE::"Warehouse Shipment Line");
      ATSWhseShptLine."Line No." := 10000;
      ATSWhseShptLine."Source Document" := ATSWhseShptLine."Source Document"::"Sales Order";
      ATSWhseShptLine."Source Type" := 37;
      ATSWhseShptLine."Source Subtype" := ATSWhseShptLine."Source Subtype"::"1";
      ATSWhseShptLine."Source No." := SalesLine."Document No.";
      ATSWhseShptLine."Source Line No." := 10000;
      ATSWhseShptLine."Qty. to Ship (Base)" := ATSQtyToShip;
      ATSWhseShptLine."Assemble to Order" := FALSE;
      ATSWhseShptLine.INSERT;

      // ATO already shipped
      IF SalesLineQtyShipped = SalesLineQtyToAsm THEN
        EXIT;

      ATOWhseShptLine := ATSWhseShptLine;
      IF ATOandATSinDiffShip THEN
        ATOWhseShptLine."No." := LibraryUtility.GenerateRandomCode(ATOWhseShptLine.FIELDNO("No."),DATABASE::"Warehouse Shipment Line");
      ATOWhseShptLine."Line No." := 20000;
      ATOWhseShptLine."Qty. to Ship (Base)" := ATOQtyToShip;
      ATOWhseShptLine."Assemble to Order" := TRUE;
      ATOWhseShptLine.INSERT;
    END;

    LOCAL PROCEDURE NoWarningForDueDateWhenEndDateChangesOnATO@47(ChangeInDays@1003 : Integer);
    VAR
      AssemblyHeader@1000 : Record 900;
      OldDueDate@1001 : Date;
      OldStartDate@1002 : Date;
    BEGIN
      // Based on VSTF 323583

      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      WarningForDueDateWhenEndDateChangeMakeATO(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldStartDate := AssemblyHeader."Starting Date";

      // EXERCISE
      AssemblyHeader."Ending Date" += ChangeInDays; // change Ending Date by given value.
      AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Ending Date"),FALSE);

      // VERIFY
      Assert.AreEqual(OldDueDate,AssemblyHeader."Due Date",AssemblyHeader.FIELDCAPTION("Due Date"));
      Assert.AreEqual(OldStartDate + ChangeInDays,AssemblyHeader."Starting Date",AssemblyHeader.FIELDCAPTION("Starting Date"));
    END;

    LOCAL PROCEDURE NoWarningForDueDateWhenStartDateChangesOnATO@3(ChangeInDays@1000 : Integer);
    VAR
      AssemblyHeader@1003 : Record 900;
      OldDueDate@1002 : Date;
      OldEndDate@1001 : Date;
    BEGIN
      // Based on VSTF 323583

      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      WarningForDueDateWhenEndDateChangeMakeATO(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldEndDate := AssemblyHeader."Ending Date";

      // EXERCISE
      AssemblyHeader."Starting Date" += ChangeInDays; // change Ending Date by given value.
      DatesChangedConfirmHandlerQuestion := STRSUBSTNO(UpdateEndingDateQst,OldEndDate,OldEndDate + ChangeInDays);
      AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Starting Date"),FALSE);

      // VERIFY
      Assert.AreEqual(OldDueDate,AssemblyHeader."Due Date",AssemblyHeader.FIELDCAPTION("Due Date"));
      Assert.AreEqual(OldEndDate + ChangeInDays,AssemblyHeader."Ending Date",AssemblyHeader.FIELDCAPTION("Ending Date"));
    END;

    LOCAL PROCEDURE WarningForDueDateWhenEndDateChangeMakeATSSetup@18(VAR AssemblyHeader@1000 : Record 900);
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Make the Assembly Order with dates having 1D difference
      AssemblyHeader."Document Type" := AssemblyHeader."Document Type"::Order;
      AssemblyHeader."No." := LibraryUtility.GenerateRandomCode(AssemblyHeader.FIELDNO("No."),DATABASE::"Assembly Header");
      Item."No." := LibraryUtility.GenerateRandomCode(Item.FIELDNO("No."),DATABASE::Item);
      EVALUATE(Item."Lead Time Calculation",'<+1D>');
      EVALUATE(Item."Safety Lead Time",'<+1D>');
      Item.INSERT;
      AssemblyHeader."Item No." := Item."No.";
      AssemblyHeader."Starting Date" := WORKDATE;
      AssemblyHeader."Ending Date" := CALCDATE(Item."Lead Time Calculation",AssemblyHeader."Starting Date");
      AssemblyHeader."Due Date" := CALCDATE(Item."Safety Lead Time",AssemblyHeader."Ending Date");
      AssemblyHeader.INSERT;
    END;

    LOCAL PROCEDURE WarningForDueDateWhenEndDateChangeMakeATO@19(AssemblyHeader@1000 : Record 900);
    VAR
      AssembleToOrderLink@1001 : Record 904;
    BEGIN
      // Mark the order as A-T-O
      AssembleToOrderLink.INIT;
      AssembleToOrderLink."Assembly Document Type" := AssemblyHeader."Document Type";
      AssembleToOrderLink."Assembly Document No." := AssemblyHeader."No.";
      AssembleToOrderLink.INSERT;
    END;

    LOCAL PROCEDURE WarningForDueDateWhenEndDateChangesOnATS@2(ChangeInDays@1000 : Integer);
    VAR
      AssemblyHeader@1003 : Record 900;
      OldDueDate@1002 : Date;
      OldStartDate@1001 : Date;
    BEGIN
      // Based on VSTF 323583

      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldStartDate := AssemblyHeader."Starting Date";

      // EXERCISE
      AssemblyHeader."Ending Date" += ChangeInDays; // change Ending Date by given value.
      DatesChangedConfirmHandlerQuestion := STRSUBSTNO(UpdateDueDateQst,OldDueDate,OldDueDate + ChangeInDays);
      AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Ending Date"),FALSE);

      // VERIFY
      Assert.AreEqual(OldDueDate + ChangeInDays,AssemblyHeader."Due Date",AssemblyHeader.FIELDCAPTION("Due Date"));
      Assert.AreEqual(OldStartDate + ChangeInDays,AssemblyHeader."Starting Date",AssemblyHeader.FIELDCAPTION("Starting Date"));
    END;

    LOCAL PROCEDURE WarningForDueDateWhenStartDateChangesOnATS@4(ChangeInDays@1000 : Integer);
    VAR
      AssemblyHeader@1003 : Record 900;
      OldDueDate@1002 : Date;
      OldEndDate@1001 : Date;
    BEGIN
      // Based on VSTF 323583

      // SETUP
      WarningForDueDateWhenEndDateChangeMakeATSSetup(AssemblyHeader);
      OldDueDate := AssemblyHeader."Due Date";
      OldEndDate := AssemblyHeader."Ending Date";

      // EXERCISE
      AssemblyHeader."Starting Date" += ChangeInDays; // change Ending Date by given value.
      DatesChangedConfirmHandlerQuestion :=
        STRSUBSTNO(UpdateEndingAndDueDateQst,OldEndDate,OldEndDate + ChangeInDays,OldDueDate,OldDueDate + ChangeInDays);
      AssemblyHeader.ValidateDates(AssemblyHeader.FIELDNO("Starting Date"),FALSE);

      // VERIFY
      Assert.AreEqual(OldDueDate + ChangeInDays,AssemblyHeader."Due Date",AssemblyHeader.FIELDCAPTION("Due Date"));
      Assert.AreEqual(OldEndDate + ChangeInDays,AssemblyHeader."Ending Date",AssemblyHeader.FIELDCAPTION("Ending Date"));
    END;

    [ConfirmHandler]
    PROCEDURE DatesChangedConfirmHandler@53(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.ExpectedMessage(DatesChangedConfirmHandlerQuestion,Question);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [SCM] [UT]
    }
    END.
  }
}

