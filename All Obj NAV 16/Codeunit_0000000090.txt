OBJECT Codeunit 90 Purch.-Post
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326,TFS225680;
  }
  PROPERTIES
  {
    TableNo=38;
    Permissions=TableData 36=m,
                TableData 37=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 254=imd,
                TableData 357=imd,
                TableData 359=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6650=imd,
                TableData 6651=imd;
    OnRun=VAR
            ItemEntryRelation@1007 : Record 6507;
            TempInvoicingSpecification@1013 : TEMPORARY Record 336;
            DummyTrackingSpecification@1014 : Record 336;
            SalesSetup@1019 : Record 311;
            SalesCommentLine@1018 : Record 44;
            CurrExchRate@1000 : Record 330;
            FA@1030 : Record 5600;
            FASetup@1029 : Record 5603;
            DeprBook@1028 : Record 5611;
            GLAcc@1032 : Record 15;
            VATPostingSetup@1033 : Record 325;
            TempCombinedPurchLine@1035 : TEMPORARY Record 39;
            TempVATAmountLine@1036 : TEMPORARY Record 290;
            TempVATAmountLineRemainder@1037 : TEMPORARY Record 290;
            PurchCommentLine@1038 : Record 43;
            PurchInvLine@1043 : Record 123;
            PurchCrMemoLine@1044 : Record 125;
            PurchRcptLine@1045 : Record 121;
            WhseRcptLine@1046 : Record 7317;
            WhseShptLine@1047 : Record 7321;
            PurchaseLineBackup@1006 : Record 39;
            ArchiveManagement@1015 : Codeunit 5063;
            UpdateAnalysisView@1002 : Codeunit 410;
            UpdateItemAnalysisView@1008 : Codeunit 7150;
            NoSeriesMgt@1040 : Codeunit 396;
            GenJnlCheckLine@1039 : Codeunit 11;
            GenJnlPostPreview@1001 : Codeunit 19;
            ServTaxMgmt@1500009 : Codeunit 16471;
            PurchaseLine2@1500014 : Record 39;
            DetailedGSTEntryBuffer@1500013 : Record 16412;
            Vendor@1500012 : Record 23;
            CostBaseAmount@1003 : Decimal;
            TrackingSpecificationExists@1010 : Boolean;
            EndLoop@1009 : Boolean;
            ModifyHeader@1025 : Boolean;
            TempInvoice@1024 : Boolean;
            TempRcpt@1023 : Boolean;
            TempReturn@1022 : Boolean;
            EverythingInvoiced@1026 : Boolean;
            GLEntryNo@1005 : Integer;
            BiggestLineNo@1021 : Integer;
            CFactor@1280000 : Decimal;
            TaxJnlLine@1500003 : Record 16587;
            CWIPFlag@1500004 : Boolean;
            NonCWIPFlag@1500005 : Boolean;
            StrOrderDetails2@1500006 : Record 13794;
            StrOrderLineDet@1500007 : Record 13795;
            ServiceTaxSetup@1500020 : Record 16472;
            STReverseChargeSetup@1500010 : Record 16461;
            DetailRG23D@1500211 : Record 16533;
            TransactionNo@1500008 : Integer;
            LoopCount@1500011 : Integer;
            Percentage@1500000 : Integer;
            TDSBaseIncludesServiceTax@1500001 : Boolean;
            ICGenJnlLineNo@1004 : Integer;
            LineCount@1027 : Integer;
            WhseReference@1048 : Integer;
            PrevStatus@1020 : Option;
            RemQtyToInvoiceCurrLine@1011 : Decimal;
            RemQtyToInvoiceCurrLineBase@1012 : Decimal;
            NextGSTLedgerEntryNo@1500002 : Integer;
            DocTransactionType@1500015 : 'Purchase,Sale';
            GenJournalLineCustomDuty@1500016 : Record 81;
            CustomDutyBase@1500017 : Boolean;
          BEGIN
            OnBeforePostPurchaseDoc(Rec);

            ValidatePostingAndDocumentDate(Rec);

            IF PreviewMode THEN BEGIN
              CLEARALL;
              PreviewMode := TRUE;
            END ELSE
              CLEARALL;

            PurchHeader.COPY(Rec);
            WITH PurchHeader DO BEGIN
              CheckMandatoryHeaderFields(Rec);
              IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                FIELDERROR("Posting Date",Text045);

              CASE "Document Type" OF
                "Document Type"::Order:
                  Ship := FALSE;
                "Document Type"::Invoice:
                  BEGIN
                    Receive := TRUE;
                    Invoice := TRUE;
                    Ship := FALSE;
                  END;
                "Document Type"::"Return Order":
                  Receive := FALSE;
                "Document Type"::"Credit Memo":
                  BEGIN
                    Receive := FALSE;
                    Invoice := TRUE;
                    Ship := TRUE;
                  END;
              END;
              CLEAR(GSTStateCode);
              GSTReverseChargeVendType := GSTManagement.IsItReverseCharge(Rec);
              IF Invoice THEN
                CheckBillOfEntry(PurchHeader);
              IF Structure <> '' THEN BEGIN
                PurchLine.CalculateStructures(PurchHeader);
                IF NOT PreviewMode THEN
                  COMMIT;
                CheckVATSettled;
                PurchLine.AdjustStructureAmounts(PurchHeader);
                PurchLine.UpdatePurchLines(PurchHeader);
              END;
              GSTApplicationManagement.CheckGSTPurchCrMemoValidations(Rec);
              TotalPurchaseTaxAmount := 0;
              TotalVatablePurchaseTaxAmount := 0;
              PostItemChargeAssgntDiff := FALSE;
              PurchLine6.RESET;
              PurchLine6.SETRANGE("Document Type","Document Type");
              PurchLine6.SETRANGE("Document No.","No.");
              PurchLine6.SETRANGE(Type,PurchLine6.Type::"Charge (Item)");
              PurchLine6.SETFILTER("Tax Amount",'<>%1',0);
              IF PurchLine6.FINDSET THEN
                REPEAT
                  ItemChargeAssgntPurch2.RESET;
                  ItemChargeAssgntPurch2.SETRANGE("Document Type",PurchLine6."Document Type");
                  ItemChargeAssgntPurch2.SETRANGE("Document No.",PurchLine6."Document No.");
                  ItemChargeAssgntPurch2.SETRANGE("Document Line No.",PurchLine6."Line No.");
                  IF ItemChargeAssgntPurch2.FINDSET THEN
                    REPEAT
                      ItemCharge.GET(ItemChargeAssgntPurch2."Item Charge No.");
                      Item.GET(ItemChargeAssgntPurch2."Item No.");
                      IF ItemCharge."Fixed Asset" <> Item."Fixed Asset" THEN
                        ERROR(STRSUBSTNO(Text16517,ItemCharge."Fixed Asset",ItemChargeAssgntPurch2."Item No.",
                            ItemChargeAssgntPurch2."Document Line No."));
                    UNTIL ItemChargeAssgntPurch2.NEXT = 0;
                UNTIL PurchLine6.NEXT = 0;

              DetailedTaxEntry.RESET;
              DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
              DetailedTaxEntry.SETRANGE("Main Component Entry No.",0);
              IF DetailedTaxEntry.FINDSET THEN
                REPEAT
                  DetailedTaxEntry."Main Component Entry No." := DetailedTaxEntry."Entry No.";
                  DetailedTaxEntry.MODIFY;
                UNTIL DetailedTaxEntry.NEXT = 0;

              CWIPFlag := FALSE;
              NonCWIPFlag := FALSE;
              PurchLine4.RESET;
              PurchLine4.SETRANGE("Document Type","Document Type");
              PurchLine4.SETRANGE("Document No.","No.");
              PurchLine4.SETFILTER("Job No.",'<>%1','');
              IF PurchLine4.FINDSET THEN
                REPEAT
                  Job.GET(PurchLine4."Job No.");
                  IF Job."Job Type" = Job."Job Type"::"Capital WIP" THEN BEGIN
                    IF NOT (PurchLine4."Job Line Type" IN [PurchLine4."Job Line Type"::" ",PurchLine4."Job Line Type"::Schedule]) THEN
                      PurchLine4.FIELDERROR("Job Line Type");
                    IF Trading THEN
                      ERROR(Text16513,PurchLine4."Document Type",PurchLine4."Document No.",PurchLine4."Line No.");
                    IF "Input Service Distribution" AND (PurchLine4."Service Tax Amount" <> 0) THEN
                      ERROR(Text16514,PurchLine4."Document Type",PurchLine4."Document No.",PurchLine4."Line No.");
                    PurchLine4.TESTFIELD("CWIP G/L Type");
                    CWIPFlag := TRUE;
                  END ELSE BEGIN
                    PurchLine4.TESTFIELD("CWIP G/L Type",PurchLine4."CWIP G/L Type"::" ");
                    NonCWIPFlag := TRUE;
                  END;
                UNTIL (PurchLine4.NEXT = 0);
              IF CWIPFlag AND NonCWIPFlag THEN
                ERROR(Text16516);
              IF CWIPFlag THEN BEGIN
                PurchLine4.RESET;
                PurchLine4.SETRANGE("Document Type","Document Type");
                PurchLine4.SETRANGE("Document No.","No.");
                PurchLine4.SETFILTER(Type,'<>%1',0);
                PurchLine4.SETFILTER("Job No.",'=%1','');
                IF PurchLine4.FINDFIRST THEN
                  ERROR(Text16515,PurchLine4."Document Type",PurchLine4."Document No.",PurchLine4."Line No.");
                StrOrderDetails2.RESET;
                StrOrderDetails2.SETRANGE(Type,StrOrderDetails2.Type::Purchase);
                StrOrderDetails2.SETRANGE("Document Type","Document Type");
                StrOrderDetails2.SETRANGE("Document No.","No.");
                StrOrderDetails2.SETRANGE("Tax/Charge Type",StrOrderDetails2."Tax/Charge Type"::Charges);
                StrOrderDetails2.SETRANGE("Loading on Inventory",FALSE);
                IF StrOrderDetails2.FINDFIRST THEN
                  StrOrderDetails2.FIELDERROR("Loading on Inventory");
              END;
              TDSBaseIncludesServiceTax := StrOrdLineDetails.DoesTDSBaseIncludeServiceTax(PurchHeader);
              PurchLine.CalculateTDS(PurchHeader);

              IF NOT (Receive OR Invoice OR Ship) THEN
                ERROR(
                  Text025,
                  FIELDCAPTION(Receive),FIELDCAPTION(Invoice),FIELDCAPTION(Ship));
              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;
              IF Invoice THEN
                CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,TRUE);

              CheckLines(PurchHeader);

              CheckPostRestrictions(PurchHeader);
              IF ServTaxMgmt.TryGetSrvTaxRevChgTypePurchHdr(PurchHeader,STReverseChargeSetup) THEN
                IF "Input Service Distribution" THEN
                  ERROR(Text16507,"Document Type","No.");
              CheckICDocumentDuplicatePosting(PurchHeader);
              IF Invoice THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                  PurchLine.SETFILTER("Qty. to Invoice",'<>0');
                Invoice := NOT PurchLine.ISEMPTY;
                IF Invoice AND (NOT Receive) AND
                   ("Document Type" = "Document Type"::Order)
                THEN BEGIN
                  Invoice := FALSE;
                  PurchLine.FINDSET;
                  REPEAT
                    Invoice := (PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") <> 0;
                  UNTIL Invoice OR (PurchLine.NEXT = 0);
                END ELSE
                  IF Invoice AND (NOT Ship) AND
                     ("Document Type" = "Document Type"::"Return Order")
                  THEN BEGIN
                    Invoice := FALSE;
                    PurchLine.FINDSET;
                    REPEAT
                      Invoice := (PurchLine."Return Qty. Shipped" - PurchLine."Quantity Invoiced") <> 0;
                    UNTIL Invoice OR (PurchLine.NEXT = 0);
                  END;
              END;
              IF Invoice THEN BEGIN
                CopyAndCheckItemCharge(PurchHeader);
                CheckDeferralPosting(PurchHeader);
              END;
              IF Invoice AND NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
                TESTFIELD("Due Date");
              IF Receive THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" = "Document Type"::Order THEN
                  PurchLine.SETFILTER("Qty. to Receive",'<>0');
                PurchLine.SETRANGE("Receipt No.",'');
                IF Subcontracting THEN
                  PurchLine.SETRANGE("Line No.",SubConPostLine);
                Receive := PurchLine.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Receive THEN
                  CheckTrackingSpecification(PurchLine);
                IF Receive AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
                  CheckWarehouse(PurchLine);
              END;
              IF Ship THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER(Quantity,'<>0');
                PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
                PurchLine.SETRANGE("Return Shipment No.",'');
                Ship := PurchLine.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Ship THEN
                  CheckTrackingSpecification(PurchLine);
                IF Ship AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
                  CheckWarehouse(PurchLine);
              END;
              IF NOT (Receive OR Invoice OR Ship) THEN
                IF NOT OnlyAssgntPosting THEN
                  IF NOT Subcontracting THEN
                    ERROR(Text001);
              IF Invoice THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN
                  REPEAT
                    SalesOrderLine.GET(
                      SalesOrderLine."Document Type"::Order,
                      PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");
                    IF Receive AND
                       Invoice AND
                       (PurchLine."Qty. to Invoice" <> 0) AND
                       (PurchLine."Qty. to Receive" <> 0)
                    THEN
                      ERROR(Text002);
                    IF ABS(PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") <
                       ABS(PurchLine."Qty. to Invoice")
                    THEN BEGIN
                      PurchLine."Qty. to Invoice" := PurchLine."Quantity Received" - PurchLine."Quantity Invoiced";
                      PurchLine."Qty. to Invoice (Base)" := PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
                    END;
                    IF ABS(PurchLine.Quantity - (PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced")) <
                       ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
                    THEN
                      ERROR(
                        Text003 +
                        Text004,
                        PurchLine."Sales Order No.");
                  UNTIL PurchLine.NEXT = 0;
              END;
              InitProgressWindow(PurchHeader);
              GetGLSetup;
              PurchSetup.GET;
              GetCurrency;
              UpdateTaxFormsDetails(PurchHeader);
              IF Invoice AND PurchSetup."Ext. Doc. No. Mandatory" THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  TESTFIELD("Vendor Invoice No.")
                ELSE
                  TESTFIELD("Vendor Cr. Memo No.");

              IF Receive AND ("Receiving No." = '') THEN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
                THEN BEGIN
                  TESTFIELD("Receiving No. Series");
                  "Receiving No." := NoSeriesMgt.GetNextNo("Receiving No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Ship AND ("Return Shipment No." = '') THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo")
                THEN BEGIN
                  TESTFIELD("Return Shipment No. Series");
                  "Return Shipment No." := NoSeriesMgt.GetNextNo("Return Shipment No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Invoice AND ("Posting No." = '') THEN BEGIN
                IF ("No. Series" <> '') OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN
                  TESTFIELD("Posting No. Series");
                IF ("No. Series" <> "Posting No. Series") OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN BEGIN
                  IF NOT PreviewMode THEN BEGIN
                    "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
                    ModifyHeader := TRUE;
                  END ELSE
                    "Posting No." := '***';
                END;
              END;
              IF NOT ItemChargeAssgntOnly THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN BEGIN
                  DropShipOrder := TRUE;
                  IF Receive THEN
                    REPEAT
                      IF SalesOrderHeader."No." <> PurchLine."Sales Order No." THEN BEGIN
                        SalesOrderHeader.GET(
                          SalesOrderHeader."Document Type"::Order,
                          PurchLine."Sales Order No.");
                        SalesOrderHeader.TESTFIELD("Bill-to Customer No.");
                        SalesOrderHeader.Ship := TRUE;
                        CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesOrderHeader);
                        IF SalesOrderHeader."Shipping No." = '' THEN BEGIN
                          SalesOrderHeader.TESTFIELD("Shipping No. Series");
                          SalesOrderHeader."Shipping No." :=
                            NoSeriesMgt.GetNextNo(SalesOrderHeader."Shipping No. Series","Posting Date",TRUE);
                          SalesOrderHeader.MODIFY;
                          ModifyHeader := TRUE;
                        END;
                      END;
                    UNTIL PurchLine.NEXT = 0;
                END;
              END;
              OnBeforePostCommitPurchaseDoc(Rec,GenJnlPostLine,PreviewMode,ModifyHeader);
              IF NOT PreviewMode AND ModifyHeader THEN BEGIN
                MODIFY;
                COMMIT;
              END;
              IF PurchSetup."Calc. Inv. Discount" AND
                 (Status <> Status::Open) AND
                 NOT ItemChargeAssgntOnly
              THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.FINDFIRST;
                TempInvoice := Invoice;
                TempRcpt := Receive;
                TempReturn := Ship;
                PurchCalcDisc.RUN(PurchLine);
                GET("Document Type","No.");
                Invoice := TempInvoice;
                Receive := TempRcpt;
                Ship := TempReturn;
                IF NOT PreviewMode THEN
                  COMMIT;
              END;
              IF (Status = Status::Open) OR (Status = Status::"Pending Prepayment") THEN BEGIN
                TempInvoice := Invoice;
                TempRcpt := Receive;
                TempReturn := Ship;
                PrevStatus := Status;
                CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
                TESTFIELD(Status,Status::Released);
                Status := PrevStatus;
                Invoice := TempInvoice;
                Receive := TempRcpt;
                Ship := TempReturn;
                IF PreviewMode AND ("Posting No." = '') THEN
                  "Posting No." := '***';
                IF NOT PreviewMode THEN BEGIN
                  MODIFY;
                  COMMIT;
                END;
                Status := Status::Released;
              END;

              IF Receive OR Ship THEN
                ArchiveUnpostedOrder(PurchHeader);

              CheckICPartnerBlocked(PurchHeader);
              SendICDocument(PurchHeader,ModifyHeader);
              UpdateHandledICInboxTransaction(PurchHeader);
              LockTables;
              SourceCodeSetup.GET;
              SrcCode := SourceCodeSetup.Purchases;

              // Insert receipt header
              IF Receive THEN BEGIN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
                THEN BEGIN
                  IF DropShipOrder THEN BEGIN
                    PurchRcptHeader.LOCKTABLE;
                    PurchRcptLine.LOCKTABLE;
                    SalesShptHeader.LOCKTABLE;
                    SalesShptLine.LOCKTABLE;
                  END;
                  InsertReceiptHeader(PurchHeader,PurchRcptHeader);
                END;
                ServItemMgt.CopyReservation(PurchHeader);
              END;
              // Insert return shipment header
              IF Ship THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo")
                THEN
                  InsertReturnShipmentHeader(PurchHeader,ReturnShptHeader);
              CVDPayableToThirdParty := FALSE;
              StrOrderDetails.RESET;
              StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
              StrOrderDetails.SETRANGE("Document Type","Document Type");
              StrOrderDetails.SETRANGE("Document No.","No.");
              StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
              StrOrderDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type"::Excise);
              IF StrOrderDetails.FINDFIRST THEN
                IF StrOrderDetails.CVD AND StrOrderDetails."CVD Payable to Third Party" THEN BEGIN
                  StrOrderDetails.TESTFIELD("CVD Third Party Code");
                  CVDPayableToThirdParty := TRUE;
                END;

              // Insert invoice header or credit memo header
              IF Invoice THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  InsertInvoiceHeader(PurchHeader,PurchInvHeader);
                  GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
                  GenJnlLineDocNo := PurchInvHeader."No.";
                  GenJnlLineExtDocNo := "Vendor Invoice No.";
                  StrOrderDetails.RESET;
                  StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderDetails.SETRANGE("Document Type","Document Type");
                  StrOrderDetails.SETRANGE("Document No.","No.");
                  StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
                  IF StrOrderDetails.FIND('-') THEN
                    REPEAT
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" THEN
                        StrOrderDetails.TESTFIELD("Loading on Inventory",FALSE);
                      PostedStrOrderDetails.INIT;
                      PostedStrOrderDetails.TRANSFERFIELDS(StrOrderDetails);
                      PostedStrOrderDetails."No." := GenJnlLineDocNo;
                      PostedStrOrderDetails."Document Type" := "Document Type"::Invoice;
                      IF PostedStrOrderDetails."Tax/Charge Type" = PostedStrOrderDetails."Tax/Charge Type"::"Service Tax" THEN
                        ServTaxMgmt.CheckPurchaseLines(PurchHeader);
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                        IF StrOrderDetails."Loading on Inventory" THEN
                          FASalesTaxLoading := TRUE
                        ELSE
                          FASalesTaxLoading := FALSE;
                      END;
                      PostedStrOrderDetails.INSERT;
                    UNTIL StrOrderDetails.NEXT = 0;
                END ELSE BEGIN // Credit Memo
                  InsertCrMemoHeader(PurchHeader,PurchCrMemoHeader);
                  GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
                  GenJnlLineDocNo := PurchCrMemoHeader."No.";
                  GenJnlLineExtDocNo := "Vendor Cr. Memo No.";
                  StrOrderDetails.RESET;
                  StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderDetails.SETRANGE("Document Type","Document Type");
                  StrOrderDetails.SETRANGE("Document No.","No.");
                  StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
                  IF StrOrderDetails.FIND('-') THEN
                    REPEAT
                      PostedStrOrderDetails.INIT;
                      PostedStrOrderDetails.TRANSFERFIELDS(StrOrderDetails);
                      PostedStrOrderDetails."No." := GenJnlLineDocNo;
                      PostedStrOrderDetails."Document Type" := "Document Type"::"Credit Memo";
                      IF PostedStrOrderDetails."Tax/Charge Type" = PostedStrOrderDetails."Tax/Charge Type"::"Service Tax" THEN
                        ServTaxMgmt.CheckPurchaseLines(PurchHeader);
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                        IF StrOrderDetails."Loading on Inventory" THEN
                          FASalesTaxLoading := TRUE
                        ELSE
                          FASalesTaxLoading := FALSE;
                      END;
                      PostedStrOrderDetails.INSERT;
                    UNTIL StrOrderDetails.NEXT = 0;
                END;

              IF Trading THEN BEGIN
                PurchLine.InitDetailRG23D(PurchHeader);
                PurchLine.InitRG23DSplitingBuffer(PurchHeader);
                CalledFrmPosting := ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
                END;
              UpdateIncomingDocument("Incoming Document Entry No.","Posting Date",GenJnlLineDocNo);
              // Lines
              TempDeferralHeader.DELETEALL;
              TempDeferralLine.DELETEALL;
              InvPostingBuffer[1].DELETEALL;
              StrPostBuf[1].DELETEALL;
              VATPostingBuffer[1].DELETEALL;
              ExcisePostingBuffer[1].DELETEALL;
              STaxPostingBuffer[1].DELETEALL;
              DropShptPostBuffer.DELETEALL;
              TDSInvBuf[1].DELETEALL;
              GSTPostingBuffer[1].DELETEALL;
              EverythingInvoiced := TRUE;
              InsertSTRecoverable := FALSE;
              NonCSTVATChrgAmt := FALSE;
              AppliedServiceTaxAmountPmt := 0;
              AppliedServiceTaxAmountInv := 0;

              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type","Document Type");
              PurchLine.SETRANGE("Document No.","No.");
              IF Subcontracting AND (NOT Invoice) THEN
                PurchLine.SETRANGE("Line No.",SubConPostLine);
              LineCount := 0;
              AmountAddedtoVendor := 0;
              SrcCurrAmountAddedtoVendor := 0;
              AmountToVendor := 0;
              AmountToVendorLCY := 0;
              RoundingLineInserted := FALSE;
              MergePurchLines(PurchHeader,PurchLine,TempPrepmtPurchLine,TempCombinedPurchLine);
              AdjustFinalInvWith100PctPrepmt(TempCombinedPurchLine);

              TempVATAmountLineRemainder.DELETEALL;
              PurchLine.CalcVATAmountLines(1,PurchHeader,TempCombinedPurchLine,TempVATAmountLine);
              LoopCount := 0;
              TotalChargeItemInputTaxCredit := 0;
              TotalChrgItemAmtLoadedOnItem := 0;
              PurchLineTaxAmount := 0;

              PurchaseLinesProcessed := FALSE;
              IF PurchLine.FINDSET THEN
                REPEAT
                  PurchRcptLine.INIT;
                  PurchRcptLine."Line No." := 0;
                  PurchRcptLine."Document No." := '';
                  ItemAmountLoadedOnItem := 0;
                  ItemInputTaxCredit := 0;
                  ChargeItemAmountLoadedOnItem := 0;
                  ChargeItemInputTaxCredit := 0;
                  ChargeItemPerOrder := FALSE;
                  GSTAmountLoaded := 0;
                  GSTCreditAmount := 0;
                  CustomDuty := 0;
                  IF PurchLine."Total GST Amount" <> 0 THEN
                    IF (PurchLine.Type <> PurchLine.Type::"Charge (Item)") AND
                      (PurchLine."GST Credit" = PurchLine."GST Credit"::"Non-Availment") AND
                      (NOT PurchHeader."GST Input Service Distribution") THEN
                    IF PurchLine."GST Assessable Value" <> 0 THEN
                      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"] THEN
                        GSTAmountLoaded :=
                            ABS(GSTManagement.RoundTotalGSTAmountQtyFactorLCY(
                                DocTransactionType::Purchase,PurchLine."Document Type",
                                PurchLine."Document No.",PurchLine."Line No.",
                                PurchLine."Qty. to Invoice"))
                      ELSE
                        GSTAmountLoaded :=
                          ABS(GSTManagement.RoundTotalGSTAmountQtyFactorLCY(
                              DocTransactionType::Purchase,PurchLine."Document Type",
                              PurchLine."Document No.",PurchLine."Line No.",
                              PurchLine."Qty. to Invoice"))
                    ELSE
                      GSTAmountLoaded :=
                        GSTManagement.RoundTotalGSTAmountQtyFactorLCY(
                          DocTransactionType::Purchase,PurchLine."Document Type",
                          PurchLine."Document No.",PurchLine."Line No.",
                          PurchLine."Qty. to Invoice" / PurchLine.Quantity)
                    ELSE
                      IF PurchLine."GST Credit" = PurchLine."GST Credit"::Availment THEN
                        GSTCreditAmount := PurchLine."Total GST Amount";
                  Vendor.GET("Buy-from Vendor No.");
                  IF GSTManagement.IsGSTApplicable(Structure) AND ("GST Vendor Type" IN ["GST Vendor Type"::Import, "GST Vendor Type"::SEZ]) THEN BEGIN
                    CustomDuty := PurchLine."Custom Duty Amount";
                    IF "Currency Code" <> '' THEN
                      CustomDuty := GSTManagement.ConvertGSTAmountToLCY("Currency Code",
                                    PurchLine."Custom Duty Amount","Currency Factor","Posting Date");
                  END;
                  LSTTaxType := FALSE;
                  IF (("Document Type" = "Document Type"::"Return Order") OR
                      ("Document Type" = "Document Type"::"Credit Memo")) AND
                     Trading AND
                     (PurchLine.Type = PurchLine.Type::Item) AND
                     (PurchLine."No." <> '')
                  THEN
                    PurchLine.TESTFIELD("Appl.-to Item Entry");
                  TempPurchLine3.DELETEALL;
                  TempPurchLine3.TRANSFERFIELDS(PurchLine);
                  GetPerUnitAmount(TempPurchLine3);
                  TempPurchLine3.INSERT;
                  TotalQtyInvoiced := 0;
                  TotalTaxAmount := 0;
                  IF (PurchLine.FullServiceTaxAmount <> 0) OR (PurchLine.FullServiceTaxSBCAmount <> 0) OR
                     (PurchLine.KKCessAmount <> 0)
                  THEN BEGIN
                    IF "Location Code" <> '' THEN BEGIN
                      GetLocation("Location Code");
                      IF "Input Service Distribution" AND NOT Location."Input Service Distributor" THEN
                        ERROR(Text16503,"Location Code");
                      IF NOT "Input Service Distribution" AND Location."Input Service Distributor" THEN
                        ERROR(Text16504,"Location Code");
                    END;
                  END;
                  IF PurchLine.CVD AND (PurchLine."CIF Amount" + PurchLine."BCD Amount" = 0) THEN
                    ERROR(Text16501);
                  IF PurchLine."Excise Loading on Inventory" THEN BEGIN
                    PurchLine.TESTFIELD(Type,PurchLine.Type::Item);
                    TESTFIELD(Trading,FALSE);
                  END;
                  IF Trading THEN BEGIN
                    StrOrderLineDet.RESET;
                    StrOrderLineDet.SETRANGE(Type,StrOrderLineDet.Type::Purchase);
                    StrOrderLineDet.SETRANGE("Document Type","Document Type");
                    StrOrderLineDet.SETRANGE("Document No.","No.");
                    StrOrderLineDet.SETRANGE("Tax/Charge Type",StrOrderLineDet."Tax/Charge Type"::Excise);
                    PurchLine3.RESET;
                    PurchLine3.SETRANGE("Document No.","No.");
                    PurchLine3.SETFILTER("Excise Accounting Type",'%1',PurchLine3."Excise Accounting Type"::"With CENVAT");
                    PurchLine3.SETRANGE(Type,PurchLine3.Type::Item);
                    PurchLine3.SETFILTER("Capital Item",'%1',TRUE);
                    IF NOT PurchLine3.FINDFIRST THEN BEGIN
                      PurchLine3.SETRANGE(Type,PurchLine3.Type::"Fixed Asset");
                      PurchLine3.SETRANGE("Capital Item",FALSE);
                      IF PurchLine3.FINDFIRST THEN BEGIN
                        StrOrderLineDet.SETRANGE("Line No.",PurchLine3."Line No.");
                        IF StrOrderLineDet.FINDFIRST THEN
                          ERROR(Text16508);
                      END;
                    END ELSE BEGIN
                      StrOrderLineDet.SETRANGE("Line No.",PurchLine3."Line No.");
                      IF StrOrderLineDet.FINDFIRST THEN
                        ERROR(Text16508);
                    END;
                  END;
                  ExciseExistInStructure := FALSE;
                  StrOrdLineDetails.RESET;
                  StrOrdLineDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrdLineDetails.SETRANGE("Document Type","Document Type");
                  StrOrdLineDetails.SETRANGE("Document No.","No.");
                  StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
                  StrOrdLineDetails.SETRANGE("Line No.",PurchLine."Line No.");
                  StrOrdLineDetails.SETRANGE("Tax/Charge Type",StrOrdLineDetails."Tax/Charge Type"::Excise);
                  IF StrOrdLineDetails.FINDFIRST THEN
                    ExciseExistInStructure := TRUE;
                  IF PurchLine.Type = PurchLine.Type::Item THEN
                    DummyTrackingSpecification.CheckItemTrackingQuantity(
                      DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",
                      PurchLine."Qty. to Receive (Base)",PurchLine."Qty. to Invoice (Base)",Receive,Invoice);
                  IF PurchLine."Job No." <> '' THEN
                    PurchLine.TESTFIELD("Job Task No.");
                  ItemJnlRollRndg := FALSE;
                  LineCount := LineCount + 1;
                  IF GUIALLOWED THEN
                    Window.UPDATE(2,LineCount);
                  IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                    PurchLine.TESTFIELD(Amount);
                    PurchLine.TESTFIELD("Job No.",'');
                  END;
                  IF PurchLine.Type = PurchLine.Type::Item THEN
                    CostBaseAmount := PurchLine."Line Amount";
                  UpdateQtyPerUnitOfMeasure(PurchLine);
                  IF PurchLine.Type = PurchLine.Type::"Fixed Asset" THEN BEGIN
                    PurchLine.TESTFIELD("Job No.",'');
                    PurchLine.TESTFIELD("Depreciation Book Code");
                    PurchLine.TESTFIELD("FA Posting Type");
                    FA.GET(PurchLine."No.");
                    DeprBook.GET(PurchLine."Depreciation Book Code");
                    FA.TESTFIELD("Budgeted Asset",FALSE);
                    IF PurchLine."Budgeted FA No." <> '' THEN BEGIN
                      FA.GET(PurchLine."Budgeted FA No.");
                      FA.TESTFIELD("Budgeted Asset",TRUE);
                    END;
                    IF PurchLine."FA Posting Type" = PurchLine."FA Posting Type"::Maintenance THEN BEGIN
                      PurchLine.TESTFIELD("Insurance No.",'');
                      PurchLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                      PurchLine.TESTFIELD("Depr. Acquisition Cost",FALSE);
                      DeprBook.TESTFIELD("G/L Integration - Maintenance",TRUE);
                    END;
                    IF PurchLine."FA Posting Type" = PurchLine."FA Posting Type"::"Acquisition Cost" THEN BEGIN
                      PurchLine.TESTFIELD("Maintenance Code",'');
                      DeprBook.TESTFIELD("G/L Integration - Acq. Cost",TRUE);
                    END;
                    IF PurchLine."Insurance No." <> '' THEN BEGIN
                      FASetup.GET;
                      FASetup.TESTFIELD("Insurance Depr. Book",PurchLine."Depreciation Book Code");
                    END;
                  END ELSE BEGIN
                    PurchLine.TESTFIELD("Depreciation Book Code",'');
                    PurchLine.TESTFIELD("FA Posting Type",0);
                    PurchLine.TESTFIELD("Maintenance Code",'');
                    PurchLine.TESTFIELD("Insurance No.",'');
                    PurchLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                    PurchLine.TESTFIELD("Depr. Acquisition Cost",FALSE);
                    PurchLine.TESTFIELD("Budgeted FA No.",'');
                    PurchLine.TESTFIELD("FA Posting Date",0D);
                    PurchLine.TESTFIELD("Salvage Value",0);
                    PurchLine.TESTFIELD("Duplicate in Depreciation Book",'');
                    PurchLine.TESTFIELD("Use Duplication List",FALSE);
                  END;

                  CASE "Document Type" OF
                    "Document Type"::Order:
                      PurchLine.TESTFIELD("Return Qty. to Ship",0);
                    "Document Type"::Invoice:
                      BEGIN
                        IF PurchLine."Receipt No." = '' THEN
                          PurchLine.TESTFIELD("Qty. to Receive",PurchLine.Quantity);
                        PurchLine.TESTFIELD("Return Qty. to Ship",0);
                        PurchLine.TESTFIELD("Qty. to Invoice",PurchLine.Quantity);
                      END;
                    "Document Type"::"Return Order":
                      PurchLine.TESTFIELD("Qty. to Receive",0);
                    "Document Type"::"Credit Memo":
                      BEGIN
                        IF PurchLine."Return Shipment No." = '' THEN
                          PurchLine.TESTFIELD("Return Qty. to Ship",PurchLine.Quantity);
                        PurchLine.TESTFIELD("Qty. to Receive",0);
                        PurchLine.TESTFIELD("Qty. to Invoice",PurchLine.Quantity);
                      END;
                  END;

                  IF NOT (Receive OR RoundingLineInserted) THEN BEGIN
                    PurchLine."Qty. to Receive" := 0;
                    PurchLine."Qty. to Receive (Base)" := 0;
                  END;
                  IF NOT (Ship OR RoundingLineInserted) THEN BEGIN
                    PurchLine."Return Qty. to Ship" := 0;
                    PurchLine."Return Qty. to Ship (Base)" := 0;
                  END;

                  IF ("Document Type" = "Document Type"::Invoice) AND (PurchLine."Receipt No." <> '') THEN BEGIN
                    PurchLine."Quantity Received" := PurchLine.Quantity;
                    PurchLine."Qty. Received (Base)" := PurchLine."Quantity (Base)";
                    PurchLine."Qty. to Receive" := 0;
                    PurchLine."Qty. to Receive (Base)" := 0;
                  END;
                  IF ("Document Type" = "Document Type"::"Credit Memo") AND (PurchLine."Return Shipment No." <> '')
                  THEN BEGIN
                    PurchLine."Return Qty. Shipped" := PurchLine.Quantity;
                    PurchLine."Return Qty. Shipped (Base)" := PurchLine."Quantity (Base)";
                    PurchLine."Return Qty. to Ship" := 0;
                    PurchLine."Return Qty. to Ship (Base)" := 0;
                  END;
                  IF Invoice THEN BEGIN
                    IF ABS(PurchLine."Qty. to Invoice") > ABS(PurchLine.MaxQtyToInvoice) THEN
                      PurchLine.InitQtyToInvoice;
                  END ELSE BEGIN
                    PurchLine."Qty. to Invoice" := 0;
                    PurchLine."Qty. to Invoice (Base)" := 0;
                  END;
                  IF PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced" <> PurchLine.Quantity THEN
                    EverythingInvoiced := FALSE;

                  IF PurchLine.Quantity <> 0 THEN BEGIN
                    PurchLine.TESTFIELD("No.");
                    PurchLine.TESTFIELD(Type);
                    PurchLine.TESTFIELD("Gen. Bus. Posting Group");
                    PurchLine.TESTFIELD("Gen. Prod. Posting Group");
                    DivideAmount(1,PurchLine."Qty. to Invoice",TempVATAmountLine,TempVATAmountLineRemainder);
                  END ELSE
                    PurchLine.TESTFIELD(Amount,0);

                  CheckItemReservDisruption;
                  RoundAmount(PurchLine."Qty. to Invoice");

                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                    ReverseAmount(PurchLine);
                    ReverseAmount(PurchLineACY);
                  END;

                  RemQtyToBeInvoiced := PurchLine."Qty. to Invoice";
                  RemQtyToBeInvoicedBase := PurchLine."Qty. to Invoice (Base)";

                  // Job Credit Memo Item Qty Check
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    IF (PurchLine."Job No." <> '') AND (PurchLine.Type = PurchLine.Type::Item) AND
                       (PurchLine."Qty. to Invoice" <> 0)
                    THEN
                      JobPostLine.CheckItemQuantityPurchCredit(Rec,PurchLine);
                  // Item Tracking:
                  IF NOT PurchLine."Prepayment Line" THEN BEGIN
                    IF Invoice THEN
                      IF PurchLine."Qty. to Invoice" = 0 THEN
                        TrackingSpecificationExists := FALSE
                      ELSE
                        TrackingSpecificationExists :=
                          ReservePurchLine.RetrieveInvoiceSpecification(PurchLine,TempInvoicingSpecification);
                    EndLoop := FALSE;

                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") THEN BEGIN
                        ReturnShptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::"Return Order":
                            BEGIN
                              ReturnShptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                              ReturnShptLine.SETRANGE("Return Order No.",PurchLine."Document No.");
                              ReturnShptLine.SETRANGE("Return Order Line No.",PurchLine."Line No.");
                            END;
                          "Document Type"::"Credit Memo":
                            BEGIN
                              ReturnShptLine.SETRANGE("Document No.",PurchLine."Return Shipment No.");
                              ReturnShptLine.SETRANGE("Line No.",PurchLine."Return Shipment Line No.");
                            END;
                        END;
                        ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
                        IF ReturnShptLine.FINDSET(TRUE,FALSE) THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No.");
                              ReturnShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := ReturnShptLine."Item Shpt. Entry No.";
                            ReturnShptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                            ReturnShptLine.TESTFIELD(Type,PurchLine.Type);
                            ReturnShptLine.TESTFIELD("No.",PurchLine."No.");
                            ReturnShptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                            ReturnShptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                            ReturnShptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                            ReturnShptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                            ReturnShptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                            ReturnShptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");
                            IF PurchLine."Qty. to Invoice" * ReturnShptLine.Quantity > 0 THEN
                              PurchLine.FIELDERROR("Qty. to Invoice",Text028);
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Return Qty. to Ship";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Return Qty. to Ship (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := ReturnShptLine."Quantity Invoiced" - ReturnShptLine.Quantity;
                              QtyToBeInvoicedBase := ReturnShptLine."Qty. Invoiced (Base)" - ReturnShptLine."Quantity (Base)";
                            END;

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            ReturnShptLine."Quantity Invoiced" :=
                              ReturnShptLine."Quantity Invoiced" - QtyToBeInvoiced;
                            ReturnShptLine."Qty. Invoiced (Base)" :=
                              ReturnShptLine."Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
                            ReturnShptLine."Return Qty. Shipped Not Invd." :=
                              ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced";
                            ReturnShptLine.MODIFY;
                            IF PurchLine.Type = PurchLine.Type::Item THEN
                              PostItemJnlLine(
                                PurchLine,
                                0,0,
                                QtyToBeInvoiced,QtyToBeInvoicedBase,
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (ReturnShptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Return Qty. to Ship"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text029,
                            PurchLine."Return Shipment Line No.",PurchLine."Return Shipment No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") THEN BEGIN
                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                          ERROR(
                            Text039,
                            ReturnShptLine."Document No.");
                        ERROR(Text040);
                      END;
                    END ELSE BEGIN
                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") THEN BEGIN
                        PurchRcptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::Order:
                            BEGIN
                              PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
                              PurchRcptLine.SETRANGE("Order No.",PurchLine."Document No.");
                              PurchRcptLine.SETRANGE("Order Line No.",PurchLine."Line No.");
                            END;
                          "Document Type"::Invoice:
                            BEGIN
                              PurchRcptLine.SETRANGE("Document No.",PurchLine."Receipt No.");
                              PurchRcptLine.SETRANGE("Line No.",PurchLine."Receipt Line No.");
                            END;
                        END;

                        PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
                        IF PurchRcptLine.FINDSET(TRUE,FALSE) THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN
                              ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No.");
                              PurchRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := PurchRcptLine."Item Rcpt. Entry No.";
                            UpdateRemainingQtyToBeInvoiced(RemQtyToInvoiceCurrLine,RemQtyToInvoiceCurrLineBase,PurchRcptLine);
                            PurchRcptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                            PurchRcptLine.TESTFIELD(Type,PurchLine.Type);
                            PurchRcptLine.TESTFIELD("No.",PurchLine."No.");
                            PurchRcptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                            PurchRcptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                            PurchRcptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                            PurchRcptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                            PurchRcptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                            PurchRcptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");

                            UpdateQtyToBeInvoiced(
                              QtyToBeInvoiced,QtyToBeInvoicedBase,
                              TrackingSpecificationExists,PurchLine,PurchRcptLine,
                              TempInvoicingSpecification);

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToInvoiceCurrLine,QtyToBeInvoiced,
                                RemQtyToInvoiceCurrLineBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            UpdateInvoicedQtyOnPurchRcptLine(PurchRcptLine,QtyToBeInvoiced,QtyToBeInvoicedBase);
                            IF PurchLine.Type = PurchLine.Type::Item THEN
                              PostItemJnlLine(
                                PurchLine,
                                0,0,
                                QtyToBeInvoiced,QtyToBeInvoicedBase,
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (PurchRcptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Qty. to Receive"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text030,
                            PurchLine."Receipt Line No.",PurchLine."Receipt No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") THEN BEGIN
                        IF "Document Type" = "Document Type"::Invoice THEN
                          ERROR(
                            Text031,
                            PurchRcptLine."Document No.");
                        ERROR(Text014);
                      END;
                    END;

                    IF TrackingSpecificationExists THEN
                      SaveInvoiceSpecification(TempInvoicingSpecification);
                  END;

                  CASE PurchLine.Type OF
                    PurchLine.Type::"G/L Account":
                      IF (PurchLine."No." <> '') AND NOT PurchLine."System-Created Entry" THEN BEGIN
                        GLAcc.GET(PurchLine."No.");
                        GLAcc.TESTFIELD("Direct Posting");
                        IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
                          CreateJobPurchLine(JobPurchLine,PurchLine,"Prices Including VAT");
                          JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode);
                        END;
                        IF (PurchLine."IC Partner Code" <> '') AND Invoice THEN
                          InsertICGenJnlLine(TempPurchLine,ICGenJnlLineNo);
                      END;
                    PurchLine.Type::Item:
                      BEGIN
                        IF RemQtyToBeInvoiced <> 0 THEN
                          ItemLedgShptEntryNo :=
                            PostItemJnlLine(
                              PurchLine,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              0,'',DummyTrackingSpecification);
                        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                          IF ABS(PurchLine."Return Qty. to Ship") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                PurchLine,
                                PurchLine."Return Qty. to Ship" - RemQtyToBeInvoiced,
                                PurchLine."Return Qty. to Ship (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                        END ELSE BEGIN
                          IF ABS(PurchLine."Qty. to Receive") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                PurchLine,
                                PurchLine."Qty. to Receive" - RemQtyToBeInvoiced,
                                PurchLine."Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                          IF (PurchLine."Qty. to Receive" <> 0) AND
                             (PurchLine."Sales Order Line No." <> 0)
                          THEN BEGIN
                            DropShptPostBuffer."Order No." := PurchLine."Sales Order No.";
                            DropShptPostBuffer."Order Line No." := PurchLine."Sales Order Line No.";
                            DropShptPostBuffer.Quantity := PurchLine."Qty. to Receive";
                            DropShptPostBuffer."Quantity (Base)" := PurchLine."Qty. to Receive (Base)";
                            DropShptPostBuffer."Item Shpt. Entry No." :=
                              PostAssocItemJnlLine(DropShptPostBuffer.Quantity,DropShptPostBuffer."Quantity (Base)");
                            DropShptPostBuffer.INSERT;
                          END;
                        END;
                      END;
                    3:
                      ERROR(Text015);
                    PurchLine.Type::"Charge (Item)":
                      IF (Invoice AND (PurchLine."Qty. to Invoice" <> 0)) OR ItemChargeAssgntOnly THEN BEGIN
                        ItemJnlRollRndg := TRUE;
                        PurchaseLineBackup.COPY(PurchLine);
                        IF FindTempItemChargeAssgntPurch(PurchaseLineBackup."Line No.") THEN
                          REPEAT
                            IF ItemChargeAssgntOnly AND (GenJnlLineDocNo = '') THEN
                              GenJnlLineDocNo := TempItemChargeAssgntPurch."Applies-to Doc. No.";
                            CASE TempItemChargeAssgntPurch."Applies-to Doc. Type" OF
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt:
                                BEGIN
                                  PostItemChargePerRcpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt":
                                BEGIN
                                  PostItemChargePerTransfer(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment":
                                BEGIN
                                  PostItemChargePerRetShpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Sales Shipment":
                                BEGIN
                                  PostItemChargePerSalesShpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Receipt":
                                BEGIN
                                  PostItemChargePerRetRcpt(PurchaseLineBackup);
                                  TempItemChargeAssgntPurch.MARK(TRUE);
                                END;
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Order,
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Invoice,
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Order",
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Credit Memo":
                                CheckItemCharge(TempItemChargeAssgntPurch);
                            END;
                          UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                      END;
                  END;
                  ItemAmountLoadedOnItem := IndianSalesTaxCalculate.RoundVATPrecision(ItemAmountLoadedOnItem);
                  TotalPurchTaxAmount := IndianSalesTaxCalculate.RoundVATPrecision(TotalPurchTaxAmount);

                  IF (NOT Invoice) AND (PurchLine.Type = PurchLine.Type::Item) AND PurchLine.Subcontracting THEN BEGIN
                    PurchLine.SETRANGE("Line No.",SubConPostLine);
                    PurchLine.FIND('-');
                    SubConPost.PostSubcon(PurchLine);
                    PurchLine."Qty. to Invoice" := 0;
                    PurchLine."Qty. to Invoice (Base)" := 0;
                  END;

                  IF (PurchLine.Type >= PurchLine.Type::"G/L Account") AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
                    AdjustPrepmtAmountLCY(PurchLine);
                    // Copy purchase to buffer
                    FillInvPostingBuffer(PurchLine,PurchLineACY);
                    InsertPrepmtAdjInvPostingBuf(PurchLine);
                    ChargeItemAssgnt := FALSE;
                    AppliedServiceTaxAmountInv +=
                      ABS(PurchLine.FullServiceTaxAmount) + ABS(PurchLine.FullServiceTaxSBCAmount) +
                      ABS(PurchLine.KKCessAmount);

                    StrOrdLineDetails.RESET;
                    StrOrdLineDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                    StrOrdLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrdLineDetails.SETRANGE("Document No.","No.");
                    StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
                    StrOrdLineDetails.SETRANGE("Item No.",PurchLine."No.");
                    StrOrdLineDetails.SETRANGE("Line No.",PurchLine."Line No.");
                    StrOrdLineDetails.SETFILTER("Tax/Charge Type",'%1|%2',StrOrdLineDetails."Tax/Charge Type"::Charges,
                      StrOrdLineDetails."Tax/Charge Type"::"Other Taxes");
                    IF StrOrdLineDetails.FIND('-') THEN
                      REPEAT
                        IF (PurchLine.Type = PurchLine.Type::"Charge (Item)") AND
                           (StrOrdLineDetails."Tax/Charge Type" = StrOrdLineDetails."Tax/Charge Type"::Charges)
                        THEN
                          ERROR(STRSUBSTNO(CannotChargeErr,PurchLine."Line No.",PurchLine.Type));
                        IF PurchLine.Type = PurchLine.Type::"Fixed Asset" THEN
                          InsertStrPostBuf(StrOrdLineDetails,PurchLine."Qty. to Invoice",PurchLine.Quantity,TRUE)
                        ELSE
                          InsertStrPostBuf(StrOrdLineDetails,PurchLine."Qty. to Invoice",PurchLine.Quantity,FALSE);
                      UNTIL StrOrdLineDetails.NEXT = 0;

                    StrOrdLineDetails.RESET;
                    StrOrdLineDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                    StrOrdLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrdLineDetails.SETRANGE("Document No.","No.");
                    StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
                    StrOrdLineDetails.SETRANGE("Item No.",PurchLine."No.");
                    StrOrdLineDetails.SETRANGE("Line No.",PurchLine."Line No.");
                    IF StrOrdLineDetails.FIND('-') THEN
                      REPEAT
                        PostedStrOrderLineDetails.INIT;
                        PostedStrOrderLineDetails.TRANSFERFIELDS(StrOrdLineDetails);
                        PostedStrOrderLineDetails."Invoice No." := GenJnlLineDocNo;
                        PostedStrOrderLineDetails."Base Amount" :=
                          ROUND(StrOrdLineDetails."Base Amount" * TempPurchLine."Qty. to Invoice" / TempPurchLine.Quantity,
                            Currency."Amount Rounding Precision");
                        PostedStrOrderLineDetails."Amount (LCY)" :=
                          ROUND(StrOrdLineDetails."Amount (LCY)" * TempPurchLine."Qty. to Invoice" / TempPurchLine.Quantity,
                            Currency."Amount Rounding Precision");
                        PostedStrOrderLineDetails.Amount :=
                          ROUND(StrOrdLineDetails.Amount * TempPurchLine."Qty. to Invoice" / TempPurchLine.Quantity,
                            Currency."Amount Rounding Precision");
                        IF StrOrdLineDetails."Document Type" = StrOrdLineDetails."Document Type"::Order THEN
                          PostedStrOrderLineDetails."Document Type" := PostedStrOrderLineDetails."Document Type"::Invoice;
                        PostedStrOrderLineDetails.INSERT;
                      UNTIL StrOrdLineDetails.NEXT = 0;

                    PostedStrOrderLineDetails.RESET;
                    PostedStrOrderLineDetails.SETRANGE("Invoice No.",GenJnlLineDocNo);
                    PostedStrOrderLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
                    PostedStrOrderLineDetails.SETRANGE("Line No.",PurchLine."Line No.");
                    PostedStrOrderLineDetails.SETFILTER("Tax/Charge Type",'%1',PostedStrOrderLineDetails."Tax/Charge Type"::Excise);
                    IF PostedStrOrderLineDetails.FINDFIRST THEN BEGIN
                      PostedStrOrderLineDetails.Amount := TempPurchLine."Excise Amount";
                      IF TempPurchLine."Currency Code" = '' THEN
                        PostedStrOrderLineDetails."Amount (LCY)" := TempPurchLine."Excise Amount"
                      ELSE
                        PostedStrOrderLineDetails."Amount (LCY)" := PurchLine."Excise Amount";
                      PostedStrOrderLineDetails.MODIFY;
                    END;

                    TaxAreaLine.RESET;
                    TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
                    TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
                    IF TaxAreaLine.FINDFIRST THEN BEGIN
                      TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
                      IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                         (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
                      THEN BEGIN
                        PostedStrOrderLineDetails.RESET;
                        PostedStrOrderLineDetails.SETRANGE("Invoice No.",GenJnlLineDocNo);
                        PostedStrOrderLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
                        PostedStrOrderLineDetails.SETRANGE("Line No.",PurchLine."Line No.");
                        PostedStrOrderLineDetails.SETFILTER("Tax/Charge Type",'%1',PostedStrOrderLineDetails."Tax/Charge Type"::"Sales Tax");
                        IF PostedStrOrderLineDetails.FINDFIRST THEN BEGIN
                          PostedStrOrderLineDetails.Amount := TempPurchLine."Tax Amount";
                          IF TempPurchLine."Currency Code" = '' THEN
                            PostedStrOrderLineDetails."Amount (LCY)" := TempPurchLine."Tax Amount"
                          ELSE
                            PostedStrOrderLineDetails."Amount (LCY)" := PurchLine."Tax Amount";
                          PostedStrOrderLineDetails.MODIFY;
                        END;
                      END;
                    END;
                  END;
                  IF (PurchRcptHeader."No." <> '') AND (PurchLine."Receipt No." = '') AND
                     NOT RoundingLineInserted AND NOT TempPurchLine."Prepayment Line"
                  THEN BEGIN
                    // Insert receipt line
                    PurchRcptLine.InitFromPurchLine(PurchRcptHeader,TempPurchLine);
                    TempPurchLine2 := TempPurchLine;
                    IF PurchLine."Qty. to Invoice" = 0 THEN
                      DivideExciseElements(0,PurchLine.Quantity,PurchRcptLine)
                    ELSE
                      DivideExciseElements(0,PurchLine."Qty. to Invoice",PurchRcptLine);
                    PurchRcptLine."BED Amount" := ABS(TempPurchLine."BED Amount");
                    PurchRcptLine."ADET Amount" := ABS(TempPurchLine."ADET Amount");
                    PurchRcptLine."ADE Amount" := ABS(TempPurchLine."ADE Amount");
                    PurchRcptLine."AED(GSI) Amount" := ABS(TempPurchLine."AED(GSI) Amount");
                    PurchRcptLine."AED(TTA) Amount" := ABS(TempPurchLine."AED(TTA) Amount");
                    PurchRcptLine."CESS Amount" := ABS(TempPurchLine."CESS Amount");
                    PurchRcptLine."NCCD Amount" := ABS(TempPurchLine."NCCD Amount");
                    PurchRcptLine."SAED Amount" := ABS(TempPurchLine."SAED Amount");
                    PurchRcptLine."SED Amount" := ABS(TempPurchLine."SED Amount");
                    PurchRcptLine."eCess Amount" := ABS(TempPurchLine."eCess Amount");
                    PurchRcptLine."SHE Cess Amount" := ABS(TempPurchLine."SHE Cess Amount");
                    PurchRcptLine."ADC VAT Amount" := ABS(TempPurchLine."ADC VAT Amount");
                    PurchRcptLine."Excise Amount" := ABS(TempPurchLine."Excise Amount");
                    PurchRcptLine."Custom eCess Amount" := ABS(TempPurchLine."Custom eCess Amount");
                    PurchRcptLine."Custom SHECess Amount" := ABS(TempPurchLine."Custom SHECess Amount");
                    IF (PurchLine.Type = PurchLine.Type::Item) AND (TempPurchLine."Qty. to Receive" <> 0) THEN BEGIN
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.GetWhseRcptLine(
                          WhseRcptLine,WhseRcptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseRcptLine.TESTFIELD("Qty. to Receive",PurchRcptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseShip THEN BEGIN
                        WhseShptLine.GetWhseShptLine(
                          WhseShptLine,WhseShptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseShptLine.TESTFIELD("Qty. to Ship",-PurchRcptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;

                      PurchRcptLine."Item Rcpt. Entry No." :=
                        InsertRcptEntryRelation(PurchRcptLine); // ItemLedgShptEntryNo
                      PurchRcptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
                    END;
                    CheckExciseRefund(TempPurchLine);
                    PurchRcptLine.INSERT;
                    IF (Structure <> '') AND ExciseExistInStructure AND
                       (TempPurchLine."Excise Accounting Type" = TempPurchLine."Excise Accounting Type"::"With CENVAT") AND
                       (TempPurchLine."Excise Loading on Inventory" = FALSE)
                    THEN BEGIN
                      IF ((TempPurchLine.Type = TempPurchLine.Type::Item) AND
                          (TempPurchLine."Qty. to Receive" <> 0))
                      THEN BEGIN
                        IF TempPurchLine."Capital Item" THEN BEGIN
                          ExciseInsertRGRegister.InsertRG23CPartIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader);
                          IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN
                            ExciseInsertRGRegister.InsertRG23CPartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                        END ELSE BEGIN
                          ExciseInsertRGRegister.InsertRG23APartIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader);
                          IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN
                            ExciseInsertRGRegister.InsertRG23APartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                        END;
                      END;
                      IF ((TempPurchLine.Type = TempPurchLine.Type::"Fixed Asset") AND
                          (TempPurchLine."Qty. to Receive" <> 0))
                      THEN BEGIN
                        ExciseInsertRGRegister.InsertRG23CPartIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader);
                        IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN
                          ExciseInsertRGRegister.InsertRG23CPartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                      END;
                      IF (((TempPurchLine.Type = TempPurchLine.Type::"Charge (Item)")
                           OR (TempPurchLine.Type = TempPurchLine.Type::"G/L Account")) AND
                          (TempPurchLine."Qty. to Receive" <> 0))
                      THEN BEGIN
                        IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN BEGIN
                          IF TempPurchLine."Capital Item" THEN
                            ExciseInsertRGRegister.InsertRG23CPartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE)
                          ELSE
                            ExciseInsertRGRegister.InsertRG23APartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                        END;
                      END;
                    END;
                    IF Invoice AND (PurchRcptLine.Quantity <> 0) THEN
                      RestoreExciseForInvoice(PurchRcptLine.Quantity,TempPurchLine."Qty. to Invoice");
                    IF Invoice AND (PurchRcptLine.Quantity = 0) THEN
                      RestoreExciseForInvoicewithRec;
                  END;

                  IF (ReturnShptHeader."No." <> '') AND (PurchLine."Return Shipment No." = '') AND
                     NOT RoundingLineInserted
                  THEN BEGIN
                    // Insert return shipment line
                    ReturnShptLine.InitFromPurchLine(ReturnShptHeader,TempPurchLine);
                    TempPurchLine2 := TempPurchLine;
                    IF PurchLine."Qty. to Invoice" = 0 THEN
                      DivideExciseElements(1,PurchLine.Quantity,PurchRcptLine)
                    ELSE
                      DivideExciseElements(1,PurchLine."Qty. to Invoice",PurchRcptLine);
                    ReturnShptLine."BED Amount" := ABS(TempPurchLine."BED Amount");
                    ReturnShptLine."ADET Amount" := ABS(TempPurchLine."ADET Amount");
                    ReturnShptLine."ADE Amount" := ABS(TempPurchLine."ADE Amount");
                    ReturnShptLine."AED(GSI) Amount" := ABS(TempPurchLine."AED(GSI) Amount");
                    ReturnShptLine."AED(TTA) Amount" := ABS(TempPurchLine."AED(TTA) Amount");
                    ReturnShptLine."CESS Amount" := ABS(TempPurchLine."CESS Amount");
                    ReturnShptLine."NCCD Amount" := ABS(TempPurchLine."NCCD Amount");
                    ReturnShptLine."SAED Amount" := ABS(TempPurchLine."SAED Amount");
                    ReturnShptLine."SED Amount" := ABS(TempPurchLine."SED Amount");
                    ReturnShptLine."eCess Amount" := ABS(TempPurchLine."eCess Amount");
                    ReturnShptLine."SHE Cess Amount" := ABS(TempPurchLine."SHE Cess Amount");
                    ReturnShptLine."ADC VAT Amount" := ABS(TempPurchLine."ADC VAT Amount");
                    ReturnShptLine."Excise Amount" := ABS(TempPurchLine."Excise Amount");
                    ReturnShptLine."Custom eCess Amount" := ABS(TempPurchLine."Custom eCess Amount");
                    ReturnShptLine."Custom SHECess Amount" := ABS(TempPurchLine."Custom SHECess Amount");
                    IF (PurchLine.Type = PurchLine.Type::Item) AND (TempPurchLine."Return Qty. to Ship" <> 0) THEN BEGIN
                      IF WhseShip THEN BEGIN
                        WhseShptLine.GetWhseShptLine(
                          WhseShptLine,WhseShptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseShptLine.TESTFIELD("Qty. to Ship",ReturnShptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.GetWhseRcptLine(
                          WhseRcptLine,WhseRcptHeader."No.",DATABASE::"Purchase Line",
                          PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
                        WhseRcptLine.TESTFIELD("Qty. to Receive",-ReturnShptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;

                      ReturnShptLine."Item Shpt. Entry No." :=
                        InsertReturnEntryRelation(ReturnShptLine); // ItemLedgShptEntryNo;
                      ReturnShptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
                    END;
                    ReturnShptLine.INSERT;
                    CheckCertificateOfSupplyStatus(ReturnShptHeader,ReturnShptLine);
                    DetailRG23D.RESET;
                    DetailRG23D.SETRANGE("Document Type",PurchLine."Document Type");
                    DetailRG23D.SETRANGE("Order No.",PurchLine."Document No.");
                    DetailRG23D.SETRANGE("Line No.",PurchLine."Line No.");
                    DetailRG23D.SETRANGE("Document No.",'');
                    IF DetailRG23D.FINDSET THEN
                      REPEAT
                        DetailRG23D."Document No." := ReturnShptLine."Document No.";
                        DetailRG23D."Document Line No." := ReturnShptLine."Line No.";
                        DetailRG23D.MODIFY;
                      UNTIL DetailRG23D.NEXT = 0;
                    IF (Structure <> '') AND ExciseExistInStructure AND
                       (TempPurchLine."Excise Accounting Type" = TempPurchLine."Excise Accounting Type"::"With CENVAT") AND
                       (TempPurchLine."Excise Loading on Inventory" = FALSE)
                    THEN BEGIN
                      IF ((TempPurchLine.Type = TempPurchLine.Type::Item) AND
                          (TempPurchLine."Return Qty. to Ship" <> 0))
                      THEN BEGIN
                        IF TempPurchLine."Capital Item" THEN BEGIN
                          ExciseInsertRGRegister.InsertRG23CPartIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader);
                          IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN
                            ExciseInsertRGRegister.InsertRG23CPartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                        END ELSE BEGIN
                          ExciseInsertRGRegister.InsertRG23APartIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader);
                          IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN
                            ExciseInsertRGRegister.InsertRG23APartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                        END;
                      END;
                      IF ((TempPurchLine.Type = TempPurchLine.Type::"Fixed Asset") AND
                          (TempPurchLine."Return Qty. to Ship" <> 0))
                      THEN BEGIN
                        ExciseInsertRGRegister.InsertRG23CPartIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader);
                        IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN
                          ExciseInsertRGRegister.InsertRG23CPartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                      END;
                      IF (((TempPurchLine.Type = TempPurchLine.Type::"Charge (Item)")
                           OR (TempPurchLine.Type = TempPurchLine.Type::"G/L Account")) AND
                          (TempPurchLine."Return Qty. to Ship" <> 0))
                      THEN BEGIN
                        IF TempPurchLine."Amount Including Excise" - TempPurchLine."Excise Base Amount" <> 0 THEN BEGIN
                          IF TempPurchLine."Capital Item" THEN
                            ExciseInsertRGRegister.InsertRG23CPartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE)
                          ELSE
                            ExciseInsertRGRegister.InsertRG23APartIIPurchase(TempPurchLine,PurchRcptHeader,ReturnShptHeader,FALSE);
                        END;
                      END;
                    END;
                    IF Invoice AND (ReturnShptLine.Quantity <> 0) THEN
                      RestoreExciseForInvoice(ReturnShptLine.Quantity,TempPurchLine."Qty. to Invoice");
                    IF Invoice AND (ReturnShptLine.Quantity = 0) THEN
                      RestoreExciseForInvoicewithRec;
                  END;
                  IF Invoice THEN BEGIN
                    TempPurchLineSource := TempPurchLine;
                    TempPurchLineSource.INSERT;
                    RoundExciseAmountsOnPurchLine(TempPurchLineSource);
                    // Insert invoice line or credit memo line
                    IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                      PurchInvLine.InitFromPurchLine(PurchInvHeader,TempPurchLineSource);
                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                        IF (PurchLine."Receipt No." <> '') AND (PurchLine."Receipt Line No." <> 0) THEN BEGIN
                          PurchInvLine."Receipt Document No." := PurchLine."Receipt No.";
                          PurchInvLine."Receipt Document Line No." := PurchLine."Receipt Line No.";
                        END ELSE BEGIN
                          PurchInvLine."Receipt Document No." := PurchRcptLine."Document No.";
                          PurchInvLine."Receipt Document Line No." := PurchRcptLine."Line No.";
                        END;
                      END;
                      IF ("Document Type" = "Document Type"::Order) AND Invoice AND Receive THEN BEGIN
                        PurchInvLine."Receipt Document No." := PurchRcptLine."Document No.";
                        PurchInvLine."Receipt Document Line No." := PurchRcptLine."Line No.";
                      END;
                      CheckExciseRefund(TempPurchLine);
                      PurchInvLine.INSERT;
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchInvLine.RowID1,1,100));
                      CreatePostedDeferralScheduleFromPurchDoc(TempPurchLine,PurchInvLine.GetDocumentType,
                        PurchInvHeader."No.",PurchInvLine."Line No.",PurchInvHeader."Posting Date");
                    END ELSE BEGIN // Credit Memo
                      PurchCrMemoLine.InitFromPurchLine(PurchCrMemoHeader,TempPurchLineSource);
                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                        IF (PurchLine."Return Shipment No." <> '') AND (PurchLine."Return Shipment Line No." <> 0) THEN BEGIN
                          PurchCrMemoLine."Ret. Shipment No." := PurchLine."Return Shipment No.";
                          PurchCrMemoLine."Ret. Shipment Line No." := PurchLine."Return Shipment Line No.";
                        END ELSE BEGIN
                          PurchCrMemoLine."Ret. Shipment No." := ReturnShptLine."Document No.";
                          PurchCrMemoLine."Ret. Shipment Line No." := ReturnShptLine."Line No.";
                        END;
                      END;
                      IF ("Document Type" = "Document Type"::"Return Order") AND Invoice AND Ship THEN BEGIN
                        PurchCrMemoLine."Ret. Shipment No." := ReturnShptLine."Document No.";
                        PurchCrMemoLine."Ret. Shipment Line No." := ReturnShptLine."Line No.";
                      END;
                      CheckExciseRefund(TempPurchLine);
                      PurchCrMemoLine."Excise Amount" := -PurchCrMemoLine."Excise Amount";
                      PurchCrMemoLine."BED Amount" := -PurchCrMemoLine."BED Amount";
                      PurchCrMemoLine."ADET Amount" := -PurchCrMemoLine."ADET Amount";
                      PurchCrMemoLine."ADE Amount" := -PurchCrMemoLine."ADE Amount";
                      PurchCrMemoLine."AED(GSI) Amount" := -PurchCrMemoLine."AED(GSI) Amount";
                      PurchCrMemoLine."AED(TTA) Amount" := -PurchCrMemoLine."AED(TTA) Amount";
                      PurchCrMemoLine."CESS Amount" := -PurchCrMemoLine."CESS Amount";
                      PurchCrMemoLine."NCCD Amount" := -PurchCrMemoLine."NCCD Amount";
                      PurchCrMemoLine."SAED Amount" := -PurchCrMemoLine."SAED Amount";
                      PurchCrMemoLine."SED Amount" := -PurchCrMemoLine."SED Amount";
                      PurchCrMemoLine."eCess Amount" := -PurchCrMemoLine."eCess Amount";
                      PurchCrMemoLine."SHE Cess Amount" := -PurchCrMemoLine."SHE Cess Amount";
                      PurchCrMemoLine."ADC VAT Amount" := -PurchCrMemoLine."ADC VAT Amount";
                      PurchCrMemoLine."Custom eCess Amount" := -PurchCrMemoLine."Custom eCess Amount";
                      PurchCrMemoLine."Custom SHECess Amount" := -PurchCrMemoLine."Custom SHECess Amount";
                      PurchCrMemoLine."Amount Including Excise" := -PurchCrMemoLine."Amount Including Excise";
                      PurchCrMemoLine."Excise Base Amount" := -PurchCrMemoLine."Excise Base Amount";
                      PurchCrMemoLine.INSERT;
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,COPYSTR(PurchCrMemoLine.RowID1,1,100));
                      CreatePostedDeferralScheduleFromPurchDoc(TempPurchLine,PurchCrMemoLine.GetDocumentType,
                        PurchCrMemoHeader."No.",PurchCrMemoLine."Line No.",PurchCrMemoHeader."Posting Date");
                    END;
                  END;

                  IF NOT JobItem THEN
                    JobItem := (PurchLine.Type = PurchLine.Type::Item) AND (PurchLine."Job No." <> '');

                  IF RoundingLineInserted THEN
                    LastLineRetrieved := TRUE
                  ELSE BEGIN
                    BiggestLineNo := MAX(BiggestLineNo,PurchLine."Line No.");
                    LastLineRetrieved := GetNextPurchline(PurchLine);
                    IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                      InvoiceRounding(FALSE,BiggestLineNo);
                  END;
                UNTIL LastLineRetrieved;

              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                ReverseAmount(TotalPurchLine);
                ReverseAmount(TotalPurchLineLCY);
              END;
              AmountAdjusted := TotalPurchLine."Tax Amount" + TotalVatablePurchaseTaxAmount - TotalPurchaseTaxAmount;
              // Post combine shipment of sales order
              PostCombineSalesOrderShipment(SalesSetup,PurchHeader,SalesCommentLine);

              IF Invoice THEN BEGIN
                // Post purchase and VAT to G/L entries from buffer
                LineCount := 0;
                IF InvPostingBuffer[1].FIND('+') THEN
                  REPEAT
                    LineCount := LineCount + 1;
                    IF GUIALLOWED THEN
                      Window.UPDATE(3,LineCount);

                    CASE InvPostingBuffer[1]."VAT Calculation Type" OF
                      InvPostingBuffer[1]."VAT Calculation Type"::"Reverse Charge VAT":
                        BEGIN
                          VATPostingSetup.GET(
                            InvPostingBuffer[1]."VAT Bus. Posting Group",InvPostingBuffer[1]."VAT Prod. Posting Group");
                          InvPostingBuffer[1]."VAT Amount" :=
                            ROUND(
                              InvPostingBuffer[1]."VAT Base Amount" * (1 - "VAT Base Discount %" / 100) * VATPostingSetup."VAT %" / 100);
                          InvPostingBuffer[1]."VAT Amount (ACY)" :=
                            ROUND(
                              InvPostingBuffer[1]."VAT Base Amount (ACY)" * (1 - "VAT Base Discount %" / 100) *
                              VATPostingSetup."VAT %" / 100,Currency."Amount Rounding Precision");
                        END;
                      InvPostingBuffer[1]."VAT Calculation Type"::"Sales Tax":
                        IF InvPostingBuffer[1]."Use Tax" THEN BEGIN
                          InvPostingBuffer[1]."VAT Amount" :=
                            ROUND(
                              SalesTaxCalculate.CalculateTax(
                                InvPostingBuffer[1]."Tax Area Code",InvPostingBuffer[1]."Tax Group Code",
                                InvPostingBuffer[1]."Tax Liable","Posting Date",
                                InvPostingBuffer[1].Amount,
                                InvPostingBuffer[1].Quantity,0));
                          IF GLSetup."Additional Reporting Currency" <> '' THEN
                            InvPostingBuffer[1]."VAT Amount (ACY)" :=
                              CurrExchRate.ExchangeAmtLCYToFCY(
                                "Posting Date",GLSetup."Additional Reporting Currency",
                                InvPostingBuffer[1]."VAT Amount",0);
                        END;
                    END;
                    SetupGenJnlLine(PurchHeader);
                    GenJnlPostLine.ExecuteTaxEntryInsertion(ExecuteDetailTaxEntryInsertion(InvPostingBuffer[1]."Tax Group Code"));
                    GLEntryNo := RunGenJnlPostLine(GenJnlLine);
                    GenJnlPostLine.ExecuteTaxEntryInsertion(FALSE);

                    IF (InvPostingBuffer[1]."Job No." <> '') AND
                       (InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"G/L Account")
                    THEN
                      JobPostLine.PostPurchaseGLAccounts(InvPostingBuffer[1],GLEntryNo);
                  UNTIL InvPostingBuffer[1].NEXT(-1) = 0;
                InvPostingBuffer[1].DELETEALL;
                // Check External Document number
                IF PurchSetup."Ext. Doc. No. Mandatory" OR
                   (GenJnlLineExtDocNo <> '')
                THEN
                  CheckExternalDocumentNumber(VendLedgEntry,PurchHeader);
                IF ExcisePostingBuffer[1].FIND('+') THEN
                  REPEAT
                    GenJnlLine.INIT;
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine."Document Date" := "Document Date";
                    GenJnlLine.Description := "Posting Description";
                    GenJnlLine."Reason Code" := "Reason Code";
                    GenJnlLine."Document Type" := GenJnlLineDocType;
                    GenJnlLine."Document No." := GenJnlLineDocNo;
                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    GenJnlLine."Account No." := ExcisePostingBuffer[1]."Item No.";
                    GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                    GenJnlLine."Item No." := ExcisePostingBuffer[1]."Item No.";
                    GenJnlLine."System-Created Entry" := ExcisePostingBuffer[1]."System-Created Entry";
                    GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                    IF ExcisePostingBuffer[1].Type = ExcisePostingBuffer[1].Type::"Fixed Asset" THEN
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset"
                    ELSE
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    IF ExcisePostingBuffer[1].Type = ExcisePostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
                      IF ExcisePostingBuffer[1]."FA Posting Type" =
                         ExcisePostingBuffer[1]."FA Posting Type"::"Acquisition Cost"
                      THEN
                        GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::"Acquisition Cost";
                      IF ExcisePostingBuffer[1]."FA Posting Type" =
                         ExcisePostingBuffer[1]."FA Posting Type"::Maintenance
                      THEN
                        GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Maintenance;
                      GenJnlLine."FA Posting Date" := ExcisePostingBuffer[1]."FA Posting Date";
                      GenJnlLine."Depreciation Book Code" := ExcisePostingBuffer[1]."Depreciation Book Code";
                      GenJnlLine."Salvage Value" := ExcisePostingBuffer[1]."Salvage Value";
                      GenJnlLine."Depr. until FA Posting Date" := ExcisePostingBuffer[1]."Depr. until FA Posting Date";
                      GenJnlLine."Depr. Acquisition Cost" := ExcisePostingBuffer[1]."Depr. Acquisition Cost";
                      GenJnlLine."Maintenance Code" := ExcisePostingBuffer[1]."Maintenance Code";
                      GenJnlLine."Insurance No." := ExcisePostingBuffer[1]."Insurance No.";
                      GenJnlLine."Budgeted FA No." := ExcisePostingBuffer[1]."Budgeted FA No.";
                      GenJnlLine."Duplicate in Depreciation Book" := ExcisePostingBuffer[1]."Duplicate in Depreciation Book";
                      GenJnlLine."Use Duplication List" := ExcisePostingBuffer[1]."Use Duplication List";
                    END;
                    GenJnlLine."Excise Bus. Posting Group" := ExcisePostingBuffer[1]."Excise Bus. Posting Group";
                    GenJnlLine."Excise Prod. Posting Group" := ExcisePostingBuffer[1]."Excise Prod. Posting Group";
                    GenJnlLine."Excise Base Amount" := ExcisePostingBuffer[1]."Excise Base Amount";
                    GenJnlLine."BED %" := ExcisePostingBuffer[1]."BED %";
                    GenJnlLine."Amount Including Excise" := ExcisePostingBuffer[1]."Amount Including Excise";
                    GenJnlLine."Excise Amount" := ExcisePostingBuffer[1]."Excise Amount";
                    GenJnlLine."E.C.C. No." := ExcisePostingBuffer[1]."E.C.C. No.";
                    GenJnlLine."Source Curr. Excise Amount" := ExcisePostingBuffer[1]."Excise Amount (ACY)";
                    GenJnlLine."Excise Refund" := ExcisePostingBuffer[1]."Excise Refund";

                    TaxJnlLine.RESET;
                    TaxJnlLine.SETRANGE("Journal Template Name",'');
                    TaxJnlLine.SETRANGE("Journal Batch Name",'');
                    TaxJnlLine.SETRANGE("Document No.",GenJnlLine."Document No.");
                    IF NOT TaxJnlLine.FINDFIRST THEN BEGIN
                      TaxJnlLine."Journal Template Name" := '';
                      TaxJnlLine."Journal Batch Name" := '';
                      TaxJnlLine."Line No." := 0;
                      TaxJnlLine."Document No." := GenJnlLine."Document No.";
                      TaxJnlLine.INSERT;
                    END;

                    TaxJnlLine."BED Amount" := ExcisePostingBuffer[1]."BED Amount";
                    TaxJnlLine."AED(GSI) Amount" := ExcisePostingBuffer[1]."AED(GSI) Amount";
                    TaxJnlLine."AED(TTA) Amount" := ExcisePostingBuffer[1]."AED(TTA) Amount";
                    TaxJnlLine."SED Amount" := ExcisePostingBuffer[1]."SED Amount";
                    TaxJnlLine."SAED Amount" := ExcisePostingBuffer[1]."SAED Amount";
                    TaxJnlLine."CESS Amount" := ExcisePostingBuffer[1]."CESS Amount";
                    TaxJnlLine."NCCD Amount" := ExcisePostingBuffer[1]."NCCD Amount";
                    TaxJnlLine."eCess Amount" := ExcisePostingBuffer[1]."eCess Amount";
                    TaxJnlLine."SHE Cess Amount" := ExcisePostingBuffer[1]."SHE Cess Amount";
                    TaxJnlLine."ADET Amount" := ExcisePostingBuffer[1]."ADET Amount";
                    TaxJnlLine."ADE Amount" := ExcisePostingBuffer[1]."ADE Amount";
                    TaxJnlLine."ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount";
                    TaxJnlLine."Excise Amount" := ExcisePostingBuffer[1]."Excise Amount";
                    TaxJnlLine.MODIFY;

                    GenJnlLine."ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount";
                    GenJnlLine."Source Curr. ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount (ACY)";
                    GenJnlLine.CVD := ExcisePostingBuffer[1].CVD;
                    GenJnlLine."BED Calculation Type" := ExcisePostingBuffer[1]."BED Calculation Type";
                    GenJnlLine."Source Code" := SrcCode;
                    GenJnlLine."Bill-to/Pay-to No." := "Buy-from Vendor No.";
                    GenJnlLine."Excise Posting" := TRUE;
                    GenJnlLine.Trading := Trading;
                    IF NOT GenJnlLine.Trading THEN
                      GenJnlLine."Capital Item" := ExcisePostingBuffer[1]."Capital Item";
                    GenJnlLine.Quantity := ExcisePostingBuffer[1].Quantity;
                    GenJnlLine."Shortcut Dimension 1 Code" := ExcisePostingBuffer[1]."Global Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := ExcisePostingBuffer[1]."Global Dimension 2 Code";
                    GenJnlLine."Dimension Set ID" := ExcisePostingBuffer[1]."Dimension Set ID";
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    IF ExcisePostingBuffer[1].Type = ExcisePostingBuffer[1].Type::Item THEN
                      GenJnlLine."Product Type" := GenJnlLine."Product Type"::Item
                    ELSE
                      GenJnlLine."Product Type" := GenJnlLine."Product Type"::FA;
                    RunGenJnlPostLine(GenJnlLine);
                    TaxJnlLine.DELETE;
                  UNTIL ExcisePostingBuffer[1].NEXT(-1) = 0;
                ExcisePostingBuffer[1].DELETEALL;
                ExcisePostingBuffer[1].DELETEALL;
                // Post GST to G/L entries from GST posting buffer.. GST Purch
                IF GSTPostingBuffer[1].FINDLAST THEN
                  REPEAT
                    FillGenJnlLineFromGSTBuffer(
                      GenJnlLine,GSTPostingBuffer[1],PurchHeader,GenJnlLineDocType,GenJnlLineDocNo,GSTCreditAmount);
                    GSTManagement.InsertGSTLedgerEntryPurchase(
                      GSTPostingBuffer[1],PurchLine,PurchHeader,GenJnlPostLine.GetNextTransactionNo,GenJnlLineDocType,
                      GenJnlLineDocNo,"Currency Code","Currency Factor",SrcCode);
                    IF GenJnlLine.Amount <> 0 THEN
                      GLEntryNo := RunGenJnlPostLine(GenJnlLine);
                    IF ("GST Vendor Type" IN ["GST Vendor Type"::Import, "GST Vendor Type"::SEZ]) AND (GSTPostingBuffer[1]."Custom Duty Amount" <> 0)
                      AND (NOT CustomDutyBase) THEN BEGIN
                        CustomDutyBase := TRUE;
                        GSTPostingBuffer[1]."Custom Duty Amount" := GetCustomDutyAmount(PurchHeader);
                        FillGenJnlLineForCustomDuty(
                          GenJournalLineCustomDuty,PurchHeader,GSTPostingBuffer[1],GenJnlLineDocType,GenJnlLineDocNo);
                        RunGenJnlPostLine(GenJournalLineCustomDuty);
                      END;
                  UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
                  PurchaseLine2.RESET;
                  PurchaseLine2.SETRANGE("Document Type","Document Type");
                  PurchaseLine2.SETRANGE("Document No.","No.");
                  PurchaseLine2.SETFILTER(Type,'<>%1',PurchaseLine2.Type::" ");
                  PurchaseLine2.SETFILTER("GST Base Amount",'<>%1',0);
                  PurchaseLine2.SETFILTER("Qty. to Invoice",'<>%1',0);
                  IF PurchaseLine2.FINDSET THEN
                    REPEAT
                      GSTManagement.InsertDetailedGSTLedgEntryPurchase(
                        PurchaseLine2,PurchHeader,
                        GenJnlLineDocNo,GenJnlLineDocType,PurchaseLine2."Qty. to Invoice"/PurchaseLine2.Quantity,
                        GenJnlPostLine.GetNextTransactionNo);
                    UNTIL PurchaseLine2.NEXT = 0;
                GSTPostingBuffer[1].DELETEALL;

                IF TDSInvBuf[1].FIND('+') THEN
                  REPEAT
                    VendNatureofDeduction := TDSInvBuf[1]."TDS Nature of Deduction";
                    VendTDSGroup := TDSInvBuf[1]."TDS Group";
                    IF (TDSInvBuf[1]."TDS Nature of Deduction" <> '') AND (TDSInvBuf[1]."Assessee Code" <> '') THEN BEGIN
                      GenJnlLine.INIT;
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                      GenJnlLine."Posting Date" := "Posting Date";
                      GenJnlLine."Document Date" := "Document Date";
                      GenJnlLine."Document Type" := GenJnlLineDocType;
                      TDSGroup.FindOnDate(TDSInvBuf[1]."TDS Group","Posting Date");
                      TDSGroup.TESTFIELD("TDS Account");
                      GenJnlLine."Account No." := TDSGroup."TDS Account";
                      IF "Currency Code" <> '' THEN BEGIN
                        GenJnlLine.Amount :=
                          -TDSInvBuf[1]."Bal. TDS Including SHE Cess";
                        GenJnlLine."Source Currency Amount" := -TDSInvBuf[1]."Source Currency Amount";
                        GenJnlLine."Amount (LCY)" := GenJnlLine.Amount;
                      END ELSE BEGIN
                        GenJnlLine.Amount := -TDSInvBuf[1]."Total TDS Including SHE Cess";
                        GenJnlLine."Source Currency Amount" := TDSInvBuf[1]."Source Currency Amount";
                        GenJnlLine."Amount (LCY)" := -TDSInvBuf[1]."Total TDS Including SHE Cess";
                      END;
                      GenJnlLine."System-Created Entry" := TRUE;
                      GenJnlLine.Description := "Posting Description";
                      GenJnlLine."Reason Code" := "Reason Code";
                      GenJnlLine."Document No." := GenJnlLineDocNo;
                      GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                      GenJnlLine."Source Currency Code" := "Currency Code";
                      GenJnlLine."Source Code" := SrcCode;
                      GenJnlLine."Party Type" := GenJnlLine."Party Type"::Vendor;
                      GenJnlLine."Party Code" := "Pay-to Vendor No.";
                      GenJnlLine."TDS Nature of Deduction" := TDSInvBuf[1]."TDS Nature of Deduction";
                      GenJnlLine."Nature of Remittance" := TDSInvBuf[1]."Nature of Remittance";
                      GenJnlLine."Act Applicable" := TDSInvBuf[1]."Act Applicable";
                      GenJnlLine."Country Code" := TDSInvBuf[1]."Country Code";
                      GenJnlLine."Assessee Code" := TDSInvBuf[1]."Assessee Code";
                      GenJnlLine."TDS Group" := TDSInvBuf[1]."TDS Group";
                      GenJnlLine."Work Tax Nature Of Deduction" := TDSInvBuf[1]."Work Tax Nature of Deduction";
                      GenJnlLine."Work Tax Group" := TDSInvBuf[1]."Work Tax Group";
                      GenJnlLine."TDS/TCS %" := TDSInvBuf[1]."TDS %";
                      GenJnlLine."TDS/TCS Base Amount" := TDSInvBuf[1]."TDS Base Amount";
                      GenJnlLine."TDS/TCS Amount" := TDSInvBuf[1]."TDS Amount";
                      GenJnlLine."Include Serv. Tax in TDS Base" := TDSBaseIncludesServiceTax;
                      GenJnlLine."TDS Line Amount" := TDSInvBuf[1]."TDS Line Amount";
                      GenJnlLine."Surcharge %" := TDSInvBuf[1]."Surcharge %";
                      GenJnlLine."Surcharge Base Amount" := TDSInvBuf[1]."Surcharge Base Amount";
                      GenJnlLine."Surcharge Amount" := TDSInvBuf[1]."Surcharge Amount";
                      GenJnlLine."TDS/TCS Amt Incl Surcharge" := ABS(TDSInvBuf[1]."TDS Amount Including Surcharge");
                      GenJnlLine."eCESS %" := TDSInvBuf[1]."eCESS %";
                      GenJnlLine."SHE Cess % on TDS/TCS" := TDSInvBuf[1]."SHE Cess %";
                      GenJnlLine."eCESS on TDS/TCS Amount" := TDSInvBuf[1]."eCESS Amount";
                      GenJnlLine."SHE Cess on TDS/TCS Amount" := TDSInvBuf[1]."SHE Cess Amount";
                      GenJnlLine."Total TDS/TCS Incl. SHE CESS" := TDSInvBuf[1]."Total TDS Including SHE Cess";
                      GenJnlLine."Work Tax %" := TDSInvBuf[1]."Work Tax %";
                      GenJnlLine."Work Tax Base Amount" := TDSInvBuf[1]."Work Tax Base Amount";
                      GenJnlLine."Work Tax Amount" := TDSInvBuf[1]."Work Tax Amount";
                      GenJnlLine."Balance Work Tax Amount" := ABS(TDSInvBuf[1]."Work Tax Amount");
                      GenJnlLine."Bal. TDS/TCS Including SHECESS" := ABS(TDSInvBuf[1]."Total TDS Including SHE Cess");
                      GenJnlLine."Temp TDS/TCS Base" := TDSInvBuf[1]."Invoice Amount";
                      GenJnlLine."TDS From Orders" := TRUE;
                      GenJnlLine."Location Code" := "Location Code";
                      GenJnlLine."Gen. Posting Type" := 0;
                      GenJnlLine."Bill-to/Pay-to No." := "Buy-from Vendor No.";
                      GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                      GenJnlLine."Source No." := "Pay-to Vendor No.";
                      GenJnlLine."Posting No. Series" := "Posting No. Series";
                      GenJnlLine."Shortcut Dimension 1 Code" := TDSInvBuf[1]."Global Dimension 1 Code";
                      GenJnlLine."Shortcut Dimension 2 Code" := TDSInvBuf[1]."Global Dimension 2 Code";
                      GenJnlLine."Dimension Set ID" := TDSInvBuf[1]."Dimension Set ID";
                      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                      GenJnlLine."Per Contract" := TDSInvBuf[1]."Per Contract";
                      GenJnlPostLine.RunWithCheck(GenJnlLine);
                    END;
                    IF TDSInvBuf[1]."Work Tax Amount" <> 0 THEN BEGIN
                      GenJnlLine.INIT;
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                      GenJnlLine."Posting Date" := "Posting Date";
                      GenJnlLine."Document Date" := "Document Date";
                      GenJnlLine."Document Type" := GenJnlLineDocType;
                      TDSGroup.FindOnDate(TDSInvBuf[1]."Work Tax Group","Posting Date");
                      TDSGroup.TESTFIELD("TDS Account");
                      GenJnlLine."Party Type" := GenJnlLine."Party Type"::Vendor;
                      GenJnlLine."Party Code" := "Pay-to Vendor No.";
                      GenJnlLine."Account No." := TDSGroup."TDS Account";
                      GenJnlLine.Amount := -TDSInvBuf[1]."Work Tax Amount";
                      GenJnlLine."Work Tax %" := TDSInvBuf[1]."Work Tax %";
                      GenJnlLine."Source Currency Amount" := -TDSInvBuf[1]."Source Curr. Work Tax Amount";
                      GenJnlLine."Amount (LCY)" := -TDSInvBuf[1]."Work Tax Amount";
                      GenJnlLine."System-Created Entry" := TRUE;
                      GenJnlLine.Description := "Posting Description";
                      GenJnlLine."Reason Code" := "Reason Code";
                      GenJnlLine."Document No." := GenJnlLineDocNo;
                      GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                      GenJnlLine."Source Currency Code" := "Currency Code";
                      GenJnlLine."Source Code" := SrcCode;
                      IF TDSInvBuf[1]."TDS Nature of Deduction" = '' THEN BEGIN
                        GenJnlLine."TDS From Orders" := TRUE;
                        GenJnlLine."Work Tax Nature Of Deduction" := TDSInvBuf[1]."Work Tax Nature of Deduction";
                        GenJnlLine."Assessee Code" := TDSInvBuf[1]."Assessee Code";
                        GenJnlLine."Work Tax Group" := TDSInvBuf[1]."Work Tax Group";
                        GenJnlLine."Work Tax %" := TDSInvBuf[1]."Work Tax %";
                        GenJnlLine."Work Tax Base Amount" := TDSInvBuf[1]."Work Tax Base Amount";
                        GenJnlLine."Work Tax Amount" := TDSInvBuf[1]."Work Tax Amount";
                        GenJnlLine."Balance Work Tax Amount" := ABS(TDSInvBuf[1]."Work Tax Amount");
                        GenJnlLine."Include Serv. Tax in TDS Base" := TDSBaseIncludesServiceTax;
                      END;
                      GenJnlLine."Gen. Posting Type" := 0;
                      GenJnlLine."Bill-to/Pay-to No." := "Buy-from Vendor No.";
                      GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                      GenJnlLine."Source No." := "Pay-to Vendor No.";
                      GenJnlLine."Posting No. Series" := "Posting No. Series";
                      GenJnlLine."Shortcut Dimension 1 Code" := TDSInvBuf[1]."Global Dimension 1 Code";
                      GenJnlLine."Shortcut Dimension 2 Code" := TDSInvBuf[1]."Global Dimension 2 Code";
                      GenJnlLine."Dimension Set ID" := TDSInvBuf[1]."Dimension Set ID";
                      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                      GenJnlPostLine.RunWithCheck(GenJnlLine);
                    END;
                  UNTIL TDSInvBuf[1].NEXT(-1) = 0;
                TDSInvBuf[1].DELETEALL;

                LineNo := 10000;
                IF StrPostBuf[1].FIND('+') THEN
                  REPEAT
                    IF StrPostBuf[1].Amount <> 0 THEN BEGIN
                      GenJnlLine.INIT;
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                      GenJnlLine."Posting Date" := "Posting Date";
                      GenJnlLine."Document Date" := "Document Date";
                      GenJnlLine."Document Type" := GenJnlLineDocType;
                      GenJnlLine."Line No." := LineNo;
                      LineNo := LineNo + 10000;
                      GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
                      GenJnlLine."Document No." := GenJnlLineDocNo;
                      GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                      IF StrPostBuf[1]."Payable to Third Party" THEN BEGIN
                        PurchSetup.GET;
                        PurchSetup.TESTFIELD("Third Party Nos.");
                        GenJnlLine."Document No." := NoSeriesMgt.GetNextNo(PurchSetup."Third Party Nos.","Posting Date",TRUE);
                        GenJnlLine."External Document No." := GenJnlLine."Document No.";
                        GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::Vendor;
                        GenJnlLine.VALIDATE("Bal. Account No.",StrPostBuf[1]."Third Party Code");
                        IF "Currency Code" = '' THEN BEGIN
                          GenJnlLine.Amount := StrPostBuf[1].Amount;
                          GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                          GenJnlLine."Amount (LCY)" := GenJnlLine.Amount;
                          GenJnlLine."Currency Factor" := 1
                        END ELSE BEGIN
                          GenJnlLine."Currency Code" := "Currency Code";
                          GenJnlLine.Amount := StrPostBuf[1]."Source Currency Amount";
                          GenJnlLine."Source Currency Amount" := StrPostBuf[1]."Source Currency Amount";
                          GenJnlLine."Amount (LCY)" := StrPostBuf[1].Amount;
                          GenJnlLine."Currency Factor" := "Currency Factor";
                        END;
                        ThirdPartyInvoice.INIT;
                        ThirdPartyInvoice.Type := StrPostBuf[1].Type;
                        ThirdPartyInvoice."Document Type" := StrPostBuf[1]."Document Type";
                        ThirdPartyInvoice."Invoice No." := GenJnlLineDocNo;
                        ThirdPartyInvoice."Third Party Document No." := GenJnlLine."Document No.";
                        ThirdPartyInvoice.Charge := StrPostBuf[1]."Tax/Charge Code";
                        ThirdPartyInvoice."Posting Date" := "Posting Date";
                        ThirdPartyInvoice.INSERT;
                      END ELSE BEGIN
                        IF ("Currency Code" = '') OR StrPostBuf[1].LCY THEN
                          GenJnlLine."Currency Factor" := 1
                        ELSE
                          GenJnlLine."Currency Factor" := "Currency Factor";
                        GenJnlLine.Amount := StrPostBuf[1].Amount;
                        GenJnlLine."Source Currency Amount" := StrPostBuf[1]."Source Currency Amount";
                      END;
                      GenJnlLine."Source Currency Code" := "Currency Code";
                      GenJnlLine."System-Created Entry" := TRUE;
                      GenJnlLine.Description := "Posting Description";
                      GenJnlLine."Reason Code" := "Reason Code";
                      GenJnlLine."Source Currency Code" := "Currency Code";
                      GenJnlLine."Source Code" := SrcCode;
                      GenJnlLine."Bill-to/Pay-to No." := "Buy-from Vendor No.";
                      GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                      GenJnlLine."Source No." := "Pay-to Vendor No.";
                      GenJnlLine."Posting No. Series" := "Posting No. Series";
                      GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                      GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                      GenJnlLine."Dimension Set ID" := "Dimension Set ID";
                      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                      GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                      IF StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header THEN BEGIN
                        GenJnlPostLine.RUN(GenJnlLine);
                      END ELSE
                        RunGenJnlPostLine(GenJnlLine);
                    END;
                    IF StrPostBuf[1]."FA Loading Amount" <> 0 THEN BEGIN
                      GenJnlLine.INIT;
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                      GenJnlLine."Posting Date" := "Posting Date";
                      GenJnlLine."Document Date" := "Document Date";
                      GenJnlLine."Document Type" := GenJnlLineDocType;
                      GenJnlLine."Line No." := LineNo;
                      LineNo := LineNo + 10000;
                      GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
                      GenJnlLine."Document No." := GenJnlLineDocNo;
                      GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                      IF ("Currency Code" = '') OR StrPostBuf[1].LCY THEN
                        GenJnlLine."Currency Factor" := 1
                      ELSE
                        GenJnlLine."Currency Factor" := "Currency Factor";
                      GenJnlLine."Currency Code" := "Currency Code";
                      GenJnlLine.Amount := -StrPostBuf[1]."Src. Curr FA Loading Amount";
                      GenJnlLine."Amount (LCY)" := -StrPostBuf[1]."FA Loading Amount";
                      GenJnlLine."System-Created Entry" := TRUE;
                      GenJnlLine.Description := "Posting Description";
                      GenJnlLine."Reason Code" := "Reason Code";
                      GenJnlLine."Source Currency Code" := "Currency Code";
                      GenJnlLine."Source Code" := SrcCode;
                      GenJnlLine."Bill-to/Pay-to No." := "Buy-from Vendor No.";
                      GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                      GenJnlLine."Source No." := "Pay-to Vendor No.";
                      GenJnlLine."Posting No. Series" := "Posting No. Series";
                      GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                      GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                      GenJnlLine."Dimension Set ID" := "Dimension Set ID";
                      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                      GenJnlLine."Gen. Posting Type" := 0;
                      IF StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header THEN BEGIN
                        GenJnlPostLine.RUN(GenJnlLine);
                      END ELSE
                        RunGenJnlPostLine(GenJnlLine);
                    END;
                  UNTIL StrPostBuf[1].NEXT(-1) = 0;
                StrPostBuf[1].DELETEALL;

                // Post Service Tax
                LoopCount := STaxPostingBuffer[1].COUNT;
                IF STaxPostingBuffer[1].FIND('+') THEN
                  REPEAT
                    IF ((STaxPostingBuffer[1].FullTaxAmount +
                         STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)" > 0) AND
                        ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice])) OR
                       ((STaxPostingBuffer[1].FullTaxAmount +
                         STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)" < 0) AND
                        ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))
                    THEN BEGIN
                      LoopCount := LoopCount - 1;

                      GenJnlLine.INIT;
                      GenJnlLine."Posting Date" := "Posting Date";
                      GenJnlLine."Document Date" := "Document Date";
                      GenJnlLine.Description := "Posting Description";
                      GenJnlLine."Document Type" := GenJnlLineDocType;
                      GenJnlLine."Document No." := GenJnlLineDocNo;
                      GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                      GenJnlLine."Service Tax Entry" := TRUE;
                      GenJnlLine."Service Tax Type" := STaxPostingBuffer[1].Type;
                      GenJnlLine."Service Tax Group Code" := STaxPostingBuffer[1]."Service Tax Group Code";
                      GenJnlLine."Service Tax Registration No." := STaxPostingBuffer[1]."Service Tax Registration No.";
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
                      GenJnlLine."Account No." := STaxPostingBuffer[1]."Party Code";
                      IF AppliedServiceTaxAmountPmt <> AppliedServiceTaxAmountInv THEN BEGIN
                        GenJnlLine."Service Tax Base Amount (LCY)" := STaxPostingBuffer[1]."Service Tax Base Amount";
                        GenJnlLine."Service Tax Amount" := STaxPostingBuffer[1]."Service Tax Amount";
                        GenJnlLine."Service Tax eCess Amount" := STaxPostingBuffer[1]."Service Tax eCess Amount";
                        GenJnlLine."Service Tax SHE Cess Amount" := STaxPostingBuffer[1]."Service Tax SHE Cess Amount";
                        GenJnlLine."Service Tax SBC %" := STaxPostingBuffer[1]."Service Tax SBC %";
                        GenJnlLine."Service Tax SBC Amount" := STaxPostingBuffer[1]."Service Tax SBC Amount";
                        GenJnlLine."KK Cess%" := STaxPostingBuffer[1]."KK Cess%";
                        GenJnlLine."KK Cess Amount" := STaxPostingBuffer[1]."KK Cess Amount";
                      END;
                      GenJnlLine."Tot. Serv Tax Amount (Intm)" := STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)";
                      GenJnlLine."Service Tax SBC Amount (Intm)" := STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)";
                      GenJnlLine."KK Cess Amount (Intm)" := STaxPostingBuffer[1]."KK Cess Amount (Intm)";
                      GenJnlLine.PoT := PoT;
                      IF GenJnlLine.PoT OR HasServiceTax(PurchHeader) THEN
                        GenJnlLine."S.T From Order" := TRUE;
                      GenJnlLine."E.C.C. No." := STaxPostingBuffer[1]."Location E.C.C. No.";
                      GenJnlLine."Service Type (Rev. Chrg.)" := "Service Type (Rev. Chrg.)";
                      GenJnlLine."Consignment Note No." := "Consignment Note No.";
                      GenJnlLine."Declaration Form (GTA)" := "Declaration Form (GTA)";
                      GenJnlLine."System-Created Entry" := TRUE;
                      GenJnlLine."Shortcut Dimension 1 Code" := STaxPostingBuffer[1]."Global Dimension 1 Code";
                      GenJnlLine."Shortcut Dimension 2 Code" := STaxPostingBuffer[1]."Global Dimension 2 Code";
                      GenJnlLine."Dimension Set ID" := STaxPostingBuffer[1]."Dimension Set ID";
                      GenJnlLine."Location Code" := STaxPostingBuffer[1]."Location Code";
                      GenJnlLine."Input Service Distribution" := "Input Service Distribution";
                      GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                      GenJnlLine."Gen. Posting Type" := 0;
                      GenJnlLine."Source Currency Code" := "Currency Code";
                      GenJnlLine."Currency Factor" := "Currency Factor";
                      GenJnlLine."Service Tax Rounding Type" := "Service Tax Rounding Type";
                      GenJnlLine."Service Tax Rounding Precision" := "Service Tax Rounding Precision";
                      GenJnlLine."S.T From Order" := TRUE;
                      IF (LoopCount = 0) AND (PoT OR NOT HasServiceTax(PurchHeader)) THEN
                        IF AppliedServiceTaxAmountInv <= AppliedServiceTaxAmountPmt THEN BEGIN
                          STaxPostingBuffer[1]."Service Tax Base Amount" := 0;
                          STaxPostingBuffer[1]."Service Tax Amount" := 0;
                          STaxPostingBuffer[1]."Service Tax eCess Amount" := 0;
                          STaxPostingBuffer[1]."Service Tax SHE Cess Amount" := 0;
                          STaxPostingBuffer[1]."Service Tax SBC %" := 0;
                          STaxPostingBuffer[1]."Service Tax SBC Amount" := 0;
                          STaxPostingBuffer[1]."KK Cess%" := 0;
                          STaxPostingBuffer[1]."KK Cess Amount" := 0;
                          GenJnlLine."Service Tax Base Amount (LCY)" := STaxPostingBuffer[1]."Service Tax Base Amount";
                          GenJnlLine."Service Tax Amount" := STaxPostingBuffer[1]."Service Tax Amount";
                          GenJnlLine."Service Tax SBC Amount" := STaxPostingBuffer[1]."Service Tax SBC Amount";
                          GenJnlLine."KK Cess Amount" := STaxPostingBuffer[1]."KK Cess Amount";
                          IF ServiceTaxRoundingAmount = 0 THEN BEGIN
                            GenJnlLine."Service Tax eCess Amount" := STaxPostingBuffer[1]."Service Tax eCess Amount";
                            GenJnlLine."Service Tax SHE Cess Amount" := STaxPostingBuffer[1]."Service Tax SHE Cess Amount";
                          END;
                          IF TotalPurchLineLCY."Service Tax Amount" <> STaxPostingBuffer[1]."S. Tax Amount (Intm)" THEN
                            STaxPostingBuffer[1]."S. Tax Amount (Intm)" :=
                              STaxPostingBuffer[1]."S. Tax Amount (Intm)" +
                              ABS(STaxPostingBuffer[1]."S. Tax Amount (Intm)") -
                              ABS(TotalPurchLineLCY."Service Tax Amount");
                          IF TotalPurchLineLCY."Service Tax eCess Amount" <> STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" THEN
                            STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" :=
                              STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" +
                              ABS(STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)") -
                              ABS(TotalPurchLineLCY."Service Tax eCess Amount");
                          IF TotalPurchLineLCY."Service Tax SHE Cess Amount" <> STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" THEN
                            STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" :=
                              STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" +
                              ABS(STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)") -
                              ABS(TotalPurchLineLCY."Service Tax SHE Cess Amount");
                          IF TotalPurchLineLCY."Service Tax SBC Amount" <> STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)" THEN
                            STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)" :=
                              STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)" +
                              ABS(STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)") -
                              ABS(TotalPurchLineLCY."Service Tax SBC Amount");
                          IF TotalPurchLineLCY."KK Cess Amount" <> STaxPostingBuffer[1]."KK Cess Amount (Intm)" THEN
                            STaxPostingBuffer[1]."KK Cess Amount (Intm)" :=
                              STaxPostingBuffer[1]."KK Cess Amount (Intm)" +
                              ABS(STaxPostingBuffer[1]."KK Cess Amount (Intm)") -
                              ABS(TotalPurchLineLCY."KK Cess Amount");
                          IF TotalPurchLineLCY."Service Tax Base" <> STaxPostingBuffer[1]."S. Tax Base Amount (Intm)" THEN
                            STaxPostingBuffer[1]."S. Tax Base Amount (Intm)" :=
                              STaxPostingBuffer[1]."S. Tax Base Amount (Intm)" +
                              ABS(STaxPostingBuffer[1]."S. Tax Base Amount (Intm)") -
                              ABS(TotalPurchLineLCY."Service Tax Base");

                          STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)" :=
                            ABS(STaxPostingBuffer[1]."S. Tax Amount (Intm)" +
                              STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" +
                              STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)");

                          GenJnlLine."Tot. Serv Tax Amount (Intm)" := STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)";
                          GenJnlLine."Service Tax SBC Amount (Intm)" := STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)";
                          GenJnlLine."KK Cess Amount (Intm)" := STaxPostingBuffer[1]."KK Cess Amount (Intm)";
                        END;
                      STaxPostingBuffer[1]."Amt. Incl. Service Tax (Intm)" :=
                        STaxPostingBuffer[1]."S. Tax Base Amount (Intm)" +
                        STaxPostingBuffer[1].FullTaxAmountIntm + STaxPostingBuffer[1].FullTaxSBCAmountIntm +
                        STaxPostingBuffer[1].KKCessAmountIntm;
                      RunGenJnlPostLine(GenJnlLine);
                    END;
                    IF (STaxPostingBuffer[1]."Adv Payment Amount" <> 0) AND NOT PoT AND
                      NOT ServTaxMgmt.TryGetSrvTaxRevChgTypePurchHdr(PurchHeader,STReverseChargeSetup)
                    THEN BEGIN
                      InsertSTRecoverable := TRUE;
                      GenJnlLine.INIT;
                      GenJnlLine."Posting Date" := "Posting Date";
                      GenJnlLine."Document Date" := "Document Date";
                      GenJnlLine.Description := "Posting Description";
                      GenJnlLine."Document Type" := GenJnlLineDocType;
                      GenJnlLine."Document No." := GenJnlLineDocNo;
                      GenJnlLine."Service Tax Entry" := TRUE;
                      GenJnlLine."Service Tax Type" := STaxPostingBuffer[1].Type;
                      GenJnlLine."Service Tax Group Code" := STaxPostingBuffer[1]."Service Tax Group Code";
                      GenJnlLine."Service Tax Registration No." := STaxPostingBuffer[1]."Service Tax Registration No.";
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                      GenJnlLine.PoT := PoT;
                      IF ServiceTaxSetup.FindOnDate(STaxPostingBuffer[1]."Service Tax Group Code","Posting Date") THEN
                        GenJnlLine."Account No." := ServiceTaxSetup.GetRecAccNoByISD("Input Service Distribution");
                      IF STaxPostingBuffer[1]."Inv Amount" >= ABS(STaxPostingBuffer[1]."Adv Payment Amount") THEN
                        GenJnlLine.Amount := ABS(STaxPostingBuffer[1]."Adv Payment Amount")
                      ELSE
                        IF STaxPostingBuffer[1]."Inv Amount" <> 0 THEN
                          GenJnlLine.Amount := STaxPostingBuffer[1]."Inv Amount";
                      GenJnlLine."Shortcut Dimension 1 Code" := STaxPostingBuffer[1]."Global Dimension 1 Code";
                      GenJnlLine."Shortcut Dimension 2 Code" := STaxPostingBuffer[1]."Global Dimension 2 Code";
                      GenJnlLine."Dimension Set ID" := STaxPostingBuffer[1]."Dimension Set ID";
                      GenJnlLine."Gen. Posting Type" := 0;
                      IF HasServiceTax(PurchHeader) THEN
                        GenJnlLine."S.T From Order" := TRUE;
                      IF GenJnlLine.Amount <> 0 THEN
                        RunGenJnlPostLine(GenJnlLine);
                    END;
                    IF PoT THEN BEGIN
                      GenJnlPostLine.GetTransactionNo(TransactionNo);
                      ServTaxMgmt.SetTransactionNo(TransactionNo);
                      IF AppliedDocIsSTPayment THEN
                        ServTaxMgmt.InitVendServiceTaxApplOnline(STaxPostingBuffer[1]);
                    END;
                  UNTIL STaxPostingBuffer[1].NEXT(-1) = 0;

                // Post vendor entries
                IF GUIALLOWED THEN
                  Window.UPDATE(4,1);

                IF ServTaxMgmt.TryGetSrvTaxRevChgTypePurchHdr(PurchHeader,STReverseChargeSetup) THEN
                  Percentage := STReverseChargeSetup."Reverse Charge %";

                TotalGSTAmount := 0;
                TotalGSTAmountLCY := 0;
                IF NOT GSTReverseChargeVendType THEN BEGIN
                  TotalGSTAmount := TotalPurchLine."Total GST Amount";
                  IF "Currency Code" <> '' THEN
                    TotalGSTAmountLCY := GSTManagement.RoundTotalGSTAmountQtyFactorCurrency(DocTransactionType::Purchase,
                                          PurchLine."Document Type",PurchLine."Document No.","Currency Code",
                                          "Currency Factor","Posting Date")
                  ELSE
                    TotalGSTAmountLCY := RoundGSTPrecision(TotalPurchLine."Total GST Amount");
                END;
                IF (Percentage <> 100) THEN BEGIN
                  CalcPOTAmtsforRevChgSplit(TotalPurchLine,100 - Percentage);
                  CalcPOTAmtsforRevChgSplit(TotalPurchLineLCY,100 - Percentage);
                  IF CVD AND CVDPayableToThirdParty THEN BEGIN
                    AmountToVendor :=
                      ROUND(TotalPurchLine.Amount + TotalPurchLine."Tax Amount" -
                        TotalPurchLine."Bal. TDS Including SHE CESS" -
                        TotalPurchLine."Work Tax Amount" + SrcCurrAmountAddedtoVendor +
                        TotalPurchLine.FullServiceTaxAmount + TotalPurchLine.FullServiceTaxSBCAmount +
                        TotalPurchLine.KKCessAmount + TotalGSTAmount);
                    AmountToVendorLCY :=
                      ROUND(TotalPurchLineLCY.Amount + TotalPurchLineLCY."Tax Amount" -
                        TotalPurchLineLCY."Bal. TDS Including SHE CESS" -
                        TotalPurchLineLCY."Work Tax Amount" + AmountAddedtoVendor +
                        TotalPurchLineLCY.FullServiceTaxAmount + TotalPurchLineLCY.FullServiceTaxSBCAmount +
                        TotalPurchLineLCY.KKCessAmount + TotalGSTAmountLCY);
                  END ELSE BEGIN
                    AmountToVendor :=
                      ROUND(TotalPurchLine.Amount + TotalPurchLine."Tax Amount" +
                        TotalPurchLine."Excise Amount" - TotalPurchLine."Bal. TDS Including SHE CESS" -
                        TotalPurchLine."Work Tax Amount" + SrcCurrAmountAddedtoVendor +
                        TotalPurchLine.FullServiceTaxAmount + TotalPurchLine.FullServiceTaxSBCAmount +
                        TotalPurchLine.KKCessAmount + TotalGSTAmount);
                    AmountToVendorLCY :=
                      ROUND(TotalPurchLineLCY.Amount + TotalPurchLineLCY."Tax Amount" +
                        TotalPurchLineLCY."Excise Amount" - TotalPurchLineLCY."Bal. TDS Including SHE CESS" -
                        TotalPurchLineLCY."Work Tax Amount" + AmountAddedtoVendor +
                        TotalPurchLineLCY.FullServiceTaxAmount + TotalPurchLineLCY.FullServiceTaxSBCAmount +
                        TotalPurchLineLCY.KKCessAmount + TotalGSTAmountLCY);
                  END;
                END ELSE BEGIN
                  IF CVD AND CVDPayableToThirdParty THEN BEGIN
                    AmountToVendor :=
                      ROUND(TotalPurchLine.Amount + TotalPurchLine."Tax Amount" -
                        TotalPurchLine."Bal. TDS Including SHE CESS" -
                        TotalPurchLine."Work Tax Amount" + SrcCurrAmountAddedtoVendor,Currency."Amount Rounding Precision");
                    AmountToVendorLCY :=
                      ROUND(TotalPurchLineLCY.Amount + TotalPurchLineLCY."Tax Amount" -
                        TotalPurchLineLCY."Bal. TDS Including SHE CESS" -
                        TotalPurchLineLCY."Work Tax Amount" + AmountAddedtoVendor,Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    AmountToVendor :=
                      ROUND(TotalPurchLine.Amount + TotalPurchLine."Tax Amount" +
                        TotalPurchLine."Excise Amount" - TotalPurchLine."Bal. TDS Including SHE CESS" -
                        TotalPurchLine."Work Tax Amount" + SrcCurrAmountAddedtoVendor,Currency."Amount Rounding Precision");
                    AmountToVendorLCY :=
                      ROUND(TotalPurchLineLCY.Amount + TotalPurchLineLCY."Tax Amount" +
                        TotalPurchLineLCY."Excise Amount" - TotalPurchLineLCY."Bal. TDS Including SHE CESS" -
                        TotalPurchLineLCY."Work Tax Amount" + AmountAddedtoVendor,Currency."Amount Rounding Precision");
                  END;
                END;
                IF ServiceTaxRoundingAmount > 0 THEN BEGIN
                  AmountToVendor += ServiceTaxRoundingAmount;
                  IF "Currency Code" = '' THEN
                    AmountToVendorLCY += ServiceTaxRoundingAmount
                  ELSE
                    AmountToVendorLCY += CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                        ServiceTaxRoundingAmount,"Currency Factor");
                END;
                IF "Currency Code" <> '' THEN
                  AmountToVendor := ROUND(AmountToVendor,Currency."Amount Rounding Precision");
                // Delete GST Application Buffer
                GSTApplicationManagement.DeleteGSTApplicationBuffer(
                  DocTransactionType::Purchase,"Buy-from Vendor No.","Document Type","No.");
                PostVendorEntry(
                  PurchHeader,TotalPurchLine,TotalPurchLineLCY,
                  GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,TDSBaseIncludesServiceTax);
                UpdatePurchaseHeader(VendLedgEntry);
                // Balancing account
                IF "Bal. Account No." <> '' THEN BEGIN
                  IF GUIALLOWED THEN
                    Window.UPDATE(5,1);
                  VendLedgEntry.FINDLAST;
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Document Date";
                  GenJnlLine.Description := "Posting Description";
                  GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := "Dimension Set ID";
                  GenJnlLine."Reason Code" := "Reason Code";
                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
                  GenJnlLine."Account No." := "Pay-to Vendor No.";
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
                  ELSE
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
                  GenJnlLine."Document No." := GenJnlLineDocNo;
                  GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                    GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
                  GenJnlLine."Bal. Account No." := "Bal. Account No.";
                  GenJnlLine."Currency Code" := "Currency Code";
                  GenJnlLine.Amount := AmountToVendor +
                    VendLedgEntry."Remaining Pmt. Disc. Possible";
                  GenJnlLine.Correction := Correction;
                  GenJnlLine."Source Currency Code" := "Currency Code";
                  GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                  VendLedgEntry.CALCFIELDS(Amount);
                  IF VendLedgEntry.Amount = 0 THEN
                    GenJnlLine."Amount (LCY)" := AmountToVendorLCY
                  ELSE
                    GenJnlLine."Amount (LCY)" :=
                      AmountToVendorLCY +
                      ROUND(
                        VendLedgEntry."Remaining Pmt. Disc. Possible" /
                        VendLedgEntry."Adjusted Currency Factor");
                  IF "Currency Code" = '' THEN
                    GenJnlLine."Currency Factor" := 1
                  ELSE
                    GenJnlLine."Currency Factor" := "Currency Factor";
                  GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
                  GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
                  GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                  GenJnlLine."Source No." := "Pay-to Vendor No.";
                  GenJnlLine."Source Code" := SrcCode;
                  GenJnlLine."Posting No. Series" := "Posting No. Series";
                  GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
                  GenJnlLine."Allow Zero-Amount Posting" := TRUE;
                  GenJnlLine."Salespers./Purch. Code" := "Purchaser Code";
                  GenJnlLine."Input Service Distribution" := "Input Service Distribution";
                  GenJnlPostLine.RunWithCheck(GenJnlLine);
                END;
              END;
              IF ICGenJnlLineNo > 0 THEN
                PostICGenJnl;
              IF PreviewMode THEN BEGIN
                Window.CLOSE;
                GenJnlPostPreview.Finish;
                ERROR(GenJnlPostPreview.GetPreviewModeErrMessage);
              END;
              MakeInventoryAdjustment(JobItem);
              IF Receive THEN BEGIN
                "Last Receiving No." := "Receiving No.";
                "Receiving No." := '';
              END;
              IF Invoice THEN BEGIN
                "Last Posting No." := "Posting No.";
                "Posting No." := '';
              END;
              IF Ship THEN BEGIN
                "Last Return Shipment No." := "Return Shipment No.";
                "Return Shipment No." := '';
              END;
              IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
                 (NOT EverythingInvoiced)
              THEN BEGIN
                MODIFY;
                InsertTrackingSpecification;

                IF PurchLine.FINDSET THEN
                  REPEAT
                    IF PurchLine.Quantity <> 0 THEN BEGIN
                      IF Receive THEN BEGIN
                        PurchLine."Quantity Received" := PurchLine."Quantity Received" + PurchLine."Qty. to Receive";
                        PurchLine."Qty. Received (Base)" := PurchLine."Qty. Received (Base)" + PurchLine."Qty. to Receive (Base)";
                      END;
                      IF Ship THEN BEGIN
                        PurchLine."Return Qty. Shipped" := PurchLine."Return Qty. Shipped" + PurchLine."Return Qty. to Ship";
                        PurchLine."Return Qty. Shipped (Base)" :=
                          PurchLine."Return Qty. Shipped (Base)" + PurchLine."Return Qty. to Ship (Base)";
                      END;
                      IF Invoice THEN BEGIN
                        IF "Document Type" = "Document Type"::Order THEN BEGIN
                          IF ABS(PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice") >
                             ABS(PurchLine."Quantity Received")
                          THEN BEGIN
                            PurchLine.VALIDATE("Qty. to Invoice",
                              PurchLine."Quantity Received" - PurchLine."Quantity Invoiced");
                            PurchLine."Qty. to Invoice (Base)" :=
                              PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
                          END;
                        END ELSE
                          IF ABS(PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice") >
                             ABS(PurchLine."Return Qty. Shipped")
                          THEN BEGIN
                            PurchLine.VALIDATE("Qty. to Invoice",
                              PurchLine."Return Qty. Shipped" - PurchLine."Quantity Invoiced");
                            PurchLine."Qty. to Invoice (Base)" :=
                              PurchLine."Return Qty. Shipped (Base)" - PurchLine."Qty. Invoiced (Base)";
                          END;

                        PurchLine."Quantity Invoiced" := PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                        PurchLine."Qty. Invoiced (Base)" := PurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                        IF PurchLine."Qty. to Invoice" <> 0 THEN BEGIN
                          PurchLine."Prepmt Amt Deducted" :=
                            PurchLine."Prepmt Amt Deducted" + PurchLine."Prepmt Amt to Deduct";
                          PurchLine."Prepmt VAT Diff. Deducted" :=
                            PurchLine."Prepmt VAT Diff. Deducted" + PurchLine."Prepmt VAT Diff. to Deduct";
                          DecrementPrepmtAmtInvLCY(
                            PurchLine,PurchLine."Prepmt. Amount Inv. (LCY)",PurchLine."Prepmt. VAT Amount Inv. (LCY)");
                          PurchLine."Prepmt Amt to Deduct" :=
                            PurchLine."Prepmt. Amt. Inv." - PurchLine."Prepmt Amt Deducted";
                          PurchLine."Prepmt VAT Diff. to Deduct" := 0;
                        END;
                      END;
                      UpdateBlanketOrderLine(PurchLine,Receive,Ship,Invoice);
                      PurchLine.InitOutstanding;

                      IF WhseHandlingRequired OR
                         (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank)
                      THEN BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                          PurchLine."Return Qty. to Ship" := 0;
                          PurchLine."Return Qty. to Ship (Base)" := 0;
                        END ELSE BEGIN
                          PurchLine."Qty. to Receive" := 0;
                          PurchLine."Qty. to Receive (Base)" := 0;
                        END;
                        PurchLine.InitQtyToInvoice;
                      END ELSE BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN
                          PurchLine.InitQtyToShip
                        ELSE
                          PurchLine.InitQtyToReceive2;
                        IF Subcontracting THEN BEGIN
                          PurchLine."Qty. to Receive" := 0;
                          PurchLine."Qty. to Receive (Base)" := 0;
                        END;
                      END;
                      PurchLine.SetDefaultQuantity;
                      PurchLine.MODIFY;
                    END;
                  UNTIL PurchLine.NEXT = 0;

                UpdateAssocOrder;
                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;
                WhsePurchRelease.Release(PurchHeader);
                UpdateItemChargeAssgnt;
              END ELSE BEGIN
                CASE "Document Type" OF
                  "Document Type"::Invoice:
                    BEGIN
                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                      IF PurchLine.FINDSET THEN
                        REPEAT
                          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                            PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
                            TempPurchLine.GET(
                              TempPurchLine."Document Type"::Order,
                              PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                            IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                              UpdatePurchOrderChargeAssgnt(PurchLine,TempPurchLine);
                            TempPurchLine."Quantity Invoiced" :=
                              TempPurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                            TempPurchLine."Qty. Invoiced (Base)" :=
                              TempPurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                            IF ABS(TempPurchLine."Quantity Invoiced") > ABS(TempPurchLine."Quantity Received") THEN
                              ERROR(
                                Text017,
                                TempPurchLine."Document No.");
                            IF TempPurchLine."Sales Order Line No." <> 0 THEN BEGIN // Drop Shipment
                              SalesOrderLine.GET(
                                SalesOrderLine."Document Type"::Order,
                                TempPurchLine."Sales Order No.",TempPurchLine."Sales Order Line No.");
                              IF ABS(TempPurchLine.Quantity - TempPurchLine."Quantity Invoiced") <
                                 ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
                              THEN
                                ERROR(
                                  Text018 +
                                  Text99000000,
                                  TempPurchLine."Sales Order No.");
                            END;
                            TempPurchLine.InitQtyToInvoice;
                            IF TempPurchLine."Prepayment %" <> 0 THEN BEGIN
                              TempPurchLine."Prepmt Amt Deducted" := TempPurchLine."Prepmt Amt Deducted" + PurchLine."Prepmt Amt to Deduct";
                              TempPurchLine."Prepmt VAT Diff. Deducted" :=
                                TempPurchLine."Prepmt VAT Diff. Deducted" + PurchLine."Prepmt VAT Diff. to Deduct";
                              DecrementPrepmtAmtInvLCY(
                                PurchLine,TempPurchLine."Prepmt. Amount Inv. (LCY)",TempPurchLine."Prepmt. VAT Amount Inv. (LCY)");
                              TempPurchLine."Prepmt Amt to Deduct" :=
                                TempPurchLine."Prepmt. Amt. Inv." - TempPurchLine."Prepmt Amt Deducted";
                              TempPurchLine."Prepmt VAT Diff. to Deduct" := 0;
                            END;
                            TempPurchLine.InitOutstanding;
                            TempPurchLine.MODIFY;
                          END;
                        UNTIL PurchLine.NEXT = 0;
                      InsertTrackingSpecification;

                      PurchLine.SETRANGE("Receipt No.");
                    END;
                  "Document Type"::"Credit Memo":
                    BEGIN
                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                      IF PurchLine.FINDSET THEN
                        REPEAT
                          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                            ReturnShptLine.GET(PurchLine."Return Shipment No.",PurchLine."Return Shipment Line No.");
                            TempPurchLine.GET(
                              TempPurchLine."Document Type"::"Return Order",
                              ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                            IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                              UpdatePurchOrderChargeAssgnt(PurchLine,TempPurchLine);
                            TempPurchLine."Quantity Invoiced" :=
                              TempPurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                            TempPurchLine."Qty. Invoiced (Base)" :=
                              TempPurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                            IF ABS(TempPurchLine."Quantity Invoiced") > ABS(TempPurchLine."Return Qty. Shipped") THEN
                              ERROR(
                                Text041,
                                TempPurchLine."Document No.");
                            TempPurchLine.InitQtyToInvoice;
                            TempPurchLine.InitOutstanding;
                            TempPurchLine.MODIFY;
                          END;
                        UNTIL PurchLine.NEXT = 0;
                      InsertTrackingSpecification;

                      PurchLine.SETRANGE("Return Shipment No.");
                    END;
                  ELSE
                    IF PurchLine.FINDSET THEN
                      REPEAT
                        IF PurchLine."Prepayment %" <> 0 THEN
                          DecrementPrepmtAmtInvLCY(
                            PurchLine,PurchLine."Prepmt. Amount Inv. (LCY)",PurchLine."Prepmt. VAT Amount Inv. (LCY)");
                      UNTIL PurchLine.NEXT = 0;
                END;

                PurchLine.SETFILTER("Blanket Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN
                  REPEAT
                    UpdateBlanketOrderLine(PurchLine,Receive,Ship,Invoice);
                  UNTIL PurchLine.NEXT = 0;
                PurchLine.SETRANGE("Blanket Order Line No.");

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;
                IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND Subcontracting THEN BEGIN
                  MODIFY;
                  InsertTrackingSpecification;
                  SubConOrderLine.SETRANGE("Document Type","Document Type");
                  SubConOrderLine.SETRANGE("Document No.","No.");
                  SubConOrderLine.FIND('-');
                  REPEAT
                    IF SubConOrderLine.Quantity <> 0 THEN BEGIN
                      IF Receive THEN BEGIN
                        SubConOrderLine."Quantity Received" := SubConOrderLine."Quantity Received" + SubConOrderLine."Qty. to Receive";
                        SubConOrderLine."Qty. Received (Base)" := SubConOrderLine."Qty. Received (Base)" +
                          SubConOrderLine."Qty. to Receive (Base)";
                      END;
                      IF Ship THEN BEGIN
                        SubConOrderLine."Return Qty. Shipped" := SubConOrderLine."Return Qty. Shipped" +
                          SubConOrderLine."Return Qty. to Ship";
                        SubConOrderLine."Return Qty. Shipped (Base)" :=
                          SubConOrderLine."Return Qty. Shipped (Base)" + SubConOrderLine."Return Qty. to Ship (Base)";
                      END;
                      IF Invoice THEN BEGIN
                        IF "Document Type" = "Document Type"::Order THEN BEGIN
                          IF ABS(SubConOrderLine."Quantity Invoiced" + SubConOrderLine."Qty. to Invoice") >
                             ABS(SubConOrderLine."Quantity Received")
                          THEN BEGIN
                            SubConOrderLine.VALIDATE("Qty. to Invoice",
                              SubConOrderLine."Quantity Received" - SubConOrderLine."Quantity Invoiced");
                            SubConOrderLine."Qty. to Invoice (Base)" :=
                              SubConOrderLine."Qty. Received (Base)" - SubConOrderLine."Qty. Invoiced (Base)";
                          END;
                        END ELSE
                          IF ABS(SubConOrderLine."Quantity Invoiced" + SubConOrderLine."Qty. to Invoice") >
                             ABS(SubConOrderLine."Return Qty. Shipped")
                          THEN BEGIN
                            SubConOrderLine.VALIDATE("Qty. to Invoice",
                              SubConOrderLine."Return Qty. Shipped" - SubConOrderLine."Quantity Invoiced");
                            SubConOrderLine."Qty. to Invoice (Base)" :=
                              SubConOrderLine."Return Qty. Shipped (Base)" - SubConOrderLine."Qty. Invoiced (Base)";
                          END;
                        SubConOrderLine."Quantity Invoiced" := SubConOrderLine."Quantity Invoiced" + SubConOrderLine."Qty. to Invoice";
                        SubConOrderLine."Qty. Invoiced (Base)" := SubConOrderLine."Qty. Invoiced (Base)" +
                          SubConOrderLine."Qty. to Invoice (Base)";
                      END;
                      SubConOrderLine.InitOutstanding;
                      IF WhseHandlingRequired THEN BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                          SubConOrderLine."Return Qty. to Ship" := 0;
                          SubConOrderLine."Return Qty. to Ship (Base)" := 0;
                        END ELSE BEGIN
                          SubConOrderLine."Qty. to Receive" := 0;
                          SubConOrderLine."Qty. to Receive (Base)" := 0;
                        END;
                        SubConOrderLine.InitQtyToInvoice;
                      END ELSE BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN
                          SubConOrderLine.InitQtyToShip
                        ELSE
                          SubConOrderLine.InitQtyToReceive;
                      END;
                      SubConOrderLine.MODIFY;
                    END;
                  UNTIL SubConOrderLine.NEXT = 0;
                END;
                IF NOT Subcontracting THEN BEGIN
                  ApprovalsMgmt.DeleteApprovalEntries(RECORDID);

                ArchiveManagement.AutoArchivePurchDocument(PurchHeader);

                IF HASLINKS THEN
                  DELETELINKS;
                DELETE;

                ReservePurchLine.DeleteInvoiceSpecFromHeader(PurchHeader);
                IF PurchLine.FINDFIRST THEN
                  REPEAT
                    IF PurchLine."Deferral Code" <> '' THEN
                      DeferralUtilities.RemoveOrSetDeferralSchedule(
                        '',DeferralUtilities.GetPurchDeferralDocType,'','',
                        PurchLine."Document Type",
                        PurchLine."Document No.",
                        PurchLine."Line No.",0,0D,
                        PurchLine.Description,
                        '',
                        TRUE);
                    IF PurchLine.HASLINKS THEN
                      PurchLine.DELETELINKS;
                  UNTIL PurchLine.NEXT = 0;
                PurchLine.DELETEALL;
                DeleteItemChargeAssgnt;

                PurchCommentLine.SETRANGE("Document Type","Document Type");
                PurchCommentLine.SETRANGE("No.","No.");
                IF NOT PurchCommentLine.ISEMPTY THEN
                  PurchCommentLine.DELETEALL;

                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","No.");
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
                StrOrderDetails.SETRANGE("Structure Code",Structure);
                IF StrOrderDetails.FIND('-') THEN
                  StrOrderDetails.DELETEALL;

                StrOrdLineDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrdLineDetails.SETRANGE("Document Type","Document Type");
                StrOrdLineDetails.SETRANGE("Document No.","No.");
                StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
                StrOrdLineDetails.SETRANGE("Structure Code",Structure);
                IF StrOrdLineDetails.FIND('-') THEN
                  StrOrdLineDetails.DELETEALL;

                DefermentBuffer.RESET;
                DefermentBuffer.SETRANGE("Document Type","Document Type");
                DefermentBuffer.SETRANGE("Document No.","No.");
                DefermentBuffer.DELETEALL;

                DetailTaxEntryBuffer.RESET;
                DetailTaxEntryBuffer.SETRANGE("Document Type","Document Type");
                DetailTaxEntryBuffer.SETRANGE("Document No.","No.");
                DetailTaxEntryBuffer.SETRANGE("Transaction Type",DetailTaxEntryBuffer."Transaction Type"::Purchase);
                DetailTaxEntryBuffer.DELETEALL;
                GSTManagement.DeleteGSTBuffer(
                  DetailedGSTEntryBuffer."Transaction Type"::Purchase,"Document Type","No.",0);
                DeleteWhseRqst(PurchHeader);
              END;
              END;
              InsertValueEntryRelation;
              DeleteReservationEntryRelateJobNo(PurchLine."Document Type","No.",PurchLine."Line No.",PurchLine."Job No.");
              IF NOT InvtPickPutaway THEN
                COMMIT;
              ClearPostBuffers;
              IF GUIALLOWED THEN
                Window.CLOSE;
            END;
            Rec := PurchHeader;
            IF NOT InvtPickPutaway THEN BEGIN
              COMMIT;
              UpdateAnalysisView.UpdateAll(0,TRUE);
              UpdateItemAnalysisView.UpdateAll(0,TRUE);
            END;
            OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcptHeader."No.",ReturnShptHeader."No.",PurchInvHeader."No.",
              PurchCrMemoHeader."No.");
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is nothing to post.;ENN=There is nothing to post.';
      Text002@1001 : TextConst 'ENU=A drop shipment from a purchase order cannot be received and invoiced at the same time.;ENN=A drop shipment from a purchase order cannot be received and invoiced at the same time.';
      Text003@1002 : TextConst 'ENU="You cannot invoice this purchase order before the associated sales orders have been invoiced. ";ENN="You cannot invoice this purchase order before the associated sales orders have been invoiced. "';
      Text004@1003 : TextConst 'ENU=Please invoice sales order %1 before invoicing this purchase order.;ENN=Please invoice sales order %1 before invoicing this purchase order.';
      Text005@1004 : TextConst 'ENU=Posting lines              #2######\;ENN=Posting lines              #2######\';
      Text006@1005 : TextConst 'ENU=Posting purchases and VAT  #3######\;ENN=Posting purchases and VAT  #3######\';
      Text007@1006 : TextConst 'ENU=Posting to vendors         #4######\;ENN=Posting to vendors         #4######\';
      Text008@1007 : TextConst 'ENU=Posting to bal. account    #5######;ENN=Posting to bal. account    #5######';
      Text009@1008 : TextConst 'ENU=Posting lines         #2######;ENN=Posting lines              #2######';
      Text010@1009 : TextConst 'ENU=%1 %2 -> Invoice %3;ENN=%1 %2 -> Invoice %3';
      Text011@1010 : TextConst 'ENU=%1 %2 -> Credit Memo %3;ENN=%1 %2 -> Credit Memo %3';
      Text012@1011 : TextConst 'ENU=must have the same sign as the receipt;ENN=must have the same sign as the receipt';
      Text014@1012 : TextConst 'ENU=Receipt lines have been deleted.;ENN=Receipt lines have been deleted.';
      Text015@1013 : TextConst 'ENU=You cannot purchase resources.;ENN=You cannot purchase resources.';
      Text016@1014 : TextConst 'ENU=Purchase %1 %2 already exists for this vendor.;ENN=Purchase %1 %2 already exists for this vendor.';
      Text017@1015 : TextConst 'ENU=You cannot invoice order %1 for more than you have received.;ENN=You cannot invoice order %1 for more than you have received.';
      Text018@1016 : TextConst 'ENU="You cannot post this purchase order before the associated sales orders have been invoiced. ";ENN="You cannot post this purchase order before the associated sales orders have been invoiced. "';
      Text021@1017 : TextConst 'ENU=VAT Amount;ENN=VAT Amount';
      Text022@1018 : TextConst 'ENU=%1% VAT;ENN=%1% VAT';
      Text023@1019 : TextConst 'ENU=in the associated blanket order must not be greater than %1;ENN=in the associated blanket order must not be greater than %1';
      Text024@1020 : TextConst 'ENU=in the associated blanket order must be reduced.;ENN=in the associated blanket order must be reduced.';
      Text025@1021 : TextConst 'ENU=Please enter "Yes" in %1 and/or %2 and/or %3.;ENN=Please enter "Yes" in %1 and/or %2 and/or %3.';
      Text026@1022 : TextConst 'ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6.";ENN="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6."';
      Text028@1024 : TextConst 'ENU=must have the same sign as the return shipment;ENN=must have the same sign as the return shipment';
      Text029@1025 : TextConst 'ENU=Line %1 of the return shipment %2, which you are attempting to invoice, has already been invoiced.;ENN=Line %1 of the return shipment %2, which you are attempting to invoice, has already been invoiced.';
      Text030@1026 : TextConst 'ENU=Line %1 of the receipt %2, which you are attempting to invoice, has already been invoiced.;ENN=Line %1 of the receipt %2, which you are attempting to invoice, has already been invoiced.';
      Text031@1027 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in receipt %1;ENN=The quantity you are attempting to invoice is greater than the quantity in receipt %1';
      Text032@1028 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ENN=The combination of dimensions used in %1 %2 is blocked. %3';
      Text033@1029 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;ENN=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4';
      Text034@1030 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3;ENN=The dimensions used in %1 %2 are invalid. %3';
      Text035@1031 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;ENN=The dimensions used in %1 %2, line no. %3 are invalid. %4';
      Text036@1032 : TextConst 'ENU="You cannot assign more than %1 units in %2 = %3,%4 = %5,%6 = %7.";ENN="You cannot assign more than %1 units in %2 = %3,%4 = %5,%6 = %7."';
      Text037@1033 : TextConst 'ENU=You must assign all item charges, if you invoice everything.;ENN=You must assign all item charges, if you invoice everything.';
      Text038@1034 : TextConst 'ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced.";ENN="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced."';
      PurchSetup@1037 : Record 312;
      GLSetup@1038 : Record 98;
      GLEntry@1039 : Record 17;
      PurchHeader@1040 : Record 38;
      PurchLine@1041 : Record 39;
      PurchLine2@1042 : Record 39;
      JobPurchLine@1169 : Record 39;
      TotalPurchLine@1043 : Record 39;
      TotalPurchLineLCY@1044 : Record 39;
      TempPurchLine@1046 : Record 39;
      TempPurchLineSource@150100 : TEMPORARY Record 39;
      PurchLineACY@1047 : Record 39;
      TempPrepmtPurchLine@1167 : TEMPORARY Record 39;
      PurchRcptHeader@1048 : Record 120;
      PurchInvHeader@1050 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1054 : Record 6650;
      ReturnShptLine@1055 : Record 6651;
      SalesOrderHeader@1056 : Record 36;
      SalesOrderLine@1057 : Record 37;
      SalesShptHeader@1058 : Record 110;
      SalesShptLine@1059 : Record 111;
      ItemChargeAssgntPurch@1045 : Record 5805;
      TempItemChargeAssgntPurch@1060 : TEMPORARY Record 5805;
      GenJnlLine@1061 : Record 81;
      ItemJnlLine@1062 : Record 83;
      SourceCodeSetup@1065 : Record 242;
      SourceCode@1066 : Record 230;
      InvPostingBuffer@1069 : ARRAY [2] OF TEMPORARY Record 49;
      DropShptPostBuffer@1070 : TEMPORARY Record 223;
      Currency@1073 : Record 4;
      VendLedgEntry@1075 : Record 25;
      WhseRcptHeader@1023 : Record 7316;
      TempWhseRcptHeader@1142 : TEMPORARY Record 7316;
      WhseShptHeader@1143 : Record 7320;
      TempWhseShptHeader@1145 : TEMPORARY Record 7320;
      PostedWhseRcptHeader@1140 : Record 7318;
      PostedWhseRcptLine@1146 : Record 7319;
      PostedWhseShptHeader@1147 : Record 7322;
      PostedWhseShptLine@1151 : Record 7323;
      Location@1085 : Record 14;
      TempHandlingSpecification@1094 : TEMPORARY Record 336;
      TempTrackingSpecification@1137 : TEMPORARY Record 336;
      TempTrackingSpecificationInv@1158 : TEMPORARY Record 336;
      TempWhseSplitSpecification@1160 : TEMPORARY Record 336;
      TempValueEntryRelation@5555 : TEMPORARY Record 6508;
      ReservationEntry2@1170 : Record 337;
      ReservationEntry3@1171 : TEMPORARY Record 337;
      ItemJnlLine2@1164 : Record 83;
      Job@1093 : Record 167;
      TempICGenJnlLine@11093 : TEMPORARY Record 81;
      TempPrepmtDeductLCYPurchLine@1190 : TEMPORARY Record 39;
      TempSKU@1081 : TEMPORARY Record 5700;
      DeferralPostBuffer@1049 : ARRAY [2] OF Record 1703;
      TempDeferralHeader@1203 : TEMPORARY Record 1701;
      TempDeferralLine@1235 : TEMPORARY Record 1702;
      GSTPostingBuffer@1500019 : ARRAY [2] OF TEMPORARY Record 16420;
      GenJnlPostLine@1087 : Codeunit 12;
      ItemJnlPostLine@1089 : Codeunit 22;
      PurchCalcDisc@1090 : Codeunit 70;
      SalesTaxCalculate@1091 : Codeunit 398;
      ReservePurchLine@1092 : Codeunit 99000834;
      ApprovalsMgmt@1250 : Codeunit 1535;
      WhsePurchRelease@1097 : Codeunit 5772;
      SalesPost@1101 : Codeunit 80;
      ItemTrackingMgt@1138 : Codeunit 6500;
      WMSMgmt@1139 : Codeunit 7302;
      WhseJnlPostLine@1100 : Codeunit 7301;
      WhsePostRcpt@1148 : Codeunit 5760;
      WhsePostShpt@1149 : Codeunit 5763;
      CostCalcMgt@1162 : Codeunit 5836;
      JobPostLine@1172 : Codeunit 1001;
      ReservePurchLine2@1088 : Codeunit 99000834;
      ServItemMgt@1063 : Codeunit 5920;
      DeferralUtilities@1051 : Codeunit 1720;
      GSTManagement@1500077 : Codeunit 16401;
      GSTApplicationManagement@1500082 : Codeunit 16403;
      Window@1102 : Dialog;
      PostingDate@1103 : Date;
      Usedate@1104 : Date;
      GenJnlLineDocNo@1105 : Code[20];
      GenJnlLineExtDocNo@1106 : Code[35];
      SrcCode@1107 : Code[10];
      ItemLedgShptEntryNo@1108 : Integer;
      GenJnlLineDocType@1110 : Integer;
      FALineNo@1111 : Integer;
      RoundingLineNo@1112 : Integer;
      DeferralLineNo@1053 : Integer;
      InvDefLineNo@1064 : Integer;
      RemQtyToBeInvoiced@1114 : Decimal;
      RemQtyToBeInvoicedBase@1115 : Decimal;
      QtyToBeInvoiced@1116 : Decimal;
      QtyToBeInvoicedBase@1117 : Decimal;
      RemAmt@1135 : Decimal;
      RemDiscAmt@1136 : Decimal;
      LastLineRetrieved@1119 : Boolean;
      RoundingLineInserted@1120 : Boolean;
      DropShipOrder@1121 : Boolean;
      PostingDateExists@1122 : Boolean;
      ReplacePostingDate@1123 : Boolean;
      ReplaceDocumentDate@1124 : Boolean;
      GLSetupRead@1130 : Boolean;
      Text039@1098 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in return shipment %1;ENN=The quantity you are attempting to invoice is greater than the quantity in return shipment %1';
      Text040@1099 : TextConst 'ENU=Return shipment lines have been deleted.;ENN=Return shipment lines have been deleted.';
      Text041@1132 : TextConst 'ENU=You cannot invoice return order %1 for more than you have shipped.;ENN=You cannot invoice return order %1 for more than you have shipped.';
      Text99000000@1035 : TextConst 'ENU=Post sales order %1 before posting this purchase order.;ENN=Post sales order %1 before posting this purchase order.';
      Text042@1165 : TextConst 'ENU=Related item ledger entries cannot be found.;ENN=Related item ledger entries cannot be found.';
      Text043@1173 : TextConst 'ENU=Item Tracking is signed wrongly.;ENN=Item Tracking is signed wrongly.';
      Text044@1163 : TextConst 'ENU=Item Tracking does not match.;ENN=Item Tracking does not match.';
      Text045@1155 : TextConst 'ENU=is not within your range of allowed posting dates.;ENN=is not within your range of allowed posting dates.';
      Text046@1144 : TextConst 'ENU=The %1 does not match the quantity defined in item tracking.;ENN=The %1 does not match the quantity defined in item tracking.';
      Text047@1141 : TextConst 'ENU=cannot be more than %1.;ENN=cannot be more than %1.';
      Text048@1129 : TextConst 'ENU=must be at least %1.;ENN=must be at least %1.';
      ItemChargeAssgntOnly@1133 : Boolean;
      ItemJnlRollRndg@1134 : Boolean;
      WhseReceive@1113 : Boolean;
      WhseShip@1150 : Boolean;
      InvtPickPutaway@1154 : Boolean;
      JobItem@1189 : Boolean;
      PositiveWhseEntrycreated@1191 : Boolean;
      Text050@1177 : TextConst 'ENU=The total %1 cannot be more than %2.;ENN=The total %1 cannot be more than %2.';
      Text051@1178 : TextConst 'ENU=The total %1 must be at least %2.;ENN=The total %1 must be at least %2.';
      Text052Qst@1175 : TextConst 'ENU=An unposted invoice for order %1 exists. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post order %1?;ENN=An unposted invoice for order %1 exists. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post order %1?';
      Text053Qst@1176 : TextConst 'ENU=An invoice for order %1 exists in the IC inbox. To avoid duplicate postings, cancel invoice %2 in the IC inbox.\Do you still want to post order %1?;ENN=An invoice for order %1 exists in the IC inbox. To avoid duplicate postings, cancel invoice %2 in the IC inbox.\Do you still want to post order %1?';
      Text054Qst@1179 : TextConst 'ENU=Posted invoice %1 already exists for order %2. To avoid duplicate postings, do not post order %2.\Do you still want to post order %2?;ENN=Posted invoice %1 already exists for order %2. To avoid duplicate postings, do not post order %2.\Do you still want to post order %2?';
      Text055Qst@1180 : TextConst 'ENU=Order %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post invoice %2?;ENN=Order %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post invoice %2?';
      Text056Qst@1181 : TextConst 'ENU=A document originating from the same IC transaction as document %1 exists in the IC inbox. To avoid duplicate postings, cancel document %2 in the IC inbox.\Do you still want to post document %1?;ENN=A document originating from the same IC transaction as document %1 exists in the IC inbox. To avoid duplicate postings, cancel document %2 in the IC inbox.\Do you still want to post document %1?';
      Text057Qst@1182 : TextConst 'ENU=Posted invoice %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, do not post invoice %2.\Do you still want to post invoice %2?;ENN=Posted invoice %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, do not post invoice %2.\Do you still want to post invoice %2?';
      Text059@1102601000 : TextConst 'ENU=You must assign item charge %1 if you want to invoice it.;ENN=You must assign item charge %1 if you want to invoice it.';
      Text060@1102601001 : TextConst 'ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.;ENN=You can not invoice item charge %1 because there is no item ledger entry to assign it to.';
      Text061@1500200 : TextConst '@@@="%1 = comment";ENU=The Type field must be empty for comment %1.;ENN=The Type field must be empty for comment %1.';
      PurchaseLinesProcessed@1080 : Boolean;
      StrPostBuf@1280007 : ARRAY [2] OF TEMPORARY Record 13796;
      TDSInvBuf@1280006 : ARRAY [2] OF TEMPORARY Record 13714;
      VATPostingBuffer@1280005 : ARRAY [2] OF TEMPORARY Record 16354;
      ExcisePostingBuffer@1280004 : ARRAY [2] OF TEMPORARY Record 13706;
      StrOrderDetails@1280017 : Record 13794;
      StrOrdLineDetails@1280010 : Record 13795;
      PostedStrOrderDetails@1280018 : Record 13760;
      PostedStrOrderLineDetails@1280016 : Record 13798;
      LCOrder@1280024 : Record 16306;
      LCDetail@1280023 : Record 16300;
      TDSGroup@1280032 : Record 13731;
      ThirdPartyInvoice@1280037 : Record 13797;
      SubConOrderLine@1280038 : Record 39;
      ExciseInsertRGRegister@1280015 : Codeunit 13701;
      SubConPost@1280021 : Codeunit 16360;
      ServiceTaxMgt@1280022 : Codeunit 16471;
      IndianSalesTaxCalculate@1280027 : Codeunit 13704;
      AmountAddedtoVendor@1280009 : Decimal;
      SrcCurrAmountAddedtoVendor@1280008 : Decimal;
      AmountToVendor@1280020 : Decimal;
      AmountToVendorLCY@1280019 : Decimal;
      Text13701@1280025 : TextConst 'ENU=The LC that you have attached is expired.;ENN=The LC that you have attached is expired.';
      Text13702@1280026 : TextConst 'ENU=The order value %1 cannot be greater than the LC remaining value %2.;ENN=The order value %1 cannot be greater than the LC remaining value %2.';
      LineNo@1280036 : Integer;
      VendNatureofDeduction@1280035 : Code[10];
      VendTDSGroup@1280034 : ' ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others';
      FASalesTaxLoading@1500000 : Boolean;
      VATMngt@1500001 : Codeunit 16503;
      State@1500004 : Record 13762;
      CompanyInfo@1500008 : Record 79;
      CompanyInfoRead@1500009 : Boolean;
      NextDetTaxEntryNo@1500007 : Integer;
      ItemAmountLoadedOnItem@1500002 : Decimal;
      ItemInputTaxCredit@1500003 : Decimal;
      TotalPurchTaxAmount@1500006 : Decimal;
      ItemCapitalGood@1500005 : Boolean;
      Text16500@1500010 : TextConst 'ENU=VAT has been settled for this period. Do you want to post?;ENN=VAT has been settled for this period. Do you want to post?';
      GateEntryAttachment@1500016 : Record 16557;
      PostedGateEntryAttachment@1500015 : Record 16558;
      PostedGateEntryLine@1500011 : Record 16556;
      CVDPayableToThirdParty@1500020 : Boolean;
      Text16501@1500012 : TextConst 'ENU=The sum of the CIF amount and the BCD amount must not be zero for CVD calculation.;ENN=The sum of the CIF amount and the BCD amount must not be zero for CVD calculation.';
      Text16502@1500013 : TextConst 'ENU=The type must not be Item Charge or G/L Account in a trading transaction.;ENN=The type must not be Item Charge or G/L Account in a trading transaction.';
      TaxAreaLine@1500017 : Record 319;
      TaxJurisdiction@1500014 : Record 320;
      STaxPostingBuffer@1500025 : ARRAY [2] OF TEMPORARY Record 16581;
      Text16503@1500023 : TextConst '@@@="%1 = PurchaseHeader.""Location Code""";ENU=The Input Service Distributor check box must be selected for location %1.;ENN=The Input Service Distributor check box must be selected for location %1.';
      Text16504@1500024 : TextConst '@@@="%1 = PurchaseHeader.""Location Code""";ENU=The Input Service Distributor check box must be selected for location %1.;ENN=The Input Service Distributor check box must be selected for location %1.';
      Text16507@1500022 : TextConst '@@@="%1 and %2 = PurchaseHeader.""Document Type"" and PurchaseHeader.No.";ENU=The Input Service Distributor check box must be selected for locations %1 and %2.;ENN=The Input Service Distributor check box must be selected for locations %1 and %2.';
      ExciseExistInStructure@1500026 : Boolean;
      ExcisePostingSetup@1500027 : Record 13711;
      Text16508@1500028 : TextConst 'ENU=The type must not be Fixed Asset or Capital Item in a trading transaction;ENN=The type must not be Fixed Asset or Capital Item in a trading transaction';
      PurchLine3@1500029 : Record 39;
      Text16509@1500031 : TextConst '@@@="%1 = type of transaction";ENU=This excise refund transaction cannot be posted in case of %1 transaction.;ENN=This excise refund transaction cannot be posted in case of %1 transaction.';
      Text16510@1500030 : TextConst 'ENU=an excise loading on inventory;ENN=an excise loading on inventory';
      Text16511@1500032 : TextConst 'ENU=a trading transaction (alternatively, "a trade");ENN=a trading transaction (alternatively, "a trade")';
      Text16512@1500033 : TextConst 'ENU=a CVD;ENN=a CVD';
      PurchLine4@1500034 : Record 39;
      Text16513@1500035 : TextConst '@@@="%1 and %2 and %3 = PurchaseLine.""Document type"" and PurchaseLine.""Document No."" and PurchaseLine.No.";ENU=The Job Type field must contain Capital WIP if the Trading check box is selected in document type %1, document number %2, line number %3.;ENN=The Job Type field must contain Capital WIP if the Trading check box is selected in document type %1, document number %2, line number %3.';
      Text16514@1500036 : TextConst '@@@="%1 and %2 and %3 = PurchaseLine.""Document type"" and PurchaseLine.""Document No."" and PurchaseLine.No.";ENU=The Job Type field must not contain Capital WIP if the Input Service Distribution check box is selected in document type %1, document number %2, line number %3.;ENN=The Job Type field must not contain Capital WIP if the Input Service Distribution check box is selected in document type %1, document number %2, line number %3.';
      Text16515@1500038 : TextConst '@@@="%1 and %2 and %3 = PurchaseLine.""Document type"" and PurchaseLine.""Document No."" and PurchaseLine.No.";ENU=The Job No. field must not be empty if the Job Type field contains Capital WIP in document type %1, document number %2, line number %3.;ENN=The Job No. field must not be empty if the Job Type field contains Capital WIP in document type %1, document number %2, line number %3.';
      Text16516@1500039 : TextConst 'ENU=The Job Type field must not contain Capital WIP when the job is not of type capital WIP.;ENN=The Job Type field must not contain Capital WIP when the job is not of type capital WIP.';
      TempPurchLine2@1500040 : TEMPORARY Record 39;
      DefermentBuffer@1500056 : Record 16532;
      DetailTaxEntryBuffer@1500055 : Record 16480;
      PurchLine6@1500054 : Record 39;
      ItemCharge@1500053 : Record 5800;
      ItemChargeAssgntPurch2@1500052 : Record 5805;
      Item@1500051 : Record 27;
      DetailedTaxEntry@1500050 : Record 16522;
      StartingEntryNo@1500049 : Integer;
      ChargeItemAmountLoadedOnItem@1500048 : Decimal;
      ChargeItemInputTaxCredit@1500047 : Decimal;
      ChargeItemPerOrder@1500046 : Boolean;
      ChargeItemAssgnt@1500045 : Boolean;
      ItemLedgerQuantity@1500044 : Decimal;
      TotalPurchaseTaxAmount@1500043 : Decimal;
      AmountAdjusted@1500042 : Decimal;
      PostItemChargeAssgntDiff@1500041 : Boolean;
      Text16517@1500057 : TextConst '@@@="%1 and %2 and %3 = ItemCharge.""Fixed Asset"" and ItemChargeAssgntPurch2.""Item No."" and ItemChargeAssgntPurch2.""Document Line No.""";ENU=The Fixed Asset field must contain %1 in the item charge assigment for item number %2, line number %3.;ENN=The Fixed Asset field must contain %1 in the item charge assigment for item number %2, line number %3.';
      LSTTaxType@1500058 : Boolean;
      TempServiceTaxEntry@1500065 : TEMPORARY Record 16473;
      TempPurchLineInst@1500064 : TEMPORARY Record 39;
      InsertSTRecoverable@1500063 : Boolean;
      STaxApplBuffer@1500062 : ARRAY [2] OF Record 16529;
      ExecuteForLookup@1500061 : Boolean;
      STaxPostingBuffer2@1500060 : TEMPORARY Record 16581;
      AppliedDocIsSTPayment@1500059 : Boolean;
      Text16519@1500070 : TextConst 'ENU=Service tax advance payment documents cannot be applied to non-service tax Invoices.;ENN=Service tax advance payment documents cannot be applied to non-service tax Invoices.';
      Text16520@1500069 : TextConst '@@@=%1 and %2 OldVendLedgEntry.""Document No."" and STaxPostingBuffer2.Amount";ENU=In applied payment document %1, the Amount to Apply field must not be greater than %2.;ENN=In applied payment document %1, the Amount to Apply field must not be greater than %2.';
      Text16521@1500068 : TextConst 'ENU=You cannot apply the documents, because they use different service tax rounding precision.;ENN=You cannot apply the documents, because they use different service tax rounding precision.';
      Text16522@1500067 : TextConst 'ENU=You cannot apply the documents, because they have different service tax group codes.;ENN=You cannot apply the documents, because they have different service tax group codes.';
      Text16523@1500066 : TextConst 'ENU=You cannot apply the documents, because they have different service tax registration numbers.;ENN=You cannot apply the documents, because they have different service tax registration numbers.';
      ChargeItemPerOrderPerLine@1500089 : Boolean;
      TotalVatablePurchaseTaxAmount@1500090 : Decimal;
      TotalQtyInvoiced@1500091 : Decimal;
      TotalTaxAmount@1500092 : Decimal;
      TempPurchLine3@1500071 : TEMPORARY Record 39;
      ExecuteTDSBuff@1500159 : Boolean;
      CalledFrmPosting@1500259 : Boolean;
      NonCSTVATChrgAmt@1280001 : Boolean;
      LoopCount@1500182 : Integer;
      TotalChargeItemInputTaxCredit@1500185 : Decimal;
      TotalChrgItemAmtLoadedOnItem@1500186 : Decimal;
      PurchLineTaxAmount@1500183 : Decimal;
      RefTaxJurisdiction@1500170 : Code[20];
      Text16524@1500076 : TextConst '@@@=%1 and %2 PurchHeader.No. and TempServiceTaxEntry.""Document No.""";ENU=The PoT value in the %1 and the %2 are not the same.;ENN=The PoT value in the %1 and the %2 are not the same.';
      AppliedServiceTaxAmountPmt@1500073 : Decimal;
      AppliedServiceTaxAmountInv@1500072 : Decimal;
      ServiceTaxRoundingAmount@1500075 : Decimal;
      Text061Qst@1200 : TextConst '@@@="One or more reservation entries exist for the item with No. = 1000, Location Code = SILVER, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?";ENN="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      Text062Err@1199 : TextConst 'ENU=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.;ENN=The order line that the item charge was originally assigned to has been fully posted. You must reassign the item charge to the posted receipt or shipment.';
      PreviewMode@1036 : Boolean;
      NoDeferralScheduleErr@1068 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.;ENN=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1067 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.;ENN=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      PurchLineTaxAmount2@1500100 : Decimal;
      PurchLineTaxAmtDiff@1500101 : Decimal;
      MixedDerpFAUntilPostingDateErr@1072 : TextConst '@@@=%1 - Fixed Asset No.;ENU=The value in the Depr. Until FA Posting Date field must be the same on lines for the same fixed asset %1.;ENN=The value in the Depr. Until FA Posting Date field must be the same on lines for the same fixed asset %1.';
      CannotPostSameMultipleFAWhenDeprBookValueZeroErr@1071 : TextConst '@@@=%1 - Fixed Asset No.;ENU=You cannot select the Depr. Until FA Posting Date check box because there is no previous acquisition entry for fixed asset %1.\\If you want to depreciate new acquisitions, you can select the Depr. Acquisition Cost check box instead.;ENN=You cannot select the Depr. Until FA Posting Date check box because there is no previous acquisition entry for fixed asset %1.\\If you want to depreciate new acquisitions, you can select the Depr. Acquisition Cost check box instead.';
      CannotChargeErr@1500018 : TextConst '@@@="%1 = PurchaseLine.""Line No."". %2 = PurchaseLine.Type.";ENU=You cannot charge line number %1 because it is of type %2.;ENN=You cannot charge line number %1 because it is of type %2.';
      CannotPostDiscountDeferralErr@1076 : TextConst '@@@=@1 - Line No., %2 - Line/Inv. Discount Amount field name.;ENU=You cannot post line %1 because it contains a deferral code and a %2.;ENN=You cannot post line %1 because it contains a deferral code and a %2.';
      GSTAmountLoaded@1500021 : Decimal;
      GSTCreditAmount@1500037 : Decimal;
      GSTReverseChargeVendType@1500079 : Boolean;
      TotalGSTAmount@1500080 : Decimal;
      GSTStateCode@1500081 : Code[10];
      TotalGSTAmountLCY@1500083 : Decimal;
      CustomDuty@1500084 : Decimal;
      GSTAssessableErr@1500085 : TextConst 'ENU=GST Assessable Value must have a value in Purchase Line Document Type %1 and Document No %2.';

    PROCEDURE SetPostingDate@1(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(PurchLine@1000 : Record 39;QtyToBeReceived@1001 : Decimal;QtyToBeReceivedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1010 : Record 336) : Integer;
    VAR
      ItemChargePurchLine@1008 : Record 39;
      OriginalItemJnlLine@1014 : Record 83;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseTrackingSpecification@1016 : TEMPORARY Record 336;
      TempWhseJnlLine2@1011 : TEMPORARY Record 7311;
      CurrExchRate@1007 : Record 330;
      Factor@1009 : Decimal;
      PostWhseJnlLine@1013 : Boolean;
      CheckApplToItemEntry@1015 : Boolean;
      PostJobConsumptionBeforePurch@1018 : Boolean;
      NextReservationEntryNo@1017 : Integer;
      ExtraItemCost@1500000 : Decimal;
      DetailedTaxEntry@1500001 : Record 16522;
      AmountLoadedOnItem@1500004 : Decimal;
      InputTaxCredit@1500002 : Decimal;
      CapitalGood@1500003 : Boolean;
      TypeofDisposal@1500005 : Record 16565;
      AmountLoadedOnItem1@1500006 : Decimal;
      Vendor@1500007 : Record 23;
      SSI@1500008 : Boolean;
      ChargeItem@1500009 : Boolean;
      ChargeItemOriginalQuantity@1500010 : Decimal;
      ChargeItemLedgerPerRcpt@1500011 : Boolean;
      QFactr@1500012 : Decimal;
    BEGIN
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH PurchLine DO BEGIN
        ChargeItem := FALSE;
        ChargeItemLedgerPerRcpt := FALSE;
        Vendor.GET(PurchHeader."Buy-from Vendor No.");
        IF Vendor."SSI Validity Date" = 0D THEN BEGIN
          IF Vendor.SSI = TRUE THEN
            SSI := TRUE;
        END ELSE
          IF Vendor."SSI Validity Date" > PurchHeader."Posting Date" THEN
            SSI := Vendor.SSI
          ELSE
            SSI := FALSE;
        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETFILTER("From Date",'<=%1',PurchHeader."Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,SSI);
        IF ExcisePostingSetup.FINDLAST THEN;
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := PurchHeader."Posting Date";
        ItemJnlLine."Document Date" := PurchHeader."Document Date";
        ItemJnlLine."Source Posting Group" := PurchHeader."Vendor Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := PurchHeader."Purchaser Code";
        ItemJnlLine."Country/Region Code" := PurchHeader."Buy-from Country/Region Code";
        ItemJnlLine."Reason Code" := PurchHeader."Reason Code";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Dimension Set ID" := "Dimension Set ID";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";
        ItemJnlLine."Job No." := "Job No.";
        ItemJnlLine."Job Task No." := "Job Task No.";
        IF ItemJnlLine."Job No." <> '' THEN
          ItemJnlLine."Job Purchase" := TRUE;
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Entry/Exit Point" := "Entry Point";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Drop Shipment" := "Drop Shipment";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Purchase;
        IF "Prod. Order No." <> '' THEN BEGIN
          ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Production;
          ItemJnlLine."Order No." := "Prod. Order No.";
          ItemJnlLine."Order Line No." := "Prod. Order Line No.";
        END;
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Cross-Reference No." := "Cross-Reference No.";
        ItemJnlLine."Assessable Value" := QtyToBeReceivedBase * "Assessable Value";
        ItemJnlLine."BED Amount" := "BED Amount";
        ItemJnlLine."BED %" := ExcisePostingSetup."BED %";
        ItemJnlLine."Other Duties Amount" :=
          "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "AED(TTA) Amount" + "NCCD Amount" + "CESS Amount" +
          "ADE Amount" + "ADET Amount" + "eCess Amount" + "ADC VAT Amount" + "SHE Cess Amount";
        IF QtyToBeReceived = 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Invoice";
          ItemJnlLine."Document No." := GenJnlLineDocNo;
          ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          ItemJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
          IF QtyToBeInvoiced <> 0 THEN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
        END ELSE BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Return Shipment";
            ItemJnlLine."Document No." := ReturnShptHeader."No.";
            ItemJnlLine."External Document No." := ReturnShptHeader."Vendor Authorization No.";
            ItemJnlLine."Posting No. Series" := ReturnShptHeader."No. Series";
          END ELSE BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Receipt";
            ItemJnlLine."Document No." := PurchRcptHeader."No.";
            ItemJnlLine."External Document No." := PurchRcptHeader."Vendor Shipment No.";
            ItemJnlLine."Posting No. Series" := PurchRcptHeader."No. Series";
          END;
          IF QtyToBeInvoiced <> 0 THEN BEGIN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
          END;
        END;
        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := QtyToBeReceived;
        ItemJnlLine."Quantity (Base)" := QtyToBeReceivedBase;
        ItemJnlLine."Invoiced Quantity" := QtyToBeInvoiced;
        ItemJnlLine."Invoiced Qty. (Base)" := QtyToBeInvoicedBase;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."GST Availment (Goods)" := ("GST Credit" = "GST Credit"::"Non-Availment");
        ItemJnlLine."Source Currency Code" := PurchHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
        IF ItemChargeNo <> '' THEN BEGIN
          ItemJnlLine."Item Charge No." := ItemChargeNo;
          "Qty. to Invoice" := QtyToBeInvoiced;
        END;
        IF QtyToBeInvoiced <> 0 THEN BEGIN
          IF QtyToBeInvoicedBase <> 0 THEN BEGIN
            ItemJnlLine."BED Amount" :=
              RoundExciseAmt(ItemJnlLine."BED Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code");
            ItemJnlLine."Other Duties Amount" :=
              RoundExciseAmt("AED(GSI) Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code") +
              RoundExciseAmt("SED Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("SAED Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("AED(TTA) Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("NCCD Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("CESS Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("ADE Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("ADET Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("eCess Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("ADC VAT Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" ) +
              RoundExciseAmt("SHE Cess Amount",QtyToBeInvoicedBase,"Qty. to Invoice (Base)","Currency Code" );
          END ELSE BEGIN
            ItemJnlLine."BED Amount" :=
              RoundExciseAmt(ItemJnlLine."BED Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code");
            ItemJnlLine."Other Duties Amount" :=
              RoundExciseAmt("AED(GSI) Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("SED Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("SAED Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("AED(TTA) Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("NCCD Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("CESS Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("ADE Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("ADET Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("eCess Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("ADC VAT Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" ) +
              RoundExciseAmt("SHE Cess Amount",QtyToBeInvoiced,"Qty. to Invoice","Currency Code" );
          END;
        END ELSE
          IF ("Qty. to Receive" > "Qty. to Invoice") AND ("Qty. to Invoice" <> 0) AND PurchHeader.Invoice THEN BEGIN
            ItemJnlLine."BED Amount" :=
              RoundExciseAmt(ItemJnlLine."BED Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code");
            ItemJnlLine."Other Duties Amount" :=
              RoundExciseAmt("AED(GSI) Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("SED Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("SAED Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("AED(TTA) Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("NCCD Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("CESS Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("ADE Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("ADET Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("eCess Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("ADC VAT Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code") +
              RoundExciseAmt("SHE Cess Amount",QtyToBeReceivedBase,"Qty. to Invoice","Currency Code");
          END ELSE BEGIN
            ItemJnlLine."BED Amount" :=
              RoundExciseAmt(ItemJnlLine."BED Amount",QtyToBeReceivedBase,Quantity,"Currency Code");
            ItemJnlLine."Other Duties Amount" :=
              RoundExciseAmt("AED(GSI) Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("SED Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("SAED Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("AED(TTA) Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("NCCD Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("CESS Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("ADE Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("ADET Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("eCess Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("ADC VAT Amount",QtyToBeReceivedBase,Quantity,"Currency Code") +
              RoundExciseAmt("SHE Cess Amount",QtyToBeReceivedBase,Quantity,"Currency Code");
          END;
        IF "Excise Accounting Type" = "Excise Accounting Type"::"Without CENVAT" THEN
          ExtraItemCost := ItemJnlLine."BED Amount" + ItemJnlLine."Other Duties Amount"
        ELSE
          IF ("Excise Accounting Type" = "Excise Accounting Type"::"With CENVAT") AND (NOT "Excise Refund") THEN BEGIN
            IF ("Excise Loading on Inventory" = FALSE) OR PurchHeader.Trading THEN BEGIN
              ExtraItemCost := "CESS Amount";
              IF NOT "SetOff Available" THEN
                ExtraItemCost := ExtraItemCost + "eCess Amount" + "SHE Cess Amount";
            END ELSE
              ExtraItemCost := ItemJnlLine."BED Amount" + ItemJnlLine."Other Duties Amount";
            ExtraItemCost := ExtraItemCost + "Custom eCess Amount" + "Custom SHECess Amount";
          END;
        ExtraItemCost := ExtraItemCost + "Amount Added to Inventory";
        IF QtyToBeInvoiced <> 0 THEN BEGIN
          IF (QtyToBeInvoicedBase <> 0) AND (Type = Type::Item)THEN
            Factor := QtyToBeInvoicedBase / "Qty. to Invoice (Base)"
          ELSE
            Factor := QtyToBeInvoiced / "Qty. to Invoice";
          ItemJnlLine.Amount := (Amount + ExtraItemCost) * Factor + RemAmt;
          IF PurchHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              ("Line Discount Amount" + "Inv. Discount Amount") / (1 + "VAT %" / 100) * Factor + RemDiscAmt
          ELSE
            ItemJnlLine."Discount Amount" :=
              ("Line Discount Amount" + "Inv. Discount Amount") * Factor + RemDiscAmt;
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          IF PurchHeader.Invoice AND ExecuteDetailTaxEntryInsertion("Tax Group Code") THEN BEGIN
            IF Type = Type::"Charge (Item)" THEN BEGIN
              Type := Type::Item;
              ChargeItem := TRUE;
            END;
            IF ChargeItemAssgnt THEN BEGIN
              ChargeItemOriginalQuantity := QtyToBeInvoicedBase;
              QtyToBeInvoicedBase := ItemLedgerQuantity;
              ChargeItemLedgerPerRcpt := TRUE;
            END;
            InsertDetailedTaxEntry(PurchLine,AmountLoadedOnItem,InputTaxCredit,CapitalGood,QtyToBeInvoiced,QtyToBeInvoicedBase,Factor);
            IF ChargeItem THEN
              Type := Type::"Charge (Item)";
            IF ChargeItemLedgerPerRcpt THEN
              QtyToBeInvoicedBase := ChargeItemOriginalQuantity;
          END;
          IF (InputTaxCredit + AmountLoadedOnItem) <> 0 THEN BEGIN
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount + AmountLoadedOnItem);
            ExtraItemCost := ExtraItemCost + AmountLoadedOnItem;
          END;
          CalcInvSalesTaxAmount(PurchLine,AmountLoadedOnItem1);
          IF AmountLoadedOnItem1 <> 0 THEN BEGIN
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount + (AmountLoadedOnItem1 * Factor));
            ExtraItemCost := ExtraItemCost + AmountLoadedOnItem1;
          END;
          ItemAmountLoadedOnItem := ItemAmountLoadedOnItem + AmountLoadedOnItem;
          ItemInputTaxCredit := ItemInputTaxCredit + InputTaxCredit;
          ItemCapitalGood := CapitalGood;
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
        END ELSE BEGIN
          IF PurchHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              (QtyToBeReceived * "Direct Unit Cost" * (1 - "Line Discount %" / 100) / (1 + "VAT %" / 100)) + RemAmt
          ELSE
            ItemJnlLine.Amount :=
              (QtyToBeReceived * "Direct Unit Cost" * (1 - "Line Discount %" / 100)) + RemAmt;
          IF PurchHeader.Receive THEN
            CalcTaxAmount(PurchLine,AmountLoadedOnItem1);
          IF (PurchHeader."Currency Code" <> '') AND (AmountLoadedOnItem1 <> 0) THEN
            AmountLoadedOnItem1 :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PurchHeader."Posting Date",PurchHeader."Currency Code",
                  AmountLoadedOnItem1,PurchHeader."Currency Factor"));
          IF AmountLoadedOnItem1 <> 0 THEN
            ExtraItemCost := ExtraItemCost + AmountLoadedOnItem1;
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF PurchHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PurchHeader."Posting Date",PurchHeader."Currency Code",
                  ItemJnlLine.Amount,PurchHeader."Currency Factor"))
          ELSE BEGIN
            IF ("Qty. to Receive" > "Qty. to Invoice") AND ("Qty. to Invoice" <> 0) AND PurchHeader.Invoice THEN
              ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount + ((ExtraItemCost * QtyToBeReceivedBase) / "Qty. to Invoice"))
          ELSE
              ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount + (ExtraItemCost / Quantity));
          END;
        END;
        IF "Qty. to Invoice" <> 0 THEN
          QFactr := QtyToBeInvoiced / "Qty. to Invoice";
        IF "GST Credit" = "GST Credit"::"Non-Availment" THEN
          IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                                             PurchHeader."Document Type"::"Return Order"] THEN
            ItemJnlLine.Amount := ItemJnlLine.Amount - ROUND(GSTAmountLoaded * QFactr)
          ELSE
            ItemJnlLine.Amount := ItemJnlLine.Amount + ROUND(GSTAmountLoaded * QFactr);
        IF GSTManagement.IsGSTApplicable(PurchHeader.Structure) AND
          (PurchHeader."GST Vendor Type" IN [PurchHeader."GST Vendor Type"::Import, PurchHeader."GST Vendor Type"::SEZ]) AND
          (CustomDuty <> 0)
        THEN
            ItemJnlLine.Amount := ItemJnlLine.Amount + CustomDuty;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Vendor;
        ItemJnlLine."Source No." := "Buy-from Vendor No.";
        ItemJnlLine."Invoice-to Source No." := "Pay-to Vendor No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Purchasing Code" := "Purchasing Code";
        IF QtyToBeInvoiced <> 0 THEN
          ItemJnlLine."Unit Cost" := ItemJnlLine."Unit Cost" + ((ExtraItemCost + CustomDuty + GSTAmountLoaded) * QFactr / QtyToBeInvoiced )
        ELSE BEGIN
          IF ("Qty. to Receive" > "Qty. to Invoice") AND ("Qty. to Invoice" <> 0) AND PurchHeader.Invoice THEN
            ItemJnlLine."Unit Cost" := ItemJnlLine."Unit Cost" + ((ExtraItemCost + CustomDuty + GSTAmountLoaded) * QFactr / "Qty. to Invoice")
          ELSE
            ItemJnlLine."Unit Cost" := ItemJnlLine."Unit Cost" + (ExtraItemCost / Quantity);
        END;
        IF "Prod. Order No." <> '' THEN BEGIN
          ItemJnlLine.Subcontracting := TRUE;
          ItemJnlLine."Quantity (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeReceived);
          ItemJnlLine."Invoiced Qty. (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeInvoiced);
          ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
          ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
          ItemJnlLine."Output Quantity (Base)" := ItemJnlLine."Quantity (Base)";
          ItemJnlLine."Output Quantity" := QtyToBeReceived;
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output;
          ItemJnlLine."Posting Date" := "Posting Date";
          ItemJnlLine.Type := ItemJnlLine.Type::"Work Center";
          ItemJnlLine."No." := "Work Center No.";
          ItemJnlLine."Routing No." := "Routing No.";
          ItemJnlLine."Routing Reference No." := "Routing Reference No.";
          ItemJnlLine."Operation No." := "Operation No.";
          ItemJnlLine."Work Center No." := "Work Center No.";
          ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
          IF Finished THEN
            ItemJnlLine.Finished := Finished;
        END;
        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;
        ItemJnlLine."Indirect Cost %" := "Indirect Cost %";
        ItemJnlLine."Overhead Rate" := "Overhead Rate";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";
        IF ("Document Type" = "Document Type"::"Return Order") OR ("Document Type" = "Document Type"::"Credit Memo") THEN BEGIN
          TypeofDisposal.RESET;
          TypeofDisposal.SETRANGE(Type,TypeofDisposal.Type::"Purchase return");
          IF TypeofDisposal.FINDFIRST THEN BEGIN
            ItemJnlLine."Other Usage" := ItemJnlLine."Other Usage"::Disposal;
            ItemJnlLine."Nature of Disposal" := TypeofDisposal.Code;
            ItemJnlLine."Type of Disposal" := ItemJnlLine."Type of Disposal"::"Purchase return";
          END;
        END;
        ItemJnlLine."Reason Code" := "Reason Code";
        CheckApplToItemEntry :=
          PurchSetup."Exact Cost Reversing Mandatory" AND
          (Type = Type::Item) AND
          (((Quantity < 0) AND ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice])) OR
           ((Quantity > 0) AND ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]))) AND
          ("Job No." = '');

        IF ("Location Code" <> '') AND
           (Type = Type::Item) AND
           (ItemJnlLine.Quantity <> 0) AND
           NOT ItemJnlLine.Subcontracting
        THEN BEGIN
          GetLocation("Location Code");
          IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
              Location."Directed Put-away and Pick") OR
             (Location."Bin Mandatory" AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway OR "Drop Shipment"))
          THEN BEGIN
            CreateWhseJnlLine(ItemJnlLine,PurchLine,TempWhseJnlLine);
            PostWhseJnlLine := TRUE;
          END;
        END;
        ReservationEntry3.DELETEALL;
        CLEAR(ItemJnlLine2);
        ItemJnlLine2 := ItemJnlLine;
        IF "Job No." <> '' THEN BEGIN
          ReservePurchLine2.FindReservEntry(PurchLine,ReservationEntry2);
          IF ReservationEntry2.FIND('-') THEN
            REPEAT
              ReservationEntry3 := ReservationEntry2;
              ReservationEntry3.INSERT;
            UNTIL ReservationEntry2.NEXT = 0;
        END;

        IF QtyToBeReceivedBase <> 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,-QtyToBeReceivedBase,CheckApplToItemEntry)
          ELSE
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,QtyToBeReceivedBase,CheckApplToItemEntry);

          IF CheckApplToItemEntry AND (NOT IsServiceItem) THEN
            TESTFIELD("Appl.-to Item Entry");
        END;
        OriginalItemJnlLine := ItemJnlLine;
        IF "Job No." <> '' THEN BEGIN
          PostJobConsumptionBeforePurch :=
            ItemJnlLine.IsPurchaseReturn;
          IF PostJobConsumptionBeforePurch THEN
            PostItemJrnlLineJobConsumption(PurchLine,
              NextReservationEntryNo,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              QtyToBeReceived,
              QtyToBeReceivedBase,
              CheckApplToItemEntry);
        END;
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN BEGIN
          IF ItemJnlLine.Subcontracting THEN
            TempHandlingSpecification.DELETEALL;
          IF TempHandlingSpecification.FIND('-') THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification;
              TempTrackingSpecification."Source Type" := DATABASE::"Purchase Line";
              TempTrackingSpecification."Source Subtype" := "Document Type";
              TempTrackingSpecification."Source ID" := "Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := "Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              IF QtyToBeInvoiced <> 0 THEN BEGIN
                TempTrackingSpecificationInv := TempTrackingSpecification;
                IF TempTrackingSpecificationInv.INSERT THEN;
              END;
              IF PostWhseJnlLine THEN BEGIN
                TempWhseTrackingSpecification := TempTrackingSpecification;
                IF TempWhseTrackingSpecification.INSERT THEN;
              END;
            UNTIL TempHandlingSpecification.NEXT = 0;
        END;
        IF "Job No." <> '' THEN
          IF NOT PostJobConsumptionBeforePurch THEN
            PostItemJrnlLineJobConsumption(PurchLine,
              NextReservationEntryNo,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              QtyToBeReceived,
              QtyToBeReceivedBase,
              CheckApplToItemEntry);

        IF PostWhseJnlLine THEN BEGIN
          ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,FALSE);
          IF TempWhseJnlLine2.FIND('-') THEN
            REPEAT
              IF ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND (Quantity > 0) OR
                 ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND (Quantity < 0)
              THEN
                CreatePositiveEntry(TempWhseJnlLine2,"Job No.",PostJobConsumptionBeforePurch);
              WhseJnlPostLine.RUN(TempWhseJnlLine2);
              IF RevertWarehouseEntry(TempWhseJnlLine2,"Job No.",PostJobConsumptionBeforePurch) THEN
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
            UNTIL TempWhseJnlLine2.NEXT = 0;
          TempWhseTrackingSpecification.DELETEALL;
        END;
        IF NextDetTaxEntryNo <> 0 THEN BEGIN
          DetailedTaxEntry.GET(NextDetTaxEntryNo);
          DetailedTaxEntry.SETRANGE("Document No.",DetailedTaxEntry."Document No.");
          DetailedTaxEntry.SETRANGE("Document Line No.",DetailedTaxEntry."Document Line No.");
          DetailedTaxEntry.SETRANGE("Main Component Entry No.",StartingEntryNo);
          DetailedTaxEntry.MODIFYALL("Item Ledger Entry No." ,ItemJnlLine."Item Shpt. Entry No.");
        END;
        IF (Type = Type::Item) AND PurchHeader.Invoice THEN BEGIN
          ClearItemChargeAssgntFilter;
          TempItemChargeAssgntPurch.SETCURRENTKEY(
            "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
          IF TempItemChargeAssgntPurch.FIND('-') THEN
            REPEAT
              TESTFIELD("Allow Item Charge Assignment");
              GetItemChargeLine(ItemChargePurchLine);
              ItemChargePurchLine.CALCFIELDS("Qty. Assigned");
              IF (ItemChargePurchLine."Qty. to Invoice" <> 0) OR
                 (ABS(ItemChargePurchLine."Qty. Assigned") < ABS(ItemChargePurchLine."Quantity Invoiced"))
              THEN BEGIN
                ChargeItemPerOrder := TRUE;
                PostItemChargeAssgntDiff := TRUE;
                OriginalItemJnlLine."Item Shpt. Entry No." := ItemJnlLine."Item Shpt. Entry No.";
                PostItemChargePerOrder(OriginalItemJnlLine,ItemChargePurchLine);
                TempItemChargeAssgntPurch.MARK(TRUE);
              END;
            UNTIL TempItemChargeAssgntPurch.NEXT = 0;
        END;
      END;
      IF QtyToBeInvoiced <> 0 THEN BEGIN
        TempPurchLine3."Qty. to Invoice" := QtyToBeInvoiced;
        TempPurchLine3."Qty. to Invoice (Base)" := QtyToBeInvoicedBase;
        ExciseInsertRGRegister.SetILENo(ItemJnlLine."Item Shpt. Entry No.");
        IF (QtyToBeInvoiced > 0) AND (TempPurchLine3."Excise Amount" <> 0) THEN
          ExciseInsertRGRegister.InitRG23DPurch(TempPurchLine3,1,2,2,PurchInvHeader."Buy-from Vendor No.",
            PurchInvHeader."No.",TempPurchLine3."Document Type")
        ELSE
          IF (QtyToBeInvoiced < 0) AND (TempPurchLine3."Excise Amount" <> 0) THEN
            ExciseInsertRGRegister.InitRG23DPurchReturn(TempPurchLine3,1,3,2,PurchCrMemoHeader."Buy-from Vendor No.",
              PurchCrMemoHeader."No.",TempPurchLine3."Document Type");
        ExciseInsertRGRegister.SetILENo(0);
      END;
      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(ItemJnlLine2@1001 : Record 83;ItemChargePurchLine@1002 : Record 39);
    VAR
      NonDistrItemJnlLine@1000 : Record 83;
      CurrExchRate@1003 : Record 330;
      OriginalAmt@1007 : Decimal;
      OriginalAmtACY@1008 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      SignFactor@1006 : Integer;
      AmountLoadedOnItem@1500002 : Decimal;
      AmountLoadedOnItem1@1500004 : Decimal;
      InputTaxCredit@1500001 : Decimal;
      CapitalGood@1500000 : Boolean;
      Sign@1500006 : Integer;
      ItemChargeQty@1500008 : Decimal;
      TotalChargeAmt2@1011 : Decimal;
      TotalChargeAmtLCY2@1012 : Decimal;
      TaxDetail@1500003 : Record 322;
      DocTransactionType@1500005 : 'Purchase,Sale';
      ItemChargeGSTAmountLoaded@1500007 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        PurchLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargePurchLine.Description;
        ItemJnlLine2."Document Line No." := ItemChargePurchLine."Line No.";
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Return Qty. to Ship (Base)",PurchLine."Qty. to Invoice (Base)")
        ELSE
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Qty. to Receive (Base)",PurchLine."Qty. to Invoice (Base)");
        IF ItemJnlLine2."Invoiced Quantity" = 0 THEN BEGIN
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        END;
        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        ItemChargeGSTAmountLoaded :=
          GSTManagement.GetItemChargeGSTAmount(
            DocTransactionType::Purchase,PurchLine."Document Type",
            PurchLine."Document No.","Document Line No.","Applies-to Doc. Type",
            "Applies-to Doc. No.","Applies-to Doc. Line No.",
            ItemChargePurchLine."Qty. to Invoice (Base)" / ItemChargePurchLine."Quantity (Base)",FALSE);
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");
        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",TotalChargeAmt2 + TotalPurchLine.Amount,PurchHeader."Currency Factor") -
            TotalChargeAmtLCY2 - TotalPurchLineLCY.Amount;
          ItemChargePurchLine."Tax Base Amount" :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",ItemChargePurchLine."Tax Base Amount",PurchHeader."Currency Factor");
          ItemChargePurchLine."Tax Amount" :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",ItemChargePurchLine."Tax Amount",PurchHeader."Currency Factor");
          ItemChargePurchLine."Amount Loaded on Inventory" :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",ItemChargePurchLine."Amount Loaded on Inventory",PurchHeader."Currency Factor");
          ItemChargePurchLine."Input Tax Credit Amount" :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",ItemChargePurchLine."Input Tax Credit Amount",PurchHeader."Currency Factor");
          ItemChargePurchLine."VAT able Purchase Tax Amount" :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",ItemChargePurchLine."VAT able Purchase Tax Amount",PurchHeader."Currency Factor");
        END ELSE
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          Sign := 1
        ELSE
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            Sign := -1;
        Factor := "Amount to Assign" / ItemChargePurchLine."Line Amount";
        ItemChargePurchLine."Tax Base Amount" := ItemChargePurchLine."Tax Base Amount" * Factor * Sign *
          ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        ItemChargePurchLine."Tax Amount" := ItemChargePurchLine."Tax Amount" * Factor * Sign *
          ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        ItemChargePurchLine."Amount Loaded on Inventory" := ItemChargePurchLine."Amount Loaded on Inventory" * Factor * Sign *
          ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        ItemChargePurchLine."Input Tax Credit Amount" := ItemChargePurchLine."Input Tax Credit Amount" * Factor * Sign *
          ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        ItemChargePurchLine."VAT able Purchase Tax Amount" := ItemChargePurchLine."VAT able Purchase Tax Amount" * Factor * Sign *
          ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        CalcInvSalesTaxAmount(ItemChargePurchLine,AmountLoadedOnItem1);
        IF PurchHeader.Invoice AND ExecuteDetailTaxEntryInsertion(ItemChargePurchLine."Tax Group Code") THEN BEGIN
          ItemChargePurchLine.Type := ItemChargePurchLine.Type::Item;
          ItemChargePurchLine."No." := "Item No.";
          ItemChargePurchLine.CALCFIELDS("Qty. to Assign");
          CASE "Applies-to Doc. Type" OF
            "Applies-to Doc. Type"::Order,"Applies-to Doc. Type"::Invoice:
              BEGIN
                PurchLine2.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemChargeQty := PurchLine2."Qty. to Receive (Base)";
              END;
            "Applies-to Doc. Type"::"Return Order","Applies-to Doc. Type"::"Credit Memo":
              BEGIN
                PurchLine2.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemChargeQty := PurchLine2."Return Qty. to Ship (Base)";
              END
          END;
          ChargeItemPerOrderPerLine := TRUE;
          InsertDetailedTaxEntry(ItemChargePurchLine,
            AmountLoadedOnItem,InputTaxCredit,CapitalGood,ItemChargePurchLine."Qty. to Assign",
            Sign * ItemJnlLine2."Invoiced Qty. (Base)",1);
          ChargeItemPerOrderPerLine := FALSE;
          ItemChargePurchLine.Type := ItemChargePurchLine.Type::"Charge (Item)";
          ItemChargePurchLine."No." := "Item Charge No.";
        END;
        IF (InputTaxCredit + AmountLoadedOnItem) <> 0 THEN
          ItemJnlLine2.Amount := ROUND(ItemJnlLine2.Amount + AmountLoadedOnItem);
        IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",PurchHeader."Document Type"::"Return Order"] THEN
          ItemJnlLine2.Amount -= ItemChargeGSTAmountLoaded
        ELSE
          ItemJnlLine2.Amount += ItemChargeGSTAmountLoaded;
        ChargeItemAmountLoadedOnItem := ChargeItemAmountLoadedOnItem + AmountLoadedOnItem;
        ChargeItemInputTaxCredit := ChargeItemInputTaxCredit + InputTaxCredit;
        ItemCapitalGood := CapitalGood;
        ItemJnlLine2.Amount := ROUND(ItemJnlLine2.Amount);
        IF ItemChargePurchLine."Tax Amount" = 0 THEN
          TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount
        ELSE BEGIN
          TaxAreaLine.RESET;
          TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
          TaxAreaLine.SETRANGE("Tax Area",ItemChargePurchLine."Tax Area Code");
          IF TaxAreaLine.FINDFIRST THEN BEGIN
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.RESET;
            TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code",ItemChargePurchLine."Tax Group Code");
            IF TaxDetail.FINDFIRST THEN BEGIN
              IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) THEN
                IF TaxDetail."Creditable Goods" THEN
                  TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount
                ELSE
                  TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + (ItemJnlLine2.Amount - ItemChargePurchLine."Tax Amount")
              ELSE
                  IF TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST THEN
                    TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + (ItemJnlLine2.Amount - ItemChargePurchLine."Tax Amount");
            END;
          END;
        END;
        ItemJnlLine2."Unit Cost" := ROUND(
            (ItemJnlLine2.Amount + AmountLoadedOnItem) /
            ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";
        ItemJnlLine2."Overhead Rate" := 0;

        IF PurchHeader."Currency Code" <> '' THEN
          ItemJnlLine2."Discount Amount" := ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",(ItemChargePurchLine."Inv. Discount Amount" +
                                                     ItemChargePurchLine."Line Discount Amount") *
                ItemJnlLine2."Invoiced Qty. (Base)" /
                ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
                PurchHeader."Currency Factor"),GLSetup."Amount Rounding Precision")
        ELSE
          ItemJnlLine2."Discount Amount" := ROUND(
              (ItemChargePurchLine."Line Discount Amount" + ItemChargePurchLine."Inv. Discount Amount") *
              ItemJnlLine2."Invoiced Qty. (Base)" /
              ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
              GLSetup."Amount Rounding Precision");

        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargePurchLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargePurchLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Dimension Set ID" := ItemChargePurchLine."Dimension Set ID";
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargePurchLine."Gen. Prod. Posting Group";
      END;
      WITH TempTrackingSpecificationInv DO BEGIN
        RESET;
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source ID",TempItemChargeAssgntPurch."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntPurch ."Applies-to Doc. Line No.");
        IF ISEMPTY THEN
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2)
        ELSE BEGIN
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalAmtACY := NonDistrItemJnlLine."Amount (ACY)";
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          IF ("Quantity (Base)" / OriginalQty) > 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;
          REPEAT
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            IF ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)") THEN BEGIN
              ItemJnlLine2."Quantity (Base)" := "Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2."Amount (ACY)" :=
                ROUND(OriginalAmtACY * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost (ACY)" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  Currency."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Item Shpt. Entry No." := "Item Ledger Entry No.";
              ItemJnlLine2."Applies-to Entry" := "Item Ledger Entry No.";
              ItemJnlLine2."Lot No." := "Lot No.";
              ItemJnlLine2."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= "Quantity (Base)";
              NonDistrItemJnlLine.Amount -= (ItemJnlLine2.Amount * SignFactor);
              NonDistrItemJnlLine."Amount (ACY)" -= (ItemJnlLine2."Amount (ACY)" * SignFactor);
              NonDistrItemJnlLine."Discount Amount" -= (ItemJnlLine2."Discount Amount" * SignFactor);
            END ELSE BEGIN
              NonDistrItemJnlLine."Quantity (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Unit Cost (ACY)" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                  Currency."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Applies-to Entry" := "Item Ledger Entry No.";
              NonDistrItemJnlLine."Lot No." := "Lot No.";
              NonDistrItemJnlLine."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            END;
          UNTIL NEXT = 0;
        END;
      END;
      IF NextDetTaxEntryNo <> 0 THEN BEGIN
        DetailedTaxEntry.GET(NextDetTaxEntryNo);
        DetailedTaxEntry.SETRANGE("Document No.",DetailedTaxEntry."Document No.");
        DetailedTaxEntry.SETRANGE("Document Line No.",DetailedTaxEntry."Document Line No.");
        DetailedTaxEntry.SETRANGE("Main Component Entry No.",StartingEntryNo);
        DetailedTaxEntry.MODIFYALL("Item Ledger Entry No." ,ItemJnlLine2."Item Shpt. Entry No.");
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerRcpt@5807(VAR PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1002 : Record 121;
      TempItemLedgEntry@1003 : TEMPORARY Record 32;
      ItemTrackingMgt@1005 : Codeunit 6500;
      Factor@1004 : Decimal;
      NonDistrQuantity@1010 : Decimal;
      NonDistrQtyToAssign@1009 : Decimal;
      NonDistrAmountToAssign@1008 : Decimal;
      QtyToAssign@1007 : Decimal;
      AmountToAssign@1006 : Decimal;
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
      DtldTaxEntry@1500000 : Record 16522;
    BEGIN
      IF NOT PurchRcptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text014);

      Sign := GetSign(PurchRcptLine."Quantity (Base)");

      IF PurchRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,PurchRcptLine."Quantity (Base)",PurchRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Purch. Rcpt. Line",0,PurchRcptLine."Document No.",
          '',0,PurchRcptLine."Line No.",PurchRcptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := PurchRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          PurchLineTaxAmount2 := 0;
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,PurchRcptLine."Indirect Cost %");
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,PurchRcptLine."Indirect Cost %");
          UNTIL TempItemLedgEntry.NEXT = 0;
          IF PurchLine."Tax Amount" <> PurchLineTaxAmount2 THEN BEGIN
            PurchLineTaxAmtDiff += PurchLine."Tax Amount" - PurchLineTaxAmount2;
            WITH DtldTaxEntry DO BEGIN
              SETCURRENTKEY("Document No.","Document Line No.","Main Component Entry No.",
                "Deferment No.","Tax Jurisdiction Code","Entry Type");
              SETRANGE("Document No.",GenJnlLineDocNo);
              SETRANGE("Document Type",GenJnlLineDocType);
              SETRANGE("Document Line No.",PurchLine."Line No.");
              IF FINDLAST THEN BEGIN
                "Tax Amount" += PurchLine."Tax Amount" - PurchLineTaxAmount2;
                "Input Credit/Output Tax Amount" += PurchLine."Tax Amount" - PurchLineTaxAmount2;
                MODIFY;
              END;
            END;
          END;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          PurchRcptLine."Item Rcpt. Entry No.",PurchRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          PurchRcptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerRetShpt@5811(VAR PurchLine@1000 : Record 39);
    VAR
      ReturnShptLine@1002 : Record 6651;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      ReturnShptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
      ReturnShptLine.TESTFIELD("Job No.",'');

      Sign := GetSign(PurchLine."Line Amount");
      WITH PurchLine DO
        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
          Sign := -Sign;

      IF ReturnShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-ReturnShptLine."Quantity (Base)",ReturnShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Shipment Line",0,ReturnShptLine."Document No.",
          '',0,ReturnShptLine."Line No.",ReturnShptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := -ReturnShptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := ABS(TempItemChargeAssgntPurch."Amount to Assign");
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,ReturnShptLine."Indirect Cost %");
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,ReturnShptLine."Indirect Cost %");
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          ReturnShptLine."Item Shpt. Entry No.",-ReturnShptLine."Quantity (Base)",
          ABS(TempItemChargeAssgntPurch."Amount to Assign") * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          ReturnShptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerTransfer@23(PurchLine@1000 : Record 39);
    VAR
      TransRcptLine@1002 : Record 5747;
      ItemApplnEntry@1003 : Record 339;
      DummyTrackingSpecification@1001 : Record 336;
      PurchLine2@1016 : Record 39;
      CurrExchRate@1017 : Record 330;
      TotalAmountToPostFCY@1004 : Decimal;
      TotalAmountToPostLCY@1005 : Decimal;
      TotalDiscAmountToPost@1006 : Decimal;
      AmountToPostFCY@1007 : Decimal;
      AmountToPostLCY@1008 : Decimal;
      DiscAmountToPost@1009 : Decimal;
      RemAmountToPostFCY@1010 : Decimal;
      RemAmountToPostLCY@1011 : Decimal;
      RemDiscAmountToPost@1012 : Decimal;
      CalcAmountToPostFCY@1013 : Decimal;
      CalcAmountToPostLCY@1014 : Decimal;
      CalcDiscAmountToPost@1015 : Decimal;
      OriginalAmountToPostLCY@1018 : Decimal;
      ItemApplnentryQty@1500002 : Decimal;
      Counter@1500001 : Integer;
      SkipLOC@1500000 : Boolean;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        TransRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
        PurchLine2 := PurchLine;
        PurchLine2."No." := "Item No.";
        PurchLine2."Variant Code" := TransRcptLine."Variant Code";
        PurchLine2."Location Code" := TransRcptLine."Transfer-to Code";
        PurchLine2."Bin Code" := '';
        PurchLine2."Line No." := "Document Line No.";

        IF TransRcptLine."Item Rcpt. Entry No." = 0 THEN
          PostItemChargePerITTransfer(PurchLine,TransRcptLine)
        ELSE BEGIN
          TotalAmountToPostFCY := "Amount to Assign";
          IF PurchHeader."Currency Code" <> '' THEN
            TotalAmountToPostLCY :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalAmountToPostFCY,PurchHeader."Currency Factor")
          ELSE
            TotalAmountToPostLCY := TotalAmountToPostFCY;

          TotalDiscAmountToPost :=
            ROUND(
              PurchLine2."Inv. Discount Amount" / PurchLine2.Quantity * "Qty. to Assign",
              GLSetup."Amount Rounding Precision");
          TotalDiscAmountToPost :=
            TotalDiscAmountToPost +
            ROUND(
              PurchLine2."Line Discount Amount" * ("Qty. to Assign" / PurchLine2."Qty. to Invoice"),
              GLSetup."Amount Rounding Precision");

          TotalAmountToPostLCY := ROUND(TotalAmountToPostLCY,GLSetup."Amount Rounding Precision");
          IF PurchHeader."Currency Code" <> '' THEN
            OriginalAmountToPostLCY :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                PurchLine2."Line Amount",PurchHeader."Currency Factor")
           ELSE
             OriginalAmountToPostLCY := PurchLine2."Line Amount";
          ChargeItemAssgnt := TRUE;

          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.",TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETRANGE("Cost Application",TRUE);
          Counter := ItemApplnEntry.COUNT;
          SkipLOC := FALSE;
          CLEAR(ItemApplnentryQty);
          IF ItemApplnEntry.FINDSET THEN
            REPEAT
              IF Counter > 1 THEN BEGIN
                ItemApplnentryQty += ItemApplnEntry.Quantity;
                SkipLOC := TRUE;
              END ELSE BEGIN
                ItemApplnentryQty += ItemApplnEntry.Quantity;
                SkipLOC := FALSE;
              END;
              IF NOT SkipLOC THEN BEGIN
                PurchLine2."Appl.-to Item Entry" := ItemApplnEntry."Item Ledger Entry No.";
                CalcAmountToPostFCY :=
                  ((TotalAmountToPostFCY / TransRcptLine."Quantity (Base)") * ItemApplnentryQty) +
                  RemAmountToPostFCY;
                AmountToPostFCY := ROUND(CalcAmountToPostFCY);
                RemAmountToPostFCY := CalcAmountToPostFCY - AmountToPostFCY;
                CalcAmountToPostLCY :=
                  ((TotalAmountToPostLCY / TransRcptLine."Quantity (Base)") * ItemApplnentryQty) +
                  RemAmountToPostLCY;
                AmountToPostLCY := ROUND(CalcAmountToPostLCY);
                RemAmountToPostLCY := CalcAmountToPostLCY - AmountToPostLCY;
                CalcDiscAmountToPost :=
                  ((TotalDiscAmountToPost / TransRcptLine."Quantity (Base)") * ItemApplnentryQty) +
                  RemDiscAmountToPost;
                DiscAmountToPost := ROUND(CalcDiscAmountToPost);
                RemDiscAmountToPost := CalcDiscAmountToPost - DiscAmountToPost;
                PurchLine2.Amount := AmountToPostLCY;
                IF TotalAmountToPostLCY <> 0 THEN
                  PurchLine2."Tax Base Amount" := (PurchLine2."Tax Base Amount" / OriginalAmountToPostLCY) * AmountToPostLCY;
                PurchLine2."Inv. Discount Amount" := DiscAmountToPost;
                PurchLine2."Line Discount Amount" := 0;
                PurchLine2."Unit Cost" :=
                  ROUND(AmountToPostFCY / ItemApplnentryQty,GLSetup."Unit-Amount Rounding Precision");
                PurchLine2."Unit Cost (LCY)" :=
                  ROUND(AmountToPostLCY / ItemApplnentryQty,GLSetup."Unit-Amount Rounding Precision");
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  PurchLine2.Amount := -PurchLine2.Amount;
                PostItemJnlLine(
                  PurchLine2,
                  0,0,
                  ItemApplnentryQty,ItemApplnentryQty,
                  PurchLine2."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
              END;
              Counter := Counter - 1;
            UNTIL ItemApplnEntry.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerITTransfer@43(VAR PurchLine@1000 : Record 39;TransRcptLine@1017 : Record 5747);
    VAR
      TempItemLedgEntry@1016 : TEMPORARY Record 32;
      ItemTrackingMgt@1001 : Codeunit 6500;
      Factor@1023 : Decimal;
      NonDistrQuantity@1022 : Decimal;
      NonDistrQtyToAssign@1021 : Decimal;
      NonDistrAmountToAssign@1020 : Decimal;
      QtyToAssign@1019 : Decimal;
      AmountToAssign@1018 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Transfer Receipt Line",0,TransRcptLine."Document No.",
          '',0,TransRcptLine."Line No.",TransRcptLine."Quantity (Base)");
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := TransRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := "Qty. to Assign";
          NonDistrAmountToAssign := "Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042);
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerSalesShpt@41(VAR PurchLine@1000 : Record 39);
    VAR
      SalesShptLine@1002 : Record 111;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      Sign@1001 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT SalesShptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text042);
      SalesShptLine.TESTFIELD("Job No.",'');

      Sign := -GetSign(SalesShptLine."Quantity (Base)");

      IF SalesShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
          '',0,SalesShptLine."Line No.",SalesShptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := -SalesShptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          SalesShptLine."Item Shpt. Entry No.",-SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostItemChargePerRetRcpt@37(VAR PurchLine@1001 : Record 39);
    VAR
      ReturnRcptLine@1000 : Record 6661;
      TempItemLedgEntry@1011 : TEMPORARY Record 32;
      ItemTrackingMgt@1010 : Codeunit 6500;
      Factor@1009 : Decimal;
      NonDistrQuantity@1008 : Decimal;
      NonDistrQtyToAssign@1007 : Decimal;
      NonDistrAmountToAssign@1006 : Decimal;
      QtyToAssign@1005 : Decimal;
      AmountToAssign@1004 : Decimal;
      Sign@1003 : Decimal;
      DistributeCharge@1002 : Boolean;
    BEGIN
      IF NOT ReturnRcptLine.GET(
           TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text042);
      ReturnRcptLine.TESTFIELD("Job No.",'');
      Sign := GetSign(ReturnRcptLine."Quantity (Base)");

      IF ReturnRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
            TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
          '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := ReturnRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      TempHandlingSpecification2@1005 : TEMPORARY Record 336;
      ItemEntryRelation@1006 : Record 6507;
      CurrExchRate@1002 : Record 330;
    BEGIN
      SalesOrderHeader.GET(
        SalesOrderHeader."Document Type"::Order,
        PurchLine."Sales Order No.");
      SalesOrderLine.GET(
        SalesOrderLine."Document Type"::Order,
        PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");

      ItemJnlLine.INIT;
      ItemJnlLine."Source Posting Group" := SalesOrderHeader."Customer Posting Group";
      ItemJnlLine."Salespers./Purch. Code" := SalesOrderHeader."Salesperson Code";
      ItemJnlLine."Country/Region Code" := GetCountryCode(SalesOrderLine,SalesOrderHeader);
      ItemJnlLine."Reason Code" := SalesOrderHeader."Reason Code";
      ItemJnlLine."Posting No. Series" := SalesOrderHeader."Posting No. Series";
      ItemJnlLine."Item No." := SalesOrderLine."No.";
      ItemJnlLine.Description := SalesOrderLine.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := SalesOrderLine."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := SalesOrderLine."Dimension Set ID";
      ItemJnlLine."Location Code" := SalesOrderLine."Location Code";
      ItemJnlLine."Inventory Posting Group" := SalesOrderLine."Posting Group";
      ItemJnlLine."Gen. Bus. Posting Group" := SalesOrderLine."Gen. Bus. Posting Group";
      ItemJnlLine."Gen. Prod. Posting Group" := SalesOrderLine."Gen. Prod. Posting Group";
      ItemJnlLine."Applies-to Entry" := SalesOrderLine."Appl.-to Item Entry";
      ItemJnlLine."Transaction Type" := SalesOrderLine."Transaction Type";
      ItemJnlLine."Transport Method" := SalesOrderLine."Transport Method";
      ItemJnlLine."Entry/Exit Point" := SalesOrderLine."Exit Point";
      ItemJnlLine.Area := SalesOrderLine.Area;
      ItemJnlLine."Transaction Specification" := SalesOrderLine."Transaction Specification";
      ItemJnlLine."Drop Shipment" := SalesOrderLine."Drop Shipment";
      ItemJnlLine."Posting Date" := PurchHeader."Posting Date";
      ItemJnlLine."Document Date" := PurchHeader."Document Date";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
      ItemJnlLine."Document No." := SalesOrderHeader."Shipping No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Shipment";
      ItemJnlLine."Document Line No." := SalesOrderLine."Line No.";
      ItemJnlLine.Quantity := QtyToBeShipped;
      ItemJnlLine."Quantity (Base)" := QtyToBeShippedBase;
      ItemJnlLine."Invoiced Quantity" := 0;
      ItemJnlLine."Invoiced Qty. (Base)" := 0;
      ItemJnlLine."Unit Cost" := SalesOrderLine."Unit Cost (LCY)";
      ItemJnlLine."Source Currency Code" := PurchHeader."Currency Code";
      ItemJnlLine."Unit Cost (ACY)" := SalesOrderLine."Unit Cost";
      ItemJnlLine.Amount := SalesOrderLine.Amount * QtyToBeShipped / SalesOrderLine.Quantity;
      IF SalesOrderHeader."Currency Code" <> '' THEN BEGIN
        ItemJnlLine.Amount :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              SalesOrderHeader."Posting Date",SalesOrderHeader."Currency Code",
              ItemJnlLine.Amount,SalesOrderHeader."Currency Factor"));
        ItemJnlLine."Discount Amount" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              SalesOrderHeader."Posting Date",SalesOrderHeader."Currency Code",
              SalesOrderLine."Line Discount Amount",SalesOrderHeader."Currency Factor"));
      END ELSE BEGIN
        ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        ItemJnlLine."Discount Amount" := SalesOrderLine."Line Discount Amount";
      END;
      ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
      ItemJnlLine."Source No." := SalesOrderLine."Sell-to Customer No.";
      ItemJnlLine."Invoice-to Source No." := SalesOrderLine."Bill-to Customer No.";
      ItemJnlLine."Source Code" := SrcCode;
      ItemJnlLine."Variant Code" := SalesOrderLine."Variant Code";
      ItemJnlLine."Item Category Code" := SalesOrderLine."Item Category Code";
      ItemJnlLine."Product Group Code" := SalesOrderLine."Product Group Code";
      ItemJnlLine."Bin Code" := SalesOrderLine."Bin Code";
      ItemJnlLine."Unit of Measure Code" := SalesOrderLine."Unit of Measure Code";
      ItemJnlLine."Purchasing Code" := SalesOrderLine."Purchasing Code";
      ItemJnlLine."Qty. per Unit of Measure" := SalesOrderLine."Qty. per Unit of Measure";
      ItemJnlLine."Derived from Blanket Order" := SalesOrderLine."Blanket Order No." <> '';
      ItemJnlLine."Applies-to Entry" := ItemLedgShptEntryNo;

      IF SalesOrderLine."Job Contract Entry No." = 0 THEN BEGIN
        TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,TRUE);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine);
        // Handle Item Tracking
        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
          IF TempHandlingSpecification2.FINDSET THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification."Source Type" := DATABASE::"Sales Line";
              TempTrackingSpecification."Source Subtype" := SalesOrderLine."Document Type";
              TempTrackingSpecification."Source ID" := SalesOrderLine."Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := SalesOrderLine."Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              ItemEntryRelation.INIT;
              ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
              ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
              ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
              ItemEntryRelation."Source Type" := DATABASE::"Sales Shipment Line";
              ItemEntryRelation."Source ID" := SalesOrderHeader."Shipping No.";
              ItemEntryRelation."Source Ref. No." := SalesOrderLine."Line No.";
              ItemEntryRelation."Order No." := SalesOrderLine."Document No.";
              ItemEntryRelation."Order Line No." := SalesOrderLine."Line No.";
              ItemEntryRelation.INSERT;
            UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4();
    VAR
      ReserveSalesLine@1000 : Codeunit 99000832;
      SalesSetup@1001 : Record 311;
    BEGIN
      DropShptPostBuffer.RESET;
      IF DropShptPostBuffer.ISEMPTY THEN
        EXIT;
      SalesSetup.GET;
      IF DropShptPostBuffer.FINDSET THEN BEGIN
        REPEAT
          SalesOrderHeader.GET(
            SalesOrderHeader."Document Type"::Order,
            DropShptPostBuffer."Order No.");
          SalesOrderHeader."Last Shipping No." := SalesOrderHeader."Shipping No.";
          SalesOrderHeader."Shipping No." := '';
          SalesOrderHeader.MODIFY;
          ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesOrderHeader);
          DropShptPostBuffer.SETRANGE("Order No.",DropShptPostBuffer."Order No.");
          REPEAT
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              DropShptPostBuffer."Order No.",DropShptPostBuffer."Order Line No.");
            SalesOrderLine."Quantity Shipped" := SalesOrderLine."Quantity Shipped" + DropShptPostBuffer.Quantity;
            SalesOrderLine."Qty. Shipped (Base)" := SalesOrderLine."Qty. Shipped (Base)" + DropShptPostBuffer."Quantity (Base)";
            SalesOrderLine.InitOutstanding;
            IF SalesSetup."Default Quantity to Ship" <> SalesSetup."Default Quantity to Ship"::Blank THEN
              SalesOrderLine.InitQtyToShip
            ELSE BEGIN
              SalesOrderLine."Qty. to Ship" := 0;
              SalesOrderLine."Qty. to Ship (Base)" := 0;
            END;
            SalesOrderLine.MODIFY;
          UNTIL DropShptPostBuffer.NEXT = 0;
          DropShptPostBuffer.SETRANGE("Order No.");
        UNTIL DropShptPostBuffer.NEXT = 0;
        DropShptPostBuffer.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE FillInvPostingBuffer@5804(PurchLine@1000 : Record 39;PurchLineACY@1001 : Record 39);
    VAR
      GenPostingSetup@1007 : Record 252;
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
      AmtToDefer@1011 : Decimal;
      AmtToDeferACY@1010 : Decimal;
      TotalVATBase@1015 : Decimal;
      TotalVATBaseACY@1016 : Decimal;
      DeferralAccount@1009 : Code[20];
      PurchAccount@1008 : Code[20];
      AmountLoadedOnItem@1500002 : Decimal;
      InputTaxCredit@1500000 : Decimal;
      CapitalGood@1500001 : Boolean;
      TDSExists@1500004 : Boolean;
      TotalTaxAmount@1500003 : Decimal;
      TaxBaseAmount@1500005 : Decimal;
      TotalTaxAmountACY@1500006 : Decimal;
      TaxBaseAmountACY@1500007 : Decimal;
      AmountLoadedonInventory@1500008 : Decimal;
      InputOutputTaxAmount@1500009 : Decimal;
      CapitalGoods@1500010 : Boolean;
      VatablePurchaseTaxAmount@1500011 : Decimal;
      CurrExchRate@1012 : Record 330;
      DocTransactionType@1500015 : 'Purchase,Sales';
    BEGIN
      GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");

      ExecuteTDSBuff := FALSE;
      CLEAR(TDSInvBuf[1]);
      TDSInvBuf[1]."TDS Nature of Deduction" := PurchLine."TDS Nature of Deduction";
      TDSInvBuf[1]."Nature of Remittance"  := PurchLine."Nature of Remittance";
      TDSInvBuf[1]."Act Applicable" := PurchLine."Act Applicable";
      TDSInvBuf[1]."Country Code" := PurchLine."Country Code";
      TDSInvBuf[1]."Assessee Code" := PurchLine."Assessee Code";
      TDSInvBuf[1]."TDS Group" := PurchLine."TDS Group";
      TDSInvBuf[1]."Work Tax Group" := PurchLine."Work Tax Group";
      TDSInvBuf[1]."Work Tax Nature of Deduction" := PurchLine."Work Tax Nature Of Deduction";
      TDSInvBuf[1]."TDS Category" := PurchLine."TDS Category";
      TDSInvBuf[1]."Concessional Code" := PurchLine."Concessional Code";
      TDSInvBuf[1]."TDS %" := PurchLine."TDS %";
      TDSExists := GetTotalTDSAmt(PurchLine."TDS Nature of Deduction");
      IF TDSExists THEN BEGIN
        IF NOT ((PurchLine."TDS Amount" = 0) AND (PurchLine."TDS Base Amount" = 0)) THEN BEGIN
          TDSInvBuf[1]."TDS Base Amount" := PurchLine."TDS Base Amount";
          TDSInvBuf[1]."Invoice Amount" := PurchLine."TDS Base Amount";
        END;
      END ELSE BEGIN
        TDSInvBuf[1]."TDS Base Amount" := PurchLine."TDS Base Amount";
        TDSInvBuf[1]."Invoice Amount" := PurchLine."TDS Base Amount";
      END;
      TDSInvBuf[1]."TDS Amount" := PurchLine."TDS Amount";
      TDSInvBuf[1]."Surcharge %" := PurchLine."Surcharge %";
      TDSInvBuf[1]."Surcharge Base Amount" := PurchLine."Surcharge Base Amount";
      TDSInvBuf[1]."Surcharge Amount" := PurchLine."Surcharge Amount";
      TDSInvBuf[1]."TDS Amount Including Surcharge" := PurchLine."TDS Amount Including Surcharge";
      TDSInvBuf[1]."eCESS %" := PurchLine."eCESS % on TDS";
      TDSInvBuf[1]."SHE Cess %" := PurchLine."SHE Cess % On TDS";
      TDSInvBuf[1]."eCESS Amount" := PurchLine."eCESS on TDS Amount";
      TDSInvBuf[1]."SHE Cess Amount" := PurchLine."SHE Cess on TDS Amount";
      TDSInvBuf[1]."Total TDS Including SHE Cess" := PurchLine."Total TDS Including SHE CESS";
      TDSInvBuf[1]."Work Tax %" := PurchLine."Work Tax %";
      TDSInvBuf[1]."Work Tax Base Amount" := PurchLine."Work Tax Base Amount";
      TDSInvBuf[1]."Work Tax Amount" := PurchLine."Work Tax Amount";
      TDSInvBuf[1]."Bal. TDS Including SHE Cess" := PurchLine."Bal. TDS Including SHE CESS";
      TDSInvBuf[1]."Source Currency Amount" := PurchLineACY."Bal. TDS Including SHE CESS";
      TDSInvBuf[1]."Source Curr. Work Tax Amount" := PurchLineACY."Work Tax Amount";
      TDSInvBuf[1]."Service Tax Including SHE Cess" :=
        PurchLine.FullServiceTaxAmount + PurchLine.FullServiceTaxSBCAmount +
        PurchLine.KKCessAmount;
      TDSInvBuf[1]."Per Contract" := PurchLine."Per Contract";
      TDSInvBuf[1]."Global Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      TDSInvBuf[1]."Global Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      TDSInvBuf[1]."Dimension Set ID" := PurchLine."Dimension Set ID";
      TDSInvBuf[1]."TDS Line Amount" := PurchLine."TDS Base Amount";
      InvPostingBuffer[1].PreparePurchase(PurchLine);
      InitAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,AmtToDefer,AmtToDeferACY,DeferralAccount);
      TotalTaxAmount := PurchLine."Tax Amount";
      TaxBaseAmount := PurchLine."Tax Base Amount";
      TotalTaxAmountACY := PurchLineACY."Tax Amount";
      TaxBaseAmountACY := PurchLineACY."Tax Base Amount";
      IF PurchLine."Excise Accounting Type" = PurchLine."Excise Accounting Type"::"With CENVAT" THEN BEGIN
        IF (NOT PurchLine."Excise Loading on Inventory") OR PurchHeader.Trading THEN BEGIN
          IF NOT PurchLine."Excise Refund" THEN BEGIN
            TotalAmount :=
              PurchLine.Amount +
              RoundExcisePrecision(PurchLine."CESS Amount" + PurchLine."Custom eCess Amount" + PurchLine."Custom SHECess Amount");
            TotalAmountACY :=
              PurchLineACY.Amount +
              RoundExcisePrecision(PurchLineACY."CESS Amount" + PurchLineACY."Custom eCess Amount" + PurchLineACY."Custom SHECess Amount");
          END ELSE BEGIN
            TotalAmount := PurchLine.Amount;
            TotalAmountACY := PurchLineACY.Amount;
          END;
          FillExcisePostingBuffer(PurchLine,PurchLineACY);
          IF NOT PurchLine."SetOff Available" AND NOT PurchLine."Excise Refund" THEN BEGIN
            TotalAmount := TotalAmount + RoundExcisePrecision(PurchLine."eCess Amount" + PurchLine."SHE Cess Amount");
            TotalAmountACY := TotalAmountACY + RoundExcisePrecision(PurchLineACY."eCess Amount" + PurchLineACY."SHE Cess Amount");
          END;
        END ELSE BEGIN
          TotalAmount := PurchLine.Amount + PurchLine."Excise Amount";
          TotalAmountACY := PurchLineACY.Amount + PurchLineACY."Excise Amount";
        END;
      END ELSE BEGIN
        TotalAmount := PurchLine.Amount + PurchLine."Excise Amount";
        TotalAmountACY := PurchLineACY.Amount + PurchLineACY."Excise Amount";
      END;
      IF PurchLine.Type = PurchLine.Type::"Fixed Asset" THEN BEGIN
        TotalAmount := TotalAmount + PurchLine."Amount Added to Inventory";
        TotalAmountACY := TotalAmountACY + PurchLineACY."Amount Added to Inventory";
      END;

      IF (PurchLine.Type = PurchLine.Type::Item) OR (PurchLine.Type = PurchLine.Type::"Charge (Item)") THEN BEGIN
        IF (PurchLine.Type = PurchLine.Type::"Charge (Item)") AND
          (PurchLine."GST Credit" = PurchLine."GST Credit"::"Non-Availment") THEN BEGIN
          TotalAmount +=
            GSTManagement.GetItemChargeGSTAmount(
              DocTransactionType::Purchase,PurchLine."Document Type",
              PurchLine."Document No.",PurchLine."Line No.",PurchLine."Document Type",
              PurchLine."Document No.",PurchLine."Line No.",
              PurchLine."Qty. to Invoice (Base)" / PurchLine."Quantity (Base)",TRUE);
          IF ChargeItemAssgnt AND (GSTAmountLoaded <> 0) THEN
            IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                                               PurchHeader."Document Type"::"Return Order"] THEN
              TotalAmount += GSTAmountLoaded
            ELSE
              TotalAmount -= GSTAmountLoaded;
        END;
        LoopCount := LoopCount - 1;
        IF PurchHeader."Currency Factor" <> 0 THEN
          PurchLineTaxAmount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              PurchHeader."Posting Date",PurchHeader."Currency Code",PurchLineTaxAmount,PurchHeader."Currency Factor");
        IF PurchLineTaxAmount <> 0 THEN BEGIN
          PurchLineTaxAmount := PurchLineTaxAmount - ChargeItemInputTaxCredit - ChargeItemAmountLoadedOnItem;
          TotalChargeItemInputTaxCredit += ChargeItemInputTaxCredit;
          TotalChrgItemAmtLoadedOnItem += ChargeItemAmountLoadedOnItem;
        END;
        IF LoopCount = 0 THEN BEGIN
          IF TotalChargeItemInputTaxCredit <> 0 THEN
            ChargeItemInputTaxCredit := ChargeItemInputTaxCredit + PurchLineTaxAmount;
          IF TotalChrgItemAmtLoadedOnItem <> 0 THEN
            ChargeItemAmountLoadedOnItem := ChargeItemAmountLoadedOnItem + PurchLineTaxAmount;
        END;
        IF NOT ChargeItemPerOrder THEN BEGIN
          IF (PurchLine.Type = PurchLine.Type::Item) OR ChargeItemAssgnt THEN BEGIN
            TotalAmount := TotalAmount + ItemAmountLoadedOnItem;
            IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                                               PurchHeader."Document Type"::"Return Order"] THEN
              TotalAmount := TotalAmount - GSTAmountLoaded
            ELSE
              TotalAmount := TotalAmount + GSTAmountLoaded + CustomDuty ;
            TotalAmountACY := TotalAmountACY + ROUND
              (CurrExchRate.ExchangeAmtLCYToFCY(
                  PurchHeader."Posting Date",PurchHeader."Currency Code",
                  ItemAmountLoadedOnItem,PurchHeader."Currency Factor"));
            AmountLoadedonInventory := ItemAmountLoadedOnItem;
            InputOutputTaxAmount := ItemInputTaxCredit;
            CapitalGoods := ItemCapitalGood;
          END;
        END ELSE BEGIN
          IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",PurchHeader."Document Type"::"Return Order"] THEN
            TotalAmount := TotalAmount + ItemAmountLoadedOnItem + ChargeItemAmountLoadedOnItem - GSTAmountLoaded + CustomDuty
          ELSE
            TotalAmount := TotalAmount + ItemAmountLoadedOnItem + ChargeItemAmountLoadedOnItem + GSTAmountLoaded + CustomDuty ;
          TotalAmountACY := TotalAmountACY + PurchLineACY."Amount Loaded on Inventory" + ROUND
            (CurrExchRate.ExchangeAmtLCYToFCY(
                PurchHeader."Posting Date",PurchHeader."Currency Code",
                ChargeItemAmountLoadedOnItem,PurchHeader."Currency Factor"));
          AmountLoadedonInventory := ItemAmountLoadedOnItem + ChargeItemAmountLoadedOnItem;
          IF PurchHeader."Currency Factor" <> 0 THEN
            InputOutputTaxAmount :=
              IndianSalesTaxCalculate.RoundVATPrecision(
                CurrExchRate.ExchangeAmtFCYToLCY(PurchHeader."Posting Date",PurchHeader."Currency Code",PurchLineACY."Tax Amount",PurchHeader."Currency Factor") +
                ChargeItemInputTaxCredit)
          ELSE
            InputOutputTaxAmount := ItemInputTaxCredit + ChargeItemInputTaxCredit;
          CapitalGoods := ItemCapitalGood;
        END
      END ELSE BEGIN
        IF ExecuteDetailTaxEntryInsertion(PurchLine."Tax Group Code") THEN
          InsertDetailedTaxEntry(PurchLine,AmountLoadedOnItem,InputTaxCredit,CapitalGood,
            PurchLine."Qty. to Invoice",PurchLine."Qty. to Invoice (Base)",1);
        IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",PurchHeader."Document Type"::"Return Order"] THEN
        BEGIN
          TotalAmount := TotalAmount + AmountLoadedOnItem - GSTAmountLoaded;
        TotalAmountACY := TotalAmountACY +
          CurrExchRate.ExchangeAmtLCYToFCY(
            PurchHeader."Posting Date",PurchHeader."Currency Code",
              AmountLoadedOnItem,PurchHeader."Currency Factor") - GSTAmountLoaded;
        END ELSE BEGIN
          TotalAmount := TotalAmount + AmountLoadedOnItem + GSTAmountLoaded + CustomDuty;
          TotalAmountACY := TotalAmountACY +
            CurrExchRate.ExchangeAmtLCYToFCY(
              PurchHeader."Posting Date",PurchHeader."Currency Code",
              AmountLoadedOnItem,PurchHeader."Currency Factor") + GSTAmountLoaded;
        END;
        AmountLoadedonInventory := AmountLoadedOnItem;
        InputOutputTaxAmount := InputTaxCredit;
        CapitalGoods := CapitalGood;
      END;
      VatablePurchaseTaxAmount := PurchLine."VAT able Purchase Tax Amount";
      IF PurchSetup."Discount Posting" IN
         [PurchSetup."Discount Posting"::"Invoice Discounts",PurchSetup."Discount Posting"::"All Discounts"]
      THEN BEGIN
        CalcInvoiceDiscountPosting(PurchLine,PurchLineACY);

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Inv. Disc. Account");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            FillInvPostingBufferFADiscount(
              GenPostingSetup,PurchLine."No.",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;
      IF PurchSetup."Discount Posting" IN
         [PurchSetup."Discount Posting"::"Line Discounts",PurchSetup."Discount Posting"::"All Discounts"]
      THEN BEGIN
        CalcLineDiscountPosting(PurchLine,PurchLineACY);

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Line Disc. Account");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            FillInvPostingBufferFADiscount(
              GenPostingSetup,PurchLine."No.",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;
      // Don't adjust VAT Base Amounts when Deferrals are included
      TotalVATBase := TotalAmount;
      TotalVATBaseACY := TotalAmountACY;
      AdjustTotalAmountForDeferrals(PurchLine,AmtToDefer,AmtToDeferACY,TotalAmount,TotalAmountACY);
      IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Reverse Charge VAT" THEN BEGIN
        IF PurchLine."Deferral Code" <> '' THEN
          InvPostingBuffer[1].SetAmounts(
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference",
            TotalVATBase,
            TotalVATBaseACY)
        ELSE
          InvPostingBuffer[1].SetAmountsNoVAT(
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference")
      END ELSE
        IF (NOT PurchLine."Use Tax") OR (PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Sales Tax") THEN BEGIN
          InvPostingBuffer[1].SetAmounts(
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference",
            TotalVATBase,
            TotalVATBaseACY);
        END ELSE
          InvPostingBuffer[1].SetAmountsNoVAT(
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference");
      IF PurchHeader."Currency Code" <> '' THEN
        InputOutputTaxAmount := IndianSalesTaxCalculate.RoundVATPrecision(ROUND(InputOutputTaxAmount));
      IF (PurchLine.Type <> PurchLine.Type::"Charge (Item)") OR ChargeItemAssgnt OR NonCSTVATChrgAmt THEN
        InvPostingBuffer[1].SetTaxAmounts(TotalTaxAmount,TaxBaseAmount,TotalTaxAmountACY,TaxBaseAmountACY,PurchLine."Tax %");

      InvPostingBuffer[1].SetTaxAmountswithVAT(AmountLoadedonInventory,InputOutputTaxAmount,CapitalGoods,VatablePurchaseTaxAmount,0);

      IF PurchLine."Service Tax Amount" <> 0 THEN BEGIN
        FillSTaxPostingBuffer(PurchLine,PurchLineACY);
        STaxPostingBuffer2.TRANSFERFIELDS(STaxPostingBuffer[2]);
        STaxPostingBuffer2.Amount := STaxPostingBuffer2.Amount +
          STaxPostingBuffer2."Service Tax Base Amount" + STaxPostingBuffer2.FullTaxAmount +
          STaxPostingBuffer2.FullTaxSBCAmount + STaxPostingBuffer2.KKCessAmount;
        IF NOT STaxPostingBuffer2.INSERT THEN
          STaxPostingBuffer2.MODIFY;
      END;
      IF PurchLine."GST Base Amount"<> 0 THEN
        FillGSTPostingBuffer(PurchLine);
      IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
        InvPostingBuffer[1].SetSalesTax(PurchLine);
      IF (PurchLine.Type = PurchLine.Type::"G/L Account") OR (PurchLine.Type = PurchLine.Type::"Fixed Asset") THEN BEGIN
        PurchAccount := PurchLine."No.";
        InvPostingBuffer[1].SetAccount(
          DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY)
      END ELSE
        IF PurchLine."Document Type" IN [PurchLine."Document Type"::"Return Order",PurchLine."Document Type"::"Credit Memo"] THEN
        BEGIN
           IF PurchHeader.Trading AND ExciseExistInStructure THEN BEGIN
            GenPostingSetup.TESTFIELD("Purch. Cr. Memo Acc. (Trading)");
            PurchAccount := GenPostingSetup."Purch. Cr. Memo Acc. (Trading)";
              InvPostingBuffer[1].SetAccount(
              DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
          END ELSE BEGIN
            GenPostingSetup.TESTFIELD("Purch. Credit Memo Account");
            PurchAccount := GenPostingSetup."Purch. Credit Memo Account";
            InvPostingBuffer[1].SetAccount(
              DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY)
          END;
        END ELSE
          IF PurchHeader.Trading AND ExciseExistInStructure THEN BEGIN
            GenPostingSetup.TESTFIELD("Purch. Account (Trading)");
            PurchAccount := GenPostingSetup."Purch. Account (Trading)";
            InvPostingBuffer[1].SetAccount(
              DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
          END ELSE BEGIN
            GenPostingSetup.TESTFIELD("Purch. Account");
            PurchAccount := GenPostingSetup."Purch. Account";
            InvPostingBuffer[1].SetAccount(
              DefaultGLAccount(PurchLine."Deferral Code",AmtToDefer,PurchAccount,DeferralAccount),
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
          END;
      ExecuteTDSBuff := TRUE;
      UpdInvPostingBuffer;
      FillDeferralPostingBuffer(PurchLine,AmtToDefer,AmtToDeferACY,DeferralAccount,PurchAccount);
    END;

    LOCAL PROCEDURE FillInvPostingBufferFADiscount@121(GenPostingSetup@1005 : Record 252;AccountNo@1004 : Code[20];TotalVAT@1003 : Decimal;TotalVATACY@1002 : Decimal;TotalAmount@1001 : Decimal;TotalAmountACY@1000 : Decimal);
    VAR
      DeprBook@1008 : Record 5611;
    BEGIN
      DeprBook.GET(InvPostingBuffer[1]."Depreciation Book Code");
      IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
        GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
        InvPostingBuffer[1].SetAccount(
          AccountNo,
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY);
        UpdInvPostingBuffer;
        InvPostingBuffer[1].ReverseAmounts;
        InvPostingBuffer[1].SetAccount(
          GenPostingSetup."Purch. FA Disc. Account",
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY);
        InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
        UpdInvPostingBuffer;
        InvPostingBuffer[1].ReverseAmounts;
      END;
    END;

    LOCAL PROCEDURE UpdInvPostingBuffer@5();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      InvPostingBuffer[1]."Dimension Set ID" := PurchLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(InvPostingBuffer[1]."Dimension Set ID",
        InvPostingBuffer[1]."Global Dimension 1 Code",InvPostingBuffer[1]."Global Dimension 2 Code");

      IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
        FALineNo := FALineNo + 1;
        InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
      END;
      InvPostingBuffer[2] := InvPostingBuffer[1];
      IF InvPostingBuffer[2].FIND THEN BEGIN
        InvPostingBuffer[2].Amount :=
          InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
        InvPostingBuffer[2]."Amount Loaded on Inventory" :=
          InvPostingBuffer[2]."Amount Loaded on Inventory" + InvPostingBuffer[1]."Amount Loaded on Inventory";
        InvPostingBuffer[2]."Input/Output Tax Amount" :=
          InvPostingBuffer[2]."Input/Output Tax Amount" + InvPostingBuffer[1]."Input/Output Tax Amount";
        InvPostingBuffer[2]."VAT Amount" :=
          InvPostingBuffer[2]."VAT Amount" + InvPostingBuffer[1]."VAT Amount";
        InvPostingBuffer[2]."VAT Base Amount" :=
          InvPostingBuffer[2]."VAT Base Amount" + InvPostingBuffer[1]."VAT Base Amount";
        InvPostingBuffer[2]."VAT Difference" :=
          InvPostingBuffer[2]."VAT Difference" + InvPostingBuffer[1]."VAT Difference";
        InvPostingBuffer[2]."Amount (ACY)" :=
          InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
        InvPostingBuffer[2]."VAT Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Amount (ACY)" + InvPostingBuffer[1]."VAT Amount (ACY)";
        InvPostingBuffer[2]."VAT Base Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Base Amount (ACY)" +
          InvPostingBuffer[1]."VAT Base Amount (ACY)";
        InvPostingBuffer[2].Quantity :=
          InvPostingBuffer[2].Quantity + InvPostingBuffer[1].Quantity;
        InvPostingBuffer[2]."Tax Amount" := InvPostingBuffer[2]."Tax Amount" + InvPostingBuffer[1]."Tax Amount";
        InvPostingBuffer[2]."Tax Amount (ACY)" := InvPostingBuffer[2]."Tax Amount (ACY)" + InvPostingBuffer[1]."Tax Amount (ACY)";
        InvPostingBuffer[2]."Tax Base Amount" := InvPostingBuffer[2]."Tax Base Amount" + InvPostingBuffer[1]."Tax Base Amount";
        InvPostingBuffer[2]."Src. Curr. Tax Base Amount" :=
          InvPostingBuffer[2]."Src. Curr. Tax Base Amount" + InvPostingBuffer[1]."Src. Curr. Tax Base Amount";

        IF NOT InvPostingBuffer[1]."System-Created Entry" THEN
          InvPostingBuffer[2]."System-Created Entry" := FALSE;
        InvPostingBuffer[2]."VATable Purchase Tax" := InvPostingBuffer[2]."VATable Purchase Tax" +
          InvPostingBuffer[1]."VATable Purchase Tax";
        InvPostingBuffer[2].MODIFY;
        InvDefLineNo := InvPostingBuffer[2]."Deferral Line No.";
      END ELSE BEGIN
        IF InvPostingBuffer[1]."Deferral Code" <> '' THEN BEGIN
          DeferralLineNo := DeferralLineNo + 1;
          InvPostingBuffer[1]."Deferral Line No." := DeferralLineNo;
          InvDefLineNo := InvPostingBuffer[1]."Deferral Line No.";
        END;
        InvPostingBuffer[1].INSERT;
      END;
      IF ExecuteTDSBuff THEN BEGIN
        TDSInvBuf[2] := TDSInvBuf[1];
        IF TDSInvBuf[2].FIND THEN BEGIN
          TDSInvBuf[2]."TDS %" := TDSInvBuf[1]."TDS %";
          TDSInvBuf[2]."Surcharge %" := TDSInvBuf[1]."Surcharge %";
          TDSInvBuf[2]."eCESS %" := TDSInvBuf[1]."eCESS %";
          TDSInvBuf[2]."SHE Cess %" := TDSInvBuf[1]."SHE Cess %";
          TDSInvBuf[2]."TDS Base Amount" :=
          TDSInvBuf[2]."TDS Base Amount" + TDSInvBuf[1]."TDS Base Amount";
          TDSInvBuf[2]."TDS Amount" := TDSInvBuf[2]."TDS Amount" + TDSInvBuf[1]."TDS Amount";
          TDSInvBuf[2]."Surcharge Base Amount" := TDSInvBuf[2]."Surcharge Base Amount" +
          TDSInvBuf[1]."Surcharge Base Amount";
          TDSInvBuf[2]."Surcharge Amount" := TDSInvBuf[2]."Surcharge Amount" + TDSInvBuf[1]."Surcharge Amount";
          TDSInvBuf[2]."TDS Amount Including Surcharge" := TDSInvBuf[2]."TDS Amount Including Surcharge" +
          TDSInvBuf[1]."TDS Amount Including Surcharge";
          TDSInvBuf[2]."eCESS Amount" := TDSInvBuf[2]."eCESS Amount" + TDSInvBuf[1]."eCESS Amount";
          TDSInvBuf[2]."SHE Cess Amount" := TDSInvBuf[2]."SHE Cess Amount" + TDSInvBuf[1]."SHE Cess Amount";
          TDSInvBuf[2]."Total TDS Including SHE Cess" := TDSInvBuf[2]."Total TDS Including SHE Cess" +
          TDSInvBuf[1]."Total TDS Including SHE Cess";
          TDSInvBuf[2]."Invoice Amount" := TDSInvBuf[2]."Invoice Amount" + TDSInvBuf[1]."Invoice Amount";
          TDSInvBuf[2]."Bal. TDS Including SHE Cess" := TDSInvBuf[2]."Bal. TDS Including SHE Cess" +
          TDSInvBuf[1]."Bal. TDS Including SHE Cess";
          TDSInvBuf[2]."Work Tax Base Amount" := TDSInvBuf[2]."Work Tax Base Amount" + TDSInvBuf[1]."Work Tax Base Amount";
          TDSInvBuf[2]."Work Tax Amount" := TDSInvBuf[2]."Work Tax Amount" + TDSInvBuf[1]."Work Tax Amount";
          TDSInvBuf[2]."Source Currency Amount" := TDSInvBuf[2]."Source Currency Amount" + TDSInvBuf[1]."Source Currency Amount";
          TDSInvBuf[2]."Source Curr. Work Tax Amount" := TDSInvBuf[2]."Source Curr. Work Tax Amount" +
          TDSInvBuf[1]."Source Curr. Work Tax Amount";
          TDSInvBuf[2]."Service Tax Including SHE Cess" := TDSInvBuf[2]."Service Tax Including SHE Cess" +
          TDSInvBuf[1]."Service Tax Including SHE Cess";
          TDSInvBuf[2]."TDS Line Amount" := TDSInvBuf[2]."TDS Line Amount" + TDSInvBuf[1]."TDS Line Amount";
          TDSInvBuf[2].MODIFY;
        END ELSE
          TDSInvBuf[1].INSERT;
      END;
    END;

    LOCAL PROCEDURE InsertPrepmtAdjInvPostingBuf@79(PrepmtPurchLine@1000 : Record 39);
    VAR
      PurchPostPrepayments@1002 : Codeunit 444;
      AdjAmount@1001 : Decimal;
    BEGIN
      WITH PrepmtPurchLine DO
        IF "Prepayment Line" THEN
          IF "Prepmt. Amount Inv. (LCY)" <> 0 THEN BEGIN
            AdjAmount := -"Prepmt. Amount Inv. (LCY)";
            FillPrepmtAdjInvPostingBuffer("No.",AdjAmount,PurchHeader."Currency Code" = '');
            FillPrepmtAdjInvPostingBuffer(
              PurchPostPrepayments.GetCorrBalAccNo(PurchHeader,AdjAmount > 0),
              -AdjAmount,
              PurchHeader."Currency Code" = '');
          END ELSE
            IF ("Prepayment %" = 100) AND ("Prepmt. VAT Amount Inv. (LCY)" <> 0) THEN
              FillPrepmtAdjInvPostingBuffer(
                PurchPostPrepayments.GetInvRoundingAccNo(PurchHeader."Vendor Posting Group"),
                "Prepmt. VAT Amount Inv. (LCY)",PurchHeader."Currency Code" = '');
    END;

    LOCAL PROCEDURE FillPrepmtAdjInvPostingBuffer@81(GLAccountNo@1001 : Code[20];AdjAmount@1003 : Decimal;RoundingEntry@1004 : Boolean);
    VAR
      PrepmtAdjInvPostBuffer@1002 : Record 49;
    BEGIN
      WITH PrepmtAdjInvPostBuffer DO BEGIN
        INIT;
        Type := Type::"Prepmt. Exch. Rate Difference";
        "G/L Account" := GLAccountNo;
        Amount := AdjAmount;
        IF RoundingEntry THEN
          "Amount (ACY)" := AdjAmount
        ELSE
          "Amount (ACY)" := 0;
        "Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
        "Global Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        "Global Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        "System-Created Entry" := TRUE;
        InvPostingBuffer[1] := PrepmtAdjInvPostBuffer;

        InvPostingBuffer[2] := InvPostingBuffer[1];
        IF InvPostingBuffer[2].FIND THEN BEGIN
          InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
          InvPostingBuffer[2]."Amount (ACY)" :=
            InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
          InvPostingBuffer[2].MODIFY;
        END ELSE
          InvPostingBuffer[1].INSERT;
      END;
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH PurchHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';PurchLineQty@1001 : Decimal;VAR TempVATAmountLine@1002 : TEMPORARY Record 290;VAR TempVATAmountLineRemainder@1003 : TEMPORARY Record 290);
    VAR
      OriginalDeferralAmount@1006 : Decimal;
      RG23DSplitingbuffer@1500159 : Record 16531;
      RG23D@1500160 : Record 16537;
      STReverseChargeSetup@1500000 : Record 16461;
      ServiceTaxRegistrationNos@1500001 : Record 16475;
      QtyFactor@1500002 : Decimal;
      PoTPurchLine@1500003 : Record 39;
      Percentage@1500004 : Decimal;
      Vend@1004 : Record 23;
      DocTransactionType@1500005 : 'Purchase,Sale';
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = PurchLine."Line No.") THEN
        EXIT;
      WITH PurchLine DO
        IF (PurchLineQty = 0) OR ("Direct Unit Cost" = 0) THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
          "Tax Base Amount" := 0;
          "Amount Including Tax" := 0;
          "Service Tax Base" := 0;
          "Service Tax Amount" := 0;
          "Service Tax eCess Amount" := 0;
          "Service Tax SHE Cess Amount" := 0;
          "Service Tax SBC Amount" := 0;
          "KK Cess Amount" := 0;
          "TDS Base Amount" := 0;
          "Bal. TDS Including SHE CESS" := 0;
          "Total TDS Including SHE CESS" := 0;
          "Work Tax Base Amount" := 0;
          "Work Tax Amount" := 0;
          IF (PurchLineQty = 0) OR ("Direct Unit Cost" = 0) THEN BEGIN
            "Amount To Vendor" := 0;
            "Charges To Vendor" := 0;
          END;
          "Excise Base Amount" := 0;
          "Excise Amount" := 0;
          "Tax Amount" := 0;
          "VAT able Purchase Tax Amount" := 0;
          "Total GST Amount" := 0;
        END ELSE BEGIN
          OriginalDeferralAmount := GetDeferralAmount;
          TempVATAmountLine.GET(
            "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
            "Line Amount" >= 0);
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := GetLineAmountToHandle(PurchLineQty) + GetPrepmtDiffToLineAmount(PurchLine);
          QtyFactor := PurchLineQty / Quantity;
          IF PurchLineQty <> Quantity THEN
            "Line Discount Amount" :=
              ROUND("Line Discount Amount" * QtyFactor,Currency."Amount Rounding Precision");
          Amount := ROUND(Amount * QtyFactor,Currency."Amount Rounding Precision");
          "VAT Base Amount" := ROUND("VAT Base Amount" * QtyFactor,Currency."Amount Rounding Precision");

          "Amount Loaded on Inventory" := ROUND("Amount Loaded on Inventory" * QtyFactor,
            Currency."Amount Rounding Precision");
          "Input Tax Credit Amount" := ROUND("Input Tax Credit Amount" * QtyFactor,
            Currency."Amount Rounding Precision");
          "VAT able Purchase Tax Amount" := ROUND("VAT able Purchase Tax Amount" * QtyFactor,
            Currency."Amount Rounding Precision");
          IF NOT (("Document Type" = "Document Type"::"Return Order") AND PurchHeader.Trading) THEN BEGIN
            "BED Amount" := "BED Amount" * QtyFactor;
            "AED(GSI) Amount" := "AED(GSI) Amount" * QtyFactor;
            "AED(TTA) Amount" := "AED(TTA) Amount" * QtyFactor;
            "SED Amount" := "SED Amount" * QtyFactor;
            "SAED Amount" := "SAED Amount" * QtyFactor;
            "CESS Amount" := "CESS Amount" * QtyFactor;
            "NCCD Amount" := "NCCD Amount" * QtyFactor;
            "eCess Amount" := "eCess Amount" * QtyFactor;
            "SHE Cess Amount" := "SHE Cess Amount" * QtyFactor;
            "ADET Amount" := "ADET Amount" * QtyFactor;
            "ADE Amount" := "ADE Amount" * QtyFactor;
            "Custom eCess Amount" := "Custom eCess Amount" * QtyFactor;
            "Custom SHECess Amount" := "Custom SHECess Amount" * QtyFactor;
            "ADC VAT Amount" := "ADC VAT Amount" * QtyFactor;
          END;
          IF PurchHeader.Trading AND CalledFrmPosting THEN BEGIN
            "Excise Base Amount" := 0;
            "BED Amount" := 0;
            "AED(GSI) Amount" := 0;
            "AED(TTA) Amount" := 0;
            "SED Amount" := 0;
            "SAED Amount" := 0;
            "CESS Amount" := 0;
            "NCCD Amount" := 0;
            "eCess Amount" := 0;
            "SHE Cess Amount" := 0;
            "ADET Amount" := 0;
            "ADE Amount" := 0;
            "ADC VAT Amount" := 0;
            RG23DSplitingbuffer.RESET;
            RG23DSplitingbuffer.SETRANGE("Document Type","Document Type");
            RG23DSplitingbuffer.SETRANGE("Document No.","Document No.");
            RG23DSplitingbuffer.SETRANGE("Line No.","Line No.");
            IF RG23DSplitingbuffer.FINDSET THEN
              REPEAT
                RG23D.GET(RG23DSplitingbuffer."RG 23 D Entry No.");
                "BED Amount" += ABS(RG23D."BED Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "AED(GSI) Amount" += ABS(RG23D."AED(GSI) Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "AED(TTA) Amount" += ABS(RG23D."AED(TTA) Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "SED Amount" += ABS(RG23D."SED Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "SAED Amount" += ABS(RG23D."SAED Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "CESS Amount" += ABS(RG23D."CESS Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "NCCD Amount" += ABS(RG23D."NCCD Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "eCess Amount" += ABS(RG23D."eCess Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "SHE Cess Amount" += ABS(RG23D."SHE Cess Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "ADET Amount" += ABS(RG23D."ADET Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "ADE Amount" += ABS(RG23D."ADE Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
                "ADC VAT Amount" += ABS(RG23D."ADC VAT Amount Per Unit") * ABS(RG23DSplitingbuffer.Quantity);
              UNTIL RG23DSplitingbuffer.NEXT = 0;
            IF PurchHeader."Currency Factor" <> 0 THEN BEGIN
              "BED Amount" := "BED Amount" * PurchHeader."Currency Factor";
              "AED(GSI) Amount" := "AED(GSI) Amount" * PurchHeader."Currency Factor";
              "AED(TTA) Amount" := "AED(TTA) Amount" * PurchHeader."Currency Factor";
              "SED Amount" := "SED Amount" * PurchHeader."Currency Factor";
              "SAED Amount" := "SAED Amount" * PurchHeader."Currency Factor";
              "CESS Amount" := "CESS Amount" * PurchHeader."Currency Factor";
              "NCCD Amount" := "NCCD Amount" * PurchHeader."Currency Factor";
              "eCess Amount" := "eCess Amount" * PurchHeader."Currency Factor";
              "SHE Cess Amount" := "SHE Cess Amount" * PurchHeader."Currency Factor";
              "ADET Amount" := "ADET Amount" * PurchHeader."Currency Factor";
              "ADE Amount" := "ADE Amount" * PurchHeader."Currency Factor";
              "ADC VAT Amount" := "ADC VAT Amount" * PurchHeader."Currency Factor";
            END;
          END;
          "Service Tax Amount" := RoundServiceTaxPrecision("Service Tax Amount" * QtyFactor);
          "Service Tax eCess Amount" := RoundServiceTaxPrecision("Service Tax eCess Amount" * QtyFactor);
          "Service Tax SHE Cess Amount" := RoundServiceTaxPrecision("Service Tax SHE Cess Amount" * QtyFactor);
            "Service Tax SBC Amount" := RoundServiceTaxPrecision("Service Tax SBC Amount" * QtyFactor);
            "KK Cess Amount" := RoundServiceTaxPrecision("KK Cess Amount" * QtyFactor);
          "TDS Amount" := PurchRoundTDSAmount("TDS Amount" * PurchLineQty / Quantity,"Currency Code");
          "Surcharge Amount" := PurchRoundTDSAmount("Surcharge Amount" * PurchLineQty / Quantity,"Currency Code");
          "eCESS on TDS Amount" := PurchRoundTDSAmount("eCESS on TDS Amount" * PurchLineQty / Quantity,"Currency Code");
          "SHE Cess on TDS Amount" := PurchRoundTDSAmount("SHE Cess on TDS Amount" * PurchLineQty / Quantity,"Currency Code");
          "TDS Amount Including Surcharge" := "TDS Amount" + "Surcharge Amount";
          "Total TDS Including SHE CESS" :=  "TDS Amount Including Surcharge" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount";
          "Bal. TDS Including SHE CESS" := "Total TDS Including SHE CESS";
          "Excise Base Amount" :=
            ROUND("Excise Base Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Excise Amount" :=
            RoundExciseAmt(
              "BED Amount" + "AED(GSI) Amount" + "AED(TTA) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" +
              "NCCD Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" +
              "SHE Cess Amount" + "Custom eCess Amount" + "Custom SHECess Amount",1,1,
              "Currency Code");
          Vend.GET("Buy-from Vendor No.");
          IF (Type IN [Type::Item,Type::"Fixed Asset"]) AND
              (Vend."GST Vendor Type" IN [Vend."GST Vendor Type"::Import,Vend."GST Vendor Type"::SEZ]) AND
              ("GST Assessable Value" <> 0) THEN BEGIN
                "GST Base Amount" :=
                  ROUND("GST Base Amount",Currency."Amount Rounding Precision");
                "Total GST Amount" := GSTManagement.RoundTotalGSTAmountforGSTAssessable(DocTransactionType::Purchase,"Document Type",
                  "Document No.","Line No.","Currency Code");
          END ELSE BEGIN
          "GST Base Amount" :=
            ROUND("GST Base Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Total GST Amount" := GSTManagement.RoundTotalGSTAmountQtyFactor(DocTransactionType::Purchase,"Document Type",
            "Document No.","Line No.",QtyFactor,"Currency Code");
          END;
          IF "Currency Code" = '' THEN
            "Total GST Amount" := ROUND("Total GST Amount",Currency."Amount Rounding Precision");

          IF ("Document Type" = "Document Type"::"Return Order") AND PurchHeader.Trading THEN
            "Excise Amount" := RoundExciseAmt("Excise Amount",1,1,"Currency Code");
          "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
          "Amount Added to Inventory" :=
            ROUND("Amount Added to Inventory" * QtyFactor,Currency."Amount Rounding Precision");
          "Tax Base Amount" :=
            ROUND("Tax Base Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Tax Amount" := ROUND("Tax Amount" * QtyFactor,Currency."Amount Rounding Precision");
          TaxAreaLine.RESET;
          TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
          TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
          IF TaxAreaLine.FINDFIRST THEN BEGIN
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
               (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
            THEN BEGIN
              IF "Currency Code" = '' THEN
                IF Type = Type::"Charge (Item)" THEN
                  "Tax Amount" := ROUND("Tax Amount")
                ELSE
                  "Tax Amount" := IndianSalesTaxCalculate.RoundVATPrecision("Tax Amount")
              ELSE
                "Tax Amount" := ROUND("Tax Amount");
            END;
          END;
          "Amount Including Tax" := "Tax Base Amount" + "Tax Amount";
          "Charges To Vendor" := ROUND("Charges To Vendor" * QtyFactor,Currency."Amount Rounding Precision");
          "TDS Base Amount" := ROUND("TDS Base Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Work Tax Base Amount" := ROUND("Work Tax Base Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Work Tax Amount" := ROUND("Work Tax Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Work Tax Amount" :=
            ROUND("Work Tax Amount" * QtyFactor,Currency."Amount Rounding Precision");
          "Service Tax Base" := ROUND(("Service Tax Base" * QtyFactor),Currency."Amount Rounding Precision");
          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;
          IF PurchHeader."Prices Including VAT" THEN BEGIN
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            END;
            IF "Line Discount %" <> 100 THEN
              "Amount Including VAT" :=
                ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
            ELSE
              "Amount Including VAT" := 0;
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
              ELSE
                "Amount Including VAT" := 0;
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              IF TempVATAmountLine."VAT Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              IF "Line Discount %" <> 100 THEN
                "Amount Including VAT" :=
                  Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
              ELSE
                "Amount Including VAT" := 0;
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END;
          Vend.GET("Buy-from Vendor No.");
          IF STReverseChargeSetup.TryGetSrvTaxReverseCharge(PurchLine."Service Tax Group",Vend."Service Entity Type",
            ServiceTaxRegistrationNos.GetServiceEntityType(PurchLine."Service Tax Registration No.")) THEN
            Percentage := STReverseChargeSetup."Reverse Charge %";
          IF Percentage <> 100 THEN BEGIN
            PoTPurchLine := PurchLine;
            CalcPOTAmtsforRevChgSplit(PoTPurchLine,100 - Percentage);
            IF CVD AND CVDPayableToThirdParty THEN
              "Amount To Vendor" :=
                ROUND(Amount -
                  "Bal. TDS Including SHE CESS" - "Work Tax Amount" +
                  "Charges To Vendor" + PoTPurchLine.FullServiceTaxAmount + PoTPurchLine.FullServiceTaxSBCAmount +
                  PoTPurchLine.KKCessAmount + "Tax Amount" + "Total GST Amount",
                  Currency."Amount Rounding Precision")
            ELSE
              "Amount To Vendor" :=
                ROUND(Amount +
                  "Excise Amount" - "Bal. TDS Including SHE CESS" - "Work Tax Amount" +
                  "Charges To Vendor" + PoTPurchLine.FullServiceTaxAmount + PoTPurchLine.FullServiceTaxSBCAmount +
                  PoTPurchLine.KKCessAmount  + "Tax Amount" + "Total GST Amount",
                  Currency."Amount Rounding Precision");
          END ELSE BEGIN
            IF CVD AND CVDPayableToThirdParty THEN
              "Amount To Vendor" :=
                ROUND(Amount +
                  "Tax Amount" - "Bal. TDS Including SHE CESS" -
                  "Work Tax Amount" + "Charges To Vendor",Currency."Amount Rounding Precision")
            ELSE
              "Amount To Vendor" :=
                ROUND(Amount +
                  "Excise Amount" + "Tax Amount" - "Bal. TDS Including SHE CESS" -
                  "Work Tax Amount" + "Charges To Vendor",Currency."Amount Rounding Precision");
          END;
          TempVATAmountLineRemainder.MODIFY;
          IF "Deferral Code" <> '' THEN
            CalcDeferralAmounts(PurchHeader,PurchLine,OriginalDeferralAmount);
        END;
    END;

    LOCAL PROCEDURE RoundAmount@9(PurchLineQty@1000 : Decimal);
    VAR
      CurrExchRate@1002 : Record 330;
      NoVAT@1001 : Boolean;
      NoTax@1280000 : Boolean;
    BEGIN
      WITH PurchLine DO BEGIN
        IncrAmount(TotalPurchLine);
        Increment(TotalPurchLine."Net Weight",ROUND(PurchLineQty * "Net Weight",0.00001));
        Increment(TotalPurchLine."Gross Weight",ROUND(PurchLineQty * "Gross Weight",0.00001));
        Increment(TotalPurchLine."Unit Volume",ROUND(PurchLineQty * "Unit Volume",0.00001));
        Increment(TotalPurchLine.Quantity,PurchLineQty);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalPurchLine."Units per Parcel",
            ROUND(PurchLineQty / "Units per Parcel",1,'>'));
        TempPurchLine := PurchLine;
        PurchLineACY := PurchLine;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          IF PurchHeader."Posting Date" = 0D THEN
            Usedate := WORKDATE
          ELSE
            Usedate := PurchHeader."Posting Date";
          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Amount Including VAT",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine.Amount,PurchHeader."Currency Factor")) -
              TotalPurchLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Line Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Line Discount Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Inv. Discount Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."VAT Difference",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."VAT Difference";
          "Excise Base Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Excise Base Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Excise Base Amount";
          "CESS Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."CESS Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."CESS Amount";
          "BED Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."BED Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."BED Amount";
          "AED(GSI) Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."AED(GSI) Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."AED(GSI) Amount";
          "AED(TTA) Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."AED(TTA) Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."AED(TTA) Amount";
          "SED Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."SED Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."SED Amount";
          "SAED Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."SAED Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."SAED Amount";
          "NCCD Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."NCCD Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."NCCD Amount";
          "eCess Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."eCess Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."eCess Amount";
          "SHE Cess Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."SHE Cess Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."SHE Cess Amount";
          "ADET Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."ADET Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."ADET Amount";
          "ADE Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."ADE Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."ADE Amount";
          "Custom eCess Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."Custom eCess Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."Custom eCess Amount";
          "Custom SHECess Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."Custom SHECess Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."Custom SHECess Amount";
          "ADC VAT Amount" :=
            RoundExcisePrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."ADC VAT Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."ADC VAT Amount";
          NoTax := "Tax Base Amount" = "Amount Including Tax";
          "Amount Including Tax" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Amount Including Tax",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Amount Including Tax";
          IF NoTax THEN
            "Tax Base Amount" := "Amount Including Tax"
          ELSE
            "Tax Base Amount" :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."Tax Base Amount",PurchHeader."Currency Factor")) -
              TotalPurchLineLCY."Tax Base Amount";
          "Tax Amount" :=
            IndianSalesTaxCalculate.RoundVATPrecision(ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine."Tax Amount",PurchHeader."Currency Factor"))) -
            TotalPurchLineLCY."Tax Amount";
          "Amount To Vendor" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Amount To Vendor",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Amount To Vendor";
          "Charges To Vendor" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Charges To Vendor",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Charges To Vendor";
          "Bal. TDS Including SHE CESS" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Bal. TDS Including SHE CESS",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Bal. TDS Including SHE CESS";
          "Work Tax Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Work Tax Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Work Tax Amount";
          "VAT Base Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."VAT Base Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."VAT Base Amount";
          "Service Tax Base" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Service Tax Base",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Service Tax Base";
          "Service Tax Amount" :=
            RoundServiceTaxPrecision(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Service Tax Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Service Tax Amount";
          "Service Tax SBC Amount" :=
            RoundServiceTaxPrecision(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Service Tax SBC Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Service Tax SBC Amount";
          "KK Cess Amount" :=
            RoundServiceTaxPrecision(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."KK Cess Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."KK Cess Amount";
          "Service Tax eCess Amount" :=
            RoundServiceTaxPrecision(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Service Tax eCess Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Service Tax eCess Amount";
          "Service Tax SHE Cess Amount" :=
            RoundServiceTaxPrecision(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Service Tax SHE Cess Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Service Tax SHE Cess Amount";
          "TDS Amount" :=
            PurchRoundTDSAmount(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."TDS Amount",PurchHeader."Currency Factor"),PurchHeader."Currency Code") -
            TotalPurchLineLCY."TDS Amount";
          "Surcharge Amount" :=
            PurchRoundTDSAmount(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Surcharge Amount",PurchHeader."Currency Factor"),PurchHeader."Currency Code") -
            TotalPurchLineLCY."Surcharge Amount";
          "eCESS on TDS Amount" :=
            PurchRoundTDSAmount(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."eCESS on TDS Amount",PurchHeader."Currency Factor"),PurchHeader."Currency Code") -
            TotalPurchLineLCY."eCESS on TDS Amount";
          "SHE Cess on TDS Amount" :=
            PurchRoundTDSAmount(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."SHE Cess on TDS Amount",PurchHeader."Currency Factor"),PurchHeader."Currency Code") -
            TotalPurchLineLCY."SHE Cess on TDS Amount";
          "TDS Amount Including Surcharge" := "TDS Amount" + "Surcharge Amount";
          "Total TDS Including SHE CESS" := "TDS Amount Including Surcharge" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount";
          "Bal. TDS Including SHE CESS" := "Total TDS Including SHE CESS";
          "Work Tax Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Work Tax Amount",PurchHeader."Currency Factor")) -
            TotalPurchLineLCY."Work Tax Amount";
          "Total GST Amount" :=
            RoundGSTPrecision(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Total GST Amount",PurchHeader."Currency Factor")) -
             TotalPurchLineLCY."Total GST Amount";
          IF PurchLineQty <> 0 THEN BEGIN
            "Excise Amount" :=
              "BED Amount" + "AED(GSI) Amount" + "AED(TTA) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" +
              "NCCD Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" +
              "SHE Cess Amount" + "Custom eCess Amount" + "Custom SHECess Amount";
            "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
          END;
        END;
        IncrAmount(TotalPurchLineLCY);
        Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR PurchLine@1000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        "Qty. to Receive" := -"Qty. to Receive";
        "Qty. to Receive (Base)" := -"Qty. to Receive (Base)";
        "Return Qty. to Ship" := -"Return Qty. to Ship";
        "Return Qty. to Ship (Base)" := -"Return Qty. to Ship (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
        "Salvage Value" := -"Salvage Value";
        "Excise Base Amount" := -"Excise Base Amount";
        "Excise Amount" := -"Excise Amount";
        "Amount Including Excise" := -"Amount Including Excise";
        "Tax Base Amount" := -"Tax Base Amount";
        "Tax Amount" := -"Tax Amount";
        "Amount Including Tax" := -"Amount Including Tax";
        "Amount To Vendor" := -"Amount To Vendor";
        "Charges To Vendor" := -"Charges To Vendor";
        "Bal. TDS Including SHE CESS" := -"Bal. TDS Including SHE CESS";
        "Work Tax Amount" := -"Work Tax Amount";
        "Work Tax Base Amount" := -"Work Tax Base Amount";
        "BED Amount" := -"BED Amount";
        "AED(GSI) Amount" := -"AED(GSI) Amount";
        "AED(TTA) Amount" := -"AED(TTA) Amount";
        "ADET Amount" := -"ADET Amount";
        "ADE Amount" := -"ADE Amount";
        "SED Amount" := -"SED Amount";
        "SAED Amount" := -"SAED Amount";
        "CESS Amount" := -"CESS Amount";
        "NCCD Amount" := -"NCCD Amount";
        "ADC VAT Amount" := -"ADC VAT Amount";
        "eCess Amount" := -"eCess Amount";
        "SHE Cess Amount" := -"SHE Cess Amount";
        "Amount Added to Inventory" := -"Amount Added to Inventory";
        "Service Tax Base" := -"Service Tax Base";
        "Service Tax Amount" := -"Service Tax Amount";
        "Service Tax eCess Amount" := -"Service Tax eCess Amount";
        "Service Tax SHE Cess Amount" := -"Service Tax SHE Cess Amount";
        "Service Tax SBC Amount" := -"Service Tax SBC Amount";
        "KK Cess Amount" := -"KK Cess Amount";
        "Custom eCess Amount" := -"Custom eCess Amount";
        "Custom SHECess Amount" := -"Custom SHECess Amount";
        "VAT able Purchase Tax Amount" := -"VAT able Purchase Tax Amount";
        "Total GST Amount" := -"Total GST Amount";
        "GST Base Amount" := -"GST Base Amount"
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean;BiggestLineNo@1004 : Integer);
    VAR
      VendPostingGr@1002 : Record 93;
      TempPurchLineForCalc@1003 : TEMPORARY Record 39;
      InvoiceRoundingAmount@1001 : Decimal;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalPurchLine."Amount To Vendor" -
          ROUND(
            TotalPurchLine."Amount To Vendor",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF (InvoiceRoundingAmount <> 0) AND (NOT(PurchLine."GST Reverse Charge")) THEN BEGIN
        VendPostingGr.GET(PurchHeader."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH PurchLine DO BEGIN
          INIT;
          BiggestLineNo := BiggestLineNo + 10000;
          "System-Created Entry" := TRUE;
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
            TempPurchLineForCalc := PurchLine;
            TempPurchLineForCalc.VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
            PurchLine := TempPurchLineForCalc;
          END ELSE BEGIN
            "Line No." := BiggestLineNo;
            VALIDATE(Type,Type::"G/L Account");
            VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
          END;
          VALIDATE(Quantity,1);
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            VALIDATE("Return Qty. to Ship",Quantity)
          ELSE
            VALIDATE("Qty. to Receive",Quantity);
          IF PurchHeader."Prices Including VAT" THEN
            VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount To Vendor",InvoiceRoundingAmount);
          "Line No." := BiggestLineNo;
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR TotalPurchLine@1000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        IF PurchHeader."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(TotalPurchLine."Line Amount","Line Amount");
        Increment(TotalPurchLine.Amount,Amount);
        Increment(TotalPurchLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalPurchLine."VAT Difference","VAT Difference");
        Increment(TotalPurchLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalPurchLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalPurchLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalPurchLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalPurchLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalPurchLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalPurchLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalPurchLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalPurchLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalPurchLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalPurchLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
        Increment(TotalPurchLine."Excise Base Amount","Excise Base Amount");
        Increment(TotalPurchLine."Excise Amount","Excise Amount");
        Increment(TotalPurchLine."BED Amount","BED Amount");
        Increment(TotalPurchLine."AED(GSI) Amount","AED(GSI) Amount");
        Increment(TotalPurchLine."AED(TTA) Amount","AED(TTA) Amount");
        Increment(TotalPurchLine."SED Amount","SED Amount");
        Increment(TotalPurchLine."ADET Amount","ADET Amount");
        Increment(TotalPurchLine."ADE Amount","ADE Amount");
        Increment(TotalPurchLine."SAED Amount","SAED Amount");
        Increment(TotalPurchLine."NCCD Amount","NCCD Amount");
        Increment(TotalPurchLine."ADC VAT Amount","ADC VAT Amount");
        Increment(TotalPurchLine."eCess Amount","eCess Amount");
        Increment(TotalPurchLine."SHE Cess Amount","SHE Cess Amount");
        Increment(TotalPurchLine."CESS Amount","CESS Amount");
        Increment(TotalPurchLine."Custom eCess Amount","Custom eCess Amount");
        Increment(TotalPurchLine."Custom SHECess Amount","Custom SHECess Amount");
        Increment(TotalPurchLine."Amount Including Excise","Amount Including Excise");
        Increment(TotalPurchLine."Tax Base Amount","Tax Base Amount");
        Increment(TotalPurchLine."Tax Amount","Tax Amount");
        Increment(TotalPurchLine."Amount Including Tax","Amount Including Tax");
        Increment(TotalPurchLine."Amount To Vendor","Amount To Vendor");
        Increment(TotalPurchLine."Charges To Vendor","Charges To Vendor");
        Increment(TotalPurchLine."TDS Base Amount","TDS Base Amount");
        Increment(TotalPurchLine."TDS Amount","TDS Amount");
        Increment(TotalPurchLine."Surcharge Amount","Surcharge Amount");
        Increment(TotalPurchLine."TDS Amount Including Surcharge","TDS Amount Including Surcharge");
        Increment(TotalPurchLine."eCESS on TDS Amount","eCESS on TDS Amount");
        Increment(TotalPurchLine."SHE Cess on TDS Amount","SHE Cess on TDS Amount");
        Increment(TotalPurchLine."Bal. TDS Including SHE CESS","Bal. TDS Including SHE CESS");
        Increment(TotalPurchLine."Total TDS Including SHE CESS","Total TDS Including SHE CESS");
        Increment(TotalPurchLine."Work Tax Base Amount","Work Tax Base Amount");
        Increment(TotalPurchLine."Work Tax Amount","Work Tax Amount");
        Increment(TotalPurchLine."Service Tax Base","Service Tax Base");
        Increment(TotalPurchLine."Service Tax Amount","Service Tax Amount");
        Increment(TotalPurchLine."Service Tax eCess Amount","Service Tax eCess Amount");
        Increment(TotalPurchLine."Service Tax SHE Cess Amount","Service Tax SHE Cess Amount");
        Increment(TotalPurchLine."Service Tax SBC Amount","Service Tax SBC Amount");
        Increment(TotalPurchLine."KK Cess Amount","KK Cess Amount");
        Increment(TotalPurchLine."VAT able Purchase Tax Amount","VAT able Purchase Tax Amount");
        Increment(TotalPurchLine."Total GST Amount","Total GST Amount");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    PROCEDURE GetPurchLines@16(VAR NewPurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldPurchLine@1003 : Record 39;
      MergedPurchLines@1004 : TEMPORARY Record 39;
    BEGIN
      PurchHeader := NewPurchHeader;
      IF QtyType = QtyType::Invoicing THEN BEGIN
        CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,FALSE);
        MergePurchLines(PurchHeader,OldPurchLine,TempPrepmtPurchLine,MergedPurchLines);
        SumPurchLines2(PurchLine,MergedPurchLines,QtyType,TRUE);
      END ELSE
        SumPurchLines2(PurchLine,OldPurchLine,QtyType,TRUE);
    END;

    PROCEDURE SumPurchLines@15(VAR NewPurchHeader@1000 : Record 38;QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1002 : Record 39;VAR NewTotalPurchLineLCY@1003 : Record 39;VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30]);
    VAR
      OldPurchLine@1006 : Record 39;
    BEGIN
      SumPurchLinesTemp(
        NewPurchHeader,OldPurchLine,QtyType,NewTotalPurchLine,NewTotalPurchLineLCY,
        VATAmount,VATAmountText);
    END;

    PROCEDURE SumPurchLinesTemp@24(VAR NewPurchHeader@1000 : Record 38;VAR OldPurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1003 : Record 39;VAR NewTotalPurchLineLCY@1004 : Record 39;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30]);
    VAR
      PurchLine@1007 : Record 39;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchHeader := NewPurchHeader;
        SumPurchLines2(PurchLine,OldPurchLine,QtyType,FALSE);
        VATAmount := TotalPurchLine."Amount Including VAT" - TotalPurchLine.Amount;
        IF TotalPurchLine."VAT %" = 0 THEN
          VATAmountText := Text021
        ELSE
          VATAmountText := STRSUBSTNO(Text022,TotalPurchLine."VAT %");
        NewTotalPurchLine := TotalPurchLine;
        NewTotalPurchLineLCY := TotalPurchLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumPurchLines2@11(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping';InsertPurchLine@1003 : Boolean);
    VAR
      TempVATAmountLine@1006 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1007 : TEMPORARY Record 290;
      PurchLineQty@1004 : Decimal;
      BiggestLineNo@1005 : Integer;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      OldPurchLine.CalcVATAmountLines(QtyType,PurchHeader,OldPurchLine,TempVATAmountLine);
      WITH PurchHeader DO BEGIN
        GetGLSetup;
        PurchSetup.GET;
        GetCurrency;
        OldPurchLine.SETRANGE("Document Type","Document Type");
        OldPurchLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := FALSE;
        IF OldPurchLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              PurchLine := OldPurchLine;
            CASE QtyType OF
              QtyType::General:
                PurchLineQty := PurchLine.Quantity;
              QtyType::Invoicing:
                PurchLineQty := PurchLine."Qty. to Invoice";
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    PurchLineQty := PurchLine."Return Qty. to Ship"
                  ELSE
                    PurchLineQty := PurchLine."Qty. to Receive"
                END;
            END;
            CalledFrmPosting := FALSE;
            DivideAmount(QtyType,PurchLineQty,TempVATAmountLine,TempVATAmountLineRemainder);
            PurchLine.Quantity := PurchLineQty;
            IF PurchLineQty <> 0 THEN BEGIN
              IF (PurchLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalPurchLine.Amount = 0 THEN
                  TotalPurchLine."VAT %" := PurchLine."VAT %"
                ELSE
                  IF TotalPurchLine."VAT %" <> PurchLine."VAT %" THEN
                    TotalPurchLine."VAT %" := 0;
              RoundAmount(PurchLineQty);
              PurchLine := TempPurchLine;
            END;
            IF InsertPurchLine THEN BEGIN
              NewPurchLine := PurchLine;
              NewPurchLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              BiggestLineNo := MAX(BiggestLineNo,OldPurchLine."Line No.");
              LastLineRetrieved := OldPurchLine.NEXT = 0;
              IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE,BiggestLineNo);
            END;
          UNTIL LastLineRetrieved;
        FilterAppliedEntries(TRUE);
      END;
    END;

    PROCEDURE TestDeleteHeader@19(PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120;VAR PurchInvHeader@1002 : Record 122;VAR PurchCrMemoHeader@1003 : Record 124;VAR ReturnShptHeader@1004 : Record 6650;VAR PurchInvHeaderPrepmt@1006 : Record 122;VAR PurchCrMemoHeaderPrepmt@1005 : Record 124);
    BEGIN
      WITH PurchHeader DO BEGIN
        CLEAR(PurchRcptHeader);
        CLEAR(PurchInvHeader);
        CLEAR(PurchCrMemoHeader);
        CLEAR(ReturnShptHeader);
        PurchSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Receiving No. Series" <> '') AND ("Receiving No." <> '') THEN BEGIN
          PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
          PurchRcptHeader."No." := "Receiving No.";
          PurchRcptHeader."Posting Date" := TODAY;
          PurchRcptHeader."User ID" := USERID;
          PurchRcptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Return Shipment No. Series" <> '') AND ("Return Shipment No." <> '') THEN BEGIN
          ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
          ReturnShptHeader."No." := "Return Shipment No.";
          ReturnShptHeader."Posting Date" := TODAY;
          ReturnShptHeader."User ID" := USERID;
          ReturnShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          PurchInvHeader.TRANSFERFIELDS(PurchHeader);
          IF "Posting No." <> '' THEN
            PurchInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
            PurchInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            PurchInvHeader."Pre-Assigned No. Series" := '';
            PurchInvHeader."Pre-Assigned No." := '';
            PurchInvHeader."Order No. Series" := "No. Series";
            PurchInvHeader."Order No." := "No.";
          END;
          PurchInvHeader."Posting Date" := TODAY;
          PurchInvHeader."User ID" := USERID;
          PurchInvHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          PurchCrMemoHeader.TRANSFERFIELDS(PurchHeader);
          IF "Posting No." <> '' THEN
            PurchCrMemoHeader."No." := "Posting No.";
          PurchCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHeader."Pre-Assigned No." := "No.";
          PurchCrMemoHeader."Posting Date" := TODAY;
          PurchCrMemoHeader."User ID" := USERID;
          PurchCrMemoHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Prepayment No. Series" <> '') AND ("Prepayment No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          PurchInvHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchInvHeaderPrepmt."No." := "Prepayment No.";
          PurchInvHeaderPrepmt."Order No. Series" := "No. Series";
          PurchInvHeaderPrepmt."Prepayment Order No." := "No.";
          PurchInvHeaderPrepmt."Posting Date" := TODAY;
          PurchInvHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchInvHeaderPrepmt."Pre-Assigned No." := '';
          PurchInvHeaderPrepmt."User ID" := USERID;
          PurchInvHeaderPrepmt."Source Code" := SourceCode.Code;
          PurchInvHeaderPrepmt."Prepayment Invoice" := TRUE;
        END;

        IF ("Prepmt. Cr. Memo No. Series" <> '') AND ("Prepmt. Cr. Memo No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          PurchCrMemoHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchCrMemoHeaderPrepmt."No." := "Prepmt. Cr. Memo No.";
          PurchCrMemoHeaderPrepmt."Prepayment Order No." := "No.";
          PurchCrMemoHeaderPrepmt."Posting Date" := TODAY;
          PurchCrMemoHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchCrMemoHeaderPrepmt."Pre-Assigned No." := '';
          PurchCrMemoHeaderPrepmt."User ID" := USERID;
          PurchCrMemoHeaderPrepmt."Source Code" := SourceCode.Code;
          PurchCrMemoHeaderPrepmt."Prepayment Credit Memo" := TRUE;
        END;
      END;
    END;

    PROCEDURE DeleteHeader@18(PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120;VAR PurchInvHeader@1002 : Record 122;VAR PurchCrMemoHeader@1003 : Record 124;VAR ReturnShptHeader@1004 : Record 6650;VAR PurchInvHeaderPrepmt@1006 : Record 122;VAR PurchCrMemoHeaderPrepmt@1005 : Record 124);
    VAR
      PurchInvLine@1007 : Record 123;
      PurchCrMemoLine@1008 : Record 125;
      PurchRcptLine@1009 : Record 121;
    BEGIN
      WITH PurchHeader DO BEGIN
        TestDeleteHeader(
          PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
          ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
        IF PurchRcptHeader."No." <> '' THEN BEGIN
          PurchRcptHeader.INSERT;
          PurchRcptLine.INIT;
          PurchRcptLine."Document No." := PurchRcptHeader."No.";
          PurchRcptLine."Line No." := 10000;
          PurchRcptLine.Description := SourceCode.Description;
          PurchRcptLine.INSERT;
        END;

        IF ReturnShptHeader."No." <> '' THEN BEGIN
          ReturnShptHeader.INSERT;
          ReturnShptLine.INIT;
          ReturnShptLine."Document No." := ReturnShptHeader."No.";
          ReturnShptLine."Line No." := 10000;
          ReturnShptLine.Description := SourceCode.Description;
          ReturnShptLine.INSERT;
        END;

        IF PurchInvHeader."No." <> '' THEN BEGIN
          PurchInvHeader.INSERT;
          PurchInvLine.INIT;
          PurchInvLine."Document No." := PurchInvHeader."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        END;

        IF PurchCrMemoHeader."No." <> '' THEN BEGIN
          PurchCrMemoHeader.INSERT(TRUE);
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHeader."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        END;

        IF PurchInvHeaderPrepmt."No." <> '' THEN BEGIN
          PurchInvHeaderPrepmt.INSERT;
          PurchInvLine."Document No." := PurchInvHeaderPrepmt."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        END;

        IF PurchCrMemoHeaderPrepmt."No." <> '' THEN BEGIN
          PurchCrMemoHeaderPrepmt.INSERT;
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHeaderPrepmt."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        END;
      END;
    END;

    PROCEDURE UpdateBlanketOrderLine@21(PurchLine@1000 : Record 39;Receive@1001 : Boolean;Ship@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderPurchLine@1003 : Record 39;
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      IF (PurchLine."Blanket Order No." <> '') AND (PurchLine."Blanket Order Line No." <> 0) AND
         ((Receive AND (PurchLine."Qty. to Receive" <> 0)) OR
          (Ship AND (PurchLine."Return Qty. to Ship" <> 0)) OR
          (Invoice AND (PurchLine."Qty. to Invoice" <> 0)))
      THEN
        IF BlanketOrderPurchLine.GET(
             BlanketOrderPurchLine."Document Type"::"Blanket Order",PurchLine."Blanket Order No.",
             PurchLine."Blanket Order Line No.")
        THEN BEGIN
          BlanketOrderPurchLine.TESTFIELD(Type,PurchLine.Type);
          BlanketOrderPurchLine.TESTFIELD("No.",PurchLine."No.");
          BlanketOrderPurchLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");

          ModifyLine := FALSE;
          CASE PurchLine."Document Type" OF
            PurchLine."Document Type"::Order,
            PurchLine."Document Type"::Invoice:
              Sign := 1;
            PurchLine."Document Type"::"Return Order",
            PurchLine."Document Type"::"Credit Memo":
              Sign := -1;
          END;
          IF Receive AND (PurchLine."Receipt No." = '') THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Qty. to Receive"
            ELSE
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Receive",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Qty. to Receive (Base)";
            ModifyLine := TRUE;
          END;
          IF Ship AND (PurchLine."Return Shipment No." = '') THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Return Qty. to Ship"
            ELSE
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Return Qty. to Ship",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Return Qty. to Ship (Base)";
            ModifyLine := TRUE;
          END;

          IF Invoice THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" + Sign * PurchLine."Qty. to Invoice"
            ELSE
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Invoice",0.00001);
            BlanketOrderPurchLine."Qty. Invoiced (Base)" :=
              BlanketOrderPurchLine."Qty. Invoiced (Base)" + Sign * PurchLine."Qty. to Invoice (Base)";
            ModifyLine := TRUE;
          END;

          IF ModifyLine THEN BEGIN
            BlanketOrderPurchLine.InitOutstanding;

            IF (BlanketOrderPurchLine.Quantity *
                BlanketOrderPurchLine."Quantity Received" < 0) OR
               (ABS(BlanketOrderPurchLine.Quantity) <
                ABS(BlanketOrderPurchLine."Quantity Received"))
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Quantity Received",
                STRSUBSTNO(
                  Text023,
                  BlanketOrderPurchLine.FIELDCAPTION(Quantity)));

            IF (BlanketOrderPurchLine."Quantity (Base)" *
                BlanketOrderPurchLine."Qty. Received (Base)" < 0) OR
               (ABS(BlanketOrderPurchLine."Quantity (Base)") <
                ABS(BlanketOrderPurchLine."Qty. Received (Base)"))
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Qty. Received (Base)",
                STRSUBSTNO(
                  Text023,
                  BlanketOrderPurchLine.FIELDCAPTION("Quantity Received")));

            BlanketOrderPurchLine.CALCFIELDS("Reserved Qty. (Base)");
            IF ABS(BlanketOrderPurchLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderPurchLine."Reserved Qty. (Base)")
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Reserved Qty. (Base)",Text024);

            BlanketOrderPurchLine."Qty. to Invoice" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Invoiced";
            BlanketOrderPurchLine."Qty. to Receive" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Received";
            BlanketOrderPurchLine."Qty. to Invoice (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Invoiced (Base)";
            BlanketOrderPurchLine."Qty. to Receive (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Received (Base)";

            BlanketOrderPurchLine.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE UpdatePurchaseHeader@163(VendorLedgerEntry@1000 : Record 25);
    BEGIN
      CASE GenJnlLineDocType OF
        GenJnlLine."Document Type"::Invoice:
          BEGIN
            FindVendorLedgerEntry(GenJnlLineDocType,GenJnlLineDocNo,VendorLedgerEntry);
            PurchInvHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchInvHeader.MODIFY;
          END;
        GenJnlLine."Document Type"::"Credit Memo":
          BEGIN
            FindVendorLedgerEntry(GenJnlLineDocType,GenJnlLineDocNo,VendorLedgerEntry);
            PurchCrMemoHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchCrMemoHeader.MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE PostVendorEntry@68(PurchHeader2@1006 : Record 38;TotalPurchLine2@1005 : Record 39;TotalPurchLineLCY2@1004 : Record 39;DocType@1003 : Option;DocNo@1002 : Code[20];ExtDocNo@1001 : Code[35];SourceCode@1000 : Code[10];TDSBaseIncludesServiceTax@1008 : Boolean);
    VAR
      GenJnlLine2@1007 : Record 81;
      JurisdictionPurchaseLine@1500100 : Record 39;
    BEGIN
      WITH PurchHeader2 DO BEGIN
        GenJnlLine2.INIT;
        GenJnlLine2."Posting Date" := "Posting Date";
        GenJnlLine2."Document Date" := "Document Date";
        GenJnlLine2.Description := "Posting Description";
        GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
        GenJnlLine2."Reason Code" := "Reason Code";
        GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::Vendor;
        GenJnlLine2."Account No." := "Pay-to Vendor No.";
        GenJnlLine2."Document Type" := DocType;
        GenJnlLine2."Document No." := DocNo;
        GenJnlLine2."External Document No." := ExtDocNo;
        GenJnlLine2."Currency Code" := "Currency Code";
        GenJnlLine2.Amount := -AmountToVendor;
        GenJnlLine2."Source Currency Code" := "Currency Code";
        GenJnlLine2."Source Currency Amount" := -AmountToVendor;
        GenJnlLine2."Amount (LCY)" := -AmountToVendorLCY;
        IF "Currency Code" = '' THEN
          GenJnlLine2."Currency Factor" := 1
        ELSE
          GenJnlLine2."Currency Factor" := "Currency Factor";
        GenJnlLine2."TDS Nature of Deduction" := VendNatureofDeduction;
        GenJnlLine2."TDS Group" := VendTDSGroup;
        GenJnlLine2."TDS From Orders" := TRUE;
        GenJnlLine2."Total TDS/TCS Incl. SHE CESS" :=
                  TotalPurchLine."Total TDS Including SHE CESS" + TotalPurchLine."Work Tax Amount";
        GenJnlLine2."Include Serv. Tax in TDS Base" := TDSBaseIncludesServiceTax;
        GenJnlLine2."Sales/Purch. (LCY)" := -TotalPurchLineLCY2.Amount;
        GenJnlLine2.Correction := Correction;
        GenJnlLine2."Inv. Discount (LCY)" := -TotalPurchLineLCY2."Inv. Discount Amount";
        GenJnlLine2."Sell-to/Buy-from No." := "Buy-from Vendor No.";
        GenJnlLine2."Bill-to/Pay-to No." := "Pay-to Vendor No.";
        GenJnlLine2."Salespers./Purch. Code" := "Purchaser Code";
        GenJnlLine2."System-Created Entry" := TRUE;
        GenJnlLine2."On Hold" := "On Hold";
        GenJnlLine2."Applies-to Doc. Type" := "Applies-to Doc. Type";
        GenJnlLine2."Applies-to Doc. No." := "Applies-to Doc. No.";
        GenJnlLine2."Applies-to ID" := "Applies-to ID";
        GenJnlLine2."Allow Application" := "Bal. Account No." = '';
        GenJnlLine2."Due Date" := "Due Date";
        GenJnlLine2."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine2."Pmt. Discount Date" := "Pmt. Discount Date";
        GenJnlLine2."Payment Discount %" := "Payment Discount %";
        GenJnlLine2."Source Type" := GenJnlLine2."Source Type"::Vendor;
        GenJnlLine2."Source No." := "Pay-to Vendor No.";
        GenJnlLine2."Source Code" := SourceCode;
        GenJnlLine2."Posting No. Series" := "Posting No. Series";
        GenJnlLine2."IC Partner Code" := "Pay-to IC Partner Code";
        GenJnlLine2."Creditor No." := "Creditor No.";
        GenJnlLine2."Payment Reference" := "Payment Reference";
        GenJnlLine2."Payment Method Code" := "Payment Method Code";
        GenJnlLine2."Posting Group" := "Vendor Posting Group";
        GenJnlLine2."Location Code" := "Location Code";
        GenJnlLine2."GST Input Service Distribution" := "GST Input Service Distribution";
        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          GenJnlLine2."GST Reverse Charge" := GSTManagement.IsItReverseCharge(PurchHeader2);
          GenJnlLine2."GST Vendor Type" := "GST Vendor Type";
          IF Location.GET("Location Code") THEN
            GenJnlLine2."Location State Code" := Location."State Code";
          GenJnlLine2."GST Bill-to/BuyFrom State Code" := State;
          JurisdictionPurchaseLine.SETRANGE("Document Type","Document Type");
          JurisdictionPurchaseLine.SETRANGE("Document No.","No.");
          JurisdictionPurchaseLine.SETFILTER(Type,'<>%1',JurisdictionPurchaseLine.Type::" ");
          JurisdictionPurchaseLine.SETFILTER(Quantity,'<>%1',0);
          IF JurisdictionPurchaseLine.FINDFIRST THEN
            GenJnlLine2."GST Jurisdiction Type" := JurisdictionPurchaseLine."GST Jurisdiction Type";
        END;
        GenJnlLine2."Transaction No. Serv. Tax" := "Transaction No. Serv. Tax";
        GenJnlLine2."Service Tax Registration No." := STaxPostingBuffer[1]."Service Tax Registration No.";
        GenJnlLine2."Service Tax Group Code" := STaxPostingBuffer[1]."Service Tax Group Code";
        GenJnlLine2."Input Service Distribution" := "Input Service Distribution";
        GenJnlLine2."Location Code" := PurchLine."Location Code";
        IF HasServiceTax(PurchHeader) THEN
          GenJnlLine2."S.T From Order" := TRUE;
        GenJnlLine2."Service Tax Rounding Type" := "Service Tax Rounding Type";
        GenJnlLine2."Service Tax Rounding Precision" := "Service Tax Rounding Precision";
        GenJnlLine2.PoT := PoT;
        GenJnlPostLine.RunWithCheck(GenJnlLine2);
        IF CVD AND CVDPayableToThirdParty THEN BEGIN
          StrOrderDetails.RESET;
          StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
          StrOrderDetails.SETRANGE("Document Type","Document Type");
          StrOrderDetails.SETRANGE("Document No.","No.");
          StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
          StrOrderDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type"::Excise);
          StrOrderDetails.SETRANGE(CVD,TRUE);
          StrOrderDetails.SETRANGE("CVD Payable to Third Party",TRUE);
          IF StrOrderDetails.FINDFIRST THEN;
          GenJnlLine2.INIT;
          GenJnlLine2."Posting Date" := "Posting Date";
          GenJnlLine2."Document Date" := "Document Date";
          GenJnlLine2.Description := "Posting Description";
          GenJnlLine2."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine2."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine2."Dimension Set ID" := "Dimension Set ID";
          GenJnlLine2."Reason Code" := "Reason Code";
          GenJnlLine2."Account Type" := GenJnlLine."Account Type"::"G/L Account";
          GenJnlLine2."Account No." := StrOrderDetails."CVD Third Party Code";
          GenJnlLine2."Document Type" := GenJnlLineDocType;
          GenJnlLine2."Document No." := GenJnlLineDocNo;
          GenJnlLine2."External Document No." := GenJnlLineExtDocNo;
          GenJnlLine2."Currency Code" := "Currency Code";
          IF "Currency Code" <> '' THEN
            GenJnlLine2.Amount := -ROUND(TotalPurchLine."Excise Amount",Currency."Amount Rounding Precision")
          ELSE
            GenJnlLine2.Amount := -TotalPurchLine."Excise Amount";
          GenJnlLine2."Source Currency Code" := "Currency Code";
          GenJnlLine2."Source Currency Amount" := -TotalPurchLine."Excise Amount";
          GenJnlLine2."Amount (LCY)" := -TotalPurchLineLCY."Excise Amount";

          IF "Currency Code" = '' THEN
            GenJnlLine2."Currency Factor" := 1
          ELSE
            GenJnlLine2."Currency Factor" := "Currency Factor";
          GenJnlLine2.Correction := Correction;
          GenJnlLine2."Salespers./Purch. Code" := "Purchaser Code";
          GenJnlLine2."System-Created Entry" := TRUE;
          GenJnlLine2."On Hold" := "On Hold";
          GenJnlLine2."Due Date" := "Due Date";
          GenJnlLine2."Source Code" := SrcCode;
          GenJnlLine2."Posting No. Series" := "Posting No. Series";
          GenJnlLine2."IC Partner Code" := "Pay-to IC Partner Code";
          GenJnlPostLine.RUN(GenJnlLine2);
        END;
      END;
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@64(DocType@1000 : Option;DocNo@1001 : Code[20];VAR VendorLedgerEntry@1002 : Record 25);
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",DocType);
      VendorLedgerEntry.SETRANGE("Document No.",DocNo);
      VendorLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE CopyCommentLines@6(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      PurchCommentLine@1004 : Record 43;
      PurchCommentLine2@1005 : Record 43;
    BEGIN
      PurchCommentLine.SETRANGE("Document Type",FromDocumentType);
      PurchCommentLine.SETRANGE("No.",FromNumber);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
          PurchCommentLine2 := PurchCommentLine;
          PurchCommentLine2."Document Type" := ToDocumentType;
          PurchCommentLine2."No." := ToNumber;
          PurchCommentLine2.INSERT;
        UNTIL PurchCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@52(VAR GenJnlLine@1000 : Record 81) : Integer;
    BEGIN
      EXIT(GenJnlPostLine.RunWithCheck(GenJnlLine));
    END;

    LOCAL PROCEDURE CheckPostRestrictions@108(PurchaseHeader@1000 : Record 38);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      PurchaseHeader.OnCheckPurchasePostRestrictions;

      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
      IF PurchaseHeader."Pay-to Vendor No." <> PurchaseHeader."Buy-from Vendor No." THEN BEGIN
        Vendor.GET(PurchaseHeader."Pay-to Vendor No.");
        Vendor.CheckBlockedVendOnDocs(Vendor,TRUE);
      END;
    END;

    LOCAL PROCEDURE CheckDim@34();
    VAR
      PurchLine2@1000 : Record 39;
    BEGIN
      PurchLine2."Line No." := 0;
      CheckDimComb(PurchLine2);
      CheckDimValuePosting(PurchLine2);

      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETFILTER(Type,'<>%1',PurchLine2.Type::" ");
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF (PurchHeader.Receive AND (PurchLine2."Qty. to Receive" <> 0)) OR
             (PurchHeader.Invoice AND (PurchLine2."Qty. to Invoice" <> 0)) OR
             (PurchHeader.Ship AND (PurchLine2."Return Qty. to Ship" <> 0))
          THEN BEGIN
            CheckDimComb(PurchLine2);
            CheckDimValuePosting(PurchLine2);
          END
        UNTIL PurchLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(PurchLine@1000 : Record 39);
    VAR
      DimMgt@1001 : Codeunit 408;
    BEGIN
      IF PurchLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchHeader."Dimension Set ID") THEN
          ERROR(
            Text032,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimCombErr);

      IF PurchLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(PurchLine."Dimension Set ID") THEN
          ERROR(
            Text033,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR PurchLine2@1000 : Record 39);
    VAR
      DimMgt@1001 : Codeunit 408;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF PurchLine2."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := PurchHeader."Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := PurchHeader."Purchaser Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := PurchHeader."Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := PurchHeader."Responsibility Center";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchHeader."Dimension Set ID") THEN
          ERROR(
            Text034,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine2.Type);
        NumberArr[1] := PurchLine2."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := PurchLine2."Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := PurchLine2."Work Center No.";
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchLine2."Dimension Set ID") THEN
          ERROR(
            Text035,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine2."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    LOCAL PROCEDURE CheckFAPostingPossibility@372(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseLineToFind@1002 : Record 39;
      FADepreciationBook@1003 : Record 5612;
      HasBookValue@1004 : Boolean;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::"Fixed Asset");
      PurchaseLine.SETFILTER("No.",'<>%1','');
      IF PurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLineToFind.COPYFILTERS(PurchaseLine);
          PurchaseLineToFind.SETRANGE("No.",PurchaseLine."No.");
          PurchaseLineToFind.SETRANGE("Depr. until FA Posting Date",NOT PurchaseLine."Depr. until FA Posting Date");
          IF NOT PurchaseLineToFind.ISEMPTY THEN
            ERROR(STRSUBSTNO(MixedDerpFAUntilPostingDateErr,PurchaseLine."No."));

          IF PurchaseLine."Depr. until FA Posting Date" THEN BEGIN
            PurchaseLineToFind.SETRANGE("Depr. until FA Posting Date",TRUE);
            PurchaseLineToFind.SETFILTER("Line No.",'<>%1',PurchaseLine."Line No.");
            IF NOT PurchaseLineToFind.ISEMPTY THEN BEGIN
              HasBookValue := FALSE;
              FADepreciationBook.SETRANGE("FA No.",PurchaseLine."No.");
              FADepreciationBook.FINDSET;
              REPEAT
                FADepreciationBook.CALCFIELDS("Book Value");
                HasBookValue := HasBookValue OR (FADepreciationBook."Book Value" <> 0);
              UNTIL (FADepreciationBook.NEXT = 0) OR HasBookValue;
              IF NOT HasBookValue THEN
                ERROR(STRSUBSTNO(CannotPostSameMultipleFAWhenDeprBookValueZeroErr,PurchaseLine."No."));
            END;
          END;
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckLines@396(PurchaseHeader@1000 : Record 38);
    BEGIN
      CheckDim;

      IF PurchaseHeader.Invoice THEN
        CheckFAPostingPossibility(PurchaseHeader);
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine."Document No.");
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        ClearItemChargeAssgntFilter;
        MARKEDONLY(TRUE);
        IF FINDSET THEN
          REPEAT
            ItemChargeAssgntPurch.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntPurch."Qty. Assigned" :=
              ItemChargeAssgntPurch."Qty. Assigned" + "Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchOrderChargeAssgnt@5814(PurchOrderInvLine@1000 : Record 39;PurchOrderLine@1001 : Record 39);
    VAR
      PurchOrderLine2@1002 : Record 39;
      PurchOrderInvLine2@1003 : Record 39;
      PurchRcptLine@1004 : Record 121;
      ReturnShptLine@1005 : Record 6651;
    BEGIN
      WITH PurchOrderInvLine DO BEGIN
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntPurch.MARKEDONLY(TRUE);
        IF TempItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            IF TempItemChargeAssgntPurch."Applies-to Doc. Type" = "Document Type" THEN BEGIN
              PurchOrderInvLine2.GET(
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
              IF ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::Order) AND
                  (PurchOrderInvLine2."Receipt No." = "Receipt No.")) OR
                 ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::"Return Order") AND
                  (PurchOrderInvLine2."Return Shipment No." = "Return Shipment No."))
              THEN BEGIN
                IF PurchLine."Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  IF NOT
                     PurchRcptLine.GET(PurchOrderInvLine2."Receipt No.",PurchOrderInvLine2."Receipt Line No.")
                  THEN
                    ERROR(Text014);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::Order,
                    PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                END ELSE BEGIN
                  IF NOT
                     ReturnShptLine.GET(PurchOrderInvLine2."Return Shipment No.",PurchOrderInvLine2."Return Shipment Line No.")
                  THEN
                    ERROR(Text040);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::"Return Order",
                    ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                END;
                UpdatePurchChargeAssgntLines(
                  PurchOrderLine,
                  PurchOrderLine2."Document Type",
                  PurchOrderLine2."Document No.",
                  PurchOrderLine2."Line No.",
                  TempItemChargeAssgntPurch."Qty. to Assign");
              END;
            END ELSE
              UpdatePurchChargeAssgntLines(
                PurchOrderLine,
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.",
                TempItemChargeAssgntPurch."Qty. to Assign");
          UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchChargeAssgntLines@5813(PurchOrderLine@1000 : Record 39;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtytoAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch2@1008 : Record 5805;
      LastLineNo@1006 : Integer;
      TotalToAssign@1007 : Decimal;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchOrderLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchOrderLine."Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchOrderLine."Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      IF ItemChargeAssgntPurch.FINDFIRST THEN BEGIN
        ItemChargeAssgntPurch."Qty. Assigned" :=
          ItemChargeAssgntPurch."Qty. Assigned" + QtytoAssign;
        ItemChargeAssgntPurch."Qty. to Assign" := 0;
        ItemChargeAssgntPurch."Amount to Assign" := 0;
        ItemChargeAssgntPurch.MODIFY;
      END ELSE BEGIN
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");

        TempItemChargeAssgntPurch2.SETRANGE("Document Type",TempItemChargeAssgntPurch."Document Type");
        TempItemChargeAssgntPurch2.SETRANGE("Document No.",TempItemChargeAssgntPurch."Document No.");
        TempItemChargeAssgntPurch2.SETRANGE("Document Line No.",TempItemChargeAssgntPurch."Document Line No.");
        TempItemChargeAssgntPurch2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntPurch."Qty. to Assign" +
          TempItemChargeAssgntPurch2."Qty. to Assign";

        IF ItemChargeAssgntPurch.FINDLAST THEN
          LastLineNo := ItemChargeAssgntPurch."Line No.";

        IF PurchOrderLine.Quantity < TotalToAssign THEN
          REPEAT
            TotalToAssign := TotalToAssign - ItemChargeAssgntPurch."Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          UNTIL (ItemChargeAssgntPurch.NEXT(-1) = 0) OR
                (TotalToAssign = PurchOrderLine.Quantity);

        InsertAssocOrderCharge(
          PurchOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntPurch."Applies-to Doc. Line Amount");
      END;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@48(PurchOrderLine@1000 : Record 39;ApplToDocType@1002 : Option;ApplToDocNo@1003 : Code[20];ApplToDocLineNo@1004 : Integer;LastLineNo@1007 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntPurch@1001 : Record 5805;
    BEGIN
      WITH NewItemChargeAssgntPurch DO BEGIN
        INIT;
        "Document Type" := PurchOrderLine."Document Type";
        "Document No." := PurchOrderLine."Document No.";
        "Document Line No." := PurchOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntPurch."Item Charge No.";
        "Item No." := TempItemChargeAssgntPurch."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntPurch."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntPurch.Description;
        "Unit Cost" := TempItemChargeAssgntPurch."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(PurchHeader@1000 : Record 38);
    VAR
      PurchLine2@1001 : Record 39;
      PurchLine3@1002 : Record 39;
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1102601000 : Decimal;
    BEGIN
      TempItemChargeAssgntPurch.RESET;
      TempItemChargeAssgntPurch.DELETEALL;

      // Check for max qty posting
      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETRANGE(Type,PurchLine2.Type::"Charge (Item)");
      IF PurchLine2.ISEMPTY THEN
        EXIT;

      PurchLine2.FINDSET;
      REPEAT
        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine2."Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine2."Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
        ItemChargeAssgntPurch.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            TempItemChargeAssgntPurch.INIT;
            TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
            TempItemChargeAssgntPurch.INSERT;
          UNTIL ItemChargeAssgntPurch.NEXT = 0;

        IF PurchLine2."Qty. to Invoice" <> 0 THEN BEGIN
          PurchLine2.TESTFIELD("Job No.",'');
          IF PurchHeader.Invoice AND
             (PurchLine2."Qty. to Receive" + PurchLine2."Return Qty. to Ship" <> 0) AND
             ((PurchHeader.Ship OR PurchHeader.Receive) OR
              (ABS(PurchLine2."Qty. to Invoice") >
               ABS(PurchLine2."Qty. Rcd. Not Invoiced" + PurchLine2."Qty. to Receive") +
               ABS(PurchLine2."Ret. Qty. Shpd Not Invd.(Base)" + PurchLine2."Return Qty. to Ship")))
          THEN
            PurchLine2.TESTFIELD("Line Amount");

          IF NOT PurchHeader.Receive THEN
            PurchLine2."Qty. to Receive" := 0;
          IF NOT PurchHeader.Ship THEN
            PurchLine2."Return Qty. to Ship" := 0;
          IF ABS(PurchLine2."Qty. to Invoice") >
             ABS(PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
               PurchLine2."Return Qty. Shipped" + PurchLine2."Return Qty. to Ship" -
               PurchLine2."Quantity Invoiced")
          THEN
            PurchLine2."Qty. to Invoice" :=
              PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
              PurchLine2."Return Qty. Shipped (Base)" + PurchLine2."Return Qty. to Ship (Base)" -
              PurchLine2."Quantity Invoiced";

          PurchLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
          IF ABS(PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned") >
             ABS(PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced")
          THEN
            ERROR(Text036,
              PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced" -
              PurchLine2."Qty. Assigned",PurchLine2.FIELDCAPTION("Document Type"),
              PurchLine2."Document Type",PurchLine2.FIELDCAPTION("Document No."),
              PurchLine2."Document No.",PurchLine2.FIELDCAPTION("Line No."),
              PurchLine2."Line No.");
          IF PurchLine2.Quantity =
             PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced"
          THEN BEGIN
            IF PurchLine2."Qty. to Assign" <> 0 THEN
              IF PurchLine2.Quantity = PurchLine2."Quantity Invoiced" THEN BEGIN
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
                TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLine2."Document Type");
                IF TempItemChargeAssgntPurch.FINDSET THEN
                  REPEAT
                    PurchLine3.GET(
                      TempItemChargeAssgntPurch."Applies-to Doc. Type",
                      TempItemChargeAssgntPurch."Applies-to Doc. No.",
                      TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                    IF PurchLine3.Quantity = PurchLine3."Quantity Invoiced" THEN
                      ERROR(Text038,PurchLine3.TABLECAPTION,
                        PurchLine3.FIELDCAPTION("Document Type"),PurchLine3."Document Type",
                        PurchLine3.FIELDCAPTION("Document No."),PurchLine3."Document No.",
                        PurchLine3.FIELDCAPTION("Line No."),PurchLine3."Line No.");
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
              END;
            IF PurchLine2.Quantity <>
               PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned"
            THEN
              AssignError := TRUE;
          END;

          IF (PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned") <
             (PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced")
          THEN
            ERROR(Text059,PurchLine2."No.");

          // check if all ILEs exist
          QtyNeeded := PurchLine2."Qty. to Assign";
          TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
          IF TempItemChargeAssgntPurch.FINDSET THEN
            REPEAT
              IF (TempItemChargeAssgntPurch."Applies-to Doc. Type" <> PurchLine2."Document Type") OR
                 (TempItemChargeAssgntPurch."Applies-to Doc. No." <> PurchLine2."Document No.")
              THEN
                QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign"
              ELSE BEGIN
                PurchLine3.GET(
                  TempItemChargeAssgntPurch."Applies-to Doc. Type",
                  TempItemChargeAssgntPurch."Applies-to Doc. No.",
                  TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                IF ItemLedgerEntryExist(PurchLine3) THEN
                  QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign";
              END;
            UNTIL TempItemChargeAssgntPurch.NEXT = 0;

          IF QtyNeeded > 0 THEN
            ERROR(Text060,PurchLine2."No.");
        END;
      UNTIL PurchLine2.NEXT = 0;

      // Check purchlines
      IF AssignError THEN
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]
        THEN
          InvoiceEverything := TRUE
        ELSE BEGIN
          PurchLine2.RESET;
          PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
          PurchLine2.SETFILTER(Type,'%1|%2',PurchLine2.Type::Item,PurchLine2.Type::"Charge (Item)");
          IF PurchLine2.FINDSET THEN
            REPEAT
              IF PurchHeader.Ship OR PurchHeader.Receive THEN
                InvoiceEverything :=
                  PurchLine2.Quantity = PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced"
              ELSE
                InvoiceEverything :=
                  (PurchLine2.Quantity = PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") AND
                  (PurchLine2."Qty. to Invoice" =
                   PurchLine2."Qty. Rcd. Not Invoiced" + PurchLine2."Return Qty. Shipped Not Invd.");
            UNTIL (PurchLine2.NEXT = 0) OR (NOT InvoiceEverything);
        END;

      IF InvoiceEverything AND AssignError THEN
        ERROR(Text037);
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntPurch.MARKEDONLY(FALSE);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(VAR ItemChargePurchLine@1000 : Record 39);
    BEGIN
      WITH TempItemChargeAssgntPurch DO
        IF (ItemChargePurchLine."Document Type" <> "Document Type") OR
           (ItemChargePurchLine."Document No." <> "Document No.") OR
           (ItemChargePurchLine."Line No." <> "Document Line No.")
        THEN BEGIN
          ItemChargePurchLine.GET("Document Type","Document No.","Document Line No.");
          IF NOT PurchHeader.Receive THEN
            PurchLine2."Qty. to Receive" := 0;
          IF NOT PurchHeader.Ship THEN
            PurchLine2."Return Qty. to Ship" := 0;
          IF ABS(PurchLine2."Qty. to Invoice") >
             ABS(PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
               PurchLine2."Return Qty. Shipped" + PurchLine2."Return Qty. to Ship" -
               PurchLine2."Quantity Invoiced")
          THEN
            PurchLine2."Qty. to Invoice" :=
              PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
              PurchLine2."Return Qty. Shipped (Base)" + PurchLine2."Return Qty. to Ship (Base)" -
              PurchLine2."Quantity Invoiced";
        END;
    END;

    LOCAL PROCEDURE OnlyAssgntPosting@36() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
      QtyLeftToAssign@1002 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        ItemChargeAssgntOnly := FALSE;
        QtyLeftToAssign := FALSE;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
        IF PurchLine.FINDSET THEN
          REPEAT
            PurchLine.CALCFIELDS("Qty. Assigned");
            IF PurchLine."Quantity Invoiced" > PurchLine."Qty. Assigned" THEN
              QtyLeftToAssign := TRUE;
          UNTIL PurchLine.NEXT = 0;

        IF QtyLeftToAssign THEN
          CopyAndCheckItemCharge(PurchHeader);
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
        TempItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
        PurchLine.SETRANGE(Type);
        PurchLine.SETRANGE("Quantity Invoiced");
        PurchLine.SETFILTER("Qty. to Assign",'<>0');
        IF PurchLine.FINDSET THEN
          REPEAT
            TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
            IF TempItemChargeAssgntPurch.FINDFIRST THEN
              ItemChargeAssgntOnly := TRUE;
          UNTIL (PurchLine.NEXT = 0) OR ItemChargeAssgntOnly
        ELSE
          ItemChargeAssgntOnly := FALSE;
      END;
      EXIT(ItemChargeAssgntOnly);
    END;

    LOCAL PROCEDURE CalcQtyToInvoice@5810(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyToHandle) > ABS(QtyToInvoice) THEN
        EXIT(QtyToHandle);

      EXIT(QtyToInvoice);
    END;

    LOCAL PROCEDURE GetGLSetup@20();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR PurchLine@1000 : Record 39);
    VAR
      PurchLine2@1001 : Record 39;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      PurchLine2.COPY(PurchLine);
      IF PurchLine2."Prod. Order No." <> '' THEN
        EXIT;
      PurchLine2.SETRANGE(Type,PurchLine2.Type::Item);
      PurchLine2.SETRANGE("Drop Shipment",FALSE);
      IF PurchLine2.FINDSET THEN
        REPEAT
          GetLocation(PurchLine2."Location Code");
          CASE PurchLine2."Document Type" OF
            PurchLine2."Document Type"::Order:
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (PurchLine2.Quantity >= 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (PurchLine2.Quantity < 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Purchase Line",
                       PurchLine2."Document Type",
                       PurchLine2."Document No.",
                       PurchLine2."Line No.",
                       0,
                       PurchLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            PurchLine2."Document Type"::"Return Order":
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (PurchLine2.Quantity < 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (PurchLine2.Quantity >= 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Purchase Line",
                       PurchLine2."Document Type",
                       PurchLine2."Document No.",
                       PurchLine2."Line No.",
                       0,
                       PurchLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            PurchLine2."Document Type"::Invoice,PurchLine2."Document Type"::"Credit Memo":
              IF Location."Directed Put-away and Pick" THEN
                Location.TESTFIELD("Adjustment Bin Code");
          END;
          IF ShowError THEN
            ERROR(
              Text026,
              PurchLine2.FIELDCAPTION("Document Type"),
              PurchLine2."Document Type",
              PurchLine2.FIELDCAPTION("Document No."),
              PurchLine2."Document No.",
              PurchLine2.FIELDCAPTION("Line No."),
              PurchLine2."Line No.");
        UNTIL PurchLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;PurchLine@1002 : Record 39;VAR TempWhseJnlLine@1001 : TEMPORARY Record 7311);
    VAR
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH PurchLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Purchase Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Document" := WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        TempWhseJnlLine."Source Code" := SrcCode;
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rcpt.";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Rcpt.";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307() : Boolean;
    VAR
      WhseSetup@1000 : Record 5769;
    BEGIN
      IF (PurchLine.Type = PurchLine.Type::Item) AND
         (NOT PurchLine."Drop Shipment")
      THEN BEGIN
        IF PurchLine."Location Code" = '' THEN BEGIN
          WhseSetup.GET;
          IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
            EXIT(WhseSetup."Require Pick");

          EXIT(WhseSetup."Require Receive");
        END;

        GetLocation(PurchLine."Location Code");
        IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
          EXIT(Location."Require Pick");

        EXIT(Location."Require Receive");
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertRcptEntryRelation@38(VAR PurchRcptLine@1002 : Record 121) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsPurchRcptLine(PurchRcptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END;
      EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnShptLine@1002 : Record 6651) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsReturnShptLine(ReturnShptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END;
      EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(VAR PurchLine@1019 : Record 39);
    VAR
      PurchLineToCheck@1000 : Record 39;
      ReservationEntry@1001 : Record 337;
      Item@1016 : Record 27;
      ItemTrackingCode@1009 : Record 6502;
      CreateReservEntry@1004 : Codeunit 99000830;
      ItemTrackingManagement@1015 : Codeunit 6500;
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      PurchLineQtyToHandle@1023 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoRequired@1014 : Boolean;
      CheckPurchLine@1008 : Boolean;
    BEGIN
      // if a PurchaseLine is posted with ItemTracking then tracked quantity must be
      // equal to posted quantity

      IF PurchHeader."Document Type" IN
         [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] = FALSE
      THEN
        EXIT;

      TrackingQtyToHandle := 0;

      PurchLineToCheck.COPY(PurchLine);
      PurchLineToCheck.SETRANGE(Type,PurchLineToCheck.Type::Item);
      IF PurchHeader.Receive THEN BEGIN
        PurchLineToCheck.SETFILTER("Quantity Received",'<>%1',0);
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Qty. to Receive");
      END ELSE BEGIN
        PurchLineToCheck.SETFILTER("Return Qty. Shipped",'<>%1',0);
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Return Qty. to Ship");
      END;

      IF PurchLineToCheck.FINDSET THEN BEGIN
        ReservationEntry."Source Type" := DATABASE::"Purchase Line";
        ReservationEntry."Source Subtype" := PurchHeader."Document Type";
        SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
        REPEAT
          // Only Item where no SerialNo or LotNo is required
          Item.GET(PurchLineToCheck."No.");
          IF Item."Item Tracking Code" <> '' THEN BEGIN
            Inbound := (PurchLineToCheck.Quantity * SignFactor) > 0;
            ItemTrackingCode.Code := Item."Item Tracking Code";
            ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
              ItemJnlLine."Entry Type"::Purchase,
              Inbound,
              SNRequired,
              LotRequired,
              SNInfoRequired,
              LotInfoRequired);
            CheckPurchLine := (SNRequired = FALSE) AND (LotRequired = FALSE);
            IF CheckPurchLine THEN
              CheckPurchLine := GetTrackingQuantities(PurchLineToCheck,0,TrackingQtyToHandle);
          END ELSE
            CheckPurchLine := FALSE;

          TrackingQtyToHandle := 0;

          IF CheckPurchLine THEN BEGIN
            GetTrackingQuantities(PurchLineToCheck,1,TrackingQtyToHandle);
            TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
            IF PurchHeader.Receive THEN
              PurchLineQtyToHandle := PurchLineToCheck."Qty. to Receive (Base)"
            ELSE
              PurchLineQtyToHandle := PurchLineToCheck."Return Qty. to Ship (Base)";
            IF TrackingQtyToHandle <> PurchLineQtyToHandle THEN
              ERROR(STRSUBSTNO(Text046,ErrorFieldCaption));
          END;
        UNTIL PurchLineToCheck.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(PurchLine@1000 : Record 39;FunctionType@1002 : 'CheckTrackingExists,GetQty';VAR TrackingQtyToHandle@1003 : Decimal) : Boolean;
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservEntry@1001 : Record 337;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
      END;
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;

      CASE FunctionType OF
        FunctionType::CheckTrackingExists:
          BEGIN
            TrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT TrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETRANGE("Serial No.");
            ReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;
        FunctionType::GetQty:
          BEGIN
            IF ReservEntry.FINDSET THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
              UNTIL ReservEntry.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@33(VAR TempInvoicingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      TempInvoicingSpecification.RESET;
      IF TempInvoicingSpecification.FINDSET THEN BEGIN
        REPEAT
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          IF NOT TempTrackingSpecification.INSERT THEN BEGIN
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            IF TempInvoicingSpecification."Qty. to Invoice (Base)" = TempInvoicingSpecification."Quantity Invoiced (Base)" THEN
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity Invoiced (Base)"
            ELSE
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          END;
        UNTIL TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      TempTrackingSpecification.RESET;
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        REPEAT
          TrackingSpecification := TempTrackingSpecification;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification.Correction := FALSE;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          IF TempTrackingSpecification."Buffer Status" = TempTrackingSpecification."Buffer Status"::MODIFY THEN
            TrackingSpecification.MODIFY
          ELSE
            TrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      END;

      ReservePurchLine.UpdateItemTrackingAfterPosting(PurchHeader);
    END;

    LOCAL PROCEDURE CalcBaseQty@29(ItemNo@1002 : Code[20];UOMCode@1004 : Code[10];Qty@1000 : Decimal) : Decimal;
    VAR
      UOMMgt@1001 : Codeunit 5402;
      Item@1003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      EXIT(ROUND(Qty * UOMMgt.GetQtyPerUnitOfMeasure(Item,UOMCode),0.00001));
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      TempValueEntryRelation.RESET;
      IF TempValueEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE PostItemCharge@42(VAR PurchLine@1000 : Record 39;ItemEntryNo@1004 : Integer;QuantityBase@1005 : Decimal;AmountToAssign@1006 : Decimal;QtyToAssign@1007 : Decimal;IndirectCostPct@1008 : Decimal);
    VAR
      DummyTrackingSpecification@1001 : Record 336;
      PurchLineToPost@1009 : Record 39;
      CurrExchRate@1002 : Record 330;
      TotalChargeAmt@1003 : Decimal;
      TotalChargeAmtLCY@1010 : Decimal;
      PurchRcptLine2@1500002 : Record 121;
      ReturnRcptLine2@1500003 : Record 6661;
      SalesShptLine2@1500005 : Record 111;
      ReturnShptLine2@1500004 : Record 6651;
      TransferRcptLine2@1500001 : Record 5747;
      OriginalAmount@1500000 : Decimal;
      DocTransactionType@1500006 : 'Purchase,Sale';
    BEGIN
      OriginalAmount := 0;
      ItemLedgerQuantity := 0;
      WITH TempItemChargeAssgntPurch DO BEGIN
        PurchLineToPost := PurchLine;
        PurchLineToPost."No." := "Item No.";
        PurchLineToPost."Line No." := "Document Line No.";
        PurchLineToPost."Appl.-to Item Entry" := ItemEntryNo;
        PurchLineToPost."Indirect Cost %" := IndirectCostPct;

        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
          CASE "Applies-to Doc. Type" OF
            "Applies-to Doc. Type"::Receipt:
              BEGIN
                PurchRcptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemLedgerQuantity := PurchRcptLine2."Quantity (Base)";
                OriginalAmount := PurchLineToPost.Amount;
              END;
            "Applies-to Doc. Type"::"Return Receipt":
              BEGIN
                ReturnRcptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemLedgerQuantity := ReturnRcptLine2."Quantity (Base)";
                OriginalAmount := PurchLineToPost.Amount;
              END;
            "Applies-to Doc. Type"::"Sales Shipment":
              BEGIN
                SalesShptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemLedgerQuantity := SalesShptLine2."Quantity (Base)";
                OriginalAmount := -PurchLineToPost.Amount;
              END;
            "Applies-to Doc. Type"::"Return Shipment":
              BEGIN
                ReturnShptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemLedgerQuantity := ReturnShptLine2."Quantity (Base)";
                OriginalAmount := -PurchLineToPost.Amount;
              END;
            "Applies-to Doc. Type"::"Transfer Receipt":
              BEGIN
                TransferRcptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                ItemLedgerQuantity := TransferRcptLine2."Quantity (Base)";
                OriginalAmount := PurchLineToPost.Amount;
              END;
          END;
          GSTAmountLoaded :=
            GSTManagement.GetItemChargeGSTAmount(
              DocTransactionType::Purchase,PurchLine."Document Type",
              PurchLine."Document No.",PurchLine."Line No.","Applies-to Doc. Type",
              "Applies-to Doc. No.","Applies-to Doc. Line No.",
              PurchLine."Qty. to Invoice (Base)" / PurchLine."Quantity (Base)",FALSE);
        END ELSE
          IF  "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            CASE "Applies-to Doc. Type" OF
              "Applies-to Doc. Type"::Receipt:
                BEGIN
                  PurchRcptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                  ItemLedgerQuantity := -PurchRcptLine2."Quantity (Base)";
                  OriginalAmount := -PurchLineToPost.Amount;
                END;
              "Applies-to Doc. Type"::"Return Receipt":
                BEGIN
                  ReturnRcptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                  ItemLedgerQuantity := -ReturnRcptLine2."Quantity (Base)";
                  OriginalAmount := -PurchLineToPost.Amount;
                END;
              "Applies-to Doc. Type"::"Sales Shipment":
                BEGIN
                  SalesShptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                  ItemLedgerQuantity := -SalesShptLine2."Quantity (Base)";
                  OriginalAmount := PurchLineToPost.Amount;
                END;
              "Applies-to Doc. Type"::"Return Shipment":
                BEGIN
                  ReturnShptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                  ItemLedgerQuantity := -ReturnShptLine2."Quantity (Base)";
                  OriginalAmount := PurchLineToPost.Amount;
                END;
              "Applies-to Doc. Type"::"Transfer Receipt":
                BEGIN
                  TransferRcptLine2.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
                  ItemLedgerQuantity := -TransferRcptLine2."Quantity (Base)";
                  OriginalAmount := -PurchLineToPost.Amount;
                END;
            END;
            GSTAmountLoaded := -GSTManagement.GetItemChargeGSTAmount(DocTransactionType::Purchase,PurchLine."Document Type",
              PurchLine."Document No.",PurchLine."Line No.","Applies-to Doc. Type",
              "Applies-to Doc. No.","Applies-to Doc. Line No.",PurchLine."Qty. to Invoice (Base)" / PurchLine."Quantity (Base)",FALSE);
          END;
        PurchLineToPost.Amount := AmountToAssign;

        PurchLineToPost."Tax Base Amount" := (PurchLineToPost."Tax Base Amount" * AmountToAssign)
          / OriginalAmount;
        PurchLineToPost."Tax Amount" := (PurchLineToPost."Tax Amount" * AmountToAssign)
          / OriginalAmount;
        PurchLineToPost."Amount Loaded on Inventory" := (PurchLineToPost."Amount Loaded on Inventory" * AmountToAssign)
          / OriginalAmount;
        PurchLineToPost."Amount Added to Inventory" :=
          (PurchLineToPost."Amount Added to Inventory" * AmountToAssign) / OriginalAmount;
        PurchLineToPost."Input Tax Credit Amount" := (PurchLineToPost."Input Tax Credit Amount" * AmountToAssign)
          / OriginalAmount;
        PurchLineToPost."VAT able Purchase Tax Amount" := (PurchLineToPost."VAT able Purchase Tax Amount" * AmountToAssign)
          / OriginalAmount;
        ChargeItemAssgnt := TRUE;
        PostItemChargeAssgntDiff := TRUE;

        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          PurchLineToPost.Amount := -PurchLineToPost.Amount;

        IF PurchLineToPost."Currency Code" <> '' THEN
          PurchLineToPost."Unit Cost" := ROUND(
              PurchLineToPost.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        ELSE
          PurchLineToPost."Unit Cost" := ROUND(
              PurchLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        TotalChargeAmt := TotalChargeAmt + PurchLineToPost.Amount;
        IF PurchHeader."Currency Code" <> '' THEN
          PurchLineToPost.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",TotalChargeAmt,PurchHeader."Currency Factor");

        PurchLineToPost.Amount := ROUND(PurchLineToPost.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        IF PurchHeader."Currency Code" <> '' THEN
          TotalChargeAmtLCY := TotalChargeAmtLCY + PurchLineToPost.Amount;
        PurchLineToPost."Unit Cost (LCY)" :=
          ROUND(
            PurchLineToPost.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        PurchLineToPost."Inv. Discount Amount" := ROUND(
            PurchLine."Inv. Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");

        PurchLineToPost."Line Discount Amount" := ROUND(
            PurchLine."Line Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        PurchLineToPost."Line Amount" := ROUND(
            PurchLine."Line Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        UpdatePurchLineDimSetIDFromAppliedEntry(PurchLineToPost,PurchLine);
        PurchLine."Inv. Discount Amount" := PurchLine."Inv. Discount Amount" - PurchLineToPost."Inv. Discount Amount";
        PurchLine."Line Discount Amount" := PurchLine."Line Discount Amount" - PurchLineToPost."Line Discount Amount";
        PurchLine."Line Amount" := PurchLine."Line Amount" - PurchLineToPost."Line Amount";
        PurchLine.Quantity := PurchLine.Quantity - QtyToAssign;
        PostItemJnlLine(
          PurchLineToPost,
          0,0,
          QuantityBase,QuantityBase,
          PurchLineToPost."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
      END;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@45(PurchLine3@1000 : Record 39);
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      IF TempHandlingSpecification.FINDSET THEN
        REPEAT
          TempWhseSplitSpecification := TempHandlingSpecification;
          TempWhseSplitSpecification."Source Type" := DATABASE::"Purchase Line";
          TempWhseSplitSpecification."Source Subtype" := PurchLine3."Document Type";
          TempWhseSplitSpecification."Source ID" := PurchLine3."Document No.";
          TempWhseSplitSpecification."Source Ref. No." := PurchLine3."Line No.";
          TempWhseSplitSpecification.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record 37;VAR ItemJnlLine@1001 : Record 83;VAR QtyToBeShippedBase@1002 : Decimal;ApplySpecificItemTracking@1003 : Boolean);
    VAR
      ReserveSalesLine@1006 : Codeunit 99000832;
      RemainingQuantity@1004 : Decimal;
      CheckApplFromItemEntry@1005 : Boolean;
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      IF NOT ApplySpecificItemTracking THEN
        ReserveSalesLine.TransferSalesLineToItemJnlLine(
          SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
      ELSE BEGIN
        TempTrackingSpecification.RESET;
        TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Purchase Line");
        TempTrackingSpecification.SETRANGE("Source Subtype",PurchLine."Document Type");
        TempTrackingSpecification.SETRANGE("Source ID",PurchLine."Document No.");
        TempTrackingSpecification.SETRANGE("Source Batch Name",'');
        TempTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
        TempTrackingSpecification.SETRANGE("Source Ref. No.",PurchLine."Line No.");
        IF TempTrackingSpecification.ISEMPTY THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry,FALSE)
        ELSE BEGIN
          ReserveSalesLine.SetApplySpecificItemTracking(TRUE);
          ReserveSalesLine.SetOverruleItemTracking(TRUE);
          TempTrackingSpecification.FINDSET;
          IF TempTrackingSpecification."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
            ERROR(Text043);
          REPEAT
            ItemJnlLine."Serial No." := TempTrackingSpecification."Serial No.";
            ItemJnlLine."Lot No." := TempTrackingSpecification."Lot No.";
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification."Item Ledger Entry No.";
            RemainingQuantity :=
              ReserveSalesLine.TransferSalesLineToItemJnlLine(
                SalesOrderLine,ItemJnlLine,TempTrackingSpecification."Quantity (Base)",CheckApplFromItemEntry,FALSE);
            IF RemainingQuantity <> 0 THEN
              ERROR(Text044);
          UNTIL TempTrackingSpecification.NEXT = 0;
          ItemJnlLine."Serial No." := '';
          ItemJnlLine."Lot No." := '';
          ItemJnlLine."Applies-to Entry" := 0;
        END;
      END;
    END;

    PROCEDURE SetWhseRcptHeader@26(VAR WhseRcptHeader2@1000 : Record 7316);
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE CopySalesCommentLines@649(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLine@1004 : Record 44;
      SalesCommentLine2@1005 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLine.SETRANGE("No.",FromNumber);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine2 := SalesCommentLine;
          SalesCommentLine2."Document Type" := ToDocumentType;
          SalesCommentLine2."No." := ToNumber;
          SalesCommentLine2.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNextPurchline@54(VAR PurchLine@1000 : Record 39) : Boolean;
    BEGIN
      IF NOT PurchaseLinesProcessed THEN
        IF PurchLine.NEXT = 1 THEN
          EXIT(FALSE);
      PurchaseLinesProcessed := TRUE;
      IF TempPrepmtPurchLine.FIND('-') THEN BEGIN
        PurchLine := TempPrepmtPurchLine;
        TempPrepmtPurchLine.DELETE;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreatePrepmtLines@51(PurchHeader@1003 : Record 38;VAR TempPrepmtPurchLine@1004 : Record 39;CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record 15;
      PurchLine@1000 : Record 39;
      TempExtTextLine@1011 : TEMPORARY Record 280;
      GenPostingSetup@1005 : Record 252;
      TransferExtText@1012 : Codeunit 378;
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrePmtTestRun@1014 : Boolean;
      PrepmtAmtToDeduct@1016 : Decimal;
    BEGIN
      GetGLSetup;
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF NOT FIND('+') THEN
          EXIT;
        NextLineNo := "Line No." + 10000;
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        IF FIND('-') THEN
          REPEAT
            IF CompleteFunctionality THEN
              IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
                IF NOT PurchHeader.Receive AND ("Qty. to Invoice" = Quantity - "Quantity Invoiced") THEN
                  IF "Qty. Rcd. Not Invoiced" < "Qty. to Invoice" THEN
                    VALIDATE("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                IF "Prepayment %" <> 100 THEN
                  CASE TRUE OF
                    ("Prepmt Amt to Deduct" <> 0) AND
                    (ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision") < "Prepmt Amt to Deduct"):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(
                          Text047,
                          ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                    ("Prepmt. Amt. Inv." <> 0) AND
                    (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                     ROUND(
                       ROUND(
                         ROUND("Direct Unit Cost" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),
                           Currency."Amount Rounding Precision") *
                         (1 - "Line Discount %" / 100),Currency."Amount Rounding Precision") *
                       "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                      FIELDERROR(
                        "Prepmt Amt to Deduct",
                        STRSUBSTNO(
                          Text048,
                          ROUND(
                            "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                            (1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision")));
                  END;
              END ELSE
                IF NOT PrePmtTestRun THEN BEGIN
                  TestGetRcptPPmtAmtToDeduct(PurchHeader);
                  PrePmtTestRun := TRUE;
                END;

            IF "Prepmt Amt to Deduct" <> 0 THEN BEGIN
              IF ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
              TempLineFound := FALSE;
              IF PurchHeader."Compress Prepayment" THEN BEGIN
                TempPrepmtPurchLine.SETRANGE("No.",GLAcc."No.");
                TempPrepmtPurchLine.SETRANGE("Job No.","Job No.");
                TempPrepmtPurchLine.SETRANGE("Dimension Set ID","Dimension Set ID");
                TempLineFound := TempPrepmtPurchLine.FINDFIRST;
              END;
              IF TempLineFound THEN BEGIN
                PrepmtAmtToDeduct :=
                  TempPrepmtPurchLine."Prepmt Amt to Deduct" +
                  InsertedPrepmtVATBaseToDeduct(PurchLine,TempPrepmtPurchLine."Line No.",TempPrepmtPurchLine."Direct Unit Cost");
                VATDifference := TempPrepmtPurchLine."VAT Difference";
                TempPrepmtPurchLine.VALIDATE(
                  "Direct Unit Cost",TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                IF "Prepayment %" < TempPrepmtPurchLine."Prepayment %" THEN
                  TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
                TempPrepmtPurchLine.MODIFY;
              END ELSE BEGIN
                TempPrepmtPurchLine.INIT;
                TempPrepmtPurchLine."Document Type" := PurchHeader."Document Type";
                TempPrepmtPurchLine."Document No." := PurchHeader."No.";
                TempPrepmtPurchLine."Line No." := 0;
                TempPrepmtPurchLine."System-Created Entry" := TRUE;
                IF CompleteFunctionality THEN
                  TempPrepmtPurchLine.VALIDATE(Type,TempPrepmtPurchLine.Type::"G/L Account")
                ELSE
                  TempPrepmtPurchLine.Type := TempPrepmtPurchLine.Type::"G/L Account";
                TempPrepmtPurchLine.VALIDATE("No.",GenPostingSetup."Purch. Prepayments Account");
                TempPrepmtPurchLine.VALIDATE(Quantity,-1);
                TempPrepmtPurchLine."Qty. to Receive" := TempPrepmtPurchLine.Quantity;
                TempPrepmtPurchLine."Qty. to Invoice" := TempPrepmtPurchLine.Quantity;
                PrepmtAmtToDeduct := InsertedPrepmtVATBaseToDeduct(PurchLine,NextLineNo,0);
                TempPrepmtPurchLine.VALIDATE("Direct Unit Cost","Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepmt Amt to Deduct" := PrepmtAmtToDeduct;
                TempPrepmtPurchLine."Prepayment %" := "Prepayment %";
                TempPrepmtPurchLine."Prepayment Line" := TRUE;
                TempPrepmtPurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                TempPrepmtPurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                TempPrepmtPurchLine."Dimension Set ID" := "Dimension Set ID";
                TempPrepmtPurchLine."Job No." := "Job No.";
                TempPrepmtPurchLine."Job Task No." := "Job Task No.";
                TempPrepmtPurchLine."Job Line Type" := "Job Line Type";
                TempPrepmtPurchLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                TempPrepmtPurchLine.INSERT;

                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtPurchLine."No.",DATABASE::"Purch. Inv. Line",
                  PurchHeader."Document Date",PurchHeader."Language Code",TempExtTextLine);
                IF TempExtTextLine.FIND('-') THEN
                  REPEAT
                    TempPrepmtPurchLine.INIT;
                    TempPrepmtPurchLine.Description := TempExtTextLine.Text;
                    TempPrepmtPurchLine."System-Created Entry" := TRUE;
                    TempPrepmtPurchLine."Prepayment Line" := TRUE;
                    TempPrepmtPurchLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    TempPrepmtPurchLine.INSERT;
                  UNTIL TempExtTextLine.NEXT = 0;
              END;
            END;
          UNTIL NEXT = 0
      END;
      DividePrepmtAmountLCY(TempPrepmtPurchLine,PurchHeader);
    END;

    LOCAL PROCEDURE InsertedPrepmtVATBaseToDeduct@82(PurchLine@1000 : Record 39;PrepmtLineNo@1001 : Integer;TotalPrepmtAmtToDeduct@1002 : Decimal) : Decimal;
    VAR
      PrepmtVATBaseToDeduct@1003 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        IF PurchHeader."Prices Including VAT" THEN
          PrepmtVATBaseToDeduct :=
            ROUND(
              (TotalPrepmtAmtToDeduct + "Prepmt Amt to Deduct") / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision") -
            ROUND(
              TotalPrepmtAmtToDeduct / (1 + "Prepayment VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          PrepmtVATBaseToDeduct := "Prepmt Amt to Deduct";
      END;
      WITH TempPrepmtDeductLCYPurchLine DO BEGIN
        TempPrepmtDeductLCYPurchLine := PurchLine;
        IF "Document Type" = "Document Type"::Order THEN
          "Qty. to Invoice" := GetQtyToInvoice(PurchLine)
        ELSE
          GetLineDataFromOrder(TempPrepmtDeductLCYPurchLine);
        CalcPrepaymentToDeduct;
        "Line Amount" := GetLineAmountToHandle("Qty. to Invoice");
        "Attached to Line No." := PrepmtLineNo;
        "VAT Base Amount" := PrepmtVATBaseToDeduct;
        INSERT;
      END;
      EXIT(PrepmtVATBaseToDeduct);
    END;

    LOCAL PROCEDURE DividePrepmtAmountLCY@83(VAR PrepmtPurchLine@1000 : Record 39;PurchHeader@1006 : Record 38);
    VAR
      CurrExchRate@1001 : Record 330;
      ActualCurrencyFactor@1002 : Decimal;
    BEGIN
      WITH PrepmtPurchLine DO BEGIN
        RESET;
        SETFILTER(Type,'<>%1',Type::" ");
        IF FINDSET THEN
          REPEAT
            IF PurchHeader."Currency Code" <> '' THEN
              ActualCurrencyFactor :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    PurchHeader."Posting Date",
                    PurchHeader."Currency Code",
                    "Prepmt Amt to Deduct",
                    PurchHeader."Currency Factor")) /
                "Prepmt Amt to Deduct"
            ELSE
              ActualCurrencyFactor := 1;

            UpdatePrepmtAmountInvBuf("Line No.",ActualCurrencyFactor);
          UNTIL NEXT = 0;
        RESET;
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtAmountInvBuf@78(PrepmtSalesLineNo@1000 : Integer;CurrencyFactor@1004 : Decimal);
    VAR
      PrepmtAmtRemainder@1002 : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYPurchLine DO BEGIN
        RESET;
        SETRANGE("Attached to Line No.",PrepmtSalesLineNo);
        IF FINDSET(TRUE) THEN
          REPEAT
            "Prepmt. Amount Inv. (LCY)" :=
              CalcRoundedAmount(CurrencyFactor * "VAT Base Amount",PrepmtAmtRemainder);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AdjustPrepmtAmountLCY@84(VAR PrepmtPurchLine@1000 : Record 39);
    VAR
      PurchLine@1005 : Record 39;
      PurchInvoiceLine@1013 : Record 39;
      DeductionFactor@1001 : Decimal;
      PrepmtVATPart@1006 : Decimal;
      PrepmtVATAmtRemainder@1011 : Decimal;
      TotalRoundingAmount@1002 : ARRAY [2] OF Decimal;
      TotalPrepmtAmount@1003 : ARRAY [2] OF Decimal;
      FinalInvoice@1004 : Boolean;
      PricesInclVATRoundingAmount@1007 : ARRAY [2] OF Decimal;
    BEGIN
      IF PrepmtPurchLine."Prepayment Line" THEN BEGIN
        PrepmtVATPart :=
          (PrepmtPurchLine."Amount Including VAT" - PrepmtPurchLine.Amount) / PrepmtPurchLine."Direct Unit Cost";

        WITH TempPrepmtDeductLCYPurchLine DO BEGIN
          RESET;
          SETRANGE("Attached to Line No.",PrepmtPurchLine."Line No.");
          IF FINDSET(TRUE) THEN BEGIN
            FinalInvoice := IsFinalInvoice;
            REPEAT
              PurchLine := TempPrepmtDeductLCYPurchLine;
              PurchLine.FIND;
              IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                PurchInvoiceLine := PurchLine;
                GetPurchOrderLine(PurchLine,PurchInvoiceLine);
                PurchLine."Qty. to Invoice" := PurchInvoiceLine."Qty. to Invoice";
              END;
              IF PurchLine."Qty. to Invoice" <> "Qty. to Invoice" THEN
                PurchLine."Prepmt Amt to Deduct" := CalcPrepmtAmtToDeduct(PurchLine);
              DeductionFactor :=
                PurchLine."Prepmt Amt to Deduct" /
                (PurchLine."Prepmt. Amt. Inv." - PurchLine."Prepmt Amt Deducted");

              "Prepmt. VAT Amount Inv. (LCY)" :=
                -CalcRoundedAmount(PurchLine."Prepmt Amt to Deduct" * PrepmtVATPart,PrepmtVATAmtRemainder);
              IF ("Prepayment %" <> 100) OR IsFinalInvoice OR ("Currency Code" <> '') THEN
                CalcPrepmtRoundingAmounts(TempPrepmtDeductLCYPurchLine,PurchLine,DeductionFactor,TotalRoundingAmount);
              MODIFY;

              IF PurchHeader."Prices Including VAT" THEN
                IF (("Prepayment %" <> 100) OR IsFinalInvoice) AND (DeductionFactor = 1) THEN BEGIN
                  PricesInclVATRoundingAmount[1] := TotalRoundingAmount[1];
                  PricesInclVATRoundingAmount[2] := TotalRoundingAmount[2];
                END;

              IF "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" THEN
                TotalPrepmtAmount[1] += "Prepmt. Amount Inv. (LCY)";
              TotalPrepmtAmount[2] += "Prepmt. VAT Amount Inv. (LCY)";
              FinalInvoice := FinalInvoice AND IsFinalInvoice;
            UNTIL NEXT = 0;
          END;
        END;

        UpdatePrepmtPurchLineWithRounding(
          PrepmtPurchLine,TotalRoundingAmount,TotalPrepmtAmount,
          FinalInvoice,PricesInclVATRoundingAmount);
      END;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtToDeduct@53(PurchLine@1000 : Record 39) : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        "Qty. to Invoice" := GetQtyToInvoice(PurchLine);
        CalcPrepaymentToDeduct;
        EXIT("Prepmt Amt to Deduct");
      END;
    END;

    LOCAL PROCEDURE GetQtyToInvoice@94(PurchLine@1000 : Record 39) : Decimal;
    VAR
      AllowedQtyToInvoice@1001 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        AllowedQtyToInvoice := "Qty. Rcd. Not Invoiced";
        IF PurchHeader.Receive THEN
          AllowedQtyToInvoice := AllowedQtyToInvoice + "Qty. to Receive";
        IF "Qty. to Invoice" > AllowedQtyToInvoice THEN
          EXIT(AllowedQtyToInvoice);
        EXIT("Qty. to Invoice");
      END;
    END;

    LOCAL PROCEDURE GetLineDataFromOrder@95(VAR PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1001 : Record 121;
      PurchOrderLine@1002 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        PurchRcptLine.GET("Receipt No.","Receipt Line No.");
        PurchOrderLine.GET("Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

        Quantity := PurchOrderLine.Quantity;
        "Qty. Rcd. Not Invoiced" := PurchOrderLine."Qty. Rcd. Not Invoiced";
        "Quantity Invoiced" := PurchOrderLine."Quantity Invoiced";
        "Prepmt Amt Deducted" := PurchOrderLine."Prepmt Amt Deducted";
        "Prepmt. Amt. Inv." := PurchOrderLine."Prepmt. Amt. Inv.";
        "Line Discount Amount" := PurchOrderLine."Line Discount Amount";
      END;
    END;

    LOCAL PROCEDURE CalcPrepmtRoundingAmounts@58(VAR PrepmtPurchLineBuf@1000 : Record 39;PurchLine@1003 : Record 39;DeductionFactor@1001 : Decimal;VAR TotalRoundingAmount@1002 : ARRAY [2] OF Decimal);
    VAR
      RoundingAmount@1004 : ARRAY [2] OF Decimal;
    BEGIN
      WITH PrepmtPurchLineBuf DO BEGIN
        IF "VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT" THEN BEGIN
          RoundingAmount[1] :=
            "Prepmt. Amount Inv. (LCY)" - ROUND(DeductionFactor * PurchLine."Prepmt. Amount Inv. (LCY)");
          "Prepmt. Amount Inv. (LCY)" := "Prepmt. Amount Inv. (LCY)" - RoundingAmount[1];
          TotalRoundingAmount[1] += RoundingAmount[1];
        END;
        RoundingAmount[2] :=
          "Prepmt. VAT Amount Inv. (LCY)" - ROUND(DeductionFactor * PurchLine."Prepmt. VAT Amount Inv. (LCY)");
        "Prepmt. VAT Amount Inv. (LCY)" := "Prepmt. VAT Amount Inv. (LCY)" - RoundingAmount[2];
        TotalRoundingAmount[2] += RoundingAmount[2];
      END;
    END;

    LOCAL PROCEDURE UpdatePrepmtPurchLineWithRounding@89(VAR PrepmtPurchLine@1002 : Record 39;TotalRoundingAmount@1001 : ARRAY [2] OF Decimal;TotalPrepmtAmount@1000 : ARRAY [2] OF Decimal;FinalInvoice@1005 : Boolean;PricesInclVATRoundingAmount@1006 : ARRAY [2] OF Decimal);
    VAR
      AdjustAmount@1008 : Boolean;
      NewAmountIncludingVAT@1003 : Decimal;
      Prepmt100PctVATRoundingAmt@1004 : Decimal;
      AmountRoundingPrecision@1007 : Decimal;
    BEGIN
      WITH PrepmtPurchLine DO BEGIN
        NewAmountIncludingVAT := TotalPrepmtAmount[1] + TotalPrepmtAmount[2] + TotalRoundingAmount[1] + TotalRoundingAmount[2];
        IF "Prepayment %" = 100 THEN
          TotalRoundingAmount[1] -= "Amount Including VAT" + NewAmountIncludingVAT;
        AmountRoundingPrecision := GetAmountRoundingPrecisionInLCY("Currency Code");

        IF (ABS(TotalRoundingAmount[1]) <= AmountRoundingPrecision) AND
           (ABS(TotalRoundingAmount[2]) <= AmountRoundingPrecision)
        THEN BEGIN
          IF "Prepayment %" = 100 THEN
            Prepmt100PctVATRoundingAmt := TotalRoundingAmount[1];
          TotalRoundingAmount[1] := 0;
        END;
        "Prepmt. Amount Inv. (LCY)" := -TotalRoundingAmount[1];
        Amount := -(TotalPrepmtAmount[1] + TotalRoundingAmount[1]);

        IF (PricesInclVATRoundingAmount[1] <> 0) AND (TotalRoundingAmount[1] = 0) THEN BEGIN
          IF ("Prepayment %" = 100) AND FinalInvoice AND
             (Amount - TotalPrepmtAmount[2] = "Amount Including VAT")
          THEN
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[1] := 0;
        END;

        IF ((TotalRoundingAmount[2] <> 0) OR FinalInvoice) AND (TotalRoundingAmount[1] = 0) THEN BEGIN
          IF ("Prepayment %" = 100) AND ("Prepmt. Amount Inv. (LCY)" = 0) THEN
            Prepmt100PctVATRoundingAmt += TotalRoundingAmount[2];
          TotalRoundingAmount[2] := 0;
        END;

        IF (PricesInclVATRoundingAmount[2] <> 0) AND (TotalRoundingAmount[2] = 0) THEN BEGIN
          IF ABS(Prepmt100PctVATRoundingAmt) <= AmountRoundingPrecision THEN
            Prepmt100PctVATRoundingAmt := 0;
          PricesInclVATRoundingAmount[2] := 0;
        END;

        "Prepmt. VAT Amount Inv. (LCY)" := -(TotalRoundingAmount[2] + Prepmt100PctVATRoundingAmt);
        NewAmountIncludingVAT := Amount - (TotalPrepmtAmount[2] + TotalRoundingAmount[2]);
        IF (PricesInclVATRoundingAmount[1] = 0) AND (PricesInclVATRoundingAmount[2] = 0) OR
           ("Currency Code" <> '') AND FinalInvoice
        THEN
          Increment(
            TotalPurchLineLCY."Amount Including VAT",
            -("Amount Including VAT" - NewAmountIncludingVAT + Prepmt100PctVATRoundingAmt));
        IF "Currency Code" = '' THEN
          TotalPurchLine."Amount Including VAT" := TotalPurchLineLCY."Amount Including VAT";
        "Amount Including VAT" := NewAmountIncludingVAT;

        IF FinalInvoice THEN
          AdjustAmount :=
            (TotalPurchLine.Amount = 0) AND (TotalPurchLine."Amount Including VAT" <> 0) AND
            (ABS(TotalPurchLine."Amount Including VAT") <= Currency."Amount Rounding Precision")
        ELSE
          AdjustAmount := (TotalPurchLineLCY.Amount < 0) AND (TotalPurchLineLCY."Amount Including VAT" < 0);
        IF AdjustAmount THEN BEGIN
          Amount -= TotalPurchLineLCY.Amount;
          "Amount Including VAT" -= TotalPurchLineLCY."Amount Including VAT";
          TotalPurchLine.Amount := 0;
          TotalPurchLineLCY.Amount := 0;
          TotalPurchLine."Amount Including VAT" := 0;
          TotalPurchLineLCY."Amount Including VAT" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcRoundedAmount@91(Amount@1000 : Decimal;VAR Remainder@1001 : Decimal) : Decimal;
    VAR
      AmountRnded@1002 : Decimal;
    BEGIN
      Amount := Amount + Remainder;
      AmountRnded := ROUND(Amount,GLSetup."Amount Rounding Precision");
      Remainder := Amount - AmountRnded;
      EXIT(AmountRnded);
    END;

    LOCAL PROCEDURE GetPurchOrderLine@85(VAR PurchOrderLine@1000 : Record 39;PurchLine@1001 : Record 39);
    VAR
      PurchRcptLine@1002 : Record 121;
    BEGIN
      PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
      PurchOrderLine.GET(
        PurchOrderLine."Document Type"::Order,
        PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
      PurchOrderLine."Prepmt Amt to Deduct" := PurchLine."Prepmt Amt to Deduct";
    END;

    LOCAL PROCEDURE DecrementPrepmtAmtInvLCY@86(PurchLine@1000 : Record 39;VAR PrepmtAmountInvLCY@1001 : Decimal;VAR PrepmtVATAmountInvLCY@1002 : Decimal);
    BEGIN
      TempPrepmtDeductLCYPurchLine.RESET;
      TempPrepmtDeductLCYPurchLine := PurchLine;
      IF TempPrepmtDeductLCYPurchLine.FIND THEN BEGIN
        PrepmtAmountInvLCY := PrepmtAmountInvLCY - TempPrepmtDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)";
        PrepmtVATAmountInvLCY := PrepmtVATAmountInvLCY - TempPrepmtDeductLCYPurchLine."Prepmt. VAT Amount Inv. (LCY)";
      END;
    END;

    LOCAL PROCEDURE AdjustFinalInvWith100PctPrepmt@97(VAR TempPurchLine@1000 : TEMPORARY Record 39);
    VAR
      DiffToLineDiscAmt@1001 : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYPurchLine DO BEGIN
        RESET;
        SETRANGE("Prepayment %",100);
        IF FINDSET(TRUE) THEN
          REPEAT
            IF IsFinalInvoice THEN BEGIN
              DiffToLineDiscAmt := "Prepmt Amt to Deduct" - "Line Amount";
              IF "Document Type" = "Document Type"::Order THEN
                DiffToLineDiscAmt := DiffToLineDiscAmt * Quantity / "Qty. to Invoice";
              IF DiffToLineDiscAmt <> 0 THEN BEGIN
                TempPurchLine.GET("Document Type","Document No.","Line No.");
                TempPurchLine."Line Discount Amount" -= DiffToLineDiscAmt;
                TempPurchLine.MODIFY;

                "Line Discount Amount" := TempPurchLine."Line Discount Amount";
                MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
        RESET;
      END;
    END;

    LOCAL PROCEDURE GetPrepmtDiffToLineAmount@98(PurchLine@1000 : Record 39) : Decimal;
    BEGIN
      WITH TempPrepmtDeductLCYPurchLine DO
        IF PurchLine."Prepayment %" = 100 THEN
          IF GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
            EXIT("Prepmt Amt to Deduct" - "Line Amount");
      EXIT(0);
    END;

    LOCAL PROCEDURE MergePurchLines@50(PurchHeader@1000000004 : Record 38;VAR PurchLine@1000 : Record 39;VAR PurchLine2@1000000002 : Record 39;VAR MergedPurchLine@1000000003 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedPurchLine := PurchLine;
            MergedPurchLine.INSERT;
          UNTIL NEXT = 0;
      END;
      WITH PurchLine2 DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedPurchLine := PurchLine2;
            MergedPurchLine.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(PurchLine@1000 : Record 39;VAR ICGenJnlLineNo@1006 : Integer);
    VAR
      ICGLAccount@1001 : Record 410;
      Cust@1002 : Record 18;
      Currency@1003 : Record 4;
      ICPartner@1004 : Record 413;
      CurrExchRate@1005 : Record 330;
    BEGIN
      PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
      PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
      PurchLine.TESTFIELD("IC Partner Ref. Type",PurchLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(PurchLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;
      TempICGenJnlLine.INIT;
      TempICGenJnlLine."Line No." := ICGenJnlLineNo;
      TempICGenJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      TempICGenJnlLine."Document Date" := PurchHeader."Document Date";
      TempICGenJnlLine.Description := PurchHeader."Posting Description";
      TempICGenJnlLine."Reason Code" := PurchHeader."Reason Code";
      TempICGenJnlLine."Document Type" := GenJnlLineDocType;
      TempICGenJnlLine."Document No." := GenJnlLineDocNo;
      TempICGenJnlLine."External Document No." := GenJnlLineExtDocNo;
      TempICGenJnlLine.VALIDATE("Account Type",TempICGenJnlLine."Account Type"::"IC Partner");
      TempICGenJnlLine.VALIDATE("Account No.",PurchLine."IC Partner Code");
      TempICGenJnlLine."Source Currency Code" := PurchHeader."Currency Code";
      TempICGenJnlLine."Source Currency Amount" := TempICGenJnlLine.Amount;
      TempICGenJnlLine.Correction := PurchHeader.Correction;
      TempICGenJnlLine."Source Code" := SrcCode;
      TempICGenJnlLine."Country/Region Code" := PurchHeader."VAT Country/Region Code";
      TempICGenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
      TempICGenJnlLine."Source No." := PurchHeader."Pay-to Vendor No.";
      TempICGenJnlLine."Source Line No." := PurchLine."Line No.";
      TempICGenJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
      TempICGenJnlLine.VALIDATE("Bal. Account Type",TempICGenJnlLine."Bal. Account Type"::"G/L Account");
      TempICGenJnlLine.VALIDATE("Bal. Account No.",PurchLine."No.");
      TempICGenJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      TempICGenJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      TempICGenJnlLine."Dimension Set ID" := PurchLine."Dimension Set ID";
      Cust.SETRANGE("IC Partner Code",PurchLine."IC Partner Code");
      IF Cust.FINDFIRST THEN BEGIN
        TempICGenJnlLine.VALIDATE("Bal. Gen. Bus. Posting Group",Cust."Gen. Bus. Posting Group");
        TempICGenJnlLine.VALIDATE("Bal. VAT Bus. Posting Group",Cust."VAT Bus. Posting Group");
      END;
      TempICGenJnlLine.VALIDATE("Bal. VAT Prod. Posting Group",PurchLine."VAT Prod. Posting Group");
      TempICGenJnlLine."IC Partner Code" := PurchLine."IC Partner Code";
      TempICGenJnlLine."IC Partner G/L Acc. No." := PurchLine."IC Partner Reference";
      TempICGenJnlLine."IC Direction" := TempICGenJnlLine."IC Direction"::Outgoing;
      ICPartner.GET(PurchLine."IC Partner Code");
      IF ICPartner."Cost Distribution in LCY" AND (PurchLine."Currency Code" <> '') THEN BEGIN
        TempICGenJnlLine."Currency Code" := '';
        TempICGenJnlLine."Currency Factor" := 0;
        Currency.GET(PurchLine."Currency Code");
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount :=
            -ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                PurchHeader."Posting Date",PurchLine."Currency Code",
                PurchLine.Amount,PurchHeader."Currency Factor"))
        ELSE
          TempICGenJnlLine.Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                PurchHeader."Posting Date",PurchLine."Currency Code",
                PurchLine.Amount,PurchHeader."Currency Factor"));
      END ELSE BEGIN
        Currency.InitRoundingPrecision;
        TempICGenJnlLine."Currency Code" := PurchHeader."Currency Code";
        TempICGenJnlLine."Currency Factor" := PurchHeader."Currency Factor";
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount := -PurchLine.Amount
        ELSE
          TempICGenJnlLine.Amount := PurchLine.Amount;
      END;
      IF TempICGenJnlLine."Bal. VAT %" <> 0 THEN
        TempICGenJnlLine.Amount := ROUND(TempICGenJnlLine.Amount * (1 + TempICGenJnlLine."Bal. VAT %" / 100),
            Currency."Amount Rounding Precision");
      TempICGenJnlLine.VALIDATE(Amount);
      TempICGenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICInboxOutboxMgt@1001 : Codeunit 427;
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      IF TempICGenJnlLine.FIND('-') THEN
        REPEAT
          ICTransactionNo := ICInboxOutboxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,FALSE);
          ICInboxOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine);
          IF TempICGenJnlLine.Amount <> 0 THEN
            GenJnlPostLine.RunWithCheck(TempICGenJnlLine);
        UNTIL TempICGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGetRcptPPmtAmtToDeduct@57(PurchHeader@1001 : Record 38);
    VAR
      PurchLine2@1006 : Record 39;
      TempPurchLine3@1005 : TEMPORARY Record 39;
      TempTotalPurchLine@1004 : TEMPORARY Record 39;
      TempPurchRcptLine@1003 : TEMPORARY Record 121;
      PurchRcptLine@1000 : Record 121;
      MaxAmtToDeduct@1002 : Decimal;
    BEGIN
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETFILTER(Quantity,'>0');
      PurchLine2.SETFILTER("Qty. to Invoice",'>0');
      PurchLine2.SETFILTER("Receipt No.",'<>%1','');
      PurchLine2.SETFILTER("Prepmt Amt to Deduct",'<>0');
      IF PurchLine2.ISEMPTY THEN
        EXIT;
      PurchLine2.SETRANGE("Prepmt Amt to Deduct");

      IF PurchLine2.FINDSET THEN
        REPEAT
          IF PurchRcptLine.GET(PurchLine2."Receipt No.",PurchLine2."Receipt Line No.") THEN BEGIN
            TempPurchLine3 := PurchLine2;
            TempPurchLine3.INSERT;
            TempPurchRcptLine := PurchRcptLine;
            IF TempPurchRcptLine.INSERT THEN;

            IF NOT TempTotalPurchLine.GET(PurchLine2."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.")
            THEN BEGIN
              TempTotalPurchLine.INIT;
              TempTotalPurchLine."Document Type" := PurchLine2."Document Type"::Order;
              TempTotalPurchLine."Document No." := PurchRcptLine."Order No.";
              TempTotalPurchLine."Line No." := PurchRcptLine."Order Line No.";
              TempTotalPurchLine.INSERT;
            END;
            TempTotalPurchLine."Qty. to Invoice" := TempTotalPurchLine."Qty. to Invoice" + PurchLine2."Qty. to Invoice";
            TempTotalPurchLine."Prepmt Amt to Deduct" := TempTotalPurchLine."Prepmt Amt to Deduct" + PurchLine2."Prepmt Amt to Deduct";
            AdjustInvLineWith100PctPrepmt(PurchLine2,TempTotalPurchLine);
            TempTotalPurchLine.MODIFY;
          END;
        UNTIL PurchLine2.NEXT = 0;

      IF TempPurchLine3.FINDSET THEN
        REPEAT
          IF TempPurchRcptLine.GET(TempPurchLine3."Receipt No.",TempPurchLine3."Receipt Line No.") THEN
            IF PurchLine2.GET(TempPurchLine3."Document Type"::Order,TempPurchRcptLine."Order No.",TempPurchRcptLine."Order Line No.") THEN
              IF TempTotalPurchLine.GET(
                   TempPurchLine3."Document Type"::Order,TempPurchRcptLine."Order No.",TempPurchRcptLine."Order Line No.")
              THEN BEGIN
                MaxAmtToDeduct := PurchLine2."Prepmt. Amt. Inv." - PurchLine2."Prepmt Amt Deducted";

                IF TempTotalPurchLine."Prepmt Amt to Deduct" > MaxAmtToDeduct THEN
                  ERROR(STRSUBSTNO(Text050,PurchLine2.FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));

                IF (TempTotalPurchLine."Qty. to Invoice" = PurchLine2.Quantity - PurchLine2."Quantity Invoiced") AND
                   (TempTotalPurchLine."Prepmt Amt to Deduct" <> MaxAmtToDeduct)
                THEN
                  ERROR(STRSUBSTNO(Text051,PurchLine2.FIELDCAPTION("Prepmt Amt to Deduct"),MaxAmtToDeduct));
              END;
        UNTIL TempPurchLine3.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustInvLineWith100PctPrepmt@99(VAR PurchInvoiceLine@1000 : Record 39;VAR TempTotalPurchLine@1001 : TEMPORARY Record 39);
    VAR
      PurchOrderLine@1003 : Record 39;
      DiffAmtToDeduct@1002 : Decimal;
    BEGIN
      IF PurchInvoiceLine."Prepayment %" = 100 THEN BEGIN
        PurchOrderLine := TempTotalPurchLine;
        PurchOrderLine.FIND;
        IF TempTotalPurchLine."Qty. to Invoice" = PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced" THEN BEGIN
          DiffAmtToDeduct :=
            PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted" - TempTotalPurchLine."Prepmt Amt to Deduct";
          IF DiffAmtToDeduct <> 0 THEN BEGIN
            PurchInvoiceLine."Prepmt Amt to Deduct" := PurchInvoiceLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
            PurchInvoiceLine."Line Amount" := PurchInvoiceLine."Prepmt Amt to Deduct";
            PurchInvoiceLine."Line Discount Amount" := PurchInvoiceLine."Line Discount Amount" - DiffAmtToDeduct;
            PurchInvoiceLine.MODIFY;
            TempTotalPurchLine."Prepmt Amt to Deduct" := TempTotalPurchLine."Prepmt Amt to Deduct" + DiffAmtToDeduct;
          END;
        END;
      END;
    END;

    PROCEDURE ArchiveUnpostedOrder@56(PurchHeader@1001 : Record 38);
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      PurchSetup.GET;
      IF NOT PurchSetup."Archive Quotes and Orders" THEN
        EXIT;
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"]) THEN
        EXIT;
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>0');
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
        PurchLine.SETFILTER("Qty. to Receive",'<>0')
      ELSE
        PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
      IF NOT PurchLine.ISEMPTY AND NOT PreviewMode THEN BEGIN
        RoundDeferralsForArchive(PurchHeader,PurchLine);
        ArchiveManagement.ArchPurchDocumentNoConfirm(PurchHeader);
      END;
    END;

    LOCAL PROCEDURE PostItemJrnlLineJobConsumption@59(VAR PurchLine@1000 : Record 39;VAR NextReservationEntryNo@1001 : Integer;QtyToBeInvoiced@1002 : Decimal;VAR QtyToBeInvoicedBase@1003 : Decimal;QtyToBeReceived@1004 : Decimal;VAR QtyToBeReceivedBase@1005 : Decimal;VAR CheckApplToItemEntry@1006 : Boolean);
    VAR
      ItemLedgEntry@1102 : Record 32;
    BEGIN
      WITH PurchLine DO
        IF "Job No." <> '' THEN BEGIN
          ItemJnlLine2."Entry Type" := ItemJnlLine2."Entry Type"::"Negative Adjmt.";
          Job.GET("Job No.");
          ItemJnlLine2."Source No." := Job."Bill-to Customer No.";
          IF PurchHeader.Invoice THEN BEGIN
            ItemLedgEntry.RESET;
            ItemLedgEntry.SETRANGE("Document No.",ReturnShptLine."Document No.");
            ItemLedgEntry.SETRANGE("Item No.",ReturnShptLine."No.");
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::"Negative Adjmt.");
            ItemLedgEntry.SETRANGE("Completely Invoiced",FALSE);
            IF ItemLedgEntry.FINDFIRST THEN
              ItemJnlLine2."Item Shpt. Entry No." := ItemLedgEntry."Entry No.";
          END;
          ItemJnlLine2."Source Type" := ItemJnlLine2."Source Type"::Customer;
          ItemJnlLine2."Discount Amount" := 0;
          IF "Quantity Received" <> 0 THEN
            GetNextItemLedgEntryNo(ItemJnlLine2);

          IF QtyToBeReceived <> 0 THEN BEGIN
            // item tracking for consumption
            ReservationEntry2.RESET;
            IF ReservationEntry3.FIND('-') THEN BEGIN
              IF ReservationEntry2.FIND('+') THEN
                NextReservationEntryNo := ReservationEntry2."Entry No." + 1
              ELSE
                NextReservationEntryNo := 1;
              REPEAT
                ReservationEntry2 := ReservationEntry3;
                ReservationEntry2."Entry No." := NextReservationEntryNo;
                IF ReservationEntry2.Positive THEN
                  ReservationEntry2.Positive := FALSE
                ELSE
                  ReservationEntry2.Positive := TRUE;
                ReservationEntry2."Quantity (Base)" := ReservationEntry2."Quantity (Base)" * -1;
                ReservationEntry2."Shipment Date" := ReservationEntry2."Expected Receipt Date";
                ReservationEntry2."Expected Receipt Date" := 0D;
                ReservationEntry2.Quantity := ReservationEntry2.Quantity * -1;
                ReservationEntry2."Qty. to Handle (Base)" := ReservationEntry2."Qty. to Handle (Base)" * -1;
                ReservationEntry2."Qty. to Invoice (Base)" := ReservationEntry2."Qty. to Invoice (Base)" * -1;
                ReservationEntry2.INSERT;
                NextReservationEntryNo := NextReservationEntryNo + 1;
              UNTIL ReservationEntry3.NEXT = 0;
              IF QtyToBeReceivedBase <> 0 THEN
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  ReservePurchLine.TransferPurchLineToItemJnlLine(PurchLine,ItemJnlLine2,QtyToBeReceivedBase,CheckApplToItemEntry)
                ELSE
                  ReservePurchLine.TransferPurchLineToItemJnlLine(PurchLine,ItemJnlLine2,-QtyToBeReceivedBase,CheckApplToItemEntry);
            END;
          END;

          ItemJnlPostLine.RunWithCheck(ItemJnlLine2);

          IF QtyToBeInvoiced <> 0 THEN BEGIN
            "Qty. to Invoice" := QtyToBeInvoiced;
            JobPostLine.PostJobOnPurchaseLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SrcCode);
          END;
        END;
    END;

    LOCAL PROCEDURE GetNextItemLedgEntryNo@80(VAR ItemJnlLine@1000 : Record 83);
    VAR
      ItemApplicationEntry@1001 : Record 339;
    BEGIN
      WITH ItemApplicationEntry DO BEGIN
        SETRANGE("Inbound Item Entry No.",ItemJnlLine."Item Shpt. Entry No.");
        IF FINDLAST THEN
          ItemJnlLine."Item Shpt. Entry No." := "Outbound Item Entry No.";
      END
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(PurchLine2@1000 : Record 39) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      IF PurchHeader.Receive OR PurchHeader.Ship THEN
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((PurchLine2."Qty. to Receive" + PurchLine2."Quantity Received") <> 0) OR
          ((PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") <> 0) OR
          ((PurchLine2."Return Qty. to Ship" + PurchLine2."Return Qty. Shipped") <> 0)
      ELSE
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (PurchLine2."Quantity Received" <> 0) OR
          (PurchLine2."Return Qty. Shipped" <> 0);

      EXIT(HasItemLedgerEntry);
    END;

    LOCAL PROCEDURE LockTables@60();
    BEGIN
      PurchLine.LOCKTABLE;
      SalesOrderLine.LOCKTABLE;
      StrOrdLineDetails.LOCKTABLE;
      StrOrderDetails.LOCKTABLE;
      GetGLSetup;
      IF NOT GLSetup.OptimGLEntLockForMultiuserEnv THEN BEGIN
        GLEntry.LOCKTABLE;
        IF GLEntry.FINDLAST THEN;
      END;
    END;

    LOCAL PROCEDURE MAX@31(number1@1000 : Integer;number2@1001 : Integer) : Integer;
    BEGIN
      IF number1 > number2 THEN
        EXIT(number1);
      EXIT(number2);
    END;

    LOCAL PROCEDURE CreateJobPurchLine@22(VAR JobPurchLine2@1000 : Record 39;PurchLine2@1001 : Record 39;PricesIncludingVAT@1002 : Boolean);
    BEGIN
      JobPurchLine2 := PurchLine2;
      IF PricesIncludingVAT THEN
        IF JobPurchLine2."VAT Calculation Type" = JobPurchLine2."VAT Calculation Type"::"Full VAT" THEN
          JobPurchLine2."Direct Unit Cost" := 0
        ELSE
          JobPurchLine2."Direct Unit Cost" := JobPurchLine2."Direct Unit Cost" / (1 + JobPurchLine2."VAT %" / 100);
    END;

    LOCAL PROCEDURE RevertWarehouseEntry@62(VAR TempWhseJnlLine@1000 : TEMPORARY Record 7311;JobNo@1001 : Code[20];PostJobConsumptionBeforePurch@1002 : Boolean) : Boolean;
    BEGIN
      IF PostJobConsumptionBeforePurch OR (JobNo = '') OR PositiveWhseEntrycreated THEN
        EXIT(FALSE);
      WITH TempWhseJnlLine DO BEGIN
        "Entry Type" := "Entry Type"::"Negative Adjmt.";
        Quantity := -Quantity;
        "Qty. (Base)" := -"Qty. (Base)";
        "From Bin Code" := "To Bin Code";
        "To Bin Code" := '';
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreatePositiveEntry@93(WhseJnlLine@1000 : Record 7311;JobNo@1001 : Code[20];PostJobConsumptionBeforePurch@1002 : Boolean);
    BEGIN
      IF PostJobConsumptionBeforePurch OR (JobNo <> '') THEN BEGIN
        WITH WhseJnlLine DO BEGIN
          Quantity := -Quantity;
          "Qty. (Base)" := -"Qty. (Base)";
          "Qty. (Absolute)" := -"Qty. (Absolute)";
          "To Bin Code" := "From Bin Code";
          "From Bin Code" := '';
        END;
        WhseJnlPostLine.RUN(WhseJnlLine);
        PositiveWhseEntrycreated := TRUE;
      END;
    END;

    PROCEDURE InsertStrPostBuf@1280011(StrOrdLineDetails@1280002 : Record 13795;Quantity@1280001 : Decimal;ActQty@1280000 : Decimal;FixedAsset@1500000 : Boolean);
    BEGIN
      WITH StrOrdLineDetails DO BEGIN
        IF FixedAsset THEN BEGIN
          IF "Loading on Inventory" AND "Payable to Third Party" THEN BEGIN
            StrPostBuf[1].Type := Type;
            StrPostBuf[1]."Document Type" := "Document Type";
            StrPostBuf[1]."Document No." := "Document No.";
            StrPostBuf[1]."Item No." := "Item No.";
            StrPostBuf[1]."Structure Code" := "Structure Code";
            StrPostBuf[1]."Tax/Charge Type" := "Tax/Charge Type";
            StrPostBuf[1]."Tax/Charge Group" := "Tax/Charge Group";
            StrPostBuf[1]."Tax/Charge Code" := "Tax/Charge Code";
            StrPostBuf[1]."Loading on Inventory" := "Loading on Inventory";
            StrPostBuf[1]."% Loading on Inventory" := "% Loading on Inventory";
            StrPostBuf[1]."Payable to Third Party" := "Payable to Third Party";
            StrPostBuf[1]."Third Party Code" := "Third Party Code";
            StrPostBuf[1]."Account No." := "Account No.";
            StrPostBuf[1]."Header/Line" := "Header/Line";
            StrPostBuf[1]."Base Amount" := ROUND("Base Amount" * Quantity / ActQty,
                Currency."Amount Rounding Precision");
            StrPostBuf[1].Amount := ROUND("Amount (LCY)" * Quantity / ActQty,Currency."Amount Rounding Precision");
            StrPostBuf[1]."Source Currency Amount" :=
              ROUND(Amount * Quantity / ActQty,Currency."Amount Rounding Precision");
            StrPostBuf[1].LCY := LCY;
            StrPostBuf[1]."FA Loading Amount" := StrPostBuf[1].Amount;
            StrPostBuf[1]."Src. Curr FA Loading Amount" := StrPostBuf[1]."Source Currency Amount";
            StrPostBuf[1]."Fixed Asset" := TRUE;
            UpdStrPostBuffer;
          END ELSE BEGIN
            IF NOT "Loading on Inventory" AND "Payable to Third Party" THEN BEGIN
              StrPostBuf[1].Type := Type;
              StrPostBuf[1]."Document Type" := "Document Type";
              StrPostBuf[1]."Document No." := "Document No.";
              StrPostBuf[1]."Item No." := "Item No.";
              StrPostBuf[1]."Structure Code" := "Structure Code";
              StrPostBuf[1]."Tax/Charge Type" := "Tax/Charge Type";
              StrPostBuf[1]."Tax/Charge Group" := "Tax/Charge Group";
              StrPostBuf[1]."Tax/Charge Code" := "Tax/Charge Code";
              StrPostBuf[1]."Loading on Inventory" := "Loading on Inventory";
              StrPostBuf[1]."% Loading on Inventory" := "% Loading on Inventory";
              StrPostBuf[1]."Payable to Third Party" := "Payable to Third Party";
              StrPostBuf[1]."Third Party Code" := "Third Party Code";
              StrPostBuf[1]."Account No." := "Account No.";
              StrPostBuf[1]."Header/Line" := "Header/Line";
              StrPostBuf[1]."Base Amount" := ROUND("Base Amount" * Quantity / ActQty,
                  Currency."Amount Rounding Precision");
              StrPostBuf[1].Amount := ROUND("Amount (LCY)" * Quantity / ActQty,Currency."Amount Rounding Precision");
              StrPostBuf[1]."Source Currency Amount" :=
                ROUND(Amount * Quantity / ActQty,Currency."Amount Rounding Precision");
              StrPostBuf[1].LCY := LCY;
              StrPostBuf[1]."Fixed Asset" := TRUE;
              UpdStrPostBuffer;
            END ELSE BEGIN
              IF NOT "Loading on Inventory" AND NOT "Payable to Third Party" THEN BEGIN
                StrPostBuf[1].Type := Type;
                StrPostBuf[1]."Document Type" := "Document Type";
                StrPostBuf[1]."Document No." := "Document No.";
                StrPostBuf[1]."Item No." := "Item No.";
                StrPostBuf[1]."Structure Code" := "Structure Code";
                StrPostBuf[1]."Tax/Charge Type" := "Tax/Charge Type";
                StrPostBuf[1]."Tax/Charge Group" := "Tax/Charge Group";
                StrPostBuf[1]."Tax/Charge Code" := "Tax/Charge Code";
                StrPostBuf[1]."Loading on Inventory" := "Loading on Inventory";
                StrPostBuf[1]."% Loading on Inventory" := "% Loading on Inventory";
                StrPostBuf[1]."Payable to Third Party" := "Payable to Third Party";
                StrPostBuf[1]."Third Party Code" := "Third Party Code";
                StrPostBuf[1]."Account No." := "Account No.";
                StrPostBuf[1]."Header/Line" := "Header/Line";
                StrPostBuf[1]."Base Amount" := ROUND("Base Amount" * Quantity / ActQty,
                    Currency."Amount Rounding Precision");
                StrPostBuf[1].Amount := ROUND("Amount (LCY)" * Quantity / ActQty,Currency."Amount Rounding Precision"
                    );
                StrPostBuf[1]."Source Currency Amount" :=
                  ROUND(Amount * Quantity / ActQty,Currency."Amount Rounding Precision");
                StrPostBuf[1].LCY := LCY;
                StrPostBuf[1]."Fixed Asset" := TRUE;
                UpdStrPostBuffer;
              END;
            END;
          END;
        END ELSE BEGIN
          StrPostBuf[1].Type := Type;
          StrPostBuf[1]."Document Type" := "Document Type";
          StrPostBuf[1]."Document No." := "Document No.";
          StrPostBuf[1]."Item No." := "Item No.";
          StrPostBuf[1]."Structure Code" := "Structure Code";
          StrPostBuf[1]."Tax/Charge Type" := "Tax/Charge Type";
          StrPostBuf[1]."Tax/Charge Group" := "Tax/Charge Group";
          StrPostBuf[1]."Tax/Charge Code" := "Tax/Charge Code";
          StrPostBuf[1]."Loading on Inventory" := "Loading on Inventory";
          StrPostBuf[1]."% Loading on Inventory" := "% Loading on Inventory";
          StrPostBuf[1]."Payable to Third Party" := "Payable to Third Party";
          StrPostBuf[1]."Third Party Code" := "Third Party Code";
          StrPostBuf[1]."Account No." := "Account No.";
          StrPostBuf[1]."Header/Line" := "Header/Line";
          StrPostBuf[1]."Base Amount" := ROUND("Base Amount" * Quantity / ActQty);
          StrPostBuf[1].Amount := ROUND("Amount (LCY)" * Quantity / ActQty);
          StrPostBuf[1]."Source Currency Amount" :=
            ROUND(Amount * Quantity / ActQty,Currency."Amount Rounding Precision");
          StrPostBuf[1].LCY := LCY;
          StrPostBuf[1]."FA Loading Amount" := 0;
          StrPostBuf[1]."Src. Curr FA Loading Amount" := 0;
          UpdStrPostBuffer;
        END;
        IF NOT "Payable to Third Party" THEN BEGIN
          AmountAddedtoVendor := AmountAddedtoVendor +
            ROUND("Amount (LCY)" * Quantity / ActQty,Currency."Amount Rounding Precision");
          SrcCurrAmountAddedtoVendor := SrcCurrAmountAddedtoVendor +
            ROUND(Amount * Quantity / ActQty,Currency."Amount Rounding Precision");
        END;
      END;
    END;

    PROCEDURE UpdStrPostBuffer@1280014();
    BEGIN
      StrPostBuf[1]."Dimension Set ID" := PurchLine."Dimension Set ID";

      StrPostBuf[2] := StrPostBuf[1];
      IF StrPostBuf[2].FIND THEN BEGIN
        StrPostBuf[2].Amount := StrPostBuf[2].Amount + StrPostBuf[1].Amount;
        StrPostBuf[2]."Source Currency Amount" := StrPostBuf[2]."Source Currency Amount" +
          StrPostBuf[1]."Source Currency Amount";
        StrPostBuf[2]."Base Amount" := StrPostBuf[2]."Base Amount" + StrPostBuf[1]."Base Amount";
        StrPostBuf[2]."FA Loading Amount" := StrPostBuf[2]."FA Loading Amount" + StrPostBuf[1]."FA Loading Amount";
        StrPostBuf[2]."Src. Curr FA Loading Amount" := StrPostBuf[2]."Src. Curr FA Loading Amount" +
          StrPostBuf[1]."Src. Curr FA Loading Amount";
        StrPostBuf[2].MODIFY;
      END ELSE
        StrPostBuf[1].INSERT;
    END;

    PROCEDURE DivideExciseElements@1280015(PurchLineType@1280001 : Decimal;PurchLineQty@1280000 : Decimal;PurchRcptLine@1000 : Record 121);
    BEGIN
      IF PurchLineType = 0 THEN BEGIN
        WITH PurchRcptLine DO BEGIN
          CALCFIELDS("Currency Code");
          IF Quantity = 0 THEN BEGIN
            "BED Amount" := 0;
            "AED(GSI) Amount" := 0;
            "AED(TTA) Amount" := 0;
            "SED Amount" := 0;
            "SAED Amount" := 0;
            "CESS Amount" := 0;
            "Custom eCess Amount" := 0;
            "Custom SHECess Amount" := 0;
            "NCCD Amount" := 0;
            "eCess Amount" := 0;
            "SHE Cess Amount" := 0;
            "ADET Amount" := 0;
            "ADE Amount" := 0;
            "Excise Base Amount" := 0;
            "ADC VAT Amount" := 0;
            "Excise Amount" := 0;
            "Amount Including Excise" := 0;
          END ELSE BEGIN
            "BED Amount" := RoundExciseAmt("BED Amount",Quantity,PurchLineQty,"Currency Code");
            "AED(GSI) Amount" := RoundExciseAmt("AED(GSI) Amount",Quantity,PurchLineQty,"Currency Code");
            "AED(TTA) Amount" := RoundExciseAmt("AED(TTA) Amount",Quantity,PurchLineQty,"Currency Code");
            "SED Amount" := RoundExciseAmt("SED Amount",Quantity,PurchLineQty,"Currency Code");
            "SAED Amount" := RoundExciseAmt("SAED Amount",Quantity,PurchLineQty,"Currency Code");
            "CESS Amount" := RoundExciseAmt("CESS Amount",Quantity,PurchLineQty,"Currency Code");
            "Custom eCess Amount" := RoundExciseAmt("Custom eCess Amount",Quantity,PurchLineQty,"Currency Code");
            "Custom SHECess Amount" := RoundExciseAmt("Custom SHECess Amount",Quantity,PurchLineQty,"Currency Code");
            "NCCD Amount" := RoundExciseAmt("NCCD Amount",Quantity,PurchLineQty,"Currency Code");
            "eCess Amount" := RoundExciseAmt("eCess Amount",Quantity,PurchLineQty,"Currency Code");
            "SHE Cess Amount" := RoundExciseAmt("SHE Cess Amount",Quantity,PurchLineQty,"Currency Code");
            "ADET Amount" := RoundExciseAmt("ADET Amount",Quantity,PurchLineQty,"Currency Code");
            "ADE Amount" := RoundExciseAmt("ADE Amount",Quantity,PurchLineQty,"Currency Code");
            "ADC VAT Amount" := RoundExciseAmt("ADC VAT Amount",Quantity,PurchLineQty,"Currency Code");
          END;

          TempPurchLine."BED Amount" := "BED Amount";
          TempPurchLine."AED(GSI) Amount" := "AED(GSI) Amount";
          TempPurchLine."AED(TTA) Amount" := "AED(TTA) Amount";
          TempPurchLine."SED Amount" := "SED Amount";
          TempPurchLine."SAED Amount" := "SAED Amount";
          TempPurchLine."CESS Amount" := "CESS Amount";
          TempPurchLine."Custom eCess Amount" := "Custom eCess Amount";
          TempPurchLine."Custom SHECess Amount" := "Custom SHECess Amount";
          TempPurchLine."NCCD Amount" := "NCCD Amount";
          TempPurchLine."eCess Amount" := "eCess Amount";
          TempPurchLine."SHE Cess Amount" := "SHE Cess Amount";
          TempPurchLine."ADET Amount" := "ADET Amount";
          TempPurchLine."ADE Amount" := "ADE Amount";
          TempPurchLine."ADC VAT Amount" := "ADC VAT Amount";
          TempPurchLine."Excise Base Amount" := "Excise Base Amount";
          TempPurchLine."Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
            "CESS Amount" + "NCCD Amount" + "AED(TTA) Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" +
            "SHE Cess Amount" + "Custom eCess Amount" + "Custom SHECess Amount";
          TempPurchLine."Amount Including Excise" := TempPurchLine."Excise Base Amount" + TempPurchLine."Excise Amount";
        END;
      END ELSE
        WITH ReturnShptLine DO BEGIN
          CALCFIELDS("Currency Code");
          IF Quantity = 0 THEN BEGIN
            "BED Amount" := 0;
            "AED(GSI) Amount" := 0;
            "AED(TTA) Amount" := 0;
            "ADET Amount" := 0;
            "ADE Amount" := 0;
            "SED Amount" := 0;
            "SAED Amount" := 0;
            "CESS Amount" := 0;
            "Custom eCess Amount" := 0;
            "Custom SHECess Amount" := 0;
            "NCCD Amount" := 0;
            "eCess Amount" := 0;
            "ADC VAT Amount" := 0;
            "SHE Cess Amount" := 0;
            "Excise Base Amount" := 0;
          END ELSE BEGIN
            "BED Amount" := RoundExciseAmt("BED Amount",Quantity,PurchLineQty,"Currency Code");
            "AED(GSI) Amount" := RoundExciseAmt("AED(GSI) Amount",Quantity,PurchLineQty,"Currency Code");
            "AED(TTA) Amount" := RoundExciseAmt("AED(TTA) Amount",Quantity,PurchLineQty,"Currency Code");
            "SED Amount" := RoundExciseAmt("SED Amount",Quantity,PurchLineQty,"Currency Code");
            "SAED Amount" := RoundExciseAmt("SAED Amount",Quantity,PurchLineQty,"Currency Code");
            "CESS Amount" := RoundExciseAmt("CESS Amount",Quantity,PurchLineQty,"Currency Code");
            "Custom eCess Amount" := RoundExciseAmt("Custom eCess Amount",Quantity,PurchLineQty,"Currency Code");
            "Custom SHECess Amount" := RoundExciseAmt("Custom SHECess Amount",Quantity,PurchLineQty,"Currency Code");
            "NCCD Amount" := RoundExciseAmt("NCCD Amount",Quantity,PurchLineQty,"Currency Code");
            "eCess Amount" := RoundExciseAmt("eCess Amount",Quantity,PurchLineQty,"Currency Code");
            "SHE Cess Amount" := RoundExciseAmt("SHE Cess Amount",Quantity,PurchLineQty,"Currency Code");
            "ADET Amount" := RoundExciseAmt("ADET Amount",Quantity,PurchLineQty,"Currency Code");
            "ADE Amount" := RoundExciseAmt("ADE Amount",Quantity,PurchLineQty,"Currency Code");
            "ADC VAT Amount" := RoundExciseAmt("ADC VAT Amount",Quantity,PurchLineQty,"Currency Code");
          END;
          TempPurchLine."BED Amount" := "BED Amount";
          TempPurchLine."AED(GSI) Amount" := "AED(GSI) Amount";
          TempPurchLine."AED(TTA) Amount" := "AED(TTA) Amount";
          TempPurchLine."SED Amount" := "SED Amount";
          TempPurchLine."SAED Amount" := "SAED Amount";
          TempPurchLine."CESS Amount" := "CESS Amount";
          TempPurchLine."Custom eCess Amount" := "Custom eCess Amount";
          TempPurchLine."Custom SHECess Amount" := "Custom SHECess Amount";
          TempPurchLine."NCCD Amount" := "NCCD Amount";
          TempPurchLine."eCess Amount" := "eCess Amount";
          TempPurchLine."SHE Cess Amount" := "SHE Cess Amount";
          TempPurchLine."ADET Amount" := "ADET Amount";
          TempPurchLine."ADE Amount" := "ADE Amount";
          TempPurchLine."ADC VAT Amount" := "ADC VAT Amount";
          TempPurchLine."Excise Base Amount" := "Excise Base Amount";
          IF TempPurchLine."Currency Code" = '' THEN
            TempPurchLine."Excise Amount" := RoundExcisePrecision("BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
                "CESS Amount" + "NCCD Amount" + "AED(TTA) Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" +
                "SHE Cess Amount" + "Custom eCess Amount" + "Custom SHECess Amount")
          ELSE
            TempPurchLine."Excise Amount" := ("BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
                                              "CESS Amount" +
                                              "NCCD Amount" +
                                              "AED(TTA) Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" +
                                              "SHE Cess Amount" + "Custom eCess Amount" + "Custom SHECess Amount");
          TempPurchLine."Amount Including Excise" := TempPurchLine."Excise Base Amount" + TempPurchLine."Excise Amount";
        END;
    END;

    PROCEDURE RestoreExciseForInvoice@1280009(QtyRcv@1280001 : Decimal;QtyInv@1280000 : Decimal);
    BEGIN
      WITH TempPurchLine DO BEGIN
        "BED Amount" := "BED Amount" * (QtyInv / QtyRcv);
        "AED(GSI) Amount" := "AED(GSI) Amount" * (QtyInv / QtyRcv);
        "AED(TTA) Amount" := "AED(TTA) Amount" * (QtyInv / QtyRcv);
        "SED Amount" := "SED Amount" * (QtyInv / QtyRcv);
        "SAED Amount" := "SAED Amount" * (QtyInv / QtyRcv);
        "CESS Amount" := "CESS Amount" * (QtyInv / QtyRcv);
        "NCCD Amount" := "NCCD Amount" * (QtyInv / QtyRcv);
        "eCess Amount" := "eCess Amount" * (QtyInv / QtyRcv);
        "SHE Cess Amount" := "SHE Cess Amount" * (QtyInv / QtyRcv);
        "ADET Amount" := "ADET Amount" * (QtyInv / QtyRcv);
        "ADE Amount" := "ADE Amount" * (QtyInv / QtyRcv);
        "ADC VAT Amount" := "ADC VAT Amount" * (QtyInv / QtyRcv);
        "Custom eCess Amount" := "Custom eCess Amount" * (QtyInv / QtyRcv);
        "Custom SHECess Amount" := "Custom SHECess Amount" * (QtyInv / QtyRcv);
        "Excise Amount" := "Excise Amount" * (QtyInv / QtyRcv);
        "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
      END;
    END;

    LOCAL PROCEDURE FillExcisePostingBuffer@1280005(PurchLine@1280001 : Record 39;PurchLineACY@1280000 : Record 39);
    VAR
      CompanyInfo@1280002 : Record 79;
      SSI@1500000 : Boolean;
      Vendor@1500001 : Record 23;
    BEGIN
      IF NOT ((PurchLine.Type = PurchLine.Type::Item) OR (PurchLine.Type = PurchLine.Type::"Fixed Asset") OR
              (PurchLine.Type = PurchLine.Type::"Charge (Item)") OR (PurchLine.Type = PurchLine.Type::"G/L Account"))
      THEN
        EXIT;

      IF ((PurchLine.Type = PurchLine.Type::"Charge (Item)") OR (PurchLine.Type = PurchLine.Type::"G/L Account"))
         AND PurchHeader.Trading AND (PurchLine."Excise Amount" <> 0)
      THEN
        ERROR(Text16502);

      WITH PurchLine DO BEGIN
        Vendor.GET(PurchHeader."Buy-from Vendor No.");
        IF Vendor."SSI Validity Date" = 0D THEN BEGIN
          IF Vendor.SSI = TRUE THEN
            SSI := TRUE;
        END ELSE
          IF Vendor."SSI Validity Date" > PurchHeader."Posting Date" THEN
            SSI := Vendor.SSI
          ELSE
            SSI := FALSE;

        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETFILTER("From Date",'<=%1',PurchHeader."Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,SSI);
        IF ExcisePostingSetup.FINDLAST THEN;

        CLEAR(ExcisePostingBuffer[1]);
        ExcisePostingBuffer[1]."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
        ExcisePostingBuffer[1]."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
        IF Location.GET("Location Code") THEN
          ExcisePostingBuffer[1]."E.C.C. No." := Location."E.C.C. No."
        ELSE BEGIN
          CompanyInfo.GET;
          ExcisePostingBuffer[1]."E.C.C. No." := CompanyInfo."E.C.C. No.";
        END;
        ExcisePostingBuffer[1].Type := Type;
        ExcisePostingBuffer[1]."Item No." := "No.";
        ExcisePostingBuffer[1]."System-Created Entry" := TRUE;
        ExcisePostingBuffer[1]."Capital Item" := "Capital Item";
        ExcisePostingBuffer[1]."Amount Including Excise" :=
          "Amount Including Excise" - RoundExcisePrecision("CESS Amount" + "Custom eCess Amount" + "Custom SHECess Amount");
        ExcisePostingBuffer[1]."BED Calculation Type" := ExcisePostingSetup."BED Calculation Type";
        ExcisePostingBuffer[1]."Excise Amount" :=
          "Excise Amount" - RoundExcisePrecision("CESS Amount" + "Custom eCess Amount" + "Custom SHECess Amount");
        ExcisePostingBuffer[1]."Excise Amount (ACY)" :=
          PurchLineACY."Excise Amount" -
          RoundExcisePrecision(PurchLineACY."CESS Amount" + PurchLineACY."Custom eCess Amount" + PurchLineACY."Custom SHECess Amount");
        ExcisePostingBuffer[1]."Excise Base Amount" := "Excise Base Amount";
        ExcisePostingBuffer[1]."BED %" := ExcisePostingSetup."BED %";
        ExcisePostingBuffer[1]."BED Amount" := "BED Amount";
        ExcisePostingBuffer[1]."AED(GSI) Amount" := "AED(GSI) Amount";
        ExcisePostingBuffer[1]."AED(TTA) Amount" := "AED(TTA) Amount";
        ExcisePostingBuffer[1]."SED Amount" := "SED Amount";
        ExcisePostingBuffer[1]."SAED Amount" := "SAED Amount";
        ExcisePostingBuffer[1]."NCCD Amount" := "NCCD Amount";
        ExcisePostingBuffer[1]."eCess Amount" := "eCess Amount";
        ExcisePostingBuffer[1]."SHE Cess Amount" := "SHE Cess Amount";
        ExcisePostingBuffer[1]."ADET Amount" := "ADET Amount";
        ExcisePostingBuffer[1]."ADE Amount" := "ADE Amount";
        ExcisePostingBuffer[1]."ADC VAT Amount" := "ADC VAT Amount";
        ExcisePostingBuffer[1]."ADC VAT Amount (ACY)" := PurchLineACY."ADC VAT Amount";
        ExcisePostingBuffer[1].CVD := CVD;
        ExcisePostingBuffer[1].Quantity := "Qty. to Invoice (Base)";
        ExcisePostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ExcisePostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ExcisePostingBuffer[1]."Excise Refund" := "Excise Refund";
        IF NOT "SetOff Available" AND NOT "Excise Refund" THEN BEGIN
          ExcisePostingBuffer[1]."Excise Amount" :=
            ExcisePostingBuffer[1]."Excise Amount" - RoundExcisePrecision("eCess Amount" + "SHE Cess Amount");
          ExcisePostingBuffer[1]."Amount Including Excise" :=
            ExcisePostingBuffer[1]."Amount Including Excise" - RoundExcisePrecision("eCess Amount" + "SHE Cess Amount");
          ExcisePostingBuffer[1]."eCess Amount" := 0;
          ExcisePostingBuffer[1]."SHE Cess Amount" := 0;
        END;
        IF "Excise Refund" THEN
          ExcisePostingBuffer[1]."Excise Amount" := ExcisePostingBuffer[1]."Excise Amount" + RoundExcisePrecision("CESS Amount");

        IF Type = Type::"Fixed Asset" THEN BEGIN
          ExcisePostingBuffer[1]."FA Posting Date" := "FA Posting Date";
          ExcisePostingBuffer[1]."FA Posting Type" := "FA Posting Type";
          ExcisePostingBuffer[1]."Depreciation Book Code" := "Depreciation Book Code";
          ExcisePostingBuffer[1]."Salvage Value" := "Salvage Value";
          ExcisePostingBuffer[1]."Depr. until FA Posting Date" := "Depr. until FA Posting Date";
          ExcisePostingBuffer[1]."Depr. Acquisition Cost" := "Depr. Acquisition Cost";
          ExcisePostingBuffer[1]."Maintenance Code" := "Maintenance Code";
          ExcisePostingBuffer[1]."Insurance No." := "Insurance No.";
          ExcisePostingBuffer[1]."Budgeted FA No." := "Budgeted FA No.";
          ExcisePostingBuffer[1]."Duplicate in Depreciation Book" := "Duplicate in Depreciation Book";
          ExcisePostingBuffer[1]."Use Duplication List" := "Use Duplication List";
        END;
        UpdExcisePostingBuffer;
      END;

      CheckExciseInvoiceDiff(PurchLine);
    END;

    LOCAL PROCEDURE UpdExcisePostingBuffer@1280000();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      ExcisePostingBuffer[1]."Dimension Set ID" := PurchLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(ExcisePostingBuffer[1]."Dimension Set ID",
        ExcisePostingBuffer[1]."Global Dimension 1 Code",ExcisePostingBuffer[1]."Global Dimension 2 Code");

      ExcisePostingBuffer[2] := ExcisePostingBuffer[1];
      IF ExcisePostingBuffer[2].FIND THEN BEGIN
        ExcisePostingBuffer[2]."Amount Including Excise" := ExcisePostingBuffer[2]."Amount Including Excise" +
          ExcisePostingBuffer[1]."Amount Including Excise";
        ExcisePostingBuffer[2]."Excise Amount" := ExcisePostingBuffer[2]."Excise Amount" + ExcisePostingBuffer[1]."Excise Amount";
        ExcisePostingBuffer[2]."Excise Amount (ACY)" := ExcisePostingBuffer[2]."Excise Amount (ACY)" +
          ExcisePostingBuffer[1]."Excise Amount (ACY)";
        ExcisePostingBuffer[2]."CESS Amount (ACY)" := ExcisePostingBuffer[2]."CESS Amount (ACY)" +
          ExcisePostingBuffer[1]."CESS Amount (ACY)";
        ExcisePostingBuffer[2]."Excise Base Amount" := ExcisePostingBuffer[2]."Excise Base Amount" +
          ExcisePostingBuffer[1]."Excise Base Amount";
        ExcisePostingBuffer[2]."BED Amount" := ExcisePostingBuffer[2]."BED Amount" + ExcisePostingBuffer[1]."BED Amount";
        ExcisePostingBuffer[2]."AED(GSI) Amount" :=
          ExcisePostingBuffer[2]."AED(GSI) Amount" + ExcisePostingBuffer[1]."AED(GSI) Amount";
        ExcisePostingBuffer[2]."AED(TTA) Amount" :=
          ExcisePostingBuffer[2]."AED(TTA) Amount" + ExcisePostingBuffer[1]."AED(TTA) Amount";
        ExcisePostingBuffer[2]."SED Amount" := ExcisePostingBuffer[2]."SED Amount" + ExcisePostingBuffer[1]."SED Amount";
        ExcisePostingBuffer[2]."SAED Amount" := ExcisePostingBuffer[2]."SAED Amount" + ExcisePostingBuffer[1]."SAED Amount";
        ExcisePostingBuffer[2]."CESS Amount" := ExcisePostingBuffer[2]."CESS Amount" + ExcisePostingBuffer[1]."CESS Amount";
        ExcisePostingBuffer[2]."NCCD Amount" := ExcisePostingBuffer[2]."NCCD Amount" + ExcisePostingBuffer[1]."NCCD Amount";
        ExcisePostingBuffer[2]."eCess Amount" := ExcisePostingBuffer[2]."eCess Amount" + ExcisePostingBuffer[1]."eCess Amount";
        ExcisePostingBuffer[2]."SHE Cess Amount" :=
          ExcisePostingBuffer[2]."SHE Cess Amount" + ExcisePostingBuffer[1]."SHE Cess Amount";
        ExcisePostingBuffer[2]."ADET Amount" := ExcisePostingBuffer[2]."ADET Amount" + ExcisePostingBuffer[1]."ADET Amount";
        ExcisePostingBuffer[2]."ADE Amount" := ExcisePostingBuffer[2]."ADE Amount" + ExcisePostingBuffer[1]."ADE Amount";
        ExcisePostingBuffer[2]."ADC VAT Amount" := ExcisePostingBuffer[2]."ADC VAT Amount" + ExcisePostingBuffer[1]."ADC VAT Amount";
        ExcisePostingBuffer[2]."ADC VAT Amount (ACY)" := ExcisePostingBuffer[2]."ADC VAT Amount (ACY)" +
          ExcisePostingBuffer[1]."ADC VAT Amount (ACY)";
        ExcisePostingBuffer[2].Quantity := ExcisePostingBuffer[2].Quantity + ExcisePostingBuffer[1].Quantity;
        ExcisePostingBuffer[2].MODIFY;
      END ELSE
        ExcisePostingBuffer[1].INSERT;
    END;

    PROCEDURE RoundExciseAmt@1280016(ExciseDutyAmount@1280004 : Decimal;Qty@1280003 : Decimal;TotalQty@1280000 : Decimal;CurrencyCode@1500000 : Code[10]) : Decimal;
    VAR
      ExciseRoundingDirection@1280002 : Text[1];
      ExciseRoundingPrecision@1280001 : Decimal;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        CASE GLSetup."Excise Rounding Type" OF
          GLSetup."Excise Rounding Type"::Nearest:
            ExciseRoundingDirection := '=';
          GLSetup."Excise Rounding Type"::Up:
            ExciseRoundingDirection := '>';
          GLSetup."Excise Rounding Type"::Down:
            ExciseRoundingDirection := '<';
        END;
        IF GLSetup."Excise Rounding Precision" <> 0 THEN
          ExciseRoundingPrecision := GLSetup."Excise Rounding Precision"
        ELSE
          ExciseRoundingPrecision := 0.01;
        IF TotalQty = 0 THEN
          EXIT;
        EXIT(ROUND(ExciseDutyAmount * (Qty / TotalQty),ExciseRoundingPrecision,ExciseRoundingDirection));
      END;
      EXIT(ROUND(ExciseDutyAmount * (Qty / TotalQty),Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE CheckExciseInvoiceDiff@1280018(PurchLine@1280000 : Record 39);
    VAR
      RcptHeader@1280004 : Record 120;
      RcptLine@1280003 : Record 121;
      ReturnShptHeader@1280002 : Record 6650;
      ReturnShptLine@1280001 : Record 6651;
      PurchRcptHead@1500000 : Record 120;
    BEGIN
      WITH PurchLine DO BEGIN
        IF NOT (("Document Type" = "Document Type"::Invoice) OR ("Document Type" = "Document Type"::"Credit Memo")) THEN
          EXIT;
        IF ("Document Type" = "Document Type"::Invoice) AND ("Receipt No." = '') THEN
          EXIT;
        IF ("Document Type" = "Document Type"::"Credit Memo") AND ("Return Shipment No." = '') THEN
          EXIT;
        IF NOT (Type IN [1,2,3]) THEN
          EXIT;

        IF "Receipt No." <> '' THEN BEGIN
          RcptHeader.GET("Receipt No.");
          RcptLine.GET("Receipt No.","Receipt Line No.");
          IF RcptHeader."Currency Code" <> '' THEN BEGIN
            "BED Amount" := ("BED Amount" * RcptHeader."Currency Factor") - RcptLine."BED Amount";
            "ADET Amount" := ("ADET Amount" * RcptHeader."Currency Factor") - RcptLine."ADET Amount";
            "ADE Amount" := ("ADE Amount" * RcptHeader."Currency Factor") - RcptLine."ADE Amount";
            "AED(GSI) Amount" := ("AED(GSI) Amount" * RcptHeader."Currency Factor") - RcptLine."AED(GSI) Amount";
            "AED(TTA) Amount" := ("AED(TTA) Amount" * RcptHeader."Currency Factor") - RcptLine."AED(TTA) Amount";
            "CESS Amount" := ("CESS Amount" * RcptHeader."Currency Factor") - RcptLine."CESS Amount";
            "NCCD Amount" := ("NCCD Amount" * RcptHeader."Currency Factor") - RcptLine."NCCD Amount";
            "SAED Amount" := ("SAED Amount" * RcptHeader."Currency Factor") - RcptLine."SAED Amount";
            "SED Amount" := ("SED Amount" * RcptHeader."Currency Factor") - RcptLine."SED Amount";
            "eCess Amount" := ("eCess Amount" * RcptHeader."Currency Factor") - RcptLine."eCess Amount";
            "ADC VAT Amount" := ("ADC VAT Amount" * RcptHeader."Currency Factor") - RcptLine."ADC VAT Amount";
            "SHE Cess Amount" := ("SHE Cess Amount" * RcptHeader."Currency Factor") - RcptLine."SHE Cess Amount";
            "Custom eCess Amount" := ("Custom eCess Amount" * RcptHeader."Currency Factor") - RcptLine."Custom eCess Amount";
            "Custom SHECess Amount" := ("Custom SHECess Amount" * RcptHeader."Currency Factor") - RcptLine."Custom SHECess Amount";
          END ELSE BEGIN
            "BED Amount" -= RcptLine."BED Amount";
            "ADET Amount" -= RcptLine."ADET Amount";
            "ADE Amount" -= RcptLine."ADE Amount";
            "AED(GSI) Amount" -= RcptLine."AED(GSI) Amount";
            "AED(TTA) Amount" -= RcptLine."AED(TTA) Amount";
            "CESS Amount" -= RcptLine."CESS Amount";
            "NCCD Amount" -= RcptLine."NCCD Amount";
            "SAED Amount" -= RcptLine."SAED Amount";
            "SED Amount" -= RcptLine."SED Amount";
            "eCess Amount" -= RcptLine."eCess Amount";
            "ADC VAT Amount" -= RcptLine."ADC VAT Amount";
            "SHE Cess Amount" -= RcptLine."SHE Cess Amount";
            "Custom eCess Amount" -= RcptLine."Custom eCess Amount";
            "Custom SHECess Amount" -= RcptLine."Custom SHECess Amount";
          END;
          IF (CheckExciseComponentsExist(RcptHeader,"BED Amount") OR CheckExciseComponentsExist(RcptHeader,"ADET Amount") OR
              CheckExciseComponentsExist(RcptHeader,"AED(GSI) Amount") OR CheckExciseComponentsExist(RcptHeader,"AED(TTA) Amount") OR
              CheckExciseComponentsExist(RcptHeader,"CESS Amount") OR CheckExciseComponentsExist(RcptHeader,"NCCD Amount") OR
              CheckExciseComponentsExist(RcptHeader,"SAED Amount") OR CheckExciseComponentsExist(RcptHeader,"SED Amount") OR
              CheckExciseComponentsExist(RcptHeader,"eCess Amount") OR CheckExciseComponentsExist(RcptHeader,"ADE Amount") OR
              CheckExciseComponentsExist(RcptHeader,"ADC VAT Amount") OR CheckExciseComponentsExist(RcptHeader,"SHE Cess Amount") OR
              CheckExciseComponentsExist(RcptHeader,"Custom eCess Amount") OR
              CheckExciseComponentsExist(RcptHeader,"Custom SHECess Amount")) AND (NOT "Excise Loading on Inventory")
          THEN BEGIN
            "Qty. to Receive (Base)" := RcptLine.Quantity;
            "Line No." := RcptLine."Line No.";
            IF ((Type = Type::Item) AND ("Capital Item" = TRUE)) OR (Type = Type::"Fixed Asset") THEN
              ExciseInsertRGRegister.InsertRG23CPartIIPurchase(PurchLine,RcptHeader,ReturnShptHeader,TRUE)
            ELSE BEGIN
              IF ("Receipt No." <> '') AND (PurchHeader."Currency Code" <> '') THEN BEGIN
                PurchRcptHead.GET("Receipt No.");
                IF PurchRcptHead."Currency Code" <> '' THEN
                  ExciseInsertRGRegister.InsertRG23APartIIPurchase(PurchLine,RcptHeader,ReturnShptHeader,TRUE);
              END ELSE
                ExciseInsertRGRegister.InsertRG23APartIIPurchase(PurchLine,RcptHeader,ReturnShptHeader,TRUE);
            END;
          END;
        END ELSE BEGIN
          ReturnShptHeader.GET("Return Shipment No.");
          ReturnShptLine.GET("Return Shipment No.","Return Shipment Line No.");
          "BED Amount" := "BED Amount" + ReturnShptLine."BED Amount";
          "ADET Amount" := "ADET Amount" + ReturnShptLine."ADET Amount";
          "ADE Amount" := "ADE Amount" + ReturnShptLine."ADE Amount";
          "AED(GSI) Amount" := "AED(GSI) Amount" + ReturnShptLine."AED(GSI) Amount";
          "AED(TTA) Amount" := "AED(TTA) Amount" + ReturnShptLine."AED(TTA) Amount";
          "CESS Amount" := "CESS Amount" + ReturnShptLine."CESS Amount";
          "NCCD Amount" := "NCCD Amount" + ReturnShptLine."NCCD Amount";
          "SAED Amount" := "SAED Amount" + ReturnShptLine."SAED Amount";
          "SED Amount" := "SED Amount" + ReturnShptLine."SED Amount";
          "eCess Amount" := "eCess Amount" + ReturnShptLine."eCess Amount";
          "ADC VAT Amount" := "ADC VAT Amount" + ReturnShptLine."ADC VAT Amount";
          "SHE Cess Amount" := "SHE Cess Amount" + ReturnShptLine."SHE Cess Amount";
          "Custom eCess Amount" := "Custom eCess Amount" + ReturnShptLine."Custom eCess Amount";
          "Custom SHECess Amount" := "Custom SHECess Amount" + ReturnShptLine."Custom SHECess Amount";

          IF (("BED Amount" <> 0) OR ("ADET Amount" <> 0) OR ("AED(GSI) Amount" <> 0) OR ("AED(TTA) Amount" <> 0) OR
              ("CESS Amount" <> 0) OR ("NCCD Amount" <> 0) OR ("SAED Amount" <> 0) OR ("SED Amount" <> 0) OR ("eCess Amount" <> 0) OR
              ("ADE Amount" <> 0) OR ("ADC VAT Amount" <> 0) OR ("SHE Cess Amount" <> 0) OR ("Custom eCess Amount" <> 0) OR
              ("Custom SHECess Amount" <> 0))
             AND ("Excise Loading on Inventory" = FALSE)
          THEN BEGIN
            "Line No." := ReturnShptLine."Line No.";
            IF ((Type = Type::Item) AND ("Capital Item" = TRUE)) OR (Type = Type::"Fixed Asset") THEN
              ExciseInsertRGRegister.InsertRG23CPartIIPurchase(PurchLine,RcptHeader,ReturnShptHeader,TRUE)
            ELSE
              ExciseInsertRGRegister.InsertRG23APartIIPurchase(PurchLine,RcptHeader,ReturnShptHeader,TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE PurchRoundTDSAmount@1280019(TDSAmount@1280000 : Decimal;CurrencyCode@1500000 : Code[10]) : Decimal;
    VAR
      TDSRoundingDirection@1280002 : Text[1];
      TDSRoundingPrecision@1280001 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."TDS Rounding Type" OF
        GLSetup."TDS Rounding Type"::Nearest:
          TDSRoundingDirection := '=';
        GLSetup."TDS Rounding Type"::Up:
          TDSRoundingDirection := '>';
        GLSetup."TDS Rounding Type"::Down:
          TDSRoundingDirection := '<';
      END;
      IF GLSetup."TDS Rounding Precision" <> 0 THEN
        TDSRoundingPrecision := GLSetup."TDS Rounding Precision"
      ELSE
        TDSRoundingPrecision := 0.01;
      EXIT(ROUND(TDSAmount,TDSRoundingPrecision,TDSRoundingDirection));
    END;

    PROCEDURE RoundExcisePrecision@1500006(ExciseDutyAmount@1280004 : Decimal) : Decimal;
    VAR
      ExciseRoundingDirection@1280002 : Text[1];
      ExciseRoundingPrecision@1280001 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."Excise Rounding Type" OF
        GLSetup."Excise Rounding Type"::Nearest:
          ExciseRoundingDirection := '=';
        GLSetup."Excise Rounding Type"::Up:
          ExciseRoundingDirection := '>';
        GLSetup."Excise Rounding Type"::Down:
          ExciseRoundingDirection := '<';
      END;
      IF GLSetup."Excise Rounding Precision" <> 0 THEN
        ExciseRoundingPrecision := GLSetup."Excise Rounding Precision"
      ELSE
        ExciseRoundingPrecision := 0.01;
      EXIT(ROUND(ExciseDutyAmount,ExciseRoundingPrecision,ExciseRoundingDirection));
    END;

    PROCEDURE RoundServiceTaxPrecision@1500001(ServiceTaxAmount@1280004 : Decimal) : Decimal;
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
    BEGIN
      ServiceTaxEntry."Service Tax Rounding Precision" := PurchHeader."Service Tax Rounding Precision";
      ServiceTaxEntry."Service Tax Rounding Type" := PurchHeader."Service Tax Rounding Type";
      EXIT(ServiceTaxEntry.RoundAmount(ServiceTaxAmount));
    END;

    PROCEDURE GetState@1500012(StateCode@1500000 : Code[10]);
    BEGIN
      IF State.Code <> StateCode THEN
        State.GET(StateCode);
    END;

    PROCEDURE InsertDetailedTaxEntry@1500007(PurchLine@1500001 : Record 39;VAR AmountLoadedOnItem@1500010 : Decimal;VAR InputTaxCredit@1500026 : Decimal;VAR CapitalGood@1500027 : Boolean;TaxQtyToBeInvoiced@1500029 : Decimal;TaxQtyToBeInvoicedBase@1500030 : Decimal;Factor@1500031 : Decimal);
    VAR
      TaxAreaLine@1500014 : Record 319;
      TaxGroup@1500013 : Record 321;
      TaxEntry@1500005 : Record 13700;
      TaxJurisdiction@1500007 : Record 320;
      JurisDefermentPeriod@1500002 : Record 16521;
      TaxDetail@1500004 : Record 322;
      Item@1500003 : Record 27;
      ItemCharge2@1500033 : Record 5800;
      DetailedTaxEntry@1500008 : Record 16522;
      DetailedTaxEntry2@1500016 : Record 16522;
      TaxBaseAmount@1500012 : Decimal;
      TaxEntryNo@1500018 : Integer;
      LoopCounter@1500017 : Integer;
      LastPostingDate@1500019 : Date;
      TaxAmount@1500006 : Decimal;
      PrimaryEntryNo@1500020 : Integer;
      xAmountLoadedOnItem@1500000 : Decimal;
      xInputTaxCredit@1500009 : Decimal;
      xPurchTaxAmount@1500011 : Decimal;
      TotalAmountLoadedOnItem@1500015 : Decimal;
      TotalInputTaxCredit@1500021 : Decimal;
      NoOfDefferments@1500023 : Integer;
      DefferPostingDate@1500025 : Date;
      ExportOrDeemedExport@1500022 : Boolean;
      CompositionType@1500024 : ' , Retailer, Works Contract, Bakery, Restraunt / Club, Second Hand Motor Vehicle';
      StateCode@1500028 : Code[10];
      Counter@1500089 : Integer;
      TaxDetailBuffer@1500032 : Record 13766;
      TaxType@1500034 : Text[30];
      Text16501@1500035 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
      TaxJurisdictionLoopCount@1500036 : Integer;
      TaxJurisdictionTotCount@1500037 : Integer;
      TaxAreaLine2@1280001 : Record 319;
      TaxBuffer@1500038 : TEMPORARY Record 13766;
      Vend@1000 : Record 23;
    BEGIN
      IF PurchHeader."Location Code" <> '' THEN BEGIN
        GetLocation(PurchHeader."Location Code");
        Location.TESTFIELD("State Code");
        ExportOrDeemedExport := Location."Export or Deemed Export";
        CompositionType := Location."Composition Type";
        StateCode := Location."State Code";
      END ELSE BEGIN
        GetCompanyInfo;
        CompanyInfo.TESTFIELD(State);
        ExportOrDeemedExport := CompanyInfo."Export or Deemed Export";
        CompositionType := CompanyInfo."Composition Type";
        StateCode := CompanyInfo.State;
      END;

      GetState(StateCode);

      WITH PurchLine DO BEGIN
        StartingEntryNo := 0;
        IF NOT "Tax Liable" THEN
          EXIT;
        TaxJurisdictionLoopCount := 0;
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        TaxJurisdictionTotCount := TaxAreaLine.COUNT;
        IF TaxAreaLine.FIND('-') THEN
          REPEAT
            TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
            IF TaxType = '' THEN
              TaxType := FORMAT(TaxJurisdiction."Tax Type")
            ELSE
              IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                ERROR(Text16501,TaxType,TaxAreaLine."Tax Jurisdiction Code");
            TaxAmount := 0;
            TaxBaseAmount := 0;
            TaxJurisdictionLoopCount := TaxJurisdictionLoopCount + 1;
            IF TaxJurisdiction."Tax Type" <> TaxJurisdiction."Tax Type"::" " THEN BEGIN
              TaxAreaLine2.COPYFILTERS(TaxAreaLine);
              TaxAreaLine2.SETCURRENTKEY("Tax Area","Calculation Order");
              TaxAreaLine2 := TaxAreaLine;
              TaxDetail.RESET;
              TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
              TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
              IF NOT TaxJurisdiction."Forms Not Applicable" THEN
                TaxDetail.SETRANGE("Form Code","Form Code")
              ELSE
                TaxDetail.SETRANGE("Forms Not Applicable",TRUE);
              TaxDetail.SETFILTER("Effective Date",'<=%1',PurchHeader."Posting Date");
              IF TaxDetail.FINDLAST THEN BEGIN
                TaxGroup.GET(TaxDetail."Tax Group Code");
                IF TaxAreaLine.Formula <> '' THEN
                  TaxBaseAmount := IndianSalesTaxCalculate.EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
                IF TaxAreaLine."Include Tax Base" THEN
                  TaxBaseAmount := TaxBaseAmount + "Tax Base Amount";
                IF TaxAreaLine."Formula Incl. VPT" <> '' THEN
                  TaxBaseAmount := TaxBaseAmount +
                    IndianSalesTaxCalculate.EvaluateExpressionVatPurchTax(TRUE,TaxAreaLine."Formula Incl. VPT",
                      TaxBuffer,TaxAreaLine);

                TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;
                IF (ChargeItemAssgnt OR ChargeItemPerOrderPerLine OR (PurchHeader."Currency Code" <> '')) AND
                   (PurchLine.Type <> PurchLine.Type::"G/L Account") THEN
                  TaxAmount := ROUND(TaxAmount)
                ELSE
                  IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR
                     (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::CST)
                  THEN
                    TaxAmount := IndianSalesTaxCalculate.RoundVATPrecision(TaxAmount);
                CASE Type OF
                  Type::Item:
                    BEGIN
                      Item.GET("No.");
                      CapitalGood := TaxDetail."Capital Goods" AND Item."Fixed Asset";
                    END;
                  Type::"Fixed Asset":
                    CapitalGood := TaxDetail."Capital Goods";
                  Type::"Charge (Item)":
                    BEGIN
                      ItemCharge2.RESET;
                      ItemCharge2.SETRANGE("No.","No.");
                      IF ItemCharge2.FINDFIRST THEN
                        CapitalGood := TaxDetail."Capital Goods" AND ItemCharge2."Fixed Asset";
                    END;
                END;

                TaxEntry.SETRANGE("Entry No.");
                IF TaxEntry.FINDLAST THEN
                  TaxEntryNo := TaxEntry."Entry No.";
                IF (StartingEntryNo = 0) OR
                   (RefTaxJurisdiction <> TaxAreaLine."Tax Jurisdiction Code") OR TaxAreaLine."Include Tax Base"
                THEN BEGIN
                  TaxBaseAmount := TaxBaseAmount * TaxQtyToBeInvoiced / "Qty. to Invoice";
                  TaxAmount := TaxAmount * TaxQtyToBeInvoiced / "Qty. to Invoice";
                  TaxAmount := ROUND(TaxAmount);
                END;
                IF TaxAreaLine2.NEXT = 0 THEN BEGIN
                  IF NOT ((ChargeItemAssgnt OR ChargeItemPerOrderPerLine OR (PurchHeader."Currency Code" <> '')) AND
                          (Type <> Type::"G/L Account"))
                  THEN BEGIN
                    TotalQtyInvoiced := TotalQtyInvoiced + TaxQtyToBeInvoiced;
                    IF TotalQtyInvoiced = "Qty. to Invoice" THEN BEGIN
                      IF (TotalInputTaxCredit + TaxAmount) <> "Tax Amount" THEN
                        TaxAmount := TaxAmount + ("Tax Amount" - (TotalTaxAmount + TaxAmount));
                    END;
                  END;
                END;
                RefTaxJurisdiction := TaxAreaLine."Tax Jurisdiction Code";
                WITH DetailedTaxEntry2 DO BEGIN
                  INIT;
                  "Entry Type" := "Entry Type"::"Initial Entry";
                  "Transaction Type" := "Transaction Type"::Purchase;
                  "Document Type" := GenJnlLineDocType;
                  "Document No." := GenJnlLineDocNo;
                  "External Document No." := PurchHeader."Vendor Invoice No.";
                  "Posting Date" := PurchHeader."Posting Date";
                  Type := PurchLine.Type;
                  "No." := PurchLine."No.";
                  "Source Type" := "Source Type"::Vendor;
                  "Source No." := PurchHeader."Buy-from Vendor No.";
                  "Location Code" := PurchHeader."Location Code";
                  "Item Charge Entry" := PurchLine."Item Charge Entry";
                  "Tax Area Code" := PurchLine."Tax Area Code";
                  "Document Line No." := PurchLine."Line No.";
                  "Tax Component" := TaxJurisdiction."Tax Component";
                  "Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
                  "Tax Group Code" := PurchLine."Tax Group Code";
                  "Tax Base Amount" := TaxBaseAmount;
                  "Tax %" := TaxDetail."Tax Below Maximum";
                  "Form Code" := TaxDetail."Form Code";
                  "Tax Amount" := TaxAmount;
                  "Non ITC Claimable Usage %" := PurchLine."Non ITC Claimable Usage %";
                  "Works Contract" := TaxGroup."Works Contract";
                  "Schedule Code" := TaxDetail."Schedule Code";
                  Vend.GET("Buy-from Vendor No.");
                  Composition := Vend.Composition;
                  "Export or Deemed Export" := ExportOrDeemedExport;
                  "Types Of Composition" := CompositionType;
                  "Tax Period" := State."Tax Period";
                  "State Code" := State.Code;
                  IF CapitalGood THEN BEGIN
                    "G/L Account No." := State."VAT Deferred Account No.";
                    "Product Type" := "Product Type"::"Capital Goods";
                  END ELSE BEGIN
                    "G/L Account No." := State."Tax Account (Purchases)";
                    "Product Type" := "Product Type"::Item;
                  END;
                  "Tax Type" := TaxJurisdiction."Tax Type";
                  Quantity := TaxQtyToBeInvoicedBase;
                  "Remaining Quantity" := TaxQtyToBeInvoicedBase;
                  "Input / Output Tax Applicable" := CapitalGood OR TaxDetail."Creditable Goods";
                  VATMngt.UpdateTaxDetails(DetailedTaxEntry2);

                  xAmountLoadedOnItem := "Amount Loaded on Item";
                  xInputTaxCredit := "Input Credit/Output Tax Amount";
                  xPurchTaxAmount := "Purch. Tax Amount";

                  TotalAmountLoadedOnItem += xAmountLoadedOnItem;
                  TotalInputTaxCredit += xInputTaxCredit;
                  TotalPurchTaxAmount += xPurchTaxAmount;
                  AmountLoadedOnItem := TotalAmountLoadedOnItem;
                  InputTaxCredit := TotalInputTaxCredit;

                  TempPurchLine2 := PurchLine;
                  IF TempPurchLine2.FIND THEN BEGIN
                    TempPurchLine2."VAT able Purchase Tax Amount" += "Purch. Tax Amount";
                    TempPurchLine2.MODIFY;
                  END ELSE BEGIN
                    TempPurchLine2.TRANSFERFIELDS(PurchLine);
                    TempPurchLine2."VAT able Purchase Tax Amount" := "Purch. Tax Amount";
                    TempPurchLine2.INSERT;
                  END;
                END;
                TaxDetailBuffer.LOCKTABLE;
                TaxDetailBuffer.INIT;
                TaxDetailBuffer."Tax Area" := TaxAreaLine."Tax Area";
                TaxDetailBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
                TaxDetailBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
                TaxDetailBuffer.Amount := ROUND(TaxAmount);
                TaxDetailBuffer."Purchase VAT Amount" := xPurchTaxAmount;
                TaxDetailBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
                IF NOT TaxDetailBuffer.INSERT THEN
                  TaxDetailBuffer.MODIFY;
                IF CapitalGood THEN BEGIN
                  JurisDefermentPeriod.RESET;
                  JurisDefermentPeriod.SETCURRENTKEY("State Code","Effective Date","Line No.");
                  JurisDefermentPeriod.SETRANGE("State Code",State.Code);
                  JurisDefermentPeriod.SETFILTER("Effective Date",'<=%1',PurchHeader."Posting Date");
                  JurisDefermentPeriod.SETFILTER("Starting Threshold Amount",'<=%1',
                    TaxBaseAmount / TaxQtyToBeInvoicedBase);
                  JurisDefermentPeriod.SETFILTER("Closing Threshold Amount",'>=%1',
                    TaxBaseAmount / TaxQtyToBeInvoicedBase);
                  IF JurisDefermentPeriod.FINDLAST THEN BEGIN
                    NoOfDefferments := JurisDefermentPeriod."No. of Deferments" + 1;
                    LastPostingDate := PurchHeader."Posting Date";
                    FOR LoopCounter := 1 TO NoOfDefferments DO BEGIN
                      IF LoopCounter = 1 THEN BEGIN
                        LastPostingDate := PurchHeader."Posting Date";
                        DefferPostingDate := LastPostingDate;
                      END ELSE BEGIN
                        LastPostingDate := DefferPostingDate;
                        Counter += 1;
                        DefferPostingDate := IndianSalesTaxCalculate.GetDefrPostingDate(State,LastPostingDate,Counter = 1)
                      END;

                      DetailedTaxEntry := DetailedTaxEntry2;
                      DetailedTaxEntry."Entry No." := GetNextDetTaxEntryNo;
                      IF LoopCounter = 1 THEN
                        PrimaryEntryNo := DetailedTaxEntry."Entry No."
                      ELSE BEGIN
                        DetailedTaxEntry."Tax Base Amount" := 0;
                        DetailedTaxEntry."Tax Amount" := 0;
                        DetailedTaxEntry."Amount Loaded on Item" := 0;
                        DetailedTaxEntry."Purch. Tax Amount" := 0;
                        DetailedTaxEntry.Quantity := 0;
                        DetailedTaxEntry."Remaining Quantity" := 0;
                      END;

                      DetailedTaxEntry."Posting Date" := DefferPostingDate;
                      DetailedTaxEntry."Input Credit/Output Tax Amount" := ROUND(xInputTaxCredit / NoOfDefferments);
                      IF LoopCounter = NoOfDefferments THEN BEGIN
                        IF xInputTaxCredit <> (DetailedTaxEntry."Input Credit/Output Tax Amount" * NoOfDefferments) THEN
                          DetailedTaxEntry."Input Credit/Output Tax Amount" := DetailedTaxEntry."Input Credit/Output Tax Amount" +
                            xInputTaxCredit - (DetailedTaxEntry."Input Credit/Output Tax Amount" * NoOfDefferments);
                      END;
                      DetailedTaxEntry."Remaining Tax Amount" := DetailedTaxEntry."Input Credit/Output Tax Amount";
                      DetailedTaxEntry.Deferment := TRUE;
                      DetailedTaxEntry."Deferment No." := LoopCounter - 1;
                      DetailedTaxEntry."Primary Deferment Entry No." := PrimaryEntryNo;
                      DetailedTaxEntry.Positive := DetailedTaxEntry."Input Credit/Output Tax Amount" > 0;
                      IF StartingEntryNo = 0 THEN BEGIN
                        StartingEntryNo := DetailedTaxEntry."Entry No.";
                        DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                      END ELSE
                        DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                      DetailedTaxEntry.INSERT(TRUE);
                    END;
                  END ELSE BEGIN
                    DetailedTaxEntry := DetailedTaxEntry2;
                    DetailedTaxEntry."Entry No." := GetNextDetTaxEntryNo;
                    DetailedTaxEntry.Positive := DetailedTaxEntry."Input Credit/Output Tax Amount" > 0;
                    IF StartingEntryNo = 0 THEN BEGIN
                      StartingEntryNo := DetailedTaxEntry."Entry No.";
                      DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                    END ELSE
                      DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                    DetailedTaxEntry.INSERT(TRUE);
                  END;
                END ELSE BEGIN
                  DetailedTaxEntry := DetailedTaxEntry2;
                  DetailedTaxEntry."Entry No." := GetNextDetTaxEntryNo;
                  DetailedTaxEntry.Positive := DetailedTaxEntry."Input Credit/Output Tax Amount" > 0;
                  IF StartingEntryNo = 0 THEN BEGIN
                    StartingEntryNo := DetailedTaxEntry."Entry No.";
                    DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                  END ELSE
                    DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                  DetailedTaxEntry.INSERT(TRUE);
                END;
                IF (DetailedTaxEntry.Type = DetailedTaxEntry.Type::Item) OR
                   (DetailedTaxEntry.Type = DetailedTaxEntry.Type::"Charge (Item)")
                THEN
                  ItemJnlPostLine.UpdateDetailTaxEntry(DetailedTaxEntry."Entry No.",DetailedTaxEntry."Main Component Entry No.",
                    DetailedTaxEntry."Document No.",DetailedTaxEntry."Document Line No.");
              END;
            END ELSE BEGIN
              LSTTaxType := TRUE;
              NonCSTVATChrgAmt := TRUE;
            END;
            TotalPurchaseTaxAmount += xAmountLoadedOnItem + xInputTaxCredit;
            PurchLineTaxAmount2 += xAmountLoadedOnItem + xInputTaxCredit;
            TotalVatablePurchaseTaxAmount += xPurchTaxAmount;
            IF (NOT (ChargeItemAssgnt OR ChargeItemPerOrderPerLine)) AND (Type <> Type::"G/L Account") THEN
              TotalTaxAmount := TotalTaxAmount + TaxAmount;
          UNTIL TaxAreaLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetNextDetTaxEntryNo@1500025() : Integer;
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      IF NextDetTaxEntryNo = 0 THEN BEGIN
        IF DetailedTaxEntry.FINDLAST THEN
          NextDetTaxEntryNo := DetailedTaxEntry."Entry No." + 1
        ELSE
          NextDetTaxEntryNo := 1;
      END ELSE
        NextDetTaxEntryNo := NextDetTaxEntryNo + 1;
      EXIT(NextDetTaxEntryNo);
    END;

    LOCAL PROCEDURE GetCompanyInfo@1500005();
    BEGIN
      IF NOT CompanyInfoRead THEN BEGIN
        CompanyInfo.GET;
        CompanyInfoRead := TRUE;
      END;
    END;

    PROCEDURE CheckVATSettled@1500002();
    VAR
      VATSettlement@1500001 : Record 16523;
      TmpAmount@1500000 : Decimal;
      StateCode@1500002 : Code[10];
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLine.FIND('-') THEN
        REPEAT
          TmpAmount := TmpAmount + PurchLine."Amount Loaded on Inventory" + PurchLine."Input Tax Credit Amount";
        UNTIL PurchLine.NEXT = 0;
      IF TmpAmount = 0 THEN
        EXIT;

      IF PurchHeader."Location Code" <> '' THEN BEGIN
        GetLocation(PurchHeader."Location Code");
        Location.TESTFIELD("State Code");
        StateCode := Location."State Code";
      END ELSE BEGIN
        GetCompanyInfo;
        CompanyInfo.TESTFIELD(State);
        StateCode := CompanyInfo.State;
      END;

      VATSettlement.SETRANGE("State Code",StateCode);
      VATSettlement.SETFILTER("Starting Date",'<=%1',PurchHeader."Posting Date");
      VATSettlement.SETFILTER("Ending Date",'>=%1',PurchHeader."Posting Date");
      VATSettlement.SETRANGE(Settlement,TRUE);
      VATSettlement.SETRANGE(Type,VATSettlement.Type::Original);
      IF VATSettlement.FINDFIRST THEN
        IF NOT CONFIRM(Text16500) THEN
          ERROR('');
    END;

    PROCEDURE CalcTaxAmount@1500004(PLine@1500003 : Record 39;VAR AmtLoadedOnItem@1500002 : Decimal);
    VAR
      TaxAreaLine@1500027 : Record 319;
      TaxJurisdiction@1500024 : Record 320;
      StrOrdLineDetails@1500001 : Record 13795;
    BEGIN
      AmtLoadedOnItem := 0;
      WITH PLine DO BEGIN
        StrOrdLineDetails.RESET;
        StrOrdLineDetails.SETRANGE("Document Type","Document Type");
        StrOrdLineDetails.SETRANGE("Document No.","Document No.");
        StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
        StrOrdLineDetails.SETRANGE("Item No.","No.");
        StrOrdLineDetails.SETRANGE("Line No.","Line No.");
        StrOrdLineDetails.SETRANGE("Tax/Charge Type",StrOrdLineDetails."Tax/Charge Type"::"Sales Tax");
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN BEGIN
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
          IF TaxJurisdiction."Tax Type" <> TaxJurisdiction."Tax Type"::" " THEN
            AmtLoadedOnItem := "Amount Loaded on Inventory";
          IF TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::" " THEN BEGIN
            IF StrOrdLineDetails.FINDFIRST THEN BEGIN
              IF StrOrdLineDetails."Loading on Inventory" THEN
                AmtLoadedOnItem := (("Tax Amount" * StrOrdLineDetails."% Loading on Inventory") / 100)
              ELSE
                AmtLoadedOnItem := 0;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE CalcInvSalesTaxAmount@1500008(PLine@1500003 : Record 39;VAR AmtLoadedOnItem@1500002 : Decimal);
    VAR
      TaxAreaLine@1500027 : Record 319;
      TaxJurisdiction@1500024 : Record 320;
      StrOrdLineDetails@1500001 : Record 13795;
    BEGIN
      AmtLoadedOnItem := 0;
      WITH PLine DO BEGIN
        StrOrdLineDetails.RESET;
        StrOrdLineDetails.SETRANGE("Document Type","Document Type");
        StrOrdLineDetails.SETRANGE("Document No.","Document No.");
        StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Purchase);
        StrOrdLineDetails.SETRANGE("Item No.","No.");
        StrOrdLineDetails.SETRANGE("Line No.","Line No.");
        StrOrdLineDetails.SETRANGE("Tax/Charge Type",StrOrdLineDetails."Tax/Charge Type"::"Sales Tax");
        TaxAreaLine.RESET;
        TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
        TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
        IF TaxAreaLine.FINDFIRST THEN BEGIN
          TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
          IF TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::" " THEN BEGIN
            IF StrOrdLineDetails.FINDFIRST THEN BEGIN
              IF StrOrdLineDetails."Loading on Inventory" THEN
                AmtLoadedOnItem := (("Tax Amount" * StrOrdLineDetails."% Loading on Inventory") / 100)
              ELSE
                AmtLoadedOnItem := 0;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE FillSTaxPostingBuffer@1500011(PurchLine@1500001 : Record 39;PurchLineACY@1500000 : Record 39);
    VAR
      CompanyInfo@1500003 : Record 79;
      Location@1500002 : Record 14;
    BEGIN
      PurchLine.TESTFIELD("Service Tax Registration No.");
      WITH PurchLine DO BEGIN
        CLEAR(STaxPostingBuffer[1]);
        STaxPostingBuffer[1].Type := STaxPostingBuffer[1].Type::Purchase;
        STaxPostingBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        STaxPostingBuffer[1]."Party Code" := PurchHeader."Pay-to Vendor No.";
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          IF Location."E.C.C. No." <> '' THEN
            STaxPostingBuffer[1]."Location E.C.C. No." := Location."E.C.C. No.";
        END ELSE BEGIN
          CompanyInfo.GET;
          IF CompanyInfo."E.C.C. No." <> '' THEN
            STaxPostingBuffer[1]."Location E.C.C. No." := CompanyInfo."E.C.C. No.";
        END;
        STaxPostingBuffer[1].Type := STaxPostingBuffer[1].Type::Purchase;
        STaxPostingBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        STaxPostingBuffer[1]."Service Tax Group Code" := "Service Tax Group";
        STaxPostingBuffer[1]."Service Tax Base Amount" := "Service Tax Base";
        STaxPostingBuffer[1]."Service Tax Amount" := "Service Tax Amount";
        STaxPostingBuffer[1]."Service Tax eCess Amount" := "Service Tax eCess Amount";
        STaxPostingBuffer[1]."Service Tax SHE Cess Amount" := "Service Tax SHE Cess Amount";
        STaxPostingBuffer[1]."Service Tax SBC %" := "Service Tax SBC %";
        STaxPostingBuffer[1]."Service Tax SBC Amount" := "Service Tax SBC Amount";
        STaxPostingBuffer[1]."KK Cess%" := "KK Cess%";
        STaxPostingBuffer[1]."KK Cess Amount" := "KK Cess Amount";
        STaxPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        STaxPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        STaxPostingBuffer[1]."Location Code" := "Location Code";
        STaxPostingBuffer[1]."Inv Amount" :=
          RoundServiceTaxPrecision(FullServiceTaxAmount + FullServiceTaxSBCAmount +
            KKCessAmount);
        UpdSTaxPostingBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdSTaxPostingBuffer@1500010();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      STaxPostingBuffer[1]."Dimension Set ID" := PurchLine."Dimension Set ID";
      STaxPostingBuffer[1]."Dimension Entry No." := STaxPostingBuffer[1]."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(STaxPostingBuffer[1]."Dimension Set ID",
        STaxPostingBuffer[1]."Global Dimension 1 Code",STaxPostingBuffer[1]."Global Dimension 2 Code");

      STaxPostingBuffer[2] := STaxPostingBuffer[1];
      IF STaxPostingBuffer[2].FIND THEN BEGIN
        STaxPostingBuffer[2]."Service Tax Base Amount" += STaxPostingBuffer[1]."Service Tax Base Amount";
        STaxPostingBuffer[2]."Service Tax Amount" += STaxPostingBuffer[1]."Service Tax Amount";
        STaxPostingBuffer[2]."Service Tax eCess Amount" += STaxPostingBuffer[1]."Service Tax eCess Amount";
        STaxPostingBuffer[2]."Service Tax SHE Cess Amount" += STaxPostingBuffer[1]."Service Tax SHE Cess Amount";
        STaxPostingBuffer[2]."Service Tax SBC Amount" += STaxPostingBuffer[1]."Service Tax SBC Amount";
        STaxPostingBuffer[2]."KK Cess Amount" += STaxPostingBuffer[1]."KK Cess Amount";
        STaxPostingBuffer[2]."Inv Amount" += STaxPostingBuffer[1]."Inv Amount";
        STaxPostingBuffer[2].MODIFY;
      END ELSE
        STaxPostingBuffer[1].INSERT;
    END;

    PROCEDURE CheckExciseRefund@1500013(PurchaseLine@1500000 : Record 39);
    BEGIN
      WITH PurchaseLine DO BEGIN
        IF "Excise Refund" THEN BEGIN
          IF "Excise Loading on Inventory" THEN
            ERROR(Text16509,Text16510);
          IF PurchHeader.Trading THEN
            ERROR(Text16509,Text16511);
          IF PurchHeader.CVD THEN
            ERROR(Text16509,Text16512);
        END;
      END;
    END;

    PROCEDURE GetTotalTDSAmt@1500014(TDSNatOfDeduction@1500002 : Code[20]) : Boolean;
    VAR
      PurchLine3@1500000 : Record 39;
    BEGIN
      PurchLine3.RESET;
      PurchLine3.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine3.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine3.SETRANGE("TDS Nature of Deduction",TDSNatOfDeduction);
      PurchLine3.SETFILTER("TDS Amount",'<>%1',0);
      EXIT(PurchLine3.FINDFIRST);
    END;

    PROCEDURE RoundInvPrecision@1500015(InvAmount@1500004 : Decimal) : Decimal;
    VAR
      InvRoundingDirection@1500001 : Text[1];
      InvRoundingPrecision@1500000 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."Inv. Rounding Type (LCY)" OF
        GLSetup."Inv. Rounding Type (LCY)"::Nearest:
          InvRoundingDirection := '=';
        GLSetup."Inv. Rounding Type (LCY)"::Up:
          InvRoundingDirection := '>';
        GLSetup."Inv. Rounding Type (LCY)"::Down:
          InvRoundingDirection := '<';
      END;
      IF GLSetup."Inv. Rounding Precision (LCY)" <> 0 THEN
        InvRoundingPrecision := GLSetup."Inv. Rounding Precision (LCY)"
      ELSE
        InvRoundingPrecision := 0.01;
      EXIT(ROUND(InvAmount,InvRoundingPrecision,InvRoundingDirection));
    END;

    PROCEDURE FilterAppliedEntries@1500026(ExecuteForStatistics@1500012 : Boolean);
    VAR
      OldVendLedgEntry@1500000 : Record 25;
      ServiceTaxEntry@1500004 : Record 16473;
      GenJnlApply@1500002 : Codeunit 225;
      ApplyingDate@1500001 : Date;
      AccType@1500003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AmountforAppl@1500005 : Decimal;
      AppliedAmount@1500006 : Decimal;
      AppliedAmountLCY@1500007 : Decimal;
      RemainingAmount@1500008 : Decimal;
      AmountToBeApplied@1500009 : Decimal;
      AppliedServiceTaxAmount@1000 : Decimal;
      AppliedServiceTaxEcessAmount@1001 : Decimal;
      AppliedServiceTaxSHEcessAmount@1002 : Decimal;
      AppliedServiceTaxSBCAmount@1500421 : Decimal;
      AppliedKKCessAmount@1500010 : Decimal;
      Vend@1003 : Record 23;
    BEGIN
      IF ExecuteForLookup THEN
        EXIT;
      WITH PurchHeader DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN
          EXIT;
        AmountforAppl :=
          ROUND(TotalPurchLine."Line Amount" - TotalPurchLine."Inv. Discount Amount" + TotalPurchLine."Tax Amount" -
            TotalPurchLine."Bal. TDS Including SHE CESS" -
            TotalPurchLine."Work Tax Amount" + AmountAddedtoVendor +
            TotalPurchLine.FullServiceTaxAmount + TotalPurchLine.FullServiceTaxSBCAmount +
            TotalPurchLine.KKCessAmount + TotalPurchLine."Total GST Amount");

        TempServiceTaxEntry.DELETEALL;
        CLEAR(TempServiceTaxEntry);
        ApplyingDate := "Posting Date";
        IF Vend.GET("Pay-to Vendor No.") THEN;
        IF "Applies-to Doc. No." <> '' THEN BEGIN
          OldVendLedgEntry.RESET;
          OldVendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
          OldVendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
          OldVendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
          OldVendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
          OldVendLedgEntry.SETRANGE(Open,TRUE);
          OldVendLedgEntry.SETRANGE("On Hold",'');

          IF OldVendLedgEntry.FINDFIRST THEN;
          IF NOT OldVendLedgEntry."Serv. Tax on Advance Payment" THEN
            EXIT;

          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Transaction No.",OldVendLedgEntry."Transaction No.");
          IF ServiceTaxEntry.FINDFIRST THEN
            IF ServiceTaxEntry."Reverse Charge" THEN
              AmountforAppl :=
                ROUND(TotalPurchLine."Line Amount" - TotalPurchLine."Inv. Discount Amount" + TotalPurchLine."Tax Amount" -
                TotalPurchLine."Bal. TDS Including SHE CESS" -
                TotalPurchLine."Work Tax Amount" + AmountAddedtoVendor);

          IF OldVendLedgEntry."Posting Date" > ApplyingDate THEN
            ApplyingDate := OldVendLedgEntry."Posting Date";
          GenJnlApply.CheckAgainstApplnCurrency("Currency Code",OldVendLedgEntry."Currency Code",AccType::Vendor,TRUE);
          OldVendLedgEntry.CALCFIELDS("Remaining Amount");
          FindAmtForAppln(OldVendLedgEntry,AppliedAmount,AppliedAmountLCY,
            OldVendLedgEntry."Remaining Amount",Currency."Amount Rounding Precision",AmountforAppl);
          CalculateAppliedPmtAmtST(OldVendLedgEntry);

          IF ServiceTaxEntry.FINDSET THEN
            REPEAT
              IF CheckOneGroup(PurchHeader) THEN
                CheckAmounttoApplyofApplPmt(OldVendLedgEntry,ServiceTaxEntry);
              CheckRoundingParameters(ServiceTaxEntry,PurchHeader,ExecuteForStatistics);
              RemainingAmount := 0;
              AmountToBeApplied := 0;
              TempServiceTaxEntry.TRANSFERFIELDS(ServiceTaxEntry);
              IF ServiceTaxEntry."Reverse Charge" THEN
                RemainingAmount :=
                  ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid" -
                    ServiceTaxEntry.FullTaxAmount + ServiceTaxEntry.FullTaxSBCAmount + ServiceTaxEntry.KKCessAmount)
              ELSE
                RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid");
              IF RemainingAmount > 0 THEN BEGIN
                IF RemainingAmount >= ABS(AppliedAmountLCY) THEN
                  AmountToBeApplied := ABS(AppliedAmountLCY)
                ELSE
                  AmountToBeApplied := RemainingAmount;
              END;
              UpdateTempServiceTaxEntry(
                ServiceTaxEntry,AppliedServiceTaxAmount,AppliedServiceTaxEcessAmount,AppliedServiceTaxSHEcessAmount,
                AppliedServiceTaxSBCAmount,AppliedKKCessAmount,AmountToBeApplied);
              TempServiceTaxEntry.INSERT;

            UNTIL ServiceTaxEntry.NEXT = 0;
        END ELSE IF ("Applies-to ID" <> '') THEN BEGIN
            // Find the first old entry (Invoice) which the new entry (Payment) should apply to
          OldVendLedgEntry.SetAppliesToIDFilter("Pay-to Vendor No.","Applies-to ID");

            IF NOT (Vend."Application Method" = Vend."Application Method"::"Apply to Oldest") THEN
              OldVendLedgEntry.SETFILTER("Amount to Apply",'<>%1',0);

            // Check and Move Ledger Entries to Temp
            IF PurchSetup."Appln. between Currencies" = PurchSetup."Appln. between Currencies"::None THEN
              OldVendLedgEntry.SETRANGE("Currency Code","Currency Code");

            IF OldVendLedgEntry.FINDSET(FALSE,FALSE) THEN
              REPEAT
                IF OldVendLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
                  IF GenJnlApply.CheckAgainstApplnCurrency(
                       "Currency Code",OldVendLedgEntry."Currency Code",AccType::Vendor,FALSE)
                  THEN BEGIN
                    IF (OldVendLedgEntry."Posting Date" > ApplyingDate) AND (OldVendLedgEntry."Applies-to ID" <> '') THEN
                      ApplyingDate := OldVendLedgEntry."Posting Date";
                    OldVendLedgEntry.CALCFIELDS("Remaining Amount");
                    FindAmtForAppln(OldVendLedgEntry,AppliedAmount,AppliedAmountLCY,
                      OldVendLedgEntry."Remaining Amount",Currency."Amount Rounding Precision",AmountforAppl);
                    AmountforAppl := AmountforAppl - AppliedAmountLCY;
                    CalculateAppliedPmtAmtST(OldVendLedgEntry);
                    ServiceTaxEntry.RESET;
                    ServiceTaxEntry.SETRANGE("Transaction No.",OldVendLedgEntry."Transaction No.");
                    IF ServiceTaxEntry.FINDSET THEN
                      REPEAT
                        IF CheckOneGroup(PurchHeader) THEN
                          CheckAmounttoApplyofApplPmt(OldVendLedgEntry,ServiceTaxEntry);
                        CheckRoundingParameters(ServiceTaxEntry,PurchHeader,ExecuteForStatistics);
                        RemainingAmount := 0;
                        AmountToBeApplied := 0;
                        TempServiceTaxEntry.TRANSFERFIELDS(ServiceTaxEntry);
                      IF ServiceTaxEntry."Reverse Charge" THEN
                          RemainingAmount :=
                            ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid" -
                            (ServiceTaxEntry.FullTaxAmount))
                        ELSE
                          RemainingAmount :=
                            ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid");
                        IF RemainingAmount > 0 THEN BEGIN
                          IF RemainingAmount >= ABS(AppliedAmountLCY) THEN
                            AmountToBeApplied := ABS(AppliedAmountLCY)
                          ELSE
                            AmountToBeApplied := RemainingAmount;
                        END;

                      UpdateTempServiceTaxEntry(
                        ServiceTaxEntry,AppliedServiceTaxAmount,
                        AppliedServiceTaxEcessAmount,AppliedServiceTaxSHEcessAmount,AppliedServiceTaxSBCAmount,
                        AppliedKKCessAmount,AmountToBeApplied);
                        TempServiceTaxEntry.INSERT;
                      UNTIL ServiceTaxEntry.NEXT = 0;
                  END;
                END;
              UNTIL OldVendLedgEntry.NEXT = 0;
          END;
        CreateTempPurchLineInst(ExecuteForStatistics);
        IF ("Applies-to ID" <> '') OR ("Applies-to Doc. No." <> '') THEN BEGIN
          IF NOT ExecuteForStatistics THEN
            IF OldVendLedgEntry.FINDSET THEN
              REPEAT
                STaxApplBuffer[1].RESET;
                STaxApplBuffer[1].SETRANGE("Transaction No.",OldVendLedgEntry."Transaction No.");
                STaxApplBuffer[1].CALCSUMS("Amount to Apply (LCY)");
                IF ABS(STaxApplBuffer[1]."Amount to Apply (LCY)") > ABS(AppliedAmountLCY) THEN BEGIN
                  STaxApplBuffer[1]."Amount to Apply (LCY)" := ABS(AppliedAmountLCY) *
                    STaxApplBuffer[1]."Amount to Apply (LCY)" / ABS(STaxApplBuffer[1]."Amount to Apply (LCY)");
                  STaxApplBuffer[1].MODIFY;
                END;
              UNTIL OldVendLedgEntry.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE FillSvcTaxApplication2@1500021(PurchaseLine@1500000 : Record 39);
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      PurchaseLine.TESTFIELD("Service Tax Registration No.");
      WITH PurchaseLine DO BEGIN
        CLEAR(STaxPostingBuffer[1]);
        CLEAR(STaxApplBuffer[1]);

        STaxApplBuffer[1].Type := STaxApplBuffer[1].Type::Purchase;
        STaxApplBuffer[1]."Document No." := PurchInvHeader."No.";
        STaxApplBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        STaxApplBuffer[1]."Party Code" := PurchHeader."Pay-to Vendor No.";
        STaxApplBuffer[1]."Service Tax Group Code" := "Service Tax Group";
        STaxApplBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        STaxApplBuffer[1]."Transaction No." := TempServiceTaxEntry."Transaction No.";
        STaxApplBuffer[1]."Amount to Apply (LCY)" := "Service Tax Base" + FullServiceTaxAmount;
        STaxApplBuffer[1]."Amount to Apply" := ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(PurchHeader."Posting Date",PurchHeader."Currency Code",
            "Service Tax Base" + FullServiceTaxAmount,
              PurchHeader."Currency Factor"),Currency."Amount Rounding Precision");

        STaxPostingBuffer[1].Type := STaxPostingBuffer[1].Type::Purchase;
        STaxPostingBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        STaxPostingBuffer[1]."Party Code" := PurchHeader."Pay-to Vendor No.";
        IF "Location Code" <> '' THEN BEGIN
          Location.GET(PurchLine."Location Code");
          IF Location."E.C.C. No." <> '' THEN
            STaxPostingBuffer[1]."Location E.C.C. No." := Location."E.C.C. No.";
        END ELSE BEGIN
          CompanyInfo.GET;
          IF CompanyInfo."E.C.C. No." <> '' THEN
            STaxPostingBuffer[1]."Location E.C.C. No." := CompanyInfo."E.C.C. No.";
        END;
        STaxPostingBuffer[1].Type := STaxPostingBuffer[1].Type::Purchase;
        STaxPostingBuffer[1]."Service Tax Registration No." := "Service Tax Registration No.";
        STaxPostingBuffer[1]."Service Tax Group Code" := "Service Tax Group";
        STaxPostingBuffer[1]."Service Tax Base Amount" := "Service Tax Base";
        STaxPostingBuffer[1]."Service Tax Amount" := "Service Tax Amount";
        STaxPostingBuffer[1]."Service Tax eCess Amount" := "Service Tax eCess Amount";
        STaxPostingBuffer[1]."Service Tax SHE Cess Amount" := "Service Tax SHE Cess Amount";
        STaxPostingBuffer[1]."Service Tax SBC Amount" := "Service Tax SBC Amount";
        STaxPostingBuffer[1]."KK Cess Amount" := "KK Cess Amount";
        STaxPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        STaxPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        STaxPostingBuffer[1]."Location Code" := "Location Code";
        STaxPostingBuffer[1]."Adv Payment Amount" := RoundServiceTaxPrecision(FullServiceTaxAmount);
        STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)" := "Tot. Serv Tax Amount (Intm)";
        STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)" := "Service Tax SBC Amount (Intm)";
        STaxPostingBuffer[1]."KK Cess Amount (Intm)" := "KK Cess Amount (Intm)";
        STaxPostingBuffer[1]."S. Tax Amount (Intm)" := "S. Tax Amount (Intm)";
        STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)" := "S. Tax eCess Amount (Intm)";
        STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)" := "S. Tax SHE Cess Amount (Intm)";
        STaxPostingBuffer[1]."S. Tax Base Amount (Intm)" := "S. Tax Base Amount (Intm)";
        UpdSTaxApplicationBuffer2
      END;
    END;

    LOCAL PROCEDURE UpdSTaxApplicationBuffer2@1500020();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      STaxPostingBuffer[1]."Dimension Set ID" := PurchLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(STaxPostingBuffer[1]."Dimension Set ID",
        STaxPostingBuffer[1]."Global Dimension 1 Code",STaxPostingBuffer[1]."Global Dimension 2 Code");

      STaxPostingBuffer[2] := STaxPostingBuffer[1];
      IF STaxPostingBuffer[2].FIND THEN BEGIN
        STaxPostingBuffer[2]."Service Tax Base Amount" += STaxPostingBuffer[1]."Service Tax Base Amount";
        STaxPostingBuffer[2]."Service Tax Amount" += STaxPostingBuffer[1]."Service Tax Amount";
        STaxPostingBuffer[2]."Service Tax eCess Amount" += STaxPostingBuffer[1]."Service Tax eCess Amount";
        STaxPostingBuffer[2]."Service Tax SHE Cess Amount" += STaxPostingBuffer[1]."Service Tax SHE Cess Amount";
        STaxPostingBuffer[2]."Service Tax SBC Amount" += STaxPostingBuffer[1]."Service Tax SBC Amount";
        STaxPostingBuffer[2]."KK Cess Amount" += STaxPostingBuffer[1]."KK Cess Amount";
        STaxPostingBuffer[2]."Adv Payment Amount" += STaxPostingBuffer[1]."Adv Payment Amount";
        STaxPostingBuffer[2]."Tot. Serv Tax Amount (Intm)" += STaxPostingBuffer[1]."Tot. Serv Tax Amount (Intm)";
        STaxPostingBuffer[2]."S. Tax Amount (Intm)" += STaxPostingBuffer[1]."S. Tax Amount (Intm)";
        STaxPostingBuffer[2]."S. Tax eCess Amount (Intm)" += STaxPostingBuffer[1]."S. Tax eCess Amount (Intm)";
        STaxPostingBuffer[2]."S. Tax SHE Cess Amount (Intm)" += STaxPostingBuffer[1]."S. Tax SHE Cess Amount (Intm)";
        STaxPostingBuffer[2]."S. Tax Base Amount (Intm)" += STaxPostingBuffer[1]."S. Tax Base Amount (Intm)";
        STaxPostingBuffer[2]."Service Tax SBC Amount (Intm)" += STaxPostingBuffer[1]."Service Tax SBC Amount (Intm)";
        STaxPostingBuffer[2]."KK Cess Amount (Intm)" += STaxPostingBuffer[1]."KK Cess Amount (Intm)";
        STaxPostingBuffer[2].MODIFY;
      END ELSE
        STaxPostingBuffer[1].INSERT;

      STaxApplBuffer[2] := STaxApplBuffer[1];
      IF STaxApplBuffer[2].FIND THEN BEGIN
        STaxApplBuffer[2]."Amount to Apply (LCY)" += STaxApplBuffer[1]."Amount to Apply (LCY)";
        STaxApplBuffer[2]."Amount to Apply" += STaxApplBuffer[1]."Amount to Apply";
        STaxApplBuffer[2].MODIFY;
      END ELSE
        STaxApplBuffer[1].INSERT;
    END;

    PROCEDURE CreateTempPurchLineInst@1500022(ExecuteForStatistics@1500002 : Boolean);
    VAR
      PurchLineInst@1500000 : Record 39;
      LastLineNo@1500001 : Integer;
    BEGIN
      PurchLineInst.RESET;
      PurchLineInst.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLineInst.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchLineInst.FINDLAST THEN
        LastLineNo := PurchLineInst."Line No." + 10000
      ELSE
        LastLineNo := 10000;
      IF TempServiceTaxEntry.FINDSET THEN
        REPEAT
          PurchLineInst.RESET;
          PurchLineInst.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLineInst.SETRANGE("Document No.",PurchHeader."No.");
          PurchLineInst.SETRANGE("Service Tax Group",TempServiceTaxEntry."Service Tax Group Code");
          PurchLineInst.SETRANGE("Service Tax Registration No.",TempServiceTaxEntry."Service Tax Registration No.");
          IF PurchLineInst.FINDSET THEN
            REPEAT
              WITH PurchLineInst DO BEGIN
                TempPurchLineInst.TRANSFERFIELDS(PurchLineInst);
                TempPurchLineInst."Line No." := LastLineNo;
                TempPurchLineInst.VALIDATE(Quantity,1);
                TempPurchLineInst."Service Tax Base" := -TempServiceTaxEntry."Service Tax Base Amount";
                TempPurchLineInst."Service Tax Amount" := -TempServiceTaxEntry."Service Tax Amount";
                TempPurchLineInst."Service Tax eCess Amount" := -TempServiceTaxEntry."eCess Amount";
                TempPurchLineInst."Service Tax SHE Cess Amount" := -TempServiceTaxEntry."SHE Cess Amount";
                TempPurchLineInst."Service Tax SBC Amount" := -TempServiceTaxEntry."Service Tax SBC Amount";
                TempPurchLineInst."KK Cess Amount" := -TempServiceTaxEntry."KK Cess Amount";
                IF TempServiceTaxEntry.PoT THEN BEGIN
                  TempPurchLineInst."Tot. Serv Tax Amount (Intm)" :=
                    ABS(TempPurchLineInst.FullServiceTaxAmount);

                  TempPurchLineInst."S. Tax Base Amount (Intm)" := TempPurchLineInst."Service Tax Base";
                  TempPurchLineInst."S. Tax Amount (Intm)" := TempPurchLineInst."Service Tax Amount";
                  TempPurchLineInst."S. Tax eCess Amount (Intm)" := TempPurchLineInst."Service Tax eCess Amount";
                  TempPurchLineInst."S. Tax SHE Cess Amount (Intm)" := TempPurchLineInst."Service Tax SHE Cess Amount";
                  TempPurchLineInst."Service Tax SBC Amount (Intm)" := TempPurchLineInst."Service Tax SBC Amount (Intm)";
                  TempPurchLineInst."KK Cess Amount (Intm)" := TempPurchLineInst."KK Cess Amount (Intm)";

                END;
                IF NOT TempServiceTaxEntry."Reverse Charge" AND (PurchHeader.PoT <> TempServiceTaxEntry.PoT) THEN
                  ERROR(Text16524,PurchHeader."No.",TempServiceTaxEntry."Document No.");
                TempPurchLineInst.INSERT;
                IF ExecuteForStatistics THEN BEGIN
                  Increment(TotalPurchLine."Amount To Vendor",-TotalPurchLine."Service Tax Amount" -
                    TotalPurchLine."Service Tax eCess Amount" - TotalPurchLine."Service Tax SHE Cess Amount" -
                    TotalPurchLine."Service Tax SBC Amount" - TotalPurchLine."KK Cess Amount");
                  Increment(TotalPurchLine."Service Tax Amount",TempPurchLineInst."Service Tax Amount");
                  Increment(TotalPurchLine."Service Tax eCess Amount",TempPurchLineInst."Service Tax eCess Amount");
                  Increment(TotalPurchLine."Service Tax SHE Cess Amount",TempPurchLineInst."Service Tax SHE Cess Amount");
                  Increment(TotalPurchLine."Service Tax SBC Amount",TempPurchLineInst."Service Tax SBC Amount");
                  Increment(TotalPurchLine."KK Cess Amount",TempPurchLineInst."KK Cess Amount");
                  IF (TotalPurchLine.FullServiceTaxAmount + TotalPurchLine.FullServiceTaxSBCAmount + TotalPurchLine.KKCessAmount) < 0
                  THEN BEGIN
                    Increment(TotalPurchLine."Service Tax Amount",-TotalPurchLine."Service Tax Amount");
                    Increment(TotalPurchLine."Service Tax eCess Amount",-TotalPurchLine."Service Tax eCess Amount");
                    Increment(TotalPurchLine."Service Tax SHE Cess Amount",-TotalPurchLine."Service Tax SHE Cess Amount");
                    Increment(TotalPurchLine."Service Tax SBC Amount",-TotalPurchLine."Service Tax SBC Amount");
                    Increment(TotalPurchLine."KK Cess Amount",-TotalPurchLine."KK Cess Amount");
                  END;
                  Increment(TotalPurchLine."Amount To Vendor",TotalPurchLine.FullServiceTaxAmount +
                    TotalPurchLine."Service Tax SBC Amount" + TotalPurchLine."KK Cess Amount");
                END ELSE
                  FillSvcTaxApplication2(TempPurchLineInst);
                TempServiceTaxEntry."Service Tax Amount" := 0;
                TempServiceTaxEntry."SHE Cess Amount" := 0;
                TempServiceTaxEntry."eCess Amount" := 0;
                TempServiceTaxEntry."Service Tax SBC Amount" := 0;
                TempServiceTaxEntry."KK Cess Amount" := 0;
                LastLineNo += 10000;
              END;
            UNTIL PurchLineInst.NEXT = 0
          ELSE
            IF NOT ExecuteForStatistics THEN BEGIN
              IF TotalPurchLine."Service Tax Amount" = 0 THEN
                ERROR(Text16519);
              PurchLineInst.SETRANGE("Service Tax Group",TempServiceTaxEntry."Service Tax Group Code");
              PurchLineInst.SETRANGE("Service Tax Registration No.");
              IF NOT PurchLineInst.FINDFIRST THEN
                ERROR(Text16522);
              PurchLineInst.SETRANGE("Service Tax Registration No.",TempServiceTaxEntry."Service Tax Registration No.");
              IF NOT PurchLineInst.FINDFIRST THEN
                ERROR(Text16523);
            END;
          AppliedDocIsSTPayment := TRUE;
        UNTIL TempServiceTaxEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAmtForAppln@1500023(OldVendLedgEntry@1500007 : Record 25;VAR AppliedAmount@1500005 : Decimal;VAR AppliedAmountLCY@1500004 : Decimal;OldRemainingAmtBeforeAppln@1500002 : Decimal;ApplnRoundingPrecision@1500000 : Decimal;AmountforAppl@1500006 : Decimal);
    VAR
      OldAppliedAmount@1500003 : Decimal;
      CurrExchRate@1000 : Record 330;
    BEGIN
      IF OldVendLedgEntry.GETFILTER(Positive) <> '' THEN BEGIN
        IF OldVendLedgEntry."Amount to Apply" <> 0 THEN
          AppliedAmount := -OldVendLedgEntry."Amount to Apply"
        ELSE
          AppliedAmount := -OldVendLedgEntry."Remaining Amount";
      END ELSE BEGIN
        IF OldVendLedgEntry."Amount to Apply" <> 0 THEN BEGIN
          IF (CheckCalcPmtDisc(OldVendLedgEntry,ApplnRoundingPrecision,FALSE,FALSE,AmountforAppl) AND
              (ABS(OldVendLedgEntry."Amount to Apply") >=
               ABS(OldVendLedgEntry."Remaining Amount" - OldVendLedgEntry."Remaining Pmt. Disc. Possible")) AND
              (ABS(AmountforAppl) >=
               ABS(OldVendLedgEntry."Amount to Apply" - OldVendLedgEntry."Remaining Pmt. Disc. Possible"))) OR
             OldVendLedgEntry."Accepted Pmt. Disc. Tolerance"
          THEN BEGIN
            AppliedAmount := -OldVendLedgEntry."Remaining Amount";
            OldVendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
          END ELSE BEGIN
            IF ABS(AmountforAppl) <= ABS(OldVendLedgEntry."Amount to Apply") THEN
              AppliedAmount := AmountforAppl
            ELSE
              AppliedAmount := -OldVendLedgEntry."Amount to Apply";
          END;
        END ELSE
          IF ABS(AmountforAppl) < ABS(OldVendLedgEntry."Remaining Amount") THEN
            AppliedAmount := AmountforAppl
          ELSE
            AppliedAmount := -OldVendLedgEntry."Remaining Amount";
      END;

      IF PurchHeader."Currency Code" = OldVendLedgEntry."Currency Code" THEN BEGIN
        AppliedAmountLCY := ROUND(AppliedAmount / OldVendLedgEntry."Original Currency Factor");
        OldAppliedAmount := AppliedAmount;
      END ELSE BEGIN
        // Management of posting in multiple currencies
        IF AppliedAmount = -OldVendLedgEntry."Remaining Amount" THEN
          OldAppliedAmount := -OldVendLedgEntry."Remaining Amount"
        ELSE
          OldAppliedAmount :=
            CurrExchRate.ExchangeAmount(
              AppliedAmount,PurchHeader."Currency Code",
              OldVendLedgEntry."Currency Code",PurchHeader."Posting Date");

        IF PurchHeader."Currency Code" <> '' THEN
          AppliedAmountLCY := ROUND(AppliedAmount / PurchHeader."Currency Factor")
        ELSE
          AppliedAmountLCY := ROUND(OldAppliedAmount / OldVendLedgEntry."Original Currency Factor");
      END;
    END;

    LOCAL PROCEDURE CheckCalcPmtDisc@1500016(VAR OldVendLedgEntry@1500003 : Record 25;ApplnRoundingPrecision@1500002 : Decimal;CheckFilter@1500001 : Boolean;CheckAmount@1500000 : Boolean;AmountforAppl@1500004 : Decimal) : Boolean;
    BEGIN
      IF ((OldVendLedgEntry."Document Type" = OldVendLedgEntry."Document Type"::Invoice) AND
          (PurchHeader."Posting Date" <= OldVendLedgEntry."Pmt. Discount Date"))
      THEN BEGIN
        IF CheckFilter THEN BEGIN
          IF CheckAmount THEN BEGIN
            IF (OldVendLedgEntry.GETFILTER(Positive) <> '') OR
               (ABS(AmountforAppl) + ApplnRoundingPrecision >=
                ABS(OldVendLedgEntry."Remaining Amount" - OldVendLedgEntry."Remaining Pmt. Disc. Possible"))
            THEN
              EXIT(TRUE);

            EXIT(FALSE);
          END;

          IF (OldVendLedgEntry.GETFILTER(Positive) <> '')
          THEN
            EXIT(TRUE);

          EXIT(FALSE);

        END ELSE BEGIN
          IF CheckAmount THEN BEGIN
            IF (ABS(AmountforAppl) + ApplnRoundingPrecision >=
                ABS(OldVendLedgEntry."Remaining Amount" - OldVendLedgEntry."Remaining Pmt. Disc. Possible"))
            THEN
              EXIT(TRUE);

            EXIT(FALSE);
          END;
          EXIT(TRUE);
        END;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ApplLookup@1500017(ApplLookupOk@1500000 : Boolean);
    BEGIN
      ExecuteForLookup := ApplLookupOk;
    END;

    PROCEDURE CheckAmounttoApplyofApplPmt@1500018(OldVendLedgEntry@1500001 : Record 25;ServiceTaxEntry@1500000 : Record 16473);
    VAR
      TSTaxAmount@1500010 : Decimal;
    BEGIN
      STaxPostingBuffer2.RESET;
      STaxPostingBuffer2.SETRANGE("Service Tax Group Code",ServiceTaxEntry."Service Tax Group Code");
      STaxPostingBuffer2.SETRANGE("Service Tax Registration No.",ServiceTaxEntry."Service Tax Registration No.");
      IF STaxPostingBuffer2.FINDSET THEN BEGIN
        REPEAT
          TSTaxAmount := TSTaxAmount + STaxPostingBuffer2.Amount;
          IF OldVendLedgEntry."Amount to Apply" > STaxPostingBuffer2.Amount THEN
            STaxPostingBuffer2.Amount := 0
          ELSE
            STaxPostingBuffer2.Amount := STaxPostingBuffer2.Amount - OldVendLedgEntry."Amount to Apply";
          STaxPostingBuffer2.MODIFY;
        UNTIL STaxPostingBuffer2.NEXT = 0;
        IF (STaxPostingBuffer2."Service Tax Base Amount" = ServiceTaxEntry."Service Tax Base Amount") AND
           (STaxPostingBuffer2."Service Tax Amount" = ServiceTaxEntry."Service Tax Amount") AND
           (STaxPostingBuffer2."Service Tax SBC Amount" = ServiceTaxEntry."Service Tax SBC Amount") AND
           (STaxPostingBuffer2."KK Cess Amount" = ServiceTaxEntry."KK Cess Amount") AND
           (((ServiceTaxEntry."eCess Amount" + ServiceTaxEntry."SHE Cess Amount") +
             (STaxPostingBuffer2."Service Tax eCess Amount" + STaxPostingBuffer2."Service Tax SHE Cess Amount")) > 0)
        THEN  BEGIN
          ServiceTaxRoundingAmount := (ServiceTaxEntry."eCess Amount" + ServiceTaxEntry."SHE Cess Amount") -
            (STaxPostingBuffer2."Service Tax eCess Amount" + STaxPostingBuffer2."Service Tax SHE Cess Amount");
          TSTaxAmount += ServiceTaxRoundingAmount;
        END;
        IF OldVendLedgEntry."Amount to Apply" > TSTaxAmount THEN
          ERROR(Text16520,OldVendLedgEntry."Document No.",STaxPostingBuffer2.Amount);
      END
    END;

    PROCEDURE CheckRoundingParameters@1500024(ServiceTaxEntry@1000 : Record 16473;PurchHeader@1001 : Record 38;ExecuteForStatistics@1002 : Boolean);
    BEGIN
      IF ExecuteForStatistics THEN
        EXIT;
      IF TotalPurchLine."Service Tax Amount" = 0 THEN
        EXIT;
      IF (PurchHeader."Service Tax Rounding Precision" <> ServiceTaxEntry."Service Tax Rounding Precision") OR
         (PurchHeader."Service Tax Rounding Type" <> ServiceTaxEntry."Service Tax Rounding Type")
      THEN
        ERROR(Text16521);
    END;

    PROCEDURE CheckOneGroup@1500019(PurchHeader@1500000 : Record 38) : Boolean;
    VAR
      PurchLine2@1500001 : Record 39;
      ServTaxGroupCode@1500002 : ARRAY [2] OF Code[20];
      ServTaxRegNo@1500003 : ARRAY [2] OF Code[20];
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type");
        PurchLine2.SETRANGE("Document No.","No.");
        IF PurchLine2.FINDSET THEN
          REPEAT
            IF (PurchLine2."Service Tax Group" <> '') OR (PurchLine2."Service Tax Registration No." <> '') THEN BEGIN
              IF ServTaxGroupCode[1] = '' THEN
                ServTaxGroupCode[1] := PurchLine2."Service Tax Group"
              ELSE
                ServTaxGroupCode[2] := PurchLine2."Service Tax Group";

              IF ServTaxRegNo[1] = '' THEN
                ServTaxRegNo[1] := PurchLine2."Service Tax Registration No."
              ELSE
                ServTaxRegNo[2] := PurchLine2."Service Tax Registration No.";
            END;
          UNTIL PurchLine2.NEXT = 0;
      END;
      EXIT((ServTaxGroupCode[2] <> '') OR (ServTaxRegNo[2] <> ''));
    END;

    PROCEDURE RestoreExciseForInvoicewithRec@1500120();
    BEGIN
      WITH TempPurchLine DO BEGIN
        "BED Amount" := TempPurchLine2."BED Amount";
        "AED(GSI) Amount" := TempPurchLine2."AED(GSI) Amount";
        "AED(TTA) Amount" := TempPurchLine2."AED(TTA) Amount";
        "SED Amount" := TempPurchLine2."SED Amount";
        "SAED Amount" := TempPurchLine2."SAED Amount";
        "CESS Amount" := TempPurchLine2."CESS Amount";
        "NCCD Amount" := TempPurchLine2."NCCD Amount";
        "eCess Amount" := TempPurchLine2."eCess Amount";
        "SHE Cess Amount" := TempPurchLine2."SHE Cess Amount";
        "ADET Amount" := TempPurchLine2."ADET Amount";
        "ADE Amount" := TempPurchLine2."ADE Amount";
        "ADC VAT Amount" := TempPurchLine2."ADC VAT Amount";
        "Custom eCess Amount" := TempPurchLine2."Custom eCess Amount";
        "Custom SHECess Amount" := TempPurchLine2."Custom SHECess Amount";
        "Excise Amount" := TempPurchLine2."Excise Amount";
        "Amount Including Excise" := TempPurchLine2."Amount Including Excise";
      END;
    END;

    PROCEDURE CheckExciseComponentsExist@1500069(PurchRcptHeader@1500000 : Record 120;ExciseCompAmount@1500001 : Decimal) : Boolean;
    BEGIN
      EXIT(ExciseInsertRGRegister.ConvertAmountFCY2LCY(
          PurchRcptHeader."Posting Date",
          PurchRcptHeader."Currency Code",ExciseCompAmount,
          PurchRcptHeader."Currency Factor") <> 0);
    END;

    LOCAL PROCEDURE ExecuteDetailTaxEntryInsertion@1500126(TaxGroupCode@1500128 : Code[20]) : Boolean;
    VAR
      StructureDetails@1500127 : Record 13793;
    BEGIN
      IF TaxGroupCode <> '' THEN BEGIN
        StructureDetails.RESET;
        StructureDetails.SETRANGE(Code,PurchHeader.Structure);
        StructureDetails.SETRANGE(Type,StructureDetails.Type::"Sales Tax");
        IF NOT StructureDetails.ISEMPTY THEN
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetPerUnitAmount@1500031(VAR PurchLinePerUnit@1500000 : Record 39);
    BEGIN
      WITH PurchLinePerUnit DO BEGIN
        IF (Quantity = 0) OR ("Quantity (Base)" = 0) THEN
          EXIT;
        "Excise Amount" := "Excise Amount" / "Quantity (Base)";
        Amount := Amount / "Quantity (Base)";
        "BED Amount" := "BED Amount" / "Quantity (Base)";
        "eCess Amount" := "eCess Amount" / "Quantity (Base)";
        "SHE Cess Amount" := "SHE Cess Amount" / "Quantity (Base)";
        "AED(GSI) Amount" := "AED(GSI) Amount" / "Quantity (Base)";
        "SED Amount" := "SED Amount" / "Quantity (Base)";
        "SAED Amount" := "SAED Amount" / "Quantity (Base)";
        "CESS Amount" := "CESS Amount" / "Quantity (Base)";
        "NCCD Amount" := "NCCD Amount" / "Quantity (Base)";
        "ADET Amount" := "ADET Amount" / "Quantity (Base)";
        "AED(TTA) Amount" := "AED(TTA) Amount" / "Quantity (Base)";
        "ADE Amount" := "ADE Amount" / "Quantity (Base)";
        "Excise Base Amount" := "Excise Base Amount" / "Quantity (Base)";
        "ADC VAT Amount" := "ADC VAT Amount" / "Quantity (Base)";
        "Line Amount" := "Line Amount" / "Quantity (Base)";
      END;
    END;

    PROCEDURE CalculateAppliedPmtAmtST@1500030(OldVendLedgEntry@1500001 : Record 25);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      OldVendLedgEntry.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
      ServiceTaxEntry.SETRANGE("Transaction No.",OldVendLedgEntry."Transaction No.");
      IF ServiceTaxEntry.FINDFIRST THEN
        IF (OldVendLedgEntry."Amount (LCY)" <> 0) AND (OldVendLedgEntry."Remaining Amt. (LCY)" <> 0) THEN
          AppliedServiceTaxAmountPmt +=
            ABS((OldVendLedgEntry."Remaining Amt. (LCY)" / OldVendLedgEntry."Amount (LCY)") *
                (ServiceTaxEntry.FullTaxAmount + ServiceTaxEntry.FullTaxSBCAmount + ServiceTaxEntry.KKCessAmount));
    END;

    LOCAL PROCEDURE HasServiceTax@1500027(PurchaseHeader@1500000 : Record 38) : Boolean;
    VAR
      StructureDetails@1500001 : Record 13793;
    BEGIN
      IF PurchaseHeader.Structure = '' THEN
        EXIT(FALSE);
      StructureDetails.SETRANGE(StructureDetails.Code,PurchaseHeader.Structure);
      StructureDetails.SETRANGE(StructureDetails.Type,StructureDetails.Type::"Service Tax");
      IF StructureDetails.FINDFIRST THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE CalcPOTAmtsforRevChgSplit@1500045(VAR TotalPurchLine@1500000 : Record 39;Percentage@1500001 : Integer);
    BEGIN
      // POT Part
      IF Percentage <> 100 THEN BEGIN
        TotalPurchLine."Service Tax Amount" :=
          RoundServiceTaxPrecision(TotalPurchLine."Service Tax Amount" * Percentage / 100);
        TotalPurchLine."Service Tax eCess Amount" :=
          RoundServiceTaxPrecision(TotalPurchLine."Service Tax eCess Amount" * Percentage / 100);
        TotalPurchLine."Service Tax SHE Cess Amount" :=
          RoundServiceTaxPrecision(TotalPurchLine."Service Tax SHE Cess Amount" * Percentage / 100);
        TotalPurchLine."Service Tax SBC Amount" :=
          RoundServiceTaxPrecision(TotalPurchLine."Service Tax SBC Amount" * Percentage / 100);
        TotalPurchLine."KK Cess Amount" :=
          RoundServiceTaxPrecision(TotalPurchLine."KK Cess Amount" * Percentage / 100);
      END;
    END;

    LOCAL PROCEDURE UpdateTempServiceTaxEntry@1500029(ServiceTaxEntry@1500000 : Record 16473;VAR AppliedServiceTaxAmount@1500001 : Decimal;VAR AppliedServiceTaxEcessAmount@1500002 : Decimal;VAR AppliedServiceTaxSHEcessAmount@1500003 : Decimal;VAR AppliedServiceTaxSBCAmount@1500423 : Decimal;VAR AppliedKKCessAmount@1500005 : Decimal;AmountToBeApplied@1500004 : Decimal);
    BEGIN
      WITH TempServiceTaxEntry DO BEGIN
        IF ServiceTaxEntry."Reverse Charge" THEN
          AppliedServiceTaxAmount :=  AmountToBeApplied /
            ("Amount Including Service Tax" - FullTaxAmount - FullTaxSBCAmount - KKCessAmount) * FullTaxAmount
        ELSE
          AppliedServiceTaxAmount := AmountToBeApplied / "Amount Including Service Tax" * FullTaxAmount;

        IF ServiceTaxEntry."Reverse Charge" THEN
          AppliedServiceTaxSBCAmount := AmountToBeApplied /
            ("Amount Including Service Tax" - FullTaxSBCAmount - FullTaxAmount - KKCessAmount) * FullTaxSBCAmount
        ELSE
          AppliedServiceTaxSBCAmount := AmountToBeApplied / "Amount Including Service Tax" * FullTaxSBCAmount;

        IF ServiceTaxEntry."Reverse Charge" THEN
          AppliedKKCessAmount := AmountToBeApplied /
            ("Amount Including Service Tax" - FullTaxSBCAmount - FullTaxAmount - KKCessAmount) * KKCessAmount
        ELSE
          AppliedKKCessAmount := AmountToBeApplied / "Amount Including Service Tax" * KKCessAmount;

        AppliedServiceTaxEcessAmount := AppliedServiceTaxAmount * "eCess Amount" / FullTaxAmount;
        AppliedServiceTaxSHEcessAmount := AppliedServiceTaxAmount * "SHE Cess Amount" / FullTaxAmount;

        AppliedServiceTaxAmount :=
          RoundServiceTaxPrecision(AppliedServiceTaxAmount - AppliedServiceTaxEcessAmount - AppliedServiceTaxSHEcessAmount);
        AppliedServiceTaxSHEcessAmount := RoundServiceTaxPrecision(AppliedServiceTaxSHEcessAmount);
        AppliedServiceTaxEcessAmount := RoundServiceTaxPrecision(AppliedServiceTaxEcessAmount);
        AppliedServiceTaxSBCAmount := RoundServiceTaxPrecision(AppliedServiceTaxSBCAmount);
        AppliedKKCessAmount := RoundServiceTaxPrecision(AppliedKKCessAmount);
        "Service Tax Amount" := AppliedServiceTaxAmount;
        "eCess Amount" := AppliedServiceTaxEcessAmount;
        "SHE Cess Amount" := AppliedServiceTaxSHEcessAmount;
        "Service Tax Base Amount" := AmountToBeApplied;
        "Service Tax SBC Amount" := AppliedServiceTaxSBCAmount;
        "KK Cess Amount" := AppliedKKCessAmount;
        IF NOT ServiceTaxEntry."Reverse Charge" THEN
          "Service Tax Base Amount" -= FullTaxAmount + FullTaxSBCAmount + KKCessAmount;
        "Amount Including Service Tax" := "Service Tax Base Amount" + FullTaxAmount + FullTaxSBCAmount + KKCessAmount;
      END
    END;

    LOCAL PROCEDURE UpdateTaxFormsDetails@1500100(PurchHeader@1500000 : Record 38);
    VAR
      TaxFormsDetails@1500001 : Record 13757;
    BEGIN
      IF PurchHeader."Form Code" = '' THEN
        EXIT;

      TaxFormsDetails.SETRANGE("Form Code",PurchHeader."Form Code");
      TaxFormsDetails.SETRANGE("Form No.",PurchHeader."Form No.");
      IF NOT TaxFormsDetails.ISEMPTY THEN
        TaxFormsDetails.MODIFYALL(Issued,TRUE);
    END;

    LOCAL PROCEDURE UpdateIncomingDocument@55(IncomingDocNo@1000 : Integer;PostingDate@1002 : Date;GenJnlLineDocNo@1003 : Code[20]);
    VAR
      IncomingDocument@1001 : Record 130;
    BEGIN
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocNo,PostingDate,GenJnlLineDocNo);
    END;

    LOCAL PROCEDURE CheckItemCharge@61(ItemChargeAssignmentPurch@1000 : Record 5805);
    VAR
      PurchLineForCharge@1001 : Record 39;
    BEGIN
      WITH ItemChargeAssignmentPurch DO
        CASE "Applies-to Doc. Type" OF
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice:
            IF PurchLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            THEN
              IF (PurchLineForCharge."Quantity (Base)" = PurchLineForCharge."Qty. Received (Base)") AND
                 (PurchLineForCharge."Qty. Rcd. Not Invoiced (Base)" = 0)
              THEN
                ERROR(Text062Err);
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            IF PurchLineForCharge.GET(
                 "Applies-to Doc. Type",
                 "Applies-to Doc. No.",
                 "Applies-to Doc. Line No.")
            THEN
              IF (PurchLineForCharge."Quantity (Base)" = PurchLineForCharge."Return Qty. Shipped (Base)") AND
                 (PurchLineForCharge."Ret. Qty. Shpd Not Invd.(Base)" = 0)
              THEN
                ERROR(Text062Err);
        END;
    END;

    PROCEDURE InitProgressWindow@105(PurchHeader@1000 : Record 38);
    BEGIN
      IF PurchHeader.Invoice THEN
        Window.OPEN(
          '#1#################################\\' +
          Text005 +
          Text006 +
          Text007 +
          Text008)
      ELSE
        Window.OPEN(
          '#1############################\\' +
          Text009);

      Window.UPDATE(1,STRSUBSTNO('%1 %2',PurchHeader."Document Type",PurchHeader."No."));
    END;

    PROCEDURE SetPreviewMode@74(NewPreviewMode@1000 : Boolean);
    BEGIN
      PreviewMode := NewPreviewMode;
    END;

    LOCAL PROCEDURE UpdateQtyPerUnitOfMeasure@63(VAR PurchLine@1000 : Record 39);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      IF PurchLine."Qty. per Unit of Measure" = 0 THEN
        IF (PurchLine.Type = PurchLine.Type::Item) AND
           (PurchLine."Unit of Measure" <> '') AND
           ItemUnitOfMeasure.GET(PurchLine."No.",PurchLine."Unit of Measure")
        THEN
          PurchLine."Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure"
        ELSE
          PurchLine."Qty. per Unit of Measure" := 1;
    END;

    LOCAL PROCEDURE UpdateQtyToBeInvoiced@101(VAR QtyToBeInvoiced@1000 : Decimal;VAR QtyToBeInvoicedBase@1001 : Decimal;TrackingSpecificationExists@1002 : Boolean;PurchLine@1003 : Record 39;PurchRcptLine@1004 : Record 121;InvoicingTrackingSpecification@1006 : Record 336);
    BEGIN
      IF PurchLine."Qty. to Invoice" * PurchRcptLine.Quantity < 0 THEN
        PurchLine.FIELDERROR("Qty. to Invoice",Text012);
      IF TrackingSpecificationExists THEN BEGIN
        QtyToBeInvoiced := InvoicingTrackingSpecification."Qty. to Invoice";
        QtyToBeInvoicedBase := InvoicingTrackingSpecification."Qty. to Invoice (Base)";
      END ELSE BEGIN
        QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Qty. to Receive";
        QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Qty. to Receive (Base)";
      END;
      IF ABS(QtyToBeInvoiced) > ABS(PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced") THEN BEGIN
        QtyToBeInvoiced := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
        QtyToBeInvoicedBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
      END;
    END;

    LOCAL PROCEDURE UpdateRemainingQtyToBeInvoiced@102(VAR RemQtyToInvoiceCurrLine@1000 : Decimal;VAR RemQtyToInvoiceCurrLineBase@1001 : Decimal;PurchRcptLine@1002 : Record 121);
    BEGIN
      RemQtyToInvoiceCurrLine := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
      RemQtyToInvoiceCurrLineBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
      IF RemQtyToInvoiceCurrLine > RemQtyToBeInvoiced THEN BEGIN
        RemQtyToInvoiceCurrLine := RemQtyToBeInvoiced;
        RemQtyToInvoiceCurrLineBase := RemQtyToBeInvoicedBase;
      END;
    END;

    LOCAL PROCEDURE GetCountryCode@75(SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36) : Code[10];
    VAR
      SalesShipmentHeader@1003 : Record 110;
    BEGIN
      IF SalesLine."Shipment No." <> '' THEN BEGIN
        SalesShipmentHeader.GET(SalesLine."Shipment No.");
        EXIT(
          GetCountryRegionCode(
            SalesLine."Sell-to Customer No.",
            SalesShipmentHeader."Ship-to Code",
            SalesShipmentHeader."Sell-to Country/Region Code"));
      END;
      EXIT(
        GetCountryRegionCode(
          SalesLine."Sell-to Customer No.",
          SalesHeader."Ship-to Code",
          SalesHeader."Sell-to Country/Region Code"));
    END;

    LOCAL PROCEDURE GetCountryRegionCode@103(CustNo@1001 : Code[20];ShipToCode@1002 : Code[10];SellToCountryRegionCode@1003 : Code[10]) : Code[10];
    VAR
      ShipToAddress@1000 : Record 222;
    BEGIN
      IF ShipToCode <> '' THEN BEGIN
        ShipToAddress.GET(CustNo,ShipToCode);
        EXIT(ShipToAddress."Country/Region Code");
      END;
      EXIT(SellToCountryRegionCode);
    END;

    LOCAL PROCEDURE CheckItemReservDisruption@104();
    VAR
      Item@1000 : Record 27;
      AvailableQty@1001 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) OR
           (Type <> Type::Item) OR
           NOT ("Return Qty. to Ship (Base)" > 0)
        THEN
          EXIT;

        IF Nonstock OR
           "Special Order" OR
           "Drop Shipment" OR
           IsServiceItem OR
           TempSKU.GET("Location Code","No.","Variant Code") // Warn against item
        THEN
          EXIT;

        Item.GET("No.");
        Item.SETFILTER("Location Filter","Location Code");
        Item.SETFILTER("Variant Filter","Variant Code");
        Item.CALCFIELDS("Reserved Qty. on Inventory","Net Change");
        CALCFIELDS("Reserved Qty. (Base)");
        AvailableQty := Item."Net Change" - (Item."Reserved Qty. on Inventory" - "Reserved Qty. (Base)");

        IF (Item."Reserved Qty. on Inventory" > 0) AND
           (AvailableQty < "Return Qty. to Ship (Base)") AND
           (Item."Reserved Qty. on Inventory" > ABS("Reserved Qty. (Base)"))
        THEN BEGIN
          InsertTempSKU("Location Code","No.","Variant Code");
          IF NOT CONFIRM(
               Text061Qst,FALSE,FIELDCAPTION("No."),Item."No.",FIELDCAPTION("Location Code"),
               "Location Code",FIELDCAPTION("Variant Code"),"Variant Code")
          THEN
            ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE InsertTempSKU@106(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    BEGIN
      WITH TempSKU DO BEGIN
        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteReservationEntryRelateJobNo@66(DocumentType@1004 : Option;DocumentNo@1000 : Code[20];LineNo@1001 : Integer;JobNo@1003 : Code[20]);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      IF JobNo = '' THEN
        EXIT;

      WITH ReservationEntry DO BEGIN
        SETRANGE("Source ID",DocumentNo);
        SETRANGE("Source Ref. No.",LineNo);
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",DocumentType);
        SETRANGE("Reservation Status","Reservation Status"::Surplus);
        IF DocumentType = PurchLine."Document Type"::Order THEN
          SETRANGE(Positive,FALSE);
        IF DocumentType = PurchLine."Document Type"::"Return Order" THEN
          SETRANGE(Positive,TRUE);
        DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchLineDimSetIDFromAppliedEntry@67(VAR PurchLineToPost@1000 : Record 39;PurchLine@1001 : Record 39);
    VAR
      ItemLedgEntry@1002 : Record 32;
      DimensionMgt@1003 : Codeunit 408;
      DimSetID@1004 : ARRAY [10] OF Integer;
    BEGIN
      DimSetID[1] := PurchLine."Dimension Set ID";
      WITH PurchLineToPost DO BEGIN
        IF "Appl.-to Item Entry" <> 0 THEN BEGIN
          ItemLedgEntry.GET("Appl.-to Item Entry");
          DimSetID[2] := ItemLedgEntry."Dimension Set ID";
        END;
        "Dimension Set ID" :=
          DimensionMgt.GetCombinedDimensionSetID(DimSetID,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      END;
    END;

    LOCAL PROCEDURE CalcTaxAmountOnDetailedTaxEntry@1500032(VAR DetailedTaxEntry@1500000 : Record 16522;PurchaseHeader@1500003 : Record 38;Quantity@1500004 : Decimal);
    VAR
      TaxBaseAmount@1500001 : Decimal;
      NeedCurrencyConversion@1500002 : Boolean;
      CurrExchRate@1000 : Record 330;
    BEGIN
      NeedCurrencyConversion := (PurchaseHeader."Currency Factor" <> 1) AND (PurchaseHeader."Currency Factor" <> 0);
      WITH DetailedTaxEntry DO BEGIN
        // If We have Tax Base Amount in LCY here.
        // Then we need revert it to initial amount in currency of the document.
        IF NeedCurrencyConversion THEN
          TaxBaseAmount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Posting Date",PurchaseHeader."Currency Code",
              "Tax Base Amount",1 / PurchaseHeader."Currency Factor")
        ELSE
          TaxBaseAmount := "Tax Base Amount";
        // Then calculate Tax Amount for "Line Amount"
        "Tax Amount" :=
          IndianSalesTaxCalculate.CalculateTaxDetail(
            "Tax Area Code","Tax Jurisdiction Code","Tax Group Code",PurchLine."Tax Liable","Posting Date",
            ROUND(TaxBaseAmount),Quantity,"Form Code","Tax %");
        // And then convert to LCY like in RoundAmount function.
        IF NeedCurrencyConversion THEN
          "Tax Amount" :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              "Posting Date",PurchaseHeader."Currency Code",
              "Tax Amount",PurchaseHeader."Currency Factor");
      END;
    END;

    LOCAL PROCEDURE CheckCertificateOfSupplyStatus@188(ReturnShptHeader@1000 : Record 6650;ReturnShptLine@1001 : Record 6651);
    VAR
      CertificateOfSupply@1002 : Record 780;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      IF ReturnShptLine.Quantity <> 0 THEN
        IF VATPostingSetup.GET(ReturnShptHeader."VAT Bus. Posting Group",ReturnShptLine."VAT Prod. Posting Group") AND
           VATPostingSetup."Certificate of Supply Required"
        THEN BEGIN
          CertificateOfSupply.InitFromPurchase(ReturnShptHeader);
          CertificateOfSupply.SetRequired(ReturnShptHeader."No.")
        END;
    END;

    LOCAL PROCEDURE CheckSalesCertificateOfSupplyStatus@69(SalesShptHeader@1001 : Record 110;SalesShptLine@1000 : Record 111);
    VAR
      CertificateOfSupply@1002 : Record 780;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      IF SalesShptLine.Quantity <> 0 THEN
        IF VATPostingSetup.GET(SalesShptHeader."VAT Bus. Posting Group",SalesShptLine."VAT Prod. Posting Group") AND
           VATPostingSetup."Certificate of Supply Required"
        THEN BEGIN
          CertificateOfSupply.InitFromSales(SalesShptHeader);
          CertificateOfSupply.SetRequired(SalesShptHeader."No.");
        END;
    END;

    LOCAL PROCEDURE InsertReceiptHeader@71(VAR PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchRcptHeader.INIT;
        PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
        PurchRcptHeader."No." := "Receiving No.";
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          PurchRcptHeader."Order No. Series" := "No. Series";
          PurchRcptHeader."Order No." := "No.";
        END;
        PurchRcptHeader."No. Printed" := 0;
        PurchRcptHeader."Source Code" := SrcCode;
        PurchRcptHeader."User ID" := USERID;
        PurchRcptHeader.INSERT;

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchRcptHeader.RECORDID,PurchRcptHeader."No.");

        IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::Receipt,
            "No.",PurchRcptHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchRcptHeader);
        END;
        IF WhseReceive THEN BEGIN
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Receiving No.","Posting Date");
        END;
        IF WhseShip THEN BEGIN
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Receiving No.","Posting Date");
        END;

        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              GateEntryAttachment.SETRANGE("Source Type",GateEntryAttachment."Source Type"::"Purchase Order");
              GateEntryAttachment.SETRANGE("Source No.","No.");
            END;
           "Document Type"::Invoice:
              GateEntryAttachment.SETRANGE("Purchase Invoice No.","No.");
        END;
        IF GateEntryAttachment.FIND('-') THEN
          REPEAT
            PostedGateEntryAttachment.INIT;
            PostedGateEntryAttachment.TRANSFERFIELDS(GateEntryAttachment);
            PostedGateEntryAttachment."Receipt No." := "Receiving No.";
            PostedGateEntryAttachment.INSERT;
            PostedGateEntryLine.GET(GateEntryAttachment."Entry Type",GateEntryAttachment."Gate Entry No.",
                        GateEntryAttachment."Line No.");
            PostedGateEntryLine.TESTFIELD(Status,PostedGateEntryLine.Status::Open);
            PostedGateEntryLine.Status := PostedGateEntryLine.Status::Close;
            PostedGateEntryLine.MODIFY;
          UNTIL GateEntryAttachment.NEXT = 0;
        GateEntryAttachment.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertReturnShipmentHeader@73(VAR PurchHeader@1000 : Record 38;VAR ReturnShptHeader@1001 : Record 6650);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        ReturnShptHeader.INIT;
        ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
        ReturnShptHeader."No." := "Return Shipment No.";
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          ReturnShptHeader."Return Order No. Series" := "No. Series";
          ReturnShptHeader."Return Order No." := "No.";
        END;
        ReturnShptHeader."No. Series" := "Return Shipment No. Series";
        ReturnShptHeader."No. Printed" := 0;
        ReturnShptHeader."Source Code" := SrcCode;
        ReturnShptHeader."User ID" := USERID;
        ReturnShptHeader.INSERT;

        ApprovalsMgmt.PostApprovalEntries(RECORDID,ReturnShptHeader.RECORDID,ReturnShptHeader."No.");

        IF PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" THEN BEGIN
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::"Posted Return Shipment",
            "No.",ReturnShptHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,ReturnShptHeader);
        END;
        IF WhseShip THEN BEGIN
          WhseShptHeader.GET(TempWhseShptHeader."No.");
          WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Shipment No.","Posting Date");
        END;
        IF WhseReceive THEN BEGIN
          WhseRcptHeader.GET(TempWhseRcptHeader."No.");
          WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Shipment No.","Posting Date");
        END;
      END;
    END;

    LOCAL PROCEDURE InsertInvoiceHeader@87(VAR PurchHeader@1000 : Record 38;VAR PurchInvHeader@1001 : Record 122);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchInvHeader.INIT;
        PurchInvHeader.TRANSFERFIELDS(PurchHeader);
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          PurchInvHeader."Pre-Assigned No. Series" := '';
          IF PreviewMode THEN
            PurchInvHeader."No." := '***'
          ELSE
            PurchInvHeader."No." := "Posting No.";
          PurchInvHeader."Order No. Series" := "No. Series";
          PurchInvHeader."Order No." := "No.";
          IF GUIALLOWED THEN
            Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",PurchInvHeader."No."));
        END ELSE BEGIN
          IF "Posting No." <> '' THEN BEGIN
            PurchInvHeader."No." := "Posting No.";
            IF GUIALLOWED THEN
              Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",PurchInvHeader."No."));
          END;
          PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
          PurchInvHeader."Pre-Assigned No." := "No.";
        END;
        PurchInvHeader."Creditor No." := "Creditor No.";
        PurchInvHeader."Payment Reference" := "Payment Reference";
        PurchInvHeader."Payment Method Code" := "Payment Method Code";
        PurchInvHeader."Source Code" := SrcCode;
        PurchInvHeader."User ID" := USERID;
        PurchInvHeader."No. Printed" := 0;
        PurchInvHeader.INSERT;

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchInvHeader.RECORDID,PurchInvHeader."No.");
        IF PurchSetup."Copy Comments Order to Invoice" THEN BEGIN
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::"Posted Invoice",
            "No.",PurchInvHeader."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchInvHeader);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertCrMemoHeader@88(VAR PurchHeader@1000 : Record 38;VAR PurchCrMemoHdr@1001 : Record 124);
    VAR
      PurchCommentLine@1002 : Record 43;
      RecordLinkManagement@1003 : Codeunit 447;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchCrMemoHdr.INIT;
        PurchCrMemoHdr.TRANSFERFIELDS(PurchHeader);
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          PurchCrMemoHdr."No." := "Posting No.";
          PurchCrMemoHdr."Pre-Assigned No. Series" := '';
          PurchCrMemoHdr."Return Order No. Series" := "No. Series";
          PurchCrMemoHdr."Return Order No." := "No.";
          IF GUIALLOWED THEN
            Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHdr."No."));
        END ELSE BEGIN
          PurchCrMemoHdr."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHdr."Pre-Assigned No." := "No.";
          IF "Posting No." <> '' THEN BEGIN
            PurchCrMemoHdr."No." := "Posting No.";
            IF GUIALLOWED THEN
              Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHdr."No."));
          END;
        END;
        PurchCrMemoHdr."Source Code" := SrcCode;
        PurchCrMemoHdr."User ID" := USERID;
        PurchCrMemoHdr."No. Printed" := 0;
        PurchCrMemoHdr."Subcon. Order No." := "Subcon. Order No.";
        PurchCrMemoHdr."Subcon. Order Line No." := "Subcon. Order Line No.";
        PurchCrMemoHdr.INSERT(TRUE);

        ApprovalsMgmt.PostApprovalEntries(RECORDID,PurchCrMemoHdr.RECORDID,PurchCrMemoHdr."No.");

        IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
          CopyCommentLines(
            "Document Type",PurchCommentLine."Document Type"::"Posted Credit Memo",
            "No.",PurchCrMemoHdr."No.");
          RecordLinkManagement.CopyLinks(PurchHeader,PurchCrMemoHdr);
        END;
      END;
    END;

    LOCAL PROCEDURE GetSign@90(Value@1000 : Decimal) : Integer;
    BEGIN
      IF Value > 0 THEN
        EXIT(1);

      EXIT(-1);
    END;

    LOCAL PROCEDURE CheckICDocumentDuplicatePosting@65(PurchHeader@1000 : Record 38);
    VAR
      PurchHeader2@1001 : Record 38;
      ICInboxPurchHeader@1002 : Record 436;
      PurchInvHeader@1003 : Record 122;
    BEGIN
      WITH PurchHeader DO
        IF Invoice AND ("IC Direction" = "IC Direction"::Incoming) THEN BEGIN
          IF "Document Type" = "Document Type"::Order THEN BEGIN
            PurchHeader2.SETRANGE("Document Type","Document Type"::Invoice);
            PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchHeader2.FINDFIRST THEN
              IF NOT CONFIRM(Text052Qst,TRUE,"No.",PurchHeader2."No.") THEN
                ERROR('');
            ICInboxPurchHeader.SETRANGE("Document Type","Document Type"::Invoice);
            ICInboxPurchHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF ICInboxPurchHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text053Qst,TRUE,"No.",ICInboxPurchHeader."No.") THEN
                ERROR('');
            PurchInvHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchInvHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text054Qst,FALSE,PurchInvHeader."No.","No.") THEN
                ERROR('');
          END;
          IF ("Document Type" = "Document Type"::Invoice) AND ("Vendor Order No." <> '') THEN BEGIN
            PurchHeader2.SETRANGE("Document Type","Document Type"::Order);
            PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchHeader2.FINDFIRST THEN
              IF NOT CONFIRM(Text055Qst,TRUE,PurchHeader2."No.","No.") THEN
                ERROR('');
            ICInboxPurchHeader.SETRANGE("Document Type","Document Type"::Order);
            ICInboxPurchHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF ICInboxPurchHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text056Qst,TRUE,"No.",ICInboxPurchHeader."No.") THEN
                ERROR('');
            PurchInvHeader.SETRANGE("Vendor Order No.","Vendor Order No.");
            IF PurchInvHeader.FINDFIRST THEN
              IF NOT CONFIRM(Text057Qst,FALSE,PurchInvHeader."No.","No.") THEN
                ERROR('');
          END;
        END;
    END;

    LOCAL PROCEDURE CheckICPartnerBlocked@70(PurchHeader@1000 : Record 38);
    VAR
      ICPartner@1001 : Record 413;
    BEGIN
      IF (PurchHeader."Buy-from IC Partner Code" <> '') AND ICPartner.GET(PurchHeader."Buy-from IC Partner Code") THEN
        ICPartner.TESTFIELD(Blocked,FALSE);
      IF (PurchHeader."Pay-to IC Partner Code" <> '') AND ICPartner.GET(PurchHeader."Pay-to IC Partner Code") THEN
        ICPartner.TESTFIELD(Blocked,FALSE);
    END;

    LOCAL PROCEDURE SendICDocument@77(VAR PurchHeader@1000 : Record 38;VAR ModifyHeader@1002 : Boolean);
    VAR
      ICInboxOutboxMgt@1001 : Codeunit 427;
    BEGIN
      WITH PurchHeader DO
        IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
           ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
        THEN BEGIN
          ICInboxOutboxMgt.SendPurchDoc(PurchHeader,TRUE);
          "IC Status" := "IC Status"::Pending;
          ModifyHeader := TRUE;
        END;
    END;

    LOCAL PROCEDURE UpdateHandledICInboxTransaction@100(PurchHeader@1000 : Record 38);
    VAR
      HandledICInboxTrans@1001 : Record 420;
      Vendor@1002 : Record 23;
    BEGIN
      WITH PurchHeader DO
        IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Invoice No.");
            "Document Type"::Order:
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Order No.");
            "Document Type"::"Credit Memo":
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Cr. Memo No.");
            "Document Type"::"Return Order":
              HandledICInboxTrans.SETRANGE("Document No.","Vendor Order No.");
          END;
          Vendor.GET("Buy-from Vendor No.");
          HandledICInboxTrans.SETRANGE("IC Partner Code",Vendor."IC Partner Code");
          HandledICInboxTrans.LOCKTABLE;
          IF HandledICInboxTrans.FINDFIRST THEN BEGIN
            HandledICInboxTrans.Status := HandledICInboxTrans.Status::Posted;
            HandledICInboxTrans.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE MakeInventoryAdjustment@72(JobItem@1000 : Boolean);
    VAR
      InvtSetup@1001 : Record 313;
      InvtAdjmt@1002 : Codeunit 5895;
    BEGIN
      InvtSetup.GET;
      IF InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      THEN BEGIN
        InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.SetJobUpdateProperties(NOT JobItem);
        InvtAdjmt.MakeMultiLevelAdjmt;
      END;
    END;

    LOCAL PROCEDURE PostCombineSalesOrderShipment@76(VAR SalesSetup@1000 : Record 311;VAR PurchHeader@1001 : Record 38;VAR SalesCommentLine@1002 : Record 44);
    VAR
      RecordLinkManagement@1003 : Codeunit 447;
      CFactor@1004 : Decimal;
    BEGIN
      ArchiveSalesOrders(DropShptPostBuffer);
      WITH PurchHeader DO BEGIN
        SalesSetup.GET;
        IF DropShptPostBuffer.FINDSET THEN
          REPEAT
            SalesOrderHeader.GET(
              SalesOrderHeader."Document Type"::Order,
              DropShptPostBuffer."Order No.");
            SalesShptHeader.INIT;
            SalesShptHeader.TRANSFERFIELDS(SalesOrderHeader);
            SalesShptHeader."No." := SalesOrderHeader."Shipping No.";
            SalesShptHeader."Order No." := SalesOrderHeader."No.";
            SalesShptHeader."Posting Date" := "Posting Date";
            SalesShptHeader."Document Date" := "Document Date";
            SalesShptHeader."No. Printed" := 0;
            SalesShptHeader.INSERT(TRUE);

            ApprovalsMgmt.PostApprovalEntries(RECORDID,SalesShptHeader.RECORDID,SalesShptHeader."No.");

            IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
              CopySalesCommentLines(
                SalesOrderHeader."Document Type",SalesCommentLine."Document Type"::Shipment,
                SalesOrderHeader."No.",SalesShptHeader."No.");
              RecordLinkManagement.CopyLinks(SalesOrderHeader,SalesShptHeader);
            END;
            DropShptPostBuffer.SETRANGE("Order No.",DropShptPostBuffer."Order No.");
            REPEAT
              SalesOrderLine.GET(
                SalesOrderLine."Document Type"::Order,
                DropShptPostBuffer."Order No.",DropShptPostBuffer."Order Line No.");
              SalesShptLine.INIT;
              SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
              SalesShptLine."Posting Date" := SalesShptHeader."Posting Date";
              SalesShptLine."Document No." := SalesShptHeader."No.";
              SalesShptLine.Quantity := DropShptPostBuffer.Quantity;
              SalesShptLine."Quantity (Base)" := DropShptPostBuffer."Quantity (Base)";
              SalesShptLine."Quantity Invoiced" := 0;
              SalesShptLine."Qty. Invoiced (Base)" := 0;
              SalesShptLine."Order No." := SalesOrderLine."Document No.";
              SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
              SalesShptLine."Qty. Shipped Not Invoiced" :=
                SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
              IF SalesShptLine.Quantity <> 0 THEN BEGIN
                SalesShptLine."Item Shpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
                SalesShptLine."Item Charge Base Amount" := SalesOrderLine."Line Amount";
              END;
              SalesShptLine.INSERT;
              CheckSalesCertificateOfSupplyStatus(SalesShptHeader,SalesShptLine);

              SalesOrderLine."Qty. to Ship" := SalesShptLine.Quantity;
              SalesOrderLine."Qty. to Ship (Base)" := SalesShptLine."Quantity (Base)";
              ServItemMgt.CreateServItemOnSalesLineShpt(SalesOrderHeader,SalesOrderLine,SalesShptLine);
              SalesPost.UpdateBlanketOrderLine(SalesOrderLine,TRUE,FALSE,FALSE);

              SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
              SalesOrderLine.SETRANGE("Document No.",DropShptPostBuffer."Order No.");
              SalesOrderLine.SETRANGE("Attached to Line No.",DropShptPostBuffer."Order Line No.");
              SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::" ");
              IF SalesOrderLine.FINDSET THEN
                REPEAT
                  SalesShptLine.INIT;
                  SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
                  SalesShptLine."Document No." := SalesShptHeader."No.";
                  SalesShptLine."Order No." := SalesOrderLine."Document No.";
                  SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                  SalesShptLine.INSERT;
                UNTIL SalesOrderLine.NEXT = 0;

            UNTIL DropShptPostBuffer.NEXT = 0;
            DropShptPostBuffer.SETRANGE("Order No.");
          UNTIL DropShptPostBuffer.NEXT = 0;

              IF ("LC No." <> '') AND Receive THEN BEGIN
                IF "Currency Factor" <> 0 THEN
                  CFactor := "Currency Factor"
                ELSE
                  CFactor := 1;
                LCDetail.GET("LC No.");
                IF "Expected Receipt Date" > LCDetail."Expiry Date" THEN
                  ERROR(Text13701);
                CALCFIELDS("Amount to Vendor");
                LCDetail.CALCFIELDS("Value Utilised");
                LCOrder.SETRANGE("LC No.","LC No.");
                LCOrder.SETRANGE("Order No.","No.");
                IF NOT LCOrder.FINDFIRST THEN BEGIN
                  IF ("Amount to Vendor" / CFactor) > (LCDetail."Latest Amended Value" - LCDetail."Value Utilised") THEN
                    ERROR(Text13702,"Amount to Vendor" / CFactor,(LCDetail."Latest Amended Value" - LCDetail."Value Utilised"));
                  LCOrder.INIT;
                  LCOrder."LC No." := LCDetail."No.";
                  LCOrder."Transaction Type" := LCDetail."Transaction Type";
                  LCOrder."Issued To/Received From" := LCDetail."Issued To/Received From";
                  LCOrder."Order No." := "No.";
                  LCOrder."Shipment Date" := "Expected Receipt Date";
                  LCOrder."Order Value" := "Amount to Vendor" / CFactor;
                  LCOrder.INSERT;
                END;
              END;
      END;
    END;

    LOCAL PROCEDURE SetupGenJnlLine@92(VAR PurchHeader@1000 : Record 38);
    BEGIN
      WITH PurchHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
        GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
        GenJnlLine.Amount := InvPostingBuffer[1].Amount;
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)";
        GenJnlLine.Correction := Correction;
        IF InvPostingBuffer[1].Type <> InvPostingBuffer[1].Type::"Prepmt. Exch. Rate Difference" THEN
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
        GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
        GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
        GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
        GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
        GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
        GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
        GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
        GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
        GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
        GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
        GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
        GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
        GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
        GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
        GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
        GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        GenJnlLine."Job No." := InvPostingBuffer[1]."Job No.";
        GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Sell-to/Buy-from No." := "Buy-from Vendor No.";
        GenJnlLine."Bill-to/Pay-to No." := "Pay-to Vendor No.";
        GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
        GenJnlLine."VAT Registration No." := "VAT Registration No.";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
        GenJnlLine."Source No." := "Pay-to Vendor No.";
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
        GenJnlLine."Ship-to/Order Address Code" := "Order Address Code";
        GenJnlLine."Tax Amount" := InvPostingBuffer[1]."Tax Amount";
        GenJnlLine."Tax Base Amount" := InvPostingBuffer[1]."Tax Base Amount";
        GenJnlLine."Source Curr. Tax Amount" := InvPostingBuffer[1]."Tax Amount (ACY)";
        GenJnlLine."Source Curr. Tax Base Amount" := InvPostingBuffer[1]."Src. Curr. Tax Base Amount";
        GenJnlLine."Form Code" := InvPostingBuffer[1]."Form Code";
        GenJnlLine."Form No." := InvPostingBuffer[1]."Form No.";
        GenJnlLine."VATable Purchase Tax" := InvPostingBuffer[1]."VATable Purchase Tax";
        IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";
          IF InvPostingBuffer[1]."FA Posting Type" =
             InvPostingBuffer[1]."FA Posting Type"::"Acquisition Cost"
          THEN
            GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::"Acquisition Cost";
          IF InvPostingBuffer[1]."FA Posting Type" =
             InvPostingBuffer[1]."FA Posting Type"::Maintenance
          THEN
            GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Maintenance;
          GenJnlLine."FA Posting Date" := InvPostingBuffer[1]."FA Posting Date";
          GenJnlLine."Depreciation Book Code" := InvPostingBuffer[1]."Depreciation Book Code";
          GenJnlLine."Salvage Value" := InvPostingBuffer[1]."Salvage Value";
          GenJnlLine."Depr. until FA Posting Date" := InvPostingBuffer[1]."Depr. until FA Posting Date";
          GenJnlLine."Depr. Acquisition Cost" := InvPostingBuffer[1]."Depr. Acquisition Cost";
          GenJnlLine."Maintenance Code" := InvPostingBuffer[1]."Maintenance Code";
          GenJnlLine."Insurance No." := InvPostingBuffer[1]."Insurance No.";
          GenJnlLine."Budgeted FA No." := InvPostingBuffer[1]."Budgeted FA No.";
          GenJnlLine."Duplicate in Depreciation Book" := InvPostingBuffer[1]."Duplicate in Depreciation Book";
          GenJnlLine."Use Duplication List" := InvPostingBuffer[1]."Use Duplication List";
        END;
          GenJnlLine."Non ITC Claimable Usage %" := PurchLine."Non ITC Claimable Usage %";
          GenJnlLine."Tax Amount Loaded on Inventory" := InvPostingBuffer[1]."Amount Loaded on Inventory";
          GenJnlLine."Input/Output Tax Amount" :=
                      IndianSalesTaxCalculate.RoundVATPrecision(InvPostingBuffer[1]."Input/Output Tax Amount" + PurchLineTaxAmtDiff);
          PurchLineTaxAmtDiff := 0;
          GenJnlLine.Deferment := InvPostingBuffer[1]."Capital Goods";
          GenJnlLine."VAT Entry" := (InvPostingBuffer[1]."Amount Loaded on Inventory" <> 0) OR
                      (InvPostingBuffer[1]."Input/Output Tax Amount" <> 0);
          GenJnlLine."Location Code" := "Location Code";
          GenJnlLine."Deferral Code" := InvPostingBuffer[1]."Deferral Code";
          GenJnlLine."Deferral Line No." := InvPostingBuffer[1]."Deferral Line No.";
      END;
    END;

    LOCAL PROCEDURE FindTempItemChargeAssgntPurch@96(PurchLineNo@1000 : Integer) : Boolean;
    BEGIN
      ClearItemChargeAssgntFilter;
      TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineNo);
      EXIT(TempItemChargeAssgntPurch.FINDSET);
    END;

    LOCAL PROCEDURE UpdateInvoicedQtyOnPurchRcptLine@107(VAR PurchRcptLine@1000 : Record 121;QtyToBeInvoiced@1001 : Decimal;QtyToBeInvoicedBase@1002 : Decimal);
    BEGIN
      WITH PurchRcptLine DO BEGIN
        "Quantity Invoiced" := "Quantity Invoiced" + QtyToBeInvoiced;
        "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
        "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE FillDeferralPostingBuffer@123(PurchLine@1000 : Record 39;RemainAmtToDefer@1001 : Decimal;RemainAmtToDeferACY@1002 : Decimal;DeferralAccount@1003 : Code[20];PurchAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1007 : Record 1700;
    BEGIN
      IF PurchLine."Deferral Code" <> '' THEN BEGIN
        DeferralTemplate.GET(PurchLine."Deferral Code");

        IF TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
             PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
        THEN BEGIN
          IF TempDeferralHeader."Amount to Defer" <> 0 THEN BEGIN
            TempDeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
            TempDeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
            TempDeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
            TempDeferralLine.SETRANGE("Document Type",PurchLine."Document Type");
            TempDeferralLine.SETRANGE("Document No.",PurchLine."Document No.");
            TempDeferralLine.SETRANGE("Line No.",PurchLine."Line No.");

            // The remaining amounts only need to be adjusted into the deferral account and are always reversed
            IF (RemainAmtToDefer <> 0) OR (RemainAmtToDeferACY <> 0) THEN BEGIN
              DeferralPostBuffer[1].PreparePurch(PurchLine,GenJnlLineDocNo);
              DeferralPostBuffer[1]."Amount (LCY)" := -RemainAmtToDefer;
              DeferralPostBuffer[1].Amount := -RemainAmtToDeferACY;
              DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := 0;
              DeferralPostBuffer[1]."Sales/Purch Amount" := 0;
              // DeferralPostBuffer[1].ReverseAmounts;
              DeferralPostBuffer[1]."G/L Account" := PurchAccount;
              DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
              // Remainder always goes to the Posting Date
              DeferralPostBuffer[1]."Posting Date" := PurchHeader."Posting Date";
              DeferralPostBuffer[1].Description := PurchHeader."Posting Description";
              DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
              DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
              UpdDeferralPostBuffer;
            END;

            // Add the deferral lines for each period to the deferral posting buffer merging when they are the same
            IF TempDeferralLine.FINDSET THEN
              REPEAT
                IF (TempDeferralLine."Amount (LCY)" <> 0) OR (TempDeferralLine.Amount <> 0) THEN BEGIN
                  DeferralPostBuffer[1].PreparePurch(PurchLine,GenJnlLineDocNo);
                  DeferralPostBuffer[1]."Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                  DeferralPostBuffer[1].Amount := TempDeferralLine.Amount;
                  DeferralPostBuffer[1]."Sales/Purch Amount (LCY)" := TempDeferralLine."Amount (LCY)";
                  DeferralPostBuffer[1]."Sales/Purch Amount" := TempDeferralLine.Amount;
                  IF PurchLine.IsCreditDocType THEN
                    DeferralPostBuffer[1].ReverseAmounts;
                  DeferralPostBuffer[1]."G/L Account" := PurchAccount;
                  DeferralPostBuffer[1]."Deferral Account" := DeferralAccount;
                  DeferralPostBuffer[1]."Posting Date" := TempDeferralLine."Posting Date";
                  DeferralPostBuffer[1].Description := TempDeferralLine.Description;
                  DeferralPostBuffer[1]."Period Description" := DeferralTemplate."Period Description";
                  DeferralPostBuffer[1]."Deferral Line No." := InvDefLineNo;
                  UpdDeferralPostBuffer;
                END ELSE
                  ERROR(ZeroDeferralAmtErr,PurchLine."No.",PurchLine."Deferral Code");

              UNTIL TempDeferralLine.NEXT = 0

            ELSE
              ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code");
          END ELSE
            ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code")
        END ELSE
          ERROR(NoDeferralScheduleErr,PurchLine."No.",PurchLine."Deferral Code")
      END;
    END;

    LOCAL PROCEDURE UpdDeferralPostBuffer@124();
    BEGIN
      DeferralPostBuffer[1]."Dimension Set ID" := InvPostingBuffer[1]."Dimension Set ID";
      DeferralPostBuffer[1]."Global Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
      DeferralPostBuffer[1]."Global Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";

      DeferralPostBuffer[2] := DeferralPostBuffer[1];
      IF DeferralPostBuffer[2].FIND THEN BEGIN
        DeferralPostBuffer[2].Amount += DeferralPostBuffer[1].Amount;
        DeferralPostBuffer[2]."Amount (LCY)" += DeferralPostBuffer[1]."Amount (LCY)";
        DeferralPostBuffer[2]."Sales/Purch Amount" += DeferralPostBuffer[1]."Sales/Purch Amount";
        DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" += DeferralPostBuffer[1]."Sales/Purch Amount (LCY)";
        IF STRPOS(DeferralPostBuffer[2].Description,DeferralPostBuffer[1].Description) = 0 THEN BEGIN
          IF DeferralPostBuffer[2].Description <> '' THEN
            DeferralPostBuffer[2].Description += '; ';
          DeferralPostBuffer[2].Description :=
            COPYSTR(DeferralPostBuffer[2].Description + DeferralPostBuffer[1].Description,
              1,MAXSTRLEN(DeferralPostBuffer[2].Description));
        END;
        IF NOT DeferralPostBuffer[1]."System-Created Entry" THEN
          DeferralPostBuffer[2]."System-Created Entry" := FALSE;
        IF IsCombinedDeferralZero THEN
          DeferralPostBuffer[2].DELETE
        ELSE
          DeferralPostBuffer[2].MODIFY;
      END ELSE
        DeferralPostBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE RoundDeferralsForArchive@126(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39);
    VAR
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      ArchiveManagement.RoundPurchaseDeferralsForArchive(PurchHeader,PurchLine);
    END;

    LOCAL PROCEDURE GetAmountsForDeferral@127(PurchLine@1001 : Record 39;VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR DeferralAccount@1004 : Code[20]);
    VAR
      DeferralTemplate@1005 : Record 1700;
    BEGIN
      IF PurchLine."Deferral Code" <> '' THEN BEGIN
        DeferralTemplate.GET(PurchLine."Deferral Code");
        DeferralTemplate.TESTFIELD("Deferral Account");
        DeferralAccount := DeferralTemplate."Deferral Account";

        IF TempDeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',
             PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
        THEN BEGIN
          AmtToDeferACY := TempDeferralHeader."Amount to Defer";
          AmtToDefer := TempDeferralHeader."Amount to Defer (LCY)";
        END;

        IF PurchLine.IsCreditDocType THEN BEGIN
          AmtToDefer := -AmtToDefer;
          AmtToDeferACY := -AmtToDeferACY;
        END
      END ELSE BEGIN
        AmtToDefer := 0;
        AmtToDeferACY := 0;
        DeferralAccount := '';
      END;
    END;

    LOCAL PROCEDURE DefaultGLAccount@129(DeferralCode@1000 : Code[10];AmtToDefer@1001 : Decimal;GLAccNo@1002 : Code[20];DeferralAccNo@1003 : Code[20]) : Code[20];
    BEGIN
      IF (DeferralCode <> '') AND (AmtToDefer = 0) THEN
        EXIT(DeferralAccNo);

      EXIT(GLAccNo);
    END;

    LOCAL PROCEDURE IsCombinedDeferralZero@130() : Boolean;
    BEGIN
      IF (DeferralPostBuffer[2].Amount = 0) AND (DeferralPostBuffer[2]."Amount (LCY)" = 0) AND
         (DeferralPostBuffer[2]."Sales/Purch Amount" = 0) AND (DeferralPostBuffer[2]."Sales/Purch Amount (LCY)" = 0)
      THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckMandatoryHeaderFields@128(PurchHeader@1000 : Record 38);
    BEGIN
      IF ((PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"])) AND (PurchHeader.Trading)THEN
        PurchHeader.TESTFIELD("Applies-to Doc. No.");
        PurchHeader.TESTFIELD("Document Type");
        PurchHeader.TESTFIELD("Buy-from Vendor No.");
        PurchHeader.TESTFIELD("Pay-to Vendor No.");
        PurchHeader.TESTFIELD("Posting Date");
        PurchHeader.TESTFIELD("Document Date");
    END;

    LOCAL PROCEDURE AdjustTotalAmountForDeferrals@49(PurchLine@1000 : Record 39;VAR AmtToDefer@1001 : Decimal;VAR AmtToDeferACY@1002 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalAmountACY@1004 : Decimal);
    BEGIN
      IF PurchLine."Deferral Code" <> '' THEN
        IF (AmtToDefer = TotalAmount) AND (AmtToDeferACY = TotalAmountACY) THEN BEGIN
          AmtToDefer := 0;
          AmtToDeferACY := 0;
        END ELSE BEGIN
          TotalAmount := TotalAmount - AmtToDefer;
          TotalAmountACY := TotalAmountACY - AmtToDeferACY;
        END;
    END;

    LOCAL PROCEDURE InitVATAmounts@111(PurchLine@1002 : Record 39;VAR TotalVAT@1000 : Decimal;VAR TotalVATACY@1001 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalAmountACY@1004 : Decimal);
    BEGIN
      TotalVAT := PurchLine."Amount Including VAT" - PurchLine.Amount;
      TotalVATACY := PurchLineACY."Amount Including VAT" - PurchLineACY.Amount;
      TotalAmount := PurchLine.Amount;
      TotalAmountACY := PurchLineACY.Amount;
    END;

    LOCAL PROCEDURE InitAmounts@109(PurchLine@1005 : Record 39;VAR TotalVAT@1004 : Decimal;VAR TotalVATACY@1003 : Decimal;VAR TotalAmount@1002 : Decimal;VAR TotalAmountACY@1001 : Decimal;VAR AmtToDefer@1006 : Decimal;VAR AmtToDeferACY@1007 : Decimal;VAR DeferralAccount@1008 : Code[20]);
    BEGIN
      InitVATAmounts(PurchLine,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
      GetAmountsForDeferral(PurchLine,AmtToDefer,AmtToDeferACY,DeferralAccount);
    END;

    LOCAL PROCEDURE CalcInvoiceDiscountPosting@112(PurchLine@1001 : Record 39;PurchLineACY@1000 : Record 39);
    BEGIN
      CASE PurchLine."VAT Calculation Type" OF
        PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
          InvPostingBuffer[1].CalcDiscount(
            PurchHeader."Prices Including VAT",
            -PurchLine."Inv. Discount Amount",
            -PurchLineACY."Inv. Discount Amount");
        PurchLine."VAT Calculation Type"::"Reverse Charge VAT":
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -PurchLine."Inv. Discount Amount",
            -PurchLineACY."Inv. Discount Amount");
        PurchLine."VAT Calculation Type"::"Sales Tax":
          IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Inv. Discount Amount",
              -PurchLineACY."Inv. Discount Amount")
          ELSE
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Inv. Discount Amount",
              -PurchLineACY."Inv. Discount Amount");
      END;
    END;

    LOCAL PROCEDURE CalcLineDiscountPosting@110(PurchLine@1001 : Record 39;PurchLineACY@1000 : Record 39);
    BEGIN
      CASE PurchLine."VAT Calculation Type" OF
        PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
          InvPostingBuffer[1].CalcDiscount(
            PurchHeader."Prices Including VAT",
            -PurchLine."Line Discount Amount",
            -PurchLineACY."Line Discount Amount");
        PurchLine."VAT Calculation Type"::"Reverse Charge VAT":
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -PurchLine."Line Discount Amount",
            -PurchLineACY."Line Discount Amount");
        PurchLine."VAT Calculation Type"::"Sales Tax":
          IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Line Discount Amount",
              -PurchLineACY."Line Discount Amount")
          ELSE
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Line Discount Amount",
              -PurchLineACY."Line Discount Amount");
      END;
    END;

    LOCAL PROCEDURE ClearPostBuffers@113();
    BEGIN
      CLEAR(WhsePostRcpt);
      CLEAR(WhsePostShpt);
      CLEAR(GenJnlPostLine);
      CLEAR(JobPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(WhseJnlPostLine);
    END;

    LOCAL PROCEDURE ValidatePostingAndDocumentDate@119(VAR PurchaseHeader@1000 : Record 38);
    VAR
      ModifyHeader@1001 : Boolean;
    BEGIN
      IF PostingDateExists AND (ReplacePostingDate OR (PurchaseHeader."Posting Date" = 0D)) THEN BEGIN
        PurchaseHeader."Posting Date" := PostingDate;
        PurchaseHeader.VALIDATE("Currency Code");
        ModifyHeader := TRUE;
      END;

      IF PostingDateExists AND (ReplaceDocumentDate OR (PurchaseHeader."Document Date" = 0D)) THEN BEGIN
        PurchaseHeader.VALIDATE("Document Date",PostingDate);
        ModifyHeader := TRUE;
      END;

      IF ModifyHeader THEN
        PurchaseHeader.MODIFY;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostPurchaseDoc@114(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostCommitPurchaseDoc@115(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PreviewMode@1002 : Boolean;ModifyHeader@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterPostPurchaseDoc@116(VAR PurchaseHeader@1000 : Record 38;VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    BEGIN
    END;

    LOCAL PROCEDURE CheckExternalDocumentNumber@117(VAR VendLedgEntry@1001 : Record 25;VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("External Document No.");
      VendLedgEntry.SETRANGE("Document Type",GenJnlLineDocType);
      VendLedgEntry.SETRANGE("External Document No.",GenJnlLineExtDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",PurchaseHeader."Pay-to Vendor No.");
      VendLedgEntry.SETRANGE(Reversed,FALSE);
      IF VendLedgEntry.FINDFIRST THEN
        ERROR(
          Text016,
          VendLedgEntry."Document Type",GenJnlLineExtDocNo);
    END;

    LOCAL PROCEDURE RoundExciseAmountsOnPurchLine@1500000(VAR PurchaseLine@1500000 : Record 39);
    BEGIN
      WITH PurchaseLine DO BEGIN
        "Excise Amount" := RoundExcisePrecision("Excise Amount");
        "CESS Amount" := RoundExcisePrecision("CESS Amount");
        "BED Amount" := RoundExcisePrecision("BED Amount");
        "AED(GSI) Amount" := RoundExcisePrecision("AED(GSI) Amount");
        "AED(TTA) Amount" := RoundExcisePrecision("AED(TTA) Amount");
        "SED Amount" := RoundExcisePrecision("SED Amount");
        "SAED Amount" := RoundExcisePrecision("SAED Amount");
        "NCCD Amount" := RoundExcisePrecision("NCCD Amount");
        "eCess Amount" := RoundExcisePrecision("eCess Amount");
        "SHE Cess Amount" := RoundExcisePrecision("SHE Cess Amount");
        "ADET Amount" := RoundExcisePrecision("ADET Amount");
        "ADE Amount" := RoundExcisePrecision("ADE Amount");
        "Custom eCess Amount" := RoundExcisePrecision("Custom eCess Amount");
        "Custom SHECess Amount" := RoundExcisePrecision("Custom SHECess Amount");
        "ADC VAT Amount" := RoundExcisePrecision("ADC VAT Amount");
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CheckDeferralPosting@157(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER("Qty. to Invoice",'<>%1',0);
      PurchaseLine.SETFILTER("Deferral Code",'<>%1','');
      IF PurchaseLine.FINDSET THEN
        REPEAT
          IF PurchaseLine."Line Discount Amount" <> 0 THEN
            ERROR(
              STRSUBSTNO(
                CannotPostDiscountDeferralErr,
                PurchaseLine."Line No.",PurchaseLine.FIELDCAPTION("Line Discount Amount")));
          IF PurchaseLine."Inv. Discount Amount" <> 0 THEN
            ERROR(
              STRSUBSTNO(
                CannotPostDiscountDeferralErr,
                PurchaseLine."Line No.",
                PurchaseLine.FIELDCAPTION("Inv. Discount Amount")));
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreatePostedDeferralScheduleFromPurchDoc@169(PurchLine@1008 : Record 39;NewDocumentType@1007 : Integer;NewDocumentNo@1003 : Code[20];NewLineNo@1002 : Integer;PostingDate@1000 : Date);
    VAR
      PostedDeferralHeader@1006 : Record 1704;
      PostedDeferralLine@1005 : Record 1705;
      DeferralTemplate@1004 : Record 1700;
      DeferralAccount@1001 : Code[20];
    BEGIN
      IF DeferralTemplate.GET(PurchLine."Deferral Code") THEN
        DeferralAccount := DeferralTemplate."Deferral Account";

      IF TempDeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType,'','',PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
      THEN BEGIN
        PostedDeferralHeader.InitFromDeferralHeader(TempDeferralHeader,'','',NewDocumentType,
          NewDocumentNo,NewLineNo,DeferralAccount,PurchLine."Buy-from Vendor No.",PostingDate);
        WITH TempDeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",PurchLine."Document Type");
          SETRANGE("Document No.",PurchLine."Document No.");
          SETRANGE("Line No.",PurchLine."Line No.");
          IF FINDSET THEN BEGIN
            REPEAT
              PostedDeferralLine.InitFromDeferralLine(
                TempDeferralLine,'','',NewDocumentType,NewDocumentNo,NewLineNo,DeferralAccount);
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcDeferralAmounts@173(PurchHeader@1000 : Record 38;PurchLine@1003 : Record 39;OriginalDeferralAmount@1002 : Decimal);
    VAR
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1005 : Record 1702;
      CurrExchRate@1006 : Record 330;
      TotalAmountLCY@1009 : Decimal;
      TotalAmount@1010 : Decimal;
      TotalDeferralCount@1007 : Integer;
      DeferralCount@1008 : Integer;
      UseDate@1001 : Date;
    BEGIN
      // Populate temp and calculate the LCY amounts for posting
      IF PurchHeader."Posting Date" = 0D THEN
        UseDate := WORKDATE
      ELSE
        UseDate := PurchHeader."Posting Date";

      IF DeferralHeader.GET(
           DeferralUtilities.GetPurchDeferralDocType,'','',PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.")
      THEN BEGIN
        TempDeferralHeader := DeferralHeader;
        IF PurchLine.Quantity <> PurchLine."Qty. to Invoice" THEN
          TempDeferralHeader."Amount to Defer" :=
            ROUND(TempDeferralHeader."Amount to Defer" *
              PurchLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");
        TempDeferralHeader."Amount to Defer (LCY)" :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              UseDate,PurchHeader."Currency Code",
              TempDeferralHeader."Amount to Defer",PurchHeader."Currency Factor"));
        TempDeferralHeader.INSERT;

        WITH DeferralLine DO BEGIN
          SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
          SETRANGE("Gen. Jnl. Template Name",'');
          SETRANGE("Gen. Jnl. Batch Name",'');
          SETRANGE("Document Type",PurchLine."Document Type");
          SETRANGE("Document No.",PurchLine."Document No.");
          SETRANGE("Line No.",PurchLine."Line No.");
          IF FINDSET THEN BEGIN
            TotalDeferralCount := COUNT;
            REPEAT
              TempDeferralLine.INIT;
              TempDeferralLine := DeferralLine;
              DeferralCount := DeferralCount + 1;

              IF DeferralCount = TotalDeferralCount THEN BEGIN
                TempDeferralLine.Amount := TempDeferralHeader."Amount to Defer" - TotalAmount;
                TempDeferralLine."Amount (LCY)" := TempDeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
              END ELSE BEGIN
                IF PurchLine.Quantity <> PurchLine."Qty. to Invoice" THEN
                  TempDeferralLine.Amount :=
                    ROUND(TempDeferralLine.Amount *
                      PurchLine.GetDeferralAmount / OriginalDeferralAmount,Currency."Amount Rounding Precision");

                TempDeferralLine."Amount (LCY)" :=
                  ROUND(
                    CurrExchRate.ExchangeAmtFCYToLCY(
                      UseDate,PurchHeader."Currency Code",
                      TempDeferralLine.Amount,PurchHeader."Currency Factor"));
                TotalAmount := TotalAmount + TempDeferralLine.Amount;
                TotalAmountLCY := TotalAmountLCY + TempDeferralLine."Amount (LCY)";
              END;
              TempDeferralLine.INSERT;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWhseRqst@120(PurchaseHeader@1001 : Record 38);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WarehouseRequest.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
      WarehouseRequest.SETRANGE("Source Subtype",PurchaseHeader."Document Type");
      WarehouseRequest.SETRANGE("Source No.",PurchaseHeader."No.");
      IF NOT WarehouseRequest.ISEMPTY THEN
        WarehouseRequest.DELETEALL;
    END;

    LOCAL PROCEDURE GetAmountRoundingPrecisionInLCY@118(CurrencyCode@1000 : Code[10]) AmountRoundingPrecision : Decimal;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(GLSetup."Amount Rounding Precision");
      AmountRoundingPrecision := Currency."Amount Rounding Precision" / PurchHeader."Currency Factor";
      IF AmountRoundingPrecision < GLSetup."Amount Rounding Precision" THEN
        EXIT(GLSetup."Amount Rounding Precision");
      EXIT(AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE ArchiveSalesOrders@180(VAR TempDropShptPostBuffer@1000 : TEMPORARY Record 223);
    VAR
      SalesOrderHeader@1002 : Record 36;
      SalesOrderLine@1001 : Record 37;
    BEGIN
      IF TempDropShptPostBuffer.FINDSET THEN BEGIN
        REPEAT
          SalesOrderHeader.GET(
            SalesOrderHeader."Document Type"::Order,
            TempDropShptPostBuffer."Order No.");
          TempDropShptPostBuffer.SETRANGE("Order No.",TempDropShptPostBuffer."Order No.");
          REPEAT
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              TempDropShptPostBuffer."Order No.",TempDropShptPostBuffer."Order Line No.");
            SalesOrderLine."Qty. to Ship" := TempDropShptPostBuffer.Quantity;
            SalesOrderLine."Qty. to Ship (Base)" := TempDropShptPostBuffer."Quantity (Base)";
            SalesOrderLine.MODIFY;
          UNTIL TempDropShptPostBuffer.NEXT = 0;
          SalesPost.ArchiveUnpostedOrder(SalesOrderHeader);
          TempDropShptPostBuffer.SETRANGE("Order No.");
        UNTIL TempDropShptPostBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE RoundGSTAmt@1500009(GSTAmount@1500003 : Decimal;Qty@1500002 : Decimal;TotalQty@1500001 : Decimal;CurrencyCode@1500000 : Code[10]) : Decimal;
    VAR
      GSTRoundingDirection@1500005 : Text[1];
      GSTRoundingPrecision@1500004 : Decimal;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GLSetup.GET;
        CASE GLSetup."GST Rounding Type" OF
          GLSetup."GST Rounding Type"::Nearest:
            GSTRoundingDirection := '=';
          GLSetup."GST Rounding Type"::Up:
            GSTRoundingDirection := '>';
          GLSetup."GST Rounding Type"::Down:
            GSTRoundingDirection := '<';
        END;
        IF GLSetup."GST Rounding Precision" <> 0 THEN
          GSTRoundingPrecision := GLSetup."GST Rounding Precision"
        ELSE
          GSTRoundingPrecision := 0.01;
        IF TotalQty = 0 THEN
          EXIT;
        EXIT(ROUND(GSTAmount * (Qty / TotalQty),GSTRoundingPrecision,GSTRoundingDirection));
      END;
      EXIT(ROUND(GSTAmount * (Qty / TotalQty),Currency."Amount Rounding Precision"));
    END;

    PROCEDURE RoundGSTPrecision@1500003(GSTAmount@1500000 : Decimal) : Decimal;
    VAR
      GSTRoundingDirection@1500002 : Text[1];
      GSTRoundingPrecision@1500001 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."GST Rounding Type" OF
        GLSetup."GST Rounding Type"::Nearest:
          GSTRoundingDirection := '=';
        GLSetup."GST Rounding Type"::Up:
          GSTRoundingDirection := '>';
        GLSetup."GST Rounding Type"::Down:
          GSTRoundingDirection := '<';
      END;
      IF GLSetup."GST Rounding Precision" <> 0 THEN
        GSTRoundingPrecision := GLSetup."GST Rounding Precision"
      ELSE
        GSTRoundingPrecision := 0.01;
      EXIT(ROUND(GSTAmount,GSTRoundingPrecision,GSTRoundingDirection));
    END;

    LOCAL PROCEDURE FillGSTPostingBuffer@1500033(PurchaseLine@1500005 : Record 39);
    VAR
      DetailedGSTEntryBuffer@1500010 : Record 16412;
      Vendor@1500000 : Record 23;
      GSTManagement@1500003 : Codeunit 16401;
      TranscationType@1500001 : 'Purchase,Sales,Transfer,Settlement';
      QFactor@1500002 : Decimal;
    BEGIN
      WITH PurchaseLine DO BEGIN
        Vendor.GET("Buy-from Vendor No.");
        Location.GET(PurchHeader."Location Code");
        Location.TESTFIELD("State Code");
        GSTStateCode := Location."State Code";
        DetailedGSTEntryBuffer.RESET;
        DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
        DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Purchase);
        DetailedGSTEntryBuffer.SETRANGE("Document Type","Document Type");
        DetailedGSTEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedGSTEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedGSTEntryBuffer.SETFILTER("GST Base Amount",'<>%1',0);
        IF DetailedGSTEntryBuffer.FINDSET THEN
          REPEAT
            CLEAR(GSTPostingBuffer[1]);
            GSTPostingBuffer[1]."Transaction Type" := GSTPostingBuffer[1]."Transaction Type"::Purchase;
            GSTPostingBuffer[1].Type := Type;
            GSTPostingBuffer[1]."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
            GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
            GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
            GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
            GSTPostingBuffer[1]."Bal. Account No." := '';
            GSTPostingBuffer[1]."GST Group Code"  := "GST Group Code";
            GSTPostingBuffer[1]."Party Code"  := "Buy-from Vendor No." ;
            QFactor := ABS("Qty. to Invoice" / Quantity);
            IF "GST Group Type" = "GST Group Type"::Service THEN
              GSTPostingBuffer[1]."GST Group Type" := GSTPostingBuffer[1]."GST Group Type"::Service
            ELSE
              GSTPostingBuffer[1]."GST Group Type" := GSTPostingBuffer[1]."GST Group Type"::Goods;

            IF (Type <> Type::"Charge (Item)") AND ("GST Group Type" = "GST Group Type"::Goods) AND
               (Vendor."GST Vendor Type" IN [Vendor."GST Vendor Type"::Import,
                                             Vendor."GST Vendor Type"::SEZ]) AND
              (DetailedGSTEntryBuffer."GST Assessable Value" <> 0)
            THEN
              GSTPostingBuffer[1]."GST Base Amount" := ROUND((DetailedGSTEntryBuffer."GST Assessable Value (LCY)" +
                DetailedGSTEntryBuffer."Custom Duty Amount (LCY)"),GLSetup."Amount Rounding Precision")
            ELSE
              GSTPostingBuffer[1]."GST Base Amount" := ROUND(QFactor * DetailedGSTEntryBuffer."GST Base Amount (LCY)",
                GLSetup."Amount Rounding Precision");

            IF "GST Credit" = "GST Credit"::"Non-Availment" THEN BEGIN
              IF "GST Group Type" = "GST Group Type"::Service THEN BEGIN
                GSTPostingBuffer[1]."GST Amount" :=
                  GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount (LCY)");
                IF GSTReverseChargeVendType THEN BEGIN
                  IF PurchHeader."Associated Enterprises" THEN
                    GSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTPayableAccountNo(
                        GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code")
                  ELSE
                    GSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTPayableInterimAccountNo(
                        GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code");
                  GSTPostingBuffer[1]."GST Amount" := -1 *
                    GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount (LCY)");
                END ELSE
                  IF PurchHeader."GST Input Service Distribution" THEN
                    GSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTExpenseAccountNo(GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code");
              END ELSE BEGIN
                IF NOT GSTReverseChargeVendType THEN BEGIN
                  IF PurchHeader."GST Input Service Distribution" THEN
                    GSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTExpenseAccountNo(GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code")
                  ELSE
                  GSTPostingBuffer[1]."Account No." := '';
                  GSTPostingBuffer[1]."GST Amount" :=
                    GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount (LCY)");
                END ELSE BEGIN
                  IF (PurchHeader."GST Vendor Type" = PurchHeader."GST Vendor Type"::Import) OR
                    (PurchHeader."GST Vendor Type" = PurchHeader."GST Vendor Type"::SEZ)THEN BEGIN
                    IF "GST Group Type" = "GST Group Type"::Goods THEN BEGIN
                      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                        PurchHeader."Document Type"::"Return Order"] THEN
                        GSTPostingBuffer[1]."Account No." := GSTManagement.GetGSTRefundAccountNo(GSTStateCode,
                         DetailedGSTEntryBuffer."GST Component Code")
                      ELSE
                        GSTPostingBuffer[1]."Account No." := GSTManagement.GetGSTPayableImportAccountNo;
                      IF PurchHeader."Currency Code" <> '' THEN
                        GSTPostingBuffer[1]."Custom Duty Amount" :=
                          GSTManagement.ConvertGSTAmountToLCY(
                            PurchHeader."Currency Code",
                            PurchLine."Custom Duty Amount",PurchHeader."Currency Factor",PurchHeader."Posting Date")
                      ELSE
                        GSTPostingBuffer[1]."Custom Duty Amount" := PurchaseLine."Custom Duty Amount";
                    END ELSE
                      GSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTPayableInterimAccountNo(
                        GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code");
                  END ELSE
                    GSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTPayableAccountNo(
                        GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code");
                  IF DetailedGSTEntryBuffer."GST Assessable Value" <> 0 THEN BEGIN
                    IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                      PurchHeader."Document Type"::"Return Order"] THEN
                    GSTPostingBuffer[1]."GST Amount" :=
                          1 * GSTManagement.RoundGSTPrecision(
                            (DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
                            GSTPostingBuffer[1]."GST Base Amount")
                  ELSE
                       GSTPostingBuffer[1]."GST Amount" :=
                         -1 * GSTManagement.RoundGSTPrecision(
                           (DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
                           GSTPostingBuffer[1]."GST Base Amount")
                  END ELSE
                  GSTPostingBuffer[1]."GST Amount" := -1 *
                    GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount (LCY)");

                END;
              END;
            END ELSE BEGIN
              GSTPostingBuffer[1]."Account No." :=
                GSTManagement.GetGSTAccountNo(
                  GSTStateCode,DetailedGSTEntryBuffer."GST Component Code",TranscationType::Purchase,
                  PurchaseLine.Type,"GST Credit",DetailedGSTEntryBuffer."Input Service Distribution",
                  GSTManagement.GetReceivableApplicable(
                    PurchHeader."GST Vendor Type","GST Group Type",1,PurchHeader."Associated Enterprises","GST Reverse Charge"));
              IF (Type IN [Type::Item,Type::"Fixed Asset",Type::"G/L Account"]) AND
                 ("GST Group Type" = "GST Group Type"::Goods) AND
                 (Vendor."GST Vendor Type" IN [Vendor."GST Vendor Type"::Import,
                                               Vendor."GST Vendor Type"::SEZ]) AND
                 (DetailedGSTEntryBuffer."GST Assessable Value" <> 0) THEN
                IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                 PurchHeader."Document Type"::"Return Order"] THEN
                  GSTPostingBuffer[1]."GST Amount" :=
                    1 * GSTManagement.RoundGSTPrecision(
                    (DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
                    GSTPostingBuffer[1]."GST Base Amount")
                ELSE
                GSTPostingBuffer[1]."GST Amount" :=
                    -1 * GSTManagement.RoundGSTPrecision(
                    (DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
                    GSTPostingBuffer[1]."GST Base Amount")
              ELSE
              GSTPostingBuffer[1]."GST Amount" :=
                GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount (LCY)");

              IF GSTReverseChargeVendType THEN
                IF "GST Group Type" = "GST Group Type"::Service THEN
                  IF PurchHeader."Associated Enterprises" THEN
                    GSTPostingBuffer[1]."Bal. Account No." :=
                      GSTManagement.GetGSTPayableAccountNo(
                      GSTStateCode,
                      DetailedGSTEntryBuffer."GST Component Code")
                  ELSE
                    GSTPostingBuffer[1]."Bal. Account No." :=
                      GSTManagement.GetGSTPayableInterimAccountNo(
                        GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code")
                ELSE
                  IF (PurchHeader."GST Vendor Type" = PurchHeader."GST Vendor Type"::Import) OR
                    (PurchHeader."GST Vendor Type" = PurchHeader."GST Vendor Type"::SEZ)THEN
                    IF "GST Group Type" = "GST Group Type"::Goods THEN BEGIN
                      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                        PurchHeader."Document Type"::"Return Order"] THEN
                        GSTPostingBuffer[1]."Bal. Account No." := GSTManagement.GetGSTRefundAccountNo(GSTStateCode,
                         DetailedGSTEntryBuffer."GST Component Code")
                      ELSE
                        GSTPostingBuffer[1]."Bal. Account No." := GSTManagement.GetGSTPayableImportAccountNo;

                      IF DetailedGSTEntryBuffer."GST Assessable Value" <> 0 THEN BEGIN
                        IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                            PurchHeader."Document Type"::"Return Order"] THEN
                             GSTPostingBuffer[1]."GST Amount" :=
                               -1 * GSTManagement.RoundGSTPrecision(
                               (DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
                               GSTPostingBuffer[1]."GST Base Amount")
                        ELSE
                           GSTPostingBuffer[1]."GST Amount" :=
                              1 * GSTManagement.RoundGSTPrecision(
                               (DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
                               GSTPostingBuffer[1]."GST Base Amount") ;
                      END;
                      IF PurchHeader."Currency Code" <> '' THEN
                        GSTPostingBuffer[1]."Custom Duty Amount" :=
                          GSTManagement.ConvertGSTAmountToLCY(
                            PurchHeader."Currency Code",
                            PurchLine."Custom Duty Amount",PurchHeader."Currency Factor",PurchHeader."Posting Date")
                      ELSE
                        GSTPostingBuffer[1]."Custom Duty Amount" := "Custom Duty Amount";
                    END ELSE
                      IF PurchHeader."Associated Enterprises" THEN
                        GSTPostingBuffer[1]."Bal. Account No." :=
                          GSTManagement.GetGSTPayableAccountNo(
                            GSTStateCode,DetailedGSTEntryBuffer."GST Component Code")
                      ELSE
                        GSTPostingBuffer[1]."Bal. Account No." :=
                          GSTManagement.GetGSTPayableInterimAccountNo(
                            GSTStateCode,
                            DetailedGSTEntryBuffer."GST Component Code")
                  ELSE
                    GSTPostingBuffer[1]."Bal. Account No." :=
                      GSTManagement.GetGSTPayableAccountNo(
                        GSTStateCode,
                        DetailedGSTEntryBuffer."GST Component Code");
            END;
            GSTPostingBuffer[1]."GST %" := DetailedGSTEntryBuffer."GST %" ;
            GSTPostingBuffer[1]."GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            GSTPostingBuffer[1]."GST Reverse Charge" := DetailedGSTEntryBuffer."Reverse Charge";
            UpdateGSTPostingBuffer;
          UNTIL DetailedGSTEntryBuffer.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE UpdateGSTPostingBuffer@1500034();
    VAR
      DimensionManagement@1500000 : Codeunit 408;
    BEGIN
      GSTPostingBuffer[1]."Dimension Set ID" := PurchLine."Dimension Set ID";
      DimensionManagement.UpdateGlobalDimFromDimSetID(
        GSTPostingBuffer[1]."Dimension Set ID",
        GSTPostingBuffer[1]."Global Dimension 1 Code",GSTPostingBuffer[1]."Global Dimension 2 Code");

      GSTPostingBuffer[2] := GSTPostingBuffer[1];
      IF GSTPostingBuffer[2].FIND THEN BEGIN
        GSTPostingBuffer[2]."GST Base Amount" += GSTPostingBuffer[1]."GST Base Amount";
        GSTPostingBuffer[2]."GST Amount" += GSTPostingBuffer[1]."GST Amount";
        GSTPostingBuffer[2]."Interim Amount" += GSTPostingBuffer[1]."Interim Amount";
        GSTPostingBuffer[2]."Custom Duty Amount" += GSTPostingBuffer[1]."Custom Duty Amount";
        GSTPostingBuffer[2].MODIFY;
      END ELSE
        GSTPostingBuffer[1].INSERT;
    END;

    PROCEDURE GetNextGSTDetTaxEntryNo@1500037() : Integer;
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      NextDetGSTEntryNo@1500001 : Integer;
    BEGIN
      IF DetailedGSTLedgerEntry.FINDLAST THEN
        NextDetGSTEntryNo := DetailedGSTLedgerEntry."Entry No." + 1
      ELSE
        NextDetGSTEntryNo := 1;
      EXIT(NextDetGSTEntryNo);
    END;

    PROCEDURE FillGenJnlLineFromGSTBuffer@1500028(VAR GenJournalLine@1500000 : Record 81;GSTPostingBuffer@1500002 : Record 16420;PurchaseHeader@1500001 : Record 38;GenJnlLineDocType@1500003 : Option;GenJnlLineDocNo@1500004 : Code[20];CreditAmount@1500006 : Decimal);
    VAR
      GSTManagement@1500008 : Codeunit 16401;
    BEGIN
      GSTManagement.PurchasePostValidations(PurchaseHeader);
      WITH GenJournalLine DO BEGIN
        INIT;
        "Posting Date" := PurchaseHeader."Posting Date";
        "Document Date" := PurchaseHeader."Document Date";
        Description := PurchaseHeader."Posting Description";
        "Document Type" := GenJnlLineDocType;
        "Document No." := GenJnlLineDocNo;
        "External Document No." := GenJnlLineExtDocNo;
        "System-Created Entry" := TRUE;
          IF NOT (PurchaseHeader."GST Vendor Type" IN [PurchaseHeader."GST Vendor Type"::Composite,
                                                       PurchaseHeader."GST Vendor Type"::Exempted]) THEN
           IF GSTPostingBuffer."Account No." <> '' THEN BEGIN
             "Account No." := GSTPostingBuffer."Account No.";
             Amount := GSTPostingBuffer."GST Amount";
             "Amount (LCY)" := Amount;
             IF PurchaseHeader."Currency Code" <> '' THEN BEGIN
              "Currency Code" := PurchaseHeader."Currency Code";
              "Currency Factor" := PurchaseHeader."Currency Factor";
             END ELSE BEGIN
              "Currency Code" := PurchaseHeader."Currency Code";
              "Currency Factor" := 1;
             END;
           END;
        IF GSTPostingBuffer."Bal. Account No."<>'' THEN
          "Bal. Account No." := GSTPostingBuffer."Bal. Account No.";
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "GST Group Code" := GSTPostingBuffer."GST Group Code";
        "Source Currency Code" := "Currency Code";
        Correction := Correction;
        "Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Shortcut Dimension 1 Code" := GSTPostingBuffer."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GSTPostingBuffer."Global Dimension 2 Code";
        "Dimension Set ID" := GSTPostingBuffer."Dimension Set ID";
        "Sell-to/Buy-from No." := PurchaseHeader."Buy-from Vendor No.";
        "Source Type" := GenJnlLine."Source Type"::Vendor;
        "Source No." := PurchaseHeader."Pay-to Vendor No.";
        "Posting No. Series" := PurchaseHeader."Posting No. Series";
        "Ship-to/Order Address Code" := PurchaseHeader."Order Address Code";
        "Location Code" := PurchaseHeader."Location Code";
        "Source Code" := SrcCode;
        "Reason Code" := PurchaseHeader."Reason Code";
        "Account Type" := GenJnlLine."Account Type"::"G/L Account";
        "HSN/SAC Code" := PurchLine."HSN/SAC Code";
        "Location Code" := PurchaseHeader."Location Code";
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        "VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
      END;
    END;

    LOCAL PROCEDURE CheckBillOfEntry@1500038(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        IF NOT GSTManagement.IsGSTApplicable(Structure) THEN
          EXIT;
        IF NOT ("GST Vendor Type" IN [PurchHeader."GST Vendor Type"::Import,PurchaseHeader."GST Vendor Type"::SEZ]) THEN
          EXIT;
        IF NOT ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN
          EXIT;
        PurchaseLine.SETRANGE("Document Type","Document Type");
        PurchaseLine.SETRANGE("Document No.","No.");
        PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
        PurchaseLine.SETFILTER("Qty. to Invoice",'<>%1',0);
        PurchaseLine.SETRANGE("GST Group Type",PurchaseLine."GST Group Type"::Goods);
        IF NOT PurchaseLine.ISEMPTY THEN BEGIN
          PurchHeader.TESTFIELD("Bill of Entry Date");
          PurchHeader.TESTFIELD("Bill of Entry No.");
          PurchHeader.TESTFIELD("Bill of Entry Value");
        END;
        PurchaseLine.RESET;
        PurchaseLine.SETRANGE("Document Type","Document Type");
        PurchaseLine.SETRANGE("Document No.","No.");
        PurchaseLine.SETRANGE("GST Group Type",PurchaseLine."GST Group Type"::Goods);
        PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::"Charge (Item)");
        PurchaseLine.SETFILTER("GST Assessable Value",'%1',0);
        IF NOT PurchaseLine.ISEMPTY THEN
          ERROR(GSTAssessableErr,PurchaseHeader."Document Type",PurchaseHeader."No.");
      END;
    END;

    PROCEDURE FillGenJnlLineForCustomDuty@1500035(VAR GenJournalLine@1500000 : Record 81;PurchaseHeader@1500001 : Record 38;GSTPostingBuffer@1500002 : Record 16420;GenJnlLineDocType@1500003 : Option;GenJnlLineDocNo@1500004 : Code[20]);
    VAR
      GenJournalLine1@1500005 : Record 81;
      GSTManagement@1500008 : Codeunit 16401;
    BEGIN
      GenJournalLine1.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine1.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      IF GenJournalLine1.FINDLAST THEN
        LineNo := GenJournalLine1."Line No.";
      WITH GenJournalLine DO BEGIN
        INIT;
        "Posting Date" := PurchaseHeader."Posting Date";
        "Line No." := LineNo+10000;
        "Document Date" := PurchaseHeader."Document Date";
        Description := PurchaseHeader."Posting Description";
        "Document Type" := GenJnlLineDocType;
        "Document No." := GenJnlLineDocNo;
        "External Document No." := GenJnlLineExtDocNo;
        "System-Created Entry" := TRUE;
        "Account No." := GSTManagement.GetGSTPayableImportAccountNo;
        "Bal. Account No." := '';
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        IF PurchaseHeader."Currency Code" <> '' THEN BEGIN
          "Currency Code" := PurchaseHeader."Currency Code";
          Amount := -GSTPostingBuffer."Custom Duty Amount";
          "Amount (LCY)" := Amount;
          "Currency Factor" := PurchaseHeader."Currency Factor";
        END ELSE BEGIN
          "Currency Code" := PurchaseHeader."Currency Code";
          Amount := -GSTPostingBuffer."Custom Duty Amount";
          "Amount (LCY)" := Amount;
          "Currency Factor" := 1;
        END;

        "Source Currency Code" := "Currency Code";
        Correction := Correction;
        "Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Shortcut Dimension 1 Code" := GSTPostingBuffer."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GSTPostingBuffer."Global Dimension 2 Code";
        "Dimension Set ID" := GSTPostingBuffer."Dimension Set ID";
        "Sell-to/Buy-from No." := PurchaseHeader."Buy-from Vendor No.";
        "Source Type" := GenJnlLine."Source Type"::Vendor;
        "Source No." := PurchaseHeader."Pay-to Vendor No.";
        "Posting No. Series" := PurchaseHeader."Posting No. Series";
        "Ship-to/Order Address Code" := PurchaseHeader."Order Address Code";
        "Location Code" := PurchaseHeader."Location Code";
        "Source Code" := SrcCode;
        "Reason Code" := PurchaseHeader."Reason Code";
        "Account Type" := GenJnlLine."Account Type"::"G/L Account";
        "HSN/SAC Code" := PurchLine."HSN/SAC Code";
        "Location Code" := PurchaseHeader."Location Code";
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        "VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetCustomDutyAmount@1500039(PurchaseHeader@1500000 : Record 38) CustomDutyAmount : Decimal;
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      PurchaseLine.SETFILTER("Qty. to Invoice",'<>%1',0);
      PurchaseLine.SETFILTER("Custom Duty Amount",'<>%1',0);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          IF PurchaseHeader."Currency Code" <> '' THEN
            CustomDutyAmount += GSTManagement.ConvertGSTAmountToLCY(
              PurchaseHeader."Currency Code",PurchaseLine."Custom Duty Amount",PurchaseHeader."Currency Factor",
              PurchaseHeader."Posting Date")
          ELSE
            CustomDutyAmount += PurchaseLine."Custom Duty Amount";
        UNTIL PurchaseLine.NEXT = 0;
      EXIT(CustomDutyAmount);
    END;

    BEGIN
    END.
  }
}

