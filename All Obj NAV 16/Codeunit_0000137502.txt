OBJECT Codeunit 137502 SCM Dedicated Bins
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryManufacturing@1019 : Codeunit 132202;
      LibrarySales@1001 : Codeunit 130509;
      LibraryPurchase@1021 : Codeunit 130512;
      LibraryWarehouse@1008 : Codeunit 132204;
      MessageCounter@1007 : Integer;
      IsInitialized@1000 : Boolean;
      AutomaticBinUpdate@1006 : TextConst 'ENU=This change may have caused bin codes on some production order component lines to be different from those on the production order routing line. Do you want to automatically align all of these unmatched bin codes?';
      ErrLocationOnResourceCard@1010 : TextConst 'ENU=Location %1 must be set up with Bin Mandatory if the Work Center %2 uses it.';
      CfmRemoveAllBinCode@1011 : TextConst 'ENU=If you change the %1, then all bin codes on the %2 and related %3 will be removed. Are you sure that you want to continue?';
      CfmBinDedicated@1014 : TextConst 'ENU=The bin B1 is Dedicated.\Do you still want to use this bin?';
      VSTF190324Msg1@1016 : TextConst 'ENU=There is nothing to create.';
      MSG_INVT_PICK_CREATED@1020 : TextConst 'ENU=Number of Invt. Pick activities created: 1 out of a total of 1.';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      MfgSetup@1000 : Record 99000765;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      IF IsInitialized THEN
        EXIT;
      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      // set Manufacturing Setup Component @ Location = blank
      MfgSetup.GET;
      MfgSetup.VALIDATE("Components at Location",'');
      MfgSetup.MODIFY(TRUE);
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateWhseLocation@20(VAR Location@1000 : Record 14;DirectedPickPutAway@1006 : Boolean;RequireReceive@1001 : Boolean;RequirePutAway@1002 : Boolean;RequireShipment@1003 : Boolean;RequirePick@1004 : Boolean;BinMandatory@1005 : Boolean);
    VAR
      WhseEmployee@1008 : Record 7301;
    BEGIN
      IF DirectedPickPutAway THEN BEGIN
        Location.SETRANGE("Directed Put-away and Pick",TRUE);
        Location.SETFILTER(Code,'<>%1','GU*'); // Do not pick locations created by GUID No. Series
        Location.FINDLAST;
        LibraryInventory.UpdateInventoryPostingSetup(Location);
      END ELSE
        LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);
      LibraryWarehouse.CreateWarehouseEmployee(WhseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateBin@21(VAR Bin@1002 : Record 7354;LocationCode@1001 : Code[10];ZoneCode@1003 : Code[10];BinTypeCode@1004 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,'',ZoneCode,BinTypeCode);
    END;

    LOCAL PROCEDURE CreateAndPostPositiveAdjustmt@22(VAR Item@1001 : Record 27;LocationCode@1002 : Code[10];BinCode@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
      Location@1005 : Record 14;
      WarehouseJournalLine@1006 : Record 7311;
      ItemJournalTemplate@1008 : Record 82;
      ItemJournalBatch@1010 : Record 233;
      WhseJournalTemplate@1009 : Record 7309;
      WhseJournalBatch@1011 : Record 7310;
    BEGIN
      FindItemJournal(ItemJournalTemplate,ItemJournalBatch);
      Location.GET(LocationCode);
      IF Location."Directed Put-away and Pick" THEN BEGIN
        FindWhseJournal(WhseJournalTemplate,WhseJournalBatch,LocationCode);
        LibraryWarehouse.CreateWhseJournalLine(
          WarehouseJournalLine,WhseJournalTemplate.Name,WhseJournalBatch.Name,
          LocationCode,'',BinCode,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
        LibraryWarehouse.PostWhseJournalLine(WhseJournalTemplate.Name,WhseJournalBatch.Name,Location.Code);
        LibraryWarehouse.CalculateWhseAdjustmentItemJournal(Item,WORKDATE,'');
      END ELSE BEGIN
        LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
          ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
        ItemJournalLine.VALIDATE("Location Code",LocationCode);
        ItemJournalLine.VALIDATE("Bin Code",BinCode);
        ItemJournalLine.MODIFY(TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    [Test]
    [HandlerFunctions(SetupDefaultBinsConfirmHndl)]
    PROCEDURE SetupDefaultBins@2();
    BEGIN
      Initialize;
      // A. Choosing a location with "Require Pick"/ "Require put-away"/"Bin Mandatory" as FALSE
      SetupDefaultBinsScenario(FALSE,FALSE,FALSE);
      // B. Same as above but Require Receive and Require Shipment set to TRUE
      SetupDefaultBinsScenario(TRUE,TRUE,FALSE);
      // C. Same as A. but Directed picks and put-way set to TRUE
      SetupDefaultBinsScenario(TRUE,TRUE,TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE SetupDefaultBinsConfirmHndl@17(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,CfmRemoveAllBinCode) > 0,'Incorrect confirm dialog: ' + Question);
      Reply := TRUE;
    END;

    [Test]
    [HandlerFunctions(ConsumptionBinsConfirmHndl)]
    PROCEDURE ConsumptionBins@3();
    BEGIN
      Initialize;
      ConsumptionBinsScenario;
    END;

    [ConfirmHandler]
    PROCEDURE ConsumptionBinsConfirmHndl@11(Question@1001 : Text[1024];VAR Reply@1002 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,AutomaticBinUpdate) > 0,'Incorrect confirm dialog: ' + Question);
      Reply := TRUE;
    END;

    [Test]
    [HandlerFunctions(DedicatedBinsMsgHndl,DedicatedBinsConfirmHndl)]
    PROCEDURE DedicatedBins@12();
    BEGIN
      Initialize;
      DedicatedBinsScenarioA;
      DedicatedBinsScenarioB;
    END;

    [MessageHandler]
    PROCEDURE DedicatedBinsMsgHndl@15(Message@1000 : Text[1024]);
    VAR
      GotExpectedMessage@1001 : Boolean;
    BEGIN
      GotExpectedMessage := (STRPOS(Message,MSG_INVT_PICK_CREATED) > 0) OR
        (STRPOS(Message,'Warehouse Shipment Header has been created') > 0);
      Assert.IsTrue(GotExpectedMessage,'Unexpected message: ' + Message);
    END;

    [ConfirmHandler]
    PROCEDURE DedicatedBinsConfirmHndl@19(Question@1001 : Text[1024];VAR Reply@1002 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,CfmBinDedicated) > 0,'Incorrect confirm dialog: ' + Question);
      Reply := TRUE;
    END;

    LOCAL PROCEDURE FindItemJournal@5(VAR ItemJournalTemplate@1000 : Record 82;VAR ItemJournalBatch@1001 : Record 233);
    BEGIN
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE FindWhseJournal@7(VAR WhseJournalTemplate@1000 : Record 7309;VAR WhseJournalBatch@1001 : Record 7310;LocationCode@1170000002 : Code[10]);
    BEGIN
      WhseJournalTemplate.SETRANGE(Type,WhseJournalTemplate.Type::Item);
      WhseJournalTemplate.FINDFIRST;
      WhseJournalBatch.SETRANGE("Journal Template Name",WhseJournalTemplate.Name);
      IF LocationCode <> '' THEN
        WhseJournalBatch.SETRANGE("Location Code",LocationCode);
      WhseJournalBatch.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupDefaultBinsScenario@4(RequireReceive@1001 : Boolean;RequireShipment@1002 : Boolean;DirectedPickAndPut@1003 : Boolean);
    VAR
      Location@1004 : Record 14;
      BinType@1020 : Record 7303;
      OpenShpFlrBin@1005 : Record 7354;
      InbBin@1006 : Record 7354;
      OutBin@1007 : Record 7354;
      MCOpenShpFlrBin@1011 : Record 7354;
      MCInbBin@1013 : Record 7354;
      MCOutBin@1012 : Record 7354;
      AdjustmentBin@1025 : Record 7354;
      WorkCenter@1009 : Record 99000754;
      MachineCenter@1010 : Record 99000758;
      Item@1015 : Record 27;
      ItemJournalLine@1016 : Record 83;
      Zone@1023 : Record 7300;
      WarehouseJnlLine@1024 : Record 7311;
      InventoryPostingSetup@1000 : Record 5813;
      ItemJournalTemplate@1021 : Record 82;
      ItemJournalBatch@1026 : Record 233;
      WarehouseJournalTemplate@1022 : Record 7309;
      WarehouseJournalBatch@1027 : Record 7310;
      ErrorText@1019 : Text[250];
    BEGIN
      // create location
      CreateLocation(Location);
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.VALIDATE("Require Shipment",RequireShipment);
      IF DirectedPickAndPut THEN BEGIN
        Location.VALIDATE("Bin Mandatory",TRUE);
        Location.VALIDATE("Directed Put-away and Pick",TRUE);
      END;
      Location.MODIFY(TRUE);

      // create bins
      IF DirectedPickAndPut THEN BEGIN
        BinType.SETRANGE(Receive,FALSE);
        BinType.SETRANGE(Ship,FALSE);
        BinType.SETRANGE("Put Away",FALSE);
        BinType.SETRANGE(Pick,FALSE);
        BinType.FINDFIRST;
        LibraryWarehouse.CreateZone(Zone,'ZONE',Location.Code,BinType.Code,'','',0,FALSE);
      END;
      LibraryWarehouse.CreateBin(OpenShpFlrBin,Location.Code,'OpenSFB',Zone.Code,Zone."Bin Type Code");
      LibraryWarehouse.CreateBin(InbBin,Location.Code,'InbB',Zone.Code,Zone."Bin Type Code");
      LibraryWarehouse.CreateBin(OutBin,Location.Code,'OutB',Zone.Code,Zone."Bin Type Code");
      LibraryWarehouse.CreateBin(MCOpenShpFlrBin,Location.Code,'MCOpenSFB',Zone.Code,Zone."Bin Type Code");
      LibraryWarehouse.CreateBin(MCInbBin,Location.Code,'MCInbB',Zone.Code,Zone."Bin Type Code");
      LibraryWarehouse.CreateBin(MCOutBin,Location.Code,'MCOutB',Zone.Code,Zone."Bin Type Code");

      // create resource
      LibraryManufacturing.CreateWorkCenter(WorkCenter);

      // assign location code
      IF NOT DirectedPickAndPut THEN BEGIN
        COMMIT; // added to save the data before ASSERTERROR call- as it rolls back all changes yet
        ASSERTERROR WorkCenter.VALIDATE("Location Code",Location.Code);
        Assert.AssertNothingInsideFilter;
      END;

      // Bin Mandatory = TRUE
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      // assign location code
      WorkCenter.VALIDATE("Location Code",Location.Code);
      WorkCenter.MODIFY(TRUE);

      // set outbound & inbound bin
      WorkCenter.VALIDATE("From-Production Bin Code",OutBin.Code);
      WorkCenter.VALIDATE("Open Shop Floor Bin Code",OpenShpFlrBin.Code);
      WorkCenter.VALIDATE("To-Production Bin Code",InbBin.Code);
      WorkCenter.MODIFY(TRUE);

      // create default machine center
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",0);

      // verify location code on machine center
      Assert.AreEqual(WorkCenter."Location Code",MachineCenter."Location Code",'Location in machine center matches work center');

      // set up bin codes for machine center
      MachineCenter.VALIDATE("Open Shop Floor Bin Code",MCOpenShpFlrBin.Code);
      MachineCenter.VALIDATE("To-Production Bin Code",MCInbBin.Code);
      MachineCenter.VALIDATE("From-Production Bin Code",MCOutBin.Code);
      MachineCenter.MODIFY(TRUE);

      // set location code = blank on WC
      WorkCenter.VALIDATE("Location Code",'');
      WorkCenter.MODIFY(TRUE);
      // verify all bins are set to blank
      Assert.AreEqual('',WorkCenter."Open Shop Floor Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',WorkCenter."To-Production Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',WorkCenter."From-Production Bin Code",'Bin code should have been blank');
      MachineCenter.GET(MachineCenter."No.");
      Assert.AreEqual(WorkCenter."Location Code",MachineCenter."Location Code",'Location code should have been blank');
      Assert.AreEqual('',MachineCenter."Open Shop Floor Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',MachineCenter."To-Production Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',MachineCenter."From-Production Bin Code",'Bin code should have been blank');

      // set data back to where it was- set location and bins
      WorkCenter.VALIDATE("Location Code",Location.Code);
      WorkCenter.VALIDATE("Open Shop Floor Bin Code",OpenShpFlrBin.Code);
      WorkCenter.VALIDATE("To-Production Bin Code",InbBin.Code);
      WorkCenter.VALIDATE("From-Production Bin Code",OutBin.Code);
      WorkCenter.MODIFY(TRUE);
      MachineCenter.GET(MachineCenter."No.");
      MachineCenter.VALIDATE("Open Shop Floor Bin Code",MCOpenShpFlrBin.Code);
      MachineCenter.VALIDATE("To-Production Bin Code",MCInbBin.Code);
      MachineCenter.MODIFY(TRUE);

      // set Bin Mandatory = FALSE
      IF NOT DirectedPickAndPut THEN BEGIN
        COMMIT; // added to save the data before ASSERTERROR call- as it rolls back all changes yet
        ASSERTERROR Location.VALIDATE("Bin Mandatory",FALSE);
        ErrorText := STRSUBSTNO(ErrLocationOnResourceCard,
            Location.Code,
            WorkCenter."No.");
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorText) > 0,'Unexpected error message: ' + GETLASTERRORTEXT);
        CLEARLASTERROR;
      END;

      // create an item and post 10 PCS on the outbound bin
      FindItemJournal(ItemJournalTemplate,ItemJournalBatch);
      CreateItem(Item);
      IF DirectedPickAndPut THEN BEGIN
        FindWhseJournal(WarehouseJournalTemplate,WarehouseJournalBatch,'');
        LibraryWarehouse.CreateBin(AdjustmentBin,Location.Code,'AdjB',Zone.Code,Zone."Bin Type Code");
        Location.VALIDATE("Adjustment Bin Code",AdjustmentBin.Code);
        Location.MODIFY(TRUE);
        LibraryWarehouse.CreateWhseJournalLine(
          WarehouseJnlLine,WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,
          Location.Code,'',OutBin.Code,WarehouseJnlLine."Entry Type"::"Positive Adjmt.",Item."No.",10);
        LibraryWarehouse.PostWhseJournalLine(WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,Location.Code);
        LibraryWarehouse.CalculateWhseAdjustmentItemJournal(Item,WORKDATE,'');
      END ELSE BEGIN
        LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
          ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",10);
        ItemJournalLine.VALIDATE("Location Code",Location.Code);
        ItemJournalLine.VALIDATE("Bin Code",OutBin.Code);
        ItemJournalLine.MODIFY(TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // empty the bin
      IF DirectedPickAndPut THEN BEGIN
        LibraryWarehouse.CreateWhseJournalLine(
          WarehouseJnlLine,WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,
          Location.Code,'',OutBin.Code,WarehouseJnlLine."Entry Type"::"Negative Adjmt.",Item."No.",-10);
        LibraryWarehouse.PostWhseJournalLine(WarehouseJournalTemplate.Name,WarehouseJournalBatch.Name,Location.Code);
        LibraryWarehouse.CalculateWhseAdjustmentItemJournal(Item,WORKDATE,'');
      END ELSE BEGIN
        LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
          ItemJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",10);
        ItemJournalLine.VALIDATE("Location Code",Location.Code);
        ItemJournalLine.VALIDATE("Bin Code",OutBin.Code);
        ItemJournalLine.MODIFY(TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // delete location & related inventory setups
      InventoryPostingSetup.SETRANGE("Location Code",Location.Code);
      InventoryPostingSetup.DELETEALL(TRUE);
      Location.DELETE(TRUE);
      // verify all location codes and bin codes are set to empty
      WorkCenter.GET(WorkCenter."No."); // refresh
      Assert.AreEqual('',WorkCenter."Location Code",'Location code should have been blank');
      Assert.AreEqual('',WorkCenter."Open Shop Floor Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',WorkCenter."To-Production Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',WorkCenter."From-Production Bin Code",'Bin code should have been blank');
      MachineCenter.GET(MachineCenter."No."); // refresh
      Assert.AreEqual('',MachineCenter."Location Code",'Location code should have been blank');
      Assert.AreEqual('',MachineCenter."Open Shop Floor Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',MachineCenter."To-Production Bin Code",'Bin code should have been blank');
      Assert.AreEqual('',MachineCenter."From-Production Bin Code",'Bin code should have been blank');
    END;

    LOCAL PROCEDURE ConsumptionBinsScenario@14();
    VAR
      WorkCenter1@1000 : Record 99000754;
      MachineCenter1@1001 : Record 99000758;
      MachineCenter2@1002 : Record 99000758;
      MachineCenter3@1003 : Record 99000758;
      WorkCenter2@1004 : Record 99000754;
      ChildItem1@1005 : Record 27;
      ChildItem2@1006 : Record 27;
      ChildItem3@1007 : Record 27;
      ParentItem@1008 : Record 27;
      ProdBOMHeader@1009 : Record 99000771;
      ProdBOMLine@1010 : Record 99000772;
      RoutingHeader@1011 : Record 99000763;
      RoutingLine@1012 : Record 99000764;
      Location@1013 : Record 14;
      Bin@1014 : Record 7354;
      ProductionOrder@1015 : Record 5405;
      ProdOrderRtngLine@1016 : Record 5409;
      ProdOrderComponent@1017 : Record 5407;
      Location2@1018 : Record 14;
      ProdOrderLine@1019 : Record 5406;
      ProdOrderComponent2@1020 : Record 5407;
      ItemJournalTemplate@1030 : Record 82;
      ItemJournalBatch@1031 : Record 233;
    BEGIN
      // create resources
      LibraryManufacturing.CreateWorkCenter(WorkCenter1);
      LibraryManufacturing.CreateMachineCenter(MachineCenter1,WorkCenter1."No.",1);
      LibraryManufacturing.CreateMachineCenter(MachineCenter2,WorkCenter1."No.",1);
      LibraryManufacturing.CreateMachineCenter(MachineCenter3,WorkCenter1."No.",1);
      LibraryManufacturing.CreateWorkCenter(WorkCenter2);

      // create items
      CreateItem(ParentItem);
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::"Prod. Order");
      ParentItem.MODIFY(TRUE);
      CreateItem(ChildItem1);
      CreateItem(ChildItem2);
      CreateItem(ChildItem3);
      ChildItem3.VALIDATE("Flushing Method",ChildItem3."Flushing Method"::Backward);
      ChildItem3.MODIFY(TRUE);
      // create bom
      LibraryManufacturing.CreateProductionBOMHeader(ProdBOMHeader,ParentItem."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProdBOMHeader,ProdBOMLine,'',ProdBOMLine.Type::Item,ChildItem1."No.",1);
      LibraryManufacturing.CreateProductionBOMLine(
        ProdBOMHeader,ProdBOMLine,'',ProdBOMLine.Type::Item,ChildItem2."No.",1);
      ProdBOMLine.VALIDATE("Routing Link Code",'100');
      ProdBOMLine.MODIFY(TRUE);
      LibraryManufacturing.CreateProductionBOMLine(
        ProdBOMHeader,ProdBOMLine,'',ProdBOMLine.Type::Item,ChildItem3."No.",1);
      ProdBOMLine.VALIDATE("Routing Link Code",'200');
      ProdBOMLine.MODIFY(TRUE);
      ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
      ProdBOMHeader.MODIFY(TRUE);
      ParentItem.VALIDATE("Production BOM No.",ProdBOMHeader."No.");
      // create routing
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'','10',RoutingLine.Type::"Work Center",WorkCenter1."No.");
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'','20',RoutingLine.Type::"Machine Center",MachineCenter1."No.");
      RoutingLine.VALIDATE("Routing Link Code",'100');
      RoutingLine.MODIFY(TRUE);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'','30',RoutingLine.Type::"Machine Center",MachineCenter2."No.");
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'','40',RoutingLine.Type::"Machine Center",MachineCenter3."No.");
      RoutingLine.VALIDATE("Routing Link Code",'200');
      RoutingLine.MODIFY(TRUE);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'','50',RoutingLine.Type::"Work Center",WorkCenter2."No.");
      RoutingLine.VALIDATE("Routing Link Code",'300');
      RoutingLine.MODIFY(TRUE);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
      ParentItem.VALIDATE("Routing No.",RoutingHeader."No.");
      ParentItem.MODIFY(TRUE);

      // create location and bins
      CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,'WC1-OSFB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'WC1-IB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'MC1-OSFB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'MC1-IB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'MC2-OSFB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'MC2-IB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'LOC-OSFB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'LOC-IB','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'DUMMY','','');
      Location.VALIDATE("Open Shop Floor Bin Code",'LOC-OSFB');
      Location.VALIDATE("To-Production Bin Code",'LOC-IB');
      Location.MODIFY(TRUE);

      // set default bins on resources
      WorkCenter1.VALIDATE("Location Code",Location.Code);
      WorkCenter1.VALIDATE("Open Shop Floor Bin Code",'WC1-OSFB');
      WorkCenter1.VALIDATE("To-Production Bin Code",'WC1-IB');
      WorkCenter1.MODIFY(TRUE);
      MachineCenter1.GET(MachineCenter1."No.");
      Assert.AreEqual(WorkCenter1."Location Code",MachineCenter1."Location Code",'Location code should have been set already');
      MachineCenter1.VALIDATE("Open Shop Floor Bin Code",'MC1-OSFB');
      MachineCenter1.VALIDATE("To-Production Bin Code",'MC1-IB');
      MachineCenter1.MODIFY(TRUE);
      MachineCenter2.GET(MachineCenter2."No.");
      Assert.AreEqual(WorkCenter1."Location Code",MachineCenter2."Location Code",'Location code should have been set already');
      MachineCenter2.VALIDATE("Open Shop Floor Bin Code",'MC2-OSFB');
      MachineCenter2.VALIDATE("To-Production Bin Code",'MC2-IB');
      MachineCenter2.MODIFY(TRUE);

      // create released prod order
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,ProductionOrder.Status::Released,
        ProductionOrder."Source Type"::Item,ParentItem."No.",1);
      ProductionOrder.VALIDATE("Location Code",Location.Code);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // VERIFY
      // routing lines bin codes
      ProdOrderRtngLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      AssertBinCodesOnProdRtngs(ProdOrderRtngLine,'10','WC1-OSFB','WC1-IB');
      AssertBinCodesOnProdRtngs(ProdOrderRtngLine,'20','MC1-OSFB','MC1-IB');
      AssertBinCodesOnProdRtngs(ProdOrderRtngLine,'30','MC2-OSFB','MC2-IB');
      AssertBinCodesOnProdRtngs(ProdOrderRtngLine,'40','WC1-OSFB','WC1-IB');
      AssertBinCodesOnProdRtngs(ProdOrderRtngLine,'50','','');
      // component lines bin codes
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem1."No.",'',ChildItem1."Flushing Method",Location.Code,'WC1-IB');
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem2."No.",'100',ChildItem2."Flushing Method",Location.Code,'MC1-IB');
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'200',ChildItem3."Flushing Method",Location.Code,'WC1-OSFB');

      // set flushing method = Forward for X-CHILD1
      ProdOrderComponent.SETRANGE("Item No.",ChildItem1."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.VALIDATE("Flushing Method",ProdOrderComponent."Flushing Method"::Forward);
      ProdOrderComponent.MODIFY(TRUE);
      AssertBinCodesOnComponents(ProdOrderComponent,
        ChildItem1."No.",
        '',
        ProdOrderComponent."Flushing Method"::Forward,
        Location.Code,
        WorkCenter1."Open Shop Floor Bin Code");
      ProdOrderComponent.VALIDATE("Item No.");
      ProdOrderComponent.MODIFY(TRUE);
      AssertBinCodesOnComponents(ProdOrderComponent,
        ChildItem1."No.",
        '',
        ProdOrderComponent."Flushing Method"::Manual,
        Location.Code,
        WorkCenter1."To-Production Bin Code");

      // create new location & bins
      CreateLocation(Location2);
      LibraryWarehouse.CreateBin(Bin,Location2.Code,'X','','');
      LibraryWarehouse.CreateBin(Bin,Location2.Code,'Y','','');
      Location2.VALIDATE("Bin Mandatory",TRUE);
      Location2.MODIFY(TRUE);
      Location2.VALIDATE("Open Shop Floor Bin Code",'X');
      Location2.VALIDATE("To-Production Bin Code",'Y');
      Location2.MODIFY(TRUE);

      // create a new component line and verify filled in bin code
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent2,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");
      ProdOrderComponent2.VALIDATE("Item No.",ChildItem3."No.");
      ProdOrderComponent2.VALIDATE("Quantity per",1);
      ProdOrderComponent2.VALIDATE("Location Code",Location2.Code);
      ProdOrderComponent2.MODIFY(TRUE);
      AssertBinCodesOnComponents(ProdOrderComponent,
        ChildItem3."No.",'',ChildItem3."Flushing Method",Location2.Code,Location2."Open Shop Floor Bin Code");

      // refresh prod. order - calculate only routing
      FindItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,FALSE,FALSE);
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem1."No.",'',ProdOrderComponent."Flushing Method"::Manual,
        Location.Code,WorkCenter1."To-Production Bin Code");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem2."No.",'100',ChildItem2."Flushing Method",
        Location.Code,MachineCenter1."To-Production Bin Code");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'200',ChildItem3."Flushing Method",
        Location.Code,WorkCenter1."Open Shop Floor Bin Code");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'',ChildItem3."Flushing Method",
        Location2.Code,Location2."Open Shop Floor Bin Code");

      // change last line for X-CHILD3 to have Routing Link Code and Manual Flushing and location as first one
      ProdOrderComponent.SETRANGE("Item No.",ChildItem3."No.");
      ProdOrderComponent.FINDLAST;
      ProdOrderComponent.VALIDATE("Location Code",Location.Code);
      ProdOrderComponent.VALIDATE("Routing Link Code",'300');
      ProdOrderComponent.VALIDATE("Flushing Method",ProdOrderComponent."Flushing Method"::Manual);
      ProdOrderComponent.MODIFY(TRUE);
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'300',ProdOrderComponent."Flushing Method"::Manual,
        Location.Code,Location."To-Production Bin Code");

      // change the bin code on this component line and refresh (only calc. routing)
      ProdOrderComponent.VALIDATE("Bin Code",'DUMMY');
      ProdOrderComponent.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,FALSE,FALSE);
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem1."No.",'',ProdOrderComponent."Flushing Method"::Manual,
        Location.Code,WorkCenter1."To-Production Bin Code");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem2."No.",'100',ProdOrderComponent."Flushing Method"::Manual,
        Location.Code,MachineCenter1."To-Production Bin Code");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'200',ProdOrderComponent."Flushing Method"::Backward,
        Location.Code,WorkCenter1."Open Shop Floor Bin Code");
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'300',ProdOrderComponent."Flushing Method"::Manual,
        Location.Code,Location."To-Production Bin Code");

      // refresh prod. order by ONLY calc. components
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,FALSE,TRUE,FALSE);
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem1."No.",'',ChildItem1."Flushing Method",Location.Code,'WC1-IB');
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem2."No.",'100',ChildItem2."Flushing Method",Location.Code,'MC1-IB');
      AssertBinCodesOnComponents(ProdOrderComponent,ChildItem3."No.",'200',ChildItem3."Flushing Method",Location.Code,'WC1-OSFB');
    END;

    LOCAL PROCEDURE DedicatedBinsScenarioA@13();
    VAR
      Location@1000 : Record 14;
      Bin1@1001 : Record 7354;
      Bin2@1002 : Record 7354;
      Bin3@1003 : Record 7354;
      BinShpt@1013 : Record 7354;
      Item@1004 : Record 27;
      ItemJournalLine@1005 : Record 83;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      WhseActivityHeader@1009 : Record 5766;
      WhseActivityLine@1008 : Record 5767;
      WhseShipmentHeader@1010 : Record 7320;
      WhseShipmentLine@1011 : Record 7321;
      Zone@1012 : Record 7300;
      BinContent@1014 : Record 7302;
      ItemJournalTemplate@1020 : Record 82;
      ItemJournalBatch@1022 : Record 233;
      BinType@1021 : Record 7303;
    BEGIN
      // create location with 3 bins
      CreateLocation(Location);
      LibraryWarehouse.CreateBin(Bin1,Location.Code,'B1','','');
      Bin1.VALIDATE(Dedicated,TRUE);
      Bin1.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin2,Location.Code,'B2','','');
      LibraryWarehouse.CreateBin(Bin3,Location.Code,'B3','','');
      LibraryWarehouse.CreateBin(BinShpt,Location.Code,'Shpt','','');

      // make location X as Require Pick & Bin Mandatory
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      // create item
      CreateItem(Item);

      // post inventory for item
      FindItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",100);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin1.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",1);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin2.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",1);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin3.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // create sales order for 3 PCS of X-CHILD. Release. Create inventory pick.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",3);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickSalesOrder(SalesHeader);

      // Verify that the inventory pick is created for a total of 2 PCS, 1 each from bins B2 and B3
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WhseActivityLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Assert.AreEqual(2,WhseActivityLine.COUNT,'Expected 2 lines on Inventory pick.');
      WhseActivityLine.FINDSET(FALSE);
      REPEAT
        Assert.AreEqual(1,WhseActivityLine.Quantity,'Expected 1 PCS.');
        Assert.AreNotEqual(Bin1.Code,WhseActivityLine."Bin Code",'Nothing shud b taken from bin1');
      UNTIL WhseActivityLine.NEXT = 0;

      // Delete the inventory pick
      WhseActivityHeader.GET(WhseActivityHeader.Type::"Invt. Pick",WhseActivityLine."No.");
      WhseActivityHeader.DELETE(TRUE);

      // Set location X to have Require Shipment = TRUE.
      Location.VALIDATE("Require Shipment",TRUE);
      Location.MODIFY(TRUE);

      // set sales line to bin Shpt and create bin content
      LibraryWarehouse.CreateBinContent(BinContent,Location.Code,'',BinShpt.Code,Item."No.",'',Item."Base Unit of Measure");
      SalesLine.FIND;
      SalesLine.VALIDATE("Bin Code",BinShpt.Code);
      SalesLine.MODIFY(TRUE);

      // From sales order create warehouse shipment. Create pick
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WhseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WhseShipmentLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      WhseShipmentLine.FINDLAST;
      WhseShipmentHeader.GET(WhseShipmentLine."No.");
      LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);

      // Verify that the pick is created for 2 PCS each in the Take lines from bins B2 and B3
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WhseActivityLine.SETRANGE("Source Subtype",SalesHeader."Document Type");
      Assert.AreEqual(2,WhseActivityLine.COUNT,'Expected 2 lines on pick.');
      WhseActivityLine.FINDSET(FALSE);
      REPEAT
        Assert.AreEqual(1,WhseActivityLine.Quantity,'Expected 1 PCS.');
        Assert.AreNotEqual(Bin1.Code,WhseActivityLine."Bin Code",'Nothing shud b taken from bin1');
      UNTIL WhseActivityLine.NEXT = 0;

      // delete previous activities
      WhseActivityHeader.GET(WhseActivityHeader.Type::Pick,WhseActivityLine."No.");
      WhseActivityHeader.DELETE(TRUE);
      WhseShipmentHeader.GET(WhseShipmentHeader."No.");
      LibraryWarehouse.ReopenWhseShipment(WhseShipmentHeader);
      WhseShipmentHeader.GET(WhseShipmentHeader."No.");
      WhseShipmentHeader.DELETE(TRUE);

      // Try to set location to have Directed picks and put-away to TRUE. Expect no error.
      Location.VALIDATE("Directed Put-away and Pick",TRUE);
      Location.MODIFY(TRUE);

      // Create another location with 2 bins B1 and B2 and set Directed put-way and Pick = TRUE
      CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Directed Put-away and Pick",TRUE);
      Location.MODIFY(TRUE);
      BinType.SETRANGE(Pick,TRUE);
      BinType.SETRANGE("Put Away",FALSE);
      BinType.FINDFIRST;
      LibraryWarehouse.CreateZone(Zone,'ZONE',Location.Code,BinType.Code,'','',0,FALSE);
      LibraryWarehouse.CreateBin(Bin1,Location.Code,'B1',Zone.Code,Zone."Bin Type Code");

      // Now try to set B1 to dedicated. Expect no error.
      Bin1.VALIDATE(Dedicated,TRUE);
      Bin1.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DedicatedBinsScenarioB@18();
    VAR
      Location@1002 : Record 14;
      Bin1@1001 : Record 7354;
      Bin2@1000 : Record 7354;
      Item@1003 : Record 27;
      ItemJournalLine@1004 : Record 83;
      BinContent@1005 : Record 7302;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      PurchHeader@1009 : Record 38;
      PurchLine@1008 : Record 39;
      ItemJournalTemplate@1020 : Record 82;
      ItemJournalBatch@1021 : Record 233;
    BEGIN
      // create location with 3 bins
      CreateLocation(Location);
      LibraryWarehouse.CreateBin(Bin1,Location.Code,'B1','','');
      Bin1.VALIDATE(Dedicated,TRUE);
      Bin1.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin2,Location.Code,'B2','','');

      // make location X as Bin Mandatory
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      // create item
      CreateItem(Item);

      // create positive adjustment of 10 PCS each of item into the two bins
      FindItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",10);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin1.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",10);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin2.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // make sure that bin content B1 is default
      BinContent.GET(Location.Code,Bin2.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Default,FALSE);
      BinContent.MODIFY(TRUE);
      BinContent.GET(Location.Code,Bin1.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);

      // create sales for 1 PCS
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);

      // verify that bin code is not B1
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreNotEqual(Bin1.Code,SalesLine."Bin Code",'Bin code is not B1');

      // Now set the bin code to B1.- a confirm dialog pops up
      SalesLine.VALIDATE("Bin Code",Bin1.Code);
      SalesLine.MODIFY(TRUE);
      // Verify bin is set to B1
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreEqual(Bin1.Code,SalesLine."Bin Code",'bin is set to B1');

      // Create a purchase order for the item 1 PCS for the location.
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,Item."No.",1);
      PurchLine.VALIDATE("Location Code",Location.Code);
      PurchLine.MODIFY(TRUE);

      // verify that the bin code is B1
      PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      Assert.AreEqual(Bin1.Code,PurchLine."Bin Code",'Bin code is B1');

      // Now set quantity to -1 from 1 on the purchase line.- a confirm dialog pops up
      PurchLine.VALIDATE(Quantity,-1);
      PurchLine.MODIFY(TRUE);
      // Verify bin is set to B1
      PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      Assert.AreEqual(Bin1.Code,PurchLine."Bin Code",'bin is set to B1');
    END;

    LOCAL PROCEDURE CreateLocation@1(VAR Location@1000 : Record 14);
    VAR
      WhseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateWarehouseEmployee(WhseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateItem@6(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
    END;

    LOCAL PROCEDURE AssertBinCodesOnProdRtngs@9(VAR ProdOrderRtngLine@1000 : Record 5409;OperationNo@1003 : Code[10];OpenShopFloorBin@1001 : Code[20];InboundBin@1002 : Code[20]);
    BEGIN
      ProdOrderRtngLine.SETRANGE("Operation No.",OperationNo);
      Assert.AreEqual(1,ProdOrderRtngLine.COUNT,'Incorrect no. of routing lines with same operation no.: ' + OperationNo);
      ProdOrderRtngLine.FINDFIRST;
      Assert.AreEqual(OpenShopFloorBin,ProdOrderRtngLine."Open Shop Floor Bin Code",'Incorrect open shop floor bin code.');
      Assert.AreEqual(InboundBin,ProdOrderRtngLine."To-Production Bin Code",'Incorrect To-Production Bin Code.');
      // remove filter
      ProdOrderRtngLine.SETRANGE("Operation No.");
    END;

    LOCAL PROCEDURE AssertBinCodesOnComponents@10(VAR ProdOrderComponent@1003 : Record 5407;ItemNo@1002 : Code[20];RoutingLinkCode@1001 : Code[10];FlushingMethod@1000 : Option;LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.SETRANGE("Routing Link Code",RoutingLinkCode);
      ProdOrderComponent.SETRANGE("Flushing Method",FlushingMethod);
      Assert.AreEqual(1,ProdOrderComponent.COUNT,'Incorrect no. of component lines');
      ProdOrderComponent.FINDFIRST;
      Assert.AreEqual(LocationCode,ProdOrderComponent."Location Code",'Incorrect location code.');
      Assert.AreEqual(BinCode,ProdOrderComponent."Bin Code",'Incorrect bin code.');
      // remove filters
      ProdOrderComponent.SETRANGE("Item No.");
      ProdOrderComponent.SETRANGE("Routing Link Code");
      ProdOrderComponent.SETRANGE("Flushing Method");
    END;

    [Test]
    [HandlerFunctions(VSTF190342MsgHndl)]
    PROCEDURE VSTF190342InvtPick@46();
    VAR
      Location@1001 : Record 14;
    BEGIN
      CreateWhseLocation(Location,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE);
      VSTF190342Scenario(Location);
    END;

    [Test]
    PROCEDURE VSTF190342WhsePick@53();
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateWhseLocation(Location,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE);
      VSTF190342Scenario(Location);
    END;

    [Test]
    PROCEDURE VSTF190342BinOnly@54();
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateWhseLocation(Location,FALSE,FALSE,FALSE,FALSE,FALSE,TRUE);
      VSTF190342Scenario(Location);
    END;

    [Test]
    PROCEDURE VSTF190342WMS@55();
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateWhseLocation(Location,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE);
      VSTF190342Scenario(Location);
    END;

    LOCAL PROCEDURE VSTF190342Scenario@49(VAR Location@1002 : Record 14);
    VAR
      ItemParent@1003 : Record 27;
      ItemChild@1004 : Record 27;
      Bin@1000 : Record 7354;
      BinDedicated@1005 : Record 7354;
      ProdBOMHeader@1007 : Record 99000771;
      ProdBOMLine@1009 : Record 99000772;
      ProductionOrder@1011 : Record 5405;
      ProdOrderComp@1012 : Record 5407;
      WarehouseRequest@1013 : Record 5765;
      WhseActivityHeader@1017 : Record 5766;
      WhseActivityLine@1018 : Record 5767;
      BinType@1019 : Record 7303;
      Zone@1020 : Record 7300;
    BEGIN
      MessageCounter := 0;

      // create two bins- one of them being dedicated. Assign dedicated bin to To-Production Bin Code
      IF Location."Directed Put-away and Pick" THEN BEGIN
        BinType.SETRANGE(Receive,FALSE);
        BinType.SETRANGE(Ship,FALSE);
        BinType.SETRANGE("Put Away",FALSE);
        BinType.SETRANGE(Pick,TRUE);
        BinType.FINDFIRST;
        Zone.SETRANGE("Location Code",Location.Code);
        Zone.SETRANGE("Bin Type Code",BinType.Code);
        Zone.FINDLAST; // PICK ZONE
        CreateBin(Bin,Location.Code,Zone.Code,Zone."Bin Type Code");
        BinType.SETRANGE(Pick,FALSE);
        BinType.FINDFIRST;
        Zone.SETRANGE("Bin Type Code",BinType.Code);
        Zone.FINDLAST; // PRODUCTION ZONE
        CreateBin(BinDedicated,Location.Code,Zone.Code,Zone."Bin Type Code");
      END ELSE BEGIN
        CreateBin(Bin,Location.Code,'','');
        CreateBin(BinDedicated,Location.Code,'','');
      END;
      BinDedicated.VALIDATE(Dedicated,TRUE);
      BinDedicated.MODIFY(TRUE);
      Location.VALIDATE("To-Production Bin Code",BinDedicated.Code);
      Location.MODIFY(TRUE);

      // create two items- one a parent of the other
      CreateItem(ItemChild);
      CreateItem(ItemParent);
      LibraryManufacturing.CreateProductionBOMHeader(ProdBOMHeader,ItemParent."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProdBOMHeader,ProdBOMLine,'',ProdBOMLine.Type::Item,ItemChild."No.",1);
      ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
      ProdBOMHeader.MODIFY(TRUE);
      ItemParent.VALIDATE("Production BOM No.",ProdBOMHeader."No.");
      ItemParent.MODIFY(TRUE);

      // put in 10 PCS of child item into inventory
      // for invt pick, put into dedicated bin - so that consumption can be posted directly from there
      // for bin mandatory, put into dedicated bin - to make a postable inventory pick directly from dedicated bin
      IF NOT Location."Require Shipment" THEN
        CreateAndPostPositiveAdjustmt(ItemChild,Location.Code,BinDedicated.Code,10)
      ELSE
        // for whse. pick, put into non-dedicated bin - to make warehouse pick to the dedicated bin
        // for WMS, put into non-dedicated bin - to make warehouse pick to the dedicated bin
        CreateAndPostPositiveAdjustmt(ItemChild,Location.Code,Bin.Code,10);

      // Create released prod. order for 1 PCS of PARENT from this location. Refresh and check that bin on the component line is dedicated
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,ProductionOrder.Status::Released,
        ProductionOrder."Source Type"::Item,ItemParent."No.",1);
      ProductionOrder.VALIDATE("Location Code",Location.Code);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      ProdOrderComp.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComp.SETRANGE("Item No.",ItemChild."No.");
      ProdOrderComp.FINDFIRST;
      Assert.AreEqual(BinDedicated.Code,ProdOrderComp."Bin Code",'Unmatched bin code- should be copied from location card');

      // Create pick and register
      WarehouseRequest.SETCURRENTKEY("Source Document","Source No.");
      WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Prod. Consumption");
      WarehouseRequest.SETRANGE("Source No.",ProductionOrder."No.");
      IF NOT Location."Require Shipment" THEN BEGIN
        // for inventory pick,
        IF Location."Require Pick" THEN BEGIN
          // Expect a message- nothing to create. Because pick cannot be created FROM dedicated bin. EXIT
          LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,FALSE,TRUE,FALSE);
          EXIT; // end test case here
        END // For bin mandatory, do nothing
      END ELSE
        IF Location."Require Pick" THEN BEGIN
          // for warehouse picks, create and register pick
          LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
          WhseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
          WhseActivityLine.SETRANGE("Source Subtype",ProductionOrder.Status);
          WhseActivityLine.SETRANGE("Source No.",ProductionOrder."No.");
          WhseActivityLine.FINDFIRST;
          WhseActivityHeader.SETRANGE(Type,WhseActivityLine."Activity Type");
          WhseActivityHeader.SETRANGE("No.",WhseActivityLine."No.");
          WhseActivityHeader.FINDFIRST;
          LibraryWarehouse.RegisterWhseActivity(WhseActivityHeader);
        END;

      // calculate consumption and post
      LibraryManufacturing.CalculateConsumptionForJournal(ProductionOrder,ProdOrderComp,WORKDATE,FALSE);
      LibraryManufacturing.PostConsumptionJournal;
    END;

    [MessageHandler]
    PROCEDURE VSTF190342MsgHndl@51(Message@1000 : Text[1024]);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,VSTF190324Msg1) > 0,'Unexpected message: ' + Message);
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Bin] [SCM]
      Unsupported version tags:
      IT: Unable to Execute
      SE: Unable to Execute
    }
    END.
  }
}

