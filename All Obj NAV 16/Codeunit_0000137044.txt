OBJECT Codeunit 137044 SCM Order Promising
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryManufacturing@1011 : Codeunit 132202;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryInventory@1012 : Codeunit 132201;
      LibraryPurchase@1015 : Codeunit 130512;
      LibrarySales@1014 : Codeunit 130509;
      LibrarySetupStorage@1016 : Codeunit 131009;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryVariableStorage@1013 : Codeunit 131004;
      LibraryRandom@1007 : Codeunit 130440;
      LibraryService@1004 : Codeunit 131902;
      LibraryJob@1005 : Codeunit 131920;
      Assert@1001 : Codeunit 130000;
      LocationCode@1010 : ARRAY [4] OF Code[10];
      isInitialized@1000 : Boolean;
      ErrDateMustBeSame@1008 : TextConst 'ENU=Date Must Be Same.';
      AvailWarningRaisedErr@1009 : TextConst 'ENU=Availability warning must not be raised.';
      AvailWarningNotRaisedErr@1006 : TextConst 'ENU=Availability warning must be raised.';

    [Test]
    PROCEDURE EqualOrderPromising@30();
    BEGIN
      // Creating Order Promising Document where Supply and Demand is equal.
      OrderPromising(0,FALSE);  // Value Important For test.
    END;

    [Test]
    PROCEDURE LessOrderPromising@31();
    BEGIN
      // Creating Order Promising Document where Demand is less than the supply.
      OrderPromising(LibraryRandom.RandDec(100,2),FALSE);  // Value Important For test.
    END;

    [Test]
    PROCEDURE GreatorOrderPromising@18();
    BEGIN
      // Creating Order Promising Document where Demand is Greater than the supply.
      OrderPromising(-LibraryRandom.RandDec(100,2) + 500,TRUE);  // Value Important For test.
    END;

    [Test]
    PROCEDURE LookAheadSinglePurchOrder@13();
    BEGIN
      // Create One Demand and One Supply Document.Run Available to Promise
      // Verify the Earliest Shipment date in Order Promising Table.
      LookAheadSetup(1,1,FALSE);
    END;

    [Test]
    PROCEDURE LookAhdTwoPurchOneSalesOrder@38();
    BEGIN
      // Create One Demand and Two Supply Document.Run Available to Promise
      // Verify the Earliest Shipment date in Order Promising Table.
      LookAheadSetup(1,2,TRUE);
    END;

    [Test]
    PROCEDURE LookAhTwoPurchTwoSalesOrder@39();
    BEGIN
      // Create Two Demand and Two Supply Document.Run Available to Promise
      // Verify the Earliest Shipment date in Order Promising Table.
      LookAheadSetup(2,2,TRUE);
    END;

    [Test]
    PROCEDURE LookAhdThreePurchTwoSalesOrder@41();
    BEGIN
      // Create Two Demand and Three Supply Document.Run Available to Promise
      // Verify the Earliest Shipment date in Order Promising Table.
      LookAheadSetup(2,3,TRUE);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityHandler)]
    PROCEDURE CheckAvailabilityAfterUpdateShipmentDate@11();
    VAR
      CompanyInformation@1002 : Record 79;
      Item@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      Quantity@1005 : Decimal;
      Quantity2@1007 : Decimal;
    BEGIN
      // Test to verify the Total Quantity is correct in Check Availability page after changing Shipment Date on Sales Order.

      // Setup: Enable Stockout Warning In Sales & Receivables Setup.
      // Create two Sales Orders on Workdate.
      Initialize;
      UpdateSalesStockoutWarning(TRUE);

      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(10);
      CreateSalesOrder(SalesHeader,WORKDATE,'',Item."No.",Quantity);
      CreateSalesOrder(SalesHeader,WORKDATE,'',Item."No.",Quantity2);

      // Update the Shipment Date later than WORKDATE + CompanyInformation."Check-Avail. Period Calc." on the 2nd Sales Order.
      // To trigger Check Availablity warning we need to modify it on page.
      CompanyInformation.GET;
      LibraryVariableStorage.Enqueue(FALSE);
      UpdateShipmentDateOnSalesOrderPage(
        SalesHeader."No.",CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(10,20)) + 'D>',
          CALCDATE(CompanyInformation."Check-Avail. Period Calc.",WORKDATE)));

      // Exercise & Verify: Change the Shipment Date back to the original date for the 2nd Sales Order.
      // The Check Availablity warning message would pop up.
      // Verify the Total Quantity in Check Availablity page by CheckAvailabilityHandler.
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(-(Quantity + Quantity2));
      UpdateShipmentDateOnSalesOrderPage(SalesHeader."No.",WORKDATE);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityHandler,MessageHandler)]
    PROCEDURE AvailabilityWarningRisesAfterSetShipmentDateBeforeReceiptDate@42();
    VAR
      SalesHeader@1002 : Record 36;
      SalesQuantity@1000 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Shipment Date] [Availability]
      // [SCENARIO 379282] Availability warning should be raised if Shipment Date in Sales Line is changed from the date after the Purchase Receipt to the date preceding it.
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      UpdateSalesStockoutWarning(TRUE);

      // [GIVEN] Purchase Order with Expected Receipt Date (i.e. Date1 = 05-05-15).
      // [GIVEN] Sales Order with Shipment Date which is later than Receipt Date in Purchase Order (i.e. Date2 = 10-05-15).
      CreatePurchAndSalesOrder(SalesHeader,SalesQuantity,LibraryRandom.RandDate(10));

      // [WHEN] Update Shipment Date in Sales Line to an earlier date (i.e. Date3 = 01-05-15).
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(-SalesQuantity);
      UpdateShipmentDateOnSalesOrderPage(SalesHeader."No.",LibraryRandom.RandDate(-10));

      // [THEN] There is a lack of Inventory on Date3. Availability warning is raised.
      // Verification is done in CheckAvailabilityHandler.
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityHandler,MessageHandler)]
    PROCEDURE AvailabilityWarningRisesAfterShipmentDateIsSetAndUpdatedBeforeReceiptDate@34();
    VAR
      SalesHeader@1002 : Record 36;
      SalesQuantity@1000 : Decimal;
    BEGIN
      // [FEATURE] [Sales Order] [Shipment Date] [Availability]
      // [SCENARIO 379282] Availability warning should be raised when Shipment Date in Sales Line is set and updated with a date preceding Purchase Receipt Date.
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      UpdateSalesStockoutWarning(TRUE);

      // [GIVEN] Purchase Order with Expected Receipt Date (i.e. Date1 = 05-05-15).
      // [GIVEN] Sales Order with Shipment Date preceding Receipt Date in Purchase Order (i.e. Date2 = 01-05-15). Lack of Inventory on Date2.
      CreatePurchAndSalesOrder(SalesHeader,SalesQuantity,LibraryRandom.RandDate(-10));

      // [WHEN] Update Shipment Date in Sales Line so it stays before Expected Receipt Date (i.e. Date3 = 02-05-15).
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(-SalesQuantity);
      UpdateShipmentDateOnSalesOrderPage(SalesHeader."No.",LibraryRandom.RandDate(-10));

      // [THEN] There is a lack of Inventory on Date3. Availability warnings is raised.
      // Verification is done in CheckAvailabilityHandler.
    END;

    [Test]
    PROCEDURE ShipmentDateInFactBoxIsUpdatedWhenShipmentDateInSalesLineIsUpdated@24();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1004 : Record 36;
      NewShipmentDate@1000 : Date;
    BEGIN
      // [FEATURE] [Sales] [Shipment Date] [UI]
      // [SCENARIO 379282] Shipment Date in Factbox should be updated when Shipment Date in Sales Line is updated.
      Initialize;
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Sales Order with Shipment Date = Date1.
      CreateSalesOrder(SalesHeader,WORKDATE,'',Item."No.",LibraryRandom.RandInt(10));

      // [WHEN] Update Shipment Date in Sales Line with Date2.
      NewShipmentDate := LibraryRandom.RandDate(10);
      LibraryVariableStorage.Enqueue(FALSE);
      UpdateShipmentDateOnSalesOrderPage(SalesHeader."No.",NewShipmentDate);

      // [THEN] Sales Line Factbox in Sales Header page is updated and shows Shipment Date = Date2.
      Assert.AreEqual(NewShipmentDate,GetShipmentDateFromFactBox(SalesHeader."No."),ErrDateMustBeSame);
    END;

    [Test]
    PROCEDURE OrderPromisingExpectedRcptDateAfterRequestedDeliveryDate@16();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      Qty@1001 : Decimal;
    BEGIN
      // [SCENARIO 376713] Calculate order promising when expected receipt date is later than requested delivery date
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);

      // [GIVEN] Sales order with Shipment Date = "D", Requested Delivery Date = "D" + 1
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE + 1,WORKDATE);

      // [GIVEN] Purchase order with Expected Receipt Date = "D" + 2
      CreatePurchaseOrder(PurchaseHeader,WORKDATE + 2,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the sales order
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] Earliest shipment date = "D" + 2
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",PurchaseHeader."Expected Receipt Date");
    END;

    [Test]
    PROCEDURE OrderPromisingShipmentDateAfterExpectedReceipt@53();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      Qty@1001 : Decimal;
    BEGIN
      // [SCENARIO 376713] Calculate order promising when expected receipt date is later than requested delivery date and shipment date is after expected receipt
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);

      // [GIVEN] Sales order with Requested Delivery Date = "D", Shipment Date = "D" + 2
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE,WORKDATE + 2);

      // [GIVEN] Purchase order with Expected Receipt Date = "D" + 1
      CreatePurchaseOrder(PurchaseHeader,WORKDATE + 1,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the sales order
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] Earliest shipment date = "D"
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",SalesHeader."Requested Delivery Date");
    END;

    [Test]
    PROCEDURE OrderPromisingRequestedDeliveryDateIsNonWorking@61();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      BaseCalendar@1003 : Record 7600;
      Qty@1004 : Decimal;
    BEGIN
      // [FEATURE] [Base Calendar]
      // [SCENARIO 376713] Calculate order promising when requested delivery date is a non-working day
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);

      // [GIVEN] Sales order with Shipment Date = "D", Requested Delivery Date = "D"
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE + 1,WORKDATE + 1);

      // [GIVEN] Create base calendar and mark date "D" as non-working
      LibraryService.CreateBaseCalendar(BaseCalendar);
      CreateNonWorkingDayInBaseCalendar(BaseCalendar.Code,SalesHeader."Shipment Date");
      UpdateCompanyInfoBaseCalendarCode(BaseCalendar.Code);

      // [GIVEN] Purchase order with Expected Receipt Date = "D" - 1
      CreatePurchaseOrder(PurchaseHeader,WORKDATE,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the sales order
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] Earliest shipment date = "D" + 1 (next working day)
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",SalesHeader."Shipment Date" + 1);
    END;

    [Test]
    PROCEDURE OrderPromisingRequestedDeliveryDateBeforeExpectedReceiptNonWorking@55();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      BaseCalendar@1003 : Record 7600;
      Qty@1004 : Decimal;
    BEGIN
      // [FEATURE] [Base Calendar]
      // [SCENARIO 376713] Calculate order promising when requested delivery date is before expected receipt, and both dates are non-working
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);

      // [GIVEN] Sales order with Requested Delivery Date = "D"
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE,WORKDATE);

      // [GIVEN] Create base calendar and mark "D" and "D" + 2 days as non-working
      LibraryService.CreateBaseCalendar(BaseCalendar);
      CreateNonWorkingDayInBaseCalendar(BaseCalendar.Code,SalesHeader."Shipment Date");
      CreateNonWorkingDayInBaseCalendar(BaseCalendar.Code,SalesHeader."Shipment Date" + 2);
      UpdateCompanyInfoBaseCalendarCode(BaseCalendar.Code);

      // [GIVEN] Create purchase order with Expected Receipt Date = "D" + 2
      CreatePurchaseOrder(PurchaseHeader,SalesHeader."Shipment Date" + 2,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the sales order
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] Earliest shipment date = "D" + 3 (next working day after the expected receipt)
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",PurchaseHeader."Expected Receipt Date" + 1);
    END;

    [Test]
    PROCEDURE SalesOrdersWithRequestedDeliveryOutsidePromisingPeriodNotIncluded@69();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      Qty@1006 : Decimal;
    BEGIN
      // [SCENARIO 376713] When calculating order promising for a period, sales orders with requested delivery date outside of this period are not included
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);

      // [GIVEN] Sales order: Quantity = "X", Requested Delivery Date = "D" + 3 days
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE + 3,WORKDATE);
      // [GIVEN] Sales order: Quantity = "X", Requested Delivery Date = "D" days
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE,WORKDATE);

      // [GIVEN] Create purchase order: Quantity = "X", Expected Receipt Date = "D" + 2
      CreatePurchaseOrder(PurchaseHeader,WORKDATE + 2,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the second sales order (date = "D")
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] "Earliest Shipment Date" = "D" + 2
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",PurchaseHeader."Expected Receipt Date");
    END;

    [Test]
    PROCEDURE SalesOrdersWithRequestedDeliveryWithinPromisingPeriodIncluded@71();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      Qty@1006 : Decimal;
    BEGIN
      // [SCENARIO 376713] When calculating order promising for a period, all sales orders with requested delivery date within this period are included
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);
      // [GIVEN] Sales order: Quantity = "X", Requested Delivery Date = "D"
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE,WORKDATE);
      // [GIVEN] Sales order: Quantity = "X", Requested Delivery Date = "D" + 2 days
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,WORKDATE + 2,WORKDATE);

      // [GIVEN] Create purchase order: Quantity = "X", Expected Receipt Date = "D" + 1
      CreatePurchaseOrder(PurchaseHeader,WORKDATE + 1,'',Item."No.",1);

      // [WHEN] Calculate order promising line for the second sales order (date = "D" + 2)
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] "Earliest Shipment Date" = 0D (order cannot be fulfilled)
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",0D);
    END;

    [Test]
    PROCEDURE OutboundWhseHandlingTimeConsideredWhenCalculatingOrderPromising@5();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      DeliveryDate@1001 : Date;
      Qty@1003 : Decimal;
    BEGIN
      // [SCENARIO 376713] "Outbound Whse. Handling Time" and "Shipping Time" are considered when calculating order promising
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);
      DeliveryDate := CALCDATE('<1M>',WORKDATE);

      // [GIVEN] Sales order with Requested Delivery Date = "D"
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,DeliveryDate,DeliveryDate + 1);

      // [GIVEN] Set "Outbound Whse. Handling Time" = "1D" and "Shipping Time" = "1W" in the sales order
      UpdateSalesLineShippingCalculation(SalesHeader."Document Type",SalesHeader."No.",'<1D>','<1W>');

      // [GIVEN] Purchase order with "Expected Receipt Date" = "D" - 1
      CreatePurchaseOrder(PurchaseHeader,WORKDATE,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the sales order
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] "Earliest Shipment Date" = "D" - 1W - 1D
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",CALCDATE('<-1W-1D>',DeliveryDate));
    END;

    [Test]
    PROCEDURE ShippingTimeConsideredInOrderPromisingCalculation@57();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      PurchaseHeader@1000 : Record 38;
      ShipmentDate@1001 : Date;
      Qty@1003 : Decimal;
    BEGIN
      // [SCENARIO] "Shipping Time" is considered in order promising calculation
      Initialize;
      UpdateCompanyInformationCalcBucket(0);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      Qty := LibraryRandom.RandDec(100,2);
      ShipmentDate := WORKDATE + 10;

      // [GIVEN] Sales order with Requested Delivery Date = "D"
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,ShipmentDate,ShipmentDate);
      // [GIVEN] Set shipping time = "5D" on the sales order, planned shipment date becomes "D" - 5
      UpdateSalesLineShippingCalculation(SalesHeader."Document Type",SalesHeader."No.",'','<5D>');

      // [GIVEN] Second sales order with Requested Delivery Date = "D" - 2
      CreateSalesOrderWithRequestedDeliveryDate(SalesHeader,Item."No.",Qty,ShipmentDate - 2,ShipmentDate - 2);

      // [GIVEN] Purchase order with expected delivery date = "D" - 10
      CreatePurchaseOrder(PurchaseHeader,WORKDATE,'',Item."No.",Qty);

      // [WHEN] Calculate order promising line for the second sales order (date = "D" - 2)
      CalcSalesHeaderAvailableToPromise(TempOrderPromisingLine,SalesHeader);

      // [THEN] Earliest shipment date = 0D, order cannot be fulfilled, because planned shipment date in both orders is within the promising period
      TempOrderPromisingLine.TESTFIELD("Earliest Shipment Date",0D);
    END;

    [Test]
    PROCEDURE NotInsertOrderPromisingForItemTypeServiceFromSales@29();
    VAR
      SalesHeader@1004 : Record 36;
      TempOrderPromisingLine@1001 : TEMPORARY Record 99000880;
      AvailabilityManagement@1000 : Codeunit 99000889;
      InventoryItemNo@1002 : Code[20];
      ServiceItemNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 380031] Sales Lines with Items of Type Service aren't applicable to order promising functional.
      Initialize;

      // [GIVEN] Sales order with two items - one of type Inventory, another of type Service.
      InventoryItemNo := LibraryInventory.CreateItemNo; // Item.Type::Inventory
      ServiceItemNo := CreateItemTypeService;           // Item.Type::Service
      CreateSalesOrderForTwoItems(SalesHeader,InventoryItemNo,ServiceItemNo);

      // [WHEN] Transferring Sales Lines to Order Promising Lines
      AvailabilityManagement.SetSalesHeader(TempOrderPromisingLine,SalesHeader);

      // [THEN] Order Promising Lines contain Item of Type Inventory
      TempOrderPromisingLine.SETRANGE("Item No.",InventoryItemNo);
      Assert.RecordIsNotEmpty(TempOrderPromisingLine);

      // [THEN] Order Promising Lines don't contain Item of Type Service
      TempOrderPromisingLine.SETRANGE("Item No.",ServiceItemNo);
      Assert.RecordIsEmpty(TempOrderPromisingLine);
    END;

    [Test]
    PROCEDURE NotInsertOrderPromisingForItemTypeServiceFromJob@47();
    VAR
      Job@1004 : Record 167;
      TempOrderPromisingLine@1001 : TEMPORARY Record 99000880;
      AvailabilityManagement@1000 : Codeunit 99000889;
      InventoryItemNo@1003 : Code[20];
      ServiceItemNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 380031] Job Planning Lines with Items of Type Service aren't applicable to order promising functional.
      Initialize;

      // [GIVEN] Job with two items - one of type Inventory, another of type Service.
      InventoryItemNo := LibraryInventory.CreateItemNo; // Item.Type::Inventory
      ServiceItemNo := CreateItemTypeService;           // Item.Type::Service
      CreateJobForTwoItems(Job,InventoryItemNo,ServiceItemNo);

      // [WHEN] Transferring Job Planning Lines to Order Promising Lines
      AvailabilityManagement.SetJob(TempOrderPromisingLine,Job);

      // [THEN] Order Promising Lines contain Item of Type Inventory
      TempOrderPromisingLine.SETRANGE("Item No.",InventoryItemNo);
      Assert.RecordIsNotEmpty(TempOrderPromisingLine);

      // [THEN] Order Promising Lines don't contain Item of Type Service
      TempOrderPromisingLine.SETRANGE("Item No.",ServiceItemNo);
      Assert.RecordIsEmpty(TempOrderPromisingLine);
    END;

    [Test]
    PROCEDURE AvailWarningNotRaisedWhenSupplyExistsAfterShipmentDateFirstSet@37();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ItemNo@1000 : Code[20];
      NoOfWarningsRaised@1004 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD NOT be raised if a supply exists AFTER the shipment date that covers all demands by the end of the time bucket.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" << "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandInt(10),WORKDATE + 1);
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;

      // [WHEN] Insert new sales line for "Z" units of "I" on WORKDATE. "Z" is covered with inventory "X", but leaves the future demands uncovered.
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE,LibraryRandom.RandIntInRange(50,100));

      // [THEN] Availability warning is not raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(0,NoOfWarningsRaised,AvailWarningRaisedErr);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityModalPageHandler)]
    PROCEDURE AvailWarningNotRaisedWhenSupplyExistsAfterShipmentDateChangedFromLaterDate@49();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD NOT be raised if a supply exists AFTER the shipment date that covers all demands by the end of the time bucket, and the shipment date is changed from the supply date to the date preceding it.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" << "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandInt(10),WORKDATE + 1);

      // [GIVEN] Sales line "SL" for "Z" units of "I" on WORKDATE + 1 day. Overall demanded qty. ("X" + "Z") is not covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE + 1,LibraryRandom.RandIntInRange(50,100));

      // [WHEN] Change the date on "SL" to WORKDATE.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;
      UpdateShipmentDateOnSalesLineAndTriggerAvailCheck(SalesLine,WORKDATE);

      // [THEN] Availability warning is not raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(0,NoOfWarningsRaised,AvailWarningRaisedErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AvailWarningNotRaisedWhenSupplyExistsAfterShipmentDateChangedFromEarlierDate@1001();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD NOT be raised if a supply exists AFTER the shipment date that covers all demands by the end of the time bucket, and the shipment date is changed from the earlier date to the date preceding the supply
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" << "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandInt(10),WORKDATE + 1);

      // [GIVEN] Sales line "SL" for "Z" units of "I" on WORKDATE - 1 day. Overall demanded qty. ("X" + "Z") is not covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE - 1,LibraryRandom.RandIntInRange(50,100));

      // [WHEN] Change the date on "SL" to WORKDATE.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;
      UpdateShipmentDateOnSalesLineAndTriggerAvailCheck(SalesLine,WORKDATE);

      // [THEN] Availability warning is not raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(0,NoOfWarningsRaised,AvailWarningRaisedErr);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityModalPageHandler)]
    PROCEDURE AvailWarningRaisedWhenInsufficientSupplyExistsOnShipmentDateFirstSet@51();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD be raised if a supply exists ON the shipment date that covers all demands by the end of the time bucket, but does not cover future demands within the calc. period.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" << "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandInt(10),WORKDATE + 1);
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;

      // [WHEN] Insert new sales line for "Z" units of "I" on supply date (WORKDATE + 1 day). "Z" is covered with inventory "X", but leaves the future demands uncovered.
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE + 1,LibraryRandom.RandIntInRange(50,100));

      // [THEN] Availability warning is raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(1,NoOfWarningsRaised,AvailWarningNotRaisedErr);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityModalPageHandler)]
    PROCEDURE AvailWarningRaisedWhenInsufficientSupplyExistsOnShipmentDateChangedFromLaterDate@1000();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Avail. warning SHOULD be raised if supply exists ON the shipment date that covers all demands by the end of the time bucket, but not all demands within the calc. period. Shipment date changed from later date to the supply date.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" << "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandInt(10),WORKDATE + 1);

      // [GIVEN] Sales line "SL" for "Z" units of "I" on WORKDATE + 2 days. Overall demanded qty. ("X" + "Z") is not covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE + 2,LibraryRandom.RandIntInRange(50,100));

      // [WHEN] Change the date on "SL" to the supply date (WORKDATE + 1 day).
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;
      UpdateShipmentDateOnSalesLineAndTriggerAvailCheck(SalesLine,WORKDATE + 1);

      // [THEN] Availability warning is raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(1,NoOfWarningsRaised,AvailWarningNotRaisedErr);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityModalPageHandler,MessageHandler)]
    PROCEDURE AvailWarningRaisedWhenInsufficientSupplyExistsOnShipmentDateChangedFromEarlierDate@63();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Avail. warning SHOULD be raised if supply exists ON the shipment date that covers all demands by the end of the time bucket, but not all demands within the calc. period. Shipment date changed from earlier date to the supply dat
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" << "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandInt(10),WORKDATE + 1);

      // [GIVEN] Sales line "SL" for "Z" units of "I" on WORKDATE - 1 day. Overall demanded qty. ("X" + "Z") is not covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE - 1,LibraryRandom.RandIntInRange(50,100));

      // [WHEN] Change the date on "SL" to the supply date (WORKDATE + 1 day).
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;
      UpdateShipmentDateOnSalesLineAndTriggerAvailCheck(SalesLine,WORKDATE + 1);

      // [THEN] Availability warning is raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(1,NoOfWarningsRaised,AvailWarningNotRaisedErr);
    END;

    [Test]
    PROCEDURE AvailWarningNotRaisedWhenSufficientSupplyExistsOnShipmentDateFirstSet@56();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD NOT be raised if a supply exists ON the shipment date that covers all demands within the calc. period.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" > "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandIntInRange(500,1000),WORKDATE + 1);
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;

      // [WHEN] Insert new sales line for "Z" units of "I" on supply date (WORKDATE + 1 day). Overall demanded qty. ("X" + "Z") is covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE + 1,LibraryRandom.RandIntInRange(50,100));

      // [THEN] Availability warning is not raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(0,NoOfWarningsRaised,AvailWarningRaisedErr);
    END;

    [Test]
    PROCEDURE AvailWarningNotRaisedWhenSufficientSupplyExistsOnShipmentDateChangedFromLaterDate@64();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD NOT be raised if a supply exists ON the shipment date that covers all demands within the calc. period and the shipment date of one demand is changed from later date to the supply date.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" > "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandIntInRange(500,1000),WORKDATE + 1);

      // [GIVEN] Sales line "SL" for "Z" units of "I" on WORKDATE + 2 days. Overall demanded qty. ("X" + "Z") is covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE + 2,LibraryRandom.RandIntInRange(50,100));

      // [WHEN] Change the date on "SL" to the supply date (WORKDATE + 1 day).
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;
      UpdateShipmentDateOnSalesLineAndTriggerAvailCheck(SalesLine,WORKDATE + 1);

      // [THEN] Availability warning is not raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(0,NoOfWarningsRaised,AvailWarningRaisedErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AvailWarningNotRaisedWhenSufficientSupplyExistsOnShipmentDateChangedFromEarlierDate@66();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      NoOfWarningsRaised@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Order] [Shipment Date] [Check-Avail. Time Bucket]
      // [SCENARIO 202032] Availability warning SHOULD NOT be raised if a supply exists ON the shipment date that covers all demands within the calc. period and the shipment date of one demand is changed from earlier date to the supply date.
      Initialize;

      // [GIVEN] 2-week long Check.-Avail Calc Period and 1-day long Check-Avail. Time Bucket in Company Information.
      // [GIVEN] Item "I" with "X" units in stock on workdate.
      // [GIVEN] Sales line for "X" units of "I" on the last date of the calc. period (WORKDATE + 13 days).
      // [GIVEN] Purchase order for "Y" units of "I" ("Y" > "X") on WORKDATE + 1 day.
      CreateInventoryDemandAndSupply(
        ItemNo,SalesHeader,LibraryRandom.RandIntInRange(100,200),LibraryRandom.RandIntInRange(500,1000),WORKDATE + 1);

      // [GIVEN] Sales line "SL" for "Z" units of "I" on WORKDATE - 1 day. Overall demanded qty. ("X" + "Z") is covered with "X" + "Y".
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,WORKDATE - 1,LibraryRandom.RandIntInRange(50,100));

      // [WHEN] Change the date on "SL" to the supply date (WORKDATE + 1 day).
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger;
      UpdateShipmentDateOnSalesLineAndTriggerAvailCheck(SalesLine,WORKDATE + 1);

      // [THEN] Availability warning is not raised.
      NoOfWarningsRaised := LibraryVariableStorage.DequeueInteger - NoOfWarningsRaised - 1;
      Assert.AreEqual(0,NoOfWarningsRaised,AvailWarningRaisedErr);
    END;

    LOCAL PROCEDURE Initialize@28();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      UpdateCompSalesManufPurchSetup;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;

      LibrarySetupStorage.Save(DATABASE::"Company Information");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateCompSalesManufPurchSetup@23();
    VAR
      DateFormula@1003 : DateFormula;
    BEGIN
      EVALUATE(DateFormula,'<3M>');  // Values used are important for test.
      UpdateCompanyInformationPeriodCalc(DateFormula);
      UpdateCompanyInformationCalcBucket(1);
      UpdateSalesReceivablesSetup;
      UpdateManufacturingSetup;
      UpdatePurchaseSetup;
    END;

    LOCAL PROCEDURE UpdateCompanyInformationPeriodCalc@1(CheckAvailPeriodCalc@1002 : DateFormula);
    VAR
      CompanyInformation@1003 : Record 79;
    BEGIN
      WITH CompanyInformation DO BEGIN
        GET;
        VALIDATE("Check-Avail. Period Calc.",CheckAvailPeriodCalc);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateCompanyInformationCalcBucket@48(CheckAvailTimeBucket@1001 : 'Day,Week,Month,Quarter,Year');
    VAR
      CompanyInformation@1003 : Record 79;
    BEGIN
      WITH CompanyInformation DO BEGIN
        GET;
        VALIDATE("Check-Avail. Time Bucket",CheckAvailTimeBucket);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateCompanyInfoBaseCalendarCode@72(BaseCalendarCode@1000 : Code[10]);
    VAR
      CompanyInformation@1001 : Record 79;
    BEGIN
      WITH CompanyInformation DO BEGIN
        GET;
        VALIDATE("Base Calendar Code",BaseCalendarCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@14();
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      WITH ManufacturingSetup DO BEGIN
        GET;
        VALIDATE("Normal Starting Time",080000T);
        VALIDATE("Normal Ending Time",160000T);
        VALIDATE("Planned Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@10();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Credit Warnings","Credit Warnings"::"No Warning");
        VALIDATE("Stockout Warning",FALSE);
        VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchaseSetup@36();
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      WITH PurchasesPayablesSetup DO BEGIN
        GET;
        VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalcSalesHeaderAvailableToPromise@62(VAR TempOrderPromisingLine@1000 : TEMPORARY Record 99000880;SalesHeader@1001 : Record 36);
    VAR
      AvailabilityMgt@1002 : Codeunit 99000889;
    BEGIN
      AvailabilityMgt.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcAvailableToPromise(TempOrderPromisingLine);
    END;

    LOCAL PROCEDURE CreateUpdateLocations@3();
    VAR
      Location@1000 : Record 14;
      k@1003 : Integer;
    BEGIN
      // Values Used are important for Test.

      FOR k := 1 TO 4 DO BEGIN
        LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
        LocationCode[k] := Location.Code;
      END;

      // Update Locations.
      UpdateLocation(Location,TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderItemSetup@35(VAR Item@1003 : Record 27;NoBOMLine@1000 : Integer);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      RoutingHeader@1002 : Record 99000763;
    BEGIN
      // Create Item, Routing and Production BOM with two lines.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateRouting(RoutingHeader);
      CreateProdBOM(ProductionBOMHeader,Item."Replenishment System"::Purchase,Item."Base Unit of Measure",NoBOMLine);
      UpdateItem(Item,ProductionBOMHeader."No.",RoutingHeader."No.");
    END;

    LOCAL PROCEDURE CreateItem@33(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      // Random values used are important for test.
      WITH Item DO BEGIN
        LibraryManufacturing.CreateItemManufacturing(
          Item,"Costing Method"::Standard,LibraryRandom.RandDec(50,2),"Reordering Policy","Flushing Method"::Manual,'','');
        VALIDATE("Replenishment System",ReplenishmentSystem);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateNonWorkingDayInBaseCalendar@92(BaseCalendarCode@1001 : Code[10];CalendarChangeDate@1002 : Date);
    VAR
      BaseCalendarChange@1000 : Record 7601;
    BEGIN
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendarCode,BaseCalendarChange."Recurring System"::"Annual Recurring",
        CalendarChangeDate,BaseCalendarChange.Day::" ");
      BaseCalendarChange.VALIDATE(Nonworking,TRUE);
      BaseCalendarChange.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdBOM@32(VAR ProductionBOMHeader@1000 : Record 99000771;ReplenishmentSystem@1006 : Option;BaseUnitOfMeasure@1005 : Code[10];NoBOMLine@1007 : Integer);
    VAR
      ManufacturingSetup@1002 : Record 99000765;
      ProductionBOMLine@1003 : Record 99000772;
      Item@1010 : Record 27;
      ItemNo@1008 : ARRAY [5] OF Code[20];
      Count@1009 : Integer;
    BEGIN
      ManufacturingSetup.GET;
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);

      FOR Count := 1 TO NoBOMLine DO BEGIN
        CreateItem(Item,ReplenishmentSystem);
        ItemNo[Count] := Item."No.";
        LibraryManufacturing.CreateProductionBOMLine(
          ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo[Count],1);
      END;

      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRouting@27(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      MachineCenter@1002 : Record 99000758;
    BEGIN
      ManufacturingSetup.GET;
      CreateSetupWorkCenter(WorkCenter);
      CreateSetupMachineCenter(MachineCenter,WorkCenter."No.");

      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");

      // Certify Routing after Routing lines creation.
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@26(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random is used, values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateSetupWorkCenter@25(VAR WorkCenter@1001 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Flushing Method",WorkCenter."Flushing Method"::Manual);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSetupMachineCenter@2(VAR MachineCenter@1003 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random values used are important for test.Calculate calendar.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,105); // Value used is important for test.
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@9(ItemNo@1004 : Code[20];LocationCode@1005 : Code[10];Qty@1006 : Decimal);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Create Item Journal to populate Item Quantity.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateOrderPromisingSetups@17(VAR Item@1002 : Record 27;VAR ShipmentDate@1000 : Date);
    BEGIN
      // Create Locations and update Inventory Posting setups of these Locations.
      CreateUpdateLocations;
      CreateProdOrderItemSetup(Item,3);

      // Create Inventory for Item. Create Documents for generating Demand and Suply.
      CreateAndPostItemJournalLine(Item."No.",LocationCode[1],LibraryRandom.RandDec(100,2));
      CreateAndPostItemJournalLine(Item."No.",LocationCode[1],LibraryRandom.RandDec(100,2));

      ShipmentDate := WORKDATE;
      CreateSupplyDemandDocuments(Item,ShipmentDate);
    END;

    LOCAL PROCEDURE CreateSupplyDemandDocuments@6(VAR Item@1000 : Record 27;VAR ShipmentDate@1003 : Date);
    VAR
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1005 : Record 38;
      ProductionOrder@1004 : Record 5405;
      TransferHeader@1006 : Record 5740;
    BEGIN
      // Create Sales Order.
      CreateSalesOrder(SalesHeader,ShipmentDate,'',Item."No.",LibraryRandom.RandDec(5,2));

      // Create Purchase Order.
      CreatePurchaseOrder(
        PurchaseHeader,CALCDATE('<' + FORMAT(RANDOM(10) + 5) + 'D>',ShipmentDate),LocationCode[1],Item."No.",
        LibraryRandom.RandDec(50,2));

      // Create Sales Order.
      CLEAR(SalesHeader);
      CreateSalesOrder(
        SalesHeader,CALCDATE('<' + FORMAT(RANDOM(10) + 5) + 'D>',ShipmentDate),'',Item."No.",
        LibraryRandom.RandDec(5,2));

      // Create Production Order.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandInt(5));

      // Create Transfer Orders.
      CreateTransferOrder(
        TransferHeader,CALCDATE('<' + FORMAT(RANDOM(10) + 5) + 'D>',ShipmentDate),
        LocationCode[1],LocationCode[2],LocationCode[4],Item."No.");
      CreateTransferOrder(
        TransferHeader,CALCDATE('<' + FORMAT(RANDOM(10) + 5) + 'D>',ShipmentDate),
        LocationCode[2],LocationCode[3],LocationCode[4],Item."No.");
      ShipmentDate := TransferHeader."Shipment Date";
    END;

    LOCAL PROCEDURE CreateSupplyDocuments@43(ItemNo@1002 : Code[20];ShipmentDate@1001 : Date;NoOfDocuments@1000 : Integer);
    VAR
      PurchaseHeader@1003 : Record 38;
      i@1004 : Integer;
    BEGIN
      FOR i := 1 TO NoOfDocuments DO
        CreatePurchaseOrder(
          PurchaseHeader,CALCDATE('<' + FORMAT(RANDOM(10) + 5) + 'D>',ShipmentDate),LocationCode[1],ItemNo,
          LibraryRandom.RandDec(50,2));
    END;

    LOCAL PROCEDURE CreateDemandDocuments@44(VAR Item@1000 : Record 27;VAR SalesHeader@1003 : Record 36;ShipmentDate@1002 : Date;NoOfDocuments@1001 : Integer);
    VAR
      i@1004 : Integer;
      SalesOrderQty@1005 : Decimal;
    BEGIN
      FOR i := 1 TO NoOfDocuments DO BEGIN
        CLEAR(SalesHeader);
        Item.CALCFIELDS(Inventory,"Qty. on Sales Order");
        SalesOrderQty := Item.Inventory - Item."Qty. on Sales Order";
        CreateSalesOrder(SalesHeader,ShipmentDate,LocationCode[1],Item."No.",SalesOrderQty);
      END;
    END;

    LOCAL PROCEDURE CreatePurchAndSalesOrder@59(VAR SalesHeader@1002 : Record 36;VAR SalesQuantity@1001 : Decimal;ShipmentDate@1000 : Date);
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrder(PurchaseHeader,WORKDATE,'',Item."No.",LibraryRandom.RandIntInRange(50,100));

      SalesQuantity := LibraryRandom.RandInt(50); // no more than purchased to prevent availability warning for insufficient quantity
      CreateSalesOrder(SalesHeader,ShipmentDate,'',Item."No.",SalesQuantity);
    END;

    LOCAL PROCEDURE CreateInventoryDemandAndSupply@81(VAR ItemNo@1002 : Code[20];VAR SalesHeader@1001 : Record 36;InventoryQty@1003 : Decimal;SupplyQty@1007 : Decimal;SupplyDate@1008 : Date);
    VAR
      SalesLine@1005 : Record 37;
      PurchaseHeader@1004 : Record 38;
      AvailCalcPeriod@1009 : DateFormula;
      i@1000 : Integer;
    BEGIN
      EVALUATE(AvailCalcPeriod,'<2W>');
      UpdateCompanyInformationPeriodCalc(AvailCalcPeriod);
      UpdateCompanyInformationCalcBucket(0);
      UpdateSalesStockoutWarning(TRUE);
      FOR i := 0 TO 5 DO
        LibraryVariableStorage.Enqueue(i); // this lets us see how many avail. warnings are raised during the test

      ItemNo := LibraryInventory.CreateItemNo;
      CreateAndPostItemJournalLine(ItemNo,'',InventoryQty);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateSalesLineWithShipmentDateAndTriggerAvailCheck(
        SalesLine,SalesHeader,ItemNo,CALCDATE(AvailCalcPeriod,WORKDATE) - 1,InventoryQty);

      CreatePurchaseOrder(PurchaseHeader,SupplyDate,'',ItemNo,SupplyQty);
    END;

    LOCAL PROCEDURE GetShipmentDateFromFactBox@74(SalesHeaderNo@1001 : Code[20]) ShipmentDate : Date;
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeaderNo);
      EVALUATE(ShipmentDate,SalesOrder."Sales Line FactBox"."Shipment Date".VALUE);
      SalesOrder.CLOSE;
    END;

    LOCAL PROCEDURE FindLastOperationNo@19(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE OrderPromising@22(DemandQuantity@1000 : Decimal;DemandMoreThanSupply@1007 : Boolean);
    VAR
      Item@1012 : Record 27;
      SalesHeader@1008 : Record 36;
      TempOrderPromisingLine@1005 : TEMPORARY Record 99000880;
      AvailabilityMgt@1004 : Codeunit 99000889;
      SalesOrderQty@1006 : Decimal;
      ShipmentDate@1001 : Date;
    BEGIN
      Initialize;
      CreateOrderPromisingSetups(Item,ShipmentDate);

      // Create One Demand Documents.
      Item.CALCFIELDS(Inventory,"Qty. on Sales Order");
      SalesOrderQty := ABS(Item.Inventory - Item."Qty. on Sales Order" - DemandQuantity);
      CreateSalesOrder(SalesHeader,ShipmentDate,LocationCode[1],Item."No.",SalesOrderQty);

      // Exercise: Run Available to Promise.
      AvailabilityMgt.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcAvailableToPromise(TempOrderPromisingLine);

      // Verify: Verify the Earliest Shipment date in Order Promising Table.
      VerifyAvailableToPromise(SalesHeader,TempOrderPromisingLine."Earliest Shipment Date",DemandMoreThanSupply);
    END;

    LOCAL PROCEDURE LookAheadSetup@45(NoOfSupplyDocuments@1000 : Integer;NoOfDemandDocuments@1001 : Integer;DemandMoreThanSupply@1002 : Boolean);
    VAR
      SalesHeader@1005 : Record 36;
      TempOrderPromisingLine@1008 : TEMPORARY Record 99000880;
      Item@1004 : Record 27;
      AvailabilityMgt@1007 : Codeunit 99000889;
      ShipmentDate@1003 : Date;
    BEGIN
      // Create Demand Documents.
      Initialize;
      CreateOrderPromisingSetups(Item,ShipmentDate);

      CreateDemandDocuments(Item,SalesHeader,ShipmentDate,NoOfDemandDocuments);

      // Create Supply Documents.
      CreateSupplyDocuments(Item."No.",ShipmentDate,NoOfSupplyDocuments);

      // Exercise: Run Available to Promise.
      AvailabilityMgt.SetSalesHeader(TempOrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcAvailableToPromise(TempOrderPromisingLine);

      // Verify: Verify the Earliest Shipment date in Order Promising Table.
      VerifyAvailableToPromise(SalesHeader,TempOrderPromisingLine."Earliest Shipment Date",DemandMoreThanSupply);
    END;

    LOCAL PROCEDURE UpdateItem@7(VAR Item@1000 : Record 27;ProductionBOMHeaderNo@1001 : Code[20];RoutingNo@1002 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMHeaderNo);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocation@8(VAR Location@1000 : Record 14;UseAsInTransit@1001 : Boolean);
    BEGIN
      Location.VALIDATE("Use As In-Transit",UseAsInTransit);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLineShippingCalculation@99(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];WhseHandlingTimeFormula@1003 : Text;ShippingTimeFormula@1004 : Text);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        EVALUATE("Outbound Whse. Handling Time",WhseHandlingTimeFormula);
        EVALUATE("Shipping Time",ShippingTimeFormula);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesOrderPage@40(SalesHeaderNo@1001 : Code[20];ShipmentDate@1003 : Date);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeaderNo);
      SalesOrder.SalesLines."Shipment Date".SETVALUE(ShipmentDate); // Trigger the Check Availability warning.
      SalesOrder.CLOSE;
    END;

    LOCAL PROCEDURE UpdateSalesStockoutWarning@46(StockoutWarning@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@15(VAR PurchaseHeader@1004 : Record 38;ReceiptDate@1003 : Date;LocationCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      CLEAR(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Expected Receipt Date",ReceiptDate);
      PurchaseHeader.VALIDATE("Due Date",ReceiptDate);
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrder@4(VAR SalesHeader@1008 : Record 36;ShipmentDate@1000 : Date;LocationCode@1001 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithRequestedDeliveryDate@65(VAR SalesHeader@1000 : Record 36;ItemNo@1003 : Code[20];Qty@1004 : Decimal;RequestedDeliveryDate@1001 : Date;ShipmentDate@1002 : Date);
    BEGIN
      CreateSalesOrder(SalesHeader,WORKDATE,'',ItemNo,Qty);
      SalesHeader.VALIDATE("Requested Delivery Date",RequestedDeliveryDate);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@20(VAR TransferHeader@1004 : Record 5740;ShipmentDate@1008 : Date;FromLocation@1000 : Code[10];ToLocation@1001 : Code[10];InTransitCode@1002 : Code[10];ItemNo@1007 : Code[20]);
    VAR
      TransferLine@1005 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,InTransitCode);
      TransferHeader.VALIDATE("Shipment Date",ShipmentDate);
      TransferHeader.MODIFY(TRUE);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE CreateItemTypeService@129() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateSalesOrderForTwoItems@50(VAR SalesHeader@1000 : Record 36;ItemNo1@1001 : Code[20];ItemNo2@1002 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      InsertSalesLineForItemToDoc(SalesHeader,ItemNo1,LibraryRandom.RandInt(10));
      InsertSalesLineForItemToDoc(SalesHeader,ItemNo2,LibraryRandom.RandInt(10));
    END;

    PROCEDURE CreateJobForTwoItems@68(VAR Job@1000 : Record 167;ItemNo1@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      JobTask@1005 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      InsertJobPlanningLineForItemToDoc(JobTask,ItemNo1,LibraryRandom.RandInt(10));
      InsertJobPlanningLineForItemToDoc(JobTask,ItemNo2,LibraryRandom.RandInt(10));
    END;

    PROCEDURE InsertSalesLineForItemToDoc@60(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    PROCEDURE InsertJobPlanningLineForItemToDoc@78(VAR JobTask@1004 : Record 1001;ItemNo@1002 : Code[20];Quantity@1001 : Decimal);
    VAR
      JobPlanningLine@1003 : Record 1003;
    BEGIN
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE("No.",ItemNo);
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineWithShipmentDateAndTriggerAvailCheck@82(VAR SalesLine@1002 : Record 37;SalesHeader@1001 : Record 36;ItemNo@1000 : Code[20];ShipmentDate@1004 : Date;Qty@1005 : Decimal);
    VAR
      ItemCheckAvail@1003 : Codeunit 311;
    BEGIN
      LibrarySales.CreateSalesLineWithShipmentDate(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,ShipmentDate,Qty);
      ItemCheckAvail.SalesLineCheck(SalesLine);
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesLineAndTriggerAvailCheck@97(VAR SalesLine@1000 : Record 37;NewShipmentDate@1001 : Date);
    VAR
      ItemCheckAvail@1002 : Codeunit 311;
    BEGIN
      SalesLine.FIND;
      SalesLine.VALIDATE("Shipment Date",NewShipmentDate);
      ItemCheckAvail.SalesLineCheck(SalesLine);
    END;

    LOCAL PROCEDURE VerifyAvailableToPromise@21(SalesHeader@1002 : Record 36;EarliestShipmentDate@1000 : Date;DemandMoreThanSupply@1004 : Boolean);
    VAR
      ActualEarliestShipmentDate@1003 : Date;
    BEGIN
      IF NOT DemandMoreThanSupply THEN BEGIN
        IF SalesHeader."Shipment Date" <> 0D THEN
          ActualEarliestShipmentDate := SalesHeader."Shipment Date"
        ELSE
          ActualEarliestShipmentDate := SalesHeader."Order Date";
      END;

      Assert.AreEqual(EarliestShipmentDate,ActualEarliestShipmentDate,ErrDateMustBeSame);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@12(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE CheckAvailabilityHandler@54(VAR CheckAvailability@1000 : TestPage 342);
    VAR
      TotalQuantity@1001 : Variant;
      CheckTotalQty@1002 : Variant;
      CheckTotalQuantity@1003 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(CheckTotalQty);
      CheckTotalQuantity := CheckTotalQty;
      IF CheckTotalQuantity THEN BEGIN
        LibraryVariableStorage.Dequeue(TotalQuantity);
        CheckAvailability.TotalQuantity.ASSERTEQUALS(TotalQuantity);
      END;
      CheckAvailability.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckAvailabilityModalPageHandler@94(VAR CheckAvailability@1000 : TestPage 342);
    BEGIN
      LibraryVariableStorage.DequeueInteger;
      CheckAvailability.Yes.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Availability] [Available to Promise] [SCM]
      Test for Order Promising:
         1. Check Order Promising Date For Sales Document with Exactly Needed Quantity
         2. Check Order Promising Date For Sales Document with Less Than Needed Quantity.
         3. Check Order Promising Date For Sales Document with More Than Needed Quantity.
         4. Check Order Promising Date For Sales Document with Look ahead bucket one document.
         5. Check Order Promising Date For Sales Document with Look ahead bucket Two document.
         6. Check Order Promising Date For three Sales Document with Look ahead bucket Two document.
         7. Check Order Promising Date For two Sales Document with Look ahead bucket Three document.
         8. Test to verify the Total Quantity is correct in Check Availability page after changing Shipment Date on Sales Order.

        Covers Test cases: 231364
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        EqualOrderPromising
        LessOrderPromising                 135396
        GreatorOrderPromising              135397
        OrderPromising                     135395
        LookAheadSinglePurchOrder          135398,135399
        LookAhdTwoPurchOneSalesOrder       135400,135401
        LookAhTwoPurchTwoSalesOrder        135402
        LookAhdThreePurchTwoSalesOrder     135403

        Covers Test cases for hotfix bug
        --------------------------------------------------------------------------------------
        Test Function Name                                          TFS ID
        --------------------------------------------------------------------------------------
        CheckAvailabilityAfterUpdateShipmentDate                    100443
    }
    END.
  }
}

