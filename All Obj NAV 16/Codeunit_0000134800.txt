OBJECT Codeunit 134800 Pos. Pay Test Unit
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1001 : Codeunit 130440;

    [Test]
    PROCEDURE TestPositivePayExportCodeNeg@2();
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      // [SCENARIO 122833]  Test the Pos Pay Export Code is invalid if it does not exist
      BankAccount.INIT;
      ASSERTERROR BankAccount.VALIDATE("Positive Pay Export Code",COPYSTR(FORMAT(CREATEGUID),1,20));
    END;

    [Test]
    PROCEDURE TestPositivePayExportCodePos@3();
    VAR
      BankAccount@1000 : Record 270;
      BankExportImportSetup@1002 : Record 1200;
    BEGIN
      // [SCENARIO 122833]  Test the Pos Pay Export Code is valid when exists in the Bank Export/Import Setup
      // [GIVEN] Create the Bank Export/Import Setup to validate
      BankExportImportSetup.INIT;
      BankExportImportSetup.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankExportImportSetup.Direction := BankExportImportSetup.Direction::"Export-Positive Pay";
      BankExportImportSetup.INSERT;

      // [WHEN] Positive Pay Export Code is a valid
      BankAccount.INIT;
      BankAccount.VALIDATE("Positive Pay Export Code",BankExportImportSetup.Code);

      // [THEN] Validation
      BankAccount.TESTFIELD("Positive Pay Export Code",BankExportImportSetup.Code);
    END;

    [Test]
    PROCEDURE TestPositivePayExportCodeInvalid@4();
    VAR
      BankAccount@1001 : Record 270;
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      // [SCENARIO 122833]  Test the Pos Pay Export Code is not valid even when it exists but is not of Type "Export-Positive Pay"
      // [GIVEN] Bank Eport/Import Setup.Code exists but create the Code so it is not a valid type
      BankExportImportSetup.INIT;
      BankExportImportSetup.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankExportImportSetup.Direction := BankExportImportSetup.Direction::Export;
      BankExportImportSetup.INSERT;

      // [THEN] Bank Account export code fails even though BankExportImportSetup code exists
      BankAccount.INIT;
      ASSERTERROR BankAccount.VALIDATE("Positive Pay Export Code",BankExportImportSetup.Code);
    END;

    [Test]
    PROCEDURE TestBankExportImportCodeNeg@10();
    VAR
      BankExportImportSetup@1000 : Record 1200;
    BEGIN
      // [SCENARIO 122833] From Bank Export/Import Setup, Test that Pos Pay Export Code is invalid if it does not exist
      // [GIVEN] Create the Bank Export/Import Setup record and attempt to add a BankExportImportSetup."Data Exch. Def. Code"
      BankExportImportSetup.INIT;
      BankExportImportSetup.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankExportImportSetup.Direction := BankExportImportSetup.Direction::"Export-Positive Pay";

      // [THEN] Data Exch. Def. Code does not exist
      ASSERTERROR BankExportImportSetup.VALIDATE("Data Exch. Def. Code",COPYSTR(FORMAT(CREATEGUID),1,20));
    END;

    [Test]
    PROCEDURE TestBankExportImportCodePos@11();
    VAR
      DataExchDef@1000 : Record 1222;
      BankExportImportSetup@1001 : Record 1200;
    BEGIN
      // [SCENARIO 122833]  Test the Bank Export Import Setup.Data Exch Def Code is valid when exists in the Data Exchange Def
      // [GIVEN] Create the Data Exchange Def so it is valid
      DataExchDef.INIT;
      DataExchDef.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      DataExchDef.Type := DataExchDef.Type::"Positive Pay Export";
      DataExchDef.INSERT;

      // [WHEN] Data Exch. Def. Code is valid
      BankExportImportSetup.INIT;
      BankExportImportSetup.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankExportImportSetup.Direction := BankExportImportSetup.Direction::"Export-Positive Pay";
      BankExportImportSetup.VALIDATE("Data Exch. Def. Code",DataExchDef.Code);

      // [THEN] Validation
      BankExportImportSetup.TESTFIELD("Data Exch. Def. Code",DataExchDef.Code);
    END;

    [Test]
    PROCEDURE TestBankExportImportCodeInvalid@12();
    VAR
      DataExchDef@1000 : Record 1222;
      BankExportImportSetup@1001 : Record 1200;
    BEGIN
      // [SCENARIO 122833] Test the Bank Export Import Setup.Data Exch Def Code is not valid when it exists but is not of Type "Positive Pay Export"
      // [GIVEN] No Bank Account Exists but create the Data Exchange Def so it is valid
      DataExchDef.INIT;
      DataExchDef.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      DataExchDef.Type := DataExchDef.Type::"Payment Export";
      DataExchDef.INSERT;

      // [THEN] Bank Export Import Setup Data Exchange Def. Code fails even though code exists
      BankExportImportSetup.INIT;
      BankExportImportSetup.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankExportImportSetup.Direction := BankExportImportSetup.Direction::"Export-Positive Pay";
      ASSERTERROR BankExportImportSetup.VALIDATE("Data Exch. Def. Code",DataExchDef.Code);
    END;

    [Test]
    PROCEDURE TestCreateEntriesSumBankAcctNoNeg@1();
    VAR
      PositivePayEntry@1000 : Record 1231;
    BEGIN
      // [SCENARIO 123012] Test the Bank Account No. is invalid if it does not exist
      // [GIVEN] Bank Account does not exist
      PositivePayEntry.INIT;
      ASSERTERROR PositivePayEntry.VALIDATE("Bank Account No.",COPYSTR(FORMAT(CREATEGUID),1,20));

      // [THEN] Validate that the Update dates and times were also not set since the validation failed
      ASSERTERROR PositivePayEntry.TESTFIELD("Upload Date-Time");
    END;

    [Test]
    PROCEDURE TestCreateEntriesSumBankAcctNoPos@5();
    VAR
      PositivePayEntry@1000 : Record 1231;
      BankAccount@1001 : Record 270;
    BEGIN
      // [SCENARIO 123012] Test the Bank Account No. is valid if it exists in the Bank Account.No.
      // [GIVEN] Bank Account does exist
      BankAccount.INIT;
      BankAccount."No." := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankAccount.INSERT;

      // [WHEN] the Summary record also exists
      PositivePayEntry.INIT;
      PositivePayEntry.VALIDATE("Bank Account No.",BankAccount."No.");

      // [THEN] bank account and date-times are updated correctly
      PositivePayEntry.TESTFIELD("Bank Account No.",BankAccount."No.");

      // [THEN] Validate that the Update dates and times were set on the validation of the Bank Account No.
      PositivePayEntry.TESTFIELD("Upload Date-Time");
    END;

    [Test]
    PROCEDURE TestCreateEntriesDetailPos@6();
    VAR
      PositivePayEntry@1002 : Record 1231;
      PositivePayEntryDetail@1001 : Record 1232;
      BankAccount@1000 : Record 270;
    BEGIN
      // [SCENARIO 123012] Test the PositivePayEntryDetail is valid if it exists in the PositivePayEntry for "Bank Account No." and "Upload Date-Time"
      // [GIVEN] Need to create both the Bank Account and the Pos. Pay Upload Summary
      BankAccount.INIT;
      BankAccount."No." := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankAccount.INSERT;

      PositivePayEntry.INIT;
      PositivePayEntry."Bank Account No." := BankAccount."No.";
      PositivePayEntry.INSERT;

      // [WHEN] validate the fields
      PositivePayEntryDetail.INIT;
      PositivePayEntryDetail."Bank Account No." := PositivePayEntry."Bank Account No.";
      PositivePayEntryDetail.VALIDATE("Upload Date-Time",PositivePayEntry."Upload Date-Time");
      PositivePayEntryDetail.VALIDATE("Bank Account No.",BankAccount."No.");

      // [THEN] Test results
      PositivePayEntryDetail.TESTFIELD("Bank Account No.",BankAccount."No.");
      PositivePayEntryDetail.TESTFIELD("Bank Account No.",PositivePayEntry."Bank Account No.");
      PositivePayEntryDetail.TESTFIELD("Upload Date-Time",PositivePayEntry."Upload Date-Time");
    END;

    [Test]
    PROCEDURE TestCreateEntriesDetailNeg@7();
    VAR
      PositivePayEntry@1000 : Record 1231;
      PositivePayEntryDetail@1001 : Record 1232;
      BankAccount@1002 : Record 270;
    BEGIN
      // [SCENARIO 123012] Test the PositivePayEntryDetail is invalid if it does not exists in the PositivePayEntry for "Bank Account No." and "Upload Date-Time"
      // [GIVEN] Need to create both the Bank Account and the Pos. Pay Upload Summary
      BankAccount.INIT;
      BankAccount."No." := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankAccount.INSERT;

      PositivePayEntry.INIT;
      PositivePayEntry."Bank Account No." := BankAccount."No.";
      PositivePayEntry.INSERT;

      // [WHEN] Bank Account exists but the Upload Summary Record does not
      PositivePayEntryDetail.INIT;
      PositivePayEntryDetail.VALIDATE("Bank Account No.",BankAccount."No.");
      PositivePayEntryDetail."Bank Account No." := PositivePayEntry."Bank Account No.";

      // [THEN] Error given that date-time does not exist even though a summary existed for the bank acct
      ASSERTERROR PositivePayEntryDetail.VALIDATE("Upload Date-Time",CREATEDATETIME(28111800D,030000T));
    END;

    [Test]
    PROCEDURE TestCreateEntriesDetailBankAcctNeg@8();
    VAR
      PositivePayEntry@1000 : Record 1231;
      PositivePayEntryDetail@1001 : Record 1232;
      BankAccount@1002 : Record 270;
    BEGIN
      // [SCENARIO 123012] Test the PositivePayEntryDetail is invalid if the Bank Account does not exist
      // [GIVEN] Need to create both the Bank Account and the Pos. Pay Upload Summary
      BankAccount.INIT;
      BankAccount."No." := COPYSTR(FORMAT(CREATEGUID),1,20);
      BankAccount.INSERT;

      PositivePayEntry.INIT;
      PositivePayEntry."Bank Account No." := BankAccount."No.";
      PositivePayEntry.INSERT;

      // [WHEN] Upload Summary Record exists but Bank Account does not
      PositivePayEntryDetail.INIT;
      PositivePayEntryDetail."Bank Account No." := PositivePayEntry."Bank Account No.";
      PositivePayEntryDetail.VALIDATE("Upload Date-Time",PositivePayEntry."Upload Date-Time");

      // [THEN] Error that bank account does not exist
      ASSERTERROR PositivePayEntryDetail.VALIDATE("Bank Account No.",COPYSTR(FORMAT(CREATEGUID),1,20));
    END;

    [Test]
    PROCEDURE TestCheckLedgerEntryDataExchNoNeg@9();
    VAR
      CheckLedgerEntry@1000 : Record 272;
    BEGIN
      // [SCENARIO 122869] Test the Data Exch. Entry No. and Data Exch. Voided Entry No. are invalid when Entry No. does not exist in the Data Exch.
      // [GIVEN] Check Ledger Entry created but Data Exch. does not exist
      CheckLedgerEntry.INIT;
      CheckLedgerEntry."Entry No." := LibraryRandom.RandInt(100);

      // [THEN] Validation
      ASSERTERROR CheckLedgerEntry.VALIDATE("Data Exch. Entry No.",LibraryRandom.RandInt(100));
      ASSERTERROR CheckLedgerEntry.VALIDATE("Data Exch. Voided Entry No.",LibraryRandom.RandInt(100));
    END;

    [Test]
    PROCEDURE TestCheckLedgerEntryDataExchNoPos@13();
    VAR
      DataExchDef@1000 : Record 1222;
      DataExch@1001 : Record 1220;
      CheckLedgerEntry@1002 : Record 272;
    BEGIN
      // [SCENARIO 122869] Test the Data Exch. Entry No. and Data Exch. Voided Entry No. are valid when Entry No. exists in the Data Exch.
      // [GIVEN] Create the Data Exchange Def
      DataExchDef.INIT;
      DataExchDef.Code := COPYSTR(FORMAT(CREATEGUID),1,20);
      DataExchDef.Type := DataExchDef.Type::"Positive Pay Export";
      DataExchDef.INSERT;

      // [GIVEN] Create the Data Exch. record
      DataExch.INIT;
      DataExch."Data Exch. Def Code" := DataExchDef.Code;
      DataExch."Data Exch. Line Def Code" := DataExchDef.Code;
      DataExch.INSERT;

      // [WHEN] Check Ledger Entry.Data Exch. Entry No. is valid
      CheckLedgerEntry.INIT;
      CheckLedgerEntry.VALIDATE("Data Exch. Entry No.",DataExch."Entry No.");
      CheckLedgerEntry.VALIDATE("Data Exch. Voided Entry No.",DataExch."Entry No.");

      // [THEN] Validation
      CheckLedgerEntry.TESTFIELD("Data Exch. Entry No.",DataExch."Entry No.");
      CheckLedgerEntry.TESTFIELD("Data Exch. Voided Entry No.",DataExch."Entry No.");
    END;

    BEGIN
    {
      // [FEATURE] [Positive Pay]
    }
    END.
  }
}

