OBJECT Codeunit 134407 SEPA CT Gen. Jnl Line Errors
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1007 : Codeunit 131300;
      LibraryERMCountryData@1006 : Codeunit 131305;
      LibraryPaymentExport@1005 : Codeunit 130100;
      LibraryPurchase@1004 : Codeunit 130512;
      LibrarySales@1003 : Codeunit 130509;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      MustBeBankAccErr@1017 : TextConst 'ENU=The balancing account must be a bank account.';
      MustBeVendorOrCustomerErr@1016 : TextConst 'ENU=The account must be a vendor or customer account.';
      MustBeVendPmtOrCustRefundErr@1015 : TextConst 'ENU=Only vendor payments and customer refunds are allowed.';
      MustBePositiveErr@1014 : TextConst 'ENU=The amount must be positive.';
      TransferDateErr@1013 : TextConst 'ENU=The earliest possible transfer date is today.';
      EuroCurrErr@1012 : TextConst 'ENU=Only transactions in euro (EUR) are allowed, because the %1 bank account is set up to use the %2 export format.';
      FieldBlankErr@1010 : TextConst '@@@="%1=table name, %2=field name. Example: Customer must have a value in Name.";ENU=The %1 field must be filled.';
      FieldKeyBlankErr@1009 : TextConst '@@@="%1=table name, %2=key field value, %3=field name. Example: Customer 10000 must have a value in Name.";ENU=%1 %2 must have a value in %3.';

    [Test]
    PROCEDURE GenJnlLineBalAccError@1();
    VAR
      GenJnlLine@1000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBeBankAccErr);
    END;

    [Test]
    PROCEDURE GenJnlLineBalAccNoError@2();
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Bal. Account No." := '';
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldBlankErr,GenJnlLine.FIELDCAPTION("Bal. Account No.")));
    END;

    [Test]
    PROCEDURE GenJnlLineRecipientBankAccError@4();
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Recipient Bank Account" := '';
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldBlankErr,GenJnlLine.FIELDCAPTION("Recipient Bank Account")));
    END;

    [Test]
    PROCEDURE GenJnlLineAccTypeError@15();
    VAR
      GenJnlLine@1000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBeVendorOrCustomerErr);
    END;

    [Test]
    PROCEDURE GenJnlLineVendorRefundError@14();
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund;
      GenJnlLine.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBeVendPmtOrCustRefundErr)
    END;

    [Test]
    PROCEDURE GenJnlLineCustomerPaymentError@22();
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateCustomerGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
      GenJnlLine.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBeVendPmtOrCustRefundErr);
    END;

    [Test]
    PROCEDURE GenJnlLineNegativeAmountError@3();
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine.Amount := -1 * LibraryRandom.RandDec(100,2);
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBePositiveErr);
    END;

    [Test]
    PROCEDURE GenJnlLineCurrencyError@7();
    VAR
      GenJnlLine@1000 : Record 81;
      Currency@1001 : Record 4;
      BankAccount@1003 : Record 270;
    BEGIN
      Initialize;

      // Setup
      LibraryERM.CreateCurrency(Currency);

      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Currency Code" := Currency.Code;
      GenJnlLine.Amount := LibraryRandom.RandDec(100,2);
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      BankAccount.GET(GenJnlLine."Bal. Account No.");
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(EuroCurrErr,GenJnlLine."Bal. Account No.",BankAccount."Payment Export Format"));
    END;

    [Test]
    PROCEDURE GenJnlLinePostingDateError@9();
    VAR
      GenJnlLine@1000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Posting Date" := CALCDATE('<-1D>',TODAY);
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,TransferDateErr);
    END;

    [Test]
    PROCEDURE GenJnlLineBalAccIBANError@10();
    VAR
      GenJnlLine@1000 : Record 81;
      BankAccount@1001 : Record 270;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      BankAccount.GET(GenJnlLine."Bal. Account No.");
      BankAccount.IBAN := '';
      BankAccount.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldKeyBlankErr,BankAccount.TABLECAPTION,GenJnlLine."Bal. Account No.",BankAccount.FIELDCAPTION(IBAN)));
    END;

    [Test]
    PROCEDURE GenJnlLineAccNoError@16();
    VAR
      GenJnlLine@1000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Account No." := '';
      GenJnlLine.MODIFY;

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBeVendorOrCustomerErr);
    END;

    [Test]
    PROCEDURE GenJnlLineCustomerNameError@23();
    VAR
      GenJnlLine@1001 : Record 81;
      Customer@1000 : Record 18;
    BEGIN
      Initialize;

      // Setup
      CreateCustomerGenJnlLineWithRecipientBankAcc(GenJnlLine);
      Customer.GET(GenJnlLine."Account No.");
      Customer.Name := '';
      Customer.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldKeyBlankErr,Customer.TABLECAPTION,GenJnlLine."Account No.",Customer.FIELDCAPTION(Name)));
    END;

    [Test]
    PROCEDURE GenJnlLineCustomerBankAccIBANError@32();
    VAR
      GenJnlLine@1001 : Record 81;
      CustomerBankAccount@1000 : Record 287;
    BEGIN
      Initialize;

      // Setup
      CreateCustomerGenJnlLineWithRecipientBankAcc(GenJnlLine);
      CustomerBankAccount.GET(GenJnlLine."Account No.",GenJnlLine."Recipient Bank Account");
      CustomerBankAccount.IBAN := '';
      CustomerBankAccount.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldKeyBlankErr,CustomerBankAccount.TABLECAPTION,
          GenJnlLine."Recipient Bank Account",CustomerBankAccount.FIELDCAPTION(IBAN)));
    END;

    [Test]
    PROCEDURE GenJnlLineVendorNameError@41();
    VAR
      GenJnlLine@1001 : Record 81;
      Vendor@1000 : Record 23;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      Vendor.GET(GenJnlLine."Account No.");
      Vendor.Name := '';
      Vendor.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldKeyBlankErr,Vendor.TABLECAPTION,GenJnlLine."Account No.",Vendor.FIELDCAPTION(Name)));
    END;

    [Test]
    PROCEDURE GenJnlLineVendorBankAccIBANError@40();
    VAR
      GenJnlLine@1001 : Record 81;
      VendorBankAccount@1000 : Record 288;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      VendorBankAccount.GET(GenJnlLine."Account No.",GenJnlLine."Recipient Bank Account");
      VendorBankAccount.IBAN := '';
      VendorBankAccount.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldKeyBlankErr,VendorBankAccount.TABLECAPTION,
          GenJnlLine."Recipient Bank Account",VendorBankAccount.FIELDCAPTION(IBAN)));
    END;

    [Test]
    PROCEDURE GenJnlLineMultipleErrors@12();
    VAR
      GenJnlLine@1001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      CreateVendorGenJnlLineWithRecipientBankAcc(GenJnlLine);
      GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund;
      GenJnlLine.Amount := -1 * LibraryRandom.RandDec(100,2);
      GenJnlLine."Recipient Bank Account" := '';
      GenJnlLine.MODIFY;

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"SEPA CT-Check Line",GenJnlLine);

      // Verify.
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBeVendPmtOrCustRefundErr);
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,MustBePositiveErr);
      LibraryPaymentExport.VerifyGenJnlLineErr(GenJnlLine,
        STRSUBSTNO(FieldBlankErr,GenJnlLine.FIELDCAPTION("Recipient Bank Account")));
    END;

    LOCAL PROCEDURE Initialize@36();
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreatePaymentExportBatch@28(VAR GenJnlBatch@1000 : Record 232);
    VAR
      BankAcc@1001 : Record 270;
    BEGIN
      CreateBankAccount(BankAcc);
      LibraryERM.CreateGenJournalBatch(GenJnlBatch,LibraryERM.SelectGenJnlTemplate);
      GenJnlBatch.VALIDATE("Bal. Account Type",GenJnlBatch."Bal. Account Type"::"Bank Account");
      GenJnlBatch.VALIDATE("Bal. Account No.",BankAcc."No.");
      GenJnlBatch.VALIDATE("Allow Payment Export",TRUE);
      GenJnlBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankAccount@24(VAR BankAcc@1000 : Record 270);
    BEGIN
      LibraryERM.CreateBankAccount(BankAcc);
      BankAcc.IBAN := LibraryUtility.GenerateGUID;
      BankAcc."SWIFT Code" := LibraryUtility.GenerateGUID;
      BankAcc.MODIFY;
    END;

    LOCAL PROCEDURE CreateVendorGenJnlLineWithRecipientBankAcc@6(VAR GenJnlLine@1000 : Record 81);
    VAR
      GenJnlBatch@1003 : Record 232;
      Vendor@1001 : Record 23;
    BEGIN
      CreateVendorWithBankAccount(Vendor);
      CreatePaymentExportBatch(GenJnlBatch);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));
      GenJnlLine."Recipient Bank Account" := Vendor."Preferred Bank Account";
      GenJnlLine."Currency Code" := LibraryERM.GetCurrencyCode('EUR');
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerGenJnlLineWithRecipientBankAcc@8(VAR GenJnlLine@1000 : Record 81);
    VAR
      GenJnlBatch@1003 : Record 232;
      Customer@1001 : Record 18;
    BEGIN
      CreateCustomerWithBankAccount(Customer);
      CreatePaymentExportBatch(GenJnlBatch);
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Refund,
        GenJnlLine."Account Type"::Customer,Customer."No.",LibraryRandom.RandDec(1000,2));
      GenJnlLine."Recipient Bank Account" := Customer."Preferred Bank Account";
      GenJnlLine."Currency Code" := LibraryERM.GetCurrencyCode('EUR');
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerBankAccount@19(VAR CustomerBankAcc@1000 : Record 287;CustomerNo@1001 : Code[20]);
    BEGIN
      LibrarySales.CreateCustomerBankAccount(CustomerBankAcc,CustomerNo);
      CustomerBankAcc.IBAN := LibraryUtility.GenerateGUID;
      CustomerBankAcc."SWIFT Code" := LibraryUtility.GenerateGUID;
      CustomerBankAcc.MODIFY;
    END;

    LOCAL PROCEDURE CreateCustomerWithBankAccount@18(VAR Customer@1000 : Record 18);
    VAR
      CustomerBankAcc@1001 : Record 287;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateCustomerBankAccount(CustomerBankAcc,Customer."No.");
      Customer.VALIDATE("Preferred Bank Account",CustomerBankAcc.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorBankAccount@13(VAR VendorBankAcc@1000 : Record 288;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreateVendorBankAccount(VendorBankAcc,VendorNo);
      VendorBankAcc.IBAN := LibraryUtility.GenerateGUID;
      VendorBankAcc."SWIFT Code" := LibraryUtility.GenerateGUID;
      VendorBankAcc.MODIFY;
    END;

    LOCAL PROCEDURE CreateVendorWithBankAccount@26(VAR Vendor@1000 : Record 23);
    VAR
      VendorBankAcc@1001 : Record 288;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateVendorBankAccount(VendorBankAcc,Vendor."No.");
      Vendor.VALIDATE("Preferred Bank Account",VendorBankAcc.Code);
      Vendor.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [SEPA] [Credit Transfer] [Payment Jnl. Export Error]
    }
    END.
  }
}

