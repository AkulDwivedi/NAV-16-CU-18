OBJECT Codeunit 143008 Library - TCS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1500011 : Codeunit 131300;
      LibrarySales@1500010 : Codeunit 130509;
      LibraryRandom@1500003 : Codeunit 130440;
      LibraryTDS@1500000 : Codeunit 143000;
      LibraryUtility@1500006 : Codeunit 131000;
      PhoneNoTxt@1500005 : TextConst 'ENU=6666666';
      EmailTxt@1500004 : TextConst 'ENU=Cronus@hotmail.com';
      LocationTxt@1500002 : TextConst 'ENU=blue';
      AddressTxt@1500001 : TextConst 'ENU=The Ring 5, Patel Nagar';

    PROCEDURE CreateInitialSetup@1500001(VAR NODNOCHeader@1500000 : Record 13786;VAR TCSNatureCollection@1500001 : Record 16507;VAR TCSSetup@1500006 : Record 16508;VAR AssesseeCode@1500003 : Record 13727;ThresholdOverlook@1500005 : Boolean;SurchargeOverlook@1500004 : Boolean;MonthlyCertificate@1500002 : Boolean);
    BEGIN
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTCSNatureCollectionAndTCSSetup(TCSNatureCollection,TCSSetup,TCSNatureCollection."TCS Type"::E,AssesseeCode.Code);
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Customer,CreateCustomer,AssesseeCode.Code,TCSNatureCollection.Code,
        ThresholdOverlook,SurchargeOverlook,MonthlyCertificate);
    END;

    PROCEDURE CreateIncomeTaxAccountingPeriod@1500002();
    VAR
      IncomeTaxAccountingPeriod@150000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.VALIDATE("Financial Year for eTDS/TCS",FORMAT(DATE2DMY(IncomeTaxAccountingPeriod."Starting Date",3)));
      IncomeTaxAccountingPeriod.VALIDATE("Assessment Year for eTDS/TCS",
        FORMAT(DATE2DMY(IncomeTaxAccountingPeriod."Ending Date",3) + 1));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    PROCEDURE CreateIncomeTaxPeriodSetup@1500003(IncomeTaxAccountingPeriodNo@150000 : Integer);
    VAR
      IncomeTaxPeriodSetup@150001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := GetRequiredDateFromWorkDate(LibraryRandom.RandInt(2));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    PROCEDURE CreateTCSNatureCollectionAndTCSSetup@1500005(VAR TCSNatureCollection@150000 : Record 16507;VAR TCSSetup@150001 : Record 16508;TCSType@150002 : Option;AssesseeCode@150003 : Code[10]);
    BEGIN
      CreateTCSNatureCollection(TCSNatureCollection);
      TCSNatureCollection.VALIDATE("TCS Type",TCSType);
      TCSNatureCollection.MODIFY(TRUE);
      CreateTCSSetUp(TCSSetup,TCSNatureCollection.Code,AssesseeCode,TCSType);
    END;

    PROCEDURE CreateTCSNatureCollection@1500006(VAR TCSNatureOfCollection@1500000 : Record 16507);
    BEGIN
      TCSNatureOfCollection.INIT;
      TCSNatureOfCollection.VALIDATE(
        Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(TCSNatureOfCollection.FIELDNO(Code),DATABASE::"TCS Nature Of Collection"),
        1,
        LibraryUtility.GetFieldLength(DATABASE::"TCS Nature Of Collection",TCSNatureOfCollection.FIELDNO(Code))));
      TCSNatureOfCollection.VALIDATE(Description,TCSNatureOfCollection.Code);
      TCSNatureOfCollection.INSERT(TRUE);
    END;

    PROCEDURE CreateTCSSetUp@1500007(VAR TCSSetup@150003 : Record 16508;TCSNatureCollectionCode@150002 : Code[10];AssesseeCode@150001 : Code[10];TCSType@1500000 : Option);
    BEGIN
      TCSSetup.INIT;
      TCSSetup.VALIDATE("TCS Nature of Collection",TCSNatureCollectionCode);
      TCSSetup.VALIDATE("Assessee Code",AssesseeCode);
      TCSSetup.VALIDATE("Effective Date",TODAY);
      TCSSetup.VALIDATE("Concessional Code",'');
      TCSSetup.VALIDATE("TCS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("TCS Threshold Amount",LibraryRandom.RandDec(100000,2));
      TCSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("Surcharge Threshold Amount",LibraryRandom.RandDec(200000,2));
      TCSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("TCS Type",TCSType);
      TCSSetup.VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
      TCSSetup.VALIDATE("No. Series",LibraryERM.CreateNoSeriesCode);
      TCSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TCSSetup.INSERT(TRUE);
    END;

    PROCEDURE CreateNODNOCSetup@1500008(VAR NODNOCHeader@150000 : Record 13786;Type@150001 : Option;No@150002 : Code[20];AssesseeCode@150003 : Code[10];TCSNatureCode@150004 : Code[10];ThresholdOverlook@150005 : Boolean;SurchargeOverlook@150006 : Boolean;MonthlyCertificate@150007 : Boolean);
    VAR
      NODNOCLines@150008 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,Type,No);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,TCSNatureCode);
      LibraryTDS.UpdateNODNOCLines(NODNOCLines,NODNOCHeader.Type,ThresholdOverlook,SurchargeOverlook,MonthlyCertificate);
    END;

    PROCEDURE CreateCustomer@1500009() : Code[20];
    VAR
      Customer@150000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Customer.FIELDNO("P.A.N. No."),DATABASE::Customer));
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    PROCEDURE CreateTCANNo@1500063() : Code[10];
    VAR
      TCANNo@1500000 : Record 16512;
    BEGIN
      WITH TCANNo DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"T.C.A.N. No."));
        VALIDATE(Description,Code);
        INSERT(TRUE);
        EXIT(Code);
      END;
    END;

    PROCEDURE CreateCurrencyAndExchangeRate@1500000(VAR Currency@1500001 : Record 4);
    VAR
      GLAccount@1500000 : Record 15;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.FindGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",Currency."Residual Gains Account");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
    END;

    PROCEDURE CreateTaxJournalTemplateTCSAdj@1500420(VAR TaxJournalTemplate@1500222 : Record 16585);
    BEGIN
      WITH TaxJournalTemplate DO BEGIN
        INIT;
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Template"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Template",FIELDNO(Name))));
        VALIDATE(Description,Name);
        INSERT(TRUE);
        VALIDATE(Type,Type::"TCS Adjustments");
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateTaxJournalBatchTCSAdj@1500421(VAR TaxJournalBatch@1500220 : Record 16586;JournalTemplateName@1500221 : Code[10]);
    BEGIN
      WITH TaxJournalBatch DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",JournalTemplateName);
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Batch"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Batch",FIELDNO(Name))));
        VALIDATE(Description,Name);
        INSERT(TRUE);
        VALIDATE("No. Series",CreateNoseries);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateNoseries@1500418() : Code[10];
    VAR
      NoSeries@1501000 : Record 308;
      NoSeriesLine@1501001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'00001','99999');
      EXIT(NoSeries.Code);
    END;

    PROCEDURE Form27EQReportFieldsValidation@1500017();
    VAR
      CompanyInfo@1500004 : Record 79;
      Location@1500005 : Record 14;
    BEGIN
      CompanyInfo.GET;
      WITH CompanyInfo DO BEGIN
        VALIDATE("Phone No.",PhoneNoTxt);
        VALIDATE("E-Mail",EmailTxt);
        VALIDATE("Location Code",LocationTxt);
        VALIDATE(Address,AddressTxt);
        MODIFY(TRUE);
        Location.GET("Location Code");
        Location.VALIDATE("T.C.A.N. No.","T.C.A.N. No.");
        Location.MODIFY(TRUE);
        COMMIT;
      END;
    END;

    PROCEDURE GetRequiredDateFromWorkDate@1500010(Days@150000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE);
    END;

    PROCEDURE GetIncomeTaxAccPeriod@1500021() : Text;
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.RESET;
      IncomeTaxAccountingPeriod.SETFILTER("Ending Date",'>=%1',WORKDATE);
      IncomeTaxAccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
      ASSERTERROR IncomeTaxAccountingPeriod.FINDFIRST;
      EXIT(GETLASTERRORTEXT);
    END;

    PROCEDURE GetCurrentQuarter@1500033(VAR CurrentQuarter@1500000 : Option);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      IncomeTaxPeriodSetup.SETFILTER("Starting Date",'<=%1',WORKDATE);
      IncomeTaxPeriodSetup.FINDLAST;
      CurrentQuarter := IncomeTaxPeriodSetup.Quarter;
    END;

    PROCEDURE GetCurrentFinancialYear@1500036() : Code[6];
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
      IncomeTaxAccountingPeriod.FINDLAST;
      EXIT(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
    END;

    PROCEDURE UpdateNODNOCLines@1500011(VAR NODNOCLines@150001 : Record 13785;Type@150000 : Option);
    BEGIN
      NODNOCLines.SETRANGE("No.",NODNOCLines."No.");
      NODNOCLines.SETRANGE(Type,Type);
      NODNOCLines.FINDSET;
      NODNOCLines.MODIFYALL("Monthly Certificate",TRUE);
      NODNOCLines.MODIFYALL("Threshold Overlook",TRUE);
      NODNOCLines.MODIFYALL("Surcharge Overlook",TRUE);
    END;

    PROCEDURE PayTCS@1500045(JournalBatchName@1500126 : Code[20]);
    VAR
      PaymentJournal@1500127 : TestPage 256;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      PaymentJournal.Action1500045.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    PROCEDURE RoundTCS@1500030(Amount@1500000 : Decimal) : Decimal;
    VAR
      GLSetup@1500001 : Record 98;
    BEGIN
      GLSetup.GET;
      EXIT(ROUND(Amount,GLSetup."TCS Rounding Precision"));
    END;

    PROCEDURE UpdateAccountNumberInTCSSetup@1500004(VAR TcsSetup@1500000 : Record 16508);
    BEGIN
      TcsSetup.VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
      TcsSetup.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

