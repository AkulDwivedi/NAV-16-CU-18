OBJECT Codeunit 16405 GST Input Tax Credit
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500011 : Record 98;
      SourceCodeSetup@1500033 : Record 242;
      TempGSTPostingBuffer@1500017 : ARRAY [2] OF TEMPORARY Record 16420;
      DimensionManagement@1500029 : Codeunit 408;
      GSTManagement@1500032 : Codeunit 16401;
      GenJnlPostLine@1500013 : Codeunit 12;
      NoSeriesManagement@1500019 : Codeunit 396;
      Window@1500005 : Dialog;
      PostCrAdjQst@1500002 : TextConst 'ENU=Do you want to post Credit Adjustment Journal?;ENN=Do you want to post Credit Adjustment Journal?';
      ReconRecMsg@1500009 : TextConst 'ENU=Reconciling Records.;ENN=Reconciling Records.';
      ReconLineMsg@1500010 : TextConst 'ENU=GST Reconcile Line.;ENN=GST Reconcile Line.';
      ReconciledMsg@1500012 : TextConst 'ENU=Records has been reconciled.;ENN=Records has been reconciled.';
      CrAdjstPostedMsg@1500003 : TextConst 'ENU=Credit Adjustment Journal posted successfully.;ENN=Credit Adjustment Journal posted successfully.';
      NatureOfAdjErr@1500316 : TextConst '@@@="%1= Nature Of Adjustment %2= Type of Adjustment";ENU=Nature of Adjustment must be %1 for %2.;ENN=Nature of Adjustment must be %1 for %2.';
      UnreconErr@1500015 : TextConst '@@@="%1 = Nature Of Adjustment, %2 = Type of Adjustment, %3 = Type of Adjustment";ENU=Nature of Adjustmust allowed only %1,%2 for %3.;ENN=Nature of Adjustmust allowed only %1,%2 for %3.';
      NoPostErr@1500018 : TextConst 'ENU=There is nothing to post.;ENN=There is nothing to post.';
      GSTINErr@1500313 : TextConst 'ENU=GSTIN No. can not be blank.;ENN=GSTIN No. can not be blank.';
      PostingDateErr@1500517 : TextConst 'ENU=Posting Date can not be blank.;ENN=Posting Date can not be blank.';
      PaymentDocErr@1500318 : TextConst '@@@="%1 = Payment Document No.";ENU=DocumentNo %1 has already been posted, you can not enter duplicate Document No.;ENN=DocumentNo %1 has already been posted, you can not enter duplicate Document No.';
      PostGSTPaymentQst@1500519 : TextConst 'ENU=Do you want to post GST Payment?;ENN=Do you want to post GST Payment?';
      PaymentBufferMsg@1500520 : TextConst '@@@="1 =GST Component Code.";ENU=Generating Payment Lines : GST Component#1##############\;ENN=Generating Payment Lines : GST Component#1##############\';
      LiabilityExceedErr@1500524 : TextConst '@@@="%1 = Credit Utilized and Payment Amount,  %2 = Net Payment Liability, %3 = GST Component";ENU=Total of Credit Utilized and Payment Amount %1 must be equal to Net Payment Liability %2 in GST Component %3.;ENN=Total of Credit Utilized and Payment Amount %1 must be equal to Net Payment Liability %2 in GST Component %3.';
      CreditSetoffErr@1500525 : TextConst '@@@="%1 =GST Component Code.";ENU=Credit Utilized can not exceed Total Credit Available.There is no Claim-Setoff available for GST Compoment %1.;ENN=Credit Utilized can not exceed Total Credit Available.There is no Claim-Setoff available for GST Compoment %1.';
      CreditAvailableErr@1500526 : TextConst '@@@="%1 =GST Component Code., %2 = Credit Amount, %3  = Availabe Credit Amount";ENU=There is no sufficient Claim-Setoff available for GST Compoment %1, required Credit Utilized is %2, Total Credit Available is %3.;ENN=There is no sufficient Claim-Setoff available for GST Compoment %1, required Credit Utilized is %2, Total Credit Available is %3.';
      CreditUtilizedErr@1500527 : TextConst '@@@="%1 = Credit Utilized, %2 = Payment Liability, %3 =GST Component Code.";ENU=Credit Utilized %1 can not exceed Payment Liability %2 for GST Compoment %3.;ENN=Credit Utilized %1 can not exceed Payment Liability %2 for GST Compoment %3.';
      DimCombinationErr@1500031 : TextConst '@@@="%1 = GST Component, %2 = Dimension Value";ENU=The combination of dimensions used for GST Component %1 is blocked. %2.;ENN=The combination of dimensions used for GST Component %1 is blocked. %2.';
      InvaidDimensionErr@1500030 : TextConst '@@@="%1 = Dimension Value";ENU=The dimensions used are invalid. %2.;ENN=The dimensions used are invalid. %2.';
      GSTPaymentTypeTxt@1500035 : TextConst '@@@="%1 = GST Component, %2 = Tax Type";ENU=Component %1 & Type: %2.;ENN=Component %1 & Type: %2.';
      CreditUtilizedTxt@1500036 : TextConst 'ENU=Credit;ENN=Credit';
      TotalPaymentTxt@1500037 : TextConst 'ENU=Total Payment Amount;ENN=Total Payment Amount';
      ChequeNo@1500039 : Code[10];
      ChequeDate@1500038 : Date;
      DocumentNo@1500042 : Code[20];
      PostingDate@1500041 : Date;
      DimnesionSetID@1500040 : Integer;
      UpdatingLedgersMsg@1500043 : TextConst '@@@="1 =GST Component Code.";ENU=Updating GST Ledger : GST Component#1##############\;ENN=Updating GST Ledger : GST Component#1##############\';
      NetPaymentLibTxt@1500044 : TextConst 'ENU=Net Payment Liability;ENN=Net Payment Liability';
      UnadjustedCreditTxt@1500156 : TextConst 'ENU=Unadjusted Credit;ENN=Unadjusted Credit';
      GSTReconMapErr@1500004 : TextConst 'ENU=GST Recon Mapping must have setup for all components defined in the GST Component.;ENN=GST Recon Mapping must have setup for all components defined in the GST Component.';
      GSTCrAdjFilterErr@1500016 : TextConst 'ENU=Filter Criteria is not matching with Detailed GST Ledger Entry.;ENN=Filter Criteria is not matching with Detailed GST Ledger Entry.';
      GstTxt@1500014 : TextConst 'ENU=Gst;ENN=Gst';
      TaxableValTxt@1500914 : TextConst 'ENU=Taxable Value is not Matching with GSTR-2A Data.;ENN=Taxable Value is not Matching with GSTR-2A Data.';
      SettlementErr@1500915 : TextConst '@@@=GST Settlement has been already done for the given Month %1 and Year %2 for GST Registration No. %3;ENU=GST Settlement has been already done for the given Month %1 and Year %2 for GST Registration No. %3.;ENN=GST Settlement has been already done for the given Month %1 and Year %2 for GST Registration No. %3.';
      CrAdjPostErr@1500916 : TextConst '@@@=Month and Year can not be same as Adjustment Month and Adjustment Year for Type Of Adjustment %1.;ENU=Month and Year can not be same as Adjustment Month and Adjustment Year for Type Of Adjustment %1.;ENN=Month and Year can not be same as Adjustment Month and Adjustment Year for Type Of Adjustment %1.';
      NatureOfAdjPeriodErr@1500917 : TextConst '@@@=Nature Of Adjustment can not be %1 for same Period Month as Adj. Posting Month and same Period Year as Adj. Posting Year.;ENU=Nature Of Adjustment can not be %1 for same Period Month as Adj. Posting Month and same Period Year as Adj. Posting Year.;ENN=Nature Of Adjustment can not be %1 for same Period Month as Adj. Posting Month and same Period Year as Adj. Posting Year.';
      CompAmtTxt@1500918 : TextConst '@@@=%1 Amount is not matching with Periodic GSTR-2A Data;ENU=%1 Amount is not matching with Periodic GSTR-2A Data;ENN=%1 Amount is not matching with Periodic GSTR-2A Data';
      GSTTolarance@1500919 : Decimal;
      GSTPaymentFieldSameErr@1500020 : TextConst '@@@="%1 = Field Refrence";ENU=%1 must be same in all the GST Payment Lines.;ENN=%1 must be same in all the GST Payment Lines.';
      SelectDitributionErr@1500021 : TextConst 'ENU=No entries are selected for distribution.;ENN=No entries are selected for distribution.';
      DistributeErr@1500022 : TextConst '@@@="%1 = Text";ENU=Sum of %1 must be 100 for Distribution Lines.;ENN=Sum of %1 must be 100 for Distribution Lines.';
      ZeroDistPercentErr@1500025 : TextConst '@@@="%1 = Field Name, %2 = To Location Code";ENU=%1 cannot be zero for Location Code: %2 in Distribution Line.;ENN=%1 cannot be zero for Location Code: %2 in Distribution Line.';
      PostDistributionQst@1500000 : TextConst 'ENU=Do you want to post Distribution?;ENN=Do you want to post Distribution?';
      PostDistributionReversalQst@1500051 : TextConst 'ENU=Do you want to post Distribution Reversal?;ENN=Do you want to post Distribution Reversal?';
      NotReconcileMsg@1500056 : TextConst 'ENU=No records to reconcile.;ENN=No records to reconcile.';
      PostedGSTReconErr@1500001 : TextConst '@@@=Reconciliation has been already done for GSTIN No. %1,Month %2,Year %3.;ENU=Reconciliation has been already done for GSTIN No. %1,Month %2,Year %3.;ENN=Reconciliation has been already done for GSTIN No. %1,Month %2,Year %3.';
      ReconciledWithLedgerMsg@1500878 : TextConst 'ENU=Records has been reconciled with ledger entries.;ENN=Records has been reconciled with ledger entries.';
      AdjustmentDateErr@1500024 : TextConst '@@@="%1 = Document No, %2 = Posting Date";ENU=Document No. %1 already has been adjusted on %2. Please change the date and try again.;ENN=Document No. %1 already has been adjusted on %2. Please change the date and try again.';
      ReverseChargePaymentTxt@1503024 : TextConst 'ENU=Rev. Charge Payment;ENN=Rev. Charge Payment';
      ToGSTCompErr@1500006 : TextConst '@@@="%1 = GST Component Code, %2 = Jurisdiction Type";ENU=GST Component Distribution setup must be provided for GST Component Code %1 and GST Jurisdiction Type %2.;ENN=GST Component Distribution setup must be provided for GST Component Code %1 and GST Jurisdiction Type %2.';
      RcptCreditTypeErr@1500007 : TextConst '@@@="%1 = Field Name, %2 = Field Name, %3 = Line No.";ENU=%1 must be Non-Availment as %2 is blank in Line No: %3.;ENN=%1 must be Non-Availment as %2 is blank in Line No: %3.';
      RcptCreditTypeBlankErr@1500008 : TextConst '@@@="%1 = Field Name, %2 = Line No.";ENU=%1 must not be blank in Line No: %2.;ENN=%1 must not be blank in Line No: %2.';
      SameToLocationErr@1502056 : TextConst '@@@="%1 = To Location Code, %2 = Rcpt. Credit Type";ENU=You cannot have same To Location Code: %1 and Rcpt. Credit Type: %2 combination in multiple lines.;ENN=You cannot have same To Location Code: %1 and Rcpt. Credit Type: %2 combination in multiple lines.';
      DistRevPostDateErr@1500023 : TextConst '@@@="@@@=""%1 = Reversal Invoice No., %2 = Posting Date, %3 = Posting Date"";";ENU=You cannot post Reversal before Reversal Invoice No. %1 Posting Date: %2. Current Posting Date is: %3.;ENN=You cannot post Reversal before Reversal Invoice No. %1 Posting Date: %2. Current Posting Date is: %3.';

    PROCEDURE UpdateGSTReconcilationLine@1500000(GSTRegNo@1500001 : Code[15];GSTMonth@1500003 : Integer;GSTYear@1500004 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      DetailedGSTLedgerEntry2@1500010 : ARRAY [8] OF Record 16419;
      GSTReconcilationLines@1500002 : Record 16430;
      GSTReconcilationLines2@1500005 : Record 16430;
      GSTReconMapping@1500006 : Record 16429;
      GSTReconcilationLines3@1500009 : ARRAY [8] OF Record 16430;
      GSTComponent@1500109 : Record 16405;
    BEGIN
      GSTReconMapping.RESET;
      GSTReconMapping.SETFILTER("GST Reconciliation Field No.",'<>%1',0);
      IF GSTComponent.COUNT <> GSTReconMapping.COUNT THEN
        ERROR(GSTReconMapErr);
      WITH GSTReconcilationLines DO BEGIN
        DetailedGSTFilterWithReconciliation(DetailedGSTLedgerEntry,GSTRegNo,GSTMonth,GSTYear);
        IF DetailedGSTLedgerEntry.FINDSET THEN BEGIN
          Window.OPEN('#1#################################\\',ReconLineMsg);
          REPEAT
            GSTReconcilationLines2.SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
            IF NOT GSTReconcilationLines2.FINDFIRST THEN
              InsertGSTReconLines(GSTReconcilationLines,DetailedGSTLedgerEntry,GSTRegNo,GSTMonth,GSTYear);
            Window.UPDATE(1,STRSUBSTNO('%1 %2',"GSTIN No.","External Document No."));
            GSTReconMapping.SETRANGE("GST Component Code",DetailedGSTLedgerEntry."GST Component Code");
            IF GSTReconMapping.FINDFIRST THEN
              CASE GSTReconMapping."GST Reconciliation Field No." OF
                FIELDNO("Component 1 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[1],DetailedGSTLedgerEntry2[1],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 2 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[2],DetailedGSTLedgerEntry2[2],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 3 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[3],DetailedGSTLedgerEntry2[3],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 4 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[4],DetailedGSTLedgerEntry2[4],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 5 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[5],DetailedGSTLedgerEntry2[5],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 6 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[6],DetailedGSTLedgerEntry2[6],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 7 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[7],DetailedGSTLedgerEntry2[7],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
                FIELDNO("Component 8 Amount"):
                  ExtendedUpdateGSTRecon(
                    GSTReconcilationLines3[8],DetailedGSTLedgerEntry2[8],GSTReconcilationLines,
                    DetailedGSTLedgerEntry,GSTReconMapping);
              END;
          UNTIL DetailedGSTLedgerEntry.NEXT = 0;
        END ELSE
          ERROR(GSTCrAdjFilterErr);
      END;
      Window.CLOSE;
    END;

    PROCEDURE ReconcileWithGSTR2AData@1500001(GSTRegNo@1500002 : Code[15];Month@1500003 : Integer;Year@1500004 : Integer;PostingDate@1500005 : Date);
    VAR
      PeriodicGSTR2AData@1500000 : Record 16431;
      GSTReconcilationLines@1500001 : Record 16430;
      GSTReconcilationLines2@1500100 : Record 16430;
    BEGIN
      Window.OPEN('#1#################################\\' + ReconRecMsg);
      GSTReconcilationLines.SETRANGE("GSTIN No.",GSTRegNo);
      GSTReconcilationLines.SETRANGE(Month,Month);
      GSTReconcilationLines.SETRANGE(Year,Year);
      IF GSTReconcilationLines.FINDFIRST THEN
        REPORT.RUNMODAL(REPORT::"GST Recon. Match Periodic Data",FALSE,FALSE,GSTReconcilationLines);
      Window.CLOSE;
      WITH GSTReconcilationLines2 DO BEGIN
        COPYFILTERS(GSTReconcilationLines);
        SETRANGE(Reconciled,TRUE);
        IF COUNT >= 1 THEN BEGIN
          MODIFYALL("Error Type",'');
          MODIFYALL("Reconciliation Date",PostingDate);
          MODIFYALL("User Id",USERID);
          MESSAGE(ReconciledMsg);
        END ELSE
          MESSAGE(NotReconcileMsg);
      END;
      WITH PeriodicGSTR2AData DO BEGIN
        SETRANGE("GSTIN No.",GSTReconcilationLines."GSTIN No.");
        SETRANGE(Month,GSTReconcilationLines.Month);
        SETRANGE(Year,GSTReconcilationLines.Year);
        SETRANGE(Matched,Matched::" ");
        MODIFYALL(Matched,Matched::"No Line");
      END;
    END;

    PROCEDURE PreparePostGSTReconcilation@1500003(GSTRegNo@1500010 : Code[15];PostingDate@1500006 : Date;PostMonth@1500008 : Integer;PostYear@1500009 : Integer);
    BEGIN
      UpdateDetailedGSTLedgerEntryAfterRecon(GSTRegNo,PostMonth,PostYear);
      UpdateGST2ADataAfterPosting(GSTRegNo,PostMonth,PostYear,PostingDate);
      DeleteGSTReconcilationLine(GSTRegNo,PostMonth,PostYear);
      MESSAGE(ReconciledWithLedgerMsg);
    END;

    LOCAL PROCEDURE PostGenJnlLine@1500005(VAR GenJournalLine@1500007 : Record 81;RecAccountNo@1500000 : Code[20];IntAccountNo@1500002 : Code[20];DocumentNo@1500005 : Code[20];GSTAmt@1500001 : Decimal;PostingDate@1500004 : Date;DocumentType@15000010 : Option;GSTJurisdictionType@1500006 : 'Intrastate,Interstate');
    BEGIN
      WITH GenJournalLine DO BEGIN
        INIT;
        "Line No." += 10000;
        "Document Type" := DocumentType;
        "Document No." := DocumentNo;
        "Account Type" := "Account Type"::"G/L Account";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
        "Posting Date" := PostingDate;
        "Account No." := RecAccountNo;
        "Bal. Account No." := IntAccountNo;
        "Source Code" := GetCreditAdjustmentSourceCode;
        "GST Jurisdiction Type" := GSTJurisdictionType;
        "System-Created Entry" := TRUE;
        IF "Document Type" = "Document Type"::Invoice THEN
          Amount := -GSTAmt
        ELSE
          Amount := GSTAmt;
        "Dimension Set ID" := DimnesionSetID;
        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      END;
    END;

    LOCAL PROCEDURE UpdateGST2ADataAfterPosting@1500009(GSTRegNo@1500004 : Code[15];PostingMonth@1500003 : Integer;PostingYear@1500002 : Integer;RecoPostingDate@1500005 : Date);
    VAR
      GSTReconcilationLines@1500000 : Record 16430;
      PeriodicGSTR2AData@1500001 : Record 16431;
    BEGIN
      GSTReconcilationLines.SETCURRENTKEY("GSTIN No.",Reconciled,"Credit Availed",Month,Year);
      GSTReconcilationLines.SETRANGE("GSTIN No.",GSTRegNo);
      GSTReconcilationLines.SETRANGE(Reconciled,TRUE);
      GSTReconcilationLines.SETRANGE(Month,PostingMonth);
      GSTReconcilationLines.SETRANGE(Year,PostingYear);
      WITH GSTReconcilationLines DO BEGIN
        IF FINDSET THEN
          REPEAT
            PeriodicGSTR2AData.SETRANGE("GSTIN No.","GSTIN No.");
            PeriodicGSTR2AData.SETRANGE(Month,Month);
            PeriodicGSTR2AData.SETRANGE(Year,Year);
            PeriodicGSTR2AData.SETRANGE("Document No.","External Document No.");
            PeriodicGSTR2AData.SETRANGE("HSN/SAC","HSN/SAC");
            PeriodicGSTR2AData.SETRANGE("Component 1 Amount","Component 1 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 2 Amount","Component 2 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 3 Amount","Component 3 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 1 Amount","Component 4 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 2 Amount","Component 5 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 3 Amount","Component 6 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 1 Amount","Component 7 Amount");
            PeriodicGSTR2AData.SETRANGE("Component 2 Amount","Component 8 Amount");
            IF PeriodicGSTR2AData.FINDFIRST THEN BEGIN
              PeriodicGSTR2AData.Reconciled := TRUE;
              PeriodicGSTR2AData."Reconciliation Date" := RecoPostingDate;
              PeriodicGSTR2AData.MODIFY(TRUE);
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalculateMonth@1500004(CalMonth@1500000 : Integer;CalYear@1500001 : Integer) : Date;
    BEGIN
      EXIT(CALCDATE('<CM>',DMY2DATE(1,CalMonth,CalYear)));
    END;

    LOCAL PROCEDURE DeleteGSTReconcilationLine@1500006(GSTINNo@1500000 : Code[15];GSTMonth@1500001 : Integer;GSTYear@1500002 : Integer);
    VAR
      GSTReconcilationLines@1500003 : Record 16430;
      GSTReconcilation@1500004 : Record 16433;
    BEGIN
      GSTReconcilationLines.SETRANGE("GSTIN No.",GSTINNo);
      GSTReconcilationLines.SETRANGE(Month,GSTMonth);
      GSTReconcilationLines.SETRANGE(Year,GSTYear);
      GSTReconcilationLines.DELETEALL;
      IF GSTReconcilation.GET(GSTINNo,GSTMonth,GSTYear) THEN
        GSTReconcilation.DELETEALL;
    END;

    PROCEDURE CheckMandatoryFields@1500007(GSTReconcilation@1500000 : Record 16433);
    BEGIN
      GSTReconcilation.TESTFIELD("GSTIN No.");
      GSTReconcilation.TESTFIELD(Month);
      GSTReconcilation.TESTFIELD(Year);
      GSTReconcilation.TESTFIELD("Posting Date");
    END;

    PROCEDURE FillAdjustmentJournal@1500010(GSTINNo@1500000 : Code[15];VendorNo@1500001 : Code[20];PeriodMonth@1500002 : Integer;PeriodYear@1500003 : Integer;PostingDate@1500004 : Date;DocumentNo1@1500013 : Code[20];ExternalDocNo@1500005 : Code[35];NatureOfAdj@1500007 : ' ,Credit Reversal,Credit Re-Availment,Permanent Reversal';AdjDocNo@1500015 : Code[20]);
    VAR
      DetailedGSTLedgerEntry@1500010 : ARRAY [2] OF Record 16419;
      GSTCreditAdjustmentJournal@1500009 : Record 16434;
      TotalGSTAmount@1500008 : Decimal;
      DocumentNo@1500012 : Code[20];
    BEGIN
      GetCreditAdjustmentSourceCode;
      DetailedGSTLedgerEntry[1].SETCURRENTKEY(
        "Location  Reg. No.","Transaction Type","Entry Type","GST Vendor Type","GST Credit",
        "Posting Date","Source No.","Document Type","Document No.");
      DetailedGSTLedgerEntry[1].SETRANGE("Location  Reg. No.",GSTINNo);
      DetailedGSTLedgerEntry[1].SETRANGE("Transaction Type",DetailedGSTLedgerEntry[1]."Transaction Type"::Purchase);
      DetailedGSTLedgerEntry[1].SETRANGE("Entry Type",DetailedGSTLedgerEntry[1]."Entry Type"::"Initial Entry");
      DetailedGSTLedgerEntry[1].SETRANGE("GST Vendor Type",DetailedGSTLedgerEntry[1]."GST Vendor Type"::Registered);
      DetailedGSTLedgerEntry[1].SETRANGE("GST Credit",DetailedGSTLedgerEntry[1]."GST Credit"::Availment);
      DetailedGSTLedgerEntry[1].SETFILTER("Posting Date",'<=%1',CALCDATE('<CM>',DMY2DATE(1,PeriodMonth,PeriodYear)));
      IF VendorNo <> '' THEN
        DetailedGSTLedgerEntry[1].SETRANGE("Source No.",VendorNo);
      DetailedGSTLedgerEntry[1].SETFILTER("Document Type",'%1|%2',
        DetailedGSTLedgerEntry[1]."Document Type"::Invoice,DetailedGSTLedgerEntry[1]."Document Type"::"Credit Memo");
      IF DocumentNo1 <> '' THEN
        DetailedGSTLedgerEntry[1].SETRANGE("Document No.",DetailedGSTLedgerEntry[1]."Document No.");
      IF ExternalDocNo <> '' THEN
        DetailedGSTLedgerEntry[1].SETRANGE("External Document No.",ExternalDocNo);
      DetailedGSTLedgerEntry[1].SETRANGE("Credit Availed",TRUE);
      DetailedGSTLedgerEntry[1].SETRANGE(Distributed,FALSE);
      DetailedGSTLedgerEntry[1].SETRANGE("Reverse Charge",FALSE);
      DetailedGSTLedgerEntry[1].SETRANGE("GST Exempted Goods",FALSE);
      DetailedGSTLedgerEntry[1].SETRANGE("Input Service Distribution",FALSE);
      IF NatureOfAdj IN [NatureOfAdj::"Credit Reversal"] THEN
        DetailedGSTLedgerEntry[1].SETFILTER("Credit Adjustment Type",'%1|%2',
          DetailedGSTLedgerEntry[1]."Credit Adjustment Type"::" ",
          DetailedGSTLedgerEntry[1]."Credit Adjustment Type"::"Credit Re-Availment")
      ELSE
        DetailedGSTLedgerEntry[1].SETRANGE("Credit Adjustment Type",
          DetailedGSTLedgerEntry[1]."Credit Adjustment Type"::"Credit Reversal");
      IF DetailedGSTLedgerEntry[1].FINDSET THEN
        REPEAT
          IF DetailedGSTLedgerEntry[1]."Document No." <> DocumentNo THEN BEGIN
            IF DetailedGSTLedgerEntry[1]."Last Credit Adjusted Date" > PostingDate THEN
              ERROR(
                AdjustmentDateErr,DetailedGSTLedgerEntry[1]."Document No.",
                DetailedGSTLedgerEntry[1]."Last Credit Adjusted Date");
            TotalGSTAmount := 0;
            DocumentNo := DetailedGSTLedgerEntry[1]."Document No.";
            DetailedGSTLedgerEntry[2].COPYFILTERS(DetailedGSTLedgerEntry[1]);
            DetailedGSTLedgerEntry[2].SETRANGE("Source No.",DetailedGSTLedgerEntry[1]."Source No.");
            DetailedGSTLedgerEntry[2].SETRANGE("Document Type",DetailedGSTLedgerEntry[1]."Document Type");
            DetailedGSTLedgerEntry[2].SETRANGE("Document No.",DetailedGSTLedgerEntry[1]."Document No.");
            IF DetailedGSTLedgerEntry[2].FINDSET THEN BEGIN
              DetailedGSTLedgerEntry[2].CALCSUMS("GST Amount");
              TotalGSTAmount := DetailedGSTLedgerEntry[2]."GST Amount";
            END;
            WITH GSTCreditAdjustmentJournal DO BEGIN
              INIT;
              "GST Registration No." := DetailedGSTLedgerEntry[2]."Location  Reg. No.";
              "Vendor No." := DetailedGSTLedgerEntry[2]."Source No.";
              "Posting Date" := DetailedGSTLedgerEntry[2]."Posting Date";
              IF DetailedGSTLedgerEntry[2]."Document Type" = DetailedGSTLedgerEntry[2]."Document Type"::Invoice THEN
                "Document Type" := "Document Type"::Invoice
              ELSE
                "Document Type" := "Document Type"::"Credit Memo";
              "Document No." := DetailedGSTLedgerEntry[2]."Document No.";
              "Total GST Amount" := TotalGSTAmount;
              "External Document No." := DetailedGSTLedgerEntry[2]."External Document No.";
              "GST Jurisdiction Type" := DetailedGSTLedgerEntry[2]."GST Jurisdiction Type";
              "Location State Code" := DetailedGSTLedgerEntry[2]."Location State Code";
              "Total GST Credit Amount" := TotalGSTAmount;
              "Nature of Adjustment" := NatureOfAdj;
              "Selected Nature of Adjustment" := NatureOfAdj;
              "Adjustment Amount" := TotalGSTAmount;
              "Input Service Distribution" := DetailedGSTLedgerEntry[2]."Input Service Distribution";
              IF "Total GST Credit Amount" <> 0 THEN
                "Adjustment %" := "Adjustment Amount" / "Total GST Credit Amount" * 100;
              "Adjustment Posting Date" := PostingDate;
              "Adjust Document No." := AdjDocNo;
              INSERT(TRUE);
            END;
          END;
        UNTIL DetailedGSTLedgerEntry[1].NEXT = 0
      ELSE
        ERROR(GSTCrAdjFilterErr);
    END;

    PROCEDURE PostCreditAdjustmentJnl@1500012(GSTCreditAdjustmentJournal@1500000 : Record 16434);
    VAR
      GenJournalLine@1500010 : Record 81;
      DetailedGSTLedgerEntry@1500012 : Record 16419;
      GenJnlPostLine@1500011 : Codeunit 12;
      EntryNo@1500014 : Integer;
      BalAccountNo@1500013 : Code[20];
    BEGIN
      IF NOT CONFIRM(PostCrAdjQst,FALSE) THEN
        EXIT;
      CLEAR(EntryNo);
      GSTManagement.CheckGSTAccountingPeriod(GSTCreditAdjustmentJournal."Adjustment Posting Date");
      WITH GSTCreditAdjustmentJournal DO BEGIN
        SETFILTER("Nature of Adjustment",'<>%1',"Nature of Adjustment"::"  ");
        IF FINDSET THEN BEGIN
          REPEAT
            TempGSTPostingBuffer[1].DELETEALL;
            TempGSTPostingBuffer[2].DELETEALL;
            DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction Type","GST Jurisdiction Type",
              "Source No.","Document Type","Document No.","Posting Date");
            DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Purchase);
            DetailedGSTLedgerEntry.SETRANGE("GST Jurisdiction Type","GST Jurisdiction Type");
            DetailedGSTLedgerEntry.SETRANGE("Source No.","Vendor No.");
            IF "Document Type" = "Document Type"::Invoice THEN
              DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice)
            ELSE
              DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::"Credit Memo");
            DetailedGSTLedgerEntry.SETRANGE("Document No.","Document No.");
            DetailedGSTLedgerEntry.SETRANGE("Posting Date","Posting Date");
            DetailedGSTLedgerEntry.SETRANGE("GST Credit",DetailedGSTLedgerEntry."GST Credit"::Availment);
            DetailedGSTLedgerEntry.SETRANGE(Distributed,FALSE);
            DetailedGSTLedgerEntry.SETRANGE("Reverse Charge",FALSE);
            DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
            IF DetailedGSTLedgerEntry.FINDSET THEN
              REPEAT
                TempGSTPostingBuffer[1]."Transaction Type" := TempGSTPostingBuffer[1]."Transaction Type"::Purchase;
                TempGSTPostingBuffer[1]."GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
                TempGSTPostingBuffer[1]."GST Amount" := -ABS(DetailedGSTLedgerEntry."GST Amount");
                CASE "Nature of Adjustment" OF
                  "Nature of Adjustment"::"Credit Reversal":
                    BEGIN
                      TempGSTPostingBuffer[1]."Account No." :=
                        GSTManagement.GetGSTPayableAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
                      TempGSTPostingBuffer[1]."GST Amount" := -TempGSTPostingBuffer[1]."GST Amount";
                    END;
                  "Nature of Adjustment"::"Credit Re-Availment":
                    BEGIN
                      IF "Input Service Distribution" THEN
                        TempGSTPostingBuffer[1]."Account No." :=
                          GSTManagement.GetGSTReceivableDistAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code")
                      ELSE
                        TempGSTPostingBuffer[1]."Account No." :=
                          GSTManagement.GetGSTReceivableAccountNo(
                            "Location State Code",DetailedGSTLedgerEntry."GST Component Code");
                    END;
                  "Nature of Adjustment"::"Permanent Reversal":
                    TempGSTPostingBuffer[1]."Account No." :=
                      GSTManagement.GetGSTExpenseAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code")
                END;
                UpdateGSTPostingBuffer;
                UpdateDetailedGSTLedgerEntry(
                  "Nature of Adjustment",DetailedGSTLedgerEntry."Entry No.","Adjustment Posting Date");
                PostToDetailedCrAdjEntry(DetailedGSTLedgerEntry,GSTCreditAdjustmentJournal);
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
            IF TempGSTPostingBuffer[1].FIND('+') THEN
              REPEAT
                BalAccountNo :=
                  GSTManagement.GetGSTMismatchAccountNo(
                    "Location State Code",TempGSTPostingBuffer[1]."GST Component Code");
                IF "Document Type" = "Document Type"::Invoice THEN
                  PostGenJnlLine(
                    GenJournalLine,TempGSTPostingBuffer[1]."Account No.",BalAccountNo,
                    "Adjust Document No.",TempGSTPostingBuffer[1]."GST Amount","Adjustment Posting Date",
                    GenJournalLine."Document Type"::Invoice,"GST Jurisdiction Type")
                ELSE
                  PostGenJnlLine(
                    GenJournalLine,TempGSTPostingBuffer[1]."Account No.",BalAccountNo,
                    "Adjust Document No.",TempGSTPostingBuffer[1]."GST Amount","Adjustment Posting Date",
                    GenJournalLine."Document Type"::"Credit Memo","GST Jurisdiction Type");
                EntryNo := GenJnlPostLine.RunWithCheck(GenJournalLine);
              UNTIL TempGSTPostingBuffer[1].NEXT(-1) = 0;
          UNTIL NEXT = 0;
          NoSeriesManagement.GetNextNo(GetNoSeriesCode,"Posting Date",TRUE);
        END;
      END;
      IF EntryNo <> 0 THEN
        MESSAGE(CrAdjstPostedMsg)
      ELSE
        ERROR(NoPostErr);
    END;

    LOCAL PROCEDURE UpdateDetailedGSTLedgerEntry@150415(TypeOfAdjustment@1500000 : '  ,Credit Reversal,Credit Re-Availment,Permanent Reversal';EntryNo@1500003 : Integer;PostingDate@1500005 : Date);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.GET(EntryNo);
      DetailedGSTLedgerEntry."Credit Adjustment Type" := TypeOfAdjustment;
      DetailedGSTLedgerEntry."Last Credit Adjusted Date" := PostingDate;
      DetailedGSTLedgerEntry.MODIFY;
    END;

    PROCEDURE CheckNatureOfAdjustment@1500011(TypeOfAdjustment@1500000 : 'Reconciled,Reconciled-Reversal,Unreconciled,Unreconciled-Avail';NatureOfAdjustment@1500001 : ' ,Reconciled-Reversal,Reconciled-Reavail,Unreconciled-Avail,Unreconciled-Reversal,Unreconciled-Permanent Reversal');
    BEGIN
      IF TypeOfAdjustment = TypeOfAdjustment::Reconciled THEN
        IF NatureOfAdjustment <> NatureOfAdjustment::"Reconciled-Reversal" THEN
          ERROR(NatureOfAdjErr,NatureOfAdjustment::"Reconciled-Reversal",TypeOfAdjustment);
      IF TypeOfAdjustment = TypeOfAdjustment::"Reconciled-Reversal" THEN
        IF NatureOfAdjustment <> NatureOfAdjustment::"Reconciled-Reavail" THEN
          ERROR(NatureOfAdjErr,NatureOfAdjustment::"Reconciled-Reavail",TypeOfAdjustment);
      IF TypeOfAdjustment = TypeOfAdjustment::Unreconciled THEN
        IF NatureOfAdjustment IN [NatureOfAdjustment::"Reconciled-Reavail",
                                  NatureOfAdjustment::"Reconciled-Reversal",NatureOfAdjustment::"Unreconciled-Reversal"]
        THEN
          ERROR(
            UnreconErr,NatureOfAdjustment::"Unreconciled-Avail",NatureOfAdjustment::"Unreconciled-Permanent Reversal",
            TypeOfAdjustment);
      IF TypeOfAdjustment = TypeOfAdjustment::"Unreconciled-Avail" THEN
        IF NatureOfAdjustment <> NatureOfAdjustment::"Unreconciled-Reversal" THEN
          ERROR(NatureOfAdjErr,NatureOfAdjustment::"Unreconciled-Reversal",TypeOfAdjustment);
    END;

    LOCAL PROCEDURE CheckSettlementInputValidations@1500111(GSTINNo@1500005 : Code[15];PostingDate@1500002 : Date);
    BEGIN
      IF GSTINNo = '' THEN
        ERROR(GSTINErr);
      IF PostingDate = 0D THEN
        ERROR(PostingDateErr);
    END;

    PROCEDURE IsDuplicateDocumentNo@1500020(DocumentNo@1500000 : Code[20]);
    VAR
      DetailedGSTLedgerEntry@1500001 : Record 16419;
    BEGIN
      IF DocumentNo = '' THEN
        EXIT;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Payment Document No.");
      DetailedGSTLedgerEntry.SETRANGE("Payment Document No.",DocumentNo);
      IF NOT DetailedGSTLedgerEntry.ISEMPTY THEN
        ERROR(PaymentDocErr,DocumentNo);
    END;

    PROCEDURE ApplyGSTSettlement@1500513(GSTINNo@1500004 : Code[15];PostingDate@1500002 : Date;AccountType@1500008 : 'G/L Account,,,Bank Account';AccountNo@1500009 : Code[20];BankRefNo@1500010 : Code[10];BankRefDate@1500011 : Date);
    VAR
      GSTPaymentBuffer@1500006 : Record 16436;
      PayGST@1500007 : Page 16434;
      DocumentNo@1500000 : Code[20];
    BEGIN
      CheckSettlementInputValidations(GSTINNo,PostingDate);

      DocumentNo := GetSettlementDocumentNo(PostingDate,FALSE);
      GSTPaymentBuffer.SETRANGE("Document No.",DocumentNo);
      GSTPaymentBuffer.DELETEALL;
      IsDuplicateDocumentNo(DocumentNo);

      CreateGSTPaymentBuffer(GSTINNo,DocumentNo,PostingDate,AccountType,AccountNo,BankRefNo,BankRefDate);
      UpdateCreditAmount(GSTINNo,DocumentNo);
      UpdateSurplusUtilized(GSTINNo,DocumentNo);
      COMMIT;
      PayGST.SetParameter(GSTINNo,DocumentNo);
      PayGST.RUNMODAL;
    END;

    LOCAL PROCEDURE CreateGSTPaymentBuffer@1500214(GSTINNo@1500005 : Code[15];DocumentNo@1500004 : Code[20];PostingDate@1500002 : Date;AccountType@1500014 : 'G/L Account,,,Bank Account';AccountNo@1500013 : Code[20];BankRefNo@1500012 : Code[10];BankRefDate@1500011 : Date);
    VAR
      DetailedGSTLedgerEntry@1500006 : Record 16419;
      GSTComponent@1500007 : Record 16405;
      GSTPaymentBuffer@1500008 : Record 16436;
      Liability@1500000 : Decimal;
      RevChargeLiability@1500001 : Decimal;
      CreditAvailable@1500003 : Decimal;
      PostedLiability@1500016 : Decimal;
      PostedRevChargeLiability@1500010 : Decimal;
      PostedCreditAvailable@1500009 : Decimal;
      PostedCrAdjutLiability@1500017 : Decimal;
      PostedCrAdjutCredit@1500018 : Decimal;
      DetGSTDistCredit@1500015 : Decimal;
    BEGIN
      Window.OPEN(PaymentBufferMsg);
      DetailedGSTLedgerEntry.LOCKTABLE;
      IF GSTComponent.FINDSET THEN
        REPEAT
          Window.UPDATE(1,GSTComponent.Code);
          InsertGSTPaymentBuffer(
            GSTPaymentBuffer,GSTComponent,GSTINNo,DocumentNo,AccountType,AccountNo,PostingDate,BankRefNo,BankRefDate);
          GetLiabilityAndCredit(GSTPaymentBuffer,Liability,RevChargeLiability,CreditAvailable);
          GSTPaymentBuffer.GetPostedAmount(GSTPaymentBuffer,PostedLiability,PostedCreditAvailable,PostedRevChargeLiability);
          GetPostedCreditAdjustmentAmount(GSTPaymentBuffer,PostedCrAdjutLiability,PostedCrAdjutCredit);
          GetDetGSTDistEntryAmount(GSTPaymentBuffer,DetGSTDistCredit);
          GSTPaymentBuffer.VALIDATE("Distributed Credit",DetGSTDistCredit);
          Liability += PostedCrAdjutLiability + PostedLiability;
          CreditAvailable += PostedCreditAvailable + PostedCrAdjutCredit + DetGSTDistCredit;
          IF PostedRevChargeLiability < 0 THEN
            RevChargeLiability += PostedRevChargeLiability;
          GSTPaymentBuffer.VALIDATE("Payment Liability - Rev. Chrg.",RevChargeLiability);
          IF RevChargeLiability > 0 THEN
            GSTPaymentBuffer.VALIDATE("Payment Amount - Rev. Chrg.",GSTPaymentBuffer."Payment Liability - Rev. Chrg.");
          IF CreditAvailable >= 0 THEN BEGIN
            GSTPaymentBuffer.VALIDATE("Credit Availed",CreditAvailable);
            GSTPaymentBuffer.VALIDATE("Payment Liability",Liability);
          END ELSE BEGIN
            GSTPaymentBuffer.VALIDATE("UnAdjutsed Credit",CreditAvailable);
            GSTPaymentBuffer.VALIDATE("Payment Liability",Liability + ABS(CreditAvailable));
          END;
          IF GSTPaymentBuffer."Payment Liability" < 0 THEN BEGIN
            GSTPaymentBuffer.VALIDATE("UnAdjutsed Liability",GSTPaymentBuffer."Payment Liability");
            GSTPaymentBuffer.VALIDATE("Payment Liability",0);
          END;
          IF GSTPaymentBuffer."Net Payment Liability" >= 0 THEN
            IF GSTPaymentBuffer."Net Payment Liability" <= GSTPaymentBuffer."Total Credit Available" THEN
              GSTPaymentBuffer.VALIDATE("Credit Utilized",GSTPaymentBuffer."Net Payment Liability")
            ELSE BEGIN
              GSTPaymentBuffer.VALIDATE("Credit Utilized",GSTPaymentBuffer."Total Credit Available");
              IF GSTPaymentBuffer."Credit Utilized" > 0 THEN
                GSTPaymentBuffer.VALIDATE(
                  "Payment Amount",GSTPaymentBuffer."Net Payment Liability" - GSTPaymentBuffer."Credit Utilized")
              ELSE
                GSTPaymentBuffer.VALIDATE("Payment Amount",GSTPaymentBuffer."Net Payment Liability");
            END
          ELSE BEGIN
            GSTPaymentBuffer.VALIDATE("Credit Utilized",0);
            GSTPaymentBuffer.VALIDATE("Payment Amount",0);
            // GSTPaymentBuffer.VALIDATE("UnAdjutsed Liability",GSTPaymentBuffer."Net Payment Liability" + GSTPaymentBuffer."UnAdjutsed Liability");
            GSTPaymentBuffer.VALIDATE("Net Payment Liability",0);
          END;
          GSTPaymentBuffer.MODIFY(TRUE);
        UNTIL GSTComponent.NEXT = 0;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE InsertGSTPaymentBuffer@1500312(VAR GSTPaymentBuffer@1500000 : Record 16436;GSTComponent@1500005 : Record 16405;GSTINNo@1500004 : Code[15];DocumentNo@1500003 : Code[20];AccountType@1500009 : 'G/L Account,,,Bank Account';AccountNo@1500008 : Code[20];PostingDate@1500002 : Date;BankRefNo@1500006 : Code[10];BankRefDate@1500007 : Date);
    VAR
      GSTRegistrationNos@1500001 : Record 16400;
    BEGIN
      WITH GSTPaymentBuffer DO BEGIN
        INIT;
        "GST Registration No." := GSTINNo;
        GSTRegistrationNos.GET("GST Registration No.");
        "GST Input Service Distribution" := GSTRegistrationNos."Input Service Distributor";
        "GST Component Code" := GSTComponent.Code;
        Description := GSTComponent.Description;
        "Document No." := DocumentNo;
        "Location State Code" := GetGSTNState(GSTINNo);
        "Account Type" := AccountType;
        "Account No." := AccountNo;
        "Posting Date" := PostingDate;
        "Period End Date" := GetPeriodEnddate(PostingDate);
        "Bank Reference No." := BankRefNo;
        "Bank Reference Date" := BankRefDate;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE UpdateCreditAmount@1500527(GSTINNo@1500000 : Code[15];DocumentNo@1500001 : Code[20]);
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
      GSTPaymentBuffer2@1500004 : Record 16436;
      GSTClaimSetoff@1500003 : Record 16403;
      AvailableAmount@1500005 : Decimal;
      PaymentAmount@1500006 : Decimal;
    BEGIN
      WITH GSTPaymentBuffer DO BEGIN
        SETRANGE("GST Registration No.",GSTINNo);
        SETRANGE("Document No.",DocumentNo);
        IF FINDSET THEN
          REPEAT
            IF "Payment Amount" > 0 THEN BEGIN
              AvailableAmount := 0;
              GSTClaimSetoff.RESET;
              GSTClaimSetoff.SETCURRENTKEY(Priority);
              GSTClaimSetoff.SETRANGE("GST Component Code","GST Component Code");
              GSTClaimSetoff.SETFILTER("Set Off Component Code",'<>%1',"GST Component Code");
              IF GSTClaimSetoff.FINDSET THEN BEGIN
                REPEAT
                  GSTPaymentBuffer2.GET(GSTINNo,DocumentNo,GSTClaimSetoff."Set Off Component Code");
                  IF GSTPaymentBuffer2."Total Credit Available" > 0 THEN BEGIN
                    IF GSTPaymentBuffer2."Net Payment Liability" > 0 THEN
                      AvailableAmount +=
                        GSTPaymentBuffer2."Total Credit Available" -
                        (GSTPaymentBuffer2."Surplus Cr. Utilized" + GSTPaymentBuffer2."Net Payment Liability")
                    ELSE
                      AvailableAmount +=
                        GSTPaymentBuffer2."Total Credit Available" - GSTPaymentBuffer2."Surplus Cr. Utilized";
                    PaymentAmount := "Payment Amount";
                    IF AvailableAmount > 0 THEN BEGIN
                      IF AvailableAmount >= PaymentAmount THEN BEGIN
                        GSTPaymentBuffer2."Surplus Cr. Utilized" += PaymentAmount;
                        GSTPaymentBuffer2."Surplus Credit" -= PaymentAmount;
                        VALIDATE("Payment Amount",0);
                        VALIDATE("Credit Utilized","Credit Utilized" + PaymentAmount);
                      END ELSE BEGIN
                        VALIDATE("Payment Amount","Payment Amount" - AvailableAmount);
                        VALIDATE("Credit Utilized","Credit Utilized" + AvailableAmount);
                        GSTPaymentBuffer2."Surplus Cr. Utilized" += AvailableAmount;
                        GSTPaymentBuffer2."Surplus Credit" -= AvailableAmount;
                        AvailableAmount := 0;
                      END;
                      GSTPaymentBuffer2."Carry Forward" :=
                        GSTPaymentBuffer2."Surplus Credit" - GSTPaymentBuffer2."Surplus Cr. Utilized";
                      GSTPaymentBuffer2.MODIFY(TRUE);
                      MODIFY(TRUE);
                    END;
                  END;
                UNTIL (GSTClaimSetoff.NEXT = 0) OR ("Payment Amount" = 0);
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE UpdateSurplusUtilized@1500030(GSTINNo@1500000 : Code[15];DocumentNo@1500001 : Code[20]);
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
    BEGIN
      WITH GSTPaymentBuffer DO BEGIN
        SETRANGE("GST Registration No.",GSTINNo);
        SETRANGE("Document No.",DocumentNo);
        IF FINDSET THEN
          REPEAT
            "Surplus Cr. Utilized" := 0;
            VALIDATE("Credit Utilized");
            VALIDATE("Carry Forward",0);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetGSTNState@1500015(GSTINNo@1500000 : Code[15]) : Code[10];
    VAR
      GSTRegistrationNos@1500001 : Record 16400;
    BEGIN
      GSTRegistrationNos.GET(GSTINNo);
      EXIT(GSTRegistrationNos."State Code");
    END;

    PROCEDURE PostGSTPayment@1500017(GSTINNo@1500000 : Code[15];DocumentNo@1500001 : Code[20];VAR NoMsg@1500092 : Boolean) : Boolean;
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
    BEGIN
      GSTPaymentBuffer.SETRANGE("GST Registration No.",GSTINNo);
      GSTPaymentBuffer.SETRANGE("Document No.",DocumentNo);
      IF GSTPaymentBuffer.ISEMPTY THEN
        EXIT(FALSE);
      CopyDocDimToTempDocDim(GSTINNo,DocumentNo);
      CheckSettlementValidations(GSTINNo,DocumentNo);
      IF NOT CONFIRM(PostGSTPaymentQst,FALSE) THEN BEGIN
        NoMsg := TRUE;
        EXIT(FALSE);
      END;
      IF IsAllComponentsHaveZeroValue(GSTINNo,DocumentNo) THEN
        EXIT(FALSE);
      PostGSTBuffer(GSTINNo,DocumentNo);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckSettlementValidations@1500727(GSTINNo@1500000 : Code[15];DocumentNo@1500001 : Code[20]);
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
      GSTPaymentBuffer2@1500004 : Record 16436;
      GSTClaimSetoff@1500003 : Record 16403;
      AvailableAmount@1500005 : Decimal;
    BEGIN
      IsDifferentAccountTypeAndNo(GSTINNo,DocumentNo);
      WITH GSTPaymentBuffer DO BEGIN
        SETRANGE("GST Registration No.",GSTINNo);
        SETRANGE("Document No.",DocumentNo);
        IF FINDSET THEN
          REPEAT
            GSTManagement.SettlementStart;
            GSTManagement.CheckGSTAccountingPeriod("Posting Date");
            GSTManagement.CheckGSTAccountingPeriod("Period End Date");
            IF "Credit Utilized" > "Net Payment Liability" THEN
              ERROR(STRSUBSTNO(CreditUtilizedErr,"Credit Utilized","Net Payment Liability","GST Component Code"));
            IF "Credit Utilized" >= 0 THEN
              IF "Net Payment Liability" > ("Credit Utilized" + "Payment Amount") THEN
                ERROR(
                  STRSUBSTNO(LiabilityExceedErr,"Credit Utilized" + "Payment Amount","Net Payment Liability","GST Component Code"));

            IF "Total Credit Available" >= 0 THEN
              "Surplus Credit" := "Total Credit Available" - "Credit Utilized";
            IF "Surplus Credit" > 0 THEN
              "Carry Forward" := "Surplus Credit" - "Surplus Cr. Utilized";
            IF ("Credit Utilized" > 0) AND ("Surplus Credit" < 0) THEN BEGIN
              AvailableAmount := 0;
              GSTClaimSetoff.RESET;
              GSTClaimSetoff.SETCURRENTKEY(Priority);
              GSTClaimSetoff.SETRANGE("GST Component Code","GST Component Code");
              GSTClaimSetoff.SETFILTER("Set Off Component Code",'<>%1',"GST Component Code");
              IF GSTClaimSetoff.FINDSET THEN BEGIN
                REPEAT
                  GSTPaymentBuffer2.GET(GSTINNo,DocumentNo,GSTClaimSetoff."Set Off Component Code");
                  IF GSTPaymentBuffer2."Total Credit Available" > 0 THEN BEGIN
                    IF GSTPaymentBuffer2."Net Payment Liability" > 0 THEN
                      AvailableAmount +=
                        GSTPaymentBuffer2."Total Credit Available" -
                        (GSTPaymentBuffer2."Surplus Cr. Utilized" + GSTPaymentBuffer2."Net Payment Liability")
                    ELSE
                      AvailableAmount +=
                        GSTPaymentBuffer2."Total Credit Available" - GSTPaymentBuffer2."Surplus Cr. Utilized";
                    IF AvailableAmount > 0 THEN BEGIN
                      IF AvailableAmount >= ABS("Surplus Credit") THEN BEGIN
                        GSTPaymentBuffer2."Surplus Cr. Utilized" += ABS("Surplus Credit");
                        "Surplus Credit" := 0;
                      END ELSE BEGIN
                        "Surplus Credit" += AvailableAmount;
                        GSTPaymentBuffer2."Surplus Cr. Utilized" += AvailableAmount;
                        AvailableAmount := 0;
                      END;
                      GSTPaymentBuffer2."Carry Forward" :=
                        GSTPaymentBuffer2."Surplus Credit" - GSTPaymentBuffer2."Surplus Cr. Utilized";
                      GSTPaymentBuffer2.MODIFY(TRUE);
                      MODIFY(TRUE);
                    END;
                  END;
                UNTIL (GSTClaimSetoff.NEXT = 0) OR ("Surplus Credit" = 0);
                IF "Surplus Credit" < 0 THEN
                  ERROR(STRSUBSTNO(CreditAvailableErr,"GST Component Code","Credit Utilized","Credit Utilized" + "Surplus Credit"));
              END ELSE
                IF ("Credit Utilized" > 0) AND ("Credit Utilized" > "Total Credit Available") THEN
                  ERROR(STRSUBSTNO(CreditSetoffErr,"GST Component Code"));
            END;
            MODIFY(TRUE);
            IF "Payment Liability - Rev. Chrg." >= 0 THEN
              TESTFIELD("Payment Amount - Rev. Chrg.","Payment Liability - Rev. Chrg.")
            ELSE
              TESTFIELD("Payment Amount - Rev. Chrg.",0);
            IF ("Payment Amount" <> 0) OR (Interest <> 0) OR (Penalty <> 0) OR (Fees <> 0) OR (Others <> 0) THEN
              TESTFIELD("Account No.");
            IF Interest <> 0 THEN
              TESTFIELD("Interest Account No.");
            IF Penalty <> 0 THEN
              TESTFIELD("Penalty Account No.");
            IF Fees <> 0 THEN
              TESTFIELD("Fees Account No.");
            IF Others <> 0 THEN
              TESTFIELD("Others Account No.");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE IsDifferentAccountTypeAndNo@1500021(GSTINNo@1500000 : Code[15];DocumentNo@1500001 : Code[20]);
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
      GSTPaymentBuffer2@1500003 : Record 16436;
    BEGIN
      WITH GSTPaymentBuffer DO BEGIN
        SETRANGE("GST Registration No.",GSTINNo);
        SETRANGE("Document No.",DocumentNo);
        IF FINDFIRST THEN BEGIN
          GSTPaymentBuffer2.SETRANGE("GST Registration No.",GSTINNo);
          GSTPaymentBuffer2.SETRANGE("Document No.",DocumentNo);
          GSTPaymentBuffer2.SETFILTER("Account Type",'<>%1',"Account Type");
          IF NOT GSTPaymentBuffer2.ISEMPTY THEN
            ERROR(STRSUBSTNO(GSTPaymentFieldSameErr,FORMAT(FIELDCAPTION("Account Type"))));
          GSTPaymentBuffer2.SETRANGE("Account Type");
          GSTPaymentBuffer2.SETFILTER("Account No.",'<>%1',"Account No.");
          IF NOT GSTPaymentBuffer2.ISEMPTY THEN
            ERROR(STRSUBSTNO(GSTPaymentFieldSameErr,FIELDCAPTION("Account No.")));
          GSTPaymentBuffer2.SETRANGE("Account No.");
          GSTPaymentBuffer2.SETFILTER("Bank Reference No.",'<>%1',"Bank Reference No.");
          IF NOT GSTPaymentBuffer2.ISEMPTY THEN
            ERROR(STRSUBSTNO(GSTPaymentFieldSameErr,FIELDCAPTION("Bank Reference No.")));
          GSTPaymentBuffer2.SETRANGE("Bank Reference No.");
          GSTPaymentBuffer2.SETFILTER("Bank Reference Date",'<>%1',"Bank Reference Date");
          IF NOT GSTPaymentBuffer2.ISEMPTY THEN
            ERROR(STRSUBSTNO(GSTPaymentFieldSameErr,FIELDCAPTION("Bank Reference Date")));
        END;
      END;
    END;

    LOCAL PROCEDURE CopyDocDimToTempDocDim@1500022(GSTINNo@1500004 : Code[15];DocumentNo@1500000 : Code[20]);
    VAR
      GSTPaymentBuffer@1500003 : Record 16436;
      IsError@1500001 : Boolean;
      ErrText@1500002 : Text[250];
    BEGIN
      WITH GSTPaymentBuffer DO BEGIN
        SETRANGE("GST Registration No.",GSTINNo);
        SETRANGE("Document No.",DocumentNo);
        IF FINDSET THEN
          REPEAT
            CheckDimComb("Dimension Set ID",IsError,ErrText);
            IF IsError THEN
              ERROR(DimCombinationErr,"GST Component Code",ErrText);
            CheckDimValuePosting("Document No.","Dimension Set ID");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckDimComb@1500023(DimSetID@1500000 : Integer;VAR IsError@1500001 : Boolean;VAR ErrText@1500002 : Text[250]);
    BEGIN
      IF NOT DimensionManagement.CheckDimIDComb(DimSetID) THEN BEGIN
        IsError := TRUE;
        ErrText := DimensionManagement.GetDimCombErr;
      END ELSE
        IsError := FALSE;
    END;

    LOCAL PROCEDURE CheckDimValuePosting@1500024(DocumentNo@1500000 : Code[20];DimSetID@1500001 : Integer);
    VAR
      NumberArr@1500003 : ARRAY [10] OF Code[20];
      DummyTableIDArr@1500002 : ARRAY [10] OF Integer;
    BEGIN
      NumberArr[1] := DocumentNo;
      IF NOT DimensionManagement.CheckDimValuePosting(DummyTableIDArr,NumberArr,DimSetID) THEN
        ERROR(InvaidDimensionErr,DimensionManagement.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE PostGSTBuffer@1500310(GSTINNo@1500001 : Code[15];PaymentDocumentNo@1500000 : Code[20]);
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
      GSTPostingSetup@1500005 : Record 16406;
      AccountType@1500007 : 'G/L Account,,,Bank Account';
      AccountNo@1500009 : Code[20];
      TotalPaymentAmount@1500004 : Decimal;
      ReceivableAmount@1500008 : Decimal;
      Sign@1500006 : Decimal;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("GST Settlement");
      Window.OPEN(UpdatingLedgersMsg);
      GSTPaymentBuffer.LOCKTABLE;
      Sign := -1;
      CLEAR(GenJnlPostLine);
      CLEAR(DimensionManagement);
      WITH GSTPaymentBuffer DO BEGIN
        SETRANGE("GST Registration No.",GSTINNo);
        SETRANGE("Document No.",PaymentDocumentNo);
        IF FINDSET THEN BEGIN
          "Document No." := GetSettlementDocumentNo("Posting Date",TRUE);
          REPEAT
            IF "Surplus Credit" < 0 THEN
              TESTFIELD("Surplus Credit",0);
            AccountType := "Account Type";
            AccountNo := "Account No.";
            ChequeNo := "Bank Reference No.";
            ChequeDate := "Bank Reference Date";
            PostingDate := "Posting Date";
            DocumentNo := "Document No.";
            DimnesionSetID := "Dimension Set ID";
            IF IsGSTPaymentApplicable(GSTPaymentBuffer) THEN BEGIN
              Window.UPDATE(1,"GST Component Code");
              GSTPostingSetup.GET("Location State Code","GST Component Code");
              TotalPaymentAmount += "Payment Amount" + Interest + Penalty + Fees + Others;
              IF "Payment Liability - Rev. Chrg." > 0 THEN BEGIN
                TotalPaymentAmount += "Payment Amount - Rev. Chrg.";
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account",GSTPostingSetup.GetPayableAccount(GSTPostingSetup),
                  "Payment Amount - Rev. Chrg.",STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",ReverseChargePaymentTxt));
              END;
              IF "Net Payment Liability" > 0 THEN
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account",GSTPostingSetup.GetPayableAccount(GSTPostingSetup),
                  "Net Payment Liability",STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",NetPaymentLibTxt));
              IF Interest > 0 THEN
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account","Interest Account No.",Interest,
                  STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",FIELDCAPTION(Interest)));
              IF Penalty > 0 THEN
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account","Penalty Account No.",Penalty,
                  STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",FIELDCAPTION(Penalty)));
              IF Fees > 0 THEN
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account","Fees Account No.",Fees,
                  STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",FIELDCAPTION(Fees)));
              IF Others > 0 THEN
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account","Others Account No.",Others,
                  STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",FIELDCAPTION(Others)));
              IF ("Credit Utilized" <> 0) OR ("Surplus Cr. Utilized" <> 0) THEN BEGIN
                IF "Credit Availed" < "Credit Utilized" THEN
                  ReceivableAmount := "Credit Availed" + "Surplus Cr. Utilized"
                ELSE
                  ReceivableAmount := "Credit Utilized" + "Surplus Cr. Utilized";
                IF ReceivableAmount > 0 THEN
                  CreateAndPostGenJournalLine(
                    "Account Type"::"G/L Account",GSTPostingSetup.GetRecAccount(GSTPostingSetup),
                    ReceivableAmount * Sign,STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",CreditUtilizedTxt));
              END;
              IF "UnAdjutsed Credit" < 0 THEN BEGIN
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account",GSTPostingSetup.GetPayableAccount(GSTPostingSetup),
                  "UnAdjutsed Credit",STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",UnadjustedCreditTxt));
                CreateAndPostGenJournalLine(
                  "Account Type"::"G/L Account",GSTPostingSetup.GetRecAccount(GSTPostingSetup),
                  "UnAdjutsed Credit" * Sign,STRSUBSTNO(GSTPaymentTypeTxt,"GST Component Code",UnadjustedCreditTxt));
              END;
            END;
            CloseDetailedGSTLedger(GSTPaymentBuffer);
            ClosePostedCreditAdjustmentEntry(GSTPaymentBuffer);
            CloseDetGSTDistEntry(GSTPaymentBuffer);
          UNTIL NEXT = 0;
        END;
        IF TotalPaymentAmount > 0 THEN
          CreateAndPostGenJournalLine(
            AccountType,AccountNo,TotalPaymentAmount * Sign,STRSUBSTNO(GSTPaymentTypeTxt,GstTxt,TotalPaymentTxt));
      END;
      Window.CLOSE;
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@1500019(AccountType@1500001 : 'G/L Account,,,Bank Account';AccountNo@1500003 : Code[20];PaymentAmount@1500002 : Decimal;AmountType@1500004 : Text[100]);
    VAR
      GenJournalLine2@1500000 : Record 81;
      AmountType1@1500005 : Text[50];
    BEGIN
      AmountType1 := COPYSTR(AmountType,1,50);
      WITH GenJournalLine2 DO BEGIN
        INIT;
        "Account Type" := AccountType;
        "Account No." := AccountNo;
        IF AccountType = AccountType::"Bank Account" THEN BEGIN
          "Bank Payment Type" := "Bank Payment Type"::"Manual Check";
          "Check Printed" := TRUE;
          "Cheque No." := ChequeNo;
          "Cheque Date" := ChequeDate;
        END;
        Amount := PaymentAmount;
        "System-Created Entry" := TRUE;
        "Document No." := DocumentNo;
        "Posting Date" := PostingDate;
        "Source Code" := SourceCodeSetup."GST Settlement";
        "Dimension Set ID" := DimnesionSetID;
        Description := AmountType1;
        DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        GenJnlPostLine.RunWithCheck(GenJournalLine2);
      END;
    END;

    PROCEDURE IsGSTPaymentApplicable@1500026(VAR GSTPaymentBuffer@1500000 : Record 16436) : Boolean;
    BEGIN
      WITH GSTPaymentBuffer DO
        IF ("Net Payment Liability" > 0) AND (("Credit Utilized" > 0) OR ("Payment Amount" > 0) OR ("Total Credit Available" > 0)) OR
           (Penalty > 0) OR (Interest > 0) OR (Fees > 0) OR (Others > 0) OR ("Payment Liability - Rev. Chrg." > 0) OR
           ("Surplus Cr. Utilized" > 0) OR ("Carry Forward" > 0) OR ("UnAdjutsed Credit" < 0)
        THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CloseDetailedGSTLedger@1500029(VAR GSTPaymentBuffer@1500000 : Record 16436);
    VAR
      DetailedGSTLedgerEntry@1500001 : Record 16419;
      DetailedGSTLedgerEntry2@1500002 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        FilterDetailedGSTLedgerEntry(GSTPaymentBuffer,DetailedGSTLedgerEntry);
        IF FINDSET THEN
          REPEAT
            DetailedGSTLedgerEntry2.GET("Entry No.");
            DetailedGSTLedgerEntry2."Payment Document No." := GSTPaymentBuffer."Document No.";
            DetailedGSTLedgerEntry2."Payment Document Date" := GSTPaymentBuffer."Posting Date";
            DetailedGSTLedgerEntry2.Paid := TRUE;
            DetailedGSTLedgerEntry2.MODIFY;
          UNTIL NEXT = 0;
        InsertPostedSettlementEntries(GSTPaymentBuffer);
      END;
    END;

    PROCEDURE UpdateDetailedGSTLedgerEntryAfterRecon@1500034(GSTRegNo@1500000 : Code[15];PostingMonth@1500002 : Integer;PostingYear@1500003 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500001 : Record 16419;
      GSTReconcilationLines@1500004 : Record 16430;
    BEGIN
      GSTReconcilationLines.SETCURRENTKEY("GSTIN No.",Reconciled,"Credit Availed",Month,Year);
      GSTReconcilationLines.SETRANGE("GSTIN No.",GSTRegNo);
      GSTReconcilationLines.SETRANGE(Reconciled,TRUE);
      GSTReconcilationLines.SETRANGE(Month,PostingMonth);
      GSTReconcilationLines.SETRANGE(Year,PostingYear);
      IF GSTReconcilationLines.FINDSET THEN
        REPEAT
          DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Purchase);
          IF GSTReconcilationLines."Document Type" = GSTReconcilationLines."Document Type"::Invoice THEN
            DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::Invoice)
          ELSE
            DetailedGSTLedgerEntry.SETRANGE("Document Type",DetailedGSTLedgerEntry."Document Type"::"Credit Memo");
          DetailedGSTLedgerEntry.SETRANGE("Document No.",GSTReconcilationLines."Document No.");
          DetailedGSTLedgerEntry.SETRANGE("GST Exempted Goods",FALSE);
          IF DetailedGSTLedgerEntry.FINDSET THEN
            REPEAT
              DetailedGSTLedgerEntry.Reconciled := TRUE;
              DetailedGSTLedgerEntry."Reconciliation Month" := GSTReconcilationLines.Month;
              DetailedGSTLedgerEntry."Reconciliation Year" := GSTReconcilationLines.Year;
              DetailedGSTLedgerEntry.MODIFY(TRUE);
            UNTIL DetailedGSTLedgerEntry.NEXT = 0;
        UNTIL GSTReconcilationLines.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertGSTReconLines@1500033(VAR GSTReconcilationLines@1500000 : Record 16430;VAR DetailedGSTLedgerEntry@1500002 : Record 16419;GSTRegNo@1500001 : Code[15];GSTMonth@1500003 : Integer;GSTYear@1500004 : Integer);
    VAR
      Vendor@1500005 : Record 23;
      GSTRegistrationNos@1500006 : Record 16400;
    BEGIN
      WITH GSTReconcilationLines DO BEGIN
        "GSTIN No." := GSTRegNo;
        "State Code" := DetailedGSTLedgerEntry."Location State Code";
        Month := GSTMonth;
        Year := GSTYear;
        IF DetailedGSTLedgerEntry."Document Type" = DetailedGSTLedgerEntry."Document Type"::Invoice THEN
          "Document Type" := "Document Type"::Invoice
        ELSE
          "Document Type" := "Document Type"::"Credit Note";
        IF Vendor.GET(DetailedGSTLedgerEntry."Source No.") THEN;
        "GSTIN of Supplier" := Vendor."GST Registration No.";
        "Document No." := DetailedGSTLedgerEntry."Document No.";
        "Document Date" := DetailedGSTLedgerEntry."Posting Date";
        "Goods/Services" := DetailedGSTLedgerEntry."GST Group Type";
        "External Document No." := DetailedGSTLedgerEntry."External Document No.";
        IF DetailedGSTLedgerEntry."GST Credit" = DetailedGSTLedgerEntry."GST Credit"::Availment THEN
          "GST Credit" := "GST Credit"::Availment;
        IF DetailedGSTLedgerEntry."GST Credit" = DetailedGSTLedgerEntry."GST Credit"::"Non-Availment" THEN
          "GST Credit" := "GST Credit"::"Non-Availment";
        "Credit Availed" := DetailedGSTLedgerEntry."Credit Availed";
        GSTRegistrationNos.GET(GSTRegNo);
        "Input Service Distribution" := GSTRegistrationNos."Input Service Distributor";
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE DetailedGSTFilterWithReconciliation@1500035(VAR DetailedGSTLedgerEntry@1500000 : Record 16419;GSTRegNo@1500003 : Code[15];GSTMonth@1500002 : Integer;GSTYear@1500001 : Integer);
    BEGIN
      WITH  DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY(
          "Entry Type","Transaction Type","Location  Reg. No.","Document Type",Reconciled,"GST Vendor Type",
          Reversed,"Posting Date",Paid,
          "Credit Adjustment Type");
        SETRANGE("Entry Type","Entry Type"::"Initial Entry");
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Location  Reg. No.",GSTRegNo);
        SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo");
        SETRANGE(Reconciled,FALSE);
        SETRANGE("GST Vendor Type","GST Vendor Type"::Registered);
        SETRANGE(Reversed,FALSE);
        SETFILTER("Posting Date",'<=%1',CalculateMonth(GSTMonth,GSTYear));
        SETRANGE(Paid,FALSE);
        SETFILTER("Credit Adjustment Type",'<>%1',"Credit Adjustment Type"::"Permanent Reversal");
        SETRANGE("GST Exempted Goods",FALSE);
      END;
    END;

    LOCAL PROCEDURE ExtendedUpdateGSTRecon@1500046(VAR GSTReconcilationLines2@1500000 : Record 16430;VAR DetailedGSTLedgerEntry@1500001 : Record 16419;VAR GSTReconcilationLines@1500004 : Record 16430;VAR DetailedGSTLedgerEntry2@1500100 : Record 16419;GSTReconMapping@1500101 : Record 16429);
    BEGIN
      WITH GSTReconcilationLines DO
        IF GSTReconcilationLines2.GET("GSTIN No.","State Code",Month,Year,"Document No.") THEN BEGIN
          DetailedGSTLedgerEntry.COPYFILTERS(DetailedGSTLedgerEntry2);
          DetailedGSTLedgerEntry.SETCURRENTKEY("Document No.","GST Component Code","HSN/SAC Code");
          DetailedGSTLedgerEntry.SETRANGE("Document No.","Document No.");
          DetailedGSTLedgerEntry.SETRANGE("GST Component Code",GSTReconMapping."GST Component Code");
          IF DetailedGSTLedgerEntry.FINDFIRST THEN BEGIN
            DetailedGSTLedgerEntry.CALCSUMS("GST Amount");
            DetailedGSTLedgerEntry.CALCSUMS("GST Base Amount");
            CASE GSTReconMapping."GST Reconciliation Field No." OF
              FIELDNO("Component 1 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 1 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 1 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 1 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 2 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 2 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 2 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 2 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 3 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 3 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 3 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 3 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 4 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 4 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 4 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 4 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 5 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 5 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 5 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 5 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 6 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 6 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 6 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 6 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 7 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 7 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 7 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 7 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
              FIELDNO("Component 8 Amount"):
                BEGIN
                  GSTReconcilationLines2."Taxable Value" := DetailedGSTLedgerEntry."GST Base Amount";
                  GSTReconcilationLines2."Component 8 Rate" := DetailedGSTLedgerEntry."GST %";
                  GSTReconcilationLines2."Component 8 Amount" := DetailedGSTLedgerEntry."GST Amount";
                  GSTReconcilationLines2."Component 8 Avl. Amount" := CalculateAvailmentAmount(DetailedGSTLedgerEntry);
                END;
            END;
            GSTReconcilationLines2.MODIFY(TRUE);
          END;
        END;
    END;

    PROCEDURE CheckSettlement@1500555(GSTINNo@1500002 : Code[15];RecMonth@1500001 : Integer;RecYear@1500000 : Integer);
    VAR
      PostedGSTReconciliation@1500003 : Record 16432;
    BEGIN
      WITH PostedGSTReconciliation DO BEGIN
        SETCURRENTKEY("GSTIN No.","Reconciliation Month","Reconciliation Year","Source Type");
        SETRANGE("GSTIN No.",GSTINNo);
        SETRANGE("Reconciliation Month",RecMonth);
        SETRANGE("Reconciliation Year",RecYear);
        SETRANGE("Source Type","Source Type"::Settlement);
        IF FINDFIRST THEN
          ERROR(STRSUBSTNO(SettlementErr,RecMonth,RecYear,GSTINNo));
      END;
    END;

    PROCEDURE CheckPostingPeriodForCrAdjJnl@1500358(TypeOfAdj@1500004 : 'Reconciled,Reconciled-Reversal,Unreconciled,Unreconciled-Avail';RecMonth@1500003 : Integer;RecYear@1500002 : Integer;AdjPostMonth@1500001 : Integer;AdjPostYear@1500000 : Integer);
    BEGIN
      IF TypeOfAdj = TypeOfAdj::Reconciled THEN
        IF (RecMonth = AdjPostMonth) AND (RecYear = AdjPostYear) THEN
          ERROR(STRSUBSTNO(CrAdjPostErr,TypeOfAdj));
    END;

    PROCEDURE CheckNatureOfAdjForSamePeriod@1500067(NatureOfAdj@1500000 : ' ,Reconciled-Reversal,Reconciled-Reavail,Unreconciled-Avail,Unreconciled-Reversal,Unreconciled-Permanent Reversal';RecMonth@1500001 : Integer;RecYear@1500002 : Integer;AdjPostMonth@1500004 : Integer;AdjPostYear@1500003 : Integer);
    BEGIN
      IF (RecMonth = AdjPostMonth) AND (RecYear = AdjPostYear) THEN
        IF NatureOfAdj IN [NatureOfAdj::"Reconciled-Reversal",NatureOfAdj::"Unreconciled-Reversal"] THEN
          ERROR(STRSUBSTNO(NatureOfAdjPeriodErr,NatureOfAdj));
    END;

    PROCEDURE UpdateNatureOfAdjInCrdAdjJnlLine@1500065(VAR GSTCreditAdjustmentJournal@1500000 : Record 16434;GSTINNo@1500001 : Code[15];NatureOfAdj@1500002 : ' ,Reconciled-Reversal,Reconciled-Reavail,Unreconciled-Avail,Unreconciled-Reversal,Unreconciled-Permanent Reversal');
    BEGIN
      GSTCreditAdjustmentJournal.SETRANGE("GST Registration No.",GSTINNo);
      GSTCreditAdjustmentJournal.MODIFYALL("Nature of Adjustment",NatureOfAdj);
    END;

    PROCEDURE ValidateCompAmtWithPeriodicData@1500063(VAR GSTReconcilationLines@1500000 : Record 16430;VAR PeriodicGSTR2AData@1500001 : Record 16431) : Boolean;
    VAR
      GeneralLedgerSetup@1500002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GSTTolarance := GeneralLedgerSetup."GST Recon. Tolerance";
      WITH GSTReconcilationLines DO BEGIN
        IF ("Taxable Value" > PeriodicGSTR2AData."Taxable Value" + GSTTolarance) OR
           ("Taxable Value" < PeriodicGSTR2AData."Taxable Value" - GSTTolarance)
        THEN
          "Error Type" := TaxableValTxt;
        IF "Component 1 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 1 Amount",
            "Component 1 Amount",GSTTolarance,FIELDNO("Component 1 Amount"));
        IF "Component 2 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 2 Amount",
            "Component 2 Amount",GSTTolarance,FIELDNO("Component 2 Amount"));
        IF "Component 3 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 3 Amount",
            "Component 3 Amount",GSTTolarance,FIELDNO("Component 3 Amount"));
        IF "Component 4 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 4 Amount",
            "Component 4 Amount",GSTTolarance,FIELDNO("Component 4 Amount"));
        IF "Component 5 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 5 Amount",
            "Component 5 Amount",GSTTolarance,FIELDNO("Component 5 Amount"));
        IF "Component 6 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 6 Amount",
            "Component 6 Amount",GSTTolarance,FIELDNO("Component 6 Amount"));
        IF "Component 7 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 7 Amount",
            "Component 7 Amount",GSTTolarance,FIELDNO("Component 7 Amount"));
        IF "Component 8 Amount" <> 0 THEN
          UpdateErrorTypeForCompAmt(
            GSTReconcilationLines,PeriodicGSTR2AData."Component 8 Amount",
            "Component 8 Amount",GSTTolarance,FIELDNO("Component 8 Amount"));
      END;
      IF GSTReconcilationLines."Error Type" = '' THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateErrorTypeForCompAmt@1170000015(VAR GSTReconcilationLines@1500100 : Record 16430;PeriodicCompAmt@1500101 : Decimal;RecCompAmt@1500102 : Decimal;GSTTolarance@1500203 : Decimal;FieldNo@1500103 : Integer);
    VAR
      GSTReconMapping@1500000 : Record 16429;
    BEGIN
      GSTReconMapping.SETRANGE("GST Reconciliation Field No.",FieldNo);
      IF GSTReconMapping.FINDFIRST THEN;
      IF (PeriodicCompAmt > RecCompAmt + GSTTolarance) OR (PeriodicCompAmt < RecCompAmt - GSTTolarance) THEN
        GSTReconcilationLines."Error Type" := STRSUBSTNO(CompAmtTxt,GSTReconMapping."GST Component Code");
    END;

    PROCEDURE InsertDistComponentAmount@1500041(DistributionNo@1500001 : Code[20];DistReversal@1500000 : Boolean);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
      DistComponentAmount@1500003 : Record 16446;
      GSTDistributionHeader@1500004 : Record 16444;
      GSTDistributionLine@1500006 : Record 16445;
      GSTPostingSetup@1500007 : Record 16406;
      Location@1500008 : Record 14;
    BEGIN
      CheckDistributionValidations(DistributionNo);
      DeleteDistComponentAmount(DistributionNo);
      GeneralLedgerSetup.GET;
      GSTDistributionHeader.GET(DistributionNo);
      GSTDistributionLine.SETRANGE("Distribution No.",DistributionNo);
      IF GSTDistributionLine.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            RESET;
            SETCURRENTKEY("Dist. Document No.","Dist. Input GST Credit");
            IF DistReversal THEN BEGIN
              SETRANGE("Dist. Reverse Document No.",DistributionNo);
              SETRANGE(Distributed,TRUE);
            END ELSE
              SETRANGE("Dist. Document No.",DistributionNo);
            IF FINDSET THEN BEGIN
              REPEAT
                DistComponentAmount.RESET;
                DistComponentAmount.SETRANGE("Distribution No.",DistributionNo);
                DistComponentAmount.SETRANGE("GST Credit",GSTDistributionLine."Rcpt. Credit Type");
                IF GSTDistributionLine."Rcpt. Credit Type" = GSTDistributionLine."Rcpt. Credit Type"::Availment THEN BEGIN
                  DistComponentAmount.SETRANGE("GST Component Code","GST Component Code");
                  DistComponentAmount.SETRANGE("To Location Code",GSTDistributionLine."To Location Code");
                  DistComponentAmount.SETRANGE(Type);
                  DistComponentAmount.SETRANGE("No.");
                END ELSE BEGIN
                  DistComponentAmount.SETRANGE("GST Component Code");
                  DistComponentAmount.SETRANGE("To Location Code");
                  DistComponentAmount.SETRANGE(Type,Type);
                  DistComponentAmount.SETRANGE("No.","No.");
                END;
                IF NOT DistComponentAmount.FINDFIRST THEN BEGIN
                  DistComponentAmount.INIT;
                  DistComponentAmount."Distribution No." := DistributionNo;
                  IF GSTDistributionLine."Rcpt. Credit Type" = GSTDistributionLine."Rcpt. Credit Type"::Availment THEN BEGIN
                    DistComponentAmount."GST Component Code" := "GST Component Code";
                    DistComponentAmount."To Location Code" := GSTDistributionLine."To Location Code";
                    Location.GET(GSTDistributionLine."To Location Code");
                    Location.TESTFIELD("State Code");
                    GSTPostingSetup.GET(
                      Location."State Code",GetToGSTComponent("GST Component Code",GSTDistributionLine."Distribution Jurisdiction"));
                    GSTPostingSetup.TESTFIELD("Receivable Account");
                    DistComponentAmount.Type := DistComponentAmount.Type::"G/L Account";
                    DistComponentAmount."No." := GSTPostingSetup."Receivable Account";
                  END ELSE BEGIN
                    DistComponentAmount."GST Component Code" := '';
                    DistComponentAmount.Type := Type;
                    DistComponentAmount."No." := "No.";
                  END;
                  DistComponentAmount."GST Credit" := GSTDistributionLine."Rcpt. Credit Type";
                  DistComponentAmount."GST Base Amount" := "GST Base Amount";
                  DistComponentAmount."GST Amount" := "GST Amount";
                  DistComponentAmount."GST Registration No." := GSTDistributionHeader."From GSTIN No.";
                  DistComponentAmount."Distribution %" := GSTDistributionLine."Distribution %";
                  IF DistReversal THEN
                    DistComponentAmount."Credit Amount" :=
                      ROUND(GSTDistributionLine."Distribution %" * DistComponentAmount."GST Amount" / 100,
                        GeneralLedgerSetup."Amount Rounding Precision")
                  ELSE
                    DistComponentAmount."Debit Amount" :=
                      ROUND(GSTDistributionLine."Distribution %" * DistComponentAmount."GST Amount" / 100,
                        GeneralLedgerSetup."Amount Rounding Precision");
                  DistComponentAmount.INSERT;
                END ELSE BEGIN
                  DistComponentAmount."GST Base Amount" += "GST Base Amount";
                  DistComponentAmount."GST Amount" += "GST Amount";
                  DistComponentAmount."Distribution %" := GSTDistributionLine."Distribution %";
                  IF DistReversal THEN
                    DistComponentAmount."Credit Amount" +=
                      ROUND(GSTDistributionLine."Distribution %" * "GST Amount" / 100,
                        GeneralLedgerSetup."Amount Rounding Precision")
                  ELSE
                    DistComponentAmount."Debit Amount" +=
                      ROUND(GSTDistributionLine."Distribution %" * "GST Amount" / 100,
                        GeneralLedgerSetup."Amount Rounding Precision");
                  DistComponentAmount.MODIFY;
                END;
              UNTIL NEXT = 0;
            END ELSE
              ERROR(SelectDitributionErr);
          END;
        UNTIL GSTDistributionLine.NEXT = 0;

      // Balancing Account
      InsertDistComponentAmountBalancingAcc(DistributionNo,DistReversal);
    END;

    PROCEDURE InsertDistComponentAmountBalancingAcc@1500032(DistributionNo@1500008 : Code[20];DistReversal@1500006 : Boolean);
    VAR
      DetailedGSTLedgerEntry@1500005 : Record 16419;
      DistComponentAmount@1500004 : Record 16446;
      GSTDistributionHeader@1500003 : Record 16444;
      GSTPostingSetup@1500001 : Record 16406;
      Location@1500000 : Record 14;
    BEGIN
      GSTDistributionHeader.GET(DistributionNo);
      WITH DetailedGSTLedgerEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Dist. Document No.","Dist. Input GST Credit");
        IF DistReversal THEN BEGIN
          SETRANGE("Dist. Reverse Document No.",DistributionNo);
          SETRANGE(Distributed,TRUE);
        END ELSE
          SETRANGE("Dist. Document No.",DistributionNo);
        IF FINDSET THEN BEGIN
          REPEAT
            DistComponentAmount.RESET;
            DistComponentAmount.SETRANGE("Distribution No.",DistributionNo);
            DistComponentAmount.SETRANGE("GST Credit",GSTDistributionHeader."Dist. Credit Type");
            DistComponentAmount.SETRANGE("GST Component Code","GST Component Code");
            DistComponentAmount.SETRANGE("To Location Code",GSTDistributionHeader."From Location Code");
            IF NOT DistComponentAmount.FINDFIRST THEN BEGIN
              DistComponentAmount.INIT;
              DistComponentAmount."Distribution No." := DistributionNo;
              DistComponentAmount."GST Component Code" := "GST Component Code";
              DistComponentAmount."To Location Code" := GSTDistributionHeader."From Location Code";
              Location.GET(GSTDistributionHeader."From Location Code");
              Location.TESTFIELD("State Code");
              DistComponentAmount."GST Credit" := GSTDistributionHeader."Dist. Credit Type";
              IF GSTDistributionHeader."Dist. Credit Type" = GSTDistributionHeader."Dist. Credit Type"::Availment THEN BEGIN
                GSTPostingSetup.GET(Location."State Code","GST Component Code");
                GSTPostingSetup.TESTFIELD("Receivable Acc. (Dist)");
                DistComponentAmount.Type := DistComponentAmount.Type::"G/L Account";
                DistComponentAmount."No." := GSTPostingSetup."Receivable Acc. (Dist)";
              END ELSE BEGIN
                GSTPostingSetup.GET(Location."State Code","GST Component Code");
                GSTPostingSetup.TESTFIELD("Expense Account");
                DistComponentAmount.Type := DistComponentAmount.Type::"G/L Account";
                DistComponentAmount."No." := GSTPostingSetup."Expense Account";
              END;
              DistComponentAmount."GST Base Amount" := "GST Base Amount";
              DistComponentAmount."GST Amount" := "GST Amount";
              DistComponentAmount."GST Registration No." := GSTDistributionHeader."From GSTIN No.";
              DistComponentAmount."Distribution %" := 0;
              IF DistReversal THEN
                DistComponentAmount."Debit Amount" := DistComponentAmount."GST Amount"
              ELSE
                DistComponentAmount."Credit Amount" := DistComponentAmount."GST Amount";
              DistComponentAmount.INSERT;
            END ELSE BEGIN
              DistComponentAmount."GST Base Amount" += "GST Base Amount";
              DistComponentAmount."GST Amount" += "GST Amount";
              IF DistReversal THEN
                DistComponentAmount."Debit Amount" := DistComponentAmount."GST Amount"
              ELSE
                DistComponentAmount."Credit Amount" := DistComponentAmount."GST Amount";
              DistComponentAmount.MODIFY;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DeleteGSTDistributionLine@1500040(DistributionNo@1500000 : Code[20]);
    VAR
      GSTDistributionLine@1500001 : Record 16445;
    BEGIN
      WITH GSTDistributionLine DO BEGIN
        RESET;
        SETCURRENTKEY("Distribution No.");
        SETRANGE("Distribution No.",DistributionNo);
        DELETEALL;
      END;
    END;

    PROCEDURE DeleteDistComponentAmount@1500042(DistributionNo@1500000 : Code[20]);
    VAR
      DistComponentAmount@1500001 : Record 16446;
    BEGIN
      WITH DistComponentAmount DO BEGIN
        RESET;
        SETCURRENTKEY("Distribution No.");
        SETRANGE("Distribution No.",DistributionNo);
        DELETEALL;
      END;
    END;

    PROCEDURE PostGSTDistribution@1500045(DistributionNo@1500000 : Code[20];ReversalInvNo@1500012 : Code[20];DistReversal@1500011 : Boolean) : Boolean;
    VAR
      GenJournalLine@1500006 : Record 81;
      GSTDistributionHeader@1500007 : Record 16444;
      GSTDistributionLine@1500008 : Record 16445;
      DetailedGSTLedgerEntry@1500009 : Record 16419;
      DetailedGSTLedgerEntry1@1500013 : Record 16419;
      DistComponentAmount@1500010 : Record 16446;
      DetailedGSTDistEntry@1170000000 : Record 16454;
      DetailedGSTDistEntry1@1500345 : Record 16454;
      PostedGSTDistributionHeader@1500567 : Record 16452;
      PostedDistNo@1500014 : Code[20];
    BEGIN
      CLEAR(GenJnlPostLine);
      IF DistReversal THEN BEGIN
        IF NOT CONFIRM(PostDistributionReversalQst) THEN
          EXIT;
      END ELSE BEGIN
        IF NOT CONFIRM(PostDistributionQst,FALSE) THEN
          EXIT;
      END;

      GSTDistributionHeader.GET(DistributionNo);
      IF DistReversal THEN BEGIN
        PostedGSTDistributionHeader.GET(GSTDistributionHeader."Reversal Invoice No.");
        IF GSTDistributionHeader."Posting Date" < PostedGSTDistributionHeader."Posting Date" THEN
          ERROR(DistRevPostDateErr,
            GSTDistributionHeader."Reversal Invoice No.",PostedGSTDistributionHeader."Posting Date",
            GSTDistributionHeader."Posting Date");
      END;
      PostedDistNo := InsertPostedGSTDistHeader(GSTDistributionHeader);
      GSTDistributionLine.RESET;
      GSTDistributionLine.SETCURRENTKEY("Distribution No.");
      GSTDistributionLine.SETRANGE("Distribution No.",DistributionNo);
      IF GSTDistributionLine.FINDSET THEN
        REPEAT
          InsertPostedGSTDistLine(GSTDistributionLine,PostedDistNo);
          DetailedGSTLedgerEntry.RESET;
          IF DistReversal THEN BEGIN
            DetailedGSTLedgerEntry.SETRANGE("Dist. Reverse Document No.",GSTDistributionHeader."No.");
            DetailedGSTLedgerEntry.SETRANGE(Distributed,TRUE);
            IF DetailedGSTLedgerEntry.FINDSET THEN
              REPEAT
                DetailedGSTLedgerEntry1.GET(DetailedGSTLedgerEntry."Entry No.");
                DetailedGSTLedgerEntry1.Distributed := FALSE;
                DetailedGSTLedgerEntry1."Dist. Reverse Document No." := PostedDistNo;
                DetailedGSTLedgerEntry1."Distributed Reversed" := TRUE;
                DetailedGSTLedgerEntry1.MODIFY(TRUE);
                DetailedGSTDistEntry.SETRANGE("Detailed GST Ledger Entry No.",DetailedGSTLedgerEntry1."Entry No.");
                DetailedGSTDistEntry.SETRANGE(Reversal,FALSE);
                DetailedGSTDistEntry.SETRANGE("Original Dist. Invoice No.",'');
                IF DetailedGSTDistEntry.FINDSET THEN
                  REPEAT
                    DetailedGSTDistEntry1.GET(DetailedGSTDistEntry."Entry No.");
                    DetailedGSTDistEntry1.Reversal := TRUE;
                    DetailedGSTDistEntry1."Reversal Date" := GSTDistributionLine."Posting Date";
                    DetailedGSTDistEntry1.MODIFY(TRUE);
                  UNTIL DetailedGSTDistEntry.NEXT = 0;
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
          END ELSE BEGIN
            DetailedGSTLedgerEntry.SETRANGE("Dist. Document No.",GSTDistributionHeader."No.");
            IF DetailedGSTLedgerEntry.FINDSET THEN
              REPEAT
                DetailedGSTLedgerEntry1.GET(DetailedGSTLedgerEntry."Entry No.");
                DetailedGSTLedgerEntry1.Distributed := TRUE;
                DetailedGSTLedgerEntry1."Distributed Reversed" := FALSE;
                DetailedGSTLedgerEntry1."Dist. Document No." := PostedDistNo;
                DetailedGSTLedgerEntry1.MODIFY;
              UNTIL DetailedGSTLedgerEntry.NEXT = 0;
          END;
        UNTIL GSTDistributionLine.NEXT = 0;
      InsertDetGSTDistEntries(DistributionNo,PostedDistNo);
      WITH DistComponentAmount DO BEGIN
        SETCURRENTKEY("Distribution No.");
        SETRANGE("Distribution No.",DistributionNo);
        IF FINDSET THEN
          REPEAT
            IF "Debit Amount" <> 0 THEN
              PostGenJournalLine(
                GenJournalLine,GSTDistributionHeader."ISD Document Type",PostedDistNo,GSTDistributionHeader."Posting Date",
                "No.","Debit Amount",GSTDistributionHeader."Shortcut Dimension 1 Code",
                GSTDistributionHeader."Shortcut Dimension 2 Code",GSTDistributionHeader."Dimension Set ID")
            ELSE
              PostGenJournalLine(
                GenJournalLine,GSTDistributionHeader."ISD Document Type",PostedDistNo,GSTDistributionHeader."Posting Date",
                "No.",-"Credit Amount",GSTDistributionHeader."Shortcut Dimension 1 Code",
                GSTDistributionHeader."Shortcut Dimension 2 Code",GSTDistributionHeader."Dimension Set ID");
            GenJnlPostLine.RunWithCheck(GenJournalLine);
          UNTIL NEXT = 0;
      END;

      IF DistReversal THEN BEGIN
        DetailedGSTDistEntry.RESET;
        DetailedGSTDistEntry.SETRANGE("ISD Document No.",ReversalInvNo);
        DetailedGSTDistEntry.SETRANGE(Reversal,FALSE);
        IF DetailedGSTDistEntry.ISEMPTY THEN BEGIN
          PostedGSTDistributionHeader.GET(ReversalInvNo);
          PostedGSTDistributionHeader."Completely Reversed" := TRUE;
          PostedGSTDistributionHeader.MODIFY(TRUE);
        END;
      END;
      GSTDistributionHeader.DELETE;
      DeleteGSTDistributionLine(DistributionNo);
      DeleteDistComponentAmount(DistributionNo);
      EXIT(TRUE);
    END;

    PROCEDURE CheckDistributionValidations@1500049(DistributionNo@1500000 : Code[20]);
    VAR
      GSTDistributionLine@1500003 : Record 16445;
      GSTDistributionLine1@1500065 : Record 16445;
    BEGIN
      WITH GSTDistributionLine DO BEGIN
        RESET;
        SETCURRENTKEY("Distribution No.");
        SETRANGE("Distribution No.",DistributionNo);
        CALCSUMS("Distribution %");
        IF "Distribution %" <> 100 THEN
          ERROR(DistributeErr,FIELDNAME("Distribution %"));
        IF FINDSET THEN
          REPEAT
            IF "Distribution %" = 0 THEN
              ERROR(
                ZeroDistPercentErr,FIELDNAME("Distribution %"),"From Location Code");
            IF ("To GSTIN No." = '') AND ("Rcpt. Credit Type" = "Rcpt. Credit Type"::Availment) THEN
              ERROR(RcptCreditTypeErr,FIELDNAME("Rcpt. Credit Type"),FIELDNAME("To GSTIN No."),"Line No.");
            IF "Rcpt. Credit Type" = "Rcpt. Credit Type"::" " THEN
              ERROR(
                RcptCreditTypeBlankErr,FIELDCAPTION("Rcpt. Credit Type"),"Line No.");
            GSTDistributionLine1.RESET;
            GSTDistributionLine1.SETRANGE("Distribution No.",DistributionNo);
            GSTDistributionLine1.SETRANGE("To Location Code","To Location Code");
            GSTDistributionLine1.SETRANGE("Rcpt. Credit Type","Rcpt. Credit Type");
            IF GSTDistributionLine1.COUNT > 1 THEN
              ERROR(SameToLocationErr,"To Location Code","Rcpt. Credit Type");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostGenJournalLine@1500060(VAR GenJournalLine@1500007 : Record 81;DocumentType@1170000000 : 'Invoice,Credit Memo';DocumentNo@1500005 : Code[20];PostingDate@1500004 : Date;AccountNo@1500000 : Code[20];Amt@1500001 : Decimal;ShortcutDim1@1500003 : Code[20];ShortcutDim2@1500006 : Code[20];DimSetID@1500008 : Integer);
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("GST Distribution");
      WITH GenJournalLine DO BEGIN
        INIT;
        "Line No." += 10000;
        "Source Code" := SourceCodeSetup."GST Distribution";
        IF DocumentType = DocumentType::Invoice THEN
          "Document Type" := "Document Type"::Invoice
        ELSE
          "Document Type" := "Document Type"::"Credit Memo";
        "Document No." := DocumentNo;
        "Account Type" := "Account Type"::"G/L Account";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
        "Posting Date" := PostingDate;
        VALIDATE("Account No.",AccountNo);
        VALIDATE(Amount,Amt);
        "System-Created Entry" := TRUE;
        "Shortcut Dimension 1 Code" := ShortcutDim1;
        "Shortcut Dimension 2 Code" := ShortcutDim2;
        "Dimension Set ID" := DimSetID;
      END;
    END;

    LOCAL PROCEDURE InsertDetGSTDistEntries@1500050(DistributionNo@1500000 : Code[20];PostedDistributionNo@1500011 : Code[20]);
    VAR
      DetailedGSTLedgerEntry@1500001 : Record 16419;
      GSTDistributionHeader@1500008 : Record 16444;
      GSTDistributionLine@1500002 : Record 16445;
      DetailedGSTDistEntry@1500003 : Record 16454;
      Location@1500005 : Record 14;
      Vendor@1500004 : Record 23;
      VendorLedgerEntry@1500006 : Record 25;
      PurchInvHeader@1500007 : Record 122;
      PurchCrMemoHdr@1500010 : Record 124;
      GeneralLedgerSetup@1500009 : Record 98;
      PostedGSTDistributionHeader@1500100 : Record 16452;
      Sign@1500234 : Integer;
    BEGIN
      Sign := 1;
      GeneralLedgerSetup.GET;
      GSTDistributionHeader.GET(DistributionNo);
      IF GSTDistributionHeader.Reversal THEN BEGIN
        Sign := -1;
        DetailedGSTLedgerEntry.SETRANGE("Dist. Reverse Document No.",PostedDistributionNo);
      END ELSE
        DetailedGSTLedgerEntry.SETRANGE("Dist. Document No.",PostedDistributionNo);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          GSTDistributionLine.RESET;
          GSTDistributionLine.SETCURRENTKEY("Distribution No.");
          GSTDistributionLine.SETRANGE("Distribution No.",DistributionNo);
          IF GSTDistributionLine.FINDSET THEN
            REPEAT
              WITH DetailedGSTDistEntry DO BEGIN
                INIT;
                "Entry No." := GetNextGSTDistDetailEntryNo;
                "Detailed GST Ledger Entry No." := DetailedGSTLedgerEntry."Entry No.";
                "Dist. Location Code" := GSTDistributionLine."From Location Code";
                "Dist. Location State  Code" := DetailedGSTLedgerEntry."Location State Code";
                "Dist. GST Regn. No." := DetailedGSTLedgerEntry."Location  Reg. No.";
                "Dist. GST Credit" := DetailedGSTLedgerEntry."GST Credit";
                "ISD Document Type" := GSTDistributionHeader."ISD Document Type";
                "ISD Document No." := PostedDistributionNo;
                "ISD Posting Date" := GSTDistributionHeader."Posting Date";
                "Vendor No." := DetailedGSTLedgerEntry."Source No.";
                "Supplier GST Reg. No." := DetailedGSTLedgerEntry."Buyer/Seller Reg. No.";
                Vendor.GET("Vendor No.");
                "Vendor Name" := Vendor.Name;
                "Vendor Address" := Vendor.Address;
                "Vendor State Code" := DetailedGSTLedgerEntry."Buyer/Seller State Code";
                "Document Type" := DetailedGSTLedgerEntry."Document Type";
                "Document No." := DetailedGSTLedgerEntry."Document No.";
                "Posting Date" := DetailedGSTLedgerEntry."Posting Date";
                "Vendor Invoice No." := DetailedGSTLedgerEntry."External Document No.";
                VendorLedgerEntry.SETRANGE("Buy-from Vendor No.",Vendor."No.");
                VendorLedgerEntry.SETRANGE("Document No.",DetailedGSTLedgerEntry."Document No.");
                VendorLedgerEntry.FINDFIRST;
                "Vendor Document Date" := VendorLedgerEntry."Document Date";
                "GST Base Amount" := Sign * DetailedGSTLedgerEntry."GST Base Amount";
                "GST Group Code" := DetailedGSTLedgerEntry."GST Group Code";
                "GST%" := DetailedGSTLedgerEntry."GST %";
                "GST Amount" := Sign * DetailedGSTLedgerEntry."GST Amount";
                "Rcpt. Location Code" := GSTDistributionLine."To Location Code";
                "Rcpt. GST Reg. No." := GSTDistributionLine."To GSTIN No.";
                Location.GET(GSTDistributionLine."To Location Code");
                "Rcpt. Location State Code" := Location."State Code";
                "Rcpt. GST Credit" := GSTDistributionLine."Rcpt. Credit Type";
                "Distribution Jurisdiction" := GSTDistributionLine."Distribution Jurisdiction";
                "Location Distribution %" := GSTDistributionLine."Distribution %";
                "Distributed Component Code" := DetailedGSTLedgerEntry."GST Component Code";
                "Rcpt. Component Code" := GetToGSTComponent("Distributed Component Code","Distribution Jurisdiction");
                "Distribution Amount" :=
                  ROUND("GST Amount" * GSTDistributionLine."Distribution %" / 100,GeneralLedgerSetup."Amount Rounding Precision");
                "Pre Dist. Invoice No." := DistributionNo;
                "Document Line No." := DetailedGSTLedgerEntry."Document Line No.";
                IF GSTDistributionHeader.Reversal THEN BEGIN
                  "Original Dist. Invoice No." := GSTDistributionHeader."Reversal Invoice No.";
                  PostedGSTDistributionHeader.GET(GSTDistributionHeader."Reversal Invoice No.");
                  "Original Dist. Invoice Date" := PostedGSTDistributionHeader."Posting Date";
                END;
                IF "Rcpt. GST Credit" = "Rcpt. GST Credit"::Availment THEN BEGIN
                  "G/L Account No." :=
                    GetGSTAccountNoDistribution(
                      "Rcpt. Location State Code","Rcpt. Component Code",DetailedGSTLedgerEntry."Transaction Type",
                      DetailedGSTLedgerEntry.Type::"G/L Account","Rcpt. GST Credit",TRUE,TRUE);
                  "Credit Availed" := TRUE;
                END ELSE
                  "G/L Account No." := DetailedGSTLedgerEntry."No.";
                "GST Rounding Precision" := DetailedGSTLedgerEntry."GST Rounding Precision";
                "GST Rounding Type" := DetailedGSTLedgerEntry."GST Rounding Type";
                Cess := DetailedGSTLedgerEntry.Cess;
                IF PurchInvHeader.GET(DetailedGSTLedgerEntry."Document No.") THEN
                  "Invoice Type" := PurchInvHeader."Invoice Type"
                ELSE
                  IF PurchCrMemoHdr.GET(DetailedGSTLedgerEntry."Document No.") THEN
                    "Invoice Type" := PurchInvHeader."Invoice Type";
                "Service Account No." := DetailedGSTLedgerEntry."No.";
                INSERT;
              END;
            UNTIL GSTDistributionLine.NEXT = 0;
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
    END;

    PROCEDURE CheckPostedGSTReconiliation@1500058(GSTINNo@1500000 : Code[15];InputMonth@1500001 : Integer;InputYear@1500002 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500675 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.SETCURRENTKEY("Location  Reg. No.",Reconciled,"Reconciliation Month","Reconciliation Year");
      DetailedGSTLedgerEntry.SETRANGE("Location  Reg. No.",GSTINNo);
      DetailedGSTLedgerEntry.SETRANGE(Reconciled,TRUE);
      DetailedGSTLedgerEntry.SETRANGE("Reconciliation Month",InputMonth);
      DetailedGSTLedgerEntry.SETRANGE("Reconciliation Year",InputYear);
      IF DetailedGSTLedgerEntry.FINDFIRST THEN
        ERROR(PostedGSTReconErr,GSTINNo,InputMonth,InputYear);
    END;

    LOCAL PROCEDURE CalculateAvailmentAmount@1500913(VAR DetailedGSTLedgerEntry@1500915 : Record 16419) : Decimal;
    VAR
      DetailedGSTLedgerEntry2@1500914 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry2.COPYFILTERS(DetailedGSTLedgerEntry);
      DetailedGSTLedgerEntry2.SETRANGE("GST Credit",DetailedGSTLedgerEntry2."GST Credit"::Availment);
      DetailedGSTLedgerEntry2.CALCSUMS("GST Amount");
      EXIT(DetailedGSTLedgerEntry2."GST Amount");
    END;

    LOCAL PROCEDURE UpdateGSTPostingBuffer@1500014();
    BEGIN
      DimensionManagement.UpdateGlobalDimFromDimSetID(TempGSTPostingBuffer[1]."Dimension Set ID",
        TempGSTPostingBuffer[1]."Global Dimension 1 Code",TempGSTPostingBuffer[1]."Global Dimension 2 Code");
      TempGSTPostingBuffer[2] := TempGSTPostingBuffer[1];
      IF TempGSTPostingBuffer[2].FIND THEN BEGIN
        TempGSTPostingBuffer[2]."GST Base Amount" += TempGSTPostingBuffer[1]."GST Base Amount";
        TempGSTPostingBuffer[2]."GST Amount" += TempGSTPostingBuffer[1]."GST Amount";
        TempGSTPostingBuffer[2].MODIFY;
      END ELSE
        TempGSTPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostToDetailedCrAdjEntry@1500062(DetailedGSTLedgerEntry@1500000 : Record 16419;GSTCreditAdjustmentJournal@1500003 : Record 16434);
    VAR
      DetailedCrAdjstmntEntry@1500001 : Record 16451;
    BEGIN
      WITH DetailedCrAdjstmntEntry DO BEGIN
        INIT;
        "Posting Date" := GSTCreditAdjustmentJournal."Adjustment Posting Date";
        "Credit Adjustment Type" := GSTCreditAdjustmentJournal."Nature of Adjustment";
        "Document No." := GSTCreditAdjustmentJournal."Adjust Document No.";
        "Adjusted Doc. Entry No." := DetailedGSTLedgerEntry."Entry No.";
        "Adjusted Doc. Entry Type" := DetailedGSTLedgerEntry."Entry Type";
        "Adjusted Doc. Transaction Type" := DetailedGSTLedgerEntry."Transaction Type";
        "Adjusted Doc. Type" := DetailedGSTLedgerEntry."Document Type";
        "Adjusted Doc. No." := DetailedGSTLedgerEntry."Document No.";
        "Adjusted Doc. Line No." := DetailedGSTLedgerEntry."Document Line No.";
        "Adjusted Doc. Posting Date" := DetailedGSTLedgerEntry."Posting Date";
        Type := DetailedGSTLedgerEntry.Type;
        "No." := DetailedGSTLedgerEntry."No.";
        "Product Type" := DetailedGSTLedgerEntry."Product Type";
        "Source Type" := DetailedGSTLedgerEntry."Source Type";
        "Source No." := DetailedGSTLedgerEntry."Source No.";
        "HSN/SAC Code" := DetailedGSTLedgerEntry."HSN/SAC Code";
        "GST Component Code" := DetailedGSTLedgerEntry."GST Component Code";
        "GST Group Code" := DetailedGSTLedgerEntry."GST Group Code";
        "GST Jurisdiction Type" := DetailedGSTLedgerEntry."GST Jurisdiction Type";
        "GST Base Amount" := DetailedGSTLedgerEntry."GST Base Amount";
        "GST %" := DetailedGSTLedgerEntry."GST %";
        "GST Amount" := DetailedGSTLedgerEntry."GST Amount";
        IF DetailedGSTLedgerEntry."GST Amount" <> 0 THEN
          "Adjustment %" := DetailedGSTLedgerEntry."GST Amount" / DetailedGSTLedgerEntry."GST Amount" * 100;
        "Adjustment Amount" := DetailedGSTLedgerEntry."GST Amount";
        "External Document No." := DetailedGSTLedgerEntry."External Document No.";
        "Location State Code" := DetailedGSTLedgerEntry."Location State Code";
        CASE GSTCreditAdjustmentJournal."Nature of Adjustment" OF
          GSTCreditAdjustmentJournal."Nature of Adjustment"::"Credit Reversal":
            BEGIN
              "G/L Account No." :=
                GSTManagement.GetGSTMismatchAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
              "Liable to Pay" := TRUE
            END;
          GSTCreditAdjustmentJournal."Nature of Adjustment"::"Credit Re-Availment":
            BEGIN
              IF DetailedGSTLedgerEntry."Input Service Distribution" THEN
                "G/L Account No." :=
                  GSTManagement.GetGSTReceivableDistAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code")
              ELSE
                "G/L Account No." :=
                  GSTManagement.GetGSTReceivableAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code");
              "Credit Availed" := TRUE;
            END;
          GSTCreditAdjustmentJournal."Nature of Adjustment"::"Permanent Reversal":
            "G/L Account No." :=
              GSTManagement.GetGSTExpenseAccountNo("Location State Code",DetailedGSTLedgerEntry."GST Component Code")
        END;
        "User ID" := USERID;
        Positive := DetailedGSTLedgerEntry.Positive;
        "Buyer/Seller State Code" := DetailedGSTLedgerEntry."Buyer/Seller State Code";
        "Location  Reg. No." := DetailedGSTLedgerEntry."Location  Reg. No.";
        "Buyer/Seller Reg. No." := DetailedGSTLedgerEntry."Buyer/Seller Reg. No.";
        "GST Group Type" := DetailedGSTLedgerEntry."GST Group Type";
        "GST Credit" := DetailedGSTLedgerEntry."GST Credit";
        "Currency Code" := DetailedGSTLedgerEntry."Currency Code";
        "Currency Factor" := DetailedGSTLedgerEntry."Currency Factor";
        "GST Rounding Precision" := DetailedGSTLedgerEntry."GST Rounding Precision";
        "GST Rounding Type" := DetailedGSTLedgerEntry."GST Rounding Type";
        "Location Code" := DetailedGSTLedgerEntry."Location Code";
        "GST Vendor Type" := DetailedGSTLedgerEntry."GST Vendor Type";
        Cess := DetailedGSTLedgerEntry.Cess;
        "Input Service Distribution" := DetailedGSTLedgerEntry."Input Service Distribution";
        INSERT;
      END;
    END;

    PROCEDURE GetNoSeriesCode@1500013() : Code[10];
    VAR
      GeneralLedgerSetup@1500000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("GST Credit Adj. Jnl Nos.");
      EXIT(GeneralLedgerSetup."GST Credit Adj. Jnl Nos.");
    END;

    LOCAL PROCEDURE GetCreditAdjustmentSourceCode@1500064() : Code[10];
    VAR
      SourceCodeSetup@1500000 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("GST Credit Adjustment Journal");
      EXIT(SourceCodeSetup."GST Credit Adjustment Journal");
    END;

    PROCEDURE GetPeriodEnddate@1500162(PostingDate@1500000 : Date) : Date;
    BEGIN
      EXIT(CALCDATE('<-CM-1D>',PostingDate));
    END;

    LOCAL PROCEDURE GetLiabilityAndCredit@1500116(GSTPaymentBuffer@1500001 : Record 16436;VAR Liability@1500005 : Decimal;VAR RevChargeLiability@1500006 : Decimal;VAR CreditAvailable@1500007 : Decimal);
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
    BEGIN
      CLEAR(Liability);
      CLEAR(RevChargeLiability);
      CLEAR(CreditAvailable);
      WITH DetailedGSTLedgerEntry DO BEGIN
        FilterDetailedGSTLedgerEntry(GSTPaymentBuffer,DetailedGSTLedgerEntry);
        IF FINDSET THEN
          REPEAT
            CASE "Reverse Charge" OF
              FALSE:
                BEGIN
                  IF "Liable to Pay" THEN
                    Liability += "GST Amount" * -1;
                  IF "Credit Availed" THEN
                    CreditAvailable += "GST Amount";
                END;
              TRUE:
                IF "Payment Type" = "Payment Type"::Normal THEN BEGIN
                  IF "Liable to Pay" THEN
                    RevChargeLiability += "GST Amount" * -1;
                  IF "Credit Availed" THEN
                    CreditAvailable += "GST Amount" * -1;
                END ELSE BEGIN
                  IF "Liable to Pay" THEN
                    RevChargeLiability += "GST Amount";
                  IF "Credit Availed" THEN
                    IF ("Payment Type" = "Payment Type"::Advance) AND ("Entry Type" = "Entry Type"::Application) AND
                       NOT "Associated Enterprises" AND ("GST Group Type" = "GST Group Type"::Service)
                    THEN
                      CreditAvailable += "GST Amount" * -1
                    ELSE
                      CreditAvailable += "GST Amount";
                END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetSettlementDocumentNo@1500118(PostingDate@1500003 : Date;ModifyTrue@1500002 : Boolean) : Code[20];
    VAR
      GeneralLedgerSetup@1500000 : Record 98;
      NoSeriesManagement@1500001 : Codeunit 396;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("GST Settlement Nos.");
      EXIT(NoSeriesManagement.GetNextNo(GeneralLedgerSetup."GST Settlement Nos.",PostingDate,ModifyTrue));
    END;

    LOCAL PROCEDURE InsertPostedSettlementEntries@1500008(GSTPaymentBuffer@1500000 : Record 16436);
    VAR
      PostedSettlementEntries@1500001 : Record 16409;
    BEGIN
      WITH PostedSettlementEntries DO BEGIN
        INIT;
        TRANSFERFIELDS(GSTPaymentBuffer);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetPostedCreditAdjustmentAmount@1500018(GSTPaymentBuffer@1500003 : Record 16436;VAR LiableAmount@1500000 : Decimal;VAR CreditAmount@1500001 : Decimal);
    VAR
      DetailedCrAdjstmntEntry@1500002 : Record 16451;
    BEGIN
      CLEAR(LiableAmount);
      CLEAR(CreditAmount);
      WITH DetailedCrAdjstmntEntry DO BEGIN
        FilterPostedCreditAdjustmentEntry(GSTPaymentBuffer,DetailedCrAdjstmntEntry);
        IF FINDSET THEN
          REPEAT
            IF "Liable to Pay" THEN
              LiableAmount += "GST Amount";
            IF "Credit Availed" THEN
              CreditAmount += "GST Amount";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClosePostedCreditAdjustmentEntry@1500025(GSTPaymentBuffer@1500003 : Record 16436);
    VAR
      DetailedCrAdjstmntEntry@1500002 : Record 16451;
      DetailedCrAdjstmntEntry2@1500000 : Record 16451;
    BEGIN
      WITH DetailedCrAdjstmntEntry DO BEGIN
        FilterPostedCreditAdjustmentEntry(GSTPaymentBuffer,DetailedCrAdjstmntEntry);
        IF FINDSET THEN
          REPEAT
            DetailedCrAdjstmntEntry2.GET("Entry No.");
            DetailedCrAdjstmntEntry2.Paid := TRUE;
            DetailedCrAdjstmntEntry2."Payment Document No." := GSTPaymentBuffer."Document No.";
            DetailedCrAdjstmntEntry2."Payment Document Date" := GSTPaymentBuffer."Posting Date";
            DetailedCrAdjstmntEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FilterPostedCreditAdjustmentEntry@1500031(GSTPaymentBuffer@1500000 : Record 16436;VAR DetailedCrAdjstmntEntry@1500001 : Record 16451);
    BEGIN
      WITH DetailedCrAdjstmntEntry DO BEGIN
        SETCURRENTKEY("Location  Reg. No.","GST Component Code",Paid,"Posting Date");
        SETRANGE("Location  Reg. No.",GSTPaymentBuffer."GST Registration No.");
        SETRANGE("GST Component Code",GSTPaymentBuffer."GST Component Code");
        SETRANGE(Paid,FALSE);
        SETFILTER("Posting Date",'..%1',GSTPaymentBuffer."Posting Date");
      END;
    END;

    LOCAL PROCEDURE FilterDetailedGSTLedgerEntry@1500068(GSTPaymentBuffer@1500000 : Record 16436;VAR DetailedGSTLedgerEntry@1500001 : Record 16419);
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Location  Reg. No.","GST Component Code",Paid,"Posting Date");
        SETRANGE("Location  Reg. No.",GSTPaymentBuffer."GST Registration No.");
        SETRANGE("GST Component Code",GSTPaymentBuffer."GST Component Code");
        SETRANGE(Paid,FALSE);
        SETFILTER("Posting Date",'..%1',GSTPaymentBuffer."Period End Date");
        SETRANGE("Input Service Distribution",FALSE);
      END;
    END;

    LOCAL PROCEDURE IsAllComponentsHaveZeroValue@1500027(GSTINNo@1500000 : Code[15];DocumentNo@1500001 : Code[20]) : Boolean;
    VAR
      GSTPaymentBuffer@1500002 : Record 16436;
    BEGIN
      GSTPaymentBuffer.SETRANGE("GST Registration No.",GSTINNo);
      GSTPaymentBuffer.SETRANGE("Document No.",DocumentNo);
      IF GSTPaymentBuffer.FINDSET THEN
        REPEAT
          WITH GSTPaymentBuffer DO
            IF NOT (("UnAdjutsed Credit" = 0) AND ("Total Payment Amount" = 0) AND ("Credit Utilized" = 0))
            THEN
              EXIT(FALSE);
        UNTIL GSTPaymentBuffer.NEXT = 0;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertPostedGSTDistHeader@1500002(GSTDistributionHeader@1500001 : Record 16444) : Code[20];
    VAR
      PostedGSTDistributionHeader@1500000 : Record 16452;
      Location@1500002 : Record 14;
    BEGIN
      WITH PostedGSTDistributionHeader DO BEGIN
        INIT;
        TRANSFERFIELDS(GSTDistributionHeader);
        "Pre Distribution No." := GSTDistributionHeader."No.";
        Location.GET(GSTDistributionHeader."From Location Code");
        IF GSTDistributionHeader."ISD Document Type" = GSTDistributionHeader."ISD Document Type"::Invoice THEN
          "No." := NoSeriesManagement.GetNextNo(Location."Posted Dist. Invoice Nos.",WORKDATE,TRUE)
        ELSE
          "No." := NoSeriesManagement.GetNextNo(Location."Posted Dist. Cr. Memo Nos.",WORKDATE,TRUE);
        INSERT(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE InsertPostedGSTDistLine@1500016(GSTDistributionLine@1500000 : Record 16445;DistributionNo@1500002 : Code[20]);
    VAR
      PostedGSTDistributionLine@1500001 : Record 16453;
    BEGIN
      WITH PostedGSTDistributionLine DO BEGIN
        INIT;
        TRANSFERFIELDS(GSTDistributionLine);
        "Distribution No." := DistributionNo;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetToGSTComponent@1500028(GSTComponentCode@1500001 : Code[10];JurisdictionType@1500002 : 'Intrastate,Interstate') : Code[10];
    VAR
      GSTComponentDistribution@1500000 : Record 16443;
    BEGIN
      GSTComponentDistribution.SETRANGE("GST Component Code",GSTComponentCode);
      IF JurisdictionType = JurisdictionType::Interstate THEN
        GSTComponentDistribution.SETRANGE("Interstate Distribution",TRUE)
      ELSE
        GSTComponentDistribution.SETRANGE("Intrastate Distribution",TRUE);
      IF GSTComponentDistribution.FINDFIRST THEN
        EXIT(GSTComponentDistribution."Distribution Component Code");
      ERROR(ToGSTCompErr,GSTComponentCode,JurisdictionType);
    END;

    LOCAL PROCEDURE GetNextGSTDistDetailEntryNo@1500037() : Integer;
    VAR
      DetailedGSTDistEntry@1500000 : Record 16454;
    BEGIN
      DetailedGSTDistEntry.LOCKTABLE;
      IF DetailedGSTDistEntry.FINDLAST THEN
        EXIT(DetailedGSTDistEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetDetGSTDistEntryAmount@1500048(GSTPaymentBuffer@1500003 : Record 16436;VAR CreditAmount@1500001 : Decimal);
    VAR
      DetailedGSTDistEntry@1500002 : Record 16454;
    BEGIN
      CLEAR(CreditAmount);
      WITH DetailedGSTDistEntry DO BEGIN
        FilterDetGSTDistEntry(GSTPaymentBuffer,DetailedGSTDistEntry,TRUE);
        IF FINDSET THEN
          REPEAT
            IF "Credit Availed" THEN
              CreditAmount += "Distribution Amount";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CloseDetGSTDistEntry@1500047(GSTPaymentBuffer@1500003 : Record 16436);
    VAR
      DetailedGSTDistEntry@1500002 : Record 16454;
      DetailedGSTDistEntry2@1500000 : Record 16454;
    BEGIN
      WITH DetailedGSTDistEntry DO BEGIN
        FilterDetGSTDistEntry(GSTPaymentBuffer,DetailedGSTDistEntry,FALSE);
        IF FINDSET THEN
          REPEAT
            DetailedGSTDistEntry2.GET("Entry No.");
            DetailedGSTDistEntry2.Paid := TRUE;
            DetailedGSTDistEntry2."Payment Document No." := GSTPaymentBuffer."Document No.";
            DetailedGSTDistEntry2."Payment Document Date" := GSTPaymentBuffer."Posting Date";
            DetailedGSTDistEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FilterDetGSTDistEntry@1500044(GSTPaymentBuffer@1500000 : Record 16436;VAR DetailedGSTDistEntry@1500001 : Record 16454;FilterAvailment@1500678 : Boolean);
    BEGIN
      WITH DetailedGSTDistEntry DO BEGIN
        SETRANGE("Rcpt. GST Reg. No.",GSTPaymentBuffer."GST Registration No.");
        SETRANGE("Rcpt. Component Code",GSTPaymentBuffer."GST Component Code");
        IF FilterAvailment THEN
          SETRANGE("Rcpt. GST Credit","Rcpt. GST Credit"::Availment);
        SETRANGE(Paid,FALSE);
        SETFILTER("Posting Date",'..%1',GSTPaymentBuffer."Period End Date");
        SETFILTER("ISD Posting Date",'<=%1',GSTPaymentBuffer."Posting Date");
      END;
    END;

    LOCAL PROCEDURE GetGSTAccountNoDistribution@1500036(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10];TransactionType@1500003 : 'Purchase,Sales,Transfer,Settlement';Type@1500005 : ' ,G/L Account,Item';GSTCredit@1500006 : ' ,Availment,Non-Availment';ISD@1500008 : Boolean;ReceivableApplicable@1500009 : Boolean) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
      GLAcc@1500004 : Code[20];
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      IF TransactionType = TransactionType::Sales THEN BEGIN
        GSTPostingSetup.TESTFIELD("Payable Account");
        GLAcc := GSTPostingSetup."Payable Account";
      END ELSE
        IF TransactionType = TransactionType::Purchase THEN
          IF (Type = Type::"G/L Account") AND (GSTCredit = GSTCredit::"Non-Availment") THEN BEGIN
            GSTPostingSetup.TESTFIELD("Expense Account");
            GLAcc := GSTPostingSetup."Expense Account";
          END ELSE
            IF ReceivableApplicable THEN
              IF ISD THEN BEGIN
                GSTPostingSetup.TESTFIELD("Receivable Acc. (Dist)");
                GLAcc := GSTPostingSetup."Receivable Acc. (Dist)";
              END ELSE BEGIN
                GSTPostingSetup.TESTFIELD("Receivable Account");
                GLAcc := GSTPostingSetup."Receivable Account";
              END
            ELSE
              IF NOT ISD THEN BEGIN
                GSTPostingSetup.TESTFIELD("Receivable Account (Interim)");
                GLAcc := GSTPostingSetup."Receivable Account (Interim)";
              END ELSE
                IF GSTCredit = GSTCredit::"Non-Availment" THEN BEGIN
                  GSTPostingSetup.TESTFIELD("Expense Account");
                  GLAcc := GSTPostingSetup."Expense Account";
                END ELSE BEGIN
                  GSTPostingSetup.TESTFIELD("Receivable Acc. Interim (Dist)");
                  GLAcc := GSTPostingSetup."Receivable Acc. Interim (Dist)";
                END;
      EXIT(GLAcc);
    END;

    BEGIN
    END.
  }
}

