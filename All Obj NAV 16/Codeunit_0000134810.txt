OBJECT Codeunit 134810 ERM Cost Accounting Setup
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      CostAccountMgt@1006 : Codeunit 1100;
      LibraryCostAccounting@1000 : Codeunit 131340;
      LibraryDimension@1004 : Codeunit 131001;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryRandom@1005 : Codeunit 130440;
      CostCenterDim@1020 : Code[20];
      CostObjectDim@1008 : Code[20];
      CostCenterError@1013 : TextConst 'ENU=No Cost Center should be created.';
      CostCenterNotFoundError@1012 : TextConst 'ENU=Cost Center with No %1 was not found.';
      CostObjectError@1015 : TextConst 'ENU=No Cost Object should be created.';
      CostObjectNotFoundError@1014 : TextConst 'ENU=Cost Object with No %1 was not found.';
      CostTypeError@1010 : TextConst 'ENU=No Cost Type should be created.';
      CostTypeNotFoundError@1011 : TextConst 'ENU=Cost Type with No %1 was not found.';
      EmptyCCDimError@1022 : TextConst 'ENU=''Cost Center Dimension must be filled in. Enter a value.''';
      EmptyCODimError@1023 : TextConst 'ENU=''Cost Object Dimension must be filled in. Enter a value.''';
      ExpectedValueIsDifferentError@1017 : TextConst 'ENU=Expected value of %1 field is different than the actual one.';
      NoRecordsInFilterError@1024 : TextConst 'ENU=There are no records within the filters specified for table %1. The filters are: %2.';
      SameCCAndCODimError@1021 : TextConst 'ENU=The dimension values for cost center and cost object cannot be same.';
      UnexpectedErrorMessage@1007 : TextConst 'ENU=Unexpected error message.';

    [Test]
    [HandlerFunctions(RPHandlerOKAction,ConfirmHandlerYes)]
    PROCEDURE AlignCCAndCODimensions@72();
    BEGIN
      // Verify that Cost Center Dimension and Cost Object Dimension fields can be aligned to different dimensions
      Initialize;

      // Exercise:
      COMMIT;
      REPORT.RUN(REPORT::"Update Cost Acctg. Dimensions");

      // Verify:
      ValidateCCAndCODimensions(CostCenterDim,CostObjectDim);

      // Clean-up:
      CLEAR(CostCenterDim);
      CLEAR(CostObjectDim);
    END;

    [Test]
    [HandlerFunctions(RPHandlerSameDimension)]
    PROCEDURE AlignCCAndCOToSameDimension@57();
    VAR
      error@1000 : Text[200];
    BEGIN
      // Verify that Cost Center Dimension and Cost Object Dimension fields cannot be set to the same value
      Initialize;

      // Exercise:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Update Cost Acctg. Dimensions");
      error := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(error,SameCCAndCODimError) > 0,UnexpectedErrorMessage);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(RPHandlerEmptyCCDimValue)]
    PROCEDURE AlignCCToEmptyDimensionValue@61();
    VAR
      error@1001 : Text[200];
    BEGIN
      // Verify that Cost Center Dimension field cannot have an empty value
      Initialize;

      // Exercise:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Update Cost Acctg. Dimensions");
      error := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(error,EmptyCCDimError) > 0,UnexpectedErrorMessage);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(RPHandlerEmptyCODimValue)]
    PROCEDURE AlignCOToEmptyDimensionValue@62();
    VAR
      error@1001 : Text[200];
    BEGIN
      // Verify that Cost Center Dimension field cannot have an empty value
      Initialize;

      // Exercise:
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Update Cost Acctg. Dimensions");
      error := GETLASTERRORTEXT;
      Assert.IsTrue(STRPOS(error,EmptyCODimError) > 0,UnexpectedErrorMessage);
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE BalanceSheetAccAlignGLAuto@54();
    VAR
      CostAccountingSetup@1001 : Record 1108;
    BEGIN
      BalanceSheetAccAlignGL(CostAccountingSetup."Align G/L Account"::Automatic);
    END;

    [Test]
    PROCEDURE BalanceSheetAccAlignGLPrompt@53();
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      BalanceSheetAccAlignGL(CostAccountingSetup."Align G/L Account"::Prompt);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCancelAction)]
    PROCEDURE CancelAlignOfCCAndCODimensions@67();
    VAR
      PrevCCDimensionCode@1002 : Code[20];
      PrevCODimensionCOde@1001 : Code[20];
    BEGIN
      // Verify that Cost Center Dimension and Cost Object Dimension fields are not updated if the user cancels the operation
      Initialize;

      // Setup:
      PrevCCDimensionCode := CostCenterDimension;
      PrevCODimensionCOde := CostObjectDimension;

      // Exercise:
      COMMIT;
      REPORT.RUN(REPORT::"Update Cost Acctg. Dimensions");

      // Verify:
      ValidateCCAndCODimensions(PrevCCDimensionCode,PrevCODimensionCOde);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CreateCostTypeChangeName@64();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1002 : Record 15;
      NewName@1001 : Text[50];
    BEGIN
      // Setup:
      Initialize;
      LibraryCostAccounting.CreateCostType(CostType);

      // Exercise:
      NewName := CostType.Name + FORMAT(LibraryRandom.RandInt(100));
      CostType.VALIDATE(Name,NewName);
      CostType.MODIFY(TRUE);

      // Verify:
      CostType.TESTFIELD(Name,NewName);
      GLAccount.GET(CostType."G/L Account Range");
      Assert.AreNotEqual(GLAccount.Name,NewName,STRSUBSTNO(ExpectedValueIsDifferentError,GLAccount.FIELDNAME(Name)));
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CreateCostTypeChangeNumber@79();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1002 : Record 15;
      NewNumber@1001 : Code[20];
      OldNumber@1003 : Code[20];
    BEGIN
      // Setup:
      Initialize;
      LibraryCostAccounting.CreateCostType(CostType);
      OldNumber := CostType."No.";

      // Exercise:
      NewNumber := INCSTR(OldNumber);
      CostType.RENAME(NewNumber);

      // Verify:
      CostType.TESTFIELD("No.",NewNumber);
      GLAccount.GET(CostType."G/L Account Range");
      Assert.AreNotEqual(GLAccount."No.",NewNumber,STRSUBSTNO(ExpectedValueIsDifferentError,GLAccount.FIELDNAME("No.")));

      // Cleanup:
      CostType.RENAME(OldNumber);
      CostType.TESTFIELD("No.",OldNumber);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CreateCostTypeHierarchy@65();
    VAR
      BeginCostTypeNo@1002 : Code[20];
      EndCostTypeNo@1004 : Code[20];
    BEGIN
      // Setup:
      Initialize;
      CreateBeginEndCostTypes(BeginCostTypeNo,EndCostTypeNo);

      // Exercise:
      CostAccountMgt.IndentCostTypes(FALSE);

      // Verify:
      ValidateBeginEndCostTypes(BeginCostTypeNo,EndCostTypeNo);
    END;

    [Test]
    PROCEDURE EndTotalCostCenterHasBlockedOn@12();
    VAR
      CostCenter@1000 : Record 1112;
      CostCenterCode@1001 : Code[20];
    BEGIN
      // Verify that a Cost Center whith Line Type = 'End-Total' has 'Blocked' checkbox checked, by default.

      // Setup:
      Initialize;
      LibraryCostAccounting.CreateCostCenter(CostCenter);

      // Excercise:
      CostCenter.VALIDATE("Line Type",CostCenter."Line Type"::"End-Total");
      CostCenter.MODIFY(TRUE);

      // Verify:
      CostCenter.TESTFIELD(Blocked,TRUE);
      CostCenterCode := CostCenter.Code;

      // Cleanup:
      CLEAR(CostCenter);
      CostCenter.GET(CostCenterCode);
      CostCenter.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE EndTotalCostObjectHasBlockedOn@26();
    VAR
      CostObject@1000 : Record 1113;
      CostObjectCode@1001 : Code[20];
    BEGIN
      // Verify that a Cost Object whith Line Type = 'End-Total' has 'Blocked' checkbox checked, by default.

      // Setup:
      Initialize;
      LibraryCostAccounting.CreateCostObject(CostObject);

      // Excercise:
      CostObject.VALIDATE("Line Type",CostObject."Line Type"::"End-Total");
      CostObject.MODIFY(TRUE);

      // Verify:
      CostObject.TESTFIELD(Blocked,TRUE);
      CostObjectCode := CostObject.Code;

      // Cleanup:
      CLEAR(CostObject);
      CostObject.GET(CostObjectCode);
      CostObject.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE EndTotalCostTypeHasBlockedOn@52();
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      // Verify that a Cost Type whith Line Type = 'End-Total' has 'Blocked' checkbox checked, by default.

      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      // Exercise:
      CostType.VALIDATE(Type,CostType.Type::"End-Total");
      CostType.MODIFY(TRUE);

      // Verify:
      CostType.TESTFIELD(Blocked,TRUE);

      // Cleanup:
      CostType.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerYes)]
    PROCEDURE GetIncomeStatementEntriesOnly@51();
    VAR
      CostType@1000 : Record 1103;
      CostAccountMgt@1002 : Codeunit 1100;
    BEGIN
      Initialize;
      LibraryCostAccounting.VerifyCostTypeIntegrity;

      // Setup:
      CostType.SETFILTER("G/L Account Range",'<>%1','');
      CostType.SETFILTER("Balance at Date",'%1',0);
      CostType.SETFILTER("Balance to Allocate",'%1',0);
      IF NOT CostType.FINDFIRST THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterError,CostType.TABLECAPTION,CostType.GETFILTERS));
      CostType.DELETE(TRUE);

      // Exercise:
      CostAccountMgt.GetCostTypesFromChartOfAccount;

      // Verify:
      CLEAR(CostType);
      LibraryCostAccounting.GetAllCostTypes(CostType);
      ValidateGLAccountIsIncomeStmt(CostType);
      LibraryCostAccounting.VerifyCostTypeIntegrity;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE GetCostCentersFromDimension@66();
    VAR
      CostCenter@1001 : Record 1112;
      CostAccountingSetup@1002 : Record 1108;
      DimensionValue@1003 : Record 349;
      CostAccountMgt@1000 : Codeunit 1100;
    BEGIN
      Initialize;

      // Setup:
      CostAccountingSetup.GET;
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align Cost Center Dimension"),
        CostAccountingSetup."Align Cost Center Dimension"::"No Alignment");
      LibraryDimension.CreateDimensionValue(DimensionValue,CostAccountingSetup."Cost Center Dimension");

      // Exercise:
      CostAccountMgt.CreateCostCenters;

      // Verify:
      Assert.IsTrue(CostCenter.GET(DimensionValue.Code),STRSUBSTNO(CostCenterNotFoundError,DimensionValue.Code));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE GetCostObjetcsFromDimension@70();
    VAR
      CostObject@1003 : Record 1113;
      CostAccountingSetup@1002 : Record 1108;
      DimensionValue@1001 : Record 349;
      CostAccountMgt@1000 : Codeunit 1100;
    BEGIN
      Initialize;

      // Setup:
      CostAccountingSetup.GET;
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align Cost Object Dimension"),
        CostAccountingSetup."Align Cost Object Dimension"::"No Alignment");
      LibraryDimension.CreateDimensionValue(DimensionValue,CostAccountingSetup."Cost Object Dimension");

      // Exercise:
      CostAccountMgt.CreateCostObjects;

      // Verify:
      Assert.IsTrue(CostObject.GET(DimensionValue.Code),STRSUBSTNO(CostObjectNotFoundError,DimensionValue.Code));
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerYes)]
    PROCEDURE RegisterCostTypesInGLAccounts@50();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostType(CostType);
      GLAccount.GET(CostType."G/L Account Range");
      GLAccount.VALIDATE("Cost Type No.",'');
      GLAccount.MODIFY(TRUE);

      // Exercise:
      CostAccountMgt.LinkCostTypesToGLAccountsYN;

      // Verify:
      GLAccount.GET(CostType."G/L Account Range");
      GLAccount.TESTFIELD("Cost Type No.",CostType."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE RemoveCostTypeNoLink@83();
    VAR
      GLAccount@1000 : Record 15;
      CostType@1001 : Record 1103;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);
      GLAccount.TESTFIELD("Cost Type No.",GLAccount."No.");

      // Exercise:
      GLAccount.VALIDATE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
      GLAccount.MODIFY(TRUE);

      // Verify:
      GLAccount.TESTFIELD("Cost Type No.",'');
      CostType.GET(GLAccount."No.");
      CostType.TESTFIELD("G/L Account Range",'');
    END;

    [Test]
    PROCEDURE TestAlignDimensionBeginTotalCC@14();
    VAR
      CostCenter@1001 : Record 1112;
      CostCenterNo@1000 : Code[20];
    BEGIN
      // Add a new Cost Center Dimension Value with line type 'Begin-Total' and check that no Cost Center is created (Alignment = Automic)

      CostCenterNo := AlignCostCenters(AlignmentTypeAutomatic,DimensionValueTypeBeginTotal);

      // Verify:
      Assert.IsFalse(CostCenter.GET(CostCenterNo),CostCenterError);
    END;

    [Test]
    PROCEDURE TestAlignDimensionBeginTotalCO@32();
    VAR
      CostObject@1001 : Record 1113;
      CostObjectNo@1000 : Code[20];
    BEGIN
      // Add a new Cost Object Dimension Value with line type 'Begin-Total' and check that no Cost Object is created (Alignment = Automic)

      CostObjectNo := AlignCostObjects(AlignmentTypeAutomatic,DimensionValueTypeBeginTotal);

      // Verify:
      Assert.IsFalse(CostObject.GET(CostObjectNo),CostObjectError);
    END;

    [Test]
    PROCEDURE TestAlignDimensionEndTotalCC@27();
    VAR
      CostCenter@1001 : Record 1112;
      CostCenterNo@1000 : Code[20];
    BEGIN
      // Add a new Cost Center Dimension Value with line type 'End-Total' and check that no Cost Center is created (Alignment = Automic)

      CostCenterNo := AlignCostCenters(AlignmentTypeAutomatic,DimensionValueTypeEndTotal);

      // Verify:
      Assert.IsFalse(CostCenter.GET(CostCenterNo),CostCenterError);
    END;

    [Test]
    PROCEDURE TestAlignDimensionEndTotalCO@34();
    VAR
      CostObject@1001 : Record 1113;
      CostObjectNo@1000 : Code[20];
    BEGIN
      // Add a new Cost Object Dimension Value with line type 'End-Total' and check that no Cost Object is created (Alignment = Automic)

      CostObjectNo := AlignCostObjects(AlignmentTypeAutomatic,DimensionValueTypeEndTotal);

      // Verify:
      Assert.IsFalse(CostObject.GET(CostObjectNo),CostObjectError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestAutomaticAlignOnChartOfAcc@6();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1001 : Record 15;
    BEGIN
      // Change Align G/L Account to "Automatic" and verify that when adding a new Income G/L Account,
      // a Cost Type is also created.

      Initialize;

      // Setup:
      LibraryCostAccounting.SetAlignment(AlignGLAccountFieldNo,AlignmentTypeAutomatic);

      // Excercise:
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);

      // Verify:
      Assert.IsTrue(CostType.GET(GLAccount."Cost Type No."),STRSUBSTNO(CostTypeNotFoundError,GLAccount."Cost Type No."));
      CostType.TESTFIELD("G/L Account Range",GLAccount."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestAutomaticAlignOnCostCenter@15();
    VAR
      CostCenter@1000 : Record 1112;
      CostCenterNo@1002 : Code[20];
    BEGIN
      // Change Align Cost Centers to "Automatic" and verify that when adding a new dimension value to Cost Centers Dimension
      // a Cost Center is also created

      CostCenterNo := AlignCostCenters(AlignmentTypeAutomatic,DimensionValueTypeStandard);

      // Verify:
      Assert.IsTrue(CostCenter.GET(CostCenterNo),STRSUBSTNO(CostCenterNotFoundError,CostCenterNo));
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestAutomaticAlignOnCostObject@18();
    VAR
      CostObject@1001 : Record 1113;
      CostObjectNo@1000 : Code[20];
    BEGIN
      // Change Align Cost Centers to "Automatic" and verify that when adding a new dimension value to Cost Objects Dimension
      // a Cost Object is also created

      CostObjectNo := AlignCostObjects(AlignmentTypeAutomatic,DimensionValueTypeStandard);

      // Verify:
      Assert.IsTrue(CostObject.GET(CostObjectNo),STRSUBSTNO(CostCenterNotFoundError,CostObjectNo));
    END;

    [Test]
    PROCEDURE TestNoAlignOnChartOfAccounts@2();
    VAR
      CostType@1001 : Record 1103;
      GLAccount@1000 : Record 15;
    BEGIN
      // Change Align G/L Account to "No Alignment" and verify that when adding a new Income G/L Account,
      // no Cost Type id added to the Chart of Cost Types.

      Initialize;

      // Setup:
      LibraryCostAccounting.SetAlignment(AlignGLAccountFieldNo,AlignmentTypeNoAlignment);

      // Excercise:
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);

      // Verify:
      Assert.IsFalse(CostType.GET(GLAccount."Cost Type No."),CostTypeError);
    END;

    [Test]
    PROCEDURE TestNoAlignOnCostCenters@10();
    VAR
      CostCenter@1001 : Record 1112;
      CostCenterNo@1000 : Code[20];
    BEGIN
      // Change Align Cost Centers to "No Alignment" and verify that when adding a new dimension value to Cost Centers Dimension
      // no Cost Center is added to the Chart of Cost Centers.

      CostCenterNo := AlignCostCenters(AlignmentTypeNoAlignment,DimensionValueTypeStandard);

      // Verify:
      Assert.IsFalse(CostCenter.GET(CostCenterNo),CostCenterError);
    END;

    [Test]
    PROCEDURE TestNoAlignOnCostObjects@21();
    VAR
      CostObject@1000 : Record 1113;
      CostObjectNo@1001 : Code[20];
    BEGIN
      // Change Align Cost Objects to "No Alignment" and verify that when adding a new dimension value to Cost Objects Dimension
      // no Cost Object is added to the Chart of Cost Objects.

      CostObjectNo := AlignCostObjects(AlignmentTypeNoAlignment,DimensionValueTypeStandard);

      // Verify:
      Assert.IsFalse(CostObject.GET(CostObjectNo),CostObjectError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TestPromptAlignOnChartOfAccY@3();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1001 : Record 15;
    BEGIN
      // Change Align G/L Account to "Prompt" and verify that when adding a new Income G/L Account,
      // a Cost Type is also created if the user selects "Yes" in the confirmation message.

      Initialize;

      // Setup:
      LibraryCostAccounting.SetAlignment(AlignGLAccountFieldNo,AlignmentTypePrompt);

      // Excercise:
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);

      // Verify:
      Assert.IsTrue(CostType.GET(GLAccount."Cost Type No."),STRSUBSTNO(CostTypeNotFoundError,GLAccount."Cost Type No."));
      CostType.TESTFIELD("G/L Account Range",GLAccount."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE TestPromptAlignOnChartOfAccN@5();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1001 : Record 15;
    BEGIN
      // Change Align G/L Account to "Prompt" and verify that when adding a new Income G/L Account,
      // no Cost Type is created if the user selects "No" in the confirmation message.

      Initialize;

      // Setup:
      LibraryCostAccounting.SetAlignment(AlignGLAccountFieldNo,AlignmentTypePrompt);

      // Excercise:
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);

      // Verify:
      Assert.IsFalse(CostType.GET(GLAccount."Cost Type No."),CostTypeError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TestPromptAlignOnCostCentersY@11();
    VAR
      CostCenter@1000 : Record 1112;
      CostCenterNo@1002 : Code[20];
    BEGIN
      // Change Align Cost Centers to "Prompt" and verify that when adding a new dimension value to Cost Centers Dimension
      // a Cost Center is also created if the user selects "Yes" in the confirmation message

      CostCenterNo := AlignCostCenters(AlignmentTypePrompt,DimensionValueTypeStandard);

      // Verify:
      Assert.IsTrue(CostCenter.GET(CostCenterNo),STRSUBSTNO(CostCenterNotFoundError,CostCenterNo));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE TestPromptAlignOnCostCentersN@13();
    VAR
      CostCenter@1001 : Record 1112;
      CostCenterNo@1000 : Code[20];
    BEGIN
      // Change Align Cost Centers to "Prompt" and verify that when adding a new dimension value to Cost Centers Dimension
      // no Cost Center is created if the user selects "No" in the confirmation message

      CostCenterNo := AlignCostCenters(AlignmentTypePrompt,DimensionValueTypeStandard);

      // Verify:
      Assert.IsFalse(CostCenter.GET(CostCenterNo),CostCenterError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TestPromptAlignOnCostObjectsY@20();
    VAR
      CostObject@1001 : Record 1113;
      CostObjectNo@1000 : Code[20];
    BEGIN
      // Change Align Cost Objects to "Prompt" and verify that when adding a new dimension value to Cost Objects Dimension
      // a Cost Object is also created if the user selects "Yes" in the confirmation message

      CostObjectNo := AlignCostObjects(AlignmentTypePrompt,DimensionValueTypeStandard);

      // Verify:
      Assert.IsTrue(CostObject.GET(CostObjectNo),STRSUBSTNO(CostCenterNotFoundError,CostObjectNo));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE TestPromptAlignOnCostObjectsN@19();
    VAR
      CostObject@1001 : Record 1113;
      CostObjectNo@1000 : Code[20];
    BEGIN
      // Change Align Cost Objects to "Prompt" and verify that when adding a new dimension value to Cost Objects Dimension
      // no Cost Object is created if the user selects "No" in the confirmation message

      CostObjectNo := AlignCostObjects(AlignmentTypePrompt,DimensionValueTypeStandard);

      // Verify:
      Assert.IsFalse(CostObject.GET(CostObjectNo),CostObjectError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestUpdateCCDimension@37();
    VAR
      CostAccountingSetup@1001 : Record 1108;
      CostCenter@1003 : Record 1112;
      CostCenterNo@1002 : Code[20];
    BEGIN
      // Check that a cost center can be aligned to any dimension

      Initialize;

      // Setup:
      UpdateAlignedDimension(CostAccountingSetup.FIELDNO("Cost Center Dimension"));

      // Excercise:
      CostCenterNo := AlignCostCenters(AlignmentTypeAutomatic,DimensionValueTypeStandard);

      // Verify:
      Assert.IsTrue(CostCenter.GET(CostCenterNo),STRSUBSTNO(CostCenterNotFoundError,CostCenterNo));
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestUpdateCODimension@38();
    VAR
      CostAccountingSetup@1001 : Record 1108;
      CostObject@1002 : Record 1113;
      CostObjectNo@1000 : Code[20];
    BEGIN
      // Check that a cost object can be aligned to any dimension

      Initialize;

      // Setup:
      UpdateAlignedDimension(CostAccountingSetup.FIELDNO("Cost Object Dimension"));

      // Excercise:
      CostObjectNo := AlignCostObjects(AlignmentTypeAutomatic,DimensionValueTypeStandard);

      // Verify:
      Assert.IsTrue(CostObject.GET(CostObjectNo),STRSUBSTNO(CostObjectNotFoundError,CostObjectNo));
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerYes)]
    PROCEDURE UpdateGLRangeAndCostTypeNo@44();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1002 : Record 15;
      CostTypeNo@1001 : Code[20];
    BEGIN
      Initialize;
      LibraryCostAccounting.VerifyCostTypeIntegrity;

      // Setup:
      LibraryCostAccounting.CreateIncomeStmtGLAccount(GLAccount);

      CostType.SETFILTER("G/L Account Range",'%1',GLAccount."No.");
      IF NOT CostType.FINDFIRST THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterError,CostType.TABLECAPTION,CostType.GETFILTERS));
      CostTypeNo := CostType."No.";

      CostType.DELETE(TRUE);

      // Exercise:
      CostAccountMgt.GetCostTypesFromChartOfAccount;

      // Verify:
      ValidateGLAccountCostTypeRef(CostTypeNo);
      LibraryCostAccounting.VerifyCostTypeIntegrity;
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibraryCostAccounting.InitializeCASetup;
    END;

    [Normal]
    LOCAL PROCEDURE AlignGLAccountFieldNo@25() : Integer;
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      EXIT(CostAccountingSetup.FIELDNO("Align G/L Account"));
    END;

    [Normal]
    LOCAL PROCEDURE AlignCostCenters@29(AlignCostCenters@1000 : Option;LineType@1001 : Option) : Code[20];
    VAR
      DimensionValue@1002 : Record 349;
      CostAccountingSetup@1003 : Record 1108;
    BEGIN
      // Setup:
      Initialize;
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align Cost Center Dimension"),AlignCostCenters);

      // Excercise:
      CreateDimensionValue(DimensionValue,CostCenterDimension,LineType);
      EXIT(DimensionValue.Code);
    END;

    [Normal]
    LOCAL PROCEDURE AlignCostObjects@30(AlignCostObjects@1000 : Option;LineType@1002 : Option) : Code[20];
    VAR
      DimensionValue@1001 : Record 349;
      CostAccountingSetup@1003 : Record 1108;
    BEGIN
      // Setup:
      Initialize;
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align Cost Object Dimension"),AlignCostObjects);

      // Excercise:
      CreateDimensionValue(DimensionValue,CostObjectDimension,LineType);
      EXIT(DimensionValue.Code);
    END;

    [Normal]
    LOCAL PROCEDURE AlignmentTypeAutomatic@46() : Integer;
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      EXIT(CostAccountingSetup."Align G/L Account"::Automatic);
    END;

    [Normal]
    LOCAL PROCEDURE AlignmentTypeNoAlignment@42() : Integer;
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      EXIT(CostAccountingSetup."Align G/L Account"::"No Alignment");
    END;

    [Normal]
    LOCAL PROCEDURE AlignmentTypePrompt@45() : Integer;
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      EXIT(CostAccountingSetup."Align G/L Account"::Prompt);
    END;

    LOCAL PROCEDURE BalanceSheetAccAlignGL@58(AlignGLAccount@1000 : Option);
    VAR
      CostAccountingSetup@1001 : Record 1108;
      GLAccount@1002 : Record 15;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.SetAlignment(CostAccountingSetup.FIELDNO("Align G/L Account"),AlignGLAccount);

      // Exercise:
      LibraryCostAccounting.CreateBalanceSheetGLAccount(GLAccount);

      // Verify:
      GLAccount.TESTFIELD("Cost Type No.",'');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@9(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@7(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE CostCenterDimension@43() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Center Dimension");
    END;

    [Normal]
    LOCAL PROCEDURE CostObjectDimension@41() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Object Dimension");
    END;

    [Normal]
    LOCAL PROCEDURE CreateDimensionValue@36(VAR DimensionValue@1000 : Record 349;DimensionCode@1002 : Code[20];DimensionValueType@1001 : Option);
    BEGIN
      DimensionValue.INIT;
      DimensionValue.VALIDATE("Dimension Code",DimensionCode);
      DimensionValue.VALIDATE("Dimension Value Type",DimensionValueType);
      DimensionValue.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Code))));
      DimensionValue.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateBeginEndCostTypes@96(VAR BeginTotalNo@1000 : Code[20];VAR EndTotalNo@1001 : Code[20]);
    VAR
      BeginCostType@1002 : Record 1103;
      CostType@1005 : Record 1103;
      EndCostType@1003 : Record 1103;
      Index@1004 : Integer;
    BEGIN
      LibraryCostAccounting.CreateCostType(BeginCostType);
      BeginCostType.VALIDATE(Type,BeginCostType.Type::"Begin-Total");
      BeginCostType.MODIFY(TRUE);
      BeginTotalNo := BeginCostType."No.";

      FOR Index := 1 TO LibraryRandom.RandInt(3) DO BEGIN
        CLEAR(CostType);
        LibraryCostAccounting.CreateCostType(CostType);
      END;

      LibraryCostAccounting.CreateCostType(EndCostType);
      EndCostType.VALIDATE(Type,EndCostType.Type::"End-Total");
      EndCostType.MODIFY(TRUE);
      EndTotalNo := EndCostType."No.";
    END;

    [Normal]
    LOCAL PROCEDURE DimensionValueTypeStandard@47() : Integer;
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      EXIT(DimensionValue."Dimension Value Type"::Standard);
    END;

    [Normal]
    LOCAL PROCEDURE DimensionValueTypeBeginTotal@48() : Integer;
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      EXIT(DimensionValue."Dimension Value Type"::"Begin-Total");
    END;

    [Normal]
    LOCAL PROCEDURE DimensionValueTypeEndTotal@49() : Integer;
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      EXIT(DimensionValue."Dimension Value Type"::"End-Total");
    END;

    [Normal]
    LOCAL PROCEDURE FindCCAndCODimensions@75(VAR CostCenterDim@1000 : Code[20];VAR CostObjectDim@1001 : Code[20]);
    VAR
      CostAccountingSetup@1002 : Record 1108;
      Dimension@1003 : Record 348;
    BEGIN
      CostAccountingSetup.GET;
      Dimension.SETFILTER(Code,'<>%1&<>%2',CostAccountingSetup."Cost Center Dimension",CostAccountingSetup."Cost Object Dimension");
      Dimension.NEXT(LibraryRandom.RandInt(Dimension.COUNT - 1));
      CostCenterDim := Dimension.Code;
      Dimension.NEXT;
      CostObjectDim := Dimension.Code;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // dummy message handler
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCancelAction@68(VAR UpdateCCAndCOReqPage@1000 : TestRequestPage 1140);
    VAR
      NewCCDimensionCode@1006 : Code[20];
      NewCODimensionCode@1005 : Code[20];
    BEGIN
      FindCCAndCODimensions(NewCCDimensionCode,NewCODimensionCode);
      UpdateCCAndCOReqPage.CostCenterDimension.SETVALUE(NewCCDimensionCode);
      UpdateCCAndCOReqPage.CostObjectDimension.SETVALUE(NewCODimensionCode);

      // Exercise:
      UpdateCCAndCOReqPage.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerEmptyCCDimValue@60(VAR UpdateCCAndCOReqPage@1000 : TestRequestPage 1140);
    BEGIN
      UpdateCCAndCOReqPage.CostCenterDimension.SETVALUE('');

      UpdateCCAndCOReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerEmptyCODimValue@63(VAR UpdateCCAndCOReqPage@1000 : TestRequestPage 1140);
    BEGIN
      UpdateCCAndCOReqPage.CostObjectDimension.SETVALUE('');

      UpdateCCAndCOReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerOKAction@73(VAR UpdateCCAndCOReqPage@1001 : TestRequestPage 1140);
    BEGIN
      FindCCAndCODimensions(CostCenterDim,CostObjectDim);
      UpdateCCAndCOReqPage.CostCenterDimension.SETVALUE(CostCenterDim);
      UpdateCCAndCOReqPage.CostObjectDimension.SETVALUE(CostObjectDim);

      UpdateCCAndCOReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerSameDimension@59(VAR UpdateCCAndCOReqPage@1001 : TestRequestPage 1140);
    BEGIN
      UpdateCCAndCOReqPage.CostCenterDimension.SETVALUE(UpdateCCAndCOReqPage.CostObjectDimension.VALUE);

      UpdateCCAndCOReqPage.OK.INVOKE;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateAlignedDimension@40(FieldNo@1000 : Integer);
    VAR
      CostAccountingSetup@1001 : Record 1108;
      Dimension@1004 : Record 348;
      Field@1005 : Record 2000000041;
      RecordRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      CostAccountingSetup.GET;
      RecordRef.GETTABLE(CostAccountingSetup);
      FieldRef := RecordRef.FIELD(FieldNo);
      Field.GET(RecordRef.NUMBER,FieldRef.NUMBER);
      IF Field.Type = Field.Type::Code THEN BEGIN
        LibraryDimension.FindDimension(Dimension);
        Dimension.SETFILTER(Code,'<>%1',CostAccountingSetup."Cost Center Dimension");
        Dimension.SETFILTER(Code,'<>%1',CostAccountingSetup."Cost Object Dimension");
        Dimension.FINDSET;
        Dimension.NEXT(LibraryRandom.RandInt(Dimension.COUNT));
        FieldRef.VALIDATE(Dimension.Code);
        RecordRef.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ValidateBeginEndCostTypes@84(BeginTotalNo@1000 : Code[20];EndTotalNo@1001 : Code[20]);
    VAR
      BeginCostType@1002 : Record 1103;
      EndCostType@1003 : Record 1103;
    BEGIN
      BeginCostType.GET(BeginTotalNo);
      BeginCostType.TESTFIELD(Blocked,TRUE);

      EndCostType.GET(EndTotalNo);
      EndCostType.TESTFIELD(Blocked,TRUE);
      EndCostType.TESTFIELD(Totaling,BeginTotalNo + '..' + EndTotalNo);
    END;

    LOCAL PROCEDURE ValidateGLAccountCostTypeRef@56(CostTypeNo@1001 : Code[20]);
    VAR
      CostType@1003 : Record 1103;
      GLAccount@1002 : Record 15;
    BEGIN
      // The Cost Type has the G/L Account Range filled in.
      CostType.GET(CostTypeNo);
      CostType.TESTFIELD("G/L Account Range");

      // The G/L Accounts have the Cost Type No. filled in.
      LibraryCostAccounting.FindGLAccountsByCostType(GLAccount,CostType."G/L Account Range");
      REPEAT
        GLAccount.TESTFIELD("Cost Type No.",CostType."No.");
      UNTIL GLAccount.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateGLAccountIsIncomeStmt@55(VAR CostType@1000 : Record 1103);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      REPEAT
        LibraryCostAccounting.FindGLAccountsByCostType(GLAccount,CostType."G/L Account Range");
        REPEAT
          GLAccount.TESTFIELD("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
        UNTIL GLAccount.NEXT = 0;
      UNTIL CostType.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE ValidateCCAndCODimensions@76(ExpectedCCDim@1000 : Code[20];ExpectedCODim@1001 : Code[20]);
    VAR
      CostAccountingSetup@1002 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      CostAccountingSetup.TESTFIELD("Cost Center Dimension",ExpectedCCDim);
      CostAccountingSetup.TESTFIELD("Cost Object Dimension",ExpectedCODim);
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting]
      Area: Cost Accounting Setup

      Test Cases:

      1. Change Align G/L Account to "No Alignment" and verify that when adding a new Income G/L Account
      no cost type id added to the Chart of Cost Types.

      2. Change Align G/L Account to "Prompt" and verify that when adding a new Income G/L Account,
      a Cost Type is also created if the user selects "Yes" in the confirmation message.

      3. Change Align G/L Account to "Prompt" and verify that when adding a new Income G/L Account,
      no Cost Type is also created if the user selects "No" in the confirmation message.

      4. Change Align G/L Account to "Automatic" and verify that when adding a new Income G/L Account,
      a Cost Type is also created.

      5. Change Align Cost Centers to "No Alignment" and verify that when adding a new dimension value to the Dimension associated with
      Cost Centers no Cost Center is added to the Chart of Cost Centers.

      6. Change Align Cost Centers to "Prompt" and verify that when adding a new dimension value to the Dimension associated with
      Cost Centers a Cost Center is also created if the user selects "Yes" in the confirmation message

      7. Change Align Cost Centers to "Prompt" and verify that when adding a new dimension value to the Dimension associated with
      Cost Centers no Cost Center is created if the user selects "No" in the confirmation message

      8. Change Align Cost Centers to "Automatic" and verify that when adding a new dimension value the Dimension associated with
      Cost Centers a Cost Center is also created

      9. Change Align Cost Objects to "No Alignment" and verify that when adding a new dimension value to the Dimension associated with
      Cost Objects no Cost Object is added to the Chart of Cost Objects.

      10. Change Align Cost Objects to "Prompt" and verify that when adding a new dimension value to the Dimension associated with
      Cost Objects a Cost Object is also created if the user selects "Yes" in the confirmation message

      11. Change Align Cost Objects to "Prompt" and verify that when adding a new dimension value to the Dimension associated with
      Cost Objects no Cost Object is created if the user selects "No" in the confirmation message

      12. Change Align Cost Objects to "Automatic" and verify that when adding a new dimension value to the Dimension associated with
      Cost Objects a Cost Center is also created

      13. Check "Autotransfer" option in CA Setup and verify that GL entries are transfered to Cost Accounting

      14. Un-Check "Autotransfer" option in CA Setup and verify that GL entries are not transfered to Cost Accounting.

      15. Verify that a Cost Center whith Line Type = 'End-Total' has 'Blocked' checkbox checked, by default.

      16. Verify that a Cost Object whith Line Type = 'End-Total' has 'Blocked' checkbox checked, by default.

      17. Add a new Dimension Value to the Dimension associated with Cost Centers with line type 'Begin-Total'
      and check that no Cost Center is created (Alignment = Automic)

      18. Add a new Dimension Value to the Dimension associated with Cost Centers with line type 'End-Total'
      and check that no Cost Center is created (Alignment = Automic)

      19. Add a new Dimension Value to the Dimension associated with Cost Objects with line type 'Begin-Total'
      and check that no Cost Object is created (Alignment = Automic)

      20. Add a new Dimension Value to the Dimension associated with Cost Objects with line type 'End-Total'
      and check that no Cost Object is created (Alignment = Automic)
    }
    END.
  }
}

