OBJECT Codeunit 144021 ERM Service Tax
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryPurchase@1500000 : Codeunit 130512;
      LibraryERM@1500001 : Codeunit 131300;
      LibraryRandom@1500002 : Codeunit 130440;
      LibraryWarehouse@1500003 : Codeunit 132204;
      LibraryDimension@1500050 : Codeunit 131001;
      LibraryUtility@1500025 : Codeunit 131000;
      LibrarySales@1500026 : Codeunit 130509;
      LibraryVariableStorage@1500028 : Codeunit 131004;
      LibrarySetupStorage@1500010 : Codeunit 131009;
      LibraryServiceTax@1500009 : Codeunit 143001;
      Assert@1500027 : Codeunit 130000;
      IsInitialized@1500006 : Boolean;
      IncorrectRecordCount@1500005 : TextConst 'ENU=Incorrect record count for table %1: %2';
      WrongDimErr@1500004 : TextConst 'ENU=Wrong dimension shortcut code.';
      LineNotFoundErr@1500007 : TextConst 'ENU=Line not found.';
      NoGLEntriesErr@1500008 : TextConst 'ENU=No G/L entries found.';

    [Test]
    PROCEDURE CreateInvoiceAndApplyEntry@1500000();
    VAR
      PurchaseHeader@1500003 : Record 38;
      GenJournalLine@1500002 : Record 81;
      Location@1500004 : Record 14;
      GLEntry@1500016 : Record 17;
      ServiceTaxGroupCode@1500008 : Code[20];
      Amount@1500001 : Decimal;
      DocumentNo@1500005 : Code[20];
      VendorNo@1500015 : Code[20];
    BEGIN
      // Create and Post Payment Journal and Purchase Invoice With Service TAX and apply on payment and Verify Service Tax Entry.

      // Setup: Create and Post Payment Journal.
      Initialize;
      VendorNo := CreateVendor;
      DocumentNo := CreateGeneralJournalLine(GenJournalLine,Location,GenJournalLine."Account Type"::Vendor,GenJournalLine."Party Type"::Vendor,VendorNo,Amount,FALSE);
      ServiceTaxGroupCode := GenJournalLine."Service Tax Group Code";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreatePurchaseInvoice(PurchaseHeader,Location.Code,VendorNo,Amount,ServiceTaxGroupCode);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Apply Payment on Invoice.
      ApplyAndPostVendorEntry(GenJournalLine."Document Type"::Payment,DocumentNo);

      // Verify: Verify GL Entry, Service Tax Entry and Service Tax Entry Details.
      VerifyGLEntry(GLEntry,DocumentNo,GenJournalLine."Document Type"::Payment,GenJournalLine."Bal. Account Type"::"Bank Account",Amount);
      VerifyServiceTaxEntry(DocumentNo,Amount);
      VerifyServiceTaxEntryDetails(DocumentNo,Amount);
    END;

    [Test]
    PROCEDURE CreatePaymentJournalWithServiceTax@1500001();
    VAR
      GenJournalLine@1500004 : Record 81;
      Location@1500001 : Record 14;
      GLEntry@1500005 : Record 17;
      DocumentNo@1500003 : Code[20];
      Amount@1500002 : Decimal;
    BEGIN
      // Create and Post a Payment Journal with Service Tax.

      // Setup.
      Initialize;
      DocumentNo := CreateGeneralJournalLine(GenJournalLine,Location,GenJournalLine."Account Type"::Vendor,GenJournalLine."Party Type"::Vendor,CreateVendor,Amount,FALSE);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify GL Entry.
      VerifyGLEntry(GLEntry,DocumentNo,GenJournalLine."Document Type"::Payment,GenJournalLine."Bal. Account Type"::"Bank Account",Amount);
    END;

    [Test]
    PROCEDURE CreatePaymentJournalWithCustomer@1500022();
    VAR
      Location@1500000 : Record 14;
      GenJournalLine@1500001 : Record 81;
      GLEntry@1500005 : Record 17;
      Amount@1500002 : Decimal;
      DocumentNo@1500003 : Code[20];
    BEGIN
      // Create and Post a Payment Journal with Service Tax and Verify GL Entry.

      // Setup: Create Payment Journal with Service Tax.
      Initialize;
      DocumentNo :=
        CreateGeneralJournalLine(
          GenJournalLine,Location,GenJournalLine."Account Type"::Customer,
          GenJournalLine."Party Type"::Customer,LibrarySales.CreateCustomerNo,Amount,TRUE);

      // Exercise: Post General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify GL Entry.
      VerifyGLEntry(GLEntry,DocumentNo,GenJournalLine."Document Type"::Payment,GenJournalLine."Bal. Account Type"::"Bank Account",Amount);
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceAndApplyEntry@1500023();
    VAR
      Location@1500000 : Record 14;
      GenJournalLine@1500001 : Record 81;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500011 : Record 37;
      GLEntry@1500015 : Record 17;
      CustomerNo@1500003 : Code[20];
      DocumentNo@1500004 : Code[20];
      ServiceTaxGroupCode@1500005 : Code[20];
      PostedDocumentNo@1500009 : Code[20];
      Amount@1500006 : Decimal;
      LineAmount@1500012 : Decimal;
    BEGIN
      // Create and Post Payment Journal and Sales Invoice With Service TAX and apply through Apply To Document No field and verify there is no error in posting.

      // Setup: Create and Post Payment Journal and Sales Invoice With Service Tax.
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;
      DocumentNo := CreateGeneralJournalLine(GenJournalLine,Location,GenJournalLine."Account Type"::Customer,GenJournalLine."Party Type"::Customer,CustomerNo,Amount,TRUE);
      ServiceTaxGroupCode := GenJournalLine."Service Tax Group Code";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LineAmount := CreateSalesInvoice(SalesHeader,SalesLine,Location.Code,CustomerNo,-Amount,ServiceTaxGroupCode);

      // Exercise: Apply Payment on Invoice.
      SetApplyToDocumentNo(SalesHeader,DocumentNo);
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify GL Entry.
      GLEntry.SETFILTER("G/L Account No.",SalesLine."No."); // Sales Line of Type G/L Account and No. G/L Account No.
      VerifyGLEntry(GLEntry,PostedDocumentNo,GenJournalLine."Document Type"::Invoice,GenJournalLine."Bal. Account Type"::"G/L Account",-1 * LineAmount);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,ExciseAsServiceTaxCreditHandler)]
    PROCEDURE TestCreditAvailedIsFilledUpOnPayServiceTax@1500030();
    VAR
      ServiceTaxPaymentBuffer@1500000 : Record 16476;
      RG23APartII@1500001 : Record 13720;
      PayServiceTax@1500002 : Page 16477;
    BEGIN
      Initialize;

      CreateServiceTaxPaymentBuffer(ServiceTaxPaymentBuffer,'');
      CreateServiceTaxPaymentBuffer(ServiceTaxPaymentBuffer,'ADV');

      RG23APartII.INIT;
      RG23APartII."Remaining BED Credit" := LibraryRandom.RandInt(10000);
      RG23APartII."Remaining Excise Amount" :=  LibraryRandom.RandInt(10000);
      RG23APartII."Excise as Service Tax Credit" := TRUE;
      RG23APartII.INSERT;

      PayServiceTax.SETTABLEVIEW(ServiceTaxPaymentBuffer);
      PayServiceTax.RUN;
      RG23APartII.DELETE;

      // Verification is done in handler by verifying the CreditAvailed on PayServiceTax.
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxPageHandler,PostedMessageHandler,EditDimensionsHandler)]
    PROCEDURE CheckDimesionCodesUpdatedAfterServiceTaxPaymentPosted@1500039();
    VAR
      DocumentNo@1500003 : Code[20];
      ServiceTaxGroupCode@1500004 : Code[20];
      ServiceTaxRegNo@1500014 : Code[20];
    BEGIN
      // Check that G/L entries are updated with Global Dimensions after posting Service Tax Payment

      // Setup: Create and Post Sales Invoice With Service Tax.
      InitScenario(ServiceTaxGroupCode,ServiceTaxRegNo);

      // Exercise: Post Service Tax Payment.
      PostServiceTaxPaymentWithDimensions(ServiceTaxGroupCode,ServiceTaxRegNo,DocumentNo);

      // Verify: Verify GL Entries contain right dimension shortcut codes.
      VerifyDimensionsInGLEntries(DocumentNo);
    END;

    [Test]
    PROCEDURE TestPostRefundWithPoT@1000000000();
    VAR
      VendorNo@1500002 : Code[20];
      DocumentNo@1500000 : Code[20];
      Amount@1500001 : Decimal;
    BEGIN
      Initialize;
      RunTestPostRefund(TRUE,Amount,VendorNo,DocumentNo);
    END;

    [Test]
    PROCEDURE TestPostRefundWithoutPoT@1500005();
    VAR
      VendorNo@1500002 : Code[20];
      DocumentNo@1500000 : Code[20];
      Amount@1500001 : Decimal;
    BEGIN
      Initialize;
      RunTestPostRefund(FALSE,Amount,VendorNo,DocumentNo);
    END;

    [Test]
    PROCEDURE TestPostPaymentWithPoT@1500035();
    VAR
      VendorNo@1500002 : Code[20];
      Amount@1500001 : Decimal;
    BEGIN
      Initialize;

      RunTestPostPayment(TRUE,Amount,VendorNo);
    END;

    [Test]
    PROCEDURE TestPostPaymentWithoutPoT@1500037();
    VAR
      VendorNo@1500002 : Code[20];
      Amount@1500001 : Decimal;
    BEGIN
      Initialize;

      RunTestPostPayment(FALSE,Amount,VendorNo);
    END;

    [Test]
    PROCEDURE ServTaxPostPurchInvTwoDims@1500034();
    VAR
      PurchaseHeader@1500000 : Record 38;
      DummyGLEntry@1500002 : Record 17;
      ServiceTaxGroupCode@1500005 : Code[20];
      DocumentNo@1500001 : Code[20];
      LineDimValueCode@1500003 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Dimensions] [Purchase]
      // [SCENARIO 380071] Service Tax post of Purchase Invoice with two lines with different dimensions results in two G/L Entries, one per each dimension
      Initialize;

      // [GIVEN] Service Tax Setup with "Receivables Account (Interim)" = "A"
      ServiceTaxGroupCode := CreateServiceTaxGroupWithSetup(LibraryRandom.RandIntInRange(10,20));
      // [GIVEN] Purchase Invoice with Service Tax Structure and two lines:
      CreatePurchaseHeader(PurchaseHeader,CreateVendor,WORKDATE,CreateStructure);
      // [GIVEN] The first one with "Department Code" = "X"
      LineDimValueCode[1] := CreatePurchaseLine(PurchaseHeader,ServiceTaxGroupCode,LibraryRandom.RandDecInRange(1000,2000,2));
      // [GIVEN] The second one with "Department Code" = "Y"
      LineDimValueCode[2] := CreatePurchaseLine(PurchaseHeader,ServiceTaxGroupCode,LibraryRandom.RandDecInRange(1000,2000,2));

      // [WHEN] Post the Invoice
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] There are two G/L Entries with "G/L Account No." = "A":
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      DummyGLEntry.SETRANGE("G/L Account No.",GetRecAccInterim(ServiceTaxGroupCode));
      Assert.RecordCount(DummyGLEntry,2);
      // [THEN] The first one "G/L Entry"."Department Code" = "X"
      DummyGLEntry.SETRANGE("Global Dimension 2 Code",LineDimValueCode[1]);
      Assert.RecordIsNotEmpty(DummyGLEntry);
      // [THEN] The second one "G/L Entry"."Department Code" = "Y"
      DummyGLEntry.SETRANGE("Global Dimension 2 Code",LineDimValueCode[2]);
      Assert.RecordIsNotEmpty(DummyGLEntry);
    END;

    [Test]
    PROCEDURE ServTaxPostSalesInvTwoDims@1500036();
    VAR
      SalesHeader@1500000 : Record 36;
      DummyGLEntry@1500002 : Record 17;
      ServiceTaxGroupCode@1500005 : Code[20];
      DocumentNo@1500001 : Code[20];
      LineDimValueCode@1500003 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Dimensions] [Sales]
      // [SCENARIO 380071] Service Tax post of Sales Invoice with two lines with different dimensions results in two G/L Entries, one per each dimension
      Initialize;

      // [GIVEN] Service Tax Setup with "Payables Account (Interim)" = "A"
      ServiceTaxGroupCode := CreateServiceTaxGroupWithSetup(LibraryRandom.RandIntInRange(10,20));
      // [GIVEN] Purchase Invoice with Service Tax Structure and two lines:
      CreateSalesHeader(SalesHeader,LibrarySales.CreateCustomerNo,CreateStructure);
      // [GIVEN] The first one with "Department Code" = "X"
      LineDimValueCode[1] := CreateSalesLine(SalesHeader,ServiceTaxGroupCode,LibraryRandom.RandDecInRange(1000,2000,2));
      // [GIVEN] The second one with "Department Code" = "Y"
      LineDimValueCode[2] := CreateSalesLine(SalesHeader,ServiceTaxGroupCode,LibraryRandom.RandDecInRange(1000,2000,2));

      // [WHEN] Post the Invoice
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] There are two G/L Entries with "G/L Account No." = "A":
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      DummyGLEntry.SETRANGE("G/L Account No.",GetPayAccInterim(ServiceTaxGroupCode));
      Assert.RecordCount(DummyGLEntry,2);
      // [THEN] The first one "G/L Entry"."Department Code" = "X"
      DummyGLEntry.SETRANGE("Global Dimension 2 Code",LineDimValueCode[1]);
      Assert.RecordIsNotEmpty(DummyGLEntry);
      // [THEN] The second one "G/L Entry"."Department Code" = "Y"
      DummyGLEntry.SETRANGE("Global Dimension 2 Code",LineDimValueCode[2]);
      Assert.RecordIsNotEmpty(DummyGLEntry);
    END;

    LOCAL PROCEDURE Initialize@1500002();
    BEGIN
      LibraryRandom.SetSeed(1);  // Use Random Number Generator to generate the seed for RANDOM function.
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InsertDimensionValue@1500107(VAR EditDimensionsPage@1500000 : TestPage 480;DimensionCode@1500001 : Code[20]);
    VAR
      DimensionValue@1500002 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      IF DimensionValue.FINDFIRST THEN;
      EditDimensionsPage."Dimension Code".SETVALUE(DimensionValue."Dimension Code");
      EditDimensionsPage.DimensionValueCode.SETVALUE(DimensionValue.Code);
      EditDimensionsPage.NEXT;
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
    END;

    LOCAL PROCEDURE PayServiceTax@1500056(PayServiceTaxPage@1500000 : TestPage 16477;ServiceTaxGroupCode@1500001 : Code[20]);
    VAR
      LineFound@1500002 : Boolean;
      EndOfLines@1500003 : Boolean;
    BEGIN
      LineFound := FALSE;
      EndOfLines := FALSE;
      IF PayServiceTaxPage.FIRST THEN
        REPEAT
          IF PayServiceTaxPage."Service Tax Group Code".VALUE = ServiceTaxGroupCode THEN
            LineFound := TRUE
          ELSE
            EndOfLines := NOT PayServiceTaxPage.NEXT;
        UNTIL LineFound OR EndOfLines;

      IF NOT LineFound THEN
        Assert.Fail(LineNotFoundErr);

      PayServiceTaxPage."Payment Amount".SETVALUE(PayServiceTaxPage."Payment Liability".VALUE);
      PayServiceTaxPage."Payment Amount (eCess)".SETVALUE(PayServiceTaxPage."Payment Liability (eCess)".VALUE);
      PayServiceTaxPage."Payment Amount (SHECess)".SETVALUE(PayServiceTaxPage."Payment Liability (SHECess)".VALUE);
      PayServiceTaxPage."Payment Amount (SBC)".SETVALUE(PayServiceTaxPage."Payment Liability (SBC)".VALUE);
      PayServiceTaxPage."Payment Amount (KKC)".SETVALUE(PayServiceTaxPage."Payment Liability (KKC)".VALUE);
      PayServiceTaxPage."Account No.".SETVALUE(CreateGLAccount(ServiceTaxGroupCode));

      PayServiceTaxPage.Action1280020.INVOKE; // Edit dimensions
      PayServiceTaxPage.Post.INVOKE; // Post
    END;

    LOCAL PROCEDURE CheckDueDates@1500040(DateInPeriod@1500000 : Date);
    VAR
      ServiceTaxPeriodDueDates@1500005 : Record 16589;
      ServiceTaxReturnPeriod@1500004 : Record 16588;
      ServiceTaxYear@1500003 : Integer;
      ServiceTaxMonth@1500002 : Integer;
      ReturnPeriod@1500001 : Option;
    BEGIN
      ServiceTaxYear := DATE2DMY(DateInPeriod,3);
      ServiceTaxMonth := DATE2DMY(DateInPeriod,2);

      WITH ServiceTaxPeriodDueDates DO BEGIN
        IF (ServiceTaxMonth >= 4) AND (ServiceTaxMonth <= 9) THEN
          ReturnPeriod := "Return Period"::"Apr-Sep"
        ELSE BEGIN
          ReturnPeriod := "Return Period"::"Oct-Mar";
          IF ServiceTaxMonth < 4 THEN
            ServiceTaxYear -= 1;
        END;
        IF NOT GET(ServiceTaxYear,ReturnPeriod,"ST Payment Period"::Monthly,ServiceTaxMonth) THEN BEGIN
          ServiceTaxReturnPeriod.Year := ServiceTaxYear;
          ServiceTaxReturnPeriod."Return Period" := ReturnPeriod;
          ServiceTaxReturnPeriod.INSERT;
          ServiceTaxReturnPeriod.CreatePeriodDueDates(ServiceTaxYear,ReturnPeriod);
        END;
      END;
    END;

    LOCAL PROCEDURE InitScenario@1500046(VAR ServiceTaxGroupCode@1500005 : Code[20];VAR ServiceTaxRegNo@1500003 : Code[20]);
    VAR
      GLSetup@1500010 : Record 98;
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      CustomerNo@1500002 : Code[20];
    BEGIN
      Initialize;

      GLSetup.GET;
      GLSetup.VALIDATE(PoT,TRUE);
      GLSetup.MODIFY;

      CheckDueDates(WORKDATE);

      CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceTaxGroupCode := FindServiceTaxGroupCode;
      CreateSalesInvoice(
        SalesHeader,SalesLine,'',CustomerNo,100 * LibraryRandom.RandIntInRange(1,100),
        ServiceTaxGroupCode);
      ServiceTaxRegNo := SalesLine."Service Tax Registration No.";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostServiceTaxPaymentWithDimensions@1500049(ServiceTaxGroupCode@1500001 : Code[20];ServiceTaxRegNo@1500000 : Code[20];VAR DocumentNo@1500004 : Code[20]);
    VAR
      GLEntry@1500002 : Record 17;
      ServiceTaxPaymentPage@1500011 : TestPage 16476;
    BEGIN
      DocumentNo :=
        LibraryUtility.GenerateRandomCode(
          GLEntry.FIELDNO("Document No."),DATABASE::"G/L Entry");
      ServiceTaxPaymentPage.OPENEDIT;
      ServiceTaxPaymentPage.ServiceTaxRegistrationNo.SETVALUE(ServiceTaxRegNo);
      ServiceTaxPaymentPage.DateFilter.SETVALUE(FORMAT(WORKDATE));
      ServiceTaxPaymentPage.PostingDate.SETVALUE(WORKDATE);
      ServiceTaxPaymentPage.DocumentNo.SETVALUE(DocumentNo);

      LibraryVariableStorage.Enqueue(ServiceTaxGroupCode);
      ServiceTaxPaymentPage.ApplyBtn.INVOKE;
    END;

    LOCAL PROCEDURE VerifyDimensionsInGLEntries@1500053(DocumentNo@1500000 : Code[20]);
    VAR
      GLEntry@1500009 : Record 17;
      DimValueVar@1500015 : Variant;
      DimValues@1500016 : ARRAY [2] OF Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(DimValueVar);
      DimValues[1] := DimValueVar;
      LibraryVariableStorage.Dequeue(DimValueVar);
      DimValues[2] := DimValueVar;

      GLEntry.SETRANGE("Document No.",DocumentNo);
      IF GLEntry.FINDSET THEN
        REPEAT
          Assert.AreEqual(DimValues[1],GLEntry."Global Dimension 1 Code",WrongDimErr);
          Assert.AreEqual(DimValues[2],GLEntry."Global Dimension 2 Code",WrongDimErr);
        UNTIL GLEntry.NEXT = 0
      ELSE
        Assert.Fail(NoGLEntriesErr);
    END;

    LOCAL PROCEDURE ApplyAndPostVendorEntry@1500003(DocumentType@1500000 : Option;DocumentNo@1500001 : Code[20]);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      ApplyVendorEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyVendorEntry@1500004(VAR ApplyingVendorLedgerEntry@1500004 : Record 25;DocumentType@1500003 : Option;DocumentNo@1500002 : Code[20]);
    VAR
      VendorLedgerEntry@1500000 : Record 25;
      GLRegister@1500005 : Record 45;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(ApplyingVendorLedgerEntry,DocumentType,DocumentNo);
      ApplyingVendorLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyVendorEntry(ApplyingVendorLedgerEntry,ApplyingVendorLedgerEntry."Remaining Amount");

      // Find Posted Vendor Ledger Entries.
      GLRegister.FINDLAST;
      VendorLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      VendorLedgerEntry.SETRANGE("Applying Entry",FALSE);
      VendorLedgerEntry.FINDFIRST;

      // Set Applies-to ID.
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@1500006(VAR GenJournalLine@1500003 : Record 81;VAR Location@1500004 : Record 14;AccountType@1500005 : Option;PartyType@1500006 : Option;No@1500007 : Code[20];VAR Amount@1500001 : Decimal;IncludeServTaxInTDSBase@1500008 : Boolean) : Code[20];
    VAR
      GenJournalBatch@1500002 : Record 232;
      BankAccount@1500015 : Record 270;
    BEGIN
      CreateLocationWithServiceTaxRegistrationNo(Location);
      Amount := LibraryRandom.RandDec(1000,2);
      IF PartyType = GenJournalLine."Party Type"::Customer THEN
        Amount := -Amount;

      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,AccountType,No,Amount);
      LibraryERM.CreateBankAccount(BankAccount);
      GenJournalLine.VALIDATE("Party Type",PartyType);
      GenJournalLine.VALIDATE("Party Code",No);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      GenJournalLine.VALIDATE("Location Code",Location.Code);
      GenJournalLine.VALIDATE("Service Tax Registration No.",Location."Service Tax Registration No.");
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BankAccount."No.");
      GenJournalLine.VALIDATE("Service Tax Group Code",FindServiceTaxGroupCode);
      GenJournalLine.VALIDATE(PoT,TRUE);
      GenJournalLine.VALIDATE("Include Serv. Tax in TDS Base",IncludeServTaxInTDSBase);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE PrepareGenJournalLine@1500130(VAR GenJournalLine@1500002 : Record 81;VAR VendorNo@1500006 : Code[20];GenJournalLineDocumentType@1500004 : Integer;UsePoT@1500007 : Boolean) : Code[20];
    VAR
      JournalTemplate@1500001 : Code[10];
      JournalBatch@1500000 : Code[10];
      Amount@1500005 : Decimal;
    BEGIN
      JournalSetup(JournalTemplate,JournalBatch);

      IF VendorNo = '' THEN
        VendorNo := CreateVendor;

      WITH GenJournalLine DO BEGIN
        Amount := LibraryRandom.RandDec(9000,2);
        IF GenJournalLineDocumentType = "Document Type"::Refund THEN
          Amount := -Amount;

        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,
          JournalTemplate,JournalBatch,
          GenJournalLineDocumentType,
          "Account Type"::Vendor,VendorNo,
          Amount);

        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Serv. Tax on Advance Payment",TRUE);
        VALIDATE("Bal. Account No.",'2910');
        VALIDATE("Service Tax Group Code",FindServiceTaxGroupCode);  // 'ADV'
        VALIDATE("Service Tax Registration No.",FindServiceTaxRegistrationNo); // 'HXJ118910111357'
        VALIDATE(PoT,UsePoT);
        MODIFY(TRUE);

        EXIT("Document No.");
      END;
    END;

    LOCAL PROCEDURE JournalSetup@1500131(VAR JournalTemplate@1000000000 : Code[10];VAR JournalBatch@1000000001 : Code[10]);
    VAR
      GenJnlBatch@1000000003 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJnlBatch);
      LibraryERM.ClearGenJournalLines(GenJnlBatch);
      JournalTemplate := GenJnlBatch."Journal Template Name";
      JournalBatch := GenJnlBatch.Name;
    END;

    LOCAL PROCEDURE CreateLocationWithServiceTaxRegistrationNo@1500007(VAR Location@1500000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Service Tax Registration No.",FindServiceTaxRegistrationNo);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultiplePurchaseLine@1500008(PurchaseHeader@1500000 : Record 38;Amount@1500005 : Decimal;ServiceTaxGroupCode@1500010 : Code[20]);
    VAR
      i@1500001 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO
        CreatePurchaseLine(PurchaseHeader,ServiceTaxGroupCode,Amount);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500052(PurchaseHeader@1500001 : Record 38;ServiceTaxGroupCode@1500002 : Code[20];Amount@1500003 : Decimal) : Code[20];
    VAR
      PurchaseLine@1500000 : Record 39;
      DimensionValue@1500004 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(2));

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",CreateGLAccount(ServiceTaxGroupCode),LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
      PurchaseLine.MODIFY(TRUE);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateMultipleSalesLine@1500026(VAR SalesHeader@1500000 : Record 36;VAR SalesLine@1500001 : Record 37;Amount@1500002 : Decimal;ServiceTaxGroupCode@1500003 : Code[20]) : Decimal;
    VAR
      i@1500004 : Integer;
    BEGIN
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,4) DO
        CreateSalesLine(SalesHeader,ServiceTaxGroupCode,Amount);
      FindSalesLine(SalesLine,SalesHeader);
      EXIT(SalesLine.Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoice@1500009(VAR PurchaseHeader@1500000 : Record 38;LocationCode@1500005 : Code[20];VendorNo@1500001 : Code[20];Amount@1500004 : Decimal;ServiceTaxGroupCode@1500020 : Code[20]);
    BEGIN
      CreatePurchaseHeader(
        PurchaseHeader,VendorNo,
        LibraryUtility.GenerateRandomDate(
          CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)),WORKDATE),
          CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandIntInRange(11,20)),WORKDATE)),
        CreateStructure);
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.VALIDATE(PoT,TRUE);
      PurchaseHeader.MODIFY(TRUE);

      CreateMultiplePurchaseLine(PurchaseHeader,Amount,ServiceTaxGroupCode);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1500043(VAR PurchaseHeader@1500000 : Record 38;VendorNo@1500001 : Code[20];PostingDate@1500003 : Date;StructureCode@1500002 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.VALIDATE(Structure,StructureCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoice@1500027(VAR SalesHeader@1500005 : Record 36;VAR SalesLine@1500009 : Record 37;LocationCode@1500001 : Code[10];CustomerNo@1500002 : Code[20];Amount@1500003 : Decimal;ServiceTaxGroupCode@1500004 : Code[20]) : Decimal;
    BEGIN
      CreateSalesHeader(SalesHeader,CustomerNo,CreateStructure);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.VALIDATE(PoT,TRUE);
      SalesHeader.MODIFY(TRUE);

      EXIT(CreateMultipleSalesLine(SalesHeader,SalesLine,Amount,ServiceTaxGroupCode) * Amount);
    END;

    LOCAL PROCEDURE CreateSalesHeader@1500042(VAR SalesHeader@1500005 : Record 36;CustomerNo@1500002 : Code[20];StructureCode@1500000 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE(Structure,StructureCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@1500050(SalesHeader@1500002 : Record 36;ServiceTaxGroupCode@1500001 : Code[20];Amount@1500000 : Decimal) : Code[20];
    VAR
      SalesLine@1500003 : Record 37;
      DimensionValue@1500004 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,LibraryERM.GetGlobalDimensionCode(2));
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",CreateGLAccount(ServiceTaxGroupCode),LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("Shortcut Dimension 2 Code",DimensionValue.Code);
      SalesLine.MODIFY(TRUE);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateStructure@1500010() : Code[10];
    VAR
      StructureHeader@1500000 : Record 13792;
    BEGIN
      LibraryServiceTax.CreateServiceTaxStructure(StructureHeader);
      EXIT(StructureHeader.Code);
    END;

    LOCAL PROCEDURE CreateVendor@1500011() : Code[20];
    VAR
      GeneralPostingSetup@1500001 : Record 252;
      Vendor@1500002 : Record 23;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGLAccount@1500012(ServiceTaxGroupCode@1500007 : Code[20]) : Code[20];
    VAR
      GLAccount@1500000 : Record 15;
      GeneralPostingSetup@1500001 : Record 252;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("Service Tax Group Code",ServiceTaxGroupCode);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateServiceTaxGroupWithSetup@1500024(ServiceTaxPct@1500002 : Decimal) : Code[20];
    VAR
      ServiceTaxGroups@1500000 : Record 16471;
    BEGIN
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroups);
      CreateServiceTaxSetup(ServiceTaxGroups.Code,WORKDATE,ServiceTaxPct,0,0);
      EXIT(ServiceTaxGroups.Code);
    END;

    LOCAL PROCEDURE CreateServiceTaxSetup@1500041(ServiceTaxGroupsCode@1500001 : Code[20];FromDate@1500005 : Date;ServiceTaxPct@1500002 : Decimal;SBCessPct@1500003 : Decimal;KKCessPct@1500004 : Decimal);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroupsCode,WORKDATE);
      ServiceTaxSetup.GET(ServiceTaxGroupsCode,FromDate);
      ServiceTaxSetup.VALIDATE("Service Tax %",ServiceTaxPct);
      ServiceTaxSetup.VALIDATE("SB Cess%",SBCessPct);
      ServiceTaxSetup.VALIDATE("KK Cess%",KKCessPct);
      ServiceTaxSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGLEntries@1500013(VAR GLEntry@1500000 : Record 17;DocumentType@1500001 : Option;DocumentNo@1500002 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindSalesLine@1500028(VAR SalesLine@1500000 : Record 37;SalesHeader@1500001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceTaxGroupCode@1500015() : Code[20];
    VAR
      ServiceTaxGroups@1500001 : Record 16471;
    BEGIN
      ServiceTaxGroups.NEXT(LibraryRandom.RandInt(ServiceTaxGroups.COUNT));
      EXIT(ServiceTaxGroups.Code);
    END;

    LOCAL PROCEDURE FindServiceTaxRegistrationNo@1500016() : Code[20];
    VAR
      ServiceTaxRegistrationNos@1500000 : Record 16475;
    BEGIN
      ServiceTaxRegistrationNos.NEXT(LibraryRandom.RandInt(ServiceTaxRegistrationNos.COUNT));
      EXIT(ServiceTaxRegistrationNos.Code);
    END;

    LOCAL PROCEDURE CreateServiceTaxPaymentBuffer@1500031(VAR ServiceTaxPaymentBuffer@1500000 : Record 16476;ServiceTaxGroupCode@1500001 : Code[10]);
    BEGIN
      ServiceTaxPaymentBuffer.INIT;
      ServiceTaxPaymentBuffer."Service Tax Group Code" := ServiceTaxGroupCode;
      ServiceTaxPaymentBuffer."Credit Available RG23A" := LibraryRandom.RandInt(10000);
      ServiceTaxPaymentBuffer.INSERT;
    END;

    LOCAL PROCEDURE SetApplyToDocumentNo@1500029(VAR SalesHeader@1500000 : Record 36;DocumentNo@1500001 : Code[20]);
    BEGIN
      SalesHeader.VALIDATE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::Payment);
      SalesHeader.VALIDATE("Applies-to Doc. No.",DocumentNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetRecAccInterim@1500017(ServiceTaxGroupCode@1500001 : Code[20]) : Code[20];
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      ServiceTaxSetup.GET(ServiceTaxGroupCode,WORKDATE);
      EXIT(ServiceTaxSetup."Receivables Account (Interim)");
    END;

    LOCAL PROCEDURE GetPayAccInterim@1500044(ServiceTaxGroupCode@1500001 : Code[20]) : Code[20];
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      ServiceTaxSetup.GET(ServiceTaxGroupCode,WORKDATE);
      EXIT(ServiceTaxSetup."Payables Account (Interim)");
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500018(VAR GLEntry@1170000000 : Record 17;DocumentNo@1500000 : Code[20];DocumentType@1500004 : Option;BalAccountType@1500002 : Option;Amount@1500001 : Decimal);
    BEGIN
      FindGLEntries(GLEntry,DocumentType,DocumentNo);
      GLEntry.SETRANGE("Bal. Account Type",BalAccountType);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyServiceTaxEntry@1500019(DocumentNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.FINDFIRST;
      ServiceTaxEntry.TESTFIELD("Amount Including Service Tax",Amount);
    END;

    LOCAL PROCEDURE VerifyServiceTaxEntryDetails@1500020(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntryDetails.FINDFIRST;
      ServiceTaxEntryDetails.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE RunTestPostPayment@1500025(UsePoT@1500000 : Boolean;VAR Amount@1500002 : Decimal;VAR VendorNo@1500003 : Code[20]) : Code[20];
    VAR
      GenJournalLine@1000000000 : Record 81;
      DocumentNo@1500001 : Code[20];
    BEGIN
      DocumentNo := PrepareGenJournalLine(GenJournalLine,VendorNo,GenJournalLine."Document Type"::Payment,UsePoT);

      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Purchase);
      GenJournalLine.MODIFY(TRUE);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyNumberOfEntriesAfterPosting(VendorNo,GenJournalLine."Document Type"::Payment,DocumentNo,UsePoT);

      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE RunTestPostRefund@1500021(UsePoT@1500000 : Boolean;VAR Amount@1500002 : Decimal;VAR VendorNo@1500003 : Code[20];AppliesToDocumentNo@1500001 : Code[20]) : Code[20];
    VAR
      GenJournalLine@1000000000 : Record 81;
      DocumentNo@1500004 : Code[20];
    BEGIN
      DocumentNo := PrepareGenJournalLine(GenJournalLine,VendorNo,GenJournalLine."Document Type"::Refund,UsePoT);

      IF AppliesToDocumentNo <> '' THEN BEGIN
        GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Purchase);
        GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Payment);
        GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliesToDocumentNo);
        GenJournalLine.VALIDATE("External Document No.",AppliesToDocumentNo);
        GenJournalLine.MODIFY(TRUE);
      END;

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyNumberOfEntriesAfterPosting(VendorNo,GenJournalLine."Document Type"::Refund,DocumentNo,UsePoT);

      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE VerifyNumberOfEntriesAfterPosting@1500038(VendorNo@1500001 : Code[20];DocumentType@1500006 : Integer;DocumentNo@1500002 : Code[20];UsePoT@1500004 : Boolean);
    VAR
      VendorLedgerEntry@1500000 : Record 25;
      GLEntry@1500003 : Record 17;
      ExpectedGLEntriesCount@1500005 : Integer;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Vendor No.",VendorNo);
        FINDSET;
        Assert.AreEqual(
          1,
          COUNT,
          STRSUBSTNO(IncorrectRecordCount,TABLECAPTION,GETFILTERS));
      END;

      IF UsePoT THEN
        ExpectedGLEntriesCount := 8
      ELSE
        ExpectedGLEntriesCount := 2;

      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Posting Date",VendorLedgerEntry."Posting Date");
        Assert.AreEqual(
          ExpectedGLEntriesCount,
          COUNT,
          STRSUBSTNO(IncorrectRecordCount,TABLECAPTION,GETFILTERS));
      END;
    END;

    [PageHandler]
    PROCEDURE PayServiceTaxHandler@1500032(VAR PayServiceTax@1500000 : TestPage 16477);
    VAR
      BEDAmountText@1500001 : Variant;
    BEGIN
      PayServiceTax.ExciseCenvatClaim.INVOKE;
      LibraryVariableStorage.Dequeue(BEDAmountText);
      PayServiceTax."Credit Availed".ASSERTEQUALS(BEDAmountText);
    END;

    [ModalPageHandler]
    PROCEDURE ExciseAsServiceTaxCreditHandler@1500033(VAR ExciseasServiceTaxCredit@1500000 : TestPage 16584);
    BEGIN
      ExciseasServiceTaxCredit."RG 23 A PART II BED Amount".SETVALUE(LibraryRandom.RandInt(100));
      LibraryVariableStorage.Enqueue(ExciseasServiceTaxCredit."RG 23 A PART II BED Amount".VALUE);
      ExciseasServiceTaxCredit.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PayServiceTaxPageHandler@1500072(VAR PayServiceTaxPage@1500000 : TestPage 16477);
    VAR
      ServiceTaxGroupCodeVar@1500001 : Variant;
      ServiceTaxGroupCode@1500002 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(ServiceTaxGroupCodeVar);
      ServiceTaxGroupCode := ServiceTaxGroupCodeVar;
      PayServiceTax(PayServiceTaxPage,ServiceTaxGroupCode);
    END;

    [MessageHandler]
    PROCEDURE PostedMessageHandler@1500075(Message@1500000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionsHandler@1500100(VAR EditDimensionsPage@1500000 : TestPage 480);
    VAR
      GLSetup@1500001 : Record 98;
    BEGIN
      GLSetup.GET;
      InsertDimensionValue(EditDimensionsPage,GLSetup."Global Dimension 1 Code");
      InsertDimensionValue(EditDimensionsPage,GLSetup."Global Dimension 2 Code");
    END;

    [PageHandler]
    PROCEDURE ServiceTaxPeriodDueDatesPageHandler@1500045(VAR ServiceTaxPeriodDueDatesPage@1500000 : TestPage 16363);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Service Tax]
      Test for ERM - With Service Tax
      1. Create and Post Payment Journal and Purchase Invoice With Service TAX and apply on payment and Verify Service Tax Entry.
      2. Create and Post a Payment Journal with Service Tax.
      3. Create and post a Payment Journal With Customer.
      4. Create and Post Payment Journal and Sales Invoice With Service TAX and apply through Apply To Document No field and verify there is no error in posting.
      5. Check that G/L entries are updated with Global Dimensions after posting Service Tax Payment.

      Covers Test cases: 272457
      ---------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ---------------------------------------------------------------------------------
      CreateInvoiceAndApplyEntry, CreatePaymentJournalWithServiceTax            272456

      Covers Test cases: 291448
      ---------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ---------------------------------------------------------------------------------
      CreatePaymentJournalWithCustomer, CreateSalesInvoiceAndApplyEntry         291447

      BUG ID: 7205
      ---------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ---------------------------------------------------------------------------------
      CheckDimesionCodesUpdatedAfterServiceTaxPaymentPosted                      7205
    }
    END.
  }
}

