OBJECT Codeunit 5611 Calculate Normal Depreciation
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.45778,NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    Permissions=TableData 5601=r,
                TableData 5604=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="Force No. of Days must only be specified if %1 %2 = %3.";ENN="Force No. of Days must only be specified if %1 %2 = %3."';
      Text001@1001 : TextConst 'ENU=%2 must not be 100 for %1.;ENN=%2 must not be 100 for %1.';
      Text002@1002 : TextConst 'ENU="%2 must be %3 if %4 %5 = %6 for %1.";ENN="%2 must be %3 if %4 %5 = %6 for %1."';
      Text003@1003 : TextConst 'ENU=%2 must not be later than %3 for %1.;ENN=%2 must not be later than %3 for %1.';
      Text004@1004 : TextConst 'ENU=%1 %2 must not be used together with the Half-Year Convention for %3.;ENN=%1 %2 must not be used together with the Half-Year Convention for %3.';
      FA@1005 : Record 5600;
      FALedgEntry@1006 : Record 5601;
      DeprBook@1007 : Record 5611;
      FADeprBook@1008 : Record 5612;
      DepreciationCalc@1009 : Codeunit 5616;
      DeprBookCode@1010 : Code[10];
      DaysInFiscalYear@1011 : Integer;
      EntryAmounts@1012 : ARRAY [4] OF Decimal;
      MinusBookValue@1013 : Decimal;
      DateFromProjection@1014 : Date;
      SkipOnZero@1015 : Boolean;
      UntilDate@1016 : Date;
      Sign@1017 : Integer;
      FirstDeprDate@1018 : Date;
      NumberOfDays@1019 : Integer;
      NumberOfDays2@1020 : Integer;
      DaysInPeriod@1021 : Integer;
      UseDeprStartingDate@1022 : Boolean;
      BookValue@1023 : Decimal;
      BookValue2@1024 : Decimal;
      DeprBasis@1025 : Decimal;
      SalvageValue@1026 : Decimal;
      SalvageValue2@1027 : Decimal;
      AcquisitionDate@1028 : Date;
      DisposalDate@1029 : Date;
      DeprMethod@1030 : 'StraightLine,DB1,DB2,DB1SL,DB2SL,User-Defined,Manual,BelowZero';
      DeprStartingDate@1031 : Date;
      FirstUserDefinedDeprDate@1032 : Date;
      SLPercent@1033 : Decimal;
      DBPercent@1034 : Decimal;
      FixedAmount@1035 : Decimal;
      DeprYears@1036 : Decimal;
      DeprTableCode@1037 : Code[10];
      FinalRoundingAmount@1038 : Decimal;
      EndingBookValue@1039 : Decimal;
      AmountBelowZero@1040 : Decimal;
      PercentBelowZero@1041 : Decimal;
      StartingDate@1042 : Date;
      EndingDate@1043 : Date;
      Factor@1044 : Decimal;
      UseHalfYearConvention@1045 : Boolean;
      NewYearDate@1046 : Date;
      DeprInTwoFiscalYears@1047 : Boolean;
      TempDeprAmount@1048 : Decimal;
      Text005@1049 : TextConst 'ENU=%1 must not be used together with the Half-Year Convention for %2.;ENN=%1 must not be used together with the Half-Year Convention for %2.';
      Text006@1050 : TextConst 'ENU=%1 must be %2 or later for %3.;ENN=%1 must be %2 or later for %3.';
      Text007@1051 : TextConst 'ENU=%1 must not be used together with %2 for %3.;ENN=%1 must not be used together with %2 for %3.';
      Text008@1052 : TextConst 'ENU="%1 must not be used together with %2 = %3 for %4.";ENN="%1 must not be used together with %2 = %3 for %4."';
      Year365Days@1053 : Boolean;
      FAShift@1500000 : Record 16520;
      Text16500@1500002 : TextConst 'ENU=FA Posting Date for Income Tax is beyond the fiscal year end date.;ENN=FA Posting Date for Income Tax is beyond the fiscal year end date.';
      FABlock@1500004 : Record 16518;
      FALedgEntry2@1500003 : Record 5601;
      DeprEndingDate@1500005 : Date;
      FAShiftLineNo@1500001 : Integer;
      FALedgEntryRetro@1500006 : Record 5601;
      FARetrospectiveBookRetro@1500007 : Record 16528;
      FANo@1500008 : Code[20];

    PROCEDURE Calculate@1(VAR DeprAmount@1000 : Decimal;VAR NumberOfDays4@1001 : Integer;FANo@1002 : Code[20];DeprBookCode2@1003 : Code[10];UntilDate2@1004 : Date;EntryAmounts2@1005 : ARRAY [4] OF Decimal;DateFromProjection2@1006 : Date;DaysInPeriod2@1007 : Integer);
    VAR
      i@1008 : Integer;
    BEGIN
      IF FAShiftLineNo = 0 THEN
        CLEARALL;
      DeprAmount := 0;
      NumberOfDays4 := 0;
      DeprBookCode := DeprBookCode2;
      FA.GET(FANo);
      DeprBook.GET(DeprBookCode);
      IF FAShiftLineNo = 0 THEN BEGIN
        IF NOT FADeprBook.GET(FANo,DeprBookCode) THEN
          EXIT;
      END ELSE BEGIN
        IF NOT FAShift.GET(FANo,DeprBookCode,FAShiftLineNo) THEN
          EXIT;
      END;

      UntilDate := UntilDate2;
      IF DeprBook."FA Book Type" = DeprBook."FA Book Type"::"Income Tax" THEN BEGIN
        CheckFiscalYearForIncTax(UntilDate);
        FABlock.GET(FA."FA Class Code",FA."FA Block Code");
        FABlock.TESTFIELD("Depreciation %");
        FABlock.CALCFIELDS("Book Value");
        FABlock.CALCFIELDS("No. of Assets");
      END;
      FOR i := 1 TO 4 DO
        EntryAmounts[i] := EntryAmounts2[i];
      DateFromProjection := DateFromProjection2;
      DaysInPeriod := DaysInPeriod2;

      FALedgEntry.LOCKTABLE;
      WITH DeprBook DO
        IF DaysInPeriod > 0 THEN
          IF "Periodic Depr. Date Calc." <> "Periodic Depr. Date Calc."::"Last Entry" THEN BEGIN
            "Periodic Depr. Date Calc." := "Periodic Depr. Date Calc."::"Last Entry";
            ERROR(
              Text000,
              TABLECAPTION,FIELDCAPTION("Periodic Depr. Date Calc."),"Periodic Depr. Date Calc.");
          END;
      IF FAShiftLineNo = 0 THEN
        TransferValues
      ELSE
        TransferValuesShift;
      IF NOT SkipRecord THEN BEGIN
        Sign := 1;
        IF FAShiftLineNo = 0 THEN BEGIN
          IF NOT FADeprBook."Use FA Ledger Check" THEN BEGIN
            IF DeprBook."Use FA Ledger Check" THEN
              FADeprBook.TESTFIELD("Use FA Ledger Check",TRUE);
            FADeprBook.TESTFIELD("Fixed Depr. Amount below Zero",0);
            FADeprBook.TESTFIELD("Depr. below Zero %",0);
            Sign := DepreciationCalc.GetSign(BookValue,DeprBasis,SalvageValue,MinusBookValue);
            IF Sign = 0 THEN
              EXIT;
            IF Sign = -1 THEN
              DepreciationCalc.GetNewSigns(BookValue,DeprBasis,SalvageValue,MinusBookValue);
          END;
          IF (FADeprBook."Fixed Depr. Amount below Zero" > 0) OR
             (FADeprBook."Depr. below Zero %" > 0)
          THEN
            FADeprBook.TESTFIELD("Use FA Ledger Check",TRUE);
        END ELSE BEGIN
          IF NOT FAShift."Use FA Ledger Check" THEN BEGIN
            IF DeprBook."Use FA Ledger Check" THEN
              FAShift.TESTFIELD("Use FA Ledger Check",TRUE);
            FAShift.TESTFIELD("Fixed Depr. Amount below Zero",0);
            FAShift.TESTFIELD("Depr. below Zero %",0);
            Sign := DepreciationCalc.GetSign(BookValue,DeprBasis,SalvageValue,MinusBookValue);
            IF Sign = 0 THEN
              EXIT;
            IF Sign = -1 THEN
              DepreciationCalc.GetNewSigns(BookValue,DeprBasis,SalvageValue,MinusBookValue);
          END;

          IF (FAShift."Fixed Depr. Amount below Zero" > 0) OR
             (FAShift."Depr. below Zero %" > 0)
          THEN
            FAShift.TESTFIELD("Use FA Ledger Check",TRUE);
        END;

        IF BookValue + SalvageValue <= 0 THEN
          SkipOnZero := TRUE;
        IF (SalvageValue >= 0) AND (BookValue <= EndingBookValue) THEN
          SkipOnZero := TRUE;

        IF NOT
           (SkipOnZero AND
            NOT DeprBook."Allow Depr. below Zero" AND
            NOT DeprBook."Use FA Ledger Check")
        THEN BEGIN
          IF SkipOnZero AND (DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax") THEN
            DeprMethod := DeprMethod::BelowZero;
          DeprAmount := Sign * CalculateDeprAmount;

          IF (Sign * DeprAmount > 0) AND (DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax") THEN
            DeprAmount := 0;
          IF DeprBook."FA Book Type" = DeprBook."FA Book Type"::"Income Tax" THEN
            IF (FABlock."Book Value" <= 0) OR (FABlock."No. of Assets" = 0) OR
               ((FADeprBook."Disposal Date" <> 0D) AND (BookValue = 0))
            THEN
              DeprAmount := 0;
          NumberOfDays4 := NumberOfDays2;
        END;
      END;
    END;

    LOCAL PROCEDURE SkipRecord@4() : Boolean;
    BEGIN
      IF DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax" THEN
        EXIT(
          (DisposalDate > 0D) OR
          (AcquisitionDate = 0D) OR
          (DeprMethod = DeprMethod::Manual) OR
          (AcquisitionDate > UntilDate) OR
          FA.Inactive OR
          FA.Blocked);

      EXIT(
        (AcquisitionDate = 0D) OR
        (DeprMethod = DeprMethod::Manual) OR
        (AcquisitionDate > UntilDate) OR
        FA.Inactive OR
        FA.Blocked);
    END;

    LOCAL PROCEDURE CalculateDeprAmount@2() : Decimal;
    VAR
      Amount@1000 : Decimal;
    BEGIN
      WITH FA DO BEGIN
        IF DateFromProjection > 0D THEN
          FirstDeprDate := DateFromProjection
        ELSE BEGIN
          FirstDeprDate := DepreciationCalc.GetFirstDeprDate("No.",DeprBookCode,Year365Days);
          IF FirstDeprDate > UntilDate THEN
            EXIT(0);
          UseDeprStartingDate := DepreciationCalc.UseDeprStartingDate("No.",DeprBookCode);
          IF UseDeprStartingDate THEN
            FirstDeprDate := DeprStartingDate;
        END;
        IF FirstDeprDate < DeprStartingDate THEN
          FirstDeprDate := DeprStartingDate;
        // NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
        CalcNumberOfDays;
        Factor := 1;
        IF NumberOfDays <= 0 THEN
          EXIT(0);
        IF DaysInPeriod > 0 THEN BEGIN
          Factor := DaysInPeriod / NumberOfDays;
          NumberOfDays := DaysInPeriod;
        END;
        UseHalfYearConvention := SetHalfYearConventionMethod;
        IF FAShift."Shift Type" <> FAShift."Shift Type"::Single THEN
          UpdateDaysInFiscalYear;
        // Method Last Entry
        IF UseDeprStartingDate OR
           (DateFromProjection > 0D) OR
           (DeprMethod = DeprMethod::BelowZero) OR
           (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Entry")
        THEN BEGIN
          NumberOfDays2 := NumberOfDays;
          IF UseHalfYearConvention THEN
            Amount := CalcHalfYearConventionDepr
          ELSE
            CASE DeprMethod OF
              DeprMethod::StraightLine:
                Amount := CalcSLAmount;
              DeprMethod::DB1:
                Amount := CalcDB1Amount;
              DeprMethod::DB2:
                Amount := CalcDB2Amount;
              DeprMethod::DB1SL,
              DeprMethod::DB2SL:
                Amount := CalcDBSLAmount;
              DeprMethod::Manual:
                Amount := 0;
              DeprMethod::"User-Defined":
                Amount := CalcUserDefinedAmount(UntilDate);
              DeprMethod::BelowZero:
                Amount := DepreciationCalc.CalcRounding(DeprBookCode,CalcBelowZeroAmount);
            END;
        END
          // Method Last Depreciation Entry
        ELSE BEGIN
          IF UseHalfYearConvention THEN
            DeprBook.TESTFIELD(
              "Periodic Depr. Date Calc.",DeprBook."Periodic Depr. Date Calc."::"Last Entry");
          Amount := 0;
          StartingDate := 0D;
          EndingDate := 0D;
          DepreciationCalc.GetDeprPeriod(
            "No.",DeprBookCode,UntilDate,StartingDate,EndingDate,NumberOfDays,Year365Days);
          FirstDeprDate := StartingDate;
          NumberOfDays2 := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
          WHILE NumberOfDays > 0 DO BEGIN
            DepreciationCalc.CalculateDeprInPeriod(
              "No.",DeprBookCode,EndingDate,Amount,Sign,
              BookValue,DeprBasis,SalvageValue,MinusBookValue);
            IF DepreciationCalc.GetSign(
                 BookValue,DeprBasis,SalvageValue,MinusBookValue) <> 1
            THEN
              EXIT(0);
            CASE DeprMethod OF
              DeprMethod::StraightLine:
                Amount := Amount + CalcSLAmount;
              DeprMethod::DB1:
                Amount := Amount + CalcDB1Amount;
              DeprMethod::DB2:
                Amount := Amount + CalcDB2Amount;
              DeprMethod::Manual:
                Amount := 0;
              DeprMethod::"User-Defined":
                Amount := Amount + CalcUserDefinedAmount(EndingDate);
            END;
            DepreciationCalc.GetDeprPeriod(
              "No.",DeprBookCode,UntilDate,StartingDate,EndingDate,NumberOfDays,Year365Days);
            FirstDeprDate := StartingDate;
          END;
        END;
      END;
      IF (Amount >= 0) AND (DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax") THEN
        EXIT(0);
      IF NOT SkipOnZero THEN
        DepreciationCalc.AdjustDepr(
          DeprBookCode,Amount,ABS(BookValue2),-ABS(SalvageValue2),
          EndingBookValue,FinalRoundingAmount);
      EXIT(ROUND(Amount));
    END;

    LOCAL PROCEDURE CalcTempDeprAmount@19(VAR DeprAmount@1000 : Decimal) : Boolean;
    BEGIN
      DeprAmount := 0;
      IF FADeprBook."Temp. Ending Date" = 0D THEN
        EXIT(FALSE);
      IF (FirstDeprDate <= FADeprBook."Temp. Ending Date") AND (UntilDate > FADeprBook."Temp. Ending Date") THEN
        ERROR(
          Text006,
          FADeprBook.FIELDCAPTION("Temp. Ending Date"),
          UntilDate,
          FAName);
      IF FADeprBook."Temp. Ending Date" >= UntilDate THEN BEGIN
        IF FADeprBook."Use Half-Year Convention" THEN
          ERROR(
            Text005,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            FAName);
        IF FADeprBook."Use DB% First Fiscal Year" THEN
          ERROR(
            Text007,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            FADeprBook.FIELDCAPTION("Use DB% First Fiscal Year"),
            FAName);
        IF FADeprBook."Depreciation Method" = FADeprBook."Depreciation Method"::"User-Defined" THEN
          ERROR(
            Text008,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            FADeprBook.FIELDCAPTION("Depreciation Method"),
            FADeprBook."Depreciation Method",
            FAName);
        IF DeprMethod = DeprMethod::BelowZero THEN
          ERROR(
            Text007,
            FADeprBook.FIELDCAPTION("Temp. Ending Date"),
            DeprBook.FIELDCAPTION("Allow Depr. below Zero"),
            FAName);
        DeprBook.TESTFIELD(
          "Periodic Depr. Date Calc.",DeprBook."Periodic Depr. Date Calc."::"Last Entry");
        DeprAmount := -(NumberOfDays / DaysInFiscalYear) * FADeprBook."Temp. Fixed Depr. Amount";
        EXIT(TRUE)
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CalcSLAmount@6() : Decimal;
    VAR
      RemainingLife@1000 : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        EXIT(TempDeprAmount);

      IF SLPercent > 0 THEN
        EXIT((-SLPercent / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis);

      IF FixedAmount > 0 THEN
        EXIT(-FixedAmount * NumberOfDays / DaysInFiscalYear);

      IF DeprYears > 0 THEN BEGIN
        IF DeprBook."Fiscal Year 365 Days" THEN
          RemainingLife := (DeprEndingDate - DeprStartingDate) - (FirstDeprDate - DeprStartingDate) + 1
        ELSE
          RemainingLife :=
            (DeprYears * DaysInFiscalYear) -
            DepreciationCalc.DeprDays(
              DeprStartingDate,DepreciationCalc.Yesterday(FirstDeprDate,Year365Days),Year365Days);
        IF RemainingLife < 1 THEN
          EXIT(-BookValue);

        EXIT(-(BookValue + SalvageValue - MinusBookValue) * NumberOfDays / RemainingLife);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE CalcDB1Amount@11() : Decimal;
    VAR
      DeprInFiscalYear@1000 : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        EXIT(TempDeprAmount);

      IF DateFromProjection = 0D THEN
        DeprInFiscalYear := DepreciationCalc.DeprInFiscalYear(FA."No.",DeprBookCode,UntilDate)
      ELSE
        DeprInFiscalYear := EntryAmounts[3];
      IF DeprInTwoFiscalYears THEN
        DeprInFiscalYear := 0;
      EXIT(
        -(DBPercent / 100) * (NumberOfDays / DaysInFiscalYear) *
        (BookValue + SalvageValue - MinusBookValue - Sign * DeprInFiscalYear));
    END;

    LOCAL PROCEDURE CalcDB2Amount@14() : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        EXIT(TempDeprAmount);

      EXIT(
        -(1 - POWER(1 - DBPercent / 100,NumberOfDays / DaysInFiscalYear)) *
        (BookValue - MinusBookValue));
    END;

    LOCAL PROCEDURE CalcDBSLAmount@12() : Decimal;
    VAR
      FADateCalc@1002 : Codeunit 5617;
      SLAmount@1000 : Decimal;
      DBAmount@1001 : Decimal;
    BEGIN
      IF DeprMethod = DeprMethod::DB1SL THEN
        DBAmount := CalcDB1Amount
      ELSE
        DBAmount := CalcDB2Amount;
      IF FADeprBook."Use DB% First Fiscal Year" THEN
        IF FADateCalc.GetFiscalYear(DeprBookCode,UntilDate) =
           FADateCalc.GetFiscalYear(DeprBookCode,DeprStartingDate)
        THEN
          EXIT(DBAmount);
      SLAmount := CalcSLAmount;
      IF SLAmount < DBAmount THEN
        EXIT(SLAmount);

      EXIT(DBAmount)
    END;

    LOCAL PROCEDURE CalcUserDefinedAmount@8(EndingDate@1000 : Date) : Decimal;
    VAR
      TableDeprCalc@1001 : Codeunit 5618;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        ERROR('');

      EXIT(
        -TableDeprCalc.GetTablePercent(DeprBook.Code,DeprTableCode,
          FirstUserDefinedDeprDate,FirstDeprDate,EndingDate) *
        DeprBasis * Factor);
    END;

    LOCAL PROCEDURE CalcBelowZeroAmount@9() : Decimal;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        ERROR('');

      IF PercentBelowZero > 0 THEN
        EXIT((-PercentBelowZero / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis);
      IF AmountBelowZero > 0 THEN
        EXIT(-AmountBelowZero * NumberOfDays / DaysInFiscalYear);
      EXIT(0);
    END;

    LOCAL PROCEDURE TransferValues@3();
    VAR
      AddDeprApplicable@1500000 : Boolean;
      DepriciationBook@1500001 : Record 5611;
    BEGIN
      WITH FADeprBook DO BEGIN
        TESTFIELD("Depreciation Starting Date");
        IF "Depreciation Method" = "Depreciation Method"::"User-Defined" THEN BEGIN
          TESTFIELD("Depreciation Table Code");
          TESTFIELD("First User-Defined Depr. Date");
        END;
        CASE "Depreciation Method" OF
          "Depreciation Method"::"Declining-Balance 1",
          "Depreciation Method"::"Declining-Balance 2",
          "Depreciation Method"::"DB1/SL",
          "Depreciation Method"::"DB2/SL":
            IF "Declining-Balance %" >= 100 THEN
              ERROR(Text001,FAName,FIELDCAPTION("Declining-Balance %"));
        END;
        IF (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Depr. Entry") AND
           ("Depreciation Method" <> "Depreciation Method"::"Straight-Line")
        THEN BEGIN
          "Depreciation Method" := "Depreciation Method"::"Straight-Line";
          ERROR(
            Text002,
            FAName,
            FIELDCAPTION("Depreciation Method"),
            "Depreciation Method",
            DeprBook.TABLECAPTION,
            DeprBook.FIELDCAPTION("Periodic Depr. Date Calc."),
            DeprBook."Periodic Depr. Date Calc.");
        END;

        IF DateFromProjection = 0D THEN BEGIN
          CALCFIELDS("Book Value");
          BookValue := "Book Value";
        END ELSE
          BookValue := EntryAmounts[1];
        MinusBookValue := DepreciationCalc.GetMinusBookValue(FA."No.",DeprBookCode,0D,0D);
        CALCFIELDS("Depreciable Basis","Salvage Value");
        DeprBasis := "Depreciable Basis";
        IF (DeprBook."FA Book Type" = DeprBook."FA Book Type"::"Income Tax") AND ("Disposal Date" <> 0D) THEN BEGIN
          FilterFALedger(FA."No.",DeprBook.Code,TRUE);
          FALedgEntry2.CALCSUMS(Amount);
          DeprBasis := FALedgEntry2.Amount;
          FilterFALedger(FA."No.",DeprBook.Code,FALSE);
          FALedgEntry2.CALCSUMS(Amount);
          BookValue := FALedgEntry2.Amount;
        END;
        SalvageValue := "Salvage Value";
        BookValue2 := BookValue;
        SalvageValue2 := SalvageValue;
        DeprMethod := "Depreciation Method";
        DeprStartingDate := "Depreciation Starting Date";
        DeprEndingDate := "Depreciation Ending Date";
        DeprTableCode := "Depreciation Table Code";
        FirstUserDefinedDeprDate := "First User-Defined Depr. Date";
        IF ("Depreciation Method" = "Depreciation Method"::"User-Defined") AND
           (FirstUserDefinedDeprDate > DeprStartingDate)
        THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("First User-Defined Depr. Date"),FIELDCAPTION("Depreciation Starting Date"));
        SLPercent := "Straight-Line %";
        DBPercent := "Declining-Balance %";
        AddDeprApplicable := CheckAddedDeprApplicable(FADeprBook,UntilDate,FA."Add. Depr. Applicable");
        IF AddDeprApplicable THEN BEGIN
          FABlock.TESTFIELD("Add. Depreciation %");
          DBPercent += FABlock."Add. Depreciation %";
          SLPercent += FABlock."Add. Depreciation %";
        END;
        IF CheckDeprRedApllicable(FADeprBook,DeprBook."Depr. Threshold Days",UntilDate) THEN BEGIN
          DeprBook.TESTFIELD("Depr. Reduction %");
          DBPercent -= (DBPercent * DeprBook."Depr. Reduction %" / 100);
          SLPercent -= (SLPercent * DeprBook."Depr. Reduction %" / 100);
        END;
        DeprYears := "No. of Depreciation Years";
        IF "Depreciation Ending Date" > 0D THEN BEGIN
          IF  "Depreciation Starting Date" > "Depreciation Ending Date" THEN
            ERROR(
              Text003,
              FAName,FIELDCAPTION("Depreciation Starting Date"),FIELDCAPTION("Depreciation Ending Date"));
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",FALSE) / 360;
        END;
        FixedAmount := "Fixed Depr. Amount";
        FinalRoundingAmount := "Final Rounding Amount";
        IF FinalRoundingAmount = 0 THEN
          FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
        EndingBookValue := "Ending Book Value";
        IF NOT "Ignore Def. Ending Book Value" AND (EndingBookValue = 0) THEN
          EndingBookValue := DeprBook."Default Ending Book Value";
        AcquisitionDate := "Acquisition Date";
        DisposalDate := "Disposal Date";
        PercentBelowZero := "Depr. below Zero %";
        // AmountBelowZero := "Fixed Depr. Amount below Zero";
        // DaysInFiscalYear := DeprBook."No. of Days in Fiscal Year";
        // IF DaysInFiscalYear = 0 THEN
        // DaysInFiscalYear := 360;
        DaysInFiscalYear := CheckDaysInFiscalYear("Depreciation Book Code");
        IF Year365Days THEN BEGIN
          DepriciationBook.GET("Depreciation Book Code");
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",TRUE) / DaysInFiscalYear;
        END;
      END;
    END;

    LOCAL PROCEDURE FAName@5() : Text[200];
    VAR
      DepreciationCalc@1000 : Codeunit 5616;
    BEGIN
      EXIT(DepreciationCalc.FAName(FA,DeprBookCode));
    END;

    LOCAL PROCEDURE SetHalfYearConventionMethod@7() : Boolean;
    VAR
      AccountingPeriod@1000 : Record 50;
    BEGIN
      IF NOT FADeprBook."Use Half-Year Convention" THEN
        EXIT(FALSE);
      IF FADeprBook."Depreciation Method" = FADeprBook."Depreciation Method"::Manual THEN
        EXIT(FALSE);
      IF DeprMethod = DeprMethod::BelowZero THEN
        EXIT(FALSE);

      AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriod.SETFILTER(
        "Starting Date",'>=%1',
        DepreciationCalc.ToMorrow(FADeprBook."Depreciation Starting Date",Year365Days));
      AccountingPeriod.FINDFIRST;
      NewYearDate := AccountingPeriod."Starting Date";
      IF FirstDeprDate >= NewYearDate THEN
        EXIT(FALSE);

      IF DeprBook."No. of Days in Fiscal Year" <> 0 THEN
        DeprBook.TESTFIELD("No. of Days in Fiscal Year",360);
      IF DeprMethod IN
         [DeprMethod::DB2,
          DeprMethod::DB2SL,
          DeprMethod::"User-Defined"]
      THEN
        ERROR(
          Text004,
          FADeprBook.FIELDCAPTION("Depreciation Method"),
          FADeprBook."Depreciation Method",
          FAName);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcHalfYearConventionDepr@21() : Decimal;
    VAR
      DeprAmount@1000 : Decimal;
      HalfYearPercent@1001 : Decimal;
      HalfYearFactor@1002 : Decimal;
      OriginalNumberOfDays@1003 : Integer;
      OriginalBookValue@1004 : Decimal;
      OriginalFirstDeprDate@1005 : Date;
    BEGIN
      IF CalcTempDeprAmount(TempDeprAmount) THEN
        ERROR('');

      IF (DeprMethod = DeprMethod::DB1) OR (DeprMethod = DeprMethod::DB1SL) THEN
        HalfYearPercent := DBPercent
      ELSE
        IF SLPercent > 0 THEN
          HalfYearPercent := SLPercent
        ELSE
          IF DeprYears > 0 THEN
            HalfYearPercent :=
              100 /
              (DepreciationCalc.DeprDays(NewYearDate,FADeprBook."Depreciation Ending Date",Year365Days) +
               DaysInFiscalYear / 2) * DaysInFiscalYear
          ELSE
            HalfYearPercent := 0;

      HalfYearFactor :=
        DaysInFiscalYear / 2 /
        DepreciationCalc.DeprDays(
          FADeprBook."Depreciation Starting Date",
          DepreciationCalc.Yesterday(NewYearDate,Year365Days),
          Year365Days);
      DeprInTwoFiscalYears := UntilDate >= NewYearDate;

      OriginalNumberOfDays := NumberOfDays;
      OriginalBookValue := BookValue;
      OriginalFirstDeprDate := FirstDeprDate;

      IF DeprInTwoFiscalYears THEN
        NumberOfDays :=
          DepreciationCalc.DeprDays(
            FirstDeprDate,DepreciationCalc.Yesterday(NewYearDate,Year365Days),Year365Days);
      IF FixedAmount > 0 THEN
        DeprAmount := -FixedAmount * NumberOfDays / DaysInFiscalYear * HalfYearFactor
      ELSE
        DeprAmount :=
          (-HalfYearPercent / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis * HalfYearFactor;
      IF DeprInTwoFiscalYears THEN BEGIN
        NumberOfDays := DepreciationCalc.DeprDays(NewYearDate,UntilDate,Year365Days);
        FirstDeprDate := NewYearDate;
        BookValue := BookValue + DeprAmount;
        CASE DeprMethod OF
          DeprMethod::StraightLine:
            DeprAmount := DeprAmount + CalcSLAmount;
          DeprMethod::DB1:
            DeprAmount := DeprAmount + CalcDB1Amount;
          DeprMethod::DB1SL:
            DeprAmount := DeprAmount + CalcDBSLAmount;
        END;
      END;
      NumberOfDays := OriginalNumberOfDays;
      BookValue := OriginalBookValue;
      FirstDeprDate := OriginalFirstDeprDate;
      DeprInTwoFiscalYears := FALSE;
      EXIT(DeprAmount);
    END;

    LOCAL PROCEDURE TransferValuesShift@1500000();
    VAR
      DepriciationBook@1500000 : Record 5611;
    BEGIN
      WITH FAShift DO BEGIN
        TESTFIELD("Depreciation Starting Date");
        IF "Depreciation Method" = "Depreciation Method"::"User-Defined" THEN BEGIN
          TESTFIELD("Depreciation Table Code");
          TESTFIELD("First User-Defined Depr. Date");
        END;
        CASE "Depreciation Method" OF
          "Depreciation Method"::"Declining-Balance 1",
          "Depreciation Method"::"Declining-Balance 2",
          "Depreciation Method"::"DB1/SL",
          "Depreciation Method"::"DB2/SL":
            IF "Declining-Balance %" >= 100 THEN
              ERROR(Text001,FAName,FIELDCAPTION("Declining-Balance %"));
        END;
        IF (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Depr. Entry") AND
           ("Depreciation Method" <> "Depreciation Method"::"Straight-Line")
        THEN BEGIN
          "Depreciation Method" := "Depreciation Method"::"Straight-Line";
          ERROR(
            Text002,
            FAName,
            FIELDCAPTION("Depreciation Method"),
            "Depreciation Method",
            DeprBook.TABLECAPTION,
            DeprBook.FIELDCAPTION("Periodic Depr. Date Calc."),
            DeprBook."Periodic Depr. Date Calc.");
        END;
        IF DateFromProjection = 0D THEN BEGIN
          CALCFIELDS("Book Value");
          BookValue := "Book Value";
        END ELSE
          BookValue := EntryAmounts[1];
        MinusBookValue := DepreciationCalc.GetMinusBookValue(FA."No.",DeprBookCode,0D,0D);
        CALCFIELDS("Depreciable Basis","Salvage Value");
        DeprBasis := "Depreciable Basis";
        SalvageValue := "Salvage Value";
        BookValue2 := BookValue;
        SalvageValue2 := SalvageValue;
        DeprMethod := "Depreciation Method";
        DeprStartingDate := "Depreciation Starting Date";
        DeprTableCode := "Depreciation Table Code";
        FirstUserDefinedDeprDate := "First User-Defined Depr. Date";
        IF ("Depreciation Method" = "Depreciation Method"::"User-Defined") AND
           (FirstUserDefinedDeprDate > DeprStartingDate)
        THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("First User-Defined Depr. Date"),FIELDCAPTION("Depreciation Starting Date"));
        SLPercent := "Straight-Line %";
        DBPercent := "Declining-Balance %";
        DeprYears := "No. of Depreciation Years";
        IF "Depreciation Ending Date" > 0D THEN BEGIN
          IF  "Depreciation Starting Date" > "Depreciation Ending Date" THEN
            ERROR(
              Text003,
              FAName,FIELDCAPTION("Depreciation Starting Date"),FIELDCAPTION("Depreciation Ending Date"));
          DeprYears :=
            DepreciationCalc.DeprDays("Depreciation Starting Date","Depreciation Ending Date",TRUE) / 360; // to be checked...?
        END;
        FixedAmount := "Fixed Depr. Amount";
        FinalRoundingAmount := "Final Rounding Amount";
        IF FinalRoundingAmount = 0 THEN
          FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
        EndingBookValue := "Ending Book Value";
        IF EndingBookValue = 0 THEN
          EndingBookValue := DeprBook."Default Ending Book Value";
        AcquisitionDate := "Acquisition Date";
        DisposalDate := "Disposal Date";
        PercentBelowZero := "Depr. below Zero %";
        AmountBelowZero := "Fixed Depr. Amount below Zero";
        DaysInFiscalYear := DeprBook."No. of Days in Fiscal Year";
        IF DaysInFiscalYear = 0 THEN
          DaysInFiscalYear := CheckDaysInFiscalYear("Depreciation Book Code");
        IF Year365Days THEN BEGIN
          DepriciationBook.GET("Depreciation Book Code");
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",TRUE) / DaysInFiscalYear;
        END;
      END;
    END;

    PROCEDURE CheckDaysInFiscalYear@1500002(DeprBookCode2@1500000 : Code[10]) : Integer;
    VAR
      DepriciationBook@1500001 : Record 5611;
      FADateCalc@1500002 : Codeunit 5617;
    BEGIN
      DepriciationBook.GET(DeprBookCode2);
      IF DepriciationBook."FA Book Type" = DepriciationBook."FA Book Type"::"Income Tax" THEN BEGIN
        IF FADateCalc.GetFiscalYearStartDateInc(UntilDate) =
           FADateCalc.GetFiscalYearStartDateInc(FADeprBook."Depreciation Starting Date")
        THEN
          EXIT(
            FADateCalc.GetFiscalYearEndDateInc(FADeprBook."Depreciation Starting Date") -
            FADeprBook."Depreciation Starting Date" + 1);

        EXIT(FADateCalc.GetDaysInFiscalYearInc(UntilDate));
      END;
      IF DepriciationBook."No. of Days in Fiscal Year" <> 0 THEN
        EXIT(DepriciationBook."No. of Days in Fiscal Year");
      Year365Days := DeprBook."Fiscal Year 365 Days";
      IF Year365Days THEN
        EXIT(FADateCalc.GetDaysInFiscalYear(UntilDate));
      EXIT(360);
    END;

    LOCAL PROCEDURE CalcNumberOfDays@1500007();
    BEGIN
      IF FAShiftLineNo = 0 THEN
        NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days)
      ELSE BEGIN
        IF (FAShift."Used No. of Days" <> 0) AND (UntilDate >= FirstDeprDate) THEN
          NumberOfDays := FAShift."Used No. of Days";
        IF FAShift."Used No. of Days" = 0 THEN
          NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
      END;
      IF DeprBook."FA Book Type" = DeprBook."FA Book Type"::"Income Tax" THEN
        NumberOfDays := DepreciationCalc.DeprDays2(FirstDeprDate,UntilDate);
    END;

    LOCAL PROCEDURE UpdateDaysInFiscalYear@1500001();
    BEGIN
      IF (DeprBook."FA Book Type" = DeprBook."FA Book Type"::"Income Tax") OR (FAShiftLineNo = 0) THEN
        EXIT;
      IF FAShift."Industry Type" = FAShift."Industry Type"::"Non Seasonal" THEN BEGIN
        DeprBook.TESTFIELD("No. of Days Non Seasonal");
        IF NumberOfDays <= DeprBook."No. of Days Non Seasonal" THEN
          DaysInFiscalYear := DeprBook."No. of Days Non Seasonal";
      END;
      IF FAShift."Industry Type" = FAShift."Industry Type"::Seasonal THEN BEGIN
        DeprBook.TESTFIELD("No. of Days Seasonal");
        IF NumberOfDays <= DeprBook."No. of Days Seasonal" THEN
          DaysInFiscalYear := DeprBook."No. of Days Seasonal";
      END;
    END;

    PROCEDURE CheckFiscalYearForIncTax@1500008(TillDate@1500001 : Date);
    VAR
      AccountingPeriodIncTax@1500000 : Record 16519;
    BEGIN
      AccountingPeriodIncTax.RESET;
      AccountingPeriodIncTax.SETRANGE(Closed,FALSE);
      IF AccountingPeriodIncTax.FIND('-') THEN
        REPEAT
          IF TillDate < AccountingPeriodIncTax."Starting Date" THEN
            EXIT;
        UNTIL AccountingPeriodIncTax.NEXT = 0;
      ERROR(Text16500);
    END;

    PROCEDURE CheckAddedDeprApplicable@1500009(FADeprBook@1500002 : Record 5612;TillDate@1500003 : Date;AddedDeprApplicable@1500006 : Boolean) : Boolean;
    VAR
      FADateCalc@1500001 : Codeunit 5617;
    BEGIN
      WITH FADeprBook DO BEGIN
        IF "FA Book Type" <> "FA Book Type"::"Income Tax" THEN
          EXIT(FALSE);
        EXIT(
          (FADateCalc.GetFiscalYearStartDateInc("Depreciation Starting Date") =
           FADateCalc.GetFiscalYearStartDateInc(TillDate)) AND
          CheckDisposal("FA No.","Depreciation Book Code") AND
          AddedDeprApplicable);
      END;
    END;

    PROCEDURE CheckDeprRedApllicable@1500010(FADepBook@1500004 : Record 5612;ThresholdDays@1500002 : Integer;TillDate@1500006 : Date) : Boolean;
    VAR
      FADateCalc@1500005 : Codeunit 5617;
      FAPostingDate@1500001 : Date;
      FiscalYearStartDate@1500000 : Date;
      ReferenceDate@1500003 : Date;
    BEGIN
      WITH FADepBook DO BEGIN
        IF "FA Book Type" <> "FA Book Type"::"Income Tax" THEN
          EXIT(FALSE);
        FilterFALedger("FA No.","Depreciation Book Code",TRUE);
        FALedgEntry2.SETRANGE("FA Posting Type",FALedgEntry."FA Posting Type"::"Acquisition Cost");
        IF FALedgEntry2.FINDFIRST THEN
          FAPostingDate := FALedgEntry2."FA Posting Date"
        ELSE
          EXIT(FALSE);
        FiscalYearStartDate := FADateCalc.GetFiscalYearStartDateInc("Depreciation Starting Date");
        ReferenceDate := FiscalYearStartDate + ThresholdDays;
        EXIT(
          ("Depreciation Starting Date" > ReferenceDate) AND
          (FiscalYearStartDate = FADateCalc.GetFiscalYearStartDateInc(FAPostingDate)) AND
          ("FA Book Type" = "FA Book Type"::"Income Tax") AND
          (FiscalYearStartDate = FADateCalc.GetFiscalYearStartDateInc(TillDate)));
      END;
    END;

    PROCEDURE CheckDisposal@1500003(FANo@1500001 : Code[20];DeprBookCode@1500002 : Code[20]) : Boolean;
    VAR
      FALedgerEntry@1500000 : Record 5601;
    BEGIN
      FALedgerEntry.RESET;
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.SETRANGE("Depreciation Book Code",DeprBookCode);
      FALedgerEntry.SETRANGE("FA Posting Category",FALedgerEntry."FA Posting Category"::Disposal);
      EXIT(NOT FALedgerEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE FilterFALedger@1500012(FANo@1500001 : Code[20];DeprBookCode2@1500002 : Code[10];IncludeGainLoss@1500000 : Boolean);
    BEGIN
      FALedgEntry2.RESET;
      FALedgEntry2.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type","Posting Date");
      FALedgEntry2.SETRANGE("FA No.",FANo);
      FALedgEntry2.SETRANGE("Depreciation Book Code",DeprBookCode2);
      FALedgEntry2.SETRANGE("FA Posting Category",FALedgEntry2."FA Posting Category"::" ");
      IF IncludeGainLoss THEN
        FALedgEntry2.SETRANGE("FA Posting Type",FALedgEntry2."FA Posting Type"::"Gain/Loss")
      ELSE
        FALedgEntry2.SETFILTER("FA Posting Type",'<>%1',FALedgEntry2."FA Posting Type"::"Gain/Loss");
    END;

    PROCEDURE SetFAShiftLineNo@1500013(LineNo@1500000 : Integer);
    BEGIN
      CLEARALL;
      FAShiftLineNo := LineNo;
    END;

    PROCEDURE CalculateRetro@1500004(VAR DeprAmount@1000 : Decimal;VAR NumberOfDays4@1001 : Integer;UntilDate2@1004 : Date;EntryAmounts2@1005 : ARRAY [4] OF Decimal;DateFromProjection2@1006 : Date;DaysInPeriod2@1007 : Integer;FARetrospectiveBook@1500001 : Record 16528;FALedgerEntry@1500000 : Record 5601;SLPercentRetro@1500003 : Decimal;DBPercentRetro@1500004 : Decimal);
    VAR
      i@1500002 : Integer;
    BEGIN
      IF FAShiftLineNo = 0 THEN
        CLEARALL;

      FALedgEntryRetro := FALedgerEntry;
      FARetrospectiveBookRetro := FARetrospectiveBook;
      SLPercent := SLPercentRetro;
      DBPercent := DBPercentRetro;
      DeprAmount := 0;
      NumberOfDays4 := 0;
      FANo := FALedgEntryRetro."FA No.";
      DeprBookCode := FARetrospectiveBookRetro."Depreciation Book Code";
      FA.GET(FANo);
      DeprBook.GET(DeprBookCode);

      IF FAShiftLineNo = 0 THEN BEGIN
        IF NOT FADeprBook.GET(FANo,DeprBookCode) THEN
          EXIT;
      END ELSE
        FALedgerEntry.TESTFIELD("Shift Entry",TRUE);

      UntilDate := UntilDate2;

      FOR i := 1 TO 4 DO
        EntryAmounts[i] := EntryAmounts2[i];
      DateFromProjection := DateFromProjection2;
      DaysInPeriod := DaysInPeriod2;

      FALedgEntry.LOCKTABLE;
      WITH DeprBook DO
        IF DaysInPeriod > 0 THEN
          IF "Periodic Depr. Date Calc." <> "Periodic Depr. Date Calc."::"Last Entry" THEN BEGIN
            "Periodic Depr. Date Calc." := "Periodic Depr. Date Calc."::"Last Entry";
            ERROR(
              Text000,
              TABLECAPTION,FIELDCAPTION("Periodic Depr. Date Calc."),"Periodic Depr. Date Calc.");
          END;

      TransferValuesRetro;

      Sign := 1;
      IF (NOT FALedgEntryRetro."Shift Entry") AND FALedgEntryRetro."Use FA Ledger Check" THEN BEGIN
        Sign := DepreciationCalc.GetSign(BookValue,DeprBasis,SalvageValue,MinusBookValue);
        IF Sign = 0 THEN
          EXIT;
        IF Sign = -1 THEN
          DepreciationCalc.GetNewSigns(BookValue,DeprBasis,SalvageValue,MinusBookValue);
      END;

      IF BookValue + SalvageValue <= 0 THEN
        SkipOnZero := TRUE;
      IF (SalvageValue >= 0) AND (BookValue <= EndingBookValue) THEN
        SkipOnZero := TRUE;

      IF NOT (SkipOnZero AND NOT DeprBook."Allow Depr. below Zero" AND NOT DeprBook."Use FA Ledger Check") THEN
        BEGIN
        IF SkipOnZero AND (DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax") THEN
          DeprMethod := DeprMethod::BelowZero;
        DeprAmount := Sign * CalculateDeprAmountRetro;
        IF (Sign * DeprAmount > 0) AND (DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax") THEN
          DeprAmount := 0;
        NumberOfDays4 := NumberOfDays2;
      END;
    END;

    LOCAL PROCEDURE CalculateDeprAmountRetro@1500005() : Decimal;
    VAR
      Amount@1000 : Decimal;
    BEGIN
      WITH FA DO BEGIN
        IF NOT FALedgEntryRetro."Shift Entry" THEN BEGIN
          IF DateFromProjection > 0D THEN
            FirstDeprDate := DateFromProjection
          ELSE BEGIN
            FirstDeprDate := DepreciationCalc.GetFirstDeprDateRetro("No.",DeprBookCode,Year365Days,DeprMethod);
            IF FirstDeprDate > UntilDate THEN
              EXIT(0);
          END;
          IF FirstDeprDate < DeprStartingDate THEN
            FirstDeprDate := DeprStartingDate;
        END ELSE
          FirstDeprDate := FALedgEntryRetro."Depreciation Starting Date";

        CalcNumberOfDaysRetro;
        Factor := 1;
        IF NumberOfDays <= 0 THEN
          EXIT(0);
        IF DaysInPeriod > 0 THEN BEGIN
          Factor := DaysInPeriod / NumberOfDays;
          NumberOfDays := DaysInPeriod;
        END;
        IF FALedgEntryRetro."Shift Type" <> FALedgEntryRetro."Shift Type"::Single THEN
          UpdateDaysInFiscalYearRetro;
        // Method Last Entry
        IF UseDeprStartingDate OR
           (DateFromProjection > 0D) OR
           (DeprMethod = DeprMethod::BelowZero) OR
           (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Entry")
        THEN BEGIN
          NumberOfDays2 := NumberOfDays;
          IF UseHalfYearConvention THEN
            Amount := CalcHalfYearConventionDepr
          ELSE
            CASE DeprMethod OF
              DeprMethod::StraightLine:
                Amount := CalcSLAmountRetro;
              DeprMethod::DB1:
                Amount := CalcDB1AmountRetro;
              DeprMethod::DB2:
                Amount := CalcDB2AmountRetro;
              DeprMethod::DB1SL,
              DeprMethod::DB2SL:
                Amount := CalcDBSLAmountRetro;
              DeprMethod::Manual:
                Amount := 0;
              DeprMethod::"User-Defined":
                Amount := CalcUserDefinedAmountRetro(UntilDate);
              DeprMethod::BelowZero:
                Amount := CalcBelowZeroAmountRetro;
            END;
        END
          // Method Last Depreciation Entry
        ELSE BEGIN
          IF UseHalfYearConvention THEN
            DeprBook.TESTFIELD(
              "Periodic Depr. Date Calc.",DeprBook."Periodic Depr. Date Calc."::"Last Entry");
          Amount := 0;
          StartingDate := 0D;
          EndingDate := 0D;
          DepreciationCalc.GetDeprPeriod(
            "No.",DeprBookCode,UntilDate,StartingDate,EndingDate,NumberOfDays,Year365Days);
          FirstDeprDate := StartingDate;
          NumberOfDays2 := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
          WHILE NumberOfDays > 0 DO BEGIN
            DepreciationCalc.CalculateDeprInPeriod(
              "No.",DeprBookCode,EndingDate,Amount,Sign,
              BookValue,DeprBasis,SalvageValue,MinusBookValue);
            IF DepreciationCalc.GetSign(
                 BookValue,DeprBasis,SalvageValue,MinusBookValue) <> 1
            THEN
              EXIT(0);
            CASE DeprMethod OF
              DeprMethod::StraightLine:
                Amount := Amount + CalcSLAmountRetro;
              DeprMethod::DB1:
                Amount := Amount + CalcDB1AmountRetro;
              DeprMethod::DB2:
                Amount := Amount + CalcDB2AmountRetro;
              DeprMethod::Manual:
                Amount := 0;
              DeprMethod::"User-Defined":
                Amount := Amount + CalcUserDefinedAmountRetro(EndingDate);
            END;
            DepreciationCalc.GetDeprPeriod(
              "No.",DeprBookCode,UntilDate,StartingDate,EndingDate,NumberOfDays,Year365Days);
            FirstDeprDate := StartingDate;
          END;
        END;
      END;
      IF (Amount >= 0) AND (DeprBook."FA Book Type" <> DeprBook."FA Book Type"::"Income Tax") THEN
        EXIT(0);
      IF NOT SkipOnZero THEN
        DepreciationCalc.AdjustDepr(
          DeprBookCode,Amount,ABS(BookValue2),-ABS(SalvageValue2),
          EndingBookValue,FinalRoundingAmount);
      EXIT(ROUND(Amount));
    END;

    LOCAL PROCEDURE TransferValuesRetro@1500006();
    VAR
      DepriciationBook@1500000 : Record 5611;
    BEGIN
      WITH FARetrospectiveBookRetro DO BEGIN
        IF "Proposed Depreciation Method" = "Proposed Depreciation Method"::"User-Defined" THEN BEGIN
          TESTFIELD("Retrospective Table Code");
          TESTFIELD("First User-Defined Depr. Date");
        END;
        CASE "Proposed Depreciation Method" OF
          "Proposed Depreciation Method"::"Declining-Balance 1",
          "Proposed Depreciation Method"::"Declining-Balance 2",
          "Proposed Depreciation Method"::"DB1/SL",
          "Proposed Depreciation Method"::"DB2/SL":
            IF "Proposed Declining-Balance %" >= 100 THEN
              ERROR(Text001,FAName,FIELDCAPTION("Proposed Declining-Balance %"));
        END;
        IF (DeprBook."Periodic Depr. Date Calc." = DeprBook."Periodic Depr. Date Calc."::"Last Depr. Entry") AND
           ("Proposed Depreciation Method" <> "Proposed Depreciation Method"::"Straight-Line")
        THEN BEGIN
          "Proposed Depreciation Method" :=
            "Proposed Depreciation Method"::"Straight-Line";
          ERROR(
            Text002,
            FAName,
            FIELDCAPTION("Proposed Depreciation Method"),
            "Proposed Depreciation Method",
            TABLECAPTION,
            DeprBook.FIELDCAPTION("Periodic Depr. Date Calc."),
            DeprBook."Periodic Depr. Date Calc.");
        END;

        IF FALedgEntryRetro."Shift Entry" THEN
          CalcShiftRetroBookvalues(BookValue,DeprBasis,SalvageValue)
        ELSE
          CalcRetroBookvalues(BookValue,DeprBasis,SalvageValue);

        IF DateFromProjection = 0D THEN
          BookValue := BookValue
        ELSE
          BookValue := EntryAmounts[1];

        MinusBookValue := DepreciationCalc.GetMinusBookValueRetro(FA."No.",
            DeprBookCode,0D,0D,"Proposed Depreciation Method");
        BookValue2 := BookValue;
        SalvageValue2 := SalvageValue;
        DeprMethod := "Proposed Depreciation Method";
        DeprTableCode := "Retrospective Table Code";
        DeprStartingDate := FALedgEntryRetro."Depreciation Starting Date";
        FirstUserDefinedDeprDate := "First User-Defined Depr. Date";
        IF ("Proposed Depreciation Method" = "Proposed Depreciation Method"::"User-Defined") AND
           (FirstUserDefinedDeprDate > DeprStartingDate)
        THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("First User-Defined Depr. Date"),FIELDCAPTION("Depreciation Starting Date"));

        DeprYears := "No. of Depreciation Years";

        IF "Depreciation Ending Date" > 0D THEN BEGIN
          IF  "Depreciation Starting Date" > "Depreciation Ending Date" THEN
            ERROR(
              Text003,
              FAName,FIELDCAPTION("Depreciation Starting Date"),FIELDCAPTION(Description));
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",FALSE) / 360;
        END;
        IF DeprYears = 0 THEN
          DeprYears := FALedgEntryRetro."No. of Depreciation Years";

        FixedAmount := "Fixed Depr. Amount";
        IF FinalRoundingAmount = 0 THEN
          FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
        DaysInFiscalYear := CheckDaysInFiscalYear("Depreciation Book Code");
        IF Year365Days THEN BEGIN
          DepriciationBook.GET("Depreciation Book Code");
          DeprYears :=
            DepreciationCalc.DeprDays(
              "Depreciation Starting Date","Depreciation Ending Date",TRUE) / DaysInFiscalYear;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcSLAmountRetro@1500021() : Decimal;
    VAR
      RemainingLife@1000 : Decimal;
    BEGIN
      IF SLPercent > 0 THEN
        EXIT((-SLPercent / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis);

      IF FixedAmount > 0 THEN
        EXIT(-FixedAmount * NumberOfDays / DaysInFiscalYear);

      IF DeprYears > 0 THEN BEGIN
        IF DeprBook."Fiscal Year 365 Days" THEN
          RemainingLife := (DeprEndingDate - DeprStartingDate) - (FirstDeprDate - DeprStartingDate) + 1
        ELSE
          RemainingLife :=
            (DeprYears * DaysInFiscalYear) -
            DepreciationCalc.DeprDays(
              DeprStartingDate,DepreciationCalc.Yesterday(FirstDeprDate,Year365Days),Year365Days);
        IF RemainingLife < 1 THEN
          EXIT(-BookValue);

        EXIT(-(BookValue + SalvageValue - MinusBookValue) * NumberOfDays / RemainingLife);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE CalcDB1AmountRetro@1500020() : Decimal;
    VAR
      DeprInFiscalYear@1000 : Decimal;
    BEGIN
      IF DateFromProjection = 0D THEN
        IF NOT FALedgEntryRetro."Shift Entry" THEN
          DeprInFiscalYear := DepreciationCalc.DeprInFiscalYearRetro(FA."No.",DeprBookCode,UntilDate,DeprMethod)
        ELSE
          DeprInFiscalYear := EntryAmounts[3];
      IF DeprInTwoFiscalYears THEN
        DeprInFiscalYear := 0;
      EXIT(
        -(DBPercent / 100) * (NumberOfDays / DaysInFiscalYear) *
        (BookValue - MinusBookValue - Sign * DeprInFiscalYear));
    END;

    PROCEDURE CalcDB2AmountRetro@1500019() : Decimal;
    BEGIN
      EXIT(
        -(1 - POWER(1 - DBPercent / 100,NumberOfDays / DaysInFiscalYear)) *
        (BookValue - MinusBookValue));
    END;

    PROCEDURE CalcDBSLAmountRetro@1500018() : Decimal;
    VAR
      FADateCalc@1002 : Codeunit 5617;
      SLAmount@1000 : Decimal;
      DBAmount@1001 : Decimal;
    BEGIN
      IF DeprMethod = DeprMethod::DB1SL THEN
        DBAmount := CalcDB1AmountRetro
      ELSE
        DBAmount := CalcDB2AmountRetro;
      IF FARetrospectiveBookRetro."Use DB% First Fiscal Year" THEN
        IF FADateCalc.GetFiscalYear(DeprBookCode,UntilDate) =
           FADateCalc.GetFiscalYear(DeprBookCode,FALedgEntryRetro."Depreciation Starting Date")
        THEN
          EXIT(DBAmount);
      SLAmount := CalcSLAmountRetro;
      IF SLAmount < DBAmount THEN
        EXIT(SLAmount);

      EXIT(DBAmount)
    END;

    LOCAL PROCEDURE CalcUserDefinedAmountRetro@1500016(EndingDate@1000 : Date) : Decimal;
    VAR
      TableDeprCalc@1001 : Codeunit 5618;
    BEGIN
      EXIT(
        -TableDeprCalc.GetTablePercent(DeprBook.Code,DeprTableCode,
          FirstUserDefinedDeprDate,FirstDeprDate,EndingDate) *
        DeprBasis * Factor);
    END;

    LOCAL PROCEDURE CalcBelowZeroAmountRetro@1500015() : Decimal;
    BEGIN
      IF PercentBelowZero > 0 THEN
        EXIT((-PercentBelowZero / 100) * (NumberOfDays / DaysInFiscalYear) * DeprBasis);
      IF AmountBelowZero > 0 THEN
        EXIT(-AmountBelowZero * NumberOfDays / DaysInFiscalYear);
      EXIT(0);
    END;

    PROCEDURE CalcRetroBookvalues@1500023(VAR BookValue@1500001 : Decimal;VAR DeprBasis@1500002 : Decimal;VAR SalvageValue@1500003 : Decimal);
    VAR
      RetroEntry@1500000 : Record 16526;
    BEGIN
      RetroEntry.RESET;
      RetroEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Book Value","Depreciation Calc Date",
        "Proposed Depreciation Method","Part of Depreciable Basis");
      RetroEntry.SETRANGE("FA No.",FA."No.");
      RetroEntry.SETRANGE("Depreciation Book Code",FARetrospectiveBookRetro."Depreciation Book Code");
      RetroEntry.SETRANGE("Part of Book Value",TRUE);
      RetroEntry.SETRANGE("Proposed Depreciation Method",FARetrospectiveBookRetro."Proposed Depreciation Method");
      RetroEntry.CALCSUMS("Proposed Depreciation Amount");
      BookValue := RetroEntry."Proposed Depreciation Amount";
      RetroEntry.SETRANGE("Part of Book Value");
      RetroEntry.SETRANGE("Part of Depreciable Basis",TRUE);
      RetroEntry.CALCSUMS("Proposed Depreciation Amount");
      DeprBasis := RetroEntry."Proposed Depreciation Amount";
      RetroEntry.SETRANGE("Part of Book Value");
      RetroEntry.SETRANGE("Part of Depreciable Basis");
      RetroEntry.SETRANGE("FA Posting Type",RetroEntry."FA Posting Type"::"Salvage Value");
      RetroEntry.CALCSUMS("Proposed Depreciation Amount");
      SalvageValue := RetroEntry."Proposed Depreciation Amount";
    END;

    LOCAL PROCEDURE CalcNumberOfDaysRetro@1500027();
    BEGIN
      IF FAShiftLineNo = 0 THEN
        NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days)
      ELSE BEGIN
        IF (FALedgEntryRetro."No. of Depreciation Days" <> 0) AND (UntilDate >= FirstDeprDate) THEN
          NumberOfDays := FALedgEntryRetro."No. of Depreciation Days";
        IF FALedgEntryRetro."No. of Depreciation Days" = 0 THEN
          NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,Year365Days);
      END;
    END;

    LOCAL PROCEDURE UpdateDaysInFiscalYearRetro@1500017();
    BEGIN
      IF (DeprBook."FA Book Type" = DeprBook."FA Book Type"::"Income Tax") OR (NOT FALedgEntryRetro."Shift Entry") THEN
        EXIT;
      IF FALedgEntryRetro."Industry Type" <> FALedgEntryRetro."Industry Type"::Normal THEN
        DaysInFiscalYear := FALedgEntryRetro."No. of Days for Shift";
    END;

    PROCEDURE CalcShiftRetroBookvalues@1500011(VAR BookValue@1500001 : Decimal;VAR DeprBasis@1500002 : Decimal;VAR SalvageValue@1500003 : Decimal);
    VAR
      RetroEntry@1500000 : Record 16526;
    BEGIN
      RetroEntry.RESET;
      RetroEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Book Value","Depreciation Calc Date",
        "Proposed Depreciation Method","Part of Depreciable Basis");
      RetroEntry.SETRANGE("FA No.",FA."No.");
      RetroEntry.SETRANGE("Depreciation Book Code",FARetrospectiveBookRetro."Depreciation Book Code");
      RetroEntry.SETRANGE("Part of Book Value",TRUE);
      RetroEntry.SETRANGE("Proposed Depreciation Method",FARetrospectiveBookRetro."Proposed Depreciation Method");
      RetroEntry.SETFILTER("Depreciation Calc Date",'<%1',FALedgEntryRetro."FA Posting Date");
      RetroEntry.CALCSUMS("Proposed Depreciation Amount");
      BookValue := RetroEntry."Proposed Depreciation Amount";
      RetroEntry.SETRANGE("Part of Book Value");
      RetroEntry.SETRANGE("Part of Depreciable Basis",TRUE);
      RetroEntry.CALCSUMS("Proposed Depreciation Amount");
      RetroEntry.SETFILTER("Depreciation Calc Date",'<%1',FALedgEntryRetro."FA Posting Date");
      DeprBasis := RetroEntry."Proposed Depreciation Amount";
      RetroEntry.SETRANGE("Part of Depreciable Basis");
      RetroEntry.SETRANGE("FA Posting Type",RetroEntry."FA Posting Type"::"Salvage Value");
      RetroEntry.CALCSUMS("Proposed Depreciation Amount");
      RetroEntry.SETFILTER("Depreciation Calc Date",'<%1',FALedgEntryRetro."FA Posting Date");
      SalvageValue := RetroEntry."Proposed Depreciation Amount";
    END;

    BEGIN
    END.
  }
}

