OBJECT Codeunit 131002 Library - Report Validation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ColumnNotFoundError@1000 : TextConst 'ENU=Column %1 not found in report.';
      RowNotFoundForColumnValueError@1001 : TextConst 'ENU=Row not found for Column %1 and Value %2 in report.';
      ValueNotFoundError@1003 : TextConst 'ENU=Value not found.';
      Assert@1024 : Codeunit 130000;
      FileMgt@1015 : Codeunit 419;
      FileNameTo@1004 : Text;
      FileOpened@1005 : Boolean;
      FilterColumnCaption@1007 : Text[250];
      FilterColumnValue@1006 : Text[250];
      FullFileName@1017 : Text;
      ColumnCaption@1008 : Text[250];
      RowNumber@1002 : Integer;
      RowNotFoundError@1010 : TextConst 'ENU=No rows exist within the specified filter.';
      FixedColumnNo@1011 : Integer;
      WorksheetCount@1012 : Integer;
      IncorrectValueInCellErr@1014 : TextConst '@@@=%1 - row % 2 - column;ENU=Incorrect value in cell R%1 C%2';

    PROCEDURE OpenFile@9();
    VAR
      FilePath@1001 : Text;
    BEGIN
      FilePath := GetFileName;
      OpenFileAsExcel(FilePath);
      FileOpened := TRUE;
    END;

    PROCEDURE OpenExcelFile@41();
    VAR
      FilePath@1001 : Text;
    BEGIN
      FilePath := GetFileName;
      OpenFileAsExcel(FilePath);
      FileOpened := TRUE;
    END;

    LOCAL PROCEDURE OpenFileAsExcel@1(FilePath@1000 : Text);
    BEGIN
      OpenBookAsExcel(FilePath);
    END;

    PROCEDURE CheckIfValueExists@18(ColumnValue@1000 : Text) : Boolean;
    VAR
      ExcelBuffer@1001 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      FilterExcelBuffer(ExcelBuffer,ColumnValue);
      EXIT(ExcelBuffer.FINDFIRST);
    END;

    PROCEDURE CheckIfDecimalValueExists@39(Value@1000 : Decimal) : Boolean;
    BEGIN
      EXIT(CheckIfValueExists(FormatDecimalValue(Value)));
    END;

    PROCEDURE CheckIfValueExistsInSpecifiedColumn@25(Column@1000 : Text[250];ColumnValue@1001 : Text[250]) : Boolean;
    VAR
      ExcelBuffer@1002 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETRANGE(xlColID,Column);
      ExcelBuffer.SETRANGE("Cell Value as Text",ColumnValue);

      EXIT(ExcelBuffer.FINDFIRST);
    END;

    PROCEDURE CheckIfValueExistsOnSpecifiedWorksheet@29(WorksheetNo@1001 : Integer;ColumnValue@1000 : Text[250]) : Boolean;
    VAR
      ExcelBuffer@1002 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETRANGE(Comment,FORMAT(WorksheetNo));
      ExcelBuffer.SETRANGE("Cell Value as Text",ColumnValue);

      EXIT(ExcelBuffer.FINDFIRST);
    END;

    PROCEDURE CountDistinctRows@8(VAR ExcelBuffer@1000 : Record 370) : Integer;
    VAR
      TempExcelBuffer@1002 : TEMPORARY Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      IF ExcelBuffer.FINDSET THEN
        REPEAT
          TempExcelBuffer.INIT;
          TempExcelBuffer."Row No." := ExcelBuffer."Row No.";
          IF TempExcelBuffer.INSERT THEN;
        UNTIL ExcelBuffer.NEXT = 0;
      EXIT(TempExcelBuffer.COUNT);
    END;

    PROCEDURE CountRowsBetweenColumnCaptions@5(ColumnCaptionFrom@1000 : Text[250];ColumnCaptionTo@1001 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1002 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETFILTER(
        "Row No.",'>%1 & <%2',FindRowNoFromColumnCaption(ColumnCaptionFrom),FindRowNoFromColumnCaption(ColumnCaptionTo));
      EXIT(CountDistinctRows(ExcelBuffer));
    END;

    PROCEDURE CountRows@7() : Integer;
    VAR
      ExcelBuffer@1002 : Record 370;
    BEGIN
      // Count the number of rows for where a given Column has the value specified.
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETRANGE("Column No.",FindColumnNoFromColumnCaption(FilterColumnCaption));
      ExcelBuffer.SETRANGE("Cell Value as Text",FilterColumnValue);
      EXIT(CountDistinctRows(ExcelBuffer));
    END;

    PROCEDURE CountColumns@19() : Integer;
    VAR
      ExcelBuffer@1002 : Record 370;
      TempExcelBuffer@1000 : TEMPORARY Record 370;
    BEGIN
      // Count the number of Columns.
      IF NOT FileOpened THEN
        OpenFile;

      IF ExcelBuffer.FINDSET THEN
        REPEAT
          TempExcelBuffer.INIT;
          TempExcelBuffer."Column No." := ExcelBuffer."Column No.";
          IF TempExcelBuffer.INSERT THEN;
        UNTIL ExcelBuffer.NEXT = 0;
      EXIT(TempExcelBuffer.COUNT);
    END;

    PROCEDURE CountWorksheets@26() : Integer;
    BEGIN
      // Count the number of Worksheets.
      IF NOT FileOpened THEN
        OpenFile;

      EXIT(WorksheetCount);
    END;

    PROCEDURE DownloadFile@40();
    BEGIN
      SetFullFileName(GetFileName);
    END;

    LOCAL PROCEDURE FilterExcelBuffer@44(VAR ExcelBuffer@1000 : Record 370;ColumnCaption@1001 : Text);
    BEGIN
      ExcelBuffer.SETRANGE("Cell Value as Text",ColumnCaption);
    END;

    PROCEDURE FindColumnNoFromColumnCaption@4(ColumnCaption@1000 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1001 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      IF FixedColumnNo <> 0 THEN
        EXIT(FixedColumnNo);

      FilterExcelBuffer(ExcelBuffer,ColumnCaption);
      IF ExcelBuffer.FINDFIRST THEN
        EXIT(ExcelBuffer."Column No.");
      ERROR(STRSUBSTNO(ColumnNotFoundError,ColumnCaption));
    END;

    PROCEDURE FindFirstColumnNoByValue@104(Value@1000 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1001 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      IF FixedColumnNo <> 0 THEN
        EXIT(FixedColumnNo);

      ExcelBuffer.SETRANGE("Cell Value as Text",Value);
      IF ExcelBuffer.FINDFIRST THEN
        EXIT(ExcelBuffer."Column No.");
      ERROR(STRSUBSTNO(ColumnNotFoundError,Value));
    END;

    PROCEDURE FindRowNoFromColumnCaption@6(ColumnCaption@1000 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1001 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      FilterExcelBuffer(ExcelBuffer,ColumnCaption);
      IF ExcelBuffer.FINDFIRST THEN
        EXIT(ExcelBuffer."Row No.");
      ERROR(STRSUBSTNO(ColumnNotFoundError,ColumnCaption));
    END;

    PROCEDURE FindRowNoFromColumnNoAndValue@3(ColumnNo@1000 : Integer;ColumnValue@1001 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1002 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETRANGE("Column No.",ColumnNo);
      ExcelBuffer.SETRANGE("Cell Value as Text",ColumnValue);
      IF ExcelBuffer.FINDFIRST THEN
        EXIT(ExcelBuffer."Row No.");
      ERROR(STRSUBSTNO(RowNotFoundForColumnValueError,ColumnNo,ColumnValue));
    END;

    PROCEDURE FindColumnNoFromColumnCaptionInsideArea@27(ColumnCaption@1000 : Text[250];FilterRowNo@1003 : Text[250];FilterColumnNo@1002 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1001 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      IF FixedColumnNo <> 0 THEN
        EXIT(FixedColumnNo);

      ExcelBuffer.SETFILTER("Row No.",FilterRowNo);
      ExcelBuffer.SETFILTER("Column No.",FilterColumnNo);
      FilterExcelBuffer(ExcelBuffer,ColumnCaption);
      IF ExcelBuffer.FINDFIRST THEN
        EXIT(ExcelBuffer."Column No.");
      ERROR(STRSUBSTNO(ColumnNotFoundError,ColumnCaption));
    END;

    PROCEDURE FindRowNoFromColumnNoAndValueInsideArea@31(ColumnNo@1000 : Integer;ColumnValue@1001 : Text[250];FilterRowNo@1004 : Text[250]) : Integer;
    VAR
      ExcelBuffer@1002 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETFILTER("Row No.",FilterRowNo);
      ExcelBuffer.SETRANGE("Column No.",ColumnNo);
      ExcelBuffer.SETRANGE("Cell Value as Text",ColumnValue);
      IF ExcelBuffer.FINDFIRST THEN
        EXIT(ExcelBuffer."Row No.");
      ERROR(STRSUBSTNO(RowNotFoundForColumnValueError,ColumnNo,ColumnValue));
    END;

    PROCEDURE FindFirstRow@20(VAR RowValueSet@1000 : ARRAY [50] OF Text[250]);
    VAR
      ExcelBuffer@1003 : Record 370;
      ExcelBuffer2@1001 : Record 370;
      Counter@1002 : Integer;
    BEGIN
      // Retrieve the first row.
      IF NOT FileOpened THEN
        OpenFile;

      Counter := 1;
      IF FilterColumnCaption <> '' THEN BEGIN
        ExcelBuffer.SETRANGE("Column No.",FindColumnNoFromColumnCaption(FilterColumnCaption));
        ExcelBuffer.SETRANGE("Cell Value as Text",FilterColumnValue);
      END;
      IF ExcelBuffer.FINDFIRST THEN BEGIN
        ExcelBuffer2.SETRANGE("Row No.",ExcelBuffer."Row No.");
        IF ExcelBuffer2.FINDSET THEN
          REPEAT
            RowValueSet[Counter] := ExcelBuffer2."Cell Value as Text";
            Counter += 1;
          UNTIL ExcelBuffer2.NEXT = 0;
        RowNumber := ExcelBuffer."Row No.";
      END;
      IF Counter = 1 THEN
        ERROR(RowNotFoundError);
    END;

    PROCEDURE FindNextRow@22(VAR RowValueSet@1000 : ARRAY [50] OF Text[250]);
    VAR
      ExcelBuffer@1003 : Record 370;
      ExcelBuffer2@1001 : Record 370;
      Counter@1002 : Integer;
    BEGIN
      // Retrieve the next row.
      IF NOT FileOpened THEN
        OpenFile;

      Counter := 1;
      IF FilterColumnCaption <> '' THEN BEGIN
        ExcelBuffer.SETRANGE("Column No.",FindColumnNoFromColumnCaption(FilterColumnCaption));
        ExcelBuffer.SETRANGE("Cell Value as Text",FilterColumnValue);
      END;

      ExcelBuffer.SETFILTER("Row No.",'>%1',RowNumber);
      IF ExcelBuffer.FINDFIRST THEN BEGIN
        ExcelBuffer2.SETRANGE("Row No.",ExcelBuffer."Row No.");
        IF ExcelBuffer2.FINDSET THEN
          REPEAT
            RowValueSet[Counter] := ExcelBuffer2."Cell Value as Text";
            Counter += 1;
          UNTIL ExcelBuffer2.NEXT = 0;
        RowNumber := ExcelBuffer."Row No.";
      END;
      IF Counter = 1 THEN
        ERROR(RowNotFoundError);
    END;

    PROCEDURE FindSet@15(VAR ColumnValueSet@1000 : ARRAY [250] OF Text[250]);
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      // Retrieve all the values in a Column where another given Column has the value specified.
      IF NOT FileOpened THEN
        OpenFile;

      IF FilterColumnCaption <> '' THEN BEGIN
        ExcelBuffer.SETRANGE("Column No.",FindColumnNoFromColumnCaption(FilterColumnCaption));
        ExcelBuffer.SETRANGE("Cell Value as Text",FilterColumnValue);
      END;

      FindSetByFilters(ExcelBuffer,FindColumnNoFromColumnCaption(ColumnCaption),ColumnValueSet);
    END;

    PROCEDURE FindSetByColumnNo@125(ColumnNo@1001 : Integer;VAR ColumnValueSet@1000 : ARRAY [250] OF Text[250]);
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETRANGE("Column No.",ColumnNo);
      FindSetByFilters(ExcelBuffer,ColumnNo,ColumnValueSet);
    END;

    LOCAL PROCEDURE FindSetByFilters@115(VAR ExcelBuffer@1003 : Record 370;ColumnNo@1001 : Integer;VAR ColumnValueSet@1000 : ARRAY [250] OF Text[250]);
    VAR
      ExcelBuffer2@1004 : Record 370;
      Counter@1002 : Integer;
    BEGIN
      Counter := 1;
      IF ExcelBuffer.FINDSET THEN
        REPEAT
          IF ExcelBuffer2.GET(ExcelBuffer."Row No.",ColumnNo) THEN
            ColumnValueSet[Counter] := ExcelBuffer2."Cell Value as Text"
          ELSE
            ColumnValueSet[Counter] := '';
          Counter += 1;
        UNTIL ExcelBuffer.NEXT = 0;
      IF Counter = 1 THEN
        ERROR(ValueNotFoundError);
    END;

    PROCEDURE FormatDecimalValue@37(Value@1000 : Decimal) : Text;
    BEGIN
      EXIT(FORMAT(Value,0,GetDefaultDecimalFormat));
    END;

    LOCAL PROCEDURE GetDefaultDecimalFormat@48() : Text;
    BEGIN
      EXIT('<Precision,0:2><Standard Format,1>');
    END;

    PROCEDURE GetFileName@11() : Text[1024];
    BEGIN
      IF FullFileName = '' THEN
        EXIT(TEMPORARYPATH + FileNameTo + '.xlsx');
      EXIT(FullFileName);
    END;

    PROCEDURE GetValue@2() : Text[250];
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      // Retrieve the value of a Column where another given Column has the value specified.
      // Throws an error if the cell doesnt contain a value
      // To check whether a cell contains a value or not, use function IsEmptyCell()

      IF NOT FileOpened THEN
        OpenFile;

      IF ExcelBuffer.GET(
           FindRowNoFromColumnNoAndValue(FindColumnNoFromColumnCaption(FilterColumnCaption),FilterColumnValue),
           FindColumnNoFromColumnCaption(ColumnCaption))
      THEN
        EXIT(ExcelBuffer."Cell Value as Text");

      ERROR(ValueNotFoundError);
    END;

    PROCEDURE GetValue2@30(VAR FoundValue@1005 : Boolean;FilterRowNo@1004 : Text[250];FilterColumnNo@1002 : Text[250]) : Text[250];
    VAR
      ExcelBuffer@1003 : Record 370;
      ColumnNo@1000 : Integer;
      RowNo@1001 : Integer;
    BEGIN
      // Retrieve the value of a Column where another given Column has the value specified.

      IF NOT FileOpened THEN
        OpenFile;

      ColumnNo := FindColumnNoFromColumnCaptionInsideArea(ColumnCaption,FilterRowNo,FilterColumnNo);
      RowNo := FindRowNoFromColumnNoAndValueInsideArea(FindColumnNoFromColumnCaptionInsideArea(
            FilterColumnCaption,FilterRowNo,FilterColumnNo),FilterColumnValue,FilterRowNo);

      FoundValue := TRUE;
      IF ExcelBuffer.GET(RowNo,ColumnNo)
      THEN
        EXIT(ExcelBuffer."Cell Value as Text");

      FoundValue := FALSE;
      EXIT('');
    END;

    PROCEDURE GetValueAt@28(VAR FoundValue@1005 : Boolean;RowNo@1004 : Integer;ColumnNo@1002 : Integer) : Text[250];
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      // Retrieve the value of a Column where another given Column has the value specified.
      // Throws an error if the cell doesnt contain a value
      // To check whether a cell contains a value or not, use function IsEmptyCell()

      IF NOT FileOpened THEN
        OpenFile;

      FoundValue := TRUE;
      IF ExcelBuffer.GET(RowNo,ColumnNo)
      THEN
        EXIT(ExcelBuffer."Cell Value as Text");

      FoundValue := FALSE;
      EXIT('');
    END;

    PROCEDURE GetValueAtFromWorksheet@34(RowNo@1004 : Integer;ColumnNo@1002 : Integer;Worksheet@1006 : Text) : Text[250];
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      // Retrieve the value of a Column from a specific worksheet where another given Column has the value specified.
      // Throws an error if the cell doesnt contain a value
      // To check whether a cell contains a value or not, use function IsEmptyCell()

      IF NOT FileOpened THEN
        OpenFile;

      IF ExcelBuffer.GET(RowNo,ColumnNo) AND (ExcelBuffer.Comment = Worksheet)
      THEN
        EXIT(ExcelBuffer."Cell Value as Text");

      EXIT('');
    END;

    PROCEDURE GetValueFromSpecifiedCellOnWorksheet@38(WorksheetNo@1000 : Integer;RowId@1001 : Integer;ColumnId@1002 : Integer) : Text;
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      // Checks the value in specified cell within specified worksheet (note the function requires row number within worksheet not report).
      IF NOT FileOpened THEN
        OpenFile;

      IF WorksheetNo > 1 THEN BEGIN
        ExcelBuffer.SETRANGE(Comment,FORMAT(WorksheetNo - 1));
        ExcelBuffer.FINDLAST;
        IF ExcelBuffer."Row No." > 0 THEN
          RowId += ExcelBuffer."Row No." - 1;
      END;

      ExcelBuffer.GET(RowId,ColumnId);
      EXIT(ExcelBuffer."Cell Value as Text");
    END;

    PROCEDURE GetValueByRef@59(ColumnName@1000 : Text;RowNo@1004 : Integer;WorksheetNo@1001 : Integer) : Text;
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      ExcelBuffer.SETRANGE(xlColID,ColumnName);
      ExcelBuffer.SETRANGE(xlRowID,FORMAT(RowNo));
      ExcelBuffer.SETRANGE(Comment,FORMAT(WorksheetNo));
      ExcelBuffer.FINDFIRST;

      EXIT(ExcelBuffer."Cell Value as Text");
    END;

    PROCEDURE IsEmptyCell@21() : Boolean;
    VAR
      ExcelBuffer@1000 : Record 370;
    BEGIN
      // Returns true if a cell, specified by SetRange and SetColumn, is empty,
      // otherwise false.

      IF NOT FileOpened THEN
        OpenFile;

      EXIT(
        NOT ExcelBuffer.GET(FindRowNoFromColumnNoAndValue(FindColumnNoFromColumnCaption(FilterColumnCaption),FilterColumnValue),
          FindColumnNoFromColumnCaption(ColumnCaption)));
    END;

    PROCEDURE SetFixedColumn@24(Index@1000 : Integer);
    BEGIN
      FixedColumnNo := Index;
    END;

    PROCEDURE SetColumn@13(ColumnCaptionFrom@1000 : Text[250]);
    BEGIN
      FixedColumnNo := 0;
      ColumnCaption := ColumnCaptionFrom;
    END;

    PROCEDURE SetFileName@10(FileNameFrom@1000 : Text);
    BEGIN
      FileNameTo := FileNameFrom;
      FullFileName := '';
      FileOpened := FALSE; // Force reopen of Excel file
    END;

    PROCEDURE SetFullFileName@32(NewFullFileName@1000 : Text);
    BEGIN
      FullFileName := NewFullFileName;
      FileNameTo := '';
      FileOpened := FALSE; // Force reopen of Excel file
    END;

    PROCEDURE SetRange@12(FilterColumnCaptionFrom@1001 : Text[250];FilterColumnValueFrom@1000 : Text[250]);
    BEGIN
      FilterColumnCaption := FilterColumnCaptionFrom;
      FilterColumnValue := FilterColumnValueFrom;
    END;

    PROCEDURE OpenBookAsExcel@33(ClientFileName@1000 : Text);
    VAR
      ExcelBuffer@1005 : Record 370;
      WorkbookReader@1001 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      WorksheetReader@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      CellData@1008 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";
      SheetNames@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      SheetIndex@1004 : Integer;
      RowIndex@1012 : Integer;
      RowOffset@1007 : Integer;
      ColumnIndex@1011 : Integer;
      ValueMaxLength@1010 : Integer;
      Value@1003 : Text[1024];
    BEGIN
      FileMgt.ServerFileExists(ClientFileName);

      ExcelBuffer.DELETEALL;

      WorkbookReader := WorkbookReader.Open(ClientFileName,FALSE);

      ValueMaxLength := MAXSTRLEN(Value);
      SheetNames := WorkbookReader.SheetNames;
      WorksheetCount := SheetNames.Length;
      SheetIndex := 0;
      RowOffset := 0;
      WHILE SheetIndex < WorksheetCount DO BEGIN
        WorksheetReader := WorkbookReader.GetWorksheetByName(SheetNames.GetValue(SheetIndex));
        FOREACH CellData IN WorksheetReader DO BEGIN
          RowIndex := CellData.RowNumber;
          ColumnIndex := CellData.ColumnNumber;
          Value := COPYSTR(CellData.Value,1,ValueMaxLength);
          InsertIntoExcelBuffer(RowIndex + RowOffset,ColumnIndex,Value,SheetIndex + 1);
        END;
        RowOffset += RowIndex; // WorksheetReader.RowCount; Excel may have skipped rows in a sheet, so RowCount would be less than RowIndex
        SheetIndex += 1;
      END;
    END;

    LOCAL PROCEDURE InsertIntoExcelBuffer@23(Row@1000 : Integer;Column@1001 : Integer;InputString@1002 : Text[1024];WorksheetNo@1004 : Integer);
    VAR
      ExcelBuffer@1003 : Record 370;
    BEGIN
      InputString := DELCHR(InputString,'<>'); // Trim spaces
      InputString := DELCHR(InputString,'<>','"'); // Trim quotes
      IF STRLEN(InputString) = 0 THEN
        EXIT;

      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",Row);
      ExcelBuffer.VALIDATE("Column No.",Column);
      ExcelBuffer.VALIDATE("Cell Value as Text",COPYSTR(InputString,1,250));
      ExcelBuffer.VALIDATE(Comment,FORMAT(WorksheetNo)); // Using Comment field to store Worksheet No. since Excel Buffer table doesn't have a field for this purpose
      ExcelBuffer.INSERT(TRUE);
    END;

    PROCEDURE VerifyCellValue@36(RowId@1000 : Integer;ColumnId@1001 : Integer;ExpectedValue@1002 : Text);
    VAR
      ValueFound@1003 : Boolean;
    BEGIN
      Assert.AreEqual(
        DELCHR(ExpectedValue,'<>'),GetValueAt(ValueFound,RowId,ColumnId),
        STRSUBSTNO(IncorrectValueInCellErr,RowId,ColumnId));
    END;

    PROCEDURE VerifyCellValueOnWorksheet@35(RowId@1000 : Integer;ColumnId@1001 : Integer;ExpectedValue@1002 : Text;Worksheet@1004 : Text);
    BEGIN
      Assert.AreEqual(
        DELCHR(ExpectedValue,'<>'),GetValueAtFromWorksheet(RowId,ColumnId,Worksheet),
        STRSUBSTNO(IncorrectValueInCellErr,RowId,ColumnId));
    END;

    PROCEDURE VerifyCellValueByRef@132(ColumnName@1000 : Text;RowNo@1001 : Integer;WorksheetNo@1002 : Integer;ExpectedValue@1003 : Text);
    VAR
      Value@1004 : Text;
    BEGIN
      Value := GetValueByRef(ColumnName,RowNo,WorksheetNo);
      Assert.AreEqual(
        DELCHR(ExpectedValue,'<>'),
        Value,
        STRSUBSTNO(IncorrectValueInCellErr,ColumnName,RowNo));
    END;

    PROCEDURE VerifyEmptyCellByRef@14(ColumnName@1003 : Text;RowNo@1002 : Integer;WorksheetNo@1001 : Integer);
    VAR
      DummyExcelBuffer@1000 : Record 370;
    BEGIN
      IF NOT FileOpened THEN
        OpenFile;

      DummyExcelBuffer.SETRANGE(xlColID,ColumnName);
      DummyExcelBuffer.SETRANGE(xlRowID,FORMAT(RowNo));
      DummyExcelBuffer.SETRANGE(Comment,FORMAT(WorksheetNo));
      Assert.RecordIsEmpty(DummyExcelBuffer);
    END;

    BEGIN
    {
      // Contains all functions related to report Validation.
    }
    END.
  }
}

