OBJECT Codeunit 137224 TransfOrder Whse Validate Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryWarehouse@1001 : Codeunit 132204;
      LibraryInventory@1007 : Codeunit 132201;
      LibraryUtility@1003 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      ErrFieldMustNotBeChanged@1004 : TextConst 'ENU=%1 must not be changed when a %2 for this %3 exists';
      ErrStatusMustBeOpen@1006 : TextConst 'ENU=Status must be equal to ''Open''  in %1';
      ErrCannotBeDeleted@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists';
      UnexpectedMessage@1005 : TextConst 'ENU=Unexpected message: "%1". Expected: "%2"';

    LOCAL PROCEDURE Initialize@25();
    VAR
      WarehouseSetup@1001 : Record 5769;
      TransferReceivablesSetup@1002 : Record 311;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      DisableWarnings;

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      TransferReceivablesSetup.GET;
      TransferReceivablesSetup."Order Nos." := LibraryUtility.GetGlobalNoSeriesCode;
      TransferReceivablesSetup.MODIFY(TRUE);

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ReleasedTransferOrderVariantCo@1();
    BEGIN
      TransferOrderVariantCodChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenTransferOrderVariantCodCha@114();
    BEGIN
      TransferOrderVariantCodChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedTransferOrderQtyChange@10();
    BEGIN
      TransferOrderQtyChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenTransferOrderQtyChange@17();
    BEGIN
      TransferOrderQtyChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedTransferOrderUOMChange@14();
    BEGIN
      TransferOrderUOMChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenTransferOrderUOMChange@11();
    BEGIN
      TransferOrderUOMChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedTransferOrderDelLines@19();
    VAR
      TransferHeader@1002 : Record 5740;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      ExpectedErrorMessage := STRSUBSTNO(ErrStatusMustBeOpen,TransferHeader.TABLECAPTION);

      TransferOrderDelLines(FALSE,ExpectedErrorMessage);
    END;

    [Test]
    PROCEDURE OpenTransferOrderDelLines@18();
    VAR
      TransferLine@1001 : Record 5741;
      WhseShptLine@1005 : Record 7321;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      ExpectedErrorMessage := STRSUBSTNO(ErrCannotBeDeleted,
          TransferLine.TABLECAPTION,WhseShptLine.TABLECAPTION);

      TransferOrderDelLines(TRUE,ExpectedErrorMessage);
    END;

    LOCAL PROCEDURE LocationSetup@2(VAR Location@1000 : Record 14);
    VAR
      Bin@1003 : Record 7354;
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      // Skip validate trigger for bin mandatory to improve performance.
      Location."Bin Mandatory" := TRUE;
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(
        Bin,
        Location.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),
        '',
        '');

      Bin.VALIDATE(Dedicated,TRUE);
      Bin.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE DisableWarnings@8();
    VAR
      TransferReceivablesSetup@1000 : Record 311;
    BEGIN
      TransferReceivablesSetup.GET;
      TransferReceivablesSetup.VALIDATE("Credit Warnings",TransferReceivablesSetup."Credit Warnings"::"No Warning");
      TransferReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      TransferReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@31(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;Item@1002 : Record 27;FromLocationCode@1003 : Code[10];ToLocationCode@1019 : Code[10];IntransitCode@1012 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,IntransitCode);
      // One of the test cases will try to update quantity to "original - 1" so it is important to have quantity at least 2
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",RANDOM(10) + 2);
    END;

    LOCAL PROCEDURE TestTransferOrderSetup@33(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;VAR Item@1002 : Record 27;VAR ToLocation@1003 : Record 14);
    VAR
      FromLocationCode@1004 : Code[10];
      IntransitLocationCode@1005 : Code[10];
    BEGIN
      LocationSetup(ToLocation);

      LibraryInventory.CreateItem(Item);
      CreateAndUpdateLocIntransit(FromLocationCode,IntransitLocationCode);

      CreateTransferOrder(TransferHeader,TransferLine,Item,ToLocation.Code,FromLocationCode,IntransitLocationCode);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
    END;

    LOCAL PROCEDURE TransferOrderFieldChange@39(Reopen@1007 : Boolean;TransferHeader@1001 : Record 5740;TransferLine@1002 : Record 5741;FieldNo@1004 : Integer;Value@1003 : Variant);
    VAR
      WhseShptLine@1011 : Record 7321;
      ReleaseTransferDoc@1006 : Codeunit 5708;
      FieldRef@1009 : FieldRef;
      RecRef@1010 : RecordRef;
      ExpectedErrorMessage@1000 : Text[1024];
    BEGIN
      RecRef.GETTABLE(TransferLine);
      FieldRef := RecRef.FIELD(FieldNo);

      IF Reopen THEN BEGIN
        ReleaseTransferDoc.Reopen(TransferHeader);
        TransferLine.SETRANGE("Document No.",TransferHeader."No.");
        TransferLine.FINDFIRST;
      END;

      ExpectedErrorMessage := STRSUBSTNO(ErrFieldMustNotBeChanged,
          FieldRef.NAME,WhseShptLine.TABLECAPTION,TransferLine.TABLECAPTION);

      ASSERTERROR UpdateTransferLine(TransferLine,FieldNo,Value);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE TransferOrderDelLines@181(Reopen@1008 : Boolean;ExpectedErrorMessage@1009 : Text[1024]);
    VAR
      Item@1000 : Record 27;
      TransferLine@1001 : Record 5741;
      TransferHeader@1002 : Record 5740;
      Location@1003 : Record 14;
      ReleaseTransferDoc@1006 : Codeunit 5708;
    BEGIN
      Initialize;
      TestTransferOrderSetup(TransferHeader,TransferLine,Item,Location);

      IF Reopen THEN BEGIN
        ReleaseTransferDoc.Reopen(TransferHeader);
        TransferLine.SETRANGE("Document No.",TransferHeader."No.");
        TransferLine.FINDFIRST;
      END;

      ASSERTERROR TransferLine.DELETEALL(TRUE);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE TransferOrderVariantCodChange@36(Reopen@1004 : Boolean);
    VAR
      TransferHeader@1009 : Record 5740;
      TransferLine@1001 : Record 5741;
      Location@1003 : Record 14;
      Item@1002 : Record 27;
      ItemVariant@1000 : Record 5401;
    BEGIN
      Initialize;
      TestTransferOrderSetup(TransferHeader,TransferLine,Item,Location);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      TransferOrderFieldChange(Reopen,TransferHeader,TransferLine,TransferLine.FIELDNO("Variant Code"),ItemVariant.Code);
    END;

    LOCAL PROCEDURE TransferOrderQtyChange@30(Reopen@1001 : Boolean);
    VAR
      TransferHeader@1006 : Record 5740;
      TransferLine@1003 : Record 5741;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestTransferOrderSetup(TransferHeader,TransferLine,Item,Location);

      TransferOrderFieldChange(Reopen,TransferHeader,TransferLine,TransferLine.FIELDNO(Quantity),TransferLine.Quantity - 1);
    END;

    LOCAL PROCEDURE TransferOrderUOMChange@29(Reopen@1004 : Boolean);
    VAR
      TransferHeader@1002 : Record 5740;
      TransferLine@1007 : Record 5741;
      Location@1001 : Record 14;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1005 : Record 5404;
    BEGIN
      Initialize;
      TestTransferOrderSetup(TransferHeader,TransferLine,Item,Location);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      TransferOrderFieldChange(Reopen,TransferHeader,TransferLine,TransferLine.FIELDNO("Unit of Measure Code"),ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocIntransit@120(VAR LocationCode2@1000 : Code[10];VAR LocationCode3@1001 : Code[10]);
    VAR
      WarehouseEmployee@1002 : Record 7301;
      Location2@1003 : Record 14;
    BEGIN
      // Create Location, Update Inventory Posting Setup And Intransit Location for Transfer .
      CreateAndUpdateLocation(Location2,TRUE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location2.Code,FALSE);
      LocationCode2 := Location2.Code;
      CreateAndUpdateLocation(Location2,FALSE,TRUE);
      LocationCode3 := Location2.Code;
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@84(VAR Location2@1000 : Record 14;RequireReceive@1001 : Boolean;UseAsInTransit@1002 : Boolean);
    BEGIN
      // Create Location.
      LibraryWarehouse.CreateLocation(Location2);
      Location2.VALIDATE("Require Receive",RequireReceive);
      Location2.VALIDATE("Use As In-Transit",UseAsInTransit);
      Location2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTransferLine@139(VAR TransferLine@1000 : Record 5741;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecRef.GETTABLE(TransferLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(TransferLine);
      TransferLine.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Transfer Order] [SCM]
      Testing Warehouse Validate Source Line functionality for Transfer Order
      by changing probable set of values and then validating by messages.

      NTF test case WI 57719.
    }
    END.
  }
}

