OBJECT Codeunit 134049 ERM Date Compression FA
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryDimension@1005 : Codeunit 131001;
      LibraryERM@1002 : Codeunit 131300;
      LibraryFixedAsset@1006 : Codeunit 131330;
      LibraryHumanResource@1008 : Codeunit 131901;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryFiscalYear@1007 : Codeunit 131302;
      LibraryRandom@1000 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      FARegisterErr@1011 : TextConst '@@@="%1 = Journal Batch Name";ENU=FA Register must be deleted for Journal Batch Name %1 .';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateLocalData;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressOpenFiscalYear@92();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      DateComprRegister@1002 : Record 87;
      FANo@1007 : Code[20];
    BEGIN
      // Test the Date Compression with open Accounting Period.

      // 1.Setup: Create and modify Fixed Asset, create General Journal Batch, create Generel Journal Line,
      // post the FA General Journal line.
      Initialize;
      FANo := CreateFixedAssetWithDimension;
      CreateGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLines(GenJournalLine,GenJournalBatch,FANo,GenJournalLine."FA Posting Type"::"Acquisition Cost");
      PostingDateInGenJournalLine(GenJournalLine,LibraryFiscalYear.GetFirstPostingDate(FALSE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Date Compress FA Ledger.
      ASSERTERROR
        RunDateCompressFALedger(
          FANo,LibraryFiscalYear.GetFirstPostingDate(FALSE),LibraryFiscalYear.GetFirstPostingDate(FALSE),
          DateComprRegister."Period Length"::Day);

      // 3.Verify: Verify the Error message.
      LibraryFiscalYear.VerifyDateCompressFALedgerError;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressClosedFiscalYear@87();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      DateComprRegister@1002 : Record 87;
      FANo@1007 : Code[20];
      Amount@1008 : Decimal;
    BEGIN
      // Test the Date Compression with closed Accounting Period.

      // 1.Setup: Create and modify Fixed Asset, create General Journal Batch, create Generel Journal Line,
      // post the FA General Journal line.
      Initialize;
      FANo := CreateFixedAssetWithDimension;
      CreateGenJournalBatch(GenJournalBatch);
      Amount := CreateGeneralJournalLines(GenJournalLine,GenJournalBatch,FANo,GenJournalLine."FA Posting Type"::"Acquisition Cost");
      PostingDateInGenJournalLine(GenJournalLine,LibraryFiscalYear.GetFirstPostingDate(TRUE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Date Compress FA Ledger.
      RunDateCompressFALedger(
        FANo,LibraryFiscalYear.GetFirstPostingDate(TRUE),LibraryFiscalYear.GetFirstPostingDate(TRUE),
        DateComprRegister."Period Length"::Day);

      // 3.Verify: Verify the FA Ledger Entry.
      VerifyAmountInFALedgerEntry(FANo,Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressMaintenanceLedger@3();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      DateComprRegister@1002 : Record 87;
      FANo@1007 : Code[20];
      Amount@1008 : Decimal;
    BEGIN
      // Test Date Compression with closed Accounting Period for Maintenance Ledger Entry.

      // 1. Setup: Create and modify Fixed Asset, create General Journal Batch, Create and Post General Journal Line with FA Posting
      // Type Maintenance.
      Initialize;
      FANo := CreateFixedAssetWithDimension;
      CreateGenJournalBatch(GenJournalBatch);
      Amount := CreateGeneralJournalLines(GenJournalLine,GenJournalBatch,FANo,GenJournalLine."FA Posting Type"::Maintenance);
      PostingDateInGenJournalLine(GenJournalLine,LibraryFiscalYear.GetFirstPostingDate(TRUE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Run the Date Compress Maintenance Ledger.
      RunDateCompressMaintenance(
        FANo,LibraryFiscalYear.GetFirstPostingDate(TRUE),WORKDATE,FALSE,FALSE,DateComprRegister."Period Length"::Month);

      // 3. Verify: Verify the Maintenance Ledger Entry.
      VerifyMaintenanceLedgerEntry(FANo,Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DeleteEmptyFARegisters@2();
    VAR
      GenJournalLine@1002 : Record 81;
      FARegister@1001 : Record 5617;
      DateComprRegister@1000 : Record 87;
    BEGIN
      // Test Delete Empty FA Registers functionality after running Date Compress FA Ledger.

      // 1. Setup: Create and post General Journal Lines with Account Type as Fixed Asset. Run Date Compress FA Ledger.
      Initialize;
      CreateAndPostGenJournalLines(GenJournalLine,GenJournalLine."FA Posting Type"::"Acquisition Cost");
      RunDateCompressFALedger(
        GenJournalLine."Account No.",LibraryFiscalYear.GetFirstPostingDate(TRUE),
        LibraryFiscalYear.GetLastPostingDate(TRUE),DateComprRegister."Period Length"::Year);
      FindFARegister(FARegister,GenJournalLine."Journal Batch Name");

      // 2. Exercise: Run Delete Empty FA Registers Report.
      RunDeleteEmptyFARegisters(FARegister);

      // 3. Verify: FA Register must be deleted after running the Delete Empty FA Registers Report.
      Assert.IsFalse(
        FindFARegister(FARegister,GenJournalLine."Journal Batch Name"),
        STRSUBSTNO(FARegisterErr,GenJournalLine."Journal Batch Name"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE EmptyFARegistersMaintenance@43();
    VAR
      GenJournalLine@1002 : Record 81;
      FARegister@1001 : Record 5617;
      DateComprRegister@1000 : Record 87;
    BEGIN
      // Test Delete Empty FA Registers functionality after running Date Compress Maintenance.

      // 1. Setup: Create and post General Journal Lines with Account Type as Fixed Asset. Run Date Compress Maintenance.
      Initialize;
      CreateAndPostGenJournalLines(GenJournalLine,GenJournalLine."FA Posting Type"::Maintenance);
      RunDateCompressMaintenance(
        GenJournalLine."Account No.",LibraryFiscalYear.GetFirstPostingDate(TRUE),LibraryFiscalYear.GetLastPostingDate(TRUE),
        TRUE,TRUE,DateComprRegister."Period Length"::Year);
      FindFARegister(FARegister,GenJournalLine."Journal Batch Name");

      // 2. Exercise: Run Delete Empty FA Registers Report.
      RunDeleteEmptyFARegisters(FARegister);

      // 3. Verify: FA Register must be deleted after running the Delete Empty FA Registers Report.
      Assert.IsFalse(
        FindFARegister(FARegister,GenJournalLine."Journal Batch Name"),
        STRSUBSTNO(FARegisterErr,GenJournalLine."Journal Batch Name"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressFixedAssetLedger@6();
    VAR
      GenJournalLine@1001 : Record 81;
      DateComprRegister@1000 : Record 87;
      LastFALedgerEntryNo@1003 : Integer;
    BEGIN
      // Test FA Ledger Entry exist or not after run Date Compress FA Ledger.

      // 1. Setup: Create and post General Journal Lines with Account Type as Fixed Asset.
      Initialize;
      LastFALedgerEntryNo := GetLastFALedgerEntryNo;
      CreateAndPostGenJournalLines(GenJournalLine,GenJournalLine."FA Posting Type"::"Acquisition Cost");

      // 2. Exercise: Run Date Compress FA Ledger.
      RunDateCompressFALedger(
        GenJournalLine."Account No.",LibraryFiscalYear.GetFirstPostingDate(TRUE),
        LibraryFiscalYear.GetLastPostingDate(TRUE),DateComprRegister."Period Length"::Year);

      // 3. Verify: FA Ledger Entry must exist.
      VerifyFALedgerEntryExists(LastFALedgerEntryNo,GenJournalLine."Account No.");
    END;

    LOCAL PROCEDURE AttachDimensionOnFixedAsset@52(VAR DimensionValue@1001 : Record 349;FANo@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      FindDimensionValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Fixed Asset",FANo,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLines@19(VAR GenJournalLine@1002 : Record 81;FAPostingType@1003 : Option);
    VAR
      GenJournalBatch@1001 : Record 232;
      FANo@1000 : Code[20];
    BEGIN
      FANo := CreateFixedAssetWithDimension;
      CreateGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,FANo,FAPostingType);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,FANo,FAPostingType);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateFixedAssetWithDimension@103() : Code[20];
    VAR
      DepreciationBook@1003 : Record 5611;
      DimensionValue@1002 : Record 349;
      FADepreciationBook@1001 : Record 5612;
      FixedAsset@1000 : Record 5600;
    BEGIN
      DepreciationBook.GET(LibraryFixedAsset.GetDefaultDeprBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
      UpdateFixedAsset(FixedAsset);
      AttachDimensionOnFixedAsset(DimensionValue,FixedAsset."No.");
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@56(VAR FADepreciationBook@1000 : Record 5612;No@1001 : Code[20];DepreciationBookCode@1002 : Code[10];FAPostingGroup@1003 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,No,DepreciationBookCode);
      UpdateDateFADepreciationBook(FADepreciationBook,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@12(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1002 : Record 232;AccountNo@1001 : Code[20];FAPostingType@1000 : Option);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",AccountNo,LibraryRandom.RandDec(1000,2));
      PostingSetupFAGLJournalLine(GenJournalLine,FAPostingType);
      GenJournalLine.VALIDATE(
        "Posting Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',LibraryFiscalYear.GetFirstPostingDate(TRUE)));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLines@14(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1004 : Record 232;AccountNo@1001 : Code[20];FAPostingType@1000 : Option) Amount : Decimal;
    VAR
      Counter@1002 : Integer;
    BEGIN
      // Use Random for creating multiple General Lines and Amount.
      FOR Counter := 1 TO LibraryRandom.RandInt(10) DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
          GenJournalLine."Account Type"::"Fixed Asset",AccountNo,LibraryRandom.RandDec(1000,2));
        Amount += GenJournalLine.Amount;
        PostingSetupFAGLJournalLine(GenJournalLine,FAPostingType);
      END;
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@16(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Assets);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);

      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE FindDimensionValue@41(VAR DimensionValue@1001 : Record 349);
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE FindFARegister@37(VAR FARegister@1000 : Record 5617;JournalBatchName@1001 : Code[10]) : Boolean;
    BEGIN
      FARegister.SETRANGE("Journal Batch Name",JournalBatchName);
      EXIT(FARegister.FINDSET);
    END;

    LOCAL PROCEDURE GetLastFALedgerEntryNo@9() : Integer;
    VAR
      FALedgerEntry@1000 : Record 5601;
    BEGIN
      FALedgerEntry.FINDLAST;
      EXIT(FALedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE PostingDateInGenJournalLine@94(VAR GenJournalLine@1000 : Record 81;PostingDate@1002 : Date);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine.FINDSET;
      REPEAT
        GenJournalLine.VALIDATE("Posting Date",PostingDate);
        GenJournalLine.MODIFY(TRUE);
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PostingSetupFAGLJournalLine@7(VAR GenJournalLine@1000 : Record 81;FAPostingType@1003 : Option);
    BEGIN
      GenJournalLine.VALIDATE(
        "Document No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Line",GenJournalLine.FIELDNO("Document No."))));
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunDateCompressFALedger@96(FANo@1000 : Code[20];StartingDate@1005 : Date;EndingDate@1004 : Date;PeriodLengthFrom@1003 : Option);
    VAR
      FALedgerEntry@1001 : Record 5601;
      DateCompressFALedger@1002 : Report 5696;
    BEGIN
      CLEAR(DateCompressFALedger);
      FALedgerEntry.SETRANGE("FA No.",FANo);
      DateCompressFALedger.SETTABLEVIEW(FALedgerEntry);
      DateCompressFALedger.SetRetainDocumentNo(FALSE);
      DateCompressFALedger.SetRetainIndexEntry(FALSE);
      DateCompressFALedger.InitializeRequest(StartingDate,EndingDate,PeriodLengthFrom,FANo,'');
      DateCompressFALedger.USEREQUESTPAGE(FALSE);
      DateCompressFALedger.RUN;
    END;

    LOCAL PROCEDURE RunDateCompressMaintenance@4(FANo@1000 : Code[20];StartingDate@1005 : Date;EndingDate@1004 : Date;RetainDocumentNo@1006 : Boolean;RetainIndexEntry@1007 : Boolean;PeriodLengthFrom@1003 : Option);
    VAR
      MaintenanceLedgerEntry@1001 : Record 5625;
      DateCompressMaintLedger@1002 : Report 5698;
    BEGIN
      CLEAR(DateCompressMaintLedger);
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      DateCompressMaintLedger.SETTABLEVIEW(MaintenanceLedgerEntry);
      DateCompressMaintLedger.SetRetainDocumentNo(RetainDocumentNo);
      DateCompressMaintLedger.SetRetainIndexEntry(RetainIndexEntry);
      DateCompressMaintLedger.InitializeRequest(StartingDate,EndingDate,PeriodLengthFrom,FANo,'');
      DateCompressMaintLedger.USEREQUESTPAGE(FALSE);
      DateCompressMaintLedger.RUN;
    END;

    LOCAL PROCEDURE RunDeleteEmptyFARegisters@27(VAR FARegister@1001 : Record 5617);
    VAR
      DeleteEmptyFARegisters@1000 : Report 5693;
    BEGIN
      CLEAR(DeleteEmptyFARegisters);
      DeleteEmptyFARegisters.SETTABLEVIEW(FARegister);
      DeleteEmptyFARegisters.USEREQUESTPAGE(FALSE);
      DeleteEmptyFARegisters.RUN;
    END;

    LOCAL PROCEDURE UpdateDateFADepreciationBook@48(VAR FADepreciationBook@1000 : Record 5612;DepreciationBookCode@1001 : Code[10]);
    BEGIN
      FADepreciationBook.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Random Number Generator for Ending date.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFixedAsset@93(VAR FixedAsset@1000 : Record 5600);
    VAR
      Employee@1001 : Record 5200;
      FAClass@1002 : Record 5607;
      FASubclass@1003 : Record 5608;
    BEGIN
      LibraryHumanResource.CreateEmployee(Employee);
      LibraryFixedAsset.FindFAClass(FAClass);
      LibraryFixedAsset.FindFASubclass(FASubclass);
      FixedAsset.VALIDATE("Responsible Employee",Employee."No.");
      FixedAsset.VALIDATE("FA Class Code",FAClass.Code);
      FixedAsset.VALIDATE("FA Subclass Code",FASubclass.Code);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAmountInFALedgerEntry@99(Description@1001 : Text[50];Amount@1002 : Decimal);
    VAR
      FALedgerEntry@1000 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE(Description,Description);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyFALedgerEntryExists@1(EntryNo@1001 : Integer;Description@1002 : Text[50]);
    VAR
      FALedgerEntry@1000 : Record 5601;
      SourceCodeSetup@1003 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      FALedgerEntry.SETFILTER("Entry No.",'>=%1',EntryNo);
      FALedgerEntry.SETRANGE("Source Code",SourceCodeSetup."Compress FA Ledger");
      FALedgerEntry.SETRANGE(Description,Description);
      FALedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyMaintenanceLedgerEntry@5(FANo@1001 : Code[20];Amount@1002 : Decimal);
    VAR
      MaintenanceLedgerEntry@1000 : Record 5625;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      MaintenanceLedgerEntry.FINDFIRST;
      MaintenanceLedgerEntry.TESTFIELD(Description,FANo);
      MaintenanceLedgerEntry.TESTFIELD(Amount,Amount);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@74(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Date Compression] [Fixed Asset]
      Unsupported version tags:
      ES: Unable to Execute

      Test the Dimension on Fixed Asset.
       1. Test the Date Compression without closing the Accounting Period.
       2. Test the Date Compression with closed Accounting Period.
       3. Test Date Compression with closed Accounting Period for Maintenance Ledger Entry.
       4. Test Delete Empty FA Registers functionality after running Date Compress FA Ledger.
       5. Test Delete Empty FA Registers functionality after running Date Compress Maintenance.
       6. Test FA Ledger Entry exist or not after run Date Compress FA Ledger.

      TFS_TS_ID = 206075
      Covers Test cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      DateCompressOpenFiscalYear, DateCompressClosedFiscalYear                                         141390

      TFS_TS_ID = 217007
      Covers Test cases:
      -------------------------------------------
      Test Function Name                  TFS ID
      -------------------------------------------
      DateCompressMaintenanceLedger       129080

      TFS_TS_ID = 259683
      Covers Test cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      DeleteEmptyFARegisters,EmptyFARegistersMaintenance                                               129076

      TFS_TS_ID = 260108
      Covers Test cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      DateCompressFixedAssetLedger                                                                     129078
    }
    END.
  }
}

