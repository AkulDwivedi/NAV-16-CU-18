OBJECT Codeunit 136135 Service Order Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ServiceLine2@1004 : Record 5902;
      LibraryPurchase@1020 : Codeunit 130512;
      LibraryManufacturing@1019 : Codeunit 132202;
      LibraryService@1003 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1016 : Codeunit 132201;
      LibrarySales@1015 : Codeunit 130509;
      Assert@1001 : Codeunit 130000;
      LibraryWarehouse@1022 : Codeunit 132204;
      LibraryVariableStorage@1023 : Codeunit 131004;
      IsInitialized@1000 : Boolean;
      ItemNo2@1005 : Code[20];
      GlobalItemNo@1017 : Code[20];
      ExtendedText2@1006 : Text[50];
      Comment@1008 : Text[80];
      CopyComponentsFrom@1010 : 'None,Item BOM,Old Service Item,Old Service Item w/o Serial No.';
      Replacement@1009 : 'Temporary,Permanent';
      PostedServiceShipmentCaption@1011 : TextConst 'ENU=Posted Service Shipment';
      NoOfLinesError@1012 : TextConst 'ENU=Total No. of lines must be %1 in %2.';
      ExtendedTextError@1013 : TextConst 'ENU=Extended Text must be %1.';
      ExistanceError@1014 : TextConst 'ENU=%1 for %2 %3: %4 must not exist.';
      ExpectedDate@1007 : Date;
      GlobalQuantity@1018 : Decimal;
      LocationChangedMsg@1021 : TextConst '@@@="%1 = Item No., %2 = Item serial No., %3 = Location code";ENU=Item %1 with serial number %2 is stored on location %3. The Location Code field on the service line will be updated.';

    [Normal]
    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1992 : Codeunit 131305;
    BEGIN
      CLEAR(ExpectedDate);
      GlobalItemNo := '';
      GlobalQuantity := 0;
      InitVariables;

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      LibraryERMCountryData.UpdateAccountInServiceCosts;
      LibraryService.SetupServiceMgtNoSeries;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ItemJournalWithItemTracking@3();
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemJournal@1003 : TestPage 40;
    BEGIN
      // Test Item Ledger Entry after Posting Item Journal with Serial No.

      // 1. Setup: Create Item with Item Tracking code and create Item Journal Line for the Item.
      Initialize;
      CreateItemJournalLine(ItemJournalLine,CreateItemWithItemTrackingCode);

      // 2. Exercise: Assign Serial No. on Item Journal Line and post it.
      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalLine."Journal Batch Name");
      ItemJournal.ItemTrackingLines.INVOKE;
      ItemJournal.Post.INVOKE;

      // 3. Verify: Verify No. of Item Ledger Entry is the Quantity on Item Journal Line.
      VerifyItemLedgerEntry(ItemJournalLine."Item No.",ItemJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(CustomerTemplateListHandler)]
    PROCEDURE CustomerCreationFromOrder@25();
    VAR
      Customer@1001 : Record 18;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
    BEGIN
      // Test Customer Creation from Service Order.

      // 1. Setup: Create Service Order with Name, Address, City and Post Code.
      Initialize;
      ServiceOrderNo := CreateHeaderWithNameAndAddress;

      // 2. Exercise: Create Customer from Service Order.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder."Create Customer".INVOKE;

      // 3. Verify: Verify Customer created from Service Order.
      Customer.GET(ServiceOrder."Customer No.".VALUE);
      Customer.TESTFIELD(Name,ServiceOrder.Name.VALUE);
      Customer.TESTFIELD(Address,ServiceOrder.Address.VALUE);
      Customer.TESTFIELD(City,ServiceOrder.City.VALUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ServiceItemCreationFromOrder@82();
    VAR
      Item@1008 : Record 27;
      ServiceItem@1009 : Record 5940;
      ServiceOrderNo@1005 : Code[20];
      ServiceItemNo@1011 : Code[20];
    BEGIN
      // Test Service Item Creation from Service Order.

      // 1. Setup: Create Service Header.
      Initialize;
      LibraryInventory.CreateItem(Item);
      ServiceOrderNo := LibraryService.CreateServiceOrderHeaderUsingPage;

      // 2. Exercise: Create Service Item Line with Item and Create Service Item from it.
      ServiceItemNo := CreateServiceItemLineWithItem(ServiceOrderNo,Item."No.");

      // 3. Verify: Verify Service Item created from Service Order.
      ServiceItem.GET(ServiceItemNo);
      ServiceItem.TESTFIELD("Item No.",Item."No.");
    END;

    [Test]
    [HandlerFunctions(StartingFeePageHandler)]
    PROCEDURE StartingFeeOnServiceWorksheet@50();
    VAR
      Customer@1001 : Record 18;
      ServiceItem@1009 : Record 5940;
      ServiceCost@1004 : Record 5905;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
      ServiceOrderStartingFee@1012 : Code[10];
    BEGIN
      // Test Service Line after running Insert Starting Fee function on Service Item Worksheet.

      // 1. Setup: Create Service Cost, update Service Order Starting Fee on Service Management Setup, Customer, Service Item,
      // Service Header and Service Item Line.
      Initialize;
      CreateServiceCost(ServiceCost,'');
      ServiceOrderStartingFee := UpdateServiceOrderStartingFee(ServiceCost.Code);
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      ServiceOrderNo := CreateServiceOrder(ServiceItem);

      // 2. Exercise: Open Service Item worksheet and run insert Starting Fee function.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;

      // 3. Verify: Verify Service Line for Type Cost.
      VerifyCostOnServiceLine(ServiceLine2,ServiceCost);

      // 4. Teardown: Rollback Service Order Starting Fee on Service Management Setup to default value.
      UpdateServiceOrderStartingFee(ServiceOrderStartingFee);
    END;

    [Test]
    [HandlerFunctions(TravelFeePageHandler)]
    PROCEDURE TravelFeeOnServiceWorksheet@222();
    VAR
      ServiceCost@1002 : Record 5905;
      ServiceZone@1001 : Record 5957;
      ServiceItem@1009 : Record 5940;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
      ServiceOrderStartingFee@1003 : Code[10];
    BEGIN
      // Test Service Line after running Insert Travel Fee function on Service Item Worksheet.

      // 1. Setup: Create Service Zone, Service Cost, update Service Order Starting Fee on Service Management Setup, Customer,
      // Service Item, Service Header and Service Item Line.
      Initialize;
      LibraryService.CreateServiceZone(ServiceZone);
      CreateServiceCost(ServiceCost,ServiceZone.Code);
      ServiceOrderStartingFee := UpdateServiceOrderStartingFee(ServiceCost.Code);
      LibraryService.CreateServiceItem(ServiceItem,CreateCustomerWithZoneCode(ServiceZone.Code));
      ServiceOrderNo := CreateServiceOrder(ServiceItem);

      // 2. Exercise: Open Service Item worksheet and run insert Travel Fee function.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;

      // 3. Verify: Verify Service Line for Type Cost.
      VerifyCostOnServiceLine(ServiceLine2,ServiceCost);

      // 4. Teardown: Rollback Service Order Starting Fee on Service Management Setup to default value.
      UpdateServiceOrderStartingFee(ServiceOrderStartingFee);
    END;

    [Test]
    [HandlerFunctions(ExtendedTextPageHandler)]
    PROCEDURE ExtendedTextOnServiceWorksheet@157();
    VAR
      Item@1008 : Record 27;
      ServiceItem@1009 : Record 5940;
      ExtendedTextHeader@1003 : Record 279;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
      ExtendedText@1013 : Text[50];
    BEGIN
      // Test Service Line after running Insert Extended Text function on Service Item Worksheet.

      // 1. Setup: Create Item with Extended Text, Service Item, Service Header and Service Item Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateExtendedTextForItem(ExtendedTextHeader,Item."No.");
      ExtendedText := CreateExtendedTextLine(ExtendedTextHeader);
      ItemNo2 := Item."No.";  // Assign global variable for page handler.
      LibraryService.CreateServiceItem(ServiceItem,CreateCustomer);
      ServiceOrderNo := CreateServiceOrder(ServiceItem);

      // 2. Exercise: Open Service Item worksheet, create line for Item and run insert Extended Text function.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;

      // 3. Verify: Verify Extended Text on Service Item worksheet.
      Assert.AreEqual(ExtendedText,ExtendedText2,STRSUBSTNO(ExtendedTextError,ExtendedText));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ReplacementWorksheetHandler,ItemReplacementPageHandler,StringMenuHandler)]
    PROCEDURE ItemReplacementWithOldItem@5();
    VAR
      ServiceItem@1009 : Record 5940;
    BEGIN
      // Test Service Item and Service Item Components after posting Service Order with Old Service Item selection as Copy Components
      // from on Service Item Replacement page.

      ReplacementWithServiceItem(
        CopyComponentsFrom::"Old Service Item",Replacement::"Temporary",ServiceItem.Status::"Temporarily Installed");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ReplacementWorksheetHandler,ItemReplacementPageHandler,StringMenuHandler)]
    PROCEDURE ItemReplacementWithPermanent@35();
    VAR
      ServiceItem@1009 : Record 5940;
    BEGIN
      // Test Service Item and Service Item Components after posting Service Order with Old Service Item w/o Serial No. selection as
      // Copy Components from on Service Item Replacement page.

      ReplacementWithServiceItem(
        CopyComponentsFrom::"Old Service Item w/o Serial No.",Replacement::Permanent,ServiceItem.Status::Installed);
    END;

    LOCAL PROCEDURE ReplacementWithServiceItem@29(CopyComponentsFrom2@1020 : Option;Replacement2@1021 : Option;Status@1022 : Option);
    VAR
      Item@1008 : Record 27;
      ServiceItem@1009 : Record 5940;
      ServiceItemComponent@1003 : Record 5941;
      SalesReceivablesSetup@1001 : Record 311;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
      ServiceItemNo@1019 : Code[20];
    BEGIN
      // 1. Setup: Update Stockout Warning to False on Sales & Receivables Setup, create Item, Service Header, Service Item Line
      // with Item, create Service Item from it and Service Item Component.
      Initialize;
      SalesReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryInventory.CreateItem(Item);
      ServiceOrderNo := LibraryService.CreateServiceOrderHeaderUsingPage;

      // Assign global variables for page handlers.
      ItemNo2 := Item."No.";
      CopyComponentsFrom := CopyComponentsFrom2;
      Replacement := Replacement2;

      ServiceItemNo := CreateServiceItemLineWithItem(ServiceOrderNo,Item."No.");
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemComponent(ServiceItemComponent,ServiceItemNo,ServiceItemComponent.Type::Item,Item."No.");

      // 2. Exercise: Open Service Item worksheet, select Copy Components as per parameter on Service Item Replacement page and
      // post the Order.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
      ServiceOrder.Post.INVOKE;

      // 3. Verify: Verify created Service Item and its components.
      FindServiceItem(ServiceItem,ServiceOrderNo);
      ServiceItem.TESTFIELD("Serial No.",ItemNo2);
      ServiceItem.TESTFIELD(Status,Status);

      VerifyServiceItemComponent(ServiceItem."No.",ServiceItemComponent."No.",ServiceItemComponent.Type);

      // 4. Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,ReplacementWorksheetHandler,ItemReplacementPageHandler,StringMenuHandler)]
    PROCEDURE ItemReplacementWithItemBOM@120();
    VAR
      Item@1008 : Record 27;
      ServiceItem@1009 : Record 5940;
      ServiceItemComponent@1003 : Record 5941;
      SalesReceivablesSetup@1001 : Record 311;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
      ServiceItemNo@1019 : Code[20];
      QuantityPer@1020 : Integer;
    BEGIN
      // Test Service Item and Service Item Components after posting Service Order with Item BOM selection as Copy Components
      // from on Service Item Replacement page.

      // 1. Setup: Update Stockout Warning to False on Sales & Receivables Setup, create Item, BOM Component, Service Header, Service
      // Item Line with Item, create Service Item from it and Service Item Component.
      Initialize;
      SalesReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryInventory.CreateItem(Item);
      QuantityPer := CreateBOMComponent(Item."No.");
      ServiceOrderNo := LibraryService.CreateServiceOrderHeaderUsingPage;

      // Assign global variables for page handlers.
      ItemNo2 := Item."No.";
      CopyComponentsFrom := CopyComponentsFrom::"Item BOM";
      Replacement := Replacement::"Temporary";

      ServiceItemNo := CreateServiceItemLineWithItem(ServiceOrderNo,Item."No.");
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemComponent(ServiceItemComponent,ServiceItemNo,ServiceItemComponent.Type::Item,Item."No.");

      // 2. Exercise: Open Service Item worksheet, select Copy Components as Item BOM on Service Item Replacement page and post the
      // Order.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
      ServiceOrder.Post.INVOKE;

      // 3. Verify: Verify created Service Item and its components.
      FindServiceItem(ServiceItem,ServiceOrderNo);
      ServiceItem.TESTFIELD("Serial No.",ItemNo2);
      ServiceItem.TESTFIELD(Status,ServiceItem.Status::"Temporarily Installed");

      ServiceItemComponent.SETRANGE("Parent Service Item No.",ServiceItem."No.");
      Assert.AreEqual(
        QuantityPer,ServiceItemComponent.COUNT,STRSUBSTNO(NoOfLinesError,QuantityPer,ServiceItemComponent.TABLECAPTION));

      // 4. Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE ServiceItemLineDeletion@8();
    VAR
      ServiceItem@1009 : Record 5940;
      ServiceItemLine@1014 : Record 5901;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
    BEGIN
      // Test Service Item Line on Service Order after deletion of Service Item Line.

      // 1. Setup: Create Service Item, Service Header and Service Item Line.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,CreateCustomer);
      ServiceOrderNo := CreateServiceOrder(ServiceItem);

      // 2. Exercise: Delete Service Item Line.
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceItemLine.FINDFIRST;
      ServiceItemLine.DELETE(TRUE);

      // 3. Verify: Verify Service Item Line deleted from Service Order.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      Assert.AreEqual(
        '',ServiceOrder.ServItemLines.ServiceItemNo.VALUE,
        STRSUBSTNO(
          ExistanceError,ServiceItemLine.TABLECAPTION,ServiceItem.TABLECAPTION,ServiceItem.FIELDCAPTION("No."),ServiceItem."No."));
    END;

    [Test]
    [HandlerFunctions(ServiceLinePageHandler,CommentSheetPageHandler,StringMenuHandler)]
    PROCEDURE PostServiceOrderWithComment@1();
    VAR
      ServiceItem@1009 : Record 5940;
      SalesReceivablesSetup@1003 : Record 311;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
    BEGIN
      // Test Comment on Service Shipment Header after posting Service Order with comment.

      // 1. Setup: Update Stockout Warning to False on Sales & Receivables Setup, create Service Item, Service Header and Service Item
      // Line.
      Initialize;
      SalesReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryService.CreateServiceItem(ServiceItem,CreateCustomer);
      ServiceOrderNo := CreateServiceOrder(ServiceItem);

      // 2. Exercise: Create Comment for Service Order, open Service Item worksheet, create Line for Type Item and post the Order.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder."Page Service Comment Sheet".INVOKE;
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
      ServiceOrder.Post.INVOKE;

      // 3. Verify: Verify Comment on Service Shipment Header.
      VerifyCommentOnShipmentHeader(ServiceOrderNo,Comment);

      // 4. Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(ServiceLinePageHandler,StringMenuHandler)]
    PROCEDURE PostedEntryOnNavigatePage@2();
    VAR
      ServiceItem@1009 : Record 5940;
      SalesReceivablesSetup@1003 : Record 311;
      ServiceOrder@1000 : TestPage 5900;
      ServiceOrderNo@1005 : Code[20];
    BEGIN
      // Test Posted Service Shipment on Navigate page created after posting Service Order.

      // 1. Setup: Update Stockout Warning to False on Sales & Receivables Setup, create Service Item, Service Header and Service Item
      // Line.
      Initialize;
      SalesReceivablesSetup.GET;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryService.CreateServiceItem(ServiceItem,CreateCustomer);
      ServiceOrderNo := CreateServiceOrder(ServiceItem);

      // 2. Exercise: Open Service Item worksheet, create Line for Type Item and post the Order.
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
      ServiceOrder.Post.INVOKE;

      // 3. Verify: Verify Posted Service Shipment line on Navigate page.
      VerifyPostedShipmentEntry(ServiceOrderNo);

      // 4. Teardown: Rollback Stockout Warning to default value on Sales & Receivables Setup.
      LibrarySales.SetStockoutWarning(SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(AvailableToPromisePageHandler)]
    PROCEDURE AvailableToPromiseOnServiceOrderPromising@154();
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Check that Dates have no effect on the Order Promising page.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateServiceLine(ServiceLine,Item."No.",'',RANDOM(100));  // Blank value taken for Location Code.

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;
      ExpectedDate := ServiceLine."Needed by Date";  // Assign in global variable.

      // 3. Verify: Verify that date are same as in Service line. Verification done in 'AvailableToPromisePageHandler'
    END;

    [Test]
    [HandlerFunctions(CapableToPromisePageHandler)]
    PROCEDURE CapableToPromiseOnServiceOrderPromising@7();
    VAR
      Item@1000 : Record 27;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Check that Dates on Order Promising page.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateServiceLine(ServiceLine,Item."No.",'',RANDOM(100));  // Blank value taken for Location Code.
      ExpectedDate := ServiceLine."Planned Delivery Date";  // Assign in global variable.

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;

      // 3. Verify: Verify that date are same as in Service line. Verification done in 'CapableToPromisePageHandler'.
    END;

    [Test]
    [HandlerFunctions(AcceptPageHandler)]
    PROCEDURE AcceptOnServiceOrderPromising@54();
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Check that Dates are same on the Order Promising page as in Service Line's Needed by Date.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateServiceLine(ServiceLine,Item."No.",'',RANDOM(100));  // Blank value taken for Location Code.

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;
      ExpectedDate := ServiceLine."Needed by Date";  // Assign in global variable.

      // 3. Verify: Verify that date are same as in Service line. Verification done in 'AcceptPageHandler'.
    END;

    [Test]
    [HandlerFunctions(AvailableToPromisePageHandler)]
    PROCEDURE AvailableToPromiseOnServiceOrderPromisingWithPurchaseOrder@42();
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
      PurchaseLine@1005 : Record 39;
      Location@1000 : Record 14;
    BEGIN
      // Check that Dates on the Order Promising page for Available To Promise with lesser Quantity on Job Service Line than Purchase Order.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Location.FINDFIRST;
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      CreateServiceLine(ServiceLine,Item."No.",Location.Code,RANDOM(100));
      ExpectedDate := PurchaseLine."Expected Receipt Date";  // Assign in global variable.

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;

      // 3. Verify: Verifyt dates on the Order Promising page. Verification done in 'AvailableToPromisePageHandler'
    END;

    [Test]
    [HandlerFunctions(AcceptPageHandler)]
    PROCEDURE AcceptOnServiceOrderPromisingWithPurchaseOrder@17();
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
      PurchaseLine@1005 : Record 39;
      Location@1006 : Record 14;
    BEGIN
      // Check that Dates on the Order Promising page for Accept with lesser Quantity on Service Line than Purchase Order.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Location.FINDFIRST;
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      CreateServiceLine(ServiceLine,Item."No.",Location.Code,RANDOM(100));

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;
      ExpectedDate := PurchaseLine."Expected Receipt Date";  // Assign in global variable.

      // 3. Verify: Verify dates on the Order Promising page. Verification done in 'AcceptPageHandler'.
    END;

    [Test]
    [HandlerFunctions(AvailableToPromisePageHandler)]
    PROCEDURE AvailableToPromiseOnServiceOrderPromisingWithSupply@23();
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
      PurchaseLine@1005 : Record 39;
      Location@1006 : Record 14;
    BEGIN
      // Check that Dates on the Order Promising page for Available To Promise with greater Quantity on Service Line than Purchase Order.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Location.FINDFIRST;
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      PurchaseLine.VALIDATE(Quantity,RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Quantity validated here because Purchase Line need lesser Quantity than Service Line.
      PurchaseLine.MODIFY(TRUE);
      CreateServiceLine(ServiceLine,Item."No.",Location.Code,RANDOM(100));

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;
      ExpectedDate := PurchaseLine."Expected Receipt Date";  // Assign in global variable.

      // 3. Verify: Verify dates on the Order Promising page. Verification done in 'AvailableToPromisePageHandler'
    END;

    [Test]
    [HandlerFunctions(AcceptPageHandler)]
    PROCEDURE AcceptOnServiceOrderPromisingWithSupply@22();
    VAR
      Item@1004 : Record 27;
      ServiceLine@1001 : Record 5902;
      PurchaseLine@1005 : Record 39;
      Location@1006 : Record 14;
    BEGIN
      // Check that Dates on the Order Promising page for Accept with greater Quantity on Service Line than Purchase Order.

      // 1. Setup: Create Item, Service Order with Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Location.FINDFIRST;
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      PurchaseLine.VALIDATE(Quantity,RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Quantity validated here because Purchase Line need lesser Quantity than Service Line.
      PurchaseLine.MODIFY(TRUE);
      CreateServiceLine(ServiceLine,Item."No.",Location.Code,RANDOM(100));

      // 2. Exercise.
      ServiceLine.ShowOrderPromisingLine;
      ExpectedDate := PurchaseLine."Expected Receipt Date";  // Assign in global variable.

      // 3. Verify: Verify that dates on the Order Promising page. Verification done in 'AcceptPageHandler'.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingUsingServiceOrder@33();
    VAR
      Item@1001 : Record 27;
      PurchaseLine@1004 : Record 39;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify that there should not be Order Tracking Line with error.

      // Setup: Create and Receive Purchase Order, Create and Ship Service Order.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::"Tracking & Action Msg."),RANDOM(10));  // Using Random value for Quantity.
      CreateServiceLine(ServiceLine,PurchaseLine."No.",'',PurchaseLine.Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      GlobalQuantity := ServiceLine.Quantity;
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // Exercise.
      ServiceLine.ShowTracking;

      // Verify: Verification done in 'MessageHandler' and 'OrderTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ReservationPageHandler)]
    PROCEDURE ReservationUsingServiceOrder@26();
    VAR
      Item@1001 : Record 27;
      PurchaseLine@1004 : Record 39;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Verify Reservation using Item with Order Tracking Policy as Tracking Only.

      // Setup: Create and Receive Purchase Order, CreateService Order.
      Initialize;
      CreateAndPostPurchaseDocument(
        PurchaseLine,CreateItem(Item."Costing Method"::FIFO,Item."Order Tracking Policy"::"Tracking Only"),RANDOM(10));  // Using Random value for Quantity.
      CreateServiceLine(ServiceLine,PurchaseLine."No.",'',PurchaseLine.Quantity);
      GlobalQuantity := ServiceLine.Quantity;
      GlobalItemNo := ServiceLine."No.";
      COMMIT;
      // Exercise.
      ServiceLine.ShowReservation;

      // Verify: Verification done in 'ReservationPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemReplacementPageHandler2,MessageVerificationHandler)]
    PROCEDURE ChangeSerialNoInServiceLineItemOnAnotherLocation@45();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceItem@1003 : Record 5940;
      Location@1000 : ARRAY [2] OF Record 14;
      SerialNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Location]
      // [SCENARIO 380644] Location code should be updated in service line when selecting a serial no of an item stored on location different than the location of service line
      Initialize;

      // [GIVEN] Item "I" tracked by serial no with a linked service item "S"
      // [GIVEN] Item "I" is in stock on two locations. Item with serial no. "SN1" - on location "L1", "SN2" - on location "L2"
      // [GIVEN] Service order for service item "S" on location "L1"
      CreateServiceOrderWithTrackedReplacementComponentOnTwoLocations(ServiceLine,Location);

      ServiceItem.GET(ServiceLine."Service Item No.");
      SerialNo := GetSerialNoFromPostedEntry(ServiceItem."Item No.",Location[2].Code);
      LibraryVariableStorage.Enqueue(SerialNo);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(LocationChangedMsg,ServiceItem."Item No.",SerialNo,Location[2].Code));

      // [WHEN] Setup replacement in the service order. Select serial no. "S2"
      SetItemNoInServiceLine(ServiceLine,ServiceItem."Item No.");

      // [THEN] Mesage "Location will be updated" is shown
      // [THEN] Location code in service line is "L2"
      ServiceLine.TESTFIELD("Location Code",Location[2].Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemReplacementPageHandler2)]
    PROCEDURE ChangeSerialNoInServiceLineItemOnSameLocation@73();
    VAR
      ServiceLine@1003 : Record 5902;
      ServiceItem@1002 : Record 5940;
      Location@1001 : ARRAY [2] OF Record 14;
      SerialNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Location]
      // [SCENARIO 380644] Location code should not be updated in service line when selecting a serial no of an item stored on the same location as the location of service line
      Initialize;

      // [GIVEN] Item "I" tracked by serial no with a linked service item "S"
      // [GIVEN] Item "I" is in stock on two locations. Item with serial no. "SN1" - on location "L1", "SN2" - on location "L2"
      // [GIVEN] Service order for service item "S" on location "L1"
      CreateServiceOrderWithTrackedReplacementComponentOnTwoLocations(ServiceLine,Location);

      ServiceItem.GET(ServiceLine."Service Item No.");
      SerialNo := GetSerialNoFromPostedEntry(ServiceItem."Item No.",Location[1].Code);
      LibraryVariableStorage.Enqueue(SerialNo);

      // [WHEN] Setup replacement in the service order. Select serial no. "S2"
      SetItemNoInServiceLine(ServiceLine,ServiceItem."Item No.");

      // [THEN] No mesage is shown
      // [THEN] Location code in service line is "L1"
      ServiceLine.TESTFIELD("Location Code",Location[1].Code);
    END;

    LOCAL PROCEDURE CreateBOMComponent@9(ItemNo@1000 : Code[20]) : Integer;
    VAR
      BOMComponent@1001 : Record 90;
    BEGIN
      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ItemNo,BOMComponent.Type::Item,LibraryInventory.CreateItemNo,RANDOM(10),'');
      EXIT(BOMComponent."Quantity per");
    END;

    LOCAL PROCEDURE CreateCustomer@1912() : Code[20];
    BEGIN
      EXIT(LibrarySales.CreateCustomerNo);
    END;

    LOCAL PROCEDURE CreateCustomerWithZoneCode@24(ServiceZoneCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Service Zone Code",ServiceZoneCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateExtendedTextForItem@140(VAR ExtendedTextHeader@1000 : Record 279;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,ItemNo);
      ExtendedTextHeader.VALIDATE("Starting Date",WORKDATE);
      ExtendedTextHeader.VALIDATE("All Language Codes",TRUE);
      ExtendedTextHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateExtendedTextLine@51(ExtendedTextHeader@1001 : Record 279) : Text[50];
    VAR
      ExtendedTextLine@1000 : Record 280;
    BEGIN
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,FORMAT(ExtendedTextLine."Table Name") + FORMAT(ExtendedTextLine."Line No."));
      ExtendedTextLine.MODIFY(TRUE);
      EXIT(ExtendedTextLine.Text);
    END;

    LOCAL PROCEDURE CreateHeaderWithNameAndAddress@40() ServiceOrderNo : Code[20];
    VAR
      PostCode@1003 : Record 225;
      LibraryERM@1001 : Codeunit 131300;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);
      ServiceOrder.OPENNEW;
      ServiceOrder.Name.ACTIVATE;
      ServiceOrder.Name.SETVALUE(ServiceOrder."No.".VALUE);
      ServiceOrder.Address.SETVALUE(ServiceOrder."No.".VALUE + PostCode.City);
      ServiceOrder.City.SETVALUE(PostCode.City);
      ServiceOrder."Post Code".SETVALUE(PostCode.Code);
      ServiceOrderNo := ServiceOrder."No.".VALUE;
      ServiceOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@28(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Item);
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@30(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20]);
    VAR
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,
        ItemNo,RANDOM(10));  // Use integer random value for Quantity for Item Tracking.

      // Validate Document No. as combination of Journal Batch Name and Line No.
      ItemJournalLine.VALIDATE("Document No.",ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."));
      ItemJournalLine.MODIFY(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@18() : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",FindItemTrackingCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItem@43(CostingMethod@1003 : Option;OrderTrackingPolicy@1004 : Option) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.VALIDATE("Unit Price",RANDOM(10));  // Using Random value for Unit Price.
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@49(VAR PurchaseLine@1002 : Record 39;DocumentType@1003 : Option;BuyFromVendorNo@1004 : Code[20];No@1005 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,No,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",RANDOM(10));  // Using Random value for Direct Unit Cost.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@52(VAR PurchaseHeader@1003 : Record 38;DocumentType@1000 : Option;BuyFromVendorNo@1002 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceCost@38(VAR ServiceCost@1000 : Record 5905;ServiceZoneCode@1002 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      LibraryERM@1003 : Codeunit 131300;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      LibraryService.CreateServiceCost(ServiceCost);
      ServiceCost.VALIDATE("Cost Type",ServiceCost."Cost Type"::Travel);
      ServiceCost.VALIDATE("Account No.",GLAccount."No.");
      ServiceCost.VALIDATE("Service Zone Code",ServiceZoneCode);

      // Use random for Default Quantity.
      ServiceCost.VALIDATE("Default Quantity",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      ServiceCost.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeader@67(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      WITH ServiceHeader DO BEGIN
        GET("Document Type"::Order,LibraryService.CreateServiceOrderHeaderUsingPage);
        VALIDATE("Customer No.",CustomerNo);
        VALIDATE("Location Code",LocationCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceItem@65(VAR ServiceItem@1000 : Record 5940);
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo);
      ServiceItem.VALIDATE("Item No.",CreateItemWithItemTrackingCode);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemLineWithItem@78(No@1007 : Code[20];ItemNo@1008 : Code[20]) : Code[20];
    VAR
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      OpenServiceOrder(ServiceOrder,No);
      ServiceOrder."Customer No.".SETVALUE(CreateCustomer);
      ServiceOrder.ServItemLines.NEW;
      ServiceOrder.ServItemLines."Item No.".SETVALUE(ItemNo);
      ServiceOrder.ServItemLines."Create Service Item".INVOKE;
      EXIT(ServiceOrder.ServItemLines.ServiceItemNo.VALUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@10(ServiceItem@1000 : Record 5940) ServiceOrderNo : Code[20];
    VAR
      ServiceOrder@1002 : TestPage 5900;
    BEGIN
      ServiceOrderNo := LibraryService.CreateServiceOrderHeaderUsingPage;
      OpenServiceOrder(ServiceOrder,ServiceOrderNo);
      ServiceOrder."Customer No.".SETVALUE(ServiceItem."Customer No.");
      ServiceOrder.ServItemLines.ServiceItemNo.SETVALUE(ServiceItem."No.");
      ServiceOrder.ServItemLines.NEW;
      ServiceOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateServiceOrderWithTrackedReplacementComponentOnTwoLocations@92(VAR ServiceLine@1000 : Record 5902;VAR Location@1001 : ARRAY [2] OF Record 14);
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      CreateServiceItem(ServiceItem);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location[1]);
      PostItemJnlPurchaseOnLocation(ServiceItem."Item No.",Location[1].Code,1);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location[2]);
      PostItemJnlPurchaseOnLocation(ServiceItem."Item No.",Location[2].Code,1);

      CreateServiceOrderWithServiceItemLine(ServiceLine,ServiceItem,Location[1].Code);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithServiceItemLine@79(VAR ServiceLine@1000 : Record 5902;ServiceItem@1002 : Record 5940;LocationCode@1003 : Code[10]);
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      CreateServiceHeader(ServiceHeader,ServiceItem."Customer No.",LocationCode);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      InsertServiceLine(ServiceLine,ServiceHeader."Document Type",ServiceHeader."No.",ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceDocument@16(VAR ServiceHeader@1001 : Record 5900;CustomerNo@1002 : Code[20]) : Integer;
    VAR
      ServiceItemLine@1000 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      EXIT(ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@37(VAR PurchaseLine@1000 : Record 39;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,RANDOM(100) + 100);  // Needed greater Quantity than Service Line and used random for Quantity.
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Expected Receipt Date",CALCDATE('<' + FORMAT(RANDOM(5)) + 'D>',WORKDATE));  // Used Random to calculate the Expected Receipt Date.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@39(VAR PurchaseLine@1004 : Record 39;No@1012 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseHeader@1001 : Record 38;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseDocument(PurchaseLine,PurchaseHeader."Document Type"::Order,Vendor."No.",No,Quantity);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateServiceLine@32(VAR ServiceLine@1001 : Record 5902;ItemNo@1006 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal);
    VAR
      Customer@1003 : Record 18;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLineNo@1000 : Integer;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      ServiceItemLineNo := CreateServiceDocument(ServiceHeader,Customer."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      UpdateServiceLine(ServiceLine,ServiceItemLineNo,Quantity);
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.VALIDATE("Needed by Date",CALCDATE('<' + FORMAT(RANDOM(5)) + 'D>',WORKDATE));  // Used Random to calculate the Needed by Date.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindItemTrackingCode@21() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("SN Specific Tracking",TRUE);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",TRUE);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",TRUE);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindServiceItem@31(VAR ServiceItem@1002 : Record 5940;OrderNo@1001 : Code[20]);
    BEGIN
      ServiceItem.SETRANGE("Shipment Type",ServiceItem."Shipment Type"::Service);
      ServiceItem.SETRANGE("Sales/Serv. Shpt. Document No.",FindServiceShipmentHeader(OrderNo));
      ServiceItem.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceShipmentHeader@4(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      ServiceShipmentHeader@1000 : Record 5990;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      EXIT(ServiceShipmentHeader."No.");
    END;

    LOCAL PROCEDURE GetSerialNoFromPostedEntry@62(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10]) : Code[20];
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.FINDFIRST;

      EXIT(ItemLedgerEntry."Serial No.");
    END;

    LOCAL PROCEDURE InitVariables@27();
    BEGIN
      // Clear all global variables.
      ItemNo2 := '';
      ExtendedText2 := '';
      Comment := '';
      CLEAR(CopyComponentsFrom);
      CLEAR(Replacement);
      CLEAR(ServiceLine2);
    END;

    LOCAL PROCEDURE InsertServiceLine@71(VAR ServiceLine@1000 : Record 5902;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];ServiceItemNo@1003 : Code[20]);
    BEGIN
      WITH ServiceLine DO BEGIN
        INIT;
        VALIDATE("Document Type",DocumentType);
        VALIDATE("Document No.",DocumentNo);
        VALIDATE("Line No.",LibraryUtility.GetNewRecNo(ServiceLine,FIELDNO("Line No.")));
        INSERT;
        VALIDATE("Service Item No.",ServiceItemNo);
      END
    END;

    LOCAL PROCEDURE OpenServiceOrder@11(VAR ServiceOrder@1000 : TestPage 5900;No@1001 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("Document Type",FORMAT(ServiceHeader."Document Type"::Order));
      ServiceOrder.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE PostItemJnlPurchaseOnLocation@68(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Qty@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE(Quantity,Qty);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE SetItemNoInServiceLine@81(VAR ServiceLine@1000 : Record 5902;ItemNo@1001 : Code[20]);
    BEGIN
      ServiceLine.VALIDATE(Type,ServiceLine.Type::Item);
      ServiceLine.VALIDATE("No.",ItemNo);
    END;

    LOCAL PROCEDURE UpdateLineFromItemWorksheet@20(ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceLine2.VALIDATE("Document Type",ServiceLine2."Document Type"::Order);
      EVALUATE(ServiceLine2.Type,ServiceItemWorksheet.ServInvLines.Type.VALUE);
      ServiceLine2.VALIDATE("Document No.",ServiceItemWorksheet."Document No.".VALUE);
      ServiceLine2.VALIDATE("No.",ServiceItemWorksheet.ServInvLines."No.".VALUE);
      EVALUATE(ServiceLine2.Quantity,ServiceItemWorksheet.ServInvLines.Quantity.VALUE);
    END;

    LOCAL PROCEDURE UpdateServiceOrderStartingFee@14(ServiceOrderStartingFee@1001 : Code[10]) OldServiceOrderStartingFee : Code[10];
    VAR
      ServiceMgtSetup@1000 : Record 5911;
    BEGIN
      ServiceMgtSetup.GET;
      OldServiceOrderStartingFee := ServiceMgtSetup."Service Order Starting Fee";
      ServiceMgtSetup.VALIDATE("Service Order Starting Fee",ServiceOrderStartingFee);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLine@19(VAR ServiceLine@1003 : Record 5902;ServiceItemLineNo@1002 : Integer;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCommentOnShipmentHeader@89(OrderNo@1000 : Code[20];Comment2@1004 : Text[80]);
    VAR
      ServiceCommentLine@1003 : Record 5906;
      ServiceCommentSheet@1002 : TestPage 5911;
    BEGIN
      ServiceCommentSheet.OPENVIEW;
      ServiceCommentSheet.FILTER.SETFILTER("Table Name",FORMAT(ServiceCommentLine."Table Name"::"Service Shipment Header"));
      ServiceCommentSheet.FILTER.SETFILTER("No.",FindServiceShipmentHeader(OrderNo));
      ServiceCommentSheet.Comment.ASSERTEQUALS(Comment2);
    END;

    LOCAL PROCEDURE VerifyCostOnServiceLine@34(ServiceLine@1000 : Record 5902;ServiceCost@1001 : Record 5905);
    BEGIN
      ServiceLine.TESTFIELD(Type,ServiceLine.Type::Cost);
      ServiceLine.TESTFIELD("No.",ServiceCost.Code);
      ServiceLine.TESTFIELD(Description,ServiceCost.Description);
      ServiceLine.TESTFIELD("Unit of Measure Code",ServiceCost."Unit of Measure Code");
      ServiceLine.TESTFIELD(Quantity,ServiceCost."Default Quantity");
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@44(ItemNo@1000 : Code[20];NoOfLines@1002 : Integer);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      ItemLedgerEntry.SETFILTER("Serial No.",'<>''''');
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      Assert.AreEqual(NoOfLines,ItemLedgerEntry.COUNT,STRSUBSTNO(NoOfLinesError,NoOfLines,ItemLedgerEntry.TABLECAPTION));

      // 1 is used as Quantity per Serial No. is 1.
      ItemLedgerEntry.FINDSET;
      REPEAT
        ItemLedgerEntry.TESTFIELD("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
        ItemLedgerEntry.TESTFIELD(Quantity,1);
        ItemLedgerEntry.TESTFIELD("Invoiced Quantity",1);
        ItemLedgerEntry.TESTFIELD("Remaining Quantity",1);
        ItemLedgerEntry.TESTFIELD("Sales Amount (Actual)",0);
        ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",0);
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedShipmentEntry@102(OrderNo@1000 : Code[20]);
    VAR
      Navigate@1002 : TestPage 344;
    BEGIN
      Navigate.OPENEDIT;
      Navigate.DocNoFilter.SETVALUE(FindServiceShipmentHeader(OrderNo));
      Navigate.Find.INVOKE;
      Navigate."Table Name".ASSERTEQUALS(PostedServiceShipmentCaption);
      Navigate."No. of Records".ASSERTEQUALS(1);
    END;

    LOCAL PROCEDURE VerifyServiceItemComponent@47(ParentServiceItemNo@1000 : Code[20];No@1002 : Code[20];Type@1001 : Option);
    VAR
      ServiceItemComponent@1003 : Record 5941;
    BEGIN
      ServiceItemComponent.SETRANGE("Parent Service Item No.",ParentServiceItemNo);
      ServiceItemComponent.FINDFIRST;
      ServiceItemComponent.TESTFIELD(Type,Type);
      ServiceItemComponent.TESTFIELD("No.",No);
    END;

    [PageHandler]
    PROCEDURE CommentSheetPageHandler@57(VAR ServiceCommentSheet@1000 : TestPage 5911);
    VAR
      ServiceCommentLine@1001 : Record 5906;
    BEGIN
      ServiceCommentSheet.Comment.SETVALUE(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ServiceCommentLine.FIELDNO(Comment),DATABASE::"Service Comment Line"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Service Comment Line",ServiceCommentLine.FIELDNO(Comment))));
      Comment := ServiceCommentSheet.Comment.VALUE;  // Assign global variable for verification.
      ServiceCommentSheet.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@58(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE CustomerTemplateListHandler@56(VAR CustomerTemplateList@1000 : Page 5156;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ExtendedTextPageHandler@191(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceItemWorksheet.ServInvLines.Type.SETVALUE(ServiceLine2.Type::Item);
      ServiceItemWorksheet.ServInvLines."No.".SETVALUE(ItemNo2);
      ServiceItemWorksheet.ServInvLines."Insert Ext. Texts".INVOKE;
      ServiceItemWorksheet.ServInvLines.LAST;

      // Assign global variable for verification.
      ExtendedText2 := ServiceItemWorksheet.ServInvLines.Description.VALUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@59(Message@1000 : Text[1024]);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE MessageVerificationHandler@69(Message@1000 : Text[1024]);
    BEGIN
      Assert.ExpectedMessage(LibraryVariableStorage.DequeueText,Message);
    END;

    [ModalPageHandler]
    PROCEDURE ItemReplacementPageHandler@125(VAR ServiceItemReplacement@1000 : TestPage 5985);
    BEGIN
      ServiceItemReplacement.NewSerialNo.SETVALUE(ItemNo2);
      ServiceItemReplacement.CopyComponents.SETVALUE(CopyComponentsFrom);
      ServiceItemReplacement.Replacement.SETVALUE(Replacement);
      ServiceItemReplacement.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemReplacementPageHandler2@64(VAR ServiceItemReplacement@1000 : TestPage 5985);
    BEGIN
      ServiceItemReplacement.NewSerialNo.SETVALUE(LibraryVariableStorage.DequeueText);
      ServiceItemReplacement.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@12(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Serial No.".INVOKE;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@36(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReplacementWorksheetHandler@46(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceItemWorksheet.ServInvLines.Type.SETVALUE(ServiceLine2.Type::Item);
      ServiceItemWorksheet.ServInvLines."No.".SETVALUE(ItemNo2);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinePageHandler@41(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    VAR
      Item@1001 : Record 27;
    BEGIN
      ServiceItemWorksheet.ServInvLines.Type.SETVALUE(ServiceLine2.Type::Item);
      ServiceItemWorksheet.ServInvLines."No.".SETVALUE(LibraryInventory.CreateItem(Item));

      // Integer value is required for assigning Serial No.
      ServiceItemWorksheet.ServInvLines.Quantity.SETVALUE(RANDOM(10));
    END;

    [ModalPageHandler]
    PROCEDURE StartingFeePageHandler@75(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceItemWorksheet.ServInvLines."Insert Starting Fee".INVOKE;

      // Assign global variable for verification.
      UpdateLineFromItemWorksheet(ServiceItemWorksheet);
    END;

    [StrMenuHandler]
    PROCEDURE StringMenuHandler@88(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 1;  // 1 for post as ship.
    END;

    [ModalPageHandler]
    PROCEDURE TravelFeePageHandler@246(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceItemWorksheet.ServInvLines."Insert Travel Fee".INVOKE;

      // Assign global variable for verification.
      UpdateLineFromItemWorksheet(ServiceItemWorksheet);
    END;

    [ModalPageHandler]
    PROCEDURE AvailableToPromisePageHandler@15(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.AvailableToPromise.INVOKE;
      OrderPromisingLines."Planned Delivery Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines."Earliest Shipment Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CapableToPromisePageHandler@13(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.CapableToPromise.INVOKE;
      OrderPromisingLines."Original Shipment Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AcceptPageHandler@55(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines."Planned Delivery Date".ASSERTEQUALS(ExpectedDate);
      OrderPromisingLines.AcceptButton.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingPageHandler@128(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking."Untracked Quantity".ASSERTEQUALS(GlobalQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@53(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.ItemNo.ASSERTEQUALS(GlobalItemNo);
      Reservation."Total Quantity".ASSERTEQUALS(GlobalQuantity);
      Reservation.TotalAvailableQuantity.ASSERTEQUALS(GlobalQuantity);
    END;

    BEGIN
    {
      // [FEATURE] [Order] [Service] [UI]
      Test for Service Order Management:
        1. Test Item Ledger Entry after Posting Item Journal with Serial No.
        2. Test Customer Creation from Service Order.
        3. Test Service Item Creation from Service Order.
        4. Test Service Line after running Insert Starting Fee function on Service Item Worksheet.
        5. Test Service Line after running Insert Travel Fee function on Service Item Worksheet.
        6. Test Service Line after running Insert Extended Text function on Service Item Worksheet.
        7. Test Service Item and Service Item Components after posting Service Order with Old Service Item selection as Copy Components
           from on Service Item Replacement page.
        8. Test Service Item and Service Item Components after posting Service Order with Old Service Item w/o Serial No. selection as
           Copy Components from on Service Item Replacement page.
        9. Test Service Item and Service Item Components after posting Service Order with Item BOM selection as Copy Components
           from on Service Item Replacement page.
       10. Test Service Item Line on Service Order after deletion of Service Item Line.
       11. Test Comment on Service Shipment Header after posting Service Order with comment.
       12. Test Posted Service Shipment on Navigate page created after posting Service Order.
       13. Check that Dates have no effect on the Order Promising page.
       14. Check that Dates on Order Promising page.
       15. Check that Dates are same on the Order Promising page as in Service Line's Needed by Date.
       16. Check that Dates on the Order Promising page for Available To Promise with lesser Quantity on Job Service Line than Purchase Order.
       17. Check that Dates on the Order Promising page for Accept with lesser Quantity on Service Line than Purchase Order.
       18. Check that Dates on the Order Promising page for Available To Promise with greater Quantity on Service Line than Purchase Order.
       19. Check that Dates on the Order Promising page for Accept with greater Quantity on Service Line than Purchase Order.
       20. Verify that there should not be Order Tracking Line with error.
       21. Verify Reservation using Item with Order Tracking Policy as Tracking Only.

      TFS_TS_ID = 245889
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      ItemJournalWithItemTracking, CustomerCreationFromOrder, ServiceItemCreationFromOrder, StartingFeeOnServiceWorksheet         141396
      TravelFeeOnServiceWorksheet, ExtendedTextOnServiceWorksheet, ItemReplacementWithOldItem, ItemReplacementWithPermanent       141396
      ItemReplacementWithItemBOM, ServiceItemLineDeletion, PostServiceOrderWithComment, PostedEntryOnNavigatePage                 141396

      TFS_TS_ID = 274949
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      AvailableToPromiseOnServiceOrderPromising, CapableToPromiseOnServiceOrderPromising, AcceptOnServiceOrderPromising           176840
      AvailableToPromiseOnServiceOrderPromisingWithPurchaseOrder, AcceptOnServiceOrderPromisingWithPurchaseOrder                  176857
      AvailableToPromiseOnServiceOrderPromisingWithSupply, AcceptOnServiceOrderPromisingWithSupply                                176862

      TFS_TS_ID = 292556
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      OrderTrackingUsingServiceOrder, ReservationUsingServiceOrder                                                                128085
    }
    END.
  }
}

