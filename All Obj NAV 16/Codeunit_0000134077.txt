OBJECT Codeunit 134077 ERM Currency Factor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1006 : Codeunit 130509;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryERM@1002 : Codeunit 131300;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      AmountLCYError@1008 : TextConst 'ENU=Amount LCY must be %1.';
      CurrencyFactorError@1003 : TextConst 'ENU=Currency Factor must be %1.';
      OutOfBalanceError@1009 : TextConst 'ENU=%1 %2 is out of balance by %3. Please check that %4, %5, %6 and %7 are correct for each line.';
      UnknownError@1007 : TextConst 'ENU=Unknown Error.';

    [Test]
    PROCEDURE GeneralJournalWithAmount@19();
    BEGIN
      // Covers documents TC_ID=8891,8871,8892,8872,8893,8873,8894 and 8874.

      // Check that Currency Factor and Amount LCY field are posted correct on General Journal Line after Post Sales Invoice.
      // Random Amount required for General Journal Line.
      CreateDocAndVerifyAmountLCY(LibraryRandom.RandInt(100));
    END;

    [Test]
    PROCEDURE GeneralJournalWithApplyEntry@27();
    BEGIN
      // Covers documents TC_ID=8891,8871,8892,8872,8893,8873,8895 and 8875.

      // Check that Currency Factor and Amount LCY field are posted correct on General Journal Line after Apply Customer Ledger Entry
      // and Post Sales Invoice.
      CreateDocAndVerifyAmountLCY(0);
    END;

    LOCAL PROCEDURE CreateDocAndVerifyAmountLCY@3(Amount@1006 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
      TempGenJournalLine@1004 : TEMPORARY Record 81;
    BEGIN
      // Setup: Create Currency, Customer and Create Sales Invoice and Post.
      Initialize;
      CreateSalesDocument(SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Create General Journal for Random Amount.
      CreateGeneralJournals(TempGenJournalLine,SalesHeader."Sell-to Customer No.",-Amount);

      IF Amount = 0 THEN
        ApplyCustomerLedgerEntry(TempGenJournalLine,SalesHeader);

      // Verify: Verify for Amount LCY and Currency Factor field on General Journal.
      VerifyCurrencyFactorAmountLCY(TempGenJournalLine,SalesHeader."Currency Factor");
    END;

    [Test]
    PROCEDURE OutOfBalanceErrorWithCustomer@9();
    VAR
      GenJournalLine@1004 : Record 81;
      CustomerNo@1002 : Code[20];
      CurrencyCode@1000 : Code[10];
      AmountLCY@1005 : Decimal;
    BEGIN
      // Verify Out Of Balance Error with Customer.

      // Setup: Create Currency, Customer, General Journal Batch and General Journal Lines with Random Amount.
      Initialize;
      CurrencyCode := CreateCurrency;
      CustomerNo := CreateCustomer(CurrencyCode);
      AmountLCY :=
        CreateGeneralJournalLines(
          GenJournalLine,GenJournalLine."Account Type"::Customer,CustomerNo,CurrencyCode,LibraryRandom.RandInt(1000));

      // Exercise: Post General Journal Lines.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: System Generates Out Of Balance Error.
      Assert.AreEqual(
        STRSUBSTNO(OutOfBalanceError,GenJournalLine.FIELDCAPTION("Document No."),GenJournalLine."Document No.",
          AmountLCY + GenJournalLine."Amount (LCY)",GenJournalLine.FIELDCAPTION("Posting Date"),
          GenJournalLine.FIELDCAPTION("Document Type"),GenJournalLine.FIELDCAPTION("Document No."),
          GenJournalLine.FIELDCAPTION(Amount)),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE OutOfBalanceErrorWithVendor@10();
    VAR
      GenJournalLine@1004 : Record 81;
      VendorNo@1002 : Code[20];
      CurrencyCode@1001 : Code[10];
      AmountLCY@1005 : Decimal;
    BEGIN
      // Verify Out Of Balance Error with Vendor.

      // Setup: Create Currency, Vendor, General Journal Batch and General Journal Lines with Random Amount.
      Initialize;
      CurrencyCode := CreateCurrency;
      VendorNo := CreateVendor(CurrencyCode);
      AmountLCY :=
        CreateGeneralJournalLines(
          GenJournalLine,GenJournalLine."Account Type"::Vendor,VendorNo,CurrencyCode,-LibraryRandom.RandInt(1000));

      // Exercise: Post General Journal Lines.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: System Generates Out Of Balance Error.
      Assert.AreEqual(
        STRSUBSTNO(OutOfBalanceError,GenJournalLine.FIELDCAPTION("Document No."),GenJournalLine."Document No.",
          AmountLCY + GenJournalLine."Amount (LCY)",GenJournalLine.FIELDCAPTION("Posting Date"),
          GenJournalLine.FIELDCAPTION("Document Type"),GenJournalLine.FIELDCAPTION("Document No."),
          GenJournalLine.FIELDCAPTION(Amount)),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE RecurringGeneralJournalCurrencyFactor@6();
    VAR
      GenJournalTemplate@1001 : Record 80;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1007 : Record 330;
      CurrencyFactor@1008 : Decimal;
    BEGIN
      // Verify Currency Factor and Amount(LCY) on Recurring General Journal.

      // Setup: Find Recurring Template,Create a Recurring Batch and create a Payment in Recurring General Journal taking Random value for Amount.
      Initialize;
      LibraryERM.FindRecurringTemplateName(GenJournalTemplate);
      LibraryERM.CreateRecurringBatchName(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CreateCustomer(CreateCurrency),LibraryRandom.RandDec(100,2));

      // Exercise: Calculate the Currency Factor for validation.
      CurrencyExchangeRate.GET(GenJournalLine."Currency Code",LibraryERM.FindEarliestDateForExhRate);
      CurrencyFactor := CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount";

      // Verify: Validate 'Currency factor' and 'Amount(LCY)' on Recurring General Journal.
      VerifyCurrencyFactorAmountLCY(GenJournalLine,CurrencyFactor);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE ApplyCustomerEntryCurrencyFactor@5();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1007 : Record 330;
      GeneralJournal@1009 : TestPage 39;
      CurrencyFactor@1008 : Decimal;
      CurrencyCode@1005 : Code[10];
    BEGIN
      // Verify Currency Factor and Amount(LCY) on General Journal after applying Customer entries.

      // Setup: Create a Currency,post an Invoice for new Customer and create a payment in General Journal taking Random values for Amount.
      Initialize;
      CurrencyCode := CreateCurrency;
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyFactor := CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount";
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CreateCustomer(CurrencyCode),LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,GenJournalLine."Account No.",
        LibraryRandom.RandDec(100,2));

      // Exercise: Open Apply Customer Entries page from General Journal and Set Applies to ID through page handler.
      GeneralJournal.OPENEDIT;
      GeneralJournal.FILTER.SETFILTER("Document No.",GenJournalLine."Document No.");
      GeneralJournal."Apply Entries".INVOKE;

      // Verify: Validate 'Currency factor' and 'Amount(LCY)' on General Journal.
      VerifyCurrencyFactorAmountLCY(GenJournalLine,CurrencyFactor);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyCustomerLedgerEntry@28(VAR TempGenJournalLine@1004 : TEMPORARY Record 81;SalesHeader@1005 : Record 36);
    VAR
      CustLedgerEntry@1000 : Record 21;
      ApplyCustomerEntries@1001 : Page 232;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",SalesHeader."Document Type");
      CustLedgerEntry.SETRANGE("Customer No.",SalesHeader."Sell-to Customer No.");
      CustLedgerEntry.FINDFIRST;
      ApplyCustomerEntries.SetCustLedgEntry(CustLedgerEntry);
      ApplyCustomerEntries.SetCustApplId;

      CustLedgerEntry.SETFILTER("Applies-to ID",'<>''''');
      CustLedgerEntry.FINDFIRST;
      TempGenJournalLine.VALIDATE(Amount,-CustLedgerEntry."Amount to Apply");
      TempGenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@2(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1002 : Record 37;
      Counter@1006 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer(CreateCurrency));

      // Create multiple Sales Lines. Make sure that No. of Lines always greater than 1 to better Testability.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(8) DO BEGIN
        // Required Random Value for Quantity and "Unit Price" field value is not important.
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(100));
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCustomer@16(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@39(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
      LibraryPurchase@1001 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@42(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;AccountType@1002 : Option;AccountNo@1003 : Code[20];CurrencyCode@1005 : Code[10];Amount@1004 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        AccountType,AccountNo,Amount);

      // Use Journal Batch Name as Document No. value is not important.
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch.Name);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLines@4(VAR GenJournalLine@1000 : Record 81;AccountType@1002 : Option;AccountNo@1003 : Code[20];CurrencyCode@1005 : Code[10];Amount@1004 : Decimal) AmountLCY : Decimal;
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,AccountType,AccountNo,CurrencyCode,Amount);

      AmountLCY := GenJournalLine."Amount (LCY)";

      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,CurrencyCode,
        LibraryUtility.GenerateRandomFraction - GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@111(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateCurrency@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournals@23(VAR TempGenJournalLine@1000 : TEMPORARY Record 81;CustomerNo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        TempGenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,TempGenJournalLine."Document Type"::Payment,
        TempGenJournalLine."Account Type"::Customer,CustomerNo,Amount);
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@26(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exist before creating General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE VerifyCurrencyFactorAmountLCY@17(GenJournalLine@1001 : Record 81;CurrencyFactor@1000 : Decimal);
    VAR
      Currency@1002 : Record 4;
      AmountLCY@1003 : Decimal;
    BEGIN
      Assert.AreEqual(CurrencyFactor,GenJournalLine."Currency Factor",STRSUBSTNO(CurrencyFactorError,CurrencyFactor));
      Currency.GET(GenJournalLine."Currency Code");
      Currency.InitRoundingPrecision;
      AmountLCY := GenJournalLine.Amount / GenJournalLine."Currency Factor";
      Assert.AreNearlyEqual(
        AmountLCY,GenJournalLine."Amount (LCY)",Currency."Amount Rounding Precision",STRSUBSTNO(AmountLCYError,AmountLCY));
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntryPageHandler@20(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries."Set Applies-to ID".INVOKE;
      ApplyCustomerEntries.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Currency Factor] [General Journal]
      Test for ERM - Check Currency Factor Amount LCY with Apply Customer Ledger Entry and Amount Zero.
        1. Create Customer, Currency, Sales Invoice and General Journal Lines with Random Amount and
           Verify Currency Factor and Amount LCY.
        2. Create Customer, Currency, Sales Invoice and General Journal Lines with Amount Zero Apply Customer Ledger Entry on General
           Journal Lines and Verify Currency Factor and Amount LCY.
        3. Verify Out Of Balance Error with Customer.
        4. Verify Out Of Balance Error with Vendor.
        5. Verify Currency Factor and Amount(LCY) on Recurring General Journal.
        6. Verify Currency Factor and Amount(LCY) on General Journal after applying Customer entries.

      This test code unit replaces Manual Test Suite (TS5282).
      TFS_TS_ID = 20563, 20559

      Cover Test cases:
        TC-8891 and 8871 TFS_TC_ID= 125518
        TC-8892 and 8872 TFS_TC_ID= 125519
        TC-8893 and 8873 TFS_TC_ID= 125520
        TC-8894 and 8874 TFS_TC_ID= 125521
        TC-8895 and 8875 TFS_TC_ID= 125522

      TFS_TS_ID = 252917
      Covers Test cases:
      -------------------------------------------
       Test Function Name                   TFS ID
      -------------------------------------------
       OutOfBalanceErrorWithCustomer        126238
       OutOfBalanceErrorWithVendor          126238

      TFS_TS_ID = 261337
      Covers Test cases:
      ------------------------------------------------------
       Test Function Name                           TFS ID
      ------------------------------------------------------
       RecurringGeneralJournalCurrencyFactor        125523
       ApplyCustomerEntryCurrencyFactor             125543
    }
    END.
  }
}

