OBJECT Codeunit 136359 UT T Gen Jnl Line Usage Link
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      GenJournalLine@1004 : Record 81;
      GenJournalTemplate@1005 : Record 80;
      GenJournalBatch@1007 : Record 232;
      Assert@1000 : Codeunit 130000;
      Text001@1006 : TextConst 'ENU=Rolling back changes.';
      IsInitialized@1008 : Boolean;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE SetUp@1();
    VAR
      LibraryJob@1000 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY;
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::"G/L Account",JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Quantity,1);
      JobPlanningLine.MODIFY;

      GenJournalTemplate.INIT;
      GenJournalTemplate.VALIDATE(Name,'TEST');
      GenJournalTemplate.INSERT;

      GenJournalBatch.INIT;
      GenJournalBatch.VALIDATE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE(Name,'TEST');
      GenJournalBatch.INSERT;

      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Account No.",JobPlanningLine."No.");
      GenJournalLine.VALIDATE("Job No.",Job."No.");
      GenJournalLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      GenJournalLine.VALIDATE("Job Line Type",GenJournalLine."Job Line Type"::Schedule);
      GenJournalLine.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE TearDown@2();
    BEGIN
      CLEAR(Job);
      CLEAR(JobTask);
      CLEAR(JobPlanningLine);
      CLEAR(GenJournalLine);
      CLEAR(GenJournalBatch);
      CLEAR(GenJournalTemplate);

      ASSERTERROR ERROR(Text001);
      IsInitialized := FALSE;
    END;

    [Test]
    PROCEDURE TestInitialization@3();
    BEGIN
      Initialize;
      SetUp;

      // Verify that "Job Planning Line No." is initialized correctly.
      Assert.AreEqual(0,GenJournalLine."Job Planning Line No.",'Job Planning Line No. is not 0 by default.');

      // Verify that "Remaining Qty." is initialized correctly.
      Assert.AreEqual(0,GenJournalLine."Job Remaining Qty.",'Remaining Qty. is not 0 by default.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldLineType@10();
    BEGIN
      Initialize;
      SetUp;

      // Verify that "Line Type" is set to the correct value when a "Job Planning Line No." is set.
      GenJournalLine.VALIDATE("Job Line Type",0);
      GenJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      Assert.AreEqual(JobPlanningLine."Line Type",GenJournalLine."Job Line Type" - 1,
        'Line type is not set correctly when Job Planning Line No. is defined.');

      // Verify that "Line Type" can't be changed if a "Job Planning Line No." is defined.
      ASSERTERROR GenJournalLine.VALIDATE("Job Line Type",0);

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldJobPlanningLineNo@4();
    BEGIN
      Initialize;
      SetUp;

      // Verify that "Job Planning Line No." and "Remaining Qty." are blanked when the No. changes.
      GenJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      GenJournalLine.TESTFIELD("Job Planning Line No.");
      GenJournalLine.VALIDATE("Account No.",'');
      Assert.AreEqual(0,GenJournalLine."Job Planning Line No.",'Job Planning Line No. is not 0 when No. changes.');
      Assert.AreEqual(0,GenJournalLine."Job Remaining Qty.",'Remaining Qty. is not 0 when No. changes.');

      TearDown;

      Initialize;
      SetUp;

      // Verify that "Job Planning Line No." is blanked when the Job No. changes.
      GenJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      GenJournalLine.TESTFIELD("Job Planning Line No.");
      GenJournalLine.VALIDATE("Job No.",'');
      Assert.AreEqual(0,GenJournalLine."Job Planning Line No.",'Job Planning Line No. is not 0 when Job No. changes.');

      // Remaining test for this field are found in test function TestFieldRemainingQty.

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldRemainingQty@5();
    VAR
      QtyDelta@1001 : Decimal;
      OldRemainingQty@1000 : Decimal;
    BEGIN
      Initialize;
      SetUp;

      // Verify that "Remaining Qty." can't be set if "Job Planning Line No." isn't set.
      ASSERTERROR GenJournalLine.VALIDATE("Job Remaining Qty.",RANDOM(ROUND(GenJournalLine."Job Quantity",1)));

      TearDown;

      Initialize;
      SetUp;

      // Verify that "Remaining Qty." is set correctly when a "Job Planning Line No." is defined.
      GenJournalLine.TESTFIELD("Job Planning Line No.",0);
      GenJournalLine.TESTFIELD("Job Remaining Qty.",0);
      GenJournalLine.TESTFIELD("Job Quantity",0);
      GenJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      Assert.AreEqual(JobPlanningLine."Remaining Qty.",GenJournalLine."Job Remaining Qty.",'Remaining Qty. is not set correctly');

      // Verify that "Remaining Qty." changes correctly when Job Quantity is changed.
      OldRemainingQty := GenJournalLine."Job Remaining Qty.";
      QtyDelta := RANDOM(ROUND(GenJournalLine."Job Remaining Qty.",1));
      GenJournalLine.VALIDATE("Job Quantity",GenJournalLine."Job Quantity" + QtyDelta);
      Assert.AreEqual(OldRemainingQty - QtyDelta,GenJournalLine."Job Remaining Qty.",
        'Remaining Qty. is not updated correctly');

      TearDown;
    END;

    BEGIN
    {
      // [FEATURE] [General Journal] [Job]
      This unit test codeunit tests all fields added during implementation of feature 92820 - Planning and Execution Jobs and Service:

      "Job Planning Line No."
      "Remaining Qty."

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');
    }
    END.
  }
}

