OBJECT Codeunit 137089 SCM Kitting - Planning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1000 : Codeunit 132201;
      LibraryAssembly@1001 : Codeunit 132207;
      LibrarySales@1002 : Codeunit 130509;
      LibraryUtility@1007 : Codeunit 131000;
      Assert@1003 : Codeunit 130000;
      LibraryPlanning@1004 : Codeunit 132203;
      LibraryWarehouse@1006 : Codeunit 132204;
      IsInitialized@1005 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@33();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      IF IsInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE NoSeriesSetup@6();
    VAR
      AssemblySetup@1002 : Record 905;
    BEGIN
      LibraryAssembly.CreateAssemblySetup(AssemblySetup,'',0,LibraryUtility.GetGlobalNoSeriesCode);
    END;

    LOCAL PROCEDURE SetupItems@51(VAR ParentNo@1005 : Code[20];VAR ChildNo@1004 : Code[20];VAR QtyPer@1002 : Decimal);
    VAR
      ParentAssemblyItem@1001 : Record 27;
      ChildItem@1000 : Record 27;
    BEGIN
      CreateKitItem(ParentAssemblyItem,AssembleToStock);
      CreateChildItem(ChildItem,ParentAssemblyItem,ReplenishmentSystemAssembly,QtyPer);
      ParentNo := ParentAssemblyItem."No.";
      ChildNo := ChildItem."No.";
    END;

    LOCAL PROCEDURE SetupItemsVariant@36(VAR ParentNo@1005 : Code[20];VAR ChildNo@1004 : Code[20];VAR QtyPer@1002 : Decimal;VAR VarCode@1006 : Code[10]);
    VAR
      ParentAssemblyItem@1001 : Record 27;
      ItemVariant@1007 : Record 5401;
    BEGIN
      SetupItems(ParentNo,ChildNo,QtyPer);

      ParentAssemblyItem.GET(ParentNo);
      LibraryInventory.CreateVariant(ItemVariant,ParentAssemblyItem);
      VarCode := ItemVariant.Code;
    END;

    LOCAL PROCEDURE SetupSupplyDemand@44(KitItemNo@1000 : Code[20];DemandQty@1002 : Decimal;InventoryQty@1004 : Decimal;VarCode@1003 : Code[10]);
    VAR
      KitItem@1005 : Record 27;
      SalesLine@1001 : Record 37;
    BEGIN
      KitItem.GET(KitItemNo);
      CreateSalesOrder(SalesLine,KitItem,SalesLineShipmentDate,DemandQty,VarCode);
      IF InventoryQty > 0 THEN
        AddToInventoryWithVariantCodeAndLocation(KitItem,InventoryQty,VarCode,'');
    END;

    LOCAL PROCEDURE SetupAssemblyOrders@32(ParentItemNo@1004 : Code[20];ParentQty@1002 : Decimal;ChildItemNo@1001 : Code[20];ChildQty@1003 : Decimal);
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,SalesLineShipmentDate - 3,ChildItemNo,'',ChildQty,'');
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,SalesLineShipmentDate - 2,ParentItemNo,'',ParentQty,'');
    END;

    [Normal]
    LOCAL PROCEDURE ExecutePlanning@9(UsePlanningWorksheet@1017 : Boolean;ParentNo@1019 : Code[20];ChildNo@1003 : Code[20]);
    VAR
      PlanningFilterItem@1000 : Record 27;
    BEGIN
      PlanningFilterItem.SETFILTER("No.",'%1|%2',ParentNo,ChildNo);
      RunPlanning(PlanningFilterItem,SalesLineShipmentDate + 20,UsePlanningWorksheet);
    END;

    [Normal]
    LOCAL PROCEDURE AddToInventory@8(Item@1000 : Record 27;Quantity@1001 : Decimal);
    BEGIN
      AddToInventoryWithVariantCodeAndLocation(Item,Quantity,'','')
    END;

    [Normal]
    LOCAL PROCEDURE AddToInventoryWithVariantCodeAndLocation@13(Item@1001 : Record 27;Quantity@1000 : Decimal;VariantCode@1002 : Code[10];LocationCode@1006 : Code[10]);
    VAR
      ItemJournalLine@1003 : Record 83;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalTemplate@1005 : Record 82;
    BEGIN
      ItemJournalLine.DELETEALL;

      LibraryAssembly.SetupItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,
        ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        Item."No.",
        Quantity);

      ItemJournalLine.VALIDATE(
        "Gen. Bus. Posting Group",FindGenBusPostingGroup(ItemJournalLine."Gen. Prod. Posting Group"));
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.MODIFY(TRUE);

      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    [Normal]
    LOCAL PROCEDURE ActionMessageNew@64() : Integer;
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      EXIT(ReqLine."Action Message"::New);
    END;

    [Normal]
    LOCAL PROCEDURE ActionMessageReschedule@70() : Integer;
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      EXIT(ReqLine."Action Message"::Reschedule);
    END;

    [Normal]
    LOCAL PROCEDURE ActionMessageReschedAndChgQty@65() : Integer;
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      EXIT(ReqLine."Action Message"::"Resched. & Chg. Qty.");
    END;

    [Normal]
    LOCAL PROCEDURE ActionMessageCancel@62() : Integer;
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      EXIT(ReqLine."Action Message"::Cancel);
    END;

    [Normal]
    LOCAL PROCEDURE AssemblyOrderDueDate@12() : Date;
    BEGIN
      EXIT(WORKDATE + 8);
    END;

    LOCAL PROCEDURE SalesLineShipmentDate@29() : Date;
    BEGIN
      EXIT(WORKDATE + 10);
    END;

    [Normal]
    LOCAL PROCEDURE AssembleToStock@3() : Integer;
    VAR
      AssemblyItem@1000 : Record 27;
    BEGIN
      EXIT(AssemblyItem."Assembly Policy"::"Assemble-to-Stock");
    END;

    [Normal]
    LOCAL PROCEDURE AssembleToOrder@4() : Integer;
    VAR
      AssemblyItem@1000 : Record 27;
    BEGIN
      EXIT(AssemblyItem."Assembly Policy"::"Assemble-to-Order");
    END;

    [Normal]
    LOCAL PROCEDURE ReplenishmentSystemAssembly@18() : Integer;
    VAR
      AssemblyItem@1000 : Record 27;
    BEGIN
      EXIT(AssemblyItem."Replenishment System"::Assembly);
    END;

    [Normal]
    LOCAL PROCEDURE ReplenishmentSystemPurchase@98() : Integer;
    VAR
      AssemblyItem@1000 : Record 27;
    BEGIN
      EXIT(AssemblyItem."Replenishment System"::Purchase);
    END;

    [Normal]
    LOCAL PROCEDURE SelectGenProdPostingGroupCode@114() : Code[10];
    VAR
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      GeneralPostingSetup.SETFILTER("Gen. Bus. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Gen. Prod. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Inventory Adjmt. Account",'<>%1','');
      GeneralPostingSetup.NEXT(RANDOM(GeneralPostingSetup.COUNT));
      EXIT(GeneralPostingSetup."Gen. Prod. Posting Group");
    END;

    [Normal]
    LOCAL PROCEDURE InventoryPostingGroupCode@37() : Code[10];
    VAR
      InventoryPostingGroup@1000 : Record 94;
    BEGIN
      InventoryPostingGroup.NEXT(RANDOM(InventoryPostingGroup.COUNT));
      EXIT(InventoryPostingGroup.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateKitItem@7(VAR AssemblyItem@1000 : Record 27;AssemblyPolicy@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(AssemblyItem);
      AssemblyItem.VALIDATE("Replenishment System",ReplenishmentSystemAssembly);
      AssemblyItem.VALIDATE("Reordering Policy",AssemblyItem."Reordering Policy"::"Lot-for-Lot");
      AssemblyItem.VALIDATE("Assembly Policy",AssemblyPolicy);
      EVALUATE(AssemblyItem."Rescheduling Period",'<1M>');
      AssemblyItem.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateChildItem@17(VAR Item@1000 : Record 27;ParentItem@1002 : Record 27;ReplenishmentSystem@1001 : Option;VAR QtyPer@1004 : Decimal);
    BEGIN
      CreateChildItem2(Item,ParentItem,ReplenishmentSystem,QtyPer);
    END;

    [Normal]
    LOCAL PROCEDURE CreateChildItem2@118(VAR Item@1000 : Record 27;ParentItem@1002 : Record 27;ReplenishmentSystem@1001 : Option;VAR QtyPer@1004 : Decimal);
    VAR
      BOMCompItem@1003 : Record 90;
    BEGIN
      LibraryAssembly.CreateAssemblyList(
        Item."Costing Method"::Standard,ParentItem."No.",TRUE,1,0,0,1,SelectGenProdPostingGroupCode,InventoryPostingGroupCode);

      BOMCompItem.SETRANGE("Parent Item No.",ParentItem."No.");
      BOMCompItem.FINDFIRST;
      Item.GET(BOMCompItem."No.");

      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(Item."Rescheduling Period",'<1M>');
      Item.MODIFY(TRUE);

      // Make sure that the Quantity per is always >= 1
      BOMCompItem.VALIDATE("Quantity per",BOMCompItem."Quantity per" + 1);
      BOMCompItem.MODIFY(TRUE);

      QtyPer := BOMCompItem."Quantity per";
    END;

    [Normal]
    LOCAL PROCEDURE CreateSalesOrder@22(VAR SalesLine@1002 : Record 37;SalesItem@1000 : Record 27;SalesLineShipmentDate@1003 : Date;Quantity@1004 : Decimal;VariantCode@1005 : Code[10]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine,SalesHeader,SalesLine.Type::Item,SalesItem."No.",SalesLineShipmentDate,Quantity);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateSalesOrder2@40(VAR SalesLine@1002 : Record 37;VAR SalesHeader@1006 : Record 36;SalesItem@1000 : Record 27;SalesLineShipmentDate@1003 : Date;Quantity@1004 : Decimal;VariantCode@1005 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine,SalesHeader,SalesLine.Type::Item,SalesItem."No.",SalesLineShipmentDate,Quantity);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGenBusPostingGroup@1(GenProdPostingGroupCode@1001 : Code[10]) : Code[10];
    VAR
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      WITH GeneralPostingSetup DO BEGIN
        SETFILTER("Gen. Prod. Posting Group",GenProdPostingGroupCode);
        SETFILTER("Gen. Bus. Posting Group",'<>%1','');
        FINDFIRST;
        EXIT("Gen. Bus. Posting Group");
      END;
    END;

    [Normal]
    LOCAL PROCEDURE RunPlanning@31(VAR FilterRecordItem@1000 : Record 27;ToDate@1001 : Date;UsePlanningWorksheet@1002 : Boolean);
    BEGIN
      IF UsePlanningWorksheet THEN
        LibraryPlanning.CalcRegenPlanForPlanWksh(FilterRecordItem,WORKDATE,ToDate)
      ELSE
        CalculatePlanForReqWksh(FilterRecordItem,WORKDATE,ToDate);
    END;

    [Normal]
    LOCAL PROCEDURE RunAvailableToPromiseOnSalesHeader@34(SalesHeader@1002 : Record 36;VAR OrderPromisingLine@1000 : Record 99000880);
    VAR
      AvailabilityMgt@1001 : Codeunit 99000889;
    BEGIN
      AvailabilityMgt.SetSalesHeader(OrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcAvailableToPromise(OrderPromisingLine);
    END;

    LOCAL PROCEDURE HandlingTime@15(Location@1000 : Record 14) : Integer;
    BEGIN
      EXIT(CALCDATE(Location."Outbound Whse. Handling Time",WORKDATE) - WORKDATE);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNumberOfReqLines@10(nExpectedReqLines@1000 : Integer;NoFilter@1001 : Code[20]);
    VAR
      ReqLine@1002 : Record 246;
    BEGIN
      // Filter to make sure we avoid any left over req lines
      ReqLine.SETFILTER("No.",NoFilter);

      // Verify: x req. lines were created
      Assert.AreEqual(nExpectedReqLines,ReqLine.COUNT,STRSUBSTNO('Exactly %1 req lines should have been created!',nExpectedReqLines));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyReqLineExists@11(No@1000 : Code[20];VariantCode@1001 : Code[10];ActionMessage@1002 : Option;Quantity@1003 : Decimal;OriginalQuantity@1004 : Decimal;DueDate@1005 : Date);
    VAR
      ReqLine@1006 : Record 246;
    BEGIN
      VerifyReqLineExists2(No,VariantCode,ActionMessage,OriginalQuantity,DueDate);

      ReqLine.SETRANGE("No.",No);
      ReqLine.FINDFIRST;
      Assert.AreEqual(Quantity,ReqLine.Quantity,'Quantity on requisition line didn''t have expected value');
    END;

    [Normal]
    LOCAL PROCEDURE VerifyReqLineExists2@5(No@1005 : Code[20];VariantCode@1004 : Code[10];ActionMessage@1003 : Option;OriginalQuantity@1001 : Decimal;DueDate@1000 : Date);
    VAR
      ReqLine@1002 : Record 246;
    BEGIN
      ReqLine.SETRANGE("No.",No);
      Assert.IsTrue(ReqLine.FINDFIRST,'No requisition line create for item');
      Assert.AreEqual(VariantCode,ReqLine."Variant Code",'Variant code on requisition line didn''t have expected value');
      Assert.AreEqual(ActionMessage,ReqLine."Action Message",'Action Message on requisition line didn''t have expected value');
      Assert.AreEqual(
        OriginalQuantity,ReqLine."Original Quantity",'Original Quantity on requisition line didn''t have expected value');
      Assert.AreEqual(DueDate,ReqLine."Due Date",'Due Date on requisition line didn''t have expected value');
    END;

    [Normal]
    LOCAL PROCEDURE CalculatePlanForReqWksh@14(VAR Item@1000 : Record 27;StartDate@1001 : Date;EndDate@1002 : Date);
    VAR
      ReqWkshTemplate@1003 : Record 244;
      RequisitionWkshName@1004 : Record 245;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.NEXT(RANDOM(ReqWkshTemplate.COUNT));
      RequisitionWkshName.SETRANGE("Worksheet Template Name",ReqWkshTemplate.Name);
      RequisitionWkshName.NEXT(RANDOM(RequisitionWkshName.COUNT));
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,StartDate,EndDate);
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormClickYes@28(VAR AssemblyAvailabilityPage@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [Test]
    PROCEDURE Worksheet_KiK_ChildItemsOnAO@27();
    VAR
      QtyPer@1008 : Decimal;
      ParentNo@1010 : Code[20];
      ChildNo@1011 : Code[20];
      QtyOnSalesOrder@1000 : Decimal;
      QtyOnInventory@1001 : Decimal;
      ParentQtyOnAO@1002 : Decimal;
      ChildQtyOnAO@1003 : Decimal;
    BEGIN
      // Kit-in-kit sunshine scenario: No inventory, 5 child items on pre-existing AO, a SO of 10 parent items.

      QtyOnSalesOrder := 10;
      QtyOnInventory := 0;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 5;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,'',ActionMessageNew,QtyOnSalesOrder,0,SalesLineShipmentDate);
      VerifyReqLineExists(ChildNo,'',ActionMessageReschedAndChgQty,QtyPer * QtyOnSalesOrder,ChildQtyOnAO,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_KiK_VariantItemsOnInventory@26();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      VarCode@1000 : Code[10];
      QtyOnSalesOrder@1007 : Decimal;
      QtyOnInventory@1006 : Decimal;
      ParentQtyOnAO@1005 : Decimal;
      ChildQtyOnAO@1003 : Decimal;
    BEGIN
      // Kit-in-kit scenario with variant: 3 parent items on inventory, no pre-existing AO, a SO of 10 parent items.

      QtyOnSalesOrder := 10;
      QtyOnInventory := 3;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 0;

      Initialize;

      SetupItemsVariant(ParentNo,ChildNo,QtyPer,VarCode);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,VarCode);
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,VarCode,ActionMessageNew,QtyOnSalesOrder - QtyOnInventory,0,SalesLineShipmentDate);
      VerifyReqLineExists(ChildNo,'',ActionMessageNew,QtyPer * (QtyOnSalesOrder - QtyOnInventory),0,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_KiK_NoDemandNoSupply@25();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario. No demand and no supply, meaning no req lines
      // This is to verify that the planning worksheet doesn't plan for empty orders

      QtyOnSalesOrder := 0;
      QtyOnInventory := 0;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 0;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(0,ParentNo);
      VerifyNumberOfReqLines(0,ChildNo);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE Worksheet_KiK_ParentItemsOnAO@24();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario: No inventory, 4 parent items on pre-existing AO, a SO of 10 parent items.

      QtyOnSalesOrder := 10;
      QtyOnInventory := 0;
      ParentQtyOnAO := 4;
      ChildQtyOnAO := 0;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,'',ActionMessageReschedAndChgQty,QtyOnSalesOrder,ParentQtyOnAO,SalesLineShipmentDate);
      VerifyReqLineExists(ChildNo,'',ActionMessageNew,QtyPer * QtyOnSalesOrder,0,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_KiK_ChildItemsOnAOAndParentItemsOnInventory@30();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario: 2 parent items on inventory, 3 child items on pre-existing AO, a SO of 15 parent items.

      QtyOnSalesOrder := 15;
      QtyOnInventory := 2;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 3;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,'',ActionMessageNew,QtyOnSalesOrder - QtyOnInventory,0,SalesLineShipmentDate);
      VerifyReqLineExists(
        ChildNo,'',ActionMessageReschedAndChgQty,QtyPer * (QtyOnSalesOrder - QtyOnInventory),ChildQtyOnAO,SalesLineShipmentDate - 1);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE Worksheet_KiK_ChildAndParentItemsOnAO@2();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario: 0 parent items on inventory, 1 child items on pre-existing AO, 4 parent items on pre-existing AO, a SO of 23 parent items.

      QtyOnSalesOrder := 23;
      QtyOnInventory := 0;
      ParentQtyOnAO := 4;
      ChildQtyOnAO := 1;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,'',ActionMessageReschedAndChgQty,QtyOnSalesOrder,4,SalesLineShipmentDate);
      VerifyReqLineExists(ChildNo,'',ActionMessageReschedAndChgQty,QtyPer * QtyOnSalesOrder,ChildQtyOnAO,SalesLineShipmentDate - 1);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE Worksheet_KiK_ItemsOnAOAndInventory@16();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario: 8 parent items on inventory, 1 child items on pre-existing AO, 4 parent items on pre-existing AO, a SO of 28 parent items.
      // (Some of everything)

      QtyOnSalesOrder := 28;
      QtyOnInventory := 8;
      ParentQtyOnAO := 4;
      ChildQtyOnAO := 1;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(
        ParentNo,'',ActionMessageReschedAndChgQty,QtyOnSalesOrder - QtyOnInventory,ParentQtyOnAO,SalesLineShipmentDate);
      VerifyReqLineExists(
        ChildNo,'',ActionMessageReschedAndChgQty,QtyPer * (QtyOnSalesOrder - QtyOnInventory),ChildQtyOnAO,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_KiK_EnoughInventory@19();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario where demand is completely covered by inventory

      QtyOnSalesOrder := 11;
      QtyOnInventory := 13;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 0;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(0,ParentNo);
      VerifyNumberOfReqLines(0,ChildNo);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE Worksheet_KiK_EnoughInventoryAndAOs@20();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario where demand is completely covered by inventory and pre-existing AO

      QtyOnSalesOrder := 11;
      QtyOnInventory := 7;
      ParentQtyOnAO := 4;
      ChildQtyOnAO := 0;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,'',ActionMessageReschedule,ParentQtyOnAO,0,SalesLineShipmentDate);
      VerifyReqLineExists(ChildNo,'',ActionMessageNew,QtyPer * ParentQtyOnAO,0,SalesLineShipmentDate - 1);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE Worksheet_KiK_TestCancel@41();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario where demand is completely covered by inventory and all pre-existing AOs should be cancelled

      QtyOnSalesOrder := 17;
      QtyOnInventory := 17;
      ParentQtyOnAO := 4;
      ChildQtyOnAO := 2;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(TRUE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(1,ParentNo);
      VerifyNumberOfReqLines(1,ChildNo);

      // VerifyReqLineExists(No,VariantCode,ActionMessage,Quantity,originalQuantity,DueDate)
      VerifyReqLineExists(ParentNo,'',ActionMessageCancel,0,ParentQtyOnAO,WORKDATE + 8);
      VerifyReqLineExists(ChildNo,'',ActionMessageCancel,0,ChildQtyOnAO,WORKDATE + 7);
    END;

    [Test]
    PROCEDURE Worksheet_KiK_ReqWorkWithVariant@54();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      VarCode@1000 : Code[10];
      QtyOnSalesOrder@1007 : Decimal;
      QtyOnInventory@1006 : Decimal;
      ParentQtyOnAO@1005 : Decimal;
      ChildQtyOnAO@1003 : Decimal;
    BEGIN
      // Kit-in-kit variant scenario in req worksheet. No req lines should be created.

      QtyOnSalesOrder := 10;
      QtyOnInventory := 0;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 0;

      Initialize;

      SetupItemsVariant(ParentNo,ChildNo,QtyPer,VarCode);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,VarCode);
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(FALSE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(0,ParentNo);
      VerifyNumberOfReqLines(0,ChildNo);
    END;

    [Test]
    PROCEDURE Worksheet_KiK_TestReqWorkLeavesAOsAlone@57();
    VAR
      QtyPer@1004 : Decimal;
      ParentNo@1002 : Code[20];
      ChildNo@1001 : Code[20];
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1005 : Decimal;
      ParentQtyOnAO@1003 : Decimal;
      ChildQtyOnAO@1000 : Decimal;
    BEGIN
      // Kit-in-kit scenario in req worksheet. No req lines should be created.

      QtyOnSalesOrder := 10;
      QtyOnInventory := 0;
      ParentQtyOnAO := 0;
      ChildQtyOnAO := 2;

      Initialize;

      SetupItems(ParentNo,ChildNo,QtyPer);
      SetupSupplyDemand(ParentNo,QtyOnSalesOrder,QtyOnInventory,'');
      SetupAssemblyOrders(ParentNo,ParentQtyOnAO,ChildNo,ChildQtyOnAO);
      ExecutePlanning(FALSE,ParentNo,ChildNo);

      VerifyNumberOfReqLines(0,ParentNo);
      VerifyNumberOfReqLines(0,ChildNo);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE Worksheet_PurchasedItemsInKit@58();
    VAR
      ParentAssemblyItem@1011 : Record 27;
      ChildItem@1009 : Record 27;
      SalesLine@1007 : Record 37;
      PlanningFilterItem@1005 : Record 27;
      AssemblyHeader@1000 : Record 900;
      QtyPer@1001 : Decimal;
      QtyOnSalesOrder@1004 : Decimal;
      ParentQtyOnAO@1002 : Decimal;
    BEGIN
      // Item-in-kit scenario in req worksheet. 10 parent items on AO, 10 parent items on SO, child item is purchased

      QtyOnSalesOrder := 10;
      ParentQtyOnAO := 10;

      Initialize;

      // A kit item, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly
      CreateKitItem(ParentAssemblyItem,AssembleToStock);

      // A kit item, Replenishment System=Assembly, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Resched. Period=2M
      CreateChildItem(ChildItem,ParentAssemblyItem,ReplenishmentSystemPurchase,QtyPer);

      // A SO, with a line of TS1-KIT, Qty.=10, Shipment Date=W + 10D
      CreateSalesOrder(SalesLine,ParentAssemblyItem,SalesLineShipmentDate,QtyOnSalesOrder,'');

      CLEAR(AssemblyHeader);

      // Create an AO for parent item
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,SalesLineShipmentDate,ParentAssemblyItem."No.",'',ParentQtyOnAO,'');

      // Run Req. Worksheet from W to W + 30D, No. = ParentAssemblyItem."No."|ChildItem."No."
      PlanningFilterItem.SETFILTER("No.",'%1|%2',ParentAssemblyItem."No.",ChildItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(PlanningFilterItem,WORKDATE,WORKDATE + 30);

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      // Works with: VerifyReqLineExists(ChildItem."No.",'',ReqLine."Action Message"::New,BOMCompItem."Quantity per" * 10,0,WORKDATE + 9);
      VerifyReqLineExists(ChildItem."No.",'',ActionMessageNew,QtyPer * ParentQtyOnAO,0,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_ATO_AOCreatedFromSO@68();
    VAR
      ParentAssemblyItem@1009 : Record 27;
      ChildItem@1007 : Record 27;
      SalesLine@1005 : Record 37;
      PlanningFilterItem@1004 : Record 27;
      QtyPer@1000 : Decimal;
      QtyOnSalesOrder@1001 : Decimal;
    BEGIN
      // Kit-in-ATOKit scenario in planning worksheet. 10 parent items on SO.
      // AO for the parent item will be created automatically for the SO, so planning should only suggest an AO for the child item.

      QtyOnSalesOrder := 10;

      Initialize;

      // A kit item, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO
      CreateKitItem(ParentAssemblyItem,AssembleToOrder);

      // A kit item TS1-COMP1, Replenishment System=Assembly, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Resched. Period=2M
      CreateChildItem(ChildItem,ParentAssemblyItem,ReplenishmentSystemAssembly,QtyPer);

      CreateSalesOrder(SalesLine,ParentAssemblyItem,SalesLineShipmentDate,QtyOnSalesOrder,'');

      // Run Planning Worksheet from W to W + 30D, No. = ParentAssemblyItem."No."|ChildItem."No."
      PlanningFilterItem.SETFILTER("No.",'%1|%2',ParentAssemblyItem."No.",ChildItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(PlanningFilterItem,WORKDATE,WORKDATE + 30);

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      VerifyReqLineExists2(ChildItem."No.",'',ActionMessageNew,0,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_ATOInKit@80();
    VAR
      ParentAssemblyItem@1008 : Record 27;
      ChildItem@1006 : Record 27;
      SalesLine@1004 : Record 37;
      PlanningFilterItem@1003 : Record 27;
      QtyPer@1000 : Decimal;
      QtyOnSalesOrder@1001 : Decimal;
    BEGIN
      // ATOKit-in-Kit scenario in planning worksheet. 10 parent items on SO.
      // Simple test to verify that ATO items are treated like ATS when they are child items.

      QtyOnSalesOrder := 10;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToStock);

      // A kit item TS1-COMP1, Replenishment System=Assembly, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Resched. Period=2M
      CreateChildItem(ChildItem,ParentAssemblyItem,ReplenishmentSystemAssembly,QtyPer);

      ChildItem.VALIDATE("Assembly Policy",ChildItem."Assembly Policy"::"Assemble-to-Order");
      ChildItem.MODIFY(TRUE);

      // A SO, TS1-SO1, with a line of TS1-KIT, Qty.=10, Shipment Date=W + 10D
      CreateSalesOrder(SalesLine,ParentAssemblyItem,SalesLineShipmentDate,QtyOnSalesOrder,'');

      // Run Planning Worksheet from W to W + 30D, No. = ParentAssemblyItem."No."|ChildItem."No."
      PlanningFilterItem.SETFILTER("No.",'%1|%2',ParentAssemblyItem."No.",ChildItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(PlanningFilterItem,WORKDATE,WORKDATE + 30);

      VerifyNumberOfReqLines(1,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      VerifyReqLineExists(ParentAssemblyItem."No.",'',ActionMessageNew,QtyOnSalesOrder,0,SalesLineShipmentDate);
      VerifyReqLineExists(ChildItem."No.",'',ActionMessageNew,QtyPer * QtyOnSalesOrder,0,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE Worksheet_ATOReservation@82();
    VAR
      ParentAssemblyItem@1008 : Record 27;
      ChildItem@1006 : Record 27;
      SalesLine@1004 : Record 37;
      PlanningFilterItem@1003 : Record 27;
      QtyPer@1000 : Decimal;
      QtyOnSalesOrder@1001 : Decimal;
      QtyToAssembleToOrder@1002 : Decimal;
    BEGIN
      // Kit-in-ATOKit scenario in planning worksheet. 10 parent items on SO with Quantity to assemble to order set to 7.
      // Tests that the reservation link between the SO and the AO for the ATO item is respected.

      QtyOnSalesOrder := 10;
      QtyToAssembleToOrder := 7;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToOrder);

      // A kit item TS1-COMP1, Replenishment System=Assembly, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Resched. Period=2M
      CreateChildItem(ChildItem,ParentAssemblyItem,ReplenishmentSystemAssembly,QtyPer);

      // A SO, TS1-SO1, with a line of TS1-KIT, Qty.=10, Shipment Date=W + 10D
      CreateSalesOrder(SalesLine,ParentAssemblyItem,SalesLineShipmentDate,QtyOnSalesOrder,'');

      SalesLine.VALIDATE("Qty. to Assemble to Order",QtyToAssembleToOrder);
      SalesLine.MODIFY(TRUE);

      // Run Planning Worksheet from W to W + 30D, No. = ParentAssemblyItem."No."|ChildItem."No."
      PlanningFilterItem.SETFILTER("No.",'%1|%2',ParentAssemblyItem."No.",ChildItem."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(PlanningFilterItem,WORKDATE,WORKDATE + 30);

      VerifyNumberOfReqLines(1,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      VerifyReqLineExists(ParentAssemblyItem."No.",'',ActionMessageNew,QtyOnSalesOrder - QtyToAssembleToOrder,0,SalesLineShipmentDate);
      VerifyReqLineExists2(ChildItem."No.",'',ActionMessageNew,0,SalesLineShipmentDate - 1);
    END;

    [Normal]
    LOCAL PROCEDURE RunOrderPlanningAsm@92();
    VAR
      RequisitionLine@1001 : Record 246;
      OrderPlanningMgt@1000 : Codeunit 5522;
    BEGIN
      OrderPlanningMgt.SetAsmOrder;
      OrderPlanningMgt.GetOrdersToPlan(RequisitionLine);
    END;

    [Test]
    PROCEDURE OrderPlanning_PlentyOfInventory@91();
    VAR
      ParentAssemblyItem@1002 : Record 27;
      ChildItem@1000 : Record 27;
      AssemblyHeader@1003 : Record 900;
      QtyPer@1006 : Decimal;
    BEGIN
      // Kit-in-kit scenario. 1500 (ie. plenty) components on inventory, 5 parent items on AO.
      // Tests that the Order planning doesn't create unnecessary AOs.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATS, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToStock);

      // A kit item TS1-COMP1, Replenishment System=Purchase, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE
      CreateChildItem2(ChildItem,ParentAssemblyItem,ReplenishmentSystemPurchase,QtyPer);

      AddToInventory(ChildItem,1500);

      // Create an AO for parent
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,AssemblyOrderDueDate,ParentAssemblyItem."No.",'',5,'');
      AssemblyHeader.MODIFY(TRUE);

      RunOrderPlanningAsm;

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(0,ChildItem."No.");
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE OrderPlanning_PurchasedItemInKitVariant@103();
    VAR
      ParentAssemblyItem@1003 : Record 27;
      ChildItem@1001 : Record 27;
      AssemblyHeader@1000 : Record 900;
      ItemVariant@1004 : Record 5401;
      QtyPer@1005 : Decimal;
    BEGIN
      // Purchased item in assembly variant. 7 child item on inventory. 10 parent items on AO. No SO.
      // Tests the Order planning with variants and demand partially covered by inventory.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATS, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToStock);

      // A kit item TS1-COMP1, Replenishment System=Purchase, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE
      CreateChildItem2(ChildItem,ParentAssemblyItem,ReplenishmentSystemPurchase,QtyPer);

      // Make a variant of TS1-KIT: VAR1
      LibraryInventory.CreateVariant(ItemVariant,ParentAssemblyItem);

      AddToInventory(ChildItem,7);

      // Create an AO for parent
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WORKDATE + 8,ParentAssemblyItem."No.",'',10,ItemVariant.Code);

      RunOrderPlanningAsm;

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      VerifyReqLineExists2(ChildItem."No.",'',ActionMessageNew,0,AssemblyOrderDueDate - 1);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE OrderPlanning_TwoProducedComps@1704();
    VAR
      ParentAssemblyItem@1000 : Record 27;
      BOMCompItem@1001 : Record 90;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      AssemblyHeader@1004 : Record 900;
    BEGIN
      // Produced items in assembly. 0 item on inventory. 10 parent items on AO. No SO.
      // Tests the Order planning with two produced components.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATS, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToStock);

      // A kit item TS1-COMP1, Replenishment System=Purchase, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE
      LibraryAssembly.CreateAssemblyList(
        ParentAssemblyItem."Costing Method"::Standard,ParentAssemblyItem."No.",TRUE,1,0,0,1,SelectGenProdPostingGroupCode,
        InventoryPostingGroupCode);

      // A kit item TS1-COMP2, Replenishment System=Purchase, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE
      LibraryAssembly.CreateAssemblyList(
        ParentAssemblyItem."Costing Method"::Standard,ParentAssemblyItem."No.",TRUE,1,0,0,1,SelectGenProdPostingGroupCode,
        InventoryPostingGroupCode);

      BOMCompItem.SETRANGE("Parent Item No.",ParentAssemblyItem."No.");
      BOMCompItem.FINDSET;
      ChildItem1.GET(BOMCompItem."No.");
      ChildItem1.VALIDATE("Replenishment System",ChildItem1."Replenishment System"::"Prod. Order");
      ChildItem1.VALIDATE("Reordering Policy",ChildItem1."Reordering Policy"::"Lot-for-Lot");
      ChildItem1.MODIFY(TRUE);

      BOMCompItem.NEXT;
      ChildItem2.GET(BOMCompItem."No.");
      ChildItem2.VALIDATE("Replenishment System",ChildItem2."Replenishment System"::"Prod. Order");
      ChildItem2.VALIDATE("Reordering Policy",ChildItem2."Reordering Policy"::"Lot-for-Lot");
      ChildItem2.MODIFY(TRUE);

      // Create an AO for parent
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,AssemblyOrderDueDate,ParentAssemblyItem."No.",'',10,'');
      AssemblyHeader.MODIFY(TRUE);

      RunOrderPlanningAsm;

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem1."No.");
      VerifyNumberOfReqLines(1,ChildItem2."No.");

      VerifyReqLineExists2(ChildItem1."No.",'',ActionMessageNew,0,AssemblyOrderDueDate - 1);
      VerifyReqLineExists2(ChildItem2."No.",'',ActionMessageNew,0,AssemblyOrderDueDate - 1);
    END;

    [Test]
    [HandlerFunctions(ModalFormClickYes)]
    PROCEDURE OrderPlanning_ChangeBeforeCarryOut@1714();
    VAR
      ParentAssemblyItem@1007 : Record 27;
      ChildItem@1005 : Record 27;
      AssemblyHeader@1004 : Record 900;
      ReqLine@1002 : Record 246;
      CarryOutActionMsgPlan@1003 : Report 99001020;
      QtyPer@1006 : Decimal;
      ParentQtyOnAO@1000 : Decimal;
      NewQtyOnAO@1001 : Decimal;
    BEGIN
      // Demand for ATS item changed between calculation and carry out. 10 parent items on AO. Order planning suggests AO for child components.
      // Parent AO qty is then changed before carry out. Order Planning should display an error message.

      ParentQtyOnAO := 10;
      NewQtyOnAO := 5;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATS, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToStock);

      // A kit item TS1-COMP1, Replenishment System=Purchase, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE
      CreateChildItem2(ChildItem,ParentAssemblyItem,ReplenishmentSystemAssembly,QtyPer);

      // Create an AO for parent
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,AssemblyOrderDueDate,ParentAssemblyItem."No.",'',ParentQtyOnAO,'');
      AssemblyHeader.MODIFY(TRUE);

      RunOrderPlanningAsm;

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      VerifyReqLineExists2(ChildItem."No.",'',ActionMessageNew,0,AssemblyOrderDueDate - 1);

      AssemblyHeader.VALIDATE(Quantity,NewQtyOnAO);
      AssemblyHeader.MODIFY(TRUE);

      CLEAR(ReqLine);

      ReqLine.SETRANGE("No.",ChildItem."No.");
      ReqLine.SETRANGE("Action Message",ActionMessageNew);
      ReqLine.SETRANGE(Quantity,QtyPer * ParentQtyOnAO);

      CarryOutActionMsgPlan.SetReqWkshLine(ReqLine);
      CarryOutActionMsgPlan.USEREQUESTPAGE := FALSE;
      ASSERTERROR CarryOutActionMsgPlan.RUN;
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,'Demand Quantity (Base) must be equal to ') = 1,'Carry out did not give the expected error message');
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE OrderPlanning_ATO@1725();
    VAR
      ParentAssemblyItem@1008 : Record 27;
      ChildItem@1006 : Record 27;
      SalesLine@1004 : Record 37;
      QtyPer@1000 : Decimal;
    BEGIN
      // Kit-in-ATOKit scenario in Order Planning. 10 parent items on SO.
      // AO for the parent item will be created automatically for the SO, so order planning should only suggest an AO for the child item.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(ParentAssemblyItem,AssembleToOrder);

      // A kit item TS1-COMP1, Replenishment System=Assembly, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Resched. Period=2M
      CreateChildItem(ChildItem,ParentAssemblyItem,ReplenishmentSystemAssembly,QtyPer);

      // A SO, TS1-SO1, with a line of TS1-KIT, Qty.=10, Shipment Date=W + 10D
      CreateSalesOrder(SalesLine,ParentAssemblyItem,SalesLineShipmentDate,10,'');

      RunOrderPlanningAsm;

      VerifyNumberOfReqLines(0,ParentAssemblyItem."No.");
      VerifyNumberOfReqLines(1,ChildItem."No.");

      VerifyReqLineExists2(ChildItem."No.",'',ActionMessageNew,0,SalesLineShipmentDate - 1);
    END;

    [Test]
    PROCEDURE ATP_SomeInventoryNoAO@1730();
    VAR
      AssemblyItem@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      OrderPromisingLine@1003 : Record 99000880;
    BEGIN
      // 5 items on inventory and non on AO. SO of 10. ATP should not be able not produce an earliest shipment date because the demand cannot be met without creating additional orders.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToStock);

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,WORKDATE,10,'');

      AddToInventory(AssemblyItem,5);

      RunAvailableToPromiseOnSalesHeader(SalesHeader,OrderPromisingLine);

      Assert.AreEqual(
        0D,OrderPromisingLine."Earliest Shipment Date",
        'Available to promise should have failed to produce an earliest shipment date when it didn''t');
    END;

    [Test]
    PROCEDURE ATP_SOCoveredByInventoryAndAO@1738();
    VAR
      AssemblyItem@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      OrderPromisingLine@1001 : Record 99000880;
      AssemblyHeader@1005 : Record 900;
      AODueDate@1000 : Date;
    BEGIN
      // 5 items on inventory and 5 on AO. SO of 10. ATP should be able to produce the earliest shipment date which should be the due date of the AO.

      AODueDate := WORKDATE + 3;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToStock);

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,WORKDATE,10,'');

      AddToInventory(AssemblyItem,5);

      // Create an AO for assembly of 5
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,AODueDate,AssemblyItem."No.",'',5,'');

      RunAvailableToPromiseOnSalesHeader(SalesHeader,OrderPromisingLine);

      Assert.AreEqual(
        AODueDate,OrderPromisingLine."Earliest Shipment Date",
        'Available to promise did not produce the correct earliest shipment date');
    END;

    [Test]
    PROCEDURE ATP_ATO@1744();
    VAR
      AssemblyItem@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      OrderPromisingLine@1002 : Record 99000880;
      SODueDate@1000 : Date;
    BEGIN
      // 10 ATO items on SO. ATP should be able to produce the earliest shipment date which should be the due date of the AO that was produced by the SO.

      SODueDate := WORKDATE + 5;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToOrder);

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,SODueDate,10,'');

      RunAvailableToPromiseOnSalesHeader(SalesHeader,OrderPromisingLine);

      Assert.AreEqual(
        SODueDate,OrderPromisingLine."Earliest Shipment Date",
        'Available to promise did not produce the correct earliest shipment date for ATO');
    END;

    [Test]
    PROCEDURE ATP_ATO_LoweredQtyToATO@1746();
    VAR
      AssemblyItem@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      OrderPromisingLine@1002 : Record 99000880;
      AssemblyHeader@1000 : Record 900;
      AODueDate@1001 : Date;
    BEGIN
      // 10 ATO items on SO. ATP should be able to produce the earliest shipment date which should be the due date of the AO that was produced by the SO.
      // FAILS DUE TO BUG 267049

      AODueDate := WORKDATE + 2;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToOrder);

      AddToInventory(AssemblyItem,5);

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,WORKDATE,10,'');
      SalesLine.VALIDATE("Qty. to Assemble to Order",3);
      SalesLine.MODIFY(TRUE);

      // Create an AO for assembly of 5
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,AODueDate,AssemblyItem."No.",'',2,'');

      RunAvailableToPromiseOnSalesHeader(SalesHeader,OrderPromisingLine);

      Assert.AreEqual(
        AODueDate,OrderPromisingLine."Earliest Shipment Date",
        'Available to promise did not produce the correct earliest shipment date for ATO');
    END;

    [Test]
    PROCEDURE CTP_SOPartiallyCoveredByInventory@1748();
    VAR
      AssemblyItem@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      OrderPromisingLine@1001 : Record 99000880;
      Location@1005 : Record 14;
      AvailabilityMgt@1000 : Codeunit 99000889;
    BEGIN
      // 5 items on inventory and non on AO. SO of 10. CTP should be able to produce an earliest shipment date because it can suggest an AO of the missing items.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToStock);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,WORKDATE,10,'');
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);

      AddToInventoryWithVariantCodeAndLocation(AssemblyItem,5,'',Location.Code);

      // Exercise: Run Capable to Promise.
      AvailabilityMgt.SetSalesHeader(OrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcCapableToPromise(OrderPromisingLine,SalesHeader."No.");

      Assert.AreEqual(
        WORKDATE + 2 + HandlingTime(Location),OrderPromisingLine."Earliest Shipment Date",
        'Capable to promise produced the wrong earliest shipment date');
    END;

    [Test]
    PROCEDURE CTP_ATO@1753();
    VAR
      AssemblyItem@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      OrderPromisingLine@1001 : Record 99000880;
      Location@1005 : Record 14;
      AvailabilityMgt@1000 : Codeunit 99000889;
    BEGIN
      // 5 ATO items on inventory and non on AO. SO of 10, QtATO=3. CTP should be able to produce an earliest shipment date and the appropriate req line should be generated.

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToOrder);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      AddToInventoryWithVariantCodeAndLocation(AssemblyItem,5,'',Location.Code);

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,WORKDATE,10,'');
      SalesLine.VALIDATE("Qty. to Assemble to Order",3);
      SalesLine.VALIDATE("Location Code",Location.Code);
      SalesLine.MODIFY(TRUE);

      // Exercise: Run Capable to Promise.
      AvailabilityMgt.SetSalesHeader(OrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcCapableToPromise(OrderPromisingLine,SalesHeader."No.");

      Assert.AreEqual(
        WORKDATE + 2 + HandlingTime(Location),OrderPromisingLine."Earliest Shipment Date",
        'Capable to promise produced the wrong earliest shipment date');

      VerifyNumberOfReqLines(1,AssemblyItem."No.");

      VerifyReqLineExists(AssemblyItem."No.",'',ActionMessageNew,2,0,WORKDATE + 2 + HandlingTime(Location));
    END;

    [Test]
    PROCEDURE CTP_Variant@1777();
    VAR
      AssemblyItem@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      OrderPromisingLine@1001 : Record 99000880;
      ItemVariant@1005 : Record 5401;
      AvailabilityMgt@1000 : Codeunit 99000889;
      QtyOnSalesOrder@1006 : Decimal;
      QtyOnInventory@1007 : Decimal;
    BEGIN
      // 0 variant items on inventory and 5 on AO. SO of 20. CTP should be able to produce an earliest shipment date and the appropriate req line should be generated.

      QtyOnSalesOrder := 20;
      QtyOnInventory := 5;

      Initialize;

      // A kit item TS1-KIT, UOM=PCS, Item Category Code=FURNITUE, Reorder Policy=LFL, Include Inventory=TRUE, Replenishment System=Assembly, Assembly Policy=ATO, BOM=1xTS1-COMP1
      CreateKitItem(AssemblyItem,AssembleToStock);

      LibraryInventory.CreateVariant(ItemVariant,AssemblyItem);

      AddToInventoryWithVariantCodeAndLocation(AssemblyItem,QtyOnInventory,ItemVariant.Code,'');

      CreateSalesOrder2(SalesLine,SalesHeader,AssemblyItem,WORKDATE,QtyOnSalesOrder,ItemVariant.Code);

      // Exercise: Run Capable to Promise.
      AvailabilityMgt.SetSalesHeader(OrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcCapableToPromise(OrderPromisingLine,SalesHeader."No.");

      Assert.AreEqual(
        WORKDATE + 2,OrderPromisingLine."Earliest Shipment Date",'Capable to promise produced the wrong earliest shipment date');

      VerifyNumberOfReqLines(1,AssemblyItem."No.");

      VerifyReqLineExists(AssemblyItem."No.",ItemVariant.Code,ActionMessageNew,QtyOnSalesOrder - QtyOnInventory,0,WORKDATE + 2);
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Planning] [SCM]
    }
    END.
  }
}

