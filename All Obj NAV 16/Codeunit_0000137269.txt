OBJECT Codeunit 137269 SCM Transfer Reservation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERMCountryData@1012 : Codeunit 131305;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1006 : Codeunit 130509;
      LibraryService@1009 : Codeunit 131902;
      LibraryJob@1010 : Codeunit 131920;
      LibraryItemTracking@1014 : Codeunit 130502;
      LibraryPlanning@1015 : Codeunit 132203;
      LibraryManufacturing@1021 : Codeunit 132202;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibrarySetupStorage@1007 : Codeunit 131009;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryUtility@1013 : Codeunit 131000;
      Assert@1008 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      ReservationEntryShipmentDateIncorrectErr@1011 : TextConst 'ENU=Reservation Entry Shipment Date is incorrect.';
      Direction@1020 : 'Outbound,Inbound';
      CounterOfConfirms@1016 : Integer;
      DummyQst@1017 : TextConst 'ENU=Dummy Dialog Question?';
      ConfirmDialogOccursErr@1018 : TextConst 'ENU=Confirm Dialog occurs.';
      ExpectedDateConfclictErr@1019 : TextConst 'ENU=The change leads to a date conflict with existing reservations';

    [Test]
    PROCEDURE SalesLineReservationShipmentDate@66();
    VAR
      TransferLine@1000 : Record 5741;
      SalesLine@1002 : Record 37;
      ReservationEntry@1007 : Record 337;
      DemandDate@1001 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] Transfer Line Autoreserve Inbound to Sales Line: "Reservation Entry"."Shipment Date" must be equal to "Sales Line"."Shipment Date"
      Initialize;

      // [GIVEN] Supply from Transfer Line Reserved Outbound
      CreateSupplyFromTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand from Sales Line with Demand Date corresponding to Supply Date
      DemandDate := TransferLine."Receipt Date" + LibraryRandom.RandInt(30);
      CreateDemandFromSalesOrderLineQtyOne(SalesLine,TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Autoreserve Transfer Line Inbound
      AutoReserveTransferLineInbound(TransferLine,DemandDate);

      FindTransferInboundReservationEntry(ReservationEntry,TransferLine."Item No.",TransferLine."Document No.");

      // [THEN] "Reservation Entry"."Shipment Date" must be equal to Demand Date
      Assert.AreEqual(DemandDate,ReservationEntry."Shipment Date",ReservationEntryShipmentDateIncorrectErr);
    END;

    [Test]
    PROCEDURE TransferLineReservationShipmentDate@1();
    VAR
      SupplyTransferLine@1000 : Record 5741;
      DemandTransferLine@1002 : Record 5741;
      ReservationEntry@1007 : Record 337;
      DemandDate@1001 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] Transfer Line Autoreserve Inbound to Transfer Line: "Reservation Entry"."Shipment Date" must be equal to Demand from Date "Transfer Line"."Shipment Date"
      Initialize;

      // [GIVEN] Supply from Transfer Line Reserved Outbound
      CreateSupplyFromTransferLineQtyOneReservedOutbound(SupplyTransferLine);

      // [GIVEN] Demand from Sales Line with Demand Date corresponding to Supply Date
      DemandDate := SupplyTransferLine."Receipt Date" + LibraryRandom.RandInt(30);
      CreateDemandFromTransferLineQtyOne(
        DemandTransferLine,SupplyTransferLine."Item No.",SupplyTransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Autoreserve Transfer Line Inbound
      AutoReserveTransferLineInbound(SupplyTransferLine,DemandDate);

      FindTransferInboundReservationEntry(ReservationEntry,SupplyTransferLine."Item No.",SupplyTransferLine."Document No.");

      // [THEN] "Reservation Entry"."Shipment Date" must be equal to Demand Date
      Assert.AreEqual(DemandDate,ReservationEntry."Shipment Date",ReservationEntryShipmentDateIncorrectErr);
    END;

    [Test]
    PROCEDURE ServiceLineReservationShipmentDate@7();
    VAR
      TransferLine@1000 : Record 5741;
      ServiceLine@1002 : Record 5902;
      ReservationEntry@1007 : Record 337;
      DemandDate@1001 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] Transfer Line Autoreserve Inbound to Service Line: "Reservation Entry"."Shipment Date" must be equal to "Service Line"."Needed by Date"
      Initialize;

      // [GIVEN] Supply from Transfer Line Reserved Outbound
      CreateSupplyFromTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand from Service Line with Demand Date corresponding to Supply Date
      DemandDate := TransferLine."Receipt Date" + LibraryRandom.RandInt(30);
      CreateDemandFromServiceLineQtyOne(ServiceLine,TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Autoreserve Transfer Line Inbound
      AutoReserveTransferLineInbound(TransferLine,DemandDate);

      FindTransferInboundReservationEntry(ReservationEntry,TransferLine."Item No.",TransferLine."Document No.");

      // [THEN] "Reservation Entry"."Shipment Date" must be equal to Demand Date
      Assert.AreEqual(DemandDate,ReservationEntry."Shipment Date",ReservationEntryShipmentDateIncorrectErr);
    END;

    [Test]
    PROCEDURE JobPlanningLineReservationShipmentDate@11();
    VAR
      TransferLine@1000 : Record 5741;
      JobPlanningLine@1002 : Record 1003;
      ReservationEntry@1007 : Record 337;
      DemandDate@1001 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt] [Job]
      // [SCENARIO 380276] Transfer Line Autoreserve Inbound to Job Planning Line: "Reservation Entry"."Shipment Date" must be equal to "Job Planning Line"."Planning Date"
      Initialize;

      // [GIVEN] Supply from Transfer Line Reserved Outbound
      CreateSupplyFromTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand from Sales Line with Demand Date corresponding to Supply
      DemandDate := TransferLine."Receipt Date" + LibraryRandom.RandInt(30);
      CreateDemandFromJobPlanningLineQtyOne(JobPlanningLine,TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Autoreserve Transfer Line Inbound
      AutoReserveTransferLineInbound(TransferLine,DemandDate);

      FindTransferInboundReservationEntry(ReservationEntry,TransferLine."Item No.",TransferLine."Document No.");

      // [THEN] "Reservation Entry"."Shipment Date" must be equal to Demand Date
      Assert.AreEqual(DemandDate,ReservationEntry."Shipment Date",ReservationEntryShipmentDateIncorrectErr);
    END;

    [Test]
    [HandlerFunctions(CounterOfConfirmsHandler)]
    PROCEDURE TransferHeaderNoConfirmOnUpdateLines@3();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1003 : Record 5741;
      NewReceiptDate@1001 : Date;
      DemandDate@1002 : Date;
    BEGIN
      // [FEATURE] [Transfer Order Header]
      // [SCENARIO 380276] No Confirm Dialog occurs when VALIDATE "Transfer Header"."Receipt Date".
      Initialize;

      // Stub for test handler if no error occurs
      RunDummyConfirm;

      // [GIVEN] New "Transfer Header"."Receipt Date" and Demand Date are corresponding for Inbound Autoreserve
      NewReceiptDate := WORKDATE + LibraryRandom.RandInt(30);
      DemandDate := NewReceiptDate + LibraryRandom.RandInt(30);

      // [GIVEN] Reserved Transfer Order and Demand
      CreateTransferOrderQtyOneReservedOutbound(TransferHeader,TransferLine);
      CreateReservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] VALIDATE "Transfer Header"."Receipt Date"
      TransferHeader.VALIDATE("Receipt Date",NewReceiptDate);

      // [THEN] No Confirm Dialog occurs
      Assert.AreEqual(1,CounterOfConfirms,ConfirmDialogOccursErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateReceiptDateCheckInbound@22();
    VAR
      TransferLine@1003 : Record 5741;
      NewReceiptDate@1001 : Date;
      DemandDate@1002 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Receipt Date" with bad for Inbound Autoreserve date
      Initialize;

      // [GIVEN] New "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      NewReceiptDate := DemandDate + LibraryRandom.RandInt(30);

      // [GIVEN] Outbound Reserved Transfer Line
      CreateTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserve to Demand and VALIDATE "Transfer Line"."Receipt Date" with new Date that is not corresponding to Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferLine.VALIDATE("Receipt Date",NewReceiptDate);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateShipmentDateCheckInbound@53();
    VAR
      TransferLine@1003 : Record 5741;
      NewShipmentDate@1001 : Date;
      DemandDate@1002 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Shipment Date" with bad for Inbound Autoreserve date
      Initialize;

      // [GIVEN] New "Transfer Line"."Shipment Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      NewShipmentDate := DemandDate + LibraryRandom.RandInt(30);

      // [GIVEN] Outbound Reserved Transfer Line
      CreateTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Line"."Shipment Date" with new Date that is not corresponding to Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferLine.VALIDATE("Shipment Date",NewShipmentDate);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateShippingTimeCheckInbound@56();
    VAR
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
      NewShippingTime@1001 : DateFormula;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Shipping Time" and bad date for Inbound Autoreserve date occurs
      Initialize;

      // [GIVEN] New "Transfer Line"."Shipping Time" leads to "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      EVALUATE(NewShippingTime,'<+1Y>');

      // [GIVEN] Outbound Reserved Transfer Line
      CreateTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Line"."Shipping Time" with new Date Formula that leads to uncorresponding dates for Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferLine.VALIDATE("Shipping Time",NewShippingTime);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateOutboundWhseHandlingTimeCheckInbound@64();
    VAR
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
      OutboundWhseHandlingTime@1001 : DateFormula;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Outbound Whse. Handling Time" and bad date for Inbound Autoreserve date occurs
      Initialize;

      // [GIVEN] New "Transfer Line"."Outbound Whse. Handling Time" leads to "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      EVALUATE(OutboundWhseHandlingTime,'<+1Y>');

      // [GIVEN] Outbound Reserved Transfer Line
      CreateTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Line"."Outbound Whse. Handling Time" with new Date Formula that leads to uncorresponding dates for Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferLine.VALIDATE("Outbound Whse. Handling Time",OutboundWhseHandlingTime);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateInboundWhseHandlingTimeCheckInbound@72();
    VAR
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
      InboundWhseHandlingTime@1001 : DateFormula;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Inbound Whse. Handling Time" and bad date for Inbound Autoreserve date occurs
      Initialize;

      // [GIVEN] New "Transfer Line"."Inbound Whse. Handling Time" leads to "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      EVALUATE(InboundWhseHandlingTime,'<+1Y>');

      // [GIVEN] Outbound Reserved Transfer Line
      CreateTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Line"."Inbound Whse. Handling Time" with new Date Formula that leads to uncorresponding dates for Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferLine.VALIDATE("Inbound Whse. Handling Time",InboundWhseHandlingTime);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateShippingAgentServiceCodeCheckInbound@77();
    VAR
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
      ShippingAgentServiceCode@1004 : Code[10];
      ShippingAgentCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Shipping Agent Service Code" and bad date for Inbound Autoreserve date occurs
      Initialize;

      // [GIVEN] New "Transfer Line"."Shipping Agent Service Code" leads to "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      CreateShippingAgentServiceCodeWith1YShippingTime(ShippingAgentCode,ShippingAgentServiceCode);

      // [GIVEN] Outbound Reserved Transfer Line
      CreateTransferLineQtyOneReservedOutbound(TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Line"."Shipping Agent Service Code" with new value that leads to uncorresponding dates for Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      TransferLine.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      ASSERTERROR TransferLine.VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferOrderErrorOnValidateReceiptDateCheckInbound@89();
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1003 : Record 5741;
      NewReceiptDate@1001 : Date;
      DemandDate@1002 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Header"."Receipt Date" with bad for Inbound Autoreserve date
      Initialize;

      // [GIVEN] New "Transfer Header"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      NewReceiptDate := DemandDate + LibraryRandom.RandInt(30);

      // [GIVEN] Outbound Reserved Transfer Order
      CreateTransferOrderQtyOneReservedOutbound(TransferHeader,TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Header"."Receipt Date" with new Date that is not corresponding to Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferHeader.VALIDATE("Receipt Date",NewReceiptDate);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferOrderErrorOnValidateShipmentDateCheckInbound@88();
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1003 : Record 5741;
      NewShipmentDate@1001 : Date;
      DemandDate@1002 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Header"."Shipment Date" with bad for Inbound Autoreserve date
      Initialize;

      // [GIVEN] New "Transfer Header"."Shipment Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      NewShipmentDate := DemandDate + LibraryRandom.RandInt(30);

      // [GIVEN] Outbound Reserved Transfer Order
      CreateTransferOrderQtyOneReservedOutbound(TransferHeader,TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Header"."Shipment Date" with new Date that is not corresponding to Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferHeader.VALIDATE("Shipment Date",NewShipmentDate);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferOrderErrorOnValidateShippingTimeCheckInbound@87();
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
      NewShippingTime@1001 : DateFormula;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Header"."Shipping Time" and bad date for Inbound Autoreserve date occurs
      Initialize;

      // [GIVEN] New "Transfer Header"."Shipping Time" leads to "Transfer Header"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      EVALUATE(NewShippingTime,'<+1Y>');

      // [GIVEN] Outbound Reserved Transfer Order
      CreateTransferOrderQtyOneReservedOutbound(TransferHeader,TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Header"."Shipping Time" with new Date Formula that leads to uncorresponding dates for Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      ASSERTERROR TransferHeader.VALIDATE("Shipping Time",NewShippingTime);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferOrderErrorOnValidateShippingAgentServiceCodeCheckInbound@90();
    VAR
      TransferHeader@1005 : Record 5740;
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
      ShippingAgentServiceCode@1004 : Code[10];
      ShippingAgentCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Receipt]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Header"."Shipping Agent Service Code" and bad date for Inbound Autoreserve date occurs
      Initialize;

      // [GIVEN] New "Transfer Header"."Shipping Agent Service Code" leads to "Transfer Header"."Receipt Date" and Demand Date are not corresponding for Inbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);
      CreateShippingAgentServiceCodeWith1YShippingTime(ShippingAgentCode,ShippingAgentServiceCode);

      // [GIVEN] Outbound Reserved Transfer Order
      CreateTransferOrderQtyOneReservedOutbound(TransferHeader,TransferLine);

      // [GIVEN] Demand Line
      CreateUnreservedDemandQtyOne(TransferLine."Item No.",TransferLine."Transfer-to Code",DemandDate);

      // [WHEN] Transfer Line Inbound Autoreserved to Demand and VALIDATE "Transfer Line"."Inbound Whse. Handling Time" with new Date Formula that leads to uncorresponding dates for Inbound Autoreserve
      AutoReserveTransferLineInbound(TransferLine,DemandDate);
      TransferHeader.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      ASSERTERROR TransferHeader.VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferLineErrorOnValidateReceiptDateCheckOutbound@92();
    VAR
      PurchaseLine@1004 : Record 39;
      TransferLine@1003 : Record 5741;
      DemandDate@1002 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Shipment]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Receipt Date" with bad for Outbound Autoreserve date
      Initialize;

      // [GIVEN] New "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Outbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);

      // [GIVEN] Supply from Purchase Line

      // [GIVEN] Unreserved Transfer Line as Demand
      CreateSupplyAndDemandFromTransferLine(PurchaseLine,TransferLine,DemandDate);

      // [WHEN] Purchase Line Autoreserved to Demand and  VALIDATE "Transfer Line"."Receipt Date" with new Date that is not corresponding to Outbound Autoreserve
      AutoReservePurchaseLine(PurchaseLine,DemandDate);
      ASSERTERROR TransferLine.VALIDATE("Receipt Date",WORKDATE);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE TransferOrderErrorOnValidateReceiptDateCheckOutbound@94();
    VAR
      PurchaseLine@1003 : Record 39;
      TransferHeader@1002 : Record 5740;
      DemandDate@1001 : Date;
    BEGIN
      // [FEATURE] [Shipment Date] [Transfer Shipment]
      // [SCENARIO 380276] ERROR occurs when VALIDATE "Transfer Line"."Receipt Date" with bad for Outbound Autoreserve date
      Initialize;

      // [GIVEN] New "Transfer Line"."Receipt Date" and Demand Date are not corresponding for Outbound Autoreserve
      DemandDate := WORKDATE + LibraryRandom.RandInt(30);

      // [GIVEN] Supply from Purchase Line

      // [GIVEN] Unreserved Transfer Order as Demand
      CreateSupplyAndDemandFromTransferOrder(PurchaseLine,TransferHeader,DemandDate);

      // [WHEN] Purchase Line Autoreserved to Demand and VALIDATE "Transfer Header"."Receipt Date" with new Date that is not corresponding to Outbound Autoreserve
      AutoReservePurchaseLine(PurchaseLine,DemandDate);
      ASSERTERROR TransferHeader.VALIDATE("Receipt Date",WORKDATE);

      // [THEN] Error of Date Conflict occurs
      Assert.ExpectedError(ExpectedDateConfclictErr);
    END;

    [Test]
    PROCEDURE SynchronizeTransferOutboundToInboundItemTrackingSNSpecific@99();
    VAR
      SalesLine@1001 : Record 37;
      TempTrackingSpecification@1000 : TEMPORARY Record 336;
      ProdOrderNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 381007] Synchronize Transfer Outbound To Inbound Item Tracking for SN Specific Tracking
      Initialize;

      // [GIVEN] Sales Order as Demand and released Production Order as Supply at different Locations reserved one to another via Transfer Order
      ProdOrderNo := CreateSOAsDemandAndPOAsSupplyAtDifferentLocations(SalesLine,TempTrackingSpecification,TRUE,FALSE);

      // [WHEN] post Output Journal for Item from Production Order with Tracking Specification with required tracking data
      CreateAndPostOutputJournalWithTrackingSpecification(TempTrackingSpecification,SalesLine."No.",ProdOrderNo);

      // [THEN] Provided by User Tracking Specification is transferred to Sales Order via Transfer Order
      VerifyTrackingSpecification(
        TempTrackingSpecification,DATABASE::"Sales Line",SalesLine."Document Type"::Order,
        SalesLine."Document No.",'',0,SalesLine."Line No.",-1);
    END;

    [Test]
    PROCEDURE SynchronizeTransferOutboundToInboundItemTrackingLotSpecific@101();
    VAR
      SalesLine@1002 : Record 37;
      TempTrackingSpecification@1001 : TEMPORARY Record 336;
      ProdOrderNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 381007] Synchronize Transfer Outbound To Inbound Item Tracking for Lot Specific Tracking
      Initialize;

      // [GIVEN] Sales Order as Demand and released Production Order as Supply at different Locations reserved one to another via Transfer Order
      ProdOrderNo := CreateSOAsDemandAndPOAsSupplyAtDifferentLocations(SalesLine,TempTrackingSpecification,FALSE,TRUE);

      // [WHEN] post Output Journal for Item from Production Order with Tracking Specification with required tracking data
      CreateAndPostOutputJournalWithTrackingSpecification(TempTrackingSpecification,SalesLine."No.",ProdOrderNo);

      // [THEN] Provided by User Tracking Specification is transferred to Sales Order via Transfer Order
      VerifyTrackingSpecification(
        TempTrackingSpecification,DATABASE::"Sales Line",SalesLine."Document Type"::Order,
        SalesLine."Document No.",'',0,SalesLine."Line No.",-1);
    END;

    [Test]
    PROCEDURE SynchronizeTransferOutboundToInboundItemTrackingSNAndLot@102();
    VAR
      SalesLine@1002 : Record 37;
      TempTrackingSpecification@1001 : TEMPORARY Record 336;
      ProdOrderNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking]
      // [SCENARIO 381007] Synchronize Transfer Outbound To Inbound Item Tracking for SN and Lot Specific Tracking
      Initialize;

      // [GIVEN] Sales Order as Demand and released Production Order as Supply at different Locations reserved one to another via Transfer Order
      ProdOrderNo := CreateSOAsDemandAndPOAsSupplyAtDifferentLocations(SalesLine,TempTrackingSpecification,TRUE,TRUE);

      // [WHEN] post Output Journal for Item from Production Order with Tracking Specification with required tracking data
      CreateAndPostOutputJournalWithTrackingSpecification(TempTrackingSpecification,SalesLine."No.",ProdOrderNo);

      // [THEN] Provided by User Tracking Specification is transferred to Sales Order via Transfer Order
      VerifyTrackingSpecification(
        TempTrackingSpecification,DATABASE::"Sales Line",SalesLine."Document Type"::Order,
        SalesLine."Document No.",'',0,SalesLine."Line No.",-1);
    END;

    LOCAL PROCEDURE Initialize@9();
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      isInitialized := TRUE;

      COMMIT;
    END;

    LOCAL PROCEDURE CreateSOAsDemandAndPOAsSupplyAtDifferentLocations@79(VAR SalesLine@1001 : Record 37;VAR TempTrackingSpecification@1009 : TEMPORARY Record 336;SNSpecific@1008 : Boolean;LNSpecific@1007 : Boolean) : Code[20];
    VAR
      Item@1002 : Record 27;
      FromLocation@1003 : Record 14;
      ToLocation@1004 : Record 14;
      TransitLocation@1005 : Record 14;
      StockkeepingUnit@1006 : Record 5700;
      Qty@1000 : Integer;
    BEGIN
      CreateTrackedItem(Item,SNSpecific,LNSpecific);
      CreateLocationsChain(FromLocation,ToLocation,TransitLocation);
      CreateItemSKUForLocation(
        Item."No.",FromLocation.Code,StockkeepingUnit."Reordering Policy"::Order,
        StockkeepingUnit."Replenishment System"::"Prod. Order",'');
      CreateItemSKUForLocation(
        Item."No.",ToLocation.Code,StockkeepingUnit."Reordering Policy"::Order,
        StockkeepingUnit."Replenishment System"::Transfer,FromLocation.Code);
      Qty := CreateSourceTempTrackingSpecification(TempTrackingSpecification,SNSpecific,LNSpecific);
      CreateSalesOrderLine(SalesLine,ToLocation.Code,Item."No.",Qty);
      CalcRegPlanAndCarryOut(Item."No.",SalesLine."Shipment Date");
      EXIT(FindAndReleaseProductionOrderByItemNo(Item."No."));
    END;

    LOCAL PROCEDURE CreateReserveAlwaysItem@284(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTrackedItem@28(VAR Item@1000 : Record 27;SNSpecific@1002 : Boolean;LNSpecific@1001 : Boolean);
    VAR
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecific,LNSpecific);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemSKUForLocation@35(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];ReorderingPolicy@1003 : Option;ReplenishmentSystem@1004 : Option;TransferFromCode@1005 : Code[10]);
    VAR
      StockkeepingUnit@1002 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Reordering Policy",ReorderingPolicy);
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFromCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationsChain@5(VAR FromLocation@1007 : Record 14;VAR ToLocation@1005 : Record 14;VAR TransitLocation@1004 : Record 14);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      LibraryWarehouse.CreateLocation(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(TransitLocation);
      LibraryInventory.CreateTransferRoute(TransferRoute,FromLocation.Code,ToLocation.Code);
      TransferRoute.VALIDATE("In-Transit Code",TransitLocation.Code);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemInventory@58(Item@1005 : Record 27;Location@1004 : Record 14);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,Location.Code,Item."No.",1);
      PostPurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE PostPurchaseDocument@183(PurchaseHeader@1000 : Record 38);
    BEGIN
      // Update Vendor Invoice No on Purchase Header.
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@83(VAR PurchaseHeader@1003 : Record 38;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@47(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderLine@93(VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,LocationCode,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateReserveAlwaysItemSupplyAndLocationsChain@49(VAR PurchaseLine@1004 : Record 39;VAR Item@1000 : Record 27;VAR FromLocation@1003 : Record 14;VAR ToLocation@1002 : Record 14;VAR TransitLocation@1001 : Record 14);
    BEGIN
      CreateReserveAlwaysItemAndLocationsChain(Item,FromLocation,ToLocation,TransitLocation);
      CreateSupply(PurchaseLine,Item,FromLocation);
    END;

    LOCAL PROCEDURE CreateReserveAlwaysItemWithInventoryAndLocationsChain@42(VAR Item@1000 : Record 27;VAR FromLocation@1003 : Record 14;VAR ToLocation@1002 : Record 14;VAR TransitLocation@1001 : Record 14);
    BEGIN
      CreateReserveAlwaysItemAndLocationsChain(Item,FromLocation,ToLocation,TransitLocation);
      CreateItemInventory(Item,FromLocation);
    END;

    LOCAL PROCEDURE CreateReserveAlwaysItemAndLocationsChain@36(VAR Item@1000 : Record 27;VAR FromLocation@1003 : Record 14;VAR ToLocation@1002 : Record 14;VAR TransitLocation@1001 : Record 14);
    BEGIN
      CreateReserveAlwaysItem(Item);
      CreateLocationsChain(FromLocation,ToLocation,TransitLocation);
    END;

    LOCAL PROCEDURE CreateSupplyFromTransferLineQtyOneReservedOutbound@27(VAR TransferLine@1004 : Record 5741);
    VAR
      Item@1003 : Record 27;
      FromLocation@1002 : Record 14;
      ToLocation@1001 : Record 14;
      TransitLocation@1000 : Record 14;
    BEGIN
      CreateReserveAlwaysItemWithInventoryAndLocationsChain(Item,FromLocation,ToLocation,TransitLocation);
      CreateTransferLineQtyOne(TransferLine,Item."No.",FromLocation.Code,ToLocation.Code,TransitLocation.Code,WORKDATE);
      AutoReserveTransferLine(TransferLine,TransferLine."Shipment Date",Direction::Outbound);
    END;

    LOCAL PROCEDURE CreateTransferLineQtyOne@39(VAR TransferLine@1004 : Record 5741;ItemNo@1002 : Code[20];FromLocationCode@1007 : Code[10];ToLocationCode@1000 : Code[10];TransitLocationCode@1005 : Code[10];ReceiptDate@1008 : Date);
    VAR
      TransferHeader@1003 : Record 5740;
    BEGIN
      CreateTransferOrderQtyOne(TransferHeader,TransferLine,ItemNo,FromLocationCode,ToLocationCode,TransitLocationCode,ReceiptDate);
    END;

    LOCAL PROCEDURE CreateTransferOrderQtyOne@38(VAR TransferHeader@1003 : Record 5740;VAR TransferLine@1004 : Record 5741;ItemNo@1002 : Code[20];FromLocationCode@1007 : Code[10];ToLocationCode@1000 : Code[10];TransitLocationCode@1005 : Code[10];ReceiptDate@1008 : Date);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,TransitLocationCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,1);
      TransferLine.VALIDATE("Receipt Date",ReceiptDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDemandFromSalesOrderLineQtyOne@21(VAR SalesLine@1000 : Record 37;ItemNo@1006 : Code[20];LocationCode@1005 : Code[10];ShipmentDate@1001 : Date);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,1);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDemandFromTransferLineQtyOne@62(VAR TransferLine@1000 : Record 5741;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];ShipmentDate@1008 : Date);
    VAR
      ToLocation@1002 : Record 14;
      TransitLocation@1001 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(TransitLocation);
      CreateTransferLineQtyOne(TransferLine,ItemNo,LocationCode,ToLocation.Code,TransitLocation.Code,WORKDATE);
      TransferLine.VALIDATE("Shipment Date",ShipmentDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDemandFromServiceLineQtyOne@8(VAR ServiceLine@1000 : Record 5902;ItemNo@1006 : Code[20];LocationCode@1005 : Code[10];NeededByDate@1001 : Date);
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE(Quantity,1);
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.VALIDATE("Needed by Date",NeededByDate);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDemandFromJobPlanningLineQtyOne@12(VAR JobPlanningLine@1000 : Record 1003;ItemNo@1007 : Code[20];LocationCode@1005 : Code[10];PlanDate@1001 : Date);
    VAR
      Job@1006 : Record 167;
      JobTaskLine@1003 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY;

      // Job Task Line:
      LibraryJob.CreateJobTask(Job,JobTaskLine);
      JobTaskLine.MODIFY;

      // Job Planning Line:
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,
        JobPlanningLine.Type::Item,JobTaskLine,JobPlanningLine);

      JobPlanningLine.VALIDATE("Planning Date",PlanDate);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);

      JobPlanningLine.VALIDATE("No.",ItemNo);
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.VALIDATE(Quantity,1);
      JobPlanningLine.MODIFY;
    END;

    LOCAL PROCEDURE AutoReserveTransferLine@43(VAR TransferLine@1000 : Record 5741;AvailabilityDate@1003 : Date;Direction@1004 : 'Outbound,Inbound');
    VAR
      ReservationManagement@1001 : Codeunit 99000845;
      FullAutoReservation@1002 : Boolean;
    BEGIN
      ReservationManagement.SetTransferLine(TransferLine,Direction);
      WITH TransferLine DO
        ReservationManagement.AutoReserve(FullAutoReservation,Description,AvailabilityDate,Quantity,"Quantity (Base)");
    END;

    LOCAL PROCEDURE AutoReserveSalesLine@15(VAR SalesLine@1000 : Record 37;AvailabilityDate@1003 : Date);
    VAR
      ReservationManagement@1001 : Codeunit 99000845;
      FullAutoReservation@1002 : Boolean;
    BEGIN
      ReservationManagement.SetSalesLine(SalesLine);
      WITH SalesLine DO
        ReservationManagement.AutoReserve(FullAutoReservation,Description,AvailabilityDate,Quantity,"Quantity (Base)");
    END;

    LOCAL PROCEDURE AutoReservePurchaseLine@133(VAR PurchaseLine@1000 : Record 39;AvailabilityDate@1003 : Date);
    VAR
      ReservationManagement@1001 : Codeunit 99000845;
      FullAutoReservation@1002 : Boolean;
    BEGIN
      ReservationManagement.SetPurchLine(PurchaseLine);
      WITH PurchaseLine DO
        ReservationManagement.AutoReserve(FullAutoReservation,Description,AvailabilityDate,Quantity,"Quantity (Base)");
    END;

    LOCAL PROCEDURE AutoReserveTransferLineInbound@4(VAR TransferLine@1000 : Record 5741;AvailabilityDate@1003 : Date);
    BEGIN
      AutoReserveTransferLine(TransferLine,AvailabilityDate,Direction::Inbound);
    END;

    LOCAL PROCEDURE FindTransferInboundReservationEntry@69(VAR ReservationEntry@1001 : Record 337;ItemNo@1009 : Code[20];SourceID@1004 : Code[20]);
    BEGIN
      ReservationEntry.SETRANGE(Positive,TRUE);
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Reservation);
      ReservationEntry.SETRANGE("Source Subtype",Direction::Inbound);
      ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateTransferOrderQtyOneReservedOutbound@2(VAR TransferHeader@1001 : Record 5740;VAR TransferLine@1000 : Record 5741);
    VAR
      Item@1005 : Record 27;
      FromLocation@1004 : Record 14;
      ToLocation@1003 : Record 14;
      TransitLocation@1002 : Record 14;
    BEGIN
      CreateReserveAlwaysItemWithInventoryAndLocationsChain(Item,FromLocation,ToLocation,TransitLocation);
      CreateTransferOrderQtyOne(
        TransferHeader,TransferLine,Item."No.",FromLocation.Code,ToLocation.Code,TransitLocation.Code,WORKDATE);
      AutoReserveTransferLine(TransferLine,TransferLine."Shipment Date",Direction::Outbound);
    END;

    LOCAL PROCEDURE CreateTransferLineQtyOneReservedOutbound@29(VAR TransferLine@1000 : Record 5741);
    VAR
      Item@1005 : Record 27;
      FromLocation@1004 : Record 14;
      ToLocation@1003 : Record 14;
      TransitLocation@1002 : Record 14;
      TransferHeader@1001 : Record 5740;
    BEGIN
      CreateReserveAlwaysItemWithInventoryAndLocationsChain(Item,FromLocation,ToLocation,TransitLocation);
      CreateTransferOrderQtyOne(
        TransferHeader,TransferLine,Item."No.",FromLocation.Code,ToLocation.Code,TransitLocation.Code,WORKDATE);
      AutoReserveTransferLine(TransferLine,TransferLine."Shipment Date",Direction::Outbound);
    END;

    LOCAL PROCEDURE CreateReservedDemandQtyOne@14(ItemNo@1006 : Code[20];LocationCode@1005 : Code[10];ShipmentDate@1001 : Date);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,1);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
      AutoReserveSalesLine(SalesLine,ShipmentDate);
    END;

    LOCAL PROCEDURE CreateUnreservedDemandQtyOne@40(ItemNo@1006 : Code[20];LocationCode@1005 : Code[10];ShipmentDate@1001 : Date);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,1);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateShippingAgentServiceCodeWith1YShippingTime@80(VAR ShippingAgentCode@1001 : Code[10];VAR ShippingAgentServiceCode@1002 : Code[10]);
    VAR
      ShippingAgent@1003 : Record 291;
      ShippingAgentServices@1000 : Record 5790;
      ShippingTime@1004 : DateFormula;
    BEGIN
      EVALUATE(ShippingTime,'<+1Y>');
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
      ShippingAgentCode := ShippingAgentServices."Shipping Agent Code";
      ShippingAgentServiceCode := ShippingAgentServices.Code;
    END;

    LOCAL PROCEDURE CreateSupply@130(VAR PurchaseLine@1000 : Record 39;Item@1005 : Record 27;FromLocation@1004 : Record 14);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",1);
      PurchaseLine.VALIDATE("Location Code",FromLocation.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSupplyAndDemandFromTransferLine@137(VAR PurchaseLine@1006 : Record 39;VAR TransferLine@1004 : Record 5741;ShipmentDate@1008 : Date);
    VAR
      Item@1005 : Record 27;
      FromLocation@1002 : Record 14;
      ToLocation@1001 : Record 14;
      TransitLocation@1000 : Record 14;
      TransferHeader@1003 : Record 5740;
    BEGIN
      CreateReserveAlwaysItemSupplyAndLocationsChain(PurchaseLine,Item,FromLocation,ToLocation,TransitLocation);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation.Code,ToLocation.Code,TransitLocation.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",1);
      TransferLine.VALIDATE("Shipment Date",ShipmentDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSupplyAndDemandFromTransferOrder@156(VAR PurchaseLine@1006 : Record 39;VAR TransferHeader@1000 : Record 5740;ShipmentDate@1008 : Date);
    VAR
      Item@1005 : Record 27;
      FromLocation@1004 : Record 14;
      ToLocation@1003 : Record 14;
      TransitLocation@1002 : Record 14;
      TransferLine@1001 : Record 5741;
    BEGIN
      CreateReserveAlwaysItemSupplyAndLocationsChain(PurchaseLine,Item,FromLocation,ToLocation,TransitLocation);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation.Code,ToLocation.Code,TransitLocation.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",1);
      TransferHeader.VALIDATE("Shipment Date",ShipmentDate);
      TransferHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSourceTempTrackingSpecification@6(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336;SNSpecific@1007 : Boolean;LNSpecific@1006 : Boolean) TotQty : Integer;
    VAR
      QtyInLine@1003 : Integer;
      QtyOfLines@1004 : Integer;
      i@1005 : Integer;
    BEGIN
      QtyOfLines := LibraryRandom.RandIntInRange(5,10);
      FOR i := 1 TO QtyOfLines DO BEGIN
        TempTrackingSpecification.INIT;
        IF SNSpecific THEN BEGIN
          QtyInLine := 1;
          TempTrackingSpecification."Serial No." := LibraryUtility.GenerateRandomCode(
              TempTrackingSpecification.FIELDNO("Serial No."),DATABASE::"Tracking Specification");
        END ELSE
          QtyInLine := LibraryRandom.RandInt(10);
        IF LNSpecific THEN
          TempTrackingSpecification."Lot No." := LibraryUtility.GenerateRandomCode(
              TempTrackingSpecification.FIELDNO("Lot No."),DATABASE::"Tracking Specification");
        TempTrackingSpecification."Quantity (Base)" := QtyInLine;
        TotQty += QtyInLine;
        TempTrackingSpecification."Entry No." := i;
        TempTrackingSpecification.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateOutputJournalWithTrackingSpecification@60(VAR ItemJournalLine@1001 : Record 83;VAR TempTrackingSpecification@1000 : TEMPORARY Record 336;ItemNo@1002 : Code[20];ProdOrderNo@1003 : Code[20]);
    VAR
      ItemJournalTemplate@1004 : Record 82;
      ItemJournalBatch@1005 : Record 233;
      ReservationEntry@1006 : Record 337;
    BEGIN
      LibraryInventory.CreateItemJournalTemplate(ItemJournalTemplate);
      ItemJournalTemplate.VALIDATE(Type,ItemJournalTemplate.Type::Output);
      ItemJournalTemplate.MODIFY(TRUE);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      IF TempTrackingSpecification.FINDSET THEN
        REPEAT
          LibraryInventory.CreateItemJournalLine(
            ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Output,'',0);
          ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
          ItemJournalLine.VALIDATE("Order No.",ProdOrderNo);
          ItemJournalLine.VALIDATE("Item No.",ItemNo);
          ItemJournalLine.VALIDATE("Output Quantity",TempTrackingSpecification."Quantity (Base)");
          ItemJournalLine.MODIFY(TRUE);
          LibraryItemTracking.CreateItemJournalLineItemTracking(
            ReservationEntry,ItemJournalLine,
            TempTrackingSpecification."Serial No.",TempTrackingSpecification."Lot No.",TempTrackingSpecification."Quantity (Base)");
        UNTIL TempTrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournalWithTrackingSpecification@68(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336;ItemNo@1002 : Code[20];ProdOrderNo@1003 : Code[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      CreateOutputJournalWithTrackingSpecification(ItemJournalLine,TempTrackingSpecification,ItemNo,ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CalcRegPlanAndCarryOut@50(ItemNo@1001 : Code[20];ToDate@1002 : Date);
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1003 : Record 246;
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      LibraryPlanning.CalcRegenPlanForPlanWkshPlanningParams(Item,WORKDATE,ToDate,TRUE);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.MODIFYALL("Accept Action Message",TRUE);
      RequisitionLine.FINDFIRST;
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE FindAndReleaseProductionOrderByItemNo@54(ItemNo@1001 : Code[20]) : Code[20];
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      FindProductionOrderByItemNo(ProductionOrder,ItemNo);
      LibraryManufacturing.ChangeProdOrderStatus(ProductionOrder,ProductionOrder.Status::Released,WORKDATE,FALSE);
      FindProductionOrderByItemNo(ProductionOrder,ItemNo);
      EXIT(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE FindProductionOrderByItemNo@57(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20]);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      ProductionOrder.SETRANGE(Status,ProdOrderLine.Status);
      ProductionOrder.SETRANGE("No.",ProdOrderLine."Prod. Order No.");
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyTrackingSpecification@73(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336;SourceType@1001 : Integer;SourceSubtype@1004 : Integer;SourceID@1005 : Code[20];SourceBatchName@1006 : Code[20];SourceProdOrderLine@1007 : Integer;SourceRefNo@1008 : Integer;SignFactor@1003 : Integer);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source Type",SourceType);
      ReservationEntry.SETRANGE("Source Subtype",SourceSubtype);
      ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.SETRANGE("Source Batch Name",SourceBatchName);
      ReservationEntry.SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
      ReservationEntry.SETRANGE("Source Ref. No.",SourceRefNo);
      TempTrackingSpecification.FINDSET;
      REPEAT
        ReservationEntry.SETRANGE("Serial No.",TempTrackingSpecification."Serial No.");
        ReservationEntry.SETRANGE("Lot No.",TempTrackingSpecification."Lot No.");
        ReservationEntry.FINDFIRST;
        ReservationEntry.TESTFIELD("Quantity (Base)",TempTrackingSpecification."Quantity (Base)" * SignFactor);
      UNTIL TempTrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE RunDummyConfirm@13();
    BEGIN
      IF CONFIRM(DummyQst) THEN;
    END;

    [ConfirmHandler]
    PROCEDURE CounterOfConfirmsHandler@34(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      CounterOfConfirms += 1;
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Transfer Order] [Reservation] [SCM]
    }
    END.
  }
}

