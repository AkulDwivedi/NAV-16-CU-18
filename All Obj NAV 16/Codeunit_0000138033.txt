OBJECT Codeunit 138033 SMB Navigate
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibrarySmallBusiness@1000 : Codeunit 132213;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryRandom@1006 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      PostInvoice@1007 : Boolean;
      DoNotShowPostedDocument@1008 : Boolean;
      LeaveDocWithoutPostingTxt@1003 : TextConst 'ENU=This document is not posted.';

    LOCAL PROCEDURE Initialize@4();
    VAR
      MiniPagesMapping@1000 : Record 1305;
      SalesSetup@1001 : Record 311;
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      MiniPagesMapping.DELETEALL;

      PostInvoice := TRUE;
      DoNotShowPostedDocument := FALSE;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      SalesSetup.GET;
      SalesSetup."Stockout Warning" := FALSE;
      SalesSetup.MODIFY;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(HandleConfirmationDialog)]
    PROCEDURE TestNavigatePageOpensW1Page@11();
    VAR
      SalesInvoiceHeader@1002 : Record 112;
      PostedSalesInvoice@1005 : TestPage 132;
      MiniPostedSalesInvoice@1001 : TestPage 1307;
      Navigate@1003 : TestPage 344;
      PreAssignedNo@1000 : Code[20];
    BEGIN
      Initialize;
      PostSalesInvoice(PreAssignedNo);
      MiniPostedSalesInvoice.OPENVIEW;
      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;
      MiniPostedSalesInvoice.GOTORECORD(SalesInvoiceHeader);

      Navigate.TRAP;
      MiniPostedSalesInvoice.Action59.INVOKE;

      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');

      PostedSalesInvoice.TRAP;
      Navigate."No. of Records".DRILLDOWN;
      Assert.AreEqual(PostedSalesInvoice."Pre-Assigned No.".VALUE,PreAssignedNo,'Wrong document was opened');
      PostedSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(HandleConfirmationDialog)]
    PROCEDURE TestNavigatePageOpensMiniPage@10();
    VAR
      SalesInvoiceHeader@1002 : Record 112;
      MiniPagesMapping@1004 : Record 1305;
      MiniPostedSalesInvoice@1001 : TestPage 1307;
      MiniPostedSalesInvoices@1005 : TestPage 1309;
      Navigate@1003 : TestPage 344;
      PreAssignedNo@1000 : Code[20];
    BEGIN
      Initialize;

      MiniPagesMapping.INIT;
      MiniPagesMapping."Main Page ID" := PAGE::"Posted Sales Invoice";
      MiniPagesMapping."Substitute Page ID" := PAGE::"Mini Posted Sales Invoice";
      MiniPagesMapping.INSERT;

      PostSalesInvoice(PreAssignedNo);
      MiniPostedSalesInvoices.OPENVIEW;
      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;
      MiniPostedSalesInvoices.GOTORECORD(SalesInvoiceHeader);

      Navigate.TRAP;
      MiniPostedSalesInvoices.Action25.INVOKE;

      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');

      MiniPostedSalesInvoice.TRAP;
      Navigate."No. of Records".DRILLDOWN;
      Assert.AreEqual(MiniPostedSalesInvoice."Pre-Assigned No.".VALUE,PreAssignedNo,'Wrong document was opened');
      MiniPostedSalesInvoice.CLOSE;

      MiniPostedSalesInvoice.TRAP;
      Navigate.Show.INVOKE;
      MiniPostedSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(HandleConfirmationDialog)]
    PROCEDURE TestFindByDocument@8();
    VAR
      SalesInvoiceHeader@1002 : Record 112;
      Navigate@1003 : TestPage 344;
      PreAssignedNo@1000 : Code[20];
    BEGIN
      Initialize;
      PostSalesInvoice(PreAssignedNo);
      PostSalesInvoice(PreAssignedNo);

      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;

      Navigate.OPENVIEW;
      Navigate.FindByItemReference.INVOKE;
      Navigate.FindByDocument.INVOKE;

      Navigate.DocNoFilter.VALUE(SalesInvoiceHeader."No.");
      Navigate.Find.INVOKE;
      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');

      Navigate.DocNoFilter.VALUE('');
      Navigate.PostingDateFilter.VALUE(FORMAT(SalesInvoiceHeader."Posting Date"));
      Navigate.Find.INVOKE;

      Assert.IsTrue(Navigate."No. of Records".ASINTEGER > 1,'At least two records should be shown');
      Navigate.CLOSE;
    END;

    [Test]
    [HandlerFunctions(HandleConfirmationDialog)]
    PROCEDURE TestFindByContact@5();
    VAR
      SalesInvoiceHeader@1005 : Record 112;
      Navigate@1001 : TestPage 344;
      PreAssignedNo@1000 : Code[20];
      ContactType@1006 : ' ,Vendor,Customer';
    BEGIN
      Initialize;
      PostSalesInvoice(PreAssignedNo);

      SalesInvoiceHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;

      Navigate.OPENVIEW;
      Navigate.FindByBusinessContact.INVOKE;

      Navigate.ContactType.SETVALUE(ContactType::Customer);
      Navigate.ContactNo.SETVALUE(SalesInvoiceHeader."Sell-to Customer No.");
      Navigate.Find.INVOKE;

      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');
      Navigate.CLOSE;
    END;

    [Test]
    [HandlerFunctions(HandleConfirmationDialog)]
    PROCEDURE TestFindByVendor@21();
    VAR
      PurchInvHeader@1005 : Record 122;
      Navigate@1001 : TestPage 344;
      PostedPurchaseInvoice@1007 : TestPage 138;
      PreAssignedNo@1000 : Code[20];
      ContactType@1006 : ' ,Vendor,Customer';
    BEGIN
      Initialize;
      PostPurchaseInvoice(PreAssignedNo);

      PurchInvHeader.SETFILTER("Pre-Assigned No.",PreAssignedNo);
      PurchInvHeader.FINDFIRST;

      Navigate.OPENVIEW;
      Navigate.FindByBusinessContact.INVOKE;

      Navigate.ContactType.SETVALUE(ContactType::Vendor);
      Navigate.ContactNo.SETVALUE(PurchInvHeader."Buy-from Vendor No.");
      Navigate.ExtDocNo.SETVALUE(PurchInvHeader."Vendor Invoice No.");
      Navigate.Find.INVOKE;

      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');

      PostedPurchaseInvoice.TRAP;
      Navigate.Show.INVOKE;
      PostedPurchaseInvoice.CLOSE;

      Navigate.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TestShowUnpostedDocuments@27();
    VAR
      OneSalesInvoiceCustomer@1007 : Record 18;
      MultipleSalesInvoicesCustomer@1008 : Record 18;
      OneCreditMemoCustomer@1009 : Record 18;
      MultipleCreditMemoCustomer@1010 : Record 18;
      SalesInvoice@1003 : TestPage 43;
      SalesList@1002 : TestPage 45;
      SalesCreditMemo@1001 : TestPage 44;
      Navigate@1012 : TestPage 344;
      ContactType@1006 : ' ,Vendor,Customer';
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateCustomer(OneSalesInvoiceCustomer);
      CreateSalesInvoice(OneSalesInvoiceCustomer);

      LibrarySmallBusiness.CreateCustomer(MultipleSalesInvoicesCustomer);
      CreateSalesInvoice(MultipleSalesInvoicesCustomer);
      CreateSalesInvoice(MultipleSalesInvoicesCustomer);

      LibrarySmallBusiness.CreateCustomer(OneCreditMemoCustomer);
      CreateCreditMemo(OneCreditMemoCustomer);

      LibrarySmallBusiness.CreateCustomer(MultipleCreditMemoCustomer);
      CreateCreditMemo(MultipleCreditMemoCustomer);
      CreateCreditMemo(MultipleCreditMemoCustomer);

      Navigate.OPENVIEW;
      Navigate.FindByBusinessContact.INVOKE;
      Navigate.ContactType.SETVALUE(ContactType::Customer);

      // Test opening one sales invoice
      Navigate.ContactNo.SETVALUE(OneSalesInvoiceCustomer."No.");
      Navigate.Find.INVOKE;

      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');

      SalesInvoice.TRAP;
      Navigate.Show.INVOKE;
      SalesInvoice.CLOSE;

      // Test opening multiple sales invoices
      Navigate.ContactNo.SETVALUE(MultipleSalesInvoicesCustomer."No.");
      Navigate.Find.INVOKE;
      Assert.AreEqual(2,Navigate."No. of Records".ASINTEGER,'There should be only two record on the first row');

      SalesList.TRAP;
      Navigate.Show.INVOKE;
      SalesList.CLOSE;

      // Test opening one credit memo
      Navigate.ContactNo.SETVALUE(OneCreditMemoCustomer."No.");
      Navigate.Find.INVOKE;

      Assert.AreEqual(1,Navigate."No. of Records".ASINTEGER,'There should be only one record on the first row');

      SalesCreditMemo.TRAP;
      Navigate.Show.INVOKE;
      SalesCreditMemo.CLOSE;

      // Test opening multiple sales credit memos
      Navigate.ContactNo.SETVALUE(MultipleCreditMemoCustomer."No.");
      Navigate.Find.INVOKE;
      Assert.AreEqual(2,Navigate."No. of Records".ASINTEGER,'There should be only two record on the first row');

      SalesList.TRAP;
      Navigate.Show.INVOKE;
      SalesList.CLOSE;

      Navigate.CLOSE;
    END;

    LOCAL PROCEDURE PostSalesInvoice@20(VAR SalesInvoiceNo@1004 : Code[20]);
    VAR
      Customer@1003 : Record 18;
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));
      MiniSalesInvoice.SalesLines.NEW;

      FindSalesHeader(Customer,SalesHeader);
      SalesInvoiceNo := SalesHeader."No.";

      LibraryVariableStorage.Enqueue(PostInvoice);
      LibraryVariableStorage.Enqueue(DoNotShowPostedDocument);
      MiniSalesInvoice.Post.INVOKE;
    END;

    LOCAL PROCEDURE PostPurchaseInvoice@65(VAR PurchaseInvoiceNo@1000 : Code[20]);
    VAR
      Vendor@1003 : Record 23;
      Item@1002 : Record 27;
      PurchaseHeader@1004 : Record 38;
      MiniPurchaseInvoice@1001 : TestPage 1354;
    BEGIN
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      MiniPurchaseInvoice."Vendor Invoice No.".SETVALUE(
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));

      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseInvoice.PurchLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));
      MiniPurchaseInvoice.PurchLines.NEW;

      FindPurchaseHeader(Vendor,PurchaseHeader);
      PurchaseInvoiceNo := PurchaseHeader."No.";

      LibraryVariableStorage.Enqueue(PostInvoice);
      LibraryVariableStorage.Enqueue(DoNotShowPostedDocument);
      MiniPurchaseInvoice.Post.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesInvoice@28(Customer@1003 : Record 18);
    VAR
      Item@1002 : Record 27;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));
      MiniSalesInvoice.SalesLines.NEW;

      MiniSalesInvoice.CLOSE;
    END;

    LOCAL PROCEDURE CreateCreditMemo@30(Customer@1003 : Record 18);
    VAR
      Item@1002 : Record 27;
      MiniSalesCreditMemo@1000 : TestPage 1319;
    BEGIN
      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesCreditMemo.OPENNEW;
      MiniSalesCreditMemo."Sell-to Customer Name".SETVALUE(Customer.Name);

      MiniSalesCreditMemo.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesCreditMemo.SalesLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));
      MiniSalesCreditMemo.SalesLines.NEW;

      MiniSalesCreditMemo.CLOSE;
    END;

    LOCAL PROCEDURE FindSalesHeader@1(Customer@1000 : Record 18;VAR SalesHeader@1001 : Record 36);
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      Assert.AreEqual(SalesHeader.COUNT,1,'Could not find the document or more documents were found');
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@7(Vendor@1000 : Record 23;VAR PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      Assert.AreEqual(PurchaseHeader.COUNT,1,'Could not find the document or more documents were found');
      PurchaseHeader.FINDFIRST;
    END;

    [ConfirmHandler]
    PROCEDURE HandleConfirmationDialog@2(Question@1000 : Text;VAR Reply@1001 : Boolean);
    VAR
      SelectedReply@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SelectedReply);
      Reply := SelectedReply;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@56(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,LeaveDocWithoutPostingTxt) > 0,Question);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Navigate] [SMB]
    }
    END.
  }
}

