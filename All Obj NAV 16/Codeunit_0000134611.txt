OBJECT Codeunit 134611 Test Nav App Permissions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      User@1011 : Record 2000000120;
      UserGroup@1010 : Record 9000;
      PermissionSet@1009 : Record 2000000004;
      TenantPermissionSet@1008 : Record 2000000165;
      AppPermissionSet@1007 : Record 2000000165;
      Permission@1006 : Record 2000000005;
      Assert@1002 : Codeunit 130000;
      LibraryPermissions@1012 : Codeunit 132214;
      LibraryUtility@1016 : Codeunit 131000;
      NullGuid@1004 : GUID;
      PermissionRoles@1005 : ARRAY [2] OF Code[20];
      TenantPermissionRoles@1013 : ARRAY [2] OF Code[20];
      AppPermissionRoles@1014 : ARRAY [2] OF Code[20];
      AppGUIDs@1015 : ARRAY [2] OF GUID;

    LOCAL PROCEDURE InitializeData@1();
    VAR
      NavApp@1000 : Record 2000000160;
      i@1001 : Integer;
    BEGIN
      CLEAR(NullGuid); // Ensure the null GUID is cleared

      User.DELETEALL;

      // Need to add at least one super user.
      CODEUNIT.RUN(CODEUNIT::"Users - Create Super User");

      // Set up 3 users
      FOR i := 1 TO 3 DO
        LibraryPermissions.CreateUser(User,LibraryUtility.GenerateRandomAlphabeticText(10,0),FALSE);

      // Set up 3 groups
      FOR i := 1 TO 3 DO
        LibraryPermissions.CreateUserGroup(
          UserGroup,LibraryUtility.GenerateRandomCode(UserGroup.FIELDNO(Code),DATABASE::"User Group"));

      // Set up 2 system permission sets
      FOR i := 1 TO 2 DO BEGIN
        PermissionRoles[i] := LibraryUtility.GenerateRandomCode(PermissionSet.FIELDNO("Role ID"),DATABASE::"Permission Set");
        LibraryPermissions.CreatePermissionSet(PermissionSet,PermissionRoles[i]);
      END;

      // Add permissions to the new permission sets
      PermissionSet.FIND('-');
      LibraryPermissions.AddPermission(PermissionRoles[1],Permission."Object Type"::Report,REPORT::Statement);
      LibraryPermissions.AddPermission(PermissionRoles[1],Permission."Object Type"::Report,REPORT::"Mini Statement");

      PermissionSet.NEXT;
      LibraryPermissions.AddPermission(PermissionRoles[2],Permission."Object Type"::Report,REPORT::"Sales - Quote");
      LibraryPermissions.AddPermission(PermissionRoles[2],Permission."Object Type"::Report,REPORT::"Mini Sales - Quote");

      // Set up 2 tenant permission sets (non-app)
      FOR i := 1 TO 2 DO BEGIN
        TenantPermissionRoles[i] :=
          LibraryUtility.GenerateRandomCode(TenantPermissionSet.FIELDNO("Role ID"),DATABASE::"Permission Set");
        LibraryPermissions.CreateTenantPermissionSet(TenantPermissionSet,TenantPermissionRoles[i],NullGuid);
      END;

      // Add permissions to the new permission sets
      TenantPermissionSet.FIND('-');
      LibraryPermissions.AddPermission(TenantPermissionRoles[1],Permission."Object Type"::Table,DATABASE::Customer);
      LibraryPermissions.AddPermission(TenantPermissionRoles[1],Permission."Object Type"::Table,DATABASE::Vendor);
      TenantPermissionSet.NEXT;
      LibraryPermissions.AddPermission(TenantPermissionRoles[2],Permission."Object Type"::Table,DATABASE::"Sales Header");
      LibraryPermissions.AddPermission(TenantPermissionRoles[2],Permission."Object Type"::Table,DATABASE::"Sales Invoice Header");

      // Set up 2 Nav App permission sets
      FOR i := 1 TO 2 DO BEGIN
        AppPermissionRoles[i] := LibraryUtility.GenerateRandomCode(AppPermissionSet.FIELDNO("Role ID"),DATABASE::"Permission Set");
        AppGUIDs[i] := CREATEGUID;
        LibraryPermissions.CreateTenantPermissionSet(AppPermissionSet,AppPermissionRoles[i],AppGUIDs[i]);
      END;
      NavApp.INIT;
      NavApp."Package ID" := AppGUIDs[1];
      NavApp.ID := AppGUIDs[1];
      NavApp.Name := LibraryUtility.GenerateRandomAlphabeticText(10,0);
      NavApp.INSERT;
      NavApp.INIT;
      NavApp."Package ID" := AppGUIDs[2];
      NavApp.Name := LibraryUtility.GenerateRandomAlphabeticText(10,0);
      NavApp.ID := AppGUIDs[2];
      NavApp.INSERT;

      // Add permissions to the new permission sets
      AppPermissionSet.GET(AppGUIDs[1],AppPermissionRoles[1]);
      LibraryPermissions.AddPermission(AppPermissionRoles[1],Permission."Object Type"::Table,PAGE::"Customer Card");
      LibraryPermissions.AddPermission(AppPermissionRoles[1],Permission."Object Type"::Table,PAGE::"Vendor Card");
      AppPermissionSet.NEXT;
      LibraryPermissions.AddPermission(AppPermissionRoles[2],Permission."Object Type"::Table,PAGE::"Customer Statistics");
      LibraryPermissions.AddPermission(AppPermissionRoles[2],Permission."Object Type"::Table,PAGE::"Vendor Statistics");
    END;

    [Normal]
    PROCEDURE CleanupData@3();
    VAR
      User@1006 : Record 2000000120;
      UserSetup@1005 : Record 91;
      AccessControl@1004 : Record 2000000053;
      UserGroup@1003 : Record 9000;
      UserGroupMember@1002 : Record 9001;
      UserGroupAccessControl@1001 : Record 9002;
      UserGroupPermissionSet@1000 : Record 9003;
    BEGIN
      // When we add any user into User table Server switches authentication mode
      // and further tests fail with permission error until Server is restarted.
      // Automatic rollback in test isolation does not revert Server's authentication mode.
      // In this case we need manually clean up User table if test passed and User table
      // is modified during this test.
      // User Setup must cleaned too, due to reference to User table.
      User.DELETEALL;
      UserSetup.DELETEALL;
      AccessControl.DELETEALL;
      UserGroup.DELETEALL;
      UserGroupMember.DELETEALL;
      UserGroupAccessControl.DELETEALL;
      UserGroupPermissionSet.DELETEALL;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestAggregatePermissionSetsTable@7();
    VAR
      AggregatePermissionSet@1000 : Record 2000000167;
    BEGIN
      // Test that the aggregate permission set table contains permission sets from the system
      // and the Nav App

      // Init
      InitializeData;

      // Execute

      // Verify

      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::System,NullGuid,PermissionRoles[1]);
      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::System,NullGuid,PermissionRoles[2]);

      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,NullGuid,TenantPermissionRoles[1]);
      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,NullGuid,TenantPermissionRoles[2]);

      // Ensure the App-level permissions are set appropriate and visibile in both tables.
      AppPermissionSet.GET(AppGUIDs[1],AppPermissionRoles[1]);
      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,AppPermissionSet."App ID",AppPermissionSet."Role ID");
      AppPermissionSet.GET(AppGUIDs[2],AppPermissionRoles[2]);
      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,AppPermissionSet."App ID",AppPermissionSet."Role ID");

      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestViewAggregatePermissionsSets@8();
    VAR
      AggregatePermissionSet@1000 : Record 2000000167;
      PermissionSets@1001 : TestPage 9802;
    BEGIN
      // Test that the aggregate permission sets are viewable in the Permission Sets page
      // Init
      InitializeData;

      // Execute
      PermissionSets.OPENVIEW;

      // Find a system permission set
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::System);
      AggregatePermissionSet.FINDFIRST;
      PermissionSets.GOTORECORD(AggregatePermissionSet);

      // Find a tenant permission set

      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",NullGuid);
      AggregatePermissionSet.FINDFIRST;
      PermissionSets.GOTORECORD(AggregatePermissionSet);

      // Find the application permission sets

      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.FINDFIRST;
      PermissionSets.GOTORECORD(AggregatePermissionSet);
      Assert.AreEqual(AggregatePermissionSet."App Name",PermissionSets."App Name".VALUE,'App Name mismatched');
      Assert.AreEqual(AggregatePermissionSet."Role ID",PermissionSets.PermissionSet.VALUE,'Role ID mismatch');

      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[2]);
      AggregatePermissionSet.FINDFIRST;
      PermissionSets.GOTORECORD(AggregatePermissionSet);
      Assert.AreEqual(AggregatePermissionSet."App Name",PermissionSets."App Name".VALUE,'App Name mismatched');
      Assert.AreEqual(AggregatePermissionSet."Role ID",PermissionSets.PermissionSet.VALUE,'Role ID mismatch');

      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestViewAggregatePermissionsSetsByUser@9();
    VAR
      AggregatePermissionSet@1001 : Record 2000000167;
      PermissionSetByUser@1000 : TestPage 9816;
    BEGIN
      // Test that the aggregate permission sets are viewable in the Permission Sets By User page
      // Init
      InitializeData;

      // Execute
      PermissionSetByUser.OPENVIEW;

      // Verify

      // Find the application permission sets
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.FINDFIRST;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      Assert.AreEqual(AggregatePermissionSet."App Name",PermissionSetByUser."App Name".VALUE,'App Name mismatched');
      Assert.AreEqual(AggregatePermissionSet."Role ID",PermissionSetByUser."Role ID".VALUE,'Role ID mismatch');

      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[2]);
      AggregatePermissionSet.FINDFIRST;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      Assert.AreEqual(AggregatePermissionSet."App Name",PermissionSetByUser."App Name".VALUE,'App Name mismatched');
      Assert.AreEqual(AggregatePermissionSet."Role ID",PermissionSetByUser."Role ID".VALUE,'Role ID mismatch');

      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestViewAggregatePermissionsSetsByUserGroup@10();
    VAR
      AggregatePermissionSet@1001 : Record 2000000167;
      PermissionSetByUserGroup@1000 : TestPage 9837;
    BEGIN
      // Test that the aggregate permission sets are viewable in the Permission Sets By User Group page
      // Init
      InitializeData;

      // Execute
      PermissionSetByUserGroup.OPENVIEW;

      // Verify
      // Find the application permission sets
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.FINDFIRST;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      Assert.AreEqual(AggregatePermissionSet."App Name",PermissionSetByUserGroup."App Name".VALUE,'App Name mismatched');
      Assert.AreEqual(AggregatePermissionSet."Role ID",PermissionSetByUserGroup."Role ID".VALUE,'Role ID mismatch');

      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[2]);
      AggregatePermissionSet.FINDFIRST;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      Assert.AreEqual(AggregatePermissionSet."App Name",PermissionSetByUserGroup."App Name".VALUE,'App Name mismatched');
      Assert.AreEqual(AggregatePermissionSet."Role ID",PermissionSetByUserGroup."Role ID".VALUE,'Role ID mismatch');

      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestAddPermissionSet@13();
    VAR
      AggregatePermissionSet@1001 : Record 2000000167;
      PermissionSets@1000 : TestPage 9802;
      RoleID@1002 : Code[10];
      Name@1003 : Text;
    BEGIN
      // Test that a permission set can be added through the Permission Set Page
      // Init
      InitializeData;
      RoleID := LibraryUtility.GenerateRandomCode(PermissionSet.FIELDNO("Role ID"),DATABASE::"Permission Set");
      Name := LibraryUtility.GenerateRandomAlphabeticText(10,0);

      // Execute
      PermissionSets.OPENEDIT;
      PermissionSets.NEW;
      PermissionSets.PermissionSet.VALUE := RoleID;
      PermissionSets."<Name>".VALUE := Name;
      PermissionSets.NEXT;
      PermissionSets.PREVIOUS;

      // Verify
      Assert.AreEqual(RoleID,PermissionSets.PermissionSet.VALUE,'Role ID mismatch');
      Assert.AreEqual(Name,PermissionSets."<Name>".VALUE,'Name mismatch');

      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::System,NullGuid,RoleID);

      PermissionSets.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestAddPermissionsByUser@12();
    VAR
      AggregatePermissionSet@1000 : Record 2000000167;
      PermissionSetByUser@1001 : TestPage 9816;
      PermSetEnabled@1002 : Boolean;
    BEGIN
      // Test that users can be assigned Nav App permissions in the Permission Sets By User page
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column1.CAPTION));
      PermissionSetByUser.Column1.SETVALUE(TRUE);
      PermissionSetByUser.CLOSE;

      // Verify
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.Column1.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO('Expected permission set %1 to be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column1.CAPTION));

      PermissionSetByUser.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestAddPermissionsByUserAll@4();
    VAR
      AggregatePermissionSet@1002 : Record 2000000167;
      PermissionSetByUser@1001 : TestPage 9816;
      PermSetEnabled@1000 : Boolean;
    BEGIN
      // Test that permissions can be added to Nav App permissions in the Permission Sets By User page by selecting the item to select all
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.AllUsersHavePermission.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",
          PermissionSetByUser.AllUsersHavePermission.CAPTION));
      PermissionSetByUser.AllUsersHavePermission.SETVALUE(TRUE);
      PermissionSetByUser.CLOSE;

      // Verify
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.AllUsersHavePermission.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUser."Role ID",
          PermissionSetByUser.AllUsersHavePermission.CAPTION));

      EVALUATE(PermSetEnabled,PermissionSetByUser.Column1.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO('Expected permission set %1 to be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column1.CAPTION));

      EVALUATE(PermSetEnabled,PermissionSetByUser.Column2.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO('Expected permission set %1 to be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column2.CAPTION));

      PermissionSetByUser.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestAddPermissionsByUserGroup@11();
    VAR
      AggregatePermissionSet@1002 : Record 2000000167;
      PermissionSetByUserGroup@1001 : TestPage 9837;
      PermSetEnabled@1000 : Boolean;
    BEGIN
      // Test that users can be assigned Nav App permissions in the Permission Sets By User page
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.Column1.CAPTION));
      PermissionSetByUserGroup.Column1.SETVALUE(TRUE);
      PermissionSetByUserGroup.CLOSE;

      // Verify
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUserGroup."Role ID",PermissionSetByUserGroup.Column1.CAPTION));

      PermissionSetByUserGroup.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestAddPermissionsByUserGroupAll@17();
    VAR
      AggregatePermissionSet@1002 : Record 2000000167;
      PermissionSetByUserGroup@1001 : TestPage 9837;
      PermSetEnabled@1000 : Boolean;
    BEGIN
      // Test that permissions can be added to Nav App permissions in the Permission Sets By User page by selecting the item to select all
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.AllUsersHavePermission.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.AllUsersHavePermission.CAPTION));
      PermissionSetByUserGroup.AllUsersHavePermission.SETVALUE(TRUE);
      PermissionSetByUserGroup.CLOSE;

      // Verify
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.AllUsersHavePermission.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.AllUsersHavePermission.CAPTION));

      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUserGroup."Role ID",PermissionSetByUserGroup.Column1.CAPTION));

      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column2.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUserGroup."Role ID",PermissionSetByUserGroup.Column2.CAPTION));

      PermissionSetByUserGroup.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestPreventCopyPermissionSet@14();
    VAR
      AggregatePermissionSet@1003 : Record 2000000167;
      PermissionSets@1002 : TestPage 9802;
    BEGIN
      // Test that permission sets can be removed for system permissions and not for Nav App permissions
      // Init
      InitializeData;

      // Execute
      PermissionSets.OPENEDIT;

      AggregatePermissionSet.GET(AggregatePermissionSet.Scope::Tenant,AppGUIDs[1],AppPermissionRoles[1]);
      PermissionSets.GOTORECORD(AggregatePermissionSet);

      // Nothing should happen on invoke - button should be disabled
      PermissionSets."<CopyPermissionSet>".INVOKE;

      // Verify that the permission set is not duplicated into the PermissionSet table
      ASSERTERROR PermissionSet.GET(AggregatePermissionSet."Role ID");

      PermissionSets.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestRemovePermissionsByUser@15();
    VAR
      AggregatePermissionSet@1000 : Record 2000000167;
      PermissionSetByUser@1001 : TestPage 9816;
      PermSetEnabled@1002 : Boolean;
    BEGIN
      // Test removing a permission for a given user through the UI
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column1.CAPTION));
      PermissionSetByUser.Column1.SETVALUE(TRUE);
      PermissionSetByUser.CLOSE;

      // Delete the permission
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      PermissionSetByUser.Column1.SETVALUE(FALSE);
      PermissionSetByUser.CLOSE;

      // Verify
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column1.CAPTION));
      PermissionSetByUser.CLOSE;

      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestRemovePermissionsByUserAll@5();
    VAR
      AggregatePermissionSet@1001 : Record 2000000167;
      PermissionSetByUser@1000 : TestPage 9816;
      PermSetEnabled@1002 : Boolean;
    BEGIN
      // Test that permissions can be added to Nav App permissions in the Permission Sets By User page by selecting the item to select all
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.AllUsersHavePermission.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",
          PermissionSetByUser.AllUsersHavePermission.CAPTION));
      PermissionSetByUser.AllUsersHavePermission.SETVALUE(TRUE);
      PermissionSetByUser.CLOSE;

      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.AllUsersHavePermission.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUser."Role ID",
          PermissionSetByUser.AllUsersHavePermission.CAPTION));
      PermissionSetByUser.AllUsersHavePermission.SETVALUE(FALSE);
      PermissionSetByUser.CLOSE;

      // Verify
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUser.AllUsersHavePermission.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",
          PermissionSetByUser.AllUsersHavePermission.CAPTION));
      EVALUATE(PermSetEnabled,PermissionSetByUser.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column1.CAPTION));
      EVALUATE(PermSetEnabled,PermissionSetByUser.Column2.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUser."Role ID",PermissionSetByUser.Column2.CAPTION));

      PermissionSetByUser.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestRemovePermissionsByUserGroup@16();
    VAR
      AggregatePermissionSet@1002 : Record 2000000167;
      PermissionSetByUserGroup@1001 : TestPage 9837;
      PermSetEnabled@1000 : Boolean;
    BEGIN
      // Test that users can be assigned Nav App permissions in the Permission Sets By User page
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.Column1.CAPTION));
      PermissionSetByUserGroup.Column1.SETVALUE(TRUE);
      PermissionSetByUserGroup.CLOSE;

      // Verify
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUserGroup."Role ID",PermissionSetByUserGroup.Column1.CAPTION));
      PermissionSetByUserGroup.Column1.SETVALUE(FALSE);
      PermissionSetByUserGroup.CLOSE;

      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.Column1.CAPTION));

      PermissionSetByUserGroup.CLOSE;
      CleanupData;
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestRemovePermissionsByUserGroupAll@18();
    VAR
      AggregatePermissionSet@1002 : Record 2000000167;
      PermissionSetByUserGroup@1001 : TestPage 9837;
      PermSetEnabled@1000 : Boolean;
    BEGIN
      // Test that permissions can be added to Nav App permissions in the Permission Sets By User page by selecting the item to select all
      // Init
      InitializeData;

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Execute
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.AllUsersHavePermission.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.AllUsersHavePermission.CAPTION));
      PermissionSetByUserGroup.AllUsersHavePermission.SETVALUE(TRUE);
      PermissionSetByUserGroup.CLOSE;

      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.AllUsersHavePermission.VALUE);
      Assert.IsTrue(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.AllUsersHavePermission.CAPTION));
      PermissionSetByUserGroup.AllUsersHavePermission.SETVALUE(FALSE);
      PermissionSetByUserGroup.CLOSE;

      // Verify
      PermissionSetByUserGroup.OPENVIEW;
      PermissionSetByUserGroup.GOTORECORD(AggregatePermissionSet);
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.AllUsersHavePermission.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.AllUsersHavePermission.CAPTION));
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column1.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.Column1.CAPTION));
      EVALUATE(PermSetEnabled,PermissionSetByUserGroup.Column2.VALUE);
      Assert.IsFalse(
        PermSetEnabled,
        STRSUBSTNO(
          'Expected permission set %1 to not be enabled for %2',PermissionSetByUserGroup."Role ID",
          PermissionSetByUserGroup.Column2.CAPTION));

      PermissionSetByUserGroup.CLOSE;
      CleanupData;
    END;

    [Normal]
    [HandlerFunctions(PermissionSetLookupHandler)]
    [TransactionModel(AutoRollback)]
    PROCEDURE TestPermissionSetLookup@19();
    VAR
      AggregatePermissionSet@1002 : Record 2000000167;
      AccessControl@1004 : Record 2000000053;
      User@1003 : Record 2000000120;
      UserPermissionSets@1001 : TestPage 9808;
      PermissionSetByUser@1005 : TestPage 9816;
    BEGIN
      // Test the lookup page for aggregate permission sets
      // Init
      InitializeData;

      User.FINDLAST; // Find a record

      AggregatePermissionSet.SETRANGE("App ID",AppGUIDs[1]);
      AggregatePermissionSet.SETRANGE(Scope,AggregatePermissionSet.Scope::Tenant);
      AggregatePermissionSet.FINDFIRST;

      // Set the permission - should generate an AccessControl record
      PermissionSetByUser.OPENVIEW;
      PermissionSetByUser.GOTORECORD(AggregatePermissionSet);
      PermissionSetByUser.AllUsersHavePermission.SETVALUE(TRUE);
      PermissionSetByUser.CLOSE;

      // Execute
      AccessControl.SETRANGE("User Security ID",User."User Security ID");
      AccessControl.FINDFIRST;

      UserPermissionSets.OPENEDIT;
      UserPermissionSets.FILTER.SETFILTER("User Security ID",User."User Security ID");
      UserPermissionSets.GOTORECORD(AccessControl);
      UserPermissionSets."<Permission Set>".LOOKUP;

      UserPermissionSets.CLOSE;

      CleanupData;
    END;

    [ModalPageHandler]
    PROCEDURE PermissionSetLookupHandler@24(VAR PermissionSetLookup@1000 : TestPage 9841);
    BEGIN
      PermissionSetLookup.LAST;
      PermissionSetLookup.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

