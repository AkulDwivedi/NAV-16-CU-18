OBJECT Codeunit 134600 Report Layout Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      WrongRegNoErr@1001 : TextConst 'ENU=Wrong Company Registration Number';
      WrongRegNoLblErr@1002 : TextConst 'ENU=Wrong "Registration No." field caption';
      LibrarySales@1003 : Codeunit 130509;
      Usage@1004 : 'Order Confirmation,Work Order,Pick Instruction';

    [Test]
    PROCEDURE TestReportLayoutSelectionOnInsert@8();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      // Init
      ReportLayoutSelection.INIT;
      Assert.AreEqual('',ReportLayoutSelection."Company Name",'');

      // Exercise
      ASSERTERROR ReportLayoutSelection.INSERT(TRUE);
      IF ReportLayoutSelection.GET(4,COMPANYNAME) THEN
        ReportLayoutSelection.DELETE;
      ReportLayoutSelection."Report ID" := 4;
      ReportLayoutSelection.INSERT(TRUE);

      // Verify
      Assert.AreEqual(COMPANYNAME,ReportLayoutSelection."Company Name",'');
    END;

    [Test]
    PROCEDURE TestReportLayoutSelectionType@9();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      // Init
      ReportLayoutSelection.INIT;
      ReportLayoutSelection."Report ID" := 4; // does not have a Word layout.
      ReportLayoutSelection.VALIDATE(Type,ReportLayoutSelection.Type::"Custom Layout");
      ReportLayoutSelection."Custom Report Layout ID" := 1;

      // Exercise
      ReportLayoutSelection.VALIDATE(Type,ReportLayoutSelection.Type::"RDLC (built-in)");

      // Verify
      Assert.AreEqual(0,ReportLayoutSelection."Custom Report Layout ID",'');

      ASSERTERROR ReportLayoutSelection.VALIDATE(Type,ReportLayoutSelection.Type::"Word (built-in)");
    END;

    [Test]
    PROCEDURE TestReportLayoutSelectionReportLayoutID@22();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
    BEGIN
      // Init
      ReportLayoutSelection.INIT;
      ReportLayoutSelection."Report ID" := 4;
      CustomReportLayout.INIT;
      CustomReportLayout."Report ID" := 4;
      CustomReportLayout.ID := 0;
      CustomReportLayout.INSERT(TRUE);

      // Exercise
      ReportLayoutSelection.VALIDATE("Custom Report Layout ID",CustomReportLayout.ID);

      // Verify
      Assert.IsTrue(ReportLayoutSelection.Type = ReportLayoutSelection.Type::"Custom Layout",'');

      // Exercise
      ReportLayoutSelection.VALIDATE("Custom Report Layout ID",0);

      // Verify
      Assert.IsTrue(ReportLayoutSelection.Type = ReportLayoutSelection.Type::"RDLC (built-in)",'');
    END;

    [Test]
    PROCEDURE TestReportLayoutSelectionReportIsProcessingOnly@26();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      // Verify
      Assert.IsFalse(ReportLayoutSelection.IsProcessingOnly(REPORT::"Detail Trial Balance"),'');
      Assert.IsTrue(ReportLayoutSelection.IsProcessingOnly(REPORT::"Copy Sales Document"),'');
      Assert.IsFalse(ReportLayoutSelection.HasWordLayout(REPORT::"Detail Trial Balance"),'');
    END;

    [Test]
    PROCEDURE TestReportLayoutSelectionHasCustomLayout@37();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      ApplicationManagement@1002 : Codeunit 1;
    BEGIN
      // Init
      CustomReportLayout.INIT;
      CustomReportLayout."Report ID" := 4;
      CustomReportLayout.Type := CustomReportLayout.Type::RDLC;
      CustomReportLayout.ID := 0;
      CustomReportLayout.INSERT(TRUE);

      IF ReportLayoutSelection.GET(4,COMPANYNAME) THEN
        ReportLayoutSelection.DELETE;
      ReportLayoutSelection.INIT;
      ReportLayoutSelection."Report ID" := 4;
      ReportLayoutSelection.VALIDATE("Custom Report Layout ID",CustomReportLayout.ID);
      ReportLayoutSelection.INSERT(TRUE);

      // Verify
      Assert.AreEqual(1,ApplicationManagement.HasCustomLayout(0,4),'Expected a custom RDLC');

      // Variations
      CustomReportLayout.Type := CustomReportLayout.Type::Word;
      CustomReportLayout.MODIFY;
      Assert.AreEqual(2,ApplicationManagement.HasCustomLayout(0,4),'Expected a custom Word');
      CustomReportLayout.DELETE;
      Assert.AreEqual(0,ApplicationManagement.HasCustomLayout(0,4),'Expected default (no layout found)');
      Assert.AreEqual(0,ApplicationManagement.HasCustomLayout(0,99999),'Expected default (no such report)');
      ASSERTERROR ApplicationManagement.HasCustomLayout(99,1306); // uknown type
    END;

    [Test]
    PROCEDURE TestTableCustomReportLayoutTriggers@3();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::Word,TRUE);

      Assert.AreEqual(USERID,CustomReportLayout."Last Modified by User",'Wrong user ID.');
      Assert.AreNotEqual(FORMAT(0DT),FORMAT(CustomReportLayout."Last Modified"),'A date-time was expected.');

      CustomReportLayout.DELETE(TRUE);

      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::Word,TRUE);
      CustomReportLayout.MODIFY;
      CustomReportLayout.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TestTableCustomReportLayoutUpdateLayout@13();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::Word,TRUE);
      Assert.AreEqual('',CustomReportLayout.TryUpdateLayout(FALSE),'');
      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::RDLC,TRUE);
      Assert.AreEqual('',CustomReportLayout.TryUpdateLayout(FALSE),'');
    END;

    [Test]
    PROCEDURE TestTableCustomReportLayoutValidateLayout@18();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      // RDLC
      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::RDLC,TRUE);
      Assert.IsTrue(CustomReportLayout.ValidateLayout(FALSE,FALSE),'');
      // Word
      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::Word,TRUE);
      Assert.IsTrue(CustomReportLayout.ValidateLayout(FALSE,FALSE),'');
      CLEAR(CustomReportLayout.Layout);
      CustomReportLayout.MODIFY;
      Assert.IsFalse(CustomReportLayout.ValidateLayout(FALSE,FALSE),'');
    END;

    [Test]
    [HandlerFunctions(Report134600HandlerCancel)]
    PROCEDURE TestCustomtLayoutRunReport@20();
    VAR
      CustomReportLayout@1001 : Record 9650;
      CustomReportLayouts@1000 : TestPage 9650;
    BEGIN
      // Init
      CustomReportLayout.DELETEALL;
      CustomReportLayout.INIT;
      CustomReportLayout."Report ID" := 134600;
      CustomReportLayout.ID := 0;
      CustomReportLayout.INSERT(TRUE);
      COMMIT;  // Necessary as the report is run modally.

      // Exercise - opens a request page for report 134600.
      CustomReportLayouts.OPENVIEW;
      CustomReportLayouts.FIRST;
      Assert.AreEqual(134600,CustomReportLayouts."Report ID".ASINTEGER,'');
      CustomReportLayouts.RunReport.INVOKE;
    END;

    [Test]
    PROCEDURE TestCopyRecord@1();
    VAR
      CustomReportLayout@1000 : Record 9650;
      OldID@1001 : Integer;
    BEGIN
      InitCustomReportLayout(CustomReportLayout,CustomReportLayout.Type::Word,TRUE);
      OldID := CustomReportLayout.ID;
      CustomReportLayout.CopyRecord;
      Assert.AreNotEqual(OldID,CustomReportLayout.ID,'');
    END;

    [Test]
    PROCEDURE TestImportLayout@2();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.DELETEALL;

      // Negative test
      ASSERTERROR CustomReportLayout.ImportLayout('');

      // Import different types
      TestImportLayoutByType(CustomReportLayout.Type::Word);
      TestImportLayoutByType(CustomReportLayout.Type::RDLC);
    END;

    [Test]
    PROCEDURE TestExportSchema@31();
    VAR
      CustomReportLayout@1000 : Record 9650;
      FileManagement@1001 : Codeunit 419;
      DefaultFileName@1002 : Text;
    BEGIN
      // init
      CustomReportLayout.InitBuiltInLayout(1306,CustomReportLayout.Type::Word);
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.SETRANGE(Type,CustomReportLayout.Type::Word);
      CustomReportLayout.FINDFIRST;
      DefaultFileName := CustomReportLayout.ExportLayout(FileManagement.ClientTempFileName('xml'),FALSE);

      // Execute
      DefaultFileName := CustomReportLayout.ExportSchema(DefaultFileName,FALSE);

      // verify
      Assert.IsTrue(FileManagement.ClientFileExists(DefaultFileName),'');
      FileManagement.DeleteClientFile(DefaultFileName);
    END;

    [Test]
    PROCEDURE TestValidateCustomRrdlcOk@11();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      // init
      CustomReportLayout.InitBuiltInLayout(1306,CustomReportLayout.Type::RDLC);
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.SETRANGE(Type,CustomReportLayout.Type::RDLC);
      CustomReportLayout.FINDFIRST;

      // Execute / verify
      Assert.IsTrue(CustomReportLayout.ValidateLayout(FALSE,FALSE),'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestValidateCustomRrdlcFailed@41();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      // init
      CustomReportLayout.InitBuiltInLayout(1306,CustomReportLayout.Type::RDLC);
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.SETRANGE(Type,CustomReportLayout.Type::RDLC);
      CustomReportLayout.FINDFIRST;
      CustomReportLayout."Report ID" := 1305; // Force invalid rdlc.

      // Execute
      ASSERTERROR CustomReportLayout.ValidateLayout(TRUE,FALSE);

      // Validate
      Assert.AreEqual('The RDLC layout action has been canceled because of validation errors.',GETLASTERRORTEXT,'');
    END;

    [Test]
    PROCEDURE TestValidateCustomRrdlcFailed2@21();
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      // init
      CustomReportLayout.InitBuiltInLayout(1306,CustomReportLayout.Type::RDLC);
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.SETRANGE(Type,CustomReportLayout.Type::RDLC);
      CustomReportLayout.FINDFIRST;
      CustomReportLayout."Report ID" := 1305; // Force invalid rdlc.

      // Execute
      ASSERTERROR CustomReportLayout.ValidateLayout(FALSE,FALSE);

      // Validate
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,'The RDLC layout does not comply with the current report design (for example') = 1,'');
    END;

    [Test]
    PROCEDURE TestCod1MergeDocument@16();
    VAR
      ReportLayoutSelection@1008 : Record 9651;
      SalesInvoiceHeader@1004 : Record 112;
      ApplicationManagement@1000 : Codeunit 1;
      FileManagement@1002 : Codeunit 419;
      InStr@1005 : InStream;
      FileXml@1007 : File;
      FileNameDocx@1003 : Text;
      FileNameXml@1006 : Text;
    BEGIN
      FileNameXml := FileManagement.ServerTempFileName('xml');
      FileNameDocx := FileManagement.ServerTempFileName('docx');

      // Negative test, 'SaveAsWord'
      ASSERTERROR ApplicationManagement.MergeDocument(99,1306,1,InStr,FileNameDocx); // uknown object type

      InitCompanySetup;
      IF ReportLayoutSelection.GET(1306,COMPANYNAME) THEN
        ReportLayoutSelection.DELETE;

      // Activate built-in Word layout
      ReportLayoutSelection.INIT;
      ReportLayoutSelection."Report ID" := 1306;
      ReportLayoutSelection.Type := ReportLayoutSelection.Type::"Word (built-in)";
      ReportLayoutSelection.INSERT(TRUE);

      IF SalesInvoiceHeader.FINDFIRST THEN
        SalesInvoiceHeader.SETRECFILTER;
      REPORT.SAVEASXML(1306,FileNameXml,SalesInvoiceHeader);
      FileXml.OPEN(FileNameXml,TEXTENCODING::UTF16);
      FileXml.CREATEINSTREAM(InStr);

      ApplicationManagement.MergeDocument(0,1306,1,InStr,FileNameDocx);
      Assert.IsTrue(EXISTS(FileNameDocx),'');

      FileXml.CLOSE;
      ERASE(FileNameXml);
      ERASE(FileNameDocx);
    END;

    [Test]
    PROCEDURE TestCod1GetCustomRDLC@17();
    VAR
      ReportLayoutSelection@1007 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      ApplicationManagement@1000 : Codeunit 1;
      InStr@1003 : InStream;
      File1@1004 : File;
      File2@1005 : File;
      BuiltInRdlcTxt@1002 : Text;
      CustomRdlcTxt@1006 : Text;
    BEGIN
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.DELETEALL;

      IF ReportLayoutSelection.GET(1306,COMPANYNAME) THEN
        ReportLayoutSelection.DELETE;

      CustomReportLayout.InitBuiltInLayout(1306,CustomReportLayout.Type::RDLC);
      CustomReportLayout.SETRANGE(Type,CustomReportLayout.Type::RDLC);
      CustomReportLayout.FINDFIRST;

      ReportLayoutSelection.INIT;
      ReportLayoutSelection."Report ID" := 1306;
      ReportLayoutSelection.Type := ReportLayoutSelection.Type::"Custom Layout";
      ReportLayoutSelection."Custom Report Layout ID" := CustomReportLayout.ID;
      ReportLayoutSelection.INSERT(TRUE);

      REPORT.RDLCLAYOUT(1306,InStr);
      InStr.READ(BuiltInRdlcTxt);
      CustomRdlcTxt := ApplicationManagement.ReportGetCustomRdlc(1306);

      File1.TEXTMODE := TRUE;
      File2.TEXTMODE := TRUE;
      File1.CREATE(TEMPORARYPATH + 'BuiltInRdlc.xml',TEXTENCODING::UTF8);
      File2.CREATE(TEMPORARYPATH + 'CustomRdlc.xml',TEXTENCODING::UTF8);
      File1.WRITE(BuiltInRdlcTxt);
      File2.WRITE(CustomRdlcTxt);
      File1.CLOSE;
      File2.CLOSE;

      Assert.AreNotEqual('',CustomRdlcTxt,'');
      Assert.AreNotEqual('',CustomRdlcTxt,'');
    END;

    [Test]
    PROCEDURE TestRepMiniSalesInvoice@7();
    VAR
      SalesInvoiceHeader@1002 : Record 112;
      FileManagement@1001 : Codeunit 419;
      XMLDOMManagement@1007 : Codeunit 6224;
      XmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNodeList@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      FileNameXml@1004 : Text;
      i@1006 : Integer;
    BEGIN
      IF NOT SalesInvoiceHeader.FINDFIRST THEN
        EXIT;
      SalesInvoiceHeader.SETRECFILTER;
      InitCompanySetup;
      FileNameXml := FileManagement.ServerTempFileName('xml');
      REPORT.SAVEASXML(1306,FileNameXml,SalesInvoiceHeader);

      // Verify
      XMLDOMManagement.LoadXMLDocumentFromFile(FileNameXml,XmlDoc);
      XmlNode := XmlDoc.DocumentElement;
      XmlNode := XmlNode.FirstChild; // DataItems
      XmlNode := XmlNode.FirstChild; // DataItem Sales_Invoice_Header
      Assert.AreEqual('Header',GetXmlAttribute('name',XmlNode),'');

      XmlNodeList := XmlNode.ChildNodes;
      Assert.AreEqual(2,XmlNodeList.Count,'Header children.');
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XmlNode := XmlNodeList.ItemOf(i);
        CASE XmlNode.Name OF
          'Columns':
            ValidateHeaderColumns(XmlNode);
          'DataItems':
            ValidateDataItems(XmlNode);
        END;
      END;

      // Cleanup
      ERASE(FileNameXml);
    END;

    LOCAL PROCEDURE TestImportLayoutByType@28(LayoutType@1003 : Option);
    VAR
      CustomReportLayout@1000 : Record 9650;
      FileManagement@1002 : Codeunit 419;
      DefaultFileName@1001 : Text;
    BEGIN
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.DELETEALL;

      // Init
      CustomReportLayout.RESET;
      CustomReportLayout.InitBuiltInLayout(1306,LayoutType);
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.SETRANGE(Type,LayoutType);
      CustomReportLayout.FINDFIRST;

      CASE LayoutType OF
        CustomReportLayout.Type::Word:
          DefaultFileName := CustomReportLayout.ExportLayout(FileManagement.ServerTempFileName('docx'),FALSE);
        CustomReportLayout.Type::RDLC:
          DefaultFileName := CustomReportLayout.ExportLayout(FileManagement.ServerTempFileName('rdl'),FALSE);
      END;

      CustomReportLayout.CopyRecord;
      CustomReportLayout.FINDFIRST;
      CLEAR(CustomReportLayout.Layout);
      CustomReportLayout.MODIFY;
      Assert.IsFalse(CustomReportLayout.Layout.HASVALUE,'');

      // Execute
      CustomReportLayout.ImportLayout(DefaultFileName);
      CustomReportLayout.MODIFY;
      CustomReportLayout.CALCFIELDS(Layout);

      // validate
      Assert.IsTrue(CustomReportLayout.Layout.HASVALUE,'');
    END;

    [Test]
    [HandlerFunctions(ReportLookupHandler)]
    PROCEDURE TestReportLayoutsPageNew@5();
    VAR
      CustomReportLayout@1001 : Record 9650;
      ReportLayouts@1000 : TestPage 9650;
    BEGIN
      // Init
      CustomReportLayout.SETRANGE("Report ID",1306);
      CustomReportLayout.DELETEALL;

      // Exercise
      ReportLayouts.OPENVIEW;
      ReportLayouts.NewLayout.INVOKE;
      ReportLayouts.OK.INVOKE;

      // Verify
      Assert.AreNotEqual(0,CustomReportLayout.COUNT,'');
    END;

    [Test]
    PROCEDURE TestReportDefaultWord@4();
    VAR
      FileManagement@1001 : Codeunit 419;
    BEGIN
      // Verify start condition
      Assert.IsTrue(REPORT.DEFAULTLAYOUT(134600) = DEFAULTLAYOUT::Word,'');

      // Execute / verify
      REPORT.SAVEASWORD(134600,FileManagement.ServerTempFileName('docx'));
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestNoLayoutSelectionDefaultRDLC@10();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=RDLC",0); // No Report Selection, No report layout

      VerifySaveAsPdf(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsWord(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsExcel(REPORT::"Test Report - Default=RDLC");
      VerifyPrint(REPORT::"Test Report - Default=RDLC");
      VerifySchedule(REPORT::"Test Report - Default=RDLC");
      VerifyRun(REPORT::"Test Report - Default=RDLC");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestNoLayoutSelectionDefaultWord@24();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=Word",0); // No Report Selection, No report layout

      // VerifySaveAsPdf(REPORT::"Test Report - Default=Word");
      VerifySaveAsWord(REPORT::"Test Report - Default=Word");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Default=Word");
      VerifyPrint(REPORT::"Test Report - Default=Word");
      VerifySchedule(REPORT::"Test Report - Default=Word");
      VerifyRun(REPORT::"Test Report - Default=Word");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestNoLayoutSelectionDefaultNone@39();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Processing Only",0); // No Report Selection, No report layout

      ASSERTERROR VerifySaveAsPdf(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsWord(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifyPrint(REPORT::"Test Report - Processing Only");
      VerifySchedule(REPORT::"Test Report - Processing Only");
      VerifyRun(REPORT::"Test Report - Processing Only");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestRDLCLayoutSelectionDefaultRDLC@45();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=RDLC",1); // Report Selection = RDLC, No report layout

      VerifySaveAsPdf(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsWord(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsExcel(REPORT::"Test Report - Default=RDLC");
      VerifyPrint(REPORT::"Test Report - Default=RDLC");
      VerifySchedule(REPORT::"Test Report - Default=RDLC");
      VerifyRun(REPORT::"Test Report - Default=RDLC");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestRDLCLayoutSelectionDefaultWord@44();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=Word",1); // Report Selection = RDLC, No report layout

      VerifySaveAsPdf(REPORT::"Test Report - Default=Word");
      VerifySaveAsWord(REPORT::"Test Report - Default=Word");
      VerifySaveAsExcel(REPORT::"Test Report - Default=Word");
      VerifyPrint(REPORT::"Test Report - Default=Word");
      VerifySchedule(REPORT::"Test Report - Default=Word");
      VerifyRun(REPORT::"Test Report - Default=Word");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestRDLCLayoutSelectionDefaultNone@43();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Processing Only",1); // Report Selection = RDLC, No report layout

      ASSERTERROR VerifySaveAsPdf(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsWord(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifyPrint(REPORT::"Test Report - Processing Only");
      VerifySchedule(REPORT::"Test Report - Processing Only");
      VerifyRun(REPORT::"Test Report - Processing Only");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestWordLayoutSelectionDefaultRDLC@64();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=RDLC",2); // Report Selection = Word, No report layout

      // VerifySaveAsPdf(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsWord(REPORT::"Test Report - Default=RDLC");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Default=RDLC");
      VerifyPrint(REPORT::"Test Report - Default=RDLC");
      VerifySchedule(REPORT::"Test Report - Default=RDLC");
      VerifyRun(REPORT::"Test Report - Default=RDLC");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestWordLayoutSelectionDefaultWord@63();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=Word",2); // Report Selection = Word, No report layout

      // VerifySaveAsPdf(REPORT::"Test Report - Default=Word");
      VerifySaveAsWord(REPORT::"Test Report - Default=Word");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Default=Word");
      VerifyPrint(REPORT::"Test Report - Default=Word");
      VerifySchedule(REPORT::"Test Report - Default=Word");
      VerifyRun(REPORT::"Test Report - Default=Word");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestWordLayoutSelectionDefaultNone@62();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Processing Only",2); // Report Selection = Word, No report layout

      // asserterror VerifySaveAsPdf(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsWord(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifyPrint(REPORT::"Test Report - Processing Only");
      VerifySchedule(REPORT::"Test Report - Processing Only");
      VerifyRun(REPORT::"Test Report - Processing Only");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestCustomRDLCLayoutSelectionDefaultRDLC@72();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=RDLC",3); // Report Selection = Custom, RDLC report layout

      VerifySaveAsPdf(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsWord(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsExcel(REPORT::"Test Report - Default=RDLC");
      VerifyPrint(REPORT::"Test Report - Default=RDLC");
      VerifySchedule(REPORT::"Test Report - Default=RDLC");
      VerifyRun(REPORT::"Test Report - Default=RDLC");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestCustomRDLCLayoutSelectionDefaultWord@71();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=Word",3); // Report Selection = Custom, RDLC report layout

      // VerifySaveAsPdf(REPORT::"Test Report - Default=Word");
      VerifySaveAsWord(REPORT::"Test Report - Default=Word");
      VerifySaveAsExcel(REPORT::"Test Report - Default=Word");
      VerifyPrint(REPORT::"Test Report - Default=Word");
      VerifySchedule(REPORT::"Test Report - Default=Word");
      VerifyRun(REPORT::"Test Report - Default=Word");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestCustomRDLCLayoutSelectionDefaultNone@70();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Processing Only",3); // Report Selection = Custom, RDLC report layout

      ASSERTERROR VerifySaveAsPdf(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsWord(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifyPrint(REPORT::"Test Report - Processing Only");
      VerifySchedule(REPORT::"Test Report - Processing Only");
      VerifyRun(REPORT::"Test Report - Processing Only");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestCustomWordLayoutSelectionDefaultRDLC@69();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=RDLC",4); // Report Selection = Custom, Word report layout

      // VerifySaveAsPdf(REPORT::"Test Report - Default=RDLC");
      VerifySaveAsWord(REPORT::"Test Report - Default=RDLC");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Default=RDLC");
      VerifyPrint(REPORT::"Test Report - Default=RDLC");
      VerifySchedule(REPORT::"Test Report - Default=RDLC");
      VerifyRun(REPORT::"Test Report - Default=RDLC");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestCustomWordLayoutSelectionDefaultWord@68();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Default=Word",4); // Report Selection = Custom, Word report layout

      // VerifySaveAsPdf(REPORT::"Test Report - Default=Word");
      VerifySaveAsWord(REPORT::"Test Report - Default=Word");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Default=Word");
      VerifyPrint(REPORT::"Test Report - Default=Word");
      VerifySchedule(REPORT::"Test Report - Default=Word");
      VerifyRun(REPORT::"Test Report - Default=Word");
    END;

    [Test]
    [HandlerFunctions(ScheduleAReportHandlerCancel)]
    PROCEDURE TestCustomWordLayoutSelectionDefaultNone@67();
    BEGIN
      // Init
      InitReportSelection(REPORT::"Test Report - Processing Only",4); // Report Selection = Custom, Word report layout

      // asserterror VerifySaveAsPdf(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsWord(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifySaveAsExcel(REPORT::"Test Report - Processing Only");
      ASSERTERROR VerifyPrint(REPORT::"Test Report - Processing Only");
      VerifySchedule(REPORT::"Test Report - Processing Only");
      VerifyRun(REPORT::"Test Report - Processing Only");
    END;

    [Test]
    PROCEDURE GetCompanyRegistationNo@73();
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      // [FEATURE] [Company Information] [UT]
      // [SCENARIO 375887] GetRegistrationNumber and GetRegistrationNumberLbl should return "Registration No." and its caption
      CompanyInformation.GET;
      Assert.AreEqual(CompanyInformation."Registration No.",CompanyInformation.GetRegistrationNumber,WrongRegNoErr);
      Assert.AreEqual(
        CompanyInformation.FIELDCAPTION("Registration No."),CompanyInformation.GetRegistrationNumberLbl,WrongRegNoLblErr);
    END;

    [Test]
    [HandlerFunctions(WorkOrder_RPH)]
    PROCEDURE SalesOrder_Print_WorkOrder@27();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentPrint@1000 : Codeunit 229;
      CustomerNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Order] [Print]
      // [SCENARIO 379027] REP 752 "Work Order" is shown when run "Work Order" action from Sales Order in case of "Order Confirmation" setup in customer document layout

      // [GIVEN] Custom Report Layout "X" with "Report ID" = 205, "Report Name" = "Order Confirmation"
      // [GIVEN] Customer with Document Layout: Usage = "Confirmation Order", "Report ID" = 205, "Customer Report Layout ID" = "X"
      CustomerNo := LibrarySales.CreateCustomerNo;
      AddOrderConfirmationToCustomerDocumentLayout(CustomerNo);

      // [GIVEN] Sales Order for the given customer
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // [WHEN] Run "Work Order" action from Sales Order
      COMMIT;
      DocumentPrint.PrintSalesOrder(SalesHeader,Usage::"Work Order");

      // [THEN] REP 752 "Work Order" is shown
      // WorkOrder_RPH
    END;

    [Test]
    [HandlerFunctions(PickInstruction_RPH)]
    PROCEDURE SalesOrder_Print_PickInstruction@53();
    VAR
      SalesHeader@1002 : Record 36;
      DocumentPrint@1001 : Codeunit 229;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Order] [Print]
      // [SCENARIO 379027] REP 214 "Pick Instruction" is shown when run "Pick Instruction" action from Sales Order in case of "Order Confirmation" setup in customer document layout

      // [GIVEN] Custom Report Layout "X" with "Report ID" = 205, "Report Name" = "Order Confirmation"
      // [GIVEN] Customer with Document Layout: Usage = "Confirmation Order", "Report ID" = 205, "Customer Report Layout ID" = "X"
      CustomerNo := LibrarySales.CreateCustomerNo;
      AddOrderConfirmationToCustomerDocumentLayout(CustomerNo);

      // [GIVEN] Sales Order for the given customer
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // [WHEN] Run "Pick Instruction" action from Sales Order
      COMMIT;
      DocumentPrint.PrintSalesOrder(SalesHeader,Usage::"Pick Instruction");

      // [THEN] REP 214 "Pick Instruction" is shown
      // PickInstruction_RPH
    END;

    [Test]
    [HandlerFunctions(OrderConfirmation_RPH)]
    PROCEDURE SalesOrder_Print_OrderConfirmation@54();
    VAR
      SalesHeader@1002 : Record 36;
      DocumentPrint@1001 : Codeunit 229;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Order] [Print]
      // [SCENARIO 379027] REP 205 "Order Confirmation" is shown when run "Print Confirmation" action from Sales Order in case of "Order Confirmation" setup in customer document layout

      // [GIVEN] Custom Report Layout "X" with "Report ID" = 205, "Report Name" = "Order Confirmation"
      // [GIVEN] Customer with Document Layout: Usage = "Confirmation Order", "Report ID" = 205, "Customer Report Layout ID" = "X"
      CustomerNo := LibrarySales.CreateCustomerNo;
      AddOrderConfirmationToCustomerDocumentLayout(CustomerNo);

      // [GIVEN] Sales Order for the given customer
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // [WHEN] Run "Print Confirmation" action from Sales Order
      COMMIT;
      DocumentPrint.PrintSalesOrder(SalesHeader,Usage::"Order Confirmation");

      // [THEN] REP 205 "Order Confirmation" is shown
      // OrderConfirmation_RPH
    END;

    [Test]
    [HandlerFunctions(ReturnOrderConfirmation_RPH)]
    PROCEDURE SalesReturnOrder_Print@40();
    VAR
      SalesHeader@1001 : Record 36;
      DocumentPrint@1002 : Codeunit 229;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Return Order] [Print]
      // [SCENARIO 379871]  REP 6631 "Return Order Confirmation" is shown when run "Print" action from Sales Return Order in case of Usage="Invoice" setup in customer document layout

      // [GIVEN] Customer with Document Layout: Usage = "Invoice", "Report ID" = 206 (Sales - Invoice)
      CustomerNo := LibrarySales.CreateCustomerNo;
      AddSalesInvoiceToCustomerDocumentLayout(CustomerNo);

      // [GIVEN] Sales Return Order for the given customer
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);

      // [WHEN] Run "Print" action from Sales Return Order
      COMMIT;
      DocumentPrint.PrintSalesHeader(SalesHeader);

      // [THEN] REP 6631 "Return Order Confirmation" is shown
      // ReturnOrderConfirmation_RPH
    END;

    LOCAL PROCEDURE InitCustomReportLayout@6(VAR CustomReportLayout@1000 : Record 9650;LayoutType@1002 : Option;WithCompanyName@1001 : Boolean);
    BEGIN
      CustomReportLayout.InitBuiltInLayout(1306,LayoutType);
      CustomReportLayout.FINDLAST;
      Assert.AreEqual(1306,CustomReportLayout."Report ID",'');
      IF WithCompanyName THEN BEGIN
        CustomReportLayout."Company Name" := COMPANYNAME;
        CustomReportLayout.MODIFY;
      END;
    END;

    LOCAL PROCEDURE InitReportSelection@47(ReportID@1000 : Integer;Selection@1001 : 'None,RDLC (Built-in),Word (Built-in),Custom RDLC,Custom Word');
    VAR
      ReportLayoutSelection@1002 : Record 9651;
      CustomReportLayout@1003 : Record 9650;
    BEGIN
      IF ReportLayoutSelection.GET(ReportID,COMPANYNAME) THEN
        ReportLayoutSelection.DELETE;
      IF Selection = Selection::None THEN
        EXIT;

      ReportLayoutSelection.INIT;
      ReportLayoutSelection."Report ID" := ReportID;
      ReportLayoutSelection."Company Name" := COMPANYNAME;
      CASE Selection OF
        Selection::"RDLC (Built-in)":
          ReportLayoutSelection.Type := ReportLayoutSelection.Type::"RDLC (built-in)";
        Selection::"Word (Built-in)":
          ReportLayoutSelection.Type := ReportLayoutSelection.Type::"Word (built-in)";
        Selection::"Custom RDLC":
          BEGIN
            ReportLayoutSelection.Type := ReportLayoutSelection.Type::"Custom Layout";
            CustomReportLayout.InitBuiltInLayout(ReportID,CustomReportLayout.Type::RDLC);
            CustomReportLayout.FINDLAST;
            ReportLayoutSelection."Custom Report Layout ID" := CustomReportLayout.ID;
          END;
        Selection::"Custom Word":
          BEGIN
            ReportLayoutSelection.Type := ReportLayoutSelection.Type::"Custom Layout";
            CustomReportLayout.InitBuiltInLayout(ReportID,CustomReportLayout.Type::Word);
            CustomReportLayout.FINDLAST;
            ReportLayoutSelection."Custom Report Layout ID" := CustomReportLayout.ID;
          END;
      END;
      ReportLayoutSelection.INSERT;
    END;

    LOCAL PROCEDURE AddOrderConfirmationToCustomReportLayout@60() : Integer;
    VAR
      CustomReportLayout@1000 : Record 9650;
    BEGIN
      WITH CustomReportLayout DO BEGIN
        IF FINDLAST THEN
          ID += 1
        ELSE
          ID := 1;
        "Report ID" := REPORT::"Order Confirmation";
        INSERT(TRUE);
        EXIT(ID);
      END;
    END;

    LOCAL PROCEDURE AddOrderConfirmationToCustomerDocumentLayout@36(CustomerNo@1001 : Code[20]);
    VAR
      CustomReportSelection@1000 : Record 9657;
    BEGIN
      AddCustomerDocumentLayoutReport(
        CustomerNo,CustomReportSelection.Usage::"S.Order",REPORT::"Order Confirmation",AddOrderConfirmationToCustomReportLayout);
    END;

    LOCAL PROCEDURE AddSalesInvoiceToCustomerDocumentLayout@50(CustomerNo@1001 : Code[20]);
    VAR
      CustomReportSelection@1000 : Record 9657;
    BEGIN
      AddCustomerDocumentLayoutReport(
        CustomerNo,CustomReportSelection.Usage::"S.Invoice",REPORT::"Sales - Invoice",0);
    END;

    LOCAL PROCEDURE AddCustomerDocumentLayoutReport@51(CustomerNo@1001 : Code[20];NewUsage@1002 : Integer;ReportID@1003 : Integer;CustomReportLayoutID@1004 : Integer);
    VAR
      CustomReportSelection@1000 : Record 9657;
    BEGIN
      WITH CustomReportSelection DO BEGIN
        INIT;
        "Source Type" := DATABASE::Customer;
        "Source No." := CustomerNo;
        Usage := NewUsage;
        Sequence := 1;
        "Report ID" := ReportID;
        "Custom Report Layout ID" := CustomReportLayoutID;
        INSERT(TRUE);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ReportLookupHandler@19(VAR ReportLookup@1000 : TestPage 9651);
    BEGIN
      ReportLookup.ReportID.SETVALUE := 1306;
      ReportLookup.AddWord.SETVALUE := TRUE;
      ReportLookup.AddRDLC.SETVALUE := TRUE;
      ReportLookup.OK.INVOKE;
    END;

    [ReportHandler]
    PROCEDURE Report134600HandlerCancel@23(VAR TestReportDefaultWord@1000 : Report 134600);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ScheduleAReportHandlerCancel@38(VAR ScheduleaReport@1000 : TestPage 682);
    BEGIN
      ScheduleaReport.Cancel.INVOKE;
    END;

    LOCAL PROCEDURE GetXmlAttribute@25(AttributeName@1001 : Text;XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text;
    VAR
      XMLAttributeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLAttributeNode := XMLNode.Attributes.GetNamedItem(AttributeName);
      IF ISNULL(XMLAttributeNode) THEN
        EXIT('');
      EXIT(FORMAT(XMLAttributeNode.InnerText));
    END;

    LOCAL PROCEDURE ValidateHeaderColumns@14(VAR XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      XMLNode := XMLNode.FirstChild; // Column BilltoCustNo
      Assert.AreEqual('CompanyAddress1',GetXmlAttribute('name',XMLNode),'');
    END;

    LOCAL PROCEDURE ValidateDataItems@15(VAR XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLNode2@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      i@1003 : Integer;
    BEGIN
      XmlNodeList := XMLNode.ChildNodes;
      Assert.IsTrue(0 < XmlNodeList.Count,'DataItems children.');
      FOR i := 0 TO XmlNodeList.Count - 1 DO BEGIN
        XMLNode2 := XmlNodeList.ItemOf(i);
        Assert.IsTrue(
          GetXmlAttribute('name',XMLNode2) IN ['Line','VATAmountLine','VATClauseLine','ReportTotalsLine','Totals'],'');
      END;
    END;

    LOCAL PROCEDURE InitCompanySetup@34();
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF CompanyInformation."Allow Blank Payment Info." THEN
        EXIT;

      CompanyInformation."Allow Blank Payment Info." := TRUE;
      CompanyInformation.MODIFY;
    END;

    LOCAL PROCEDURE VerifySaveAsPdf@12(ReportID@1000 : Integer);
    VAR
      FileManagement@1001 : Codeunit 419;
      FileName@1002 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName('pdf');
      REPORT.SAVEASPDF(ReportID,FileName);
      FileManagement.DeleteServerFile(FileName);
    END;

    LOCAL PROCEDURE VerifySaveAsWord@29(ReportID@1000 : Integer);
    VAR
      FileManagement@1001 : Codeunit 419;
      FileName@1002 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName('docx');
      REPORT.SAVEASWORD(ReportID,FileName);
      FileManagement.DeleteServerFile(FileName);
    END;

    LOCAL PROCEDURE VerifySaveAsExcel@30(ReportID@1000 : Integer);
    VAR
      FileManagement@1001 : Codeunit 419;
      FileName@1002 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName('xlsx');
      REPORT.SAVEASEXCEL(ReportID,FileName);
      FileManagement.DeleteServerFile(FileName);
    END;

    LOCAL PROCEDURE VerifyPrint@32(ReportID@1000 : Integer);
    VAR
      ApplicationManagement@1001 : Codeunit 1;
    BEGIN
      IF (ApplicationManagement.HasCustomLayout(0,ReportID) = 2) OR
         (ApplicationManagement.HasCustomLayout(0,ReportID) = 0) AND
         (REPORT.DEFAULTLAYOUT(ReportID) = DEFAULTLAYOUT::Word)
      THEN
        VerifySaveAsWord(ReportID)
      ELSE
        VerifySaveAsPdf(ReportID);
    END;

    LOCAL PROCEDURE VerifySchedule@33(ReportID@1000 : Integer);
    VAR
      JobQueueEntry@1002 : Record 472;
      ApplicationManagement@1001 : Codeunit 1;
    BEGIN
      // Init
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Report);
      JobQueueEntry.SETRANGE("Object ID to Run",ReportID);
      JobQueueEntry.DELETEALL;

      // Exercise
      ApplicationManagement.ReportScheduler(ReportID,''); // Invokes ScheduleAReportHandlerCancel

      // Verify
      Assert.AreEqual(0,JobQueueEntry.COUNT,'VerifySchedule');
      JobQueueEntry.DELETEALL;
    END;

    LOCAL PROCEDURE VerifyRun@35(ReportID@1000 : Integer);
    BEGIN
      IF ReportID <> 0 THEN;
      // REPORT.RUN(ReportID,false,true);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@42(Question@1000 : Text;VAR Answer@1001 : Boolean);
    BEGIN
      Answer := FALSE;
    END;

    [RequestPageHandler]
    PROCEDURE WorkOrder_RPH@49(VAR WorkOrder@1000 : TestRequestPage 752);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE PickInstruction_RPH@56(VAR PickInstruction@1000 : TestRequestPage 214);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE OrderConfirmation_RPH@57(VAR OrderConfirmation@1000 : TestRequestPage 205);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ReturnOrderConfirmation_RPH@76(VAR ReturnOrderConfirmation@1000 : TestRequestPage 6631);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Report Layout]
      SaveAsPDF is not tested for Word scenarios as it currently requires Windows client and an installed Word.
    }
    END.
  }
}

