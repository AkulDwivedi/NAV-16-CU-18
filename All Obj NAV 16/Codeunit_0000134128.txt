OBJECT Codeunit 134128 ERM Vendor Reversal Message
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryERM@1001 : Codeunit 131300;
      LibraryPurchase@1002 : Codeunit 130512;
      LibraryFiscalYear@1010 : Codeunit 131302;
      IsInitialized@1000 : Boolean;
      ReversalErrorFromLedger@1006 : TextConst 'ENU=You cannot create this type of document when Vendor %1 is blocked with type %2';
      ReversalErrorFromRegister@1008 : TextConst 'ENU=You cannot reverse register No. %1 because it contains customer or vendor ledger entries';
      ReversalErrorFromGLEntry@1007 : TextConst 'ENU=The transaction cannot be reversed, because the Vendor Ledger Entry has been compressed.';
      ErrorsMustMatch@1009 : TextConst 'ENU=Errors must match.';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PaymentBlockedTypePayment@5();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Payment from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger and GL Register.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Payment,Vendor.Blocked::Payment,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceBlockedTypeAll@1();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Invoice from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Invoice,Vendor.Blocked::All,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PaymentBlockedTypeAll@27();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Payment from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Payment,Vendor.Blocked::All,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoBlockedTypeAll@28();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Credit Memo from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::"Credit Memo",Vendor.Blocked::All,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE RefundBlockedTypeAll@29();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Refund from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Refund,Vendor.Blocked::All,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE FinChargeMemoBlockedTypeAll@30();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Finance Charge Memo from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger.
      Initialize;
      ReverseFromLedger(
        GenJournalLine."Document Type"::"Finance Charge Memo",Vendor.Blocked::All,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReminderBlockedTypeAll@31();
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Vendor and Post Reminder from General Journal Line, update Vendor Blocked field for Payment and
      // verify Reversal Error from Vendor Ledger.
      Initialize;
      ReverseFromLedger(GenJournalLine."Document Type"::Reminder,Vendor.Blocked::All,-LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE ReverseFromLedger@4(DocumentType@1004 : Option;BlockedType@1003 : Option;Amount@1002 : Decimal);
    VAR
      Vendor@1006 : Record 23;
      VendorLedgerEntry@1001 : Record 25;
      ReversalEntry@1000 : Record 179;
    BEGIN
      // Setup: Create Vendor, Make document line and Post from General Journal and Block the same Vendor.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,ReversalSetup(DocumentType,BlockedType,Amount));
      Vendor.GET(VendorLedgerEntry."Vendor No.");

      // Exercise: Reverse Invoice entries for Blocked Vendor.
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // Verify: Verifying Blocked Error Message.
      Assert.AreEqual(STRSUBSTNO(ReversalErrorFromLedger,Vendor."No.",Vendor.Blocked),GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReverseFromRegister@6();
    VAR
      Vendor@1006 : Record 23;
      VendorLedgerEntry@1005 : Record 25;
      GLRegister@1000 : Record 45;
      ReversalEntry@1004 : Record 179;
      GenJournalLine@1008 : Record 81;
    BEGIN
      // Setup: Create Vendor, Make Invoice and Post from General Journal and Block the same Vendor.
      Initialize;
      LibraryERM.FindVendorLedgerEntry(
        VendorLedgerEntry,GenJournalLine."Document Type"::Payment,ReversalSetup(GenJournalLine."Document Type"::Payment,
          Vendor.Blocked::Payment,LibraryRandom.RandDec(100,2)));
      Vendor.GET(VendorLedgerEntry."Vendor No.");

      // Exercise: Reverse Payment entries for Blocked Vendor.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseRegister(GLRegister."No.");

      // Verify: Verifying Blocked Error Message.
      Assert.AreEqual(STRSUBSTNO(ReversalErrorFromLedger,Vendor."No.",Vendor.Blocked),GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE FullyAppliedInvoiceFrmLedger@3();
    VAR
      VendorLedgerEntry@1003 : Record 25;
      ReversalEntry@1004 : Record 179;
    BEGIN
      // Create Vendor and Post Invoice from General Journal Line, Fully apply payment on Invoice and
      // verify Reversal Error from Vendor Ledger.

      // Setup: Create Vendor, Make Invoice and Post from General Journal and Block the same Vendor.
      Initialize;
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,CreateAndPostApplnEntry);

      // Exercise: Reverse Fully Applied Invoice from Ledger.
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // Verify: Verify Reversal Error for Fully Applied Entries.
      Assert.AreEqual(
        ReversalEntry.ReversalErrorForChangedEntry(VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry."Entry No."),
        GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    PROCEDURE FullyAppliedInvoiceFrmRegister@12();
    VAR
      GLRegister@1002 : Record 45;
      ReversalEntry@1004 : Record 179;
    BEGIN
      // Create Vendor and Post Invoice from General Journal Line, Fully apply payment on Invoice and
      // verify Reversal Error from GL Register.

      // Setup: Create Vendor, Make Invoice and Post from General Journal and Block the same Vendor.
      Initialize;
      CreateAndPostApplnEntry;

      // Exercise: Reverse Fully Applied Invoice from Ledger.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseRegister(GLRegister."No.");

      // Verify: Verify Reversal Error for Fully Applied Entries.
      Assert.AreNotEqual(0,STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ReversalErrorFromRegister,GLRegister."No.")),ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CurrencyAdjustEntryFrmLedger@18();
    VAR
      Vendor@1004 : Record 23;
      GenJournalLine@1003 : Record 81;
      VendorLedgerEntry@1001 : Record 25;
      ReversalEntry@1000 : Record 179;
    BEGIN
      // Create Vendor and Post Credit entry using Currency from General Journal Line, Update Exchange Rate and Run Adjust
      // Exchange Rate batch job. Verify Reversal Error from Vendor Ledger.

      // Setup: Create and Post General Journal Line and Modify Exchange Rate.Run Adjust Exchange Rate Batch Job
      // and calculate Realized Gain/Loss Amount.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlLine(GenJournalLine,GenJournalLine."Document Type"::" ",Vendor."No.",-LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Currency Code",CreateCurrency);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateExchangeRate(GenJournalLine."Currency Code");
      LibraryERM.RunAdjustExchangeRates(
        GenJournalLine."Currency Code",0D,WORKDATE,'Test',WORKDATE,GenJournalLine."Document No.",FALSE);

      // Exercise: Reverse Posted Entry from Vendor Ledger.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::" ",GenJournalLine."Document No.");
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // Verify: Verify Detailed Ledger Entry for Unrealized Loss/Gain entry.
      Assert.AreEqual(
        ReversalEntry.ReversalErrorForChangedEntry(VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry."Entry No."),
        GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressForGLAccount@14();
    VAR
      GenJournalLine@1000 : Record 81;
      Vendor@1002 : Record 23;
    BEGIN
      // Setup: Create General Ledger Account and Vendor, Make Invoice and Post from General Journal and Close Fiscal Year.
      Initialize;
      LibraryFiscalYear.CloseFiscalYear;
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlLineForInvoice(
        GenJournalLine,GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Vendor."No.");
      CreateAndPostApplnDateCompress(
        GenJournalLine."Document No.",GenJournalLine."Bal. Account Type"::"G/L Account",GenJournalLine."Bal. Account No.",
        GenJournalLine."Account No.",GenJournalLine.Amount);

      // Date Compress Vendor Ledger Batch Report as per the option selected and Reverse and Verify the Transaction.
      DateCompressAndReverse(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressForBankAccount@17();
    VAR
      GenJournalLine@1000 : Record 81;
      Vendor@1002 : Record 23;
    BEGIN
      // Setup: Create Vendor, Make Invoice and Post from General Journal and Close Fiscal Year.
      Initialize;
      LibraryFiscalYear.CloseFiscalYear;
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlLineForInvoice(
        GenJournalLine,GenJournalLine."Bal. Account Type"::"Bank Account",CreateBankAccount,Vendor."No.");
      CreateAndPostApplnDateCompress(
        GenJournalLine."Document No.",GenJournalLine."Bal. Account Type"::"Bank Account",GenJournalLine."Bal. Account No.",
        GenJournalLine."Account No.",GenJournalLine.Amount);

      // Date Compress Vendor Ledger Batch Report as per the option selected and Reverse and Verify the Transaction.
      DateCompressAndReverse(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostApplnEntry@9() DocumentNo : Code[20];
    VAR
      Vendor@1001 : Record 23;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and Post Invoice and apply Payment on Invoice.
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,Vendor."No.",-LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      DocumentNo := GenJournalLine."Document No.";
      CreateGenJnlLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,Vendor."No.",-GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostApplnDateCompress@16(DocumentNo@1005 : Code[20];BalAccountType@1004 : Option;BalAccountNo@1003 : Code[20];AccountNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      CreateGenJnlLineForBalAccount(
        GenJournalLine,GenJournalLine."Document Type"::Payment,BalAccountType,BalAccountNo,AccountNo,-Amount);
      GenJournalLine.VALIDATE("Posting Date",LibraryFiscalYear.GetFirstPostingDate(TRUE));
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateBankAccount@15() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@11() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Realized G/L Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Realized G/L Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGenJnlLine@20(VAR GenJournalLine@1005 : Record 81;DocumentType@1004 : Option;VendorNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Select Journal Batch Name and Template Name.
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
    END;

    LOCAL PROCEDURE CreateGenJnlLineForBalAccount@23(VAR GenJournalLine@1000 : Record 81;DocumentType@1003 : Option;BalAccountType@1006 : Option;BalAccountNo@1004 : Code[20];AccountNo@1007 : Code[20];Amount@1002 : Decimal);
    VAR
      GenJournalBatch@1009 : Record 232;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,GenJournalLine."Account Type"::Vendor,
        AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJnlLineForInvoice@22(VAR GenJournalLine@1007 : Record 81;BalAccountType@1002 : Option;BalAccountNo@1000 : Code[20];AccountNo@1004 : Code[20]);
    BEGIN
      CreateGenJnlLineForBalAccount(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,BalAccountType,BalAccountNo,AccountNo,
        -LibraryRandom.RandInt(100));
      GenJournalLine.VALIDATE("Posting Date",LibraryFiscalYear.GetFirstPostingDate(TRUE));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE DateCompressAndReverse@33(GenJournalLine@1001 : Record 81);
    BEGIN
      // Exercise: Run the Date Compress Vendor Ledger Batch Report as per the option selected.
      VendorDateCompress(GenJournalLine."Account No.");
      ReverseEntryBalancingAccount(GenJournalLine."Bal. Account No.");

      // Verify: Verify Balancing Account in General Ledger Entry.
      Assert.AreEqual(STRSUBSTNO(ReversalErrorFromGLEntry),GETLASTERRORTEXT,ErrorsMustMatch);
    END;

    LOCAL PROCEDURE ReversalSetup@13(DocumentType@1000 : Option;BlockedType@1002 : Option;Amount@1001 : Decimal) : Code[20];
    VAR
      Vendor@1006 : Record 23;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Create Vendor, make Entries from General Journal Line and Update Vendor Blocked field.
      LibraryPurchase.CreateVendor(Vendor);
      CreateGenJnlLine(GenJournalLine,DocumentType,Vendor."No.",Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Vendor.VALIDATE(Blocked,BlockedType);
      Vendor.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.")
    END;

    LOCAL PROCEDURE ReverseEntryBalancingAccount@21(BalAccountNo@1001 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      ReversalEntry@1002 : Record 179;
    BEGIN
      GLEntry.SETRANGE("Bal. Account No.",BalAccountNo);
      GLEntry.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ASSERTERROR ReversalEntry.ReverseTransaction(GLEntry."Transaction No.");
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@19(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE UpdateExchangeRate@2(CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Using Random value to update Currency Exchange Rate.
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + LibraryRandom.RandInt(50));
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VendorDateCompress@25(VendorNo@1004 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      DateComprRegister@1002 : Record 87;
      DateCompressVendorLedger@1001 : Report 398;
    BEGIN
      // Run the Date Compress Vendor Ledger Report. Take End Date a Day before Last Posted Entry's Posting Date.
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.FINDFIRST;
      DateCompressVendorLedger.SETTABLEVIEW(VendorLedgerEntry);
      DateCompressVendorLedger.InitializeRequest(
        LibraryFiscalYear.GetFirstPostingDate(TRUE),LibraryFiscalYear.GetFirstPostingDate(TRUE),
        DateComprRegister."Period Length"::Week,'',FALSE,FALSE,FALSE,'');
      DateCompressVendorLedger.USEREQUESTPAGE(FALSE);
      DateCompressVendorLedger.RUN;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Purchase]

      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute

      Test Reversal Error for Vendor.
        1. Test Payment entry Reversal Error from Vendor Ledger when Vendor Blocked for Payment.
        2. Test Invoice entry Reversal Error from Vendor Ledger when Vendor Blocked for All.
        3. Test Payment entry Reversal Error from Vendor Ledger when Vendor Blocked for All.
        4. Test Credit Memo entry Reversal Error from Vendor Ledger when Vendor Blocked for All.
        5. Test Refund entry Reversal Error from Vendor Ledger when Vendor Blocked for All.
        6. Test Finance Charge Memo entry Reversal Error from Vendor Ledger when Vendor Blocked for All.
        7. Test Reminder entry Reversal Error from Vendor Ledger when Vendor Blocked for All.
        8. Test Payment entry Reversal Error from GL Register.
        9. Test Reversal Error for Fully applied Payment Entry for Invoice from Vendor Ledger.
       10. Test Reversal Error for Fully applied Payment Entry for Invoice from GL Register.
       11. Test Reversal Error for Vendor Ledger entry after Run Adjust Exchange Rate batch job.
       12. Test Reversal Error for Balancing Account GL Account and Run Date compress batch job.
       13. Test Reversal Error for Balancing Account Bank Account and Run Date compress batch job.

      Covers Test Cases:
        ---------------------------------------------
        Test Function Name             TFS ID
        ---------------------------------------------
        PaymentBlockedTypePayment      126195,126196
        InvoiceBlockedTypeAll          126195,126198,126199
        PaymentBlockedTypeAll          126195,126198
        CreditMemoBlockedTypeAll       126195,126198,126200
        FinChargeMemoBlockedTypeAll    126195,126198,126201
        ReminderBlockedTypeAll         126195,126198,126202
        RefundBlockedTypeAll           126195,126198,126203
        ReverseFromRegister            126195,126197
        FullyAppliedInvoiceFrmLedger   126195,126205
        FullyAppliedInvoiceFrmRegister 126195,126206
        CurrencyAdjustedEntryFrmLedger 126195,126204,126206
        VendorDateCompressForGLAcc     126208,126209
        VendorDateCompressForBankAcc   126208,126210
    }
    END.
  }
}

