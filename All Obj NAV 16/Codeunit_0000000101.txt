OBJECT Codeunit 101 Cust. Entry-SetAppl.ID
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    Permissions=TableData 21=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SalesHeader@1500002 : Record 36;
      ServiceHeader@1500000 : Record 5900;
      GSTApplicationManagement@1500005 : Codeunit 16403;
      CustEntryApplID@1000 : Code[50];
      ServiceInvoice@1500001 : Boolean;
      TransactionType2@1500003 : 'Purchase,Sales,Transfer,Service';
      Refund@1500004 : Boolean;

    PROCEDURE SetApplId@1(VAR CustLedgEntry@1000 : Record 21;ApplyingCustLedgEntry@1003 : Record 21;AppliesToID@1001 : Code[50]);
    VAR
      TempCustLedgEntry@1002 : TEMPORARY Record 21;
      CustLedgEntryToUpdate@1004 : Record 21;
      GSTApplicationManagement@1500000 : Codeunit 16403;
      GSTGroupRemAmount@1500001 : Decimal;
      InvoiceGSTAmount@1500002 : Decimal;
      AppliedGSTAmount@1500003 : Decimal;
      InvoiceBase@1500005 : Decimal;
      TransactionType1@1500004 : 'Purchase,Sales,Transfer,Service';
    BEGIN
      CustLedgEntry.LOCKTABLE;
      IF CustLedgEntry.FINDSET THEN BEGIN
        // Make Applies-to ID
        IF CustLedgEntry."Applies-to ID" <> '' THEN
          CustEntryApplID := ''
        ELSE BEGIN
          CustEntryApplID := AppliesToID;
          IF CustEntryApplID = '' THEN BEGIN
            CustEntryApplID := USERID;
            IF CustEntryApplID = '' THEN
              CustEntryApplID := '***';
          END;
        END;
        REPEAT
          TempCustLedgEntry := CustLedgEntry;
          TempCustLedgEntry.INSERT;
        UNTIL CustLedgEntry.NEXT = 0;
      END;

      IF TempCustLedgEntry.FINDSET THEN
        REPEAT
          CustLedgEntryToUpdate.COPY(TempCustLedgEntry);
          CustLedgEntryToUpdate.TESTFIELD(Open,TRUE);
          CustLedgEntryToUpdate."Applies-to ID" := CustEntryApplID;
          IF CustLedgEntryToUpdate."Applies-to ID" = '' THEN BEGIN
            CustLedgEntryToUpdate."Accepted Pmt. Disc. Tolerance" := FALSE;
            CustLedgEntryToUpdate."Accepted Payment Tolerance" := 0;
          END;
          // Set Amount to Apply
          IF ((CustLedgEntryToUpdate."Amount to Apply" <> 0) AND (CustEntryApplID = '')) OR
             (CustEntryApplID = '')
          THEN BEGIN
            CustLedgEntryToUpdate."Amount to Apply" := 0;
            GSTApplicationManagement.DeletePaymentAplicationBuffer(TransactionType1::Sales,CustLedgEntryToUpdate."Entry No.");
          END ELSE
            IF CustLedgEntryToUpdate."Amount to Apply" = 0 THEN BEGIN
              CustLedgEntryToUpdate.CALCFIELDS("Remaining Amount");
              CustLedgEntryToUpdate."Amount to Apply" := CustLedgEntryToUpdate."Remaining Amount";
            END;
          IF IsGSTOnAdvancePayment(CustLedgEntryToUpdate) AND (ApplyingCustLedgEntry."Entry No." IN [0,1]) AND
            (NOT ServiceInvoice) AND (NOT Refund) THEN
            IF GSTApplicationManagement.FillGSTApplicationBufferSales(SalesHeader,CustLedgEntryToUpdate) THEN BEGIN
              GSTGroupRemAmount :=
                GSTApplicationManagement.GetApplicationRemainingAmount(
                  TransactionType1::Sales,SalesHeader."Document Type",
                  SalesHeader."No.",CustLedgEntryToUpdate."Customer No.",CustLedgEntryToUpdate."GST Group Code",
                  CustLedgEntryToUpdate."Amount to Apply",
                  CustLedgEntryToUpdate."Remaining Amount" + CustLedgEntryToUpdate."Total TDS/TCS Incl SHE CESS",
                  CustLedgEntryToUpdate."Entry No.",TRUE,
                  InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
              IF (CustEntryApplID <> '') AND (CustLedgEntryToUpdate."Amount to Apply" <> 0) THEN BEGIN
                GSTApplicationManagement.CheckAppliedAmount(
                  TransactionType2::Sales,CustLedgEntryToUpdate."Entry No.",CustLedgEntryToUpdate."Customer No.",
                  InvoiceBase + InvoiceGSTAmount,GSTGroupRemAmount,CustLedgEntryToUpdate."GST Group Code",FALSE);
                IF ABS(GSTGroupRemAmount) > ABS(CustLedgEntryToUpdate."Remaining Amount") THEN
                  CustLedgEntryToUpdate."Amount to Apply" := CustLedgEntryToUpdate."Remaining Amount"
                ELSE
                CustLedgEntryToUpdate."Amount to Apply" := GSTGroupRemAmount;
              END;
                GSTApplicationManagement.CheckGroupAmount(
                  SalesHeader."Document Type",
                  SalesHeader."No.",CustLedgEntryToUpdate."Amount to Apply",GSTGroupRemAmount,
                  CustLedgEntryToUpdate."Remaining Amount",CustLedgEntryToUpdate."GST Group Code");
              IF CustLedgEntryToUpdate."Amount to Apply" <> 0 THEN
                GSTApplicationManagement.CheckAppliedAmount(
                  TransactionType2::Sales,CustLedgEntryToUpdate."Entry No.",CustLedgEntryToUpdate."Customer No.",
                  InvoiceBase + InvoiceGSTAmount,CustLedgEntryToUpdate."Amount to Apply",CustLedgEntryToUpdate."GST Group Code",TRUE);
              IF CustLedgEntryToUpdate."Amount to Apply" <> 0 THEN
                GSTGroupRemAmount :=
                  GSTApplicationManagement.GetApplicationRemainingAmount(
                    TransactionType1::Sales,SalesHeader."Document Type",
                    SalesHeader."No.",CustLedgEntryToUpdate."Customer No.",CustLedgEntryToUpdate."GST Group Code",
                    CustLedgEntryToUpdate."Amount to Apply",
                    CustLedgEntryToUpdate."Remaining Amount" + CustLedgEntryToUpdate."Total TDS/TCS Incl SHE CESS",
                    CustLedgEntryToUpdate."Entry No.",TRUE,
                    InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
            END;
          IF IsGSTOnAdvancePayment(CustLedgEntryToUpdate) AND (ApplyingCustLedgEntry."Entry No." IN [0,1]) AND ServiceInvoice THEN
            IF GSTApplicationManagement.FillGSTApplicationBufferService(ServiceHeader,CustLedgEntryToUpdate) THEN BEGIN
              GSTGroupRemAmount :=
                GSTApplicationManagement.GetApplicationRemainingAmount(
                  TransactionType1::Sales,ServiceHeader."Document Type",
                  ServiceHeader."No.",CustLedgEntryToUpdate."Customer No.",CustLedgEntryToUpdate."GST Group Code",
                  CustLedgEntryToUpdate."Amount to Apply",
                  CustLedgEntryToUpdate."Remaining Amount"  + CustLedgEntryToUpdate."Total TDS/TCS Incl SHE CESS",
                  CustLedgEntryToUpdate."Entry No.",TRUE,
                  InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
              IF (CustEntryApplID <> '') AND (CustLedgEntryToUpdate."Amount to Apply" <> 0) THEN BEGIN
                GSTApplicationManagement.CheckAppliedAmount(
                  TransactionType2::Sales,CustLedgEntryToUpdate."Entry No.",CustLedgEntryToUpdate."Customer No.",
                  InvoiceBase + InvoiceGSTAmount,GSTGroupRemAmount,CustLedgEntryToUpdate."GST Group Code",FALSE);
                CustLedgEntryToUpdate."Amount to Apply" := GSTGroupRemAmount
              END;
                GSTApplicationManagement.CheckGroupAmount(
                  ServiceHeader."Document Type",
                  ServiceHeader."No.",CustLedgEntryToUpdate."Amount to Apply",GSTGroupRemAmount,
                  CustLedgEntryToUpdate."Remaining Amount",CustLedgEntryToUpdate."GST Group Code");
              IF CustLedgEntryToUpdate."Amount to Apply" <> 0 THEN
                GSTApplicationManagement.CheckAppliedAmount(
                  TransactionType2::Sales,CustLedgEntryToUpdate."Entry No.",CustLedgEntryToUpdate."Customer No.",
                  InvoiceBase + InvoiceGSTAmount,CustLedgEntryToUpdate."Amount to Apply",CustLedgEntryToUpdate."GST Group Code",TRUE);
              IF CustLedgEntryToUpdate."Amount to Apply" <> 0 THEN
                GSTGroupRemAmount :=
                  GSTApplicationManagement.GetApplicationRemainingAmount(
                    TransactionType1::Sales,ServiceHeader."Document Type",
                    ServiceHeader."No.",CustLedgEntryToUpdate."Customer No.",CustLedgEntryToUpdate."GST Group Code",
                    CustLedgEntryToUpdate."Amount to Apply",
                    CustLedgEntryToUpdate."Remaining Amount"  + CustLedgEntryToUpdate."Total TDS/TCS Incl SHE CESS",
                    CustLedgEntryToUpdate."Entry No.",TRUE,
                   InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
          END;

          IF IsGSTOnAdvancePayment(CustLedgEntryToUpdate) AND (ApplyingCustLedgEntry."Entry No." > 1) THEN BEGIN
            GSTApplicationManagement.GetSalesInvoiceAmountOffline(
              CustLedgEntryToUpdate,ApplyingCustLedgEntry,ApplyingCustLedgEntry."Total TDS/TCS Incl SHE CESS");
            GSTGroupRemAmount :=
              GSTApplicationManagement.GetApplicationRemainingAmount(
                TransactionType1::Sales,ApplyingCustLedgEntry."Document Type",
                ApplyingCustLedgEntry."Document No.",CustLedgEntryToUpdate."Customer No.",CustLedgEntryToUpdate."GST Group Code",
                CustLedgEntryToUpdate."Amount to Apply",CustLedgEntryToUpdate."Remaining Amount",CustLedgEntryToUpdate."Entry No.",TRUE,
                InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
              IF (CustEntryApplID <> '') AND (CustLedgEntryToUpdate."Amount to Apply" <> 0) THEN BEGIN
                GSTApplicationManagement.CheckAppliedAmount(
                  TransactionType2::Sales,CustLedgEntryToUpdate."Entry No.",CustLedgEntryToUpdate."Customer No.",
                  InvoiceBase + InvoiceGSTAmount,GSTGroupRemAmount,CustLedgEntryToUpdate."GST Group Code",FALSE);
                CustLedgEntryToUpdate."Amount to Apply" := GSTGroupRemAmount
              END;
              GSTApplicationManagement.CheckGroupAmount(
                ApplyingCustLedgEntry."Document Type",
                ApplyingCustLedgEntry."Document No.",CustLedgEntryToUpdate."Amount to Apply",GSTGroupRemAmount,
                CustLedgEntryToUpdate."Remaining Amount",CustLedgEntryToUpdate."GST Group Code");
              IF CustLedgEntryToUpdate."Amount to Apply" <> 0 THEN
                GSTApplicationManagement.CheckAppliedAmount(
                  TransactionType2::Sales,CustLedgEntryToUpdate."Entry No.",CustLedgEntryToUpdate."Customer No.",
                  InvoiceBase + InvoiceGSTAmount,CustLedgEntryToUpdate."Amount to Apply",CustLedgEntryToUpdate."GST Group Code",TRUE);
          END;
          ApplyingCustLedgEntry.CALCFIELDS("Remaining Amount");
          IF IsGSTOnAdvancePayment(ApplyingCustLedgEntry) THEN BEGIN
            GSTApplicationManagement.GetSalesInvoiceAmountWithPaymentOffline(
              CustLedgEntryToUpdate,ApplyingCustLedgEntry,ApplyingCustLedgEntry."Total TDS/TCS Incl SHE CESS");
            GSTGroupRemAmount :=
              GSTApplicationManagement.GetApplicationRemainingAmount(
                TransactionType1::Sales,CustLedgEntryToUpdate."Document Type",
                CustLedgEntryToUpdate."Document No.",ApplyingCustLedgEntry."Customer No.",
                ApplyingCustLedgEntry."GST Group Code",
                ApplyingCustLedgEntry."Amount to Apply",ApplyingCustLedgEntry."Remaining Amount",
                ApplyingCustLedgEntry."Entry No.",TRUE,
                InvoiceGSTAmount,AppliedGSTAmount,InvoiceBase);
             IF CustEntryApplID <> '' THEN
                CustLedgEntryToUpdate."Amount to Apply" := GSTGroupRemAmount * -1;
              GSTApplicationManagement.CheckGroupAmount(
                CustLedgEntryToUpdate."Document Type",
                CustLedgEntryToUpdate."Document No.",CustLedgEntryToUpdate."Amount to Apply",GSTGroupRemAmount,
                ApplyingCustLedgEntry."Remaining Amount",ApplyingCustLedgEntry."GST Group Code");
          END;
          CheckSalesCreditMemoAppOffline(CustLedgEntryToUpdate,ApplyingCustLedgEntry);
          IF CustLedgEntryToUpdate."Entry No." = ApplyingCustLedgEntry."Entry No." THEN
            CustLedgEntryToUpdate."Applying Entry" := ApplyingCustLedgEntry."Applying Entry";
          CustLedgEntryToUpdate.MODIFY;
        UNTIL TempCustLedgEntry.NEXT = 0;
    END;

    PROCEDURE SetGSTType@1500000(VAR SalesHeader2@1500002 : Record 36);
    BEGIN
      SalesHeader := SalesHeader2;
    END;

    LOCAL PROCEDURE IsGSTOnAdvancePayment@1500001(VAR CustLedgerEntry@1500000 : Record 21) : Boolean;
    BEGIN
      EXIT(
        CustLedgerEntry."GST on Advance Payment" AND
        (CustLedgerEntry."Document Type" = CustLedgerEntry."Document Type"::Payment) AND
        (CustLedgerEntry."Remaining Amount" <> 0) AND (CustLedgerEntry."Amount to Apply" <> 0));
    END;

    PROCEDURE SetGSTTypeService@1500002(VAR ServiceHeader2@1500000 : Record 5900);
    BEGIN
      ServiceHeader := ServiceHeader2;
      ServiceInvoice := TRUE;
    END;

    PROCEDURE SetRefund@1500003();
    BEGIN
      Refund := TRUE;
    END;

    LOCAL PROCEDURE CheckSalesCreditMemoAppOffline@1500022(CustLedgEntry@1500001 : Record 21;ApplyingCustLedgEntry@1500000 : Record 21);
    VAR
      CustLedgerEntry1@1170000000 : Record 21;
      GSTApplicationManagement@1500002 : Codeunit 16403;
    BEGIN
      CustLedgerEntry1.SETCURRENTKEY("Customer No.","Applies-to ID","Document No.");
      CustLedgerEntry1.SETRANGE("Customer No.",ApplyingCustLedgEntry."Customer No.");
      CustLedgerEntry1.SETRANGE("Applies-to ID",ApplyingCustLedgEntry."Applies-to ID");
      CustLedgerEntry1.SETFILTER("Document No.",'<>%1',ApplyingCustLedgEntry."Document No.");
      CustLedgerEntry1.SETFILTER("Amount to Apply",'<>%1',0);
      IF CustLedgerEntry1.FINDFIRST THEN;
      IF (ApplyingCustLedgEntry."Entry No." > 1) AND (CustEntryApplID <> '') THEN
        IF ((CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo") AND
          (ApplyingCustLedgEntry."Document Type" = ApplyingCustLedgEntry."Document Type"::Invoice)) OR
          ((CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) AND
          (ApplyingCustLedgEntry."Document Type" = ApplyingCustLedgEntry."Document Type"::"Credit Memo")) THEN
            GSTApplicationManagement.CheckGSTSalesCrMemoValidationsOffline(CustLedgEntry,
              ApplyingCustLedgEntry,CustLedgerEntry1.COUNT);
    END;

    BEGIN
    END.
  }
}

