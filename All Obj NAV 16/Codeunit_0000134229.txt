OBJECT Codeunit 134229 ERM Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibrarySales@1006 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      PageVerify@1003 : TextConst 'ENU=The TestPage is not open.';
      NotApplicableForCF@1005 : TextConst 'ENU=is not applicable for source type Cash Flow Account';

    [Test]
    PROCEDURE AnalysisViewListPage@2();
    VAR
      AnalysisViewListSales@1002 : TestPage 9371;
    BEGIN
      // [SCENARIO 230452] Correct page of Analysis View List Sales Page open and closes without errors.

      // [GIVEN] Open and close Analysis View List Sales page.
      Initialize;
      AnalysisViewListSales.OPENVIEW;
      AnalysisViewListSales.CLOSE;

      // [WHEN] Close Analysis View List Sales page again.
      ASSERTERROR AnalysisViewListSales.CLOSE;

      // [THEN] Error: Analysis View List Sales page is not open.
      Assert.ExpectedError(PageVerify);
    END;

    [Test]
    PROCEDURE AnalysisViewListPurchasePage@4();
    VAR
      AnalysisViewListPurchase@1002 : TestPage 9370;
    BEGIN
      // [SCENARIO 230453] Correct page of Analysis View List Purchase Page open and closes without errors.

      // [GIVEN] Open and close Analysis View List Purchase page.
      Initialize;
      AnalysisViewListPurchase.OPENVIEW;
      AnalysisViewListPurchase.CLOSE;

      // [WHEN] Close Analysis View List Purchase page again.
      ASSERTERROR AnalysisViewListPurchase.CLOSE;

      // [THEN] Error: Analysis View List Purchase is not open.
      Assert.ExpectedError(PageVerify);
    END;

    [Test]
    PROCEDURE CheckIncludeBudgetsAndUpdateOnPostingForCF@5();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO 4a] Check Include Budgets and Update on Posting for Cash Flow
      Initialize;

      // Setup
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"Cash Flow Account");

      // Verify
      ASSERTERROR AnalysisView.VALIDATE("Include Budgets",TRUE);
      Assert.ExpectedError(NotApplicableForCF);

      ASSERTERROR AnalysisView.VALIDATE("Update on Posting",TRUE);
      Assert.ExpectedError(NotApplicableForCF);

      AnalysisView.VALIDATE("Include Budgets",FALSE);
      AnalysisView.VALIDATE("Update on Posting",FALSE);
    END;

    [Test]
    PROCEDURE CheckIncludeBudgetsAndUpdateOnPostingForNotCF@7();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO 4b] Check Include Budgets and Update on Posting for NON Cash Flow
      Initialize;

      // Setup
      CreateAnalysisView(AnalysisView,AnalysisView."Account Source"::"G/L Account");

      // Verify
      AnalysisView.VALIDATE("Include Budgets",TRUE);
      AnalysisView.VALIDATE("Update on Posting",TRUE);
    END;

    [Test]
    PROCEDURE CheckIncludeBudgetsAndUpdateOnChangeAccSourceToCF@9();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO 4c] Check Include Budgets and Update on Posting for case of change Account Source from NON Cash Flow to Cash Flow
      Initialize;

      // Verify
      CheckAccSourceChange(TRUE,AnalysisView.FIELDNO("Update on Posting"));
      CheckAccSourceChange(TRUE,AnalysisView.FIELDNO("Include Budgets"));
    END;

    [Test]
    PROCEDURE CheckIncludeBudgetsAndUpdateOnChangeAccSourceToNonCF@14();
    VAR
      AnalysisView@1000 : Record 363;
    BEGIN
      // [FEATURE] [Cash Flow]
      // [SCENARIO 4d] Check Include Budgets and Update on Posting for case of change Account Source from Cash Flow to NON Cash Flow
      Initialize;

      // Verify
      CheckAccSourceChange(FALSE,AnalysisView.FIELDNO("Update on Posting"));
      CheckAccSourceChange(FALSE,AnalysisView.FIELDNO("Include Budgets"));
    END;

    [Test]
    PROCEDURE CheckUpdateOnPostingForGL@8();
    VAR
      AnalysisView@1000 : Record 363;
      LastEntryNo@1004 : Integer;
    BEGIN
      // [SCENARIO 5] Check Update on Posting for GL
      Initialize;

      // Setup
      CreateAnalysisViewWithDimensions(AnalysisView,AnalysisView."Account Source"::"G/L Account");

      // Validate
      AnalysisView.FIND;
      AnalysisView.TESTFIELD("Last Entry No.");
      LastEntryNo := AnalysisView."Last Entry No.";
      PostSalesOrder;
      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);
      AnalysisView.FIND;
      AnalysisView.TESTFIELD("Last Entry No.");
      Assert.IsTrue(AnalysisView."Last Entry No." > LastEntryNo,'Analysis View was not updated.');
    END;

    [Test]
    [HandlerFunctions(AnalysisByDimensionPageHandler,AnalysisByDimensionMatrixPageHandler)]
    PROCEDURE AnalysisByDimensionsViewPage@1();
    VAR
      AnalysisView@1000 : Record 363;
      AnalysisByDimensions@1003 : Page 554;
    BEGIN
      // [SCENARIO 6] Check Analysis By Dimensions page
      Initialize;

      // Setup
      CreateAnalysisViewWithDimensions(AnalysisView,AnalysisView."Account Source"::"G/L Account");

      // Execute
      AnalysisByDimensions.SetAnalysisViewCode(AnalysisView.Code);
      AnalysisByDimensions.RUN;
    END;

    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAnalysisView@6(VAR AnalysisView@1000 : Record 363;AccountSource@1001 : Integer);
    BEGIN
      WITH AnalysisView DO BEGIN
        INIT;
        Code := FORMAT(LibraryRandom.RandIntInRange(1,10000));
        "Account Source" := AccountSource;
        IF NOT INSERT THEN
          MODIFY;
      END;
    END;

    PROCEDURE CreateAnalysisViewWithDimensions@18(VAR AnalysisView@1001 : Record 363;AccountSource@1000 : Integer);
    VAR
      Dimension@1003 : Record 348;
      i@1002 : Integer;
    BEGIN
      CreateAnalysisView(AnalysisView,AccountSource);
      AnalysisView."Update on Posting" := FALSE;
      AnalysisView.VALIDATE("Include Budgets",TRUE);
      IF Dimension.FINDSET THEN
        REPEAT
          i := i + 1;
          CASE i OF
            1:
              AnalysisView."Dimension 1 Code" := Dimension.Code;
            2:
              AnalysisView."Dimension 2 Code" := Dimension.Code;
            3:
              AnalysisView."Dimension 3 Code" := Dimension.Code;
            4:
              AnalysisView."Dimension 4 Code" := Dimension.Code;
          END;
        UNTIL (i = 4) OR (Dimension.NEXT = 0);
      AnalysisView.MODIFY;
      CODEUNIT.RUN(CODEUNIT::"Update Analysis View",AnalysisView);
    END;

    LOCAL PROCEDURE CheckAccSourceChange@15(TestFromNonCachFlowToCF@1006 : Boolean;FldNo@1005 : Integer);
    VAR
      AnalysisView@1000 : Record 363;
      ToAccountSource@1003 : Integer;
      FromAccountSource@1004 : Integer;
    BEGIN
      WITH AnalysisView DO BEGIN
        IF TestFromNonCachFlowToCF THEN BEGIN
          FromAccountSource := "Account Source"::"G/L Account";
          ToAccountSource := "Account Source"::"Cash Flow Account";
        END ELSE BEGIN
          FromAccountSource := "Account Source"::"Cash Flow Account";
          ToAccountSource := "Account Source"::"G/L Account";
        END;

        // Setup
        CreateAnalysisView(AnalysisView,FromAccountSource);

        IF FldNo = FIELDNO("Update on Posting") THEN
          VALIDATE("Update on Posting",TestFromNonCachFlowToCF)
        ELSE
          VALIDATE("Include Budgets",TestFromNonCachFlowToCF);

        // Verify
        IF TestFromNonCachFlowToCF THEN BEGIN
          ASSERTERROR VALIDATE("Account Source",ToAccountSource);
          Assert.ExpectedError(NotApplicableForCF);
        END ELSE
          VALIDATE("Account Source",ToAccountSource);
      END;
    END;

    LOCAL PROCEDURE PostSalesOrder@10();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    [PageHandler]
    PROCEDURE AnalysisByDimensionPageHandler@13(VAR AnalysisByDimensions@1000 : TestPage 554);
    BEGIN
      AnalysisByDimensions.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisByDimensionMatrixPageHandler@12(VAR AnalysisByDimensionsMatrix@1000 : TestPage 9249);
    BEGIN
      AnalysisByDimensionsMatrix.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Analysis View]
    }
    END.
  }
}

