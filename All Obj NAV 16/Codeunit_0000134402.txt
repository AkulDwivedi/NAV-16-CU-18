OBJECT Codeunit 134402 ERM - Test XML Schema Viewer
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      XMLDateFormatTxt@1003 : TextConst '@@@=Do not translate.;ENU=YYYY-MM-DD';
      XMLDateTimeFormatTxt@1002 : TextConst '@@@=Do not translate.;ENU=YYYY-MM-DDThh:mm:ss';
      DefaultCultureTxt@1001 : TextConst '@@@=Do not translate.;ENU=en-US';

    LOCAL PROCEDURE Initialize@58();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1001 : Record 9610;
      ReferencedXMLSchema@1002 : Record 9612;
      XMLSchemaRestriction@1003 : Record 9611;
    BEGIN
      XMLSchema.DELETEALL;
      XMLSchemaElement.DELETEALL;
      ReferencedXMLSchema.DELETEALL;
      XMLSchemaRestriction.DELETEALL;
    END;

    [Test]
    PROCEDURE ReadSchemaFile@9();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      XMLSchemaRestriction@1004 : Record 9611;
      OutStr@1002 : OutStream;
      ExportFileName@1001 : Text;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      XMLSchema.TESTFIELD("Target Namespace");
      WITH XMLSchemaElement DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        Assert.AreEqual(COUNT,8,'Schema was not parsed correctly. Wrong number of elements.');
      END;
      WITH XMLSchemaRestriction DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        Assert.AreEqual(16,COUNT,'Schema was not parsed correctly. Wrong number of enumerations.');
      END;
      ExportFileName := XMLSchema.ExportSchema(FALSE);
      Assert.AreNotEqual('',ExportFileName,'No filename was retrieved from export schema.');
    END;

    [Test]
    PROCEDURE TestSelection@1();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      OutStr@1001 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      WITH XMLSchemaElement DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        SETRANGE("Node Name",'Test2');
        FINDFIRST;
        Assert.IsFalse(Selected,'Test2 was expected to have Selected=No.');
        Assert.AreEqual(MinOccurs,0,'Test2 was expected to have MinOccures=0.');
        SETRANGE("Node Name");
        MODIFYALL(Selected,FALSE);
        VALIDATE(Selected,TRUE);
        TESTFIELD("Simple Data Type",'string');
        FINDFIRST;
        Assert.IsTrue(Selected,'Parent was expected to have Selected=Yes.');
      END;
    END;

    [Test]
    PROCEDURE TestDeselection@6();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      XSDParser@1001 : Codeunit 9610;
      OutStr@1004 : OutStream;
      DefaultSelectedCount@1002 : Integer;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      WITH XMLSchemaElement DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        SETRANGE(Selected,TRUE);
        DefaultSelectedCount := COUNT;
        XSDParser.DeselectAll(XMLSchemaElement);
        Assert.AreEqual(COUNT,0,'Unexpected Selected elements.');
        SETRANGE(Selected);
        FINDLAST;
        XSDParser.SelectMandatory(XMLSchemaElement);
        SETRANGE(Selected,TRUE);
        Assert.AreEqual(DefaultSelectedCount,COUNT,'Wrong number of selected elements.');
      END;
    END;

    [Test]
    PROCEDURE TestSelectMandatorySubnodes@10();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      OutStr@1001 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      WITH XMLSchemaElement DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        MODIFYALL(Selected,FALSE);
        SETRANGE("Node Name",'GrpHdr');
        FINDFIRST;
        VALIDATE(Selected,TRUE);
        MODIFY;
        SETRANGE("Node Name",'MsgId');
        FINDFIRST;
        Assert.IsTrue(Selected,'Child was expected to have Selected=Yes.');
      END;
    END;

    [Test]
    PROCEDURE TestSelectMandatorySubnodesUsingAction@11();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      XSDParser@1001 : Codeunit 9610;
      OutStr@1002 : OutStream;
    BEGIN
      Initialize;

      // Setup.
      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      WITH XMLSchemaElement DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        MODIFYALL(Selected,TRUE);
        SETRANGE("Node Name",'GrpHdr');
        FINDFIRST;
        VALIDATE(Selected,FALSE);
        MODIFY;
      END;

      // Exercise.
      XSDParser.SelectMandatory(XMLSchemaElement);

      // Verify.
      XMLSchemaElement.SETRANGE("Node Name",'MsgId');
      XMLSchemaElement.FINDFIRST;
      Assert.IsTrue(XMLSchemaElement.Selected,'Child was expected to have Selected=Yes.');
    END;

    [Test]
    PROCEDURE TestSchemaContext@14();
    VAR
      XMLSchema@1000 : Record 9600;
      OutStr@1001 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      Assert.AreEqual('/Document/CstmrCdtTrfInitn',XMLSchema.GetSchemaContext,'Wrong common context for schema.');
    END;

    [Test]
    PROCEDURE TestFiltering@7();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      XSDParser@1001 : Codeunit 9610;
      OutStr@1002 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      WITH XMLSchemaElement DO BEGIN
        SETRANGE("XML Schema Code",XMLSchema.Code);
        XSDParser.HideNotMandatory(XMLSchemaElement);
        Assert.AreEqual(COUNT,7,'Wrong number of mandatory elements.');
        XSDParser.ShowAll(XMLSchemaElement);
        Assert.AreEqual(COUNT,8,'Wrong number of elements.');
        XSDParser.HideNotSelected(XMLSchemaElement);
        Assert.AreEqual(COUNT,7,'Wrong number of selected elements.');
      END;
    END;

    [Test]
    PROCEDURE TestDeletion@4();
    VAR
      XMLSchema@1002 : Record 9600;
      XMLSchemaElement@1001 : Record 9610;
      XMLSchemaRestriction@1000 : Record 9611;
      OutStr@1003 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);

      // Verify
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaRestriction.SETRANGE("XML Schema Code",XMLSchema.Code);
      Assert.IsFalse(XMLSchemaElement.ISEMPTY,'No tags were found.');
      Assert.IsFalse(XMLSchemaRestriction.ISEMPTY,'No enum. tags were found.');
      XMLSchema.DELETE(TRUE);
      Assert.IsTrue(XMLSchemaElement.ISEMPTY,'Tags were found.');
      Assert.IsTrue(XMLSchemaRestriction.ISEMPTY,'Enum. tags were found.');
    END;

    [Test]
    PROCEDURE TestParsingElementWithComplexTypeNested@15();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithComplexTypeNestedFile(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      Assert.AreEqual(6,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'Customer','/Customer');
      VerifyFullPath(XMLSchema,'Dob','/Customer/Dob');
      VerifyFullPath(XMLSchema,'Address','/Customer/Address');
      VerifyFullPath(XMLSchema,'Line1','/Customer/Address/Line1');
      VerifyFullPath(XMLSchema,'Line2','/Customer/Address/Line2');
      VerifyFullPath(XMLSchema,'NoOfInvoices','/Customer/NoOfInvoices');

      // Verify Types
      VerifySimpleDataType(XMLSchema,'Customer','');
      VerifySimpleDataType(XMLSchema,'Dob','date');
      VerifySimpleDataType(XMLSchema,'Address','');
      VerifySimpleDataType(XMLSchema,'Line1','string');
      VerifySimpleDataType(XMLSchema,'Line2','string');
      VerifySimpleDataType(XMLSchema,'NoOfInvoices','integer');
    END;

    [Test]
    PROCEDURE TestParsingGlobalComplexType@46();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithGlobalComplexType(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      Assert.AreEqual(11,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'Customer','/Customer');
      VerifyFullPath(XMLSchema,'Dob','/Customer/Dob');
      VerifyFullPath(XMLSchema,'Address','/Customer/Address');
      VerifyFullPath(XMLSchema,'Line1','/Customer/Address/Line1');
      VerifyFullPath(XMLSchema,'Line2','/Customer/Address/Line2');
      VerifyFullPath(XMLSchema,'CompanyAddress','/Customer/CompanyAddress');
      VerifyFullPath(XMLSchema,'Line1','/Customer/CompanyAddress/Line1');
      VerifyFullPath(XMLSchema,'Line2','/Customer/CompanyAddress/Line2');
      VerifyFullPath(XMLSchema,'CompanyAddress','/CompanyAddress');
      VerifyFullPath(XMLSchema,'Line1','/CompanyAddress/Line1');
      VerifyFullPath(XMLSchema,'Line2','/CompanyAddress/Line2');

      // Verify Types
      VerifySimpleDataType(XMLSchema,'Customer','');
      VerifySimpleDataType(XMLSchema,'Dob','date');
      VerifySimpleDataType(XMLSchema,'Address','');
      VerifySimpleDataType(XMLSchema,'Line1','string');
      VerifySimpleDataType(XMLSchema,'Line2','string');
    END;

    [Test]
    PROCEDURE TestParsingReferenceElements@28();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithReferences(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      Assert.AreEqual(28,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'purchaseOrder','/purchaseOrder');
      VerifyFullPath(XMLSchema,'orderDate','/purchaseOrder[@orderDate]');
      VerifyFullPath(XMLSchema,'shipTo','/purchaseOrder/shipTo');
      VerifyFullPath(XMLSchema,'name','/purchaseOrder/shipTo/name');
      VerifyFullPath(XMLSchema,'street','/purchaseOrder/shipTo/street');
      VerifyFullPath(XMLSchema,'country','/purchaseOrder/shipTo[@country]');
      VerifyFullPath(XMLSchema,'billTo','/purchaseOrder/billTo');
      VerifyFullPath(XMLSchema,'name','/purchaseOrder/billTo/name');
      VerifyFullPath(XMLSchema,'street','/purchaseOrder/billTo/street');
      VerifyFullPath(XMLSchema,'country','/purchaseOrder/billTo[@country]');
      VerifyFullPath(XMLSchema,'comment','/purchaseOrder/comment');
      VerifyFullPath(XMLSchema,'items','/purchaseOrder/items');
      VerifyFullPath(XMLSchema,'item','/purchaseOrder/items/item');
      VerifyFullPath(XMLSchema,'productName','/purchaseOrder/items/item/productName');
      VerifyFullPath(XMLSchema,'USPrice','/purchaseOrder/items/item/USPrice');
      VerifyFullPath(XMLSchema,'quantity','/purchaseOrder/items/item/quantity');
      VerifyFullPath(XMLSchema,'comment','/purchaseOrder/items/item/comment');
      VerifyFullPath(XMLSchema,'shipDate','/purchaseOrder/items/item/shipDate');
      VerifyFullPath(XMLSchema,'xs:decimal','/purchaseOrder/items/item[@xs:decimal]');

      VerifyFullPath(XMLSchema,'comment','/comment');

      VerifyFullPath(XMLSchema,'shipTo','/shipTo');
      VerifyFullPath(XMLSchema,'name','/shipTo/name');
      VerifyFullPath(XMLSchema,'street','/shipTo/street');
      VerifyFullPath(XMLSchema,'country','/shipTo[@country]');

      VerifyFullPath(XMLSchema,'billTo','/billTo');
      VerifyFullPath(XMLSchema,'name','/billTo/name');
      VerifyFullPath(XMLSchema,'street','/billTo/street');
      VerifyFullPath(XMLSchema,'country','/billTo[@country]');
    END;

    [Test]
    PROCEDURE TestParsingReferenceElementsWithAlternativeNamespace@68();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithReferencesAlternativeNamespace(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      Assert.AreEqual(28,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'purchaseOrder','/purchaseOrder');
      VerifyFullPath(XMLSchema,'orderDate','/purchaseOrder[@orderDate]');
      VerifyFullPath(XMLSchema,'cac:shipTo','/purchaseOrder/cac:shipTo');
      VerifyFullPath(XMLSchema,'cac:name','/purchaseOrder/cac:shipTo/cac:name');
      VerifyFullPath(XMLSchema,'cac:street','/purchaseOrder/cac:shipTo/cac:street');
      VerifyFullPath(XMLSchema,'country','/purchaseOrder/cac:shipTo[@country]');
      VerifyFullPath(XMLSchema,'cac:billTo','/purchaseOrder/cac:billTo');
      VerifyFullPath(XMLSchema,'cac:name','/purchaseOrder/cac:billTo/cac:name');
      VerifyFullPath(XMLSchema,'cac:street','/purchaseOrder/cac:billTo/cac:street');
      VerifyFullPath(XMLSchema,'country','/purchaseOrder/cac:billTo[@country]');
      VerifyFullPath(XMLSchema,'cac:comment','/purchaseOrder/cac:comment');
      VerifyFullPath(XMLSchema,'items','/purchaseOrder/items');
      VerifyFullPath(XMLSchema,'item','/purchaseOrder/items/item');
      VerifyFullPath(XMLSchema,'productName','/purchaseOrder/items/item/productName');
      VerifyFullPath(XMLSchema,'USPrice','/purchaseOrder/items/item/USPrice');
      VerifyFullPath(XMLSchema,'quantity','/purchaseOrder/items/item/quantity');
      VerifyFullPath(XMLSchema,'comment','/purchaseOrder/items/item/comment');
      VerifyFullPath(XMLSchema,'shipDate','/purchaseOrder/items/item/shipDate');
      VerifyFullPath(XMLSchema,'xs:decimal','/purchaseOrder/items/item[@xs:decimal]');

      VerifyFullPath(XMLSchema,'comment','/comment');

      VerifyFullPath(XMLSchema,'shipTo','/shipTo');
      VerifyFullPath(XMLSchema,'name','/shipTo/name');
      VerifyFullPath(XMLSchema,'street','/shipTo/street');
      VerifyFullPath(XMLSchema,'country','/shipTo[@country]');

      VerifyFullPath(XMLSchema,'billTo','/billTo');
      VerifyFullPath(XMLSchema,'name','/billTo/name');
      VerifyFullPath(XMLSchema,'street','/billTo/street');
      VerifyFullPath(XMLSchema,'country','/billTo[@country]');
    END;

    [Test]
    PROCEDURE TestParsingExtensions@38();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithExtensions(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      Assert.AreEqual(6,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'para','/para');
      VerifyFullPath(XMLSchema,'fname','/para/fname');
      VerifyFullPath(XMLSchema,'lname','/para/lname');
      VerifyFullPath(XMLSchema,'gen','/para/gen');
      VerifyFullPath(XMLSchema,'label','/para/gen[@label]');
      VerifyFullPath(XMLSchema,'description','/para/description');
    END;

    [Test]
    PROCEDURE TestDetectingInfiniteLoops@59();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithInfiniteLoops(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      Assert.AreEqual(18,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'SelfReferencingNode','/SelfReferencingNode');
      VerifyFullPath(XMLSchema,'AdditionalInformationParty','/AdditionalInformationParty');
      VerifyFullPath(XMLSchema,'Contact','/AdditionalInformationParty/Contact');
      VerifyFullPath(XMLSchema,'address','/AdditionalInformationParty/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/AdditionalInformationParty/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/AdditionalInformationParty/Contact/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/AdditionalInformationParty/Contact/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'ContactParty','/AdditionalInformationParty/ContactParty');

      VerifyFullPath(XMLSchema,'Contact','/Contact');
      VerifyFullPath(XMLSchema,'address','/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/Contact/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/Contact/ContactParty/Contact');

      VerifyFullPath(XMLSchema,'ContactParty','/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'address','/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/ContactParty/Contact/ContactParty');
    END;

    [Test]
    PROCEDURE TestSelectedIsNotSetOnInfiniteLoop@111();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithInfiniteLoops(OutStr);
      LoadSchemaFile(XMLSchema);

      // Verify Nodes
      GetElementByPath('Contact','/Contact/ContactParty/Contact',XMLSchema,XMLSchemaElement);
      Assert.IsFalse(XMLSchemaElement.Selected,'Infinite loop elements should not be marked as selected');
    END;

    [Test]
    PROCEDURE TestExtendingNotSelectedElements@118();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithInfiniteLoops(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      GetElementByPath('Contact','/Contact/ContactParty/Contact',XMLSchema,XMLSchemaElement);
      XMLSchemaElement.VALIDATE(Selected,TRUE);
      XMLSchemaElement.MODIFY(TRUE);

      Assert.AreEqual(22,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'SelfReferencingNode','/SelfReferencingNode');
      VerifyFullPath(XMLSchema,'AdditionalInformationParty','/AdditionalInformationParty');
      VerifyFullPath(XMLSchema,'Contact','/AdditionalInformationParty/Contact');
      VerifyFullPath(XMLSchema,'address','/AdditionalInformationParty/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/AdditionalInformationParty/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/AdditionalInformationParty/Contact/ContactParty/contactName');

      VerifyFullPath(XMLSchema,'Contact','/AdditionalInformationParty/Contact/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'ContactParty','/AdditionalInformationParty/ContactParty');

      VerifyFullPath(XMLSchema,'Contact','/Contact');
      VerifyFullPath(XMLSchema,'address','/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/Contact/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/Contact/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'address','/Contact/ContactParty/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/Contact/ContactParty/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'address','/Contact/ContactParty/Contact/address');

      VerifyFullPath(XMLSchema,'ContactParty','/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'address','/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/ContactParty/Contact/ContactParty');
    END;

    [Test]
    PROCEDURE TestTriggeringSelectedDoesntExpandTwice@126();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      OutStr@1000 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFileWithInfiniteLoops(OutStr);
      LoadSchemaFile(XMLSchema);

      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);

      // Verify Nodes
      GetElementByPath('Contact','/Contact/ContactParty/Contact',XMLSchema,XMLSchemaElement);
      XMLSchemaElement.VALIDATE(Selected,TRUE);
      XMLSchemaElement.MODIFY(TRUE);

      Assert.AreEqual(22,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      XMLSchemaElement.VALIDATE(Selected,FALSE);
      XMLSchemaElement.MODIFY(TRUE);

      XMLSchemaElement.VALIDATE(Selected,TRUE);
      XMLSchemaElement.MODIFY(TRUE);

      Assert.AreEqual(22,XMLSchemaElement.COUNT,'Element should not be expanded twice');
    END;

    [Test]
    PROCEDURE TestParseIncludeAndImportStatements@144();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      XSDParser@1004 : Codeunit 9610;
      FileManagement@1011 : Codeunit 419;
      InfiniteLoopDefinitionFile@1007 : File;
      AlternativeNamespaceDefinitionFile@1008 : File;
      MainDefinitionFile@1009 : File;
      InfiniteLoopOutStr@1000 : OutStream;
      AlternativeNamespaceSchemaOutStr@1006 : OutStream;
      MainDefinitionOutStr@1010 : OutStream;
      OutStream@1012 : OutStream;
      InStream@1013 : InStream;
    BEGIN
      Initialize;

      // Create Files
      InfiniteLoopDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      InfiniteLoopDefinitionFile.CREATEOUTSTREAM(InfiniteLoopOutStr);
      CreateSchemaFileWithInfiniteLoops(InfiniteLoopOutStr);

      AlternativeNamespaceDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      AlternativeNamespaceDefinitionFile.CREATEOUTSTREAM(AlternativeNamespaceSchemaOutStr);
      CreateSchemaFileWithReferencesAlternativeNamespace(AlternativeNamespaceSchemaOutStr);

      MainDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      MainDefinitionFile.CREATEOUTSTREAM(MainDefinitionOutStr);
      CreateSchemaFileWithImportAndIncludeStatements(
        MainDefinitionOutStr,InfiniteLoopDefinitionFile.NAME,AlternativeNamespaceDefinitionFile.NAME);

      XMLSchema.Code := 'Test';
      XMLSchema.Path := MainDefinitionFile.NAME;

      XMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      MainDefinitionFile.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      XMLSchema.INSERT;

      MainDefinitionFile.CLOSE;
      AlternativeNamespaceDefinitionFile.CLOSE;
      InfiniteLoopDefinitionFile.CLOSE;

      XSDParser.LoadSchema(XMLSchema);

      // Verify Nodes
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      Assert.AreEqual(27,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'MainSchema','/MainSchema');
      VerifyFullPath(XMLSchema,'Contact','/MainSchema/Contact');
      VerifyFullPath(XMLSchema,'address','/MainSchema/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/MainSchema/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/MainSchema/Contact/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/MainSchema/Contact/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'ContactParty','/MainSchema/ContactParty');
      VerifyFullPath(XMLSchema,'cac:shipTo','/MainSchema/cac:shipTo');

      VerifyFullPath(XMLSchema,'cac:purchaseOrder','/MainSchema/cac:purchaseOrder');
      VerifyFullPath(XMLSchema,'cac:comment','/MainSchema/cac:purchaseOrder/cac:comment');
      VerifyFullPath(XMLSchema,'orderDate','/MainSchema/cac:purchaseOrder[@orderDate]');

      VerifyFullPath(XMLSchema,'cac:shipTo','/MainSchema/cac:purchaseOrder/cac:shipTo');
      VerifyFullPath(XMLSchema,'cac:name','/MainSchema/cac:purchaseOrder/cac:shipTo/cac:name');
      VerifyFullPath(XMLSchema,'cac:street','/MainSchema/cac:purchaseOrder/cac:shipTo/cac:street');
      VerifyFullPath(XMLSchema,'country','/MainSchema/cac:purchaseOrder/cac:shipTo[@country]');

      VerifyFullPath(XMLSchema,'cac:billTo','/MainSchema/cac:purchaseOrder/cac:billTo');
      VerifyFullPath(XMLSchema,'cac:name','/MainSchema/cac:purchaseOrder/cac:billTo/cac:name');
      VerifyFullPath(XMLSchema,'cac:street','/MainSchema/cac:purchaseOrder/cac:billTo/cac:street');
      VerifyFullPath(XMLSchema,'country','/MainSchema/cac:purchaseOrder/cac:billTo[@country]');

      VerifyFullPath(XMLSchema,'cac:items','/MainSchema/cac:purchaseOrder/cac:items');
      VerifyFullPath(XMLSchema,'cac:item','/MainSchema/cac:purchaseOrder/cac:items/cac:item');
      VerifyFullPath(XMLSchema,'cac:productName','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:productName');
      VerifyFullPath(XMLSchema,'cac:quantity','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:quantity');
      VerifyFullPath(XMLSchema,'cac:USPrice','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:USPrice');
      VerifyFullPath(XMLSchema,'cac:comment','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:comment');
      VerifyFullPath(XMLSchema,'cac:shipDate','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:shipDate');
      VerifyFullPath(XMLSchema,'xs:decimal','/MainSchema/cac:purchaseOrder/cac:items/cac:item[@xs:decimal]');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TestLoadingAMissingSchema@44();
    VAR
      XMLSchema@1003 : Record 9600;
      AlternativeNamespaceXMLSchema@1014 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      XSDParser@1004 : Codeunit 9610;
      FileManagement@1011 : Codeunit 419;
      InfiniteLoopDefinitionFile@1007 : File;
      AlternativeNamespaceDefinitionFile@1008 : File;
      MainDefinitionFile@1009 : File;
      InfiniteLoopOutStr@1000 : OutStream;
      AlternativeNamespaceSchemaOutStr@1006 : OutStream;
      MainDefinitionOutStr@1010 : OutStream;
      OutStream@1012 : OutStream;
      InStream@1013 : InStream;
    BEGIN
      Initialize;

      // Create Files
      InfiniteLoopDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      InfiniteLoopDefinitionFile.CREATEOUTSTREAM(InfiniteLoopOutStr);
      CreateSchemaFileWithInfiniteLoops(InfiniteLoopOutStr);

      AlternativeNamespaceDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));

      MainDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      MainDefinitionFile.CREATEOUTSTREAM(MainDefinitionOutStr);
      CreateSchemaFileWithImportAndIncludeStatements(
        MainDefinitionOutStr,InfiniteLoopDefinitionFile.NAME,AlternativeNamespaceDefinitionFile.NAME);

      XMLSchema.Code := 'Test';
      XMLSchema.Path := MainDefinitionFile.NAME;

      XMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      MainDefinitionFile.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      XMLSchema.INSERT;

      MainDefinitionFile.CLOSE;
      InfiniteLoopDefinitionFile.CLOSE;

      XSDParser.LoadSchema(XMLSchema);
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      Assert.AreEqual(9,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      AlternativeNamespaceDefinitionFile.CREATEOUTSTREAM(AlternativeNamespaceSchemaOutStr);
      CreateSchemaFileWithReferencesAlternativeNamespace(AlternativeNamespaceSchemaOutStr);
      AlternativeNamespaceXMLSchema.SETRANGE(Path,AlternativeNamespaceDefinitionFile.NAME);
      AlternativeNamespaceXMLSchema.FINDFIRST;

      AlternativeNamespaceXMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      AlternativeNamespaceDefinitionFile.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);

      XSDParser.LoadSchema(AlternativeNamespaceXMLSchema);
      AlternativeNamespaceDefinitionFile.CLOSE;

      // Verify Nodes
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      Assert.AreEqual(27,XMLSchemaElement.COUNT,'Wrong number of nodes found');

      // Verify Paths
      VerifyFullPath(XMLSchema,'MainSchema','/MainSchema');
      VerifyFullPath(XMLSchema,'Contact','/MainSchema/Contact');
      VerifyFullPath(XMLSchema,'address','/MainSchema/Contact/address');
      VerifyFullPath(XMLSchema,'ContactParty','/MainSchema/Contact/ContactParty');
      VerifyFullPath(XMLSchema,'contactName','/MainSchema/Contact/ContactParty/contactName');
      VerifyFullPath(XMLSchema,'Contact','/MainSchema/Contact/ContactParty/Contact');
      VerifyFullPath(XMLSchema,'ContactParty','/MainSchema/ContactParty');
      VerifyFullPath(XMLSchema,'cac:shipTo','/MainSchema/cac:shipTo');

      VerifyFullPath(XMLSchema,'cac:purchaseOrder','/MainSchema/cac:purchaseOrder');
      VerifyFullPath(XMLSchema,'cac:comment','/MainSchema/cac:purchaseOrder/cac:comment');
      VerifyFullPath(XMLSchema,'orderDate','/MainSchema/cac:purchaseOrder[@orderDate]');

      VerifyFullPath(XMLSchema,'cac:shipTo','/MainSchema/cac:purchaseOrder/cac:shipTo');
      VerifyFullPath(XMLSchema,'cac:name','/MainSchema/cac:purchaseOrder/cac:shipTo/cac:name');
      VerifyFullPath(XMLSchema,'cac:street','/MainSchema/cac:purchaseOrder/cac:shipTo/cac:street');
      VerifyFullPath(XMLSchema,'country','/MainSchema/cac:purchaseOrder/cac:shipTo[@country]');

      VerifyFullPath(XMLSchema,'cac:billTo','/MainSchema/cac:purchaseOrder/cac:billTo');
      VerifyFullPath(XMLSchema,'cac:name','/MainSchema/cac:purchaseOrder/cac:billTo/cac:name');
      VerifyFullPath(XMLSchema,'cac:street','/MainSchema/cac:purchaseOrder/cac:billTo/cac:street');
      VerifyFullPath(XMLSchema,'country','/MainSchema/cac:purchaseOrder/cac:billTo[@country]');

      VerifyFullPath(XMLSchema,'cac:items','/MainSchema/cac:purchaseOrder/cac:items');
      VerifyFullPath(XMLSchema,'cac:item','/MainSchema/cac:purchaseOrder/cac:items/cac:item');
      VerifyFullPath(XMLSchema,'cac:productName','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:productName');
      VerifyFullPath(XMLSchema,'cac:quantity','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:quantity');
      VerifyFullPath(XMLSchema,'cac:USPrice','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:USPrice');
      VerifyFullPath(XMLSchema,'cac:comment','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:comment');
      VerifyFullPath(XMLSchema,'cac:shipDate','/MainSchema/cac:purchaseOrder/cac:items/cac:item/cac:shipDate');
      VerifyFullPath(XMLSchema,'xs:decimal','/MainSchema/cac:purchaseOrder/cac:items/cac:item[@xs:decimal]');
    END;

    [Test]
    PROCEDURE TestDeleteMainXSDSchema@17();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      XMLSchemaRestriction@1001 : Record 9611;
      ReferencedXMLSchema@1015 : Record 9612;
      XSDParser@1004 : Codeunit 9610;
      FileManagement@1011 : Codeunit 419;
      InfiniteLoopDefinitionFile@1007 : File;
      AlternativeNamespaceDefinitionFile@1008 : File;
      MainDefinitionFile@1009 : File;
      InfiniteLoopOutStr@1000 : OutStream;
      AlternativeNamespaceSchemaOutStr@1006 : OutStream;
      MainDefinitionOutStr@1010 : OutStream;
      OutStream@1012 : OutStream;
      InStream@1013 : InStream;
      MainSchemaCode@1014 : Code[20];
    BEGIN
      Initialize;

      // Create Files
      InfiniteLoopDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      InfiniteLoopDefinitionFile.CREATEOUTSTREAM(InfiniteLoopOutStr);
      CreateSchemaFileWithInfiniteLoops(InfiniteLoopOutStr);

      AlternativeNamespaceDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      AlternativeNamespaceDefinitionFile.CREATEOUTSTREAM(AlternativeNamespaceSchemaOutStr);
      CreateSchemaFileWithReferencesAlternativeNamespace(AlternativeNamespaceSchemaOutStr);

      MainDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      MainDefinitionFile.CREATEOUTSTREAM(MainDefinitionOutStr);
      CreateSchemaFileWithImportAndIncludeStatements(
        MainDefinitionOutStr,InfiniteLoopDefinitionFile.NAME,AlternativeNamespaceDefinitionFile.NAME);

      XMLSchema.Code := 'Test';
      XMLSchema.Path := MainDefinitionFile.NAME;

      XMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      MainDefinitionFile.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      XMLSchema.INSERT;

      MainDefinitionFile.CLOSE;
      AlternativeNamespaceDefinitionFile.CLOSE;
      InfiniteLoopDefinitionFile.CLOSE;

      XSDParser.LoadSchema(XMLSchema);
      MainSchemaCode := XMLSchema.Code;
      XMLSchema.DELETE(TRUE);

      XMLSchema.SETFILTER(Code,STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchema.ISEMPTY,'Not all schemas were removed');

      XMLSchemaElement.SETFILTER("XML Schema Code",STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchemaElement.ISEMPTY,'Not all schema elements were removed');

      XMLSchemaRestriction.SETFILTER("XML Schema Code",STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchemaRestriction.ISEMPTY,'Not all schema restrictions were removed');

      ReferencedXMLSchema.SETFILTER(Code,STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(ReferencedXMLSchema.ISEMPTY,'Not all referenced schemas were removed');
    END;

    [Test]
    PROCEDURE TestDeleteMainXSDSchemaDefinition@45();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      XMLSchemaRestriction@1001 : Record 9611;
      DefinitionXMLSchema@1016 : Record 9600;
      ReferencedXMLSchema@1015 : Record 9612;
      XSDParser@1004 : Codeunit 9610;
      FileManagement@1011 : Codeunit 419;
      InfiniteLoopDefinitionFile@1007 : File;
      AlternativeNamespaceDefinitionFile@1008 : File;
      MainDefinitionFile@1009 : File;
      InfiniteLoopOutStr@1000 : OutStream;
      AlternativeNamespaceSchemaOutStr@1006 : OutStream;
      MainDefinitionOutStr@1010 : OutStream;
      OutStream@1012 : OutStream;
      InStream@1013 : InStream;
      MainSchemaCode@1014 : Code[20];
    BEGIN
      Initialize;

      // Create Files
      InfiniteLoopDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      InfiniteLoopDefinitionFile.CREATEOUTSTREAM(InfiniteLoopOutStr);
      CreateSchemaFileWithInfiniteLoops(InfiniteLoopOutStr);

      AlternativeNamespaceDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      AlternativeNamespaceDefinitionFile.CREATEOUTSTREAM(AlternativeNamespaceSchemaOutStr);
      CreateSchemaFileWithReferencesAlternativeNamespace(AlternativeNamespaceSchemaOutStr);

      MainDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      MainDefinitionFile.CREATEOUTSTREAM(MainDefinitionOutStr);
      CreateSchemaFileWithImportAndIncludeStatements(
        MainDefinitionOutStr,InfiniteLoopDefinitionFile.NAME,AlternativeNamespaceDefinitionFile.NAME);

      XMLSchema.Code := 'Test';
      XMLSchema.Path := MainDefinitionFile.NAME;

      XMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      MainDefinitionFile.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      XMLSchema.INSERT;

      MainDefinitionFile.CLOSE;
      AlternativeNamespaceDefinitionFile.CLOSE;
      InfiniteLoopDefinitionFile.CLOSE;

      XSDParser.LoadSchema(XMLSchema);
      MainSchemaCode := XMLSchema.Code;

      DefinitionXMLSchema.SETRANGE(Code,STRSUBSTNO('%1:1000',MainSchemaCode));
      DefinitionXMLSchema.FINDFIRST;
      DefinitionXMLSchema.DELETE(TRUE);

      XMLSchema.SETFILTER(Code,STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchema.ISEMPTY,'Not all schemas were removed');

      XMLSchemaElement.SETFILTER("XML Schema Code",STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchemaElement.ISEMPTY,'Not all schema elements were removed');

      XMLSchemaRestriction.SETFILTER("XML Schema Code",STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchemaRestriction.ISEMPTY,'Not all schema restrictions were removed');

      ReferencedXMLSchema.SETFILTER(Code,STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(ReferencedXMLSchema.ISEMPTY,'Not all referenced schemas were removed');
    END;

    [Test]
    PROCEDURE TestDeleteDependentXSDSchema@47();
    VAR
      XMLSchema@1003 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      XMLSchemaRestriction@1001 : Record 9611;
      ReferencedXMLSchema@1015 : Record 9612;
      ChildXMLSchema@1016 : Record 9600;
      XSDParser@1004 : Codeunit 9610;
      FileManagement@1011 : Codeunit 419;
      InfiniteLoopDefinitionFile@1007 : File;
      AlternativeNamespaceDefinitionFile@1008 : File;
      MainDefinitionFile@1009 : File;
      InfiniteLoopOutStr@1000 : OutStream;
      AlternativeNamespaceSchemaOutStr@1006 : OutStream;
      MainDefinitionOutStr@1010 : OutStream;
      OutStream@1012 : OutStream;
      InStream@1013 : InStream;
      MainSchemaCode@1014 : Code[20];
    BEGIN
      Initialize;

      // Create Files
      InfiniteLoopDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      InfiniteLoopDefinitionFile.CREATEOUTSTREAM(InfiniteLoopOutStr);
      CreateSchemaFileWithInfiniteLoops(InfiniteLoopOutStr);

      AlternativeNamespaceDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      AlternativeNamespaceDefinitionFile.CREATEOUTSTREAM(AlternativeNamespaceSchemaOutStr);
      CreateSchemaFileWithReferencesAlternativeNamespace(AlternativeNamespaceSchemaOutStr);

      MainDefinitionFile.CREATE(FileManagement.ServerTempFileName('.xsd'));
      MainDefinitionFile.CREATEOUTSTREAM(MainDefinitionOutStr);
      CreateSchemaFileWithImportAndIncludeStatements(
        MainDefinitionOutStr,InfiniteLoopDefinitionFile.NAME,AlternativeNamespaceDefinitionFile.NAME);

      XMLSchema.Code := 'Test';
      XMLSchema.Path := MainDefinitionFile.NAME;

      XMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      MainDefinitionFile.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      XMLSchema.INSERT;

      MainDefinitionFile.CLOSE;
      AlternativeNamespaceDefinitionFile.CLOSE;
      InfiniteLoopDefinitionFile.CLOSE;

      XSDParser.LoadSchema(XMLSchema);
      MainSchemaCode := XMLSchema.Code;
      ChildXMLSchema.SETRANGE(Indentation,2);
      ChildXMLSchema.FINDLAST;
      ChildXMLSchema.DELETE(TRUE);

      XMLSchema.SETFILTER(Code,STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchema.ISEMPTY,'Not all schemas were removed');

      XMLSchemaElement.SETFILTER("XML Schema Code",STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchemaElement.ISEMPTY,'Not all schema elements were removed');

      XMLSchemaRestriction.SETFILTER("XML Schema Code",STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(XMLSchemaRestriction.ISEMPTY,'Not all schema restrictions were removed');

      ReferencedXMLSchema.SETFILTER(Code,STRSUBSTNO('%1*',MainSchemaCode));
      Assert.IsTrue(ReferencedXMLSchema.ISEMPTY,'Not all referenced schemas were removed');
    END;

    [Test]
    [HandlerFunctions(DataExchDefModalPageHandler)]
    PROCEDURE CreateDataExchDef@2();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1003 : Record 9610;
      DataExchDef@1002 : Record 1222;
      XSDParser@1001 : Codeunit 9610;
      OutStr@1004 : OutStream;
    BEGIN
      Initialize;

      // Setup.
      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaElement.MODIFYALL(Selected,TRUE);
      XMLSchemaElement.FINDFIRST;
      XMLSchemaElement.VALIDATE(Selected,FALSE);
      XMLSchemaElement.MODIFY;
      IF DataExchDef.GET(XMLSchema.Code) THEN
        DataExchDef.DELETE(TRUE);

      // Exercise.
      XSDParser.CreateDataExchDefForCAMT(XMLSchemaElement);

      // Verify.
      VerifyDataExchDef(XMLSchema);
    END;

    [Test]
    PROCEDURE IsLeaf@39();
    VAR
      XMLSchema@1000 : Record 9600;
      OutStr@1001 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);

      // Verify.
      VerifyLeafStatus(XMLSchema,'Document',FALSE);
      VerifyLeafStatus(XMLSchema,'CstmrCdtTrfInitn',FALSE);
      VerifyLeafStatus(XMLSchema,'GrpHdr',FALSE);
      VerifyLeafStatus(XMLSchema,'MsgId',TRUE);
      VerifyLeafStatus(XMLSchema,'Test1',TRUE);
      VerifyLeafStatus(XMLSchema,'Test2',TRUE);
      VerifyLeafStatus(XMLSchema,'LineAmt',TRUE);
    END;

    [Test]
    PROCEDURE FullPath@49();
    VAR
      XMLSchema@1000 : Record 9600;
      OutStr@1001 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);

      // Verify.
      VerifyFullPath(XMLSchema,'Document','/Document');
      VerifyFullPath(XMLSchema,'CstmrCdtTrfInitn','/Document/CstmrCdtTrfInitn');
      VerifyFullPath(XMLSchema,'GrpHdr','/Document/CstmrCdtTrfInitn/GrpHdr');
      VerifyFullPath(XMLSchema,'MsgId','/Document/CstmrCdtTrfInitn/GrpHdr/MsgId');
      VerifyFullPath(XMLSchema,'Test1','/Document/CstmrCdtTrfInitn/Test1');
      VerifyFullPath(XMLSchema,'Test2','/Document/CstmrCdtTrfInitn/Test2');
      VerifyFullPath(XMLSchema,'LineAmt','/Document/CstmrCdtTrfInitn/LineAmt');
      VerifyFullPath(XMLSchema,'Ccy','/Document/CstmrCdtTrfInitn/LineAmt[@Ccy]');
    END;

    [Test]
    PROCEDURE SimpleDataType@21();
    VAR
      XMLSchema@1000 : Record 9600;
      OutStr@1001 : OutStream;
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);

      // Verify.
      VerifySimpleDataType(XMLSchema,'Document','');
      VerifySimpleDataType(XMLSchema,'CstmrCdtTrfInitn','');
      VerifySimpleDataType(XMLSchema,'GrpHdr','');
      VerifySimpleDataType(XMLSchema,'MsgId','string');
      VerifySimpleDataType(XMLSchema,'Test1','string');
      VerifySimpleDataType(XMLSchema,'Test2','');
      VerifySimpleDataType(XMLSchema,'LineAmt','string');
      VerifySimpleDataType(XMLSchema,'Ccy','string');
    END;

    [Test]
    PROCEDURE CreateXMLPort@27();
    VAR
      XMLSchema@1000 : Record 9600;
      XMLSchemaElement@1002 : Record 9610;
      TempBlob@1005 : Record 99008535;
      XSDParser@1001 : Codeunit 9610;
      FileMgt@1004 : Codeunit 419;
      InStr@1006 : InStream;
      OutStr@1008 : OutStream;
      FileName@1003 : Text;
      TxtLine@1007 : Text[1024];
    BEGIN
      Initialize;

      CreateXMLSchemaRecord(XMLSchema,OutStr);
      CreateSchemaFile(OutStr);
      LoadSchemaFile(XMLSchema);
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaElement.FINDFIRST;
      FileName := XSDParser.CreateXMLPortFile(XMLSchemaElement,50000,'XMLPort 50000',FALSE,FALSE);
      FileMgt.BLOBImport(TempBlob,FileName);
      TempBlob.Blob.CREATEINSTREAM(InStr);
      InStr.READTEXT(TxtLine);
      Assert.AreEqual('OBJECT XMLport 50000 XMLPort 50000',TxtLine,'Unexpected content in object file.');
    END;

    LOCAL PROCEDURE LoadSchemaFile@24(VAR XMLSchema@1000 : Record 9600);
    VAR
      XSDParser@1002 : Codeunit 9610;
    BEGIN
      XSDParser.LoadSchema(XMLSchema);
      XMLSchema.MODIFY;
    END;

    LOCAL PROCEDURE CreateXMLSchemaRecord@26(VAR XMLSchema@1000 : Record 9600;VAR OutStream@1001 : OutStream);
    BEGIN
      XMLSchema.INIT;
      XMLSchema.Code := 'TEST';
      XMLSchema.Description := 'Test schema';
      XMLSchema.XSD.CREATEOUTSTREAM(OutStream);
      XMLSchema.INSERT;
    END;

    LOCAL PROCEDURE CreateSchemaFile@3(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT('<!--Generated by SWIFTStandards Workstation (build:R7.1.30.4) on 2012 Jun 07 20:47:19-->');
      OutStr.WRITETEXT(
        '<xs:schema elementFormDefault="qualified" targetNamespace="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04"' +
        ' xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04" xmlns:xs="http://www.w3.org/2001/XMLSchema">');
      OutStr.WRITETEXT('<xs:element name="Document" type="Document"/>');
      OutStr.WRITETEXT('<xs:complexType name="CustomerCreditTransferInitiationV04">');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="GrpHdr" type="GroupHeader48"/>');
      OutStr.WRITETEXT('<xs:element name="Test1" type="DocumentType5Code"/>');
      OutStr.WRITETEXT('<xs:element name="Test2" type="IBAN2007Identifier" minOccurs="0" maxOccurs="1"/>');
      OutStr.WRITETEXT('<xs:element name="LineAmt" type="Amount"/>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('<xs:complexType name="Document">');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="CstmrCdtTrfInitn" type="CustomerCreditTransferInitiationV04"/>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('<xs:simpleType name="DocumentType5Code">');
      OutStr.WRITETEXT('<xs:restriction base="xs:string">');
      OutStr.WRITETEXT('<xs:enumeration value="MSIN"/>');
      OutStr.WRITETEXT('<xs:enumeration value="CNFA"/>');
      OutStr.WRITETEXT('<xs:enumeration value="DNFA"/>');
      OutStr.WRITETEXT('<xs:enumeration value="CINV"/>');
      OutStr.WRITETEXT('<xs:enumeration value="CREN"/>');
      OutStr.WRITETEXT('<xs:enumeration value="DEBN"/>');
      OutStr.WRITETEXT('<xs:enumeration value="HIRI"/>');
      OutStr.WRITETEXT('<xs:enumeration value="SBIN"/>');
      OutStr.WRITETEXT('<xs:enumeration value="CMCN"/>');
      OutStr.WRITETEXT('<xs:enumeration value="SOAC"/>');
      OutStr.WRITETEXT('<xs:enumeration value="DISP"/>');
      OutStr.WRITETEXT('<xs:enumeration value="BOLD"/>');
      OutStr.WRITETEXT('<xs:enumeration value="VCHR"/>');
      OutStr.WRITETEXT('<xs:enumeration value="AROI"/>');
      OutStr.WRITETEXT('<xs:enumeration value="TSUT"/>');
      OutStr.WRITETEXT('</xs:restriction>');
      OutStr.WRITETEXT('</xs:simpleType>');
      OutStr.WRITETEXT('<xs:complexType name="GroupHeader48">');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="MsgId" type="Max35Text" minOccurs="1"/>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('<xs:complexType name="Amount">');
      OutStr.WRITETEXT('<xs:simpleContent>');
      OutStr.WRITETEXT('<xs:extension base="xs:string">');
      OutStr.WRITETEXT('<xs:attribute type="CurrencyCode" name="Ccy" use="required"/>');
      OutStr.WRITETEXT('</xs:extension>');
      OutStr.WRITETEXT('</xs:simpleContent>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('<xs:simpleType name="CurrencyCode">');
      OutStr.WRITETEXT('<xs:restriction base="xs:string">');
      OutStr.WRITETEXT('<xs:pattern value="[A-Z]{3,3}"/>');
      OutStr.WRITETEXT('</xs:restriction>');
      OutStr.WRITETEXT('</xs:simpleType>');
      OutStr.WRITETEXT('<xs:simpleType name="IBAN2007Identifier">');
      OutStr.WRITETEXT('<xs:restriction base="xs:string">');
      OutStr.WRITETEXT('<xs:pattern value="[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}"/>');
      OutStr.WRITETEXT('</xs:restriction>');
      OutStr.WRITETEXT('</xs:simpleType>');
      OutStr.WRITETEXT('<xs:simpleType name="Max35Text">');
      OutStr.WRITETEXT('<xs:restriction base="xs:string">');
      OutStr.WRITETEXT('<xs:minLength value="1"/>');
      OutStr.WRITETEXT('<xs:maxLength value="35"/>');
      OutStr.WRITETEXT('</xs:restriction>');
      OutStr.WRITETEXT('</xs:simpleType>');
      OutStr.WRITETEXT('</xs:schema>');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithComplexTypeNestedFile@25(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT(
        '<xs:schema elementFormDefault="qualified" targetNamespace="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04"' +
        ' xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04" xmlns:xs="http://www.w3.org/2001/XMLSchema">');
      OutStr.WRITETEXT('<xs:element name="Customer">');
      OutStr.WRITETEXT('<xs:complexType>');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="Dob" type="xs:date" />');
      OutStr.WRITETEXT('<xs:element name="Address">');
      OutStr.WRITETEXT('<xs:complexType>');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="Line1" type="xs:string"/>');
      OutStr.WRITETEXT('<xs:element name="Line2" type="xs:string"/>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('</xs:element>');
      OutStr.WRITETEXT('<xs:element name="NoOfInvoices">');
      OutStr.WRITETEXT('<xs:simpleType>');
      OutStr.WRITETEXT('<xs:restriction base="xs:integer">');
      OutStr.WRITETEXT('<xs:minInclusive value="0"/>');
      OutStr.WRITETEXT('<xs:maxInclusive value="100"/>');
      OutStr.WRITETEXT('</xs:restriction>');
      OutStr.WRITETEXT('</xs:simpleType>');
      OutStr.WRITETEXT('</xs:element>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('</xs:element>');
      OutStr.WRITETEXT('</xs:schema>');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithGlobalComplexType@31(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT(
        '<xs:schema elementFormDefault="qualified" targetNamespace="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04"' +
        ' xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04" xmlns:xs="http://www.w3.org/2001/XMLSchema">');
      OutStr.WRITETEXT('<xs:complexType name="AddressType">');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="Line1" type="xs:string"/>');
      OutStr.WRITETEXT('<xs:element name="Line2" type="xs:string"/>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('<xs:element name="CompanyAddress" type="AddressType"/>');
      OutStr.WRITETEXT('<xs:element name="Customer">');
      OutStr.WRITETEXT('<xs:complexType>');
      OutStr.WRITETEXT('<xs:sequence>');
      OutStr.WRITETEXT('<xs:element name="Dob" type="xs:date" />');
      OutStr.WRITETEXT('<xs:element name="Address" type="AddressType" />');
      OutStr.WRITETEXT('<xs:element ref="CompanyAddress"/>');
      OutStr.WRITETEXT('</xs:sequence>');
      OutStr.WRITETEXT('</xs:complexType>');
      OutStr.WRITETEXT('</xs:element>');

      OutStr.WRITETEXT('</xs:schema>');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithReferences@51(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT('<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"');
      OutStr.WRITETEXT('           targetNamespace="http://tempuri.org/po.xsd"');
      OutStr.WRITETEXT('           xmlns="http://tempuri.org/po.xsd" elementFormDefault="qualified">');
      OutStr.WRITETEXT('  <xs:annotation>');
      OutStr.WRITETEXT('    <xs:documentation xml:lang="en">');
      OutStr.WRITETEXT('      From MSDN');
      OutStr.WRITETEXT('    </xs:documentation>');
      OutStr.WRITETEXT('  </xs:annotation>');

      OutStr.WRITETEXT('  <xs:element name="purchaseOrder" type="PurchaseOrderType"/>');

      OutStr.WRITETEXT('  <xs:element name="comment" type="xs:string" minOccurs="0"/>');
      OutStr.WRITETEXT('  <xs:element name="shipTo" type="USAddress"/>');
      OutStr.WRITETEXT('  <xs:element name="billTo" type="USAddress"/>');

      OutStr.WRITETEXT('  <xs:complexType name="PurchaseOrderType">');
      OutStr.WRITETEXT('   <xs:sequence>                             ');
      OutStr.WRITETEXT('     <xs:element ref="shipTo" />');
      OutStr.WRITETEXT('     <xs:element ref="billTo" />');
      OutStr.WRITETEXT('     <xs:element ref="comment" minOccurs="0"/>');
      OutStr.WRITETEXT('     <xs:element name="items"  type="Items"/>  ');
      OutStr.WRITETEXT('    </xs:sequence>');
      OutStr.WRITETEXT('    <xs:attribute name="orderDate" type="xs:date"/>');
      OutStr.WRITETEXT('  </xs:complexType>');

      OutStr.WRITETEXT('  <xs:complexType name="USAddress"> ');
      OutStr.WRITETEXT('    <xs:sequence>');
      OutStr.WRITETEXT('      <xs:element name="name"   type="xs:string"/> ');
      OutStr.WRITETEXT('      <xs:element name="street" type="xs:string"/>');
      OutStr.WRITETEXT('    </xs:sequence>');
      OutStr.WRITETEXT('    <xs:attribute name="country" type="xs:NMTOKEN" fixed="US"/>');
      OutStr.WRITETEXT('  </xs:complexType>');

      OutStr.WRITETEXT('  <xs:complexType name="Items">');
      OutStr.WRITETEXT('    <xs:sequence>');
      OutStr.WRITETEXT('      <xs:element name="item" maxOccurs="unbounded">');
      OutStr.WRITETEXT('        <xs:complexType> ');
      OutStr.WRITETEXT('          <xs:sequence> ');
      OutStr.WRITETEXT('            <xs:element name="productName" type="xs:string"/>');
      OutStr.WRITETEXT('            <xs:element name="quantity">');
      OutStr.WRITETEXT('              <xs:simpleType>');
      OutStr.WRITETEXT('                <xs:restriction base="xs:positiveInteger">');
      OutStr.WRITETEXT('                  <xs:maxExclusive value="100"/>');
      OutStr.WRITETEXT('                </xs:restriction>   ');
      OutStr.WRITETEXT('              </xs:simpleType> ');
      OutStr.WRITETEXT('            </xs:element>   ');
      OutStr.WRITETEXT('            <xs:element name="USPrice" type="xs:decimal"/>');
      OutStr.WRITETEXT('            <xs:element ref="comment" minOccurs="0"/>  ');
      OutStr.WRITETEXT('            <xs:element name="shipDate" type="xs:date" minOccurs="0"/>');
      OutStr.WRITETEXT('          </xs:sequence>');
      OutStr.WRITETEXT('          <xs:attribute ref="xs:decimal"/>');
      OutStr.WRITETEXT('        </xs:complexType>    ');
      OutStr.WRITETEXT('      </xs:element>   ');
      OutStr.WRITETEXT('    </xs:sequence>    ');
      OutStr.WRITETEXT('  </xs:complexType>   ');
      OutStr.WRITETEXT('</xs:schema>          ');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithReferencesAlternativeNamespace@70(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT('<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"');
      OutStr.WRITETEXT('           targetNamespace="mytest:namespace"');
      OutStr.WRITETEXT('           xmlns="mytest:namespace" xmlns:cac="mytest:namespace" elementFormDefault="qualified">');
      OutStr.WRITETEXT('  <xs:annotation>');
      OutStr.WRITETEXT('    <xs:documentation xml:lang="en">');
      OutStr.WRITETEXT('      From MSDN');
      OutStr.WRITETEXT('    </xs:documentation>');
      OutStr.WRITETEXT('  </xs:annotation>');

      OutStr.WRITETEXT('  <xs:element name="purchaseOrder" type="PurchaseOrderType"/>');

      OutStr.WRITETEXT('  <xs:element name="comment" type="xs:string" minOccurs="0"/>');
      OutStr.WRITETEXT('  <xs:element name="shipTo" type="USAddress"/>');
      OutStr.WRITETEXT('  <xs:element name="billTo" type="USAddress"/>');

      OutStr.WRITETEXT('  <xs:complexType name="PurchaseOrderType">');
      OutStr.WRITETEXT('   <xs:sequence>                             ');
      OutStr.WRITETEXT('     <xs:element ref="cac:shipTo" />');
      OutStr.WRITETEXT('     <xs:element ref="cac:billTo" />');
      OutStr.WRITETEXT('     <xs:element ref="cac:comment" minOccurs="0"/>');
      OutStr.WRITETEXT('     <xs:element name="items"  type="Items"/>  ');
      OutStr.WRITETEXT('    </xs:sequence>');
      OutStr.WRITETEXT('    <xs:attribute name="orderDate" type="xs:date"/>');
      OutStr.WRITETEXT('  </xs:complexType>');

      OutStr.WRITETEXT('  <xs:complexType name="USAddress"> ');
      OutStr.WRITETEXT('    <xs:sequence>');
      OutStr.WRITETEXT('      <xs:element name="name"   type="xs:string"/> ');
      OutStr.WRITETEXT('      <xs:element name="street" type="xs:string"/>');
      OutStr.WRITETEXT('    </xs:sequence>');
      OutStr.WRITETEXT('    <xs:attribute name="country" type="xs:NMTOKEN" fixed="US"/>');
      OutStr.WRITETEXT('  </xs:complexType>');

      OutStr.WRITETEXT('  <xs:complexType name="Items">');
      OutStr.WRITETEXT('    <xs:sequence>');
      OutStr.WRITETEXT('      <xs:element name="item" maxOccurs="unbounded">');
      OutStr.WRITETEXT('        <xs:complexType> ');
      OutStr.WRITETEXT('          <xs:sequence> ');
      OutStr.WRITETEXT('            <xs:element name="productName" type="xs:string"/>');
      OutStr.WRITETEXT('            <xs:element name="quantity">');
      OutStr.WRITETEXT('              <xs:simpleType>');
      OutStr.WRITETEXT('                <xs:restriction base="xs:positiveInteger">');
      OutStr.WRITETEXT('                  <xs:maxExclusive value="100"/>');
      OutStr.WRITETEXT('                </xs:restriction>   ');
      OutStr.WRITETEXT('              </xs:simpleType> ');
      OutStr.WRITETEXT('            </xs:element>   ');
      OutStr.WRITETEXT('            <xs:element name="USPrice" type="xs:decimal"/>');
      OutStr.WRITETEXT('            <xs:element ref="comment" minOccurs="0"/>  ');
      OutStr.WRITETEXT('            <xs:element name="shipDate" type="xs:date" minOccurs="0"/>');
      OutStr.WRITETEXT('          </xs:sequence>');
      OutStr.WRITETEXT('          <xs:attribute ref="xs:decimal"/>');
      OutStr.WRITETEXT('        </xs:complexType>    ');
      OutStr.WRITETEXT('      </xs:element>   ');
      OutStr.WRITETEXT('    </xs:sequence>    ');
      OutStr.WRITETEXT('  </xs:complexType>   ');
      OutStr.WRITETEXT('</xs:schema>          ');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithExtensions@20(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT('<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"');
      OutStr.WRITETEXT('           targetNamespace="http://tempuri.org/po.xsd"');
      OutStr.WRITETEXT(
        '           xmlns="http://tempuri.org/po.xsd" xmlns:cac="http://tempuri.org/po.xsd" elementFormDefault="qualified">');

      OutStr.WRITETEXT('           <xs:element name="para" type="extendedNameType"/>');

      OutStr.WRITETEXT('           <xs:complexType name="nameType">');
      OutStr.WRITETEXT('             <xs:sequence>                 ');
      OutStr.WRITETEXT('              <xs:element name="fname" type="xs:string"/>');
      OutStr.WRITETEXT('              <xs:element name="lname" type="xs:string"/>');
      OutStr.WRITETEXT('             </xs:sequence>                              ');
      OutStr.WRITETEXT('           </xs:complexType>                             ');

      OutStr.WRITETEXT('           <xs:complexType name="extendedNameType">      ');
      OutStr.WRITETEXT('            <xs:complexContent>                          ');
      OutStr.WRITETEXT('             <xs:extension base="nameType">              ');
      OutStr.WRITETEXT('               <xs:sequence>                             ');
      OutStr.WRITETEXT('                 <xs:element name="gen" type="genType"/> ');
      OutStr.WRITETEXT('                 <xs:element name="description" type="xs:string"/>  ');
      OutStr.WRITETEXT('               </xs:sequence>                                       ');
      OutStr.WRITETEXT('             </xs:extension>                                        ');
      OutStr.WRITETEXT('            </xs:complexContent>                                    ');
      OutStr.WRITETEXT('           </xs:complexType>                                        ');

      OutStr.WRITETEXT('           <xs:complexType name="genType">                          ');
      OutStr.WRITETEXT('             <xs:simpleContent>                                     ');
      OutStr.WRITETEXT('               <xs:extension base="xs:string">                      ');
      OutStr.WRITETEXT('                 <xs:attribute name="label" type="xs:string"        ');
      OutStr.WRITETEXT('                       use="required"/>                             ');
      OutStr.WRITETEXT('               </xs:extension>                                      ');
      OutStr.WRITETEXT('             </xs:simpleContent>                                    ');
      OutStr.WRITETEXT('           </xs:complexType>                                        ');

      OutStr.WRITETEXT('</xs:schema>');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithInfiniteLoops@61(VAR OutStr@1002 : OutStream);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT('<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"');
      OutStr.WRITETEXT('           targetNamespace="http://tempuri.org/po.xsd"');
      OutStr.WRITETEXT(
        '           xmlns="http://tempuri.org/po.xsd" xmlns:cac="http://tempuri.org/po.xsd" elementFormDefault="qualified">');

      OutStr.WRITETEXT('<xsd:element name="SelfReferencingNode" type="SelfReferencingNode"/>');
      OutStr.WRITETEXT('<xsd:element name="AdditionalInformationParty" type="AdditionalInformationPartyType"/>');
      OutStr.WRITETEXT('<xsd:element name="Contact" type="ContactType"/>');
      OutStr.WRITETEXT('<xsd:element name="ContactParty" type="ContactPartyType"/>');

      OutStr.WRITETEXT('<xsd:complexType name="ContactPartyType">');
      OutStr.WRITETEXT('  <xsd:sequence>                          ');
      OutStr.WRITETEXT('    <xsd:element name="contactName" minOccurs="0" maxOccurs="1" type="xsd:string"/>');
      OutStr.WRITETEXT('    <xsd:element ref="Contact" minOccurs="1" maxOccurs="1" />');
      OutStr.WRITETEXT('  </xsd:sequence>');
      OutStr.WRITETEXT('</xsd:complexType>');

      OutStr.WRITETEXT('<xsd:complexType name="ContactType">');
      OutStr.WRITETEXT('  <xsd:sequence>                          ');
      OutStr.WRITETEXT('    <xsd:element name="address" type="xsd:string"/>');
      OutStr.WRITETEXT('    <xsd:element ref="ContactParty" minOccurs="1" maxOccurs="1" />');
      OutStr.WRITETEXT('  </xsd:sequence>');
      OutStr.WRITETEXT('</xsd:complexType>');

      OutStr.WRITETEXT('<xsd:complexType name="AdditionalInformationPartyType">');
      OutStr.WRITETEXT('  <xsd:sequence>                             ');
      OutStr.WRITETEXT('    <xsd:element ref="Contact"/>  ');
      OutStr.WRITETEXT('    <xsd:element ref="ContactParty" minOccurs="0" maxOccurs="1" />');
      OutStr.WRITETEXT('  </xsd:sequence> ');
      OutStr.WRITETEXT('</xsd:complexType>');

      OutStr.WRITETEXT('</xsd:schema>');
    END;

    LOCAL PROCEDURE CreateSchemaFileWithImportAndIncludeStatements@131(VAR OutStr@1002 : OutStream;ImportFile1Path@1001 : Text;ImportFile2Path@1003 : Text);
    BEGIN
      OutStr.WRITETEXT('<?xml version="1.0" encoding="UTF-8"?>');
      OutStr.WRITETEXT('<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"');
      OutStr.WRITETEXT('           targetNamespace="http://tempuri.org/po.xsd"');
      OutStr.WRITETEXT('           xmlns="http://tempuri.org/po.xsd" xmlns:cac="mytest:namespace" elementFormDefault="qualified">');

      OutStr.WRITETEXT(STRSUBSTNO('<xsd:include schemaLocation="%1"/>',ImportFile1Path));
      OutStr.WRITETEXT(STRSUBSTNO('<xsd:import namespace="mytest:namespace" schemaLocation="%1"/>',ImportFile2Path));

      OutStr.WRITETEXT('<xsd:element name="MainSchema" type="MainSchemaType"/>');
      OutStr.WRITETEXT('<xsd:complexType name="MainSchemaType">');
      OutStr.WRITETEXT('  <xsd:sequence>                             ');
      OutStr.WRITETEXT('    <xsd:element ref="Contact"/>  ');
      OutStr.WRITETEXT('    <xsd:element ref="ContactParty" minOccurs="0" maxOccurs="1" />');
      OutStr.WRITETEXT('    <xsd:element ref="cac:purchaseOrder" maxOccurs="1" />');
      OutStr.WRITETEXT('    <xsd:element ref="cac:shipTo" minOccurs="0" />');
      OutStr.WRITETEXT('  </xsd:sequence> ');
      OutStr.WRITETEXT('</xsd:complexType>');

      OutStr.WRITETEXT('</xsd:schema>');
    END;

    LOCAL PROCEDURE GetExpectedDataTypeAndFormat@8(SimpleDataType@1000 : Text;VAR DataType@1001 : Option;VAR DataFormat@1003 : Text;VAR DataFormattingCulture@1004 : Text);
    VAR
      DataExchColDef@1002 : Record 1223;
    BEGIN
      CASE DELCHR(LOWERCASE(SimpleDataType)) OF
        'date':
          BEGIN
            DataType := DataExchColDef."Data Type"::Date;
            DataFormat := XMLDateFormatTxt;
            DataFormattingCulture := DefaultCultureTxt;
          END;
        'dateTime':
          BEGIN
            DataType := DataExchColDef."Data Type"::Text;
            DataFormat := XMLDateTimeFormatTxt;
            DataFormattingCulture := DefaultCultureTxt;
          END;
        'decimal':
          BEGIN
            DataType := DataExchColDef."Data Type"::Decimal;
            DataFormattingCulture := DefaultCultureTxt;
          END;
        ELSE
          DataType := DataExchColDef."Data Type"::Text;
      END;
    END;

    LOCAL PROCEDURE VerifyDataExchDef@12(XMLSchema@1000 : Record 9600);
    VAR
      DataExchDef@1001 : Record 1222;
      DataExchLineDef@1002 : Record 1227;
    BEGIN
      DataExchDef.SETRANGE(Code,XMLSchema.Code);
      Assert.AreEqual(1,DataExchDef.COUNT,'Unexpected Data Exch. def.');
      DataExchDef.FINDFIRST;
      DataExchDef.TESTFIELD(Type,DataExchDef.Type::"Bank Statement Import");
      DataExchDef.TESTFIELD("File Type",DataExchDef."File Type"::Xml);

      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDef.Code);
      DataExchLineDef.SETRANGE(Code,DataExchDef.Code);
      Assert.AreEqual(1,DataExchLineDef.COUNT,'Unexpected Data Exch. line def.');
      DataExchLineDef.FINDFIRST;
      DataExchLineDef.TESTFIELD("Data Line Tag",'/Document/BkToCstmrStmt/Stmt/Ntry');

      VerifyDataExchColDef(XMLSchema);
    END;

    LOCAL PROCEDURE VerifyDataExchColDef@13(XMLSchema@1000 : Record 9600);
    VAR
      XMLSchemaElement@1002 : Record 9610;
      DataExchColDef@1003 : Record 1223;
      DataType@1004 : Option;
      DataFormat@1001 : Text;
      DataFormattingCulture@1005 : Text;
      FullPath@1006 : Text;
    BEGIN
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaElement.SETRANGE(Selected,TRUE);

      DataExchColDef.SETRANGE("Data Exch. Def Code",XMLSchema.Code);
      DataExchColDef.SETRANGE("Data Exch. Line Def Code",XMLSchema.Code);

      XMLSchemaElement.FINDSET;
      REPEAT
        FullPath := XMLSchemaElement.GetFullPath;
        DataExchColDef.SETRANGE(Path,FullPath);
        DataExchColDef.SETRANGE(Description,XMLSchemaElement."Node Name");

        IF XMLSchemaElement.IsLeaf THEN BEGIN
          Assert.AreEqual(1,DataExchColDef.COUNT,'Unexpected column def.:' + DataExchColDef.GETFILTERS);
          GetExpectedDataTypeAndFormat(XMLSchemaElement."Simple Data Type",DataType,DataFormat,DataFormattingCulture);
          DataExchColDef.FINDFIRST;
          DataExchColDef.TESTFIELD(Name,DELSTR(FullPath,STRPOS(FullPath,'/Document/CstmrCdtTrfInitn'),26));
          DataExchColDef.TESTFIELD("Data Type",DataType);
          DataExchColDef.TESTFIELD("Data Format",DataFormat);
          DataExchColDef.TESTFIELD("Data Formatting Culture",DataFormattingCulture);
        END ELSE
          Assert.AreEqual(0,DataExchColDef.COUNT,'Unexpected column def.:' + DataExchColDef.GETFILTERS);
      UNTIL XMLSchemaElement.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLeafStatus@43(XMLSchema@1000 : Record 9600;NodeName@1002 : Text;IsLeafStatus@1003 : Boolean);
    VAR
      XMLSchemaElement@1001 : Record 9610;
    BEGIN
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaElement.SETRANGE("Node Name",NodeName);
      XMLSchemaElement.FINDFIRST;

      Assert.AreEqual(IsLeafStatus,XMLSchemaElement.IsLeaf,'Wrong leaf status.');
    END;

    LOCAL PROCEDURE VerifyFullPath@50(XMLSchema@1000 : Record 9600;NodeName@1002 : Text;ExpFullPath@1003 : Text);
    VAR
      XMLSchemaElement@1001 : Record 9610;
    BEGIN
      Assert.IsTrue(GetElementByPath(NodeName,ExpFullPath,XMLSchema,XMLSchemaElement),'Could not find path: ' + ExpFullPath);
    END;

    LOCAL PROCEDURE VerifySimpleDataType@22(XMLSchema@1000 : Record 9600;NodeName@1002 : Text;ExpSimpleDataType@1003 : Text);
    VAR
      XMLSchemaElement@1001 : Record 9610;
    BEGIN
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaElement.SETRANGE("Node Name",NodeName);
      XMLSchemaElement.FINDFIRST;
      Assert.AreEqual(ExpSimpleDataType,XMLSchemaElement."Simple Data Type",'Wrong data type.');
    END;

    [ModalPageHandler]
    PROCEDURE DataExchDefModalPageHandler@5(VAR DataExchDefCard@1000 : TestPage 1210);
    BEGIN
      DataExchDefCard.Code.ASSERTEQUALS('TEST');
    END;

    LOCAL PROCEDURE GetElementByPath@113(NodeName@1000 : Text;ExpFullPath@1001 : Text;XMLSchema@1004 : Record 9600;VAR ElementFoundXMLSchemaElement@1002 : Record 9610) : Boolean;
    VAR
      XMLSchemaElement@1003 : Record 9610;
    BEGIN
      XMLSchemaElement.SETRANGE("XML Schema Code",XMLSchema.Code);
      XMLSchemaElement.SETRANGE("Node Name",NodeName);
      XMLSchemaElement.FIND('-');

      REPEAT
        IF ExpFullPath = XMLSchemaElement.GetFullPath THEN BEGIN
          ElementFoundXMLSchemaElement := XMLSchemaElement;
          EXIT(TRUE);
        END;
      UNTIL XMLSchemaElement.NEXT = 0;

      EXIT(FALSE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@16(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@23(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [XML Schema]
    }
    END.
  }
}

