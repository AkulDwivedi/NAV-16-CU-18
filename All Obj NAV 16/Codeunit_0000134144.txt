OBJECT Codeunit 134144 ERM ACY Amount in GL Entries
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseEntriesWithFCYAmount@5();
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1000 : Record 81;
      GLRegister@1002 : Record 45;
      ReversalEntry@1001 : Record 179;
      Assert@1003 : Codeunit 130000;
      Amount@1004 : Decimal;
    BEGIN
      // Create and post General Journal Line using Random Values and Reversal of General Ledger Entries to test FCY Amount.

      // Setup: Create General Journal Line.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch,LibraryERM.CreateGLAccountNo,LibraryRandom.RandInt(5),CreateCurrency);
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine.Amount,GenJournalLine."Currency Code");
      Amount := GenJournalLine.Amount * 2; // For both lines using the same Amount, So multiply by 2.
      CreateGenJournalLine(
        GenJournalLine,GenJournalBatch,LibraryERM.CreateGLAccountNo,-Amount,GenJournalLine."Currency Code");
      Amount := FindBalanceAmount(GenJournalLine."Currency Code");

      // Create new line for Rounding in General Journal Line and Post General Journal Line.
      CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Reverse GL Register for General Journal Line.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");

      // Verify: Verify GLAccount Balance must me same after Reversal.
      Assert.AreEqual(Amount,FindBalanceAmount(GenJournalLine."Currency Code"),'GLAccount Balance Must be Equal');
    END;

    LOCAL PROCEDURE CreateCurrency@2() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      Currency.VALIDATE("Conv. LCY Rndg. Debit Acc.",LibraryERM.CreateGLAccountNo);
      Currency.VALIDATE("Conv. LCY Rndg. Credit Acc.",Currency."Conv. LCY Rndg. Debit Acc.");
      Currency.MODIFY(TRUE);
      UpdateExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGenJournalLine@9(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;AccountNo@1003 : Code[20];Amount@1002 : Decimal;CurrencyCode@1004 : Code[10]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExchangeRate@6(CurrencyCode@1003 : Code[10]);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amount always one third of Exchange Rate Amount.
      LibraryERM.CreateRandomExchangeRate(CurrencyCode);
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount" / 3);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindBalanceAmount@12(CurrencyCode@1002 : Code[10]) : Decimal;
    VAR
      Currency@1001 : Record 4;
      GLAccount@1000 : Record 15;
    BEGIN
      Currency.GET(CurrencyCode);
      GLAccount.GET(Currency."Conv. LCY Rndg. Debit Acc.");
      GLAccount.CALCFIELDS(Balance);
      EXIT(GLAccount.Balance);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [FCY]
      Test FCY Amounts after Reverse Transaction.
        1. Test FCY Amounts after Reverse Transaction.

      Covers Test Cases:
        -------------------------------------------------
        Test Function Name           TFS ID
        -------------------------------------------------
        ReverseEntriesWithFCYAmount  125220,125227
    }
    END.
  }
}

