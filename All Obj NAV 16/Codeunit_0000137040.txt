OBJECT Codeunit 137040 SCM Delete Return Orders
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryRandom@1002 : Codeunit 130440;
      Assert@1003 : Codeunit 130000;
      IsInitialized@1001 : Boolean;
      MsgCorrectedInvoiceNo@1045 : TextConst 'ENU=have a Corrected Invoice No. Do you want to continue?';

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE DeleteInvdPurchReturnOrders@5();
    VAR
      PurchHeader@1006 : Record 38;
      PurchHeader2@1010 : Record 38;
      PurchaseLine@1001 : Record 39;
      ReturnShipmentLine@1012 : Record 6651;
      PurchGetReturnShipments@1013 : Codeunit 6648;
      ReturnPONumber@1000 : Code[20];
    BEGIN
      // 1. Setup
      Initialize;

      // Create a new return purchase order.
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchHeader,PurchaseLine,PurchHeader."Document Type"::"Return Order",'','',LibraryRandom.RandInt(100),'',0D);

      // Ship the purchase return order.
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      // Create a manual purchase credit memo with the items we shipped and post it.
      LibraryPurchase.CreatePurchHeader(PurchHeader2,PurchHeader2."Document Type"::"Credit Memo",PurchHeader."Buy-from Vendor No.");

      // Add the items we just shipped to the purchase credit memo using GetReturnShipments.
      ReturnShipmentLine.SETRANGE("Buy-from Vendor No.",PurchHeader."Buy-from Vendor No.");

      // Find the last line we posted and filter by it (otherwise we will invoice all possible lines for the vendor).
      ReturnShipmentLine.FINDLAST;
      ReturnShipmentLine.SETRECFILTER;

      PurchGetReturnShipments.SetPurchHeader(PurchHeader2);
      PurchGetReturnShipments.CreateInvLines(ReturnShipmentLine);
      PurchHeader2.VALIDATE("Vendor Cr. Memo No.",
        LibraryUtility.GenerateRandomCode(PurchHeader.FIELDNO("Vendor Cr. Memo No."),DATABASE::"Purchase Header"));
      PurchHeader2.MODIFY(TRUE);

      LibraryPurchase.PostPurchaseDocument(PurchHeader2,TRUE,TRUE);

      // Retrieve the Id so we can ensure it has been deleted.
      ReturnPONumber := PurchHeader."No.";

      // 2. Exercise
      // Since the all items in the purchase order have been shipped (from the PO) and invoiced (from the Purchase Credit Memo)
      // the report should delete the purchase return order we created.
      REPORT.RUN(REPORT::"Delete Invd Purch. Ret. Orders",FALSE);

      // 3. Verification
      Assert.IsFalse(PurchHeader.GET(PurchHeader."Document Type"::"Return Order",ReturnPONumber),
        'Invoiced Purchase Return Order shouldn''t exist.');
    END;

    [Test]
    [HandlerFunctions(CorrectedInvoiceNoConfirmHandler)]
    PROCEDURE DeleteInvdReleasedPurchRetOrd@6();
    VAR
      PurchHeader@1007 : Record 38;
      PurchLine@1006 : Record 39;
      ReturnPONumber@1000 : Code[20];
    BEGIN
      // Checks deletion of invoiced released purchase return orders if the PRO has been
      // created with 2 lines, one fully shipped and invoiced and the other one is not shipped neither invoiced.
      // Then PRO is reopened, the second line deleted and the PRO is closed. Then report is run and PRO should be deleted
      // because all its existing lines have been shipped and invoiced.

      // 1. Setup
      Initialize;

      // Create a new return purchase order with 2 lines
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchHeader,PurchLine,PurchHeader."Document Type"::"Return Order",'','',LibraryRandom.RandInt(100),'',0D);
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,'',LibraryRandom.RandInt(100));

      // Don't ship the second line.
      PurchLine."Return Qty. to Ship" := 0;
      PurchLine.MODIFY(TRUE);

      // Ship and Invoice the purchase return order (that will ship only the first line).
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // reopen the doc and delete the second line, which has not been shipped neither invoiced:
      LibraryPurchase.ReopenPurchaseDocument(PurchHeader);
      PurchLine.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.");
      PurchLine.DELETE;

      // Now the RPO can be released because it only contains one line that has been shipped and invoiced.
      LibraryPurchase.ReleasePurchaseDocument(PurchHeader);
      ReturnPONumber := PurchHeader."No.";

      // 2. Exercise
      // Since the all items in the RPO have been shipped and invoiced (from the RPO)
      // the report should delete the purchase return order we created.
      REPORT.RUN(REPORT::"Delete Invd Purch. Ret. Orders",FALSE);

      // 3. Verification
      Assert.IsFalse(PurchHeader.GET(PurchHeader."Document Type"::"Return Order",ReturnPONumber),
        'Invoiced Purchase Return Order shouldn''t exist.');
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      ExecuteConfirmHandler;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [ConfirmHandler]
    PROCEDURE CorrectedInvoiceNoConfirmHandler@347(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,MsgCorrectedInvoiceNo) > 0,Question);
      Reply := TRUE;
    END;

    LOCAL PROCEDURE ExecuteConfirmHandler@348();
    BEGIN
      IF CONFIRM(MsgCorrectedInvoiceNo) THEN;
    END;

    BEGIN
    {
      // [FEATURE] [Delete Documents] [Return Order] [Purchase]
      Unsupported version tags:
      AU: Unable to Execute
      IT: Unable to Execute

      WI 129108 - RP6661 --> DeleteInvdPurchReturnOrders
                             DeleteInvdReleasedPurchRetOrd
    }
    END.
  }
}

