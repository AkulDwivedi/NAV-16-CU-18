OBJECT Codeunit 134337 ERM Purch. Batch Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1009 : Codeunit 130440;
      LibraryVariableStorage@1000 : Codeunit 131004;
      LibraryInventory@1005 : Codeunit 132201;
      LibraryPurchase@1003 : Codeunit 130512;
      LibraryWorkflow@1004 : Codeunit 131101;
      LibrarySetupStorage@1007 : Codeunit 131009;
      isInitialized@1001 : Boolean;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      COMMIT;
      isInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseInvoices,MessageHandler)]
    PROCEDURE BatchPostPurchaseInvoice@23();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,FALSE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",0D,FALSE);

      // Verify that Posted Purchase Invoice Exists.
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseInvoices,MessageHandler)]
    PROCEDURE BatchPostPurchaseInvoiceDiffPostingDate@28();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,FALSE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);

      // Verify that Posted Purchase Invoice Exists.
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseInvoices,MessageHandler)]
    PROCEDURE BatchPostPurchaseInvoiceCalcInvDisc@80();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,TRUE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",0D,TRUE);

      // Verify that Posted Purchase Invoice Exists.
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",PurchaseHeader."Posting Date",TRUE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseInvoices,MessageHandler)]
    PROCEDURE BatchPostPurchaseInvoiceCalcInvDiscAndReplacePostingDate@9();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // [SCENARIO 204056] Batch Posting of Purchase Invoice with Replace Posting Date and Calc. Inv. Discount options for special Purchase Setup
      Initialize;

      // [GIVEN] Purchase Setup has "Posted Invoice Nos." = "Invoice Nos." and "Receipt on Invoice" = No
      UpdateReceiptOnInvoiceOnPurchasePayablesSetup;

      // [GIVEN] Released Purchase Invoice with posting nos are already assigned
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // [WHEN] Run Batch Post Purchase Invoice with Replace Posting Date, Replace Document Date, Calc. Inv. Discount options
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader."Posting Date" + 1,TRUE);

      // [THEN] InvoiceDiscount is calculated and Posting Date is updated
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",PurchaseHeader."Posting Date" + 1,TRUE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseInvoices,MessageHandler)]
    PROCEDURE BatchPostPurchaseInvoices@118();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,FALSE);
      CreatePurchaseDocument(PurchaseHeader2,PurchaseHeader."Document Type"::Invoice,FALSE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No." + '|' + PurchaseHeader2."No.",0D,FALSE);

      // Verify that Posted Purchase Invoice Exists.
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
      VerifyPostedPurchaseInvoice(PurchaseHeader2."No.",PurchaseHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseCrMemos,MessageHandler)]
    PROCEDURE BatchPostPurchaseCrMemo@94();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Credit Memo.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Purchase Credit Memo.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",0D,FALSE);

      // Verify that Posted Purchase Credit Memo Exists.
      VerifyPostedPurchaseCrMemo(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseCrMemos,MessageHandler)]
    PROCEDURE BatchPostPurchaseCrMemoDiffPostingDate@96();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);

      // Verify that Posted Purchase Credit Memo Exists.
      VerifyPostedPurchaseCrMemo(PurchaseHeader."No.",CALCDATE('<1D>',WORKDATE),FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseCrMemos,MessageHandler)]
    PROCEDURE BatchPostPurchaseCrMemoCalcInvDisc@95();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",TRUE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No.",0D,TRUE);

      // Verify that Posted Purchase Credit Memo Exists.
      VerifyPostedPurchaseCrMemo(PurchaseHeader."No.",PurchaseHeader."Posting Date",TRUE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseCrMemos,MessageHandler)]
    PROCEDURE BatchPostPurchaseCrMemos@119();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
    BEGIN
      Initialize;

      // Create Purchase Credit Memo.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",FALSE);
      CreatePurchaseDocument(PurchaseHeader2,PurchaseHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Purchase Credit Memo.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No." + '|' + PurchaseHeader2."No.",0D,FALSE);

      // Verify that Posted Purchase Credit Memo Exists.
      VerifyPostedPurchaseCrMemo(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
      VerifyPostedPurchaseCrMemo(PurchaseHeader2."No.",PurchaseHeader."Posting Date",FALSE);
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseInvoices,MessageHandler)]
    PROCEDURE BatchPostPurchaseInvoicesWithApprovals@3();
    VAR
      Workflow@1003 : Record 1501;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release invoice.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.PurchaseInvoiceApprovalWorkflowCode);

      // Create Purchase Invoice.
      CreatePurchaseDocument(PurchaseHeader2,PurchaseHeader."Document Type"::Invoice,FALSE);

      // Batch Post Purchase Invoice.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No." + '|' + PurchaseHeader2."No.",0D,FALSE);

      // Verify that Posted Purchase Invoice Exists.
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedPurchaseInvoice(PurchaseHeader2."No.",PurchaseHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseCrMemos,MessageHandler)]
    PROCEDURE BatchPostPurchaseCrMemosWithApprovals@16();
    VAR
      Workflow@1003 : Record 1501;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release cr. memo.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.PurchaseCreditMemoApprovalWorkflowCode);

      // Create Purchase Cr. Memo.
      CreatePurchaseDocument(PurchaseHeader2,PurchaseHeader."Document Type"::"Credit Memo",FALSE);

      // Batch Post Purchase Cr. Memo.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No." + '|' + PurchaseHeader2."No.",0D,FALSE);

      // Verify that Posted Purchase Cr. Memo Exists.
      VerifyPostedPurchaseCrMemo(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedPurchaseCrMemo(PurchaseHeader2."No.",PurchaseHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseOrders,MessageHandler)]
    PROCEDURE BatchPostPurchaseOrdersWithApprovals@24();
    VAR
      Workflow@1003 : Record 1501;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release order.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.PurchaseOrderApprovalWorkflowCode);

      // Create Purchase Order.
      CreatePurchaseDocument(PurchaseHeader2,PurchaseHeader."Document Type"::Order,FALSE);

      // Batch Post Purchase Order.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No." + '|' + PurchaseHeader2."No.",0D,FALSE);

      // Verify that Posted Purchase Order Exists.
      VerifyPostedPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedPurchaseOrder(PurchaseHeader2."No.",PurchaseHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(RequestPageHandlerBatchPostPurchaseReturnOrders,MessageHandler)]
    PROCEDURE BatchPostPurchaseReturnOrdersWithApprovals@26();
    VAR
      Workflow@1003 : Record 1501;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      WorkflowSetup@1002 : Codeunit 1502;
    BEGIN
      Initialize;

      // Create and release return order.
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      LibraryWorkflow.CreateEnabledWorkflow(Workflow,WorkflowSetup.PurchaseReturnOrderApprovalWorkflowCode);

      // Create Purchase return order.
      CreatePurchaseDocument(PurchaseHeader2,PurchaseHeader."Document Type"::"Return Order",FALSE);

      // Batch Post Purchase return order.
      RunBatchPostPurchase(PurchaseHeader."Document Type",PurchaseHeader."No." + '|' + PurchaseHeader2."No.",0D,FALSE);

      // Verify that Posted Purchase return order Exists.
      VerifyPostedPurchaseReturnOrder(PurchaseHeader."No.",PurchaseHeader."Posting Date",FALSE);
      ASSERTERROR VerifyPostedPurchaseReturnOrder(PurchaseHeader2."No.",PurchaseHeader."Posting Date",FALSE);
      Assert.AssertNothingInsideFilter;
    END;

    LOCAL PROCEDURE CreateVendor@25(InvDisc@1001 : Boolean) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      IF InvDisc THEN
        CreateVendorDiscount(Vendor."No.");
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorDiscount@130(VendorNo@1001 : Code[20]);
    VAR
      VendInvDisc@1000 : Record 24;
    BEGIN
      VendInvDisc.INIT;
      VendInvDisc.VALIDATE(Code,VendorNo);
      VendInvDisc.VALIDATE("Discount %",LibraryRandom.RandInt(10));
      VendInvDisc.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@6(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;InvDisc@1003 : Boolean);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor(InvDisc));
      IF DocumentType = PurchaseHeader."Document Type"::"Credit Memo" THEN BEGIN
        PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
        PurchaseHeader.MODIFY(TRUE);
      END;
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunBatchPostPurchase@2(DocumentType@1004 : Option;DocumentNoFilter@1001 : Text;PostingDate@1002 : Date;CalcInvDisc@1003 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      UpdateCalcInvDiscPurchasePayablesSetup(CalcInvDisc);
      LibraryVariableStorage.Enqueue(DocumentNoFilter);
      LibraryVariableStorage.Enqueue(PostingDate);

      COMMIT;
      CASE DocumentType OF
        PurchaseHeader."Document Type"::Invoice:
          REPORT.RUNMODAL(REPORT::"Batch Post Purchase Invoices",TRUE,TRUE,PurchaseHeader);
        PurchaseHeader."Document Type"::"Credit Memo":
          REPORT.RUNMODAL(REPORT::"Batch Post Purch. Credit Memos",TRUE,TRUE,PurchaseHeader);
        PurchaseHeader."Document Type"::Order:
          REPORT.RUNMODAL(REPORT::"Batch Post Purchase Orders",TRUE,TRUE,PurchaseHeader);
        PurchaseHeader."Document Type"::"Return Order":
          REPORT.RUNMODAL(REPORT::"Batch Post Purch. Ret. Orders",TRUE,TRUE,PurchaseHeader);
      END;
    END;

    LOCAL PROCEDURE UpdateCalcInvDiscPurchasePayablesSetup@5(CalcInvDisc@1001 : Boolean);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Calc. Inv. Discount",CalcInvDisc);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReceiptOnInvoiceOnPurchasePayablesSetup@7();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",PurchasesPayablesSetup."Invoice Nos.");
      PurchasesPayablesSetup."Receipt on Invoice" := FALSE;
      PurchasesPayablesSetup.MODIFY;
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseInvoice@10(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      PurchInvHeader@1001 : Record 122;
      PurchInvLine@1003 : Record 123;
    BEGIN
      PurchInvHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      PurchInvHeader.FINDFIRST;
      PurchInvHeader.TESTFIELD("Posting Date",PostingDate);
      PurchInvHeader.TESTFIELD("Document Date",PostingDate); // TFS ID 203294
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;
      Assert.AreEqual(InvDisc,PurchInvLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseCrMemo@109(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      PurchCrMemoHdr@1001 : Record 124;
      PurchCrMemoLine@1003 : Record 125;
    BEGIN
      PurchCrMemoHdr.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      PurchCrMemoHdr.FINDFIRST;
      PurchCrMemoHdr.TESTFIELD("Posting Date",PostingDate);
      PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      PurchCrMemoLine.FINDFIRST;
      Assert.AreEqual(InvDisc,PurchCrMemoLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseOrder@19(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      PurchInvHeader@1001 : Record 122;
      PurchInvLine@1003 : Record 123;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",PreAssignedNo);
      PurchInvHeader.FINDFIRST;
      PurchInvHeader.TESTFIELD("Posting Date",PostingDate);
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;
      Assert.AreEqual(InvDisc,PurchInvLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseReturnOrder@20(PreAssignedNo@1000 : Code[20];PostingDate@1002 : Date;InvDisc@1004 : Boolean);
    VAR
      PurchCrMemoHdr@1001 : Record 124;
      PurchCrMemoLine@1003 : Record 125;
    BEGIN
      PurchCrMemoHdr.SETRANGE("Return Order No.",PreAssignedNo);
      PurchCrMemoHdr.FINDFIRST;
      PurchCrMemoHdr.TESTFIELD("Posting Date",PostingDate);
      PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      PurchCrMemoLine.FINDFIRST;
      Assert.AreEqual(InvDisc,PurchCrMemoLine."Inv. Discount Amount" <> 0,'Calculate Inv. Discount value not processed correctly.');
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostPurchaseInvoices@33(VAR BatchPostPurchaseInvoices@1000 : TestRequestPage 497);
    VAR
      PurchaseHeader@1003 : Record 38;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
      RunReplacePostingDate@1005 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostPurchaseInvoices."Purchase Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostPurchaseInvoices."Purchase Header".SETFILTER("Document Type",FORMAT(PurchaseHeader."Document Type"::Invoice));

      BatchPostPurchaseInvoices.PostingDate.SETVALUE(PostingDate);
      RunReplacePostingDate := FORMAT(PostingDate) <> '';
      BatchPostPurchaseInvoices.ReplacePostingDate.SETVALUE(RunReplacePostingDate);
      BatchPostPurchaseInvoices.ReplaceDocumentDate.SETVALUE(RunReplacePostingDate);
      // CalcInvDiscount is set from Purchase Setup
      BatchPostPurchaseInvoices.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostPurchaseCrMemos@102(VAR BatchPostPurchaseCrMemos@1000 : TestRequestPage 498);
    VAR
      PurchaseHeader@1003 : Record 38;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostPurchaseCrMemos."Purchase Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostPurchaseCrMemos."Purchase Header".SETFILTER("Document Type",FORMAT(PurchaseHeader."Document Type"::"Credit Memo"));

      BatchPostPurchaseCrMemos.PostingDate.SETVALUE(PostingDate);
      IF FORMAT(PostingDate) <> '' THEN
        BatchPostPurchaseCrMemos.ReplacePostingDate.SETVALUE(TRUE)
      ELSE
        BatchPostPurchaseCrMemos.ReplacePostingDate.SETVALUE(FALSE);
      // CalcInvDiscount is set from Purchase Setup
      BatchPostPurchaseCrMemos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostPurchaseOrders@21(VAR BatchPostPurchaseOrders@1000 : TestRequestPage 496);
    VAR
      PurchaseHeader@1003 : Record 38;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostPurchaseOrders."Purchase Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostPurchaseOrders."Purchase Header".SETFILTER("Document Type",FORMAT(PurchaseHeader."Document Type"::Order));

      BatchPostPurchaseOrders.PostingDate.SETVALUE(PostingDate);
      IF FORMAT(PostingDate) <> '' THEN
        BatchPostPurchaseOrders.ReplacePostingDate.SETVALUE(TRUE)
      ELSE
        BatchPostPurchaseOrders.ReplacePostingDate.SETVALUE(FALSE);
      BatchPostPurchaseOrders.Receive.SETVALUE(TRUE);
      BatchPostPurchaseOrders.Invoice.SETVALUE(TRUE);
      BatchPostPurchaseOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageHandlerBatchPostPurchaseReturnOrders@22(VAR BatchPostPurchRetOrders@1000 : TestRequestPage 6665);
    VAR
      PurchaseHeader@1003 : Record 38;
      PostingDate@1001 : Variant;
      DocumentNoFilter@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNoFilter);
      LibraryVariableStorage.Dequeue(PostingDate);

      BatchPostPurchRetOrders."Purchase Header".SETFILTER("No.",DocumentNoFilter);
      BatchPostPurchRetOrders."Purchase Header".SETFILTER("Document Type",FORMAT(PurchaseHeader."Document Type"::"Return Order"));

      BatchPostPurchRetOrders.PostingDate.SETVALUE(PostingDate);
      IF FORMAT(PostingDate) <> '' THEN
        BatchPostPurchRetOrders.ReplacePostingDate.SETVALUE(TRUE)
      ELSE
        BatchPostPurchRetOrders.ReplacePostingDate.SETVALUE(FALSE);
      BatchPostPurchRetOrders.Ship.SETVALUE(TRUE);
      BatchPostPurchRetOrders.Invoice.SETVALUE(TRUE);
      BatchPostPurchRetOrders.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Batch Post] [Purchase]
    }
    END.
  }
}

