OBJECT Codeunit 136213 Marketing Segment
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryMarketing@1003 : Codeunit 131900;
      Assert@1004 : Codeunit 130000;
      NoOfCriteriaActions@1005 : TextConst 'ENU=No Of Criteria Actions Must be %1 in Segment %2.';
      SalesPersonCode2@1006 : Code[20];
      SegmentLineNotExist@1007 : TextConst 'ENU=Segment Line with Sales Person Code %1 must not exist.';
      SegmentLineExist@1008 : TextConst 'ENU=Segment Line with Sales Person Code %1 must exist.';
      ContactNo3@1009 : Code[20];

    [Test]
    [HandlerFunctions(AddContactHandler)]
    PROCEDURE SegmentAddContactWithReport@1();
    VAR
      Segment@1003 : TestPage 5091;
    BEGIN
      // Create Segment by Page and add Segment Line through Add Contact Report.

      // Setup: Create Contact.
      Initialize;
      ContactNo3 := CreateContact;  // Global Variable used for Request Page Handler

      // Exercise : Create Segment and add Contact through Report.
      Segment.OPENNEW;  // Open New Segment.
      Segment.Description.ACTIVATE;  // Used to generate the Segment No.
      COMMIT;  // Commit required to run the report.
      Segment.AddContacts.INVOKE;

      // Verify : Verify Segment Line.
      VerifySegmentLine(Segment."No.".VALUE,ContactNo3);
    END;

    [Test]
    PROCEDURE SegmentAddContactManual@6();
    VAR
      Segment@1001 : TestPage 5091;
      ContactNo@1000 : Code[20];
    BEGIN
      // Create Segment by Page and add Segment Line manually.

      // Setup: Create Contact.
      Initialize;
      ContactNo := CreateContact;

      // Exercise: Create Segment Line and add Contact Manually.
      Segment.OPENNEW;  // Open New Segment.
      CreateSegmentLineByPage(Segment,ContactNo);

      // Verify: Verify Segment Line.
      VerifySegmentLine(Segment."No.".VALUE,ContactNo);
    END;

    [Test]
    PROCEDURE SegmentLineNoOfCriteriaActions@22();
    VAR
      Segment@1003 : TestPage 5091;
      ContactNo@1000 : Code[20];
      NoOfCriteriaActionsAfterReduce@1005 : Integer;
    BEGIN
      // Validate No. of Criteria Action on segment updates on adding segment line.

      // Setup: Create Contact and update Contact with Sales Person Code.
      Initialize;
      ContactNo := CreateContact;
      UpdateContactWithSalesPersonCode(ContactNo);

      // Exercise: Create Segment Line.
      Segment.OPENNEW;  // Open New Segment.
      CreateSegmentLineByPage(Segment,ContactNo);
      NoOfCriteriaActionsAfterReduce := GetNoOfCriteriaActions(Segment."No.".VALUE);

      // Verify: Verify No. of Criteria Action on Segment is updated.
      Assert.AreEqual(1,NoOfCriteriaActionsAfterReduce,STRSUBSTNO(NoOfCriteriaActions,1,Segment."No."));  // Test for one Transaction.
    END;

    [Test]
    [HandlerFunctions(ReduceContactHandler,ConfirmHandlerTrue)]
    PROCEDURE ReduceSegmentLineWithConfirmation@11();
    VAR
      Segment@1003 : TestPage 5091;
      SalesPersonCode@1002 : Code[20];
      NoOfCriteriaActionsAfterReduce@1005 : Integer;
    BEGIN
      // Reduce Contact on Segment Line with confirmation to Delete No. of Criteria Action Reduced to Zero.

      // Setup:  Create Contact and update Contact with Sales Person Code, Create Segment with line.
      Initialize;
      SalesPersonCode := CreateSegmentWithContact(Segment);

      // Exercise: Run Reduce Contact Report from page.
      Segment.ReduceContacts.INVOKE;
      NoOfCriteriaActionsAfterReduce := GetNoOfCriteriaActions(Segment."No.".VALUE);

      // Verify: Verify Contact is reduced from the Segment and Verify No. of Criteria Action Reduced to Zero.
      Assert.IsFalse(
        FindSegmentLineSalesPersonCode(Segment."No.".VALUE,SalesPersonCode),STRSUBSTNO(SegmentLineNotExist,SalesPersonCode));
      Assert.AreEqual(0,NoOfCriteriaActionsAfterReduce,STRSUBSTNO(NoOfCriteriaActions,0,Segment."No."));
    END;

    [Test]
    [HandlerFunctions(ReduceContactHandler,ConfirmHandlerFalse)]
    PROCEDURE ReduceSegmentLineWithWithOutConfirmation@17();
    VAR
      Segment@1003 : TestPage 5091;
      SalesPersonCode@1002 : Code[20];
      NoOfCriteriaActionsBeforeReduce@1004 : Integer;
      NoOfCriteriaActionsAfterReduce@1005 : Integer;
    BEGIN
      // Reduce Contact on Segment Line without confirmation to Delete No. of Criteria Action.

      // Setup:  Create Contact and update Contact with Sales Person Code, Create Segment with line.
      Initialize;
      SalesPersonCode := CreateSegmentWithContact(Segment);
      NoOfCriteriaActionsBeforeReduce := GetNoOfCriteriaActions(Segment."No.".VALUE);

      // Exercise: Create Segment Line and add Contact Manually.
      Segment.ReduceContacts.INVOKE;
      NoOfCriteriaActionsAfterReduce := GetNoOfCriteriaActions(Segment."No.".VALUE);

      // Verify: Verify Contact is reduced from the Segment and Verify No. of Criteria Action is not Reduced.
      Assert.IsFalse(
        FindSegmentLineSalesPersonCode(Segment."No.".VALUE,SalesPersonCode),STRSUBSTNO(SegmentLineNotExist,SalesPersonCode));
      Assert.AreEqual(
        NoOfCriteriaActionsAfterReduce,NoOfCriteriaActionsBeforeReduce + 1,
        STRSUBSTNO(NoOfCriteriaActions,NoOfCriteriaActionsAfterReduce,Segment."No."));
    END;

    [Test]
    [HandlerFunctions(RefineContactHandler)]
    PROCEDURE RefineSegmentLine@23();
    VAR
      Segment@1003 : TestPage 5091;
      SalesPersonCode@1007 : Code[20];
    BEGIN
      // Refine Contact on Segment Line.

      // Setup:  Create Contact and update Contact with Sales Person Code, Create Segment with line.
      Initialize;
      SalesPersonCode := CreateSegmentWithContacts(Segment);

      // Exercise: Invoke Refine Contact Report.
      Segment.RefineContacts.INVOKE;

      // Verify: Verify Segment Line is Refined.
      Assert.IsFalse(
        FindSegmentLineSalesPersonCode(Segment."No.".VALUE,SalesPersonCode),STRSUBSTNO(SegmentLineNotExist,SalesPersonCode));
    END;

    [Test]
    [HandlerFunctions(RefineContactHandler)]
    PROCEDURE ReRefineSegmentLine@25();
    VAR
      Segment@1001 : TestPage 5091;
      SalesPersonCode@1000 : Code[20];
      NoOfCriteriaActionsAfterRefine@1004 : Integer;
      NoOfCriteriaActionsAfterReRefine@1002 : Integer;
    BEGIN
      // Re Refine Contact on Segment Line and verify No. of Criteria Action increases on Re Refine.

      // Setup:  Create Contact and update contact with Sales Person Code, Create Segment with line and Refine it.
      Initialize;
      SalesPersonCode := CreateSegmentWithContacts(Segment);
      Segment.RefineContacts.INVOKE;
      NoOfCriteriaActionsAfterRefine := GetNoOfCriteriaActions(Segment."No.".VALUE);

      // Exercise: Re Refine Contact on Segment Line.
      Segment.RefineContacts.INVOKE;
      NoOfCriteriaActionsAfterReRefine := GetNoOfCriteriaActions(Segment."No.".VALUE);

      // Verify: Verify Segment Line is Refined and No. of Criteria Action increases on Re Refine.
      Assert.IsFalse(
        FindSegmentLineSalesPersonCode(Segment."No.".VALUE,SalesPersonCode),STRSUBSTNO(SegmentLineNotExist,SalesPersonCode));
      Assert.AreEqual(
        NoOfCriteriaActionsAfterReRefine,NoOfCriteriaActionsAfterRefine + 1,
        STRSUBSTNO(NoOfCriteriaActions,NoOfCriteriaActionsAfterReRefine,Segment."No."));
    END;

    [Test]
    [HandlerFunctions(SaveSegmentCriteriaHandler)]
    PROCEDURE SaveSegmentCriteria@27();
    VAR
      SavedSegmentCriteria@1002 : Record 5098;
      Segment@1001 : TestPage 5091;
    BEGIN
      // Create Contact and Save Criteria.

      // Setup:  Create Contact and update Contact with Sales Person Code, Create Segment with line.
      Initialize;
      CreateSegmentWithContacts(Segment);

      // Exercise: Save Segment Criteria.
      Segment.SaveCriteria.INVOKE;

      // Verify: Verify Segment Criteria is saved.
      SavedSegmentCriteria.SETRANGE(Code,SalesPersonCode2);
      SavedSegmentCriteria.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(ReuseCriteriaSegmentHandler,SaveSegmentCriteriaHandler,ConfirmHandlerTrue)]
    PROCEDURE ReuseSegmentCriteria@24();
    VAR
      Segment@1003 : TestPage 5091;
    BEGIN
      // Delete Last Row in Segment, Reuse segment criteria and Validate the Segment.

      // Setup:  Create Contact and update Contact with Sales Person Code, Create Segment with line, Save Segment Criteria.
      Initialize;
      CreateSegmentWithContacts(Segment);
      Segment.SaveCriteria.INVOKE;

      // Exercise: Delete Last Row in Segment, Reuse Segment Criteria and Validate the Segment.
      DeleteLastRecordSegmentLine(Segment."No.".VALUE);
      Segment.ReuseCriteria.INVOKE;

      // Verify: Verify Segment Line.
      Assert.IsTrue(
        FindSegmentLineSalesPersonCode(Segment."No.".VALUE,SalesPersonCode2),STRSUBSTNO(SegmentLineExist,SalesPersonCode2));
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      CLEAR(ContactNo3);  // Clear Global Variable for Add Contact Handler.
      CLEAR(SalesPersonCode2);  // Clear Global Variable for Handlers.
    END;

    LOCAL PROCEDURE CreateContact@2() : Code[20];
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      EXIT(Contact."No.");
    END;

    LOCAL PROCEDURE CreateSegmentLineByPage@10(VAR Segment@1000 : TestPage 5091;ContactNo@1003 : Code[20]);
    BEGIN
      Segment.SegLines."Contact No.".SETVALUE(ContactNo);
      COMMIT;  // Commit required to run the reports.
    END;

    LOCAL PROCEDURE CreateSegmentLines@28(Segment@1000 : TestPage 5091;ContactNo@1001 : Code[20];ContactNo2@1002 : Code[20]);
    BEGIN
      CreateSegmentLineByPage(Segment,ContactNo);
      Segment.SegLines.NEXT;
      CreateSegmentLineByPage(Segment,ContactNo2);
    END;

    LOCAL PROCEDURE CreateSegmentWithContact@5(VAR Segment@1000 : TestPage 5091) SalesPersonCode : Code[20];
    VAR
      ContactNo@1001 : Code[20];
    BEGIN
      ContactNo := CreateContact;
      SalesPersonCode := UpdateContactWithSalesPersonCode(ContactNo);
      Segment.OPENNEW;  // Open New Segment.
      CreateSegmentLineByPage(Segment,ContactNo);
    END;

    LOCAL PROCEDURE CreateSegmentWithContacts@3(VAR Segment@1000 : TestPage 5091) SalesPersonCode : Code[20];
    VAR
      ContactNo@1003 : Code[20];
      ContactNo2@1002 : Code[20];
    BEGIN
      ContactNo := CreateContact;
      SalesPersonCode := UpdateContactWithSalesPersonCode(ContactNo);
      ContactNo2 := CreateContact;
      SalesPersonCode2 := UpdateContactWithSalesPersonCode(ContactNo2);  // Global Variable used for Request Page Handler.

      Segment.OPENNEW;  // Open New Segment.
      CreateSegmentLines(Segment,ContactNo,ContactNo2);
    END;

    LOCAL PROCEDURE DeleteLastRecordSegmentLine@26(SegmentNo@1000 : Code[20]);
    VAR
      SegmentLine@1001 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentNo);
      SegmentLine.FINDLAST;
      SegmentLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindSegmentLineSalesPersonCode@21(SegmentNo@1000 : Code[20];SalesPersonCode@1002 : Code[20]) : Boolean;
    VAR
      SegmentLine@1001 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentNo);
      SegmentLine.SETRANGE("Salesperson Code",SalesPersonCode);
      EXIT(SegmentLine.FINDFIRST);
    END;

    LOCAL PROCEDURE GetNoOfCriteriaActions@13(SegmentNo@1000 : Code[20]) : Integer;
    VAR
      SegmentHeader@1001 : Record 5076;
    BEGIN
      SegmentHeader.GET(SegmentNo);
      SegmentHeader.CALCFIELDS("No. of Criteria Actions");
      EXIT(SegmentHeader."No. of Criteria Actions");
    END;

    LOCAL PROCEDURE UpdateContactWithSalesPersonCode@12(ContactNo@1002 : Code[20]) : Code[20];
    VAR
      SalespersonPurchaser@1001 : Record 13;
      Contact@1003 : Record 5050;
      LibrarySales@1000 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      Contact.GET(ContactNo);
      Contact.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Contact.MODIFY(TRUE);
      EXIT(SalespersonPurchaser.Code)
    END;

    LOCAL PROCEDURE VerifySegmentLine@9(SegmentHeaderNo@1000 : Code[20];ContactNo@1002 : Code[20]);
    VAR
      SegmentLine@1001 : Record 5077;
    BEGIN
      SegmentLine.SETRANGE("Segment No.",SegmentHeaderNo);
      SegmentLine.FINDFIRST;
      SegmentLine.TESTFIELD("Contact No.",ContactNo);
    END;

    [RequestPageHandler]
    PROCEDURE AddContactHandler@4(VAR AddContacts@1000 : TestRequestPage 5198);
    BEGIN
      AddContacts.Contact.SETFILTER("No.",ContactNo3);
      AddContacts.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ReduceContactHandler@15(VAR RemoveContactsReduce@1000 : TestRequestPage 5197);
    BEGIN
      RemoveContactsReduce.Contact.SETFILTER("Salesperson Code",SalesPersonCode2);
      RemoveContactsReduce.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RefineContactHandler@20(VAR RemoveContactsRefine@1000 : TestRequestPage 5196);
    BEGIN
      RemoveContactsRefine.Contact.SETFILTER("Salesperson Code",SalesPersonCode2);
      RemoveContactsRefine.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReuseCriteriaSegmentHandler@31(VAR SavedSegmentCriteriaList@1000 : TestPage 5141);
    BEGIN
      SavedSegmentCriteriaList.FILTER.SETFILTER(Code,SalesPersonCode2);  // SalesPersonCode is saved as code.
      SavedSegmentCriteriaList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SaveSegmentCriteriaHandler@29(VAR SaveSegmentCriteria@1000 : TestPage 5142);
    BEGIN
      SaveSegmentCriteria.Code.SETVALUE(SalesPersonCode2);
      SaveSegmentCriteria.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@14(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@19(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    BEGIN
    {
      // [FEATURE] [Segment] [Marketing]
      1. Create Segment by Page and add Segment Line through Add Contact Report.
      2. Create Segment by Page and add Segment Line manually.
      3. Validate No. of Criteria Action on segment updates on adding segment line.
      4. Reduce Contact on Segment Line with confirmation to Delete No. of Criteria Action Reduced to Zero.
      5. Reduce Contact on Segment Line without confirmation to Delete No. of Criteria Action.
      6. Refine Contact on Segment Line.
      7. Re Refine Contact on Segment Line and verify No. of Criteria Action increases on Re Refine.
      8. Create Contact and Save Criteria.
      9. Delete Last Row in Segment, Reuse segment criteria and Validate the Segment.

      Covers Test Cases for WI -  254886
        -----------------------------------------------------------------
        Test Function Name                                        TFS ID
        -----------------------------------------------------------------
        SegmentAddContactWithReport                               141384
        SegmentAddContactManual                                   141384
        SegmentLineNoOfCriteriaActions                            141384
        ReduceSegmentLineWithConfirmation                         141384
        ReduceSegmentLineWithWithOutConfirmation                  141384
        RefineSegmentLine                                         141384
        ReRefineSegmentLine                                       141384
        SaveSegmentCriteria                                       141384
        ReuseSegmentCriteria                                      141384
    }
    END.
  }
}

