OBJECT Codeunit 134553 ERM Cash Flow - Filling II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1007 : Codeunit 130440;
      LibrarySales@1004 : Codeunit 130509;
      LibraryERM@1005 : Codeunit 131300;
      LibraryCashFlowForecast@1006 : Codeunit 131331;
      LibraryVariableStorage@1013 : Codeunit 131004;
      CFHelper@1002 : Codeunit 131332;
      Assert@1010 : Codeunit 130000;
      LibraryPurchase@1014 : Codeunit 130512;
      IsInitialized@1001 : Boolean;
      EmptyDateFormula@1000 : DateFormula;
      CustomDateFormula@1003 : DateFormula;
      ExpectedMessageQst@1234 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      UnexpectedCFWorksheetLineCountErr@1008 : TextConst '@@@="%1 - Cash Flow No.; %2 - Document No.";ENU="ENU=Unexpected Cash Flow journal line count within filter: Cash Flow No.: %1, Document No.: %2."';
      PlusOneDayFormula@1009 : DateFormula;
      MinusOneDayFormula@1011 : DateFormula;
      SourceType@1012 : ' ,Receivables,Payables,Liquid Funds,Cash Flow Manual Expense,Cash Flow Manual Revenue,Sales Orders,Purchase Orders,Fixed Assets Budget,Fixed Assets Disposal,Service Orders,G/L Budget';
      UnexpectedCFWorksheetLineCountForMultipleSourcesErr@1015 : TextConst '@@@=Unexpected Cash Flow journal line count within filter: Cash Flow No.: Cash Flow No, Document No.: Sales Order No, Purchase Order No, Service Order No.;ENU="ENU=Unexpected Cash Flow journal line count within filter: Cash Flow No.: %1, Document No.: %2, %3, %4."';

    [Test]
    PROCEDURE CustLEPartialPayment@1();
    VAR
      CashFlowForecast@1000 : Record 840;
      GenJournalLine@1004 : Record 81;
      CFWorksheetLine@1006 : Record 846;
      Customer@1001 : Record 18;
      TotalAmount@1002 : Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal by using Fill batch with single customer ledger entry
      // where only partial payment is applied
      // Verify computed cash flow date and discounted amount

      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      LibrarySales.CreateCustomer(Customer);
      TotalAmount := LibraryRandom.RandInt(500);
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",TotalAmount,-(TotalAmount / 2),
        EmptyDateFormula,EmptyDateFormula,EmptyDateFormula);

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No.");
      CFHelper.VerifyExpectedCFAmount(TotalAmount - (TotalAmount / 2),CFWorksheetLine."Amount (LCY)");
    END;

    [Test]
    PROCEDURE CustLEDiscountedPmtIsOverdue@2();
    VAR
      GenJournalLine@1000 : Record 81;
      Customer@1003 : Record 18;
      PaymentTerms@1004 : Record 3;
      CashFlowForecast@1005 : Record 840;
      CFWorksheetLine@1007 : Record 846;
      CustLedgerEntry@1001 : Record 21;
      Amount@1002 : Decimal;
      DiscountedAmount@1008 : Decimal;
      ConsiderSource@1006 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount CF Payment Terms
      // This scenario covers a discounted payment AFTER the payment discount date,
      // therefore the expected CF amount is the remaining amount (total amount - discounted amount)
      // the CF date should be the due date

      // Setup
      Initialize;
      CFHelper.SetupDsctPmtTermsCustLETest(CashFlowForecast,Customer,PaymentTerms,Amount,DiscountedAmount);
      // payment is done 1 day after discount date in order to be overdue
      CustomDateFormula := PlusOneDayFormula;
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,-DiscountedAmount,
        PaymentTerms."Discount Date Calculation",EmptyDateFormula,CustomDateFormula);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");

      // Exercise
      // forecast is calculated after the discount date, payment already done
      ConsiderSource[SourceType::Receivables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        EmptyDateFormula,CustomDateFormula);

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,
        CashFlowForecast."No.",Amount - DiscountedAmount,CALCDATE(PaymentTerms."Due Date Calculation",CustLedgerEntry."Document Date"));
    END;

    [Test]
    PROCEDURE CustLEDiscountedPmtIsDue@3();
    VAR
      GenJournalLine@1000 : Record 81;
      Customer@1003 : Record 18;
      PaymentTerms@1004 : Record 3;
      CashFlowForecast@1005 : Record 840;
      CFWorksheetLine@1007 : Record 846;
      Amount@1002 : Decimal;
      DiscountedAmount@1008 : Decimal;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount CF Payment Terms
      // This scenario covers a discounted payment from a customer w/ discount default pmt terms
      // BEFORE the payment discount date, therefore the opened entry should be closed and no CF journal line should exist

      // Setup
      Initialize;
      CFHelper.SetupDsctPmtTermsCustLETest(CashFlowForecast,Customer,PaymentTerms,Amount,DiscountedAmount);
      // make sure Customer has discounted default payment terms as well, in order to close open entry
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
      // payment is done 1 day before discount date => discount allowed
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,-DiscountedAmount,
        PaymentTerms."Discount Date Calculation",EmptyDateFormula,MinusOneDayFormula);

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      // No CF lines expected
      Assert.AreEqual(0,
        CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No."),
        STRSUBSTNO(UnexpectedCFWorksheetLineCountErr,CashFlowForecast."No.",GenJournalLine."Document No."));
    END;

    [Test]
    PROCEDURE CustLEWithinDsctPmtTolNoPmt@4();
    VAR
      GenJournalLine@1009 : Record 81;
      Customer@1008 : Record 18;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      Amount@1003 : Decimal;
      DiscountedAmount@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers an opened customer ledger entry w/o payment where the CF forecast is done within the tolerance period
      // The expected CF amount must be the discounted total amount,
      // the CF date must be the calculated discount date + tolerance, based on the ledger entries document date

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(CustomDateFormula); // used as pmt discount grace period
      CFHelper.SetupPmtDsctTolCustLETest(CashFlowForecast,Customer,PaymentTerms,CustomDateFormula,Amount,DiscountedAmount);
      CFHelper.CreateLedgerEntry(GenJournalLine,Customer."No.",Amount,
        GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice);

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No.",
        Amount - CFHelper.CalcDiscAmtFromGenJnlLine(GenJournalLine,PaymentTerms."Discount %"),
        CALCDATE(CustomDateFormula,
          CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Document Date")));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE CustLEWithinDsctPmtTolDsctPmt@5();
    VAR
      GenJournalLine@1009 : Record 81;
      Customer@1008 : Record 18;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      Amount@1003 : Decimal;
      DiscountedAmount@1010 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers a total discounted sales invoice payment within payment discount tolerance date.
      // The payment has to close the open invoice, therefore no CF journal lines are expected

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolCustLETest(CashFlowForecast,Customer,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      // make sure Customer has discounted default payment terms as well, in order to close open entry
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
      // Payment should be done before pmt dsct tol date
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,-DiscountedAmount,
        PaymentTerms."Discount Date Calculation",PmtDiscountGracePeriod,MinusOneDayFormula);

      // Exercise
      // forecast is done on pmt dsct tol date
      ConsiderSource[SourceType::Receivables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        PmtDiscountGracePeriod,EmptyDateFormula);

      // Verify
      // No CF lines expected
      Assert.AreEqual(0,
        CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No."),
        STRSUBSTNO(UnexpectedCFWorksheetLineCountErr,CashFlowForecast."No.",GenJournalLine."Document No."));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE CustLEOutsideDsctPmtTolNoPmt@7();
    VAR
      GenJournalLine@1009 : Record 81;
      Customer@1008 : Record 18;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      Amount@1003 : Decimal;
      DiscountedAmount@1010 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers a CF forecast ran after the pmt dsct tol date of a customer ledger entry w/o payment
      // The expected CF amount must be the total ledger entry amount w/o discount, due to an expired dsct date the expected
      // CF date must be the source due date

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolCustLETest(CashFlowForecast,Customer,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      CFHelper.CreateLedgerEntry(GenJournalLine,Customer."No.",Amount,
        GenJournalLine."Account Type"::Customer,GenJournalLine."Document Type"::Invoice);

      // Exercise
      // forecast should be done after pmt dsct tol date
      ConsiderSource[SourceType::Receivables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        PlusOneDayFormula,PmtDiscountGracePeriod);

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,
        CashFlowForecast."No.",Amount,CALCDATE(PaymentTerms."Due Date Calculation",GenJournalLine."Document Date"));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE CustLEOutsideDsctPmtTolPartPmt@8();
    VAR
      GenJournalLine@1009 : Record 81;
      Customer@1008 : Record 18;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      CustLedgerEntry@1001 : Record 21;
      Amount@1003 : Decimal;
      DiscountedAmount@1010 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1002 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers a partial payment AFTER the payment discount tolerance date, no discount allowed, therefore the expected
      // CF amount is the remaining amount (total amount - partial payment), due to an expired Due date the expected CF date must
      // be moved to the CF execution date

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolCustLETest(CashFlowForecast,Customer,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      // payment should be 1 days before dsct tol date
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,-ROUND(DiscountedAmount / 2),
        PaymentTerms."Discount Date Calculation",MinusOneDayFormula,PmtDiscountGracePeriod);
      // get invoice ledger entry
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");

      // Exercise
      // forecast should be done after pmt dsct tol date
      ConsiderSource[SourceType::Receivables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        PlusOneDayFormula,PmtDiscountGracePeriod);

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No.",
        Amount - ROUND(DiscountedAmount / 2),CALCDATE(PaymentTerms."Due Date Calculation",CustLedgerEntry."Document Date"));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE CustLEOutsideDsctPmtTolDsctPmt@9();
    VAR
      GenJournalLine@1000 : Record 81;
      Customer@1003 : Record 18;
      PaymentTerms@1004 : Record 3;
      CashFlowForecast@1005 : Record 840;
      CFWorksheetLine@1007 : Record 846;
      GeneralLedgerSetup@1001 : Record 98;
      CustLedgerEntry@1006 : Record 21;
      Amount@1002 : Decimal;
      DiscountedAmount@1008 : Decimal;
      PmtDiscountGracePeriod@1011 : DateFormula;
      ConsiderSource@1009 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance period
      // Covers a discounted payment AFTER the payment discount tolerance, no discount allowed,
      // therefore the expected CF amount is the remaining amount (total amount - discounted amount),
      // due to an expired Due date the expected CF date must be moved to the CF execution date

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolCustLETest(CashFlowForecast,Customer,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      // discounted payment should be done after pmt disc tol date
      CustomDateFormula := PlusOneDayFormula;
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,-DiscountedAmount,
        PaymentTerms."Discount Date Calculation",CustomDateFormula,PmtDiscountGracePeriod);
      // get invoice ledger entry
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");

      // Exercise
      // forecast should be done after payment
      EVALUATE(CustomDateFormula,FORMAT(CustomDateFormula) + FORMAT(PlusOneDayFormula));
      ConsiderSource[SourceType::Receivables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        CustomDateFormula,PmtDiscountGracePeriod);

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,
        CashFlowForecast."No.",Amount - DiscountedAmount,CALCDATE(PaymentTerms."Due Date Calculation",CustLedgerEntry."Document Date"));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE CustLEPmtAmtWithinPmtTolAmt@10();
    VAR
      CashFlowForecast@1000 : Record 840;
      Customer@1001 : Record 18;
      GeneralLedgerSetup@1002 : Record 98;
      GenJournalLine@1006 : Record 81;
      CFWorksheetLine@1009 : Record 846;
      Amount@1005 : Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering Pmt. Tol. Amount
      // The payment amount for the invoice should be within the tolerance amount, which leads to a closed
      // ledger entry and therefore there must not be a CF forecast consideration

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      // max pmt tol amount should be 50% of the invoice amount
      CFHelper.SetupCustomerPmtTolAmtTestCase(CashFlowForecast,Customer,Amount,0.5,50);
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,
        -(Amount - ROUND(Amount * 0.5)),EmptyDateFormula,EmptyDateFormula,EmptyDateFormula);

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      // No CF lines expected
      Assert.AreEqual(0,
        CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No."),
        STRSUBSTNO(UnexpectedCFWorksheetLineCountErr,CashFlowForecast."No.",GenJournalLine."Document No."));

      // Tear down
      CFHelper.SetupPmtTolPercentage(GeneralLedgerSetup."Payment Tolerance %");
      CFHelper.SetupPmtTolAmount(GeneralLedgerSetup."Max. Payment Tolerance Amount");
    END;

    [Test]
    PROCEDURE CustLEPmtAmtOutsidePmtTolAmt@11();
    VAR
      CashFlowForecast@1000 : Record 840;
      Customer@1001 : Record 18;
      GeneralLedgerSetup@1002 : Record 98;
      GenJournalLine@1006 : Record 81;
      CFWorksheetLine@1009 : Record 846;
      Amount@1005 : Decimal;
      ExpectedAmount@1007 : Decimal;
      PaymentAmount@1010 : Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering Pmt. Tol. Amount
      // The payment amount for the invoice should be less than the tolerance deducted amount, which keeps
      // ledger entry open and therefore the difference between payment amount and tolerance deducted amount must be forecasted

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      // max pmt tol amount should be 30% of the invoice amount
      CFHelper.SetupCustomerPmtTolAmtTestCase(CashFlowForecast,Customer,Amount,0.3,30);
      ExpectedAmount := Amount - ROUND(Amount * 0.3);
      PaymentAmount := Amount / 2; // less then the invoice amount but more than the pmt tol amount
      CFHelper.CreateAndApplySalesInvPayment(GenJournalLine,Customer."No.",Amount,-PaymentAmount,
        EmptyDateFormula,EmptyDateFormula,EmptyDateFormula);

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Receivables,CashFlowForecast."No.");
      CFHelper.VerifyExpectedCFAmount(ExpectedAmount - PaymentAmount,CFWorksheetLine."Amount (LCY)");

      // Tear down
      CFHelper.SetupPmtTolPercentage(GeneralLedgerSetup."Payment Tolerance %");
      CFHelper.SetupPmtTolAmount(GeneralLedgerSetup."Max. Payment Tolerance Amount");
    END;

    [Test]
    PROCEDURE VendorLEWithinDsctPmtTolNoPmt@12();
    VAR
      GenJournalLine@1009 : Record 81;
      Vendor@1008 : Record 23;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      Amount@1003 : Decimal;
      DiscountedAmount@1001 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1002 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers an opened vendor ledger entry w/o payment where the CF forecast is done within the discount period
      // The expected CF amount must be the discounted total amount,
      // the CF date must be the calculated discount date + tolerance, based on the ledger entries document date

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolVendorLETest(CashFlowForecast,Vendor,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      CFHelper.CreateLedgerEntry(GenJournalLine,Vendor."No.",-Amount,
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Document Type"::Invoice);

      // Exercise
      ConsiderSource[SourceType::Payables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Payables,CashFlowForecast."No.",
        -(Amount - CFHelper.CalcDiscAmtFromGenJnlLine(GenJournalLine,PaymentTerms."Discount %")),
        CALCDATE(PmtDiscountGracePeriod,
          CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Document Date")));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE VendLEWithinDsctPmtTolDsctPmt@13();
    VAR
      GenJournalLine@1009 : Record 81;
      Vendor@1008 : Record 23;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      Amount@1003 : Decimal;
      DiscountedAmount@1010 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers a total discounted sales invoice payment within payment discount tolerance date.
      // The payment has to close the open invoice, therefore no CF journal lines are expected

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolVendorLETest(CashFlowForecast,Vendor,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      // make sure Vendor has discounted default payment terms as well, in order to close open entry
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.MODIFY(TRUE);
      // Payment should be done before pmt dsct tol date
      CFHelper.CreateAndApplyVendorInvPmt(GenJournalLine,Vendor."No.",-Amount,DiscountedAmount,
        PaymentTerms."Discount Date Calculation",PmtDiscountGracePeriod,MinusOneDayFormula);

      // Exercise
      // Forecast should be done after payment
      ConsiderSource[SourceType::Payables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        PmtDiscountGracePeriod,EmptyDateFormula);

      // Verify
      // No CF lines expected
      Assert.AreEqual(0,
        CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Payables,CashFlowForecast."No."),
        STRSUBSTNO(UnexpectedCFWorksheetLineCountErr,CashFlowForecast."No.",GenJournalLine."Document No."));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE VendLEOutsideDsctPmtTolNoPmt@15();
    VAR
      GenJournalLine@1009 : Record 81;
      Vendor@1008 : Record 23;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      Amount@1003 : Decimal;
      DiscountedAmount@1010 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers a partial purchase invoice payment within payment discount tolerance date.

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolVendorLETest(CashFlowForecast,Vendor,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      CFHelper.CreateLedgerEntry(GenJournalLine,Vendor."No.",-Amount,
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Document Type"::Invoice);

      // Exercise
      // forecast should be done after pmt dsct tol date
      ConsiderSource[SourceType::Payables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        PlusOneDayFormula,PmtDiscountGracePeriod);

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Payables,CashFlowForecast."No.",
        -Amount,CALCDATE(PaymentTerms."Due Date Calculation",GenJournalLine."Document Date"));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE VendLEOutsideDsctPmtTolDsctPmt@16();
    VAR
      GenJournalLine@1009 : Record 81;
      Vendor@1008 : Record 23;
      PaymentTerms@1007 : Record 3;
      CashFlowForecast@1006 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      GeneralLedgerSetup@1004 : Record 98;
      VendorLedgerEntry@1001 : Record 25;
      Amount@1003 : Decimal;
      DiscountedAmount@1010 : Decimal;
      PmtDiscountGracePeriod@1000 : DateFormula;
      ConsiderSource@1002 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
      // Covers a discounted purchase invoice payment outside payment discount tolerance date.

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      CFHelper.CreateRandomDateFormula(PmtDiscountGracePeriod);
      CFHelper.SetupPmtDsctTolVendorLETest(CashFlowForecast,Vendor,PaymentTerms,PmtDiscountGracePeriod,Amount,DiscountedAmount);
      // discounted payment should be done after pmt disc tol date
      CustomDateFormula := PlusOneDayFormula;
      CFHelper.CreateAndApplyVendorInvPmt(GenJournalLine,Vendor."No.",-Amount,DiscountedAmount,
        PaymentTerms."Discount Date Calculation",CustomDateFormula,PmtDiscountGracePeriod);
      // get invoice ledger entry
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");

      // Exercise
      // forecast should be done after pmt dsct tol date and payment
      EVALUATE(CustomDateFormula,FORMAT(CustomDateFormula) + FORMAT(PlusOneDayFormula));
      ConsiderSource[SourceType::Payables] := TRUE;
      CFHelper.FillJnlOnCertDateFormulas(ConsiderSource,CashFlowForecast."No.",PaymentTerms."Discount Date Calculation",
        CustomDateFormula,PmtDiscountGracePeriod);

      // Verify
      CFHelper.VerifyCFDataOnSnglJnlLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Payables,CashFlowForecast."No.",
        -(Amount - DiscountedAmount),CALCDATE(PaymentTerms."Due Date Calculation",VendorLedgerEntry."Document Date"));

      // Tear down
      CFHelper.SetupPmtDsctGracePeriod(GeneralLedgerSetup."Payment Discount Grace Period");
    END;

    [Test]
    PROCEDURE VendLEPmtAmtWithinPmtTolAmt@17();
    VAR
      CashFlowForecast@1000 : Record 840;
      Vendor@1001 : Record 23;
      GeneralLedgerSetup@1002 : Record 98;
      GenJournalLine@1006 : Record 81;
      CFWorksheetLine@1004 : Record 846;
      Amount@1005 : Decimal;
      ConsiderSource@1007 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering Pmt. Tol. Amount
      // The payment amount for the invoice should be within the tolerance amount, which leads to a closed
      // ledger entry and therefore there must not be a CF forecast consideration

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current setup
      // max pmt tol amount should be 50% of the invoice amount
      LibraryCashFlowForecast.ClearJournal;
      CFHelper.SetupVendorPmtTolAmtTestCase(CashFlowForecast,Vendor,Amount,0.5,50);
      CFHelper.CreateAndApplyVendorInvPmt(GenJournalLine,Vendor."No.",-Amount,
        Amount - ROUND(Amount * 0.5 / 100),EmptyDateFormula,EmptyDateFormula,EmptyDateFormula);

      // Exercise
      ConsiderSource[SourceType::Payables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      // No CF lines expected
      Assert.AreEqual(0,
        CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Payables,CashFlowForecast."No."),
        STRSUBSTNO(UnexpectedCFWorksheetLineCountErr,CashFlowForecast."No.",GenJournalLine."Document No."));

      // Tear down
      CFHelper.SetupPmtTolPercentage(GeneralLedgerSetup."Payment Tolerance %");
      CFHelper.SetupPmtTolAmount(GeneralLedgerSetup."Max. Payment Tolerance Amount");
    END;

    [Test]
    PROCEDURE VendLEPmtAmtOutsidePmtTolAmt@18();
    VAR
      CashFlowForecast@1000 : Record 840;
      Vendor@1001 : Record 23;
      GeneralLedgerSetup@1002 : Record 98;
      GenJournalLine@1006 : Record 81;
      CFWorksheetLine@1009 : Record 846;
      Amount@1005 : Decimal;
      ExpectedAmount@1007 : Decimal;
      PaymentAmount@1010 : Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF journal using Fill batch considering Pmt. Tol. Amount
      // The payment amount for the invoice should be less than the tolerance deducted amount, which keeps
      // ledger entry open and therefore the difference between payment amount and tolerance deducted amount must be forecasted

      // Setup
      Initialize;
      GeneralLedgerSetup.GET; // keep current state
      // max pmt tol amount should be 30% of the invoice amount
      CFHelper.SetupVendorPmtTolAmtTestCase(CashFlowForecast,Vendor,Amount,0.3,0);
      ExpectedAmount := Amount - ROUND(Amount * 0.3);
      PaymentAmount := Amount / 2; // less then the invoice amount but more than the pmt tol amount
      CFHelper.CreateAndApplyVendorInvPmt(GenJournalLine,Vendor."No.",-Amount,PaymentAmount,
        EmptyDateFormula,EmptyDateFormula,EmptyDateFormula);

      // Exercise
      ConsiderSource[SourceType::Payables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFHelper.FilterSingleJournalLine(CFWorksheetLine,GenJournalLine."Document No.",SourceType::Payables,CashFlowForecast."No.");
      CFHelper.VerifyExpectedCFAmount(-(ExpectedAmount - PaymentAmount),CFWorksheetLine."Amount (LCY)");

      // Tear down
      CFHelper.SetupPmtTolPercentage(GeneralLedgerSetup."Payment Tolerance %");
      CFHelper.SetupPmtTolAmount(GeneralLedgerSetup."Max. Payment Tolerance Amount");
    END;

    [Test]
    [HandlerFunctions(AccountScheduleOverviewPageHandler,SuggestWorksheetLinesReqPageHandler)]
    PROCEDURE CashFlowWithAccountSchedule@6();
    VAR
      CashFlowForecast@1000 : Record 840;
      AccScheduleName@1001 : Record 84;
      ColumnLayout@1002 : Record 334;
      CashFlowAccount@1003 : Record 841;
      AccScheduleLine@1004 : Record 85;
      RowNo@1005 : Integer;
    BEGIN
      // Verify Cash Flow Forcast show in Account Schedule with Cashflow Layout.

      // Setup: Create Cash Flow Forecast, suggest Cash Flow Worksheet Line and Register.
      Initialize;
      CreateAndPostCashFlowForecast(CashFlowForecast);
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      CreateColumnLayout(ColumnLayout);
      LibraryVariableStorage.Enqueue(ColumnLayout."Column Layout Name");  // Enqueue AccountScheduleOverviewPageHandler.
      LibraryVariableStorage.Enqueue(CashFlowForecast."No.");  // Enqueue AccountScheduleOverviewPageHandler.
      RowNo := LibraryRandom.RandInt(10);  // Using Random value for Account Schedule Row No.
      CashFlowAccount.SETRANGE("Account Type",CashFlowAccount."Account Type"::Entry);
      CashFlowAccount.FINDSET;
      REPEAT
        RowNo += 1;
        CreateAccountScheduleAndLine(AccScheduleLine,CashFlowAccount."No.",FORMAT(RowNo),AccScheduleName.Name);
      UNTIL CashFlowAccount.NEXT = 0;

      // Exercise.
      OpenAccountScheduleOverviewPage(AccScheduleLine."Schedule Name");

      // Verify: Cash Flow Forcast show in Account Schedule with Cashflow Layout, done by .
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,AnalysisByDimensionsHandler,AnalysisByDimensionsMatrixHandler,SuggestWorksheetLinesReqPageHandler)]
    PROCEDURE CashFlowWithAnalysisByDimension@68();
    VAR
      CashFlowForecast@1000 : Record 840;
      AnalysisView@1003 : Record 363;
    BEGIN
      // Verify Cash Flow Forcast show in Analysis by Dimesnion with view by Month.

      // Setup: Create Cash Flow Forecast, suggest Cash Flow Worksheet Line and Register, find Cash Flow Analysis by Dimension and Update.
      Initialize;
      CreateAndPostCashFlowForecast(CashFlowForecast);
      ExecuteUIHandler;
      LibraryCashFlowForecast.FindCashFlowAnalysisView(AnalysisView);
      LibraryVariableStorage.Enqueue(CashFlowForecast."No.");  // Enqueue AnalysisByDimensionsHandler.

      // Exercise.
      UpdateAnalysisViewList(AnalysisView.Code);

      // Verify: Verify Cash Flow Forcast show in Analysis by Dimesnion with view by Month, done by AnalysisByDimensionsMatrixHandler.
    END;

    [Test]
    PROCEDURE ForecastingFCYAmountConsideringDiscountOnCustLE@14();
    VAR
      CashFlowForecast@1000 : Record 840;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscount(CashFlowForecast);

      // Exercise & Verify
      ForecastingFCYAmountsOnReceivablesWithCFCardOptions(CashFlowForecast);
    END;

    [Test]
    PROCEDURE ForecastingFCYAmountConsideringDiscountAndCFPmtTermsOnCustLE@55();
    VAR
      CashFlowForecast@1012 : Record 840;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);

      // Exercise & Verify
      ForecastingFCYAmountsOnReceivablesWithCFCardOptions(CashFlowForecast);
    END;

    LOCAL PROCEDURE ForecastingFCYAmountsOnReceivablesWithCFCardOptions@24(CashFlowForecast@1012 : Record 840);
    VAR
      PaymentTerms@1011 : Record 3;
      SalesHeader@1008 : Record 36;
      CFWorksheetLine@1007 : Record 846;
      CustLedgerEntry@1006 : Record 21;
      RelationalExchangeRateAmount@1005 : Decimal;
      AmountFCY@1004 : Decimal;
      ExpectedAmount@1002 : Decimal;
      SalesInvoiceNo@1001 : Code[20];
      CustomerNo@1009 : Code[20];
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := 0.4379; // hard coded exchange rate for bug fix purpose #329266
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      SalesInvoiceNo := CreateAndPostSalesOrderWithOneLine(SalesHeader,CustomerNo);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,SalesInvoiceNo);
      CustLedgerEntry.CALCFIELDS(Amount);

      AmountFCY := CustLedgerEntry.Amount;
      ExpectedAmount :=
        ROUND(AmountFCY * RelationalExchangeRateAmount,LibraryERM.GetAmountRoundingPrecision) -
        CFHelper.CalcCustDiscAmtLCY(CustLedgerEntry,PaymentTerms."Discount %",RelationalExchangeRateAmount);

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFWorksheetLine.SETRANGE("Document No.",SalesInvoiceNo);
      CFWorksheetLine.FINDFIRST;
      Assert.AreEqual(ExpectedAmount,CFWorksheetLine."Amount (LCY)",'Unexpected forecast amount when converting from FCY to LCY');
    END;

    [Test]
    PROCEDURE ForecastingFCYAmountConsideringDiscountOnVendLE@43();
    VAR
      CashFlowForecast@1000 : Record 840;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscount(CashFlowForecast);

      // Exercise & Verify
      ForecastingFCYAmountsOnPayablesWithCFCardOptions(CashFlowForecast);
    END;

    [Test]
    PROCEDURE ForecastingFCYAmountConsideringDiscountAndCFPmtTermsOnVendLE@41();
    VAR
      CashFlowForecast@1012 : Record 840;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);

      // Exercise & Verify
      ForecastingFCYAmountsOnPayablesWithCFCardOptions(CashFlowForecast);
    END;

    LOCAL PROCEDURE ForecastingFCYAmountsOnPayablesWithCFCardOptions@27(CashFlowForecast@1012 : Record 840);
    VAR
      PaymentTerms@1011 : Record 3;
      PurchaseHeader@1008 : Record 38;
      CFWorksheetLine@1007 : Record 846;
      VendorLedgerEntry@1006 : Record 25;
      RelationalExchangeRateAmount@1005 : Decimal;
      AmountFCY@1004 : Decimal;
      ExpectedAmount@1002 : Decimal;
      PurchaseInvoiceNo@1001 : Code[20];
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
      VendorNo@1009 : Code[20];
    BEGIN
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := 0.4379; // hard coded exchange rate for bug fix purpose #329266
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);
      ModifyVendorWithCurrency(VendorNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      PurchaseInvoiceNo := CreateAndPostPurchaseOrderWithOneLine(PurchaseHeader,VendorNo);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,PurchaseInvoiceNo);
      VendorLedgerEntry.CALCFIELDS(Amount);

      AmountFCY := VendorLedgerEntry.Amount;
      ExpectedAmount :=
        ROUND(AmountFCY * RelationalExchangeRateAmount,LibraryERM.GetAmountRoundingPrecision) -
        CFHelper.CalcVendDiscAmtLCY(VendorLedgerEntry,PaymentTerms."Discount %",RelationalExchangeRateAmount);

      // Exercise
      ConsiderSource[SourceType::Payables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      CFWorksheetLine.SETRANGE("Document No.",PurchaseInvoiceNo);
      CFWorksheetLine.FINDFIRST;
      Assert.AreEqual(ExpectedAmount,CFWorksheetLine."Amount (LCY)",'Unexpected forecast amount when converting from FCY to LCY');
    END;

    [Test]
    PROCEDURE CustomerLedgerEntryValuesAreConsideredWhenCFPmtTermsNotApplicable@52();
    VAR
      CashFlowForecast@1005 : Record 840;
      PaymentTerms@1010 : Record 3;
      PaymentTermsDifferent@1004 : Record 3;
      CustLedgerEntry@1006 : Record 21;
      CustomerNo@1007 : Code[20];
      ExpectedAmount@1002 : Decimal;
      SalesInvoiceNo@1001 : Code[20];
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);
      CFHelper.GetDifferentDsctPaymentTerms(PaymentTermsDifferent,PaymentTerms.Code);
      SalesInvoiceNo := CreateAndPostSalesOrderWithDiscountPercentage(CustomerNo,PaymentTermsDifferent.Code);
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,SalesInvoiceNo);
      CustLedgerEntry.CALCFIELDS(Amount);

      ExpectedAmount :=
        CustLedgerEntry.Amount - CFHelper.CalcCustDiscAmt(CustLedgerEntry,PaymentTermsDifferent."Discount %");

      // Exercise
      ConsiderSource[SourceType::Receivables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyCFWorksheetLineAmount(CashFlowForecast."No.",SalesInvoiceNo,SourceType::Receivables,ExpectedAmount,
        'Forecast amount calculation is not using values from customer ledger entries');
    END;

    [Test]
    PROCEDURE VendorLedgerEntryValuesAreConsideredWhenCFPmtTermsNotApplicable@26();
    VAR
      PaymentTerms@1000 : Record 3;
      PaymentTermsDifferent@1006 : Record 3;
      CashFlowForecast@1001 : Record 840;
      VendorLedgerEntry@1005 : Record 25;
      PurchaseInvoiceNo@1004 : Code[20];
      VendorNo@1002 : Code[20];
      ExpectedAmount@1008 : Decimal;
      ConsiderSource@1009 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);
      CFHelper.GetDifferentDsctPaymentTerms(PaymentTermsDifferent,PaymentTerms.Code);
      PurchaseInvoiceNo := CreateAndPostPurchaseOrderWithDiscountPercentage(VendorNo,PaymentTermsDifferent.Code);
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,PurchaseInvoiceNo);
      VendorLedgerEntry.CALCFIELDS(Amount);

      ExpectedAmount :=
        VendorLedgerEntry.Amount - CFHelper.CalcVendDiscAmt(VendorLedgerEntry,PaymentTermsDifferent."Discount %");

      // Exercise
      ConsiderSource[SourceType::Payables] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyCFWorksheetLineAmount(CashFlowForecast."No.",PurchaseInvoiceNo,SourceType::Payables,ExpectedAmount,
        'Forecast amount calculation is not using values from vendor ledger entries');
    END;

    [Test]
    PROCEDURE CashFlowWorksheetLineWithGroupByDocumentTypeOption@77();
    BEGIN
      Initialize;
      CashFlowWorksheetLineGroupByDocumentTypeOption(TRUE);
    END;

    [Test]
    PROCEDURE CashFlowWorksheetLineWithoutGroupByDocumentTypeOption@79();
    BEGIN
      Initialize;
      CashFlowWorksheetLineGroupByDocumentTypeOption(FALSE);
    END;

    LOCAL PROCEDURE CashFlowWorksheetLineGroupByDocumentTypeOption@86(IsSet@1004 : Boolean);
    VAR
      CashFlowForecast@1007 : Record 840;
      SalesHeader@1006 : Record 36;
      PurchaseHeader@1011 : Record 38;
      ServiceHeader@1012 : Record 5900;
      CFWorksheetLine@1005 : Record 846;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
      ExpectedCountOfLines@1009 : Integer;
    BEGIN
      // Setup
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CFHelper.CreateDefaultSalesOrder(SalesHeader);
      CFHelper.CreateDefaultPurchaseOrder(PurchaseHeader);
      CFHelper.CreateDefaultServiceOrder(ServiceHeader);

      // Excercise
      ConsiderSource[SourceType::"Sales Orders"] := TRUE;
      ConsiderSource[SourceType::"Purchase Orders"] := TRUE;
      ConsiderSource[SourceType::"Service Orders"] := TRUE;

      IF IsSet THEN BEGIN
        FillJournalWithGroupBy(ConsiderSource,CashFlowForecast."No.");
        ExpectedCountOfLines := 3; // 3 SourceType are selected above, each with one line
      END ELSE BEGIN
        FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");
        ExpectedCountOfLines := GetNumberOfSalesLines(SalesHeader) +
          GetNumberOfPurchaseLines(PurchaseHeader) + GetNumberOfServiceLines(ServiceHeader);
      END;

      // Verify
      CFWorksheetLine.SETFILTER("Cash Flow Forecast No.",'%1',CashFlowForecast."No.");
      CFWorksheetLine.SETFILTER("Document No.",'%1|%2|%3',SalesHeader."No.",PurchaseHeader."No.",ServiceHeader."No.");

      Assert.AreEqual(ExpectedCountOfLines,CFWorksheetLine.COUNT,
        STRSUBSTNO(UnexpectedCFWorksheetLineCountForMultipleSourcesErr,
          CashFlowForecast."No.",SalesHeader."No.",PurchaseHeader."No.",ServiceHeader."No."));
    END;

    [Test]
    PROCEDURE SalesOrderInFCYWithGroupByDocumentTypeOption@49();
    BEGIN
      Initialize;
      SalesOrderInFCYGroupByDocumentTypeOption(TRUE);
    END;

    [Test]
    PROCEDURE SalesOrderInFCYWithoutGroupByDocumentTypeOption@71();
    BEGIN
      Initialize;
      SalesOrderInFCYGroupByDocumentTypeOption(FALSE);
    END;

    LOCAL PROCEDURE SalesOrderInFCYGroupByDocumentTypeOption@70(IsSet@1003 : Boolean);
    VAR
      CashFlowForecast@1000 : Record 840;
      SalesHeader@1004 : Record 36;
      CustomerNo@1002 : Code[20];
      RelationalExchangeRateAmount@1001 : Decimal;
      ExpectedAmountLCY@1006 : Decimal;
      ConsiderSource@1005 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF Journal with a sales order for a Customer in FCY
      // Verify computed cash flow forecast amount

      // Setup
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithCurrency(CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateSalesOrderWithLineCount(SalesHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalSalesAmount(SalesHeader,FALSE);

      // Excercise
      ConsiderSource[SourceType::"Sales Orders"] := TRUE;
      IF IsSet THEN
        FillJournalWithGroupBy(ConsiderSource,CashFlowForecast."No.")
      ELSE
        FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,SalesHeader."No.",SourceType::"Sales Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE SalesOrderInFCYWithDiscount@82();
    VAR
      CashFlowForecast@1007 : Record 840;
      SalesHeader@1005 : Record 36;
      PaymentTerms@1008 : Record 3;
      CustomerNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscount(CashFlowForecast);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateSalesOrderWithLineCount(SalesHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalSalesAmount(SalesHeader,TRUE);

      // Excercise
      ConsiderSource[SourceType::"Sales Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,SalesHeader."No.",SourceType::"Sales Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE SalesOrderInFCYWithCashFlowPaymentTerms@91();
    VAR
      CashFlowForecast@1008 : Record 840;
      SalesHeader@1007 : Record 36;
      PaymentTerms@1005 : Record 3;
      CustomerNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderCFPmtTerms(CashFlowForecast);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithCashFlowPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateSalesOrderWithLineCount(SalesHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalSalesAmount(SalesHeader,FALSE);

      // Excercise
      ConsiderSource[SourceType::"Sales Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,SalesHeader."No.",SourceType::"Sales Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE SalesOrderInFCYWithDiscountAndCashFlowPaymentTerms@105();
    VAR
      CashFlowForecast@1012 : Record 840;
      SalesHeader@1011 : Record 36;
      PaymentTerms@1009 : Record 3;
      PaymentTermsCashFlow@1013 : Record 3;
      CustomerNo@1008 : Code[20];
      RelationalExchangeRateAmount@1007 : Decimal;
      ExpectedAmountLCY@1005 : Decimal;
      ConsiderSource@1003 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      CFHelper.GetDifferentDsctPaymentTerms(PaymentTermsCashFlow,PaymentTerms.Code);
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCashFlowPaymentTerms(CustomerNo,PaymentTermsCashFlow.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateSalesOrderWithLineCount(SalesHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalAmountForSalesOrderWithCashFlowPaymentTermsDiscount(SalesHeader);

      // Excercise
      ConsiderSource[SourceType::"Sales Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,SalesHeader."No.",SourceType::"Sales Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE PurchaseOrderInFCYWithGroupByDocumentTypeOption@36();
    BEGIN
      PurchaseOrderInFCYGroupByDocumentTypeOption(TRUE);
    END;

    [Test]
    PROCEDURE PurchaseOrderInFCYWithoutGroupByDocumentTypeOption@50();
    BEGIN
      PurchaseOrderInFCYGroupByDocumentTypeOption(FALSE);
    END;

    LOCAL PROCEDURE PurchaseOrderInFCYGroupByDocumentTypeOption@51(isSet@1000 : Boolean);
    VAR
      CashFlowForecast@1007 : Record 840;
      PurchaseHeader@1006 : Record 38;
      VendorNo@1005 : Code[20];
      RelationalExchangeRateAmount@1004 : Decimal;
      ExpectedAmountLCY@1002 : Decimal;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF Journal with a purchase order for a Customer in FCY
      // Verify computed cash flow forecast amount

      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      VendorNo := CreateVendorWithCurrency(CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreatePurchaseOrderWithLineCount(PurchaseHeader,VendorNo,2);
      ExpectedAmountLCY := -1 * CFHelper.GetTotalPurchaseAmount(PurchaseHeader,FALSE);

      // Excercise
      ConsiderSource[SourceType::"Purchase Orders"] := TRUE;
      IF isSet THEN
        FillJournalWithGroupBy(ConsiderSource,CashFlowForecast."No.")
      ELSE
        FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,PurchaseHeader."No.",SourceType::"Purchase Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE PurchaseOrderInFCYWithDiscount@65();
    VAR
      CashFlowForecast@1007 : Record 840;
      PurchaseHeader@1006 : Record 38;
      PaymentTerms@1005 : Record 3;
      VendorNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscount(CashFlowForecast);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);
      ModifyVendorWithCurrency(VendorNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreatePurchaseOrderWithLineCount(PurchaseHeader,VendorNo,2);
      ExpectedAmountLCY := -1 * CFHelper.GetTotalPurchaseAmount(PurchaseHeader,TRUE);

      // Excercise
      ConsiderSource[SourceType::"Purchase Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,PurchaseHeader."No.",SourceType::"Purchase Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE PurchaseOrderInFCYWithCashFlowPaymentTerms@75();
    VAR
      CashFlowForecast@1007 : Record 840;
      PurchaseHeader@1006 : Record 38;
      PaymentTerms@1005 : Record 3;
      VendorNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderCFPmtTerms(CashFlowForecast);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      VendorNo := CreateVendorWithCashFlowPaymentTerms(PaymentTerms.Code);
      ModifyVendorWithCurrency(VendorNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreatePurchaseOrderWithLineCount(PurchaseHeader,VendorNo,2);
      ExpectedAmountLCY := -1 * CFHelper.GetTotalPurchaseAmount(PurchaseHeader,FALSE);

      // Excercise
      ConsiderSource[SourceType::"Purchase Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,PurchaseHeader."No.",SourceType::"Purchase Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE PurchaseOrderInFCYWithDiscountAndCashFlowPaymentTerms@76();
    VAR
      CashFlowForecast@1007 : Record 840;
      PurchaseHeader@1006 : Record 38;
      PaymentTerms@1005 : Record 3;
      PaymentTermsCashFlow@1008 : Record 3;
      VendorNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      CFHelper.GetDifferentDsctPaymentTerms(PaymentTermsCashFlow,PaymentTerms.Code);
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      VendorNo := CreateVendorWithPaymentTerms(PaymentTerms.Code);
      ModifyVendorWithCashFlowPaymentTerms(VendorNo,PaymentTermsCashFlow.Code);
      ModifyVendorWithCurrency(VendorNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreatePurchaseOrderWithLineCount(PurchaseHeader,VendorNo,2);
      ExpectedAmountLCY := -CFHelper.GetTotalAmountForPurchaseOrderWithCashFlowPaymentTermsDiscount(PurchaseHeader);

      // Excercise
      ConsiderSource[SourceType::"Purchase Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,PurchaseHeader."No.",SourceType::"Purchase Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderInFCYWithGroupByDocumentTypeOption@45();
    BEGIN
      ServiceOrderInFCYGroupByDocumentTypeOption(TRUE);
    END;

    [Test]
    PROCEDURE ServiceOrderInFCYWithoutGroupByDocumentTypeOption@81();
    BEGIN
      ServiceOrderInFCYGroupByDocumentTypeOption(FALSE);
    END;

    LOCAL PROCEDURE ServiceOrderInFCYGroupByDocumentTypeOption@84(isSet@1000 : Boolean);
    VAR
      CashFlowForecast@1007 : Record 840;
      ServiceHeader@1006 : Record 5900;
      CustomerNo@1005 : Code[20];
      RelationalExchangeRateAmount@1004 : Decimal;
      ExpectedAmountLCY@1002 : Decimal;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      // Test filling a CF Journal with a service order for a Customer in FCY
      // Verify computed cash flow forecast amount

      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithCurrency(CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateServiceOrderWithLineCount(ServiceHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalServiceAmount(ServiceHeader,FALSE);

      // Excercise
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      IF isSet THEN
        FillJournalWithGroupBy(ConsiderSource,CashFlowForecast."No.")
      ELSE
        FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,ServiceHeader."No.",SourceType::"Service Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderInFCYWithDiscount@85();
    VAR
      CashFlowForecast@1006 : Record 840;
      ServiceHeader@1005 : Record 5900;
      PaymentTerms@1007 : Record 3;
      CustomerNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderDiscount(CashFlowForecast);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateServiceOrderWithLineCount(ServiceHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalServiceAmount(ServiceHeader,TRUE);

      // Excercise
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,ServiceHeader."No.",SourceType::"Service Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderInFCYWithCashFlowPaymentTerms@87();
    VAR
      CashFlowForecast@1007 : Record 840;
      ServiceHeader@1006 : Record 5900;
      PaymentTerms@1005 : Record 3;
      CustomerNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastConsiderCFPmtTerms(CashFlowForecast);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithCashFlowPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateServiceOrderWithLineCount(ServiceHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalServiceAmount(ServiceHeader,FALSE);

      // Excercise
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,ServiceHeader."No.",SourceType::"Service Orders",CashFlowForecast."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderInFCYWithDiscountAndCashFlowPaymentTerms@88();
    VAR
      CashFlowForecast@1007 : Record 840;
      ServiceHeader@1006 : Record 5900;
      PaymentTerms@1005 : Record 3;
      PaymentTermsCashFlow@1008 : Record 3;
      CustomerNo@1004 : Code[20];
      RelationalExchangeRateAmount@1003 : Decimal;
      ExpectedAmountLCY@1001 : Decimal;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      CFHelper.GetDifferentDsctPaymentTerms(PaymentTermsCashFlow,PaymentTerms.Code);
      CFHelper.CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      RelationalExchangeRateAmount := LibraryRandom.RandDec(10,4);
      CustomerNo := CreateCustomerWithPaymentTerms(PaymentTerms.Code);
      ModifyCustomerWithCashFlowPaymentTerms(CustomerNo,PaymentTermsCashFlow.Code);
      ModifyCustomerWithCurrency(CustomerNo,CreateCurrencyWithExchangeRate(RelationalExchangeRateAmount));
      CreateServiceOrderWithLineCount(ServiceHeader,CustomerNo,2);
      ExpectedAmountLCY := CFHelper.GetTotalAmountForServiceOrderWithCashFlowPaymentTermsDiscount(ServiceHeader);

      // Excercise
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // Verify
      VerifyExpectedCFAmount(ExpectedAmountLCY,ServiceHeader."No.",SourceType::"Service Orders",CashFlowForecast."No.");
    END;

    LOCAL PROCEDURE Initialize@19();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryRandom.SetSeed(1);
      EVALUATE(EmptyDateFormula,'<0D>');
      EVALUATE(CustomDateFormula,'<0D>');
      // for boundary reasons
      EVALUATE(PlusOneDayFormula,'<+1D>');
      EVALUATE(MinusOneDayFormula,'<-1D>');

      IF IsInitialized THEN
        EXIT;

      LibraryPurchase.SetInvoiceRounding(FALSE);
      LibrarySales.SetInvoiceRounding(FALSE);
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateAccountInCustomerPostingGroup;
      LibraryERMCountryData.UpdateAccountInVendorPostingGroups;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostCashFlowForecast@57(VAR CashFlowForecast@1000 : Record 840);
    VAR
      CashFlowWorksheetLine@1001 : Record 846;
    BEGIN
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      COMMIT;  // Commit Required for REPORT.RUN.
      LibraryVariableStorage.Enqueue(CashFlowForecast."No.");  // Enqueue SuggestWorksheetLinesReqPageHandler.
      REPORT.RUN(REPORT::"Suggest Worksheet Lines");
      CashFlowWorksheetLine.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      LibraryCashFlowForecast.PostJournalLines(CashFlowWorksheetLine);
    END;

    LOCAL PROCEDURE CreateAccountScheduleAndLine@63(VAR AccScheduleLine@1000 : Record 85;Totaling@1003 : Text[50];RowNo@1002 : Code[10];AccScheduleName@1004 : Code[10]);
    BEGIN
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName);
      AccScheduleLine.VALIDATE("Row No.",RowNo);
      AccScheduleLine.VALIDATE("Totaling Type",AccScheduleLine."Totaling Type"::"Cash Flow Entry Accounts");
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateColumnLayout@122(VAR ColumnLayout@1001 : Record 334);
    VAR
      ColumnLayoutName@1000 : Record 333;
    BEGIN
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName.Name);
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessageQst)) THEN ;
    END;

    LOCAL PROCEDURE OpenAccountScheduleOverviewPage@46(LayoutName@1000 : Code[10]);
    VAR
      AccountScheduleNames@1001 : TestPage 103;
    BEGIN
      AccountScheduleNames.OPENEDIT;
      AccountScheduleNames.FILTER.SETFILTER(Name,LayoutName);
      AccountScheduleNames.Overview.INVOKE;
    END;

    LOCAL PROCEDURE UpdateAnalysisViewList@37(AnalysisViewCode@1001 : Code[10]);
    VAR
      AnalysisViewList@1000 : TestPage 556;
    BEGIN
      AnalysisViewList.OPENVIEW;
      AnalysisViewList.FILTER.SETFILTER(Code,AnalysisViewCode);
      AnalysisViewList."Codeunit Update Analysis View".INVOKE;
      AnalysisViewList.EditAnalysis.INVOKE;
    END;

    LOCAL PROCEDURE FillJournalWithoutGroupBy@39(ConsiderSource@1000 : ARRAY [11] OF Boolean;CashFlowForecastNo@1001 : Code[20]);
    BEGIN
      CFHelper.FillJournal(ConsiderSource,CashFlowForecastNo,FALSE);
    END;

    LOCAL PROCEDURE FillJournalWithGroupBy@72(ConsiderSource@1000 : ARRAY [11] OF Boolean;CashFlowForecastNo@1001 : Code[20]);
    BEGIN
      CFHelper.FillJournal(ConsiderSource,CashFlowForecastNo,TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@35(RelationalExchangeRateAmount@1002 : Decimal) : Code[10];
    VAR
      CurrencyExchangeRate@1001 : Record 330;
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      CreateExchangeRate(CurrencyExchangeRate,Currency.Code,1.0,RelationalExchangeRateAmount);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTerms@53(PaymentTermsCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrency@61(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE ModifyCustomerWithCurrency@139(CustomerNo@1000 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithCashFlowPaymentTerms@92(PaymentTermsCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Cash Flow Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE ModifyCustomerWithCashFlowPaymentTerms@74(CustomerNo@1001 : Code[20];PaymentTermsCode@1000 : Code[10]);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE("Cash Flow Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerms@48(PaymentTermsCode@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithCurrency@80(CurrencyCode@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE ModifyVendorWithCurrency@83(VendorNo@1000 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      Vendor.GET(VendorNo);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithCashFlowPaymentTerms@101(PaymentTermsCode@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Cash Flow Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE ModifyVendorWithCashFlowPaymentTerms@102(VendorNo@1000 : Code[20];PaymentTermsCode@1001 : Code[10]);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      Vendor.GET(VendorNo);
      Vendor.VALIDATE("Cash Flow Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithLineCount@38(VAR SalesHeader@1000 : Record 36;CustomerNo@1003 : Code[20];LineCount@1001 : Integer);
    VAR
      GLAccount@1004 : Record 15;
      Count@1002 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      FOR Count := 1 TO LineCount DO
        CFHelper.CreateSalesLine(SalesHeader,GLAccount);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithOneLine@40(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20]) : Code[20];
    BEGIN
      CreateSalesOrderWithLineCount(SalesHeader,CustomerNo,1);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithDiscountPercentage@59(CustomerNo@1000 : Code[20];PaymentTermsCode@1001 : Code[10]) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CreateSalesOrderWithLineCount(SalesHeader,CustomerNo,1);
      SalesHeader.VALIDATE("Payment Terms Code",PaymentTermsCode);
      SalesHeader.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithLineCount@44(VAR PurchaseHeader@1000 : Record 38;VendorNo@1003 : Code[20];LineCount@1001 : Integer);
    VAR
      GLAccount@1004 : Record 15;
      Count@1002 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      FOR Count := 1 TO LineCount DO
        CFHelper.CreatePurchaseLine(PurchaseHeader,GLAccount);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithOneLine@47(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]) : Code[20];
    BEGIN
      CreatePurchaseOrderWithLineCount(PurchaseHeader,VendorNo,1);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithDiscountPercentage@60(VendorNo@1000 : Code[20];PaymentTermsCode@1001 : Code[10]) : Code[20];
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      CreatePurchaseOrderWithLineCount(PurchaseHeader,VendorNo,1);
      PurchaseHeader.VALIDATE("Payment Terms Code",PaymentTermsCode);
      PurchaseHeader.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateServiceOrderWithLineCount@89(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20];LineCount@1003 : Integer);
    VAR
      LibraryService@1002 : Codeunit 131902;
      Count@1004 : Integer;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      FOR Count := 1 TO LineCount DO
        CFHelper.CreateServiceLines(ServiceHeader);
    END;

    LOCAL PROCEDURE CreateExchangeRate@42(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10];ExchangeRateAmount@1002 : Decimal;RelationalExchangeRateAmount@1003 : Decimal);
    VAR
      LibraryFiscalYear@1004 : Codeunit 131302;
    BEGIN
      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",LibraryFiscalYear.GetFirstPostingDate(TRUE));
      CurrencyExchangeRate.INSERT(TRUE);

      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",ExchangeRateAmount);
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",RelationalExchangeRateAmount);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetNumberOfSalesLines@67(SalesHeader@1000 : Record 36) : Integer;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        EXIT(COUNT);
      END;
    END;

    LOCAL PROCEDURE GetNumberOfPurchaseLines@69(PurchaseHeader@1000 : Record 38) : Integer;
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("Document No.",PurchaseHeader."No.");
        EXIT(COUNT);
      END;
    END;

    LOCAL PROCEDURE GetNumberOfServiceLines@73(ServiceHeader@1000 : Record 5900) : Integer;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",ServiceHeader."Document Type");
        SETRANGE("Document No.",ServiceHeader."No.");
        EXIT(COUNT);
      END;
    END;

    LOCAL PROCEDURE VerifyCFWorksheetLineAmount@25(CashFlowForecastNo@1000 : Code[20];DocumentNo@1001 : Code[20];SourceType@1005 : Option;ExpectedAmount@1004 : Decimal;ErrorText@1002 : Text[150]);
    VAR
      CFWorksheetLine@1003 : Record 846;
    BEGIN
      CFHelper.FilterSingleJournalLine(CFWorksheetLine,DocumentNo,SourceType,CashFlowForecastNo);
      Assert.AreEqual(ExpectedAmount,CFWorksheetLine."Amount (LCY)",ErrorText);
    END;

    LOCAL PROCEDURE VerifyExpectedCFAmount@66(ExpectedAmount@1000 : Decimal;DocumentNo@1001 : Code[20];SourceType@1170000001 : Option;CashFlowNo@1002 : Code[20]);
    VAR
      CFWorksheetLine@1003 : Record 846;
      TotalAmount@1004 : Decimal;
    BEGIN
      CFWorksheetLine.SETFILTER("Cash Flow Forecast No.",'%1',CashFlowNo);
      CFWorksheetLine.SETFILTER("Document No.",'%1',DocumentNo);
      CFWorksheetLine.SETFILTER("Source Type",'%1',SourceType);
      TotalAmount := 0;
      REPEAT
        TotalAmount += CFWorksheetLine."Amount (LCY)";
      UNTIL CFWorksheetLine.NEXT = 0;
      CFHelper.VerifyExpectedCFAmount(ExpectedAmount,TotalAmount);
    END;

    [PageHandler]
    PROCEDURE AccountScheduleOverviewPageHandler@56(VAR AccScheduleOverview@1000 : TestPage 490);
    VAR
      CashFlowForcastNo@1002 : Variant;
      ColumnLayout@1003 : Variant;
      ViewBy@1001 : 'Day,Week,Month';
    BEGIN
      AccScheduleOverview.PeriodType.SETVALUE(FORMAT(ViewBy::Day));
      LibraryVariableStorage.Dequeue(ColumnLayout);
      LibraryVariableStorage.Dequeue(CashFlowForcastNo);
      AccScheduleOverview.CurrentColumnName.SETVALUE(ColumnLayout);
      AccScheduleOverview.CashFlowFilter.SETVALUE(CashFlowForcastNo);
      AccScheduleOverview.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE AnalysisByDimensionsHandler@33(VAR AnalysisbyDimensions@1000 : TestPage 554);
    VAR
      CashFlowFilter@1001 : Variant;
      PeriodType@1002 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      LibraryVariableStorage.Dequeue(CashFlowFilter);
      AnalysisbyDimensions.PeriodType.SETVALUE(FORMAT(PeriodType::Month));
      AnalysisbyDimensions.CashFlowFilter.SETVALUE(CashFlowFilter);
      AnalysisbyDimensions.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisByDimensionsMatrixHandler@34(VAR AnalysisByDimensionsMatrix@1000 : TestPage 9249);
    BEGIN
      AnalysisByDimensionsMatrix.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@23(Msg@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestWorksheetLinesReqPageHandler@28(VAR SuggestWorksheetLines@1000 : TestRequestPage 840);
    VAR
      CashFlowNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CashFlowNo);
      SuggestWorksheetLines.Control1.SETVALUE(CashFlowNo);
      SuggestWorksheetLines.Control2.SETVALUE(TRUE);
      SuggestWorksheetLines.Control4.SETVALUE(TRUE);  // Liquid Funds.
      SuggestWorksheetLines.Control5.SETVALUE(TRUE);  // Receivables.
      SuggestWorksheetLines.Control6.SETVALUE(TRUE);  // Payables.
      SuggestWorksheetLines.Control7.SETVALUE(TRUE);  // Purchase Order.
      SuggestWorksheetLines.Control8.SETVALUE(TRUE);  // Cash Flow Manual Revenue.
      SuggestWorksheetLines.Control9.SETVALUE(TRUE);  // Sales Order.
      SuggestWorksheetLines.Control10.SETVALUE(TRUE);  // Budgeted Fixed Asset.
      SuggestWorksheetLines.Control12.SETVALUE(TRUE);  // Cash Flow Manual Expense.
      SuggestWorksheetLines.Control13.SETVALUE(TRUE);  // Sale of Fixed Asset.
      SuggestWorksheetLines.Control16.SETVALUE(TRUE);  // G/L Budget.
      SuggestWorksheetLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow]
      Unsupported version tags:
      SE: Unable to Execute

      Feature:  Cash Flow
      Area:     Filling Cash Flow Journal
                Advanced CF date and CF amount test cases

      Abbrev.:  CustLE - customer ledger entry
                VendLE - vendor ledger entry
                Dsct - discount
                Pmt - payment
                PrePmt - prepayment

      Test cases:
        1.  Test filling a CF journal by using Fill batch with single customer ledger entry
            where only partial payment is applied
        2.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a discounted payment is paid after the CF pmt terms discount date
        3.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a discounted payment from a customer w/ discounted default pmt terms is paid before the
            the payment discount date
        4.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where an opened customer ledger entry w/o payment is forecasted within the disc tolerance period
        5.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a total discounted sales invoice payment is forecasted within payment discount tolerance
        6.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a partial sales invoice payment is forecasted within the payment discount tolerance date
        7.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a customer LE w/o payment is forecasted after the pmt discount tolerance date
        8.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a partial sales invoice payment is forecasted outside the payment discount tolerance date
        9.  Test filling a CF journal using Fill batch considering discount, CF pmt terms and payment discount tolerance date
            where a discounted sales invoice payment is paid after the pmt discount tolerance date
        10. Test filling a CF journal using Fill batch considering payment tolerance amount
            where the payment amount of the sales invoice is within the tolerance amout
        11. Test filling a CF journal using Fill batch considering payment tolerance amount
            where the payment amount of the sales invoice is less than the tolerance amount
        12. Verify Cash Flow Forcast show in Account Schedule with Cashflow Layout.
        13. Verify Cash Flow Forcast show in Analysis by Dimesnion with view by Month.

       WI : 320049
       ----------------------------------------------------------------------------------
       CashFlowWithAccountSchedule                                                 269233
       CashFlowWithAnalysisByDimension                                             269611
    }
    END.
  }
}

