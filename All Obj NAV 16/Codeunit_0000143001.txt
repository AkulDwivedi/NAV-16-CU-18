OBJECT Codeunit 143001 Library - Service Tax
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1500002 : Codeunit 131300;
      LibraryUtility@1500000 : Codeunit 131000;
      LibraryRandom@1500001 : Codeunit 130440;
      ServTaxReceivablesAccount@1500003 : TextConst 'ENU=Rec.';
      ServTaxPayablesAccount@1500004 : TextConst 'ENU=Pay.';
      ServTaxRecInterimAccount@1500005 : TextConst 'ENU=Int.Rec.';
      ServTaxPayInterimAccount@1500006 : TextConst 'ENU=Int.Pay.';
      ServTaxExpensesAccount@1500007 : TextConst 'ENU=Expenses';
      SBCExpensesAccount@1500008 : TextConst 'ENU=SBC Exp.';
      SBCPayablesAccount@1500009 : TextConst 'ENU=SBC Pay.';
      SBCInterimAccount@1500010 : TextConst 'ENU=SBC Int.';
      SBCPayInterimAccount@1500011 : TextConst 'ENU=SBC PayInt';
      KKCReceivablesAccount@1500015 : TextConst 'ENU=KKCRec.';
      KKCPayablesAccount@1500014 : TextConst 'ENU=KKCPay.';
      KKCRecInterimAccount@1500013 : TextConst 'ENU=KKCInt.Rec';
      KKCPayInterimAccount@1500017 : TextConst 'ENU=KKCInt.Pay';
      KKCExpensesAccount@1500016 : TextConst 'ENU=KKExpenses';

    [Normal]
    PROCEDURE CreateServiceEntityType@1500005(VAR ServiceEntityType@1500000 : Record 16460);
    BEGIN
      ServiceEntityType.INIT;
      ServiceEntityType.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ServiceEntityType.FIELDNO(Code),DATABASE::"Service Entity Type"));
      ServiceEntityType.VALIDATE(Description,ServiceEntityType.Code);
      ServiceEntityType.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceTaxRegistrationNo@1500006(VAR ServiceTaxRegistrationNo@1500000 : Record 16475);
    VAR
      ServiceEntityType@1500001 : Record 16460;
    BEGIN
      CreateServiceEntityType(ServiceEntityType);

      ServiceTaxRegistrationNo.INIT;
      ServiceTaxRegistrationNo.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(ServiceTaxRegistrationNo.FIELDNO(Code),DATABASE::"Service Tax Registration Nos."));
      ServiceTaxRegistrationNo.VALIDATE(Description,ServiceTaxRegistrationNo.Code);
      ServiceTaxRegistrationNo.VALIDATE("Service Entity Type",ServiceEntityType.Code);
      ServiceTaxRegistrationNo.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceTaxGroup@1500003(VAR ServiceTaxGroup@1500000 : Record 16471);
    BEGIN
      ServiceTaxGroup.INIT;
      ServiceTaxGroup.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ServiceTaxGroup.FIELDNO(Code),DATABASE::"Service Tax Groups"));
      ServiceTaxGroup.VALIDATE(Description,ServiceTaxGroup.Code);
      ServiceTaxGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceTaxSetup@1500009(ServiceTaxGroupCode@1500000 : Code[20];FromDate@1500002 : Date);
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      GLAccount@1500003 : Record 15;
    BEGIN
      ServiceTaxSetup.INIT;
      ServiceTaxSetup.VALIDATE(Code,ServiceTaxGroupCode);
      ServiceTaxSetup.VALIDATE("From Date",FromDate);
      ServiceTaxSetup.VALIDATE("Service Tax %",LibraryRandom.RandIntInRange(5,20));
      ServiceTaxSetup.VALIDATE("SB Cess%",LibraryRandom.RandIntInRange(5,20));
      ServiceTaxSetup.VALIDATE("KK Cess%",LibraryRandom.RandIntInRange(5,20));
      ServiceTaxSetup.INSERT(TRUE);

      CreateGLAccountWithPrefix(GLAccount,ServTaxReceivablesAccount);
      ServiceTaxSetup.VALIDATE("Service Tax Receivable Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,ServTaxPayablesAccount);
      ServiceTaxSetup.VALIDATE("Service Tax Payable Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,ServTaxRecInterimAccount);
      ServiceTaxSetup.VALIDATE("Receivables Account (Interim)",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,ServTaxPayInterimAccount);
      ServiceTaxSetup.VALIDATE("Payables Account (Interim)",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,ServTaxExpensesAccount);
      ServiceTaxSetup.VALIDATE("Service Tax Expenses Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,SBCExpensesAccount);
      ServiceTaxSetup.VALIDATE("SB Cess Expense Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,SBCPayablesAccount);
      ServiceTaxSetup.VALIDATE("SB Cess Payable Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,SBCInterimAccount);
      ServiceTaxSetup.VALIDATE("SB Cess Acc.(Interim)",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,SBCPayInterimAccount);
      ServiceTaxSetup.VALIDATE("SB Cess Payable Acc.(Interim)",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,KKCReceivablesAccount);
      ServiceTaxSetup.VALIDATE("KK Cess Receivable Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,KKCPayablesAccount);
      ServiceTaxSetup.VALIDATE("KK Cess Payable Account",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,KKCRecInterimAccount);
      ServiceTaxSetup.VALIDATE("KK Cess Rec. Acc. (Interim)",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,KKCPayInterimAccount);
      ServiceTaxSetup.VALIDATE("KK Cess Payable Acc. (Interim)",GLAccount."No.");
      CreateGLAccountWithPrefix(GLAccount,KKCExpensesAccount);
      ServiceTaxSetup.VALIDATE("KK Cess Expense Account",GLAccount."No.");
      ServiceTaxSetup.MODIFY(TRUE);
    END;

    PROCEDURE CreateServiceTaxStructure@1500002(VAR StructureHeader@1500000 : Record 13792);
    VAR
      StructureLines@1500001 : Record 13793;
    BEGIN
      StructureHeader.INIT;
      StructureHeader.VALIDATE(Code,LibraryUtility.GenerateRandomCode(StructureHeader.FIELDNO(Code),DATABASE::"Structure Header"));
      StructureHeader.VALIDATE(Description,StructureHeader.Code);
      StructureHeader.INSERT(TRUE);

      StructureLines.INIT;
      StructureLines.VALIDATE(Code,StructureHeader.Code);
      StructureLines.VALIDATE(Type,StructureLines.Type::"Service Tax");
      StructureLines.VALIDATE("Header/Line",StructureLines."Header/Line"::Line);
      StructureLines.VALIDATE("Include Base",TRUE);
      StructureLines.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceTaxReturnPeriod@1500000();
    VAR
      ServiceTaxReturnPeriod@1500001 : Record 16588;
      NewYear@1500002 : Integer;
    BEGIN
      IF ServiceTaxReturnPeriod.FINDLAST THEN
        NewYear := ServiceTaxReturnPeriod.Year + 1
      ELSE
        NewYear := DATE2DMY(WORKDATE,3);

      WITH ServiceTaxReturnPeriod DO BEGIN
        INIT;
        VALIDATE(Year,NewYear);
        VALIDATE("Return Period","Return Period"::"Apr-Sep");
        VALIDATE("Return Filing Due Date",DMY2DATE(31,12,Year));
        INSERT(TRUE);
        CreatePeriodDueDates(Year,"Return Period")
      END;
    END;

    PROCEDURE CreateSrvTaxReverseChargeSetup@1500004(SrvTaxGroupCode@1500000 : Code[10];FromEntityType@1500001 : Code[10];ToEntityType@1500002 : Code[10];ServiceTaxType@1500003 : Option;ReverseChargePercentage@1500005 : Integer);
    VAR
      STReverseChargeSetup@1500004 : Record 16461;
    BEGIN
      IF STReverseChargeSetup.GET(SrvTaxGroupCode,FromEntityType,ToEntityType) THEN
        EXIT;
      STReverseChargeSetup.INIT;
      STReverseChargeSetup.VALIDATE("Service Tax Group",SrvTaxGroupCode);
      STReverseChargeSetup.VALIDATE("From Service Entity Type",FromEntityType);
      STReverseChargeSetup.VALIDATE("To Service Entity Type",ToEntityType);
      STReverseChargeSetup.VALIDATE("Reverse Charge Tax Type",ServiceTaxType);
      STReverseChargeSetup.VALIDATE("Reverse Charge %",ReverseChargePercentage);
      STReverseChargeSetup.INSERT(TRUE);
    END;

    PROCEDURE GetDateWithinIncomeTaxAcPeriod@11(IncomeTaxAccPeriod@1500000 : Record 13724) : Date;
    BEGIN
      EXIT(GetDateWithin(IncomeTaxAccPeriod."Starting Date",IncomeTaxAccPeriod."Ending Date"))
    END;

    PROCEDURE GetDateWithinSrvTaxPeriod@1500011(ServiceTaxReturnPeriod@1500000 : Record 16588) : Date;
    BEGIN
      EXIT(GetDateWithin(GetSrvTaxReturnPeriodStartDate(ServiceTaxReturnPeriod),GetSrvTaxReturnPeriodEndDate(ServiceTaxReturnPeriod)))
    END;

    PROCEDURE GetDeltaDateWithinSrvTaxPeriod@1500010(ServiceTaxReturnPeriod@1500000 : Record 16588;StartDate@1500001 : Date) : Date;
    BEGIN
      EXIT(GetDateWithin(StartDate,GetSrvTaxReturnPeriodEndDate(ServiceTaxReturnPeriod)))
    END;

    PROCEDURE GetSrvTaxReturnPeriodStartDate@1500007(ServiceTaxReturnPeriod@1500000 : Record 16588) StartDate : Date;
    BEGIN
      CASE ServiceTaxReturnPeriod."Return Period" OF
        ServiceTaxReturnPeriod."Return Period"::"Apr-Sep":
          StartDate := DMY2DATE(1,4,ServiceTaxReturnPeriod.Year);
        ServiceTaxReturnPeriod."Return Period"::"Oct-Mar":
          StartDate := DMY2DATE(1,10,ServiceTaxReturnPeriod.Year);
      END;
    END;

    PROCEDURE GetSrvTaxReturnPeriodEndDate@1500008(ServiceTaxReturnPeriod@1500001 : Record 16588) EndDate : Date;
    BEGIN
      CASE ServiceTaxReturnPeriod."Return Period" OF
        ServiceTaxReturnPeriod."Return Period"::"Apr-Sep":
          EndDate := DMY2DATE(30,9,ServiceTaxReturnPeriod.Year);
        ServiceTaxReturnPeriod."Return Period"::"Oct-Mar":
          EndDate := DMY2DATE(31,3,ServiceTaxReturnPeriod.Year);
      END;
    END;

    PROCEDURE PayServiceTax@1500001(ServiceTaxRegNo@1500000 : Code[20];ServiceTaxGroupCode@1500007 : Code[20];ReverseCharge@1500001 : Boolean) DocNo : Code[20];
    VAR
      ServiceTaxReturnPeriod@1500008 : Record 16588;
      ServiceTaxEntryDetail@1500006 : Record 16474;
      ServiceTaxPayment@1500002 : TestPage 16476;
      DateFilter@1500005 : Text[30];
      PostingDate@1500004 : Date;
    BEGIN
      ServiceTaxReturnPeriod.FINDLAST;
      PostingDate := GetSrvTaxReturnPeriodEndDate(ServiceTaxReturnPeriod);
      DateFilter :=
        FORMAT(GetSrvTaxReturnPeriodStartDate(ServiceTaxReturnPeriod)) + '..' +
        FORMAT(PostingDate);
      DocNo := LibraryUtility.GenerateRandomCode(ServiceTaxEntryDetail.FIELDNO("Document No."),DATABASE::"Service Tax Entry Details");

      ServiceTaxPayment.OPENEDIT;
      ServiceTaxPayment.ReverseChargeTrans.SETVALUE(ReverseCharge);
      ServiceTaxPayment.ServiceTaxRegistrationNo.SETVALUE(ServiceTaxRegNo);
      ServiceTaxPayment.DateFilter.SETVALUE(DateFilter);
      ServiceTaxPayment.DocumentNo.SETVALUE(DocNo);
      ServiceTaxPayment.PostingDate.SETVALUE(PostingDate);
      ServiceTaxPayment.ApplyBtn.INVOKE;

      EXIT(DocNo);
    END;

    LOCAL PROCEDURE PayServiceTaxComponent@1500016(PaymentLiability@1500003 : Decimal;CreditAvailable@1500002 : Decimal;VAR CreditAvailed@1500001 : Decimal;VAR PaymentAmount@1500000 : Decimal);
    BEGIN
      PaymentAmount := PaymentLiability;
      IF PaymentLiability > CreditAvailable THEN
        CreditAvailed := CreditAvailable
      ELSE
        CreditAvailed := PaymentLiability;
      PaymentAmount -= CreditAvailed;
    END;

    PROCEDURE SetValuesForPaymentUseCreditAvailable@1500017(PayServiceTax@1500000 : TestPage 16477);
    VAR
      GLAccount@1500002 : Record 15;
      ServiceTaxPaymentBuffer@1500001 : Record 16476;
      CreditAvailed@1500003 : Decimal;
      PaymentAmt@1500004 : Decimal;
      TotalPayment@1500005 : Decimal;
      SBCAmt@1500006 : Decimal;
    BEGIN
      WITH PayServiceTax DO BEGIN
        FILTER.SETFILTER("Payment Liability",'<>0');
        LAST;
        PayServiceTaxComponent("Payment Liability".ASDECIMAL,"Credit Available".ASDECIMAL,CreditAvailed,PaymentAmt);
        "Credit Availed".SETVALUE(CreditAvailed);
        "Payment Amount".SETVALUE(PaymentAmt);
        TotalPayment += PaymentAmt;
        PayServiceTaxComponent("Payment Liability (eCess)".ASDECIMAL,"Credit Available (eCess)".ASDECIMAL,CreditAvailed,PaymentAmt);
        "Credit Availed (eCess)".SETVALUE(CreditAvailed);
        "Payment Amount (eCess)".SETVALUE(PaymentAmt);
        TotalPayment += PaymentAmt;
        PayServiceTaxComponent("Payment Liability (SHECess)".ASDECIMAL,"Credit Available (SHECess)".ASDECIMAL,CreditAvailed,PaymentAmt);
        "Credit Availed (SHECess)".SETVALUE(CreditAvailed);
        "Payment Amount (SHECess)".SETVALUE(PaymentAmt);
        TotalPayment += PaymentAmt;
        PayServiceTaxComponent("Payment Liability (KKC)".ASDECIMAL,"Credit Available (KKC)".ASDECIMAL,CreditAvailed,PaymentAmt);
        "Credit Availed (KKC)".SETVALUE(CreditAvailed);
        "Payment Amount (KKC)".SETVALUE(PaymentAmt);
        TotalPayment += PaymentAmt;
        SBCAmt := "Payment Liability (SBC)".ASDECIMAL;
        "Payment Amount (SBC)".SETVALUE(SBCAmt);
        TotalPayment += SBCAmt;
        IF TotalPayment <> 0 THEN BEGIN
          "Account Type".SETVALUE(ServiceTaxPaymentBuffer."Account Type"::"G/L Account");
          LibraryERM.CreateGLAccount(GLAccount);
          "Account No.".SETVALUE(GLAccount."No.");
        END;
        Post.INVOKE;
      END;
    END;

    LOCAL PROCEDURE GetDateWithin@1500012(StartDate@1500000 : Date;EndDate@1500001 : Date) : Date;
    VAR
      NoOfDaysInPeriod@1500002 : Integer;
    BEGIN
      NoOfDaysInPeriod := EndDate - StartDate;
      IF NoOfDaysInPeriod = 0 THEN
        EXIT(StartDate);
      EXIT(CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandInt(NoOfDaysInPeriod - 1)),StartDate))
    END;

    PROCEDURE CreateGLAccountWithPrefix@14(VAR GLAccount@1000 : Record 15;Prefix@1500000 : Text[10]);
    VAR
      RandomCode@1500001 : Code[10];
    BEGIN
      GLAccount.INIT;
      RandomCode := LibraryUtility.GenerateRandomCode(GLAccount.FIELDNO("No."),DATABASE::"G/L Account");
      GLAccount.VALIDATE("No.",STRSUBSTNO('%1%2',Prefix,RandomCode));
      GLAccount.VALIDATE(Name,GLAccount."No.");
      GLAccount.INSERT(TRUE);
    END;

    PROCEDURE SetServiceTaxRounding@1500013();
    VAR
      GLSetup@1500000 : Record 98;
    BEGIN
      GLSetup.GET;
      GLSetup.VALIDATE("Service Tax Rounding Precision",0.01);
      GLSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetServiceTaxRoundingOne@1500014();
    VAR
      GLSetup@1500000 : Record 98;
    BEGIN
      GLSetup.GET;
      GLSetup.VALIDATE("Service Tax Rounding Precision",1);
      GLSetup.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

