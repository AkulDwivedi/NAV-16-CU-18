OBJECT Codeunit 144054 TCS - Transcations
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500002 : Record 98;
      LibraryRandom@1500102 : Codeunit 130440;
      LibraryERM@1500202 : Codeunit 131300;
      LibraryTDS@1500010 : Codeunit 143000;
      LibrarySales@1500302 : Codeunit 130509;
      LibraryPurchase@1500009 : Codeunit 130512;
      LibraryInventory@1500502 : Codeunit 132201;
      LibraryTCS@1500000 : Codeunit 143008;
      LibraryJournals@1500802 : Codeunit 131306;
      LibrarySetupStorage@1500001 : Codeunit 131009;
      LibraryFixedAsset@1500004 : Codeunit 131330;
      LibraryResource@1500007 : Codeunit 130511;
      LibraryWarehouse@1500013 : Codeunit 132204;
      Assert@1500071 : Codeunit 130000;
      AmountErr@1500003 : TextConst '@@@="%1 and %2 = TDS% and TDS field Caption";ENU=%1 is incorrect in %2.';
      LibraryVariableStorage@1500005 : Codeunit 131004;
      isInitialized@1500006 : Boolean;
      TCANCompanyErr@1500011 : TextConst 'ENU="T.C.A.N. No. must have a value in Company Information: "';
      TCANLocationErr@1500012 : TextConst '@@@="%1 = Location Code";ENU="T.C.A.N. No. must have a value in Location: Code=%1. It cannot be zero or empty."';

    [Test]
    PROCEDURE CreateSalesCreditMemoAndCheckIncomeTaxAccPeriod@1500014();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      IncomeTaxErr@1500006 : Text;
    BEGIN
      // [SCENARIO 163745] TCS - Tax Collection at Source - Verify warning message when income tax accounting period is not defined
      // [FEATURE] [TCS - Transactions]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      IncomeTaxErr := LibraryTCS.GetIncomeTaxAccPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(
        TcsNatureOfCollection,TCSSetup,TcsNatureOfCollection."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(
        NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,TcsNatureOfCollection.Code,
        TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Credit Memo and Post
      CreateSalesOrderWithLocation(
        SalesHeader,SalesHeader."Document Type"::"Credit Memo",NodNocHeader."No.",
        LibraryRandom.RandDec(400000,2),TcsNatureOfCollection.Code);
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error, There is not Income Tax Accounting Period Exist
      Assert.ExpectedError(IncomeTaxErr);
    END;

    [Test]
    PROCEDURE CreateSalesReturnOrderAndCheckTCANNoWithLocation@1500008();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      LocationCode@1500006 : Code[10];
    BEGIN
      // [SCENARIO 163743] TCS - Tax Collection at Source - Check if system throws error on trying to post Sales Return Order without defining TCAN no in the setup
      // [FEATURE] [TCS - Transactions]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Order With Line Discount
      LocationCode :=
        CreateSalesOrderWithLocation(SalesHeader,SalesHeader."Document Type"::"Return Order",NodNocHeader."No.",
          LibraryRandom.RandDec(400000,2),TcsNatureOfCollection.Code);
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error, T.C.A.N No. must not be empty in Location.
      Assert.ExpectedError(STRSUBSTNO(TCANLocationErr,LocationCode));
    END;

    [Test]
    PROCEDURE CreateSalesCreditMemoAndCheckTCANNoWithLocation@1500031();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      LocationCode@1500006 : Code[10];
    BEGIN
      // [SCENARIO 163746] TCS - Tax Collection at Source - Verify warning message when TCAN no in the Location card is blank.
      // [FEATURE] [TCS - Transactions]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Credit Memo and Post
      LocationCode :=
        CreateSalesOrderWithLocation(SalesHeader,SalesHeader."Document Type"::"Credit Memo",NodNocHeader."No.",
          LibraryRandom.RandDec(400000,2),TcsNatureOfCollection.Code);
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error, T.C.A.N No. must not be empty in Location.
      Assert.ExpectedError(STRSUBSTNO(TCANLocationErr,LocationCode));
    END;

    [Test]
    PROCEDURE CreateSalesCreditMemoAndCheckTCANNoWithCompanyInfo@1500040();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      CompanyInformation@1500006 : Record 79;
    BEGIN
      // [SCENARIO 163747] TCS - Tax Collection at Source - Verify warning message when TCAN no. in the company information is blank
      // [FEATURE] [TCS - Transactions]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      UpdateTCANNoInCompanyInfo(CompanyInformation);

      // [WHEN] Create Sales Credit Memo and Post
      CreateAndUpdateSalesHeader(
        SalesHeader,NodNocHeader."No.",CompanyInformation."Location Code",SalesHeader."Document Type"::"Credit Memo");
      CreateAndUpdateSalesLine(SalesHeader,TcsNatureOfCollection.Code);
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error, T.C.A.N No. must not be empty in Company Information.
      Assert.ExpectedError(TCANCompanyErr);
    END;

    [Test]
    PROCEDURE CreateSalesReturnOrderAndCheckTCANNoWithCompanyInfo@1500046();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      CompanyInformation@1500006 : Record 79;
    BEGIN
      // [SCENARIO 163744] TCS - Tax Collection at Source - Verify warning message when TCAN no. in the company information is blank
      // [FEATURE] [TCS - Transactions]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      UpdateTCANNoInCompanyInfo(CompanyInformation);

      // [WHEN] Create Sales Return Order and Post
      CreateAndUpdateSalesHeader(SalesHeader,NodNocHeader."No.",CompanyInformation."Location Code",SalesHeader."Document Type"::Order);
      CreateAndUpdateSalesLine(SalesHeader,TcsNatureOfCollection.Code);
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error, T.C.A.N No. must not be empty in Company Information.
      Assert.ExpectedError(TCANCompanyErr);
    END;

    [Test]
    PROCEDURE CreateSalesDocumentWithTCS@1500112();
    VAR
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
      Amount@1500335 : Decimal;
    BEGIN
      // [SCENARIO 163824] Create SalesInvoice , Calculate TCS and Verify TCS Entries.
      // [FEATURE] [SalesInvoice]

      // [GIVEN] Created Steup for TCS
      Initialize;
      Amount := LibraryRandom.RandDec(4000000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);

      // [WHEN] Create Sales Invoice With TCS
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,NodNocHeader."No.",
        Amount,TcsNatureOfCollection.Code);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyTCSEntry(DocumentNo,SalesLine."Document Type"::Invoice,SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CreateJournalLineAndCalculateTCS@1500000();
    VAR
      AssesseeCode@1500003 : Record 13727;
      NodNocHeader@1500002 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500000 : Record 16508;
      GenJournalLine@1500004 : Record 81;
      Amount@1500005 : Decimal;
      DocumentNo@1500008 : Code[20];
    BEGIN
      // [SCENARIO 163719,163715] Create General Journal Line and Calculate TCS
      // [FEATURE] [General Journal Line]

      // [GIVEN] Created NODNOC Setup and TCS Nature of Collection and TCS Setup
      Initialize;
      Amount := 10000;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create General Journal Line and Posted
      CreateGeneralJournalLines(
        GenJournalLine,NodNocHeader."No.",Amount,TcsNatureOfCollection.Code,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Party Type"::Customer,LibraryERM.CreateGLAccountNo);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] TCS and GL Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTCS(DocumentNo,-GenJournalLine.Amount);
      VerifyTCSEntry(DocumentNo,GenJournalLine."Document Type"::Invoice,GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE CreateJournalLineAndCalculateTCSWithThreshold@1500012();
    VAR
      AssesseeCode@1500003 : Record 13727;
      NodNocHeader@1500002 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500000 : Record 16508;
      GenJournalLine@1500004 : Record 81;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      Amount@1500005 : Decimal;
      DocumentNo@1500008 : Code[20];
    BEGIN
      // [SCENARIO 163720] Create General Journal Line and Calculate TCS With Threshold Limit
      // [FEATURE] [General Journal Line]

      // [GIVEN] Created NODNOC Setup and TCS Nature of Collection and TCS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(3000000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);

      // [WHEN] Create General Journal Line and Posted
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLines(
        GenJournalLine,NodNocHeader."No.",Amount,TcsNatureOfCollection.Code,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Party Type"::Customer,LibraryERM.CreateGLAccountNo);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] TCS and GL Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTCS(DocumentNo,-GenJournalLine.Amount);
      VerifyTCSEntry(DocumentNo,GenJournalLine."Document Type"::Invoice,GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE CreateJournalLineAndCalculateTCSWithoutSurcharge@1500013();
    VAR
      AssesseeCode@1500003 : Record 13727;
      NodNocHeader@1500002 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500000 : Record 16508;
      GenJournalLine@1500004 : Record 81;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      Amount@1500005 : Decimal;
      DocumentNo@1500008 : Code[20];
    BEGIN
      // [SCENARIO 163721] TCS - Tax Collection at Source - Verify whether system is calculating TCS amount only when amount is greater than the threshold value with no threshold and surcharge overlook for NOC lines
      // [FEATURE] [TCS - Transactions]

      // [GIVEN] Created NODNOC Setup and TCS Nature of Collection and TCS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1100000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);

      // [WHEN] Create General Journal Line and Post
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLines(
        GenJournalLine,NodNocHeader."No.",Amount,TcsNatureOfCollection.Code,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Party Type"::Customer,LibraryERM.CreateGLAccountNo);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] TCS and GL Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTCS(DocumentNo,-GenJournalLine.Amount);
      VerifyTCSEntry(DocumentNo,GenJournalLine."Document Type"::Invoice,GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesCreditMemo@1500002();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      SalesLine@1500005 : Record 37;
      Item@1500007 : Record 27;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163803] Check if the program is calculating TCS in case of creating Sales Credit Memo for customer where G/L is selected as line item. The system will calculate the TCS amount in accordance with the defined TCS rates.
      // [FEATURE] [Sales CreditMemo]
      Initialize;

      // [GIVEN] Created NODNOC,TCS Setup,TCS Nature of Collection.
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Credit Memo and Post
      CreateSalesCreditMemo(
        SalesHeader,SalesLine,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),NodNocHeader."No.",TcsNatureOfCollection.Code);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyTCSEntry(DocumentNo,SalesLine."Document Type"::"Credit Memo",SalesLine."Amount Including VAT");
    END;

    [Test]
    [HandlerFunctions(SalesCrMemoStatistics)]
    PROCEDURE CalculateTCSusingSalesCreditMemoWithFA@1500004();
    VAR
      NodNocHeader@1500006 : Record 13786;
      TcsNatureOfCollection@1500005 : Record 16507;
      TCSSetup@1500004 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500001 : Record 37;
      FixedAsset@1500000 : Record 5600;
    BEGIN
      // [SCENARIO 163804] Check if the program is calculating TCS in case of creating Sales Credit Memo for customer where fixed asset/resource/charge item are selected as line item. The system will not calculate any TCS amount for fixed asset/resource/
      // [FEATURE] [Sales CreditMemo]
      Initialize;

      // [GIVEN] Created NODNOC,TCS Setup,TCS Nature of Collection.
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Credit Memo With Fixed Asset
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      CreateSalesCreditMemo(
        SalesHeader,SalesLine,SalesLine.Type::"Fixed Asset",FixedAsset."No.",NodNocHeader."No.",TcsNatureOfCollection.Code);

      // [THEN] Sales Statistics has been verified
      SalesLine.TESTFIELD("Total TDS/TCS Incl. SHE CESS",0);
      VerifySalesCrMemoStatistics(SalesLine,(SalesLine.Quantity * SalesLine."Unit Price"));
    END;

    [Test]
    [HandlerFunctions(SalesCrMemoStatistics)]
    PROCEDURE CalculateTCSusingSalesCreditMemoWithResource@1500010();
    VAR
      NodNocHeader@1500006 : Record 13786;
      TcsNatureOfCollection@1500005 : Record 16507;
      TCSSetup@1500004 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500001 : Record 37;
      Resource@1500000 : Record 156;
    BEGIN
      // [SCENARIO 163805] Check if the program is calculating TCS in case of creating Sales Credit Memo for customer where fixed asset/resource/charge item are selected as line item. The system will not calculate any TCS amount for fixed asset/resource/
      // [FEATURE] [Sales CreditMemo]
      Initialize;

      // [GIVEN] Created NODNOC,TCS,TCS Nature of Collection.
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Credit Memo With Resource
      LibraryResource.CreateResourceNew(Resource);
      CreateSalesCreditMemo(
        SalesHeader,SalesLine,SalesLine.Type::Resource,Resource."No.",NodNocHeader."No.",TcsNatureOfCollection.Code);

      // [THEN] Sales Statistics has been verified
      SalesLine.TESTFIELD("Total TDS/TCS Incl. SHE CESS",0);
      VerifySalesCrMemoStatistics(SalesLine,(SalesLine.Quantity * SalesLine."Unit Price"));
    END;

    [Test]
    [HandlerFunctions(SalesCrMemoStatistics)]
    PROCEDURE CalculateTCSusingSalesCreditMemoWithItemCharge@1500016();
    VAR
      NodNocHeader@1500006 : Record 13786;
      TcsNatureOfCollection@1500005 : Record 16507;
      TCSSetup@1500004 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500001 : Record 37;
    BEGIN
      // [SCENARIO 163806] Check if the program is calculating TCS in case of creating Sales Credit Memo for customer where fixed asset/resource/charge item are selected as line item. The system will not calculate any TCS amount for fixed asset/resource/
      // [FEATURE] [Sales CreditMemo]
      Initialize;

      // [GIVEN] Created NODNOC,TCS,TCS Nature of Collection.
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Credit Memo With Charge Item
      CreateSalesCreditMemo(
        SalesHeader,SalesLine,SalesLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,
        NodNocHeader."No.",TcsNatureOfCollection.Code);

      // [THEN] Sales Statistics has been verified
      SalesLine.TESTFIELD("Total TDS/TCS Incl. SHE CESS",0);
      VerifySalesCrMemoStatistics(SalesLine,(SalesLine.Quantity * SalesLine."Unit Price"));
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesOrder@1500011();
    VAR
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
      Amount@1500335 : Decimal;
    BEGIN
      // [SCENARIO 163826,163827] Create Sales Order , Calculate TCS and Verify TCS Entries.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      Amount := LibraryRandom.RandDec(20000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Order With TCS
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        Amount,TcsNatureOfCollection.Code);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyTCSEntry(DocumentNo,SalesLine."Document Type"::Invoice,SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesOrderWithThreshold@1500005();
    VAR
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
      Amount@1500335 : Decimal;
    BEGIN
      // [SCENARIO 163828,163289] Create Sales Order,Calculate TCS and Verify TCS Entries.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      Amount := LibraryRandom.RandDec(4000000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);

      // [WHEN] Create Sales Order With TCS
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        Amount,TcsNatureOfCollection.Code);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyTCSEntry(DocumentNo,SalesLine."Document Type"::Invoice,SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesOrderWithLineDiscount@1500006();
    VAR
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
      Amount@1500335 : Decimal;
    BEGIN
      // [SCENARIO 163695] Create Sales Order , Calculate TCS and Verify TCS Entries With Line Discount.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      Amount := LibraryRandom.RandDec(20000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Order With Line Discount
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        Amount,TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Line Discount %",LibraryRandom.RandDec(50,2));
      SalesLine.MODIFY(TRUE);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyGLEntryCount(DocumentNo,4);
      VerifyTCSEntry(DocumentNo,SalesLine."Document Type"::Invoice,SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesOrderWithCustomerDiscount@1500015();
    VAR
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      CustInvoiceDisc@1500000 : Record 19;
      Amount@1500002 : Decimal;
      DocumentNo@1500492 : Code[20];
    BEGIN
      // [SCENARIO 163696] Create Sales Order , Calculate TCS and Verify TCS Entries With Customer Discount.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code and Customer Invoice Discount
      Amount := LibraryRandom.RandDec(40000,2);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,NodNocHeader."No.",'',0);
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(50,2));
      CustInvoiceDisc.MODIFY(TRUE);

      // [WHEN] Create Sales Order With Line Discount
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        Amount,TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Line Discount %",CustInvoiceDisc."Discount %");
      SalesLine.MODIFY(TRUE);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyGLEntryCount(DocumentNo,4);
      VerifyTCSEntry(DocumentNo,SalesLine."Document Type"::Invoice,SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesOrderForFA@1500009();
    VAR
      FADepreciationBook@1500003 : Record 5612;
      DepreciationBook@1500002 : Record 5611;
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      TCSEntry@1500000 : Record 16514;
      FixedAsset@1500001 : Record 5600;
      DocumentNo@1500492 : Code[20];
    BEGIN
      // [SCENARIO 163698] Create Sales Order , Calculate TCS and Verify TCS Entries With Line Discount.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      CreateFixedAssetWithDepreciation(DepreciationBook,FADepreciationBook,FixedAsset);

      // [WHEN] Create Sales Order With Line Discount
      CreatePurchaseOrderAndPostForFA(FixedAsset,DepreciationBook.Code);
      CreateSalesOrderForFA(SalesHeader,FixedAsset,NodNocHeader."No.",
        TcsNatureOfCollection.Code,DepreciationBook.Code);
      CalculateTCSForVerification(TCSEntry,0,TCSSetup);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyTCSEntrys(TCSEntry,DocumentNo,SalesHeader."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE CalculateTCSusingSalesOrderForGLAccount@1500020();
    VAR
      AssesseeCode@1500132 : Record 13727;
      NodNocHeader@1500232 : Record 13786;
      TcsNatureOfCollection@1500452 : Record 16507;
      TCSSetup@1500462 : Record 16508;
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      TCSEntry@1500000 : Record 16514;
      DocumentNo@1500492 : Code[20];
    BEGIN
      // [SCENARIO 163697] Create Sales Order , Calculate TCS and Verify TCS Entries With Line Discount.
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Order With Line Discount
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocHeader."No.");
      CreateSalesLine(
        SalesHeader,SalesLine,SalesLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountNo,TcsNatureOfCollection.Code,LibraryRandom.RandDec(40000,2));
      CalculateTCSForVerification(TCSEntry,SalesLine.Amount,TCSSetup);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(SalesHeader."Document Type"::Invoice,DocumentNo,-SalesLine.Amount);
      VerifyTCSEntrys(TCSEntry,DocumentNo,SalesHeader."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE CreateSalesOrderCheckTCSZero@1500018();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      SalesLine@1500005 : Record 37;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163701] TCS - Tax Collection at Source - Check if system is calculating TCS rounded off on each component (TCS amount, surcharge amount, eCess amount) while creating Sales Invoice for the customer with no line
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);

      // [WHEN] Create Sales Order With Line Discount
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        LibraryRandom.RandDec(2000,2),TcsNatureOfCollection.Code);
      SalesLine.CalculateTCS(SalesHeader);
      SalesLine.TESTFIELD("TDS/TCS Amount",0);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] G/L Entry has been created without TCS.
      VerifyGLEntryCount(DocumentNo,2);
      VerifyGLEntry(SalesHeader."Document Type"::Invoice,DocumentNo,-SalesLine.Amount);
    END;

    [Test]
    PROCEDURE CreateSalesOrderCheckTCSAmountInt@1500038();
    VAR
      TCSEntry@1500007 : Record 16514;
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      SalesLine@1500005 : Record 37;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163702] TCS - Tax Collection at Source - Verify if system is calculating TCS rounded off on each component (TCS amount, surcharge amount, eCess amount) while creating Sales Invoice for the customer with one line in chart of account
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,TRUE,FALSE);
      UpdateTCSSetupWithSurchargeZero(TCSSetup);

      // [WHEN] Create Sales Order With Line Discount
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        LibraryRandom.RandInt(400000),TcsNatureOfCollection.Code);
      SalesLine.CalculateTCS(SalesHeader);
      CalculateOnlyTCSForVerification(TCSEntry,SalesLine.Amount,TCSSetup);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(SalesHeader."Document Type"::Invoice,DocumentNo,-SalesLine.Amount);
      VerifyTCSEntrys(TCSEntry,DocumentNo,SalesHeader."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE CreateSalesOrderCheckTCSAmountDec@1500050();
    VAR
      TCSEntry@1500007 : Record 16514;
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      SalesLine@1500005 : Record 37;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163703] TCS - Tax Collection at Source - Verify if system is calculating TCS rounded off on each component (TCS amount, surcharge amount, eCess amount) while creating Sales Invoice for the customer with one line in chart of account
      // [FEATURE] [Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,TRUE,FALSE);
      UpdateTCSSetupWithSurchargeZero(TCSSetup);

      // [WHEN] Create Sales Order With Line Discount
      CreateSalesOrder(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",
        LibraryRandom.RandDec(400000,2),TcsNatureOfCollection.Code);
      SalesLine.CalculateTCS(SalesHeader);
      CalculateOnlyTCSForVerification(TCSEntry,SalesLine.Amount,TCSSetup);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry has been created.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(SalesHeader."Document Type"::Invoice,DocumentNo,-SalesLine.Amount);
      VerifyTCSEntrys(TCSEntry,DocumentNo,SalesHeader."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE CreaeteSalesJournalCheckTCSEntry@1500023();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      GenJournalLine@1500004 : Record 81;
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 163716] TCS - Tax Collection at Source - Check if system is calculating correct TCS round off on each component while raising invoice or receiving advance payment:Invoice in Sales Journal
      // [FEATURE] [TCS Transactions]
      Initialize;

      // [GIVEN] Created NODNOC Header,TCS Nature of Collection,TCS Setup,Assessee Code
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);

      // [WHEN] Create Sales Journal Line and Post
      DocumentNo := CreateSalesJournalLineWithBatch(GenJournalLine,NodNocHeader."No.",TcsNatureOfCollection.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] TCS and GL Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTCS(DocumentNo,-GenJournalLine.Amount);
      VerifyTCSEntry(DocumentNo,GenJournalLine."Document Type"::Invoice,GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      GeneralLedgerSetup.GET;

      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500332();
    VAR
      CompanyInformation@1500911 : Record 79;
      DeductorCategory@1500921 : Record 16498;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesJournalLineWithBatch@1500025(VAR GenJournalLine@1500002 : Record 81;NodNocHeaderNo@1500003 : Code[20];TcsNatureOfCollectionCode@1500004 : Code[10]) : Code[20];
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Sales);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLines(
        GenJournalLine,NodNocHeaderNo,LibraryRandom.RandDec(5000,2),TcsNatureOfCollectionCode,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Party Type"::Customer,LibraryERM.CreateGLAccountNo);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateSalesOrder@1500442(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;DocumentType@1500951 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';CustomerNo@1500961 : Code[20];Amount@1500981 : Decimal;CodeContractor@1500991 : Code[10]);
    VAR
      Item@1500000 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",CodeContractor);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithLocation@1500033(VAR SalesHeader@1500921 : Record 36;DocumentType@1500951 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';CustomerNo@1500961 : Code[20];Amount@1500981 : Decimal;CodeContractor@1500991 : Code[10]) : Code[10];
    VAR
      Location@1500001 : Record 14;
      Item@1500000 : Record 27;
      SalesLine@1500002 : Record 37;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("T.C.A.N. No.",'');
      Location.MODIFY(TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE("Location Code",Location.Code);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",CodeContractor);
      SalesLine.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLines@1500352(VAR GenJournalLine@1500611 : Record 81;PartyCode@1500511 : Code[20];Amount@1500521 : Decimal;CodeContractor@1500531 : Code[10];DocumentType@1500561 : Option;PartyType@1500571 : Option;AccountNo@1500581 : Code[20]) : Code[20];
    BEGIN
      LibraryJournals.CreateGenJournalLineWithBatch(GenJournalLine,DocumentType,GenJournalLine."Account Type"::"G/L Account",
        AccountNo,Amount);
      GenJournalLine.VALIDATE("Party Type",PartyType);
      GenJournalLine.VALIDATE("Party Code",PartyCode);
      GenJournalLine.VALIDATE("TCS Nature of Collection",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateSalesCreditMemo@1500003(VAR SalesHeader@1500000 : Record 36;VAR SalesLine@1500001 : Record 37;Type@1500005 : Option;No@1500006 : Code[20];CustomerNo@1500004 : Code[20];TCSNatureofCollection@1500003 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10000,2));
      SalesLine.VALIDATE("TCS Nature of Collection",TCSNatureofCollection);
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@1500007(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;LineType@1500981 : Option;No@1500001 : Code[20];CodeContractor@1500991 : Code[10];Amount@1500004 : Decimal);
    VAR
      GenProductPostingGroup@1500002 : Record 251;
      GenBusinessPostingGroup@1500000 : Record 250;
      GeneralPostingSetup@1500003 : Record 252;
    BEGIN
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,LineType,No,1);
      SalesLine.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      SalesLine.VALIDATE("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",CodeContractor);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndPostForFA@1500024(VAR FixedAsset@1500002 : Record 5600;DepreciationBookCode@1500003 : Code[10]);
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",FixedAsset."No.",1);
      PurchaseLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderForFA@1500030(VAR SalesHeader@1500000 : Record 36;FixedAsset@1500003 : Record 5600;CustomerNo@1500001 : Code[20];TcsNatureOfCollectionCode@1500004 : Code[10];DepreciationBookCode@1500005 : Code[10]);
    VAR
      SalesLine@1500002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Fixed Asset",FixedAsset."No.",LibraryRandom.RandDec(1,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(5000,2));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollectionCode);
      SalesLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesHeader@1500028(VAR SalesHeader@1500000 : Record 36;NodNocHeaderNo@1500002 : Code[20];LocationCode@1500003 : Code[10];DocumentType@1500004 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocHeaderNo);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesLine@1500035(VAR SalesHeader@1500000 : Record 36;TcsNatureOfCollectionCode@1500003 : Code[10]);
    VAR
      Item@1500002 : Record 27;
      SalesLine@1500001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(40000,2));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollectionCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateTCSForVerification@1500865(VAR TCSEntry@1500006 : Record 16514;Amount@1500001 : Decimal;TCSSetup@1500000 : Record 16508);
    BEGIN
      WITH TCSEntry DO BEGIN
        "TCS Base Amount" := Amount;
        "TCS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."TCS %" * Amount / 100);
        "Surcharge Amount" := LibraryTDS.RoundTCSAmount((TCSSetup."TCS %" * Amount / 100) * (TCSSetup."Surcharge %" / 100));
        "eCESS Amount" := LibraryTDS.RoundTCSAmount(("TCS Amount" + "Surcharge Amount") * TCSSetup."eCESS %" / 100);
        "SHE Cess Amount" := LibraryTDS.RoundTCSAmount(("TCS Amount" + "Surcharge Amount") * TCSSetup."SHE Cess %" / 100);
        "Total TCS Including SHE CESS" :=
          LibraryTDS.RoundTCSAmount("TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount");
      END;
    END;

    LOCAL PROCEDURE CalculateOnlyTCSForVerification@1500032(VAR TCSEntry@1500006 : Record 16514;Amount@1500001 : Decimal;TCSSetup@1500000 : Record 16508);
    BEGIN
      WITH TCSEntry DO BEGIN
        "TCS Base Amount" := Amount;
        "TCS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."TCS %" * Amount / 100);
      END;
    END;

    LOCAL PROCEDURE CreateFixedAssetWithDepreciation@1500017(VAR DepreciationBook@1500000 : Record 5611;VAR FADepreciationBook@1500001 : Record 5612;VAR FixedAsset@1500002 : Record 5600);
    VAR
      FAPostingGroup@1500003 : Record 5606;
    BEGIN
      LibraryERM.CreateFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",TRUE);
      DepreciationBook.MODIFY(TRUE);
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBook.Code);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup.Code);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGLEntry@1500362(VAR GLEntry@1500601 : Record 17;DocumentType@1500611 : Option;DocumentNo@1500621 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    PROCEDURE OpenSalesOrderStatistics@1500029(VAR SalesLine@1500000 : Record 37);
    VAR
      SalesReceivablesSetup@1500001 : Record 311;
      SalesHeader@1500002 : Record 36;
    BEGIN
      SalesReceivablesSetup.GET;
      WITH SalesLine DO BEGIN
        SalesHeader.GET("Document Type","Document No.");
        SalesHeader.CALCFIELDS("Price Inclusive of Taxes");
        IF SalesReceivablesSetup."Calc. Inv. Discount" AND (NOT SalesHeader."Price Inclusive of Taxes") THEN BEGIN
          SalesHeader.CalcInvDiscForHeader;
          COMMIT
        END;
        IF SalesHeader."Price Inclusive of Taxes" THEN BEGIN
          InitStrOrdDetail(SalesHeader);
          GetSalesPriceExclusiveTaxes(SalesHeader);
          UpdateSalesLinesPIT(SalesHeader);
          COMMIT;
        END;

        IF SalesHeader.Structure <> '' THEN BEGIN
          CalculateStructures(SalesHeader);
          AdjustStructureAmounts(SalesHeader);
          UpdateSalesLines(SalesHeader);
        END;
        CalculateTCS(SalesHeader);

        COMMIT;
        PAGE.RUNMODAL(PAGE::"Sales Statistics",SalesHeader);
      END;
    END;

    LOCAL PROCEDURE UpdateTCSSetupWithSurchargeZero@1500042(VAR TCSSetup@1500000 : Record 16508);
    BEGIN
      TCSSetup.VALIDATE("Surcharge %",0);
      TCSSetup.VALIDATE("Surcharge Threshold Amount",0);
      TCSSetup.VALIDATE("eCESS %",0);
      TCSSetup.VALIDATE("SHE Cess %",0);
      TCSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTCANNoInCompanyInfo@1500022(VAR CompanyInformation@1500000 : Record 79);
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("T.C.A.N. No.",'');
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500372(DocumentNo@1500200 : Code[20];DocumentType@1500631 : Option;TCSBaseAmount@1500641 : Decimal);
    VAR
      TCSEntry@1500115 : Record 16514;
    BEGIN
      WITH TCSEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          TCSBaseAmount,"TCS Base Amount",
          GeneralLedgerSetup."TCS Rounding Precision",STRSUBSTNO(AmountErr,TCSBaseAmount));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500001(DocumentNo@1500000 : Code[20];ExpectedCount@1500671 : Integer);
    VAR
      DummyGLEntry@1500002 : Record 17;
      Assert@1500003 : Codeunit 130000;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryWithTCS@1500392(DocumentNo@1500393 : Code[20];ExpectedAmount@1500691 : Decimal);
    VAR
      GLEntry@1500701 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo);
      GLEntry.TESTFIELD(Amount,ExpectedAmount);
    END;

    [HandlerFunctions(SalesCrMemoStatistics)]
    LOCAL PROCEDURE VerifySalesCrMemoStatistics@1500019(SalesLine@1500000 : Record 37;ExpectedAmount@1500001 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ExpectedAmount);
      OpenSalesOrderStatistics(SalesLine);
    END;

    LOCAL PROCEDURE VerifyTCSEntrys@1500078(ExpectedTCSEntryAmounts@1500005 : Record 16514;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      TCSEntry@1500002 : Record 16514;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("Document Type",DocumentType);
      TCSEntry.FINDLAST;

      RoundingPrecision := GeneralLedgerSetup."TCS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."TCS Amount",TCSEntry."TCS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."eCESS Amount",TCSEntry."eCESS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."SHE Cess Amount",TCSEntry."SHE Cess Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."Surcharge Amount",TCSEntry."Surcharge Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge Amount"),TCSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500110(DocumentType@1500000 : Option;DocumentNo@1500101 : Code[20];Amount@1500002 : Decimal);
    VAR
      GLEntry@1500102 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    [ModalPageHandler]
    PROCEDURE SalesCrMemoStatistics@1500026(VAR SalesStatistics@1500000 : TestPage 160);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      SalesStatistics.Amount.ASSERTEQUALS(Value);
    END;

    BEGIN
    END.
  }
}

