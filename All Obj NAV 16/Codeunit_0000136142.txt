OBJECT Codeunit 136142 Service Warehouse Integration
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=rimd;
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempVATPostingSetup@1016 : TEMPORARY Record 325;
      Assert@1003 : Codeunit 130000;
      LibraryInventory@1101 : Codeunit 132201;
      LibraryERMCountryData@1907 : Codeunit 131305;
      LibraryERM@1048 : Codeunit 131300;
      LibrarySales@1009 : Codeunit 130509;
      LibraryService@1022 : Codeunit 131902;
      LibraryWarehouse@1028 : Codeunit 132204;
      ItemNo@1000 : ARRAY [4] OF Code[20];
      SerialItem@1041 : Code[20];
      LotItem@1042 : Code[20];
      LotItemReservation@1046 : Code[20];
      SerialLotItem@1044 : Code[20];
      ServiceItemNo@1013 : Code[20];
      CustomerNo@1001 : Code[20];
      ResourceNo@1023 : Code[20];
      GLAccountNo@1014 : Code[20];
      UsedVariantCode@1026 : ARRAY [2] OF Code[10];
      WhiteLocationCode@1027 : Code[10];
      UsedBinCode@1004 : Code[20];
      WhseTemplate@1012 : Code[10];
      WhseBatch@1007 : Code[10];
      NoSeriesName@1008 : Code[10];
      OldServiceOrderNoSeriesName@1010 : Code[10];
      OldServiceInvoiceNoSeriesName@1011 : Code[10];
      OldServiceShipmentNumbers@1018 : Code[10];
      WhseSourceFilter@1030 : ARRAY [10] OF Code[10];
      OldWhsePostingSetting@1021 : Integer;
      OldRequireShipmentSetting@1024 : Boolean;
      OldOutboundWhseHandlingTime@1020 : DateFormula;
      BasicDataInitialized@1006 : Boolean;
      SetupDataInitialized@1035 : Boolean;
      DefaultLocationCodeForUser@1005 : Code[20];
      OldStockoutWarning@1015 : Boolean;
      OldCreditWarning@1017 : Option;
      ItemJournalTemplateName@1019 : Code[10];
      ItemJournalBatchName@1781 : Code[10];
      Text002@1025 : TextConst 'ENU=The entered information may be disregarded by warehouse operations.';
      ShipmentMethodCode@1031 : Code[10];
      ShippingAgentCode@1032 : Code[10];
      ShippingAgentServicesCode@1033 : Code[10];
      LocationOutboundWhseHandlingTime@1034 : ARRAY [2] OF DateFormula;
      InvSetupOutboundWhseHandlingTime@1037 : ARRAY [2] OF DateFormula;
      ServiceHeaderShippingTime@1038 : ARRAY [2] OF DateFormula;
      SerialNoCode@1039 : Code[10];
      LotNoCode@1040 : Code[10];
      SerialLotCode@1043 : Code[10];
      ServiceLineNo@1045 : Integer;
      ItemTrackingOption@1047 : Integer;

    [Test]
    PROCEDURE WhseShipmentFromOpenOrder@22();
    VAR
      ServiceHeader@1492 : Record 5900;
    BEGIN
      // 2.1
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,2,WhiteLocationCode,0,0,0,0,FALSE);
      CreateWhseShipment(ServiceHeader,FALSE);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE WhseShipmentFromReleased@23();
    VAR
      ServiceHeader@1492 : Record 5900;
    BEGIN
      // 2.2
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,3,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      VerifyWhseShipmentLinesAgainstServiceOrder(ServiceHeader."No.",FALSE); // No date check because the whse shipment header does not have a blank shipment date.
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ReopenFieldsNotModifiable@26();
    VAR
      ServiceHeader@1401 : Record 5900;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // 2.3
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,4,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      LibraryService.ReopenServiceDocument(ServiceHeader);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.FINDFIRST;
      CheckServiceLineNoModification(ServiceLine);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ReopenLinesWithWhseRefCannotBeDeleted@27();
    VAR
      ServiceHeader@1401 : Record 5900;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // 2.4
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,5,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      LibraryService.ReopenServiceDocument(ServiceHeader);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.FINDFIRST;
      ASSERTERROR ServiceLine.DELETE(TRUE);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE CreatePickFromWhseShipmentVerifyPickLines@28();
    VAR
      ServiceHeader@1000 : Record 5900;
      TempWarehouseShipmentLine@1001 : TEMPORARY Record 7321;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1004 : Record 7321;
      WhseShipmentCreatePick@1003 : Report 7318;
    BEGIN
      // 3.1
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,6,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      CollectWarehouseShipmentLines(ServiceHeader."No.",TempWarehouseShipmentLine);
      TempWarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(TempWarehouseShipmentLine."No.");
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      VerifyWhseShptLinesAgainstPick(ServiceHeader."No.",TempWarehouseShipmentLine."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE RegisterPickVerifyRegisteredPick@31();
    VAR
      ServiceHeader@1400 : Record 5900;
      TempWarehouseShipmentLine@1004 : TEMPORARY Record 7321;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
      WhseShipmentCreatePick@1000 : Report 7318;
    BEGIN
      // 3.2
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,7,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      CollectWarehouseShipmentLines(ServiceHeader."No.",TempWarehouseShipmentLine);
      TempWarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(TempWarehouseShipmentLine."No.");
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      RegisterPick(TempWarehouseShipmentLine."No.");
      VerifyWhseShptLinesAgainstRegisteredPick(ServiceHeader."No.",TempWarehouseShipmentLine."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE PostWhseShipmentAsShip@14();
    VAR
      ServiceHeader@1005 : Record 5900;
      TempWarehouseShipmentLine@1004 : TEMPORARY Record 7321;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
      WhseShipmentCreatePick@1001 : Report 7318;
      WhsePostShipment@1006 : Codeunit 5763;
    BEGIN
      // 4.1
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,8,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      CollectWarehouseShipmentLines(ServiceHeader."No.",TempWarehouseShipmentLine);
      TempWarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(TempWarehouseShipmentLine."No.");
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      RegisterPick(TempWarehouseShipmentLine."No.");
      VerifyWhseShptLinesAgainstRegisteredPick(ServiceHeader."No.",TempWarehouseShipmentLine."No.");
      WhsePostShipment.SetPostingSettings(FALSE); // Post as ship: Invoice = FALSE
      WhsePostShipment.RUN(WarehouseShipmentLine);
      // Verify: Non-posted whse shipment is deleted
      Assert.IsFalse(WarehouseShipmentHeader.GET(TempWarehouseShipmentLine."No."),'Whse Shipment Header has not been deleted');
      // Verify: Posted whse shipment is created
      VerifyPostedWhseShipmentHeaderExists(ServiceHeader."No.");
      // Verify: Posted Service Shipment is created
      VerifyPostedServiceShipmentExists(ServiceHeader."No.");
      // Verify that service lines are correct regarding Qty shipped on the service lines
      VerifyServiceLinesAreShipped(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE PostWhseShipmentAsInvoice@18();
    VAR
      ServiceHeader@1006 : Record 5900;
      TempWarehouseShipmentLine@1005 : TEMPORARY Record 7321;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseShipmentLine@1003 : Record 7321;
      TempServiceLine@1007 : TEMPORARY Record 5902;
      WhseShipmentCreatePick@1002 : Report 7318;
      WhsePostShipment@1000 : Codeunit 5763;
    BEGIN
      // 4.2
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,9,WhiteLocationCode,0,0,0,0,FALSE);
      ServiceHeader.VALIDATE("Posting Date",WORKDATE);
      ServiceHeader.MODIFY(TRUE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      CollectServiceLines(ServiceHeader."No.",TempServiceLine);
      CollectWarehouseShipmentLines(ServiceHeader."No.",TempWarehouseShipmentLine);
      TempWarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(TempWarehouseShipmentLine."No.");
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      RegisterPick(TempWarehouseShipmentLine."No.");
      VerifyWhseShptLinesAgainstRegisteredPick(ServiceHeader."No.",TempWarehouseShipmentLine."No.");
      WhsePostShipment.SetPostingSettings(TRUE); // Post as ship: Invoice = TRUE
      WhsePostShipment.RUN(WarehouseShipmentLine);
      // Verify that service lines are correct regarding Qty invoiced on the service lines
      VerifyServiceLinesAreInvoiced(ServiceHeader."No.",0);
      // Verify that a service invoice exists with correct quantities
      VerifyServiceInvoice(ServiceHeader."No.",TempServiceLine,0);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE PostWhseShipmentLessQtyToShip@60();
    VAR
      ServiceHeader@1008 : Record 5900;
      TempWarehouseShipmentLine@1007 : TEMPORARY Record 7321;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1005 : Record 7321;
      TempServiceLine@1003 : TEMPORARY Record 5902;
      WhseShipmentCreatePick@1000 : Report 7318;
      WhsePostShipment@1001 : Codeunit 5763;
    BEGIN
      // 4.3
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      CollectServiceLines(ServiceHeader."No.",TempServiceLine);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      CollectWarehouseShipmentLines(ServiceHeader."No.",TempWarehouseShipmentLine);
      TempWarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(TempWarehouseShipmentLine."No.");
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      RegisterPick(TempWarehouseShipmentLine."No.");
      ReduceWhseShipmentLineQtyToShip(TempWarehouseShipmentLine,7);  // For all lines: Reduce quantity to ship by 7
      WhsePostShipment.SetPostingSettings(TRUE); // Post as ship: Invoice = TRUE
      WhsePostShipment.RUN(WarehouseShipmentLine);
      // Verify that service lines are correct regarding Qty invoiced on the service lines
      VerifyServiceLinesAreInvoiced(ServiceHeader."No.",7);
      // Verify that a service invoice exists with correct quantities
      VerifyServiceInvoice(ServiceHeader."No.",TempServiceLine,7);
      // Posted whse shipment header:
      VerifyPostedWhseShipmentHeaderExists(ServiceHeader."No.");
      // Posted whse shipment lines:
      VerifyPostedWhseShipmentLines(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    [HandlerFunctions(ServiceLinesModalFormHandler,MsgHandlerWhseOperationsRequired)]
    PROCEDURE ServiceLineBlankLocationCode@59();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceOrderTP@1001 : TestPage 5900;
    BEGIN
      // 4.4
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,'',0,0,0,0,FALSE);
      ServiceOrderTP.OPENNEW;
      ServiceOrderTP.GOTORECORD(ServiceHeader);
      ServiceOrderTP.ServItemLines."Service Lines".INVOKE;
    END;

    [Test]
    PROCEDURE PullReleasedServiceOrder@50();
    VAR
      ServiceHeader@1000 : Record 5900;
      WarehouseShipmentHeader@1003 : Record 7320;
      LibraryWarehouse@1002 : Codeunit 132204;
    BEGIN
      // 5.1
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader."Shipment Date" := 0D;
      WarehouseShipmentHeader.MODIFY;
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      PullScenarioVerifyWhseRqst(ServiceHeader."No.",WarehouseShipmentHeader);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE PullReleasedServiceOrderVerifyShipmentLines@52();
    VAR
      ServiceHeader@1000 : Record 5900;
      WarehouseShipmentHeader@1003 : Record 7320;
      LibraryWarehouse@1002 : Codeunit 132204;
    BEGIN
      // 5.1, 5.2
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader."Shipment Date" := 0D;
      WarehouseShipmentHeader.MODIFY;
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      PullScenarioVerifyWhseRqst(ServiceHeader."No.",WarehouseShipmentHeader);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE UseFiltersToGetSourceDocsWithoutService@64();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.3
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      ASSERTERROR RunGetSourceBatch(WhseSourceFilter[1],WarehouseShipmentHeader); // Expected error: "There are no Warehouse Shipment Lines created."
      CleanSetupData;
    END;

    [Test]
    PROCEDURE UseFiltersToGetSourceDocsWithService1@74();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.4
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 2 (incl services):
      RunGetSourceBatch(WhseSourceFilter[2],WarehouseShipmentHeader);
      // Verify that line exists:
      VerifyWhseShptLineExistence(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE UseFiltersToGetSourceDocsWithService2@73();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.5
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 3 (incl services but without customer no. in range):
      ASSERTERROR RunGetSourceBatch(WhseSourceFilter[3],WarehouseShipmentHeader); // Expected error: "There are no Warehouse Shipment Lines created."
      CleanSetupData;
    END;

    [Test]
    PROCEDURE UseFiltersToGetSourceDocsWithService3@75();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.6
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 4 (incl services, with customer no. filter CustomerNo..):
      RunGetSourceBatch(WhseSourceFilter[4],WarehouseShipmentHeader);
      // Verify that line exists:
      VerifyWhseShptLineExistence(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShipmentMethodCodeFilterWithoutLines@58();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.7
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      ServiceHeader."Shipment Method Code" := ShipmentMethodCode;
      ServiceHeader.MODIFY;
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 5
      ASSERTERROR RunGetSourceBatch(WhseSourceFilter[5],WarehouseShipmentHeader); // Expected error: "There are no Warehouse Shipment Lines created."
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShipmentMethodCodeFilterWithLines@68();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.8
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 6
      RunGetSourceBatch(WhseSourceFilter[6],WarehouseShipmentHeader);
      // Verify that line exists:
      VerifyWhseShptLineExistence(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShippingAgentCodeFilterWithoutLines@69();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.9
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 7
      ASSERTERROR RunGetSourceBatch(WhseSourceFilter[7],WarehouseShipmentHeader); // Expected error: "There are no Warehouse Shipment Lines created."
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShippingAgentCodeFilterWithLines@71();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.10
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 8
      RunGetSourceBatch(WhseSourceFilter[8],WarehouseShipmentHeader);
      // Verify that line exists:
      VerifyWhseShptLineExistence(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShippingAgentServiceFilterWithoutLines@72();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.11
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 9
      ASSERTERROR RunGetSourceBatch(WhseSourceFilter[9],WarehouseShipmentHeader); // Expected error: "There are no Warehouse Shipment Lines created."
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ShippingAgentServiceFilterWithLines@76();
    VAR
      ServiceHeader@1003 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      LibraryWarehouse@1000 : Codeunit 132204;
    BEGIN
      // 5.12
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,10,WhiteLocationCode,0,0,0,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // Create empty shipment:
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",WhiteLocationCode);
      WarehouseShipmentHeader.MODIFY;
      // Get source documents with source filter 10
      RunGetSourceBatch(WhseSourceFilter[10],WarehouseShipmentHeader);
      // Verify that line exists:
      VerifyWhseShptLineExistence(ServiceHeader."No.");
      CleanSetupData;
    END;

    [Test]
    PROCEDURE DueDateShipmentDateCheckHandlingTimeWithoutLocation@78();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // 7.1
      CleanSetupData;
      CheckInit;
      EVALUATE(ServiceHeaderShippingTime[1],'<2D>');
      EVALUATE(InvSetupOutboundWhseHandlingTime[2],'<-7D>');
      ServiceLine.SuspendStatusCheck(TRUE);
      ServiceLine."Needed by Date" := WORKDATE;
      ServiceLine."Shipping Time" := ServiceHeaderShippingTime[1];
      Assert.AreEqual(
        CALCDATE(InvSetupOutboundWhseHandlingTime[2],ServiceLine.GetDueDate),ServiceLine.GetShipmentDate,
        'Service Line shipment date calculation without location code');
      CleanSetupData;
    END;

    [Test]
    PROCEDURE UnitTestTabf5900Field27@53();
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      ServiceHeader.INIT;
      ServiceHeader."Release Status" := ServiceHeader."Release Status"::"Released to Ship";
      ASSERTERROR ServiceHeader.VALIDATE("Shipment Method Code",'');
    END;

    [Test]
    [HandlerFunctions(ServiceLinesOpenItemTracking,ServiceLinesSelectItemTracking,ServiceLinesAcceptSelectedItemTracking)]
    PROCEDURE ServiceOrderWithItemTracking@51();
    VAR
      ServiceHeader@1000 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1003 : Record 7321;
      TempReservationEntryT5902@1300 : TEMPORARY Record 337;
      WhseShipmentCreatePick@1004 : Report 7318;
      WhsePostShipment@1006 : Codeunit 5763;
      WhseShipmentNo@1005 : Code[20];
    BEGIN
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,0,WhiteLocationCode,10,10,10,0,TRUE);
      ServiceHeader.FIND;
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      WhseShipmentNo := GetWhseShipmentNo(ServiceHeader."No.");
      // Check whse shipment:
      // Check item tracking on the whse shipment lines:
      CollectItemTrackingReservationEntries(ServiceHeader."No.",TempReservationEntryT5902);
      CompareItemTrackingT5900vsT7321(WhseShipmentNo,TempReservationEntryT5902);

      WarehouseShipmentHeader.GET(WhseShipmentNo);
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      VerifyServiceOrderLinesAgainstPickItemTracking(WhseShipmentNo,TempReservationEntryT5902);
      // Register pick, validate whse entries:
      RegisterPick(WhseShipmentNo);
      // Validate item tracking for whse entries:
      VerifyT6550T337(WhseShipmentNo,TempReservationEntryT5902);
      WhsePostShipment.SetPostingSettings(FALSE); // Post as ship: Invoice = FALSE
      WhsePostShipment.RUN(WarehouseShipmentLine);
      // Verify item ledger entries:
      VerifyT32T337(ServiceHeader."No.",TempReservationEntryT5902);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE ServiceOrderWithoutItemTracking@92();
    VAR
      ServiceHeader@1000 : Record 5900;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1003 : Record 7321;
      TempWhseActivityLine@1006 : TEMPORARY Record 5767;
      TempWhseItemTrackingLine@1007 : TEMPORARY Record 6550;
      WhseShipmentCreatePick@1004 : Report 7318;
      WhsePostShipment@1008 : Codeunit 5763;
      WhseShipmentNo@1005 : Code[20];
    BEGIN
      CleanSetupData;
      CheckInit;
      CreateServiceOrder(ServiceHeader,0,WhiteLocationCode,5,5,5,0,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      WhseShipmentNo := GetWhseShipmentNo(ServiceHeader."No.");
      WarehouseShipmentHeader.GET(WhseShipmentNo);
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;
      CLEAR(WhseShipmentCreatePick);
      // Fill out whse pick lines:
      GetPick(WhseShipmentNo,TempWhseActivityLine);
      // Assign serial and lot numbers to the pick
      AssignSerialAndLotToPick(TempWhseActivityLine,5,5);
      RegisterPick(WhseShipmentNo);
      // Verify whse shipment lines item tracking (TAB6550) against registered pick lines (TAB5773)
      CollectWhseShipmentItemTrackingLines(WhseShipmentNo,TempWhseItemTrackingLine);
      VerifyT6550T5773(ServiceHeader."No.",TempWhseItemTrackingLine);
      // Verify service order item tracking:
      VerifyT337T6550(ServiceHeader."No.",TempWhseItemTrackingLine);
      // Post whse shipment:
      WhsePostShipment.SetPostingSettings(FALSE); // Post as ship: Invoice = FALSE
      WhsePostShipment.RUN(WarehouseShipmentLine);
      // Verify posted service shipment item tracking
      VerifyT32T6550(ServiceHeader."No.",TempWhseItemTrackingLine);
    END;

    [Test]
    [HandlerFunctions(ServiceLinesOpenItemTracking2,ServiceLinesSelectItemTracking,ServiceLinesAcceptSelectedItemTracking,ServiceLinesReserveConfirm,ServiceLinesReserveCurrentLine)]
    PROCEDURE ServiceOrderItemTrackingReservation@103();
    VAR
      ServiceHeader@1000 : Record 5900;
      ReservationEntry@1009 : Record 337;
      ServiceOrderTP@1003 : TestPage 5900;
      WhseShipmentNo@1005 : Code[20];
    BEGIN
      CleanSetupData;
      CheckInit;
      ItemTrackingOption := 1;
      // Create order
      CreateServiceOrder(ServiceHeader,0,WhiteLocationCode,0,0,0,5,TRUE);
      // Reserve against item ledger entry:
      ItemTrackingOption := 2;
      ServiceOrderTP.OPENNEW;
      ServiceOrderTP.GOTORECORD(ServiceHeader);
      ServiceOrderTP.ServItemLines."Service Lines".INVOKE;
      // Try to create pick for another order - error expected;
      CLEAR(ServiceHeader);
      CreateServiceOrder(ServiceHeader,0,WhiteLocationCode,0,0,0,5,FALSE);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWhseShipment(ServiceHeader,TRUE);
      WhseShipmentNo := GetWhseShipmentNo(ServiceHeader."No.");
      TryCreatePick(WhseShipmentNo,TRUE);
      // Unreserve:
      ReservationEntry.FINDLAST;
      ReservationEntry.DELETE;
      ReservationEntry.FINDLAST;
      ReservationEntry."Reservation Status" := ReservationEntry."Reservation Status"::Surplus;
      ReservationEntry.MODIFY;
      // Now it should be possible to pick:
      TryCreatePick(WhseShipmentNo,FALSE);
      CleanSetupData;
    END;

    [Test]
    PROCEDURE SalesReturnOrdersFieldTest@105();
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        ValidateWhseSourceFilterField(Type::Inbound,1,TRUE,FALSE);
        ValidateWhseSourceFilterField(Type::Inbound,1,FALSE,TRUE);
      END;
    END;

    [Test]
    PROCEDURE PurchaseOrdersFieldTest@106();
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        ValidateWhseSourceFilterField(Type::Inbound,2,TRUE,FALSE);
        ValidateWhseSourceFilterField(Type::Inbound,2,FALSE,TRUE);
      END;
    END;

    [Test]
    PROCEDURE PurchaseReturnOrdersFieldTest@107();
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        ValidateWhseSourceFilterField(Type::Outbound,3,TRUE,FALSE);
        ValidateWhseSourceFilterField(Type::Outbound,3,FALSE,TRUE);
      END;
    END;

    [Test]
    PROCEDURE InboundTransfersFieldTest@109();
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        ValidateWhseSourceFilterField(Type::Inbound,4,TRUE,FALSE);
        ValidateWhseSourceFilterField(Type::Inbound,4,FALSE,TRUE);
      END;
    END;

    [Test]
    PROCEDURE OutboundTransfersFieldTest@110();
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        ValidateWhseSourceFilterField(Type::Outbound,5,TRUE,FALSE);
        ValidateWhseSourceFilterField(Type::Outbound,5,FALSE,TRUE);
      END;
    END;

    LOCAL PROCEDURE ValidateWhseSourceFilterField@113(InbOutb@1000 : 'Inbound,Outbound';FieldToValidate@1002 : Integer;ValidateWithValue@1004 : Boolean;ErrorExpected@1001 : Boolean);
    VAR
      MyRecRef@1003 : RecordRef;
      MyFieldRef@1005 : FieldRef;
      i@1006 : Integer;
    BEGIN
      MyRecRef.OPEN(DATABASE::"Warehouse Source Filter");
      MyFieldRef := MyRecRef.FIELD(GetFieldNo(0));
      MyFieldRef.VALUE(InbOutb);
      FOR i := 1 TO 7 DO BEGIN
        MyFieldRef := MyRecRef.FIELD(GetFieldNo(i));
        IF i = FieldToValidate THEN
          MyFieldRef.VALUE(ValidateWithValue)
        ELSE
          MyFieldRef.VALUE(FALSE)
      END;
      MyFieldRef := MyRecRef.FIELD(GetFieldNo(FieldToValidate));
      IF ErrorExpected THEN
        ASSERTERROR MyFieldRef.VALIDATE
      ELSE
        MyFieldRef.VALIDATE;
      MyRecRef.CLOSE;
    END;

    LOCAL PROCEDURE GetFieldNo@124(EnumVal@1000 : Integer) : Integer;
    VAR
      WarehouseSourceFilter@1001 : Record 5771;
    BEGIN
      CASE EnumVal OF
        0:
          EXIT(WarehouseSourceFilter.FIELDNO(Type));
        1:
          EXIT(WarehouseSourceFilter.FIELDNO("Sales Return Orders"));
        2:
          EXIT(WarehouseSourceFilter.FIELDNO("Purchase Orders"));
        3:
          EXIT(WarehouseSourceFilter.FIELDNO("Purchase Return Orders"));
        4:
          EXIT(WarehouseSourceFilter.FIELDNO("Inbound Transfers"));
        5:
          EXIT(WarehouseSourceFilter.FIELDNO("Outbound Transfers"));
        6:
          EXIT(WarehouseSourceFilter.FIELDNO("Service Orders"));
        7:
          EXIT(WarehouseSourceFilter.FIELDNO("Sales Orders"));
      END;
    END;

    LOCAL PROCEDURE CreateServiceOrder@6(VAR ServiceHeader@1402 : Record 5900;Qty@1004 : Decimal;LocCode@1001 : Code[10];QtySerial@1008 : Decimal;QtyLot@1009 : Decimal;QtySerialLot@1010 : Decimal;QtyLotReserv@1012 : Decimal;InsertTrackingInfo@1011 : Boolean);
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      i@1005 : Integer;
      UOMCode@1006 : Code[10];
      UOMText@1007 : Text[10];
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,1,CustomerNo); // 1 = Order
      COMMIT;
      ServiceHeader."Shipment Method Code" := ShipmentMethodCode;
      ServiceHeader."Shipping Agent Code" := ShippingAgentCode;
      ServiceHeader."Shipping Agent Service Code" := ShippingAgentServicesCode;
      ServiceHeader."Shipping Time" := ServiceHeaderShippingTime[1];
      ServiceHeader.MODIFY;

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      IF Qty <> 0 THEN BEGIN // Item without item tracking
        FOR i := 1 TO ARRAYLEN(ItemNo) DO BEGIN
          LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,1,ItemNo[i]);
          ServiceLine."Service Item Line No." := ServiceItemLine."Line No.";
          ValidateLocationCode(ServiceLine,LocCode);
          ServiceLine.VALIDATE(Quantity,Qty + i);
          ServiceLine.VALIDATE("Variant Code",UsedVariantCode[1]);
          ServiceLine.MODIFY;
        END;
        UOMCode := ServiceLine."Unit of Measure Code";
        UOMText := ServiceLine."Unit of Measure";
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,2,ResourceNo);
        ValidateLocationCode(ServiceLine,LocCode);
        ServiceLine.VALIDATE(Quantity,Qty);
        ServiceLine.MODIFY;
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,4,GLAccountNo);
        ValidateLocationCode(ServiceLine,LocCode);
        ServiceLine.VALIDATE(Quantity,Qty);
        ServiceLine."Unit of Measure Code" := UOMCode;
        ServiceLine."Unit of Measure" := UOMText;
        ServiceLine.MODIFY;
      END;

      IF QtySerial <> 0 THEN BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,1,SerialItem);
        ServiceLine."Service Item Line No." := ServiceItemLine."Line No.";
        ValidateLocationCode(ServiceLine,LocCode);
        ServiceLine.VALIDATE(Quantity,QtySerial);
        ServiceLine.MODIFY;
        IF InsertTrackingInfo THEN BEGIN
          ServiceLineNo := 1;
          AddItemTrackingForServiceLine(ServiceLine);
        END;
      END;
      IF QtyLot <> 0 THEN BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,1,LotItem);
        ServiceLine."Service Item Line No." := ServiceItemLine."Line No.";
        ValidateLocationCode(ServiceLine,LocCode);
        ServiceLine.VALIDATE(Quantity,QtyLot);
        ServiceLine.MODIFY;
        IF InsertTrackingInfo THEN BEGIN
          ServiceLineNo := 2;
          AddItemTrackingForServiceLine(ServiceLine);
        END;
      END;
      IF QtySerialLot <> 0 THEN BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,1,SerialLotItem);
        ServiceLine."Service Item Line No." := ServiceItemLine."Line No.";
        ValidateLocationCode(ServiceLine,LocCode);
        ServiceLine.VALIDATE(Quantity,QtySerialLot);
        ServiceLine.MODIFY;
        IF InsertTrackingInfo THEN BEGIN
          ServiceLineNo := 3;
          AddItemTrackingForServiceLine(ServiceLine);
        END;
      END;
      IF QtyLotReserv <> 0 THEN BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,1,LotItemReservation);
        ServiceLine."Service Item Line No." := ServiceItemLine."Line No.";
        ValidateLocationCode(ServiceLine,LocCode);
        ServiceLine.VALIDATE(Quantity,QtyLotReserv);
        ServiceLine.MODIFY;
        IF InsertTrackingInfo THEN BEGIN
          ServiceLineNo := 1;
          AddItemTrackingForServiceLine(ServiceLine);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateWhseShipment@11(ServiceHeader@1000 : Record 5900;CreateWhseShpmntAllowed@1003 : Boolean);
    BEGIN
      IF CreateWhseShpmntAllowed THEN
        LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader)
      ELSE
        ASSERTERROR LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
    END;

    LOCAL PROCEDURE VerifyWhseShipmentLinesAgainstServiceOrder@9(ServiceOrderNo@1000 : Code[20];DateCheck@1003 : Boolean);
    VAR
      TempServiceLine@1001 : TEMPORARY Record 5902;
      TempWarehouseShipmentLine@1002 : TEMPORARY Record 7321;
    BEGIN
      // 7.1
      CollectServiceLines(ServiceOrderNo,TempServiceLine);
      CollectWarehouseShipmentLines(ServiceOrderNo,TempWarehouseShipmentLine);
      CompareLineSets(TempServiceLine,TempWarehouseShipmentLine);
      IF DateCheck THEN
        VerifyWhseShipmentDueDateShipmentDate(TempServiceLine,TempWarehouseShipmentLine);
    END;

    LOCAL PROCEDURE CollectServiceLines@10(ServiceOrderNo@1000 : Code[20];VAR TempServiceLine@1001 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      TempServiceLine.DELETEALL;
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      Assert.IsFalse(ServiceLine.ISEMPTY,'No Service lines created on the service order');
      ServiceLine.FINDSET;
      REPEAT
        TempServiceLine := ServiceLine;
        TempServiceLine.INSERT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectWarehouseShipmentLines@13(ServiceOrderNo@1000 : Code[20];VAR TempWarehouseShipmentLine@1001 : TEMPORARY Record 7321);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      TempWarehouseShipmentLine.DELETEALL;
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Service Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",1); // 1 = Order
      WarehouseShipmentLine.SETRANGE("Source No.",ServiceOrderNo);
      Assert.IsFalse(WarehouseShipmentLine.ISEMPTY,'No warehouse lines exist for the service order');
      WarehouseShipmentLine.FINDSET;
      REPEAT
        TempWarehouseShipmentLine := WarehouseShipmentLine;
        TempWarehouseShipmentLine.INSERT;
      UNTIL WarehouseShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetWhseShipmentNo@85(ServiceOrderNo@1000 : Code[20]) : Code[20];
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Service Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",1); // 1 = Order
      WarehouseShipmentLine.SETRANGE("Source No.",ServiceOrderNo);
      Assert.IsTrue(WarehouseShipmentLine.FINDFIRST,'No Whse shipment lines found for the serviceorder.');
      EXIT(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE CollectPostedWarehouseShipmentLines@57(ServiceOrderNo@1000 : Code[20];VAR TempPostedWhseShipmentLine@1002 : TEMPORARY Record 7323);
    VAR
      PostedWhseShipmentLine@1001 : Record 7323;
    BEGIN
      TempPostedWhseShipmentLine.DELETEALL;
      PostedWhseShipmentLine.SETRANGE("Source Type",DATABASE::"Service Line");
      PostedWhseShipmentLine.SETRANGE("Source Subtype",1);
      PostedWhseShipmentLine.SETRANGE("Source No.",ServiceOrderNo);
      IF PostedWhseShipmentLine.FINDSET THEN
        REPEAT
          TempPostedWhseShipmentLine := PostedWhseShipmentLine;
          TempPostedWhseShipmentLine.INSERT;
        UNTIL PostedWhseShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CompareLineSets@15(VAR TempServiceLine@1000 : TEMPORARY Record 5902;VAR TempWarehouseShipmentLine@1001 : TEMPORARY Record 7321);
    BEGIN
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Item);
      Assert.AreEqual(
        TempWarehouseShipmentLine.COUNT,TempServiceLine.COUNT,
        'The numbers of service lines of type Item and warehouse shipment lines do not match');
      TempServiceLine.FINDSET;
      TempWarehouseShipmentLine.FINDSET;
      REPEAT
        CompareLineFields(TempServiceLine,TempWarehouseShipmentLine);
      UNTIL (TempServiceLine.NEXT = 0) AND (TempWarehouseShipmentLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CompareLineFields@16(TempServiceLine@1000 : TEMPORARY Record 5902;TempWarehouseShipmentLine@1001 : TEMPORARY Record 7321);
    BEGIN
      Assert.AreEqual(
        TempServiceLine.Quantity,TempWarehouseShipmentLine.Quantity,GetErrMsg('Service line quantity','Warehouse Line Quantity'));
      Assert.AreEqual(
        TempServiceLine."Location Code",
        TempWarehouseShipmentLine."Location Code",
        GetErrMsg(TempServiceLine.FIELDCAPTION("Location Code"),TempWarehouseShipmentLine.FIELDCAPTION("Location Code")));
    END;

    LOCAL PROCEDURE GetErrMsg@17(FieldName1@1000 : Text[30];FieldName2@1001 : Text[30]) : Text[100];
    BEGIN
      EXIT(STRSUBSTNO('%1 and %2 do not match',FieldName1,FieldName2));
    END;

    LOCAL PROCEDURE CleanSetupData@8();
    VAR
      InventorySetup@1000 : Record 313;
      ServiceMgtSetup@1001 : Record 5911;
      SalesSetup@1005 : Record 311;
      WhseJournalBatch@1003 : Record 7310;
      VATPostingSetup@1006 : Record 325;
      ItemJournalBatch@1007 : Record 233;
      WhseSetup@1002 : Record 5769;
      WarehouseSourceFilter@1008 : Record 5771;
      i@1009 : Integer;
    BEGIN
      IF NOT SetupDataInitialized THEN
        EXIT;

      InventorySetup.GET;
      InventorySetup."Outbound Whse. Handling Time" := OldOutboundWhseHandlingTime;
      InventorySetup.MODIFY;

      SalesSetup.GET;
      SalesSetup."Stockout Warning" := OldStockoutWarning;
      SalesSetup."Credit Warnings" := OldCreditWarning;
      SalesSetup.MODIFY;

      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Service Order Nos.",OldServiceOrderNoSeriesName);
      ServiceMgtSetup.VALIDATE("Posted Service Invoice Nos.",OldServiceInvoiceNoSeriesName);
      ServiceMgtSetup.VALIDATE("Posted Service Shipment Nos.",OldServiceShipmentNumbers);
      ServiceMgtSetup.MODIFY;

      IF WhseJournalBatch.GET(WhseTemplate,WhseBatch) THEN
        WhseJournalBatch.DELETE(TRUE);

      IF ItemJournalBatch.GET(ItemJournalTemplateName,ItemJournalBatchName) THEN
        ItemJournalBatch.DELETE(TRUE);

      IF TempVATPostingSetup.FINDSET THEN
        REPEAT
          VATPostingSetup.GET(TempVATPostingSetup."VAT Bus. Posting Group",'');
          VATPostingSetup.DELETE(TRUE);
        UNTIL TempVATPostingSetup.NEXT = 0;
      TempVATPostingSetup.DELETEALL;

      WhseSetup.GET;
      WhseSetup."Shipment Posting Policy" := OldWhsePostingSetting;
      WhseSetup."Require Shipment" := OldRequireShipmentSetting;
      WhseSetup.MODIFY;

      FOR i := 1 TO ARRAYLEN(WhseSourceFilter) DO
        WITH WarehouseSourceFilter DO
          IF GET(Type::Outbound,WhseSourceFilter[i]) THEN
            DELETE(TRUE);

      HandleShippingData(ShipmentMethodCode,ShippingAgentCode,ShippingAgentServicesCode,FALSE);  // Delete

      SetupDataInitialized := FALSE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustomer@1();
    BEGIN
      CustomerNo := LibrarySales.CreateCustomerNo;
    END;

    LOCAL PROCEDURE CreateTestNoSeriesBackupData@5();
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLine@1001 : Record 309;
      InventorySetup@1002 : Record 313;
      ServiceMgtSetup@1004 : Record 5911;
      SalesSetup@1008 : Record 311;
      WarehouseEmployee@1007 : Record 7301;
      VATPostingSetup@1003 : Record 325;
      VATBusinessPostingGroup@1009 : Record 323;
      TempVATPostingSetup2@1010 : TEMPORARY Record 325;
      WhseSetup@1011 : Record 5769;
      i@1012 : Integer;
    BEGIN
      // No. series
      NoSeriesName := 'SERVWHSE';
      CLEAR(NoSeries);
      NoSeries.INIT;
      NoSeries.Code := NoSeriesName;
      NoSeries.Description := NoSeriesName;
      NoSeries."Default Nos." := TRUE;
      IF NoSeries.INSERT THEN BEGIN
        NoSeriesLine.INIT;
        NoSeriesLine."Series Code" := NoSeriesName;
        NoSeriesLine."Line No." := 10000;
        NoSeriesLine."Starting No." := 'SW00001';
        NoSeriesLine."Ending No." := 'SW99999';
        NoSeriesLine."Increment-by No." := 1;
        NoSeriesLine.INSERT;
      END;

      // Setup data
      EVALUATE(ServiceHeaderShippingTime[1],'<2D>');
      EVALUATE(LocationOutboundWhseHandlingTime[1],'<3D>');
      EVALUATE(InvSetupOutboundWhseHandlingTime[1],'<7D>');
      EVALUATE(ServiceHeaderShippingTime[2],'<-2D>');
      EVALUATE(LocationOutboundWhseHandlingTime[2],'<-3D>');
      EVALUATE(InvSetupOutboundWhseHandlingTime[2],'<-7D>');

      InventorySetup.GET;
      OldOutboundWhseHandlingTime := InventorySetup."Outbound Whse. Handling Time";
      InventorySetup."Outbound Whse. Handling Time" := InvSetupOutboundWhseHandlingTime[1];
      InventorySetup.MODIFY;

      ServiceMgtSetup.GET;
      OldServiceOrderNoSeriesName := ServiceMgtSetup."Service Order Nos.";
      OldServiceInvoiceNoSeriesName := ServiceMgtSetup."Posted Service Invoice Nos.";
      OldServiceShipmentNumbers := ServiceMgtSetup."Posted Service Shipment Nos.";
      ServiceMgtSetup."Service Order Nos." := NoSeriesName;
      ServiceMgtSetup."Posted Service Invoice Nos." := NoSeriesName;
      ServiceMgtSetup."Posted Service Shipment Nos." := NoSeriesName;
      ServiceMgtSetup.MODIFY;

      SalesSetup.GET;
      OldStockoutWarning := SalesSetup."Stockout Warning";
      SalesSetup."Stockout Warning" := FALSE;
      OldCreditWarning := SalesSetup."Credit Warnings";
      SalesSetup."Credit Warnings" := SalesSetup."Credit Warnings"::"No Warning";
      SalesSetup.MODIFY;

      IF DefaultLocationCodeForUser <> '' THEN
        WITH WarehouseEmployee DO BEGIN
          SETRANGE("User ID",USERID);
          MODIFYALL(Default,FALSE);
          GET(USERID,DefaultLocationCodeForUser);
          Default := TRUE;
          MODIFY;
        END;

      TempVATPostingSetup.DELETEALL;
      TempVATPostingSetup2.DELETEALL;
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>%1','');
      VATPostingSetup.SETFILTER("Sales VAT Account",'<>%1','');
      IF VATPostingSetup.FINDFIRST THEN BEGIN
        TempVATPostingSetup2 := VATPostingSetup;
        TempVATPostingSetup2.INSERT;
        CLEAR(VATPostingSetup);
        IF VATBusinessPostingGroup.FINDSET THEN
          REPEAT
            VATPostingSetup := TempVATPostingSetup2;
            VATPostingSetup."VAT Bus. Posting Group" := VATBusinessPostingGroup.Code;
            VATPostingSetup."VAT Prod. Posting Group" := '';
            IF VATPostingSetup.INSERT THEN BEGIN
              TempVATPostingSetup := VATPostingSetup;
              TempVATPostingSetup.INSERT;
            END;
          UNTIL VATBusinessPostingGroup.NEXT = 0;
      END;
      WhseSetup.GET;
      OldWhsePostingSetting := WhseSetup."Shipment Posting Policy";
      OldRequireShipmentSetting := WhseSetup."Require Shipment";
      WhseSetup."Require Shipment" := TRUE;
      WhseSetup."Shipment Posting Policy" := WhseSetup."Shipment Posting Policy"::"Stop and show the first posting error";
      WhseSetup.MODIFY;

      // Source filter data
      FOR i := 1 TO ARRAYLEN(WhseSourceFilter) DO
        WhseSourceFilter[i] := 'C136142_' + FORMAT(i);

      // Shipping Agent code (TAB105), Shipping Agent Services Code (TAB5794), Shipment Method (TAB10):
      ShipmentMethodCode := 'SMC001';
      ShippingAgentCode := 'SAC001';
      ShippingAgentServicesCode := 'SASC001';
      HandleShippingData(ShipmentMethodCode,ShippingAgentCode,ShippingAgentServicesCode,TRUE);  // Insert

      // Customer,Shipment Method Code,Shipping Agent Code,Shipping Agent Service
      CreateWhseSourceFilter(WhseSourceFilter[1],FALSE,'',0);
      CreateWhseSourceFilter(WhseSourceFilter[2],TRUE,CustomerNo,0);
      CreateWhseSourceFilter(WhseSourceFilter[3],TRUE,STRSUBSTNO('<>%1',CustomerNo),0);
      CreateWhseSourceFilter(WhseSourceFilter[4],TRUE,'',0);
      CreateWhseSourceFilter(WhseSourceFilter[5],TRUE,STRSUBSTNO('<>%1',ShipmentMethodCode),1); // Shipping Method Code, 5.7
      CreateWhseSourceFilter(WhseSourceFilter[6],TRUE,ShipmentMethodCode,1); // Shipping Method Code, 5.8
      CreateWhseSourceFilter(WhseSourceFilter[7],TRUE,STRSUBSTNO('<>%1',ShippingAgentCode),2); // Shipping Agent Code, 5.9
      CreateWhseSourceFilter(WhseSourceFilter[8],TRUE,ShippingAgentCode,2); // Shipping Agent Code, 5.10
      CreateWhseSourceFilter(WhseSourceFilter[9],TRUE,STRSUBSTNO('<>%1',ShippingAgentServicesCode),3); // Shipping Agent Services Code, 5.11
      CreateWhseSourceFilter(WhseSourceFilter[10],TRUE,ShippingAgentServicesCode,3); // Shipping Agent Service Code, 5.12

      // Item Tracking:
      CreateSerialLotCode;
    END;

    LOCAL PROCEDURE CreateTestItems@2();
    VAR
      Item@1002 : Record 27;
      LibraryAssembly@1000 : Codeunit 132207;
      i@1001 : Integer;
      j@1003 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(ItemNo) DO BEGIN
        LibraryAssembly.CreateItem(Item,0,3,'','');
        ItemNo[i] := Item."No.";
      END;
      FOR i := 1 TO ARRAYLEN(ItemNo) DO
        FOR j := 1 TO ARRAYLEN(UsedVariantCode) DO
          CreateVariant(i,j);

      // Serial no item:
      LibraryAssembly.CreateItem(Item,0,3,'','');
      SerialItem := Item."No.";
      Item.VALIDATE("Item Tracking Code",SerialNoCode);
      Item.MODIFY;
      // Lot no item:
      LibraryAssembly.CreateItem(Item,0,3,'','');
      LotItem := Item."No.";
      Item.VALIDATE("Item Tracking Code",LotNoCode);
      Item.MODIFY;
      // Serial and lot item:
      LibraryAssembly.CreateItem(Item,0,3,'','');
      SerialLotItem := Item."No.";
      Item.VALIDATE("Item Tracking Code",SerialLotCode);
      Item.MODIFY;
      // Lot Item for reservation check:
      LibraryAssembly.CreateItem(Item,0,3,'','');
      LotItemReservation := Item."No.";
      Item.VALIDATE("Item Tracking Code",LotNoCode);
      Item.MODIFY;
    END;

    LOCAL PROCEDURE CreateVariant@36(ItNo@1002 : Integer;VarNo@1000 : Integer);
    VAR
      ItemVariant@1001 : Record 5401;
    BEGIN
      UsedVariantCode[VarNo] := 'TESTVAR_ ' + FORMAT(VarNo);
      ItemVariant.INIT;
      ItemVariant."Item No." := ItemNo[ItNo];
      ItemVariant.Code := UsedVariantCode[VarNo];
      ItemVariant.Description := 'Item' + FORMAT(ItNo) + '_' + UsedVariantCode[VarNo];
      IF ItemVariant.INSERT THEN;
    END;

    LOCAL PROCEDURE ProvideTestItemSupply@12();
    VAR
      WhseJournalTemplate@1003 : Record 7309;
      WhseJournalBatch@1004 : Record 7310;
      WarehouseJournalLine@1001 : Record 7311;
      ItemJournalTemplate@1801 : Record 82;
      ItemJournalBatch@1802 : Record 233;
      LibraryWarehouse@1000 : Codeunit 132204;
      i@1002 : Integer;
      j@1005 : Integer;
    BEGIN
      WhseJournalTemplate.SETRANGE(Type,WhseJournalTemplate.Type::Item);
      WhseJournalTemplate.FINDFIRST;
      WhseTemplate := WhseJournalTemplate.Name;
      CLEAR(WhseJournalBatch);
      WhseJournalBatch."Journal Template Name" := WhseTemplate;
      i := 1;
      WHILE WhseJournalBatch.GET(WhseTemplate,'W' + FORMAT(i),WhiteLocationCode) DO
        i += 1;
      WhseJournalBatch.Name := 'W' + FORMAT(i);
      WhseJournalBatch."Location Code" := WhiteLocationCode;
      WhseBatch := WhseJournalBatch.Name;
      WhseJournalBatch.INSERT(TRUE);
      FOR i := 1 TO ARRAYLEN(ItemNo) DO
        FOR j := 1 TO ARRAYLEN(UsedVariantCode) DO BEGIN
          LibraryWarehouse.CreateWhseJournalLine(
            WarehouseJournalLine,WhseTemplate,WhseBatch,WhiteLocationCode,GetZoneCode,UsedBinCode,1,ItemNo[i],500);  // 1 = pos.adjmt.
          WarehouseJournalLine.VALIDATE("Variant Code",UsedVariantCode[j]);
          WarehouseJournalLine.MODIFY;
        END;
      // Serial no item:
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WhseTemplate,WhseBatch,WhiteLocationCode,GetZoneCode,UsedBinCode,1,SerialItem,50);  // 1 = pos.adjmt.
      AddItemTrackingToWhseJnlLine(WarehouseJournalLine,TRUE,FALSE,50);
      // Lot no item:
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WhseTemplate,WhseBatch,WhiteLocationCode,GetZoneCode,UsedBinCode,1,LotItem,50);  // 1 = pos.adjmt.
      AddItemTrackingToWhseJnlLine(WarehouseJournalLine,FALSE,TRUE,50);
      // Serial and lot item:
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WhseTemplate,WhseBatch,WhiteLocationCode,GetZoneCode,UsedBinCode,1,SerialLotItem,50);  // 1 = pos.adjmt.
      AddItemTrackingToWhseJnlLine(WarehouseJournalLine,TRUE,TRUE,50);
      // Lot Reservation Check item:
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WhseTemplate,WhseBatch,WhiteLocationCode,GetZoneCode,UsedBinCode,1,LotItemReservation,5);  // 1 = pos.adjmt.
      AddItemTrackingToWhseJnlLine(WarehouseJournalLine,FALSE,TRUE,5);

      LibraryWarehouse.RegisterWhseJournalLine(WhseTemplate,WhseBatch,WhiteLocationCode,TRUE);
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      ItemJournalTemplateName := ItemJournalTemplate.Name;
      CLEAR(ItemJournalBatch);
      ItemJournalBatch."Journal Template Name" := ItemJournalTemplateName;
      i := 1;
      WHILE ItemJournalBatch.GET(ItemJournalTemplateName,'WH' + FORMAT(i)) DO
        i += 1;
      ItemJournalBatch.Name := 'WH' + FORMAT(i);
      ItemJournalBatchName := ItemJournalBatch.Name;
      ItemJournalBatch.INSERT(TRUE);
      CalcWhseAdjmnt;
    END;

    LOCAL PROCEDURE CalcWhseAdjmnt@34();
    VAR
      ItemJnlLine@1000 : Record 83;
      CalculateWhseAdjustment@1913 : Report 7315;
      LibraryInventory@1004 : Codeunit 132201;
      KeepItemJnlLine@1002 : Boolean;
      i@1003 : Integer;
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name",ItemJournalTemplateName);
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemJournalBatchName);
      ItemJnlLine."Journal Template Name" := ItemJournalTemplateName;
      ItemJnlLine."Journal Batch Name" := ItemJournalBatchName;
      CalculateWhseAdjustment.SetItemJnlLine(ItemJnlLine);
      CalculateWhseAdjustment.USEREQUESTPAGE(FALSE);
      CalculateWhseAdjustment.SetHideValidationDialog(TRUE);
      CalculateWhseAdjustment.InitializeRequest(WORKDATE,'COD136142');
      CalculateWhseAdjustment.RUN;
      IF ItemJnlLine.FINDSET THEN
        REPEAT
          KeepItemJnlLine := FALSE;
          i := 0;
          REPEAT
            i += 1;
            IF ItemJnlLine."Item No." IN [ItemNo[i],SerialItem,LotItem,SerialLotItem,LotItemReservation] THEN
              KeepItemJnlLine := TRUE;
          UNTIL KeepItemJnlLine OR (i = ARRAYLEN(ItemNo));
          IF NOT KeepItemJnlLine THEN
            ItemJnlLine.DELETE(TRUE);
        UNTIL ItemJnlLine.NEXT = 0;
      LibraryInventory.PostItemJournalLine(ItemJournalTemplateName,ItemJournalBatchName);
    END;

    LOCAL PROCEDURE GetWhiteLocation@30();
    VAR
      Location@1000 : Record 14;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,10);
      Location.VALIDATE("Outbound Whse. Handling Time",LocationOutboundWhseHandlingTime[1]);
      Location.MODIFY;
      WhiteLocationCode := Location.Code;
    END;

    LOCAL PROCEDURE CheckInit@24();
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      // Init functionality
      IF NOT SetupDataInitialized THEN BEGIN
        CreateTestNoSeriesBackupData;
        LibraryERMCountryData.CreateVATData;
        LibraryERMCountryData.UpdateSalesReceivablesSetup;
        LibraryERMCountryData.UpdateGeneralPostingSetup;
        SetupDataInitialized := TRUE;
      END;
      IF NOT BasicDataInitialized THEN BEGIN
        CreateCustomer;
        LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
        ServiceItemNo := ServiceItem."No.";
        GetWhiteLocation;
        CreateWhseEmployee;
        GetBinCode;
        CreateTestItems;
        ProvideTestItemSupply;
        GetResource;
        GetGLAcc;
        BasicDataInitialized := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetZoneCode@29() : Code[10];
    BEGIN
      EXIT('PICK');
    END;

    LOCAL PROCEDURE GetBinCode@3();
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",WhiteLocationCode);
      Bin.SETRANGE("Zone Code",GetZoneCode);
      Bin.FINDFIRST;
      UsedBinCode := Bin.Code;
    END;

    LOCAL PROCEDURE CreateWhseEmployee@4();
    VAR
      WarehouseEmployee@1000 : Record 7301;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.SETRANGE(Default,TRUE);
      DefaultLocationCodeForUser := '';
      IF WarehouseEmployee.FINDFIRST THEN BEGIN
        DefaultLocationCodeForUser := WarehouseEmployee."Location Code";
        WarehouseEmployee.Default := FALSE;
        WarehouseEmployee.MODIFY;
      END;
      IF NOT WarehouseEmployee.GET(USERID,WhiteLocationCode) THEN
        LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,WhiteLocationCode,TRUE);
    END;

    LOCAL PROCEDURE GetResource@25();
    VAR
      Resource@1001 : Record 156;
      LibraryResource@1000 : Codeunit 130511;
    BEGIN
      LibraryResource.FindResource(Resource);
      ResourceNo := Resource."No.";
    END;

    LOCAL PROCEDURE GetGLAcc@19();
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      GLAccountNo := GLAccount."No.";
    END;

    LOCAL PROCEDURE CheckServiceLineNoModification@37(VAR ServiceLine@1001 : Record 5902);
    BEGIN
      ASSERTERROR ServiceLine.VALIDATE(Type,NewType(ServiceLine.Type));
      ASSERTERROR ServiceLine.VALIDATE("No.",ItemNo[2]);
      ASSERTERROR ServiceLine.VALIDATE(Quantity,ServiceLine.Quantity + 1);
      ASSERTERROR ServiceLine.VALIDATE("Variant Code",UsedVariantCode[2]);
      ASSERTERROR ServiceLine.VALIDATE("Unit of Measure Code",'');
      ASSERTERROR ServiceLine.VALIDATE("Location Code",NewLocationCode(ServiceLine."Location Code"));
    END;

    LOCAL PROCEDURE NewType@40(InType@1000 : Integer) : Integer;
    BEGIN
      IF InType > 1 THEN
        EXIT(InType - 1);
      EXIT(InType + 1);
    END;

    LOCAL PROCEDURE NewLocationCode@38(LocCode@1001 : Code[10]) : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      Location.SETFILTER(Code,'<>%1',LocCode);
      Location.FINDFIRST;
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE GetPick@33(WarehouseShipmentNo@1000 : Code[20];VAR TempWarehouseActivityLine@1001 : TEMPORARY Record 5767);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      TempWarehouseActivityLine.DELETEALL;
      WITH WarehouseActivityLine DO BEGIN
        SETCURRENTKEY("Whse. Document No.","Whse. Document Type","Activity Type");
        SETRANGE("Whse. Document No.",WarehouseShipmentNo);
        SETRANGE("Whse. Document Type","Whse. Document Type"::Shipment);
        SETRANGE("Activity Type","Activity Type"::Pick);
        IF FINDSET THEN
          REPEAT
            TempWarehouseActivityLine := WarehouseActivityLine;
            TempWarehouseActivityLine.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetRegisteredPick@42(WSHNo@1001 : Code[20];VAR TempRegisteredWhseActivityLine@1000 : TEMPORARY Record 5773);
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
    BEGIN
      TempRegisteredWhseActivityLine.DELETEALL;
      WITH RegisteredWhseActivityLine DO BEGIN
        SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        SETRANGE("Whse. Document No.",WSHNo);
        SETRANGE("Whse. Document Type","Whse. Document Type"::Shipment);
        IF FINDSET THEN
          REPEAT
            TempRegisteredWhseActivityLine := RegisteredWhseActivityLine;
            TempRegisteredWhseActivityLine.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RegisterPick@47(WSHNo@1000 : Code[20]);
    VAR
      TempWhseActivityLine@1001 : TEMPORARY Record 5767;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      GetPick(WSHNo,TempWhseActivityLine);
      TempWhseActivityLine.FINDFIRST;
      WarehouseActivityLine := TempWhseActivityLine;
      CODEUNIT.RUN(CODEUNIT::"Whse.-Activity-Register",WarehouseActivityLine);
    END;

    LOCAL PROCEDURE VerifyWhseShptLinesAgainstPick@41(ServiceOrderNo@1002 : Code[20];WhseShptNo@1000 : Code[20]);
    VAR
      TempWarehouseShipmentLine@1003 : TEMPORARY Record 7321;
      TempWarehouseActivityLine@1004 : TEMPORARY Record 5767;
    BEGIN
      CollectWarehouseShipmentLines(ServiceOrderNo,TempWarehouseShipmentLine);
      GetPick(WhseShptNo,TempWarehouseActivityLine);
      CompareLineSets2(TempWarehouseShipmentLine,TempWarehouseActivityLine,1); // Take lines
      CompareLineSets2(TempWarehouseShipmentLine,TempWarehouseActivityLine,2); // Place lines
    END;

    LOCAL PROCEDURE CompareLineSets2@43(VAR TempWarehouseShipmentLine@1000 : TEMPORARY Record 7321;VAR TempWarehouseActivityLine@1001 : TEMPORARY Record 5767;TakePlace@1003 : Integer);
    BEGIN
      // Compares whse shipment lines and whse activity lines one by one. Only to be used without item tracking.
      Assert.IsTrue(TempWarehouseShipmentLine.FINDSET,'No warehouse shipment lines in CompareLineSets2');
      IF TakePlace = 1 THEN
        TempWarehouseActivityLine.SETRANGE("Action Type",TempWarehouseActivityLine."Action Type"::Take)
      ELSE
        TempWarehouseActivityLine.SETRANGE("Action Type",TempWarehouseActivityLine."Action Type"::Place);
      Assert.AreEqual(
        TempWarehouseShipmentLine.COUNT,TempWarehouseActivityLine.COUNT,'WhseShpt and Pick lines, action ' + FORMAT(TakePlace));
      Assert.IsTrue(
        TempWarehouseActivityLine.FINDSET,'No warehouse activity lines in CompareLineSets2 ActionType ' + FORMAT(TakePlace));
      REPEAT
        CompareLineFields2(TempWarehouseShipmentLine,TempWarehouseActivityLine);
      UNTIL (TempWarehouseActivityLine.NEXT = 0) AND (TempWarehouseShipmentLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CompareLineFields2@44(VAR TempWhseShipmentLine@1002 : TEMPORARY Record 7321;VAR TempWhseActivityLine@1001 : TEMPORARY Record 5767);
    BEGIN
      Assert.AreEqual(TempWhseShipmentLine."Item No.",TempWhseActivityLine."Item No.",'Item No.');
      Assert.AreEqual(TempWhseShipmentLine.Quantity,TempWhseActivityLine.Quantity,'Quantity');
      Assert.AreEqual(TempWhseShipmentLine."Qty. (Base)",TempWhseActivityLine."Qty. (Base)",'Qty. (Base)');
      Assert.AreEqual(TempWhseShipmentLine."Qty. Outstanding",TempWhseActivityLine."Qty. Outstanding",'Qty. Outstanding');
      Assert.AreEqual(
        TempWhseShipmentLine."Qty. Outstanding (Base)",TempWhseActivityLine."Qty. Outstanding (Base)",'Qty Outstanding(Base)');
      Assert.AreEqual(TempWhseShipmentLine.Quantity,TempWhseActivityLine."Qty. to Handle",'Quantity / Qty to handle');
      Assert.AreEqual(TempWhseShipmentLine."Qty. (Base)",TempWhseActivityLine."Qty. to Handle (Base)",'Qty (base)/QtyToHandle(Base)');
      Assert.AreEqual(TempWhseShipmentLine."Unit of Measure Code",TempWhseActivityLine."Unit of Measure Code",'Unit of Measure Code');
      Assert.AreEqual(TempWhseShipmentLine."Variant Code",TempWhseActivityLine."Variant Code",'Variant Code');
      Assert.AreEqual(TempWhseShipmentLine.Description,TempWhseActivityLine.Description,'Description');
    END;

    LOCAL PROCEDURE VerifyServiceOrderLinesAgainstPickItemTracking@1660(WhseShptNo@1234 : Code[20];VAR TempReservationEntry@1000 : TEMPORARY Record 337);
    VAR
      TempWhseActivityLine@1001 : TEMPORARY Record 5767;
    BEGIN
      GetPick(WhseShptNo,TempWhseActivityLine);
      Assert.IsTrue(TempWhseActivityLine.FINDSET,'No warehouse pick lines found for whse shipment with item tracking.');
      CompareLineSets4(TempReservationEntry,TempWhseActivityLine,1); // Take lines
      CompareLineSets4(TempReservationEntry,TempWhseActivityLine,2); // Place lines
    END;

    LOCAL PROCEDURE VerifyWhseShptLinesAgainstRegisteredPick@49(ServiceOrderNo@1002 : Code[20];WhseShptNo@1000 : Code[20]);
    VAR
      TempWarehouseShipmentLine@1003 : TEMPORARY Record 7321;
      TempRegisteredWhseActivityLine@1004 : TEMPORARY Record 5773;
    BEGIN
      CollectWarehouseShipmentLines(ServiceOrderNo,TempWarehouseShipmentLine);
      GetRegisteredPick(WhseShptNo,TempRegisteredWhseActivityLine);
      CompareLineSets3(TempWarehouseShipmentLine,TempRegisteredWhseActivityLine,1); // Take lines
      CompareLineSets3(TempWarehouseShipmentLine,TempRegisteredWhseActivityLine,2); // Place lines
    END;

    LOCAL PROCEDURE CompareLineSets3@48(VAR TempWarehouseShipmentLine@1000 : TEMPORARY Record 7321;VAR TempRegisteredWhseActivityLine@1001 : TEMPORARY Record 5773;TakePlace@1003 : Integer);
    BEGIN
      // Compare whse shipment and registered pick
      Assert.IsTrue(TempWarehouseShipmentLine.FINDSET,'No warehouse shipment lines in CompareLineSets2');
      IF TakePlace = 1 THEN
        TempRegisteredWhseActivityLine.SETRANGE("Action Type",TempRegisteredWhseActivityLine."Action Type"::Take)
      ELSE
        TempRegisteredWhseActivityLine.SETRANGE("Action Type",TempRegisteredWhseActivityLine."Action Type"::Place);
      Assert.AreEqual(
        TempWarehouseShipmentLine.COUNT,TempRegisteredWhseActivityLine.COUNT,'WhseShpt and Reg.pick lines, action ' +
        FORMAT(TakePlace));
      Assert.IsTrue(
        TempRegisteredWhseActivityLine.FINDSET,
        'No registered warehouse activity lines in CompareLineSets3 ActionType ' + FORMAT(TakePlace));
      REPEAT
        CompareLineFields3(TempWarehouseShipmentLine,TempRegisteredWhseActivityLine);
      UNTIL (TempRegisteredWhseActivityLine.NEXT = 0) AND (TempWarehouseShipmentLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CompareLineFields3@46(VAR TempWhseShipmentLine@1002 : TEMPORARY Record 7321;VAR TempRegisteredWhseActivityLine@1001 : TEMPORARY Record 5773);
    BEGIN
      Assert.AreEqual(TempWhseShipmentLine."Item No.",TempRegisteredWhseActivityLine."Item No.",'Item No.');
      Assert.AreEqual(TempWhseShipmentLine.Quantity,TempRegisteredWhseActivityLine.Quantity,'Quantity');
      Assert.AreEqual(TempWhseShipmentLine."Qty. (Base)",TempRegisteredWhseActivityLine."Qty. (Base)",'Qty. (Base)');
      Assert.AreEqual(
        TempWhseShipmentLine."Unit of Measure Code",TempRegisteredWhseActivityLine."Unit of Measure Code",'Unit of Measure Code');
      Assert.AreEqual(TempWhseShipmentLine."Variant Code",TempRegisteredWhseActivityLine."Variant Code",'Variant Code');
      Assert.AreEqual(TempWhseShipmentLine.Description,TempRegisteredWhseActivityLine.Description,'Description');
    END;

    LOCAL PROCEDURE CompareLineSets4@91(VAR TempReservationEntry@1000 : TEMPORARY Record 337;VAR TempWhseActivityLine@1001 : TEMPORARY Record 5767;TakePlace@1003 : Integer);
    BEGIN
      // Compare whse shipment and non-registered pick with item tracking lines
      IF TakePlace = 1 THEN
        TempWhseActivityLine.SETRANGE("Action Type",TempWhseActivityLine."Action Type"::Take)
      ELSE
        TempWhseActivityLine.SETRANGE("Action Type",TempWhseActivityLine."Action Type"::Place);
      Assert.IsTrue(TempWhseActivityLine.FINDSET,'No warehouse pick lines for pick with item tracking');
      Assert.AreEqual(
        TempReservationEntry.COUNT,TempWhseActivityLine.COUNT,'WhseShpt and Reg.pick lines, action ' + FORMAT(TakePlace));
      TempReservationEntry.FINDSET;
      REPEAT
        CompareLineFields4(TempReservationEntry,TempWhseActivityLine);
      UNTIL (TempReservationEntry.NEXT = 0) OR (TempWhseActivityLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CompareLineFields4@88(VAR TempReservationEntry@1002 : TEMPORARY Record 337;VAR TempWhseActivityLine@1001 : TEMPORARY Record 5767);
    BEGIN
      Assert.AreEqual(
        TempReservationEntry."Quantity (Base)",-TempWhseActivityLine."Qty. (Base)",'Quantity (Base) for pick with item tracking');
      Assert.AreEqual(TempReservationEntry."Serial No.",TempWhseActivityLine."Serial No.",'Serial no for pick with item tracking');
      Assert.AreEqual(TempReservationEntry."Lot No.",TempWhseActivityLine."Lot No.",'Lot no for pick with item tracking');
      Assert.AreEqual(TempReservationEntry."Item No.",TempWhseActivityLine."Item No.",'Item no. for pick with item tracking');
      Assert.AreEqual(TempReservationEntry."Location Code",TempWhseActivityLine."Location Code",'');
    END;

    LOCAL PROCEDURE VerifyPostedWhseShipmentHeaderExists@7(ServiceHeaderNo@1000 : Code[20]);
    VAR
      TempPostedWhseShipmentLine@1001 : TEMPORARY Record 7323;
      PostedWhseShipmentHeader@1002 : Record 7322;
    BEGIN
      // 4.1, 4.3
      CollectPostedWarehouseShipmentLines(ServiceHeaderNo,TempPostedWhseShipmentLine);
      Assert.IsTrue(TempPostedWhseShipmentLine.FINDFIRST,'No posted whse shipment line found after shipping the service order');
      Assert.IsTrue(
        PostedWhseShipmentHeader.GET(TempPostedWhseShipmentLine."No."),
        'No posted whse shipment header found after shipping the service order');
    END;

    LOCAL PROCEDURE VerifyPostedServiceShipmentExists@32(ServiceOrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentHeader@1001 : Record 5990;
    BEGIN
      // 4.1
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceOrderNo);
      Assert.AreEqual(1,ServiceShipmentHeader.COUNT,'Number of service shipments after shipping service order');
    END;

    LOCAL PROCEDURE VerifyServiceLinesAreShipped@35(ServiceOrderNo@1000 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // 4.1
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.FINDSET;
      REPEAT
        Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Quantity Shipped",'Wrong shipped quantity on service line');
        Assert.AreEqual(0,ServiceLine."Qty. to Ship",'Wrong Qty. to ship on service line');
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLinesAreInvoiced@45(ServiceOrderNo@1000 : Code[20];Delta@1002 : Decimal);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // 4.2
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.FINDSET;
      REPEAT
        Assert.AreEqual(ServiceLine.Quantity - Delta,ServiceLine."Quantity Invoiced",'Wrong invoiced quantity on service line');
        Assert.AreEqual(0,ServiceLine."Qty. to Ship",'Wrong Qty. to ship on service line');
        Assert.AreEqual(0,ServiceLine."Qty. to Invoice",'Wrong qty. to invoice on service line');
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceInvoice@55(ServiceOrderNo@1000 : Code[20];VAR TempServiceLine@1001 : TEMPORARY Record 5902;Delta@1004 : Decimal);
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceInvoiceLine@1003 : Record 5993;
    BEGIN
      // 4.2
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceOrderNo);
      Assert.AreEqual(1,ServiceInvoiceHeader.COUNT,'Number of service invoices after invoicing service order');
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Item);
      Assert.AreEqual(TempServiceLine.COUNT,ServiceInvoiceLine.COUNT,'Number of service invoice lines after invoicing service order');
      TempServiceLine.FINDSET;
      ServiceInvoiceLine.FINDSET;
      REPEAT
        Assert.AreEqual(TempServiceLine."No.",ServiceInvoiceLine."No.",
          STRSUBSTNO('%1 , %2',ServiceInvoiceLine.TABLECAPTION,ServiceInvoiceLine.FIELDCAPTION("No.")));
        Assert.AreEqual(TempServiceLine.Quantity - Delta,ServiceInvoiceLine.Quantity,
          STRSUBSTNO('%1 , %2',ServiceInvoiceLine.TABLECAPTION,ServiceInvoiceLine.FIELDCAPTION(Quantity)));
        IF Delta = 0 THEN
          Assert.AreEqual(TempServiceLine.Amount,ServiceInvoiceLine.Amount,
            STRSUBSTNO('%1 , %2',ServiceInvoiceLine.TABLECAPTION,ServiceInvoiceLine.FIELDCAPTION(Amount)));
      UNTIL (TempServiceLine.NEXT = 0) OR (ServiceInvoiceLine.NEXT = 0);
    END;

    LOCAL PROCEDURE VerifyWhseShptLineExistence@70(ServiceOrderNo@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Service Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",1); // 1 = Order
      WarehouseShipmentLine.SETRANGE("Source No.",ServiceOrderNo);
      Assert.AreEqual(
        4,WarehouseShipmentLine.COUNT,'No. of whse shipment lines when service is a part of the filter for getting source documents.');
    END;

    LOCAL PROCEDURE VerifyWhseShipmentDueDateShipmentDate@86(VAR TempServiceLine@1000 : TEMPORARY Record 5902;VAR TempWhseShipmentLine@1001 : TEMPORARY Record 7321);
    BEGIN
      TempServiceLine.FINDSET;
      TempWhseShipmentLine.FINDSET;
      Assert.AreEqual(TempServiceLine.COUNT,TempWhseShipmentLine.COUNT,'No. of TempServiceLines and TempWhseShpmntLines differ');
      REPEAT
        Assert.AreEqual(
          CALCDATE(ServiceHeaderShippingTime[2],TempServiceLine."Needed by Date"),TempServiceLine.GetDueDate,
          'Due date on service line');
        Assert.AreEqual(TempServiceLine.GetDueDate,TempWhseShipmentLine."Due Date",'Due date on whse shipment line');
        Assert.AreEqual(
          CALCDATE(LocationOutboundWhseHandlingTime[2],TempServiceLine.GetDueDate),TempServiceLine.GetShipmentDate,
          'Shipment date on service line');
        Assert.AreEqual(TempServiceLine.GetShipmentDate,TempWhseShipmentLine."Shipment Date",'Shipment date on whse shipment line');
      UNTIL (TempServiceLine.NEXT = 0) AND (TempWhseShipmentLine.NEXT = 0);
    END;

    LOCAL PROCEDURE ReduceWhseShipmentLineQtyToShip@54(VAR TempWarehouseShipmentLine@1000 : TEMPORARY Record 7321;Delta@1002 : Decimal);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      IF Delta = 0 THEN
        EXIT;
      IF NOT TempWarehouseShipmentLine.FINDSET THEN
        EXIT;
      REPEAT
        WarehouseShipmentLine.GET(TempWarehouseShipmentLine."No.",TempWarehouseShipmentLine."Line No.");
        WarehouseShipmentLine.VALIDATE("Qty. to Ship",WarehouseShipmentLine."Qty. to Ship" - Delta);
        WarehouseShipmentLine.MODIFY;
      UNTIL TempWarehouseShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedWhseShipmentLines@1237(ServiceOrderNo@1234 : Code[20]);
    VAR
      TempWarehouseShipmentLine@1235 : TEMPORARY Record 7321;
      TempPostedWhseShipmentLine@1236 : TEMPORARY Record 7323;
    BEGIN
      // 4.3
      CollectWarehouseShipmentLines(ServiceOrderNo,TempWarehouseShipmentLine);
      CollectPostedWarehouseShipmentLines(ServiceOrderNo,TempPostedWhseShipmentLine);
      Assert.AreEqual(TempWarehouseShipmentLine.COUNT,TempPostedWhseShipmentLine.COUNT,'Number of posted warehouse shipment lines');
      TempWarehouseShipmentLine.FINDSET;
      TempPostedWhseShipmentLine.FINDSET;
      REPEAT
        Assert.AreEqual(
          TempWarehouseShipmentLine."Qty. Shipped",TempPostedWhseShipmentLine.Quantity,'Quantity on posted whse shipment line');
      UNTIL (TempWarehouseShipmentLine.NEXT = 0) OR (TempPostedWhseShipmentLine.NEXT = 0);
    END;

    LOCAL PROCEDURE PullScenarioVerifyWhseRqst@56(ServiceOrderNo@1000 : Code[20];WarehouseShipmentHeader@1002 : Record 7320);
    VAR
      WarehouseRequest@1001 : Record 5765;
      GetSourceDocuments@1003 : Report 5753;
    BEGIN
      WITH WarehouseRequest DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",1);
        SETRANGE("Source No.",ServiceOrderNo);
        Assert.AreEqual(1,COUNT,'Number of warehouse requests');
      END;
      // Get the whse shipment lines on the whse shipment:
      WarehouseRequest.FINDFIRST;
      GetSourceDocuments.SetOneCreatedShptHeader(WarehouseShipmentHeader);
      GetSourceDocuments.SetSkipBlocked(TRUE);
      GetSourceDocuments.USEREQUESTPAGE(FALSE);
      GetSourceDocuments.SETTABLEVIEW(WarehouseRequest);
      GetSourceDocuments.RUNMODAL;
      // Verify the fields of the shipment lines:
      VerifyWhseShipmentLinesAgainstServiceOrder(ServiceOrderNo,TRUE);
    END;

    LOCAL PROCEDURE ValidateLocationCode@62(VAR ServiceLine@1000 : Record 5902;LocCode@1001 : Code[10]);
    BEGIN
      IF LocCode <> '' THEN
        ServiceLine.VALIDATE("Location Code",LocCode);
    END;

    LOCAL PROCEDURE CreateWhseSourceFilter@65(Name@1001 : Code[10];ServiceIncluded@1002 : Boolean;FilterText@1003 : Text[100];Category@1004 : 'Customer,Shipment Method Code,Shipping Agent Code,Shipping Agent Service');
    VAR
      WarehouseSourceFilter@1000 : Record 5771;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        INIT;
        VALIDATE(Type,Type::Outbound);
        Code := Name;
        "Service Orders" := ServiceIncluded;
        IF FilterText <> '' THEN
          CASE Category OF
            Category::Customer:
              "Customer No. Filter" := FilterText;
            Category::"Shipment Method Code":
              "Shipment Method Code Filter" := FilterText;
            Category::"Shipping Agent Code":
              "Shipping Agent Code Filter" := FilterText;
            Category::"Shipping Agent Service":
              "Shipping Agent Service Filter" := FilterText;
          END;
        IF NOT INSERT THEN
          MODIFY;
      END;
    END;

    LOCAL PROCEDURE HandleShippingData@67(ShipmentMethodCode@1000 : Code[10];ShippingAgentCode@1001 : Code[10];ShippingAgentServiceCode@1002 : Code[10];InsertRecords@1006 : Boolean);
    VAR
      ShippingAgent@1003 : Record 291;
      ShipmentMethod@1004 : Record 10;
      ShippingAgentServices@1005 : Record 5790;
    BEGIN
      IF InsertRecords THEN BEGIN
        ShippingAgent.INIT;
        ShippingAgent.Code := ShippingAgentCode;
        IF ShippingAgent.INSERT THEN;
        ShipmentMethod.INIT;
        ShipmentMethod.Code := ShipmentMethodCode;
        IF ShipmentMethod.INSERT THEN;
        ShippingAgentServices.INIT;
        ShippingAgentServices."Shipping Agent Code" := ShippingAgentCode;
        ShippingAgentServices.Code := ShippingAgentServiceCode;
        EVALUATE(ShippingAgentServices."Shipping Time",'<7D>');
        IF ShippingAgentServices.INSERT THEN;
        EXIT;
      END;
      IF ShippingAgentServices.GET(ShippingAgentCode,ShippingAgentServiceCode) THEN
        ShippingAgentServices.DELETE(TRUE);
      IF ShippingAgent.GET(ShippingAgentCode) THEN
        ShippingAgent.DELETE(TRUE);
      IF ShipmentMethod.GET(ShipmentMethodCode) THEN
        ShipmentMethod.DELETE(TRUE);
    END;

    LOCAL PROCEDURE RunGetSourceBatch@66(WarehouseSourceFilterCode@1000 : Code[10];WarehouseShipmentHeader@1001 : Record 7320);
    VAR
      WarehouseSourceFilter@1003 : Record 5771;
      GetSourceDocuments@1002 : Report 5753;
    BEGIN
      WITH WarehouseSourceFilter DO BEGIN
        GET(Type::Outbound,WarehouseSourceFilterCode);
        GetSourceDocuments.SetOneCreatedShptHeader(WarehouseShipmentHeader);
        SetFilters(GetSourceDocuments,WarehouseShipmentHeader."Location Code");
      END;
      GetSourceDocuments.USEREQUESTPAGE(FALSE);
      GetSourceDocuments.RUNMODAL;
    END;

    LOCAL PROCEDURE CreateSerialLotCode@39();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      ItemTrackingCode2@1001 : Record 6502;
    BEGIN
      // SN Warehouse tracking:
      ItemTrackingCode.SETRANGE("SN Specific Tracking",TRUE);
      ItemTrackingCode.SETRANGE("Lot Specific Tracking",FALSE);
      ItemTrackingCode.FINDFIRST;
      ItemTrackingCode2 := ItemTrackingCode;
      ItemTrackingCode2.Code := GetFreeCode(ItemTrackingCode.Code);
      ItemTrackingCode2."SN Warehouse Tracking" := TRUE;
      ItemTrackingCode2."Man. Expir. Date Entry Reqd." := FALSE;
      ItemTrackingCode2.INSERT;
      SerialNoCode := ItemTrackingCode2.Code;

      // Serial And Lot Whse Tracking:
      CLEAR(ItemTrackingCode2);
      ItemTrackingCode2.Code := GetFreeCode(ItemTrackingCode.Code);
      ItemTrackingCode2.VALIDATE("SN Specific Tracking",TRUE);
      ItemTrackingCode2.VALIDATE("Lot Specific Tracking",TRUE);
      ItemTrackingCode2.VALIDATE("SN Warehouse Tracking",TRUE);
      ItemTrackingCode2.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode2."Man. Expir. Date Entry Reqd." := FALSE;
      ItemTrackingCode2.INSERT;
      SerialLotCode := ItemTrackingCode2.Code;

      // Lot Warehouse Tracking:
      ItemTrackingCode.SETRANGE("SN Specific Tracking",FALSE);
      ItemTrackingCode.SETRANGE("Lot Specific Tracking",TRUE);
      ItemTrackingCode.FINDFIRST;
      ItemTrackingCode2 := ItemTrackingCode;
      ItemTrackingCode2.Code := GetFreeCode(ItemTrackingCode.Code);
      ItemTrackingCode2."Lot Warehouse Tracking" := TRUE;
      ItemTrackingCode2."Man. Expir. Date Entry Reqd." := FALSE;
      ItemTrackingCode2.INSERT;
      LotNoCode := ItemTrackingCode2.Code;
    END;

    LOCAL PROCEDURE GetFreeCode@79(InCode@1000 : Code[10]) : Code[10];
    VAR
      ItemTrackingCode@1002 : Record 6502;
      i@1001 : Integer;
    BEGIN
      i := 1;
      WHILE ItemTrackingCode.GET(COPYSTR(InCode,1,STRLEN(InCode) - STRLEN(FORMAT(i))) + FORMAT(i)) DO
        i += 1;
      EXIT(COPYSTR(InCode,1,STRLEN(InCode) - STRLEN(FORMAT(i))) + FORMAT(i));
    END;

    LOCAL PROCEDURE AddItemTrackingToWhseJnlLine@87(WarehouseJournalLine@1000 : Record 7311;AddSN@1001 : Boolean;AddLot@1002 : Boolean;Qty@1004 : Decimal);
    VAR
      SN@1003 : Code[5];
      Lot@1006 : Code[5];
      i@1005 : Integer;
      LotSize@1007 : Integer;
      NoOfLots@1008 : Integer;
    BEGIN
      SN := 'S0000';
      Lot := 'L0000';
      LotSize := 5;
      IF AddSN THEN BEGIN
        SN := 'S0000';
        FOR i := 1 TO Qty DO BEGIN
          SN := INCSTR(SN);
          IF AddLot THEN BEGIN
            IF (i - 1) MOD LotSize = 0 THEN
              Lot := INCSTR(Lot);
            InsertWhseItemTrkgLine(WarehouseJournalLine,1,SN,Lot);
          END ELSE
            InsertWhseItemTrkgLine(WarehouseJournalLine,1,SN,'');
        END;
      END;
      IF AddLot AND NOT AddSN THEN BEGIN
        NoOfLots := ROUND(Qty / LotSize,1,'>');
        FOR i := 1 TO NoOfLots DO BEGIN
          Lot := INCSTR(Lot);
          InsertWhseItemTrkgLine(WarehouseJournalLine,GetLotQty(Qty,LotSize,i),'',Lot);
        END;
      END;
    END;

    LOCAL PROCEDURE InsertWhseItemTrkgLine@90(WarehouseJournalLine@1003 : Record 7311;Qty@1002 : Decimal;SerialNo@1000 : Code[5];LotNo@1001 : Code[5]);
    VAR
      WhseItemTrackingLine@1005 : Record 6550;
      NextEntryNo@1006 : Integer;
    BEGIN
      NextEntryNo := 1;
      WITH WhseItemTrackingLine DO BEGIN
        IF FINDLAST THEN
          NextEntryNo := "Entry No." + 1;
        INIT;
        "Entry No." := NextEntryNo;
        "Item No." := WarehouseJournalLine."Item No.";
        "Location Code" := WarehouseJournalLine."Location Code";
        VALIDATE("Quantity (Base)",Qty);
        "Source Type" := DATABASE::"Warehouse Journal Line";
        "Source ID" := WarehouseJournalLine."Journal Batch Name";
        "Source Batch Name" := WarehouseJournalLine."Journal Template Name";
        "Source Ref. No." := WarehouseJournalLine."Line No.";
        "Serial No." := SerialNo;
        "Lot No." := LotNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetLotQty@82(Qty@1000 : Decimal;LotSize@1001 : Integer;i@1002 : Integer) : Decimal;
    VAR
      Remaining@1003 : Decimal;
    BEGIN
      Remaining := Qty - (i - 1) * LotSize;
      IF Remaining < LotSize THEN
        EXIT(Remaining);
      EXIT(LotSize);
    END;

    [HandlerFunctions(ServiceLinesOpenItemTracking)]
    LOCAL PROCEDURE AddItemTrackingForServiceLine@94(VAR ServiceLine@1000 : Record 5902);
    VAR
      ServiceHeader@1100 : Record 5900;
      ServiceOrderTP@1003 : TestPage 5900;
    BEGIN
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ServiceOrderTP.OPENNEW;
      ServiceOrderTP.GOTORECORD(ServiceHeader);
      ServiceOrderTP.ServItemLines."Service Lines".INVOKE;
    END;

    LOCAL PROCEDURE CompareItemTrackingT5900vsT7321@81(WhseShipmentNo@1001 : Code[20];VAR TempReservationEntry@1400 : TEMPORARY Record 337);
    VAR
      WhseItemTrackingLine@1003 : Record 6550;
      TempWhseItemTrackingLine@1005 : TEMPORARY Record 6550;
    BEGIN
      // Compare item tracking lines btw. service lines (item tracking in T337) and whse shipment lines (item tracking in T6550)
      TempWhseItemTrackingLine.DELETEALL;
      WITH WhseItemTrackingLine DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype");
        SETRANGE("Source ID",WhseShipmentNo);
        SETRANGE("Source Type",DATABASE::"Warehouse Shipment Line");
        SETRANGE("Source Subtype",0);
        Assert.IsTrue(COUNT > 0,'No item tracking found for warehouse shipment');
        FINDSET;
        REPEAT
          TempWhseItemTrackingLine := WhseItemTrackingLine;
          TempWhseItemTrackingLine.INSERT;
        UNTIL NEXT = 0;
      END;
      CompareItemTrackingT5900vsT7321_2(TempReservationEntry,TempWhseItemTrackingLine);
      TempWhseItemTrackingLine.DELETEALL;
    END;

    LOCAL PROCEDURE CompareItemTrackingT5900vsT7321_2@89(VAR TempReservationEntry@1000 : TEMPORARY Record 337;VAR TempWhseItemTrackingLine@1001 : TEMPORARY Record 6550);
    BEGIN
      Assert.AreEqual(
        TempReservationEntry.COUNT,TempWhseItemTrackingLine.COUNT,
        'The numbers of service order item tracking lines and whse shipment item tracking lines do not match');
      TempReservationEntry.FINDSET;
      TempWhseItemTrackingLine.FINDSET;
      REPEAT
        Assert.AreEqual(
          TempReservationEntry."Quantity (Base)",-TempWhseItemTrackingLine."Quantity (Base)",'Item Tracking Quantity (Base)');
        Assert.AreEqual(TempReservationEntry."Serial No.",TempWhseItemTrackingLine."Serial No.",'Item Tracking Serial No');
        Assert.AreEqual(
          TempReservationEntry."Qty. to Handle (Base)",-TempWhseItemTrackingLine."Qty. to Handle (Base)",
          'Item Tracking Qty to handle (base)');
        // Assert.AreEqual(TempReservationEntry."Qty. to Invoice (Base)",-TempWhseItemTrackingLine."Qty. to Invoice (Base)",'Item Tracking Qty to Invoice (base)');  Are not equal - by design
      UNTIL (TempReservationEntry.NEXT = 0) OR (TempWhseItemTrackingLine.NEXT = 0);
    END;

    LOCAL PROCEDURE CollectItemTrackingReservationEntries@1661(ServiceOrderNo@1202 : Code[20];VAR TempReservationEntry@1201 : TEMPORARY Record 337);
    VAR
      ReservationEntry@1200 : Record 337;
    BEGIN
      TempReservationEntry.DELETEALL;
      WITH ReservationEntry DO BEGIN
        SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        SETRANGE("Source ID",ServiceOrderNo);
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",1);
        Assert.IsTrue(COUNT > 0,'No item tracking found for service order');
        FINDSET;
        REPEAT
          TempReservationEntry := ReservationEntry;
          TempReservationEntry.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AssignSerialAndLotToPick@93(VAR TempWhseActivityLine@1000 : TEMPORARY Record 5767;SerialQty@1001 : Decimal;BothQty@1003 : Decimal);
    VAR
      WarehouseActivityLine@1008 : Record 5767;
      SN@1004 : Code[5];
      Lot@1005 : Code[5];
      i@1006 : Integer;
      j@1007 : Integer;
    BEGIN
      // SerialNo
      TempWhseActivityLine.FINDSET;
      SN := 'S0010';
      FOR i := 1 TO SerialQty DO BEGIN
        SN := INCSTR(SN);
        FOR j := 1 TO 2 DO BEGIN
          WarehouseActivityLine.GET(TempWhseActivityLine."Activity Type",TempWhseActivityLine."No.",TempWhseActivityLine."Line No.");
          WarehouseActivityLine.VALIDATE("Serial No.",SN);
          WarehouseActivityLine.MODIFY;
          TempWhseActivityLine.NEXT;
        END;
      END;
      // LotNo
      Lot := 'L0003';
      FOR i := 1 TO 2 DO BEGIN // There are 2 Lot lines in this case
        WarehouseActivityLine.GET(TempWhseActivityLine."Activity Type",TempWhseActivityLine."No.",TempWhseActivityLine."Line No.");
        WarehouseActivityLine.VALIDATE("Lot No.",Lot);
        WarehouseActivityLine.MODIFY;
        TempWhseActivityLine.NEXT;
      END;
      // Both
      SN := 'S0010';
      Lot := 'L0003';
      FOR i := 1 TO BothQty DO BEGIN
        SN := INCSTR(SN);
        FOR j := 1 TO 2 DO BEGIN
          WarehouseActivityLine.GET(TempWhseActivityLine."Activity Type",TempWhseActivityLine."No.",TempWhseActivityLine."Line No.");
          WarehouseActivityLine.VALIDATE("Serial No.",SN);
          WarehouseActivityLine.VALIDATE("Lot No.",Lot);
          WarehouseActivityLine.MODIFY;
          IF TempWhseActivityLine.NEXT = 0 THEN;
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyT6550T5773@95(ServiceOrderNo@1000 : Code[20];VAR TempWhseItemTrackingLine@1004 : TEMPORARY Record 6550);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      // TAB6550: whse shipment item tracking, TAB5773: Registered pick line
      WITH RegisteredWhseActivityLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",1);
        SETRANGE("Source No.",ServiceOrderNo);
      END;
      Assert.IsTrue(RegisteredWhseActivityLine.FINDSET,'No lines on registered pick');
      Assert.AreEqual(
        RegisteredWhseActivityLine.COUNT / 2,TempWhseItemTrackingLine.COUNT,'Number of item tracking lines on whse shipment lines');
      TempWhseItemTrackingLine.FINDSET;
      REPEAT
        VerifyT6550T5773Fields(RegisteredWhseActivityLine,TempWhseItemTrackingLine);
        RegisteredWhseActivityLine.NEXT;
        VerifyT6550T5773Fields(RegisteredWhseActivityLine,TempWhseItemTrackingLine);
      UNTIL (TempWhseItemTrackingLine.NEXT = 0) OR (RegisteredWhseActivityLine.NEXT = 0);
    END;

    LOCAL PROCEDURE VerifyT6550T5773Fields@99(RegisteredWhseActivityLine@1000 : Record 5773;WhseItemTrackingLine@1001 : Record 6550);
    BEGIN
      Assert.AreEqual(RegisteredWhseActivityLine."Item No.",WhseItemTrackingLine."Item No.",'Whse item tracking line Item no.');
      Assert.AreEqual(
        RegisteredWhseActivityLine."Location Code",WhseItemTrackingLine."Location Code",'Whse item tracking line Location Code');
      Assert.AreEqual(
        RegisteredWhseActivityLine."Qty. (Base)",WhseItemTrackingLine."Quantity (Base)",'Whse item tracking line Quantity (Base)');
      Assert.AreEqual(RegisteredWhseActivityLine."Serial No.",WhseItemTrackingLine."Serial No.",'Whse item tracking line Serial No.');
      Assert.AreEqual(RegisteredWhseActivityLine."Lot No.",WhseItemTrackingLine."Lot No.",'Whse item tracking line Lot No.');
    END;

    LOCAL PROCEDURE VerifyT337T6550@101(ServiceOrderNo@1001 : Code[20];VAR TempWhseItemTrackingLine@1002 : TEMPORARY Record 6550);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      Assert.IsTrue(TempWhseItemTrackingLine.FINDSET,'No item tracking lines found for whse shipment');
      WITH ReservationEntry DO BEGIN
        SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        SETRANGE("Source ID",ServiceOrderNo);
        SETRANGE("Source Type",DATABASE::"Service Line");
        SETRANGE("Source Subtype",1);
        Assert.AreEqual(TempWhseItemTrackingLine.COUNT,COUNT,'Number of item tracking lines for service order');
        FINDSET;
        REPEAT
          Assert.AreEqual(-TempWhseItemTrackingLine."Quantity (Base)","Quantity (Base)",'Service Line Item Tracking Quantity (Base');
          Assert.AreEqual(TempWhseItemTrackingLine."Item No.","Item No.",'Service Line Item Tracking Item No.');
          Assert.AreEqual(TempWhseItemTrackingLine."Serial No.","Serial No.",'Service Line Item Tracking Serial No.');
          Assert.AreEqual(TempWhseItemTrackingLine."Lot No.","Lot No.",'Service Line Item Tracking Lot No.');
          Assert.AreEqual(TempWhseItemTrackingLine."Location Code","Location Code",'Service Line Item Tracking Location Code');
        UNTIL (NEXT = 0) OR (TempWhseItemTrackingLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE VerifyT32T6550@97(ServiceOrderNo@1000 : Code[20];VAR TempWhseItemTrackingLine@1001 : TEMPORARY Record 6550);
    VAR
      ServiceShipmentHeader@1002 : Record 5990;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceOrderNo);
      Assert.IsTrue(ServiceShipmentHeader.FINDFIRST,'No posted service shipment found.');
      WITH ItemLedgerEntry DO BEGIN
        SETCURRENTKEY("Document No.","Document Type","Document Line No.");
        SETRANGE("Document No.",ServiceShipmentHeader."No.");
        Assert.IsTrue(FINDSET,'No item tracking entries found for posted service shipment.');
        Assert.AreEqual(TempWhseItemTrackingLine.COUNT,COUNT,'Number of item tracking lines for posted service shipment');
        TempWhseItemTrackingLine.FINDSET;
        REPEAT
          Assert.AreEqual(-TempWhseItemTrackingLine."Quantity (Base)",Quantity,'Service Line Item Tracking Quantity (Base');
          Assert.AreEqual(TempWhseItemTrackingLine."Item No.","Item No.",'Service Line Item Tracking Item No.');
          Assert.AreEqual(TempWhseItemTrackingLine."Serial No.","Serial No.",'Service Line Item Tracking Serial No.');
          Assert.AreEqual(TempWhseItemTrackingLine."Lot No.","Lot No.",'Service Line Item Tracking Lot No.');
          Assert.AreEqual(TempWhseItemTrackingLine."Location Code","Location Code",'Service Line Item Tracking Location Code');
        UNTIL (NEXT = 0) OR (TempWhseItemTrackingLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE VerifyT6550T337@77(WhseShipmentNo@1000 : Code[20];VAR TempReservationEntry@1001 : TEMPORARY Record 337);
    VAR
      WhseItemTrackingLine@1002 : Record 6550;
    BEGIN
      // Compare item tracking from service order vs. warehouse entries (TAB7312)
      WITH WhseItemTrackingLine DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype");
        SETRANGE("Source ID",WhseShipmentNo);
        SETRANGE("Source Type",DATABASE::"Warehouse Shipment Line");
        Assert.IsTrue(FINDSET,'No whse item tracking information found for whse shipment');
        Assert.AreEqual(TempReservationEntry.COUNT,COUNT,'Wrong number of item tracking lines for whse shipment');
        TempReservationEntry.FINDSET;
        REPEAT
          Assert.AreEqual(TempReservationEntry."Location Code","Location Code",'Whse item tracking location code');
          Assert.AreEqual(-TempReservationEntry."Quantity (Base)","Quantity (Base)",'Whse item tracking Quantity (base)');
          Assert.AreEqual(TempReservationEntry."Serial No.","Serial No.",'Whse item tracking serial no.');
          Assert.AreEqual(TempReservationEntry."Lot No.","Lot No.",'Whse item tracking Lot No.');
          Assert.AreEqual(TempReservationEntry."Item No.","Item No.",'Whse item tracking Item No');
        UNTIL (NEXT = 0) AND (TempReservationEntry.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE VerifyT32T337@98(ServiceOrderNo@1000 : Code[20];VAR TempReservationEntry@1001 : TEMPORARY Record 337);
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETCURRENTKEY("Order Type","Order No.","Order Line No.");
        SETRANGE("Order Type","Order Type"::Service);
        SETRANGE("Order No.",ServiceOrderNo);
        Assert.IsTrue(FINDSET,'No item ledger entries found after posting whse shipment');
        Assert.AreEqual(TempReservationEntry.COUNT,COUNT,'Wrong number of item ledger entries after posting of whse shipment.');
        TempReservationEntry.FINDSET;
        REPEAT
          Assert.AreEqual(TempReservationEntry."Item No.","Item No.",'Item ledger entry Item no');
          Assert.AreEqual(TempReservationEntry."Location Code","Location Code",'Item Ledger Entry Location Code');
          Assert.AreEqual(TempReservationEntry."Quantity (Base)",Quantity,'item Ledger Entry Quantity (Base)');
          Assert.AreEqual(TempReservationEntry."Serial No.","Serial No.",'Item ledger entry serial no.');
          Assert.AreEqual(TempReservationEntry."Lot No.","Lot No.",'Item LEdger Entry Lot No.');
        UNTIL (NEXT = 0) OR (TempReservationEntry.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE CollectWhseShipmentItemTrackingLines@96(WhseShipmentNo@1000 : Code[20];VAR TempWhseItemTrackingLine@1001 : TEMPORARY Record 6550);
    VAR
      WhseItemTrackingLine@1002 : Record 6550;
    BEGIN
      TempWhseItemTrackingLine.DELETEALL;
      WITH WhseItemTrackingLine DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype");
        SETRANGE("Source ID",WhseShipmentNo);
        SETRANGE("Source Type",DATABASE::"Warehouse Shipment Line");
        SETRANGE("Source Subtype",0);
        IF NOT FINDSET THEN
          EXIT;
        REPEAT
          TempWhseItemTrackingLine := WhseItemTrackingLine;
          TempWhseItemTrackingLine.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TryCreatePick@104(WhseShptNo@1000 : Code[20];ErrExpected@1004 : Boolean);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
      WhseShipmentCreatePick@1003 : Report 7318;
    BEGIN
      WarehouseShipmentHeader.GET(WhseShptNo);
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.Initialize('',0,FALSE,FALSE,FALSE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      COMMIT;
      IF ErrExpected THEN
        ASSERTERROR WhseShipmentCreatePick.RUNMODAL
      ELSE
        WhseShipmentCreatePick.RUNMODAL;
    END;

    [MessageHandler]
    PROCEDURE MsgHandlerWhseOperationsRequired@63(Msg@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Msg,Text002) <> 0,STRSUBSTNO('Wrong message when entering Qty to Ship for blank location: %1',Msg));
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesModalFormHandler@61(VAR ServiceLines@1000 : TestPage 5905);
    BEGIN
      ServiceLines."Qty. to Ship".SETVALUE(ServiceLines.Quantity.VALUE);
      ServiceLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesOpenItemTracking@83(VAR ServiceLines@1000 : TestPage 5905);
    VAR
      i@1001 : Integer;
    BEGIN
      ServiceLines.FIRST;
      FOR i := 1 TO ServiceLineNo - 1 DO
        ServiceLines.NEXT;
      ServiceLines.ItemTrackingLines.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesOpenItemTracking2@102(VAR ServiceLines@1000 : TestPage 5905);
    VAR
      i@1001 : Integer;
    BEGIN
      IF ItemTrackingOption = 1 THEN BEGIN
        ServiceLines.FIRST;
        FOR i := 1 TO ServiceLineNo - 1 DO
          ServiceLines.NEXT;
        ServiceLines.ItemTrackingLines.INVOKE;
      END;
      IF ItemTrackingOption = 2 THEN
        ServiceLines.Reserve.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesSelectItemTracking@84(VAR ItemTrackingLinesTP@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLinesTP."Select Entries".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesAcceptSelectedItemTracking@80(VAR ItemTrackingSummaryTP@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummaryTP.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ServiceLinesReserveConfirm@100(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesReserveCurrentLine@108(VAR ReservationTP@1000 : TestPage 498);
    BEGIN
      ReservationTP."Reserve from Current Line".INVOKE;
      ReservationTP.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Service]

      DELIVERABLES 263638, 272337, 275596:

      Deliverable 263638:

      Tests
      ==============================

      USER STORY 2:
      2.1 : Try to create whse shipment from an open service order. Error expected.
      2.2 : Try to create whse shipment from existing released service order. Message expected. Possible to navigate to Whse shipment lines with correct contents.
      2.3 : Reopen service order and verify that certain fields cannot be modified.
      2.4 : Reopen service order and verify that lines with reference to whse shipment cannot be deleted.

      USER STORY 3:
      3.1 : Try to create pick from Whse shipment. Verify pick lines
      3.2 : Try to register pick. Verify that registered pick exists.

      USER STORY 4:
      4.1 : Post warehouse shipment as ship and verify that
             - Non-posted whse shipment is deleted
             - Posted whse shipment is created
             - Service Shipment is created
      4.2 : Post warehouse shipment as ship and invoice and verify that
             - Non-posted whse shipment is deleted
             - Posted whse shipment is created
             - Service Shipment is created
             - Service Invoice is created

      4.3 : Post whse shipment (ship & invoice) with qty to ship < qty and verify that
             - Posted whse shipment: Qty = Qty to ship on the whse shipment
             - Posted service shipment: Qty = Qty to ship on the whse shipment
             - Posted service invoice: Qty = Qty to ship on the whse shipment
             - Service order: Qty to ship = 0 and Qty to invoice = 0.

      Deliverable 272337:

      Tests
      ==============================

      USER STORY 5, USER STORY 7:

       *** Get Source Documents" ***
      5.1 : Create service order and release to ship. Create warehouse shipment. Select "Get Source Documents". Verify that:
      5.2 :  - Service Order is displayed in the overview
      7.1 :  - The whse shipment contains the lines from the service order
             - The whse shipment line fields are okay (incl. due date and shipping date)

      *** "Use filters to get source documents" ***

      5.3 : (Customer filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[1] (without service orders). Run and verify that whse shipment lines for the service order are NOT added to the whse shipment

      5.4 : (Customer filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[2] (with service orders and Customer no set to the used customer). Run and verify that whse shipment lines for the service order are added to the whse shipment

      5.5 : (Customer filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[3] (with service orders and Customer no <> the used customer). Run and verify that whse shipment lines for the service order are NOT added to the whse shipment

      5.6 : (Customer filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[4] (with service orders and Customer filter blank). Run and verify that whse shipment lines for the service order are added to the whse shipment

      5.7 : (Shipment Method Code filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[5] (with service orders and Shipping method code Filter <> the shipping method code for the order).
            Run and verify that whse shipment lines for the service order are NOT added to the whse shipment

      5.8 : (Shipment Method Code filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[6] (with service orders and Shipping method code Filter = the shipping method code for the order).
            Run and verify that whse shipment lines for the service order are added to the whse shipment

      5.9 : (Shipping agent code filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[7] (with service orders and Shipping method code Filter = the shipping method code for the order).
            Run and verify that whse shipment lines for the service order are added to the whse shipment

      5.10: (Shipping agent code filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[8] (with service orders and Shipping method code Filter = the shipping method code for the order).
            Run and verify that whse shipment lines for the service order are added to the whse shipment

      5.11: (Shipping agent services code filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[9] (with service orders and Shipping method code Filter = the shipping method code for the order).
            Run and verify that whse shipment lines for the service order are added to the whse shipment

      5.12: (Shipping agent services code filter) Create service order and release to ship. Create empty warehouse shipment. Select "Use filters to get source documents".
            Select WhseSourceFilter[10] (with service orders and Shipping method code Filter = the shipping method code for the order).
            Run and verify that whse shipment lines for the service order are added to the whse shipment

      Deliverable 275596: Whse shipment slice 7 - include shipping agent, shipping service and shipping time into Service order

      USER STORY 7:
      7.1 : Create service order and release to ship. Set ServiceOrder.Shipping Time = 2D. Create empty warehouse shipment. Blank the shipping date on the whse header.
            Select "Get Source Documents". Verify:
            - Whse shipment: Due Date = ServiceLine."Needed by date" - Service Line.Shipping Time
            - Whse shipment: Shipping Date = ServiceLine."Needed by date" - ServiceLine.Shipping Time - Location."Whse Outbound handling time"(7D)
    }
    END.
  }
}

