OBJECT Codeunit 136500 UT Time Sheets
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 958=rimd;
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ResourcesSetup@1003 : Record 314;
      LibraryHumanResource@1005 : Codeunit 131901;
      TimeSheetMgt@1004 : Codeunit 950;
      LibraryTimeSheet@1000 : Codeunit 131904;
      LibraryService@1007 : Codeunit 131902;
      Assert@1002 : Codeunit 130000;
      Text002@1006 : TextConst 'ENU=Use Time Sheet must be';
      Text003@1008 : TextConst 'ENU=Time sheet is not created';
      Text004@1009 : TextConst 'ENU=Unexpected resource journal validation error.';
      Text005@1010 : TextConst 'ENU=Unexpected job journal validation error.';
      Text006@1011 : TextConst 'ENU=Lines have not been copied.';
      Text007@1013 : TextConst 'ENU=Incorrect number of lines has been created.';
      Text008@1014 : TextConst 'ENU=Time sheet line has to be posted.';
      Text009@1016 : TextConst 'ENU=Incorrect service lines consume quantity.';
      Text010@1017 : TextConst 'ENU=Incorrect service lines quantity.';
      Text011@1015 : TextConst 'ENU=Dimensions are not the same.';
      Text016@1021 : TextConst 'ENU=Time Sheet field %1 value is incorrect.';
      Text017@1022 : TextConst 'ENU=Time sheet line is not created.';
      Text018@1025 : TextConst 'ENU=Time sheet detail is not found.';
      LibraryUtility@1027 : Codeunit 131000;
      Text019@1023 : TextConst 'ENU=Time sheet line must not be created.';
      Text021@1024 : TextConst 'ENU=Unexpected time sheet searching error.';
      Text022@1029 : TextConst 'ENU=Type must not be Assembly';
      Text023@1030 : TextConst 'ENU=All time sheet detail records must be deleted';
      LibraryVariableStorage@1028 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryERMCountryData@1907 : Codeunit 131305;
      LibraryJob@1036 : Codeunit 131920;
      GlobalWorkTypeCode@1031 : Code[10];
      GlobalChargeable@1032 : Boolean;
      Text024@1018 : TextConst 'ENU=Incorrect time sheet chart amount.';
      Text025@1019 : TextConst 'ENU=Incorrect time sheet chart measure name.';
      Text026@1020 : TextConst 'ENU=Incorrect time sheet chart column name.';
      Text027@1026 : TextConst 'ENU=Time sheet administrator only is allowed to create time sheets.';
      Text028@1033 : TextConst 'ENU=Incorrect time sheet number.';
      IncorrectLinesNumberCountedErr@1037 : TextConst 'ENU=Incorrect number of lines is counted.';
      IsInitialized@1035 : Boolean;

    LOCAL PROCEDURE SetUp@2();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      IsInitialized := TRUE;

      LibraryTimeSheet.Initialize;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      ResourcesSetup.GET;
      // create current user id setup for approver
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      COMMIT;
    END;

    LOCAL PROCEDURE TearDown@3();
    VAR
      TimeSheetHeader@1003 : Record 950;
      TimeSheetLine@1002 : Record 951;
      TimeSheetDetail@1001 : Record 952;
      Resource@1000 : Record 156;
    BEGIN
      TimeSheetHeader.DELETEALL;
      TimeSheetLine.DELETEALL;
      TimeSheetDetail.DELETEALL;
      Resource.MODIFYALL("Use Time Sheet",FALSE);
      Resource.MODIFYALL("Time Sheet Owner User ID",'');
      Resource.MODIFYALL("Time Sheet Approver User ID",'');
    END;

    [Test]
    PROCEDURE TestTimeSheetResourceSetup@1();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1004 : Record 950;
    BEGIN
      // simple unit test to verify possibility set up time sheet resource and create one timesheet
      SetUp;

      // resource - person
      CreateTimeSheetResource(Resource,FALSE);

      // create time sheet
      CreateTimeSheets(FindTimeSheetStartDate,1,Resource."No.");

      // verify that time sheet is created
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      Assert.IsTrue(TimeSheetHeader.FINDFIRST,Text003);

      TearDown;
    END;

    [Test]
    PROCEDURE TestResourceJnlUsage@4();
    VAR
      Resource@1000 : Record 156;
      ResJnlLine@1006 : Record 207;
    BEGIN
      // resource marked as Uses Timesheet cannot be used in resource journals
      SetUp;

      // resource - person
      CreateTimeSheetResource(Resource,FALSE);

      // try to use it in resource journal
      ResJnlLine.INIT;
      ASSERTERROR ResJnlLine.VALIDATE("Resource No.",Resource."No.");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text002) > 0,Text004);

      TearDown;
    END;

    [Test]
    PROCEDURE TestJobJnlUsage@7();
    VAR
      Resource@1000 : Record 156;
      Job@1001 : Record 167;
      JobJnlLine@1006 : Record 210;
    BEGIN
      // resource marked as Uses Timesheet cannot be used in job journals
      SetUp;

      // create resource and link it to the user
      CreateTimeSheetResource(Resource,FALSE);

      // try to use it in job journal
      Job.FINDFIRST;
      JobJnlLine.INIT;
      JobJnlLine.VALIDATE("Job No.",Job."No.");
      JobJnlLine.Type := JobJnlLine.Type::Resource;
      ASSERTERROR JobJnlLine.VALIDATE("No.",Resource."No.");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text002) > 0,Text005);

      TearDown;
    END;

    [Test]
    PROCEDURE TestResourceLinkToUser@5();
    VAR
      Resource@1000 : Record 156;
      Resource2@1006 : Record 156;
    BEGIN
      // it should not be possible to specify the same Time Sheet Owner User ID for several resources with type = Person
      SetUp;

      // create resource and link it to the user
      CreateTimeSheetResource(Resource,FALSE);

      // create another resource
      LibraryTimeSheet.CreateTimeSheetResource(Resource2);

      // try to specify the same user id
      ASSERTERROR Resource2.VALIDATE("Time Sheet Owner User ID",Resource."Time Sheet Owner User ID");

      TearDown;
    END;

    [Test]
    PROCEDURE TestCopyLines@6();
    VAR
      FromTimeSheetHeader@1001 : Record 950;
      FromTimeSheetLine@1000 : Record 951;
      ToTimeSheetHeader@1008 : Record 950;
      ToTimeSheetLine@1007 : Record 951;
    BEGIN
      // test for function "Copy lines from previous time sheet"
      SetUp;

      // create source time sheet
      LibraryTimeSheet.CreateTimeSheet(FromTimeSheetHeader,FALSE);

      // create time sheet lines with different types
      AddRowsWithDifferentTypes(FromTimeSheetHeader,FromTimeSheetLine);

      // create destanation time sheet
      CreateTimeSheets(FromTimeSheetHeader."Ending Date" + 1,1,FromTimeSheetHeader."Resource No.");

      ToTimeSheetHeader.SETRANGE("Resource No.",FromTimeSheetHeader."Resource No.");
      ToTimeSheetHeader.FINDLAST;

      // run Copy lines function
      TimeSheetMgt.CopyPrevTimeSheetLines(ToTimeSheetHeader);

      // verify that lines are copied
      ToTimeSheetLine.SETRANGE("Time Sheet No.",ToTimeSheetHeader."No.");
      Assert.IsTrue(ToTimeSheetLine.FINDSET,Text006);

      FromTimeSheetLine.SETRANGE("Time Sheet No.",FromTimeSheetHeader."No.");
      FromTimeSheetLine.FINDSET;

      // verify that all needed fields were copied
      REPEAT
        ToTimeSheetLine.TESTFIELD(Type,FromTimeSheetLine.Type);
        ToTimeSheetLine.TESTFIELD("Job No.",FromTimeSheetLine."Job No.");
        ToTimeSheetLine.TESTFIELD("Job Task No.",FromTimeSheetLine."Job Task No.");
        ToTimeSheetLine.TESTFIELD("Cause of Absence Code",FromTimeSheetLine."Cause of Absence Code");
        ToTimeSheetLine.TESTFIELD(Description,FromTimeSheetLine.Description);
        ToTimeSheetLine.TESTFIELD(Chargeable,FromTimeSheetLine.Chargeable);
        FromTimeSheetLine.NEXT;
      UNTIL ToTimeSheetLine.NEXT = 0;

      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateLinesFromJobPlanning@8();
    VAR
      TimeSheetHeader@1003 : Record 950;
      TimeSheetLine@1002 : Record 951;
      Job@1001 : Record 167;
      JobTask@1000 : Record 1001;
      JobPlanningLine@1004 : Record 1003;
      Date@1005 : Date;
    BEGIN
      // test for function "Create lines from job planning"
      InitCreateFromJobPlanningSetup;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // find job and task
      LibraryTimeSheet.FindJob(Job);
      LibraryTimeSheet.FindJobTask(Job."No.",JobTask);
      // creat job planning for 2 first time sheet days
      FOR Date := TimeSheetHeader."Starting Date" TO TimeSheetHeader."Starting Date" + 1 DO
        LibraryTimeSheet.CreateJobPlanningLine(
          JobPlanningLine,
          Job."No.",
          JobTask."Job Task No.",
          TimeSheetHeader."Resource No.",
          Date);

      // run function Create lines from job planning
      TimeSheetMgt.CreateLinesFromJobPlanning(TimeSheetHeader);

      // verify that only 1 line has been created
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.SETRANGE(Type,TimeSheetLine.Type::Job);
      TimeSheetLine.SETRANGE("Job No.",Job."No.");
      TimeSheetLine.SETRANGE("Job Task No.",JobTask."Job Task No.");
      Assert.IsTrue(TimeSheetLine.COUNT = 1,Text007);

      TearDown;
    END;

    [Test]
    PROCEDURE TestCalcLinesFromJobPlanning@29();
    VAR
      TimeSheetHeader@1000 : Record 950;
      JobPlanningLine@1001 : Record 1003;
      NumberOfLines@1002 : Integer;
    BEGIN
      // test to verify the number of lines which are going to be created
      // with function Create lines from job planning

      // SETUP
      InitCreateFromJobPlanningSetup;

      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      NumberOfLines := CreateSeveralJobPlanningLines(TimeSheetHeader,JobPlanningLine);

      // EXERCISE & VERIFYF
      Assert.AreEqual(
        NumberOfLines,
        TimeSheetMgt.CalcLinesFromJobPlanning(TimeSheetHeader),
        IncorrectLinesNumberCountedErr);
    END;

    [Test]
    PROCEDURE TestCreateServiceOrderLinesFromTS@9();
    VAR
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1002 : Record 5900;
      TimeSheetApprovalMgt@1004 : Codeunit 951;
    BEGIN
      // [FEATURE] [Time Sheet] [Service Order]
      // [SCENARIO] "Create lines from time sheets" for Service Order creates service order lines, after posting Service Order TS lines are posted.

      // test for function "Create lines from time sheets" for Service Order
      SetUp;

      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,CALCDATE('<+3D>',TimeSheetHeader."Starting Date"));

      // create time sheet line with type Service
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Service,'','','','');
      TimeSheetLine.VALIDATE("Service Order No.",ServiceHeader."No.");
      TimeSheetLine.MODIFY;

      // create details for 2 days
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetHeader."Starting Date" + 1,LibraryTimeSheet.GetRandomDecimal);
      // submit and approve
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // create lines from time sheet
      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      TimeSheetLine.FIND;
      // Posted should be Yes
      Assert.IsTrue(TimeSheetLine.Posted,Text008);

      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateServiceOrderLinesFromFewTSLines@10();
    VAR
      TimeSheetHeader@1006 : Record 950;
      TimeSheetLine@1005 : ARRAY [3] OF Record 951;
      ServiceHeader@1001 : Record 5900;
      TimeSheetApprovalMgt@1000 : Codeunit 951;
      RowCount@1007 : Integer;
    BEGIN
      // test for function "Create lines from time sheets" for Service Order for 3 lines in time sheet
      SetUp;

      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,CALCDATE('<+3D>',TimeSheetHeader."Starting Date"));

      // create several time sheet line with type Service
      FOR RowCount := 1 TO 3 DO BEGIN
        // create time sheet line with type Service
        LibraryTimeSheet.CreateTimeSheetLine(
          TimeSheetHeader,TimeSheetLine[RowCount],TimeSheetLine[RowCount].Type::Service,'','','','');
        TimeSheetLine[RowCount].VALIDATE("Service Order No.",ServiceHeader."No.");
        TimeSheetLine[RowCount].MODIFY;
        // create details for 2 days
        LibraryTimeSheet.CreateTimeSheetDetail(
          TimeSheetLine[RowCount],TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
        LibraryTimeSheet.CreateTimeSheetDetail(
          TimeSheetLine[RowCount],TimeSheetHeader."Starting Date" + 1,LibraryTimeSheet.GetRandomDecimal);
        // submit and approve
        TimeSheetApprovalMgt.Submit(TimeSheetLine[RowCount]);
        TimeSheetApprovalMgt.Approve(TimeSheetLine[RowCount]);
        // create lines from time sheet
        TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);
      END;

      VerifyServiceLinesQty(ServiceHeader."No.",TimeSheetHeader."No.");

      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateServiceOrderLinesFromFewTS@14();
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1007 : Record 5900;
      TimeSheetNo@1001 : ARRAY [2] OF Code[20];
    BEGIN
      SetUp;
      // test for function "Create lines from time sheets" for Service Order for few time sheets
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);
      TimeSheetNo[1] := TimeSheetHeader."No.";

      ServiceHeader.FIND;

      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);
      TimeSheetNo[2] := TimeSheetHeader."No.";

      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      VerifyServiceLinesQtyForFewTS(ServiceHeader."No.",TimeSheetNo);

      TearDown;
    END;

    [Test]
    PROCEDURE TestAutoCreateServiceOrderLinesFromFewTSLines@79();
    VAR
      TimeSheetHeader@1006 : Record 950;
      TimeSheetLine@1005 : Record 951;
      ServiceHeader@1001 : Record 5900;
      TimeSheetApprovalMgt@1000 : Codeunit 951;
      RowCount@1007 : Integer;
      NoOfTimeSheetLines@1002 : Integer;
    BEGIN
      // test for function "Create lines from time sheets" for Service Order with 3 time sheet lines and auto create in service setup = true
      SetUp;
      ModifyCopyTimeSheetLinesinServiceSetup(TRUE);

      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,CALCDATE('<+3D>',TimeSheetHeader."Starting Date"));

      // create several time sheet line with type Service
      NoOfTimeSheetLines := LibraryRandom.RandIntInRange(2,10);
      FOR RowCount := 1 TO NoOfTimeSheetLines DO BEGIN
        // create time sheet line with type Service
        CLEAR(TimeSheetLine);
        LibraryTimeSheet.CreateTimeSheetLine(
          TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Service,'','','','');
        TimeSheetLine.VALIDATE("Service Order No.",ServiceHeader."No.");
        TimeSheetLine.MODIFY;
        // create details for 2 days
        LibraryTimeSheet.CreateTimeSheetDetail(
          TimeSheetLine,TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
        LibraryTimeSheet.CreateTimeSheetDetail(
          TimeSheetLine,TimeSheetHeader."Starting Date" + 1,LibraryTimeSheet.GetRandomDecimal);
        // submit and approve
        TimeSheetApprovalMgt.Submit(TimeSheetLine);
        TimeSheetApprovalMgt.Approve(TimeSheetLine);
      END;

      VerifyServiceLinesQty(ServiceHeader."No.",TimeSheetHeader."No.");
      ModifyCopyTimeSheetLinesinServiceSetup(FALSE);
      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateServiceOrderLinesByTSLine@69();
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1007 : Record 5900;
    BEGIN
      SetUp;
      // test for function "CreateServDocLinesFromTSLine" for Service Order from mulitple few time sheets
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);

      ServiceHeader.FIND;
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);
      TimeSheetMgt.CreateServDocLinesFromTSLine(ServiceHeader,TimeSheetLine);

      // Verify: only one timesheet header was added to the service order.
      VerifyServiceLinesQty(ServiceHeader."No.",TimeSheetHeader."No.");

      TearDown;
    END;

    [Test]
    PROCEDURE TestApproveTSServiceLinesWithAutoCreateFalse@70();
    VAR
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1003 : Record 5902;
      TimeSheetApprovalMgt@1004 : Codeunit 951;
      ServiceLinesCount@1005 : Integer;
    BEGIN
      // test to approve time sheet lines with Service Order when the auto flag is set to false.
      SetUp;
      ModifyCopyTimeSheetLinesinServiceSetup(FALSE);
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,CALCDATE('<+3D>',TimeSheetHeader."Starting Date"));

      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceLinesCount := ServiceLine.COUNT;

      // create time sheet line with type Service
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Service,'','','','');
      TimeSheetLine.VALIDATE("Service Order No.",ServiceHeader."No.");
      TimeSheetLine.MODIFY;

      // create details for 2 days
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetHeader."Starting Date" + 1,LibraryTimeSheet.GetRandomDecimal);
      // submit and approve
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // verify: no service lines have been created by approval.
      CLEAR(ServiceLine);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      Assert.AreEqual(ServiceLinesCount,ServiceLine.COUNT,'No service Lines have been added');

      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateServiceOrderLinesFromUnchargealeTS@11();
    VAR
      TimeSheetHeader@1003 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      SetUp;
      // test for function "Create lines from time sheets" for line in time sheet with Chargeagle = No
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);
      TimeSheetLine.VALIDATE(Chargeable,FALSE);
      TimeSheetLine.MODIFY;

      // create lines from time sheet
      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);
      VerifyServiceLinesQty(ServiceHeader."No.",TimeSheetHeader."No.");

      TearDown;
    END;

    [Test]
    PROCEDURE TestDeleteAndCreateServiceOrderLinesFromTS@35();
    VAR
      TimeSheetHeader@1003 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1004 : Record 5902;
    BEGIN
      SetUp;
      // test for function "Create lines from time sheets" for Service Order
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);

      // create lines from time sheet
      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      // delete service order lines
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      IF ServiceLine.FINDFIRST THEN
        ServiceLine.DELETE;

      // create lines from time sheet
      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      // verify Service Lines Qty.
      VerifyServiceLinesQty(ServiceHeader."No.",TimeSheetHeader."No.");

      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateServiceOrderLinesFromTSWithAllTypesOfLines@16();
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1000 : Record 951;
      ServiceHeader@1007 : Record 5900;
      TimeSheetApprovalMgt@1001 : Codeunit 951;
    BEGIN
      SetUp;
      LibraryTimeSheet.InitServiceScenario(TimeSheetHeader,TimeSheetLine,ServiceHeader);
      AddRowsWithDifferentTypes(TimeSheetHeader,TimeSheetLine);

      // set quantities for lines
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.SETRANGE(Status,TimeSheetLine.Status::Open);
      IF TimeSheetLine.FINDSET THEN
        REPEAT
          LibraryTimeSheet.CreateTimeSheetDetail(
            TimeSheetLine,TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
        UNTIL TimeSheetLine.NEXT = 0;

      // submit and approve
      IF TimeSheetLine.FINDSET THEN
        REPEAT
          TimeSheetApprovalMgt.Submit(TimeSheetLine);
          TimeSheetApprovalMgt.Approve(TimeSheetLine);
        UNTIL TimeSheetLine.NEXT = 0;

      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      VerifyServiceLinesQty(ServiceHeader."No.",TimeSheetHeader."No.");

      TearDown;
    END;

    [Test]
    PROCEDURE TestResourceDimensionWayFromTSToServiceOrder@17();
    VAR
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1006 : Record 951;
      ServiceHeader@1007 : Record 5900;
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
      DefaultDimension@1003 : Record 352;
      LibraryDimension@1001 : Codeunit 131001;
      TimeSheetApprovalMgt@1005 : Codeunit 951;
    BEGIN
      SetUp;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionResource(
        DefaultDimension,TimeSheetHeader."Resource No.",Dimension.Code,DimensionValue.Code);

      // create service order (or credit memo)
      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,CALCDATE('<+3D>',TimeSheetHeader."Starting Date"));

      // create time sheet line with type Service
      LibraryTimeSheet.CreateTimeSheetLine(
        TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Service,'','',ServiceHeader."No.",'');
      TimeSheetLine.VALIDATE("Service Order No.",ServiceHeader."No.");
      TimeSheetLine.MODIFY;

      // set quantities for lines
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetHeader."Starting Date",LibraryTimeSheet.GetRandomDecimal);
      LibraryTimeSheet.CreateTimeSheetDetail(
        TimeSheetLine,TimeSheetHeader."Starting Date" + 1,LibraryTimeSheet.GetRandomDecimal);

      // submit and approve lines
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      TimeSheetMgt.CreateServDocLinesFromTS(ServiceHeader);

      VerifyDimensions(ServiceHeader."No.",TimeSheetHeader."Resource No.");

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetLineJobDetailHandler,StrMenuHandler)]
    PROCEDURE TestWorkTypeChargChangingForJobApprove@15();
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheetLine@1003 : Record 951;
      Resource@1001 : Record 156;
      WorkType@1006 : Record 200;
      ManagerTSbyJob@1007 : TestPage 954;
    BEGIN
      SetUp;
      LibraryTimeSheet.InitScenarioWTForJob(TimeSheetHeader);

      // create work type
      Resource.GET(TimeSheetHeader."Resource No.");
      LibraryTimeSheet.CreateWorkType(WorkType,Resource."Base Unit of Measure");

      // find time sheet
      WORKDATE := TimeSheetHeader."Starting Date";
      ManagerTSbyJob.OPENEDIT;

      // change chargeable and work type on the manager page by job
      ManagerTSbyJob.FILTER.SETFILTER("Time Sheet No.",TimeSheetHeader."No.");
      ManagerTSbyJob.FILTER.SETFILTER(Status,'Submitted');
      GlobalWorkTypeCode := WorkType.Code;
      GlobalChargeable := FALSE;
      ManagerTSbyJob.Description.ASSISTEDIT;
      ManagerTSbyJob.Action37.INVOKE;

      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDFIRST;
      TimeSheetLine.TESTFIELD("Work Type Code",GlobalWorkTypeCode);
      TimeSheetLine.TESTFIELD(Chargeable,GlobalChargeable);

      TearDown;
    END;

    [Test]
    [HandlerFunctions(TimeSheetLineServDetailHandler,StrMenuHandler)]
    PROCEDURE TestWorkTypeChargChangingForServiceOrderApprove@22();
    VAR
      TimeSheetHeader@1005 : Record 950;
      TimeSheetLine@1004 : Record 951;
      ServiceHeader@1003 : Record 5900;
      Resource@1002 : Record 156;
      WorkType@1008 : Record 200;
      ManagerTimeSheet@1000 : TestPage 952;
    BEGIN
      SetUp;
      LibraryTimeSheet.InitScenarioWTForServiceOrder(TimeSheetHeader,ServiceHeader);

      // create work type
      Resource.GET(TimeSheetHeader."Resource No.");
      LibraryTimeSheet.CreateWorkType(WorkType,Resource."Base Unit of Measure");

      // change chargeable and work type on the manager page
      WORKDATE := TimeSheetHeader."Starting Date";
      ManagerTimeSheet.OPENEDIT;
      ManagerTimeSheet.CurrTimeSheetNo.VALUE := TimeSheetHeader."No.";
      ManagerTimeSheet.FILTER.SETFILTER(Status,'Submitted');
      ManagerTimeSheet.FIRST;
      GlobalWorkTypeCode := WorkType.Code;
      GlobalChargeable := FALSE;
      ManagerTimeSheet.Description.ASSISTEDIT;
      ManagerTimeSheet.Approve.INVOKE;

      // compare table and page results
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.FINDFIRST;
      TimeSheetLine.TESTFIELD("Work Type Code",GlobalWorkTypeCode);
      TimeSheetLine.TESTFIELD(Chargeable,GlobalChargeable);

      TearDown;
    END;

    [Test]
    PROCEDURE UnitTestAllStatusesInDifferentLines@18();
    VAR
      TimeSheetHeader@1003 : Record 950;
      TimeSheetLine@1000 : Record 951;
      TimeSheetPostingEntry@1001 : Record 958;
    BEGIN
      // create an empty time sheet
      SetUp;
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      VerifyTimeSheetStatuses(TimeSheetHeader,FALSE,FALSE,FALSE,FALSE,FALSE);

      // add a new line
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      VerifyTimeSheetStatuses(TimeSheetHeader,TRUE,FALSE,FALSE,FALSE,FALSE);

      // add a new line, submit it
      AddTimeSheetLineWithStatus(TimeSheetHeader,TimeSheetLine.Status::Submitted);
      VerifyTimeSheetStatuses(TimeSheetHeader,TRUE,TRUE,FALSE,FALSE,FALSE);

      // add a new line, reject it
      AddTimeSheetLineWithStatus(TimeSheetHeader,TimeSheetLine.Status::Rejected);
      VerifyTimeSheetStatuses(TimeSheetHeader,TRUE,TRUE,TRUE,FALSE,FALSE);

      // add a new line, approve it
      AddTimeSheetLineWithStatus(TimeSheetHeader,TimeSheetLine.Status::Approved);
      VerifyTimeSheetStatuses(TimeSheetHeader,TRUE,TRUE,TRUE,TRUE,FALSE);

      // add a new line, posted = TRUE
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      TimeSheetLine.Posted := TRUE;
      TimeSheetLine.MODIFY;

      // add posting entry
      TimeSheetPostingEntry.INIT;
      TimeSheetPostingEntry."Time Sheet No." := TimeSheetLine."Time Sheet No.";
      TimeSheetPostingEntry."Time Sheet Line No." := TimeSheetLine."Line No.";
      TimeSheetPostingEntry."Time Sheet Date" := TimeSheetLine."Time Sheet Starting Date";
      TimeSheetPostingEntry.Quantity := 1;
      TimeSheetPostingEntry.INSERT;

      VerifyTimeSheetStatuses(TimeSheetHeader,TRUE,TRUE,TRUE,TRUE,TRUE);

      TearDown;
    END;

    [Test]
    PROCEDURE TestFlowChartCalculation@13();
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1001 : Record 951;
      TimeSheetDetail@1011 : Record 952;
      TimeSheetChartSetup@1013 : Record 959;
      TimeSheetApprovalMgt@1008 : Codeunit 951;
      MeasureType@1012 : 'Open,Submitted,Rejected,Approved,Scheduled,Posted,Not posted';
      OpenQty@1002 : Decimal;
      SubmittedQty@1003 : Decimal;
      RejectedQty@1004 : Decimal;
      ApprovedQty@1005 : Decimal;
      ScheduledQty@1006 : Decimal;
      PostedQty@1007 : Decimal;
    BEGIN
      // test for time sheet flow chart calculation procedure
      SetUp;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      SetupTimeSheetChart(TimeSheetChartSetup,USERID,TimeSheetHeader."Starting Date");

      // init quiantities
      OpenQty := LibraryTimeSheet.GetRandomDecimal;
      SubmittedQty := LibraryTimeSheet.GetRandomDecimal;
      RejectedQty := LibraryTimeSheet.GetRandomDecimal;
      ApprovedQty := LibraryTimeSheet.GetRandomDecimal;
      ScheduledQty := LibraryTimeSheet.GetRandomDecimal;
      PostedQty := ROUND(ApprovedQty / 3);

      // create capacity for resource
      CreateResCapacity(TimeSheetHeader."Resource No.",TimeSheetHeader."Starting Date",ScheduledQty);

      // open line
      CreateTSResLineWithDetail(TimeSheetHeader,TimeSheetLine,OpenQty);

      // submitted line
      CreateTSResLineWithDetail(TimeSheetHeader,TimeSheetLine,SubmittedQty);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);

      // rejected line
      CreateTSResLineWithDetail(TimeSheetHeader,TimeSheetLine,RejectedQty);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Reject(TimeSheetLine);

      // approved line
      CreateTSResLineWithDetail(TimeSheetHeader,TimeSheetLine,ApprovedQty);
      TimeSheetApprovalMgt.Submit(TimeSheetLine);
      TimeSheetApprovalMgt.Approve(TimeSheetLine);

      // emulate posting
      TimeSheetDetail.GET(TimeSheetLine."Time Sheet No.",TimeSheetLine."Line No.",TimeSheetLine."Time Sheet Starting Date");
      TimeSheetMgt.CreateTSPostingEntry(TimeSheetDetail,PostedQty,TimeSheetDetail.Date,'','');

      TimeSheetHeader.CALCFIELDS(Quantity);

      // verify numbers for Show by Status
      TimeSheetChartSetup."Show by" := TimeSheetChartSetup."Show by"::Status;
      VerifyFlowChartCalcAmount(OpenQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Open);
      VerifyFlowChartCalcAmount(SubmittedQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Submitted);
      VerifyFlowChartCalcAmount(RejectedQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Rejected);
      VerifyFlowChartCalcAmount(ApprovedQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Approved);
      VerifyFlowChartCalcAmount(ScheduledQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Scheduled);
      // verify numbers for Show by Posted
      TimeSheetChartSetup."Show by" := TimeSheetChartSetup."Show by"::Posted;
      VerifyFlowChartCalcAmount(PostedQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Posted);
      VerifyFlowChartCalcAmount(
        TimeSheetHeader.Quantity - PostedQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::"Not posted");

      TearDown;
    END;

    [Test]
    PROCEDURE TestFlowChartCalculationType@31();
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1001 : Record 951;
      TimeSheetChartSetup@1013 : Record 959;
      ServiceHeader@1009 : Record 5900;
      AssemblyHeader@1014 : Record 900;
      AssemblyLine@1015 : Record 901;
      LibraryAssembly@1016 : Codeunit 132207;
      MeasureType@1012 : 'Open,Submitted,Rejected,Approved,Scheduled,Posted,Not Posted,Resource,Job,Service,Absence,Assembly Order';
      ResourceQty@1002 : Decimal;
      JobQty@1003 : Decimal;
      AbsenceQty@1004 : Decimal;
      ServiceQty@1005 : Decimal;
      ScheduledQty@1006 : Decimal;
      AssemblyQty@1007 : Decimal;
    BEGIN
      // test for time sheet flow chart calculation procedure
      SetUp;

      // init quiantities
      ResourceQty := LibraryTimeSheet.GetRandomDecimal;
      JobQty := LibraryTimeSheet.GetRandomDecimal;
      AbsenceQty := LibraryTimeSheet.GetRandomDecimal;
      ServiceQty := LibraryTimeSheet.GetRandomDecimal;
      ScheduledQty := LibraryTimeSheet.GetRandomDecimal;

      LibraryTimeSheet.InitAssemblyBackwayScenario(TimeSheetHeader,AssemblyHeader,AssemblyLine,TRUE);
      SetupTimeSheetChart(TimeSheetChartSetup,USERID,TimeSheetHeader."Starting Date");

      // create capacity for resource
      CreateResCapacity(TimeSheetHeader."Resource No.",TimeSheetHeader."Starting Date",ScheduledQty);

      // resource line:
      CreateTSResLineWithDetail(TimeSheetHeader,TimeSheetLine,ResourceQty);

      // job line:
      CreateTSJobLineWithDetail(TimeSheetHeader,TimeSheetLine,JobQty);

      // absence line:
      CreateTSAbsenceLineWithDetail(TimeSheetHeader,TimeSheetLine,AbsenceQty);

      // service line:
      LibraryTimeSheet.CreateServiceOrder(ServiceHeader,TimeSheetHeader."Starting Date");
      // create time sheet line with type Service
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Service,'','','','');
      TimeSheetLine.VALIDATE("Service Order No.",ServiceHeader."No.");
      TimeSheetLine.MODIFY;
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetHeader."Starting Date",ServiceQty);

      // assembly line:
      AssemblyQty := AssemblyLine.Quantity;
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');

      TimeSheetChartSetup."Show by" := TimeSheetChartSetup."Show by"::Type;

      VerifyFlowChartCalcAmount(ResourceQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Resource);
      VerifyFlowChartCalcAmount(JobQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Job);
      VerifyFlowChartCalcAmount(AbsenceQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Absence);
      VerifyFlowChartCalcAmount(ServiceQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::Service);
      VerifyFlowChartCalcAmount(AssemblyQty,TimeSheetChartSetup,TimeSheetHeader."Resource No.",MeasureType::"Assembly Order");

      TearDown;
    END;

    [Test]
    PROCEDURE TestFlowChartAddColumnsTimeSheetApprover@51();
    BEGIN
      // test verifies the resource list for manager-approver, not time sheet admin
      InitTimeSheetChartApprover(FALSE);

      TearDown;
    END;

    [Test]
    PROCEDURE TestFlowChartAddColumnsTimeSheetAdmin@44();
    BEGIN
      // test verifies the resource list for manager-approver, time sheet admin
      InitTimeSheetChartApprover(TRUE);

      TearDown;
    END;

    [Test]
    PROCEDURE TestMeasureIndex2MeasureType_Status@39();
    VAR
      TimeSheetChartSetup@1000 : Record 959;
    BEGIN
      VerifyMeasureIndex2MeasureTypeTransformation(TimeSheetChartSetup."Show by"::Status);
    END;

    [Test]
    PROCEDURE TestMeasureIndex2MeasureType_Type@43();
    VAR
      TimeSheetChartSetup@1000 : Record 959;
    BEGIN
      VerifyMeasureIndex2MeasureTypeTransformation(TimeSheetChartSetup."Show by"::Type);
    END;

    [Test]
    PROCEDURE TestMeasureIndex2MeasureType_Posted@38();
    VAR
      TimeSheetChartSetup@1000 : Record 959;
    BEGIN
      VerifyMeasureIndex2MeasureTypeTransformation(TimeSheetChartSetup."Show by"::Posted);
    END;

    [Test]
    PROCEDURE TestFlowChartMeasuresName_Status@45();
    VAR
      TimeSheetChartSetup@1000 : Record 959;
      TimeSheetChartMgt@1001 : Codeunit 952;
    BEGIN
      TimeSheetChartMgt.OnOpenPage(TimeSheetChartSetup);
      VerifyFlowChartMeasures(TimeSheetChartSetup."Show by"::Status);
    END;

    [Test]
    PROCEDURE TestFlowChartMeasuresName_Type@62();
    VAR
      TimeSheetChartSetup@1000 : Record 959;
      TimeSheetChartMgt@1001 : Codeunit 952;
    BEGIN
      TimeSheetChartMgt.OnOpenPage(TimeSheetChartSetup);
      VerifyFlowChartMeasures(TimeSheetChartSetup."Show by"::Type);
    END;

    [Test]
    PROCEDURE TestFlowChartMeasuresName_Posted@59();
    VAR
      TimeSheetChartSetup@1000 : Record 959;
      TimeSheetChartMgt@1001 : Codeunit 952;
    BEGIN
      TimeSheetChartMgt.OnOpenPage(TimeSheetChartSetup);
      VerifyFlowChartMeasures(TimeSheetChartSetup."Show by"::Posted);
    END;

    LOCAL PROCEDURE CreateTimeSheets@64(StartDate@1000 : Date;TimeSheetsQty@1001 : Integer;ResourceNo@1002 : Code[20]);
    VAR
      CreateTimeSheets@1003 : Report 950;
    BEGIN
      CreateTimeSheets.InitParameters(StartDate,TimeSheetsQty,ResourceNo,FALSE,TRUE);
      CreateTimeSheets.USEREQUESTPAGE(FALSE);
      CreateTimeSheets.RUN;
    END;

    [Test]
    PROCEDURE CreateTSLinesFromServiceLine@55();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1002 : Record 951;
      TimeSheetDetail@1003 : Record 952;
      ServiceLine@1005 : Record 5902;
      Date@1004 : Date;
      DocumentNo@1006 : Code[20];
    BEGIN
      // UT for TimeSheetMgt.CreateTSLineFromServiceLine

      // setup
      Date := WORKDATE;
      DocumentNo := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(DocumentNo));
      InitUTScenario(Resource,TimeSheetHeader,Date);
      InitServiceLine(ServiceLine,Resource."No.",Date);

      // exercise
      TimeSheetMgt.CreateTSLineFromServiceLine(ServiceLine,DocumentNo,TRUE);

      // verify
      VerifyCreatedTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetDetail,Date);

      TimeSheetLine.TESTFIELD(Description,ServiceLine.Description);
      TimeSheetLine.TESTFIELD("Service Order No.",ServiceLine."Document No.");
      TimeSheetLine.TESTFIELD("Service Order Line No.",ServiceLine."Line No.");
      TimeSheetLine.TESTFIELD("Work Type Code",ServiceLine."Work Type Code");
      TimeSheetLine.TESTFIELD(Chargeable,TRUE);

      TimeSheetDetail.TESTFIELD(Quantity,-ServiceLine."Qty. to Ship");

      TearDown;
    END;

    [Test]
    PROCEDURE CreateTSLinesFromServiceShptLine@53();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1002 : Record 951;
      TimeSheetDetail@1003 : Record 952;
      ServiceShipmentLine@1005 : Record 5991;
      Date@1004 : Date;
    BEGIN
      // UT for TimeSheetMgt.CreateTSLineFromServiceShptLine

      // setup
      Date := WORKDATE;
      InitUTScenario(Resource,TimeSheetHeader,Date);
      InitServiceShptLine(ServiceShipmentLine,Resource."No.",Date);

      // exercise
      TimeSheetMgt.CreateTSLineFromServiceShptLine(ServiceShipmentLine);

      // verify
      VerifyCreatedTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetDetail,Date);

      TimeSheetLine.TESTFIELD(Description,ServiceShipmentLine.Description);
      TimeSheetLine.TESTFIELD("Work Type Code",ServiceShipmentLine."Work Type Code");
      TimeSheetLine.TESTFIELD("Service Order No.",ServiceShipmentLine."Order No.");
      TimeSheetLine.TESTFIELD("Service Order Line No.",ServiceShipmentLine."Order Line No.");

      TimeSheetDetail.TESTFIELD(Quantity,-ServiceShipmentLine."Qty. Shipped Not Invoiced");

      TearDown;
    END;

    [Test]
    PROCEDURE CreateTSFromSL_notTSResource@57();
    VAR
      Resource@1000 : Record 156;
      ServiceLine@1005 : Record 5902;
    BEGIN
      // UT for TimeSheetMgt.CreateTSLineFromServiceLine
      // if Resource."Use Time Sheet" = FALSE, then time sheet line should not be created

      // setup
      Resource.INIT;
      Resource."No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(Resource."No."));
      Resource.INSERT;

      InitServiceLine(ServiceLine,Resource."No.",WORKDATE);

      // exercise (Document Number is not needed in this case)
      TimeSheetMgt.CreateTSLineFromServiceLine(ServiceLine,'',TRUE);

      // verify
      VerifyNoTSLineExistsForServiceDocLine(ServiceLine."Document No.",ServiceLine."Line No.");

      TearDown;
    END;

    [Test]
    PROCEDURE CreateTSFromSL_SLwithTSNo@28();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      ServiceLine@1005 : Record 5902;
      Date@1004 : Date;
      DocumentNo@1006 : Code[20];
    BEGIN
      // UT for TimeSheetMgt.CreateTSLineFromServiceLine
      // if ServiceLine."Time Sheet No." is fileld in, then time sheet line should not be created

      // setup
      Date := WORKDATE;
      DocumentNo := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(DocumentNo));
      InitUTScenario(Resource,TimeSheetHeader,Date);
      InitServiceLine(ServiceLine,Resource."No.",Date);
      ServiceLine."Time Sheet No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(ServiceLine."Time Sheet No."));

      // exercise
      TimeSheetMgt.CreateTSLineFromServiceLine(ServiceLine,DocumentNo,TRUE);

      // verify
      VerifyNoTSLineExistsForServiceDocLine(ServiceLine."Document No.",ServiceLine."Line No.");

      TearDown;
    END;

    [Test]
    PROCEDURE CreateTSFromSSL_SSLwithTSNo@32();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      ServiceShipmentLine@1005 : Record 5991;
      Date@1004 : Date;
    BEGIN
      // UT for TimeSheetMgt.CreateTSLineFromServiceShptLine
      // if ServiceShipmentLine."Time Sheet No." is fileld in, then time sheet line should not be created

      // setup
      Date := WORKDATE;
      InitUTScenario(Resource,TimeSheetHeader,Date);
      InitServiceShptLine(ServiceShipmentLine,Resource."No.",Date);
      ServiceShipmentLine."Time Sheet No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(ServiceShipmentLine."Time Sheet No."));

      // exercise
      TimeSheetMgt.CreateTSLineFromServiceShptLine(ServiceShipmentLine);

      // verify
      VerifyNoTSLineExistsForServiceDocLine(ServiceShipmentLine."Order No.",ServiceShipmentLine."Order Line No.");

      TearDown;
    END;

    LOCAL PROCEDURE CreateTimeSheetResource@65(VAR Resource@1000 : Record 156;CurrUserID@1002 : Boolean);
    VAR
      UserSetup@1001 : Record 91;
    BEGIN
      // create user setup
      LibraryTimeSheet.CreateUserSetup(UserSetup,CurrUserID);

      // resource - person
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      Resource.VALIDATE("Time Sheet Owner User ID",UserSetup."User ID");
      Resource.VALIDATE("Time Sheet Approver User ID",UserSetup."User ID");
      Resource.MODIFY;
    END;

    LOCAL PROCEDURE CreateSeveralJobPlanningLines@75(TimeSheetHeader@1001 : Record 950;VAR JobPlanningLine@1000 : Record 1003) NumberOfLines : Integer;
    VAR
      Job@1002 : Record 167;
      JobTask@1003 : Record 1001;
      i@1006 : Integer;
    BEGIN
      LibraryTimeSheet.FindJob(Job);

      NumberOfLines := LibraryRandom.RandIntInRange(2,5);
      FOR i := 1 TO NumberOfLines DO BEGIN
        LibraryJob.CreateJobTask(Job,JobTask);
        LibraryTimeSheet.CreateJobPlanningLine(JobPlanningLine,Job."No.",JobTask."Job Task No.",
          TimeSheetHeader."Resource No.",TimeSheetHeader."Starting Date");
      END;
    END;

    [Test]
    PROCEDURE UpdateTimeAllocation_modify@60();
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1001 : Record 951;
      DateQuantity@1002 : ARRAY [7] OF Decimal;
      UpdateType@1005 : 'Modify,Insert,Delete';
    BEGIN
      // UT for TimeSheetMgt.UpdateTimeAllocation
      // all weekday values should be modified

      // setup
      InitUTScenarioUpdTimeAlloc(TimeSheetHeader,TimeSheetLine,DateQuantity,UpdateType::Modify);

      // exercise
      TimeSheetMgt.UpdateTimeAllocation(TimeSheetLine,DateQuantity);

      // verify
      VerifyTimeSheetAllocation(TimeSheetHeader,TimeSheetLine,DateQuantity);

      TearDown;
    END;

    [Test]
    PROCEDURE UpdateTimeAllocation_insert@85();
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1001 : Record 951;
      DateQuantity@1002 : ARRAY [7] OF Decimal;
      UpdateType@1005 : 'Modify,Insert,Delete';
    BEGIN
      // UT for TimeSheetMgt.UpdateTimeAllocation
      // all weekday values should be inserted

      // setup
      InitUTScenarioUpdTimeAlloc(TimeSheetHeader,TimeSheetLine,DateQuantity,UpdateType::Insert);

      // exercise
      TimeSheetMgt.UpdateTimeAllocation(TimeSheetLine,DateQuantity);

      // verify
      VerifyTimeSheetAllocation(TimeSheetHeader,TimeSheetLine,DateQuantity);
      VerifyTimeSheetAllocationInserted(TimeSheetHeader."Starting Date",TimeSheetLine);

      TearDown;
    END;

    [Test]
    PROCEDURE UpdateTimeAllocation_delete@86();
    VAR
      TimeSheetHeader@1000 : Record 950;
      TimeSheetLine@1001 : Record 951;
      TimeSheetDetail@1003 : Record 952;
      DateQuantity@1002 : ARRAY [7] OF Decimal;
      UpdateType@1005 : 'Modify,Insert,Delete';
    BEGIN
      // UT for TimeSheetMgt.UpdateTimeAllocation
      // all weekday values should be deleted

      // setup
      InitUTScenarioUpdTimeAlloc(TimeSheetHeader,TimeSheetLine,DateQuantity,UpdateType::Delete);

      // exercise
      TimeSheetMgt.UpdateTimeAllocation(TimeSheetLine,DateQuantity);

      // verify
      TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      Assert.IsTrue(TimeSheetDetail.ISEMPTY,Text023);

      TearDown;
    END;

    [Test]
    PROCEDURE CreateTSLinesFromAssemblyLine@33();
    VAR
      Resource@1000 : Record 156;
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1002 : Record 951;
      TimeSheetDetail@1003 : Record 952;
      AssemblyHeader@1005 : Record 900;
      AssemblyLine@1007 : Record 901;
      Date@1004 : Date;
    BEGIN
      // UT for TimeSheetMgt.CreateTSLineFromAssemblyLine

      // setup
      Date := WORKDATE;
      InitUTScenario(Resource,TimeSheetHeader,Date);
      InitAssemblyOrder(AssemblyHeader,AssemblyLine,Resource."No.",Date);

      // exercise
      TimeSheetMgt.CreateTSLineFromAssemblyLine(AssemblyHeader,AssemblyLine,AssemblyLine."Quantity to Consume (Base)");

      // verify
      VerifyCreatedTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetDetail,Date);

      TimeSheetLine.TESTFIELD(Type,TimeSheetLine.Type::"Assembly Order");
      TimeSheetLine.TESTFIELD(Description,AssemblyLine.Description);
      TimeSheetLine.TESTFIELD("Assembly Order No.",AssemblyLine."Document No.");
      TimeSheetLine.TESTFIELD("Assembly Order Line No.",AssemblyLine."Line No.");

      TimeSheetDetail.TESTFIELD(Type,TimeSheetLine.Type::"Assembly Order");
      TimeSheetDetail.TESTFIELD("Assembly Order No.",AssemblyLine."Document No.");
      TimeSheetDetail.TESTFIELD("Assembly Order Line No.",AssemblyLine."Line No.");
      TimeSheetDetail.TESTFIELD(Quantity,AssemblyLine."Quantity to Consume (Base)");

      TearDown;
    END;

    [Test]
    PROCEDURE TestTimeSheetAssemblyLineNotCreatedManually@49();
    VAR
      TimeSheetHeader@1001 : Record 950;
      TimeSheetLine@1002 : Record 951;
    BEGIN
      SetUp;

      // create time sheet
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);

      // add a new time sheet line
      TimeSheetLine.INIT;
      TimeSheetLine.VALIDATE("Time Sheet No.",TimeSheetHeader."No.");
      TimeSheetLine.VALIDATE("Line No.",10000);
      TimeSheetLine.INSERT;

      // try to set the Assembly type of the line
      ASSERTERROR TimeSheetLine.VALIDATE(Type,TimeSheetLine.Type::"Assembly Order");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Text022) > 0,Text021);

      TearDown;
    END;

    [Test]
    PROCEDURE TestCreateTimeSheets_negative@46();
    VAR
      UserSetup@1008 : Record 91;
      TimeSheetHeader@1000 : Record 950;
    BEGIN
      // check that only time sheet administrator can create time sheets
      SetUp;

      UserSetup.GET(USERID);
      UserSetup."Time Sheet Admin." := FALSE;
      UserSetup.MODIFY;

      ASSERTERROR LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      Assert.ExpectedError(Text027);
    END;

    [Test]
    [HandlerFunctions(TimeSheetListHandler)]
    PROCEDURE TestLookupOwnerTimeSheet@63();
    BEGIN
      // verify function LookupOwnerTimeSheet - select time sheet using lookup from the time sheet card page
      LookupTimeSheetScenario(0);
    END;

    [Test]
    [HandlerFunctions(ManagerTimeSheetListHandler)]
    PROCEDURE TestLookupApproverTimeSheet@80();
    BEGIN
      // verify function LookupApproverTimeSheet - select manager time sheet using lookup from the time sheet card page
      LookupTimeSheetScenario(1);
    END;

    [Test]
    [HandlerFunctions(TimeSheetArchiveListHandler)]
    PROCEDURE TestLookupOwnerTimeSheetArchive@105();
    BEGIN
      // verify function LookupOwnerTimeSheet - select time sheet archive using lookup from the time sheet card page
      LookupTimeSheetArchScenario(0);
    END;

    [Test]
    [HandlerFunctions(ManagerTimeSheetArchiveListHandler)]
    PROCEDURE TestLookupApproverTimeSheetArchive@104();
    BEGIN
      // verify function LookupApproverTimeSheet - select manager time sheet archive using lookup from the time sheet card page
      LookupTimeSheetArchScenario(1);
    END;

    [Test]
    PROCEDURE JobWithBlockedAllCannotBeValidatedInTimeSheetUT@77();
    VAR
      Job@1000 : Record 167;
      TimeSheetLine@1001 : Record 951;
    BEGIN
      // [FEATURE] [Job] [UT]
      // [SCENARIO 216452] Job having Blocked = "All" cannot be validated in Time Sheet Line

      CreateJobWithBlocked(Job,Job.Blocked::All);
      TimeSheetLine.Type := TimeSheetLine.Type::Job;
      ASSERTERROR TimeSheetLine.VALIDATE("Job No.",Job."No.");

      Assert.ExpectedError(STRSUBSTNO('Job %1 must not be blocked with type All.',Job."No."));
    END;

    [Test]
    PROCEDURE JobWithBlockedPostingCanBeValidatedInTimeSheetUT@84();
    VAR
      Job@1000 : Record 167;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1001 : Record 951;
    BEGIN
      // [FEATURE] [Job] [UT]
      // [SCENARIO 216452] Job having Blocked = "Posting" can be validated in Time Sheet Line

      CreateJobWithBlocked(Job,Job.Blocked::Posting);
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      TimeSheetLine."Time Sheet No." := TimeSheetHeader."No.";
      TimeSheetLine.Type := TimeSheetLine.Type::Job;
      TimeSheetLine.VALIDATE("Job No.",Job."No.");

      TimeSheetLine.TESTFIELD("Job No.",Job."No.");
    END;

    [Test]
    PROCEDURE JobWithBlockedBlankCanBeValidatedInTimeSheetUT@82();
    VAR
      Job@1000 : Record 167;
      TimeSheetHeader@1002 : Record 950;
      TimeSheetLine@1001 : Record 951;
    BEGIN
      // [FEATURE] [Job] [UT]
      // [SCENARIO 216452] Job having Blocked = " " can be validated in Time Sheet Line

      CreateJobWithBlocked(Job,Job.Blocked::" ");
      LibraryTimeSheet.CreateTimeSheet(TimeSheetHeader,FALSE);
      TimeSheetLine."Time Sheet No." := TimeSheetHeader."No.";
      TimeSheetLine.Type := TimeSheetLine.Type::Job;
      TimeSheetLine.VALIDATE("Job No.",Job."No.");

      TimeSheetLine.TESTFIELD("Job No.",Job."No.");
    END;

    LOCAL PROCEDURE InitUTScenario@58(VAR Resource@1000 : Record 156;VAR TimeSheetHeader@1001 : Record 950;Date@1003 : Date);
    BEGIN
      Resource.INIT;
      Resource."No." :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Resource.FIELDNO("No."),DATABASE::Resource),1,MAXSTRLEN(Resource."No."));
      Resource."Use Time Sheet" := TRUE;
      Resource.INSERT;

      TimeSheetHeader.INIT;
      TimeSheetHeader."No." :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(TimeSheetHeader.FIELDNO("No."),DATABASE::"Time Sheet Header"),1,
          MAXSTRLEN(TimeSheetHeader."No."));
      TimeSheetHeader."Resource No." := Resource."No.";
      TimeSheetHeader."Starting Date" := CALCDATE('<-CW>',Date);
      TimeSheetHeader."Ending Date" := CALCDATE('<CW>',Date);
      TimeSheetHeader."Approver User ID" := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetHeader."Approver User ID"));
      TimeSheetHeader.INSERT;
    END;

    LOCAL PROCEDURE InitUTScenarioUpdTimeAlloc@73(VAR TimeSheetHeader@1001 : Record 950;VAR TimeSheetLine@1000 : Record 951;VAR DateQuantity@1004 : ARRAY [7] OF Decimal;UpdateType@1005 : 'Modify,Insert,Delete');
    VAR
      TimeSheetDetail@1002 : Record 952;
      i@1003 : Integer;
    BEGIN
      TimeSheetHeader."No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetHeader."No."));
      TimeSheetHeader."Starting Date" := CALCDATE('<-CW>',WORKDATE);
      TimeSheetHeader."Ending Date" := CALCDATE('<CW>',WORKDATE);
      TimeSheetHeader.INSERT;

      TimeSheetLine."Time Sheet No." := TimeSheetHeader."No.";
      TimeSheetLine."Line No." := 10000;
      TimeSheetLine."Job No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetLine."Job No."));
      TimeSheetLine."Job Task No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetLine."Job Task No."));
      TimeSheetLine."Service Order No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetLine."Service Order No."));
      TimeSheetLine."Assembly Order No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetLine."Assembly Order No."));
      TimeSheetLine."Cause of Absence Code" := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN(TimeSheetLine."Cause of Absence Code"));
      TimeSheetLine.INSERT;

      FOR i := 1 TO 7 DO BEGIN
        IF UpdateType IN [UpdateType::Modify,UpdateType::Delete] THEN BEGIN
          // insert data to modify or delete
          TimeSheetDetail.INIT;
          TimeSheetDetail."Time Sheet No." := TimeSheetLine."Time Sheet No.";
          TimeSheetDetail."Time Sheet Line No." := TimeSheetLine."Line No.";
          TimeSheetDetail.Date := TimeSheetHeader."Starting Date" + i - 1;
          TimeSheetDetail.Quantity := LibraryTimeSheet.GetRandomDecimal;
          TimeSheetDetail.Posted := TRUE;
          TimeSheetDetail.INSERT;
        END;

        // prepare time allocation to modify or insert
        IF UpdateType IN [UpdateType::Modify,UpdateType::Insert] THEN
          DateQuantity[i] := LibraryTimeSheet.GetRandomDecimal;
      END;
    END;

    LOCAL PROCEDURE InitServiceLine@48(VAR ServiceLine@1000 : Record 5902;ResourceNo@1001 : Code[20];Date@1003 : Date);
    BEGIN
      WITH ServiceLine DO BEGIN
        "Document No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("Document No."));
        "Line No." := ROUND(LibraryUtility.GenerateRandomFraction * 10000,1);
        "No." := ResourceNo;
        "Posting Date" := Date;
        "Work Type Code" := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("Work Type Code"));
        Description := FORMAT(CREATEGUID);
        "Qty. to Ship" := LibraryUtility.GenerateRandomFraction * 10;
      END;
    END;

    LOCAL PROCEDURE InitServiceShptLine@54(VAR ServiceShipmentLine@1000 : Record 5991;ResourceNo@1001 : Code[20];Date@1002 : Date);
    BEGIN
      WITH ServiceShipmentLine DO BEGIN
        "Document No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("Document No."));
        "Line No." := ROUND(LibraryUtility.GenerateRandomFraction * 10000,1);
        "No." := ResourceNo;
        "Posting Date" := Date;
        "Work Type Code" := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("Work Type Code"));
        Description := FORMAT(CREATEGUID);
        "Qty. Shipped Not Invoiced" := LibraryUtility.GenerateRandomFraction * 10;
        "Order No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("Order No."));
        "Order Line No." := ROUND(LibraryUtility.GenerateRandomFraction * 10000,1);
      END;
    END;

    LOCAL PROCEDURE InitAssemblyOrder@40(VAR AssemblyHeader@1000 : Record 900;VAR AssemblyLine@1002 : Record 901;ResourceNo@1001 : Code[20];Date@1003 : Date);
    BEGIN
      WITH AssemblyHeader DO BEGIN
        INIT;
        "No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("No."));
        "Posting No." := COPYSTR(FORMAT(CREATEGUID),1,MAXSTRLEN("Posting No."));
        "Posting Date" := Date;
      END;

      WITH AssemblyLine DO BEGIN
        INIT;
        Type := Type::Resource;
        "Document No." := AssemblyHeader."No.";
        "Line No." := ROUND(LibraryUtility.GenerateRandomFraction * 10000,1);
        "No." := ResourceNo;
        Description := FORMAT(CREATEGUID);
        "Quantity to Consume (Base)" := LibraryUtility.GenerateRandomFraction * 10;
      END;
    END;

    LOCAL PROCEDURE InitTimeSheetChartApprover@52(IsAdmin@1002 : Boolean);
    VAR
      UserSetup@1001 : Record 91;
      TimeSheetChartSetup@1000 : Record 959;
      Resource@1003 : Record 156;
      BusChartBuf@1004 : Record 485;
      BusChartMapColumn@1005 : Record 486;
    BEGIN
      // setup for managers with different roles testing
      SetUp;

      // resource - person
      LibraryTimeSheet.CreateTimeSheetResource(Resource);
      Resource.VALIDATE("Time Sheet Owner User ID",UserSetup."User ID");
      IF IsAdmin THEN
        Resource.VALIDATE("Time Sheet Approver User ID",UserSetup."User ID")
      ELSE
        Resource.VALIDATE("Time Sheet Approver User ID",USERID);
      Resource.MODIFY;

      SetupTimeSheetChart(TimeSheetChartSetup,USERID,WORKDATE);

      IF IsAdmin THEN BEGIN
        UserSetup.GET(USERID);
        UserSetup.VALIDATE("Time Sheet Admin.",TRUE);
        UserSetup.MODIFY;
      END;

      IF NOT IsAdmin THEN
        Resource.SETRANGE("Time Sheet Approver User ID",USERID);
      Resource.SETRANGE("Use Time Sheet",TRUE);

      ChangeTimeSheetChartShowBy(TimeSheetChartSetup,BusChartBuf,TimeSheetChartSetup."Show by"::Status);

      WITH BusChartBuf DO BEGIN
        IF FindFirstColumn(BusChartMapColumn) AND Resource.FINDSET THEN
          REPEAT
            Assert.AreEqual(Resource."No.",BusChartMapColumn.Name,Text026);
          UNTIL NOT NextColumn(BusChartMapColumn) AND (Resource.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE SetupTimeSheetChart@12(VAR TimeSheetChartSetup@1000 : Record 959;UID@1001 : Text;Date@1003 : Date);
    BEGIN
      IF NOT TimeSheetChartSetup.GET(UID) THEN BEGIN
        TimeSheetChartSetup."User ID" := UID;
        TimeSheetChartSetup.INSERT;
      END;
      TimeSheetChartSetup."Starting Date" := Date;
      TimeSheetChartSetup.MODIFY;
    END;

    LOCAL PROCEDURE VerifyCreatedTimeSheetLine@56(TimeSheetHeader@1002 : Record 950;VAR TimeSheetLine@1001 : Record 951;VAR TimeSheetDetail@1000 : Record 952;Date@1003 : Date);
    BEGIN
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      Assert.IsTrue(TimeSheetLine.FINDFIRST,Text017);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Approved);
      TimeSheetLine.TESTFIELD(Posted,TRUE);
      TimeSheetLine.TESTFIELD("Approver ID",TimeSheetHeader."Approver User ID");
      TimeSheetLine.TESTFIELD("Approved By",USERID);
      TimeSheetLine.TESTFIELD("Approval Date",TODAY);

      TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
      Assert.IsTrue(TimeSheetDetail.FINDFIRST,Text018);
      TimeSheetDetail.TESTFIELD(Date,Date);
    END;

    LOCAL PROCEDURE VerifyNoTSLineExistsForServiceDocLine@30(ServiceOrderNo@1000 : Code[20];ServiceOrderLineNo@1001 : Integer);
    VAR
      TimeSheetLine@1002 : Record 951;
    BEGIN
      TimeSheetLine.SETRANGE(Type,TimeSheetLine.Type::Service);
      TimeSheetLine.SETRANGE("Service Order No.",ServiceOrderNo);
      TimeSheetLine.SETRANGE("Service Order Line No.",ServiceOrderLineNo);
      Assert.IsTrue(TimeSheetLine.ISEMPTY,Text019);
    END;

    LOCAL PROCEDURE VerifyTimeSheetAllocation@90(TimeSheetHeader@1002 : Record 950;TimeSheetLine@1000 : Record 951;DateQuantity@1001 : ARRAY [7] OF Decimal);
    VAR
      TimeSheetDetail@1004 : Record 952;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 7 DO BEGIN
        TimeSheetDetail.GET(TimeSheetLine."Time Sheet No.",TimeSheetLine."Line No.",TimeSheetHeader."Starting Date" + i - 1);
        TimeSheetDetail.TESTFIELD(Quantity,DateQuantity[i]);
        TimeSheetDetail.TESTFIELD("Posted Quantity",DateQuantity[i]);
        TimeSheetDetail.TESTFIELD(Posted,TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyTimeSheetAllocationInserted@72(TimeSheetStartDate@1001 : Date;TimeSheetLine@1000 : Record 951);
    VAR
      TimeSheetDetail@1004 : Record 952;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO 7 DO BEGIN
        TimeSheetDetail.GET(TimeSheetLine."Time Sheet No.",TimeSheetLine."Line No.",TimeSheetStartDate + i - 1);
        TimeSheetDetail.TESTFIELD("Job No.",TimeSheetLine."Job No.");
        TimeSheetDetail.TESTFIELD("Job Task No.",TimeSheetLine."Job Task No.");
        TimeSheetDetail.TESTFIELD("Cause of Absence Code",TimeSheetLine."Cause of Absence Code");
        TimeSheetDetail.TESTFIELD("Service Order No.",TimeSheetLine."Service Order No.");
        TimeSheetDetail.TESTFIELD("Assembly Order No.",TimeSheetLine."Assembly Order No.");
      END;
    END;

    LOCAL PROCEDURE VerifyFlowChartCalcAmount@37(ReferenceQty@1002 : Decimal;TimeSheetChartSetup@1001 : Record 959;ResourceNo@1000 : Code[20];MeasureType@1003 : Option);
    VAR
      TimeSheetChartMgt@1004 : Codeunit 952;
    BEGIN
      Assert.AreEqual(
        ReferenceQty,
        TimeSheetChartMgt.CalcAmount(
          TimeSheetChartSetup,
          ResourceNo,
          MeasureType),
        Text024);
    END;

    LOCAL PROCEDURE AddRowsWithDifferentTypes@20(VAR TimeSheetHeader@1000 : Record 950;VAR TimeSheetLine@1008 : Record 951);
    VAR
      CauseOfAbsence@1006 : Record 5206;
      Job@1005 : Record 167;
      JobTask@1004 : Record 1001;
      Employee@1003 : Record 5200;
      Resource@1001 : Record 156;
    BEGIN
      // create time sheet line with type Resource
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      TimeSheetLine.Description := 'simple resource line';
      TimeSheetLine.MODIFY;

      // create time sheet line with type Job
      // find job and task
      LibraryTimeSheet.FindJob(Job);
      LibraryTimeSheet.FindJobTask(Job."No.",JobTask);
      // job's responsible person (resource) must have Owner ID filled in
      Resource.GET(Job."Person Responsible");
      Resource."Time Sheet Owner User ID" := USERID;
      Resource.MODIFY;
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",
        JobTask."Job Task No.",'','');

      // create time sheet line with type Absence
      LibraryHumanResource.CreateEmployee(Employee);
      Employee."Resource No." := TimeSheetHeader."Resource No.";
      Employee.MODIFY;

      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Absence,'','','',
        CauseOfAbsence.Code);
      TimeSheetLine.Chargeable := FALSE;
      TimeSheetLine.MODIFY;
    END;

    LOCAL PROCEDURE VerifyDimensions@34(ServiceOrderNo@1001 : Code[20];ResourceNo@1000 : Code[20]);
    VAR
      ServiceLine@1005 : Record 5902;
      DimensionSetEntry@1008 : Record 480;
      DefaultDimension@1012 : Record 352;
      DimensionSetEntryQty@1015 : Integer;
      EqualDimensionQty@1016 : Integer;
    BEGIN
      // calc service order quantity
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceLine.SETRANGE("No.",ResourceNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Resource);
      IF ServiceLine.FINDSET THEN
        REPEAT
          // find resource's dimensions by service line
          DimensionSetEntry.SETRANGE("Dimension Set ID",ServiceLine."Dimension Set ID");
          IF DimensionSetEntry.FINDSET THEN BEGIN
            DimensionSetEntryQty := 0;
            EqualDimensionQty := 0;
            REPEAT
              // find resource's dimensions by resource no.
              DefaultDimension.SETRANGE("Table ID",DATABASE::Resource);
              DefaultDimension.SETRANGE("No.",ResourceNo);
              IF DefaultDimension.FINDSET THEN
                REPEAT
                  IF DefaultDimension."Dimension Code" = DimensionSetEntry."Dimension Code" THEN
                    EqualDimensionQty := EqualDimensionQty + 1;
                UNTIL DefaultDimension.NEXT = 0;
              DimensionSetEntryQty := DimensionSetEntryQty + 1;
            UNTIL DimensionSetEntry.NEXT = 0;
            Assert.AreEqual(DimensionSetEntryQty,EqualDimensionQty,Text011);
          END;
        UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLinesQty@23(ServiceOrderNo@1001 : Code[20];TimeSheetNo@1000 : Code[20]);
    VAR
      ServiceLine@1005 : Record 5902;
      TimeSheetLine@1006 : Record 951;
      TimeSheetDetail@1004 : Record 952;
      ServiceLineQty@1003 : Decimal;
      ServiceLineQtyCon@1009 : Decimal;
      TimeSheetCharQty@1010 : Decimal;
      TimeSheetUncharQty@1011 : Decimal;
      Chargable@1007 : Boolean;
    BEGIN
      // calc service order quantity
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      // type
      IF ServiceLine.FINDSET THEN
        REPEAT
          ServiceLineQtyCon := ServiceLineQtyCon + ServiceLine."Qty. to Consume";
          ServiceLineQty := ServiceLineQty + ServiceLine.Quantity;
        UNTIL ServiceLine.NEXT = 0;

      // calc time sheet quantity
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetNo);
      IF TimeSheetLine.FINDSET THEN
        REPEAT
          Chargable := TimeSheetLine.Chargeable;
          TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetNo);
          TimeSheetDetail.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
          TimeSheetDetail.SETRANGE("Service Order No.",ServiceOrderNo);
          IF TimeSheetDetail.FINDSET THEN
            REPEAT
              IF Chargable THEN
                TimeSheetCharQty := TimeSheetCharQty + TimeSheetDetail.Quantity
              ELSE
                TimeSheetUncharQty := TimeSheetUncharQty + TimeSheetDetail.Quantity
            UNTIL TimeSheetDetail.NEXT = 0;
        UNTIL TimeSheetLine.NEXT = 0;

      Assert.AreEqual(ServiceLineQtyCon,TimeSheetUncharQty,Text009);
      Assert.AreEqual(ServiceLineQty,TimeSheetCharQty + TimeSheetUncharQty,Text010);
    END;

    LOCAL PROCEDURE VerifyServiceLinesQtyForFewTS@19(ServiceOrderNo@1001 : Code[20];TimeSheetNo@1000 : ARRAY [2] OF Code[20]);
    VAR
      ServiceLine@1005 : Record 5902;
      ServiceLineQty@1003 : Decimal;
      ServiceLineQtyCon@1009 : Decimal;
      TimeSheetCharQty@1010 : ARRAY [2] OF Decimal;
      TimeSheetUncharQty@1011 : ARRAY [2] OF Decimal;
    BEGIN
      // calc service order quantity
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);

      // type
      IF ServiceLine.FINDSET THEN
        REPEAT
          ServiceLineQtyCon := ServiceLineQtyCon + ServiceLine."Qty. to Consume";
          ServiceLineQty := ServiceLineQty + ServiceLine.Quantity;
        UNTIL ServiceLine.NEXT = 0;

      CalcTSQuantity(ServiceOrderNo,TimeSheetNo[1],TimeSheetUncharQty[1],TimeSheetCharQty[1]);
      CalcTSQuantity(ServiceOrderNo,TimeSheetNo[2],TimeSheetUncharQty[2],TimeSheetCharQty[2]);

      Assert.AreEqual(ServiceLineQtyCon,TimeSheetUncharQty[1] + TimeSheetUncharQty[2],Text009);
      Assert.AreEqual(
        ServiceLineQty,TimeSheetCharQty[1] + TimeSheetUncharQty[1] + TimeSheetCharQty[2] + TimeSheetUncharQty[2],Text010);
    END;

    LOCAL PROCEDURE VerifyTimeSheetStatuses@61(TimeSheetHeader@1005 : Record 950;OpenExists@1000 : Boolean;SubmittedExists@1001 : Boolean;RejectedExists@1002 : Boolean;ApprovedExists@1003 : Boolean;PostedExists@1004 : Boolean);
    BEGIN
      TimeSheetHeader.CALCFIELDS("Open Exists","Submitted Exists","Rejected Exists","Approved Exists","Posted Exists");

      Assert.AreEqual(OpenExists,TimeSheetHeader."Open Exists",
        STRSUBSTNO(Text016,TimeSheetHeader.FIELDCAPTION("Open Exists")));
      Assert.AreEqual(SubmittedExists,TimeSheetHeader."Submitted Exists",
        STRSUBSTNO(Text016,TimeSheetHeader.FIELDCAPTION("Submitted Exists")));
      Assert.AreEqual(RejectedExists,TimeSheetHeader."Rejected Exists",
        STRSUBSTNO(Text016,TimeSheetHeader.FIELDCAPTION("Rejected Exists")));
      Assert.AreEqual(ApprovedExists,TimeSheetHeader."Approved Exists",
        STRSUBSTNO(Text016,TimeSheetHeader.FIELDCAPTION("Approved Exists")));
      Assert.AreEqual(PostedExists,TimeSheetHeader."Posted Exists",
        STRSUBSTNO(Text016,TimeSheetHeader.FIELDCAPTION("Posted Exists")));
    END;

    LOCAL PROCEDURE CalcTSQuantity@21(ServiceOrderNo@1008 : Code[20];TimeSheetNo@1000 : Code[20];VAR QtyUnchargLines@1001 : Decimal;VAR QtyChargLines@1002 : Decimal);
    VAR
      TimeSheetLine@1006 : Record 951;
      TimeSheetDetail@1004 : Record 952;
    BEGIN
      // calc time sheet quantity
      TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetNo);
      IF TimeSheetLine.FINDSET THEN
        REPEAT
          TimeSheetDetail.SETRANGE("Time Sheet No.",TimeSheetNo);
          TimeSheetDetail.SETRANGE("Time Sheet Line No.",TimeSheetLine."Line No.");
          TimeSheetDetail.SETRANGE("Service Order No.",ServiceOrderNo);
          IF TimeSheetDetail.FINDSET THEN
            REPEAT
              IF TimeSheetLine.Chargeable THEN
                QtyChargLines := QtyChargLines + TimeSheetDetail.Quantity
              ELSE
                QtyUnchargLines := QtyUnchargLines + TimeSheetDetail.Quantity;
            UNTIL TimeSheetDetail.NEXT = 0;
        UNTIL TimeSheetLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateJobWithBlocked@78(VAR Job@1000 : Record 167;BlockedOption@1001 : Option);
    BEGIN
      Job.INIT;
      Job."No." := LibraryUtility.GenerateGUID;
      Job.Blocked := BlockedOption;
      Job.INSERT;
    END;

    LOCAL PROCEDURE CreateResCapacity@36(ResourceNo@1000 : Code[20];Date@1001 : Date;Capacity@1002 : Decimal);
    VAR
      ResCapacityEntry@1003 : Record 160;
      EntryNo@1004 : Integer;
    BEGIN
      IF ResCapacityEntry.FINDLAST THEN;
      EntryNo := ResCapacityEntry."Entry No." + 1;
      ResCapacityEntry.INIT;
      ResCapacityEntry."Entry No." := EntryNo;
      ResCapacityEntry."Resource No." := ResourceNo;
      ResCapacityEntry.Date := Date;
      ResCapacityEntry.Capacity := Capacity;
      ResCapacityEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateTSResLineWithDetail@41(TimeSheetHeader@1000 : Record 950;VAR TimeSheetLine@1001 : Record 951;Qty@1002 : Decimal);
    BEGIN
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetLine."Time Sheet Starting Date",Qty);
    END;

    LOCAL PROCEDURE CreateTSJobLineWithDetail@25(TimeSheetHeader@1000 : Record 950;VAR TimeSheetLine@1001 : Record 951;Qty@1002 : Decimal);
    VAR
      Resource@1003 : Record 156;
      Job@1004 : Record 167;
      JobTask@1005 : Record 1001;
    BEGIN
      LibraryTimeSheet.FindJob(Job);
      LibraryTimeSheet.FindJobTask(Job."No.",JobTask);
      // job's responsible person (resource) must have Owner ID filled in
      Resource.SETRANGE("No.",TimeSheetHeader."Resource No.");
      Resource.FINDFIRST;
      Resource.GET(Job."Person Responsible");
      Resource."Time Sheet Owner User ID" := USERID;
      Resource.MODIFY;
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Job,Job."No.",
        JobTask."Job Task No.",'','');
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetLine."Time Sheet Starting Date",Qty);
    END;

    LOCAL PROCEDURE CreateTSAbsenceLineWithDetail@26(TimeSheetHeader@1000 : Record 950;VAR TimeSheetLine@1001 : Record 951;Qty@1002 : Decimal);
    VAR
      Employee@1003 : Record 5200;
      CauseOfAbsence@1004 : Record 5206;
    BEGIN
      LibraryHumanResource.CreateEmployee(Employee);
      Employee."Resource No." := TimeSheetHeader."Resource No.";
      Employee.MODIFY;

      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Absence,'','','',
        CauseOfAbsence.Code);
      TimeSheetLine.Chargeable := FALSE;
      TimeSheetLine.MODIFY;
      LibraryTimeSheet.CreateTimeSheetDetail(TimeSheetLine,TimeSheetLine."Time Sheet Starting Date",Qty);
    END;

    LOCAL PROCEDURE AddTimeSheetLineWithStatus@24(TimeSheetHeader@1001 : Record 950;TimeSheetLineStatus@1002 : Option);
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      LibraryTimeSheet.CreateTimeSheetLine(TimeSheetHeader,TimeSheetLine,TimeSheetLine.Type::Resource,'','','','');
      TimeSheetLine.Status := TimeSheetLineStatus;
      TimeSheetLine.MODIFY;
    END;

    LOCAL PROCEDURE ChangeTimeSheetChartShowBy@27(VAR TimeSheetChartSetup@1000 : Record 959;VAR BusChartBuf@1004 : Record 485;ShowBy@1001 : Option);
    VAR
      TimeSheetChartMgt@1002 : Codeunit 952;
    BEGIN
      TimeSheetChartSetup."Show by" := ShowBy;
      TimeSheetChartSetup.MODIFY;
      TimeSheetChartMgt.UpdateData(BusChartBuf);
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetLineJobDetailHandler@67(VAR TimeSheetLineJobDetail@1000 : TestPage 966);
    BEGIN
      TimeSheetLineJobDetail."Work Type Code".VALUE := GlobalWorkTypeCode;
      TimeSheetLineJobDetail.Chargeable.VALUE := FORMAT(GlobalChargeable);
      TimeSheetLineJobDetail.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetLineServDetailHandler@112(VAR TimeSheetLineServiceDetail@1000 : TestPage 967);
    BEGIN
      TimeSheetLineServiceDetail."Work Type Code".VALUE := GlobalWorkTypeCode;
      TimeSheetLineServiceDetail.Chargeable.VALUE := FORMAT(GlobalChargeable);
      TimeSheetLineServiceDetail.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetListHandler@89(VAR TimeSheetList@1000 : TestPage 951);
    VAR
      TimeSheetNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TimeSheetNo);
      TimeSheetList.FILTER.SETFILTER("No.",TimeSheetNo);
      TimeSheetList.FIRST;
      TimeSheetList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ManagerTimeSheetListHandler@81(VAR ManagerTimeSheetList@1000 : TestPage 953);
    VAR
      TimeSheetNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TimeSheetNo);
      ManagerTimeSheetList.FILTER.SETFILTER("No.",TimeSheetNo);
      ManagerTimeSheetList.FIRST;
      ManagerTimeSheetList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE TimeSheetArchiveListHandler@107(VAR TimeSheetArchiveList@1000 : TestPage 960);
    VAR
      TimeSheetNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TimeSheetNo);
      TimeSheetArchiveList.FILTER.SETFILTER("No.",TimeSheetNo);
      TimeSheetArchiveList.FIRST;
      TimeSheetArchiveList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ManagerTimeSheetArchiveListHandler@106(VAR ManagerTimeSheetArcList@1000 : TestPage 962);
    VAR
      TimeSheetNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TimeSheetNo);
      ManagerTimeSheetArcList.FILTER.SETFILTER("No.",TimeSheetNo);
      ManagerTimeSheetArcList.FIRST;
      ManagerTimeSheetArcList.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@71(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 2;
    END;

    LOCAL PROCEDURE VerifyMeasureIndex2MeasureTypeTransformation@42(ShowBy@1000 : 'Status,Type,Posted');
    VAR
      TimeSheetChartSetup@1001 : Record 959;
    BEGIN
      TimeSheetChartSetup."Show by" := ShowBy;
      CASE ShowBy OF
        ShowBy::Status:
          BEGIN
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Open,TimeSheetChartSetup.MeasureIndex2MeasureType(0),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Submitted,TimeSheetChartSetup.MeasureIndex2MeasureType(1),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Rejected,TimeSheetChartSetup.MeasureIndex2MeasureType(2),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Approved,TimeSheetChartSetup.MeasureIndex2MeasureType(3),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Scheduled,TimeSheetChartSetup.MeasureIndex2MeasureType(4),'');
          END;
        ShowBy::Type:
          BEGIN
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Resource,TimeSheetChartSetup.MeasureIndex2MeasureType(0),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Job,TimeSheetChartSetup.MeasureIndex2MeasureType(1),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Service,TimeSheetChartSetup.MeasureIndex2MeasureType(2),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Absence,TimeSheetChartSetup.MeasureIndex2MeasureType(3),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::"Assembly Order",TimeSheetChartSetup.MeasureIndex2MeasureType(4),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Scheduled,TimeSheetChartSetup.MeasureIndex2MeasureType(5),'');
          END;
        ShowBy::Status:
          BEGIN
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Posted,TimeSheetChartSetup.MeasureIndex2MeasureType(0),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::"Not Posted",TimeSheetChartSetup.MeasureIndex2MeasureType(1),'');
            Assert.AreEqual(TimeSheetChartSetup."Measure Type"::Scheduled,TimeSheetChartSetup.MeasureIndex2MeasureType(2),'');
          END;
      END;
    END;

    LOCAL PROCEDURE GetMeasureTypeName@47(TimeSheetChartSetup@1001 : Record 959;i@1000 : Integer) : Text[50];
    BEGIN
      TimeSheetChartSetup."Measure Type" := TimeSheetChartSetup.MeasureIndex2MeasureType(i);
      EXIT(FORMAT(TimeSheetChartSetup."Measure Type"));
    END;

    LOCAL PROCEDURE VerifyFlowChartMeasures@50(ShowBy@1001 : 'Status,Type,Posted');
    VAR
      TimeSheetChartSetup@1000 : Record 959;
      BusChartBuf@1006 : Record 485;
      BusChartMapMeasure@1007 : Record 486;
      TimeSheetChartMgt@1004 : Codeunit 952;
      Index@1005 : Integer;
    BEGIN
      Index := 0;
      TimeSheetChartSetup.GET(USERID);
      TimeSheetChartSetup."Show by" := ShowBy;
      TimeSheetChartSetup.MODIFY;
      TimeSheetChartMgt.UpdateData(BusChartBuf);
      WITH BusChartBuf DO BEGIN
        IF FindFirstMeasure(BusChartMapMeasure) THEN
          REPEAT
            Assert.AreEqual(GetMeasureTypeName(TimeSheetChartSetup,Index),BusChartMapMeasure.Name,Text025);
            Index := Index + 1;
          UNTIL NOT NextMeasure(BusChartMapMeasure);
      END;
    END;

    LOCAL PROCEDURE InitLookupTimeSheetScenario@66(VAR TimeSheetHeader@1004 : Record 950;VAR TimeSheetNo@1003 : Code[20];VAR TargetTimeSheetNo@1001 : Code[20]);
    VAR
      Resource@1000 : Record 156;
      TimeSheetQty@1006 : Integer;
    BEGIN
      SetUp;
      LibraryVariableStorage.Clear;

      // create resource and link it to the user
      CreateTimeSheetResource(Resource,TRUE);

      // create time sheets
      TimeSheetQty := LibraryRandom.RandIntInRange(5,10);
      CreateTimeSheets(FindTimeSheetStartDate,TimeSheetQty,Resource."No.");

      // find numbers of initial and target time sheets
      TimeSheetHeader.SETRANGE("Resource No.",Resource."No.");
      TimeSheetHeader.FINDFIRST;
      TimeSheetNo := TimeSheetHeader."No.";
      TimeSheetHeader.FINDLAST;
      TargetTimeSheetNo := TimeSheetHeader."No.";
      LibraryVariableStorage.Enqueue(TargetTimeSheetNo);
    END;

    LOCAL PROCEDURE InitCreateFromJobPlanningSetup@68();
    BEGIN
      SetUp;
      ResourcesSetup."Time Sheet by Job Approval" := ResourcesSetup."Time Sheet by Job Approval"::Never;
      ResourcesSetup.MODIFY;
    END;

    LOCAL PROCEDURE LookupTimeSheetScenario@83(Role@1005 : 'Owner,Approver');
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheetLine@1002 : Record 951;
      TimeSheetNo@1003 : Code[20];
      TargetTimeSheetNo@1001 : Code[20];
    BEGIN
      // SETUP
      InitLookupTimeSheetScenario(TimeSheetHeader,TimeSheetNo,TargetTimeSheetNo);

      // EXERCISE
      CASE Role OF
        Role::Owner:
          TimeSheetMgt.LookupOwnerTimeSheet(TimeSheetNo,TimeSheetLine,TimeSheetHeader);
        Role::Approver:
          TimeSheetMgt.LookupApproverTimeSheet(TimeSheetNo,TimeSheetLine,TimeSheetHeader);
      END;

      // VERIFY
      VerifyTargetTimeSheetNo(TimeSheetNo,TargetTimeSheetNo);

      TearDown;
    END;

    LOCAL PROCEDURE LookupTimeSheetArchScenario@102(Role@1005 : 'Owner,Approver');
    VAR
      TimeSheetHeader@1004 : Record 950;
      TimeSheetHeaderArchive@1002 : Record 954;
      TimeSheetLineArchive@1008 : Record 955;
      TimeSheetNo@1003 : Code[20];
      TargetTimeSheetNo@1001 : Code[20];
    BEGIN
      // SETUP
      InitLookupTimeSheetScenario(TimeSheetHeader,TimeSheetNo,TargetTimeSheetNo);

      // copy time sheets to archive
      TimeSheetHeader.FINDFIRST;
      REPEAT
        TimeSheetHeaderArchive.TRANSFERFIELDS(TimeSheetHeader);
        TimeSheetHeaderArchive.INSERT;
      UNTIL TimeSheetHeader.NEXT = 0;

      // EXERCISE
      CASE Role OF
        Role::Owner:
          TimeSheetMgt.LookupOwnerTimeSheetArchive(TimeSheetNo,TimeSheetLineArchive,TimeSheetHeaderArchive);
        Role::Approver:
          TimeSheetMgt.LookupApproverTimeSheetArchive(TimeSheetNo,TimeSheetLineArchive,TimeSheetHeaderArchive);
      END;

      // VERIFY
      VerifyTargetTimeSheetNo(TimeSheetNo,TargetTimeSheetNo);

      TearDown;
    END;

    LOCAL PROCEDURE VerifyTargetTimeSheetNo@76(TimeSheetNo@1009 : Code[20];TargetTimeSheetNo@1005 : Code[20]);
    BEGIN
      Assert.AreEqual(TargetTimeSheetNo,TimeSheetNo,Text028);
    END;

    LOCAL PROCEDURE FindTimeSheetStartDate@74() : Date;
    VAR
      AccountingPeriod@1000 : Record 50;
      Date@1002 : Record 2000000007;
    BEGIN
      // find first open accounting period
      LibraryTimeSheet.GetAccountingPeriod(AccountingPeriod);

      // find first DOW after accounting period starting date
      Date.SETRANGE("Period Type",Date."Period Type"::Date);
      Date.SETFILTER("Period Start",'%1..',AccountingPeriod."Starting Date");
      Date.SETRANGE("Period No.",ResourcesSetup."Time Sheet First Weekday" + 1);
      Date.FINDFIRST;

      EXIT(Date."Period Start");
    END;

    LOCAL PROCEDURE ModifyCopyTimeSheetLinesinServiceSetup@91(AutoCreateServiceLines@1000 : Boolean);
    VAR
      ServMgtSetup@1001 : Record 5911;
    BEGIN
      ServMgtSetup.GET;
      ServMgtSetup.VALIDATE("Copy Time Sheet to Order",AutoCreateServiceLines);
      ServMgtSetup.MODIFY;
    END;

    BEGIN
    {
      // [FEATURE] [Time Sheet]
      Unsupported version tags:
      GB: Unable to Execute
      SE: Unable to Execute

      1. TestCreateServiceOrderLinesFromTS. Test for function "Create lines from time sheets" for Service Order.
      2. TestCreateServiceOrderLinesFromFewTSLines. Test for function "Create lines from time sheets" for Service Order for 3 lines in timesheets.
      3. TestCreateServiceOrderLinesFromFewTS. Test for function "Create lines from time sheets" for Service Order for few time sheets.
      4. TestDeleteAndCreateServiceOrderLinesFromTS. Test case to verify that function "Create lines from time sheets" creates new lines after delete.
      5. TestPartialPostingServiceOrder. Test case to verify that user can post not all of the quantities from Service Order
        for one time and then post unposted lines.
      6. TestPartialPostingServiceOrderWithNullQuantityLines. Test case to verify that user can post not all of the quantities from Service Order for one time
        when some of quantities (to ship and to consume) are zero and then change remaining quantites (to ship and to consume) to nonzero post unposted lines.
      7. TestCreateServiceOrderLinesFromTSWithAllTypesOfLines. Test case to verify that function "Create lines from time sheets"
        creates only lines which have type = 'Service' in the Time Sheet.
      8. TestResourceDimensionWayFromTSToServiceOrder. Test case to verify that the resource's dimension appears in Time Sheet and then appears in Service Order
        in lines with this resource from Time Sheet.
      9. TestWorkTypeChargChangingForJobApprove. Test case verifies that manager can change submitted values of Chargeable and Work Type and
        Chargeable and Work Type values in the lines from the Time Sheet Line table and Manager Time Sheet by Job page are the same after approving Time Sheet.
      10. TestWorkTypeChargChangingForServiceOrderApprove. Test case verifies that manager can change submitted values of Chargeable and Work Type and
        Chargeable and Work Type values in the lines from the Time Sheet Line table and Manager Time Sheet page are the same after approving Time Sheet.
      ------------------------------------------------------------------------------------------------------------------------------------------------------
      27.07.2011 - 28.07.2011
      Changed test names ("Test" - the first characters of all test scenarios-functions).
      TestWorkTypeChargChangingForJobApprove uses table functions now (fixed bug with error message: "Unhandled UI: ModalForm 275").

      11. TestStatusPostedServiceLinesFromTS. Test verifies that if we post Service Order with service lines linked with Time Sheet then appropriate Time Sheet
        lines with Type = 'Service' get Posted = <TRUE>.
      ------------------------------------------------------------------------------------------------------------------------------------------------------
      29.07.2011

      12. TestNoStatusesForEmptyTimeSheet. Test verifies that if Time Sheet is empty all statuses have <FALSE> value.
      13. TestOpenStatusForTimeSheetWithOneOpenLine. Test verifies that if Time Sheet is empty all statuses have <FALSE> value except the "Open Exists" status.
      14. TestSubmittedStatusForTimeSheetWithOneSubmittedLine. Test verifies that if Time Sheet is empty all statuses have <FALSE> value except the "Submitted Exists" status.
      15. TestRejectedStatusForTimeSheetWithOneRejectedLine. Test verifies that if Time Sheet is empty all statuses have <FALSE> value except the "Rejected Exists" status.
      16. TestApprovedStatusForTimeSheetWithOneApprovedLine. Test verifies that if Time Sheet is empty all statuses have <FALSE> value except the "Approved Exists" status.
      17. TestPostedStatusForTimeSheetWithOnePostedLine. Test verifies that if Time Sheet is empty all statuses have <FALSE> value except the "Posted Exists" status.
      18. TestApprovedPostedStatusForTimeSheetWithOneApprovedPostedLine. Test verifies that if Time Sheet is empty all statuses have <FALSE> value except the "Approved Exists"
        and the "Posted Exists" statuses.

      TS was redesigned.
      ------------------------------------------------------------------------------------------------------------------------------------------------------
      01.08.2011

      11. TestStatusPostedServiceLinesFromTS.
      Test is deleted.

      Tests edited to unit tests.
      12. UnitTestAllStatusesInDifferentLines.
      Other tests (13-18) are deleted.
      ------------------------------------------------------------------------------------------------------------------------------------------------------
      05.08.2011

      13. TestTimeSheet_ServiceOrderShipInvoice. Test verifies that the line from posted (ship + invoice) Service Order is added to Time Sheet with
        correct values.
      14. TestTimeSheet_ServiceOrderShipConsume. Test verifies that the line from posted (ship + consume) Service Order is added to Time Sheet with
        correct values.
      15. TestTimeSheet_ServiceOrderShip. Test verifies that the line from posted (ship) Service Order is added to Time Sheet with
        correct values.
      16. TestWithoutTimeSheet_ServiceOrderShip. Test verifies that posting Service Order for Resource invokes an error when Resource has Use Time Sheet = TRUE, but has not Time Sheet.
      17. TestCopyLinesFromTimeSheet_PostServiceOrderShip. Test verifies that after copying lines from Time Sheet into Service Order and adding new Service Line and
        posting Service Order we get a new line in the Time Sheet.
      18. TestPostServiceOrderShip_CopyLinesFromTimeSheet. Test verifies that when lines added into Time Sheet from Service Order after posting and a new line is added to the Time
        Sheet only a new line appears in the Service Order after copying lines from the Time Sheet.
      19. TestTimeSheet_ServiceOrderUndoShipment. Test verifies that the line with negative Quantity is added to Time Sheet when undo shipment of Service Order executed.
      20. TestTimeSheet_ServiceOrderPartialShipInvoice. Test verifies that the posted line from Service Order has correct values in the Time Sheet and quantity of posting equals
        to time sheet lines quantity when ship+invoice posting option.
      21. TestTimeSheet_ServiceOrderPartialShipConsume. Test verifies that the posted line from Service Order has correct values in the Time Sheet and quantity of posting equals
        to time sheet lines quantity when ship+consume posting option.
      ------------------------------------------------------------------------------------------------------------------------------------------------------
      12.08.2011

      22. TestTimeSheet_AssemblyOrderPost. Test verifies that after posting 1 line with Resource from Assembly Order the 1 line with correct values is added to the Time Sheet.
      23. TestWithoutTimeSheet_AssemblyOrderPost. Test verifies that posting Assembly Order for Resource invokes an error when Resource has Use Time Sheet = TRUE, but has not Time Sheet.
      24. TestTimeSheet_AssemblyOrderPostWithSimilarLines. Test verifies that after posting 2 line with Resource from Assembly Order 2 lines with correct values are added to the Time Sheet.
      25. TestTimeSheet_AssemblyOrderPartialPost. Test verifies that the partial posting of Assembly Order adds 1 line with Resource with correct values to the Time Sheet at every posting operation.
      26. TestTimeSheetAssemblyLineNotCreatedManually. Test verifies that the user cannot add line with Type = Assembly Order.
      ------------------------------------------------------------------------------------------------------------------------------------------------------
      15.10.2012
      27. TestAutoCreateServiceOrderLinesFromFewTSLines: Verify Service lines are autocreated when service setup copy time sheet lines to order is set to true.
      28. TestCreateServiceOrderLinesByTSLine: Test creating time sheet lines for service order by a time sheet line.
      29. TestApproveTSServiceLinesWithAutoCreateFalse: Test approving time sheet lines from service order with auto approve set to false
    }
    END.
  }
}

