OBJECT Codeunit 134405 ERM Payment Method UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1002 : Codeunit 131000;
      LibraryVariableStorage@1005 : Codeunit 131004;
      Assert@1001 : Codeunit 130000;
      TestFieldErr@1000 : TextConst '@@@="%1=Field;%2=Value;%3=Tablecaption;%4=Field;%5=Value";ENU="%1 must be equal to ''%2''  in %3: %4=%5."';

    [Test]
    PROCEDURE ValidateBalAccountType@2();
    VAR
      PaymentMethod@1000 : Record 289;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      CreateGLAccount(GLAccount);
      PaymentMethod."Bal. Account Type" := PaymentMethod."Bal. Account Type"::"G/L Account";
      PaymentMethod."Bal. Account No." := GLAccount."No.";
      PaymentMethod.MODIFY;

      // Exercise
      PaymentMethod.VALIDATE("Bal. Account Type",PaymentMethod."Bal. Account Type"::"G/L Account");

      // Verify
      PaymentMethod.TESTFIELD("Bal. Account No.",'');
    END;

    [Test]
    PROCEDURE ValidateBalAccountNo@5();
    VAR
      PaymentMethod@1000 : Record 289;
      BankAccount@1001 : Record 270;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      CreateBankAccount(BankAccount);

      // Exercise
      PaymentMethod.VALIDATE("Bal. Account Type",PaymentMethod."Bal. Account Type"::"Bank Account");
      PaymentMethod.VALIDATE("Bal. Account No.",BankAccount."No.");

      // Verify
      PaymentMethod.TESTFIELD("Direct Debit",FALSE);
    END;

    [Test]
    PROCEDURE ValidateBalAccountNoGLAccount@6();
    VAR
      PaymentMethod@1000 : Record 289;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      CreateGLAccount(GLAccount);
      GLAccount."Direct Posting" := TRUE;
      GLAccount.Blocked := FALSE;
      GLAccount."Account Type" := GLAccount."Account Type"::Posting;

      // Exercise
      PaymentMethod.VALIDATE("Bal. Account Type",PaymentMethod."Bal. Account Type"::"G/L Account");
      PaymentMethod.VALIDATE("Bal. Account No.",GLAccount."No.");

      // Verify
    END;

    [Test]
    PROCEDURE ValidatePaymentProcessor@8();
    VAR
      PaymentMethod@1000 : Record 289;
      GLAccount@1001 : Record 15;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      CreateGLAccount(GLAccount);
      PaymentMethod.VALIDATE("Bal. Account Type",PaymentMethod."Bal. Account Type"::"G/L Account");
      PaymentMethod.VALIDATE("Bal. Account No.",GLAccount."No.");
      // Exercise

      ASSERTERROR PaymentMethod.VALIDATE("Payment Processor",PaymentMethod."Payment Processor"::"Dynamics Online");

      // Verify
      Assert.ExpectedError(STRSUBSTNO(TestFieldErr,PaymentMethod.FIELDCAPTION("Bal. Account Type"),
          PaymentMethod."Bal. Account Type"::"Bank Account",
          PaymentMethod.TABLECAPTION,PaymentMethod.FIELDCAPTION(Code),PaymentMethod.Code));
    END;

    [Test]
    PROCEDURE ValidateDirectDebitFalse@11();
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      PaymentMethod."Direct Debit Pmt. Terms Code" :=
        LibraryUtility.GenerateRandomCode(PaymentMethod.FIELDNO("Direct Debit Pmt. Terms Code"),DATABASE::"Payment Method");

      // Exercise
      PaymentMethod.VALIDATE("Direct Debit",FALSE);

      // Verify
      PaymentMethod.TESTFIELD("Direct Debit Pmt. Terms Code",'');
    END;

    [Test]
    PROCEDURE ValidateDirectDebitTrue@15();
    VAR
      PaymentMethod@1000 : Record 289;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      PaymentMethod."Bal. Account No." :=
        LibraryUtility.GenerateRandomCode(PaymentMethod.FIELDNO("Bal. Account No."),DATABASE::"Payment Method");

      // Exercise
      ASSERTERROR PaymentMethod.VALIDATE("Direct Debit",TRUE);

      // Verify
      Assert.ExpectedError(STRSUBSTNO(TestFieldErr,PaymentMethod.FIELDCAPTION("Bal. Account No."),'',
          PaymentMethod.TABLECAPTION,PaymentMethod.FIELDCAPTION(Code),PaymentMethod.Code));
    END;

    [Test]
    PROCEDURE ValidateDirectDebitPmtTermsCode@13();
    VAR
      PaymentMethod@1000 : Record 289;
      PaymentTerms@1001 : Record 3;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      CreatePaymentTerms(PaymentTerms);
      PaymentMethod."Direct Debit" := FALSE;

      // Exercise
      ASSERTERROR PaymentMethod.VALIDATE("Direct Debit Pmt. Terms Code",PaymentTerms.Code);

      // Verify
      Assert.ExpectedError(STRSUBSTNO(TestFieldErr,PaymentMethod.FIELDCAPTION("Direct Debit"),TRUE,
          PaymentMethod.TABLECAPTION,PaymentMethod.FIELDCAPTION(Code),PaymentMethod.Code));
    END;

    [Test]
    [HandlerFunctions(PaymentIdentifiersHandler)]
    PROCEDURE LookupPaymentType@9();
    VAR
      PaymentMethod@1003 : Record 289;
      DataExchDef@1000 : Record 1222;
      DataExchLineDef@1001 : Record 1227;
      TestPaymentMethods@1002 : TestPage 427;
    BEGIN
      Initialize;

      // Setup
      CreatePaymentMethod(PaymentMethod);
      CreateDataExchDef(DataExchDef);
      DataExchLineDef.InsertRec(DataExchDef.Code,'','Name',10);
      DataExchLineDef.InsertRec(DataExchDef.Code,'A','Name A',10);

      LibraryVariableStorage.Enqueue('A');
      LibraryVariableStorage.Enqueue('Name A');

      // Exercise
      TestPaymentMethods.OPENEDIT;
      TestPaymentMethods.GOTORECORD(PaymentMethod);
      TestPaymentMethods."Pmt. Export Line Definition".LOOKUP;
      TestPaymentMethods.OK.INVOKE;

      // Verify
      PaymentMethod.GET(PaymentMethod.Code);
      PaymentMethod.TESTFIELD("Pmt. Export Line Definition",'A');
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE CreateBankAccount@3(VAR BankAccount@1000 : Record 270);
    BEGIN
      BankAccount.INIT;
      BankAccount.VALIDATE("No.",LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("No."),DATABASE::"Bank Account"));
      BankAccount.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentMethod@4(VAR PaymentMethod@1000 : Record 289);
    BEGIN
      PaymentMethod.INIT;
      PaymentMethod.VALIDATE(Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(PaymentMethod.FIELDNO(Code),DATABASE::"Payment Method"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Payment Method",PaymentMethod.FIELDNO(Code))));
      PaymentMethod.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccount@7(VAR GLAccount@1000 : Record 15);
    BEGIN
      GLAccount.INIT;
      GLAccount.VALIDATE(
        "No.",'1' + LibraryUtility.GenerateRandomCode(GLAccount.FIELDNO("No."),DATABASE::"G/L Account"));
      GLAccount.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentTerms@16(VAR PaymentTerms@1001 : Record 3);
    BEGIN
      PaymentTerms.INIT;
      PaymentTerms.VALIDATE(Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(PaymentTerms.FIELDNO(Code),DATABASE::"Payment Terms"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Payment Terms",PaymentTerms.FIELDNO(Code))));
      PaymentTerms.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateDataExchDef@10(VAR DataExchDef@1000 : Record 1222);
    BEGIN
      DataExchDef.INIT;
      DataExchDef.VALIDATE(Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(DataExchDef.FIELDNO(Code),DATABASE::"Data Exch. Def"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Data Exch. Def",DataExchDef.FIELDNO(Code))));
      DataExchDef.Type := DataExchDef.Type::"Payment Export";
      DataExchDef.INSERT;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentIdentifiersHandler@14(VAR PaymentIdentifiers@1000 : TestPage 1227);
    VAR
      ExchDefLineCode@1002 : Variant;
      ExchDefLineName@1006 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExchDefLineCode);
      LibraryVariableStorage.Dequeue(ExchDefLineName);

      PaymentIdentifiers.FILTER.SETFILTER(Code,ExchDefLineCode);
      PaymentIdentifiers.FILTER.SETFILTER(Name,ExchDefLineName);
      PaymentIdentifiers.FIRST;

      PaymentIdentifiers.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Payment Method]
    }
    END.
  }
}

