OBJECT Codeunit 5705 TransferOrder-Post Receipt
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    TableNo=5740;
    Permissions=TableData 6507=i;
    OnRun=VAR
            Item@1000 : Record 27;
            SourceCodeSetup@1001 : Record 242;
            InvtSetup@1002 : Record 313;
            InventoryPostingSetup@1011 : Record 5813;
            ValueEntry@1007 : Record 5802;
            ItemLedgEntry@1008 : Record 32;
            ItemApplnEntry@1009 : Record 339;
            ItemReg@1010 : Record 46;
            GenPostingSetup@1500000 : Record 252;
            NoSeriesMgt@1003 : Codeunit 396;
            UpdateAnalysisView@1004 : Codeunit 410;
            UpdateItemAnalysisView@1012 : Codeunit 7150;
            ReservMgt@1013 : Codeunit 99000845;
            RecordLinkManagement@1014 : Codeunit 447;
            Window@1006 : Dialog;
            LineCount@1005 : Integer;
            ThirdPartyInvoice@1280000 : Record 13797;
            PurchPayblesSetup@1500002 : Record 312;
            TaxJnlLine@1500003 : Record 16587;
            FromLocation@1500004 : Record 14;
          BEGIN
            IF Status = Status::Open THEN BEGIN
              CODEUNIT.RUN(CODEUNIT::"Release Transfer Document",Rec);
              Status := Status::Open;
              MODIFY;
              COMMIT;
              Status := Status::Released;
            END;
            TransHeader := Rec;
            TransHeader.SetHideValidationDialog(HideValidationDialog);

            WITH TransHeader DO BEGIN
              TESTFIELD("Transfer-from Code");
              TESTFIELD("Transfer-to Code");
              IF "Transfer-from Code" = "Transfer-to Code" THEN
                ERROR
                (Text000,
                  "No.",FIELDCAPTION("Transfer-from Code"),FIELDCAPTION("Transfer-to Code"));
              TESTFIELD("In-Transit Code");
              TESTFIELD(Status,Status::Released);
              TESTFIELD("Posting Date");

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              CheckDim;
              TransferBuffer[1].DELETEALL;
              StrPostBuf[1].DELETEALL;
              ExcisePostingBuffer[1].DELETEALL;
              GSTPostingBuffer[1].DELETEALL;
              TransLine.CalculateStructures(TransHeader);
              TransLine.AdjustStructureAmounts(TransHeader);
              TransLine.UpdateTransLines(TransHeader);

              TransLine.RESET;
              TransLine.SETRANGE("Document No.","No.");
              TransLine.SETRANGE("Derived From Line No.",0);
              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Receive",'<>0');
              IF NOT TransLine.FIND('-') THEN
                ERROR(Text001);

              WhseReceive := TempWhseRcptHeader.FINDFIRST;
              InvtPickPutaway := WhseReference <> 0;
              IF NOT (WhseReceive OR InvtPickPutaway) THEN
                CheckWarehouse(TransLine);

              GetLocation("Transfer-to Code");
              IF Location."Bin Mandatory" AND NOT (WhseReceive OR InvtPickPutaway) THEN
                WhsePosting := TRUE;

              IF "Captive Consumption" THEN BEGIN
                Location.TESTFIELD("E.C.C. No.",'');
                Location.TESTFIELD("Trading Location",FALSE);
              END;

              Window.OPEN(
                '#1#################################\\' +
                Text003);

              Window.UPDATE(1,STRSUBSTNO(Text004,"No."));

              SourceCodeSetup.GET;
              SourceCode := SourceCodeSetup.Transfer;
              InvtSetup.GET;
              InvtSetup.TESTFIELD("Posted Transfer Rcpt. Nos.");
              InventoryPostingSetup.SETRANGE("Location Code","Transfer-from Code");
              InventoryPostingSetup.FINDFIRST;
              InventoryPostingSetup.SETRANGE("Location Code","Transfer-to Code");
              InventoryPostingSetup.FINDFIRST;

              NoSeriesLine.LOCKTABLE;
              IF NoSeriesLine.FINDLAST THEN;
              IF InvtSetup."Automatic Cost Posting" THEN BEGIN
                GLEntry.LOCKTABLE;
                IF GLEntry.FINDLAST THEN;
              END;

              // Insert receipt header
              IF GSTManagement.IsGSTApplicable(Structure) THEN
                GSTManagement.CheckGSTAccountingPeriod("Posting Date");
              IF WhseReceive THEN
                PostedWhseRcptHeader.LOCKTABLE;
              TransRcptHeader.LOCKTABLE;
              TransRcptHeader.INIT;
              TransRcptHeader."Transfer-from Code" := "Transfer-from Code";
              TransRcptHeader."Transfer-from Name" := "Transfer-from Name";
              TransRcptHeader."Transfer-from Name 2" := "Transfer-from Name 2";
              TransRcptHeader."Transfer-from Address" := "Transfer-from Address";
              TransRcptHeader."Transfer-from Address 2" := "Transfer-from Address 2";
              TransRcptHeader."Transfer-from Post Code" := "Transfer-from Post Code";
              TransRcptHeader."Transfer-from City" := "Transfer-from City";
              TransRcptHeader."Transfer-from County" := "Transfer-from County";
              TransRcptHeader."Trsf.-from Country/Region Code" := "Trsf.-from Country/Region Code";
              TransRcptHeader."Transfer-from Contact" := "Transfer-from Contact";
              TransRcptHeader."Transfer-to Code" := "Transfer-to Code";
              TransRcptHeader."Transfer-to Name" := "Transfer-to Name";
              TransRcptHeader."Transfer-to Name 2" := "Transfer-to Name 2";
              TransRcptHeader."Transfer-to Address" := "Transfer-to Address";
              TransRcptHeader."Transfer-to Address 2" := "Transfer-to Address 2";
              TransRcptHeader."Transfer-to Post Code" := "Transfer-to Post Code";
              TransRcptHeader."Transfer-to City" := "Transfer-to City";
              TransRcptHeader."Transfer-to County" := "Transfer-to County";
              TransRcptHeader."Trsf.-to Country/Region Code" := "Trsf.-to Country/Region Code";
              TransRcptHeader."Transfer-to Contact" := "Transfer-to Contact";
              TransRcptHeader."Transfer Order Date" := "Posting Date";
              TransRcptHeader."Posting Date" := "Posting Date";
              TransRcptHeader."Shipment Date" := "Shipment Date";
              TransRcptHeader."Receipt Date" := "Receipt Date";
              TransRcptHeader."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
              TransRcptHeader."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
              TransRcptHeader."Dimension Set ID" := "Dimension Set ID";
              TransRcptHeader."Transfer Order No." := "No.";
              TransRcptHeader."External Document No." := "External Document No.";
              TransRcptHeader."In-Transit Code" := "In-Transit Code";
              TransRcptHeader."Shipping Agent Code" := "Shipping Agent Code";
              TransRcptHeader."Shipping Agent Service Code" := "Shipping Agent Service Code";
              TransRcptHeader."Shipment Method Code" := "Shipment Method Code";
              TransRcptHeader."Transaction Type" := "Transaction Type";
              TransRcptHeader."Transport Method" := "Transport Method";
              TransRcptHeader."Entry/Exit Point" := "Entry/Exit Point";
              TransRcptHeader.Area := Area;
              TransRcptHeader."Transaction Specification" := "Transaction Specification";
              TransRcptHeader."Captive Consumption" := "Captive Consumption";
              TransRcptHeader."Vendor Invoice No." := "Vendor Invoice No.";
              IF Location."Transfer Receipt Nos." <> '' THEN BEGIN
                TransRcptHeader."No. Series" := Location."Transfer Receipt Nos.";
                TransRcptHeader."No." :=
                  NoSeriesMgt.GetNextNo(
                     Location."Transfer Receipt Nos.","Posting Date",TRUE);
              END ELSE BEGIN
                TransRcptHeader."No. Series" := InvtSetup."Posted Transfer Rcpt. Nos.";
                TransRcptHeader."No." :=
                  NoSeriesMgt.GetNextNo(
                    InvtSetup."Posted Transfer Rcpt. Nos.","Posting Date",TRUE);
              END;
              TransRcptHeader.Structure := Structure;
              TransRcptHeader.INSERT;

                  GateEntryAttachment.SETRANGE("Source Type",GateEntryAttachment."Source Type"::"Transfer Receipt");
                  GateEntryAttachment.SETRANGE("Source No.","No.");
                  IF GateEntryAttachment.FIND('-') THEN
                     REPEAT
                      PostedGateEntryAttachment.INIT;
                      PostedGateEntryAttachment.TRANSFERFIELDS(GateEntryAttachment);
                      PostedGateEntryAttachment."Receipt No." := TransRcptHeader."No.";
                      PostedGateEntryAttachment.INSERT;
                      PostedGateEntryLine.GET(GateEntryAttachment."Entry Type",GateEntryAttachment."Gate Entry No.",
                        GateEntryAttachment."Line No.");
                      PostedGateEntryLine.TESTFIELD(Status,PostedGateEntryLine.Status::Open);
                      PostedGateEntryLine.Status := PostedGateEntryLine.Status::Close;
                      PostedGateEntryLine.MODIFY;
                     UNTIL GateEntryAttachment.NEXT = 0;
                  GateEntryAttachment.DELETEALL;

              IF InvtSetup."Copy Comments Order to Rcpt." THEN BEGIN
                CopyCommentLines(1,3,"No.",TransRcptHeader."No.");
                RecordLinkManagement.CopyLinks(Rec,TransRcptHeader);
              END;

              StrOrderDetails.RESET;
              StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Transfer);
              StrOrderDetails.SETRANGE("Document No.","No.");
              StrOrderDetails.SETRANGE("Structure Code",Structure);
              IF StrOrderDetails.FIND('-') THEN
                REPEAT
                  PostedStrOrderDetails.INIT;
                  PostedStrOrderDetails.TRANSFERFIELDS(StrOrderDetails);
                  PostedStrOrderDetails."No." := TransRcptHeader."No.";
                  PostedStrOrderDetails.INSERT;
                UNTIL StrOrderDetails.NEXT = 0;

              IF WhseReceive THEN BEGIN
                WhseRcptHeader.GET(TempWhseRcptHeader."No.");
                WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,TransRcptHeader."No.","Posting Date");
              END;

              // Insert receipt lines
              LineCount := 0;
              IF WhseReceive THEN
                PostedWhseRcptLine.LOCKTABLE;
              IF InvtPickPutaway THEN
                WhseRqst.LOCKTABLE;
              TransRcptLine.LOCKTABLE;
              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Receive");
              IF TransLine.FIND('-') THEN
                REPEAT
                  LineCount := LineCount + 1;
                  Window.UPDATE(2,LineCount);

                  IF FromLocation.GET("Transfer-from Code") THEN;
                  IF (TransLine.CVD) AND (NOT FromLocation."Trading Location") AND (TransLine."CIF Amount" + TransLine."BCD Amount" = 0) THEN
                    ERROR(Text16500);
                  IF TransLine."Item No." <> '' THEN BEGIN
                    Item.GET(TransLine."Item No.");
                    Item.TESTFIELD(Blocked,FALSE);
                  END;
                  GetPerUnitAmount(TransLine);
                  ItemJnlPostLine.SetExciseComp(BEDAmt,AEDGSIAmt,AEDTTAAmt,SEDAmt,SAEDAmt,CESSAmt,NCCDAmt);
                  ItemJnlPostLine.SetExciseComp2(eCessAmt,SHECessAmt,ADETAmt,ADEAmt,ADCVATAmt,ExciseBaseAmt,ExciseAmt);
                  DivideAmount(TransLine."Qty. to Receive");
                 ExciseExistInStructure := FALSE;
                 StrOrdLineDetails.RESET;
                 StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Transfer);
                 StrOrdLineDetails.SETRANGE("Document No.",TransLine."Document No.");
                 StrOrdLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                 StrOrdLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                 StrOrdLineDetails.SETFILTER("Tax/Charge Type",'%1',StrOrdLineDetails."Tax/Charge Type"::Excise);
                 IF StrOrdLineDetails.FIND('-') THEN
                   ExciseExistInStructure := TRUE;

                 IF (TransLine."GST Base Amount" <> 0) AND (TransLine."Qty. to Receive" <> 0)THEN
                   FillGSTPostingBuffer(TransLine);
                 IF TransLine."Excise Loading on Inventory" THEN
                   Location.TESTFIELD("Trading Location",FALSE);
                 GetLocation(TransLine."Transfer-to Code");
                 IF (Location."E.C.C. No." <> '') AND
                   (TransLine."Excise Loading on Inventory" = FALSE) AND
                   (TransLine."Excise Accounting Type" = TransLine."Excise Accounting Type"::"With CENVAT") AND
                   (NOT Location."Trading Location") AND ExciseExistInStructure
                 THEN BEGIN
                   FillExcisePostingBuffer(TransLine);
                   IF TransLine."Qty. to Receive" <> 0 THEN
                     IF NOT TransLine."Capital Item" THEN BEGIN
                       ExciseInsertRGRegisters.InsertRG23APartITransferRecpt(TransLine,TransRcptHeader);
                       IF (TransLine."Excise Amount" <> 0) THEN
                         ExciseInsertRGRegisters.InsertRG23APartIITransferRcpt(TransLine,TransRcptHeader);
                    END ELSE BEGIN
                      ExciseInsertRGRegisters.InsertRG23CPartITransferRecpt(TransLine,TransRcptHeader);
                      IF (TransLine."Excise Amount" <> 0) THEN
                        ExciseInsertRGRegisters.InsertRG23CPartIITransferRcpt(TransLine,TransRcptHeader);
                    END;
                  END;
                  IF Location."Trading Location" THEN
                    Location.TESTFIELD("E.C.C. No.");
                  //IF (TransLine."Excise Amount" <> 0) AND (Location."E.C.C. No." <> '') AND (Location."Trading Location") THEN BEGIN
                  IF (TransLine."Excise Accounting Type" = TransLine."Excise Accounting Type"::"With CENVAT") AND (Location."E.C.C. No." <> '')
                    AND (Location."Trading Location")
                  THEN BEGIN
                    InvtSetup.GET;
                    IF InvtSetup."External Doc. No. Mandatory" THEN
                      TESTFIELD("Vendor Invoice No.");
                    FillExcisePostingBuffer(TransLine);
                  END;
                  TransferCharges := 0;
                  LoadedOnInventory := 0;
                  StrOrdLineDetails.RESET;
                  StrOrdLineDetails.SETRANGE(Type,StrOrdLineDetails.Type::Transfer);
                  StrOrdLineDetails.SETRANGE("Document No.",TransLine."Document No.");
                  StrOrdLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                  StrOrdLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                  StrOrdLineDetails.SETFILTER("Tax/Charge Type",'%1|%2',StrOrdLineDetails."Tax/Charge Type"::Charges,
                  StrOrdLineDetails."Tax/Charge Type"::"Other Taxes");
                  IF StrOrdLineDetails.FIND('-') THEN
                    REPEAT
                      FillStrPostBuffer(StrOrdLineDetails,TransLine."Qty. to Receive",TransLine.Quantity);
                    UNTIL StrOrdLineDetails.NEXT = 0;
                  TransLine."Charges to Transfer" := TransferCharges;
                  IF (TransLine."Excise Amount" <> 0) AND (Location."Trading Location" = FALSE) AND ((Location."E.C.C. No." = '') OR
                    (TransLine."Excise Loading on Inventory") OR
                    (TransLine."Excise Accounting Type" = TransLine."Excise Accounting Type"::"Without CENVAT")) THEN

                    TransLine."Amount Added to Inventory" := LoadedOnInventory + TransLine."Excise Amount"
                  ELSE
                    TransLine."Amount Added to Inventory" := LoadedOnInventory + TransLine."CESS Amount";

                  TransRcptLine.INIT;
                  TransRcptLine."Document No." := TransRcptHeader."No.";
                  TransRcptLine."Line No." := TransLine."Line No.";
                  TransRcptLine."Item No." := TransLine."Item No.";
                  TransRcptLine.Description := TransLine.Description;
                  TransRcptLine.Quantity := TransLine."Qty. to Receive";
                  TransRcptLine."Unit of Measure" := TransLine."Unit of Measure";
                  TransRcptLine."Shortcut Dimension 1 Code" := TransLine."Shortcut Dimension 1 Code";
                  TransRcptLine."Shortcut Dimension 2 Code" := TransLine."Shortcut Dimension 2 Code";
                  TransRcptLine."Dimension Set ID" := TransLine."Dimension Set ID";
                  TransRcptLine."Gen. Prod. Posting Group" := TransLine."Gen. Prod. Posting Group";
                  TransRcptLine."Inventory Posting Group" := TransLine."Inventory Posting Group";
                  TransRcptLine."Quantity (Base)" := TransLine."Qty. to Receive (Base)";
                  TransRcptLine."Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
                  TransRcptLine."Unit of Measure Code" := TransLine."Unit of Measure Code";
                  TransRcptLine."Gross Weight" := TransLine."Gross Weight";
                  TransRcptLine."Net Weight" := TransLine."Net Weight";
                  TransRcptLine."Unit Volume" := TransLine."Unit Volume";
                  TransRcptLine."Variant Code" := TransLine."Variant Code";
                  TransRcptLine."Units per Parcel" := TransLine."Units per Parcel";
                  TransRcptLine."Description 2" := TransLine."Description 2";
                  TransRcptLine."Transfer Order No." := TransLine."Document No.";
                  TransRcptLine."Receipt Date" := TransLine."Receipt Date";
                  TransRcptLine."Shipping Agent Code" := TransLine."Shipping Agent Code";
                  TransRcptLine."Shipping Agent Service Code" := TransLine."Shipping Agent Service Code";
                  TransRcptLine."In-Transit Code" := TransLine."In-Transit Code";
                  TransRcptLine."Transfer-from Code" := TransLine."Transfer-from Code";
                  TransRcptLine."Transfer-to Code" := TransLine."Transfer-to Code";
                  TransRcptLine."Transfer-To Bin Code" := TransLine."Transfer-To Bin Code";
                  TransRcptLine."Shipping Time" := TransLine."Shipping Time";
                  TransRcptLine."Item Category Code" := TransLine."Item Category Code";
                  TransRcptLine."Product Group Code" := TransLine."Product Group Code";
                  TransRcptLine."Unit Price" := TransLine."Transfer Price";
                  TransRcptLine.Amount := TransLine.Amount;
                  TransRcptLine."BED Amount" := TransLine."BED Amount";
                  TransRcptLine."AED(GSI) Amount" := TransLine."AED(GSI) Amount";
                  TransRcptLine."AED(TTA) Amount" := TransLine."AED(TTA) Amount";
                  TransRcptLine."SED Amount" := TransLine."SED Amount";
                  TransRcptLine."ADC VAT Amount" := TransLine."ADC VAT Amount";
                  TransRcptLine."SAED Amount" := TransLine."SAED Amount";
                  TransRcptLine."CESS Amount" := TransLine."CESS Amount";
                  TransRcptLine."NCCD Amount" := TransLine."NCCD Amount";
                  TransRcptLine."eCess Amount" := TransLine."eCess Amount";
                  TransRcptLine."SHE Cess Amount" := TransLine."SHE Cess Amount";
                  TransRcptLine."ADET Amount" := TransLine."ADET Amount";
                  TransRcptLine."ADE Amount" := TransLine."ADE Amount";
                  TransRcptLine."Excise Amount" := TransLine."Excise Amount";
                  TransRcptLine."Amount Including Excise" := TransLine."Amount Including Excise";
                  TransRcptLine."Excise Accounting Type" := TransLine."Excise Accounting Type";
                  TransRcptLine."Excise Prod. Posting Group" := TransLine."Excise Prod. Posting Group";
                  TransRcptLine."Excise Bus. Posting Group" := TransLine."Excise Bus. Posting Group";
                  TransRcptLine."Capital Item" := TransLine."Capital Item";
                  TransRcptLine."Excise Base Amount" := TransLine."Excise Base Amount";
                  TransRcptLine."Assessable Value" := TransLine."Assessable Value";
                  TransRcptLine."Excise Loading on Inventory" := TransLine."Excise Loading on Inventory";
                  TransRcptLine."Amount Added to Excise Base" := TransLine."Amount Added to Excise Base";
                  TransRcptLine."Amount Added to Inventory" := TransLine."Amount Added to Inventory";
                  TransRcptLine."Charges to Transfer" := TransLine."Charges to Transfer";
                  TransRcptLine."Total Amount to Transfer" := TransLine."Total Amount to Transfer";
                  TransRcptLine."Applies-to Entry (RG 23 D)" := TransLine."Applies-to Entry (RG 23 D)";
                  TransRcptLine."Cost of Production" := TransLine."Cost of Production";
                  TransRcptLine."Captive Consumption %" := TransLine."Captive Consumption %";
                  TransRcptLine."Admin. Cost %" := TransLine."Admin. Cost %";
                  TransRcptLine."Cost Of Prod. Incl. Admin Cost" := TransLine."Cost Of Prod. Incl. Admin Cost";
                  TransRcptLine."MRP Price" :=  TransLine."MRP Price";
                  TransRcptLine.MRP := TransLine.MRP;
                  TransRcptLine."Abatement %" := TransLine."Abatement %";
                  TransRcptLine."Custom eCess Amount" := TransLine."Custom eCess Amount";
                  TransRcptLine."Custom SHECess Amount" := TransLine."Custom SHECess Amount";
                  TransRcptLine."GST Base Amount" := TransLine."GST Base Amount";
                  TransRcptLine."GST %" := TransLine."GST %";
                  TransRcptLine."Total GST Amount" := TransLine."Total GST Amount";
                  TransRcptLine."GST Group Code" := TransLine."GST Group Code";
                  TransRcptLine."GST Credit" := TransLine."GST Credit";
                  TransRcptLine."HSN/SAC Code" := TransLine."HSN/SAC Code";
                  TransRcptLine.Exempted := TransLine.Exempted;
                  TransRcptLine.INSERT;

                  IF TransLine."Qty. to Receive" > 0 THEN BEGIN
                    OriginalQuantity := TransLine."Qty. to Receive";
                    OriginalQuantityBase := TransLine."Qty. to Receive (Base)";
                    PostItemJnlLine(TransLine,TransRcptHeader,TransRcptLine);
                    TransRcptLine."Item Rcpt. Entry No." := InsertRcptEntryRelation(TransRcptLine);
                    TransRcptLine.MODIFY;
                    SaveTempWhseSplitSpec(TransLine);
                    IF WhseReceive THEN BEGIN
                      WhseRcptLine.SETCURRENTKEY(
                        "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                      WhseRcptLine.SETRANGE("No.",WhseRcptHeader."No.");
                      WhseRcptLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
                      WhseRcptLine.SETRANGE("Source No.",TransLine."Document No.");
                      WhseRcptLine.SETRANGE("Source Line No.",TransLine."Line No.");
                      WhseRcptLine.FINDFIRST;
                      WhseRcptLine.TESTFIELD("Qty. to Receive",TransRcptLine.Quantity);
                      WhsePostRcpt.SetItemEntryRelation(PostedWhseRcptHeader,PostedWhseRcptLine,TempItemEntryRelation2);
                      WhsePostRcpt.CreatePostedRcptLine(
                        WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                    END;
                    IF WhsePosting THEN
                      PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempWhseSplitSpecification);
                  END;
                  FillTransferBuffer(TransLine);

                  StrOrdLineDetails.RESET;
                  StrOrdLineDetails.SETRANGE(Type,StrOrderDetails.Type::Transfer);
                  StrOrdLineDetails.SETRANGE("Document No.","No.");
                  StrOrdLineDetails.SETRANGE("Structure Code",Structure);
                  StrOrdLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                  StrOrdLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                  IF StrOrdLineDetails.FIND('-') THEN
                    REPEAT
                      PostedStrOrdLineDetails.INIT;
                      PostedStrOrdLineDetails.TRANSFERFIELDS(StrOrdLineDetails);
                      PostedStrOrdLineDetails."Invoice No." := TransRcptHeader."No.";
                      PostedStrOrdLineDetails."Base Amount" :=
                        ROUND(StrOrdLineDetails."Base Amount" * (TransLine."Qty. to Receive" / TransLine.Quantity));
                      PostedStrOrdLineDetails.Amount :=
                        ROUND(StrOrdLineDetails.Amount * (TransLine."Qty. to Receive" / TransLine.Quantity));
                      PostedStrOrdLineDetails."Amount (LCY)" :=
                        ROUND(StrOrdLineDetails."Amount (LCY)" * (TransLine."Qty. to Receive" / TransLine.Quantity));
                      PostedStrOrdLineDetails.INSERT;
                    UNTIL StrOrdLineDetails.NEXT = 0;
                UNTIL TransLine.NEXT = 0;

              InvtSetup.GET;
              IF InvtSetup."Automatic Cost Adjustment" <>
                 InvtSetup."Automatic Cost Adjustment"::Never
              THEN BEGIN
                InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
                InvtAdjmt.MakeMultiLevelAdjmt;
              END;

              TempItemJnlLine.SETRANGE("Entry Type",TempItemJnlLine."Entry Type"::Transfer);
              TempItemJnlLine.SETRANGE("Document No.","No.");
              IF TempItemJnlLine.FIND('-') THEN
                REPEAT
                  ItemJnlPostLine.RUN(TempItemJnlLine);
                UNTIL TempItemJnlLine.NEXT = 0;

              // Post G/L Entries
              IF TransferBuffer[1].FIND('+') THEN
                REPEAT
                  // Goods in transit
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := TransHeader."Posting Date";
                  GenJnlLine."Document Date" := TransHeader."Posting Date";
                  GenJnlLine."Document No." := TransRcptHeader."No.";
                  GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                  InventoryPostingSetup.GET("In-Transit Code",TransferBuffer[1]."Inventory Posting Group");
                  InventoryPostingSetup.TESTFIELD("Unrealized Profit Account");
                  GenJnlLine."Account No." := InventoryPostingSetup."Unrealized Profit Account";
                  GenJnlLine."System-Created Entry" := TransferBuffer[1]."System-Created Entry";
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                  GenJnlLine."Gen. Bus. Posting Group" := TransferBuffer[1]."Gen. Bus. Posting Group";
                  GenJnlLine."Gen. Prod. Posting Group" := TransferBuffer[1]."Gen. Prod. Posting Group";
                  GenJnlLine.Amount := -(TransferBuffer[1].Amount + TransferBuffer[1]."Excise Amount" +
                    TransferBuffer[1]."Charges Amount" + TransferBuffer[1]."GST Amount");
                  GenJnlLine.Quantity := TransferBuffer[1].Quantity;
                  GenJnlLine."Shortcut Dimension 1 Code" := TransferBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := TransferBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := TransferBuffer[1]."Dimension Set ID";
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                  GenJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader."No.");
                  IF (GenJnlLine.Amount <> 0) THEN
                    RunGenJnlPostLine(GenJnlLine);

                  // Post Unrealized Profit Account Entries
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := TransHeader."Posting Date";
                  GenJnlLine."Document Date" := TransHeader."Posting Date";;
                  GenJnlLine."Document No." := TransRcptHeader."No.";
                  GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                  InventoryPostingSetup.GET("Transfer-to Code",TransferBuffer[1]."Inventory Posting Group");
                  InventoryPostingSetup.TESTFIELD("Unrealized Profit Account");
                  GenJnlLine."Account No." := InventoryPostingSetup."Unrealized Profit Account";
                  GenJnlLine."System-Created Entry" := TransferBuffer[1]."System-Created Entry";
                  GenJnlLine.Amount := TransferBuffer[1].Amount;
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                  GenJnlLine."Gen. Bus. Posting Group" := TransferBuffer[1]."Gen. Bus. Posting Group";
                  GenJnlLine."Gen. Prod. Posting Group" := TransferBuffer[1]."Gen. Prod. Posting Group";
                  GenJnlLine."Shortcut Dimension 1 Code" := TransferBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := TransferBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine."Dimension Set ID" := TransferBuffer[1]."Dimension Set ID";
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                  GenJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader."No.");
                  IF (GenJnlLine.Amount <> 0 ) THEN
                    RunGenJnlPostLine(GenJnlLine);

                  // Amount loaded on inventory
                  IF (TransferBuffer[1]."Amount Loaded on Inventory" <> 0 ) OR (TransferBuffer[1]."GST Amount Loaded on Inventory" <> 0) THEN BEGIN
                    GenJnlLine.INIT;
                    GenJnlLine."Posting Date" := TransHeader."Posting Date";
                    GenJnlLine."Document Date" := TransHeader."Posting Date";
                    GenJnlLine."Document No." := TransRcptHeader."No.";
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                    GenPostingSetup.GET(TransferBuffer[1]."Gen. Bus. Posting Group",TransferBuffer[1]."Gen. Prod. Posting Group");
                    GenPostingSetup.TESTFIELD("Inventory Adjmt. Account");
                    GenJnlLine."Account No." := GenPostingSetup."Inventory Adjmt. Account";
                    GenJnlLine."System-Created Entry" := TransferBuffer[1]."System-Created Entry";
                    GenJnlLine.Amount := TransferBuffer[1]."Amount Loaded on Inventory" + TransferBuffer[1]."GST Amount";
                    GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                    GenJnlLine."Gen. Bus. Posting Group" := TransferBuffer[1]."Gen. Bus. Posting Group";
                    GenJnlLine."Gen. Prod. Posting Group" := TransferBuffer[1]."Gen. Prod. Posting Group";
                    GenJnlLine."Shortcut Dimension 1 Code" := TransferBuffer[1]."Global Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := TransferBuffer[1]."Global Dimension 2 Code";
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                    GenJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader."No.");
                    IF (GenJnlLine.Amount <> 0 ) THEN
                      RunGenJnlPostLine(GenJnlLine);
                  END;
                UNTIL TransferBuffer[1].NEXT(-1) = 0;
              TransferBuffer[1].DELETEALL;

              IF StrPostBuf[1].FIND('+') THEN
                REPEAT
                  IF StrPostBuf[1].Amount <> 0 THEN BEGIN
                    GenJnlLine.INIT;
                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
                    GenJnlLine."Document No." := TransRcptHeader."No.";
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                    GenJnlLine."External Document No." := "No.";
                    IF StrPostBuf[1]."Payable to Third Party" THEN BEGIN
                      InvtSetup.GET;
                      InvtSetup.TESTFIELD("Third Party Nos.");
                      GenJnlLine."Document No." := NoSeriesMgt.GetNextNo(InvtSetup."Third Party Nos.","Posting Date",TRUE);
                      GenJnlLine."External Document No." := GenJnlLine."Document No.";
                      GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::Vendor;
                      GenJnlLine.VALIDATE("Bal. Account No.",StrPostBuf[1]."Third Party Code");
                      ThirdPartyInvoice.INIT;
                      ThirdPartyInvoice.Type := StrPostBuf[1].Type;
                      ThirdPartyInvoice."Document Type" := StrPostBuf[1]."Document Type";
                      ThirdPartyInvoice."Invoice No." := TransRcptHeader."No.";
                      ThirdPartyInvoice."Third Party Document No." := GenJnlLine."Document No.";
                      ThirdPartyInvoice.Charge := StrPostBuf[1]."Tax/Charge Code";
                      ThirdPartyInvoice."Posting Date" := "Posting Date";
                      ThirdPartyInvoice.INSERT;
                    END;
                    GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                    GenJnlLine.Amount := StrPostBuf[1].Amount;
                    GenJnlLine."Source Currency Amount" := StrPostBuf[1]."Source Currency Amount";
                    GenJnlLine."Amount (LCY)" := StrPostBuf[1].Amount;
                    GenJnlLine."System-Created Entry" := TRUE;
                    GenJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader."No.");
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                    IF (StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header) THEN BEGIN
                      GenJnlPostLine.RunWithCheck(GenJnlLine);
                    END ELSE
                      RunGenJnlPostLine(GenJnlLine);
                  END;
                  IF StrPostBuf[1]."Charges to Vendor Not on Inv." <> 0 THEN BEGIN
                    GenJnlLine.INIT;
                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                    GenJnlLine.VALIDATE("Account No.",StrPostBuf[1]."Account No.");
                    GenJnlLine."Document No." := TransRcptHeader."No.";
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                    GenJnlLine."External Document No." := "No.";
                    GenJnlLine.Amount := StrPostBuf[1].Amount;
                    GenJnlLine."Source Currency Amount" := StrPostBuf[1]."Source Currency Amount";
                    GenJnlLine."Amount (LCY)" := StrPostBuf[1].Amount;
                    GenJnlLine."System-Created Entry" := TRUE;
                    GenJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader."No.");
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                    IF (StrPostBuf[1]."Header/Line" = StrPostBuf[1]."Header/Line"::Header) THEN BEGIN
                      GenJnlPostLine.RUN(GenJnlLine);
                    END ELSE
                      RunGenJnlPostLine(GenJnlLine);
                  END;
                UNTIL StrPostBuf[1].NEXT(-1) = 0;
              StrPostBuf[1].DELETEALL;

              IF ExcisePostingBuffer[1].FIND('+') THEN
                REPEAT
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine.Description := STRSUBSTNO(Text004,"No.");
                  GenJnlLine."Document No." := TransRcptHeader."No.";
                  GenJnlLine."Document Type" := GenJnlLine."Document Type"::Invoice;
                  GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                  GenJnlLine."Account No." := ExcisePostingBuffer[1]."Item No.";
                  GenJnlLine."Excise Bus. Posting Group" := ExcisePostingBuffer[1]."Excise Bus. Posting Group";
                  GenJnlLine."Excise Prod. Posting Group" := ExcisePostingBuffer[1]."Excise Prod. Posting Group";
                  GenJnlLine."Excise Base Amount" := ExcisePostingBuffer[1]."Excise Base Amount";
                  GenJnlLine."BED %" := ExcisePostingBuffer[1]."BED %";
                  GenJnlLine."Amount Including Excise" := ExcisePostingBuffer[1]."Amount Including Excise";
                  GenJnlLine."Excise Amount" := ExcisePostingBuffer[1]."Excise Amount";
                  GenJnlLine.Amount := ExcisePostingBuffer[1]."Excise Amount";
                  GenJnlLine."Source Curr. Excise Amount" := ExcisePostingBuffer[1]."Excise Amount (ACY)";

                  IF NOT TaxJnlLine.FINDFIRST THEN BEGIN
                    TaxJnlLine."Journal Template Name" := '';
                    TaxJnlLine."Journal Batch Name" := '';
                    TaxJnlLine."Line No." := 0;
                    TaxJnlLine."Document No." := GenJnlLine."Document No.";
                    TaxJnlLine.INSERT;
                  END;

                  TaxJnlLine."BED Amount" := ExcisePostingBuffer[1]."BED Amount";
                  TaxJnlLine."AED(GSI) Amount" := ExcisePostingBuffer[1]."AED(GSI) Amount";
                  TaxJnlLine."AED(TTA) Amount" := ExcisePostingBuffer[1]."AED(TTA) Amount";
                  TaxJnlLine."SED Amount" := ExcisePostingBuffer[1]."SED Amount";
                  TaxJnlLine."SAED Amount" := ExcisePostingBuffer[1]."SAED Amount";
                  TaxJnlLine."CESS Amount" := ExcisePostingBuffer[1]."CESS Amount";
                  TaxJnlLine."NCCD Amount" := ExcisePostingBuffer[1]."NCCD Amount";
                  TaxJnlLine."eCess Amount" := ExcisePostingBuffer[1]."eCess Amount";
                  TaxJnlLine."SHE Cess Amount" := ExcisePostingBuffer[1]."SHE Cess Amount";
                  TaxJnlLine."ADET Amount" := ExcisePostingBuffer[1]."ADET Amount";
                  TaxJnlLine."ADE Amount" := ExcisePostingBuffer[1]."ADE Amount";
                  TaxJnlLine."ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount";
                  TaxJnlLine.MODIFY;
                  GenJnlLine."ADC VAT Amount" := ExcisePostingBuffer[1]."ADC VAT Amount";
                  GenJnlLine.CVD := ExcisePostingBuffer[1].CVD;
                  GenJnlLine."BED Calculation Type" := ExcisePostingBuffer[1]."BED Calculation Type";
                  GenJnlLine."Excise Posting" := TRUE;
                  GetLocation("Transfer-to Code");
                  GenJnlLine.Trading := Location."Trading Location";
                  IF NOT GenJnlLine.Trading THEN
                    GenJnlLine."Capital Item" := ExcisePostingBuffer[1]."Capital Item";
                  GenJnlLine."System-Created Entry" := TRUE;
                  GenJnlLine.Quantity := ExcisePostingBuffer[1].Quantity;
                  GenJnlLine."Product Type" := GenJnlLine."Product Type"::Item;
                  GenJnlLine."E.C.C. No." := ExcisePostingBuffer[1]."E.C.C. No.";
                  GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                  GenJnlLine."VAT Base Amount" := GenJnlLine.Amount;
                  GenJnlLine."Shortcut Dimension 1 Code" := ExcisePostingBuffer[1]."Global Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := ExcisePostingBuffer[1]."Global Dimension 2 Code";
                  GenJnlLine."Item No." := ExcisePostingBuffer[1]."Item No.";
                  GenJnlLine."Source Code" := SourceCode;
                  RunGenJnlPostLine(GenJnlLine);
                  TaxJnlLine.DELETE;
                UNTIL ExcisePostingBuffer[1].NEXT(-1) = 0;
              ExcisePostingBuffer[1].DELETEALL;
              // Post GST to G/L entries from GST posting buffer.. GST Sales
              IF GSTPostingBuffer[1].FINDLAST THEN
                REPEAT
                  PostTransLineToGenJnlLine(TransHeader);
                UNTIL GSTPostingBuffer[1].NEXT(-1) = 0;
              TransferLine.SETRANGE("Document No.",TransHeader."No.");
              TransferLine.SETFILTER("Item No.",'<>%1','');
              TransferLine.SETFILTER("Qty. to Receive",'<>%1',0);
              TransferLine.SETFILTER("GST Base Amount",'<>%1',0);
              IF TransferLine.FINDSET THEN
                REPEAT
                  GSTManagement.InsertDetailedGSTLedgEntryTransfer(
                    TransferLine,TransHeader,
                    TransRcptHeader."No.",GenJnlLine."Document Type",
                    GenJnlPostLine.GetNextTransactionNo,DocTransferType::TransferReciept);
                UNTIL TransferLine.NEXT = 0;
              GSTPostingBuffer[1].DELETEALL;

              ValueEntry.LOCKTABLE;
              ItemLedgEntry.LOCKTABLE;
              ItemApplnEntry.LOCKTABLE;
              ItemReg.LOCKTABLE;
              TransLine.LOCKTABLE;
              IF WhsePosting THEN
                WhseEntry.LOCKTABLE;

              TransLine.SETFILTER(Quantity,'<>0');
              TransLine.SETFILTER("Qty. to Receive",'<>0');
              IF TransLine.FIND('-') THEN
                REPEAT
                  TransLine.VALIDATE("Quantity Received",TransLine."Quantity Received" + TransLine."Qty. to Receive");
                  TransLine.UpdateWithWarehouseShipReceive;
                  ReservMgt.SetItemJnlLine(ItemJnlLine);
                  ReservMgt.SetItemTrackingHandling(1); // Allow deletion
                  ReservMgt.DeleteReservEntries(TRUE,0);
                  TransLine.MODIFY;
                UNTIL TransLine.NEXT = 0;

              IF WhseReceive THEN
                WhseRcptLine.LOCKTABLE;
              LOCKTABLE;
              IF WhseReceive THEN BEGIN
                WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                TempWhseRcptHeader.DELETE;
              END;

              "Last Receipt No." := TransRcptHeader."No.";
              MODIFY;

              TransLine.SETRANGE(Quantity);
              TransLine.SETRANGE("Qty. to Receive");
              HeaderDeleted := DeleteOneTransferOrder(TransHeader,TransLine);
              IF HeaderDeleted THEN
                GSTManagement.DeleteGSTBuffer(DocTransactionType::Transfer,DocumentType::Quote,TransHeader."No.",0);
              IF NOT HeaderDeleted THEN BEGIN
                WhseTransferRelease.Release(TransHeader);
                ReserveTransLine.UpdateItemTrackingAfterPosting(TransHeader,1);
              END;


              IF NOT InvtPickPutaway THEN
                COMMIT;
              CLEAR(WhsePostRcpt);
              CLEAR(InvtAdjmt);
              Window.CLOSE;
            END;
            UpdateAnalysisView.UpdateAll(0,TRUE);
            UpdateItemAnalysisView.UpdateAll(0,TRUE);
            Rec := TransHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Transfer order %2 cannot be posted because %3 and %4 are the same.;ENN=Transfer order %2 cannot be posted because %3 and %4 are the same.';
      Text001@1001 : TextConst 'ENU=There is nothing to post.;ENN=There is nothing to post.';
      Text002@1002 : TextConst '@@@="1%=TransLine2.""Document No.""; 2%=TransLine2.FIELDCAPTION(""Line No.""); 3%=TransLine2.""Line No."");";ENU="Warehouse handling is required for Transfer order = %1, %2 = %3.";ENN="Warehouse handling is required for Transfer order = %1, %2 = %3."';
      Text003@1003 : TextConst 'ENU=Posting transfer lines     #2######;ENN=Posting transfer lines     #2######';
      Text004@1004 : TextConst 'ENU=Transfer Order %1;ENN=Transfer Order %1';
      Text005@1005 : TextConst 'ENU=The combination of dimensions used in transfer order %1 is blocked. %2.;ENN=The combination of dimensions used in transfer order %1 is blocked. %2.';
      Text006@1006 : TextConst 'ENU=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3.;ENN=The combination of dimensions used in transfer order %1, line no. %2 is blocked. %3.';
      Text007@1007 : TextConst 'ENU=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.;ENN=The dimensions that are used in transfer order %1, line no. %2 are not valid. %3.';
      Text008@1008 : TextConst 'ENU=Base Qty. to Receive must be 0.;ENN=Base Qty. to Receive must be 0.';
      TransRcptHeader@1009 : Record 5746;
      TransRcptLine@1010 : Record 5747;
      TransHeader@1011 : Record 5740;
      TransLine@1012 : Record 5741;
      ItemJnlLine@1015 : Record 83;
      Location@1016 : Record 14;
      NewLocation@1040 : Record 14;
      WhseRqst@1039 : Record 5765;
      WhseRcptHeader@1027 : Record 7316;
      TempWhseRcptHeader@1033 : TEMPORARY Record 7316;
      WhseRcptLine@1022 : Record 7317;
      PostedWhseRcptHeader@1029 : Record 7318;
      PostedWhseRcptLine@1034 : Record 7319;
      TempWhseSplitSpecification@1018 : TEMPORARY Record 336;
      WhseEntry@1030 : Record 7312;
      TempItemEntryRelation2@1041 : TEMPORARY Record 6507;
      NoSeriesLine@1035 : Record 309;
      GLEntry@1042 : Record 17;
      GLSetup@1500023 : Record 98;
      TransferBuffer@1500032 : ARRAY [2] OF TEMPORARY Record 13715;
      StrPostBuf@1500031 : ARRAY [2] OF TEMPORARY Record 13796;
      ExcisePostingBuffer@1500030 : ARRAY [2] OF TEMPORARY Record 13706;
      StrOrdLineDetails@1500029 : Record 13795;
      StrOrderDetails@1500028 : Record 13794;
      PostedStrOrderDetails@1500027 : Record 13760;
      PostedStrOrdLineDetails@1500026 : Record 13798;
      TempItemJnlLine@1500025 : Record 83;
      GenJnlLine@1500024 : Record 81;
      GateEntryAttachment@1500038 : Record 16557;
      PostedGateEntryAttachment@1500037 : Record 16558;
      PostedGateEntryLine@1500036 : Record 16556;
      ExcisePostingSetup@1500001 : Record 13711;
      GSTPostingBuffer@1500006 : ARRAY [2] OF TEMPORARY Record 16420;
      TransferLine@1500005 : Record 5741;
      ItemJnlPostLine@1020 : Codeunit 22;
      DimMgt@1017 : Codeunit 408;
      WhseTransferRelease@1019 : Codeunit 5773;
      ReserveTransLine@1021 : Codeunit 99000836;
      WhsePostRcpt@1036 : Codeunit 5760;
      InvtAdjmt@1043 : Codeunit 5895;
      DimBufMgt@1500035 : Codeunit 411;
      ExciseInsertRGRegisters@1500034 : Codeunit 13701;
      GenJnlPostLine@1500033 : Codeunit 12;
      GSTManagement@1500004 : Codeunit 16401;
      SourceCode@1023 : Code[10];
      HideValidationDialog@1024 : Boolean;
      HeaderDeleted@1025 : Boolean;
      WhsePosting@1028 : Boolean;
      WhseReference@1038 : Integer;
      OriginalQuantity@1031 : Decimal;
      OriginalQuantityBase@1032 : Decimal;
      WhseReceive@1026 : Boolean;
      InvtPickPutaway@1037 : Boolean;
      LoadedOnInventory@1280003 : Decimal;
      TransferCharges@1280004 : Decimal;
      Text13700@1280007 : TextConst 'ENU=Transfer - %1;ENN=Transfer - %1';
      ThirdPartyAmount@1500000 : Decimal;
      TransferCost@1500021 : Decimal;
      Text16500@1500002 : TextConst 'ENU=Sum of CIF Amount and BCD Amount should not be 0 for CVD calculation.;ENN=Sum of CIF Amount and BCD Amount should not be 0 for CVD calculation.';
      ExciseExistInStructure@1500003 : Boolean;
      BEDAmt@1500020 : Decimal;
      AEDGSIAmt@1500019 : Decimal;
      AEDTTAAmt@1500018 : Decimal;
      SEDAmt@1500017 : Decimal;
      SAEDAmt@1500016 : Decimal;
      CESSAmt@1500015 : Decimal;
      NCCDAmt@1500014 : Decimal;
      eCessAmt@1500013 : Decimal;
      SHECessAmt@1500012 : Decimal;
      ADETAmt@1500011 : Decimal;
      ADEAmt@1500010 : Decimal;
      ADCVATAmt@1500009 : Decimal;
      ExciseBaseAmt@1500008 : Decimal;
      ExciseAmt@1500007 : Decimal;
      GLSetupRead@1500022 : Boolean;
      DocTransactionType@1500039 : 'Purchase,Sales,Transfer';
      DocTransferType@1500040 : 'TransferShpmnt,TransferReciept';
      DocumentType@1500041 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';

    LOCAL PROCEDURE PostItemJnlLine@2(VAR TransLine3@1000 : Record 5741;TransRcptHeader2@1001 : Record 5746;TransRcptLine2@1002 : Record 5747);
    BEGIN
      ItemJnlLine.INIT;
      ItemJnlLine."Posting Date" := TransRcptHeader2."Posting Date";
      ItemJnlLine."Document Date" := TransRcptHeader2."Posting Date";
      ItemJnlLine."Document No." := TransRcptHeader2."No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Transfer Receipt";
      ItemJnlLine."Document Line No." := TransRcptLine2."Line No.";
      ItemJnlLine."Order Type" := ItemJnlLine."Order Type"::Transfer;
      ItemJnlLine."Order No." := TransRcptHeader2."Transfer Order No.";
      ItemJnlLine."Order Line No." := TransLine3."Line No.";
      ItemJnlLine."External Document No." := TransRcptHeader2."External Document No.";
      ItemJnlLine."Captive Consumption" := TransRcptHeader2."Captive Consumption";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Transfer;
      ItemJnlLine."Item No." := TransRcptLine2."Item No.";
      ItemJnlLine.Description := TransRcptLine2.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := TransRcptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."New Shortcut Dimension 1 Code" := TransRcptLine2."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := TransRcptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."New Shortcut Dimension 2 Code" := TransRcptLine2."Shortcut Dimension 2 Code";
      ItemJnlLine."Dimension Set ID" := TransRcptLine2."Dimension Set ID";
      ItemJnlLine."New Dimension Set ID" := TransRcptLine2."Dimension Set ID";
      ItemJnlLine."Location Code" := TransHeader."In-Transit Code";
      ItemJnlLine."New Location Code" := TransRcptHeader2."Transfer-to Code";
      ItemJnlLine.Quantity := TransRcptLine2.Quantity;
      ItemJnlLine."Invoiced Quantity" := TransRcptLine2.Quantity;
      ItemJnlLine."Quantity (Base)" := TransRcptLine2."Quantity (Base)";
      ItemJnlLine."Invoiced Qty. (Base)" := TransRcptLine2."Quantity (Base)";
      ItemJnlLine."Source Code" := SourceCode;
      ItemJnlLine."Gen. Prod. Posting Group" := TransRcptLine2."Gen. Prod. Posting Group";
      ItemJnlLine."Inventory Posting Group" := TransRcptLine2."Inventory Posting Group";
      ItemJnlLine."Unit of Measure Code" := TransRcptLine2."Unit of Measure Code";
      ItemJnlLine."Qty. per Unit of Measure" := TransRcptLine2."Qty. per Unit of Measure";
      ItemJnlLine."Variant Code" := TransRcptLine2."Variant Code";
      ItemJnlLine."New Bin Code" := TransLine."Transfer-To Bin Code";
      ItemJnlLine."Product Group Code" := TransLine."Product Group Code";
      ItemJnlLine."Item Category Code" := TransLine."Item Category Code";
      IF TransHeader."In-Transit Code" <> '' THEN BEGIN
        IF NewLocation.Code <> TransHeader."In-Transit Code" THEN
          NewLocation.GET(TransHeader."In-Transit Code");
        ItemJnlLine."Country/Region Code" := NewLocation."Country/Region Code";
      END;
      ItemJnlLine."Transaction Type" := TransRcptHeader2."Transaction Type";
      ItemJnlLine."Transport Method" := TransRcptHeader2."Transport Method";
      ItemJnlLine."Entry/Exit Point" := TransRcptHeader2."Entry/Exit Point";
      ItemJnlLine.Area := TransRcptHeader2.Area;
      ItemJnlLine."Transaction Specification" := TransRcptHeader2."Transaction Specification";
      WriteDownDerivedLines(TransLine3);
      ItemJnlPostLine.SetPostponeReservationHandling(TRUE);
      ItemJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader2."No.");
      GetLocation(TransLine3."Transfer-from Code");
      IF Location."Trading Location" THEN
        ItemJnlLine."Applies-to Entry (RG 23 D)" := TransLine3."Applies-to Entry (RG 23 D)";
      ItemJnlLine."From Transfer Order" := TRUE;
      ItemJnlLine."Rcpt. Posting" := TRUE;

      ItemJnlPostLine.RUN(ItemJnlLine);
      TransferCost := ItemJnlLine."Transfer Cost";
      PostRevaluationEntryGST(TransLine3,TransRcptHeader2,TransRcptLine2);
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      InvtCommentLine@1004 : Record 5748;
      InvtCommentLine2@1005 : Record 5748;
    BEGIN
      InvtCommentLine.SETRANGE("Document Type",FromDocumentType);
      InvtCommentLine.SETRANGE("No.",FromNumber);
      IF InvtCommentLine.FIND('-') THEN
        REPEAT
          InvtCommentLine2 := InvtCommentLine;
          InvtCommentLine2."Document Type" := ToDocumentType;
          InvtCommentLine2."No." := ToNumber;
          InvtCommentLine2.INSERT;
        UNTIL InvtCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDim@34();
    BEGIN
      TransLine."Line No." := 0;
      CheckDimComb(TransHeader,TransLine);
      CheckDimValuePosting(TransHeader,TransLine);

      TransLine.SETRANGE("Document No.",TransHeader."No.");
      IF TransLine.FINDFIRST THEN BEGIN
        CheckDimComb(TransHeader,TransLine);
        CheckDimValuePosting(TransHeader,TransLine);
      END;
    END;

    LOCAL PROCEDURE CheckDimComb@30(TransferHeader@1001 : Record 5740;TransferLine@1000 : Record 5741);
    BEGIN
      IF TransferLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimIDComb(TransferHeader."Dimension Set ID") THEN
          ERROR(
            Text005,
            TransHeader."No.",DimMgt.GetDimCombErr);
      IF TransferLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimIDComb(TransferLine."Dimension Set ID") THEN
          ERROR(
            Text006,
            TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(TransferHeader@1000 : Record 5740;TransferLine@1004 : Record 5741);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableIDArr[1] := DATABASE::Item;
      NumberArr[1] := TransferLine."Item No.";
      IF TransferLine."Line No." = 0 THEN
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferHeader."Dimension Set ID") THEN
          ERROR(
            Text007,
            TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);

      IF TransferLine."Line No." <> 0 THEN
        IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,TransferLine."Dimension Set ID") THEN
          ERROR(
            Text007,
            TransHeader."No.",TransferLine."Line No.",DimMgt.GetDimValuePostingErr);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE WriteDownDerivedLines@1(VAR TransLine3@1000 : Record 5741);
    VAR
      TransLine4@1001 : Record 5741;
      T337@1004 : Record 337;
      TempDerivedSpecification@1006 : TEMPORARY Record 336;
      ItemTrackingMgt@1005 : Codeunit 6500;
      QtyToReceive@1002 : Decimal;
      BaseQtyToReceive@1003 : Decimal;
      TrackingSpecificationExists@1007 : Boolean;
    BEGIN
      TransLine4.SETRANGE("Document No.",TransLine3."Document No.");
      TransLine4.SETRANGE("Derived From Line No.",TransLine3."Line No.");
      IF TransLine4.FIND('-') THEN BEGIN
        QtyToReceive := TransLine3."Qty. to Receive";
        BaseQtyToReceive := TransLine3."Qty. to Receive (Base)";

        T337.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        T337.SETRANGE("Source ID",TransLine3."Document No.");
        T337.SETRANGE("Source Ref. No.");
        T337.SETRANGE("Source Type",DATABASE::"Transfer Line");
        T337.SETRANGE("Source Subtype",1);
        T337.SETRANGE("Source Batch Name",'');
        T337.SETRANGE("Source Prod. Order Line",TransLine3."Line No.");
        T337.SETFILTER("Qty. to Handle (Base)",'<>0');

        TrackingSpecificationExists :=
          ItemTrackingMgt.SumUpItemTracking(T337,TempDerivedSpecification,TRUE,FALSE);

        REPEAT
          IF TrackingSpecificationExists THEN BEGIN
            TempDerivedSpecification.SETRANGE("Source Ref. No.",TransLine4."Line No.");
            IF TempDerivedSpecification.FINDFIRST THEN BEGIN
              TransLine4."Qty. to Receive (Base)" := TempDerivedSpecification."Qty. to Handle (Base)";
              TransLine4."Qty. to Receive" := TempDerivedSpecification."Qty. to Handle";
            END ELSE BEGIN
              TransLine4."Qty. to Receive (Base)" := 0;
              TransLine4."Qty. to Receive" := 0;
            END;
          END;
          IF TransLine4."Qty. to Receive (Base)" <= BaseQtyToReceive THEN BEGIN
            ReserveTransLine.TransferTransferToItemJnlLine(
              TransLine4,ItemJnlLine,TransLine4."Qty. to Receive (Base)",1);
            TransLine4."Quantity (Base)" :=
              TransLine4."Quantity (Base)" - TransLine4."Qty. to Receive (Base)";
            TransLine4.Quantity :=
              TransLine4.Quantity - TransLine4."Qty. to Receive";
            BaseQtyToReceive := BaseQtyToReceive - TransLine4."Qty. to Receive (Base)";
            QtyToReceive := QtyToReceive - TransLine4."Qty. to Receive";
          END ELSE BEGIN
            ReserveTransLine.TransferTransferToItemJnlLine(
              TransLine4,ItemJnlLine,BaseQtyToReceive,1);
            TransLine4.Quantity := TransLine4.Quantity - QtyToReceive;
            TransLine4."Quantity (Base)" := TransLine4."Quantity (Base)" - BaseQtyToReceive;
            BaseQtyToReceive := 0;
            QtyToReceive := 0;
          END;
          IF TransLine4."Quantity (Base)" = 0 THEN
            TransLine4.DELETE
          ELSE BEGIN
            TransLine4."Qty. to Ship" := TransLine4.Quantity;
            TransLine4."Qty. to Ship (Base)" := TransLine4."Quantity (Base)";
            TransLine4."Qty. to Receive" := TransLine4.Quantity;
            TransLine4."Qty. to Receive (Base)" := TransLine4."Quantity (Base)";
            TransLine4."Quantity Shipped" := 0;
            TransLine4."Qty. Shipped (Base)" := 0;
            TransLine4."Quantity Received" := 0;
            TransLine4."Qty. Received (Base)" := 0;
            TransLine4."Qty. in Transit" := 0;
            TransLine4."Qty. in Transit (Base)" := 0;
            TransLine4."Outstanding Quantity" := TransLine4.Quantity;
            TransLine4."Outstanding Qty. (Base)" := TransLine4."Quantity (Base)";
            TransLine4.MODIFY;
          END;
        UNTIL (TransLine4.NEXT = 0) OR (BaseQtyToReceive = 0);
      END;

      IF BaseQtyToReceive <> 0 THEN
        ERROR(Text008);
    END;

    LOCAL PROCEDURE InsertRcptEntryRelation@38(VAR TransRcptLine@1002 : Record 5747) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
      TempItemEntryRelation@1000 : TEMPORARY Record 6507;
    BEGIN
      TempItemEntryRelation2.RESET;
      TempItemEntryRelation2.DELETEALL;

      IF ItemJnlPostLine.CollectItemEntryRelation(TempItemEntryRelation) THEN BEGIN
        IF TempItemEntryRelation.FIND('-') THEN BEGIN
          REPEAT
            ItemEntryRelation := TempItemEntryRelation;
            ItemEntryRelation.TransferFieldsTransRcptLine(TransRcptLine);
            ItemEntryRelation.INSERT;
            TempItemEntryRelation2 := TempItemEntryRelation;
            TempItemEntryRelation2.INSERT;
          UNTIL TempItemEntryRelation.NEXT = 0;
          EXIT(0);
        END;
      END ELSE
        EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR TransLine@1000 : Record 5741);
    VAR
      TransLine2@1001 : Record 5741;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      TransLine2.COPY(TransLine);
      IF TransLine2.FIND('-') THEN
        REPEAT
          GetLocation(TransLine2."Transfer-to Code");
          IF Location."Require Receive" OR Location."Require Put-away" THEN BEGIN
            IF Location."Bin Mandatory" THEN
              ShowError := TRUE
            ELSE
              IF WhseValidateSourceLine.WhseLinesExist(
                   DATABASE::"Transfer Line",
                   1,// In
                   TransLine2."Document No.",
                   TransLine2."Line No.",
                   0,
                   TransLine2.Quantity)
              THEN
                ShowError := TRUE;

            IF ShowError THEN
              ERROR(
                Text002,
                TransLine2."Document No.",
                TransLine2.FIELDCAPTION("Line No."),
                TransLine2."Line No.");
          END;
        UNTIL TransLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveTempWhseSplitSpec@5(TransLine@1001 : Record 5741);
    VAR
      TempHandlingSpecification@1000 : TEMPORARY Record 336;
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN
        IF TempHandlingSpecification.FIND('-') THEN
          REPEAT
            TempWhseSplitSpecification := TempHandlingSpecification;
            TempWhseSplitSpecification."Entry No." := TempHandlingSpecification."Transfer Item Entry No.";
            TempWhseSplitSpecification."Source Type" := DATABASE::"Transfer Line";
            TempWhseSplitSpecification."Source Subtype" := 1;
            TempWhseSplitSpecification."Source ID" := TransLine."Document No.";
            TempWhseSplitSpecification."Source Ref. No." := TransLine."Line No.";
            TempWhseSplitSpecification.INSERT;
          UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE PostWhseJnlLine@4(ItemJnlLine@1000 : Record 83;OriginalQuantity@1001 : Decimal;OriginalQuantityBase@1006 : Decimal;VAR TempHandlingSpecification@1003 : TEMPORARY Record 336);
    VAR
      WhseJnlLine@1002 : Record 7311;
      TempWhseJnlLine2@1005 : TEMPORARY Record 7311;
      ItemTrackingMgt@1004 : Codeunit 6500;
      WMSMgmt@1007 : Codeunit 7302;
      WhseJnlPostLine@1008 : Codeunit 7301;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("New Location Code");
        IF Location."Bin Mandatory" THEN
          IF WMSMgmt.CreateWhseJnlLine(ItemJnlLine,1,WhseJnlLine,TRUE) THEN BEGIN
            WMSMgmt.SetTransferLine(TransLine,WhseJnlLine,1,TransRcptHeader."No.");
            ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempHandlingSpecification,TRUE);
            IF TempWhseJnlLine2.FIND('-') THEN
              REPEAT
                WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,TRUE);
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE SetWhseRcptHeader@3(VAR WhseRcptHeader2@1000 : Record 7316);
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    LOCAL PROCEDURE DivideAmount@1280007(TransferLineQty@1280000 : Decimal);
    BEGIN
      WITH TransLine DO
        IF TransferLineQty = 0 THEN BEGIN
          Amount := 0;
          "Amount Including Excise" := 0;
          "Excise Amount" := 0;
          "BED Amount" := 0;
          "AED(GSI) Amount" := 0;
          "AED(TTA) Amount" := 0;
          "SED Amount" := 0;
          "SAED Amount" := 0;
          "CESS Amount" := 0;
          "NCCD Amount" := 0;
          "eCess Amount" := 0;
          "SHE Cess Amount" := 0;
          "ADET Amount" := 0;
          "ADE Amount" := 0;
          "ADC VAT Amount" := 0;
          "Excise Base Amount" := 0;
          "Amount Added to Excise Base" := 0;
          "Amount Added to Inventory" := 0;
          "Charges to Transfer" := 0;
          "Total Amount to Transfer" := 0;
          "Total GST Amount" := 0;
        END ELSE BEGIN
          IF Quantity <> 0 THEN
            Amount := Amount * TransferLineQty / Quantity;

          "BED Amount" := RoundExciseAmount("BED Amount",TransferLineQty,Quantity);
          "AED(GSI) Amount" := RoundExciseAmount("AED(GSI) Amount",TransferLineQty,Quantity);
          "AED(TTA) Amount" := RoundExciseAmount("AED(TTA) Amount",TransferLineQty,Quantity);
          "SED Amount" := RoundExciseAmount("SED Amount",TransferLineQty,Quantity);
          "SAED Amount" := RoundExciseAmount("SAED Amount",TransferLineQty,Quantity);
          "CESS Amount" := RoundExciseAmount("CESS Amount",TransferLineQty,Quantity);
          "NCCD Amount" := RoundExciseAmount("NCCD Amount",TransferLineQty,Quantity);
          "eCess Amount" := RoundExciseAmount("eCess Amount",TransferLineQty,Quantity);
          "SHE Cess Amount" := RoundExciseAmount("SHE Cess Amount",TransferLineQty,Quantity);
          "ADET Amount" := RoundExciseAmount("ADET Amount",TransferLineQty,Quantity);
          "ADE Amount" := RoundExciseAmount("ADE Amount",TransferLineQty,Quantity);
          "ADC VAT Amount" := RoundExciseAmount("ADC VAT Amount",TransferLineQty,Quantity);
          "Excise Base Amount" := RoundExciseAmount("Excise Base Amount",TransferLineQty,Quantity);
          "Excise Amount" :=
            "BED Amount" + "AED(GSI) Amount" + "AED(TTA) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" +
            "NCCD Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
          "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
          IF Quantity <> 0 THEN
            "Total Amount to Transfer" := ROUND("Total Amount to Transfer" * TransferLineQty / Quantity);
          "GST Base Amount" :=
            ROUND("GST Base Amount" * TransferLineQty / Quantity);
          "Total GST Amount" := ROUND(GSTManagement.RoundTotalGSTAmountQtyFactor(DocTransactionType::Transfer,0,
            "Document No.","Line No.",TransferLineQty / Quantity,''));
        END;
    END;

    LOCAL PROCEDURE FillTransferBuffer@5804(TransLine@1000 : Record 5741);
    VAR
      Item@1500000 : Record 27;
    BEGIN
      WITH TransLine DO BEGIN
        CLEAR(TransferBuffer[1]);
        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETRANGE("From Date",0D,TransHeader."Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,FALSE);
        IF ExcisePostingSetup.FIND('+') THEN;

        TransferBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        TransferBuffer[1]."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
        TransferBuffer[1]."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
        TransferBuffer[1]."BED %" := ExcisePostingSetup."BED %";
        TransferBuffer[1]."System-Created Entry" := TRUE;
        TransferBuffer[1]."Location Code" := "Transfer-to Code";
        TransferBuffer[1]."Item No." := "Item No.";
        TransferBuffer[1]."Capital Item" := "Capital Item";
        TransferBuffer[1].Quantity := "Qty. to Receive";
        TransferBuffer[1]."Inventory Posting Group" := "Inventory Posting Group";
        TransferBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        TransferBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        TransferBuffer[1]."Dimension Set ID" := "Dimension Set ID";
        TransferBuffer[1]."Charges Amount" := "Charges to Transfer";
        TransferBuffer[1]."Amount Loaded on Inventory" := "Amount Added to Inventory";
        TransferBuffer[1]."Excise Amount" := "Excise Amount";
        Item.GET("Item No.");
        TransferBuffer[1].Amount := ROUND(Amount - (-TransferCost));
        TransferBuffer[1]."GST Amount" := "Total GST Amount";
        IF "GST Credit" = "GST Credit"::"Non-Availment" THEN
          TransferBuffer[1]."GST Amount Loaded on Inventory" := "Total GST Amount";
        UpdTransferBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdTransferBuffer@6();
    VAR
      TempDimBuf@1000 : TEMPORARY Record 360;
      EntryNo@1001 : Integer;
    BEGIN
      DimMgt.UpdateGlobalDimFromDimSetID(TransferBuffer[1]."Dimension Set ID",
        TransferBuffer[1]."Global Dimension 1 Code",TransferBuffer[1]."Global Dimension 2 Code");

      TransferBuffer[2] := TransferBuffer[1];
      IF TransferBuffer[2].FIND THEN BEGIN
        TransferBuffer[2]."Excise Amount" := TransferBuffer[2]."Excise Amount" + TransferBuffer[1]."Excise Amount";
        TransferBuffer[2].Amount := TransferBuffer[2].Amount + TransferBuffer[1].Amount;
        TransferBuffer[2]."Amount Loaded on Inventory" := TransferBuffer[2]."Amount Loaded on Inventory" +
          TransferBuffer[1]."Amount Loaded on Inventory";
        TransferBuffer[2]."Charges Amount" := TransferBuffer[2]."Charges Amount"+TransferBuffer[1]."Charges Amount";
        TransferBuffer[2].Quantity := TransferBuffer[2].Quantity + TransferBuffer[1].Quantity;
        TransferBuffer[2]."GST Amount" := TransferBuffer[2]."GST Amount" +
          TransferBuffer[1]."GST Amount";
        TransferBuffer[2]."GST Amount Loaded on Inventory" := TransferBuffer[2]."GST Amount Loaded on Inventory" +
          TransferBuffer[1]."GST Amount Loaded on Inventory";
        IF NOT TransferBuffer[1]."System-Created Entry" THEN
          TransferBuffer[2]."System-Created Entry" := FALSE;
        TransferBuffer[2].MODIFY;
      END ELSE
        TransferBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE FillStrPostBuffer@1280010(StrOrdLineDetails@1280003 : Record 13795;Quantity@1280002 : Decimal;ActQty@1280001 : Decimal);
    BEGIN
      WITH StrOrdLineDetails DO BEGIN
        StrPostBuf[1]."Document No." := "Document No.";
        StrPostBuf[1].Type := StrPostBuf[1].Type::Transfer;
        StrPostBuf[1]."Item No." :=  "Item No.";
        StrPostBuf[1]."Structure Code" := "Structure Code";
        StrPostBuf[1]."Tax/Charge Type" := "Tax/Charge Type";
        StrPostBuf[1]."Tax/Charge Group" := "Tax/Charge Group";
        StrPostBuf[1]."Tax/Charge Code" :=  "Tax/Charge Code";
        StrPostBuf[1]."Loading on Inventory" := "Loading on Inventory";
        StrPostBuf[1]."% Loading on Inventory" := "% Loading on Inventory";
        StrPostBuf[1]."Payable to Third Party" := "Payable to Third Party";
        StrPostBuf[1]."Third Party Code" := "Third Party Code";
        StrPostBuf[1]."Account No." := "Account No.";
        StrPostBuf[1]."Base Amount" := ROUND("Base Amount" * Quantity / ActQty);
        StrPostBuf[1].Amount  := ROUND("Amount (LCY)" * Quantity / ActQty);
        StrPostBuf[1]."Source Currency Amount"  := ROUND(Amount * Quantity / ActQty);
        TransferCharges := TransferCharges + StrPostBuf[1].Amount;
        IF StrPostBuf[1]."Loading on Inventory" THEN
          LoadedOnInventory := LoadedOnInventory + StrPostBuf[1].Amount;
        IF NOT "Payable to Third Party" THEN BEGIN
          StrPostBuf[1]."Base Amount" := ROUND(("Base Amount" * Quantity / ActQty) * ((100 - "% Loading on Inventory")/100));
          StrPostBuf[1].Amount  := ROUND(("Amount (LCY)" * Quantity / ActQty) * ((100 - "% Loading on Inventory")/100));
          StrPostBuf[1]."Source Currency Amount"  := ROUND((Amount * Quantity / ActQty) * ((100 - "% Loading on Inventory")/100));
        END ELSE BEGIN
          StrOrdLineDetails.TESTFIELD("Third Party Code");
          ThirdPartyAmount := ThirdPartyAmount + ROUND(StrOrdLineDetails."Amount (LCY)" * Quantity / ActQty);
        END;
        IF NOT (StrPostBuf[1]."Loading on Inventory") AND (StrPostBuf[1]."Payable to Third Party") THEN
          StrPostBuf[1]."Charges to Vendor Not on Inv." := StrPostBuf[1].Amount;
        UpdStrPostBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdStrPostBuffer@1280011();
    VAR
      TempDimBuf@1280001 : TEMPORARY Record 360;
      EntryNo@1280000 : Integer;
    BEGIN
      StrPostBuf[1]."Dimension Set ID" := TransLine."Dimension Set ID";

      StrPostBuf[2] := StrPostBuf[1];
      IF StrPostBuf[2].FIND THEN BEGIN
        StrPostBuf[2].Amount := StrPostBuf[2].Amount + StrPostBuf[1].Amount;
        StrPostBuf[2]."Source Currency Amount" := StrPostBuf[2]."Source Currency Amount" +
         StrPostBuf[1]."Source Currency Amount";
        StrPostBuf[2]."Base Amount" := StrPostBuf[2]."Base Amount" + StrPostBuf[1]."Base Amount";
        StrPostBuf[2]."Charges to Vendor Not on Inv." := StrPostBuf[2]."Charges to Vendor Not on Inv." +
          StrPostBuf[1]."Charges to Vendor Not on Inv.";
        StrPostBuf[2].MODIFY;
      END ELSE
        StrPostBuf[1].INSERT;
    END;

    LOCAL PROCEDURE PostRevaluationEntry@1280004(VAR TransLine3@1280002 : Record 5741;TransRcptHeader2@1280001 : Record 5746;TransRcptLine2@1280000 : Record 5747);
    VAR
      SourceCodeSetup@1280003 : Record 242;
      ItemReg@1280004 : Record 46;
      ItemLedgEntry@1280005 : Record 32;
      AmtToLoad@1280006 : Decimal;
      Ctr@1280008 : Integer;
    BEGIN
      IF TransLine3."Qty. to Receive" = 0 THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        ItemReg.FIND('+');
        ItemLedgEntry.RESET;
        ItemLedgEntry.SETCURRENTKEY("Location Code","Posting Date","Document No.","Item No.");
        ItemLedgEntry.SETRANGE("Entry No.",ItemReg."From Entry No.",ItemReg."To Entry No.");
        ItemLedgEntry.SETRANGE("Location Code",TransRcptHeader2."Transfer-to Code");
        ItemLedgEntry.SETRANGE("Posting Date",TransRcptHeader2."Posting Date");
        ItemLedgEntry.SETRANGE("Document No.",TransRcptHeader2."No.");
        ItemLedgEntry.SETRANGE("Item No.", TransLine3."Item No.");
        IF ItemLedgEntry.FIND('-') THEN
          REPEAT
            AmtToLoad := TransLine3."Amount Added to Inventory" ;
            IF AmtToLoad <> 0 THEN BEGIN
              INIT;
              VALIDATE("Posting Date",TransRcptHeader2."Posting Date");
              "Document Date" := TransRcptHeader2."Posting Date";
              VALIDATE("Document No.",TransRcptHeader2."No.");
              "External Document No." := TransRcptHeader2."External Document No.";
              VALIDATE("Entry Type","Entry Type"::Transfer);
              "Value Entry Type" := "Value Entry Type"::Revaluation;
              VALIDATE("Item No.",TransRcptLine2."Item No.");
              Description := TransRcptLine2.Description;
              "Inventory Posting Group" := TransRcptLine2."Inventory Posting Group";
              "Gen. Prod. Posting Group" := TransLine3."Gen. Prod. Posting Group";
              SourceCodeSetup.GET;
              "Source Code" := SourceCodeSetup."Revaluation Journal";
              VALIDATE("Applies-to Entry", ItemLedgEntry."Entry No.");
              VALIDATE("Unit Cost (Revalued)", ("Unit Cost (Revalued)" + (AmtToLoad / TransRcptLine2.Quantity)));
              ItemJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader2."No.");
              Ctr := TempItemJnlLine."Line No." + 1;
              TempItemJnlLine.INIT;
              TempItemJnlLine.TRANSFERFIELDS(ItemJnlLine);
              TempItemJnlLine."Line No." := Ctr;
              ItemJnlPostLine.RUN(TempItemJnlLine);
            END;
          UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FillExcisePostingBuffer@1280025(TransLine@1280001 : Record 5741);
    VAR
      Location@1000 : Record 14;
      CompanyInfo@1001 : Record 79;
    BEGIN
      WITH TransLine DO BEGIN
        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETRANGE("From Date",0D,TransHeader."Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,FALSE);
        IF ExcisePostingSetup.FIND('+') THEN;

        ExcisePostingBuffer[1]."Excise Bus. Posting Group" := "Excise Bus. Posting Group";
        ExcisePostingBuffer[1]."Excise Prod. Posting Group" := "Excise Prod. Posting Group";
        ExcisePostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ExcisePostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 1 Code";
        ExcisePostingBuffer[1]."Item No." := "Item No.";
        ExcisePostingBuffer[1]."Capital Item" := TransLine."Capital Item";
        ExcisePostingBuffer[1]."Amount Including Excise" := "Amount Including Excise";
        ExcisePostingBuffer[1]."BED Calculation Type" := ExcisePostingSetup."BED Calculation Type";
        ExcisePostingBuffer[1]."Excise Amount" := "Excise Amount" - "CESS Amount";
        ExcisePostingBuffer[1]."Excise Amount (ACY)" := "Excise Amount" - "CESS Amount";
        ExcisePostingBuffer[1]."CESS Amount (ACY)" := "CESS Amount";
        ExcisePostingBuffer[1]."Excise Base Amount" := "Excise Base Amount";
        ExcisePostingBuffer[1]."BED %" := ExcisePostingSetup."BED %";
        ExcisePostingBuffer[1]."BED Amount" := "BED Amount";
        ExcisePostingBuffer[1]."AED(GSI) Amount" := "AED(GSI) Amount";
        ExcisePostingBuffer[1]."AED(TTA) Amount" := "AED(TTA) Amount";
        ExcisePostingBuffer[1]."SED Amount" := "SED Amount";
        ExcisePostingBuffer[1]."SAED Amount" := "SAED Amount";
        ExcisePostingBuffer[1]."CESS Amount" := "CESS Amount";
        ExcisePostingBuffer[1]."NCCD Amount" := "NCCD Amount";
        ExcisePostingBuffer[1]."eCess Amount" := "eCess Amount";
        ExcisePostingBuffer[1]."SHE Cess Amount" := "SHE Cess Amount";
        ExcisePostingBuffer[1]."ADET Amount" := "ADET Amount";
        ExcisePostingBuffer[1]."ADE Amount" := "ADE Amount";
        ExcisePostingBuffer[1]."ADC VAT Amount" := "ADC VAT Amount";
        ExcisePostingBuffer[1].CVD := CVD;
        ExcisePostingBuffer[1].Quantity := TransLine."Qty. to Receive";
        Location.GET(TransLine."Transfer-to Code");
        IF Location."E.C.C. No." <> '' THEN
          ExcisePostingBuffer[1]."E.C.C. No." := Location."E.C.C. No."
        ELSE BEGIN
          CompanyInfo.GET;
          ExcisePostingBuffer[1]."E.C.C. No." := CompanyInfo."E.C.C. No.";
        END;
        UpdExcisePostingBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdExcisePostingBuffer@1280027();
    VAR
      TempDimBuf@1280001 : TEMPORARY Record 360;
      EntryNo@1280000 : Integer;
    BEGIN
      ExcisePostingBuffer[1]."Dimension Set ID" := TransLine."Dimension Set ID";

      DimMgt.UpdateGlobalDimFromDimSetID(ExcisePostingBuffer[1]."Dimension Set ID",
        ExcisePostingBuffer[1]."Global Dimension 1 Code",ExcisePostingBuffer[1]."Global Dimension 2 Code");

      ExcisePostingBuffer[2] := ExcisePostingBuffer[1];
      IF ExcisePostingBuffer[2].FIND THEN BEGIN
        ExcisePostingBuffer[2]."Amount Including Excise" += ExcisePostingBuffer[1]."Amount Including Excise";
        ExcisePostingBuffer[2]."Excise Amount" += ExcisePostingBuffer[1]."Excise Amount";
        ExcisePostingBuffer[2]."Excise Amount (ACY)" += ExcisePostingBuffer[1]."Excise Amount (ACY)";
        ExcisePostingBuffer[2]."CESS Amount (ACY)" += ExcisePostingBuffer[1]."CESS Amount (ACY)";
        ExcisePostingBuffer[2]."Excise Base Amount" += ExcisePostingBuffer[1]."Excise Base Amount";
        ExcisePostingBuffer[2]."BED Amount" += ExcisePostingBuffer[1]."BED Amount";
        ExcisePostingBuffer[2]."AED(GSI) Amount" += ExcisePostingBuffer[1]."AED(GSI) Amount";
        ExcisePostingBuffer[2]."AED(TTA) Amount" += ExcisePostingBuffer[1]."AED(TTA) Amount";
        ExcisePostingBuffer[2]."SED Amount" += ExcisePostingBuffer[1]."SED Amount";
        ExcisePostingBuffer[2]."SAED Amount" += ExcisePostingBuffer[1]."SAED Amount";
        ExcisePostingBuffer[2]."CESS Amount" += ExcisePostingBuffer[1]."CESS Amount";
        ExcisePostingBuffer[2]."NCCD Amount" += ExcisePostingBuffer[1]."NCCD Amount";
        ExcisePostingBuffer[2]."eCess Amount" += ExcisePostingBuffer[1]."eCess Amount";
        ExcisePostingBuffer[2]."SHE Cess Amount" += ExcisePostingBuffer[1]."SHE Cess Amount";
        ExcisePostingBuffer[2]."ADET Amount" += ExcisePostingBuffer[1]."ADET Amount";
        ExcisePostingBuffer[2]."ADE Amount" += ExcisePostingBuffer[1]."ADE Amount";
        ExcisePostingBuffer[2]."ADC VAT Amount" += ExcisePostingBuffer[1]."ADC VAT Amount";
        ExcisePostingBuffer[2].Quantity += ExcisePostingBuffer[1].Quantity;
        ExcisePostingBuffer[2].MODIFY;
      END ELSE
        ExcisePostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record 81);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
    BEGIN
      GenJnlPostLine.RUN(GenJnlLine);
    END;

    LOCAL PROCEDURE RoundExciseAmount@1280016(ExciseDutyAmount@1280000 : Decimal;Qty@1280003 : Decimal;TotalQty@1280004 : Decimal) : Decimal;
    VAR
      ExciseRoundingDirection@1280001 : Text[1];
      ExciseRoundingPrecision@1280002 : Decimal;
    BEGIN
      GetGLSetup;
      CASE GLSetup."Excise Rounding Type" OF
        GLSetup."Excise Rounding Type"::Nearest:
          ExciseRoundingDirection := '=';
        GLSetup."Excise Rounding Type"::Up:
          ExciseRoundingDirection := '>';
        GLSetup."Excise Rounding Type"::Down:
          ExciseRoundingDirection := '<';
      END;
      IF GLSetup."Excise Rounding Precision" <> 0 THEN
        ExciseRoundingPrecision := GLSetup."Excise Rounding Precision"
      ELSE
        ExciseRoundingPrecision := 0.01;
      EXIT(ROUND((ExciseDutyAmount * (Qty/TotalQty)),ExciseRoundingPrecision,ExciseRoundingDirection));
    END;

    PROCEDURE GetPerUnitAmount@1500004(VAR TransferLine2@1500000 : Record 5741);
    BEGIN
      WITH TransferLine2 DO BEGIN
        IF Quantity = 0 THEN
          EXIT;
        BEDAmt := "BED Amount"/ Quantity;
        AEDGSIAmt := "AED(GSI) Amount" / Quantity;
        AEDTTAAmt := "AED(TTA) Amount" / Quantity;
        SEDAmt := "SED Amount" / Quantity;
        SAEDAmt := "SAED Amount" / Quantity;
        CESSAmt := "CESS Amount"/ Quantity;
        NCCDAmt := "NCCD Amount" / Quantity;
        eCessAmt := "eCess Amount" / Quantity;
        SHECessAmt := "SHE Cess Amount" / Quantity;
        ADETAmt := "ADET Amount" / Quantity;
        ADEAmt := "ADE Amount" / Quantity;
        ADCVATAmt := "ADC VAT Amount" / Quantity;
        ExciseBaseAmt := "Excise Base Amount" / Quantity;
        ExciseAmt := "Excise Amount" / Quantity;
      END
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE FillGSTPostingBuffer@1500002(TransLine@1500189 : Record 5741);
    VAR
      Location@1500009 : Record 14;
      GSTComponent@1500008 : Record 16405;
      GSTPostingSetup@1500007 : Record 16406;
      DetailedGSTEntryBuffer@1500006 : Record 16412;
      GSTManagement@1500005 : Codeunit 16401;
      QFactor@1500000 : Decimal;
      GSTStateCode@1500200 : Code[10];
    BEGIN
      WITH TransLine DO BEGIN
        Location.GET(TransHeader."Transfer-to Code");
        Location.TESTFIELD("State Code");
        GSTStateCode := Location."State Code";
        DetailedGSTEntryBuffer.RESET;
        DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
        DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Transfer);
        DetailedGSTEntryBuffer.SETRANGE("Document Type",0);
        DetailedGSTEntryBuffer.SETRANGE("Document No.","Document No.");
        DetailedGSTEntryBuffer.SETRANGE("Line No.","Line No.");
        DetailedGSTEntryBuffer.SETFILTER("GST Base Amount",'<>%1',0);
        IF DetailedGSTEntryBuffer.FINDSET THEN
          REPEAT
            GSTPostingBuffer[1].Type := GSTPostingBuffer[1].Type::Item;
            GSTPostingBuffer[1]."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
            GSTPostingBuffer[1]."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
            GSTPostingBuffer[1]."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
            GSTPostingBuffer[1]."GST Group Code"  := "GST Group Code";
            QFactor := ABS(TransLine."Qty. to Receive" / Quantity);
            GSTPostingBuffer[1]."GST Base Amount" := -GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Base Amount");
            GSTPostingBuffer[1]."GST Amount" := -GSTManagement.RoundGSTPrecision(QFactor * DetailedGSTEntryBuffer."GST Amount");
            GSTPostingBuffer[1]."GST %" := DetailedGSTEntryBuffer."GST %" ;
            GSTPostingBuffer[1]."GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            IF "GST Credit" = "GST Credit"::Availment THEN
              GSTPostingBuffer[1]."Account No." := GSTManagement.GetGSTReceivableAccountNo(GSTStateCode,
                DetailedGSTEntryBuffer."GST Component Code")
            ELSE
              GSTPostingBuffer[1]."Account No.":='';
            UpdateGSTPostingBuffer;
          UNTIL DetailedGSTEntryBuffer.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE UpdateGSTPostingBuffer@1500001();
    BEGIN
      GSTPostingBuffer[1]."Dimension Set ID" := TransLine."Dimension Set ID";
      DimMgt.UpdateGlobalDimFromDimSetID(GSTPostingBuffer[1]."Dimension Set ID",
        GSTPostingBuffer[1]."Global Dimension 1 Code",GSTPostingBuffer[1]."Global Dimension 2 Code");
      GSTPostingBuffer[2] := GSTPostingBuffer[1];
      IF GSTPostingBuffer[2].FIND THEN BEGIN
        GSTPostingBuffer[2]."GST Base Amount" += GSTPostingBuffer[1]."GST Base Amount";
        GSTPostingBuffer[2]."GST Amount" += GSTPostingBuffer[1]."GST Amount";
        GSTPostingBuffer[2]."Interim Amount" += GSTPostingBuffer[1]."Interim Amount";
        GSTPostingBuffer[2].MODIFY;
      END ELSE
        GSTPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostTransLineToGenJnlLine@1500035(TransferHeader@1500000 : Record 5740);
    VAR
      SalesLine2@1500002 : Record 37;
      GSTManagement@1500004 : Codeunit 16401;
      GLEntryNo@1500001 : Integer;
      SourceCodeSetup@1500003 : Record 242;
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        "Posting Date" := TransferHeader."Posting Date";
        Description := STRSUBSTNO(Text13700,TransRcptHeader."No.");
        "Document Type" := GenJnlLine."Document Type"::Invoice;
        "Document No." := TransRcptHeader."No.";
        "External Document No." := TransferHeader."No.";
        IF GSTPostingBuffer[1]."GST Amount" <> 0 THEN BEGIN
          VALIDATE(Amount,ROUND(GSTPostingBuffer[1]."GST Amount"));
          "Account No." := GSTPostingBuffer[1]."Account No.";
        END;
        "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
        "GST Base Amount" := GSTPostingBuffer[1]."GST Base Amount";
        "GST Group Code" := GSTPostingBuffer[1]."GST Group Code";
        "GST Component Code" := GSTPostingBuffer[1]."GST Component Code";
        "System-Created Entry" := TransferBuffer[1]."System-Created Entry";
        "Gen. Posting Type" := "Gen. Posting Type"::Purchase;
        "Gen. Bus. Posting Group" := GSTPostingBuffer[1]."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer[1]."Gen. Prod. Posting Group";
        "Shortcut Dimension 1 Code" := GSTPostingBuffer[1]."Global Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GSTPostingBuffer[1]."Global Dimension 2 Code";
        "Product Type" := GenJnlLine."Product Type"::Item;
        "Dimension Set ID" := GSTPostingBuffer[1]."Dimension Set ID";
        "Location Code" := TransferHeader."Transfer-to Code";
        SourceCodeSetup.GET;
        "Source Code" := SourceCodeSetup.Transfer;
        "Account Type" := "Account Type"::"G/L Account";
        GSTManagement.InsertGSTLedgerEntryTransfer(
          GSTPostingBuffer[1],TransferHeader,
          GenJnlPostLine.GetNextTransactionNo,GenJnlLine."Document Type",GenJnlLine."Document No.",
          SourceCodeSetup.Transfer,DocTransferType::TransferReciept);
        IF GSTPostingBuffer[1]."Account No." <> '' THEN
          RunGenJnlPostLine(GenJnlLine);
      END;
    END;

    LOCAL PROCEDURE PostRevaluationEntryGST@1500000(VAR TransLine3@1500333 : Record 5741;TransRcptHeader2@1500044 : Record 5746;TransRcptLine2@1500456 : Record 5747);
    VAR
      SourceCodeSetup@1500999 : Record 242;
      ItemReg@1500998 : Record 46;
      ItemLedgEntry@1500997 : Record 32;
      AmtToLoad@1500996 : Decimal;
      Ctr@1500995 : Integer;
    BEGIN
      IF TransLine3."Qty. to Receive" = 0 THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        ItemReg.FINDLAST;
        ItemLedgEntry.RESET;
        ItemLedgEntry.SETCURRENTKEY("Location Code","Posting Date","Document No.","Item No.");
        ItemLedgEntry.SETRANGE("Entry No.",ItemReg."From Entry No.",ItemReg."To Entry No.");
        ItemLedgEntry.SETRANGE("Location Code",TransRcptHeader2."Transfer-to Code");
        ItemLedgEntry.SETRANGE("Posting Date",TransRcptHeader2."Posting Date");
        ItemLedgEntry.SETRANGE("Document No.",TransRcptHeader2."No.");
        ItemLedgEntry.SETRANGE("Item No.", TransLine3."Item No.");
        IF ItemLedgEntry.FIND('-') THEN
          REPEAT
            IF TransLine3."GST Credit" = TransLine3."GST Credit"::"Non-Availment" THEN
              AmtToLoad := TransLine3."Total GST Amount" ;
            IF AmtToLoad <> 0 THEN BEGIN
              INIT;
              VALIDATE("Posting Date",TransRcptHeader2."Posting Date");
              "Document Date" := TransRcptHeader2."Posting Date";
              VALIDATE("Document No.",TransRcptHeader2."No.");
              "External Document No." := TransRcptHeader2."External Document No.";
              VALIDATE("Entry Type","Entry Type"::Transfer);
              "Value Entry Type" := "Value Entry Type"::Revaluation;
              VALIDATE("Item No.",TransRcptLine2."Item No.");
              Description := TransRcptLine2.Description;
              "Inventory Posting Group" := TransRcptLine2."Inventory Posting Group";
              "Gen. Prod. Posting Group" := TransLine3."Gen. Prod. Posting Group";
              SourceCodeSetup.GET;
              "Source Code" := SourceCodeSetup."Revaluation Journal";
              VALIDATE("Applies-to Entry", ItemLedgEntry."Entry No.");
              VALIDATE("Unit Cost (Revalued)", ("Unit Cost (Revalued)" + (AmtToLoad / TransRcptLine2.Quantity)));
              ItemJnlLine.Description := STRSUBSTNO(Text13700,TransRcptHeader2."No.");
              Ctr := TempItemJnlLine."Line No." + 1;
              TempItemJnlLine.INIT;
              TempItemJnlLine.TRANSFERFIELDS(ItemJnlLine);
              TempItemJnlLine."Line No." := Ctr;
              ItemJnlPostLine.RUN(TempItemJnlLine);
            END;
          UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

