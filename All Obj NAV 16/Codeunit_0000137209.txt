OBJECT Codeunit 137209 SCM Get Item Entries
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1009 : Record 79;
      Assert@1005 : Codeunit 130000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryPurchase@1003 : Codeunit 130512;
      LibrarySales@1004 : Codeunit 130509;
      LibraryInventory@1007 : Codeunit 132201;
      LibraryUtility@1008 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LineType@1010 : 'Shipment,Receipt';
      IsInitialized@1000 : Boolean;

    [Normal]
    LOCAL PROCEDURE ItemEntries@11(Type@1006 : Option;StartDate@1008 : Date);
    VAR
      IntrastatJnlTemplate@1001 : Record 261;
      IntrastatJnlBatch@1002 : Record 262;
      IntrastatJnlLine@1005 : Record 263;
      TempCompanyInformation@1010 : TEMPORARY Record 79;
      DocumentType@1004 : Option;
      DocumentNo@1000 : Code[20];
      CurrencyCode@1003 : Code[10];
      NoOfLines@1009 : Integer;
    BEGIN
      // Setup: Add country info and additional currency.
      Initialize;
      CompanyInformation.GET;
      TempCompanyInformation := CompanyInformation;
      TempCompanyInformation.INSERT(TRUE);
      UpdateCompanyInfo;
      CurrencyCode := UpdateAddnlReportingCurrency;

      // Setup intrastat journal.
      CreateIntrastatJnlTemplate(IntrastatJnlTemplate);
      CreateIntrastatJnlBatch(IntrastatJnlBatch,IntrastatJnlTemplate,CurrencyCode,TRUE);
      CreateIntrastatJnlLine(IntrastatJnlLine,IntrastatJnlBatch);

      // Create sales document.
      CreateAndPostDocument(DocumentType,DocumentNo,Type);

      // Exercise: Get Item Ledger Entries for the specified dates.
      RunGetItemEntries(IntrastatJnlLine,StartDate,CALCDATE('<+1D>',StartDate));

      // Verify: Intrastat lines correctly reflect Item Ledger entries.
      NoOfLines := VerifyIntrastatLines(IntrastatJnlLine,DocumentType,DocumentNo);

      // Prevent false negatives when some lines are retrieved for an invalid interval.
      Assert.IsFalse((WORKDATE < StartDate) AND (NoOfLines <> 0),'Some lines were retrieved for ' + DocumentNo);

      // Tear Down: Restore company information.
      RestoreCompanyInfo(TempCompanyInformation);
    END;

    [Test]
    PROCEDURE SaleInsideInterval@6();
    BEGIN
      ItemEntries(LineType::Shipment,CALCDATE('<-1D>',WORKDATE));
    END;

    [Test]
    PROCEDURE SaleOutsideInterval@10();
    BEGIN
      ItemEntries(LineType::Shipment,CALCDATE('<+1D>',WORKDATE));
    END;

    [Test]
    PROCEDURE PurchInsideInterval@34();
    BEGIN
      ItemEntries(LineType::Receipt,CALCDATE('<-1D>',WORKDATE));
    END;

    [Test]
    PROCEDURE PurchOutsideInterval@33();
    BEGIN
      ItemEntries(LineType::Receipt,CALCDATE('<+1D>',WORKDATE));
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@31() : Code[10];
    VAR
      Currency@1001 : Record 4;
      GLAccount@1000 : Record 15;
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      // Add required accounts for the currency setup.
      LibraryERM.FindGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",Currency."Residual Gains Account");
      LibraryERM.FindGLAccount(GLAccount);
      Currency.VALIDATE("Realized G/L Gains Account",GLAccount."No.");
      Currency.VALIDATE("Realized G/L Losses Account",Currency."Realized G/L Gains Account");
      Currency.MODIFY(TRUE);

      // Create Currency Exchange Rate.
      LibraryERM.CreateExchRate(CurrencyExchangeRate,Currency.Code,WORKDATE);

      // Using RANDOM Exchange Rate Amount and Adjustment Exchange Rate, between 100 and 400 (Standard Value).
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",100 * LibraryRandom.RandInt(4));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",2 * CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);

      EXIT(Currency.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateItem@2() ItemNo : Code[20];
    VAR
      Item@1000 : Record 27;
      TariffNumber@1003 : Record 260;
    BEGIN
      LibraryInventory.CreateItem(Item);
      ItemNo := Item."No.";
      // Add a tariff to all items to insure all eligible lines are retrieved in the intrastat journal.
      TariffNumber.FINDFIRST;
      Item.SETRANGE("Tariff No.",'');
      IF Item.FINDSET THEN
        REPEAT
          Item.VALIDATE("Tariff No.",TariffNumber."No.");
          Item.MODIFY(TRUE);
        UNTIL Item.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateAddnlReportingCurrency@94() : Code[10];
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Set additional currency reporting in the GL setup.
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Additional Reporting Currency" := CreateCurrencyAndExchangeRate;
      GeneralLedgerSetup.MODIFY(TRUE);
      EXIT(GeneralLedgerSetup."Additional Reporting Currency");
    END;

    [Normal]
    LOCAL PROCEDURE CreateIntrastatJnlTemplate@7(VAR IntrastatJnlTemplate@1000 : Record 261);
    BEGIN
      IntrastatJnlTemplate.INIT;
      IntrastatJnlTemplate.VALIDATE(Name,LibraryUtility.GenerateRandomCode(IntrastatJnlTemplate.FIELDNO(Name),
          DATABASE::"Intrastat Jnl. Template"));
      IntrastatJnlTemplate.VALIDATE(Description,LibraryUtility.GenerateRandomCode(IntrastatJnlTemplate.FIELDNO(Description),
          DATABASE::"Intrastat Jnl. Template"));
      IntrastatJnlTemplate.VALIDATE("Checklist Report ID",502);
      IntrastatJnlTemplate.VALIDATE("Page ID",311);
      IntrastatJnlTemplate.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateIntrastatJnlBatch@9(VAR IntrastatJnlBatch@1000 : Record 262;IntrastatJnlTemplate@1001 : Record 261;CurrencyID@1002 : Code[10];AmountInAddCurr@1003 : Boolean);
    BEGIN
      IntrastatJnlBatch.INIT;
      IntrastatJnlBatch.VALIDATE("Journal Template Name",IntrastatJnlTemplate.Name);
      IntrastatJnlBatch.VALIDATE(Name,LibraryUtility.GenerateRandomCode(IntrastatJnlBatch.FIELDNO(Name),
          DATABASE::"Intrastat Jnl. Batch"));
      IntrastatJnlBatch.VALIDATE(Description,LibraryUtility.GenerateRandomCode(IntrastatJnlBatch.FIELDNO(Description),
          DATABASE::"Intrastat Jnl. Batch"));
      IntrastatJnlBatch.VALIDATE("Statistics Period",FORMAT(TODAY,0,'<Year><Month,2>'));
      IntrastatJnlBatch.VALIDATE("Amounts in Add. Currency",AmountInAddCurr);
      IntrastatJnlBatch.VALIDATE("Currency Identifier",CurrencyID);
      IntrastatJnlBatch.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateIntrastatJnlLine@20(VAR IntrastatJnlLine@1002 : Record 263;IntrastatJnlBatch@1000 : Record 262);
    BEGIN
      IntrastatJnlLine.INIT;
      IntrastatJnlLine.VALIDATE("Journal Template Name",IntrastatJnlBatch."Journal Template Name");
      IntrastatJnlLine.VALIDATE("Journal Batch Name",IntrastatJnlBatch.Name);
      IntrastatJnlLine.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateSalesOrder@12(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option;CustomerNo@1004 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
      Counter@1002 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      FOR Counter := 1 TO 2 DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchOrder@30(VAR PurchaseHeader@1000 : Record 38;DocumentType@1003 : Option;VendorNo@1004 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
      Counter@1002 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      FOR Counter := 1 TO 2 DO
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,
          LibraryRandom.RandInt(10));
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndPostDocument@29(VAR DocumentType@1005 : Option;VAR DocumentNo@1006 : Code[20];Type@1000 : Option);
    VAR
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1002 : Record 38;
      SalesShipmentHeader@1003 : Record 110;
      PurchRcptHeader@1004 : Record 120;
      ItemLedgerEntry@1007 : Record 32;
      Customer@1008 : Record 18;
      Vendor@1009 : Record 23;
    BEGIN
      CASE Type OF
        LineType::Shipment:
          BEGIN
            LibrarySales.CreateCustomer(Customer);
            // Customize the customer to be from within EU, from a different country than the one defined in the company information.
            Customer.VALIDATE("Country/Region Code",CreateEUCountryRegion);
            Customer.MODIFY(TRUE);

            // Create and post Sales Order.
            CreateSalesOrder(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
            LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

            // Output shipment information.
            SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
            SalesShipmentHeader.FINDFIRST;
            DocumentType := ItemLedgerEntry."Document Type"::"Sales Shipment";
            DocumentNo := SalesShipmentHeader."No.";
          END;
        LineType::Receipt:
          BEGIN
            LibraryPurchase.CreateVendor(Vendor);
            // Customize the vendor to be from within EU, from a different country than the one defined in the company information.
            Vendor.VALIDATE("Country/Region Code",CreateEUCountryRegion);
            Vendor.MODIFY(TRUE);

            // Create and post Purchase Order.
            CreatePurchOrder(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
            LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

            // Output receipt information.
            PurchRcptHeader.SETRANGE("Order No.",PurchaseHeader."No.");
            PurchRcptHeader.FINDFIRST;
            DocumentType := ItemLedgerEntry."Document Type"::"Purchase Receipt";
            DocumentNo := PurchRcptHeader."No.";
          END;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE CreateEUCountryRegion@13() CountryCode : Code[10];
    VAR
      CountryRegion@1000 : Record 9;
    BEGIN
      CountryRegion.INIT;
      CountryCode := COPYSTR(
          LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region"),1,10);
      CountryRegion.VALIDATE(Code,CountryCode);
      CountryRegion.VALIDATE(Name,CountryCode);
      CountryRegion.VALIDATE("EU Country/Region Code",CountryCode);
      CountryRegion.VALIDATE("Intrastat Code",CountryCode);
      CountryRegion.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateCompanyInfo@17();
    VAR
      CompanyInformation@1001 : Record 79;
      CountryRegionCode@1000 : Code[10];
    BEGIN
      CountryRegionCode := CreateEUCountryRegion;
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("Country/Region Code",CountryRegionCode);
      CompanyInformation.VALIDATE("Ship-to Country/Region Code",CountryRegionCode);
      CompanyInformation.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE RestoreCompanyInfo@15(BaseCompanyInformation@1000 : Record 79);
    VAR
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("Country/Region Code",BaseCompanyInformation."Country/Region Code");
      CompanyInformation.VALIDATE("Ship-to Country/Region Code",BaseCompanyInformation."Ship-to Country/Region Code");
      CompanyInformation.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE RunGetItemEntries@19(VAR IntrastatJnlLine@1002 : Record 263;StartDate@1001 : Date;EndDate@1003 : Date);
    VAR
      GetItemLedgerEntries@1000 : Report 594;
    BEGIN
      GetItemLedgerEntries.InitializeRequest(StartDate,EndDate,0);
      GetItemLedgerEntries.SetIntrastatJnlLine(IntrastatJnlLine);
      GetItemLedgerEntries.USEREQUESTPAGE(FALSE);
      GetItemLedgerEntries.RUNMODAL;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyIntrastatLines@3(IntrastatJnlLine@1000 : Record 263;DocumentType@1002 : Option;DocumentNo@1003 : Code[20]) RetrievedLines : Integer;
    VAR
      ItemLedgerEntry@1001 : Record 32;
      Item@1004 : Record 27;
    BEGIN
      RetrievedLines := 0;
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDSET;
      REPEAT
        IntrastatJnlLine.SETRANGE(Type,ItemLedgerEntry."Document Type");
        IntrastatJnlLine.SETRANGE(Date,ItemLedgerEntry."Posting Date");
        IntrastatJnlLine.SETRANGE("Source Type",IntrastatJnlLine."Source Type"::"Item Entry");
        IntrastatJnlLine.SETRANGE("Source Entry No.",ItemLedgerEntry."Entry No.");
        IntrastatJnlLine.SETRANGE("Document No.",DocumentNo);
        IntrastatJnlLine.SETRANGE("Item No.",ItemLedgerEntry."Item No.");
        RetrievedLines += IntrastatJnlLine.COUNT;
        IF IntrastatJnlLine.FINDFIRST THEN BEGIN
          Assert.AreEqual(1,IntrastatJnlLine.COUNT,'Too many intrastat entries for ' + FORMAT(ItemLedgerEntry."Entry No."));
          Item.GET(ItemLedgerEntry."Item No.");
          IntrastatJnlLine.TESTFIELD("Tariff No.",Item."Tariff No.");
          IntrastatJnlLine.TESTFIELD("Country/Region of Origin Code",Item."Country/Region of Origin Code");

          CASE DocumentType OF
            ItemLedgerEntry."Document Type"::"Sales Shipment":
              BEGIN
                IntrastatJnlLine.TESTFIELD(Type,IntrastatJnlLine.Type::Shipment);
                IntrastatJnlLine.TESTFIELD(Quantity,-ItemLedgerEntry.Quantity);
              END;
            ItemLedgerEntry."Document Type"::"Purchase Receipt":
              BEGIN
                IntrastatJnlLine.TESTFIELD(Type,IntrastatJnlLine.Type::Receipt);
                IntrastatJnlLine.TESTFIELD(Quantity,ItemLedgerEntry.Quantity);
              END;
          END;
        END;
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    BEGIN
    {
      // [FEATURE] [Get Item Ledger Entries] [Intrastat]
      Unsupported version tags:
      US: Unable to Execute
      DE: Unable to Execute
      CA: Unable to Execute

      This CU covers the functionality of getting Item Ledger Entries into the Intrastat Journal.
      The following cases are considered:
       - receipt lines
       - shipment lines
       - document date within requested interval
       - document date outside requested interval
    }
    END.
  }
}

