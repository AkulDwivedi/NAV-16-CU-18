OBJECT Codeunit 134415 Test OCR Service Setup
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      InvalidUriErr@1001 : TextConst 'ENU=The URL is not valid.';

    [Test]
    PROCEDURE TestOcrSetupServiceUrlBlank@2();
    VAR
      OCRServiceSetup@1000 : Record 1270;
    BEGIN
      // Init
      OCRServiceSetup.INIT;

      // Execute
      OCRServiceSetup.VALIDATE("Service URL",'');

      // Validate
      Assert.AreEqual('',OCRServiceSetup."Service URL",'');
    END;

    [Test]
    PROCEDURE TestOcrSetupServiceUrlInvalidUrl@6();
    VAR
      OCRServiceSetup@1000 : Record 1270;
    BEGIN
      // Init
      OCRServiceSetup.INIT;

      // Execute
      ASSERTERROR OCRServiceSetup.VALIDATE("Service URL",'http://this is an invalid url');

      // Validate
      Assert.ExpectedError(InvalidUriErr);
    END;

    [Test]
    PROCEDURE TestOcrSetupServiceUrlPositive@14();
    VAR
      OCRServiceSetup@1000 : Record 1270;
    BEGIN
      // Init
      OCRServiceSetup.INIT;

      // Execute
      OCRServiceSetup.VALIDATE("Service URL",'https://microsoft.com/');

      // Validate
      Assert.AreEqual('https://microsoft.com',OCRServiceSetup."Service URL",'');
    END;

    [Test]
    PROCEDURE TestOcrSetupServiceInsertDefault@16();
    VAR
      OCRServiceSetup@1001 : Record 1270;
      OCRServiceSetupCard@1000 : TestPage 1270;
    BEGIN
      // Init
      IF OCRServiceSetup.GET THEN
        OCRServiceSetup.DELETE(TRUE);

      // Exectute
      OCRServiceSetupCard.OPENEDIT;
      Assert.AreEqual('',OCRServiceSetupCard."Service URL".VALUE,'');
      OCRServiceSetupCard.SetURLsToDefault.INVOKE;
      OCRServiceSetupCard.CLOSE;

      // Validate
      OCRServiceSetup.GET;
      Assert.AreNotEqual('',OCRServiceSetup."Service URL",'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestOcrSetupPagePassword@25();
    VAR
      OCRServiceSetup@1000 : Record 1270;
      OCRServiceSetupCard@1001 : TestPage 1270;
      PasswordTxt@1002 : Text;
      AuthTxt@1003 : Text;
    BEGIN
      // Init
      IF OCRServiceSetup.GET THEN
        OCRServiceSetup.DELETE(TRUE);
      Assert.IsTrue(OCRServiceSetup.ISEMPTY,'');
      PasswordTxt := FORMAT(CREATEGUID);
      AuthTxt := FORMAT(CREATEGUID);

      // Execute
      OCRServiceSetupCard.OPENEDIT;
      OCRServiceSetupCard."User Name".VALUE := 'username';
      OCRServiceSetupCard.Password.VALUE := PasswordTxt;
      OCRServiceSetupCard.AuthorizationKey.VALUE := PasswordTxt; // To provoke an update of the ServicePassword
      OCRServiceSetupCard.AuthorizationKey.VALUE := AuthTxt;    // ..
      OCRServiceSetupCard.CLOSE;

      // Verify
      OCRServiceSetup.GET;
      Assert.IsTrue(OCRServiceSetup.HasPassword(OCRServiceSetup."Password Key"),'');
      Assert.IsTrue(OCRServiceSetup.HasPassword(OCRServiceSetup."Authorization Key"),'');
      Assert.AreEqual(PasswordTxt,OCRServiceSetup.GetPassword(OCRServiceSetup."Password Key"),'');
      Assert.AreEqual(AuthTxt,OCRServiceSetup.GetPassword(OCRServiceSetup."Authorization Key"),'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestOcrSetupPagePasswordClear@39();
    VAR
      OCRServiceSetup@1000 : Record 1270;
      OCRServiceSetupCard@1001 : TestPage 1270;
      PasswordTxt@1002 : Text;
      AuthTxt@1003 : Text;
    BEGIN
      // Init
      IF OCRServiceSetup.GET THEN
        OCRServiceSetup.DELETE(TRUE);
      Assert.IsTrue(OCRServiceSetup.ISEMPTY,'');
      PasswordTxt := FORMAT(CREATEGUID);
      AuthTxt := FORMAT(CREATEGUID);

      // Execute
      OCRServiceSetupCard.OPENEDIT;
      OCRServiceSetupCard."User Name".VALUE := 'username';
      OCRServiceSetupCard.Password.VALUE := PasswordTxt;
      OCRServiceSetupCard.Password.VALUE := '';
      OCRServiceSetupCard.AuthorizationKey.VALUE := AuthTxt;
      OCRServiceSetupCard.AuthorizationKey.VALUE := '';
      OCRServiceSetupCard.CLOSE;

      // Verify
      OCRServiceSetup.GET;
      Assert.IsFalse(OCRServiceSetup.HasPassword(OCRServiceSetup."Password Key"),'');
      Assert.IsFalse(OCRServiceSetup.HasPassword(OCRServiceSetup."Authorization Key"),'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,PageHandlerOcrServiceSetup)]
    PROCEDURE TestOcrServiceMgtCheckCredentials@46();
    VAR
      OCRServiceSetup@1001 : Record 1270;
      OCRServiceMgt@1000 : Codeunit 1294;
    BEGIN
      // Init
      IF OCRServiceSetup.DELETE(TRUE) THEN;
      OCRServiceSetup.INIT;
      OCRServiceSetup.INSERT(TRUE);

      // Execute
      ASSERTERROR OCRServiceMgt.CheckCredentials; // triggers a confirm and page.runmodal

      // Verify
      Assert.AreEqual(OCRServiceMgt.GetCredentialsErrText,GETLASTERRORTEXT,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestOcrServiceMgtCheckCredentialsMissing@7();
    VAR
      OCRServiceSetup@1001 : Record 1270;
      OCRServiceMgt@1000 : Codeunit 1294;
    BEGIN
      // Init
      IF OCRServiceSetup.GET THEN
        OCRServiceSetup.DELETE(TRUE);

      // Execute
      ASSERTERROR OCRServiceMgt.CheckCredentials;  // triggers a confirm

      // Verify
      Assert.AreEqual(OCRServiceMgt.GetCredentialsErrText,GETLASTERRORTEXT,'');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@42(Question@1000 : Text[1024];VAR Answer@1001 : Boolean);
    BEGIN
      Answer := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@50(Question@1000 : Text[1024];VAR Answer@1001 : Boolean);
    BEGIN
      Answer := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PageHandlerOcrServiceSetup@47(VAR OCRServiceSetup@1000 : TestPage 1270);
    BEGIN
      OCRServiceSetup.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [OCR Service]
    }
    END.
  }
}

