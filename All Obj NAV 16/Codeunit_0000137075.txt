OBJECT Codeunit 137075 SCM Planning Order Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1012 : Record 82;
      ItemJournalBatch@1013 : Record 233;
      OutputItemJournalTemplate@1026 : Record 82;
      OutputItemJournalBatch@1027 : Record 233;
      ConsumptionItemJournalTemplate@1008 : Record 82;
      ConsumptionItemJournalBatch@1004 : Record 233;
      LocationBlue@1003 : Record 14;
      LocationSilver@1014 : Record 14;
      LocationInTransit@1009 : Record 14;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryItemTracking@1024 : Codeunit 130502;
      LibraryPlanning@1005 : Codeunit 132203;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryManufacturing@1011 : Codeunit 132202;
      LibraryWarehouse@1023 : Codeunit 132204;
      LibrarySales@1010 : Codeunit 130509;
      LibraryPurchase@1015 : Codeunit 130512;
      LibraryPatterns@1017 : Codeunit 132212;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      LibraryVariableStorage@1016 : Codeunit 131004;
      isInitialized@1006 : Boolean;
      ItemFilter@1021 : TextConst 'ENU=%1|%2';
      UnexpectedErrorMsg@1050 : TextConst 'ENU=Unexpected message';
      NoTrackingLines@1034 : TextConst 'ENU=There are no order tracking entries for this line';
      ControlOptions@1018 : 'Purchase,Sale,Verification';
      ReqLineShouldNotExistErr@1019 : TextConst 'ENU=The requisition line for location %1 should not exist';
      ReqLineShouldExistErr@1020 : TextConst 'ENU=The requisition line for location %1 should exist';
      ReservedQuantityErr@1022 : TextConst 'ENU=Reserved Quantity should not be cleared';
      ItemTrackingDefinedErr@1025 : TextConst '@@@="%1 = Item No.";ENU=Item tracking is defined for item %1 in the Requisition Line';
      DialogErr@1028 : TextConst 'ENU=Dialog';

    [Test]
    PROCEDURE OrderTrackingForCalcRegenPlanReleasedProductionLFLItem@160();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // [GIVEN] Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(Item,ChildItem,ChildItem."Replenishment System"::"Prod. Order");

      // [GIVEN] Create and Refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // [WHEN] Calculate Regenerative Change Plan for Planning Worksheet for Parent Item and Child Item.
      CalcRegenPlanForPlanWkshWithMultipleItems(Item."No.",ChildItem."No.",WORKDATE,GetRequiredDate(10,30,WORKDATE,1));

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(Item."No.",0,0,ProductionOrder.Quantity,TRUE);  // Untracked Quantity and total Quantity - 0.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForCalcRegenPlanReleasedProdOutputJournalLFLItem@107();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      // [GIVEN] Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(Item,ChildItem,ChildItem."Replenishment System"::"Prod. Order");

      // [GIVEN] Create and Refresh Released Production Order.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));

      // [GIVEN] Create and Post Output Journal.
      CreateAndPostOutputJournal(ProductionOrder."No.");

      // [WHEN] Calculate Regenerative Plan for Planning Worksheet.
      CalcRegenPlanForPlanWkshWithMultipleItems(Item."No.",ChildItem."No.",WORKDATE,GetRequiredDate(10,30,WORKDATE,1));

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ChildItem."No.");
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      VerifyOrderTrackingOnRequisitionLine(
        ChildItem."No.",ProdOrderComponent."Expected Quantity",ProdOrderComponent."Expected Quantity",0,FALSE);
    END;

    [Test]
    PROCEDURE OrderTrackingForCalcRegenPlanPurchasePlanningFlexibilityNoneSalesLFLItem@89();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1004 : Record 37;
    BEGIN
      // [GIVEN] Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);

      // [GIVEN] Create Purchase Order with Planning Flexibility - None.
      CreatePurchaseOrder(PurchaseLine,Item."No.",'');
      UpdatePurchaseLinePlanningFlexibilityNone(PurchaseLine);

      // [GIVEN] Create Sales Order.
      CreateSalesOrder(SalesLine,Item."No.",'');

      // [WHEN] Calculate Regenerative Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] Verify Untracked Quantity and Total Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(Item."No.",0,SalesLine.Quantity,0,FALSE);  // Untracked Quantity - 0.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForCalcPlanReqWkshSKUSalesMaxQtyItem@102();
    VAR
      Item@1000 : Record 27;
      SalesLine@1003 : Record 37;
      RequisitionWkshName@1007 : Record 245;
      ItemVariant@1002 : Record 5401;
      StartDate@1005 : Date;
      EndDate@1006 : Date;
    BEGIN
      // [GIVEN] Create Maximum Quantity Item. Create Stockkeeping Unit. Update Inventory With Location.
      Initialize;
      CreateStockkeepingUnitForMaximumQtyItem(Item,ItemVariant,LocationBlue.Code);
      UpdateInventoryWithLocation(Item."No.",LocationBlue.Code);

      // [GIVEN] Create Sales Order With non Warehouse Location. Post Sales Order for Ship.
      CreateSalesOrder(SalesLine,Item."No.",LocationBlue.Code);
      PostSalesDocumentAsShip(SalesLine);

      // [WHEN] Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,WORKDATE,-1);  // Start Date less than WORKDATE.
      EndDate := GetRequiredDate(10,0,WORKDATE,1);  // End Date more than WORKDATE.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,StartDate,EndDate);

      // [THEN] Verify Untracked Quantity, Total Quantity on Requisition Line using Order Tracking.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      VerifyOrderTrackingOnRequisitionLine(Item."No.",Item."Maximum Inventory",Item."Maximum Inventory",0,FALSE);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE OrderTrackingForCalcRegenPlanSalesUsingForecastLFLItem@90();
    VAR
      Item@1010 : Record 27;
      ProductionForecastEntry@1009 : Record 99000852;
      SalesLine@1007 : Record 37;
      PlanningWorksheet@1003 : TestPage 99000852;
    BEGIN
      // [GIVEN] Create Lot for Lot Item. Create Production Forecast.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE);

      // [GIVEN] Create Sales Order.
      CreateSalesOrder(SalesLine,Item."No.",'');

      // [WHEN] Calculate regenerative Plan for Planning Worksheet.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,Item."No.",Item."No.");

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(
        Item."No.",ProductionForecastEntry."Forecast Quantity" - SalesLine.Quantity,ProductionForecastEntry."Forecast Quantity",
        -SalesLine.Quantity,TRUE);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler,MessageHandler)]
    PROCEDURE OrderTrackingForCalcPlanWithMPSForecastAndProdOrderConsumpLFLItem@106();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionForecastEntry@1003 : Record 99000852;
      ProductionOrder@1006 : Record 5405;
      PlanningWorksheet@1007 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1009 : Boolean;
      ForecastDate@1002 : Date;
    BEGIN
      // [GIVEN] Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS,MRP Calculation of Manufacturing Setup - FALSE.
      CreateLotForLotItemSetup(Item,ChildItem,ChildItem."Replenishment System"::Purchase);

      // [GIVEN] Create Production Forecast for parent item.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate);

      // [GIVEN] Create Released Production Order of parent item. Create and Post Consumption Journal.
      UpdateInventoryWithLocation(ChildItem."No.",'');
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(5,2));
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // [WHEN] Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,Item."No.",ChildItem."No.");

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      VerifyOrderTrackingOnRequisitionLine(
        Item."No.",ProductionForecastEntry."Forecast Quantity" - ProductionOrder.Quantity,
        ProductionForecastEntry."Forecast Quantity" - ProductionOrder.Quantity,0,FALSE);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    PROCEDURE OrderTrackingForCalcRegenPlanFirmPlannedProdTransferPlanningFlexibilityNoneLFLItem@48();
    VAR
      Item@1001 : Record 27;
      TransferLine@1004 : Record 5741;
      ProductionOrder@1018 : Record 5405;
    BEGIN
      // [GIVEN] Create Lot for Lot tem. Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItemSKUSetupWithTransfer(Item."No.",LocationSilver.Code,LocationBlue.Code);

      // [GIVEN] Create and Refresh Firm Planned Production Order. Create Transfer Order.
      CreateAndRefreshFirmPlannedProductionOrderWithLocation(
        ProductionOrder,Item."No.",LocationSilver.Code,LibraryRandom.RandDec(10,2));
      CreateTransferOrder(TransferLine,Item."No.",LocationSilver.Code,LocationBlue.Code);
      UpdateTransferLinePlanningFlexibilityNone(TransferLine);  // Update Planning Flexibility on Transfer Line - None.

      // [WHEN] Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(Item."No.",0,TransferLine.Quantity,ProductionOrder.Quantity - TransferLine.Quantity,TRUE);  // Untracked Quantity - 0.
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE OrderTrackingForCalcRegenPlanWithMPSForecastAndSalesLFLItem@72();
    VAR
      Item@1010 : Record 27;
      ProductionForecastEntry@1009 : Record 99000852;
      SalesLine@1007 : Record 37;
      PlanningWorksheet@1003 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1011 : Boolean;
    BEGIN
      // [GIVEN] Create Lot for Lot Item. Create Production Forecast.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS,MRP Calculation of Manufacturing Setup - FALSE.
      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE);

      // [GIVEN] Create Sales Order.
      CreateSalesOrder(SalesLine,Item."No.",'');

      // [WHEN] Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet. Using Page Handler - CalculatePlanPlanWkshRequestPageHandler.
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,Item."No.",Item."No.");

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(
        Item."No.",ProductionForecastEntry."Forecast Quantity" - SalesLine.Quantity,ProductionForecastEntry."Forecast Quantity",
        -SalesLine.Quantity,TRUE);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForCalcRegenPlanPlanningComponentWithSKUAndSalesLFLItem@181();
    VAR
      Item@1001 : Record 27;
      ChildItem@1000 : Record 27;
      SalesLine@1002 : Record 37;
    BEGIN
      // [GIVEN] Create Lot for Lot Item Setup. Create Stockkeeping Unit setup for Child Item.
      Initialize;
      CreateLotForLotItemSetup(Item,ChildItem,ChildItem."Replenishment System"::Purchase);
      CreateItemSKUSetupWithTransfer(ChildItem."No.",LocationSilver.Code,LocationBlue.Code);

      // [GIVEN] Create Sales Order for Parent Item.
      CreateSalesOrder(SalesLine,Item."No.",'');

      // [WHEN] Calculate regenerative Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] Verify Untracked Quantity and Total Quantity on Planning Component using Order Tracking.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      VerifyOrderTrackingForPlanningComponent(Item."No.");
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLinePageHandler)]
    PROCEDURE OrderTrackingForCalcRegenPlanPostPurchaseAndSalesReserveLFLItem@235();
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1001 : Record 39;
      SalesLine@1002 : Record 37;
    BEGIN
      // [GIVEN] Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);

      // [GIVEN] Create and Post Purchase Order.
      CreatePurchaseOrder(PurchaseLine,Item."No.",'');
      PostPurchaseDocument(PurchaseLine);

      // [GIVEN] Create and Reserve Sales Order.
      CreateSalesOrder(SalesLine,Item."No.",'');
      SalesLine.ShowReservation;  // Open Resrevation Page - ReservationFromCurrentLineHandler

      // [WHEN] Calculate regenerative Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(
        Item."No.",0,SalesLine.Quantity - PurchaseLine.Quantity,-(SalesLine.Quantity - PurchaseLine.Quantity),TRUE);  // Untracked Quantity - 0.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForCalcRegenPlanReleasedProdAndNegativeOutputLFLItem@28();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      // [GIVEN] Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(Item,ChildItem,ChildItem."Replenishment System"::"Prod. Order");

      // [GIVEN] Create and Refresh Released Production Order. Create and Post Output Journal.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      CreateAndPostOutputJournal(ProductionOrder."No.");

      // [GIVEN] Create and Post Output Journal again with negative Production Order Quantity.
      CreateAndPostOutputJournalWithAppliesToEntry(ProductionOrder."No.",Item."No.",-ProductionOrder.Quantity);

      // [WHEN] Calculate Regenerative Plan for Planning Worksheet.
      CalcRegenPlanForPlanWkshWithMultipleItems(Item."No.",ChildItem."No.",WORKDATE,GetRequiredDate(10,30,WORKDATE,1));

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ChildItem."No.");
      VerifyOrderTrackingOnRequisitionLine(
        ChildItem."No.",ProdOrderComponent."Expected Quantity",ProdOrderComponent."Expected Quantity",0,FALSE);
    END;

    [Test]
    PROCEDURE OrderTrackingForCalcRegenPlanForTransferAndOrderItem@100();
    VAR
      Item@1001 : Record 27;
      TransferLine@1004 : Record 5741;
    BEGIN
      // [GIVEN] Create Order Item. Create Transfer Order.
      Initialize;
      CreateItem(Item,Item."Reordering Policy"::Order,Item."Replenishment System"::Purchase);
      CreateTransferOrder(TransferLine,Item."No.",LocationSilver.Code,LocationBlue.Code);

      // [WHEN] Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      VerifyOrderTrackingOnRequisitionLine(Item."No.",0,0,TransferLine.Quantity,TRUE);  // Untracked Quantity and total Quantity - 0.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForCalcPlanReqWkshForPostedSalesWithPartialQtyToShipMQItem@2();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      RequisitionWkshName@1002 : Record 245;
      Quantity@1005 : Decimal;
      StartDate@1003 : Date;
      EndDate@1004 : Date;
    BEGIN
      // [GIVEN] Create Maximum Quantity Item.
      Initialize;
      CreateMaximumQtyItem(Item,LibraryRandom.RandDec(50,2) + 200);  // Large Quantity required for Maximum Inventory.

      // [GIVEN] Create and Post Sales Order With Quantity to Ship less than Sales Line Quantity.
      CreateAndPostSalesOrderWithPartialQtyToShip(SalesLine,Item."No.");

      // [WHEN] Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,WORKDATE,-1);  // Start Date less than WORKDATE.
      EndDate := GetRequiredDate(10,0,WORKDATE,1);  // End Date more than WORKDATE.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,StartDate,EndDate);

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      Quantity := SalesLine.Quantity - SalesLine."Qty. to Ship";
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      VerifyOrderTrackingOnRequisitionLineWithDueDate(
        Item."No.",SelectDateWithSafetyLeadTime(StartDate,-1),SalesLine."Qty. to Ship",SalesLine."Qty. to Ship",0,FALSE);
      VerifyOrderTrackingOnRequisitionLineWithDueDate(
        Item."No.",SelectDateWithSafetyLeadTime(StartDate,1),Item."Maximum Inventory" - Quantity,Item."Maximum Inventory",-Quantity,
        TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForCalcPlanReqWkshForPostedSalesWithPartialQtyToShipFRQItem@16();
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      RequisitionWkshName@1005 : Record 245;
      Quantity@1006 : Decimal;
      EndDate@1004 : Date;
    BEGIN
      // [GIVEN] Create Fixed Reorder Quantity Item.
      Initialize;
      CreateFRQItem(Item);

      // [GIVEN] Create and Post Sales Order With Quantity to Ship less than Sales Line Quantity.
      CreateAndPostSalesOrderWithPartialQtyToShip(SalesLine,Item."No.");

      // [WHEN] Calculate Plan for Requisition Worksheet.
      EndDate := GetRequiredDate(10,0,WORKDATE,1);  // End Date more than WORKDATE.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,EndDate);

      // [THEN] Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      LibraryVariableStorage.Enqueue(NoTrackingLines);  // Required inside MessageHandler.
      Quantity := SalesLine.Quantity - SalesLine."Qty. to Ship";
      VerifyOrderTrackingOnRequisitionLineWithDueDate(
        Item."No.",SelectDateWithSafetyLeadTime(WORKDATE,-1),SalesLine."Qty. to Ship",SalesLine."Qty. to Ship",0,FALSE);
      VerifyOrderTrackingOnRequisitionLineWithDueDate(
        Item."No.",SelectDateWithSafetyLeadTime(WORKDATE,1),Item."Reorder Point",Item."Reorder Point",0,FALSE);
      VerifyOrderTrackingOnRequisitionLineWithDueDate(
        Item."No.",WORKDATE,Item."Safety Stock Quantity",Quantity + Item."Safety Stock Quantity",-Quantity,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesModalPageHandler,EnterQtyToCreatePageHandler)]
    PROCEDURE CalculatePlanDoesNotRemoveItemTrackingSpecialOrders@6();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      RequisitionWkshName@1008 : Record 245;
      SerialNo@1012 : Variant;
    BEGIN
      // [SCENARIO Sicily 6770] Item Tracking on a Special Order (Sales Order) should not disappear if Calculate Plan is executed on the Req. Worksheet

      Initialize;
      // [GIVEN] prepare an item with item tracking (SN), reordering policy = lot-for-lot and 'Include Inventory' = Yes
      LibraryPatterns.MAKEItemSimple(Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Include Inventory",TRUE);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);
      LibraryItemTracking.AddSerialNoTrackingInfo(Item);

      // [GIVEN] Create a Sales Order (Special order)
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateSpecialOrder(SalesHeader,SalesLine,Item,Location.Code,'',1,// Qty 1
        WORKDATE,LibraryRandom.RandDec(10,2));

      // [GIVEN] Create a purchase order to supply Item for the previous Sales Order
      CreatePurchaseOrderForCustomer(PurchaseHeader,PurchaseLine,Item,Location.Code,'',1,// Qty 1
        WORKDATE,LibraryRandom.RandDec(5,2),SalesHeader."Sell-to Customer No.");

      // [GIVEN] From Item tracking lines (Purchase Order), add a SN to the item, then post receipt
      LibraryVariableStorage.Enqueue(ControlOptions::Purchase);
      PurchaseLine.OpenItemTrackingLines;
      LibraryVariableStorage.Dequeue(SerialNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] From Item Tracking Lines (Sales Order), assign same SN to the item
      LibraryVariableStorage.Enqueue(ControlOptions::Sale);
      LibraryVariableStorage.Enqueue(SerialNo);
      SalesLine.OpenItemTrackingLines;

      // [WHEN] open the Requisition Worksheets and Calculate a Plan for the item
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,CALCDATE('<-1M>',WORKDATE),CALCDATE('<+1M>',WORKDATE));

      // [THEN] Review the Sales Order, open the Item Tracking and notice the Serial No. disappeared.
      LibraryVariableStorage.Enqueue(ControlOptions::Verification);
      LibraryVariableStorage.Enqueue(SerialNo);
      SalesLine.OpenItemTrackingLines;
    END;

    [Test]
    PROCEDURE CalcRegenPlanForMultipleSKUWithTransferReplenishmentSystem@13();
    BEGIN
      Initialize;
      CalcRegenPlanForSKUWithTransferReplenishmentSystem(TRUE); // TRUE indicates creating 2 SKU
    END;

    [Test]
    PROCEDURE CalcRegenPlanForSingleSKUWithTransferReplenishmentSystem@21();
    BEGIN
      Initialize;
      CalcRegenPlanForSKUWithTransferReplenishmentSystem(FALSE); // FALSE indicates creating 1 SKU
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithCancelRequsitionLineForTransferOrder@25();
    VAR
      Item@1000 : Record 27;
      TransferLine@1001 : Record 5741;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // [SCENARIO] No requisition line should be generated when calculating plan in Planning Worksheet with a filter on a transfer-from location after planning without location filter

      // [GIVEN] Create Lot for Lot item. Create a Transfer Order from Location Blue to Silver.
      // [GIVEN] Calculate Plan for Planning Worksheet without Location filter. A Cancel Req. Line for the transfer order will be generated
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateTransferOrder(TransferLine,Item."No.",LocationBlue.Code,LocationSilver.Code);
      CalculateRegenPlanForPlanningWorksheet(Item);
      FilterRequisitionLine(RequisitionLine,Item."No.",LocationSilver.Code);
      Assert.IsFalse(RequisitionLine.ISEMPTY,STRSUBSTNO(ReqLineShouldExistErr,LocationSilver.Code)); // Check Req. Line for Location Silver exists

      // [WHEN] Calculate Plan for Planning Worksheet for Location Blue
      Item.SETRANGE("Location Filter",LocationBlue.Code);
      CalculateRegenPlanForPlanningWorksheet(Item);

      // [THEN] No Requisition Line for Location Blue should be generated.
      FilterRequisitionLine(RequisitionLine,Item."No.",LocationBlue.Code);
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(ReqLineShouldNotExistErr,LocationBlue.Code));
    END;

    [Test]
    PROCEDURE CalcPlanReqWkshWithMultipleWkshNameForTransferOrder@29();
    VAR
      Item@1002 : Record 27;
      TransferLine@1001 : Record 5741;
      RequisitionLine@1000 : Record 246;
      RequisitionWkshName@1003 : Record 245;
    BEGIN
      // [SCENARIO] No requisition line should be generated when calculating plan in Requisition Worksheet with a filter on a transfer-from location after planning without location filter

      // [GIVEN] Create Lot for Lot item. Create a Transfer Order from Location Blue to Silver.
      // [GIVEN] Calculate Plan for Requisition Worksheet without Location filter. A Cancel Req. Line for the transfer order will be generated
      Initialize;
      CreateLotForLotItem(Item,Item."Replenishment System"::Purchase);
      CreateTransferOrder(TransferLine,Item."No.",LocationBlue.Code,LocationSilver.Code);
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,WORKDATE + RANDOM(20));
      Assert.IsTrue(
        FindRequisitionLine(RequisitionLine,RequisitionLine."Action Message"::Cancel,Item."No.",LocationSilver.Code),
        STRSUBSTNO(ReqLineShouldExistErr,LocationSilver.Code)); // Check Cancel Action Message Req. Line for Location Silver exists

      // [WHEN] Calculate Plan for Requisition Worksheet with new Req. Worksheet Name for Location Blue
      Item.SETRANGE("Location Filter",LocationBlue.Code); // Set Location filter as Blue
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,WORKDATE + RANDOM(20));
      RequisitionLine.RESET;
      FilterRequisitionLine(RequisitionLine,Item."No.",LocationBlue.Code);

      // [THEN] No Requisition Line for Location Blue should be generated.
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(ReqLineShouldNotExistErr,LocationBlue.Code));
    END;

    [Test]
    PROCEDURE CalcRegenPlanReleasedProductionOrderWithReservedComponent@36();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // [GIVEN] Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      // [GIVEN] Create and Refresh Released Production Order.
      // [GIVEN] Calculate Regenerative Change Plan for Planning Worksheet for Child Item and Carry Out Action Message.
      Initialize;
      CreateOrderItemSetup(Item,ChildItem);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LibraryRandom.RandDec(10,2));
      CalculateRegenPlanForPlanningWorksheet(ChildItem);
      AcceptAndCarryOutActionMessage(ChildItem."No.",'');

      // [WHEN] Calculate Regenerative Change Plan for Planning Worksheet for Parent Item and Child Item.
      CalcRegenPlanForPlanWkshWithMultipleItems(
        Item."No.",ChildItem."No.",WORKDATE - LibraryRandom.RandInt(10),GetRequiredDate(10,30,WORKDATE,1));

      // [THEN] Verify Reserved Quantity on Prod. Order Component Line.
      VerifyReservedQuantityOnProdOrderComponent(ProductionOrder."No.",ChildItem."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesModalPageHandler)]
    PROCEDURE WrongRequisitionLineValueNotCommitted@41();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Location@1002 : Record 14;
      Item@1003 : Record 27;
      RequisitionLine@1006 : Record 246;
    BEGIN
      // [FEATURE] [Special Order]
      // [SCENARIO 377478] Incorrect value is not committed to database when validating requisition line

      // [GIVEN] Create sales order with "Special Order" purchasing code and lot tracking
      LibraryItemTracking.CreateLotItem(Item);
      LibraryWarehouse.CreateLocation(Location);
      CreateSpecialOrder(SalesHeader,SalesLine,Item,Location.Code,'',1,WORKDATE,LibraryRandom.RandDec(10,2));

      LibraryVariableStorage.Enqueue(ControlOptions::Sale);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      SalesLine.OpenItemTrackingLines;
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // [GIVEN] Create requisition line via "Get Special Order" in Requisition Worksheet
      GetSpecialOrder(RequisitionLine,Item."No.");

      // [WHEN] Change quantity on requisition line
      RequisitionLine.SetCurrFieldNo(RequisitionLine.FIELDNO(Quantity));
      ASSERTERROR RequisitionLine.VALIDATE(Quantity,RequisitionLine.Quantity + LibraryRandom.RandInt(20));

      // [THEN] Error: Existing item tracking must be deleted before modifying requisition line
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingDefinedErr,Item."No."));
      Assert.ExpectedErrorCode(DialogErr);
    END;

    LOCAL PROCEDURE Initialize@5();
    VAR
      RequisitionLine@1001 : Record 246;
      ReservationEntry@1002 : Record 337;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      RequisitionLine.DELETEALL;
      ReservationEntry.DELETEALL;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      ConsumptionJournalSetup;
      CreateLocationSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AcceptAndCarryOutActionMessage@38(No@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        FilterRequisitionLine(RequisitionLine,No,LocationCode);
        FINDFIRST;
        VALIDATE("Accept Action Message",TRUE);
        MODIFY(TRUE);
        LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
      END;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      PurchasesPayablesSetup@1003 : Record 312;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@54();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@154();
    BEGIN
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);

      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CalcRegenPlanForSKUWithTransferReplenishmentSystem@18(MultipleSKU@1003 : Boolean);
    VAR
      Item@1001 : Record 27;
      TransferLine@1004 : Record 5741;
      SalesLine@1000 : Record 37;
    BEGIN
      // Setup: Create Lot for Lot item. Create Stockkeeping Unit:
      // "Location Code" = LocationBlue.Code, "Transfer-from Code" = LocationSilver.Code, "Replenishment System" = Transfer
      // If MultipleSKU is TRUE, then create another Stockkeeping Unit with "Location Code" = LocationSilver.Code
      // Create Sales Order for Item at Location Blue, create Transfser Order for Item from Location Blue to Silver
      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateItemSKUSetup(Item."No.",LocationBlue.Code,LocationSilver.Code,MultipleSKU);
      CreateSalesOrder(SalesLine,Item."No.",LocationBlue.Code);
      CreateTransferOrder(TransferLine,Item."No.",LocationBlue.Code,LocationSilver.Code);

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: 3 Requisition Lines for Item are generated.
      // Line 1: "Action Message" = New, Location = Blue, Quantity = SalesLine.Quantity
      // Line 2: "Action Message" = New, Location = Silver, Quantity = SalesLine.Quantity
      // Line 3: "Action Message" = Cancel, Location = Silver, "Orginal Quantity" = TransferLine.Quantity
      VerifyQuantityOnRequisitionLine(Item."No.",LocationBlue.Code,LocationSilver.Code,SalesLine.Quantity,TransferLine.Quantity);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateLocationSetup@65();
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);   // Non - Warehouse Location.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationSilver);   // Non - Warehouse Location.
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
    END;

    LOCAL PROCEDURE CreateItem@27(VAR Item@1000 : Record 27;ReorderingPolicy@1002 : Option;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItem@35(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      // Create Lot-for-Lot Item.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",ReplenishmentSystem);
      Item.VALIDATE("Include Inventory",TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateOrderItemSetup@42(VAR Item@1002 : Record 27;VAR ChildItem@1000 : Record 27);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateItem(Item,Item."Reordering Policy"::Order,Item."Replenishment System"::"Prod. Order");
      CreateItem(ChildItem,ChildItem."Reordering Policy"::Order,ChildItem."Replenishment System"::Purchase);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateMaximumQtyItem@186(VAR Item@1000 : Record 27;MaximumInventory@1001 : Decimal);
    BEGIN
      // Create Maximum Quantity Item.
      CreateItem(Item,Item."Reordering Policy"::"Maximum Qty.",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Reorder Point",LibraryRandom.RandDec(10,2) + 20);  // Large Random Value required for test.
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Minimum Order Quantity",LibraryRandom.RandDec(5,2));  // Random Quantity less than Reorder Point Quantity.
      Item.VALIDATE("Maximum Order Quantity",MaximumInventory + LibraryRandom.RandDec(100,2));  // Random Quantity more than Maximum Inventory.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemSetup@157(VAR Item@1002 : Record 27;VAR ChildItem@1000 : Record 27;ReplenishmentSystem@1003 : Option);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateLotForLotItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateLotForLotItem(ChildItem,ReplenishmentSystem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateFRQItem@76(VAR Item@1001 : Record 27);
    BEGIN
      // Create Fixed Reorder Quantity Item.
      CreateItem(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Safety Stock Quantity",LibraryRandom.RandInt(10));
      Item.VALIDATE("Reorder Point",LibraryRandom.RandInt(10) + 10);  // Reorder Point more than Safety Stock Quantity or Reorder Quantity.
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandInt(5));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@98(VAR ProductionBOMHeader@1002 : Record 99000771;Item@1000 : Record 27);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",LibraryRandom.RandDec(5,2));
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@118(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@8(VAR SalesLine@1007 : Record 37;ItemNo@1003 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@83(VAR PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrder@105(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@63(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectRequisitionLine@64(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshWithMultipleItems@136(ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];StartDate@1004 : Date;EndDate@1003 : Date);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETFILTER("No.",ItemFilter,ItemNo,ItemNo2);  // Filter Required for two Items.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@150(VAR ItemJournalBatch@1001 : Record 233;VAR ItemJournalLine@1005 : Record 83;EntryType@1002 : Option;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE UpdateInventoryWithLocation@146(ItemNo@1002 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(
        ItemJournalBatch,ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,ItemNo,LibraryRandom.RandDec(10,2) + 100);  // Large Quantity required.
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE SelectItemJournalLine@211(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@86(ProductionOrderNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ProductionOrderNo);
      SelectItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithExlpodeRouting@155(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournal(ItemJournalLine,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE FindProdOrderComponent@111(VAR ProdOrderComponent@1000 : Record 5407;Status@1001 : Option;ProdOrderNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@39(VAR RequisitionLine@1000 : Record 246;ActionMessage@1004 : Option;No@1001 : Code[20];LocationCode@1005 : Code[10]) : Boolean;
    BEGIN
      FilterRequisitionLine(RequisitionLine,No,LocationCode);
      RequisitionLine.SETRANGE("Action Message",ActionMessage);
      EXIT(RequisitionLine.FINDFIRST);
    END;

    LOCAL PROCEDURE FilterRequisitionLine@34(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20];LocationCode@1005 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE GetRequiredDate@9(Days@1000 : Integer;IncludeAdditionalPeriod@1003 : Integer;RelativeDate@1001 : Date;SignFactor@1002 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to WorkDate.
      NewDate :=
        CALCDATE('<' + FORMAT(SignFactor * LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'D>',RelativeDate);
    END;

    LOCAL PROCEDURE UpdatePurchaseLinePlanningFlexibilityNone@195(PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Planning Flexibility",PurchaseLine."Planning Flexibility"::None);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AreSameMessages@20(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@67(VAR RequisitionWkshName@1007 : Record 245;VAR Item@1003 : Record 27;StartDate@1000 : Date;EndDate@1004 : Date);
    VAR
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CalculateRegenPlanForPlanningWorksheet@80(VAR Item@1001 : Record 27);
    VAR
      EndDate@1000 : Date;
    BEGIN
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@112(NewCombinedMPSMRPCalculation@1002 : Boolean) OldCombinedMPSMRPCalculation : Boolean;
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      OldCombinedMPSMRPCalculation := ManufacturingSetup."Combined MPS/MRP Calculation";
      ManufacturingSetup.VALIDATE("Combined MPS/MRP Calculation",NewCombinedMPSMRPCalculation);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionForecastSetup@14(VAR ProductionForecastEntry@1005 : Record 99000852;ItemNo@1002 : Code[20];ForecastDate@1001 : Date);
    VAR
      ProductionForecastName@1003 : Record 99000851;
    BEGIN
      // Using Random Value and Dates based on WORKDATE.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      UpdateForecastOnManufacturingSetup(ProductionForecastName.Name);
      CreateAndUpdateProductionForecast(ProductionForecastEntry,ProductionForecastName.Name,ForecastDate,ItemNo);
    END;

    LOCAL PROCEDURE UpdateForecastOnManufacturingSetup@116(CurrentProductionForecast@1001 : Code[10]);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",CurrentProductionForecast);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecast@119(VAR ProductionForecastEntry@1000 : Record 99000852;Name@1003 : Code[10];Date@1001 : Date;ItemNo@1004 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionForecastEntry(ProductionForecastEntry,Name,ItemNo,'',Date,FALSE);  // Component Forecast - FALSE.
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@142(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshPage@99(VAR PlanningWorksheet@1000 : TestPage 99000852;ItemNo@1002 : Code[20];ItemNo2@1004 : Code[20]);
    VAR
      RequisitionWkshName@1003 : Record 245;
      ReqWkshTemplate@1001 : Record 244;
    BEGIN
      // Regenerative Planning using Page required where Forecast is used.
      LibraryVariableStorage.Enqueue(ItemNo);  // Enqueue Item No for filtering - required in CalculatePlanPlanWkshRequestPageHandler.
      LibraryVariableStorage.Enqueue(ItemNo2);  // Enqueue Item No for filtering - required in CalculatePlanPlanWkshRequestPageHandler.
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::Planning);
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      COMMIT;  // Required for Test.
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.CurrentWkshBatchName.SETVALUE(RequisitionWkshName.Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateStockkeepingUnitForMaximumQtyItem@193(VAR Item@1008 : Record 27;VAR ItemVariant@1001 : Record 5401;LocationCode@1006 : Code[10]);
    VAR
      StockkeepingUnit@1003 : Record 5700;
    BEGIN
      CreateMaximumQtyItem(Item,LibraryRandom.RandDec(50,2) + 200);  // Large Quantity required for Maximum Inventory.
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,Item."No.",ItemVariant.Code);
    END;

    LOCAL PROCEDURE CreateItemSKUSetupWithTransfer@23(ItemNo@1000 : Code[20];LocationCode@1006 : Code[10];LocationCode2@1002 : Code[10]);
    VAR
      ItemVariant@1004 : Record 5401;
      StockkeepingUnit@1003 : Record 5700;
      StockkeepingUnit2@1001 : Record 5700;
    BEGIN
      CreateItemVariantAndSKU(ItemVariant,StockkeepingUnit,LocationCode,ItemNo);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit2,LocationCode2,ItemNo,ItemVariant.Code);
      UpdateSKUReplenishmentSystem(StockkeepingUnit,StockkeepingUnit."Replenishment System"::Purchase);
      UpdateSKUReplenishmentSystem(StockkeepingUnit2,StockkeepingUnit2."Replenishment System"::Transfer);
      UpdateSKUTransferFromCode(StockkeepingUnit2,LocationCode,LocationCode2);
    END;

    LOCAL PROCEDURE CreateItemSKUSetup@24(ItemNo@1000 : Code[20];LocationCode@1006 : Code[10];TransferFromLocationCode@1002 : Code[10];MultipleSKU@1005 : Boolean);
    VAR
      StockkeepingUnit@1003 : Record 5700;
      TransferFromStockkeepingUnit@1001 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      UpdateSKUTransferFromCode(StockkeepingUnit,TransferFromLocationCode,LocationCode);
      UpdateSKUReplenishmentSystem(StockkeepingUnit,StockkeepingUnit."Replenishment System"::Transfer);
      IF MultipleSKU THEN
        LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(
          TransferFromStockkeepingUnit,TransferFromLocationCode,ItemNo,'');
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrderWithLocation@134(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1004 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@60(VAR TransferLine@1007 : Record 5741;ItemNo@1001 : Code[20];TransferFrom@1005 : Code[10];TransferTo@1006 : Code[10]);
    VAR
      TransferHeader@1003 : Record 5740;
    BEGIN
      SelectTransferRoute(TransferFrom,TransferTo);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferFrom,TransferTo,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE GetSpecialOrder@74(VAR RequisitionLine@1002 : Record 246;ItemNo@1003 : Code[20]);
    VAR
      ReqWkshTemplate@1001 : Record 244;
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      RequisitionLine."Worksheet Template Name" := ReqWkshTemplate.Name;
      RequisitionLine."Journal Batch Name" := RequisitionWkshName.Name;
      LibraryPlanning.GetSpecialOrder(RequisitionLine,ItemNo);

      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionLine."Journal Batch Name");
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateTransferLinePlanningFlexibilityNone@101(TransferLine@1000 : Record 5741);
    BEGIN
      TransferLine.VALIDATE("Planning Flexibility",TransferLine."Planning Flexibility"::None);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectPlanningComponent@139(VAR PlanningComponent@1003 : Record 99000829;WorksheetTemplateName@1000 : Code[10];WorksheetBatchName@1001 : Code[10]);
    BEGIN
      PlanningComponent.SETRANGE("Worksheet Template Name",WorksheetTemplateName);
      PlanningComponent.SETRANGE("Worksheet Batch Name",WorksheetBatchName);
      PlanningComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE PostPurchaseDocument@15(VAR PurchaseLine@1001 : Record 39);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateOutputJournal@37(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20];ProductionOrderNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(
        ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,ItemNo,ProductionOrderNo);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournalWithAppliesToEntry@30(ProductionOrderNo@1001 : Code[20];ItemNo@1003 : Code[20];OutputQuantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
      CreateOutputJournal(ItemJournalLine,ItemNo,ProductionOrderNo);
      ItemJournalLine.VALIDATE("Output Quantity",OutputQuantity);
      ItemJournalLine.VALIDATE("Applies-to Entry",ItemLedgerEntry."Entry No.");
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateItemVariantAndSKU@1(VAR ItemVariant@1001 : Record 5401;VAR StockkeepingUnit@1002 : Record 5700;LocationCode@1003 : Code[10];ItemNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemVariant(ItemVariant,ItemNo);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,ItemVariant.Code);
    END;

    LOCAL PROCEDURE UpdateSKUReplenishmentSystem@32(StockkeepingUnit@1000 : Record 5700;ReplenishmentSystem@1001 : Option);
    BEGIN
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSKUTransferFromCode@44(VAR StockkeepingUnit@1000 : Record 5700;LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10]);
    BEGIN
      SelectTransferRoute(LocationCode,LocationCode2);
      StockkeepingUnit.VALIDATE("Transfer-from Code",LocationCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectTransferRoute@95(TransferFrom@1001 : Code[10];TransferTo@1000 : Code[10]);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      TransferRoute.SETRANGE("Transfer-from Code",TransferFrom);
      TransferRoute.SETRANGE("Transfer-to Code",TransferTo);

      // If Transfer Not Found then Create it.
      IF NOT TransferRoute.FINDFIRST THEN
        LibraryWarehouse.CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
    END;

    LOCAL PROCEDURE UpdateQuantityToShipOnSalesLine@213(VAR SalesLine@1001 : Record 37;QtytoShip@1000 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtytoShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithPartialQtyToShip@3(VAR SalesLine@1001 : Record 37;ItemNo@1000 : Code[20]);
    BEGIN
      CreateSalesOrder(SalesLine,ItemNo,'');
      UpdateQuantityToShipOnSalesLine(SalesLine,SalesLine.Quantity - LibraryRandom.RandDec(5,2));  // Quantity to Ship less than Sales Line Quantity.
      PostSalesDocumentAsShip(SalesLine);
    END;

    LOCAL PROCEDURE PostSalesDocumentAsShip@7(SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type"::Order,SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE SelectDateWithSafetyLeadTime@176(DateValue@1000 : Date;SignFactor@1001 : Integer) : Date;
    VAR
      ManufacturingSetup@1002 : Record 99000765;
    BEGIN
      // Add Safety lead time to the required date and return the Date value.
      ManufacturingSetup.GET;
      IF SignFactor < 0 THEN
        EXIT(CALCDATE('<-' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',DateValue));
      EXIT(CALCDATE('<' + FORMAT(ManufacturingSetup."Default Safety Lead Time") + '>',DateValue));
    END;

    LOCAL PROCEDURE VerifyOrderTrackingForPlanningComponent@175(ItemNo@1001 : Code[20]);
    VAR
      PlanningComponent@1006 : Record 99000829;
      RequisitionLine@1005 : Record 246;
      OrderTracking@1002 : TestPage 99000822;
      OrderTracking2@1000 : Page 99000822;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      SelectPlanningComponent(PlanningComponent,RequisitionLine."Worksheet Template Name",RequisitionLine."Journal Batch Name");
      OrderTracking.TRAP;
      OrderTracking2.SetPlanningComponent(PlanningComponent);
      OrderTracking2.RUN;
      OrderTracking."Untracked Quantity".ASSERTEQUALS(PlanningComponent."Expected Quantity");
      OrderTracking."Total Quantity".ASSERTEQUALS(PlanningComponent."Expected Quantity");
    END;

    LOCAL PROCEDURE VerifyOrderTrackingOnRequisitionLine@81(ItemNo@1005 : Code[20];UntrackedQuantity@1003 : Decimal;TotalQuantity@1001 : Decimal;LineQuantity@1007 : Decimal;LineQty@1006 : Boolean);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      // Verify required Quantity values - Untracked Qty,Total Qty and Qty.
      SelectRequisitionLine(RequisitionLine,ItemNo);
      VerifyOrderTracking(RequisitionLine,UntrackedQuantity,TotalQuantity,LineQuantity,LineQty);
    END;

    LOCAL PROCEDURE VerifyOrderTrackingOnRequisitionLineWithDueDate@4(ItemNo@1005 : Code[20];DueDate@1008 : Date;UntrackedQuantity@1003 : Decimal;TotalQuantity@1001 : Decimal;LineQuantity@1007 : Decimal;LineQty@1006 : Boolean);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      // Verify required Quantity values - Untracked Qty,Total Qty and Qty.
      RequisitionLine.SETRANGE("Due Date",DueDate);
      SelectRequisitionLine(RequisitionLine,ItemNo);
      VerifyOrderTracking(RequisitionLine,UntrackedQuantity,TotalQuantity,LineQuantity,LineQty);
    END;

    LOCAL PROCEDURE VerifyOrderTracking@40(RequisitionLine@1006 : Record 246;UntrackedQuantity@1005 : Decimal;TotalQuantity@1004 : Decimal;LineQuantity@1003 : Decimal;LineQty@1002 : Boolean);
    VAR
      OrderTracking@1001 : TestPage 99000822;
      OrderTracking2@1000 : Page 99000822;
    BEGIN
      OrderTracking.TRAP;
      OrderTracking2.SetReqLine(RequisitionLine);
      OrderTracking2.RUN;
      OrderTracking."Untracked Quantity".ASSERTEQUALS(UntrackedQuantity);
      OrderTracking."Total Quantity".ASSERTEQUALS(TotalQuantity);
      IF LineQty THEN
        OrderTracking.Quantity.ASSERTEQUALS(-LineQuantity);
    END;

    LOCAL PROCEDURE VerifyQuantityOnRequisitionLine@57(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10];SalesQuantity@1003 : Decimal;TransferQuantity@1004 : Decimal);
    BEGIN
      VerifyReqLineQuantity(ItemNo,LocationCode,SalesQuantity);
      VerifyReqLineQuantity(ItemNo,LocationCode2,SalesQuantity);
      VerifyReqLineOriginalQuantity(ItemNo,LocationCode2,TransferQuantity);
    END;

    LOCAL PROCEDURE VerifyReqLineQuantity@22(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1004 : Decimal);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,RequisitionLine."Action Message"::New,ItemNo,LocationCode);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReqLineOriginalQuantity@26(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];OriginalQuantity@1004 : Decimal);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,RequisitionLine."Action Message"::Cancel,ItemNo,LocationCode);
      RequisitionLine.TESTFIELD("Original Quantity",OriginalQuantity);
    END;

    LOCAL PROCEDURE VerifyReservedQuantityOnProdOrderComponent@33(ProdOrderNo@1004 : Code[20];ItemNo@1005 : Code[20]);
    VAR
      ProductionOrder@1001 : Record 5405;
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProdOrderNo,ItemNo);
      ProdOrderComponent.CALCFIELDS("Reserved Quantity");
      Assert.AreEqual(ProdOrderComponent."Expected Quantity",ProdOrderComponent."Reserved Quantity",ReservedQuantityErr);
    END;

    LOCAL PROCEDURE CreateSpecialOrder@10(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1002 : Record 27;LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];Qty@1005 : Decimal;PostingDate@1006 : Date;UnitPrice@1007 : Decimal);
    VAR
      Purchasing@1008 : Record 5721;
    BEGIN
      LibraryPatterns.MAKESalesOrder(SalesHeader,SalesLine,Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);

      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseOrderForCustomer@19(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Item@1002 : Record 27;LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];Qty@1005 : Decimal;PostingDate@1006 : Date;UnitPrice@1007 : Decimal;CustomerNo@1008 : Code[20]);
    BEGIN
      LibraryPatterns.MAKEPurchaseOrder(PurchaseHeader,PurchaseLine,Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
      PurchaseHeader.VALIDATE("Sell-to Customer No.",CustomerNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanPlanWkshRequestPageHandler@55(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    VAR
      ItemNo@1001 : Variant;
      ItemNo2@1002 : Variant;
    BEGIN
      // Calculate Regenerative Plan using page. Required where Forecast is used.
      LibraryVariableStorage.Dequeue(ItemNo);
      LibraryVariableStorage.Dequeue(ItemNo2);
      CalculatePlanPlanWksh.Item.SETFILTER("No.",STRSUBSTNO(ItemFilter,ItemNo,ItemNo2));
      CalculatePlanPlanWksh.MPS.SETVALUE(TRUE);
      CalculatePlanPlanWksh.StartingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.EndingDate.SETVALUE(GetRequiredDate(10,50,WORKDATE,1));
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReserveFromCurrentLinePageHandler@66(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    VAR
      ExpectedMsg@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMsg);
      Assert.IsTrue(AreSameMessages(Message,ExpectedMsg),Message);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesModalPageHandler@12(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Control@1001 : Variant;
      SerialNo@1003 : Variant;
      OriginalSerialNo@1004 : Variant;
      Option@1005 : 'Purchase,Sale,Verification';
    BEGIN
      LibraryVariableStorage.Dequeue(Control);
      Option := Control;
      CASE Option OF
        ControlOptions::Purchase:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;
            SerialNo := ItemTrackingLines."Serial No.".VALUE;
            LibraryVariableStorage.Enqueue(SerialNo);
            ItemTrackingLines.OK.INVOKE;
          END;
        ControlOptions::Sale:
          BEGIN
            LibraryVariableStorage.Dequeue(SerialNo);
            ItemTrackingLines."Serial No.".SETVALUE(SerialNo);
            ItemTrackingLines."Quantity (Base)".SETVALUE(1);
            ItemTrackingLines.OK.INVOKE;
          END;
        ControlOptions::Verification:
          BEGIN
            LibraryVariableStorage.Dequeue(OriginalSerialNo);
            SerialNo := ItemTrackingLines."Serial No.".VALUE;
            Assert.AreEqual(OriginalSerialNo,SerialNo,'Serial no has been deleted');
          END;
        ELSE
          ERROR(UnexpectedErrorMsg);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQtyToCreatePageHandler@17(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Order Tracking] [SCM]
      Test for Planning using Order Tracking:
       1. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create and Refresh Released Production Order. Calculate Regenerative Change Plan for Planning Worksheet for Parent Item and Child Item.
          Verify Untracked Quantity and Quantity on Requisition Line using Order Tracking.
       2. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create and Refresh Released Production Order. Create and Post Output Journal.
          Calculate Regenerative Plan for Planning Worksheet. Verify Untracked Quantity and Quantity on Requisition Line using Order Tracking.
       3. Create Lot for Lot Item. Create Purchase Order with Planning Flexibility - None. Create Sales Order. Calculate Regenerative Plan for Planning Worksheet. Verify Untracked Quantity and Quantity on Requisition Line using Order Tracking.
       4. Create Maximum Quantity Item. Create Stockkeeping Unit. Update Inventory With Location. Create Sales Order. Post Sales Order With Ship. Calculate Plan for Requisition Worksheet.
          Verify Untracked Quantity and Quantity on Requisition Line using Order Tracking.
       5. Create Lot for Lot Item. Create Production Forecast. Create Sales Order. Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
       6. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Production Forecast. Create Released Production Order. Create and Post Consumption Journal.
          Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.  Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
       7. Create Lot for Lot tem. Create Lot for Lot Item and Stockkeeping Unit setup. Create and Refresh Firm Planned Production Order. Create Transfer Order.Update Planning Flexibility on Transfer Line - None.
          Calculate Plan for Planning Worksheet. Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
       8. Create Lot for Lot Item. Create Production Forecast. Create Sales Order. Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
          Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
       9. Create Lot for Lot Item Setup. Create Lot for Lot Item and Stockkeeping Unit setup. Create Sales Order.
          Calculate regenerative Plan for Planning Worksheet. Verify Untracked Quantity and Total Quantity on Planning Component using Order Tracking.
      10. Create Lot for Lot Item. Create and Post Purchase Order. Create and Reserve Sales Order. Calculate regenerative Plan for Planning Worksheet. Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      11. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create and Refresh Released Production Order. Create and Post Output Journal. Create and Post Output Journal with negative Production Order Quantity.
          Calculate Regenerative Plan for Planning Worksheet. Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      12. Create Order Item. Create Transfer Order. Calculate Plan for Planning Worksheet. Verify Untracked Quantity, Total Quantity and Quantity on Requisition Line using Order Tracking.
      13. Create Maximum Quantity Item. Create and Post Sales Order With Quantity to Ship less than Sales Line Quantity. Calculate Plan for Requisition Worksheet. Verify Untracked Quantity, Total Quantity
          and Quantity on Requisition Line using Order Tracking.
      14. Create Fixed Reorder Quantity Item. Create and Post Sales Order With Quantity to Ship less than Sales Line Quantity. Calculate Plan for Requisition Worksheet. Verify Untracked Quantity, Total Quantity
          and Quantity on Requisition Line using Order Tracking.
      15. Item Tracking on a Special Order (Sales Order) should not disappear if Calculate Plan is executed on the Req. Worksheet.
      16. Create two SKUs for Lot for Lot Item. Calculate Plan for Requisition Worksheet. Verify planning results are correct when transfer order is created with opposite transfer-from and transfer-to locations as SKU defines
      17. Create one SKU for Lot for Lot Item. Calculate Plan for Requisition Worksheet. Verify planning results are correct when transfer order is created with opposite transfer-from and transfer-to locations as SKU defines
      18. Create Lot for Lot Item. Create transfer Order. Calculate regenerative Plan for Planning Worksheet without Location filter, calculate again for Transfer-from Location. Verify no requisition line generated for Transfer-from Location.
      19. Create Lot for Lot Item. Create Transfer Order. Calculate Plan for Requisition Worksheet without Location filter, calculate again with new Req. Worksheet Name for Transfer-from Location.
          Verify no requisition line generated for Transfer-from Location.
      20. Create Order Item. Create Released Prod. Order. Calculate Plan for Requisition Worksheet for Child Item and Carry Out Action Message. Re-Calculate Plan for Requisition Worksheet for Parent Item and Child Item.
          Verify the Reserved Quantity on Prod. Order Component Line was not cleared.

          Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
          OrderTrackingForCalcRegenPlanReleasedProductionLFLItem                                                    127981
          OrderTrackingForCalcRegenPlanReleasedProdOutputJournalLFLItem                                             127981
          OrderTrackingForCalcRegenPlanPurchasePlanningFlexibilityNoneSalesLFLItem                                  127981
          OrderTrackingForCalcPlanReqWkshSKUSalesMaxQtyItem                                                         127981
          OrderTrackingForCalcRegenPlanSalesUsingForecastLFLItem                                                    127981
          OrderTrackingForCalcPlanWithMPSForecastAndProdOrderConsumpLFLItem                                         127981

         Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------------------
          OrderTrackingForCalcRegenPlanFirmPlannedProdTransferPlanningFlexibilityNoneLFLItem                        127981
          OrderTrackingForCalcRegenPlanWithMPSForecastAndSalesLFLItem                                               127981
          OrderTrackingForCalcRegenPlanPlanningComponentWithSKUAndSalesLFLItem                                      127981
          OrderTrackingForCalcRegenPlanPostPurchaseAndSalesReserveLFLItem                                           127981
          OrderTrackingForCalcRegenPlanReleasedProdAndNegativeOutputLFLItem                                         127981
          OrderTrackingForCalcRegenPlanForTransferAndOrderItem                                                      127981

         Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------------------
          OrderTrackingForCalcPlanReqWkshForPostedSalesWithPartialQtyToShipMQItem                                   127527
          OrderTrackingForCalcPlanReqWkshForPostedSalesWithPartialQtyToShipFRQItem                                  127527

         Covers Test cases for Code Defect:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------------------
          CalculatePlanDoesNotRemoveItemTrackingSpecialOrders                                                        6770

         Covers Test cases for SE Merge Bug:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------------------
          CalcRegenPlanForMultipleSKUWithTransferReplenishmentSystem                                                73395
          CalcRegenPlanForSingleSKUWithTransferReplenishmentSystem                                                  73395
          CalcRegenPlanWithCancelRequsitionLineForTransferOrder                                                     73893

         Covers Test cases for SE Merge Bug:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------------------
          CalcPlanReqWkshWithMultipleWkshNameForTransferOrder                                                       88351

         Covers Test cases for Merge Bug:
        --------------------------------------------------------------------------------------------------------------------
          Test Function                                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------------------
          CalcRegenPlanReleasedProductionOrderWithReservedComponent                                                 99818
    }
    END.
  }
}

