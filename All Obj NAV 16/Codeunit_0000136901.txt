OBJECT Codeunit 136901 Marketing Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryService@1006 : Codeunit 131902;
      LibraryReportDataset@1031 : Codeunit 131007;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryMarketing@1015 : Codeunit 131900;
      Assert@1018 : Codeunit 130000;
      isInitialized@1001 : Boolean;
      SalesCycleCode@1000 : Code[10];
      CampaignNo2@1003 : Code[20];
      ContactNo2@1022 : Code[20];
      OpportunityNo@1021 : Code[20];
      InteractionTemplateCode@1002 : Code[10];
      TeamCode@1012 : Code[10];
      CurrentSalesCycleStage@1011 : Integer;
      NoAnswerError@1019 : TextConst 'ENU=No Answer created.';
      UnexpectedNumberOfRecordsError@1032 : TextConst '@@@="%1 = Table Caption %2 = Number of records";ENU=Unexpected number of records in %1. Number of records must be %2';
      FilterNotFoundinXMLErr@1033 : TextConst '@@@=do not translate;ENU=Field: %1 Value:%2 not found in xml';

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      CLEAR(LibraryReportDataset);
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(SegmentContactsReportHandler)]
    PROCEDURE SegmentContactsReport@1();
    VAR
      Contact@1005 : Record 5050;
      SegmentHeader@1000 : Record 5076;
    BEGIN
      // Test Cost (LCY) and Estimated Value (LCY) on Segment Contacts Report.

      // 1. Setup: Find Contact, Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run the Segment Contacts Report.
      RunSegmentContactsReport(SegmentHeader."No.");

      // 3. Verify: Verify Cost (LCY) and Estimated Value (LCY) on Segment Contacts report.
      VerifyCostAndEstimatedValue(Contact);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,OppurtunityDetailsReportHandler)]
    PROCEDURE OpportunityDetailsReport@2();
    VAR
      Activity@1005 : Record 5081;
      ActivityStep@1004 : Record 5082;
      Contact@1007 : Record 5050;
      SalesCycleStage@1000 : Record 5091;
    BEGIN
      // Test Sales Cycle Stage and Activity Step on Opportunity Report.

      // 1. Setup: Create Contact with Salesperson, Activity, Activity Step, Sales Cycle, Sales Cycle Stage and Create Opportunity
      // for the Contact.
      Initialize;
      CreateContactWithSalesperson(Contact);
      LibraryMarketing.CreateActivity(Activity);
      LibraryMarketing.CreateActivityStep(ActivityStep,Activity.Code);
      CreateSalesCycleStage(SalesCycleStage,Activity.Code);
      SalesCycleCode := SalesCycleStage."Sales Cycle Code";  // Assign Global Variable for page handler.
      CreateOpportunity(Contact."No.");

      // 2. Exercise: Run Opportunity Details Report.
      RunOpportunityDetails(Contact."No.");

      // 3. Verify: Verify Description and Priority on Opportunity Report is Description of Sales Cycle Stage and Priority of Activity
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Stage_SalesCycleStage',FORMAT(SalesCycleStage.Stage));

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Desc_SalescCycleStage',SalesCycleStage.Description);
      VerifyActivityStepOnReport(Activity.Code);
    END;

    [Test]
    [HandlerFunctions(ContactCompanySummaryReportHandler)]
    PROCEDURE ContactCompanySummary@10();
    VAR
      Contact@1004 : Record 5050;
      Contact2@1005 : Record 5050;
      ContactCompanySummary@1003 : Report 5051;
    BEGIN
      // Test that Contact of Type Peson related to another contact, seen properly in Contact Company Summary.

      // 1. Setup: Create two Contacts, one as Company and another as Person.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      CreateContactAsPerson(Contact2);
      UpdateCompanyNo(Contact2,Contact."No.");

      // 2. Exercise: Generate the Contact Company Summary Report.
      CLEAR(ContactCompanySummary);
      Contact.SETRANGE("No.",Contact."No.");
      ContactCompanySummary.SETTABLEVIEW(Contact);
      COMMIT;
      ContactCompanySummary.RUN;

      // 3. Verify: Check that Contact of Type Peson related to another contact, seen properly in Contact Company Summary.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ContactPerson___No__',Contact2."No.");

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ContactPerson__Name',Contact2.Name);
      LibraryReportDataset.AssertCurrentRowValue('Contact__Company_No__',Contact.Name);
    END;

    [Test]
    [HandlerFunctions(CreateInteractModalPageHandler,CampaignDetailsReportHandler)]
    PROCEDURE CampaignDetailsReport@108();
    VAR
      Campaign@1001 : Record 5071;
      SegmentHeader@1000 : Record 5076;
      Contact@1004 : Record 5050;
      InteractionTemplate@1003 : Record 5064;
      CampaignEntry@1002 : Record 5072;
      CampaignDetails@1005 : Report 5060;
    BEGIN
      // Test that values of Description, No. in Campaign - Details matches the value of Description,No. in corresponding Campaign.

      // 1. Setup: Create new Campaign Status and Campaign. Link the Campaign Status to the Campaign.Create Segment Header and also
      // Create new Interaction Template with Unit Cost (LCY) and Unit Duration (Min.).Create Interaction for a Contact.
      Initialize;
      CreateCampaignWithStatus(Campaign);
      CreateSegmentHeader(SegmentHeader,Campaign."No.");
      CreateInteractionTemplate(InteractionTemplate);
      Contact.FINDFIRST;
      ContactNo2 := Contact."No.";  // Assign Global variable for page handler.
      Contact.CreateInteraction;
      CampaignEntry.SETRANGE("Campaign No.",Campaign."No.");
      CampaignEntry.FINDFIRST;

      // 2. Exercise: Generate Campaign - Details Report.
      CLEAR(CampaignDetails);
      Campaign.SETRANGE("No.",Campaign."No.");
      CampaignDetails.SETTABLEVIEW(Campaign);
      COMMIT;
      CampaignDetails.RUN;

      // 3. Verify: Verify that the Campaign - Details Report print the correct Campaign and Segment Header Values.
      VerifyCampaign(Campaign,SegmentHeader,CampaignEntry);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerToDo,ModalPageHandlerOpportunity,SalespersonTodosReportHandler)]
    PROCEDURE SalespersonToDosReport@173();
    VAR
      Activity@1003 : Record 5081;
      ActivityStep@1002 : Record 5082;
      SalesCycleStage@1000 : Record 5091;
      Contact@1001 : Record 5050;
      ToDo@1004 : Record 5080;
      TempToDo@1005 : TEMPORARY Record 5080;
      Opportunity@1006 : Record 5092;
      SalespersonToDos@1010 : Report 5057;
    BEGIN
      // Test To-Do details for Salesperson on Salesperson To Dos Report.

      // 1. Setup: Create Contact with Salesperson, Activity, Activity Step, Sales Cycle, Opportunity and Create To-Do.
      Initialize;
      CreateContactWithSalesperson(Contact);
      LibraryMarketing.CreateActivity(Activity);
      LibraryMarketing.CreateActivityStep(ActivityStep,Activity.Code);
      CreateSalesCycleStage(SalesCycleStage,Activity.Code);
      SalesCycleCode := SalesCycleStage."Sales Cycle Code";  // Assign Global Variable for page handler.
      CreateOpportunity(Contact."No.");
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      OpportunityNo := Opportunity."No.";  // Assign Global Variable for page handler.
      ToDo.SETRANGE("Contact No.",Contact."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run the Salesperson To Dos Report.
      CLEAR(SalespersonToDos);
      ToDo.SETRANGE("Salesperson Code",Contact."Salesperson Code");
      SalespersonToDos.SETTABLEVIEW(ToDo);
      COMMIT;
      SalespersonToDos.RUN;

      // 3. Verify: Verify To-Do details on Salesperson To Dos Report.
      ToDo.FINDFIRST;
      VerifyToDoDetails(ToDo);
      LibraryReportDataset.AssertCurrentRowValue('To_do__Opportunity_No__',ToDo."Opportunity No.");
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,SalesOpportunitiesReportHandler)]
    PROCEDURE SalespersonOpportunitiesReport@58();
    VAR
      Activity@1017 : Record 5081;
      ActivityStep@1016 : Record 5082;
      SalesCycleStage@1001 : Record 5091;
      Contact@1000 : Record 5050;
      Opportunity@1015 : Record 5092;
      SalespersonOpportunities@1010 : Report 5058;
    BEGIN
      // Test Opportunity details on Salesperson Opportunities Report.

      // 1. Setup: Create Contact with Salesperson, Activity, Activity Step, Sales Cycle, Sales Cycle Stage, Create and Update
      // Opportunity.
      Initialize;
      CreateContactWithSalesperson(Contact);
      LibraryMarketing.CreateActivity(Activity);
      LibraryMarketing.CreateActivityStep(ActivityStep,Activity.Code);
      CreateSalesCycleStage(SalesCycleStage,Activity.Code);
      SalesCycleCode := SalesCycleStage."Sales Cycle Code";  // Assign Global Variable for page handler.
      CurrentSalesCycleStage := SalesCycleStage.Stage;  // Assign Global Variable for page handler.
      CreateOpportunity(Contact."No.");
      UpdateOpportunity(Contact."No.");

      // 2. Exercise: Run the Salesperson Opportunities Report.
      COMMIT;
      CLEAR(SalespersonOpportunities);
      Opportunity.SETRANGE("Salesperson Code",Contact."Salesperson Code");
      SalespersonOpportunities.SETTABLEVIEW(Opportunity);
      SalespersonOpportunities.RUN;

      // 3. Verify: Verify Opportunity details on Salesperson Opportunities Report.
      VerifyOpportunityDetails(Contact."Salesperson Code");
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForTeamToDo,TeamToDosReportHandler)]
    PROCEDURE TeamToDosReport@5();
    VAR
      Contact@1001 : Record 5050;
      Team@1000 : Record 5083;
      ToDo@1004 : Record 5080;
      TempToDo@1005 : TEMPORARY Record 5080;
      TeamToDos@1010 : Report 5059;
    BEGIN
      // Test To-Do details for Team on Team To Dos Report.

      // 1. Setup: Create Team, Contact with Salesperson and Create To-Do.
      Initialize;
      LibraryMarketing.CreateTeam(Team);
      CreateContactWithSalesperson(Contact);
      TeamCode := Team.Code;  // Set global variable for Page Handler.
      ToDo.SETRANGE("Contact No.",Contact."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      // 2. Exercise: Run the Team To Dos Report.
      CLEAR(TeamToDos);
      COMMIT;
      ToDo.SETRANGE("Team Code",Team.Code);
      TeamToDos.SETTABLEVIEW(ToDo);
      TeamToDos.RUN;

      // 3. Verify: Verify To-Do details on Team To Dos Report.
      ToDo.FINDFIRST;
      VerifyToDoDetails(ToDo);
      LibraryReportDataset.AssertCurrentRowValue('To_do__Salesperson_Code_',ToDo."Salesperson Code");
    END;

    [Test]
    [HandlerFunctions(QuestionnaireHandoutsReportHandler)]
    PROCEDURE QuestionnaireSingleAnswer@92();
    BEGIN
      // Test Questionnaire details on Questionnaire Handouts Report with Multiple Answers False on Questionnaire Line.

      Questionnaire(FALSE);
    END;

    [Test]
    [HandlerFunctions(QuestionnaireHandoutsReportHandler)]
    PROCEDURE QuestionnaireMultipleAnswer@93();
    BEGIN
      // Test Questionnaire details on Questionnaire Handouts Report with Multiple Answers True on Questionnaire Line.

      Questionnaire(TRUE);
    END;

    LOCAL PROCEDURE Questionnaire@14(MultipleAnswers@1004 : Boolean);
    VAR
      ProfileQuestionnaireHeader@1000 : Record 5087;
      ProfileQuestionnaireLine@1001 : Record 5088;
      QuestionnaireHandouts@1003 : Report 5066;
    BEGIN
      // 1. Setup: Create Questionnaire Header and Questionnaire Line with Multiple Answers as per parameter.
      Initialize;
      CreateQuestionnaire(ProfileQuestionnaireLine);
      ModifyQuestionnaireLine(ProfileQuestionnaireLine,MultipleAnswers);

      // 2. Exercise: Run the Questionnaire Handouts Report.
      CLEAR(QuestionnaireHandouts);
      COMMIT;
      ProfileQuestionnaireHeader.SETRANGE(Code,ProfileQuestionnaireLine."Profile Questionnaire Code");
      QuestionnaireHandouts.SETTABLEVIEW(ProfileQuestionnaireHeader);
      QuestionnaireHandouts.RUN;

      // 3. Verify: Verify Questionnaire details on Questionnaire Handouts Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(
        'Profile_Questionnaire_Header_Code',
        ProfileQuestionnaireLine."Profile Questionnaire Code");
      LibraryReportDataset.GetNextRow;
      VerifyQuestionnaireDescription(ProfileQuestionnaireLine);
    END;

    [Test]
    [HandlerFunctions(QuestionnaireTestReportHandler)]
    PROCEDURE QuestionnaireTestReport@15();
    VAR
      ProfileQuestionnaireHeader@1000 : Record 5087;
      ProfileQuestionnaireLine@1001 : Record 5088;
      QuestionnaireTest@1003 : Report 5067;
    BEGIN
      // Test Questionnaire details on Questionnaire Test Report.

      // 1. Setup: Create Questionnaire Header and Questionnaire Line.
      Initialize;
      CreateQuestionnaire(ProfileQuestionnaireLine);
      ModifyQuestionnaireLine(ProfileQuestionnaireLine,FALSE);

      // 2. Exercise: Run the Questionnaire Test Report.
      COMMIT;
      CLEAR(QuestionnaireTest);
      ProfileQuestionnaireHeader.SETRANGE(Code,ProfileQuestionnaireLine."Profile Questionnaire Code");
      QuestionnaireTest.SETTABLEVIEW(ProfileQuestionnaireHeader);
      QuestionnaireTest.RUN;

      // 3. Verify: Verify Questionnaire details on Questionnaire Test Report.
      VerifyQuestionnaireDetails(ProfileQuestionnaireLine);
      LibraryReportDataset.AssertCurrentRowValue('ErrorText_Number_',FORMAT(NoAnswerError));
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerToDo,CreateInteractModalPageHandler,ContactPersonSummaryReportHandler)]
    PROCEDURE ContactPersonSummary@19();
    VAR
      Contact@1004 : Record 5050;
      ToDo@1006 : Record 5080;
      TempToDo@1007 : TEMPORARY Record 5080;
      InteractionTemplate@1003 : Record 5064;
      ContactPersonSummary@1005 : Report 5053;
    BEGIN
      // Test To Do and Interaction details on Contact Person Summary Report.

      // 1. Setup: Create Contact with Type Person, To Do and Interaction for Contact.
      Initialize;
      CreateContactAsPerson(Contact);
      ToDo.SETRANGE("Contact No.",Contact."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      ContactNo2 := Contact."No.";  // Assign Global variable for page handler.
      CreateInteractionTemplate(InteractionTemplate);
      Contact.CreateInteraction;

      // 2. Exercise: Run Contact Person Summary Report.
      COMMIT;
      CLEAR(ContactPersonSummary);
      Contact.SETRANGE("No.",Contact."No.");
      ContactPersonSummary.SETTABLEVIEW(Contact);
      ContactPersonSummary.RUN;

      // 3. Verify: Verify To Do and Interaction details on Contact Person Summary Report.
      ToDo.FINDFIRST;
      VerifyToDoOnPersonSummary(ToDo);
      VerifyInteractionLogEntry(Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactCoverSheetWithText@23();
    VAR
      Contact@1000 : Record 5050;
      ContactCoverSheet@1001 : Report 5055;
      Text@1002 : ARRAY [5] OF Text[100];
    BEGIN
      // Test Contact Cover Sheet Report with Texts.

      // 1. Setup: Find Contact and Create Texts.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateTexts(Text);

      // 2. Exercise: Run Contact Cover Sheet Report.
      COMMIT;
      Contact.SETRANGE("No.",Contact."No.");
      CLEAR(ContactCoverSheet);
      ContactCoverSheet.SETTABLEVIEW(Contact);
      ContactCoverSheet.InitializeText(Text[1],Text[2],Text[3],Text[4],Text[5]);
      ContactCoverSheet.RUN;

      // 3. Verify: Verify Texts on Contact Cover Sheet Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ContactNo',Contact."No.");
      LibraryReportDataset.GetNextRow;
      VerifyTextsOnReport(Text);
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetAsAgreedUpon@34();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Test Contact Cover Sheet Report with As Agreed upon True.

      // 1. Setup: Find Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);

      // 2. Exercise: Run Contact Cover Sheet Report with As Agreed upon True.
      RunContactCoverSheetReport(Contact."No.",
        TRUE,FALSE,FALSE,
        FALSE,FALSE,FALSE);

      // 3. Verify: Verify Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(1,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetForYourInformation@40();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Test Contact Cover Sheet Report with For Your Information True.

      // 1. Setup: Find Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);

      // 2. Exercise: Run Contact Cover Sheet Report with For Your Information True.
      RunContactCoverSheetReport(Contact."No.",
        FALSE,TRUE,FALSE,
        FALSE,FALSE,FALSE);

      // 3. Verify: Verify Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(2,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetYourCommentsPlease@39();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Test Contact Cover Sheet Report with Your Comments Please True.

      // 1. Setup: Find Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);

      // 2. Exercise: Run Contact Cover Sheet Report with Your Comments Please True.
      RunContactCoverSheetReport(Contact."No.",
        FALSE,FALSE,TRUE,
        FALSE,FALSE,FALSE);

      // 3. Verify: Verify Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(3,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetForYourApproval@7();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Test Contact Cover Sheet Report with For Your Approval True.

      // 1. Setup: Find Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);

      // 2. Exercise: Run Contact Cover Sheet Report with For Your Approval True.
      RunContactCoverSheetReport(Contact."No.",
        FALSE,FALSE,FALSE,
        TRUE,FALSE,FALSE);

      // 3. Verify: Verify Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(4,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetPleaseCall@9();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Test Contact Cover Sheet Report with Please Call True.

      // 1. Setup: Find Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);

      // 2. Exercise: Run Contact Cover Sheet Report with Please Call True.
      RunContactCoverSheetReport(Contact."No.",
        FALSE,FALSE,FALSE,
        FALSE,TRUE,FALSE);

      // 3. Verify: Verify Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(5,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetReturnedAfterUse@37();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Test Contact Cover Sheet Report with Returned After Use True.

      // 1. Setup: Find Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);

      // 2. Exercise: Run Contact Cover Sheet Report with Returned After Use True.
      RunContactCoverSheetReport(Contact."No.",
        FALSE,FALSE,FALSE,
        FALSE,FALSE,TRUE);

      // 3. Verify: Verify Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(6,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactSheetCustomRemarks@38();
    VAR
      Contact@1000 : Record 5050;
      ContactCoverSheet@1001 : Report 5055;
      Text@1002 : Text[100];
    BEGIN
      // Test Contact Cover Sheet Report with Custom Remarks.

      // 1. Setup: Find Contact and Create Text.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      Text := LibraryUtility.GenerateGUID;

      // 2. Exercise: Run Contact Cover Sheet Report with Custom Remarks.
      COMMIT;
      Contact.SETRANGE("No.",Contact."No.");
      CLEAR(ContactCoverSheet);
      ContactCoverSheet.SETTABLEVIEW(Contact);
      ContactCoverSheet.InitializeCustomRemarks(TRUE,Text);
      ContactCoverSheet.RUN;

      // 3. Verify: Verify Custom Remarks on Contact Cover Sheet Report.
      VerifyRemarkOnContactReport(7,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentCoverSheetWithText@60();
    VAR
      Contact@1002 : Record 5050;
      SegmentHeader@1004 : Record 5076;
      SegmentCoverSheet@1001 : Report 5064;
      Text@1000 : ARRAY [5] OF Text[100];
    BEGIN
      // Test Segment Cover Sheet Report with Texts.

      // 1. Setup: Create Segment Header, Segment Line with Contact and Create Texts.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");
      CreateTexts(Text);

      // 2. Exercise: Run Segment Cover Sheet Report.
      COMMIT;
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");
      CLEAR(SegmentCoverSheet);
      SegmentCoverSheet.SETTABLEVIEW(SegmentHeader);
      SegmentCoverSheet.InitializeText(Text[1],Text[2],Text[3],Text[4],Text[5]);
      SegmentCoverSheet.RUN;

      // 3. Verify: Verify Texts on Segment Cover Sheet Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Contact_No_',Contact."No.");
      LibraryReportDataset.GetNextRow;
      VerifyTextsOnReport(Text);
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetAsAgreedUpon@59();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
    BEGIN
      // Test Segment Cover Sheet Report with As Agreed Upon True.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run Segment Cover Sheet Report with As Agreed Upon True.
      RunSegmentCoverSheetReport(SegmentHeader."No.",
        TRUE,FALSE,FALSE,
        FALSE,FALSE,FALSE);

      // 3. Verify: Verify Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(1,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetForYourInformation@115();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
    BEGIN
      // Test Segment Cover Sheet Report with For Your Information True.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run Segment Cover Sheet Report with For Your Information True.
      RunSegmentCoverSheetReport(SegmentHeader."No.",
        FALSE,TRUE,FALSE,
        FALSE,FALSE,FALSE);

      // 3. Verify: Verify Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(2,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetYourCommentsPlease@116();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
    BEGIN
      // Test Segment Cover Sheet Report with Your Comments Please True.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run Segment Cover Sheet Report with Your Comments Please True.
      RunSegmentCoverSheetReport(SegmentHeader."No.",
        FALSE,FALSE,TRUE,
        FALSE,FALSE,FALSE);

      // 3. Verify: Verify Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(3,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetForYourApproval@117();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
    BEGIN
      // Test Segment Cover Sheet Report with For Your Approval True.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run Segment Cover Sheet Report with For Your Approval True.
      RunSegmentCoverSheetReport(SegmentHeader."No.",
        FALSE,FALSE,FALSE,
        TRUE,FALSE,FALSE);

      // 3. Verify: Verify Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(4,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetPleaseCall@118();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
    BEGIN
      // Test Segment Cover Sheet Report with Please Call True.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run Segment Cover Sheet Report with Please Call True.
      RunSegmentCoverSheetReport(SegmentHeader."No.",
        FALSE,FALSE,FALSE,
        FALSE,TRUE,FALSE);

      // 3. Verify: Verify Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(5,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetReturnedAfterUse@119();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
    BEGIN
      // Test Segment Cover Sheet Report with Returned After Use True.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");

      // 2. Exercise: Run Segment Cover Sheet Report with Returned After Use True.
      RunSegmentCoverSheetReport(SegmentHeader."No.",
        FALSE,FALSE,FALSE,
        FALSE,FALSE,TRUE);

      // 3. Verify: Verify Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(6,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(SegmentCoverSheetRequestPageHandler)]
    PROCEDURE SegmentSheetCustomRemarks@53();
    VAR
      Contact@1001 : Record 5050;
      SegmentHeader@1006 : Record 5076;
      SegmentCoverSheet@1000 : Report 5064;
      Text@1002 : Text[100];
    BEGIN
      // Test Segment Cover Sheet Report with Custom Remarks.

      // 1. Setup: Create Segment Header and Segment Line with Contact.
      Initialize;
      LibraryMarketing.FindContact(Contact);
      CreateSegmentWithContact(SegmentHeader,Contact."No.");
      Text := LibraryUtility.GenerateGUID;

      // 2. Exercise: Run Segment Cover Sheet Report with Custom Remarks.
      COMMIT;
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");
      CLEAR(SegmentCoverSheet);
      SegmentCoverSheet.SETTABLEVIEW(SegmentHeader);
      SegmentCoverSheet.InitializeCustomRemarks(TRUE,Text);
      SegmentCoverSheet.RUN;

      // 3. Verify: Verify Custom Remarks on Segment Cover Sheet Report.
      VerifyRemarkOnSegmentCoverSheetReport(7,Contact."No.");
    END;

    [Test]
    [HandlerFunctions(CreateInteractModalPageHandler,ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,ContactListReportHandler)]
    PROCEDURE ContactListReport@12();
    VAR
      Activity@1003 : Record 5081;
      ActivityStep@1004 : Record 5082;
      Contact@1000 : Record 5050;
      InteractionTemplate@1002 : Record 5064;
      SalesCycleStage@1005 : Record 5091;
      ContactList@1001 : Report 5050;
    BEGIN
      // Test and verify Contact List Report.

      // 1. Setup: Create Contact with Salesperson, Interaction Template, Interaction from Contact, Activity, Activity Step,
      // Sales Cycle Stage, Opportunity from Contact, Update Opportunity.
      Initialize;
      InitGlobalVariables;
      CreateContactWithSalesperson(Contact);
      CreateInteractionTemplate(InteractionTemplate);

      ContactNo2 := Contact."No."; // Assign Global Variable for page handler.
      Contact.CreateInteraction;
      LibraryMarketing.CreateActivity(Activity);
      LibraryMarketing.CreateActivityStep(ActivityStep,Activity.Code);
      CreateSalesCycleStage(SalesCycleStage,Activity.Code);

      SalesCycleCode := SalesCycleStage."Sales Cycle Code"; // Assign Global Variable for page handler.
      CurrentSalesCycleStage := SalesCycleStage.Stage; // Assign Global Variable for page handler.

      CreateOpportunity(Contact."No.");
      UpdateOpportunity(Contact."No.");

      // 2. Exercise: Run Contact List Report.
      COMMIT;
      Contact.SETRANGE("No.",Contact."No.");
      CLEAR(ContactList);
      ContactList.SETTABLEVIEW(Contact);
      ContactList.RUN;

      // 3. Verify: Verify Values on Contact List Report.
      VerifyValuesonContactList(Contact);
    END;

    [Test]
    [HandlerFunctions(CreateInteractModalPageHandler,ModalPageHandlerOpportunity,PageHandlerUpdateOpportunity,OpportunityListReportHandler)]
    PROCEDURE OpportunityListReport@20();
    VAR
      Activity@1005 : Record 5081;
      ActivityStep@1004 : Record 5082;
      Contact@1000 : Record 5050;
      InteractionTemplate@1002 : Record 5064;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      OpportunityList@1003 : Report 5061;
    BEGIN
      // Test and verify Opportunity List Report.

      // 1. Setup: Create Contact with Salesperson, Interaction Template, Interaction from Contact, Activity, Activity Step,
      // Sales Cycle Stage, Opportunity from Contact, Update Opportunity.
      Initialize;
      InitGlobalVariables;
      CreateContactWithSalesperson(Contact);
      CreateInteractionTemplate(InteractionTemplate);

      ContactNo2 := Contact."No."; // Assign Global Variable for page handler.
      Contact.CreateInteraction;
      LibraryMarketing.CreateActivity(Activity);
      LibraryMarketing.CreateActivityStep(ActivityStep,Activity.Code);
      CreateSalesCycleStage(SalesCycleStage,Activity.Code);

      SalesCycleCode := SalesCycleStage."Sales Cycle Code"; // Assign Global Variable for page handler.
      CurrentSalesCycleStage := SalesCycleStage.Stage; // Assign Global Variable for page handler.

      CreateOpportunity(Contact."No.");
      UpdateOpportunity(Contact."No.");

      // 2. Exercise: Run Opportunity List Report.
      COMMIT;
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      CLEAR(OpportunityList);
      OpportunityList.SETTABLEVIEW(Opportunity);
      OpportunityList.RUN;

      // 3. Verify: Verify Values on Opportunity List Report.
      Opportunity.FINDFIRST;
      VerifyValuesonOpportunityList(Opportunity);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerOpportunity,PageHandlerOpportunityAction,SalesCycleAnalysisReportHandler)]
    PROCEDURE SalesCycleAnalysisReport@24();
    VAR
      Activity@1005 : Record 5081;
      ActivityStep@1004 : Record 5082;
      Contact@1000 : Record 5050;
      Contact2@1008 : Record 5050;
      SalesCycle@1001 : Record 5090;
      SalesCycleStage@1006 : Record 5091;
      SalesCycleAnalysis@1003 : Report 5062;
      CurrentWorkDate@1002 : Date;
      FirstSalesCycleStage@1009 : Integer;
      SecondSalesCycleStage@1010 : Integer;
    BEGIN
      // Test and verify Sales Cycle Analysis Report.

      // 1. Setup: Create Activity, Activity Step, Sales Cycle, First Sales Cycle Stage, First Contact with Salesperson,
      // Opportunity from first Contact, Update Opportunity, Second Contact with Salesperson, Opportunity from Second Contact,
      // Update Opportunity, Second Sales Cycle Stage, Update Opportunity.
      Initialize;
      InitGlobalVariables;
      LibraryMarketing.CreateActivity(Activity);
      LibraryMarketing.CreateActivityStep(ActivityStep,Activity.Code);
      LibraryMarketing.CreateSalesCycle(SalesCycle);
      CreateSalesCycleSingleStage(SalesCycleStage,SalesCycle.Code,Activity.Code);

      SalesCycleCode := SalesCycle.Code; // Assign Global Variable for page handler.
      CurrentSalesCycleStage := SalesCycleStage.Stage; // Assign Global Variable for page handler.
      FirstSalesCycleStage := SalesCycleStage.Stage;

      CreateContactWithSalesperson(Contact);
      CreateOpportunity(Contact."No.");
      UpdateOpportunity(Contact."No.");

      CreateContactWithSalesperson(Contact2);
      CreateOpportunity(Contact2."No.");
      UpdateOpportunity(Contact2."No.");

      CreateSalesCycleSingleStage(SalesCycleStage,SalesCycle.Code,Activity.Code);
      CurrentSalesCycleStage := SalesCycleStage.Stage; // Assign Global Variable for page handler.
      SecondSalesCycleStage := SalesCycleStage.Stage;
      CurrentWorkDate := WORKDATE;

      // Use Random values for the days.
      WORKDATE := CALCDATE('<' + FORMAT(RANDOM(5)) + 'D>',WORKDATE);
      UpdateOpportunity(Contact2."No.");

      // 2. Exercise: Run Sales Cycle Analysis Report.
      COMMIT;
      SalesCycle.SETRANGE(Code,SalesCycle.Code);
      CLEAR(SalesCycleAnalysis);
      SalesCycleAnalysis.SETTABLEVIEW(SalesCycle);
      SalesCycleAnalysis.RUN;

      // 3. Verify: Verify Values on Sales Cycle Analysis Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyValuesSalesCycleAnalysis(SalesCycle.Code,FirstSalesCycleStage);
      VerifyValuesSalesCycleAnalysis(SalesCycle.Code,SecondSalesCycleStage);

      // 4. Tear Down: Cleanup the WorkDate.
      WORKDATE := CurrentWorkDate;
    END;

    [Test]
    [HandlerFunctions(ContactCoverSheetRequestPageHandler)]
    PROCEDURE ContactCountOnContactCoverSheetReport@31();
    VAR
      Contact@1000 : Record 5050;
    BEGIN
      // Setup.
      Initialize;

      // Exercise.
      COMMIT;  // Commit required for Request Page Handler.
      REPORT.RUN(REPORT::"Contact - Cover Sheet");

      // Verify.
      Assert.AreEqual(Contact.COUNT,GetRowCount,STRSUBSTNO(UnexpectedNumberOfRecordsError,Contact.TABLECAPTION,Contact.COUNT));
    END;

    LOCAL PROCEDURE CreateCampaignWithStatus@134(VAR Campaign@1001 : Record 5071);
    VAR
      CampaignStatus@1000 : Record 5073;
    BEGIN
      LibraryMarketing.CreateCampaignStatus(CampaignStatus);
      LibraryMarketing.CreateCampaign(Campaign);
      Campaign.VALIDATE("Status Code",CampaignStatus.Code);
      Campaign.MODIFY(TRUE);
      CampaignNo2 := Campaign."No.";  // Set global variable for form handler.
    END;

    LOCAL PROCEDURE CreateContactAsPerson@11(VAR Contact@1000 : Record 5050);
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE(Type,Contact.Type::Person);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactWithSalesperson@113(VAR Contact@1000 : Record 5050);
    VAR
      SalespersonPurchaser@1001 : Record 13;
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      CreateSalespersonWithEmail(SalespersonPurchaser);
      Contact.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInteractionTemplate@111(VAR InteractionTemplate@1000 : Record 5064);
    BEGIN
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      InteractionTemplate.VALIDATE("Unit Cost (LCY)",LibraryUtility.GenerateRandomFraction);
      InteractionTemplate.VALIDATE("Unit Duration (Min.)",LibraryUtility.GenerateRandomFraction);
      InteractionTemplate.MODIFY(TRUE);
      InteractionTemplateCode := InteractionTemplate.Code;  // Set global variable for form handler.
    END;

    LOCAL PROCEDURE CreateOpportunity@6(ContactNo@1000 : Code[20]);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      TempOpportunity.CreateOppFromOpp(Opportunity);
    END;

    LOCAL PROCEDURE CreateSegmentHeader@140(VAR SegmentHeader@1000 : Record 5076;CampaignNo@1001 : Code[20]);
    BEGIN
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      SegmentHeader.VALIDATE("Campaign No.",CampaignNo);
      SegmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesCycleStage@156(VAR SalesCycleStage@1004 : Record 5091;ActivityCode@1005 : Code[10]);
    VAR
      SalesCycle@1001 : Record 5090;
    BEGIN
      LibraryMarketing.CreateSalesCycle(SalesCycle);
      LibraryMarketing.CreateSalesCycleStage(SalesCycleStage,SalesCycle.Code);
      SalesCycleStage.VALIDATE(Description,SalesCycle.Code);
      SalesCycleStage.VALIDATE("Activity Code",ActivityCode);
      SalesCycleStage.VALIDATE("Completed %",RANDOM(100));  // Use Random because value is not important.
      SalesCycleStage.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesCycleSingleStage@28(VAR SalesCycleStage@1000 : Record 5091;SalesCycleCode@1001 : Code[10];ActivityCode@1002 : Code[10]);
    BEGIN
      LibraryMarketing.CreateSalesCycleStage(SalesCycleStage,SalesCycleCode);
      SalesCycleStage.VALIDATE(Description,SalesCycleCode);
      SalesCycleStage.VALIDATE("Activity Code",ActivityCode);

      // Use Random because value is not important.
      SalesCycleStage.VALIDATE("Completed %",RANDOM(99) + LibraryUtility.GenerateRandomFraction);
      SalesCycleStage.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSegmentWithContact@3(VAR SegmentHeader@1001 : Record 5076;ContactNo@1002 : Code[20]);
    VAR
      SegmentLine@1000 : Record 5077;
    BEGIN
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      LibraryMarketing.CreateSegmentLine(SegmentLine,SegmentHeader."No.");
      SegmentLine.VALIDATE("Contact No.",ContactNo);
      SegmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalespersonWithEmail@47(VAR SalespersonPurchaser@1000 : Record 13);
    VAR
      LibrarySales@1001 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      SalespersonPurchaser.VALIDATE(
        "E-Mail",LibraryUtility.GenerateRandomCode(SalespersonPurchaser.FIELDNO("E-Mail"),DATABASE::"Salesperson/Purchaser"));
      SalespersonPurchaser.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTexts@49(VAR Text@1001 : ARRAY [5] OF Text[100]);
    VAR
      Counter@1000 : Integer;
    BEGIN
      FOR Counter := 1 TO ARRAYLEN(Text) DO
        Text[Counter] := LibraryUtility.GenerateGUID;
    END;

    LOCAL PROCEDURE CreateQuestionnaire@26(VAR ProfileQuestionnaireLine@1002 : Record 5088);
    VAR
      ProfileQuestionnaireHeader@1001 : Record 5087;
    BEGIN
      LibraryMarketing.CreateQuestionnaireHeader(ProfileQuestionnaireHeader);
      LibraryMarketing.CreateProfileQuestionnaireLine(ProfileQuestionnaireLine,ProfileQuestionnaireHeader.Code);
    END;

    LOCAL PROCEDURE GetRowCount@55() RowCount : Integer;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      RowCount := LibraryReportDataset.RowCount;
    END;

    LOCAL PROCEDURE InitGlobalVariables@21();
    BEGIN
      SalesCycleCode := '';
      CampaignNo2 := '';
      ContactNo2 := '';
      OpportunityNo := '';
      InteractionTemplateCode := '';
      TeamCode := '';
      CurrentSalesCycleStage := 0;
    END;

    LOCAL PROCEDURE ModifyQuestionnaireLine@18(VAR ProfileQuestionnaireLine@1001 : Record 5088;MultipleAnswers@1000 : Boolean);
    BEGIN
      ProfileQuestionnaireLine.VALIDATE(
        Description,
        LibraryUtility.GenerateRandomCode(ProfileQuestionnaireLine.FIELDNO(Description),DATABASE::"Profile Questionnaire Line"));
      ProfileQuestionnaireLine.VALIDATE("Multiple Answers",MultipleAnswers);
      ProfileQuestionnaireLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunOpportunityDetails@79(ContactNo@1002 : Code[20]);
    VAR
      Opportunity@1001 : Record 5092;
      OpportunityDetails@1000 : Report 5068;
    BEGIN
      CLEAR(OpportunityDetails);
      COMMIT;
      Opportunity.SETRANGE("Contact No.",ContactNo);
      OpportunityDetails.SETTABLEVIEW(Opportunity);
      // LibraryReportValidation.SetFileName(ContactNo);
      // OpportunityDetails.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      OpportunityDetails.RUN;
    END;

    LOCAL PROCEDURE RunSegmentContactsReport@30(No@1000 : Code[20]);
    VAR
      SegmentHeader@1001 : Record 5076;
      SegmentContacts@1002 : Report 5063;
    BEGIN
      CLEAR(SegmentContacts);
      COMMIT;
      SegmentHeader.SETRANGE("No.",No);
      SegmentContacts.SETTABLEVIEW(SegmentHeader);
      SegmentContacts.RUN;
    END;

    LOCAL PROCEDURE UpdateCompanyNo@44(VAR Contact@1000 : Record 5050;CompanyNo@1001 : Code[20]);
    BEGIN
      Contact.VALIDATE("Company No.",CompanyNo);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateOpportunity@29(ContactNo@1000 : Code[20]);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.UpdateOpportunity;
    END;

    LOCAL PROCEDURE VerifyActivityStepOnReport@99(ActivityCode@1002 : Code[10]);
    VAR
      ActivityStep@1001 : Record 5082;
    BEGIN
      ActivityStep.SETRANGE("Activity Code",ActivityCode);
      ActivityStep.FINDFIRST;
      LibraryReportDataset.AssertCurrentRowValue('Priority_ActivityStep',FORMAT(ActivityStep.Priority));
    END;

    LOCAL PROCEDURE VerifyCostAndEstimatedValue@16(Contact@1002 : Record 5050);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Contact',Contact."No.");

      Assert.IsTrue(LibraryReportDataset.GetNextRow,
        STRSUBSTNO(FilterNotFoundinXMLErr,
          Contact.FIELDCAPTION("No."),
          Contact."No."));

      Contact.CALCFIELDS("Cost (LCY)","Estimated Value (LCY)");
      LibraryReportDataset.AssertCurrentRowValue('CostLCY_Cont',
        Contact."Cost (LCY)");

      LibraryReportDataset.AssertCurrentRowValue('EstimatedValueLCY_Cont',
        Contact."Estimated Value (LCY)");
    END;

    LOCAL PROCEDURE VerifyCampaign@109(Campaign@1003 : Record 5071;SegmentHeader@1000 : Record 5076;CampaignEntry@1004 : Record 5072);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      // Verify Campaign Table Detail.
      LibraryReportDataset.SetRange('No_Campaign',Campaign."No.");

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Description_Campaign',Campaign.Description);

      // Verification for Segment Header Table Details.
      LibraryReportDataset.AssertCurrentRowValue('No_SegmentHdr',SegmentHeader."No.");

      // Verification for Campaign Entry.
      LibraryReportDataset.SetRange('EntryNo_CampaignEntry',CampaignEntry."Entry No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Desc_Campaign',CampaignEntry.Description);
      CampaignEntry.CALCFIELDS("Cost (LCY)");
      LibraryReportDataset.AssertCurrentRowValue('CostLCY_CampaignEntry',CampaignEntry."Cost (LCY)");
    END;

    LOCAL PROCEDURE VerifyInteractionLogEntry@190(ContactNo@1000 : Code[20]);
    VAR
      InteractionLogEntry@1001 : Record 5065;
    BEGIN
      InteractionLogEntry.SETRANGE("Contact No.",ContactNo);
      InteractionLogEntry.FINDFIRST;

      LibraryReportDataset.SetRange(
        'Interaction_Log_Entry___Entry_No__',
        InteractionLogEntry."Entry No.");

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(
        'Interaction_Log_Entry___Contact_No__',
        InteractionLogEntry."Contact No.");
      LibraryReportDataset.AssertCurrentRowValue(
        'Interaction_Log_Entry___Information_Flow_',
        FORMAT(InteractionLogEntry."Information Flow"));
      LibraryReportDataset.AssertCurrentRowValue(
        'Interaction_Log_Entry___Initiated_By_',
        FORMAT(InteractionLogEntry."Initiated By"));
    END;

    LOCAL PROCEDURE VerifyOpportunityDetails@41(SalespersonCode@1000 : Code[10]);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Salesperson Code",SalespersonCode);
      Opportunity.FINDFIRST;

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Opportunity__No__',Opportunity."No.");

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Opportunity__Contact_No__',Opportunity."Contact No.");
      LibraryReportDataset.AssertCurrentRowValue('Opportunity_Status',FORMAT(Opportunity.Status));
      Opportunity.CALCFIELDS("Probability %","Chances of Success %","Completed %");
      LibraryReportDataset.AssertCurrentRowValue('Opportunity__Probability___',Opportunity."Probability %");
      LibraryReportDataset.AssertCurrentRowValue('Opportunity__Chances_of_Success___',Opportunity."Chances of Success %");
      LibraryReportDataset.AssertCurrentRowValue('Opportunity__Completed___',Opportunity."Completed %");
    END;

    LOCAL PROCEDURE VerifyRemarkOnReport@13(RemarkPosition@1000 : Integer;ElementName@1003 : Text;Value@1001 : Variant);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(ElementName,Value);
      LibraryReportDataset.GetNextRow;

      LibraryReportDataset.AssertCurrentRowValue(
        STRSUBSTNO('MarksTxt_%1_',RemarkPosition),
        'x');
    END;

    LOCAL PROCEDURE VerifyRemarkOnContactReport@56(RemarkPosition@1000 : Integer;ContactNo@1001 : Variant);
    BEGIN
      VerifyRemarkOnReport(RemarkPosition,'ContactNo',ContactNo);
    END;

    LOCAL PROCEDURE VerifyRemarkOnSegmentCoverSheetReport@57(RemarkPosition@1000 : Integer;ContactNo@1001 : Variant);
    BEGIN
      VerifyRemarkOnReport(RemarkPosition,'Contact_No_',ContactNo);
    END;

    LOCAL PROCEDURE VerifyTextsOnReport@65(Text@1000 : ARRAY [5] OF Text[250]);
    VAR
      Counter@1001 : Integer;
    BEGIN
      FOR Counter := 1 TO ARRAYLEN(Text) DO
        LibraryReportDataset.AssertCurrentRowValue(
          STRSUBSTNO('Text_%1_',Counter),
          Text[Counter]);
    END;

    LOCAL PROCEDURE VerifyToDoDetails@17(ToDo@1000 : Record 5080);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('To_do__No__',ToDo."No.");

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('To_do__Contact_No__',ToDo."Contact No.");
      LibraryReportDataset.AssertCurrentRowValue('To_do_Status',FORMAT(ToDo.Status));
      LibraryReportDataset.AssertCurrentRowValue('To_do_Priority',FORMAT(ToDo.Priority));
    END;

    LOCAL PROCEDURE VerifyToDoOnPersonSummary@196(ToDo@1000 : Record 5080);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Contact__Company_No__',ToDo."Contact No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('To_do__Salesperson_Code_',ToDo."Salesperson Code");
      LibraryReportDataset.AssertCurrentRowValue('To_do_Priority',FORMAT(ToDo.Priority));
      LibraryReportDataset.AssertCurrentRowValue('To_do_Status',FORMAT(ToDo.Status));
    END;

    LOCAL PROCEDURE VerifyQuestionnaireDescription@76(ProfileQuestionnaireLine@1000 : Record 5088);
    BEGIN
      LibraryReportDataset.AssertCurrentRowValue(
        'Profile_Questionnaire_Line_Description',
        ProfileQuestionnaireLine.Description);
    END;

    LOCAL PROCEDURE VerifyQuestionnaireDetails@32(ProfileQuestionnaireLine@1000 : Record 5088);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(
        'Profile_Questionnaire_Header_Code',
        ProfileQuestionnaireLine."Profile Questionnaire Code");
      LibraryReportDataset.GetNextRow;

      LibraryReportDataset.AssertCurrentRowValue(
        'Profile_Questionnaire_Line__Line_No__',
        ProfileQuestionnaireLine."Line No.");

      LibraryReportDataset.AssertCurrentRowValue(
        'Profile_Questionnaire_Line_Type',
        FORMAT(ProfileQuestionnaireLine.Type));
      VerifyQuestionnaireDescription(ProfileQuestionnaireLine);
    END;

    LOCAL PROCEDURE VerifyValuesonContactList@27(Contact@1000 : Record 5050);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Contact.CALCFIELDS("Cost (LCY)","Estimated Value (LCY)","Calcd. Current Value (LCY)","No. of Opportunities");

      LibraryReportDataset.SetRange('Contact__No__',Contact."No.");
      LibraryReportDataset.GetNextRow;

      LibraryReportDataset.AssertCurrentRowValue(
        'Contact__Cost__LCY__',
        Contact."Cost (LCY)");

      LibraryReportDataset.AssertCurrentRowValue(
        'Contact__Estimated_Value__LCY__',
        Contact."Estimated Value (LCY)");

      LibraryReportDataset.AssertCurrentRowValue(
        'Contact__Calcd__Current_Value__LCY__',
        Contact."Calcd. Current Value (LCY)");

      LibraryReportDataset.AssertCurrentRowValue(
        'Contact__No__of_Opportunities_',
        Contact."No. of Opportunities");
    END;

    LOCAL PROCEDURE VerifyValuesonOpportunityList@91(Opportunity@1000 : Record 5092);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Opportunity.CALCFIELDS("Current Sales Cycle Stage","Probability %","Completed %");
      LibraryReportDataset.SetRange('Opportunity__No__',Opportunity."No.");
      LibraryReportDataset.GetNextRow;

      WITH Opportunity DO BEGIN
        LibraryReportDataset.AssertCurrentRowValue(
          'Opportunity__Sales_Cycle_Code_',
          "Sales Cycle Code");
        LibraryReportDataset.AssertCurrentRowValue(
          'Opportunity__Salesperson_Code_',
          "Salesperson Code");
        LibraryReportDataset.AssertCurrentRowValue(
          'Opportunity__Contact_No__',
          "Contact No.");
        LibraryReportDataset.AssertCurrentRowValue(
          'Opportunity__Probability___',
          "Probability %");
        LibraryReportDataset.AssertCurrentRowValue(
          'Opportunity__Completed___',
          "Completed %");
      END;
    END;

    LOCAL PROCEDURE VerifyValuesSalesCycleAnalysis@45(SalesCycleCode@1001 : Code[10];Stage@1002 : Integer);
    VAR
      SalesCycleStage@1000 : Record 5091;
    BEGIN
      SalesCycleStage.GET(SalesCycleCode,Stage);
      SalesCycleStage.CALCFIELDS("No. of Opportunities","Estimated Value (LCY)","Calcd. Current Value (LCY)","Average No. of Days");

      LibraryReportDataset.SetRange('Stage_SalesCycleStage',FORMAT(Stage));

      WITH SalesCycleStage DO BEGIN
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue(
          'Descriptn_SalesCycleStage',
          Description);

        LibraryReportDataset.AssertCurrentRowValue(
          'ActyCode_SalesCycleStage',
          "Activity Code");
        LibraryReportDataset.AssertCurrentRowValue(
          'NoOfOppt_SalesCycleStage',
          "No. of Opportunities");

        LibraryReportDataset.AssertCurrentRowValue(
          'EstValLCY_SalesCycleStage',
          "Estimated Value (LCY)");
        LibraryReportDataset.AssertCurrentRowValue(
          'CurValLCY_SalesCycleStage',
          "Calcd. Current Value (LCY)");
        LibraryReportDataset.AssertCurrentRowValue(
          'AvgNoOfDay_SalesCycleStage',
          "Average No. of Days");
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerOpportunity@8(VAR CreateOpportunity@1000 : Page 5126;VAR Response@1001 : Action);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
    BEGIN
      TempOpportunity.INIT;
      CreateOpportunity.GETRECORD(TempOpportunity);
      TempOpportunity.INSERT;
      TempOpportunity.VALIDATE(
        Description,LibraryUtility.GenerateRandomCode(TempOpportunity.FIELDNO(Description),DATABASE::Opportunity));
      TempOpportunity.MODIFY;
      TempOpportunity.CheckStatus;
      TempOpportunity.PerformNextWizardStatus;

      TempOpportunity.VALIDATE("Sales Cycle Code",SalesCycleCode);
      TempOpportunity.CheckStatus;
      TempOpportunity.FinishWizard;
    END;

    [RequestPageHandler]
    PROCEDURE ContactCoverSheetRequestPageHandler@43(VAR ContactCoverSheet@1001 : TestRequestPage 5055);
    BEGIN
      ContactCoverSheet.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE CreateInteractModalPageHandler@110(VAR CreateInteraction@1000 : Page 5077;VAR Response@1001 : Action);
    VAR
      TempSegmentLine@1002 : TEMPORARY Record 5077;
      TempAttachment@1004 : TEMPORARY Record 5062;
    BEGIN
      CreateInteraction.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;  // Insert temporary Segment Line to modify fields later.
      TempSegmentLine.VALIDATE("Contact No.",ContactNo2);
      TempSegmentLine.VALIDATE("Interaction Template Code",InteractionTemplateCode);
      TempSegmentLine.VALIDATE(Description,InteractionTemplateCode);
      TempSegmentLine.VALIDATE("Campaign No.",CampaignNo2);
      TempSegmentLine.VALIDATE("Information Flow",TempSegmentLine."Information Flow"::Outbound);
      TempSegmentLine.VALIDATE("Initiated By",TempSegmentLine."Initiated By"::Us);
      TempSegmentLine.FinishWizard(TRUE,TempAttachment);
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerForTeamToDo@64(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE("Team Code",TeamCode);
      TempToDo.VALIDATE(Description,TeamCode);
      TempToDo.VALIDATE("Team To-do",TRUE);
      TempToDo.VALIDATE(Date,WORKDATE);
      TempToDo.MODIFY;
      TempToDo.CheckStatus;
      TempToDo.PerformNextWizardStatus;
      TempToDo.CheckStatus;
      TempToDo.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerToDo@46(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE(Description,TempToDo."Contact No.");
      TempToDo.VALIDATE("Opportunity No.",OpportunityNo);
      TempToDo.VALIDATE(Date,WORKDATE);
      TempToDo.MODIFY;
      TempToDo.CheckStatus;
      TempToDo.PerformNextWizardStatus;
      TempToDo.CheckStatus;
      TempToDo.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE PageHandlerUpdateOpportunity@22(VAR UpdateOpportunity@1000 : Page 5129;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
      ActionType@1003 : ' ,First,Next,Previous,Skip,Update,Jump';
    BEGIN
      TempOpportunityEntry.INIT;
      UpdateOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.CreateStageList;
      TempOpportunityEntry.VALIDATE("Action Type",ActionType::First);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      TempOpportunityEntry.VALIDATE("Sales Cycle Stage",CurrentSalesCycleStage);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      // Use Random for Estimated Value (LCY) and Chances of Success % because values are not important.
      TempOpportunityEntry.VALIDATE("Estimated Value (LCY)",RANDOM(100));
      TempOpportunityEntry.VALIDATE("Chances of Success %",RANDOM(100));
      TempOpportunityEntry.VALIDATE("Estimated Close Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));
      TempOpportunityEntry.MODIFY;

      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.FinishWizard2;
    END;

    [ModalPageHandler]
    PROCEDURE PageHandlerOpportunityAction@33(VAR UpdateOpportunity@1000 : Page 5129;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
    BEGIN
      TempOpportunityEntry.INIT;
      UpdateOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.CreateStageList;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      TempOpportunityEntry.VALIDATE("Sales Cycle Stage",CurrentSalesCycleStage);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      // Use Random for Estimated Value (LCY) and Chances of Success % because values are not important.
      TempOpportunityEntry.VALIDATE("Estimated Value (LCY)",RANDOM(99) + LibraryUtility.GenerateRandomFraction);
      TempOpportunityEntry.VALIDATE("Chances of Success %",RANDOM(99) + LibraryUtility.GenerateRandomFraction);
      TempOpportunityEntry.VALIDATE("Estimated Close Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));
      TempOpportunityEntry.MODIFY;

      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.FinishWizard2;
    END;

    [RequestPageHandler]
    PROCEDURE SegmentContactsReportHandler@50(VAR SegmentContactsRequestPage@1000 : TestRequestPage 5063);
    BEGIN
      SegmentContactsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE OppurtunityDetailsReportHandler@98(VAR OpportunityDetailsRequestPage@1000 : TestRequestPage 5068);
    BEGIN
      OpportunityDetailsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContactCompanySummaryReportHandler@75(VAR ContactCompanySummaryRequestPage@1000 : TestRequestPage 5051);
    BEGIN
      ContactCompanySummaryRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CampaignDetailsReportHandler@126(VAR CampaignDetailsRequestPage@1000 : TestRequestPage 5060);
    BEGIN
      CampaignDetailsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SalespersonTodosReportHandler@151(VAR SalespersonTodos@1000 : TestRequestPage 5057);
    BEGIN
      SalespersonTodos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SalesOpportunitiesReportHandler@52(VAR SalespersonOpportunities@1000 : TestRequestPage 5058);
    BEGIN
      SalespersonOpportunities.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE TeamToDosReportHandler@81(VAR TeamTodos@1000 : TestRequestPage 5059);
    BEGIN
      TeamTodos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE QuestionnaireHandoutsReportHandler@87(VAR QuestionnaireHandouts@1000 : TestRequestPage 5066);
    BEGIN
      QuestionnaireHandouts.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE QuestionnaireTestReportHandler@114(VAR QuestionnaireTest@1000 : TestRequestPage 5067);
    BEGIN
      QuestionnaireTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContactPersonSummaryReportHandler@141(VAR ContactPersonSummary@1000 : TestRequestPage 5053);
    BEGIN
      ContactPersonSummary.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE RunContactCoverSheetReport@62(ContactNo@1008 : Code[20];AsAgreedUpon@1005 : Boolean;ForYourInformation@1004 : Boolean;YourCommentsPlease@1003 : Boolean;ForYourApproval@1002 : Boolean;PleaseCall@1001 : Boolean;ReturnedAfterUse@1000 : Boolean);
    VAR
      Contact@1007 : Record 5050;
      ContactCoverSheet@1006 : Report 5055;
    BEGIN
      COMMIT;
      Contact.SETRANGE("No.",ContactNo);
      CLEAR(ContactCoverSheet);
      ContactCoverSheet.SETTABLEVIEW(Contact);

      ContactCoverSheet.InitializeRemarks(AsAgreedUpon,
        ForYourInformation,
        YourCommentsPlease,
        ForYourApproval,
        PleaseCall,
        ReturnedAfterUse);

      ContactCoverSheet.RUN;
    END;

    [RequestPageHandler]
    PROCEDURE SegmentCoverSheetRequestPageHandler@97(VAR SegmentCoverSheet@1001 : TestRequestPage 5064);
    BEGIN
      SegmentCoverSheet.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE RunSegmentCoverSheetReport@106(SegmentHeaderNo@1008 : Code[20];AsAgreedUpon@1005 : Boolean;ForYourInformation@1004 : Boolean;YourCommentsPlease@1003 : Boolean;ForYourApproval@1002 : Boolean;PleaseCall@1001 : Boolean;ReturnedAfterUse@1000 : Boolean);
    VAR
      SegmentHeader@1007 : Record 5076;
      SegmentCoverSheet@1006 : Report 5064;
    BEGIN
      COMMIT;
      SegmentHeader.SETRANGE("No.",SegmentHeaderNo);
      CLEAR(SegmentCoverSheet);
      SegmentCoverSheet.SETTABLEVIEW(SegmentHeader);

      SegmentCoverSheet.InitializeRemarks(AsAgreedUpon,
        ForYourInformation,
        YourCommentsPlease,
        ForYourApproval,
        PleaseCall,
        ReturnedAfterUse);

      SegmentCoverSheet.RUN;
    END;

    [RequestPageHandler]
    PROCEDURE ContactListReportHandler@135(VAR ContactList@1000 : TestRequestPage 5050);
    BEGIN
      ContactList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE OpportunityListReportHandler@147(VAR OpportunityList@1000 : TestRequestPage 5061);
    BEGIN
      OpportunityList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SalesCycleAnalysisReportHandler@163(VAR SalesCycleAnalysis@1000 : TestRequestPage 5062);
    BEGIN
      SalesCycleAnalysis.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Marketing]
      Test and Verify Marketing Reports
       1. Test Cost (LCY) and Estimated Value (LCY) on Segment Contacts Report.
       2. Test Sales Cycle Stage and Activity Step on Opportunity Report.
       3. Test that Contact of Type Peson related to another contact, seen properly in Contact Company Summary.
       4. Test that values of Description, No. in Campaign - Details matches the value of Description,No. in corresponding Campaign.
       5. Test To-Do details for Salesperson on Salesperson To Dos Report.
       6. Test Opportunity details on Salesperson Opportunities Report.
       7. Test To-Do details for Team on Team To Dos Report.
       8. Test Questionnaire details on Questionnaire Handouts Report with Multiple Answers False on Questionnaire Line.
       9. Test Questionnaire details on Questionnaire Handouts Report with Multiple Answers True on Questionnaire Line.
      10. Test Questionnaire details on Questionnaire Test Report.
      11. Test To Do and Interaction details on Contact Person Summary Report.
      12. Test Contact Cover Sheet Report with Texts.
      13. Test Contact Cover Sheet Report with As Agreed upon True.
      14. Test Contact Cover Sheet Report with For Your Information True.
      15. Test Contact Cover Sheet Report with Your Comments Please True.
      16. Test Contact Cover Sheet Report with For Your Approval True.
      17. Test Contact Cover Sheet Report with Please Call True.
      18. Test Contact Cover Sheet Report with Returned After Use True.
      19. Test Contact Cover Sheet Report with Custom Remarks.
      20. Test Segment Cover Sheet Report with Texts.
      21. Test Segment Cover Sheet Report with As Agreed Upon True.
      22. Test Segment Cover Sheet Report with For Your Information True.
      23. Test Segment Cover Sheet Report with Your Comments Please True.
      24. Test Segment Cover Sheet Report with For Your Approval True.
      25. Test Segment Cover Sheet Report with Please Call True.
      26. Test Segment Cover Sheet Report with Returned After Use True.
      27. Test Segment Cover Sheet Report with Custom Remarks.
      28. Test and verify Contact List Report.
      29. Test and verify Sales Cycle Analysis Report.
      30. Test and verify Opportunity List Report.
      31. Test and verify Contact Count on Contact Cover Sheet report.

      TFS_TS_ID = 230387
      Cover Test cases:
      --------------------------------------
      Test Function Name             TFS ID
      --------------------------------------
      SegmentContactsReport          139492
      OpportunityDetailsReport       139494

      Covers Test Cases for WI - 230388
      --------------------------------------
      Test Function Name             TFS ID
      --------------------------------------
      ContactCompanySummary          139586

      TFS_TS_ID = 230381
      Cover Test cases:
      -----------------------------------------------------------------
      Test Function Name                                         TFS ID
      -----------------------------------------------------------------
      CampaignDetailsReport                                      139443

      TFS_TS_ID = 234737
      Cover Test cases:
      ---------------------------------------------------------------
      Test Function Name                                       TFS ID
      ---------------------------------------------------------------
      SalespersonToDosReport                                   139589
      SalespersonOpportunitiesReport                           139590
      TeamToDosReport                                          139591
      QuestionnaireSingleAnswer, QuestionnaireMultipleAnswer   139594
      QuestionnaireTestReport                                  139595

      TFS_TS_ID = 235354
      Cover Test cases:
      ------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                      TFS ID
      ------------------------------------------------------------------------------------------------------------------------------
      ContactPersonSummary                                                                                                    139587
      ContactCoverSheetWithText, ContactSheetAsAgreedUpon, ContactSheetForYourInformation, ContactSheetYourCommentsPlease     139588
      ContactSheetForYourApproval, ContactSheetPleaseCall, ContactSheetReturnedAfterUse, ContactSheetCustomRemarks            139588
      SegmentCoverSheetWithText, SegmentSheetAsAgreedUpon, SegmentSheetForYourInformation, SegmentSheetYourCommentsPlease     139593
      SegmentSheetForYourApproval, SegmentSheetPleaseCall, SegmentSheetReturnedAfterUse, SegmentSheetCustomRemarks            139593

      TFS_TS_ID = 238423
      --------------------------------------------------------------------------
      Test Function Name                                             TFS ID
      --------------------------------------------------------------------------
      ContactListReport                                              139489
      SalesCycleAnalysisReport                                       139491
      OpportunityListReport                                          139592

      TFS_TS_ID = 326134
      --------------------------------------------------------------------------
      Test Function Name                                             TFS ID
      --------------------------------------------------------------------------
      ContactCountOnContactCoverSheetReport                          293832
    }
    END.
  }
}

