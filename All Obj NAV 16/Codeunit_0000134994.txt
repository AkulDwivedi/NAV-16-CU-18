OBJECT Codeunit 134994 ERM Account Schedule II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryDimension@1005 : Codeunit 131001;
      LibraryERM@1000 : Codeunit 131300;
      LibraryReportDataset@1001 : Codeunit 131007;
      LibraryReportValidation@1002 : Codeunit 131002;
      LibraryRandom@1010 : Codeunit 130440;
      DimensionValueErr@1006 : TextConst 'ENU=Dimension Value record does not exist.';
      AccSchedLineFilterCap@1007 : TextConst 'ENU=Date Filter: %1, Dimension 1 Filter: %2';
      LibraryVariableStorage@1003 : Codeunit 131004;
      LibraryUtility@1008 : Codeunit 131000;

    [Test]
    [HandlerFunctions(RHAccountSchedule)]
    PROCEDURE AccountScheduleReport25MaxColumns@27();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1001 : Record 85;
      ColumnLayoutName@1003 : Record 333;
      ColumnLayout@1007 : Record 334;
      RowCount@1004 : Integer;
      MaxColumnCount@1005 : Integer;
    BEGIN
      // Test Account Schedule Report with max number of columns.
      // It compares column layout setup and report result; use this test to verify setup changing.
      // 1.Setup: Create new Account Schedule with lines and Column Layout with max number of columns.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      RowCount := LibraryRandom.RandInt(100);
      CreateLines(AccScheduleName,FORMAT(LibraryRandom.RandInt(10)),AccScheduleLine."Totaling Type"::Formula,RowCount);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      MaxColumnCount := 5;
      CreateColumns(ColumnLayoutName,FORMAT(LibraryRandom.RandDec(9999,2),12,0),MaxColumnCount);

      // 2.Exercise: Run the 25th Report.
      RunAccountScheduleReport(AccScheduleName.Name,ColumnLayoutName.Name);

      // 3.Verify: Verify that names of columns are the same as they are in the Column Layout set.
      LibraryReportDataset.LoadDataSetFile;
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
      ColumnLayout.FINDSET;
      REPEAT
        LibraryReportDataset.AssertElementWithValueExists('Header',ColumnLayout."Column Header");
      UNTIL ColumnLayout.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(RHAccountSchedule)]
    PROCEDURE AccountScheduleReport25WithoutColumns@89();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1001 : Record 85;
      ColumnLayoutName@1003 : Record 333;
      RowCount@1004 : Integer;
    BEGIN
      // Test Account Schedule Report with 0 columns.
      // This report could be saved.
      // 1.Setup: Create new Account Schedule with lines and Column Layout without any columns.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      RowCount := LibraryRandom.RandInt(100);
      CreateLines(AccScheduleName,FORMAT(LibraryRandom.RandInt(10)),AccScheduleLine."Totaling Type"::Formula,RowCount);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);

      // 2.Exercise: Run the 25th Report.
      RunAccountScheduleReport(AccScheduleName.Name,ColumnLayoutName.Name);

      // 3.Verify: Verify that the report was saved successfully.
      LibraryReportDataset.LoadDataSetFile;
      AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
      AccScheduleLine.FINDFIRST;
      LibraryReportDataset.AssertElementWithValueExists('AccScheduleName_Name',AccScheduleLine."Schedule Name");
    END;

    [Test]
    [HandlerFunctions(RHAccountSchedule)]
    PROCEDURE AccountScheduleReport25VerifyHeader@114();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1001 : Record 85;
      ColumnLayoutName@1003 : Record 333;
      RowCount@1004 : Integer;
      ColumnCount@1005 : Integer;
    BEGIN
      // Test that report header is correct.
      // It searches settings of report header in the Excel document (Account Schedule Name and Column Layout Name).
      // 1.Setup: Create new Account Schedule with lines and Column Layout with columns.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      RowCount := LibraryRandom.RandInt(10);
      CreateLines(AccScheduleName,FORMAT(LibraryRandom.RandInt(10)),AccScheduleLine."Totaling Type"::Formula,RowCount);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      ColumnCount := LibraryRandom.RandInt(4);
      CreateColumns(ColumnLayoutName,FORMAT(LibraryRandom.RandDec(9999,2),12,0),ColumnCount);

      // 2.Exercise: Run the 25th Report.
      RunAccountScheduleReport(AccScheduleName.Name,ColumnLayoutName.Name);

      // 3.Verify: Verify report header.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('AccScheduleName_Name',AccScheduleName.Name);
      LibraryReportDataset.AssertElementWithValueExists('ColumnLayoutName',ColumnLayoutName.Name);
    END;

    [Test]
    [HandlerFunctions(AccountScheduleHandler,LookUpDimensionValueListHandler)]
    PROCEDURE AccountScheduleReportDimensionFilterFromGLSetup@2();
    VAR
      AccScheduleName@1000 : Record 84;
    BEGIN
      // Setup
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);

      LibraryVariableStorage.Enqueue(AccScheduleName.Name);
      LibraryVariableStorage.Enqueue(LibraryERM.GetGlobalDimensionCode(1));

      // 2.Exercise: Run the 25th Report.
      COMMIT;
      REPORT.RUN(REPORT::"Account Schedule");
    END;

    [Test]
    [HandlerFunctions(AccountScheduleHandler,LookUpDimensionValueListHandler)]
    PROCEDURE AccountScheduleReportDimensionFilterFromAnalysisView@4();
    VAR
      AccScheduleName@1002 : Record 84;
      AnalysisView@1001 : Record 363;
      Dimension@1000 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      // Setup
      Initialize;

      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAnalysisView(AnalysisView);
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);

      AnalysisView.VALIDATE("Dimension 1 Code",Dimension.Code);
      AnalysisView.MODIFY(TRUE);
      AccScheduleName.VALIDATE("Analysis View Name",AnalysisView.Code);
      AccScheduleName.MODIFY(TRUE);

      LibraryVariableStorage.Enqueue(AccScheduleName.Name);
      LibraryVariableStorage.Enqueue(Dimension.Code);
      // 2.Exercise: Run the 25th Report.
      COMMIT;
      REPORT.RUN(REPORT::"Account Schedule");
    END;

    [Test]
    [HandlerFunctions(RHAccountSchedule)]
    PROCEDURE AccountScheduleReportGrouping@3();
    VAR
      AccScheduleName@1000 : Record 84;
      AccScheduleLine@1003 : Record 85;
      ColumnLayoutName@1001 : Record 333;
      ColumnLayout@1002 : Record 334;
    BEGIN
      Initialize;

      // Setup
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name);
      CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name);

      // 2.Exercise: Run the 25th Report.
      COMMIT;
      RunAccountScheduleReport(AccScheduleName.Name,ColumnLayoutName.Name);

      // Verify
      LibraryReportDataset.LoadDataSetFile;
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
      IF ColumnLayout.FINDSET THEN
        REPEAT
          LibraryReportDataset.AssertElementWithValueExists('Header',ColumnLayout."Column Header");
        UNTIL ColumnLayout.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRequestPageWithDimensionFilter)]
    PROCEDURE AccountScheduleWithDimensionFilter@165();
    VAR
      ColumnLayoutName@1000 : Record 333;
      AccScheduleName@1001 : Record 84;
      GeneralLedgerSetup@1002 : Record 98;
      DimensionValue@1003 : Record 349;
    BEGIN
      // Verify that Account Schedule report showing the Dimension Filter or Date Filter.

      // Setup: Create account schedule and Column layout.
      Initialize;
      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryVariableStorage.Enqueue(ColumnLayoutName.Name);
      LibraryVariableStorage.Enqueue(AccScheduleName.Name);
      LibraryVariableStorage.Enqueue(DimensionValue.Code);

      // Exercise: Run Account Schedule Report.
      COMMIT;
      REPORT.RUN(REPORT::"Account Schedule",TRUE,FALSE);

      // Verify: Verifying that Dimension & date filter exist on report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(
        'AccSchedLineFilter',STRSUBSTNO(AccSchedLineFilterCap,WORKDATE,DimensionValue.Code));
    END;

    [Test]
    [HandlerFunctions(RPHAccountScheduleVerifyData)]
    PROCEDURE AccountScheduleReportVerifyRequestPage@7();
    VAR
      AccScheduleName@1000 : Record 84;
      ColumnLayoutName@1003 : Record 333;
    BEGIN
      // Verify request page has data after setfilter and open page
      Initialize;

      LibraryERM.CreateAccScheduleName(AccScheduleName);
      LibraryERM.CreateColumnLayoutName(ColumnLayoutName);

      LibraryVariableStorage.Enqueue(AccScheduleName.Name);
      LibraryVariableStorage.Enqueue(ColumnLayoutName.Name);

      // Run the 25th Report
      RunAccountScheduleReport(AccScheduleName.Name,ColumnLayoutName.Name);

      // Verify is done in Request Page Handler RPHAccountScheduleVerifyData
      // check that request page has correct data
    END;

    [Test]
    PROCEDURE AccountScheduleExportToExcel@9();
    VAR
      AccScheduleName@1005 : Record 84;
      AccScheduleLine@1004 : Record 85;
      ExportAccSchedToExcel@1006 : Report 29;
    BEGIN
      // Verify account schedule export to Excel can fill Excel Buffer
      Initialize;
      AccScheduleName.SETFILTER("Analysis View Name",'<>%1','');
      AccScheduleName.SETFILTER("Default Column Layout",'<>%1','');
      IF AccScheduleName.FINDFIRST THEN BEGIN
        LibraryReportValidation.SetFileName(AccScheduleName.Name);

        // Export to Excel buffer
        AccScheduleLine.SETRANGE("Schedule Name",AccScheduleName.Name);
        AccScheduleLine.SETRANGE("Date Filter",CALCDATE('<-CY>',WORKDATE),CALCDATE('<CY>',WORKDATE));
        ExportAccSchedToExcel.SetFileNameSilent(LibraryReportValidation.GetFileName);
        ExportAccSchedToExcel.SetOptions(AccScheduleLine,AccScheduleName."Default Column Layout",FALSE);
        ExportAccSchedToExcel.SetTestMode(TRUE);
        ExportAccSchedToExcel.USEREQUESTPAGE(FALSE);

        // Verify
        ExportAccSchedToExcel.RUN;
      END;
    END;

    [Test]
    [HandlerFunctions(AccountScheduleRPH)]
    PROCEDURE AccountScheduleChangeAccAndColumnNameOnRequestPage@10();
    VAR
      AccScheduleName@1001 : ARRAY [2] OF Record 84;
      ColumnLayoutName@1000 : ARRAY [2] OF Record 333;
      i@1002 : Integer;
    BEGIN
      // [SCENARIO 377416] Account Schedule report uses "Acc. Schedule Name" and "Column Layout Name" values looked up on request page in case of not using hidden filters
      Initialize;

      // [GIVEN] Account Schedule "A1", "A2". Column Layout "C1", "C2"
      FOR i := 1 TO ARRAYLEN(AccScheduleName) DO BEGIN
        LibraryERM.CreateAccScheduleName(AccScheduleName[i]);
        LibraryERM.CreateColumnLayoutName(ColumnLayoutName[i]);
      END;

      // [GIVEN] Open Account Schedule report using predefined "Acc. Schedule Name" = "A1", "Column Layout Name" = "C1" values
      // [GIVEN] Change "Acc. Schedule Name" = "A2", "Column Layout Name" = "C2" values on request page
      // [WHEN] Run report
      LibraryVariableStorage.Enqueue(AccScheduleName[2].Name); // used in AccountScheduleRPH
      LibraryVariableStorage.Enqueue(ColumnLayoutName[2].Name); // used in AccountScheduleRPH
      RunAccountScheduleReportWithoutUseHiddenFilters(AccScheduleName[1].Name,ColumnLayoutName[1].Name);

      // [THEN] Report run with "Acc. Schedule Name" = "A2", "Column Layout Name" = "C2"
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('AccScheduleName_Name',AccScheduleName[2].Name);
      LibraryReportDataset.AssertElementWithValueExists('ColumnLayoutName',ColumnLayoutName[2].Name);
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE CreateAccScheduleLine@60(VAR AccScheduleLine@1000 : Record 85;AccScheduleName@1001 : Code[10];Totaling@1002 : Text[250]);
    BEGIN
      LibraryERM.CreateAccScheduleLine(AccScheduleLine,AccScheduleName);
      AccScheduleLine.VALIDATE("Row No.",FORMAT(LibraryRandom.RandInt(100)));
      AccScheduleLine.VALIDATE(
        Description,COPYSTR(LibraryUtility.GenerateRandomCode(AccScheduleLine.FIELDNO(Description),DATABASE::"Acc. Schedule Line"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Acc. Schedule Line",AccScheduleLine.FIELDNO(Description))));
      AccScheduleLine.VALIDATE(Totaling,Totaling);
      AccScheduleLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateColumnLayoutLine@22(VAR ColumnLayout@1001 : Record 334;ColumnLayoutName@1002 : Code[10]);
    BEGIN
      LibraryERM.CreateColumnLayout(ColumnLayout,ColumnLayoutName);
      ColumnLayout.VALIDATE("Column Type",ColumnLayout."Column Type"::Formula);
      ColumnLayout.VALIDATE(Formula,ColumnLayoutName);
      ColumnLayout.VALIDATE("Column Header",LibraryUtility.GenerateRandomCode(ColumnLayout.FIELDNO("Column Header"),
          DATABASE::"Column Layout"));
      ColumnLayout.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateColumns@90(ColumnLayoutName@1002 : Record 333;Formula@1005 : Code[80];NumberOfColumns@1000 : Integer);
    VAR
      ColumnLayout@1003 : Record 334;
      Counter@1001 : Integer;
    BEGIN
      FOR Counter := 1 TO NumberOfColumns DO BEGIN
        CreateColumnLayoutLine(ColumnLayout,ColumnLayoutName.Name);
        ColumnLayout.VALIDATE("Column No.",FORMAT(Counter));
        ColumnLayout.VALIDATE("Column Header",PADSTR(LibraryUtility.GenerateGUID,10));
        ColumnLayout.VALIDATE(Formula,Formula);
        ColumnLayout.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateLines@91(AccScheduleName@1003 : Record 84;Totaling@1006 : Text[250];TotalingType@1004 : Option;NumberOfRows@1000 : Integer);
    VAR
      AccScheduleLine@1002 : Record 85;
      Counter@1001 : Integer;
    BEGIN
      FOR Counter := 1 TO NumberOfRows DO BEGIN
        CreateAccScheduleLine(AccScheduleLine,AccScheduleName.Name,Totaling);
        AccScheduleLine.VALIDATE("Row No.",PADSTR(LibraryUtility.GenerateGUID,10));
        AccScheduleLine.VALIDATE("Totaling Type",TotalingType);
        AccScheduleLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE RunAccountScheduleReport@12(ScheduleName@1000 : Code[10];ColumnLayoutName@1001 : Code[10]);
    VAR
      AccountSchedule@1002 : Report 25;
    BEGIN
      CLEAR(AccountSchedule);
      AccountSchedule.SetAccSchedName(ScheduleName);
      AccountSchedule.SetColumnLayoutName(ColumnLayoutName);
      AccountSchedule.SetFilters(FORMAT(WORKDATE),'','','','','','','');
      COMMIT;
      AccountSchedule.RUN;
    END;

    LOCAL PROCEDURE RunAccountScheduleReportWithoutUseHiddenFilters@13(ScheduleName@1000 : Code[10];ColumnLayoutName@1001 : Code[10]);
    VAR
      AccountSchedule@1002 : Report 25;
    BEGIN
      CLEAR(AccountSchedule);
      AccountSchedule.SetAccSchedName(ScheduleName);
      AccountSchedule.SetColumnLayoutName(ColumnLayoutName);
      COMMIT;
      AccountSchedule.RUN;
    END;

    [RequestPageHandler]
    PROCEDURE RHAccountSchedule@1(VAR AccountSchedule@1000 : TestRequestPage 25);
    BEGIN
      AccountSchedule.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AccountScheduleHandler@6(VAR AccountSchedule@1000 : TestRequestPage 25);
    VAR
      AccScheduleName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AccScheduleName);
      AccountSchedule.AccSchedNam.SETVALUE(AccScheduleName);
      AccountSchedule.Dim1Filter.LOOKUP;
    END;

    [ModalPageHandler]
    PROCEDURE LookUpDimensionValueListHandler@5(VAR DimensionValueList@1000 : TestPage 560);
    VAR
      DimensionValue@1002 : Record 349;
      DimensionFilter@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DimensionFilter);
      DimensionValue.SETRANGE("Dimension Code",DimensionFilter);
      DimensionValue.FINDFIRST;
      Assert.IsTrue(DimensionValueList.GOTORECORD(DimensionValue),DimensionValueErr);
    END;

    [RequestPageHandler]
    PROCEDURE AccountScheduleRequestPageWithDimensionFilter@167(VAR AccountSchedule@1000 : TestRequestPage 25);
    VAR
      ColumnLayoutName@1001 : Variant;
      ScheduleName@1002 : Variant;
      DimensionValue@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ColumnLayoutName);
      LibraryVariableStorage.Dequeue(ScheduleName);
      LibraryVariableStorage.Dequeue(DimensionValue);
      AccountSchedule.AccSchedNam.SETVALUE(ScheduleName);
      AccountSchedule.ColumnLayoutNames.SETVALUE(ColumnLayoutName);
      AccountSchedule.DateFilters.SETVALUE(WORKDATE);
      AccountSchedule.Dim1Filter.SETVALUE(DimensionValue);
      AccountSchedule.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RPHAccountScheduleVerifyData@14(VAR AccountSchedule@1000 : TestRequestPage 25);
    VAR
      AccSchedNam@1001 : Variant;
      ColumnLayoutNames@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AccSchedNam);
      LibraryVariableStorage.Dequeue(ColumnLayoutNames);
      AccountSchedule.AccSchedNam.ASSERTEQUALS(AccSchedNam);
      AccountSchedule.ColumnLayoutNames.ASSERTEQUALS(ColumnLayoutNames);
      AccountSchedule.DateFilters.ASSERTEQUALS(FORMAT(WORKDATE));
    END;

    [RequestPageHandler]
    PROCEDURE AccountScheduleRPH@19(VAR AccountSchedule@1000 : TestRequestPage 25);
    BEGIN
      AccountSchedule.AccSchedNam.SETVALUE(LibraryVariableStorage.DequeueText);
      AccountSchedule.ColumnLayoutNames.SETVALUE(LibraryVariableStorage.DequeueText);
      AccountSchedule.DateFilters.SETVALUE(WORKDATE);
      AccountSchedule.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Account Schedule]
      Unsupported version tags:
      NA: Unable to Execute
      SE: Unable to Execute

      Test for Account Schedule Report 25 - feature TFS 282213 ERM: Report utilizing RDLC capabilities - Report 25 Account Schedule - Role Center Phyllis Charlie (8 effort points)
      Verify column layout setup (tablix):
      1. Test that the report could have max number of Columns in Column Layout and all these columns are reflected in the report (Excel) according to selected Column Layout Setup.
      2. Test that report could be saved without columns.
      3. Test that report header is correct.
      4. Verify that Account Schedule report showing the Dimension Filter or Date Filter.
      5. Verify request page has data after setfilter and open page

      Cover Test cases: 282213
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      AccountScheduleReport25MaxColumns
      AccountScheduleReport25WithoutColumns
      AccountScheduleReport25VerifyHeader

      BUG ID 59165
      ----------------------------------------------------------------------------------------------------
      Test Function Name
      ----------------------------------------------------------------------------------------------------
      AccountScheduleWithDimensionFilter

      AccountScheduleReportVerifyRequestPage                                                                  353241
    }
    END.
  }
}

