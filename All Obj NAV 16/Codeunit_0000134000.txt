OBJECT Codeunit 134000 ERM Apply Sales/Receivables
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1003 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      LibrarySales@1001 : Codeunit 130509;
      LibraryUtility@1008 : Codeunit 131000;
      LibrarySetupStorage@1012 : Codeunit 131009;
      LibraryVariableStorage@1011 : Codeunit 131004;
      LibraryDimension@1013 : Codeunit 131001;
      Assert@1005 : Codeunit 130000;
      isInitialized@1002 : Boolean;
      WrongValErr@1004 : TextConst 'ENU=%1 must be %2 in %3.';
      ApplnRoundingError@1006 : TextConst 'ENU="%1 must be equal to ''Application''  in %2: %3=%4. Current value is ''Appln. Rounding''."';
      ErrorMessage@1007 : TextConst 'ENU=Error Message must be same.';
      AppliesToIDIsNotEmptyOnLedgEntryErr@1009 : TextConst 'ENU=Applies-to ID is not empty in %1.';
      AmountToApplyErr@1010 : TextConst 'ENU="""Amount to Apply"" should be zero."';
      DimensionUsedErr@1014 : TextConst '@@@=.;ENU=A dimension used in %1 %2, %3, %4 has caused an error.';
      DialogTxt@1015 : TextConst '@@@=.;ENU=Dialog';

    [Test]
    PROCEDURE TestPmntDiscWithinDueDate@1();
    VAR
      GenJournalLine@1000 : Record 81;
      DueDate@1004 : Date;
      PaymentDiscountPercent@1002 : Decimal;
      DiscountAmount@1003 : Decimal;
    BEGIN
      // Create General Journal Line for Customer, Post and Validate Customer Ledger Entry and Detailed Customer Ledger Entry for
      // Payment Discount(Amount and "Amount LCY") field.

      // Calculate Due Date and Payment Discount Percent then Post and Apply General Lines.
      Initialize;
      CalcDueDateAndPaymentDiscount(DueDate,PaymentDiscountPercent);
      PostAndApplyGenLines(GenJournalLine,DueDate);
      DiscountAmount := ROUND(GenJournalLine.Amount * PaymentDiscountPercent / 100);

      // Verify: Verify Applied Entry.
      VerifyPaymentWithDiscount(GenJournalLine."Document No.",DiscountAmount);
    END;

    [Test]
    PROCEDURE TestPmntDiscAfterDueDate@4();
    VAR
      GenJournalLine@1001 : Record 81;
      DueDate@1004 : Date;
      PaymentDiscountPercent@1000 : Decimal;
    BEGIN
      // Create General Journal Line for Customer, Post and Validate "Original Pmt. Disc. Possible" and "Open" field for Payment line in
      // Customer Ledger Entry.

      // Calculate Due Date and Payment Discount Percent then Post and Apply General Lines.
      Initialize;
      CalcDueDateAndPaymentDiscount(DueDate,PaymentDiscountPercent);
      PostAndApplyGenLines(GenJournalLine,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',DueDate));

      // Verify: Verify Payment Applied Entry.
      VerifyPaymentWithoutDiscount(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE TestUnapplyPmntDisc@2();
    VAR
      GenJournalLine@1001 : Record 81;
      DueDate@1004 : Date;
      PaymentDiscountPercent@1000 : Decimal;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Create General Journal Line for Customer, Post and Validate "Original Pmt. Disc. Possible" and "Open" field for Payment line in
      // Customer Ledger Entry.

      // Calculate Due Date and Payment Discount Percent then Post and Apply General Lines.
      Initialize;
      CalcDueDateAndPaymentDiscount(DueDate,PaymentDiscountPercent);
      DocumentNo := PostAndApplyGenLines(GenJournalLine,DueDate);

      // Exercise: Unapply Payment to Invoice.
      UnapplyCustLedgerEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");

      // Verify: Verify UnApplied Entry.
      VerifyUnapplyPaymentDiscount(DocumentNo);
    END;

    [Test]
    PROCEDURE ApplnRoundingForInvoice@16();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Application Rounding Entry in Detailed Customer Ledger Entry with Apply and Unapply Invoice and Payment with Random Values.
      // Using 0 for Application Rounding Precision for Currency.
      Initialize;
      ApplyUnapplyCustRounding(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,CreateCurrency(0),
        10 * LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(5,2));
    END;

    [Test]
    PROCEDURE ApplnRoundingForCreditMemo@29();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Application Rounding Entry in Detailed Customer Ledger Entry with Apply and Unapply Credit Memo and Refund
      // with Random Values and using 0 for Application Rounding Precision for Currency..
      Initialize;
      ApplyUnapplyCustRounding(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,CreateCurrency(0),
        -10 * LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE ApplyUnapplyCustRounding@28(DocumentType@1008 : Option;DocumentType2@1009 : Option;CurrencyCode@1002 : Code[10];Amount@1010 : Decimal;AppRounding@1000 : Decimal) : Code[20];
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Setup.
      CreatePostApplyGenJournalLine(GenJournalLine,DocumentType,DocumentType2,CurrencyCode,Amount,AppRounding);

      // Exercise.
      UnapplyCustLedgerEntry(DocumentType2,GenJournalLine."Document No.");

      // Verify: Verify Application Rounding Entry on Detailed Customer Ledger Entry.
      VerifyApplnRoundingCustLedger(GenJournalLine."Document No.",-AppRounding);
      EXIT(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE UnapplyPmntAdditionalCurr@9();
    VAR
      GenJournalLine@1000 : Record 81;
      CurrencyCode@1002 : Code[10];
      DocumentNo@1001 : Code[20];
      AppRounding@1005 : Decimal;
    BEGIN
      // Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
      // with Apply and Unapply Invoice and Payment with Random Values and using 0 for Application Rounding Precision for Currency..
      Initialize;
      CurrencyCode := CreateCurrency(0);
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      AppRounding := LibraryRandom.RandDec(5,2);
      DocumentNo :=
        ApplyUnapplyCustRounding(
          GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,CurrencyCode,
          10 * LibraryRandom.RandDec(100,2),AppRounding);

      // Verify: Verify Additional Currency Amount in G/L Entry.
      VerifyGLEntry(DocumentNo,CurrencyCode,GenJournalLine."Document Type"::" ",AppRounding);
    END;

    [Test]
    PROCEDURE UnapplyRefAdditionalCurr@49();
    VAR
      GenJournalLine@1000 : Record 81;
      CurrencyCode@1002 : Code[10];
      DocumentNo@1001 : Code[20];
      AppRounding@1005 : Decimal;
    BEGIN
      // Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
      // with Apply and Unapply Credit Memo and Refund with Random Values and using 0 for Application Rounding Precision for Currency..
      Initialize;
      CurrencyCode := CreateCurrency(0);
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      AppRounding := LibraryRandom.RandDec(5,2);
      DocumentNo :=
        ApplyUnapplyCustRounding(
          GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,CurrencyCode,
          -10 * LibraryRandom.RandDec(100,2),AppRounding);

      // Verify: Verify Additional Currency Amount in G/L Entry.
      VerifyGLEntry(DocumentNo,CurrencyCode,GenJournalLine."Document Type"::" ",AppRounding);
    END;

    [Test]
    PROCEDURE UnapplyApplyPmntAdditionalCurr@13();
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
      // with Apply already Unapplied Invoice and Payment with Random Values.
      Initialize;
      UnapplyApplyAdditionalCurr(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,10 * LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyApplyRefAdditionalCurr@54();
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
      // with Apply already Unapplied Credit Memo and Refund with Random Values.
      Initialize;
      UnapplyApplyAdditionalCurr(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,
        -10 * LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE UnapplyApplyAdditionalCurr@59(DocumentType@1007 : Option;DocumentType2@1008 : Option;Amount@1009 : Decimal);
    VAR
      GenJournalLine@1004 : Record 81;
      DocumentNo@1006 : Code[20];
      CurrencyCode@1002 : Code[10];
      AppRounding@1005 : Decimal;
    BEGIN
      // Setup.
      CurrencyCode := CreateCurrency(0);  // Using 0 for Application Rounding Precision for Currency.
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      AppRounding := LibraryRandom.RandDec(5,2);
      DocumentNo := CreatePostApplyGenJournalLine(GenJournalLine,DocumentType,DocumentType2,CurrencyCode,Amount,AppRounding);
      UnapplyCustLedgerEntry(DocumentType2,GenJournalLine."Document No.");

      // Exercise. Apply already Unapplied Document from Customer Ledger Entry.
      LibraryERM.ApplyCustomerLedgerEntries(DocumentType2,DocumentType,GenJournalLine."Document No.",DocumentNo);

      // Verify: Verify Application Rounding Entry on Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry.
      VerifyApplnRoundingCustLedger(GenJournalLine."Document No.",-AppRounding);
      VerifyGLEntry(GenJournalLine."Document No.",CurrencyCode,GenJournalLine."Document Type"::" ",AppRounding);
    END;

    [Test]
    PROCEDURE UnapplyPmntApplnRoundingError@34();
    VAR
      DetailedCustLedgEntry@1007 : Record 379;
      GenJournalLine@1006 : Record 81;
      CustEntryApplyPostedEntries@1008 : Codeunit 226;
      CurrencyCode@1001 : Code[10];
      AppRounding@1000 : Decimal;
    BEGIN
      // Verify Error when Unapply Entry of the type Appln. Rounding from Detailed Customer Ledger Entry.

      // Setup.
      CurrencyCode := CreateCurrency(0);  // Using 0 for Application Rounding Precision for Currency.
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      AppRounding := LibraryRandom.RandDec(5,2);

      CreatePostApplyGenJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,CurrencyCode,
        10 * LibraryRandom.RandDec(100,2),AppRounding);

      FindDetailedLedgerEntry(
        DetailedCustLedgEntry,GenJournalLine."Document No.",DetailedCustLedgEntry."Entry Type"::"Appln. Rounding");

      // Exercise. Unapply Payment from Detailed Customer ledger Entry.
      ASSERTERROR CustEntryApplyPostedEntries.UnApplyDtldCustLedgEntry(DetailedCustLedgEntry);

      // Verify: Verify Error when Unapply Entry of the type Appln. Rounding from Detailed Customer Ledger Entry.
      Assert.AreEqual(
        STRSUBSTNO(ApplnRoundingError,DetailedCustLedgEntry.FIELDCAPTION("Entry Type"),DetailedCustLedgEntry.TABLECAPTION,
          DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."),GETLASTERRORTEXT,ErrorMessage);
    END;

    [Test]
    PROCEDURE ClearAppliesToIDFromCLEWhenChangeValueOnGenJnlLine@229();
    VAR
      GenJnlLine@1000 : Record 81;
      CustLedgEntry@1001 : Record 21;
    BEGIN
      // [SCENARIO 118226] Applies-to ID is cleared from Customer Ledger Entry when change value of General Journal Line
      Initialize;

      // [GIVEN] Customer Ledger Entry and General Journal Line with the same Applies-to ID
      FindOpenInvCustLedgEntry(CustLedgEntry);
      SetAppliesToIDOnCustLedgEntry(CustLedgEntry);
      CreateGenJnlLineWithAppliesToID(
        GenJnlLine,GenJnlLine."Account Type"::Customer,CustLedgEntry."Customer No.",CustLedgEntry."Applies-to ID");

      // [WHEN] Change "Applies-to ID" in General Journal Line
      GenJnlLine.VALIDATE("Applies-to ID",LibraryUtility.GenerateGUID);
      GenJnlLine.MODIFY(TRUE);

      // [THEN] "Applies-to ID" in Customer Ledger Entry is empty
      CustLedgEntry.FIND;
      Assert.AreEqual('',CustLedgEntry."Applies-to ID",STRSUBSTNO(AppliesToIDIsNotEmptyOnLedgEntryErr,CustLedgEntry.TABLECAPTION));
      Assert.AreEqual(0,CustLedgEntry."Amount to Apply",AmountToApplyErr);
    END;

    [Test]
    PROCEDURE ClearAppliesToIDFromCLEWhenDeleteGenJnlLine@240();
    VAR
      GenJnlLine@1001 : Record 81;
      CustLedgEntry@1000 : Record 21;
    BEGIN
      // [SCENARIO 118226] Applies-to ID is cleared from Customer Ledger Entry when delete General Journal Line
      Initialize;

      // [GIVEN] Customer Ledger Entry and General Journal Line with the same Applies-to ID
      FindOpenInvCustLedgEntry(CustLedgEntry);
      SetAppliesToIDOnCustLedgEntry(CustLedgEntry);
      CreateGenJnlLineWithAppliesToID(
        GenJnlLine,GenJnlLine."Account Type"::Customer,CustLedgEntry."Customer No.",CustLedgEntry."Applies-to ID");

      // [WHEN] Delete General Journal Line
      GenJnlLine.DELETE(TRUE);

      // [THEN] "Applies-to ID" in Customer Ledger Entry is empty
      CustLedgEntry.FIND;
      Assert.AreEqual('',CustLedgEntry."Applies-to ID",STRSUBSTNO(AppliesToIDIsNotEmptyOnLedgEntryErr,CustLedgEntry.TABLECAPTION));
      Assert.AreEqual(0,CustLedgEntry."Amount to Apply",AmountToApplyErr);
    END;

    [Test]
    PROCEDURE ClearAppliesToDocNoValueFromGenJnlLine@14();
    VAR
      CustLedgEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
    BEGIN
      // [SCENARIO 120733] Customer Ledger Entry "Amount-to Apply" = 0 when blank "Applies-to Doc. No." field in General Journal Line
      Initialize;

      // [GIVEN] Customer Ledger Entry and General Journal Line with "Applies-to Doc. No"
      FindOpenInvCustLedgEntry(CustLedgEntry);
      CreateGenJnlLineWithAppliesToDocNo(
        GenJnlLine,GenJnlLine."Account Type"::Customer,CustLedgEntry."Customer No.",CustLedgEntry."Document No.");

      // [WHEN] Blank "Applies-to Doc. No." field in General Journal Line
      GenJnlLine.VALIDATE("Applies-to Doc. No.",'');
      GenJnlLine.MODIFY(TRUE);

      // [THEN] Customer Ledger Entry "Amount to Apply" = 0
      CustLedgEntry.FIND;
      Assert.AreEqual(0,CustLedgEntry."Amount to Apply",AmountToApplyErr);
    END;

    [Test]
    PROCEDURE DeleteGenJnlLineWithAppliesToDocNo@36();
    VAR
      CustLedgEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
    BEGIN
      // [SCENARIO 120733] Customer Ledger Entry "Amount-to Apply" = 0 when delete General Journal Line with "Applies-to Doc. No."
      Initialize;

      // [GIVEN] Customer Ledger Entry and General Journal Line with "Applies-to Doc. No."
      FindOpenInvCustLedgEntry(CustLedgEntry);
      CreateGenJnlLineWithAppliesToDocNo(
        GenJnlLine,GenJnlLine."Account Type"::Customer,CustLedgEntry."Customer No.",CustLedgEntry."Document No.");

      // [WHEN] Delete General Journal Line
      GenJnlLine.DELETE(TRUE);

      // [THEN] Customer Ledger Entry "Amount to Apply" = 0
      CustLedgEntry.FIND;
      Assert.AreEqual(0,CustLedgEntry."Amount to Apply",AmountToApplyErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateListModalPageHandler)]
    PROCEDURE VerifyAmountApplToExtDocNoWhenSetValue@18();
    VAR
      GenJournalLine@1003 : Record 81;
      CashReceiptJournal@1000 : TestPage 255;
      PostedDocNo@1004 : Code[20];
      ExpectedExtDocNo@1008 : Code[35];
    BEGIN
      // [FEATURE] [Application] [Cash Receipt]
      // [SCENARIO 363069] Verify that External Doc No transferred when setting 'Applies-to Doc. No.' value in Cash Receipt Journal.

      // [GIVEN] Invoice customer ('External Document No.' non-empty).
      Initialize;
      PostInvoice(GenJournalLine);
      ExpectedExtDocNo := GenJournalLine."External Document No.";
      PostedDocNo := GenJournalLine."Document No.";

      // [GIVEN] Create Cash Receipt Journal Line for the customer.
      CreateCashReceiptJnlLine(GenJournalLine,GenJournalLine."Account No.");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      COMMIT;

      CashReceiptJournal.OPENEDIT;
      CashReceiptJournal."Applies-to Doc. Type".SETVALUE(GenJournalLine."Applies-to Doc. Type"::Invoice);

      // [WHEN] Set 'Applies-to Doc. No.' manually to Posted Invoice doc. no.
      CashReceiptJournal."Applies-to Doc. No.".SETVALUE(PostedDocNo);
      CashReceiptJournal.OK.INVOKE;

      // [THEN] External doc. no. transferred to 'Applied-to Ext. Doc. No.', but Amount is not.
      VerifyExtDocNoAmount(GenJournalLine,ExpectedExtDocNo,0);
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesModalPageHandler,GeneralJournalTemplateListModalPageHandler)]
    PROCEDURE VerifyAmountApplToExtDocNoWhenLookUp@22();
    VAR
      GenJournalLine@1003 : Record 81;
      CashReceiptJournal@1002 : TestPage 255;
      ExpectedExtDocNo@1000 : Code[35];
      ExpectedAmount@1005 : Decimal;
    BEGIN
      // [FEATURE] [Application] [Cash Receipt]
      // [SCENARIO 363069] Verify that Amount and External Doc No transferred when looking up 'Applies-to Doc. No.' value in Cash Receipt Journal.

      // [GIVEN] Invoice customer ('External Document No.' non-empty).
      Initialize;
      PostInvoice(GenJournalLine);
      ExpectedAmount := -GenJournalLine.Amount;
      ExpectedExtDocNo := GenJournalLine."External Document No.";

      // [GIVEN] Create Cash Receipt Journal Line for the customer.
      CreateCashReceiptJnlLine(GenJournalLine,GenJournalLine."Account No.");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      COMMIT;

      CashReceiptJournal.OPENEDIT;
      CashReceiptJournal."Applies-to Doc. Type".SETVALUE(GenJournalLine."Applies-to Doc. Type"::Invoice);

      // [WHEN] Look up and set 'Applies-to Doc. No.' to Posted Invoice doc. no.
      CashReceiptJournal."Applies-to Doc. No.".LOOKUP;
      CashReceiptJournal.OK.INVOKE;

      // [THEN] External doc. no. transferred to 'Applied-to Ext. Doc. No.' as well as Amount.
      VerifyExtDocNoAmount(GenJournalLine,ExpectedExtDocNo,ExpectedAmount);
    END;

    [Test]
    PROCEDURE PmtJnlApplToInvWithNoDimDiscountAndDefDimErr@11();
    VAR
      DimensionValue@1008 : Record 349;
      GenJournalLine@1000 : Record 81;
      CustomerNo@1009 : Code[20];
      PaymentAmount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Dimension] [Payment Discount]
      // [SCENARIO 376797] Error try posting sales payment journal without dimension applied to posted Invoice in case of Discount, "Payment Disc. Debit Acc." with default dimension with "Value Posting" = "Same Code"
      Initialize;

      // [GIVEN] Customer with "Payment Disc. Debit Acc." = "A"
      // [GIVEN] Default Dimension "D" with "Value Posting" = "Same Code" is set for G/L Account "A"
      CustomerNo := CreateCustomer;
      CreateDefaultDimensionGLAccSameValue(DimensionValue,CreateCustPostingGrPmtDiscDebitAccNo(CustomerNo));

      // [GIVEN] Posted Sales Invoice with Amount Including VAT = 10000 and possible Discount = 2%. No dimension is set.
      CreateAndPostGenJnlLine(
        GenJournalLine,WORKDATE,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandIntInRange(1000,2000),CustomerNo,'');
      PaymentAmount := -GenJournalLine.Amount + GenJournalLine.Amount * GetPmtTermsDiscountPct / 100;

      // [GIVEN] Sales Journal with Payment Amount = 9800 and applied to posted Invoice. No dimension is set.
      // [WHEN] Post Sales Journal
      ASSERTERROR LibrarySales.CreatePaymentAndApplytoInvoice(
          GenJournalLine,CustomerNo,GenJournalLine."Document No.",PaymentAmount);

      // [THEN] Error occurs: "A dimension used in Gen. Journal Line GENERAL, CASH, 10000 has caused an error."
      Assert.ExpectedErrorCode(DialogTxt);
      Assert.ExpectedError(
        STRSUBSTNO(DimensionUsedErr,
          GenJournalLine.TABLECAPTION,GenJournalLine."Journal Template Name",
          GenJournalLine."Journal Batch Name",GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE PmtJnlApplToInvWithDimDiscountAndDefDim@26();
    VAR
      DimensionValue@1008 : Record 349;
      GenJournalLine@1000 : Record 81;
      GLEntry@1007 : Record 17;
      CustomerNo@1009 : Code[20];
      GLAccountNo@1003 : Code[20];
      PaymentAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Dimension] [Payment Discount]
      // [SCENARIO 376797] Sales payment journal with dimension applied to posted Invoice can be posted in case of Discount, "Payment Disc. Debit Acc." with default dimension with "Value Posting" = "Same Code"
      Initialize;

      // [GIVEN] Customer with "Payment Disc. Debit Acc." = "A"
      // [GIVEN] Default Dimension "D" with "Value Posting" = "Same Code" is set for G/L Account "A"
      CustomerNo := CreateCustomer;
      GLAccountNo := CreateCustPostingGrPmtDiscDebitAccNo(CustomerNo);
      CreateDefaultDimensionGLAccSameValue(DimensionValue,GLAccountNo);

      // [GIVEN] Posted Sales Invoice with Amount Including VAT = 10000 and possible Discount = 2%. No dimension is set.
      CreateAndPostGenJnlLine(
        GenJournalLine,WORKDATE,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandIntInRange(1000,2000),CustomerNo,'');
      PaymentAmount := -GenJournalLine.Amount + GenJournalLine.Amount * GetPmtTermsDiscountPct / 100;

      // [GIVEN] Sales Journal with Payment Amount = 9800 and applied to posted Invoice. Dimension "D" is set.
      CreateGenJnlLineWithAppliesToDocNo(
        GenJournalLine,GenJournalLine."Account Type"::Customer,CustomerNo,GenJournalLine."Document No.");
      GenJournalLine.VALIDATE("Dimension Set ID",LibraryDimension.CreateDimSet(0,DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.VALIDATE(Amount,PaymentAmount);
      GenJournalLine.MODIFY;

      // [WHEN] Post Sales Journal
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Posted G/L Entry with "G/L Account No." = "A" has Dimension "D"
      FindGLEntry(GLEntry,GenJournalLine."Document No.",GLAccountNo);
      Assert.AreEqual(GenJournalLine."Dimension Set ID",GLEntry."Dimension Set ID",GLEntry.FIELDCAPTION("Dimension Set ID"))
    END;

    [Test]
    PROCEDURE PmtToInvApplWithNoDimDiscountAndDefDim@31();
    VAR
      DimensionValue@1008 : Record 349;
      GenJournalLine@1000 : Record 81;
      GLEntry@1007 : Record 17;
      CustomerNo@1009 : Code[20];
      InvoiceDocumentNo@1003 : Code[20];
      GLAccountNo@1010 : Code[20];
      PaymentAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Dimension] [Payment Discount]
      // [SCENARIO 376797] Posted sales payment without dimension can be applied to posted Invoice in case of Discount, "Payment Disc. Debit Acc." with default dimension with "Value Posting" = "Same Code"
      Initialize;

      // [GIVEN] Customer with "Payment Disc. Debit Acc." = "A"
      // [GIVEN] Default Dimension "D" with "Value Posting" = "Same Code" is set for G/L Account "A"
      CustomerNo := CreateCustomer;
      GLAccountNo := CreateCustPostingGrPmtDiscDebitAccNo(CustomerNo);
      CreateDefaultDimensionGLAccSameValue(DimensionValue,GLAccountNo);

      // [GIVEN] Posted Sales Invoice with Amount Including VAT = 10000 and possible Discount = 2%. No dimension is set.
      CreateAndPostGenJnlLine(
        GenJournalLine,WORKDATE,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandIntInRange(1000,2000),CustomerNo,'');
      InvoiceDocumentNo := GenJournalLine."Document No.";
      PaymentAmount := -GenJournalLine.Amount + GenJournalLine.Amount * GetPmtTermsDiscountPct / 100;

      // [GIVEN] Posted Sales Payment with Amount = 9800. No dimension is set.
      CreateAndPostGenJnlLine(
        GenJournalLine,WORKDATE,GenJournalLine."Document Type"::Payment,
        PaymentAmount,GenJournalLine."Account No.",'');

      // [WHEN] Post Payment to Invoice application
      ApplyAndPostPaymentToInvoice(GenJournalLine."Document No.",InvoiceDocumentNo);

      // [THEN] Posted G/L Entry with "G/L Account No." = "A" has no Dimension ("Dimension Set ID" = 0).
      FindGLEntry(GLEntry,GenJournalLine."Document No.",GLAccountNo);
      Assert.AreEqual(0,GLEntry."Dimension Set ID",GLEntry.FIELDCAPTION("Dimension Set ID"))
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInCustomerPostingGroup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      ModifyGenJnlBatchNoSeries;
      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE ApplyAndPostPaymentToInvoice@20(PmtDocumentNo@1002 : Code[20];InvDocumentNo@1005 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.ApplyCustomerLedgerEntries(
        CustLedgerEntry."Document Type"::Payment,CustLedgerEntry."Document Type"::Invoice,
        PmtDocumentNo,InvDocumentNo);
    END;

    LOCAL PROCEDURE PostAndApplyGenLines@12(VAR GenJournalLine@1003 : Record 81;DueDate@1004 : Date) DocumentNo : Code[20];
    BEGIN
      // Setup: Create Invoice and Payment General Lines and Post them.
      CreateAndPostGenJnlLine(
        GenJournalLine,WORKDATE,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandInt(10000),CreateCustomer,'');
      DocumentNo := GenJournalLine."Document No.";
      CreateAndPostGenJnlLine(
        GenJournalLine,DueDate,GenJournalLine."Document Type"::Payment,-GenJournalLine.Amount,GenJournalLine."Account No.",'');

      // Exercise: Apply a Payment to Invoice.
      ApplyAndPostPaymentToInvoice(GenJournalLine."Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE CalcDueDateAndPaymentDiscount@23(VAR DueDate@1002 : Date;VAR PaymentDiscountPercent@1001 : Decimal);
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      // Calculate Due Date and Discount Percentage.
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      DueDate := CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE);
      PaymentDiscountPercent := PaymentTerms."Discount %";
    END;

    LOCAL PROCEDURE CreateCurrency@19(ApplnRoundingPrecision@1000 : Decimal) : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecision);
      Currency.MODIFY(TRUE);

      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@7() : Code[20];
    VAR
      PaymentTerms@1001 : Record 3;
      Customer@1000 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateAndPostGenJnlLine@3(VAR GenJournalLine@1002 : Record 81;PostingDate@1000 : Date;DocumentType@1001 : Option;Amount@1006 : Decimal;CustomerNo@1004 : Code[20];CurrencyCode@1005 : Code[10]);
    BEGIN
      CreateGenJnlLine(GenJournalLine,PostingDate,DocumentType,Amount,CustomerNo,CurrencyCode);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGenJnlLine@72(VAR GenJournalLine@1002 : Record 81;PostingDate@1000 : Date;DocumentType@1001 : Option;Amount@1006 : Decimal;CustomerNo@1004 : Code[20];CurrencyCode@1005 : Code[10]);
    VAR
      GenJournalBatch@1003 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostApplyGenJournalLine@35(VAR GenJournalLine@1004 : Record 81;DocumentType@1003 : Option;DocumentType2@1002 : Option;CurrencyCode@1001 : Code[10];Amount@1000 : Decimal;AppRounding@1007 : Decimal) DocumentNo : Code[20];
    VAR
      Customer@1005 : Record 18;
    BEGIN
      // Setup: Create Invoice Line and Post with Currency without Application Rounding then Payment Line with Currency
      // Application Rounding.
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostGenJnlLine(GenJournalLine,WORKDATE,DocumentType,Amount,Customer."No.",CurrencyCode);
      DocumentNo := GenJournalLine."Document No.";
      CreateAndPostGenJnlLine(
        GenJournalLine,WORKDATE,DocumentType2,-GenJournalLine.Amount + AppRounding,Customer."No.",CreateCurrency(AppRounding));
      LibraryERM.ApplyCustomerLedgerEntries(DocumentType2,DocumentType,GenJournalLine."Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithAppliesToID@268(VAR GenJnlLine@1000 : Record 81;AccType@1002 : Option;AccNo@1003 : Code[20];AppliesToID@1004 : Code[50]);
    VAR
      GenJnlBatch@1001 : Record 232;
    BEGIN
      WITH GenJnlLine DO BEGIN
        LibraryERM.SelectGenJnlBatch(GenJnlBatch);
        LibraryERM.CreateGeneralJnlLine(
          GenJnlLine,GenJnlBatch."Journal Template Name",GenJnlBatch.Name,"Document Type"::Payment,AccType,AccNo,0);
        "Applies-to ID" := AppliesToID;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithAppliesToDocNo@17(VAR GenJnlLine@1000 : Record 81;AccType@1002 : Option;AccNo@1003 : Code[20];AppliesToDocNo@1004 : Code[20]);
    VAR
      GenJnlBatch@1001 : Record 232;
    BEGIN
      WITH GenJnlLine DO BEGIN
        LibraryERM.SelectGenJnlBatch(GenJnlBatch);
        LibraryERM.CreateGeneralJnlLine(
          GenJnlLine,GenJnlBatch."Journal Template Name",GenJnlBatch.Name,"Document Type"::Payment,AccType,AccNo,0);
        "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
        "Applies-to Doc. No." := AppliesToDocNo;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateCashReceiptJnlLine@47(VAR GenJournalLine@1000 : Record 81;AccountNo@1001 : Code[20]);
    VAR
      GenJournalTemplate@1003 : Record 80;
      GenJournalBatch@1004 : Record 232;
    BEGIN
      WITH GenJournalTemplate DO BEGIN
        LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
        VALIDATE(Type,Type::"Cash Receipts");
        MODIFY(TRUE);
        LibraryERM.CreateGenJournalBatch(GenJournalBatch,Name);
      END;

      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,AccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,0);
    END;

    LOCAL PROCEDURE CreateDefaultDimensionGLAccSameValue@43(VAR DimensionValue@1000 : Record 349;GLAccountNo@1002 : Code[20]);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccountNo,DimensionValue."Dimension Code",DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Same Code");
      DefaultDimension.MODIFY;
    END;

    LOCAL PROCEDURE CreateCustPostingGrPmtDiscDebitAccNo@48(CustomerNo@1000 : Code[20]) : Code[20];
    VAR
      CustomerPostingGroup@1002 : Record 92;
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      CustomerPostingGroup.VALIDATE("Payment Disc. Debit Acc.",LibraryERM.CreateGLAccountNo);
      CustomerPostingGroup.MODIFY(TRUE);
      EXIT(CustomerPostingGroup."Payment Disc. Debit Acc.");
    END;

    LOCAL PROCEDURE PostInvoice@32(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGenJnlLine(
          GenJournalLine,WORKDATE,"Document Type"::Invoice,LibraryRandom.RandIntInRange(1000,2000),
          LibrarySales.CreateCustomerNo,'');
        VALIDATE("External Document No.",LibraryUtility.GenerateGUID);
        MODIFY(TRUE);
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;
    END;

    LOCAL PROCEDURE FindDetailedLedgerEntry@5(VAR DetailedCustLedgEntry@1002 : Record 379;DocumentNo@1000 : Code[20];EntryType@1001 : Option);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindOpenInvCustLedgEntry@265(VAR CustLedgEntry@1000 : Record 21);
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Applying Entry",FALSE);
        SETRANGE(Open,TRUE);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindGLEntry@37(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20];GLAccountNo@1002 : Code[20]);
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE SetAppliesToIDOnCustLedgEntry@25(VAR CustLedgEntry@1000 : Record 21);
    BEGIN
      CustLedgEntry."Applies-to ID" := LibraryUtility.GenerateGUID;
      CustLedgEntry.MODIFY;
    END;

    LOCAL PROCEDURE GetPmtTermsDiscountPct@53() : Decimal;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      EXIT(PaymentTerms."Discount %");
    END;

    LOCAL PROCEDURE ModifyGenJnlBatchNoSeries@10();
    VAR
      GenJnlBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJnlBatch);
      GenJnlBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJnlBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UnapplyCustLedgerEntry@21(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyCustomerLedgerEntry(CustLedgerEntry);
    END;

    LOCAL PROCEDURE VerifyApplnRoundingCustLedger@41(DocumentNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
      Assert@1004 : Codeunit 130000;
    BEGIN
      FindDetailedLedgerEntry(DetailedCustLedgEntry,DocumentNo,DetailedCustLedgEntry."Entry Type"::"Appln. Rounding");
      Assert.AreEqual(
        Amount,DetailedCustLedgEntry.Amount,
        STRSUBSTNO(WrongValErr,DetailedCustLedgEntry.FIELDCAPTION(Amount),Amount,DetailedCustLedgEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPaymentWithDiscount@6(DocumentNo@1007 : Code[20];Amount@1006 : Decimal);
    VAR
      CustLedgerEntry@1008 : Record 21;
      DetailedCustLedgEntry@1005 : Record 379;
    BEGIN
      // Select Customer Payment Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);

      // Verify Payment Discount.
      FindDetailedLedgerEntry(
        DetailedCustLedgEntry,CustLedgerEntry."Document No.",DetailedCustLedgEntry."Entry Type"::"Payment Discount");
      CustLedgerEntry.TESTFIELD(Open);
      DetailedCustLedgEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyPaymentWithoutDiscount@27(DocumentNo@1001 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      // If Payment is made after Due Date, verify "Original Pmt Disc. Possible" equal to zero and "Open" must be FALSE in the Customer
      // Ledger Entry.

      // Select Customer Payment Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);

      // Verify Payment Discount.
      CustLedgerEntry.TESTFIELD(Open,FALSE);
      CustLedgerEntry.TESTFIELD("Original Pmt. Disc. Possible",0);
    END;

    LOCAL PROCEDURE VerifyUnapplyPaymentDiscount@24(DocumentNo@1000 : Code[20]);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      // Verify "Original Pmt Disc. Possible" and "Remaining Pmt. Disc. Possible" should be equal in the Customer Ledger Entry.

      // Select Customer Invoice Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);

      // Verify Unapply Payment Discount.
      CustLedgerEntry.CALCFIELDS("Original Amount","Original Amt. (LCY)","Remaining Amount","Remaining Amt. (LCY)");
      CustLedgerEntry.TESTFIELD("Original Amount",CustLedgerEntry."Remaining Amount");
      CustLedgerEntry.TESTFIELD("Original Amt. (LCY)",CustLedgerEntry."Remaining Amt. (LCY)");
      CustLedgerEntry.TESTFIELD("Original Pmt. Disc. Possible",CustLedgerEntry."Remaining Pmt. Disc. Possible");
    END;

    LOCAL PROCEDURE VerifyGLEntry@33(DocumentNo@1000 : Code[20];CurrencyCode@1001 : Code[10];DocumentType@1003 : Option;Amount@1004 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
      Currency@1005 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount / 2,LibraryERM.ConvertCurrency(Amount,'',CurrencyCode,WORKDATE),Currency."Amount Rounding Precision",
        'Amount must be equal');
    END;

    LOCAL PROCEDURE VerifyExtDocNoAmount@30(GenJournalLine@1000 : Record 81;ExpectedExtDocNo@1002 : Code[35];ExpectedAmount@1001 : Decimal);
    BEGIN
      WITH GenJournalLine DO BEGIN
        FIND;
        Assert.AreEqual(
          ExpectedExtDocNo,"Applies-to Ext. Doc. No.",
          STRSUBSTNO(WrongValErr,FIELDCAPTION("Applies-to Ext. Doc. No."),ExpectedExtDocNo,TABLECAPTION));
        Assert.AreEqual(
          ExpectedAmount,Amount,
          STRSUBSTNO(WrongValErr,FIELDCAPTION(Amount),ExpectedAmount,TABLECAPTION));
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustomerEntriesModalPageHandler@91(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateListModalPageHandler@15(VAR GeneralJournalTemplateList@1000 : TestPage 250);
    BEGIN
      GeneralJournalTemplateList.GOTOKEY(LibraryVariableStorage.DequeueText);
      GeneralJournalTemplateList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Sales]
      Unsupported version tags:
      ES: Unable to Execute
      IT: Failures due to localization in Payment Terms table

      Test for Apply and Unapply Customer Payment Discount:
        1. Create General Journal Line for Customer, Post and Validate Customer Ledger Entry and Detailed Customer Ledger Entry for
           Payment Discount(Amount and "Amount LCY") field.
        2. Create General Journal Line for Customer, Post and Validate "Original Pmt. Disc. Possible" and "Open" field for Payment line in
           Customer Ledger Entry.
        3. Create General Journal Line for Customer, Post and Validate "Original Pmt. Disc. Possible" and "Open" field for Payment line in
           Customer Ledger Entry.
        4. Check Application Rounding Entry in Detailed Customer Ledger Entry with Apply and Unapply Invoice and
           Payment with Random Values.
        5. Check Application Rounding Entry in Detailed Customer Ledger Entry with Apply and Unapply Credit Memo and Refund
           with Random Values.
        6. Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
           with Apply and Unapply Invoice and Payment with Random Values and Additional Reporting Currency in General ledger setup.
        7. Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
           with Apply and Unapply Credit Memo and Refund with Random Values and Additional Reporting Currency in General ledger setup.
        8. Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
           with Apply already Unapplied Invoice and Payment with Random Values.
        9. Check Application Rounding Entry in Detailed Customer Ledger Entry and Additional Currency Amount in G/L Entry
           with Apply already Unapplied Credit Memo and Refund with Random Values.
        10.Verify Error when Unapply Entry of the type Appln. Rounding from Detailed Customer Ledger Entry.
        11. Applies-to ID is cleared from Customer Ledger Entry when change value of General Journal Line
        12. Applies-to ID is cleared from Customer Ledger Entry when delete General Journal Line
        13. Customer Ledger Entry "Amount-to Apply" = 0 when blank "Applies-to Doc. No." field in General Journal Line
        14. Customer Ledger Entry "Amount-to Apply" = 0 when delete General Journal Line with "Applies-to Doc. No."

      For Unapply there are no TFS test IDs related to this suite. Suite ID refers to same scenarios of apply.
      This test code unit replaces Manual Test Suite:

      Covers Test Cases for TFS_TS_ID = 101529 and 103425
        ----------------------------------------------------------------
        Test Function Name                     TFS ID
        ----------------------------------------------------------------
        TestPmntDiscWithinDueDate           TFS_TC_ID=4218 and 4823
        TestPmntDiscAfterDueDate            TFS_TC_ID=4219 and 4824
        TestUnapplyPmntDisc                 TFS_TC_ID=8334 and 4825,TFS_TC_ID=8335 and 4826

      Covers Test Cases for WI - 237105
        ----------------------------------------------------------------
        Test Function Name                     TFS ID
        ----------------------------------------------------------------
        ApplnRoundingForInvoice                126102 to 126111
        ApplnRoundingForCreditMemo             126102,126112 to 126120

      Covers Test Cases for WI - 237586
        ----------------------------------------------------------------
        Test Function Name                     TFS ID
        ----------------------------------------------------------------
        UnapplyPmntAdditionalCurr             126478, 126479
        UnapplyRefAdditionalCurr              126478, 126485
        UnapplyApplyPmntAdditionalCurr        126478, 126480
        UnapplyApplyRefAdditionalCurr         126478, 126486
        UnapplyPmntApplnRoundingError         126478, 126482

        ClearAppliesToIDFromCustLedgEntryWhenChangeValueOnGenJnlLine,
        ClearAppliesToIDFromCustLedgEntryWhenDeleteGenJnlLine            118226
        ClearAppliesToDocNoValueFromGenJnlLine,
        DeleteGenJnlLineWithAppliesToDocNo                               361358

      Covers Test Cases for WI - 126711
        --------------------------------------------------------------------------------------------
        Test Function Name                     TFS ID
        --------------------------------------------------------------------------------------------
        VerifyAmountApplToExtDocNoWhenSetValue                                               126711
        VerifyAmountApplToExtDocNoWhenLookUp                                                 126711
    }
    END.
  }
}

