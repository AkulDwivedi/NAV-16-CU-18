OBJECT Codeunit 137154 SCM Warehouse Management II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1020 : Record 82;
      ItemJournalBatch@1019 : Record 233;
      LotItemTrackingCode@1015 : Record 6502;
      LocationBlack@1016 : Record 14;
      LocationBlue@1031 : Record 14;
      LocationGreen@1041 : Record 14;
      LocationIntransit@1035 : Record 14;
      LocationRed@1032 : Record 14;
      LocationSilver@1018 : Record 14;
      LocationWhite@1010 : Record 14;
      LocationYellow@1008 : Record 14;
      LocationOrange@1053 : Record 14;
      ConsumptionItemJournalTemplate@1045 : Record 82;
      ConsumptionItemJournalBatch@1044 : Record 233;
      OutputItemJournalTemplate@1043 : Record 82;
      OutputItemJournalBatch@1042 : Record 233;
      PhysicalInventoryItemJournalTemplate@1024 : Record 82;
      PhysicalInventoryItemJournalBatch@1023 : Record 233;
      WarehouseJournalTemplate@1026 : Record 7309;
      WarehouseJournalBatch@1025 : Record 7310;
      Assert@1009 : Codeunit 130000;
      LibraryWarehouse@1007 : Codeunit 132204;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryItemTracking@1051 : Codeunit 130502;
      LibrarySales@1005 : Codeunit 130509;
      LibraryService@1014 : Codeunit 131902;
      LibraryManufacturing@1027 : Codeunit 132202;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryVariableStorage@1001 : Codeunit 131004;
      LibrarySetupStorage@1011 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      BinContentMustBeEmpty@1022 : TextConst 'ENU=Bin Content must be empty.';
      ExpiredItemMessage@1013 : TextConst 'ENU=There is nothing to handle. \\Some items were not included in the pick due to their expiration date.';
      PickCreated@1021 : TextConst 'ENU=Number of Invt. Pick activities created';
      QuantityMustBeSame@1017 : TextConst 'ENU=Quantity must be same.';
      ActionTypeOnWarehouseActivity@1029 : TextConst '@@@="%1 = Action Type Value, %2 = Activity Type Value, %3 = No. Value, %4 = Line No. Value, %5 = Action Type Value";ENU="Action Type must be equal to ''%1''  in Warehouse Activity Line: Activity Type=%2, No.=%3, Line No.=%4. Current value is ''%5''."';
      MustBeEmpty@1030 : TextConst 'ENU=%1 must be empty.';
      TransferOrderDeleted@1034 : TextConst '@@@="%1 = Transfer Order No.";ENU=The transfer order %1 has been deleted';
      LotNumberRequiredForItem@1033 : TextConst '@@@=%1 - Item No.;ENU=You must assign a lot number for item %1';
      UndoConfirmMessage@1040 : TextConst 'ENU="Do you really want to undo the selected "';
      PickedConfirmMessage@1039 : TextConst 'ENU=The items have been picked.';
      UndoErrorMessage@1038 : TextConst 'ENU=You cannot undo line %1 because warehouse activity lines have already been posted.';
      ReservedQuantityError@1037 : TextConst '@@@="%1 = Entry No., %2 = Quantity";ENU="Reserved Quantity must be equal to ''0''  in Item Ledger Entry: Entry No.=%1. Current value is ''%2''."';
      CancelReservationConfirmMessage@1036 : TextConst 'ENU=Do you want to cancel all reservations in the %1?';
      GetSourceDocErr@1046 : TextConst 'ENU=%1 source documents were not included because the customer is blocked.';
      CheckShipmentLineErr@1047 : TextConst 'ENU=Expect shipment line from Source No. %1 exist: %2, contrary to actual result';
      CheckReceiptLineErr@1050 : TextConst 'ENU=Expect Receipt Linefrom Source No. %1 exist: %2, contrary to actual result';
      ShipmentLinesNotCreatedErr@1048 : TextConst 'ENU=There are no Warehouse Shipment Lines created.';
      ReceiptLinesNotCreatedErr@1049 : TextConst 'ENU=There are no Warehouse Receipt Lines created.';
      ItemTrackingMode@1054 : ' ,Assign Lot No.,Assign Multiple Lot No.,Assign Serial No.,Assign Lot And Serial,Select Entries,Blank Quantity Base,Assign Lot No. & Expiration Date';

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWarehouseShipmentReserveAgainstPurchaseOrder@3();
    BEGIN
      // Setup.
      Initialize;
      PickFromWarehouseShipmentReserveAgainstPurchaseOrderAndAvailableInventory(FALSE);  // Reserve against only Purchase Order.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWarehouseShipmentReserveAgainstBothPurchaseOrderAndAvailableInventory@13();
    BEGIN
      // Setup.
      Initialize;
      PickFromWarehouseShipmentReserveAgainstPurchaseOrderAndAvailableInventory(TRUE);  // Reserve against both Purchase Order and Available Inventory.
    END;

    LOCAL PROCEDURE PickFromWarehouseShipmentReserveAgainstPurchaseOrderAndAvailableInventory@1(ReserveAgainstBothPurchaseOrderAndAvailableInventory@1003 : Boolean);
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1004 : Record 38;
      PurchaseLine@1002 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseShipmentHeader@1009 : Record 7320;
      OldAlwaysCreatePickLine@1008 : Boolean;
      ReservationMode@1012 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line';
      Quantity@1010 : Decimal;
      Quantity2@1011 : Decimal;
    BEGIN
      // Update Always Create Pick Line on Location. Create and register Put Away from Purchase Order. Create and release another Purchase Order. Create and release Sales Order.
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,TRUE);
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(100,2);  // Value required for test.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',Quantity2,WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndReleasePurchaseOrder(
        PurchaseHeader2,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',Quantity,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),FALSE);  // Value required for test. Tracking as False.
      LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From Current Line");  // Enqueue for ReservationPageHandler.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',Quantity,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',PurchaseLine."Expected Receipt Date"),TRUE,FALSE);  // Value required for test.

      // Exercise: Create Pick for Quantity reserved against Purchase Order.
      CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);

      // Verify.
      SalesLine.FIND;
      VerifyReservationEntry(Item."No.",DATABASE::"Purchase Line",PurchaseHeader2."No.",Quantity);
      VerifyPickLine(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.",Quantity);
      VerifyPickLine(WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.",Quantity);

      IF ReserveAgainstBothPurchaseOrderAndAvailableInventory THEN BEGIN
        // Exercise: Create Pick for Quantity reserved against both Purchase Order and Item Ledger Entry.
        DeletePick(SalesHeader."No.");
        ReopenAndDeleteWarehouseShipment(WarehouseShipmentHeader);
        LibrarySales.ReopenSalesDocument(SalesHeader);
        LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From First Line");  // Enqueue for ReservationPageHandler.
        UpdateQuantityOnSalesLineAndReserve(SalesLine,Quantity + Quantity2);  // Value required for test.
        LibrarySales.ReleaseSalesDocument(SalesHeader);
        CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);

        // Verify.
        VerifyReservationEntry(Item."No.",DATABASE::"Purchase Line",PurchaseHeader2."No.",Quantity);
        VerifyReservationEntry(Item."No.",DATABASE::"Item Ledger Entry",'',Quantity2);
        VerifyPickLine(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.",Quantity + Quantity2);  // Value required for test.
        VerifyPickLine(WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.",Quantity + Quantity2);  // Value required for test.
      END;

      // Tear down.
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,OldAlwaysCreatePickLine);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetWithReservationBeforeUpdateQuantityToHandle@12();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetWithReservation(FALSE);  // Without Update Quantity to Handle on Pick Worksheet.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetWithReservationAfterUpdateQuantityToHandle@14();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetWithReservation(TRUE);  // With Update Quantity to Handle on Pick Worksheet.
    END;

    LOCAL PROCEDURE AvailableQuantityToPickOnPickWorksheetWithReservation@5(UpdateQuantityToHandle@1012 : Boolean);
    VAR
      Bin@1010 : Record 7354;
      Item@1009 : Record 27;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1007 : Record 39;
      SalesHeader@1006 : Record 36;
      SalesHeader2@1011 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentHeader2@1013 : Record 7320;
      WhseWorksheetName@1002 : Record 7327;
      ReservationMode@1014 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line';
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
    BEGIN
      // Create and register Put Away from Purchase Order. Create and release Warehouse Shipment from Sales Order with partially reserved Quantity.
      // Create and release another Warehouse Shipment from Sales Order with fully reserved Quantity.
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(100,2);  // Value required for test.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',Quantity + Quantity2,WORKDATE,FALSE);  // Value required for test. Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.
      UpdateBinOnPutAwayAndRegisterPutAway(Bin,LocationWhite.Code,PurchaseHeader."No.");
      LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From Current Line");  // Enqueue for ReservationPageHandler.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',Quantity,WORKDATE,TRUE,FALSE);  // Reserve as True and Tracking as False.
      UpdateQuantityBaseOnReservationEntry(Item."No.");
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesHeader);
      LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From Current Line");  // Enqueue for ReservationPageHandler.
      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine,Item."No.",LocationWhite.Code,'',Quantity2,WORKDATE,TRUE,FALSE);  // Reserve as True and Tracking as False.
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader2,SalesHeader2);

      // Exercise.
      GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);

      // Verify.
      VerifyWarehouseWorksheetLine(WhseWorksheetName,WarehouseShipmentHeader."No.",Item."No.",Quantity,Quantity,Quantity);
      VerifyWarehouseWorksheetLine(WhseWorksheetName,WarehouseShipmentHeader2."No.",Item."No.",Quantity2,Quantity2,Quantity2);

      IF UpdateQuantityToHandle THEN BEGIN
        // Exercise.
        UpdateQuantityToHandleOnWarehouseWorksheetLine(WhseWorksheetName,WarehouseShipmentHeader."No.",Item."No.",Quantity / 2);  // Value required for test.

        // Verify.
        VerifyWarehouseWorksheetLine(WhseWorksheetName,WarehouseShipmentHeader."No.",Item."No.",Quantity,Quantity / 2,Quantity);  // Value required for test.
        VerifyWarehouseWorksheetLine(
          WhseWorksheetName,WarehouseShipmentHeader2."No.",Item."No.",Quantity2,Quantity2,Quantity2 + Quantity / 2);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PickFromPickWorksheetWithExpiredItem@16();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      StrictExpirationLotItemTrackingCode@1006 : Record 6502;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      WarehouseShipmentHeader@1009 : Record 7320;
      WhseWorksheetName@1010 : Record 7327;
      LotNo@1001 : Code[20];
      OldPickAccordingToFEFO@1011 : Boolean;
    BEGIN
      // Setup: Update Pick According to FEFO on Location. Create Item with Strict Expiration Posting Item Tracking Code. Create and register Put Away from Purchase Order.
      // Create and release Warehouse Shipment from Sales Order. Get Warehouse Document on Pick Worksheet.
      Initialize;
      OldPickAccordingToFEFO := UpdatePickAccordingToFEFOOnLocation(LocationWhite,TRUE);
      CreateItemTrackingCode(StrictExpirationLotItemTrackingCode,FALSE,TRUE,TRUE);  // Lot With Strict Expiration Posting Item Tracking.
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',StrictExpirationLotItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,TRUE);  // Tracking as True.
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      UpdateExpirationDateReservationEntry(Item."No.");
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.
      UpdateBinOnPutAwayAndRegisterPutAway(Bin,LocationWhite.Code,PurchaseHeader."No.");
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',PurchaseLine.Quantity,WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesHeader);
      GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);

      // Exercise.
      ASSERTERROR CreatePickFromPickWorksheetLine(WhseWorksheetName,WarehouseShipmentHeader."No.",Item."No.");

      // Verify.
      Assert.ExpectedError(ExpiredItemMessage);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO);
    END;

    [Test]
    PROCEDURE PickFromPickWorksheetOnlyForRegisteredPutAwayWithAlwaysReserveItem@20();
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseHeader2@1007 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseShipmentHeader@1010 : Record 7320;
      WhseWorksheetName@1011 : Record 7327;
      Quantity@1001 : Decimal;
      Quantity2@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Reserve as Always. Create and register Put Away from Purchase Order. Create Put Away from another Purchase Order.
      // Create and release Warehouse Shipment from Sales Order. Get Warehouse Document on Pick Worksheet.
      Initialize;
      LibraryInventory.CreateItem(Item);
      UpdateReserveOnItemAsAlways(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(100,2);  // Value required for test.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',Quantity,WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.
      UpdateBinOnPutAwayAndRegisterPutAway(Bin,LocationWhite.Code,PurchaseHeader."No.");
      CreateAndReleasePurchaseOrder(PurchaseHeader2,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',Quantity2,WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader2,FALSE);  // Tracking as False.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',PurchaseLine.Quantity + Quantity2,WORKDATE,FALSE,FALSE);  // Value required for test. Reserve as False and Tracking as False.
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesHeader);
      GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);

      // Exercise.
      CreatePickFromPickWorksheetLine(WhseWorksheetName,WarehouseShipmentHeader."No.",Item."No.");

      // Verify.
      VerifyPickLine(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.",Quantity);
      VerifyPickLine(WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE RegisterPickAgainstAvailableQuantityOnDifferentBinWithDifferentLot@17();
    VAR
      Bin@1001 : Record 7354;
      Bin2@1002 : Record 7354;
      Bin3@1007 : Record 7354;
      Item@1000 : Record 27;
      RegisteredWhseActivityLine@1006 : Record 5773;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1005 : Record 7320;
      LotNo@1008 : Code[20];
      LotNo2@1009 : Code[20];
      LotNo3@1010 : Code[20];
      Quantity@1012 : Decimal;
      Quantity2@1013 : Decimal;
    BEGIN
      // Setup: Create Item with Lot Item Tracking. Update Inventory on different Bin. Create and release Sales Order. Create Pick from Warehouse Shipment.
      Initialize;
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',LotItemTrackingCode.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(100,2);  // Value required for test.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");
      CreateAndPostItemJournalLineWithNewBinUsingItemTracking(Bin,LotNo,Item."No.",LocationBlack.Code,Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");
      CreateAndPostItemJournalLineWithNewBinUsingItemTracking(Bin2,LotNo2,Item."No.",LocationBlack.Code,Quantity2);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");
      CreateAndPostItemJournalLineWithNewBinUsingItemTracking(
        Bin3,LotNo3,Item."No.",LocationBlack.Code,Quantity2 + LibraryRandom.RandDec(100,2)); // Value required for test.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlack.Code,'',Quantity2,WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);

      // Exercise.
      UpdateBinQuantityToHandleAndLotNoOnPickAndRegisterPick(Bin2,SalesHeader."No.",Quantity2 / 2,LotNo2);  // Value required for test.
      UpdateBinQuantityToHandleAndLotNoOnPickAndRegisterPick(Bin3,SalesHeader."No.",Quantity2 / 2,LotNo3);  // Value required for test.

      // Verify : Value required for Quantity as Quantity2 / 2.
      VerifyRegisteredPickLine(
        RegisteredWhseActivityLine."Action Type"::Take,RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        Bin2,Item."No.",'',Item."Base Unit of Measure",LotNo2,Quantity2 / 2,FALSE);
      VerifyRegisteredPickLine(
        RegisteredWhseActivityLine."Action Type"::Place,RegisteredWhseActivityLine."Source Document"::"Sales Order",
        SalesHeader."No.",Bin,Item."No.",'',Item."Base Unit of Measure",LotNo2,Quantity2 / 2,FALSE);
      VerifyRegisteredPickLine(
        RegisteredWhseActivityLine."Action Type"::Take,RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        Bin3,Item."No.",'',Item."Base Unit of Measure",LotNo3,Quantity2 / 2,FALSE);
      VerifyRegisteredPickLine(
        RegisteredWhseActivityLine."Action Type"::Place,RegisteredWhseActivityLine."Source Document"::"Sales Order",
        SalesHeader."No.",Bin,Item."No.",'',Item."Base Unit of Measure",LotNo3,Quantity2 / 2,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PutAwayFromWarehouseReceiptWithItemPurchaseUOMUsingMultipleLots@18();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentWithItemPurchaseUOMUsingMultipleLots(FALSE,FALSE);  // RegisterPutAway as False and RegisterPick as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE RegisterPutAwayFromWarehouseReceiptWithItemPurchaseUOMUsingMultipleLots@84();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentWithItemPurchaseUOMUsingMultipleLots(TRUE,FALSE);  // RegisterPutAway as True and RegisterPick as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterPickFromWarehouseShipmentWithItemPurchaseUOMUsingMultipleLots@85();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentWithItemPurchaseUOMUsingMultipleLots(TRUE,TRUE);  // RegisterPutAway as True and RegisterPick as True.
    END;

    LOCAL PROCEDURE RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentWithItemPurchaseUOMUsingMultipleLots@76(RegisterPutAway@1017 : Boolean;RegisterPick@1018 : Boolean);
    VAR
      Bin@1016 : Record 7354;
      Bin2@1015 : Record 7354;
      Bin3@1014 : Record 7354;
      Item@1013 : Record 27;
      ItemLedgerEntry@1004 : Record 32;
      ItemUnitOfMeasure@1012 : Record 5404;
      PurchaseHeader@1011 : Record 38;
      PurchaseLine@1010 : Record 39;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseEntry@1006 : Record 7312;
      WarehouseShipmentHeader@1005 : Record 7320;
      OldPickAccordingToFEFO@1003 : Boolean;
      LotNo@1001 : Code[20];
      LotNo2@1000 : Code[20];
    BEGIN
      // Update Pick According to FEFO on Location. Create Item with Lot Item Tracking. Create Item Purchase Unit of Measure. Create and release Purchase Order with multiple Lot No.
      OldPickAccordingToFEFO := UpdatePickAccordingToFEFOOnLocation(LocationWhite,TRUE);
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',LotItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Multiple Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,TRUE);  // Tracking as True.
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      GetLotNoFromItemTrackingLinesPageHandler(LotNo2);

      // Exercise.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.

      // Verify.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",LotNo,
        PurchaseLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure" / 2);  // Value required for test.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",LotNo2,
        PurchaseLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure" / 2);  // Value required for test.

      IF RegisterPutAway THEN BEGIN
        // Exercise.
        UpdateBinOnPutAwayAndRegisterPutAway(Bin,LocationWhite.Code,PurchaseHeader."No.");

        // Verify.
        Bin2.GET(LocationWhite.Code,LocationWhite."Receipt Bin Code");  // Find RECEIVE Bin.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::"Positive Adjmt.",Bin2,Item."No.",ItemUnitOfMeasure.Code,LotNo,PurchaseLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::"Positive Adjmt.",Bin2,Item."No.",ItemUnitOfMeasure.Code,LotNo2,PurchaseLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin2,Item."No.",ItemUnitOfMeasure.Code,LotNo,-PurchaseLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin2,Item."No.",ItemUnitOfMeasure.Code,LotNo2,-PurchaseLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin,Item."No.",ItemUnitOfMeasure.Code,LotNo,PurchaseLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin,Item."No.",ItemUnitOfMeasure.Code,LotNo2,PurchaseLine.Quantity / 2);  // Value required for test.
      END;

      IF RegisterPick THEN BEGIN
        // Exercise.
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        CreateAndReleaseSalesOrder(
          SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',
          PurchaseLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",WORKDATE,FALSE,TRUE);  // Value required for test. Reserve as False and Tracking as True.
        CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        Bin3.GET(LocationWhite.Code,LocationWhite."Shipment Bin Code");  // Find SHIP Bin.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin3,Item."No.",Item."Base Unit of Measure",LotNo,SalesLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin3,Item."No.",Item."Base Unit of Measure",LotNo2,SalesLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin,Item."No.",Item."Base Unit of Measure",LotNo,SalesLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin,Item."No.",Item."Base Unit of Measure",LotNo2,SalesLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin,Item."No.",ItemUnitOfMeasure.Code,LotNo,PurchaseLine.Quantity / 2);  // Value required for test.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Bin,Item."No.",ItemUnitOfMeasure.Code,LotNo2,PurchaseLine.Quantity / 2);  // Value required for test.
      END;

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO);
    END;

    [Test]
    PROCEDURE RegisterPutAwayFromWarehouseReceiptWithLocationBinMandatoryAsFalse@25();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse(FALSE,FALSE);  // RegisterPick as False and PostWarehouseShipment as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE RegisterPickFromWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse@74();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse(TRUE,FALSE);  // RegisterPick as True and PostWarehouseShipment as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE QuantityAllocatedInWarehouseAfterPostWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse@77();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse(TRUE,TRUE);  // RegisterPick as True and PostWarehouseShipment as True.
    END;

    LOCAL PROCEDURE RegisterPutAwayFromWarehouseReceiptAndPickFromWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse@69(RegisterPick@1009 : Boolean;PostWarehouseShipment@1010 : Boolean);
    VAR
      Item@1008 : Record 27;
      ItemLedgerEntry@1011 : Record 32;
      PurchaseHeader@1007 : Record 38;
      PurchaseHeader2@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
      ReservationMode@1000 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line';
    BEGIN
      // Create and release Purchase Order. Create and post Warehouse Receipt from Purchase Order.
      LibraryInventory.CreateItem(Item);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationYellow.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",'',PurchaseLine.Quantity);
      VerifyRegisteredWarehouseActivityLine(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",LocationYellow.Code,Item."No.",PurchaseLine.Quantity);

      IF RegisterPick THEN BEGIN
        // Exercise.
        CreateAndReleasePurchaseOrder(
          PurchaseHeader2,PurchaseLine,Item."No.",'','',LocationYellow.Code,'',PurchaseLine.Quantity,WORKDATE,FALSE);  // Tracking as False.
        CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader2,FALSE);  // Tracking as False.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader2."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");
        LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From First Line");  // Enqueue for ReservationPageHandler.
        CreateAndReleaseSalesOrder(
          SalesHeader,SalesLine,Item."No.",LocationYellow.Code,'',PurchaseLine.Quantity + PurchaseLine.Quantity / 2,WORKDATE,TRUE,
          FALSE);  // Value required for test. Reserve as True and Tracking as False.
        CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
        UpdateQuantityToHandleAndLotNoOnPickLines(
          WarehouseActivityLine."Activity Type"::Pick,SalesHeader."No.",PurchaseLine.Quantity,'');
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyRegisteredWarehouseActivityLine(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          LocationYellow.Code,Item."No.",PurchaseLine.Quantity);
      END;

      IF PostWarehouseShipment THEN BEGIN
        // Exercise.
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);  // Post as Ship and Invoice.

        // Verify : Verify Quantity allocated in Warehouse and verification performed into ReservationPageHandler.
        LibraryVariableStorage.Enqueue(ReservationMode::"Verify Reserve Line");  // Enqueue for ReservationPageHandler.
        LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);  // Enqueue for ReservationPageHandler.
        LibraryVariableStorage.Enqueue(PurchaseLine.Quantity / 2);
        LibraryVariableStorage.Enqueue(PurchaseLine.Quantity / 2);
        SalesLine.ShowReservation;
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE PostRemainingInventoryPickAfterPostingPartialInventoryPickFromSalesOrderWithLotItemTracking@28();
    VAR
      Bin@1004 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1009 : Record 5767;
      LotNo@1008 : Code[20];
    BEGIN
      // Setup: Create Item with Lot Item Tracking. Create and release Purchase Order. Post Purchase Order as Receive and Invoice. Create and release Sales Order.
      // Create Inventory Pick from Sales Order. Post Inventory Pick with partial Quantity and Lot No.
      Initialize;
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',LotItemTrackingCode.Code);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationSilver.Code,Bin.Code,LibraryRandom.RandDec(100,2),WORKDATE,TRUE);  // Tracking as True.
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post Receive and Invoice.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationSilver.Code,Bin.Code,PurchaseLine.Quantity,WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      LibraryVariableStorage.Enqueue(PickCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);  // Use True for Pick.
      UpdateQuantityToHandleAndLotNoOnPickLines(
        WarehouseActivityLine."Activity Type"::"Invt. Pick",SalesHeader."No.",PurchaseLine.Quantity / 2,LotNo);  // Value required for test.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Ship.

      // Exercise: Post remaining Inventory Pick.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Ship.

      // Verify.
      VerifyPostedInventoryPickLines(Bin,SalesHeader."No.",Item."No.",LotNo,PurchaseLine.Quantity);
    END;

    [Test]
    PROCEDURE EmptyBinContentAfterPostingItemJournal@29();
    BEGIN
      // Setup.
      Initialize;
      CalculatePhysicalInventoryAfterPostingItemJournalWithBin(FALSE);  // Calculate Physical Inventory as False.
    END;

    [Test]
    PROCEDURE CalculatePhysicalInventoryForItemWithEmptyBinContent@111();
    BEGIN
      // Setup.
      Initialize;
      CalculatePhysicalInventoryAfterPostingItemJournalWithBin(TRUE);  // Calculate Physical Inventory as True.
    END;

    LOCAL PROCEDURE CalculatePhysicalInventoryAfterPostingItemJournalWithBin@104(CalculatePhysicalInventory@1000 : Boolean);
    VAR
      Bin@1004 : Record 7354;
      BinContent@1003 : Record 7302;
      Item@1002 : Record 27;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Create Item, Bin and Bin Content.
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateBinContent(BinContent,Bin,Item);

      // Exercise.
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2),
        Bin."Location Code",Bin.Code);
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",ItemJournalLine.Quantity,Bin."Location Code",
        Bin.Code);

      // Verify: Verify empty Bin Content.
      FindBinContent(BinContent,Bin,Item."No.");
      Assert.IsTrue(BinContent.ISEMPTY,BinContentMustBeEmpty);

      IF CalculatePhysicalInventory THEN BEGIN
        // Exercise.
        CalculateInventoryOnPhysicalInventoryJournal(ItemJournalLine,Item,LocationSilver.Code);

        // Verify.
        VerifyItemJournalLine(ItemJournalLine,Bin,Item."No.",0);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PurchaseUOMConversionOnMovementUsingMultipleLots@36();
    VAR
      Bin@1002 : Record 7354;
      Item@1012 : Record 27;
      ItemUnitOfMeasure@1011 : Record 5404;
      PurchaseHeader@1010 : Record 38;
      PurchaseLine@1009 : Record 39;
      WarehouseActivityLine@1004 : Record 5767;
      WhseWorksheetLine@1003 : Record 7326;
      LotNo@1001 : Code[20];
      LotNo2@1000 : Code[20];
    BEGIN
      // Setup: Create Item with Lot Item Tracking. Create Item Purchase Unit of Measure. Create and release Purchase Order. Create and register Put Away from Warehouse Receipt. Get Bin Content on Movement Worksheet.
      Initialize;
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',LotItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,TRUE);  // Tracking as True.
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      GetLotNoFromItemTrackingLinesPageHandler(LotNo2);
      UpdateBinOnPutAwayAndRegisterPutAway(Bin,LocationWhite.Code,PurchaseHeader."No.");
      GetBinContentOnMovementWorksheet(WhseWorksheetLine,LocationWhite.Code,Item."No.");

      // Exercise.
      CreateMovement(WhseWorksheetLine,Item."No.");

      // Verify.
      VerifyMovementLine(
        WarehouseActivityLine."Action Type"::Take,WhseWorksheetLine."Worksheet Template Name",Item."No.",
        ItemUnitOfMeasure.Code,LotNo,Bin."Location Code",Bin."Zone Code",Bin.Code,PurchaseLine.Quantity / 2);
      VerifyMovementLine(
        WarehouseActivityLine."Action Type"::Place,WhseWorksheetLine."Worksheet Template Name",Item."No.",
        ItemUnitOfMeasure.Code,LotNo,Bin."Location Code",'','',PurchaseLine.Quantity / 2);
      VerifyMovementLine(
        WarehouseActivityLine."Action Type"::Take,WhseWorksheetLine."Worksheet Template Name",Item."No.",
        ItemUnitOfMeasure.Code,LotNo2,Bin."Location Code",Bin."Zone Code",Bin.Code,PurchaseLine.Quantity / 2);
      VerifyMovementLine(
        WarehouseActivityLine."Action Type"::Place,WhseWorksheetLine."Worksheet Template Name",Item."No.",
        ItemUnitOfMeasure.Code,LotNo2,Bin."Location Code",'','',PurchaseLine.Quantity / 2);
    END;

    [Test]
    PROCEDURE CreatePickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant@35();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant(FALSE);  // RegisterPick as False.
    END;

    [Test]
    PROCEDURE RegisterPickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant@98();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant(TRUE);  // RegisterPick as True.
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant@68(RegisterPick@1014 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      Bin2@1011 : Record 7354;
      Bin3@1010 : Record 7354;
      Item@1009 : Record 27;
      ItemVariant@1008 : Record 5401;
      WarehouseActivityLine@1005 : Record 5767;
      WhseInternalPickHeader@1004 : Record 7333;
      WhseWorksheetLine@1003 : Record 7326;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
    BEGIN
      // Create Item with Item Variant. Update Inventory for Item with Variant. Create and register Movement.
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := LibraryRandom.RandDec(100,2);
      FindBin(Bin,LocationWhite.Code);
      LibraryWarehouse.CreateBin(Bin2,Bin."Location Code",LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      UpdateInventoryUsingWarehouseJournal(Bin,Item,ItemVariant.Code,Item."Base Unit of Measure",Quantity + Quantity2);  // Value required for test.
      LibraryWarehouse.CreateMovementWorksheetLine(WhseWorksheetLine,Bin,Bin2,Item."No.",ItemVariant.Code,Quantity);
      CreateAndRegisterMovement(WhseWorksheetLine,Item."No.");
      Bin3.GET(LocationWhite.Code,LocationWhite."Open Shop Floor Bin Code");

      // Exercise.
      CreatePickFromWarehouseInternalPick(WhseInternalPickHeader,Bin3,Item."No.",ItemVariant.Code,Quantity + Quantity2);  // Value required for test.

      // Verify.
      VerifyPickLineWithBin(
        Bin2,WarehouseActivityLine."Action Type"::Take,WhseInternalPickHeader."No.",Item."No.",ItemVariant.Code,
        Item."Base Unit of Measure",Quantity,FALSE);
      VerifyPickLineWithBin(
        Bin3,WarehouseActivityLine."Action Type"::Place,WhseInternalPickHeader."No.",Item."No.",ItemVariant.Code,
        Item."Base Unit of Measure",Quantity,FALSE);
      VerifyPickLineWithBin(
        Bin,WarehouseActivityLine."Action Type"::Take,WhseInternalPickHeader."No.",Item."No.",ItemVariant.Code,
        Item."Base Unit of Measure",Quantity2,FALSE);
      VerifyPickLineWithBin(
        Bin3,WarehouseActivityLine."Action Type"::Place,WhseInternalPickHeader."No.",Item."No.",ItemVariant.Code,
        Item."Base Unit of Measure",Quantity2,TRUE);  // Use True for Move Next Line.

      IF RegisterPick THEN BEGIN
        // Exercise.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Action Type"::Take,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",Bin2,
          Item."No.",ItemVariant.Code,Item."Base Unit of Measure",'',Quantity,FALSE);
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Action Type"::Place,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",Bin3,
          Item."No.",ItemVariant.Code,Item."Base Unit of Measure",'',Quantity,FALSE);
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Action Type"::Take,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",Bin,
          Item."No.",ItemVariant.Code,Item."Base Unit of Measure",'',Quantity2,FALSE);
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Action Type"::Place,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",Bin3,
          Item."No.",ItemVariant.Code,Item."Base Unit of Measure",'',Quantity2,TRUE);  // Move Next Line.
      END;
    END;

    [Test]
    PROCEDURE UOMConversionOnPickFromInternalPickWithItemVariant@99();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickFromInternalPickWithItemVariantAndUOMConversion(FALSE);  // RegisterPick as False.
    END;

    [Test]
    PROCEDURE UOMConversionOnRegisteredPickFromInternalPickWithItemVariant@101();
    BEGIN
      // Setup.
      Initialize;
      CreateAndRegisterPickFromInternalPickWithItemVariantAndUOMConversion(TRUE);  // RegisterPick as True.
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromInternalPickWithItemVariantAndUOMConversion@52(RegisterPick@1014 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      Bin2@1011 : Record 7354;
      Item@1009 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      ItemVariant@1008 : Record 5401;
      WarehouseActivityLine@1005 : Record 5767;
      WhseInternalPickHeader@1000 : Record 7333;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item with Item Variant. Create another Item Unit of Measure. Update Inventory for Item with Variant.
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      Quantity := LibraryRandom.RandDec(100,2);
      FindBin(Bin,LocationWhite.Code);
      UpdateInventoryUsingWarehouseJournal(Bin,Item,ItemVariant.Code,ItemUnitOfMeasure.Code,Quantity);
      Bin2.GET(LocationWhite.Code,LocationWhite."Open Shop Floor Bin Code");

      // Exercise.
      CreatePickFromWarehouseInternalPick(
        WhseInternalPickHeader,Bin2,Item."No.",ItemVariant.Code,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for test.

      // Verify.
      VerifyPickLineWithBin(
        Bin,WarehouseActivityLine."Action Type"::Take,WhseInternalPickHeader."No.",Item."No.",ItemVariant.Code,
        ItemUnitOfMeasure.Code,Quantity,FALSE);
      VerifyPickLineWithBin(
        Bin2,WarehouseActivityLine."Action Type"::Place,WhseInternalPickHeader."No.",Item."No.",ItemVariant.Code,
        Item."Base Unit of Measure",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",FALSE);
      // Value required for test.

      IF RegisterPick THEN BEGIN
        // Exercise.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Action Type"::Take,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",Bin,
          Item."No.",ItemVariant.Code,ItemUnitOfMeasure.Code,'',Quantity,FALSE);
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Action Type"::Place,WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",Bin2,
          Item."No.",ItemVariant.Code,
          Item."Base Unit of Measure",'',Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",FALSE);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentAfterCalculateCrossDockWithLotItemTracking@116();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterCalculateCrossDockWithItemTracking(ItemTrackingMode::"Assign Lot No.",LotItemTrackingCode.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PostWarehouseShipmentAfterCalculateCrossDockWithSerialItemTracking@59();
    VAR
      SerialItemTrackingCode@1000 : Record 6502;
    BEGIN
      // Setup.
      Initialize;
      CreateItemTrackingCode(SerialItemTrackingCode,TRUE,FALSE,FALSE);  // Serial Item Tracking.
      PostWarehouseShipmentAfterCalculateCrossDockWithItemTracking(ItemTrackingMode::"Assign Serial No.",SerialItemTrackingCode.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PostWarehouseShipmentAfterCalculateCrossDockWithLotAndSerialItemTracking@117();
    VAR
      LotAndSerialItemTrackingCode@1000 : Record 6502;
    BEGIN
      // Setup.
      Initialize;
      CreateItemTrackingCode(LotAndSerialItemTrackingCode,TRUE,TRUE,FALSE);  // Both Serial and Lot Item Tracking.
      PostWarehouseShipmentAfterCalculateCrossDockWithItemTracking(
        ItemTrackingMode::"Assign Lot And Serial",LotAndSerialItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterCalculateCrossDockWithItemTracking@102(TrackingMode@1000 : Option;ItemTrackingCode@1013 : Code[10]);
    VAR
      Item@1012 : Record 27;
      PurchaseHeader@1011 : Record 38;
      PurchaseLine@1010 : Record 39;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
      WarehouseEntry@1007 : Record 7312;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseShipmentHeader@1004 : Record 7320;
      LotNo@1001 : Code[20];
    BEGIN
      // Create Item with Item Tracking. Create and release Sales Order. Create and release Purchase Order. Create Warehouse Receipt and Calculate Cross Dock with Item Tracking.
      // Post Warehouse Receipt and register Put Away. Create and register Pick from Warehouse Shipment.
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode);
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',LibraryRandom.RandInt(10),WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',SalesLine.Quantity,WORKDATE,FALSE);  // Tracking as False.
      CreateWarehouseReceiptAndCalculateCrossDockWithItemTracking(WarehouseReceiptLine,PurchaseHeader,TrackingMode);
      IF TrackingMode <> ItemTrackingMode::"Assign Serial No." THEN
        GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);  // Post as Ship and Invoice.

      // Verify.
      IF TrackingMode = ItemTrackingMode::"Assign Lot No." THEN BEGIN
        VerifyCrossDockWarehouseEntry(
          WarehouseEntry."Source Document"::"P. Order",PurchaseHeader."No.",LocationWhite,Item."No.",LotNo,PurchaseLine.Quantity);
        VerifyCrossDockWarehouseEntry(
          WarehouseEntry."Source Document"::"S. Order",SalesHeader."No.",LocationWhite,Item."No.",LotNo,-SalesLine.Quantity);
      END;
      IF TrackingMode = ItemTrackingMode::"Assign Serial No." THEN BEGIN
        VerifyCrossDockWarehouseEntryWithSerialNo(
          WarehouseEntry."Source Document"::"P. Order",PurchaseHeader."No.",LocationWhite,Item."No.",'',PurchaseLine.Quantity,1);  // Value required for test.
        VerifyCrossDockWarehouseEntryWithSerialNo(
          WarehouseEntry."Source Document"::"S. Order",SalesHeader."No.",LocationWhite,Item."No.",'',-SalesLine.Quantity,-1);  // Value required for test.
      END;
      IF TrackingMode = ItemTrackingMode::"Assign Lot And Serial" THEN BEGIN
        VerifyCrossDockWarehouseEntryWithSerialNo(
          WarehouseEntry."Source Document"::"P. Order",PurchaseHeader."No.",LocationWhite,Item."No.",LotNo,PurchaseLine.Quantity,1);  // Value required for test.
        VerifyCrossDockWarehouseEntryWithSerialNo(
          WarehouseEntry."Source Document"::"S. Order",SalesHeader."No.",LocationWhite,Item."No.",LotNo,-SalesLine.Quantity,-1);  // Value required for test.
      END;
    END;

    [Test]
    PROCEDURE ChangeUnitOfMeasureOnWarehousePutAwayWithError@65();
    BEGIN
      // Setup.
      Initialize;
      ChangeUnitOfMeasureOnWarehousePutAway(TRUE);  // Use True for With Error.
    END;

    [Test]
    [HandlerFunctions(WarehouseChangeUnitOfMeasurePageHandler)]
    PROCEDURE ChangeUnitOfMeasureOnWarehousePutAwayWithoutError@88();
    BEGIN
      // Setup.
      Initialize;
      ChangeUnitOfMeasureOnWarehousePutAway(FALSE);  // Use False for Without Error.
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasureOnWarehousePutAway@72(ShowError@1006 : Boolean);
    VAR
      Item@1005 : Record 27;
      ItemUnitOfMeasure@1004 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Create Item with Purchase Unit of Measure. Create and release Purchase Order. Create and post Warehouse Receipt from Purchase Order.
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.

      IF ShowError THEN BEGIN
        // Exercise.
        FindWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");
        ASSERTERROR ChangeUnitOfMeasureOnPutAway(WarehouseActivityLine."No.");

        // Verify.
        Assert.ExpectedError(
          STRSUBSTNO(
            ActionTypeOnWarehouseActivity,WarehouseActivityLine."Action Type"::Place,WarehouseActivityLine."Activity Type",
            WarehouseActivityLine."No.",WarehouseActivityLine."Line No.",WarehouseActivityLine."Action Type"));
      END ELSE BEGIN
        // Exercise.
        ChangeUnitOfMeasureOnWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Item."Base Unit of Measure");

        // Verify.
        VerifyWarehouseActivityLine(
          WarehouseActivityLine,Item."No.",Item."Base Unit of Measure",
          PurchaseLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for test.
      END;
    END;

    [Test]
    PROCEDURE ChangeUnitOfMeasureOnWarehousePickWithError@128();
    BEGIN
      // Setup.
      Initialize;
      ChangeUnitOfMeasureOnWarehousePick(TRUE);  // Use True for With Error.
    END;

    [Test]
    [HandlerFunctions(WarehouseChangeUnitOfMeasurePageHandler)]
    PROCEDURE ChangeUnitOfMeasureOnWarehousePickWithoutError@112();
    BEGIN
      // Setup.
      Initialize;
      ChangeUnitOfMeasureOnWarehousePick(FALSE);  // Use False for Without Error.
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasureOnWarehousePick@89(ShowError@1009 : Boolean);
    VAR
      Bin@1008 : Record 7354;
      Item@1007 : Record 27;
      ItemUnitOfMeasure@1006 : Record 5404;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentHeader@1002 : Record 7320;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item. Create different Unit of Measure. Update Inventory with different Unit of Measure. Create and release Sales Order. Create Pick from Warehouse Shipment.
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      FindBin(Bin,LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateInventoryUsingWarehouseJournal(Bin,Item,'',ItemUnitOfMeasure.Code,Quantity + LibraryRandom.RandDec(100,2));  // Value required for Test.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',Quantity,WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
      WarehouseActivityLine.SETRANGE("Breakbulk No.",0);  // Value required for Test.
      IF ShowError THEN BEGIN
        // Exercise.
        WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
        FindWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        ASSERTERROR ChangeUnitOfMeasureOnPick(WarehouseActivityLine."No.");

        // Verify.
        Assert.ExpectedError(
          STRSUBSTNO(
            ActionTypeOnWarehouseActivity,WarehouseActivityLine."Action Type"::Take,WarehouseActivityLine."Activity Type",
            WarehouseActivityLine."No.",WarehouseActivityLine."Line No.",WarehouseActivityLine."Action Type"));
      END ELSE BEGIN
        // Exercise.
        ChangeUnitOfMeasureOnWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",ItemUnitOfMeasure.Code);

        // Verify.
        VerifyWarehouseActivityLine(
          WarehouseActivityLine,Item."No.",ItemUnitOfMeasure.Code,Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for test.
      END;
    END;

    [Test]
    PROCEDURE PostPurchaseOrderAsReceiveUsingMultipleItemsWithAndWithoutLocation@70();
    VAR
      Bin@1004 : Record 7354;
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      WarehouseEntry@1005 : Record 7312;
    BEGIN
      // Setup: Create two Items. Create Bin. Create First Purchase Line with Location and Bin. Create Second Purchase Line without Location and Bin.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",Item2."No.",'',Bin."Location Code",Bin.Code,LibraryRandom.RandDec(100,2),
        WORKDATE,FALSE);  // Tracking as False.

      // Exercise.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.

      // Verify: Warehouse Entry is created only for First Item.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",Bin,Item."No.",Item."Base Unit of Measure",'',PurchaseLine.Quantity);
      VerifyEmptyWarehouseEntry(Item2."No.");
    END;

    [Test]
    PROCEDURE SalesOrderWithMultipleBaseCalendars@114();
    VAR
      BaseCalendar@1000 : Record 7600;
      BaseCalendar2@1002 : Record 7600;
      BaseCalendar3@1003 : Record 7600;
      BaseCalendarChange@1001 : Record 7601;
      Customer@1008 : Record 18;
      Item@1011 : Record 27;
      Location@1004 : Record 14;
      SalesHeader@1005 : Record 36;
      SalesLine@1010 : Record 37;
      ShippingAgentServices@1006 : Record 5790;
    BEGIN
      // Setup: Create multiple Base Calendars. Update outbound Warehouse Handling Time and Base Calendar on Location. Create Shipping Agent with Shipping Agent Service. Create Customer with Shipping Agent and Base Calendar.
      Initialize;
      LibraryWarehouse.CreateLocation(Location);
      CreateBaseCalendarWithBaseCalendarChange(BaseCalendar);
      CreateBaseCalendarWithBaseCalendarChange(BaseCalendar2);
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendar2.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,
        BaseCalendarChange.Day::Wednesday);  // Use 0D for Date.
      LibraryService.CreateBaseCalendar(BaseCalendar3);
      UpdateOutboundWarehouseHandlingTimeAndBaseCalendarOnLocation(Location,BaseCalendar3.Code);
      CreateShippingAgentWithShippingAgentService(ShippingAgentServices,BaseCalendar.Code);
      CreateCustomerWithShippingAgentAndBaseCalendar(Customer,ShippingAgentServices,BaseCalendar2.Code);
      LibraryInventory.CreateItem(Item);

      // Exercise.
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",Location.Code,'');

      // Verify.
      VerifySalesLine(SalesLine,ShippingAgentServices,Location."Outbound Whse. Handling Time");
    END;

    [Test]
    PROCEDURE RegisterMovementAfterRegisterPutAwayUsingWarehouseClass@140();
    BEGIN
      // Setup.
      Initialize;
      RegisterMovementAfterPutAwayAndPickUsingWarehouseClass(FALSE,FALSE);  // Pick as False and MovementAfterPick as False.
    END;

    [Test]
    PROCEDURE RegisterPickAfterRegisterMovementUsingWarehouseClass@138();
    BEGIN
      // Setup.
      Initialize;
      RegisterMovementAfterPutAwayAndPickUsingWarehouseClass(TRUE,FALSE);  // Pick as True and MovementAfterPick as False.
    END;

    [Test]
    PROCEDURE RegisterMovementAfterRegisterPickUsingWarehouseClass@137();
    BEGIN
      // Setup.
      Initialize;
      RegisterMovementAfterPutAwayAndPickUsingWarehouseClass(TRUE,TRUE);  // Pick as True and MovementAfterPick as True.
    END;

    LOCAL PROCEDURE RegisterMovementAfterPutAwayAndPickUsingWarehouseClass@144(Pick@1016 : Boolean;MovementAfterPick@1017 : Boolean);
    VAR
      Bin@1015 : Record 7354;
      Bin2@1014 : Record 7354;
      Bin3@1013 : Record 7354;
      Bin4@1012 : Record 7354;
      Item@1011 : Record 27;
      WarehouseClass@1004 : Record 7304;
      WarehouseShipmentHeader@1002 : Record 7320;
      Quantity@1018 : Decimal;
      Quantity2@1019 : Decimal;
    BEGIN
      // Create Item with Warehouse Class Product Group. Create Receive, Ship and Pick Bin with Warehouse Class. Create and post Warehouse Receipt from Purchase Order. Register Put Away.
      CreateItemWithWarehouseClassProductGroup(WarehouseClass,Item);
      CreateZoneAndBin(Bin,LocationWhite.Code,WarehouseClass.Code,TRUE,FALSE,FALSE,FALSE);  // Receive Bin.
      CreateZoneAndBin(Bin2,LocationWhite.Code,WarehouseClass.Code,FALSE,TRUE,FALSE,FALSE);  // Ship Bin.
      CreateZoneAndBin(Bin3,LocationWhite.Code,WarehouseClass.Code,FALSE,FALSE,TRUE,TRUE);  // Pick Bin.
      CreateBinWithWarehouseClassCode(Bin4,Bin3."Location Code",Bin3."Zone Code",Bin3."Bin Type Code",Bin3."Warehouse Class Code");
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := LibraryRandom.RandDec(100,2);
      RegisterPutAwayAfterPostWarehouseReceiptWithUpdateBinUsingPurchaseOrder(Bin,Item."No.",LocationWhite.Code,Quantity + Quantity2);  // Value required for test and Tracking as False.

      // Exercise.
      CreateAndRegisterMovementAfterGetBinContentOnMovementWorksheet(Bin3,Item."No.");

      // Verify.
      VerifyBinContent(Bin3,Item."No.",Quantity + Quantity2);  // Value required for test.

      IF Pick THEN BEGIN
        // Exercise.
        RegisterPickAfterPostWarehouseShipmentWithUpdateBinUsingSalesOrder(
          WarehouseShipmentHeader,Bin2,Item."No.",LocationWhite.Code,Quantity);

        // Verify.
        VerifyBinContent(Bin2,Item."No.",Quantity);
      END;

      IF MovementAfterPick THEN BEGIN
        // Exercise.
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.
        CreateAndRegisterMovementAfterGetBinContentOnMovementWorksheet(Bin4,Item."No.");

        // Verify.
        VerifyBinContent(Bin4,Item."No.",Quantity2);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE RegisterPutAwayWithLotInformationItemTracking@165();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisterPutAwayAndPickWithLotInformationItemTracking(FALSE);  // Warehouse Shipment as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentAfterRegisterPickWithLotInformationItemTracking@164();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisterPutAwayAndPickWithLotInformationItemTracking(TRUE);  // Warehouse Shipment as True.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterRegisterPutAwayAndPickWithLotInformationItemTracking@163(WarehouseShipment@1012 : Boolean);
    VAR
      Item@1011 : Record 27;
      ItemLedgerEntry@1010 : Record 32;
      LotInformationItemTrackingCode@1006 : Record 6502;
      LotNoInformation@1007 : Record 6505;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentHeader@1002 : Record 7320;
      LotNo@1000 : Code[20];
    BEGIN
      // Create Item with Lot Information Item Tracking. Create and release Purchase Order. Create and post Warehouse Receipt from Purchase Order.
      CreateItemTrackingCodeWithLotInformation(LotInformationItemTrackingCode);
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',LotInformationItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationWhite.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,TRUE);  // Tracking as True.
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      LibraryItemTracking.CreateLotNoInformation(LotNoInformation,Item."No.",'',LotNo);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",LotNo,PurchaseLine.Quantity);

      IF WarehouseShipment THEN BEGIN
        // Exercise.
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationWhite.Code,'',PurchaseLine.Quantity,WORKDATE,FALSE,TRUE);  // Value required for test. Reserve as False and Tracking as True.
        CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.

        // Verify.
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Sale,Item."No.",LotNo,-SalesLine.Quantity);
      END;
    END;

    [Test]
    PROCEDURE WarehouseReceiptFromPurchaseOrderWithJob@119();
    VAR
      Item@1002 : Record 27;
      Job@1004 : Record 167;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseReceiptLine@1003 : Record 7317;
      LibraryJob@1005 : Codeunit 131920;
    BEGIN
      // Setup: Create Item and Job. Create and release Purchase Order with Job.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryJob.CreateJob(Job);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'',Job."No.",LocationWhite.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE);  // Tracking as False.

      // Exercise.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Verify: Warehouse Receipt Line must not exists.
      ASSERTERROR FindWarehouseReceiptLine(
          WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    PROCEDURE WarehouseShipmentFromSalesOrderWithJob@109();
    VAR
      Item@1000 : Record 27;
      Job@1002 : Record 167;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentLine@1005 : Record 7321;
      LibraryJob@1001 : Codeunit 131920;
    BEGIN
      // Setup: Create Item and Job. Create and release Sales Order with Job.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryJob.CreateJob(Job);
      CreateSalesOrder(SalesHeader,SalesLine,'',Item."No.",LocationWhite.Code,Job."No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Warehouse Shipment Line must not exists.
      ASSERTERROR FindWarehouseShipmentLine(
          WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE WarehouseReceiptFromTransferOrderWithReceiptPostingPolicyBeforePostingErrorsAreNotProcessed@81();
    BEGIN
      // Setup.
      Initialize;
      WarehouseReceiptFromTransferOrderWithReceiptPostingPolicy(FALSE);  // Use PostingErrorsNotProcessed as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE WarehouseReceiptFromTransferOrderWithReceiptPostingPolicyAfterPostingErrorsAreNotProcessed@132();
    BEGIN
      // Setup.
      Initialize;
      WarehouseReceiptFromTransferOrderWithReceiptPostingPolicy(TRUE);  // Use PostingErrorsNotProcessed as True.
    END;

    LOCAL PROCEDURE WarehouseReceiptFromTransferOrderWithReceiptPostingPolicy@45(PostingErrorsNotProcessed@1015 : Boolean);
    VAR
      Item@1014 : Record 27;
      Item2@1013 : Record 27;
      Item3@1012 : Record 27;
      ItemJournalLine@1011 : Record 83;
      PostedWhseReceiptLine@1010 : Record 7319;
      TransferHeader@1009 : Record 5740;
      TransferHeader2@1008 : Record 5740;
      TransferHeader3@1007 : Record 5740;
      TransferLine@1006 : Record 5741;
      TransferLine2@1005 : Record 5741;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseSetup@1003 : Record 5769;
      WarehouseShipmentHeader@1002 : Record 7320;
      Direction@1019 : 'Outbound,Inbound';
      LotNo@1000 : Code[20];
      Quantity@1016 : Decimal;
      OldReceiptPostingPolicy@1017 : Integer;
      OldReceiptPostingPolicy2@1018 : Integer;
    BEGIN
      // Create two Items without Item Tracking. Create one Item with Lot Tracking. Update Inventory for Items. Create and release Transfer Order for first Item.
      // Create and release Transfer Order for second Item with Lot Item Tracking. Create and release Transfer Order for third Item. Create and post Warehouse Shipment with Get Source Document.
      // Update Quantity Base on Receipt Item Tracking Line for second Transfer Order. Create Warehouse Receipt with Get Source Document. Update Receipt Posting Policy on Warehouse Setup.
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateTrackedItem(Item2,LibraryUtility.GetGlobalNoSeriesCode,'',LotItemTrackingCode.Code);
      LibraryInventory.CreateItem(Item3);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity,LocationBlue.Code,'');
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",Quantity,LocationBlue.Code,'');
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item3."No.",Quantity,LocationBlue.Code,'');
      CreateAndReleaseTransferOrder(TransferHeader,TransferLine,LocationBlue.Code,LocationRed.Code,Item."No.",Quantity);
      CreateAndReleaseTransferOrder(TransferHeader2,TransferLine2,LocationBlue.Code,LocationRed.Code,Item2."No.",Quantity);
      UpdateItemTrackingOnTransferLine(TransferLine2,ItemTrackingMode::"Select Entries",Direction::Outbound);
      CreateAndReleaseTransferOrder(TransferHeader3,TransferLine,LocationBlue.Code,LocationRed.Code,Item3."No.",Quantity);
      CreateWarehouseShipmentWithGetSourceDocument(WarehouseShipmentHeader,LocationBlue.Code);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.
      UpdateItemTrackingOnTransferLine(TransferLine2,ItemTrackingMode::"Blank Quantity Base",Direction::Inbound);
      CreateWarehouseReceiptWithGetSourceDocument(WarehouseReceiptHeader,LocationRed.Code);
      UpdateReceiptPostingPolicyOnWarehouseSetup(
        OldReceiptPostingPolicy,WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");

      // Exercise.
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeleted,TransferHeader."No."));  // Enqueue for MessageHandler.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Receipt posted only for first Transfer Order.
      VerifyPostedWarehouseReceiptLine(
        PostedWhseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.",Item."No.",Quantity,FALSE);
      Assert.ExpectedError(STRSUBSTNO(LotNumberRequiredForItem,Item2."No."));
      VerifyEmptyPostedWarehouseReceiptLine(TransferHeader2."No.",Item2."No.");
      VerifyEmptyPostedWarehouseReceiptLine(TransferHeader3."No.",Item3."No.");

      IF PostingErrorsNotProcessed THEN BEGIN
        // Exercise.
        UpdateReceiptPostingPolicyOnWarehouseSetup(
          OldReceiptPostingPolicy2,WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
        LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeleted,TransferHeader3."No."));  // Enqueue for MessageHandler.
        LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

        // Verify: Receipt posted for third Transfer Order.
        VerifyPostedWarehouseReceiptLine(
          PostedWhseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader3."No.",Item3."No.",Quantity,FALSE);
        VerifyEmptyPostedWarehouseReceiptLine(TransferHeader2."No.",Item2."No.");
      END;

      // Tear down.
      UpdateReceiptPostingPolicyOnWarehouseSetup(OldReceiptPostingPolicy,OldReceiptPostingPolicy);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoSalesShipmentAfterPostWarehouseShipmentFromSalesOrderUsingPick@174();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1004 : Record 36;
      WarehouseShipmentHeader@1006 : Record 7320;
      SalesShipmentLine@1007 : Record 111;
      PostedWhseShipmentLine@1008 : Record 7323;
      Quantity@1009 : Decimal;
    BEGIN
      // Setup: Create and register Put Away from Warehouse Receipt using Purchase Order. Create and register Pick from Warehouse Shipment using Sales Order. Post Warehouse Shipment.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder(PurchaseHeader,Item."No.",LocationYellow.Code,Quantity);
      CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder(
        WarehouseShipmentHeader,SalesHeader,Item."No.",LocationYellow.Code,Quantity);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(PickedConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoSalesShipmentLine(SalesShipmentLine,SalesHeader."No.");

      // Verify: Posted Warehouse Shipment Line after Undo Sales Shipment.
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Quantity,FALSE);
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",-Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoReturnShipmentAfterPostWarehouseShipmentFromPurchaseReturnOrderUsingPick@170();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      WarehouseShipmentHeader@1006 : Record 7320;
      PostedWhseShipmentLine@1008 : Record 7323;
      ReturnShipmentLine@1005 : Record 6651;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create and register Put Away from Warehouse Receipt using Purchase Order. Create and register Pick from Warehouse Shipment using Purchase Return Order. Post Warehouse Shipment.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder(PurchaseHeader,Item."No.",LocationYellow.Code,Quantity);
      CreateAndRegisterPickFromWarehouseShipmentUsingPurchaseReturnOrder(
        WarehouseShipmentHeader,PurchaseHeader,Item."No.",LocationYellow.Code,Quantity);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(PickedConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoReturnShipmentLine(ReturnShipmentLine,PurchaseHeader."No.");

      // Verify: Posted Warehouse Shipment Line after Undo Return Shipment.
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",Item."No.",Quantity,FALSE);
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",Item."No.",-Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CannotUndoPurchaseReceiptAfterPostWarehouseReceiptFromPurchaseOrderUsingPutAway@169();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchRcptLine@1004 : Record 121;
    BEGIN
      // Setup: Create and register Put Away from Warehouse Receipt using Purchase Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder(
        PurchaseHeader,Item."No.",LocationYellow.Code,LibraryRandom.RandDec(100,2));
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      ASSERTERROR UndoPurchaseReceiptLine(PurchRcptLine,PurchaseHeader."No.");

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(UndoErrorMessage,PurchRcptLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CannotUndoReturnReceiptAfterPostWarehouseReceiptFromSalesReturnOrderUsingPutAway@168();
    VAR
      Item@1000 : Record 27;
      ReturnReceiptLine@1004 : Record 6661;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Setup: Create and register Put Away from Warehouse Receipt using Sales Return Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingSalesReturnOrder(SalesHeader,Item."No.",LocationYellow.Code);
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      ASSERTERROR UndoReturnReceiptLine(ReturnReceiptLine,SalesHeader."No.");

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(UndoErrorMessage,ReturnReceiptLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoSalesShipmentAfterPostSalesOrder@166();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesShipmentLine@1003 : Record 111;
    BEGIN
      // Setup: Create and release Sales Order. Post Sales Order as Ship.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationGreen.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE,FALSE);  // Value required for test.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Ship.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoSalesShipmentLine(SalesShipmentLine,SalesHeader."No.");

      // Verify: Sales Shipment Line after Undo Sales Shipment.
      VerifySalesShipmentLine(SalesShipmentLine,Item."No.",LocationGreen.Code,SalesLine.Quantity,FALSE);
      VerifySalesShipmentLine(SalesShipmentLine,Item."No.",LocationGreen.Code,-SalesLine.Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoReturnShipmentAfterPostPurchaseReturnOrder@162();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      ReturnShipmentLine@1002 : Record 6651;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create and release Purchase Return Order. Post Purchase Return Order as Ship.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Ship.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoReturnShipmentLine(ReturnShipmentLine,PurchaseHeader."No.");

      // Verify: Return Shipment Line after Undo Return Shipment.
      VerifyReturnShipmentLine(ReturnShipmentLine,Item."No.",LocationGreen.Code,Quantity,FALSE);
      VerifyReturnShipmentLine(ReturnShipmentLine,Item."No.",LocationGreen.Code,-Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoSalesShipmentAfterPostWarehouseShipmentFromSalesOrder@161();
    VAR
      Item@1000 : Record 27;
      PostedWhseShipmentLine@1006 : Record 7323;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesShipmentLine@1005 : Record 111;
      WarehouseShipmentHeader@1003 : Record 7320;
    BEGIN
      // Setup: Create and release Sales Order. Create and post Warehouse Shipment.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationBlue.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesHeader);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(PickedConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoSalesShipmentLine(SalesShipmentLine,SalesHeader."No.");

      // Verify: Posted Warehouse Shipment Line after Undo Sales Shipment.
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",SalesLine.Quantity,FALSE);
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",-SalesLine.Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoReturnShipmentAfterPostWarehouseShipmentFromPurchaseReturnOrder@159();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PostedWhseShipmentLine@1006 : Record 7323;
      ReturnShipmentLine@1005 : Record 6651;
      WarehouseShipmentHeader@1003 : Record 7320;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create and release Purchase Return Order. Create and post Warehouse Shipment.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationBlue.Code,Quantity);
      CreateAndReleaseWarehouseShipmentFromPurchaseReturnOrder(WarehouseShipmentHeader,PurchaseHeader);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Post as Ship.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(PickedConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoReturnShipmentLine(ReturnShipmentLine,PurchaseHeader."No.");

      // Verify: Posted Warehouse Shipment Line after Undo Return Shipment.
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",Item."No.",Quantity,FALSE);
      VerifyPostedWarehouseShipmentLine(
        PostedWhseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",Item."No.",-Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptAfterPostWarehouseReceiptFromPurchaseOrder@158();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchRcptLine@1004 : Record 121;
      PostedWhseReceiptLine@1005 : Record 7319;
    BEGIN
      // Setup: Create and release Purchase Order. Create and post Warehouse Receipt.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',LocationRed.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoPurchaseReceiptLine(PurchRcptLine,PurchaseHeader."No.");

      // Verify: Posted Warehouse Receipt Line after Undo Purchase Receipt.
      VerifyPostedWarehouseReceiptLine(
        PostedWhseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Item."No.",PurchaseLine.Quantity,FALSE);
      VerifyPostedWarehouseReceiptLine(
        PostedWhseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.",Item."No.",-PurchaseLine.Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoReturnReceiptAfterPostWarehouseReceiptFromSalesReturnOrder@157();
    VAR
      Item@1000 : Record 27;
      ReturnReceiptLine@1004 : Record 6661;
      SalesHeader@1001 : Record 36;
      PostedWhseReceiptLine@1005 : Record 7319;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create and release Sales Return Order. Create and post Warehouse Receipt.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleaseSalesReturnOrder(SalesHeader,Item."No.",LocationRed.Code,Quantity);
      CreateAndPostWarehouseReceiptFromSalesReturnOrder(SalesHeader);
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      UndoReturnReceiptLine(ReturnReceiptLine,SalesHeader."No.");

      // Verify: Posted Warehouse Receipt Line after Undo Return Receipt.
      VerifyPostedWarehouseReceiptLine(
        PostedWhseReceiptLine."Source Document"::"Sales Return Order",SalesHeader."No.",Item."No.",Quantity,FALSE);
      VerifyPostedWarehouseReceiptLine(
        PostedWhseReceiptLine."Source Document"::"Sales Return Order",SalesHeader."No.",Item."No.",-Quantity,TRUE);  // Use MoveNext as True.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptBeforeCancelReservation@156();
    BEGIN
      // Setup.
      Initialize;
      UndoPurchaseReceiptWithReservation(FALSE);  // Use CancelReservation as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptAfterCancelReservation@153();
    BEGIN
      // Setup.
      Initialize;
      UndoPurchaseReceiptWithReservation(TRUE);  // Use CancelReservation as True.
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptWithReservation@93(CancelReservation@1008 : Boolean);
    VAR
      Item@1007 : Record 27;
      ItemLedgerEntry@1006 : Record 32;
      Location@1009 : Record 14;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      PurchRcptLine@1003 : Record 121;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      ReservationMode@1000 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line,Cancel Reservation Current Line';
    BEGIN
      // Create and release Purchase Order. Create and release Sales Order.
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,Item."No.",'','',Location.Code,'',LibraryRandom.RandDec(100,2),WORKDATE,FALSE);  // Tracking as False.
      LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From Current Line");  // Enqueue for ReservationPageHandler.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",Location.Code,'',PurchaseLine.Quantity,WORKDATE,TRUE,FALSE);  // Use Reserve as True.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
      LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      ASSERTERROR UndoPurchaseReceiptLine(PurchRcptLine,PurchaseHeader."No.");

      // Verify.
      SalesLine.FIND;
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.FINDFIRST;
      Assert.ExpectedError(STRSUBSTNO(ReservedQuantityError,ItemLedgerEntry."Entry No.",ItemLedgerEntry.Quantity));

      IF CancelReservation THEN BEGIN
        // Exercise.
        LibraryVariableStorage.Enqueue(ReservationMode::"Cancel Reservation Current Line");  // Enqueue for ReservationPageHandler.
        LibraryVariableStorage.Enqueue(CancelReservationConfirmMessage);  // Enqueue for ConfirmHandler.
        UpdateQuantityOnSalesLineAndReserve(SalesLine,PurchaseLine.Quantity);
        LibraryVariableStorage.Enqueue(UndoConfirmMessage);  // Enqueue for ConfirmHandler.
        LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

        // Verify.
        VerifyPurchaseReceiptLine(PurchRcptLine,Item."No.",Location.Code,SalesLine.Quantity,FALSE);
        VerifyPurchaseReceiptLine(PurchRcptLine,Item."No.",Location.Code,-SalesLine.Quantity,TRUE);  // Use MoveNext as True.
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE FinishedProductionOrderWithComponentFlushingMethodAsPickBackwardUsingPick@193();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      FinishedProductionOrderWithDifferentComponentFlushingMethodUsingPick(Item."Flushing Method"::"Pick + Backward",FALSE);  // Use Pick Worksheet as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE FinishedProductionOrderWithComponentFlushingMethodAsPickForwardUsingPick@192();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      FinishedProductionOrderWithDifferentComponentFlushingMethodUsingPick(Item."Flushing Method"::"Pick + Forward",FALSE);  // Use Pick Worksheet as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE FinishedProductionOrderWithComponentFlushingMethodAsPickBackwardUsingPickWorksheet@190();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      FinishedProductionOrderWithDifferentComponentFlushingMethodUsingPick(Item."Flushing Method"::"Pick + Backward",TRUE);  // Use Pick Worksheet as True.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE FinishedProductionOrderWithComponentFlushingMethodAsPickForwardUsingPickWorksheet@189();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      FinishedProductionOrderWithDifferentComponentFlushingMethodUsingPick(Item."Flushing Method"::"Pick + Forward",TRUE);  // Use Pick Worksheet as True.
    END;

    LOCAL PROCEDURE FinishedProductionOrderWithDifferentComponentFlushingMethodUsingPick@188(FlushingMethod@1013 : Option;PickWorksheet@1014 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      ItemLedgerEntry@1017 : Record 32;
      ParentItem@1010 : Record 27;
      ProductionBOMLine@1008 : Record 99000772;
      ProductionOrder@1007 : Record 5405;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      WarehouseReceiptHeader@1004 : Record 7316;
      ProdOrderComponent@1003 : Record 5407;
      WarehouseActivityLine@1015 : Record 5767;
      WhseWorksheetName@1000 : Record 7327;
      ProductionOrderNo@1001 : Code[20];
      Quantity@1016 : Decimal;
    BEGIN
      // Create Item with Production BOM. Create and release Purchase Order. Reserve Production Order Component on Firm Planned Production Order. Create and register Put Away.
      // Change Status Firm Plan to Released. Create and register Pick from Release Production Order. Post Consumption and Output Journal.
      CreateItemWithProductionBOM(ParentItem,ProductionBOMLine,FlushingMethod);
      Quantity := LibraryRandom.RandInt(100);
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,ProductionBOMLine."No.",'','',LocationWhite.Code,'',Quantity * ProductionBOMLine."Quantity per",
        CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),FALSE);  // Value required for test. Tracking as False.
      CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,ParentItem."No.",LocationWhite.Code,Quantity);
      ReserveProductionOrderComponent(ProdOrderComponent,ProductionOrder);
      IF FlushingMethod = ParentItem."Flushing Method"::"Pick + Forward" THEN
        UpdateRoutingLinkCodeOnProductionOrderComponent(ProdOrderComponent);
      CreateWarehouseReceiptWithGetSourceDocument(WarehouseReceiptHeader,LocationWhite.Code);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      UpdateBinOnPutAwayAndRegisterPutAway(Bin,LocationWhite.Code,PurchaseHeader."No.");
      ProductionOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);
      IF PickWorksheet THEN BEGIN
        GetWarehouseDocumentOnPickWorksheet(WhseWorksheetName,LocationWhite.Code);
        CreatePickFromPickWorksheetLine(WhseWorksheetName,'',ProductionBOMLine."No.");
      END ELSE BEGIN
        ProductionOrder.GET(ProductionOrder.Status::Released,ProductionOrderNo);
        LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      END;
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrderNo,
        WarehouseActivityLine."Activity Type"::Pick);
      IF FlushingMethod = ParentItem."Flushing Method"::"Pick + Forward" THEN
        CalculateAndPostConsumptionJournal(ProductionOrderNo);
      PostOutputJournalAfterExplodeRouting(ProductionOrderNo);

      // Exercise.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrderNo);

      // Verify.
      VerifyFinishedProductionOrderLine(ProductionOrderNo,ParentItem."No.",Quantity);
      VerifyFinishedProductionOrderComponent(ProductionOrderNo,ProductionBOMLine."No.",FlushingMethod,PurchaseLine.Quantity);
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Consumption,ProductionBOMLine."No.",'',-PurchaseLine.Quantity);
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Output,ParentItem."No.",'',Quantity);
    END;

    [Test]
    PROCEDURE PositiveAdjustmentUsingWarehouseItemJournal@204();
    BEGIN
      // Setup.
      Initialize;
      AdjustmentUsingWarehouseItemJournal(FALSE);  // Use False for Positive Adjustment.
    END;

    [Test]
    PROCEDURE NegativeAdjustmentUsingWarehouseItemJournal@197();
    BEGIN
      // Setup.
      Initialize;
      AdjustmentUsingWarehouseItemJournal(TRUE);  // Use True for Negative Adjustment.
    END;

    LOCAL PROCEDURE AdjustmentUsingWarehouseItemJournal@195(NegativeAdjustment@1006 : Boolean);
    VAR
      Bin@1005 : Record 7354;
      Bin2@1004 : Record 7354;
      Item@1003 : Record 27;
      WarehouseEntry@1002 : Record 7312;
      WarehouseJournalLine@1001 : Record 7311;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item and get Adjustment Bin.
      LibraryInventory.CreateItem(Item);
      Bin.GET(LocationWhite.Code,LocationWhite."Adjustment Bin Code");
      FindBin(Bin2,LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);

      // Exercise.
      CreateAndRegisterWarehouseJournalLine(
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Bin2,Item."No.",'',Item."Base Unit of Measure",Quantity);

      // Verify.
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Negative Adjmt.",Bin,Item."No.",Item."Base Unit of Measure",'',-Quantity);
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Bin2,Item."No.",Item."Base Unit of Measure",'',Quantity);
      VerifyBinContent(Bin2,Item."No.",Quantity);

      IF NegativeAdjustment THEN BEGIN
        // Exercise.
        CreateAndRegisterWarehouseJournalLine(
          WarehouseJournalLine."Entry Type"::"Negative Adjmt.",Bin2,Item."No.",'',Item."Base Unit of Measure",-Quantity);

        // Verify.
        VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Bin,Item."No.",Item."Base Unit of Measure",'',Quantity);
        VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Negative Adjmt.",Bin2,Item."No.",Item."Base Unit of Measure",'',-Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(FiltersToGetSourceDocsPageHandler,MessageHandler)]
    PROCEDURE GetSourceDocumentForShipmentWithBlockedCust@205();
    VAR
      Item@1000 : Record 27;
      Cust@1001 : Record 18;
      SalesHeader@1002 : ARRAY [4] OF Record 36;
      SalesLine@1003 : Record 37;
      WhseShipmentHeader@1005 : Record 7320;
      WhseSourceFilter@1007 : Record 5771;
      WhseShipment@1006 : TestPage 7335;
      I@1004 : Integer;
    BEGIN
      // Setup: Create items, customers, sales orders and release the order
      Initialize;
      FOR I := 1 TO ARRAYLEN(SalesHeader) DO BEGIN
        LibrarySales.CreateCustomer(Cust);
        CreateSalesOrder(SalesHeader[I],SalesLine,Cust."No.",LibraryInventory.CreateItem(Item),LocationWhite.Code,'');
        LibrarySales.ReleaseSalesDocument(SalesHeader[I]);
        CLEAR(Cust);
      END;

      // Set the Blocked to Ship, Invoice, All on 3 Customers respectively
      BlockCust(SalesHeader[2]."Sell-to Customer No.",Cust.Blocked::Ship);
      BlockCust(SalesHeader[3]."Sell-to Customer No.",Cust.Blocked::Invoice);
      BlockCust(SalesHeader[4]."Sell-to Customer No.",Cust.Blocked::All);

      // Create Warehouse Source Filter like the Filter CUSTOMERS
      LibraryWarehouse.CreateWarehouseSourceFilter(WhseSourceFilter,WhseSourceFilter.Type::Outbound);
      COMMIT; // Make sure the created Warehouse Source Filter goes into the table

      // Exercise: Create Warehouse Shipment and use Filters to Get Source Doucments Action
      CreateWarehouseShipmentHeaderWithLocation(WhseShipmentHeader,LocationWhite.Code);
      WhseShipment.OPENEDIT;
      WhseShipment.FILTER.SETFILTER("No.",WhseShipmentHeader."No.");
      LibraryVariableStorage.Enqueue(WhseSourceFilter.Code); // Enqueue for FiltersToGetSourceDocsPageHandler
      LibraryVariableStorage.Enqueue(STRSUBSTNO(GetSourceDocErr,3)); // Enqueue for MessageHandler, 3 source document cannot be got due to blocked customers
      WhseShipment.Action34.INVOKE; // Invoke Action Use Filters to Get Src. Docs.

      // FiltersToGetSourceDocsPageHandler will invoke Run Action with using the enqueued Filter Code

      // Verify : MessageHandler will verify the warning Message
      // Check whether the warehouse shipment line for the items exist
      VerifyWhseShipmentLineExist(WhseShipmentHeader."No.",SalesHeader[1]."No.",TRUE);
      VerifyWhseShipmentLineExist(WhseShipmentHeader."No.",SalesHeader[2]."No.",FALSE);
      VerifyWhseShipmentLineExist(WhseShipmentHeader."No.",SalesHeader[3]."No.",FALSE);
      VerifyWhseShipmentLineExist(WhseShipmentHeader."No.",SalesHeader[4]."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(FiltersToGetSourceDocsModifyActionPageHandler,SourceDocumentFilterCardPageHandler)]
    PROCEDURE PageSourceDocFilterCardShipmentPositive@220();
    BEGIN
      PageSourceDocFilterCardShipment(TRUE);
    END;

    [Test]
    [HandlerFunctions(FiltersToGetSourceDocsModifyActionPageHandler,SourceDocumentFilterCardPageHandler)]
    PROCEDURE PageSourceDocFilterCardShipmentNegative@221();
    BEGIN
      ASSERTERROR PageSourceDocFilterCardShipment(FALSE);
      Assert.ExpectedError(ShipmentLinesNotCreatedErr);
    END;

    [Test]
    [HandlerFunctions(FiltersToGetSourceDocsModifyActionPageHandler,SourceDocumentFilterCardPageHandler)]
    PROCEDURE PageSourceDocFilterCardReceiptPositive@223();
    BEGIN
      PageSourceDocFilterCardReceipt(TRUE);
    END;

    [Test]
    [HandlerFunctions(FiltersToGetSourceDocsModifyActionPageHandler,SourceDocumentFilterCardPageHandler)]
    PROCEDURE PageSourceDocFilterCardReceiptNegative@224();
    BEGIN
      ASSERTERROR PageSourceDocFilterCardReceipt(FALSE);
      Assert.ExpectedError(ReceiptLinesNotCreatedErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PickLotTrackedFEFOWarehouseShipment@232();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1003 : Record 6502;
      Bin@1002 : Record 7354;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseActivityLine@1009 : Record 5767;
      LotNo@1005 : ARRAY [2] OF Code[20];
      Quantity@1001 : Decimal;
      OldPickAccordingToFEFO@1004 : Boolean;
    BEGIN
      // [FEATURE] [FEFO] [Item Tracking]
      // [SCENARIO 130268] Lot Tracked Item with Expiration Date on FEFO Location fully picked if inventory available.

      // [GIVEN] Location with Required: Receipt, Put-Away, Pick, Shipment; "Bin Mandarory" = TRUE, "Pick According to FEFO" = TRUE.
      Initialize;
      OldPickAccordingToFEFO := UpdatePickAccordingToFEFOOnLocation(LocationOrange,TRUE);

      // [GIVEN] Create Lot tracked Item.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingCode.Code);

      // [GIVEN] Add Item inventory of Quantity "B" to 3 bins: "X", "Y", "Z", each next bin has greater Expiration Date that previous.
      Quantity := 2 * LibraryRandom.RandIntInRange(50,100);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No. & Expiration Date");
      LibraryVariableStorage.Enqueue(CALCDATE('<+1Y>',WORKDATE));
      CreateAndPostItemJournalLineWithNewBinUsingItemTracking(Bin,LotNo[1],Item."No.",LocationOrange.Code,Quantity);

      // [GIVEN] Set "Receipt Bin Code" of Location to "X".
      LocationOrange.VALIDATE("Receipt Bin Code",Bin.Code);
      LocationOrange.MODIFY(TRUE);

      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No. & Expiration Date");
      LibraryVariableStorage.Enqueue(CALCDATE('<+1Y+1M>',WORKDATE));
      CreateAndPostItemJournalLineWithNewBinUsingItemTracking(Bin,LotNo[2],Item."No.",LocationOrange.Code,Quantity);

      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No. & Expiration Date");
      LibraryVariableStorage.Enqueue(CALCDATE('<+1Y+2M>',WORKDATE));
      CreateAndPostItemJournalLineWithNewBinUsingItemTracking(Bin,LotNo[2],Item."No.",LocationOrange.Code,Quantity);

      // [GIVEN] Create Sales Order with Quantity "Q", where "B" < "Q" <= (2 * "B").
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",LocationOrange.Code,'',1.5 * Quantity,WORKDATE,FALSE,FALSE);

      // [WHEN] Create Pick.
      CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);

      // [THEN] Taken Quantity = "Q".
      VerifyPickLine(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.",1.5 * Quantity);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationOrange,OldPickAccordingToFEFO);
    END;

    [Test]
    PROCEDURE WarehouseActivityLineAfterRenamingBin@229();
    VAR
      Bin@1008 : Record 7354;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      // [FEATURE] [UT] [Warehouse Activity] [Bin]
      // [SCENARIO 371808] Warehouse Activity Line should update Bin Code after renaming appropriate Bin

      // [GIVEN] Bin "X"
      // [GIVEN] Warehouse Activity Line with "Bin Code" = "X"
      MockWarehouseActivityLineAndBin(WarehouseActivityLine,Bin);

      // [WHEN] Rename Bin "X" to "Y"
      Bin.RENAME(Bin."Location Code",LibraryUtility.GenerateGUID);

      // [THEN] Warehouse Activity Line has "Bin Code" = "Y"
      WarehouseActivityLine.FIND;
      WarehouseActivityLine.TESTFIELD("Bin Code",Bin.Code);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE DeletedShipmentIsExcludedFromQtyAllocatedInWhse@233();
    VAR
      Item@1001 : Record 27;
      Location@1000 : Record 14;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseShipmentHeader@1008 : Record 7320;
      ReservationMode@1009 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line';
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Reservation]
      // [SCENARIO 382267] Quantity in shipment bin for location that is not set up for directed put-away and pick, should not be considered as allocated in warehouse if the related shipment has been picked and deleted.
      Initialize;

      // [GIVEN] Location "L" with mandatory bin set up for required receive, put-away, shipment and pick.
      LibraryInventory.CreateItem(Item);
      CreateLocationWithBulkReceiveShipmentBins(Location);

      // [GIVEN] Posted and put-away purchase order for "Q" pcs.
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder(PurchaseHeader,Item."No.",Location.Code,100);

      // [GIVEN] Released sales order "S1" with warehouse shipment and registered pick for "q1" < "Q" pcs.
      CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder(
        WarehouseShipmentHeader,SalesHeader,Item."No.",Location.Code,20);

      // [GIVEN] The warehouse shipment is reopened and deleted.
      LibraryVariableStorage.Enqueue(PickedConfirmMessage);
      ReopenAndDeleteWarehouseShipment(WarehouseShipmentHeader);

      // [GIVEN] Released sales order "S2" with warehouse shipment for "q2" pcs. "q1" < "q2" < "Q".
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Location.Code,'',LibraryRandom.RandIntInRange(30,50),WORKDATE,FALSE,FALSE);
      CreateWarehouseShipment(SalesHeader);

      // [GIVEN] Sales order "S3" for "q3" < "Q" pcs.
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item."No.",Location.Code,
        LibraryRandom.RandIntInRange(10,20));

      // [WHEN] Open reservation page for the sales line in "S3".
      LibraryVariableStorage.Enqueue(ReservationMode::"Verify Reserve Line");
      LibraryVariableStorage.Enqueue(100);
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(0);
      SalesLine.ShowReservation;

      // [THEN] Qty. allocated in warehouse = 0.
      // Verification is done in ReservationPageHandler
    END;

    [Test]
    PROCEDURE SalesReturnOrderExternalDocumentNoIsNotChangedOnPostCreatedWhseReceipt@235();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      SalesReturnExtDoc@1005 : Text[10];
      VendorShipmentDoc@1006 : Text[10];
    BEGIN
      // [FEATURE] [Sales Return]
      // [SCENARIO 204590] "External Document No." for Sales Return Order is not changed when you create Whse. Receipt and post it with "Vendor Shipment No." populated.

      Initialize;

      LibraryInventory.CreateItem(Item);
      SalesReturnExtDoc := UPPERCASE(LibraryUtility.GenerateGUID);
      VendorShipmentDoc := UPPERCASE(LibraryUtility.GenerateGUID);

      // [GIVEN] Sales Return Order "SRO" where "External Document No." is populated with a value "VAL1".
      CreateAndReleaseSalesReturnOrder(SalesHeader,Item."No.",LocationYellow.Code,LibraryRandom.RandDec(100,2));
      SalesHeader."External Document No." := SalesReturnExtDoc;
      SalesHeader.MODIFY;

      // [GIVEN] Whse. Receipt created for "SRO".
      LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Sales Return Order",SalesHeader."No.");

      // [GIVEN] Whse. Receipt's "Vendor Shipment No." is populated with a value "VAL2".
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      WarehouseReceiptHeader."Vendor Shipment No." := VendorShipmentDoc;
      WarehouseReceiptHeader.MODIFY;

      // [WHEN] Post Whse. Receipt.
      PostWarehouseReceipt(WarehouseReceiptLine."No.");

      // [THEN] "SRO" "External Document No." has still "VAL1".
      SalesHeader.FIND;
      Assert.AreEqual(
        SalesReturnExtDoc,SalesHeader."External Document No.",
        'SalesHeader."External Document No." should not be changed');
    END;

    [Test]
    PROCEDURE WarehouseShipmentFromSalesOrderWithBlankLocation@7();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLineItem@1004 : Record 37;
      WarehouseRequest@1001 : Record 5765;
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      // [FEATURE] [Sales] [Release] [Shipment] [Location]
      // [SCENARIO 222722] Cassie can create warehouse shipments from sales order having lines with blank and filled locaitons
      Initialize;

      // [GIVEN] "Require Shipment" = TRUE in warehouse setup
      LibraryWarehouse.SetRequireShipmentOnWarehouseSetup(TRUE);

      // [GIVEN] Sales order with two lines
      // [GIVEN] "Sales Line"[1] with "Location Code" = "X" for item "A"
      // [GIVEN] "Sales Line"[2] with blank "Location Code" for item "B"
      LibraryInventory.CreateItem(Item);
      CreateSalesOrder(SalesHeader,SalesLineItem,'',Item."No.",LocationWhite.Code,'');
      CreateSalesLine(SalesLineItem,SalesHeader,Item."No.",'','');

      // [WHEN] Release sales order and create warehouse shipment
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [THEN] Warehouse requests are created for location "X" and for blank location.
      WarehouseRequest.INIT;
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseRequest.SETRANGE("Source Subtype",SalesHeader."Document Type");
      WarehouseRequest.SETRANGE("Source No.",SalesHeader."No.");
      WarehouseRequest.SETRANGE("Document Status",SalesHeader.Status::Released);
      Assert.RecordCount(WarehouseRequest,2);
      WarehouseRequest.SETRANGE("Location Code",LocationWhite.Code);
      Assert.RecordCount(WarehouseRequest,1);
      WarehouseRequest.SETRANGE("Location Code",'');
      Assert.RecordCount(WarehouseRequest,1);

      // [THEN] Shipment lines are created for location "X" and for blank location.
      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      Assert.RecordCount(WarehouseShipmentLine,2);
      WarehouseShipmentLine.SETRANGE("Location Code",LocationWhite.Code);
      Assert.RecordCount(WarehouseShipmentLine,1);
      WarehouseShipmentLine.SETRANGE("Location Code",'');
      Assert.RecordCount(WarehouseShipmentLine,1);
    END;

    [Test]
    PROCEDURE WarehouseReceiptFromPurchaseOrderWithBlankLocation@40();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseRequest@1001 : Record 5765;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      // [FEATURE] [Purchase] [Release] [Receipt] [Location]
      // [SCENARIO 222722] Cassie can create warehouse shipments from sales order having lines with blank and filled locaitons
      Initialize;

      // [GIVEN] "Require Receive" = TRUE in warehouse setup
      LibraryWarehouse.SetRequireReceiveOnWarehouseSetup(TRUE);

      // [GIVEN] Purchase order with two lines
      // [GIVEN] "Purchase Line"[1] with "Location Code" = "X" for item "A"
      // [GIVEN] "Purchase Line"[2] with blank "Location Code" for item "B"
      LibraryInventory.CreateItem(Item);
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,
        Item."No.",LocationWhite.Code,LibraryRandom.RandIntInRange(5,10));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandIntInRange(5,10));

      // [WHEN] Release purchase order and create warehouse receipt
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // [THEN] Warehouse requests are created for location "X" and for blank location.
      WarehouseRequest.INIT;
      WarehouseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
      WarehouseRequest.SETRANGE("Source Subtype",PurchaseHeader."Document Type");
      WarehouseRequest.SETRANGE("Source No.",PurchaseHeader."No.");
      WarehouseRequest.SETRANGE("Document Status",PurchaseHeader.Status::Released);
      Assert.RecordCount(WarehouseRequest,2);
      WarehouseRequest.SETRANGE("Location Code",LocationWhite.Code);
      Assert.RecordCount(WarehouseRequest,1);
      WarehouseRequest.SETRANGE("Location Code",'');
      Assert.RecordCount(WarehouseRequest,1);

      // [THEN] Receipt lines are created for location "X" and for blank location.
      FindWarehouseReceiptLine(
        WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      Assert.RecordCount(WarehouseReceiptLine,2);
      WarehouseReceiptLine.SETRANGE("Location Code",LocationWhite.Code);
      Assert.RecordCount(WarehouseReceiptLine,1);
      WarehouseReceiptLine.SETRANGE("Location Code",'');
      Assert.RecordCount(WarehouseReceiptLine,1);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup(ItemJournalTemplate,ItemJournalBatch,ItemJournalTemplate.Type::Item);  // Item Journal Setup.
      ItemJournalSetup(
        PhysicalInventoryItemJournalTemplate,PhysicalInventoryItemJournalBatch,
        PhysicalInventoryItemJournalTemplate.Type::"Phys. Inventory");  // Physical Inventory Journal Setup.
      ItemJournalSetup(OutputItemJournalTemplate,OutputItemJournalBatch,OutputItemJournalTemplate.Type::Output);  // Output Journal Setup.
      ItemJournalSetup(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type::Consumption);  // Consumption Journal Setup.
      CreateItemTrackingCode(LotItemTrackingCode,FALSE,TRUE,FALSE);  // Lot Item Tracking.

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Warehouse Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PageSourceDocFilterCardReceipt@206(Positive@1012 : Boolean);
    VAR
      TransferHeader@1003 : Record 5740;
      WhseReceiptHeader@1008 : Record 7316;
      WhseSourceFilter@1000 : Record 5771;
      WhseReceipt@1010 : TestPage 5768;
      DateFilter@1009 : Date;
    BEGIN
      // Verify Page "Source Document Filter Card" filter Receipt Date
      Initialize;
      DateFilter := WORKDATE;
      IF NOT Positive THEN
        DateFilter := CALCDATE('<1D>',DateFilter);

      CreateItemMakePositiveAdjustAndReleaseTransfer(TransferHeader,LocationBlue.Code,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateWarehouseSourceFilter(WhseSourceFilter,WhseSourceFilter.Type::Inbound);
      CreateWarehouseReceiptHeaderWithLocation(WhseReceiptHeader,LocationWhite.Code);

      // Open Warehouse Receipt
      LibraryVariableStorage.Enqueue(WhseSourceFilter.Code);
      LibraryVariableStorage.Enqueue(FORMAT(DateFilter));
      COMMIT;
      WhseReceipt.OPENEDIT;
      WhseReceipt.FILTER.SETFILTER("No.",WhseReceiptHeader."No.");

      // Invoke Action "Use Filters to Get Src. Docs."
      WhseReceipt.Action34.INVOKE;
      VerifyWhseReceiptLineExist(WhseReceiptHeader."No.",TransferHeader."No.",Positive);
    END;

    LOCAL PROCEDURE PageSourceDocFilterCardShipment@228(Positive@1012 : Boolean);
    VAR
      TransferHeader@1003 : Record 5740;
      WhseShipmentHeader@1002 : Record 7320;
      WhseSourceFilter@1000 : Record 5771;
      WhseShipment@1001 : TestPage 7335;
      DateFilter@1009 : Date;
    BEGIN
      // Verify Page "Source Document Filter Card" filter Shipment Date
      Initialize;
      DateFilter := WORKDATE;
      IF NOT Positive THEN
        DateFilter := CALCDATE('<1D>',DateFilter);

      CreateItemMakePositiveAdjustAndReleaseTransfer(TransferHeader,LocationWhite.Code,LocationBlue.Code,FALSE);
      LibraryWarehouse.CreateWarehouseSourceFilter(WhseSourceFilter,WhseSourceFilter.Type::Outbound);
      CreateWarehouseShipmentHeaderWithLocation(WhseShipmentHeader,LocationWhite.Code);

      // Open Warehouse Shipment
      LibraryVariableStorage.Enqueue(WhseSourceFilter.Code);
      LibraryVariableStorage.Enqueue(FORMAT(DateFilter));
      COMMIT;
      WhseShipment.OPENEDIT;
      WhseShipment.FILTER.SETFILTER("No.",WhseShipmentHeader."No.");

      // Invoke Action "Use Filters to Get Src. Docs."
      WhseShipment.Action34.INVOKE;
      VerifyWhseShipmentLineExist(WhseShipmentHeader."No.",TransferHeader."No.",Positive);
    END;

    LOCAL PROCEDURE BlockCust@216(CustNo@1000 : Code[20];BlockType@1001 : Option);
    VAR
      Cust@1002 : Record 18;
    BEGIN
      Cust.GET(CustNo);
      Cust.VALIDATE(Blocked,BlockType);
      Cust.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);
      CreateAndUpdateLocation(LocationBlack,FALSE,FALSE,TRUE,TRUE,TRUE);  // With Require Shipment, Require Pick and Bin Mandatory.
      CreateAndUpdateLocation(LocationYellow,TRUE,TRUE,TRUE,TRUE,FALSE);  // With Require Receive, Require Put Away, Require Shipment and Require Pick.
      CreateAndUpdateLocation(LocationSilver,FALSE,TRUE,FALSE,TRUE,TRUE);  // With Require Put Away, Require Pick and Bin Mandatory.
      CreateAndUpdateLocation(LocationBlue,FALSE,FALSE,TRUE,FALSE,FALSE);  // With Required Shipment.
      CreateAndUpdateLocation(LocationRed,TRUE,FALSE,TRUE,FALSE,FALSE);  // With Required Receive.
      CreateAndUpdateLocation(LocationGreen,TRUE,TRUE,FALSE,FALSE,FALSE);  // With Required Receive and Require Put Away.
      CreateAndUpdateLocation(LocationOrange,TRUE,TRUE,TRUE,TRUE,TRUE);  // With Bin Mandatory and Required: Receive, Put Away, Pick, Shipment.
      LibraryWarehouse.CreateInTransitLocation(LocationIntransit);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationBlack.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationBlue.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationRed.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationOrange.Code,FALSE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75(VAR ItemJournalTemplate2@1000 : Record 82;VAR ItemJournalBatch2@1002 : Record 233;ItemJournalTemplateType@1001 : Option);
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate2,ItemJournalTemplateType);
      ItemJournalTemplate2.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate2.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch2,ItemJournalTemplate2.Type,ItemJournalTemplate2.Name);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch2,'');
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      WarehouseSetup@1002 : Record 5769;
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateAndPostConsumptionJournal@201(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalBatch."Journal Template Name",ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalBatch."Journal Template Name",ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CalculateInventoryOnPhysicalInventoryJournal@73(VAR ItemJournalLine@1000 : Record 83;Item@1001 : Record 27;LocationCode@1002 : Code[10]);
    BEGIN
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",PhysicalInventoryItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",PhysicalInventoryItemJournalBatch.Name);
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryWarehouse.CalculateInventory(ItemJournalLine,Item,WORKDATE,LibraryUtility.GenerateGUID,TRUE);  // Item Not On Inventory as True.
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasureOnPick@125(No@1001 : Code[20]);
    VAR
      WarehousePick@1000 : TestPage 5779;
    BEGIN
      WarehousePick.OPENEDIT;
      WarehousePick.FILTER.SETFILTER("No.",No);
      WarehousePick.WhseActivityLines.LAST;  // Leave Break Bulk Lines.
      WarehousePick.WhseActivityLines.ChangeUnitOfMeasure.INVOKE;  // Use for error message.
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasureOnPutAway@135(No@1001 : Code[20]);
    VAR
      WarehousePutAway@1000 : TestPage 5770;
    BEGIN
      WarehousePutAway.OPENEDIT;
      WarehousePutAway.FILTER.SETFILTER("No.",No);
      WarehousePutAway.WhseActivityLines.ChangeUnitOfMeasure.INVOKE;  // Use for error message.
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasureOnWarehouseActivityLine@142(VAR WarehouseActivityLine@1000 : Record 5767;ActivityType@1004 : Option;ActionType@1001 : Option;SourceDocument@1002 : Option;SourceNo@1003 : Code[20];UnitOfMeasureCode@1005 : Code[10]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      LibraryVariableStorage.Enqueue(UnitOfMeasureCode);  // Enqueue for WarehouseChangeUnitOfMeasurePageHandler.
      LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CreateItemMakePositiveAdjustAndReleaseTransfer@217(VAR TransferHeader@1003 : Record 5740;FromLocationCode@1006 : Code[10];ToLocationCode@1007 : Code[10];PostShip@1005 : Boolean);
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1002 : Record 83;
      TransferLine@1004 : Record 5741;
      Quantity@1001 : Decimal;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity,LocationBlue.Code,'');
      CreateAndReleaseTransferOrder(TransferHeader,TransferLine,FromLocationCode,ToLocationCode,Item."No.",Quantity);
      IF PostShip THEN
        LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@196(VAR ProductionBOMLine@1002 : Record 99000772;ParentItem@1001 : Record 27;ComponentItemNo@1003 : Code[20]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,ParentItem."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ComponentItemNo,LibraryRandom.RandInt(5));
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@94(VAR ItemJournalLine@1000 : Record 83;EntryType@1004 : Option;ItemNo@1003 : Code[20];Quantity@1005 : Decimal;LocationCode@1001 : Code[10];BinCode@1006 : Code[20]);
    VAR
      LotNo@1008 : Code[20];
      AssignExpDate@1007 : Boolean;
    BEGIN
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,'');
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      IF LibraryVariableStorage.Length > 0 THEN BEGIN
        AssignExpDate := (LibraryVariableStorage.PeekInteger(1) = ItemTrackingMode::"Assign Lot No. & Expiration Date");
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Use from Item Journal.
        IF AssignExpDate THEN BEGIN
          EVALUATE(LotNo,LibraryVariableStorage.PeekText(2));
          SetExpirationDateReservationEntry(ItemNo,LotNo);
        END;
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithNewBinUsingItemTracking@130(VAR Bin@1000 : Record 7354;VAR LotNo@1004 : Code[20];ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity,Bin."Location Code",Bin.Code);
      GetLotNoFromItemTrackingLinesPageHandler(LotNo);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrder@97(PurchaseHeader@1000 : Record 38;Tracking@1002 : Boolean);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
      ItemTrackingMode@1003 : ' ,Assign Lot No.,Assign Multiple Lot No.,Select Entries';
    BEGIN
      CreateWarehouseReceipt(PurchaseHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Multiple Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        WarehouseReceiptLine.OpenItemTrackingLines;
      END;
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromSalesReturnOrder@179(SalesHeader@1000 : Record 36);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Sales Return Order",SalesHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndRegisterMovement@83(VAR WhseWorksheetLine@1000 : Record 7326;ItemNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      CreateMovement(WhseWorksheetLine,ItemNo);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Movement);
    END;

    LOCAL PROCEDURE CreateAndRegisterMovementAfterGetBinContentOnMovementWorksheet@211(Bin@1001 : Record 7354;ItemNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      GetBinContentOnMovementWorksheet(WhseWorksheetLine,Bin."Location Code",ItemNo);
      CreateMovement(WhseWorksheetLine,ItemNo);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      UpdateBinOnWarehouseActivityLine(
        WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Movement,
        WarehouseActivityLine."Action Type"::Place);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Movement);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromWarehouseShipmentUsingPurchaseReturnOrder@249(VAR WarehouseShipmentHeader@1004 : Record 7320;VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,ItemNo,LocationCode,Quantity);
      CreateAndReleaseWarehouseShipmentFromPurchaseReturnOrder(WarehouseShipmentHeader,PurchaseHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder@225(VAR WarehouseShipmentHeader@1005 : Record 7320;VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
      WarehouseActivityLine@1006 : Record 5767;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,'',Quantity,WORKDATE,FALSE,FALSE);  // Value required for test.
      CreatePickFromWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder@219(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,'','',LocationCode,'',Quantity,WORKDATE,FALSE);  // Tracking as False.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE);  // Tracking as False.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromWarehouseReceiptUsingSalesReturnOrder@255(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      CreateAndReleaseSalesReturnOrder(SalesHeader,ItemNo,LocationCode,LibraryRandom.RandDec(100,2));
      CreateAndPostWarehouseReceiptFromSalesReturnOrder(SalesHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Return Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterWarehouseJournalLine@209(EntryType@1006 : Option;Bin@1004 : Record 7354;ItemNo@1003 : Code[20];VariantCode@1002 : Code[10];UnitOfMeasureCode@1001 : Code[10];Quantity@1000 : Decimal);
    VAR
      WarehouseJournalLine@1005 : Record 7311;
    BEGIN
      WarehouseJournalSetup(Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",'',EntryType,ItemNo,Quantity);
      WarehouseJournalLine.VALIDATE("Variant Code",VariantCode);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseJournalLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseJournalLine.MODIFY(TRUE);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@34(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];ItemNo2@1008 : Code[20];JobNo@1009 : Code[20];LocationCode@1004 : Code[10];BinCode@1007 : Code[20];Quantity@1003 : Decimal;ExpectedReceiptDate@1005 : Date;Tracking@1006 : Boolean);
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,ItemNo,LocationCode,Quantity);
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.VALIDATE("Job No.",JobNo);
      IF BinCode <> '' THEN
        PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
      IF Tracking THEN
        PurchaseLine.OpenItemTrackingLines;
      IF ItemNo2 <> '' THEN
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrder@176(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@2(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];BinCode@1008 : Code[20];Quantity@1003 : Decimal;ShipmentDate@1005 : Date;Reserve@1006 : Boolean;Tracking@1007 : Boolean);
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,LocationCode,Quantity);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      IF BinCode <> '' THEN
        SalesLine.VALIDATE("Bin Code",BinCode);
      SalesLine.MODIFY(TRUE);
      IF Reserve THEN
        SalesLine.ShowReservation;
      IF Tracking THEN
        SalesLine.OpenItemTrackingLines;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesReturnOrder@178(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@167(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      TransferLine.VALIDATE("Qty. to Ship",Quantity);
      TransferLine.MODIFY(TRUE);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromPurchaseReturnOrder@177(VAR WarehouseShipmentHeader@1002 : Record 7320;PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      FindWarehouseShipmentLine(
        WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromSalesOrder@19(VAR WarehouseShipmentHeader@1002 : Record 7320;SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      CreateWarehouseShipment(SalesHeader);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrder@198(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@120(VAR Location@1000 : Record 14;RequireReceive@1001 : Boolean;RequirePutAway@1002 : Boolean;RequireShipment@1003 : Boolean;RequirePick@1004 : Boolean;BinMandatory@1005 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.VALIDATE("Require Put-away",RequirePutAway);
      Location.VALIDATE("Require Shipment",RequireShipment);
      Location.VALIDATE("Require Pick",RequirePick);
      Location."Bin Mandatory" := BinMandatory;
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithBulkReceiveShipmentBins@240(VAR Location@1000 : Record 14);
    VAR
      Bin@1001 : Record 7354;
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      WITH Location DO BEGIN
        CreateAndUpdateLocation(Location,TRUE,TRUE,TRUE,TRUE,TRUE);
        LibraryWarehouse.CreateNumberOfBins(Code,'','',3,FALSE);
        LibraryWarehouse.FindBin(Bin,Code,'',1);
        VALIDATE("Receipt Bin Code",Bin.Code);
        LibraryWarehouse.FindBin(Bin,Code,'',2);
        VALIDATE("Shipment Bin Code",Bin.Code);
        MODIFY(TRUE);

        LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Code,FALSE);
      END;
    END;

    LOCAL PROCEDURE CreateBaseCalendarWithBaseCalendarChange@95(VAR BaseCalendar@1000 : Record 7600);
    VAR
      BaseCalendarChange@1001 : Record 7601;
    BEGIN
      LibraryService.CreateBaseCalendar(BaseCalendar);
      LibraryInventory.CreateBaseCalendarChange(
        BaseCalendarChange,BaseCalendar.Code,BaseCalendarChange."Recurring System"::"Weekly Recurring",0D,
        BaseCalendarChange.Day::Sunday);  // Use 0D for Date.
    END;

    LOCAL PROCEDURE CreateBinWithWarehouseClassCode@146(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];ZoneCode@1002 : Code[10];BinTypeCode@1003 : Code[10];WarehouseClassCode@1004 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,ZoneCode,BinTypeCode);
      Bin.VALIDATE("Warehouse Class Code",WarehouseClassCode);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinContent@96(VAR BinContent@1000 : Record 7302;Bin@1001 : Record 7354;Item@1002 : Record 27);
    BEGIN
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithShippingAgentAndBaseCalendar@139(VAR Customer@1000 : Record 18;ShippingAgentServices@1001 : Record 5790;BaseCalendarCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Shipping Agent Code",ShippingAgentServices."Shipping Agent Code");
      Customer.VALIDATE("Shipping Agent Service Code",ShippingAgentServices.Code);
      Customer.VALIDATE("Base Calendar Code",BaseCalendarCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@54(VAR ItemTrackingCode@1001 : Record 6502;Serial@1002 : Boolean;Lot@1003 : Boolean;StrictExpirationPosting@1000 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",StrictExpirationPosting);
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",StrictExpirationPosting);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeWithLotInformation@160(VAR ItemTrackingCode@1000 : Record 6502);
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);  // Lot Item Tracking.
      ItemTrackingCode.VALIDATE("Lot Info. Inbound Must Exist",TRUE);
      ItemTrackingCode.VALIDATE("Lot Info. Outbound Must Exist",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingLine@27(VAR ItemTrackingLines@1000 : TestPage 6510;Quantity@1001 : Decimal);
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Enqueue Lot No.
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@23(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,LibraryRandom.RandInt(5) + 1);
    END;

    LOCAL PROCEDURE CreateItemWithFlushingMethod@207(VAR Item@1000 : Record 27;FlushingMethod@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Flushing Method",FlushingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@214(VAR ParentItem@1000 : Record 27;VAR ProductionBOMLine@1003 : Record 99000772;FlushingMethod@1002 : Option);
    VAR
      ComponentItem@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      CreateItemWithFlushingMethod(ComponentItem,FlushingMethod);
      CreateAndCertifyProductionBOM(ProductionBOMLine,ParentItem,ComponentItem."No.");
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMLine."Production BOM No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithWarehouseClassProductGroup@191(VAR WarehouseClass@1000 : Record 7304;VAR Item@1002 : Record 27);
    VAR
      ProductGroup@1001 : Record 5723;
    BEGIN
      CreateProductGroupWithWarehouseClass(ProductGroup,WarehouseClass);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Product Group Code",ProductGroup.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMovement@43(VAR WhseWorksheetLine@1000 : Record 7326;ItemNo@1001 : Code[20]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.FINDFIRST;
      LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,0,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreatePick@47(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1001 : Code[20]);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheetLine@48(WhseWorksheetName@1002 : Record 7327;WarehouseDocumentNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      WhseWorksheetLine@1003 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WarehouseDocumentNo,ItemNo);

      // Taking 0 for MaxNoOfLines, MaxNoOfSourceDoc and SortPick.
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        WhseWorksheetName."Location Code",'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseInternalPick@67(VAR WhseInternalPickHeader@1000 : Record 7333;Bin@1001 : Record 7354;ItemNo@1003 : Code[20];VariantCode@1004 : Code[10];Quantity@1005 : Decimal);
    VAR
      WhseInternalPickLine@1002 : Record 7334;
    BEGIN
      CreateWarehouseInternalPickHeader(WhseInternalPickHeader,Bin);
      CreateWarehouseInternalPickLine(WhseInternalPickLine,WhseInternalPickHeader,ItemNo,VariantCode,Quantity);
      LibraryWarehouse.ReleaseWarehouseInternalPick(WhseInternalPickHeader);
      WhseInternalPickLine.SetHideValidationDialog(TRUE);
      WhseInternalPickLine.CreatePickDoc(WhseInternalPickLine,WhseInternalPickHeader);
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipment@32(VAR WarehouseShipmentHeader@1002 : Record 7320;SalesHeader@1000 : Record 36);
    BEGIN
      CreateWarehouseShipment(SalesHeader);
      CreatePick(WarehouseShipmentHeader,SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateProductGroupWithWarehouseClass@208(VAR ProductGroup@1001 : Record 5723;VAR WarehouseClass@1000 : Record 7304);
    BEGIN
      LibraryWarehouse.CreateWarehouseClass(WarehouseClass);
      LibraryInventory.CreateProductGroup(ProductGroup,'');
      ProductGroup.VALIDATE("Warehouse Class Code",WarehouseClass.Code);
      ProductGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@210(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;ItemNo@1003 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@212(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;DocumentType@1001 : Option;ItemNo@1003 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@154(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];JobNo@1004 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Job No.",JobNo);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@115(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37;CustomerNo@1001 : Code[20];ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];JobNo@1005 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLine(SalesLine,SalesHeader,ItemNo,LocationCode,JobNo);
    END;

    LOCAL PROCEDURE CreateShippingAgentWithShippingAgentService@133(VAR ShippingAgentServices@1001 : Record 5790;BaseCalendarCode@1003 : Code[10]);
    VAR
      ShippingAgent@1000 : Record 291;
      ShippingTime@1002 : DateFormula;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      EVALUATE(ShippingTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
      ShippingAgentServices.VALIDATE("Base Calendar Code",BaseCalendarCode);
      ShippingAgentServices.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPickHeader@55(VAR WhseInternalPickHeader@1000 : Record 7333;Bin@1001 : Record 7354);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,Bin."Location Code");
      WhseInternalPickHeader.VALIDATE("To Zone Code",Bin."Zone Code");
      WhseInternalPickHeader.VALIDATE("To Bin Code",Bin.Code);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPickLine@62(VAR WhseInternalPickLine@1001 : Record 7334;WhseInternalPickHeader@1000 : Record 7333;ItemNo@1002 : Code[20];VariantCode@1004 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo,Quantity);
      WhseInternalPickLine.VALIDATE("Variant Code",VariantCode);
      WhseInternalPickLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceipt@218(PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptAndCalculateCrossDockWithItemTracking@61(VAR WarehouseReceiptLine@1001 : Record 7317;PurchaseHeader@1000 : Record 38;ItemTrackingMode@1004 : Option);
    VAR
      WhseCrossDockOpportunity@1003 : Record 5768;
    BEGIN
      CreateWarehouseReceipt(PurchaseHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      LibraryWarehouse.CalculateCrossDockLines(
        WhseCrossDockOpportunity,'',WarehouseReceiptLine."No.",WarehouseReceiptLine."Location Code");
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      WarehouseReceiptLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeaderWithLocation@129(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptWithGetSourceDocument@86(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    VAR
      WarehouseSourceFilter@1002 : Record 5771;
    BEGIN
      CreateWarehouseReceiptHeaderWithLocation(WarehouseReceiptHeader,LocationCode);
      LibraryWarehouse.GetSourceDocumentsReceipt(WarehouseReceiptHeader,WarehouseSourceFilter,LocationCode);
    END;

    LOCAL PROCEDURE CreateWarehouseShipment@222(SalesHeader@1000 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeaderWithLocation@173(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationCode);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentWithGetSourceDocument@171(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1003 : Code[10]);
    VAR
      WarehouseSourceFilter@1001 : Record 5771;
    BEGIN
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationCode);
    END;

    LOCAL PROCEDURE CreateZoneAndBin@145(VAR Bin@1002 : Record 7354;LocationCode@1007 : Code[10];WarehouseClassCode@1001 : Code[10];Receive@1006 : Boolean;Ship@1005 : Boolean;PutAway@1004 : Boolean;Pick@1003 : Boolean);
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      LibraryWarehouse.CreateZone(
        Zone,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Zone.FIELDNO(Code),DATABASE::Zone),1,
          LibraryUtility.GetFieldLength(DATABASE::Zone,Zone.FIELDNO(Code))),
        LocationCode,LibraryWarehouse.SelectBinType(Receive,Ship,PutAway,Pick),WarehouseClassCode,'',0,FALSE);  // Use 0 for Zone Rank.
      CreateBinWithWarehouseClassCode(Bin,Zone."Location Code",Zone.Code,Zone."Bin Type Code",WarehouseClassCode);
    END;

    LOCAL PROCEDURE MockWarehouseActivityLineAndBin@283(VAR WarehouseActivityLine@1001 : Record 5767;VAR Bin@1000 : Record 7354);
    BEGIN
      WITH Bin DO BEGIN
        Code := LibraryUtility.GenerateGUID;
        "Location Code" := LibraryUtility.GenerateGUID;
        INSERT;
      END;

      WITH WarehouseActivityLine DO BEGIN
        "No." := LibraryUtility.GenerateGUID;
        "Bin Code" := Bin.Code;
        "Location Code" := Bin."Location Code";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE DeletePick@6(SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE GetBinContentOnMovementWorksheet@42(VAR WhseWorksheetLine@1001 : Record 7326;LocationCode@1005 : Code[10];ItemNo@1006 : Code[20]);
    VAR
      WhseWorksheetTemplate@1004 : Record 7328;
      WhseWorksheetName@1003 : Record 7327;
      BinContent@1002 : Record 7302;
      WhseInternalPutAwayHeader@1000 : Record 7331;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Movement);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhseWorksheetLine.INIT;
      WhseWorksheetLine.VALIDATE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.VALIDATE(Name,WhseWorksheetName.Name);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      WhseInternalPutAwayHeader.INIT;
      LibraryWarehouse.WhseGetBinContent(BinContent,WhseWorksheetLine,WhseInternalPutAwayHeader,0);  // Use 0 for Movement Worksheet.
    END;

    LOCAL PROCEDURE GetLotNoFromItemTrackingLinesPageHandler@80(VAR LotNo@1000 : Code[20]);
    VAR
      DequeueVariable@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
    END;

    LOCAL PROCEDURE FilterPostedWarehouseReceiptLine@134(VAR PostedWhseReceiptLine@1002 : Record 7319;SourceDocument@1003 : Option;SourceNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      PostedWhseReceiptLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseReceiptLine.SETRANGE("Source No.",SourceNo);
      PostedWhseReceiptLine.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterWarehouseActivityLine@79(VAR WarehouseActivityLine@1000 : Record 5767;ActionType@1001 : Option;ItemNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10];LocationCode@1004 : Code[10];ZoneCode@1005 : Code[10];BinCode@1006 : Code[20]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("Zone Code",ZoneCode);
      WarehouseActivityLine.SETRANGE("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE FindBin@9(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode);
      Bin.SETRANGE("Location Code",Zone."Location Code");
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,Zone."Location Code",Zone.Code,LibraryRandom.RandInt(Bin.COUNT));  // Find Random Bin.
    END;

    LOCAL PROCEDURE FindBinContent@78(VAR BinContent@1000 : Record 7302;Bin@1001 : Record 7354;ItemNo@1002 : Code[20]);
    BEGIN
      BinContent.SETRANGE("Location Code",Bin."Location Code");
      BinContent.SETRANGE("Zone Code",Bin."Zone Code");
      BinContent.SETRANGE("Bin Code",Bin.Code);
      BinContent.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FindCrossDockWarehouseEntry@66(VAR WarehouseEntry@1002 : Record 7312;Location@1001 : Record 14;SourceDocument@1003 : Option;SourceNo@1004 : Code[20];ItemNo@1005 : Code[20];LotNo@1006 : Code[20]);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.GET(Location.Code,Location."Cross-Dock Bin Code");
      WarehouseEntry.SETRANGE("Source Document",SourceDocument);
      WarehouseEntry.SETRANGE("Source No.",SourceNo);
      FindWarehouseEntry(WarehouseEntry,WarehouseEntry."Entry Type"::Movement,Bin,ItemNo,LotNo);
    END;

    LOCAL PROCEDURE FindRegisteredWarehouseActivityLine@100(VAR RegisteredWhseActivityLine@1000 : Record 5773;ActivityType@1001 : Option;SourceDocument@1002 : Option;SourceNo@1003 : Code[20];ActionType@1004 : Option;LocationCode@1005 : Code[10];ItemNo@1006 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Location Code",LocationCode);
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@8(VAR WarehouseActivityLine@1001 : Record 5767;SourceDocument@1000 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseEntry@143(VAR WarehouseEntry@1000 : Record 7312;EntryType@1001 : Option;Bin@1002 : Record 7354;ItemNo@1003 : Code[20];LotNo@1004 : Code[20]);
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Location Code",Bin."Location Code");
      WarehouseEntry.SETRANGE("Zone Code",Bin."Zone Code");
      WarehouseEntry.SETRANGE("Bin Code",Bin.Code);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Lot No.",LotNo);
      WarehouseEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@11(VAR WarehouseReceiptLine@1002 : Record 7317;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@141(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseWorksheetLine@41(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;WarehouseDocumentNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",WhseWorksheetName."Location Code");
      IF WarehouseDocumentNo <> '' THEN BEGIN
        WhseWorksheetLine.SETRANGE("Whse. Document Type",WhseWorksheetLine."Whse. Document Type"::Shipment);
        WhseWorksheetLine.SETRANGE("Whse. Document No.",WarehouseDocumentNo);
      END;
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@10(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Warehouse Class Code",'');
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // Find PICK Zone.
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE GetWarehouseDocumentOnPickWorksheet@33(VAR WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
      WhsePickRequest@1003 : Record 7325;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePickRequest.SETRANGE(Status,WhsePickRequest.Status::Released);
      WhsePickRequest.SETRANGE("Completely Picked",FALSE);
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      LibraryWarehouse.GetOutboundSourceDocuments(WhsePickRequest,WhseWorksheetName,LocationCode);
    END;

    LOCAL PROCEDURE PostOutputJournalAfterExplodeRouting@1106(ProductionOrderNo@1000 : Code[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@22(WarehouseReceiptNo@1000 : Code[20]);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(WarehouseReceiptNo);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE RegisterPickAfterPostWarehouseShipmentWithUpdateBinUsingSalesOrder@155(VAR WarehouseShipmentHeader@1007 : Record 7320;Bin@1006 : Record 7354;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseShipmentLine@1005 : Record 7321;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,LocationCode,'',Quantity,WORKDATE,FALSE,FALSE);  // Reserve as False and Tracking as False.
      CreateWarehouseShipment(SalesHeader);
      UpdateBinOnWarehouseShipmentLine(WarehouseShipmentLine,Bin,SalesHeader."No.");
      CreatePick(WarehouseShipmentHeader,SalesHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE RegisterPutAwayAfterPostWarehouseReceiptWithUpdateBinUsingPurchaseOrder@152(Bin@1006 : Record 7354;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseReceiptLine@1005 : Record 7317;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,'','',LocationCode,'',Quantity,WORKDATE,FALSE);  // Tracking as False.
      CreateWarehouseReceipt(PurchaseHeader);
      UpdateBinOnWarehouseReceiptLine(WarehouseReceiptLine,Bin,PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1004 : Option;SourceNo@1002 : Code[20];ActivityType@1001 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReopenAndDeleteWarehouseShipment@37(VAR WarehouseShipmentHeader@1000 : Record 7320);
    BEGIN
      WarehouseShipmentHeader.FIND;
      LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);
      WarehouseShipmentHeader.FIND;
      WarehouseShipmentHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE ReserveProductionOrderComponent@199(VAR ProdOrderComponent@1001 : Record 5407;ProductionOrder@1002 : Record 5405);
    VAR
      ReservationMode@1000 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line';
    BEGIN
      LibraryVariableStorage.Enqueue(ReservationMode::"Reserve From Current Line");
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.ShowReservation;
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLine@186(VAR PurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",OrderNo);
      PurchRcptLine.FINDFIRST;
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoReturnReceiptLine@187(VAR ReturnReceiptLine@1000 : Record 6661;ReturnOrderNo@1001 : Code[20]);
    BEGIN
      ReturnReceiptLine.SETRANGE("Return Order No.",ReturnOrderNo);
      ReturnReceiptLine.FINDFIRST;
      LibrarySales.UndoReturnReceiptLine(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE UndoReturnShipmentLine@185(VAR ReturnShipmentLine@1000 : Record 6651;ReturnOrderNo@1001 : Code[20]);
    BEGIN
      ReturnShipmentLine.SETRANGE("Return Order No.",ReturnOrderNo);
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UndoSalesShipmentLine@182(VAR SalesShipmentLine@1000 : Record 111;OrderNo@1001 : Code[20]);
    BEGIN
      SalesShipmentLine.SETRANGE("Order No.",OrderNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UpdateAlwaysCreatePickLineOnLocation@151(VAR Location@1000 : Record 14;VAR OldAlwaysCreatePickLine@1001 : Boolean;NewAlwaysCreatePickLine@1002 : Boolean);
    BEGIN
      OldAlwaysCreatePickLine := Location."Always Create Pick Line";
      Location.VALIDATE("Always Create Pick Line",NewAlwaysCreatePickLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnPutAwayAndRegisterPutAway@50(VAR Bin@1000 : Record 7354;LocationCode@1003 : Code[10];SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindBin(Bin,LocationCode);
      UpdateBinOnWarehouseActivityLine(
        WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseActivityLine@56(VAR WarehouseActivityLine@1000 : Record 5767;Bin@1004 : Record 7354;SourceDocument@1003 : Option;SourceNo@1002 : Code[20];ActivityType@1001 : Option;ActionType@1005 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.MODIFYALL("Zone Code",Bin."Zone Code",TRUE);
      WarehouseActivityLine.MODIFYALL("Bin Code",Bin.Code,TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseReceiptLine@147(VAR WarehouseReceiptLine@1000 : Record 7317;Bin@1002 : Record 7354;SourceNo@1001 : Code[20]);
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseReceiptLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseShipmentLine@150(VAR WarehouseShipmentLine@1000 : Record 7321;Bin@1002 : Record 7354;SourceNo@1001 : Code[20]);
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SourceNo);
      WarehouseShipmentLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseShipmentLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinQuantityToHandleAndLotNoOnPickAndRegisterPick@122(Bin@1000 : Record 7354;SourceNo@1002 : Code[20];Quantity@1003 : Decimal;LotNo@1004 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      UpdateBinOnWarehouseActivityLine(
        WarehouseActivityLine,Bin,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take);
      UpdateQuantityToHandleAndLotNoOnPickLines(WarehouseActivityLine."Activity Type"::Pick,SourceNo,Quantity,LotNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE UpdateExpirationDateReservationEntry@38(ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE),TRUE);
    END;

    LOCAL PROCEDURE SetExpirationDateReservationEntry@300(ItemNo@1001 : Code[20];LotNo@1002 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Lot No.",LotNo);
        MODIFYALL("Expiration Date",LibraryVariableStorage.DequeueDate,TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWarehouseJournal@113(Bin@1000 : Record 7354;Item@1002 : Record 27;VariantCode@1004 : Code[10];UnitOfMeasureCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      CreateAndRegisterWarehouseJournalLine(
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Bin,Item."No.",VariantCode,UnitOfMeasureCode,Quantity);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemTrackingOnTransferLine@172(VAR TransferLine@1000 : Record 5741;ItemTrackingMode@1001 : Option;Direction@1002 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      TransferLine.OpenItemTrackingLines(Direction);
    END;

    LOCAL PROCEDURE UpdateNoSeriesOnItemJournalBatch@105(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateOutboundWarehouseHandlingTimeAndBaseCalendarOnLocation@121(VAR Location@1000 : Record 14;BaseCalendarCode@1002 : Code[10]);
    VAR
      OutboundWhseHandlingTime@1001 : DateFormula;
    BEGIN
      EVALUATE(OutboundWhseHandlingTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      Location.VALIDATE("Outbound Whse. Handling Time",OutboundWhseHandlingTime);
      Location.VALIDATE("Base Calendar Code",BaseCalendarCode);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePickAccordingToFEFOOnLocation@63(VAR Location@1000 : Record 14;NewPickAccordingToFEFO@1002 : Boolean) OldPickAccordingToFEFO : Boolean;
    BEGIN
      WITH Location DO BEGIN
        OldPickAccordingToFEFO := "Pick According to FEFO";
        VALIDATE("Pick According to FEFO",NewPickAccordingToFEFO);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchaseUnitOfMeasureOnItem@126(VAR Item@1000 : Record 27;PurchaseUnitOfMeasure@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Purch. Unit of Measure",PurchaseUnitOfMeasure);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityBaseOnReservationEntry@71(ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Quantity (Base)",ReservationEntry."Quantity (Base)" / 2,TRUE);  // Reserve partial Quantity.
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLineAndReserve@15(VAR SalesLine@1000 : Record 37;Quantity@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
      SalesLine.ShowReservation;
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleAndLotNoOnPickLines@103(ActivityType@1001 : Option;SourceNo@1002 : Code[20];QuantityToHandle@1004 : Decimal;LotNo@1005 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,ActivityType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",QuantityToHandle);
        WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWarehouseWorksheetLine@58(WhseWorksheetName@1003 : Record 7327;WarehouseDocumentNo@1002 : Code[20];ItemNo@1001 : Code[20];QuantityToHandle@1000 : Decimal);
    VAR
      WhseWorksheetLine@1004 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WarehouseDocumentNo,ItemNo);
      WhseWorksheetLine.SetCurrentFieldNo(WhseWorksheetLine.FIELDNO("Qty. to Handle"));
      WhseWorksheetLine.VALIDATE("Qty. to Handle",QuantityToHandle);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReceiptPostingPolicyOnWarehouseSetup@91(VAR OldReceiptPostingPolicy@1002 : Integer;NewReceiptPostingPolicy@1001 : Integer);
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      OldReceiptPostingPolicy := WarehouseSetup."Receipt Posting Policy";
      WarehouseSetup.VALIDATE("Receipt Posting Policy",NewReceiptPostingPolicy);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReserveOnItemAsAlways@30(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingLinkCodeOnProductionOrderComponent@200(VAR ProdOrderComponent@1000 : Record 5407);
    VAR
      RoutingLink@1001 : Record 99000777;
    BEGIN
      RoutingLink.FINDFIRST;
      ProdOrderComponent.VALIDATE("Routing Link Code",RoutingLink.Code);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyBinContent@148(Bin@1001 : Record 7354;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",Bin."Location Code");
      BinContent.SETRANGE("Zone Code",Bin."Zone Code");
      BinContent.SETRANGE("Bin Code",Bin.Code);
      BinContent.SETRANGE("Warehouse Class Code",Bin."Warehouse Class Code");
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyCrossDockWarehouseEntry@64(SourceDocument@1005 : Option;SourceNo@1006 : Code[20];Location@1007 : Record 14;ItemNo@1003 : Code[20];LotNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      FindCrossDockWarehouseEntry(WarehouseEntry,Location,SourceDocument,SourceNo,ItemNo,LotNo);
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyCrossDockWarehouseEntryWithSerialNo@131(SourceDocument@1005 : Option;SourceNo@1006 : Code[20];Location@1007 : Record 14;ItemNo@1003 : Code[20];LotNo@1001 : Code[20];TotalQuantity@1000 : Decimal;Quantity@1009 : Decimal);
    VAR
      WarehouseEntry@1002 : Record 7312;
      Quantity2@1008 : Decimal;
    BEGIN
      FindCrossDockWarehouseEntry(WarehouseEntry,Location,SourceDocument,SourceNo,ItemNo,LotNo);
      WarehouseEntry.FINDSET;
      REPEAT
        WarehouseEntry.TESTFIELD("Serial No.");
        WarehouseEntry.TESTFIELD(Quantity,Quantity);
        Quantity2 += WarehouseEntry.Quantity;
      UNTIL WarehouseEntry.NEXT = 0;
      Assert.AreEqual(TotalQuantity,Quantity2,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyEmptyPostedWarehouseReceiptLine@127(SourceNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      FilterPostedWarehouseReceiptLine(
        PostedWhseReceiptLine,PostedWhseReceiptLine."Source Document"::"Inbound Transfer",SourceNo,ItemNo);
      Assert.IsTrue(PostedWhseReceiptLine.ISEMPTY,STRSUBSTNO(MustBeEmpty,PostedWhseReceiptLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyEmptyWarehouseEntry@90(ItemNo@1001 : Code[20]);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      Assert.IsTrue(WarehouseEntry.ISEMPTY,STRSUBSTNO(MustBeEmpty,WarehouseEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyFinishedProductionOrderComponent@203(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];FlushingMethod@1003 : Option;ExpectedQuantity@1004 : Decimal);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProdOrderComponent.Status::Finished);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.SETRANGE("Flushing Method",FlushingMethod);
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.TESTFIELD("Expected Quantity",ExpectedQuantity);
      ProdOrderComponent.TESTFIELD("Remaining Quantity",0);  // Use 0 for fully consumed.
    END;

    LOCAL PROCEDURE VerifyFinishedProductionOrderLine@202(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Finished);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
      ProdOrderLine.TESTFIELD("Finished Quantity",Quantity);
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@87(VAR ItemJournalLine@1000 : Record 83;Bin@1002 : Record 7354;ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Location Code",Bin."Location Code");
      ItemJournalLine.TESTFIELD("Bin Code",Bin.Code);
      ItemJournalLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@39(EntryType@1005 : Option;ItemNo@1001 : Code[20];LotNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Lot No.",LotNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyMovementLine@44(ActionType@1001 : Option;SourceNo@3425 : Code[20];ItemNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10];LotNo@1004 : Code[20];LocationCode@1005 : Code[10];ZoneCode@1006 : Code[10];BinCode@1007 : Code[20];Quantity@1008 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FilterWarehouseActivityLine(WarehouseActivityLine,ActionType,ItemNo,UnitOfMeasureCode,LocationCode,ZoneCode,BinCode);
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",SourceNo,WarehouseActivityLine."Activity Type"::Movement);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPickLine@124(ActionType@1002 : Option;SourceNo@1000 : Code[20];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      Quantity2@1003 : Decimal;
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.FINDSET;
      REPEAT
        Quantity2 += WarehouseActivityLine.Quantity;
      UNTIL WarehouseActivityLine.NEXT = 0;
      Assert.AreEqual(Quantity,Quantity2,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyPickLineWithBin@51(Bin@1001 : Record 7354;ActionType@1003 : Option;SourceNo@1004 : Code[20];ItemNo@1002 : Code[20];VariantCode@1006 : Code[10];UnitOfMeasureCode@1008 : Code[10];Quantity@1007 : Decimal;MoveNext@1005 : Boolean);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FilterWarehouseActivityLine(
        WarehouseActivityLine,ActionType,ItemNo,UnitOfMeasureCode,Bin."Location Code",Bin."Zone Code",Bin.Code);
      WarehouseActivityLine.SETRANGE("Variant Code",VariantCode);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      IF MoveNext THEN
        WarehouseActivityLine.NEXT;
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLines@82(Bin@1003 : Record 7354;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];LotNo@1004 : Code[20];Quantity@1006 : Decimal);
    VAR
      PostedInvtPickLine@1000 : Record 7343;
      Quantity2@1005 : Decimal;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source Document",PostedInvtPickLine."Source Document"::"Sales Order");
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Location Code",Bin."Location Code");
      PostedInvtPickLine.SETRANGE("Bin Code",Bin.Code);
      PostedInvtPickLine.SETRANGE("Item No.",ItemNo);
      PostedInvtPickLine.SETRANGE("Lot No.",LotNo);
      PostedInvtPickLine.FINDSET;
      REPEAT
        Quantity2 += PostedInvtPickLine.Quantity;
      UNTIL PostedInvtPickLine.NEXT = 0;
      Assert.AreEqual(Quantity,Quantity2,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyPostedWarehouseReceiptLine@107(SourceDocument@1004 : Option;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;MoveNext@1005 : Boolean);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      FilterPostedWarehouseReceiptLine(PostedWhseReceiptLine,SourceDocument,SourceNo,ItemNo);
      PostedWhseReceiptLine.FINDSET;
      IF MoveNext THEN
        PostedWhseReceiptLine.NEXT;
      PostedWhseReceiptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWarehouseShipmentLine@175(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;MoveNext@1005 : Boolean);
    VAR
      PostedWhseShipmentLine@1000 : Record 7323;
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseShipmentLine.SETRANGE("Source No.",SourceNo);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.FINDSET;
      IF MoveNext THEN
        PostedWhseShipmentLine.NEXT;
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPurchaseReceiptLine@183(VAR PurchRcptLine@1000 : Record 121;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal;MoveNext@1004 : Boolean);
    BEGIN
      PurchRcptLine.SETRANGE("No.",ItemNo);
      PurchRcptLine.SETRANGE("Location Code",LocationCode);
      PurchRcptLine.FINDSET;
      IF MoveNext THEN
        PurchRcptLine.NEXT;
      PurchRcptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRegisteredPickLine@24(ActionType@1002 : Option;SourceDocument@1003 : Option;SourceNo@1000 : Code[20];Bin@1006 : Record 7354;ItemNo@1004 : Code[20];VariantCode@1008 : Code[10];UnitOfMeasureCode@1010 : Code[10];LotNo@1007 : Code[20];Quantity@1005 : Decimal;MoveNext@1009 : Boolean);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Bin Code",Bin.Code);
      RegisteredWhseActivityLine.SETRANGE("Zone Code",Bin."Zone Code");
      RegisteredWhseActivityLine.SETRANGE("Lot No.",LotNo);
      RegisteredWhseActivityLine.SETRANGE("Variant Code",VariantCode);
      RegisteredWhseActivityLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      FindRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Activity Type"::Pick,SourceDocument,SourceNo,ActionType,
        Bin."Location Code",ItemNo);
      IF MoveNext THEN
        RegisteredWhseActivityLine.NEXT;
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRegisteredWarehouseActivityLine@26(ActivityType@1006 : Option;SourceDocument@1002 : Option;SourceNo@1000 : Code[20];LocationCode@1007 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      FindRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine,ActivityType,SourceDocument,SourceNo,RegisteredWhseActivityLine."Action Type"::" ",LocationCode,
        ItemNo);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@21(ItemNo@1003 : Code[20];SourceType@1001 : Integer;SourceID@1002 : Code[20];Quantity@1004 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Source Type",SourceType);
      ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReturnShipmentLine@181(VAR ReturnShipmentLine@1000 : Record 6651;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;MoveNext@1004 : Boolean);
    BEGIN
      ReturnShipmentLine.SETRANGE("No.",ItemNo);
      ReturnShipmentLine.SETRANGE("Location Code",LocationCode);
      ReturnShipmentLine.FINDSET;
      IF MoveNext THEN
        ReturnShipmentLine.NEXT;
      ReturnShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesLine@194(VAR SalesLine@1005 : Record 37;ShippingAgentServices@1004 : Record 5790;OutboundWhseHandlingTime@1002 : DateFormula);
    VAR
      CustomizedCalendarChange@1003 : Record 7602;
      PlannedDeliveryDate@1000 : Date;
      PlannedShipmentDate@1006 : Date;
    BEGIN
      PlannedShipmentDate :=
        LibraryWarehouse.CalculatePlannedDate(
          FORMAT(OutboundWhseHandlingTime),WORKDATE,CustomizedCalendarChange."Source Type"::Location,SalesLine."Location Code",'',
          CustomizedCalendarChange."Source Type"::"Shipping Agent",ShippingAgentServices."Shipping Agent Code",
          ShippingAgentServices.Code,TRUE);

      PlannedDeliveryDate :=
        LibraryWarehouse.CalculatePlannedDate(
          FORMAT(ShippingAgentServices."Shipping Time"),PlannedShipmentDate,CustomizedCalendarChange."Source Type"::"Shipping Agent",
          ShippingAgentServices."Shipping Agent Code",
          ShippingAgentServices.Code,CustomizedCalendarChange."Source Type"::Customer,SalesLine."Sell-to Customer No.",'',TRUE);  // 0D required for test.

      SalesLine.TESTFIELD("Outbound Whse. Handling Time",OutboundWhseHandlingTime);
      SalesLine.TESTFIELD("Shipping Time",ShippingAgentServices."Shipping Time");
      SalesLine.TESTFIELD("Shipment Date",WORKDATE);
      SalesLine.TESTFIELD("Planned Shipment Date",PlannedShipmentDate);
      SalesLine.TESTFIELD("Planned Delivery Date",PlannedDeliveryDate);
    END;

    LOCAL PROCEDURE VerifySalesShipmentLine@180(VAR SalesShipmentLine@1000 : Record 111;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;MoveNext@1004 : Boolean);
    BEGIN
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      SalesShipmentLine.SETRANGE("Location Code",LocationCode);
      SalesShipmentLine.FINDSET;
      IF MoveNext THEN
        SalesShipmentLine.NEXT;
      SalesShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@53(EntryType@1001 : Option;Bin@1002 : Record 7354;ItemNo@1003 : Code[20];UnitOfMeasureCode@1004 : Code[10];LotNo@1005 : Code[20];Quantity@1006 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      FindWarehouseEntry(WarehouseEntry,EntryType,Bin,ItemNo,LotNo);
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@149(VAR WarehouseActivityLine@1000 : Record 5767;ItemNo@1003 : Code[20];UnitOfMeasureCode@1002 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      WarehouseActivityLine.FIND;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseWorksheetLine@49(WhseWorksheetName@1001 : Record 7327;WarehouseDocumentNo@1002 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;QuantityToHandle@1005 : Decimal;AvailableQuantityToPick@1006 : Decimal);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WarehouseDocumentNo,ItemNo);
      WhseWorksheetLine.TESTFIELD(Quantity,Quantity);
      WhseWorksheetLine.TESTFIELD("Qty. to Handle",QuantityToHandle);
      Assert.AreEqual(AvailableQuantityToPick,WhseWorksheetLine.AvailableQtyToPick,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyWhseShipmentLineExist@247(HeaderNo@1000 : Code[20];SourceDocNo@1001 : Code[20];Exist@1002 : Boolean);
    VAR
      WhseShipmentLine@1003 : Record 7321;
    BEGIN
      WhseShipmentLine.SETRANGE("No.",HeaderNo);
      WhseShipmentLine.SETRANGE("Source No.",SourceDocNo);
      Assert.AreEqual(Exist,NOT WhseShipmentLine.ISEMPTY,STRSUBSTNO(CheckShipmentLineErr,SourceDocNo,FORMAT(Exist)));
    END;

    LOCAL PROCEDURE VerifyWhseReceiptLineExist@231(HeaderNo@1000 : Code[20];SourceDocNo@1001 : Code[20];Exist@1002 : Boolean);
    VAR
      WhseReceiptLine@1003 : Record 7317;
    BEGIN
      WhseReceiptLine.SETRANGE("No.",HeaderNo);
      WhseReceiptLine.SETRANGE("Source No.",SourceDocNo);
      Assert.AreEqual(Exist,NOT WhseReceiptLine.ISEMPTY,STRSUBSTNO(CheckReceiptLineErr,SourceDocNo,FORMAT(Exist)));
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@123(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    VAR
      DequeueVariable@1002 : Variant;
      CreateNewLotNo@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CreateNewLotNo := DequeueVariable;
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@108(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Quantity@1003 : Decimal;
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        ItemTrackingMode::"Assign Lot No.",ItemTrackingMode::"Assign Lot No. & Expiration Date":
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Enqueue Lot No.
          END;
        ItemTrackingMode::"Assign Multiple Lot No.":
          BEGIN
            Quantity := ItemTrackingLines.Quantity3.ASDECIMAL;
            CreateItemTrackingLine(ItemTrackingLines,Quantity / 2);  // Value required for test.
            ItemTrackingLines.NEXT;
            CreateItemTrackingLine(ItemTrackingLines,Quantity / 2);  // Value required for test.
          END;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::"Assign Serial No.":
          BEGIN
            LibraryVariableStorage.Enqueue(FALSE);  // Enqueue for EnterQuantityToCreatePageHandler.
            ItemTrackingLines."Assign Serial No.".INVOKE;
          END;
        ItemTrackingMode::"Assign Lot And Serial":
          BEGIN
            LibraryVariableStorage.Enqueue(TRUE);  // Enqueue for EnterQuantityToCreatePageHandler.
            ItemTrackingLines."Assign Serial No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Enqueue Lot No.
          END;
        ItemTrackingMode::"Blank Quantity Base":
          BEGIN
            ItemTrackingLines."Quantity (Base)".SETVALUE(0);
            ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(0);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@118(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@136(VAR Reservation@1000 : TestPage 498);
    VAR
      DequeueVariable@1001 : Variant;
      ReservationMode@1002 : 'Reserve From Current Line,Reserve From First Line,Verify Reserve Line,Cancel Reservation Current Line';
      Quantity@1003 : Decimal;
      ReservedQuantity@1004 : Decimal;
      QtyAllocatedInWhse@1005 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ReservationMode := DequeueVariable;
      CASE ReservationMode OF
        ReservationMode::"Reserve From Current Line":
          Reservation."Reserve from Current Line".INVOKE;
        ReservationMode::"Reserve From First Line":
          BEGIN
            Reservation.FIRST;
            Reservation."Reserve from Current Line".INVOKE;
          END;
        ReservationMode::"Verify Reserve Line":
          BEGIN
            Quantity := LibraryVariableStorage.DequeueDecimal;
            ReservedQuantity := LibraryVariableStorage.DequeueDecimal;
            QtyAllocatedInWhse := LibraryVariableStorage.DequeueDecimal;
            Reservation."Total Quantity".ASSERTEQUALS(Quantity);
            Reservation.TotalReservedQuantity.ASSERTEQUALS(ReservedQuantity);  // Value required for test.
            Reservation.QtyAllocatedInWarehouse.ASSERTEQUALS(QtyAllocatedInWhse);
            Reservation."Current Reserved Quantity".ASSERTEQUALS(ReservedQuantity);  // Value required for test.
          END;
        ReservationMode::"Cancel Reservation Current Line":
          Reservation.CancelReservationCurrentLine.INVOKE;
      END;
    END;

    [RequestPageHandler]
    PROCEDURE WarehouseChangeUnitOfMeasurePageHandler@110(VAR WhseChangeUnitOfMeasure@1000 : TestRequestPage 7314);
    VAR
      DequeueVariable@1002 : Variant;
      UnitOfMeasureCode@1001 : Code[10];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      UnitOfMeasureCode := DequeueVariable;
      WhseChangeUnitOfMeasure.UnitOfMeasureCode.SETVALUE(UnitOfMeasureCode);
      WhseChangeUnitOfMeasure.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE FiltersToGetSourceDocsPageHandler@241(VAR FiltersToGetSourceDocs@1000 : TestPage 5784);
    VAR
      DequeueVariable@1002 : Variant;
      FilterCode@1001 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      FilterCode := DequeueVariable;
      WHILE FiltersToGetSourceDocs.Code.VALUE <> FilterCode DO
        FiltersToGetSourceDocs.NEXT;
      FiltersToGetSourceDocs.Run.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE FiltersToGetSourceDocsModifyActionPageHandler@213(VAR FiltersToGetSourceDocs@1000 : TestPage 5784);
    VAR
      DequeueVariable@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      FiltersToGetSourceDocs.FILTER.SETFILTER(Code,DequeueVariable);
      FiltersToGetSourceDocs.Modify.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentFilterCardPageHandler@215(VAR SourceDocumentFilterCard@1000 : TestPage 5786);
    VAR
      DequeueVariable@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      SourceDocumentFilterCard.FILTER.SETFILTER("Shipment Date Filter",DequeueVariable);
      SourceDocumentFilterCard.FILTER.SETFILTER("Receipt Date Filter",DequeueVariable);
      SourceDocumentFilterCard."Sales Orders".SETVALUE(FALSE);
      SourceDocumentFilterCard.Run.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@57(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@184(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(ConfirmMessage,LocalMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
        1. Test and verify Pick from Warehouse Shipment Reserve against Purchase Order.
        2. Test and verify Pick from Warehouse Shipment Reserve against both Purchase Order and Available Inventory.
        3. Test and verify Available Quantity to Pick on Pick Worksheet with Reservation before update Quantity to Handle.
        4. Test and verify Available Quantity to Pick on Pick Worksheet with Reservation after update Quantity to Handle.
        5. Test and verify Pick from Pick Worksheet with Expired Item.
        6. Test and verify Pick from Pick Worksheet Only for Registered Put Away with Always Reserve Item.
        7. Test and verify Register Pick against Available Quantity on Different Bin with Different Lot.
        8. Test and verify Item Ledger Entries after create Put Away from Warehouse Receipt with Item Purchase UOM using multiple Lots.
        9. Test and verify Warehouse Entries after register Put Away from Warehouse Receipt with Item Purchase UOM using multiple Lots.
       10. Test and verify Warehouse Entries after register pick from Warehouse Shipment with Item Purchase UOM using multiple Lots.
       11. Test and verify Item Ledger Entry and registered Put Away Line after register Put Away from Warehouse Receipt with Location Bin Mandatory as False.
       12. Test and verify registered Pick Line after register Pick from Warehouse Shipment using Reservation with Location Bin Mandatory as False.
       13. Test and verify Quantity allocated in Warehouse on Reservation Page after post Warehouse Shipment using Reservation with Location Bin Mandatory as False.
       14. Test and verify Posted Inventory Pick Lines after posting remaining Inventory Pick after posting partial Inventory Pick from Sales Order with Lot Item Tracking.
       15. Test and verify Empty Bin Content after posting Item Journal.
       16. Test and verify Calculate Physical Inventory for Item with Empty Bin Content.
       17. Test and verify Purchase UOM Conversion on Movement using Multiple Lots.
       18. Test and verify Create Pick from Internal Pick after register Warehouse Movement with Item Variant.
       19. Test and verify Register Pick from Internal Pick after register Warehouse Movement with Item Variant.
       20. Test and verify UOM Conversion on Pick from Internal Pick with Item Variant.
       21. Test and verify UOM Conversion on Registered Pick from Internal Pick with Item Variant.
       22. Test and verify Post Warehouse Shipment after Calculate Cross Dock with Lot Item Tracking.
       23. Test and verify Post Warehouse Shipment after Calculate Cross Dock with Serial Item Tracking.
       24. Test and verify Post Warehouse Shipment after Calculate Cross Dock with Lot and Serial Item Tracking.
       25. Test and verify Change Unit of Measure on Warehouse Put Away with error.
       26. Test and verify Change Unit of Measure on Warehouse Put Away without error.
       27. Test and verify Change Unit of Measure on Warehouse Pick with error.
       28. Test and verify Change Unit of Measure on Warehouse Pick without error.
       29. Test and verify Post Purchase Order as Receive using multiple Items with and without Location.
       30. Test and verify Sales Order with multiple Base Calendars.
       31. Test and verify Register Movement after register Put Away using Warehouse Class.
       32. Test and verify Register Pick after register Movement using Warehouse Class.
       33. Test and verify Register Movement after register Pick using Warehouse Class.
       34. Test and verify Register Put Away with Lot Information Item Tracking.
       35. Test and verify Post Warehouse Shipment after register Pick with Lot Information Item Tracking.
       36. Test and verify Warehouse Receipt from Purchase Order with Job.
       37. Test and verify Warehouse Shipment from Sales Order with Job.
       38. Test and verify Warehouse Receipt from Transfer Order with Receipt Posting Policy before Posting Errors Are Not Processed.
       39. Test and verify Warehouse Receipt from Transfer Order with Receipt Posting Policy after Posting Errors Are Not Processed.
       40. Test and verify Undo Sales Shipment after post Warehouse Shipment from Sales Order using Pick.
       41. Test and verify Undo Return Shipment after post Warehouse Shipment from Purchase Return Order using Pick.
       42. Test and verify Cannot Undo Purchase Receipt after Post Warehouse Receipt from Purchase Order using Put Away.
       43. Test and verify Cannot Undo Return Receipt after post Warehouse Receipt from Sales Return Order using Put Away.
       44. Test and verify Undo Sales Shipment after Post Sales Order.
       45. Test and verify Undo Return Shipment after post Purchase Return Order.
       46. Test and verify Undo Sales Shipment after post Warehouse Shipment from Sales Order.
       47. Test and verify Undo Return Shipment after post Warehouse Shipment from Purchase Return Order.
       48. Test and verify Undo Purchase Receipt after post Warehouse Receipt from Purchase Order.
       49. Test and verify Undo Return Receipt after post Warehouse Receipt from Sales Return Order.
       50. Test and verify Undo Purchase Receipt before Cancel Reservation.
       51. Test and verify Undo Purchase Receipt after Cancel Reservation.
       52. Test and verify Finished Production Order with Component Flushing Method as Pick Backward using Pick.
       53. Test and verify Finished Production Order with Component Flushing Method as Pick Forward using Pick.
       54. Test and verify Finished Production Order with Component Flushing Method as Pick Backward using Pick Worksheet.
       55. Test and verify Finished Production Order with Component Flushing Method as Pick Forward using Pick Worksheet.
       56. Test and verify Positive Adjustment using Warehouse Item Journal.
       57. Test and verify Negative Adjustment using Warehouse Item Journal.
       58. Test and verify using Filters to Get Source Documents when there is Blocked customer
       59. Verify Page "Source Document Filter Card" filter Shipment Date. Positive Test.
       60. Verify Page "Source Document Filter Card" filter Shipment Date. Negative Test.
       61. Verify Page "Source Document Filter Card" filter Receipt Date. Positive Test.
       62. Verify Page "Source Document Filter Card" filter Receipt Date. Negative Test.
       63. Lot Tracked Item with Expiration Date on FEFO Location fully picked if inventory available.

        Covers Test Cases for WI - 295224
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------
        PickFromWarehouseShipmentReserveAgainstPurchaseOrder                                             203774
        PickFromWarehouseShipmentReserveAgainstBothPurchaseOrderAndAvailableInventory                    203774
        AvailableQuantityToPickOnPickWorksheetWithReservationBeforeUpdateQuantityToHandle                203775
        AvailableQuantityToPickOnPickWorksheetWithReservationAfterUpdateQuantityToHandle                 203775
        PickFromPickWorksheetWithExpiredItem                                                             203776

        Covers Test Cases for WI - 295225
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PickFromPickWorksheetOnlyForRegisteredPutAwayWithAlwaysReserveItem                                     164056
        RegisterPickAgainstAvailableQuantityOnDifferentBinWithDifferentLot                                     164123
        PutAwayFromWarehouseReceiptWithItemPurchaseUOMUsingMultipleLots                                        259604
        RegisterPutAwayFromWarehouseReceiptWithItemPurchaseUOMUsingMultipleLots                                259604
        RegisterPickFromWarehouseShipmentWithItemPurchaseUOMUsingMultipleLots                                  259604
        RegisterPutAwayFromWarehouseReceiptWithLocationBinMandatoryAsFalse                                     266074
        RegisterPickFromWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse                       266074
        QuantityAllocatedInWarehouseAfterPostWarehouseShipmentUsingReservationWithLocationBinMandatoryAsFalse  266074
        PostRemainingInventoryPickAfterPostingPartialInventoryPickFromSalesOrderWithLotItemTracking            127705
        EmptyBinContentAfterPostingItemJournal                                                                 135499
        CalculatePhysicalInventoryForItemWithEmptyBinContent                                                   135499

        Covers Test Cases for WI - 290384
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PurchaseUOMConversionOnMovementUsingMultipleLots                                                127657,135566
        CreatePickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant                         128823,128830
        RegisterPickFromInternalPickAfterRegisterWarehouseMovementWithItemVariant                       128823,128830
        UOMConversionOnPickFromInternalPickWithItemVariant                                                     128830
        UOMConversionOnRegisteredPickFromInternalPickWithItemVariant                                           128830

        Covers Test Cases for WI - 299021
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PostWarehouseShipmentAfterCalculateCrossDockWithLotItemTracking                                        128741
        PostWarehouseShipmentAfterCalculateCrossDockWithSerialItemTracking                                     128741
        PostWarehouseShipmentAfterCalculateCrossDockWithLotAndSerialItemTracking                               128741
        ChangeUnitOfMeasureOnWarehousePutAwayWithError                                                         129132
        ChangeUnitOfMeasureOnWarehousePutAwayWithoutError                                                      129132
        ChangeUnitOfMeasureOnWarehousePickWithError                                                            129132
        ChangeUnitOfMeasureOnWarehousePickWithoutError                                                         129132

        Covers Test Cases for WI - 299610
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PostPurchaseOrderAsReceiveUsingMultipleItemsWithAndWithoutLocation                                     135585
        SalesOrderWithMultipleBaseCalendars                                                                    205281

        Covers Test Cases for WI - 299023
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        RegisterMovementAfterRegisterPutAwayUsingWarehouseClass                                                128833
        RegisterPickAfterRegisterMovementUsingWarehouseClass                                                   128833
        RegisterMovementAfterRegisterPickUsingWarehouseClass                                                   128833
        RegisterPutAwayWithLotInformationItemTracking                                                          121722
        PostWarehouseShipmentAfterRegisterPickWithLotInformationItemTracking                                   121722
        WarehouseReceiptFromPurchaseOrderWithJob                                                               121722
        WarehouseShipmentFromSalesOrderWithJob                                                                 121722

        Covers Test Cases for WI - 301184
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        WarehouseReceiptFromTransferOrderWithReceiptPostingPolicyBeforePostingErrorsAreNotProcessed            232884
        WarehouseReceiptFromTransferOrderWithReceiptPostingPolicyAfterPostingErrorsAreNotProcessed             232884

        Covers Test Cases for WI - 286310
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        UndoSalesShipmentAfterPostWarehouseShipmentFromSalesOrderUsingPick                                     127930
        UndoReturnShipmentAfterPostWarehouseShipmentFromPurchaseReturnOrderUsingPick                           127930
        CannotUndoPurchaseReceiptAfterPostWarehouseReceiptFromPurchaseOrderUsingPutAway                        127930
        CannotUndoReturnReceiptAfterPostWarehouseReceiptFromSalesReturnOrderUsingPutAway                       127930
        UndoSalesShipmentAfterPostSalesOrder                                                                   127930
        UndoReturnShipmentAfterPostPurchaseReturnOrder                                                         127930
        UndoSalesShipmentAfterPostWarehouseShipmentFromSalesOrder                                              127930
        UndoReturnShipmentAfterPostWarehouseShipmentFromPurchaseReturnOrder                                    127930
        UndoPurchaseReceiptAfterPostWarehouseReceiptFromPurchaseOrder                                          127930
        UndoReturnReceiptAfterPostWarehouseReceiptFromSalesReturnOrder                                         127930
        UndoPurchaseReceiptBeforeCancelReservation                                                             127930
        UndoPurchaseReceiptAfterCancelReservation                                                              127930

        Covers Test Cases for WI - 301705
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        FinishedProductionOrderWithComponentFlushingMethodAsPickBackwardUsingPick                              127953
        FinishedProductionOrderWithComponentFlushingMethodAsPickForwardUsingPick                               127953
        FinishedProductionOrderWithComponentFlushingMethodAsPickBackwardUsingPickWorksheet                     127953
        FinishedProductionOrderWithComponentFlushingMethodAsPickForwardUsingPickWorksheet                      127953

        Covers Test Cases for WI - 299024
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PositiveAdjustmentUsingWarehouseItemJournal                                                            128822
        NegativeAdjustmentUsingWarehouseItemJournal                                                            128822

        Covers Test Cases for WI -
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        GetSourceDocumentForShipmentWithBlockedCust                                                              7846
        PageSourceDocFilterCardShipmentPositive,
        PageSourceDocFilterCardShipmentNegative,
        PageSourceDocFilterCardReceiptPositive,
        PageSourceDocFilterCardReceiptNegative                                                                 101628

        Covers Test Cases for WI
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PickLotTrackedFEFOWarehouseShipment                                                                    130268
    }
    END.
  }
}

