OBJECT Codeunit 144038 Service Tax Abatement
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500004 : Codeunit 130000;
      LibraryERM@1500007 : Codeunit 131300;
      LibraryServiceTax@1500000 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxVerify@1500009 : Codeunit 143004;
      ReverseChargeTypeOption@1500005 : ' ,Standard,GTA';
      EntryValueErr@1500008 : TextConst 'ENU=The value in %1 is incorrect.';
      SplitAbatementErr@1500006 : TextConst 'ENU=You cannot post the document because it has an abatement percentage specified in the Service Tax setup window, and one or more of the lines uses service group';
      isInitialized@1500001 : Boolean;

    LOCAL PROCEDURE Initialize@1500100();
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT;

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;
    END;

    [Test]
    PROCEDURE SplitPostInvoiceDoc@1500010();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      SplitPostPurchaseDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SplitPostCrMemoDoc@1500011();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      SplitPostPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE SplitPostPurchaseDoc@1500007(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      Initialize;

      CreateSplitDocument(PurchaseHeader,PurchaseLine,DocumentType);

      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      Assert.ExpectedError(SplitAbatementErr);
    END;

    [Test]
    PROCEDURE SplitPostInvoiceGenJnl@1500003();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      SplitPostPurchaseGenJnl(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SplitPostCrMemoGenJnl@1500002();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      SplitPostPurchaseGenJnl(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE SplitPostPurchaseGenJnl@1500000(DocumentType@1500008 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateSplitDocJnlLine(GenJournalLine,DocumentType);

      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      Assert.ExpectedError(SplitAbatementErr);
    END;

    [Test]
    PROCEDURE PoTPostInvoiceDoc@1500019();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PoTPostPurchaseDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PoTPostCrMemoDoc@1500018();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PoTPostPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PoTPostPurchaseDoc@1500017(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      GenJournalLine@1500000 : Record 81;
      PostedDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      CreatePoTDocument(PurchaseHeader,PurchaseLine,DocumentType);

      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyPoTAbatementPosting(GenJournalLine);
    END;

    [Test]
    PROCEDURE PoTPostInvoiceGenJnl@1500016();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      PoTPostPurchaseGenJnl(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PoTPostCrMemoGenJnl@1500015();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      PoTPostPurchaseGenJnl(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PoTPostPurchaseGenJnl@1500014(DocumentType@1500008 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreatePoTDocJnlLine(GenJournalLine,DocumentType);
      AddPoTToAdvPmtAmount(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyPoTAbatementPosting(GenJournalLine);
    END;

    [Test]
    PROCEDURE PoTPostAdvPayment@1500024();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreatePoTAdvPmt(GenJournalLine,GenJournalLine."Document Type"::Payment);
      AddPoTToAdvPmtAmount(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyPoTAdvPmtAbatementPost(GenJournalLine);
    END;

    [Test]
    PROCEDURE PoTPostAdvRefund@1500023();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreatePoTAdvPmt(GenJournalLine,GenJournalLine."Document Type"::Refund);
      AddPoTToAdvPmtAmount(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyPoTAdvPmtAbatementPost(GenJournalLine);
    END;

    [Test]
    PROCEDURE RevChrgPostInvoiceDoc@1500056();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      RevChrgPostPurchaseDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE RevChrgPostCrMemoDoc@1500055();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      RevChrgPostPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE RevChrgPostPurchaseDoc@1500054(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      GenJournalLine@1500000 : Record 81;
      PostedDocNo@1500001 : Code[20];
    BEGIN
      Initialize;
      CreateRevChrgDocument(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::Standard);

      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyRevChrgPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE RevChrgPostInvoiceGenJnl@1500053();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      RevChrgPostPurchaseGenJnl(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE RevChrgPostCrMemoGenJnl@1500052();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      RevChrgPostPurchaseGenJnl(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE RevChrgPostPurchaseGenJnl@1500051(DocumentType@1500008 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgDocJnlLine(GenJournalLine,DocumentType,ReverseChargeTypeOption::Standard);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE RevChrgPostAdvPayment@1500033();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::Standard,GenJournalLine."Document Type"::Payment);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgAdvPmtPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE RevChrgPostAdvRefund@1500043();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::Standard,GenJournalLine."Document Type"::Refund);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgAdvPmtPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclarationPostInvoiceDoc@1500076();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      GTADeclarationPostPurchaseDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GTADeclarationPostCrMemoDoc@1500075();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      GTADeclarationPostPurchaseDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GTADeclarationPostPurchaseDoc@1500073(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      GenJournalLine@1500000 : Record 81;
      PostedDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      CreateRevChrgDocument(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::GTA);
      SetDeclarationGTADoc(PurchaseHeader);

      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyRevChrgPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclarationPostInvGenJnl@1500072();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      GTADeclarationPostPurchGenJnl(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GTADeclarationPostCrMGenJnl@1500071();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      GTADeclarationPostPurchGenJnl(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GTADeclarationPostPurchGenJnl@1500070(DocumentType@1500008 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgDocJnlLine(GenJournalLine,DocumentType,ReverseChargeTypeOption::GTA);
      SetDeclarationGTA(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclInvGenJnlApplyPmt@1500028();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      GTADeclPurchGenJnlApplyPmt(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GTADeclCrMGenJnlApplyPmt@1500026();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      GTADeclPurchGenJnlApplyPmt(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GTADeclPurchGenJnlApplyPmt@1500025(DocumentType@1500008 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      PostedPmtNo@1500001 : Code[20];
    BEGIN
      Initialize;

      CreateRevChrgDocJnlLine(GenJournalLine,DocumentType,ReverseChargeTypeOption::GTA);
      SetDeclarationGTA(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      PostedPmtNo := ApplyAndPostPayment(GenJournalLine);

      VerifyRevChrgApplication(GenJournalLine,PostedPmtNo,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclarationPostAdvPayment@1500034();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::GTA,GenJournalLine."Document Type"::Payment);
      SetDeclarationGTA(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgAdvPmtPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclarationPostAdvRefund@1500044();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::GTA,GenJournalLine."Document Type"::Refund);
      SetDeclarationGTA(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgAdvPmtPosting(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclAdvPmtApplyInvGenJnl@1500038();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostAdvancePayment(GenJournalLine,TRUE);

      ApplyAndPostInvoice(GenJournalLine,TRUE);

      VerifyRevChrgInvoiceAppln(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclAdvPmtApplyInvDoc@1500046();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostAdvancePayment(GenJournalLine,TRUE);

      ApplyAndPostInvoiceDoc(GenJournalLine,TRUE);

      VerifyRevChrgInvoiceAppln(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTADeclAdvPmtApplyInvGJnlOff@1500047();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostAdvancePayment(GenJournalLine,TRUE);

      PostAndApplyInvoiceOffline(GenJournalLine,TRUE);

      VerifyRevChrgInvoiceAppln(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE GTANoDeclarationPostInvoiceDoc@1500087();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      GTANoDeclarationPostPurchDoc(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GTANoDeclarationPostCrMemoDoc@1500086();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      GTANoDeclarationPostPurchDoc(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GTANoDeclarationPostPurchDoc@1500085(DocumentType@1500008 : Option);
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
      GenJournalLine@1500000 : Record 81;
      PostedDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      CreateRevChrgDocument(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::GTA);

      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      VerifyRevChrgPosting(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclarationPostInvGenJnl@1500084();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      GTANoDeclarationPostPrchGenJnl(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GTANoDeclarationPostCrMGenJnl@1500083();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      GTANoDeclarationPostPrchGenJnl(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GTANoDeclarationPostPrchGenJnl@1500082(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgDocJnlLine(GenJournalLine,DocumentType,ReverseChargeTypeOption::GTA);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgPosting(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclInvGenJnlApplyPmt@1500042();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      GTANoDeclPurchGenJnlApplyPmt(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GTANoDeclCrMGenJnlApplyPmt@1500041();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      GTANoDeclPurchGenJnlApplyPmt(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE GTANoDeclPurchGenJnlApplyPmt@1500040(DocumentType@1500008 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
      PostedPmtNo@1500001 : Code[20];
    BEGIN
      Initialize;

      CreateRevChrgDocJnlLine(GenJournalLine,DocumentType,ReverseChargeTypeOption::GTA);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      PostedPmtNo := ApplyAndPostPayment(GenJournalLine);

      VerifyRevChrgApplication(GenJournalLine,PostedPmtNo,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclarationPostAdvPayment@1500035();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::GTA,GenJournalLine."Document Type"::Payment);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgAdvPmtPosting(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclarationPostAdvRefund@1500045();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::GTA,GenJournalLine."Document Type"::Refund);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      VerifyRevChrgAdvPmtPosting(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclAdvPmtApplyInvGenJnl@1500037();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostAdvancePayment(GenJournalLine,FALSE);

      ApplyAndPostInvoice(GenJournalLine,FALSE);

      VerifyRevChrgInvoiceAppln(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclAdvPmtApplyInvDoc@1500048();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostAdvancePayment(GenJournalLine,FALSE);

      ApplyAndPostInvoiceDoc(GenJournalLine,FALSE);

      VerifyRevChrgInvoiceAppln(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE GTANoDeclAdvPmtApplyInvGJnlOff@1500058();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      PostAdvancePayment(GenJournalLine,FALSE);

      PostAndApplyInvoiceOffline(GenJournalLine,FALSE);

      VerifyRevChrgInvoiceAppln(GenJournalLine,FALSE);
    END;

    LOCAL PROCEDURE AddPoTToAdvPmtAmount@1500095(VAR GenJournalLine@1500000 : Record 81);
    VAR
      ServTaxSetup@1500001 : Record 16472;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      GenJournalLine.VALIDATE(Amount,GenJournalLine.Amount +
        ReverseServiceTaxHelper.CalculateServTaxTotal(
          GenJournalLine.Amount * (100 - ServTaxSetup."Abatement %") / 100,ServTaxSetup));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ApplyAndPostInvoice@1500004(AdvPmtGenJournalLine@1500009 : Record 81;DeclarationGTA@1500000 : Boolean);
    VAR
      InvGenJournalLine@1500005 : Record 81;
    BEGIN
      InvGenJournalLine := AdvPmtGenJournalLine;
      CreateInvoiceforAdvPmt(InvGenJournalLine,DeclarationGTA);
      InvGenJournalLine.VALIDATE("Applies-to Doc. Type",AdvPmtGenJournalLine."Document Type");
      InvGenJournalLine.VALIDATE("Applies-to Doc. No.",AdvPmtGenJournalLine."Document No.");
      InvGenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(InvGenJournalLine);
    END;

    LOCAL PROCEDURE ApplyAndPostInvoiceDoc@1500060(GenJournalLine@1500009 : Record 81;DeclarationGTA@1500000 : Boolean) : Code[20];
    VAR
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        PurchaseHeader."Document Type"::Invoice,ReverseChargeTypeOption::GTA,100,FALSE,GenJournalLine.Amount);
      PurchaseHeader.VALIDATE("Declaration Form (GTA)",DeclarationGTA);
      PurchaseHeader.MODIFY(TRUE);
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE ApplyAndPostPayment@1500030(GenJournalLine@1500009 : Record 81) : Code[20];
    VAR
      GenJournalLine2@1500005 : Record 81;
    BEGIN
      ReverseServiceTaxHelper.CreatePayment(GenJournalLine2,GenJournalLine."Account No.",-GenJournalLine.Amount,
        GenJournalLine."Posting Date",ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"));
      GenJournalLine2.VALIDATE("Applies-to Doc. Type",GenJournalLine."Document Type");
      GenJournalLine2.VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
      GenJournalLine2.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      EXIT(GenJournalLine2."Document No.");
    END;

    LOCAL PROCEDURE CalculateFullBaseAmount@1500022(GenJournalLine@1500000 : Record 81;ServiceTaxSetup@1500001 : Record 16472) BaseAmount : Decimal;
    BEGIN
      IF GenJournalLine."Document Type" IN [GenJournalLine."Document Type"::Invoice,
                                            GenJournalLine."Document Type"::"Credit Memo"]
      THEN
        BaseAmount := ReverseServiceTaxHelper.CalculateServTaxBase(ABS(GenJournalLine.Amount),GenJournalLine."Document Type")
      ELSE
        BaseAmount := ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
            GenJournalLine.Amount,ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),
            ReverseServiceTaxHelper.GetServTaxType(
              GenJournalLine."Service Tax Group Code",GenJournalLine."Account No.",GenJournalLine."Service Tax Registration No."),
            ServiceTaxSetup);
    END;

    LOCAL PROCEDURE CalculateTaxWithAbatement@1500032(GenJournalLine@1500003 : Record 81;ServTaxSetup@1500002 : Record 16472) : Decimal;
    VAR
      BaseAmount@1500000 : Decimal;
      ServTaxAmount@1500001 : Decimal;
    BEGIN
      BaseAmount := CalculateFullBaseAmount(GenJournalLine,ServTaxSetup) *
        (100 - GetAbatementPercentage(GenJournalLine)) / 100;
      ServTaxAmount := ReverseServiceTaxHelper.RoundServTax(ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServTaxSetup));
      EXIT(ServTaxAmount);
    END;

    LOCAL PROCEDURE CalculateSBCKKCWithAbatement@1500063(GenJournalLine@1500003 : Record 81;ServTaxSetup@1500002 : Record 16472;VAR SBCAmount@1500004 : Decimal;VAR KKCAmount@1500001 : Decimal);
    VAR
      BaseAmount@1500000 : Decimal;
    BEGIN
      BaseAmount := CalculateFullBaseAmount(GenJournalLine,ServTaxSetup) *
        (100 - GetAbatementPercentage(GenJournalLine)) / 100;
      SBCAmount := ReverseServiceTaxHelper.RoundServTax(ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServTaxSetup));
      KKCAmount := ReverseServiceTaxHelper.RoundServTax(ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServTaxSetup));
    END;

    LOCAL PROCEDURE CalculateServTaxAmts@1500020(GenJournalLine@1500001 : Record 81;ServTaxSetup@1500002 : Record 16472;VAR BaseAmount@1500003 : Decimal;VAR ECessAmount@1500004 : Decimal;VAR SHECessAmount@1500005 : Decimal);
    BEGIN
      BaseAmount := CalculateFullBaseAmount(GenJournalLine,ServTaxSetup);
      ECessAmount := ReverseServiceTaxHelper.CalculateECess(BaseAmount,ServTaxSetup);
      SHECessAmount := ReverseServiceTaxHelper.CalculateSHECess(BaseAmount,ServTaxSetup);
    END;

    LOCAL PROCEDURE CalculateServTaxAmtsAbatement@1500064(GenJournalLine@1500001 : Record 81;ServTaxSetup@1500002 : Record 16472;VAR BaseAmount@1500003 : Decimal;VAR ECessAmount@1500004 : Decimal;VAR SHECessAmount@1500005 : Decimal);
    VAR
      AbatedBaseAmount@1500000 : Decimal;
    BEGIN
      BaseAmount := CalculateFullBaseAmount(GenJournalLine,ServTaxSetup);
      AbatedBaseAmount :=  BaseAmount * (100 - GetAbatementPercentage(GenJournalLine)) / 100;
      ECessAmount := ReverseServiceTaxHelper.CalculateECess(AbatedBaseAmount,ServTaxSetup);
      SHECessAmount := ReverseServiceTaxHelper.CalculateSHECess(AbatedBaseAmount,ServTaxSetup);
    END;

    LOCAL PROCEDURE CreateInvoiceforAdvPmt@1500062(VAR GenJournalLine@1500002 : Record 81;DeclarationGTA@1500003 : Boolean);
    VAR
      GenJournalBatch@1500001 : Record 232;
      AdvPmtGenJournalLine@1500000 : Record 81;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH GenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(AdvPmtGenJournalLine,GenJournalBatch,"Document Type"::Invoice,
          "Service Type (Rev. Chrg.)","Account No.",-Amount,"Posting Date","Service Tax Registration No.",
          "Service Tax Group Code");
        AdvPmtGenJournalLine.VALIDATE("Declaration Form (GTA)",DeclarationGTA);
        AdvPmtGenJournalLine.VALIDATE(PoT,PoT);
      END;
      AdvPmtGenJournalLine.MODIFY(TRUE);
      GenJournalLine := AdvPmtGenJournalLine;
    END;

    LOCAL PROCEDURE CreatePoTAdvPmt@1500021(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500001 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,DocumentType,TRUE,
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",ReverseChargeTypeOption::" ",0);
      SetAbatementPercentage(GenJournalLine);
      GenJournalLine.VALIDATE(Amount); // Needed for Abatement recalculations
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocWithAbatement@1500104(VAR PurchaseHeader@1500004 : Record 38;VAR PurchaseLine@1500003 : Record 39;DocumentType@1500002 : Option;ReverseChargeType@1500001 : Option;ReverseChargePercentage@1500007 : Integer;PoT@1500000 : Boolean) : Code[20];
    VAR
      ServiceTaxGroup@1500006 : Record 16471;
      ServiceTaxSetup@1500009 : Record 16472;
    BEGIN
      ReverseServiceTaxHelper.CreateServiceTaxGroupAndSetup(ServiceTaxGroup,ServiceTaxSetup);
      ServiceTaxSetup.VALIDATE("Abatement %",LibraryRandom.RandDecInRange(10,90,2));
      ServiceTaxSetup.MODIFY(TRUE);

      ReverseServiceTaxHelper.CreatePurchaseHeaderByVendor(
        PurchaseHeader,DocumentType,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),PoT,
        ReverseServiceTaxHelper.CreateVendor);
      ReverseServiceTaxHelper.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,ServiceTaxGroup.Code,
        ReverseServiceTaxHelper.CreateServTaxRegNo,ReverseChargeType,ReverseChargePercentage);
      EXIT(ServiceTaxGroup.Code);
    END;

    LOCAL PROCEDURE CreateRevChrgAdvPmt@1500031(VAR GenJournalLine@1500000 : Record 81;RevChrgType@1500001 : Option;DocumentType@1500002 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,DocumentType,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(RevChrgType),RevChrgType,100);
      SetAbatementPercentage(GenJournalLine);
      GenJournalLine.VALIDATE(Amount); // Needed for Abatement recalculations
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePoTDocJnlLine@1500074(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500001 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,DocumentType,GenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ReverseChargeTypeOption::" ",TRUE,0);
      SetAbatementPercentage(GenJournalLine);
      GenJournalLine.VALIDATE(Amount); // Needed for Abatement recalculations
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRevChrgDocJnlLine@1500057(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500001 : Option;RevChrgType@1500002 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,DocumentType,ReverseServiceTaxHelper.GetReverseChargeServType(RevChrgType),
        RevChrgType,FALSE,100);
      SetAbatementPercentage(GenJournalLine);
      GenJournalLine.VALIDATE(Amount); // Needed for Abatement recalculations
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSplitDocJnlLine@1500012(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500001 : Option);
    VAR
      Percentage@1500002 : Integer;
    BEGIN
      Percentage := LibraryRandom.RandIntInRange(10,90);
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(
        GenJournalLine,DocumentType,GenJournalLine."Service Type (Rev. Chrg.)"::Inward,
        ReverseChargeTypeOption::Standard,TRUE,Percentage);
      SetAbatementPercentage(GenJournalLine);
      GenJournalLine.VALIDATE(Amount); // Needed for Abatement recalculations
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePoTDocument@1500009(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500002 : Record 39;DocumentType@1500001 : Option);
    BEGIN
      CreatePurchaseDocWithAbatement(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::" ",0,TRUE);
    END;

    LOCAL PROCEDURE CreateRevChrgDocument@1500059(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500002 : Record 39;DocumentType@1500001 : Option;RevChrgType@1500004 : Option);
    BEGIN
      CreatePurchaseDocWithAbatement(PurchaseHeader,PurchaseLine,DocumentType,RevChrgType,100,FALSE);
    END;

    LOCAL PROCEDURE CreateSplitDocument@1500008(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500002 : Record 39;DocumentType@1500001 : Option);
    VAR
      Percentage@1500003 : Integer;
    BEGIN
      Percentage := LibraryRandom.RandIntInRange(10,90);
      CreatePurchaseDocWithAbatement(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeTypeOption::Standard,Percentage,TRUE);
    END;

    LOCAL PROCEDURE GetAbatementPercentage@1500001(GenJournalLine@1500000 : Record 81) : Decimal;
    VAR
      ServTaxSetup@1500001 : Record 16472;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      EXIT(ServTaxSetup."Abatement %");
    END;

    LOCAL PROCEDURE PostAdvancePayment@1500065(VAR GenJournalLine@1500000 : Record 81;DeclarationGTA@1500001 : Boolean);
    BEGIN
      CreateRevChrgAdvPmt(GenJournalLine,ReverseChargeTypeOption::GTA,GenJournalLine."Document Type"::Payment);
      IF DeclarationGTA THEN
        SetDeclarationGTA(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostAndApplyInvoiceOffline@1500061(AdvPmtGenJournalLine@1500009 : Record 81;DeclarationGTA@1500000 : Boolean);
    VAR
      InvGenJournalLine@1500001 : Record 81;
    BEGIN
      InvGenJournalLine := AdvPmtGenJournalLine;
      CreateInvoiceforAdvPmt(InvGenJournalLine,DeclarationGTA);
      LibraryERM.PostGeneralJnlLine(InvGenJournalLine);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(InvGenJournalLine."Document Type",InvGenJournalLine."Document No.",
        AdvPmtGenJournalLine."Document Type",AdvPmtGenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE SetAbatementPercentage@1500006(GenJournalLine@1500000 : Record 81);
    VAR
      ServTaxSetup@1500001 : Record 16472;
    BEGIN
      ServTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServTaxSetup.VALIDATE("Abatement %",LibraryRandom.RandDecInRange(10,90,2));
      ServTaxSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDeclarationGTA@1500080(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE("Declaration Form (GTA)",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDeclarationGTADoc@1500079(VAR PurchaseHeader@1500002 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE("Declaration Form (GTA)",TRUE);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPoTAbatementPosting@1500005(GenJournalLine@1500003 : Record 81);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      ServTaxAmount@1500004 : Decimal;
      SBCAmount@1500000 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServTaxAmount := CalculateTaxWithAbatement(GenJournalLine,ServiceTaxSetup);
      CalculateSBCKKCWithAbatement(GenJournalLine,ServiceTaxSetup,SBCAmount,KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup),ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCRecAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCRecAcc(ServiceTaxSetup),KKCAmount);
      VerifySTEntryAbatement(GenJournalLine,ServiceTaxSetup);
      VerifySTEntryDetailAbatement(GenJournalLine,ServiceTaxSetup);
    END;

    LOCAL PROCEDURE VerifyPoTAdvPmtAbatementPost@1500027(GenJournalLine@1500003 : Record 81);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      ServTaxAmount@1500004 : Decimal;
      SBCAmount@1500001 : Decimal;
      KKCAmount@1500000 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServTaxAmount := CalculateTaxWithAbatement(GenJournalLine,ServiceTaxSetup);
      CalculateSBCKKCWithAbatement(GenJournalLine,ServiceTaxSetup,SBCAmount,KKCAmount);

      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup),-ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup),ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCExpenseAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCRecAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup),-KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCRecAcc(ServiceTaxSetup),KKCAmount);

      VerifySTEntryAbatement(GenJournalLine,ServiceTaxSetup);
      VerifySTEntryDetailAbatement(GenJournalLine,ServiceTaxSetup);
    END;

    LOCAL PROCEDURE VerifyRevChrgApplication@1500049(GenJournalLine@1500003 : Record 81;PostedPmtNo@1500001 : Code[20];Abatement@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      ServTaxAmount@1500004 : Decimal;
      SBCAmount@1500006 : Decimal;
      KKCAmount@1500005 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      IF Abatement THEN BEGIN
        ServTaxAmount := CalculateTaxWithAbatement(GenJournalLine,ServiceTaxSetup);
        CalculateSBCKKCWithAbatement(GenJournalLine,ServiceTaxSetup,SBCAmount,KKCAmount);
      END ELSE BEGIN
        ServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(
          ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
        SBCAmount :=
          ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
        KKCAmount :=
          ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
      END;
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup),ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup),-ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimPayAcc(ServiceTaxSetup),0);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCExpenseAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCPayAcc(ServiceTaxSetup),-SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCInterimPayAcc(ServiceTaxSetup),0);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup),KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCPayAcc(ServiceTaxSetup),-KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimPayAcc(ServiceTaxSetup),0);

      GenJournalLine."Document Type" := ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type");
      GenJournalLine."Document No." := PostedPmtNo;
      GenJournalLine.Amount := -GenJournalLine.Amount;
      IF Abatement THEN
        VerifySTEntryDetailAbatement(GenJournalLine,ServiceTaxSetup)
      ELSE
        VerifySTEntryDetail(GenJournalLine,ServiceTaxSetup);
    END;

    LOCAL PROCEDURE VerifyRevChrgInvoiceAppln@1500029(GenJournalLine@1500003 : Record 81;Abatement@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      SBCAmount@1500005 : Decimal;
      KKCAmount@1500001 : Decimal;
      ServTaxAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      IF Abatement THEN BEGIN
        ServTaxAmount := CalculateTaxWithAbatement(GenJournalLine,ServiceTaxSetup);
        CalculateSBCKKCWithAbatement(GenJournalLine,ServiceTaxSetup,SBCAmount,KKCAmount);
      END ELSE BEGIN
        ServTaxAmount :=
          ReverseServiceTaxHelper.CalculateServTaxAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
        SBCAmount :=
          ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
        KKCAmount :=
          ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
      END;
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup),-ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup),ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimPayAcc(ServiceTaxSetup),0);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCPayAcc(ServiceTaxSetup),-SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCExpenseAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCInterimPayAcc(ServiceTaxSetup),0);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCPayAcc(ServiceTaxSetup),-KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup),KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimPayAcc(ServiceTaxSetup),0);
    END;

    LOCAL PROCEDURE VerifyRevChrgPosting@1500088(GenJournalLine@1500003 : Record 81;Abatement@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      ServTaxAmount@1500004 : Decimal;
      SBCAmount@1500005 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      IF Abatement THEN BEGIN
        ServTaxAmount := CalculateTaxWithAbatement(GenJournalLine,ServiceTaxSetup);
        CalculateSBCKKCWithAbatement(GenJournalLine,ServiceTaxSetup,SBCAmount,KKCAmount);
      END ELSE BEGIN
        ServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxAmount(
          ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
        SBCAmount :=
          ReverseServiceTaxHelper.CalculateServTaxSBCAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
        KKCAmount :=
          ReverseServiceTaxHelper.CalculateKKCAmount(ServiceTaxSetup,ABS(GenJournalLine.Amount),GenJournalLine."Document Type");
      END;
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup),ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimPayAcc(ServiceTaxSetup),-ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCExpenseAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCInterimPayAcc(ServiceTaxSetup),-SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup),KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimPayAcc(ServiceTaxSetup),-KKCAmount);
      IF Abatement THEN
        VerifySTEntryAbatement(GenJournalLine,ServiceTaxSetup)
      ELSE
        VerifySTEntry(GenJournalLine,ServiceTaxSetup);
      // No Detailed entries if no payment is applied
    END;

    LOCAL PROCEDURE VerifyRevChrgAdvPmtPosting@1500039(GenJournalLine@1500003 : Record 81;Abatement@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      ServTaxAmount@1500004 : Decimal;
      SBCAmount@1500005 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      IF Abatement THEN BEGIN
        ServTaxAmount := CalculateTaxWithAbatement(GenJournalLine,ServiceTaxSetup);
        CalculateSBCKKCWithAbatement(GenJournalLine,ServiceTaxSetup,SBCAmount,KKCAmount);
      END ELSE BEGIN
        ServTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(GenJournalLine.Amount,ServiceTaxSetup);
        SBCAmount := ReverseServiceTaxHelper.CalculateSBC(GenJournalLine.Amount,ServiceTaxSetup);
        KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(GenJournalLine.Amount,ServiceTaxSetup);
      END;
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxInterimRecAcc(ServiceTaxSetup),ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup),-ServTaxAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCInterimRecAcc(ServiceTaxSetup),KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetKKCPayAcc(ServiceTaxSetup),-KKCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCInterimRecAcc(ServiceTaxSetup),SBCAmount);
      ServiceTaxVerify.AccountBalance(ReverseServiceTaxHelper.GetServTaxSBCPayAcc(ServiceTaxSetup),-SBCAmount);
      IF Abatement THEN BEGIN
        VerifySTEntryAbatement(GenJournalLine,ServiceTaxSetup);
        VerifySTEntryDetailAbatement(GenJournalLine,ServiceTaxSetup);
      END ELSE BEGIN
        VerifySTEntry(GenJournalLine,ServiceTaxSetup);
        VerifySTEntryDetail(GenJournalLine,ServiceTaxSetup);
      END;
    END;

    LOCAL PROCEDURE VerifySTEntry@1500013(GenJournalLine@1500002 : Record 81;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServTaxEntry@1500000 : Record 16473;
      BaseAmount@1500003 : Decimal;
      ECessAmount@1500006 : Decimal;
      SHECessAmount@1500007 : Decimal;
      SBCAmount@1500005 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      CalculateServTaxAmts(GenJournalLine,ServTaxSetup,BaseAmount,ECessAmount,SHECessAmount);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServTaxSetup);

      ServTaxEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      ServTaxEntry.SETRANGE("Document Type",GenJournalLine."Document Type");
      ServTaxEntry.FINDLAST;
      Assert.AreEqual(BaseAmount,ServTaxEntry."Service Tax Base Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(ECessAmount,ServTaxEntry."eCess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(SHECessAmount,ServTaxEntry."SHE Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(0,ServTaxEntry."Service Tax Abatement",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(SBCAmount,ServTaxEntry."Service Tax SBC Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(KKCAmount,ServTaxEntry."KK Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifySTEntryAbatement@1500036(GenJournalLine@1500002 : Record 81;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServTaxEntry@1500000 : Record 16473;
      BaseAmount@1500003 : Decimal;
      ECessAmount@1500006 : Decimal;
      SHECessAmount@1500007 : Decimal;
      SBCAmount@1500001 : Decimal;
      KKCAmount@1500005 : Decimal;
    BEGIN
      CalculateServTaxAmtsAbatement(GenJournalLine,ServTaxSetup,BaseAmount,ECessAmount,SHECessAmount);
      CalculateSBCKKCWithAbatement(GenJournalLine,ServTaxSetup,SBCAmount,KKCAmount);

      ServTaxEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      ServTaxEntry.SETRANGE("Document Type",GenJournalLine."Document Type");
      ServTaxEntry.FINDLAST;
      Assert.AreEqual(BaseAmount,ServTaxEntry."Service Tax Base Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(ECessAmount,ServTaxEntry."eCess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(SHECessAmount,ServTaxEntry."SHE Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(ServTaxSetup."Abatement %",ServTaxEntry."Service Tax Abatement",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(SBCAmount,ServTaxEntry."Service Tax SBC Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
      Assert.AreEqual(KKCAmount,ServTaxEntry."KK Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifySTEntryDetail@1500050(GenJournalLine@1500002 : Record 81;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServTaxEntryDetail@1500000 : Record 16474;
      BaseAmount@1500003 : Decimal;
      ECessAmount@1500006 : Decimal;
      SHECessAmount@1500007 : Decimal;
      SBCAmount@1500005 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      CalculateServTaxAmts(GenJournalLine,ServTaxSetup,BaseAmount,ECessAmount,SHECessAmount);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServTaxSetup);

      ServTaxEntryDetail.SETRANGE("Document No.",GenJournalLine."Document No.");
      ServTaxEntryDetail.SETRANGE("Document Type",GenJournalLine."Document Type");
      ServTaxEntryDetail.FINDLAST;
      Assert.AreEqual(BaseAmount,ServTaxEntryDetail."Base Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(ECessAmount,ServTaxEntryDetail."Service Tax eCess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(SHECessAmount,ServTaxEntryDetail."Service Tax SHE Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(0,ServTaxEntryDetail."Service Tax Abatement %",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(SBCAmount,ServTaxEntryDetail."Service Tax SBC Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(KKCAmount,ServTaxEntryDetail."KK Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifySTEntryDetailAbatement@1500066(GenJournalLine@1500002 : Record 81;ServTaxSetup@1500004 : Record 16472);
    VAR
      ServTaxEntryDetail@1500000 : Record 16474;
      BaseAmount@1500003 : Decimal;
      ECessAmount@1500006 : Decimal;
      SHECessAmount@1500007 : Decimal;
      SBCAmount@1500005 : Decimal;
      KKCAmount@1500001 : Decimal;
    BEGIN
      CalculateServTaxAmtsAbatement(GenJournalLine,ServTaxSetup,BaseAmount,ECessAmount,SHECessAmount);
      CalculateSBCKKCWithAbatement(GenJournalLine,ServTaxSetup,SBCAmount,KKCAmount);

      ServTaxEntryDetail.SETRANGE("Document No.",GenJournalLine."Document No.");
      ServTaxEntryDetail.SETRANGE("Document Type",GenJournalLine."Document Type");
      ServTaxEntryDetail.FINDLAST;
      Assert.AreEqual(BaseAmount,ServTaxEntryDetail."Base Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(ECessAmount,ServTaxEntryDetail."Service Tax eCess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(SHECessAmount,ServTaxEntryDetail."Service Tax SHE Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(ServTaxSetup."Abatement %",ServTaxEntryDetail."Service Tax Abatement %",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(SBCAmount,ServTaxEntryDetail."Service Tax SBC Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION));
      Assert.AreEqual(KKCAmount,ServTaxEntryDetail."KK Cess Amount",
        STRSUBSTNO(EntryValueErr,ServTaxEntryDetail.TABLECAPTION))
    END;

    BEGIN
    END.
  }
}

