OBJECT Codeunit 144070 TCS Transactions Validation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1500012 : Codeunit 131300;
      LibraryWarehouse@1500007 : Codeunit 132204;
      LibraryJournals@1500006 : Codeunit 131306;
      LibraryRandom@1500013 : Codeunit 130440;
      LibraryTCS@1500008 : Codeunit 143008;
      LibrarySales@1500018 : Codeunit 130509;
      Assert@1500002 : Codeunit 130000;
      LocationErr@1500014 : TextConst '@@@="%1 = T.C.A.N. No. must have a value in Location: Code=%1";ENU="T.C.A.N. No. must have a value in Location: Code=%1. It cannot be zero or empty."';
      TCANErr@1500016 : TextConst 'ENU="T.C.A.N. No. must have a value in Company Information: Primary Key=. It cannot be zero or empty."';

    [Test]
    PROCEDURE VerifySalesOrderPostingWithoutIncomeTaxAccPeriod@1500002();
    VAR
      AssesseeCode@1500000 : Record 13727;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      NodNocHeader@1500003 : Record 13786;
      SalesHeader@1500005 : Record 36;
    BEGIN
      // [SCENARIO 163733] Verify whether system throws error while creating accounting year in Tax Income accounting period before posting sales order
      // [FEATURE] [Sales Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);

      // [WHEN] Create Sales Order With TCS Nature of collection and post the sales order
      ASSERTERROR CreateAndPostSalesDocWithTCS(
          SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,
          SalesHeader."Document Type"::Order);

      // [THEN] Accounting Period Error Created.
      Assert.ExpectedError(GetExpectedIncomeTaxAccPeriod);
    END;

    [Test]
    PROCEDURE VerifySalesInvoicePostingWithoutIncomeTaxAccPeriod@1500008();
    VAR
      AssesseeCode@1500000 : Record 13727;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      NodNocHeader@1500003 : Record 13786;
      SalesHeader@1500005 : Record 36;
    BEGIN
      // [SCENARIO 163736] Check if system throws error on trying to create accounting year in Tax Income accounting period before posting sales invoice
      // [FEATURE] [Sales Invoice]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Invoice
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);

      // [WHEN] Create Sales Order With TCS Nature of collection and post the sales Invoice
      ASSERTERROR CreateAndPostSalesDocWithTCS(
          SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,
          SalesHeader."Document Type"::Invoice);

      // [THEN] Accounting Period Error Created.
      Assert.ExpectedError(GetExpectedIncomeTaxAccPeriod);
    END;

    [Test]
    PROCEDURE VerifyAdvancePaymentWithoutIncomeTaxAccPeriod@1500003();
    VAR
      AssesseeCode@1500008 : Record 13727;
      NodNocHeader@1500003 : Record 13786;
      TcsNatureOfCollection@1500002 : Record 16507;
      TCSSetup@1500001 : Record 16508;
      GenJournalLine@1500004 : Record 81;
    BEGIN
      // [SCENARIO 163739] Verify the error message while creating an advance payment, when accounting year in Tax Income accounting period is not defined
      // [FEATURE] [General Journal]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For General Journal
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);

      // [WHEN] Create and post General Journal With TCS Advance Payment
      ASSERTERROR CreateAndPostGeneralJournalsWithTCS(GenJournalLine,TcsNatureOfCollection.Code,NodNocHeader."No.");

      // [THEN] Accounting Period Error Created.
      Assert.ExpectedError(GetExpectedIncomeTaxAccPeriod);
    END;

    [Test]
    PROCEDURE VerifySalesInvoicePostingWithoutTCANLocation@1500023();
    VAR
      AssesseeCode@1500000 : Record 13727;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      NodNocHeader@1500003 : Record 13786;
      SalesHeader@1500005 : Record 36;
      Location@1500006 : Record 14;
    BEGIN
      // [SCENARIO 163737] Check if system throws error on trying to post Sales Invoice without defining TCAN no in the setup
      // [FEATURE] [Sales Invoice]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Invoice
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);

      // [WHEN] Create Sales Invoice With TCS Nature of collection and post the sales Invoice
      CreateSalesInvoiceWithTCS(SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,
        LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCAN No. error thrown from Location code while posting Sales Invoice
      Assert.ExpectedError(STRSUBSTNO(LocationErr,SalesHeader."Location Code"));
    END;

    [Test]
    PROCEDURE VerifySalesInvoicePostingWithoutTCANCompanyInfo@1500000();
    VAR
      AssesseeCode@1500000 : Record 13727;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      NodNocHeader@1500003 : Record 13786;
      SalesHeader@1500005 : Record 36;
    BEGIN
      // [SCENARIO 163738] Check if system throws error on trying to post Sales Invoice with blank TCAN no. in the Company Information
      // [FEATURE] [Sales Invoice]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Invoice
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);
      ClearTCANInCompanyInfo;

      // [WHEN] Create Sales Invoice With TCS Nature of collection and post the sales Invoice ,Companyinfo TCAN No. make empty
      CreateSalesInvoiceWithTCS(SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,'');

      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCAN No. error thrown from Company Information while posting Sales Invoice
      Assert.ExpectedError(TCANErr);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocWithTCS@1500062(VAR SalesHeader@1500001 : Record 36;NodNocCode@1500002 : Code[20];TcsNatureOfCode@1500003 : Code[10];DocumentType@1500005 : Option) : Code[20];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocCode);
      CreateSalesLine(SalesHeader,TcsNatureOfCode);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateSalesInvoiceWithTCS@1500033(VAR SalesHeader@1500000 : Record 36;NodNocCode@1500003 : Code[20];TcsNatureOfCode@1500004 : Code[10];LocationCode@1500005 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocCode);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,TcsNatureOfCode);
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournalsWithTCS@1500005(VAR GenJournalLine@1500000 : Record 81;TcsNatureOfCode@1500001 : Code[10];NodNocCode@1500004 : Code[20]);
    BEGIN
      WITH GenJournalLine DO BEGIN
        LibraryJournals.CreateGenJournalLineWithBatch(
          GenJournalLine,"Document Type"::Payment,"Account Type"::Customer,NodNocCode,-LibraryRandom.RandDec(1000,0));
        VALIDATE("Party Type","Party Type"::Customer);
        VALIDATE("Party Code",NodNocCode);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
        VALIDATE("TCS Nature of Collection",TcsNatureOfCode);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE GetExpectedIncomeTaxAccPeriod@1500021() : Text;
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.RESET;
      IncomeTaxAccountingPeriod.SETFILTER("Ending Date",'>=%1',WORKDATE);
      IncomeTaxAccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
      ASSERTERROR IncomeTaxAccountingPeriod.FINDFIRST;
      EXIT(GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE ClearTCANInCompanyInfo@1500004();
    VAR
      CompanyInfo@1500000 : Record 79;
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.VALIDATE("T.C.A.N. No.",'');
      CompanyInfo.MODIFY;
    END;

    LOCAL PROCEDURE CreateSalesLine@1500009(SalesHeader@1500000 : Record 36;TcsNatureOfCode@1500002 : Code[10]);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandDec(10,0));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,0));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCode);
      SalesLine.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

