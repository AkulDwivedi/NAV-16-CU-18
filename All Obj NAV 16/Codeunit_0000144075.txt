OBJECT Codeunit 144075 TDS Calculation in Journals
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TDSAmountErr@1500001 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=TDS Amount is not matching';
      CompanyInformation@1500022 : Record 79;
      GeneralLedgerSetup@1500021 : Record 98;
      IncomeTaxAccountingPeriod@1500020 : Record 13724;
      TdsNatureOfDeduction@1500019 : Record 13726;
      NodNocHeader@1500015 : Record 13786;
      TDSSetup@1500013 : Record 13728;
      LibraryReportDataset@1500012 : Codeunit 131007;
      LibrarySetupStorage@1500011 : Codeunit 131009;
      LibraryVariableStorage@1500009 : Codeunit 131004;
      LibraryRandom@1500008 : Codeunit 130440;
      LibraryERM@1500007 : Codeunit 131300;
      LibraryTDS@1500006 : Codeunit 143000;
      LibraryUtility@1500005 : Codeunit 131000;
      LibraryPurchase@1500004 : Codeunit 130512;
      Assert@1500003 : Codeunit 130000;
      TDSAccountNo@1500017 : Code[20];
      isInitialized@1500000 : Boolean;
      TDSValueErr@1500024 : TextConst '@@@="%1 and %2 = Actual Total TDS Amount and Expected Total TDS Amount";ENU=The TDS Amounts %1 is incorrect in %2.';
      TDSAmtErr@1500023 : TextConst '@@@="%1 and %2 = Actual TDS Amount and Expected TDS Amount";ENU=The TDS Amount %1 is incorrect in %2.';
      SurchargeAmtErr@1500016 : TextConst '@@@="%1 and %2 = Actual Surcharge Amount and Expected Surcharge Amount";ENU=The Surchage Amount %1 is incorrect in %2.';
      eCessAmtErr@1500010 : TextConst '@@@="%1 and %2 = Actual eCess Amount and Expected eCess Amount";ENU=The eCess Amount %1 is incorrect in %2.';
      sheCessAmtErr@1500002 : TextConst '@@@="%1 and %2 = Actual sheCess Amount and Expected sheCess Amount";ENU=The sheCess Amount %1 is incorrect in %2.';

    [Test]
    PROCEDURE VerifyGeneralJournalWithTDS@1500005();
    VAR
      GenJournalLine@1500001 : Record 81;
      ExpectedGenJnlLine@1500000 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 164229] Check if system is calculating TDS related amounts in General Journals.
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For General Journals
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create General Journal including TDS and Calculated expected journal lines with TDS calculation
      CreateJournalDocument(GenJournalLine,GenJournalTemplate.Type::Payments,
        Amount,GenJournalTemplate."Sub Type"::" ");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,Amount);

      // [THEN] General Journal Lines are calculated  using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,GenJournalLine);
    END;

    [Test]
    PROCEDURE VerifyPurchaseJournalWithTDS@1500004();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedGenJnlLine@1500001 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 164229] Check if system is calculating TDS related amounts in the Purchase Jounrals
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Journals
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Created Purchase Journal including TDS and calculated the expected TDS amounts
      CreateJournalDocument(GenJournalLine,GenJournalTemplate.Type::Purchases,
        Amount,GenJournalTemplate."Sub Type"::" ");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,Amount);

      // [THEN] Purchase Journal Lines are calculated  using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,GenJournalLine);
    END;

    [Test]
    PROCEDURE VerifyPaymentJournalWithTDS@1500003();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedGenJnlLine@1500001 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 164229] Check if system is calculating TDS related amounts in the Payment Jounrals
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup  For Payment Journals
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Payment Journal including TDS and calculated the expected tds amounts from the journal lines
      CreateJournalDocument(GenJournalLine,GenJournalTemplate.Type::Payments,
        Amount,GenJournalTemplate."Sub Type"::" ");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,Amount);

      // [THEN] Payment Jounral Lines are calculated  using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,GenJournalLine);
    END;

    [Test]
    PROCEDURE VerifyCashPaymentVoucherWithTDS@1500013();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedGenJnlLine@1500002 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 164229] Check if system is calculating TDS related amounts in the Cash Payment Jounrals
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Cash Payment Voucher Including TDS and calculated the expected tds amounts in jounral lines
      CreateJournalDocument(GenJournalLine,GenJournalTemplate.Type::Payments,
        Amount,GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,Amount);

      // [THEN] Cash Payment Voucher is calculated  using  tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,GenJournalLine);
    END;

    [Test]
    PROCEDURE VerifyBankPaymentVoucherWithTDS@1500002();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedGenJnlLine@1500002 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 164229] Check if system is calculating TDS related amounts in the Bank Payment Jounrals
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Bank Payment Voucher and calculated the expected Journal lines with TDS Amounts
      CreateJournalDocument(GenJournalLine,GenJournalTemplate.Type::Payments,
        Amount,GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,Amount);

      // [THEN] Bank Payment Voucher is calculated using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,GenJournalLine);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountInPurchaseOrder@1500021();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
    BEGIN
      // [SCENARIO 164280] Checking the TDS Amount in Purchase order with TDS Nature of Deduction
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create PO with Item with TDS Nature of Deduction
      CreatePurchaseOrderWithTDS(PurchaseHeader,PurchaseLine,LibraryRandom.RandDec(10000,2),
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount);

      // [THEN] Verified TDS amount Calculated
      Assert.AreNearlyEqual(ExpectedPurchaseLine."Total TDS Including SHE CESS",
        LibraryTDS.RoundTDS(GetPurchaseDocumentTDSAmount(PurchaseLine)),GeneralLedgerSetup."TDS Rounding Precision",TDSAmountErr);
    END;

    [Test]
    PROCEDURE VerifyTDSGLEntryForPostedPurchaseOrderWithTDS@1500022();
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      PostedPurchaseOrderDoc@1500001 : Code[20];
      TDSamt@1500000 : Decimal;
    BEGIN
      // [SCENARIO 164280] Checking the GL Entries for Posted Purchase order with TDS Nature of Deduction
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create PO with Item with TDS Nature of Deduction
      CreatePurchaseOrderWithTDS(PurchaseHeader,PurchaseLine,LibraryRandom.RandDec(10000,2),
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item);
      TDSamt := GetPurchaseDocumentTDSAmount(PurchaseLine);
      PostedPurchaseOrderDoc := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verified TDS amount Posted in GL Entry
      VerifyTDSAmountInGL(PostedPurchaseOrderDoc,TDSamt);
    END;

    [Test]
    PROCEDURE VerifyPayTDSGLEntryForBankPaymentVoucher@1500023();
    VAR
      PayTDSDocNo@1500001 : Code[20];
      InvoiceNo@1500003 : Code[20];
      TDSAmt@1500000 : Decimal;
    BEGIN
      // [SCENARIO 164280] Checking the Pay TDS GL Entries for Bank Payment Voucher
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher and apply TDS Entry
      CreateAndPostPurchaseOrderWithPayTDS(PayTDSDocNo,InvoiceNo,TDSAmt);

      // [THEN] Verified TDS amount Posted in GL Entry
      VerifyTDSAmountInGL(PayTDSDocNo,-TDSAmt);
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler)]
    PROCEDURE VerifyForm26QAfterPayTDSViaBankPaymentVoucher@1500029();
    VAR
      PayTDSDocNo@1500001 : Code[20];
      InvoiceNo@1500003 : Code[20];
      TDSAmt@1500000 : Decimal;
    BEGIN
      // [SCENARIO 164280] Verifying Form 26Q Deductee Column for PANAPPLIED after Pay TDS
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher and apply TDS Entry
      CreateAndPostPurchaseOrderWithPayTDS(PayTDSDocNo,InvoiceNo,TDSAmt);
      LibraryTDS.RunUpdateChallanRegister(
        LibraryTDS.UpdateChallanDetails(InvoiceNo,PayTDSDocNo,IncomeTaxAccountingPeriod."Starting Date"),
        LibraryRandom.RandInt(2000));
      UpdateForm26QandeTDSFieldValues(0);
      COMMIT;
      REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Verified PAN status in the Form 26Q
      VerifyValuesOnForm26QPreview;
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE VerifyForm26QAfterPayTDSAndGeneratingeTDSViaBankPaymentVoucher@1500030();
    VAR
      PayTDSDocNo@1500002 : Code[20];
      InvoiceNo@1500004 : Code[20];
      TDSAmt@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164280] Verifying Form 26Q Deductee Column for PANAPPLIED after generation of eTDS
      // [FEATURE] [eTDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,Non Resident Payments,TDS Nature of deduction,Assesse Code,TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher and apply TDS Entry
      CreateAndPostPurchaseOrderWithPayTDS(PayTDSDocNo,InvoiceNo,TDSAmt);
      LibraryTDS.RunUpdateChallanRegister(
        LibraryTDS.UpdateChallanDetails(InvoiceNo,PayTDSDocNo,IncomeTaxAccountingPeriod."Starting Date"),
        LibraryRandom.RandInt(2000));
      UpdateForm26QandeTDSFieldValues(0);
      COMMIT;
      REPORT.RUN(REPORT::"Form 26Q");
      GenerateeTDSUsingPagefor26QeTDS(TRUE);

      // [THEN] Verified PAN status in the Form 26Q
      VerifyValuesOnForm26QPreview;
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibrarySetupStorage.Restore;
      RollbackChangesMadeToDataBase;
      IF isInitialized THEN
        EXIT;
      GeneralLedgerSetup.GET;
      CompanyInformation.GET;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);
      InitialSetup;
      isInitialized := TRUE;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE InitialSetup@1500011();
    VAR
      Vendor@1500000 : Record 23;
    BEGIN
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriodQuarters(IncomeTaxAccountingPeriod."No.");
      LibraryTDS.CreateForeignVendorWithPANAPPLIED(Vendor,'','');
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
      TDSAccountNo := LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithTDS@1500077(VAR PurchaseHeader@1500006 : Record 38;VAR PurchaseLine@1500005 : Record 39;Amount@1500002 : Decimal;DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';LineType@1500000 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,NodNocHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
      PurchaseLine.MODIFY(TRUE);
      PurchaseLine.CalculateTDS(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithPayTDS@1500000(VAR PayTDSDocNo@1500001 : Code[20];VAR InvDocNo@1500005 : Code[20];VAR TDSAmt@1500000 : Decimal);
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      GenJournalLine@1500002 : Record 81;
    BEGIN
      CreatePurchaseOrderWithTDS(PurchaseHeader,PurchaseLine,
        LibraryRandom.RandDec(10000,2),PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item);
      TDSAmt := GetPurchaseDocumentTDSAmount(PurchaseLine);
      InvDocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateGeneralLinesWithPayTDS(GenJournalLine);
      PayTDSDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE UpdateForm26QandeTDSFieldValues@1500024(FieldNumber@1500000 : Integer);
    VAR
      FinancialYear@1500007 : Code[10];
      TANNo@1500006 : Code[10];
      PANNo@1500005 : Code[10];
      FullName@1500004 : Text;
      Designation@1500003 : Text;
      ReportFrequency@1500002 : ' ,Q1,Q2,Q3,Q4';
      PrintingDate@1500001 : Date;
    BEGIN
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";
      ReportFrequency := ReportFrequency::Q1;
      FullName := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      Designation := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10);
      PrintingDate := WORKDATE;
      TANNo := CompanyInformation."T.A.N. No.";
      CASE FieldNumber OF
        1:
          ReportFrequency := ReportFrequency::" ";
        2:
          FinancialYear := '';
        3:
          FullName := '';
        4:
          Designation := '';
        5:
          PrintingDate := 0D;
        6:
          PANNo := '';
        7:
          TANNo := '';
      END;
      LibraryVariableStorage.Enqueue(FinancialYear);
      LibraryVariableStorage.Enqueue(ReportFrequency);
      LibraryVariableStorage.Enqueue(FullName);
      LibraryVariableStorage.Enqueue(Designation);
      LibraryVariableStorage.Enqueue(PrintingDate);
      LibraryVariableStorage.Enqueue(TANNo);
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPagefor26QeTDS@1500015(Resident@1500000 : Boolean);
    VAR
      GenerateeTDS@1500001 : TestPage 16507;
    BEGIN
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500040();
    VAR
      ChallanRegister@1500003 : Record 16504;
      TDSEntry@1500002 : Record 13729;
      BatchHeader@1500001 : Record 16503;
      Form26Q27QEntry@1500000 : Record 16505;
    BEGIN
      ChallanRegister.DELETEALL;
      BatchHeader.DELETEALL;
      Form26Q27QEntry.DELETEALL;
      TDSEntry.DELETEALL;
    END;

    LOCAL PROCEDURE CreateGeneralLinesWithPayTDS@1500007(VAR GenJournalLine@1500000 : Record 81);
    VAR
      GenJournalTemplate@1500002 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateJournalTemplate(GenJournalTemplate,GenJournalTemplate.Type::Payments,
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",TDSAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,0);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryTDS.PayTDS(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyValuesOnForm26QPreview@1500025();
    VAR
      Vendor@1500000 : Record 23;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Vendor.GET(NodNocHeader."No.");
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Deductee_P_A_N__No__',Vendor."P.A.N. No.");
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500059(VAR ExpectedPurchaseLine@1500002 : Record 39;TDSBaseAmt@1500000 : Decimal);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := TDSBaseAmt;
        "TDS Amount" := TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount";
        "Surcharge Amount" := TDSSetup."Surcharge %" / 100 * "TDS Amount";
        "eCESS on TDS Amount" := TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount");
        "SHE Cess on TDS Amount" := TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount");
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE VerifyTDSAmountInGL@1500049(PostedDocNo@1500001 : Code[20];TDSAmount@1500000 : Decimal);
    VAR
      GLEntry@1500002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",PostedDocNo);
      GLEntry.SETRANGE("G/L Account No.",TDSAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(GLEntry.Amount,-ROUND(TDSAmount,GeneralLedgerSetup."TDS Rounding Precision"),
        GeneralLedgerSetup."TDS Rounding Precision",TDSAmountErr);
    END;

    LOCAL PROCEDURE GetPurchaseDocumentTDSAmount@1500039(PurchaseLine@1500000 : Record 39) : Decimal;
    VAR
      PurchaseLineTDS@1500001 : Record 39;
    BEGIN
      PurchaseLineTDS.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchaseLineTDS.SETRANGE("No.",PurchaseLine."No.");
      PurchaseLineTDS.FINDFIRST;
      EXIT(PurchaseLineTDS."Total TDS Including SHE CESS");
    END;

    LOCAL PROCEDURE CalcTDSAmountsforJournalLine@1500042(VAR GenJournalLine@1500003 : Record 81;TaxBaseAmount@1500004 : Decimal);
    BEGIN
      WITH GenJournalLine DO BEGIN
        "TDS/TCS Base Amount" := TaxBaseAmount;
        "TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."Non PAN TDS %" / 100 * "TDS/TCS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS/TCS Amount");
        "eCESS on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "SHE Cess on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "Total TDS/TCS Incl. SHE CESS" :=
          "TDS/TCS Amount" + "eCESS on TDS/TCS Amount" + "SHE Cess on TDS/TCS Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE VerifyGeneralJournalLines@1500058(ExpectedGenJnlLine@1500003 : Record 81;GenJournalLine@1500002 : Record 81);
    BEGIN
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine."TDS/TCS Amount",GenJournalLine."TDS/TCS Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(
          TDSAmtErr,GenJournalLine."TDS/TCS Amount",ExpectedGenJnlLine."TDS/TCS Amount"));
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine."Surcharge Amount",
        GenJournalLine."Surcharge Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(
          SurchargeAmtErr,GenJournalLine."Surcharge Amount",ExpectedGenJnlLine."Surcharge Amount"));
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine."eCESS on TDS/TCS Amount",
        GenJournalLine."eCESS on TDS/TCS Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(
          eCessAmtErr,GenJournalLine."eCESS on TDS/TCS Amount",ExpectedGenJnlLine."eCESS on TDS/TCS Amount"));
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine."SHE Cess on TDS/TCS Amount",
        GenJournalLine."SHE Cess on TDS/TCS Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(
          sheCessAmtErr,GenJournalLine."SHE Cess on TDS/TCS Amount",ExpectedGenJnlLine."SHE Cess on TDS/TCS Amount"));
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(
          TDSValueErr,GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),ExpectedGenJnlLine."Total TDS/TCS Incl. SHE CESS"));
    END;

    LOCAL PROCEDURE CreateJournalDocument@1500046(VAR GenJournalLine@1500009 : Record 81;Type@1500004 : Option;Amount@1500002 : Decimal;Subtype@1500000 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher');
    VAR
      GenJournalBatch@1500007 : Record 232;
      GenJournalTemplate@1500005 : Record 80;
    BEGIN
      CreateJournalTemplate(GenJournalTemplate,Type,Subtype);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,NodNocHeader."No.",Amount);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
        VALIDATE("Party Type","Party Type"::Vendor);
        VALIDATE("Party Code",NodNocHeader."No.");
        VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateJournalTemplate@1500006(VAR GenJournalTemplate@1500000 : Record 80;Type@1500001 : Option;Subtype@1500002 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher');
    BEGIN
      GenJournalTemplate.VALIDATE(Type,Type);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",Subtype);
      GenJournalTemplate.MODIFY(TRUE);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500019(VAR GenerateeTDS@1500001 : TestRequestPage 16508);
    VAR
      FileManagement@1500003 : Codeunit 419;
      ReportFrequency@1500002 : ' ,Q1,Q2,Q3,Q4';
      FileName@1500000 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName('txt');
      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      GenerateeTDS.ReportFrequency.SETVALUE(ReportFrequency::Q1);
      GenerateeTDS.FinancialYear.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      GenerateeTDS.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,3));
      GenerateeTDS.Email.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTDS."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500018(VAR Form26Q@1500000 : TestRequestPage 16505);
    VAR
      FinancialYear@1500006 : Variant;
      FullName@1500005 : Variant;
      Designation@1500004 : Variant;
      ReportFrequency@1500003 : Variant;
      PrintingDate@1500002 : Variant;
      TANNo@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(ReportFrequency);
      LibraryVariableStorage.Dequeue(FullName);
      LibraryVariableStorage.Dequeue(Designation);
      LibraryVariableStorage.Dequeue(PrintingDate);
      LibraryVariableStorage.Dequeue(TANNo);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.ReportFrequency.SETVALUE(ReportFrequency);
      Form26Q.TANLocation.SETVALUE(TANNo);
      Form26Q.FullName.SETVALUE(FullName);
      Form26Q.PrintingDate.SETVALUE(PrintingDate);
      Form26Q.Designation.SETVALUE(Designation);
      Form26Q."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form26Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    END.
  }
}

