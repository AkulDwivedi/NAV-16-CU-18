OBJECT Codeunit 136207 Marketing Batch Jobs
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1003 : Codeunit 131000;
      LibraryMarketing@1002 : Codeunit 131900;
      LibrarySales@1008 : Codeunit 130509;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      ExistError@1004 : TextConst 'ENU=%1 for %2 must not exist.';
      Description@1005 : TextConst 'ENU=Follow-up on segment %1';
      DescriptionForPage@1006 : Text[50];
      SearchResultError@1007 : TextConst 'ENU=%1 must be empty.';

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      // Clearing global variable.
      DescriptionForPage := '';
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE LogSegmentWithCampaignEntry@1();
    VAR
      SegmentHeader@1000 : Record 5076;
      Campaign@1001 : Record 5071;
      CampaignEntry@1005 : Record 5072;
      InteractionTemplate@1002 : Record 5064;
      LoggedSegment@1007 : Record 5075;
      SegmentHeader2@1003 : Record 5076;
    BEGIN
      // Covers document number 129051,129055, CU7030 - refer to TFS ID 161415, 167035.
      // Test Logged segment, Follow Up Segment and Campaign Entries.

      // 1. Setup: Create Campaign, Interaction Template, Segment Header and Segment Line with Contact No.
      Initialize;
      LibraryMarketing.CreateCampaign(Campaign);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      CreateSegment(SegmentHeader,Campaign."No.",InteractionTemplate.Code);

      // 2. Exercise: Run Log Segment Batch Job for Created Segment.
      RunLogSegment(SegmentHeader."No.",TRUE);

      // 3. Verify: Verify Campaign Entry, Logged Segment, Follow Up Segment created.
      CampaignEntry.SETRANGE("Campaign No.",SegmentHeader."Campaign No.");
      CampaignEntry.FINDFIRST;
      CampaignEntry.TESTFIELD("Segment No.",SegmentHeader."No.");

      LoggedSegment.SETRANGE("Segment No.",SegmentHeader."No.");
      LoggedSegment.FINDFIRST;
      LoggedSegment.CALCFIELDS("No. of Campaign Entries");
      LoggedSegment.TESTFIELD("No. of Campaign Entries",1);

      SegmentHeader2.SETRANGE("Campaign No.",Campaign."No.");
      SegmentHeader2.FINDFIRST;
      SegmentHeader2.TESTFIELD(Description,STRSUBSTNO(Description,SegmentHeader."No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE CanceledCampaignEntry@18();
    VAR
      SegmentHeader@1000 : Record 5076;
      CampaignEntry@1005 : Record 5072;
      Campaign@1002 : Record 5071;
      InteractionTemplate@1001 : Record 5064;
      InteractionLogEntry@1003 : Record 5065;
    BEGIN
      // Covers document number 129055 - refer to TFS ID 161415.
      // Test Campaign Entries successfully Canceled.

      // 1. Setup: Create Campaign, Interaction Template, Segment Header and Segment Line with Contact No.
      Initialize;
      LibraryMarketing.CreateCampaign(Campaign);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      CreateSegment(SegmentHeader,Campaign."No.",InteractionTemplate.Code);

      // 2. Exercise: Run Log Segment Batch Job for Created Segment and Canceled the Created Logged Segment.
      RunLogSegment(SegmentHeader."No.",FALSE);
      CancelCampaignEntry(SegmentHeader."Campaign No.");

      // 3. Verify: Verify Campaign Entry and Interaction Log Entry successfully Canceled.
      CampaignEntry.SETRANGE("Campaign No.",SegmentHeader."Campaign No.");
      CampaignEntry.FINDFIRST;
      CampaignEntry.TESTFIELD("Segment No.",SegmentHeader."No.");
      CampaignEntry.TESTFIELD(Canceled,TRUE);

      InteractionLogEntry.SETRANGE("Segment No.",SegmentHeader."No.");
      InteractionLogEntry.FINDFIRST;
      InteractionLogEntry.TESTFIELD(Canceled,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE DeleteCampaignEntry@2();
    VAR
      SegmentHeader@1000 : Record 5076;
      CampaignEntry@1005 : Record 5072;
      Campaign@1002 : Record 5071;
      InteractionTemplate@1001 : Record 5064;
      InteractionLogEntry@1004 : Record 5065;
      DeleteCampaignEntries@1007 : Report 5189;
    BEGIN
      // Covers document number 129055 - refer to TFS ID 161415.
      // Test Campaign Entries successfully Deleted.

      // 1. Setup: Create Campaign, Interaction Template, Segment Header, Segment Line with Contact No., Run Log Segment Batch Job
      // for Created Segment and Canceled the Created Logged Segment.
      Initialize;
      LibraryMarketing.CreateCampaign(Campaign);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);

      CreateSegment(SegmentHeader,Campaign."No.",InteractionTemplate.Code);
      RunLogSegment(SegmentHeader."No.",FALSE);
      CancelCampaignEntry(SegmentHeader."Campaign No.");

      // 2. Exercise: Run Delete Campaign Entries Batch Job.
      CampaignEntry.SETRANGE("Campaign No.",SegmentHeader."Campaign No.");
      DeleteCampaignEntries.SETTABLEVIEW(CampaignEntry);
      DeleteCampaignEntries.USEREQUESTPAGE(FALSE);
      DeleteCampaignEntries.RUNMODAL;

      // 3. Verify: Verify Campaign Entries and Interaction Log Entry are successfully Deleted.
      Assert.IsFalse(CampaignEntry.FINDFIRST,STRSUBSTNO(ExistError,CampaignEntry.TABLECAPTION,SegmentHeader."Campaign No."));

      InteractionLogEntry.SETRANGE("Campaign No.",SegmentHeader."Campaign No.");
      Assert.IsFalse(
        InteractionLogEntry.FINDFIRST,STRSUBSTNO(ExistError,InteractionLogEntry.TABLECAPTION,InteractionLogEntry."Campaign No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE DeleteLogSegment@3();
    VAR
      SegmentHeader@1000 : Record 5076;
      LoggedSegment@1005 : Record 5075;
      Campaign@1002 : Record 5071;
      InteractionTemplate@1001 : Record 5064;
      DeleteLoggedSegments@1006 : Report 5191;
    BEGIN
      // Covers document number 129057 - refer to TFS ID 161415.
      // Test Logged segment successfully deleted.

      // 1. Setup: Create Interaction Template Code, Segment Header, Segment Line with Contact, Run Logged Segment Batch Job for Created
      // Segment and Canceled the Created Logged Segment.
      Initialize;
      LibraryMarketing.CreateCampaign(Campaign);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      CreateSegment(SegmentHeader,Campaign."No.",InteractionTemplate.Code);
      RunLogSegment(SegmentHeader."No.",FALSE);
      LoggedSegment.SETRANGE("Segment No.",SegmentHeader."No.");
      LoggedSegment.FINDFIRST;
      LoggedSegment.ToggleCanceledCheckmark;

      // 2. Exercise: Run Delete Logged Segments Batch Report.
      DeleteLoggedSegments.SETTABLEVIEW(LoggedSegment);
      DeleteLoggedSegments.USEREQUESTPAGE(FALSE);
      DeleteLoggedSegments.RUNMODAL;

      // 3. Verify: Verify Logged Segment deleted.
      Assert.IsFalse(LoggedSegment.FINDFIRST,STRSUBSTNO(ExistError,LoggedSegment.TABLECAPTION,SegmentHeader."No."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,ModalFormCloseOpportunity,MessageHandler)]
    PROCEDURE CloseOpportunity@10();
    VAR
      Opportunity@1001 : Record 5092;
      OpportunityEntry@1000 : Record 5093;
      DefaultSalesCycleCode@1005 : Code[10];
      ContactNo@1006 : Code[20];
    BEGIN
      // Covers document number 129048 - refer to TFS ID 161415.
      // Test Opportunity successfully closed.

      // 1. Setup: Update Sale Cycle Code on Marketing Setup, Create Contact and Create opportunity for Contact.
      CreateOpportunityWithContact(DefaultSalesCycleCode,ContactNo);

      // 2. Exercise: Close the Created Opportunity.
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;

      // 3. Verify: Verify Opportunity successfully closed and Opportunity Entry created.
      Opportunity.FINDFIRST;
      Opportunity.TESTFIELD(Closed,TRUE);
      Opportunity.TESTFIELD("Date Closed",WORKDATE);

      OpportunityEntry.SETRANGE("Opportunity No.",Opportunity."No.");
      OpportunityEntry.FINDFIRST;
      OpportunityEntry.TESTFIELD("Contact No.",ContactNo);
      OpportunityEntry.TESTFIELD("Date Closed",WORKDATE);

      // 4. Teardown: Rollback Default Sale Cycle Code on Marketing Setup.
      UpdateDefaultSalesCycleCode(DefaultSalesCycleCode);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,ModalFormCloseOpportunity,MessageHandler)]
    PROCEDURE DeleteOpportunity@6();
    VAR
      Opportunity@1001 : Record 5092;
      OpportunityEntry@1000 : Record 5093;
      DeleteOpportunities@1006 : Report 5182;
      DefaultSalesCycleCode@1005 : Code[10];
      ContactNo@1007 : Code[20];
    BEGIN
      // Covers document number 129048 - refer to TFS ID 161415.
      // Test Opportunity successfully deleted.

      // 1. Setup: Update Sale Cycle Code on Marketing Setup, Create Contact, Create opportunity for Contact and Close the Created
      // Opportunity.
      CreateOpportunityWithContact(DefaultSalesCycleCode,ContactNo);
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;

      // 2. Exercise: Run Delete Opportunity Batch Job.
      DeleteOpportunities.SETTABLEVIEW(Opportunity);
      DeleteOpportunities.USEREQUESTPAGE(FALSE);
      DeleteOpportunities.RUNMODAL;

      // 3. Verify: Verify Opportunity and Opportunity Entry are deleted.
      Assert.IsFalse(Opportunity.FINDFIRST,STRSUBSTNO(ExistError,Opportunity.TABLECAPTION,ContactNo));

      OpportunityEntry.SETRANGE("Opportunity No.",Opportunity."No.");
      Assert.IsFalse(OpportunityEntry.FINDFIRST,STRSUBSTNO(ExistError,OpportunityEntry.TABLECAPTION,Opportunity."No."));

      // 4. Teardown: Rollback Default Sale Cycle Code on Marketing Setup.
      UpdateDefaultSalesCycleCode(DefaultSalesCycleCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ServiceEMailQueue@7();
    VAR
      Customer@1002 : Record 18;
      ServiceHeader@1000 : Record 5900;
      ServiceEMailQueue@1003 : Record 5935;
      LibraryService@1001 : Codeunit 131902;
    BEGIN
      // Covers document number 129098 - refer to TFS ID 161415.
      // Test Service E-Mail Queue.

      // 1. Setup: Create Service Header.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer."E-Mail" := LibraryUtility.GenerateGUID + '@microsoft.com';
      Customer.MODIFY(TRUE);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");

      // 2. Exercise: Update Notify Customer to By E-Mail and Status to Finished on Service Header.
      ServiceHeader.VALIDATE("Notify Customer",ServiceHeader."Notify Customer"::"By E-Mail");
      ServiceHeader.VALIDATE(Status,ServiceHeader.Status::Finished);
      ServiceHeader.MODIFY(TRUE);

      // 3. Verify: Verify Service E-Mail Queue created.
      ServiceEMailQueue.SETRANGE("Document Type",ServiceEMailQueue."Document Type"::"Service Order");
      ServiceEMailQueue.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceEMailQueue.FINDFIRST;
      ServiceEMailQueue.TESTFIELD("To Address",Customer."E-Mail");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DeleteServiceEMailQueue@8();
    VAR
      Customer@1002 : Record 18;
      ServiceHeader@1000 : Record 5900;
      ServiceEMailQueue@1003 : Record 5935;
      DeleteServiceEMailQueue@1004 : Report 6006;
      LibraryService@1001 : Codeunit 131902;
    BEGIN
      // Covers document number 129098 - refer to TFS ID 161415.
      // Test Service E-Mail Queue successfully deleted.

      // 1. Setup: Create Service Header, Update Notify Customer to By E-Mail and Status to Finished on Service Header.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      ServiceHeader.VALIDATE("Notify Customer",ServiceHeader."Notify Customer"::"By E-Mail");
      ServiceHeader.VALIDATE(Status,ServiceHeader.Status::Finished);
      ServiceHeader.MODIFY(TRUE);

      // 2. Exercise: Run Delete Service E-Mail Queue Batch Job.
      ServiceEMailQueue.SETRANGE("Document Type",ServiceEMailQueue."Document Type"::"Service Order");
      ServiceEMailQueue.SETRANGE("Document No.",ServiceHeader."No.");
      DeleteServiceEMailQueue.SETTABLEVIEW(ServiceEMailQueue);
      DeleteServiceEMailQueue.USEREQUESTPAGE(FALSE);
      DeleteServiceEMailQueue.RUNMODAL;

      // 3. Verify: Verify Service E-Mail Queue deleted.
      Assert.IsFalse(ServiceEMailQueue.FINDFIRST,STRSUBSTNO(ExistError,ServiceEMailQueue.TABLECAPTION,ServiceHeader."No."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerToDo)]
    PROCEDURE CanceledTeamToDo@11();
    VAR
      Team@1000 : Record 5083;
      ToDo@1005 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
    BEGIN
      // Covers document number 129054 - refer to TFS ID 161415.
      // Test To do successfully canceled with Type Team.

      // 1. Setup: Create Team.
      Initialize;
      LibraryMarketing.CreateTeam(Team);
      DescriptionForPage := Team.Code;  // Assigning value to Global Variable.

      // 2. Exercise: Create To-Do for Team and Canceled the Created To-Do.
      ToDo.SETRANGE("Team Code",Team.Code);
      TempToDo.CreateToDoFromToDo(ToDo);

      ToDo.FINDFIRST;
      ToDo.VALIDATE(Canceled,TRUE);
      ToDo.MODIFY(TRUE);

      // 3. Verify: Verify To-Do Canceled.
      ToDo.FINDFIRST;
      ToDo.TESTFIELD(Canceled,TRUE);
      ToDo.TESTFIELD(Status,ToDo.Status::Completed);
      ToDo.TESTFIELD("Date Closed",TODAY);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerToDo)]
    PROCEDURE DeleteToDo@12();
    VAR
      Team@1000 : Record 5083;
      ToDo@1005 : Record 5080;
      TempToDo@1004 : TEMPORARY Record 5080;
      DeleteToDos@1002 : Report 5188;
    BEGIN
      // Covers document number 129054 - refer to TFS ID 161415.
      // Test To do successfully deleted.

      // 1. Setup: Create Team, Create To-Do for Team and Canceled the Created To-Do.
      Initialize;
      LibraryMarketing.CreateTeam(Team);
      DescriptionForPage := Team.Code;  // Assigning value to Global Variable.
      ToDo.SETRANGE("Team Code",Team.Code);
      TempToDo.CreateToDoFromToDo(ToDo);
      ToDo.FINDFIRST;
      ToDo.VALIDATE(Canceled,TRUE);
      ToDo.MODIFY(TRUE);

      // 2. Exercise: Run Delete To-Dos Batch Job.
      DeleteToDos.SETTABLEVIEW(ToDo);
      DeleteToDos.USEREQUESTPAGE(FALSE);
      DeleteToDos.RUNMODAL;

      // 3. Verify: Verify To-Do deleted.
      Assert.IsFalse(ToDo.FINDFIRST,STRSUBSTNO(ExistError,ToDo.TABLECAPTION,Team.Code));
    END;

    [Test]
    PROCEDURE DeleteDuplicateContactSearchStringData@30();
    VAR
      ContDuplicateSearchString@1000 : Record 5086;
      MarketingSetup@1001 : Record 5079;
    BEGIN
      // Check that no data exists in Contact Duplicate Search String Table after deleting the data from it.

      // 1. Setup: Update Marketing Setup.
      Initialize;
      MarketingSetup.GET;
      UpdateMarketingSetup(FALSE,FALSE);

      // 2. Exercise: Delete all the data from Contact Duplicate Search String Table.
      ContDuplicateSearchString.DELETEALL;

      // 3. Verify: Verify that no data exists in the table.
      Assert.IsTrue(ContDuplicateSearchString.ISEMPTY,STRSUBSTNO(SearchResultError,ContDuplicateSearchString.TABLECAPTION));

      // 4. Tear Down: Roll Back Marketing Setup.
      UpdateMarketingSetup(MarketingSetup."Maintain Dupl. Search Strings",MarketingSetup."Autosearch for Duplicates");
    END;

    [Test]
    [HandlerFunctions(GenerateDuplSearchStringRequestPageHandler)]
    PROCEDURE GenerateDuplicateConactSearchString@51();
    VAR
      ContDuplicateSearchString@1000 : Record 5086;
      MarketingSetup@1001 : Record 5079;
    BEGIN
      // Check that data generated automatically in Contact Duplicate Search String Table after running Generate Duplicate Search String Batch Job.

      // 1. Setup: Update Marketing Setup and delete all the data from Contact Duplicate Search String Table.
      Initialize;
      MarketingSetup.GET;
      UpdateMarketingSetup(FALSE,FALSE);
      ContDuplicateSearchString.DELETEALL;

      // 2. Exercise.
      RunGenerateDuplSearchStringReport;

      // 3. Verify: Verify that data exists in Contact Duplicate Search String Table.
      Assert.IsFalse(
        ContDuplicateSearchString.ISEMPTY,
        STRSUBSTNO(ExistError,ContDuplicateSearchString.FIELDCAPTION("Contact Company No."),ContDuplicateSearchString.TABLECAPTION));

      // 4. Tear Down: Roll Back Marketing Setup.
      UpdateMarketingSetup(MarketingSetup."Maintain Dupl. Search Strings",MarketingSetup."Autosearch for Duplicates");
    END;

    LOCAL PROCEDURE CancelCampaignEntry@14(CampaignNo@1000 : Code[20]);
    VAR
      CampaignEntry@1001 : Record 5072;
    BEGIN
      CampaignEntry.SETRANGE("Campaign No.",CampaignNo);
      CampaignEntry.FINDFIRST;
      CampaignEntry.ToggleCanceledCheckmark;
    END;

    LOCAL PROCEDURE CreateOpportunityWithContact@25(VAR DefaultSalesCycleCode@1000 : Code[10];VAR ContactNo@1001 : Code[20]);
    VAR
      Contact@1007 : Record 5050;
      Opportunity@1006 : Record 5092;
      TempOpportunity@1005 : TEMPORARY Record 5092;
      SalesCycle@1004 : Record 5090;
    BEGIN
      // Update Sale Cycle Code on Marketing Setup, Create Contact and Create opportunity for Contact.
      Initialize;
      DescriptionForPage := LibraryUtility.GenerateGUID;  // Assigning value to Global Variable.
      SalesCycle.FINDFIRST;
      DefaultSalesCycleCode := UpdateDefaultSalesCycleCode(SalesCycle.Code);
      LibraryMarketing.CreateContact(Contact);
      COMMIT;

      Opportunity.SETRANGE("Contact No.",Contact."No.");
      TempOpportunity.CreateOppFromOpp(Opportunity);

      ContactNo := Contact."No.";
    END;

    LOCAL PROCEDURE CreateSegment@32(VAR SegmentHeader@1007 : Record 5076;CampaignNo@1000 : Code[20];InteractionTemplateCode@1001 : Code[10]);
    VAR
      SegmentLine@1006 : Record 5077;
      Contact@1005 : Record 5050;
    BEGIN
      // Create Campaign, Interaction Template, Segment Header and Segment Line with Contact No.
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      SegmentHeader.VALIDATE("Interaction Template Code",InteractionTemplateCode);
      SegmentHeader.VALIDATE("Campaign No.",CampaignNo);
      SegmentHeader.MODIFY(TRUE);

      LibraryMarketing.CreateSegmentLine(SegmentLine,SegmentHeader."No.");
      Contact.SETFILTER("Salesperson Code",'<>''''');
      Contact.FINDFIRST;
      SegmentLine.VALIDATE("Contact No.",Contact."No.");
      SegmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunGenerateDuplSearchStringReport@43();
    VAR
      GenerateDuplSearchString@1000 : Report 5187;
    BEGIN
      COMMIT;  // Required to run test case successfully.
      CLEAR(GenerateDuplSearchString);
      GenerateDuplSearchString.RUN;
    END;

    LOCAL PROCEDURE RunLogSegment@15(SegmentNo@1000 : Code[20];FollowUp@1002 : Boolean);
    VAR
      LogSegment@1001 : Report 5185;
    BEGIN
      LogSegment.SetSegmentNo(SegmentNo);
      LogSegment.InitializeRequest(FALSE,FollowUp);
      LogSegment.USEREQUESTPAGE(FALSE);
      LogSegment.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateMarketingSetup@19(MaintainDuplSearchStrings@1002 : Boolean;AutosearchForDuplicates@1001 : Boolean);
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Maintain Dupl. Search Strings",MaintainDuplSearchStrings);
      MarketingSetup.VALIDATE("Autosearch for Duplicates",AutosearchForDuplicates);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultSalesCycleCode@13(DefaultSalesCycleCode@1000 : Code[10]) SalesCycleCode : Code[10];
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      SalesCycleCode := MarketingSetup."Default Sales Cycle Code";
      MarketingSetup.VALIDATE("Default Sales Cycle Code",DefaultSalesCycleCode);
      MarketingSetup.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@24(Question@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormCloseOpportunity@5(VAR CloseOpportunity@1000 : Page 5128;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1003 : TEMPORARY Record 5093;
      CloseOpportunityCode@1004 : Record 5094;
    BEGIN
      TempOpportunityEntry.INIT;
      CloseOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.VALIDATE("Action Taken",TempOpportunityEntry."Action Taken"::Won);
      TempOpportunityEntry.CheckStatus;
      TempOpportunityEntry.PerformNextWizardStatus;

      CloseOpportunityCode.SETRANGE(Type,CloseOpportunityCode.Type::Won);
      CloseOpportunityCode.FINDFIRST;

      TempOpportunityEntry.VALIDATE("Close Opportunity Code",CloseOpportunityCode.Code);
      TempOpportunityEntry.VALIDATE("Calcd. Current Value (LCY)",RANDOM(10));  // Use Randon because value is not important.
      TempOpportunityEntry.CheckStatus;
      TempOpportunityEntry.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerToDo@9(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE(Type,TempToDo.Type::" ");
      TempToDo.VALIDATE(Description,DescriptionForPage);
      TempToDo.VALIDATE(Date,WORKDATE);
      TempToDo.CheckStatus;
      TempToDo.PerformNextWizardStatus;

      TempToDo.CheckStatus;
      TempToDo.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerOpportunity@22(VAR CreateOpportunity@1000 : Page 5126;VAR Response@1001 : Action);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
    BEGIN
      TempOpportunity.INIT;
      CreateOpportunity.GETRECORD(TempOpportunity);
      TempOpportunity.INSERT;  // For inserting in Temporary Table.
      TempOpportunity.VALIDATE(Description,DescriptionForPage);
      TempOpportunity.CheckStatus;
      TempOpportunity.PerformNextWizardStatus;
      TempOpportunity.CheckStatus;
      TempOpportunity.FinishWizard;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateDuplSearchStringRequestPageHandler@39(VAR GenerateDuplSearchString@1000 : TestRequestPage 5187);
    BEGIN
      GenerateDuplSearchString.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Marketing]
      Test for Batch Jobs:
        1. Test Logged segment after Log a Segment.
        2. Test Delete Campaign Entries batch Job.
        3. Test Delete Logged Segments batch Job.
        4. Test Delete Opportunities batch Job.
        5. Test Delete Service E-Mail Queue batch Job.
        6. Test Delete To-dos batch Job.
        7. Test Follow up Segment Created.
        8. Test Contact Details does not exist without running Generate To-do Search Index Batch Job.
        9. Test Contact Details updated on Contact Search Page after running Generate To-do Search Index Batch Job.
       10. Test Contact Details does not exist without running Generate Opportunity Search Index Batch Job.
       11. Test Contact Details updated on Contact Search Page after running Generate Opportunity Search Index Batch Job.
       12. Test Contact Details does not exist without running Generate Comment Search Index Batch Job.
       13. Test Contact Details updated on Contact Search Page after running Generate Comment Search Index Batch Job.
       14. Test that no data exists in Contact Duplicate Search String Table after deleting the data from it.
       15. Test that data generated automatically in Contact Duplicate Search String Table after running Generate Duplicate Search String Batch Job.

      TFS_TS_ID = 161415
      Covered Test cases:
        TFS_TC_ID=129051
        TFS_TC_ID=129055
        TFS_TC_ID=129057
        TFS_TC_ID=129048
        TFS_TC_ID=129098
        TFS_TC_ID=129054

      TFS_TS_ID = 167035
      Covered Test cases:
        TFS_TC_ID=141408

      Covers Test cases: 278190
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------------
        ContactWithoutToDoSearchIndex, ContactWithToDoSearchIndex                                   129040
        ContactWithoutOpportunityIndex, ContactWithOpportunityIndex                                 129041
        ContactWithoutCommentSearchIndex, ContactWithCommentSearchIndex                             129042
        DeleteDuplicateContactSearchStringData, GenerateDuplicateConactSearchString                 129053
    }
    END.
  }
}

