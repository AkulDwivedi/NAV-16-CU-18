OBJECT Codeunit 136601 ERM RS Data Templates
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRapidStart@1002 : Codeunit 131903;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryERM@1023 : Codeunit 131300;
      LibraryPurchase@1036 : Codeunit 130512;
      LibrarySales@1037 : Codeunit 130509;
      LibraryInventory@1031 : Codeunit 132201;
      LibraryMarketing@1032 : Codeunit 131900;
      ConfigValidateMgt@1025 : Codeunit 8617;
      Assert@1004 : Codeunit 130000;
      LibraryVariableStorage@1006 : Codeunit 131004;
      ConfigTemplateManagement@1013 : Codeunit 8612;
      TemplateRelateToItselfError@1008 : TextConst 'ENU=A template cannot relate to itself. Specify a different template.';
      UnknownError@1009 : TextConst 'ENU=Unknown error.';
      TemplateInHierarchyErr@1010 : TextConst 'ENU=The template %1 is in this hierarchy and contains the same field.';
      FieldInTemplateError@1011 : TextConst 'ENU=Field %1 is already in the template.';
      InvalidBooleanError@1012 : TextConst 'ENU=%1 is not a valid Boolean.';
      IncorrectFieldName@1001 : TextConst 'ENU=Field Name is not correct.';
      CreateRecordFailed@1007 : TextConst 'ENU=Create Record %1 Failed';
      ValidateRelationError@1000 : TextConst 'ENU=The field %1 of table Item contains a value (%2) that cannot be found in the related table (%3).';
      UnexpectedValueAfterRelationCheck@1005 : TextConst 'ENU=Unexpected value occurs in Config Template Line after filling default value with skip validation flag.';
      InvalidQtyOfCustomersAppliedErr@1014 : TextConst 'ENU=After application quantity of customer records do not matches to expected result.';
      InvalidQtyOfCustomersAfterValidateErr@1015 : TextConst 'ENU=After validation quantity of customer records changed.';
      ValidateCostingMethodErr@1017 : TextConst 'ENU=You cannot change Costing Method because there are one or more ledger entries for this item.';
      ValueNotUpdatedErr@1018 : TextConst 'ENU=Value was not updated despite skip validation flag was off.';
      IsInitialized@1016 : Boolean;
      InvalidDefaultValueAfterErrorOnValidationErr@1019 : TextConst 'ENU=Default value in Config. Template Line must not be initialized after error on validation.';
      InvalidDefaultValueAfterValidationErr@1020 : TextConst 'ENU=Default value was not updated after validation.';

    LOCAL PROCEDURE Cleanup@60(PackageCode@1005 : Code[20];TemplateCode@1006 : Code[20]);
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigTemplateHeader@1001 : Record 8618;
    BEGIN
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.DELETEALL(TRUE);

      ConfigTemplateHeader.SETRANGE(Code,TemplateCode);
      ConfigTemplateHeader.DELETEALL(TRUE);
    END;

    [Test]
    PROCEDURE CreateVendorFromTemplate@10();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Vendor@1001 : Record 23;
      VendorPostingGroup@1003 : Record 93;
      Currency@1004 : Record 4;
      GenBusinessPostingGroup@1005 : Record 250;
    BEGIN
      // Test if a Master Record - Vendor can be created using Standard Master Data Templates.

      // 1. Setup: Create new Data Template Header, Data Template Line for Vendor Posting Group, Currency Code,
      // Gen. Bus. Posting Group. Create new Instance.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Vendor);

      VendorPostingGroup.GET(LibraryPurchase.FindVendorPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Vendor.FIELDNO("Vendor Posting Group"),
        Vendor.FIELDNAME("Vendor Posting Group"),VendorPostingGroup.Code);

      LibraryERM.FindCurrency(Currency);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Vendor.FIELDNO("Currency Code"),Vendor.FIELDNAME("Currency Code"),Currency.Code);

      LibraryERM.FindGenBusinessPostingGroup(GenBusinessPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Vendor.FIELDNO("Gen. Bus. Posting Group"),
        Vendor.FIELDNAME("Gen. Bus. Posting Group"),GenBusinessPostingGroup.Code);

      CreateNewInstance(ConfigTemplateHeader);

      // 2. Exercise: Apply Template to a new Vendor.
      LibraryPurchase.CreateVendor(Vendor);
      ApplyTemplateToVendor(Vendor,ConfigTemplateHeader);

      // 3. Verify: Check that the Master Data Template has been applied to the Vendor.
      Vendor.GET(Vendor."No.");
      Vendor.TESTFIELD("Vendor Posting Group",VendorPostingGroup.Code);
      Vendor.TESTFIELD("Currency Code",Currency.Code);
      Vendor.TESTFIELD("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
    END;

    [Test]
    PROCEDURE CreateItemFromTemplate@7();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Item@1001 : Record 27;
      GenProductPostingGroup@1005 : Record 251;
      InventoryPostingGroup@1003 : Record 94;
    BEGIN
      // Test if a Master Record - Item can be created using Standard Master Data Templates.

      // 1. Setup: Create new Data Template Header, Data Template Line for Inventory Posting Group, Gen. Product Posting Group.
      // Create new Instance.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      LibraryERM.FindGenProductPostingGroup(GenProductPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Gen. Prod. Posting Group"),
        Item.FIELDNAME("Gen. Prod. Posting Group"),GenProductPostingGroup.Code);

      CreateNewInstance(ConfigTemplateHeader);

      // 2. Exercise: Apply Template to a new Item.
      LibraryInventory.CreateItem(Item);
      ApplyTemplateToItem(Item,ConfigTemplateHeader);

      // 3. Verify: Check that the Master Data Template has been applied to the Item.
      Item.GET(Item."No.");
      Item.TESTFIELD("Inventory Posting Group",InventoryPostingGroup.Code);
      Item.TESTFIELD("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
    END;

    [Test]
    PROCEDURE CreateContactFromTemplate@13();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Contact@1001 : Record 5050;
      Currency@1004 : Record 4;
    BEGIN
      // Test if a Master Record - Contact can be created using Standard Master Data Templates.

      // 1. Setup: Create new Data Template Header, Data Template Line for Currency Code. Create new Instance.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Contact);

      LibraryERM.FindCurrency(Currency);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Contact.FIELDNO("Currency Code"),Contact.FIELDNAME("Currency Code"),Currency.Code);

      CreateNewInstance(ConfigTemplateHeader);

      // 2. Exercise: Apply Template to a new Contact.
      LibraryMarketing.CreateContact(Contact);
      ApplyTemplateToContact(Contact,ConfigTemplateHeader);

      // 3. Verify: Check that the Master Data Template has been applied to the Contact.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD("Currency Code",Currency.Code);
    END;

    [Test]
    PROCEDURE CreateApplyMasterConfigTemplate@1();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Customer@1001 : Record 18;
      CustomerPostingGroup@1003 : Record 92;
      Currency@1004 : Record 4;
      GenBusinessPostingGroup@1005 : Record 250;
    BEGIN
      // Test if a new Master Data Template can be created and applied for Master Records.

      // 1. Setup: Create new Data Template Header, Data Template Line for Customer Posting Group, Currency Code,
      // Gen. Bus. Posting Group. Create new Instance.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);

      CustomerPostingGroup.GET(LibrarySales.FindCustomerPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Customer Posting Group"),
        Customer.FIELDNAME("Customer Posting Group"),CustomerPostingGroup.Code);

      LibraryERM.FindCurrency(Currency);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Currency Code"),Customer.FIELDNAME("Currency Code"),Currency.Code);

      LibraryERM.FindGenBusinessPostingGroup(GenBusinessPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Gen. Bus. Posting Group"),
        Customer.FIELDNAME("Gen. Bus. Posting Group"),GenBusinessPostingGroup.Code);
      CreateNewInstance(ConfigTemplateHeader);

      // 2. Exercise: Apply Template to a new Customer.
      LibrarySales.CreateCustomer(Customer);
      ApplyTemplateToCustomer(Customer,ConfigTemplateHeader);

      // 3. Verify: Check that the Master Data Template has been applied to the Customer.
      Customer.GET(Customer."No.");
      Customer.TESTFIELD("Customer Posting Group",CustomerPostingGroup.Code);
      Customer.TESTFIELD("Currency Code",Currency.Code);
      Customer.TESTFIELD("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
    END;

    [Test]
    PROCEDURE CreateMaintainTemplateManyOne@39();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Customer@1001 : Record 18;
      CustomerPostingGroup@1003 : Record 92;
      Currency@1004 : Record 4;
      GenBusinessPostingGroup@1005 : Record 250;
    BEGIN
      // Test Creation and Maintenance of templates - many to one.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create new Data Template Header, Data Template Line for Customer Posting Group, Currency Code,
      // Gen. Bus. Posting Group.
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);

      CustomerPostingGroup.GET(LibrarySales.FindCustomerPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Customer Posting Group"),
        Customer.FIELDNAME("Customer Posting Group"),CustomerPostingGroup.Code);

      LibraryERM.FindCurrency(Currency);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Currency Code"),Customer.FIELDNAME("Currency Code"),Currency.Code);

      LibraryERM.FindGenBusinessPostingGroup(GenBusinessPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Gen. Bus. Posting Group"),
        Customer.FIELDNAME("Gen. Bus. Posting Group"),GenBusinessPostingGroup.Code);

      // 3. Verify: Check that the Master Data Template Lines have been created.
      VerifyTemplateLineCreated(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Customer Posting Group"),
        Customer.FIELDNO("Currency Code"),Customer.FIELDNO("Gen. Bus. Posting Group"));
    END;

    [Test]
    PROCEDURE CreateMaintainTemplateOneToOne@45();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      ConfigTemplateLine@1004 : Record 8619;
      CompanyInformation@1001 : Record 79;
      PostCode@1003 : Record 225;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      // Test Creation and Maintenance of templates - one to one.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create new Data Template Header, Data Template Line for Post Code.
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::"Company Information");

      LibraryERM.FindPostCode(PostCode);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,CompanyInformation.FIELDNO("Post Code"),CompanyInformation.FIELDNAME("Post Code"),PostCode.Code);

      // 3. Verify: Check that the Master Data Template Line has been created.
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDFIRST;
      ConfigTemplateLine.TESTFIELD("Field ID",CompanyInformation.FIELDNO("Post Code"));
      ConfigTemplateLine.TESTFIELD("Field Name",CompanyInformation.FIELDNAME("Post Code"));
    END;

    [Test]
    PROCEDURE TemplateApplyToItselfError@26();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      ConfigTemplateLine@1002 : Record 8619;
    BEGIN
      // Test Creation and Maintenance of templates - insert same Template on Template Line.

      // 1. Setup: Create new Data Template Header, Data Template Line.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);

      // 2. Exercise: Change Type on Data Template Line to Template and try to Apply Template on Line.
      ASSERTERROR InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);

      // 3. Verify: Check that the application generates an error as "A template cannot relate to itself.".
      Assert.AreEqual(STRSUBSTNO(TemplateRelateToItselfError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE TemplateFieldExistOnLineError@32();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      ConfigTemplateLine@1002 : Record 8619;
      Item@1001 : Record 27;
      InventoryPostingGroup@1003 : Record 94;
      ConfigTemplateHeaderCode@1004 : Code[10];
    BEGIN
      // Test Creation and Maintenance of templates- insert Template that contains fields that are already on Template Line.

      // 1. Setup: Create two Data Template Headers with Data Template Lines having same field.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      ConfigTemplateHeaderCode := ConfigTemplateHeader.Code;
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      // 2. Exercise: Create new Data Template Line, change Type to Template and try to Apply first Template on Line.
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      ASSERTERROR InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode);

      // 3. Verify: Check that the application generates an error as "Template is in this hierarchy and contains the same field".
      Assert.AreEqual(STRSUBSTNO(TemplateInHierarchyErr,ConfigTemplateHeaderCode),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE TemplateOnlyLineError@28();
    VAR
      ConfigTemplateHeader@1004 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      Item@1002 : Record 27;
      InventoryPostingGroup@1001 : Record 94;
      ConfigTemplateHeaderCode@1000 : Code[10];
    BEGIN
      // Test Creation and Maintenance of templates - insert template line which refers to the field.

      // 1. Setup: Create two Data Template Headers with field and template in the second one referse to this field
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      ConfigTemplateHeaderCode := ConfigTemplateHeader.Code;
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode);

      // 2. Exercise: Apply Template to a new Item.
      LibraryInventory.CreateItem(Item);
      ApplyTemplateToItem(Item,ConfigTemplateHeader);

      // 3. Verify: Check that the Master Data Template has been applied to the Item.
      Item.GET(Item."No.");
      Item.TESTFIELD("Inventory Posting Group",InventoryPostingGroup.Code);
    END;

    [Test]
    PROCEDURE FieldExistOnTemplateLineError@27();
    VAR
      ConfigTemplateHeader@1004 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      Item@1002 : Record 27;
      InventoryPostingGroup@1001 : Record 94;
      ConfigTemplateHeaderCode@1000 : Code[10];
    BEGIN
      // Test Creation and Maintenance of templates - insert field that exist in the related Template Line.

      // 1. Setup: Create two Data Template Headers with Data Template Lines having same field.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      ConfigTemplateHeaderCode := ConfigTemplateHeader.Code;
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode);

      // 2. Exercise: Create new Data Template Line with type Field and run hierarchical check
      ASSERTERROR CreateConfigTemplateLineForField(
          ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
          Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      // 3. Verify: Check that the application generates an error as "Template is in this hierarchy and contains the same field".
      Assert.AreEqual(STRSUBSTNO(TemplateInHierarchyErr,ConfigTemplateHeaderCode),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE SeveralTemplateRefError@55();
    VAR
      ConfigTemplateHeader@1004 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      Item@1002 : Record 27;
      InventoryPostingGroup@1001 : Record 94;
      ConfigTemplateHeaderCode@1000 : ARRAY [2] OF Code[10];
    BEGIN
      // Test Creation and Maintenance of templates - insert field that exist in the related Template Line.

      // 1. Setup: Create three Data Template Headers with field in the first one and reference/template in the others
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      ConfigTemplateHeaderCode[1] := ConfigTemplateHeader.Code;
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode[1]);
      ConfigTemplateHeaderCode[2] := ConfigTemplateHeader.Code;

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      // 2. Exercise: Create new Data Template Line, change Type to Template and run hierarchical check
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      ASSERTERROR InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode[2]);

      // 3. Verify: Check that the application generates an error as "Template is in this hierarchy and contains the same field".
      Assert.AreEqual(STRSUBSTNO(TemplateInHierarchyErr,ConfigTemplateHeaderCode[1]),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE MultiTemplateLineError@31();
    VAR
      ConfigTemplateHeader@1005 : Record 8618;
      ConfigTemplateLine@1004 : Record 8619;
      Item@1003 : Record 27;
      InventoryPostingGroup@1002 : Record 94;
      ConfigTemplateHeaderCode@1001 : ARRAY [2] OF Code[10];
      i@1000 : Integer;
    BEGIN
      // Test Creation and Maintenance of templates - insert two template lines that refers to the same field.

      // 1. Setup: Create two Data Template Headers with Data Template Lines having same field.
      Initialize;
      FOR i := 1 TO ARRAYLEN(ConfigTemplateHeaderCode) DO BEGIN
        LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
        ConfigTemplateHeaderCode[i] := ConfigTemplateHeader.Code;
        InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);
        LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
        CreateConfigTemplateLineForField(
          ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
          Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);
      END;

      // 2. Exercise: Create new Data Template Header with two Data Template Lines refers to the both template codes

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode[1]);
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      ASSERTERROR InputTemplateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode[2]);

      // 3. Verify: Check that the application generates an error as "Template is in this hierarchy and contains the same field".
      Assert.AreEqual(STRSUBSTNO(TemplateInHierarchyErr,ConfigTemplateHeaderCode[1]),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE DuplicateFieldOnLineError@53();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Item@1001 : Record 27;
      InventoryPostingGroup@1003 : Record 94;
    BEGIN
      // Test Creation and Maintenance of templates - insert a field that is already on Template Line.

      // 1. Setup: Create Data Template Header, Data Template Line.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
        Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      // 2. Exercise: Create new Data Template Line having same field as previous line.
      ASSERTERROR CreateConfigTemplateLineForField(
          ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
          Item.FIELDNAME("Inventory Posting Group"),InventoryPostingGroup.Code);

      // 3. Verify: Check that the application generates an error as "Field is already in this template".
      Assert.AreEqual(STRSUBSTNO(FieldInTemplateError,Item.FIELDCAPTION("Inventory Posting Group")),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE InvalidDefaultValueOnLineError@30();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      Customer@1001 : Record 18;
    BEGIN
      // Test Creation and Maintenance of templates - Insert invalid Default value on Data Template Line.

      // 1. Setup: Create new Data Template Header.
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);

      // 2. Exercise: Create a new Data Template Line. Try to input any wrong default value on the Data Template Line.
      ASSERTERROR CreateConfigTemplateLineForField(
          ConfigTemplateHeader.Code,Customer.FIELDNO("Allow Line Disc."),Customer.FIELDNAME("Allow Line Disc."),Customer.TABLECAPTION);

      // 3. Verify: Check that the application generates an error as "Customer is not a valid boolean".
      Assert.AreEqual(STRSUBSTNO(InvalidBooleanError,Customer.TABLECAPTION),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE CheckEvaluateValues@40();
    VAR
      GLSetup@1000 : Record 98;
      GLEntry@1002 : Record 17;
      ChangeLogEntry@1003 : Record 405;
      JobQueueEntry@1005 : Record 472;
    BEGIN
      // Option
      Initialize;
      EvaluateValue(
        DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Local Address Format"),
        FORMAT(GLSetup."Local Address Format"::"City+Post Code"));

      // Integer
      EvaluateValue(DATABASE::"G/L Entry",GLEntry.FIELDNO("Entry No."),FORMAT(999));

      // Decimal
      EvaluateValue(DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Inv. Rounding Precision (LCY)"),FORMAT(12345));

      // Date
      EvaluateValue(DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Allow Posting From"),FORMAT(010111D));

      // Time
      EvaluateValue(DATABASE::"Change Log Entry",ChangeLogEntry.FIELDNO(Time),FORMAT(123245T));

      // DateTime
      EvaluateValue(DATABASE::"Change Log Entry",ChangeLogEntry.FIELDNO("Date and Time"),FORMAT('26-10-11 15:05:26'));

      // Boolean
      EvaluateValue(DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Register Time"),FORMAT(FALSE));
      EvaluateValue(DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Register Time"),FORMAT(TRUE));

      // BigInteger
      EvaluateValue(DATABASE::"Change Log Entry",ChangeLogEntry.FIELDNO("Entry No."),FORMAT(12345000000000.0));

      // GUID
      EvaluateValue(DATABASE::"Job Queue Entry",JobQueueEntry.FIELDNO(ID),FORMAT(CREATEGUID));

      // Code
      EvaluateValue(DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Bank Account Nos."),FORMAT(GLSetup."Bank Account Nos."));

      // Text
      EvaluateValue(DATABASE::"G/L Entry",GLEntry.FIELDNO(Description),FORMAT('Test text'));

      // DateFormula
      EvaluateValue(DATABASE::"General Ledger Setup",GLSetup.FIELDNO("Payment Discount Grace Period"),FORMAT('+1Y'));
    END;

    [Test]
    [HandlerFunctions(ConfigTemplateLine_LookupFieldName_Handler)]
    PROCEDURE ConfigTemplateLine_LookupFieldName@17();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      ConfigTemplateLine@1001 : Record 8619;
      Customer@1003 : Record 18;
    BEGIN
      // Config. Template Line: Lookup Field Name

      // 1. Setup.
      Initialize;

      // 2. Exercise: Prepare Template Header and Line
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);
      ConfigTemplateLine_LookupFields(ConfigTemplateHeader,ConfigTemplateLine.Type::Field);

      // 3. Verify LookupField
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDFIRST;
      Assert.AreEqual(Customer.FIELDNAME("Prices Including VAT"),ConfigTemplateLine."Field Name",IncorrectFieldName);

      // 4. Clear created data.
      Cleanup('',ConfigTemplateHeader.Code);
    END;

    [Test]
    [HandlerFunctions(ConfigTemplateLine_LookupTemplateCode_Handler)]
    PROCEDURE ConfigTemplateLine_LookupTemplateCode@21();
    VAR
      ConfigTemplateHeader@1003 : Record 8618;
      ConfigTemplateLine@1002 : Record 8619;
      FirstConfigTemplateHeader@1004 : Code[10];
    BEGIN
      // Config. Template Line: Lookup Template Code

      // 1. Setup.
      Initialize;

      // 2. Exercise: Prepare Template Header and Line
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);
      FirstConfigTemplateHeader := ConfigTemplateHeader.Code;
      LibraryVariableStorage.Enqueue(FirstConfigTemplateHeader);

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);
      ConfigTemplateLine_LookupFields(ConfigTemplateHeader,ConfigTemplateLine.Type::Template);

      // 3. Verify LookupField
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDFIRST;
      ConfigTemplateLine.TESTFIELD("Template Code",FirstConfigTemplateHeader);

      // 4. Clear created data.
      Cleanup('',ConfigTemplateHeader.Code);
    END;

    [Test]
    [HandlerFunctions(ConfigTemplateHeader_CreateInstance_MessageHandler)]
    PROCEDURE ConfigTemplateHeader_CreateInstance@20();
    VAR
      ConfigTemplateHeader@1003 : Record 8618;
      PaymentTerms@1000 : Record 3;
      ConfigTemplateHeaderPage@1006 : TestPage 8618;
      PaymentTermsCode@1001 : Code[10];
    BEGIN
      // Config. Template Header: Create Instance

      // 1. Setup.
      Initialize;

      // 2. Exercise: Prepare Template Header and Line
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);

      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::"Payment Terms");
      PaymentTermsCode := LibraryUtility.GenerateRandomCode(PaymentTerms.FIELDNO(Code),DATABASE::"Payment Terms");
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,PaymentTerms.FIELDNO(Code),
        PaymentTerms.FIELDNAME(Code),PaymentTermsCode);

      // 3. Apply Create Instance on created ConfigTemplateHeader
      ConfigTemplateHeaderPage.OPENVIEW;
      ConfigTemplateHeaderPage.GOTORECORD(ConfigTemplateHeader);
      ConfigTemplateHeaderPage.CreateInstance.INVOKE;

      // 4. Verify Payment Terms record created.
      Assert.IsTrue(PaymentTerms.GET(PaymentTermsCode),STRSUBSTNO(CreateRecordFailed,PaymentTerms.TABLENAME));

      // 5. Clear created data.
      PaymentTerms.DELETE(TRUE);
      Cleanup('',ConfigTemplateHeader.Code);
    END;

    [Test]
    PROCEDURE ValidateNonSingleInstanceLineDefaultValue_ValidateWithoutSkipRelationCheckFlag_ErrorOnValidateRelation@4();
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      Item@1000 : Record 27;
      InventoryPostingGroup@1003 : Record 94;
    BEGIN
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      ASSERTERROR
        CreateConfigTemplateLineForField(
          ConfigTemplateHeader.Code,Item.FIELDNO("Inventory Posting Group"),
          Item.FIELDNAME("Inventory Posting Group"),Item.TABLECAPTION);

      Assert.ExpectedError(
        STRSUBSTNO(
          ValidateRelationError,Item.FIELDNAME("Inventory Posting Group"),
          UPPERCASE(Item.TABLECAPTION),InventoryPostingGroup.TABLECAPTION));

      Cleanup('',ConfigTemplateHeader.Code);
    END;

    [Test]
    PROCEDURE ValidateNonSingleInstanceLineDefaultValue_ValidateWithSkipRelationCheckFlag_ErrorOnValidateRelation@43();
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      Item@1000 : Record 27;
      ConfigTemplateLine@1003 : Record 8619;
    BEGIN
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeader.Code);
      InputFieldInConfigTemplateLine(
        ConfigTemplateLine,Item.FIELDNO("Base Unit of Measure"),Item.FIELDNAME("Base Unit of Measure"),Item.TABLECAPTION,TRUE);

      Assert.AreEqual(ConfigTemplateLine."Default Value",UPPERCASE(Item.TABLECAPTION),UnexpectedValueAfterRelationCheck);

      Cleanup('',ConfigTemplateHeader.Code);
    END;

    [Test]
    PROCEDURE ApplyPackageWithTemplateAttached_CustomerWithEmptyNo_OnlyOneCustomerCreated@19();
    VAR
      ConfigPackage@1001 : Record 8623;
      Customer@1004 : Record 18;
      InitialCustCount@1000 : Integer;
      ConfigTemplateCode@1002 : Code[20];
    BEGIN
      Initialize;
      GenerateTemplateAndPackageForTableWithSeriesNo(ConfigPackage,ConfigTemplateCode);

      InitialCustCount := Customer.COUNT;
      LibraryRapidStart.ApplyPackage(ConfigPackage,TRUE);
      Assert.IsTrue(Customer.COUNT - InitialCustCount = 1,InvalidQtyOfCustomersAppliedErr);

      Cleanup(ConfigPackage.Code,ConfigTemplateCode);
    END;

    [Test]
    PROCEDURE ValidatePackageDataWithTemplateAttached_CustomerWithEmptyNo_NoCustomersCreated@22();
    VAR
      ConfigPackage@1002 : Record 8623;
      Customer@1001 : Record 18;
      InitialCustCount@1000 : Integer;
      ConfigTemplateCode@1003 : Code[20];
    BEGIN
      Initialize;
      GenerateTemplateAndPackageForTableWithSeriesNo(ConfigPackage,ConfigTemplateCode);

      InitialCustCount := Customer.COUNT;
      LibraryRapidStart.ValidatePackage(ConfigPackage,TRUE);
      Assert.IsTrue(Customer.COUNT = InitialCustCount,InvalidQtyOfCustomersAfterValidateErr);

      Cleanup(ConfigPackage.Code,ConfigTemplateCode);
    END;

    [Test]
    PROCEDURE ValidateFieldWithTrigger_SkipValidationFalse_TriggerError@25();
    VAR
      Item@1000 : Record 27;
      ConfigValidateManagement@1004 : Codeunit 8617;
      RecRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
    BEGIN
      Initialize;
      CreateItemWithFIFOandILE(Item);
      RecRef.GETTABLE(Item);
      FieldRef := RecRef.FIELD(Item.FIELDNO("Costing Method"));
      ASSERTERROR ConfigValidateManagement.ValidateFieldValue(
          RecRef,FieldRef,FORMAT(Item."Costing Method"::Standard),FALSE,GLOBALLANGUAGE);

      Assert.ExpectedError(ValidateCostingMethodErr);
    END;

    [Test]
    PROCEDURE ValidateFieldWithTrigger_SkipValidationTrue_NoErrors@24();
    VAR
      Item@1003 : Record 27;
      ConfigValidateManagement@1002 : Codeunit 8617;
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
    BEGIN
      Initialize;
      CreateItemWithFIFOandILE(Item);
      RecRef.GETTABLE(Item);
      FieldRef := RecRef.FIELD(Item.FIELDNO("Costing Method"));
      ConfigValidateManagement.ValidateFieldValue(RecRef,FieldRef,FORMAT(Item."Costing Method"::Standard),TRUE,GLOBALLANGUAGE);

      Assert.AreEqual(FORMAT(FieldRef.VALUE),FORMAT(Item."Costing Method"::Standard),ValueNotUpdatedErr);
    END;

    [Test]
    PROCEDURE TemplateLineWithTriggerDependencyOnOtherField_OtherFieldPresentInTemplate_NoError@33();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      Item@1001 : Record 27;
      NoSeries@1002 : Record 308;
    BEGIN
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryUtility.CreateNoSeries(NoSeries,TRUE,FALSE,FALSE);

      CreateConfigTemplateLineForFieldAndValidate(
        ConfigTemplateHeader.Code,Item.FIELDNO("Item Tracking Code"),Item.FIELDNAME("Item Tracking Code"),
        LibraryUtility.GenerateRandomCode(Item.FIELDNO("Item Tracking Code"),DATABASE::Item),TRUE);

      // Lot Nos. have TestField for item tracking code
      CreateConfigTemplateLineForFieldAndValidate(
        ConfigTemplateHeader.Code,Item.FIELDNO("Lot Nos."),Item.FIELDNAME("Lot Nos."),
        NoSeries.Code,FALSE);

      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDLAST;
      Assert.AreEqual(NoSeries.Code,ConfigTemplateLine."Default Value",InvalidDefaultValueAfterValidationErr);
    END;

    [Test]
    PROCEDURE TemplateLineWithTriggerDependencyOnOtherField_RelatedFieldNotPresentInTemplate_ErrorOnValidateDefaultValue@54();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      Item@1001 : Record 27;
      NoSeries@1002 : Record 308;
    BEGIN
      Initialize;
      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Item);

      LibraryUtility.CreateNoSeries(NoSeries,TRUE,FALSE,FALSE);

      // Lot Nos. have TestField for item tracking code
      ASSERTERROR CreateConfigTemplateLineForFieldAndValidate(
          ConfigTemplateHeader.Code,Item.FIELDNO("Lot Nos."),Item.FIELDNAME("Lot Nos."),
          NoSeries.Code,FALSE);

      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      ConfigTemplateLine.FINDFIRST;
      Assert.AreEqual('',ConfigTemplateLine."Default Value",InvalidDefaultValueAfterErrorOnValidationErr);
    END;

    [Test]
    PROCEDURE CreatingConfigTemplateWithServiceDefaultValue@12();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ConfigTemplateHeader@1002 : Record 8618;
      ConfigTemplateLine@1003 : Record 8619;
      Item@1004 : Record 27;
    BEGIN
      // [FEATURE] [Config. Template]
      // [SCENARIO 381095] If there is Purchase Order with blank Item's "No.", then User should be able to create Item Config. Template with "Service" Default Value for Item's "Type"
      Initialize;

      // [GIVEN] Purchase Order
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);

      // [GIVEN] Purchase Line with "Item" and blank "No."
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',1);
      PurchaseLine.VALIDATE("No.",'');
      PurchaseLine.MODIFY(TRUE);

      // [GIVEN] Config. Template Header for Item
      ConfigTemplateHeader.INIT;
      ConfigTemplateHeader.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ConfigTemplateHeader.FIELDNO(Code),DATABASE::"Config. Template Header"));
      ConfigTemplateHeader.VALIDATE("Table ID",DATABASE::Item);
      ConfigTemplateHeader.INSERT(TRUE);

      // [WHEN] Validate "Service" as "Default Value" for Item's "Type" in Config. Template Line
      ConfigTemplateLine.INIT;
      ConfigTemplateLine.VALIDATE("Table ID",DATABASE::Item);
      ConfigTemplateLine.VALIDATE(Type,ConfigTemplateLine.Type::Field);
      ConfigTemplateLine.VALIDATE("Field ID",Item.FIELDNO(Type));
      ConfigTemplateLine.VALIDATE("Default Value",FORMAT(Item.Type::Service));

      // [THEN] No error appears about existing Orders with such items
      ConfigTemplateLine.INSERT(TRUE);
      ConfigTemplateLine.GET;
    END;

    LOCAL PROCEDURE Initialize@23();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE EvaluateValue@15(TableNo@1000 : Integer;FieldNo@1001 : Integer;Value@1002 : Text[250]);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      ConfigValidateMgt.EvaluateValue(FieldRef,Value,FALSE);
      ConfigValidateMgt.EvaluateTextToFieldRef(Value,FieldRef,FALSE);
    END;

    LOCAL PROCEDURE GeneratePackageForTableWithSeriesNo@41(VAR ConfigPackage@1000 : Record 8623;VAR CustomerName@1002 : Text[50]);
    VAR
      ConfigPackageTable@1004 : Record 8613;
      Customer@1003 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);

      CustomerName := Customer."No.";

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Customer,
        Customer.FIELDNO("No."),
        '',
        1);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Customer,
        Customer.FIELDNO(Name),
        CustomerName,
        1);

      Customer.DELETE;
    END;

    LOCAL PROCEDURE GenerateTemplateAndPackageForTableWithSeriesNo@48(VAR ConfigPackage@1000 : Record 8623;VAR ConfigTemplateCode@1002 : Code[20]);
    VAR
      ConfigTemplateHeader@1005 : Record 8618;
      Customer@1003 : Record 18;
      CustomerName@1001 : Text[50];
    BEGIN
      GeneratePackageForTableWithSeriesNo(ConfigPackage,CustomerName);

      LibraryRapidStart.CreateConfigTemplateHeader(ConfigTemplateHeader);
      InputTableInConfigTemplateHeader(ConfigTemplateHeader,DATABASE::Customer);
      CreateConfigTemplateLineForField(
        ConfigTemplateHeader.Code,Customer.FIELDNO("Name 2"),Customer.FIELDNAME("Name 2"),CustomerName);

      ConfigTemplateCode := ConfigTemplateHeader.Code;
    END;

    LOCAL PROCEDURE ApplyTemplateToContact@18(Contact@1001 : Record 5050;ConfigTemplateHeader@1003 : Record 8618);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Contact);
      ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,RecRef);
    END;

    LOCAL PROCEDURE ApplyTemplateToCustomer@16(Customer@1001 : Record 18;ConfigTemplateHeader@1003 : Record 8618);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Customer);
      ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,RecRef);
    END;

    LOCAL PROCEDURE ApplyTemplateToItem@14(Item@1001 : Record 27;ConfigTemplateHeader@1003 : Record 8618);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Item);
      ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,RecRef);
    END;

    LOCAL PROCEDURE ApplyTemplateToVendor@9(Vendor@1001 : Record 23;ConfigTemplateHeader@1003 : Record 8618);
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Vendor);
      ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,RecRef);
    END;

    LOCAL PROCEDURE CreateConfigTemplateLineForField@5(ConfigTemplateHeaderCode@1001 : Code[10];FieldID@1002 : Integer;FieldName@1003 : Text[30];DefaultValue@1004 : Text[50]);
    BEGIN
      CreateConfigTemplateLineForFieldAndValidate(
        ConfigTemplateHeaderCode,FieldID,FieldName,DefaultValue,FALSE);
    END;

    LOCAL PROCEDURE CreateConfigTemplateLineForFieldAndValidate@37(ConfigTemplateHeaderCode@1001 : Code[10];FieldID@1002 : Integer;FieldName@1003 : Text[30];DefaultValue@1004 : Text[50];SkipValidateRelation@1005 : Boolean);
    VAR
      ConfigTemplateLine@1000 : Record 8619;
    BEGIN
      LibraryRapidStart.CreateConfigTemplateLine(ConfigTemplateLine,ConfigTemplateHeaderCode);
      InputFieldInConfigTemplateLine(ConfigTemplateLine,FieldID,FieldName,DefaultValue,SkipValidateRelation);
    END;

    LOCAL PROCEDURE CreateNewInstance@8(ConfigTemplateHeader@1003 : Record 8618);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.OPEN(ConfigTemplateHeader."Table ID");
      ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,RecRef);
    END;

    LOCAL PROCEDURE InputFieldInConfigTemplateLine@2(VAR ConfigTemplateLine@1004 : Record 8619;FieldID@1003 : Integer;FieldName@1002 : Text[30];DefaultValue@1001 : Text[50];SkipRelationValidation@1000 : Boolean);
    BEGIN
      ConfigTemplateLine.VALIDATE("Field ID",FieldID);
      ConfigTemplateLine.VALIDATE("Field Name",FieldName);
      ConfigTemplateLine.VALIDATE("Skip Relation Check",SkipRelationValidation);
      ConfigTemplateLine.VALIDATE("Default Value",DefaultValue);
      ConfigTemplateLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InputTableInConfigTemplateHeader@3(VAR ConfigTemplateHeader@1000 : Record 8618;TableID@1001 : Integer);
    BEGIN
      ConfigTemplateHeader.VALIDATE("Table ID",TableID);
      ConfigTemplateHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InputTemplateConfigTemplateLine@42(ConfigTemplateLine@1000 : Record 8619;TemplateCode@1001 : Code[10]);
    BEGIN
      ConfigTemplateLine.VALIDATE(Type,ConfigTemplateLine.Type::Template);
      ConfigTemplateLine.VALIDATE("Template Code",TemplateCode);
      ConfigTemplateLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyTemplateLineCreated@35(ConfigTemplateCode@1000 : Code[10];CustomerPostingGroupFieldID@1002 : Integer;CurrencyFieldID@1003 : Integer;GenBusinessPostingGroupFieldID@1004 : Integer);
    VAR
      ConfigTemplateLine@1001 : Record 8619;
    BEGIN
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateCode);
      ConfigTemplateLine.FINDSET;
      ConfigTemplateLine.TESTFIELD("Field ID",CustomerPostingGroupFieldID);

      ConfigTemplateLine.NEXT;
      ConfigTemplateLine.TESTFIELD("Field ID",CurrencyFieldID);

      ConfigTemplateLine.NEXT;
      ConfigTemplateLine.TESTFIELD("Field ID",GenBusinessPostingGroupFieldID);
    END;

    LOCAL PROCEDURE ConfigTemplateLine_LookupFields@11(VAR ConfigTemplateHeader@1001 : Record 8618;LineType@1002 : Integer);
    VAR
      ConfigTemplateHeaderPage@1000 : TestPage 8618;
    BEGIN
      ConfigTemplateHeaderPage.OPENEDIT;
      ConfigTemplateHeaderPage.GOTORECORD(ConfigTemplateHeader);
      ConfigTemplateHeaderPage.ConfigTemplateSubform.NEW;
      ConfigTemplateHeaderPage.ConfigTemplateSubform.Type.SETVALUE(LineType);
      IF LineType = 0 THEN
        ConfigTemplateHeaderPage.ConfigTemplateSubform."Field Name".DRILLDOWN
      ELSE
        ConfigTemplateHeaderPage.ConfigTemplateSubform."Template Code".LOOKUP;
      ConfigTemplateHeaderPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ConfigTemplateLine_LookupFieldName_Handler@38(VAR FieldListPage@1000 : TestPage 6218);
    VAR
      Field@1001 : Record 2000000041;
      Customer@1002 : Record 18;
    BEGIN
      Field.SETRANGE(TableNo,DATABASE::Customer);
      Field.SETRANGE("No.",Customer.FIELDNO("Prices Including VAT"));
      Field.FINDFIRST;
      FieldListPage.GOTORECORD(Field);
      FieldListPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ConfigTemplateLine_LookupTemplateCode_Handler@6(VAR ConfigTemplateList@1000 : TestPage 8620);
    VAR
      ConfigTemplateHeader@1001 : Record 8618;
      ConfigTemplateHeaderCode@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ConfigTemplateHeaderCode);
      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Customer);
      ConfigTemplateHeader.SETFILTER(Code,ConfigTemplateHeaderCode);
      ConfigTemplateHeader.FINDFIRST;
      ConfigTemplateList.GOTORECORD(ConfigTemplateHeader);
      ConfigTemplateList.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ConfigTemplateHeader_CreateInstance_MessageHandler@29(MessageStr@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE CreateItemWithFIFOandILE@50(VAR Item@1003 : Record 27);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      EntryNo@1005 : Integer;
    BEGIN
      LibraryInventory.CreateItem(Item);

      ItemLedgerEntry.FINDLAST;
      EntryNo := ItemLedgerEntry."Entry No.";
      CLEAR(ItemLedgerEntry);
      ItemLedgerEntry."Entry No." := EntryNo + 1;
      ItemLedgerEntry."Item No." := Item."No.";
      ItemLedgerEntry.INSERT;
    END;

    BEGIN
    {
      // [FEATURE] [Template] [Rapid Start]
      1.  Test if a Master Record can be created using Standard Master Data Templates.
      2.  Test if a new Master Data Template can be created and applied for Master Records.
      3.  Test if a new Package can be created and applied for Master Records.
      4.  Test if the new Package can be exported to Excel.
      5.  Test if the new Package can be exported to XML.
      6.  Test if the new Package can be imported from Excel.
      7.  Test if the new Package can be imported from XML.
      8.  Test if new Pages are created for Industry Specific Setup Data.
      9.  Test if new Pages are created for Master Data Templates.
      10. Test Creation and Maintenance of templates - many to one.
      11. Test Creation and Maintenance of templates - one to one.
      12. Test Creation and Maintenance of templates - insert same Template on Template Line.
      13. Test Creation and Maintenance of templates - insert Template that contains fields that are already on Template Line.
      14. Test Creation and Maintenance of templates - insert a field that is already on Template Line.
      15. Test Creation and Maintenance of templates - Insert invalid Default value on Data Template Line.
      16. Config. Template Line: Lookup Field Name
      17. Config. Template Line: Lookup Template Code
      18. Config. Template Header: Create Instance

      TFS_TS_ID = 234784
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CreateVendorFromTemplate, CreateItemFromTemplate, CreateContactFromTemplate   122572
      CreateApplyMasterConfigTemplate                                               122573
      CreatePackage                                                                 122575

      TFS_TS_ID = 237440
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CreateMaintainTemplateManyOne, CreateMaintainTemplateOneToOne                 128460
      TemplateApplyToItselfError, TemplateFieldExistOnLineError                     128460
      DuplicateFieldOnLineError                                                     128460

      TFS_TS_ID = 241192
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      InvalidDefaultValueOnLineError                                                128460
      TemplateOnlyLineError                                                         355332
      FieldExistOnTemplateLineError                                                 355332
      SeveralTemplateRefError                                                       355332
      MultiTemplateLineError                                                        355332
    }
    END.
  }
}

