OBJECT Codeunit 137811 SCM - Costing UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 5802=rimd;
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1000 : Codeunit 131000;

    [Test]
    PROCEDURE VSTF327751@1();
    BEGIN
      // test negative amount - roots of bug fixed
      UpdateUnitCostOfSKU(-0.00024);

      // test zero amount - this doesn't exist after adjustment but we need to be sure the field Unit Cost is not changed
      UpdateUnitCostOfSKU(0);

      // test positive amount
      UpdateUnitCostOfSKU(0.00024);
    END;

    LOCAL PROCEDURE UpdateUnitCostOfSKU@100(NewUnitCost@1000 : Decimal);
    VAR
      Item@1001 : Record 27;
      SKU@1002 : Record 5700;
      ValueEntry@1003 : Record 5802;
      InventorySetup@1004 : Record 313;
      ItemCostManagement@1005 : Codeunit 5804;
      OldAvgCostCalcType@1006 : Integer;
    BEGIN
      // Initialize of needed records
      SetupItem(Item);
      SetupSKU(SKU,Item);
      SetupValueEntry(ValueEntry,SKU,NewUnitCost);

      InventorySetup.GET;
      OldAvgCostCalcType := InventorySetup."Average Cost Calc. Type";
      InventorySetup."Average Cost Calc. Type" := InventorySetup."Average Cost Calc. Type"::"Item & Location & Variant";
      InventorySetup.MODIFY;

      // Execution of test
      // test of function
      ItemCostManagement.SetProperties(TRUE,1);
      ItemCostManagement.UpdateUnitCostSKU(Item,SKU,0,NewUnitCost,FALSE,0);

      // Verification of results

      // restore original value of Inventory Setup
      IF OldAvgCostCalcType <> InventorySetup."Average Cost Calc. Type" THEN BEGIN
        InventorySetup."Average Cost Calc. Type" := OldAvgCostCalcType;
        InventorySetup.MODIFY
      END;
    END;

    LOCAL PROCEDURE SetupItem@101(VAR Item@1000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::Item);
        "Costing Method" := "Costing Method"::Average;
        "Unit Cost" := 99.99999;
        INSERT;  // function which is tested later requires Item in table (GET method is called)
      END;
    END;

    LOCAL PROCEDURE SetupSKU@102(VAR SKU@1000 : Record 5700;VAR Item@1001 : Record 27);
    BEGIN
      WITH SKU DO BEGIN
        "Location Code" := LibraryUtility.GenerateRandomCode(FIELDNO("Location Code"),DATABASE::"Stockkeeping Unit");
        "Item No." := Item."No.";
        "Variant Code" := '';
        "Unit Cost" := Item."Unit Cost";
        INSERT;  // function which is tested later requires SKU in table due to MODIFY command
      END;
    END;

    LOCAL PROCEDURE SetupValueEntry@103(VAR ValueEntry@1000 : Record 5802;VAR SKU@1001 : Record 5700;CostAmountActual@1002 : Decimal);
    BEGIN
      WITH ValueEntry DO BEGIN
        IF FINDLAST THEN BEGIN
          INIT;
          "Entry No." += 1;
        END ELSE
          "Entry No." := 1;
        "Item No." := SKU."Item No.";
        "Location Code" := SKU."Location Code";
        "Variant Code" := SKU."Variant Code";
        "Valuation Date" := WORKDATE;
        "Item Ledger Entry Quantity" := 1;
        "Cost Amount (Actual)" := CostAmountActual;
        INSERT;  // function which is tested later requires Value Entry in table
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Stockkeeping Unit] [SCM]
    }
    END.
  }
}

