OBJECT Report 16548 Identify P.I. - Batch
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Identify P.I. - Batch;
               ENN=Identify P.I. - Batch];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF PIIdentificationDate = 0D THEN
                    ERROR(Text16502);
                END;

  }
  DATASET
  {
    { 7169;    ;DataItem;                    ;
               DataItemTable=Table99000772;
               DataItemTableView=SORTING(Production BOM No.,Version Code,Line No.)
                                 WHERE(Type=CONST(Item));
               OnPreDataItem=BEGIN
                               FinancialYear := GetFinancialYear(PIIdentificationDate);
                             END;

               OnAfterGetRecord=VAR
                                  BOMChangeLog@1500000 : Record 16534;
                                  BOMChangeLog2@1500001 : Record 16534;
                                  Item3@1500002 : Record 27;
                                BEGIN
                                  CostPercent := 0;
                                  CheckAttachedLocation;
                                  CheckProdBomHeaderStatus;

                                  Item3.RESET;
                                  Item3.SETRANGE("Production BOM No.","Production BOM No.");
                                  IF NOT Item3.FINDFIRST THEN
                                    CurrReport.SKIP;

                                  TotalCost := 0;
                                  ProdBOMLine.RESET;
                                  ProdBOMLine.SETRANGE("Production BOM No.","Production BOM No.");
                                  ProdBOMLine.SETRANGE("Version Code","Version Code");
                                  IF ProdBOMLine.FINDSET THEN
                                    REPEAT
                                      IF Item.GET(ProdBOMLine."No.") THEN BEGIN
                                        IF ItemUnitOfMeasure.GET(ProdBOMLine."No.",ProdBOMLine."Unit of Measure Code") THEN
                                          TotalCost := TotalCost + Item."Unit Cost" * ProdBOMLine."Quantity per"
                                        ELSE
                                          ERROR(Text16500,ProdBOMLine."Production BOM No.");
                                      END;
                                    UNTIL ProdBOMLine.NEXT = 0;

                                  ItemUnitOfMeasure.GET(ProdBOMLine."No.",ProdBOMLine."Unit of Measure Code");
                                  IF Item.GET("No.") THEN BEGIN
                                    ProdBOMLine.RESET;
                                    ProdBOMLine.SETCURRENTKEY("Production BOM No.","Version Code","No.");
                                    ProdBOMLine.SETRANGE("Production BOM No.","Production BOM No.");
                                    ProdBOMLine.SETRANGE("Version Code","Version Code");
                                    ProdBOMLine.SETRANGE("No.","No.");
                                    ProdBOMLine.CALCSUMS("Quantity per");
                                    IF TotalCost <> 0 THEN
                                      CostPercent += ((Item."Unit Cost" * ProdBOMLine."Quantity per" * ItemUnitOfMeasure."Qty. per Unit of Measure") /
                                                      TotalCost) * 100;
                                    ProdBOMLine.MODIFYALL("Principal Input",CostPercent > 10);
                                  END;

                                  BOMChangeLog.RESET;
                                  BOMChangeLog.SETCURRENTKEY("BOM No.","Raw Material Code","Financial Year",Filed);
                                  BOMChangeLog.SETRANGE("BOM No.","Production BOM No.");
                                  BOMChangeLog.SETRANGE("Financial Year",FinancialYear);
                                  BOMChangeLog.SETRANGE(Filed,FALSE);
                                  BOMChangeLog.SETRANGE(Amendment,FALSE);
                                  IF BOMChangeLog.FINDSET THEN
                                    REPEAT
                                      ProdBOMLine.RESET;
                                      ProdBOMLine.SETRANGE("Production BOM No.","Production BOM No.");
                                      ProdBOMLine.SETRANGE("Version Code","Version Code");
                                      ProdBOMLine.SETRANGE("No.",BOMChangeLog."Raw Material Code");
                                      ProdBOMLine.SETRANGE("Line No.",BOMChangeLog."Raw Material Line No.");
                                      ProdBOMLine.SETRANGE("Principal Input",TRUE);
                                      IF NOT ProdBOMLine.FINDFIRST THEN BEGIN
                                        BOMChangeLog2 := BOMChangeLog;
                                        BOMChangeLog2.DELETE(TRUE);
                                      END;
                                    UNTIL BOMChangeLog.NEXT = 0;

                                  ProdBOMLine.RESET;
                                  ProdBOMLine.SETRANGE("Production BOM No.","Production BOM No.");
                                  ProdBOMLine.SETRANGE("Version Code","Version Code");
                                  ProdBOMLine.SETRANGE("No.","No.");
                                  ProdBOMLine.SETRANGE("Line No.","Line No.");
                                  IF ProdBOMLine.FINDFIRST THEN BEGIN
                                    BOMChangeLog.RESET;
                                    BOMChangeLog.SETRANGE("Raw Material Code","No.");
                                    BOMChangeLog.SETRANGE("BOM No.","Production BOM No.");
                                    BOMChangeLog.SETRANGE("Financial Year",FinancialYear);
                                    BOMChangeLog.SETRANGE("Raw Material Line No.","Line No.");
                                    IF NOT BOMChangeLog.FINDLAST THEN
                                      InsertBOMChangeLog(ProdBOMLine);

                                    BOMChangeLog.SETRANGE(Filed,FALSE);
                                    IF BOMChangeLog.FINDLAST THEN
                                      CompareChangesInBOMChangeLog(BOMChangeLog,ProdBOMLine);

                                    BOMChangeLog.SETRANGE(Filed,TRUE);
                                    IF BOMChangeLog.FINDLAST THEN
                                      CompareBOMChangeLogPostFilling(BOMChangeLog,ProdBOMLine);
                                  END;

                                  BOMChangeLog.RESET;
                                  BOMChangeLog.SETRANGE("BOM No.","Production BOM No.");
                                  BOMChangeLog.SETRANGE(Deleted,TRUE);
                                  BOMChangeLog.MODIFYALL("Effective Date",PIIdentificationDate);
                                  BOMChangeLog.MODIFYALL("Financial Year",FinancialYear);
                                END;

               OnPostDataItem=BEGIN
                                UpdateProdBOMHeaderStatus(1);
                              END;

               ReqFilterFields=Production BOM No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENN=Options] }

      { 1500000;2;Field     ;
                  CaptionML=[ENU=P.I. Identification Date;
                             ENN=P.I. Identification Date];
                  SourceExpr=PIIdentificationDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text16500@1500004 : TextConst 'ENU=Please check Unit Of Measure in Production BOM No. %1.;ENN=Please check Unit Of Measure in Production BOM No. %1.';
      Text16501@1500006 : TextConst 'ENU="Please attach location to the Production BOM  %1. ";ENN="Please attach location to the Production BOM  %1. "';
      Text16502@1500010 : TextConst 'ENU=Please Enter PI Identification date first.;ENN=Please Enter PI Identification date first.';
      Item@1500025 : Record 27;
      BOMLocation@1500021 : Record 16536;
      ProdBOMLine@1500020 : Record 99000772;
      ProdBOMHeader@1500018 : Record 99000771;
      ItemUnitOfMeasure@1500017 : Record 5404;
      BOMReasoncodeLine@1500016 : Record 16535;
      ProdBOMCommentLine@1500015 : Record 99000776;
      TotalCost@1500012 : Decimal;
      CostPercent@1500011 : Decimal;
      PIIdentificationDate@1500001 : Date;
      FinancialYear@1500000 : Text[30];

    PROCEDURE InsertBOMChangeLog@1500000(VAR ProdBOMLineChange@1000000001 : Record 99000772);
    VAR
      BOMChangeLog@1500002 : Record 16534;
      BOMChangeLog2@1500001 : Record 16534;
      EntryNo@1500000 : Integer;
      Item2@1500003 : Record 27;
    BEGIN
      WITH ProdBOMLineChange DO BEGIN
        IF NOT "Principal Input" THEN
          EXIT;
        BOMChangeLog2.RESET;
        IF BOMChangeLog2.FINDLAST THEN
          EntryNo := BOMChangeLog2."Entry No." + 1
        ELSE
          EntryNo := 1;
        BOMChangeLog.INIT;
        BOMChangeLog."Entry No." := EntryNo;
        BOMChangeLog."Raw Material Code" := "No.";
        BOMChangeLog."BOM No." := "Production BOM No.";
        BOMChangeLog."Effective Date" := PIIdentificationDate;
        BOMChangeLog."Financial Year" := FinancialYear;
        ProdBOMHeader.GET("Production BOM No.");
        Item2.RESET;
        Item2.SETRANGE("Production BOM No.","Production BOM No.");
        IF Item2.FINDFIRST THEN;
        BOMChangeLog."FG Code" := Item2."No.";
        BOMChangeLog."Raw Material Line No." := "Line No.";
        BOMChangeLog.Quantity := Quantity;
        BOMChangeLog."Quantity per" := "Quantity per";
        BOMChangeLog."Unit Of Measure" := "Unit of Measure Code";
        BOMChangeLog."Cost Percent" := CostPercent;

        ProdBOMCommentLine.RESET;
        ProdBOMCommentLine.SETRANGE("Production BOM No.",BOMChangeLog."BOM No.");
        ProdBOMCommentLine.SETRANGE("BOM Line No.","Line No.");
        IF ProdBOMCommentLine.FINDFIRST THEN
          BOMChangeLog."Reason Code" := ProdBOMCommentLine.Comment;
        IF BOMReasoncodeLine.GET("Production BOM No.","Version Code","Line No.") THEN
          BOMChangeLog."Reason Code" := BOMReasoncodeLine.Comment;
        BOMChangeLog."PI Status" := "Principal Input";
        BOMChangeLog.INSERT(TRUE);
      END;
    END;

    PROCEDURE InitBOMChangeLog@1500007(VAR ProdBOMLineChange@1000000001 : Record 99000772);
    VAR
      BOMChangeLog@1500002 : Record 16534;
      BOMChangeLog2@1500001 : Record 16534;
      EntryNo@1500000 : Integer;
      Item2@1500003 : Record 27;
    BEGIN
      WITH ProdBOMLineChange DO BEGIN
        BOMChangeLog2.RESET;
        IF BOMChangeLog2.FINDLAST THEN
          EntryNo := BOMChangeLog2."Entry No." + 1
        ELSE
          EntryNo := 1;
        BOMChangeLog.INIT;
        BOMChangeLog."Entry No." := EntryNo;
        BOMChangeLog."Raw Material Code" := "No.";
        BOMChangeLog."BOM No." := "Production BOM No.";
        BOMChangeLog."Effective Date" := PIIdentificationDate;
        BOMChangeLog."Financial Year" := FinancialYear;
        ProdBOMHeader.GET("Production BOM No.");
        Item2.RESET;
        Item2.SETRANGE("Production BOM No.","Production BOM No.");
        IF Item2.FINDFIRST THEN;
        BOMChangeLog."FG Code" := Item2."No.";
        BOMChangeLog."Raw Material Line No." := "Line No.";
        BOMChangeLog.Quantity := Quantity;
        BOMChangeLog."Quantity per" := "Quantity per";
        BOMChangeLog."Unit Of Measure" := "Unit of Measure Code";
        BOMChangeLog."Cost Percent" := CostPercent;

        ProdBOMCommentLine.RESET;
        ProdBOMCommentLine.SETRANGE("Production BOM No.",BOMChangeLog."BOM No.");
        ProdBOMCommentLine.SETRANGE("BOM Line No.","Line No.");
        IF ProdBOMCommentLine.FINDFIRST THEN
          BOMChangeLog."Reason Code" := ProdBOMCommentLine.Comment;
        IF BOMReasoncodeLine.GET("Production BOM No.","Version Code","Line No.") THEN
          BOMChangeLog."Reason Code" := BOMReasoncodeLine.Comment;
        BOMChangeLog."PI Status" := "Principal Input";
        BOMChangeLog.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetFinancialYear@1500001(Date@1500000 : Date) : Text[30];
    VAR
      FinYearStart@1500001 : Integer;
      FinYearEnd@1500002 : Integer;
      DateCalc@1500003 : Codeunit 5617;
    BEGIN
      FinYearStart := DATE2DMY(DateCalc.GetFiscalYearStartDate(Date),3);
      FinYearEnd := DATE2DMY(DateCalc.GetFiscalYearEndDate(Date),3);
      EXIT(FORMAT(FinYearStart) + '-' + FORMAT(FinYearEnd));
    END;

    PROCEDURE CheckAttachedLocation@1500002();
    BEGIN
      BOMLocation.RESET;
      BOMLocation.SETRANGE("Production BOM No.","Production BOM Line"."Production BOM No.");
      IF NOT BOMLocation.FINDFIRST THEN
        ERROR(Text16501,"Production BOM Line"."Production BOM No.");
    END;

    PROCEDURE UpdateProdBOMHeaderStatus@1500004(Status@1500000 : 'Change,Reset');
    BEGIN
      ProdBOMHeader.GET("Production BOM Line"."Production BOM No.");
      IF (Status = Status::Change) AND (ProdBOMHeader.Status = ProdBOMHeader.Status::Certified) THEN BEGIN
        ProdBOMHeader.Status := ProdBOMHeader.Status::"Under Development";
        ProdBOMHeader.MODIFY(TRUE);
      END;
      IF (Status = Status::Reset) AND (ProdBOMHeader.Status <> ProdBOMHeader.Status::Certified) THEN BEGIN
        ProdBOMHeader.Status := ProdBOMHeader.Status::Certified;
        ProdBOMHeader.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CompareChangesInBOMChangeLog@1500003(BOMChangeLog2@1500000 : Record 16534;ProdBOMLine2@1500001 : Record 99000772);
    BEGIN
      IF (BOMChangeLog2."Raw Material Code" <> ProdBOMLine2."No.") OR
         (BOMChangeLog2.Quantity <> ProdBOMLine2.Quantity) OR
         (BOMChangeLog2."Quantity per" <> ProdBOMLine2."Quantity per") OR
         (BOMChangeLog2."Unit Of Measure" <> ProdBOMLine2."Unit of Measure Code") OR
         (BOMChangeLog2."Cost Percent" <> CostPercent)
      THEN BEGIN
        BOMChangeLog2."Raw Material Code" := ProdBOMLine2."No.";
        BOMChangeLog2.Quantity := ProdBOMLine2.Quantity;
        BOMChangeLog2."Quantity per" := ProdBOMLine2."Quantity per";
        BOMChangeLog2."Unit Of Measure" := ProdBOMLine2."Unit of Measure Code";
        BOMChangeLog2."Cost Percent" := CostPercent;
        BOMChangeLog2.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CompareBOMChangeLogPostFilling@1500005(BOMChangeLog2@1500000 : Record 16534;ProdBOMLine2@1500001 : Record 99000772);
    VAR
      BOMChangeLog@1500002 : Record 16534;
    BEGIN
      BOMChangeLog.RESET;
      BOMChangeLog.SETRANGE("Raw Material Code","Production BOM Line"."No.");
      BOMChangeLog.SETRANGE("BOM No.","Production BOM Line"."Production BOM No.");
      BOMChangeLog.SETRANGE("Financial Year",FinancialYear);
      BOMChangeLog.SETRANGE("Raw Material Line No.","Production BOM Line"."Line No.");
      BOMChangeLog.SETRANGE(Filed,FALSE);
      BOMChangeLog.SETRANGE(Amendment,FALSE);
      IF BOMChangeLog.FINDLAST THEN
        EXIT;
      IF (BOMChangeLog2."Raw Material Code" <> ProdBOMLine2."No.") OR
         (BOMChangeLog2.Quantity <> ProdBOMLine2.Quantity) OR
         (BOMChangeLog2."Quantity per" <> ProdBOMLine2."Quantity per") OR
         (BOMChangeLog2."Unit Of Measure" <> ProdBOMLine2."Unit of Measure Code") OR
         (BOMChangeLog2."Cost Percent" <> CostPercent)
      THEN BEGIN
        IF BOMChangeLog2."PI Status" AND NOT ProdBOMLine2."Principal Input" THEN
          InitBOMChangeLog(ProdBOMLine2)
        ELSE
          InsertBOMChangeLog(ProdBOMLine2);
      END;
    END;

    PROCEDURE CheckProdBomHeaderStatus@1500006();
    BEGIN
      ProdBOMHeader.GET("Production BOM Line"."Production BOM No.");
      ProdBOMHeader.TESTFIELD(Status,ProdBOMHeader.Status::Certified);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

