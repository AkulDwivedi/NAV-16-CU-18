OBJECT Codeunit 134558 ERM Cash Flow Pages
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      CashFlowAccount@1009 : Record 841;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryCashFlowForecast@1003 : Codeunit 131331;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryDimension@1008 : Codeunit 131001;
      CFHelper@1006 : Codeunit 131332;
      LibraryVariableStorage@1005 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      DimensionValueCode@1010 : Code[20];
      SourceDocumentNo@1011 : Code[20];
      SourceType@1007 : ' ,Receivables,Payables,Liquid Funds,Cash Flow Manual Expense,Cash Flow Manual Revenue,Sales Orders,Purchase Orders,Fixed Assets Budget,Fixed Assets Disposal,Service Orders,G/L Budget';
      UnexpectedChartCFNo@1012 : TextConst 'ENU=Unexpected Chart on Role Center CF No. in CF Setup.';
      CashFlowSetupReply@1013 : Boolean;
      CashFlowForeCastError@1014 : TextConst 'ENU=You must choose a cash flow forecast.';

    [Test]
    PROCEDURE CashFlowShowOnRoleCenter@16();
    VAR
      CashFlowSetup@1002 : Record 843;
      CashFlowForecast@1004 : Record 840;
      CashFlowCard@1000 : TestPage 847;
      CashFlowNo@1001 : Code[20];
    BEGIN
      Initialize;

      // Deselect the shown cash flow card
      CashFlowSetup.GET;
      CashFlowSetup.VALIDATE("CF No. on Chart in Role Center",'');
      CashFlowSetup.MODIFY(TRUE);
      VerifyCashFlowOnRoleCenter('');

      // Create a new CF card
      CashFlowCard.OPENNEW;
      CashFlowCard.Description.ACTIVATE; // Will auto-fill "No."
      CashFlowNo := CashFlowCard."No.".VALUE;

      // Set it as the active card from the card page
      CashFlowCard.ShowInChart.SETVALUE(TRUE);
      VerifyCashFlowOnRoleCenter(CashFlowNo);

      // Deselect it
      CashFlowCard.ShowInChart.SETVALUE(FALSE);
      VerifyCashFlowOnRoleCenter('');

      CashFlowCard.CLOSE;

      // Select the card for RoleCenter then delete it
      CashFlowSetup.GET;
      CashFlowSetup.VALIDATE("CF No. on Chart in Role Center",CashFlowNo);
      CashFlowSetup.MODIFY(TRUE);

      CashFlowForecast.GET(CashFlowNo);
      CashFlowForecast.DELETE(TRUE);
      VerifyCashFlowOnRoleCenter('');
    END;

    [Test]
    [HandlerFunctions(CashFlowSetupConfirmHandler)]
    PROCEDURE CashFlowChangeOnRoleCenter@44();
    VAR
      CashFlowSetup@1002 : Record 843;
      CashFlowForecast@1004 : Record 840;
      CashFlowForecast2@1005 : Record 840;
    BEGIN
      Initialize;

      // Deselect the shown cash flow card
      CashFlowSetup.GET;
      CashFlowSetup.VALIDATE("CF No. on Chart in Role Center",'');
      CashFlowSetup.MODIFY(TRUE);

      // Create two CF cards
      LibraryCashFlowForecast.CreateCashFlowCard(CashFlowForecast);
      LibraryCashFlowForecast.CreateCashFlowCard(CashFlowForecast2);

      // Set the first card to show on RC chart
      CashFlowSetup.VALIDATE("CF No. on Chart in Role Center",CashFlowForecast."No.");
      CashFlowSetup.MODIFY(TRUE);

      // Expect a confirmation dialog answer No
      CashFlowSetupReply := FALSE;

      CashFlowSetup.VALIDATE("CF No. on Chart in Role Center",CashFlowForecast2."No.");
      CashFlowSetup.MODIFY(TRUE);

      VerifyCashFlowOnRoleCenter(CashFlowForecast."No.");

      // Expect a confirmation dialog answer No
      CashFlowSetupReply := TRUE;

      CashFlowSetup.VALIDATE("CF No. on Chart in Role Center",CashFlowForecast2."No.");
      CashFlowSetup.MODIFY(TRUE);

      VerifyCashFlowOnRoleCenter(CashFlowForecast2."No.");
    END;

    [Test]
    [HandlerFunctions(CashFlowWorksheetPageHandler)]
    PROCEDURE OpenWorksheetActionOnCashFlowCard@20();
    VAR
      CashFlowForcastCard@1000 : TestPage 847;
    BEGIN
      CashFlowForcastCard.OPENNEW;
      CashFlowForcastCard.CashFlowWorksheet.INVOKE;
      // Verification by handler CashFlowWorksheetPageHandler catching opened worksheet page
      Assert.IsTrue(CashFlowForcastCard.CashFlowWorksheet.VISIBLE,'Expected visible action');
      Assert.IsTrue(CashFlowForcastCard.CashFlowWorksheet.ENABLED,'Expected enabled action');
      CashFlowForcastCard.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CashFlowWorksheetPageHandler)]
    PROCEDURE OpenWorksheetActionOnCashFlowList@29();
    VAR
      CashFlowForcastList@1000 : TestPage 849;
    BEGIN
      CashFlowForcastList.OPENVIEW;
      CashFlowForcastList.CashFlowWorksheet.INVOKE;
      // Verification by handler CashFlowWorksheetPageHandler catching opened worksheet page
      Assert.IsTrue(CashFlowForcastList.CashFlowWorksheet.VISIBLE,'Expected visible action');
      Assert.IsTrue(CashFlowForcastList.CashFlowWorksheet.ENABLED,'Expected enabled action');
      CashFlowForcastList.CLOSE;
    END;

    [PageHandler]
    PROCEDURE CashFlowWorksheetPageHandler@23(VAR CashFlowWorksheet@1000 : TestPage 841);
    BEGIN
      CashFlowWorksheet.OK.INVOKE;
    END;

    [Test]
    [HandlerFunctions(CashFlowAccountListPageHandler)]
    PROCEDURE CashFlowAccounts@1();
    VAR
      CashFlowAccount2@1001 : Record 841;
      SelectionFilterManagement@1003 : Codeunit 46;
      ChartofCashFlowAccounts@1000 : TestPage 851;
      ExpectedFilter@1002 : Text[250];
    BEGIN
      Initialize;

      // Open chart of accounts in edit mode
      // create a new set of accounts begin-total posting end-total
      // use lookup on totalling from chart of accounts to trigger CFAccList.GetSelectionFilter code
      // select posting account
      // verify that the filter is constructed correctly

      CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::"Begin-Total");
      CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
      CreateCashFlowAccount(CashFlowAccount2,CashFlowAccount2."Account Type"::"End-Total");

      ExpectedFilter := SelectionFilterManagement.AddQuotes(CashFlowAccount."No.");

      ChartofCashFlowAccounts.OPENEDIT;
      ChartofCashFlowAccounts.GOTORECORD(CashFlowAccount2);
      ChartofCashFlowAccounts.Totaling.LOOKUP;

      Assert.AreEqual(ExpectedFilter,ChartofCashFlowAccounts.Totaling.VALUE,'Incorrect totalling filter generated');

      ChartofCashFlowAccounts.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CashFlowJournalScenario@3();
    VAR
      CashFlowWorksheetLine@1005 : Record 846;
      GLAccount@1006 : Record 15;
      CashFlowAccount@1007 : Record 841;
      CashFlowList@1002 : TestPage 849;
      CashFlowCard@1000 : TestPage 847;
      CashFlowJournal@1004 : TestPage 841;
      CashFlowLedgerEntries@1009 : TestPage 850;
      CashFlowNo@1003 : Code[20];
      Amount@1008 : Decimal;
    BEGIN
      Initialize;

      // Scenario:
      // * Create a new CF card (fill in fields accordingly)
      // * Open list of CF cards and verify the card exists
      // * Open CF journal and fill + post
      // * Open CF card
      // * Open CF ledger entries and verify the entry

      // Create a new cash flow card
      CashFlowCard.OPENNEW;
      CashFlowCard.Description.ACTIVATE; // Will auto-fill "No."
      CashFlowNo := CashFlowCard."No.".VALUE;
      CashFlowCard.CLOSE;

      // Check that the new card is found in the list
      CashFlowList.OPENVIEW;
      Assert.IsTrue(CashFlowList.GOTOKEY(CashFlowNo),'Cash flow card: ' + CashFlowNo + ' was not found in list');
      CashFlowList.CLOSE;

      // Open the cash flow journal and enter a manual line
      CashFlowJournal.OPENEDIT;

      // Add a line
      Amount := LibraryRandom.RandDec(10000,2);

      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.FINDFIRST;
      CashFlowAccount.SETRANGE("Account Type",CashFlowAccount."Account Type"::Entry);
      CashFlowAccount.FINDFIRST;

      CashFlowJournal."Cash Flow Date".SETVALUE(WORKDATE);
      CashFlowJournal."Cash Flow Forecast No.".SETVALUE(CashFlowNo);
      CashFlowJournal."Source Type".SETVALUE(CashFlowWorksheetLine."Source Type"::"Liquid Funds");
      CashFlowJournal."Source No.".SETVALUE(GLAccount."No.");
      CashFlowJournal."Cash Flow Account No.".SETVALUE(CashFlowAccount."No.");
      CashFlowJournal."Amount (LCY)".SETVALUE(Amount);

      // Post journal
      CashFlowJournal.Register.INVOKE;
      CashFlowJournal.CLOSE;

      // Verify ledger entries for new cash flow card
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTOKEY(CashFlowNo);
      CashFlowLedgerEntries.TRAP;
      CashFlowCard."Page Cash Flow Forecast Entries".INVOKE;

      Assert.AreEqual(Amount,CashFlowLedgerEntries."Amount (LCY)".ASDECIMAL,'Incorrect amount on CF ledger entry');

      CashFlowLedgerEntries.CLOSE;
      CashFlowCard.CLOSE;
    END;

    [Test]
    PROCEDURE CheckCashFlowJournalStatusLine@13();
    VAR
      CashFlowForecast@1001 : Record 840;
      CFAccount@1002 : Record 841;
      CashFlowJournalPage@1000 : TestPage 841;
    BEGIN
      Initialize;

      // Setup:
      OpenJournal(CashFlowJournalPage,CashFlowForecast,CFAccount);

      // Exercise & Verify:
      CashFlowJournalPage.LAST;
      ValidateCashFlowJournalStatusLine(CashFlowJournalPage,CashFlowForecast.Description,CFAccount.Name);

      CashFlowJournalPage.NEXT;
      ValidateCashFlowJournalStatusLine(CashFlowJournalPage,'','');

      // Clean-up:
      CashFlowJournalPage.CLOSE;
      CleanUpJournal(CashFlowForecast,CFAccount);
    END;

    [Test]
    PROCEDURE CheckCashFlowJournalStatusLineWhenCreatingNewJournalLine@22();
    VAR
      CashFlowForecast@1004 : Record 840;
      CFAccount@1002 : Record 841;
      CashFlowJournalPage@1000 : TestPage 841;
    BEGIN
      Initialize;

      // Setup:
      OpenJournal(CashFlowJournalPage,CashFlowForecast,CFAccount);

      // Exercise:
      CashFlowJournalPage."Cash Flow Forecast No.".SETVALUE(CashFlowForecast."No.");
      CashFlowJournalPage."Cash Flow Account No.".SETVALUE(CFAccount."No.");

      // Verify:
      ValidateCashFlowJournalStatusLine(CashFlowJournalPage,CashFlowForecast.Description,CFAccount.Name);

      // Clean-up:
      CashFlowJournalPage.CLOSE;
      CleanUpJournal(CashFlowForecast,CFAccount);
    END;

    LOCAL PROCEDURE VerifyCashFlowOnRoleCenter@28(CashFlowNo@1000 : Code[20]);
    VAR
      CashFlowSetup@1001 : Record 843;
    BEGIN
      CashFlowSetup.GET;
      Assert.AreEqual(
        CashFlowSetup."CF No. on Chart in Role Center",CashFlowNo,'Incorrect cash flow No. specified for role center chart in setup');
    END;

    [Test]
    PROCEDURE VerifyServiceOrderAmountInFactBox@2();
    VAR
      ServiceHeader@1003 : Record 5900;
      CFWorksheetLine@1002 : Record 846;
      CashFlowForecast@1001 : Record 840;
      CFForecastEntry@1000 : Record 847;
      CashFlowCard@1005 : TestPage 847;
      ConsiderSource@1007 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CFHelper.CreateDefaultServiceOrder(ServiceHeader);
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");
      CFHelper.FilterSingleJournalLine(CFWorksheetLine,ServiceHeader."No.",SourceType::"Service Orders",CashFlowForecast."No.");
      LibraryCashFlowForecast.PostJournalLines(CFWorksheetLine);
      CFForecastEntry.SETRANGE("Document No.",ServiceHeader."No.");
      CFForecastEntry.FINDFIRST;

      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);

      // Verify
      CFForecastEntry.CALCSUMS("Amount (LCY)");
      CashFlowCard."CF Forecast Statistics FactBox".ServiceOrders.ASSERTEQUALS(CFForecastEntry."Amount (LCY)");
    END;

    [Test]
    PROCEDURE ServiceOrdersInCFAvailabilityByPeriodMatrixViewByPeriod@4();
    VAR
      CashFlowForecast@1000 : Record 840;
      CFWorksheetLine@1002 : Record 846;
      CFAvailabilityByPeriods@1003 : TestPage 867;
      CashFlowCard@1009 : TestPage 847;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
      PeriodType@1004 : 'Day,Week,Month,Quarter,Year,Period';
      FromDate@1006 : Date;
      ToDate@1007 : Date;
      TotalAmount@1008 : Decimal;
    BEGIN
      // Check Service Order amount value in CF Availability by Period matrix form
      // The lines are represented as Period, values as Net Change, rounding factor none

      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");
      // Identify service orders within the period of the first entry
      CFWorksheetLine.SETRANGE("Source Type",CFWorksheetLine."Source Type"::"Service Orders");
      CFWorksheetLine.FINDFIRST;
      // Period range is 1 month
      FromDate := CALCDATE('<-CM>',CFWorksheetLine."Cash Flow Date");
      ToDate := CALCDATE('<CM>',FromDate);
      // Sum all service orders within the period
      CFWorksheetLine.SETRANGE("Source Type",CFWorksheetLine."Source Type"::"Service Orders");
      CFWorksheetLine.SETRANGE("Cash Flow Date",FromDate,ToDate);
      CFWorksheetLine.FINDSET;
      REPEAT
        TotalAmount += CFWorksheetLine."Amount (LCY)";
      UNTIL CFWorksheetLine.NEXT = 0;
      LibraryCashFlowForecast.PostJournalLines(CFWorksheetLine);

      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CFAvailabilityByPeriods.TRAP;
      CashFlowCard."Page CF Availability by Periods".INVOKE;
      CFAvailabilityByPeriods.PeriodType.SETVALUE(PeriodType::Period);
      CFAvailabilityByPeriods.CFAvailabLines.FILTER.SETFILTER("Period Start",FORMAT(FromDate));
      CFAvailabilityByPeriods.CFAvailabLines.FIRST;

      // Verify
      CFAvailabilityByPeriods.CFAvailabLines.ServiceOrders.ASSERTEQUALS(TotalAmount);
    END;

    [Test]
    PROCEDURE ServiceOrdersInCFAvailabilityByPeriodMatrixViewByDay@12();
    VAR
      CashFlowForecast@1000 : Record 840;
      CFWorksheetLine@1002 : Record 846;
      CFAvailabilityByPeriods@1003 : TestPage 867;
      CashFlowCard@1010 : TestPage 847;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
      PeriodType@1004 : 'Day,Week,Month,Quarter,Year,Period';
      FromDate@1006 : Date;
      TotalAmount@1008 : Decimal;
    BEGIN
      // Check Service Order amount value in CF Availability by Period matrix form
      // The lines are represented as Day, values as Net Change, rounding factor none

      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");
      CFWorksheetLine.SETRANGE("Source Type",CFWorksheetLine."Source Type"::"Service Orders");
      CFWorksheetLine.FINDFIRST;
      FromDate := CFWorksheetLine."Cash Flow Date";
      CFWorksheetLine.SETRANGE("Cash Flow Date",FromDate);
      CFWorksheetLine.FINDSET;
      REPEAT
        TotalAmount += CFWorksheetLine."Amount (LCY)";
      UNTIL CFWorksheetLine.NEXT = 0;
      LibraryCashFlowForecast.PostJournalLines(CFWorksheetLine);

      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CFAvailabilityByPeriods.TRAP;
      CashFlowCard."Page CF Availability by Periods".INVOKE;
      CFAvailabilityByPeriods.PeriodType.SETVALUE(PeriodType::Day);
      CFAvailabilityByPeriods.CFAvailabLines.FILTER.SETFILTER("Period Start",FORMAT(FromDate));
      CFAvailabilityByPeriods.CFAvailabLines.FIRST;

      // Verify
      CFAvailabilityByPeriods.CFAvailabLines.ServiceOrders.ASSERTEQUALS(TotalAmount);
    END;

    [Test]
    [HandlerFunctions(CFLedgerEntriesDimensionOverviewMatrixModalFormHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ServiceOrderInCFLedgerEntriesDimensionOverviewMatrix@5();
    VAR
      CashFlowForecast@1004 : Record 840;
      ServiceHeader@1005 : Record 5900;
      Dimension@1009 : Record 348;
      DimensionValue@1010 : Record 349;
      GeneralLedgerSetup@1103 : Record 98;
      CashFlowCard@1000 : TestPage 847;
      CashFlowLedgerEntries@1001 : TestPage 850;
      CFLEDimOverview@1002 : TestPage 860;
      CFLEDimOverviewMatrix@1003 : TestPage 863;
    BEGIN
      // Tests CF L. Entries Dim. Overv. Matrix page
      // Assigning a random dimension value to a service order, fill and post CF journal
      // Verify CF LE in page shows the assigned dimension

      // Setup
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.ChangeGlobalDimensions(CreateDimension,CreateDimension);
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CFHelper.CreateDefaultServiceOrder(ServiceHeader);
      // make sure you get the first dimension available, required for verification
      // The dimension columns on page CFLEDimOverview cannot be accessed right now via code
      Dimension.SETRANGE(Blocked,FALSE);
      Dimension.FINDFIRST;
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      ServiceHeader.VALIDATE("Dimension Set ID",
        LibraryDimension.CreateDimSet(ServiceHeader."Dimension Set ID",Dimension.Code,DimensionValue.Code));
      ServiceHeader.MODIFY(TRUE);
      // keep values for validation in modal form handler
      DimensionValueCode := DimensionValue.Code;
      SourceDocumentNo := ServiceHeader."No.";
      FillAndPostCFJnlServiceOrderOnly(ServiceHeader,CashFlowForecast);

      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CashFlowLedgerEntries.TRAP;
      CashFlowCard."Page Cash Flow Forecast Entries".INVOKE;
      CFLEDimOverview.TRAP;
      CashFlowLedgerEntries.GLDimensionOverview.INVOKE;
      CFLEDimOverviewMatrix.TRAP;
      CFLEDimOverview.ShowMatrix.INVOKE;

      // Verify - done in modal form handler CFLEDimOverviewMatrixModalFormHandler

      // TearDown: Reset Global Dimension Code in General Ledger Setup.
      LibraryDimension.ChangeGlobalDimensions(
        GeneralLedgerSetup."Global Dimension 1 Code",GeneralLedgerSetup."Global Dimension 2 Code");
    END;

    [Test]
    PROCEDURE ServiceOrdersInCashFlowStatistics@10();
    VAR
      CashFlowForecast@1000 : Record 840;
      ServiceHeader@1001 : Record 5900;
      CashFlowCard@1002 : TestPage 847;
      CashFlowStatistics@1003 : TestPage 868;
      ExpectedAmount@1004 : Decimal;
    BEGIN
      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CFHelper.CreateDefaultServiceOrder(ServiceHeader);
      ExpectedAmount := CFHelper.GetTotalServiceAmount(ServiceHeader,FALSE);
      FillAndPostCFJnlServiceOrderOnly(ServiceHeader,CashFlowForecast);

      // Exercise
      CashFlowCard.OPENVIEW;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CashFlowStatistics.TRAP;
      CashFlowCard."Page Cash Flow Forecast Statistics".INVOKE;

      // Verify
      CashFlowStatistics.ServiceOrders.ASSERTEQUALS(ExpectedAmount);
    END;

    [Test]
    PROCEDURE InitialEnableCFCardToShowInChart@21();
    VAR
      CashFlowSetup@1002 : Record 843;
      CashFlowForecast@1001 : Record 840;
      CashFlowCard@1000 : TestPage 847;
    BEGIN
      // Tests the behavior of enabling a CF card to be shown in the RTC chart
      // if there is no CF card set so far.

      // Setup
      Initialize;
      CashFlowSetup.SetChartRoleCenterCFNo('');
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);

      // Exercise
      CashFlowCard.OPENEDIT;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CashFlowCard.ShowInChart.SETVALUE(TRUE);

      // Verify
      CashFlowSetup.GET;
      Assert.AreEqual(CashFlowForecast."No.",CashFlowSetup."CF No. on Chart in Role Center",UnexpectedChartCFNo);

      // Tear down
      CashFlowCard.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ChangeCFCardShownInChart@19();
    VAR
      CashFlowSetup@1002 : Record 843;
      CashFlowForecast@1001 : Record 840;
      CashFlowCard@1000 : TestPage 847;
    BEGIN
      // Tests the behavior of changing the CF card shown in the RTC chart

      // Setup
      Initialize;
      CashFlowSetup.SetChartRoleCenterCFNo('');
      CashFlowForecast.FINDFIRST;
      CashFlowForecast.ValidateShowInChart(TRUE);
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);

      // Exercise
      CashFlowCard.OPENEDIT;
      CashFlowCard.GOTORECORD(CashFlowForecast);
      CashFlowCard.ShowInChart.SETVALUE(TRUE);
      // A confirm handler catches the warning that you override the CF No. on Chart in Role Center

      // Verify
      CashFlowSetup.GET;
      Assert.AreEqual(CashFlowForecast."No.",CashFlowSetup."CF No. on Chart in Role Center",UnexpectedChartCFNo);

      // Tear down
      CashFlowCard.CLOSE;
    END;

    [Test]
    PROCEDURE DeleteCFCardShownInChart@25();
    VAR
      CashFlowSetup@1002 : Record 843;
      CashFlowForecast@1001 : Record 840;
    BEGIN
      // Tests the behavior of deleting a CF card currently set as chart cash flow card

      // Setup
      Initialize;
      CashFlowSetup.SetChartRoleCenterCFNo('');
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CashFlowForecast.ValidateShowInChart(TRUE);

      // Exercise
      CashFlowForecast.DELETE(TRUE);

      // Verify
      CashFlowSetup.GET;
      Assert.AreEqual(
        '',CashFlowSetup."CF No. on Chart in Role Center",'CF No. on Chart in Role Center in CF Setup is expected to be empty.');
    END;

    [Test]
    PROCEDURE CFChartPeriodDay@6();
    VAR
      CashFlowForecast@1003 : Record 840;
      CashFlowSetup@1009 : Record 843;
      ServiceHeader@1004 : Record 5900;
      BusChartBuf@1000 : Record 485;
      CashFlowChartSetup@1008 : Record 869;
      CFChartMgt@1001 : Codeunit 869;
      Value@1006 : Variant;
      Amount@1002 : Decimal;
      ExpectedAmount@1007 : Decimal;
    BEGIN
      // Setup
      Initialize;
      CashFlowSetup.SetChartRoleCenterCFNo('');
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CashFlowForecast.ValidateShowInChart(TRUE);
      CFHelper.CreateDefaultServiceOrder(ServiceHeader); // HACK - investigate in generic solution
      ExpectedAmount := CFHelper.GetTotalServiceAmount(ServiceHeader,FALSE);
      FillAndPostCFJnlServiceOrderOnly(ServiceHeader,CashFlowForecast);
      InitializeCashFlowChartSetup(
        CashFlowChartSetup."Start Date"::"First Entry Date",
        CashFlowChartSetup."Period Length"::Day,
        CashFlowChartSetup.Show::"Change in Cash",
        CashFlowChartSetup."Group By"::"Source Type");

      CFChartMgt.UpdateData(BusChartBuf);
      CashFlowForecast."Source Type Filter" := CashFlowForecast."Source Type Filter"::"Service Orders";
      BusChartBuf.GetValue(FORMAT(CashFlowForecast."Source Type Filter"),0,Value); // HACK - calc XIndex

      // Verify
      EVALUATE(Amount,FORMAT(Value));
      Assert.AreEqual(ExpectedAmount,Amount,'Unexpected Cash Flow date.');
    END;

    [Test]
    [HandlerFunctions(CashFlowSetupConfirmHandler)]
    PROCEDURE CFChartBudgetEntriesPeriodDay@7();
    VAR
      CashFlowForecast@1001 : Record 840;
      GLBudgetName@1002 : Record 95;
      GLBudgetEntry@1003 : Record 96;
      GLAccount@1004 : Record 15;
      CFAccount@1012 : Record 841;
      CashFlowChartSetup@1005 : Record 869;
      BusChartBuf@1007 : Record 485;
      CFForecastEntry@1010 : Record 847;
      CFChartMgt@1006 : Codeunit 869;
      LibraryERM@1000 : Codeunit 131300;
      Value@1008 : Variant;
      Amount@1009 : Decimal;
    BEGIN
      // Setup
      Initialize;
      LibraryCashFlowForecast.CreateCashFlowCard(CashFlowForecast);
      CashFlowForecast.VALIDATE("G/L Budget From",WORKDATE);
      CashFlowForecast.VALIDATE("G/L Budget To",WORKDATE);
      CashFlowForecast.MODIFY(TRUE);
      CashFlowSetupReply := TRUE; // set global handler reply to TRUE
      CashFlowForecast.ValidateShowInChart(TRUE);
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      CFHelper.FindCFBudgetAccount(CFAccount);
      CFHelper.FindFirstGLAccFromCFAcc(GLAccount,CFAccount);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,CashFlowForecast."G/L Budget To",GLAccount."No.",GLBudgetName.Name);
      GLBudgetEntry.VALIDATE(Amount,LibraryRandom.RandDec(100,2));
      GLBudgetEntry.MODIFY(TRUE);
      // fill and post budget only
      LibraryCashFlowForecast.FillBudgetJournal(FALSE,CashFlowForecast."No.",GLBudgetName.Name);
      LibraryCashFlowForecast.PostJournal;
      InitializeCashFlowChartSetup(
        CashFlowChartSetup."Start Date"::"Working Date",
        CashFlowChartSetup."Period Length"::Day,
        CashFlowChartSetup.Show::"Change in Cash",
        CashFlowChartSetup."Group By"::"Source Type");

      CFChartMgt.UpdateData(BusChartBuf);
      BusChartBuf.GetValue(FORMAT(CFForecastEntry."Source Type"::"G/L Budget"),0,Value);

      // Verify
      EVALUATE(Amount,FORMAT(Value));
      Assert.AreEqual(GLBudgetEntry.Amount,-Amount,'Unexpected Cash Flow amount.');
    END;

    LOCAL PROCEDURE CreateCashFlowAccount@11(VAR CashFlowAccount@1000 : Record 841;AccountType@1001 : Option);
    BEGIN
      WITH CashFlowAccount DO BEGIN
        INIT;
        EVALUATE("No.",LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Cash Flow Account"));
        "Account Type" := AccountType;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FillAndPostCFJnlServiceOrderOnly@15(ServiceHeader@1002 : Record 5900;CashFlowForecast@1003 : Record 840);
    VAR
      CFWorksheetLine@1001 : Record 846;
      ConsiderSource@1000 : ARRAY [11] OF Boolean;
    BEGIN
      // fill journal
      ConsiderSource[SourceType::"Service Orders"] := TRUE;
      FillJournalWithoutGroupBy(ConsiderSource,CashFlowForecast."No.");

      // filter on the created source document
      CFWorksheetLine.SETRANGE("Source Type",CFWorksheetLine."Source Type"::"Service Orders");
      CFWorksheetLine.SETRANGE("Document No.",ServiceHeader."No.");

      // post
      LibraryCashFlowForecast.PostJournalLines(CFWorksheetLine);
    END;

    LOCAL PROCEDURE InitializeCashFlowChartSetup@30(StartDate@1003 : Option;PeriodLength@1001 : Option;NewShow@1002 : Option;GroupBy@1004 : Option);
    VAR
      CashFlowChartSetup@1000 : Record 869;
    BEGIN
      WITH CashFlowChartSetup DO BEGIN
        IF GET(USERID) THEN
          DELETE;

        INIT;
        "User ID" := USERID;
        "Start Date" := StartDate;
        "Period Length" := PeriodLength;
        Show := NewShow;
        "Group By" := GroupBy;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CleanUpJournal@26(CashFlowForecast@1000 : Record 840;CFAccount@1001 : Record 841);
    BEGIN
      CashFlowForecast.DELETE;
      CFAccount.DELETE;
    END;

    LOCAL PROCEDURE OpenJournal@17(VAR CashFlowJournalPage@1004 : TestPage 841;VAR CashFlowForecast@1005 : Record 840;VAR CashFlowAccount@1000 : Record 841);
    VAR
      CashFlowWorksheetLine@1002 : Record 846;
    BEGIN
      // Create Cash Flow Card
      LibraryCashFlowForecast.CreateCashFlowCard(CashFlowForecast);
      CashFlowForecast.VALIDATE(Description,CashFlowForecast."No.");
      CashFlowForecast.MODIFY(TRUE);

      // Create Cash Flow Acount
      LibraryCashFlowForecast.CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
      CashFlowAccount.VALIDATE(Name,CashFlowAccount."No.");
      CashFlowAccount.MODIFY(TRUE);

      LibraryCashFlowForecast.CreateJournalLine(CashFlowWorksheetLine,CashFlowForecast."No.",CashFlowAccount."No.");

      CashFlowJournalPage.OPENEDIT;
    END;

    LOCAL PROCEDURE ValidateCashFlowJournalStatusLine@18(CashFlowJournalPage@1000 : TestPage 841;ExpectedCFName@1001 : Text[50];ExpectedCFAccountName@1002 : Text[50]);
    BEGIN
      CashFlowJournalPage.CFName.ASSERTEQUALS(ExpectedCFName);
      CashFlowJournalPage.CFAccName.ASSERTEQUALS(ExpectedCFAccountName);
    END;

    [ConfirmHandler]
    PROCEDURE CashFlowSetupConfirmHandler@56(Message@1000 : Text[1024];VAR Answer@1001 : Boolean);
    BEGIN
      Answer := CashFlowSetupReply;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@45(Message@1000 : Text[1024];VAR Answer@1001 : Boolean);
    BEGIN
      Answer := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@49(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE CashFlowAccountListPageHandler@9(VAR CashFlowAccountList@1000 : TestPage 855);
    BEGIN
      CashFlowAccountList.GOTORECORD(CashFlowAccount);
      CashFlowAccountList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CFLedgerEntriesDimensionOverviewMatrixModalFormHandler@14(VAR CFLEDimOverviewMatrix@1000 : TestPage 863);
    BEGIN
      CFLEDimOverviewMatrix.FILTER.SETFILTER("Document No.",SourceDocumentNo);
      // Field1 must be used because we cannot refer to specific dimension codes in the test page
      // TODO create bug for missing functions
      CFLEDimOverviewMatrix.Field1.ASSERTEQUALS(DimensionValueCode);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE FillJournalWithoutGroupBy@39(ConsiderSource@1000 : ARRAY [11] OF Boolean;CashFlowForecastNo@1001 : Code[20]);
    BEGIN
      CFHelper.FillJournal(ConsiderSource,CashFlowForecastNo,FALSE);
    END;

    [Test]
    [HandlerFunctions(EditDimensionSetEntriesHandler)]
    PROCEDURE OpenDimensionSetEntriesFromCashFlowWorkSheet@27();
    VAR
      CashFlowWorksheetLine@1003 : Record 846;
      GeneralLedgerSetup@1102 : Record 98;
      CashFlowJournal@1002 : TestPage 841;
      CashFlowForecastNo@1000 : Code[10];
    BEGIN
      Initialize;
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Inv. Rounding Precision (LCY)",GeneralLedgerSetup."Amount Rounding Precision");
      GeneralLedgerSetup.MODIFY(TRUE);
      CashFlowForecastNo := FillCashFlowWorkSheetWithSalesOrder;
      CashFlowWorksheetLine.SETFILTER("Cash Flow Forecast No.",CashFlowForecastNo);
      CashFlowWorksheetLine.FINDFIRST;
      LibraryVariableStorage.Enqueue(CashFlowWorksheetLine."Shortcut Dimension 1 Code");
      CashFlowJournal.OPENEDIT;
      CashFlowJournal.Dimensions.INVOKE;
      CashFlowJournal.CLOSE;
    END;

    [Test]
    [HandlerFunctions(SuggestWorksheetLinesHandler)]
    PROCEDURE OpenSuggestWorkSheetLineFromCashFlowWorkSheet@31();
    VAR
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      Initialize;
      CashFlowJournal.OPENVIEW;
      ASSERTERROR CashFlowJournal.SuggestWorksheetLines.INVOKE; // Report is ran with default request page in SuggestWorksheetLinesHandler
      Assert.ExpectedError(CashFlowForeCastError);
      CashFlowJournal.CLOSE;
    END;

    LOCAL PROCEDURE FillCashFlowWorkSheetWithSalesOrder@38() : Code[10];
    VAR
      CashFlowForecast@1000 : Record 840;
      ConsiderSource@1001 : ARRAY [11] OF Boolean;
    BEGIN
      CashFlowForecast.FINDFIRST;
      ConsiderSource[SourceType::"Sales Orders"] := TRUE;
      LibraryCashFlowForecast.FillJournal(ConsiderSource,CashFlowForecast."No.",TRUE);
      EXIT(CashFlowForecast."No.");
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesHandler@33(VAR EditDimensionSetEntries@1000 : TestPage 480);
    VAR
      ShortcutDim1@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShortcutDim1);
      EditDimensionSetEntries.FILTER.SETFILTER("Dimension Value Code",ShortcutDim1);
      EditDimensionSetEntries.FIRST;
      EditDimensionSetEntries.DimensionValueCode.ASSERTEQUALS(ShortcutDim1);
    END;

    [RequestPageHandler]
    PROCEDURE SuggestWorksheetLinesHandler@34(VAR SuggestWorksheetLines@1000 : TestRequestPage 840);
    BEGIN
      SuggestWorksheetLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateDimension@1002() : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      EXIT(Dimension.Code);
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow] [UI]
    }
    END.
  }
}

