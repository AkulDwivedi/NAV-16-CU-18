OBJECT Codeunit 136111 Service Planning Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ServiceOrderAllocation2@1007 : Record 5950;
      Resource2@1006 : Record 156;
      LibraryERM@1012 : Codeunit 131300;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryResource@1011 : Codeunit 130511;
      LibraryPlanning@1013 : Codeunit 132203;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryService@1000 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      isInitialized@1001 : Boolean;
      ResourceSkillDeletionError@1003 : TextConst 'ENU=%1 must not be deleted.';
      ResourceNo2@1009 : Code[20];
      ResourceGroupNo2@1004 : Code[20];
      AllocatedHours2@1008 : Decimal;
      AllocationDate2@1010 : Date;

    LOCAL PROCEDURE Initialize@62();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      COMMIT;
      isInitialized := TRUE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE AssignSkillWithUpdate@1();
    VAR
      Item@1006 : Record 27;
      ResourceSkill@1002 : Record 5956;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // Covers document number TC0082 - refer to TFS ID 21724.
      // Test Skill code updated on Service Item and Item after assigning Skill Code to Service Item Groups with update on related Item
      // and Service Item as True.

      // 1. Setup: Create Service Item, Update Service Item Group Code, Create Resource Skill Codes and update it on the - Service Item,
      // Item.
      CreateServiceItemResourceSkill(ServiceItem,ResourceSkill,Item);

      // 2. Exercise: Create Resource Skill for Service Item Group.
      CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItem."Service Item Group Code");

      // 3. Verify: Skill Codes are updated on Service Item and Item after Skill Code updated on Service Item Group with update all
      // Related Service Item and Item as True.
      ResourceSkill.GET(ResourceSkill.Type::"Service Item",ServiceItem."No.",ResourceSkill."Skill Code");
      ResourceSkill.GET(ResourceSkill.Type::Item,Item."No.",ResourceSkill."Skill Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE AssignSkillWithoutUpdate@2();
    VAR
      Item@1006 : Record 27;
      ResourceSkill@1002 : Record 5956;
      ServiceItem@1001 : Record 5940;
      Assert@1003 : Codeunit 130000;
    BEGIN
      // Covers document number TC0082 - refer to TFS ID 21724.
      // Test Skill code not updated on Service Item and Item after assigning Skill Code to Service Item Groups with update on related
      // Item and Service Item as False.

      // 1. Setup: Create Service Item, Update Service Item Group Code, Create Resource Skill Codes and update it on the - Service Item,
      // Item.
      CreateServiceItemResourceSkill(ServiceItem,ResourceSkill,Item);

      // 2. Exercise: Create Resource Skill for Service Item Group.
      CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItem."Service Item Group Code");

      // 3. Verify: Skill Codes are not updated on Service Item and Item after Skill Code updated on Service Item Group with update all
      // related Service Item and Item as False.
      Assert.IsFalse(
        ResourceSkill.GET(ResourceSkill.Type::"Service Item",ServiceItem."No.",ResourceSkill."Skill Code"),
        STRSUBSTNO(ResourceSkillDeletionError,ResourceSkill.TABLECAPTION));
      Assert.IsFalse(ResourceSkill.GET(ResourceSkill.Type::Item,Item."No.",ResourceSkill."Skill Code"),
        STRSUBSTNO(ResourceSkillDeletionError,ResourceSkill.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse,StringMenuHandler)]
    PROCEDURE DeletingSkillWithDeleteRelated@4();
    VAR
      Item@1006 : Record 27;
      ResourceSkill@1002 : Record 5956;
      ServiceItem@1001 : Record 5940;
      Assert@1003 : Codeunit 130000;
    BEGIN
      // Covers document number TC0083 - refer to TFS ID 21724.
      // Test Skill Codes deleted from Items, Service Items and Resources after deleting Service Item Groups with delete Related Skill.

      // 1. Setup: Create Service Item, Update Service Item Group Code, Create Skill Codes Update it on the - Service Item, Item,
      // Service Item Group with update option as True.
      CreateServiceItemResourceSkill(ServiceItem,ResourceSkill,Item);
      CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItem."Service Item Group Code");

      // 2. Exercise: Delete Last assigned Skill Code from Service Item Group with Delete all Related Skill Code option Selected.
      DeleteSkillCode(ResourceSkill.Type::"Service Item Group",ServiceItem."Service Item Group Code",ResourceSkill."Skill Code");

      // 3. Verify: Skill Codes are deleted from Service Item and Item.
      Assert.IsFalse(
        ResourceSkill.GET(ResourceSkill.Type::"Service Item",ServiceItem."No.",ResourceSkill."Skill Code"),
        STRSUBSTNO(ResourceSkillDeletionError,ResourceSkill.TABLECAPTION));
      Assert.IsFalse(
        ResourceSkill.GET(ResourceSkill.Type::Item,Item."No.",ResourceSkill."Skill Code"),
        STRSUBSTNO(ResourceSkillDeletionError,ResourceSkill.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,StringMenuHandlerOptionTwo)]
    PROCEDURE DeletingSkillWithLeaveRelated@7();
    VAR
      Item@1006 : Record 27;
      ResourceSkill@1002 : Record 5956;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // Covers document number TC0083 - refer to TFS ID 21724.
      // Test Skill Codes not deleted from Items, Service Items and Resources after deleting Service Item Groups with leave Related Skill.

      // 1. Setup: Create Service Item, Update Service Item Group Code, Create Skill Codes Update it on the - Service Item, Item,
      // Service Item Group with update option as True.
      CreateServiceItemResourceSkill(ServiceItem,ResourceSkill,Item);
      CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItem."Service Item Group Code");

      // 2. Exercise: Delete Last assigned Skill Code from Service Item Group with Leave all Related Skill Code option Selected.
      DeleteSkillCode(ResourceSkill.Type::"Service Item Group",ServiceItem."Service Item Group Code",ResourceSkill."Skill Code");

      // 3. Verify: Skill Codes are not deleted from Item and Service Item.
      ResourceSkill.GET(ResourceSkill.Type::Item,Item."No.",ResourceSkill."Skill Code");
      ResourceSkill.GET(ResourceSkill.Type::"Service Item",ServiceItem."No.",ResourceSkill."Skill Code");
    END;

    [Test]
    PROCEDURE ResourceAllocationServiceOrder@11();
    VAR
      Resource@1003 : Record 156;
      ServiceItemLine@1005 : Record 5901;
      ServiceOrderAllocation@1002 : Record 5950;
    BEGIN
      // Covers document number TC0084 - refer to TFS ID 21724.
      // Test Resource allocation on Service Item Lines directly.

      // 1. Setup: Create a new Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);

      // 2. Exercise: Update the Values on Service Allocation.
      LibraryResource.FindResource(Resource);
      // Required field - value is not important to test case.
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',RANDOM(10));

      // 3. Verify: Check Status on Service Allocation as Active, No of Allocation to the Service Order on Dispatch Board as one.
      VerifyStatusServiceAllocation(ServiceItemLine."Document No.",ServiceOrderAllocation.Status::Active);
      VerifyNoOfAllocations(ServiceItemLine."Document No.",1);  // One Resource should be allocated.
    END;

    [Test]
    [HandlerFunctions(AllocationFormHandlerWithAvail,AvailabilityModalFormHandler)]
    PROCEDURE AllocateResourceWithAvail@9();
    VAR
      Resource@1002 : Record 156;
      ServiceItemLine@1003 : Record 5901;
      ServiceOrderAllocation@1000 : Record 5950;
    BEGIN
      // Covers document number TC0085 - refer to TFS ID 21724.
      // Test Resource allocation using Resource Availability.

      // 1. Setup: Create a new Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);

      // 2. Exercise: Allocate Resource to the Service Line with Resource Availability Form.
      LibraryResource.FindResource(Resource);
      ResourceNo2 := Resource."No.";
      ResourceGroupNo2 := '';  // Global variable should be set to blank.
      AllocatedHours2 := RANDOM(10);  // Required field - value is not important to test case.
      AllocationDate2 := WORKDATE;
      RunResourceAllocationForm(ServiceItemLine);

      // 3. Verify: Check Status as Active and other Values on Service Allocation, Resource to be allocated to the Service Order.
      VerifyValuesServiceAllocation(
        ServiceItemLine,ServiceOrderAllocation.Status::Active,ResourceNo2,ResourceGroupNo2,AllocationDate2,AllocatedHours2);
      VerifyNoOfAllocations(ServiceItemLine."Document No.",1);  // One Resource should be allocated.
    END;

    [Test]
    [HandlerFunctions(AllocationFormHandlerWithGroup,GroupAvailModalFormHandler)]
    PROCEDURE AllocateResourceGroupWODate@35();
    VAR
      ResourceGroup@1000 : Record 152;
      ServiceItemLine@1003 : Record 5901;
      ServiceOrderAllocation@1002 : Record 5950;
    BEGIN
      // Covers document number TC0085 - refer to TFS ID 21724.
      // Test Resource allocation using Resource Availability without Allocation Date.

      // 1. Setup: Create Resource Group, Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);
      LibraryResource.CreateResourceGroup(ResourceGroup);

      // 2. Exercise: Allocate Resource Group to the Service Line with Resource Availability Form Without specifying the Allocation Date.
      ResourceNo2 := '';  // Global variable should be set to blank.
      ResourceGroupNo2 := ResourceGroup."No.";
      AllocatedHours2 := RANDOM(10);  // Required field - value is not important to test case.
      AllocationDate2 := 0D;
      RunResourceAllocationForm(ServiceItemLine);

      // 3. Verify: Check Status as Non Active and Updated Values, Resource Not to be allocated to the Service Order.
      VerifyValuesServiceAllocation(
        ServiceItemLine,ServiceOrderAllocation.Status::Nonactive,'',ResourceGroupNo2,AllocationDate2,AllocatedHours2);
      VerifyNoOfAllocations(ServiceItemLine."Document No.",0);  // Zero Resource should be allocated.
    END;

    [Test]
    [HandlerFunctions(AllocationFormHandlerWithGroup,GroupAvailModalFormHandler)]
    PROCEDURE AllocateResourceGroupWithDate@18();
    VAR
      ResourceGroup@1000 : Record 152;
      ServiceItemLine@1002 : Record 5901;
      ServiceOrderAllocation@1004 : Record 5950;
    BEGIN
      // Covers document number TC0085 - refer to TFS ID 21724.
      // Test Resource Groups allocation using Resource Groups Availability with Allocation Date.

      // 1. Setup: Create Resource Group, Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);
      LibraryResource.CreateResourceGroup(ResourceGroup);

      // 2. Exercise: Allocate Resource Group to the Service Line with Resource Availability Form with specifying the Allocation Date.
      ResourceNo2 := '';  // Global variable should be set to blank.
      ResourceGroupNo2 := ResourceGroup."No.";
      AllocatedHours2 := RANDOM(10);  // Required field - value is not important to test case.
      AllocationDate2 := WORKDATE ;
      RunResourceAllocationForm(ServiceItemLine);

      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceOrderAllocation.FINDFIRST;
      ServiceOrderAllocation.VALIDATE("Allocation Date",WORKDATE);
      ServiceOrderAllocation.MODIFY(TRUE);

      // 3. Verify: Check Status as Active and updated Values, Resource to be allocated to the Service Order.
      VerifyValuesServiceAllocation(
        ServiceItemLine,ServiceOrderAllocation.Status::Active,ResourceNo2,ResourceGroupNo2,AllocationDate2,AllocatedHours2);
      VerifyNoOfAllocations(ServiceItemLine."Document No.",1);  // One Resource should be allocated.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE AllocateResourceToAllItems@15();
    VAR
      Resource@1002 : Record 156;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1000 : Record 5950;
      ServAllocationManagement@1005 : Codeunit 5930;
      AllocatedHours@1006 : Decimal;
    BEGIN
      // Covers document number TC0086 - refer to TFS ID 21724.
      // Test Resource allocation to all the Service Items Lines on the Service order.

      // 1. Setup: Create a new Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);

      // 2. Exercise: Allocate Resource to All the Service Items.
      AllocatedHours := RANDOM(10);  // Required field - value is not important to test case.
      LibraryResource.FindResource(Resource);
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',AllocatedHours);
      ServAllocationManagement.SplitAllocation(ServiceOrderAllocation);

      // 3. Verify; Values on all Service Items, No of Allocations is equal to the Number of Service Item on Dispatch Board.
      VerifyAllocationsOnServiceItem(
        ServiceItemLine."Document No.",ServiceOrderAllocation.Status::Active,Resource."No.",'',AllocatedHours);
      VerifyNoOfAllocations(ServiceItemLine."Document No.",ServiceOrderAllocation.COUNT);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE AllocateResourceGroupToAllItem@20();
    VAR
      ResourceGroup@1005 : Record 152;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1007 : Record 5950;
      ServAllocationManagement@1006 : Codeunit 5930;
      AllocatedHours@1002 : Decimal;
    BEGIN
      // Covers document number TC0086 - refer to TFS ID 21724.
      // Test Resource Groups allocation to all the Service Item line on the Service order.

      // 1. Setup: Create Resource Group, Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);
      LibraryResource.CreateResourceGroup(ResourceGroup);

      // 2. Exercise: Allocate Resource Group to All the Service Items.
      AllocatedHours := RANDOM(10);  // Required field - value is not important to test case.
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",'',ResourceGroup."No.",AllocatedHours);
      ServAllocationManagement.SplitAllocation(ServiceOrderAllocation);

      // 3. Verify; Status as Active and Other Values on all Service Items, No of Allocations is equal to the Number of Service Item on
      // Dispatch Board.
      VerifyAllocationsOnServiceItem(
        ServiceItemLine."Document No.",ServiceOrderAllocation.Status::Active,'',ResourceGroup."No.",AllocatedHours);
      VerifyNoOfAllocations(ServiceItemLine."Document No.",ServiceOrderAllocation.COUNT);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ResourceCancelModalFormHandler)]
    PROCEDURE CancellingAllocationOfResource@23();
    VAR
      Resource@1006 : Record 156;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1005 : Record 5950;
      ServAllocationManagement@1000 : Codeunit 5930;
      NoOfAllocationsBeforeCancel@1002 : Integer;
    BEGIN
      // Covers document number TC0087 - refer to TFS ID 21724.
      // Test cancel Resource allocation.

      // 1. Setup: Create a new Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);

      // 2. Exercise: Allocate Resource to all the Service Items, Cancel Allocation on one Service Item.
      LibraryResource.FindResource(Resource);
      // Required field - value is not important to test case.
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',RANDOM(10));
      ServAllocationManagement.SplitAllocation(ServiceOrderAllocation);
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceOrderAllocation.FINDSET;
      NoOfAllocationsBeforeCancel := ServiceOrderAllocation.COUNT;
      ServAllocationManagement.CancelAllocation(ServiceOrderAllocation);

      // 3. Verify: Status as Reallocation Needed and other values on all Service Items, No of Allocations is less than one to the number
      // of Service Item.
      VerifyStatusServiceAllocation(ServiceItemLine."Document No.",ServiceOrderAllocation.Status::"Reallocation Needed");
      VerifyNoOfAllocations(ServiceItemLine."Document No.",NoOfAllocationsBeforeCancel - 1);
    END;

    [Test]
    [HandlerFunctions(ResourceCancelModalFormHandler,ReAllocationModalFormHandler)]
    PROCEDURE ReAllocationOfResource@6();
    VAR
      Resource@1006 : Record 156;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1005 : Record 5950;
      ServAllocationManagement@1000 : Codeunit 5930;
      ResourceNo@1009 : Code[20];
      AllocatedHours@1002 : Decimal;
    BEGIN
      // Covers document number TC0088 - refer to TFS ID 21724.
      // Test reallocation of Resource.

      // 1. Setup: Create a new Service Order - Service Header, Service Item and Service Item Line.
      CreateServiceOrder(ServiceItemLine);

      // 2. Exercise: Allocate Resource to all the Service Items with Resource Availability Form, Cancel Allocation
      // on one Service Item, Reallocation on the Service Item that was cancelled.
      AllocatedHours := RANDOM(10);  // Required field - value is not important to test case.
      LibraryResource.FindResource(Resource);
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',AllocatedHours);
      ServAllocationManagement.CancelAllocation(ServiceOrderAllocation);
      ResourceNo := Resource."No.";
      Resource.NEXT;
      ServiceOrderAllocation.VALIDATE("Resource No.",Resource."No.");
      ServiceOrderAllocation.MODIFY(TRUE);

      // 3. Verify: Status as Active and other values on all Service Items after Reallocation, Cancel Allocated Entries.
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.FINDFIRST;
      VerifyValuesServiceAllocation(ServiceItemLine,ServiceOrderAllocation.Status::Active,Resource."No.",'',WORKDATE,AllocatedHours);
      VerifyCancelServiceAllocation(ServiceItemLine."Document No.",ServiceItemLine."Service Item No.",ResourceNo,AllocatedHours);
    END;

    [Test]
    [HandlerFunctions(ResourceCancelModalFormHandler)]
    PROCEDURE ChangeStatusAsCancel@43();
    VAR
      Resource@1006 : Record 156;
      RepairStatus@1010 : Record 5927;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1005 : Record 5950;
      ServAllocationManagement@1000 : Codeunit 5930;
    BEGIN
      // Covers document number TC0089 - refer to TFS ID 21724.
      // Test Repair Status as Cancelled on Service Item Line after Cancel Allocation.

      // 1. Setup: Create a new Service Order - Service Header, Service Item, Service Item Line and set the Repair Status Code to Initial.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);
      UpdateRepairStatusInitial(ServiceItemLine);

      // 2. Exercise: Update the values on Service Allocation, Cancel Allocation on one Service Item.
      LibraryResource.FindResource(Resource);
      // Required field - value is not important to test case.
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',RANDOM(10));
      ServAllocationManagement.CancelAllocation(ServiceOrderAllocation);

      // 3. Verify: Repair Status as Referred.
      ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      RepairStatus.GET(ServiceItemLine."Repair Status Code");
      RepairStatus.TESTFIELD(Referred,TRUE);
    END;

    [Test]
    [HandlerFunctions(ResourceCancelModalFormHandler)]
    PROCEDURE ChangeStatusAsPartlyServed@22();
    VAR
      Resource@1006 : Record 156;
      RepairStatus@1010 : Record 5927;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1005 : Record 5950;
      ServAllocationManagement@1000 : Codeunit 5930;
    BEGIN
      // Covers document number TC0089 - refer to TFS ID 21724.
      // Test Repair Status as Partly Served on Service Item Line after Cancel Allocation.

      // 1. Setup: Create a new Service Order - Service Header, Service Item, Service Item Line and set the Repair Status Code to Initial.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);
      UpdateRepairStatusInitial(ServiceItemLine);

      // 2. Exercise: Update the values on Service Allocation, Update Repair Status to In Process and Cancel Allocation on
      // Service Item.
      LibraryResource.FindResource(Resource);
      // Required field - value is not important to test case.
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',RANDOM(10));
      UpdateRepairStatusInProcess(ServiceItemLine);
      ServAllocationManagement.CancelAllocation(ServiceOrderAllocation);

      // 3. Verify: Repair Status as Partly Served on Service Item Line.
      ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      RepairStatus.GET(ServiceItemLine."Repair Status Code");
      RepairStatus.TESTFIELD("Partly Serviced",TRUE);
    END;

    [Test]
    [HandlerFunctions(ReAllocationModalFormHandler)]
    PROCEDURE ChangeStatusAsReallocation@38();
    VAR
      Resource@1006 : Record 156;
      RepairStatus@1010 : Record 5927;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1005 : Record 5950;
    BEGIN
      // Covers document number TC0089 - refer to TFS ID 21724.
      // Test Repair Status as Reallocation on Service Item Line after Reallocation of Resource on Service Order Allocation.

      // 1. Setup: Create a new Service Order - Service Header, Service Item, Service Item Line and set the Repair Status Code to Initial.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);
      UpdateRepairStatusInitial(ServiceItemLine);

      // 2. Exercise: Update the Values on Service Allocation, Change Recource On Service Allocation, Cancel Allocation on One
      // Service Item.
      LibraryResource.FindResource(Resource);
      // Required field - value is not important to test case.
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',RANDOM(10));
      Resource.NEXT;
      ServiceOrderAllocation.VALIDATE("Resource No.",Resource."No.");
      ServiceOrderAllocation.MODIFY(TRUE);

      // 3. Verify: Verify Repair Status as Referred on Service Item Line.
      ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      RepairStatus.GET(ServiceItemLine."Repair Status Code");
      RepairStatus.TESTFIELD(Referred,TRUE);
    END;

    [Test]
    [HandlerFunctions(ReAllocationModalFormHandler)]
    PROCEDURE ChangeStatusAsFinished@39();
    VAR
      Resource@1006 : Record 156;
      RepairStatus@1010 : Record 5927;
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1001 : Record 5901;
      ServiceOrderAllocation@1005 : Record 5950;
      ResourceNo@1009 : Code[20];
      AllocatedHours@1000 : Decimal;
    BEGIN
      // Covers document number TC0089 - refer to TFS ID 21724.
      // Test Repair Status as Finished on Service Item Line after Reallocation of Resource on Service Order Allocation.

      // 1. Setup: Create a new Service Order - Service Header, Service Item, Service Item Line and set the Repair Status Code to Initial.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);
      UpdateRepairStatusInitial(ServiceItemLine);
      AllocatedHours := RANDOM(10);  // Required field - value is not important to test case.
      LibraryResource.FindResource(Resource);
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',AllocatedHours);
      Resource.NEXT;
      ServiceOrderAllocation.VALIDATE("Resource No.",Resource."No.");
      ServiceOrderAllocation.MODIFY(TRUE);

      // 2. Exercise: Create New Service Item Line, Update Repair Status to Initial, Update Values on Service Allocation for the
      // New Service Item Line, Set the Repair Status Code to In Process On Service Item Line, Change the Resource on Service Allocation.
      // the Service Item Line.
      CLEAR(ServiceItem);
      LibraryService.CreateServiceItem(ServiceItem,ServiceItemLine."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      UpdateRepairStatusInitial(ServiceItemLine);
      Resource.NEXT;

      ResourceNo := Resource."No.";
      UpdateAllocationOnSecondLine(ServiceOrderAllocation,ServiceHeader."No.",Resource."No.",'',AllocatedHours);
      UpdateRepairStatusInProcess(ServiceItemLine);
      Resource.NEXT;
      ServiceOrderAllocation.GET(ServiceOrderAllocation."Entry No.");
      ServiceOrderAllocation.VALIDATE("Resource No.",Resource."No.");
      ServiceOrderAllocation.MODIFY(TRUE);

      // 3. Verify: There are two allocation entries for Service Item No with updated Values, Repair Status as Referred on Service Item
      // Line.
      VerifyChangeAllocationStatus(
        ServiceHeader."No.",ServiceItemLine."Service Item No.",ServiceOrderAllocation.Status::Finished,ResourceNo,AllocatedHours);
      VerifyChangeAllocationStatus(
        ServiceHeader."No.",ServiceItemLine."Service Item No.",ServiceOrderAllocation.Status::Active,Resource."No.",AllocatedHours);
      ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      RepairStatus.GET(ServiceItemLine."Repair Status Code");
      RepairStatus.TESTFIELD("Partly Serviced",TRUE);
    END;

    [Test]
    PROCEDURE ChangeRepairStatusFinished@36();
    VAR
      Status@1000 : 'Finished,Partly Serviced,Referred';
    BEGIN
      // Covers document number TC0090 - refer to TFS ID 21724.
      // Test Repair Status as Finished on Service Order Allocation after updating of Repair Status on Service Item Line as
      // Finished.

      ChangeAndVerifyRepairStatus(Status::Finished);
    END;

    [Test]
    PROCEDURE ChangeRepairStatusPartlyServed@34();
    VAR
      Status@1000 : 'Finished,Partly Serviced,Referred';
    BEGIN
      // Covers document number TC0090 - refer to TFS ID 21724.
      // Test Repair Status Reallocation Needed on Service Order Allocation after updating of Repair Status on Service Item Line as
      // Partly Served.

      ChangeAndVerifyRepairStatus(Status::"Partly Serviced");
    END;

    [Test]
    PROCEDURE ChangeRepairStatusReferred@32();
    VAR
      Status@1000 : 'Finished,Partly Serviced,Referred';
    BEGIN
      // Covers document number TC0090 - refer to TFS ID 21724.
      // Test Repair Status Reallocation Needed on Service Order Allocation after updating of Repair Status on Service Item Line as
      // Referred.

      ChangeAndVerifyRepairStatus(Status::Referred);
    END;

    [Test]
    PROCEDURE DispatchBoardReportForOrder@37();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      // Covers document number TC0091 - refer to TFS ID 21724.
      // Test Dispatch Board Report for Service Order.

      // 1. Setup: Create Service Order - Service Header, Service Item, Service Item Line.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);

      GenerateVerifyDispatchReport(ServiceHeader);
    END;

    [Test]
    PROCEDURE DispatchBoardReportForQuote@44();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      // Covers document number TC0091 - refer to TFS ID 21724.
      // Test Dispatch Board Report for Service Quote.

      // 1. Setup: Create Service Quote - Service Item, Service Header and Service Item Line.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      GenerateVerifyDispatchReport(ServiceHeader);
    END;

    [Test]
    PROCEDURE ServiceLoadLevelReport@48();
    VAR
      Resource@1001 : Record 156;
      VATPostingSetup@1004 : Record 325;
      SelectionValue@1005 : 'Quantity,Cost,Price';
    BEGIN
      // Covers document number TC0091 - refer to TFS ID 21724.
      // Test Service Load Level Report.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Resource and update Vat Prod. Posting Group.
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryResource.CreateResource(Resource,VATPostingSetup."VAT Bus. Posting Group");

      // 3. Verify: Generation of Service Load Level Report with data.
      VerifyServiceLoadLevelReport(Resource."No.",SelectionValue::Quantity);
    END;

    [Test]
    PROCEDURE ServiceLoadLevelForQuantity@55();
    VAR
      SelectionValue@1012 : 'Quantity,Cost,Price';
    BEGIN
      // Covers document number TC0091 - refer to TFS ID 21724.
      // Test Service Load Level Report for Quantity.

      GenerateServiceLoadLevelReport(SelectionValue::Quantity);
    END;

    [Test]
    PROCEDURE ServiceLoadLevelForCost@54();
    VAR
      SelectionValue@1012 : 'Quantity,Cost,Price';
    BEGIN
      // Covers document number TC0091 - refer to TFS ID 21724.
      // Test Service Load Level Report for Cost.

      GenerateServiceLoadLevelReport(SelectionValue::Cost);
    END;

    [Test]
    PROCEDURE ServiceLoadLevelForPrice@53();
    VAR
      SelectionValue@1012 : 'Quantity,Cost,Price';
    BEGIN
      // Covers document number TC0091 - refer to TFS ID 21724.
      // Test Service Load Level Report for Price.

      GenerateServiceLoadLevelReport(SelectionValue::Price);
    END;

    [Test]
    PROCEDURE OrderPlanningForService@47();
    VAR
      ServiceHeader@1001 : Record 5900;
      RequisitionLine@1000 : Record 246;
    BEGIN
      // Check Quantity on Order Planning Worksheet for Service Order after running Calculate Plan.

      // Setup: Create Service Order for Item having Zero inventory.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      CreateServiceLineWithItem(ServiceHeader);

      // Exercise: Run Calculate Plan from Order Planning Worksheet.
      LibraryPlanning.CalculateOrderPlanService(RequisitionLine);

      // Verify: Verify that Requisition Line has same quantity as on Service Order.
      VerifyRequisitionLine(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MakeOrderForServiceDemand@72();
    VAR
      ServiceHeader@1003 : Record 5900;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Check Creation of Purchase Order after doing Make Order for Service Demand from Order Planning.

      // Setup: Create Service Order for Item having Zero inventory. Run Calculate Plan from Order Planning Worksheet.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      CreateServiceLineWithItem(ServiceHeader);
      LibraryPlanning.CalculateOrderPlanService(RequisitionLine);

      // Exercise: Make Order from Order Planning Worksheet.
      MakeSupplyOrdersActiveOrder(ServiceHeader."No.");

      // Verify: Verify that Purchase Order has been created with same quantity as on Service Line.
      VerifyPurchaseOrder(ServiceHeader."No.");

      // Tear Down: Delete the earlier created Manufacturing User Template.
      DeleteManufacturingUserTemplate;
    END;

    LOCAL PROCEDURE CreateItemWithVendorNo@75() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateResourceSkill@12(VAR ResourceSkill@1000 : Record 5956;Type@1004 : Option;No@1001 : Code[20]);
    VAR
      SkillCode@1003 : Record 5955;
    BEGIN
      LibraryResource.CreateSkillCode(SkillCode);
      LibraryResource.CreateResourceSkill(ResourceSkill,Type,No,SkillCode.Code);
    END;

    LOCAL PROCEDURE CreateServiceLineWithItem@68(ServiceHeader@1002 : Record 5900);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItemWithVendorNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Required field - value is not important.
      ServiceLine.VALIDATE("Needed by Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));  // Used Random to calculate the Needed By Date.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithResource@52(VAR ServiceLine@1003 : Record 5902;ServiceHeader@1002 : Record 5900;ServiceItemNo@1001 : Code[20]);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Required field - value is not important to test case.
      ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemLine@21(VAR ServiceItemLine@1004 : Record 5901;ServiceHeader@1001 : Record 5900);
    VAR
      ServiceItem@1000 : Record 5940;
      RepairStatus@1002 : Record 5927;
      Counter@1003 : Integer;
    BEGIN
      // Create 2 to 10 Service Item Lines - Boundary 2 is important.
      FOR Counter := 2 TO 2 + RANDOM(8) DO BEGIN
        CLEAR(ServiceItem);
        LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

        RepairStatus.INIT;
        RepairStatus.SETRANGE(Initial,TRUE);
        RepairStatus.FINDFIRST;
        ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
        ServiceItemLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceItemResourceSkill@60(VAR ServiceItem@1001 : Record 5940;VAR ResourceSkill@1002 : Record 5956;VAR Item@1003 : Record 27);
    BEGIN
      // Create Service Item, Update Service Item Group Code, Create Skill Codes Update it on the - Service Item, Item.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      UpdateServiceItemGroupCode(ServiceItem);
      CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item",ServiceItem."No.");
      UpdateItemServiceItemGroup(Item,ServiceItem."Service Item Group Code");
      Item.GET(Item."No.");
      CreateResourceSkill(ResourceSkill,ResourceSkill.Type::Item,Item."No.");
    END;

    LOCAL PROCEDURE CreateServiceOrder@171(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Create a new Service Order - Service Header, Service Item, Service Item Line.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      CreateServiceItemLine(ServiceItemLine,ServiceHeader);
    END;

    LOCAL PROCEDURE CreateServiceOrderOneLine@69(VAR ServiceHeader@1001 : Record 5900;VAR ServiceItemLine@1002 : Record 5901);
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      // Create a new Service Item, Service Order - Service Header, One Service Item Line.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE DeleteManufacturingUserTemplate@64();
    VAR
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      ManufacturingUserTemplate.GET(USERID);
      ManufacturingUserTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE GenerateServiceLoadLevelReport@63(SelectionValue@1000 : 'Quantity,Cost,Price');
    VAR
      ServiceLine@1003 : Record 5902;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      // 1. Setup: Create a new Service Order - Service Header, Service Item Line and Service Line with Type Resource and Post as Ship and
      // Consume.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);
      CreateServiceLineWithResource(ServiceLine,ServiceHeader,ServiceItemLine."Service Item No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 2. Exercise: Modify Qty. to Ship Field on Service Line, Post Service Order as Ship and Invoice.
      ModifyQuantityToShip(ServiceHeader."No.");
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify that Resource Ledger Entry created after post Ship and Invoice and Service Load Level Report created with data.
      VerifyResourceLedgerEntry(ServiceHeader."No.");
      VerifyServiceLoadLevelReport(ServiceLine."No.",SelectionValue);
    END;

    LOCAL PROCEDURE GenerateVerifyDispatchReport@66(ServiceHeader@1000 : Record 5900);
    VAR
      DispatchBoard@1001 : Report 5955;
      FilePath@1002 : Text[1024];
    BEGIN
      // 2. Exercise: Save Dispatch Board Report as XML and XLSX in local Temp folder.
      DispatchBoard.SETTABLEVIEW(ServiceHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceHeader."Document Type") + ServiceHeader."No." + '.xlsx';
      DispatchBoard.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that Saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    LOCAL PROCEDURE ChangeAndVerifyRepairStatus@70(Status@1005 : 'Finished,Partly Serviced,Referred');
    VAR
      Resource@1004 : Record 156;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceOrderAllocation@1001 : Record 5950;
      AllocatedHours@1000 : Decimal;
    BEGIN
      // 1. Setup: Create a new Service Order - Service Header, Service Item, Service Item Line.
      CreateServiceOrderOneLine(ServiceHeader,ServiceItemLine);

      // 2. Exercise: Allocate Resource to All the Service Items with Resource Availability Form, Update Repair Status Code
      // on Service Item Line.
      AllocatedHours := RANDOM(10);  // Required field - value is not important to test case.
      LibraryResource.FindResource(Resource);
      UpdateServiceOrderAllocation(ServiceOrderAllocation,ServiceItemLine."Document No.",Resource."No.",'',AllocatedHours);

      // 3. Verify: Verify Status other values on Service allocation.
      CASE Status OF
        Status::Finished:
          BEGIN
            UpdateRepairStatusFinished(ServiceItemLine);
            VerifyValuesServiceAllocation(
              ServiceItemLine,ServiceOrderAllocation.Status::Finished,Resource."No.",'',WORKDATE,AllocatedHours);
          END;
        Status::"Partly Serviced":
          BEGIN
            UpdateRepairStatusPartlyServed(ServiceItemLine);
            VerifyValuesServiceAllocation(
              ServiceItemLine,ServiceOrderAllocation.Status::"Reallocation Needed",Resource."No.",'',WORKDATE,AllocatedHours);
          END;
        Status::Referred:
          BEGIN
            UpdateRepairStatusReferred(ServiceItemLine);
            VerifyValuesServiceAllocation(
              ServiceItemLine,ServiceOrderAllocation.Status::"Reallocation Needed",Resource."No.",'',WORKDATE,AllocatedHours);
          END;
      END;
    END;

    LOCAL PROCEDURE DeleteSkillCode@58(Type@1002 : Option;No@1001 : Code[20];SkillCode@1004 : Code[10]);
    VAR
      ResourceSkill@1000 : Record 5956;
      ResourceSkillMgt@1003 : Codeunit 5931;
    BEGIN
      ResourceSkill.GET(Type,No,SkillCode);
      ResourceSkillMgt.PrepareRemoveMultipleResSkills(ResourceSkill);
      ResourceSkillMgt.RemoveResSkill(ResourceSkill);
      ResourceSkill.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindRequisitionLine@67(VAR RequisitionLine@1000 : Record 246;DocumentNo@1002 : Code[20];No@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DocumentNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@78(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option);
    BEGIN
      LibraryPlanning.CreateManufUserTemplate(
        ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned",
        ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrder@77(DocumentNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DocumentNo);
      RequisitionLine.FINDFIRST;
      GetManufacturingUserTemplate(ManufacturingUserTemplate,ManufacturingUserTemplate."Make Orders"::"The Active Order");
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE ModifyQuantityToShip@49(DocumentNo@1000 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE("Qty. to Ship",ServiceLine."Qty. to Ship" * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunResourceAllocationForm@29(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceOrderAllocation@1002 : Record 5950;
      ResourceAllocations@1001 : Page 6005;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceOrderAllocation.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceOrderAllocation.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceOrderAllocation.FINDFIRST;
      CLEAR(ResourceAllocations);
      ResourceAllocations.SETTABLEVIEW(ServiceOrderAllocation);
      ResourceAllocations.SETRECORD(ServiceOrderAllocation);
      ResourceAllocations.RUN;
    END;

    LOCAL PROCEDURE UpdateRepairStatusInitial@26(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      RepairStatus.SETRANGE(Initial,TRUE);
      IF NOT RepairStatus.FINDFIRST THEN BEGIN
        LibraryService.CreateRepairStatus(RepairStatus);
        RepairStatus.VALIDATE(Initial,TRUE);
        RepairStatus.MODIFY(TRUE);
      END;
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRepairStatusFinished@33(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      RepairStatus.SETRANGE(Finished,TRUE);
      IF NOT RepairStatus.FINDFIRST THEN BEGIN
        LibraryService.CreateRepairStatus(RepairStatus);
        RepairStatus.VALIDATE(Finished,TRUE);
        RepairStatus.MODIFY(TRUE);
      END;
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRepairStatusPartlyServed@25(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      RepairStatus.SETRANGE("Partly Serviced",TRUE);
      IF NOT RepairStatus.FINDFIRST THEN BEGIN
        LibraryService.CreateRepairStatus(RepairStatus);
        RepairStatus.VALIDATE("Partly Serviced",TRUE);
        RepairStatus.MODIFY(TRUE);
      END;
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRepairStatusReferred@16(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      RepairStatus.SETRANGE(Referred,TRUE);
      IF NOT RepairStatus.FINDFIRST THEN BEGIN
        LibraryService.CreateRepairStatus(RepairStatus);
        RepairStatus.VALIDATE(Referred,TRUE);
        RepairStatus.MODIFY(TRUE);
      END;
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRepairStatusInProcess@40(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      RepairStatus.SETRANGE("In Process",TRUE);
      IF NOT RepairStatus.FINDFIRST THEN BEGIN
        LibraryService.CreateRepairStatus(RepairStatus);
        RepairStatus.VALIDATE("In Process",TRUE);
        RepairStatus.MODIFY(TRUE);
      END;
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceItemGroupCode@14(VAR ServiceItem@1000 : Record 5940);
    VAR
      ServiceItemGroup@1001 : Record 5904;
    BEGIN
      LibraryService.FindServiceItemGroup(ServiceItemGroup);
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceOrderAllocation@46(VAR ServiceOrderAllocation@1002 : Record 5950;DocumentNo@1001 : Code[20];ResourceNo@1000 : Code[20];ResourceGroupNo@1003 : Code[20];AllocatedHours@1005 : Decimal);
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.FINDFIRST;
      UpdateValuesServiceAllocation(ServiceOrderAllocation,ResourceNo,ResourceGroupNo,AllocatedHours);
    END;

    LOCAL PROCEDURE UpdateAllocationOnSecondLine@45(VAR ServiceOrderAllocation@1002 : Record 5950;DocumentNo@1001 : Code[20];ResourceNo@1000 : Code[20];ResourceGroupNo@1003 : Code[20];AllocatedHours@1005 : Decimal);
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.NEXT(2);
      UpdateValuesServiceAllocation(ServiceOrderAllocation,ResourceNo,ResourceGroupNo,AllocatedHours);
    END;

    LOCAL PROCEDURE UpdateValuesServiceAllocation@59(VAR ServiceOrderAllocation@1005 : Record 5950;ResourceNo@1003 : Code[20];ResourceGroupNo@1002 : Code[20];AllocatedHours@1000 : Decimal);
    BEGIN
      ServiceOrderAllocation.VALIDATE("Resource No.",ResourceNo);
      ServiceOrderAllocation.VALIDATE("Resource Group No.",ResourceGroupNo);
      ServiceOrderAllocation.VALIDATE("Allocation Date",WORKDATE);
      ServiceOrderAllocation.VALIDATE("Allocated Hours",AllocatedHours);
      ServiceOrderAllocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemServiceItemGroup@3(VAR Item@1000 : Record 27;ServiceItemGroupCode@1001 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Service Item Group",ServiceItemGroupCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAllocationsOnServiceItem@42(DocumentNo@1001 : Code[20];Status@1003 : Option;ResourceNo@1007 : Code[20];ResourceGroupNo@1006 : Code[20];AllocatedHours@1004 : Decimal);
    VAR
      ServiceItemLine@1000 : Record 5901;
      ServiceOrderAllocation@1002 : Record 5950;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",DocumentNo);
      ServiceItemLine.FINDSET;
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      AllocatedHours := ROUND(AllocatedHours / ServiceOrderAllocation.COUNT,0.1);
      REPEAT
        ServiceOrderAllocation.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
        ServiceOrderAllocation.FINDFIRST;
        ServiceOrderAllocation.TESTFIELD(Status,Status);
        ServiceOrderAllocation.TESTFIELD("Allocated Hours",AllocatedHours);
        ServiceOrderAllocation.TESTFIELD("Service Item No.",ServiceItemLine."Service Item No.");
        ServiceOrderAllocation.TESTFIELD("Allocation Date",WORKDATE);
        ServiceOrderAllocation.TESTFIELD("Resource Group No.",ResourceGroupNo);
        ServiceOrderAllocation.TESTFIELD("Resource No.",ResourceNo);
      UNTIL ServiceItemLine.NEXT = 0
    END;

    LOCAL PROCEDURE VerifyCancelServiceAllocation@30(DocumentNo@1001 : Code[20];ServiceItemNo@1002 : Code[20];ResourceNo@1003 : Code[20];AllocatedHours@1004 : Decimal);
    VAR
      ServiceOrderAllocation@1000 : Record 5950;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.SETRANGE("Service Item No.",ServiceItemNo);
      ServiceOrderAllocation.SETRANGE(Status,ServiceOrderAllocation.Status::Canceled);
      ServiceOrderAllocation.FINDFIRST;
      ServiceOrderAllocation.TESTFIELD("Resource No.",ResourceNo);
      ServiceOrderAllocation.TESTFIELD("Allocation Date",WORKDATE);
      ServiceOrderAllocation.TESTFIELD("Allocated Hours",AllocatedHours);
    END;

    LOCAL PROCEDURE VerifyChangeAllocationStatus@61(DocumentNo@1004 : Code[20];ServiceItemNo@1003 : Code[20];Status@1002 : Option;ResourceNo@1001 : Code[20];AllocatedHours@1000 : Decimal);
    VAR
      ServiceOrderAllocation@1005 : Record 5950;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.SETRANGE("Service Item No.",ServiceItemNo);
      ServiceOrderAllocation.SETRANGE(Status,Status);
      ServiceOrderAllocation.SETRANGE("Resource No.",ResourceNo);
      ServiceOrderAllocation.SETRANGE("Allocation Date",WORKDATE);
      ServiceOrderAllocation.SETRANGE("Allocated Hours",AllocatedHours);
      ServiceOrderAllocation.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyNoOfAllocations@13(DocumentNo@1000 : Code[20];NoOfAllocations@1002 : Integer);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,DocumentNo);
      ServiceHeader.CALCFIELDS("No. of Allocations");
      ServiceHeader.TESTFIELD("No. of Allocations",NoOfAllocations);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrder@76(DocumentNo@1000 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
      ServiceLine@1002 : Record 5902;
      Item@1003 : Record 27;
    BEGIN
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDFIRST;
      Item.GET(ServiceLine."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",ServiceLine."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Buy-from Vendor No.",Item."Vendor No.");
      PurchaseLine.TESTFIELD("Location Code",ServiceLine."Location Code");
      PurchaseLine.TESTFIELD(Quantity,ServiceLine.Quantity);
      PurchaseLine.TESTFIELD("Expected Receipt Date",ServiceLine."Needed by Date");
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@65(DocumentNo@1000 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      RequisitionLine@1002 : Record 246;
    BEGIN
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDFIRST;
      FindRequisitionLine(RequisitionLine,ServiceLine."Document No.",ServiceLine."No.",ServiceLine."Location Code");
      RequisitionLine.TESTFIELD("Due Date",ServiceLine."Needed by Date");
      RequisitionLine.TESTFIELD(Quantity,ServiceLine.Quantity);
      RequisitionLine.TESTFIELD("Demand Quantity",ServiceLine.Quantity);
      RequisitionLine.TESTFIELD("Needed Quantity",ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@51(OrderNo@1003 : Code[20]);
    VAR
      ServiceInvoiceLine@1001 : Record 5993;
      ServiceInvoiceHeader@1000 : Record 5992;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.SETRANGE(Type,ServiceInvoiceLine.Type::Resource);
      ServiceInvoiceLine.FINDFIRST;
      ResLedgerEntry.SETRANGE("Document No.",ServiceInvoiceLine."Document No.");
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD(Quantity,-ServiceInvoiceLine.Quantity);
      ResLedgerEntry.TESTFIELD("Order Type",ResLedgerEntry."Order Type"::Service);
      ResLedgerEntry.TESTFIELD("Order No.",ServiceInvoiceHeader."Order No.");
      ResLedgerEntry.TESTFIELD("Order Line No.",ServiceInvoiceLine."Line No.");
    END;

    LOCAL PROCEDURE VerifyServiceLoadLevelReport@50(ResourceNo@1001 : Code[20];Selection@1000 : Option);
    VAR
      Resource@1003 : Record 156;
      ServiceLoadLevel@1002 : Report 5956;
      FilePath@1004 : Text[1024];
    BEGIN
      Resource.SETRANGE("No.",ResourceNo);
      Resource.GET(ResourceNo);
      ServiceLoadLevel.SETTABLEVIEW(Resource);
      ServiceLoadLevel.InitializeRequest(Selection);
      FilePath := TEMPORARYPATH + FORMAT(Resource.Type) + ResourceNo + '.xlsx';
      ServiceLoadLevel.SAVEASEXCEL(FilePath);
      LibraryUtility.CheckFileNotEmpty(FilePath)
    END;

    LOCAL PROCEDURE VerifyStatusServiceAllocation@31(DocumentNo@1002 : Code[20];Status@1000 : Option);
    VAR
      ServiceOrderAllocation@1001 : Record 5950;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",DocumentNo);
      ServiceOrderAllocation.FINDFIRST;
      ServiceOrderAllocation.TESTFIELD(Status,Status);
    END;

    LOCAL PROCEDURE VerifyValuesServiceAllocation@41(ServiceItemLine@1000 : Record 5901;Status@1003 : Option;ResourceNo@1007 : Code[20];ResourceGroupNo@1006 : Code[20];AllocationDate@1005 : Date;AllocatedHours@1004 : Decimal);
    VAR
      ServiceOrderAllocation@1008 : Record 5950;
    BEGIN
      ServiceOrderAllocation.SETRANGE("Document Type",ServiceOrderAllocation."Document Type"::Order);
      ServiceOrderAllocation.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceOrderAllocation.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceOrderAllocation.FINDFIRST;
      ServiceOrderAllocation.TESTFIELD(Status,Status);
      ServiceOrderAllocation.TESTFIELD("Allocated Hours",AllocatedHours);
      ServiceOrderAllocation.TESTFIELD("Service Item No.",ServiceItemLine."Service Item No.");
      ServiceOrderAllocation.TESTFIELD("Allocation Date",AllocationDate);
      ServiceOrderAllocation.TESTFIELD("Resource Group No.",ResourceGroupNo);
      ServiceOrderAllocation.TESTFIELD("Resource No.",ResourceNo);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@5(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@10(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [StrMenuHandler]
    PROCEDURE StringMenuHandler@8(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Choose the first option of the string menu.
      Choice := 1
    END;

    [StrMenuHandler]
    PROCEDURE StringMenuHandlerOptionTwo@28(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      // Choose the Second option of the string menu.
      Choice := 2;
    END;

    [PageHandler]
    PROCEDURE AllocationFormHandlerWithAvail@17(VAR ResourceAllocations@1000 : Page 6005);
    VAR
      ResAvailabilityService@1002 : Page 6004;
    BEGIN
      // Run the Res. Availability (Service) form from Resource Allocations form.
      ServiceOrderAllocation2.FINDFIRST;
      ResourceAllocations.GETRECORD(ServiceOrderAllocation2);
      ResAvailabilityService.SetData(
        ServiceOrderAllocation2."Document Type",ServiceOrderAllocation2."Document No.",ServiceOrderAllocation2."Service Item Line No.",
        ServiceOrderAllocation2."Entry No.");
      IF ServiceOrderAllocation2."Resource No." <> '' THEN
        ResAvailabilityService.SETRECORD(Resource2);
      ResAvailabilityService.RUNMODAL;
    END;

    [PageHandler]
    PROCEDURE AllocationFormHandlerWithGroup@24(VAR ResourceAllocations@1000 : Page 6005);
    VAR
      ResGrAvailabilityService@1002 : Page 6010;
    BEGIN
      // Run the Res. Group Availability (Service) form from Resource Allocations form.
      ServiceOrderAllocation2.FINDFIRST;
      ResourceAllocations.GETRECORD(ServiceOrderAllocation2);
      ResGrAvailabilityService.SetData(
        ServiceOrderAllocation2."Document Type",ServiceOrderAllocation2."Document No.",ServiceOrderAllocation2."Service Item Line No.",
        ServiceOrderAllocation2."Entry No.");
      IF ServiceOrderAllocation2."Resource No." <> '' THEN
        ResGrAvailabilityService.SETRECORD(Resource2);
      ResGrAvailabilityService.RUNMODAL;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityModalFormHandler@56(VAR ResAvailabilityService@1000 : Page 6004;VAR Response@1001 : Action);
    VAR
      ServAllocationManagement@1002 : Codeunit 5930;
    BEGIN
      // Call the ServAllocationManagement code unit to allocate Resource.
      ServAllocationManagement.AllocateDate(
        ServiceOrderAllocation2."Document Type",ServiceOrderAllocation2."Document No.",ServiceOrderAllocation2."Entry No.",
        ResourceNo2,ResourceGroupNo2,AllocationDate2,AllocatedHours2);
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@71(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ResourceCancelModalFormHandler@27(VAR CancelledAllocationReasons@1000 : Page 6002;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE GroupAvailModalFormHandler@19(VAR ResGrAvailabilityService@1000 : Page 6010;VAR Response@1001 : Action);
    VAR
      ServAllocationManagement@1002 : Codeunit 5930;
    BEGIN
      // Call the ServAllocationManagement code unit to allocate Resource.
      ServAllocationManagement.AllocateDate(
        ServiceOrderAllocation2."Document Type",ServiceOrderAllocation2."Document No.",ServiceOrderAllocation2."Entry No.",
        ResourceNo2,ResourceGroupNo2,AllocationDate2,AllocatedHours2);
    END;

    [ModalPageHandler]
    PROCEDURE ReAllocationModalFormHandler@97(VAR ReallocationEntryReasons@1000 : Page 6022;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    BEGIN
    {
      // [FEATURE] [Resource] [Service]
      Unsupported version tags:
      SE: Unable to Execute

      Test for CRM Service Planning Mgmt:
       1.  Test for assigning skill codes to Service Item Groups, Items, Service Items and Resources.
       2.  Test for deleting Skill Codes from Service Item Groups, Items, Service Items and Resources.
       3.  Test for allocating Resources to Service Item lines on Service Orders/Quotes directly.
       4.  Test for allocating resources/resource groups using resource/resource groups availability.
       5.  Test for allocating resources/resource groups to all the Service Items on the service order.
       6.  Test for cancelling allocations of Resources.
       7.  Test for reallocating Resources on Service Order.
       8.  Test for changing the Resource allocation status.
       9.  Test for changing the Repair Status of a Service Item.
       10. Test for viewing the Dispatch Board and Service Load Level reports.
       11. Test for Make Order for Service Demand from Order Planning.
       12. Test for showing demand for Service in Order Planning.

      TFS_TS_ID = 21724
      Covers Test cases:
        TC0082 TFS_TC_ID=31845 and 12044
        TC0083 TFS_TC_ID=31846 and 12045
        TC0084 TFS_TC_ID=31847 and 12046
        TC0085 TFS_TC_ID=31848 and 12047
        TC0086 TFS_TC_ID=31849 and 12048
        TC0087 TFS_TC_ID=31850 and 12049
        TC0088 TFS_TC_ID=31851 and 12050
        TC0089 TFS_TC_ID=31852 and 12051
        TC0090 TFS_TC_ID=31853 and 12052
        TC0091 TFS_TC_ID=31854 and 12053

      TFS_TS_ID = 277822
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ----------------------------------------------------------------------------------------------------------
      OrderPlanningForService,MakeOrderForServiceDemand                                             176536,176544
    }
    END.
  }
}

