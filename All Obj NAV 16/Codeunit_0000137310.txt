OBJECT Codeunit 137310 SCM Manufacturing Reports -II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1014 : Record 82;
      ItemJournalBatch@1013 : Record 233;
      OutputItemJournalTemplate@1029 : Record 82;
      OutputItemJournalBatch@1028 : Record 233;
      ConsumptionItemJournalTemplate@1027 : Record 82;
      ConsumptionItemJournalBatch@1026 : Record 233;
      LibraryERM@1004 : Codeunit 131300;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryReportDataset@1002 : Codeunit 131007;
      LibraryManufacturing@1003 : Codeunit 132202;
      LibraryPatterns@1009 : Codeunit 132212;
      LibraryWarehouse@1036 : Codeunit 132204;
      LibraryInventory@1017 : Codeunit 132201;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryUtility@1008 : Codeunit 131000;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      NoOfLinesError@1007 : TextConst 'ENU=Number of Lines must be the same.';
      FinishProductionOrder@1023 : TextConst 'ENG=Do you still want to finish the order?';

    [Test]
    PROCEDURE CalculateMachineCenterCalendarReport@1();
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1001 : Record 99000758;
    BEGIN
      // Setup: Create Work Center and Machine Center.
      Initialize;
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandDec(100,2));  // Random Value for Capacity.

      // Exercise: Run Calculate Machine Center Calendar Report.
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));  // Calculate for the Month.

      // Verify: Verify Calendar Entry for Machine Center.
      VerifyMachineCenterCalendar(MachineCenter,WorkCenter."No.");
    END;

    [Test]
    [HandlerFunctions(MachineCenterListRequestPageHandler)]
    PROCEDURE MachineCenterListReport@18();
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1001 : Record 99000758;
    BEGIN
      // Setup: Create Work Center and Machine Center.
      Initialize;
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");

      // Exercise: Generate the Machine Center List report.
      COMMIT;
      MachineCenter.SETRANGE("No.",MachineCenter."No.");
      REPORT.RUN(REPORT::"Machine Center List",TRUE,FALSE,MachineCenter);

      // Verify: Verify Machine Center details on Generated Report.
      VerifyMachineCenterList(MachineCenter);
    END;

    [Test]
    [HandlerFunctions(MachineCenterLoadBarRequestPageHandler)]
    PROCEDURE MachineCenterLoadBarReport@28();
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1001 : Record 99000758;
    BEGIN
      // Setup: Create Work Center and Machine Center.
      Initialize;
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");

      // Exercise: Generate the Machine Center Load/Bar report.
      COMMIT;
      WorkCenter.SETRANGE("No.",WorkCenter."No.");
      LibraryVariableStorage.Enqueue(4);
      REPORT.RUN(REPORT::"Machine Center Load/Bar",TRUE,FALSE,WorkCenter);

      // Verify: Verify Machine Center Details on Generated Report.
      VerifyMachineCenterLoadBar(MachineCenter,4);
    END;

    [Test]
    [HandlerFunctions(ProdOrderCalculationRequestPageHandler)]
    PROCEDURE ProdOrderCalculationReport@17();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      // Setup: Create Production Item Setup, Create Production Order and update Unit Cost Per on Production Order Routing Line.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5));
      UpdateUnitCostPerOnProdOrderRoutingLine(ProductionOrder."No.",Item."Routing No.");

      // Exercise: Generate the Prod. Order Calculation report.
      COMMIT;
      FilterOnProductionOrder(ProductionOrder);
      REPORT.RUN(REPORT::"Prod. Order - Calculation",TRUE,FALSE,ProductionOrder);

      // Verify: Verify Production details on Generated Report.
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.CALCFIELDS("Expected Operation Cost Amt.","Expected Component Cost Amt.");
      VerifyProdOrderCalculation(ProdOrderLine);
    END;

    [Test]
    [HandlerFunctions(ProdOrderRoutingListRequestPageHandler)]
    PROCEDURE ProdOrderRoutingListReport@78();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup: Create Production Item Setup and Production Order.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5));

      // Exercise: Generate the Prod. Order Routing List report.
      FilterOnProductionOrder(ProductionOrder);
      REPORT.RUN(REPORT::"Prod. Order - Routing List",TRUE,FALSE,ProductionOrder);

      // Verify: Verify Routing details on Generated Report.
      VerifyProdOrderRoutingList(Item."Routing No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderListRequestPageHandler)]
    PROCEDURE ProdOrderListReport@79();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup: Create Production Item Setup and Production Order.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5));

      // Exercise: Generate the Prod. Order List report.
      FilterOnProductionOrder(ProductionOrder);
      REPORT.RUN(REPORT::"Prod. Order - List",TRUE,FALSE,ProductionOrder);

      // Verify: Verify Production Order details on Generated Report.
      VerifyProdOrderList(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(WorkCenterListRequestPageHandler)]
    PROCEDURE WorkCenterListReport@65();
    VAR
      WorkCenter@1000 : Record 99000754;
    BEGIN
      // Setup: Create Work Center.
      Initialize;
      CreateWorkCenter(WorkCenter);

      // Exercise: Run Calculate Work Center List Report.
      COMMIT;
      WorkCenter.SETRANGE("No.",WorkCenter."No.");
      REPORT.RUN(REPORT::"Work Center List",TRUE,FALSE,WorkCenter);

      // Verify: Verify Work Center details on Generated Report.
      VerifyWorkCenterList(WorkCenter);
    END;

    [Test]
    [HandlerFunctions(WorkCenterLoadBarRequestPageHandler)]
    PROCEDURE WorkCenterLoadBarReport@5();
    VAR
      WorkCenter@1000 : Record 99000754;
    BEGIN
      // Setup: Create Work Center.
      Initialize;
      CreateWorkCenter(WorkCenter);

      // Exercise: Generate the Work Center Load/Bar report.
      COMMIT;
      WorkCenter.SETRANGE("No.",WorkCenter."No.");
      LibraryVariableStorage.Enqueue(4);
      REPORT.RUN(REPORT::"Work Center Load/Bar",TRUE,FALSE,WorkCenter);

      // Verify: Verify Work Center Details on Generated Report.
      VerifyWorkCenterLoadBar(WorkCenter,4);
    END;

    [Test]
    PROCEDURE ReplanProductionOrderReportWithNoLevels@43();
    VAR
      CalcMethod@1002 : 'No Levels,One level,All levels';
    BEGIN
      // Setup.
      Initialize;
      ReplanProductionOrderReport(CalcMethod::"No Levels");  // Calculate Method as No Level.
    END;

    [Test]
    PROCEDURE ReplanProductionOrderReportWithOneLevel@49();
    VAR
      CalcMethod@1002 : 'No Levels,One level,All levels';
    BEGIN
      // Setup.
      Initialize;
      ReplanProductionOrderReport(CalcMethod::"One level");  // Calculate Method as One Level.
    END;

    [Test]
    PROCEDURE ReplanProductionOrderReportWithAllLevels@38();
    VAR
      CalcMethod@1002 : 'No Levels,One level,All levels';
    BEGIN
      // Setup.
      Initialize;
      ReplanProductionOrderReport(CalcMethod::"All levels");  // Calculate Method as All Level.
    END;

    LOCAL PROCEDURE ReplanProductionOrderReport@99(CalculateMethod@1007 : Option);
    VAR
      GrandParentItem@1000 : Record 27;
      ParentItem@1010 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionOrder@1004 : Record 5405;
      ProductionBOMHeader@1009 : Record 99000771;
      ProductionBOMLine@1006 : Record 99000772;
      Direction@1003 : 'Forward,Backward';
      CalcMethod@1002 : 'No Levels,One level,All levels';
    BEGIN
      // Setup: Create Item hierarchy setup with GrandParent Item (Replenish: Prod order) -> Parent Item (Replenish: Prod order) -> Child Item (Replenish: Prod order).
      CreateProdOrderItemsSetup(GrandParentItem);   // First Level Hierarchy --> GrandParent - Parent.
      CreateItem(ChildItem,'','');  // Second Level Hierarchy --> GrandParent - Parent - Child.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");

      // Update Production BOM on Parent item.
      SelectProductionBOMLine(ProductionBOMLine,GrandParentItem."Production BOM No.");
      ParentItem.GET(ProductionBOMLine."No.");
      UpdateProductionBOMNoOnItem(ParentItem,ProductionBOMHeader."No.");

      // Create Production Order for Grand Parent Item.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,GrandParentItem."No.",LibraryRandom.RandInt(5));

      // Exercise: Run Replan Production Order Report with various Calculate Method Option.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalculateMethod);

      // Verify: Verify Replan Ref. No and Replan Ref. Status on Production Order - No Level.
      VerifyProductionOrderForReplan(ProductionOrder.Status,ProductionOrder."No.",GrandParentItem."No.",ProductionOrder.Quantity);

      // Verify Replan Ref. No. and Replan Ref. Status on New created Production Order for First Level Hierarchy - One Level.
      IF CalculateMethod = CalcMethod::"One level" THEN
        VerifyProductionOrderForReplan(ProductionOrder.Status,ProductionOrder."No.",ParentItem."No.",ProductionOrder.Quantity)
      ELSE  // Verify Replan Ref. No. and Replan Ref. Status on New created Production Orders for Second Level Hierarchy - All Level.
        IF CalculateMethod = CalcMethod::"All levels" THEN BEGIN
          VerifyProductionOrderForReplan(
            ProductionOrder.Status,ProductionOrder."No.",ParentItem."No.",ProductionOrder.Quantity * ProductionBOMLine."Quantity per");
          SelectProductionBOMLine(ProductionBOMLine,ParentItem."Production BOM No.");
          VerifyProductionOrderForReplan(
            ProductionOrder.Status,ProductionOrder."No.",ChildItem."No.",ProductionOrder.Quantity * ProductionBOMLine."Quantity per");
        END;
    END;

    [Test]
    PROCEDURE ReplanProductionOrderReportTwiceOnProductionOrder@54();
    VAR
      GrandParentItem@1000 : Record 27;
      ParentItem@1010 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionOrder@1004 : Record 5405;
      ProductionOrder2@1001 : Record 5405;
      ProductionBOMHeader@1009 : Record 99000771;
      ProductionBOMLine@1006 : Record 99000772;
      Direction@1003 : 'Forward,Backward';
      CalcMethod@1002 : 'No Levels,One level,All levels';
    BEGIN
      // Setup: Create Item hierarchy setup with GrandParent Item (Replenish: Prod order) -> Parent Item (Replenish: Prod order) -> Child Item (Replenish: Prod order).
      Initialize;
      CreateProdOrderItemsSetup(GrandParentItem);   // First Level Hierarchy --> GrandParent - Parent.
      CreateItem(ChildItem,'','');  // Second Level Hierarchy --> GrandParent - Parent - Child.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");

      // Update Production BOM on Parent item.
      SelectProductionBOMLine(ProductionBOMLine,GrandParentItem."Production BOM No.");
      ParentItem.GET(ProductionBOMLine."No.");
      UpdateProductionBOMNoOnItem(ParentItem,ProductionBOMHeader."No.");

      // Create Production Order for Grand Parent Item and Run Replan Production Order Report.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,GrandParentItem."No.",LibraryRandom.RandInt(5));
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"One level");
      SelectProductionOrder(ProductionOrder2,ProductionOrder.Status,ParentItem."No.");

      // Exercise: Run Replan Production Order Report again with Calculate Method Option One level on New Created Parent Item Production Order.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder2,Direction::Backward,CalcMethod::"One level");

      // Verify: Verify Replan Ref. No. and Replan Ref. Status on New created Production Orders for Second Level Hierarchy.
      SelectProductionBOMLine(ProductionBOMLine,ParentItem."Production BOM No.");
      VerifyProductionOrderForReplan(
        ProductionOrder.Status,ProductionOrder."No.",ChildItem."No.",ProductionOrder.Quantity * ProductionBOMLine."Quantity per");
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ProdOrderShortageListReportForPlannedProdOrder@342();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Prod. Order Shortage List Report for the Planned Prod. Order and verify Item No, Needed Quantity and Scheduled Need.
      // Setup.
      Initialize;
      ProdOrderShortageListReport(ProductionOrder.Status::Planned);
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ProdOrderShortageListReportForFirmPlannedProdOrder@343();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Prod. Order Shortage List Report for the Firm Planned Prod. Order and verify Item No, Needed Quantity and Scheduled Need.
      // Setup.
      Initialize;
      ProdOrderShortageListReport(ProductionOrder.Status::"Firm Planned");
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ProdOrderShortageListReportForReleasedProdOrder@344();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Prod. Order Shortage List Report for the Released Prod. Order and verify Item No, Needed Quantity and Scheduled Need.
      // Setup.
      Initialize;
      ProdOrderShortageListReport(ProductionOrder.Status::Released);
    END;

    LOCAL PROCEDURE ProdOrderShortageListReport@58(Status@1007 : Option);
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      ChildItem@1006 : Record 27;
    BEGIN
      // Create Parent and child Items with certified Production BOM and Routing Setup. Update Inventory for the Child Item.
      ChildItem.GET(CreateProdOrderItemsSetup(Item));

      // Create and refresh a Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,Status,Item."No.",LibraryRandom.RandDec(100,2) + 100);  // Value required for Needed Quantity to exist.

      // Exercise: Run and Save the Production Order Shortage List Report for Parent Item.
      RunAndSaveProdOrderShortageListReport(ProductionOrder,Status,Item."No.");

      // Verify: Verify the Item No, Scheduled Need and Needed Quantity in the report generated for Child Item.
      VerifyProdOrderShortageListReport(ChildItem,ProductionOrder."No.",Status);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ProdOrderShortageListReportForFinishedProdOrder@378();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      ChildItem@1000 : Record 27;
    BEGIN
      // Setup: Create Parent and child Items with certified Production BOM and Routing Setup. Update Inventory for the Child Item. Create and refresh a Released Production Order.
      Initialize;
      ChildItem.GET(CreateProdOrderItemsSetup(Item));
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2) + 100);  // Value required for Needed Quantity to exist.
      LibraryVariableStorage.Enqueue(FinishProductionOrder);
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");  // Change Status from Released to Finished.

      // Exercise: Run and Save the Production Order Shortage List Report for Parent Item.
      RunAndSaveProdOrderShortageListReport(ProductionOrder,ProductionOrder.Status::Finished,Item."No.");

      // Verify: Verify the Item No and Needed Quantity in the report generated for Child Item.
      VerifyProdOrderShortageListReport(ChildItem,ProductionOrder."No.",ProductionOrder.Status::Finished);
    END;

    [Test]
    [HandlerFunctions(InventoryAvailabilityPlanRequestPageHandler)]
    PROCEDURE InventoryAvailabilityPlanReportForItem@20();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Setup: Create Item. Update Item Inventory.
      Initialize;
      Item.GET(CreateChildItemWithInventory);

      // Exercise: Run and save the Inventory Availability Plan Report.
      COMMIT;
      RunAndSaveInventoryAvailabilityPlanReport(Item,FALSE);

      // Verify: Verify the Item and Item Inventory exist on the Inventory Availability Plan Report.
      VerifyInvtAvailabilityPlanReport(Item,'No_Item',Item."No.",'Inventory_Item');
    END;

    [Test]
    [HandlerFunctions(InventoryAvailabilityPlanRequestPageHandler)]
    PROCEDURE InventoryAvailabilityPlanReportForItemWithStockKeepingUnit@229();
    VAR
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      SKUCreationMethod@1000 : 'Location,Variant,Location & Variant';
    BEGIN
      // Setup: Create Item. Update Item Inventory.
      Initialize;
      Item.GET(CreateChildItemWithInventory);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryPatterns.POSTPositiveAdjustment(Item,Location.Code,'','',LibraryRandom.RandDec(100,2),
        WORKDATE,LibraryRandom.RandDec(100,2));
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE);

      // Exercise: Run and save the Inventory Availability Plan Report.
      COMMIT;
      RunAndSaveInventoryAvailabilityPlanReport(Item,TRUE);

      // Verify: Verify the Item and Item Inventory exist on the Inventory Availability Plan Report.
      VerifyInvtAvailabilityPlanReport(Item,'LocCode_SKU',Location.Code,'Inventory1_Item');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ProductionOrderStatisticsRequestPageHandler)]
    PROCEDURE ProductionOrderStatisticsWithoutConsumption@14();
    BEGIN
      // Setup.
      Initialize;
      ProductionOrderStatistics(FALSE);  // Post Consumption Journal as False.
    END;

    [Test]
    [HandlerFunctions(ProductionOrderStatisticsRequestPageHandler)]
    PROCEDURE ProductionOrderStatisticsWithConsumption@24();
    BEGIN
      // Setup.
      Initialize;
      ProductionOrderStatistics(TRUE);  // Post Consumption Journal as True.
    END;

    LOCAL PROCEDURE ProductionOrderStatistics@25(PostConsumptionJournal@1004 : Boolean);
    VAR
      Item@1003 : Record 27;
      ProductionOrder@1002 : Record 5405;
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      // Create Production Order Item Setup, Create and Refresh Released Production Order.
      CreateProdOrderItemsSetup(Item);
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(5));

      IF PostConsumptionJournal THEN
        CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Explode Routing and Post Output Journal.
      ExplodeRoutingAndPostOutputJournal(ProductionOrder."No.");

      // Change Production Order Status Released to Finished.
      LibraryVariableStorage.Enqueue(FinishProductionOrder);  // Enqueue Value for Confirm Handler.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.",ProductionOrder.Status::Finished);

      // Exercise: Generate the Production Order Statistics report.
      GenerateProductionOrderStatisticsReport(ProductionOrder."No.");

      // Verify: Production Order Statistics Report.
      VerifyProductionOrderStatistics(ProductionOrder,ProdOrderComponent."Cost Amount",PostConsumptionJournal);
    END;

    [Test]
    [HandlerFunctions(ExpCostPostingConfirmHandler,ExpCostPostingMsgHandler,InventoryValuationWIPRequestPageHandler)]
    PROCEDURE InventoryValuationWIPReportForProductionOrderWithPostOutput@182();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1002 : Record 5405;
      InventorySetup@1010 : Record 313;
      ValueEntry@1006 : Record 5802;
    BEGIN
      // Setup: Update Automatic Cost Setup. Create Item. Create and refresh a Released Production Order.
      Initialize;
      ExecuteUIHandlers;
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      UpdateInventorySetup(TRUE,TRUE,InventorySetup."Automatic Cost Adjustment"::Never);
      CreateItem(Item,'','');
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2));
      ExplodeRoutingAndPostOutputJournal(ProductionOrder."No.");  // Explode Routing and Post Output Journal.

      // Exercise: Run Inventory Valuation WIP Report.
      RunAndSaveInventoryValuationWIPReport(ProductionOrder);

      // Verify: Verify the Source No and Cost Posted to GL field on Inventory Valuation WIP Report.
      FindValueEntryForOutput(ValueEntry,Item."No.");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ProductionOrder',ProductionOrder."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('SourceNo_ProductionOrder',ProductionOrder."Source No.");
      LibraryReportDataset.AssertCurrentRowValue('ValueOfOutput',
        -(ValueEntry."Cost Posted to G/L" + ValueEntry."Expected Cost Posted to G/L"));

      // Tear down: Restore the values of Inventory Setup and General Ledger Setup.
      UpdateInventorySetup(InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Automatic Cost Adjustment");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ProdOrderShortageListRequestPageHandler)]
    PROCEDURE RFH359248_OneItemMultipleTimesInSingleOrder@26();
    VAR
      Item@1001 : Record 27;
      ProductionOrder@1002 : Record 5405;
      ProdOrderLine@1000 : Record 5406;
      ProdOrderComponent@1003 : Record 5407;
      ProdOrderCompCount@1004 : Integer;
    BEGIN
      Initialize;

      // Create Item and Proudction Order
      LibraryInventory.CreateItem(Item);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,
        ProductionOrder."Source Type"::Item,Item."No.",LibraryRandom.RandDec(100,2));

      ProdOrderCompCount := 3;
      // Create Production Order Line with a ProdOrderCompCount number of Components
      CreateProdOrderLine(ProdOrderLine,ProductionOrder.Status::Released,ProductionOrder."No.",Item."No.",1);
      CreateSetOfProdOrderComp(ProdOrderLine,Item."No.",LibraryRandom.RandInt(100),ProdOrderCompCount);

      // Change Status from Released to Finished.
      LibraryVariableStorage.Enqueue(FinishProductionOrder);
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Run and Save the Production Order Shortage List Report.
      COMMIT;
      RunAndSaveProdOrderShortageListReport(ProductionOrder,ProductionOrder.Status::Finished,Item."No.");

      // Verify Remaining Qty. (Base) for each Component is equal to quantity in ProdOrderComp Table
      ProductionOrder.GET(ProductionOrder.Status::Finished,ProductionOrder."No.");
      FilterProdOrderComponent(ProdOrderComponent,ProductionOrder,Item."No.");
      Assert.RecordIsNotEmpty(ProdOrderComponent);
      ProdOrderComponent.CALCSUMS(Quantity);
      VerifyQtyInProdOrderShortageListReport(
        ProductionOrder."No.",Item."No.",ProdOrderComponent.Quantity,ProdOrderComponent.Quantity);
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ProdOrderComponentsWithDuplicatedItemAreGroupedInShortageListReport@16();
    VAR
      ProdItem@1000 : Record 27;
      CompItem@1001 : Record 27;
      ProductionOrder@1002 : ARRAY [3] OF Record 5405;
      ProdOrderLine@1003 : Record 5406;
      QtyRequiredForReleasedOrder@1004 : Decimal;
      QtyRequiredForPlannedOrder@1007 : Decimal;
      QtySuppliedFromInventory@1005 : Decimal;
      QtySuppliedFromPlannedOrder@1006 : Decimal;
    BEGIN
      // [FEATURE] [Prod. Order Shortage List] [Prod. Order Component]
      // [SCENARIO 225889] Prod. order components should be grouped by item, location and variant in order to calculate the full need with a consideration of item inventory and planned supplies and demands.
      Initialize;

      // [GIVEN] Production items "P" and "C". "C" is a component of "P".
      LibraryInventory.CreateItem(ProdItem);
      LibraryInventory.CreateItem(CompItem);

      QtyRequiredForReleasedOrder := LibraryRandom.RandIntInRange(20,40);
      QtySuppliedFromInventory := LibraryRandom.RandIntInRange(5,10);
      QtySuppliedFromPlannedOrder := LibraryRandom.RandIntInRange(5,10);
      QtyRequiredForPlannedOrder := LibraryRandom.RandIntInRange(5,10);

      // [GIVEN] "X" pcs of "C" are in the inventory.
      PostItemInventory(CompItem."No.",QtySuppliedFromInventory);

      // [GIVEN] Released production order for item "P".
      // [GIVEN] It requires "Y" pcs of "C" to produce "P". The order contains "Y" prod. order component lines with item "C" and quantity = 1.
      CreateAndRefreshProductionOrder(ProductionOrder[1],ProductionOrder[1].Status::Released,ProdItem."No.",1);
      FindProdOrderLine(ProdOrderLine,ProductionOrder[1]);
      CreateSetOfProdOrderComp(ProdOrderLine,CompItem."No.",1,QtyRequiredForReleasedOrder);

      // [GIVEN] Firm planned production order for item "P" with "Z" prod. order component lines with item "C" and quantity = 1.
      CreateAndRefreshProductionOrder(ProductionOrder[2],ProductionOrder[2].Status::"Firm Planned",ProdItem."No.",1);
      FindProdOrderLine(ProdOrderLine,ProductionOrder[2]);
      CreateSetOfProdOrderComp(ProdOrderLine,CompItem."No.",1,QtyRequiredForPlannedOrder);

      // [GIVEN] Firm planned production order for "W" pcs of item "C".
      CreateAndRefreshProductionOrder(
        ProductionOrder[3],ProductionOrder[3].Status::"Firm Planned",CompItem."No.",QtySuppliedFromPlannedOrder);
      FindProdOrderLine(ProdOrderLine,ProductionOrder[3]);
      ProdOrderLine.VALIDATE("Due Date",WORKDATE - 1);
      ProdOrderLine.MODIFY(TRUE);

      // [GIVEN] Thus, the overall supply of item "C" is equal to ("X" + "W").
      // [GIVEN] The overall demand = ("Y" + "Z") and is greater than the supply.

      // [WHEN] Run "Prod. Order Shortage List" report.
      COMMIT;
      RunAndSaveProdOrderShortageListReport(ProductionOrder[1],ProductionOrder[1].Status::Released,ProdItem."No.");

      // [THEN] The report shows ("Y" + "Z") - ("X" + "W") pcs of "C" lacking to produce "P".
      VerifyQtyInProdOrderShortageListReport(
        ProductionOrder[1]."No.",CompItem."No.",QtyRequiredForReleasedOrder,
        QtyRequiredForReleasedOrder + QtyRequiredForPlannedOrder - QtySuppliedFromInventory - QtySuppliedFromPlannedOrder);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      ItemJournalSetup;
      ConsumptionJournalSetup;
      OutputJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE OutputJournalSetup@31();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateMachineCenter@51(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(100,2));
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalExplodeRouting@1106(ProductionOrderNo@1000 : Code[20]);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE CreateProdOrderItemsSetup@3(VAR Item@1000 : Record 27) ChildItemNo : Code[20];
    VAR
      RoutingHeader@1005 : Record 99000763;
      ProductionBOMHeader@1004 : Record 99000771;
    BEGIN
      // Create Child Items.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      ChildItemNo := CreateChildItemWithInventory;

      // Create Production BOM.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItemNo);

      // Create Parent Item and attach Routing and Production BOM.
      CreateRoutingSetup(RoutingHeader);
      CreateItem(Item,RoutingHeader."No.",ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateRoutingSetup@42(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@41(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE FindLastOperationNo@40(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE CreateItem@45(VAR Item@1000 : Record 27;RoutingNo@1001 : Code[20];ProductionBOMNo@1003 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::FIFO);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(50,2));
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@98(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1001 : Code[20]);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@142(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateChildItemWithInventory@12() : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      CreateItem(Item,'','');
      PostItemInventory(Item."No.",LibraryRandom.RandDec(100,2) + 10);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE PostItemInventory@29(ItemNo@1001 : Code[20];Qty@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateUnitCostPerOnProdOrderRoutingLine@83(ProdOrderNo@1001 : Code[20];RoutingNo@1002 : Code[20]);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRoutingLine.SETRANGE("Routing No.",RoutingNo);
      ProdOrderRoutingLine.FINDSET;
      REPEAT
        ProdOrderRoutingLine.VALIDATE("Unit Cost per",LibraryRandom.RandInt(10));
        ProdOrderRoutingLine.MODIFY(TRUE);
      UNTIL ProdOrderRoutingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ExplodeRoutingAndPostOutputJournal@64(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      OutputJournalExplodeRouting(ProductionOrderNo);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE FilterOnProductionOrder@22(VAR ProductionOrder@1000 : Record 5405);
    BEGIN
      ProductionOrder.SETRANGE("No.",ProductionOrder."No.");
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
    END;

    LOCAL PROCEDURE FilterProdOrderComponent@109(VAR ProdOrderComponent@1000 : Record 5407;ProductionOrder@1001 : Record 5405;ItemNo@1002 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FindProdOrderLine@81(VAR ProdOrderLine@1000 : Record 5406;ProdOrder@1001 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindValueEntryForOutput@69(VAR ValueEntry@1000 : Record 5802;ItemNo@1001 : Code[20]);
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Output);
      ValueEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GenerateProductionOrderStatisticsReport@27(ProductionOrderNo@1002 : Code[20]);
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      ProductionOrder.SETRANGE("No.",ProductionOrderNo);
      REPORT.RUN(REPORT::"Production Order Statistics",TRUE,FALSE,ProductionOrder);
    END;

    LOCAL PROCEDURE SelectProductionBOMLine@73(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.SETRANGE(Type,ProductionBOMLine.Type::Item);
      ProductionBOMLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectProductionOrder@82(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceNo@1002 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@19(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE FindProductionOrderComponent@21(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20];Status@1002 : Option);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@6(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunAndSaveProdOrderShortageListReport@9(ProductionOrder@1002 : Record 5405;ProductionOrderStatus@1001 : Option;SourceNo@1004 : Code[20]);
    BEGIN
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,SourceNo);
      REPORT.RUN(REPORT::"Prod. Order - Shortage List",TRUE,FALSE,ProductionOrder);
    END;

    LOCAL PROCEDURE RunAndSaveInventoryAvailabilityPlanReport@209(VAR Item@1000 : Record 27;UseStockkeepingUnit@1001 : Boolean);
    VAR
      PeriodLength@1002 : DateFormula;
    BEGIN
      Item.SETRANGE("No.",Item."No.");
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(PeriodLength);
      LibraryVariableStorage.Enqueue(UseStockkeepingUnit);
      REPORT.RUN(REPORT::"Inventory - Availability Plan",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE UpdateInventorySetup@210(AutomaticCostPosting@1002 : Boolean;ExpectedCostPosting@1001 : Boolean;AutomaticCostAdjustment@1003 : Option);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPosting);
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunAndSaveInventoryValuationWIPReport@37(ProductionOrder@1000 : Record 5405);
    BEGIN
      ProductionOrder.SETRANGE("No.",ProductionOrder."No.");
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(WORKDATE);
      REPORT.RUN(REPORT::"Inventory Valuation - WIP",TRUE,FALSE,ProductionOrder);
    END;

    LOCAL PROCEDURE VerifyMachineCenterCalendar@7(MachineCenter@1000 : Record 99000758;WorkCenterNo@1001 : Code[20]);
    VAR
      CalendarEntry@1002 : Record 99000757;
    BEGIN
      CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Machine Center");
      CalendarEntry.SETRANGE("No.",MachineCenter."No.");
      CalendarEntry.FINDSET;
      REPEAT
        CalendarEntry.TESTFIELD("Work Center No.",WorkCenterNo);
        CalendarEntry.TESTFIELD(Efficiency,MachineCenter.Efficiency);
        CalendarEntry.TESTFIELD(Capacity,MachineCenter.Capacity);
      UNTIL CalendarEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyMachineCenterList@8(MachineCenter@1000 : Record 99000758);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Machine_Center__No__',MachineCenter."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Machine_Center__Work_Center_No__',MachineCenter."Work Center No.");
      LibraryReportDataset.AssertCurrentRowValue('Machine_Center_Capacity',MachineCenter.Capacity);
      LibraryReportDataset.AssertCurrentRowValue('Machine_Center_Efficiency',MachineCenter.Efficiency);
    END;

    LOCAL PROCEDURE VerifyMachineCenterLoadBar@15(MachineCenter@1000 : Record 99000758;NoOfPeriods@1006 : Integer);
    VAR
      VarDate@1004 : Variant;
      PeriodEndingDate@1003 : Date;
      PeriodStartingDate@1002 : Date;
      Count@1001 : Integer;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Machine_Center__No__',MachineCenter."No.");
      WHILE LibraryReportDataset.GetNextRow DO BEGIN
        Count += 1;
        LibraryReportDataset.FindCurrentRowValue('PeriodStartingDate',VarDate);
        EVALUATE(PeriodStartingDate,VarDate);
        LibraryReportDataset.FindCurrentRowValue('PeriodEndingDate',VarDate);
        EVALUATE(PeriodEndingDate,VarDate);
        MachineCenter.SETRANGE("Date Filter",PeriodStartingDate,PeriodEndingDate);
        MachineCenter.CALCFIELDS("Capacity (Effective)");
        LibraryReportDataset.AssertCurrentRowValue('Machine_Center__Capacity__Effective__',MachineCenter."Capacity (Effective)");
      END;

      Assert.AreEqual(NoOfPeriods,Count,NoOfLinesError);
    END;

    LOCAL PROCEDURE VerifyWorkCenterList@10(WorkCenter@1000 : Record 99000754);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Work_Center__No__',WorkCenter."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Work_Center__Work_Center_Group_Code_',WorkCenter."Work Center Group Code");
      LibraryReportDataset.AssertCurrentRowValue('Work_Center__Shop_Calendar_Code_',WorkCenter."Shop Calendar Code");
      LibraryReportDataset.AssertCurrentRowValue('Work_Center_Capacity',WorkCenter.Capacity);
    END;

    LOCAL PROCEDURE VerifyProdOrderList@23(ProductionOrder@1000 : Record 5405);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Production_Order__No__',ProductionOrder."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Production_Order__Source_No__',ProductionOrder."Source No.");
      LibraryReportDataset.AssertCurrentRowValue('Production_Order__Routing_No__',ProductionOrder."Routing No.");
      LibraryReportDataset.AssertCurrentRowValue('Production_Order_Quantity',ProductionOrder.Quantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderRoutingList@67(RoutingNo@1001 : Code[20]);
    VAR
      RoutingLine@1002 : Record 99000764;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.FINDSET;
      REPEAT
        LibraryReportDataset.SetRange('Prod__Order_Routing_Line__Operation_No__',RoutingLine."Operation No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('Prod__Order_Routing_Line_Type',FORMAT(RoutingLine.Type));
        LibraryReportDataset.AssertCurrentRowValue('Prod__Order_Routing_Line__No__',RoutingLine."No.");
      UNTIL RoutingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyProdOrderCalculation@101(ProdOrderLine@1000 : Record 5406);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Production_Order_No_',ProdOrderLine."Prod. Order No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Prod__Order_Line__Item_No__',ProdOrderLine."Item No.");
      LibraryReportDataset.AssertCurrentRowValue('Prod__Order_Line_Quantity',ProdOrderLine.Quantity);
      LibraryReportDataset.AssertCurrentRowValue('Prod__Order_Line__Expected_Operation_Cost_Amt__',
        ProdOrderLine."Expected Operation Cost Amt.");
      LibraryReportDataset.AssertCurrentRowValue('Prod__Order_Line__Expected_Component_Cost_Amt__',
        ProdOrderLine."Expected Component Cost Amt.");
      LibraryReportDataset.AssertCurrentRowValue('TotalCost_Control29',
        ProdOrderLine."Expected Component Cost Amt." + ProdOrderLine."Expected Operation Cost Amt.");
    END;

    LOCAL PROCEDURE VerifyWorkCenterLoadBar@13(WorkCenter@1000 : Record 99000754;NoOfPeriods@1006 : Integer);
    VAR
      VarDate@1004 : Variant;
      PeriodStartingDate@1002 : Date;
      PeriodEndingDate@1003 : Date;
      Count@1001 : Integer;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Work_Center__No__',WorkCenter."No.");
      WHILE LibraryReportDataset.GetNextRow DO BEGIN
        Count += 1;
        LibraryReportDataset.FindCurrentRowValue('PeriodStartingDate',VarDate);
        EVALUATE(PeriodStartingDate,VarDate);
        LibraryReportDataset.FindCurrentRowValue('PeriodEndingDate',VarDate);
        EVALUATE(PeriodEndingDate,VarDate);
        WorkCenter.SETRANGE("Date Filter",PeriodStartingDate,PeriodEndingDate);
        WorkCenter.CALCFIELDS("Capacity (Effective)");
        LibraryReportDataset.AssertCurrentRowValue('Work_Center__Capacity__Effective__',WorkCenter."Capacity (Effective)");
      END;

      Assert.AreEqual(NoOfPeriods,Count,NoOfLinesError);
    END;

    LOCAL PROCEDURE VerifyProductionOrderForReplan@88(ReplanRefStatus@1001 : Option;ReplanRefNo@1002 : Code[20];SourceNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      SelectProductionOrder(ProductionOrder,ReplanRefStatus,SourceNo);
      ProductionOrder.TESTFIELD("Replan Ref. Status",ReplanRefStatus);
      ProductionOrder.TESTFIELD("Replan Ref. No.",ReplanRefNo);
      ProductionOrder.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderShortageListReport@87(Item@1001 : Record 27;ProductionOrderNo@1002 : Code[20];Status@1003 : Option);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo,Status);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo_ProdOrderComp',Item."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('No_ProdOrder',ProductionOrderNo);

      Item.CALCFIELDS(Inventory,"Scheduled Need (Qty.)");
      IF Status <> ProdOrderComponent.Status::Finished THEN BEGIN
        LibraryReportDataset.AssertCurrentRowValue('CompItemSchdldNeedQty',Item."Scheduled Need (Qty.)");
        LibraryReportDataset.AssertCurrentRowValue('NeededQuantity',Item."Scheduled Need (Qty.)" - Item.Inventory);
      END ELSE BEGIN
        LibraryReportDataset.AssertCurrentRowValue('CompItemSchdldNeedQty',ProdOrderComponent."Remaining Quantity");
        LibraryReportDataset.AssertCurrentRowValue('NeededQuantity',ProdOrderComponent."Remaining Quantity" - Item.Inventory);
      END;

      LibraryReportDataset.AssertCurrentRowValue('CompItemInventory',Item.Inventory);
    END;

    LOCAL PROCEDURE VerifyProductionOrderStatistics@70(ProductionOrder@1000 : Record 5405;MaterialCost@1005 : Decimal;Post@1001 : Boolean);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ProdOrder',ProductionOrder."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('Status_ProdOrder',FORMAT(ProductionOrder.Status::Finished));
      LibraryReportDataset.AssertCurrentRowValue('ExpCost1',MaterialCost); // Exp. Material Cost.

      IF Post THEN
        LibraryReportDataset.AssertCurrentRowValue('ActCost1',MaterialCost); // Act. Material Cost.
    END;

    [Normal]
    LOCAL PROCEDURE VerifyInvtAvailabilityPlanReport@63(Item@1000 : Record 27;KeyElement@1001 : Text;KeyValue@1004 : Variant;InventoryElement@1002 : Text);
    BEGIN
      Item.CALCFIELDS(Inventory);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(KeyElement,KeyValue);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(InventoryElement,Item.Inventory);
    END;

    LOCAL PROCEDURE ExecuteUIHandlers@1033();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      MESSAGE('');
      IF CONFIRM('') THEN;
    END;

    [RequestPageHandler]
    PROCEDURE MachineCenterLoadBarRequestPageHandler@2(VAR MachineCenterLoadBar@1000 : TestRequestPage 99000786);
    VAR
      NoOfPeriods@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NoOfPeriods);
      MachineCenterLoadBar.Control10.SETVALUE(WORKDATE);
      MachineCenterLoadBar.NoOfPeriods.SETVALUE(NoOfPeriods);
      MachineCenterLoadBar.PeriodLength.SETVALUE('<1W>');
      MachineCenterLoadBar.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE WorkCenterLoadBarRequestPageHandler@11(VAR WorkCenterLoadBar@1000 : TestRequestPage 99000785);
    VAR
      NoOfPeriods@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NoOfPeriods);
      WorkCenterLoadBar.Control1.SETVALUE(WORKDATE);
      WorkCenterLoadBar.NoOfPeriods.SETVALUE(NoOfPeriods);
      WorkCenterLoadBar.PeriodLength.SETVALUE('<1W>');
      WorkCenterLoadBar.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE AreSameMessages@149(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@103(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(ConfirmMessage,ExpectedMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ExpCostPostingConfirmHandler@56(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE ExpCostPostingMsgHandler@48(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE MachineCenterListRequestPageHandler@121(VAR MachineCenterList@1000 : TestRequestPage 99000760);
    BEGIN
      MachineCenterList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderCalculationRequestPageHandler@131(VAR ProdOrderCalculation@1000 : TestRequestPage 99000767);
    BEGIN
      ProdOrderCalculation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderRoutingListRequestPageHandler@132(VAR ProdOrderRoutingList@1000 : TestRequestPage 99000761);
    BEGIN
      ProdOrderRoutingList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderListRequestPageHandler@134(VAR ProdOrderList@1000 : TestRequestPage 99000763);
    BEGIN
      ProdOrderList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE WorkCenterListRequestPageHandler@135(VAR WorkCenterList@1000 : TestRequestPage 99000759);
    BEGIN
      WorkCenterList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderShortageListRequestPageHandler@137(VAR ProdOrderShortageList@1000 : TestRequestPage 99000788);
    BEGIN
      ProdOrderShortageList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InventoryAvailabilityPlanRequestPageHandler@141(VAR InventoryAvailabilityPlan@1000 : TestRequestPage 707);
    VAR
      StartingDate@1002 : Variant;
      PeriodLength@1001 : Variant;
      UseStockeepingUnit@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(PeriodLength);
      LibraryVariableStorage.Dequeue(UseStockeepingUnit);

      InventoryAvailabilityPlan.StartingDate.SETVALUE(StartingDate);
      InventoryAvailabilityPlan.PeriodLength.SETVALUE(PeriodLength);
      InventoryAvailabilityPlan.UseStockkeepUnit.SETVALUE(UseStockeepingUnit);
      InventoryAvailabilityPlan.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProductionOrderStatisticsRequestPageHandler@146(VAR ProductionOrderStatistics@1000 : TestRequestPage 99000791);
    BEGIN
      ProductionOrderStatistics.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE InventoryValuationWIPRequestPageHandler@148(VAR InventoryValuationWIP@1000 : TestRequestPage 5802);
    VAR
      StartingDate@1001 : Variant;
      EndingDate@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);

      InventoryValuationWIP.StartingDate.SETVALUE(StartingDate);
      InventoryValuationWIP.EndingDate.SETVALUE(EndingDate);
      InventoryValuationWIP.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE CreateProdOrderLine@128(VAR ProdOrderLine@1000 : Record 5406;ProdOrderLineStatus@1005 : 'Simulated,Planned,Firm Planned,Released,Finished';ProdOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      ProdOrderLine.INIT;
      ProdOrderLine.VALIDATE(Status,ProdOrderLineStatus);
      ProdOrderLine.VALIDATE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.INSERT(TRUE);
      ProdOrderLine.VALIDATE("Item No.",ItemNo);
      ProdOrderLine.VALIDATE(Quantity,Quantity);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSetOfProdOrderComp@94(ProdOrderLine@1001 : Record 5406;ItemNo@1004 : Code[20];QtyPer@1006 : Decimal;ProdOrderCompCount@1002 : Integer);
    VAR
      ProdOrderComponent@1000 : Record 5407;
      iProdOrderComp@1005 : Integer;
    BEGIN
      FOR iProdOrderComp := 1 TO ProdOrderCompCount DO BEGIN
        LibraryManufacturing.CreateProductionOrderComponent(
          ProdOrderComponent,ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.");
        ProdOrderComponent.VALIDATE("Line No.",iProdOrderComp);
        ProdOrderComponent.INSERT(TRUE);
        ProdOrderComponent.VALIDATE("Item No.",ItemNo);
        ProdOrderComponent.VALIDATE("Quantity per",QtyPer); // Required to validate "Remaining Qty. (Base)"
        ProdOrderComponent.VALIDATE("Due Date",ProdOrderLine."Due Date" - 1);
        ProdOrderComponent.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyQtyInProdOrderShortageListReport@44(ProdOrderNo@1000 : Code[20];ItemNo@1001 : Code[20];RemainingQty@1004 : Decimal;RequiredQty@1003 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ProdOrder',ProdOrderNo);
      LibraryReportDataset.SetRange('ItemNo_ProdOrderComp',ItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('RemQtyBase_ProdOrderComp',RemainingQty);
      LibraryReportDataset.AssertCurrentRowValue('NeededQuantity',RequiredQty);
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [Reports] [SCM]
      Test Manufacturing Reports:
        1. Run the Calculate Machine Center Calendar Report. Verify Calendar Entry for Machine Center.
        2. Run the Machine Center List Report. Verify Machine Center details on Generated Report.
        3. Run the Machine Center Load/Bar Report. Verify Machine Center Details on Generated Report.
        4. Run the Prod. Order - Calculation Report. Verify Production Order details on Generated Report.
        5. Run the Prod. Order - Routing List Report. Verify Routing details on Generated Report.
        6. Run the Prod. Order - List Report. Verify Production Order details on Generated Report.
        7. Run the Work Center List Report. Verify Work Center details on Generated Report.
        8. Run the Work Center Load/Bar Report. Verify Work Center Details on Generated Report.
        9. Run the Replan Production Order Report with CalcMethod as "No Levels". Verify Production Order.
       10. Run the Replan Production Order Report with CalcMethod as "One Level". Verify New Production Order.
       11. Run the Replan Production Order Report with CalcMethod as "All Levels". Verify New Production Order.
       12. Run the Replan Production Order Report with CalcMethod as "One Level" and again run the Replan Production Order Report with
           CalcMethod as "One Level" on New created Production Order. Verify New Production Order.
       13. Run the Prod. Order Shortage List Report for the Planned Prod. Order and verify Item No, Needed Quantity and Scheduled Need.
       14. Run the Prod. Order Shortage List Report for the Firm Planned Prod. Order and verify Item No, Needed Quantity and Scheduled Need.
       15. Run the Prod. Order Shortage List Report for the Released Prod. Order and verify Item No, Needed Quantity and Scheduled Need.
       16. Run the Prod. Order Shortage List Report for the Finished Prod. Order after Change Status and verify Item No and Needed Quantity on it.
       17. Run the Inventory Availability Plan Report and verify the Item and Item Inventory exist on the Inventory Availability Plan Report.
       18. Run the Inventory Availability Plan Report with Stock Keeping Unit and verify the Item and Item Inventory exist on the Inventory Availability Plan Report.
       19. Run the Production Order Statistics Report. Verify Production Order details for Finished Production Order and Expected Material Cost.
       20. Run the Production Order Statistics Report. Verify Production Order details for Finished Production Order, Actual Material Cost and Expected Material Cost.
       21. Run the Inventory Valuation WIP Report for Production Order, post Output and verify the SourceNo and Cost Posted to GL.

        Covers Test Cases: TFS_TS_ID = 285508
        -------------------------------------------------------------------
        Test Function Name                              TFS ID
        -------------------------------------------------------------------
        CalculateMachineCenterCalendarReport            128936
        MachineCenterListReport                         139611
        MachineCenterLoadBarReport                      139615

        Covers Test Cases: TFS_TS_ID = 285510
        -------------------------------------------------------------------
        Test Function Name                              TFS ID
        -------------------------------------------------------------------
        ProdOrderCalculationReport                      139464
        ProdOrderRoutingListReport                      139612
        ProdOrderListReport                             139613
        WorkCenterListReport                            139610

        Covers Test Cases: TFS_TS_ID = 285509
        -------------------------------------------------------------------
        Test Function Name                                         TFS ID
        -------------------------------------------------------------------
        WorkCenterLoadBarReport                                    139614
        ReplanProductionOrderReportWithNoLevels                    128933
        ReplanProductionOrderReportWithOneLevel                    128933
        ReplanProductionOrderReportWithAllLevels                   128933
        ReplanProductionOrderReportTwiceOnProductionOrder          128933

        Covers Test Cases: TFS_TS_ID = 298981
        --------------------------------------------------------------------------
        Test Function Name                                                 TFS ID
        --------------------------------------------------------------------------
        ProdOrderShortageListReportForPlannedProdOrder                     219947
        ProdOrderShortageListReportForFirmPlannedProdOrder                 219947
        ProdOrderShortageListReportForReleasedProdOrder                    219947
        ProdOrderShortageListReportForFinishedProdOrder                    219947

        Covers Test Cases: TFS_TS_ID = 298982
        --------------------------------------------------------------------------
        Test Function Name                                                 TFS ID
        --------------------------------------------------------------------------
        InventoryAvailabilityPlanReportForItem                             127659
        InventoryAvailabilityPlanReportForItemWithStockKeepingUnit         127659

        Covers Test Cases: TFS_TS_ID = 298993
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        ProductionOrderStatisticsWithoutConsumption                        135454
        ProductionOrderStatisticsWithConsumption                           135454

        Covers Test Case: TFS_TS_ID = 302714
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        InventoryValuationWIPReportForProductionOrderWithPostOutput         255849
    }
    END.
  }
}

