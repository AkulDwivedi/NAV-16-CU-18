OBJECT Codeunit 136114 Service Order Check
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibrarySetupStorage@1015 : Codeunit 131009;
      LibraryERM@1006 : Codeunit 131300;
      LibraryRandom@1013 : Codeunit 130440;
      LibraryResource@1014 : Codeunit 130511;
      LibrarySales@1004 : Codeunit 130509;
      LibraryService@1000 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1098 : Codeunit 132201;
      isInitialized@1001 : Boolean;
      ServiceOrderError@1003 : TextConst 'ENU=Service Order must not exist.';
      ItemShipmentLineServiceTier@1007 : TextConst 'ENU="%1 must be equal to ''Item''  in %2: %3=%4, %5=%6. Current value is ''%7''."';
      OrderNo@1008 : Code[20];
      InvoiceNo@1010 : Code[20];
      DocumentDimError@1009 : TextConst 'ENU=Dim Set ID on shipment: %1 is different from service Order: %2';
      CountError@1011 : TextConst '@@@="%1: Count of Lines;%2: Table Caption";ENU=%1 %2 must exist.';
      PostingDateErr@1012 : TextConst 'ENU=Posting Date of Value Entry is incorrect';

    [Test]
    PROCEDURE CreationOfServiceOrder@3();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC1.1 - refer to TFS ID 21648
      // Check Order Creation.

      // 1. Setup
      Initialize;

      // 2. Exercise: Create Service Item, Service Order with Header and Service Item Line.
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);

      // 3. Verify: Check that Service Order Exists.
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE CreateServiceItemWorksheet@7();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceLine@1004 : Record 5902;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC1.2 - refer to TFS ID 21648
      // Check All fault code exist on Service Item Line after adding Service Line.

      // 1. Setup: Create Service Item, Service Order with Header and Service Item Line. Modify Service Item with Different Fault Code.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      ModifyServiceItemLine(ServiceItemLine);

      // 2. Exercise: Create Service Line with Item.
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");

      // 3. Verify: Check that different fault code exist after Creating Service Line with Item.
      ServiceLine.TESTFIELD("Fault Area Code",ServiceItemLine."Fault Area Code");
      ServiceLine.TESTFIELD("Fault Code",ServiceItemLine."Fault Code");
      ServiceLine.TESTFIELD("Symptom Code",ServiceItemLine."Symptom Code");
      ServiceLine.TESTFIELD("Fault Reason Code",ServiceItemLine."Fault Reason Code");
    END;

    [Test]
    PROCEDURE ServiceItemWorksheetReport@17();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceLine@1004 : Record 5902;
      ServiceHeader@1001 : Record 5900;
      ServiceItemWorksheet@1006 : Report 5936;
      FilePath@1000 : Text[1024];
    BEGIN
      // Covers document number TC1.2 - refer to TFS ID 21648
      // Save Service Item Worksheet Report with Fault Code in XLSX> and XML Format and check data exist in Saved files.

      // 1. Setup: Create Service Item, Service Order with Header and Service Item Line. Modify Service Item with Different Fault Code.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      ModifyServiceItemLine(ServiceItemLine);

      // 2. Exercise: Create Service Line with Item.
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");

      // 3. Verify: Save ServiceItemWorksheet Report with different Fault Code in Service Tier with XLSX and C/Side with XML format.
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemWorksheet.SETTABLEVIEW(ServiceItemLine);
      FilePath := TEMPORARYPATH + FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + '.xlsx';
      ServiceItemWorksheet.SAVEASEXCEL(FilePath);

      // 4. Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(LoanerConfirmHandler)]
    PROCEDURE ServiceItemWithServiceLoaner@19();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      TempServiceItemLine@1000 : TEMPORARY Record 5901;
      ServLoanerManagement@1002 : Codeunit 5901;
    BEGIN
      // Covers document number TC1.3 - refer to TFS ID 21648
      // Loaner No. should be same after adding Service Line with Resource on Service Item Line.

      // 1. Setup: Create Service Item, Service Order with Header and three Service Item Line. Modify each Service Item Line with
      // Loaner No.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceItemAndItemLine(ServiceItem,ServiceItemLine,ServiceHeader);
      CreateServiceItemAndItemLine(ServiceItem,ServiceItemLine,ServiceHeader);
      ModifyLoanerNoServiceItemLine(ServiceItemLine);
      SaveServiceItemLineInTempTable(TempServiceItemLine,ServiceItemLine);

      // 2. Exercise: Create three Service Line with Type Resource.
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");

      // 3. Verify: Check that Service Item Line has same Loaner No. after Creating Service Line with Resource.
      VerifyLoanerNoServiceItemLine(TempServiceItemLine);

      // 4. Cleanup: Receive Loaner from All the Service Item Line.
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.FINDSET;
      REPEAT
        ServLoanerManagement.ReceiveLoaner(ServiceItemLine);
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(LoanerConfirmHandler)]
    PROCEDURE ServiceReceivingLoaners@37();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC1.4 - refer to TFS ID 21648
      // Loaner No. should be blank after receiving loaner in Service Item Line.

      // 1. Setup: Create Service Item, Service Order with Header and Three Service Item Line. Modify Service Item Line with Loaner No.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ModifyLoanerNoServiceItemLine(ServiceItemLine);

      // 2. Exercise: Create three Service Line with Type Resource.
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");
      ReceiveLoanerOnServiceItemLine(ServiceItemLine);

      // 3. Verify: Check that "Loaner No." field becomes blank.
      VerifyBlankLoanerNo(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(LoanerConfirmHandler)]
    PROCEDURE ServiceItemLog@32();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      Loaner@1007 : Record 5913;
      ServLoanerManagement@1000 : Codeunit 5901;
    BEGIN
      // Covers document number TC1.5 - refer to TFS ID 21648
      // Check Service Item Log Entry after Receive Loaner.

      // 1. Setup: Create Service Item, Service Order with Header and Service Item Line. Modify Service Item Line with Loaner No. and
      // create Service Line with Type Resource.
      Initialize;
      LibraryService.CreateLoaner(Loaner);
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      ServiceItemLine.VALIDATE("Loaner No.",Loaner."No.");
      ServiceItemLine.MODIFY(TRUE);
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Receive Loaner on Service Item Line.
      ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      ServLoanerManagement.ReceiveLoaner(ServiceItemLine);

      // 3. Verify: Check the Service Item Log entry after Receive Loaner.
      VerifyServiceItemLogEntry(ServiceItemLine);
    END;

    [Test]
    PROCEDURE ServiceDeletionAfterPosting@35();
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // Covers document number TC1.6 - refer to TFS ID 21648
      // Service Order must not exist after ship and Invoice.

      // 1. Setup: Create Service Item, Service Order with Header and Service Item Line, Service Line with Type Resource.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Check Service Order must not Exist after Post as Ship and Invoice.
      Assert.IsFalse(ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No."),ServiceOrderError);
    END;

    [Test]
    PROCEDURE PostingServiceShipment@10();
    VAR
      ServiceLine@1006 : Record 5902;
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      ServiceShipmentHeader@1000 : Record 5990;
      ServiceDocumentLog@1007 : Record 5912;
      ServiceShipment@1004 : Report 5913;
      FilePath@1002 : Text[1024];
    BEGIN
      // Covers document number TC01115,TC01116,TC01117,TC01118,TC01119 and TC01120 - refer to TFS ID 21649
      // TC01115: Check that Created Service Order saved in XML and XLSX format with report Service Shipment.
      // TC01116: Check that Warranty Ledger Entry Created after Service Order Post as Ship.
      // TC01117: Check that Service Shipment Line Created after Service Order Post as Ship.
      // TC01118: Check Service Document Log Event after Service Order Post as Ship.
      // TC01119: Check Posted Document Dimensions is same after Service Order Post as Ship.
      // TC01120: Check Service Ledger entry and Warranty Ledger Entry for Posted Shipment.

      // 1. Setup: Create Service Item, Service Order with Header and Service Item Line, Service Line with Type Item.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Post Service Order as Ship.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipment.SETTABLEVIEW(ServiceShipmentHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceHeader."Document Type") + ServiceShipmentHeader."No." + '.xlsx';
      ServiceShipment.SAVEASEXCEL(FilePath);

      // 3. Verify: Check Service Ledger Entry, Warranty Ledger Entry, Service Shipment Line, Service Document Log Event, Document
      // Dimension for Posted Shipment and Save Service Shipment Report with XML and XLSX format also verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
      VerifyServiceLedgerEntry(ServiceLine);
      VerifyWarrantyLedgerEntry(ServiceLine);
      VerifyServiceShipmentLine(ServiceLine);
      VerifyServiceDocumentLogEvent(ServiceHeader."No.",ServiceDocumentLog."Document Type"::Order,1);
      VerifyDocumentDimension(ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE PostingServiceInvoice@21();
    VAR
      ServiceLine@1006 : Record 5902;
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      ServiceInvoiceHeader@1007 : Record 5992;
      ServiceDocumentLog@1008 : Record 5912;
      ServiceInvoice@1004 : Report 5911;
      FilePath@1002 : Text[1024];
    BEGIN
      // Covers document number TC01123, TC01124 and TC01126 - refer to TFS ID 21650.
      // TC01123: Check that Created Service Invoice Header saved in XML and XLSX format with report Service Invoice.
      // TC01124: Check that Service Document Log Created after Service Order Post as Ship and Invoice.
      // TC01126: Check that G/L Entry, VAT Entry, Cust. Ledger Entry, Res. Ledger Entry and Service Ledger Entry created after
      // Posting Service Order as Ship and Invoice.

      // 1. Setup: Create Service Item, Service Order with Header, Service Item Line, Service Line with Type Resource and Update Partial Qty. to Ship on Service Line.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");
      UpdatePartialQtyToShip(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship and Invoice, Save Service Invoice Report as XML and XLSX in local Temp folder.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      FindServiceInvoiceHeader(ServiceInvoiceHeader,ServiceHeader."No.");
      ServiceInvoice.SETTABLEVIEW(ServiceInvoiceHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceInvoiceHeader."No.") + ServiceInvoiceHeader."Order No." + '.xlsx';
      ServiceInvoice.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify that Saved files have some data, Service Document log, G/L Entry, VAT Entry, Customer Ledger Entry, Resource Ledger Entry and Service Ledger Entry.
      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      LibraryUtility.CheckFileNotEmpty(FilePath);
      VerifyServiceDocumentLogEvent(ServiceInvoiceHeader."No.",ServiceDocumentLog."Document Type"::"Posted Invoice",9);
      VerifyGLEntry(ServiceInvoiceHeader);
      VerifyCustomerLedgerEntry(ServiceInvoiceHeader);
      VerifyResourceLedgerEntry(ServiceInvoiceHeader);
      VerifyServiceLedgerEntry(ServiceLine);
    END;

    [Test]
    PROCEDURE ItemShipmentLineResourceError@73();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1009 : Record 5940;
    BEGIN
      // Covers document number TC01123 - refer to TFS ID 21650.
      // Check that on Selection of Item Shipment Line with Type Resource on Posted Service Invoice application generates an error.

      // 1. Setup: Create Service Item, Service Order with Header, Service Item Line, Service Line with Type Resource.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceLineWithResource(ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Type must be Item" on open Item Shipment Line of Type resource.
      VerifyShipmentLineError(ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE ServiceWarrantyShipAndInvoice@25();
    VAR
      ServiceLine@1006 : Record 5902;
      ServiceItem@1003 : Record 5940;
      ServiceItemLine@1000 : Record 5901;
      ServiceHeader@1001 : Record 5900;
      TempServiceLine@1002 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC001 refer to TFS ID 158079.
      // Test that Warranty Ledger Entry is correctly created on Posting of Service Order with Ship and Invoice Option.

      // 1. Setup: Create Service Item, Service Order - Service Header, Service Item Line and Service Line with Type Item.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      CopyServiceLines(ServiceLine,TempServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Check Warranty Ledger Entry is created correctly.
      VerifyWarrantyLedgerFullPost(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(FormHandlerGetShipment)]
    PROCEDURE ServiceInvoiceGetShipment@31();
    VAR
      ServiceLine@1003 : Record 5902;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1001 : Record 5901;
      ServiceHeader@1000 : Record 5900;
      ServiceGetShipment@1004 : Codeunit 5932;
    BEGIN
      // Covers document number TC001 refer to TFS ID 158079.
      // Test the Get Shipment Functionality on Service Invoice.

      // 1. Setup: Create Service Order. Create Service Line with Item.
      Initialize;
      CreateServiceOrder(ServiceHeader,ServiceItem,ServiceItemLine);
      CreateServiceLineWithItem(ServiceLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Post Service Order as Ship. Create Service Invoice. Perform Get Shipment Lines on Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      OrderNo := ServiceHeader."No.";

      CLEAR(ServiceHeader);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ServiceLine."Customer No.");
      InvoiceNo := ServiceHeader."No.";

      CLEAR(ServiceLine);
      ServiceLine."Document Type" := ServiceHeader."Document Type";
      ServiceLine."Document No." := ServiceHeader."No.";
      ServiceGetShipment.RUN(ServiceLine);

      // 3. Verify: Service Lines are correcly inserted into Invoice on Get Shipment Line.
      VerifyGetShipmentLines(OrderNo,ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderDiscounts@34();
    VAR
      Customer@1002 : Record 18;
      CustInvoiceDisc@1001 : Record 19;
      Item@1004 : Record 27;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      TempServiceLine@1011 : TEMPORARY Record 5902;
      ServiceCalcDisc@1000 : Codeunit 5950;
      ServiceItemNo@1013 : Code[20];
      ServiceLines@1500000 : Record 5902;
      GeneralPostingSetup@1500001 : Record 252;
    BEGIN
      // Covers document number TC001 refer to TFS ID 158079.
      // Test that Service Order Line Discount and Invoice Discounts are correctlty transfered to invoice on Posting of Service Order.

      // 1. Setup: Create Customer, Define Line Discount and Invoice Discount.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      CreateCustomerLineDiscount(Item,Customer."No.");
      CreateCustomerInvoiceDiscount(CustInvoiceDisc,Customer."No.",0,0);

      // 2. Exercise: Create Service Order, Calculate Invoice Discount. Post the Service Order as Ship and Invoice.
      ServiceItemNo := CreateServiceDocument(ServiceHeader,Customer."No.",Item."No.");
      UpdateServiceLine(ServiceLine,ServiceHeader."No.",ServiceItemNo,ServiceHeader."Posting Date");
      ServiceCalcDisc.RUN(ServiceLine);

      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      CopyServiceLines(ServiceLine,TempServiceLine);
      LibraryERM.CreateGenPostSetup(ServiceLine."Gen. Bus. Posting Group",ServiceLine."Gen. Prod. Posting Group");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Service Discounts are correctly transfered to Invoice.
      VerifyServiceInvoice(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(FormHandlerGetShipment)]
    PROCEDURE ServiceLineInvoiceWOItem@49();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number TC_PP_GSL_4_1, TC_PP_GSL_2_1 - refer to TFS ID 167960.
      // Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type Item fully and Other lines partly.

      ServiceInvoice(ServiceLine.Type::Item);
    END;

    [Test]
    [HandlerFunctions(FormHandlerGetShipment)]
    PROCEDURE ServiceLineInvoiceWOResource@48();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number TC_PP_GSL_4_2 - refer to TFS ID 167960.
      // Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type Resource fully and Other lines partly.

      ServiceInvoice(ServiceLine.Type::Resource);
    END;

    [Test]
    [HandlerFunctions(FormHandlerGetShipment)]
    PROCEDURE ServiceLineInvoiceWOCost@47();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number TC_PP_GSL_4_3 - refer to TFS ID 167960.
      // Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type Cost fully and Other lines partly.

      ServiceInvoice(ServiceLine.Type::Cost);
    END;

    [Test]
    [HandlerFunctions(FormHandlerGetShipment)]
    PROCEDURE ServiceLineInvoiceWOGLAccount@46();
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Covers document number TC_PP_GSL_4_4, TC_PP_GSL_2_4 - refer to TFS ID 167960.
      // Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type G/L Account fully and Other lines partly.

      ServiceInvoice(ServiceLine.Type::"G/L Account");
    END;

    LOCAL PROCEDURE ServiceInvoice@44(Type@1003 : Option);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceGetShipment@1004 : Codeunit 5932;
      CustomerNo@1002 : Code[20];
    BEGIN
      // 1. Setup: Create and Post Service Order with Service Line of Type Item, Resoure, Cost and G/L Account.
      Initialize;
      CreateServiceOrderWithLines(ServiceHeader);
      UpdateFullQtyToInvoice(ServiceHeader,Type);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      OrderNo := ServiceHeader."No.";  // Assign Global Variable for form handler.
      CustomerNo := ServiceHeader."Customer No.";

      // 2. Exercise: Create Service Invoice from Get Shipment Lines.
      CLEAR(ServiceHeader);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,CustomerNo);
      InvoiceNo := ServiceHeader."No.";  // Assign Global Variable for form handler.
      ServiceLine."Document Type" := ServiceHeader."Document Type";
      ServiceLine."Document No." := ServiceHeader."No.";
      ServiceGetShipment.RUN(ServiceLine);

      // 3. Verify: Verify Service Lines on Created Service Invoice.
      VerifyServiceLineForInvoice(OrderNo,ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE ExtendedTextOnServiceInvoiceLine@65();
    VAR
      Item@1007 : Record 27;
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1004 : Record 5902;
      TransferExtendedText@1000 : Codeunit 378;
      Description@1001 : Text[50];
    BEGIN
      // Check Extended Text on Service Invoice Line after posting Service Order with Extended Text on Service Line.

      // 1. Setup: Create Item, Extended Text for Item, Create Service Order and Insert Extended Text on Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Description := CreateExtendedTextForItem(Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomer);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateAndUpdateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.",ServiceItemLine."Line No.");
      TransferExtendedText.ServCheckIfAnyExtText(ServiceLine,TRUE);
      TransferExtendedText.InsertServExtText(ServiceLine);

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Extended Text on Service Invoice Line.
      VerifyExtendedText(ServiceHeader."No.",Description);
    END;

    [Test]
    PROCEDURE PostingDateOnUnpostedServiceLine@64();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1004 : Record 5902;
      NewPostingDate@1000 : Date;
    BEGIN
      // Check that Posting Date updates correctly on Service Line after updating it on Service Order.

      // 1. Setup.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomer);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateAndUpdateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem,ServiceItemLine."Line No.");

      // 2. Exercise: Update Posting Date on Service Order Header after creating Service Line.
      UpdatePostingDateOnServiceHeader(NewPostingDate,ServiceHeader);

      // 3. Verify: Verify that updated Posting Date reflected correctly on Service Line.
      ServiceLine.GET(ServiceHeader."Document Type",ServiceHeader."No.",ServiceLine."Line No.");
      ServiceLine.TESTFIELD("Posting Date",NewPostingDate);
    END;

    [Test]
    PROCEDURE PostingDateOnPostedServiceDocuments@62();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1004 : Record 5902;
      NewPostingDate@1000 : Date;
      Counter@1001 : Integer;
    BEGIN
      // Check that correct Posting Date is updated on Service Invoice Lines and on Service Shipment Lines after posting Service Order with updated Posting Date.

      // 1. Setup: Create Service Order with multiple Service Lines using Random.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomer);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(5) DO
        CreateAndUpdateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem,ServiceItemLine."Line No.");
      UpdatePostingDateOnServiceHeader(NewPostingDate,ServiceHeader);

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Posting Date on Service Invoice and Service Shipment Lines after Posting Service Order as Ship and Invoice.
      VerifyPostingDateOnServiceInvoice(ServiceHeader."No.",NewPostingDate);
      VerifyPostingDateOnServiceShipment(ServiceHeader."No.",NewPostingDate);
    END;

    [Test]
    [HandlerFunctions(ServiceLinesPageHandler,StrMenuHandler)]
    PROCEDURE PostServiceLineForServiceOrder@69();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItem@1001 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Check that Service Order still exist after Posting Service Line for first Service Item Line.

      // 1. Setup: Create Service Order with Two Service Item Lines and One Service Line.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,CreateCustomer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateAndUpdateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem,ServiceItemLine."Line No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Open Service Lines Page for first Service Line and Post Service Line using Page Handler.
      OpenServiceLinePage(ServiceHeader."No.");

      // 3. Verify: Verify that Service Order still exists after posting Service Line for first Service Item Line.
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE BlankLineForServiceOrder@71();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItem@1003 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1004 : Record 5902;
      ServiceShipmentLine@1006 : Record 5991;
      ServiceInvoiceLine@1007 : Record 5993;
      ServiceLineCount@1001 : Integer;
    BEGIN
      // Check that text line on posted Service Documents exists after posting Service Order if it contains Type=Item and No=blank with some value on Description field.

      // 1. Setup: Create Service Order with 2 Service Lines, one contains Some Item and other is having Blank Item No. with Description.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomer);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateAndUpdateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem,ServiceItemLine."Line No.");
      CreateServiceLineWithDescriptionOnly(ServiceHeader,ServiceItemLine."Line No.");
      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      ServiceLineCount := ServiceLine.COUNT;

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify that Blank Line included in Posted Service Documents.
      FindServiceShipmentLine(ServiceShipmentLine,ServiceHeader."No.");
      FindServiceInvoiceLine(ServiceInvoiceLine,ServiceHeader."No.");
      Assert.AreEqual(
        ServiceLineCount,ServiceShipmentLine.COUNT,STRSUBSTNO(CountError,ServiceLineCount,ServiceShipmentLine.TABLECAPTION));
      Assert.AreEqual(
        ServiceLineCount,ServiceInvoiceLine.COUNT,STRSUBSTNO(CountError,ServiceLineCount,ServiceInvoiceLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CalculateServiceOrderInvoiceDiscountTwice@80();
    VAR
      CustInvoiceDisc@1001 : ARRAY [2] OF Record 19;
      ServiceHeader@1004 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ChargeServiceLine@1006 : Record 5902;
      CustomerNo@1000 : Code[20];
      ServiceItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Discount] [Service Charge]
      // [SCENARIO 216154] Service Order's service charge is not changed after running Calculate Invoice Discount twice
      Initialize;

      // [GIVEN] Sales & Receivables Setup "Calc. Inv. Discount" = FALSE
      LibrarySales.SetCalcInvDiscount(FALSE);
      // [GIVEN] Customer with Invoice Discount setup:
      // [GIVEN] Line1: Minimum Amount = 0, Discount % = 10, Service Charge = 25
      // [GIVEN] Line1: Minimum Amount = 100, Discount % = 20, Service Charge = 50
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateCustomerInvoiceDiscount(CustInvoiceDisc[1],CustomerNo,0,LibraryRandom.RandDecInRange(1000,2000,2));
      CreateCustomerInvoiceDiscount(
        CustInvoiceDisc[2],CustomerNo,LibraryRandom.RandDecInRange(1000,2000,2),LibraryRandom.RandDecInRange(1000,2000,2));

      // [GIVEN] Service Order with Item Service Line
      ServiceItemNo := CreateServiceDocument(ServiceHeader,CustomerNo,LibraryInventory.CreateItemNo);
      // [GIVEN] Service Line with Item, "Unit Price" = 99.99
      UpdateServiceLineCustomValues(
        ServiceLine,ServiceHeader."No.",ServiceItemNo,1,CustInvoiceDisc[2]."Minimum Amount" - LibraryERM.GetAmountRoundingPrecision);

      // [GIVEN] Calculate Invoice Discount for Service Line
      VerifyServiceLineInvDiscAmount(ServiceLine,0);
      RunServiceCalcDiscount(ServiceLine);

      // [GIVEN] Invoice Discount Amount = 10
      VerifyServiceLineInvDiscAmount(
        ServiceLine,ROUND(ServiceLine."Unit Price" * ServiceLine.Quantity * CustInvoiceDisc[1]."Discount %" / 100));

      // [GIVEN] Service Charge line has been created with Amount = 25 and "Inv. Discount Amount" = 0
      GetGLServiceLines(ChargeServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      ChargeServiceLine.TESTFIELD(Amount,CustInvoiceDisc[1]."Service Charge");
      ChargeServiceLine.TESTFIELD("Inv. Discount Amount",0);

      // [WHEN] Calculate Invoice Discount again for Service Line
      RunServiceCalcDiscount(ServiceLine);

      // [THEN] Invoice Discount Amount = 10
      VerifyServiceLineInvDiscAmount(
        ServiceLine,ROUND(ServiceLine."Unit Price" * ServiceLine.Quantity * CustInvoiceDisc[1]."Discount %" / 100));

      // [THEN] Service Charge remains Amount = 25 (and "Inv. Discount Amount" = 0) after recalculating Invoice Discount
      ChargeServiceLine.FIND;
      ChargeServiceLine.TESTFIELD(Amount,CustInvoiceDisc[1]."Service Charge");
    END;

    [Test]
    PROCEDURE ServiceOrderInvoiceDiscountAfterPosting@68();
    VAR
      Customer@1005 : Record 18;
      CustInvoiceDisc@1004 : Record 19;
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      Item@1001 : Record 27;
      TempServiceLine@1006 : TEMPORARY Record 5902;
      ServiceItemNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Discount] [Service Charge]
      // [SCENARIO] Invoice Discount after running Calculate Invoice Discount twice before Posting Service Order
      Initialize;

      // [GIVEN] Sales & Receivables Setup "Calc. Inv. Discount" = FALSE
      LibrarySales.SetCalcInvDiscount(FALSE);
      // [GIVEN] Customer with Invoice Discount
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      CreateCustomerInvoiceDiscount(CustInvoiceDisc,Customer."No.",0,LibraryRandom.RandDecInRange(1000,2000,2));
      // [GIVEN] Service Order
      ServiceItemNo := CreateServiceDocument(ServiceHeader,Customer."No.",Item."No.");
      UpdateServiceLine(ServiceLine,ServiceHeader."No.",ServiceItemNo,ServiceHeader."Posting Date");
      // [GIVEN] Calculate Invoice Discount for Service Line twice
      VerifyServiceLineInvDiscAmount(ServiceLine,0);
      RunServiceCalcDiscount(ServiceLine);
      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      RunServiceCalcDiscount(ServiceLine);
      CopyServiceLines(ServiceLine,TempServiceLine);

      // [WHEN] Post the Service Order
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Discount Entries are correct in GL Entry and Service Invoice
      VerifyGLEntries(TempServiceLine,CustInvoiceDisc,Customer."Customer Posting Group");
      VerifyServiceInvoice(TempServiceLine);
    END;

    [Test]
    PROCEDURE CalcServOrderInvDiscWithEmptyServiceItemAndWithoutServiceCharge@78();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1004 : Record 5902;
      CustInvoiceDisc@1001 : Record 19;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 216154] Service Order's invoice discount is calculated after running Calculate Invoice Discount
      // [SCENARIO 216154] in case of Service Charge = 0, "Service Item No." = ""
      Initialize;

      // [GIVEN] Sales & Receivables Setup "Calc. Inv. Discount" = FALSE
      LibrarySales.SetCalcInvDiscount(FALSE);
      // [GIVEN] Customer with Invoice Discount setup: Minimum Amount = 0, Discount % = 10, Service Charge = 0
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateCustomerInvoiceDiscount(CustInvoiceDisc,CustomerNo,0,0);

      // [GIVEN] Service Order with Item Service Line having "Service Item No." = "", "Item No." = "X"
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);

      // [GIVEN] Service Line for Item "X":  "Service Item No." = "", "No." = "X", "Unit Price" = 100
      UpdateServiceLine(ServiceLine,ServiceHeader."No.",'',WORKDATE);

      // [WHEN] Calculate Invoice Discount for Service Line
      VerifyServiceLineInvDiscAmount(ServiceLine,0);
      RunServiceCalcDiscount(ServiceLine);

      // [THEN] Invoice Discount Amount = 10
      VerifyServiceLineInvDiscAmount(
        ServiceLine,ROUND(ServiceLine."Unit Price" * ServiceLine.Quantity * CustInvoiceDisc."Discount %" / 100));
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ItemsOnServItemWorkSheetWithAscending@107();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Item using Ascending sorting while deleting the contract No on Service Item line.
      ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ItemsOnServItemWorkSheetWithDecending@106();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Item using descending sorting while deleting the contract No on service Item line.
      ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE GLAccountsOnServItemWorkSheetWithAscending@105();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Ascending sorting while deleting the contract No on service Item line.
      ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE GLAccountsOnServItemWorkSheetWithDecending@104();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Descending sorting while deleting the contract No on service Item line.
      ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ResourcesOnServItemWorkSheetWithAscending@103();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Resource using Ascending sorting while deleting the contract No on service Item line.
      ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ResourcesOnServiceItemWorkSheetLinesWithDecending@102();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Resource using Decending sorting while deleting the contract No on service Item line.
      ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,FALSE);
    END;

    LOCAL PROCEDURE ServItemWorkSheetAfterDeletingContractNoOnServiceItemLine@101(Type@1009 : Option;FirstItem@1015 : Code[20];SecondItem@1016 : Code[20];Value@1017 : Boolean);
    VAR
      ServiceContractHeader@1007 : Record 5965;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1010 : ARRAY [10] OF Record 5902;
      Counter@1002 : Integer;
    BEGIN
      // Setup: Create Service Header with Signed Contract Service Item No. and Sort Service Item Line.
      Initialize;
      CreateServiceHeaderWithServiceItemLine(ServiceHeader,ServiceItemLine,
        CreateAndSignServiceContract(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract),
        ServiceContractHeader."Customer No.");
      CreateAndUpdateServiceLine(ServiceLine[1],ServiceHeader,Type,SecondItem,ServiceItemLine."Line No.");
      CreateAndUpdateServiceLine(ServiceLine[2],ServiceHeader,Type,FirstItem,ServiceItemLine."Line No.");
      ServiceItemLine.ASCENDING(Value);

      // Exercise: Delete Contract No. On Service Item Line.
      UpdateContractNoInServiceItemLine(ServiceItemLine,'');

      // Verify: Verify No. exist with Quantity on Service Lines.
      FOR Counter := 1 TO 2 DO
        VerifyValuesOnServiceLines(ServiceHeader,ServiceLine[Counter]."No.",ServiceLine[Counter].Quantity);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ServItemWorkSheetAscendingWithItemAfterInsertingContractNo@99();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Item using Ascending sorting while Inserting the contract No on service Item line.
      ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ServItemWorkSheetDecendingWithItemAfterInsertingContractNo@98();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Item using Decending sorting while Inserting the contract No on service Item line.
      ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ServItemWorkSheetAscendingWithGLAccountAfterInsertingContractNo@97();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Ascending sorting while Inserting the contract No on service Item line.
      ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ServItemWorkSheetDecendingWithGLAccountAfterInsertingContractNo@96();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Decending sorting while Inserting the contract No on service Item line.
      ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ServItemWorkSheetAscendingWithResourceAfterInsertingContractNo@95();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Resource using Ascending sorting while Inserting the contract No on service Item line.
      ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ServItemWorkSheetDecendingWithResourceAfterInsertingContractNo@94();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service Item Worksheet lines for Type Resource using Decending sorting while Inserting the contract No on service Item line.
      ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,FALSE);
    END;

    LOCAL PROCEDURE ServItemWorkSheetAfterInsertingContractNoOnServiceItemLine@93(Type@1009 : Option;FirstItem@1015 : Code[20];SecondItem@1016 : Code[20];Value@1017 : Boolean);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceContractHeader@1007 : Record 5965;
      ServiceLine@1010 : ARRAY [2] OF Record 5902;
      Counter@1001 : Integer;
    BEGIN
      // Setup: Create Service Header with Signed Contract Service Item No. and Sort Service Item Lines.
      Initialize;
      CreateServiceHeaderWithServiceItemLine(ServiceHeader,ServiceItemLine,
        CreateAndSignServiceContract(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract),
        ServiceContractHeader."Customer No.");
      CreateAndUpdateServiceLine(ServiceLine[1],ServiceHeader,Type,SecondItem,ServiceItemLine."Line No.");
      CreateAndUpdateServiceLine(ServiceLine[2],ServiceHeader,Type,FirstItem,ServiceItemLine."Line No.");
      ServiceItemLine.ASCENDING(Value);
      UpdateContractNoInServiceItemLine(ServiceItemLine,'');

      // Exercise: Insert Contract No. On Service Item Line.
      UpdateContractNoInServiceItemLine(ServiceItemLine,ServiceContractHeader."Contract No.");

      // Verify: Verify No. exist with Quantity on Service Lines.
      FOR Counter := 1 TO 2 DO
        VerifyValuesOnServiceLines(ServiceHeader,ServiceLine[Counter]."No.",ServiceLine[Counter].Quantity);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ItemsOnServiceLinesWithAscending@92();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Item using Ascending sorting while Deleting the contract No on service Item line.
      ServiceLinesAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ItemsOnServiceLinesWithDecending@91();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Item using Decending sorting while Deleting the contract No on service Item line.
      ServiceLinesAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE GLAccountsOnServiceLinesWithAscending@90();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type G/L Account using Ascending sorting while Deleting the contract No on service Item line.
      ServiceLinesAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE GLAccountsOnServiceLinesWithDecending@88();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type G/L Account using Decending sorting while Deleting the contract No on service Item line.
      ServiceLinesAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ResourcesOnServiceLinesWithAscending@87();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Resource using Ascending sorting while Deleting the contract No on service Item line.
      ServiceLinesAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ResourcesOnServiceLinesWithDecending@85();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Resource using Decending sorting while Deleting the contract No on service Item line.
      ServiceLinesAfterDeletingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,FALSE);
    END;

    LOCAL PROCEDURE ServiceLinesAfterDeletingContractNoOnServiceItemLine@83(Type@1009 : Option;FirstItem@1015 : Code[20];SecondItem@1016 : Code[20];Value@1017 : Boolean);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceContractHeader@1007 : Record 5965;
      ServiceLine@1010 : ARRAY [2] OF Record 5902;
      Counter@1000 : Integer;
    BEGIN
      // Setup: Create Service Header with Signed Contract Service Item No. and Sort Service Lines.
      Initialize;
      CreateServiceHeaderWithServiceItemLine(ServiceHeader,ServiceItemLine,
        CreateAndSignServiceContract(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract),
        ServiceContractHeader."Customer No.");
      CreateAndUpdateServiceLine(ServiceLine[1],ServiceHeader,Type,SecondItem,ServiceItemLine."Line No.");
      CreateAndUpdateServiceLine(ServiceLine[2],ServiceHeader,Type,FirstItem,ServiceItemLine."Line No.");
      ServiceLine[1].ASCENDING(Value);

      // Exercise: Delete Contract No. On Service Item Line.
      UpdateContractNoInServiceItemLine(ServiceItemLine,'');

      // Verify: Verify No. exist with Quantity on Service Lines.
      FOR Counter := 1 TO 2 DO
        VerifyValuesOnServiceLines(ServiceHeader,ServiceLine[Counter]."No.",ServiceLine[Counter].Quantity);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ItemsOnServiceLinesWithAscendingAfterInsertingContractNo@116();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Item using Ascending sorting while Inserting the contract No on Service Item line.
      ServiceLinesAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ItemsOnServiceLinesWithDecendingAfterInsertingContractNo@115();
    VAR
      SecondServiceLineItem@1001 : Record 27;
      FirstServiceLineItem@1002 : Record 27;
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Item using Decending sorting while Inserting the contract No on service Item line.
      ServiceLinesAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Item,
        LibraryInventory.CreateItem(SecondServiceLineItem),LibraryInventory.CreateItem(FirstServiceLineItem),FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE GLAccountsOnServiceLinesWithAscendingAfterInsertingContractNo@114();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type G/L Account using Ascending sorting while Inserting the contract No on Service Item line.
      ServiceLinesAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE GLAccountsOnServiceLinesWithDecendingAfterInsertingContractNo@113();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type G/L Account using Decending sorting while Inserting the contract No on Service Item line.
      ServiceLinesAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountWithSalesSetup,FALSE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ResourceOnServiceLinesWithAscendingAfterInsertingContractNo@112();
    VAR
      ServiceLine@1010 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Resource using Ascending sorting while Inserting the contract No on Service Item line.
      ServiceLinesAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,TRUE);
    END;

    [Test]
    [HandlerFunctions(SignContractConfirmHandler,ServContrctTemplateListHandler,MessgeHandler)]
    PROCEDURE ResourcesOnServiceLinesWithDecendingAfterInsertingContractNo@111();
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Verify program does not messed up on Service lines for Type Resource using Decending sorting while Inserting the contract No on Service Item line.
      ServiceLinesAfterInsertingContractNoOnServiceItemLine(ServiceLine.Type::Resource,
        CreateResource,CreateResource,FALSE);
    END;

    LOCAL PROCEDURE ServiceLinesAfterInsertingContractNoOnServiceItemLine@118(Type@1009 : Option;FirstItem@1015 : Code[20];SecondItem@1016 : Code[20];Value@1017 : Boolean);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceContractHeader@1007 : Record 5965;
      ServiceLine@1010 : ARRAY [2] OF Record 5902;
      Counter@1000 : Integer;
    BEGIN
      // Setup: Create Service Header with Signed Contract Service Item No. and Sort Service Lines.
      Initialize;
      CreateServiceHeaderWithServiceItemLine(ServiceHeader,ServiceItemLine,
        CreateAndSignServiceContract(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract),
        ServiceContractHeader."Customer No.");
      CreateAndUpdateServiceLine(ServiceLine[1],ServiceHeader,Type,SecondItem,ServiceItemLine."Line No.");
      CreateAndUpdateServiceLine(ServiceLine[2],ServiceHeader,Type,FirstItem,ServiceItemLine."Line No.");
      ServiceLine[1].ASCENDING(Value);
      UpdateContractNoInServiceItemLine(ServiceItemLine,'');

      // Exercise: Insert Contract No. On Service Item Line.
      UpdateContractNoInServiceItemLine(ServiceItemLine,ServiceContractHeader."Contract No.");

      // Verify: Verify No. exist with Quantity on Service Lines.
      FOR Counter := 1 TO 2 DO
        VerifyValuesOnServiceLines(ServiceHeader,ServiceLine[Counter]."No.",ServiceLine[Counter].Quantity);
    END;

    [Test]
    PROCEDURE PostServiceOrderWithUpdatingPostingDateOfServiceLine@122();
    VAR
      Customer@1002 : Record 18;
      Item@1004 : Record 27;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceItemNo@1013 : Code[20];
    BEGIN
      // Setup: Create Customer and Item. Create Service Order and update the Posting Date of Service Line.
      // Posting Date should be different from Service Order Header Posting Date.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      ServiceItemNo := CreateServiceDocument(ServiceHeader,Customer."No.",Item."No.");
      UpdateServiceLine(
        ServiceLine,ServiceHeader."No.",ServiceItemNo,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',ServiceHeader."Posting Date"));

      // Exercise: Post the Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // Verify: Verify Posting Date of Value Entry.
      VerifyPostingDateOfValueEntry(Item."No.",ServiceHeader."Posting Date");
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(LibraryService);
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      // Setup demonstration data
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInServiceCosts;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryService.SetupServiceMgtNoSeries;
      UpdateInventorySetup;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CopyServiceLines@29(VAR FromServiceLine@1000 : Record 5902;VAR ToTempServiceLine@1001 : TEMPORARY Record 5902);
    BEGIN
      FromServiceLine.FINDSET;
      REPEAT
        ToTempServiceLine.INIT;
        ToTempServiceLine := FromServiceLine;
        ToTempServiceLine.INSERT;
      UNTIL FromServiceLine.NEXT = 0
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@165(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1003 : Record 5900;Type@1004 : Option;ItemNo@1002 : Code[20];ServiceItemLineNo@1000 : Integer);
    BEGIN
      // Take Random Quantity and Unit Price.
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,ItemNo);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerLineDiscount@41(Item@1002 : Record 27;CustomerNo@1003 : Code[20]);
    VAR
      SalesLineDiscount@1001 : Record 7004;
    BEGIN
      // Use Random because value is not important.
      LibraryERM.CreateLineDiscForCustomer(
        SalesLineDiscount,SalesLineDiscount.Type::Item,Item."No.",SalesLineDiscount."Sales Type"::Customer,CustomerNo,WORKDATE,'','',
        Item."Base Unit of Measure",LibraryRandom.RandInt(10));
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerInvoiceDiscount@55(VAR CustInvoiceDisc@1001 : Record 19;CustomerNo@1003 : Code[20];MinimumAmount@1000 : Decimal;ServiceCharge@1002 : Decimal);
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',MinimumAmount);
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandIntInRange(10,20));
      CustInvoiceDisc.VALIDATE("Service Charge",ServiceCharge);
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionOnCustomer@36(Customer@1000 : Record 18);
    VAR
      DefaultDimension@1001 : Record 352;
      DimensionValue@1003 : Record 349;
      Dimension@1005 : Record 348;
      LibraryDimension@1002 : Codeunit 131001;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",DATABASE::Customer);
      DefaultDimension.SETRANGE("No.",Customer."No.");
      IF DefaultDimension.FINDFIRST THEN
        EXIT;

      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateExtendedTextForItem@61(ItemNo@1002 : Code[20]) : Text[50];
    VAR
      ExtendedTextHeader@1001 : Record 279;
      ExtendedTextLine@1000 : Record 280;
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,ItemNo);
      ExtendedTextHeader.VALIDATE("Starting Date",WORKDATE);
      ExtendedTextHeader.VALIDATE("All Language Codes",TRUE);
      ExtendedTextHeader.MODIFY(TRUE);

      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,LibraryUtility.GenerateRandomCode(ExtendedTextLine.FIELDNO(Text),DATABASE::"Extended Text Line"));
      ExtendedTextLine.MODIFY(TRUE);
      EXIT(ExtendedTextLine.Text);
    END;

    LOCAL PROCEDURE CreateResource@81() : Code[20];
    BEGIN
      EXIT(LibraryResource.CreateResourceNo);
    END;

    LOCAL PROCEDURE CreateServiceDocument@70(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20];ItemNo@1005 : Code[20]) ServiceItemNo : Code[20];
    VAR
      ServiceItem@1002 : Record 5940;
      ServiceLine@1004 : Record 5902;
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      // Create Service Order - Service Header, Service Item Line, Service Line of Type Item.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItemNo := ServiceItem."No.";
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithServiceItemLine@117(VAR ServiceHeader@1000 : Record 5900;VAR ServiceItemLine@1001 : Record 5901;ServiceItemNo@1003 : Code[20];CustomerNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
    END;

    LOCAL PROCEDURE CreateServiceLineWithDescriptionOnly@77(ServiceHeader@1000 : Record 5900;ServiceItemLineNo@1001 : Integer);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::" ",'');
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Description,ServiceHeader."No.");  // Enter Service Order No. for Description, Value is not important for test.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithItem@22(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItemNo@1002 : Code[20]);
    VAR
      Counter@1004 : Integer;
    BEGIN
      // Create 2 to 10 Service Lines with Type Item - Boundary 2 is important.
      FOR Counter := 2 TO 2 + LibraryRandom.RandInt(8) DO BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,CreateItem);
        ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
        ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(100));  // Required field - value is not important to test case.
        ServiceLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceLineWithResource@8(ServiceHeader@1002 : Record 5900;ServiceItemNo@1001 : Code[20]);
    VAR
      ServiceLine@1003 : Record 5902;
      LibraryResource@1005 : Codeunit 130511;
      Counter@1004 : Integer;
      ResourceNo@1000 : Code[20];
    BEGIN
      // Create 2 to 10 Service Lines with Type Resource - Boundary 2 is important.
      ResourceNo := LibraryResource.CreateResourceNo;
      FOR Counter := 2 TO 2 + LibraryRandom.RandInt(8) DO BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo);
        ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
        ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(100));  // Required field - value is not important to test case.
        ServiceLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceOrder@2(VAR ServiceHeader@1003 : Record 5900;VAR ServiceItem@1001 : Record 5940;VAR ServiceItemLine@1002 : Record 5901);
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Create Service Item, Service Header and Service Item Line.
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionOnCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      ServiceItem.VALIDATE("Warranty Starting Date (Parts)",WORKDATE);
      ServiceItem.VALIDATE("Warranty Ending Date (Parts)",WORKDATE);
      ServiceItem.VALIDATE("Warranty Starting Date (Labor)",WORKDATE);
      ServiceItem.VALIDATE("Warranty Ending Date (Labor)",WORKDATE);
      ServiceItem.MODIFY(TRUE);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithLines@50(VAR ServiceHeader@1000 : Record 5900);
    VAR
      Customer@1001 : Record 18;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      ServiceCost@1008 : Record 5905;
      LibraryResource@1009 : Codeunit 130511;
    BEGIN
      // Service Header, Service Item Line, Service Line with Type Item, Resource, Cost and G/L Account.
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.FindServiceCost(ServiceCost);
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Item,CreateItem,ServiceItemLine."Line No.");
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo,ServiceItemLine."Line No.");
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,ServiceItemLine."Line No.");
      CreateServiceLine(
        ServiceHeader,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceItemAndItemLine@9(VAR ServiceItem@1001 : Record 5940;VAR ServiceItemLine@1000 : Record 5901;ServiceHeader@1003 : Record 5900);
    BEGIN
      CLEAR(ServiceItem);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceLine@52(ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20];ServiceItemLineNo@1004 : Integer);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(100));  // Use Random because value is not important.
      ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSignServiceContract@108(VAR ServiceContractHeader@1003 : Record 5965;ContractType@1000 : Option) : Code[20];
    VAR
      ServiceContractLine@1001 : Record 5964;
      ServiceItem@1002 : Record 5940;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ContractType,CreateCustomer);
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Cost",1000 * LibraryRandom.RandInt(10));
      ServiceContractLine.VALIDATE("Line Value",1000 * LibraryRandom.RandInt(10));
      ServiceContractLine.VALIDATE("Service Period",ServiceContractHeader."Service Period");
      ServiceContractLine.MODIFY(TRUE);
      ModifyAnnualAmountOnServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      EXIT(ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@100() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE FindGLEntry@89(VAR GLEntry@1000 : Record 17;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateItem@60() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@67(VAR ServiceInvoiceHeader@1000 : Record 5992;OrderNo@1001 : Code[20]);
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceInvoiceLine@76(VAR ServiceInvoiceLine@1000 : Record 5993;OrderNo@1001 : Code[20]);
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
    BEGIN
      FindServiceInvoiceHeader(ServiceInvoiceHeader,OrderNo);
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindServiceShipmentLine@74(VAR ServiceShipmentLine@1000 : Record 5991;OrderNo@1001 : Code[20]);
    VAR
      ServiceShipmentHeader@1002 : Record 5990;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
    END;

    LOCAL PROCEDURE GetServiceLines@26(VAR ServiceLine@1000 : Record 5902;DocumentNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE GetGLServiceLines@136(VAR ServiceLine@1000 : Record 5902;DocumentNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,Type::"G/L Account");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE GetServiceLinesForShipment@51(VAR ServiceLine@1000 : Record 5902;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceLine.SETFILTER("Qty. to Invoice",'<>0');
      GetServiceLines(ServiceLine,DocumentNo,ServiceLine."Document Type"::Order);
    END;

    LOCAL PROCEDURE ModifyServiceItemLine@20(VAR ServiceItemLine@1000 : Record 5901);
    VAR
      FaultArea@1001 : Record 5915;
      FaultReasonCode@1002 : Record 5917;
      FaultCode@1004 : Record 5918;
      SymptomCode@1003 : Record 5916;
    BEGIN
      LibraryService.CreateFaultArea(FaultArea);
      LibraryService.CreateSymptomCode(SymptomCode);
      LibraryService.CreateFaultCode(FaultCode,FaultArea.Code,SymptomCode.Code);
      LibraryService.CreateFaultReasonCode(FaultReasonCode,TRUE,TRUE);
      ServiceItemLine.VALIDATE("Fault Reason Code",FaultReasonCode.Code);
      ServiceItemLine.VALIDATE("Fault Area Code",FaultCode."Fault Area Code");
      ServiceItemLine.VALIDATE("Symptom Code",FaultCode."Symptom Code");
      ServiceItemLine.VALIDATE("Fault Code",FaultCode.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyLoanerNoServiceItemLine@24(VAR ServiceItemLine@1001 : Record 5901);
    VAR
      Loaner@1002 : Record 5913;
    BEGIN
      Loaner.FINDSET;
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.FINDSET;
      REPEAT
        ServiceItemLine.VALIDATE("Loaner No.",Loaner."No.");
        ServiceItemLine.MODIFY(TRUE);
        Loaner.NEXT;
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ModifyAnnualAmountOnServiceContractHeader@110(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",ServiceContractHeader."Service Period");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenServiceLinePage@59(No@1000 : Code[20]);
    VAR
      ServiceOrder@1001 : TestPage 5900;
    BEGIN
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("No.",No);
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE ReceiveLoanerOnServiceItemLine@12(ServiceItemLine@1000 : Record 5901);
    VAR
      ServLoanerManagement@1001 : Codeunit 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.FINDSET;
      REPEAT
        ServLoanerManagement.ReceiveLoaner(ServiceItemLine);
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunServiceCalcDiscount@75(ServiceLine@1000 : Record 5902);
    VAR
      ServiceCalcDisc@1001 : Codeunit 5950;
    BEGIN
      CLEAR(ServiceCalcDisc);
      ServiceCalcDisc.RUN(ServiceLine);
    END;

    LOCAL PROCEDURE SaveServiceItemLineInTempTable@1(VAR TempServiceItemLine@1000 : TEMPORARY Record 5901;ServiceItemLine@1002 : Record 5901);
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.FINDSET;
      REPEAT
        TempServiceItemLine := ServiceItemLine;
        TempServiceItemLine.INSERT;
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFullQtyToInvoice@54(ServiceHeader@1001 : Record 5900;Type@1002 : Option);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE(Type,Type);
      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine.Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartialQtyToShip@134(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      GetServiceLines(ServiceLine,ServiceHeader."No.",ServiceHeader."Document Type");
      REPEAT
        ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePostingDateOnServiceHeader@66(VAR PostingDate@1001 : Date;ServiceHeader@1000 : Record 5900);
    BEGIN
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);  // Take a Random Date.
      ServiceHeader.VALIDATE("Posting Date",PostingDate);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLine@42(VAR ServiceLine@1002 : Record 5902;ServiceOrderNo@1004 : Code[20];ServiceItemNo@1000 : Code[20];PostingDate@1001 : Date);
    BEGIN
      GetServiceLines(ServiceLine,ServiceOrderNo,ServiceLine."Document Type"::Order);
      WITH ServiceLine DO BEGIN
        VALIDATE("Service Item No.",ServiceItemNo);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));  // Use Random because value is not important.
        VALIDATE("Unit Price",LibraryRandom.RandDecInRange(1000,2000,2));
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateServiceLineCustomValues@132(VAR ServiceLine@1002 : Record 5902;ServiceOrderNo@1004 : Code[20];ServiceItemNo@1001 : Code[20];NewQuantity@1000 : Decimal;UnitPrice@1003 : Decimal);
    BEGIN
      GetServiceLines(ServiceLine,ServiceOrderNo,ServiceLine."Document Type"::Order);
      WITH ServiceLine DO BEGIN
        VALIDATE("Service Item No.",ServiceItemNo);
        VALIDATE(Quantity,NewQuantity);
        VALIDATE("Unit Price",UnitPrice);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateContractNoInServiceItemLine@79(ServiceItemLine@1001 : Record 5901;ContractNo@1000 : Code[20]);
    BEGIN
      ServiceItemLine.VALIDATE("Contract No.",ContractNo);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAmountOnGLEntry@86(DocumentNo@1004 : Code[20];GLAccountNo@1000 : Code[20];Amount@1006 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@27(ServiceInvoiceHeader@1001 : Record 5992);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
    END;

    LOCAL PROCEDURE VerifyExtendedText@72(OrderNo@1000 : Code[20];Description@1001 : Text[50]);
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceInvoiceLine@1003 : Record 5993;
    BEGIN
      FindServiceInvoiceHeader(ServiceInvoiceHeader,OrderNo);
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.SETRANGE(Type,ServiceInvoiceLine.Type::" ");
      ServiceInvoiceLine.FINDFIRST;
      ServiceInvoiceLine.TESTFIELD(Description,Description);
    END;

    LOCAL PROCEDURE VerifyGetShipmentLines@33(ServiceOrderNo@1005 : Code[20];ServiceInvoiceNo@1003 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceLine2@1004 : Record 5902;
    BEGIN
      GetServiceLines(ServiceLine,ServiceOrderNo,ServiceLine."Document Type"::Order);
      REPEAT
        // Service Line added by 10000 as the first line has the Shipment No.
        ServiceLine2.GET(ServiceLine2."Document Type"::Invoice,ServiceInvoiceNo,ServiceLine."Line No." + 10000);
        ServiceLine2.TESTFIELD(Type,ServiceLine.Type);
        ServiceLine2.TESTFIELD("No.",ServiceLine."No.");
        ServiceLine2.TESTFIELD("Line Discount %",ServiceLine."Line Discount %");
        ServiceLine2.TESTFIELD("Warranty Disc. %",ServiceLine."Warranty Disc. %");
        ServiceLine2.TESTFIELD("Contract Disc. %",ServiceLine."Contract Disc. %");
        ServiceLine2.TESTFIELD("Line Discount Type",ServiceLine."Line Discount Type");
        ServiceLine2.TESTFIELD("Line Discount Amount",ServiceLine."Line Discount Amount");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntries@84(VAR TempServiceLine@1000 : TEMPORARY Record 5902;CustInvoiceDisc@1004 : Record 19;CustomerPostingGroupCode@1006 : Code[10]);
    VAR
      CustomerPostingGroup@1005 : Record 92;
      GeneralPostingSetup@1001 : Record 252;
      ServiceInvoiceHeader@1002 : Record 5992;
      Amount@1007 : Decimal;
    BEGIN
      CustomerPostingGroup.GET(CustomerPostingGroupCode);
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Item);
      TempServiceLine.FINDFIRST;
      Amount := ROUND(TempServiceLine."Line Discount Amount" + (TempServiceLine."Line Amount" * CustInvoiceDisc."Discount %" / 100));
      GeneralPostingSetup.GET(TempServiceLine."Gen. Bus. Posting Group",TempServiceLine."Gen. Prod. Posting Group");
      FindServiceInvoiceHeader(ServiceInvoiceHeader,TempServiceLine."Document No.");
      VerifyAmountOnGLEntry(ServiceInvoiceHeader."No.",GeneralPostingSetup."Sales Inv. Disc. Account",Amount);
      VerifyAmountOnGLEntry(ServiceInvoiceHeader."No.",CustomerPostingGroup."Service Charge Acc.",-CustInvoiceDisc."Service Charge");
    END;

    LOCAL PROCEDURE VerifyGLEntry@40(ServiceInvoiceHeader@1000 : Record 5992);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.SETRANGE("Source Type",GLEntry."Source Type"::Customer);
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Source No.",ServiceInvoiceHeader."Bill-to Customer No.");
        GLEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@39(ServiceInvoiceHeader@1003 : Record 5992);
    VAR
      ServiceInvoiceLine@1001 : Record 5993;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDSET;
      ResLedgerEntry.SETRANGE("Document No.",ServiceInvoiceLine."Document No.");
      REPEAT
        ResLedgerEntry.SETRANGE("Order Line No.",ServiceInvoiceLine."Line No.");
        ResLedgerEntry.FINDFIRST;
        ResLedgerEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
        ResLedgerEntry.TESTFIELD("Order Type",ResLedgerEntry."Order Type"::Service);
        ResLedgerEntry.TESTFIELD("Order No.",ServiceInvoiceHeader."Order No.");
        ResLedgerEntry.TESTFIELD("Resource No.",ServiceInvoiceLine."No.");
      UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceItemLogEntry@63(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceItemLog@1001 : Record 5942;
    BEGIN
      // Verify Service Item Log entry that occurred due to a certain action.
      ServiceItemLog.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLog.SETRANGE("Service Item No.",ServiceItemLine."Service Item No.");
      ServiceItemLog.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyLoanerNoServiceItemLine@4(VAR TempServiceItemLine@1000 : TEMPORARY Record 5901);
    VAR
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      TempServiceItemLine.FINDSET;
      REPEAT
        ServiceItemLine.GET(TempServiceItemLine."Document Type",TempServiceItemLine."Document No.",TempServiceItemLine."Line No.");
        ServiceItemLine.TESTFIELD("Loaner No.",TempServiceItemLine."Loaner No.");
      UNTIL TempServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyBlankLoanerNo@5(ServiceItemLine@1000 : Record 5901);
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type"::Order);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.FINDSET;
      REPEAT
        ServiceItemLine.TESTFIELD("Loaner No.",'');
      UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@18(ServiceLine@1001 : Record 5902);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      GetServiceLines(ServiceLine,ServiceLine."Document No.",ServiceLine."Document Type"::Order);
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceLine."Document No.");
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD("Customer No.",ServiceLine."Customer No.");
        ServiceLedgerEntry.TESTFIELD(Quantity,ServiceLine."Qty. Shipped (Base)");
        ServiceLedgerEntry.NEXT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLineForInvoice@56(OrderNo2@1002 : Code[20];DocumentNo@1000 : Code[20]);
    VAR
      ServiceLine@1006 : Record 5902;
      ServiceLine2@1003 : Record 5902;
    BEGIN
      GetServiceLinesForShipment(ServiceLine2,OrderNo2);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Invoice);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      REPEAT
        ServiceLine.SETRANGE("Shipment Line No.",ServiceLine2."Line No.");
        ServiceLine.FINDFIRST;
        ServiceLine.TESTFIELD(Type,ServiceLine2.Type);
        ServiceLine.TESTFIELD("No.",ServiceLine2."No.");
        ServiceLine.TESTFIELD(Quantity,ServiceLine2."Qty. to Invoice");
        ServiceLine.TESTFIELD("Unit Price",ServiceLine2."Unit Price");
      UNTIL ServiceLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarrantyLedgerEntry@13(ServiceLine@1001 : Record 5902);
    VAR
      WarrantyLedgerEntry@1000 : Record 5908;
    BEGIN
      WarrantyLedgerEntry.SETRANGE("Service Order No.",ServiceLine."Document No.");
      WarrantyLedgerEntry.FINDSET;
      GetServiceLines(ServiceLine,ServiceLine."Document No.",ServiceLine."Document Type"::Order);
      REPEAT
        WarrantyLedgerEntry.TESTFIELD("Customer No.",ServiceLine."Customer No.");
        WarrantyLedgerEntry.TESTFIELD(Quantity,ServiceLine.Quantity);
        ServiceLine.NEXT;
      UNTIL WarrantyLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarrantyLedgerFullPost@28(VAR ServiceLine@1001 : Record 5902);
    VAR
      WarrantyLedgerEntry@1000 : Record 5908;
    BEGIN
      WarrantyLedgerEntry.SETRANGE("Service Order No.",ServiceLine."Document No.");
      WarrantyLedgerEntry.FINDSET;
      GetServiceLines(ServiceLine,ServiceLine."Document No.",ServiceLine."Document Type"::Order);
      REPEAT
        WarrantyLedgerEntry.TESTFIELD("Customer No.",ServiceLine."Customer No.");
        WarrantyLedgerEntry.TESTFIELD(Quantity,ServiceLine.Quantity);
        ServiceLine.NEXT;
      UNTIL WarrantyLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVATEntry@38(ServiceInvoiceHeader@1000 : Record 5992);
    VAR
      VATEntry@1003 : Record 254;
    BEGIN
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      VATEntry.FINDSET;
      REPEAT
        VATEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
        VATEntry.TESTFIELD("Bill-to/Pay-to No.",ServiceInvoiceHeader."Bill-to Customer No.");
      UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceInvoice@45(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceInvoiceLine@1004 : Record 5993;
    BEGIN
      // Verify fields Invoice Discount and Line Discount of Service Invoice Line are equal to the value of the field Invoice Discount and Line Discount of the relevant Service Line.
      TempServiceLine.FINDSET;
      FindServiceInvoiceHeader(ServiceInvoiceHeader,TempServiceLine."Document No.");
      REPEAT
        ServiceInvoiceLine.GET(ServiceInvoiceHeader."No.",TempServiceLine."Line No.");
        ServiceInvoiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceInvoiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceInvoiceLine.TESTFIELD("Line Discount %",TempServiceLine."Line Discount %");
        ServiceInvoiceLine.TESTFIELD("Line Discount Amount",TempServiceLine."Line Discount Amount" );
        ServiceInvoiceLine.TESTFIELD("Inv. Discount Amount",TempServiceLine."Inv. Discount Amount");
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceShipmentLine@15(ServiceLine@1001 : Record 5902);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      GetServiceLines(ServiceLine,ServiceLine."Document No.",ServiceLine."Document Type"::Order);
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceShipmentLine.SETRANGE(Type,ServiceShipmentLine.Type::Item);
      ServiceShipmentLine.FINDSET;
      REPEAT
        ServiceShipmentLine.TESTFIELD("Customer No.",ServiceLine."Customer No.");
        ServiceShipmentLine.TESTFIELD(Quantity,ServiceLine.Quantity);
        ServiceShipmentLine.NEXT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceDocumentLogEvent@14(DocumentNo@1000 : Code[20];DocumentType@1002 : Option;EventNo@1003 : Integer);
    VAR
      ServiceDocumentLog@1001 : Record 5912;
    BEGIN
      // Verify Service Document Log entry for Event No. that corresponds to the event that occurred due to a certain action.
      ServiceDocumentLog.SETRANGE("Document Type",DocumentType);
      ServiceDocumentLog.SETRANGE("Document No.",DocumentNo);
      ServiceDocumentLog.FINDLAST;
      ServiceDocumentLog.TESTFIELD("Event No.",EventNo);
    END;

    LOCAL PROCEDURE VerifyShipmentLineError@23(ServiceOrderNo@1000 : Code[20]);
    VAR
      ServiceInvoiceHeader@1003 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
      PostedServiceInvoice@1004 : TestPage 5978;
    BEGIN
      FindServiceInvoiceHeader(ServiceInvoiceHeader,ServiceOrderNo);
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ServiceInvoiceLine.FINDFIRST;

      PostedServiceInvoice.OPENEDIT;
      PostedServiceInvoice.FILTER.SETFILTER("No.",ServiceInvoiceHeader."No.");

      ASSERTERROR PostedServiceInvoice.ServInvLines.ItemShipmentLines.INVOKE;
      Assert.ExpectedError(
        STRSUBSTNO(
          ItemShipmentLineServiceTier,ServiceInvoiceLine.FIELDCAPTION(Type),ServiceInvoiceLine.TABLECAPTION,
          ServiceInvoiceLine.FIELDCAPTION("Document No."),ServiceInvoiceLine."Document No.",
          ServiceInvoiceLine.FIELDCAPTION("Line No."),ServiceInvoiceLine."Line No.",ServiceInvoiceLine.Type));
    END;

    LOCAL PROCEDURE VerifyDocumentDimension@16(DocumentNo@1002 : Code[20]);
    VAR
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceHeader@1001 : Record 5900;
      OrderDimSetID@1000 : Integer;
      ShipmentDimSetID@1004 : Integer;
    BEGIN
      // Get Dimension Set ID on Service Header.
      ServiceHeader.SETRANGE("No.",DocumentNo);
      ServiceHeader.FINDFIRST;
      OrderDimSetID := ServiceHeader."Dimension Set ID";

      // Get Dimension Set ID on Service Shipment Header.
      ServiceShipmentHeader.SETRANGE("Order No.",DocumentNo);
      ServiceShipmentHeader.FINDFIRST;
      ShipmentDimSetID := ServiceShipmentHeader."Dimension Set ID";

      Assert.AreEqual(OrderDimSetID,ShipmentDimSetID,STRSUBSTNO(DocumentDimError,ServiceShipmentHeader."No.",ServiceHeader."No."));
    END;

    LOCAL PROCEDURE VerifyPostingDateOnServiceShipment@58(OrderNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      ServiceShipmentLine@1003 : Record 5991;
    BEGIN
      FindServiceShipmentLine(ServiceShipmentLine,OrderNo);
      ServiceShipmentLine.FINDSET;
      REPEAT
        ServiceShipmentLine.TESTFIELD("Posting Date",PostingDate);
      UNTIL ServiceShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostingDateOnServiceInvoice@57(OrderNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      ServiceInvoiceLine@1003 : Record 5993;
    BEGIN
      FindServiceInvoiceLine(ServiceInvoiceLine,OrderNo);
      ServiceInvoiceLine.FINDSET;
      REPEAT
        ServiceInvoiceLine.TESTFIELD("Posting Date",PostingDate);
      UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyValuesOnServiceLines@109(ServiceHeader@1000 : Record 5900;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Customer No.",ServiceHeader."Customer No.");
      ServiceLine.SETRANGE("No.",ItemNo);
      ServiceLine.FINDFIRST;
      ServiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostingDateOfValueEntry@123(ItemNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Document Type","Document Type"::"Service Invoice");
        FINDFIRST;
        Assert.AreEqual(PostingDate,"Posting Date",PostingDateErr);
      END;
    END;

    LOCAL PROCEDURE VerifyServiceLineInvDiscAmount@133(VAR ServiceLine@1000 : Record 5902;ExpectedAmount@1001 : Decimal);
    BEGIN
      WITH ServiceLine DO BEGIN
        FIND;
        Assert.AreEqual(ExpectedAmount,"Inv. Discount Amount",FIELDCAPTION("Inv. Discount Amount"));
      END;
    END;

    [ConfirmHandler]
    PROCEDURE LoanerConfirmHandler@11(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE FormHandlerGetShipment@30(VAR GetServiceShipmentLines@1003 : Page 5994;VAR Response@1000 : Action);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceShipmentLine@1001 : Record 5991;
      ServiceGetShipment@1002 : Codeunit 5932;
    BEGIN
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,InvoiceNo);
      ServiceGetShipment.SetServiceHeader(ServiceHeader);

      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      ServiceShipmentLine.FINDFIRST;
      ServiceGetShipment.CreateInvLines(ServiceShipmentLine);
    END;

    LOCAL PROCEDURE UpdateInventorySetup@142();
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",FALSE);
      InventorySetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesPageHandler@53(VAR ServiceLines@1000 : TestPage 5905);
    BEGIN
      ServiceLines.Post.INVOKE;
      ServiceLines.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@43(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 3;  // Supplying 3 to select Third Posting Option: Ship and Invoice for Service Order.
    END;

    [ConfirmHandler]
    PROCEDURE SignContractConfirmHandler@120(SignContractMessage@1001 : Text[1024];VAR Result@1000 : Boolean);
    BEGIN
      Result := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ServContrctTemplateListHandler@119(VAR ServiceContractTemplateList@1001 : Page 6056;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [MessageHandler]
    PROCEDURE MessgeHandler@121(MessageTest@1000 : Text[1024]);
    BEGIN
      // Dummy Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Service]
      Unsupported version tags:
      NA: Unable to Execute

      Test for Service Order Check.
        1.  Check if the system allows creating a new Service Order for Customer.
        2.  Create Service Items Worksheet within Service Orders.
        3.  Create Service Items Worksheet within Service Orders and Save Report as XLSX and XML format.
        4.  Creating Service Items within Service Order.
        5.  Check Lending and Receiving Loaners.
        6.  Check Service Item Log within Service Order.
        7.  Post (Ship & Invoice) Service Order.
        8.  Service Shipment Posting.
        9.  Service Order Posting as Ship and Invoice.
        10. Check error occurs on selection of Item Shipment Line of Type Resource on Service Invoice Header.
        11. Check that Warranty Ledger Entry is correctly created on Posting of Service Order with Ship and Invoice Option.
        12. Check the Get Shipment Functionality on Service Invoice.
        13. Check that Service Order Line Discount and Invoice Discounts are correctlty transfered to invoice on Posting of Service Order.
        14. Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type Item fully and Other lines partly.
        15. Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type Resource fully and Other lines
            partly.
        16. Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type Cost and Other lines partly.
        17. Test Service Lines on Service Invoice from Get Shipment after Post Service Line for Type G/L Account fully and Other lines
            partly.
        18. Test Extended Text on Service Invoice Line after posting Service Order with Extended Text on Service Line.
        19. Test that Posting Date updates correctly on Service Line after updating it on Service Order.
        20. Test that correct Posting Date is updated on Service Invoice Lines and on Service Shipment Lines after posting Service Order with updated Posting Date.
        21. Test that Service Order still exists after Posting Service Line for first Service Item Line.
        22. Test that Blank Line exists in Posted Service Documents if it is included in Service Order before posting.
        23. Test that Service Order Invoice Discount does not change after running Calculate Invoice Discount twice.
        24. Test that correct Invoice Discount calculated after running Calculate Invoice Discount twice before Posting Service Order.
        25. Verify program does not messed up on Service Item Worksheet lines for Type Item using Ascending sorting while deleting the contract No on Service Item line.
        26. Verify program does not messed up on Service Item Worksheet lines for Type Item using DEcending sorting while deleting the contract No on Service Item line.
        27. Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Ascending sorting while deleting the contract No on Service Item line.
        28. Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Decending sorting while deleting the contract No on Service Item line.
        29. Verify program does not messed up on Service Item Worksheet lines for Type Resource using Ascending sorting while deleting the contract No on Service Item line.
        30. Verify program does not messed up on Service Item Worksheet lines for Type Resource using Ascending sorting while deleting the contract No on Service Item line.
        31. Verify program does not messed up on Service Item Worksheet lines for Type Item using Ascending sorting while Inserting the contract No on Service Item line.
        32. Verify program does not messed up on Service Item Worksheet lines for Type Item using Decending sorting while Inserting the contract No on Service Item line.
        33. Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Ascending sorting while Inserting the contract No on Service Item line.
        34. Verify program does not messed up on Service Item Worksheet lines for Type G/L Account using Decending sorting while Inserting the contract No on Service Item line.
        35. Verify program does not messed up on Service Item Worksheet lines for Type Resource using Ascending sorting while Inserting the contract No on Service Item line.
        36. Verify program does not messed up on Service Item Worksheet lines for Type Resource using Ascending sorting while Inserting the contract No on Service Item line.
        37. Verify program does not messed up on Service lines for Type Item using Ascending sorting while deleting the contract No on Service Item line.
        38. Verify program does not messed up on Service lines for Type Item using Decending sorting while deleting the contract No on Service Item line.
        39. Verify program does not messed up on Service lines for Type G/L Account using Ascending sorting while deleting the contract No on Service Item line.
        40. Verify program does not messed up on Service lines for Type G/L Account using Decending sorting while deleting the contract No on Service Item line.
        41. Verify program does not messed up on Service lines for Type Resource using Ascending sorting while deleting the contract No on Service Item line.
        42. Verify program does not messed up on Service lines for Type Resource using Decending sorting while deleting the contract No on Service Item line.
        43. Verify program does not messed up on Service lines for Type Item using Ascending sorting while Inserting the contract No on Service Item line.
        44. Verify program does not messed up on Service lines for Type Item using Decending sorting while Inserting the contract No on Service Item line.
        45. Verify program does not messed up on Service lines for Type G/L Account using Ascending sorting while Inserting the contract No on Service Item line.
        46. Verify program does not messed up on Service lines for Type G/L Account using Decending sorting while Inserting the contract No on Service Item line.
        47. Verify program does not messed up on Service lines for Type Resource using Ascending sorting while Inserting the contract No on Service Item line.
        48. Verify program does not messed up on Service lines for Type Resource using Decending sorting while Inserting the contract No on Service Item line.
        49. Verify Posting Date of Value Entry should be same as the orginal Service Header Posting Date.

      TFS_TS_ID = 117269
      Cover Test cases:
        TC1.1 TFS_TC_ID=31581 and 5797
        TC1.2 TFS_TC_ID=31582 and 5798
        TC1.3 TFS_TC_ID=31583 and 5799
        TC1.4 TFS_TC_ID=31584 and 5800
        TC1.5 TFS_TC_ID=31585 and 5801
        TC1.6 TFS_TC_ID=31586 and 5802

      TFS_TS_ID = 117270
      Cover Test cases:
        TC01115 TFS_TC_ID=31587 and 5803
        TC01116 TFS_TC_ID=31588 and 5804
        TC01117 TFS_TC_ID=31589 and 5805
        TC01118 TFS_TC_ID=31590 and 5806
        TC01119 TFS_TC_ID=31591 and 5807
        TC01120 TFS_TC_ID=31592 and 5808

      TFS_TS_ID = 119727
      Cover Test cases:
        TC01123 TFS_TC_ID=31593 and 5809
        TC01124 TFS_TC_ID=31594 and 5810
        TC01126 TFS_TC_ID=31596 and 5812

      TFS_TS_ID = 158079
      Cover Test cases:
        TFS_TC_ID=141347
        TFS_TC_ID=141348
        TFS_TC_ID=141350

      Covered Test cases:
        TC_PP_GSL_4_1 TFS_TC_ID=130864
        TC_PP_GSL_4_2 TFS_TC_ID=130865
        TC_PP_GSL_4_3 TFS_TC_ID=130866
        TC_PP_GSL_4_4 TFS_TC_ID=130867
        TC_PP_GSL_2_1 TFS_TC_ID=130860
        TC_PP_GSL_2_4 TFS_TC_ID=130863

      Covers Test Cases: TFS_TS_ID = 274950
        ----------------------------------------------------------------------------------------------
        Test Function Name                                                                    TFS ID
        ----------------------------------------------------------------------------------------------
        ExtendedTextOnServiceInvoiceLine                                                      260264
        PostingDateOnUnpostedServiceLine, PostingDateOnPostedServiceDocuments                 260266
        PostServiceLineForServiceOrder                                                        261343

      Covers Test Cases: TFS_TS_ID = 274951
        ----------------------------------------------------------------------------------------------
        Test Function Name                                                                    TFS ID
        ----------------------------------------------------------------------------------------------
        BlankLineForServiceOrder                                                              263705

      Covers Test Cases: TFS_TS_ID = 280990
        ----------------------------------------------------------------------------------------------
        Test Function Name                                                                    TFS ID
        ----------------------------------------------------------------------------------------------
        CalculateServiceOrderInvoiceDiscountTwice, ServiceOrderInvoiceDiscountAfterPosting    267140

      Covers Test Cases: Bug_ID = 318192
        ------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                TFS ID
        ------------------------------------------------------------------------------------------------------------------------------------------
        ItemsOnServItemWorkSheetWithAscending,ItemsOnServItemWorkSheetWithDecending,
        GLAccountsOnServItemWorkSheetWithAscending,GLAccountsOnServItemWorkSheetWithDecending,
        ResourcesOnServItemWorkSheetWithAscending,ResourcesOnServiceItemWorkSheetLinesWithDecending,
        ServItemWorkSheetAscendingWithItemAfterInsertingContractNo,
        ServItemWorkSheetDecendingWithItemAfterInsertingContractNo,
        ServItemWorkSheetAscendingWithGLAccountAfterInsertingContractNo,
        ServItemWorkSheetDecendingWithGLAccountAfterInsertingContractNo,
        ServItemWorkSheetAscendingWithResourceAfterInsertingContractNo,
        ServItemWorkSheetDecendingWithResourceAfterInsertingContractNo,
        ItemsOnServiceLinesWithAscending,ItemsOnServiceLinesWithDecending,
        GLAccountsOnServiceLinesWithAscending,GLAccountsOnServiceLinesWithDecending,
        ResourcesOnServiceLinesWithAscending,ResourcesOnServiceLinesWithDecending,
        ItemsOnServiceLinesWithAscendingAfterInsertingContractNo,ItemsOnServiceLinesWithDecendingAfterInsertingContractNo,
        GLAccountsOnServiceLinesWithAscendingAfterInsertingContractNo,GLAccountsOnServiceLinesWithDecendingAfterInsertingContractNo,
        ResourceOnServiceLinesWithAscendingAfterInsertingContractNo,ResourcesOnServiceLinesWithDecendingAfterInsertingContractNo          319462

      Covers Test Cases: Bug_ID = 100684
        ------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                TFS ID
        ------------------------------------------------------------------------------------------------------------------------------------------
        PostServiceOrderWithUpdatingPostingDateOfServiceLine                                                                              100684
    }
    END.
  }
}

