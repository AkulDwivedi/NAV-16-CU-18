OBJECT Codeunit 137072 SCM Production Orders II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1027 : Record 82;
      ItemJournalBatch@1026 : Record 233;
      OutputItemJournalTemplate@1024 : Record 82;
      OutputItemJournalBatch@1023 : Record 233;
      ConsumptionItemJournalTemplate@1022 : Record 82;
      ConsumptionItemJournalBatch@1021 : Record 233;
      RevaluationItemJournalTemplate@1025 : Record 82;
      RevaluationItemJournalBatch@1020 : Record 233;
      WarehouseJournalTemplate@1019 : Record 7309;
      WarehouseJournalBatch@1018 : Record 7310;
      LocationGreen@1008 : Record 14;
      LocationRed@1029 : Record 14;
      LocationYellow@1003 : Record 14;
      LocationWhite@1017 : Record 14;
      LocationGreen2@1038 : Record 14;
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1041 : Codeunit 130502;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryManufacturing@1001 : Codeunit 132202;
      LibraryWarehouse@1014 : Codeunit 132204;
      LibraryCosting@1007 : Codeunit 132200;
      LibraryERM@1013 : Codeunit 131300;
      LibraryPurchase@1015 : Codeunit 130512;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryPlanning@1030 : Codeunit 132203;
      LibrarySales@1036 : Codeunit 130509;
      LibraryRandom@1006 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      HandlingError@1043 : TextConst 'ENU=Nothing to handle';
      ValidationError@1005 : TextConst 'ENU=%1 must be %2.';
      PickActivitiesCreated@1004 : TextConst 'ENU=Number of Invt. Pick activities created';
      FinishProductionOrder@1009 : TextConst 'ENG=Do you still want to finish the order?';
      StartingDateMessage@1032 : TextConst 'ENG=Starting Date must be less or equal.';
      EndingDateMessage@1031 : TextConst 'ENG=Ending Date must be greater or equal.';
      TrackingMessage@1033 : TextConst 'ENU=The change will not affect existing entries';
      NewWorksheetMessage@1035 : TextConst 'ENU=You are now in worksheet';
      RequisitionLineMustNotExist@1034 : TextConst 'ENU=Requisition Line must not exist for Item %1.';
      ItemFilter@1037 : TextConst 'ENU=%1|%2';
      DeleteItemTrackingQst@1039 : TextConst 'ENU=has item tracking. Do you want to delete it anyway?';
      ItemTrackingMode@1040 : ' ,Assign Lot No.,Select Entries,Update Quantity';
      ProdOrderRtngLineNotUpdatedMsg@1011 : TextConst 'ENU=Prod. Order Routing Line is not updated.';
      TotalDurationExceedsAvailTimeErr@1028 : TextConst 'ENU=The sum of setup, move and wait time exceeds the available time in the period.';
      CancelReservationTxt@1042 : TextConst 'ENU=Cancel reservation';

    [Test]
    PROCEDURE FinishedQuantityOnProductionOrderLineWithoutTracking@11();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ProdOrderLine@1000 : Record 5406;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Production Order] [Warehouse]
      // [SCENARIO] Verify Finished Quantity is correct after posting Output and finishing the Production Order on Location with Bins.

      // Setup: Update Components at a Location. Create parent and child Items in a Production BOM and certify it. Update Inventory for child Item. Create and refresh a Released Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationRed.Code);
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      Quantity := LibraryRandom.RandInt(100);  // Large Random Value required for Test.
      CreateItemsSetup(Item,Item2);
      CreateAndPostItemJournalLine(Item2."No.",Quantity,Bin.Code,LocationRed.Code,FALSE);  // Using Tracking FALSE.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,LocationRed.Code,Bin.Code);
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Create and post Consumption with Tracking FALSE.

      // Exercise: Create and post Output Journal for the Production Order. Change Status from Released to Finished.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,Quantity);  // Use Tracking FALSE.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");  // Change Status from Released to Finished.

      // Verify: Verify the Finished Quantity after posting Output and finishing the Production Order.
      FindProductionOrderLine(ProdOrderLine,Item."No.");
      ProdOrderLine.TESTFIELD("Finished Quantity",Quantity);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ReservationHandler)]
    PROCEDURE ReserveProdComponentAndPostOutputWithLotTracking@16();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProdOrderComponent@1009 : Record 5407;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1000 : Record 83;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and refresh a Released Production Order. Reserve Component.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationGreen.Code);
      Quantity := LibraryRandom.RandInt(100);
      CreateItemsSetupWithProductionAndTracking(Item,Item2,ProductionOrder,Quantity,LocationGreen.Code);
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;  // Invokes ReservationHandler.

      // Exercise: Create and post the Output Journal with Tracking.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,Quantity);

      // Verify: Verify the Item Ledger Entry for the Output posted with Tracking.
      VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Output,Item2."No.",Quantity,TRUE);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ReservationHandler)]
    PROCEDURE ProductionOrderComponentReservationWithLotTracking@54();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProdOrderComponent@1009 : Record 5407;
      ProductionOrder@1006 : Record 5405;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for child Item with Tracking. Create and refresh a Released Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationGreen.Code);
      Quantity := LibraryRandom.RandInt(100);  // Large Random Value required for Test.
      CreateItemsSetupWithProductionAndTracking(Item,Item2,ProductionOrder,Quantity,LocationGreen.Code);

      // Exercise: Reserve Production Order Component.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;  // Invokes ReservationHandler.

      // Verify: Verify the Reserved Quantity on Production Order Component.
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status::Released,Item."No.",Quantity);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostConsumptionAndOutputWithLotTrackingAndFinishedProductionOrder@35();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ItemJournalLine@1000 : Record 83;
      ProductionOrder@1006 : Record 5405;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO] Verify the Item Ledger Entry for Output and Tracking after finishing Production Order with tracked Items.

      // Setup: Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for child Item with Tracking. Create and refresh a Released Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationGreen.Code);
      Quantity := LibraryRandom.RandInt(100);  // Large Random Value required for Test.
      CreateItemsSetupWithProductionAndTracking(Item,Item2,ProductionOrder,Quantity,LocationGreen.Code);

      // Create and post Consumption and Output Journal with Tracking.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",TRUE);  // Use Tracking TRUE.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,Quantity);  // Use Tracking TRUE.

      // Exercise: Change status from Released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify that Production Order Status is successfully changed to Finished. Verify the Item Ledger Entry for Output and Tracking.
      VerifyProductionOrder(ProductionOrder,ProductionOrder.Status::Finished,ProductionOrder.Quantity,WORKDATE);
      VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Output,Item2."No.",Quantity,TRUE);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE PickWithHandlingErrorFromProductionOrderWithBin@57();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ComponentsAtLocation@1002 : Code[10];
    BEGIN
      // Setup: Update Components at a Location. Create parent and child Items in a Production BOM and certify it. Update Inventory for Items. Create and refresh a Released Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationRed.Code);
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      CreateItemsSetup(Item,Item2);
      CreateAndPostItemJournalLine(Item2."No.",LibraryRandom.RandInt(100),Bin.Code,LocationRed.Code,FALSE);  // Using Tracking FALSE.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(100),LocationRed.Code,Bin.Code);

      // Exercise: Create Pick from Released Production Order.
      ASSERTERROR LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE PostConsumptionWithLocationAndBin@126();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Create parent and child Items in a Production BOM and certify it. Update Inventory for Child Item. Create and refresh a Released Production Order.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      CreateItemsSetup(Item,Item2);
      CreateAndPostItemJournalLine(Item2."No.",LibraryRandom.RandInt(100),Bin.Code,LocationRed.Code,FALSE);  // Using Tracking FALSE.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(100),LocationRed.Code,Bin.Code);

      // Exercise: Create and post Consumption.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Using Tracking FALSE.

      // Verify: Verify the posted Consumption.
      VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Consumption,Item2."No.",-ProductionOrder.Quantity,FALSE);  // Use Tracking FALSE.
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE ReservationOnPlannedProductionOrderComponent@30();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1002 : Record 27;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      ProdOrderComponent@1007 : Record 5407;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Create and release Purchase Order and post as Receive and Invoice. Create a Planned Production Order.
      Initialize;
      CreateItemsSetup(Item,Item2);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,Item2."No.",Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as Receive and Invoice.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Planned,Item."No.",Quantity,'','');

      // Exercise: Reserve Components on Planned Production Order.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      ProdOrderComponent.ShowReservation;  // Invokes ReservationHandler.

      // Verify: Verify that Quantity is not reserved.
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status::Planned,Item2."No.",0);
    END;

    [Test]
    PROCEDURE FirmPlannedProductionOrderWithLocation@98();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1000 : Record 27;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      // Setup: Create parent and child Items and update Inventory for child Item. Create Production BOM and certify it.
      Initialize;
      CreateItemsSetup(Item,Item2);

      // Exercise: Create and refresh Firm Planned Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item2."No.",LibraryRandom.RandDec(100,2),LocationGreen.Code,'');

      // Verify: Verify that Firm Planned Production Order Line is updated with correct Location Code and correct Quantity.
      FindProductionOrderLine(ProdOrderLine,Item2."No.");
      ProdOrderLine.TESTFIELD("Location Code",LocationGreen.Code);
      ProdOrderLine.TESTFIELD(Quantity,ProductionOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE InventoryPickFromProductionOrderWithLotTracking@167();
    BEGIN
      // Verify the Inventory Pick is created from Released Production Order with Lot Tracking and Bins.
      // Setup.
      Initialize;
      WarehouseActivityFromProductionOrderWithLotTracking(FALSE);  // Post Inventory Pick FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,MessageHandler)]
    PROCEDURE PostedPartialInventoryPickFromProductionOrderWithLotTracking@168();
    BEGIN
      // Verify that Inventory Pick is posted successfully from Released Production Order with Lot Tracking, Partial quantity and Bins.
      // Setup.
      Initialize;
      WarehouseActivityFromProductionOrderWithLotTracking(TRUE);  // Post Inventory Pick TRUE.
    END;

    LOCAL PROCEDURE WarehouseActivityFromProductionOrderWithLotTracking@4(PostInventoryPick@1009 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
    BEGIN
      // Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for child Item with Tracking. Create and refresh a Released Production Order.
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationYellow.Code);
      LibraryWarehouse.FindBin(Bin,LocationYellow.Code,'',1);  // Find Bin of Index 1.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemSetupWithLotTracking(Item,Item2);
      CreateAndPostItemJournalLine(Item."No.",Quantity,Bin.Code,LocationYellow.Code,TRUE);  // Using Tracking TRUE.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationYellow.Code,Bin.Code);

      // Exercise: Create Inventory Pick from the Released Production Order.
      LibraryVariableStorage.Enqueue(PickActivitiesCreated);  // Enqueue variable required inside MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);
      IF PostInventoryPick THEN BEGIN
        // Auto fill Quantity To Handle for whole Quantity. Update Lot No and partial quantity on Whse Activity Line and post Inventory Pick.
        WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
        UpdateQuantityAndLotNoOnWarehouseActivityLine(
          Item."No.",ProductionOrder."No.",WarehouseActivityLine."Action Type"::Take,Quantity / 2);
        FindWarehouseActivityHeader(
          WarehouseActivityHeader,ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",
          WarehouseActivityLine."Action Type"::Take);
        LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);  // Post as Invoice False.
      END;

      IF PostInventoryPick THEN
        // Verify: Verify that Inventory Pick posted successfully with partial Quantity and Lot Tracking.
        VerifyPostedInventoryPickLine(ProductionOrder."No.",Item."No.",Bin.Code,Quantity / 2,LocationYellow.Code)
      ELSE
        // Verify that Inventory Pick created successfully.
        VerifyWarehouseActivityLine(
          ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Item."No.",Quantity,
          WarehouseActivityLine."Action Type"::Take);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE ReplanFirmPlannedProductionOrderWithRouting@14();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
      ProdOrderRoutingLine@1005 : Record 5409;
      Direction@1000 : 'Forward,Backward';
      CalcMethod@1002 : 'All Levels';
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Create Routing Setup and update Routing on Item. Create and refresh a Firm Planned Production Order.
      Initialize;
      CreateItemsSetup(Item,Item2);
      CreateRoutingAndUpdateItem(Item);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Exercise: Replan Production Order.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All Levels");

      // Verify: Verify the Input Quantity remains same on Replan Production Order.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderRoutingLine.TESTFIELD("Input Quantity",ProductionOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE PartialAutoReservationOnSalesOrder@28();
    VAR
      Item@1012 : Record 27;
      SalesHeader@1011 : Record 36;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item. Update Inventory for the Item.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",Quantity,'','',FALSE);  // Using Tracking FALSE.

      // Exercise: Create and release a Sales Order with partial reservation.
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item."No.",Quantity / 2,'');  // Partial Auto Reservation.

      // Verify: Verify the Quantity reserved on Sales Line.
      VerifyReservationQtyOnSalesLine(SalesHeader."No.",Quantity / 2);
    END;

    [Test]
    PROCEDURE RegisterWarehousePickFromProductionOrderWithComponent@106();
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityLine@1000 : Record 5767;
      RegisteredWhseActivityLine@1004 : Record 5773;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1003 : Decimal;
      AlwaysCreatePickLine@1005 : Boolean;
    BEGIN
      // Setup: Update Location Setup, update Components at Location. Create parent and child Items in a Production BOM and certify it. Update Inventory for Child Item. Create and refresh a Released Production Order.
      // Create Warehouse Pick from the Released Production Order.
      Initialize;
      AlwaysCreatePickLine := UpdateLocationSetup(LocationWhite,TRUE);  // Always Create Pick Line as TRUE.
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandInt(100);  // Integer value required.
      CreateItemsSetup(Item,Item2);
      UpdateInventoryWithWhseItemJournal(Item2,LocationWhite,Quantity);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,LocationWhite.Code,
        LocationWhite."To-Production Bin Code");
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // Exercise: Update Bin on Warehouse Activity Line. Register the Pick created.
      UpdateBinCodeOnWarehouseActivityLine(ProductionOrder."No.");
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",WarehouseActivityLine."Action Type"::Take);

      // Verify: Verify that Pick is registered successfully.
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",Item2."No.",Quantity,
        RegisteredWhseActivityLine."Action Type"::Take);
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",Item2."No.",Quantity,
        RegisteredWhseActivityLine."Action Type"::Place);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
      UpdateLocationSetup(LocationWhite,AlwaysCreatePickLine);
    END;

    [Test]
    PROCEDURE PostConsumptionWithProductionOrderAfterRegisterPick@463();
    BEGIN
      // Verify the Item Ledger Entry for the consumption posted after register Warehouse Pick from Production Order.
      // Setup.
      Initialize;
      PostJournalsWithProductionOrder(FALSE);  // Post Output -FALSE.
    END;

    [Test]
    PROCEDURE PostOutputWithProductionOrderWarehousePick@464();
    BEGIN
      // Verify the Item Ledger Entry for the Output posted after register Warehouse Pick from Production Order.
      // Setup.
      Initialize;
      PostJournalsWithProductionOrder(TRUE);  // Post Output -TRUE.
    END;

    LOCAL PROCEDURE PostJournalsWithProductionOrder@264(PostOutput@1014 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1009 : Record 83;
      ComponentsAtLocation@1003 : Code[10];
      Quantity@1002 : Decimal;
      AlwaysCreatePickLine@1004 : Boolean;
    BEGIN
      // Update Components at a Location. Create parent and child Items in a Production BOM and certify it. Update Inventory for child Item. Create and refresh a Released Production Order, create and register Pick from it.
      AlwaysCreatePickLine := UpdateLocationSetup(LocationWhite,TRUE);  // Always Create Pick Line as TRUE.
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandInt(100);  // Integer value required.
      CreateItemsSetup(Item,Item2);
      UpdateInventoryWithWhseItemJournal(Item2,LocationWhite,Quantity);
      CreateAndRegisterPickWithProductionOrderSetup(ProductionOrder,LocationWhite,Item."No.",Quantity);

      // Exercise: Post Consumption for the Production Order.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Create and post Consumption with Tracking FALSE.

      IF PostOutput THEN BEGIN
        // Create and post Output Journal.
        CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,Quantity);  // Use Tracking FALSE.

        // Verify: Verify the Item Ledger Entry for the Output and Consumption posted after register Warehouse Pick from Production Order.
        VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Output,Item."No.",Quantity,FALSE);  // Use Tracking FALSE.
      END ELSE
        VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Consumption,Item2."No.",-Quantity,FALSE);  // Use Tracking FALSE.

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
      UpdateLocationSetup(LocationWhite,AlwaysCreatePickLine);
    END;

    [Test]
    PROCEDURE AdjustItemCostWithProductionOrderAndWarehouseActivity@89();
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries] [Production] [Warehouse]
      // [SCENARIO] Verify the Item Ledger Entry after Adjust Cost Item Entries is run with consumption posted with Production Order.

      // Setup.
      Initialize;
      ItemsWithProductionOrderAndWarehouseActivity(FALSE);  // Calculate Inventory -FALSE.
    END;

    [Test]
    PROCEDURE InventoryValueWithProductionOrderAndWarehouseActivity@470();
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries] [Revaluation] [Production] [Warehouse]
      // [SCENARIO] Verify the Revaluation Journal Line after Calculate Inventory is run with consumption and output posted with Production Order.

      // Setup.
      Initialize;
      ItemsWithProductionOrderAndWarehouseActivity(TRUE);  // Calculate Inventory -TRUE.
    END;

    LOCAL PROCEDURE ItemsWithProductionOrderAndWarehouseActivity@460(InventoryValue@1014 : Boolean);
    VAR
      Item@1012 : Record 27;
      Item2@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1009 : Record 83;
      ComponentsAtLocation@1003 : Code[10];
      Quantity@1002 : Decimal;
      AlwaysCreatePickLine@1004 : Boolean;
    BEGIN
      // Update Components at a Location. Create parent and child Items with Tracking in a Production BOM and certify it. Update Inventory for Items with Tracking. Create and refresh a Released Production order.
      AlwaysCreatePickLine := UpdateLocationSetup(LocationWhite,TRUE);  // Always Create Pick Line as TRUE.
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandInt(100);  // Integer value required.
      CreateItemsSetup(Item,Item2);
      UpdateInventoryWithWhseItemJournal(Item2,LocationWhite,Quantity);
      CreateAndRegisterPickWithProductionOrderSetup(ProductionOrder,LocationWhite,Item."No.",Quantity);
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Use Tracking FALSE.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,Quantity);  // Use Tracking FALSE.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Exercise: Adjust Cost Item Entries.
      LibraryCosting.AdjustCostItemEntries(Item2."No.",'');

      IF InventoryValue THEN BEGIN
        LibraryInventory.CreateItemJournalLine(
          ItemJournalLine,RevaluationItemJournalTemplate.Name,RevaluationItemJournalBatch.Name,ItemJournalLine."Entry Type",
          Item2."No.",0);
        CalculateInventoryValue(Item2);

        // Verify:
        VerifyRevaluationJournalLine(Item2."No.",Quantity);
      END ELSE
        VerifyItemLedgerEntryCostAmountActual(
          ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",Quantity * Item2."Unit Cost",LocationWhite.Code);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
      UpdateLocationSetup(LocationWhite,AlwaysCreatePickLine);
    END;

    [Test]
    PROCEDURE OutputPostFromReleasedProductionOrderWithLocation@253();
    VAR
      Item@1006 : Record 27;
      ChildItem@1005 : Record 27;
      Bin@1004 : Record 7354;
      PurchaseLine@1003 : Record 39;
      ProductionOrder@1002 : Record 5405;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Setup: Create parent and child Items in a Production BOM and certify it. Create and post Purchase Order as Receive and Invoice. Create and refresh a Released Production Order.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      CreateItemsSetup(Item,ChildItem);
      CreateAndPostPurchaseOrderWithLocationAndBin(PurchaseLine,ChildItem."No.",LocationRed.Code,Bin.Code);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",PurchaseLine.Quantity,LocationRed.Code,Bin.Code);

      // Exercise: Create and post Output Journal for the Production Order.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,PurchaseLine.Quantity);  // Use Tracking FALSE.

      // Verify: Verify the Location Code in Item Ledger Entry for the posted Output. Verify the Cost Amount Actual as Zero without Adjust Cost.
      VerifyItemLedgerEntryCostAmountActual(ItemJournalLine."Entry Type"::Output,Item."No.",0,LocationRed.Code);
    END;

    [Test]
    PROCEDURE ItemLedgerEntryForConsumptionAfterAdjustCostWithProductionOrder@254();
    VAR
      Item@1006 : Record 27;
      ChildItem@1005 : Record 27;
      Bin@1004 : Record 7354;
      PurchaseLine@1003 : Record 39;
      ProductionOrder@1002 : Record 5405;
      ItemJournalLine@1001 : Record 83;
      ComponentsAtLocation@1000 : Code[10];
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries] [Production] [Warehouse]
      // [SCENARIO] Verify Item Ledger Entry Cost Amount is correct after posting Consumption of Released Production Order (with Bins used) and run Adjust Cost.

      // Setup: Update Components at a Location. Create parent and child Items in a Production BOM and certify it. Create and post Purchase Order as Receive and Invoice. Create and refresh a Released Production Order.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationRed.Code);
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      CreateItemsSetup(Item,ChildItem);
      UpdateUnitCostOnItem(ChildItem);
      CreateAndPostPurchaseOrderWithLocationAndBin(PurchaseLine,ChildItem."No.",LocationRed.Code,Bin.Code);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",PurchaseLine.Quantity,LocationRed.Code,Bin.Code);
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Create and post Consumption with Tracking FALSE.

      // Exercise: Adjust Cost Item Entries.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify: Verify the Consumption Entry for the Child Item in Item Ledger Entry after Cost adjustment.
      VerifyItemLedgerEntryCostAmountActual(
        ItemJournalLine."Entry Type"::Consumption,ChildItem."No.",-PurchaseLine.Quantity * ChildItem."Unit Cost",LocationRed.Code);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE FinishedProductionOrderForLessOutputWithLocationAndBin@309();
    VAR
      Item@1012 : Record 27;
      ChildItem@1010 : Record 27;
      Bin@1001 : Record 7354;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // [FEATURE] [Production] [Warehouse]
      // [SCENARIO] Verify that Status can be changed to Finished for Released Production Order, when Output is posted (Order uses Location with Bins).

      // Setup: Create parent and child Items in a Production BOM and certify it. Create and post Item  Journal. Create and refresh a Released Production Order.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationRed.Code,'',1);  // Find Bin of Index 1.
      CreateItemsSetup(Item,ChildItem);
      CreateAndPostItemJournalLine(ChildItem."No.",LibraryRandom.RandDec(100,2),Bin.Code,LocationRed.Code,FALSE);  // Use Tracking FALSE.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),LocationRed.Code,Bin.Code);

      // Create and post Output Journal for the Production Order.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,ProductionOrder.Quantity);  // Use Tracking FALSE.

      // Exercise: Change Production Order Status from Released to Finished.
      LibraryVariableStorage.Enqueue(FinishProductionOrder);
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify the Status successfully changed to Finished.
      VerifyProductionOrder(ProductionOrder,ProductionOrder.Status::Finished,ProductionOrder.Quantity,WORKDATE);
      ProductionOrder.TESTFIELD("Location Code",LocationRed.Code);
    END;

    [Test]
    PROCEDURE OutputPostFromReleasedProductionOrderWithoutLocation@25();
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify the Output Quantity posted from Released Production Order without Location.

      // Setup.
      Initialize;
      JournalsPostFromReleasedProductionOrderWithoutLocation(FALSE);  // Adjust Cost Item Entries FALSE.
    END;

    [Test]
    PROCEDURE ItemLedgerEntryForOutputAfterAdjustCostWithReleasedProductionOrder@24();
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries] [Production]
      // [SCENARIO] Verify the Output Entry for the Parent Item in Item Ledger Entry after Cost adjustment from Released Production Order without Location.

      // Setup.
      Initialize;
      JournalsPostFromReleasedProductionOrderWithoutLocation(TRUE);  // Adjust Cost Item Entries TRUE.
    END;

    LOCAL PROCEDURE JournalsPostFromReleasedProductionOrderWithoutLocation@23(AdjustCost@1009 : Boolean);
    VAR
      Item@1012 : Record 27;
      ChildItem@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1008 : Record 83;
      Quantity@1000 : Decimal;
    BEGIN
      // Create parent and child Items in a Production BOM and certify it. Update Inventory for child Item. Create and refresh a Released Production Order.
      CreateItemsSetup(Item,ChildItem);
      UpdateUnitCostOnItem(ChildItem);
      Quantity := LibraryRandom.RandInt(100);
      CreateAndPostItemJournalLine(ChildItem."No.",Quantity,'','',FALSE);  // Use Tracking FALSE.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",Quantity,'','');
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Create and post Consumption with Tracking FALSE.

      // Exercise: Create and post Output Journal for the Production Order.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,Quantity);  // Use Tracking FALSE.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");  // Change Status from Released to Finished.
      IF AdjustCost THEN
        // Adjust Cost Item Entries.
        LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify: Verify the Output Entry for the Parent Item in Item Ledger Entry after Cost Adjustment. Verify the Output posted.
      IF AdjustCost THEN
        VerifyItemLedgerEntryCostAmountActual(ItemJournalLine."Entry Type"::Output,Item."No.",Quantity * ChildItem."Unit Cost",'') // Cost for the Parent Item calculated from the Child Item.
      ELSE
        VerifyItemLedgerEntryCostAmountActual(ItemJournalLine."Entry Type"::Output,Item."No.",0,'');  // The Cost Amount Actual is zero without Adjust Cost.
    END;

    [Test]
    PROCEDURE ConsumptionPostFromReleasedProductionOrderWithoutLocation@38();
    VAR
      Item@1012 : Record 27;
      ChildItem@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Create parent and child Items in a Production BOM and certify it. Update Inventory of Child Item. Create and refresh a Released Production Order.
      Initialize;
      CreateItemsSetup(Item,ChildItem);
      CreateAndPostItemJournalLine(ChildItem."No.",LibraryRandom.RandInt(100) + 100,'','',FALSE);  // Using Tracking FALSE. Large Quantity required for positive Inventory.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(100),'','');

      // Exercise: Create and Post Consumption.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Use Tracking FALSE.

      // Verify: Verify the Item Ledger Entry for the Posted Consumption without Location.
      VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Consumption,ChildItem."No.",-ProductionOrder.Quantity,FALSE);  // Use Tracking FALSE.
    END;

    [Test]
    PROCEDURE ReleasedProductionOrderWithFamily@27();
    VAR
      ParentItem@1012 : Record 27;
      ParentItem2@1003 : Record 27;
      ChildItem@1010 : Record 27;
      ChildItem2@1002 : Record 27;
      Family@1004 : Record 99000773;
      ProductionOrder@1006 : Record 5405;
      ProdOrderLine@1000 : Record 5406;
      FamilyItemQuantity@1007 : Decimal;
    BEGIN
      // Setup: Create parent and child Items for a Family. Update Inventory for child Items. Create a Family.
      Initialize;
      FamilyItemQuantity := LibraryRandom.RandDec(10,2);
      CreateItemHierarchyForFamily(ParentItem,ParentItem2,ChildItem,ChildItem2);
      CreateFamily(Family,ParentItem."No.",ParentItem2."No.",FamilyItemQuantity);

      // Exercise: Create and refresh a Released Production Order.
      CreateAndRefreshReleasedProductionOrderWithSourceTypeFamily(ProductionOrder,Family."No.",FamilyItemQuantity);

      // Verify: Verify the Production Order Lines.
      FindProductionOrderLine(ProdOrderLine,ParentItem."No.");
      ProdOrderLine.TESTFIELD(Quantity,FamilyItemQuantity * FamilyItemQuantity);  // Production Order Quantity calculated from Family Item Quantity.
      FindProductionOrderLine(ProdOrderLine,ParentItem2."No.");
      ProdOrderLine.TESTFIELD(Quantity,FamilyItemQuantity * FamilyItemQuantity);  // Production Order Quantity calculated from Family Item Quantity.
    END;

    [Test]
    PROCEDURE ActualCostOnFinishedProductionOrderStatisticsPageForFamily@364();
    VAR
      ParentItem@1010 : Record 27;
      ParentItem2@1003 : Record 27;
      ChildItem@1009 : Record 27;
      ChildItem2@1002 : Record 27;
      Family@1004 : Record 99000773;
      ProductionOrder@1006 : Record 5405;
      Quantity@1007 : Decimal;
      FamilyItemQuantity@1000 : Decimal;
      ActualCost@1011 : Decimal;
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify that Cost Amount is correct on Finished Production Order which source is Family, and Consumption and Output is posted.

      // Setup: Create parent and child Items for a Family. Update Inventory for child Items. Create a Family. Create and refresh a Released Production Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2) + 100;  // Large Quantity required for positive Inventory.
      FamilyItemQuantity := LibraryRandom.RandInt(10);
      CreateItemHierarchyForFamily(ParentItem,ParentItem2,ChildItem,ChildItem2);
      CreateFamily(Family,ParentItem."No.",ParentItem2."No.",FamilyItemQuantity);
      CreateAndRefreshReleasedProductionOrderWithSourceTypeFamily(ProductionOrder,Family."No.",FamilyItemQuantity);

      // Create and post Consumption and Output journals.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Using Tracking FALSE.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,Quantity);  // Using Tracking FALSE.

      // Exercise: Change Production Order Status from Released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify the correct Actual Cost Amount on Finished Production Order Statistics page.
      ActualCost := FamilyItemQuantity * (FamilyItemQuantity * ChildItem."Unit Cost" + FamilyItemQuantity * ChildItem2."Unit Cost");
      VerifyCostAmountActualOnFinishedProductionOrderStatisticsPage(ProductionOrder."No.",ActualCost);
    END;

    [Test]
    PROCEDURE PostConsumptionForReleasedProductionOrderWithFamily@384();
    BEGIN
      // Verify the correct Item Ledger entries for the Consumption posted for the Production Order using Items in a Family.
      // Setup.
      Initialize;
      PostConsumptionAndOutputForReleasedProductionOrderWithFamily(FALSE);  // Post Output FALSE.
    END;

    [Test]
    PROCEDURE PostOutputForReleasedProductionOrderWithFamily@385();
    BEGIN
      // Verify the correct Item Ledger entries for the Output posted for the Production Order using Items in a Family.
      // Setup.
      Initialize;
      PostConsumptionAndOutputForReleasedProductionOrderWithFamily(TRUE);  // Post Output TRUE.
    END;

    LOCAL PROCEDURE PostConsumptionAndOutputForReleasedProductionOrderWithFamily@363(PostOutput@1005 : Boolean);
    VAR
      ParentItem@1010 : Record 27;
      ParentItem2@1003 : Record 27;
      ChildItem@1009 : Record 27;
      ChildItem2@1002 : Record 27;
      Family@1004 : Record 99000773;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1008 : Record 83;
      Quantity@1000 : Decimal;
      FamilyItemQuantity@1007 : Decimal;
    BEGIN
      // Create parent and child Items for a Family. Update Inventory for child Items. Create a Family. Create and refresh a Released Production Order.
      Quantity := LibraryRandom.RandDec(100,2) + 100;  // Large Quantity required for positive Inventory.
      FamilyItemQuantity := LibraryRandom.RandInt(10);
      CreateItemHierarchyForFamily(ParentItem,ParentItem2,ChildItem,ChildItem2);
      CreateFamily(Family,ParentItem."No.",ParentItem2."No.",FamilyItemQuantity);
      CreateAndRefreshReleasedProductionOrderWithSourceTypeFamily(ProductionOrder,Family."No.",FamilyItemQuantity);

      // Exercise: Create and post Consumption Journal for the Production Order.
      CreateAndPostConsumptionJournalWithItemTracking(ProductionOrder."No.",FALSE);  // Using Tracking FALSE.
      IF PostOutput THEN
        // Create and post Output Journal for the Production Order.
        CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,Quantity);  // Using Tracking FALSE.

      // Verify: Verify the Item Ledger Entries for the posted Output of Parent Items. Verify the Consumption Entries for the Posted Consumption.
      IF PostOutput THEN BEGIN
        VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Output,ParentItem."No.",Quantity,FALSE);  // Using Tracking FALSE.
        VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Output,ParentItem2."No.",FamilyItemQuantity * FamilyItemQuantity,FALSE);  // Using Tracking FALSE.
      END ELSE BEGIN
        VerifyItemLedgerEntry(
          ItemJournalLine."Entry Type"::Consumption,ChildItem."No.",-FamilyItemQuantity * FamilyItemQuantity,FALSE);  // Using Tracking FALSE.
        VerifyItemLedgerEntry(
          ItemJournalLine."Entry Type"::Consumption,ChildItem2."No.",-FamilyItemQuantity * FamilyItemQuantity,FALSE);  // Using Tracking FALSE.
      END;
    END;

    [Test]
    PROCEDURE RemainingQuantityWithMultipleProductionOrderComponents@122();
    BEGIN
      // Verify the total Remaining Quantity on Production Order Component with multiple Components.
      // Setup.
      Initialize;
      RemainingQuantityOnProductionOrderComponents(FALSE);  // Delete Production Order Component FALSE.
    END;

    [Test]
    PROCEDURE RemainingQuantityAfterDeleteProductionComponent@123();
    BEGIN
      // Verify the total Remaining Quantity on Production Order Components is correct when deleting one Production Order Component.
      // Setup.
      Initialize;
      RemainingQuantityOnProductionOrderComponents(TRUE);  // Delete Production Order Component TRUE.
    END;

    LOCAL PROCEDURE RemainingQuantityOnProductionOrderComponents@31(DeleteComponent@1004 : Boolean);
    VAR
      Item@1012 : Record 27;
      ChildItem@1010 : Record 27;
      ChildItem2@1001 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // Create parent and multiple child Items in a Production BOM and certify it. Update Inventory of Child Items. Create and refresh a Released Production Order.
      CreateProdBOMSetupMultipleComponents(Item,ChildItem,ChildItem2);
      CreateAndPostItemJournalLine(ChildItem."No.",LibraryRandom.RandInt(100),'','',FALSE);  // Using Tracking FALSE.
      CreateAndPostItemJournalLine(ChildItem2."No.",LibraryRandom.RandInt(100),'','',FALSE);  // Using Tracking FALSE.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(100),'','');

      // Exercise: Calculate Consumption.
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      IF DeleteComponent THEN BEGIN
        // Delete First Production Order Compnent and Calculate Consumption.
        DeleteProductionOrderComponent(ProductionOrder."No.");
        LibraryManufacturing.CalculateConsumption(
          ProductionOrder."No.",ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      END;

      // Verify: Verify total Remaining Quantity on Production Order Component is reduced after deleting Component. Verify total Remaining Quantity on Production Order Component.
      IF DeleteComponent THEN
        VerifyRemainingQuantityOnProdOrderComponents(
          ProductionOrder."No.",ProductionOrder.Status::Released,ChildItem2."No.",ProductionOrder.Quantity)
      ELSE
        VerifyRemainingQuantityOnProdOrderComponents(
          ProductionOrder."No.",ProductionOrder.Status::Released,ChildItem."No.",ProductionOrder.Quantity + ProductionOrder.Quantity);
    END;

    [Test]
    PROCEDURE RoutingOnAllocatedCapacityForFirmPlannedProductionOrder@58();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Create Routing Setup and update Routing on Item.
      Initialize;
      CreateItemsSetup(Item,Item2);
      CreateRoutingAndUpdateItem(Item);

      // Exercise: Create and refresh a Firm Planned Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify the Routing and Work Center on Production Order Allocated Capacity.
      VerifyRoutingOnAllocatedCapacity(ProductionOrder);
    END;

    [Test]
    PROCEDURE RoutingOnAllocatedCapacityForFirmPlannedProductionOrderAfterCalcPlanAndCarryOut@145();
    VAR
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1007 : Record 36;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Update Planning parameters on Item. Create Routing Setup and update Routing on Item. Create and release Sales Order.
      Initialize;
      CreateItemsSetup(Item,Item2);
      UpdateItemParametersForPlanning(Item);
      CreateRoutingAndUpdateItem(Item);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandDec(100,2));

      // Calculate Regenerative Plan on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Exercise: Accept and Carry Out Action Message.
      AcceptAndCarryOutActionMessage(Item."No.");

      // Verify: Verify the Routing and Work Center on Production Order Allocated Capacity.
      FilterFirmPlannedProductionOrder(ProductionOrder,Item."No.");
      VerifyRoutingOnAllocatedCapacity(ProductionOrder);
    END;

    [Test]
    PROCEDURE SendAheadQuantityForFirmPlannedProdOrderAfterCalcPlanAndCarryOut@32();
    VAR
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1007 : Record 36;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
      SendAheadQuantity@1009 : Decimal;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Update Planning parameters on Item. Create Routing Setup and update Routing on Item. Update Send Ahead Quantity on Routing Line. Create and release a Sales Order.
      Initialize;
      CreateItemsSetup(Item,Item2);
      UpdateItemParametersForPlanning(Item);
      CreateRoutingAndUpdateItem(Item);
      SendAheadQuantity := LibraryRandom.RandDec(100,2);
      UpdateRoutingLineSendAheadQty(Item."Routing No.",SendAheadQuantity);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandDec(100,2));

      // Calculate Regenerative Plan on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Exercise: Accept and Carry Out Action Message.
      AcceptAndCarryOutActionMessage(Item."No.");

      // Verify: Verify the Send Ahead Quantity and Routing on Production Order Routing Line.
      FilterFirmPlannedProductionOrder(ProductionOrder,Item."No.");
      VerifyProductionOrderRoutingLine(ProductionOrder."No.",Item."Routing No.",SendAheadQuantity);
    END;

    [Test]
    PROCEDURE SendAheadQuantityForFirmPlannedProductionOrderWithRouting@102();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
      SendAheadQuantity@1000 : Decimal;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Create Routing Setup and update Routing on Item. Update Send Ahead Quantity on Routing Line.
      Initialize;
      CreateItemsSetup(Item,Item2);
      CreateRoutingAndUpdateItem(Item);
      SendAheadQuantity := LibraryRandom.RandDec(100,2);
      UpdateRoutingLineSendAheadQty(Item."Routing No.",SendAheadQuantity);

      // Exercise: Create and refresh a Firm Planned Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify the Send Ahead Quantity and Routing on Production Order Routing Line.
      VerifyProductionOrderRoutingLine(ProductionOrder."No.",Item."Routing No.",SendAheadQuantity);
    END;

    [Test]
    PROCEDURE StartingDateOnRoutingAfterProdOrderRefreshSchedulingBack@45();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
      ProdOrderRoutingLine@1005 : Record 5409;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Create Routing Setup and update Routing on Item. Create a Firm Planned Production Order.
      Initialize;
      CreateItemsSetup(Item,Item2);
      CreateRoutingAndUpdateItem(Item);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandDec(100,2) + 100);  // Large Quantity required.

      // Exercise: Refresh Firm Planned Production Order with Scheduling Direction Back.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Verify that the Starting Date is less than or equal to the Due Date on Production Order Routing Line.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      Assert.IsTrue(ProdOrderRoutingLine."Starting Date" <= ProductionOrder."Due Date",StartingDateMessage);
    END;

    [Test]
    PROCEDURE EndingDateOnRoutingAfterProdOrderRefreshSchedulingForward@75();
    VAR
      ProductionOrder@1001 : Record 5405;
      Item@1004 : Record 27;
      Item2@1006 : Record 27;
      ProdOrderRoutingLine@1005 : Record 5409;
    BEGIN
      // Setup: Create parent and child Items, create Production BOM. Create Routing Setup and update Routing on Item. Create a Firm Planned Production Order.
      Initialize;
      CreateItemsSetup(Item,Item2);
      CreateRoutingAndUpdateItem(Item);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandDec(100,2) + 1000);  // Large Quantity required.

      // Exercise: Refresh Firm Planned Production Order with Scheduling Direction Forward.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Verify that the Ending Date is greater than or equal to the Due Date on Production Order Routing Line.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      Assert.IsTrue(ProdOrderRoutingLine."Ending Date" >= ProductionOrder."Due Date",EndingDateMessage);
    END;

    [Test]
    PROCEDURE PlanningRoutingLineAfterCalculateRegenPlan@139();
    BEGIN
      // Verify that the Input Quantity on Planning Routing Line is same as Quantity on Requisition Line.
      // Setup.
      Initialize;
      PlanningRoutingLineAfterCalculatePlan(FALSE);  // Update Quantity on Requisition Line FALSE.
    END;

    [Test]
    PROCEDURE PlanningRoutingLineWithUpdatedReqLineAfterCalculateRegenPlan@140();
    BEGIN
      // Verify that the Input Quantity on Planning Routing Line is same as Quantity on Requisition Line after update Quantity on Requisition Line and refresh it.
      // Setup.
      Initialize;
      PlanningRoutingLineAfterCalculatePlan(TRUE);  // Update Quantity on Requisition Line TRUE.
    END;

    LOCAL PROCEDURE PlanningRoutingLineAfterCalculatePlan@67(UpdateRequisitionLine@1009 : Boolean);
    VAR
      Item@1002 : Record 27;
      ChildItem@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      RequisitionLine@1003 : Record 246;
      Quantity@1008 : Decimal;
      SchedulingDirection@1005 : 'Back,Forward';
    BEGIN
      // Create Parent and Child Items in a Production BOM with Routing. Update Planning parameters on Item. Create and release Sales Order.
      CreateItemsSetup(Item,ChildItem);
      UpdateItemParametersForPlanning(Item);
      CreateRoutingAndUpdateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity);

      // Exercise: Calculate Regenerative Plan on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      FindRequisitionLine(RequisitionLine,Item."No.");
      IF UpdateRequisitionLine THEN BEGIN
        // Update Quantity On Requisition Line and refresh the Planning Line.
        UpdateQuantityOnRequisitionLine(RequisitionLine,2 * Quantity);  // Change Quantity on Requisition Line.
        LibraryPlanning.RefreshPlanningLine(RequisitionLine,SchedulingDirection::Back,TRUE,TRUE);
      END;

      // Verify: Verify the Input Quantity on Planning Routing Line is same as the Quantity on Requisition Line.
      VerifyInputQuantityOnPlanningRoutingLine(RequisitionLine);
    END;

    [Test]
    PROCEDURE ProdOrderRoutingLineFirmPlannedProdOrderAfterCalcRegenPlanAndCarryOut@33();
    VAR
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1007 : Record 36;
      Item@1004 : Record 27;
      ChildItem@1006 : Record 27;
      ProdOrderRoutingLine@1000 : Record 5409;
      Quantity@1008 : Decimal;
    BEGIN
      // Setup: Create Parent and Child Items in a Production BOM with Routing. Update Planning parameters on Item. Create and release Sales Order.
      Initialize;
      CreateItemsSetup(Item,ChildItem);
      UpdateItemParametersForPlanning(Item);
      CreateRoutingAndUpdateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity);

      // Calculate Regenerative Plan on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Exercise: Accept and Carry Out Action Message.
      AcceptAndCarryOutActionMessage(Item."No.");

      // Verify: Verify the Production Order Quantity and Input Quantity on Prod Order Routing Line is same as Initial Sales Order Quantity.
      FilterFirmPlannedProductionOrder(ProductionOrder,Item."No.");
      ProductionOrder.TESTFIELD(Quantity,Quantity);
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderRoutingLine.TESTFIELD("Input Quantity",Quantity);
    END;

    [Test]
    PROCEDURE ReservationEntryAfterCalculateRegenPlan@64();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1007 : Record 36;
      ReservationEntry@1000 : Record 337;
      Quantity@1008 : Decimal;
    BEGIN
      // Setup: Create Item. Update Planning Parameters for Item. Create and release a Sales Order.
      Initialize;
      CreateLotForLotItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity);

      // Exercise: Calculate Regenerative Plan on WORKDATE.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Verify: Verify Reservation Entry for the Item after Calculate Plan.
      VerifyReservationEntry(Item."No.",Quantity,ReservationEntry."Reservation Status"::Tracking,FALSE,TRUE);  // Positive Reservation Entry TRUE.
      VerifyReservationEntry(Item."No.",-Quantity,ReservationEntry."Reservation Status"::Tracking,FALSE,FALSE);  // Positive Reservation Entry FALSE.
    END;

    [Test]
    [HandlerFunctions(ReservationHandler)]
    PROCEDURE ReservationEntryForProdOrderReservationAfterCalculatePlanAndCarryOutAction@63();
    VAR
      Item@1002 : Record 27;
      ProdOrderLine@1004 : Record 5406;
      ReservationEntry@1000 : Record 337;
      Quantity@1008 : Decimal;
    BEGIN
      // Setup: Create Item. Update Planning Parameters for Item. Create and release a Sales Order.
      Initialize;
      CreateLotForLotItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateDemandForCalculatePlanAndCarryOutAction(Item."No.",Quantity);

      // Exercise: Reserve Production Order Line created.
      FindProductionOrderLine(ProdOrderLine,Item."No.");
      ProdOrderLine.ShowReservation;  // Invokes ReservationHandler.

      // Verify: Verify the Reservation Entry after Reservation On Production Order Line.
      VerifyReservationEntry(Item."No.",Quantity,ReservationEntry."Reservation Status"::Reservation,FALSE,TRUE);  // Positive Reservation Entry TRUE.
      VerifyReservationEntry(Item."No.",-Quantity,ReservationEntry."Reservation Status"::Reservation,FALSE,FALSE);  // Positive Reservation Entry FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE ReservationEntryAfterAssignTrackingOnProdOrderWithCalculatePlanAndCarryOutAction@60();
    VAR
      Item@1002 : Record 27;
      ChildItem@1000 : Record 27;
      ProdOrderLine@1004 : Record 5406;
      ReservationEntry@1009 : Record 337;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Parent and Child Items in a Production BOM with Lot Tracking. Update Planning parameters on Parent Item. Create and release a Sales Order.
      Initialize;
      CreateItemSetupWithLotTracking(ChildItem,Item);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateItemParametersForPlanning(Item);
      CreateDemandForCalculatePlanAndCarryOutAction(Item."No.",Quantity);

      // Exercise: Assign Lot Tracking on Production Order created.
      FindProductionOrderLine(ProdOrderLine,Item."No.");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Assign Lot No.
      ProdOrderLine.OpenItemTrackingLines;  // Invokes ItemTrackingPageHandler.

      // Verify: Verify the Reservation Entry after assign Lot Tracking on Production Order Line.
      VerifyReservationEntry(Item."No.",Quantity,ReservationEntry."Reservation Status"::Tracking,TRUE,TRUE);  // Positive Reservation Entry and Tracking TRUE.
      VerifyReservationEntry(Item."No.",-Quantity,ReservationEntry."Reservation Status"::Tracking,FALSE,FALSE);  // Positive Reservation Entry and Tracking FALSE.
    END;

    [Test]
    PROCEDURE ProdOrderRoutingLineAfterRoutingLinkCodeUpdateOnRoutingLine@59();
    VAR
      Item@1004 : Record 27;
      ChildItem@1009 : Record 27;
      ProductionOrder@1003 : Record 5405;
      ProdOrderRoutingLine@1005 : Record 5409;
      RoutingLinkCode@1001 : Code[20];
    BEGIN
      // Setup: Create Parent and Child Items. Create Certified Production BOM with Routing Link Code for Child Items. Create Production Item with Routing.
      Initialize;
      CreateItemsSetup(Item,ChildItem);
      RoutingLinkCode := CreateRoutingAndUpdateItem(Item);

      // Exercise: Create and Refresh a Released Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Verify: Verify the Production Order Routing Line is populated with Routing Link Code from Routing Line.
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderRoutingLine.TESTFIELD("Routing Link Code",RoutingLinkCode);
    END;

    [Test]
    PROCEDURE NegativeOutputPostedForProductionOrderWithMultipleComponents@37();
    VAR
      Item@1012 : Record 27;
      ChildItem@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Create parent and child Items in a Production BOM with Routing and certify it. Create and refresh a Released Production Order.
      Initialize;
      CreateItemsSetup(Item,ChildItem);
      CreateRoutingAndUpdateItem(Item);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      // Exercise: Create and post negative Output for the Production Order.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",FALSE,-ProductionOrder.Quantity);  // Use Tracking FALSE.

      // Verify: Verify the negative Output Entry for the posted Output in Item Ledger Entry.
      VerifyItemLedgerEntry(ItemJournalLine."Entry Type"::Output,Item."No.",-ProductionOrder.Quantity,FALSE);  // Using Tracking FALSE.
    END;

    [Test]
    PROCEDURE ReservationEntryForPickAndReleasedProductionOrderAfterCalculatePlanAndCarryOutAction@39();
    VAR
      Item@1012 : Record 27;
      ChildItem@1010 : Record 27;
      ReservationEntry@1008 : Record 337;
      Quantity@1003 : Decimal;
      ComponentsAtLocation@1000 : Code[10];
      ProductionOrderNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO] Verify that tracking Reservation Entries are there and correct after Warehouse Pick created from Released Production Order, which is a supply to demanded Sales Order, respectively planned and carried out.

      // Setup: Update Components at Location. Create Parent and Child Items in a Production BOM and certify it. Update Item Planning Parameters. Update Inventory for Child Item. Create and release a Sales Order. Calculate Plan and Carry Out Action.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationGreen2.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemsSetup(Item,ChildItem);
      UpdateItemParametersForPlanning(Item);
      CreateAndPostItemJournalLine(ChildItem."No.",Quantity,'',LocationGreen2.Code,FALSE);  // Using Tracking FALSE.
      CreateDemandForCalculatePlanAndCarryOutAction(Item."No.",Quantity);
      ProductionOrderNo := ChangeStatusFromFirmPlannedToReleased(Item."No.");  // Change Status from Firm Planned to Released.

      // Exercise: Create Pick from Production Order.
      CreatePickFromReleasedProductionOrder(ProductionOrderNo);

      // Verify: Verify the Reservation Entry after Create Pick from Production Order.
      VerifyReservationEntry(Item."No.",Quantity,ReservationEntry."Reservation Status"::Tracking,FALSE,TRUE);  // Positive Reservation Entry TRUE.
      VerifyReservationEntry(Item."No.",-Quantity,ReservationEntry."Reservation Status"::Tracking,FALSE,FALSE);  // Positive Reservation Entry FALSE.

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE WhseActivityLineForReleasedProductionOrderAfterCalculatePlanAndCarryOutAction@92();
    VAR
      Item@1007 : Record 27;
      ChildItem@1006 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1001 : Decimal;
      ProductionOrderNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Warehouse]
      // [SCENARIO] Verify the Pick is created successfully for the Child Item, when Production Order is a supply for Sales Order demand, respectively planned and carried out.

      // Setup: Update Components at Location. Create Parent and Child Items in a Production BOM and certify it. Update Item Planning Parameters. Update Inventory for Child Item. Create and release a Sales Order. Calculate Plan and Carry Out Action.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateLotForLotItemSetupWithInventoryOnLocation(Item,ChildItem,LocationWhite,Quantity);
      CreateDemandForCalculatePlanAndCarryOutAction(Item."No.",Quantity);
      ProductionOrderNo := ChangeStatusFromFirmPlannedToReleased(Item."No.");  // Change Production Order Status from Firm Planned to Released.

      // Exercise: Create Pick from Production Order.
      CreatePickFromReleasedProductionOrder(ProductionOrderNo);

      // Verify: Verify the Pick is created successfully for the Child Item.
      VerifyWarehouseActivityLine(
        ProductionOrderNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",ChildItem."No.",Quantity,
        WarehouseActivityLine."Action Type"::Take);
      VerifyWarehouseActivityLine(
        ProductionOrderNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",ChildItem."No.",Quantity,
        WarehouseActivityLine."Action Type"::Place);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    PROCEDURE RegisterPickFromReleasedProductionOrderAfterCalculatePlanAndCarryOutAction@93();
    VAR
      Item@1007 : Record 27;
      ChildItem@1006 : Record 27;
      WarehouseActivityLine@1004 : Record 5767;
      RegisteredWhseActivityLine@1003 : Record 5773;
      ComponentsAtLocation@1002 : Code[10];
      Quantity@1001 : Decimal;
      ProductionOrderNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Warehouse]
      // [SCENARIO] Verify the Registered Pick for the Child Item, when: Production Order is a supply for Sales Order demand, respectively planned and carried out, then Pick created, then Bin Code updated, then Registered.

      // Stup: Update Components at Location. Create Parent and Child Items in a Production BOM and certify it. Update Item Planning Parameters. Update Inventory for Child Item. Create and release a Sales Order. Calculate Plan and Carry Out Action.
      Initialize;
      ComponentsAtLocation := UpdateManufacturingSetupComponentsAtLocation(LocationWhite.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateLotForLotItemSetupWithInventoryOnLocation(Item,ChildItem,LocationWhite,Quantity);
      CreateDemandForCalculatePlanAndCarryOutAction(Item."No.",Quantity);
      ProductionOrderNo := ChangeStatusFromFirmPlannedToReleased(Item."No.");  // Change Production Order Status from Firm Planned to Released.
      CreatePickFromReleasedProductionOrder(ProductionOrderNo);  // Create Pick from Released Production Order.

      // Exercise: Update Bin on Warehouse Activity Line. Register the Pick created.
      UpdateBinCodeOnWarehouseActivityLine(ProductionOrderNo);
      RegisterWarehouseActivity(
        ProductionOrderNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",WarehouseActivityLine."Action Type"::Take);

      // Verify: Verify the Registered Pick for the Child Item.
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrderNo,ChildItem."No.",Quantity,
        RegisteredWhseActivityLine."Action Type"::Take);
      VerifyRegisteredWarehouseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrderNo,ChildItem."No.",Quantity,
        RegisteredWhseActivityLine."Action Type"::Place);

      // Tear Down.
      UpdateManufacturingSetupComponentsAtLocation(ComponentsAtLocation);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForPlannedProductionOrder@285();
    VAR
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1007 : Record 36;
      Item@1004 : Record 27;
      ChildItem@1006 : Record 27;
      Quantity@1008 : Decimal;
    BEGIN
      // Setup: Create Parent and Child Items in a Production BOM. Update Order Tracking Policy on Item. Create and release Sales Order.
      Initialize;
      CreateItemsSetup(Item,ChildItem);
      UpdateOrderTrackingPolicyOnItem(Item,Item."Order Tracking Policy"::"Tracking Only");
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",Quantity);

      // Exercise: Create and refresh a Planned Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Planned,Item."No.",Quantity,'','');

      // Verify: Verify the ItemNo and Quantity on Order Tracking Page.
      VerifyOrderTrackingForProductionOrder(Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE OrderTrackingForFirmPlannedProductionOrderAfterCalculatePlanAndCarryOutAction@44();
    VAR
      Item@1004 : Record 27;
      ChildItem@1006 : Record 27;
      Quantity@1008 : Decimal;
    BEGIN
      // Setup: Create Parent and Child Items in a Production BOM. Update Planning parameters on Item.
      Initialize;
      CreateItemsSetup(Item,ChildItem);
      UpdateOrderTrackingPolicyOnItem(Item,Item."Order Tracking Policy"::"Tracking & Action Msg.");
      UpdateItemParametersForPlanning(Item);
      Quantity := LibraryRandom.RandDec(100,2);

      // Exercise: Create Demand, calculate Plan and Carry Out Action Message.
      CreateDemandForCalculatePlanAndCarryOutAction(Item."No.",Quantity);

      // Verify: Verify the ItemNo and Quantity on Order Tracking Page.
      VerifyOrderTrackingForProductionOrder(Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE RequisitionLineAfterCalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem@70();
    BEGIN
      // Verify the Location, Action Message and Quantity on Requisition Line created.
      // Setup.
      Initialize;
      CalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem(FALSE);  // Accept and Carry Out Action FALSE.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PurchaseLineAfterCalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem@48();
    BEGIN
      // Verify the Location Code and Quantity on Purchase Line created.
      // Setup.
      Initialize;
      CalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem(TRUE);  // Accept and Carry Out Action TRUE.
    END;

    LOCAL PROCEDURE CalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem@116(AcceptAndCarryOutAction@1000 : Boolean);
    VAR
      Item@1008 : Record 27;
      StockkeepingUnit@1010 : Record 5700;
      RequisitionLine@1001 : Record 246;
    BEGIN
      // Create item with Reordering Policy. Create StockKeeping Unit for Location. Update Inventory for Item. Create and post Sales Order with Item Maximum Quantity.
      CreateMaximumQtyItem(Item,LibraryRandom.RandDec(100,2) + 100);  // Large Quantity required for Item Maximum Inventory.
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationGreen.Code,Item."No.",'');
      CreateAndPostItemJournalLine(Item."No.",Item."Maximum Inventory",'',LocationGreen.Code,FALSE);  // Using Tracking FALSE.
      CreateAndPostSalesOrderWithUpdatedQuantityToShip(
        Item,Item."Maximum Inventory" + LibraryRandom.RandDec(10,2),LocationGreen.Code);  // Large Quantity required.

      // Exercise: Calculate Plan for Requisition Worksheet on WORKDATE. Accept and Carry Out Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(Item);
      IF AcceptAndCarryOutAction THEN
        AcceptAndCarryOutActionMessageForRequisitionWorksheet(Item."No.");

      // Verify: Verify the Location Code and Quantity on Purchase Line created.
      IF AcceptAndCarryOutAction THEN
        VerifyLocationAndQuantityOnPurchaseLine(Item."No.",LocationGreen.Code,Item."Maximum Inventory")
      ELSE
        // Verify the Location, Action Message and Quantity on Requisition Line created.
        VerifyRequisitionLine(Item."No.",RequisitionLine."Action Message"::New,Item."Maximum Inventory",LocationGreen.Code);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE RequisitionLineComponentItemAfterCalcRegenPlanOnPlanningWkshWithMRP@105();
    VAR
      Item@1010 : Record 27;
      ChildItem@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionLine2@1002 : Record 246;
      RequisitionLine@1004 : Record 246;
      PlanningWorksheet@1003 : TestPage 99000852;
      Quantity@1012 : Decimal;
    BEGIN
      // Setup: Create Lot for Lot Items in a Production BOM and certify it. Update Inventory for the Parent Item. Create and post Sales Order.
      Initialize;
      CreateLotForLotItemsSetup(Item,ChildItem);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndPostItemJournalLine(Item."No.",Quantity,'','',FALSE);  // Using Tracking FALSE.
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem."No.",Quantity,'');
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Ship only.

      // Exercise: Calculate Regenerative Plan with MRP - TRUE for Planning Worksheet through CalculatePlanPlanWkshRequestPageHandler.
      CalcRegenPlanForPlanningWorksheetPage(PlanningWorksheet,ChildItem."No.",ChildItem."No.",FALSE);

      // Verify: Verify the Action Message and Quantity on Requisition Line for Child Item. Verify that Requisition Line is not created for Parent Item.
      VerifyRequisitionLine(ChildItem."No.",RequisitionLine."Action Message"::New,Quantity,'');
      FilterRequisitionLine(RequisitionLine2,Item."No.");
      Assert.IsTrue(RequisitionLine2.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler,CarryOutActionMessageHandler)]
    PROCEDURE FirmPlannedProductionOrderWithParentAndChild@115();
    VAR
      ProductionOrder@1001 : Record 5405;
      ParentItem@1004 : Record 27;
      ChildItem@1000 : Record 27;
      ProdOrderLine@1002 : Record 5406;
      SalesHeader@1003 : Record 36;
      SalesLine@1005 : Record 37;
      PlanningWorksheet@1006 : TestPage 99000852;
    BEGIN
      // Setup: Create Parent and Child Items. Create Sales Order for Parent Item.
      Initialize;
      CreateBomItemsWithReorderingPolicy(ParentItem,ChildItem);
      CreateSalesOrder(SalesHeader,SalesLine,ParentItem."No.",LibraryRandom.RandInt(10),'');

      // Exercise: Carry Out Planning Worksheet as Firm Planned Production Order.
      CalcRegenPlanForPlanningWorksheetPage(PlanningWorksheet,ParentItem."No.",ChildItem."No.",TRUE);

      // Verify Parent and Child items are carried out into one Firm Planned Production Order.
      FilterFirmPlannedProductionOrder(ProductionOrder,ParentItem."No.");
      FindProductionOrderLine(ProdOrderLine,ChildItem."No.");
      ProductionOrder.TESTFIELD("No.",ProdOrderLine."Prod. Order No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandlerTrue)]
    PROCEDURE FinishProdOrderWithExistingItemTrackingEntry@125();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify that Production order can be finished with existing item tracking entries.

      // Setup: Create Item with Lot Tracking No. Create and refresh Releashed Production Order, assign Item Tracking on Prod. Order Line.
      Initialize;
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCode);
      CreateRleasedProdOrderWithItemTracking(ProductionOrder,Item."No.",ItemTrackingMode::"Assign Lot No.");

      // Create Output Journal for Production Order and reduce the quantity on Journal Line.
      CreateAndPostOutputJnlWithUpdateQtyAndItemTracking(ProductionOrder."No.",ProductionOrder.Quantity / 2); // 2 is not important, just to get a partial quantity

      // Exercise: Change Production Order Status from Released to Finished.
      // Verify: No error pops up.
      LibraryVariableStorage.Enqueue(FinishProductionOrder); // Enqueue for Confirm Handler
      LibraryVariableStorage.Enqueue(DeleteItemTrackingQst); // Enqueue for Confirm Handler
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify the Quantity and Finished Quantity on Finished Production Order Line.
      VerifyProdOrderLine(
        Item."No.",ProductionOrder.Status::Finished,ProductionOrder.Quantity,ProductionOrder.Quantity / 2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE FinishProdOrderWithItemTrackingForBackwardFlushingComp@132();
    VAR
      Item@1012 : Record 27;
      ParentItem@1010 : Record 27;
      ProductionOrder@1006 : Record 5405;
    BEGIN
      // [FEATURE] [Production]
      // [SCENARIO] Verify that Production order can be finished with component item tracking entries when Flushing Method = Backward.

      // Setup: Create parent and child Item in a Production BOM and certify it. Update Inventory for child Item.
      // Create and refresh a Released Production Order, update Flushing Method on Prod. Order Component
      Initialize;
      CreateItemsSetupWithProductionAndTracking(Item,ParentItem,ProductionOrder,LibraryRandom.RandInt(100),'');
      UpdateFlushingMethodOnProdComp(ProductionOrder."No.",Item."Flushing Method"::Backward);

      // Open Components and add an existing Item Tracking.
      SelectItemTrackingForProdOrderComponents(Item."No.");

      // Create and post the Output Journal.
      CreateAndPostOutputJournalWithItemTracking(ProductionOrder."No.",TRUE,ProductionOrder.Quantity); // Tracking = TRUE

      // Exercise: Change the Production Order Status to Finished
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify change status successfully. The Finished Quantity is correct and finishing the Production Order.
      VerifyProdOrderLine(
        ParentItem."No.",ProductionOrder.Status::Finished,ProductionOrder.Quantity,ProductionOrder.Quantity);
    END;

    [Test]
    PROCEDURE IncreaseDurationOfOperationsInManuallyScheduledProdOrderRoutingLine@134();
    VAR
      ProdOrderRoutingLine@1001 : Record 5409;
      NewSetupTime@1000 : Decimal;
    BEGIN
      // [SCENARIO 379761] An error should occur when total duration of setup-wait-move operations exceeds the period between Starting and Ending Dates in Prod. Order Routing Line with "Schedule Manually" flag on.
      Initialize;

      // [GIVEN] Released Production Order.
      // [GIVEN] "Schedule Manually" flag is set to TRUE in Prod. Order Routing Line "L".
      CreateReleasedProdOrderWithManuallyScheduledRoutingLine(ProdOrderRoutingLine);

      // [WHEN] Increase Setup Time in "L".
      NewSetupTime := ProdOrderRoutingLine."Setup Time" + LibraryRandom.RandInt(5);
      ASSERTERROR UpdateSetupTimeInProdOrderRoutingLine(ProdOrderRoutingLine,NewSetupTime);

      // [THEN] Error message of exceeding duration of operations is shown.
      Assert.ExpectedError(TotalDurationExceedsAvailTimeErr);
    END;

    [Test]
    PROCEDURE DoNotChangeDurationOfOperationsInManuallyScheduledProdOrderRoutingLine@136();
    VAR
      ProdOrderRoutingLine@1001 : Record 5409;
      NewSetupTime@1000 : Decimal;
    BEGIN
      // [SCENARIO 379761] Leaving total duration of setup-wait-move operations unchanged within the period between Starting and Ending Dates should not cause errors in Prod. Order Routing Line with "Schedule Manually" flag on.
      Initialize;

      // [GIVEN] Released Production Order.
      // [GIVEN] "Schedule Manually" flag is set to TRUE in Prod. Order Routing Line "L".
      CreateReleasedProdOrderWithManuallyScheduledRoutingLine(ProdOrderRoutingLine);

      // [WHEN] Setup Time in "L" is revalidated with the same value.
      NewSetupTime := ProdOrderRoutingLine."Setup Time";
      UpdateSetupTimeInProdOrderRoutingLine(ProdOrderRoutingLine,NewSetupTime);

      // [THEN] Validation causes no error. Setup Time in "L" is left unchanged.
      Assert.AreEqual(NewSetupTime,ProdOrderRoutingLine."Setup Time",ProdOrderRtngLineNotUpdatedMsg);
    END;

    [Test]
    PROCEDURE ReplanTwoLevelProdOrderWithChildLineReservedToParentLineComponent@129();
    VAR
      ProductionOrder@1005 : Record 5405;
      ItemNo@1000 : ARRAY [3] OF Code[20];
      Direction@1007 : 'Forward,Backward';
      CalcMethod@1006 : 'No Levels,One level,All levels';
      ReducedQty@1009 : Decimal;
    BEGIN
      // [FEATURE] [Make-to-Order]
      // [SCENARIO 381078] Reducing quantity on a parent line in two level Production Order reduces quantity on a child line. It also reduces the quantity of the component to be produced in other Production Order.
      Initialize;

      // [GIVEN] Production chain - a purchased component and three levels of manufacturing items "I1", "I2", "I3". "I3" is the highest level.
      // [GIVEN] Items "I2" and "I3" have Make-to-Order manufacturing policy.
      CreateProductionChainOfItems(ItemNo);

      // [GIVEN] Firm planned two level Production Order "PO" for items "I3" and "I2". Quantity = "Q".
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ItemNo[3],LibraryRandom.RandIntInRange(11,20),'','');

      // [GIVEN] Replan procedure is run for "PO".
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [GIVEN] Quantity on Prod. Order Line for "I3" is reduced to "q".
      ReducedQty := LibraryRandom.RandInt(10);
      UpdateQuantityOnProdOrderLine(ItemNo[3],ReducedQty);

      // [WHEN] Replan the Production Order "PO" for all levels of manufacturing.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [THEN] Quantity on Prod. Order Line for "I2" is reduced to "q".
      VerifyOneProdOrderLine(ItemNo[2],ReducedQty);

      // [THEN] Production Order for "I1" created by the replanning of "PO", has one line with reduced quantity "q".
      VerifyOneProdOrderLine(ItemNo[1],ReducedQty);
    END;

    [Test]
    [HandlerFunctions(ReservationEntriesModalPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ReplanTwoLevelProdOrderWithChildLineNotReserved@185();
    VAR
      ProductionOrder@1004 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
      ItemNo@1003 : ARRAY [3] OF Code[20];
      Direction@1002 : 'Forward,Backward';
      CalcMethod@1001 : 'No Levels,One level,All levels';
      ReducedQty@1000 : Decimal;
    BEGIN
      // [FEATURE] [Make-to-Order]
      // [SCENARIO 381078] Reducing quantity on a parent line in two level Production Order with removed binding between the lines, reduces quantity on a child line. It also reduces the quantity of the component to be produced in other Production Order.
      Initialize;

      // [GIVEN] Production chain - a purchased component and three levels of manufacturing items "I1", "I2", "I3". "I3" is the highest level.
      // [GIVEN] Items "I2" and "I3" have Make-to-Order manufacturing policy.
      CreateProductionChainOfItems(ItemNo);

      // [GIVEN] Firm planned two level Production Order "PO" for items "I3" and "I2". Quantity = "Q".
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ItemNo[3],LibraryRandom.RandIntInRange(11,20),'','');

      // [GIVEN] Replan procedure is run for "PO".
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [GIVEN] Reservation of Prod. Order Line for "I2" is canceled.
      FindProductionOrderLine(ProdOrderLine,ItemNo[2]);
      ProdOrderLine.ShowReservationEntries(TRUE);

      // [GIVEN] Quantity on Prod. Order Line for "I3" is reduced to "q".
      ReducedQty := LibraryRandom.RandInt(10);
      UpdateQuantityOnProdOrderLine(ItemNo[3],ReducedQty);

      // [WHEN] Replan the Production Order "PO" for all levels of manufacturing.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [THEN] Quantity on Prod. Order Line for "I2" is reduced to "q".
      VerifyOneProdOrderLine(ItemNo[2],ReducedQty);

      // [THEN] Production Order for "I1" created by the replanning of "PO", has one line with reduced quantity "q".
      VerifyOneProdOrderLine(ItemNo[1],ReducedQty);
    END;

    [Test]
    [HandlerFunctions(ReservationEntriesModalPageHandler,ReservationHandler,ConfirmHandlerTrue)]
    PROCEDURE ReplanTwoLevelProdOrderWithChildLineReservedForExternalDemand@143();
    VAR
      ProductionOrder@1004 : Record 5405;
      ProdOrderLine@1003 : Record 5406;
      SalesHeader@1000 : Record 36;
      SalesLine@1010 : Record 37;
      ItemNo@1006 : ARRAY [3] OF Code[20];
      Direction@1002 : 'Forward,Backward';
      CalcMethod@1001 : 'No Levels,One level,All levels';
      ProductionQty@1012 : Decimal;
      SalesQty@1011 : Decimal;
    BEGIN
      // [FEATURE] [Make-to-Order]
      // [SCENARIO 381078] When child line in two level Production Order is reserved to Sales Order, replanning of the Production Order increases the quantity of the child line to supply the parent line and the Sales Order.
      Initialize;

      // [GIVEN] Production chain - a purchased component and three levels of manufacturing items "I1", "I2", "I3". "I3" is the highest level.
      // [GIVEN] Items "I2" and "I3" have Make-to-Order manufacturing policy.
      CreateProductionChainOfItems(ItemNo);

      // [GIVEN] Firm planned two level Production Order "PO" for items "I3" and "I2". Quantity = "Q".
      ProductionQty := LibraryRandom.RandIntInRange(11,20);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ItemNo[3],ProductionQty,'','');

      // [GIVEN] Replan procedure is run for "PO".
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [GIVEN] Reservation of Prod. Order Line for "I2" is canceled.
      FindProductionOrderLine(ProdOrderLine,ItemNo[2]);
      ProdOrderLine.ShowReservationEntries(TRUE);

      // [GIVEN] Quantity "q" is reserved from Prod. Order Line for "I2" by a Sales Line.
      SalesQty := LibraryRandom.RandInt(10);
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo[2],SalesQty,'');
      SalesLine.ShowReservation;

      // [WHEN] Replan the Production Order "PO" for all levels of manufacturing.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [THEN] Quantity of production of "I2" is equal to "Q" + "q".
      VerifyOneProdOrderLine(ItemNo[2],ProductionQty + SalesQty);

      // [THEN] Production Order for "I1" created by the replanning of "PO", has one line with quantity = "Q" + "q".
      VerifyOneProdOrderLine(ItemNo[1],ProductionQty + SalesQty);
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      ConsumptionJournalSetup;
      RevaluationJournalSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateLocationSetup@137();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);

      CreateAndUpdateLocation(LocationGreen,FALSE,FALSE,FALSE,FALSE);  // Location Green.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);

      CreateAndUpdateLocation(LocationRed,FALSE,FALSE,FALSE,TRUE);  // Location Red.
      LibraryWarehouse.CreateNumberOfBins(LocationRed.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value  required for Number of Bins.

      CreateAndUpdateLocation(LocationYellow,TRUE,TRUE,FALSE,TRUE);  // Location Yellow.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow.Code,FALSE);
      LibraryWarehouse.CreateNumberOfBins(LocationYellow.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value  required for Number of Bins.

      LibraryWarehouse.CreateFullWMSLocation(LocationWhite,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);

      CreateAndUpdateLocation(LocationGreen2,TRUE,TRUE,TRUE,FALSE);  // Location Green.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen2.Code,FALSE);
    END;

    LOCAL PROCEDURE NoSeriesSetup@2();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesSetup@1004 : Record 311;
      WarehouseSetup@1001 : Record 5769;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);
    END;

    LOCAL PROCEDURE ItemJournalSetup@3();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",'');  // Value required to avoid the Document No mismatch.
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@81();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@17();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@205(LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RevaluationJournalSetup@307();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(RevaluationItemJournalTemplate,RevaluationItemJournalTemplate.Type::Revaluation);
      LibraryInventory.SelectItemJournalBatchName(
        RevaluationItemJournalBatch,RevaluationItemJournalTemplate.Type,RevaluationItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE AssignNoSeriesForItemJournalBatch@118(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AcceptAndCarryOutActionMessage@95(No@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      AcceptActionMessage(RequisitionLine,No);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@138(VAR Location@1004 : Record 14;RequirePutAway@1000 : Boolean;RequirePick@1001 : Boolean;RequireShipment@1003 : Boolean;BinMandatory@1002 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,FALSE,RequireShipment);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@42(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;BinCode@1004 : Code[20];LocationCode@1000 : Code[10]);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@15(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemsSetup@79(VAR Item@1005 : Record 27;VAR Item2@1001 : Record 27);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Child Item.
      LibraryInventory.CreateItem(Item2);

      // Create Production BOM, Parent item and Attach Production BOM.
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item2);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateCertifiedProductionBOM@29(VAR ProductionBOMHeader@1001 : Record 99000771;Item@1002 : Record 27);
    VAR
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);  // Value important.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionItem@34(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMakeToOrderProductionItem@144(VAR Item@1000 : Record 27;CompItem@1001 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateCertifiedProductionBOM(ProductionBOMHeader,CompItem);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
      Item.VALIDATE("Manufacturing Policy",Item."Manufacturing Policy"::"Make-to-Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionChainOfItems@163(VAR ItemNo@1000 : ARRAY [3] OF Code[20]);
    VAR
      CompItem@1001 : Record 27;
      ProdItem@1002 : ARRAY [3] OF Record 27;
      i@1003 : Integer;
    BEGIN
      CreateItemsSetup(ProdItem[1],CompItem);
      CreateMakeToOrderProductionItem(ProdItem[2],ProdItem[1]);
      CreateMakeToOrderProductionItem(ProdItem[3],ProdItem[2]);
      FOR i := 1 TO ARRAYLEN(ProdItem) DO
        ItemNo[i] := ProdItem[i]."No.";
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@46(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItemSetupWithLotTracking@20(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithItemTrackingCode(Item,CreateItemTrackingCode);
      CreateItemWithItemTrackingCode(Item2,CreateItemTrackingCode);
      CreateCertifiedProductionBOM(ProductionBOMHeader,Item);
      Item2.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemsSetupWithProductionAndTracking@12(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;VAR ProductionOrder@1002 : Record 5405;Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      CreateItemSetupWithLotTracking(Item,Item2);
      CreateAndPostItemJournalLine(Item."No.",Quantity,'',LocationCode,TRUE);  // Using Tracking TRUE.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item2."No.",Quantity,LocationCode,'');
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@13(VAR Item@1001 : Record 27;ItemTrackingCode@1002 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@22() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateBomItemsWithReorderingPolicy@130(VAR ParentItem@1005 : Record 27;VAR ChildItem@1001 : Record 27);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Parent and Child Item.
      LibraryInventory.CreateItem(ParentItem);
      LibraryInventory.CreateItem(ChildItem);
      UpdateItemParametersForPlanningWorksheet(
        ParentItem,ParentItem."Manufacturing Policy"::"Make-to-Order",
        ParentItem."Reordering Policy"::Order,ParentItem."Replenishment System"::"Prod. Order");
      UpdateItemParametersForPlanningWorksheet(
        ChildItem,ChildItem."Manufacturing Policy"::"Make-to-Order",
        ChildItem."Reordering Policy"::Order,ChildItem."Replenishment System"::"Prod. Order");

      // Create Production BOM and attach Production BOM to Parent Item.
      CreateCertifiedProductionBOM(ProductionBOMHeader,ChildItem);
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournalWithItemTracking@86(ProductionOrderNo@1001 : Code[20];Tracking@1002 : Boolean;Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ItemJournalLine,ProductionOrderNo);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Assign Lot No.
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      END;
      ItemJournalLine.VALIDATE(Quantity,Quantity);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournalWithItemTracking@142(ProductionOrderNo@1000 : Code[20];Tracking@1003 : Boolean);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      SelectItemJournalLine(ItemJournalLine,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Select Tracking Entries TRUE.
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      END;
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithExlpodeRouting@155(VAR ItemJournalLine@1000 : Record 83;ProductionOrderNo@1002 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
      SelectItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@56(ItemNo@1001 : Code[20];Quantity@1000 : Decimal;BinCode@1003 : Code[20];LocationCode@1004 : Code[10];Tracking@1005 : Boolean);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity,BinCode,LocationCode);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Assign Lot No TRUE.
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Invokes ItemTrackingPageHandler.
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithReservation@104(VAR SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1005 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.ShowReservation;  // Invokes ReservationHandler.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@96(VAR SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity,'');
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWorkCenter@49(VAR WorkCenter@1001 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateRoutingLine@90(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random value used so that the next Operation No is greater than the previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateRoutingAndUpdateItem@87(VAR Item@1000 : Record 27) : Code[10];
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      RoutingHeader@1001 : Record 99000763;
      RoutingLink@1002 : Record 99000777;
    BEGIN
      RoutingLink.FINDFIRST;
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.VALIDATE("Routing Link Code",RoutingLink.Code);
      RoutingLine.MODIFY(TRUE);

      // Certify Routing after Routing lines creation.
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);

      // Update Routing No on Item.
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);
      EXIT(RoutingLine."Routing Link Code");
    END;

    LOCAL PROCEDURE CreateRoutingWithSetupWaitAndMoveTime@158(VAR RoutingHeader@1002 : Record 99000763);
    VAR
      WorkCenter@1001 : Record 99000754;
      RoutingLine@1000 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      WITH RoutingLine DO BEGIN
        LibraryManufacturing.CreateRoutingLine(
          RoutingHeader,RoutingLine,'',FORMAT(LibraryRandom.RandInt(5)),Type::"Work Center",WorkCenter."No.");
        VALIDATE("Setup Time",LibraryRandom.RandInt(10));
        VALIDATE("Wait Time",LibraryRandom.RandInt(10));
        VALIDATE("Move Time",LibraryRandom.RandInt(10));
        MODIFY(TRUE);
      END;

      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@19(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,Quantity,'',0D);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CalculateInventoryValue@108(VAR Item@1001 : Record 27);
    VAR
      ItemJournalLine@1000 : Record 83;
      CalculatePer@1004 : 'Item Ledger Entry,Item';
      CalcBase@1003 : ' ,Last Direct Unit Cost,Standard Cost - Assembly List,Standard Cost - Manufacturing';
    BEGIN
      SelectItemJournalLine(ItemJournalLine,RevaluationItemJournalTemplate.Name,RevaluationItemJournalBatch.Name);
      Item.SETRANGE("No.",Item."No.");
      LibraryCosting.CalculateInventoryValue(
        ItemJournalLine,Item,WORKDATE,ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."),
        CalculatePer::"Item Ledger Entry",FALSE,FALSE,FALSE,CalcBase::" ",FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickWithProductionOrderSetup@498(VAR ProductionOrder@1000 : Record 5405;Location@1004 : Record 14;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ItemNo,Quantity,Location.Code,Location."To-Production Bin Code");
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      UpdateBinCodeOnWarehouseActivityLine(ProductionOrder."No.");
      RegisterWarehouseActivity(
        ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",WarehouseActivityLine."Action Type"::Take);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@135(VAR Item@1004 : Record 27;VAR WarehouseJournalLine@1003 : Record 7311;Location@1002 : Record 14;Quantity@1001 : Decimal);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.GET(Location.Code,Location."Cross-Dock Bin Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,Bin."Zone Code",
        Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithLocationAndBin@41(VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,ItemNo,LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as Receive and Invoice.
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrderWithSourceTypeFamily@91(VAR ProductionOrder@1000 : Record 5405;SourceNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Family,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateFamily@85(VAR Family@1005 : Record 99000773;ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];Quantity@1000 : Decimal);
    VAR
      FamilyLine@1004 : Record 99000774;
    BEGIN
      LibraryManufacturing.CreateFamily(Family);
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo,Quantity);
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo2,Quantity);
    END;

    LOCAL PROCEDURE CreateItemHierarchyForFamily@84(VAR ParentItem@1003 : Record 27;VAR ParentItem2@1002 : Record 27;VAR ChildItem@1001 : Record 27;VAR ChildItem2@1000 : Record 27);
    BEGIN
      CreateItemsSetup(ParentItem,ChildItem);
      CreateItemsSetup(ParentItem2,ChildItem2);
      UpdateUnitCostOnItem(ChildItem);
      UpdateUnitCostOnItem(ChildItem2);
      CreateAndPostItemJournalLine(ChildItem."No.",LibraryRandom.RandInt(100) + 100,'','',FALSE);  // Use Tracking FALSE.
      CreateAndPostItemJournalLine(ChildItem2."No.",LibraryRandom.RandInt(100) + 100,'','',FALSE);  // Use Tracking FALSE.
    END;

    LOCAL PROCEDURE CalculateRemainingQuantityOnProductionOrderComponent@83(ProductionOrderNo@1002 : Code[20]) TotalRemainingQuantity : Decimal;
    VAR
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      REPEAT
        TotalRemainingQuantity += ProdOrderComponent."Remaining Quantity";
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateProdBOMSetupMultipleComponents@78(VAR Item@1005 : Record 27;VAR Item2@1001 : Record 27;VAR Item3@1002 : Record 27);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Child Items.
      LibraryInventory.CreateItem(Item2);
      LibraryInventory.CreateItem(Item3);

      // Create Production BOM, Parent item and Attach Production BOM.
      CreateCertifiedProductionBOMWithMultipleItems(ProductionBOMHeader,Item2,Item3);
      CreateProductionItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateCertifiedProductionBOMWithMultipleItems@77(VAR ProductionBOMHeader@1001 : Record 99000771;Item@1002 : Record 27;Item2@1003 : Record 27);
    VAR
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);  // Value important.
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item2."No.",1);  // Value important.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDemandForCalculatePlanAndCarryOutAction@65(ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
      Item@1003 : Record 27;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,ItemNo,Quantity);

      // Calculate Regenerative Plan on WORKDATE. Accept and Carry Out Action Message.
      Item.GET(ItemNo);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      AcceptAndCarryOutActionMessage(ItemNo);
    END;

    LOCAL PROCEDURE CreateLotForLotItem@74(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      UpdateItemParametersForPlanning(Item);
    END;

    LOCAL PROCEDURE ChangeStatusFromFirmPlannedToReleased@245(ItemNo@1001 : Code[20]) ProductionOrderNo : Code[20];
    VAR
      ProductionOrder@1000 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      ProductionOrder.GET(ProdOrderLine.Status::"Firm Planned",ProdOrderLine."Prod. Order No.");

      // Change Production Order Status from Firm Planned to Released.
      ProductionOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released);
    END;

    LOCAL PROCEDURE CreatePickFromReleasedProductionOrder@301(ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status::Released,ProductionOrderNo);
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
    END;

    LOCAL PROCEDURE CreateLotForLotItemSetupWithInventoryOnLocation@121(VAR Item@1000 : Record 27;VAR ChildItem@1001 : Record 27;Location@1003 : Record 14;Quantity@1002 : Decimal);
    BEGIN
      CreateItemsSetup(Item,ChildItem);
      UpdateItemParametersForPlanning(Item);
      UpdateInventoryWithWhseItemJournal(ChildItem,Location,Quantity);
    END;

    LOCAL PROCEDURE CreateMaximumQtyItem@186(VAR Item@1000 : Record 27;MaximumInventory@1001 : Decimal);
    BEGIN
      CreateManufacturingItem(Item,Item."Reordering Policy"::"Maximum Qty.",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Reorder Point",LibraryRandom.RandDec(10,2) + 10);  // Large Random Value required for test.
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Minimum Order Quantity",LibraryRandom.RandDec(10,2));  // Minimum Order Quantity less than Reorder Point Quantity.
      Item.VALIDATE("Maximum Order Quantity",MaximumInventory + LibraryRandom.RandDec(100,2));  // Maximum Order Quantity more than Maximum Inventory.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithUpdatedQuantityToShip@80(VAR Item@1002 : Record 27;Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity,LocationCode);
      UpdateQuantityToShipOnSalesLine(SalesLine,Item."Maximum Inventory");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Ship only.
    END;

    LOCAL PROCEDURE AcceptActionMessage@101(VAR RequisitionLine@1002 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      FindRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AcceptAndCarryOutActionMessageForRequisitionWorksheet@99(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      AcceptActionMessage(RequisitionLine,ItemNo);
      LibraryVariableStorage.Enqueue(NewWorksheetMessage);  // Required inside MessageHandler.
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@69(VAR Item@1001 : Record 27);
    VAR
      RequisitionWkshName@1003 : Record 245;
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName,RequisitionWkshName."Template Type"::"Req.");
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,WORKDATE,WORKDATE);
    END;

    LOCAL PROCEDURE CreateManufacturingItem@100(VAR Item@1000 : Record 27;ReorderingPolicy@1002 : Option;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemsSetup@141(VAR Item@1000 : Record 27;VAR ChildItem@1001 : Record 27);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateManufacturingItem(ChildItem,ChildItem."Reordering Policy"::"Lot-for-Lot",ChildItem."Replenishment System"::Purchase);
      CreateCertifiedProductionBOM(ProductionBOMHeader,ChildItem);
      CreateManufacturingItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@110(VAR RequisitionWkshName@1001 : Record 245;Type@1002 : Option);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,Type);
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateRleasedProdOrderWithItemTracking@173(VAR ProductionOrder@1002 : Record 5405;ItemNo@1000 : Code[20];ItemTrackingMode@1001 : Option);
    VAR
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,ItemNo,LibraryRandom.RandInt(10),'','');

      // Assign Item Tracking On Production Order Line
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode);
      ProdOrderLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateReleasedProdOrderWithManuallyScheduledRoutingLine@152(VAR ProdOrderRoutingLine@1000 : Record 5409);
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1001 : Record 5405;
      RoutingHeader@1004 : Record 99000763;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateRoutingWithSetupWaitAndMoveTime(RoutingHeader);
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);

      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandDec(100,2),'','');

      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderRoutingLine.VALIDATE("Schedule Manually",TRUE);
      ProdOrderRoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJnlWithUpdateQtyAndItemTracking@179(ProductionOrderNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ItemJournalLine,ProductionOrderNo);
      ItemJournalLine.VALIDATE(Quantity,Quantity);
      ItemJournalLine.MODIFY(TRUE);

      // Update the quantity on Item Tracking Line of Output Journal
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Update Quantity");
      LibraryVariableStorage.Enqueue(ItemJournalLine.Quantity);
      ItemJournalLine.OpenItemTrackingLines(FALSE);

      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanningWorksheetPage@113(VAR PlanningWorksheet@1000 : TestPage 99000852;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20];Accept@1006 : Boolean);
    VAR
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1001 : Record 246;
      ProductionOrderType@1005 : ' ,Planned,Firm Planned,Firm Planned & Print';
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName,RequisitionWkshName."Template Type"::Planning);
      LibraryVariableStorage.Enqueue(ItemNo);  // Required for CalculatePlanPlanWkshRequestPageHandler.
      LibraryVariableStorage.Enqueue(ItemNo2);  // Required for CalculatePlanPlanWkshRequestPageHandler.
      COMMIT;  // Required for Test.
      OpenPlanningWorksheetPage(PlanningWorksheet,RequisitionWkshName.Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.

      IF Accept THEN BEGIN
        // Accept Action Message and Carry Out Action Message
        LibraryVariableStorage.Enqueue(ProductionOrderType::"Firm Planned"); // Required for CarryOutActionMessageHandler.
        AcceptActionMessage(RequisitionLine,ItemNo);
        AcceptActionMessage(RequisitionLine,ItemNo2);
        COMMIT; // Required for Test.
        PlanningWorksheet.CarryOutActionMessage.INVOKE; // Invoke Carry Out Action Message handler.
      END;
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE DeleteProductionOrderComponent@82(ProductionOrderNo@1001 : Code[20]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      ProdOrderComponent.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindProductionOrderComponent@9(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@124(VAR ProdOrderLine@1001 : Record 5406;ItemNo@1000 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@7(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1002 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindProductionOrderRoutingLine@97(VAR ProdOrderRoutingLine@1000 : Record 5409;ProductionOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@8(VAR WarehouseActivityHeader@1001 : Record 5766;SourceNo@1002 : Code[20];SourceDocument@1003 : Option;ActionType@1004 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument,ActionType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@21(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20];SourceDocument@1002 : Option;ActionType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindLastOperationNo@26(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE FindRegisteredWarehouseActivityLine@220(VAR RegisteredWhseActivityLine@1001 : Record 5773;SourceDocument@1004 : Option;SourceNo@1003 : Code[20];ActionType@1000 : Option);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FilterFirmPlannedProductionOrder@213(VAR ProductionOrder@1001 : Record 5405;SourceNo@1000 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@189(VAR RequisitionLine@1001 : Record 246;No@1000 : Code[20]);
    BEGIN
      FilterRequisitionLine(RequisitionLine,No);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPlanningRoutingLine@199(VAR PlanningRoutingLine@1001 : Record 99000830;RequisitionLine@1000 : Record 246);
    BEGIN
      PlanningRoutingLine.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      PlanningRoutingLine.SETRANGE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
      PlanningRoutingLine.SETRANGE("Worksheet Line No.",RequisitionLine."Line No.");
      PlanningRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterRequisitionLine@50(VAR RequisitionLine@1001 : Record 246;No@1000 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
    END;

    LOCAL PROCEDURE OpenPlanningWorksheetPage@109(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10]);
    BEGIN
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.CurrentWkshBatchName.SETVALUE(Name);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@18(SourceNo@1001 : Code[20];SourceDocument@1002 : Option;ActionType@1003 : Option);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo,SourceDocument,ActionType);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE SelectItemJournalLine@211(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectItemTrackingForProdOrderComponents@131(ItemNo@1001 : Code[20]);
    VAR
      ProdOrderComponents@1000 : TestPage 99000818;
    BEGIN
      ProdOrderComponents.OPENEDIT;
      ProdOrderComponents.FILTER.SETFILTER("Item No.",ItemNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries"); // Enqueue ItemTrackingMode for ItemTrackingPageHandler.
      ProdOrderComponents.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@107(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateFlushingMethodOnProdComp@133(ProductionOrderNo@1001 : Code[20];FlushingMethod@1002 : Option);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      ProdOrderComponent.VALIDATE("Flushing Method",FlushingMethod);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetupComponentsAtLocation@5(NewComponentsAtLocation@1000 : Code[10]) ComponentsAtLocation : Code[10];
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ComponentsAtLocation := ManufacturingSetup."Components at Location";
      ManufacturingSetup.VALIDATE("Components at Location",NewComponentsAtLocation);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityAndLotNoOnWarehouseActivityLine@6(ItemNo@1000 : Code[20];ProductionOrderNo@1001 : Code[20];ActionType@1003 : Option;Quantity@1002 : Decimal);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ItemNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,ProductionOrderNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",ActionType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE(Quantity,Quantity);
        WarehouseActivityLine.VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
        WarehouseActivityLine.MODIFY(TRUE);
        ItemLedgerEntry.NEXT;
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateLocationSetup@119(VAR Location@1001 : Record 14;NewAlwaysCreatePickLine@1000 : Boolean) AlwaysCreatePickLine : Boolean;
    BEGIN
      AlwaysCreatePickLine := Location."Always Create Pick Line";
      Location.VALIDATE("Always Create Pick Line",NewAlwaysCreatePickLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryWithWhseItemJournal@114(VAR Item@1001 : Record 27;Location@1000 : Record 14;Quantity@1002 : Decimal);
    VAR
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      // Register the Warehouse Item Journal Lines.
      WarehouseJournalSetup(Location.Code);
      CreateWarehouseJournalLine(Item,WarehouseJournalLine,Location,Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);

      // Calculate Warehouse adjustment and post Item Journal.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignNoSeriesForItemJournalBatch(ItemJournalBatch,'');  // Value required to avoid the Document No mismatch.
    END;

    LOCAL PROCEDURE UpdateBinCodeOnWarehouseActivityLine@111(SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      Bin@1002 : Record 7354;
    BEGIN
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      FindWarehouseActivityLine(
        WarehouseActivityLine,SourceNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostOnItem@71(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingStatus@112(VAR RoutingHeader@1000 : Record 99000763;Status@1001 : Option);
    BEGIN
      RoutingHeader.VALIDATE(Status,Status);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingLineSendAheadQty@128(RoutingNo@1002 : Code[20];SendAheadQuantity@1003 : Decimal);
    VAR
      RoutingLine@1001 : Record 99000764;
      RoutingHeader@1000 : Record 99000763;
    BEGIN
      RoutingHeader.GET(RoutingNo);
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::"Under Development");
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.FINDFIRST;
      RoutingLine.VALIDATE("Send-Ahead Quantity",SendAheadQuantity);
      RoutingLine.MODIFY(TRUE);
      UpdateRoutingStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE UpdateSetupTimeInProdOrderRoutingLine@151(VAR ProdOrderRoutingLine@1000 : Record 5409;NewSetupTime@1001 : Decimal);
    BEGIN
      ProdOrderRoutingLine.VALIDATE("Setup Time",NewSetupTime);
      ProdOrderRoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemParametersForPlanning@66(VAR Item@1000 : Record 27);
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      Item.FIND;  // Used to avoid the Transaction error.
      LibraryPurchase.CreateVendor(Vendor);
      Item.VALIDATE("Vendor No.",Vendor."No.");
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemParametersForPlanningWorksheet@117(VAR Item@1000 : Record 27;ManufacturingPolicy@1001 : Option;ReorderingPolicy@1002 : Option;ReplenishmentSystem@1003 : Option);
    BEGIN
      WITH Item DO BEGIN
        VALIDATE("Manufacturing Policy",ManufacturingPolicy);
        VALIDATE("Reordering Policy",ReorderingPolicy);
        VALIDATE("Replenishment System",ReplenishmentSystem);
        MODIFY(TRUE);
      END
    END;

    LOCAL PROCEDURE UpdateQuantityOnRequisitionLine@193(VAR RequisitionLine@1001 : Record 246;Quantity@1000 : Decimal);
    BEGIN
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateOrderTrackingPolicyOnItem@53(VAR Item@1001 : Record 27;OrderTrackingPolicy@1000 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingMessage);  // Enqueue variable for use in MessageHandler.
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToShipOnSalesLine@94(VAR SalesLine@1001 : Record 37;QtytoShip@1000 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtytoShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnProdOrderLine@187(ItemNo@1001 : Code[20];Qty@1000 : Decimal);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      ProdOrderLine.VALIDATE("Quantity (Base)",Qty);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryCostAmountActual@73(EntryType@1002 : Option;ItemNo@1001 : Code[20];CostAmountActual@1005 : Decimal;LocationCode@1000 : Code[10]);
    VAR
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      Assert.AreNearlyEqual(
        CostAmountActual,ItemLedgerEntry."Cost Amount (Actual)",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemLedgerEntry.FIELDCAPTION("Cost Amount (Actual)"),CostAmountActual));
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyProdOrderComponent@62(ProdOrderNo@1004 : Code[20];Status@1003 : Option;ItemNo@1002 : Code[20];ReservedQuantity@1001 : Decimal);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.TESTFIELD(Status,Status);
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      ProdOrderComponent.CALCFIELDS("Reserved Quantity");
      ProdOrderComponent.TESTFIELD("Reserved Quantity",ReservedQuantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@55(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;Tracking@1004 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // Verify the Item Ledger Entry has correct Quantity and has Tracking.
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      REPEAT
        ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
        IF Tracking THEN
          ItemLedgerEntry.TESTFIELD("Lot No.");
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyProductionOrder@150(ProductionOrder@1003 : Record 5405;Status@1001 : Option;Quantity@1002 : Decimal;DueDate@1004 : Date);
    BEGIN
      ProductionOrder.GET(Status,ProductionOrder."No.");
      ProductionOrder.TESTFIELD(Quantity,Quantity);
      ProductionOrder.TESTFIELD("Due Date",DueDate);
    END;

    LOCAL PROCEDURE VerifyReservationQtyOnSalesLine@36(DocumentNo@1000 : Code[20];ReservedQuantity@1002 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",ReservedQuantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLine@164(SourceNo@1004 : Code[20];SourceDocument@1003 : Option;ItemNo@1001 : Code[20];Quantity@1006 : Decimal;ActionType@1000 : Option);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument,ActionType);
      REPEAT
        WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
        WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@76(SourceNo@1000 : Code[20];ItemNo@1002 : Code[20];BinCode@1004 : Code[20];Quantity@1006 : Decimal;LocationCode@1001 : Code[10]);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD("Bin Code",BinCode);
      PostedInvtPickLine.TESTFIELD(Quantity,Quantity);
      PostedInvtPickLine.TESTFIELD("Location Code",LocationCode);
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ItemNo);
      PostedInvtPickLine.TESTFIELD("Lot No.",ItemLedgerEntry."Lot No.");
    END;

    LOCAL PROCEDURE VerifyRegisteredWarehouseActivityLine@234(SourceDocument@1004 : Option;SourceNo@1003 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal;ActionType@1005 : Option);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      FindRegisteredWarehouseActivityLine(RegisteredWhseActivityLine,SourceDocument,SourceNo,ActionType);
      RegisteredWhseActivityLine.TESTFIELD("Item No.",ItemNo);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRevaluationJournalLine@226(ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
      Item@1002 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Unit Cost (Revalued)",Item."Last Direct Cost");
      ItemJournalLine.TESTFIELD("Inventory Value (Revalued)",ROUND(Quantity * Item."Last Direct Cost"));
    END;

    LOCAL PROCEDURE VerifyCostAmountActualOnFinishedProductionOrderStatisticsPage@10(ProductionOrderNo@1001 : Code[20];ActualCost@1003 : Decimal);
    VAR
      FinishedProductionOrder@1000 : TestPage 99000867;
      ProductionOrderStatistics@1002 : TestPage 99000816;
    BEGIN
      FinishedProductionOrder.OPENEDIT;
      FinishedProductionOrder.FILTER.SETFILTER("No.",ProductionOrderNo);
      ProductionOrderStatistics.TRAP;
      FinishedProductionOrder."Page Production Order Statistics".INVOKE;
      ProductionOrderStatistics.MaterialCost_ActualCost.ASSERTEQUALS(ActualCost);
    END;

    LOCAL PROCEDURE VerifyRemainingQuantityOnProdOrderComponents@43(ProdOrderNo@1004 : Code[20];Status@1003 : Option;ItemNo@1002 : Code[20];RemainingQuantity@1005 : Decimal);
    VAR
      ProdOrderComponent@1000 : Record 5407;
      TotalRemainingQuantity@1001 : Decimal;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProdOrderNo);
      ProdOrderComponent.TESTFIELD(Status,Status);
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      TotalRemainingQuantity := CalculateRemainingQuantityOnProductionOrderComponent(ProdOrderNo);
      Assert.AreEqual(TotalRemainingQuantity,RemainingQuantity,ValidationError);
    END;

    LOCAL PROCEDURE VerifyRoutingOnAllocatedCapacity@166(ProductionOrder@1001 : Record 5405);
    VAR
      ProdOrderCapacityNeed@1000 : Record 5410;
      ProdOrderRoutingLine@1004 : Record 5409;
    BEGIN
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");
      ProdOrderCapacityNeed.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderCapacityNeed.FINDSET;
      REPEAT
        ProdOrderCapacityNeed.TESTFIELD("Routing No.",ProductionOrder."Routing No.");
        ProdOrderCapacityNeed.TESTFIELD("Work Center No.",ProdOrderRoutingLine."Work Center No.");
      UNTIL ProdOrderCapacityNeed.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyProductionOrderRoutingLine@265(ProductionOrderNo@1001 : Code[20];RoutingNo@1002 : Code[20];SendAheadQuantity@1003 : Decimal);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
    BEGIN
      FindProductionOrderRoutingLine(ProdOrderRoutingLine,ProductionOrderNo);
      ProdOrderRoutingLine.TESTFIELD("Routing No.",RoutingNo);
      ProdOrderRoutingLine.TESTFIELD("Send-Ahead Quantity",SendAheadQuantity);
    END;

    LOCAL PROCEDURE VerifyInputQuantityOnPlanningRoutingLine@169(RequisitionLine@1000 : Record 246);
    VAR
      PlanningRoutingLine@1002 : Record 99000830;
    BEGIN
      FindPlanningRoutingLine(PlanningRoutingLine,RequisitionLine);
      PlanningRoutingLine.TESTFIELD("Input Quantity",RequisitionLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@40(ItemNo@1000 : Code[20];Quantity@1001 : Decimal;ReservationStatus@1002 : Option;Tracking@1005 : Boolean;Positive@1006 : Boolean);
    VAR
      ReservationEntry@1003 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE(Positive,Positive);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry.TESTFIELD(Quantity,Quantity);
        ReservationEntry.TESTFIELD("Reservation Status",ReservationStatus);
        IF Tracking THEN
          ReservationEntry.TESTFIELD("Lot No.");
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLocationAndQuantityOnPurchaseLine@72(No@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Location Code",LocationCode);
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@68(No@1001 : Code[20];ActionMessage@1003 : Option;Quantity@1007 : Decimal;LocationCode@1006 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,No);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Action Message",ActionMessage);
    END;

    LOCAL PROCEDURE VerifyOrderTrackingForProductionOrder@52(ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      ProdOrderLine@1001 : Record 5406;
      OrderTracking@1000 : Page 99000822;
      OrderTracking2@1002 : TestPage 99000822;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      OrderTracking.SetProdOrderLine(ProdOrderLine);
      OrderTracking2.TRAP;
      OrderTracking.RUN;
      OrderTracking2."Item No.".ASSERTEQUALS(ItemNo);
      OrderTracking2.Quantity.ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderLine@127(ItemNo@1000 : Code[20];Status@1003 : Option;Quantity@1001 : Decimal;FinishedQuantity@1002 : Decimal);
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      ProdOrderLine.TESTFIELD(Status,Status);
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
      ProdOrderLine.TESTFIELD("Finished Quantity",FinishedQuantity);
    END;

    LOCAL PROCEDURE VerifyOneProdOrderLine@146(ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ItemNo);
      Assert.RecordCount(ProdOrderLine,1);
      ProdOrderLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE AreSameMessages@149(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@103(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@47(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);  // Dequeue variable.
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Assign Lot No.":
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::"Update Quantity":
          BEGIN
            LibraryVariableStorage.Dequeue(DequeueVariable);
            ItemTrackingLines."Quantity (Base)".SETVALUE(DequeueVariable);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@61(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanPlanWkshRequestPageHandler@51(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    VAR
      ItemNo@1001 : Variant;
      ItemNo2@1002 : Variant;
    BEGIN
      // Calculate Regenerative Plan on WORKDATE.
      LibraryVariableStorage.Dequeue(ItemNo);
      LibraryVariableStorage.Dequeue(ItemNo2);
      CalculatePlanPlanWksh.Item.SETFILTER("No.",STRSUBSTNO(ItemFilter,ItemNo,ItemNo2));
      CalculatePlanPlanWksh.MRP.SETVALUE(TRUE);  // Use MRP True.
      CalculatePlanPlanWksh.StartingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.EndingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationEntriesModalPageHandler@171(VAR ReservationEntries@1000 : TestPage 497);
    BEGIN
      LibraryVariableStorage.Enqueue(CancelReservationTxt);
      ReservationEntries.CancelReservation.INVOKE;
      ReservationEntries.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@348(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(AreSameMessages(Message,ExpectedMessage),Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@88(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(ConfirmMessage,ExpectedMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CarryOutActionMessageHandler@120(VAR CarryOutActionMsgPlan@1000 : TestRequestPage 99001020);
    VAR
      ProductionOrderType@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ProductionOrderType);
      CarryOutActionMsgPlan.ProductionOrder.SETVALUE(ProductionOrderType); // Production Order field of page.
      CarryOutActionMsgPlan.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [Production Order] [SCM]
      Test cases for SCM Production Order:

       1. Test to verify the Finished Quantity of Item on Production Order Line when Output is posted without Tracking.
       2. Test to verify the Output posted with Component reservation on Released Production Order with Lot Tracking.
       3. Test to verify the Component reservation on Released Production Order with Lot Tracking.
       4. Test to verify the Status changed for Released Production Order with Consumption and Output posted with Tracking.
       5. Test to verify the Handling error with Released Production Order with Bins.
       6. Test to verify the posted Consumption with Location and Bin from Released Production Order.
       7. Test to verify the Location Code on Firm Planned Production Order Line.
       8. Test to verify the Planned Production Order Component reservation with Location.
       9. Test to verify the Inventory Pick is created from Released Production Order with Lot Tracking and Bins.
      10. Test to verify that Inventory Pick is posted successfully from Released Production Order with Lot Tracking, partial quantity and Bins.
      11. Test to verify the Input Quantity when Replan Firm Planned Production Order With Routing.
      12. Test to verify the Partial Auto Reservation on Sales Order.
      13. Test to verify the Registered Pick from Released Production Order with component.
      14. Test to verify the Item Ledger Entry for posted consumption with Production Order after register Pick.
      15. Test to verify the Item Ledger Entry for posted output with Production Order after register Pick.
      16. Test to verify the Item Ledger Entry after Adjust Cost Item Entries is run with consumption posted with Production Order.
      17. Test to verify the Revaluation Journal Line after Calculate Inventory is run with consumption and output posted with Production Order.
      18. Test to verify the Output Quantity posted from Released Production Order with Location and Bin.
      19. Test to verify the Consumption Entry for the Child Item in Item Ledger Entry after Cost adjustment from Released Production Order with Location and Bin.
      20. Test to verify the Status successfully changed to Finished when posting less Output from Production Order with Location and Bin.
      21. Test to verify the Output Quantity posted from Released Production Order without Location.
      22. Test to verify the Output Entry for the Parent Item in Item Ledger Entry after Cost adjustment from Released Production Order without Location.
      23. Test to verify the posted Consumption from Released Production Order without Location.
      24. Test to verify Production Order Lines after create and refresh Production Order with Family.
      25. Test to verify the Actual Cost on Production Order Statistics Page for Finished Production Order with Family.
      26. Test to verify the Consumption Entry for the Child Items in Item Ledger Entry after calculate and post Consumption for Released Production Order with Family.
      27. Test to verify the Output Entry for the Parent Items in Item Ledger Entry after calculate and post Consumption and Output for Released Production Order with Family.
      28. Test to verify the total Remaining Quantity on Production Order Components is correct.
      29. Test to verify the total Remaining Quantity on Production Order Components is correct when deleting one Production Order Component.
      30. Test to verify the Routing on Allocated Capacity for Firm Planned Production Order.
      31. Test to verify the Routing on Allocated Capacity for Firm Planned Production Order after calculate Plan and Carry Out Action Message.
      32. Test to verify the Send Ahead Quantity for Firm Planned Production Order after calculate Plan and Carry Out Action Message with Routing.
      33. Test to verify the Send Ahead Quantity on Firm Planned Production Order with Routing.
      34. Test to verify the Changed Starting Date on Production Order Routing Line after refresh as Scheduling Back.
      35. Test to verify the Changed Ending Date on Production Order Routing Line after refresh as Scheduling Forward.
      36. Test to verify that the Input Quantity on Planning Routing Line is same as Quantity on Requisition Line.
      37. Test to verify that the Input Quantity on Planning Routing Line is same as Quantity on Requisition Line after update Quantity on Requisition Line and refresh it.
      38. Test to verify that the Input Quantity on Prod Order Routing Line is same as Quantity on Requisition Line after Calculate Plan and Carry Out Action Message.
      39. Test to verify the Reservation Entry after Calculate Regenerative Plan for an Item on Planning Worksheet.
      40. Test to verify the Reservation Entry after Calculate Regenerative Plan and reservation on Production Order created.
      41. Test to verify the Reservation Entry after Assigning Lot Tracking on Prod. Order with Calculate Plan and Carry Out Action Message.
      42. Test to verify the Routing Link Code is updated on Prod. Order Routing Line successfully from Routing Line.
      43. Test to verify that negative Output can be posted with Output Journal with multiple Components in Production BOM for Released Production Order.
      44. Test to verify the Reservation Entry after create Pick from Released Production Order with Calculate Plan and Carry Out Action Message.
      45. Test to verify that Pick for the Child Item is created for Released Production Order after Calculate Plan and Carry Out Action Message.
      46. Test to verify that Pick for the Child Item is registered for Released Production Order after Calculate Plan and Carry Out Action Message.
      47. Test to verify the Order Tracking for Planned Production Order.
      48. Test to verify the Order Tracking for Firm Planned Production Order after Calculate Plan and Carry Out Action Message.
      49. Test to verify Requisition Line after Calculate Plan On Req. Worksheet with Location and Stockkeeping Unit with maximum Quantity.
      50. Test to verify Purchase Line created after Calculate Plan On Req. Worksheet with Location and Stockkeeping Unit with maximum Quantity.
      51. Test to verify Requisition Line for Child Item after Calculate Regenerative Plan on Planning Worksheet with MRP.
      52. Test to verify Parent and Child Items are carried out into a same Production Order from Planning Worksheet.
      53. Test to verify Production order can be finished with existing item tracking entries.
      54. Test to verify Production order can be finished with component item tracking entries when Flushing Method = Backward.

        Covers Test Cases for WI - 294784
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        FinishedQuantityOnProductionOrderLineWithoutTracking                   127625
        ReserveProdComponentAndPostOutputWithLotTracking                       127625
        ProductionOrderComponentReservationWithLotTracking                     127625
        PostConsumptionAndOutputWithLotTrackingAndFinishedProductionOrder      127520
        PickWithHandlingErrorFromProductionOrderWithBin                        127517
        PostConsumptionWithLocationAndBin                                      127517

        Covers Test Cases for WI - 294794
        -------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        -------------------------------------------------------------------------------
        ReservationOnPlannedProductionOrderComponent                           127566
        FirmPlannedProductionOrderWithLocation                                 127566
        InventoryPickFromProductionOrderWithLotTracking                        127658
        PostedPartialInventoryPickFromProductionOrderWithLotTracking           127658
        ReplanFirmPlannedProductionOrderWithRouting                            135460
        PartialAutoReservationOnSalesOrder                                     135460

        Covers Test Cases for WI - 296995
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        RegisterWarehousePickFromProductionOrderWithComponent                        127530
        PostConsumptionWithProductionOrderAfterRegisterPick                          135458
        PostOutputWithProductionOrderWarehousePick                                   127530
        AdjustItemCostWithProductionOrderAndWarehouseActivity                        127530
        InventoryValueWithProductionOrderAndWarehouseActivity                        127530

        Covers Test Cases for WI - 295212
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        OutputPostFromReleasedProductionOrderWithLocation                            135427
        ItemLedgerEntryForConsumptionAfterAdjustCostWithProductionOrder              135427
        FinishedProductionOrderForLessOutputWithLocationAndBin                       135427

        Covers Test Cases for WI - 295213
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        OutputPostFromReleasedProductionOrderWithoutLocation                         135576
        ItemLedgerEntryForOutputAfterAdjustCostWithReleasedProductionOrder           135576
        ConsumptionPostFromReleasedProductionOrderWithoutLocation                    135576

        Covers Test Cases for WI - 298175
        ------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        ------------------------------------------------------------------------------------------
        ReleasedProductionOrderWithFamily                                                  135584
        ActualCostOnFinishedProductionOrderStatisticsPageForFamily                         135584
        PostConsumptionForReleasedProductionOrderWithFamily                                135584
        PostOutputForReleasedProductionOrderWithFamily                                     135584
        RemainingQuantityWithMultipleProductionOrderComponents                             229536
        RemainingQuantityAfterDeleteProductionComponent                                    229536

        Covers Test Cases for WI - 298980
        ------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        ------------------------------------------------------------------------------------------
        RoutingOnAllocatedCapacityForFirmPlannedProductionOrder                            127978
        RoutingOnAllocatedCapacityForFirmPlannedProductionOrderAfterCalcPlanAndCarryOut    127978
        SendAheadQuantityForFirmPlannedProdOrderAfterCalcPlanAndCarryOut                   127978
        SendAheadQuantityForFirmPlannedProductionOrderWithRouting                          127978
        StartingDateOnRoutingAfterProdOrderRefreshSchedulingBack                           127978
        EndingDateOnRoutingAfterProdOrderRefreshSchedulingForward                          127978

        Covers Test Cases for WI - 300956
        ------------------------------------------------------------------------------------
        Test Function Name                                                          TFS ID
        ------------------------------------------------------------------------------------
        PlanningRoutingLineAfterCalculateRegenPlan                                  229609
        PlanningRoutingLineWithUpdatedReqLineAfterCalculateRegenPlan                229609
        ProdOrderRoutingLineFirmPlannedProdOrderAfterCalcRegenPlanAndCarryOut       229609

        Covers Test Cases for WI - 298982
        --------------------------------------------------------------------------------------------
        Test Function Name                                                                   TFS ID
        --------------------------------------------------------------------------------------------
        ReservationEntryAfterCalculateRegenPlan                                              127524
        ReservationEntryForProdOrderReservationAfterCalculatePlanAndCarryOutAction           127524
        ReservationEntryAfterAssignTrackingOnProdOrderWithCalculatePlanAndCarryOutAction     127524
        ProdOrderRoutingLineAfterRoutingLinkCodeUpdateOnRoutingLine                          124841
        NegativeOutputPostedForProductionOrderWithMultipleComponents                         124841

        Covers Test Cases for WI - 295214
        ----------------------------------------------------------------------------------------------
        Test Function Name                                                                     TFS ID
        ----------------------------------------------------------------------------------------------
        ReservationEntryForPickAndReleasedProductionOrderAfterCalculatePlanAndCarryOutAction   127663
        WhseActivityLineForReleasedProductionOrderAfterCalculatePlanAndCarryOutAction          127663
        RegisterPickFromReleasedProductionOrderAfterCalculatePlanAndCarryOutAction             127663
        OrderTrackingForPlannedProductionOrder                                                 127586
        OrderTrackingForFirmPlannedProductionOrderAfterCalculatePlanAndCarryOutAction          127586

        Covers Test Cases for WI - 298983
        -------------------------------------------------------------------------------------------------
        Test Function Name                                                                        TFS ID
        -------------------------------------------------------------------------------------------------
        RequisitionLineAfterCalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem                  127690
        PurchaseLineAfterCalcPlanReqWkshWithLocationAndSKUMaximumQuantityItem                     127690
        RequisitionLineComponentItemAfterCalcRegenPlanOnPlanningWkshWithMRP                       127690

        Covers Test Cases for WI - 345024
        -------------------------------------------------------------------------------------------------
        Test Function Name                                                                        TFS ID
        -------------------------------------------------------------------------------------------------
        FirmPlannedProductionOrderWithParentAndChild                                              55094

        Covers Test Cases for Sicily Merge Bug
        -------------------------------------------------------------------------------------------------
        Test Function Name                                                                        TFS ID
        -------------------------------------------------------------------------------------------------
        FinishProdOrderWithExistingItemTrackingEntry                                              66644
        FinishProdOrderWithItemTrackingForBackwardFlushingComp                                    90862
    }
    END.
  }
}

