OBJECT Codeunit 137098 SCM Kitting-D5B-ItemTracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1016 : Codeunit 130000;
      LibraryAssembly@1000 : Codeunit 132207;
      LibraryInventory@1001 : Codeunit 132201;
      LibrarySales@1020 : Codeunit 130509;
      LibraryUtility@1019 : Codeunit 131000;
      LibraryRandom@1002 : Codeunit 130440;
      GLB_ITPageHandler@1008 : 'AssignITSpec,SelectITSpec,AssignITSpecPartial,FromILEs';
      PAR_ITPage_AssignSerial@1009 : Boolean;
      PAR_ITPage_AssignLot@1010 : Boolean;
      PAR_ITPage_AssignPartial@1018 : Boolean;
      PAR_ITPage_AssignQty@1017 : Integer;
      PAR_ITSummaryPage_RowsExpected@1003 : Boolean;
      PAR_ITPage_ItemNo@1006 : Code[20];
      IsInitialized@1014 : Boolean;
      Tracking@1005 : 'Untracked,Lot,Serial,LotSerial';
      ErrorQtyHandle@1004 : TextConst 'ENU=Qty. to Handle (Base) in Tracking Specification for';
      LotNoAvailabilityWarning@1012 : TextConst 'ENU=You have insufficient quantity of Item %1 on inventory.';
      SerialNoAvailabilityWarning@1011 : TextConst 'ENU=You have insufficient quantity of Item %1 on inventory.';
      WorkDate2@1007 : Date;
      SerialNoRequiredErr@1013 : TextConst '@@@=%1 - Item No.;ENU=You must assign a serial number for item %1.';

    LOCAL PROCEDURE Initialize@6();
    VAR
      AssemblySetup@1002 : Record 905;
      MfgSetup@1004 : Record 99000765;
      LibraryERMCountryData@1006 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      MfgSetup.GET;
      WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
      LibraryAssembly.UpdateAssemblySetup(AssemblySetup,'',AssemblySetup."Copy Component Dimensions from"::"Item/Resource Card",
        LibraryUtility.GetGlobalNoSeriesCode);
      LibrarySales.SetCreditWarningsToNoWarnings;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PC1_ItemTrackingOnHeader@76(VAR AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyLine@1001 : Record 901;
      KitItem@1005 : Record 27;
      CompItem@1004 : Record 27;
    BEGIN
      // Standard setup with LotSerial Kit and untracked Component items
      // with IT spec assigned on header.

      Initialize;

      CreateTrackedItem(CompItem,Tracking::Untracked);
      CreateTrackedItem(KitItem,Tracking::LotSerial);

      CreateAssemblyHeader(AssemblyHeader,KitItem,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AddToInventory(CompItem,AssemblyLine.Quantity);

      AssignItemTrackingToHeader(AssemblyHeader);
    END;

    LOCAL PROCEDURE PC2_ItemTracing@62(VAR AssemblyHeader@1003 : Record 900;VAR AssemblyLine@1002 : Record 901;VAR AssemblyLine2@1001 : Record 901;VAR SalesHeader@1000 : Record 36;Sell@1007 : Boolean);
    VAR
      KitItem@1006 : Record 27;
      CompItem@1005 : Record 27;
      CompItemLot@1004 : Record 27;
    BEGIN
      Initialize;

      // Item tracing for lot- and serial tracked components, and lotserial kit item
      // Post in Item Journal
      // Post Assembly Order
      // Post a Sales Order for assembled items
      // Validate Item Tracing lines from Usage to Origin

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItem,Tracking::LotSerial);
      CreateTrackedItem(CompItemLot,Tracking::Lot);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,3 + RandomQuantity(10));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine2,CompItemLot,3 + RandomQuantity(10));

      AddToInventory(CompItem,AssemblyLine.Quantity);
      AddToInventory(CompItemLot,AssemblyLine2.Quantity);

      AssignItemTrackingToHeader(AssemblyHeader);
      SelectItemTrackingOnLines(AssemblyHeader,TRUE);
      PostAssemblyHeader(AssemblyHeader);

      IF Sell THEN BEGIN
        CreateSalesHeader(SalesHeader);
        CreateSalesLineWithITSpec(SalesHeader,AssemblyHeader."Item No.",1);
        PostSalesHeader(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE PC3_ItemTracingNonITComponents@113(VAR AssemblyHeader@1000 : Record 900;VAR AssemblyLine@1001 : Record 901;VAR AssemblyLine2@1002 : Record 901);
    VAR
      KitItem@1003 : Record 27;
      CompItem@1004 : Record 27;
      CompItemUntracked@1005 : Record 27;
    BEGIN
      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItem,Tracking::LotSerial);
      CreateTrackedItem(CompItemUntracked,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine2,CompItemUntracked,RandomQuantity(20));

      AddToInventory(CompItem,AssemblyLine.Quantity);
      AddToInventory(CompItemUntracked,AssemblyLine2.Quantity);

      AssignItemTrackingToHeader(AssemblyHeader);
      SelectItemTrackingOnLines(AssemblyHeader,TRUE);
      PostAssemblyHeader(AssemblyHeader);
    END;

    LOCAL PROCEDURE PC4_PartialPostHeader@60(VAR AssemblyHeader@1000 : Record 900;VAR AssemblyLine@1001 : Record 901;VAR PartialQuantity@1004 : Integer);
    VAR
      KitItem@1002 : Record 27;
      CompItem@1003 : Record 27;
    BEGIN
      Initialize;

      CreateTrackedItem(KitItem,Tracking::Lot);
      CreateTrackedItem(CompItem,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,LibraryRandom.RandIntInRange(3,20));
      PartialQuantity := LibraryRandom.RandIntInRange(1,AssemblyHeader.Quantity - 1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AssemblyHeader.VALIDATE("Quantity to Assemble",PartialQuantity);
      AssemblyHeader.MODIFY(TRUE);
      AddToInventory(CompItem,AssemblyHeader.Quantity);
      AssignItemTrackingToHeader(AssemblyHeader);

      PostAssemblyHeader(AssemblyHeader);
      Reopen(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITComp_UOM@100();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1004 : Record 901;
      ItemUnitOfMeasure@1002 : Record 5404;
      KitItem@1001 : Record 27;
      CompItem@1006 : Record 27;
    BEGIN
      // 1) Create kit item with UOM
      // 2) Create AO for kit item with that UOM
      // 3) Assert that item tracking applies header UOM when tracking kits

      Initialize;

      CreateTrackedItem(CompItem,Tracking::LotSerial);
      CreateTrackedItem(KitItem,Tracking::Untracked);

      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,CompItem."No.",LibraryRandom.RandInt(3));

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AssemblyLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      AssemblyLine.MODIFY(TRUE);
      AddToInventory(CompItem,ItemUnitOfMeasure."Qty. per Unit of Measure" + 1);

      SelectItemTrackingOnLines(AssemblyHeader,TRUE);

      ValidateResEntryCountLines(AssemblyHeader,ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary)]
    PROCEDURE ITComp_ExcessQuantity@35();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      KitItem@1003 : Record 27;
      CompItem@1004 : Record 27;
    BEGIN
      // 1) Create AO with excess quantity to consume
      // 2) Assign item tracking
      // 3) Post

      Initialize;

      CreateTrackedItem(CompItem,Tracking::Lot);
      CreateTrackedItem(KitItem,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,2);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,RandomQuantity(10) * 2);
      AddToInventory(CompItem,AssemblyLine.Quantity * 2);

      AssemblyHeader.VALIDATE("Quantity to Assemble",1);
      AssemblyHeader.MODIFY(TRUE);
      SelectItemTrackingOnLines(AssemblyHeader,TRUE);
      PostAssemblyHeader(AssemblyHeader);
      Reopen(AssemblyHeader);

      AssemblyLine.GET(AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.");
      AssemblyLine.VALIDATE("Quantity per",AssemblyLine."Quantity per" * 2);
      AssemblyLine.MODIFY(TRUE);

      SelectItemTrackingOnLines(AssemblyHeader,TRUE);
      PostAssemblyHeader(AssemblyHeader);

      ValidateResEntryCountLines(AssemblyHeader,0);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITComp_DeficientQuantity@56();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      KitItem@1003 : Record 27;
      CompItem@1004 : Record 27;
    BEGIN
      // 1) Create AO with deficient quantity to consume
      // 2) Assign item tracking
      // 3) Post

      Initialize;

      CreateTrackedItem(CompItem,Tracking::LotSerial);
      CreateTrackedItem(KitItem,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,RandomQuantity(20));
      AssemblyLine.VALIDATE("Quantity to Consume",RandomQuantity(AssemblyLine."Quantity to Consume" - 2));
      AssemblyLine.MODIFY(TRUE);
      AddToInventory(CompItem,AssemblyLine."Quantity to Consume");

      SelectItemTrackingOnLines(AssemblyHeader,TRUE);

      ValidateResEntryCountLines(AssemblyHeader,AssemblyLine."Quantity to Consume");

      PostAssemblyHeader(AssemblyHeader);

      ValidateResEntryCountLines(AssemblyHeader,0);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty)]
    PROCEDURE ITComp_NonspecOutbound@2();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      KitItem@1001 : Record 27;
      CompItem@1002 : Record 27;
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1004 : Record 901;
    BEGIN
      // 1) Create non-specific item tracking code
      // 2) Create kit & component items with non-specific item tracking code
      // 3) Try to post without inbound item tracking
      // 4) Post without outbound item tracking

      Initialize;

      CreateNonSpecOutBoundITCode(ItemTrackingCode);

      LibraryInventory.CreateItem(KitItem);
      LibraryInventory.CreateItem(CompItem);
      SetItemTrackingCode(CompItem,ItemTrackingCode);

      CreateAssemblyHeader(AssemblyHeader,KitItem,RandomQuantity(10));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,RandomQuantity(10));
      AddToInventoryLocationVariant(CompItem,AssemblyLine.Quantity,Tracking::LotSerial,'','');

      PostAssemblyHeader(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty,HNDL_ConfirmYes)]
    PROCEDURE ITComp_Availability@54();
    VAR
      KitItem@1004 : Record 27;
      CompItemLot@1000 : Record 27;
      CompItemSerial@1001 : Record 27;
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1003 : Record 901;
      AssemblyLine2@1006 : Record 901;
    BEGIN
      // 1) Post two Assembly Orders with same ITSpec
      // 2) Make sure that Lot/Serial Nos. are unavailable posting of second AO

      Initialize;

      // Post AO with one Serial- and one Lot No. tracked item
      CreateTrackedItem(KitItem,Tracking::Untracked);
      CreateTrackedItem(CompItemLot,Tracking::Lot);
      CreateTrackedItem(CompItemSerial,Tracking::Serial);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItemLot,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine2,CompItemSerial,RandomQuantity(20));

      AddToInventory(CompItemLot,AssemblyLine.Quantity);
      AddToInventory(CompItemSerial,AssemblyLine2.Quantity);

      AssignItemTrackingToLines(AssemblyHeader);
      PostAssemblyHeader(AssemblyHeader);

      // Try to post with the same Lot No.
      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItemLot,AssemblyLine.Quantity);
      // Assert there is an availability warning
      AssignItemTrackingToLines(AssemblyHeader);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,
        STRSUBSTNO(LotNoAvailabilityWarning,CompItemLot."No."));

      // Try to post with the same Serial No.
      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItemSerial,AssemblyLine2.Quantity);
      // Assert there is an availability warning
      AssignItemTrackingToLines(AssemblyHeader);
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,
        STRSUBSTNO(SerialNoAvailabilityWarning,CompItemSerial."No."));
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty,HNLD_ItemTrackingSummary)]
    PROCEDURE ITAsm_Resource@1000();
    VAR
      KitItem@1000 : Record 27;
      CompItemLot@1002 : Record 27;
      CompItemSerial@1003 : Record 27;
      CompItemLotSerial@1001 : Record 27;
      Resource@1004 : Record 156;
      AssemblyHeader@1006 : Record 900;
      AssemblyLineLot@1005 : Record 901;
      AssemblyLineSerial@1007 : Record 901;
      AssemblyLineLotSerial@1008 : Record 901;
    BEGIN
      // Item tracking on header and lines, in combination with a resource line

      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItemLot,Tracking::Lot);
      CreateTrackedItem(CompItemSerial,Tracking::Serial);
      CreateTrackedItem(CompItemLotSerial,Tracking::LotSerial);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLineLot,CompItemLot,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLineSerial,CompItemSerial,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLineLotSerial,CompItemLotSerial,RandomQuantity(20));
      Resource.NEXT(RANDOM(Resource.COUNT));
      CreateAssemblyLineResource(AssemblyHeader,Resource,RandomQuantity(20));

      AddToInventory(CompItemLot,AssemblyLineLot.Quantity);
      AddToInventory(CompItemSerial,AssemblyLineSerial.Quantity);
      AddToInventory(CompItemLotSerial,AssemblyLineLotSerial.Quantity);

      AssignItemTrackingToHeader(AssemblyHeader);
      SelectItemTrackingOnLines(AssemblyHeader,TRUE);

      PostAssemblyHeader(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty,HNLD_ItemTrackingSummary)]
    PROCEDURE ITAsm_ExpiryDate@21();
    VAR
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1003 : Record 901;
      ItemTrackingCode@1005 : Record 6502;
      KitItem@1000 : Record 27;
      CompItem@1001 : Record 27;
    BEGIN
      Initialize;

      CreateTrackedItem(KitItem,Tracking::Untracked);
      CreateTrackedItem(CompItem,Tracking::Serial);

      ItemTrackingCode.GET(CompItem."Item Tracking Code");
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",TRUE);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",TRUE);
      ItemTrackingCode.MODIFY(TRUE);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      AssemblyHeader.VALIDATE("Posting Date",WorkDate2 + 4);
      AssemblyHeader.MODIFY(TRUE);

      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,5);

      AddToInventoryExpiryDate(CompItem,10,WorkDate2);

      SelectItemTrackingOnLines(AssemblyHeader,TRUE);

      ASSERTERROR PostAssemblyHeader(AssemblyHeader);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,'Expiration Date') > 0,
        'Unexpected error message');

      Reopen(AssemblyHeader);

      AssemblyHeader.GET(AssemblyHeader."Document Type",AssemblyHeader."No.");
      AssemblyHeader.VALIDATE("Posting Date",WorkDate2);
      AssemblyHeader.MODIFY(TRUE);
      PostAssemblyHeader(AssemblyHeader);

      ValidateResEntryCountHeader(AssemblyHeader,0);
      ValidateResEntryCountLines(AssemblyHeader,0);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty)]
    PROCEDURE ITAsm_UOM@55();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1004 : Record 901;
      ItemUnitOfMeasure@1002 : Record 5404;
      KitItem@1001 : Record 27;
      CompItem@1006 : Record 27;
    BEGIN
      // 1) Create kit item with UOM
      // 2) Create AO for kit item with that UOM
      // 3) Assert that UOM is applied when assigning item tracking spec to header.

      Initialize;

      CreateTrackedItem(CompItem,Tracking::Untracked);
      CreateTrackedItem(KitItem,Tracking::LotSerial);

      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,KitItem."No.",LibraryRandom.RandInt(3));

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      AssemblyHeader.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      AssemblyHeader.MODIFY(TRUE);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AddToInventory(CompItem,4);

      AssignItemTrackingToHeader(AssemblyHeader);

      ValidateResEntryCountHeader(AssemblyHeader,ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty,HNLD_ItemTrackingSummary,HNDL_MessageOK,HNDL_ConfirmYes)]
    PROCEDURE ITQuote_Sunshine@74();
    VAR
      KitItem@1009 : Record 27;
      CompItemUntracked@1005 : Record 27;
      CompItemLot@1008 : Record 27;
      CompItemSerial@1007 : Record 27;
      CompItemLotSerial@1006 : Record 27;
      AssemblyHeaderQuote@1004 : Record 900;
      AssemblyHeader@1014 : Record 900;
      AssemblyLineUntracked@1000 : Record 901;
      AssemblyLineLot@1003 : Record 901;
      AssemblyLineSerial@1002 : Record 901;
      AssemblyLineLotSerial@1001 : Record 901;
      SalesHeaderQuote@1013 : Record 36;
      SalesHeader@1011 : Record 36;
      Resource@1010 : Record 156;
      SalesQuotePage@1012 : TestPage 41;
    BEGIN
      // test item tracking with assembly quotes
      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItemUntracked,Tracking::Untracked);
      CreateTrackedItem(CompItemLot,Tracking::Lot);
      CreateTrackedItem(CompItemSerial,Tracking::Serial);
      CreateTrackedItem(CompItemLotSerial,Tracking::LotSerial);

      CreateSalesQuote(SalesHeaderQuote);
      CreateSalesLineATO(SalesHeaderQuote,KitItem."No.",RandomQuantity(20) + 1);

      AssemblyHeaderQuote.SETRANGE("Item No.",KitItem."No.");
      AssemblyHeaderQuote.FINDFIRST;

      CreateAssemblyLine(AssemblyHeaderQuote,AssemblyLineUntracked,CompItemUntracked,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeaderQuote,AssemblyLineLot,CompItemLot,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeaderQuote,AssemblyLineSerial,CompItemSerial,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeaderQuote,AssemblyLineLotSerial,CompItemLotSerial,RandomQuantity(20));
      Resource.NEXT(RANDOM(Resource.COUNT));
      CreateAssemblyLineResource(AssemblyHeaderQuote,Resource,RandomQuantity(20));

      AddToInventory(CompItemUntracked,AssemblyLineUntracked.Quantity);
      AddToInventory(CompItemLot,AssemblyLineLot.Quantity);
      AddToInventory(CompItemSerial,AssemblyLineSerial.Quantity);
      AddToInventory(CompItemLotSerial,AssemblyLineLotSerial.Quantity);

      SelectItemTrackingOnQuoteLines(AssemblyHeaderQuote,TRUE);

      SalesQuotePage.OPENEDIT;
      SalesQuotePage.FILTER.SETFILTER("No.",SalesHeaderQuote."No.");
      SalesQuotePage.GOTORECORD(SalesHeaderQuote);
      SalesQuotePage."Make Order".INVOKE;

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("External Document No.",SalesHeaderQuote."External Document No.");
      SalesHeader.FINDFIRST;

      AssemblyHeader.SETRANGE("Item No.",KitItem."No.");
      AssemblyHeader.FINDFIRST;

      ValidateShadowAssemblyHeader(AssemblyHeader,AssemblyHeaderQuote);
      ValidateShadowAssemblyLine(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty)]
    PROCEDURE ITPost_Header@26();
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      // Sunshine scenario with IT on header.

      PC1_ItemTrackingOnHeader(AssemblyHeader);
      PostAssemblyHeader(AssemblyHeader);

      ValidateResEntryCountHeader(AssemblyHeader,0);
      ValidateResEntryCountLines(AssemblyHeader,0);
    END;

    [Test]
    PROCEDURE ITPost_NoITSpecHeader@16();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      KitItem@1003 : Record 27;
      CompItem@1004 : Record 27;
    BEGIN
      // Error scenario with no IT on header.

      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItem,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AddToInventory(CompItem,AssemblyLine.Quantity);

      ASSERTERROR PostAssemblyHeader(AssemblyHeader);
      Assert.AreEqual(STRSUBSTNO(SerialNoRequiredErr,KitItem."No."),
        GETLASTERRORTEXT,'Serial Number error message expected.');

      ValidateResEntryCountHeader(AssemblyHeader,0);
      ValidateResEntryCountLines(AssemblyHeader,0);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty,HNLD_ItemTrackingSummary)]
    PROCEDURE ITPost_HeaderAndLines@32();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine1@1002 : Record 901;
      AssemblyLine2@1003 : Record 901;
      KitItem@1004 : Record 27;
      CompItemSerial@1005 : Record 27;
      CompItemLot@1006 : Record 27;
    BEGIN
      // Sunshine scenario with IT on header and lines.

      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItemSerial,Tracking::Serial);
      CreateTrackedItem(CompItemLot,Tracking::Lot);

      CreateAssemblyHeader(AssemblyHeader,KitItem,1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine1,CompItemSerial,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine2,CompItemLot,RandomQuantity(20));

      AddToInventory(CompItemSerial,AssemblyLine1.Quantity);
      AddToInventory(CompItemLot,AssemblyLine2.Quantity);

      AssignItemTrackingToHeader(AssemblyHeader);
      SelectItemTrackingOnLines(AssemblyHeader,TRUE);

      PostAssemblyHeader(AssemblyHeader);

      ValidateResEntryCountHeader(AssemblyHeader,0);
      ValidateResEntryCountLines(AssemblyHeader,0);
      ValidateItemLedgerEntryCount(AssemblyHeader,
        AssemblyLine1.Quantity + 1,
        AssemblyHeader.Quantity);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage)]
    PROCEDURE ITPost_PartialPostHeader@91();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1004 : Record 901;
      KitItem@1008 : Record 27;
      CompItem@1009 : Record 27;
      PartialQuantity@1005 : Integer;
    BEGIN
      // 1) Create AO for quantity X
      // 2) Partially post for quantity < X
      // 4) Post remaining quantity
      // 5) Check Reservation Entries & ILEs

      PC4_PartialPostHeader(AssemblyHeader,AssemblyLine,PartialQuantity);

      KitItem.GET(AssemblyHeader."Item No.");
      CompItem.GET(AssemblyLine."No.");

      ValidateResEntryCountHeader(AssemblyHeader,1);
      ValidateResEntryCountLines(AssemblyHeader,0);
      ValidateItemLedgerEntryCount(AssemblyHeader,1,1);

      PostAssemblyHeader(AssemblyHeader);

      ASSERTERROR AssemblyHeader.GET(AssemblyHeader."Document Type",AssemblyHeader."No.");

      ValidateResEntryCountHeader(AssemblyHeader,0);
      ValidateResEntryCountLines(AssemblyHeader,0);
      ValidateItemLedgerEntryCount(AssemblyHeader,2,2);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty)]
    PROCEDURE ITPost_InsufficientITSpec@31();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      KitItem@1004 : Record 27;
      CompItem@1005 : Record 27;
      AssemblyOrderPage@1003 : TestPage 900;
      PartialQuantity@1002 : Integer;
    BEGIN
      // 1) Create AO, quantity X on header
      // 2) Assign IT Spec for quantity < X
      // 3) Assert posting disallowed

      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItem,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,RandomQuantity(20));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AddToInventory(CompItem,AssemblyLine.Quantity);

      COMMIT;
      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);

      PartialQuantity := RandomQuantity(AssemblyHeader.Quantity - 1);
      AssemblyOrderPage."Quantity to Assemble".VALUE := FORMAT(PartialQuantity,5);

      PrepareHandleAssignPartial(PartialQuantity - 1,Tracking::LotSerial);
      AssemblyOrderPage."Item Tracking Lines".INVOKE;

      AssemblyOrderPage.OK.INVOKE;

      ASSERTERROR PostAssemblyHeader(AssemblyHeader);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,'Qty. to Handle (Base) in Tracking Specification') > 0,
        STRSUBSTNO('Unexpected error: "%1"',GETLASTERRORTEXT));
    END;

    LOCAL PROCEDURE ATO_ItemTrackingOnSalesLine@25(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemTracking@1002 : Option;PartialShipment@1008 : Boolean;PositiveTest@1007 : Boolean);
    VAR
      KitItem@1005 : Record 27;
      CompItem@1004 : Record 27;
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1006 : Record 901;
    BEGIN
      // Setup.
      Initialize;

      // 1. Create tracked assembly-to-order item, and untracked component.
      CreateTrackedItem(CompItem,Tracking::Untracked);
      CreateTrackedItem(KitItem,ItemTracking);
      KitItem.VALIDATE("Replenishment System",KitItem."Replenishment System"::Assembly);
      KitItem.VALIDATE("Assembly Policy",KitItem."Assembly Policy"::"Assemble-to-Order");
      KitItem.MODIFY(TRUE);

      // 2. Create sales document.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipment Date",WorkDate2);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine,SalesHeader,SalesLine.Type::Item,KitItem."No.",WorkDate2,LibraryRandom.RandIntInRange(10,100));  // Take Random Quantity.

      // 3. Set relation between Qty to ship, Qty to assemble to order and Qty tracked.
      IF PartialShipment THEN
        SalesLine.VALIDATE("Qty. to Ship",LibraryRandom.RandIntInRange(1,SalesLine."Qty. to Assemble to Order"));
      SalesLine.MODIFY(TRUE);

      // 4. Make sure posting will go through by adding component line and inventory for it.
      FindShadowAssemblyOrder(AssemblyHeader,SalesHeader."Document Type"::Order,SalesLine."Document No.",SalesLine."Line No.");
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,1);
      AddToInventory(CompItem,AssemblyLine.Quantity);

      // 5. Exercise: Assign item tracking, partially or fully.
      AssignITToShadowAssemblyLine(AssemblyHeader,SalesLine,ItemTracking,PositiveTest);

      // 6. Validate: Reservation entries.
      ValidateTrackedQty(900,AssemblyHeader."No.",PAR_ITPage_AssignQty);

      // 7. Create demand for the kit item, other than sales line.
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,CompItem."No.",'',1,'');
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,KitItem,LibraryRandom.RandInt(10));

      // 8. Validate: Select entries does not populate the Item tracking lines page.
      SelectItemTrackingOnLines(AssemblyHeader,FALSE);
      ValidateTrackedQty(901,AssemblyHeader."No.",0);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary)]
    PROCEDURE ATOPartialShipPositiveLot@50();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      ATO_ItemTrackingOnSalesLine(SalesHeader,SalesLine,Tracking::Lot,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ATOPartialShipPositiveSerial@63();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      ATO_ItemTrackingOnSalesLine(SalesHeader,SalesLine,Tracking::Serial,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary)]
    PROCEDURE ATOFullyShipPositiveLot@66();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      ATO_ItemTrackingOnSalesLine(SalesHeader,SalesLine,Tracking::Lot,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ATOFullyShipPositiveSerial@67();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      ATO_ItemTrackingOnSalesLine(SalesHeader,SalesLine,Tracking::Serial,FALSE,TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ATO_PostITOnSalesLine@53(ItemTracking@1006 : Option;PartialShipment@1005 : Boolean;PositiveTest@1004 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1003 : Record 901;
      Item@1007 : Record 27;
    BEGIN
      // 1. Setup: Assign item tracking.
      ATO_ItemTrackingOnSalesLine(SalesHeader,SalesLine,ItemTracking,PartialShipment,PositiveTest);

      // 2. Exercise: Post Sales Header.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // 3. Validate: Reservation entries for the posted Sales Line and shadow Assembly Header.
      FindShadowAssemblyOrder(AssemblyHeader,SalesHeader."Document Type"::Order,SalesLine."Document No.",SalesLine."Line No.");
      ValidateTrackedQty(900,AssemblyHeader."No.",0);

      // 4. Create demand for the kit item, other than sales line.
      LibraryInventory.CreateItem(Item);
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,Item."No.",'',1,'');
      Item.GET(SalesLine."No.");
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,Item,LibraryRandom.RandInt(10));

      // 5. Validate: Select entries does not populate the Item tracking lines page.
      SelectItemTrackingOnLines(AssemblyHeader,FALSE);
      ValidateTrackedQty(901,AssemblyHeader."No.",0);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary)]
    PROCEDURE PostATOPartialShipPositiveLot@59();
    BEGIN
      ATO_PostITOnSalesLine(Tracking::Lot,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE PostATOPtlShipPositiveSerial@93();
    BEGIN
      ATO_PostITOnSalesLine(Tracking::Serial,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary)]
    PROCEDURE PostATOPtlShipNegativeLot@92();
    BEGIN
      ASSERTERROR
        ATO_PostITOnSalesLine(Tracking::Lot,TRUE,FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorQtyHandle) > 0,'Actual:' + GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE PostATOPtlShipNegativeSerial@90();
    BEGIN
      ASSERTERROR
        ATO_PostITOnSalesLine(Tracking::Serial,TRUE,FALSE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorQtyHandle) > 0,'Actual:' + GETLASTERRORTEXT);
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary)]
    PROCEDURE PostATOFullyShipPositiveLot@89();
    BEGIN
      ATO_PostITOnSalesLine(Tracking::Lot,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE PostATOFullyShipPositiveSerial@87();
    BEGIN
      ATO_PostITOnSalesLine(Tracking::Serial,FALSE,TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE FindShadowAssemblyOrder@64(VAR AssemblyHeader@1001 : Record 900;DocumentType@1003 : Option;DocumentNo@1004 : Code[20];DocumentLineNo@1005 : Integer);
    VAR
      AssembleToOrderLink@1000 : Record 904;
    BEGIN
      AssembleToOrderLink.RESET;
      AssembleToOrderLink.SETRANGE(Type,AssembleToOrderLink.Type::Sale);
      AssembleToOrderLink.SETRANGE("Document Type",DocumentType);
      AssembleToOrderLink.SETRANGE("Document No.",DocumentNo);
      AssembleToOrderLink.SETRANGE("Document Line No.",DocumentLineNo);
      IF AssembleToOrderLink.FINDFIRST THEN
        AssemblyHeader.GET(AssembleToOrderLink."Assembly Document Type",AssembleToOrderLink."Assembly Document No.");
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_ItemTracingUTO@80();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1002 : Record 901;
      AssemblyLine2@1001 : Record 901;
      SalesHeader@1000 : Record 36;
    BEGIN
      PC2_ItemTracing(AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader,TRUE);

      ValidateItemTracingLinesUTO(TRUE,FALSE,FALSE,
        AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader);
      ValidateItemTracingLinesUTO(FALSE,TRUE,FALSE,
        AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader);
      ValidateItemTracingLinesUTO(FALSE,FALSE,TRUE,
        AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader);
      ValidateItemTracingLinesUTO(TRUE,TRUE,TRUE,
        AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_ItemTracingOTU@129();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1002 : Record 901;
      AssemblyLine2@1001 : Record 901;
      SalesHeader@1000 : Record 36;
    BEGIN
      PC2_ItemTracing(AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader,TRUE);

      ValidateItemTracingLineOTUKit(AssemblyHeader,SalesHeader);
      ValidateItemTracingLineOTUComp(AssemblyHeader,AssemblyLine,SalesHeader,Tracking::Serial);
      ValidateItemTracingLineOTUComp(AssemblyHeader,AssemblyLine2,SalesHeader,Tracking::Lot);
      ValidateItemTracingLineOTUComp(AssemblyHeader,AssemblyLine,SalesHeader,Tracking::LotSerial);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_SellTwice@27();
    VAR
      KitItem@1002 : Record 27;
      CompItem@1001 : Record 27;
      CompItemLot@1000 : Record 27;
      AssemblyHeader@1009 : Record 900;
      AssemblyLine@1008 : Record 901;
      AssemblyLine2@1007 : Record 901;
      SalesHeader@1006 : Record 36;
      SalesHeader2@1004 : Record 36;
      ItemLedgerEntry@1005 : Record 32;
      SalesShipmentHeader@9991 : Record 110;
      ItemTracingPage@1003 : TestPage 6520;
    BEGIN
      Initialize;

      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItem,Tracking::LotSerial);
      CreateTrackedItem(CompItemLot,Tracking::Lot);

      CreateAssemblyHeader(AssemblyHeader,KitItem,2);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,3 + RandomQuantity(10));
      CreateAssemblyLine(AssemblyHeader,AssemblyLine2,CompItemLot,3 + RandomQuantity(10));

      AddToInventory(CompItem,AssemblyLine.Quantity);
      AddToInventory(CompItemLot,AssemblyLine2.Quantity);

      AssignItemTrackingToHeader(AssemblyHeader);
      SelectItemTrackingOnLines(AssemblyHeader,TRUE);
      PostAssemblyHeader(AssemblyHeader);

      CreateSalesHeader(SalesHeader);
      CreateSalesLineWithITSpec(SalesHeader,KitItem."No.",1);
      PostSalesHeader(SalesHeader);

      CreateSalesHeader(SalesHeader2);
      CreateSalesLineWithITSpec(SalesHeader2,KitItem."No.",1);
      PostSalesHeader(SalesHeader2);

      // Trace Item No.
      COMMIT;
      ItemTracingPage.OPENEDIT;
      ItemTracingPage.ItemNoFilter.SETVALUE(KitItem."No.");
      ItemTracingPage.ShowComponents.SETVALUE('Item-tracked Only');
      ItemTracingPage.TraceMethod.SETVALUE('Usage -> Origin');
      ItemTracingPage.Trace.INVOKE;

      // Validate
      ExpectShippedSalesOrder(ItemTracingPage,SalesHeader2,AssemblyHeader."Item No.",1,TRUE);
      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,FALSE);
      ExpectShippedSalesOrder(ItemTracingPage,SalesHeader,AssemblyHeader."Item No.",1,TRUE);
      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,FALSE);
      Assert.IsFalse(ItemTracingPage.NEXT,
        STRSUBSTNO('Unexpected Item Tracing entry: "%1"',ItemTracingPage.Description.VALUE));

      // Trace Serial No.
      ItemLedgerEntry.SETRANGE("Item No.",KitItem."No.");
      SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesShipmentHeader.FINDFIRST;
      ItemLedgerEntry.SETRANGE("Document No.",SalesShipmentHeader."No.");
      ItemLedgerEntry.FINDSET;
      ItemLedgerEntry.NEXT(RANDOM(ItemLedgerEntry.COUNT));

      ItemTracingPage.SerialNoFilter.SETVALUE(ItemLedgerEntry."Serial No.");
      ItemTracingPage.ItemNoFilter.SETVALUE('');
      ItemTracingPage.ShowComponents.SETVALUE('Item-tracked Only');
      ItemTracingPage.TraceMethod.SETVALUE('Usage -> Origin');
      ItemTracingPage.Trace.INVOKE;
      ItemTracingPage.FIRST;

      // Validate
      ExpectShippedSalesOrder(ItemTracingPage,SalesHeader,AssemblyHeader."Item No.",1,TRUE);
      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,FALSE);
      Assert.IsFalse(ItemTracingPage.NEXT,
        STRSUBSTNO('Unexpected Item Tracing entry: "%1"',ItemTracingPage.Description.VALUE));

      ItemTracingPage.OK.INVOKE;
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_AssemblyInAssembly@97();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyHeader2@1004 : Record 900;
      AssemblyLineParentKit@1007 : Record 901;
      AssemblyLine@1001 : Record 901;
      AssemblyLine2@1002 : Record 901;
      SalesHeader@1003 : Record 36;
      KitItem@1006 : Record 27;
      KitItemParent@1005 : Record 27;
      ItemTracingPage@1008 : TestPage 6520;
    BEGIN
      PC2_ItemTracing(AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader,FALSE);

      KitItem.GET(AssemblyHeader."Item No.");
      CreateTrackedItem(KitItemParent,Tracking::LotSerial);

      CreateAssemblyHeader(AssemblyHeader2,KitItemParent,1);
      CreateAssemblyLine(AssemblyHeader2,AssemblyLineParentKit,KitItem,1);
      SelectItemTrackingOnLines(AssemblyHeader2,TRUE);
      AssignItemTrackingToHeader(AssemblyHeader2);
      PostAssemblyHeader(AssemblyHeader2);

      COMMIT;
      ItemTracingPage.OPENEDIT;
      ItemTracingPage.ItemNoFilter.SETVALUE(KitItemParent."No.");
      ItemTracingPage.TraceMethod.SETVALUE('Usage -> Origin');
      ItemTracingPage.ShowComponents.SETVALUE('All');
      ItemTracingPage.Trace.INVOKE;

      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader2,1,TRUE);
      ExpectAssemblyConsumption(ItemTracingPage,AssemblyHeader2,AssemblyLineParentKit,1,TRUE);
      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,FALSE);

      Assert.IsFalse(ItemTracingPage.NEXT,
        STRSUBSTNO('Unexpected Item Tracing entry: "%1"',ItemTracingPage.Description.VALUE));

      ItemTracingPage.OK.INVOKE;
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_ShowComponentsAll@110();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      AssemblyLine2@1002 : Record 901;
    BEGIN
      PC3_ItemTracingNonITComponents(AssemblyHeader,AssemblyLine,AssemblyLine2);
      ValidateShowComponents(AssemblyHeader,AssemblyLine,AssemblyLine2,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_ShowComponentsITOnly@112();
    VAR
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1001 : Record 901;
      AssemblyLine2@1000 : Record 901;
    BEGIN
      PC3_ItemTracingNonITComponents(AssemblyHeader,AssemblyLine,AssemblyLine2);
      ValidateShowComponents(AssemblyHeader,AssemblyLine,AssemblyLine2,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_ShowComponentsNo@111();
    VAR
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1001 : Record 901;
      AssemblyLine2@1000 : Record 901;
    BEGIN
      PC3_ItemTracingNonITComponents(AssemblyHeader,AssemblyLine,AssemblyLine2);
      ValidateShowComponents(AssemblyHeader,AssemblyLine,AssemblyLine2,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNLD_ItemTrackingSummary,HNDL_EnterQty)]
    PROCEDURE ITTrac_NavigatePostedAO@5();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1002 : Record 901;
      AssemblyLine2@1001 : Record 901;
      SalesHeader@1000 : Record 36;
      NavigatePage@1004 : TestPage 344;
    BEGIN
      PC2_ItemTracing(AssemblyHeader,AssemblyLine,AssemblyLine2,SalesHeader,TRUE);

      NavigateFindSerial(NavigatePage,AssemblyHeader);
      NavigateExpect(NavigatePage,'Item Ledger Entry',2);
      NavigateExpect(NavigatePage,'Sales Shipment Header',1);
      NavigateExpect(NavigatePage,'Sales Invoice Header',1);
      NavigateExpect(NavigatePage,'Posted Assembly Header',1);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty)]
    PROCEDURE ITTrac_NavigateUnpostedAO@42();
    VAR
      AssemblyHeader@1000 : Record 900;
      NavigatePage@1001 : TestPage 344;
    BEGIN
      PC1_ItemTrackingOnHeader(AssemblyHeader);

      NavigateFindLot(NavigatePage,AssemblyHeader);
      NavigateExpect(NavigatePage,'Reservation Entry',AssemblyHeader.Quantity);
      NavigateExpect(NavigatePage,'Assembly Header',1);
    END;

    [Test]
    [HandlerFunctions(HNDL_ITPage,HNDL_EnterQty)]
    PROCEDURE ITTrac_NavigatePartialAO@40();
    VAR
      KitItem@1004 : Record 27;
      CompItem@1005 : Record 27;
      AssemblyHeader@1002 : Record 900;
      AssemblyLine@1001 : Record 901;
      NavigatePage@1003 : TestPage 344;
    BEGIN
      Initialize;
      CreateTrackedItem(KitItem,Tracking::LotSerial);
      CreateTrackedItem(CompItem,Tracking::Untracked);

      CreateAssemblyHeader(AssemblyHeader,KitItem,RandomQuantity(10) + 1);
      CreateAssemblyLine(AssemblyHeader,AssemblyLine,CompItem,RandomQuantity(20));
      AddToInventory(CompItem,AssemblyLine.Quantity);

      AssemblyHeader.VALIDATE("Quantity to Assemble",RandomQuantity(AssemblyHeader.Quantity - 1));
      AssemblyHeader.MODIFY(TRUE);

      AssignPartItemTrackingToHeader(AssemblyHeader);
      PostAssemblyHeader(AssemblyHeader);

      NavigateFindLot(NavigatePage,AssemblyHeader);
      NavigateExpect(NavigatePage,'Item Ledger Entry',AssemblyHeader."Quantity to Assemble");
      NavigateExpect(NavigatePage,'Posted Assembly Header',1);
    END;

    [Test]
    PROCEDURE ITTrac_NavigateIllegalSN@361();
    VAR
      ItemLedgerEntry@1002 : Record 32;
      NavigatePage@1000 : TestPage 344;
    BEGIN
      Initialize;
      NavigatePage.OPENEDIT;
      NavigatePage.SerialNoFilter.SETVALUE(
        LibraryUtility.GenerateRandomCode(ItemLedgerEntry.FIELDNO("Serial No."),DATABASE::"Item Ledger Entry"));
      NavigatePage.Find.INVOKE;
      Assert.IsFalse(NavigatePage.NEXT,
        'Unexpected navigate entry');
    END;

    LOCAL PROCEDURE CreateTrackedItem@71(VAR Item@1000 : Record 27;TrackingType@1001 : Option);
    VAR
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemTrackingCode(ItemTrackingCode,IsLot(TrackingType),IsSerial(TrackingType));
      SetItemTrackingCode(Item,ItemTrackingCode);
    END;

    LOCAL PROCEDURE SetItemTrackingCode@57(VAR Item@1001 : Record 27;ItemTrackingCode@1000 : Record 6502);
    BEGIN
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PrepareHandleSelectEntries@1(RowsExpected@1000 : Boolean);
    BEGIN
      GLB_ITPageHandler := GLB_ITPageHandler::SelectITSpec;
      PAR_ITSummaryPage_RowsExpected := RowsExpected;
    END;

    LOCAL PROCEDURE PrepareHandleAssign@44(TrackingType@1000 : Option);
    BEGIN
      GLB_ITPageHandler := GLB_ITPageHandler::AssignITSpec;
      PAR_ITPage_AssignLot := IsLot(TrackingType);
      PAR_ITPage_AssignSerial := IsSerial(TrackingType);
      PAR_ITPage_AssignPartial := FALSE;
    END;

    LOCAL PROCEDURE PrepareHandleAssignPartial@109(Quantity@1000 : Integer;TrackingType@1002 : Option);
    BEGIN
      GLB_ITPageHandler := GLB_ITPageHandler::AssignITSpecPartial;
      PAR_ITPage_AssignLot := IsLot(TrackingType);
      PAR_ITPage_AssignSerial := IsSerial(TrackingType);
      PAR_ITPage_AssignPartial := TRUE;
      PAR_ITPage_AssignQty := Quantity;
    END;

    LOCAL PROCEDURE PrepareHandleITFromILEs@69(ItemNo@1000 : Code[20];Quantity@1002 : Integer);
    BEGIN
      GLB_ITPageHandler := GLB_ITPageHandler::FromILEs;
      PAR_ITPage_AssignQty := Quantity;
      PAR_ITPage_ItemNo := ItemNo;
    END;

    LOCAL PROCEDURE CreateAssemblyHeader@58(VAR AssemblyHeader@1000 : Record 900;Item@1001 : Record 27;Quantity@1002 : Integer);
    BEGIN
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,Item."No.",'',Quantity,'');
    END;

    LOCAL PROCEDURE CreateAssemblyLine@3(VAR AssemblyHeader@1000 : Record 900;VAR AssemblyLine@1001 : Record 901;Item@1004 : Record 27;Quantity@1002 : Integer);
    BEGIN
      LibraryAssembly.CreateAssemblyLine(
        AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,Item."No.",
        LibraryAssembly.GetUnitOfMeasureCode(AssemblyLine.Type::Item,Item."No.",TRUE),
        Quantity,0,'');

      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
      AssemblyLine.FINDLAST;
    END;

    LOCAL PROCEDURE CreateAssemblyLineResource@1001(VAR AssemblyHeader@1000 : Record 900;Resource@1002 : Record 156;Quantity@1003 : Integer);
    VAR
      AssemblyLine@1004 : Record 901;
    BEGIN
      LibraryAssembly.CreateAssemblyLine(
        AssemblyHeader,AssemblyLine,AssemblyLine.Type::Resource,Resource."No.",
        LibraryAssembly.GetUnitOfMeasureCode(AssemblyLine.Type::Resource,Resource."No.",TRUE),
        Quantity,0,'');
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@7(VAR ItemTrackingCode@1000 : Record 6502;Lot@1001 : Boolean;Serial@1002 : Boolean);
    BEGIN
      IF NOT ItemTrackingCode.GET(Serial) THEN BEGIN
        ItemTrackingCode.INIT;
        ItemTrackingCode.VALIDATE(Code,
          LibraryUtility.GenerateRandomCode(ItemTrackingCode.FIELDNO(Code),DATABASE::"Item Tracking Code"));
        ItemTrackingCode.INSERT(TRUE);
        ItemTrackingCode.VALIDATE("SN Specific Tracking",Serial);
        ItemTrackingCode.VALIDATE("Lot Specific Tracking",Lot);
        ItemTrackingCode.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostAssemblyHeader@49(VAR AssemblyHeader@1000 : Record 900);
    BEGIN
      AssemblyHeader.GET(AssemblyHeader."Document Type",AssemblyHeader."No.");
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
    END;

    LOCAL PROCEDURE AssignItemTrackingToHeader@13(VAR AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyOrderPage@1003 : TestPage 900;
    BEGIN
      COMMIT;
      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);

      PrepareHandleAssign(ItemTrackingType(AssemblyHeader."Item No."));
      AssemblyOrderPage."Item Tracking Lines".INVOKE;
      AssemblyOrderPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE AssignPartItemTrackingToHeader@51(VAR AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyOrderPage@1003 : TestPage 900;
    BEGIN
      COMMIT;
      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);

      PrepareHandleAssignPartial(AssemblyHeader."Quantity to Assemble",ItemTrackingType(AssemblyHeader."Item No."));
      AssemblyOrderPage."Item Tracking Lines".INVOKE;
      AssemblyOrderPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE AssignITToShadowAssemblyLine@128(VAR AssemblyHeader@1004 : Record 900;VAR SalesLine@1005 : Record 37;TrackingType@1001 : Option;PositiveTest@1006 : Boolean);
    VAR
      AssemblyOrderPage@1003 : TestPage 900;
    BEGIN
      IF PositiveTest THEN
        PrepareHandleAssignPartial(SalesLine."Qty. to Ship",TrackingType)
      ELSE
        PrepareHandleAssignPartial(LibraryRandom.RandIntInRange(1,SalesLine."Qty. to Ship"),TrackingType);

      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);
      AssemblyOrderPage."Item Tracking Lines".INVOKE;
      AssemblyOrderPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE AssignItemTrackingToLines@45(VAR AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyLine@1001 : Record 901;
      AssemblyOrderPage@1002 : TestPage 900;
    BEGIN
      COMMIT;
      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);

      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
      AssemblyLine.FINDFIRST;

      REPEAT
        IF AssemblyOrderPage.Lines.Type.VALUE = 'Item' THEN BEGIN
          PrepareHandleITFromILEs(
            AssemblyOrderPage.Lines."No.".VALUE,
            AssemblyOrderPage.Lines.Quantity.ASINTEGER);
          AssemblyOrderPage.Lines."Item Tracking Lines".INVOKE;
        END;
      UNTIL NOT AssemblyOrderPage.Lines.NEXT;

      AssemblyOrderPage.CLOSE;
    END;

    LOCAL PROCEDURE SelectItemTrackingOnLines@14(VAR AssemblyHeader@1000 : Record 900;RowsExpected@1002 : Boolean);
    VAR
      AssemblyOrderPage@1001 : TestPage 900;
    BEGIN
      COMMIT;
      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);

      REPEAT
        IF (AssemblyOrderPage.Lines.Type.VALUE = 'Item') AND (AssemblyOrderPage.Lines."No.".VALUE <> '') THEN BEGIN
          IF ItemTrackingType(AssemblyOrderPage.Lines."No.".VALUE) <> Tracking::Untracked THEN BEGIN
            PrepareHandleSelectEntries(RowsExpected);
            AssemblyOrderPage.Lines."Item Tracking Lines".INVOKE;
          END;
        END
      UNTIL NOT AssemblyOrderPage.Lines.NEXT;
      AssemblyOrderPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE SelectItemTrackingOnQuoteLines@124(VAR AssemblyHeader@1000 : Record 900;RowsExpected@1002 : Boolean);
    VAR
      AssemblyQuotePage@1003 : TestPage 930;
    BEGIN
      COMMIT;
      AssemblyQuotePage.OPENEDIT;
      AssemblyQuotePage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyQuotePage.GOTORECORD(AssemblyHeader);

      REPEAT
        IF (AssemblyQuotePage.Lines.Type.VALUE = 'Item') AND (AssemblyQuotePage.Lines."No.".VALUE <> '') THEN BEGIN
          IF ItemTrackingType(AssemblyQuotePage.Lines."No.".VALUE) <> Tracking::Untracked THEN BEGIN
            PrepareHandleSelectEntries(RowsExpected);
            AssemblyQuotePage.Lines."Item Tracking Lines".INVOKE;
          END;
        END
      UNTIL NOT AssemblyQuotePage.Lines.NEXT;
      AssemblyQuotePage.OK.INVOKE;
    END;

    LOCAL PROCEDURE SelectItemTrackingOnSalesLine@24(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1000 : Record 37);
    VAR
      SalesOrderPage@1001 : TestPage 42;
    BEGIN
      COMMIT;
      SalesOrderPage.OPENEDIT;
      SalesOrderPage.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrderPage.GOTORECORD(SalesHeader);

      WHILE SalesOrderPage.SalesLines."No.".VALUE <> SalesLine."No." DO
        SalesOrderPage.SalesLines.NEXT;

      PrepareHandleSelectEntries(TRUE);
      SalesOrderPage.SalesLines.ItemTrackingLines.INVOKE;
      SalesOrderPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesHeader@12(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
    END;

    LOCAL PROCEDURE CreateSalesQuote@116(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Quote,'');
    END;

    LOCAL PROCEDURE CreateSalesLineWithITSpec@81(VAR SalesHeader@1002 : Record 36;ItemNo@1001 : Code[20];Quantity@1000 : Integer);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SelectItemTrackingOnSalesLine(SalesHeader,SalesLine);
    END;

    LOCAL PROCEDURE CreateSalesLineATO@133(VAR SalesHeader@1002 : Record 36;ItemNo@1001 : Code[20];Quantity@1000 : Integer);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Assemble to Order",Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNonSpecOutBoundITCode@20(VAR ItemTrackingCode@1000 : Record 6502);
    BEGIN
      ItemTrackingCode.INIT;
      ItemTrackingCode.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(ItemTrackingCode.FIELDNO(Code),DATABASE::"Item Tracking Code"));
      ItemTrackingCode.INSERT(TRUE);

      ItemTrackingCode.VALIDATE("SN Specific Tracking",TRUE);
      ItemTrackingCode.VALIDATE("SN Specific Tracking",FALSE);
      ItemTrackingCode.VALIDATE("SN Assembly Outbound Tracking",FALSE);

      ItemTrackingCode.VALIDATE("Lot Specific Tracking",TRUE);
      ItemTrackingCode.VALIDATE("Lot Specific Tracking",FALSE);
      ItemTrackingCode.VALIDATE("Lot Assembly Outbound Tracking",FALSE);

      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostSalesHeader@34(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE ItemTrackingType@8(ItemNo@1000 : Code[20]) : Integer;
    VAR
      Item@1004 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
      Lot@1002 : Boolean;
      Serial@1003 : Boolean;
    BEGIN
      Item.GET(ItemNo);
      ItemTrackingCode.GET(Item."Item Tracking Code");
      Serial := ItemTrackingCode."SN Specific Tracking";
      Lot := ItemTrackingCode."Lot Specific Tracking";

      IF Lot AND Serial THEN
        EXIT(Tracking::LotSerial);
      IF (NOT Lot) AND (NOT Serial) THEN
        EXIT(Tracking::Untracked);
      IF Lot THEN
        EXIT(Tracking::Lot);
      EXIT(Tracking::Serial);
    END;

    LOCAL PROCEDURE IsLot@17(TrackingType@1000 : Option) : Boolean;
    BEGIN
      EXIT((TrackingType = Tracking::LotSerial) OR (TrackingType = Tracking::Lot));
    END;

    LOCAL PROCEDURE IsSerial@18(TrackingType@1000 : Option) : Boolean;
    BEGIN
      EXIT((TrackingType = Tracking::LotSerial) OR (TrackingType = Tracking::Serial));
    END;

    LOCAL PROCEDURE Reopen@22(AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyOrderPage@1001 : TestPage 900;
    BEGIN
      COMMIT;
      AssemblyOrderPage.OPENEDIT;
      AssemblyOrderPage.FILTER.SETFILTER("No.",AssemblyHeader."No.");
      AssemblyOrderPage.GOTORECORD(AssemblyHeader);
      AssemblyOrderPage.Action60.INVOKE;
      AssemblyOrderPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNDL_ITPage@9(VAR ItemTrackingLinesPage@1000 : TestPage 6510);
    BEGIN
      CASE GLB_ITPageHandler OF
        GLB_ITPageHandler::AssignITSpec:
          BEGIN
            IF PAR_ITPage_AssignSerial THEN
              HNDL_ITPage_AssignSerial(ItemTrackingLinesPage)
            ELSE
              HNDL_ITPage_AssignLot(ItemTrackingLinesPage);
          END;
        GLB_ITPageHandler::SelectITSpec:
          HNDL_ITPage_SelectEntries(ItemTrackingLinesPage);
        GLB_ITPageHandler::AssignITSpecPartial:
          IF PAR_ITPage_AssignSerial THEN
            HNDL_ITPage_AssignSerial(ItemTrackingLinesPage)
          ELSE
            HNDL_ITPage_AssignLotPartial(ItemTrackingLinesPage);
        GLB_ITPageHandler::FromILEs:
          HNDL_ITPage_FromILEs(ItemTrackingLinesPage);
      END
    END;

    [ModalPageHandler]
    [HandlerFunctions(HNDL_EnterQty)]
    PROCEDURE HNDL_ITPage_AssignSerial@10(VAR ItemTrackingLinesPage@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLinesPage."Assign Serial No.".INVOKE;
      ItemTrackingLinesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNDL_ITPage_AssignLot@15(VAR ItemTrackingLinesPage@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLinesPage."Assign Lot No.".INVOKE;
      ItemTrackingLinesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNDL_ITPage_AssignLotPartial@36(VAR ItemTrackingLinesPage@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLinesPage."Assign Lot No.".INVOKE;
      ItemTrackingLinesPage."Quantity (Base)".SETVALUE(PAR_ITPage_AssignQty);
      ItemTrackingLinesPage."Qty. to Handle (Base)".SETVALUE(PAR_ITPage_AssignQty);
      ItemTrackingLinesPage."Qty. to Invoice (Base)".SETVALUE(PAR_ITPage_AssignQty);
      ItemTrackingLinesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNDL_ITPage_SelectEntries@88(VAR ItemTrackingLinesPage@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLinesPage."Select Entries".INVOKE;
      ItemTrackingLinesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNDL_ITPage_FromILEs@75(VAR ItemTrackingLinesPage@1000 : TestPage 6510);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      i@1002 : Integer;
    BEGIN
      ItemLedgerEntry.RESET;
      ItemLedgerEntry.SETRANGE("Item No.",PAR_ITPage_ItemNo);
      IF NOT ItemLedgerEntry.FINDSET THEN
        EXIT;

      ItemTrackingLinesPage.NEW;

      IF IsSerial(ItemTrackingType(PAR_ITPage_ItemNo)) THEN BEGIN
        Assert.IsTrue(ItemLedgerEntry.COUNT >= PAR_ITPage_AssignQty,
          'To few available ILEs to assign item tracking');
        FOR i := 1 TO PAR_ITPage_AssignQty DO BEGIN
          ItemTrackingLinesPage."Serial No.".SETVALUE(ItemLedgerEntry."Serial No.");
          ItemTrackingLinesPage."Lot No.".SETVALUE(ItemLedgerEntry."Lot No.");
          ItemTrackingLinesPage."Quantity (Base)".SETVALUE(1);
          ItemTrackingLinesPage.NEXT;
          ItemTrackingLinesPage.NEW;
          ItemLedgerEntry.NEXT;
        END
      END ELSE
        IF IsLot(ItemTrackingType(PAR_ITPage_ItemNo)) THEN BEGIN
          ItemTrackingLinesPage."Lot No.".SETVALUE(ItemLedgerEntry."Lot No.");
          ItemTrackingLinesPage."Quantity (Base)".SETVALUE(PAR_ITPage_AssignQty);
        END;

      ItemTrackingLinesPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNDL_EnterQty@19(VAR EnterQuantityPage@1000 : TestPage 6513);
    BEGIN
      IF PAR_ITPage_AssignLot THEN
        EnterQuantityPage.CreateNewLotNo.VALUE := 'yes';
      IF PAR_ITPage_AssignPartial THEN
        EnterQuantityPage.QtyToCreate.VALUE := FORMAT(PAR_ITPage_AssignQty,5);
      EnterQuantityPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE HNLD_ItemTrackingSummary@94(VAR ItemTrackingSummaryPage@1000 : TestPage 6500);
    VAR
      count@1001 : Integer;
    BEGIN
      // Is there at least a line on the summary entry page?
      ItemTrackingSummaryPage.FIRST;
      IF ((ItemTrackingSummaryPage."Lot No.".VALUE <> '') OR (ItemTrackingSummaryPage."Serial No.".VALUE <> '')) AND
         (ItemTrackingSummaryPage."Total Quantity".ASINTEGER <> 0)
      THEN
        count += 1;

      WHILE ItemTrackingSummaryPage.NEXT DO
        IF ItemTrackingSummaryPage."Total Quantity".ASINTEGER <> 0 THEN
          count += 1;

      Assert.IsTrue(
        ((NOT PAR_ITSummaryPage_RowsExpected) AND (count = 0)) OR
        (PAR_ITSummaryPage_RowsExpected AND (count <> 0)),
        STRSUBSTNO('Actual rows on entry summary: %1. Tracking info,Lot: %2 Serial: %3 Total: %4',
          count,
          ItemTrackingSummaryPage."Lot No.".VALUE,
          ItemTrackingSummaryPage."Serial No.".VALUE,
          ItemTrackingSummaryPage."Total Quantity".VALUE));

      IF count > 0 THEN
        ItemTrackingSummaryPage.OK.INVOKE
      ELSE
        ItemTrackingSummaryPage.Cancel.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE HNDL_ConfirmYes@95(_@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE HNDL_MessageOK@96(_@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE AddToInventory@41(Item@1002 : Record 27;Quantity@1003 : Integer);
    BEGIN
      AddToInventoryLocationVariant(Item,Quantity,ItemTrackingType(Item."No."),'','');
    END;

    LOCAL PROCEDURE AddToInventoryExpiryDate@38(Item@1002 : Record 27;Quantity@1003 : Integer;StartDate@1007 : Date);
    VAR
      ItemJournalLine@1000 : Record 83;
      ReservationEntry@1006 : Record 337;
      ItemJournalTemplate@1004 : Record 82;
      ItemJournalBatch@1009 : Record 233;
      ItemJournalPage@1001 : TestPage 40;
    BEGIN
      ItemJournalLine.DELETEALL;
      COMMIT;

      LibraryAssembly.SetupItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",
        ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Purchase,
        Item."No.",
        Quantity);

      COMMIT;

      ItemJournalPage.OPENEDIT;

      PrepareHandleAssign(Tracking::Serial);

      ItemJournalPage.ItemTrackingLines.INVOKE;
      ItemJournalPage.OK.INVOKE;

      ReservationEntry.SETRANGE("Source Type",83);
      ReservationEntry.SETRANGE("Source ID",ItemJournalLine."Journal Template Name");
      ReservationEntry.FIND('-');

      Assert.AreEqual(Quantity,ReservationEntry.COUNT,'');

      REPEAT
        ReservationEntry.VALIDATE("Expiration Date",StartDate);
        ReservationEntry.MODIFY(TRUE);
        StartDate := StartDate + 1;
      UNTIL ReservationEntry.NEXT = 0;

      LibraryInventory.PostItemJournalLine(
        ItemJournalLine."Journal Template Name",
        ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE AddToInventoryLocationVariant@78(Item@1002 : Record 27;Quantity@1003 : Integer;TrackingType@1004 : Option;LocationCode@1005 : Code[10];VariantCode@1006 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemJournalBatch@1009 : Record 233;
      ItemJournalTemplate@1099 : Record 82;
      ItemJournalPage@1001 : TestPage 40;
    BEGIN
      ItemJournalLine.DELETEALL;
      COMMIT;

      LibraryAssembly.SetupItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,
        ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        Item."No.",
        Quantity);

      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.MODIFY(TRUE);

      COMMIT;
      ItemJournalPage.OPENEDIT;

      IF TrackingType <> Tracking::Untracked THEN BEGIN
        PrepareHandleAssign(TrackingType);
        ItemJournalPage.ItemTrackingLines.INVOKE;
      END;

      ItemJournalPage.OK.INVOKE;

      LibraryInventory.PostItemJournalLine(
        ItemJournalLine."Journal Template Name",
        ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE RandomQuantity@39(Quantity@1000 : Integer) : Integer;
    BEGIN
      EXIT(LibraryRandom.RandInt(Quantity - 1) + 1);
    END;

    LOCAL PROCEDURE ValidateResEntryCountHeader@29(AssemblyHeader@1001 : Record 900;ExpectedQty@1002 : Integer);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source Type",900);
      ReservationEntry.SETRANGE("Source ID",AssemblyHeader."No.");
      Assert.AreEqual(ExpectedQty,ReservationEntry.COUNT,
        'Missing or unexpected reservation entries on Assembly Header');
    END;

    LOCAL PROCEDURE ValidateResEntryCountLine@139(VAR AssemblyLine@1003 : Record 901;ExpectedQty@1002 : Integer);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source Type",901);
      ReservationEntry.SETRANGE("Source ID",AssemblyLine."Document No.");
      ReservationEntry.SETRANGE("Source Ref. No.",AssemblyLine."Line No.");

      Assert.AreEqual(ExpectedQty,ReservationEntry.COUNT,
        STRSUBSTNO('Missing or unexpected reservation entries in Assembly line: %1',AssemblyLine));
    END;

    LOCAL PROCEDURE ValidateResEntryCountLines@48(AssemblyHeader@1003 : Record 900;ExpectedQty@1002 : Integer);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source Type",901);
      ReservationEntry.SETRANGE("Source ID",AssemblyHeader."No.");
      Assert.AreEqual(ExpectedQty,ReservationEntry.COUNT,
        'Missing or unexpected reservation entries');
    END;

    LOCAL PROCEDURE ValidateItemLedgerEntryCount@30(AssemblyHeader@1000 : Record 900;ExpectedConsumption@1001 : Integer;ExpectedOutput@1002 : Integer);
    VAR
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Assembly);
      ItemLedgerEntry.SETRANGE("Order No.",AssemblyHeader."No.");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::"Assembly Consumption");
      Assert.AreEqual(ExpectedConsumption,ItemLedgerEntry.COUNT,
        'Missing or unexpected item ledger entries');

      CLEAR(ItemLedgerEntry);
      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Assembly);
      ItemLedgerEntry.SETRANGE("Order No.",AssemblyHeader."No.");
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::"Assembly Output");
      Assert.AreEqual(ExpectedOutput,ItemLedgerEntry.COUNT,
        'Missing or unexpected item ledger entries');
    END;

    LOCAL PROCEDURE ValidateTrackedQty@130(SourceType@1004 : Integer;SourceID@1001 : Code[20];ExpectedQty@1002 : Integer);
    VAR
      ReservationEntry@1000 : Record 337;
      ActualQty@1003 : Decimal;
    BEGIN
      ReservationEntry.RESET;
      ReservationEntry.SETRANGE("Source Type",SourceType);
      ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Reservation);
      ReservationEntry.SETRANGE(Positive,TRUE);
      ReservationEntry.SETFILTER("Item Tracking",'<>%1',ReservationEntry."Item Tracking"::None);
      ActualQty := 0;

      IF ReservationEntry.FINDSET THEN
        REPEAT
          ActualQty += ReservationEntry."Quantity (Base)";
        UNTIL ReservationEntry.NEXT = 0;

      Assert.AreEqual(ExpectedQty,ActualQty,'Tracked Qty mismatch for ' + FORMAT(SourceID));
    END;

    LOCAL PROCEDURE ValidateItemTracingLinesUTO@61(SetLotNo@1008 : Boolean;SetSerialNo@1009 : Boolean;SetItemNo@1010 : Boolean;AssemblyHeader@1003 : Record 900;AssemblyLine@1004 : Record 901;AssemblyLine2@1002 : Record 901;SalesHeader@1000 : Record 36);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      ItemTracingPage@1007 : TestPage 6520;
      KitItem@1005 : Code[20];
      i@1012 : Integer;
    BEGIN
      KitItem := AssemblyHeader."Item No.";

      COMMIT;
      ItemTracingPage.OPENEDIT;

      ItemLedgerEntry.SETRANGE("Item No.",KitItem);
      ItemLedgerEntry.FINDFIRST;

      IF SetSerialNo THEN
        ItemTracingPage.SerialNoFilter.SETVALUE(ItemLedgerEntry."Serial No.");
      IF SetLotNo THEN
        ItemTracingPage.LotNoFilter.SETVALUE(ItemLedgerEntry."Lot No.");
      IF SetItemNo THEN
        ItemTracingPage.ItemNoFilter.SETVALUE(AssemblyHeader."Item No.");

      ItemTracingPage.Trace.INVOKE;

      ExpectShippedSalesOrder(ItemTracingPage,SalesHeader,KitItem,1,TRUE);
      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,TRUE);
      FOR i := 1 TO AssemblyLine.Quantity DO BEGIN
        ExpectAssemblyConsumption(ItemTracingPage,AssemblyHeader,AssemblyLine,1,TRUE);
        ExpectILE(ItemTracingPage,AssemblyLine,1,FALSE);
      END;
      ExpectAssemblyConsumption(ItemTracingPage,AssemblyHeader,AssemblyLine2,AssemblyLine2.Quantity,TRUE);
      ExpectILE(ItemTracingPage,AssemblyLine2,AssemblyLine2.Quantity,FALSE);

      Assert.IsFalse(ItemTracingPage.NEXT,
        'Unexpected Item Tracing entries');
    END;

    LOCAL PROCEDURE ValidateItemTracingLineOTUKit@72(AssemblyHeader@1000 : Record 900;SalesHeader@1002 : Record 36);
    VAR
      ItemTracingPage@1001 : TestPage 6520;
    BEGIN
      COMMIT;
      ItemTracingPage.OPENEDIT;
      ItemTracingPage.ItemNoFilter.SETVALUE(AssemblyHeader."Item No.");
      ItemTracingPage.ShowComponents.SETVALUE('All');
      ItemTracingPage.TraceMethod.SETVALUE('Origin -> Usage');
      ItemTracingPage.Trace.INVOKE;

      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,AssemblyHeader.Quantity,TRUE);
      ExpectShippedSalesOrder(ItemTracingPage,SalesHeader,AssemblyHeader."Item No.",AssemblyHeader.Quantity,FALSE);

      Assert.IsFalse(ItemTracingPage.NEXT,
        'Unexpected Item Tracing entry');

      ItemTracingPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE ValidateItemTracingLineOTUComp@73(AssemblyHeader@1000 : Record 900;AssemblyLine@1001 : Record 901;SalesHeader@1004 : Record 36;TrackingType@1003 : Option);
    VAR
      ItemLedgerEntry@1002 : Record 32;
      ItemTracingPage@1005 : TestPage 6520;
      Quantity@1006 : Integer;
    BEGIN
      COMMIT;
      ItemTracingPage.OPENEDIT;
      ItemTracingPage.ShowComponents.SETVALUE('All');
      ItemTracingPage.TraceMethod.SETVALUE('Origin -> Usage');
      ItemTracingPage.ShowComponents.SETVALUE('No');

      ItemLedgerEntry.SETRANGE("Item No.",AssemblyLine."No.");
      ItemLedgerEntry.FINDSET;
      ItemLedgerEntry.NEXT(RANDOM(ItemLedgerEntry.COUNT));

      IF IsSerial(TrackingType) THEN BEGIN
        ItemTracingPage.SerialNoFilter.SETVALUE(ItemLedgerEntry."Serial No.");
        Quantity := 1;
      END ELSE
        IF IsLot(TrackingType) THEN BEGIN
          ItemTracingPage.LotNoFilter.SETVALUE(ItemLedgerEntry."Lot No.");
          Quantity := AssemblyLine.Quantity;
        END;

      ItemTracingPage.Trace.INVOKE;

      ExpectILE(ItemTracingPage,AssemblyLine,Quantity,TRUE);
      ExpectAssemblyConsumption(ItemTracingPage,AssemblyHeader,AssemblyLine,Quantity,TRUE);
      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,TRUE);
      ExpectShippedSalesOrder(ItemTracingPage,SalesHeader,AssemblyHeader."Item No.",1,FALSE);

      Assert.IsFalse(ItemTracingPage.NEXT,
        STRSUBSTNO('Unexpected Item Tracing entry %1',ItemTracingPage.Description.VALUE));

      ItemTracingPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE ValidateShowComponents@114(AssemblyHeader@1000 : Record 900;AssemblyLine@1001 : Record 901;AssemblyLine2@1002 : Record 901;ShowITComp@1004 : Boolean;ShowNonITComp@1003 : Boolean);
    VAR
      ItemTracingPage@1005 : TestPage 6520;
      i@1006 : Integer;
    BEGIN
      COMMIT;
      ItemTracingPage.OPENEDIT;

      IF ShowITComp AND ShowNonITComp THEN
        ItemTracingPage.ShowComponents.SETVALUE('All')
      ELSE
        IF (NOT ShowITComp) AND (NOT ShowNonITComp) THEN
          ItemTracingPage.ShowComponents.SETVALUE('No')
        ELSE
          ItemTracingPage.ShowComponents.SETVALUE('Item-tracked Only');

      ItemTracingPage.ItemNoFilter.SETVALUE(AssemblyHeader."Item No.");
      ItemTracingPage.TraceMethod.SETVALUE('Usage -> Origin');
      ItemTracingPage.Trace.INVOKE;

      ExpectAssemblyOutput(ItemTracingPage,AssemblyHeader,1,ShowITComp);
      IF ShowITComp THEN
        FOR i := 1 TO AssemblyLine.Quantity DO
          ExpectAssemblyConsumption(ItemTracingPage,AssemblyHeader,AssemblyLine,1,FALSE);

      IF ShowNonITComp THEN
        ExpectAssemblyConsumption(ItemTracingPage,AssemblyHeader,AssemblyLine2,AssemblyLine2.Quantity,FALSE);

      Assert.IsFalse(ItemTracingPage.NEXT,
        STRSUBSTNO('Unexpected Item Tracing entry %1',ItemTracingPage.Description.VALUE));

      ItemTracingPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE ValidateShadowAssemblyHeader@68(AssemblyHeader@1000 : Record 900;AssemblyHeaderQuote@1001 : Record 900);
    BEGIN
      Assert.AreEqual(AssemblyHeaderQuote."Item No.",AssemblyHeader."Item No.",
        'Mismatch in Item No. on Assembly Order created from Assembly Quote');
      Assert.AreEqual(AssemblyHeaderQuote.Description,AssemblyHeader.Description,
        'Mismatch in Description on Assembly Order created from Assembly Quote');
      Assert.AreEqual(AssemblyHeaderQuote.Quantity,AssemblyHeader.Quantity,
        'Mismatch in Quantity on Assembly Order created from Assembly Quote');
      Assert.AreEqual(AssemblyHeaderQuote."Quantity to Assemble",AssemblyHeader.Quantity,
        'Mismatch in Quantity to Assembly on Assembly Order created from Assembly Quote');
      Assert.AreEqual(AssemblyHeaderQuote."Assemble to Order",AssemblyHeader."Assemble to Order",
        'Mismatch in ''Assemble to Order'' on Assembly Order created from Assembly Quote');
    END;

    LOCAL PROCEDURE ValidateShadowAssemblyLine@70(VAR AssemblyHeader@1000 : Record 900);
    VAR
      AssemblyLine@1002 : Record 901;
      Item@1004 : Record 27;
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
      AssemblyLine.FINDSET;
      REPEAT
        Item.GET(AssemblyLine."No.");
        ItemTrackingCode.GET(Item."Item Tracking Code");
        IF ItemTrackingCode."SN Specific Tracking" THEN
          ValidateResEntryCountLine(AssemblyLine,AssemblyLine.Quantity)
        ELSE
          IF ItemTrackingCode."Lot Specific Tracking" THEN
            ValidateResEntryCountLine(AssemblyLine,1);
      UNTIL AssemblyLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ExpectShippedSalesOrder@23(VAR ItemTracingPage@1000 : TestPage 6520;SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];Quantity@1004 : Integer;Expand@1005 : Boolean);
    VAR
      SalesShipmentHeader@1003 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("External Document No.",SalesHeader."External Document No.");
      SalesShipmentHeader.FINDFIRST;

      Assert.AreEqual(
        ItemTracingPage.Description.VALUE,
        STRSUBSTNO('Sales Shipment Header %1',SalesShipmentHeader."No."),
        'Unexpected Item Tracing entry type.');

      ItemTracingPage."Item No.".ASSERTEQUALS(ItemNo);
      ItemTracingPage.Quantity.ASSERTEQUALS(-Quantity);

      IF Expand THEN
        ItemTracingPage.EXPAND(TRUE);
      ItemTracingPage.NEXT;
    END;

    LOCAL PROCEDURE ExpectAssemblyOutput@28(VAR ItemTracingPage@1000 : TestPage 6520;AssemblyHeader@1001 : Record 900;Quantity@1004 : Integer;Expand@1005 : Boolean);
    VAR
      PostedAssemblyHeader@1003 : Record 910;
    BEGIN
      PostedAssemblyHeader.SETRANGE("Order No.",AssemblyHeader."No.");
      PostedAssemblyHeader.FINDFIRST;

      Assert.AreEqual(
        ItemTracingPage.Description.VALUE,
        STRSUBSTNO('Assembly Output %1',PostedAssemblyHeader."No."),
        'Unexpected Item Tracing entry type.');
      ItemTracingPage."Item No.".ASSERTEQUALS(AssemblyHeader."Item No.");
      ItemTracingPage.Quantity.ASSERTEQUALS(Quantity);

      IF Expand THEN
        ItemTracingPage.EXPAND(TRUE);
      IF (NOT Expand) AND ItemTracingPage.ISEXPANDED THEN
        ItemTracingPage.EXPAND(FALSE);
      ItemTracingPage.NEXT;
    END;

    LOCAL PROCEDURE ExpectAssemblyConsumption@37(VAR ItemTracingPage@1000 : TestPage 6520;AssemblyHeader@1001 : Record 900;AssemblyLine@1006 : Record 901;Quantity@1008 : Integer;Expand@1005 : Boolean);
    VAR
      PostedAssemblyHeader@1002 : Record 910;
    BEGIN
      PostedAssemblyHeader.SETRANGE("Order No.",AssemblyHeader."No.");
      PostedAssemblyHeader.FINDFIRST;

      Assert.AreEqual(
        ItemTracingPage.Description.VALUE,
        STRSUBSTNO('Assembly Consumption %1',PostedAssemblyHeader."No."),
        'Unexpected Item Tracing entry type.');

      ItemTracingPage."Item No.".ASSERTEQUALS(AssemblyLine."No.");
      ItemTracingPage.Quantity.ASSERTEQUALS(-Quantity);

      IF Expand THEN
        ItemTracingPage.EXPAND(TRUE);
      ItemTracingPage.NEXT;
    END;

    LOCAL PROCEDURE ExpectILE@46(VAR ItemTracingPage@1000 : TestPage 6520;AssemblyLine@1001 : Record 901;Quantity@1002 : Integer;expand@1004 : Boolean);
    BEGIN
      Assert.IsTrue(
        STRPOS(ItemTracingPage.Description.VALUE,'Item Ledger Entry') = 1,
        STRSUBSTNO('Unexpected Item Tracing entry type. Was %1. Expected Item Ledger Entry.',ItemTracingPage.Description.VALUE));

      ItemTracingPage."Item No.".ASSERTEQUALS(AssemblyLine."No.");
      ItemTracingPage.Quantity.ASSERTEQUALS(Quantity);

      IF expand THEN
        ItemTracingPage.EXPAND(TRUE);
      ItemTracingPage.NEXT;
    END;

    LOCAL PROCEDURE NavigateExpect@43(VAR NavigatePage@1000 : TestPage 344;TableName@1001 : Text[40];Quantity@1002 : Integer);
    BEGIN
      NavigatePage.FIRST;
      REPEAT
        IF (NavigatePage."Table Name".VALUE = TableName) AND (NavigatePage."No. of Records".ASINTEGER = Quantity) THEN
          EXIT;
      UNTIL NOT NavigatePage.NEXT;

      Assert.Fail(STRSUBSTNO('Navigate entry not found. Expected: %1 with qty. of %2',TableName,Quantity));
    END;

    LOCAL PROCEDURE NavigateFindSerial@47(VAR NavigatePage@1000 : TestPage 344;AssemblyHeader@1001 : Record 900);
    VAR
      ItemLedgerEntry@1002 : Record 32;
      ReservationEntry@1003 : Record 337;
    BEGIN
      COMMIT;
      NavigatePage.OPENEDIT;
      NavigatePage.LotNoFilter.SETVALUE('');

      ItemLedgerEntry.SETRANGE("Item No.",AssemblyHeader."Item No.");
      ReservationEntry.SETRANGE("Item No.",AssemblyHeader."Item No.");

      IF ItemLedgerEntry.FINDFIRST THEN
        NavigatePage.SerialNoFilter.SETVALUE(ItemLedgerEntry."Serial No.")
      ELSE BEGIN
        ReservationEntry.FINDFIRST;
        NavigatePage.SerialNoFilter.SETVALUE(ReservationEntry."Serial No.");
      END;

      NavigatePage.Find.INVOKE;
    END;

    LOCAL PROCEDURE NavigateFindLot@52(VAR NavigatePage@1000 : TestPage 344;AssemblyHeader@1001 : Record 900);
    VAR
      ItemLedgerEntry@1002 : Record 32;
      ReservationEntry@1003 : Record 337;
    BEGIN
      COMMIT;
      NavigatePage.OPENEDIT;
      NavigatePage.SerialNoFilter.SETVALUE('');

      ItemLedgerEntry.SETRANGE("Item No.",AssemblyHeader."Item No.");
      ReservationEntry.SETRANGE("Item No.",AssemblyHeader."Item No.");

      IF ItemLedgerEntry.FINDFIRST THEN
        NavigatePage.LotNoFilter.SETVALUE(ItemLedgerEntry."Lot No.")
      ELSE BEGIN
        ReservationEntry.FINDFIRST;
        NavigatePage.LotNoFilter.SETVALUE(ReservationEntry."Lot No.");
      END;

      NavigatePage.Find.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Item Tracking] [SCM]
      Unsupported version tags:
      NZ: Unable to Execute
      AU: Unable to Execute
      DK: Unable to Execute

      This CU is for deliverable Kitting D05B - Item Tracking, as per the following:
       ITPost,ITComp,ITAsm story codes.
    }
    END.
  }
}

