OBJECT Codeunit 144014 Add. Currency Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500013 : Record 98;
      ServiceTaxGroups@1500007 : Record 16471;
      ServiceTaxRegistrationNos@1500005 : Record 16475;
      ServiceTaxSetup@1500002 : Record 16472;
      Location@1500022 : Record 14;
      State@1500021 : Record 13762;
      TaxArea@1500016 : Record 318;
      TaxAreaLine@1500017 : Record 319;
      TaxJurisdiction@1500018 : Record 320;
      TaxGroup@1500019 : Record 321;
      TaxDetail@1500020 : Record 322;
      LibraryERM@1500001 : Codeunit 131300;
      LibraryUtility@1500003 : Codeunit 131000;
      LibraryServiceTax@1500004 : Codeunit 143001;
      LibrarySales@1500006 : Codeunit 130509;
      LibraryRandom@1500008 : Codeunit 130440;
      LibraryVariableStorage@1500009 : Codeunit 131004;
      Assert@1500010 : Codeunit 130000;
      ReverseServiceTaxHelper@1500012 : Codeunit 143006;
      AmountErr@1500011 : TextConst '@@@="%1 and %2 = TDS% and TDS field Caption";ENU=%1 is incorrect in %2.';
      ServiceTaxAsExciseHelper@1500014 : Codeunit 143003;
      LibraryWarehouse@1500015 : Codeunit 132204;
      LibraryInventory@1500023 : Codeunit 132201;
      IsInitialized@1500000 : Boolean;

    [Test]
    [HandlerFunctions(ChangeExchangeRatePageHandler)]
    PROCEDURE PostBankReceiptVoucherWithAddCurrency@1500011();
    VAR
      GenJournalLine@1500001 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      CurrencyCode@1500000 : Code[10];
    BEGIN
      // [SCENARIO 164409, BUG 167146] Create Bank Receipt Voucher With AdvancePayment on service tax and Additional Currency
      // [FEATURE] [Additional Currency Transactions]

      // [GIVEN] Created Service Tax Setup, Update Additional Reporting Currency in GL Setup
      Initialize;
      CurrencyCode := LibraryERM.CreateCurrencyWithRandomExchRates;
      UpdateGLSetupWithAddReportingCurrencyAndRetainedEarnAcc(CurrencyCode);

      // [WHEN] Create Bank Receipt Voucher
      CreateJournalForAddCurrencyWithBalAcc(GenJournalLine,
        GenJournalTemplate.Type::General,GenJournalTemplate."Sub Type"::"Bank Receipt Voucher",CurrencyCode);

      // [THEN] Amount And Additional Currency Amount is verified for posted GL Entries
      VerifyPostedEntries(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(ModalSalesStatisticsPageHandler)]
    PROCEDURE GenerateSalesOrderWithInvDiscAndPITItem@1500001();
    VAR
      SalesHeader@1500003 : Record 36;
      SalesLine@1500001 : Record 37;
      SalesOrder@1500004 : TestPage 42;
      StructureType@1500000 : 'Charges,Sales Tax,Excise,Other Taxes,Service Tax';
      DocumentType@1500002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
    BEGIN
      // [SCENARIO 163663, BUG 166800] Verify Invoice Discount Amount and Sales Tax Amount in Sales Order with PIT structure
      // [FEATURE] [Sales Order]

      // [GIVEN] GL Setup is updated, structure is Created
      Initialize;
      UpdateGLSetupWithInvAndVATRoundingPrecision;

      // [WHEN] Create Sales Order And  Calculate Structure Values
      CreateAndUpdateSalesOrder(SalesHeader,SalesLine,DocumentType::Order,StructureType::"Sales Tax");
      SalesOrder.OPENVIEW;
      SalesOrder.GOTORECORD(SalesHeader);
      SalesOrder.Statistics.INVOKE;

      // [THEN] Amounts are verified in Sales Statistics page.
      VerifyTaxAndDiscountAmounts(SalesHeader."No.");
    END;

    LOCAL PROCEDURE Initialize@1500010();
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegistrationNos);
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroups);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,WORKDATE - 1);
      CreateTaxSetupAndStateAndLocations;
      GeneralLedgerSetup.GET;
      ServiceTaxSetup.GET(ServiceTaxGroups.Code,WORKDATE - 1);
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalculateTaxAndDiscountAmounts@1500019(SalesLine@1500000 : Record 37;VAR TaxAmount@1500001 : Decimal;VAR AmountExclVat@1500002 : Decimal;VAR InvDiscAmount@1500003 : Decimal;VAR TotalExclVat@1500004 : Decimal;VAR NetTotal@1500005 : Decimal);
    VAR
      CustInvoiceDisc@1500008 : Record 19;
      Item@1500007 : Record 27;
      TotalIncTaxPct@1500009 : Decimal;
      ItemAmount@1500010 : Decimal;
    BEGIN
      TotalIncTaxPct := 100 + TaxDetail."Tax Below Maximum";
      Item.GET(SalesLine."No.");
      TaxAmount := Item."Unit Price" * SalesLine.Quantity * TaxDetail."Tax Below Maximum" / TotalIncTaxPct;
      ItemAmount := Item."Unit Price" * SalesLine.Quantity;
      AmountExclVat := ItemAmount - TaxAmount;
      CustInvoiceDisc.GET(SalesLine."Sell-to Customer No.",'',0);
      InvDiscAmount := AmountExclVat * CustInvoiceDisc."Discount %" / 100;
      TotalExclVat := AmountExclVat - InvDiscAmount;
      NetTotal := Item."Unit Price" * SalesLine.Quantity - InvDiscAmount;
    END;

    LOCAL PROCEDURE CreateAndModifyGenJoournalLineWithBalAcc@1500004(VAR GenJournalLine@1500003 : Record 81;GenJournalBatch@1500001 : Record 232;CurrencyCode@1500000 : Code[10]);
    VAR
      CustomerNo@1500002 : Code[20];
    BEGIN
      CustomerNo := LibrarySales.CreateForeignCustomer(CurrencyCode);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        CustomerNo,-LibraryRandom.RandDecInRange(10000,20000,2));
      WITH GenJournalLine DO BEGIN
        VALIDATE("Party Type","Party Type"::Customer);
        VALIDATE("Party Code",CustomerNo);
        VALIDATE("Serv. Tax on Advance Payment",TRUE);
        VALIDATE("Service Tax Group Code",ServiceTaxGroups.Code);
        VALIDATE("Service Tax Registration No.",ServiceTaxRegistrationNos.Code);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
        MODIFY(TRUE);
      END
    END;

    LOCAL PROCEDURE CreateAndUpdateStructureWithPITCalculation@1500008(StructureType@1500000 : Option) : Code[10];
    VAR
      StructureDetails@1500001 : Record 13793;
      StructureCode@1500002 : Code[20];
    BEGIN
      StructureCode := ServiceTaxAsExciseHelper.CreateStructure(StructureType);
      StructureDetails.SETRANGE(Code,StructureCode);
      StructureDetails.FINDFIRST;
      StructureDetails.VALIDATE("Include Invoice Discount",FALSE);
      StructureDetails.VALIDATE("Include PIT Calculation",TRUE);
      StructureDetails.MODIFY;
      EXIT(StructureCode);
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesOrder@1500013(VAR SalesHeader@1500002 : Record 36;VAR SalesLine@1500004 : Record 37;DocumentType@1500001 : Option;StructureType@1500000 : Option);
    BEGIN
      CreateAndUpdateSalesHeaderWithStructureAndInvDisc(SalesHeader,DocumentType,StructureType);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,
        CreateItemAndUpdateWithPITAndPrice(SalesHeader.Structure),LibraryRandom.RandIntInRange(1,3));
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesHeaderWithStructureAndInvDisc@1500015(VAR SalesHeader@1500000 : Record 36;DocumentType@1500001 : Option;StructureType@1500002 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomerAndUpdateWithInvoiceDiscount);
      WITH SalesHeader DO BEGIN
        VALIDATE(Structure,CreateAndUpdateStructureWithPITCalculation(StructureType));
        VALIDATE("Calc. Inv. Discount (%)",TRUE);
        VALIDATE("Location Code",Location.Code);
        MODIFY(TRUE);
      END
    END;

    LOCAL PROCEDURE CreateTaxSetupAndStateAndLocations@1500026();
    VAR
      TaxAreaLocationsType@1500000 : 'Customer,Vendor';
    BEGIN
      LibraryERM.CreateTaxArea(TaxArea);
      LibraryERM.CreateTaxJurisdiction(TaxJurisdiction);
      LibraryERM.CreateTaxGroup(TaxGroup);
      LibraryWarehouse.CreateLocation(Location);
      LibraryERM.CreateState(State);
      Location.VALIDATE("State Code",State.Code);
      Location.MODIFY;
      LibraryERM.CreateState(State);
      TaxJurisdiction.VALIDATE("State Code",Location."State Code");
      TaxJurisdiction.VALIDATE("Tax Type",TaxJurisdiction."Tax Type"::CST);
      TaxJurisdiction.MODIFY(TRUE);
      ServiceTaxAsExciseHelper.CreateTaxAreaLocations(Location.Code,State.Code,TaxArea.Code,TaxAreaLocationsType::Customer);
      LibraryERM.CreateTaxAreaLine(TaxAreaLine,TaxArea.Code,TaxJurisdiction.Code);
      TaxAreaLine.VALIDATE("Include Tax Base",TRUE);
      TaxAreaLine.MODIFY;
      LibraryERM.CreateTaxDetail(TaxDetail,TaxJurisdiction.Code,TaxGroup.Code,TaxDetail."Tax Type"::"Sales Tax",WORKDATE);
      TaxDetail.VALIDATE("Tax Below Maximum",LibraryRandom.RandDecInRange(10,15,2));
      TaxDetail.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateCustomerAndUpdateWithInvoiceDiscount@1500017() : Code[20];
    VAR
      Customer@1500000 : Record 18;
      CustInvoiceDisc@1500001 : Record 19;
    BEGIN
      LibrarySales.CreateCustomerWithStateCode(Customer,State.Code);
      Customer.VALIDATE("Tax Liable",TRUE);
      Customer.MODIFY;
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,Customer."No.",'',0);
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandIntInRange(5,10));
      CustInvoiceDisc.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateJournalForAddCurrencyWithBalAcc@1500007(VAR GenJournalLine@1500000 : Record 81;TemplateType@1500004 : Option;TemplateSubtype@1500003 : Option;CurrencyCode@1500002 : Code[10]);
    VAR
      GenJournalBatch@1500001 : Record 232;
      CurrencyExchangeRate@1500008 : Record 330;
      NewCurrencyExchangeRate@1500007 : Decimal;
    BEGIN
      CreateGeneralJournalTemplateAndBatch(GenJournalBatch,TemplateType,TemplateSubtype);
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      NewCurrencyExchangeRate := CurrencyExchangeRate."Relational Exch. Rate Amount" * LibraryRandom.RandDecInRange(1,2,1);
      LibraryVariableStorage.Enqueue(NewCurrencyExchangeRate);
      CreateAndModifyGenJoournalLineWithBalAcc(GenJournalLine,GenJournalBatch,CurrencyCode);
      UpdateCurrencyExchRateGenJnlLine(GenJournalLine);
      Assert.AreNearlyEqual(
        CurrencyExchangeRate."Exchange Rate Amount" / NewCurrencyExchangeRate,GenJournalLine."Currency Factor",
        GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GenJournalLine.FIELDNAME("Currency Factor"),GenJournalLine.TABLECAPTION));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralJournalTemplateAndBatch@1500006(VAR GenJournalBatch@1500001 : Record 232;TemplateType@1500000 : Option;TemplateSubtype@1500003 : Option);
    VAR
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,TemplateType);
      GenJournalTemplate.VALIDATE("Sub Type",TemplateSubtype);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemAndUpdateWithPITAndPrice@1500022(StructureCode@1500001 : Code[10]) : Code[20];
    VAR
      Item@1500000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Price Inclusive of Tax",TRUE);
        VALIDATE("PIT Structure",StructureCode);
        VALIDATE("Unit Price",LibraryRandom.RandIntInRange(800,1000));
        VALIDATE("Allow Invoice Disc.",TRUE);
        VALIDATE("Tax Group Code",TaxGroup.Code);
        MODIFY;
      END;
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE UpdateGLSetupWithAddReportingCurrencyAndRetainedEarnAcc@1500009(CurrencyCode@1500000 : Code[10]);
    BEGIN
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      LibraryERM.RunAddnlReportingCurrency(CurrencyCode,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10),
        LibraryERM.CreateGLAccountNo);
    END;

    LOCAL PROCEDURE UpdateCurrencyExchRateGenJnlLine@1500014(VAR GenJournalLine@1500000 : Record 81);
    VAR
      ChangeExchangeRate@1500001 : Page 511;
    BEGIN
      ChangeExchangeRate.SetParameter(GenJournalLine."Currency Code",GenJournalLine."Currency Factor",GenJournalLine."Posting Date");
      IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN
        GenJournalLine.VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGLSetupWithInvAndVATRoundingPrecision@1500002();
    BEGIN
      GeneralLedgerSetup.GET;
      WITH GeneralLedgerSetup DO BEGIN
        VALIDATE("Inv. Rounding Precision (LCY)",1);
        VALIDATE("VAT Rounding Precision",0.01);
        VALIDATE("VAT Rounding Type","VAT Rounding Type"::Nearest);
        MODIFY(TRUE);
      END
    END;

    LOCAL PROCEDURE VerifyGLEntryAdditionalCurrencyAmount@1500021(GLAccNo@1500002 : Code[20];DocNo@1500001 : Code[20];ExpectedAmount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ExpectedAmount,GLEntry."Additional-Currency Amount",GeneralLedgerSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDNAME("Additional-Currency Amount"),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPostedEntries@1500005(GenJournalLine@1500000 : Record 81);
    VAR
      DummyGLEntry@1500001 : Record 17;
      ServTaxBaseAmount@1500002 : Decimal;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      Assert.RecordCount(DummyGLEntry,8);
      VerifyGLEntry(LibrarySales.GetCustomerAccount(GenJournalLine."Account No."),GenJournalLine."Document No.",
        GenJournalLine.Amount / GenJournalLine."Currency Factor");
      VerifyGLEntryAdditionalCurrencyAmount(LibrarySales.GetCustomerAccount(GenJournalLine."Account No."),
        GenJournalLine."Document No.",GenJournalLine.Amount);
      VerifyGLEntry(ReverseServiceTaxHelper.GetBankAccGLPostingAcc(GenJournalLine."Bal. Account No."),
        GenJournalLine."Document No.",-GenJournalLine.Amount / GenJournalLine."Currency Factor");
      VerifyGLEntryAdditionalCurrencyAmount(ReverseServiceTaxHelper.GetBankAccGLPostingAcc(GenJournalLine."Bal. Account No."),
        GenJournalLine."Document No.",-GenJournalLine.Amount);
      ServTaxBaseAmount := ReverseServiceTaxHelper.CalcServTaxBaseAmountBackwardWithKKC(GenJournalLine.Amount,ServiceTaxSetup,0);
      VerifyGLEntry(ServiceTaxSetup."Service Tax Payable Account",GenJournalLine."Document No.",
        ReverseServiceTaxHelper.CalculateServTax(ServTaxBaseAmount,ServiceTaxSetup) / GenJournalLine."Currency Factor");
      VerifyGLEntryAdditionalCurrencyAmount(ServiceTaxSetup."Service Tax Payable Account",GenJournalLine."Document No.",
        ReverseServiceTaxHelper.CalculateServTax(ServTaxBaseAmount,ServiceTaxSetup));
      VerifyGLEntry(ServiceTaxSetup."Payables Account (Interim)",GenJournalLine."Document No.",-
        ReverseServiceTaxHelper.CalculateServTax(ServTaxBaseAmount,ServiceTaxSetup) / GenJournalLine."Currency Factor");
      VerifyGLEntryAdditionalCurrencyAmount(ServiceTaxSetup."Payables Account (Interim)",GenJournalLine."Document No.",-
        ReverseServiceTaxHelper.CalculateServTax(ServTaxBaseAmount,ServiceTaxSetup));
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500016(GLAccNo@1500002 : Code[20];DocNo@1500001 : Code[20];ExpectedAmount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ExpectedAmount,GLEntry.Amount,GeneralLedgerSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDNAME(Amount),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTaxAndDiscountAmounts@1500024(DocumentNo@1500001 : Code[20]);
    VAR
      SalesHeader@1500002 : Record 36;
      SalesLine@1500013 : Record 37;
      SalesOrderStatistics@1500000 : TestPage 402;
      TaxAmount@1500007 : Decimal;
      AmountExclVat@1500006 : Decimal;
      InvDiscAmount@1500005 : Decimal;
      TotalExclVat@1500004 : Decimal;
      NetTotal@1500003 : Decimal;
      TaxAmountPage@1500012 : Decimal;
      AmountExclVatPage@1500011 : Decimal;
      InvDiscAmountPage@1500010 : Decimal;
      TotalExclVatPage@1500009 : Decimal;
      NetTotalPage@1500008 : Decimal;
    BEGIN
      SalesHeader.SETRANGE("No.",DocumentNo);
      SalesHeader.FINDFIRST;
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      CalculateTaxAndDiscountAmounts(SalesLine,TaxAmount,AmountExclVat,InvDiscAmount,TotalExclVat,NetTotal);
      SalesOrderStatistics.OPENVIEW;
      SalesOrderStatistics.GOTORECORD(SalesHeader);
      AmountExclVatPage := SalesOrderStatistics.LineAmountGeneral.ASDECIMAL;
      InvDiscAmountPage := SalesOrderStatistics.InvDiscountAmount_General.ASDECIMAL;
      TotalExclVatPage := SalesOrderStatistics.Control7.ASDECIMAL;
      TaxAmountPage := SalesOrderStatistics.Control1500002.ASDECIMAL;
      NetTotalPage := SalesOrderStatistics.Control1500017.ASDECIMAL;
      Assert.AreNearlyEqual(
        AmountExclVat,AmountExclVatPage,GeneralLedgerSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr));
      Assert.AreNearlyEqual(
        InvDiscAmount,InvDiscAmountPage,GeneralLedgerSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr));
      Assert.AreNearlyEqual(
        TotalExclVat,TotalExclVatPage,GeneralLedgerSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr));
      Assert.AreNearlyEqual(
        TaxAmount,TaxAmountPage,GeneralLedgerSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr));
      Assert.AreNearlyEqual(
        NetTotal,NetTotalPage,GeneralLedgerSetup."Service Tax Rounding Precision",STRSUBSTNO(AmountErr));
    END;

    [ModalPageHandler]
    PROCEDURE ChangeExchangeRatePageHandler@1500000(VAR ChangeExchangeRate@1500118 : TestPage 511);
    VAR
      NewCurrencyExchangeRate@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NewCurrencyExchangeRate);
      ChangeExchangeRate.RefExchRate.SETVALUE(NewCurrencyExchangeRate);
      ChangeExchangeRate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ModalSalesStatisticsPageHandler@1500028(VAR SalesOrderStatistics@1500000 : TestPage 402);
    BEGIN
    END;

    BEGIN
    END.
  }
}

