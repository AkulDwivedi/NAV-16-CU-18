OBJECT Codeunit 137392 SCM - Able To Make Report
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      MfgSetup@1025 : Record 99000765;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryAssembly@1013 : Codeunit 132207;
      LibraryERMCountryData@1017 : Codeunit 131305;
      LibraryManufacturing@1030 : Codeunit 132202;
      LibraryTrees@1016 : Codeunit 132208;
      LibraryWarehouse@1020 : Codeunit 132204;
      LibraryVariableStorage@1004 : Codeunit 131004;
      LibraryReportDataset@1000 : Codeunit 131007;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1007 : Codeunit 130440;
      isInitialized@1006 : Boolean;
      FilterType@1008 : 'None,Location,Variant,Header Location,Header Variant,Component Location,Component Variant';
      SupplyType@1005 : 'Inventory,Purchase,Prod. Order';
      GLBDateInterval@1010 : 'Day,Week,Month,Quarter,Year';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    BEGIN
      // Initialize setup.
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      isInitialized := TRUE;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      MfgSetup.GET;
      UpdateMfgSetup('<1D>');
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE SetupAbleToMake@11(VAR BOMBuffer@1018 : Record 5870;TestLocation@1010 : Boolean;SourceType@1006 : Option;BottleneckFactor@1008 : Decimal;ShowTotalAvailability@1009 : Boolean;DueDateDelay@1012 : Text;ChildLeaves@1013 : Integer;Depth@1017 : Integer;DirectAvailFactor@1016 : Decimal;DateInterval@1014 : Option);
    VAR
      ItemVariant@1005 : Record 5401;
      Location@1004 : Record 14;
      Item@1015 : Record 27;
      CalculateBOMTree@1001 : Codeunit 5870;
      TreeType@1019 : ' ,Availability,Cost';
      GenProdPostingGroup@1002 : Code[10];
      InventoryPostingGroup@1003 : Code[10];
      AbleToMake@1000 : Decimal;
      DueDateDelayDateFormula@1007 : DateFormula;
    BEGIN
      // Setup.
      Initialize;
      AbleToMake := LibraryRandom.RandIntInRange(10,25);

      LibraryAssembly.SetupPostingToGL(GenProdPostingGroup,InventoryPostingGroup,InventoryPostingGroup,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryAssembly.CreateItem(
        Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,GenProdPostingGroup,InventoryPostingGroup);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryTrees.CreateMixedTree(Item,Item."Replenishment System"::Assembly,Item."Costing Method"::Standard,Depth,ChildLeaves,2);
      LibraryTrees.CreateNodeSupply(Item."No.",Location.Code,WORKDATE,SourceType,AbleToMake,BottleneckFactor,DirectAvailFactor);

      Item.SETRANGE("No.",Item."No.");
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);
      Item.SETRANGE("Date Filter",0D,CALCDATE(DueDateDelayDateFormula,WORKDATE));

      IF TestLocation THEN
        LibraryWarehouse.CreateLocation(Location);
      Item.SETRANGE("Location Filter",Location.Code);
      Item.SETRANGE("Variant Filter",ItemVariant.Code);

      IF TestLocation OR (DueDateDelay <> '<0D>') THEN
        AbleToMake := 0;

      // Exercise: Run Able To Make - Timeline.
      CalculateBOMTree.SetShowTotalAvailability(ShowTotalAvailability);
      CalculateBOMTree.GenerateTreeForItems(Item,BOMBuffer,TreeType::Availability);

      // Verify: The Able To Make - Timeline report.
      VerifyAbleToMakeReport(BOMBuffer,CALCDATE(DueDateDelayDateFormula,WORKDATE),DateInterval,Location.Code,'','');
      BOMBuffer.GET(BOMBuffer."Entry No.");
      BOMBuffer."Location Code" := Location.Code;
      BOMBuffer."Variant Code" := ItemVariant.Code;
      BOMBuffer.MODIFY;
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE SunshineItemJnlDay@164();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,1,0.3,GLBDateInterval::Day);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE SunshineItemJnlWeek@76();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,1,0.3,GLBDateInterval::Week);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE SunshinePurchaseOrdersMonth@2();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Purchase,1,TRUE,'<0D>',1,1,0.5,GLBDateInterval::Month);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE ShowTotalAvailFalseQuarter@6();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Purchase,1,FALSE,'<0D>',1,1,0.6,GLBDateInterval::Quarter)
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE NegativeAvailForSubassemblyDay@43();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,1,0,GLBDateInterval::Day);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE NegAvailForSubassemblyUnbalancedTreeYr@46();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Inventory,0.7,TRUE,'<0D>',1,1,0,GLBDateInterval::Year);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE LocationFilterDay@7();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,TRUE,SupplyType::Purchase,1,TRUE,'<0D>',1,1,0.8,GLBDateInterval::Day);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE DemandDateFilterDay@10();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Purchase,1,TRUE,'<-7D>',1,1,0.4,GLBDateInterval::Day);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE UnbalancedTreeTotalAvailFalseMonth@13();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Purchase,0.8,FALSE,'<0D>',1,1,0.8,GLBDateInterval::Month);
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE UnbalancedTreeTotalAvailTrueQuarter@65();
    VAR
      BOMBuffer@1000 : Record 5870;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Purchase,0.8,TRUE,'<0D>',1,1,0.3,GLBDateInterval::Quarter);
    END;

    [Normal]
    LOCAL PROCEDURE SetupAbleToMakePage@131(SourceType@1006 : Option;BottleneckFactor@1008 : Decimal;DueDateDelay@1012 : Text;ChildLeaves@1013 : Integer;Depth@1017 : Integer;DirectAvailFactor@1016 : Decimal);
    VAR
      Location@1004 : Record 14;
      Item@1015 : Record 27;
      GenProdPostingGroup@1002 : Code[10];
      InventoryPostingGroup@1003 : Code[10];
      AbleToMake@1000 : Decimal;
      DueDateDelayDateFormula@1007 : DateFormula;
    BEGIN
      // Setup.
      Initialize;
      AbleToMake := LibraryRandom.RandIntInRange(10,25);

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryAssembly.SetupPostingToGL(GenProdPostingGroup,InventoryPostingGroup,InventoryPostingGroup,'');
      LibraryAssembly.CreateItem(
        Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,GenProdPostingGroup,InventoryPostingGroup);
      LibraryTrees.CreateMixedTree(Item,Item."Replenishment System"::Assembly,Item."Costing Method"::Standard,Depth,ChildLeaves,2);
      LibraryTrees.AddTreeVariants(Item."No.");
      LibraryTrees.CreateNodeSupply(Item."No.",Location.Code,WORKDATE,SourceType,AbleToMake,BottleneckFactor,DirectAvailFactor);

      Item.SETRANGE("No.",Item."No.");
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);
      Item.SETRANGE("Date Filter",0D,CALCDATE(DueDateDelayDateFormula,WORKDATE));
      Item.SETRANGE("Location Filter",Location.Code);

      // Exercise / Verify: Run Able To Make - Page.
      VerifyAbleToMakePage(Item,'','',AbleToMake);
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByBOMPageHandler,ItemAbleToMakeReportHandler,MessageHandler)]
    PROCEDURE SunshineItemJnlPage@134();
    BEGIN
      SetupAbleToMakePage(SupplyType::Inventory,1,'<0D>',1,1,0.3);
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByBOMPageHandler,ItemAbleToMakeReportHandler,MessageHandler)]
    PROCEDURE LocationFilterPage@30();
    BEGIN
      SetupAbleToMakePage(SupplyType::Purchase,1,'<0D>',1,1,0.8);
    END;

    [Test]
    [HandlerFunctions(ItemAvailabilityByBOMPageHandler,ItemAbleToMakeReportHandler,MessageHandler)]
    PROCEDURE DemandDateFilterPage@27();
    BEGIN
      SetupAbleToMakePage(SupplyType::Purchase,1,'<-7D>',1,1,0.4);
    END;

    [Normal]
    LOCAL PROCEDURE GenerateTreeForAsm@12(AsmOrderFilterType@1000 : Option;DueDateDelay@1005 : Text;BottleneckFactor@1010 : Decimal;ShowTotalAvailability@1011 : Boolean;DirectAvailFactor@1007 : Decimal;AvailabilityCorrection@1013 : Decimal);
    VAR
      Location@1009 : Record 14;
      BOMBuffer@1006 : Record 5870;
      AssemblyHeader@1008 : Record 900;
      AssemblyLine@1004 : Record 901;
      CalculateBOMTree@1002 : Codeunit 5870;
      TreeType@1015 : ' ,Availability,Cost';
      AbleToMake@1001 : Decimal;
      AssemblyQty@1012 : Decimal;
      DueDateDelayDateFormula@1003 : DateFormula;
    BEGIN
      SetupAbleToMake(
        BOMBuffer,FALSE,SupplyType::Inventory,BottleneckFactor,ShowTotalAvailability,'<0D>',1,1,DirectAvailFactor,
        GLBDateInterval::Day);
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);

      AbleToMake := BOMBuffer."Able to Make Top Item";
      IF DirectAvailFactor <> 0 THEN
        AssemblyQty := RANDOM(ROUND(AbleToMake * DirectAvailFactor,1,'<'))
      ELSE
        AssemblyQty := ROUND(AbleToMake,1,'<') + AvailabilityCorrection;

      LibraryAssembly.CreateAssemblyHeader(
        AssemblyHeader,CALCDATE(DueDateDelayDateFormula,WORKDATE),BOMBuffer."No.",BOMBuffer."Location Code",AssemblyQty,'');
      FindAssemblyLine(AssemblyLine,AssemblyHeader);
      LibraryWarehouse.CreateLocation(Location);

      CASE AsmOrderFilterType OF
        FilterType::"Header Location":
          LibraryAssembly.UpdateAssemblyHeader(AssemblyHeader,AssemblyHeader.FIELDNO("Location Code"),Location.Code);
        FilterType::"Header Variant":
          LibraryAssembly.UpdateAssemblyHeader(AssemblyHeader,AssemblyHeader.FIELDNO("Variant Code"),'');
        FilterType::"Component Location":
          LibraryAssembly.UpdateAssemblyLine(AssemblyLine,AssemblyLine.FIELDNO("Location Code"),Location.Code);
        FilterType::"Component Variant":
          LibraryAssembly.UpdateAssemblyLine(AssemblyLine,AssemblyLine.FIELDNO("Variant Code"),'');
      END;

      // Exercise: Run Able To Make codeunit.
      CalculateBOMTree.SetShowTotalAvailability(ShowTotalAvailability);
      CalculateBOMTree.GenerateTreeForAsm(AssemblyHeader,BOMBuffer,TreeType::Availability);

      // Verify: Able to make report.
      VerifyAbleToMakeReport(
        BOMBuffer,CALCDATE(DueDateDelayDateFormula,WORKDATE),GLBDateInterval::Day,AssemblyHeader."Location Code",
        AssemblyHeader."No.",'');
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE SunshineAsmOrder@39();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',1,TRUE,0.4,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE LocationFilterAsmOrder@60();
    BEGIN
      GenerateTreeForAsm(FilterType::"Header Location",'<0D>',1,TRUE,0.4,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE LocationCompAsmOrder@61();
    BEGIN
      GenerateTreeForAsm(FilterType::"Component Location",'<0D>',1,TRUE,0.4,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler,ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE NegAvailForLeafAsmOrder@102();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',1,TRUE,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler,ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE NegAvailForLeafAsmOrderUnbalancedTree@101();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',0.7,TRUE,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE DateFilterAsmOrder@52();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<-7D>',1,TRUE,0.4,0);
    END;

    LOCAL PROCEDURE GenerateTreeForProdOrder@28(ProdOrderFilterType@1006 : Option;DueDateDelay@1000 : Text);
    VAR
      Location@1009 : Record 14;
      Item@1010 : Record 27;
      BOMBuffer@1003 : Record 5870;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComponent@1005 : Record 5407;
      CalculateBOMTree@1002 : Codeunit 5870;
      TreeType@1012 : ' ,Availability,Cost';
      AbleToMake@1007 : Decimal;
      DueDateDelayDateFormula@1008 : DateFormula;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,2,0.4,GLBDateInterval::Day);
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);
      AbleToMake := BOMBuffer."Able to Make Top Item";
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,BOMBuffer."No.",
        RANDOM(ROUND(AbleToMake * 0.4,1,'<')));
      ProductionOrder.VALIDATE("Due Date",CALCDATE(DueDateDelayDateFormula,WORKDATE));
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,FALSE,TRUE,FALSE);
      ProductionOrder.FIND;
      FindProdOrderLine(ProdOrderLine,ProductionOrder);
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);

      CASE ProdOrderFilterType OF
        FilterType::"Header Location":
          LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Location Code"),Location.Code);
        FilterType::"Header Variant":
          LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Variant Code"),'');
        FilterType::"Component Location":
          BEGIN
            ProdOrderComponent.VALIDATE("Item No.",Item."No.");
            ProdOrderComponent.VALIDATE("Quantity per",RANDOM(5));
            ProdOrderComponent.MODIFY(TRUE);
            LibraryTrees.CreateSupply(
              Item."No.",'',BOMBuffer."Location Code",WORKDATE,SupplyType::Inventory,
              ProductionOrder.Quantity * ProdOrderComponent."Quantity per");
            LibraryManufacturing.UpdateProdOrderComp(ProdOrderComponent,ProdOrderComponent.FIELDNO("Location Code"),Location.Code);
            LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Location Code"),BOMBuffer."Location Code");
          END;
        ELSE
          LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Location Code"),BOMBuffer."Location Code");
      END;

      // Exercise: Run Able To Make codeunit.
      CalculateBOMTree.SetShowTotalAvailability(TRUE);
      CalculateBOMTree.GenerateTreeForProdLine(ProdOrderLine,BOMBuffer,TreeType::Availability);

      // Verify: Able to make report.
      VerifyAbleToMakeReport(BOMBuffer,WORKDATE,GLBDateInterval::Day,ProdOrderLine."Location Code",'',ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE SunshineProdOrder@44();
    BEGIN
      GenerateTreeForProdOrder(FilterType::None,'<0D>');
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE LocationFilterProdOrder@72();
    BEGIN
      GenerateTreeForProdOrder(FilterType::"Header Location",'<0D>');
    END;

    [Test]
    [HandlerFunctions(ItemAbleToMakeTimelineRequestPageHandler)]
    PROCEDURE DateFilterProdOrder@56();
    BEGIN
      GenerateTreeForProdOrder(FilterType::None,'<-7D>');
    END;

    [Normal]
    LOCAL PROCEDURE FindAssemblyLine@51(VAR AssemblyLine@1000 : Record 901;AssemblyHeader@1001 : Record 900);
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
      AssemblyLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE FindProdOrderLine@59(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1002 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateMfgSetup@3(MfgLeadTime@1001 : Text);
    VAR
      LeadTimeFormula@1000 : DateFormula;
    BEGIN
      IF FORMAT(MfgSetup."Default Safety Lead Time") <> MfgLeadTime THEN BEGIN
        EVALUATE(LeadTimeFormula,MfgLeadTime);
        MfgSetup.VALIDATE("Default Safety Lead Time",LeadTimeFormula);
        MfgSetup.MODIFY(TRUE);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE RunAbleToMakeReport@19(ItemNo@1000 : Code[20];LocationCode@1005 : Code[10];StartingDate@1002 : Date;DateInterval@1003 : Option;AssemblyHeaderNo@1006 : Code[20];ProdOrderNo@1007 : Code[20]);
    VAR
      ProdOrderLine@1009 : Record 5406;
      AsmHeader@1008 : Record 900;
      Item1@1004 : Record 27;
      ItemAbleToMakeTimeline@1001 : Report 5871;
    BEGIN
      CLEAR(ItemAbleToMakeTimeline);
      IF (AssemblyHeaderNo <> '') AND AsmHeader.GET(AsmHeader."Document Type"::Order,AssemblyHeaderNo) THEN
        ItemAbleToMakeTimeline.InitAsmOrder(AsmHeader);

      IF ProdOrderNo <> '' THEN BEGIN
        ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
        IF ProdOrderLine.FINDFIRST THEN
          ItemAbleToMakeTimeline.InitProdOrder(ProdOrderLine);
      END;

      COMMIT;
      LibraryVariableStorage.Enqueue(StartingDate);
      LibraryVariableStorage.Enqueue(DateInterval);
      LibraryVariableStorage.Enqueue(7);
      LibraryVariableStorage.Enqueue(TRUE);

      Item1.SETRANGE("No.",ItemNo);
      Item1.SETRANGE("Location Filter",LocationCode);
      ItemAbleToMakeTimeline.SETTABLEVIEW(Item1);
      ItemAbleToMakeTimeline.RUN;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyAbleToMakeReport@29(BOMBuffer@1000 : Record 5870;StartDate@1001 : Date;DateInterval@1002 : Option;LocationCode@1004 : Code[10];AsmHeaderNo@1005 : Code[20];ProdOrderNo@1006 : Code[20]);
    BEGIN
      BOMBuffer.SETRANGE(Type,BOMBuffer.Type::Item);
      BOMBuffer.SETFILTER(Indentation,'<%1',1);
      BOMBuffer.SETRANGE("Is Leaf",FALSE);
      IF BOMBuffer.FINDSET THEN
        REPEAT
          RunAbleToMakeReport(BOMBuffer."No.",LocationCode,StartDate,DateInterval,AsmHeaderNo,ProdOrderNo);
          VerifyValuesForDate(StartDate,BOMBuffer);
        UNTIL BOMBuffer.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyValuesForDate@55(RowDate@1001 : Date;BOMBuffer@1002 : Record 5870);
    VAR
      Qty@1000 : Decimal;
      InvtQty@1003 : Decimal;
      GrossReq@1004 : Decimal;
      SchedReceipts@1005 : Decimal;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('AsOfPeriod',FORMAT(RowDate));

      Qty := LibraryReportDataset.Sum('AbleToMakeQty');
      Assert.AreNearlyEqual(BOMBuffer."Able to Make Top Item",Qty,0.00001,'Wrong Able to make qty for item ' + BOMBuffer."No.");

      InvtQty := LibraryReportDataset.Sum('InvtQty');
      GrossReq := LibraryReportDataset.Sum('GrossReqQty');
      SchedReceipts := LibraryReportDataset.Sum('SchRcptQty');
      Assert.AreNearlyEqual(
        BOMBuffer."Available Quantity",
        InvtQty - GrossReq + SchedReceipts,0.00001,
        'Wrong Avail. Qty for item ' + BOMBuffer."No.");

      Qty := LibraryReportDataset.Sum('TotalQty');
      Assert.AreNearlyEqual(
        BOMBuffer."Able to Make Parent" +
        BOMBuffer."Available Quantity",
        Qty,0.00001,'Wrong total qty for item ' + BOMBuffer."No.");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyAbleToMakePage@96(VAR Item@1001 : Record 27;AsmHeaderNo@1005 : Code[20];ProdOrderNo@1006 : Code[20];AbleToMake@1002 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(Item."No.");
      LibraryVariableStorage.Enqueue(AbleToMake);

      RunItemAvailByBOMLevelPage(Item,AsmHeaderNo,ProdOrderNo);
    END;

    [Normal]
    LOCAL PROCEDURE RunItemAvailByBOMLevelPage@98(VAR Item@1001 : Record 27;AsmHeaderNo@1002 : Code[20];ProdOrderNo@1003 : Code[20]);
    VAR
      AsmHeader@1004 : Record 900;
      ProdOrderLine@1005 : Record 5406;
      ItemAvailabilityByBOMLevel@1000 : Page 5871;
    BEGIN
      ItemAvailabilityByBOMLevel.InitItem(Item);

      IF (AsmHeaderNo <> '') AND AsmHeader.GET(AsmHeader."Document Type"::Order,AsmHeaderNo) THEN
        ItemAvailabilityByBOMLevel.InitAsmOrder(AsmHeader);

      IF ProdOrderNo <> '' THEN BEGIN
        ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
        IF ProdOrderLine.FINDFIRST THEN
          ItemAvailabilityByBOMLevel.InitProdOrder(ProdOrderLine);
      END;

      ItemAvailabilityByBOMLevel.RUN;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@48(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@23(Message@1000 : Text);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@63(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [PageHandler]
    PROCEDURE ItemAvailabilityByBOMPageHandler@31(VAR ItemAvailByBOMLevel@1000 : TestPage 5871);
    VAR
      DequeueVar@1001 : Variant;
      ItemNo@1003 : Code[20];
      Qty@1002 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVar);
      ItemNo := DequeueVar;
      ItemAvailByBOMLevel.FILTER.SETFILTER("No.",ItemNo);
      ItemAvailByBOMLevel.FIRST;

      LibraryVariableStorage.Dequeue(DequeueVar);
      Qty := DequeueVar;
      Assert.AreEqual(
        Qty,ItemAvailByBOMLevel."Able to Make Top Item".ASDECIMAL,
        'Wrong able to make top item on page for item ' + FORMAT(ItemAvailByBOMLevel."No."));
      Assert.AreEqual(
        Qty,ItemAvailByBOMLevel."Able to Make Parent".ASDECIMAL,
        'Wrong able to make parent on page for item ' + FORMAT(ItemAvailByBOMLevel."No."));

      COMMIT; // To allow running the action from the page.
      ItemAvailByBOMLevel.Action39.INVOKE; // Run Show Warnings for code coverage purposes.
      ItemAvailByBOMLevel.Action40.INVOKE; // Run Item Avail by BOM Level report for code coverage purposes.
    END;

    [ReportHandler]
    PROCEDURE ItemAbleToMakeReportHandler@9(VAR ItemAbleToMakeTimeline@1000 : Report 5871);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ItemAbleToMakeTimelineRequestPageHandler@15(VAR ItemAbleToMakeTimeline@1000 : TestRequestPage 5871);
    VAR
      StartingDate@1001 : Variant;
      DateInterval@1002 : Variant;
      NoOfIntervals@1003 : Variant;
      ShowDetails@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(DateInterval);
      LibraryVariableStorage.Dequeue(NoOfIntervals);
      LibraryVariableStorage.Dequeue(ShowDetails);

      ItemAbleToMakeTimeline.Control3.SETVALUE(StartingDate);
      ItemAbleToMakeTimeline.Control4.SETVALUE(DateInterval);
      ItemAbleToMakeTimeline.Control5.SETVALUE(NoOfIntervals);
      ItemAbleToMakeTimeline.Control6.SETVALUE(ShowDetails);
      ItemAbleToMakeTimeline.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Able to Make] [SCM]
      This CU contains scenarios for the Able to Make visualisation.
    }
    END.
  }
}

