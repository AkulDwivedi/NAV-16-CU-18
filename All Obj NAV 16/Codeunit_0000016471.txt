OBJECT Codeunit 16471 Service Tax Management
{
  OBJECT-PROPERTIES
  {
    Date=03-08-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.46621;
  }
  PROPERTIES
  {
    Permissions=TableData 16575=ri;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      STaxPostingBuffer@1280009 : ARRAY [2] OF TEMPORARY Record 16478;
      ServiceTaxSetup@1003 : Record 16472;
      LocationECC@1500054 : Record 14;
      ECCNos@1500045 : Record 13708;
      DimMgt@1280003 : Codeunit 408;
      GenJnlPostLine@1280004 : Codeunit 12;
      Text000@1500012 : TextConst 'ENU=Credit Availed & Payments do not match the total Service Tax Amount.;ENN=Credit Availed & Payments do not match the total Service Tax Amount.';
      Text001@1500008 : TextConst 'ENU=Payment Liability  is not fully applied for Service Tax Groups.;ENN=Payment Liability  is not fully applied for Service Tax Groups.';
      Text002@1500007 : TextConst 'ENU=Interest & Other Payments cannot be paid from Service Tax Input Credit for Service Tax Group.;ENN=Interest & Other Payments cannot be paid from Service Tax Input Credit for Service Tax Group.';
      Text003@1500006 : TextConst 'ENU=Interest & Other Payments cannot be paid from Service Tax Input Credit.;ENN=Interest & Other Payments cannot be paid from Service Tax Input Credit.';
      Text004@1500005 : TextConst 'ENU=Payment Liability (eCess) is not fully applied for Service Tax Group %1.;ENN=Payment Liability (eCess) is not fully applied for Service Tax Group %1.';
      Text006@1500421 : TextConst 'ENU=Payment Liability (SBC) is not fully applied for Service Tax Group %1.;ENN=Payment Liability (SBC) is not fully applied for Service Tax Group %1.';
      Text16548@1500079 : TextConst 'ENU=Payment Liability (KKC) is not fully applied for Service Tax Group %1.;ENN=Payment Liability (KKC) is not fully applied for Service Tax Group %1.';
      Text005@1500041 : TextConst 'ENU=Payment Liability (SHE Cess) is not fully applied for Service Tax Group %1.;ENN=Payment Liability (SHE Cess) is not fully applied for Service Tax Group %1.';
      Text010@1500000 : TextConst 'ENU=Excise as Service Tax Credit;ENN=Excise as Service Tax Credit';
      Text011@1500009 : TextConst 'ENU=Service Tax Payment;ENN=Service Tax Payment';
      Text029@1500011 : TextConst 'ENU=The combination of dimensions used for Service Tax Group %1 is blocked. %2.;ENN=The combination of dimensions used for Service Tax Group %1 is blocked. %2.';
      Text031@1500010 : TextConst 'ENU=The dimensions used are invalid. %2.;ENN=The dimensions used are invalid. %2.';
      Text032@1500013 : TextConst 'ENU=Liability Amount is Negative so you cannot post this transaction.;ENN=Liability Amount is Negative so you cannot post this transaction.';
      NextTransactionNo@1500063 : Integer;
      ECCNo@1500003 : Code[20];
      SalesDocumentNo@1500055 : Code[20];
      DocumentNo@1500046 : Code[20];
      SerTaxasExciseCredit@1500001 : Boolean;
      Text033@1500064 : TextConst 'ENU=You cannot create a document with reverse charge service tax that has lines with different %1.;ENN=You cannot create a document with reverse charge service tax that has lines with different %1.';
      Text034@1500065 : TextConst 'ENU=The document has no lines.;ENN=The document has no lines.';
      Text035@1500066 : TextConst 'ENU=You cannot create a document with service tax that has lines of different service tax types.;ENN=You cannot create a document with service tax that has lines of different service tax types.';
      Text16500@1500014 : TextConst 'ENU=The Sum of Credit availed for all the Service tax group is not equal to the sum of the claim made under service tax.;ENN=The Sum of Credit availed for all the Service tax group is not equal to the sum of the claim made under service tax.';
      Text16501@1500017 : TextConst 'ENU=Credit Availed cannot be greater than the Credit available for service tax group %1.;ENN=Credit Availed cannot be greater than the Credit available for service tax group %1.';
      Text16502@1500004 : TextConst 'ENU=Credit Availed (eCess) cannot be greater than the Credit Available (eCess) for service tax group %1.;ENN=Credit Availed (eCess) cannot be greater than the Credit Available (eCess) for service tax group %1.';
      Text16503@1500015 : TextConst 'ENU=Credit claimed is greater than the credit available in %1 for E.C.C. No. %2. Please restart the process.;ENN=Credit claimed is greater than the credit available in %1 for E.C.C. No. %2. Please restart the process.';
      Text16504@1500016 : TextConst 'ENU=Credit claimed is greater than the credit available in Service tax for Service Tax Registration No. %1. Please restart the process.;ENN=Credit claimed is greater than the credit available in Service tax for Service Tax Registration No. %1. Please restart the process.';
      Text16505@1500023 : TextConst 'ENU="For Line No=%1, Service Tax On Advance Payment can be used with Document Type Payment & Refund.";ENN="For Line No=%1, Service Tax On Advance Payment can be used with Document Type Payment & Refund."';
      Text16506@1500019 : TextConst 'ENU=Party Code is missing for some entries, do you want to continue?;ENN=Party Code is missing for some entries, do you want to continue?';
      Text16509@1500034 : TextConst 'ENU=Service Tax Opening;ENN=Service Tax Opening';
      Text16510@1500040 : TextConst 'ENU=Checking lines        #1######\;ENN=Checking lines        #1######\';
      Text16511@1500039 : TextConst 'ENU=Posting lines         #2###### @3@@@@@@@@@@@@@\;ENN=Posting lines         #2###### @3@@@@@@@@@@@@@\';
      Text16512@1500018 : TextConst 'ENU=Service Tax Lines posted successfully.;ENN=Service Tax Lines posted successfully.';
      Text16513@1500020 : TextConst 'ENU=Type: Charges cannot be used.;ENN=Type: Charges cannot be used.';
      Text16514@1500022 : TextConst 'ENU=Document Type: Invoice, Credit Memo,Payment & Refund can only be used.;ENN=Document Type: Invoice, Credit Memo,Payment & Refund can only be used.';
      Text16515@1500026 : TextConst 'ENU="For Type=%1, Transaction No. = %2, Payable/receivable Amount should be equal to %3.";ENN="For Type=%1, Transaction No. = %2, Payable/receivable Amount should be equal to %3."';
      Text16516@1500027 : TextConst 'ENU="For Type=%1, Transaction No. = %2, Document No. should be equal to %3.";ENN="For Type=%1, Transaction No. = %2, Document No. should be equal to %3."';
      Text16517@1500028 : TextConst 'ENU="For Type=%1, Transaction No. = %2, Posting Date should be equal to %3.";ENN="For Type=%1, Transaction No. = %2, Posting Date should be equal to %3."';
      Text16518@1500029 : TextConst 'ENU="For Type=%1, Transaction No. = %2, Document Type should be equal to %3.";ENN="For Type=%1, Transaction No. = %2, Document Type should be equal to %3."';
      Text16519@1500030 : TextConst 'ENU="For Type=%1, Transaction No. = %2, Party Code should be equal to %3.";ENN="For Type=%1, Transaction No. = %2, Party Code should be equal to %3."';
      Text16520@1500031 : TextConst 'ENU="For Line No.=%1, %2 should not be %3.";ENN="For Line No.=%1, %2 should not be %3."';
      Text16521@1500032 : TextConst 'ENU="For Line No.=%1, %2 should be equal to %3.";ENN="For Line No.=%1, %2 should be equal to %3."';
      Text16522@1500024 : TextConst 'ENU="For Line No.=%1, entry for Transaction No.= %2 already exists.";ENN="For Line No.=%1, entry for Transaction No.= %2 already exists."';
      Text16523@1500021 : TextConst 'ENU="For Line No.=%1, Service Tax Amount + Ecess Amount + SHE Cess Amount is equal to zero.";ENN="For Line No.=%1, Service Tax Amount + Ecess Amount + SHE Cess Amount is equal to zero."';
      Text16524@1500035 : TextConst 'ENU=Service Tax Adjustment;ENN=Service Tax Adjustment';
      Window@1500038 : Dialog;
      Text16525@1500037 : TextConst 'ENU=Credit Availed (SHECess) cannot be greater than the Credit Available (SHECess) for service tax group %1.;ENN=Credit Availed (SHECess) cannot be greater than the Credit Available (SHECess) for service tax group %1.';
      Text16526@1500042 : TextConst 'ENU=positive;ENN=positive';
      Text16527@1500043 : TextConst 'ENU=negative;ENN=negative';
      Text16528@1500044 : TextConst 'ENU=zero;ENN=zero';
      Text16529@1500050 : TextConst 'ENU="Please uncheck the Input Service Distributor field in the %1 Location. ";ENN="Please uncheck the Input Service Distributor field in the %1 Location. "';
      Text16530@1500049 : TextConst 'ENU=Please uncheck the Input Service Distributor field in the Company Information.;ENN=Please uncheck the Input Service Distributor field in the Company Information.';
      Text16531@1500048 : TextConst 'ENU=Total Credit available does not match with that of the total credit utilised.;ENN=Total Credit available does not match with that of the total credit utilised.';
      Text16532@1500036 : TextConst 'ENU=Credit Availed cannot be greater than Credit available.;ENN=Credit Availed cannot be greater than Credit available.';
      Text16533@1500053 : TextConst 'ENU="%1 = % 2 does not match with Monthly/Quarterly %1 = %3 for Service Tax Group %4.";ENN="%1 = % 2 does not match with Monthly/Quarterly %1 = %3 for Service Tax Group %4."';
      RGSetOffDate@1500094 : Date;
      PostingDate@1500052 : Date;
      AppliedServiceTaxAmt@1500060 : Decimal;
      TotalAppliedAmount@1500059 : Decimal;
      Text16534@1500062 : TextConst 'ENU=%1 should not be more than %2 for Service Tax Group %3.;ENN=%1 should not be more than %2 for Service Tax Group %3.';
      Text16535@1500061 : TextConst 'ENU=You cannot unapply the document %1 because the Service Tax credit has already been utilized against the tax payment.;ENN=You cannot unapply the document %1 because the Service Tax credit has already been utilized against the tax payment.';
      TempServTaxEntry@1500664 : TEMPORARY Record 16473;
      ExecuteDiffAdjustment@1500152 : Boolean;
      PostedFromOrder@1500665 : Boolean;
      CreditComponent@1500202 : 'ServiceTax,eCess,SHECess,SBC,KKCess';
      Text16536@1500068 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Group Codes.;ENN=You cannot apply the documents, because they have different Service Tax Group Codes.';
      Text16537@1500067 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Registration Nos.;ENN=You cannot apply the documents, because they have different Service Tax Registration Nos.';
      Text16538@1500069 : TextConst 'ENU=You cannot apply a document with service tax to a document without service tax.;ENN=You cannot apply a document with service tax to a document without service tax.';
      Text16539@1500070 : TextConst 'ENU=You cannot apply entries if both the advance payment and the invoice have TDS or Work Tax specified.;ENN=You cannot apply entries if both the advance payment and the invoice have TDS or Work Tax specified.';
      Text16540@1500071 : TextConst 'ENU=You cannot apply a document with PoT to a document without PoT.;ENN=You cannot apply a document with PoT to a document without PoT.';
      Text16541@1500555 : TextConst 'ENU=You cannot apply the documents, because they have different settings in the Include Service Tax in TDS Base field.;ENN=You cannot apply the documents, because they have different settings in the Include Service Tax in TDS Base field.';
      Text16542@1500333 : TextConst 'ENU=You cannot unapply documents that have TDS or Work Tax specified.;ENN=You cannot unapply documents that have TDS or Work Tax specified.';
      Text16543@1500147 : TextConst 'ENU=You cannot apply multiple documents with service tax in one transaction.;ENN=You cannot apply multiple documents with service tax in one transaction.';
      Text16545@1500151 : TextConst 'ENU=You cannot apply a document that has service tax with the amount in foreign currency to a document that has the amount in local currency.;ENN=You cannot apply a document that has service tax with the amount in foreign currency to a document that has the amount in local currency.';
      Text16546@1500994 : TextConst 'ENU=You cannot use an advance payment as the applying document when the applied document is an invoice that includes payment discount and service tax. Use an invoice as the applying document instead.;ENN=You cannot use an advance payment as the applying document when the applied document is an invoice that includes payment discount and service tax. Use an invoice as the applying document instead.';
      Text16549@1500002 : TextConst 'ENU=Credit Availed  (KKC) cannot be greater than Credit available (KKC).;ENN=Credit Availed  (KKC) cannot be greater than Credit available (KKC).';
      Text16555@1500033 : TextConst 'ENU=Credit Availed (KKC) cannot be greater that the Credit available (KKC) for service tax group %1.;ENN=Credit Availed (KKC) cannot be greater that the Credit available (KKC) for service tax group %1.';
      ApplyDocWithTDSWorkTaxErr@1500025 : TextConst 'ENU=You cannot apply documents that have TDS or Work Tax specified.;ENN=You cannot apply documents that have TDS or Work Tax specified.';

    PROCEDURE InsertSalesEntry@1280000(GenJnlLine@1280000 : Record 81;NextTransactionNo@1280001 : Integer;AccountNo@1280002 : Code[20];GLAccountNoSBC@1500423 : Code[20];GLAccountNoKKCess@1500002 : Code[20]);
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
      ServiceTaxSetup@1500001 : Record 16472;
    BEGIN
      ServiceTaxEntry.Initialize(GenJnlLine);
      ServiceTaxEntry."Transaction No." := NextTransactionNo;
      ServiceTaxEntry."G/L Account No." := AccountNo;

      ServiceTaxSetup.FindOnDate(GenJnlLine."Service Tax Group Code",GenJnlLine."Posting Date");
      IF ServiceTaxEntry.PoT THEN
        ServiceTaxEntry."PoT G/L Account" := ServiceTaxSetup."Service Tax Payable Account";
      ServiceTaxEntry."Service Tax Abatement" := ServiceTaxSetup."Abatement %";
      ServiceTaxEntry."SBC G/L Account" := GLAccountNoSBC;
      ServiceTaxEntry."KK Cess G/L Account" := GLAccountNoKKCess;
      ServiceTaxEntry.INSERT(TRUE);

      IF GenJnlLine.PoT AND NOT GenJnlLine."Serv. Tax on Advance Payment" THEN
        InsertServiceTaxEntryDetail(
          ServiceTaxEntry,ServiceTaxEntry."Entry No.",ServiceTaxEntry."Transaction No.",
          ServiceTaxEntry."Service Tax Base Amount",ServiceTaxEntry."Service Tax Amount",
          ServiceTaxEntry."eCess Amount",ServiceTaxEntry."SHE Cess Amount",
          ServiceTaxEntry."Service Tax SBC Amount",ServiceTaxEntry."KK Cess Amount",FALSE);
    END;

    PROCEDURE InsertPurchaseEntry@1280001(GenJnlLine@1280000 : Record 81;NextTransactionNo@1280003 : Integer;AccountNo@1280001 : Code[20];GLAccountNoSBC@1500425 : Code[20];GLAccountNoKKCess@1500003 : Code[20]);
    VAR
      STReverseChargeSetup@1500000 : Record 16461;
      ServiceTaxEntry@1500001 : Record 16473;
      ServiceTaxSetup@1500002 : Record 16472;
    BEGIN
      ServiceTaxEntry.Initialize(GenJnlLine);
      ServiceTaxEntry."Transaction No." := NextTransactionNo;
      ServiceTaxEntry."G/L Account No." := AccountNo;
      ServiceTaxEntry."Input Service Distribution" := GenJnlLine."Input Service Distribution";
      ServiceTaxEntry."Service Type (Rev. Chrg.)" := GenJnlLine."Service Type (Rev. Chrg.)";
      ServiceTaxEntry."Reverse Charge" :=
        GenJnlLine.TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) AND NOT GenJnlLine.PoT;
      IF (STReverseChargeSetup."Reverse Charge Tax Type" <> STReverseChargeSetup."Reverse Charge Tax Type"::GTA) OR
        GenJnlLine."Declaration Form (GTA)"
      THEN BEGIN
        ServiceTaxSetup.FindOnDate(GenJnlLine."Service Tax Group Code",GenJnlLine."Posting Date");
        ServiceTaxEntry."Service Tax Abatement" := ServiceTaxSetup."Abatement %";
      END;
      ServiceTaxEntry."SBC G/L Account" := GLAccountNoSBC;
      ServiceTaxEntry."KK Cess G/L Account" := GLAccountNoKKCess;
      ServiceTaxEntry.INSERT(TRUE);

      IF ServiceTaxEntry.PoT OR (ServiceTaxEntry."Serv. Tax on Advance Payment" AND ServiceTaxEntry."Reverse Charge") THEN
        InsertServiceTaxEntryDetail(
          ServiceTaxEntry,ServiceTaxEntry."Entry No.",ServiceTaxEntry."Transaction No.",
          ServiceTaxEntry."Service Tax Base Amount",ServiceTaxEntry."Service Tax Amount",
          ServiceTaxEntry."eCess Amount",ServiceTaxEntry."SHE Cess Amount",
          ServiceTaxEntry."Service Tax SBC Amount",ServiceTaxEntry."KK Cess Amount",FALSE);
    END;

    PROCEDURE ApplyCustPayment@1280003(NewCVLedgEntryBuf@1280002 : Record 382;OldCVLedgEntryBuf@1280001 : Record 382;AppliedAmountLCY@1280000 : Decimal);
    VAR
      AppliedServiceTaxEntry@1500002 : Record 16473;
      ServiceTaxEntry@1280007 : Record 16473;
      ServiceTaxEntryDtls@1280006 : Record 16474;
      ServiceTaxSetup@1500001 : Record 16472;
      AmountToBeApplied@1280005 : Decimal;
      RemainingAmount@1280004 : Decimal;
    BEGIN
      ServiceTaxEntry.RESET;
      ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
      ServiceTaxEntry.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
      ServiceTaxEntry.SETRANGE("Posting Date",OldCVLedgEntryBuf."Posting Date");
      ServiceTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
      IF ServiceTaxEntry.FIND('-') THEN
        REPEAT
          ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
          RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid");
          IF RemainingAmount <> 0 THEN BEGIN
            IF ABS(RemainingAmount) >= ABS(AppliedAmountLCY) THEN
              AmountToBeApplied := AppliedAmountLCY
            ELSE
              AmountToBeApplied := RemainingAmount;
            AppliedAmountLCY := AppliedAmountLCY - AmountToBeApplied;

            CalcServiceTaxAmtsToBeApplied(ServiceTaxEntry,AmountToBeApplied,AppliedServiceTaxEntry);

            CheckCustInvoiceSTAmt(
              NewCVLedgEntryBuf,OldCVLedgEntryBuf, AppliedServiceTaxEntry."Service Tax Amount",AppliedServiceTaxEntry."eCess Amount",
              AppliedServiceTaxEntry."SHE Cess Amount",AppliedServiceTaxEntry."Service Tax SBC Amount",
              AppliedServiceTaxEntry."KK Cess Amount",
              AmountToBeApplied,ServiceTaxEntry."Service Tax Group Code",
              ServiceTaxEntry."Service Tax Registration No.",ServiceTaxEntry."Entry No.");
            ServiceTaxEntryDtls.INIT;
            ServiceTaxEntryDtls."Entry No." := 0;
            ServiceTaxEntryDtls."Service Tax Entry No." := ServiceTaxEntry."Entry No.";
            ServiceTaxEntryDtls.Type := ServiceTaxEntry.Type;
            IF DocumentNo = '' THEN
              ServiceTaxEntryDtls."Document No." := NewCVLedgEntryBuf."Document No."
            ELSE
              ServiceTaxEntryDtls."Document No." := DocumentNo;
            IF PostingDate = 0D THEN
              ServiceTaxEntryDtls."Posting Date" := NewCVLedgEntryBuf."Posting Date"
            ELSE
              ServiceTaxEntryDtls."Posting Date" := PostingDate;
            ServiceTaxEntryDtls."Document Type" := NewCVLedgEntryBuf."Document Type";
            IF (ServiceTaxEntryDtls."Document Type" = ServiceTaxEntryDtls."Document Type"::Refund) OR
               ((ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::"Credit Memo") AND
                (ServiceTaxEntry."Adjusted Agst Entry No." <> 0))
            THEN BEGIN
              ServiceTaxEntryDtls."Base Amount" :=
                AmountToBeApplied - (AppliedServiceTaxEntry.FullTaxAmount +
                                      AppliedServiceTaxEntry.FullTaxSBCAmount +
                                      AppliedServiceTaxEntry.KKCessAmount);
              ServiceTaxEntryDtls."Service Tax Amount" := AppliedServiceTaxEntry."Service Tax Amount";
              ServiceTaxEntryDtls."Service Tax eCess Amount" := AppliedServiceTaxEntry."eCess Amount";
              ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := AppliedServiceTaxEntry."SHE Cess Amount";
              ServiceTaxEntryDtls."Service Tax SBC Amount" := AppliedServiceTaxEntry."Service Tax SBC Amount";
              ServiceTaxEntryDtls."KK Cess Amount" := AppliedServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntryDtls.Amount := AmountToBeApplied;
            END ELSE BEGIN
              ServiceTaxEntryDtls."Base Amount" := -
                (AmountToBeApplied - (AppliedServiceTaxEntry.FullTaxAmount +
                                       AppliedServiceTaxEntry.FullTaxSBCAmount +
                                       AppliedServiceTaxEntry.KKCessAmount));
              ServiceTaxEntryDtls."Service Tax Amount" := -AppliedServiceTaxEntry."Service Tax Amount";
              ServiceTaxEntryDtls."Service Tax eCess Amount" := -AppliedServiceTaxEntry."eCess Amount";
              ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := -AppliedServiceTaxEntry."SHE Cess Amount";
              ServiceTaxEntryDtls."Service Tax SBC Amount" := -AppliedServiceTaxEntry."Service Tax SBC Amount";
              ServiceTaxEntryDtls."KK Cess Amount" := -AppliedServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntryDtls.Amount := -AmountToBeApplied;
            END;
            IF NOT CheckCrMemoInApplnEntry(NewCVLedgEntryBuf,OldCVLedgEntryBuf,DATABASE::"Cust. Ledger Entry") AND
               ExecuteDiffAdjustment
            THEN
              GetBalanceBaseAmt(ServiceTaxEntry,ServiceTaxEntryDtls.Amount,ServiceTaxEntryDtls."Base Amount");
            ServiceTaxEntryDtls.Positive := ServiceTaxEntryDtls."Service Tax Amount" > 0;
            ServiceTaxEntryDtls."Transaction No." := NextTransactionNo;
            ServiceTaxEntryDtls."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
            ServiceTaxSetup.FindOnDate(ServiceTaxEntry."Service Tax Group Code",NewCVLedgEntryBuf."Posting Date");
            ServiceTaxSetup.TESTFIELD("Service Tax Payable Account");
            ServiceTaxEntryDtls."GL Account" := ServiceTaxSetup."Service Tax Payable Account";
            ServiceTaxEntryDtls."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
            ServiceTaxEntryDtls."Location E.C.C. No." := ServiceTaxEntry."Location E.C.C. No.";
            ServiceTaxEntryDtls."Serv. Tax on Advance Payment" := ServiceTaxEntry."Serv. Tax on Advance Payment";
            ServiceTaxEntryDtls."Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
            ServiceTaxEntryDtls."Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
            IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
              ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
            ServiceTaxEntryDtls."Location Code" := ServiceTaxEntry."Location Code";
            ServiceTaxEntryDtls."Service Tax Abatement %" := ServiceTaxEntry."Service Tax Abatement";
            ServiceTaxEntryDtls."ST Pure Agent" := ServiceTaxEntry."ST Pure Agent";
            ServiceTaxEntryDtls."Nature of Services" := ServiceTaxEntry."Nature of Services";
            ServiceTaxEntryDtls."Service Tax %" := ServiceTaxEntry."Service Tax %";
            ServiceTaxEntryDtls."Service Tax SBC %" := ServiceTaxEntry."Service Tax SBC %";
            ServiceTaxEntryDtls."KK Cess%" := ServiceTaxEntry."KK Cess%";
            IF ServiceTaxEntryDtls."Service Tax SBC %" <> 0 THEN
            ServiceTaxSetup.TESTFIELD("SB Cess Payable Account");
            ServiceTaxEntryDtls."SBC G/L Account" :=ServiceTaxSetup."SB Cess Payable Account";
            IF ServiceTaxEntryDtls."KK Cess%" <> 0 THEN
              ServiceTaxSetup.TESTFIELD("KK Cess Payable Account");
            ServiceTaxEntryDtls."KK Cess G/L Account" :=ServiceTaxSetup."KK Cess Payable Account";
            ServiceTaxEntryDtls."Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
            ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
            ServiceTaxEntryDtls.PoT := ServiceTaxEntry.PoT;
            ServiceTaxEntryDtls.INSERT(TRUE);
          END;
        UNTIL ((ServiceTaxEntry.NEXT = 0) OR (AppliedAmountLCY = 0));
    END;

    PROCEDURE OffsetRemainingCredit@1500037(ApplnServiceTaxEntry@1500000 : Record 16473;OriginalTransactionNo@1500001 : Integer);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      WITH ServiceTaxEntryDetails DO BEGIN
        SETRANGE("Service Tax Entry No.",ApplnServiceTaxEntry."Entry No.");
        SETRANGE("Transaction No.",OriginalTransactionNo);
        SETRANGE("Corrective Application Entry",FALSE);
        IF FINDLAST THEN BEGIN
          IF "Reverse Charge" THEN BEGIN
            "Rev. Chrg. Remaining Credit" -= ApplnServiceTaxEntry."Service Tax Amount";
            "Closed Reverse Charge" := "Rev. Chrg. Remaining Credit" = 0;
            Closed := TRUE;
            "Rev. Chrg. Rem. Credit (SBC)" -= ApplnServiceTaxEntry."Service Tax SBC Amount";
            "Closed Reversed (SBC)" := "Rev. Chrg. Rem. Credit (SBC)" = 0;
            "Closed (SBC)" := TRUE;
            "Rev. Chrg. Rem. Credit (eCESS)" -= ApplnServiceTaxEntry."eCess Amount";
            "Closed Reverse Charge (eCESS)" := "Rev. Chrg. Rem. Credit (eCESS)" = 0;
            "Closed (eCess)" := TRUE;
            "Rev. Chrg. Rem. Cr. (SHECess)" -= ApplnServiceTaxEntry."SHE Cess Amount";
            "Closed Rev. Charge (SHECess)" := "Rev. Chrg. Rem. Cr. (SHECess)" = 0;
            "Closed (SHECess)" := TRUE;
            "Rev. Chrg. Rem. Credit (KKC)" -= ApplnServiceTaxEntry."KK Cess Amount";
            "Closed Reversed (KK Cess)" := "Rev. Chrg. Rem. Credit (KKC)" = 0;
            "Closed (KK Cess)" := TRUE;
          END ELSE BEGIN
            "Remaining Credit" -= ApplnServiceTaxEntry."Service Tax Amount";
            Closed := "Remaining Credit" = 0;
            "Remaining Credit (SBC)" -= ApplnServiceTaxEntry."Service Tax SBC Amount";
            "Closed (SBC)" := "Remaining Credit (SBC)" = 0;
            "Remaining Credit (KK Cess)" -= ApplnServiceTaxEntry."KK Cess Amount";
            "Closed (KK Cess)" := "Remaining Credit (KK Cess)" = 0;
            CheckRemainingCreditOverflow("Remaining Credit");
            CheckRemainingCreditOverflow("Remaining Credit (SBC)");
            CheckRemainingCreditOverflow("Remaining Credit (KK Cess)");
            "Remaining Credit (eCess)" -= ApplnServiceTaxEntry."eCess Amount";
            "Closed (eCess)" := "Remaining Credit (eCess)" = 0;
            CheckRemainingCreditOverflow("Remaining Credit (eCess)");
            "Remaining Credit (SHECess)" -= ApplnServiceTaxEntry."SHE Cess Amount";
            "Closed (SHECess)" := "Remaining Credit (SHECess)" = 0;
            CheckRemainingCreditOverflow("Remaining Credit (SHECess)");
          END;
          MODIFY;
        END;
      END;
    END;

    PROCEDURE RestorePoTRemainingCredit@1500038(ApplnServiceTaxEntry@1500000 : Record 16473);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      WITH ServiceTaxEntryDetails DO BEGIN
        SETRANGE("Service Tax Entry No.",ApplnServiceTaxEntry."Corrected Appln. Entry No.");
        IF FINDFIRST THEN BEGIN
          "Remaining Credit" += ApplnServiceTaxEntry."Service Tax Amount";
          Closed := "Remaining Credit" = 0;
          "Remaining Credit (SBC)" += ApplnServiceTaxEntry."Service Tax SBC Amount";
          "Closed (SBC)" := "Remaining Credit (SBC)" = 0;
          "Remaining Credit (KK Cess)" += ApplnServiceTaxEntry."KK Cess Amount";
          "Closed (KK Cess)" := "Remaining Credit (KK Cess)" = 0;
          "Remaining Credit (eCess)" += ApplnServiceTaxEntry."eCess Amount";
          "Closed (eCess)" := "Remaining Credit (eCess)" = 0;
          "Remaining Credit (SHECess)" += ApplnServiceTaxEntry."SHE Cess Amount";
          "Closed (SHECess)" := "Remaining Credit (SHECess)" = 0;
          MODIFY;
        END;
      END;
    END;

    PROCEDURE InsertReversingEntryOnAppln@1500061(VAR ApplnServiceTaxEntry@1500001 : Record 16473;ParentServiceTaxEntry@1500000 : Record 16473);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
    BEGIN
      WITH ApplnServiceTaxEntry DO BEGIN
        "Entry No." := 0;
        "Document Type" := ParentServiceTaxEntry."Document Type";
        "Document No." := ParentServiceTaxEntry."Document No.";
        "Serv. Tax on Advance Payment" := FALSE;
        "Corrected Appln. Entry No." := ParentServiceTaxEntry."Entry No.";
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
        IF "Reverse Charge" THEN BEGIN
          "Service Tax Base Amount" := "Amount Including Service Tax";
          "Amount Including Service Tax" := "Amount Including Service Tax" + FullTaxAmount + FullTaxSBCAmount + KKCessAmount;
          "G/L Account No." := ServiceTaxSetup.GetPayAccNo;
          "SBC G/L Account" := ServiceTaxSetup.GetPaySBCAccNo;
          "KK Cess G/L Account" := ServiceTaxSetup.GetKKCessPayAccNo;
        END ELSE BEGIN
          "G/L Account No." := ServiceTaxSetup.GetRecAccNo;
          "SBC G/L Account" := ServiceTaxSetup.GetRecSBCAccNo;
          "KK Cess G/L Account" := ServiceTaxSetup.GetKKCessRecAccNo;
        END;
        "Original S.T. Base Amount" := "Service Tax Base Amount";
        "Original S.T. Amount" := "Service Tax Amount";
        "Original S.T. eCess Amount" := "eCess Amount";
        "Original S.T. SHE Cess Amount" := "SHE Cess Amount";
        "Original S.T. SBC Amount" := "Service Tax SBC Amount";
        "Original KK Cess Amount" := "KK Cess Amount";
        ReverseAmounts;
        INSERT;

        InsertServiceTaxEntryDetail(
          ApplnServiceTaxEntry,"Entry No.","Transaction No.",
          "Service Tax Base Amount","Service Tax Amount","eCess Amount","SHE Cess Amount",
          "Service Tax SBC Amount","KK Cess Amount",TRUE);
      END;
    END;

    PROCEDURE InsertServTaxEntryDetails@1500002(ServiceTaxEntry@1500000 : Record 16473;CloseRemainingCredit@1500005 : Boolean;ZeroAmount@1500002 : Boolean);
    VAR
      ServiceTaxEntryDtls@1500001 : Record 16474;
    BEGIN
      ServiceTaxEntryDtls.INIT;
      ServiceTaxEntryDtls."Entry No." := 0;
      ServiceTaxEntryDtls."Service Tax Entry No." := ServiceTaxEntry."Entry No.";
      ServiceTaxEntryDtls.Type := ServiceTaxEntry.Type;
      ServiceTaxEntryDtls."Document No." := ServiceTaxEntry."Document No.";
      ServiceTaxEntryDtls."Posting Date" := ServiceTaxEntry."Posting Date";
      ServiceTaxEntryDtls."Document Type" := ServiceTaxEntry."Document Type";
      ServiceTaxEntryDtls."Serv. Tax on Advance Payment" := ServiceTaxEntry."Serv. Tax on Advance Payment";
      ServiceTaxEntryDtls."Entry Type" := ServiceTaxEntry."Entry Type";
      ServiceTaxEntryDtls."Corrective Application Entry" := ServiceTaxEntry."Corrected Appln. Entry No." <> 0;
      ServiceTaxEntryDtls."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
      ServiceTaxEntryDtls."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
      ServiceTaxEntryDtls."Location E.C.C. No." := ServiceTaxEntry."Location E.C.C. No.";
      ServiceTaxEntryDtls.PoT := ServiceTaxEntry.PoT;
      ServiceTaxEntryDtls."Reverse Charge" := ServiceTaxEntry."Reverse Charge";
      ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" := ServiceTaxEntry."Service Type (Rev. Chrg.)";
      ServiceTaxEntryDtls."Input Service Distribution" := ServiceTaxEntry."Input Service Distribution";
      IF NOT ServiceTaxEntryDtls."Reverse Charge" AND ServiceTaxEntryDtls."Input Service Distribution" THEN
        ServiceTaxEntryDtls."Remaining S.T. Base Amount" := ABS(ServiceTaxEntryDtls."Base Amount");

      IF ServiceTaxEntry."Reverse Charge" THEN
        ServiceTaxEntryDtls."Base Amount" := ServiceTaxEntry."Amount Including Service Tax"
      ELSE
        ServiceTaxEntryDtls."Base Amount" :=
          ServiceTaxEntry."Amount Including Service Tax" -
          (ServiceTaxEntry.FullTaxAmount + ServiceTaxEntry.FullTaxSBCAmount + ServiceTaxEntry.KKCessAmount);
      ServiceTaxEntryDtls."Zero Amount" := ZeroAmount;
      IF NOT ZeroAmount THEN
        ServiceTaxEntryDtls.Amount := ServiceTaxEntry."Amount Including Service Tax";

      ServiceTaxEntryDtls."Service Tax Amount" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntryDtls."Service Tax eCess Amount" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxEntryDtls."Service Tax SBC Amount" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntryDtls."KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxEntryDtls.Positive := ServiceTaxEntryDtls."Service Tax Amount" > 0;

      ServiceTaxEntryDtls."Transaction No." := ServiceTaxEntry."Transaction No.";
      InitRemainingCreditAmounts(ServiceTaxEntryDtls,CloseRemainingCredit);
      UpdateServTaxDetailsGLAccount(ServiceTaxEntryDtls);
      IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
        ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
      ServiceTaxEntryDtls."Location Code" := ServiceTaxEntry."Location Code";
      ServiceTaxEntryDtls."Service Tax Abatement %" := ServiceTaxEntry."Service Tax Abatement";
      ServiceTaxEntryDtls."ST Pure Agent" := ServiceTaxEntry."ST Pure Agent";
      ServiceTaxEntryDtls."Nature of Services" := ServiceTaxEntry."Nature of Services";
      ServiceTaxEntryDtls."Service Tax %" := ServiceTaxEntry."Service Tax %";
      ServiceTaxEntryDtls."Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
      ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
      ServiceTaxEntryDtls."Service Tax SBC %" := ServiceTaxEntry."Service Tax SBC %";
      ServiceTaxEntryDtls."KK Cess%" := ServiceTaxEntry."KK Cess%";
      ServiceTaxEntryDtls."Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
      ServiceTaxEntryDtls."Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
      ServiceTaxEntryDtls.INSERT(TRUE);
    END;

    PROCEDURE InsertZeroAmountCorrEntry@1500027(VAR AppliedServiceTaxEntry@1500001 : Record 16473;CorrectedServiceTaxEntryNo@1500000 : Integer);
    BEGIN
      AppliedServiceTaxEntry.ReverseAmounts;
      AppliedServiceTaxEntry."Corrected Appln. Entry No." := CorrectedServiceTaxEntryNo;
      InsertServTaxEntryDetails(AppliedServiceTaxEntry,TRUE,TRUE);
    END;

    PROCEDURE CreateServiceTaxBuffer@1280005(DocNo2@1280000 : Code[20];PostingDate2@1280001 : Date;STN2@1280002 : Code[20];DateFilter2@1280003 : Text[30];ReverseChargeTrans@1500000 : Boolean) : Boolean;
    BEGIN
      EXIT(CreateServiceTaxBufferForGroup(DocNo2,PostingDate2,STN2,DateFilter2,ReverseChargeTrans,''));
    END;

    PROCEDURE CreateServiceTaxBufferForGroup@1500064(DocNo2@1280000 : Code[20];PostingDate2@1280001 : Date;STN2@1280002 : Code[20];DateFilter2@1280003 : Text[30];ReverseChargeTrans@1500000 : Boolean;ServiceTaxGroupCode@1500002 : Code[20]) : Boolean;
    VAR
      ServiceTaxEntryDtls@1280005 : Record 16474;
      ServiceTaxBuffer@1280004 : Record 16476;
      ServiceTaxSetup@1280006 : Record 16472;
      ServiceTaxGroup@1280007 : Record 16471;
      MaxDate@1280008 : Date;
      LineNo@1280009 : Integer;
      IsArrear@1500001 : Boolean;
    BEGIN
      ServiceTaxEntryDtls.SETFILTER("Posting Date",DateFilter2);
      MaxDate := ServiceTaxEntryDtls.GETRANGEMAX("Posting Date");

      // Inserting service tax Groups
      IF ServiceTaxGroupCode <> '' THEN
        ServiceTaxGroup.SETRANGE(Code,ServiceTaxGroupCode);
      IF ServiceTaxGroup.FIND('-') THEN
        REPEAT
          ServiceTaxBuffer.INIT;
          ServiceTaxBuffer."Document No." := DocNo2;
          ServiceTaxBuffer."Service Tax Group Code" := ServiceTaxGroup.Code;
          ServiceTaxBuffer."Posting Date" := PostingDate2;
          ServiceTaxBuffer."Service Tax Registration No." := STN2;
          ServiceTaxBuffer.Description := ServiceTaxGroup.Description;
          LineNo := LineNo + 10000;
          ServiceTaxBuffer."Line No." := LineNo;
          IF ServiceTaxSetup.FindOnDate(ServiceTaxGroup.Code,MaxDate) THEN
            IF ServiceTaxSetup."Same Group Set Off" THEN
              ServiceTaxBuffer."Same Group Set Off" := TRUE;
          ServiceTaxBuffer.INSERT;
        UNTIL ServiceTaxGroup.NEXT = 0;

      // Inserting a Blank Line for The Excise as Service Tax
      ServiceTaxBuffer.INIT;
      ServiceTaxBuffer."Document No." := DocNo2;
      ServiceTaxBuffer."Service Tax Group Code" := '';
      ServiceTaxBuffer."Posting Date" := PostingDate2;
      ServiceTaxBuffer."Service Tax Registration No." := STN2;
      ServiceTaxBuffer.Description := Text010;
      LineNo := LineNo + 10000;
      ServiceTaxBuffer."Line No." := LineNo;
      ServiceTaxBuffer."E.C.C. No." := ECCNo;
      ServiceTaxBuffer."RG Set Off Date" := RGSetOffDate;
      ServiceTaxBuffer.CalcExcise;
      ServiceTaxBuffer.INSERT;

      ServiceTaxBuffer.SETRANGE("Document No.",DocNo2);
      IF ServiceTaxBuffer.FIND('-') THEN
        REPEAT
          IF ServiceTaxBuffer."Service Tax Group Code" <> '' THEN BEGIN
            // Payment Liability
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,STN2,ServiceTaxBuffer."Service Tax Group Code",ReverseChargeTrans,
              DateFilter2,CreditComponent::ServiceTax);
            IF ServiceTaxEntryDtls.FINDFIRST THEN
              REPEAT
                IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
                IF NOT ReverseChargeTrans THEN BEGIN
                  IF ServiceTaxEntryDtls."Service Tax Amount" < 0 THEN BEGIN
                    ServiceTaxBuffer."Payment Liability" :=
                      ServiceTaxBuffer."Payment Liability" + ABS(ServiceTaxEntryDtls."Service Tax Amount");
                    IF IsArrear THEN
                      ServiceTaxBuffer."Pay. Liability Arrear" :=
                        ServiceTaxBuffer."Pay. Liability Arrear" + ABS(ServiceTaxEntryDtls."Service Tax Amount");
                  END ELSE BEGIN
                    ServiceTaxBuffer."Payment Liability" :=
                      ServiceTaxBuffer."Payment Liability" -  ServiceTaxEntryDtls."Service Tax Amount";
                    IF IsArrear THEN
                      ServiceTaxBuffer."Pay. Liability Arrear" :=
                        ServiceTaxBuffer."Pay. Liability Arrear" - ServiceTaxEntryDtls."Service Tax Amount";
                  END;
                END ELSE BEGIN
                  ServiceTaxBuffer."Payment Liability" :=
                      ServiceTaxBuffer."Payment Liability" + ServiceTaxEntryDtls."Service Tax Amount";
                  IF IsArrear THEN
                    ServiceTaxBuffer."Pay. Liability Arrear" :=
                      ServiceTaxBuffer."Pay. Liability Arrear" + ServiceTaxEntryDtls."Service Tax Amount";
                END;
                ServiceTaxBuffer.MODIFY;
              UNTIL ServiceTaxEntryDtls.NEXT = 0;

            // Payment Liability FOR SBC
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,STN2,ServiceTaxBuffer."Service Tax Group Code",ReverseChargeTrans,
              DateFilter2,CreditComponent::SBC);
            IF ServiceTaxEntryDtls.FINDFIRST THEN
              REPEAT
                PaymentLiabilityforSBC(ServiceTaxEntryDtls,ServiceTaxBuffer,IsArrear,PostingDate2,ReverseChargeTrans);
              UNTIL ServiceTaxEntryDtls.NEXT = 0;

            // Payment Liability  for KKC
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,STN2,ServiceTaxBuffer."Service Tax Group Code",ReverseChargeTrans,
              DateFilter2,CreditComponent::KKCess);
            IF ServiceTaxEntryDtls.FINDFIRST THEN
              REPEAT
                PaymentLiabilityforKKC(ServiceTaxEntryDtls,ServiceTaxBuffer,IsArrear,PostingDate2,ReverseChargeTrans);
              UNTIL ServiceTaxEntryDtls.NEXT = 0;


            // service tax payable excise from e cess
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,STN2,ServiceTaxBuffer."Service Tax Group Code",ReverseChargeTrans,
              DateFilter2,CreditComponent::eCess);
            IF ServiceTaxEntryDtls.FINDFIRST THEN
              REPEAT
                IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
                IF NOT ReverseChargeTrans THEN BEGIN
                  IF ServiceTaxEntryDtls."Service Tax eCess Amount" < 0 THEN BEGIN
                    ServiceTaxBuffer."Payment Liability (eCess)" :=
                        ServiceTaxBuffer."Payment Liability (eCess)" + ABS(ServiceTaxEntryDtls."Service Tax eCess Amount");
                     IF IsArrear THEN
                       ServiceTaxBuffer."Pay. Liability(eCess) Arrear" :=
                         ServiceTaxBuffer."Pay. Liability(eCess) Arrear" + ABS(ServiceTaxEntryDtls."Service Tax eCess Amount");
                  END ELSE BEGIN
                    ServiceTaxBuffer."Payment Liability (eCess)" :=
                      ServiceTaxBuffer."Payment Liability (eCess)" - ServiceTaxEntryDtls."Service Tax eCess Amount";
                      IF IsArrear THEN
                       ServiceTaxBuffer."Pay. Liability(eCess) Arrear" :=
                         ServiceTaxBuffer."Pay. Liability(eCess) Arrear" - ServiceTaxEntryDtls."Service Tax eCess Amount";
                  END;
                END ELSE BEGIN
                  ServiceTaxBuffer."Payment Liability (eCess)" :=
                    ServiceTaxBuffer."Payment Liability (eCess)" + ServiceTaxEntryDtls."Service Tax eCess Amount";
                    IF IsArrear THEN
                      ServiceTaxBuffer."Pay. Liability(eCess) Arrear" :=
                        ServiceTaxBuffer."Pay. Liability(eCess) Arrear" + ServiceTaxEntryDtls."Service Tax eCess Amount";
                END;
                ServiceTaxBuffer.MODIFY;
              UNTIL ServiceTaxEntryDtls.NEXT = 0;

            // service tax payable excise from SHE cess
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,STN2,ServiceTaxBuffer."Service Tax Group Code",ReverseChargeTrans,
              DateFilter2,CreditComponent::SHECess);
            IF ServiceTaxEntryDtls.FIND('-') THEN
              REPEAT
                IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
                IF NOT ReverseChargeTrans THEN BEGIN
                  IF ServiceTaxEntryDtls."Service Tax SHE Cess Amount" < 0 THEN BEGIN
                    ServiceTaxBuffer."Payment Liability (SHECess)" :=
                      ServiceTaxBuffer."Payment Liability (SHECess)" + ABS(ServiceTaxEntryDtls."Service Tax SHE Cess Amount");
                    IF IsArrear THEN
                      ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" :=
                        ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" + ABS(ServiceTaxEntryDtls."Service Tax SHE Cess Amount");
                  END ELSE BEGIN
                    ServiceTaxBuffer."Payment Liability (SHECess)" :=
                      ServiceTaxBuffer."Payment Liability (SHECess)" - ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                    IF IsArrear THEN
                      ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" :=
                        ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" - ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                  END;
                END ELSE BEGIN
                  ServiceTaxBuffer."Payment Liability (SHECess)" :=
                    ServiceTaxBuffer."Payment Liability (SHECess)" + ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                  IF IsArrear THEN
                    ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" :=
                      ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" + ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                END;
                ServiceTaxBuffer.MODIFY;
              UNTIL ServiceTaxEntryDtls.NEXT = 0;
          END ELSE BEGIN
          // Credit amount for the Blank Service Tax Group that holds excise credit
            ServiceTaxBuffer."Credit Available" := ServiceTaxBuffer."Credit Available RG23A" +
              ServiceTaxBuffer."Credit Available RG23C";
            ServiceTaxBuffer."Credit Available (eCess)" := ServiceTaxBuffer."Credit Available RG23A eCess" +
              ServiceTaxBuffer."Credit Available RG23C eCess";
            ServiceTaxBuffer."Credit Available (SHECess)" := ServiceTaxBuffer."Credit Available RG23A SHECess" +
              ServiceTaxBuffer."Credit Available RG23C SHECess";
            ServiceTaxBuffer."Credit Available (SBC)" := ServiceTaxBuffer."Credit Available RG23A (SBC)" +
              ServiceTaxBuffer."Credit Available RG23C (SBC)";
            ServiceTaxBuffer.MODIFY;
          END;
          // You cannot use credit while paying reverse charge liability
          IF NOT ReverseChargeTrans THEN
            CalculateCreditAmounts(ServiceTaxEntryDtls,ServiceTaxBuffer,STN2,MaxDate);
        UNTIL ServiceTaxBuffer.NEXT = 0;
    END;

    PROCEDURE CheckValidations@1280006(DocNo@1280000 : Code[20];PostingDate@1280001 : Date);
    VAR
      ServiceTaxBuffer@1280002 : Record 16476;
      STMonthlyPaymentDetail@1500008 : Record 16591;
      LiabilityAmount@1280004 : Decimal;
      CreditAmount@1280005 : Decimal;
      PayAmount@1280006 : Decimal;
      IntAmount@1280008 : Decimal;
      OtherAmount@1280009 : Decimal;
      LiabilityAmountEcess@1280014 : Decimal;
      CreditAmountEcess@1280013 : Decimal;
      PayAmountEcess@1280012 : Decimal;
      LiabilityAmountSHEcess@1500000 : Decimal;
      CreditAmountSHEcess@1500001 : Decimal;
      PayAmountSHEcess@1500002 : Decimal;
      PenaltyAmount@1500003 : Decimal;
      Section73AAmount@1500004 : Decimal;
      OtherAmtArrearAmount@1500005 : Decimal;
      OtherAmtArrearAmounteCess@1500006 : Decimal;
      OtherAmtArrearAmountSHECess@1500007 : Decimal;
      CreditAvailable@1500009 : Decimal;
      CreditAvailableeCess@1500010 : Decimal;
      CreditAvailableSHECess@1500011 : Decimal;
      CreditAmt@1500017 : ARRAY [2] OF Decimal;
      CreditAmtEcess@1500016 : ARRAY [2] OF Decimal;
      CreditAmtSHEcess@1500015 : ARRAY [2] OF Decimal;
      CrAvailable@1500014 : ARRAY [2] OF Decimal;
      CrAvailableeCess@1500013 : ARRAY [2] OF Decimal;
      CrAvailableSHECess@1500012 : ARRAY [2] OF Decimal;
      LiabilitySBCAmount@1500427 : Decimal;
      CreditSBCAmount@1500429 : Decimal;
      PaySBCAmount@1500431 : Decimal;
      OtherAmtArrearSBCAmount@1500433 : Decimal;
      LiabilityKKCAmount@1500021 : Decimal;
      CreditKKCAmount@1500020 : Decimal;
      PayKKCAmount@1500019 : Decimal;
      OtherAmtArrearKKCAmount@1500018 : Decimal;
      KKCCreditAvailable@1500024 : Decimal;
      KKCCreditAmt@1500023 : ARRAY [2] OF Decimal;
      KKCCrAvailable@1500022 : ARRAY [2] OF Decimal;
      ServiceTaxBuffer2@1500025 : Record 16476;
    BEGIN
      ServiceTaxBuffer.SETRANGE("Document No.",DocNo);
      ServiceTaxBuffer.SETRANGE("Posting Date",PostingDate);
      ServiceTaxBuffer.SETRANGE("Same Group Set Off",TRUE);
      IF ServiceTaxBuffer.FIND('-') THEN
        REPEAT
          IF ServiceTaxBuffer."Payment Liability" <> 0 THEN BEGIN
            IF ((ServiceTaxBuffer."Payment Liability" + ServiceTaxBuffer."Interest Amount" + ServiceTaxBuffer."Other Amount" +
                 ServiceTaxBuffer."Section 73 A Amount" + ServiceTaxBuffer."Penalty Paid" + ServiceTaxBuffer."Other Amt. Arrear") <>
                (ServiceTaxBuffer."Credit Availed" + ServiceTaxBuffer."Payment Amount"))
            THEN
              ERROR(Text000,ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Pay. Amount Arrear" > ServiceTaxBuffer."Pay. Liability Arrear" THEN
              ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount Arrear"),ServiceTaxBuffer.FIELDCAPTION("Pay. Liability Arrear"
                  ),
                ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Pay. Amount Arrear" > (ServiceTaxBuffer."Payment Amount" - (
                                                                                             ServiceTaxBuffer."Interest Amount" +
                                                                                             ServiceTaxBuffer."Other Amount" +
                                                                                             ServiceTaxBuffer."Section 73 A Amount" +
                                                                                             ServiceTaxBuffer."Penalty Paid" +
                                                                                             ServiceTaxBuffer."Other Amt. Arrear"))
            THEN
              ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount Arrear"),'Total Payment Amount',
                ServiceTaxBuffer."Service Tax Group Code");

            IF ServiceTaxBuffer."Payment Amount" <> 0 THEN BEGIN
              ServiceTaxBuffer.TESTFIELD("Account No.");
              IF ServiceTaxBuffer."Account Type" = ServiceTaxBuffer."Account Type"::Bank THEN
                ServiceTaxBuffer.TESTFIELD("Cheque No.");
              IF (ServiceTaxBuffer."Payment Amount" < (ServiceTaxBuffer."Interest Amount" + ServiceTaxBuffer."Other Amount" +
                                                       ServiceTaxBuffer."Penalty Paid" +
                                                       ServiceTaxBuffer."Section 73 A Amount" + ServiceTaxBuffer."Other Amt. Arrear"))
              THEN
                ERROR(Text002,ServiceTaxBuffer."Service Tax Group Code");
            END;
          END;
          IF ServiceTaxBuffer."Payment Liability (eCess)" <> 0 THEN BEGIN
            IF (ServiceTaxBuffer."Payment Liability (eCess)" <>
                (ServiceTaxBuffer."Credit Availed (eCess)" + ServiceTaxBuffer."Payment Amount (eCess)"))
            THEN
              ERROR(Text004,ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Pay. Amount (eCess) Arrear" > ServiceTaxBuffer."Pay. Liability(eCess) Arrear" THEN
              ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Liability(eCess) Arrear"),
                ServiceTaxBuffer.FIELDCAPTION("Pay. Liability(eCess) Arrear"),
                ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Pay. Amount (eCess) Arrear" > (ServiceTaxBuffer."Payment Amount (eCess)" -
                                                                ServiceTaxBuffer."Other Amt. eCess Arrear")
            THEN
              ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount Arrear"),'Total Payment Amount eCess',
                ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Payment Amount (eCess)" <> 0 THEN BEGIN
              ServiceTaxBuffer.TESTFIELD("Account No.");
              IF ServiceTaxBuffer."Account Type" = ServiceTaxBuffer."Account Type"::Bank THEN
                ServiceTaxBuffer.TESTFIELD("Cheque No.");
            END;
          END;
          IF ServiceTaxBuffer."Payment Liability (SBC)" <> 0 THEN
            PayAmountSBC(ServiceTaxBuffer);
          IF ServiceTaxBuffer."Payment Liability (KKC)" <> 0 THEN
            PayAmountKKC(ServiceTaxBuffer);

          IF ServiceTaxBuffer."Payment Liability (SHECess)" <> 0 THEN BEGIN
            IF (ServiceTaxBuffer."Payment Liability (SHECess)" <>
                (ServiceTaxBuffer."Credit Availed (SHECess)" + ServiceTaxBuffer."Payment Amount (SHECess)"))
            THEN
              ERROR(Text005,ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Pay. Amount (SHECess) Arrear" > ServiceTaxBuffer."Pay. Liability(SHECess) Arrear" THEN
              ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount (SHECess) Arrear"),
                ServiceTaxBuffer.FIELDCAPTION("Pay. Liability(SHECess) Arrear"),
                ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Pay. Amount (SHECess) Arrear" > (ServiceTaxBuffer."Payment Amount (SHECess)" -
                                                                  ServiceTaxBuffer."Other Amt. SHECess Arrear")
            THEN
              ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount (SHECess) Arrear"),'Total Payment Amount SHE Cess',
                ServiceTaxBuffer."Service Tax Group Code");
            IF ServiceTaxBuffer."Payment Amount (SHECess)" <> 0 THEN BEGIN
              ServiceTaxBuffer.TESTFIELD("Account No.");
              IF ServiceTaxBuffer."Account Type" = ServiceTaxBuffer."Account Type"::Bank THEN
                ServiceTaxBuffer.TESTFIELD("Cheque No.");
            END;
          END;

        UNTIL ServiceTaxBuffer.NEXT = 0;

      ServiceTaxBuffer.SETRANGE("Same Group Set Off",FALSE);
      IF ServiceTaxBuffer.FIND('-') THEN
        REPEAT
          LiabilityAmount := LiabilityAmount + ServiceTaxBuffer."Payment Liability";
          CreditAmount := CreditAmount + ServiceTaxBuffer."Credit Availed";
          PayAmount := PayAmount + ServiceTaxBuffer."Payment Amount";
          LiabilityAmountEcess := LiabilityAmountEcess + ServiceTaxBuffer."Payment Liability (eCess)";
          CreditAmountEcess := CreditAmountEcess + ServiceTaxBuffer."Credit Availed (eCess)";
          PayAmountEcess := PayAmountEcess + ServiceTaxBuffer."Payment Amount (eCess)";
          LiabilitySBCAmount := LiabilitySBCAmount + ServiceTaxBuffer."Payment Liability (SBC)";
          CreditSBCAmount := CreditSBCAmount + ServiceTaxBuffer."Credit Availed (SBC)";
          PaySBCAmount := PaySBCAmount + ServiceTaxBuffer."Payment Amount (SBC)";
          LiabilityKKCAmount := LiabilityKKCAmount + ServiceTaxBuffer."Payment Liability (KKC)";
          CreditKKCAmount := CreditKKCAmount + ServiceTaxBuffer."Credit Availed (KKC)";
          PayKKCAmount := PayKKCAmount + ServiceTaxBuffer."Payment Amount (KKC)";
          IntAmount := IntAmount + ServiceTaxBuffer."Interest Amount";
          OtherAmount := OtherAmount + ServiceTaxBuffer."Other Amount";
          PenaltyAmount := PenaltyAmount + ServiceTaxBuffer."Penalty Paid";
          Section73AAmount := Section73AAmount + ServiceTaxBuffer."Section 73 A Amount";
          OtherAmtArrearAmount := OtherAmtArrearAmount + ServiceTaxBuffer."Other Amt. Arrear";
          OtherAmtArrearSBCAmount := OtherAmtArrearSBCAmount + ServiceTaxBuffer."Other Amt. Arrear (SBC)";
          OtherAmtArrearKKCAmount := OtherAmtArrearKKCAmount + ServiceTaxBuffer."Other Amt. Arrear (KKC)";
          OtherAmtArrearAmounteCess := OtherAmtArrearAmounteCess + ServiceTaxBuffer."Other Amt. eCess Arrear";
          OtherAmtArrearAmountSHECess := OtherAmtArrearAmountSHECess + ServiceTaxBuffer."Other Amt. SHECess Arrear";
          LiabilityAmountSHEcess := LiabilityAmountSHEcess + ServiceTaxBuffer."Payment Liability (SHECess)";
          CreditAmountSHEcess := CreditAmountSHEcess + ServiceTaxBuffer."Credit Availed (SHECess)";
          PayAmountSHEcess := PayAmountSHEcess + ServiceTaxBuffer."Payment Amount (SHECess)";
          CreditAvailable := CreditAvailable + ServiceTaxBuffer."Credit Available";
          KKCCreditAvailable := KKCCreditAvailable + ServiceTaxBuffer."Credit Available (KKC)";
          CreditAvailableeCess := CreditAvailableeCess + ServiceTaxBuffer."Credit Available (eCess)";
          CreditAvailableSHECess := CreditAvailableSHECess + ServiceTaxBuffer."Credit Available (SHECess)";
          IF ServiceTaxBuffer."Service Tax Group Code" = '' THEN BEGIN
            CreditAmt[1] += ServiceTaxBuffer."Credit Availed";
            KKCCreditAmt[1] += ServiceTaxBuffer."Credit Availed (KKC)";
            CreditAmtEcess[1] += ServiceTaxBuffer."Credit Availed (eCess)";
            CreditAmtSHEcess[1] += ServiceTaxBuffer."Credit Availed (SHECess)";
            CrAvailable[1] += ServiceTaxBuffer."Credit Available";
            KKCCrAvailable[1] += ServiceTaxBuffer."Credit Available (KKC)";
            CrAvailableeCess[1] += ServiceTaxBuffer."Credit Available (eCess)";
            CrAvailableSHECess[1] += ServiceTaxBuffer."Credit Available (SHECess)";
          END ELSE BEGIN
            CreditAmt[2] += ServiceTaxBuffer."Credit Availed";
            KKCCreditAmt[2] += ServiceTaxBuffer."Credit Availed (KKC)";
            CreditAmtEcess[2] += ServiceTaxBuffer."Credit Availed (eCess)";
            CreditAmtSHEcess[2] += ServiceTaxBuffer."Credit Availed (SHECess)";
            CrAvailable[2] += ServiceTaxBuffer."Credit Available";
            KKCCrAvailable[2] += ServiceTaxBuffer."Credit Available (KKC)";
            CrAvailableeCess[2] += ServiceTaxBuffer."Credit Available (eCess)";
            CrAvailableSHECess[2] += ServiceTaxBuffer."Credit Available (SHECess)";
          END;
          IF (ServiceTaxBuffer."Payment Amount" <> 0) AND (ServiceTaxBuffer."Account Type" = 1) THEN
            ServiceTaxBuffer.TESTFIELD("Cheque No.");
        UNTIL ServiceTaxBuffer.NEXT = 0;
      IF LiabilityAmount < 0 THEN
        ERROR(Text032);
      IF (LiabilityAmount + IntAmount + OtherAmount + PenaltyAmount + Section73AAmount + OtherAmtArrearAmount) <>
         (CreditAmount + PayAmount)
      THEN
        ERROR(Text001);
      IF (LiabilityAmountEcess + OtherAmtArrearAmounteCess) <> (CreditAmountEcess + PayAmountEcess) THEN
        ERROR(Text002);
      IF (LiabilitySBCAmount + OtherAmtArrearSBCAmount) <> (CreditSBCAmount + PaySBCAmount) THEN
        ERROR(Text002);
      IF (LiabilityKKCAmount + OtherAmtArrearKKCAmount) <> (CreditKKCAmount + PayKKCAmount) THEN
        ERROR(Text002);
      IF PayAmount < (IntAmount + OtherAmount + PenaltyAmount + Section73AAmount) THEN
        ERROR(Text003);
      IF (LiabilityAmountSHEcess + OtherAmtArrearAmountSHECess) <> (CreditAmountSHEcess + PayAmountSHEcess) THEN
        ERROR(Text002);

      IF (CreditAmt[1] > CrAvailable[1]) OR (CreditAmtEcess[1] > CrAvailableeCess[1]) OR
         (CreditAmtSHEcess[1] > CrAvailableSHECess[1]) OR ((KKCCreditAmt[1] > KKCCrAvailable[1]))
      THEN
        ERROR(Text16532);
      IF (CreditAmt[2] > CrAvailable[2]) OR (CreditAmtEcess[2] > CrAvailableeCess[2]) OR
         (CreditAmtSHEcess[2] > CrAvailableSHECess[2]) OR (KKCCreditAmt[2] > KKCCrAvailable[2])
      THEN
        ERROR(Text16532);

      ServiceTaxBuffer.SETCURRENTKEY("Document No.","Posting Date","Same Group Set Off");
      ServiceTaxBuffer.SETRANGE("Document No.",DocNo);
      ServiceTaxBuffer.SETRANGE("Posting Date",PostingDate);
      ServiceTaxBuffer.SETRANGE("Same Group Set Off",FALSE);
      ServiceTaxBuffer.CALCSUMS("Payment Liability","Payment Liability (eCess)","Payment Liability (SHECess)",
        "Credit Availed","Credit Availed (eCess)","Credit Availed (SHECess)","Payment Amount","Payment Amount (eCess)",
        "Payment Amount (SHECess)","Interest Amount","Other Amount","Section 73 A Amount","Penalty Paid","Other Amt. Arrear",
        "Other Amt. eCess Arrear","Other Amt. SHECess Arrear","Payment Liability (SBC)","Payment Amount (SBC)");

      ServiceTaxBuffer2.SETCURRENTKEY("Document No.","Posting Date","Same Group Set Off");
      ServiceTaxBuffer2.SETRANGE("Document No.",DocNo);
      ServiceTaxBuffer2.SETRANGE("Same Group Set Off",FALSE);
      ServiceTaxBuffer2.SETRANGE("Posting Date",PostingDate);
      ServiceTaxBuffer2.CALCSUMS("Payment Liability (KKC)","Other Amt. Arrear (KKC)",
        "Credit Availed (KKC)","Payment Amount (KKC)","Payment Amount (eCess)");

      IF (ServiceTaxBuffer."Payment Liability" + ServiceTaxBuffer."Interest Amount" + ServiceTaxBuffer."Other Amount" +
          ServiceTaxBuffer."Section 73 A Amount" + ServiceTaxBuffer."Penalty Paid" + ServiceTaxBuffer."Other Amt. Arrear" <>
          ServiceTaxBuffer."Credit Availed" + ServiceTaxBuffer."Payment Amount") OR
         (ServiceTaxBuffer."Payment Liability (eCess)" + ServiceTaxBuffer."Other Amt. eCess Arrear" <>
          ServiceTaxBuffer."Credit Availed (eCess)" + ServiceTaxBuffer."Payment Amount (eCess)") OR
         (ServiceTaxBuffer."Payment Liability (SHECess)" + ServiceTaxBuffer."Other Amt. SHECess Arrear" <>
          ServiceTaxBuffer."Credit Availed (SHECess)" + ServiceTaxBuffer."Payment Amount (SHECess)") OR
         (ServiceTaxBuffer."Payment Liability (SBC)" + ServiceTaxBuffer."Other Amt. Arrear (SBC)" <>
          ServiceTaxBuffer."Credit Availed (SBC)" + ServiceTaxBuffer."Payment Amount (SBC)") OR
         (ServiceTaxBuffer2."Payment Liability (KKC)" + ServiceTaxBuffer2."Other Amt. Arrear (KKC)" <>
          ServiceTaxBuffer2."Credit Availed (KKC)" + ServiceTaxBuffer2."Payment Amount (KKC)")
      THEN
        ERROR(Text16531);

      IF (CreditAvailable = 0) AND (CreditAmount <> 0) THEN
        ERROR(Text16532);
      IF (KKCCreditAvailable = 0) AND (CreditKKCAmount <> 0) THEN
        ERROR(Text16549);
      IF (CreditAvailableeCess = 0) AND (CreditAmountEcess <> 0) THEN
        ERROR(Text16532);
      IF (CreditAvailableSHECess = 0) AND (CreditAmountSHEcess <> 0) THEN
        ERROR(Text16532);

      ServiceTaxBuffer.SETRANGE("Document No.",DocNo);
      ServiceTaxBuffer.SETRANGE("Posting Date",PostingDate);
      ServiceTaxBuffer.SETRANGE("Same Group Set Off",TRUE);
      IF ServiceTaxBuffer.FINDSET THEN
        REPEAT
          IF (ServiceTaxBuffer."Payment Liability" <> ServiceTaxBuffer."Credit Availed" + ServiceTaxBuffer."Payment Amount") OR
             (ServiceTaxBuffer."Payment Liability (eCess)" <> ServiceTaxBuffer."Credit Availed (eCess)" +
              ServiceTaxBuffer."Payment Amount (eCess)") OR
             (ServiceTaxBuffer."Payment Liability (SHECess)" <> ServiceTaxBuffer."Credit Availed (SHECess)" +
              ServiceTaxBuffer."Payment Amount (SHECess)") OR
             (ServiceTaxBuffer."Payment Liability (SBC)" <> ServiceTaxBuffer."Credit Availed (SBC)" +
              ServiceTaxBuffer."Payment Amount (SBC)") OR
             (ServiceTaxBuffer."Payment Liability (KKC)" <> ServiceTaxBuffer."Credit Availed (KKC)" +
              ServiceTaxBuffer."Payment Amount (KKC)")
          THEN
            ERROR(Text16531);
        UNTIL ServiceTaxBuffer.NEXT = 0;

      ServiceTaxBuffer.SETRANGE("Document No.",DocNo);
      ServiceTaxBuffer.SETRANGE("Posting Date",PostingDate);
      ServiceTaxBuffer.SETFILTER("Service Tax Group Code",'<>%1','');
      IF ServiceTaxBuffer.FINDSET THEN
        REPEAT
          STMonthlyPaymentDetail.RESET;
          STMonthlyPaymentDetail.SETRANGE("Service Tax Registration No.",ServiceTaxBuffer."Service Tax Registration No.");
          STMonthlyPaymentDetail.SETRANGE("Document No.",DocNo);
          STMonthlyPaymentDetail.SETRANGE("Service Tax Group Code",ServiceTaxBuffer."Service Tax Group Code");
          STMonthlyPaymentDetail.CALCSUMS("Interest Amount","Penalty Amount","Section 73 A Amount",
            "Any Other Amount","Other Arrear Amt","Other eCess Arrear Amt","Other SHE Cess Arrear Amt","Other Arrear Amt (SBC)",
            "Other Arrear KK Cess Amount");

          IF ServiceTaxBuffer."Interest Amount" <> STMonthlyPaymentDetail."Interest Amount" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Interest Amount"),ServiceTaxBuffer."Interest Amount",
              STMonthlyPaymentDetail."Interest Amount",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Other Amount" <> STMonthlyPaymentDetail."Any Other Amount" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Other Amount"),ServiceTaxBuffer."Other Amount",
              STMonthlyPaymentDetail."Any Other Amount",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Penalty Paid" <> STMonthlyPaymentDetail."Penalty Amount" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Penalty Paid"),ServiceTaxBuffer."Penalty Paid",
              STMonthlyPaymentDetail."Penalty Amount",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Section 73 A Amount" <> STMonthlyPaymentDetail."Section 73 A Amount" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Section 73 A Amount"),ServiceTaxBuffer."Section 73 A Amount",
              STMonthlyPaymentDetail."Section 73 A Amount",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Other Amt. Arrear" <> STMonthlyPaymentDetail."Other Arrear Amt" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Other Amt. Arrear"),ServiceTaxBuffer."Other Amt. Arrear",
              STMonthlyPaymentDetail."Other Arrear Amt",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Other Amt. eCess Arrear" <> STMonthlyPaymentDetail."Other eCess Arrear Amt" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Other Amt. eCess Arrear"),ServiceTaxBuffer."Other Amt. eCess Arrear",
              STMonthlyPaymentDetail."Other eCess Arrear Amt",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Other Amt. SHECess Arrear" <> STMonthlyPaymentDetail."Other SHE Cess Arrear Amt" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Other Amt. SHECess Arrear"),ServiceTaxBuffer."Other Amt. SHECess Arrear",
              STMonthlyPaymentDetail."Other SHE Cess Arrear Amt",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Other Amt. Arrear (SBC)" <> STMonthlyPaymentDetail."Other Arrear Amt (SBC)" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Other Amt. Arrear (SBC)"),ServiceTaxBuffer."Other Amt. Arrear (SBC)",
              STMonthlyPaymentDetail."Other Arrear Amt (SBC)",ServiceTaxBuffer."Service Tax Group Code");
          IF ServiceTaxBuffer."Other Amt. Arrear (KKC)" <> STMonthlyPaymentDetail."Other Arrear KK Cess Amount" THEN
            ERROR(Text16533,ServiceTaxBuffer.FIELDCAPTION("Other Amt. Arrear (KKC)"),ServiceTaxBuffer."Other Amt. Arrear (KKC)",
              STMonthlyPaymentDetail."Other Arrear KK Cess Amount",ServiceTaxBuffer."Service Tax Group Code");
        UNTIL ServiceTaxBuffer.NEXT = 0;
    END;

    PROCEDURE PostServiceTaxPayment@1280008(DocNo2@1280003 : Code[20];PostingDate2@1280002 : Date;DateFilter2@1280000 : Text[30];ReverseChargeTrans@1500000 : Boolean);
    VAR
      ServiceTaxPaymentBuffer@1280001 : Record 16476;
      ServiceTaxEntryDtls@1280004 : Record 16474;
      ServiceTaxSetup@1500015 : Record 16472;
      TempServiceTaxEntryDtls@1001 : Record 16474;
      TempServiceTaxBuffer@1000 : TEMPORARY Record 16476;
      GenJnlLine@1500022 : Record 81;
      MaxDate@1280007 : Date;
      MinDate@1280008 : Date;
      AppliedAmount@1280005 : Decimal;
      AppliedAmounteCess@1002 : Decimal;
      TotalAppliedPaymentAmount@1003 : Decimal;
      TotalAppliedPaymentAmounteCess@1004 : Decimal;
      AppliedAmountSHECess@1500001 : Decimal;
      TotalAppliedPaymentAmountSCess@1500002 : Decimal;
      Amt@1500003 : Decimal;
      AmteCess@1500004 : Decimal;
      AmtSHECess@1500005 : Decimal;
      STMonthlyPaymentDTlBuffer@1500006 : Record 16590;
      STMonthlyPaymentDetail@1500007 : Record 16591;
      CashPayAmt@1500010 : Decimal;
      CashPayAmteCess@1500009 : Decimal;
      CashPayAmtSHECess@1500008 : Decimal;
      ArrearCashPayAmt@1500013 : Decimal;
      ArrearCashPayAmteCess@1500012 : Decimal;
      ArrearCashPayAmtSHECess@1500011 : Decimal;
      IsArrear@1500014 : Boolean;
      SBCAmt@1500435 : Decimal;
      CashPaySBCAmt@1500437 : Decimal;
      ArrearCashPaySBCAmt@1500439 : Decimal;
      AppliedSBCAmount@1500441 : Decimal;
      KKCAmt@1500018 : Decimal;
      KKCCashPayAmt@1500017 : Decimal;
      KKCArrearCashPayAmt@1500016 : Decimal;
      AppliedKKCessAmt@1500019 : Decimal;
    BEGIN
      ServiceTaxEntryDtls.SETFILTER("Posting Date",DateFilter2);
      MinDate := ServiceTaxEntryDtls.GETRANGEMIN("Posting Date");
      MaxDate := ServiceTaxEntryDtls.GETRANGEMAX("Posting Date");
      CopyDocDimToTempDocDim(DocNo2);
      ServiceTaxPaymentBuffer.RESET;
      ServiceTaxPaymentBuffer.SETRANGE("Document No.",DocNo2);
      IF ServiceTaxPaymentBuffer.FINDSET THEN
        REPEAT
          TempServiceTaxBuffer := ServiceTaxPaymentBuffer;
          TempServiceTaxBuffer.INSERT;
        UNTIL ServiceTaxPaymentBuffer.NEXT = 0;
      IF ServiceTaxPaymentBuffer.FINDSET THEN
        REPEAT
          Amt := ABS(ServiceTaxPaymentBuffer."Credit Availed");
          AmteCess := ABS(ServiceTaxPaymentBuffer."Credit Availed (eCess)");
          AmtSHECess := ABS(ServiceTaxPaymentBuffer."Credit Availed (SHECess)");
          SBCAmt := ABS(ServiceTaxPaymentBuffer."Credit Availed (SBC)");
          KKCAmt := ABS(ServiceTaxPaymentBuffer."Credit Availed (KKC)");
          CashPayAmt := ABS(ServiceTaxPaymentBuffer."Payment Amount" - ServiceTaxPaymentBuffer."Interest Amount" -
              ServiceTaxPaymentBuffer."Other Amount" - ServiceTaxPaymentBuffer."Penalty Paid" -
              ServiceTaxPaymentBuffer."Pay. Amount Arrear" - ServiceTaxPaymentBuffer."Section 73 A Amount" -
              ServiceTaxPaymentBuffer."Other Amt. Arrear");
          CashPaySBCAmt := ABS(ServiceTaxPaymentBuffer."Payment Amount (SBC)" -
              ServiceTaxPaymentBuffer."Pay. Amount Arrear (SBC)" - ServiceTaxPaymentBuffer."Other Amt. Arrear (SBC)");
          KKCCashPayAmt := ABS(ServiceTaxPaymentBuffer."Payment Amount (KKC)" -
              ServiceTaxPaymentBuffer."Pay. Amount Arrear (KKC)" - ServiceTaxPaymentBuffer."Other Amt. Arrear (KKC)");
          CashPayAmteCess := ABS(ServiceTaxPaymentBuffer."Payment Amount (eCess)" -
              ServiceTaxPaymentBuffer."Pay. Amount (eCess) Arrear" - ServiceTaxPaymentBuffer."Other Amt. eCess Arrear");
          CashPayAmtSHECess := ABS(ServiceTaxPaymentBuffer."Payment Amount (SHECess)" -
              ServiceTaxPaymentBuffer."Pay. Amount (SHECess) Arrear" - ServiceTaxPaymentBuffer."Other Amt. SHECess Arrear");
          ArrearCashPayAmt := ABS(ServiceTaxPaymentBuffer."Pay. Amount Arrear");
          ArrearCashPaySBCAmt := ABS(ServiceTaxPaymentBuffer."Pay. Amount Arrear (SBC)");
          KKCArrearCashPayAmt := ABS(ServiceTaxPaymentBuffer."Pay. Amount Arrear (KKC)");
          ArrearCashPayAmteCess := ABS(ServiceTaxPaymentBuffer."Pay. Amount (eCess) Arrear");
          ArrearCashPayAmtSHECess := ABS(ServiceTaxPaymentBuffer."Pay. Amount (SHECess) Arrear");
          FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
            ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::ServiceTax);
          IF ServiceTaxEntryDtls.FIND('-') THEN
            REPEAT
              IF Amt <> 0 THEN BEGIN
                IF ABS(ServiceTaxEntryDtls."Service Tax Amount") > Amt THEN BEGIN
                  InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,Amt,0,0,0);
                  Amt := 0;
                END ELSE BEGIN
                  InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,
                    ABS(ServiceTaxEntryDtls."Service Tax Amount"),0,0,0);
                  Amt -= ABS(ServiceTaxEntryDtls."Service Tax Amount");
                END;
              END;
              IF ServiceTaxPaymentBuffer."Payment Liability" <> 0 THEN BEGIN
                IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
                IF NOT ReverseChargeTrans THEN BEGIN
                  FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",TRUE,-ServiceTaxEntryDtls."Service Tax Amount",
                    ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls.Closed := TRUE;
                  TempServiceTaxEntryDtls."Mark Record" := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
                  IF (CashPayAmt <> 0) AND (NOT IsArrear) THEN BEGIN
                    IF -ServiceTaxEntryDtls."Service Tax Amount" > CashPayAmt THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := -CashPayAmt;
                      CashPayAmt := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := ServiceTaxEntryDtls."Service Tax Amount";
                      CashPayAmt := CashPayAmt - -ServiceTaxEntryDtls."Service Tax Amount";
                    END;
                  END;
                  IF (ArrearCashPayAmt <> 0) AND IsArrear THEN BEGIN
                    IF -ServiceTaxEntryDtls."Service Tax Amount" > ArrearCashPayAmt THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := -ArrearCashPayAmt;
                      ArrearCashPayAmt := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := ServiceTaxEntryDtls."Service Tax Amount";
                      ArrearCashPayAmt := ArrearCashPayAmt - -ServiceTaxEntryDtls."Service Tax Amount";
                    END;
                  END;
                  TempServiceTaxEntryDtls.MODIFY;
                END ELSE BEGIN
                  FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",TRUE,ServiceTaxEntryDtls."Service Tax Amount",
                    ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Mark Record" := TRUE;
                  TempServiceTaxEntryDtls."Reverse Charge Pmt. Doc. No." := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
                  IF (CashPayAmt <> 0) AND (NOT IsArrear) THEN BEGIN
                    IF ServiceTaxEntryDtls."Service Tax Amount" > CashPayAmt THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := CashPayAmt;
                      CashPayAmt := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := ServiceTaxEntryDtls."Service Tax Amount";
                      CashPayAmt := CashPayAmt - ServiceTaxEntryDtls."Service Tax Amount";
                    END;
                  END;
                  IF (ArrearCashPayAmt <> 0) AND IsArrear THEN BEGIN
                    IF ServiceTaxEntryDtls."Service Tax Amount" > ArrearCashPayAmt THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := ArrearCashPayAmt;
                      ArrearCashPayAmt := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount" := ServiceTaxEntryDtls."Service Tax Amount";
                      ArrearCashPayAmt := ArrearCashPayAmt - ServiceTaxEntryDtls."Service Tax Amount";
                    END;
                  END;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
              END;
            UNTIL ServiceTaxEntryDtls.NEXT = 0;

          //For the Payment Liability - KKC Closing of Sale or charge entries while payment KKC
          FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
            ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::KKCess);
          IF ServiceTaxEntryDtls.FIND('-') THEN
            REPEAT
              CalculateKKCessPaymentAmounts(ServiceTaxPaymentBuffer,ServiceTaxEntryDtls,TempServiceTaxEntryDtls,IsArrear,
                                            PostingDate2,ReverseChargeTrans,DocNo2,KKCAmt,KKCCashPayAmt,KKCArrearCashPayAmt);
            UNTIL ServiceTaxEntryDtls.NEXT = 0;

          //For the Payment Liability - SBC Closing of Sale or charge entries while payment SBC
          FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
            ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::SBC);
          IF ServiceTaxEntryDtls.FIND('-') THEN
            REPEAT
              CalculateSBCPaymentAmounts(
                ServiceTaxPaymentBuffer,ServiceTaxEntryDtls,TempServiceTaxEntryDtls,IsArrear,
                PostingDate2,MaxDate,ReverseChargeTrans,DocNo2,CashPaySBCAmt,ArrearCashPaySBCAmt);
            UNTIL ServiceTaxEntryDtls.NEXT = 0;

          // For the Payment Liability - eCess Closing of Sale or charge entries while payment eCESS
          FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
            ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::eCess);
          IF ServiceTaxEntryDtls.FINDSET THEN
            REPEAT
              IF AmteCess <> 0 THEN BEGIN
                IF ABS(ServiceTaxEntryDtls."Service Tax eCess Amount") > AmteCess THEN BEGIN
                  InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,0,AmteCess,0,0);
                  AmteCess := 0;
                END ELSE BEGIN
                  InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,
                    0,ABS(ServiceTaxEntryDtls."Service Tax eCess Amount"),0,0);
                  AmteCess -= ABS(ServiceTaxEntryDtls."Service Tax eCess Amount");
                END;
              END;
              IF ServiceTaxPaymentBuffer."Payment Liability (eCess)" <> 0 THEN BEGIN
                IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
                IF NOT ReverseChargeTrans THEN BEGIN
                  FillSTaxPostingBuffer(
                    0,ServiceTaxEntryDtls."GL Account",TRUE,-ServiceTaxEntryDtls."Service Tax eCess Amount",
                    ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Closed (eCess)" := TRUE;
                  TempServiceTaxEntryDtls."Mark Record" := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No. (eCess)" := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date (eCess)" := PostingDate2;
                  IF (CashPayAmteCess <> 0) AND (NOT IsArrear) THEN BEGIN
                    IF -ServiceTaxEntryDtls."Service Tax eCess Amount" > CashPayAmteCess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := -CashPayAmteCess;
                      CashPayAmteCess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := ServiceTaxEntryDtls."Service Tax eCess Amount";
                      CashPayAmteCess := CashPayAmteCess - -ServiceTaxEntryDtls."Service Tax eCess Amount";
                    END;
                  END;
                  IF (ArrearCashPayAmteCess <> 0) AND IsArrear THEN BEGIN
                    IF -ServiceTaxEntryDtls."Service Tax eCess Amount" > ArrearCashPayAmteCess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := -ArrearCashPayAmteCess;
                      ArrearCashPayAmteCess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := ServiceTaxEntryDtls."Service Tax eCess Amount";
                      ArrearCashPayAmteCess := ArrearCashPayAmteCess - -ServiceTaxEntryDtls."Service Tax eCess Amount";
                    END;
                  END;
                  TempServiceTaxEntryDtls.MODIFY;
                END ELSE BEGIN
                  FillSTaxPostingBuffer(
                    0,ServiceTaxEntryDtls."GL Account",TRUE,ServiceTaxEntryDtls."Service Tax eCess Amount",
                    ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Mark Record" := TRUE;
                  TempServiceTaxEntryDtls."Rev.Ch. Pmt. Doc. No. (eCESS)" := DocNo2;
                  IF (CashPayAmteCess <> 0) AND (NOT IsArrear) THEN BEGIN
                    IF ServiceTaxEntryDtls."Service Tax eCess Amount" > CashPayAmteCess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := CashPayAmteCess;
                      CashPayAmteCess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := ServiceTaxEntryDtls."Service Tax eCess Amount";
                      CashPayAmteCess := CashPayAmteCess - ServiceTaxEntryDtls."Service Tax eCess Amount";
                    END;
                  END;
                  IF (ArrearCashPayAmteCess <> 0) AND IsArrear THEN BEGIN
                    IF ServiceTaxEntryDtls."Service Tax eCess Amount" > ArrearCashPayAmteCess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := ArrearCashPayAmteCess;
                      ArrearCashPayAmteCess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount eCess" := ServiceTaxEntryDtls."Service Tax eCess Amount";
                      ArrearCashPayAmteCess := ArrearCashPayAmteCess - ServiceTaxEntryDtls."Service Tax eCess Amount";
                    END;
                  END;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
              END;
            UNTIL ServiceTaxEntryDtls.NEXT = 0;

          // For the Payment Liability - SHE Cess Closing of Sale or charge entries while payment SHE CESS
          FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
            ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::SHECess);
          IF ServiceTaxEntryDtls.FIND('-') THEN
            REPEAT
              IF AmtSHECess <> 0 THEN BEGIN
                IF ABS(ServiceTaxEntryDtls."Service Tax SHE Cess Amount") > AmtSHECess THEN BEGIN
                  InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,0,0,AmtSHECess,0);
                  AmtSHECess := 0;
                END ELSE BEGIN
                  InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,
                    0,0,ABS(ServiceTaxEntryDtls."Service Tax SHE Cess Amount"),0);
                  AmtSHECess -= ABS(ServiceTaxEntryDtls."Service Tax SHE Cess Amount");
                END;
              END;
              IF ServiceTaxPaymentBuffer."Payment Liability (SHECess)" <> 0 THEN BEGIN
                IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
                IF NOT ReverseChargeTrans THEN BEGIN
                  FillSTaxPostingBuffer(
                    0,ServiceTaxEntryDtls."GL Account",TRUE,-ServiceTaxEntryDtls."Service Tax SHE Cess Amount",
                    ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Closed (SHECess)" := TRUE;
                  TempServiceTaxEntryDtls."Mark Record" := TRUE;
                  TempServiceTaxEntryDtls."Payment Doc. No. (SHECess)" := DocNo2;
                  TempServiceTaxEntryDtls."Payment Doc. Date (SHECess)" := PostingDate2;
                  IF (CashPayAmtSHECess <> 0) AND (NOT IsArrear) THEN BEGIN
                    IF -ServiceTaxEntryDtls."Service Tax SHE Cess Amount" > CashPayAmtSHECess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := -CashPayAmtSHECess;
                      CashPayAmtSHECess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                      CashPayAmtSHECess := CashPayAmtSHECess - -ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                    END;
                  END;
                  IF (ArrearCashPayAmtSHECess <> 0) AND IsArrear THEN BEGIN
                    IF -ServiceTaxEntryDtls."Service Tax SHE Cess Amount" > ArrearCashPayAmtSHECess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := -ArrearCashPayAmtSHECess;
                      ArrearCashPayAmtSHECess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                      ArrearCashPayAmtSHECess := ArrearCashPayAmtSHECess - -ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                    END;
                  END;
                  TempServiceTaxEntryDtls.MODIFY;
                END ELSE BEGIN
                  FillSTaxPostingBuffer(
                    0,ServiceTaxEntryDtls."GL Account",TRUE,ServiceTaxEntryDtls."Service Tax SHE Cess Amount",
                    ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Mark Record" := TRUE;
                  TempServiceTaxEntryDtls."Rev.Ch. Pmt. Doc. No.(SHECess)" := DocNo2;
                  IF (CashPayAmtSHECess <> 0) AND (NOT IsArrear) THEN BEGIN
                    IF ServiceTaxEntryDtls."Service Tax SHE Cess Amount" > CashPayAmtSHECess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := CashPayAmtSHECess;
                      CashPayAmtSHECess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                      CashPayAmtSHECess := CashPayAmtSHECess - ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                    END;
                  END;
                  IF (ArrearCashPayAmtSHECess <> 0) AND IsArrear THEN BEGIN
                    IF ServiceTaxEntryDtls."Service Tax SHE Cess Amount" > ArrearCashPayAmtSHECess THEN BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := ArrearCashPayAmtSHECess;
                      ArrearCashPayAmtSHECess := 0;
                    END
                    ELSE BEGIN
                      TempServiceTaxEntryDtls."Payment Amount SHE Cess" := ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                      ArrearCashPayAmtSHECess := ArrearCashPayAmtSHECess - ServiceTaxEntryDtls."Service Tax SHE Cess Amount";
                    END;
                  END;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
              END;
            UNTIL ServiceTaxEntryDtls.NEXT = 0;

          // Interest Payment
          IF ServiceTaxPaymentBuffer."Interest Amount" <> 0 THEN
            FillSTaxPostingBuffer(
              ServiceTaxPaymentBuffer."Account Type"::"G/L Account",ServiceTaxPaymentBuffer."Interest Account No.",
              TRUE,ServiceTaxPaymentBuffer."Interest Amount",ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          // Other Amount Payment
          IF ServiceTaxPaymentBuffer."Other Amount" <> 0 THEN
            FillSTaxPostingBuffer(
              ServiceTaxPaymentBuffer."Account Type"::"G/L Account",ServiceTaxPaymentBuffer."Other Account No.",TRUE,
              ServiceTaxPaymentBuffer."Other Amount",ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          // Penalty Paid Payment
          IF ServiceTaxPaymentBuffer."Penalty Paid" <> 0 THEN
            FillSTaxPostingBuffer(
              ServiceTaxPaymentBuffer."Account Type"::"G/L Account",ServiceTaxPaymentBuffer."Penalty Account No.",
              TRUE,ServiceTaxPaymentBuffer."Penalty Paid",ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          // Section 73 A Amount Payment
          IF ServiceTaxPaymentBuffer."Section 73 A Amount" <> 0 THEN
            FillSTaxPostingBuffer(
              ServiceTaxPaymentBuffer."Account Type"::"G/L Account",ServiceTaxPaymentBuffer."Section 73 A Account No.",
              TRUE,ServiceTaxPaymentBuffer."Section 73 A Amount",ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          // Other Amt. Arrears Payment
          IF (ServiceTaxPaymentBuffer."Other Amt. Arrear" + ServiceTaxPaymentBuffer."Other Amt. eCess Arrear" +
              ServiceTaxPaymentBuffer."Other Amt. SHECess Arrear" + ServiceTaxPaymentBuffer."Other Amt. Arrear (SBC)" +
              ServiceTaxPaymentBuffer."Other Amt. Arrear (KKC)" <> 0)
          THEN
            FillSTaxPostingBuffer(
              ServiceTaxPaymentBuffer."Account Type"::"G/L Account",ServiceTaxPaymentBuffer."Other Amt. Arrear Account No",
              TRUE,(ServiceTaxPaymentBuffer."Other Amt. Arrear" + ServiceTaxPaymentBuffer."Other Amt. eCess Arrear" +
                    ServiceTaxPaymentBuffer."Other Amt. SHECess Arrear" + ServiceTaxPaymentBuffer."Other Amt. Arrear (SBC)" +
                    ServiceTaxPaymentBuffer."Other Amt. Arrear (KKC)"),ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',
              ServiceTaxPaymentBuffer."Dimension Set ID");
        UNTIL ServiceTaxPaymentBuffer.NEXT = 0;

      // Service Tax Credit Used
      ServiceTaxPaymentBuffer.SETRANGE("Service Tax Group Code",'');
      IF ServiceTaxPaymentBuffer.FINDSET AND ((ServiceTaxPaymentBuffer."Credit Availed" <> 0) OR
                                              (ServiceTaxPaymentBuffer."Credit Availed (eCess)" <> 0) OR
                                              (ServiceTaxPaymentBuffer."Credit Availed (SHECess)" <> 0))
      THEN
        PostRegEntries(DocNo2);

      ServiceTaxPaymentBuffer.SETFILTER("Service Tax Group Code",'<>%1','');
      IF ServiceTaxPaymentBuffer.FINDSET THEN
        REPEAT
          IF ServiceTaxPaymentBuffer."Credit Availed" <> 0 THEN BEGIN
            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::ServiceTax,FALSE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN BEGIN
              REPEAT
                IF ServiceTaxEntryDtls."Remaining Credit" >= ServiceTaxPaymentBuffer."Credit Availed" THEN
                  AppliedAmount := ServiceTaxPaymentBuffer."Credit Availed"
                ELSE
                  AppliedAmount := ServiceTaxEntryDtls."Remaining Credit";
                ServiceTaxPaymentBuffer."Credit Availed" -= AppliedAmount;
                FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",FALSE,AppliedAmount,
                  ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");

                // Filling The Temp Buffer Availed
                TempServiceTaxBuffer.RESET;
                TempServiceTaxBuffer.GET(ServiceTaxPaymentBuffer."Document No.",ServiceTaxEntryDtls."Service Tax Group Code");
                TempServiceTaxBuffer."STG Credit Availed" += AppliedAmount;
                TempServiceTaxBuffer.MODIFY;
                TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                TempServiceTaxEntryDtls."Remaining Credit" -= AppliedAmount;
                IF TempServiceTaxEntryDtls."Remaining Credit" = 0 THEN BEGIN
                  TempServiceTaxEntryDtls.Closed := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
                END;
                TempServiceTaxEntryDtls.MODIFY;
              UNTIL ((ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Credit Availed" = 0));
              ServiceTaxPaymentBuffer.MODIFY;
            END;
          END;

          IF ServiceTaxPaymentBuffer."Credit Availed (KKC)" <> 0 THEN BEGIN
            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::KKCess,FALSE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN BEGIN
              REPEAT
                CalculateAppliedKKCessPaymentAmounts(ServiceTaxPaymentBuffer,ServiceTaxEntryDtls,TempServiceTaxBuffer,TempServiceTaxEntryDtls,
                                                     PostingDate2,DocNo2,AppliedKKCessAmt);
              UNTIL ((ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Credit Availed (KKC)" = 0));
              ServiceTaxPaymentBuffer.MODIFY;
            END;
          END;

          // Service Tax Credit Used--eCess
          IF ServiceTaxPaymentBuffer."Credit Availed (eCess)" <> 0 THEN BEGIN
            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::eCess,FALSE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                AppliedAmounteCess := ServiceTaxEntryDtls."Remaining Credit (eCess)";
                IF AppliedAmounteCess >= ServiceTaxPaymentBuffer."Credit Availed (eCess)" THEN BEGIN
                  AppliedAmounteCess := ServiceTaxPaymentBuffer."Credit Availed (eCess)";
                  ServiceTaxPaymentBuffer."Credit Availed (eCess)" := 0;
                END ELSE
                  ServiceTaxPaymentBuffer."Credit Availed (eCess)" -= AppliedAmounteCess;
                FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",FALSE,AppliedAmounteCess,
                  ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");

                // Filling The Temp Buffer Availed
                TempServiceTaxBuffer.RESET;
                TempServiceTaxBuffer.GET(ServiceTaxPaymentBuffer."Document No.",ServiceTaxEntryDtls."Service Tax Group Code");
                TempServiceTaxBuffer."STG Credit Availed (eCess)" += AppliedAmounteCess;
                TempServiceTaxBuffer.MODIFY;
                TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                TempServiceTaxEntryDtls."Remaining Credit (eCess)" -= AppliedAmounteCess;
                IF TempServiceTaxEntryDtls."Remaining Credit (eCess)" = 0 THEN BEGIN
                  TempServiceTaxEntryDtls."Closed (eCess)" := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No. (eCess)" := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date (eCess)" := PostingDate2;
                END;
                TempServiceTaxEntryDtls.MODIFY;
              UNTIL ((ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Credit Availed (eCess)" = 0));
              ServiceTaxPaymentBuffer.MODIFY;
          END;

          // Service Tax Credit Used - SHE Cess
          IF (ServiceTaxPaymentBuffer."Credit Availed (SHECess)" <> 0) THEN BEGIN
            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::SHECess,FALSE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                AppliedAmountSHECess := ServiceTaxEntryDtls."Remaining Credit (SHECess)";
                IF AppliedAmountSHECess >= ServiceTaxPaymentBuffer."Credit Availed (SHECess)" THEN BEGIN
                  AppliedAmountSHECess := ServiceTaxPaymentBuffer."Credit Availed (SHECess)";
                  ServiceTaxPaymentBuffer."Credit Availed (SHECess)" := 0;
                END ELSE
                  ServiceTaxPaymentBuffer."Credit Availed (SHECess)" -= AppliedAmountSHECess;
                FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",FALSE,AppliedAmountSHECess,
                  ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");

                // Filling The Temp Buffer Availed
                TempServiceTaxBuffer.RESET;
                  TempServiceTaxBuffer.GET(ServiceTaxPaymentBuffer."Document No.",ServiceTaxEntryDtls."Service Tax Group Code");
                TempServiceTaxBuffer."STG Credit Availed (SHECess)" += AppliedAmountSHECess;
                TempServiceTaxBuffer.MODIFY;
                TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                TempServiceTaxEntryDtls."Remaining Credit (SHECess)" -= AppliedAmountSHECess;
                IF TempServiceTaxEntryDtls."Remaining Credit (SHECess)" = 0 THEN BEGIN
                  TempServiceTaxEntryDtls."Closed (SHECess)" := TRUE;
                  TempServiceTaxEntryDtls."Payment Doc. No. (SHECess)" := DocNo2;
                  TempServiceTaxEntryDtls."Payment Doc. Date (SHECess)" := PostingDate2;
                END;
                TempServiceTaxEntryDtls.MODIFY;
              UNTIL ((ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Credit Availed (SHECess)" = 0));
              ServiceTaxPaymentBuffer.MODIFY;
          END;
        UNTIL ServiceTaxPaymentBuffer.NEXT = 0;

      ServiceTaxPaymentBuffer.SETRANGE("Service Tax Group Code");
      IF ServiceTaxPaymentBuffer.FINDSET THEN
        REPEAT
          // For the Payment
          IF ServiceTaxPaymentBuffer."Payment Amount" <> 0 THEN
            FillSTaxPostingBuffer(ServiceTaxPaymentBuffer."Account Type",ServiceTaxPaymentBuffer."Account No.",FALSE,
              ServiceTaxPaymentBuffer."Payment Amount",ServiceTaxPaymentBuffer."Line No.",ServiceTaxPaymentBuffer."Cheque No.",FALSE,
              '',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          //For the Payment SBC
          IF ServiceTaxPaymentBuffer."Payment Amount (SBC)" <> 0 THEN
            FillSTaxPostingBuffer(ServiceTaxPaymentBuffer."Account Type",ServiceTaxPaymentBuffer."Account No.",FALSE,
              ServiceTaxPaymentBuffer."Payment Amount (SBC)",ServiceTaxPaymentBuffer."Line No.",ServiceTaxPaymentBuffer."Cheque No.",FALSE,
              '',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          // For the Payment KKC
          IF ServiceTaxPaymentBuffer."Payment Amount (KKC)" <> 0 THEN
            FillSTaxPostingBuffer(ServiceTaxPaymentBuffer."Account Type",ServiceTaxPaymentBuffer."Account No.",FALSE,
              ServiceTaxPaymentBuffer."Payment Amount (KKC)",ServiceTaxPaymentBuffer."Line No.",ServiceTaxPaymentBuffer."Cheque No.",FALSE,
              '',
              ServiceTaxPaymentBuffer."Dimension Set ID");

          // For the Payment - eCess
          IF ServiceTaxPaymentBuffer."Payment Amount (eCess)" <> 0 THEN
            FillSTaxPostingBuffer(ServiceTaxPaymentBuffer."Account Type",ServiceTaxPaymentBuffer."Account No.",FALSE,
              ServiceTaxPaymentBuffer."Payment Amount (eCess)",ServiceTaxPaymentBuffer."Line No.",
              ServiceTaxPaymentBuffer."Cheque No.",FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");

          // For the Payment - SHE Cess
          IF ServiceTaxPaymentBuffer."Payment Amount (SHECess)" <> 0 THEN
            FillSTaxPostingBuffer(
              ServiceTaxPaymentBuffer."Account Type",ServiceTaxPaymentBuffer."Account No.",FALSE,
              ServiceTaxPaymentBuffer."Payment Amount (SHECess)",ServiceTaxPaymentBuffer."Line No.",
              ServiceTaxPaymentBuffer."Cheque No.",FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
        UNTIL ServiceTaxPaymentBuffer.NEXT = 0;

      IF ReverseChargeTrans THEN BEGIN
        ServiceTaxPaymentBuffer.RESET;
        ServiceTaxPaymentBuffer.SETRANGE("Document No.",DocNo2);
        IF ServiceTaxPaymentBuffer.FIND('-') THEN
          REPEAT
            ServiceTaxSetup.FindOnDate(ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate);
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::ServiceTax);
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                IF ServiceTaxEntryDtls."Rev. Chrg. Remaining Credit" >= ServiceTaxPaymentBuffer."Payment Amount" THEN
                  AppliedAmount := ServiceTaxPaymentBuffer."Payment Amount"
                ELSE
                AppliedAmount := ServiceTaxEntryDtls."Rev. Chrg. Remaining Credit";
                ServiceTaxPaymentBuffer."Payment Amount" -= AppliedAmount;

                ServiceTaxEntryDtls."GL Account" :=
                  ServiceTaxSetup.GetPaymentAccNo(ServiceTaxEntryDtls."Service Type (Rev. Chrg.)");
                FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",TRUE,AppliedAmount,
                  ServiceTaxPaymentBuffer."Line No.",'',TRUE,ServiceTaxSetup.GetRecInterimAccNo,ServiceTaxPaymentBuffer."Dimension Set ID");
                IF ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" = ServiceTaxEntryDtls."Service Type (Rev. Chrg.)"::Outward THEN BEGIN
                  ServiceTaxEntryDtls."Remaining Credit" := 0;
                  ServiceTaxEntryDtls.Closed := TRUE;
                END ELSE
                  ServiceTaxEntryDtls."Remaining Credit" := ServiceTaxEntryDtls."Rev. Chrg. Remaining Credit";

                ServiceTaxEntryDtls."Rev. Chrg. Remaining Credit" := 0;
                ServiceTaxEntryDtls."Closed Reverse Charge" := TRUE;
                ServiceTaxEntryDtls.MODIFY;
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Payment Amount" = 0);

            //SBC
            ServiceTaxSetup.FindOnDate(ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate);
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::SBC);
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                CalculateCreditAmountSBC(ServiceTaxPaymentBuffer,ServiceTaxEntryDtls,AppliedSBCAmount);
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Payment Amount (SBC)" = 0);

            //KKC
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::KKCess);
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                CalculateCreditAmountKKC(ServiceTaxPaymentBuffer,ServiceTaxEntryDtls,AppliedKKCessAmt,ServiceTaxSetup);
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Payment Amount (KKC)" = 0);

            // eCess
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,CreditComponent::eCess);
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                IF ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (eCESS)" >= ServiceTaxPaymentBuffer."Payment Amount (eCess)" THEN
                  AppliedAmounteCess := ServiceTaxPaymentBuffer."Payment Amount (eCess)"
                ELSE
                AppliedAmounteCess := ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (eCESS)";
                ServiceTaxPaymentBuffer."Payment Amount (eCess)" -= AppliedAmounteCess;

                ServiceTaxEntryDtls."GL Account" :=
                  ServiceTaxSetup.GetPaymentAccNo(ServiceTaxEntryDtls."Service Type (Rev. Chrg.)");
                FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",TRUE,AppliedAmounteCess,
                  ServiceTaxPaymentBuffer."Line No.",'',TRUE,ServiceTaxSetup.GetRecInterimAccNo,ServiceTaxPaymentBuffer."Dimension Set ID");
                IF ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" = ServiceTaxEntryDtls."Service Type (Rev. Chrg.)"::Outward THEN BEGIN
                  ServiceTaxEntryDtls."Remaining Credit (eCess)" := 0;
                  ServiceTaxEntryDtls."Closed (eCess)" := TRUE;
                END ELSE
                  ServiceTaxEntryDtls."Remaining Credit (eCess)" := ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (eCESS)";

                ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (eCESS)" := 0;
                ServiceTaxEntryDtls."Closed Reverse Charge (eCESS)" := TRUE;
                ServiceTaxEntryDtls.MODIFY;
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Payment Amount (eCess)" = 0);

            // SHE Cess
            FilterSTEntryDtlPmtLiability(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
              ServiceTaxPaymentBuffer."Service Tax Group Code",ReverseChargeTrans,DateFilter2,
              CreditComponent::SHECess);
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                IF ServiceTaxEntryDtls."Rev. Chrg. Rem. Cr. (SHECess)" >= ServiceTaxPaymentBuffer."Payment Amount (SHECess)" THEN
                  AppliedAmountSHECess := ServiceTaxPaymentBuffer."Payment Amount (SHECess)"
                ELSE
                AppliedAmountSHECess := ServiceTaxEntryDtls."Rev. Chrg. Rem. Cr. (SHECess)";
                ServiceTaxPaymentBuffer."Payment Amount (SHECess)" -= AppliedAmountSHECess;

                ServiceTaxEntryDtls."GL Account" :=
                  ServiceTaxSetup.GetPaymentAccNo(ServiceTaxEntryDtls."Service Type (Rev. Chrg.)");
                FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."GL Account",TRUE,AppliedAmountSHECess,
                  ServiceTaxPaymentBuffer."Line No.",'',TRUE,ServiceTaxSetup.GetRecInterimAccNo,ServiceTaxPaymentBuffer."Dimension Set ID");
                IF ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" = ServiceTaxEntryDtls."Service Type (Rev. Chrg.)"::Outward THEN BEGIN
                  ServiceTaxEntryDtls."Remaining Credit (SHECess)" := 0;
                  ServiceTaxEntryDtls."Closed (SHECess)" := TRUE;
                END ELSE
                  ServiceTaxEntryDtls."Remaining Credit (SHECess)" := ServiceTaxEntryDtls."Rev. Chrg. Rem. Cr. (SHECess)";

                ServiceTaxEntryDtls."Rev. Chrg. Rem. Cr. (SHECess)" := 0;
                ServiceTaxEntryDtls."Closed Rev. Charge (SHECess)" := TRUE;
                ServiceTaxEntryDtls.MODIFY;
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (ServiceTaxPaymentBuffer."Payment Amount (SHECess)" = 0);
          UNTIL ServiceTaxPaymentBuffer.NEXT = 0;
      END;
      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Document No.",DocNo2);
      GenJnlLine.DELETEALL;
      // Inserting into Service Tax Payment Details
      TempServiceTaxBuffer.RESET;
      IF TempServiceTaxBuffer.FIND('-') THEN
        REPEAT
          InsertIntoPaymentdtls(MinDate,MaxDate,TempServiceTaxBuffer);
        UNTIL TempServiceTaxBuffer.NEXT = 0;
      STMonthlyPaymentDTlBuffer.RESET;
      STMonthlyPaymentDTlBuffer.SETRANGE("Document No.",DocNo2);
      IF STMonthlyPaymentDTlBuffer.FINDSET THEN
        REPEAT
          STMonthlyPaymentDetail.INIT;
          STMonthlyPaymentDetail.TRANSFERFIELDS(STMonthlyPaymentDTlBuffer);
          STMonthlyPaymentDetail."Posting Date" := PostingDate2;
          STMonthlyPaymentDetail.INSERT(TRUE);
        UNTIL STMonthlyPaymentDTlBuffer.NEXT = 0;
      PostServiceTaxBuffer(DocNo2,PostingDate2);
    END;

    LOCAL PROCEDURE FillSTaxPostingBuffer@1280009(AccType@1280000 : 'GL,Bank';AccNo@1280005 : Code[20];DebitEntry@1280001 : Boolean;Amount@1280002 : Decimal;LineNo@1280003 : Integer;ChqNo@1280004 : Code[20];ReverseCharge@1500000 : Boolean;BalAccNo@1500001 : Code[20];DimSetID@1500002 : Integer);
    BEGIN
      IF Amount = 0 THEN
        EXIT;
      STaxPostingBuffer[1].Type := AccType;
      IF AccType = AccType::Bank THEN
        STaxPostingBuffer[1]."Cheque No." := ChqNo;
      STaxPostingBuffer[1]."Account No." := AccNo;
      IF DebitEntry THEN
        STaxPostingBuffer[1].Amount := Amount
      ELSE
        STaxPostingBuffer[1].Amount := -Amount;
      STaxPostingBuffer[1]."System-Created Entry" := TRUE;
      STaxPostingBuffer[1]."Serv. Tax Reverse Charge" := ReverseCharge;
      STaxPostingBuffer[1]."Bal. Account No." := BalAccNo;
      STaxPostingBuffer[1]."Dimension Set ID" := DimSetID;
      UpdSTaxPostingBuffer(LineNo);
    END;

    LOCAL PROCEDURE UpdSTaxPostingBuffer@1280010(LineNo@1280000 : Integer);
    BEGIN
      STaxPostingBuffer[2] := STaxPostingBuffer[1];
      IF STaxPostingBuffer[2].FIND THEN BEGIN
        STaxPostingBuffer[2].Amount := STaxPostingBuffer[2].Amount + STaxPostingBuffer[1].Amount;
        STaxPostingBuffer[2].MODIFY;
      END ELSE
        STaxPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE PostServiceTaxBuffer@1280011(DocNo@1280000 : Code[20];PostingDate@1280001 : Date);
    VAR
      GenJnlLine2@1500001 : Record 81;
    BEGIN
      IF STaxPostingBuffer[1].FIND('+') THEN
        REPEAT
          GenJnlLine2.INIT;
          IF NOT STaxPostingBuffer[1]."Serv. Tax Reverse Charge" THEN BEGIN
            IF (STaxPostingBuffer[1].Type = 0) THEN
              GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account"
            ELSE BEGIN
              GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"Bank Account";
              GenJnlLine2."Cheque No." := STaxPostingBuffer[1]."Cheque No.";
              GenJnlLine2."Cheque Date" := PostingDate;
              GenJnlLine2."Bank Payment Type" := GenJnlLine2."Bank Payment Type"::"Manual Check";
              GenJnlLine2."Check Printed" := TRUE;
            END;
            GenJnlLine2."Account No." := STaxPostingBuffer[1]."Account No.";
            GenJnlLine2.Amount := STaxPostingBuffer[1].Amount;
            GenJnlLine2."Source Currency Amount" := STaxPostingBuffer[1].Amount;
          END ELSE BEGIN
            GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
            GenJnlLine2."Account No." := STaxPostingBuffer[1]."Account No.";
            GenJnlLine2.Amount := STaxPostingBuffer[1].Amount;
            GenJnlLine2."Source Currency Amount" := STaxPostingBuffer[1].Amount;
            GenJnlLine2."Bal. Account Type" := GenJnlLine2."Bal. Account Type"::"G/L Account";
            GenJnlLine2."Bal. Account No." := STaxPostingBuffer[1]."Bal. Account No.";
          END;
          GenJnlLine2."System-Created Entry" := TRUE;
          GenJnlLine2."Document No." := DocNo;
          GenJnlLine2."Posting Date" := PostingDate;
          GenJnlLine2.Description := Text011;
          GenJnlLine2."Source Code" := 'GENJNL';
          GenJnlLine2."Dimension Set ID" := STaxPostingBuffer[1]."Dimension Set ID";
          DimMgt.UpdateGlobalDimFromDimSetID(GenJnlLine2."Dimension Set ID",
            GenJnlLine2."Shortcut Dimension 1 Code",GenJnlLine2."Shortcut Dimension 2 Code");
          GenJnlPostLine.RUN(GenJnlLine2);
        UNTIL STaxPostingBuffer[1].NEXT(-1) = 0;
    END;

    LOCAL PROCEDURE CopyDocDimToTempDocDim@1280013(DocNo@1280000 : Code[20]);
    VAR
      ServiceTaxPaymentBuffer@1280001 : Record 16476;
      IsError@1280002 : Boolean;
      ErrText@1280003 : Text[250];
    BEGIN
      ServiceTaxPaymentBuffer.SETRANGE("Document No.",DocNo);
      IF ServiceTaxPaymentBuffer.FIND('-') THEN
        REPEAT
          CheckDimComb(ServiceTaxPaymentBuffer."Dimension Set ID",IsError,ErrText);
          IF IsError THEN
            ERROR(Text029,ServiceTaxPaymentBuffer."Service Tax Group Code",ErrText);
          CheckDimValuePosting(ServiceTaxPaymentBuffer."Document No.",ServiceTaxPaymentBuffer."Dimension Set ID");
        UNTIL ServiceTaxPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(DimSetID@1000 : Integer;VAR IsError@1280001 : Boolean;VAR ErrText@1280002 : Text[250]) : Text[250];
    BEGIN
      IF NOT DimMgt.CheckDimIDComb(DimSetID) THEN BEGIN
        IsError := TRUE;
        ErrText := DimMgt.GetDimCombErr;
      END ELSE
        IsError := FALSE;
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(DocNo@1280000 : Code[20];DimSetID@1000 : Integer);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      NumberArr[1] := DocNo;
      IF NOT DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,DimSetID) THEN
        ERROR(Text031,DimMgt.GetDimValuePostingErr);
    END;

    LOCAL PROCEDURE InsertIntoPaymentdtls@1280007(FromDate@1280001 : Date;ToDate@1280002 : Date;ServiceTaxBuffer@1280000 : Record 16476);
    VAR
      SvcTaxPaymentDtls@1280003 : Record 16477;
      EntryNo@1500000 : Integer;
    BEGIN
      EntryNo := 0;

      SvcTaxPaymentDtls.LOCKTABLE;
      IF SvcTaxPaymentDtls.FINDLAST THEN
        EntryNo := SvcTaxPaymentDtls."Entry No." + 1
      ELSE
        EntryNo := 1;

      SvcTaxPaymentDtls.INIT;
      SvcTaxPaymentDtls."Entry No." := EntryNo;
      SvcTaxPaymentDtls."Document No." := ServiceTaxBuffer."Document No.";
      SvcTaxPaymentDtls."Posting Date" := ServiceTaxBuffer."Posting Date";
      SvcTaxPaymentDtls."Service Tax Group Code" := ServiceTaxBuffer."Service Tax Group Code";
      SvcTaxPaymentDtls."Service Tax Amount" := ServiceTaxBuffer."Payment Liability";
      SvcTaxPaymentDtls."Credit availed" := ServiceTaxBuffer."Credit Availed";
      SvcTaxPaymentDtls."STG Credit Availed" := ServiceTaxBuffer."STG Credit Availed";
      SvcTaxPaymentDtls."Payment Amount" := ServiceTaxBuffer."Payment Amount";
      SvcTaxPaymentDtls."KK Cess Amount" := ServiceTaxBuffer."Payment Liability (KKC)";
      SvcTaxPaymentDtls."Credit Availed (KKC)" := ServiceTaxBuffer."Credit Availed (KKC)";
      SvcTaxPaymentDtls."STG Credit Availed (KKC)" := ServiceTaxBuffer."STG Credit Availed (KKC)";
      SvcTaxPaymentDtls."Payment Amount (KKC)" := ServiceTaxBuffer."Payment Amount (KKC)";
      SvcTaxPaymentDtls."Pay. Liability Arrear (KKC)" := ServiceTaxBuffer."Pay. Liability Arrear (KKC)";
      SvcTaxPaymentDtls."Pay. Amount Arrear (KKC)" := ServiceTaxBuffer."Pay. Amount Arrear (KKC)";
      SvcTaxPaymentDtls."Other Amt. Arrear (KKC)" := ServiceTaxBuffer."Other Amt. Arrear (KKC)";
      SvcTaxPaymentDtls."Payment Amount (SBC)" := ServiceTaxBuffer."Payment Amount (SBC)";
      SvcTaxPaymentDtls."Service Tax Amount (SBC)" := ServiceTaxBuffer."Payment Liability (SBC)";
      SvcTaxPaymentDtls."Pay. Liability Arrear (SBC)" := ServiceTaxBuffer."Pay. Liability Arrear (SBC)";
      SvcTaxPaymentDtls."Pay. Amount Arrear (SBC)" := ServiceTaxBuffer."Pay. Amount Arrear (SBC)";
      SvcTaxPaymentDtls."Other Amt. Arrear (SBC)" := ServiceTaxBuffer."Other Amt. Arrear (SBC)";
      SvcTaxPaymentDtls."Service Tax Amount (eCess)" := ServiceTaxBuffer."Payment Liability (eCess)";
      SvcTaxPaymentDtls."Credit availed (eCess)" := ServiceTaxBuffer."Credit Availed (eCess)";
      SvcTaxPaymentDtls."STG Credit Availed (eCess)" := ServiceTaxBuffer."STG Credit Availed (eCess)";
      SvcTaxPaymentDtls."Payment Amount (eCess)" := ServiceTaxBuffer."Payment Amount (eCess)";
      SvcTaxPaymentDtls."Service Tax Amount (SHECess)" := ServiceTaxBuffer."Payment Liability (SHECess)";
      SvcTaxPaymentDtls."Credit availed (SHECess)" := ServiceTaxBuffer."Credit Availed (SHECess)";
      SvcTaxPaymentDtls."STG Credit Availed (SHECess)" := ServiceTaxBuffer."STG Credit Availed (SHECess)";
      SvcTaxPaymentDtls."Payment Amount (SHECess)" := ServiceTaxBuffer."Payment Amount (SHECess)";
      SvcTaxPaymentDtls.Interest := ServiceTaxBuffer."Interest Amount";
      SvcTaxPaymentDtls."Other Amount" := ServiceTaxBuffer."Other Amount";
      SvcTaxPaymentDtls."From Date" := FromDate;
      SvcTaxPaymentDtls."To Date" := ToDate;
      SvcTaxPaymentDtls."Service Tax Registration No." := ServiceTaxBuffer."Service Tax Registration No.";
      SvcTaxPaymentDtls."Pay. Liability Arrear" := ServiceTaxBuffer."Pay. Liability Arrear";
      SvcTaxPaymentDtls."Pay. Liability(eCess) Arrear" := ServiceTaxBuffer."Pay. Liability(eCess) Arrear";
      SvcTaxPaymentDtls."Pay. Liability(SHECess) Arrear" := ServiceTaxBuffer."Pay. Liability(SHECess) Arrear";
      SvcTaxPaymentDtls."Pay. Amount Arrear" := ServiceTaxBuffer."Pay. Amount Arrear";
      SvcTaxPaymentDtls."Pay. Amount (eCess) Arrear" := ServiceTaxBuffer."Pay. Amount Arrear";
      SvcTaxPaymentDtls."Pay. Amount (SHECess) Arrear" := ServiceTaxBuffer."Pay. Amount (SHECess) Arrear";
      SvcTaxPaymentDtls."Penalty Paid" := ServiceTaxBuffer."Penalty Paid";
      SvcTaxPaymentDtls."Section 73 A Amount" := ServiceTaxBuffer."Section 73 A Amount";
      SvcTaxPaymentDtls."Other Amt. Arrear" := ServiceTaxBuffer."Other Amt. Arrear";
      SvcTaxPaymentDtls."Other Amt. eCess Arrear" := ServiceTaxBuffer."Other Amt. eCess Arrear";
      SvcTaxPaymentDtls."Other Amt. SHECess Arrear" := ServiceTaxBuffer."Other Amt. SHECess Arrear";
      SvcTaxPaymentDtls.INSERT;
    END;

    PROCEDURE SetECCNo@1500001("ECCNo."@1500000 : Code[20]);
    BEGIN
      ECCNo := "ECCNo.";
    END;

    PROCEDURE UpdServiceTaxAvailCrEntries@1500005(DocNo2@1280003 : Code[20];PostingDate2@1280002 : Date;DateFilter2@1280000 : Text[30];GenJnlLine@1500001 : Record 81);
    VAR
      ServiceTaxPaymentBuffer@1500007 : Record 16476;
      ServiceTaxEntryDtls@1500006 : Record 16474;
      ServiceTaxEntryDtls2@1500009 : Record 16474;
      TempServiceTaxEntryDtls@1500005 : Record 16474;
      STReverseChargeSetup@1500012 : Record 16461;
      MaxDate@1500004 : Date;
      AppliedAmount@1500003 : Decimal;
      AppliedAmountKKCess@1500000 : Decimal;
      AppliedAmounteCess@1500002 : Decimal;
      AppliedAmountSHECess@1500010 : Decimal;
      ExciseCenvatClaim@1500011 : Record 16584;
    BEGIN
      WITH GenJnlLine DO BEGIN
        AppliedAmount := 0;
        AppliedAmounteCess := 0;

        ExciseCenvatClaim.RESET;
        ExciseCenvatClaim.SETRANGE("Journal Template Name","Journal Template Name");
        ExciseCenvatClaim.SETRANGE("Journal Batch Name","Journal Batch Name");
        ExciseCenvatClaim.SETRANGE("Line No.","Line No.");
        IF ExciseCenvatClaim.FINDFIRST THEN;

        IF ("Service Tax Registration No." = '') OR
           ((ExciseCenvatClaim."ST BED Amount" + ExciseCenvatClaim."ST AED(GSI) Amount" + ExciseCenvatClaim."ST AED(TTA) Amount" +
             ExciseCenvatClaim."ST SED Amount" + ExciseCenvatClaim."ST SAED Amount" + ExciseCenvatClaim."ST NCCD Amount" +
             ExciseCenvatClaim."ST ADET Amount" + ExciseCenvatClaim."ST ADE Amount" = 0) AND
            (ExciseCenvatClaim."ST eCESS Amount" + ExciseCenvatClaim."ST SHECess Amount" = 0))
        THEN
          EXIT;
        CopyDocDimToTempDocDim(DocNo2);
        ServiceTaxEntryDtls.RESET;
        ServiceTaxEntryDtls.SETFILTER("Posting Date",DateFilter2);
        MaxDate := ServiceTaxEntryDtls.GETRANGEMAX("Posting Date");
        ServiceTaxPaymentBuffer.RESET;
        IF SalesDocumentNo <> '' THEN
          ServiceTaxPaymentBuffer.SETRANGE("Document No.",SalesDocumentNo)
        ELSE
          ServiceTaxPaymentBuffer.SETRANGE("Document No.",DocNo2);
        IF (ServiceTaxPaymentBuffer.FINDSET) AND (NOT TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup)) THEN
          REPEAT
            IF ServiceTaxPaymentBuffer."Credit Available" < ServiceTaxPaymentBuffer."Credit Availed" THEN
              ERROR(Text16501,ServiceTaxPaymentBuffer."Service Tax Group Code");
            IF ServiceTaxPaymentBuffer."Credit Available (KKC)" < ServiceTaxPaymentBuffer."Credit Availed (KKC)" THEN
              ERROR(Text16555,ServiceTaxPaymentBuffer."Service Tax Group Code");
            IF ServiceTaxPaymentBuffer."Credit Available (eCess)" < ServiceTaxPaymentBuffer."Credit Availed (eCess)" THEN
              ERROR(Text16502,ServiceTaxPaymentBuffer."Service Tax Group Code");
            IF ServiceTaxPaymentBuffer."Credit Available (SHECess)" < ServiceTaxPaymentBuffer."Credit Availed (SHECess)" THEN
              ERROR(Text16525,ServiceTaxPaymentBuffer."Service Tax Group Code");

            ServiceTaxEntryDtls2.RESET;
            ServiceTaxEntryDtls2.SETCURRENTKEY(Type,Closed,"Closed (eCess)","Service Tax Registration No.","Service Tax Group Code",
              "Posting Date","Location E.C.C. No.","Service Tax as Excise");
            ServiceTaxEntryDtls2.SETRANGE(Type,ServiceTaxEntryDtls2.Type::Purchase);
            ServiceTaxEntryDtls2.SETRANGE(Closed,FALSE);
            ServiceTaxEntryDtls2.SETRANGE("Service Tax Registration No.","Service Tax Registration No.");
            ServiceTaxEntryDtls2.SETRANGE("Service Tax Group Code",ServiceTaxPaymentBuffer."Service Tax Group Code");
            ServiceTaxEntryDtls2.SETRANGE("Posting Date",0D,MaxDate);
            ServiceTaxEntryDtls2.SETRANGE("Location E.C.C. No.","E.C.C. No.");
            ServiceTaxEntryDtls2.SETRANGE("Service Tax as Excise",TRUE);
            ServiceTaxEntryDtls2.CALCSUMS("Remaining Credit","Remaining Credit (eCess)","Remaining Credit (KK Cess)");
            IF ServiceTaxPaymentBuffer."Credit Available" <> ServiceTaxEntryDtls2."Remaining Credit" THEN
              ERROR(Text16504,"Service Tax Registration No.");
            ServiceTaxEntryDtls2.SETRANGE(Closed);
            ServiceTaxEntryDtls2.SETRANGE("Closed (eCess)",FALSE);
            ServiceTaxEntryDtls2.CALCSUMS("Remaining Credit","Remaining Credit (eCess)");
            IF ServiceTaxPaymentBuffer."Credit Available (eCess)" <> ServiceTaxEntryDtls2."Remaining Credit (eCess)" THEN
              ERROR(Text16504,"Service Tax Registration No.");

            ServiceTaxEntryDtls2.SETRANGE("Closed (eCess)");
            ServiceTaxEntryDtls2.SETRANGE("Closed (SHECess)",FALSE);
            ServiceTaxEntryDtls2.CALCSUMS("Remaining Credit","Remaining Credit (SHECess)");
            IF ServiceTaxPaymentBuffer."Credit Available (SHECess)" <> ServiceTaxEntryDtls2."Remaining Credit (SHECess)" THEN
              ERROR(Text16504,"Service Tax Registration No.");

            AppliedAmount := ServiceTaxPaymentBuffer."Credit Availed";
            AppliedAmountKKCess := ServiceTaxPaymentBuffer."Credit Availed (KKC)";
            AppliedAmounteCess := ServiceTaxPaymentBuffer."Credit Availed (eCess)";
            AppliedAmountSHECess := ServiceTaxPaymentBuffer."Credit Availed (SHECess)";
            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
               ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::ServiceTax,TRUE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                IF AppliedAmount >= ServiceTaxEntryDtls."Remaining Credit" THEN BEGIN
                  AppliedAmount -= ServiceTaxEntryDtls."Remaining Credit";
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Service Tax as Excise" := TRUE;
                  TempServiceTaxEntryDtls."Applied Amount" += ServiceTaxEntryDtls."Remaining Credit";
                  InsertSTasExciseUtilisation(TempServiceTaxEntryDtls,GenJnlLine,ServiceTaxEntryDtls."Remaining Credit",0,0);
                  TempServiceTaxEntryDtls."Remaining Credit" := 0;
                  TempServiceTaxEntryDtls.MODIFY;
                END ELSE BEGIN
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Service Tax as Excise" := TRUE;
                  TempServiceTaxEntryDtls."Remaining Credit" -= AppliedAmount;
                  TempServiceTaxEntryDtls."Applied Amount" += AppliedAmount;
                  InsertSTasExciseUtilisation(TempServiceTaxEntryDtls,GenJnlLine,AppliedAmount,0,0);
                  AppliedAmount := 0;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
                IF TempServiceTaxEntryDtls."Remaining Credit" = 0 THEN BEGIN
                  TempServiceTaxEntryDtls.Closed := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (AppliedAmount = 0);
            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
               ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::KKCess,TRUE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                CloseEntriesKKCess(ServiceTaxEntryDtls,TempServiceTaxEntryDtls,AppliedAmountKKCess,DocNo2,PostingDate2);
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (AppliedAmountKKCess = 0);

            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
               ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::eCess,TRUE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                IF AppliedAmounteCess >= ServiceTaxEntryDtls."Remaining Credit (eCess)" THEN BEGIN
                  AppliedAmounteCess -= ServiceTaxEntryDtls."Remaining Credit (eCess)";
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Service Tax as Excise" := TRUE;
                  TempServiceTaxEntryDtls."Applied eCess Amount" += ServiceTaxEntryDtls."Remaining Credit (eCess)";
                  InsertSTasExciseUtilisation(TempServiceTaxEntryDtls,GenJnlLine,0,ServiceTaxEntryDtls."Remaining Credit (eCess)",0);
                  TempServiceTaxEntryDtls."Remaining Credit (eCess)" := 0;
                  TempServiceTaxEntryDtls.MODIFY;
                END ELSE BEGIN
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Service Tax as Excise" := TRUE;
                  TempServiceTaxEntryDtls."Remaining Credit (eCess)" -= AppliedAmounteCess;
                  TempServiceTaxEntryDtls."Applied eCess Amount" += AppliedAmounteCess;
                  InsertSTasExciseUtilisation(TempServiceTaxEntryDtls,GenJnlLine,0,AppliedAmounteCess,0);
                  AppliedAmounteCess := 0;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
                IF TempServiceTaxEntryDtls."Remaining Credit (eCess)" = 0 THEN BEGIN
                  TempServiceTaxEntryDtls."Closed (eCess)" := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (AppliedAmounteCess = 0);

            FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer."Service Tax Registration No.",
               ServiceTaxPaymentBuffer."Service Tax Group Code",MaxDate,CreditComponent::SHECess,TRUE,'');
            // Sorting to close the negative entries first
            ServiceTaxEntryDtls.SETCURRENTKEY(Positive);
            IF ServiceTaxEntryDtls.FINDSET THEN
              REPEAT
                IF AppliedAmountSHECess >= ServiceTaxEntryDtls."Remaining Credit (SHECess)" THEN BEGIN
                  AppliedAmountSHECess -= ServiceTaxEntryDtls."Remaining Credit (SHECess)";
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Service Tax as Excise" := TRUE;
                  TempServiceTaxEntryDtls."Applied SHE Cess Amount" += ServiceTaxEntryDtls."Remaining Credit (SHECess)";
                  InsertSTasExciseUtilisation(TempServiceTaxEntryDtls,GenJnlLine,0,0,ServiceTaxEntryDtls."Remaining Credit (SHECess)");
                  TempServiceTaxEntryDtls."Remaining Credit (SHECess)" := 0;
                  TempServiceTaxEntryDtls.MODIFY;
                END ELSE BEGIN
                  TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
                  TempServiceTaxEntryDtls."Service Tax as Excise" := TRUE;
                  TempServiceTaxEntryDtls."Remaining Credit (SHECess)" -= AppliedAmountSHECess;
                  TempServiceTaxEntryDtls."Applied SHE Cess Amount" += AppliedAmountSHECess;
                  InsertSTasExciseUtilisation(TempServiceTaxEntryDtls,GenJnlLine,0,0,AppliedAmountSHECess);
                  AppliedAmountSHECess := 0;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
                IF TempServiceTaxEntryDtls."Remaining Credit (SHECess)" = 0 THEN BEGIN
                  TempServiceTaxEntryDtls."Closed (SHECess)" := TRUE;
                  TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
                  TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
                  TempServiceTaxEntryDtls.MODIFY;
                END;
              UNTIL (ServiceTaxEntryDtls.NEXT = 0) OR (AppliedAmountSHECess = 0);
        UNTIL ServiceTaxPaymentBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE CheckAppliedServiceTax@1500008(AppliedAmount@1500000 : Decimal;AppliedAmounteCess@1500001 : Decimal;AppliedAmountSHECess@1500004 : Decimal;DocumentNo@1500003 : Code[20]);
    VAR
      ServTaxPayBuffer@1500002 : Record 16476;
    BEGIN
      ServTaxPayBuffer.RESET;
      ServTaxPayBuffer.SETRANGE("Document No.",DocumentNo);
      ServTaxPayBuffer.CALCSUMS("Credit Availed","Credit Availed (eCess)","Credit Availed (SHECess)");
      IF (AppliedAmount <> ServTaxPayBuffer."Credit Availed") OR (AppliedAmounteCess <> ServTaxPayBuffer."Credit Availed (eCess)") OR
         (AppliedAmountSHECess <> ServTaxPayBuffer."Credit Availed (SHECess)")
      THEN
        ERROR(Text16500);
    END;

    LOCAL PROCEDURE CalculateCreditAmounts@1500000(VAR ServiceTaxEntryDtls@1500000 : Record 16474;VAR ServiceTaxBuffer@1500002 : Record 16476;STN2@1500001 : Code[20];MaxDate@1500003 : Date);
    BEGIN
      IF ServiceTaxBuffer."Service Tax Group Code" <> '' THEN BEGIN
        FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,STN2,
          ServiceTaxBuffer."Service Tax Group Code",MaxDate,CreditComponent::ServiceTax,SerTaxasExciseCredit,ECCNo);
        IF ServiceTaxEntryDtls.FINDSET THEN
          REPEAT
            ServiceTaxBuffer."Credit Available" += ServiceTaxEntryDtls."Remaining Credit";
          UNTIL ServiceTaxEntryDtls.NEXT = 0;

        FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,STN2,
          ServiceTaxBuffer."Service Tax Group Code",MaxDate,CreditComponent::eCess,SerTaxasExciseCredit,ECCNo);
        IF ServiceTaxEntryDtls.FINDSET THEN
          REPEAT
            ServiceTaxBuffer."Credit Available (eCess)" += ServiceTaxEntryDtls."Remaining Credit (eCess)";
          UNTIL ServiceTaxEntryDtls.NEXT = 0;

        FilterSTEntryDetailCrUsed(ServiceTaxEntryDtls,STN2,
          ServiceTaxBuffer."Service Tax Group Code",MaxDate,CreditComponent::SHECess,SerTaxasExciseCredit,ECCNo);
        IF ServiceTaxEntryDtls.FINDSET THEN
          REPEAT
            ServiceTaxBuffer."Credit Available (SHECess)" += ServiceTaxEntryDtls."Remaining Credit (SHECess)";
          UNTIL ServiceTaxEntryDtls.NEXT = 0;
        IF ServiceTaxEntryDtls.FINDSET THEN
          REPEAT
            ServiceTaxBuffer."Credit Available (KKC)" += ServiceTaxEntryDtls."Remaining Credit (KK Cess)";
          UNTIL ServiceTaxEntryDtls.NEXT = 0;

        ServiceTaxBuffer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE FilterSTEntryDtlPmtLiability@1500006(VAR ServiceTaxEntryDtls@1500000 : Record 16474;ServiceTaxRegistrationNoCode@1500005 : Code[20];ServiceTaxGroupCode@1500002 : Code[20];ReverseChargeTrans@1500001 : Boolean;DateFilter2@1500003 : Text[30];CreditComponentFilter@1500004 : Option);
    BEGIN
      ServiceTaxEntryDtls.RESET;
      ServiceTaxEntryDtls.SETCURRENTKEY(Type,"Service Tax Registration No.","Posting Date",Closed,"Closed (eCess)");
      ServiceTaxEntryDtls.SETRANGE("Service Tax Registration No.",ServiceTaxRegistrationNoCode);
      ServiceTaxEntryDtls.SETFILTER("Posting Date",DateFilter2);
      ServiceTaxEntryDtls.SETRANGE("Service Tax Group Code",ServiceTaxGroupCode);

      IF ReverseChargeTrans THEN BEGIN
        ServiceTaxEntryDtls.SETRANGE(Type,ServiceTaxEntryDtls.Type::Purchase);
        ServiceTaxEntryDtls.SETRANGE("Reverse Charge",TRUE);
        CASE CreditComponentFilter OF
          CreditComponent::ServiceTax:
            ServiceTaxEntryDtls.SETRANGE("Closed Reverse Charge",FALSE);
          CreditComponent::eCess:
            ServiceTaxEntryDtls.SETRANGE("Closed Reverse Charge (eCESS)",FALSE);
          CreditComponent::SHECess:
            ServiceTaxEntryDtls.SETRANGE("Closed Rev. Charge (SHECess)",FALSE);
          CreditComponent::SBC:
            ServiceTaxEntryDtls.SETRANGE("Closed Reversed (SBC)",FALSE);
          CreditComponent::KKCess:
            ServiceTaxEntryDtls.SETRANGE("Closed Reversed (KK Cess)",FALSE);
        END;
      END ELSE BEGIN
        ServiceTaxEntryDtls.SETFILTER(Type,'%1|%2',ServiceTaxEntryDtls.Type::Sale,ServiceTaxEntryDtls.Type::Charge);
        CASE CreditComponentFilter OF
          CreditComponent::ServiceTax:
            ServiceTaxEntryDtls.SETRANGE(Closed,FALSE);
          CreditComponent::eCess:
            ServiceTaxEntryDtls.SETRANGE("Closed (eCess)",FALSE);
          CreditComponent::SHECess:
            ServiceTaxEntryDtls.SETRANGE("Closed (SHECess)",FALSE);
          CreditComponent::SBC:
            ServiceTaxEntryDtls.SETRANGE("Closed (SBC)",FALSE);
          CreditComponent::KKCess:
            ServiceTaxEntryDtls.SETRANGE("Closed (KK Cess)",FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE FilterSTEntryDetailCrUsed@1500020(VAR ServiceTaxEntryDtls@1500004 : Record 16474;ServiceTaxRegistrationNoCode@1500003 : Code[20];ServiceTaxGroupCode@1500005 : Code[20];MaxDate@1500001 : Date;CreditComponentFilter@1500000 : Option;ServiceTaxAsExciseCredit@1500002 : Boolean;LocationEccNo@1500006 : Code[20]);
    BEGIN
      ServiceTaxEntryDtls.RESET;
      ServiceTaxEntryDtls.SETCURRENTKEY(Type,"Service Tax Registration No.","Posting Date",Closed,"Closed (eCess)");
      ServiceTaxEntryDtls.SETRANGE(Type,ServiceTaxEntryDtls.Type::Purchase);
      ServiceTaxEntryDtls.SETRANGE("Service Tax Registration No.",ServiceTaxRegistrationNoCode);
      ServiceTaxEntryDtls.SETRANGE("Posting Date",0D,MaxDate);
      ServiceTaxEntryDtls.SETRANGE("Service Tax Group Code",ServiceTaxGroupCode);
      ServiceTaxEntryDtls.SETRANGE("Input Service Distribution",FALSE);
      CASE CreditComponentFilter OF
        CreditComponent::ServiceTax:
        ServiceTaxEntryDtls.SETRANGE(Closed,FALSE);
        CreditComponent::eCess:
          ServiceTaxEntryDtls.SETRANGE("Closed (eCess)",FALSE);
        CreditComponent::SHECess:
          ServiceTaxEntryDtls.SETRANGE("Closed (SHECess)",FALSE);
        CreditComponent::SBC:
          ServiceTaxEntryDtls.SETRANGE("Closed (SBC)",FALSE);
        CreditComponent::KKCess:
          ServiceTaxEntryDtls.SETRANGE("Closed (KK Cess)",FALSE);
      END;
      ServiceTaxEntryDtls.SETRANGE("Service Tax as Excise",ServiceTaxAsExciseCredit);
      IF LocationEccNo <> '' THEN
        ServiceTaxEntryDtls.SETRANGE("Location E.C.C. No.",LocationEccNo);
    END;

    LOCAL PROCEDURE PostRegEntries@1500009(DocNo@1500000 : Code[20]);
    VAR
      RG23APartII@1500001 : Record 13720;
      RG23CPartII@1500002 : Record 13722;
      ExciseCenvatClaim@1500003 : Record 16584;
      GenJnlLine@1500004 : Record 81;
    BEGIN
      CLEAR(GenJnlPostLine);
      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Document No.",DocNo);
      IF GenJnlLine.FINDFIRST THEN BEGIN
        CheckAvailableRGCredit(GenJnlLine);
        RG23APartII.RESET;
        RG23APartII.SETCURRENTKEY("Excise as Service Tax Credit",Closed,"Location E.C.C. No.");
        RG23APartII.SETRANGE("Excise as Service Tax Credit",TRUE);
        RG23APartII.SETRANGE(Closed,FALSE);
        RG23APartII.SETRANGE("Location E.C.C. No.",GenJnlLine."E.C.C. No.");
        IF RG23APartII.FINDFIRST THEN BEGIN
          GenJnlLine."Excise Bus. Posting Group" := RG23APartII."Excise Bus. Posting Group";
          GenJnlLine."Excise Prod. Posting Group" := RG23APartII."Excise Prod. Posting Group";
          GenJnlLine.VALIDATE("Account No.",RG23APartII."Cenvat Cr. Receivable Account");
        END ELSE BEGIN
          RG23CPartII.RESET;
          RG23CPartII.SETCURRENTKEY("Excise as Service Tax Credit",Closed,"Location E.C.C. No.");
          RG23CPartII.SETRANGE("Excise as Service Tax Credit",TRUE);
          RG23CPartII.SETRANGE(Closed,FALSE);
          RG23CPartII.SETRANGE("Location E.C.C. No.",GenJnlLine."E.C.C. No.");
          IF RG23CPartII.FINDFIRST THEN BEGIN
            GenJnlLine."Excise Bus. Posting Group" := RG23CPartII."Excise Bus. Posting Group";
            GenJnlLine."Excise Prod. Posting Group" := RG23CPartII."Excise Prod. Posting Group";
            GenJnlLine.VALIDATE("Account No.",RG23CPartII."Cenvat Cr. Receivable Acc.");
          END;
        END;
        ExciseCenvatClaim.RESET;
        ExciseCenvatClaim.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        ExciseCenvatClaim.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
        ExciseCenvatClaim.SETRANGE("Line No.",GenJnlLine."Line No.");
        ExciseCenvatClaim.SETRANGE("Document No.",DocNo);
        IF ExciseCenvatClaim.FINDFIRST THEN;
        GenJnlLine.Amount := -1 * (ExciseCenvatClaim."BED Amount" + ExciseCenvatClaim."AED(GSI) Amount" +
                                   ExciseCenvatClaim."SED Amount" +
                                   ExciseCenvatClaim."SAED Amount" +
                                   ExciseCenvatClaim."eCess Amount" + ExciseCenvatClaim."NCCD Amount" +
                                   ExciseCenvatClaim."ADET Amount" +
                                   ExciseCenvatClaim."AED(TTA) Amount" + ExciseCenvatClaim."ADE Amount" +
                                   ExciseCenvatClaim."ADC VAT Amount" + ExciseCenvatClaim."SHE Cess Amount");
        GenJnlPostLine.RUN(GenJnlLine);
      END;
    END;

    PROCEDURE STasExciseCr@1500010(SvcTaxasExciseCredit@1500000 : Boolean);
    BEGIN
      SerTaxasExciseCredit := SvcTaxasExciseCredit;
    END;

    LOCAL PROCEDURE CheckAvailableRGCredit@1500004(GenJnlLine@1500000 : Record 81);
    VAR
      RG23APartII@1500001 : Record 13720;
      RG23CPartII@1500002 : Record 13722;
      ExciseCenvatClaim@1500003 : Record 16584;
    BEGIN
      WITH GenJnlLine DO BEGIN
        ExciseCenvatClaim.RESET;
        ExciseCenvatClaim.SETRANGE("Journal Template Name","Journal Template Name");
        ExciseCenvatClaim.SETRANGE("Journal Batch Name","Journal Batch Name");
        ExciseCenvatClaim.SETRANGE("Line No.","Line No.");
        IF ExciseCenvatClaim.FINDFIRST THEN;

        RG23APartII.RESET;
        RG23APartII.SETRANGE("Location E.C.C. No.","E.C.C. No.");
        IF RG23APartII.FINDLAST THEN
          IF (ExciseCenvatClaim."RG 23 A PART II eCess Amount" > RG23APartII."Total eCess Amount") OR
             (ExciseCenvatClaim."RG 23 A PART II SAED Amount" > RG23APartII."Total SAED Amount") OR
             (ExciseCenvatClaim."RG 23 A PART II CESS Amount" > RG23APartII."Total CESS Amount") OR
             (ExciseCenvatClaim."RG 23 A PART II NCCD Amount" > RG23APartII."Total NCCD Amount") OR
             (ExciseCenvatClaim."RG 23A PART II AED(GSI) Amount" > RG23APartII."Total AED(GSI) Amount") OR
             (ExciseCenvatClaim."RG 23 A PART II BED Amount" > RG23APartII."Total BED Amount") OR
             (ExciseCenvatClaim."RG 23 A PART II SED Amount" > RG23APartII."Total SED Amount") OR
             (ExciseCenvatClaim."RG 23 A Part II ADET Amount" > RG23APartII."Total ADET Amount") OR
             (ExciseCenvatClaim."RG 23A PART II AED(TTA) Amount" > RG23APartII."Total AED(TTA) Amount") OR
             (ExciseCenvatClaim."RG 23 A Part II ADE Amount" > RG23APartII."Total ADE Amount") OR
             (ExciseCenvatClaim."RG 23 A PART II ADC VAT Amount" > RG23APartII."Total ADC VAT Amount") OR
             (ExciseCenvatClaim."RG 23 A Part II SHECess Amount" > RG23APartII."Total SHE Cess Amount")
          THEN
            ERROR(Text16503,RG23APartII.TABLECAPTION,"E.C.C. No.");

        RG23CPartII.RESET;
        RG23CPartII.SETRANGE("Location E.C.C. No.","E.C.C. No.");
        IF RG23CPartII.FINDLAST THEN
          IF (ExciseCenvatClaim."RG 23 C PART II eCess Amount" > RG23CPartII."Total eCess for Current Year") OR
             (ExciseCenvatClaim."RG 23 C PART II SAED Amount" > RG23CPartII."Total SAED for Current Year") OR
             (ExciseCenvatClaim."RG 23 C PART II CESS Amount" > RG23CPartII."Total CESS for Current Year") OR
             (ExciseCenvatClaim."RG 23 C PART II NCCD Amount" > RG23CPartII."Total NCCD for Current Year") OR
             (ExciseCenvatClaim."RG 23C PART II AED(GSI) Amount" > RG23CPartII."Total AED(GSI) for CY") OR
             (ExciseCenvatClaim."RG 23 C PART II BED Amount" > RG23CPartII."Total BED for Current Year") OR
             (ExciseCenvatClaim."RG 23 C PART II SED Amount" > RG23CPartII."Total SED for Current Year") OR
             (ExciseCenvatClaim."RG 23 C Part II ADET Amount" > RG23CPartII."Total ADET for Current Year") OR
             (ExciseCenvatClaim."RG 23C PART II AED(TTA) Amount" > RG23CPartII."Total AED(TTA) for CY") OR
             (ExciseCenvatClaim."RG 23 C Part II ADE Amount" > RG23CPartII."Total ADE for Current Year") OR
             (ExciseCenvatClaim."RG 23 C PART II ADC VAT Amount" > RG23CPartII."Total ADC VAT for CY") OR
             (ExciseCenvatClaim."RG 23 C Part II SHECess Amount" > RG23CPartII."Total SHECESS for Current Year")
          THEN
            ERROR(Text16503,RG23CPartII.TABLECAPTION,"E.C.C. No.");
      END
    END;

    PROCEDURE InsertDirectSalesEntry@1590016(GenJnlLine@1280000 : Record 81;NextTransactionNo@1280001 : Integer;AccountNo@1280002 : Code[20]);
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
      ServiceTaxEntryDtls@1500000 : Record 16474;
    BEGIN
      GetServiceTaxSetup(GenJnlLine);

      ServiceTaxEntry.INIT;
      ServiceTaxEntry."Entry No." := 0;
      ServiceTaxEntry.Type := GenJnlLine."Service Tax Type";
      ServiceTaxEntry."Document No." := GenJnlLine."Document No.";
      ServiceTaxEntry."Document Type" := GenJnlLine."Document Type";
      ServiceTaxEntry."Posting Date" := GenJnlLine."Posting Date";
      ServiceTaxEntry."Service Tax Group Code" := GenJnlLine."Service Tax Group Code";
      ServiceTaxEntry."Service Tax Registration No." := GenJnlLine."Service Tax Registration No.";
      ServiceTaxEntry."Party Code" := GenJnlLine."Party Code";
      ServiceTaxEntry."Service Tax Base Amount" := GenJnlLine."Service Tax Base Amount (LCY)";
      ServiceTaxEntry."Service Tax Amount" := GenJnlLine."Service Tax Amount";
      ServiceTaxEntry."Service Tax SBC Amount" := GenJnlLine."Service Tax SBC Amount";
      ServiceTaxEntry."Service Tax SBC %" := GenJnlLine."Service Tax SBC %";
      ServiceTaxEntry."KK Cess Amount" := GenJnlLine."Service Tax SBC Amount";
      ServiceTaxEntry."KK Cess%" := GenJnlLine."KK Cess%";
      ServiceTaxEntry."eCess Amount" := GenJnlLine."Service Tax eCess Amount";
      ServiceTaxEntry."Amount Including Service Tax" :=
        GenJnlLine."Service Tax Base Amount (LCY)" +
        GenJnlLine."Service Tax Amount" + GenJnlLine."Service Tax eCess Amount" + GenJnlLine."Service Tax SHE Cess Amount" +
        GenJnlLine."Service Tax SBC Amount" + GenJnlLine."KK Cess Amount";
      ServiceTaxEntry."Service Tax %" := ServiceTaxSetup."Service Tax %";
      ServiceTaxEntry."Service Tax eCess %" := ServiceTaxSetup."eCess %";
      ServiceTaxEntry."SHE Cess Amount" := GenJnlLine."Service Tax SHE Cess Amount";
      ServiceTaxEntry."Service Tax SHE Cess %" := ServiceTaxSetup."SHE Cess %";
      ServiceTaxEntry."Service Tax Abatement" := ServiceTaxSetup."Abatement %";
      ServiceTaxEntry."Transaction No." := NextTransactionNo;
      ServiceTaxEntry."G/L Account No." := AccountNo;
      ServiceTaxEntry."Line No." := GenJnlLine."Line No.";
      ServiceTaxEntry.Positive := GenJnlLine."Service Tax Amount" > 0;
      ServiceTaxEntry."Input Service Distribution" := GenJnlLine."Input Service Distribution";
      ServiceTaxEntry."Location Code" := GenJnlLine."Location Code";
      ServiceTaxEntry."ST Pure Agent" := GenJnlLine."ST Pure Agent";
      ServiceTaxEntry."Nature of Services" := GenJnlLine."Nature of Services";
      ServiceTaxEntry.INSERT(TRUE);

      ServiceTaxEntryDtls.INIT;
      ServiceTaxEntryDtls."Entry No." := 0;
      ServiceTaxEntryDtls."Service Tax Entry No." := ServiceTaxEntry."Entry No.";
      ServiceTaxEntryDtls.Type := ServiceTaxEntry.Type;
      ServiceTaxEntryDtls."Document No." := ServiceTaxEntry."Document No.";
      ServiceTaxEntryDtls."Posting Date" := ServiceTaxEntry."Posting Date";
      ServiceTaxEntryDtls."Document Type" := ServiceTaxEntry."Document Type";
      ServiceTaxEntryDtls."Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
      ServiceTaxEntryDtls."Service Tax Amount" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntryDtls."Service Tax SBC Amount" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntryDtls."Service Tax SBC %" := ServiceTaxEntry."Service Tax SBC %";
      IF ServiceTaxEntryDtls."Service Tax SBC %" <> 0 THEN
      ServiceTaxSetup.TESTFIELD("SB Cess Payable Account");
      ServiceTaxEntryDtls."SBC G/L Account" := ServiceTaxSetup."SB Cess Payable Account";
      ServiceTaxEntryDtls."KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxEntryDtls."KK Cess%" := ServiceTaxEntry."KK Cess%";
      IF ServiceTaxEntryDtls."KK Cess%" <> 0 THEN
        ServiceTaxSetup.TESTFIELD("KK Cess Payable Account");
      ServiceTaxEntryDtls."KK Cess G/L Account" := ServiceTaxSetup."KK Cess Payable Account";

      ServiceTaxEntryDtls."Service Tax eCess Amount" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxEntryDtls.Amount := ServiceTaxEntry."Amount Including Service Tax";
      ServiceTaxEntryDtls."Transaction No." := ServiceTaxEntry."Transaction No.";

      ServiceTaxSetup.SETRANGE(Code,ServiceTaxEntry."Service Tax Group Code");
      ServiceTaxSetup.SETRANGE("From Date",0D,ServiceTaxEntryDtls."Posting Date");
      ServiceTaxSetup.FINDLAST;

      ServiceTaxEntryDtls."Remaining Credit" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntryDtls."Remaining Credit (SBC)" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntryDtls."Remaining Credit (KK Cess)" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxEntryDtls."Remaining Credit (eCess)" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntryDtls."Remaining Credit (SHECess)" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxSetup.TESTFIELD("Service Tax Payable Account");
      ServiceTaxEntryDtls."GL Account" := ServiceTaxSetup."Service Tax Payable Account";

      ServiceTaxEntryDtls."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
      ServiceTaxEntryDtls."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
      ServiceTaxEntryDtls."Location E.C.C. No." := ServiceTaxEntry."Location E.C.C. No.";
      IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
        ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
      ServiceTaxEntryDtls."Input Service Distribution" := ServiceTaxEntry."Input Service Distribution";
      ServiceTaxEntryDtls."Location Code" := ServiceTaxEntry."Location Code";
      ServiceTaxEntryDtls."Service Tax Abatement %" := ServiceTaxEntry."Service Tax Abatement";
      ServiceTaxEntryDtls."ST Pure Agent" := ServiceTaxEntry."ST Pure Agent";
      ServiceTaxEntryDtls."Nature of Services" := ServiceTaxEntry."Nature of Services";
      ServiceTaxEntryDtls."Service Tax %" := ServiceTaxEntry."Service Tax %";
      ServiceTaxEntryDtls."Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
      ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
      ServiceTaxEntryDtls."Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
      ServiceTaxEntryDtls."Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
      ServiceTaxEntryDtls.INSERT(TRUE);
    END;

    PROCEDURE InsertDirectPurchaseEntry@1500017(GenJnlLine@1280000 : Record 81;NextTransactionNo@1280003 : Integer;AccountNo@1280001 : Code[20]);
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
      ServiceTaxEntryDtls@1500000 : Record 16474;
      ServiceTaxSetup@1500002 : Record 16472;
    BEGIN
      GenJnlLine.TESTFIELD("Party Code");
      ServiceTaxSetup.FindOnDate(GenJnlLine."Service Tax Group Code",GenJnlLine."Posting Date");

      ServiceTaxEntry.INIT;
      ServiceTaxEntry."Entry No." := 0;
      ServiceTaxEntry.Type := GenJnlLine."Service Tax Type";
      ServiceTaxEntry."Document No." := GenJnlLine."Document No.";
      ServiceTaxEntry."Document Type" := GenJnlLine."Document Type";
      ServiceTaxEntry."Posting Date" := GenJnlLine."Posting Date";
      ServiceTaxEntry."Service Tax Group Code" := GenJnlLine."Service Tax Group Code";
      ServiceTaxEntry."Service Tax Registration No." := GenJnlLine."Service Tax Registration No.";
      ServiceTaxEntry."Party Code" := GenJnlLine."Party Code";
      ServiceTaxEntry."Service Tax Base Amount" := GenJnlLine."Service Tax Base Amount (LCY)";
      ServiceTaxEntry."Service Tax Amount" := GenJnlLine."Service Tax Amount";
      ServiceTaxEntry."eCess Amount" := GenJnlLine."Service Tax eCess Amount";
      ServiceTaxEntry."SHE Cess Amount" := GenJnlLine."Service Tax SHE Cess Amount";
      ServiceTaxEntry."Amount Including Service Tax" :=
        GenJnlLine."Service Tax Base Amount (LCY)" + GenJnlLine.FullServiceTaxAmount + GenJnlLine.KKCessAmount;
      ServiceTaxEntry."Service Tax %" := ServiceTaxSetup."Service Tax %";
      ServiceTaxEntry."Service Tax eCess %" := ServiceTaxSetup."eCess %";
      ServiceTaxEntry."Service Tax SHE Cess %" := ServiceTaxSetup."SHE Cess %";
      ServiceTaxEntry."Service Tax Abatement" := ServiceTaxSetup."Abatement %";
      ServiceTaxEntry."SBC G/L Account" :=ServiceTaxEntry."SBC G/L Account";
      ServiceTaxEntry."Service Tax SBC %" := ServiceTaxSetup."SB Cess%";
      ServiceTaxEntry."Service Tax SBC Amount" := GenJnlLine."Service Tax SBC Amount";
      ServiceTaxEntry."KK Cess G/L Account" :=ServiceTaxEntry."KK Cess G/L Account";
      ServiceTaxEntry."KK Cess%" := ServiceTaxSetup."KK Cess%";
      ServiceTaxEntry."KK Cess Amount" := GenJnlLine."KK Cess Amount";
      ServiceTaxEntry."Transaction No." := NextTransactionNo;
      ServiceTaxEntry."G/L Account No." := AccountNo;
      ServiceTaxEntry."Location E.C.C. No." := GenJnlLine."E.C.C. No.";
      ServiceTaxEntry."Line No." := GenJnlLine."Line No.";
      ServiceTaxEntry.Positive := GenJnlLine."Service Tax Amount" > 0;
      ServiceTaxEntry."Input Service Distribution" := GenJnlLine."Input Service Distribution";
      ServiceTaxEntry."Location Code" := GenJnlLine."Location Code";
      ServiceTaxEntry."ST Pure Agent" := GenJnlLine."ST Pure Agent";
      ServiceTaxEntry."Nature of Services" := GenJnlLine."Nature of Services";
      ServiceTaxEntry."Service Tax Rounding Precision" := GenJnlLine."Service Tax Rounding Precision";
      ServiceTaxEntry."Service Tax Rounding Type" := GenJnlLine."Service Tax Rounding Type";
      ServiceTaxEntry.INSERT(TRUE);

      ServiceTaxEntryDtls.RESET;
      ServiceTaxEntryDtls.INIT;
      ServiceTaxEntryDtls."Entry No." := 0;
      ServiceTaxEntryDtls."Service Tax Entry No." := ServiceTaxEntry."Entry No.";
      ServiceTaxEntryDtls.Type := ServiceTaxEntry.Type;
      ServiceTaxEntryDtls."Document No." := ServiceTaxEntry."Document No.";
      ServiceTaxEntryDtls."Posting Date" := ServiceTaxEntry."Posting Date";
      ServiceTaxEntryDtls."Document Type" := ServiceTaxEntry."Document Type";
      ServiceTaxEntryDtls."Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
      ServiceTaxEntryDtls."Service Tax Amount" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntryDtls."Service Tax eCess Amount" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxEntryDtls.Amount := ServiceTaxEntry."Amount Including Service Tax";
      ServiceTaxEntryDtls.Positive := ServiceTaxEntryDtls."Service Tax Amount" > 0;
      ServiceTaxEntryDtls."Transaction No." := ServiceTaxEntry."Transaction No.";
      ServiceTaxEntryDtls."SBC G/L Account" :=ServiceTaxEntry."SBC G/L Account";
      ServiceTaxEntryDtls."Service Tax SBC %" := ServiceTaxEntry."Service Tax SBC %";
      ServiceTaxEntryDtls."Service Tax SBC Amount" :=ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntryDtls."KK Cess G/L Account" :=ServiceTaxEntry."KK Cess G/L Account";
      ServiceTaxEntryDtls."KK Cess%" := ServiceTaxEntry."KK Cess%";
      ServiceTaxEntryDtls."KK Cess Amount" :=ServiceTaxEntry."KK Cess Amount";

      ServiceTaxSetup.FindOnDate(ServiceTaxEntry."Service Tax Group Code",ServiceTaxEntryDtls."Posting Date");

      ServiceTaxEntryDtls."Remaining Credit" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntryDtls."Remaining Credit (SBC)" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntryDtls."Remaining Credit (KK Cess)" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxEntryDtls."Remaining Credit (eCess)" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntryDtls."Remaining Credit (SHECess)" := ServiceTaxEntry."SHE Cess Amount";
      IF GenJnlLine."Input Service Distribution" THEN
        ServiceTaxEntryDtls."Remaining S.T. Base Amount" := ServiceTaxEntryDtls."Base Amount";
      ServiceTaxEntryDtls."GL Account" :=
        ServiceTaxSetup.GetRecAccNoByISD(ServiceTaxEntry."Input Service Distribution");
      ServiceTaxEntryDtls."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
      ServiceTaxEntryDtls."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
      ServiceTaxEntryDtls."Location E.C.C. No." := ServiceTaxEntry."Location E.C.C. No.";
      IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
        ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
      ServiceTaxEntryDtls."Input Service Distribution" := ServiceTaxEntry."Input Service Distribution";
      ServiceTaxEntryDtls."Location Code" := ServiceTaxEntry."Location Code";
      ServiceTaxEntryDtls."Service Tax Abatement %" := ServiceTaxEntry."Service Tax Abatement";
      ServiceTaxEntryDtls."ST Pure Agent" := ServiceTaxEntry."ST Pure Agent";
      ServiceTaxEntryDtls."Nature of Services" := ServiceTaxEntry."Nature of Services";
      ServiceTaxEntryDtls."Service Tax %" := ServiceTaxEntry."Service Tax %";
      ServiceTaxEntryDtls."Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
      ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
      ServiceTaxEntryDtls."Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
      ServiceTaxEntryDtls."Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
      ServiceTaxEntryDtls.INSERT(TRUE);
    END;

    PROCEDURE PostServiceTaxLines@1500024(VAR Rec@1500000 : Record 16550);
    VAR
      ServiceTaxOpening@1500001 : Record 16550;
    BEGIN
      ServiceTaxOpening.COPY(Rec);
      IF ServiceTaxOpening.FINDFIRST THEN BEGIN
        Window.OPEN(Text16510 + Text16511);
        CheckLines(ServiceTaxOpening);
        InsertServiceTax(ServiceTaxOpening);
        CLEAR(GenJnlPostLine);
        Window.CLOSE;
        MESSAGE(Text16512);
      END;
      Rec := ServiceTaxOpening;
    END;

    LOCAL PROCEDURE CheckLines@1500023(VAR ServiceTaxOpening@1500000 : Record 16550);
    VAR
      CustLedgEntry@1500005 : Record 21;
      ServiceTaxEntry@1500002 : Record 16473;
      ServiceTaxOpening2@1500003 : Record 16550;
      VendLedgEntry@1500004 : Record 25;
      LineCount@1500001 : Integer;
    BEGIN
      WITH ServiceTaxOpening DO BEGIN
        IF FINDSET THEN BEGIN
          ServiceTaxOpening2.COPYFILTERS(ServiceTaxOpening);
          ServiceTaxOpening2.SETRANGE("Party Code",'');
          IF ServiceTaxOpening2.FINDFIRST THEN BEGIN
            COMMIT;
            IF NOT CONFIRM(Text16506,FALSE) THEN
              ERROR('');
          END;

          REPEAT
            IF Type = Type::Charge THEN
              ERROR(Text16513);
            TESTFIELD("Document No.");
            TESTFIELD("Document Type");
            TESTFIELD("Posting Date");
            TESTFIELD("Service Tax Group Code");
            TESTFIELD("Service Tax Registration No.");
            IF ("Service Tax Amount" + "eCess Amount" + "SHE Cess Amount") = 0 THEN
              ERROR(Text16523,"Line No.");
            IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN
              TESTFIELD("Bal. Account No. (Interim)");
            IF "Amount Received/Paid" <> 0 THEN
              TESTFIELD("Bal. Account No.");
            IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::Payment,
                                        "Document Type"::Refund])
            THEN
              ERROR(Text16514);
            IF "Entry Type" = "Entry Type"::Opening THEN
              TESTFIELD("Service Tax %");
            IF ("Document Type" = "Document Type"::Invoice) OR ("Document Type" = "Document Type"::"Credit Memo") THEN BEGIN
              IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
                IF "Serv. Tax on Advance Payment" THEN
                  ERROR(Text16505,"Line No.");
                TESTFIELD("Transaction No.");
                ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
                ServiceTaxEntry.SETRANGE("Transaction No.","Transaction No.");
                IF ServiceTaxEntry.FINDFIRST THEN
                  ERROR(Text16522,"Line No.","Transaction No.");
                IF Type = Type::Sale THEN BEGIN
                  CustLedgEntry.RESET;
                  CustLedgEntry.SETCURRENTKEY("Transaction No.");
                  CustLedgEntry.SETRANGE("Transaction No.","Transaction No.");
                  IF CustLedgEntry.FINDFIRST THEN BEGIN
                    CustLedgEntry.CALCFIELDS("Amount (LCY)");
                    IF "Payable/Receivable Amount" <> CustLedgEntry."Amount (LCY)" THEN
                      ERROR(Text16515,Type,"Transaction No.",CustLedgEntry."Amount (LCY)");
                    IF "Document No." <> CustLedgEntry."Document No." THEN
                      ERROR(Text16516,Type,"Transaction No.",CustLedgEntry."Document No.");
                    IF "Posting Date" <> CustLedgEntry."Posting Date" THEN
                      ERROR(Text16517,Type,"Transaction No.",CustLedgEntry."Posting Date");
                    IF "Document Type" <> CustLedgEntry."Document Type" THEN
                      ERROR(Text16518,Type,"Transaction No.",CustLedgEntry."Document Type");
                    IF "Party Code" <> CustLedgEntry."Customer No." THEN
                      ERROR(Text16519,Type,"Transaction No.",CustLedgEntry."Customer No.");
                  END;
                  IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                    IF "Service Tax Base Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16526);
                    IF "Service Tax Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16526);
                    IF "eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16526);
                    IF "SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16526);
                    IF "Amount Received/Paid" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16526);
                  END;
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                    IF "Service Tax Base Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16527);
                    IF "Service Tax Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16527);
                    IF "eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16527);
                    IF "SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16527);
                    IF "Amount Received/Paid" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16527);
                  END;
                  IF "Remaining Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining Amount"),Text16528);
                  IF "Remaining eCess Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16528);
                  IF "Remaining SHE Cess Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16528);
                END;
                IF Type = Type::Purchase THEN BEGIN
                  VendLedgEntry.RESET;
                  VendLedgEntry.SETCURRENTKEY("Transaction No.");
                  VendLedgEntry.SETRANGE("Transaction No.","Transaction No.");
                  IF VendLedgEntry.FINDFIRST THEN BEGIN
                    VendLedgEntry.CALCFIELDS("Amount (LCY)");
                    IF "Payable/Receivable Amount" <> VendLedgEntry."Amount (LCY)" THEN
                      ERROR(Text16515,Type,"Transaction No.",VendLedgEntry."Amount (LCY)");
                    IF "Document No." <> VendLedgEntry."Document No." THEN
                      ERROR(Text16516,Type,"Transaction No.",VendLedgEntry."Document No.");
                    IF "Posting Date" <> VendLedgEntry."Posting Date" THEN
                      ERROR(Text16517,Type,"Transaction No.",VendLedgEntry."Posting Date");
                    IF "Document Type" <> VendLedgEntry."Document Type" THEN
                      ERROR(Text16518,Type,"Transaction No.",VendLedgEntry."Document Type");
                    IF "Party Code" <> VendLedgEntry."Vendor No." THEN
                      ERROR(Text16519,Type,"Transaction No.",VendLedgEntry."Vendor No.");
                  END;
                  IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                    IF "Service Tax Base Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16527);
                    IF "Service Tax Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16527);
                    IF "eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16527);
                    IF "SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16527);
                    IF "Amount Received/Paid" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16527);
                    IF "Remaining Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Amount"),Text16527);
                    IF "Remaining eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16527);
                    IF "Remaining SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16527);
                  END;
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                    IF "Service Tax Base Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16526);
                    IF "Service Tax Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16526);
                    IF "eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16526);
                    IF "SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16526);
                    IF "Amount Received/Paid" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16526);
                    IF "Remaining Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Amount"),Text16526);
                    IF "Remaining eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16526);
                    IF "Remaining SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16526);
                  END;
                END;
              END;
            END;
            IF (("Document Type" = "Document Type"::Payment) OR ("Document Type" = "Document Type"::Refund))
               AND (NOT "Serv. Tax on Advance Payment")
            THEN BEGIN
              IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
                TESTFIELD("Transaction No.",0);
                IF "Service Tax Base Amount" + FullTaxAmount <> -"Payable/Receivable Amount"
                THEN
                  ERROR(Text16521,"Line No.",FIELDCAPTION("Payable/Receivable Amount"),
                    -("Service Tax Base Amount" + FullTaxAmount));
                IF "Service Tax Base Amount" + FullTaxAmount <> "Amount Received/Paid" THEN
                  ERROR(Text16521,"Line No.",FIELDCAPTION("Amount Received/Paid"),
                    ("Service Tax Base Amount" + FullTaxAmount));
                IF Type = Type::Sale THEN BEGIN
                  IF "Document Type" = "Document Type"::Payment THEN BEGIN
                    IF "Service Tax Base Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16526);
                    IF "Service Tax Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16526);
                    IF "eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16526);
                    IF "SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16526);
                    IF "Amount Received/Paid" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16526);
                  END;
                  IF "Document Type" = "Document Type"::Refund THEN BEGIN
                    IF "Service Tax Base Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16527);
                    IF "Service Tax Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16527);
                    IF "eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16527);
                    IF "SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16527);
                    IF "Amount Received/Paid" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16527);
                  END;
                  IF "Remaining Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining Amount"),Text16528);
                  IF "Remaining eCess Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16528);
                  IF "Remaining SHE Cess Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16528);
                END;
                IF Type = Type::Purchase THEN BEGIN
                  IF "Document Type" = "Document Type"::Payment THEN BEGIN
                    IF "Service Tax Base Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16527);
                    IF "Service Tax Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16527);
                    IF "eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16527);
                    IF "SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16527);
                    IF "Amount Received/Paid" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16527);
                    IF "Remaining Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Amount"),Text16527);
                    IF "Remaining eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16527);
                    IF "Remaining SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16527);
                  END;
                  IF "Document Type" = "Document Type"::Refund THEN BEGIN
                    IF "Service Tax Base Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16526);
                    IF "Service Tax Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16526);
                    IF "eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16526);
                    IF "SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16526);
                    IF "Amount Received/Paid" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16526);
                    IF "Remaining Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Amount"),Text16526);
                    IF "Remaining eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16526);
                    IF "Remaining SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16526);
                  END;
                END;
              END;
            END;
            IF (("Document Type" = "Document Type"::Payment) OR ("Document Type" = "Document Type"::Refund))
               AND "Serv. Tax on Advance Payment"
            THEN BEGIN
              IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
                TESTFIELD("Transaction No.");
                ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
                ServiceTaxEntry.SETRANGE("Transaction No.","Transaction No.");
                IF ServiceTaxEntry.FINDFIRST THEN
                  ERROR(Text16522,"Line No.","Transaction No.");
                IF Type = Type::Sale THEN BEGIN
                  CustLedgEntry.RESET;
                  CustLedgEntry.SETCURRENTKEY("Transaction No.");
                  CustLedgEntry.SETRANGE("Transaction No.","Transaction No.");
                  IF CustLedgEntry.FINDFIRST THEN BEGIN
                    CustLedgEntry.CALCFIELDS("Amount (LCY)");
                    IF "Payable/Receivable Amount" <> CustLedgEntry."Amount (LCY)" THEN
                      ERROR(Text16515,Type,"Transaction No.",CustLedgEntry."Amount (LCY)");
                    IF "Document No." <> CustLedgEntry."Document No." THEN
                      ERROR(Text16516,Type,"Transaction No.",CustLedgEntry."Document No.");
                    IF "Posting Date" <> CustLedgEntry."Posting Date" THEN
                      ERROR(Text16517,Type,"Transaction No.",CustLedgEntry."Posting Date");
                    IF "Document Type" <> CustLedgEntry."Document Type" THEN
                      ERROR(Text16518,Type,"Transaction No.",CustLedgEntry."Document Type");
                    IF "Party Code" <> CustLedgEntry."Customer No." THEN
                      ERROR(Text16519,Type,"Transaction No.",CustLedgEntry."Customer No.");
                  END;
                END;
                IF Type = Type::Purchase THEN BEGIN
                  VendLedgEntry.RESET;
                  VendLedgEntry.SETCURRENTKEY("Transaction No.");
                  VendLedgEntry.SETRANGE("Transaction No.","Transaction No.");
                  IF VendLedgEntry.FINDFIRST THEN BEGIN
                    VendLedgEntry.CALCFIELDS("Amount (LCY)");
                    IF "Payable/Receivable Amount" <> VendLedgEntry."Amount (LCY)" THEN
                      ERROR(Text16515,Type,"Transaction No.",VendLedgEntry."Amount (LCY)");
                    IF "Document No." <> VendLedgEntry."Document No." THEN
                      ERROR(Text16516,Type,"Transaction No.",VendLedgEntry."Document No.");
                    IF "Posting Date" <> VendLedgEntry."Posting Date" THEN
                      ERROR(Text16517,Type,"Transaction No.",VendLedgEntry."Posting Date");
                    IF "Document Type" <> VendLedgEntry."Document Type" THEN
                      ERROR(Text16518,Type,"Transaction No.",VendLedgEntry."Document Type");
                    IF "Party Code" <> VendLedgEntry."Vendor No." THEN
                      ERROR(Text16519,Type,"Transaction No.",VendLedgEntry."Vendor No.");
                  END;
                END;
                IF "Service Tax Base Amount" + FullTaxAmount <> "Payable/Receivable Amount"
                THEN
                  ERROR(Text16521,"Line No.",FIELDCAPTION("Payable/Receivable Amount"),
                    ("Service Tax Base Amount" + FullTaxAmount));
                IF Type = Type::Sale THEN BEGIN
                  IF "Service Tax Base Amount" + FullTaxAmount <> "Amount Received/Paid" THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Amount Received/Paid"),("Service Tax Base Amount" + FullTaxAmount));
                  IF "Remaining Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining Amount"),Text16528);
                  IF "Remaining eCess Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16528);
                  IF "Remaining SHE Cess Amount" <> 0 THEN
                    ERROR(Text16521,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16528);
                  IF "Document Type" = "Document Type"::Payment THEN BEGIN
                    IF "Service Tax Base Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16526);
                    IF "Service Tax Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16526);
                    IF "eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16526);
                    IF "SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16526);
                    IF "Amount Received/Paid" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16526);
                    IF "Remaining Serv. Tax Base Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Base Amt"),Text16526);
                    IF "Remaining Serv. Tax Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Amt"),Text16526);
                    IF "Remaining Serv. Tax eCess Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax eCess Amt"),Text16526);
                    IF "Remaining ST SHE Cess Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining ST SHE Cess Amt"),Text16526);
                  END;
                  IF "Document Type" = "Document Type"::Refund THEN BEGIN
                    IF "Service Tax Base Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16527);
                    IF "Service Tax Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16527);
                    IF "eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16527);
                    IF "SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16527);
                    IF "Amount Received/Paid" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16527);
                    IF "Remaining Serv. Tax Base Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Base Amt"),Text16527);
                    IF "Remaining Serv. Tax Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Amt"),Text16527);
                    IF "Remaining Serv. Tax eCess Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax eCess Amt"),Text16527);
                    IF "Remaining ST SHE Cess Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining ST SHE Cess Amt"),Text16527);
                  END;
                END;
                IF Type = Type::Purchase THEN BEGIN
                  IF "Document Type" = "Document Type"::Payment THEN BEGIN
                    IF "Service Tax Base Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16527);
                    IF "Service Tax Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16527);
                    IF "eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16527);
                    IF "SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16527);
                    IF "Amount Received/Paid" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16527);
                    IF "Remaining Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Amount"),Text16527);
                    IF "Remaining eCess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16527);
                    IF "Remaining SHE Cess Amount" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16527);
                    IF "Remaining Serv. Tax Base Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Base Amt"),Text16527);
                    IF "Remaining Serv. Tax Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Amt"),Text16527);
                    IF "Remaining Serv. Tax eCess Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax eCess Amt"),Text16527);
                    IF "Remaining ST SHE Cess Amt" < 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining ST SHE Cess Amt"),Text16527);
                  END;
                  IF "Document Type" = "Document Type"::Refund THEN BEGIN
                    IF "Service Tax Base Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16526);
                    IF "Service Tax Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Service Tax Amount"),Text16526);
                    IF "eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("eCess Amount"),Text16526);
                    IF "SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("SHE Cess Amount"),Text16526);
                    IF "Amount Received/Paid" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Amount Received/Paid"),Text16526);
                    IF "Remaining Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Amount"),Text16526);
                    IF "Remaining eCess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining eCess Amount"),Text16526);
                    IF "Remaining SHE Cess Amount" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining SHE Cess Amount"),Text16526);
                    IF "Remaining Serv. Tax Base Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Base Amt"),Text16526);
                    IF "Remaining Serv. Tax Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax Amt"),Text16526);
                    IF "Remaining Serv. Tax eCess Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining Serv. Tax eCess Amt"),Text16526);
                    IF "Remaining ST SHE Cess Amt" > 0 THEN
                      ERROR(Text16520,"Line No.",FIELDCAPTION("Remaining ST SHE Cess Amt"),Text16526);
                  END;
                END;
              END;
            END;
            IF ("Entry Type" = "Entry Type"::Adjustment) AND ("Document Type" IN ["Document Type"::Invoice,
                                                                                  "Document Type"::"Credit Memo"])
            THEN
              TESTFIELD("Applied ST Entry No.");

            LineCount := LineCount + 1;
            Window.UPDATE(1,LineCount);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertServiceTax@1500022(VAR ServiceTaxOpening@1500012 : Record 16550);
    VAR
      ServiceTaxEntry@1500001 : Record 16473;
      ServiceTaxEntryDtls@1500000 : Record 16474;
      GenJnlLine@1500003 : Record 81;
      LineCount@1500002 : Integer;
    BEGIN
      IF ServiceTaxOpening.FINDSET THEN BEGIN
        REPEAT
          ServiceTaxEntry.INIT;
          ServiceTaxEntry."Entry No." := 0;
          ServiceTaxEntry.Type := ServiceTaxOpening.Type;
          ServiceTaxEntry."Document No." := ServiceTaxOpening."Document No.";
          ServiceTaxEntry."Document Type" := ServiceTaxOpening."Document Type";
          ServiceTaxEntry."Posting Date" := ServiceTaxOpening."Posting Date";
          ServiceTaxEntry."Service Tax Group Code" := ServiceTaxOpening."Service Tax Group Code";
          ServiceTaxEntry."Service Tax Registration No." := ServiceTaxOpening."Service Tax Registration No.";
          ServiceTaxEntry."Service Tax Base Amount" := ServiceTaxOpening."Service Tax Base Amount";
          ServiceTaxEntry."Service Tax Amount" := ServiceTaxOpening."Service Tax Amount";
          ServiceTaxEntry."eCess Amount" := ServiceTaxOpening."eCess Amount";
          ServiceTaxEntry."SHE Cess Amount" := ServiceTaxOpening."SHE Cess Amount";
          ServiceTaxEntry."Amount Including Service Tax" :=
            ServiceTaxOpening."Service Tax Base Amount" + ServiceTaxOpening.FullTaxAmount;
          ServiceTaxEntry."Service Tax %" := ServiceTaxOpening."Service Tax %";
          ServiceTaxEntry."Service Tax eCess %" := ServiceTaxOpening."Service Tax eCess %";
          ServiceTaxEntry."Service Tax SHE Cess %" := ServiceTaxOpening."Service Tax SHE Cess %";
          ServiceTaxEntry."Service Tax Abatement" := ServiceTaxOpening."Service Tax Abatement";
          ServiceTaxEntry."Transaction No." := ServiceTaxOpening."Transaction No.";
          ServiceTaxEntry."Party Code" := ServiceTaxOpening."Party Code";
          ServiceTaxEntry."G/L Account No." := ServiceTaxOpening."ST Rec./Pay. Account (Interim)";
          ServiceTaxEntry."Location E.C.C. No." := ServiceTaxOpening."Location E.C.C. No.";
          ServiceTaxEntry.Positive := ServiceTaxOpening."Service Tax Amount" > 0;
          ServiceTaxEntry."Service Tax Rounding Precision" := ServiceTaxOpening."Service Tax Rounding Precision";
          ServiceTaxEntry."Service Tax Rounding Type" := ServiceTaxOpening."Service Tax Rounding Type";
          ServiceTaxEntry."Serv. Tax on Advance Payment" := ServiceTaxOpening."Serv. Tax on Advance Payment";
          IF ServiceTaxEntry."Serv. Tax on Advance Payment" THEN BEGIN
            ServiceTaxEntry."Remaining Serv. Tax Amt" := ServiceTaxOpening."Remaining Serv. Tax Amt";
            ServiceTaxEntry."Remaining Serv. Tax eCess Amt" := ServiceTaxOpening."Remaining Serv. Tax eCess Amt";
            ServiceTaxEntry."Remaining Serv Tax SHECess Amt" := ServiceTaxOpening."Remaining ST SHE Cess Amt";
            ServiceTaxEntry."Remaining Serv. Tax Base Amt" := ServiceTaxOpening."Remaining Serv. Tax Base Amt";
          END;
          IF ServiceTaxOpening."Entry Type" = ServiceTaxOpening."Entry Type"::Adjustment THEN BEGIN
            ServiceTaxEntry.Adjusted := TRUE;
            ServiceTaxEntry."Adjusted Agst Entry No." := ServiceTaxOpening."Applied ST Entry No.";
          END;

          IF (ServiceTaxOpening."Document Type" IN [ServiceTaxOpening."Document Type"::Invoice,
                                                    ServiceTaxOpening."Document Type"::"Credit Memo"]) OR
             ((ServiceTaxOpening."Document Type" IN
               [ServiceTaxOpening."Document Type"::Payment,ServiceTaxOpening."Document Type"::Refund])
              AND
              ServiceTaxOpening."Serv. Tax on Advance Payment")
          THEN BEGIN
            PostGenJnlLine(
              ServiceTaxOpening."ST Rec./Pay. Account (Interim)",
              ServiceTaxOpening."Bal. Account Type (Interim)",
              ServiceTaxOpening."Bal. Account No. (Interim)",
              ServiceTaxEntry."Service Tax Amount" + ServiceTaxOpening."eCess Amount" + ServiceTaxOpening."SHE Cess Amount",
              ServiceTaxEntry."Document Type",
              ServiceTaxOpening);
            IF ServiceTaxOpening."Entry Type" = ServiceTaxOpening."Entry Type"::Adjustment THEN
              GenJnlPostLine.GetTransactionNo(ServiceTaxEntry."Transaction No.");
          END;
          ServiceTaxEntry."Input Service Distribution" := ServiceTaxOpening."Input Service Distribution";
          ServiceTaxEntry."Location Code" := ServiceTaxOpening."Location Code";
          ServiceTaxEntry."ST Pure Agent" := GenJnlLine."ST Pure Agent";
          ServiceTaxEntry."Nature of Services" := GenJnlLine."Nature of Services";

          ServiceTaxEntry."Service Tax Rounding Precision" := ServiceTaxOpening."Service Tax Rounding Precision";
          ServiceTaxEntry."Service Tax Rounding Type" := ServiceTaxOpening."Service Tax Rounding Type";
          ServiceTaxEntry.INSERT(TRUE);

          IF ServiceTaxOpening."Amount Received/Paid" <> 0 THEN BEGIN
            ServiceTaxOpening.TESTFIELD("Payable/Receivable Amount");
            ServiceTaxEntryDtls.INIT;
            ServiceTaxEntryDtls."Entry No." := 0;
            ServiceTaxEntryDtls."Service Tax Entry No." := ServiceTaxEntry."Entry No.";
            ServiceTaxEntryDtls.Type := ServiceTaxEntry.Type;
            ServiceTaxEntryDtls."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
            ServiceTaxEntryDtls."Document No." := ServiceTaxEntry."Document No.";
            ServiceTaxEntryDtls."Posting Date" := ServiceTaxEntry."Posting Date";
            ServiceTaxEntryDtls."Serv. Tax on Advance Payment" := ServiceTaxOpening."Serv. Tax on Advance Payment";

            IF ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::Invoice THEN
              ServiceTaxEntryDtls."Document Type" := ServiceTaxEntryDtls."Document Type"::Payment;
            IF ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::"Credit Memo" THEN
              ServiceTaxEntryDtls."Document Type" := ServiceTaxEntryDtls."Document Type"::Refund;
            IF ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::Payment THEN
              ServiceTaxEntryDtls."Document Type" := ServiceTaxEntryDtls."Document Type"::Payment;
            IF ServiceTaxEntry."Document Type" = ServiceTaxEntry."Document Type"::Refund THEN
              ServiceTaxEntryDtls."Document Type" := ServiceTaxEntryDtls."Document Type"::Refund;

            IF ServiceTaxOpening."Payable/Receivable Amount" <> 0 THEN BEGIN
              IF NOT ServiceTaxOpening."Serv. Tax on Advance Payment" THEN BEGIN
                ServiceTaxEntryDtls."Base Amount" := ROUND(-(ServiceTaxOpening."Amount Received/Paid" /
                                                             ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."Service Tax Base Amount");
                ServiceTaxEntryDtls."Service Tax Amount" := ROUND(-(ServiceTaxOpening."Amount Received/Paid" /
                                                                    ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."Service Tax Amount");
                ServiceTaxEntryDtls."Service Tax eCess Amount" := ROUND(-(ServiceTaxOpening."Amount Received/Paid" /
                                                                          ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."eCess Amount");
                ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := ROUND(-(ServiceTaxOpening."Amount Received/Paid" /
                                                                             ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."SHE Cess Amount");
              END ELSE BEGIN
                ServiceTaxEntryDtls."Base Amount" := ROUND((ServiceTaxOpening."Amount Received/Paid" /
                                                            ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."Service Tax Base Amount");
                ServiceTaxEntryDtls."Service Tax Amount" := ROUND((ServiceTaxOpening."Amount Received/Paid" /
                                                                   ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."Service Tax Amount");
                ServiceTaxEntryDtls."Service Tax eCess Amount" := ROUND((ServiceTaxOpening."Amount Received/Paid" /
                                                                         ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."eCess Amount");
                ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := ROUND((ServiceTaxOpening."Amount Received/Paid" /
                                                                            ServiceTaxOpening."Payable/Receivable Amount") *
                    ServiceTaxOpening."SHE Cess Amount");
              END;
              IF ServiceTaxOpening."Amount Received/Paid" <> (ServiceTaxEntryDtls."Base Amount" +
                 ServiceTaxEntryDtls.FullTaxAmount)
              THEN
                ServiceTaxEntryDtls."Base Amount" := ServiceTaxEntryDtls."Base Amount" +
                  ServiceTaxOpening."Amount Received/Paid" - (ServiceTaxEntryDtls."Base Amount" +
                 ServiceTaxEntryDtls.FullTaxAmount);
            END;
            ServiceTaxEntryDtls.Amount := ServiceTaxOpening."Amount Received/Paid";
            ServiceTaxEntryDtls.Positive := ServiceTaxEntryDtls."Service Tax Amount" > 0;
            ServiceTaxEntryDtls."Remaining Credit" := ServiceTaxOpening."Remaining Amount";
            ServiceTaxEntryDtls."Remaining Credit (eCess)" := ServiceTaxOpening."Remaining eCess Amount";
            ServiceTaxEntryDtls."Remaining Credit (SHECess)" := ServiceTaxOpening."Remaining SHE Cess Amount";
            ServiceTaxEntryDtls."Remaining S.T. Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
            ServiceTaxEntryDtls."GL Account" := ServiceTaxOpening."ST Rec./Pay. Account";
            ServiceTaxEntryDtls."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
            ServiceTaxEntryDtls."Transaction No." := ServiceTaxEntry."Transaction No.";
            ServiceTaxEntryDtls."Location E.C.C. No." := ServiceTaxOpening."Location E.C.C. No.";
            IF ServiceTaxOpening."Entry Type" = ServiceTaxOpening."Entry Type"::Adjustment THEN BEGIN
              ServiceTaxEntryDtls.Adjusted := TRUE;
              ServiceTaxEntryDtls."Adjusted Agst Entry No." := ServiceTaxOpening."Applied ST Entry No.";
            END;
            PostGenJnlLine(
              ServiceTaxOpening."ST Rec./Pay. Account",
              ServiceTaxOpening."Bal. Account Type",
              ServiceTaxOpening."Bal. Account No.",
              ServiceTaxEntryDtls.FullTaxAmount,
              ServiceTaxEntryDtls."Document Type",
              ServiceTaxOpening);
            GenJnlPostLine.GetTransactionNo(ServiceTaxEntryDtls."Transaction No.");
            IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
              ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
            ServiceTaxEntryDtls."Input Service Distribution" := ServiceTaxOpening."Input Service Distribution";
            ServiceTaxEntryDtls."Location Code" := ServiceTaxOpening."Location Code";
            ServiceTaxEntryDtls."Service Tax Abatement %" := ServiceTaxEntry."Service Tax Abatement";
            ServiceTaxEntryDtls."ST Pure Agent" := ServiceTaxEntry."ST Pure Agent";
            ServiceTaxEntryDtls."Nature of Services" := ServiceTaxEntry."Nature of Services";
            ServiceTaxEntryDtls."Service Tax %" := ServiceTaxEntry."Service Tax %";
            ServiceTaxEntryDtls."Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
            ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
            ServiceTaxEntryDtls."Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
            ServiceTaxEntryDtls."Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
            ServiceTaxEntryDtls.INSERT(TRUE);
          END;
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          Window.UPDATE(3,ROUND(LineCount / ServiceTaxOpening.COUNT * 10000,1));
        UNTIL ServiceTaxOpening.NEXT = 0;
        ServiceTaxOpening.DELETEALL(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostGenJnlLine@1500021(AccNo@1500003 : Code[20];BalAccType@1500004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';BalAccNo@1500005 : Code[20];Amt@1500006 : Decimal;DocType@1500001 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';VAR ServiceTaxOpening@1500000 : Record 16550);
    VAR
      ServiceTaxBatch@1500010 : Record 16551;
      Location@1500011 : Record 14;
      CompanyInfo@1500012 : Record 79;
      GenJnlLine@1500013 : Record 81;
    BEGIN
      WITH ServiceTaxOpening DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Document Type" := DocType;
        GenJnlLine."Account Type" := "Bal. Account Type (Interim)"::"G/L Account";
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine.VALIDATE("Account No.",AccNo);
        GenJnlLine.VALIDATE(Amount,Amt);
        GenJnlLine."Source Currency Amount" := Amt;
        GenJnlLine."Bal. Account Type" := BalAccType;
        GenJnlLine.VALIDATE("Bal. Account No.",BalAccNo);
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Document No." := "Document No.";
        GenJnlLine."External Document No." := "External Document No.";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";
        IF "Entry Type" = "Entry Type"::Opening THEN
          GenJnlLine.Description := Text16509
        ELSE
          GenJnlLine.Description := Text16524;
        GenJnlLine."Journal Batch Name" := "Journal Batch Name";
        GenJnlLine."Line No." := "Line No.";
        IF ServiceTaxBatch.GET("Journal Batch Name") THEN
          GenJnlLine."Source Code" := ServiceTaxBatch."Source Code";

        GenJnlLine."Location Code" := "Location Code";
        IF GenJnlLine.Amount <> 0 THEN BEGIN
          IF (GenJnlLine."Location Code" <> '') AND Location.GET(GenJnlLine."Location Code") THEN BEGIN
            IF (Type = Type::Sale) AND Location."Input Service Distributor" THEN
              ERROR(Text16529,Location.Code);
          END ELSE BEGIN
            CompanyInfo.GET;
            IF (Type = Type::Sale) AND CompanyInfo."Input Service Distributor" THEN
              ERROR(Text16530);
          END;
        END;
        RunGenJnlPostLine2(GenJnlLine,ServiceTaxOpening);
      END;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine2@1500012(VAR GenJnlLine@1000 : Record 81;ServiceTaxOpening@1001 : Record 16550);
    VAR
      GenJnlLine2@1500000 : Record 81;
    BEGIN
      GenJnlLine2 := GenJnlLine;
      GenJnlPostLine.RunWithCheck(GenJnlLine2);
    END;

    LOCAL PROCEDURE InsertSTasExciseUtilisation@1500019(STEntryDetails@1500001 : Record 16474;GenJnlLine@1500003 : Record 81;STAmount@1500004 : Decimal;eCessAmount@1500005 : Decimal;SHECessAmount@1500006 : Decimal);
    VAR
      STasExciseUtilisation@1500000 : Record 16570;
      NextSTasExciseEntryNo@1500002 : Integer;
    BEGIN
      STasExciseUtilisation.LOCKTABLE;
      IF STasExciseUtilisation.FINDLAST THEN
        NextSTasExciseEntryNo := STasExciseUtilisation."Entry No." + 1
      ELSE
        NextSTasExciseEntryNo := 1;
      STasExciseUtilisation.INIT;
      STasExciseUtilisation."Entry No." := NextSTasExciseEntryNo;
      STasExciseUtilisation."ST Entry Details Entry No." := STEntryDetails."Entry No.";
      STasExciseUtilisation."ST as Excise Utilisation" := STAmount;
      STasExciseUtilisation."ST eCess as Excise Utilisation" := eCessAmount;
      STasExciseUtilisation."ST SHECess Excise Utilisation" := SHECessAmount;
      STasExciseUtilisation."Location E.C. C. No." := GenJnlLine."E.C.C. No.";
      IF ECCNos.GET(STasExciseUtilisation."Location E.C. C. No.") THEN
        STasExciseUtilisation."Type of Unit" := ECCNos."Type of Unit";
      STasExciseUtilisation."Posting Date" := GenJnlLine."Posting Date";
      STasExciseUtilisation."Service Tax Amount" := STEntryDetails."Service Tax Amount";
      STasExciseUtilisation."Service Tax eCess Amount" := STEntryDetails."Service Tax eCess Amount";
      STasExciseUtilisation."Service Tax SHECess Amount" := STEntryDetails."Service Tax SHE Cess Amount";
      STasExciseUtilisation."Remaining Credit" := STEntryDetails."Remaining Credit";
      STasExciseUtilisation."Remaining Credit (eCess)" := STEntryDetails."Remaining Credit (eCess)";
      STasExciseUtilisation."Remaining Credit (SHE Cess)" := STEntryDetails."Remaining Credit (SHECess)";
      STasExciseUtilisation."Service Tax Registration No." := GenJnlLine."Service Tax Registration No.";
      STasExciseUtilisation."Document No." := GenJnlLine."Document No.";
      IF (STAmount <> 0) OR (eCessAmount <> 0) OR (SHECessAmount <> 0) THEN
        STasExciseUtilisation.INSERT;
    END;

    LOCAL PROCEDURE InsertIntoSTPmtECCNoWise@1500013(SvcTaxEntryDetail@1500001 : Record 16474;SvcTaxPmtBuffer@1500002 : Record 16476;Amt@1500006 : Decimal;AmteCess@1500007 : Decimal;AmtSHECess@1500008 : Decimal;KKCAmt@1500003 : Decimal);
    VAR
      STPmtECCNo@1500000 : Record 16571;
      EntryNo@1500004 : Integer;
    BEGIN
      STPmtECCNo.RESET;
      STPmtECCNo.SETRANGE("Document No.",SvcTaxPmtBuffer."Document No.");
      STPmtECCNo.SETRANGE("Service Tax Group Code",SvcTaxPmtBuffer."Service Tax Group Code");
      STPmtECCNo.SETRANGE("Location E.C.C. No.",SvcTaxEntryDetail."Location E.C.C. No.");
      IF NOT STPmtECCNo.FINDFIRST THEN BEGIN
        EntryNo := 0;
        STPmtECCNo.RESET;
        STPmtECCNo.LOCKTABLE;
        IF STPmtECCNo.FINDLAST THEN
          EntryNo := STPmtECCNo."Entry No." + 1
        ELSE
          EntryNo := 1;
        STPmtECCNo.INIT;
        STPmtECCNo."Entry No." := EntryNo;
        STPmtECCNo."Document No." := SvcTaxPmtBuffer."Document No.";
        STPmtECCNo."Posting Date" := SvcTaxPmtBuffer."Posting Date";
        STPmtECCNo."Service Tax Group Code" := SvcTaxPmtBuffer."Service Tax Group Code";
        STPmtECCNo."Credit availed" := Amt;
        STPmtECCNo."Credit availed (eCess)" := AmteCess;
        STPmtECCNo."Credit availed (SHECess)" := AmtSHECess;
        STPmtECCNo."Credit availed (KKC)" := KKCAmt;
        STPmtECCNo."Service Tax Registration No." := SvcTaxPmtBuffer."Service Tax Registration No.";
        IF SvcTaxPmtBuffer."Service Tax Group Code" <> '' THEN
          STPmtECCNo."Location E.C.C. No." := SvcTaxEntryDetail."Location E.C.C. No."
        ELSE
          STPmtECCNo."Location E.C.C. No." := SvcTaxPmtBuffer."E.C.C. No.";
        IF ECCNos.GET(STPmtECCNo."Location E.C.C. No.") THEN
          STPmtECCNo."Type of Unit" := ECCNos."Type of Unit";
        STPmtECCNo.INSERT;
      END ELSE BEGIN
        STPmtECCNo."Credit availed" += Amt;
        STPmtECCNo."Credit availed (eCess)" += AmteCess;
        STPmtECCNo."Credit availed (SHECess)" += AmtSHECess;
        STPmtECCNo."Credit availed (KKC)" += KKCAmt;
        STPmtECCNo.MODIFY;
      END;
    END;

    PROCEDURE SetSalesHeaderNo@1500025(SalesDocNo@1500000 : Code[20]);
    BEGIN
      SalesDocumentNo := SalesDocNo;
    END;

    PROCEDURE GetServiceTaxSetup@1500029(GenJnlLine@1500000 : Record 81);
    BEGIN
      ServiceTaxSetup.RESET;
      ServiceTaxSetup.SETRANGE(Code,GenJnlLine."Service Tax Group Code");
      ServiceTaxSetup.SETRANGE("From Date",0D,GenJnlLine."Posting Date");
      ServiceTaxSetup.FINDLAST;
    END;

    PROCEDURE UpdateSourceDocDetail@1500014(STPaymentBuffer@1500000 : Record 16476);
    VAR
      SourceDocumentDetail@1500001 : Record 16595;
    BEGIN
      SourceDocumentDetail.RESET;
      SourceDocumentDetail.SETRANGE("Document No.",STPaymentBuffer."Document No.");
      SourceDocumentDetail.SETRANGE("Service Tax Group Code",STPaymentBuffer."Service Tax Group Code");
      SourceDocumentDetail.SETRANGE("Line No.",STPaymentBuffer."Line No.");
      SourceDocumentDetail.SETRANGE("Service Tax Registration No.",STPaymentBuffer."Service Tax Registration No.");
      IF SourceDocumentDetail.FINDFIRST THEN
        SourceDocumentDetail.MODIFYALL(Posted,TRUE);
    END;

    LOCAL PROCEDURE GetPaymentDueDate@1500018(PostingDate@1500000 : Date) : Date;
    VAR
      STaxPeriodDueDate@1500001 : Record 16589;
    BEGIN
      STaxPeriodDueDate.RESET;
      STaxPeriodDueDate.SETCURRENTKEY("Starting Date");
      STaxPeriodDueDate.SETFILTER("Starting Date",'<=%1',PostingDate);
      STaxPeriodDueDate.SETFILTER("Ending Date",'>=%1',PostingDate);
      STaxPeriodDueDate.FINDFIRST;
      STaxPeriodDueDate.TESTFIELD("Payment Due Date");
      EXIT(STaxPeriodDueDate."Payment Due Date");
    END;

    PROCEDURE SetTransactionNo@1500099(TransactionNo@1500000 : Integer);
    BEGIN
      NextTransactionNo := TransactionNo;
    END;

    PROCEDURE SetRGSetOffDate@1500056(RGSetoffDate2@1500000 : Date);
    BEGIN
      RGSetOffDate := RGSetoffDate2;
    END;

    PROCEDURE ApplyCustPaymentCurrDiff@1500028(NewCVLedgEntryBuf@1280002 : Record 382;OldCVLedgEntryBuf@1280001 : Record 382;AppliedAmountLCY@1280000 : Decimal;STEntryNo@1500001 : Integer);
    VAR
      AppliedServiceTaxEntry@1500000 : Record 16473;
      ServiceTaxEntry@1280007 : Record 16473;
      ServiceTaxEntryDtls@1280006 : Record 16474;
      ServiceTaxSetup@1500002 : Record 16472;
      AmountToBeApplied@1280005 : Decimal;
      RemainingAmount@1280004 : Decimal;
    BEGIN
      ServiceTaxEntry.RESET;
      ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
      ServiceTaxEntry.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
      ServiceTaxEntry.SETRANGE("Posting Date",OldCVLedgEntryBuf."Posting Date");
      ServiceTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
      ServiceTaxEntry.SETRANGE("Entry No.",STEntryNo);
      IF ServiceTaxEntry.FIND('-') THEN
        REPEAT
          ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
          RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid");
          IF RemainingAmount > 0 THEN BEGIN
            IF RemainingAmount >= AppliedAmountLCY THEN
              AmountToBeApplied := AppliedAmountLCY
            ELSE
              AmountToBeApplied := RemainingAmount;
            AppliedAmountLCY := AppliedAmountLCY - AmountToBeApplied;

            CalcServiceTaxAmtsToBeApplied(ServiceTaxEntry,AmountToBeApplied,AppliedServiceTaxEntry);

            ServiceTaxEntryDtls.INIT;
            ServiceTaxEntryDtls."Entry No." := 0;
            ServiceTaxEntryDtls."Service Tax Entry No." := ServiceTaxEntry."Entry No.";
            ServiceTaxEntryDtls.Type := ServiceTaxEntry.Type;
            ServiceTaxEntryDtls."Document No." := NewCVLedgEntryBuf."Document No.";
            ServiceTaxEntryDtls."Posting Date" := NewCVLedgEntryBuf."Posting Date";
            ServiceTaxEntryDtls."Document Type" := NewCVLedgEntryBuf."Document Type";
            IF ServiceTaxEntryDtls."Document Type" = ServiceTaxEntryDtls."Document Type"::Refund THEN BEGIN
              ServiceTaxEntryDtls."Base Amount" := AmountToBeApplied -
                (AppliedServiceTaxEntry.FullTaxAmount + AppliedServiceTaxEntry.FullTaxSBCAmount + AppliedServiceTaxEntry.KKCessAmount);
              ServiceTaxEntryDtls."Service Tax Amount" := AppliedServiceTaxEntry."Service Tax Amount";
              ServiceTaxEntryDtls."Service Tax SBC Amount" := AppliedServiceTaxEntry."Service Tax SBC Amount";
              ServiceTaxEntryDtls."KK Cess Amount" := AppliedServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntryDtls."Service Tax eCess Amount" := AppliedServiceTaxEntry."eCess Amount";
              ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := AppliedServiceTaxEntry."SHE Cess Amount";
              ServiceTaxEntryDtls.Amount := AmountToBeApplied;
            END ELSE BEGIN
              ServiceTaxEntryDtls."Base Amount" := -
              (AmountToBeApplied - (AppliedServiceTaxEntry.FullTaxAmount +
                                     AppliedServiceTaxEntry.FullTaxSBCAmount +
                                     AppliedServiceTaxEntry.KKCessAmount));
              ServiceTaxEntryDtls."Service Tax Amount" := -AppliedServiceTaxEntry."Service Tax Amount";
              ServiceTaxEntryDtls."Service Tax SBC Amount" := -AppliedServiceTaxEntry."Service Tax SBC Amount";
              ServiceTaxEntryDtls."KK Cess Amount" := -AppliedServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntryDtls."Service Tax eCess Amount" := -AppliedServiceTaxEntry."eCess Amount";
              ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := -AppliedServiceTaxEntry."SHE Cess Amount";
              ServiceTaxEntryDtls.Amount := -AmountToBeApplied;
            END;
            ServiceTaxEntryDtls.Positive := ServiceTaxEntryDtls."Service Tax Amount" > 0;
            ServiceTaxEntryDtls."Transaction No." := NewCVLedgEntryBuf."Transaction No.";
            ServiceTaxEntryDtls."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
            ServiceTaxSetup.FindOnDate(ServiceTaxEntry."Service Tax Group Code",NewCVLedgEntryBuf."Posting Date");
            ServiceTaxSetup.TESTFIELD("Service Tax Payable Account");
            ServiceTaxEntryDtls."GL Account" := ServiceTaxSetup."Service Tax Payable Account";
            ServiceTaxEntryDtls."Service Tax SBC %" := ServiceTaxEntry."Service Tax SBC %";
            IF ServiceTaxEntryDtls."Service Tax SBC %" <> 0 THEN
            ServiceTaxSetup.TESTFIELD("SB Cess Payable Account");
            ServiceTaxEntryDtls."SBC G/L Account" := ServiceTaxSetup."SB Cess Payable Account";
            ServiceTaxEntryDtls."KK Cess%" := ServiceTaxEntry."KK Cess%";
            IF ServiceTaxEntryDtls."KK Cess%" <> 0 THEN
              ServiceTaxSetup.TESTFIELD("KK Cess Payable Account");
            ServiceTaxEntryDtls."KK Cess G/L Account" := ServiceTaxSetup."KK Cess Payable Account";
            ServiceTaxEntryDtls."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
            ServiceTaxEntryDtls."Location E.C.C. No." := ServiceTaxEntry."Location E.C.C. No.";
            ServiceTaxEntryDtls."Serv. Tax on Advance Payment" := ServiceTaxEntry."Serv. Tax on Advance Payment";
            IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
              ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
            ServiceTaxEntryDtls."Location Code" := ServiceTaxEntry."Location Code";
            ServiceTaxEntryDtls."Service Tax Abatement %" := ServiceTaxEntry."Service Tax Abatement";
            ServiceTaxEntryDtls."ST Pure Agent" := ServiceTaxEntry."ST Pure Agent";
            ServiceTaxEntryDtls."Nature of Services" := ServiceTaxEntry."Nature of Services";
            ServiceTaxEntryDtls."Service Tax %" := ServiceTaxEntry."Service Tax %";
            ServiceTaxEntryDtls."Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
            ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
            ServiceTaxEntryDtls.INSERT(TRUE);
          END;
        UNTIL ((ServiceTaxEntry.NEXT = 0) OR (AppliedAmountLCY = 0));
    END;

    PROCEDURE AdjustCustServTaxInvoice@1500041(NewCVLedgEntryBuf@1280001 : Record 382;OldCVLedgEntryBuf@1001 : Record 382;AppliedAmountLCY@1280002 : Decimal;OffLineApplication@1002 : Boolean;VAR STAmountApplied@1500004 : Decimal;VAR STGroupCode@1500005 : Code[20];VAR STPmtPostingDate@1500006 : Date;VAR STSBCAmountApplied@1500443 : Decimal;VAR KKCessAmountApplied@1500000 : Decimal);
    VAR
      AppliedServiceTaxEntry@1500009 : Record 16473;
      ServiceTaxEntry@1500007 : Record 16473;
      ServiceTaxEntryPmt@1280004 : Record 16473;
      ServiceTaxEntryDtls@1500001 : Record 16474;
      ServiceTaxEntryDtls2@1500002 : Record 16474;
      AmountToBeApplied@1280005 : Decimal;
      RemainingAmount@1280006 : Decimal;
      EntryNo@1500008 : Integer;
      InvoiceAdjusted@1500003 : Boolean;
    BEGIN
      ServiceTaxEntryPmt.RESET;
      ServiceTaxEntryPmt.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
      ServiceTaxEntryPmt.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
      ServiceTaxEntryPmt.SETRANGE("Posting Date",OldCVLedgEntryBuf."Posting Date");
      ServiceTaxEntryPmt.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
      ServiceTaxEntryPmt.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
      ServiceTaxEntryPmt.SETRANGE("ST Pure Agent",FALSE);
      IF NOT ServiceTaxEntryPmt.FINDFIRST THEN
        EXIT;
      STGroupCode := ServiceTaxEntryPmt."Service Tax Group Code";
      STPmtPostingDate := ServiceTaxEntryPmt."Posting Date";

      ServiceTaxEntry.RESET;
      ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.",
        "Service Tax Group Code","Service Tax Registration No.");
      ServiceTaxEntry.SETRANGE("Document No.",NewCVLedgEntryBuf."Document No.");
      ServiceTaxEntry.SETRANGE("Posting Date",NewCVLedgEntryBuf."Posting Date");
      ServiceTaxEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
      ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Sale);
      ServiceTaxEntry.SETRANGE("Service Tax Group Code",ServiceTaxEntryPmt."Service Tax Group Code");
      ServiceTaxEntry.SETRANGE("Service Tax Registration No.",ServiceTaxEntryPmt."Service Tax Registration No.");
      ServiceTaxEntry.SETRANGE("ST Pure Agent",FALSE);
      IF ServiceTaxEntry.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF NOT PostedFromOrder THEN BEGIN
            InitCustServiceTaxApplication(ServiceTaxEntry);
            ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
            IF NOT ServiceTaxEntry.PoT OR NOT ServiceTaxEntryPmt."Serv. Tax on Advance Payment" THEN
              RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax" - ServiceTaxEntry."Amount Received/Paid")
            ELSE BEGIN
              RemainingAmount := ABS(ServiceTaxEntry."Amount Including Service Tax");
              InvoiceAdjusted := RemainingAmount <= AppliedAmountLCY;
            END;
            IF RemainingAmount > 0 THEN BEGIN
              IF RemainingAmount >= AppliedAmountLCY THEN
                AmountToBeApplied := AppliedAmountLCY
              ELSE
                AmountToBeApplied := RemainingAmount;
              AppliedAmountLCY := AppliedAmountLCY - AmountToBeApplied;
              IF NOT InvoiceAdjusted THEN BEGIN
                CalcServiceTaxAmtsToBeApplied(ServiceTaxEntry,AmountToBeApplied,AppliedServiceTaxEntry);
              END ELSE BEGIN
                AppliedServiceTaxEntry."SHE Cess Amount" := -ServiceTaxEntry."SHE Cess Amount";
                AppliedServiceTaxEntry."eCess Amount" := -ServiceTaxEntry."eCess Amount";
                AppliedServiceTaxEntry."Service Tax Amount" := -ServiceTaxEntry."Service Tax Amount";
                AppliedServiceTaxEntry."Service Tax SBC Amount" := -ServiceTaxEntry."Service Tax SBC Amount";
                AppliedServiceTaxEntry."KK Cess Amount" := -ServiceTaxEntry."KK Cess Amount";
              END;

              ServiceTaxEntry."Service Tax Amount" += AppliedServiceTaxEntry."Service Tax Amount";
              ServiceTaxEntry."Service Tax SBC Amount" += AppliedServiceTaxEntry."Service Tax SBC Amount";
              ServiceTaxEntry."KK Cess Amount" += AppliedServiceTaxEntry."KK Cess Amount";
              ServiceTaxEntry."eCess Amount" += AppliedServiceTaxEntry."eCess Amount";
              ServiceTaxEntry."SHE Cess Amount" += AppliedServiceTaxEntry."SHE Cess Amount";
              ServiceTaxEntry."Service Tax Base Amount" +=
                AmountToBeApplied - (AppliedServiceTaxEntry.FullTaxAmount +
                                      AppliedServiceTaxEntry.FullTaxSBCAmount +
                                      AppliedServiceTaxEntry.KKCessAmount);
              ServiceTaxEntry."Amount Including Service Tax" += AmountToBeApplied;
              IF ServiceTaxEntry."Amount Including Service Tax" = 0 THEN BEGIN
                ServiceTaxEntry."Service Tax Amount" := 0;
                ServiceTaxEntry."Service Tax SBC Amount" := 0;
                ServiceTaxEntry."KK Cess Amount" := 0;
                ServiceTaxEntry."eCess Amount" := 0;
                ServiceTaxEntry."SHE Cess Amount" := 0;
                ServiceTaxEntry."Service Tax Base Amount" := 0;
              END;
              IF ((ServiceTaxEntry."Service Tax Base Amount" + ServiceTaxEntry."Service Tax Amount" +
                  ServiceTaxEntry."Service Tax SBC Amount" + ServiceTaxEntry."KK Cess Amount" = 0) OR
                  (ServiceTaxEntry."Service Tax Amount" + ServiceTaxEntry."eCess Amount" +
                   ServiceTaxEntry."SHE Cess Amount" = 0)) AND (NOT OffLineApplication)
              THEN
                ServiceTaxEntry.DELETE
              ELSE
                ServiceTaxEntry.MODIFY;
              IF ServiceTaxEntry.PoT THEN BEGIN
                ServiceTaxEntryDtls.SETRANGE("Service Tax Entry No.",ServiceTaxEntry."Entry No.");
                ServiceTaxEntryDtls.SETRANGE("Transaction No.",ServiceTaxEntry."Transaction No.");
                IF ServiceTaxEntryDtls.FINDFIRST THEN BEGIN
                  ServiceTaxEntryDtls2.TRANSFERFIELDS(ServiceTaxEntryDtls);
                  ServiceTaxEntryDtls2."Entry No." := 0;
                  ServiceTaxEntryDtls2.Amount := AmountToBeApplied;
                  ServiceTaxEntryDtls2."Base Amount" := AmountToBeApplied -
                    (AppliedServiceTaxEntry.FullTaxAmount +
                      AppliedServiceTaxEntry.FullTaxSBCAmount + AppliedServiceTaxEntry.KKCessAmount);
                  ServiceTaxEntryDtls2."Service Tax Amount" := ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."Service Tax Amount");
                  ServiceTaxEntryDtls2."Service Tax SBC Amount" := ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."Service Tax SBC Amount");
                  ServiceTaxEntryDtls2."KK Cess Amount" := ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."KK Cess Amount");
                  ServiceTaxEntryDtls2."Service Tax eCess Amount" := ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."eCess Amount");
                  ServiceTaxEntryDtls2."Service Tax SHE Cess Amount" :=
                    ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."SHE Cess Amount");
                  ServiceTaxEntryDtls2.INSERT;
                END;
              END;
            END;
          END;
          STAmountApplied +=
            ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."Service Tax Amount") +
            ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."eCess Amount") +
            ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."SHE Cess Amount");
          STSBCAmountApplied +=
            ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."Service Tax SBC Amount");
          KKCessAmountApplied +=
            ServiceTaxEntry.RoundAmount(AppliedServiceTaxEntry."KK Cess Amount");
        UNTIL ((ServiceTaxEntry.NEXT = 0) OR (AppliedAmountLCY = 0));
    END;

    LOCAL PROCEDURE InitCustServiceTaxApplication@1500033(ServiceTaxEntry@1000 : Record 16473);
    VAR
      ServiceTaxApplication@1002 : Record 16530;
    BEGIN
      ServiceTaxApplication.INIT;
      ServiceTaxApplication.Type := ServiceTaxApplication.Type::Sale;
      ServiceTaxApplication."Inv. ST Entry No." := ServiceTaxEntry."Entry No.";
      ServiceTaxApplication."Transaction No." := NextTransactionNo;
      ServiceTaxApplication."Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
      ServiceTaxApplication."Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
      ServiceTaxApplication."Service Tax Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
      ServiceTaxApplication."Service Tax Amount" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxApplication."Service Tax eCess Amount" := ServiceTaxEntry."eCess Amount";
      ServiceTaxApplication."Service Tax SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxApplication."Service Tax SBC Amount" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxApplication."KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxApplication."Amount Including Service Tax" := ServiceTaxEntry."Amount Including Service Tax";
      IF NOT ServiceTaxApplication.INSERT THEN
        EXIT;
    END;

    PROCEDURE CheckCustInvoiceSTAmt@1500035(NewCVLedgEntryBuf@1001 : Record 382;OldCVLedgEntryBuf@1000 : Record 382;VAR STAmt@1002 : Decimal;VAR STeCess@1003 : Decimal;VAR STSHECess@1004 : Decimal;VAR STSBCAmt@1500445 : Decimal;VAR KKCessAmt@1500001 : Decimal;AppliedAmtLCY@1005 : Decimal;GroupCode@1006 : Code[20];STRegNo@1007 : Code[20];STEntryNo@1500000 : Integer);
    VAR
      ServiceTaxEntry@1008 : Record 16473;
      CustLedgEntry@1009 : Record 21;
      Sign@1011 : Integer;
    BEGIN
      IF STAmt = 0 THEN
        EXIT;
      IF CheckCrMemoInApplnEntry(NewCVLedgEntryBuf,OldCVLedgEntryBuf,DATABASE::"Cust. Ledger Entry") THEN
        EXIT;
      Sign := STAmt / ABS(STAmt);
      IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
        IF NOT CustLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        CustLedgEntry.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
        IF (ABS(CustLedgEntry."Remaining Amt. (LCY)") <= ABS(AppliedAmtLCY)) OR
           (ABS(CustLedgEntry."Amount (LCY)") = ABS(TotalAppliedAmount))
        THEN BEGIN
          ExecuteDiffAdjustment := TRUE;
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Document No.",NewCVLedgEntryBuf."Document No.");
          ServiceTaxEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
          ServiceTaxEntry.SETRANGE("Service Tax Group Code",GroupCode);
          ServiceTaxEntry.SETRANGE("Service Tax Registration No.",STRegNo);
          IF ServiceTaxEntry.FINDFIRST THEN
            UpdateAppliedServTaxAmounts(ServiceTaxEntry,STAmt,STeCess,STSHECess,STSBCAmt,KKCessAmt);
        END ELSE BEGIN
          IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF CustLedgEntry."Serv. Tax on Advance Payment" THEN
            EXIT;
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Document No.",NewCVLedgEntryBuf."Document No.");
          ServiceTaxEntry.SETRANGE("Transaction No.",NewCVLedgEntryBuf."Transaction No.");
          ServiceTaxEntry.SETRANGE("Service Tax Group Code",GroupCode);
          ServiceTaxEntry.SETRANGE("Service Tax Registration No.",STRegNo);
          ServiceTaxEntry.SETRANGE("Entry No.",STEntryNo);
          IF ServiceTaxEntry.FINDFIRST THEN BEGIN
            ServiceTaxEntry.CALCFIELDS("Amount Received/Paid");
            IF NOT (AppliedAmtLCY + ServiceTaxEntry."Amount Received/Paid" = ServiceTaxEntry."Amount Including Service Tax") THEN
              EXIT;
            UpdateAppliedServTaxAmounts(ServiceTaxEntry,STAmt,STeCess,STSHECess,STSBCAmt,KKCessAmt);
          END;
        END;
      END;
      IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
        IF NOT CustLedgEntry.GET(OldCVLedgEntryBuf."Entry No.") THEN
          EXIT;
        CustLedgEntry.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
        IF (ABS(CustLedgEntry."Remaining Amt. (LCY)") <= ABS(AppliedAmtLCY)) OR
           (ABS(CustLedgEntry."Amount (LCY)") = ABS(TotalAppliedAmount))
        THEN BEGIN
          ExecuteDiffAdjustment := TRUE;
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
          ServiceTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
          ServiceTaxEntry.SETRANGE("Service Tax Group Code",GroupCode);
          ServiceTaxEntry.SETRANGE("Service Tax Registration No.",STRegNo);
          IF ServiceTaxEntry.FINDFIRST THEN
            UpdateAppliedServTaxAmounts(ServiceTaxEntry,STAmt,STeCess,STSHECess,STSBCAmt,KKCessAmt);
        END ELSE BEGIN
          IF NOT CustLedgEntry.GET(NewCVLedgEntryBuf."Entry No.") THEN
            EXIT;
          IF CustLedgEntry."Serv. Tax on Advance Payment" THEN
            EXIT;
          ServiceTaxEntry.RESET;
          ServiceTaxEntry.SETRANGE("Document No.",OldCVLedgEntryBuf."Document No.");
          ServiceTaxEntry.SETRANGE("Transaction No.",OldCVLedgEntryBuf."Transaction No.");
          ServiceTaxEntry.SETRANGE("Service Tax Group Code",GroupCode);
          ServiceTaxEntry.SETRANGE("Service Tax Registration No.",STRegNo);
          ServiceTaxEntry.SETRANGE("Entry No.",STEntryNo);
          IF ServiceTaxEntry.FINDFIRST THEN BEGIN
            IF NOT (AppliedAmtLCY + ServiceTaxEntry."Amount Received/Paid" = ServiceTaxEntry."Amount Including Service Tax") THEN
              EXIT;
            UpdateAppliedServTaxAmounts(ServiceTaxEntry,STAmt,STeCess,STSHECess,STSBCAmt,KKCessAmt);
          END;
        END;
      END;
      STAmt := STAmt * Sign;
      STeCess := STeCess * Sign;
      STSHECess := STSHECess * Sign;
      STSBCAmt := STSBCAmt * Sign;
      KKCessAmt := KKCessAmt * Sign;
    END;

    PROCEDURE SetTotalAppliedAmt@1500036(TotAppliedAmt@1000 : Decimal);
    BEGIN
      TotalAppliedAmount := TotAppliedAmt;
    END;

    PROCEDURE SetDocumentNoPostingDate@1500039(DocumentNo2@1000 : Code[20];PostingDate2@1001 : Date);
    BEGIN
      DocumentNo := DocumentNo2;
      PostingDate := PostingDate2;
    END;

    PROCEDURE CheckCrMemoInApplnEntry@1500060(NewCVLedgEntryBuf@150063 : Record 382;OldCVLedgEntryBuf@150064 : Record 382;TableID@150065 : Integer) : Boolean;
    VAR
      DtldCustLedEntry@150062 : Record 379;
      DtldCustLedEntry2@150066 : Record 379;
      CustLedgEntry2@150067 : Record 21;
      DtldVendLedEntry@150068 : Record 380;
      DtldVendLedEntry2@150069 : Record 380;
      VendLedgEntry2@150070 : Record 25;
    BEGIN
      IF TableID = DATABASE::"Cust. Ledger Entry" THEN BEGIN
        IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
          IF NOT CustLedgEntry2.GET(NewCVLedgEntryBuf."Entry No.") THEN
            EXIT;
        END;
        IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
          IF NOT CustLedgEntry2.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
        END;
        DtldCustLedEntry.RESET;
        DtldCustLedEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry2."Entry No.");
        IF DtldCustLedEntry.FINDSET THEN
          REPEAT
            DtldCustLedEntry2.RESET;
            DtldCustLedEntry2.SETRANGE("Entry Type",DtldCustLedEntry2."Entry Type"::Application);
            DtldCustLedEntry2.SETRANGE("Transaction No.",DtldCustLedEntry."Transaction No.");
            DtldCustLedEntry2.SETRANGE(
              "Initial Document Type",DtldCustLedEntry2."Initial Document Type"::"Credit Memo");
            IF DtldCustLedEntry2.FINDFIRST THEN
              EXIT(TRUE);
          UNTIL DtldCustLedEntry.NEXT = 0;
        EXIT(FALSE);
      END;
      IF TableID = DATABASE::"Vendor Ledger Entry" THEN BEGIN
        IF NewCVLedgEntryBuf."Document Type" = NewCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
          IF NOT VendLedgEntry2.GET(NewCVLedgEntryBuf."Entry No.") THEN
            EXIT;
        END;
        IF OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::Invoice THEN BEGIN
          IF NOT VendLedgEntry2.GET(OldCVLedgEntryBuf."Entry No.") THEN
            EXIT;
        END;
        DtldVendLedEntry.RESET;
        DtldVendLedEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry2."Entry No.");
        IF DtldVendLedEntry.FINDSET THEN
          REPEAT
            DtldVendLedEntry2.RESET;
            DtldVendLedEntry2.SETRANGE("Entry Type",DtldVendLedEntry2."Entry Type"::Application);
            DtldVendLedEntry2.SETRANGE("Transaction No.",DtldVendLedEntry."Transaction No.");
            DtldVendLedEntry2.SETRANGE(
              "Initial Document Type",DtldVendLedEntry2."Initial Document Type"::"Credit Memo");
            IF DtldVendLedEntry2.FINDFIRST THEN
              EXIT(TRUE);
          UNTIL DtldVendLedEntry.NEXT = 0;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE GetBalanceBaseAmt@1500076(STEntry@1500078 : Record 16473;VAR STEntryDetailAmt@1500079 : Decimal;VAR STENtryDetailBaseAmt@1500080 : Decimal) : Decimal;
    VAR
      STEntryDetail@1500077 : Record 16474;
    BEGIN
      STEntryDetail.RESET;
      STEntryDetail.SETCURRENTKEY("Service Tax Entry No.");
      STEntryDetail.SETRANGE("Service Tax Entry No.",STEntry."Entry No.");
      STEntryDetail.CALCSUMS(Amount,"Base Amount");
      IF STENtryDetailBaseAmt < STEntry."Service Tax Base Amount" - STEntryDetail."Base Amount" THEN BEGIN
        STENtryDetailBaseAmt :=
          STEntry."Service Tax Base Amount" - STEntryDetail."Base Amount";
        IF STEntryDetailAmt < STEntry."Amount Including Service Tax" - STEntryDetail.Amount THEN
          STEntryDetailAmt :=
            STEntry."Amount Including Service Tax" - STEntryDetail.Amount;
      END;
    END;

    PROCEDURE SetPostingStatus@1500045(PostedFromOrder2@1500000 : Boolean);
    BEGIN
      PostedFromOrder := PostedFromOrder2;
    END;

    PROCEDURE InsertServiceTaxEntryDetail@1500042(ServTaxEntry@1500000 : Record 16473;ServTaxEntryNo@1500002 : Integer;TransactionNo@1500003 : Integer;ServTaxBaseAmt@1500004 : Decimal;ServTaxAmt@1500005 : Decimal;ServTaxeCessAmt@1500006 : Decimal;ServTaxSHECessAmt@1500007 : Decimal;ServTaxSBCAmt@1500447 : Decimal;KKCessAmt@1500009 : Decimal;BlankRemainingCredit@1500008 : Boolean);
    VAR
      ServiceTaxEntryDtls@1500001 : Record 16474;
    BEGIN
      ServiceTaxEntryDtls.INIT;
      ServiceTaxEntryDtls."Entry No." := 0;
      ServiceTaxEntryDtls."Service Tax Entry No." := ServTaxEntryNo;
      ServiceTaxEntryDtls."Entry Type" := ServTaxEntry."Entry Type";
      ServiceTaxEntryDtls."Corrective Application Entry" := ServTaxEntry."Corrected Appln. Entry No." <> 0;
      ServiceTaxEntryDtls.Type := ServTaxEntry.Type;
      ServiceTaxEntryDtls."Document No." := ServTaxEntry."Document No.";
      ServiceTaxEntryDtls."Posting Date" := ServTaxEntry."Posting Date";
      ServiceTaxEntryDtls."Document Type" := ServTaxEntry."Document Type";
      ServiceTaxEntryDtls."Service Tax Amount" := ServTaxAmt;
      ServiceTaxEntryDtls."Service Tax eCess Amount" := ServTaxeCessAmt;
      ServiceTaxEntryDtls."Service Tax SHE Cess Amount" := ServTaxSHECessAmt;
      ServiceTaxEntryDtls."Service Tax SBC Amount" := ServTaxSBCAmt;
      ServiceTaxEntryDtls."KK Cess Amount" := KKCessAmt;
      ServiceTaxEntryDtls."Reverse Charge" := ServTaxEntry."Reverse Charge";
      IF ServiceTaxEntryDtls."Reverse Charge" THEN
        ServiceTaxEntryDtls.Amount := ServTaxBaseAmt
      ELSE
        ServiceTaxEntryDtls.Amount :=
          ServTaxBaseAmt + ServTaxAmt + ServTaxeCessAmt +
          ServTaxSHECessAmt + ServTaxSBCAmt + KKCessAmt;
      ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" := ServTaxEntry."Service Type (Rev. Chrg.)";
      ServiceTaxEntryDtls.PoT := ServTaxEntry.PoT;
      IF ServiceTaxEntryDtls.Type = ServiceTaxEntryDtls.Type::Purchase THEN
        InitRemainingCreditAmounts(ServiceTaxEntryDtls,BlankRemainingCredit);
      ServiceTaxEntryDtls.Positive := ServiceTaxEntryDtls."Service Tax Amount" > 0;
      ServiceTaxEntryDtls."Transaction No." := TransactionNo;
      ServiceTaxEntryDtls."Service Tax Registration No." := ServTaxEntry."Service Tax Registration No.";
      ServiceTaxEntryDtls."Base Amount" := ServTaxBaseAmt;
      ServiceTaxEntryDtls."GL Account" := ServTaxEntry."G/L Account No.";
      ServiceTaxEntryDtls."Service Tax Group Code" := ServTaxEntry."Service Tax Group Code";
      ServiceTaxEntryDtls."Location E.C.C. No." := ServTaxEntry."Location E.C.C. No.";
      ServiceTaxEntryDtls."Serv. Tax on Advance Payment" := ServTaxEntry."Serv. Tax on Advance Payment";
      ServiceTaxEntryDtls."Service Tax Rounding Precision" := ServTaxEntry."Service Tax Rounding Precision";
      ServiceTaxEntryDtls."Service Tax Rounding Type" := ServTaxEntry."Service Tax Rounding Type";
      IF ECCNos.GET(ServiceTaxEntryDtls."Location E.C.C. No.") THEN
        ServiceTaxEntryDtls."Type of Unit" := ECCNos."Type of Unit";
      ServiceTaxEntryDtls."Location Code" := ServTaxEntry."Location Code";
      ServiceTaxEntryDtls."Service Tax Abatement %" := ServTaxEntry."Service Tax Abatement";
      ServiceTaxEntryDtls."ST Pure Agent" := ServTaxEntry."ST Pure Agent";
      ServiceTaxEntryDtls."Nature of Services" := ServTaxEntry."Nature of Services";
      ServiceTaxEntryDtls."Service Tax %" := ServTaxEntry."Service Tax %";
      ServiceTaxEntryDtls."Service Tax eCess %" := ServTaxEntry."Service Tax eCess %";
      ServiceTaxEntryDtls."Service Tax SHE Cess %" := ServTaxEntry."Service Tax SHE Cess %";
      ServiceTaxEntryDtls."Service Tax SBC %" := ServTaxEntry."Service Tax SBC %";
      ServiceTaxEntryDtls."SBC G/L Account" := ServTaxEntry."SBC G/L Account";
      ServiceTaxEntryDtls."KK Cess%" := ServTaxEntry."KK Cess%";
      ServiceTaxEntryDtls."KK Cess G/L Account" := ServTaxEntry."KK Cess G/L Account";

      ServiceTaxEntryDtls.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InitRemainingCreditAmounts@1500067(VAR ServiceTaxEntryDtls@1500000 : Record 16474;CloseRemainingCredit@1500001 : Boolean);
    BEGIN
      WITH ServiceTaxEntryDtls DO
        IF CloseRemainingCredit THEN BEGIN
          IF "Reverse Charge" THEN BEGIN
            "Closed Reverse Charge" := TRUE;
            "Closed Reverse Charge (eCESS)" := TRUE;
            "Closed Rev. Charge (SHECess)" := TRUE;
            "Closed Reversed (SBC)" := TRUE;
            "Closed Reversed (KK Cess)" := TRUE;
          END;
          Closed := TRUE;
          "Closed (eCess)" := TRUE;
          "Closed (SHECess)" := TRUE;
          "Closed (SBC)" := TRUE;
          "Closed (KK Cess)" := TRUE;
        END ELSE
          IF "Reverse Charge" THEN BEGIN
            "Rev. Chrg. Remaining Credit" := "Service Tax Amount";
            "Rev. Chrg. Rem. Credit (eCESS)" := "Service Tax eCess Amount";
            "Rev. Chrg. Rem. Cr. (SHECess)" := "Service Tax SHE Cess Amount";
            "Rev. Chrg. Rem. Credit (SBC)" := "Service Tax SBC Amount";
            "Rev. Chrg. Rem. Credit (KKC)" := "KK Cess Amount";
          END ELSE BEGIN
            "Remaining Credit" := "Service Tax Amount";
            "Remaining Credit (eCess)" := "Service Tax eCess Amount";
            "Remaining Credit (SHECess)" := "Service Tax SHE Cess Amount";
            "Remaining Credit (SBC)" := "Service Tax SBC Amount";
            "Remaining Credit (KK Cess)" := "KK Cess Amount"
          END;
    END;

    PROCEDURE InitCustServiceTaxApplOnline@1500043(ServiceTaxBuffer@1500000 : Record 16478);
    VAR
      ServiceTaxApplicationOnline@1500001 : Record 16575;
    BEGIN
      ServiceTaxApplicationOnline.TRANSFERFIELDS(ServiceTaxBuffer);
      ServiceTaxApplicationOnline."Transaction No." := NextTransactionNo;
      ServiceTaxApplicationOnline.INSERT;
    END;

    PROCEDURE InitSTEntryCust@1500044(CustLedgerEntryInv@1500001 : Record 21;ServiceTaxEntryPay@1500002 : Record 16473;STApplicationOnline@1500003 : Record 16575;VAR NextServiceTaxEntryNo@1500000 : Integer);
    VAR
      ServiceTaxEntry@1500004 : Record 16473;
    BEGIN
      ServiceTaxEntry.INIT;
      ServiceTaxEntry."Entry No." := 0;
      ServiceTaxEntry."Document No." := CustLedgerEntryInv."Document No.";
      ServiceTaxEntry."Posting Date" := CustLedgerEntryInv."Posting Date";
      ServiceTaxEntry."Transaction No." := CustLedgerEntryInv."Transaction No.";
      ServiceTaxEntry."Document Type" := CustLedgerEntryInv."Document Type";

      ServiceTaxEntry.Type := ServiceTaxEntryPay.Type;
      ServiceTaxEntry."Service Tax %" := ServiceTaxEntryPay."Service Tax %";
      ServiceTaxEntry."G/L Account No." := ServiceTaxEntryPay."PoT G/L Account";
      ServiceTaxEntry."SBC G/L Account" := ServiceTaxEntryPay."SBC G/L Account";
      ServiceTaxEntry."KK Cess G/L Account" := ServiceTaxEntryPay."KK Cess G/L Account";
      ServiceTaxEntry."Service Tax eCess %" := ServiceTaxEntryPay."Service Tax eCess %";
      ServiceTaxEntry."Party Code" := ServiceTaxEntryPay."Party Code";
      ServiceTaxEntry."Line No." := ServiceTaxEntryPay."Line No.";
      ServiceTaxEntry."Reverse Charge" := ServiceTaxEntryPay."Reverse Charge";
      ServiceTaxEntry.Positive := ServiceTaxEntryPay.Positive;
      ServiceTaxEntry."Service Type (Rev. Chrg.)" := ServiceTaxEntryPay."Service Type (Rev. Chrg.)";
      ServiceTaxEntry."Service Tax SHE Cess %" := ServiceTaxEntryPay."Service Tax SHE Cess %";
      ServiceTaxEntry."Location Code" := ServiceTaxEntryPay."Location Code";
      ServiceTaxEntry."Input Service Distribution" := ServiceTaxEntryPay."Input Service Distribution";
      ServiceTaxEntry."Nature of Services" := ServiceTaxEntryPay."Nature of Services";
      ServiceTaxEntry."ST Pure Agent" := ServiceTaxEntryPay."ST Pure Agent";
      ServiceTaxEntry."Service Tax Group Code" := ServiceTaxEntryPay."Service Tax Group Code";
      ServiceTaxEntry."Service Tax Registration No." := ServiceTaxEntryPay."Service Tax Registration No.";
      ServiceTaxEntry."Location E.C.C. No." := ServiceTaxEntryPay."Location E.C.C. No.";
      ServiceTaxEntry."Service Tax Rounding Precision" := ServiceTaxEntryPay."Service Tax Rounding Precision";
      ServiceTaxEntry."Service Tax Rounding Type" := ServiceTaxEntryPay."Service Tax Rounding Type";
      ServiceTaxEntry.PoT := ServiceTaxEntryPay.PoT;

      ServiceTaxEntry."Service Tax Base Amount" := STApplicationOnline."S. Tax Base Amount (Intm)";
      ServiceTaxEntry."Service Tax Amount" := STApplicationOnline."S. Tax Amount (Intm)";
      ServiceTaxEntry."KK Cess Amount" := STApplicationOnline."KK Cess Amount (Intm)";
      ServiceTaxEntry."eCess Amount" := STApplicationOnline."S. Tax eCess Amount (Intm)";
      ServiceTaxEntry."SHE Cess Amount" := STApplicationOnline."S. Tax SHE Cess Amount (Intm)";
      ServiceTaxEntry."Amount Including Service Tax" := STApplicationOnline."Amt. Incl. Service Tax (Intm)";

      ServiceTaxEntry."Service Tax SBC %" := ServiceTaxEntryPay."Service Tax SBC %";
      ServiceTaxEntry."KK Cess%" := ServiceTaxEntryPay."KK Cess%";
      ServiceTaxEntry."Service Tax SBC Amount" := STApplicationOnline."S. Tax SBC Amount (Intm)";
      ServiceTaxEntry."Remaining KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxEntry."Remaining Serv. Tax Amt" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntry."Remaining Serv. Tax SBC Amt" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntry."Remaining Serv. Tax eCess Amt" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntry."Remaining Serv. Tax Base Amt" := ServiceTaxEntry."Service Tax Base Amount";
      ServiceTaxEntry."Remaining Serv Tax SHECess Amt" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxEntry."Original S.T. Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
      ServiceTaxEntry."Original S.T. Amount" := ServiceTaxEntry."Service Tax Amount";
      ServiceTaxEntry."Original KK Cess Amount" := ServiceTaxEntry."KK Cess Amount";
      ServiceTaxEntry."Original S.T. eCess Amount" := ServiceTaxEntry."eCess Amount";
      ServiceTaxEntry."Original S.T. SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
      ServiceTaxEntry."Original S.T. SBC Amount" := ServiceTaxEntry."Service Tax SBC Amount";
      ServiceTaxEntry.INSERT(TRUE);

      NextServiceTaxEntryNo := ServiceTaxEntry."Entry No.";
    END;

    PROCEDURE InitVendServiceTaxApplOnline@1500053(ServiceTaxBuffer@1500000 : Record 16581);
    VAR
      ServiceTaxApplicationOnline@1500001 : Record 16575;
    BEGIN
      ServiceTaxApplicationOnline.TRANSFERFIELDS(ServiceTaxBuffer);
      ServiceTaxApplicationOnline."Transaction No." := NextTransactionNo;
      ServiceTaxApplicationOnline.INSERT;
    END;

    PROCEDURE CheckPurchaseLines@1500046(PurchaseHeader@1500000 : Record 38);
    VAR
      STReverseChargeSetup@1500003 : Record 16461;
    BEGIN
      IF TryGetSrvTaxRevChgTypePurchHdr(PurchaseHeader,STReverseChargeSetup) THEN BEGIN
        IF STReverseChargeSetup."Reverse Charge Tax Type" = STReverseChargeSetup."Reverse Charge Tax Type"::GTA THEN
          PurchaseHeader.TESTFIELD("Consignment Note No.");
        CheckPurchLinesReverseCharge(PurchaseHeader);
      END ELSE
        PurchaseHeader.TESTFIELD("Service Type (Rev. Chrg.)",PurchaseHeader."Service Type (Rev. Chrg.)"::" ");
    END;

    LOCAL PROCEDURE CheckPurchLinesReverseCharge@1500047(PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
      RecRef@1500003 : RecordRef;
    BEGIN
      PurchaseHeader.TESTFIELD("Service Type (Rev. Chrg.)");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      RecRef.GETTABLE(PurchaseLine);
      IF NOT HasSameFieldValueInAllRecords(RecRef,PurchaseLine.FIELDNO("Service Tax Registration No.")) THEN
        ERROR(Text033,PurchaseLine.FIELDCAPTION("Service Tax Registration No."));
      IF NOT HasSameFieldValueInAllRecords(RecRef,PurchaseLine.FIELDNO("Service Tax Group")) THEN
        ERROR(Text033,PurchaseLine.FIELDCAPTION("Service Tax Group"));
    END;

    PROCEDURE CheckJournalLines@1500049(GenJournalLine@1500000 : Record 81);
    VAR
      STReverseChargeSetup@1500001 : Record 16461;
    BEGIN
      IF GenJournalLine.TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) THEN BEGIN
        IF STReverseChargeSetup."Reverse Charge Tax Type" = STReverseChargeSetup."Reverse Charge Tax Type"::GTA THEN
          GenJournalLine.TESTFIELD("Consignment Note No.");
        GenJournalLine.TESTFIELD("Service Type (Rev. Chrg.)");
      END ELSE
        GenJournalLine.TESTFIELD("Service Type (Rev. Chrg.)",GenJournalLine."Service Type (Rev. Chrg.)"::" ");
    END;

    PROCEDURE HasSameFieldValueInAllRecords@1500059(RecordRef@1500000 : RecordRef;FieldNo@1500001 : Integer) : Boolean;
    VAR
      FirstFieldValue@1500002 : Variant;
      TotalRecordCount@1500003 : Integer;
      FieldRef@1500004 : FieldRef;
      ActualRecordCount@1500005 : Integer;
      OriginalFieldFilter@1500006 : Text[1024];
    BEGIN
      IF NOT RecordRef.FINDFIRST THEN
        EXIT(TRUE);

      TotalRecordCount := RecordRef.COUNT;
      IF TotalRecordCount = 1 THEN
        EXIT(TRUE);
      FieldRef := RecordRef.FIELD(FieldNo);
      OriginalFieldFilter := FieldRef.GETFILTER;
      FirstFieldValue := FieldRef.VALUE;

      FieldRef.SETRANGE(FirstFieldValue);
      ActualRecordCount := RecordRef.COUNT;
      FieldRef.SETFILTER(OriginalFieldFilter);
      EXIT(TotalRecordCount = ActualRecordCount);
    END;

    PROCEDURE TryGetSrvTaxRevChgTypePurchHdr@1500052(PurchHeader@1500000 : Record 38;VAR STReverseChargeSetup@1500001 : Record 16461) : Boolean;
    VAR
      PurchLine@1500002 : Record 39;
      Vendor@1500008 : Record 23;
      FromServiceEntity@1500003 : Code[20];
      ToServiceEntity@1500004 : Code[20];
      ServiceTaxRegistrationNos@1500009 : Record 16475;
      ServiceTaxType@1500005 : Option;
      CurrentLineServiceTaxType@1500007 : 'Std. Reverse Charge,GTA,Normal';
      IsFirst@1500006 : Boolean;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      IF NOT PurchLine.FINDSET THEN
        ERROR(Text034);

      Vendor.GET(PurchHeader."Buy-from Vendor No.");
      FromServiceEntity := Vendor."Service Entity Type";
      // Check that all the lines have the same Service Tax Type
      IsFirst := TRUE;
      REPEAT
        ToServiceEntity := ServiceTaxRegistrationNos.GetServiceEntityType(PurchLine."Service Tax Registration No.");
        IF STReverseChargeSetup.TryGetSrvTaxReverseCharge(PurchLine."Service Tax Group",FromServiceEntity,ToServiceEntity) THEN
          CurrentLineServiceTaxType := STReverseChargeSetup."Reverse Charge Tax Type"
        ELSE
          CurrentLineServiceTaxType := CurrentLineServiceTaxType::Normal;
        IF IsFirst THEN BEGIN
          IsFirst := FALSE;
          ServiceTaxType := CurrentLineServiceTaxType;
        END ELSE
          IF ServiceTaxType <> CurrentLineServiceTaxType THEN
            ERROR(Text035);
      UNTIL PurchLine.NEXT = 0;
      EXIT(CurrentLineServiceTaxType <> CurrentLineServiceTaxType::Normal);
    END;

    LOCAL PROCEDURE UpdateServTaxDetailsGLAccount@1500003(VAR ServiceTaxEntryDetails@1500001 : Record 16474);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(ServiceTaxEntryDetails."Service Tax Group Code",ServiceTaxEntryDetails."Posting Date");
      IF ServiceTaxEntryDetails."Reverse Charge" THEN BEGIN
        ServiceTaxEntryDetails."GL Account" := ServiceTaxSetup.GetPayAccNo;
        ServiceTaxEntryDetails."SBC G/L Account" := ServiceTaxSetup.GetPaySBCAccNo;
        ServiceTaxEntryDetails."KK Cess G/L Account" := ServiceTaxSetup.GetKKCessPayAccNo;
      END ELSE BEGIN
        ServiceTaxEntryDetails."GL Account" :=
          ServiceTaxSetup.GetRecAccNoByISD(ServiceTaxEntryDetails."Input Service Distribution");
        ServiceTaxEntryDetails."SBC G/L Account" :=
          ServiceTaxSetup.GetRecSBCAccNoByISD(ServiceTaxEntryDetails."Input Service Distribution");
        ServiceTaxEntryDetails."KK Cess G/L Account" :=
          ServiceTaxSetup.GetKKCessRecAccNoByISD(ServiceTaxEntryDetails."Input Service Distribution");
      END;
    END;

    LOCAL PROCEDURE UpdateAppliedServTaxAmounts@1500011(ServTaxEntry@1500000 : Record 16473;VAR STAmt@1500001 : Decimal;VAR STeCess@1500002 : Decimal;VAR STSHECess@1500003 : Decimal;VAR STSBCAmt@1500449 : Decimal;VAR KKCessAmt@1500008 : Decimal);
    VAR
      ServTaxEntryDetails@1500004 : Record 16474;
      RemSTAmt@1500005 : Decimal;
      RemSTeCessAmt@1500007 : Decimal;
      RemSTSHECessAmt@1500006 : Decimal;
      RemSTSBCAmt@1500451 : Decimal;
      RemKKCessAmt@1500009 : Decimal;
    BEGIN
      ServTaxEntryDetails.RESET;
      ServTaxEntryDetails.SETCURRENTKEY("Service Tax Entry No.");
      ServTaxEntryDetails.SETRANGE("Service Tax Entry No.",ServTaxEntry."Entry No.");
      ServTaxEntryDetails.CALCSUMS("Service Tax Amount","Service Tax eCess Amount","Service Tax SHE Cess Amount",
        "Service Tax SBC Amount","KK Cess Amount");
      RemSTAmt := ServTaxEntry."Service Tax Amount" - ServTaxEntryDetails."Service Tax Amount";
      RemSTeCessAmt := ServTaxEntry."eCess Amount" - ServTaxEntryDetails."Service Tax eCess Amount";
      RemSTSHECessAmt := ServTaxEntry."SHE Cess Amount" - ServTaxEntryDetails."Service Tax SHE Cess Amount";
      RemSTSBCAmt := ServTaxEntry."Service Tax SBC Amount" - ServTaxEntryDetails."Service Tax SBC Amount";
      RemKKCessAmt := ServTaxEntry."KK Cess Amount" - ServTaxEntryDetails."KK Cess Amount";
      IF (ABS(RemSTAmt) <> ABS(STAmt)) AND (RemSTAmt <> 0) THEN
        STAmt := ABS(RemSTAmt);
      IF (ABS(RemSTeCessAmt) <> ABS(STeCess)) AND (RemSTeCessAmt <> 0) THEN
        STeCess := ABS(RemSTeCessAmt);
      IF (ABS(RemSTSHECessAmt) <> ABS(STSHECess)) AND (RemSTSHECessAmt <> 0) THEN
        STSHECess := ABS(RemSTSHECessAmt);
      IF (ABS(RemSTSBCAmt) <> ABS(STSBCAmt)) AND (RemSTSBCAmt <> 0) THEN
        STSBCAmt := ABS(RemSTSBCAmt);
      IF (ABS(RemKKCessAmt) <> ABS(KKCessAmt)) AND (RemKKCessAmt <> 0) THEN
        KKCessAmt := ABS(RemKKCessAmt);
    END;

    LOCAL PROCEDURE CalcCreditAvailable@1500055(VAR ServiceTaxBuffer@1500000 : Record 16476;STN2@1500001 : Code[20];MaxDate@1500002 : Date;CreditType@1500003 : ' ,eCess,SHECess,SBC,KKCess');
    VAR
      ServiceTaxEntryDtls@1500004 : Record 16474;
      ServiceTaxEntry2@1500005 : Record 16473;
    BEGIN
      WITH ServiceTaxEntryDtls DO BEGIN
        RESET;
        SETCURRENTKEY(Type,"Service Tax Registration No.","Posting Date",Closed,"Closed (eCess)",
          "Goes to Excise Entry","From Excise");
        SETRANGE("Service Tax Group Code",ServiceTaxBuffer."Service Tax Group Code");
        SETRANGE(Type,Type::Purchase);
        CASE CreditType OF
          CreditType::" ":
            SETRANGE(Closed,FALSE);
          CreditType::eCess:
            SETRANGE("Closed (eCess)",FALSE);
          CreditType::SHECess:
            SETRANGE("Closed (SHECess)",FALSE);
          CreditType::SBC:
            SETRANGE("Closed (SBC)",FALSE);
          CreditType::KKCess:
            SETRANGE("Closed (KK Cess)",FALSE);
        END;
        SETRANGE("Service Tax Registration No.",STN2);
        SETRANGE("Goes to Excise Entry",FALSE);
        SETRANGE("Posting Date",0D,MaxDate);
        IF ECCNo <> '' THEN
          SETRANGE("Location E.C.C. No.",ECCNo);
        IF SerTaxasExciseCredit THEN
          SETRANGE("Service Tax as Excise",TRUE);
        SETRANGE("Input Service Distribution",FALSE);
        IF FINDSET THEN
          REPEAT
            ServiceTaxEntry2.RESET;
            ServiceTaxEntry2.SETRANGE("Adjusted Agst Entry No.","Service Tax Entry No.");
            IF ServiceTaxEntry2.ISEMPTY THEN BEGIN
              CASE CreditType OF
                CreditType::" ":
                  ServiceTaxBuffer."Credit Available" += "Remaining Credit";
                CreditType::eCess:
                  ServiceTaxBuffer."Credit Available (eCess)" += "Remaining Credit (eCess)";
                CreditType::SHECess:
                  ServiceTaxBuffer."Credit Available (SHECess)" += "Remaining Credit (SHECess)";
                CreditType::SBC:
                  ServiceTaxBuffer."Credit Available (SBC)" += "Remaining Credit (SBC)";
                CreditType::KKCess:
                  ServiceTaxBuffer."Credit Available (KKC)" += "Remaining Credit (KK Cess)";
              END;
              ServiceTaxBuffer.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcServiceTaxAmtsToBeApplied@1500634(ServiceTaxEntry@1500000 : Record 16473;AmountToBeApplied@1500001 : Decimal;VAR AppliedServiceTaxEntry@1500002 : Record 16473);
    VAR
      ApplicationRatio@1500004 : Decimal;
      BaseAmount@1500005 : Decimal;
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        BaseAmount := "Amount Including Service Tax";
        IF "Reverse Charge" THEN
          BaseAmount -= (FullTaxAmount + FullTaxSBCAmount + KKCessAmount);
        ApplicationRatio := AmountToBeApplied / BaseAmount;

        AppliedServiceTaxEntry."eCess Amount" := RoundAmount(ApplicationRatio * "eCess Amount");
        AppliedServiceTaxEntry."SHE Cess Amount" := RoundAmount(ApplicationRatio * "SHE Cess Amount");
        AppliedServiceTaxEntry."Service Tax Amount" :=
          RoundAmount(ApplicationRatio * FullTaxAmount) -
          (AppliedServiceTaxEntry."eCess Amount" + AppliedServiceTaxEntry."SHE Cess Amount");
        AppliedServiceTaxEntry."Service Tax SBC Amount" := RoundAmount(ApplicationRatio * FullTaxSBCAmount);
        AppliedServiceTaxEntry."KK Cess Amount" := RoundAmount(ApplicationRatio * KKCessAmount);
      END;
    END;

    PROCEDURE CheckServiceTaxMatchesOnDocs@1506015(TransactionNo@1500000 : Integer;ApplyToTransactionNo@1500001 : Integer);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        RESET;
        SETRANGE("Transaction No.",TransactionNo);
        IF FINDFIRST THEN
          CheckServiceTaxToApplyTo(ApplyToTransactionNo,"Service Tax Group Code","Service Tax Registration No.");
      END;
    END;

    PROCEDURE FillServiceTaxFields@1506076(VAR GenJnlLine@1500001 : Record 81);
    VAR
      ApplyingVendLedgEntry@1500003 : Record 25;
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      GetApplyingVendLedgEntry(ApplyingVendLedgEntry,GenJnlLine."Account No.",GenJnlLine."Applies-to ID");

      WITH ServiceTaxEntry DO BEGIN
        SETRANGE("Transaction No.",ApplyingVendLedgEntry."Transaction No.");
        IF FINDFIRST THEN BEGIN
          GenJnlLine."Service Tax Group Code" := "Service Tax Group Code";
          GenJnlLine."Service Tax Registration No." := "Service Tax Registration No.";
          GenJnlLine."Document Type" := "Document Type";
          GenJnlLine."Serv. Tax on Advance Payment" := "Serv. Tax on Advance Payment";
        END;
      END;
    END;

    PROCEDURE CheckServiceTaxToApplyTo@1500607(TransactionNo@1500000 : Integer;ServiceTaxGroupCode@1500001 : Code[20];ServiceTaxRegNo@1500002 : Code[20]);
    VAR
      ServiceTaxEntry@1500003 : Record 16473;
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        SETRANGE("Transaction No.",TransactionNo);
        IF NOT "Serv. Tax on Advance Payment" AND ISEMPTY THEN
          EXIT;
        SETRANGE("Service Tax Group Code",ServiceTaxGroupCode);
        IF ISEMPTY THEN
          ERROR(Text16536);
        SETRANGE("Service Tax Registration No.",ServiceTaxRegNo);
        IF ISEMPTY THEN
          ERROR(Text16537);
      END;
    END;

    PROCEDURE CheckApplyingDocs@1560065(ApplyingGenJnlLine@1500001 : Record 81);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
      ApplicationOneToMany@1500000 : Boolean;
    BEGIN
      IF ApplyingGenJnlLine."Applies-to ID" <> '' THEN BEGIN
        VendorLedgerEntry.SetAppliesToIDFilter(
          ApplyingGenJnlLine."Account No.",ApplyingGenJnlLine."Applies-to ID");
        VendorLedgerEntry.SETFILTER("Document Type",'<>%1',ApplyingGenJnlLine."Document Type");
      END ELSE
        IF ApplyingGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
          VendorLedgerEntry.SETRANGE("Vendor No.",ApplyingGenJnlLine."Account No.");
          VendorLedgerEntry.SETRANGE("Document Type",ApplyingGenJnlLine."Applies-to Doc. Type");
          VendorLedgerEntry.SETRANGE("Document No.",ApplyingGenJnlLine."Applies-to Doc. No.");
          VendorLedgerEntry.SETRANGE(Open,TRUE);
        END;

      ApplicationOneToMany := VendorLedgerEntry.COUNT > 1;
      IF VendorLedgerEntry.FINDSET THEN
        REPEAT
          IF ApplyingGenJnlLine.HasServiceTax AND VendorLedgerEntry.HasServiceTax THEN BEGIN
            IF ApplyingGenJnlLine."Serv. Tax on Advance Payment" AND
               VendorLedgerEntry.HasDiscountOnDate(ApplyingGenJnlLine."Posting Date")
            THEN
              ERROR(Text16546);
            IF ApplyingGenJnlLine.PoT XOR VendorLedgerEntry.PoT THEN
              ERROR(Text16540);
            CheckServiceTaxToApplyTo(VendorLedgerEntry."Transaction No.",
              ApplyingGenJnlLine."Service Tax Group Code",ApplyingGenJnlLine."Service Tax Registration No.");

            IF (ApplyingGenJnlLine."Include Serv. Tax in TDS Base" AND NOT ApplyingGenJnlLine.IsServTaxRevCharge) XOR
               VendorLedgerEntry.DoesTDSBaseIncludeServiceTax
            THEN
              ERROR(Text16541);
          END ELSE BEGIN
            IF VendorLedgerEntry."Serv. Tax on Advance Payment" OR ApplyingGenJnlLine."Serv. Tax on Advance Payment" THEN
              ERROR(Text16538);
            IF ApplyingGenJnlLine.HasServiceTax AND NOT VendorLedgerEntry.IsNormalPayment OR
               VendorLedgerEntry.HasServiceTax AND NOT ApplyingGenJnlLine.IsNormalPayment
            THEN
              ERROR(Text16538);
          END;
          IF ApplyingGenJnlLine.HasServiceTax OR VendorLedgerEntry.HasServiceTax THEN BEGIN
            IF ApplicationOneToMany THEN
              ERROR(Text16543);
            IF (ApplyingGenJnlLine."Currency Code" = '') XOR (VendorLedgerEntry."Currency Code" = '') THEN
              ERROR(Text16545);
          END;
        UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    PROCEDURE CheckOfflineApplicationTDS@1560055(VendorNo@1500000 : Code[20];AppliesToID@1500002 : Code[20]);
    VAR
      ApplyingVendLedgEntry@1500005 : Record 25;
      VendorLedgerEntry@1500001 : Record 25;
      AdvPmtWithTDS@1500003 : Boolean;
      InvoiceWithTDS@1500004 : Boolean;
    BEGIN
      GetApplyingVendLedgEntry(ApplyingVendLedgEntry,VendorNo,AppliesToID);

      IF NOT ApplyingVendLedgEntry.HasTDSEntry THEN
        EXIT;

      WITH VendorLedgerEntry DO BEGIN
        SetAppliesToIDFilter(ApplyingVendLedgEntry."Vendor No.",AppliesToID);
        IF FINDSET THEN
          REPEAT
            IF HasTDSEntry THEN BEGIN
              IF ("Document Type" = "Document Type"::Payment) AND "Serv. Tax on Advance Payment" THEN
                AdvPmtWithTDS := TRUE;
              IF "Document Type" = "Document Type"::Invoice THEN
                InvoiceWithTDS := TRUE;
            END;
          UNTIL NEXT = 0;

        AdvPmtWithTDS := AdvPmtWithTDS OR (ApplyingVendLedgEntry."Document Type" = "Document Type"::Payment);
        InvoiceWithTDS := InvoiceWithTDS OR (ApplyingVendLedgEntry."Document Type" = "Document Type"::Invoice);
        IF AdvPmtWithTDS AND InvoiceWithTDS THEN
          ERROR(Text16539);
      END;
    END;

    LOCAL PROCEDURE GetApplyingVendLedgEntry@1500629(VAR ApplyingVendLedgEntry@1500000 : Record 25;VendorNo@1500002 : Code[20];AppliesToID@1500001 : Code[20]);
    BEGIN
      WITH ApplyingVendLedgEntry DO BEGIN
        SetAppliesToIDFilter(VendorNo,AppliesToID);
        SETRANGE("Applying Entry",TRUE);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE GetAppliedToVendLedgEntry@1506030(VAR AppliedToVendLedgEntry@1500000 : Record 25;ApplicationTransactionNo@1500001 : Integer;VendLedgEntryNo@1500002 : Integer);
    VAR
      DetailedVendLedgEntry@1500003 : Record 380;
    BEGIN
      WITH DetailedVendLedgEntry DO BEGIN
        SETRANGE("Transaction No.",ApplicationTransactionNo);
        SETRANGE("Entry Type","Entry Type"::Application);
        SETFILTER("Vendor Ledger Entry No.",'<>%1',VendLedgEntryNo);
        FINDFIRST;
        AppliedToVendLedgEntry.GET("Vendor Ledger Entry No.");
      END;
    END;

    PROCEDURE CheckUnapplyServiceTaxAndTDS@1590032(TransactionNo@1500000 : Integer;VendorLedgerEntry@1500003 : Record 25);
    VAR
      AppliedToVendorLedgerEntry@1500002 : Record 25;
    BEGIN
      IF VendorLedgerEntry.HasTDSEntry THEN BEGIN
        GetAppliedToVendLedgEntry(AppliedToVendorLedgerEntry,TransactionNo,VendorLedgerEntry."Entry No.");
        IF AppliedToVendorLedgerEntry.HasTDSEntry THEN
          ERROR(Text16542);
      END;
    END;

    PROCEDURE CheckUnapplyServiceTax@1500016(DtldVendLedgEntry@1500005 : Record 380);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
      ServiceTaxEntry@1500002 : Record 16473;
      OrigServiceTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      WITH ServiceTaxEntryDetails DO BEGIN
        SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
        IF DtldVendLedgEntry."Transaction No." = 0 THEN
          SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
        IF FINDSET THEN
          REPEAT
            IF PoT AND "Corrective Application Entry" AND NOT "Serv. Tax on Advance Payment" THEN BEGIN
              ServiceTaxEntry.GET("Service Tax Entry No.");
              IF ServiceTaxEntry."Corrected Appln. Entry No." <> 0 THEN
                OrigServiceTaxEntryDetails.SETRANGE("Service Tax Entry No.",ServiceTaxEntry."Corrected Appln. Entry No.")
              ELSE
                OrigServiceTaxEntryDetails.SETRANGE("Service Tax Entry No.","Service Tax Entry No.");
              OrigServiceTaxEntryDetails.FINDFIRST;
            END ELSE
              OrigServiceTaxEntryDetails := ServiceTaxEntryDetails;

            IF OrigServiceTaxEntryDetails.IsAnyRemainingCreditUtilized OR OrigServiceTaxEntryDetails."Service Tax as Excise" THEN
              ERROR(Text16535,"Document No.");
          UNTIL NEXT = 0
      END;
    END;

    PROCEDURE ZeroTransNoDtldServLedgEntry@1500007(TransactionNo@1500000 : Integer;ApplicationNo@1500001 : Integer);
    VAR
      ServTaxEntryDtls@1500002 : Record 16474;
    BEGIN
      ServTaxEntryDtls.SETRANGE("Transaction No.",TransactionNo);
      ServTaxEntryDtls.MODIFYALL("Application No.",ApplicationNo);
      ServTaxEntryDtls.MODIFYALL("Transaction No.",0);
    END;

    PROCEDURE GetServiceTaxRegNoForLocation@1500015(LocationCode@1500001 : Code[10]) ServiceTaxRegistrationNo : Code[20];
    VAR
      CompanyInformation@1500000 : Record 79;
      Location@1500002 : Record 14;
    BEGIN
      IF LocationCode = '' THEN BEGIN
        CompanyInformation.GET;
        EXIT(CompanyInformation."Service Tax Registration No.");
      END;
      Location.GET(LocationCode);
      EXIT(Location."Service Tax Registration No.");
    END;

    LOCAL PROCEDURE PaymentLiabilityforSBC@1500116(VAR ServiceTaxEntryDtls@1500037 : Record 16474;VAR ServiceTaxBuffer@1500017 : Record 16476;VAR IsArrear@1500018 : Boolean;PostingDate2@1500019 : Date;ReverseChargeTrans@1500020 : Boolean);
    BEGIN
      IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
      IF NOT ReverseChargeTrans THEN BEGIN
        IF ServiceTaxEntryDtls."Service Tax SBC Amount" < 0 THEN BEGIN
          ServiceTaxBuffer."Payment Liability (SBC)" :=
            ServiceTaxBuffer."Payment Liability (SBC)" + ABS(ServiceTaxEntryDtls."Service Tax SBC Amount");
          IF IsArrear THEN
            ServiceTaxBuffer."Pay. Liability Arrear (SBC)" :=
              ServiceTaxBuffer."Pay. Liability Arrear (SBC)" + ABS(ServiceTaxEntryDtls."Service Tax SBC Amount");
        END ELSE BEGIN
          ServiceTaxBuffer."Payment Liability (SBC)" :=
            ServiceTaxBuffer."Payment Liability (SBC)" -  ServiceTaxEntryDtls."Service Tax SBC Amount";
          IF IsArrear THEN
            ServiceTaxBuffer."Pay. Liability Arrear (SBC)" :=
              ServiceTaxBuffer."Pay. Liability Arrear (SBC)" - ServiceTaxEntryDtls."Service Tax SBC Amount";
        END;
      END ELSE BEGIN
        ServiceTaxBuffer."Payment Liability (SBC)" :=
            ServiceTaxBuffer."Payment Liability (SBC)" + ServiceTaxEntryDtls."Service Tax SBC Amount";
        IF IsArrear THEN
          ServiceTaxBuffer."Pay. Liability Arrear (SBC)" :=
            ServiceTaxBuffer."Pay. Liability Arrear (SBC)" + ServiceTaxEntryDtls."Service Tax SBC Amount";
      END;
      ServiceTaxBuffer.MODIFY;
    END;

    LOCAL PROCEDURE PaymentLiabilityforKKC@1500040(VAR ServiceTaxEntryDtls@1500035 : Record 16474;VAR ServiceTaxBuffer@1500022 : Record 16476;VAR IsArrear@1500023 : Boolean;PostingDate2@1500024 : Date;ReverseChargeTrans@1500026 : Boolean);
    BEGIN
      IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
      IF NOT ReverseChargeTrans THEN BEGIN
        IF ServiceTaxEntryDtls."KK Cess Amount" < 0 THEN BEGIN
          ServiceTaxBuffer."Payment Liability (KKC)" :=
            ServiceTaxBuffer."Payment Liability (KKC)" + ABS(ServiceTaxEntryDtls."KK Cess Amount");
          IF IsArrear THEN
            ServiceTaxBuffer."Pay. Liability Arrear (KKC)" :=
              ServiceTaxBuffer."Pay. Liability Arrear (KKC)" + ABS(ServiceTaxEntryDtls."KK Cess Amount");
        END ELSE BEGIN
          ServiceTaxBuffer."Payment Liability (KKC)" :=
            ServiceTaxBuffer."Payment Liability (KKC)" -  ServiceTaxEntryDtls."KK Cess Amount";
          IF IsArrear THEN
            ServiceTaxBuffer."Pay. Liability Arrear (KKC)" :=
              ServiceTaxBuffer."Pay. Liability Arrear (KKC)" - ServiceTaxEntryDtls."KK Cess Amount";
        END;
      END ELSE BEGIN
        ServiceTaxBuffer."Payment Liability (KKC)" :=
            ServiceTaxBuffer."Payment Liability (KKC)" + ServiceTaxEntryDtls."KK Cess Amount";
        IF IsArrear THEN
          ServiceTaxBuffer."Pay. Liability Arrear (KKC)" :=
            ServiceTaxBuffer."Pay. Liability Arrear (KKC)" + ServiceTaxEntryDtls."KK Cess Amount";
      END;
      ServiceTaxBuffer.MODIFY;
    END;

    LOCAL PROCEDURE PayAmountSBC@1500048(VAR ServiceTaxBuffer@1500049 : Record 16476);
    BEGIN
      IF (ServiceTaxBuffer."Payment Liability (SBC)" <>
          (ServiceTaxBuffer."Credit Availed (SBC)" + ServiceTaxBuffer."Payment Amount (SBC)"))
        THEN
        ERROR(Text006,ServiceTaxBuffer."Service Tax Group Code");
        IF ServiceTaxBuffer."Pay. Amount Arrear (SBC)" > ServiceTaxBuffer."Pay. Liability Arrear (SBC)" THEN
        ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Liability Arrear (SBC)"),
          ServiceTaxBuffer.FIELDCAPTION("Pay. Liability Arrear (SBC)"),
          ServiceTaxBuffer."Service Tax Group Code");
        IF ServiceTaxBuffer."Pay. Amount Arrear (SBC)" > (ServiceTaxBuffer."Payment Amount (SBC)" -
                                                          ServiceTaxBuffer."Other Amt. Arrear (SBC)")
        THEN
        ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount Arrear (SBC)"),'Total Payment Amount SBC',
          ServiceTaxBuffer."Service Tax Group Code");
        IF ServiceTaxBuffer."Payment Amount (SBC)" <> 0 THEN BEGIN
        ServiceTaxBuffer.TESTFIELD("Account No.");
        IF ServiceTaxBuffer."Account Type" = ServiceTaxBuffer."Account Type"::Bank THEN
          ServiceTaxBuffer.TESTFIELD("Cheque No.");
      END;
    END;

    LOCAL PROCEDURE PayAmountKKC@1500051(VAR ServiceTaxBuffer@1500046 : Record 16476);
    BEGIN
      IF (ServiceTaxBuffer."Payment Liability (KKC)" <>
            (ServiceTaxBuffer."Credit Availed (KKC)" + ServiceTaxBuffer."Payment Amount (KKC)"))
        THEN
          ERROR(Text16548,ServiceTaxBuffer."Service Tax Group Code");
        IF ServiceTaxBuffer."Pay. Amount Arrear (KKC)" > ServiceTaxBuffer."Pay. Liability Arrear (KKC)" THEN
          ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Liability Arrear (KKC)"),
            ServiceTaxBuffer.FIELDCAPTION("Pay. Liability Arrear (KKC)"),
            ServiceTaxBuffer."Service Tax Group Code");
        IF ServiceTaxBuffer."Pay. Amount Arrear (KKC)" > (ServiceTaxBuffer."Payment Amount (KKC)" -
                                                            ServiceTaxBuffer."Other Amt. Arrear (KKC)")
        THEN
          ERROR(Text16534,ServiceTaxBuffer.FIELDCAPTION("Pay. Amount Arrear (SBC)"),'Total Payment Amount KKC',
            ServiceTaxBuffer."Service Tax Group Code");
        IF ServiceTaxBuffer."Payment Amount (KKC)" <> 0 THEN BEGIN
          ServiceTaxBuffer.TESTFIELD("Account No.");
          IF ServiceTaxBuffer."Account Type" = ServiceTaxBuffer."Account Type"::Bank THEN
            ServiceTaxBuffer.TESTFIELD("Cheque No.");
      END;
    END;

    LOCAL PROCEDURE CalculateKKCessPaymentAmounts@1500034(VAR ServiceTaxPaymentBuffer@1500090 : Record 16476;VAR ServiceTaxEntryDtls@1500057 : Record 16474;VAR TempServiceTaxEntryDtls@1500058 : Record 16474;VAR IsArrear@1500059 : Boolean;PostingDate2@1500060 : Date;ReverseChargeTrans@1500061 : Boolean;DocNo2@1500062 : Code[20];VAR KKCAmt@1500063 : Decimal;VAR KKCCashPayAmt@1500064 : Decimal;VAR KKCArrearCashPayAmt@1500065 : Decimal);
    BEGIN
      IF KKCAmt <> 0 THEN BEGIN
        IF ABS(ServiceTaxEntryDtls."KK Cess Amount") > KKCAmt THEN BEGIN
          InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,0,0,0,KKCAmt);
          KKCAmt := 0;
        END ELSE BEGIN
          InsertIntoSTPmtECCNoWise(ServiceTaxEntryDtls,ServiceTaxPaymentBuffer,
            0,0,0,ABS(ServiceTaxEntryDtls."KK Cess Amount"));
          KKCAmt -= ABS(ServiceTaxEntryDtls."KK Cess Amount");
        END;
      END;
      IF ServiceTaxPaymentBuffer."Payment Liability (KKC)" <> 0 THEN BEGIN
        IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
        IF NOT ReverseChargeTrans THEN BEGIN
          FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."KK Cess G/L Account",TRUE,-ServiceTaxEntryDtls."KK Cess Amount",
            ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
          TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
          TempServiceTaxEntryDtls."Closed (KK Cess)" := TRUE;
          TempServiceTaxEntryDtls."Mark Record" := TRUE;
          TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
          TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
          IF (KKCCashPayAmt <> 0) AND (NOT IsArrear) THEN BEGIN
            IF -ServiceTaxEntryDtls."KK Cess Amount" > KKCCashPayAmt THEN BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := -KKCCashPayAmt;
              KKCCashPayAmt := 0;
            END
            ELSE BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := ServiceTaxEntryDtls."KK Cess Amount";
              KKCCashPayAmt := KKCCashPayAmt - -ServiceTaxEntryDtls."KK Cess Amount";
            END;
          END;
          IF (KKCArrearCashPayAmt <> 0) AND IsArrear THEN BEGIN
            IF -ServiceTaxEntryDtls."KK Cess Amount" > KKCArrearCashPayAmt THEN BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := -KKCArrearCashPayAmt;
              KKCArrearCashPayAmt := 0;
            END
            ELSE BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := ServiceTaxEntryDtls."KK Cess Amount";
              KKCArrearCashPayAmt := KKCArrearCashPayAmt - -ServiceTaxEntryDtls."KK Cess Amount";
            END;
          END;
          TempServiceTaxEntryDtls.MODIFY;
        END ELSE BEGIN
          FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."KK Cess G/L Account",TRUE,ServiceTaxEntryDtls."KK Cess Amount",
            ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
          TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
          TempServiceTaxEntryDtls."Mark Record" := TRUE;
          TempServiceTaxEntryDtls."Reverse Charge Pmt. Doc. No." := DocNo2;
          TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
          IF (KKCCashPayAmt <> 0) AND (NOT IsArrear) THEN BEGIN
            IF ServiceTaxEntryDtls."KK Cess Amount" > KKCCashPayAmt THEN BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := KKCCashPayAmt;
              KKCCashPayAmt := 0;
            END
            ELSE BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := ServiceTaxEntryDtls."KK Cess Amount";
              KKCCashPayAmt := KKCCashPayAmt - ServiceTaxEntryDtls."KK Cess Amount";
            END;
          END;
          IF (KKCArrearCashPayAmt <> 0) AND IsArrear THEN BEGIN
            IF ServiceTaxEntryDtls."KK Cess Amount" > KKCArrearCashPayAmt THEN BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := KKCArrearCashPayAmt;
              KKCArrearCashPayAmt := 0;
            END
            ELSE BEGIN
              TempServiceTaxEntryDtls."Payment Amount KK Cess" := ServiceTaxEntryDtls."KK Cess Amount";
              KKCArrearCashPayAmt := KKCArrearCashPayAmt - ServiceTaxEntryDtls."KK Cess Amount";
            END;
          END;
          TempServiceTaxEntryDtls.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE CalculateSBCPaymentAmounts@1500031(VAR ServiceTaxPaymentBuffer@1500091 : Record 16476;VAR ServiceTaxEntryDtls@1500065 : Record 16474;VAR TempServiceTaxEntryDtls@1500066 : Record 16474;VAR IsArrear@1500067 : Boolean;PostingDate2@1500068 : Date;MaxDate@1500069 : Date;ReverseChargeTrans@1500070 : Boolean;DocNo2@1500071 : Code[20];VAR CashPaySBCAmt@1500072 : Decimal;VAR ArrearCashPaySBCAmt@1500073 : Decimal);
    BEGIN
      IF ServiceTaxPaymentBuffer."Payment Liability (SBC)" <> 0 THEN BEGIN
      IsArrear := PostingDate2 > GetPaymentDueDate(ServiceTaxEntryDtls."Posting Date");
      IF NOT ReverseChargeTrans THEN BEGIN
        FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."SBC G/L Account",TRUE,-ServiceTaxEntryDtls."Service Tax SBC Amount",
          ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
        TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
        TempServiceTaxEntryDtls."Closed (SBC)" := TRUE;
        TempServiceTaxEntryDtls."Mark Record" := TRUE;
        TempServiceTaxEntryDtls."Payment Doc. No. (SBC)" := DocNo2;
        TempServiceTaxEntryDtls."Payment Doc. Date (SBC)" := PostingDate2;
        IF (CashPaySBCAmt <> 0) AND (NOT IsArrear) THEN BEGIN
          IF -ServiceTaxEntryDtls."Service Tax SBC Amount" > CashPaySBCAmt THEN BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := -CashPaySBCAmt;
            CashPaySBCAmt := 0;
          END
          ELSE BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := ServiceTaxEntryDtls."Service Tax SBC Amount";
            CashPaySBCAmt := CashPaySBCAmt - -ServiceTaxEntryDtls."Service Tax SBC Amount";
          END;
        END;
        IF (ArrearCashPaySBCAmt <> 0) AND IsArrear THEN BEGIN
          IF -ServiceTaxEntryDtls."Service Tax SBC Amount" > ArrearCashPaySBCAmt THEN BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := -ArrearCashPaySBCAmt;
            ArrearCashPaySBCAmt := 0;
          END
          ELSE BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := ServiceTaxEntryDtls."Service Tax SBC Amount";
            ArrearCashPaySBCAmt := ArrearCashPaySBCAmt - -ServiceTaxEntryDtls."Service Tax SBC Amount";
          END;
        END;
        TempServiceTaxEntryDtls.MODIFY;
      END ELSE BEGIN
        FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."SBC G/L Account",TRUE,ServiceTaxEntryDtls."Service Tax SBC Amount",
          ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");
        TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
        TempServiceTaxEntryDtls."Mark Record" := TRUE;
        TempServiceTaxEntryDtls."Rev. Chrg. Pmt. Doc. No. (SBC)" := DocNo2;
        TempServiceTaxEntryDtls."Payment Doc. Date (SBC)" := PostingDate2;
        IF (CashPaySBCAmt <> 0) AND (NOT IsArrear) THEN BEGIN
          IF ServiceTaxEntryDtls."Service Tax SBC Amount" > CashPaySBCAmt THEN BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := CashPaySBCAmt;
            CashPaySBCAmt := 0;
          END
          ELSE BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := ServiceTaxEntryDtls."Service Tax SBC Amount";
            CashPaySBCAmt := CashPaySBCAmt - ServiceTaxEntryDtls."Service Tax SBC Amount";
          END;
        END;
        IF (ArrearCashPaySBCAmt <> 0) AND IsArrear THEN BEGIN
          IF ServiceTaxEntryDtls."Service Tax SBC Amount" > ArrearCashPaySBCAmt THEN BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := ArrearCashPaySBCAmt;
            ArrearCashPaySBCAmt := 0;
          END
          ELSE BEGIN
            TempServiceTaxEntryDtls."Payment Amount SBC" := ServiceTaxEntryDtls."Service Tax SBC Amount";
            ArrearCashPaySBCAmt := ArrearCashPaySBCAmt - ServiceTaxEntryDtls."Service Tax SBC Amount";
          END;
        END;
        TempServiceTaxEntryDtls.MODIFY;
      END;
      END;
    END;

    LOCAL PROCEDURE CalculateAppliedKKCessPaymentAmounts@1500072(VAR ServiceTaxPaymentBuffer@1500093 : Record 16476;VAR ServiceTaxEntryDtls@1500073 : Record 16474;VAR TempServiceTaxBuffer@1500074 : TEMPORARY Record 16476;VAR TempServiceTaxEntryDtls@1500075 : Record 16474;PostingDate2@1500076 : Date;DocNo2@1500077 : Code[20];VAR AppliedKKCessAmt@1500078 : Decimal);
    BEGIN
      IF ServiceTaxEntryDtls."Remaining Credit (KK Cess)" >= ServiceTaxPaymentBuffer."Credit Availed (KKC)" THEN
        AppliedKKCessAmt := ServiceTaxPaymentBuffer."Credit Availed (KKC)"
      ELSE
        AppliedKKCessAmt := ServiceTaxEntryDtls."Remaining Credit (KK Cess)";
      ServiceTaxPaymentBuffer."Credit Availed (KKC)" -= AppliedKKCessAmt;
      FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."KK Cess G/L Account",FALSE,AppliedKKCessAmt,
        ServiceTaxPaymentBuffer."Line No.",'',FALSE,'',ServiceTaxPaymentBuffer."Dimension Set ID");

      // Filling The Temp Buffer Availed
      TempServiceTaxBuffer.RESET;
      TempServiceTaxBuffer.GET(ServiceTaxPaymentBuffer."Document No.",ServiceTaxEntryDtls."Service Tax Group Code");
      TempServiceTaxBuffer."STG Credit Availed (KKC)" += AppliedKKCessAmt;
      TempServiceTaxBuffer.MODIFY;
      TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
      TempServiceTaxEntryDtls."Remaining Credit (KK Cess)" -= AppliedKKCessAmt;
      IF TempServiceTaxEntryDtls."Remaining Credit (KK Cess)" = 0 THEN BEGIN
        TempServiceTaxEntryDtls."Closed (KK Cess)" := TRUE;
        TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
        TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
      END;
      TempServiceTaxEntryDtls.MODIFY;
    END;

    LOCAL PROCEDURE CalculateCreditAmountSBC@1500077(VAR ServiceTaxPaymentBuffer@1500094 : Record 16476;VAR ServiceTaxEntryDtls@1500078 : Record 16474;VAR AppliedSBCAmount@1500079 : Decimal);
    BEGIN
      IF ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (SBC)" >= ServiceTaxPaymentBuffer."Payment Amount (SBC)" THEN
        AppliedSBCAmount := ServiceTaxPaymentBuffer."Payment Amount (SBC)"
      ELSE
        AppliedSBCAmount := ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (SBC)";
      ServiceTaxPaymentBuffer."Payment Amount (SBC)" -= AppliedSBCAmount;
      IF ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" = ServiceTaxEntryDtls."Service Type (Rev. Chrg.)"::Outward THEN BEGIN
        ServiceTaxEntryDtls."Remaining Credit (SBC)" := 0;
        ServiceTaxEntryDtls."Closed (SBC)" := TRUE;
      END ELSE
        ServiceTaxEntryDtls."Remaining Credit (SBC)" := ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (SBC)";

      ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (SBC)" := 0;
      ServiceTaxEntryDtls."Closed Reversed (SBC)" := TRUE;
      ServiceTaxEntryDtls.MODIFY;
    END;

    LOCAL PROCEDURE CalculateCreditAmountKKC@1500080(VAR ServiceTaxPaymentBuffer@1500036 : Record 16476;VAR ServiceTaxEntryDtls@1500081 : Record 16474;VAR AppliedKKCessAmt@1500082 : Decimal;VAR ServiceTaxSetup@1500000 : Record 16472);
    BEGIN
      IF ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (KKC)" >= ServiceTaxPaymentBuffer."Payment Amount (KKC)" THEN
        AppliedKKCessAmt := ServiceTaxPaymentBuffer."Payment Amount (KKC)"
      ELSE
        AppliedKKCessAmt := ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (KKC)";
      ServiceTaxPaymentBuffer."Payment Amount (KKC)" -= AppliedKKCessAmt;
      ServiceTaxEntryDtls."KK Cess G/L Account" :=
        ServiceTaxSetup.GetKKCessPaymentAccNo(ServiceTaxEntryDtls."Service Type (Rev. Chrg.)");
      FillSTaxPostingBuffer(0,ServiceTaxEntryDtls."KK Cess G/L Account",TRUE,AppliedKKCessAmt,
        ServiceTaxPaymentBuffer."Line No.",'',TRUE,ServiceTaxSetup.GetKKCessRecInterimAccNo,ServiceTaxPaymentBuffer."Dimension Set ID");
      IF ServiceTaxEntryDtls."Service Type (Rev. Chrg.)" = ServiceTaxEntryDtls."Service Type (Rev. Chrg.)"::Outward THEN BEGIN
        ServiceTaxEntryDtls."Remaining Credit (KK Cess)" := 0;
        ServiceTaxEntryDtls."Closed (KK Cess)" := TRUE;
      END ELSE
        ServiceTaxEntryDtls."Remaining Credit (KK Cess)" := ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (KKC)";

      ServiceTaxEntryDtls."Rev. Chrg. Rem. Credit (KKC)" := 0;
      ServiceTaxEntryDtls."Closed Reversed (KK Cess)" := TRUE;
      ServiceTaxEntryDtls.MODIFY;
    END;

    LOCAL PROCEDURE CloseEntriesKKCess@1500083(VAR ServiceTaxEntryDtls@1500083 : Record 16474;VAR TempServiceTaxEntryDtls@1500084 : Record 16474;VAR AppliedAmountKKCess@1500085 : Decimal;DocNo2@1500087 : Code[20];PostingDate2@1500088 : Date);
    BEGIN
      IF AppliedAmountKKCess >= ServiceTaxEntryDtls."Remaining Credit (KK Cess)" THEN BEGIN
        AppliedAmountKKCess -= ServiceTaxEntryDtls."Remaining Credit (KK Cess)";
        TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
        TempServiceTaxEntryDtls."Applied KK Cess Amount" += ServiceTaxEntryDtls."Remaining Credit (KK Cess)";
        TempServiceTaxEntryDtls."Remaining Credit (KK Cess)" := 0;
        TempServiceTaxEntryDtls.MODIFY;
      END ELSE BEGIN
        TempServiceTaxEntryDtls := ServiceTaxEntryDtls;
        TempServiceTaxEntryDtls."Remaining Credit (KK Cess)" -= AppliedAmountKKCess;
        TempServiceTaxEntryDtls."Applied KK Cess Amount" += AppliedAmountKKCess;
        AppliedAmountKKCess := 0;
        TempServiceTaxEntryDtls.MODIFY;
      END;
      IF TempServiceTaxEntryDtls."Remaining Credit (KK Cess)" = 0 THEN BEGIN
        TempServiceTaxEntryDtls."Closed (KK Cess)" := TRUE;
        TempServiceTaxEntryDtls."Payment Document No." := DocNo2;
        TempServiceTaxEntryDtls."Payment Document Date" := PostingDate2;
        TempServiceTaxEntryDtls.MODIFY;
      END;
    END;

    PROCEDURE CheckApplyServiceTaxAndTDS@1500030(ApplyingVendLedgEntry@1500000 : Record 25;VendorLedgerEntry@1500001 : Record 25);
    BEGIN
      IF VendorLedgerEntry.HasTDSEntry AND ApplyingVendLedgEntry.HasTDSEntry THEN
        ERROR(ApplyDocWithTDSWorkTaxErr);
    END;

    BEGIN
    END.
  }
}

