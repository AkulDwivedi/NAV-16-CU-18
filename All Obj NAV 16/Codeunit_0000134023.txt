OBJECT Codeunit 134023 ERM Pmt Tol Multi Doc Customer
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      AmountError@1007 : TextConst 'ENU="%1 must be %2 in \\%3, %4=%5."';

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler)]
    PROCEDURE OverPmtBeforeDiscDateLCY@25();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126465, 126469, 124028.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with more Amount and within Payment
      // Discount Period.
      Initialize;
      OverPmtBeforeDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler)]
    PROCEDURE OverPmtBeforeDiscDateFCY@42();
    VAR
      CurrencyCode@1004 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126465, 126469, 126470, 124028.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with more Amount and same Currency
      // and within Payment Discount Period.
      Initialize;
      CurrencyCode := CreateCurrency;
      OverPmtBeforeDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler)]
    PROCEDURE OverPmtBeforeDiscDateMultiCur@51();
    BEGIN
      // Covers documents TFS_TC_ID=126465, 126469, 126470, 124028.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with more Amount and multiple
      // Currencies, within Payment Discount Period.
      Initialize;
      OverPmtBeforeDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE OverPmtBeforeDiscDate@48(CurrencyCode@1002 : Code[10];CurrencyCode2@1004 : Code[10]);
    VAR
      GeneralLedgerSetup@1012 : Record 98;
      GenJournalLine@1001 : Record 81;
      Amount@1003 : Decimal;
      Amount2@1005 : Decimal;
      NoOfLines@1000 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Multiple Gen. Journal Lines for Invoice and Payment with
      // Random Amount. Take Payment Amount more than Invoice Amount and within Discount Period.
      GeneralLedgerSetup.GET;
      ModifyGeneralLedgerSetup;
      ComputeAmountAndNoOfLines(Amount,NoOfLines);
      Amount2 := Amount * NoOfLines + GeneralLedgerSetup."Max. Payment Tolerance Amount";
      PaymentWithDiscount(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,
        Amount,-Amount2,NoOfLines,GetDueDate);

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler)]
    PROCEDURE OverPmtAfterDiscDateLCY@52();
    BEGIN
      // Covers documents TFS_TC_ID=126464,126471, 126475, 124029.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with more Amount and after Payment
      // Discount Period.
      Initialize;
      OverPmtAfterDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler)]
    PROCEDURE OverPmtAfterDiscDateFCY@11();
    VAR
      CurrencyCode@1004 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126471, 126475, 124029, 124033.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with more Amount and same Currency
      // and after Payment Discount Period..
      Initialize;
      CurrencyCode := CreateCurrency;
      OverPmtAfterDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler)]
    PROCEDURE OverPmtAfterDiscDateMultiCur@6();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126471, 126475, 124029, 124033.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with more Amount and multiple
      // Currencies, after Payment Discount Period..
      Initialize;
      OverPmtAfterDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE OverPmtAfterDiscDate@55(CurrencyCode@1002 : Code[10];CurrencyCode2@1004 : Code[10]);
    VAR
      GeneralLedgerSetup@1012 : Record 98;
      GenJournalLine@1001 : Record 81;
      Amount@1003 : Decimal;
      Amount2@1005 : Decimal;
      NoOfLines@1000 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Multiple Gen. Journal Lines for Invoice and
      // Payment with Random Amount. Take Payment Amount more than Invoice Amount and after Discount Period.
      GeneralLedgerSetup.GET;
      ModifyGeneralLedgerSetup;
      ComputeAmountAndNoOfLines(Amount,NoOfLines);
      Amount2 := Amount * NoOfLines + GeneralLedgerSetup."Max. Payment Tolerance Amount";
      PaymentWithDiscountTolerance(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Document Type"::Payment,Amount,-Amount2,NoOfLines,CALCDATE('<1D>',GetDueDate));

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler)]
    PROCEDURE EqualPmtBeforeDiscDateLCY@15();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126466, 124030.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with equal Payment Amount and
      // within Payment Discount Period.
      Initialize;
      EqualPmtBeforeDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler)]
    PROCEDURE EqualPmtBeforeDiscDateFCY@14();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126466, 124030.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with equal Payment Amount
      // and same Currency, within Payment Discount Period.
      Initialize;
      CurrencyCode := CreateCurrency;
      EqualPmtBeforeDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler)]
    PROCEDURE EqualPmtBeforeDiscDateMultiCur@7();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126466, 124030.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with equal Payment Amount
      // and same Currency, within Payment Discount Period.
      Initialize;
      EqualPmtBeforeDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE EqualPmtBeforeDiscDate@53(CurrencyCode@1000 : Code[10];CurrencyCode2@1001 : Code[10]);
    VAR
      GenJournalLine@1004 : Record 81;
      Amount@1002 : Decimal;
      NoOfLines@1003 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount.
      // Take Payment Amount equal to Invoice Amount and within Discount Period. Use different currency for Invoice and Payment.
      ModifyGeneralLedgerSetup;
      ComputeAmountAndNoOfLines(Amount,NoOfLines);
      PaymentWithDiscount(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,
        Amount,-Amount * NoOfLines,NoOfLines,GetDueDate);

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler)]
    PROCEDURE EqualPmtAfterDueDateLCY@18();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126472, 126476, 124031, 124035.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with equal Payment Amount and after
      // Payment Discount Period.
      Initialize;
      EqualPmtAfterDueDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler)]
    PROCEDURE EqualPmtAfterDueDateFCY@17();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126472, 136476, 124031, 124035.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with equal Payment Amount
      // and same Currency and after Payment Discount Period.
      Initialize;
      CurrencyCode := CreateCurrency;
      EqualPmtAfterDueDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler)]
    PROCEDURE EqualPmtAfterDueDateMultiCur@13();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126472, 126476, 124031, 124035.

      // Check Payment Discount and Amount LCY on Customer Ledger Entries after posting Journal Lines with equal Payment Amount
      // and different Currencies and after Payment Discount Period.
      Initialize;
      EqualPmtAfterDueDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE EqualPmtAfterDueDate@76(CurrencyCode@1002 : Code[10];CurrencyCode2@1004 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      Amount@1003 : Decimal;
      NoOfLines@1000 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount.
      // and after Discount Period. Take Payment Amount equal to Invoice Amount.
      ModifyGeneralLedgerSetup;
      ComputeAmountAndNoOfLines(Amount,NoOfLines);
      PaymentWithDiscountTolerance(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Document Type"::Payment,Amount,-Amount * NoOfLines,NoOfLines,CALCDATE('<1D>',GetDueDate));

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtBeforeDiscDateLCY@30();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126467, 124032.

      // Check Payment Discount Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and within
      // within Payment Discount Period.
      Initialize;
      LessPmtBeforeDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtBeforeDiscDateFCY@35();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126467, 124032.

      // Check Payment Discount Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and same
      // Currency and within discount period.
      Initialize;
      CurrencyCode := CreateCurrency;
      LessPmtBeforeDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtBeforeDiscDateMultiCur@34();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126467, 124032.

      // Check Payment Discount Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and with
      // different Currencies and within Payment Discount Period.
      Initialize;
      LessPmtBeforeDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE LessPmtBeforeDiscDate@39(CurrencyCode@1001 : Code[10];CurrencyCode2@1002 : Code[10]);
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1007 : Decimal;
      Amount2@1006 : Decimal;
      NoOfLines@1004 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount.
      // Take Payment Amount less than Invoice Amount and within Discount Period. Post Payment Lines in Payment Discount Grace Period.
      ModifyGeneralLedgerSetup;
      ComputeAmountFromMaxPmtTol(Amount,Amount2,NoOfLines);
      PaymentWithTolerance(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,
        Amount,-Amount2,NoOfLines,GetDueDate);

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtAfterDiscDateLCY@43();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126473, 124033.

      // Check Payment Discount Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and after
      // Payment Discount Period.
      Initialize;
      LessPmtAfterDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtAfterDiscDateFCY@28();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126473, 124033.

      // Check Payment Discount Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount
      // and same Currency and after Payment Discount Period.
      Initialize;
      CurrencyCode := CreateCurrency;
      LessPmtAfterDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtAfterDiscDateMultiCur@10();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126473, 124033.

      // Check Payment Discount Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and with
      // different Currencies and after Payment Discount Period.
      Initialize;
      LessPmtAfterDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE LessPmtAfterDiscDate@50(CurrencyCode@1001 : Code[10];CurrencyCode2@1002 : Code[10]);
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1007 : Decimal;
      Amount2@1006 : Decimal;
      NoOfLines@1004 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount.
      // Take Payment Amount less than Invoice Amount. Post Payment Lines after Payment Discount Grace Period.
      ModifyGeneralLedgerSetup;
      ComputeAmountFromMaxPmtTol(Amount,Amount2,NoOfLines);
      PaymentWithDiscountTolerance(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Document Type"::Payment,Amount,-Amount2,NoOfLines,CALCDATE('<1D>',GetDueDate));

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtBeforeDiscDateLCY@32();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126468, 124036, 124037.

      // Check Payment Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and within Payment
      // Discount Period.
      Initialize;
      UnderAmtBeforeDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtBeforeDiscDateFCY@31();
    VAR
      CurrencyCode@1001 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126468, 124036, 124037.

      // Check Payment Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and Currency
      // within Payment Discount Period.
      Initialize;
      CurrencyCode := CreateCurrency;
      UnderAmtBeforeDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtBeforeDiscDateMultiCur@29();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126468, 124036, 124037.

      // Check Payment Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and multiple
      // Currencies and within Payment Discount Period.
      Initialize;
      UnderAmtBeforeDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE UnderAmtBeforeDiscDate@54(CurrencyCode@1004 : Code[10];CurrencyCode2@1005 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      Amount@1003 : Decimal;
      Amount2@1000 : Decimal;
      NoOfLines@1002 : Integer;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount.
      // Take Payment Amount less than Invoice Amount and within Discount Period.
      ModifyGeneralLedgerSetup;
      ComputeAmountFromPmtTolPercent(Amount,Amount2,NoOfLines);
      PaymentWithTolerance(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,
        Amount,-Amount2,NoOfLines,GetDueDate);

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtAfterDiscDateLCY@47();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126474, 126477, 124038.

      // Check Payment Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount after Payment
      // Discount Period.
      Initialize;
      UnderAmtAfterDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtAfterDiscDateFCY@45();
    VAR
      CurrencyCode@1001 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126474, 126477, 124038.

      // Check Payment Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and Same Currency
      // after Payment Discount Period.
      Initialize;
      CurrencyCode := CreateCurrency;
      UnderAmtAfterDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesPageHandler,PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtAfterDiscDateMultiCur@44();
    BEGIN
      // Covers documents TFS_TC_ID=126464, 126474, 126477, 124038.

      // Check Payment Tolerance, Amount LCY on Customer Ledger Entries after Posting Journal Lines with Less Amount and multiple
      // Currencies.
      Initialize;
      UnderAmtAfterDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE UnderAmtAfterDiscDate@57(CurrencyCode@1004 : Code[10];CurrencyCode2@1005 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      Amount@1003 : Decimal;
      Amount2@1000 : Decimal;
      NoOfLines@1002 : Integer;
    BEGIN
      // Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount.
      // Take Payment Amount less than Invoice Amount and after Discount Period.
      ModifyGeneralLedgerSetup;
      ComputeAmountFromPmtTolPercent(Amount,Amount2,NoOfLines);
      PaymentWithDiscountTolerance(CurrencyCode,CurrencyCode2,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Document Type"::Payment,Amount,-Amount2,NoOfLines,CALCDATE('<1D>',GetDueDate));

      // Tear Down.
      CleanupGeneralLedgerSetup;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PaymentWithDiscount@19(CurrencyCode@1005 : Code[10];CurrencyCode2@1004 : Code[10];DocumentType@1003 : Option;DocumentType2@1002 : Option;Amount@1001 : Decimal;Amount2@1000 : Decimal;NoOfLines@1013 : Integer;PostingDate@1008 : Date);
    VAR
      GenJournalLine@1010 : Record 81;
      TempGenJournalLine@1007 : TEMPORARY Record 81;
      DetailedCustLedgEntry@1009 : Record 379;
      PmtDiscount@1006 : Decimal;
    BEGIN
      // Exercise: Create and Post General Journal Lines with Random Amount. Apply the later created Journal Line on previously created
      // Journal Lines and Post them. Take Posting Date in Payment Discount Period.
      CreateDocumentLine(GenJournalLine,DocumentType,CreateCustomer,CurrencyCode,Amount,WORKDATE,NoOfLines);
      SaveGenJnlLineInTempTable(TempGenJournalLine,GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateDocumentLine(GenJournalLine,DocumentType2,GenJournalLine."Account No.",CurrencyCode2,Amount2,PostingDate,1);
      ApplyAndPostJournalLines(GenJournalLine,DocumentType);

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry and G/L Entry.
      PmtDiscount := GetAmountFCY(CurrencyCode2,GetDiscountAmount(Amount * NoOfLines));
      VerifyCustomerLedgerEntry(TempGenJournalLine,GetDiscountAmount(Amount));
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine."Document No.",DocumentType2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",
        -PmtDiscount);
    END;

    LOCAL PROCEDURE PaymentWithTolerance@33(CurrencyCode@1000 : Code[10];CurrencyCode2@1009 : Code[10];DocumentType@1010 : Option;DocumentType2@1011 : Option;Amount@1012 : Decimal;Amount2@1003 : Decimal;NoOfLines@1013 : Integer;PostingDate@1004 : Date);
    VAR
      GenJournalLine@1001 : Record 81;
      TempGenJournalLine@1005 : TEMPORARY Record 81;
      DetailedCustLedgEntry@1006 : Record 379;
      PmtTolAmount@1002 : Decimal;
    BEGIN
      // Exercise: Create and Post General Journal Lines with Random Amount. Apply the later created Journal Line on previously created
      // Journal Lines and Post them. Take Posting Date within Payment Discount Period.
      CreateDocumentLine(GenJournalLine,DocumentType,CreateCustomer,CurrencyCode,Amount,WORKDATE,NoOfLines);
      SaveGenJnlLineInTempTable(TempGenJournalLine,GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateDocumentLine(GenJournalLine,DocumentType2,GenJournalLine."Account No.",CurrencyCode2,Amount2,PostingDate,1);
      ApplyAndPostJournalLines(GenJournalLine,DocumentType);

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry.
      PmtTolAmount := GetAmountFCY(CurrencyCode2,Amount2 + (Amount * NoOfLines - GetDiscountAmount(Amount * NoOfLines)));
      VerifyCustomerLedgerEntry(TempGenJournalLine,GetDiscountAmount(Amount));
      VerifyDetldCustomerLedgerEntry(GenJournalLine."Document No.",DocumentType2,
        DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",-PmtTolAmount);
    END;

    LOCAL PROCEDURE PaymentWithDiscountTolerance@21(CurrencyCode@1011 : Code[10];CurrencyCode2@1010 : Code[10];DocumentType@1009 : Option;DocumentType2@1008 : Option;Amount@1007 : Decimal;Amount2@1006 : Decimal;NoOfLines@1013 : Integer;PostingDate@1001 : Date);
    VAR
      GenJournalLine@1004 : Record 81;
      TempGenJournalLine@1002 : TEMPORARY Record 81;
      DetailedCustLedgEntry@1003 : Record 379;
      PmtTolAmount@1000 : Decimal;
    BEGIN
      // Exercise: Create and Post General Journal Lines with Random Amount. Apply the later created Journal Line on previously created
      // Journal Lines and Post them. Take Posting Date after Payment Discount Period.
      CreateDocumentLine(GenJournalLine,DocumentType,CreateCustomer,CurrencyCode,Amount,WORKDATE,NoOfLines);
      SaveGenJnlLineInTempTable(TempGenJournalLine,GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateDocumentLine(GenJournalLine,DocumentType2,GenJournalLine."Account No.",CurrencyCode2,Amount2,PostingDate,1);
      ApplyAndPostJournalLines(GenJournalLine,DocumentType);

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry and G/L Entry.
      PmtTolAmount := GetAmountFCY(CurrencyCode2,GetDiscountAmount(Amount * NoOfLines));
      VerifyCustomerLedgerEntry(TempGenJournalLine,GetDiscountAmount(Amount));
      VerifyDetldCustomerLedgerEntry(GenJournalLine."Document No.",DocumentType2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-PmtTolAmount);
    END;

    LOCAL PROCEDURE ModifyGeneralLedgerSetup@5();
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Take Payment Discount Grace Period: 5D. Payment Tolerance %: 1 and Max Payment Tolerance Amount: 5 (Standard Values).
      GeneralLedgerSetup.GET;
      EVALUATE(GeneralLedgerSetup."Payment Discount Grace Period",'<5D>');
      GeneralLedgerSetup.VALIDATE("Payment Tolerance %",1);
      GeneralLedgerSetup.VALIDATE("Max. Payment Tolerance Amount",5);
      GeneralLedgerSetup.VALIDATE(
        "Pmt. Disc. Tolerance Posting",GeneralLedgerSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts");
      GeneralLedgerSetup.VALIDATE(
        "Payment Tolerance Posting",GeneralLedgerSetup."Payment Tolerance Posting"::"Payment Discount Accounts");
      GeneralLedgerSetup.VALIDATE("Pmt. Disc. Tolerance Warning",TRUE);
      GeneralLedgerSetup.VALIDATE("Payment Tolerance Warning",TRUE);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CleanupGeneralLedgerSetup@24();
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Cleanup of the Setups done.
      GeneralLedgerSetup.GET;
      EVALUATE(GeneralLedgerSetup."Payment Discount Grace Period",'');
      GeneralLedgerSetup.VALIDATE("Payment Tolerance %",0);
      GeneralLedgerSetup.VALIDATE("Max. Payment Tolerance Amount",0);
      GeneralLedgerSetup.VALIDATE(
        "Pmt. Disc. Tolerance Posting",GeneralLedgerSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts");
      GeneralLedgerSetup.VALIDATE(
        "Payment Tolerance Posting",GeneralLedgerSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts");
      GeneralLedgerSetup.VALIDATE("Pmt. Disc. Tolerance Warning",FALSE);
      GeneralLedgerSetup.VALIDATE("Payment Tolerance Warning",FALSE);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDocumentLine@9(VAR GenJournalLine@1004 : Record 81;DocumentType@1006 : Option;CustomerNo@1000 : Code[20];CurrencyCode@1007 : Code[10];Amount@1001 : Decimal;DocumentDate@1008 : Date;NoOfLines@1003 : Integer);
    VAR
      GenJournalBatch@1005 : Record 232;
      Counter@1002 : Integer;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      FOR Counter := 1 TO NoOfLines DO
        CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,DocumentType,Amount,CustomerNo,INCSTR(GenJournalLine."Document No."),
          CurrencyCode,DocumentDate);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@40(VAR GenJournalLine@1005 : Record 81;GenJournalBatch@1000 : Record 232;DocumentType@1004 : Option;Amount@1003 : Decimal;CustomerNo@1002 : Code[20];DocumentNo@1001 : Code[20];CurrencyCode@1006 : Code[10];PostingDate@1007 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      IF DocumentNo <> '' THEN
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SaveGenJnlLineInTempTable@49(VAR TempGenJournalLine@1001 : TEMPORARY Record 81;GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine.FINDSET;
      REPEAT
        TempGenJournalLine := GenJournalLine;
        TempGenJournalLine.INSERT;
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCustomer@41() : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",GetPaymentTerms);
      Customer.MODIFY(TRUE);
      UpdateCustomerPostingGroup(Customer."Customer Posting Group");
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@2() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      // Create Currency with Payment Tolerance %: 1 and Max. Payment Tolerance Amount: 5 (Standard Values).
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Payment Tolerance %",1);
      Currency.VALIDATE("Max. Payment Tolerance Amount",5);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);

      // Create Exchange Rate.
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE UpdateCustomerPostingGroup@36(PostingGroupCode@1000 : Code[10]);
    VAR
      CustomerPostingGroup@1001 : Record 92;
      GLAccount@1002 : Record 15;
    BEGIN
      CustomerPostingGroup.GET(PostingGroupCode);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE(Blocked,FALSE);
      GLAccount.FINDSET;
      CustomerPostingGroup.VALIDATE("Payment Disc. Debit Acc.",GLAccount."No.");
      CustomerPostingGroup.VALIDATE("Payment Disc. Credit Acc.",GLAccount."No.");
      GLAccount.NEXT;
      CustomerPostingGroup.VALIDATE("Payment Tolerance Debit Acc.",GLAccount."No.");
      CustomerPostingGroup.VALIDATE("Payment Tolerance Credit Acc.",GLAccount."No.");
      CustomerPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ComputeAmountAndNoOfLines@46(VAR Amount@1001 : Decimal;VAR NoOfLines@1002 : Integer);
    BEGIN
      NoOfLines := 1 + LibraryRandom.RandInt(5);
      Amount := 10 * LibraryRandom.RandInt(100);
    END;

    LOCAL PROCEDURE ComputeAmountFromPmtTolPercent@26(VAR Amount@1000 : Decimal;VAR Amount2@1001 : Decimal;VAR NoOfLines@1003 : Integer);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      // To Calculate Payment value using "Payment Tolerance %" from General Ledger Setup.
      GeneralLedgerSetup.GET;
      NoOfLines := 1 + LibraryRandom.RandInt(5);
      Amount := LibraryRandom.RandInt(499);
      Amount2 := Amount * NoOfLines - ((Amount * NoOfLines) * GeneralLedgerSetup."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE ComputeAmountFromMaxPmtTol@27(VAR Amount@1002 : Decimal;VAR Amount2@1001 : Decimal;VAR NoOfLines@1003 : Integer);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      // To Calculate Payment value using "Max. Payment Tolerance Amount" from General Ledger Setup.
      GeneralLedgerSetup.GET;
      NoOfLines := 1 + LibraryRandom.RandInt(5);
      Amount := 500 * LibraryRandom.RandInt(10);
      Amount2 :=
        Amount * NoOfLines - (GeneralLedgerSetup."Max. Payment Tolerance Amount" + (Amount * NoOfLines * GetDiscountPercent / 100));
    END;

    LOCAL PROCEDURE ApplyAndPostJournalLines@12(VAR GenJournalLine@1002 : Record 81;DocumentType@1000 : Option);
    VAR
      GLRegister@1006 : Record 45;
      CustLedgerEntry@1003 : Record 21;
      GenJnlApply@1005 : Codeunit 225;
      CustEntrySetApplID@1004 : Codeunit 101;
      ApplyCustomerEntries@1001 : Page 232;
    BEGIN
      GLRegister.FINDLAST;
      CustLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      CustLedgerEntry.SETRANGE("Document Type",DocumentType);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustEntrySetApplID.SetApplId(CustLedgerEntry,CustLedgerEntry,GenJournalLine."Document No.");
        ApplyCustomerEntries.CalcApplnAmount;
      UNTIL CustLedgerEntry.NEXT = 0;
      COMMIT;
      GenJnlApply.RUN(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE GetDueDate@23() : Date;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      PaymentTerms.GET(GetPaymentTerms);
      EXIT(CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE));
    END;

    LOCAL PROCEDURE GetDiscountPercent@1() : Decimal;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      PaymentTerms.GET(GetPaymentTerms);
      EXIT(PaymentTerms."Discount %");
    END;

    LOCAL PROCEDURE GetDiscountAmount@4(Amount@1001 : Decimal) : Decimal;
    BEGIN
      EXIT(Amount * GetDiscountPercent / 100);
    END;

    LOCAL PROCEDURE GetPaymentTerms@16() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
        PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
        PaymentTerms.MODIFY(TRUE);
      END;
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE GetAmountFCY@3(CurrencyCode@1000 : Code[10];Amount@1001 : Decimal) : Decimal;
    VAR
      CurrencyExchangeRate@1003 : Record 330;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(Amount);
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      EXIT(Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount");
    END;

    [Normal]
    LOCAL PROCEDURE VerifyCustomerLedgerEntry@56(VAR TempGenJournalLine@1001 : TEMPORARY Record 81;OriginalPmtDiscPossible@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      // Verify Payment Discount Amount in Customer Ledger Entry.
      GeneralLedgerSetup.GET;
      TempGenJournalLine.FINDSET;
      REPEAT
        CustLedgerEntry.SETRANGE("Document No.",TempGenJournalLine."Document No.");
        CustLedgerEntry.FINDFIRST;
        Assert.AreNearlyEqual(
          OriginalPmtDiscPossible,CustLedgerEntry."Original Pmt. Disc. Possible",GeneralLedgerSetup."Amount Rounding Precision",
          STRSUBSTNO(AmountError,CustLedgerEntry.FIELDCAPTION("Original Pmt. Disc. Possible"),OriginalPmtDiscPossible,
            CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No."));
      UNTIL TempGenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDetldCustomerLedgerEntry@37(DocumentNo@1006 : Code[20];DocumentType@1005 : Option;EntryType@1001 : Option;AmountLCY@1003 : Decimal);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      // Verify Amount LCY for Various Entries in Detailed Customer Ledger Entry.
      GeneralLedgerSetup.GET;
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.FINDFIRST;
      Assert.AreNearlyEqual(AmountLCY,DetailedCustLedgEntry."Amount (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,DetailedCustLedgEntry.FIELDCAPTION("Amount (LCY)"),AmountLCY,DetailedCustLedgEntry.TABLECAPTION,
          DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    [ModalPageHandler]
    PROCEDURE PaymentTolerancePageHandler@22(VAR PaymentToleranceWarning@1000 : Page 591;VAR Response@1001 : Action);
    BEGIN
      // Set Integer Value 1 for option "Post Balance for Payment Discount" on Tolerance Warning page.
      PaymentToleranceWarning.InitializeOption(1);
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentDiscTolPageHandler@20(VAR PaymentDiscToleranceWarning@1000 : Page 599;VAR Response@1001 : Action);
    BEGIN
      // Set Integer Value 1 for option "Post as Payment Disc. Tolerance" on Tolerance Warning page.
      PaymentDiscToleranceWarning.InitializeNewPostingAction(1);
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntriesPageHandler@38(VAR ApplyCustomerEntries@1000 : Page 232;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [Payment Tolerance] [Sales]
      Unsupported version tags:
      NA: Unable to Execute

      Test to verify Payment Tolerance, Payment Discount Tolerance and Payment Discount for Customer.
      1. Test Payment Discount after applying single payment on multiple Invoices. Payment is greater than Invoice Amount and within
         Payment Discount period.
      2. Test Payment Discount after applying single Payment on multiple Invoices. Payment is greater than Invoice Amount and
         within Payment Discount period using same Currency.
      3. Test Payment Discount after applying single Payment on multiple Invoices. Payment is greater than Invoice Amount and within
         Payment Discount period and different Currencies.
      4. Test Payment Discount after applying single payment on multiple Invoices. Payment is greater than Invoice Amount and after
         Payment Discount period.
      5. Test Payment Discount after applying single Payment on multiple Invoices. Payment is greater than Invoice Amount and
         after Payment Discount period using same Currency.
      6. Test Payment Discount after applying single Payment on multiple Invoices. Payment is greater than Invoice Amount and after
         Payment Discount period and different Currencies.
      7. Test Payment Discount after applying single payment on multiple Invoices. Payment is equal to Invoice Amount and within
         Payment Discount period.
      8. Test Payment Discount after applying single Payment on multiple Invoices. Payment is equal to Invoice Amount and
         within Payment Discount period using same Currency.
      9. Test Payment Discount after applying single Payment on multiple Invoices. Payment is equal to Invoice Amount and within
         Payment Discount period using different Currencies.
      10. Test Payment Discount after applying single payment on multiple Invoices. Payment is equal to Invoice Amount and after
          Payment Discount period.
      11. Test Payment Discount after applying single Payment on multiple Invoices. Payment is equal to Invoice Amount and
          after Payment Discount period using same Currency.
      12. Test Payment Discount after applying single Payment on multiple Invoices. Payment is equal to Invoice Amount and after
          Payment Discount period using different Currencies.
      13. Test Payment Discount Tolerance after applying single payment on multiple Invoices. Payment is less than Invoice Amount and
          within Payment Discount period. Use Max Tolerance Amount for Less Amount.
      14. Test Payment Discount Tolerance after applying single Payment on multiple Invoices. Payment is less than Invoice Amount
          and within Payment Discount period using same Currency. Use Max Tolerance Amount for Less Amount.
      15. Test Payment Discount Tolerance after applying single Payment on multiple Invoices. Payment is less than Invoice Amount and
          with Payment Discount period using different Currencies. Use Max Tolerance Amount for Less Amount.
      16. Test Payment Discount Tolerance after applying single payment on multiple Invoices. Payment is less than Invoice Amount and
          after Payment Discount period. Use Max Tolerance Amount for Less Amount.
      17. Test Payment Discount Tolerance after applying single Payment on multiple Invoices. Payment is less than Invoice Amount
          and after Payment Discount period using same Currency. Use Max Tolerance Amount for Less Amount.
      18. Test Payment Discount Tolerance after applying single Payment on multiple Invoices. Payment is Less than Invoice Amount and
          after Payment Discount period using different Currencies. Use Max Tolerance Amount for Less Amount.
      19. Test Payment Tolerance after applying single payment on multiple Invoices. Payment is less than Invoice Amount and within
          Payment Discount period. Use Max Tolerance Amount for Less Amount.
      20. Test Payment Tolerance after applying single Payment on multiple Invoices. Payment is less than Invoice Amount and within
          Payment Discount period using same Currency. Use Max Tolerance Amount for Less Amount.
      21. Test Payment Discount Tolerance after applying single Payment on multiple Invoices. Payment is Less than Invoice Amount and
          within Payment Discount period using different Currencies. Use Max Tolerance Amount for Less Amount.
      22. Test Payment Tolerance after applying single payment on multiple Invoices. Payment is less than Invoice Amount and after
          Payment Discount period. Use Payment Tolerance % for Less Amount.
      23. Test Payment Tolerance after applying single Payment on multiple Invoices. Payment is less than Invoice Amount and
          after Payment Discount period using same Currency. Use Payment Tolerance % for Less Amount.
      24. Test Payment Discount Tolerance after applying single Payment on multiple Invoices. Payment is Less than Invoice Amount and
          after Payment Discount period using different Currencies. Use Payment Tolerance % for Less Amount.

      Cover Test cases:
        TFS_TC_ID-126464 and TC_ID= 6538
        TFS_TC_ID-126465 and TC_ID= 6539
        TFS_TC_ID-126466 and TC_ID= 6540
        TFS_TC_ID-126467 and TC_ID= 6541
        TFS_TC_ID-126468 and TC_ID= 6542
        TFS_TC_ID-126469 and TC_ID= 6543
        TFS_TC_ID-126470 and TC_ID= 6544
        TFS_TC_ID-126471 and TC_ID= 6545
        TFS_TC_ID-126472 and TC_ID= 6546
        TFS_TC_ID-126473 and TC_ID= 6547
        TFS_TC_ID-126474 and TC_ID= 6548
        TFS_TC_ID-126475 and TC_ID= 6549
        TFS_TC_ID-126476 and TC_ID= 6550
        TFS_TC_ID-126477 and TC_ID= 6551
        TFS_TC_ID-124028 and TC_ID= 6552
        TFS_TC_ID-124029 and TC_ID= 6553
        TFS_TC_ID-124030 and TC_ID= 6554
        TFS_TC_ID-124031 and TC_ID= 6555
        TFS_TC_ID-124032 and TC_ID= 6556
        TFS_TC_ID-124033 and TC_ID= 6557
        TFS_TC_ID-124034 and TC_ID= 6558
        TFS_TC_ID-124035 and TC_ID= 6559
        TFS_TC_ID-124036 and TC_ID= 6560
        TFS_TC_ID-124037 and TC_ID= 6561
        TFS_TC_ID-124038 and TC_ID= 6562
    }
    END.
  }
}

