OBJECT Codeunit 132215 Library - Error Message
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempErrorMessage@1000 : TEMPORARY Record 700;
      DataTypeManagement@1001 : Codeunit 701;
      Assert@1002 : Codeunit 130000;
      ErrorMessages@1003 : TestPage 700;
      IfEmptyErr@1004 : TextConst '@@@="%1=caption of a field, %2=key of record";ENU=''%1'' in ''%2'' must not be blank.';
      IfLengthExceededErr@1005 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer, %4=integer";ENU=The maximum length of ''%1'' in ''%2'' is %3 characters. The actual length is %4.';
      IfInvalidCharactersErr@1006 : TextConst '@@@="%1=caption of a field, %2=key of record";ENU=''%1'' in ''%2'' contains invalid characters.';
      IfOutsideRangeErr@1007 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer, %4=integer";ENU=''%1'' in ''%2'' is outside of the permitted range from %3 to %4.';
      IfGreaterThanErr@1008 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be less or equal to %3.';
      IfLessThanErr@1009 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be greater or equal to %3.';
      IfEqualToErr@1010 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must not be equal to %3.';
      IfNotEqualToErr@1011 : TextConst '@@@="%1=caption of a field, %2=key of record, %3=integer";ENU=''%1'' in ''%2'' must be equal to %3.';
      StringLengthCorrectErr@1012 : TextConst 'ENU=String length is correct even though it should not be.';
      ErrorMessageNotFoundTxt@1013 : TextConst '@@@="%1=Value in the description field,%2=Error/Warning/Information";ENU=Error message with description %1 and type %2 was not found.';
      NoValidRecordErr@1014 : TextConst 'ENU=No valid record was specified.';

    PROCEDURE TrapErrorMessages@1();
    BEGIN
      ErrorMessages.TRAP;
    END;

    PROCEDURE LoadErrorMessages@2();
    BEGIN
      IF ErrorMessages.FIRST THEN
        REPEAT
          TempErrorMessage.INIT;
          TempErrorMessage.ID += 1;
          EVALUATE(TempErrorMessage."Message Type",ErrorMessages."Message Type".VALUE);
          TempErrorMessage.Description := ErrorMessages.Description.VALUE;
          TempErrorMessage."Table Name" := ErrorMessages."Table Name".VALUE;
          TempErrorMessage."Field Name" := ErrorMessages."Field Name".VALUE;
          TempErrorMessage."Additional Information" := ErrorMessages."Additional Information".VALUE;
          TempErrorMessage."Support Url" := ErrorMessages."Support Url".VALUE;
          TempErrorMessage.INSERT;
        UNTIL NOT ErrorMessages.NEXT;
    END;

    PROCEDURE AssertLogIfMessageExists@3(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;ExpectedMessageType@1002 : Option);
    VAR
      RecordRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
      ExpectedDescription@1005 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfEmptyErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID));
      AssertMessageExists(ExpectedDescription,ExpectedMessageType);
    END;

    PROCEDURE AssertLogIfLengthExceededExists@4(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;ExpectedMessageType@1002 : Option;MaxLength@1003 : Integer);
    VAR
      RecordRef@1004 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1006 : Text;
      StringLength@1007 : Integer;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      StringLength := STRLEN(FORMAT(FieldRef.VALUE));
      IF StringLength <= MaxLength THEN
        ERROR(StringLengthCorrectErr);

      ExpectedDescription := STRSUBSTNO(IfLengthExceededErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),MaxLength,StringLength);

      AssertMessageExists(ExpectedDescription,ExpectedMessageType);
    END;

    PROCEDURE AssertLogIfInvalidCharactersExists@18(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option);
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1004 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfInvalidCharactersErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID));
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    PROCEDURE AssertLogIfOutsideRangeExists@11(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;LowerBound@1007 : Variant;UpperBound@1010 : Variant);
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1004 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfOutsideRangeErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),LowerBound,UpperBound);
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    PROCEDURE AssertLogIfGreaterThanExists@13(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;LowerBound@1007 : Variant);
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1004 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfGreaterThanErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),LowerBound);
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    PROCEDURE AssertLogIfLessThanExists@20(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;UpperBound@1010 : Variant);
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1004 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfLessThanErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),UpperBound);
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    PROCEDURE AssertLogIfEqualToExists@12(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValueVariant@1010 : Variant);
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1004 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfEqualToErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),ValueVariant);
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    PROCEDURE AssertLogIfNotEqualToExists@14(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;MessageType@1002 : Option;ValueVariant@1010 : Variant);
    VAR
      RecordRef@1006 : RecordRef;
      FieldRef@1005 : FieldRef;
      ExpectedDescription@1004 : Text;
    BEGIN
      AssertGetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef);

      ExpectedDescription := STRSUBSTNO(IfNotEqualToErr,FieldRef.CAPTION,FORMAT(RecordRef.RECORDID),ValueVariant);
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    PROCEDURE AssertLogSimpleMessageExists@10(MessageType@1003 : Option;ExpectedDescription@1004 : Text);
    BEGIN
      AssertMessageExists(ExpectedDescription,MessageType);
    END;

    LOCAL PROCEDURE AssertMessageExists@5(ExpectedDescription@1000 : Text;MessageType@1001 : Option);
    BEGIN
      TempErrorMessage.RESET;
      TempErrorMessage.SETRANGE(Description,ExpectedDescription);
      TempErrorMessage.SETRANGE("Message Type",MessageType);
      Assert.IsFalse(TempErrorMessage.ISEMPTY,
        STRSUBSTNO(ErrorMessageNotFoundTxt,
          ExpectedDescription,MessageType));
    END;

    LOCAL PROCEDURE AssertGetRecordRefAndFieldRef@6(RecRelatedVariant@1000 : Variant;FieldNumber@1001 : Integer;VAR RecordRef@1002 : RecordRef;VAR FieldRef@1003 : FieldRef);
    BEGIN
      IF NOT DataTypeManagement.GetRecordRefAndFieldRef(RecRelatedVariant,FieldNumber,RecordRef,FieldRef) THEN
        ERROR(NoValidRecordErr);
    END;

    BEGIN
    END.
  }
}

