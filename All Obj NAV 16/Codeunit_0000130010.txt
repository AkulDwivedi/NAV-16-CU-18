OBJECT Codeunit 130010 Library - Calc. Complexity
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DivisionByZeroErr@1000 : TextConst 'ENU=Division by zero.';

    PROCEDURE IsLinear@81(x1@1000 : Decimal;x2@1001 : Decimal;x3@1002 : Decimal;f1@1003 : Decimal;f2@1004 : Decimal;f3@1005 : Decimal) : Boolean;
    VAR
      a@1006 : Decimal;
      b@1007 : Decimal;
      ExpectedF3@1012 : Decimal;
      ExpectedUpperBound@1009 : Decimal;
    BEGIN
      // x1, x2, and x3 are sizes of data input. fx1, fx2, and fx3 are the cost of processing that data
      // If the cost is linear: f(x) = a.x + b
      // Demonstrate that the computational cost is linear by finding a and b and checking that
      // an upper bound can be defined, so fx3 is actually under the bound

      IF x1 = x2 THEN
        ERROR(DivisionByZeroErr);

      a := (f1 - f2) / (x1 - x2);

      b := f1 - (a * x1);

      ExpectedF3 := (a * x3) + b;

      ExpectedUpperBound := ExpectedF3 * Noise;

      EXIT(f3 <= ExpectedUpperBound);
    END;

    PROCEDURE IsLogN@4(x1@1009 : Decimal;x2@1008 : Decimal;x3@1007 : Decimal;f1@1006 : Decimal;f2@1005 : Decimal;f3@1004 : Decimal) : Boolean;
    VAR
      a@1003 : Decimal;
      b@1002 : Decimal;
      ExpectedF3@1001 : Decimal;
      ExpectedUpperBound@1000 : Decimal;
    BEGIN
      // x1, x2 and x3 are sizes of data input. fx1, fx2 and fx3 are the cost of processing that data
      // If the cost is logarithmic: f(x) = a.log(x) + b
      // Demonstrate that the computational cost is logarithmic by finding a and b and checking that
      // an upper bound can be defined, so that fx3 is actually under the bound

      IF x1 = x2 THEN
        ERROR(DivisionByZeroErr);

      a := (f1 - f2) / (Log(x1) - Log(x2));
      b := f1 - a * Log(x1);

      ExpectedF3 := (a * Log(x3)) + b;

      ExpectedUpperBound := ExpectedF3 * Noise;

      EXIT(f3 <= ExpectedUpperBound);
    END;

    PROCEDURE IsNLogN@2(x1@1000 : Decimal;x2@1001 : Decimal;x3@1002 : Decimal;x4@1010 : Decimal;f1@1003 : Decimal;f2@1004 : Decimal;f3@1005 : Decimal;f4@1011 : Decimal) : Boolean;
    VAR
      a@1006 : Decimal;
      b@1007 : Decimal;
      c@1008 : Decimal;
      ExpectedF4@1012 : Decimal;
      ExpectedUpperBound@1009 : Decimal;
    BEGIN
      // x1, x2, x3 and x4 are sizes of data input. fx1, fx2,fx3 and fx4 are the cost of processing that data
      // If the cost is quadratic: f(x) = a.x.log(x) + b.x + c
      // Demonstrate that the computational cost is quadratic by finding a and b and c and checking that
      // an upper bound can be defined, so fx4 is actually under the bound

      IF (x1 = x2) OR (x1 = x3) THEN
        ERROR(DivisionByZeroErr);

      b :=
        (((x1 * Log(x1) - x3 * Log(x3)) * (f1 - f2)) -
         ((x1 * Log(x1) - x2 * Log(x2)) * (f1 - f3))) /
        (((x1 - x2) * (x1 * Log(x1) - x3 * Log(x3))) -
         ((x1 - x3) * (x1 * Log(x1) - x2 * Log(x2))));

      a :=
        ((f1 - f2) - b * (x1 - x2)) /
        (x1 * Log(x1) - x2 * Log(x2));

      c := f1 - a * x1 * Log(x1) - b * x1;

      ExpectedF4 := (a * x4 * Log(x4)) + (b * x4) + c;

      ExpectedUpperBound := ExpectedF4 * Noise;

      EXIT(f4 <= ExpectedUpperBound);
    END;

    PROCEDURE IsQuadratic@23(x1@1000 : Decimal;x2@1001 : Decimal;x3@1002 : Decimal;x4@1010 : Decimal;f1@1003 : Decimal;f2@1004 : Decimal;f3@1005 : Decimal;f4@1011 : Decimal) : Boolean;
    VAR
      a@1006 : Decimal;
      b@1007 : Decimal;
      c@1008 : Decimal;
      ExpectedF4@1012 : Decimal;
      ExpectedUpperBound@1009 : Decimal;
    BEGIN
      // x1, x2, x3 and x4 are sizes of data input. fx1, fx2,fx3 and fx4 are the cost of processing that data
      // If the cost is quadratic: f(x) = a.x.x + b.x + c
      // Demonstrate that the computational cost is quadratic by finding a and b and c and checking that
      // an upper bound can be defined, so fx4 is actually under the bound

      IF (x1 = x2) OR (x1 = x3) THEN
        ERROR(DivisionByZeroErr);

      b :=
        (((x1 * x1 - x3 * x3) * (f1 - f2)) -
         ((x1 * x1 - x2 * x2) * (f1 - f3))) /
        (((x1 - x2) * (x1 * x1 - x3 * x3)) -
         ((x1 - x3) * (x1 * x1 - x2 * x2)));

      a :=
        ((f1 - f2) - b * (x1 - x2)) /
        (x1 * x1 - x2 * x2);

      c := f1 - a * x1 * x1 - b * x1;

      ExpectedF4 := (a * x4 * x4) + (b * x4) + c;

      ExpectedUpperBound := ExpectedF4 * Noise;

      EXIT(f4 <= ExpectedUpperBound);
    END;

    LOCAL PROCEDURE Log@3(x@1000 : Decimal) : Decimal;
    VAR
      z@1001 : Decimal;
    BEGIN
      // Deriving LogX base 2 from Taylor Series
      z := (x - 1) / (x + 1);
      z :=
        z +
        1 / 3 * POWER(z,3) +
        1 / 5 * POWER(z,5) +
        1 / 7 * POWER(z,7) +
        1 / 9 * POWER(z,9);
      z := 2 * z / 0.693147;
      EXIT(z);
    END;

    LOCAL PROCEDURE Noise@1() : Decimal;
    BEGIN
      EXIT(1.05); // Adding a 5% ceiling
    END;

    BEGIN
    END.
  }
}

