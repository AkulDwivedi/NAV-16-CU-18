OBJECT Codeunit 134816 ERM CA Reporting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryCostAccounting@1003 : Codeunit 131340;
      LibraryUtility@1015 : Codeunit 131000;
      LibraryVariableStorage@1014 : Codeunit 131004;
      LibraryRandom@1002 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      ClosedEntryError@1004 : TextConst 'ENU=A closed register cannot be reactivated.';
      CostBudgetRegisterNotExisting@1010 : TextConst 'ENU=The Cost Budget Register does not exist.';
      CostRegisterNotExisting@1013 : TextConst 'ENU=The Cost Register does not exist.';
      DeleteClosedEntryError@1006 : TextConst 'ENU=Register %1 can no longer be deleted because it is marked as closed.';
      EndingDateNotAtYearEnd@1016 : TextConst 'ENU=%1 is not at year''s end.';
      EndingDateNotOlderThanOneYar@1017 : TextConst 'ENU=The selected year ending date %1 must be older than last year.';
      ExpectedValueIsDifferentError@1008 : TextConst 'ENU=Expected value of %1 field is different than the actual one.';
      FromRegNoHigherThanToRegNo@1018 : TextConst 'ENU=From Register No. must not be higher than To Register No..';
      IncorrectAllocEntriesCount@1007 : TextConst 'ENU=Incorrect number of cost allocation entries.';
      IncorrectBudgetRegEntriesCount@1009 : TextConst 'ENU=Incorrect number of cost budget register entries.';
      IncorrectCostRegEntriesCount@1011 : TextConst 'ENU=The number of cost entries should be %1.';
      GlobalCostBudget@1012 : Code[10];
      UnexpectedErrorMessage@1005 : TextConst 'ENU=Unexpected error message:\%1';

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerAllocBudgetCosts,MessageHandler)]
    PROCEDURE CloseCostBudgetRegisterEntry@14();
    VAR
      CostBudgetName@1000 : Record 1110;
      CostBudgetRegister@1004 : Record 1111;
      NoOfCostBudgetRegEntries@1001 : Integer;
      NoOfRegisterEntriesBefore@1003 : Integer;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      NoOfRegisterEntriesBefore := CostBudgetRegister.COUNT;

      COMMIT;
      GlobalCostBudget := CostBudgetName.Name;
      REPORT.RUN(REPORT::"Cost Allocation");
      NoOfCostBudgetRegEntries := CostBudgetRegister.COUNT - NoOfRegisterEntriesBefore;

      CloseCostBudgetRegEntries(NoOfCostBudgetRegEntries);

      // Verify:
      VerifyClosedBudgetEntries(NoOfCostBudgetRegEntries);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE CloseCostRegisterEntry@4();
    VAR
      NoOfCostRegisterEntries@1001 : Integer;
    BEGIN
      Initialize;

      NoOfCostRegisterEntries := 2;
      CloseCostRegisterEntries(NoOfCostRegisterEntries);

      // Verify:
      VerifyClosedEntries(NoOfCostRegisterEntries);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerAllocCosts,MessageHandler)]
    PROCEDURE DeleteAllocEntries@12();
    VAR
      CostEntry@1004 : Record 1104;
      CostRegister@1003 : Record 1105;
      ReversedCostAllocEntriesCount@1002 : Integer;
      LastAllocatedJnlNo@1001 : Integer;
      TotalAllocatedEntriesCountOld@1000 : Integer;
    BEGIN
      Initialize;

      // Setup:
      COMMIT;
      REPORT.RUN(REPORT::"Cost Allocation");

      CostRegister.SETRANGE(Source,CostRegister.Source::Allocation);
      CostRegister.FINDLAST;
      LastAllocatedJnlNo := CostRegister."No.";
      ReversedCostAllocEntriesCount := AllocatedWithJnlNo(LastAllocatedJnlNo) + AllocatedInJnlNo(LastAllocatedJnlNo);
      TotalAllocatedEntriesCountOld := TotalAllocatedCostEntries;

      // Exercise:
      LibraryCostAccounting.DeleteCostRegisterEntriesFrom(LastAllocatedJnlNo);

      // Verify:
      Assert.AreEqual(0,AllocatedWithJnlNo(LastAllocatedJnlNo),IncorrectAllocEntriesCount);
      Assert.AreEqual(
        TotalAllocatedEntriesCountOld - ReversedCostAllocEntriesCount,TotalAllocatedCostEntries,IncorrectAllocEntriesCount);

      // Verify Last Alloc Doc No. field from Cost Accounting Setup
      CostEntry.SETRANGE(Allocated,TRUE);
      CostEntry.FINDLAST;
      VerifyLastAllocationDocNo(CostEntry."Document No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerAllocBudgetCosts,MessageHandler)]
    PROCEDURE DeleteClosedBudgetEntry@16();
    VAR
      CostBudgetName@1003 : Record 1110;
      CostBudgetRegister@1002 : Record 1111;
      NoOfCostBudgetRegEntries@1001 : Integer;
      NoOfRegisterEntriesBefore@1004 : Integer;
      LastClosedEntryNo@1000 : Integer;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      NoOfRegisterEntriesBefore := CostBudgetRegister.COUNT;

      COMMIT;
      GlobalCostBudget := CostBudgetName.Name;
      REPORT.RUN(REPORT::"Cost Allocation");

      NoOfCostBudgetRegEntries := CostBudgetRegister.COUNT - NoOfRegisterEntriesBefore;
      LastClosedEntryNo := CloseCostBudgetRegEntries(NoOfCostBudgetRegEntries);

      // Exercise and Verify:
      ASSERTERROR LibraryCostAccounting.DeleteCostBudgetRegEntriesFrom(LastClosedEntryNo);
      Assert.AreEqual(
        STRSUBSTNO(DeleteClosedEntryError,LastClosedEntryNo),GETLASTERRORTEXT,STRSUBSTNO(UnexpectedErrorMessage,GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE DeleteClosedEntry@2();
    VAR
      NoOfCostRegisterEntries@1000 : Integer;
      LastClosedEntryNo@1003 : Integer;
    BEGIN
      Initialize;

      // Setup:
      NoOfCostRegisterEntries := 1;
      LastClosedEntryNo := CloseCostRegisterEntries(NoOfCostRegisterEntries);

      // Exercise and Verify:
      ASSERTERROR LibraryCostAccounting.DeleteCostRegisterEntriesFrom(LastClosedEntryNo);
      Assert.AreEqual(
        STRSUBSTNO(DeleteClosedEntryError,LastClosedEntryNo),GETLASTERRORTEXT,STRSUBSTNO(UnexpectedErrorMessage,GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerAllocBudgetCosts,MessageHandler)]
    PROCEDURE DeleteCostBudgetEntries@18();
    VAR
      CostBudgetEntry@1004 : Record 1109;
      CostBudgetName@1001 : Record 1110;
      CostBudgetRegister@1002 : Record 1111;
      NoOfBudgetRegEntriesToDelete@1000 : Integer;
      TotalNoOfBudgetRegEntries@1003 : Integer;
      NoOfRegisterEntriesBefore@1005 : Integer;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      NoOfRegisterEntriesBefore := CostBudgetRegister.COUNT;

      COMMIT;
      GlobalCostBudget := CostBudgetName.Name;
      REPORT.RUN(REPORT::"Cost Allocation");

      TotalNoOfBudgetRegEntries := CostBudgetRegister.COUNT;
      NoOfBudgetRegEntriesToDelete := LibraryRandom.RandInt(TotalNoOfBudgetRegEntries - NoOfRegisterEntriesBefore);

      // Exercise:
      LibraryCostAccounting.DeleteCostBudgetRegEntriesFrom(TotalNoOfBudgetRegEntries - NoOfBudgetRegEntriesToDelete + 1);

      // Verify:
      Assert.AreEqual(
        TotalNoOfBudgetRegEntries - NoOfBudgetRegEntriesToDelete,CostBudgetRegister.COUNT,IncorrectBudgetRegEntriesCount);

      // Verify Last Alloc Doc No. field from Cost Accounting Setup

      CostBudgetRegister.SETRANGE(Source,CostBudgetRegister.Source::Allocation);
      CostBudgetRegister.FINDLAST;
      CostBudgetEntry.GET(CostBudgetRegister."To Cost Budget Entry No.");
      VerifyLastAllocationDocNo(CostBudgetEntry."Document No.");
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteCostBudgetEntriesCanceled)]
    PROCEDURE DeleteCostBudgetEntriesCanceled@24();
    VAR
      CostBudgetEntry@1000 : Record 1109;
      CostBudgetEntryCount@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CostBudgetEntryCount := CostBudgetEntry.COUNT;

      // Exercise
      REPORT.RUN(REPORT::"Delete Cost Budget Entries");

      // Verify
      CLEAR(CostBudgetEntry);
      Assert.AreEqual(CostBudgetEntryCount,CostBudgetEntry.COUNT,STRSUBSTNO(IncorrectCostRegEntriesCount,CostBudgetEntryCount));
    END;

    [Test]
    PROCEDURE DeleteCostBudgetEntriesFromGreaterThanTo@35();
    VAR
      CostBudgetRegister@1001 : Record 1111;
      DeleteCostBudgetEntries@1000 : Report 1139;
    BEGIN
      Initialize;

      // Pre-Setup
      CostBudgetRegister.FINDLAST;

      // Setup
      CLEAR(DeleteCostBudgetEntries);
      DeleteCostBudgetEntries.InitializeRequest(CostBudgetRegister."No.",CostBudgetRegister."No." - 1);

      // Exercise
      DeleteCostBudgetEntries.USEREQUESTPAGE := FALSE;
      ASSERTERROR DeleteCostBudgetEntries.RUNMODAL;

      // Verify
      Assert.ExpectedError(FromRegNoHigherThanToRegNo);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteCostBudgetEntriesSetNonExistingFromValue)]
    PROCEDURE DeleteCostBudgetEntriesFromValueNotExisting@25();
    BEGIN
      // Setup
      Initialize;

      // Exercise
      REPORT.RUN(REPORT::"Delete Cost Budget Entries");

      // Verify
      Assert.ExpectedError(CostBudgetRegisterNotExisting);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteCostEntriesCanceled)]
    PROCEDURE DeleteCostEntriesCanceled@27();
    VAR
      CostEntry@1000 : Record 1104;
      CostEntryCount@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CostEntryCount := CostEntry.COUNT;

      // Exercise
      REPORT.RUN(REPORT::"Delete Cost Entries");

      // Verify
      CLEAR(CostEntry);
      Assert.AreEqual(CostEntryCount,CostEntry.COUNT,STRSUBSTNO(IncorrectCostRegEntriesCount,CostEntryCount));
    END;

    [Test]
    PROCEDURE DeleteCostEntriesFromGreaterThanTo@37();
    VAR
      CostRegister@1001 : Record 1105;
      DeleteCostEntries@1000 : Report 1130;
    BEGIN
      Initialize;

      // Pre-Setup
      CostRegister.FINDLAST;

      // Setup
      CLEAR(DeleteCostEntries);
      DeleteCostEntries.InitializeRequest(CostRegister."No.",CostRegister."No." - 1);

      // Exercise
      DeleteCostEntries.USEREQUESTPAGE := FALSE;
      ASSERTERROR DeleteCostEntries.RUNMODAL;

      // Verify
      Assert.ExpectedError(FromRegNoHigherThanToRegNo);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteCostEntriesSetNonExistingFromValue)]
    PROCEDURE DeleteCostEntriesFromValueNotExisting@23();
    BEGIN
      // Setup
      Initialize;

      // Exercise
      REPORT.RUN(REPORT::"Delete Cost Entries");

      // Verify
      Assert.ExpectedError(CostRegisterNotExisting);
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteOldCostEntries,ConfirmHandlerYes,MessageHandler)]
    PROCEDURE DeleteOldCostEntries@19();
    VAR
      CostEntry@1001 : Record 1104;
      CostJournalBatch@1003 : Record 1102;
      CostJournalLine@1002 : Record 1101;
      YearEndDate@1000 : Date;
    BEGIN
      // Setup:
      Initialize;
      YearEndDate := CALCDATE('<CY - 2Y>',WORKDATE);
      LibraryVariableStorage.Enqueue(YearEndDate);

      // Create a cost entry in the specified date
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Posting Date",YearEndDate);
      CostJournalLine.MODIFY(TRUE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Exercise:
      COMMIT;
      REPORT.RUN(REPORT::"Delete Old Cost Entries");

      // Validate
      CostEntry.SETFILTER("Posting Date",'<=%1',YearEndDate);
      Assert.IsTrue(CostEntry.ISEMPTY,STRSUBSTNO(IncorrectCostRegEntriesCount,0));
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteOldCostEntriesCanceled)]
    PROCEDURE DeleteOldCostEntriesCanceled@28();
    VAR
      CostEntry@1000 : Record 1104;
      CostEntryCount@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      CostEntryCount := CostEntry.COUNT;

      // Exercise
      REPORT.RUN(REPORT::"Delete Old Cost Entries");

      // Verify
      CLEAR(CostEntry);
      Assert.AreEqual(CostEntryCount,CostEntry.COUNT,STRSUBSTNO(IncorrectCostRegEntriesCount,CostEntryCount));
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteOldCostEntriesError)]
    PROCEDURE DeleteOldCostEntriesNotYearEnd@29();
    VAR
      YearEndingDate@1000 : Date;
    BEGIN
      Initialize;

      // Setup
      YearEndingDate := LibraryUtility.GenerateRandomDate(CALCDATE('<-CY>',WORKDATE),CALCDATE('<CY-1D>',WORKDATE));

      // Post-Setup
      LibraryVariableStorage.Enqueue(YearEndingDate);

      // Exercise
      REPORT.RUN(REPORT::"Delete Old Cost Entries");

      // Verify
      Assert.ExpectedError(STRSUBSTNO(EndingDateNotAtYearEnd,YearEndingDate));
    END;

    [Test]
    [HandlerFunctions(RPHandlerDeleteOldCostEntriesError)]
    PROCEDURE DeleteOldCostEntriesRecentDate@31();
    VAR
      OldWorkDate@1001 : Date;
      YearEndingDate@1000 : Date;
    BEGIN
      Initialize;

      // Setup
      YearEndingDate := CALCDATE('<CY>',TODAY);
      OldWorkDate := WORKDATE(CALCDATE('<1M>',YearEndingDate));

      // Post-Setup
      LibraryVariableStorage.Enqueue(YearEndingDate);

      // Exercise
      REPORT.RUN(REPORT::"Delete Old Cost Entries");

      // Verify
      Assert.ExpectedError(STRSUBSTNO(EndingDateNotOlderThanOneYar,YearEndingDate));

      // Tear-Down
      WORKDATE(OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerAllocBudgetCosts,MessageHandler)]
    PROCEDURE ReopenClosedBudgetEntry@15();
    VAR
      CostBudgetName@1000 : Record 1110;
      CostBudgetRegister@1003 : Record 1111;
      NoOfCostBudgetRegEntries@1001 : Integer;
      NoOfRegisterEntriesBefore@1004 : Integer;
      LastClosedEntryNo@1002 : Integer;
    BEGIN
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      NoOfRegisterEntriesBefore := CostBudgetRegister.COUNT;

      COMMIT;
      GlobalCostBudget := CostBudgetName.Name;
      REPORT.RUN(REPORT::"Cost Allocation");

      NoOfCostBudgetRegEntries := CostBudgetRegister.COUNT - NoOfRegisterEntriesBefore;
      LastClosedEntryNo := CloseCostBudgetRegEntries(NoOfCostBudgetRegEntries);

      // Exercise and Verify:
      CostBudgetRegister.GET(LastClosedEntryNo);
      ASSERTERROR CostBudgetRegister.VALIDATE(Closed,FALSE);
      Assert.IsTrue(STRPOS(ClosedEntryError,GETLASTERRORTEXT) > 0,STRSUBSTNO(UnexpectedErrorMessage,GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE ReopenClosedEntry@9();
    VAR
      CostRegister@1000 : Record 1105;
      NoOfCostRegisterEntries@1001 : Integer;
      LastClosedEntryNo@1002 : Integer;
    BEGIN
      Initialize;

      // Setup:
      NoOfCostRegisterEntries := 1;
      LastClosedEntryNo := CloseCostRegisterEntries(NoOfCostRegisterEntries);

      // Exercise and Verify:
      CostRegister.GET(LastClosedEntryNo);
      ASSERTERROR CostRegister.VALIDATE(Closed,FALSE);
      Assert.IsTrue(STRPOS(ClosedEntryError,GETLASTERRORTEXT) > 0,STRSUBSTNO(UnexpectedErrorMessage,GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE TransferBudgetToActual@22();
    VAR
      CostBudgetName@1000 : Record 1110;
      CostBudgetEntry@1001 : Record 1109;
      CostRegister@1002 : Record 1105;
    BEGIN
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);

      CostBudgetEntry.SETRANGE("Budget Name",CostBudgetName.Name);
      CostBudgetEntry.SETRANGE(Date,WORKDATE);

      REPORT.RUN(REPORT::"Transfer Budget to Actual",FALSE,FALSE,CostBudgetEntry);

      CostRegister.FINDLAST;
      CostRegister.TESTFIELD(Source,CostRegister.Source::"Transfer from Budget");
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      LibraryVariableStorage.Clear;

      IF isInitialized THEN
        EXIT;

      LibraryCostAccounting.InitializeCASetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AllocatedInJnlNo@10(JournalNo@1000 : Integer) : Integer;
    VAR
      CostEntry@1001 : Record 1104;
      CostRegister@1002 : Record 1105;
    BEGIN
      CostRegister.GET(JournalNo);
      CostEntry.SETRANGE("Entry No.",CostRegister."From Cost Entry No.",CostRegister."To Cost Entry No.");
      CostEntry.SETRANGE(Allocated,TRUE);
      EXIT(CostEntry.COUNT);
    END;

    LOCAL PROCEDURE AllocatedWithJnlNo@8(JournalNo@1000 : Integer) : Integer;
    VAR
      CostEntry@1001 : Record 1104;
    BEGIN
      CostEntry.SETRANGE("Allocated with Journal No.",JournalNo);
      EXIT(CostEntry.COUNT);
    END;

    LOCAL PROCEDURE CloseCostBudgetRegEntries@36(NoOfCostBudgetRegEntries@1001 : Integer) : Integer;
    VAR
      CostBudgetRegister@1000 : Record 1111;
    BEGIN
      CostBudgetRegister.SETRANGE(Closed,FALSE);
      CostBudgetRegister.NEXT(NoOfCostBudgetRegEntries);

      CostBudgetRegister.VALIDATE(Closed,TRUE);
      CostBudgetRegister.MODIFY(TRUE);

      EXIT(CostBudgetRegister."No.");
    END;

    LOCAL PROCEDURE CloseCostRegisterEntries@3(NoOfCostRegisterEntries@1000 : Integer) : Integer;
    VAR
      CostRegister@1002 : Record 1105;
      Count@1001 : Integer;
    BEGIN
      FOR Count := 1 TO NoOfCostRegisterEntries DO
        CreateCostRegisterEntry;

      CostRegister.SETRANGE(Closed,FALSE);
      CostRegister.NEXT(NoOfCostRegisterEntries);

      CostRegister.VALIDATE(Closed,TRUE);
      CostRegister.MODIFY(TRUE);

      EXIT(CostRegister."No.");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@17(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    LOCAL PROCEDURE CreateCostRegisterEntry@6();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
    END;

    LOCAL PROCEDURE FindCostJnlBatchAndTemplate@5(VAR CostJournalBatch@1000 : Record 1102);
    VAR
      CostJournalTemplate@1001 : Record 1100;
    BEGIN
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.FindCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      LibraryCostAccounting.ClearCostJournalLines(CostJournalBatch);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@51(Message@1000 : Text[1024]);
    BEGIN
      // Dummy message handler
    END;

    LOCAL PROCEDURE TotalAllocatedCostEntries@11() : Integer;
    VAR
      CostEntry@1000 : Record 1104;
    BEGIN
      CostEntry.SETRANGE(Allocated,TRUE);
      EXIT(CostEntry.COUNT);
    END;

    LOCAL PROCEDURE VerifyClosedBudgetEntries@21(UpToEntry@1001 : Integer);
    VAR
      CostBudgetRegister@1000 : Record 1111;
    BEGIN
      CostBudgetRegister.FINDSET;
      REPEAT
        CostBudgetRegister.TESTFIELD(Closed,TRUE);
        UpToEntry := UpToEntry - 1;
        CostBudgetRegister.NEXT;
      UNTIL UpToEntry = 0;
    END;

    LOCAL PROCEDURE VerifyClosedEntries@7(UpToEntry@1000 : Integer);
    VAR
      CostRegister@1001 : Record 1105;
    BEGIN
      CostRegister.FINDSET;
      REPEAT
        CostRegister.TESTFIELD(Closed,TRUE);
        UpToEntry := UpToEntry - 1;
        CostRegister.NEXT;
      UNTIL UpToEntry = 0;
    END;

    LOCAL PROCEDURE VerifyLastAllocationDocNo@13(ExpectedLastAllocDocNo@1001 : Code[20]);
    VAR
      CostAccountingSetup@1002 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      Assert.IsTrue(
        CostAccountingSetup."Last Allocation Doc. No." = ExpectedLastAllocDocNo,
        STRSUBSTNO(ExpectedValueIsDifferentError,CostAccountingSetup.FIELDNAME("Last Allocation Doc. No.")));
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerAllocBudgetCosts@38(VAR AllocCostsReqPage@1000 : TestRequestPage 1131);
    BEGIN
      LibraryCostAccounting.AllocateCostsFromTo(AllocCostsReqPage,1,99,WORKDATE,'',GlobalCostBudget);
      AllocCostsReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerAllocCosts@34(VAR AllocCostsReqPage@1000 : TestRequestPage 1131);
    BEGIN
      LibraryCostAccounting.AllocateCostsFromTo(AllocCostsReqPage,1,99,WORKDATE,'','');
      AllocCostsReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteCostBudgetEntriesCanceled@42(VAR DeleteCostBudgetEntries@1000 : TestRequestPage 1139);
    BEGIN
      DeleteCostBudgetEntries.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteCostBudgetEntriesSetNonExistingFromValue@32(VAR DeleteCostBudgetEntries@1000 : TestRequestPage 1139);
    BEGIN
      ASSERTERROR DeleteCostBudgetEntries.FromRegisterNo.SETVALUE(DeleteCostBudgetEntries.ToRegisterNo.ASINTEGER + 1);
      DeleteCostBudgetEntries.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteCostEntriesCanceled@30(VAR DeleteCostEntries@1000 : TestRequestPage 1130);
    BEGIN
      DeleteCostEntries.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteCostEntriesSetNonExistingFromValue@26(VAR DeleteCostEntries@1000 : TestRequestPage 1130);
    BEGIN
      ASSERTERROR DeleteCostEntries.FromRegisterNo.SETVALUE(DeleteCostEntries.ToRegisterNo.ASINTEGER + 1);
      DeleteCostEntries.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteOldCostEntries@20(VAR DeleteOldCostEntriesRP@1000 : TestRequestPage 1141);
    VAR
      YearEndDate@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(YearEndDate);
      DeleteOldCostEntriesRP.YearEndingDate.SETVALUE(YearEndDate);
      DeleteOldCostEntriesRP.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteOldCostEntriesCanceled@33(VAR DeleteOldCostEntries@1000 : TestRequestPage 1141);
    BEGIN
      DeleteOldCostEntries.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerDeleteOldCostEntriesError@43(VAR DeleteOldCostEntriesRP@1000 : TestRequestPage 1141);
    VAR
      YearEndDate@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(YearEndDate);
      ASSERTERROR DeleteOldCostEntriesRP.YearEndingDate.SETVALUE(YearEndDate);
      DeleteOldCostEntriesRP.Cancel.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting]
    }
    END.
  }
}

