OBJECT Codeunit 134334 ERM Vendor Statistics
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibraryPurchase@1000 : Codeunit 130512;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1002 : Boolean;
      OverDueBalanceErr@1003 : TextConst 'ENU=Vendor OverDue Balance is not correct';

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE VendorStatistics@1();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      BalanceLCY@1008 : Decimal;
      OutstandingOrdersLCY@1007 : Decimal;
      AmtRcdNotInvoicedLCY@1004 : Decimal;
      TotalAmountLCY@1001 : Decimal;
      BalanceDueLCY@1000 : Decimal;
    BEGIN
      // [SCENARIO] Create Purchase Order and Verify Vendor Statistics before Release and Post.
      Initialize;

      // [WHEN] Create Purchase Header and Line.
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine);
      BalanceLCY := 0;  // Value is important here.
      OutstandingOrdersLCY := PurchaseLine."Outstanding Amount (LCY)";
      AmtRcdNotInvoicedLCY := 0;
      TotalAmountLCY := PurchaseLine."Outstanding Amount (LCY)";
      BalanceDueLCY := 0;

      // [THEN] Check Balance (LCY), Outstanding Orders (LCY), TotalAmountLCY, BalanceLCY, BalanceDueLCY on Vendor Statistics page.
      VerifyVendorStatistics(
        PurchaseHeader."Buy-from Vendor No.",BalanceLCY,OutstandingOrdersLCY,AmtRcdNotInvoicedLCY,TotalAmountLCY,BalanceDueLCY);
    END;

    [Test]
    PROCEDURE VendorStatisticsAfterRelease@26();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      BalanceLCY@1009 : Decimal;
      OutstandingOrdersLCY@1008 : Decimal;
      AmtRcdNotInvoicedLCY@1004 : Decimal;
      TotalAmountLCY@1001 : Decimal;
      BalanceDueLCY@1000 : Decimal;
    BEGIN
      // [SCENARIO] Create Purchase Order and Verify Vendor Statistics after Release.
      Initialize;

      // [GIVEN] Create Purchase Header and Line.
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine);

      // [WHEN] Release Purchase Order.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      BalanceLCY := 0;   // Value is important here.
      OutstandingOrdersLCY := PurchaseLine."Outstanding Amount (LCY)";
      AmtRcdNotInvoicedLCY := 0;
      TotalAmountLCY := PurchaseLine."Outstanding Amount (LCY)";
      BalanceDueLCY := 0;

      // [THEN] Check Balance (LCY), Outstanding Orders (LCY), TotalAmountLCY, BalanceLCY, BalanceDueLCY on Vendor Statistics page.
      VerifyVendorStatistics(
        PurchaseHeader."Buy-from Vendor No.",BalanceLCY,OutstandingOrdersLCY,AmtRcdNotInvoicedLCY,TotalAmountLCY,BalanceDueLCY);
    END;

    [Test]
    PROCEDURE VendorStatisticsAfterReceive@38();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      BalanceLCY@1009 : Decimal;
      OutstandingOrdersLCY@1008 : Decimal;
      AmtRcdNotInvoicedLCY@1004 : Decimal;
      TotalAmountLCY@1001 : Decimal;
      BalanceDueLCY@1000 : Decimal;
    BEGIN
      // [SCENARIO] Create Purchase Order and Verify Vendor Statistics after only Receive.
      Initialize;

      // [GIVEN] Create Purchase Header and Line.
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine);

      // [GIVEN] Release Purchase Order.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // [WHEN] Receive Purchase Order as Receive.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      BalanceLCY := 0;   // Value is important here.
      OutstandingOrdersLCY := 0;
      AmtRcdNotInvoicedLCY := PurchaseLine."Outstanding Amount (LCY)";
      TotalAmountLCY := PurchaseLine."Outstanding Amount (LCY)";
      BalanceDueLCY := 0;

      // [THEN] Check Balance (LCY), Outstanding Orders (LCY), TotalAmountLCY, BalanceLCY, BalanceDueLCY on Vendor Statistics page.
      VerifyVendorStatistics(
        PurchaseHeader."Buy-from Vendor No.",BalanceLCY,OutstandingOrdersLCY,AmtRcdNotInvoicedLCY,TotalAmountLCY,BalanceDueLCY);
    END;

    [Test]
    PROCEDURE VendorStatisticsAfterPost@46();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      BalanceLCY@1007 : Decimal;
      OutstandingOrdersLCY@1009 : Decimal;
      AmtRcdNotInvoicedLCY@1010 : Decimal;
      TotalAmountLCY@1002 : Decimal;
      BalanceDueLCY@1001 : Decimal;
      OldWorkDate@1000 : Date;
    BEGIN
      // [SCENARIO] Create Purchase Order and Verify Vendor Statistics after Post.
      Initialize;

      // [GIVEN] Create Purchase Header and Line.
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine);

      // [GIVEN] Release Purchase Order.
      OldWorkDate := WORKDATE;  // Need to preserve Old WorkDate.
      WORKDATE := CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)),WORKDATE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      BalanceLCY := PurchaseLine."Outstanding Amount (LCY)";
      OutstandingOrdersLCY := 0;   // Value is important here.
      AmtRcdNotInvoicedLCY := 0;
      TotalAmountLCY := PurchaseLine."Outstanding Amount (LCY)";
      BalanceDueLCY := PurchaseLine."Outstanding Amount (LCY)";

      // [WHEN] Post Purchase Order as Receive and Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Check Balance (LCY), Outstanding Orders (LCY), TotalAmountLCY, BalanceLCY, BalanceDueLCY on Vendor Statistics page.
      VerifyVendorStatistics(
        PurchaseHeader."Buy-from Vendor No.",BalanceLCY,OutstandingOrdersLCY,AmtRcdNotInvoicedLCY,TotalAmountLCY,BalanceDueLCY);

      // Tear Down: Restore Old WorkDate.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    PROCEDURE CheckFilterOnVendStatsByCurrLinesFromVendList@3();
    VAR
      Currency@1002 : Record 4;
      Vendor@1000 : Record 23;
      VendStatsByCurrLines@1004 : TestPage 487;
      BalanceLCY@1001 : Decimal;
      BalanceFCY@1005 : Decimal;
    BEGIN
      // [SCENARIO] Test that while opening the page VendStatsByCurrLines from the Vendor list, proper filter can be applied on that page.
      Initialize;

      // [GIVEN] Create Vendor and Purchase Document with or without currency and post it.
      LibraryPurchase.CreateVendor(Vendor);
      BalanceLCY := CreateAndPostPurchaseDocument(Vendor."No.",'');
      FindCurrency(Currency);
      BalanceFCY := CreateAndPostPurchaseDocument(Vendor."No.",Currency.Code);

      // [WHEN] Invoke page VendStatsByCurrLines from Vendor list page.
      InvokeVendStatsByCurrLinesFromVendorList(VendStatsByCurrLines,Vendor."No.");

      // [THEN] Verfiy that proper filter can be applied on the page VendStatsByCurrLines and also verified the field Vendor Balance.
      VerifyFiltersOnVendStatsByCurrLinesPage(VendStatsByCurrLines,'',BalanceLCY);
      VerifyFiltersOnVendStatsByCurrLinesPage(VendStatsByCurrLines,Currency.Code,BalanceFCY);
    END;

    [Test]
    PROCEDURE CheckFilterOnVendStatsByCurrLinesFromVendCard@17();
    VAR
      Vendor@1000 : Record 23;
      Currency@1005 : Record 4;
      VendStatsByCurrLines@1004 : TestPage 487;
      BalanceLCY@1001 : Decimal;
      BalanceFCY@1002 : Decimal;
    BEGIN
      // [SCENARIO] Test that while opening the page VendStatsByCurrLines from the Vendor card, proper filter can be applied on that page.
      Initialize;

      // [GIVEN] Create Vendor and Purchase Document with or without currency and post it.
      LibraryPurchase.CreateVendor(Vendor);
      BalanceLCY := CreateAndPostPurchaseDocument(Vendor."No.",'');
      FindCurrency(Currency);
      BalanceFCY := CreateAndPostPurchaseDocument(Vendor."No.",Currency.Code);

      // [WHEN] Invoke page VendStatsByCurrLines from Vendor card page.
      InvokeVendStatsByCurrLinesFromVendorCard(VendStatsByCurrLines,Vendor."No.");

      // [THEN] Verfiy that proper filter can be applied on the page VendStatsByCurrLines and also verified the field Vendor Balance.
      VerifyFiltersOnVendStatsByCurrLinesPage(VendStatsByCurrLines,'',BalanceLCY);
      VerifyFiltersOnVendStatsByCurrLinesPage(VendStatsByCurrLines,Currency.Code,BalanceFCY);
    END;

    [Test]
    PROCEDURE CheckOverDueBalanceForVendor@6();
    VAR
      Vendor@1000 : Record 23;
      OldWorkDate@1008 : Date;
      InvoiceAmountLCY@1002 : Decimal;
      PaymentAmountLCY@1001 : Decimal;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 210533] Check Over Due Balance on Customer after changing Work date greater than Payment Date.
      Initialize;

      // [GIVEN] Post Sales Invoice and make partial payment.
      LibraryPurchase.CreateVendor(Vendor);
      InvoiceAmountLCY := CreateAndPostPurchaseDocument(Vendor."No.",'');
      PaymentAmountLCY := PostPartialPaymentForVendor(Vendor."No.",InvoiceAmountLCY);

      // [WHEN] Change Work date after Posting Payment.
      OldWorkDate := WORKDATE;
      WORKDATE := CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)),WORKDATE);

      // [THEN] Verifing Over Due Balance on Vendor Statistics.
      Assert.AreEqual(Vendor.CalcOverDueBalance,ROUND(InvoiceAmountLCY - PaymentAmountLCY),OverDueBalanceErr);

      // Tear Down: Restore Old WorkDate.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    PROCEDURE VendorStatisticsFactBoxWithPayToVendorNoBlank@24();
    VAR
      Vendor@1000 : Record 23;
      PurchaseHeader@1002 : Record 38;
      PurchaseOrderCard@1001 : TestPage 50;
    BEGIN
      // [SCENARIO 122259] Vendor Statistics Fact Box shows "Vendor.No." data in Purchase Order Card if Pay-to Vendor No. is blank
      Initialize;

      // [GIVEN] Vendor "X" with blank "Pay-to Vendor No."
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Pay-to Vendor No.",'');
      Vendor.MODIFY(TRUE);

      // [GIVEN] Purchase Order for Vendor "X"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");

      // [WHEN] Open Purchase Order Card
      PurchaseOrderCard.OPENVIEW;
      PurchaseOrderCard.GOTORECORD(PurchaseHeader);

      // [THEN] Vendor Statistics Fact Box is opened for "Vendor.No." = 'X'
      PurchaseOrderCard."Vendor Statistics FactBox"."No.".ASSERTEQUALS(Vendor."No.");
    END;

    [Test]
    PROCEDURE VendorStatisticsFactBoxWithPayToVendorNoNotBlank@42();
    VAR
      Vendor@1000 : Record 23;
      PurchaseHeader@1002 : Record 38;
      PurchaseOrderCard@1001 : TestPage 50;
    BEGIN
      // [SCENARIO 122259] Vendor Statistics Fact Box shows "Pay-to Vendor No." data in Purchase Order Card if Pay-to Vendor No. is not blank
      Initialize;

      // [GIVEN] Vendor "X" with "Pay-to Vendor No." = Y
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Pay-to Vendor No.",LibraryPurchase.CreateVendorNo);
      Vendor.MODIFY(TRUE);

      // [GIVEN] Purchase Order for Vendor "X"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");

      // [WHEN] Open Purchase Order Card
      PurchaseOrderCard.OPENVIEW;
      PurchaseOrderCard.GOTORECORD(PurchaseHeader);

      // [THEN] Vendor Statistics Fact Box is opened for "Pay-to Vendor No." = 'Y'
      PurchaseOrderCard."Vendor Statistics FactBox"."No.".ASSERTEQUALS(Vendor."Pay-to Vendor No.");
    END;

    [Test]
    PROCEDURE VendorStatNotEditable@31();
    VAR
      VendorStatistics@1002 : TestPage 152;
      VendorList@1001 : TestPage 27;
      VendorNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 223267] Page Vendor Statistic must be not editable
      Initialize;

      // [GIVEN] Vendor
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [WHEN] Open "Vendor Statistics"
      VendorList.OPENVIEW;
      VendorList.FILTER.SETFILTER("No.",VendorNo);
      VendorStatistics.TRAP;
      VendorList."Page Vendor Statistics".INVOKE;

      // [THEN] Page "Customer Statistics" is not editable
      Assert.IsFalse(VendorStatistics.EDITABLE,'Page "Vendor Statistics" must be not editable');
    END;

    LOCAL PROCEDURE VerifyVendorStatistics@10(VendorNo@1000 : Code[20];BalanceLCY@1004 : Decimal;OutstandingOrdersLCY@1006 : Decimal;AmtRcdNotInvoicedLCY@1007 : Decimal;TotalAmountLCY@1002 : Decimal;BalanceDueLCY@1003 : Decimal);
    VAR
      VendorStatistics@1001 : TestPage 152;
    BEGIN
      VendorStatistics.OPENVIEW;
      VendorStatistics.FILTER.SETFILTER("No.",VendorNo);
      VendorStatistics."Balance (LCY)".ASSERTEQUALS(BalanceLCY);
      VendorStatistics."Outstanding Orders (LCY)".ASSERTEQUALS(OutstandingOrdersLCY);
      VendorStatistics."Amt. Rcd. Not Invoiced (LCY)".ASSERTEQUALS(AmtRcdNotInvoicedLCY);
      VendorStatistics.Control10.ASSERTEQUALS(TotalAmountLCY);
      VendorStatistics."Balance Due (LCY)".ASSERTEQUALS(BalanceDueLCY);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@7(VAR PurchaseHeader@1001 : Record 38);
    VAR
      VendorNo@1000 : Code[20];
    BEGIN
      IF PurchaseHeader."Buy-from Vendor No." = '' THEN
        VendorNo := CreateVendorWithCurrency
      ELSE
        VendorNo := PurchaseHeader."Buy-from Vendor No.";
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@13(PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(20,1));

      // Use random value, because value is not important here.
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@5(VendorNo@1004 : Code[20];CurrencyCode@1003 : Code[10]) : Decimal;
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseHeader."Buy-from Vendor No." := VendorNo;
      CreatePurchaseHeader(PurchaseHeader);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      EXIT(PurchaseLine."Amount Including VAT");
    END;

    LOCAL PROCEDURE CreateVendorWithCurrency@4() : Code[20];
    VAR
      Currency@1002 : Record 4;
      Vendor@1000 : Record 23;
    BEGIN
      // Filter Currency to Avoid Invoice Rounding Issues
      FindCurrency(Currency);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",Currency.Code);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindCurrency@11(VAR Currency@1000 : Record 4);
    BEGIN
      Currency.SETRANGE("Invoice Rounding Precision",LibraryERM.GetAmountRoundingPrecision);
      LibraryERM.FindCurrency(Currency);
    END;

    LOCAL PROCEDURE FindDocumentNo@8(VendorNo@1001 : Code[20]) : Code[20];
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchInvHeader.FINDFIRST;
      EXIT(PurchInvHeader."No.");
    END;

    LOCAL PROCEDURE InvokeVendStatsByCurrLinesFromVendorList@18(VAR VendStatsByCurrLines@1001 : TestPage 487;VendorNo@1000 : Code[20]);
    VAR
      VendorList@1002 : TestPage 27;
    BEGIN
      VendorList.OPENVIEW;
      VendorList.FILTER.SETFILTER("No.",VendorNo);
      VendStatsByCurrLines.TRAP;
      VendorList."Page Vend. Stats. by Curr. Lines".INVOKE;
    END;

    LOCAL PROCEDURE InvokeVendStatsByCurrLinesFromVendorCard@21(VAR VendStatsByCurrLines@1001 : TestPage 487;VendorNo@1000 : Code[20]);
    VAR
      VendorCard@1002 : TestPage 26;
    BEGIN
      VendorCard.OPENVIEW;
      VendorCard.FILTER.SETFILTER("No.",VendorNo);
      VendStatsByCurrLines.TRAP;
      VendorCard."Page Vend. Stats. by Curr. Lines".INVOKE;
    END;

    LOCAL PROCEDURE PostPartialPaymentForVendor@49(VendorNo@1008 : Code[20];InvoiceAmountLCY@1002 : Decimal) : Decimal;
    VAR
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1006 : Record 81;
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,VendorNo,InvoiceAmountLCY / LibraryRandom.RandIntInRange(2,4));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",FindDocumentNo(VendorNo));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE VerifyFiltersOnVendStatsByCurrLinesPage@23(VendStatsByCurrLines@1000 : TestPage 487;CurrencyCode@1001 : Code[10];VendorBalance@1002 : Decimal);
    BEGIN
      VendStatsByCurrLines.FILTER.SETFILTER(Code,CurrencyCode);
      VendStatsByCurrLines."Vendor Balance".ASSERTEQUALS(VendorBalance);
    END;

    BEGIN
    {
      // [FEATURE] [Vendor] [Statistics] [UI]

      Test Vendor Statistics :
      1. Create Purchase Order and Verify Vendor Statistics before release and post.
      2. Create Purchase Order and Verify Vendor Statistics after release.
      3. Create Purchase Order and Verify Vendor Statistics after receive.
      4. Create Purchase Order and Verify Vendor Statistics after post.
      5. Test that while opening the page VendStatsByCurrLines from the Vendor list, proper filter can be applied on that page
      6. Test that while opening the page VendStatsByCurrLines from the Vendor card, proper filter can be applied on that page.
      7. Test that Vendor having over due balance on vendor statistics page.

      TFS_TS_ID  :: 252020

      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ----------------------------------------------------------------------------------------------------
      VendorStatistics,VendorStatisticsAfterRelease,                                  126148
      VendorStatisticsAfterReceive,VendorStatisticsAfterPost                          126148
      ----------------------------------------------------------------------------------------------------

      Covers Test Cases: Bug_ID: 313006
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                              TFS ID
      ----------------------------------------------------------------------------------------------------------
      CheckFilterOnVendStatsByCurrLinesFromVendList,CheckFilterOnVendStatsByCurrLinesFromVendCard      282962

      Covers Test Cases: Bug_ID: 48038, 94472
      ------------------------------------------------------------------------------------------------------
        Test Function Name
      ------------------------------------------------------------------------------------------------------
      CheckOverDueBalanceForVendor
    }
    END.
  }
}

