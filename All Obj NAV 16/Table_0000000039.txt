OBJECT Table 39 Purchase Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326,TFS225680;
  }
  PROPERTIES
  {
    Permissions=TableData 16531=ri;
    OnInsert=BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReservePurchLine.VerifyQuantity(Rec,xRec);

               LOCKTABLE;
               PurchHeader."No." := '';
               IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
                 UpdateDeferralAmounts;
             END;

    OnModify=VAR
               Text16322@1280000 : TextConst 'ENU=You are not allowed to make this change in a Subcontracting Order.;ENN=You are not allowed to make this change in a Subcontracting Order.';
             BEGIN
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDSET THEN
                   REPEAT
                     PurchLine2.TESTFIELD(Type,Type);
                     PurchLine2.TESTFIELD("No.","No.");
                   UNTIL PurchLine2.NEXT = 0;
               END;

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") THEN
                 ReservePurchLine.VerifyChange(Rec,xRec);

               GetPurchHeader;
               IF PurchHeader.Subcontracting AND (PurchHeader."Document Type" = PurchHeader."Document Type"::Order) THEN
                 IF xRec.Quantity <> Quantity THEN
                   ERROR(Text16322);
             END;

    OnDelete=VAR
               PurchCommentLine@1001 : Record 43;
               StrOrderLine@1280000 : Record 13795;
               DefermentBuffer@1500000 : Record 16532;
               DetailTaxEntryBuffer@1500001 : Record 16480;
               TransactionType@1500002 : 'Purchase,Sale';
             BEGIN
               TestStatusOpen;
               IF NOT StatusCheckSuspended AND (PurchHeader.Status = PurchHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)"])
               THEN
                 VALIDATE(Quantity,0);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReservePurchLine.DeleteLine(Rec);
                 IF "Receipt No." = '' THEN
                   TESTFIELD("Qty. Rcd. Not Invoiced",0);
                 IF "Return Shipment No." = '' THEN
                   TESTFIELD("Return Qty. Shipped Not Invd.",0);

                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 WhseValidateSourceLine.PurchaseLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.","Prepmt Amt Deducted");

               IF "Sales Order Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
                 SalesOrderLine."Purchase Order No." := '';
                 SalesOrderLine."Purch. Order Line No." := 0;
                 SalesOrderLine.MODIFY;
               END;

               IF "Special Order Sales Line No." <> 0 THEN BEGIN
                 LOCKTABLE;
                 SalesOrderLine.LOCKTABLE;
                 IF "Document Type" = "Document Type"::Order THEN BEGIN
                   SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.");
                   SalesOrderLine."Special Order Purchase No." := '';
                   SalesOrderLine."Special Order Purch. Line No." := 0;
                   SalesOrderLine.MODIFY;
                 END ELSE
                   IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Special Order Sales No.","Special Order Sales Line No.") THEN
                     BEGIN
                     SalesOrderLine."Special Order Purchase No." := '';
                     SalesOrderLine."Special Order Purch. Line No." := 0;
                     SalesOrderLine.MODIFY;
                   END;
               END;

               NonstockItemMgt.DelNonStockPurch(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 PurchLine2.SETRANGE("Blanket Order No.","Document No.");
                 PurchLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF PurchLine2.FINDFIRST THEN
                   PurchLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               IF "Line No." <> 0 THEN BEGIN
                 PurchLine2.RESET;
                 PurchLine2.SETRANGE("Document Type","Document Type");
                 PurchLine2.SETRANGE("Document No.","Document No.");
                 PurchLine2.SETRANGE("Attached to Line No.","Line No.");
                 PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 PurchLine2.DELETEALL(TRUE);
               END;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","Document No.");
               PurchCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT PurchCommentLine.ISEMPTY THEN
                 PurchCommentLine.DELETEALL;

               IF Subcontracting AND ("Document Type" = "Document Type"::Order) THEN BEGIN
                 TestSubcontractingEntries;
                 DeleteSubconDetails;
                 UpdateProdOrder;
               END;
               GetPurchHeader;
               StrOrderLine.SETRANGE(Type,StrOrderLine.Type::Purchase);
               StrOrderLine.SETRANGE("Document Type","Document Type");
               StrOrderLine.SETRANGE("Structure Code",PurchHeader.Structure);
               StrOrderLine.SETRANGE("Document No.","No.");
               StrOrderLine.SETRANGE("Line No.","Line No.");
               StrOrderLine.DELETEALL;

               DefermentBuffer.RESET;
               DefermentBuffer.SETRANGE("Document No.","Document No.");
               DefermentBuffer.SETRANGE("Line No.","Line No.");
               DefermentBuffer.DELETEALL;

               DetailTaxEntryBuffer.RESET;
               DetailTaxEntryBuffer.SETRANGE("Document No.","Document No.");
               DetailTaxEntryBuffer.SETRANGE("Line No.","Line No.");
               DetailTaxEntryBuffer.SETRANGE("Transaction Type",DetailTaxEntryBuffer."Transaction Type"::Purchase);
               DetailTaxEntryBuffer.DELETEALL;

               IF ("Line No." <> 0) AND ("Attached to Line No." = 0) THEN BEGIN
                 PurchLine2.COPY(Rec);
                 IF PurchLine2.FIND('<>') THEN BEGIN
                   PurchLine2.VALIDATE("Recalculate Invoice Disc.",TRUE);
                   PurchLine2.MODIFY;
                 END;
               END;

               IF "Deferral Code" <> '' THEN
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetPurchDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");

               GSTManagement.DeleteGSTBuffer(TransactionType::Purchase,"Document Type","Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Line;
               ENN=Purchase Line];
    LookupPageID=Page518;
    DrillDownPageID=Page518;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENN=Buy-from Vendor No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                TestStatusOpen;

                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),"Special Order Sales No.");
                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF xRec.Type IN [Type::Item,Type::"Fixed Asset"] THEN BEGIN
                                                                    IF Quantity <> 0 THEN
                                                                      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec.Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF xRec."Deferral Code" <> '' THEN
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetPurchDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,PurchHeader."Posting Date",'',xRec."Currency Code",TRUE);
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;

                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;

                                                                Type := TempPurchLine.Type;
                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                VALIDATE("FA Posting Type");

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No)) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                               Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Type=CONST(G/L Account),
                                                                                                                                        System-Created Entry=CONST(Yes)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Item)) Item
                                                                                                                                        ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                PrepmtMgt@1002 : Codeunit 441;
                                                                GSTGroup@1500000 : Record 16404;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TestReturnFieldsZero;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("No."),"Sales Order No.");

                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("No."),"Special Order Sales No.");

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text044,
                                                                    FIELDCAPTION(Type),FIELDCAPTION("Prod. Order No."),"Prod. Order No.");

                                                                "CWIP G/L Type" := "CWIP G/L Type"::" ";
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                    ReservePurchLine.VerifyChange(Rec,xRec);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    IF Type = Type::Item THEN
                                                                      WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                  IF Type = Type::Item THEN
                                                                    DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                TempPurchLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;
                                                                Type := TempPurchLine.Type;
                                                                "No." := TempPurchLine."No.";
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN BEGIN
                                                                  Quantity := TempPurchLine.Quantity;
                                                                  "Outstanding Qty. (Base)" := TempPurchLine."Outstanding Qty. (Base)";
                                                                END;

                                                                "System-Created Entry" := TempPurchLine."System-Created Entry";
                                                                GetPurchHeader;
                                                                PurchHeader.TESTFIELD("Buy-from Vendor No.");

                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                                                                "Currency Code" := PurchHeader."Currency Code";
                                                                "Expected Receipt Date" := PurchHeader."Expected Receipt Date";
                                                                "Shortcut Dimension 1 Code" := PurchHeader."Shortcut Dimension 1 Code";
                                                                "Shortcut Dimension 2 Code" := PurchHeader."Shortcut Dimension 2 Code";
                                                                IF NOT IsServiceItem THEN
                                                                  "Location Code" := PurchHeader."Location Code";
                                                                "Service Tax Registration No." := ServiceTaxMgt.GetServiceTaxRegNoForLocation("Location Code");
                                                                "Transaction Type" := PurchHeader."Transaction Type";
                                                                "Transport Method" := PurchHeader."Transport Method";
                                                                "Pay-to Vendor No." := PurchHeader."Pay-to Vendor No.";
                                                                "Gen. Bus. Posting Group" := PurchHeader."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := PurchHeader."VAT Bus. Posting Group";
                                                                "Entry Point" := PurchHeader."Entry Point";
                                                                Area := PurchHeader.Area;
                                                                "Transaction Specification" := PurchHeader."Transaction Specification";
                                                                "Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Tax Liable" := PurchHeader."Tax Liable";
                                                                IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
                                                                  "Prepayment %" := PurchHeader."Prepayment %";
                                                                "Prepayment Tax Area Code" := PurchHeader."Tax Area Code";
                                                                "Prepayment Tax Liable" := PurchHeader."Tax Liable";
                                                                "Responsibility Center" := PurchHeader."Responsibility Center";
                                                                "Form Code" := PurchHeader."Form Code";
                                                                "Form No." := PurchHeader."Form No.";
                                                                "State Code" := PurchHeader.State;
                                                                IF PurchHeader."Invoice Type" = PurchHeader."Invoice Type"::Supplementary THEN
                                                                  Supplementary := TRUE;
                                                                "Excise Bus. Posting Group" := PurchHeader."Excise Bus. Posting Group";
                                                                "Assessee Code" := PurchHeader."Assessee Code";

                                                                "Requested Receipt Date" := PurchHeader."Requested Receipt Date";
                                                                "Promised Receipt Date" := PurchHeader."Promised Receipt Date";
                                                                "Inbound Whse. Handling Time" := PurchHeader."Inbound Whse. Handling Time";
                                                                "Order Date" := PurchHeader."Order Date";
                                                                IF PurchHeader."GST Vendor Type" = PurchHeader."GST Vendor Type"::Exempted THEN
                                                                  Exempted := TRUE;
                                                                UpdateLeadTimeFields;
                                                                UpdateDates;

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Service Tax Group" := GLAcc."Service Tax Group Code";
                                                                      IF PurchHeader."Location Code" <> '' THEN BEGIN
                                                                        GetLocation(PurchHeader."Location Code");
                                                                        "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                      END ELSE BEGIN
                                                                        GetCompanyInfo;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                      END;
                                                                      "Excise Prod. Posting Group" := GLAcc."Excise Prod. Posting Group";
                                                                      "Capital Item" := GLAcc."Capital Item";
                                                                      InitDeferralCode;
                                                                      IF GSTGroup.GET(GLAcc."GST Group Code") THEN;
                                                                      UpdatePurchLineForGST(
                                                                        GLAcc."GST Credit",GLAcc."GST Group Code",GSTGroup."GST Group Type",GLAcc."HSN/SAC Code",GLAcc.Exempted);
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetGLSetup;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Posting Group" := Item."Inventory Posting Group";
                                                                      END;
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      "Unit Price (LCY)" := Item."Unit Price";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Indirect Cost %" := Item."Indirect Cost %";
                                                                      "Overhead Rate" := Item."Overhead Rate";
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepmtMgt.SetPurchPrepaymentPct(Rec,PurchHeader."Posting Date");
                                                                      "Excise Prod. Posting Group" := Item."Excise Prod. Posting Group";
                                                                      "Excise Accounting Type" := Item."Excise Accounting Type";
                                                                      "Assessable Value" := Item."Assessable Value";
                                                                      "Capital Item" := Item."Capital Item";

                                                                      IF Item."Price Includes VAT" THEN BEGIN
                                                                        IF NOT VATPostingSetup.GET(
                                                                             Item."VAT Bus. Posting Gr. (Price)",Item."VAT Prod. Posting Group")
                                                                        THEN
                                                                          VATPostingSetup.INIT;
                                                                        CASE VATPostingSetup."VAT Calculation Type" OF
                                                                          VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT":
                                                                            VATPostingSetup."VAT %" := 0;
                                                                          VATPostingSetup."VAT Calculation Type"::"Sales Tax":
                                                                            ERROR(
                                                                              Text002,
                                                                              VATPostingSetup.FIELDCAPTION("VAT Calculation Type"),
                                                                              VATPostingSetup."VAT Calculation Type");
                                                                        END;
                                                                        "Unit Price (LCY)" :=
                                                                          ROUND("Unit Price (LCY)" / (1 + VATPostingSetup."VAT %" / 100),
                                                                            GLSetup."Unit-Amount Rounding Precision");
                                                                      END;

                                                                      IF PurchHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      "Unit of Measure Code" := Item."Purch. Unit of Measure";
                                                                      InitDeferralCode;
                                                                      IF GSTGroup.GET(Item."GST Group Code") THEN;
                                                                      IF NOT PurchHeader.Subcontracting THEN
                                                                        UpdatePurchLineForGST(
                                                                          Item."GST Credit",Item."GST Group Code",GSTGroup."GST Group Type",Item."HSN/SAC Code",Item.Exempted);
                                                                    END;
                                                                  Type::"3":
                                                                    ERROR(Text003);
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      FA.TESTFIELD("Gen. Prod. Posting Group");
                                                                      GSTGroup.GET(FA."GST Group Code");
                                                                      UpdatePurchLineForGST(FA."GST Credit",FA."GST Group Code",GSTGroup."GST Group Type",FA."HSN/SAC Code",FA.Exempted);
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Gen. Prod. Posting Group" := FA."Gen. Prod. Posting Group";
                                                                      "Excise Accounting Type" := FA."Excise Accounting Type";
                                                                      "Excise Prod. Posting Group" := FA."Excise Prod. Posting Group";
                                                                      "Tax Group Code" := FA."Tax Group Code";
                                                                      "VAT Prod. Posting Group" := FA."VAT Product Posting Group";

                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Indirect Cost %" := 0;
                                                                      "Overhead Rate" := 0;
                                                                      "Excise Prod. Posting Group" := ItemCharge."Excise Prod. Posting Group";
                                                                      "Capital Item" := ItemCharge."Capital Item";
                                                                      "Item Charge Entry" := TRUE;
                                                                      IF GSTGroup.GET(ItemCharge."GST Group Code") THEN;
                                                                      UpdatePurchLineForGST(
                                                                        ItemCharge."GST Credit",ItemCharge."GST Group Code",GSTGroup."GST Group Type",ItemCharge."HSN/SAC Code",
                                                                        ItemCharge.Exempted);
                                                                    END;
                                                                END;

                                                                IF NOT (Type IN [Type::" ",Type::"Fixed Asset"]) THEN
                                                                  VALIDATE("VAT Prod. Posting Group");

                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  Quantity := xRec.Quantity;
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToShip
                                                                    ELSE
                                                                      InitQtyToReceive;
                                                                  END;
                                                                  UpdateWithWarehouseReceive;
                                                                  UpdateDirectUnitCost(FIELDNO("No."));
                                                                  IF xRec."Job No." <> '' THEN
                                                                    VALIDATE("Job No.",xRec."Job No.");
                                                                  "Job Line Type" := xRec."Job Line Type";
                                                                  IF xRec."Job Task No." <> '' THEN BEGIN
                                                                    VALIDATE("Job Task No.",xRec."Job Task No.");
                                                                    IF "No." = xRec."No." THEN
                                                                      VALIDATE("Job Planning Line No.",xRec."Job Planning Line No.");
                                                                  END;
                                                                END;

                                                                IF NOT ISTEMPORARY THEN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Work Center","Work Center No.");

                                                                PurchHeader.GET("Document Type","Document No.");
                                                                UpdateItemReference;

                                                                GetDefaultBin;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                                IF Type = Type::Item THEN BEGIN
                                                                  ExcisePostingSetup.RESET;
                                                                  ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
                                                                  ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
                                                                  ExcisePostingSetup.SETRANGE("From Date",0D,PurchHeader."Posting Date");
                                                                  IF ExcisePostingSetup.FINDLAST THEN BEGIN
                                                                    "CTSH No." := ExcisePostingSetup."CTSH No.";
                                                                    "Notification No." := ExcisePostingSetup."Notification No.";
                                                                    "Notification Sl. No." := ExcisePostingSetup."Notification Sl. No.";
                                                                  END;
                                                                END;
                                                                "Assessable Value" := Item."Assessable Value" * "Qty. per Unit of Measure" ;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Subcontracting Location=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckHeaderLocation;
                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF "Prepmt. Amt. Inv." <> 0 THEN
                                                                    IF NOT CONFIRM(Text046,FALSE,FIELDCAPTION("Direct Unit Cost"),FIELDCAPTION("Location Code")) THEN BEGIN
                                                                      "Location Code" := xRec."Location Code";
                                                                      EXIT;
                                                                    END;
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Sales Order No.");
                                                                IF "Special Order" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Location Code"),"Special Order Sales No.");

                                                                IF "Location Code" <> xRec."Location Code" THEN
                                                                  InitItemAppl;

                                                                IF (xRec."Location Code" <> "Location Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  UpdateWithWarehouseReceive;
                                                                END;
                                                                "Bin Code" := '';

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Location Code"));

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE
                                                                  IF Location.GET("Location Code") THEN
                                                                    "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";

                                                                "Service Tax Registration No." := ServiceTaxMgt.GetServiceTaxRegNoForLocation("Location Code");
                                                                UpdateLeadTimeFields;
                                                                UpdateDates;
                                                                TaxAreaUpdate;

                                                                GetDefaultBin;
                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);

                                                                IF "Expected Receipt Date" <> 0D THEN
                                                                  VALIDATE(
                                                                    "Planned Receipt Date",
                                                                    CalendarMgmt.CalcDateBOC2(InternalLeadTimeDays("Expected Receipt Date"),"Expected Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',FALSE))
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Expected Receipt Date");
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ENN=Expected Receipt Date] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Drop Shipment" AND ("Document Type" <> "Document Type"::Invoice) THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Quantity),"Sales Order No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Shipped")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Shipped (Base)")) AND ("Return Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Return Qty. Shipped (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Received")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Quantity Received")));
                                                                  IF ("Quantity (Base)" * "Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Received (Base)")) AND ("Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text004,FIELDCAPTION("Qty. Received (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text011,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text004,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                IF "Receipt No." <> '' THEN
                                                                  CheckReceiptRelation
                                                                ELSE
                                                                  IF "Return Shipment No." <> '' THEN
                                                                    CheckRetShptRelation;

                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") OR
                                                                   ("No." = xRec."No.")
                                                                THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToShip
                                                                  ELSE
                                                                    InitQtyToReceive;
                                                                END;
                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl;

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO(Quantity))
                                                                ELSE
                                                                  VALIDATE("Line Discount %");

                                                                UpdateWithWarehouseReceive;
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  ReservePurchLine.VerifyQuantity(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  CheckApplToItemLedgEntry;
                                                                END;

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;
                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND (("Amount To Vendor" <> 0) OR IsServiceTaxExist(Rec)) THEN BEGIN
                                                                  ClearServiceTaxAmounts;
                                                                  "Amount To Vendor" := 0;
                                                                  "Service Tax Base" := 0;
                                                                END;
                                                                SetDefaultQuantity;

                                                                UpdatePrePaymentAmounts;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;

                                                                TaxAreaUpdate;

                                                                CheckWMS;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENN=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice)) THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoice);
                                                                IF NOT Subcontracting THEN
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase)) THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ENN=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Receive" AND
                                                                     ("Qty. to Receive" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Receive" = Quantity - "Quantity Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF NOT Subcontracting THEN BEGIN
                                                                IF ((("Qty. to Receive" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Receive" <> 0)) OR
                                                                   (ABS("Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (((Quantity < 0 ) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Quantity");
                                                                  IF ((("Qty. to Receive (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Qty. to Receive (Base)" <> 0) AND ("Quantity (Base)" <> 0)) OR
                                                                   (ABS("Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text009,
                                                                    "Outstanding Qty. (Base)");
                                                                END ELSE
                                                                  ValidateQuantity;
                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Receive" < 0) THEN
                                                                  CheckApplToItemLedgEntry;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ENN=Qty. to Receive];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Direct Unit Cost;
                                                              ENN=Direct Unit Cost];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Direct Unit Cost")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("No.");
                                                                TESTFIELD(Quantity);

                                                                IF "Prod. Order No." <> '' THEN
                                                                  ERROR(
                                                                    Text99000000,
                                                                    FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF CurrFieldNo = FIELDNO("Unit Cost (LCY)") THEN
                                                                  IF Type = Type::Item THEN BEGIN
                                                                    GetItem;
                                                                    IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                      ERROR(
                                                                        Text010,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                  END;

                                                                UnitCostCurrency := "Unit Cost (LCY)";
                                                                GetPurchHeader;
                                                                IF PurchHeader."Currency Code" <> '' THEN BEGIN
                                                                  PurchHeader.TESTFIELD("Currency Factor");
                                                                  GetGLSetup;
                                                                  UnitCostCurrency :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,"Currency Code",
                                                                        "Unit Cost (LCY)",PurchHeader."Currency Factor"),
                                                                      GLSetup."Unit-Amount Rounding Precision");
                                                                END;

                                                                IF ("Direct Unit Cost" <> 0) AND
                                                                   ("Direct Unit Cost" <> ("Line Discount Amount" / Quantity))
                                                                THEN
                                                                  "Indirect Cost %" :=
                                                                    ROUND(
                                                                      (UnitCostCurrency - "Direct Unit Cost" + "Line Discount Amount" / Quantity) /
                                                                      ("Direct Unit Cost" - "Line Discount Amount" / Quantity) * 100,0.00001)
                                                                ELSE
                                                                  "Indirect Cost %" := 0;

                                                                UpdateSalesCost;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
                                                                  UpdateJobPrices;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetPurchHeader;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,
                                                                    Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                                CheckExciseRegister;
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                  IF ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") <> 0 THEN
                                                                    "Line Discount %" :=
                                                                      ROUND(
                                                                        "Line Discount Amount" /
                                                                        ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") * 100,
                                                                        0.00001)
                                                                  ELSE
                                                                    "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                                GetPurchHeader;
                                                                CheckExciseRegister;
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text011,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := Amount;
                                                                      IF "Use Tax" THEN
                                                                        "Amount Including VAT" := "VAT Base Amount"
                                                                      ELSE BEGIN
                                                                        "Amount Including VAT" :=
                                                                          Amount +
                                                                          ROUND(
                                                                            SalesTaxCalculate.CalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "VAT Base Amount","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      PurchHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      IF "Use Tax" THEN BEGIN
                                                                        Amount := "Amount Including VAT";
                                                                        "VAT Base Amount" := Amount;
                                                                      END ELSE BEGIN
                                                                        Amount :=
                                                                          ROUND(
                                                                            SalesTaxCalculate.ReverseCalculateTax(
                                                                              "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                                                                              "Amount Including VAT","Quantity (Base)",PurchHeader."Currency Factor"),
                                                                            Currency."Amount Rounding Precision");
                                                                        "VAT Base Amount" := Amount;
                                                                        IF "VAT Base Amount" <> 0 THEN
                                                                          "VAT %" :=
                                                                            ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                        ELSE
                                                                          "VAT %" := 0;
                                                                      END;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=[ENU=Unit Price (LCY);
                                                              ENN=Unit Price (LCY)];
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                  UpdateUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN
                                                                  "Location Code" := CheckApplToItemLedgEntry;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry;
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=VAR
                                                                Job@1000 : Record 167;
                                                              BEGIN
                                                                TESTFIELD("Drop Shipment",FALSE);
                                                                TESTFIELD("Special Order",FALSE);
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF ReservEntryExist THEN
                                                                  TESTFIELD("Job No.",'');

                                                                IF "Job No." <> xRec."Job No." THEN BEGIN
                                                                  VALIDATE("Job Task No.",'');
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                END;

                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  "CWIP G/L Type" := "CWIP G/L Type"::" ";
                                                                  EXIT;
                                                                END;

                                                                IF NOT (Type IN [Type::Item,Type::"G/L Account"]) THEN
                                                                  FIELDERROR("Job No.",STRSUBSTNO(Text012,FIELDCAPTION(Type),Type));
                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";
                                                                IF Job."Job Type" <> Job."Job Type"::"Capital WIP" THEN
                                                                  "CWIP G/L Type" := "CWIP G/L Type"::" "
                                                                ELSE BEGIN
                                                                  IF Type = Type::Item THEN
                                                                    "CWIP G/L Type" := "CWIP G/L Type"::Material;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                                TestStatusOpen;

                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Indirect Cost %",0);

                                                                IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
                                                                  GetItem;
                                                                  IF Item."Costing Method" = Item."Costing Method"::Standard THEN
                                                                    ERROR(
                                                                      Text010,
                                                                      FIELDCAPTION("Indirect Cost %"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                END;

                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Indirect Cost %;
                                                              ENN=Indirect Cost %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENN=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");

                                                                "Outstanding Amt. Ex. VAT (LCY)" :=
                                                                  ROUND("Outstanding Amount (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ENN=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;CaptionML=[ENU=Qty. Rcd. Not Invoiced;
                                                              ENN=Qty. Rcd. Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Amt. Rcd. Not Invoiced;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Amt. Rcd. Not Invoiced",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Amt. Rcd. Not Invoiced (LCY)" :=
                                                                    ROUND("Amt. Rcd. Not Invoiced",Currency2."Amount Rounding Precision");

                                                                "A. Rcd. Not Inv. Ex. VAT (LCY)" :=
                                                                  ROUND("Amt. Rcd. Not Invoiced (LCY)" / (1 + "VAT %" / 100),Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amt. Rcd. Not Invoiced;
                                                              ENN=Amt. Rcd. Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Received   ;Decimal       ;AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Quantity Received;
                                                              ENN=Quantity Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Receipt No.         ;Code20        ;CaptionML=[ENU=Receipt No.;
                                                              ENN=Receipt No.];
                                                   Editable=No }
    { 64  ;   ;Receipt Line No.    ;Integer       ;CaptionML=[ENU=Receipt Line No.;
                                                              ENN=Receipt Line No.];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ENN=Profit %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENN=Pay-to Vendor No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                                UpdateUnitCost;
                                                                CalcInvDiscToInvoice;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Vendor Item No.     ;Text20        ;OnValidate=BEGIN
                                                                IF PurchHeader."Send IC Document" AND
                                                                   ("IC Partner Ref. Type" = "IC Partner Ref. Type"::"Vendor Item No.")
                                                                THEN
                                                                  "IC Partner Reference" := "Vendor Item No.";
                                                              END;

                                                   CaptionML=[ENU=Vendor Item No.;
                                                              ENN=Vendor Item No.] }
    { 71  ;   ;Sales Order No.     ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order No." <> "Sales Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales Order No.;
                                                              ENN=Sales Order No.];
                                                   Editable=No }
    { 72  ;   ;Sales Order Line No.;Integer       ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Sales Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Sales Order Line No." <> "Sales Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sales Order Line No.;
                                                              ENN=Sales Order Line No.];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                END;
                                                                IF "Drop Shipment" THEN BEGIN
                                                                  "Bin Code" := '';
                                                                  EVALUATE("Inbound Whse. Handling Time",'<0D>');
                                                                  VALIDATE("Inbound Whse. Handling Time");
                                                                  InitOutstanding;
                                                                  InitQtyToReceive;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENN=Drop Shipment];
                                                   Editable=No }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Type] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                   Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.];
                                                   Editable=No }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Entry Point;
                                                              ENN=Entry Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=Tax Group Code] }
    { 88  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              ENN=Use Tax] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Purchase VAT Account");
                                                                    END;
                                                                END;
                                                                IF PurchHeader."Prices Including VAT" AND (Type = Type::Item) THEN
                                                                  "Direct Unit Cost" :=
                                                                    ROUND(
                                                                      "Direct Unit Cost" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ENN=Outstanding Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Amt. Rcd. Not Invoiced (LCY);Decimal;
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Amt. Rcd. Not Invoiced (LCY);
                                                              ENN=Amt. Rcd. Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(39),
                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ENN=Reserved Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Received",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                   Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  PurchLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  PurchLine2.TESTFIELD(Type,Type);
                                                                  PurchLine2.TESTFIELD("No.","No.");
                                                                  PurchLine2.TESTFIELD("Pay-to Vendor No.","Pay-to Vendor No.");
                                                                  PurchLine2.TESTFIELD("Buy-from Vendor No.","Buy-from Vendor No.");
                                                                  VALIDATE("Variant Code",PurchLine2."Variant Code");
                                                                  VALIDATE("Location Code",PurchLine2."Location Code");
                                                                  VALIDATE("Unit of Measure Code",PurchLine2."Unit of Measure Code");
                                                                  VALIDATE("Direct Unit Cost",PurchLine2."Direct Unit Cost");
                                                                  VALIDATE("Line Discount %",PurchLine2."Line Discount %");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Direct Unit Cost");

                                                                GetPurchHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ENN=Inv. Disc. Amount to Invoice];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.,Vendor Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                              ItemVendorCatalog@1003 : Record 99;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Vendor,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Vendor Item No.":
                                                                    BEGIN
                                                                      GetPurchHeader;
                                                                      ItemVendorCatalog.SETCURRENTKEY("Vendor No.");
                                                                      ItemVendorCatalog.SETRANGE("Vendor No.",PurchHeader."Buy-from Vendor No.");
                                                                      IF PAGE.RUNMODAL(PAGE::"Vendor Item Catalog",ItemVendorCatalog) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemVendorCatalog."Vendor Item No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text038,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,"Line Amount"));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Line Amount;
                                                              ENN=Prepmt. Line Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ENN=Prepmt. Amt. Inv.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ENN=Prepmt. Amt. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ENN=Prepayment Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ENN=Prepmt. VAT Base Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ENN=Prepayment VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ENN=Prepmt. VAT Calc. Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ENN=Prepayment VAT Identifier];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ENN=Prepayment Tax Area Code] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Liable;
                                                              ENN=Prepayment Tax Liable] }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ENN=Prepayment Tax Group Code] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Direct Unit Cost" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text039,"Qty. to Invoice" * "Direct Unit Cost"));
                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text038,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                                                                      (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Direct Unit Cost"));
                                                              END;

                                                   CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ENN=Prepmt Amt to Deduct];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ENN=Prepmt Amt Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENN=Prepayment Line];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ENN=Prepmt. Amount Inv. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[ENU=Prepmt. Amount Inv. (LCY);
                                                              ENN=Prepmt. Amount Inv. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetPurchHeader;
                                                                  PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
                                                                  PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=[ENU=Prepmt. VAT Amount Inv. (LCY);
                                                              ENN=Prepmt. VAT Amount Inv. (LCY)];
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[ENU=Prepayment VAT Difference;
                                                              ENN=Prepayment VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[ENU=Prepmt VAT Diff. to Deduct;
                                                              ENN=Prepmt VAT Diff. to Deduct];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[ENU=Prepmt VAT Diff. Deducted;
                                                              ENN=Prepmt VAT Diff. Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 140 ;   ;Outstanding Amt. Ex. VAT (LCY);Decimal;
                                                   CaptionML=[ENU=Outstanding Amt. Ex. VAT (LCY);
                                                              ENN=Outstanding Amt. Ex. VAT (LCY)] }
    { 141 ;   ;A. Rcd. Not Inv. Ex. VAT (LCY);Decimal;
                                                   CaptionML=[ENU=A. Rcd. Not Inv. Ex. VAT (LCY);
                                                              ENN=A. Rcd. Not Inv. Ex. VAT (LCY)] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');

                                                                IF "Job Task No." <> xRec."Job Task No." THEN BEGIN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                  IF "Document Type" = "Document Type"::Order THEN
                                                                    TESTFIELD("Quantity Received",0);
                                                                END;

                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  CLEAR(JobJnlLine);
                                                                  "Job Line Type" := "Job Line Type"::" ";
                                                                  UpdateJobPrices;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center",
                                                                    DATABASE::"Work Center","Work Center No.");
                                                                  EXIT;
                                                                END;

                                                                JobSetCurrencyFactor;
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                                UpdateDimensionsFromJobTask;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.] }
    { 1002;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text048,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Type;
                                                              ENN=Job Line Type];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ENN=" ,Schedule,Contract,Both Schedule and Contract"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1003;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Price;
                                                              ENN=Job Unit Price];
                                                   BlankZero=Yes }
    { 1004;   ;Job Total Price     ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Price;
                                                              ENN=Job Total Price];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1005;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Amount;
                                                              ENN=Job Line Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              ENN=Job Line Discount Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Discount %;
                                                              ENN=Job Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Unit Price (LCY)","Job Unit Price (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Price (LCY);
                                                              ENN=Job Unit Price (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1009;   ;Job Total Price (LCY);Decimal      ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Price (LCY);
                                                              ENN=Job Total Price (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              ENN=Job Line Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                TESTFIELD("Receipt No.",'');
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  TESTFIELD("Quantity Received",0);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(FALSE);
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              ENN=Job Line Disc. Amount (LCY)];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              ENN=Job Currency Factor];
                                                   BlankZero=Yes }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=[ENU=Job Currency Code;
                                                              ENN=Job Currency Code] }
    { 1019;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  CASE Type OF
                                                                    Type::"G/L Account":
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                    Type::Item:
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
                                                                  END;
                                                                  JobPlanningLine.TESTFIELD("No.","No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Qty. to Invoice");
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 1003;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              CASE Type OF
                                                                Type::"G/L Account":
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                                Type::Item:
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Item);
                                                              END;
                                                              JobPlanningLine.SETRANGE("No.","No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Planning Line No.;
                                                              ENN=Job Planning Line No.];
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text047,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                                "Job Remaining Qty. (Base)" := CalcBaseQty("Job Remaining Qty.");
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Qty.;
                                                              ENN=Job Remaining Qty.];
                                                   DecimalPlaces=0:5 }
    { 1031;   ;Job Remaining Qty. (Base);Decimal  ;CaptionML=[ENU=Job Remaining Qty. (Base);
                                                              ENN=Job Remaining Qty. (Base)] }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralPostDate@1000 : Date;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                DeferralPostDate := PurchHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,PurchHeader."Currency Code");

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetPurchDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",PurchHeader."Posting Date");
                                                              END;

                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record 1701;
                                                                DeferralUtilities@1001 : Codeunit 1720;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                IF DeferralHeader.GET(DeferralUtilities.GetPurchDeferralDocType,'','',"Document Type","Document No.","Line No.") THEN
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",TRUE,
                                                                    DeferralHeader."Schedule Description",FALSE,
                                                                    PurchHeader."Currency Code");
                                                              END;

                                                   CaptionML=[ENU=Returns Deferral Start Date;
                                                              ENN=Returns Deferral Start Date] }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order".No. WHERE (Status=CONST(Released));
                                                   OnValidate=BEGIN
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Prod. Order No."),"Sales Order No.");

                                                                AddOnIntegrMgt.ValidateProdOrderOnPurchLine(Rec);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 99000758=R;
                                                   CaptionML=[ENU=Prod. Order No.;
                                                              ENN=Prod. Order No.];
                                                   Editable=No }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                  TESTFIELD("Receipt No.",'');

                                                                  TESTFIELD("Return Qty. Shipped Not Invd.",0);
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Variant Code"),"Sales Order No.");

                                                                IF Type = Type::Item THEN
                                                                  UpdateDirectUnitCost(FIELDNO("Variant Code"));

                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  ReservePurchLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                  InitItemAppl;
                                                                END;

                                                                UpdateLeadTimeFields;
                                                                UpdateDates;
                                                                GetDefaultBin;
                                                                UpdateItemReference;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine(TRUE);
                                                                  UpdateJobPrices;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                          Item No.=FIELD(No.),
                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                          ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                   Quantity=FILTER(>=0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                         Item No.=FIELD(No.),
                                                                                                                                                                                         Variant Code=FIELD(Variant Code))
                                                                                                                                                                                         ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Bin Code"),"Sales Order No.");

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit 7302;
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                     ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                TESTFIELD("Qty. Rcd. Not Invoiced",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Return Qty. Shipped (Base)",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Receipt No.",'');
                                                                  TESTFIELD("Return Shipment No.",'');
                                                                END;
                                                                IF "Drop Shipment" THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Unit of Measure Code"),"Sales Order No.");
                                                                IF (xRec."Unit of Measure" <> "Unit of Measure") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                                UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetPurchHeader;
                                                                  IF PurchHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",PurchHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                UpdateItemReference;
                                                                IF "Prod. Order No." = '' THEN BEGIN
                                                                  IF (Type = Type::Item) AND ("No." <> '') THEN BEGIN
                                                                    GetItem;
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                    "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                    "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                    "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                    "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                    IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                      InitItemAppl;
                                                                    UpdateUOMQtyPerStockQty;
                                                                  END ELSE
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END ELSE
                                                                  "Qty. per Unit of Measure" := 0;

                                                                VALIDATE(Quantity);
                                                                "Assessable Value" := Item."Assessable Value" * "Qty. per Unit of Measure" ;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateDirectUnitCost(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENN=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENN=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ENN=Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Rcd. Not Invoiced (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Rcd. Not Invoiced (Base);
                                                              ENN=Qty. Rcd. Not Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ENN=Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source Type=CONST(39),
                                                                                                                Source Subtype=FIELD(Document Type),
                                                                                                                Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ENN=Reserved Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF Type = Type::"Fixed Asset" THEN BEGIN
                                                                  TESTFIELD("Job No.",'');
                                                                  IF "FA Posting Type" = "FA Posting Type"::" " THEN
                                                                    "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
                                                                  GetFAPostingGroup
                                                                END ELSE BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Type;
                                                              ENN=FA Posting Type];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Maintenance";
                                                                    ENN=" ,Acquisition Cost,Maintenance"];
                                                   OptionString=[ ,Acquisition Cost,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=[ENU=Salvage Value;
                                                              ENN=Salvage Value];
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. Acquisition Cost;
                                                              ENN=Depr. Acquisition Cost] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=[ENU=Maintenance Code;
                                                              ENN=Maintenance Code] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=[ENU=Insurance No.;
                                                              ENN=Insurance No.] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              ENN=Budgeted FA No.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Work Center","Work Center No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Center];
                                                   Editable=No }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                "Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";

                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupPurchaseItem(Rec,ReturnedCrossRef);
                                                                  VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  SetVendorItemNo;
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");
                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                  UpdateDirectUnitCost(FIELDNO("Cross-Reference No."));
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateICPartner;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=[ENU=Nonstock;
                                                              ENN=Nonstock] }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                END ELSE
                                                                  "Drop Shipment" := FALSE;
                                                                VALIDATE("Drop Shipment","Drop Shipment");
                                                              END;

                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5713;   ;Special Order       ;Boolean       ;OnValidate=BEGIN
                                                                IF (xRec."Special Order" <> "Special Order") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Special Order;
                                                              ENN=Special Order] }
    { 5714;   ;Special Order Sales No.;Code20     ;TableRelation=IF (Special Order=CONST(Yes)) "Sales Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales No." <> "Special Order Sales No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order Sales No.;
                                                              ENN=Special Order Sales No.] }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Sales Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                              Document No.=FIELD(Special Order Sales No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Special Order Sales Line No." <> "Special Order Sales Line No.") AND (Quantity <> 0) THEN
                                                                  WhseValidateSourceLine.PurchaseLineVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order Sales Line No.;
                                                              ENN=Special Order Sales Line No.] }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(39),
                                                                                                                             Source Subtype=FIELD(Document Type),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ENN=Whse. Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              ENN=Completely Received];
                                                   Editable=No }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Promised Receipt Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text023,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> 0D THEN
                                                                  VALIDATE("Order Date",
                                                                    CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Requested Receipt Date",
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',TRUE))
                                                                ELSE
                                                                  IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                    GetUpdateBasicDates;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ENN=Requested Receipt Date] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  IF "Promised Receipt Date" <> 0D THEN
                                                                    VALIDATE("Planned Receipt Date","Promised Receipt Date")
                                                                  ELSE
                                                                    VALIDATE("Requested Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Planned Receipt Date","Promised Receipt Date");
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ENN=Promised Receipt Date] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                LeadTimeMgt.CheckLeadTimeIsNotNegative("Lead Time Calculation");

                                                                IF "Requested Receipt Date" <> 0D THEN BEGIN
                                                                  VALIDATE("Planned Receipt Date");
                                                                END ELSE
                                                                  GetUpdateBasicDates;
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENN=Lead Time Calculation] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Promised Receipt Date" <> 0D) OR
                                                                   ("Requested Receipt Date" <> 0D)
                                                                THEN
                                                                  VALIDATE("Planned Receipt Date")
                                                                ELSE
                                                                  VALIDATE("Expected Receipt Date");
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENN=Inbound Whse. Handling Time] }
    { 5794;   ;Planned Receipt Date;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Receipt Date" <> 0D THEN BEGIN
                                                                  IF "Planned Receipt Date" <> 0D THEN
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  ELSE
                                                                    "Expected Receipt Date" := "Planned Receipt Date";
                                                                END ELSE
                                                                  IF "Planned Receipt Date" <> 0D THEN BEGIN
                                                                    "Order Date" :=
                                                                      CalendarMgmt.CalcDateBOC2(AdjustDateFormula("Lead Time Calculation"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',TRUE);
                                                                    "Expected Receipt Date" :=
                                                                      CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                        CalChange."Source Type"::Location,"Location Code",'',
                                                                        CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                  END ELSE
                                                                    GetUpdateBasicDates;

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Planned Receipt Date;
                                                              ENN=Planned Receipt Date] }
    { 5795;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF (CurrFieldNo <> 0) AND
                                                                   ("Document Type" = "Document Type"::Order) AND
                                                                   ("Order Date" < WORKDATE) AND
                                                                   ("Order Date" <> 0D)
                                                                THEN
                                                                  MESSAGE(
                                                                    Text018,
                                                                    FIELDCAPTION("Order Date"),"Order Date",WORKDATE);

                                                                IF "Order Date" <> 0D THEN
                                                                  "Planned Receipt Date" :=
                                                                    CalendarMgmt.CalcDateBOC(AdjustDateFormula("Lead Time Calculation"),"Order Date",
                                                                      CalChange."Source Type"::Vendor,"Buy-from Vendor No.",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',TRUE);

                                                                IF "Planned Receipt Date" <> 0D THEN
                                                                  "Expected Receipt Date" :=
                                                                    CalendarMgmt.CalcDateBOC(InternalLeadTimeDays("Planned Receipt Date"),"Planned Receipt Date",
                                                                      CalChange."Source Type"::Location,"Location Code",'',
                                                                      CalChange."Source Type"::Location,"Location Code",'',FALSE)
                                                                ELSE
                                                                  "Expected Receipt Date" := "Planned Receipt Date";

                                                                IF NOT TrackingBlocked THEN
                                                                  CheckDateConflict.PurchLineCheck(Rec,CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ENN=Allow Item Charge Assignment] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. to Assign;
                                                              ENN=Qty. to Assign];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Purch)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. Assigned;
                                                              ENN=Qty. Assigned];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Ship ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Ship" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Ship" = Quantity - "Return Qty. Shipped" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Ship" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Ship (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Ship" > 0) THEN
                                                                  CheckApplToItemLedgEntry;
                                                              END;

                                                   AccessByPermission=TableData 6650=R;
                                                   CaptionML=[ENU=Return Qty. to Ship;
                                                              ENN=Return Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Ship (Base);Decimal ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Ship","Return Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Ship (Base);
                                                              ENN=Return Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Shipped Not Invd.;Decimal;
                                                   CaptionML=[ENU=Return Qty. Shipped Not Invd.;
                                                              ENN=Return Qty. Shipped Not Invd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Shpd Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Shpd Not Invd.(Base);
                                                              ENN=Ret. Qty. Shpd Not Invd.(Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Shpd. Not Invd.;Decimal     ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF PurchHeader."Currency Code" <> '' THEN
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Shpd. Not Invd.",PurchHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Shpd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Shpd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Return Shpd. Not Invd.;
                                                              ENN=Return Shpd. Not Invd.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Shpd. Not Invd. (LCY);Decimal;
                                                   CaptionML=[ENU=Return Shpd. Not Invd. (LCY);
                                                              ENN=Return Shpd. Not Invd. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Shipped ;Decimal       ;AccessByPermission=TableData 6650=R;
                                                   CaptionML=[ENU=Return Qty. Shipped;
                                                              ENN=Return Qty. Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Shipped (Base);Decimal ;CaptionML=[ENU=Return Qty. Shipped (Base);
                                                              ENN=Return Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 6600;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ENN=Return Shipment No.];
                                                   Editable=No }
    { 6601;   ;Return Shipment Line No.;Integer   ;CaptionML=[ENU=Return Shipment Line No.;
                                                              ENN=Return Shipment Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 13701;  ;Tax %               ;Decimal       ;CaptionML=[ENU=Tax %;
                                                              ENN=Tax %];
                                                   MinValue=0;
                                                   Editable=No }
    { 13702;  ;Amount Including Tax;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Direct Unit Cost");

                                                                GetPurchHeader;
                                                                IF "Amount Added to Tax Base" <> 0 THEN BEGIN
                                                                  "Tax Liable" := PurchHeader."Tax Liable";
                                                                  "Tax Base Amount" := "Amount Added to Tax Base";
                                                                END ELSE BEGIN
                                                                  "Tax Liable" := FALSE;
                                                                  "Tax Base Amount" := ROUND("Line Amount" + "Excise Amount" - "Inv. Discount Amount",
                                                                      Currency."Amount Rounding Precision");
                                                                  Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                  "Amount To Vendor" := "Line Amount" -"Inv. Discount Amount" + "Tax Amount" -
                                                                    "Bal. TDS Including SHE CESS"  + "Charges To Vendor" + FullServiceTaxAmount + FullServiceTaxSBCAmount +
                                                                    KKCessAmount;
                                                                  IF NOT (CVD AND GetCVDPayableToThirdParty(Rec)) THEN
                                                                    "Amount To Vendor" += "Excise Amount";
                                                                  "Amount To Vendor" := ROUND("Amount To Vendor");
                                                                END;
                                                                IF "Tax Base Amount" = 0 THEN
                                                                  "Tax %" := 0;

                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount Including Tax;
                                                              ENN=Amount Including Tax];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13703;  ;Form Code           ;Code10        ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   OnLookup=VAR
                                                              StateForm@1280000 : Record 13767;
                                                            BEGIN
                                                              StateForm.SETRANGE(State,"State Code");
                                                              StateForm.SETRANGE("Transit Document",FALSE);
                                                              IF StateForm.FINDFIRST THEN
                                                                IF PAGE.RUNMODAL(PAGE::"State Forms",StateForm) = ACTION::LookupOK THEN
                                                                  "Form Code" := StateForm."Form Code";
                                                              VALIDATE("Form Code");
                                                            END;

                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 13704;  ;Form No.            ;Code10        ;TableRelation="Tax Forms Details"."Form No." WHERE (Form Code=FIELD(Form Code),
                                                                                                       Issued=CONST(No),
                                                                                                       State=FIELD(State Code));
                                                   CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 13705;  ;State Code          ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 13711;  ;Tax Base Amount     ;Decimal       ;CaptionML=[ENU=Tax Base Amount;
                                                              ENN=Tax Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13713;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group];
                                                   Editable=No }
    { 13714;  ;Excise Prod. Posting Group;Code10  ;TableRelation="Excise Prod. Posting Group";
                                                   CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group];
                                                   Editable=No }
    { 13717;  ;Amount Including Excise;Decimal    ;CaptionML=[ENU=Amount Including Excise;
                                                              ENN=Amount Including Excise];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13718;  ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   AutoFormatType=3;
                                                   AutoFormatExpr="Currency Code" }
    { 13719;  ;Excise Base Quantity;Decimal       ;CaptionML=[ENU=Excise Base Quantity;
                                                              ENN=Excise Base Quantity] }
    { 13722;  ;Tax Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ENN=Tax Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13724;  ;Excise Accounting Type;Option      ;CaptionML=[ENU=Excise Accounting Type;
                                                              ENN=Excise Accounting Type];
                                                   OptionCaptionML=[ENU=With CENVAT,Without CENVAT;
                                                                    ENN=With CENVAT,Without CENVAT];
                                                   OptionString=With CENVAT,Without CENVAT }
    { 13730;  ;Work Tax Base Amount;Decimal       ;OnValidate=BEGIN
                                                                "Work Tax Amount" := "Work Tax Base Amount" * "Work Tax %" / 100;
                                                              END;

                                                   CaptionML=[ENU=Work Tax Base Amount;
                                                              ENN=Work Tax Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13731;  ;Work Tax %          ;Decimal       ;CaptionML=[ENU=Work Tax %;
                                                              ENN=Work Tax %];
                                                   Editable=No }
    { 13732;  ;Work Tax Amount     ;Decimal       ;CaptionML=[ENU=Work Tax Amount;
                                                              ENN=Work Tax Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13733;  ;TDS Category        ;Option        ;CaptionML=[ENU=TDS Category;
                                                              ENN=TDS Category];
                                                   OptionCaptionML=[ENU=" ,A,C,S,T";
                                                                    ENN=" ,A,C,S,T"];
                                                   OptionString=[ ,A,C,S,T] }
    { 13734;  ;Surcharge %         ;Decimal       ;CaptionML=[ENU=Surcharge %;
                                                              ENN=Surcharge %];
                                                   Editable=No }
    { 13735;  ;Surcharge Amount    ;Decimal       ;CaptionML=[ENU=Surcharge Amount;
                                                              ENN=Surcharge Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13736;  ;Concessional Code   ;Code10        ;TableRelation="Concessional Codes";
                                                   CaptionML=[ENU=Concessional Code;
                                                              ENN=Concessional Code];
                                                   Editable=No }
    { 13738;  ;Excise Base Amount  ;Decimal       ;CaptionML=[ENU=Excise Base Amount;
                                                              ENN=Excise Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13740;  ;TDS Amount          ;Decimal       ;CaptionML=[ENU=TDS Amount;
                                                              ENN=TDS Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13741;  ;TDS Nature of Deduction;Code10     ;TableRelation="TDS Nature of Deduction";
                                                   OnValidate=VAR
                                                                Vend@1500001 : Record 23;
                                                              BEGIN
                                                                TDSNOD.MODIFYALL(Mark,FALSE);
                                                                SetFilterOnNODLines("TDS Nature of Deduction",'');
                                                                IF NOT NODLines.FIND('-') THEN
                                                                  IF "TDS Nature of Deduction" <> '' THEN
                                                                    ERROR(Text13700);
                                                                IF TDSNOD.GET("TDS Nature of Deduction") THEN BEGIN
                                                                  "TDS Category" := TDSNOD.Category;
                                                                  "TDS Group" := TDSNOD."TDS Group";
                                                                  IF "TDS Group" = "TDS Group"::"Payable to Non Residents" THEN BEGIN
                                                                    Vend.GET("Buy-from Vendor No.");
                                                                    Vend.TESTFIELD("Country/Region Code");
                                                                    "Country Code" := Vend."Country/Region Code";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "TDS Category" := "TDS Category"::" ";
                                                                  "TDS Group" := "TDS Group"::" ";
                                                                  "Nature of Remittance" := '';
                                                                  "Act Applicable" := "Act Applicable"::" ";
                                                                  "Country Code" :='';
                                                                END;
                                                                InitTDSAmounts(Rec);
                                                              END;

                                                   OnLookup=BEGIN
                                                              SetFilterOnNODLines('','');
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  TDSNOD.RESET;
                                                                  TDSNOD.SETRANGE(Code,NODLines."NOD/NOC");
                                                                  IF TDSNOD.FINDFIRST THEN
                                                                    TDSNOD.MODIFYALL(Mark,TRUE);
                                                                  COMMIT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              TDSNOD.RESET;
                                                              TDSNOD.SETRANGE(Mark,TRUE);
                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Deductions",TDSNOD) = ACTION::LookupOK THEN
                                                                "TDS Nature of Deduction" := TDSNOD.Code;

                                                              VALIDATE("TDS Nature of Deduction");
                                                            END;

                                                   CaptionML=[ENU=TDS Nature of Deduction;
                                                              ENN=TDS Nature of Deduction] }
    { 13742;  ;Assessee Code       ;Code10        ;TableRelation="Assessee Code";
                                                   CaptionML=[ENU=Assessee Code;
                                                              ENN=Assessee Code];
                                                   Editable=No }
    { 13743;  ;TDS %               ;Decimal       ;OnValidate=BEGIN
                                                                "Bal. TDS Including SHE CESS" :=
                                                                  ROUND(("TDS %" * (1 + "Surcharge %" / 100)) * Amount / 100,Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=TDS %;
                                                              ENN=TDS %];
                                                   Editable=No }
    { 13744;  ;TDS Amount Including Surcharge;Decimal;
                                                   CaptionML=[ENU=TDS Amount Including Surcharge;
                                                              ENN=TDS Amount Including Surcharge];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13746;  ;Bal. TDS Including SHE CESS;Decimal;CaptionML=[ENU=Bal. TDS Including SHE CESS;
                                                              ENN=Bal. TDS Including SHE CESS];
                                                   Editable=No }
    { 13747;  ;Nature of Remittance;Code10        ;TableRelation="TDS Nature of Remittance";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("TDS Nature of Deduction");
                                                                IF ("TDS Nature of Deduction" <> '') AND ("Nature of Remittance" <> '') THEN
                                                                  TESTFIELD("TDS Group","TDS Group"::"Payable to Non Residents");
                                                                SetFilterOnNODLines("TDS Nature of Deduction","Nature of Remittance");
                                                                IF NOT (NODLines.FINDFIRST) AND ("Nature of Remittance" <> '') THEN
                                                                  ERROR(Text16513);
                                                              END;

                                                   OnLookup=VAR
                                                              NatureOfRemittance@1500001 : Record 13783;
                                                            BEGIN
                                                              TESTFIELD("TDS Nature of Deduction");
                                                              SetFilterOnNODLines("TDS Nature of Deduction",'');
                                                              NatureOfRemittance.MarkEntriesUsedInNOD(NODLines);
                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Remittances",NatureOfRemittance) = ACTION::LookupOK THEN
                                                                VALIDATE("Nature of Remittance",NatureOfRemittance.Code);
                                                            END;

                                                   CaptionML=[ENU=Nature of Remittance;
                                                              ENN=Nature of Remittance] }
    { 13748;  ;Act Applicable      ;Option        ;OnValidate=BEGIN
                                                                IF "Act Applicable" <> "Act Applicable"::" " THEN BEGIN
                                                                  TESTFIELD("TDS Nature of Deduction");
                                                                  TESTFIELD("TDS Group","TDS Group"::"Payable to Non Residents");
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Act Applicable;
                                                              ENN=Act Applicable];
                                                   OptionCaptionML=[ENU=" ,IT,DTAA";
                                                                    ENN=" ,IT,DTAA"];
                                                   OptionString=[ ,IT,DTAA] }
    { 13749;  ;Country Code        ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country Code;
                                                              ENN=Country Code];
                                                   Editable=No }
    { 13750;  ;Capital Item        ;Boolean       ;CaptionML=[ENU=Capital Item;
                                                              ENN=Capital Item];
                                                   Editable=No }
    { 13757;  ;BED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=BED Amount;
                                                              ENN=BED Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13758;  ;AED(GSI) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=AED(GSI) Amount;
                                                              ENN=AED(GSI) Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13759;  ;SED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=SED Amount;
                                                              ENN=SED Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13769;  ;SAED Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=SAED Amount;
                                                              ENN=SAED Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13770;  ;CESS Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=CESS Amount;
                                                              ENN=CESS Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13771;  ;NCCD Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=NCCD Amount;
                                                              ENN=NCCD Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13772;  ;eCess Amount        ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13775;  ;Amount Added to Excise Base;Decimal;CaptionML=[ENU=Amount Added to Excise Base;
                                                              ENN=Amount Added to Excise Base];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13776;  ;Amount Added to Tax Base;Decimal   ;CaptionML=[ENU=Amount Added to Tax Base;
                                                              ENN=Amount Added to Tax Base];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13777;  ;Amount Added to Inventory;Decimal  ;CaptionML=[ENU=Amount Added to Inventory;
                                                              ENN=Amount Added to Inventory];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16321;  ;Excise Credit Reversal;Boolean     ;CaptionML=[ENU=Excise Credit Reversal;
                                                              ENN=Excise Credit Reversal] }
    { 16340;  ;Amount To Vendor    ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Direct Unit Cost");

                                                                "Amount To Vendor" := ROUND("Amount To Vendor",Currency."Amount Rounding Precision");
                                                                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                "Tax Base Amount" := Amount;
                                                                "Amount Including Tax" := Amount;
                                                                InitOutstandingAmount;
                                                                UpdateUnitCost;
                                                              END;

                                                   CaptionML=[ENU=Amount To Vendor;
                                                              ENN=Amount To Vendor] }
    { 16342;  ;Charges To Vendor   ;Decimal       ;CaptionML=[ENU=Charges To Vendor;
                                                              ENN=Charges To Vendor];
                                                   Editable=No }
    { 16343;  ;TDS Base Amount     ;Decimal       ;CaptionML=[ENU=TDS Base Amount;
                                                              ENN=TDS Base Amount];
                                                   Editable=No }
    { 16362;  ;Surcharge Base Amount;Decimal      ;CaptionML=[ENU=Surcharge Base Amount;
                                                              ENN=Surcharge Base Amount];
                                                   Editable=No }
    { 16363;  ;TDS Group           ;Option        ;CaptionML=[ENU=TDS Group;
                                                              ENN=TDS Group];
                                                   OptionCaptionML=[ENU=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services,Compensation On Immovable Property,PF Accumulated,Payment For Immovable Property";
                                                                    ENN=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services,Compensation On Immovable Property,PF Accumulated,Payment For Immovable Property"];
                                                   OptionString=[ ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services,Compensation On Immovable Property,PF Accumulated,Payment For Immovable Property];
                                                   Editable=No }
    { 16364;  ;Work Tax Nature Of Deduction;Code10;TableRelation="TDS Nature of Deduction";
                                                   OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                IF GSTManagement.IsGSTApplicable(PurchHeader.Structure) THEN
                                                                  ERROR(Text13700);

                                                                TDSNOD.MODIFYALL(Mark,FALSE);
                                                                NODLines.RESET;
                                                                NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                NODLines.SETRANGE("No.","Pay-to Vendor No.");
                                                                NODLines.SETRANGE("NOD/NOC","Work Tax Nature Of Deduction");
                                                                NODLines.SETFILTER("TDS Group",'%1',NODLines."TDS Group"::Others);
                                                                IF NOT NODLines.FIND('-') THEN
                                                                  IF "Work Tax Nature Of Deduction" <> '' THEN
                                                                    ERROR(Text13700);

                                                                IF TDSNOD.GET("Work Tax Nature Of Deduction") THEN
                                                                  "Work Tax Group" := TDSNOD."TDS Group"
                                                                ELSE
                                                                  "Work Tax Group" := "Work Tax Group"::" ";
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("GST Group Code",'');
                                                              NODLines.RESET;
                                                              NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                              NODLines.SETRANGE("No.","Pay-to Vendor No.");
                                                              NODLines.SETFILTER("TDS Group",'%1',NODLines."TDS Group"::Others);
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  TDSNOD.RESET;
                                                                  TDSNOD.SETRANGE(Code,NODLines."NOD/NOC");
                                                                  IF TDSNOD.FINDFIRST THEN
                                                                    TDSNOD.MODIFYALL(Mark,TRUE);
                                                                  COMMIT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              TDSNOD.RESET;
                                                              TDSNOD.SETRANGE(Mark,TRUE);
                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Deductions",TDSNOD) = ACTION::LookupOK THEN BEGIN
                                                                "Work Tax Nature Of Deduction" := TDSNOD.Code;
                                                                "Work Tax Group" := TDSNOD."TDS Group";
                                                              END;

                                                              VALIDATE("Work Tax Nature Of Deduction");
                                                            END;

                                                   CaptionML=[ENU=Work Tax Nature Of Deduction;
                                                              ENN=Work Tax Nature Of Deduction] }
    { 16365;  ;Work Tax Group      ;Option        ;CaptionML=[ENU=Work Tax Group;
                                                              ENN=Work Tax Group];
                                                   OptionCaptionML=[ENU=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others";
                                                                    ENN=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others"];
                                                   OptionString=[ ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others];
                                                   Editable=No }
    { 16366;  ;Temp TDS Base       ;Decimal       ;CaptionML=[ENU=Temp TDS Base;
                                                              ENN=Temp TDS Base] }
    { 16367;  ;SetOff Available    ;Boolean       ;CaptionML=[ENU=SetOff Available;
                                                              ENN=SetOff Available] }
    { 16370;  ;Subcontracting      ;Boolean       ;CaptionML=[ENU=Subcontracting;
                                                              ENN=Subcontracting] }
    { 16371;  ;SubConSend          ;Boolean       ;CaptionML=[ENU=SubConSend;
                                                              ENN=SubConSend] }
    { 16372;  ;Delivery Challan Posted;Integer    ;FieldClass=FlowField;
                                                   CalcFormula=Count("Delivery Challan Header" WHERE (Sub. order No.=FIELD(Document No.),
                                                                                                      Sub. Order Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Delivery Challan Posted;
                                                              ENN=Delivery Challan Posted];
                                                   Editable=No }
    { 16373;  ;Qty. to Reject (Rework);Decimal    ;OnValidate=VAR
                                                                SubOrderComponents@1500000 : Record 16321;
                                                              BEGIN
                                                                UpdateSubConOrderLines;
                                                                ValidateQuantity;
                                                                SubOrderComponents.UpdateIssueDetails(Rec,"Deliver Comp. For","Qty. to Reject (Rework)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Reject (Rework);
                                                              ENN=Qty. to Reject (Rework)];
                                                   DecimalPlaces=0:2 }
    { 16374;  ;Qty. Rejected (Rework);Decimal     ;OnValidate=BEGIN
                                                                UpdateSubConOrderLines;
                                                                ValidateQuantity;
                                                              END;

                                                   CaptionML=[ENU=Qty. Rejected (Rework);
                                                              ENN=Qty. Rejected (Rework)];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 16375;  ;SendForRework       ;Boolean       ;CaptionML=[ENU=SendForRework;
                                                              ENN=SendForRework] }
    { 16376;  ;Qty. to Reject (C.E.);Decimal      ;OnValidate=BEGIN
                                                                UpdateSubConOrderLines;
                                                                ValidateQuantity;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Reject (C.E.);
                                                              ENN=Qty. to Reject (C.E.)] }
    { 16377;  ;Qty. to Reject (V.E.);Decimal      ;OnValidate=BEGIN
                                                                UpdateSubConOrderLines;
                                                                ValidateQuantity;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Reject (V.E.);
                                                              ENN=Qty. to Reject (V.E.)] }
    { 16378;  ;Qty. Rejected (C.E.);Decimal       ;OnValidate=BEGIN
                                                                UpdateSubConOrderLines;
                                                                ValidateQuantity;
                                                              END;

                                                   CaptionML=[ENU=Qty. Rejected (C.E.);
                                                              ENN=Qty. Rejected (C.E.)];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 16379;  ;Qty. Rejected (V.E.);Decimal       ;CaptionML=[ENU=Qty. Rejected (V.E.);
                                                              ENN=Qty. Rejected (V.E.)];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 16380;  ;Deliver Comp. For   ;Decimal       ;OnValidate=VAR
                                                                SubOrderComponents@1500003 : Record 16321;
                                                              BEGIN
                                                                UpdateSubConOrderLines;
                                                                SubOrderComponents.UpdateIssueDetails(Rec,"Deliver Comp. For","Qty. to Reject (Rework)");
                                                              END;

                                                   CaptionML=[ENU=Deliver Comp. For;
                                                              ENN=Deliver Comp. For];
                                                   DecimalPlaces=0:2 }
    { 16381;  ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                UpdateSubConOrderLines;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 16382;  ;Status              ;Option        ;OnValidate=VAR
                                                                SubOrderCompListVend@1280000 : Record 16322;
                                                                ProdOrder@1280001 : Record 5405;
                                                                SubOrderCompList@1280002 : Record 16321;
                                                                Text16360@1280004 : TextConst 'ENU=There is still components pending at vendor location.;ENN=There is still components pending at vendor location.';
                                                                Text16361@1280003 : TextConst 'ENU=Reopening is not allowed Production Order %1 has already been reported as Finished.;ENN=Reopening is not allowed Production Order %1 has already been reported as Finished.';
                                                              BEGIN
                                                                IF Status = Status::Closed THEN BEGIN
                                                                  "Qty. to Receive" := 0;
                                                                  "Qty. to Receive (Base)" := 0;
                                                                  InitQtyToInvoice;
                                                                  SubOrderCompListVend.SETCURRENTKEY("Document No.","Document Line No.","Parent Item No.");
                                                                  SubOrderCompListVend.SETFILTER("Document No.","Document No.");
                                                                  SubOrderCompListVend.SETRANGE("Document Line No.","Line No.");
                                                                  SubOrderCompListVend.SETFILTER("Parent Item No.","No.");
                                                                  IF SubOrderCompListVend.FIND('-') THEN
                                                                    REPEAT
                                                                      SubOrderCompListVend.CALCFIELDS("Quantity at Vendor Location");
                                                                      IF SubOrderCompListVend."Quantity at Vendor Location" <> 0 THEN
                                                                        ERROR(Text16360);
                                                                      SubOrderCompListVend."Qty. to Receive" := 0;
                                                                      SubOrderCompListVend."Qty. to Consume" := 0;
                                                                      SubOrderCompListVend."Qty. to Return (C.E.)" := 0;
                                                                      SubOrderCompListVend."Qty. To Return (V.E.)" := 0;
                                                                      SubOrderCompListVend.MODIFY;
                                                                    UNTIL SubOrderCompListVend.NEXT = 0;
                                                                  SubOrderCompList.SETCURRENTKEY("Document No.","Document Line No.","Parent Item No.");
                                                                  SubOrderCompList.SETFILTER("Document No.","Document No.");
                                                                  SubOrderCompList.SETRANGE("Document Line No.","Line No.");
                                                                  SubOrderCompList.SETFILTER("Parent Item No.","No.");
                                                                  IF SubOrderCompList.FIND('-') THEN
                                                                    REPEAT
                                                                      SubOrderCompList."Quantity To Send" := 0;
                                                                      SubOrderCompList."Qty. for Rework" := 0;
                                                                      SubOrderCompList.MODIFY;
                                                                    UNTIL SubOrderCompList.NEXT = 0;
                                                                END ELSE
                                                                  IF xRec.Status = Status::Closed THEN
                                                                    ProdOrder.SETRANGE(Status,ProdOrder.Status::Released);
                                                                ProdOrder.SETFILTER("No.","Prod. Order No.");
                                                                IF ProdOrder.ISEMPTY THEN
                                                                  ERROR(Text16361,"Prod. Order No.");
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Open,Closed;
                                                                    ENN=Open,Closed];
                                                   OptionString=Open,Closed }
    { 16383;  ;Vendor Shipment No. ;Code20        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              ENN=Vendor Shipment No.] }
    { 16384;  ;Released Production Order;Code20   ;TableRelation="Production Order".No. WHERE (Status=CONST(Finished),
                                                                                               No.=FIELD(Prod. Order No.));
                                                   CaptionML=[ENU=Released Production Order;
                                                              ENN=Released Production Order] }
    { 16385;  ;SubConReceive       ;Boolean       ;CaptionML=[ENU=SubConReceive;
                                                              ENN=SubConReceive] }
    { 16386;  ;Component Item No.  ;Code20        ;CaptionML=[ENU=Component Item No.;
                                                              ENN=Component Item No.] }
    { 16391;  ;Service Tax Group   ;Code20        ;TableRelation="Service Tax Groups".Code;
                                                   OnValidate=BEGIN
                                                                "Service Tax Registration No." := ServiceTaxMgt.GetServiceTaxRegNoForLocation("Location Code");
                                                                UpdateTaxAmounts;
                                                                UpdateGSTAmounts("GST Base Amount");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Group;
                                                              ENN=Service Tax Group] }
    { 16393;  ;Service Tax Base    ;Decimal       ;CaptionML=[ENU=Service Tax Base;
                                                              ENN=Service Tax Base] }
    { 16394;  ;Service Tax Amount  ;Decimal       ;CaptionML=[ENU=Service Tax Amount;
                                                              ENN=Service Tax Amount] }
    { 16395;  ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.".Code;
                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 16397;  ;eCESS % on TDS      ;Decimal       ;CaptionML=[ENU=eCESS % on TDS;
                                                              ENN=eCESS % on TDS];
                                                   Editable=No }
    { 16398;  ;eCESS on TDS Amount ;Decimal       ;CaptionML=[ENU=eCESS on TDS Amount;
                                                              ENN=eCESS on TDS Amount];
                                                   Editable=No }
    { 16399;  ;Total TDS Including SHE CESS;Decimal;
                                                   CaptionML=[ENU=Total TDS Including SHE CESS;
                                                              ENN=Total TDS Including SHE CESS];
                                                   Editable=No }
    { 16400;  ;Per Contract        ;Boolean       ;CaptionML=[ENU=Per Contract;
                                                              ENN=Per Contract] }
    { 16406;  ;Service Tax eCess Amount;Decimal   ;CaptionML=[ENU=Service Tax eCess Amount;
                                                              ENN=Service Tax eCess Amount] }
    { 16452;  ;ADET Amount         ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=ADET Amount;
                                                              ENN=ADET Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16455;  ;AED(TTA) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=AED(TTA) Amount;
                                                              ENN=AED(TTA) Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16459;  ;ADE Amount          ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails
                                                              END;

                                                   CaptionML=[ENU=ADE Amount;
                                                              ENN=ADE Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16490;  ;Assessable Value    ;Decimal       ;CaptionML=[ENU=Assessable Value;
                                                              ENN=Assessable Value] }
    { 16491;  ;VAT Type            ;Option        ;CaptionML=[ENU=VAT Type;
                                                              ENN=VAT Type];
                                                   OptionCaptionML=[ENU=" ,Item,Capital Goods";
                                                                    ENN=" ,Item,Capital Goods"];
                                                   OptionString=[ ,Item,Capital Goods] }
    { 16494;  ;SHE Cess Amount     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails;
                                                              END;

                                                   CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16496;  ;Service Tax SHE Cess Amount;Decimal;CaptionML=[ENU=Service Tax SHE Cess Amount;
                                                              ENN=Service Tax SHE Cess Amount] }
    { 16500;  ;Non ITC Claimable Usage %;Decimal  ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Non ITC Claimable Usage %;
                                                              ENN=Non ITC Claimable Usage %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 16501;  ;Amount Loaded on Inventory;Decimal ;CaptionML=[ENU=Amount Loaded on Inventory;
                                                              ENN=Amount Loaded on Inventory];
                                                   Editable=No }
    { 16502;  ;Input Tax Credit Amount;Decimal    ;CaptionML=[ENU=Input Tax Credit Amount;
                                                              ENN=Input Tax Credit Amount];
                                                   Editable=No }
    { 16503;  ;VAT able Purchase Tax Amount;Decimal;
                                                   CaptionML=[ENU=VAT able Purchase Tax Amount;
                                                              ENN=VAT able Purchase Tax Amount];
                                                   Editable=No }
    { 16504;  ;Supplementary       ;Boolean       ;OnValidate=BEGIN
                                                                GetPurchHeader;
                                                                IF NOT Supplementary THEN
                                                                  "Source Document No." := '';
                                                                IF PurchHeader."Invoice Type" = PurchHeader."Invoice Type"::Supplementary THEN
                                                                  TESTFIELD(Supplementary)
                                                                ELSE
                                                                  TESTFIELD(Supplementary,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Supplementary;
                                                              ENN=Supplementary] }
    { 16505;  ;Source Document Type;Option        ;OnValidate=BEGIN
                                                                IF "Source Document Type" <> xRec."Source Document Type" THEN
                                                                  "Source Document No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Document Type;
                                                              ENN=Source Document Type];
                                                   OptionCaptionML=[ENU=Posted Invoice,Posted Credit Memo;
                                                                    ENN=Posted Invoice,Posted Credit Memo];
                                                   OptionString=Posted Invoice,Posted Credit Memo }
    { 16506;  ;Source Document No. ;Code20        ;TableRelation=IF (Source Document Type=FILTER(Posted Invoice)) "Purch. Inv. Header".No.
                                                                 ELSE IF (Source Document Type=FILTER(Posted Credit Memo)) "Purch. Cr. Memo Hdr.".No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Supplementary);
                                                              END;

                                                   CaptionML=[ENU=Source Document No.;
                                                              ENN=Source Document No.] }
    { 16509;  ;ADC VAT Amount      ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails;
                                                              END;

                                                   CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16510;  ;CIF Amount          ;Decimal       ;CaptionML=[ENU=CIF Amount;
                                                              ENN=CIF Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16511;  ;BCD Amount          ;Decimal       ;CaptionML=[ENU=BCD Amount;
                                                              ENN=BCD Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16512;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16513;  ;Notification Sl. No.;Code20        ;CaptionML=[ENU=Notification Sl. No.;
                                                              ENN=Notification Sl. No.] }
    { 16514;  ;Notification No.    ;Code20        ;CaptionML=[ENU=Notification No.;
                                                              ENN=Notification No.] }
    { 16515;  ;CTSH No.            ;Code10        ;CaptionML=[ENU=CTSH No.;
                                                              ENN=CTSH No.] }
    { 16518;  ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 16519;  ;SHE Cess % On TDS   ;Decimal       ;CaptionML=[ENU=SHE Cess % On TDS;
                                                              ENN=SHE Cess % On TDS];
                                                   Editable=No }
    { 16520;  ;SHE Cess on TDS Amount;Decimal     ;CaptionML=[ENU=SHE Cess on TDS Amount;
                                                              ENN=SHE Cess on TDS Amount];
                                                   Editable=No }
    { 16522;  ;Excise Loading on Inventory;Boolean;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                                                                  TESTFIELD("Quantity Received",0);
                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                  TESTFIELD("Return Qty. Shipped",0);
                                                                IF PurchHeader2.GET("Document Type","Document No.") THEN
                                                                  PurchHeader2.TESTFIELD(Trading,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Excise Loading on Inventory;
                                                              ENN=Excise Loading on Inventory] }
    { 16523;  ;Custom eCess Amount ;Decimal       ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails;
                                                              END;

                                                   CaptionML=[ENU=Custom eCess Amount;
                                                              ENN=Custom eCess Amount] }
    { 16524;  ;Custom SHECess Amount;Decimal      ;OnValidate=BEGIN
                                                                UpdateStruOrdLineDetails;
                                                              END;

                                                   CaptionML=[ENU=Custom SHECess Amount;
                                                              ENN=Custom SHECess Amount] }
    { 16527;  ;Excise Refund       ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Excise Refund;
                                                              ENN=Excise Refund] }
    { 16528;  ;CWIP G/L Type       ;Option        ;OnValidate=VAR
                                                                Job@1500000 : Record 167;
                                                              BEGIN
                                                                IF "CWIP G/L Type" <> "CWIP G/L Type"::" " THEN BEGIN
                                                                  TESTFIELD("Job No.");
                                                                  Job.GET("Job No.");
                                                                  Job.TESTFIELD("Job Type",Job."Job Type"::"Capital WIP");
                                                                  IF NOT (Type IN [Type::Item,Type::"G/L Account"]) THEN
                                                                    ERROR(Text16507,"Document Type","Document No.","Line No.");
                                                                  IF "CWIP G/L Type" <> "CWIP G/L Type"::Material THEN
                                                                    TESTFIELD(Type,Type::"G/L Account");
                                                                END ELSE BEGIN
                                                                  IF "Job No." <> '' THEN BEGIN
                                                                    Job.GET("Job No.");
                                                                    IF Job."Job Type" = Job."Job Type"::"Capital WIP" THEN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=CWIP G/L Type;
                                                              ENN=CWIP G/L Type];
                                                   OptionCaptionML=[ENU=" ,Labor,Material,Overheads";
                                                                    ENN=" ,Labor,Material,Overheads"];
                                                   OptionString=[ ,Labor,Material,Overheads] }
    { 16529;  ;Applies-to ID (Delivery);Code50    ;CaptionML=[ENU=Applies-to ID (Delivery);
                                                              ENN=Applies-to ID (Delivery)] }
    { 16530;  ;Applies-to ID (Receipt);Code50     ;CaptionML=[ENU=Applies-to ID (Receipt);
                                                              ENN=Applies-to ID (Receipt)] }
    { 16531;  ;Delivery Challan Date;Date         ;CaptionML=[ENU=Delivery Challan Date;
                                                              ENN=Delivery Challan Date] }
    { 16532;  ;Item Charge Entry   ;Boolean       ;CaptionML=[ENU=Item Charge Entry;
                                                              ENN=Item Charge Entry] }
    { 16533;  ;Tot. Serv Tax Amount (Intm);Decimal;CaptionML=[ENU=Tot. Serv Tax Amount (Intm);
                                                              ENN=Tot. Serv Tax Amount (Intm)] }
    { 16534;  ;S. Tax Base Amount (Intm);Decimal  ;CaptionML=[ENU=S. Tax Base Amount (Intm);
                                                              ENN=S. Tax Base Amount (Intm)] }
    { 16535;  ;S. Tax Amount (Intm);Decimal       ;CaptionML=[ENU=S. Tax Amount (Intm);
                                                              ENN=S. Tax Amount (Intm)];
                                                   Editable=No }
    { 16536;  ;S. Tax eCess Amount (Intm);Decimal ;CaptionML=[ENU=S. Tax eCess Amount (Intm);
                                                              ENN=S. Tax eCess Amount (Intm)];
                                                   Editable=No }
    { 16537;  ;S. Tax SHE Cess Amount (Intm);Decimal;
                                                   CaptionML=[ENU=S. Tax SHE Cess Amount (Intm);
                                                              ENN=S. Tax SHE Cess Amount (Intm)];
                                                   Editable=No }
    { 16538;  ;Amt. Incl. Service Tax (Intm);Decimal;
                                                   CaptionML=[ENU=Amt. Incl. Service Tax (Intm);
                                                              ENN=Amt. Incl. Service Tax (Intm)];
                                                   Editable=No }
    { 16539;  ;Service Tax SBC %   ;Decimal       ;CaptionML=[ENU=Service Tax SBC %;
                                                              ENN=Service Tax SBC %];
                                                   Editable=No }
    { 16540;  ;Service Tax SBC Amount;Decimal     ;CaptionML=[ENU=Service Tax SBC Amount(LCY);
                                                              ENN=Service Tax SBC Amount(LCY)];
                                                   Editable=No }
    { 16541;  ;Service Tax SBC Amount (Intm);Decimal;
                                                   CaptionML=[ENU=Service Tax SBC Amount(Intm);
                                                              ENN=Service Tax SBC Amount(Intm)];
                                                   Editable=No }
    { 16542;  ;KK Cess%            ;Decimal       ;CaptionML=[ENU=KK Cess%;
                                                              ENN=KK Cess%];
                                                   Editable=No }
    { 16543;  ;KK Cess Amount      ;Decimal       ;CaptionML=[ENU=KK Cess Amount;
                                                              ENN=KK Cess Amount];
                                                   Editable=No }
    { 16544;  ;KK Cess Amount (Intm);Decimal      ;CaptionML=[ENU=KK Cess Amount (Intm);
                                                              ENN=KK Cess Amount (Intm)];
                                                   Editable=No }
    { 16600;  ;GST Credit          ;Option        ;OnValidate=BEGIN
                                                                   IF (xRec."GST Credit" <> "GST Credit") AND ("Quantity Received" <> 0) THEN
                                                                     ERROR(GSTCreditTypeErr);
                                                              END;

                                                   CaptionML=[ENU=GST Credit;
                                                              ENN=GST Credit];
                                                   OptionCaptionML=[ENU=Availment,Non-Availment;
                                                                    ENN=Availment,Non-Availment];
                                                   OptionString=Availment,Non-Availment }
    { 16601;  ;GST Group Code      ;Code20        ;TableRelation="GST Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Work Tax Nature Of Deduction",'');
                                                                "HSN/SAC Code" := '';
                                                                "GST Reverse Charge" := FALSE;
                                                                IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                  "GST Group Type" := GSTGroup."GST Group Type";
                                                                  GetPurchHeader;
                                                                  "GST Reverse Charge" :=
                                                                    PurchHeader."GST Vendor Type" IN [PurchHeader."GST Vendor Type"::Import,
                                                                                                      PurchHeader."GST Vendor Type"::Unregistered,
                                                                                                      PurchHeader."GST Vendor Type"::SEZ];
                                                                  IF PurchHeader."GST Vendor Type"= PurchHeader."GST Vendor Type"::Registered THEN
                                                                    "GST Reverse Charge" := GSTGroup."Reverse Charge";

                                                                  IF ("GST Group Type" = "GST Group Type"::Service) OR (Type = Type::"Charge (Item)") THEN BEGIN
                                                                    TESTFIELD("Custom Duty Amount",0);
                                                                    TESTFIELD("GST Assessable Value",0);
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 16602;  ;GST Group Type      ;Option        ;CaptionML=[ENU=GST Group Type;
                                                              ENN=GST Group Type];
                                                   OptionCaptionML=[ENU=Goods,Service;
                                                                    ENN=Goods,Service];
                                                   OptionString=Goods,Service;
                                                   Editable=No }
    { 16603;  ;HSN/SAC Code        ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetPurchHeader;
                                                                PurchHeader.TESTFIELD("Applies-to Doc. No.",'');
                                                                PurchHeader.TESTFIELD("Applies-to ID",'');
                                                              END;

                                                   CaptionML=[ENU=HSN/SAC Code;
                                                              ENN=HSN/SAC Code] }
    { 16604;  ;GST Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                "GST %" := 0;
                                                                "Total GST Amount" := 0;
                                                              END;

                                                   CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount];
                                                   Editable=No }
    { 16605;  ;GST %               ;Decimal       ;CaptionML=[ENU=GST %;
                                                              ENN=GST %];
                                                   Editable=No }
    { 16606;  ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount];
                                                   Editable=No }
    { 16608;  ;Exempted            ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                CheckExemptedStatus;
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Return Qty. Shipped",0);
                                                                TESTFIELD("Quantity Invoiced",0);
                                                                GetPurchHeader;
                                                                IF (PurchHeader."Applies-to Doc. No." <> '') OR (PurchHeader."Applies-to ID" <> '') THEN
                                                                  ERROR(AppliesToDocErr);
                                                              END;

                                                   CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
    { 16609;  ;GST Jurisdiction Type;Option       ;CaptionML=[ENU=GST Jurisdiction Type;
                                                              ENN=GST Jurisdiction Type];
                                                   OptionCaptionML=[ENU=Intrastate,Interstate;
                                                                    ENN=Intrastate,Interstate];
                                                   OptionString=Intrastate,Interstate;
                                                   Editable=No }
    { 16611;  ;Custom Duty Amount  ;Decimal       ;OnValidate=VAR
                                                                Vendor@1500000 : Record 23;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                IF NOT GSTManagement.IsGSTApplicable(PurchHeader.Structure) THEN
                                                                  EXIT;
                                                                IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
                                                                  TESTFIELD("Custom Duty Amount",0);
                                                                Vendor.GET(PurchHeader."Buy-from Vendor No.");
                                                                IF NOT (Vendor."GST Vendor Type" IN [Vendor."GST Vendor Type"::Import,Vendor."GST Vendor Type"::SEZ]) THEN
                                                                  ERROR(GSTVendorTypeErr,Vendor."GST Vendor Type"::Import,Vendor."GST Vendor Type"::SEZ);
                                                                IF ("GST Group Type" <> "GST Group Type"::Goods) OR (Type = Type::"Charge (Item)") THEN
                                                                  TESTFIELD("Custom Duty Amount",0);
                                                              END;

                                                   CaptionML=[ENU=Custom Duty Amount;
                                                              ENN=Custom Duty Amount];
                                                   MinValue=0 }
    { 16612;  ;GST Reverse Charge  ;Boolean       ;CaptionML=[ENU=GST Reverse Charge;
                                                              ENN=GST Reverse Charge];
                                                   Editable=No }
    { 16613;  ;GST Assessable Value;Decimal       ;OnValidate=VAR
                                                                Vendor@1500753 : Record 23;
                                                              BEGIN
                                                                GetPurchHeader;
                                                                IF NOT GSTManagement.IsGSTApplicable(PurchHeader.Structure) THEN
                                                                  EXIT;
                                                                IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN
                                                                  TESTFIELD("GST Assessable Value",0);
                                                                Vendor.GET(PurchHeader."Buy-from Vendor No.");
                                                                IF NOT (Vendor."GST Vendor Type" IN [Vendor."GST Vendor Type"::Import,Vendor."GST Vendor Type"::SEZ]) THEN
                                                                  ERROR(GSTVendorTypeErr,Vendor."GST Vendor Type"::Import,Vendor."GST Vendor Type"::SEZ);
                                                                IF ("GST Group Type" <> "GST Group Type"::Goods) OR (Type = Type::"Charge (Item)") THEN
                                                                  TESTFIELD("GST Assessable Value",0);
                                                              END;

                                                   CaptionML=[ENU=GST Assessable Value;
                                                              ENN=GST Assessable Value];
                                                   MinValue=0 }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=[ENU=Routing No.;
                                                              ENN=Routing No.] }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=CONST(Released),
                                                                                                                   Prod. Order No.=FIELD(Prod. Order No.),
                                                                                                                   Routing No.=FIELD(Routing No.));
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record 5409;
                                                              BEGIN
                                                                IF "Operation No." = '' THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Prod. Order No.");
                                                                TESTFIELD("Routing No.");

                                                                ProdOrderRtngLine.GET(
                                                                  ProdOrderRtngLine.Status::Released,
                                                                  "Prod. Order No.",
                                                                  "Routing Reference No.",
                                                                  "Routing No.",
                                                                  "Operation No.");

                                                                ProdOrderRtngLine.TESTFIELD(
                                                                  Type,
                                                                  ProdOrderRtngLine.Type::"Work Center");

                                                                "Expected Receipt Date" := ProdOrderRtngLine."Ending Date";
                                                                VALIDATE("Work Center No.",ProdOrderRtngLine."No.");
                                                                VALIDATE("Direct Unit Cost",ProdOrderRtngLine."Direct Unit Cost");
                                                              END;

                                                   CaptionML=[ENU=Operation No.;
                                                              ENN=Operation No.];
                                                   Editable=No }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::"Charge (Item)" THEN
                                                                  TESTFIELD("Work Center No.",'');
                                                                IF "Work Center No." = '' THEN
                                                                  EXIT;

                                                                WorkCenter.GET("Work Center No.");
                                                                "Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
                                                                "VAT Prod. Posting Group" := '';
                                                                IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                  "VAT Prod. Posting Group" := GenProdPostingGrp."Def. VAT Prod. Posting Group";
                                                                VALIDATE("VAT Prod. Posting Group");

                                                                "Overhead Rate" := WorkCenter."Overhead Rate";
                                                                VALIDATE("Indirect Cost %",WorkCenter."Indirect Cost %");

                                                                CreateDim(
                                                                  DATABASE::"Work Center","Work Center No.",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Work Center No.;
                                                              ENN=Work Center No.];
                                                   Editable=No }
    { 99000753;;Finished           ;Boolean       ;CaptionML=[ENU=Finished;
                                                              ENN=Finished] }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      Prod. Order No.=FIELD(Prod. Order No.));
                                                   CaptionML=[ENU=Prod. Order Line No.;
                                                              ENN=Prod. Order Line No.];
                                                   Editable=No }
    { 99000755;;Overhead Rate      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=[ENU=Overhead Rate;
                                                              ENN=Overhead Rate];
                                                   DecimalPlaces=0:5 }
    { 99000756;;MPS Order          ;Boolean       ;CaptionML=[ENU=MPS Order;
                                                              ENN=MPS Order] }
    { 99000757;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReservePurchLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ENN=Planning Flexibility];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ENN=Unlimited,None];
                                                   OptionString=Unlimited,None }
    { 99000758;;Safety Lead Time   ;DateFormula   ;OnValidate=BEGIN
                                                                VALIDATE("Inbound Whse. Handling Time");
                                                              END;

                                                   CaptionML=[ENU=Safety Lead Time;
                                                              ENN=Safety Lead Time] }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=[ENU=Routing Reference No.;
                                                              ENN=Routing Reference No.] }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Amount To Vendor;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Pay-to Vendor No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY);
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Expected Receipt Date;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    { No ;Document Type,Pay-to Vendor No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Amt. Rcd. Not Invoiced,Outstanding Amount (LCY),Amt. Rcd. Not Invoiced (LCY);
                                                   MaintainSQLIndex=No;
                                                   MaintainSIFTIndex=No }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No. }
    {    ;Document Type,Type,Prod. Order No.,Prod. Order Line No.,Routing No.,Operation No. }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Receipt No.,Receipt Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Expected Receipt Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Job No.,Job Task No.      ;SumIndexFields=Outstanding Amt. Ex. VAT (LCY),A. Rcd. Not Inv. Ex. VAT (LCY) }
    {    ;Document Type,Type,No.                  ;SumIndexFields=Outstanding Qty. (Base) }
    {    ;Document Type,Document No.,Type,No.     ;SumIndexFields=Qty. to Invoice }
    {    ;Document Type,Buy-from Vendor No.,Subcontracting,Applies-to ID (Delivery);
                                                   SumIndexFields=Deliver Comp. For }
    {    ;Document Type,Buy-from Vendor No.,Subcontracting,Applies-to ID (Receipt) }
    {    ;Document Type,Document No.,Type,No.,GST Group Code }
    {    ;Document Type,Document No.,Type,No.,HSN/SAC Code,GST Credit }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=You cannot change %1 because the order line is associated with sales order %2.;ENN=You cannot change %1 because the order line is associated with sales order %2.';
      Text002@1002 : TextConst 'ENU=Prices including VAT cannot be calculated when %1 is %2.;ENN=Prices including VAT cannot be calculated when %1 is %2.';
      Text003@1003 : TextConst 'ENU=You cannot purchase resources.;ENN=You cannot purchase resources.';
      Text004@1004 : TextConst 'ENU=must not be less than %1;ENN=must not be less than %1';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 units.;ENN=You cannot invoice more than %1 units.';
      Text007@1006 : TextConst 'ENU=You cannot invoice more than %1 base units.;ENN=You cannot invoice more than %1 base units.';
      Text008@1007 : TextConst 'ENU=You cannot receive more than %1 units.;ENN=You cannot receive more than %1 units.';
      Text009@1008 : TextConst 'ENU=You cannot receive more than %1 base units.;ENN=You cannot receive more than %1 base units.';
      Text010@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3.;ENN=You cannot change %1 when %2 is %3.';
      Text011@1010 : TextConst 'ENU=" must be 0 when %1 is %2";ENN=" must be 0 when %1 is %2"';
      Text012@1011 : TextConst 'ENU="must not be specified when %1 = %2";ENN="must not be specified when %1 = %2"';
      Text016@1014 : TextConst 'ENU="%1 is required for %2 = %3.";ENN="%1 is required for %2 = %3."';
      Text017@1015 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ENN=\The entered information may be disregarded by warehouse operations.';
      Text018@1016 : TextConst 'ENU=%1 %2 is earlier than the work date %3.;ENN=%1 %2 is earlier than the work date %3.';
      Text020@1018 : TextConst 'ENU=You cannot return more than %1 units.;ENN=You cannot return more than %1 units.';
      Text021@1019 : TextConst 'ENU=You cannot return more than %1 base units.;ENN=You cannot return more than %1 base units.';
      Text022@1020 : TextConst 'ENU=You cannot change %1, if item charge is already posted.;ENN=You cannot change %1, if item charge is already posted.';
      Text023@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      Text029@1077 : TextConst 'ENU=must be positive.;ENN=must be positive.';
      Text030@1076 : TextConst 'ENU=must be negative.;ENN=must be negative.';
      Text031@1056 : TextConst 'ENU=You cannot define item tracking on this line because it is linked to production order %1.;ENN=You cannot define item tracking on this line because it is linked to production order %1.';
      Text032@1017 : TextConst 'ENU=%1 must not be greater than the sum of %2 and %3.;ENN=%1 must not be greater than the sum of %2 and %3.';
      Text033@1078 : TextConst 'ENU="Warehouse ";ENN="Warehouse "';
      Text034@1079 : TextConst 'ENU="Inventory ";ENN="Inventory "';
      Text035@1048 : TextConst 'ENU=%1 units for %2 %3 have already been returned or transferred. Therefore, only %4 units can be returned.;ENN=%1 units for %2 %3 have already been returned or transferred. Therefore, only %4 units can be returned.';
      Text037@1082 : TextConst 'ENU=cannot be %1.;ENN=cannot be %1.';
      Text038@1083 : TextConst 'ENU=cannot be less than %1.;ENN=cannot be less than %1.';
      Text039@1084 : TextConst 'ENU=cannot be more than %1.;ENN=cannot be more than %1.';
      Text040@1090 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ENN=You must use form %1 to enter %2, if item tracking is used.';
      Text99000000@1021 : TextConst 'ENU=You cannot change %1 when the purchase order is associated to a production order.;ENN=You cannot change %1 when the purchase order is associated to a production order.';
      PurchHeader@1022 : Record 38;
      PurchLine2@1023 : Record 39;
      TempPurchLine@1024 : Record 39;
      GLAcc@1025 : Record 15;
      Item@1026 : Record 27;
      Currency@1027 : Record 4;
      CurrExchRate@1028 : Record 330;
      ItemTranslation@1029 : Record 30;
      SalesOrderLine@1033 : Record 37;
      VATPostingSetup@1034 : Record 325;
      StdTxt@1035 : Record 7;
      FA@1036 : Record 5600;
      FADeprBook@1037 : Record 5612;
      FASetup@1038 : Record 5603;
      GenBusPostingGrp@1039 : Record 250;
      GenProdPostingGrp@1040 : Record 251;
      ReservEntry@1041 : Record 337;
      UnitOfMeasure@1043 : Record 204;
      ItemCharge@1044 : Record 5800;
      ItemChargeAssgntPurch@1045 : Record 5805;
      SKU@1046 : Record 5700;
      WorkCenter@1047 : Record 99000754;
      PurchasingCode@1049 : Record 5721;
      InvtSetup@1050 : Record 313;
      Location@1051 : Record 14;
      GLSetup@1074 : Record 98;
      ReturnReason@1068 : Record 6635;
      ItemVend@1031 : Record 99;
      CalChange@1062 : Record 7602;
      JobJnlLine@1071 : TEMPORARY Record 210;
      PurchSetup@1095 : Record 312;
      PurchHeader1@1500033 : Record 38;
      Reservation@1052 : Page 498;
      SalesTaxCalculate@1057 : Codeunit 398;
      ReservEngineMgt@1058 : Codeunit 99000831;
      ReservePurchLine@1059 : Codeunit 99000834;
      UOMMgt@1060 : Codeunit 5402;
      AddOnIntegrMgt@1061 : Codeunit 5403;
      DimMgt@1064 : Codeunit 408;
      DistIntegration@1065 : Codeunit 5702;
      NonstockItemMgt@1066 : Codeunit 5703;
      WhseValidateSourceLine@1067 : Codeunit 5777;
      LeadTimeMgt@1069 : Codeunit 5404;
      PurchPriceCalcMgt@1030 : Codeunit 7010;
      CalendarMgmt@1032 : Codeunit 7600;
      CheckDateConflict@1013 : Codeunit 99000815;
      DeferralUtilities@1081 : Codeunit 1720;
      ServiceTaxMgt@1500012 : Codeunit 16471;
      GSTManagement@1500028 : Codeunit 16401;
      GSTApplicationManagement@1500035 : Codeunit 16403;
      TrackingBlocked@1070 : Boolean;
      StatusCheckSuspended@1073 : Boolean;
      GLSetupRead@1075 : Boolean;
      UnitCostCurrency@1063 : Decimal;
      UpdateFromVAT@1087 : Boolean;
      Text042@1088 : TextConst 'ENU=You cannot return more than the %1 units that you have received for %2 %3.;ENN=You cannot return more than the %1 units that you have received for %2 %3.';
      Text043@1089 : TextConst 'ENU=must be positive when %1 is not 0.;ENN=must be positive when %1 is not 0.';
      Text044@1080 : TextConst 'ENU=You cannot change %1 because this purchase order is associated with %2 %3.;ENN=You cannot change %1 because this purchase order is associated with %2 %3.';
      Text046@1091 : TextConst 'ENU=Microsoft Dynamics NAV will not update %1 when changing %2 because a prepayment invoice has been posted. Do you want to continue?;ENN=Microsoft Dynamics NAV will not update %1 when changing %2 because a prepayment invoice has been posted. Do you want to continue?';
      Text047@1092 : TextConst 'ENU=%1 can only be set when %2 is set.;ENN=%1 can only be set when %2 is set.';
      Text048@1093 : TextConst 'ENU=%1 cannot be changed when %2 is set.;ENN=%1 cannot be changed when %2 is set.';
      PrePaymentLineAmountEntered@1042 : Boolean;
      Text049@1085 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ENN=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text050@1086 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      Text051@1012 : TextConst 'ENU=must have the same sign as the receipt;ENN=must have the same sign as the receipt';
      Text052@1053 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in receipt %1.;ENN=The quantity that you are trying to invoice is greater than the quantity in receipt %1.';
      Text053@1054 : TextConst 'ENU=must have the same sign as the return shipment;ENN=must have the same sign as the return shipment';
      Text054@1055 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.;ENN=The quantity that you are trying to invoice is greater than the quantity in return shipment %1.';
      TDSNOD@1280001 : Record 13726;
      NODLines@1280000 : Record 13785;
      Text13700@1280004 : TextConst 'ENU=You are not allowed to select this Nature of deduction.;ENN=You are not allowed to select this Nature of deduction.';
      Text13701@1500009 : TextConst 'ENU=BED AMOUNT;ENN=BED AMOUNT';
      Text13702@1500008 : TextConst 'ENU=AED AMOUNT;ENN=AED AMOUNT';
      Text13703@1500007 : TextConst 'ENU=SED AMOUNT;ENN=SED AMOUNT';
      Text13704@1500006 : TextConst 'ENU=SAED AMOUNT;ENN=SAED AMOUNT';
      Text13705@1500005 : TextConst 'ENU=CESS AMOUNT;ENN=CESS AMOUNT';
      Text13706@1500004 : TextConst 'ENU=NCCD AMOUNT;ENN=NCCD AMOUNT';
      Text13707@1500003 : TextConst 'ENU=ECESS AMOUNT;ENN=ECESS AMOUNT';
      Text13708@1500002 : TextConst 'ENU=ADET AMOUNT;ENN=ADET AMOUNT';
      Text13709@1500001 : TextConst 'ENU=LINE AMOUNT;ENN=LINE AMOUNT';
      Text13710@1500000 : TextConst 'ENU=ADE AMOUNT;ENN=ADE AMOUNT';
      TDSBuf@1280005 : ARRAY [2] OF TEMPORARY Record 13714;
      TDSSetup@1280008 : Record 13728;
      Text16362@1280009 : TextConst 'ENU="No Transaction allowed; Status is Closed.";ENN="No Transaction allowed; Status is Closed."';
      Text16363@1280010 : TextConst 'ENU=Invalid Quantity.;ENN=Invalid Quantity.';
      Text16501@1500017 : TextConst 'ENU=Item %1 is short by %2 quantity in RG 23 D. Please adjust the quantity to proceed.;ENN=Item %1 is short by %2 quantity in RG 23 D. Please adjust the quantity to proceed.';
      CFactor@1500015 : Decimal;
      Text13713@1500016 : TextConst 'ENU=SHE CESS AMOUNT;ENN=SHE CESS AMOUNT';
      CompanyInfo@1500023 : Record 79;
      CompanyInfoRead@1500018 : Boolean;
      Text13714@1500032 : TextConst 'ENU=ASSESSABLE VALUE;ENN=ASSESSABLE VALUE';
      Text16502@1500019 : TextConst 'ENU=ADC VAT AMOUNT;ENN=ADC VAT AMOUNT';
      Text16503@1500020 : TextConst 'ENU=BCD AMOUNT;ENN=BCD AMOUNT';
      Text16504@1500021 : TextConst 'ENU=CIF AMOUNT;ENN=CIF AMOUNT';
      ExcisePostingSetup@1500022 : Record 13711;
      PurchHeader2@1500027 : Record 38;
      Text16505@1500024 : TextConst 'ENU=CUST. ECESS AMOUNT;ENN=CUST. ECESS AMOUNT';
      Text16506@1500025 : TextConst 'ENU=CUST. SHECESS AMOUNT;ENN=CUST. SHECESS AMOUNT';
      Text16507@1500026 : TextConst 'ENU="Type must be G/L Account or Item in Purchase Line Document Type=%1'',Document No.=%2,Line No.=%3.";ENN="Type must be G/L Account or Item in Purchase Line Document Type=%1'',Document No.=%2,Line No.=%3."';
      Text16508@1500029 : TextConst 'ENU="To view Excise Detail the Structure should include Excise. ";ENN="To view Excise Detail the Structure should include Excise. "';
      Text16509@1500030 : TextConst 'ENU="You cannot deduct TDS for negative line amounts.\ Document Type=%1'''',Document No.=%2,Line No.=%3.";ENN="You cannot deduct TDS for negative line amounts.\ Document Type=%1'''',Document No.=%2,Line No.=%3."';
      TaxAmount@1500013 : Decimal;
      AssessableValueCalc@1500069 : Boolean;
      Text16510@1500031 : TextConst 'ENU=RG register already created for the receipts. In order to make the changes reflect in the RG registers, please use the ''Get Receipt lines'' functionality from the invoice and then post.;ENN=RG register already created for the receipts. In order to make the changes reflect in the RG registers, please use the ''Get Receipt lines'' functionality from the invoice and then post.';
      TempRG23DRemainder@1500370 : TEMPORARY Record 16537;
      TempRG23DConsumedInCurrDoc@1500371 : TEMPORARY Record 16537;
      BEDAmt@1500372 : Decimal;
      "AED(GSI)Amt"@1500373 : Decimal;
      "AED(TTA)Amt"@1500374 : Decimal;
      SEDAmt@1500375 : Decimal;
      SAEDAmt@1500376 : Decimal;
      CESSAmt@1500377 : Decimal;
      NCCDAmt@1500378 : Decimal;
      eCessAmt@1500379 : Decimal;
      ADETAmt@1500380 : Decimal;
      ADEAmt@1500381 : Decimal;
      SHECessAmt@1500382 : Decimal;
      ADCVATAmt@1500383 : Decimal;
      InvtBuffer@1500384 : ARRAY [2] OF TEMPORARY Record 307;
      Text16512@1500010 : TextConst 'ENU=The document type for posting transactions that have TDS specified must be Invoice or Order.;ENN=The document type for posting transactions that have TDS specified must be Invoice or Order.';
      Text16511@1500011 : TextConst 'ENU=The document type for posting transactions that have Work Tax specified must be Invoice or Order.;ENN=The document type for posting transactions that have Work Tax specified must be Invoice or Order.';
      Text16513@1500061 : TextConst 'ENU=You are not allowed to select this Nature of Remittance.;ENN=You are not allowed to select this Nature of Remittance.';
      PurchSetupRead@1096 : Boolean;
      GSTGroup@1500014 : Record 16404;
      GSTCreditTypeErr@1500135 : TextConst 'ENU=You cannot change GST Credit type because already Quantity has received.;ENN=You cannot change GST Credit type because already Quantity has received.';
      ApplicationType@1500036 : 'Online,Offline';
      NonGSTInvTypeErr@1500034 : TextConst 'ENU=You cannot enter Non-GST Invoice Type for any GST document.;ENN=You cannot enter Non-GST Invoice Type for any GST document.';
      TypeISDErr@1500038 : TextConst '@@@="%1 = Type, %2 = Field Name, %3 = GST Group Type";ENU=You must select %1 whose %2 is %3 when GST Input Service Distribution is checked.;ENN=You must select %1 whose %2 is %3 when GST Input Service Distribution is checked.';
      AppliesToDocErr@1500039 : TextConst 'ENU=You must remove Applies-to Doc No. before modifying Exempted value.;ENN=You must remove Applies-to Doc No. before modifying Exempted value.';
      GSTGroupCodeEqualErr@1500040 : TextConst '@@@="%1 = Integer, %2 = Option, %3 = Code";ENU=GST Group Code and TDS must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.;ENN=GST Group Code and TDS must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.';
      GSTVendorTypeErr@1500136 : TextConst '@@@="%1 = GST Vendor Type, %2 = GST Vendor Type";ENU=GST Vendor Type must be %1 or %2.;ENN=GST Vendor Type must be %1 or %2.';
      ChargeItemErr@1500037 : TextConst '@@@="%1 = Type";ENU=You cannot select %1 when GST Input Service Distribution is checked.;ENN=You cannot select %1 when GST Input Service Distribution is checked.';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Shipped (Base)";
        "Return Qty. Shipped Not Invd." := "Return Qty. Shipped" - "Quantity Invoiced";
        "Ret. Qty. Shpd Not Invd.(Base)" := "Return Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Received (Base)";
        "Qty. Rcd. Not Invoiced" := "Quantity Received" - "Quantity Invoiced";
        "Qty. Rcd. Not Invoiced (Base)" := "Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END;
      "Completely Received" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@19();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Outstanding Amt. Ex. VAT (LCY)" := 0;
        "Amt. Rcd. Not Invoiced" := 0;
        "Amt. Rcd. Not Invoiced (LCY)" := 0;
        "Return Shpd. Not Invd." := 0;
        "Return Shpd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetPurchHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Shpd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Shipped Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Amt. Rcd. Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Rcd. Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToReceive@15();
    BEGIN
      GetPurchSetup;
      IF (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Remainder) OR
         ("Document Type" = "Document Type"::Invoice)
      THEN BEGIN
        "Qty. to Receive" := "Outstanding Quantity";
        "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Qty. to Receive" <> 0 THEN
          "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToShip@5803();
    BEGIN
      GetPurchSetup;
      IF (PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Remainder) OR
         ("Document Type" = "Document Type"::"Credit Memo")
      THEN BEGIN
        "Return Qty. to Ship" := "Outstanding Quantity";
        "Return Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Return Qty. to Ship" <> 0 THEN
          "Return Qty. to Ship (Base)" := CalcBaseQty("Return Qty. to Ship");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@46();
    BEGIN
      "Appl.-to Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped" + "Return Qty. to Ship" - "Quantity Invoiced");

      EXIT("Quantity Received" + "Qty. to Receive" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@17() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Shipped (Base)" + "Return Qty. to Ship (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Received (Base)" + "Qty. to Receive (Base)" - "Qty. Invoiced (Base)");
    END;

    PROCEDURE CalcInvDiscToInvoice@33();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@7();
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Prod. Order No.",'');
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE(Positive,TRUE);
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN
        VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
    END;

    PROCEDURE SetPurchHeader@12(NewPurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader := NewPurchHeader;

      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        Currency.GET(PurchHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetPurchHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> PurchHeader."Document Type") OR ("Document No." <> PurchHeader."No.") THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF PurchHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          PurchHeader.TESTFIELD("Currency Factor");
          Currency.GET(PurchHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@4();
    BEGIN
      TESTFIELD("No.");
      IF Item."No." <> "No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE UpdateDirectUnitCost@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CurrFieldNo <> 0) AND ("Prod. Order No." <> '') THEN
        UpdateAmounts;

      IF ((CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0)) OR
         ("Prod. Order No." <> '')
      THEN
        EXIT;

      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,CalledByFieldNo);
        PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
        VALIDATE("Direct Unit Cost");

        IF CalledByFieldNo IN [FIELDNO("No."),FIELDNO("Variant Code"),FIELDNO("Location Code")] THEN
          UpdateItemReference;
      END;
    END;

    PROCEDURE UpdateUnitCost@5();
    VAR
      DiscountAmountPerQty@1000 : Decimal;
    BEGIN
      GetPurchHeader;
      GetGLSetup;
      IF Quantity = 0 THEN
        DiscountAmountPerQty := 0
      ELSE
        DiscountAmountPerQty :=
          ROUND(("Line Discount Amount" + "Inv. Discount Amount") / Quantity,
            GLSetup."Unit-Amount Rounding Precision");

      IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN
        "Unit Cost" := 0
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) / (1 + "VAT %" / 100) +
            GetOverheadRateFCY - "VAT Difference"
        ELSE
          "Unit Cost" :=
            ("Direct Unit Cost" - DiscountAmountPerQty) * (1 + "Indirect Cost %" / 100) +
            GetOverheadRateFCY;

      IF PurchHeader."Currency Code" <> '' THEN BEGIN
        PurchHeader.TESTFIELD("Currency Factor");
        "Unit Cost (LCY)" :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            GetDate,"Currency Code",
            "Unit Cost",PurchHeader."Currency Factor");
      END ELSE
        "Unit Cost (LCY)" := "Unit Cost";

      IF (Type = Type::Item) AND ("Prod. Order No." = '') THEN BEGIN
        GetItem;
        IF Item."Costing Method" = Item."Costing Method"::Standard THEN BEGIN
          IF GetSKU THEN
            "Unit Cost (LCY)" := SKU."Unit Cost" * "Qty. per Unit of Measure"
          ELSE
            "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
        END;
      END;

      "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",GLSetup."Unit-Amount Rounding Precision");
      IF PurchHeader."Currency Code" <> '' THEN
        Currency.TESTFIELD("Unit-Amount Rounding Precision");
      "Unit Cost" := ROUND("Unit Cost",Currency."Unit-Amount Rounding Precision");

      UpdateSalesCost;

      IF JobTaskIsSet AND NOT UpdateFromVAT AND NOT "Prepayment Line" THEN BEGIN
        CreateTempJobJnlLine(FALSE);
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
        UpdateJobPrices;
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT;
      GetPurchHeader;

      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := TRUE;

      IF "Line Amount" <> xRec."Line Amount" THEN BEGIN
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      IF "Line Amount" <> ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" :=
          ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      UpdateTaxAmounts;
      UpdateGSTAmounts("GST Base Amount");
      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
          IF "Direct Unit Cost" < 0 THEN
            FIELDERROR("Direct Unit Cost",STRSUBSTNO(Text043,FIELDCAPTION("Prepayment %")));
        END;
        IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text037,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text039,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END ELSE
          IF (CurrFieldNo <> 0) AND ("Line Amount" <> xRec."Line Amount") AND
             ("Prepmt. Amt. Inv." <> 0) AND ("Prepayment %" = 100)
          THEN BEGIN
            IF "Line Amount" < xRec."Line Amount" THEN
              FIELDERROR("Line Amount",STRSUBSTNO(Text038,xRec."Line Amount"));
            FIELDERROR("Line Amount",STRSUBSTNO(Text039,xRec."Line Amount"));
          END;
      END;
      UpdateVATAmounts;
      IF VATBaseAmount <> "VAT Base Amount" THEN
        LineAmountChanged := TRUE;

      IF LineAmountChanged THEN BEGIN
        UpdateDeferralAmounts;
        LineAmountChanged := FALSE;
      END;

      InitOutstandingAmount;

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      PurchLine2@1000 : Record 39;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetPurchHeader;
      PurchLine2.SETRANGE("Document Type","Document Type");
      PurchLine2.SETRANGE("Document No.","Document No.");
      PurchLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          PurchLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          PurchLine2.SETFILTER(Amount,'<%1',0);
      PurchLine2.SETRANGE("VAT Identifier","VAT Identifier");
      PurchLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF NOT PurchLine2.ISEMPTY THEN BEGIN
            PurchLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := PurchLine2."Line Amount";
            TotalInvDiscAmount := PurchLine2."Inv. Discount Amount";
            TotalAmount := PurchLine2.Amount;
            TotalAmountInclVAT := PurchLine2."Amount Including VAT";
            TotalQuantityBase := PurchLine2."Quantity (Base)";
          END;

        IF PurchHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - PurchHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                PurchHeader.TESTFIELD("VAT Base Discount %",0);
                "Amount Including VAT" :=
                  ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                IF "Use Tax" THEN
                  Amount := "Amount Including VAT"
                ELSE
                  Amount :=
                    ROUND(
                      SalesTaxCalculate.ReverseCalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmount;
                "VAT Base Amount" := Amount;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                IF "Use Tax" THEN
                  "Amount Including VAT" := Amount
                ELSE
                  "Amount Including VAT" :=
                    TotalAmount + Amount +
                    ROUND(
                      SalesTaxCalculate.CalculateTax(
                        "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
                        TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                        PurchHeader."Currency Factor"),
                      Currency."Amount Rounding Precision") -
                    TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
    END;

    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record 252;
      GLAcc@1000 : Record 15;
    BEGIN
      IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        IF GenPostingSetup."Purch. Prepayments Account" <> '' THEN BEGIN
          GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        END ELSE
          CLEAR(VATPostingSetup);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        IF "Prepmt. VAT Calc. Type" IN
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        THEN
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      END;
    END;

    LOCAL PROCEDURE UpdateSalesCost@6();
    BEGIN
      CASE TRUE OF
        "Sales Order Line No." <> 0:
          // Drop Shipment
          SalesOrderLine.GET(
            SalesOrderLine."Document Type"::Order,
            "Sales Order No.",
            "Sales Order Line No.");
        "Special Order Sales Line No." <> 0:
          // Special Order
          BEGIN
            IF NOT
               SalesOrderLine.GET(
                 SalesOrderLine."Document Type"::Order,
                 "Special Order Sales No.",
                 "Special Order Sales Line No.")
            THEN
              EXIT;
          END;
        ELSE
          EXIT;
      END;
      SalesOrderLine."Unit Cost (LCY)" := "Unit Cost (LCY)" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine."Unit Cost" := "Unit Cost" * SalesOrderLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure";
      SalesOrderLine.VALIDATE("Unit Cost (LCY)");
      SalesOrderLine.MODIFY;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@10();
    VAR
      LocalGLAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      IF "FA Posting Type" = "FA Posting Type"::" " THEN
        "FA Posting Type" := "FA Posting Type"::"Acquisition Cost";
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
        FAPostingGr.TESTFIELD("Acquisition Cost Account");
        LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account");
      END ELSE BEGIN
        FAPostingGr.TESTFIELD("Maintenance Expense Account");
        LocalGLAcc.GET(FAPostingGr."Maintenance Expense Account");
      END;
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    PROCEDURE UpdateUOMQtyPerStockQty@9();
    BEGIN
      GetItem;
      "Unit Cost (LCY)" := Item."Unit Cost" * "Qty. per Unit of Measure";
      "Unit Price (LCY)" := Item."Unit Price" * "Qty. per Unit of Measure";
      GetPurchHeader;
      IF PurchHeader."Currency Code" <> '' THEN
        "Unit Cost" :=
          CurrExchRate.ExchangeAmtLCYToFCY(
            GetDate,PurchHeader."Currency Code",
            "Unit Cost (LCY)",PurchHeader."Currency Factor")
      ELSE
        "Unit Cost" := "Unit Cost (LCY)";
      UpdateDirectUnitCost(FIELDNO("Unit of Measure Code"));
    END;

    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("Prod. Order No.",'');
      TESTFIELD("No.");
      CLEAR(Reservation);
      Reservation.SetPurchLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReservePurchLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE GetDate@28() : Date;
    BEGIN
      IF PurchHeader."Posting Date" <> 0D THEN
        EXIT(PurchHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE Signed@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(-Value);
      END;
    END;

    PROCEDURE BlanketOrderLookup@36();
    BEGIN
      PurchLine2.RESET;
      PurchLine2.SETCURRENTKEY("Document Type",Type,"No.");
      PurchLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      PurchLine2.SETRANGE(Type,Type);
      PurchLine2.SETRANGE("No.","No.");
      PurchLine2.SETRANGE("Pay-to Vendor No.","Pay-to Vendor No.");
      PurchLine2.SETRANGE("Buy-from Vendor No.","Buy-from Vendor No.");
      IF PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine2) = ACTION::LookupOK THEN BEGIN
        PurchLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := PurchLine2."Document No.";
        VALIDATE("Blanket Order Line No.",PurchLine2."Line No.");
      END;
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReservePurchLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      IF "Prod. Order No." <> '' THEN
        ERROR(Text031,"Prod. Order No.");

      TESTFIELD("Quantity (Base)");

      ReservePurchLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1008 : Record 242;
      TableID@1009 : ARRAY [10] OF Integer;
      No@1010 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetPurchHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",DATABASE::Vendor);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    PROCEDURE LookupShortcutDimCode@30(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      TESTFIELD("No.");
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5805;
      AssignItemChargePurch@1001 : Codeunit 5805;
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      GetPurchHeader;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND
         ("Line Discount Amount" = 0) AND
         (NOT PurchHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF PurchHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntPurch.FINDLAST THEN BEGIN
        ItemChargeAssgntPurch."Document Type" := "Document Type";
        ItemChargeAssgntPurch."Document No." := "Document No.";
        ItemChargeAssgntPurch."Document Line No." := "Line No.";
        ItemChargeAssgntPurch."Item Charge No." := "No.";
        ItemChargeAssgntPurch."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      END;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Return Shipment No.")
      ELSE
        AssignItemChargePurch.CreateDocChargeAssgnt(ItemChargeAssgntPurch,"Receipt No.");
      CLEAR(AssignItemChargePurch);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      IF "Document Type" = "Document Type"::"Blanket Order" THEN
        EXIT;

      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text032,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntPurch."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND ("Unit Cost" <> xRec."Unit Cost") THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION("Unit Cost"));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF (CurrFieldNo <> 0) AND (Quantity <> xRec.Quantity) THEN BEGIN
        ItemChargeAssgntPurch.SETFILTER("Qty. Assigned",'<>0');
        IF ItemChargeAssgntPurch.FINDFIRST THEN
          ERROR(Text022,
            FIELDCAPTION(Quantity));
        ItemChargeAssgntPurch.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        GetPurchHeader;
        TotalAmtToAssign := CalcTotalAmtToAssign(TotalQtyToAssign);
        REPEAT
          ShareOfVAT := 1;
          IF PurchHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntPurch."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntPurch."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntPurch."Amount to Assign" :=
              ROUND(ItemChargeAssgntPurch."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntPurch."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
          END;
          ItemChargeAssgntPurch.MODIFY;
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF DocType <> "Document Type"::"Blanket Order" THEN
        IF "Quantity Invoiced" <> 0 THEN BEGIN
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        END;
      ItemChargeAssgntPurch.RESET;
      ItemChargeAssgntPurch.SETRANGE("Document Type",DocType);
      ItemChargeAssgntPurch.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntPurch.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Purchase Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      IF NOT PurchHeader.GET("Document Type","Document No.") THEN BEGIN
        PurchHeader."No." := '';
        PurchHeader.INIT;
      END;
      IF PurchHeader."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));

      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetPurchHeader;
      IF NOT "System-Created Entry" THEN
        IF Type <> Type::" " THEN
          PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@42(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateLeadTimeFields@11();
    VAR
      StartingDate@1000 : Date;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        IF "Document Type" IN
           ["Document Type"::Quote,"Document Type"::Order]
        THEN
          StartingDate := PurchHeader."Order Date"
        ELSE
          StartingDate := PurchHeader."Posting Date";

        EVALUATE("Lead Time Calculation",
          LeadTimeMgt.PurchaseLeadTime(
            "No.","Location Code","Variant Code",
            "Buy-from Vendor No."));
        IF FORMAT("Lead Time Calculation") = '' THEN
          "Lead Time Calculation" := PurchHeader."Lead Time Calculation";
        EVALUATE("Safety Lead Time",LeadTimeMgt.SafetyLeadTime("No.","Location Code","Variant Code"));
      END;
    END;

    PROCEDURE GetUpdateBasicDates@43();
    BEGIN
      GetPurchHeader;
      IF PurchHeader."Expected Receipt Date" <> 0D THEN
        VALIDATE("Expected Receipt Date",PurchHeader."Expected Receipt Date")
      ELSE
        VALIDATE("Order Date",PurchHeader."Order Date");
    END;

    PROCEDURE UpdateDates@39();
    BEGIN
      IF "Promised Receipt Date" <> 0D THEN
        VALIDATE("Promised Receipt Date")
      ELSE
        IF "Requested Receipt Date" <> 0D THEN
          VALIDATE("Requested Receipt Date")
        ELSE
          GetUpdateBasicDates;
    END;

    PROCEDURE InternalLeadTimeDays@35(PurchDate@1002 : Date) : Text[30];
    VAR
      TotalDays@1001 : DateFormula;
    BEGIN
      EVALUATE(
        TotalDays,'<' + FORMAT(CALCDATE("Safety Lead Time",CALCDATE("Inbound Whse. Handling Time",PurchDate)) - PurchDate) + 'D>');
      EXIT(FORMAT(TotalDays));
    END;

    PROCEDURE UpdateVATOnLines@32(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF (VATAmountLine."Inv. Disc. Base Amount" = 0) OR (LineAmountToInvoice = 0) THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    IF QtyType = QtyType::General THEN
                      LineAmountToInvoice := "Line Amount"
                    ELSE
                      LineAmountToInvoice :=
                        ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;
                IF QtyType = QtyType::General THEN
                  IF PurchHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      IF VATAmountLine."VAT Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;

                IF QtyType = QtyType::General THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                END;
                InitOutstanding;
                IF NOT ((Type = Type::"Charge (Item)") AND ("Quantity Invoiced" <> "Qty. Assigned")) THEN BEGIN
                  SetUpdateFromVAT(TRUE);
                  UpdateUnitCost;
                END;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;
                IF ("Deferral Code" <> '') AND (DeferralAmount <> GetDeferralAmount) THEN
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@24(QtyType@1000 : 'General,Invoicing,Shipping';VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      TotalVATAmount@1008 : Decimal;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetVPGInvRoundAcc(PurchHeader)) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax","Line Amount" >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."Use Tax" := "Use Tax";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT PurchHeader.Receive) AND PurchHeader.Invoice AND (NOT "Prepayment Line"):
                        IF "Receipt No." = '' THEN BEGIN
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Rcd. Not Invoiced");
                          VATAmountLine.Quantity :=
                            VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Rcd. Not Invoiced (Base)");
                        END ELSE BEGIN
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (NOT PurchHeader.Ship) AND PurchHeader.Invoice:
                        IF "Return Shipment No." = '' THEN BEGIN
                          QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Shipped Not Invd.");
                          VATAmountLine.Quantity :=
                            VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Shpd Not Invd.(Base)");
                        END ELSE BEGIN
                          QtyToHandle := "Qty. to Invoice";
                          VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF PurchHeader."Invoice Discount Calculation" <> PurchHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Ship (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Receive (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Ship (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Receive (Base)";
                    END;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF PurchHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - PurchHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Base" := "Amount Including VAT"
                    ELSE
                      "VAT Base" :=
                        ROUND(
                          SalesTaxCalculate.ReverseCalculateTax(
                            PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                            PurchHeader."Posting Date","Amount Including VAT",Quantity,PurchHeader."Currency Factor"),
                          Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - PurchHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    IF "Use Tax" THEN
                      "VAT Amount" := 0
                    ELSE
                      "VAT Amount" :=
                        SalesTaxCalculate.CalculateTax(
                          PurchHeader."Tax Area Code","Tax Group Code",PurchHeader."Tax Liable",
                          PurchHeader."Posting Date","VAT Base",Quantity,PurchHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(PurchLine."VAT Identifier",PurchLine."VAT Calculation Type",
             PurchLine."Tax Group Code",PurchLine."Use Tax",PurchLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE UpdateWithWarehouseReceive@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            BEGIN
              IF Location.RequireReceive("Location Code") THEN
                VALIDATE("Qty. to Receive",0)
              ELSE
                VALIDATE("Qty. to Receive","Outstanding Quantity");
              IF Subcontracting THEN
                VALIDATE("Qty. to Receive",0);
            END;
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Receive",0)
            ELSE
              VALIDATE("Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Ship",0)
            ELSE
              VALIDATE("Return Qty. to Ship","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@47();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      IF "Prod. Order No." <> '' THEN
        EXIT;
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text033;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Purchase Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text034;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.")
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE GetOverheadRateFCY@40() : Decimal;
    VAR
      QtyPerUOM@1000 : Decimal;
    BEGIN
      IF "Prod. Order No." = '' THEN
        QtyPerUOM := "Qty. per Unit of Measure"
      ELSE BEGIN
        GetItem;
        QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      END;

      EXIT(
        CurrExchRate.ExchangeAmtLCYToFCY(
          GetDate,"Currency Code","Overhead Rate" * QtyPerUOM,PurchHeader."Currency Factor"));
    END;

    PROCEDURE GetItemTranslation@44();
    BEGIN
      GetPurchHeader;
      IF ItemTranslation.GET("No.","Variant Code",PurchHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@45();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetPurchSetup@80();
    BEGIN
      IF NOT PurchSetupRead THEN
        PurchSetup.GET;
      PurchSetupRead := TRUE;
    END;

    PROCEDURE AdjustDateFormula@48(DateFormulatoAdjust@1000 : DateFormula) : Text[30];
    BEGIN
      IF FORMAT(DateFormulatoAdjust) <> '' THEN
        EXIT(FORMAT(DateFormulatoAdjust));
      EVALUATE(DateFormulatoAdjust,'<0D>');
      EXIT(FORMAT(DateFormulatoAdjust));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE RowID1@49() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Purchase Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE IsInbound@75() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" > 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" < 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@71(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    PROCEDURE CrossReferenceNoLookUp@51();
    VAR
      ItemCrossReference@1000 : Record 5717;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetPurchHeader;
        ItemCrossReference.RESET;
        ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
        ItemCrossReference.SETFILTER(
          "Cross-Reference Type",'%1|%2',
          ItemCrossReference."Cross-Reference Type"::Vendor,
          ItemCrossReference."Cross-Reference Type"::" ");
        ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',PurchHeader."Buy-from Vendor No.",'');
        IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
          VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
          PurchPriceCalcMgt.FindPurchLinePrice(PurchHeader,Rec,FIELDNO("Cross-Reference No."));
          PurchPriceCalcMgt.FindPurchLineLineDisc(PurchHeader,Rec);
          VALIDATE("Direct Unit Cost");
        END;
      END;
    END;

    PROCEDURE ItemExists@52(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    LOCAL PROCEDURE CheckApplToItemLedgEntry@53() : Code[10];
    VAR
      ItemLedgEntry@1000 : Record 32;
      ApplyRec@1005 : Record 339;
      ItemTrackingLines@1006 : Page 6510;
      ReturnedQty@1003 : Decimal;
      RemainingtobeReturnedQty@1004 : Decimal;
    BEGIN
      IF "Appl.-to Item Entry" = 0 THEN
        EXIT;

      IF "Receipt No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF Signed(Quantity) > 0 THEN
        TESTFIELD("Prod. Order No.",'');
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;
      ItemLedgEntry.GET("Appl.-to Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,TRUE);
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));

      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");

      // Track qty in both alternative and base UOM for better error checking and reporting
      IF ABS("Quantity (Base)") > ItemLedgEntry.Quantity THEN
        ERROR(
          Text042,
          ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        IF ABS("Outstanding Qty. (Base)") > ItemLedgEntry."Remaining Quantity" THEN BEGIN
          ReturnedQty := ApplyRec.Returned(ItemLedgEntry."Entry No.");
          RemainingtobeReturnedQty := ItemLedgEntry.Quantity - ReturnedQty;
          IF NOT ("Qty. per Unit of Measure" = 0) THEN BEGIN
            ReturnedQty := ROUND(ReturnedQty / "Qty. per Unit of Measure",0.00001);
            RemainingtobeReturnedQty := ROUND(RemainingtobeReturnedQty / "Qty. per Unit of Measure",0.00001);
          END;

          IF ((("Qty. per Unit of Measure" = 0) AND (RemainingtobeReturnedQty < ABS("Outstanding Qty. (Base)"))) OR
              (("Qty. per Unit of Measure" <> 0) AND (RemainingtobeReturnedQty < ABS("Outstanding Quantity"))))
          THEN
            ERROR(
              Text035,
              ReturnedQty,ItemLedgEntry.FIELDCAPTION("Document No."),
              ItemLedgEntry."Document No.",RemainingtobeReturnedQty);
        END;

      EXIT(ItemLedgEntry."Location Code");
    END;

    PROCEDURE CalcPrepaymentToDeduct@59();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetPurchHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      GetPurchHeader;
      LineAmount := ROUND(QtyToHandle * "Direct Unit Cost",Currency."Amount Rounding Precision");
      LineDiscAmount :=
        ROUND(
          LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision");
      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE JobTaskIsSet@61() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND (Type IN [Type::"G/L Account",Type::Item]));
    END;

    PROCEDURE CreateTempJobJnlLine@55(GetPrices@1001 : Boolean);
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      IF Type = Type::"G/L Account" THEN
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account")
      ELSE
        JobJnlLine.VALIDATE(Type,JobJnlLine.Type::Item);
      JobJnlLine.VALIDATE("No.","No.");
      JobJnlLine.VALIDATE(Quantity,Quantity);
      JobJnlLine.VALIDATE("Variant Code","Variant Code");
      JobJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");

      IF NOT GetPrices THEN BEGIN
        IF xRec."Line No." <> 0 THEN BEGIN
          JobJnlLine."Unit Cost" := xRec."Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := xRec."Unit Cost (LCY)";
          JobJnlLine."Unit Price" := xRec."Job Unit Price";
          JobJnlLine."Line Amount" := xRec."Job Line Amount";
          JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
          JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        END ELSE BEGIN
          JobJnlLine."Unit Cost" := "Unit Cost";
          JobJnlLine."Unit Cost (LCY)" := "Unit Cost (LCY)";
          JobJnlLine."Unit Price" := "Job Unit Price";
          JobJnlLine."Line Amount" := "Job Line Amount";
          JobJnlLine."Line Discount %" := "Job Line Discount %";
          JobJnlLine."Line Discount Amount" := "Job Line Discount Amount";
        END;
        JobJnlLine.VALIDATE("Unit Price");
      END ELSE
        JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");
    END;

    PROCEDURE UpdateJobPrices@69();
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      IF "Receipt No." = '' THEN BEGIN
        "Job Unit Price" := JobJnlLine."Unit Price";
        "Job Total Price" := JobJnlLine."Total Price";
        "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
        "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
        "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
        "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
        "Job Line Amount" := JobJnlLine."Line Amount";
        "Job Line Discount %" := JobJnlLine."Line Discount %";
        "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      END ELSE BEGIN
        PurchRcptLine.GET("Receipt No.","Receipt Line No.");
        "Job Unit Price" := PurchRcptLine."Job Unit Price";
        "Job Total Price" := PurchRcptLine."Job Total Price";
        "Job Unit Price (LCY)" := PurchRcptLine."Job Unit Price (LCY)";
        "Job Total Price (LCY)" := PurchRcptLine."Job Total Price (LCY)";
        "Job Line Amount (LCY)" := PurchRcptLine."Job Line Amount (LCY)";
        "Job Line Disc. Amount (LCY)" := PurchRcptLine."Job Line Disc. Amount (LCY)";
        "Job Line Amount" := PurchRcptLine."Job Line Amount";
        "Job Line Discount %" := PurchRcptLine."Job Line Discount %";
        "Job Line Discount Amount" := PurchRcptLine."Job Line Discount Amount";
      END;
    END;

    PROCEDURE JobSetCurrencyFactor@54();
    BEGIN
      GetPurchHeader;
      CLEAR(JobJnlLine);
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      JobJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      "Job Currency Factor" := JobJnlLine."Currency Factor";
    END;

    PROCEDURE SetUpdateFromVAT@58(UpdateFromVAT2@1000 : Boolean);
    BEGIN
      UpdateFromVAT := UpdateFromVAT2;
    END;

    PROCEDURE InitQtyToReceive2@57();
    BEGIN
      "Qty. to Receive" := "Outstanding Quantity";
      "Qty. to Receive (Base)" := "Outstanding Qty. (Base)";

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;

      IF "Job Planning Line No." <> 0 THEN
        VALIDATE("Job Planning Line No.");
    END;

    PROCEDURE ClearQtyIfBlank@87();
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        GetPurchSetup;
        IF PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank THEN BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE ShowLineComments@62();
    VAR
      PurchCommentLine@1000 : Record 43;
      PurchCommentSheet@1001 : Page 66;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      PurchCommentLine.SETRANGE("Document Type","Document Type");
      PurchCommentLine.SETRANGE("No.","Document No.");
      PurchCommentLine.SETRANGE("Document Line No.","Line No.");
      PurchCommentSheet.SETTABLEVIEW(PurchCommentLine);
      PurchCommentSheet.RUNMODAL;
    END;

    PROCEDURE SetDefaultQuantity@63();
    BEGIN
      GetPurchSetup;
      IF PurchSetup."Default Qty. to Receive" = PurchSetup."Default Qty. to Receive"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    PROCEDURE UpdatePrePaymentAmounts@65();
    VAR
      ReceiptLine@1000 : Record 121;
      PurchOrderLine@1001 : Record 39;
      PurchOrderHeader@1002 : Record 38;
    BEGIN
      IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
        EXIT;

      IF NOT ReceiptLine.GET("Receipt No.","Receipt Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE
        IF PurchOrderLine.GET(PurchOrderLine."Document Type"::Order,ReceiptLine."Order No.",ReceiptLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((PurchOrderLine."Prepmt. Amt. Inv." - PurchOrderLine."Prepmt Amt Deducted") *
                Quantity / (PurchOrderLine.Quantity - PurchOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          PurchOrderHeader.GET(PurchOrderHeader."Document Type"::Order,PurchOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;

      GetPurchHeader;
      PurchHeader.TESTFIELD("Prices Including VAT",PurchOrderHeader."Prices Including VAT");
      IF PurchHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE SetVendorItemNo@64();
    BEGIN
      GetItem;
      ItemVend.INIT;
      ItemVend."Vendor No." := "Buy-from Vendor No.";
      ItemVend."Variant Code" := "Variant Code";
      Item.FindItemVend(ItemVend,"Location Code");
      VALIDATE("Vendor Item No.",ItemVend."Vendor Item No.");
    END;

    PROCEDURE ZeroAmountLine@66(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF "Direct Unit Cost" = 0 THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Expected Receipt Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    PROCEDURE GetVPGInvRoundAcc@72(VAR PurchHeader@1002 : Record 38) : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VendorPostingGroup@1001 : Record 93;
    BEGIN
      GetPurchSetup;
      IF PurchSetup."Invoice Rounding" THEN
        IF Vendor.GET(PurchHeader."Pay-to Vendor No.") THEN
          VendorPostingGroup.GET(Vendor."Vendor Posting Group");

      EXIT(VendorPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CheckReceiptRelation@94();
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.GET("Receipt No.","Receipt Line No.");
      IF (Quantity * PurchRcptLine."Qty. Rcd. Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text051);
      IF ABS(Quantity) > ABS(PurchRcptLine."Qty. Rcd. Not Invoiced") THEN
        ERROR(Text052,PurchRcptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetShptRelation@74();
    VAR
      ReturnShptLine@1000 : Record 6651;
    BEGIN
      ReturnShptLine.GET("Return Shipment No.","Return Shipment Line No.");
      IF (Quantity * (ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text053);
      IF ABS(Quantity) > ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced") THEN
        ERROR(Text054,ReturnShptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@73();
    BEGIN
      IF IsReceivedShippedItemDimChanged THEN
        ConfirmReceivedShippedItemDimChange;
    END;

    PROCEDURE IsReceivedShippedItemDimChanged@89() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) AND
        (("Qty. Rcd. Not Invoiced" <> 0) OR ("Return Qty. Shipped Not Invd." <> 0)));
    END;

    PROCEDURE ConfirmReceivedShippedItemDimChange@90() : Boolean;
    BEGIN
      IF NOT CONFIRM(Text049,TRUE,TABLECAPTION) THEN
        ERROR(Text050);

      EXIT(TRUE);
    END;

    PROCEDURE InitType@22();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        PurchHeader.GET("Document Type","Document No.");
        IF (PurchHeader.Status = PurchHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    PROCEDURE UpdateTaxAmounts@1280007();
    VAR
      ServiceTaxSetup@1280002 : Record 16472;
      IndianSalesTaxCalculate@1500001 : Codeunit 13704;
      LineTaxAmount@1500002 : Decimal;
      ServiceTaxAbatement@1500004 : Decimal;
      ItemChargeAssgntPurch2@1500012 : Record 5805;
      DetailedTaxEntryBuffer@1500013 : Record 16480;
      DefermentBuffer@1500014 : Record 16532;
      TotalTaxAmount@1500005 : Decimal;
      AmountonInventory@1500011 : Decimal;
      InputTaxCreditAmount@1500010 : Decimal;
      VATablePurchTaxAmount@1500009 : Decimal;
      TotalAmountonInventory@1500006 : Decimal;
      TotalInputTaxCreditAmount@1500007 : Decimal;
      TotalVATablePurchTaxAmount@1500008 : Decimal;
    BEGIN
      TaxAreaUpdate;
      IF (Quantity = 0 ) OR ("Direct Unit Cost" = 0) THEN BEGIN
        "Amount Added to Tax Base" := 0;
        "Amount Added to Excise Base" := 0;
        "Service Tax Base" := 0;
      END;

      IF "Amount Added to Excise Base" <> 0 THEN
        "Excise Base Amount" := "Amount Added to Excise Base";
      UpdateExciseAmount;
      IF "Amount Added to Tax Base" <> 0 THEN BEGIN
        "Tax Liable" := PurchHeader."Tax Liable";
        "Tax Base Amount" := "Amount Added to Tax Base";
      END ELSE BEGIN
        "Tax Liable" := FALSE;
        "Tax Base Amount" := ROUND(("Line Amount" - "Inv. Discount Amount"),Currency."Amount Rounding Precision");
        "Amount To Vendor" :=
          "Line Amount" - "Inv. Discount Amount" + "Charges To Vendor" - "Bal. TDS Including SHE CESS" + FullServiceTaxAmount +
          FullServiceTaxSBCAmount + KKCessAmount;
        IF NOT (CVD AND GetCVDPayableToThirdParty(Rec)) THEN
          "Amount To Vendor" += "Excise Amount";
        "Amount To Vendor" := ROUND("Amount To Vendor",Currency."Amount Rounding Precision");
      END;

      IndianSalesTaxCalculate.SetCurrency("Currency Code" <> '');
      LineTaxAmount := ROUND(IndianSalesTaxCalculate.CalculateTax(
            "Tax Area Code","Tax Group Code","Tax Liable",PurchHeader."Posting Date",
            "Tax Base Amount",Quantity,PurchHeader."Currency Factor","Form Code","Tax %"),Currency."Amount Rounding Precision");

      AmountonInventory := 0;
      InputTaxCreditAmount := 0;
      VATablePurchTaxAmount := 0;
      TotalAmountonInventory := 0;
      TotalInputTaxCreditAmount := 0;
      TotalVATablePurchTaxAmount := 0;
      TotalTaxAmount := 0;
      TaxAmount := 0;
      IF LineTaxAmount <> 0 THEN BEGIN
        IF Type <> Type::"Charge (Item)" THEN
          IndianSalesTaxCalculate.GetInputTaxCredit(Rec,"Amount Loaded on Inventory",
            "Input Tax Credit Amount","VAT able Purchase Tax Amount",TRUE,TaxAmount)
        ELSE BEGIN
          DetailedTaxEntryBuffer.RESET;
          DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
          DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
          DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
          DetailedTaxEntryBuffer.DELETEALL;

          DefermentBuffer.RESET;
          DefermentBuffer.SETRANGE("Document No.","Document No.");
          DefermentBuffer.SETRANGE("Line No.","Line No.");
          DefermentBuffer.DELETEALL;

          ItemChargeAssgntPurch2.RESET;
          ItemChargeAssgntPurch2.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntPurch2.SETRANGE("Document No.","Document No.");
          ItemChargeAssgntPurch2.SETRANGE("Document Line No.","Line No.");
          ItemChargeAssgntPurch2.SETFILTER("Qty. to Assign",'<>0');
          IF ItemChargeAssgntPurch2.FINDSET THEN BEGIN
            REPEAT
              IndianSalesTaxCalculate.GetItemChargeInputTaxCredit(Rec,AmountonInventory,
                InputTaxCreditAmount,VATablePurchTaxAmount,TRUE,TaxAmount,ItemChargeAssgntPurch2);
              TotalTaxAmount += TaxAmount;
              TotalAmountonInventory += AmountonInventory;
              TotalInputTaxCreditAmount += InputTaxCreditAmount;
              TotalVATablePurchTaxAmount += VATablePurchTaxAmount;
            UNTIL ItemChargeAssgntPurch2.NEXT = 0;
            "Amount Loaded on Inventory" := IndianSalesTaxCalculate.RoundVATPrecision(TotalAmountonInventory);
            "Input Tax Credit Amount" := IndianSalesTaxCalculate.RoundVATPrecision(TotalInputTaxCreditAmount);
            "VAT able Purchase Tax Amount" := TotalVATablePurchTaxAmount;
            TaxAmount := IndianSalesTaxCalculate.RoundVATPrecision(TotalTaxAmount);
          END ELSE
            IndianSalesTaxCalculate.GetInputTaxCredit(Rec,"Amount Loaded on Inventory",
              "Input Tax Credit Amount","VAT able Purchase Tax Amount",TRUE,TaxAmount);
        END;
      END;

      "Tax Amount" := TaxAmount;
      "Amount Including Tax" := ("Tax Base Amount" + "Tax Amount");

      IF "Tax Base Amount" = 0 THEN
        "Tax %" := 0;

      IF GetServiceTaxSetup(ServiceTaxSetup) THEN BEGIN
        ServiceTaxAbatement := CalculateAbatementPercentage(ServiceTaxSetup);
        CalculateServiceTaxAmounts(ServiceTaxSetup,ServiceTaxAbatement)
      END ELSE
        ClearServiceTaxAmounts;
    END;

    LOCAL PROCEDURE GetServiceTaxSetup@1500017(VAR ServiceTaxSetup@1500000 : Record 16472) : Boolean;
    VAR
      PostingDate@1500001 : Date;
    BEGIN
      IF PurchHeader."Posting Date" = 0D THEN
        PostingDate := WORKDATE
      ELSE
        PostingDate := PurchHeader."Posting Date";
      EXIT(ServiceTaxSetup.FindOnDate("Service Tax Group",PostingDate));
    END;

    LOCAL PROCEDURE ClearServiceTaxAmounts@1500011();
    BEGIN
      "Service Tax Amount" := 0;
      "Service Tax eCess Amount" := 0;
      "Service Tax SHE Cess Amount" := 0;
      "Service Tax SBC Amount" :=0;
      "Service Tax SBC %" := 0;
      "KK Cess%" := 0;
      "KK Cess Amount" := 0;
    END;

    LOCAL PROCEDURE CalculateServiceTaxAmounts@1500031(ServiceTaxSetup@1500000 : Record 16472;ServiceTaxAbatement@1500001 : Decimal);
    BEGIN
      "Service Tax Amount" := ROUND(
        "Service Tax Base" * ServiceTaxSetup."Service Tax %" * (100 - ServiceTaxAbatement) / 100 / 100);
      "Service Tax eCess Amount" := ROUND("Service Tax Amount" * ServiceTaxSetup."eCess %" / 100);
      "Service Tax SHE Cess Amount" := ROUND("Service Tax Amount" * ServiceTaxSetup."SHE Cess %" / 100);
      "Service Tax SBC Amount" :=  ROUND(
        "Service Tax Base" * ServiceTaxSetup."SB Cess%" * (100 - ServiceTaxAbatement) / 100 / 100);
      "Service Tax SBC %" := ServiceTaxSetup."SB Cess%";
      "KK Cess Amount" :=  ROUND(
        "Service Tax Base" * ServiceTaxSetup."KK Cess%" * (100 - ServiceTaxAbatement) / 100 / 100);
      "KK Cess%" := ServiceTaxSetup."KK Cess%";
    END;

    LOCAL PROCEDURE CalculateAbatementPercentage@1500019(ServiceTaxSetup@1500017 : Record 16472) : Decimal;
    VAR
      ServiceTaxRegistrationNos@1500001 : Record 16475;
      STReverseChargeSetup@1500015 : Record 16461;
      Vendor@1500000 : Record 23;
    BEGIN
      Vendor.GET("Buy-from Vendor No.");
      IF STReverseChargeSetup.TryGetSrvTaxReverseCharge(
            "Service Tax Group",Vendor."Service Entity Type",
            ServiceTaxRegistrationNos.GetServiceEntityType("Service Tax Registration No."))
      THEN BEGIN
        GetPurchHeader;
        IF (STReverseChargeSetup."Reverse Charge Tax Type" = STReverseChargeSetup."Reverse Charge Tax Type"::GTA) AND
           NOT PurchHeader."Declaration Form (GTA)" THEN
          EXIT(0);
      END;

      EXIT(ServiceTaxSetup."Abatement %");
    END;

    PROCEDURE UpdateExciseAmount@1280021();
    VAR
      ExciseProdPostingGrp@1280000 : Record 13710;
      ExcisePostingSetup@1280004 : Record 13711;
      ItemUOM@1280001 : Record 5404;
      Vendor@1280002 : Record 23;
      SSI@1280003 : Boolean;
    BEGIN
      GetPurchHeader;
      IF "Amount Added to Excise Base" <> 0 THEN BEGIN
        "Excise Base Amount" := "Amount Added to Excise Base";
        Vendor.GET("Buy-from Vendor No.");
        IF Vendor."SSI Validity Date" = 0D THEN BEGIN
          IF Vendor.SSI = TRUE THEN
            SSI := TRUE;
        END ELSE
          IF Vendor."SSI Validity Date" > PurchHeader."Posting Date" THEN
            SSI := Vendor.SSI
          ELSE
            SSI := FALSE;

        IF ExciseProdPostingGrp.GET("Excise Prod. Posting Group") THEN BEGIN
          IF ExciseProdPostingGrp."Unit of Measure Code" <> '' THEN BEGIN
            IF Type = Type::Item THEN BEGIN
              IF ItemUOM.GET("No.",ExciseProdPostingGrp."Unit of Measure Code") THEN BEGIN
                "Excise Base Quantity" := ROUND("Quantity (Base)" / ItemUOM."Qty. per Unit of Measure");
              END ELSE
                "Excise Base Quantity" := 0;
            END ELSE
              IF Type = Type::"Fixed Asset" THEN
                "Excise Base Quantity" := Quantity;
          END ELSE
            "Excise Base Quantity" := "Quantity (Base)";
        END;

        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF PurchHeader."Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,PurchHeader."Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        ExcisePostingSetup.SETRANGE(SSI,SSI);
        IF ExcisePostingSetup.FINDLAST THEN BEGIN
          CASE ExcisePostingSetup."BED Calculation Type" OF
            ExcisePostingSetup."BED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."BED Calculation Formula" <> '' THEN
                    "BED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."BED Calculation Formula",Rec) *
                      ExcisePostingSetup."BED %" / 100
                  ELSE
                    "BED Amount" := ExcisePostingSetup."BED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."BED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "BED Amount" := ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value":
              "BED Amount" := ExcisePostingSetup."BED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."BED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "BED Amount" := (ExcisePostingSetup."BED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."SED Calculation Type" OF
            ExcisePostingSetup."SED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SED Calculation Formula" <> '' THEN
                    "SED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SED Calculation Formula",Rec) *
                      ExcisePostingSetup."SED %" / 100
                  ELSE
                    IF ExcisePostingSetup."SED Calculation Formula" = '' THEN
                      "SED Amount" := ExcisePostingSetup."SED %" * "Excise Base Amount" / 100
              END;
            ExcisePostingSetup."SED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SED Amount" := ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SED Calculation Type"::"% of Accessable Value":
              "SED Amount" := ExcisePostingSetup."SED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SED Amount" := (ExcisePostingSetup."SED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."AED(GSI) Calculation Type" OF
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                    "AED(GSI) Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                      ExcisePostingSetup."AED(GSI) %" / 100
                  ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                      "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"% of Accessable Value":
              "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "AED(GSI) Amount" := (ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."NCCD Calculation Type" OF
            ExcisePostingSetup."NCCD Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE
                  IF ExcisePostingSetup."NCCD Calculation Formula" <> '' THEN
                    "NCCD Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."NCCD Calculation Formula",Rec) *
                      ExcisePostingSetup."NCCD %" / 100
                  ELSE
                    IF ExcisePostingSetup."NCCD Calculation Formula" = '' THEN
                      "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "NCCD Amount" := ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"% of Accessable Value":
              "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."NCCD Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "NCCD Amount" := (ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."AED(TTA) Calculation Type" OF
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                    "AED(TTA) Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                      ExcisePostingSetup."AED(TTA) %" / 100
                  ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                      "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"% of Accessable Value":
              "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "AED(TTA) Amount" := (ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."SAED Calculation Type" OF
            ExcisePostingSetup."SAED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SAED Calculation Formula" <> '' THEN
                    "SAED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SAED Calculation Formula",Rec) *
                      ExcisePostingSetup."SAED %" / 100
                  ELSE
                    IF ExcisePostingSetup."SAED Calculation Formula" = '' THEN
                      "SAED Amount" := ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SAED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SAED Amount" := ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SAED Calculation Type"::"% of Accessable Value":
              "SAED Amount" := ExcisePostingSetup."SAED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SAED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SAED Amount" := (ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."ADE Calculation Type" OF
            ExcisePostingSetup."ADE Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADE Calculation Formula" <> '' THEN
                    "ADE Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADE Calculation Formula",Rec) *
                      ExcisePostingSetup."ADE %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADE Calculation Formula" = '' THEN
                      "ADE Amount" := ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."ADE Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADE Amount" := ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADE Calculation Type"::"% of Accessable Value":
              "ADE Amount" := ExcisePostingSetup."ADE %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADE Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADE Amount" := (ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."ADET Calculation Type" OF
            ExcisePostingSetup."ADET Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADET Calculation Formula" <> '' THEN
                    "ADET Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADET Calculation Formula",Rec) *
                      ExcisePostingSetup."ADET %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADET Calculation Formula" = '' THEN
                      "ADET Amount" := ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100
              END;
            ExcisePostingSetup."ADET Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADET Amount" := ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADET Calculation Type"::"% of Accessable Value":
              "ADET Amount" := ExcisePostingSetup."ADET %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADET Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADET Amount" := (ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."CESS Calculation Type" OF
            ExcisePostingSetup."CESS Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE
                  IF ExcisePostingSetup."CESS Calculation Formula" <> '' THEN
                    "CESS Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."CESS Calculation Formula",Rec)
                      * ExcisePostingSetup."CESS %" / 100
                  ELSE
                    IF ExcisePostingSetup."CESS Calculation Formula" = '' THEN
                      "CESS Amount" := ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."CESS Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "CESS Amount" := ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."CESS Calculation Type"::"% of Accessable Value":
              "CESS Amount" := ExcisePostingSetup."CESS %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."CESS Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "CESS Amount" := (ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."eCess Calculation Type" OF
            ExcisePostingSetup."eCess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."eCess Calculation Formula" <> '' THEN
                    "eCess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."eCess Calculation Formula",Rec) *
                      ExcisePostingSetup."eCess %" / 100
                  ELSE
                    IF ExcisePostingSetup."eCess Calculation Formula" = '' THEN
                      "eCess Amount" := ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."eCess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "eCess Amount" := ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."eCess Calculation Type"::"% of Accessable Value":
              "eCess Amount" := ExcisePostingSetup."eCess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."eCess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "eCess Amount" := (ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          CASE ExcisePostingSetup."SHE Cess Calculation Type" OF
            ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SHE Cess Calculation Formula" <> '' THEN
                    "SHE Cess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SHE Cess Calculation Formula",Rec) *
                      ExcisePostingSetup."SHE Cess %" / 100
                  ELSE
                    IF ExcisePostingSetup."SHE Cess Calculation Formula" = '' THEN
                      "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SHE Cess Amount" := ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"% of Accessable Value":
              "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SHE Cess Amount" := (ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;
          IF ExcisePostingSetup."Setoff available" THEN
            "SetOff Available" := TRUE;
          IF CVD THEN BEGIN
            CASE ExcisePostingSetup."Custom eCess Calculation Type" OF
              ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom eCess Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."Custom eCess Calc. Formula" <> '' THEN
                      "Custom eCess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."Custom eCess Calc. Formula",Rec) *
                        ExcisePostingSetup."Custom eCess %" / 100
                    ELSE
                      IF ExcisePostingSetup."Custom eCess Calc. Formula" = '' THEN
                        "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."Custom eCess Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom eCess Amount" := ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."Custom eCess Calculation Type"::"% of Accessable Value":
                "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom eCess Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "Custom eCess Amount" := (ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;

            CASE ExcisePostingSetup."Custom SHECess Calc. Type" OF
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom SHECess Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."Custom SHECess Calc. Formula" <> '' THEN
                      "Custom SHECess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."Custom SHECess Calc. Formula",Rec) *
                        ExcisePostingSetup."Custom SHECess %" / 100
                    ELSE
                      IF ExcisePostingSetup."Custom SHECess Calc. Formula" = '' THEN
                        "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"% of Accessable Value":
                "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom SHECess Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "Custom SHECess Amount" := (ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;

            CASE ExcisePostingSetup."ADC VAT Calculation Type" OF
              ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."ADC VAT Calculation Formula" <> '' THEN
                      "ADC VAT Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADC VAT Calculation Formula",Rec) *
                        ExcisePostingSetup."ADC VAT %" / 100
                    ELSE
                      IF ExcisePostingSetup."ADC VAT Calculation Formula" = '' THEN
                        "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADC VAT Amount" := ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"% of Accessable Value":
                "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "ADC VAT Amount" := (ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;
          END ELSE
            "ADC VAT Amount" := 0;
        END ELSE
          InitExciseAmount;
      END ELSE
        InitExciseAmount;

      IF PurchHeader.Trading AND
         (PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"])
      THEN BEGIN
        "BED Amount" := BEDAmt;
        "AED(GSI) Amount" := "AED(GSI)Amt";
        "AED(TTA) Amount" := "AED(TTA)Amt";
        "SED Amount" := SEDAmt;
        "SAED Amount" := SAEDAmt;
        "CESS Amount" := CESSAmt;
        "NCCD Amount" := NCCDAmt;
        "eCess Amount" := eCessAmt;
        "SHE Cess Amount" := SHECessAmt;
        "ADET Amount" := ADETAmt;
        "ADE Amount" := ADEAmt;
        "ADC VAT Amount" := ADCVATAmt;
      END;

      "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" +
        "NCCD Amount" + "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" +
        "SHE Cess Amount" + "Custom eCess Amount" + "Custom SHECess Amount";
      "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
    END;

    LOCAL PROCEDURE InitExciseAmount@1280025();
    VAR
      StrOrderLineDet@1500000 : Record 13795;
    BEGIN
      StrOrderLineDet.RESET;
      StrOrderLineDet.SETRANGE(Type,StrOrderLineDet.Type::Purchase);
      StrOrderLineDet.SETRANGE("Document Type","Document Type");
      StrOrderLineDet.SETRANGE("Document No.","Document No.");
      StrOrderLineDet.SETRANGE("Line No.","Line No.");
      StrOrderLineDet.SETRANGE("Item No.","No.");
      StrOrderLineDet.SETRANGE("Tax/Charge Type",StrOrderLineDet."Tax/Charge Type"::Excise);
      StrOrderLineDet.SETRANGE("Manually Changed",TRUE);
      IF StrOrderLineDet.FINDFIRST THEN
        EXIT;

      "Excise Amount" := 0;
      "BED Amount" := 0;
      "AED(GSI) Amount" := 0;
      "AED(TTA) Amount" := 0;
      "SED Amount" := 0;
      "SAED Amount" := 0;
      "CESS Amount" := 0;
      "NCCD Amount" := 0;
      "eCess Amount" := 0;
      "SHE Cess Amount" := 0;
      "ADET Amount" := 0;
      "ADE Amount" := 0;
      "ADC VAT Amount" := 0;
      "Custom eCess Amount" := 0;
      "Custom SHECess Amount" := 0;
    END;

    LOCAL PROCEDURE EvaluateExpression@1280018(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];PurchLine@1280001 : Record 39) : Decimal;
    VAR
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[250];
      LeftOperand@1280014 : Text[250];
      Operator@1280015 : Char;
      PurchLine1@1280017 : Record 39;
      DivisionError@1280018 : Boolean;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpression(IsTestExpression,LeftOperand,PurchLine);
          RightResult := EvaluateExpression(IsTestExpression,RightOperand,PurchLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),PurchLine1)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF NOT IsFilter THEN BEGIN
              IF Expression = Text13701 THEN
                Result := Result + PurchLine."BED Amount"
              ELSE
                IF Expression = Text13702 THEN
                  Result := Result + PurchLine."AED(GSI) Amount" + PurchLine."AED(TTA) Amount"
                ELSE
                  IF Expression = Text13703 THEN
                    Result := Result + PurchLine."SED Amount"
                  ELSE
                    IF Expression = Text13704 THEN
                      Result := Result + PurchLine."SAED Amount"
                    ELSE
                      IF Expression = Text13705 THEN
                        Result := Result + PurchLine."CESS Amount"
                      ELSE
                        IF Expression = Text13706 THEN
                          Result := Result + PurchLine."NCCD Amount"
                        ELSE
                          IF Expression = Text13707 THEN
                            Result := Result + PurchLine."eCess Amount"
                          ELSE
                            IF Expression = Text13708 THEN
                              Result := Result + PurchLine."ADET Amount"
                            ELSE
                              IF Expression = Text13709 THEN
                                Result := Result + PurchLine."Line Amount"
                              ELSE
                                IF Expression = Text13710 THEN
                                  Result := Result + PurchLine."ADE Amount"
                                ELSE
                                  IF Expression = Text13713 THEN
                                    Result := Result + PurchLine."SHE Cess Amount"
                                  ELSE
                                    IF Expression = Text16502 THEN
                                      Result := Result + PurchLine."ADC VAT Amount"
                                    ELSE
                                      IF Expression = Text16503 THEN
                                        Result := Result + PurchLine."BCD Amount" * PurchLine.Quantity
                                      ELSE
                                        IF Expression = Text16504 THEN
                                          Result := Result + PurchLine."CIF Amount" * PurchLine.Quantity
                                        ELSE
                                          IF Expression = Text16505 THEN
                                            Result := Result + PurchLine."Custom eCess Amount"
                                          ELSE
                                            IF Expression = Text16506 THEN
                                              Result := Result + PurchLine."Custom SHECess Amount"
                                            ELSE
                                              IF Expression = Text13714 THEN
                                                Result := Result + PurchLine."Assessable Value" * PurchLine.Quantity;
            END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE TaxAreaUpdate@1280002();
    VAR
      TaxLocation@1280000 : Record 13761;
      TaxGroup@1280001 : Record 321;
    BEGIN
      GetPurchHeader;
      IF TaxGroup.GET("Tax Group Code") THEN;
      TaxLocation.SETRANGE(Type,TaxLocation.Type::Vendor);
      TaxLocation.SETRANGE("Dispatch / Receiving Location","Location Code");
      TaxLocation.SETRANGE("Customer / Vendor Location",PurchHeader.State);
      IF TaxGroup."VAT Applicable" THEN
        TaxLocation.SETRANGE("VAT Applicable",TRUE);
      IF TaxLocation.FINDFIRST THEN
        "Tax Area Code" := TaxLocation."Tax Area Code";

      "Amount Loaded on Inventory" := 0;
      "Input Tax Credit Amount" := 0;
      "VAT able Purchase Tax Amount" := 0;
    END;

    PROCEDURE CalculateStructures@1280003(VAR PurchHeader@1280004 : Record 38);
    VAR
      PurchLine@1280005 : Record 39;
      StrOrderDetails@1280000 : Record 13794;
      StrOrderLineDetails@1280001 : Record 13795;
      StrOrderLines@1280008 : Record 13795;
      Currency@1280009 : Record 4;
      Vendor@1500000 : Record 23;
      TotalAmount@1280002 : Decimal;
      BaseAmount@1280006 : Decimal;
      PurchTotalLine@1280003 : Decimal;
      OriginalCurrencyFactor@1500169 : Decimal;
    BEGIN
      WITH PurchHeader DO BEGIN
        Currency.Initialize("Currency Code");
        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;

        IF "Currency Factor" <> 0 THEN
          CFactor := "Currency Factor"
        ELSE
          CFactor := 1;
        OriginalCurrencyFactor := CFactor;

        StrOrderLines.LOCKTABLE;
        StrOrderLines.RESET;
        StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderLines.SETRANGE("Document Type","Document Type");
        StrOrderLines.SETRANGE("Document No.","No.");
        StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Purchase);
        StrOrderLines.SETRANGE("Manually Changed",FALSE);
        IF StrOrderLines.FINDFIRST THEN
          StrOrderLines.DELETEALL(TRUE);

        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          IF PurchHeader."Invoice Type" = PurchHeader."Invoice Type"::"Non-GST" THEN
            ERROR(NonGSTInvTypeErr);
          GSTManagement.PurchasePostValidations(PurchHeader);
        END;

        PurchTotalLine := 0;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETFILTER(Type,'%1|%2',PurchLine.Type::Item,PurchLine.Type::"Fixed Asset");
        PurchTotalLine := PurchLine.COUNT;
        IF PurchLine.FIND('-') THEN
          REPEAT
            TotalAmount := TotalAmount + PurchLine.Quantity * PurchLine."Direct Unit Cost";
          UNTIL PurchLine.NEXT = 0;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FIND('-') THEN BEGIN
          Vendor.GET("Buy-from Vendor No.");
          REPEAT
            IF (PurchLine.Quantity <> 0) AND (PurchLine."Direct Unit Cost" <> 0) THEN BEGIN
              WITH PurchLine DO BEGIN
                "Amount Added to Inventory" := 0;
                "Amount Added to Excise Base" := 0;
                "Amount Added to Tax Base" := 0;
                "VAT Base Amount" := 0;
                AssessableValueCalc := CheckAssessableValue(PurchHeader);
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
                IF StrOrderDetails.FIND('-') THEN
                  REPEAT
                    IF NOT StrOrderDetails.LCY THEN
                      CFactor := 1;
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Purchase);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    IF NOT StrOrderLineDetails.FINDFIRST THEN BEGIN
                      StrOrderLineDetails.INIT;
                      StrOrderLineDetails.Type := StrOrderDetails.Type;
                      StrOrderLineDetails."Document Type" := StrOrderDetails."Document Type";
                      StrOrderLineDetails."Document No." := StrOrderDetails."Document No.";
                      StrOrderLineDetails."Structure Code" := StrOrderDetails."Structure Code";
                      StrOrderLineDetails."Item No." := "No.";
                      StrOrderLineDetails."Line No." := "Line No.";
                      StrOrderLineDetails."Calculation Order" := StrOrderDetails."Calculation Order";
                      StrOrderLineDetails."Tax/Charge Type" := StrOrderDetails."Tax/Charge Type";
                      StrOrderLineDetails."Tax/Charge Group" := StrOrderDetails."Tax/Charge Group";
                      StrOrderLineDetails."Tax/Charge Code" := StrOrderDetails."Tax/Charge Code";
                      StrOrderLineDetails."Calculation Type" := StrOrderDetails."Calculation Type";
                      StrOrderLineDetails."Calculation Value" := StrOrderDetails."Calculation Value";
                      StrOrderLineDetails."Quantity Per" := StrOrderDetails."Quantity Per";
                      StrOrderLineDetails."Loading on Inventory" := StrOrderDetails."Loading on Inventory";
                      StrOrderLineDetails."% Loading on Inventory" := StrOrderDetails."% Loading on Inventory";
                      StrOrderLineDetails."Header/Line" := StrOrderDetails."Header/Line";
                      StrOrderLineDetails."Include Base" := StrOrderDetails."Include Base";
                      StrOrderLineDetails."Include Line Discount" := StrOrderDetails."Include Line Discount";
                      StrOrderLineDetails."Include Invoice Discount" := StrOrderDetails."Include Invoice Discount";
                      StrOrderLineDetails."Payable to Third Party" := StrOrderDetails."Payable to Third Party";
                      StrOrderLineDetails."Available for VAT input" := StrOrderDetails."Available for VAT Input";
                      StrOrderLineDetails.LCY := StrOrderDetails.LCY;
                      IF GetReverseChargePct(Vendor."Service Entity Type") <> 100 THEN
                         StrOrderLineDetails."Include in TDS Base" := StrOrderDetails."Include in TDS Base";
                      IF NOT GSTManagement.GetReverseCharge("Pay-to Vendor No.") THEN
                        StrOrderLineDetails."Inc. GST in TDS Base" := StrOrderDetails."Inc. GST in TDS Base";

                      StrOrderLineDetails.CVD := StrOrderDetails.CVD;

                      IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax") OR
                         (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise)
                      THEN BEGIN
                        StrOrderDetails.TESTFIELD("Payable to Third Party",FALSE);
                        StrOrderDetails.TESTFIELD("Third Party Code",'');
                      END;
                      IF StrOrderDetails."Payable to Third Party" THEN
                        StrOrderDetails.TESTFIELD("Third Party Code");
                      StrOrderLineDetails."Third Party Code" := StrOrderDetails."Third Party Code";
                      IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                          (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                      THEN
                        StrOrderDetails.TESTFIELD("Account No.");
                      StrOrderLineDetails."Account No." := StrOrderDetails."Account No.";
                      StrOrderLineDetails."Base Formula" := StrOrderDetails."Base Formula";
                      IF StrOrderLineDetails."Base Formula" <> '' THEN
                        BaseAmount := EvaluateExpressioninStructures(TRUE,StrOrderLineDetails."Base Formula",PurchLine,StrOrderDetails)
                      ELSE
                        BaseAmount := 0;

                      IF StrOrderDetails."Include Base" THEN
                        BaseAmount := BaseAmount + Quantity * "Direct Unit Cost";
                      IF StrOrderDetails."Include Line Discount" THEN
                        BaseAmount := BaseAmount - "Line Discount Amount";
                      IF StrOrderDetails."Include Invoice Discount" THEN
                        BaseAmount := BaseAmount - "Inv. Discount Amount";


                      IF ((Type <> Type::"Charge (Item)") AND
                          (Type <> Type::"G/L Account"))
                      THEN
                        IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                           (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes")
                        THEN BEGIN
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                            IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) THEN
                              StrOrderDetails.TESTFIELD("Charge Basis");
                            IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Amount THEN BEGIN
                              StrOrderLineDetails."Base Amount" :=
                                ROUND(Quantity * "Direct Unit Cost",Currency."Amount Rounding Precision");
                              StrOrderLineDetails.Amount :=
                                (StrOrderDetails."Calculation Value" * CFactor) * (Quantity * "Direct Unit Cost") / TotalAmount;
                            END;
                            IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Equally THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) / PurchTotalLine;
                            END;
                          END;
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                            StrOrderLineDetails."Base Amount" := BaseAmount;
                            StrOrderLineDetails.Amount := StrOrderDetails."Calculation Value" * BaseAmount / 100;
                          END;
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                            StrOrderLineDetails."Base Amount" := 0;
                            StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) * Quantity /
                              StrOrderDetails."Quantity Per";
                          END;
                        END;

                      IF Type IN [Type::"Charge (Item)",Type::"G/L Account"] THEN  BEGIN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN BEGIN
                          IF Trading THEN
                            Location.CheckTradingLocation("Location Code");
                          IF Trading AND ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
                            GetBaseAmt(BaseAmount,PurchLine);
                          "Amount Added to Excise Base" := BaseAmount;
                          CVD := StrOrderDetails.CVD;
                          IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                            "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                          IF AssessableValueCalc AND
                             (NOT (Trading AND (PurchHeader."Applies-to Doc. No." <> ''))) AND
                             (NOT CVD)
                          THEN BEGIN
                            "Amount Added to Excise Base" := "Assessable Value" * Quantity;
                            "Excise Base Amount" := "Assessable Value" * Quantity;
                          END;
                          UpdateTaxAmounts;
                          StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                          StrOrderLineDetails.Amount := "Excise Amount";
                          StrOrderLineDetails."CVD Payable to Third Party" := StrOrderDetails."CVD Payable to Third Party";
                          StrOrderLineDetails."CVD Third Party Code" := StrOrderDetails."CVD Third Party Code";
                        END;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                          IF (Vendor."GST Vendor Type" IN  [Vendor."GST Vendor Type"::Import,
                                                            Vendor."GST Vendor Type"::SEZ]) AND
                            ("GST Group Type" = "GST Group Type"::Goods) THEN BEGIN
                              IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                                                                      PurchHeader."Document Type"::"Return Order"]) THEN BEGIN
                                IF Type = Type::"G/L Account" THEN BEGIN
                                  "GST Base Amount" := "Custom Duty Amount" + "GST Assessable Value";
                                  UpdateGSTAmounts("Custom Duty Amount" + "GST Assessable Value");
                                END ELSE BEGIN
                                  "GST Base Amount" := BaseAmount;
                                  UpdateGSTAmounts(BaseAmount);
                                END
                              END ELSE BEGIN
                                "GST Base Amount" := BaseAmount;
                                UpdateGSTAmounts(BaseAmount);
                              END;
                            END ELSE BEGIN
                              "GST Base Amount" := BaseAmount;
                              UpdateGSTAmounts(BaseAmount);
                            END;
                          StrOrderLineDetails."Base Amount" := "GST Base Amount";
                          StrOrderLineDetails.Amount :="Total GST Amount";
                        END;
                      END;

                      IF Type IN [Type::Item,Type::"Fixed Asset"] THEN BEGIN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN BEGIN
                          IF Trading THEN
                            Location.CheckTradingLocation("Location Code");
                          IF Trading AND ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN
                            GetBaseAmt(BaseAmount,PurchLine);
                          "Amount Added to Excise Base" := BaseAmount;
                          CVD := StrOrderDetails.CVD;
                          IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                            "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                          IF AssessableValueCalc AND
                             (NOT (Trading AND (PurchHeader."Applies-to Doc. No." <> ''))) AND
                             (NOT CVD)
                          THEN BEGIN
                            "Amount Added to Excise Base" := "Assessable Value" * Quantity;
                            "Excise Base Amount" := "Assessable Value" * Quantity;
                          END;
                          UpdateTaxAmounts;
                          StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                          StrOrderLineDetails.Amount := "Excise Amount";
                          StrOrderLineDetails."CVD Payable to Third Party" := StrOrderDetails."CVD Payable to Third Party";
                          StrOrderLineDetails."CVD Third Party Code" := StrOrderDetails."CVD Third Party Code";
                        END;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                          "Amount Added to Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                          UpdateTaxAmounts;
                          StrOrderLineDetails."Base Amount" := "Tax Base Amount";
                          StrOrderLineDetails.Amount := "Amount Including Tax" - "Tax Base Amount";
                        END;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                          IF (Vendor."GST Vendor Type" IN  [Vendor."GST Vendor Type"::Import,
                                                            Vendor."GST Vendor Type"::SEZ]) AND
                            ("GST Group Type" = "GST Group Type"::Goods) THEN BEGIN
                            IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::"Credit Memo",
                                                                    PurchHeader."Document Type"::"Return Order"]) THEN BEGIN
                              "GST Base Amount" := "Custom Duty Amount" + "GST Assessable Value";
                              UpdateGSTAmounts("Custom Duty Amount" + "GST Assessable Value");
                            END ELSE BEGIN
                              "GST Base Amount" := BaseAmount;
                              UpdateGSTAmounts(BaseAmount);
                            END;
                          END ELSE BEGIN
                            "GST Base Amount" := BaseAmount;
                            UpdateGSTAmounts(BaseAmount);
                          END;

                          StrOrderLineDetails."Base Amount" := "GST Base Amount";
                          StrOrderLineDetails.Amount :="Total GST Amount";
                        END;
                      END;
                      IF Type IN [Type::"G/L Account",Type::"Charge (Item)"] THEN BEGIN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                          "Amount Added to Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                          UpdateTaxAmounts;
                          StrOrderLineDetails."Base Amount" := "Tax Base Amount";
                          StrOrderLineDetails.Amount := "Amount Including Tax" - "Tax Base Amount";
                        END;
                      END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" THEN BEGIN
                        IF "Transaction No. Serv. Tax" <> 0 THEN
                          "Service Tax Base" := ROUND(BaseAmount)
                        ELSE
                          "Service Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                        UpdateTaxAmounts;
                        StrOrderLineDetails."Base Amount" := "Service Tax Base";
                        StrOrderLineDetails.Amount :=
                          PurchLine.RoundServiceTax("Service Tax Amount") + PurchLine.RoundServiceTax("Service Tax eCess Amount") +
                          PurchLine.RoundServiceTax("Service Tax SHE Cess Amount") + PurchLine.RoundServiceTax("Service Tax SBC Amount") +
                          PurchLine.RoundServiceTax("KK Cess Amount");
                      END;
                      CFactor := OriginalCurrencyFactor;

                      IF "Currency Code" <> '' THEN
                        Currency.GET("Currency Code");

                      StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                      StrOrderLineDetails.INSERT
                    END ELSE
                      IF StrOrderLineDetails."Manually Changed" THEN BEGIN
                        IF ((Type <> Type::"Charge (Item)") AND
                            (Type <> Type::"G/L Account"))
                        THEN
                          IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                             (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes")
                          THEN BEGIN
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                              IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges THEN
                                StrOrderDetails.TESTFIELD("Charge Basis");
                              IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Amount THEN
                                StrOrderLineDetails.Amount := StrOrderLineDetails."Calculation Value" * CFactor;
                              IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Equally THEN  BEGIN
                                StrOrderLineDetails."Base Amount" := 0;
                                StrOrderLineDetails.Amount := StrOrderLineDetails."Calculation Value" * CFactor;
                              END;
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                              StrOrderLineDetails."Base Amount" := BaseAmount;
                              StrOrderLineDetails.Amount := StrOrderLineDetails."Calculation Value" * BaseAmount / 100;
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount := (StrOrderLineDetails."Calculation Value" * CFactor) * Quantity /
                                StrOrderDetails."Quantity Per";
                            END;

                            CFactor := OriginalCurrencyFactor;

                            StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                            StrOrderLineDetails.MODIFY;
                          END;
                      END;
                  UNTIL StrOrderDetails.NEXT = 0;
              END;
            END ELSE BEGIN
              PurchLine."Amount Added to Tax Base" := 0;
              PurchLine."Tax Base Amount" := 0;
              PurchLine."Tax Amount" := 0;
              PurchLine."GST Base Amount" := 0;
              PurchLine."Total GST Amount" := 0;
              PurchLine."GST %" := 0;
            END;
            PurchLine.MODIFY;
          UNTIL PurchLine.NEXT = 0;
          StrOrderLineDetails.RoundAmounts(
            PurchHeader."Document Type",PurchHeader."No.",CFactor,Currency."Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE EvaluateExpressioninStructures@1280005(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];PurchLine@1280001 : Record 39;VAR StructureOrderDetails@1280019 : Record 13794) : Decimal;
    VAR
      StrOrderLineDetails2@1280002 : Record 13795;
      StructureOrderDetails1@1280021 : Record 13794;
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[250];
      LeftOperand@1280014 : Text[250];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressioninStructures(IsTestExpression,LeftOperand,PurchLine,StructureOrderDetails);
          RightResult := EvaluateExpressioninStructures(IsTestExpression,RightOperand,PurchLine,StructureOrderDetails);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressioninStructures(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),PurchLine,
                StructureOrderDetails)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                StructureOrderDetails1.SETRANGE(Type,StructureOrderDetails1.Type::Purchase);
                StructureOrderDetails1.SETRANGE("Document Type",StructureOrderDetails."Document Type");
                StructureOrderDetails1.SETRANGE("Document No.",StructureOrderDetails."Document No.");
                StructureOrderDetails1.SETRANGE("Structure Code",StructureOrderDetails."Structure Code");
                StructureOrderDetails1.SETRANGE("Calculation Order",Exp);
                IF StructureOrderDetails1.FINDFIRST THEN BEGIN
                  StrOrderLineDetails2.RESET;
                  StrOrderLineDetails2.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLineDetails2.SETRANGE("Document Type",StructureOrderDetails1."Document Type");
                  StrOrderLineDetails2.SETRANGE("Document No.",StructureOrderDetails1."Document No.");
                  StrOrderLineDetails2.SETRANGE("Item No.",PurchLine."No.");
                  StrOrderLineDetails2.SETRANGE("Line No.",PurchLine."Line No.");
                  StrOrderLineDetails2.SETRANGE("Structure Code",StructureOrderDetails1."Structure Code");
                  StrOrderLineDetails2.SETRANGE("Tax/Charge Code",StructureOrderDetails1."Tax/Charge Code");
                  EVALUATE(Exp,Expression);
                  StrOrderLineDetails2.SETRANGE("Calculation Order",Exp);
                  IF StrOrderLineDetails2.FINDFIRST THEN
                    Result := Result + StrOrderLineDetails2.Amount;
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(Result);
    END;

    PROCEDURE AdjustStructureAmounts@1280006(VAR PurchHeader@1280004 : Record 38);
    VAR
      PurchLine@1280005 : Record 39;
      StrOrderDetails@1280000 : Record 13794;
      StrOrderLineDetails@1280001 : Record 13795;
      StrOrderLines@1280008 : Record 13795;
      CFactor@1280007 : Decimal;
      StructureAmount@1280009 : Decimal;
      DiffAmount@1280010 : Decimal;
      Adjusted@1500000 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        StrOrderDetails.RESET;
        StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderDetails.SETRANGE("Document Type","Document Type");
        StrOrderDetails.SETRANGE("Document No.","No.");
        StrOrderDetails.SETRANGE("Structure Code",Structure);
        StrOrderDetails.SETFILTER(
          "Tax/Charge Type",
          '%1|%2',
          StrOrderDetails."Tax/Charge Type"::Charges,
          StrOrderDetails."Tax/Charge Type"::"Other Taxes");
        StrOrderDetails.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type"::"Fixed Value");
        IF StrOrderDetails.FIND('-') THEN
          REPEAT
            CLEAR(StructureAmount);
            StrOrderLines.RESET;
            StrOrderLines.SETCURRENTKEY(
              "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
              "Tax/Charge Code","Calculation Type");
            StrOrderLines.SETRANGE("Document Type","Document Type");
            StrOrderLines.SETRANGE("Document No.","No.");
            StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Purchase);
            StrOrderLines.SETRANGE("Structure Code",Structure);
            StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
            StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
            StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
            StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
            IF StrOrderLines.FIND('-') THEN
              REPEAT
                StructureAmount := StructureAmount + StrOrderLines.Amount;
              UNTIL StrOrderLines.NEXT = 0;

            IF "Currency Factor" <> 0 THEN
              CFactor := "Currency Factor"
            ELSE
              CFactor := 1;

            IF NOT StrOrderDetails.LCY THEN
              CFactor := 1;

            Adjusted := FALSE;
            IF StrOrderDetails."Calculation Value" <> StructureAmount THEN BEGIN
              DiffAmount := (StrOrderDetails."Calculation Value" * CFactor) - StructureAmount;
              StrOrderLines.RESET;
              StrOrderLines.SETCURRENTKEY(
                "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
                "Tax/Charge Code","Calculation Type");
              StrOrderLines.SETRANGE("Document Type","Document Type");
              StrOrderLines.SETRANGE("Document No.","No.");
              StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Purchase);
              StrOrderLines.SETRANGE("Structure Code",Structure);
              StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
              StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
              StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
              StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
              IF StrOrderLines.FIND('-') THEN
                REPEAT
                  IF PurchLine.GET(StrOrderLines."Document Type",StrOrderLines."Document No.",StrOrderLines."Line No.") THEN BEGIN
                    IF PurchLine.Type <> PurchLine.Type::"G/L Account" THEN BEGIN
                      IF (StrOrderDetails."Calculation Value" <> 0) AND (NOT StrOrderLines."Manually Changed") THEN BEGIN
                        StrOrderLines.Amount := ROUND(StrOrderLines.Amount + DiffAmount);
                        StrOrderLines."Amount (LCY)" := ROUND(StrOrderLines."Amount (LCY)" + DiffAmount / CFactor);
                        StrOrderLines.MODIFY;
                        Adjusted := TRUE;
                      END;
                    END;
                  END;
                UNTIL (StrOrderLines.NEXT = 0) OR Adjusted;
            END;
          UNTIL StrOrderDetails.NEXT = 0;
      END;
    END;

    PROCEDURE UpdatePurchLines@1280008(VAR PurchHeader@1280004 : Record 38);
    VAR
      PurchLine@1280005 : Record 39;
      StrOrderDetails@1280000 : Record 13794;
      StrOrderLineDetails@1280001 : Record 13795;
      Currency@1280009 : Record 4;
      ChargesToVendor@1280010 : Decimal;
    BEGIN
      WITH PurchHeader DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE
          Currency.GET("Currency Code");

        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETFILTER(Type,'%1|%2|%3|%4',PurchLine.Type::Item,PurchLine.Type::"G/L Account",PurchLine.Type::"Fixed Asset",
          PurchLine.Type::"Charge (Item)");
        IF PurchLine.FIND('-') THEN
          REPEAT
            IF PurchLine.Quantity <> 0 THEN
              WITH PurchLine DO BEGIN
                ChargesToVendor := 0;
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
                IF StrOrderDetails.FIND('-') THEN
                  REPEAT
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Purchase);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    IF StrOrderLineDetails.FIND('-') THEN
                      REPEAT
                        IF StrOrderDetails."Loading on Inventory" AND
                           NOT ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax") OR
                                (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax"))
                        THEN
                          "Amount Added to Inventory" :=
                            "Amount Added to Inventory" + ROUND(StrOrderLineDetails."Amount (LCY)" *
                              StrOrderLineDetails."% Loading on Inventory" / 100,Currency."Amount Rounding Precision");
                        IF NOT StrOrderDetails."Payable to Third Party" THEN
                          IF NOT (StrOrderDetails."Tax/Charge Type" IN [StrOrderDetails."Tax/Charge Type"::"Sales Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::Excise,
                                                                        StrOrderDetails."Tax/Charge Type"::"Service Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::GST])
                          THEN
                            ChargesToVendor := ChargesToVendor + ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
                      UNTIL StrOrderLineDetails.NEXT = 0;
                  UNTIL StrOrderDetails.NEXT = 0;
                "Charges To Vendor" := ChargesToVendor;
                IF CVD AND GetCVDPayableToThirdParty(PurchLine) THEN
                  "Amount To Vendor" :=
                    "Line Amount" - "Inv. Discount Amount" + "Tax Amount" - "Bal. TDS Including SHE CESS" + "Total GST Amount" +
                      "Charges To Vendor" + FullServiceTaxAmount + FullServiceTaxSBCAmount + KKCessAmount
                ELSE
                  "Amount To Vendor" :=
                    "Line Amount" -
                    "Inv. Discount Amount" + "Excise Amount" + "Tax Amount" - "Bal. TDS Including SHE CESS" + "Total GST Amount" +
                      "Charges To Vendor" + FullServiceTaxAmount + FullServiceTaxSBCAmount + KKCessAmount;
                MODIFY;
              END;
          UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcAppliedTDSBase@1500018(VendorLedgerEntry@1500000 : Record 25;PurchLine@1500001 : Record 39) : Decimal;
    VAR
      AppliedAmount@1500002 : Decimal;
    BEGIN
      IF VendorLedgerEntry.HasServiceTax AND (PurchLine."Service Tax Registration No." <> '') THEN
        VendorLedgerEntry.CheckIncomeTaxForApplication(
          PurchLine."TDS Nature of Deduction",PurchLine."Work Tax Nature Of Deduction");

      IF VendorLedgerEntry."Amount to Apply" = 0 THEN BEGIN
        VendorLedgerEntry.CALCFIELDS("Remaining Amount");
        AppliedAmount := VendorLedgerEntry."Remaining Amount";
      END ELSE
        AppliedAmount := VendorLedgerEntry."Amount to Apply";
      EXIT(VendorLedgerEntry.CalcAppliedTDSBase(AppliedAmount));
    END;

    PROCEDURE CalculateTDS@1280004(VAR PurchHeader@1280020 : Record 38);
    VAR
      PurchLine@1280021 : Record 39;
      TDSEntry@1280000 : Record 13729;
      VendorLedgerEntry@1280007 : Record 25;
      TDSGroup@1280010 : Record 13731;
      CurrPurchLine@1280022 : Record 39;
      Vendor@1500000 : Record 23;
      DateFilterCalc@1280001 : Codeunit 358;
      AccountingPeriodFilter@1280002 : Text[30];
      FiscalYear@1280003 : Boolean;
      PreviousTDSAmt@1280005 : Decimal;
      PreviousSurchargeAmt@1280006 : Decimal;
      PreviousAmount@1280008 : Decimal;
      AppliedAmount@1280009 : Decimal;
      CurrentPOTDSAmt@1280012 : Decimal;
      CurrentPOAmount@1280013 : Decimal;
      CurrentPOContractAmt@1280024 : Decimal;
      CurrentPOContractTDSAmt@1280025 : Decimal;
      CalculatedTDSAmt@1280016 : Decimal;
      CalculatedSurchargeAmt@1280015 : Decimal;
      CalculateSurcharge@1280014 : Boolean;
      SurchargeBase@1280011 : Decimal;
      PreviousContractAmount@1280017 : Decimal;
      InvoiceAmount@1280018 : Decimal;
      PaymentAmount@1280019 : Decimal;
      AppliedAmountDoc@1500001 : Decimal;
      StrOrdLineDet@1500028 : Record 13795;
      TDSSetupPercentage@1500029 : Decimal;
      PreviousBaseAMTWithTDS@1500128 : Decimal;
      TDSBaseLCY@1500008 : Decimal;
      TempTDSBase@1500009 : Decimal;
      SurchargeBaseLCY@1500010 : Decimal;
      TDSPercentage@1500012 : Decimal;
      SurchargePercentage@1500011 : Decimal;
      RemainingAmount@1500014 : Decimal;
      ReverseChargePct@1500006 : Integer;
      GSTTDSAmount@1500045 : Decimal;
      VendLedgerEntry@1170000000 : Record 25;
    BEGIN
      WITH PurchHeader DO
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
          IF HasLineWithTDS THEN
            ERROR(Text16512);
          IF HasLineWithWorkTax THEN
            ERROR(Text16511);
        END ELSE BEGIN
          IF "Assessee Code" = '' THEN
            EXIT;
          IF "Currency Code" = '' THEN
            Currency.InitRoundingPrecision;

          Vendor.GET("Pay-to Vendor No.");
          TDSBuf[1].DELETEALL;
          CalculatedTDSAmt := 0;
          CalculatedSurchargeAmt := 0;
          SurchargeBase := 0;
          GSTTDSAmount := 0;
          "Per Contract" := FALSE;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          PurchLine.SETFILTER("No.",'<>%1','');
          IF PurchLine.FIND('-') THEN BEGIN
            IF "Applies-to ID" <> '' THEN BEGIN
              IF GSTManagement.IsGSTApplicable(Structure) AND (PurchLine."TDS Nature of Deduction" <> '') THEN
                CheckAppliedTDSvalidation(VendLedgerEntry,PurchHeader);
              VendorLedgerEntry.SetAppliesToIDFilter(Vendor."No.","Applies-to ID");
              VendorLedgerEntry.SETRANGE("TDS Nature of Deduction",PurchLine."TDS Nature of Deduction");
              VendorLedgerEntry.SETRANGE("TDS Group",PurchLine."TDS Group");
              IF GSTManagement.IsGSTApplicable(Structure) THEN
                VendorLedgerEntry.SETRANGE("GST Group Code",PurchLine."GST Group Code");
              IF VendorLedgerEntry.FIND('-') THEN
                REPEAT
                  AppliedAmount +=
                    GetServiceTaxTDSBaseCorrection(VendorLedgerEntry) + CalcAppliedTDSBase(VendorLedgerEntry,PurchLine);
                  VendorLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
                  IF (VendorLedgerEntry."GST Group Code" <> '') AND (
                                                                    ABS(VendLedgerEntry."Amount to Apply") +
                                                                    ABS(VendLedgerEntry."Total TDS Including SHE CESS") =
                                                                    ABS(VendLedgerEntry."Remaining Amt. (LCY)"))
                  THEN
                    AppliedAmount += AppliedAmount + VendorLedgerEntry."Total TDS Including SHE CESS";
                UNTIL VendorLedgerEntry.NEXT = 0;
            END;
            IF "Applies-to Doc. No." <> '' THEN BEGIN
              VendorLedgerEntry.RESET;
              VendorLedgerEntry.SETRANGE("Document Type","Applies-to Doc. Type");
              VendorLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              IF PurchLine."Service Tax Registration No." = '' THEN BEGIN
                VendorLedgerEntry.SETRANGE("TDS Nature of Deduction",PurchLine."TDS Nature of Deduction");
                VendorLedgerEntry.SETRANGE("TDS Group",PurchLine."TDS Group");
              END;
              IF VendorLedgerEntry.FINDFIRST THEN
                AppliedAmountDoc :=
                  GetServiceTaxTDSBaseCorrection(VendorLedgerEntry) + CalcAppliedTDSBase(VendorLedgerEntry,PurchLine) + GSTTDSAmount;
            END;
            RemainingAmount := AppliedAmount + AppliedAmountDoc;

            REPEAT
              WITH PurchLine DO BEGIN
                IF ("TDS Nature of Deduction" <> '') AND (AccountingPeriodFilter = '') THEN
                  DateFilterCalc.CreateTDSAccountingDateFilter(AccountingPeriodFilter,FiscalYear,PurchHeader."Posting Date",0);
                TDSBuf[1].DELETEALL;
                CalculatedTDSAmt := 0;
                CalculatedSurchargeAmt := 0;
                InitTDSAmounts(PurchLine);
                TDSPercentage := 0;
                SurchargePercentage := 0;
                ReverseChargePct := GetReverseChargePct(Vendor."Service Entity Type");
                CurrentPOAmount := 0;
                CurrentPOTDSAmt := 0;
                CurrentPOContractAmt := 0;
                CurrentPOContractTDSAmt := 0;
                TDSBaseLCY := 0;
                TDSGroup.RESET;
                IF TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date") THEN
                  IF PurchHeader."Currency Code" <> '' THEN BEGIN
                    IF NOT TDSGroup."Non Resident Payments" THEN
                      EXIT;
                  END ELSE BEGIN
                    IF TDSGroup."Non Resident Payments" THEN
                      EXIT;
                  END;
                IF ("TDS Nature of Deduction" <> '') AND ("Line Amount" < 0) THEN
                  ERROR(Text16509,"Document Type","Document No.","Line No.");

                IF NOT GSTManagement.GetReverseCharge(PurchHeader."Pay-to Vendor No.") AND
                   GSTManagement.IsGSTApplicable(PurchHeader.Structure) AND
                   StrOrdLineDet.DoesTDSBaseIncludeGST(PurchHeader)
                THEN
                  TDSBaseLCY := "Line Amount" - "Inv. Discount Amount" + "Total GST Amount"
                ELSE
                  TDSBaseLCY := "Line Amount" - "Inv. Discount Amount";

                IF StrOrdLineDet.FindLinesInclInTDSBase(PurchLine) THEN
                  REPEAT
                    IF ReverseChargePct > 0 THEN
                      StrOrdLineDet.Amount := ROUND(StrOrdLineDet.Amount * (100 - ReverseChargePct) / 100);
                    TDSBaseLCY := TDSBaseLCY + StrOrdLineDet.Amount;
                  UNTIL StrOrdLineDet.NEXT = 0;
                IF "Currency Code" = '' THEN
                  TDSBaseLCY := ABS(TDSBaseLCY)
                ELSE
                  TDSBaseLCY := ROUND(
                    CurrExchRate.ExchangeAmtFCYToLCY(
                      PurchHeader."Posting Date","Currency Code",
                      ABS(TDSBaseLCY),"Currency Factor"));

                TDSEntry.RESET;
                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                TDSEntry.SETRANGE("TDS Group","TDS Group");
                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                TDSEntry.SETRANGE(Applied,FALSE);
                IF TDSEntry.FIND('-') THEN BEGIN
                  TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                  PreviousAmount := ABS(TDSEntry."Invoice Amount") + ABS(TDSEntry."Service Tax Including eCess");
                END;

                TDSEntry.RESET;
                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                TDSEntry.SETRANGE("TDS Group","TDS Group");
                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                TDSEntry.SETRANGE(Applied,FALSE);
                TDSEntry.SETFILTER("Bal. TDS Including SHE CESS",'<>%1',0);
                TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                PreviousBaseAMTWithTDS := ABS(TDSEntry."Invoice Amount") + ABS(TDSEntry."Service Tax Including eCess");

                TDSEntry.RESET;
                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code","Document Type");
                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                TDSEntry.SETRANGE("TDS Group","TDS Group");
                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                TDSEntry.SETRANGE("Document Type",TDSEntry."Document Type"::Invoice);
                IF TDSEntry.FIND('-') THEN BEGIN
                  TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                  InvoiceAmount := ABS(TDSEntry."Invoice Amount") + ABS(TDSEntry."Service Tax Including eCess");
                END;

                TDSEntry.RESET;
                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code","Document Type");
                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                TDSEntry.SETRANGE("TDS Group","TDS Group");
                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                TDSEntry.SETRANGE("Document Type",TDSEntry."Document Type"::Payment);
                IF TDSEntry.FIND('-') THEN BEGIN
                  TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                  PaymentAmount := ABS(TDSEntry."Invoice Amount") + ABS(TDSEntry."Service Tax Including eCess");
                END;
                IF InvoiceAmount > PaymentAmount THEN
                  PreviousAmount := InvoiceAmount
                ELSE
                  PreviousAmount := PaymentAmount;

                TDSEntry.RESET;
                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code");
                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                TDSEntry.SETRANGE("TDS Group","TDS Group");
                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                IF TDSEntry.FIND('-') THEN BEGIN
                  TDSEntry.CALCSUMS("TDS Amount","Surcharge Amount");
                  PreviousTDSAmt := ABS(TDSEntry."TDS Amount");
                  PreviousSurchargeAmt := ABS(TDSEntry."Surcharge Amount");
                END;
                TDSEntry.RESET;
                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                TDSEntry.SETRANGE("TDS Group","TDS Group");
                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                TDSEntry.SETRANGE(Applied,FALSE);
                TDSEntry.SETRANGE("Per Contract",TRUE);
                IF TDSEntry.FIND('-') THEN BEGIN
                  TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                  PreviousContractAmount := ABS(TDSEntry."Invoice Amount") + ABS(TDSEntry."Service Tax Including eCess");
                END;

                CurrPurchLine.RESET;
                CurrPurchLine.SETRANGE("Document Type","Document Type");
                CurrPurchLine.SETRANGE("Document No.","Document No.");
                CurrPurchLine.SETRANGE("TDS Group","TDS Group");
                CurrPurchLine.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
                CurrPurchLine.SETRANGE("Assessee Code","Assessee Code");
                CurrPurchLine.SETFILTER("Line No.",'<%1',"Line No.");
                IF CurrPurchLine.FIND('-') THEN
                  REPEAT
                     IF NOT GSTManagement.GetReverseCharge(PurchHeader."Pay-to Vendor No.") AND
                       GSTManagement.IsGSTApplicable(PurchHeader.Structure) AND
                       StrOrdLineDet.DoesTDSBaseIncludeGST(PurchHeader) THEN
                         CurrentPOAmount := CurrentPOAmount + CurrPurchLine."Line Amount" + "Total GST Amount" - CurrPurchLine."Inv. Discount Amount"
                      ELSE
                    CurrentPOAmount := CurrentPOAmount + CurrPurchLine."Line Amount" - CurrPurchLine."Inv. Discount Amount";

                    IF StrOrdLineDet.FindLinesInclInTDSBase(CurrPurchLine) THEN
                      REPEAT
                        CurrentPOAmount += StrOrdLineDet.Amount;
                      UNTIL StrOrdLineDet.NEXT = 0;
                    CurrentPOTDSAmt := CurrentPOTDSAmt + CurrPurchLine."Total TDS Including SHE CESS";
                  UNTIL CurrPurchLine.NEXT = 0;

                IF "Currency Code" <> '' THEN
                  CurrentPOAmount := ROUND(
                      CurrExchRate.ExchangeAmtFCYToLCY(
                        PurchHeader."Posting Date","Currency Code",
                        CurrentPOAmount,"Currency Factor"));

                CurrPurchLine.RESET;
                CurrPurchLine.SETRANGE("Document Type","Document Type");
                CurrPurchLine.SETRANGE("Document No.","Document No.");
                CurrPurchLine.SETRANGE("TDS Group","TDS Group");
                CurrPurchLine.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
                CurrPurchLine.SETRANGE("Assessee Code","Assessee Code");
                CurrPurchLine.SETRANGE("Per Contract",TRUE);
                CurrPurchLine.SETFILTER("Line No.",'<%1',"Line No.");
                IF CurrPurchLine.FIND('-') THEN
                  REPEAT
                    CurrentPOContractAmt := CurrentPOContractAmt + CurrPurchLine."TDS Base Amount";
                    CurrentPOContractTDSAmt := CurrentPOContractTDSAmt + CurrPurchLine."Total TDS Including SHE CESS";
                  UNTIL CurrPurchLine.NEXT = 0;

                IF NODLines.FindNODLines(NODLines.Type::Vendor,"Pay-to Vendor No.","TDS Nature of Deduction") THEN
                  IF NOT TDSSetup.FindOnDate(
                    "TDS Nature of Deduction","Assessee Code","TDS Group",NODLines."Concessional Code",PurchHeader."Posting Date",
                    "Nature of Remittance","Act Applicable","Country Code")
                  THEN BEGIN
                    "TDS %" := 0;
                    TDSSetupPercentage := 0;
                    "eCESS % on TDS" := 0;
                    "SHE Cess % On TDS" := 0;
                    "Work Tax %" := 0;
                    "Surcharge %" := 0;
                    "TDS Amount" := 0;
                    "Surcharge Amount" := 0;
                    "Work Tax Amount" := 0;
                    "Total TDS Including SHE CESS" := 0;
                    "Bal. TDS Including SHE CESS" := 0;
                  END ELSE BEGIN
                    IF (Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::" ") AND (Vendor."P.A.N. No." <> '') THEN
                      TDSSetupPercentage := TDSSetup."TDS %"
                    ELSE
                      TDSSetupPercentage := TDSSetup."Non PAN TDS %";
                    IF (PurchHeader."Applies-to Doc. No." = '') AND (PurchHeader."Applies-to ID" = '') THEN BEGIN
                      IF NODLines."Threshold Overlook" THEN BEGIN
                        "TDS Base Amount" := TDSBaseLCY;
                        "TDS %" := TDSSetupPercentage;
                        "eCESS % on TDS" := TDSSetup."eCESS %";
                        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                        IF NODLines."Surcharge Overlook" THEN BEGIN
                          "Surcharge Base Amount" := TDSBaseLCY;
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                          TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                          IF (PreviousAmount + CurrentPOAmount) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                            "Surcharge Base Amount" := TDSBaseLCY;
                            "Surcharge %" := TDSSetup."Surcharge %";
                            PreviousSurchargeAmt := 0;
                          END ELSE BEGIN
                            IF (PreviousAmount + CurrentPOAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                              "Surcharge Base Amount" := PreviousAmount + CurrentPOAmount + TDSBaseLCY;
                              "Surcharge %" := TDSSetup."Surcharge %";
                              TDSPercentage := "TDS %";
                              SurchargePercentage := "Surcharge %";
                              IF "Surcharge %" <> 0 THEN
                                CalculateSurcharge := TRUE;
                              TDSEntry.RESET;
                              TDSEntry.SETCURRENTKEY(
                                "Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                              TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                              TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                              TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                              TDSEntry.SETRANGE("TDS Group","TDS Group");
                              TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                              TDSEntry.SETRANGE(Applied,FALSE);
                              IF TDSEntry.FIND('-') THEN
                                REPEAT
                                  InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,FALSE);
                                UNTIL TDSEntry.NEXT = 0;
                              IF TDSEntry.FINDFIRST THEN BEGIN
                                SurchargeBaseLCY := TDSBaseLCY + CurrentPOAmount;
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                              END ELSE BEGIN
                                SurchargeBaseLCY := "Surcharge Base Amount";
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                              END;
                            END ELSE
                              "Surcharge %" := 0;
                          END;
                        END;
                      END ELSE BEGIN
                        TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                        IF (PreviousAmount + CurrentPOAmount) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                          "TDS Base Amount" := TDSBaseLCY - CurrentPOContractAmt;
                          "TDS %" := TDSSetupPercentage;
                          "eCESS % on TDS" := TDSSetup."eCESS %";
                          "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                          IF NODLines."Surcharge Overlook" THEN BEGIN
                            "Surcharge Base Amount" := TDSBaseLCY;
                            "Surcharge %" := TDSSetup."Surcharge %";
                          END ELSE
                            IF (PreviousAmount + CurrentPOAmount) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                              "Surcharge Base Amount" := TDSBaseLCY;
                              "Surcharge %" := TDSSetup."Surcharge %";
                              PreviousSurchargeAmt := 0;
                            END ELSE BEGIN
                              IF (PreviousAmount + CurrentPOAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                "Surcharge Base Amount" := PreviousAmount + CurrentPOAmount + TDSBaseLCY;
                                "Surcharge %" := TDSSetup."Surcharge %";
                                TDSPercentage := "TDS %";
                                SurchargePercentage := "Surcharge %";
                                IF "Surcharge %" <> 0 THEN
                                  CalculateSurcharge := TRUE;
                                TDSEntry.RESET;
                                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",
                                  Applied);
                                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                                TDSEntry.SETRANGE("TDS Group","TDS Group");
                                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                                TDSEntry.SETRANGE(Applied,FALSE);
                                IF TDSEntry.FIND('-') THEN
                                  REPEAT
                                    InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,FALSE);
                                  UNTIL TDSEntry.NEXT = 0;
                                IF TDSEntry.FIND('-') THEN BEGIN
                                  SurchargeBaseLCY := TDSBaseLCY + CurrentPOAmount;
                                  InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                                END ELSE BEGIN
                                  SurchargeBaseLCY := "Surcharge Base Amount";
                                  InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                                END;
                              END ELSE
                                "Surcharge %" := 0;
                            END;
                        END ELSE
                          IF TDSGroup."Per Contract Value" <> 0 THEN
                            IF (PreviousAmount + CurrentPOAmount + TDSBaseLCY) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                              "TDS Base Amount" := (PreviousAmount + TDSBaseLCY) - PreviousContractAmount + CurrentPOAmount -
                                CurrentPOContractAmt;
                              "TDS %" := TDSSetupPercentage;
                              "eCESS % on TDS" := TDSSetup."eCESS %";
                              "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                              // Surcharge code starts here
                              IF NODLines."Surcharge Overlook" THEN BEGIN
                                "Surcharge Base Amount" := ((PreviousAmount + TDSBaseLCY) - PreviousContractAmount +
                                                            CurrentPOAmount - CurrentPOContractAmt);
                                "Surcharge %" := TDSSetup."Surcharge %";
                              END ELSE BEGIN
                                TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                                IF (PreviousAmount + CurrentPOAmount) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                  "Surcharge Base Amount" := TDSBaseLCY;
                                  "Surcharge %" := TDSSetup."Surcharge %";
                                END ELSE BEGIN
                                  IF (PreviousAmount + CurrentPOAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                    "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - PreviousContractAmount + CurrentPOAmount;
                                    "Surcharge %" := TDSSetup."Surcharge %";
                                  END ELSE
                                    "Surcharge %" := 0;
                                END;
                              END;
                              // Surcharge code ends here
                              TDSPercentage := "TDS %";
                              SurchargePercentage := "Surcharge %";
                              IF "Surcharge %" <> 0 THEN
                                CalculateSurcharge := TRUE;
                              TDSEntry.RESET;
                              TDSEntry.SETCURRENTKEY(
                                "Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                              TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                              TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                              TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                              TDSEntry.SETRANGE("TDS Group","TDS Group");
                              TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                              TDSEntry.SETRANGE(Applied,FALSE);
                              IF TDSEntry.FIND('-') THEN
                                REPEAT
                                  InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,TRUE);
                                UNTIL TDSEntry.NEXT = 0;
                              IF TDSEntry.FIND('-') THEN BEGIN
                                SurchargeBaseLCY := TDSBaseLCY + CurrentPOAmount;
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                              END ELSE BEGIN
                                TDSBaseLCY := "TDS Base Amount";
                                SurchargeBaseLCY := "Surcharge Base Amount";
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                              END;
                            END ELSE BEGIN
                              IF (TDSBaseLCY + CurrentPOAmount) > TDSGroup."Per Contract Value" THEN BEGIN
                                "Per Contract" := TRUE;
                                "TDS Base Amount" := TDSBaseLCY + CurrentPOAmount - CurrentPOContractAmt;
                                "TDS %" := TDSSetupPercentage;
                                "eCESS % on TDS" := TDSSetup."eCESS %";
                                "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                                IF NODLines."Surcharge Overlook" THEN BEGIN
                                  "Surcharge Base Amount" := ABS(TDSBaseLCY + CurrentPOAmount - CurrentPOContractAmt);
                                  "Surcharge %" := TDSSetup."Surcharge %";
                                END ELSE BEGIN
                                  TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                                  IF TDSBaseLCY > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                    "Surcharge Base Amount" := TDSBaseLCY;
                                    "Surcharge %" := TDSSetup."Surcharge %";
                                  END ELSE
                                    "Surcharge %" := 0;
                                END;
                              END ELSE BEGIN
                                "TDS Base Amount" := TDSBaseLCY;
                                "TDS %" := 0;
                                "eCESS % on TDS" := 0;
                                "SHE Cess % On TDS" := 0;
                              END;
                            END
                          ELSE // New Code Ends here
                            IF (PreviousAmount + CurrentPOAmount + TDSBaseLCY) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                              IF PreviousTDSAmt = 0 THEN
                                "TDS Base Amount" := PreviousAmount + TDSBaseLCY + CurrentPOAmount - PreviousBaseAMTWithTDS
                              ELSE
                                "TDS Base Amount" := TDSBaseLCY;
                              "TDS %" := TDSSetupPercentage;
                              "eCESS % on TDS" := TDSSetup."eCESS %";
                              "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                              IF NODLines."Surcharge Overlook" THEN BEGIN
                                "Surcharge Base Amount" := ABS(PreviousAmount + CurrentPOAmount +
                                    TDSBaseLCY);
                                "Surcharge %" := TDSSetup."Surcharge %";
                              END ELSE BEGIN
                                TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                                IF (PreviousAmount + CurrentPOAmount) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                  "Surcharge Base Amount" := TDSBaseLCY;
                                  "Surcharge %" := TDSSetup."Surcharge %";
                                  PreviousSurchargeAmt := 0;
                                END ELSE BEGIN
                                  IF (PreviousAmount + CurrentPOAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                    "Surcharge Base Amount" := PreviousAmount + CurrentPOAmount + TDSBaseLCY;
                                    "Surcharge %" := TDSSetup."Surcharge %";
                                  END ELSE
                                    "Surcharge %" := 0;
                                END;
                              END;
                              TDSPercentage := "TDS %";
                              SurchargePercentage := "Surcharge %";
                              IF "Surcharge %" <> 0 THEN
                                CalculateSurcharge := TRUE;
                              TDSEntry.RESET;
                              TDSEntry.SETCURRENTKEY(
                                "Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                              TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                              TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                              TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                              TDSEntry.SETRANGE("TDS Group","TDS Group");
                              TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                              TDSEntry.SETRANGE("Bal. TDS Including SHE CESS",0);
                              TDSEntry.SETFILTER("TDS Line Amount",'>%1',0);
                              TDSEntry.SETRANGE(Applied,FALSE);
                              IF TDSEntry.FIND('-') THEN
                                REPEAT
                                  InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,TRUE);
                                UNTIL TDSEntry.NEXT = 0;
                              IF TDSEntry.FIND('-') THEN BEGIN
                                TDSBaseLCY := TDSBaseLCY + CurrentPOAmount;
                                SurchargeBaseLCY := TDSBaseLCY;
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                              END ELSE BEGIN
                                TDSBaseLCY := "TDS Base Amount";
                                SurchargeBaseLCY := "Surcharge Base Amount";
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,FALSE);
                              END;
                            END ELSE BEGIN // something to be added here..
                              "TDS Base Amount" := TDSBaseLCY;
                              "TDS %" := 0;
                              "eCESS % on TDS" := 0;
                              "SHE Cess % On TDS" := 0;
                              "Surcharge %" := 0;
                              "Surcharge Amount" := 0;
                              "TDS Amount" := 0;
                              "TDS Amount Including Surcharge" := 0;
                            END;
                        END;
                    END ELSE BEGIN
                      IF PurchHeader."Applies-to Doc. No." <> '' THEN BEGIN
                        IF GSTManagement.IsGSTApplicable(PurchHeader.Structure) THEN BEGIN
                          AppliedAmountDoc := 0;
                          CheckTDSValidation(PurchHeader);
                          AppliedAmountDoc := GetAppliedDocAmount(PurchHeader,PurchLine);
                        END;
                        IF AppliedAmountDoc <> 0 THEN BEGIN
                          IF TDSBaseLCY + CurrentPOAmount >= AppliedAmountDoc THEN BEGIN
                            TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                            IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                              IF PreviousTDSAmt = 0 THEN
                                "TDS Base Amount" := PreviousAmount + TDSBaseLCY - ABS(AppliedAmountDoc)
                              ELSE
                                IF CurrentPOTDSAmt = 0 THEN BEGIN
                                  IF PreviousContractAmount <> 0 THEN
                                    "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmountDoc) +
                                      (PreviousAmount - PreviousContractAmount) + (CurrentPOAmount - CurrentPOContractAmt)
                                  ELSE
                                    "TDS Base Amount" := TDSBaseLCY + (CurrentPOAmount - CurrentPOContractAmt) -
                                      ABS(AppliedAmountDoc);
                                END ELSE
                                  IF CurrentPOAmount >= ABS(AppliedAmountDoc) THEN BEGIN
                                    IF PreviousContractAmount <> 0 THEN
                                      "TDS Base Amount" := TDSBaseLCY + (PreviousAmount - PreviousContractAmount)
                                    ELSE
                                      "TDS Base Amount" := TDSBaseLCY;
                                  END ELSE BEGIN
                                    IF PreviousContractAmount <> 0 THEN
                                      "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmountDoc) +
                                        (PreviousAmount - PreviousContractAmount)
                                    ELSE
                                      "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmountDoc);
                                  END;
                              IF PreviousSurchargeAmt = 0 THEN
                                "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - ABS(AppliedAmountDoc)
                              ELSE BEGIN
                                IF PreviousContractAmount <> 0 THEN
                                  "Surcharge Base Amount" := TDSBaseLCY
                                    - ABS(AppliedAmountDoc) + (PreviousAmount - PreviousContractAmount)
                                ELSE
                                  "Surcharge Base Amount" := TDSBaseLCY
                                    - ABS(AppliedAmountDoc) + (PreviousAmount - PreviousContractAmount);
                              END;
                            END ELSE BEGIN // without contract value
                              IF PreviousTDSAmt = 0 THEN
                                "TDS Base Amount" := PreviousAmount + TDSBaseLCY
                                  - ABS(AppliedAmountDoc) + CurrentPOAmount
                              ELSE BEGIN
                                IF CurrentPOTDSAmt = 0 THEN
                                  "TDS Base Amount" := CurrentPOAmount + TDSBaseLCY - ABS(AppliedAmountDoc)
                                ELSE BEGIN
                                  IF CurrentPOAmount >= ABS(AppliedAmountDoc) THEN
                                    "TDS Base Amount" := TDSBaseLCY;
                                END;
                              END;
                              IF PreviousSurchargeAmt = 0 THEN
                                "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - ABS(AppliedAmountDoc)
                              ELSE
                                "Surcharge Base Amount" := TDSBaseLCY - ABS(AppliedAmountDoc);
                            END;
                            "Temp TDS Base" := TDSBaseLCY - ABS(AppliedAmountDoc);
                          END ELSE BEGIN
                            "TDS Base Amount" := 0;
                            "Surcharge Base Amount" := 0;
                            "Temp TDS Base" := 0;
                          END;
                        END ELSE BEGIN
                          "TDS Base Amount" := TDSBaseLCY;
                          "Surcharge Base Amount" := TDSBaseLCY;
                        END;
                      END;
                      IF PurchHeader."Applies-to ID" <> '' THEN BEGIN
                        IF AppliedAmount <> 0 THEN BEGIN
                          IF TDSBaseLCY + CurrentPOAmount >= AppliedAmount THEN BEGIN
                            TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                            IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                              IF PreviousTDSAmt = 0 THEN
                                "TDS Base Amount" := PreviousAmount + TDSBaseLCY - ABS(AppliedAmount)
                              ELSE BEGIN
                                IF CurrentPOTDSAmt = 0 THEN BEGIN
                                  IF PreviousContractAmount <> 0 THEN
                                    "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmount) +
                                      (PreviousAmount - PreviousContractAmount) + (CurrentPOAmount - CurrentPOContractAmt)
                                  ELSE
                                    "TDS Base Amount" := TDSBaseLCY + (CurrentPOAmount - CurrentPOContractAmt) -
                                      ABS(AppliedAmount);
                                END ELSE BEGIN
                                  IF CurrentPOAmount >= ABS(AppliedAmount) THEN BEGIN
                                    IF PreviousContractAmount <> 0 THEN
                                      "TDS Base Amount" := TDSBaseLCY + (PreviousAmount - PreviousContractAmount)
                                    ELSE
                                      "TDS Base Amount" := TDSBaseLCY;
                                  END ELSE BEGIN
                                    IF PreviousContractAmount <> 0 THEN
                                      "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmount) +
                                        (PreviousAmount - PreviousContractAmount)
                                    ELSE
                                      "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmount);
                                  END;
                                END;
                              END;
                              IF PreviousSurchargeAmt = 0 THEN
                                "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - ABS(AppliedAmount)
                              ELSE BEGIN
                                IF PreviousContractAmount <> 0 THEN
                                  "Surcharge Base Amount" := TDSBaseLCY
                                    - ABS(AppliedAmount) + (PreviousAmount - PreviousContractAmount)
                                ELSE
                                  "Surcharge Base Amount" := TDSBaseLCY
                                    - ABS(AppliedAmount) + (PreviousAmount - PreviousContractAmount);
                              END;
                            END ELSE BEGIN // without contract value
                              IF PreviousTDSAmt = 0 THEN
                                "TDS Base Amount" := PreviousAmount + TDSBaseLCY
                                  - ABS(AppliedAmount) + CurrentPOAmount
                              ELSE BEGIN
                                IF CurrentPOTDSAmt = 0 THEN
                                  "TDS Base Amount" := CurrentPOAmount + TDSBaseLCY - ABS(AppliedAmount)
                                ELSE BEGIN
                                  IF CurrentPOAmount >= ABS(AppliedAmount) THEN
                                    "TDS Base Amount" := TDSBaseLCY
                                  ELSE
                                    "TDS Base Amount" := TDSBaseLCY - ABS(AppliedAmount);
                                END;
                              END;
                              IF PreviousSurchargeAmt = 0 THEN
                                "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - ABS(AppliedAmount)
                              ELSE
                                "Surcharge Base Amount" := TDSBaseLCY - ABS(AppliedAmount);
                            END;
                            "Temp TDS Base" := TDSBaseLCY - ABS(AppliedAmount);
                          END ELSE BEGIN
                            "TDS Base Amount" := 0;
                            "Surcharge Base Amount" := 0;
                            "Temp TDS Base" := 0
                          END;
                        END ELSE BEGIN
                          "TDS Base Amount" := TDSBaseLCY;
                          "Surcharge Base Amount" := TDSBaseLCY;
                        END;
                      END;
                      IF NODLines."Threshold Overlook" THEN BEGIN
                        "TDS Base Amount" := "TDS Base Amount";
                        "TDS %" := TDSSetupPercentage;
                        "eCESS % on TDS" := TDSSetup."eCESS %";
                        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                        IF NODLines."Surcharge Overlook" THEN BEGIN
                          "Surcharge Base Amount" := ABS("TDS Base Amount");
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                          TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                          IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                            "Surcharge Base Amount" := ABS("TDS Base Amount");
                            "Surcharge %" := TDSSetup."Surcharge %";
                            PreviousSurchargeAmt := 0;
                          END ELSE BEGIN
                            IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                              "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                              "Surcharge %" := TDSSetup."Surcharge %";
                              TDSPercentage := "TDS %";
                              SurchargePercentage := "Surcharge %";
                              TempTDSBase := "Temp TDS Base";
                              InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,TRUE);
                              IF "Surcharge %" <> 0 THEN
                                CalculateSurcharge := TRUE;
                              TDSEntry.RESET;
                              TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",
                                Applied);
                              TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                              TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                              TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                              TDSEntry.SETRANGE("TDS Group","TDS Group");
                              TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                              TDSEntry.SETRANGE(Applied,FALSE);
                              IF TDSEntry.FIND('-') THEN
                                REPEAT
                                  InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,FALSE);
                                UNTIL TDSEntry.NEXT = 0;
                            END ELSE BEGIN
                              "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                              "Surcharge %" := 0;
                              "Surcharge Amount" := 0;
                            END;
                          END;
                        END;
                      END ELSE BEGIN
                        TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                        IF PreviousAmount > TDSGroup."TDS Threshold Amount" THEN BEGIN
                          "TDS Base Amount" := "TDS Base Amount";
                          "TDS %" := TDSSetupPercentage;
                          "eCESS % on TDS" := TDSSetup."eCESS %";
                          "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                          IF NODLines."Surcharge Overlook" THEN BEGIN
                            "Surcharge Base Amount" := ABS("TDS Base Amount");
                            "Surcharge %" := TDSSetup."Surcharge %";
                          END ELSE BEGIN
                            IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                              "Surcharge Base Amount" := ABS("TDS Base Amount");
                              "Surcharge %" := TDSSetup."Surcharge %";
                              PreviousSurchargeAmt := 0;
                            END ELSE BEGIN
                              IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                                "Surcharge %" := TDSSetup."Surcharge %";
                                TDSPercentage := "TDS %";
                                SurchargePercentage := "Surcharge %";
                                TempTDSBase := "Temp TDS Base";
                                InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,TRUE);
                                IF "Surcharge %" <> 0 THEN
                                  CalculateSurcharge := TRUE;
                                TDSEntry.RESET;
                                TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",
                                  Applied);
                                TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                                TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                                TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                                TDSEntry.SETRANGE("TDS Group","TDS Group");
                                TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                                TDSEntry.SETRANGE(Applied,FALSE);
                                IF TDSEntry.FIND('-') THEN
                                  REPEAT
                                    InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,FALSE);
                                  UNTIL TDSEntry.NEXT = 0;
                              END ELSE BEGIN
                                "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                                "Surcharge %" := 0;
                                "Surcharge Amount" := 0;
                              END;
                            END;
                          END;
                        END ELSE BEGIN
                          IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                            IF (ABS("TDS Base Amount") + PreviousContractAmount) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                              "TDS %" := TDSSetupPercentage;
                              "eCESS % on TDS" := TDSSetup."eCESS %";
                              "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                              IF NODLines."Surcharge Overlook" THEN BEGIN
                                "Surcharge Base Amount" := ABS("TDS Base Amount");
                                "Surcharge %" := TDSSetup."Surcharge %";
                              END ELSE BEGIN
                                TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                                IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                  "Surcharge Base Amount" := ABS("TDS Base Amount");
                                  "Surcharge %" := TDSSetup."Surcharge %";
                                  PreviousSurchargeAmt := 0;
                                END ELSE BEGIN
                                  IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                                    "Surcharge %" := TDSSetup."Surcharge %";
                                  END ELSE BEGIN
                                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                                    "Surcharge %" := 0;
                                    "Surcharge Amount" := 0;
                                  END;
                                END;
                              END;
                              TDSPercentage := "TDS %";
                              SurchargePercentage := "Surcharge %";
                              TempTDSBase := "Temp TDS Base";
                              InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,TRUE);
                              IF "Surcharge %" <> 0 THEN
                                CalculateSurcharge := TRUE;
                              TDSEntry.RESET;
                              TDSEntry.SETCURRENTKEY(
                                "Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                              TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                              TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                              TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                              TDSEntry.SETRANGE("TDS Group","TDS Group");
                              TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                              TDSEntry.SETRANGE(Applied,FALSE);
                              IF TDSEntry.FIND('-') THEN
                                REPEAT
                                  InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,TRUE);
                                UNTIL TDSEntry.NEXT = 0;
                            END ELSE BEGIN
                              IF ABS("TDS Base Amount") > TDSGroup."Per Contract Value" THEN BEGIN
                                "Per Contract" := TRUE;
                                "TDS %" := TDSSetupPercentage;
                                "eCESS % on TDS" := TDSSetup."eCESS %";
                                "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                                IF NODLines."Surcharge Overlook" THEN BEGIN
                                  "Surcharge Base Amount" := TDSBaseLCY;
                                  "Surcharge %" := TDSSetup."Surcharge %";
                                END ELSE BEGIN
                                  TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                                  IF TDSBaseLCY > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                    "Surcharge Base Amount" := TDSBaseLCY;
                                    "Surcharge %" := TDSSetup."Surcharge %";
                                  END ELSE
                                    "Surcharge %" := 0;
                                END;
                              END ELSE BEGIN
                                "TDS Base Amount" := ABS("TDS Base Amount");
                                "TDS %" := 0;
                                "eCESS % on TDS" := 0;
                                "SHE Cess % On TDS" := 0;
                                "TDS Amount" := 0;
                                "Surcharge %" := 0;
                                "Surcharge Amount" := 0;
                                "TDS Amount Including Surcharge" := 0;
                              END;
                            END;
                          END ELSE BEGIN
                            IF ABS("TDS Base Amount") > TDSGroup."TDS Threshold Amount" THEN BEGIN
                              "TDS %" := TDSSetupPercentage;
                              "eCESS % on TDS" := TDSSetup."eCESS %";
                              "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
                              IF NODLines."Surcharge Overlook" THEN BEGIN
                                "Surcharge Base Amount" := ABS("TDS Base Amount");
                                "Surcharge %" := TDSSetup."Surcharge %";
                              END ELSE BEGIN
                                TDSGroup.FindOnDate("TDS Group",PurchHeader."Posting Date");
                                IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                  "Surcharge Base Amount" := ABS("TDS Base Amount");
                                  "Surcharge %" := TDSSetup."Surcharge %";
                                  PreviousSurchargeAmt := 0;
                                END ELSE BEGIN
                                  IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                                    "Surcharge %" := TDSSetup."Surcharge %";
                                  END ELSE BEGIN
                                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                                    "Surcharge %" := 0;
                                    "Surcharge Amount" := 0;
                                  END;
                                END;
                              END;
                              TDSPercentage := "TDS %";
                              SurchargePercentage := "Surcharge %";
                              TempTDSBase := "Temp TDS Base";
                              InsertGenTDSBuf(TDSBaseLCY,TempTDSBase,SurchargeBaseLCY,TDSPercentage,SurchargePercentage,TRUE);
                              IF "Surcharge %" <> 0 THEN
                                CalculateSurcharge := TRUE;
                              TDSEntry.RESET;
                              TDSEntry.SETCURRENTKEY(
                                "Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
                              TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
                              TDSEntry.SETRANGE("Party Code","Pay-to Vendor No.");
                              TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
                              TDSEntry.SETRANGE("TDS Group","TDS Group");
                              TDSEntry.SETRANGE("Assessee Code","Assessee Code");
                              TDSEntry.SETRANGE(Applied,FALSE);
                              IF TDSEntry.FIND('-') THEN
                                REPEAT
                                  InsertTDSBuf(TDSEntry,PurchHeader."Posting Date",CalculateSurcharge,TRUE);
                                UNTIL TDSEntry.NEXT = 0;
                            END ELSE BEGIN
                              "TDS Base Amount" := ABS("TDS Base Amount");
                              "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                              "TDS %" := 0;
                              "eCESS % on TDS" := 0;
                              "SHE Cess % On TDS" := 0;
                              "TDS Amount" := 0;
                              "Surcharge %" := 0;
                              "Surcharge Amount" := 0;
                              "TDS Amount Including Surcharge" := 0;
                            END;
                          END;
                        END;
                      END;
                    END;

                    IF TDSBaseLCY <> 0 THEN BEGIN
                      IF TDSBuf[1].FIND('+') THEN BEGIN
                        REPEAT
                          CalculatedTDSAmt :=
                            CalculatedTDSAmt + (TDSBuf[1]."TDS Base Amount" - TDSBuf[1]."Contract TDS Ded. Base Amount") *
                            TDSBuf[1]."TDS %" / 100;
                          SurchargeBase := SurchargeBase + (TDSBuf[1]."TDS %" *
                                                            (TDSBuf[1]."Surcharge Base Amount" -
                                                             TDSBuf[1]."Contract TDS Ded. Base Amount") / 100);
                          CalculatedSurchargeAmt := CalculatedSurchargeAmt + (TDSBuf[1]."TDS %" *
                                                                              (TDSBuf[1]."Surcharge Base Amount" -
                                                                               TDSBuf[1]."Contract TDS Ded. Base Amount") / 100)
                            * (TDSBuf[1]."Surcharge %" / 100);
                        UNTIL TDSBuf[1].NEXT(-1) = 0;
                        IF TDSBaseLCY < 0 THEN BEGIN
                          "TDS Amount" := -ROUND(CalculatedTDSAmt,Currency."Amount Rounding Precision");
                          "Surcharge Amount" := -ROUND(CalculatedSurchargeAmt,Currency."Amount Rounding Precision");
                        END ELSE BEGIN
                          "TDS Amount" := ROUND(CalculatedTDSAmt,Currency."Amount Rounding Precision");
                          "Surcharge Amount" := ROUND(CalculatedSurchargeAmt,Currency."Amount Rounding Precision");
                        END;
                        IF "TDS Base Amount" <> 0 THEN
                          "TDS %" := ABS(ROUND(CalculatedTDSAmt * 100 / "TDS Base Amount",Currency."Amount Rounding Precision"));
                        IF SurchargeBase <> 0 THEN
                          "Surcharge %" := ABS(ROUND(CalculatedSurchargeAmt * 100 / SurchargeBase,Currency."Amount Rounding Precision"))
                            ;
                      END ELSE BEGIN
                        "TDS Amount" := ROUND("TDS %" * "TDS Base Amount" / 100,Currency."Amount Rounding Precision");
                        "Surcharge Amount" := ("TDS %" * "Surcharge Base Amount" / 100) * ("Surcharge %" / 100);
                      END;
                      "TDS Amount Including Surcharge" := ("TDS Amount" + "Surcharge Amount");
                      "eCESS on TDS Amount" := ROUND("TDS Amount Including Surcharge" * "eCESS % on TDS" / 100,
                          Currency."Amount Rounding Precision") ;
                      "SHE Cess on TDS Amount" := ROUND("TDS Amount Including Surcharge" * "SHE Cess % On TDS" / 100,
                          Currency."Amount Rounding Precision") ;
                      "Total TDS Including SHE CESS" := "TDS Amount" + "Surcharge Amount" + "eCESS on TDS Amount" +
                        "SHE Cess on TDS Amount";
                      IF "Currency Code" <> '' THEN BEGIN
                        "TDS Amount" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              PurchHeader."Posting Date","Currency Code",
                              "TDS Amount","Currency Factor"));
                        "Surcharge Amount" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              PurchHeader."Posting Date","Currency Code",
                              "Surcharge Amount","Currency Factor"));
                        "TDS Amount Including Surcharge" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              PurchHeader."Posting Date","Currency Code",
                              "TDS Amount Including Surcharge","Currency Factor"));
                        "eCESS on TDS Amount" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              PurchHeader."Posting Date","Currency Code",
                              "eCESS on TDS Amount","Currency Factor"));
                        "SHE Cess on TDS Amount" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              PurchHeader."Posting Date","Currency Code",
                              "SHE Cess on TDS Amount","Currency Factor"));
                        "Total TDS Including SHE CESS" :=
                          ROUND(
                            CurrExchRate.ExchangeAmtLCYToFCY(
                              PurchHeader."Posting Date","Currency Code",
                              "Total TDS Including SHE CESS","Currency Factor"));
                        "Bal. TDS Including SHE CESS" := "Total TDS Including SHE CESS";
                      END;
                    END;
                  END;

                TDSSetup.RESET;
                TDSSetup.SETRANGE("TDS Nature of Deduction","Work Tax Nature Of Deduction");
                TDSSetup.SETRANGE("Assessee Code","Assessee Code");
                TDSSetup.SETRANGE("TDS Group","Work Tax Group");
                TDSSetup.SETRANGE("Effective Date",0D,PurchHeader."Posting Date");

                IF "Work Tax Nature Of Deduction" <> '' THEN BEGIN
                  NODLines.RESET;
                  NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                  NODLines.SETRANGE("No.","Pay-to Vendor No.");
                  NODLines.SETRANGE("NOD/NOC","Work Tax Nature Of Deduction");
                  IF NODLines.FIND('-') THEN BEGIN
                    IF NODLines."Concessional Code" <> '' THEN
                      TDSSetup.SETRANGE("Concessional Code",NODLines."Concessional Code")
                    ELSE
                      TDSSetup.SETRANGE("Concessional Code",'');
                    IF NOT TDSSetup.FINDLAST THEN BEGIN
                      "Work Tax %" := 0;
                      "Work Tax Base Amount" := 0;
                      "Work Tax Amount" := 0;
                    END ELSE BEGIN
                      "Work Tax %" := TDSSetup."TDS %";
                      "Work Tax Base Amount" := "Line Amount" - "Inv. Discount Amount";

                      IF StrOrdLineDet.FindLinesInclInTDSBase(PurchLine) THEN
                        REPEAT
                          IF ReverseChargePct > 0 THEN
                            StrOrdLineDet.Amount := ROUND(StrOrdLineDet.Amount * (100 - ReverseChargePct) / 100);
                          "Work Tax Base Amount" := "Work Tax Base Amount" + StrOrdLineDet.Amount;
                        UNTIL StrOrdLineDet.NEXT = 0;
                      IF RemainingAmount > 0 THEN
                        IF RemainingAmount >= "Work Tax Base Amount" THEN BEGIN
                          RemainingAmount := RemainingAmount - "Work Tax Base Amount";
                          "Work Tax Base Amount" := 0;
                        END ELSE BEGIN
                          "Work Tax Base Amount" := "Work Tax Base Amount" - RemainingAmount;
                          RemainingAmount := 0;
                        END;
                      "Work Tax Base Amount" := ROUND("Work Tax Base Amount",Currency."Amount Rounding Precision");
                    END;
                    "Work Tax Amount" := RoundTDSAmount("Work Tax Base Amount" * "Work Tax %" / 100);
                  END;
                END;
              END;
              PurchLine.MODIFY;
            UNTIL PurchLine.NEXT = 0;
          END;
        END;
    END;

    LOCAL PROCEDURE RoundTDSAmount@1280019(TDSAmount@1280000 : Decimal) : Decimal;
    VAR
      TDSRoundingDirection@1280002 : Text[1];
      TDSRoundingPrecision@1280001 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."TDS Rounding Type" OF
        GLSetup."TDS Rounding Type"::Nearest:
          TDSRoundingDirection := '=';
        GLSetup."TDS Rounding Type"::Up:
          TDSRoundingDirection := '>';
        GLSetup."TDS Rounding Type"::Down:
          TDSRoundingDirection := '<';
      END;
      IF GLSetup."TDS Rounding Precision" <> 0 THEN
        TDSRoundingPrecision := GLSetup."TDS Rounding Precision"
      ELSE
        TDSRoundingPrecision := 0.01;
      EXIT(ROUND(TDSAmount,TDSRoundingPrecision,TDSRoundingDirection));
    END;

    LOCAL PROCEDURE InsertTDSBuf@1280010(TDSEntry@1280000 : Record 13729;PostingDate@1280001 : Date;CalculateSurcharge@1280002 : Boolean;CalculateTDS@1280003 : Boolean);
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      WITH TDSEntry DO BEGIN
        TDSBuf[1]."TDS Nature of Deduction" := "TDS Nature of Deduction";
        TDSBuf[1]."Assessee Code" := "Assessee Code";
        TDSBuf[1]."Party Code" := "Party Code";
        TDSBuf[1]."Party Type" := "Party Type";
        IF CalculateTDS THEN BEGIN
          TDSBuf[1]."TDS Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          IF "Per Contract" THEN
            TDSBuf[1]."Contract TDS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
        END ELSE
          TDSBuf[1]."TDS Base Amount" := 0;
        IF CalculateSurcharge THEN BEGIN
          TDSBuf[1]."Surcharge Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          IF "Per Contract" THEN
            TDSBuf[1]."Contract TDS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
        END ELSE
          TDSBuf[1]."Surcharge Base Amount" := 0;
        TDSSetup.RESET;
        TDSSetup.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
        TDSSetup.SETRANGE("Assessee Code","Assessee Code");
        TDSSetup.SETRANGE("TDS Group","TDS Group");
        TDSSetup.SETRANGE("Effective Date",0D,PostingDate);
        NODLines.RESET;
        NODLines.SETRANGE(Type,"Party Type");
        NODLines.SETRANGE("No.","Party Code");
        NODLines.SETRANGE("NOD/NOC","TDS Nature of Deduction");
        IF NODLines.FIND('-') THEN
          IF NODLines."Concessional Code" <> '' THEN
            TDSSetup.SETRANGE("Concessional Code",NODLines."Concessional Code")
          ELSE
            TDSSetup.SETRANGE("Concessional Code",'');
        IF TDSSetup.FINDLAST THEN BEGIN
          IF "Party Type" = "Party Type"::Vendor THEN BEGIN
            Vendor.GET("Party Code");
            IF (Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::" ") AND (Vendor."P.A.N. No." <> '') THEN
              TDSBuf[1]."TDS %" := TDSSetup."TDS %"
            ELSE
              TDSBuf[1]."TDS %" := TDSSetup."Non PAN TDS %";
          END ELSE
            TDSBuf[1]."TDS %" := TDSSetup."TDS %";
          IF CalculateSurcharge THEN
            TDSBuf[1]."Surcharge %" := TDSSetup."Surcharge %";
        END;
        UpdTDSBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdTDSBuffer@1280009();
    BEGIN
      TDSBuf[2] := TDSBuf[1];
      IF TDSBuf[2].FIND THEN BEGIN
        TDSBuf[2]."TDS Base Amount" := TDSBuf[2]."TDS Base Amount" + TDSBuf[1]."TDS Base Amount";
        TDSBuf[2]."Surcharge Base Amount" := TDSBuf[2]."Surcharge Base Amount" + TDSBuf[1]."Surcharge Base Amount";
        TDSBuf[2]."Contract TDS Ded. Base Amount" := TDSBuf[2]."Contract TDS Ded. Base Amount" +
          TDSBuf[1]."Contract TDS Ded. Base Amount";
        TDSBuf[2].MODIFY;
      END ELSE
        TDSBuf[1].INSERT;
    END;

    LOCAL PROCEDURE InsertGenTDSBuf@1280001(TDSBaseLCY@1500000 : Decimal;TempTDSBase@1500001 : Decimal;SurchargeBaseLCY@1500002 : Decimal;TDSPercentage@1500004 : Decimal;SurchargePercentage@1500003 : Decimal;Applied@1280000 : Boolean);
    BEGIN
      CLEAR(TDSBuf[1]);
      TDSBuf[1]."TDS Nature of Deduction" := "TDS Nature of Deduction";
      TDSBuf[1]."Assessee Code" := "Assessee Code";
      TDSBuf[1]."Party Code" := "Pay-to Vendor No.";
      TDSBuf[1]."Party Type" := TDSBuf[1]."Party Type"::Vendor;
      IF Applied THEN BEGIN
        TDSBuf[1]."TDS Base Amount" := ABS(TempTDSBase);
        TDSBuf[1]."Surcharge Base Amount" := ABS(TempTDSBase);
      END ELSE BEGIN
        TDSBuf[1]."TDS Base Amount" := TDSBaseLCY;
        TDSBuf[1]."Surcharge Base Amount" := SurchargeBaseLCY;
      END;
      TDSBuf[1]."TDS %" := TDSPercentage;
      TDSBuf[1]."Surcharge %" := SurchargePercentage;
      UpdTDSBuffer;
    END;

    PROCEDURE ValidateQuantity@1280012();
    BEGIN
      IF Status = Status::Closed THEN
        ERROR(Text16362);
      IF ("Qty. to Receive" + "Qty. to Reject (Rework)" + "Qty. to Reject (V.E.)" + "Qty. to Reject (C.E.)") >
         (Quantity - ("Quantity Received" + "Qty. Rejected (C.E.)" + "Qty. Rejected (V.E.)"))
      THEN
        ERROR(Text16363);
    END;

    PROCEDURE UpdateSubConOrderLines@1280016();
    VAR
      SubOrderComponents@1280000 : Record 16321;
      SubOrderCompListVend@1280001 : Record 16322;
    BEGIN
      IF Status = Status::Closed THEN
        ERROR(Text16362);
      SubOrderComponents.RESET;
      SubOrderComponents.SETFILTER("Document No.","Document No.");
      SubOrderComponents.SETRANGE("Document Line No.","Line No.");
      SubOrderComponents.FIND('-');
      REPEAT
        SubOrderComponents.VALIDATE
        ("Quantity To Send",("Deliver Comp. For" * SubOrderComponents."Quantity per"));
        IF SubOrderComponents."Scrap %" <> 0 THEN
          SubOrderComponents."Quantity To Send" := SubOrderComponents."Quantity To Send" +
            (SubOrderComponents."Quantity To Send" / 100) * SubOrderComponents."Scrap %";
        SubOrderComponents.VALIDATE(
          "Qty. for Rework",(SubOrderComponents."Quantity per" * "Qty. to Reject (Rework)"));
        SubOrderComponents.VALIDATE("Posting date","Posting Date");
        SubOrderComponents.MODIFY;
      UNTIL SubOrderComponents.NEXT = 0;
      SubOrderCompListVend.RESET;
      SubOrderCompListVend.SETFILTER("Document No.","Document No.");
      SubOrderCompListVend.SETRANGE("Document Line No.","Line No.");
      SubOrderCompListVend.FIND('-');
      REPEAT
        SubOrderCompListVend.VALIDATE(
          "Qty. to Consume","Qty. to Receive" * SubOrderCompListVend."Quantity per");
        SubOrderCompListVend.VALIDATE(
          "Qty. to Return (C.E.)","Qty. to Reject (C.E.)" * SubOrderCompListVend."Quantity per");
        SubOrderCompListVend.VALIDATE(
          "Qty. To Return (V.E.)",(SubOrderCompListVend."Quantity per" * "Qty. to Reject (V.E.)"));

        SubOrderCompListVend.VALIDATE("Posting Date","Posting Date");
        IF SubOrderCompListVend."Scrap %" <> 0 THEN  BEGIN
          SubOrderCompListVend."Qty. to Consume" += (SubOrderCompListVend."Qty. to Consume" / 100) * SubOrderCompListVend."Scrap %";
          SubOrderCompListVend."Qty. to Return (C.E.)" +=
            (SubOrderCompListVend."Qty. to Return (C.E.)" / 100) * SubOrderCompListVend."Scrap %";
          SubOrderCompListVend."Qty. To Return (V.E.)" +=
            (SubOrderCompListVend."Qty. To Return (V.E.)" / 100) * SubOrderCompListVend."Scrap %";
        END;
        SubOrderCompListVend.MODIFY;
      UNTIL SubOrderCompListVend.NEXT = 0;
    END;

    PROCEDURE TestSubcontractingEntries@1280013();
    VAR
      ItemLedgEntry@1280000 : Record 32;
      Text16321@1280001 : TextConst 'ENU=You can not delete the purchase line as one or more ledger entries exists.;ENN=You can not delete the purchase line as one or more ledger entries exists.';
    BEGIN
      ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
      ItemLedgEntry.SETFILTER("Order No.","Prod. Order No.");
      IF ItemLedgEntry.FINDFIRST THEN
        ERROR(Text16321);
    END;

    PROCEDURE DeleteSubconDetails@1280015();
    VAR
      SubOrderComponents@1280001 : Record 16321;
      SubOrderCompListVend@1280000 : Record 16322;
    BEGIN
      SubOrderComponents.RESET;
      SubOrderComponents.SETFILTER("Document No.","Document No.");
      SubOrderComponents.SETRANGE("Document Line No.","Line No.");
      IF SubOrderComponents.FINDFIRST THEN
        SubOrderComponents.DELETEALL;

      SubOrderCompListVend.RESET;
      SubOrderCompListVend.SETFILTER("Document No.","Document No.");
      SubOrderCompListVend.SETRANGE("Document Line No.","Line No.");
      IF SubOrderCompListVend.FINDFIRST THEN
        SubOrderCompListVend.DELETEALL;
    END;

    PROCEDURE UpdateProdOrder@1280017();
    VAR
      ProdOrderLine@1280000 : Record 5406;
    BEGIN
      ProdOrderLine.GET(ProdOrderLine.Status::Released,"Prod. Order No.","Prod. Order Line No.");
      ProdOrderLine."Subcontracting Order No." := '';
      ProdOrderLine."Subcontractor Code" := '';
      ProdOrderLine.MODIFY;
    END;

    PROCEDURE PurchaseTotalLines@1280022(PurchLine@1280000 : Record 39) : Integer;
    BEGIN
      PurchLine.SETRANGE(Type,2,3);
      EXIT(PurchLine.COUNT);
    END;

    LOCAL PROCEDURE InitTDSAmounts@1500000(VAR PurchaseLine@1500000 : Record 39);
    BEGIN
      WITH PurchaseLine DO BEGIN
        "TDS %" := 0;
        "Surcharge %" := 0;
        "eCESS % on TDS" := 0;
        "SHE Cess % On TDS" := 0;
        "Work Tax %" := 0;
        "TDS Amount" := 0;
        "Surcharge Amount" := 0;
        "TDS Amount Including Surcharge" := 0;
        "eCESS on TDS Amount" := 0;
        "SHE Cess on TDS Amount" := 0;
        "Work Tax Amount" := 0;
        "Total TDS Including SHE CESS" := 0;
        "Bal. TDS Including SHE CESS" := 0;
      END;
    END;

    PROCEDURE GetBaseAmt@1500001(VAR Amt@1500000 : Decimal;PurchLine@1500005 : Record 39);
    VAR
      DetailRG23D@1500431 : Record 16533;
      RG23D@1500432 : Record 16537;
      TempRG23D@1500434 : TEMPORARY Record 16537;
      QuantityInCurrLine@1500435 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1500436 : Decimal;
      RefQuantity@1500437 : Decimal;
      AllQtyInCurrLineAdjusted@1500438 : Boolean;
      RG23DEntryNo@1500440 : Integer;
      CurrencyFactor@1500441 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        TESTFIELD(Type,Type::Item);
        GetPurchHeader;
        IF (PurchHeader."Currency Code" <> '') AND (PurchHeader."Currency Factor" <> 0) THEN
          CurrencyFactor := PurchHeader."Currency Factor"
        ELSE
          CurrencyFactor := 1;

        BEDAmt := 0;
        "AED(GSI)Amt" := 0;
        "AED(TTA)Amt" := 0;
        SEDAmt := 0;
        SAEDAmt := 0;
        CESSAmt := 0;
        NCCDAmt := 0;
        eCessAmt := 0;
        SHECessAmt := 0;
        ADETAmt := 0;
        ADEAmt := 0;
        Amt := 0;
        ADCVATAmt := 0;

        IF ("Return Qty. Shipped" <> 0) OR ("Return Shipment No." <> '') THEN BEGIN
          DetailRG23D.RESET;
          IF "Return Qty. Shipped" <> 0 THEN BEGIN
            DetailRG23D.SETRANGE("Document Type","Document Type");
            DetailRG23D.SETRANGE("Order No.","Document No.");
            DetailRG23D.SETRANGE("Line No.","Line No.");
          END ELSE
            IF "Return Shipment No." <> '' THEN BEGIN
              DetailRG23D.SETRANGE("Document Type",DetailRG23D."Document Type"::"Return Order");
              DetailRG23D.SETRANGE("Document No.","Return Shipment No.");
              DetailRG23D.SETRANGE("Line No.","Return Shipment Line No.");
            END;
          IF DetailRG23D.FINDSET THEN
            REPEAT
              RG23D.GET(DetailRG23D."RG 23 D Entry No.");
              Location.CheckTradingLocation("Location Code");
              Amt += ABS(RG23D."Excise Base Amt Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              BEDAmt += ABS(RG23D."BED Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              "AED(GSI)Amt" += ABS(RG23D."AED(GSI) Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              "AED(TTA)Amt" += ABS(RG23D."AED(TTA) Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              SEDAmt += ABS(RG23D."SED Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              SAEDAmt += ABS(RG23D."SAED Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              CESSAmt += ABS(RG23D."CESS Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              NCCDAmt += ABS(RG23D."NCCD Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              eCessAmt += ABS(RG23D."eCess Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              SHECessAmt += ABS(RG23D."SHE Cess Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              ADETAmt += ABS(RG23D."ADET Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              ADEAmt += ABS(RG23D."ADE Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              ADCVATAmt += ABS(RG23D."ADC VAT Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
            UNTIL DetailRG23D.NEXT = 0;
        END;
        IF "Return Shipment No." = '' THEN BEGIN
          IF Quantity - "Return Qty. Shipped" <> 0 THEN BEGIN
            QuantityInCurrLine := Quantity - "Return Qty. Shipped";
            QtyInCurrLineAlreadyAdjusted := 0;
            GetPurchHeader;
            RG23D.RESET;
            RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
            RG23D.SETRANGE("Item No.","No.");
            RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase);
            RG23D.SETRANGE("Document No.",PurchHeader."Applies-to Doc. No.");
            RG23D.SETRANGE("Location Code","Location Code");
            RG23D.SETRANGE(Closed,FALSE);
            IF RG23D.FINDSET THEN
              REPEAT
                RefQuantity := 0;
                RG23DEntryNo := RG23D."Entry No.";
                IF NOT TempRG23DConsumedInCurrDoc.GET(RG23DEntryNo) THEN BEGIN
                  IF TempRG23DRemainder.GET(RG23DEntryNo) THEN BEGIN
                    RefQuantity := TempRG23DRemainder.Quantity;
                    TempRG23DRemainder.Quantity :=
                      TempRG23DRemainder.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                    IF TempRG23DRemainder.Quantity <= 0 THEN BEGIN
                      TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(TempRG23DRemainder);
                      TempRG23DConsumedInCurrDoc.INSERT;
                      TempRG23DRemainder.DELETE;
                    END ELSE BEGIN
                      RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                      TempRG23DRemainder.Quantity := TempRG23DRemainder.Quantity - RefQuantity;
                      TempRG23DRemainder.MODIFY;
                      AllQtyInCurrLineAdjusted := TRUE;
                    END;
                  END ELSE BEGIN
                    RG23D.CALCFIELDS("Remaining Quantity");
                    TempRG23D.TRANSFERFIELDS(RG23D);
                    TempRG23D.Quantity := RG23D."Remaining Quantity";
                    RefQuantity := TempRG23D.Quantity;

                    TempRG23D.Quantity :=
                      TempRG23D.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                    IF TempRG23D.Quantity <= 0 THEN BEGIN
                      TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(RG23D);
                      TempRG23DConsumedInCurrDoc.INSERT;
                    END ELSE BEGIN
                      AllQtyInCurrLineAdjusted := TRUE;
                      RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                      TempRG23DRemainder.TRANSFERFIELDS(RG23D);
                      TempRG23DRemainder.Quantity := RG23D."Remaining Quantity" - RefQuantity;
                      TempRG23DRemainder.INSERT;
                    END;
                  END;

                  QtyInCurrLineAlreadyAdjusted := QtyInCurrLineAlreadyAdjusted + RefQuantity;
                  Amt += ABS(RG23D."Excise Base Amt Per Unit") * RefQuantity * CurrencyFactor;
                  BEDAmt += ABS(RG23D."BED Amount Per Unit") * RefQuantity * CurrencyFactor;
                  "AED(GSI)Amt" += ABS(RG23D."AED(GSI) Amount Per Unit") * RefQuantity * CurrencyFactor;
                  "AED(TTA)Amt" += ABS(RG23D."AED(TTA) Amount Per Unit") * RefQuantity * CurrencyFactor;
                  SEDAmt += ABS(RG23D."SED Amount Per Unit") * RefQuantity * CurrencyFactor;
                  SAEDAmt += ABS(RG23D."SAED Amount Per Unit") * RefQuantity * CurrencyFactor;
                  CESSAmt += ABS(RG23D."CESS Amount Per Unit") * RefQuantity * CurrencyFactor;
                  NCCDAmt += ABS(RG23D."NCCD Amount Per Unit") * RefQuantity * CurrencyFactor;
                  eCessAmt += ABS(RG23D."eCess Amount Per Unit") * RefQuantity * CurrencyFactor;
                  SHECessAmt += ABS(RG23D."SHE Cess Amount Per Unit") * RefQuantity * CurrencyFactor;
                  ADETAmt += ABS(RG23D."ADET Amount Per Unit") * RefQuantity * CurrencyFactor;
                  ADEAmt += ABS(RG23D."ADE Amount Per Unit") * RefQuantity * CurrencyFactor;
                  ADCVATAmt += ABS(RG23D."ADC VAT Amount Per Unit") * RefQuantity * CurrencyFactor;
                END;
              UNTIL (RG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
          END;
        END;
      END;
    END;

    PROCEDURE InitDetailRG23D@1500013(PurchHeader@1102601010 : Record 38);
    VAR
      PurchLine@1102601009 : Record 39;
      DetailRG23D@1102601008 : Record 16533;
      RG23D@1102601007 : Record 16537;
      TempRG23D@1102601005 : TEMPORARY Record 16537;
      QuantityInCurrLine@1102601004 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1102601003 : Decimal;
      RefQuantity@1102601002 : Decimal;
      AllQtyInCurrLineAdjusted@1102601001 : Boolean;
      EntryNo@1102601000 : Integer;
      TempRG23DInvtCheck@1102601006 : TEMPORARY Record 16537;
    BEGIN
      WITH PurchHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND (NOT Ship) THEN
          EXIT;

        TempRG23DRemainder.DELETEALL;
        TempRG23DConsumedInCurrDoc.DELETEALL;
        InvtBuffer[1].DELETEALL;
        TempRG23DInvtCheck.DELETEALL;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        IF PurchLine.FINDSET THEN
          REPEAT
            WITH PurchLine DO BEGIN
              IF "Return Shipment No." = '' THEN BEGIN
                IF "Return Qty. to Ship" <> 0 THEN BEGIN
                  CLEAR(InvtBuffer[1]);
                  InvtBuffer[1]."Item No." := "No.";
                  InvtBuffer[1].Quantity := -"Return Qty. to Ship";
                  InvtBuffer[2] := InvtBuffer[1];
                  IF InvtBuffer[2].FIND THEN BEGIN
                    InvtBuffer[2].Quantity := InvtBuffer[2].Quantity + InvtBuffer[1].Quantity;
                    InvtBuffer[2].MODIFY;
                  END ELSE
                    InvtBuffer[1].INSERT;

                  QuantityInCurrLine := "Return Qty. to Ship";
                  QtyInCurrLineAlreadyAdjusted := 0;
                  AllQtyInCurrLineAdjusted := FALSE;
                  RG23D.RESET;
                  RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
                  RG23D.SETRANGE("Item No.","No.");
                  RG23D.SETRANGE("Document No.",PurchHeader."Applies-to Doc. No.");
                  RG23D.SETRANGE(Type,RG23D.Type::Invoice);
                  RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase);
                  RG23D.SETRANGE("Location Code","Location Code");
                  IF RG23D.FINDSET THEN
                    REPEAT
                      RG23D.CALCFIELDS("Remaining Quantity");
                      IF RG23D."Remaining Quantity" <> 0 THEN BEGIN
                        IF NOT TempRG23DInvtCheck.GET(RG23D."Entry No.") THEN BEGIN
                          TempRG23DInvtCheck."Entry No." := RG23D."Entry No.";
                          TempRG23DInvtCheck.INSERT;
                          CLEAR(InvtBuffer[1]);
                          InvtBuffer[1]."Item No." := "No.";
                          InvtBuffer[1].Quantity := RG23D."Remaining Quantity";
                          InvtBuffer[2] := InvtBuffer[1];
                          IF InvtBuffer[2].FIND THEN BEGIN
                            InvtBuffer[2].Quantity := InvtBuffer[2].Quantity + InvtBuffer[1].Quantity;
                            InvtBuffer[2].MODIFY;
                          END ELSE
                            InvtBuffer[1].INSERT;
                        END;
                        RefQuantity := 0;
                        IF NOT TempRG23DConsumedInCurrDoc.GET(RG23D."Entry No.") THEN BEGIN
                          IF TempRG23DRemainder.GET(RG23D."Entry No.") THEN BEGIN
                            RefQuantity := TempRG23DRemainder.Quantity;
                            TempRG23DRemainder.Quantity :=
                              ABS(TempRG23DRemainder.Quantity) - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                            IF TempRG23DRemainder.Quantity <= 0 THEN BEGIN
                              TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(TempRG23DRemainder);
                              TempRG23DConsumedInCurrDoc.INSERT;
                              TempRG23DRemainder.DELETE;
                            END ELSE BEGIN
                              RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                              TempRG23DRemainder.Quantity := TempRG23DRemainder.Quantity - RefQuantity;
                              TempRG23DRemainder.MODIFY;
                              AllQtyInCurrLineAdjusted := TRUE;
                            END;
                          END ELSE BEGIN
                            TempRG23D.TRANSFERFIELDS(RG23D);
                            TempRG23D.Quantity := RG23D."Remaining Quantity";
                            RefQuantity := TempRG23D.Quantity;
                            TempRG23D.Quantity :=
                              ABS(TempRG23D.Quantity) - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                            IF TempRG23D.Quantity <= 0 THEN BEGIN
                              TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(RG23D);
                              TempRG23DConsumedInCurrDoc.INSERT;
                            END ELSE BEGIN
                              AllQtyInCurrLineAdjusted := TRUE;
                              RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                              TempRG23DRemainder.TRANSFERFIELDS(RG23D);
                              TempRG23DRemainder.Quantity := RG23D.Quantity - RefQuantity;
                              TempRG23DRemainder.INSERT;
                            END;
                          END;
                          QtyInCurrLineAlreadyAdjusted := ABS(QtyInCurrLineAlreadyAdjusted + RefQuantity);

                          DetailRG23D.RESET;
                          IF DetailRG23D.FINDLAST THEN
                            EntryNo := DetailRG23D."Entry No." + 1
                          ELSE
                            EntryNo := 1;

                          DetailRG23D.INIT;
                          DetailRG23D."Entry No." := EntryNo;
                          DetailRG23D."Document Type" := "Document Type";
                          DetailRG23D."Order No." := "Document No.";
                          DetailRG23D."Line No." := "Line No.";
                          DetailRG23D.Quantity := -RefQuantity;
                          DetailRG23D."RG 23 D Entry No." := RG23D."Entry No.";
                          DetailRG23D."Transaction Type" := DetailRG23D."Transaction Type"::Purchase;
                          DetailRG23D.INSERT(TRUE);
                        END;
                      END;
                    UNTIL (RG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
                END;
              END;
            END;
          UNTIL PurchLine.NEXT = 0;
        IF InvtBuffer[1].FIND('+') THEN
          REPEAT
            IF InvtBuffer[1].Quantity < 0 THEN
              ERROR(Text16501,InvtBuffer[1]."Item No.",ABS(InvtBuffer[1].Quantity));
          UNTIL InvtBuffer[1].NEXT(-1) = 0;
      END;
    END;

    PROCEDURE GetEntryNo@1500014() : Integer;
    BEGIN
    END;

    PROCEDURE CheckAvailableQty@1500012(DocNo@1500004 : Code[20]);
    BEGIN
    END;

    PROCEDURE UpdateStruOrdLineDetails@1500003();
    VAR
      StructureDetail@1500001 : Record 13793;
      StrOrderLineDetails@1500000 : Record 13795;
    BEGIN
      GetPurchHeader;
      PurchHeader.TESTFIELD(Structure);
      CheckExciseRegister;
      StructureDetail.SETRANGE(Code,PurchHeader.Structure);
      StructureDetail.SETRANGE(Type,StructureDetail.Type::Excise);
      IF StructureDetail.FINDFIRST THEN BEGIN
        StrOrderLineDetails.GET(StrOrderLineDetails.Type::Purchase,StructureDetail."Calculation Order",
          "Document Type","Document No.","No.","Line No.",StructureDetail.Type,'','EXCISE');
        StrOrderLineDetails."Manually Changed" := TRUE;
        StrOrderLineDetails.Amount := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
          "CESS Amount" + "NCCD Amount" + "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" +
          "ADC VAT Amount" + "SHE Cess Amount";
        IF PurchHeader."Currency Factor" <> 0 THEN
          CFactor := PurchHeader."Currency Factor"
        ELSE
          CFactor := 1;
        IF PurchHeader."Currency Code" <> '' THEN
          Currency.GET(PurchHeader."Currency Code");
        StrOrderLineDetails."Amount (LCY)" := ROUND(StrOrderLineDetails.Amount / CFactor,Currency."Amount Rounding Precision");
        StrOrderLineDetails.Amount := ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
        StrOrderLineDetails.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetCompanyInfo@1500015();
    BEGIN
      IF NOT CompanyInfoRead THEN BEGIN
        CompanyInfo.GET;
        CompanyInfoRead := TRUE;
      END;
    END;

    PROCEDURE GetCVDPayableToThirdParty@1500004(PurchLine@1500002 : Record 39) : Boolean;
    VAR
      CVDPayableToThirdParty@1500000 : Boolean;
      StrOrderDetails@1500001 : Record 13794;
    BEGIN
      CVDPayableToThirdParty := FALSE;
      StrOrderDetails.RESET;
      StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
      StrOrderDetails.SETRANGE("Document Type",PurchLine."Document Type");
      StrOrderDetails.SETRANGE("Document No.",PurchLine."Document No.");
      StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
      StrOrderDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type"::Excise);
      IF StrOrderDetails.FINDFIRST THEN
        IF StrOrderDetails.CVD AND StrOrderDetails."CVD Payable to Third Party" THEN BEGIN
          StrOrderDetails.TESTFIELD("CVD Third Party Code");
          CVDPayableToThirdParty := TRUE;
        END;
      EXIT(CVDPayableToThirdParty);
    END;

    PROCEDURE GetExcisePostingSetup@1500002();
    VAR
      PurchaseHeader2@1500002 : Record 38;
      ExcisePostingSetup2@1500003 : Record 13711;
      ExcisePostingSetupForm@1500000 : Page 13710;
      StructureDetails@1500001 : Record 13793;
    BEGIN
      PurchaseHeader2.GET("Document Type","Document No.");
      IF PurchaseHeader2.Structure <> '' THEN BEGIN
        StructureDetails.SETRANGE(Code,PurchaseHeader2.Structure);
        StructureDetails.SETRANGE(Type,StructureDetails.Type::Excise);
        IF StructureDetails.FINDFIRST THEN BEGIN
          ExcisePostingSetup2.RESET;
          ExcisePostingSetup2.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
          ExcisePostingSetup2.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
          ExcisePostingSetup2.SETRANGE("From Date",0D,PurchaseHeader2."Posting Date");
          IF ExcisePostingSetup2.FINDLAST THEN
            ExcisePostingSetup2.MARK := TRUE;
          ExcisePostingSetup2.MARKEDONLY(TRUE);
          ExcisePostingSetupForm.EDITABLE := FALSE;
          ExcisePostingSetupForm.SETTABLEVIEW(ExcisePostingSetup2);
          ExcisePostingSetupForm.RUNMODAL;
        END ELSE
          ERROR(Text16508);
      END ELSE
        ERROR(Text16508);
    END;

    PROCEDURE UpdateIssueDetails@1500005();
    VAR
      PurchLine@1500000 : Record 39;
      SubOrderComponents@1500001 : Record 16321;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document No.","Document No.");
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Line No.","Line No.");
      IF PurchLine.FINDFIRST THEN
        SubOrderComponents.UpdateIssueDetails(PurchLine,"Deliver Comp. For","Qty. to Reject (Rework)");
    END;

    PROCEDURE SetSubconAppliestoID@1500006(ID@1500000 : Code[20];VAR PurchLine@1500001 : Record 39;Delivery@1500002 : Boolean);
    BEGIN
      IF Delivery THEN BEGIN
        IF PurchLine.FINDSET THEN
          REPEAT
            IF PurchLine."Applies-to ID (Delivery)" <> ID THEN
              PurchLine."Applies-to ID (Delivery)" := ID
            ELSE
              PurchLine."Applies-to ID (Delivery)" := '';
            PurchLine.MODIFY;
          UNTIL PurchLine.NEXT = 0;
      END ELSE BEGIN
        IF PurchLine.FINDSET THEN
          REPEAT
            IF PurchLine."Applies-to ID (Receipt)" <> ID THEN
              PurchLine."Applies-to ID (Receipt)" := ID
            ELSE
              PurchLine."Applies-to ID (Receipt)" := '';
            PurchLine.MODIFY;
          UNTIL PurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE MultipleDeliveryChallanList@1500007();
    VAR
      DeliveryChallanHeader@1500000 : Record 16323;
      DeliveryChallanLine@1500001 : Record 16324;
      DelivChallanListMult@1500002 : Page 16443;
    BEGIN
      DeliveryChallanHeader.RESET;
      DeliveryChallanHeader.SETRANGE("Vendor No.","Buy-from Vendor No.");
      IF DeliveryChallanHeader.FINDSET THEN
        REPEAT
          DeliveryChallanLine.RESET;
          DeliveryChallanLine.SETRANGE("Deliver Challan No.",DeliveryChallanHeader."No.");
          DeliveryChallanLine.SETRANGE("Document No.","Document No.");
          DeliveryChallanLine.SETRANGE("Document Line No.","Line No.");
          IF DeliveryChallanLine.FINDFIRST THEN
            DeliveryChallanHeader.MARK(TRUE);
        UNTIL DeliveryChallanHeader.NEXT = 0;
      DeliveryChallanHeader.MARKEDONLY(TRUE);
      CLEAR(DelivChallanListMult);
      DelivChallanListMult.SETTABLEVIEW(DeliveryChallanHeader);
      DelivChallanListMult.RUN;
    END;

    PROCEDURE ShowSubOrderDetailsForm@1500008();
    VAR
      PurchaseLine@1280001 : Record 39;
    BEGIN
      PurchaseLine.RESET;
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","Document No.");
      PurchaseLine.SETRANGE("No.","No.");
      PurchaseLine.SETRANGE("Line No.","Line No.");
      PAGE.RUNMODAL(PAGE::"Ord. Subcon Details Delv. List",PurchaseLine);
    END;

    PROCEDURE CheckAssessableValue@1500009(PurchHeader@1500005 : Record 38) : Boolean;
    VAR
      ExcisePostingSetup@1500003 : Record 13711;
      Vendor@1500001 : Record 23;
      SSI@1500000 : Boolean;
      AssessableValue@1500002 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        Vendor.GET("Buy-from Vendor No.");
        IF Vendor."SSI Validity Date" = 0D THEN BEGIN
          IF Vendor.SSI = TRUE THEN
            SSI := TRUE;
        END ELSE
          IF Vendor."SSI Validity Date" > "Posting Date" THEN
            SSI := Vendor.SSI
          ELSE
            SSI := FALSE;

        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF "Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        ExcisePostingSetup.SETRANGE(SSI,SSI);
        IF ExcisePostingSetup.FINDLAST THEN
          AssessableValue := ExcisePostingSetup."BED Calculation Type" =
            ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value";
        EXIT(AssessableValue);
      END;
    END;

    PROCEDURE ShowSubOrderRcptForm@1500010();
    VAR
      PurchaseLine@1280001 : Record 39;
    BEGIN
      PurchaseLine.RESET;
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","Document No.");
      PurchaseLine.SETRANGE("No.","No.");
      PurchaseLine.SETRANGE("Line No.","Line No.");
      PAGE.RUNMODAL(PAGE::"Ord. Subcon Details Rcpt. List",PurchaseLine)
    END;

    PROCEDURE CheckExciseRegister@1500230();
    BEGIN
      IF ((("Document Type" = "Document Type"::"Return Order") OR ("Document Type" = "Document Type"::Order)) AND
          ("Quantity Received" <> 0 ) AND ("Excise Amount" <> 0 ))
      THEN BEGIN
        IF NOT PurchHeader.Trading THEN
          IF ("Direct Unit Cost" <> xRec."Direct Unit Cost") OR ("Line Amount" <> xRec."Line Amount") OR
             ("Line Discount %" <> xRec."Line Discount %") OR ("Line Discount Amount" <> xRec."Line Discount Amount") OR
             ("BED Amount" <> xRec."BED Amount") OR ("AED(GSI) Amount" <> xRec."AED(GSI) Amount") OR
             ("SED Amount" <> xRec."SED Amount") OR ("SAED Amount" <> xRec."SAED Amount") OR
             ("CESS Amount" <> xRec."CESS Amount") OR ("NCCD Amount" <> xRec."NCCD Amount") OR
             ("eCess Amount" <> xRec."eCess Amount") OR ("ADET Amount" <> xRec."ADET Amount") OR
             ("ADE Amount" <> xRec."ADE Amount") OR ("SHE Cess Amount" <> xRec."SHE Cess Amount") OR
             ("AED(TTA) Amount" <> "AED(TTA) Amount")
          THEN
            ERROR(Text16510);
      END;
    END;

    PROCEDURE InitRG23DSplitingBuffer@1500505(PurchHeader@1102601009 : Record 38);
    VAR
      PurchLine@1500401 : Record 39;
      DetailRG23D@1500412 : Record 16533;
      RG23DSplitingBuffer@1500413 : Record 16531;
      TempDetailRG23D@1500414 : TEMPORARY Record 16533;
      TempDetailRG23DRemainder@1500415 : TEMPORARY Record 16533;
      TempDetailRG23DConsInCurrDoc@1500416 : TEMPORARY Record 16533;
      QuantityInCurrLine@1500417 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1500418 : Decimal;
      RefQuantity@1500419 : Decimal;
      AllQtyInCurrLineAdjusted@1500420 : Boolean;
      EntryNo@1500421 : Integer;
    BEGIN
      WITH PurchHeader DO BEGIN
        IF NOT Invoice THEN
          EXIT;
        TempDetailRG23DRemainder.DELETEALL;
        TempDetailRG23DConsInCurrDoc.DELETEALL;

        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type,PurchLine.Type::Item);
        IF PurchLine.FINDSET THEN
          REPEAT
            WITH PurchLine DO
              IF "Qty. to Invoice" <> 0 THEN BEGIN
                QuantityInCurrLine := "Qty. to Invoice";
                QtyInCurrLineAlreadyAdjusted := 0;
                AllQtyInCurrLineAdjusted := FALSE;
                DetailRG23D.RESET;
                DetailRG23D.SETCURRENTKEY("Document Type","Order No.","Document No.","Line No.");
                DetailRG23D.SETRANGE("Transaction Type",DetailRG23D."Transaction Type"::Purchase);
                DetailRG23D.SETRANGE(Undo,FALSE);
                IF "Return Shipment No." = '' THEN BEGIN
                  DetailRG23D.SETRANGE("Document Type","Document Type");
                  DetailRG23D.SETRANGE("Order No.","Document No.");
                  DetailRG23D.SETRANGE("Line No.","Line No.");
                END ELSE BEGIN
                  DetailRG23D.SETRANGE("Document Type",DetailRG23D."Document Type"::"Return Order");
                  DetailRG23D.SETRANGE("Document No.","Return Shipment No.");
                  DetailRG23D.SETRANGE("Line No.","Return Shipment Line No.");
                END;
                DetailRG23D.SETRANGE("Completely Invoiced",FALSE);
                IF DetailRG23D.FINDSET THEN
                  REPEAT
                    RefQuantity := 0;
                    IF NOT TempDetailRG23DConsInCurrDoc.GET(DetailRG23D."Entry No.") THEN BEGIN
                      IF TempDetailRG23DRemainder.GET(DetailRG23D."Entry No.") THEN BEGIN
                        RefQuantity := TempDetailRG23DRemainder.Quantity;
                        TempDetailRG23DRemainder.Quantity :=
                          TempDetailRG23DRemainder.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                        IF TempDetailRG23DRemainder.Quantity <= 0 THEN BEGIN
                          TempDetailRG23DConsInCurrDoc.TRANSFERFIELDS(TempDetailRG23DRemainder);
                          TempDetailRG23DConsInCurrDoc.INSERT;
                          TempDetailRG23DRemainder.DELETE;
                        END ELSE BEGIN
                          RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                          TempDetailRG23DRemainder.Quantity := TempDetailRG23DRemainder.Quantity - RefQuantity;
                          TempDetailRG23DRemainder.MODIFY;
                          AllQtyInCurrLineAdjusted := TRUE;
                        END;
                      END ELSE BEGIN
                        TempDetailRG23D.TRANSFERFIELDS(DetailRG23D);
                        TempDetailRG23D.Quantity := ABS(DetailRG23D.Quantity) - ABS(DetailRG23D."Quantity Invoiced");
                        RefQuantity := TempDetailRG23D.Quantity;
                        TempDetailRG23D.Quantity :=
                          TempDetailRG23D.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                        IF TempDetailRG23D.Quantity <= 0 THEN BEGIN
                          TempDetailRG23DConsInCurrDoc.TRANSFERFIELDS(DetailRG23D);
                          TempDetailRG23DConsInCurrDoc.INSERT;
                        END ELSE BEGIN
                          AllQtyInCurrLineAdjusted := TRUE;
                          RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                          TempDetailRG23DRemainder.TRANSFERFIELDS(DetailRG23D);
                          TempDetailRG23DRemainder.Quantity := TempDetailRG23D.Quantity - RefQuantity;
                          TempDetailRG23DRemainder.INSERT;
                        END;
                      END;
                      QtyInCurrLineAlreadyAdjusted := QtyInCurrLineAlreadyAdjusted + RefQuantity;

                      RG23DSplitingBuffer.RESET;
                      IF RG23DSplitingBuffer.FINDLAST THEN
                        EntryNo := RG23DSplitingBuffer."Entry No." + 1
                      ELSE
                        EntryNo := 1;

                      RG23DSplitingBuffer.INIT;
                      RG23DSplitingBuffer."Entry No." := EntryNo;
                      RG23DSplitingBuffer."RG 23 D Entry No." := DetailRG23D."RG 23 D Entry No.";
                      RG23DSplitingBuffer."Detail RG 23 D Entry No." := DetailRG23D."Entry No.";
                      RG23DSplitingBuffer."Document Type" := "Document Type";
                      RG23DSplitingBuffer."Document No." := "Document No.";
                      RG23DSplitingBuffer."Line No." := "Line No.";
                      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                        RG23DSplitingBuffer.Quantity := -RefQuantity;
                      RG23DSplitingBuffer."Posted Document No." := DetailRG23D."Document No.";
                      RG23DSplitingBuffer."Posted Document Line No." := DetailRG23D."Document Line No.";
                      RG23DSplitingBuffer."Transaction Type" := DetailRG23D."Transaction Type";
                      RG23DSplitingBuffer.INSERT;

                      DetailRG23D."Quantity Invoiced" += -RefQuantity;
                      DetailRG23D."Completely Invoiced" := DetailRG23D.Quantity = DetailRG23D."Quantity Invoiced";
                      DetailRG23D.MODIFY;
                    END;
                  UNTIL (DetailRG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
              END;
          UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@76();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        CheckLocationOnWMS;
    END;

    PROCEDURE CheckLocationOnWMS@79();
    VAR
      DialogText@1001 : Text;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        DialogText := Text033;
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
      END;
    END;

    PROCEDURE IsServiceItem@77() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    PROCEDURE FullServiceTaxAmount@1500023() : Decimal;
    BEGIN
      EXIT("Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount");
    END;

    PROCEDURE GetReverseChargePct@1500016(ServiceEntityType@1500001 : Code[20]) : Integer;
    VAR
      STReverseChargeSetup@1500000 : Record 16461;
      ServiceTaxRegistrationNos@1500002 : Record 16475;
    BEGIN
      IF STReverseChargeSetup.TryGetSrvTaxReverseCharge(
           "Service Tax Group",ServiceEntityType,ServiceTaxRegistrationNos.GetServiceEntityType("Service Tax Registration No."))
      THEN
        EXIT(STReverseChargeSetup."Reverse Charge %");
      EXIT(0);
    END;

    PROCEDURE RoundServiceTax@1500020(ServiceTaxAmount@1280004 : Decimal) : Decimal;
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      PurchHeader.GET("Document Type","Document No.");
      ServiceTaxEntry."Service Tax Rounding Precision" := PurchHeader."Service Tax Rounding Precision";
      ServiceTaxEntry."Service Tax Rounding Type" := PurchHeader."Service Tax Rounding Type";
      EXIT(ServiceTaxEntry.RoundAmount(ServiceTaxAmount));
    END;

    LOCAL PROCEDURE ReservEntryExist@78() : Boolean;
    VAR
      NewReservEntry@1000 : Record 337;
    BEGIN
      ReservePurchLine.FilterReservFor(NewReservEntry,Rec);
      NewReservEntry.SETRANGE("Reservation Status",NewReservEntry."Reservation Status"::Reservation,
        NewReservEntry."Reservation Status"::Tracking);

      EXIT(NOT NewReservEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    BEGIN
      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN
        UpdateDirectUnitCost(CallingFieldNo);

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Direct Unit Cost",0)
        ELSE
          UpdateDirectUnitCost(CallingFieldNo);
      END;
    END;

    LOCAL PROCEDURE SetFilterOnNODLines@1500026(TDSNatureOfDeduction@1500017 : Code[10];NatureOfRemittance@1500018 : Code[10]);
    BEGIN
      NODLines.RESET;
      NODLines.SETRANGE(Type,NODLines.Type::Vendor);
      IF "Buy-from Vendor No." <> "Pay-to Vendor No." THEN
        NODLines.SETRANGE("No.","Pay-to Vendor No.")
      ELSE
        NODLines.SETRANGE("No.","Buy-from Vendor No.");
      NODLines.SETFILTER("NOD/NOC",TDSNatureOfDeduction);
      NODLines.SETFILTER("Nature of Remittance",NatureOfRemittance);
      NODLines.SETFILTER("TDS Group",'<>%1',NODLines."TDS Group"::Others);
    END;

    LOCAL PROCEDURE UpdateDimensionsFromJobTask@60();
    VAR
      DimSetArrID@1000 : ARRAY [10] OF Integer;
      DimValue1@1001 : Code[20];
      DimValue2@1002 : Code[20];
    BEGIN
      DimSetArrID[1] := "Dimension Set ID";
      DimSetArrID[2] := DimMgt.CreateDimSetFromJobTaskDim("Job No.","Job Task No.",DimValue1,DimValue2);
      "Dimension Set ID" := DimMgt.GetCombinedDimensionSetID(DimSetArrID,DimValue1,DimValue2);
      "Shortcut Dimension 1 Code" := DimValue1;
      "Shortcut Dimension 2 Code" := DimValue2;
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@82();
    BEGIN
      DistIntegration.EnterPurchaseItemCrossRef(Rec);
      UpdateICPartner;
    END;

    LOCAL PROCEDURE UpdateItemReference@85();
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      UpdateItemCrossRef;
      IF "Cross-Reference No." = '' THEN
        SetVendorItemNo
      ELSE
        VALIDATE("Vendor Item No.","Cross-Reference No.");
    END;

    LOCAL PROCEDURE UpdateICPartner@81();
    VAR
      ICPartner@1000 : Record 413;
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      IF PurchHeader."Send IC Document" AND
         (PurchHeader."IC Direction" = PurchHeader."IC Direction"::Outgoing)
      THEN
        CASE Type OF
          Type::" ",Type::"Charge (Item)":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            END;
          Type::"G/L Account":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            END;
          Type::Item:
            BEGIN
              ICPartner.GET(PurchHeader."Buy-from IC Partner Code");
              CASE ICPartner."Outbound Purch. Item No. Type" OF
                ICPartner."Outbound Purch. Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Purch. Item No. Type"::"Internal No.",
                ICPartner."Outbound Purch. Item No. Type"::"Cross Reference":
                  BEGIN
                    IF ICPartner."Outbound Purch. Item No. Type" = ICPartner."Outbound Purch. Item No. Type"::"Internal No." THEN
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::Item)
                    ELSE
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Buy-from Vendor No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    IF ItemCrossReference.FINDFIRST THEN
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No."
                    ELSE
                      "IC Partner Reference" := "No.";
                  END;
                ICPartner."Outbound Purch. Item No. Type"::"Vendor Item No.":
                  BEGIN
                    "IC Partner Ref. Type" := "IC Partner Ref. Type"::"Vendor Item No.";
                    "IC Partner Reference" := "Vendor Item No.";
                  END;
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            END;
        END;
    END;

    LOCAL PROCEDURE GetServiceTaxTDSBaseCorrection@1500022(VendorLedgerEntry@1500000 : Record 25) : Decimal;
    VAR
      DtldVendLedgEntry@1500001 : Record 380;
      DtldVendLedgEntryApplied@1500002 : Record 380;
      ServiceTaxEntry@1500003 : Record 16473;
    BEGIN
      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendorLedgerEntry."Entry No.");
      DtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
      IF DtldVendLedgEntry.FINDSET THEN
        REPEAT
          DtldVendLedgEntryApplied.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
          DtldVendLedgEntryApplied.SETFILTER("Entry No.",'<>%1',DtldVendLedgEntry."Entry No.");
          IF DtldVendLedgEntryApplied.FINDSET THEN
            REPEAT
              ServiceTaxEntry.SETRANGE("Document Type",DtldVendLedgEntry."Document Type");
              ServiceTaxEntry.SETRANGE(Type,ServiceTaxEntry.Type::Purchase);
              ServiceTaxEntry.SETRANGE("Document No.",DtldVendLedgEntry."Document No.");
              IF ServiceTaxEntry.FINDFIRST THEN
                EXIT(
                  ServiceTaxEntry."Original S.T. Amount" +
                  ServiceTaxEntry."Original S.T. eCess Amount" +
                  ServiceTaxEntry."Original S.T. SHE Cess Amount");
            UNTIL DtldVendLedgEntryApplied.NEXT = 0;
        UNTIL DtldVendLedgEntry.NEXT = 0;
      EXIT(0);
    END;

    LOCAL PROCEDURE CalcTotalAmtToAssign@84(TotalQtyToAssign@1000 : Decimal) TotalAmtToAssign : Decimal;
    BEGIN
      TotalAmtToAssign := ("Line Amount" - "Inv. Discount Amount") * TotalQtyToAssign / Quantity;

      IF PurchHeader."Prices Including VAT" THEN
        TotalAmtToAssign := TotalAmtToAssign / (1 + "VAT %" / 100) - "VAT Difference";

      TotalAmtToAssign := ROUND(TotalAmtToAssign,Currency."Amount Rounding Precision");
    END;

    PROCEDURE HasTypeToFillMandatotyFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    PROCEDURE GetDeferralAmount@105() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := "Line Amount" - "Inv. Discount Amount";
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@104();
    VAR
      DeferralPostDate@1000 : Date;
      AdjustStartDate@1001 : Boolean;
    BEGIN
      GetPurchHeader;
      DeferralPostDate := PurchHeader."Posting Date";
      AdjustStartDate := TRUE;
      IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
        IF "Returns Deferral Start Date" = 0D THEN
          "Returns Deferral Start Date" := PurchHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := FALSE;
      END;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,PurchHeader."Currency Code",AdjustStartDate);
    END;

    PROCEDURE ShowDeferrals@108(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetPurchDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitDeferralCode@112();
    BEGIN
      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      THEN
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            VALIDATE("Deferral Code",Item."Default Deferral Template Code");
        END;
    END;

    PROCEDURE DefaultDeferralCode@110();
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            GLAcc.GET("No.");
            InitDeferralCode;
          END;
        Type::Item:
          BEGIN
            GetItem;
            InitDeferralCode;
          END;
      END;
    END;

    PROCEDURE IsCreditDocType@83() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    LOCAL PROCEDURE TestReturnFieldsZero@86();
    BEGIN
      TESTFIELD("Return Qty. Shipped Not Invd.",0);
      TESTFIELD("Return Qty. Shipped",0);
      TESTFIELD("Return Shipment No.",'');
    END;

    PROCEDURE FullServiceTaxSBCAmount@1500021() : Decimal;
    BEGIN
      EXIT("Service Tax SBC Amount");
    END;

    PROCEDURE KKCessAmount@1500024() : Decimal;
    BEGIN
      EXIT("KK Cess Amount");
    END;

    LOCAL PROCEDURE IsServiceTaxExist@1500086(PurchLine@1500000 : Record 39) : Boolean;
    BEGIN
      EXIT(("Bal. TDS Including SHE CESS" <> 0) OR ("Service Tax Amount" <> 0) OR
        ("Service Tax SBC Amount" <> 0) OR ("KK Cess Amount" <> 0));
    END;

    LOCAL PROCEDURE CheckHeaderLocation@1500033();
    VAR
      PurchaseHeader@1500099 : Record 38;
      GSTManagement@1500097 : Codeunit 16401;
    BEGIN
      GetPurchHeader;
      IF GSTManagement.CheckGSTStrucure(PurchaseHeader.Structure) THEN
        TESTFIELD("Location Code",PurchaseHeader."Location Code");
    END;

    LOCAL PROCEDURE CheckExemptedStatus@1500334();
    VAR
      PurchaseHeader@1500096 : Record 38;
    BEGIN
      PurchaseHeader.GET("Document Type","Document No.");
      IF PurchaseHeader."GST Vendor Type" = PurchaseHeader."GST Vendor Type"::Exempted THEN
        TESTFIELD(Exempted);
    END;

    PROCEDURE UpdateGSTAmounts@1500025(GSTBaseAmount@1500008 : Decimal);
    VAR
      Location@1500012 : Record 14;
      Vendor@1500011 : Record 23;
      GSTPerStateCode@1500007 : Code[10];
      TotalGST@1500003 : Decimal;
      GSTJurisdiction@1500002 : 'Intrastate,Interstate';
      TransactionType@1500001 : 'Purchase,Sale';
      SourceType@1500000 : 'Vendor,Customer';
      Item@1500004 : Boolean;
    BEGIN
      IF "Line No." = 0 THEN
        EXIT;
      GetPurchHeader;
      Currency.Initialize("Currency Code");
      GSTManagement.DeleteGSTBuffer(TransactionType::Purchase,"Document Type","Document No.","Line No.");
      GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Purchase,"Document Type","Document No.","Line No.");
      VALIDATE("GST Base Amount",0);
      IF PurchHeader1."No." = '' THEN
        PurchHeader1.COPY(PurchHeader);
      IF NOT GSTManagement.IsGSTApplicable(PurchHeader1.Structure) THEN
        EXIT;
      IF "Unit Cost" = 0 THEN EXIT;
      IF Type = Type::Item THEN
        Item := TRUE;
      TESTFIELD("Work Tax Nature Of Deduction",'');
      TESTFIELD("Location Code",PurchHeader1."Location Code");
      IF Vendor.GET("Buy-from Vendor No.") AND (PurchHeader1."GST Vendor Type" = PurchHeader1."GST Vendor Type"::" ") THEN
        EXIT;
      IF Location.GET("Location Code") THEN;
      IF PurchHeader1."GST Vendor Type" IN [PurchHeader1."GST Vendor Type"::Import,
                                            PurchHeader1."GST Vendor Type"::SEZ] THEN
        GSTPerStateCode :=
          GSTManagement.GetGSTConfiguration(SourceType::Vendor,Location."State Code",'',GSTJurisdiction)
      ELSE
        GSTPerStateCode :=
          GSTManagement.GetGSTConfiguration(
            SourceType::Vendor,Location."State Code",Vendor."State Code",GSTJurisdiction);
      IF GSTPerStateCode = '' THEN
        EXIT;
      IF "Currency Code" <> '' THEN BEGIN
        Currency.TESTFIELD("Amount Rounding Precision");
        GSTBaseAmount :=
          ROUND(
            GSTBaseAmount,Currency."Amount Rounding Precision")
      END;
      IF (Type <> Type::"Charge (Item)") THEN
        TotalGST :=
          GSTManagement.CalculateGSTAmounts(
            "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
            PurchHeader1."Posting Date",GSTBaseAmount,TransactionType::Purchase,"Document Type",
            "Currency Code",PurchHeader1."Currency Factor","Unit Cost",Item,Quantity,"Unit of Measure Code","No.")
      ELSE BEGIN
        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        ItemChargeAssgntPurch.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
          REPEAT
            TotalGST :=
              TotalGST + GSTManagement.GetPurchItemChargeInputGSTCredit(
                PurchHeader1,Rec,ItemChargeAssgntPurch,
                GSTPerStateCode,GSTJurisdiction,"Currency Code",PurchHeader1."Currency Factor","Unit Cost");
            GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Purchase,"Document Type","Document No.","Line No.");
          UNTIL ItemChargeAssgntPurch.NEXT = 0;
        END ELSE
          TotalGST :=
            GSTManagement.CalculateGSTAmounts(
              "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
              PurchHeader1."Posting Date",GSTBaseAmount,TransactionType::Purchase,"Document Type",
              "Currency Code",PurchHeader1."Currency Factor","Unit Cost",Item,Quantity,"Unit of Measure Code","No.");
      END;
      IF PurchHeader1."GST Vendor Type" =  PurchHeader1."GST Vendor Type"::Exempted THEN
       TotalGST := 0;
      "Total GST Amount" := TotalGST;
      IF GSTBaseAmount <> 0 THEN
        "GST %" := "Total GST Amount" / GSTBaseAmount * 100;
      GLSetup.GET;
      "GST Base Amount" := GSTBaseAmount;
      "GST Jurisdiction Type" := GSTJurisdiction;
      GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Purchase,"Document Type","Document No.","Line No.");
    END;

    LOCAL PROCEDURE UpdatePurchLineForGST@1500027(GSTCredit@1500000 : Option;GSTGrpCode@1500001 : Code[20];GSTGrpType@1500002 : Option;HSNSACCode@1500003 : Code[8];GSTExempted@1500004 : Boolean);
    VAR
      GSTGroup@1500005 : Record 16404;
    BEGIN
      "GST Credit" := GSTCredit;
      "GST Group Code" := GSTGrpCode;
      "GST Group Type" := GSTGrpType;
      "HSN/SAC Code" := HSNSACCode;
      Exempted := GSTExempted;
      GetPurchHeader;
      "GST Reverse Charge" :=
        PurchHeader."GST Vendor Type" IN [PurchHeader."GST Vendor Type"::Import,PurchHeader."GST Vendor Type"::Unregistered,PurchHeader."GST Vendor Type"::SEZ];
      IF GSTGroup.GET("GST Group Code") AND (PurchHeader."GST Vendor Type" = PurchHeader."GST Vendor Type"::Registered) THEN
        "GST Reverse Charge" := GSTGroup."Reverse Charge";
      GetPurchHeader;
      IF (GSTManagement.IsGSTApplicable(PurchHeader.Structure)) AND (PurchHeader."GST Input Service Distribution") THEN BEGIN
        IF Type = Type::"Charge (Item)" THEN
          ERROR(ChargeItemErr,Type);
        IF ("GST Group Code" <> '') AND ("GST Group Type" <> "GST Group Type"::Service) THEN
        ERROR(TypeISDErr,Type,FIELDNAME("GST Group Type"),"GST Group Type"::Service);
      END;
    END;

    PROCEDURE GetCurrentPurchHeader@1500042(PurchaseHeaderRec@1500000 : Record 38);
    BEGIN
      PurchHeader1 := PurchaseHeaderRec;
    END;

    LOCAL PROCEDURE GetAppliedDocAmount@1500075(PurchaseHeader@1500000 : Record 38;PurchaseLine@1500001 : Record 39) AppliedAmountDoc : Decimal;
    VAR
      VendLedgerEntry@1500002 : Record 25;
    BEGIN
      VendLedgerEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
      VendLedgerEntry.SETRANGE("Document No.",PurchaseHeader."Applies-to Doc. No.");
      VendLedgerEntry.SETRANGE("Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      VendLedgerEntry.SETFILTER("Amount to Apply",'<>%1',0);
      VendLedgerEntry.SETRANGE("TDS Nature of Deduction",PurchaseLine."TDS Nature of Deduction");
      IF VendLedgerEntry."GST Group Code" <> '' THEN
        VendLedgerEntry.SETRANGE("GST Group Code",PurchaseLine."GST Group Code");
      IF VendLedgerEntry.FINDFIRST THEN
        AppliedAmountDoc :=
          GetServiceTaxTDSBaseCorrection(VendLedgerEntry) + CalcAppliedTDSBase(VendLedgerEntry,PurchaseLine);
    END;

    LOCAL PROCEDURE CheckTDSValidation@1500076(PurchaseHeader@1500001 : Record 38);
    VAR
      PurchaseLine@1500005 : Record 39;
      VendorLedgerEntry@1500006 : Record 25;
    BEGIN
      VendorLedgerEntry.SETCURRENTKEY("Vendor No.","Applies-to ID","Document No.");
      VendorLedgerEntry.SETRANGE("Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      VendorLedgerEntry.SETRANGE("Document No.",PurchaseHeader."Applies-to Doc. No.");
      VendorLedgerEntry.SETFILTER("Amount to Apply",'<>%1',0);
      IF VendorLedgerEntry.FINDFIRST THEN BEGIN
        PurchaseLine.RESET;
        PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
        PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
        IF VendorLedgerEntry."TDS Nature of Deduction" <> '' THEN
          PurchaseLine.SETRANGE("TDS Nature of Deduction",VendorLedgerEntry."TDS Nature of Deduction");
        IF VendorLedgerEntry."GST Group Code" <> '' THEN
          PurchaseLine.SETRANGE("GST Group Code",VendorLedgerEntry."GST Group Code");
        IF NOT PurchaseLine.FINDFIRST THEN
          ERROR(
            STRSUBSTNO(
              GSTGroupCodeEqualErr,VendorLedgerEntry."Entry No.",
              FORMAT(PurchaseHeader."Document Type"),PurchaseHeader."No."));
      END;
    END;

    LOCAL PROCEDURE CheckAppliedTDSvalidation@1500077(VendLedgerEntry@1500001 : Record 25;PurchaseHeader@1500002 : Record 38);
    VAR
      PurchaseLine@1500003 : Record 39;
      GSTGroup@1500004 : Boolean;
    BEGIN
      GSTGroup := FALSE;
      VendLedgerEntry.RESET;
      VendLedgerEntry.SetAppliesToIDFilter(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Applies-to ID");
      IF VendLedgerEntry.FINDSET THEN
        REPEAT
          PurchaseLine.RESET;
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          PurchaseLine.SETRANGE("TDS Nature of Deduction", VendLedgerEntry."TDS Nature of Deduction");
          PurchaseLine.SETRANGE("GST Group Code",VendLedgerEntry."GST Group Code");
          IF PurchaseLine.FINDSET THEN REPEAT
            GSTGroup := TRUE;
          UNTIL PurchaseLine.NEXT = 0;
        UNTIL VendLedgerEntry.NEXT = 0;
      IF NOT GSTGroup THEN
        ERROR(
          STRSUBSTNO(
            GSTGroupCodeEqualErr,VendLedgerEntry."Entry No.",
            FORMAT(PurchaseHeader."Document Type"),PurchaseHeader."No."));
    END;

    BEGIN
    END.
  }
}

