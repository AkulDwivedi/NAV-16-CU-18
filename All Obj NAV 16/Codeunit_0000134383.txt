OBJECT Codeunit 134383 ERM Sales/Purch Status Error
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1008 : Codeunit 131300;
      LibraryInventory@1050 : Codeunit 132201;
      LibraryPmtDiscSetup@1019 : Codeunit 131303;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1001 : Codeunit 130509;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryReportDataset@1012 : Codeunit 131007;
      LibraryVariableStorage@1014 : Codeunit 131004;
      LibraryDimension@1015 : Codeunit 131001;
      LibraryWarehouse@1018 : Codeunit 132204;
      LibraryRandom@1000 : Codeunit 130440;
      LibrarySetupStorage@1021 : Codeunit 131009;
      Assert@1003 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      ErrorValidationErr@1006 : TextConst 'ENU=Error must be same.';
      StatusErr@1007 : TextConst '@@@={Locked};ENU="Status must be equal to ''Open''  in %1: %2=%3, %4=%5. Current value is ''Released''."';
      StringLengthExceededErr@1009 : TextConst 'ENU=StringLengthExceeded';
      DateFilterTok@1010 : TextConst '@@@={Locked};ENU=%1..%2';
      JournalLineErr@1011 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.';
      FieldValueErr@1013 : TextConst '@@@={Locked};ENU=Wrong %1 in %2';
      SalesDocumentTestReportDimErr@1016 : TextConst 'ENU=Sales Document Test Report has dimension errors';
      UnexpectedLocationCodeErr@1017 : TextConst 'ENU=Unexpected location code.';
      PostingDateNotAllowedErr@1020 : TextConst 'ENU=Posting Date is not within your range of allowed posting dates.';

    [Test]
    PROCEDURE SalesOrderVATProdPostingError@8();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of VAT Prod. Posting Group on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate VAT Prod. Posting Group for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE("VAT Prod. Posting Group");

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderQuantityError@11();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of Qty on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate Quantity for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE(Quantity);

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderItemNoError@14();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of Item No. on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate Item No. for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE("No.");

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderLineDiscountError@18();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of Line Discount Percent on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate Line Discount for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE("Line Discount %");

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderUnitPriceError@22();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of Unit Price on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate Unit Price for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE("Unit Price");

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderAllowInvDiscError@23();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of Allow Invoice Discount on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate Allow Invoice Discount for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE("Allow Invoice Disc.");

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderTypeError@26();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Check that Error Raised on Validate of Type on Sales Line when Sales Order is Released.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Exercise: Validate Sales Line Type for Error.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.VALIDATE(Type);

      // Verify: Verify Error Raised on Sales Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesLine.FIELDCAPTION("Document Type"),SalesLine."Document Type",
          SalesHeader.FIELDCAPTION("No."),SalesLine."Document No."),GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE SalesOrderPrepaymentNoSeriesValidation@62();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Check Prepayment No Series. validation does not throw unexpected error

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // Excercise and Verify: validation should be done without error.
      SalesHeader.VALIDATE("Prepayment No. Series",SetupSalesPrepaymentInvNoSeries);
      SalesHeader.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE SalesCrMemoPrepaymentCrMemoNoSeriesValidation@73();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Check Prepayment Cr. Memo No. Series. validation does not throw unexpected error

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo");

      // Excercise and Verify: validation should be done without error.
      SalesHeader.VALIDATE("Prepmt. Cr. Memo No. Series",SetupSalesPrepaymentCrMemoNoSeries);
      SalesHeader.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE SalesReturnOrderPrepaymentCrMemoNoSeriesValidation@72();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Check Prepayment Cr. Memo No. Series. validation does not throw unexpected error

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // Excercise and Verify: validation should be done without error.
      SalesHeader.VALIDATE("Prepmt. Cr. Memo No. Series",SetupSalesPrepaymentCrMemoNoSeries);
      SalesHeader.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE SalesReturnOrderUnitCostRetReasonInvValueZeroTrue@99();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Check Direct Cost in Sales Line after validating Location Code when Return Reason Code is set

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // Excercise: setup return reason code and location
      UpdateReturnReasonCodeOnSalesLine(SalesLine,TRUE);

      // Verify
      VerifySalesLineUnitCost(SalesLine,0);
    END;

    [Test]
    PROCEDURE SalesReturnOrderUnitCostRetReasonInvValueZeroFalse@90();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Check Direct Cost in Sales Line after validating Location Code when Return Reason Code is set

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // Excercise: setup return reason code and location
      UpdateReturnReasonCodeOnSalesLine(SalesLine,FALSE);

      // Verify
      VerifySalesLineUnitCost(SalesLine,GetItemCost(SalesLine."No."));
    END;

    [Test]
    PROCEDURE SalesOrderDeletion@27();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Check that Sales Header does not exist after Deletion.

      // Setup.
      Initialize;
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      DocumentNo := SalesLine."Document No.";

      // Exercise: Delete Sales Order.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      SalesHeader.DELETE(TRUE);

      // Verify: Verify that Sales Order does not exist after Deletion.
      Assert.IsFalse(SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo),'Sales Header must not exist.');
    END;

    [Test]
    PROCEDURE PurchOrderVATProdPostingError@1();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1003 : Record 39;
    BEGIN
      // Check that Error Raised on Validate of VAT Prod. Posting Group on Purchase Line when Purchase Order is Released.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate VAT Prod. Posting Group for Error.
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      ASSERTERROR PurchaseLine2.VALIDATE("VAT Prod. Posting Group");

      // Verify: Verify Error Raised on Purchase Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),
          PurchaseLine2."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseLine2."Document No."),
        GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE PurchOrderQuantityError@9();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
    BEGIN
      // Check that Error Raised on Validate of Quantity on Purchase Line when Purchase Order is Released.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Quantity for Error.
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      ASSERTERROR PurchaseLine2.VALIDATE(Quantity);

      // Verify: Verify Error Raised on Purchase Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),
          PurchaseLine2."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseLine2."Document No."),
        GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE PurchOrderItemNoError@13();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
    BEGIN
      // Check that Error Raised on Validate of Item No. on Purchase Line when Purchase Order is Released.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Item No. for Error.
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      ASSERTERROR PurchaseLine2.VALIDATE("No.");

      // Verify: Verify Error Raised on Purchase Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),
          PurchaseLine2."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseLine2."Document No."),
        GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE PurchOrderLineDiscountAmtError@16();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
    BEGIN
      // Check that Error Raised on Validate of Line Discount Amount on Purchase Line when Purchase Order is Released.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Line Discount Amount for Error.
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      ASSERTERROR PurchaseLine2.VALIDATE("Line Discount Amount");

      // Verify: Verify Error Raised on Purchase Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),
          PurchaseLine2."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseLine2."Document No."),
        GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE PurchOrderLineAmtError@19();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
    BEGIN
      // Check that Error Raised on Validate of Line Amount on Purchase Line when Purchase Order is Released.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Line Amount for Error.
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      ASSERTERROR PurchaseLine2.VALIDATE("Line Amount");

      // Verify: Verify Error Raised on Purchase Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),
          PurchaseLine2."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseLine2."Document No."),
        GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE PurchOrderChargeError@21();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1001 : Record 39;
    BEGIN
      // Check that Error Raised on Validate of Type Charge (Item) on Purchase Line when Purchase Order is Released.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Type Charge (Item) for Error.
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      ASSERTERROR PurchaseLine2.VALIDATE(Type,PurchaseLine2.Type::"Charge (Item)");

      // Verify: Verify Error Raised on Purchase Line Validation.
      Assert.AreEqual(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),
          PurchaseLine2."Document Type",PurchaseHeader.FIELDCAPTION("No."),PurchaseLine2."Document No."),
        GETLASTERRORTEXT,ErrorValidationErr);
    END;

    [Test]
    PROCEDURE PurchOrderPrepaymentNoSeriesValidation@75();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Check PrepaymentNo. Series. validation does not throw unexpected error

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // Exercise and Verify: field validation must not throw error
      PurchaseHeader.VALIDATE("Prepayment No. Series",SetupPurchasePrepaymentInvNoSeries);
      PurchaseHeader.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE PurchCrMemoPrepaymentCrMemoNoSeriesValidation@76();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Check Prepayment Cr. Memo No. Series. validation does not throw unexpected error

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise and Verify: field validation must not throw error
      PurchaseHeader.VALIDATE("Prepmt. Cr. Memo No. Series",SetupPurchasePrepaymentCrMemoNoSeries);
      PurchaseHeader.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE PurchReturnOrderPrepaymentCrMemoNoSeriesValidation@80();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Check Prepayment Cr. Memo No. Series. validation does not throw unexpected error

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order");

      // Exercise and Verify: field validation must not throw error
      PurchaseHeader.VALIDATE("Prepmt. Cr. Memo No. Series",SetupPurchasePrepaymentCrMemoNoSeries);
      PurchaseHeader.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE PurchReturnOrderUnitCostRetReasonInvValueZeroTrue@77();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Check Direct Cost in Purchase Line after validating Location Code when Return Reason Code is set

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order");

      // Excercise: setup return reason code and location

      UpdateReturnReasonCodeOnPurchaseLine(PurchaseLine,TRUE);

      // Verify
      VerifyPurchaseLineUnitCost(PurchaseLine,0);
    END;

    [Test]
    PROCEDURE PurchReturnOrderUnitCostRetReasonInvValueZeroFalse@74();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Check Direct Cost in Purchase Line after validating Location Code when Return Reason Code is set

      // Setup.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order");

      // Excercise: setup return reason code and location
      UpdateReturnReasonCodeOnPurchaseLine(PurchaseLine,FALSE);

      // Verify
      VerifyPurchaseLineUnitCost(PurchaseLine,GetItemCost(PurchaseLine."No."));
    END;

    [Test]
    PROCEDURE PurchOrderDeletion@25();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Check that Purchase Order does not exist after Deleting.

      // Setup.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      DocumentNo := PurchaseLine."Document No.";

      // Exercise: Delete Purchase Header.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseHeader.DELETE(TRUE);

      // Verify: Verify Purchase Header does not exist after Deletion.
      Assert.IsFalse(PurchaseHeader.GET(PurchaseLine."Document Type",DocumentNo),'Purchase Header must not exist.');
    END;

    [Test]
    PROCEDURE VATAmtAfterSalesOrderRelease@36();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check VAT Amount on Sales Order when its Release.
      Initialize;
      CreateSalesDocCheckAmtRelease(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE VATAmtAfterSalesOrderOpen@35();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check VAT Amount on Sales Order when its Open.
      Initialize;
      CreateSalesDocCheckAmtOpen(SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE VATAmtAfterSalesCMRelease@34();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check VAT Amount on Sales Credit Memo when its Release.
      Initialize;
      CreateSalesDocCheckAmtRelease(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE VATAmtAfterSalesCMOpen@33();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Check VAT Amount on Sales Credit Memo when its Open.
      Initialize;
      CreateSalesDocCheckAmtOpen(SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE VATAmtAfterPurchOrderRelease@32();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check VAT Amount on Purchase Order when its Release.
      Initialize;
      CreatePurchDocCheckAmtRelease(PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE VATAmtAfterPurchOrderOpen@31();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check VAT Amount on Purchase Order when its Open.
      Initialize;
      CreatePurchDocCheckAmtOpen(PurchaseHeader."Document Type"::Order);
    END;

    LOCAL PROCEDURE CreateSalesDocCheckAmtRelease@24(DocumentType@1006 : Option);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      VATBaseAmt@1004 : Decimal;
      AmtIncVAT@1005 : Decimal;
    BEGIN
      // Setup.
      CreateSalesOrder(SalesHeader,SalesLine,DocumentType);
      VATBaseAmt := SalesLine."Unit Price" * SalesLine.Quantity;
      AmtIncVAT := ROUND(VATBaseAmt + (VATBaseAmt * SalesLine."VAT %") / 100);

      // Exercise: Release Sales Document.
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Verify: Verify VAT Base Amount and Amount Including VAT on Sales Line.
      SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("VAT Base Amount",VATBaseAmt);
      SalesLine.TESTFIELD("Amount Including VAT",AmtIncVAT);
    END;

    LOCAL PROCEDURE CreateSalesDocCheckAmtOpen@20(DocumentType@1001 : Option);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Setup: Create and Release Sales Document.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,DocumentType);

      // Exercise: Open Sales Document.
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Verify: Verify VAT Base Amount and Amount Including VAT on Sales Line.
      SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("VAT Base Amount");
      SalesLine.TESTFIELD("Amount Including VAT");
    END;

    LOCAL PROCEDURE CreatePurchDocCheckAmtRelease@17(DocumentType@1001 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      VATBaseAmt@1004 : Decimal;
      AmtIncVAT@1005 : Decimal;
    BEGIN
      // Setup.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,DocumentType);
      VATBaseAmt := PurchaseLine."Direct Unit Cost" * PurchaseLine.Quantity;
      AmtIncVAT := ROUND(VATBaseAmt + (VATBaseAmt * PurchaseLine."VAT %") / 100);

      // Exercise: Release Purchase Document.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // Verify: Verify VAT Base Amount and Amount Including VAT on Purchase Line.
      PurchaseLine.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.");
      PurchaseLine.TESTFIELD("VAT Base Amount",VATBaseAmt);
      PurchaseLine.TESTFIELD("Amount Including VAT",AmtIncVAT);
    END;

    LOCAL PROCEDURE CreatePurchDocCheckAmtOpen@12(DocumentType@1001 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // Setup: Create and Release Purchase Order.
      Initialize;
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,DocumentType);

      // Exercise: Open Purchase Document.
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);

      // Verify: Verify VAT Base Amount and Amount Including VAT on Purchase Line.
      PurchaseLine.GET(PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseLine."Line No.");
      PurchaseLine.TESTFIELD("VAT Base Amount");
      PurchaseLine.TESTFIELD("Amount Including VAT");
    END;

    [Test]
    PROCEDURE SalesDocumentTestReport@28();
    VAR
      SalesHeader@1003 : Record 36;
      SalesDocumentTest@1006 : Report 202;
      DefaultPostingDate@1001 : Option;
      FilePath@1004 : Text[1024];
    BEGIN
      // Check Sales Document - Test Report when Sales Order is created with Foreign Currency and Blank Posting Date.

      // Setup.
      Initialize;
      SetupAndCreateSalesDocument(SalesHeader,DefaultPostingDate,SalesHeader."Document Type"::Order);

      // Exercise: Run and Save Sales Document - Test Report.
      CLEAR(SalesDocumentTest);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      SalesDocumentTest.SETTABLEVIEW(SalesHeader);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      SalesDocumentTest.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivableSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    PROCEDURE SalesOrderConfirmReport@29();
    VAR
      SalesHeader@1005 : Record 36;
      OrderConfirmation@1003 : Report 205;
      DefaultPostingDate@1001 : Option;
      FilePath@1000 : Text[1024];
    BEGIN
      // Check Order Confirmation Report when Sales Order is created with Foreign Currency and Blank Posting Date.

      // Setup.
      Initialize;
      SetupAndCreateSalesDocument(SalesHeader,DefaultPostingDate,SalesHeader."Document Type"::Order);

      // Exercise: Run and Save Order Confirmation Report.
      CLEAR(OrderConfirmation);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      OrderConfirmation.SETTABLEVIEW(SalesHeader);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      OrderConfirmation.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivableSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    PROCEDURE SalesReturnOrderConfirmReport@30();
    VAR
      SalesHeader@1004 : Record 36;
      ReturnOrderConfirmation@1003 : Report 6631;
      DefaultPostingDate@1002 : Option;
      FilePath@1000 : Text[1024];
    BEGIN
      // Check Return Order Confirmation Report when Sales Order is created with Foreign Currency and Blank Posting Date.

      // Setup.
      Initialize;
      SetupAndCreateSalesDocument(SalesHeader,DefaultPostingDate,SalesHeader."Document Type"::"Return Order");

      // Exercise: Run and Save Return Order Confirmation Report.
      CLEAR(ReturnOrderConfirmation);
      ReturnOrderConfirmation.SETTABLEVIEW(SalesHeader);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      ReturnOrderConfirmation.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivableSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    PROCEDURE PurchDocumentTestReport@39();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseDocumentTest@1005 : Report 402;
      DefaultPostingDate@1003 : Option;
      FilePath@1002 : Text[1024];
    BEGIN
      // Check Purchase Document - Test Report when Purchase Order is created with Foreign Currency and Blank Posting Date.

      // Setup.
      Initialize;
      SetupAndCreatePurchDocument(PurchaseHeader,DefaultPostingDate,PurchaseHeader."Document Type"::Order);

      // Exercise: Run and Save Purchase Document - Test Report.
      CLEAR(PurchaseDocumentTest);
      PurchaseDocumentTest.SETTABLEVIEW(PurchaseHeader);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      PurchaseDocumentTest.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdatePurchasePayableSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    PROCEDURE PurchOrderReport@38();
    VAR
      PurchaseHeader@1004 : Record 38;
      Order@1003 : Report 405;
      DefaultPostingDate@1001 : Option;
      FilePath@1000 : Text[1024];
    BEGIN
      // Check Order Report when Purchase Order is created with Foreign Currency and Blank Posting Date.

      // Setup.
      Initialize;
      SetupAndCreatePurchDocument(PurchaseHeader,DefaultPostingDate,PurchaseHeader."Document Type"::Order);

      // Exercise: Run and Save Order Report.
      CLEAR(Order);
      Order.SETTABLEVIEW(PurchaseHeader);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      Order.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdatePurchasePayableSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    PROCEDURE PurchReturnOrderReport@37();
    VAR
      PurchaseHeader@1004 : Record 38;
      ReturnOrder@1003 : Report 6641;
      DefaultPostingDate@1001 : Option;
      FilePath@1000 : Text[1024];
    BEGIN
      // Check Return Order Report when Purchase Order is created with Foreign Currency and Blank Posting Date.

      // Setup.
      Initialize;
      SetupAndCreatePurchDocument(PurchaseHeader,DefaultPostingDate,PurchaseHeader."Document Type"::"Return Order");

      // Exercise: Run and Save Return Order Report.
      ReturnOrder.SETTABLEVIEW(PurchaseHeader);
      CLEAR(ReturnOrder);
      FilePath := TEMPORARYPATH + FORMAT(PurchaseHeader."Document Type") + PurchaseHeader."No." + '.xlsx';
      ReturnOrder.SAVEASEXCEL(FilePath);

      // Verify: Verify that saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);

      // Tear Down: Cleanup of Setup Done.
      UpdatePurchasePayableSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    PROCEDURE ExceededLengthOfTarriffNo@42();
    VAR
      TariffNumber@1000 : Record 260;
    BEGIN
      // Verify error while insert Tariff No. more than 20 characters.

      // Setup.
      Initialize;
      TariffNumber.INIT;

      // Exercise.
      ASSERTERROR TariffNumber.VALIDATE(
          "No.",(LibraryUtility.GenerateGUID + LibraryUtility.GenerateGUID + LibraryUtility.GenerateGUID));  // Assign More than 20 characters.

      // Verify: Verify error while insert Tariff No. more than 20 characters.
      Assert.ExpectedErrorCode(StringLengthExceededErr);
    END;

    [Test]
    [HandlerFunctions(ShowMatrixPageHandler)]
    PROCEDURE DateFilterOnItemStatistic@65();
    VAR
      Item@1001 : Record 27;
      ItemStatistics@1000 : TestPage 5827;
    BEGIN
      // Verify Values on Item Matrix after set Date Filter on Item Statistics.

      // Setup. Find Item, open Item Statistics page and set Item and Date Filter.
      Initialize;
      LibraryInventory.CreateItem(Item);
      ItemStatistics.OPENEDIT;
      ItemStatistics.ItemFilter.SETVALUE(Item."No.");
      ItemStatistics.DateFilter.SETVALUE(STRSUBSTNO(DateFilterTok,WORKDATE,CALCDATE('<2M>',WORKDATE)));

      // Exercise.
      ItemStatistics.ShowMatrix.INVOKE;

      // Verify: Verify Values on Item Matrix by ShowMatrixPageHandler.
    END;

    [Test]
    PROCEDURE PostPaymentWithEarlierDateThanOnSalesInvoice@67();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that Error raised on Validate of Customer No. on Cash Receipt Journal Line when payment date for Cash Receipt is earlier than Sales Invoice Date.
      PostCashReceiptWithEarlierDateToCustomer(GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    PROCEDURE PostRefundWithEarlierDateThanOnCustomerCreditMemo@68();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that Error raised on Validate of Customer No. on  Cash Receipt Journal Line when payment date for refund is earlier than Credit Memo Date.
      PostCashReceiptWithEarlierDateToCustomer(GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund);
    END;

    LOCAL PROCEDURE PostCashReceiptWithEarlierDateToCustomer@87(DocumentTypeForSalesJournal@1012 : Option;DocumentTypeForCashReceiptJournal@1013 : Option);
    VAR
      BankAccount@1001 : Record 270;
      Customer@1000 : Record 18;
      GenJournalLine@1004 : Record 81;
      GenJournalLineForPayment@1006 : Record 81;
      GenJournalTemplate@1008 : Record 80;
    BEGIN
      // Setup: Post Sales Journal and Update Applies Doc No. on Cash Recceipt Journal.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      CreateCustomerWithPaymentTermsCode(Customer);
      CreateJournalLine(GenJournalLine,Customer."Gen. Bus. Posting Group",DocumentTypeForSalesJournal,
        GenJournalLine."Gen. Posting Type"::Sale,GenJournalTemplate.Type::Sales,
        GenJournalLine."Account Type"::Customer,Customer."No.",CreateAmount(DocumentTypeForSalesJournal));
      UpdateAdjustForPaymentDiscountOnVATPostingSetup(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindBankAccount(BankAccount);
      CreateJournalLineWithAppliesToDocNo(GenJournalLineForPayment,GenJournalTemplate.Type::"Cash Receipts",
        DocumentTypeForCashReceiptJournal,GenJournalLine."Document Type",GenJournalLine."Bal. Account Type"::Customer,
        GenJournalLine."Document No.");

      // Exercise: Validate Customer No. on Payment Journal Line.
      ASSERTERROR GenJournalLineForPayment.VALIDATE("Bal. Account No.",Customer."No.");

      // Verify: Verify Error raised on General Journal Line Validation.
      Assert.ExpectedError(JournalLineErr);
    END;

    [Test]
    PROCEDURE PostPaymentWithEarlierDateThanOnPurchaseInvoice@52();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that Error raised on Validate of Vendor No. on Payment Journal Line when payment date for Vendor payment is earlier than Purchase Invoice Date.
      PostPaymentWithEarlierDateToVendor(GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    PROCEDURE PostRefundWithEarlierDateOnOnVendorCreditMemo@50();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that Error raised on Validate of Vendor No. on Payment Journal Line when payment date on Vendor refund is earlier than on Credit Memo Date.
      PostPaymentWithEarlierDateToVendor(GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund);
    END;

    [Test]
    [HandlerFunctions(VerifySalesAmountOnShowMatrixPage)]
    PROCEDURE WorkDateGreaterThanDateFilterOnItemStatistic@70();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1000 : Record 83;
      ItemStatistics@1004 : TestPage 5827;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year,Accounting Period';
      SalesAmount@1002 : Decimal;
    BEGIN
      Initialize;
      // Setup. Create item.
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);

      // Setup. Create and Post Item Journal.
      PostItemJournal(Item."No.",ItemJournalLine."Entry Type"::Sale,WORKDATE);

      // Setup. Create and Post an Item Journal on next month.
      SalesAmount := PostItemJournal(Item."No.",ItemJournalLine."Entry Type"::Sale,CALCDATE('<1M>',WORKDATE));
      LibraryVariableStorage.Enqueue(SalesAmount);

      // Setup. Open Item Statistics page and set Item and Date Filter.
      ItemStatistics.OPENEDIT;
      ItemStatistics.ItemFilter.SETVALUE(Item."No.");
      ItemStatistics.ViewBy.SETVALUE(PeriodType::Month);
      ItemStatistics.DateFilter.SETVALUE(STRSUBSTNO(DateFilterTok,CALCDATE('<-CM>',WORKDATE),CALCDATE('<CM+1M>',WORKDATE)));

      // Exercise.
      ItemStatistics.ShowMatrix.INVOKE;

      // Verify: Verify Values on Item Matrix by ShowMatrixPageHandler.
    END;

    LOCAL PROCEDURE PostItemJournal@60(ItemNo@1002 : Code[20];ItemJournalLineEntryType@1003 : Option;PostingDate@1005 : Date) : Decimal;
    VAR
      ItemJournalTemplate@1004 : Record 82;
      ItemJournalBatch@1001 : Record 233;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup. Find Journal Batch
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalBatch.FINDFIRST;

      // Setup. Create Item Journal Line and Store the Sales Amount.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLineEntryType,ItemNo,
        LibraryRandom.RandInt(5));
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.MODIFY(TRUE);

      // Setup. Post Item Journal Line
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(ItemJournalLine.Amount);
    END;

    LOCAL PROCEDURE PostPaymentWithEarlierDateToVendor@45(DocumentTypeForPurchaseJournal@1012 : Option;DocumentTypeForPaymentJournal@1013 : Option);
    VAR
      BankAccount@1001 : Record 270;
      GenJournalLine@1004 : Record 81;
      GenJournalLineForPayment@1006 : Record 81;
      GenJournalTemplate@1008 : Record 80;
      Vendor@1000 : Record 23;
    BEGIN
      // Setup: Post Purchase Journal and Update Applies Doc No. on Payment Journal.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      CreateVendorWithPaymentTermsCode(Vendor);
      CreateJournalLine(GenJournalLine,Vendor."Gen. Bus. Posting Group",DocumentTypeForPurchaseJournal,
        GenJournalLine."Gen. Posting Type"::Purchase,GenJournalTemplate.Type::Purchases,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",-1 * CreateAmount(DocumentTypeForPurchaseJournal));
      UpdateAdjustForPaymentDiscountOnVATPostingSetup(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindBankAccount(BankAccount);
      CreateJournalLineWithAppliesToDocNo(GenJournalLineForPayment,GenJournalTemplate.Type::Payments,
        DocumentTypeForPaymentJournal,GenJournalLine."Document Type",GenJournalLine."Bal. Account Type"::Vendor,
        GenJournalLine."Document No.");

      // Exercise: Validate Vendor No. on Payment Journal Line.
      ASSERTERROR GenJournalLineForPayment.VALIDATE("Bal. Account No.",Vendor."No.");

      // Verify: Verify Error raised on General Journal Line Validation.
      Assert.ExpectedError(JournalLineErr);
    END;

    [Test]
    [HandlerFunctions(SalesDocumentTestRequestPage)]
    PROCEDURE SalesDocumentDimTestReport@66();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Check Sales Document - Test Report when Sales Order is Created and Shipped with Dimensions
      Initialize;

      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE); // Ship

      RunSalesDocumentTestReport(SalesHeader."Document Type"::Order,SalesHeader."No.");

      VerifySalesDocumentTestReportHasNoErrors;
    END;

    [Test]
    PROCEDURE ChangeCustWithLocaltionCodeOnSalesOrderWithBlankLine@93();
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      Location@1002 : Record 14;
    BEGIN
      // [SCENARIO 360231] Verify that location code can be updated in sales order with blank line.

      // [GIVEN] Sales Order with blank line
      Initialize;
      CreateSalesOrderWithBlankLine(SalesHeader);
      LibraryWarehouse.CreateLocation(Location);
      // [GIVEN] Customer A with location code X
      LibrarySales.CreateCustomerWithLocationCode(Customer,Location.Code);
      SalesHeader.SetHideValidationDialog(TRUE);

      // [WHEN] Set Customer A as "Sell-To Customer No."
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");

      // [THEN] Location code on the header is X
      Assert.AreEqual(Customer."Location Code",SalesHeader."Location Code",UnexpectedLocationCodeErr);
    END;

    [Test]
    PROCEDURE ChangeVendWithLocaltionCodeOnPurchOrderWithBlankLine@111();
    VAR
      Vendor@1001 : Record 23;
      PurchHeader@1000 : Record 38;
      Location@1002 : Record 14;
    BEGIN
      // [SCENARIO 360231] Verify that location code can be updated in purchase order with blank line.

      // [GIVEN] Purchase Order with blank line
      Initialize;
      CreatePurchOrderWithBlankLine(PurchHeader);
      LibraryWarehouse.CreateLocation(Location);
      // [GIVEN] Vendor A with location code X
      LibraryPurchase.CreateVendorWithLocationCode(Vendor,Location.Code);
      PurchHeader.SetHideValidationDialog(TRUE);

      // [WHEN] Set Vendor A as "Buy-from Vendor No."
      PurchHeader.VALIDATE("Buy-from Vendor No.",Vendor."No.");

      // [THEN] Location code on the header is X
      Assert.AreEqual(Vendor."Location Code",PurchHeader."Location Code",UnexpectedLocationCodeErr);
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE UnitPriceAfterValidatingReturnReasonCode@49();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      UnitPrice@1002 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Return Reason] [UT]
      // [SCENARIO 375645] Validating Return Reason Code with Inventory Value Zero in Sales Line should not reset Unit Price
      Initialize;

      // [GIVEN] Sales Line with Unit Price = "Y"
      // [GIVEN] Return Reason Code "X" with Inventory Value Zero = TRUE
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");
      UnitPrice := SalesLine."Unit Price";

      // [WHEN] Validate Return Reason Code in Sales Line to "X"
      SalesLine.VALIDATE("Return Reason Code",SetupReturnReasonCode(TRUE));

      // [THEN] Unit Price in Sales Line remains "Y"
      SalesLine.TESTFIELD("Unit Price",UnitPrice);
    END;

    [Test]
    PROCEDURE ReceivePurchaseOrderNotAllowedPostingDate@140();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 378711] "Receive" and "Invoice" fields remain unchanged when purchase order cannot be received due to "Posting Date" is out of allowed posting date range.

      // [GIVEN] GLSetup."Allow Posting From" = 01/01/2016
      // [GIVEN] GLSetup."Allow Posting To" = 31/01/2016
      Initialize;
      LibraryERM.SetAllowPostingFromTo(WORKDATE - 10,WORKDATE - 1);

      // [GIVEN] Purchase order "PO" with "Posting Date" = 21/02/2016, "Receive" = FALSE, "Invoice" = FALSE
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      COMMIT;

      // [WHEN] Post "PO" as receipt
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [THEN] "Posting Date is not within your range of allowed posting dates." error thrown
      PurchaseHeader.FIND;
      Assert.ExpectedError(PostingDateNotAllowedErr);

      // [THEN] "PO".Receive = FALSE
      PurchaseHeader.TESTFIELD(Receive,FALSE);
      // [THEN] "PO".Invoice = FALSE
      PurchaseHeader.TESTFIELD(Invoice,FALSE);
    END;

    [Test]
    PROCEDURE InvoicePurchaseReceiptNotAllowedPostingDate@146();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 378711] "Receive" and "Invoice" fields remain unchanged when purchase receipt cannot be invoiced due to "Posting Date" is out of allowed posting date range.

      // [GIVEN] GLSetup."Allow Posting From" = 01/01/2016
      // [GIVEN] GLSetup."Allow Posting To" = 31/01/2016
      Initialize;
      LibraryERM.SetAllowPostingFromTo(WORKDATE - 10,WORKDATE + 10);

      // [GIVEN] Purchase order "PO" posted as receipt with "Posting Date" = 21/01/2016, "Receive" = TRUE, "Invoice" = FALSE
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      COMMIT;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      PurchaseHeader.FIND;
      PurchaseHeader.TESTFIELD(Receive,TRUE);
      PurchaseHeader.TESTFIELD(Invoice,FALSE);

      // [GIVEN] "PO"."Posting Date" changed to 01/02/2016
      PurchaseHeader.VALIDATE("Posting Date",WORKDATE + 11);
      PurchaseHeader.MODIFY(TRUE);
      COMMIT;

      // [WHEN] Post "PO" as invoice
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] "Posting Date is not within your range of allowed posting dates." error thrown
      PurchaseHeader.FIND;
      Assert.ExpectedError(PostingDateNotAllowedErr);

      // [THEN] "PO".Receive = TRUE
      PurchaseHeader.TESTFIELD(Receive,TRUE);
      // [THEN] "PO".Invoice = FALSE
      PurchaseHeader.TESTFIELD(Invoice,FALSE);
    END;

    [Test]
    PROCEDURE ShipSalesOrderNotAllowedPostingDate@84();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 378711] "Ship" and "Invoice" fields remain unchanged when sales order cannot be shipped due to "Posting Date" is out of allowed posting date range.

      // [GIVEN] GLSetup."Allow Posting From" = 01/01/2016
      // [GIVEN] GLSetup."Allow Posting To" = 31/01/2016
      Initialize;
      LibraryERM.SetAllowPostingFromTo(WORKDATE - 10,WORKDATE - 1);

      // [GIVEN] Sales order "SO" with "Posting Date" = 21/02/2016, "Ship" = FALSE, "Invoice" = FALSE
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      COMMIT;

      // [WHEN] Post "SO" as shipment
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] "Posting Date is not within your range of allowed posting dates." error thrown
      SalesHeader.FIND;
      Assert.ExpectedError(PostingDateNotAllowedErr);

      // [THEN] "SO".Shipment = FALSE
      SalesHeader.TESTFIELD(Ship,FALSE);
      // [THEN] "SO".Invoice = FALSE
      SalesHeader.TESTFIELD(Invoice,FALSE);
    END;

    [Test]
    PROCEDURE InvoiceSalesShipmentNotAllowedPostingDate@69();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 378711] "Ship" and "Invoice" fields remain unchanged when sales shipment cannot be invoiced due to "Posting Date" is out of allowed posting date range.

      // [GIVEN] GLSetup."Allow Posting From" = 01/01/2016
      // [GIVEN] GLSetup."Allow Posting To" = 31/01/2016
      Initialize;
      LibraryERM.SetAllowPostingFromTo(WORKDATE - 10,WORKDATE + 10);

      // [GIVEN] Sals order "SO" posted as shipment with "Posting Date" = 21/01/2016, "Ship" = TRUE, "Invoice" = FALSE
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      COMMIT;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      SalesHeader.FIND;
      SalesHeader.TESTFIELD(Ship,TRUE);
      SalesHeader.TESTFIELD(Invoice,FALSE);

      // [GIVEN] "SO"."Posting Date" changed to 01/02/2016
      SalesHeader.VALIDATE("Posting Date",WORKDATE + 11);
      SalesHeader.MODIFY(TRUE);
      COMMIT;

      // [WHEN] Post "SO" as invoice
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // [THEN] "Posting Date is not within your range of allowed posting dates." error thrown
      SalesHeader.FIND;
      Assert.ExpectedError(PostingDateNotAllowedErr);

      // [THEN] "SO".Shipment = TRUE
      SalesHeader.TESTFIELD(Ship,TRUE);
      // [THEN] "SO".Invoice = FALSE
      SalesHeader.TESTFIELD(Invoice,FALSE);
    END;

    [Test]
    PROCEDURE SendToPostBlankSalesHeader@56();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // [FEATURE] [UT] [Sales]
      // [SCENARIO 379956] Throw error "There is nothing to post" without intermediate confirmations when send to post blank Sales Header
      SalesHeader.INIT;

      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Sales-Post (Yes/No)",SalesHeader);

      Assert.ExpectedError('There is nothing to post');
    END;

    [Test]
    PROCEDURE SendToPostBlankPurchaseHeader@61();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // [FEATURE] [UT] [Purchase]
      // [SCENARIO 379956] Throw error "There is nothing to post" without intermediate confirmations when send to post blank Purchase Header
      PurchaseHeader.INIT;

      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Purch.-Post (Yes/No)",PurchaseHeader);

      Assert.ExpectedError('There is nothing to post');
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@10(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1002 : Option);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,DocumentType);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@2(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1002 : Option);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,DocumentType);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrder@6(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1006 : Option);
    BEGIN
      // Using Random Value for Quantity and Unit Price in Sales Line.
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Line Discount %",0);  // Keep Line Discount % Zero.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithBlankLine@98(VAR SalesHeader@1000 : Record 36);
    VAR
      Customer@1001 : Record 18;
      SalesLine@1003 : Record 37;
      RecRef@1004 : RecordRef;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      WITH SalesLine DO BEGIN
        INIT;
        VALIDATE("Document Type",SalesHeader."Document Type");
        VALIDATE("Document No.",SalesHeader."No.");
        RecRef.GETTABLE(SalesLine);
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No.")));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@15(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1003 : Option);
    BEGIN
      // Using Random Value for Quantity and Direct Unit Cost in Purchase Line.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchOrderWithBlankLine@114(VAR PurchHeader@1000 : Record 38);
    VAR
      Vendor@1001 : Record 23;
      PurchLine@1003 : Record 39;
      RecRef@1004 : RecordRef;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,Vendor."No.");
      WITH PurchLine DO BEGIN
        INIT;
        VALIDATE("Document Type",PurchHeader."Document Type");
        VALIDATE("Document No.",PurchHeader."No.");
        RecRef.GETTABLE(PurchLine);
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No.")));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithFCY@40(VAR SalesHeader@1002 : Record 36;DocumentType@1000 : Option);
    VAR
      Currency@1003 : Record 4;
      SalesLine@1001 : Record 37;
    BEGIN
      // Using Random Value for Quantity in Sales Line.
      LibraryERM.FindCurrency(Currency);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      SalesHeader.VALIDATE("Currency Code",Currency.Code);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentFCY@41(VAR PurchaseHeader@1002 : Record 38;DocumentType@1000 : Option);
    VAR
      Currency@1003 : Record 4;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Using Random Value for Quantity in Purchase Line.
      LibraryERM.FindCurrency(Currency);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Currency Code",Currency.Code);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateVendor@5() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@4() : Code[20];
    VAR
      Customer@1000 : Record 18;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      CreateCustDefaultDimension(Customer."No.");
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@3() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.VALIDATE("Last Direct Cost",Item."Unit Cost");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTermsCode@48(VAR Customer@1000 : Record 18);
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      Customer.GET(CreateCustomer);
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTermsCode@57(VAR Vendor@1000 : Record 23);
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      Vendor.GET(CreateVendor);
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalTemplate@88(VAR GenJournalTemplate@1000 : Record 80;Type@1001 : Option);
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,Type);
      GenJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalLine@54(VAR GenJournalLine@1001 : Record 81;GenBusinessPostingGroup@1002 : Code[10];DocumentType@1006 : Option;GenPostingType@1003 : Option;GenJournalTemplateType@1004 : Option;AccountType@1007 : Option;AccountNo@1008 : Code[20];Amount@1009 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalTemplate@1005 : Record 80;
    BEGIN
      CreateGeneralJournalTemplate(GenJournalTemplate,GenJournalTemplateType);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",CreateGLAccount(GenBusinessPostingGroup,GenPostingType));
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenPostingType);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalLineWithAppliesToDocNo@55(VAR GenJournalLine@1004 : Record 81;GenJournalTemplateType@1008 : Option;DocumentType@1006 : Option;AppliesToDocumentType@1007 : Option;BalAccountType@1009 : Option;DocumentNo@1003 : Code[20]);
    VAR
      BankAccount@1000 : Record 270;
      GenJournalBatch@1001 : Record 232;
      GenJournalTemplate@1002 : Record 80;
    BEGIN
      LibraryERM.FindBankAccount(BankAccount);
      CreateGeneralJournalTemplate(GenJournalTemplate,GenJournalTemplateType);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::"Bank Account",BankAccount."No.",LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Posting Date",CALCDATE(STRSUBSTNO('<-%1D>',LibraryRandom.RandInt(10)),WORKDATE));
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",AppliesToDocumentType);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAmount@79(DocumentType@1000 : Option) : Decimal;
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      IF GenJournalLine."Document Type"::Invoice = DocumentType THEN
        EXIT(LibraryRandom.RandDecInRange(1000,2000,2));
      EXIT(-1 * LibraryRandom.RandDecInRange(1000,2000,2));
    END;

    LOCAL PROCEDURE CreateGLAccount@53(GenBusPostingGroup@1000 : Code[10];GenPostingType@1002 : Option) : Code[20];
    VAR
      VATPostingSetup@1003 : Record 325;
      GLAccount@1001 : Record 15;
    BEGIN
      WITH GLAccount DO BEGIN
        LibraryERM.CreateGLAccount(GLAccount);
        VALIDATE("Gen. Posting Type",GenPostingType);
        VALIDATE("Income/Balance","Income/Balance"::"Income Statement");
        VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup);
        LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT"); // required for NO
        VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
        VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateCustDefaultDimension@83(CustNo@1002 : Code[20]);
    VAR
      DefaultDimension@1000 : Record 352;
      Dimension@1003 : Record 348;
      DimensionValue@1004 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,CustNo,Dimension.Code,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY;
    END;

    LOCAL PROCEDURE GetItemCost@100(ItemNo@1000 : Code[20]) : Decimal;
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      EXIT(Item."Unit Cost");
    END;

    LOCAL PROCEDURE RunSalesDocumentTestReport@64(DocumentType@1001 : Option;DocumentNo@1003 : Code[20]);
    VAR
      SalesHeader@1004 : Record 36;
      SalesDocumentTest@1002 : Report 202;
    BEGIN
      COMMIT;
      CLEAR(SalesDocumentTest);
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.SETRANGE("No.",DocumentNo);
      SalesDocumentTest.SETTABLEVIEW(SalesHeader);
      SalesDocumentTest.RUN;
    END;

    LOCAL PROCEDURE SetupAndCreateSalesDocument@46(VAR SalesHeader@1003 : Record 36;VAR DefaultPostingDate@1000 : Option;DocumentType@1001 : Option);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      // Update Sales & Receivable Setup and Create Sales document.

      SalesReceivablesSetup.GET;
      UpdateSalesReceivableSetup(DefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"No Date");
      CreateSalesDocumentWithFCY(SalesHeader,DocumentType);
    END;

    LOCAL PROCEDURE SetupAndCreatePurchDocument@47(VAR PurchaseHeader@1003 : Record 38;VAR DefaultPostingDate@1001 : Option;DocumentType@1000 : Option);
    VAR
      PurchasesPayablesSetup@1002 : Record 312;
    BEGIN
      // Update Purchase & Payable Setup and Create Sales document.

      PurchasesPayablesSetup.GET;
      UpdatePurchasePayableSetup(DefaultPostingDate,PurchasesPayablesSetup."Default Posting Date"::"No Date");
      CreatePurchaseDocumentFCY(PurchaseHeader,DocumentType);
    END;

    LOCAL PROCEDURE SetupSalesPrepaymentInvNoSeries@89() : Code[10];
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Posted Prepmt. Inv. Nos.",LibraryERM.CreateNoSeriesCode);
        MODIFY(TRUE);
        EXIT("Posted Prepmt. Inv. Nos.");
      END;
    END;

    LOCAL PROCEDURE SetupPurchasePrepaymentInvNoSeries@81() : Code[10];
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      WITH PurchasesPayablesSetup DO BEGIN
        GET;
        VALIDATE("Posted Prepmt. Inv. Nos.",LibraryERM.CreateNoSeriesCode);
        MODIFY(TRUE);
        EXIT("Posted Prepmt. Inv. Nos.");
      END;
    END;

    LOCAL PROCEDURE SetupSalesPrepaymentCrMemoNoSeries@86() : Code[10];
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Posted Prepmt. Cr. Memo Nos.",LibraryERM.CreateNoSeriesCode);
        MODIFY(TRUE);
        EXIT("Posted Prepmt. Cr. Memo Nos.");
      END;
    END;

    LOCAL PROCEDURE SetupPurchasePrepaymentCrMemoNoSeries@85() : Code[10];
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      WITH PurchasesPayablesSetup DO BEGIN
        GET;
        VALIDATE("Posted Prepmt. Cr. Memo Nos.",LibraryERM.CreateNoSeriesCode);
        MODIFY(TRUE);
        EXIT("Posted Prepmt. Cr. Memo Nos.");
      END;
    END;

    LOCAL PROCEDURE SetupReturnReasonCode@59(InventoryValueZero@1001 : Boolean) : Code[10];
    VAR
      ReturnReason@1000 : Record 6635;
    BEGIN
      LibraryERM.CreateReturnReasonCode(ReturnReason);
      ReturnReason."Inventory Value Zero" := InventoryValueZero;
      ReturnReason.MODIFY;
      EXIT(ReturnReason.Code);
    END;

    LOCAL PROCEDURE UpdateAdjustForPaymentDiscountOnVATPostingSetup@51(GenJournalLine@1003 : Record 81);
    VAR
      VATPostingSetup@1002 : Record 325;
    BEGIN
      VATPostingSetup.GET(GenJournalLine."Bal. VAT Bus. Posting Group",GenJournalLine."Bal. VAT Prod. Posting Group");
      VATPostingSetup.VALIDATE("Adjust for Payment Discount",TRUE);
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivableSetup@43(VAR OldDefaultPostingDate@1001 : Option;DefaultPostingDate@1002 : Option);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldDefaultPostingDate := SalesReceivablesSetup."Default Posting Date";
      SalesReceivablesSetup.VALIDATE("Default Posting Date",DefaultPostingDate);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchasePayableSetup@44(VAR OldDefaultPostingDate@1003 : Option;DefaultPostingDate@1002 : Option);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      OldDefaultPostingDate := PurchasesPayablesSetup."Default Posting Date";
      PurchasesPayablesSetup.VALIDATE("Default Posting Date",DefaultPostingDate);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReturnReasonCodeOnSalesLine@78(VAR SalesLine@1000 : Record 37;InventoryValueZero@1001 : Boolean);
    BEGIN
      WITH SalesLine DO BEGIN
        VerifySalesLineUnitCost(SalesLine,GetItemCost("No."));
        VALIDATE("Return Reason Code",SetupReturnReasonCode(InventoryValueZero));
      END;
    END;

    LOCAL PROCEDURE UpdateReturnReasonCodeOnPurchaseLine@103(VAR PurchaseLine@1001 : Record 39;InventoryValueZero@1002 : Boolean);
    BEGIN
      WITH PurchaseLine DO BEGIN
        VerifyPurchaseLineUnitCost(PurchaseLine,GetItemCost("No."));
        VALIDATE("Return Reason Code",SetupReturnReasonCode(InventoryValueZero));
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ShowMatrixPageHandler@71(VAR ItemStatisticsMatrix@1000 : TestPage 9223);
    BEGIN
      ItemStatisticsMatrix.Amount.ASSERTEQUALS(0);
      ItemStatisticsMatrix.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifySalesAmountOnShowMatrixPage@58(VAR ItemStatisticsMatrix@1000 : TestPage 9223);
    VAR
      SalesAmount@1001 : Variant;
    BEGIN
      // Verify the value displayed on Field is correctly.
      LibraryVariableStorage.Dequeue(SalesAmount);
      ItemStatisticsMatrix.Field2.ASSERTEQUALS(SalesAmount);
      ItemStatisticsMatrix.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifySalesLineUnitCost@91(SalesLine@1000 : Record 37;ExpectedValue@1001 : Decimal);
    BEGIN
      Assert.AreEqual(
        ExpectedValue,
        SalesLine."Unit Cost (LCY)",
        STRSUBSTNO(FieldValueErr,SalesLine.FIELDCAPTION("Unit Cost (LCY)"),SalesLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyPurchaseLineUnitCost@92(PurchaseLine@1000 : Record 39;ExpectedValue@1001 : Decimal);
    BEGIN
      Assert.AreEqual(
        ExpectedValue,
        PurchaseLine."Direct Unit Cost",
        STRSUBSTNO(FieldValueErr,PurchaseLine.FIELDCAPTION("Direct Unit Cost"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifySalesDocumentTestReportHasNoErrors@96();
    VAR
      i@1001 : Integer;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      FOR i := 1 TO LibraryReportDataset.RowCount DO BEGIN
        LibraryReportDataset.MoveToRow(i);
        Assert.IsFalse(LibraryReportDataset.CurrentRowHasElement('LineErrorCounter_Number'),SalesDocumentTestReportDimErr);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE SalesDocumentTestRequestPage@82(VAR SalesDocumentTest@1000 : TestRequestPage 202);
    BEGIN
      SalesDocumentTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      Unsupported version tags:

      Test Sales and Purchase Order Status Validation.
      1. Check that Error Raised on Validate of VAT Prod. Posting Group on Sales Line when Sales Order is Released.
      2. Check that Error Raised on Validate of Qty on Sales Line when Sales Order is Released.
      3. Check that Error Raised on Validate of Item No. on Sales Line when Sales Order is Released.
      4. Check that Error Raised on Validate of Line Discount Percent on Sales Line when Sales Order is Released.
      5. Check that Error Raised on Validate of Unit Price on Sales Line when Sales Order is Released.
      6. Check that Error Raised on Validate of Allow Invoice Discount on Sales Line when Sales Order is Released.
      7. Check that Error Raised on Validate of Type on Sales Line when Sales Order is Released.
      8. Check that Sales Header does not exist after Deletion.
      9. Check that Error Raised on Validate of VAT Prod. Posting Group on Purchase Line when Purchase Order is Released.
      10. Check that Error Raised on Validate of Qty on Purchase Line when Purchase Order is Released.
      11. Check that Error Raised on Validate of Item No. on Purchase Line when Purchase Order is Released.
      12. Check that Error Raised on Validate of Line Discount Amount on Purchase Line when Purchase Order is Released.
      13. Check that Error Raised on Validate of Line Amount on Purchase Line when Purchase Order is Released.
      14. Check that Error Raised on Validate of Type Charge (Item) on Purchase Line when Purchase Order is Released.
      15. Check that Purchase Header does not exist after Deletion.
      16. Check VAT Amount on Sales Order when its Release.
      17. Check VAT Amount on Sales Order when its Open.
      18. Check VAT Amount on Sales Credit Memo when its Release.
      19. Check VAT Amount on Sales Credit Memo when its Open.
      20. Check VAT Amount on Purchase Order when its Release.
      21. Check VAT Amount on Purchase Order when its Open.
      22. Check VAT Amount on Purchase Invoice when its Release.
      23. Check VAT Amount on Purchase Invoice when its Open.
      24. Check Sales Document - Test Report when Sales Order is created with Foreign Currency and Blank Posting Date.
      25. Check Order Confirmation Report when Sales Order is created with Foreign Currency and Blank Posting Date.
      26. Check Return Order Confirmation Report when Sales Order is created with Foreign Currency and Blank Posting Date.
      27. Check Purchase Document - Test Report when Purchase Order is created with Foreign Currency and Blank Posting Date.
      28. Check Order Report when Purchase Order is created with Foreign Currency and Blank Posting Date.
      29. Check Return Order Report when Purchase Order is created with Foreign Currency and Blank Posting Date.
      30. Verify error while insert Tariff No. more than 20 characters.
      31. Verify Values on Item Matrix after set Date Filter on Item Statistics.
      32. Check that Error raised on Validate of Customer No. on Cash Receipt Journal Line when payment date for Cash Receipt is earlier than Sales Invoice Date.
      33. Check that Error raised on Validate of Customer No. on  Cash Receipt Journal Line when payment date for refund is earlier than Credit Memo Date.
      34. Check that Error raised on Validate of Vendor No. on Payment Journal Line when payment date for Vendor payment is earlier than Purchase Invoice Date.
      35. Check that Error raised on Validate of Vendor No. on Payment Journal Line when payment date on Vendor refund is earlier than on Credit Memo Date.
      36. Verify value displayed on Item Matrix correctly with Work Date greater or equal to Date Filter.
      37. Check proper validation of Prepayment No. Series, Prepayment Cr. Memo No. Series field in Sales/Purhase header
      38. Check Unit cost on setting Return Reason and Location Codes (Sales/Purchase side)
      39. Verify Sales Document Test Report has no errors in case of dimension and posted line

        Covers Test Cases - 206890
        ---------------------------------------------------
        Test Function Name                        TFS ID
        ---------------------------------------------------
        SalesOrderVATProdPostingError           126852
        SalesOrderQuantityError                 126853
        SalesOrderItemNoError                   126854
        SalesOrderLineDiscountError             126855
        SalesOrderUnitPriceError                126856
        SalesOrderAllowInvDiscError             127098
        SalesOrderTypeError                     127099
        SalesOrderDeletion                      127100

        Covers Test Cases - 206891
        ---------------------------------------------------
        Test Function Name                        TFS ID
        ---------------------------------------------------
        PurchOrderVATProdPostingError           127101
        PurchOrderQuantityError                 127102
        PurchOrderItemNoError                   127103
        PurchOrderLineDiscountAmtError          127104
        PurchOrderLineAmtError                  127105
        PurchOrderChargeError                   127106
        PurchOrderDeletion                      127107

        Covers Test Cases - 206887
        ---------------------------------------------------
        Test Function Name                        TFS ID
        ---------------------------------------------------
        VATAmtAfterSalesOrderRelease              126973
        VATAmtAfterSalesOrderOpen                 126974
        VATAmtAfterSalesCMRelease                 126975
        VATAmtAfterSalesCMOpen                    126976
        VATAmtAfterPurchOrderRelease              126977
        VATAmtAfterPurchOrderOpen                 126978 to 126980

        Covers Test Cases - 258825
        --------------------------------------------------------------------------------------------
        Test Function Name                                                                    TFS ID
        --------------------------------------------------------------------------------------------
        SalesDocumentTestReport,SalesOrderConfirmReport,SalesReturnOrderConfirmReport
        PurchDocumentTestReport,PurchOrderReport,PurchRetunOrderReport                        251146

        Covers Test Cases - 318379
        --------------------------------------------------------------------------------------------
        Test Function Name                                                                    TFS ID
        --------------------------------------------------------------------------------------------
        ExceededLengthOfTarriffNo                                                             252011
        DateFilterOnItemStatistic                                                             241080

        Covers Test Cases - 328692
        ----------------------------------------------------------------------------------------------------------
        Test Function Name                                                                             TFS ID
        ----------------------------------------------------------------------------------------------------------
       PostPaymentWithEarlierDateThanOnSalesInvoice,PostRefundWithEarlierDateThanOnCustomerCreditMemo
       PostPaymentWithEarlierDateThanOnPurchaseInvoice,PostRefundWithEarlierDateOnOnVendorCreditMemo    328693

        Covers Test Cases - 335723
        --------------------------------------------------------------------------------------------
        Test Function Name                                                                    TFS ID
        --------------------------------------------------------------------------------------------
        WorkDateGreaterThanDateFilterOnItemStatistic
        SalesOrderPrepaymentNoSeriesValidation                                                88482
        SalesCrMemoPrepaymentCrMemoNoSeriesValidation                                         88482
        SalesReturnOrderPrepaymentCrMemoNoSeriesValidation                                    88482
        PurchOrderPrepaymentNoSeriesValidation                                                88482
        PurchCrMemoPrepaymentCrMemoNoSeriesValidation                                         88482
        PurchReturnOrderPrepaymentCrMemoNoSeriesValidation                                    88481
        SalesReturnOrderUnitCostRetReasonInvValueZeroTrue                                     90123
        SalesReturnOrderUnitCostRetReasonInvValueZeroFalse                                    90123
        PurchReturnOrderUnitCostRetReasonInvValueZeroTrue                                     90123
        PurchReturnOrderUnitCostRetReasonInvValueZeroFalse                                    90123
        SalesDocumentDimTestReport                                                            94629
        ChangeCustWithLocaltionCodeOnSalesOrderWithBlankLine                                  124000
        ChangeVendWithLocaltionCodeOnPurchOrderWithBlankLine                                  124000
    }
    END.
  }
}

