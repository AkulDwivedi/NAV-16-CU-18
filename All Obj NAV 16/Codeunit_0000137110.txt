OBJECT Codeunit 137110 SCM Kitting - Cost Shares Tree
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Item@1010 : Record 27;
      LibraryERM@1000 : Codeunit 131300;
      LibraryERMCountryData@1008 : Codeunit 131305;
      LibraryTrees@1015 : Codeunit 132208;
      Assert@1002 : Codeunit 130000;
      isInitialized@1006 : Boolean;
      ERRWrongCostShare@1014 : TextConst 'ENU=Wrong %1 in item %2.';
      ERRWrongCostShareCalc@1011 : TextConst 'ENU=Wrong %1 in item %2 - versus calculated value.';
      GLBChangeType@1012 : 'None,Purchase With Assembly BOM,Purchase with Prod. BOM,Prod. without Prod. BOM,Assembly without BOM';
      ERRWrongWarningParent@1001 : TextConst 'ENU=Warning were not issued for parent item.';
      ERRWrongWarningElement@1004 : TextConst 'ENU=Wrong BOM Warning Log found for entity %1.';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    BEGIN
      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeBasic@11(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTopItem(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyBasic@74();
    BEGIN
      CostSharesTreeBasic(Item."Replenishment System"::Assembly,2,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderBasic@73();
    BEGIN
      CostSharesTreeBasic(Item."Replenishment System"::"Prod. Order",2,1,2);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeOverhead@64(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddOverhead(TempItem,TempResource,TempWorkCenter,TempMachineCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTopItem(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyOverhead@77();
    BEGIN
      CostSharesTreeOverhead(Item."Replenishment System"::Assembly,2,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderOverhead@76();
    BEGIN
      CostSharesTreeOverhead(Item."Replenishment System"::"Prod. Order",2,1,2);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeItemScrap@65(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddScrapForItems(TempItem);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTreeWithScrap(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyItemScrap@79();
    BEGIN
      CostSharesTreeItemScrap(Item."Replenishment System"::Assembly,2,2,0);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderItemScrap@78();
    BEGIN
      CostSharesTreeItemScrap(Item."Replenishment System"::"Prod. Order",2,2,0);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeBOMScrap@67(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddScrapForProdBOM(TempItem);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTreeWithScrap(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyBOMScrap@81();
    BEGIN
      CostSharesTreeBOMScrap(Item."Replenishment System"::Assembly,1,2,1);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderBOMScrap@80();
    BEGIN
      CostSharesTreeBOMScrap(Item."Replenishment System"::"Prod. Order",1,2,1);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeRoutingScrap@6(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddScrapForRoutings(TempItem);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTreeWithScrap(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyRoutingScrap@5();
    BEGIN
      CostSharesTreeRoutingScrap(Item."Replenishment System"::Assembly,1,1,3);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderRoutingScrap@2();
    BEGIN
      CostSharesTreeRoutingScrap(Item."Replenishment System"::"Prod. Order",1,1,3);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeMachineCenterScrap@69(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddScrapForMachineCenters(TempMachineCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTopItem(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyMCenterScrap@26();
    BEGIN
      CostSharesTreeMachineCenterScrap(Item."Replenishment System"::Assembly,1,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderMCenterScrap@28();
    BEGIN
      CostSharesTreeMachineCenterScrap(Item."Replenishment System"::"Prod. Order",1,1,2);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeSubcontracting@24(TopItemReplSystem@1006 : Option;Depth@1008 : Integer;ChildLeaves@1013 : Integer;RoutingLines@1001 : Integer);
    VAR
      Item@1015 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,Depth,ChildLeaves,RoutingLines);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      LibraryTrees.AddSubcontracting(TempWorkCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTopItem(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblySubcontr@23();
    BEGIN
      CostSharesTreeSubcontracting(Item."Replenishment System"::Assembly,1,1,2);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdOrderSubcontr@22();
    BEGIN
      CostSharesTreeSubcontracting(Item."Replenishment System"::"Prod. Order",1,1,2);
    END;

    [Normal]
    LOCAL PROCEDURE CostSharesTreeWarning@147(TopItemReplSystem@1001 : Option;WarningTableID@1011 : Integer;ChangeType@1013 : Option);
    VAR
      Item@1015 : Record 27;
      Item1@1008 : Record 27;
      TempItem@1000 : TEMPORARY Record 27;
      TempResource@1002 : TEMPORARY Record 156;
      TempWorkCenter@1005 : TEMPORARY Record 99000754;
      TempMachineCenter@1007 : TEMPORARY Record 99000758;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
      WarningText@1012 : Text[20];
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,2,1,1);
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      LibraryTrees.AddCostToRouting(TempWorkCenter,TempMachineCenter);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CASE WarningTableID OF
        DATABASE::"Production BOM Header":
          AddBOMWarning(TempItem,Item1,WarningText);
        DATABASE::"Routing Header":
          AddRoutingWarning(TempItem,Item1,WarningText);
        DATABASE::Item:
          AddReplSystemWarning(TempItem,Item1,WarningText,ChangeType);
      END;
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyWarnings(BOMBuf,WarningTableID,WarningText);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyBOMWarning@161();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::Assembly,DATABASE::"Production BOM Header",GLBChangeType::None);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyRoutingWarning@21();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::Assembly,DATABASE::"Routing Header",GLBChangeType::None);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyReplWarning1@25();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::Assembly,DATABASE::Item,GLBChangeType::"Purchase With Assembly BOM");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyReplWarning2@27();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::Assembly,DATABASE::Item,GLBChangeType::"Purchase with Prod. BOM");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyReplWarning3@29();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::Assembly,DATABASE::Item,GLBChangeType::"Prod. without Prod. BOM");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE TopItemAssemblyReplWarning4@111();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::Assembly,DATABASE::Item,GLBChangeType::"Assembly without BOM");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdBOMWarning@39();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::"Prod. Order",DATABASE::"Production BOM Header",GLBChangeType::None);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdRoutingWarning@37();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::"Prod. Order",DATABASE::"Routing Header",GLBChangeType::None);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdReplWarning1@36();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::"Prod. Order",DATABASE::Item,GLBChangeType::"Purchase With Assembly BOM");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdReplWarning2@35();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::"Prod. Order",DATABASE::Item,GLBChangeType::"Purchase with Prod. BOM");
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE TopItemProdReplWarning3@34();
    BEGIN
      CostSharesTreeWarning(Item."Replenishment System"::"Prod. Order",DATABASE::Item,GLBChangeType::"Prod. without Prod. BOM");
    END;

    [Normal]
    LOCAL PROCEDURE ZeroQtyPerTree@7(TopItemReplSystem@1006 : Option;Indentation@1009 : Integer;IsLeaf@1010 : Boolean);
    VAR
      BOMComponent@1001 : Record 90;
      Item@1015 : Record 27;
      BOMBuf@1004 : Record 5870;
      CalcStandardCost@1003 : Codeunit 5812;
    BEGIN
      // Setup.
      Initialize;
      LibraryTrees.CreateMixedTree(Item,TopItemReplSystem,Item."Costing Method"::Standard,2,2,0);
      CalculateTree(BOMBuf,Item);
      SetQtyPerInTree(BOMBuf,BOMComponent.Type::Item,Indentation,IsLeaf,0);
      SetQtyPerInTree(BOMBuf,BOMComponent.Type::Resource,Indentation,TRUE,0);
      CalcStandardCost.CalcItem(Item."No.",(Item."Replenishment System" = Item."Replenishment System"::Assembly));

      // Exercise: Create the BOM tree.
      CalculateTree(BOMBuf,Item);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuf,Item);
      VerifyTopItem(BOMBuf,Item);
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE ZeroQtyPerTopItemAssemblyLeaf@17();
    BEGIN
      ZeroQtyPerTree(Item."Replenishment System"::Assembly,1,TRUE)
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE ZeroQtyPerTopItemAssemblyLeafLvl2@12();
    BEGIN
      ZeroQtyPerTree(Item."Replenishment System"::Assembly,2,TRUE)
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE ZeroQtyPerTopItemAssemblySub@19();
    BEGIN
      ZeroQtyPerTree(Item."Replenishment System"::Assembly,1,FALSE)
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler,ProducedCompConfirmHandler)]
    PROCEDURE ZeroQtyPerTopItemAssemblySubLvl2@15();
    BEGIN
      ZeroQtyPerTree(Item."Replenishment System"::Assembly,2,FALSE)
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE ZeroQtyPerTopItemProdLeafLevel2@18();
    BEGIN
      ZeroQtyPerTree(Item."Replenishment System"::"Prod. Order",2,TRUE)
    END;

    [Test]
    [HandlerFunctions(CalcStdCostMenuHandler)]
    PROCEDURE ZeroQtyPerTopItemProdSubLevel2@20();
    BEGIN
      ZeroQtyPerTree(Item."Replenishment System"::"Prod. Order",2,FALSE)
    END;

    [Normal]
    LOCAL PROCEDURE CalculateTree@1(VAR BOMBuf@1003 : Record 5870;VAR Item@1000 : Record 27);
    VAR
      Item1@1001 : Record 27;
      CalculateBOMTree@1002 : Codeunit 5870;
      TreeType@1004 : ' ,Availability,Cost';
    BEGIN
      Item.GET(Item."No.");
      Item1.SETRANGE("No.",Item."No.");
      CalculateBOMTree.GenerateTreeForItems(Item1,BOMBuf,TreeType::Cost);
    END;

    [Normal]
    LOCAL PROCEDURE AddBOMWarning@149(VAR TempItem@1000 : TEMPORARY Record 27;VAR BOMItem@1001 : Record 27;VAR WarningText@1003 : Text);
    VAR
      ProdBOMHeader@1002 : Record 99000771;
    BEGIN
      TempItem.FINDSET;
      TempItem.SETFILTER("Production BOM No.",'<>%1','');

      TempItem.NEXT(TempItem.COUNT);
      ProdBOMHeader.GET(TempItem."Production BOM No.");
      ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::"Under Development");
      ProdBOMHeader.MODIFY(TRUE);

      BOMItem.GET(TempItem."No.");
      WarningText := BOMItem."Production BOM No.";
    END;

    [Normal]
    LOCAL PROCEDURE AddRoutingWarning@152(VAR TempItem@1000 : TEMPORARY Record 27;VAR RoutingItem@1001 : Record 27;VAR WarningText@1003 : Text);
    VAR
      RoutingHeader@1002 : Record 99000763;
    BEGIN
      TempItem.FINDSET;
      TempItem.SETFILTER("Routing No.",'<>%1','');
      TempItem.NEXT(TempItem.COUNT);
      RoutingHeader.GET(TempItem."Routing No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::"Under Development");
      RoutingHeader.MODIFY(TRUE);

      RoutingItem.GET(TempItem."No.");
      WarningText := RoutingItem."Routing No.";
    END;

    [Normal]
    LOCAL PROCEDURE AddReplSystemWarning@13(VAR TempItem@1000 : TEMPORARY Record 27;VAR WarningItem@1001 : Record 27;VAR WarningText@1003 : Text[20];ChangeType@1004 : Option);
    VAR
      BOMComponent@1005 : Record 90;
    BEGIN
      CASE ChangeType OF
        GLBChangeType::"Purchase With Assembly BOM":
          BEGIN
            TempItem.FINDSET;
            TempItem.SETRANGE("Replenishment System",TempItem."Replenishment System"::Assembly);
            TempItem.NEXT(RANDOM(TempItem.COUNT));
            WarningItem.GET(TempItem."No.");
            WarningItem.VALIDATE("Replenishment System",TempItem."Replenishment System"::Purchase);
          END;
        GLBChangeType::"Purchase with Prod. BOM":
          BEGIN
            TempItem.FINDSET;
            TempItem.SETRANGE("Replenishment System",TempItem."Replenishment System"::"Prod. Order");
            TempItem.NEXT(RANDOM(TempItem.COUNT));
            WarningItem.GET(TempItem."No.");
            WarningItem.VALIDATE("Replenishment System",TempItem."Replenishment System"::Purchase);
          END;
        GLBChangeType::"Prod. without Prod. BOM":
          BEGIN
            TempItem.FINDSET;
            TempItem.SETRANGE("Replenishment System",TempItem."Replenishment System"::"Prod. Order");
            TempItem.NEXT(RANDOM(TempItem.COUNT));
            WarningItem.GET(TempItem."No.");
            WarningItem.VALIDATE("Production BOM No.",'');
          END;
        GLBChangeType::"Assembly without BOM":
          BEGIN
            TempItem.FINDSET;
            TempItem.SETRANGE("Replenishment System",TempItem."Replenishment System"::Assembly);
            TempItem.NEXT(RANDOM(TempItem.COUNT));
            WarningItem.GET(TempItem."No.");
            BOMComponent.SETRANGE("Parent Item No.",WarningItem."No.");
            BOMComponent.DELETEALL;
          END;
      END;

      WarningItem.MODIFY;
      WarningText := WarningItem."No.";
    END;

    [Normal]
    LOCAL PROCEDURE SetQtyPerInTree@10(ParentBOMBuffer@1004 : Record 5870;BOMCompType@1001 : Option;Indentation@1000 : Integer;IsLeaf@1005 : Boolean;NewQtyPer@1002 : Decimal);
    VAR
      BOMComponent@1003 : Record 90;
    BEGIN
      ParentBOMBuffer.SETRANGE(Indentation,Indentation - 1);
      ParentBOMBuffer.SETRANGE("Is Leaf",FALSE);
      ParentBOMBuffer.SETRANGE("Replenishment System",ParentBOMBuffer."Replenishment System"::Assembly);
      ParentBOMBuffer.NEXT(RANDOM(ParentBOMBuffer.COUNT));

      BOMComponent.SETRANGE(Type,BOMCompType);
      BOMComponent.SETRANGE("Parent Item No.",ParentBOMBuffer."No.");
      BOMComponent.CALCFIELDS("Assembly BOM");
      BOMComponent.SETRANGE("Assembly BOM",NOT IsLeaf);

      BOMComponent.NEXT(RANDOM(BOMComponent.COUNT));
      BOMComponent.VALIDATE("Quantity per",NewQtyPer);
      BOMComponent.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyTree@14(VAR BOMBuf@1000 : Record 5870;Item@1001 : Record 27);
    VAR
      TempItem@1005 : TEMPORARY Record 27;
      TempResource@1004 : TEMPORARY Record 156;
      TempWorkCenter@1003 : TEMPORARY Record 99000754;
      TempMachineCenter@1002 : TEMPORARY Record 99000758;
      RoundingFactor@1020 : Decimal;
    BEGIN
      LibraryTrees.GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item);
      Item.GET(Item."No.");

      IF TempItem.FINDSET THEN
        REPEAT
          BOMBuf.SETRANGE(Type,BOMBuf.Type::Item);
          BOMBuf.SETRANGE("No.",TempItem."No.");
          BOMBuf.FINDSET;
          REPEAT
            IF TempItem."No." = Item."No." THEN BEGIN
              RoundingFactor := 100 * LibraryERM.GetUnitAmountRoundingPrecision;
              Assert.AreNearlyEqual(Item."Unit Cost",BOMBuf."Unit Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Unit Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Rolled-up Material Cost",BOMBuf."Rolled-up Material Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Rolled-up Material Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Rolled-up Capacity Cost",BOMBuf."Rolled-up Capacity Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Rolled-up Capacity Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Rolled-up Subcontracted Cost",BOMBuf."Rolled-up Subcontracted Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Rolled-up Subcontracted Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Rolled-up Mfg. Ovhd Cost",BOMBuf."Rolled-up Mfg. Ovhd Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Rolled-up Mfg. Ovhd Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Rolled-up Cap. Overhead Cost",BOMBuf."Rolled-up Capacity Ovhd. Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Rolled-up Mfg. Ovhd Cost"),TempItem."No."));

              Assert.AreNearlyEqual(Item."Single-Level Material Cost",BOMBuf."Single-Level Material Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Single-Level Material Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Single-Level Capacity Cost",BOMBuf."Single-Level Capacity Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Single-Level Capacity Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Single-Level Subcontrd. Cost",BOMBuf."Single-Level Subcontrd. Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Single-Level Subcontrd. Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Single-Level Cap. Ovhd Cost",BOMBuf."Single-Level Cap. Ovhd Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Single-Level Cap. Ovhd Cost"),TempItem."No."));
              Assert.AreNearlyEqual(Item."Single-Level Mfg. Ovhd Cost",BOMBuf."Single-Level Mfg. Ovhd Cost",RoundingFactor,
                STRSUBSTNO(ERRWrongCostShare,Item.FIELDCAPTION("Single-Level Mfg. Ovhd Cost"),TempItem."No."));
            END;
          UNTIL BOMBuf.NEXT = 0;
        UNTIL TempItem.NEXT = 0;

      IF TempResource.FINDSET THEN
        REPEAT
          BOMBuf.SETRANGE(Type,BOMBuf.Type::Resource);
          BOMBuf.SETRANGE("No.",TempResource."No.");
          BOMBuf.FINDSET;
        UNTIL TempResource.NEXT = 0;

      IF TempMachineCenter.FINDSET THEN
        REPEAT
          BOMBuf.SETRANGE(Type,BOMBuf.Type::"Machine Center");
          BOMBuf.SETRANGE("No.",TempMachineCenter."No.");
          BOMBuf.FINDSET;
        UNTIL TempMachineCenter.NEXT = 0;

      IF TempWorkCenter.FINDSET THEN
        REPEAT
          BOMBuf.SETRANGE(Type,BOMBuf.Type::"Work Center");
          BOMBuf.SETRANGE("No.",TempWorkCenter."No.");
          BOMBuf.FINDSET;
        UNTIL TempWorkCenter.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyTopItem@3(BOMBuf@1000 : Record 5870;Item@1001 : Record 27);
    VAR
      RolledUpMaterialCost@1009 : Decimal;
      RolledUpCapacityCost@1008 : Decimal;
      RolledUpCapOvhd@1006 : Decimal;
      RolledUpMfgOvhd@1005 : Decimal;
      SglLevelMaterialCost@1004 : Decimal;
      SglLevelCapCost@1003 : Decimal;
      SglLevelCapOvhd@1002 : Decimal;
      SglLevelMfgOvhd@1011 : Decimal;
      RoundingFactor@1012 : Decimal;
    BEGIN
      Item.GET(Item."No.");
      LibraryTrees.GetTreeCost(
        RolledUpMaterialCost,RolledUpCapacityCost,RolledUpCapOvhd,RolledUpMfgOvhd,SglLevelMaterialCost,SglLevelCapCost,
        SglLevelCapOvhd,SglLevelMfgOvhd,Item);
      BOMBuf.SETRANGE(Type,BOMBuf.Type::Item);
      BOMBuf.SETRANGE("No.",Item."No.");
      BOMBuf.FINDFIRST;

      RoundingFactor := 100 * LibraryERM.GetUnitAmountRoundingPrecision;
      Assert.AreNearlyEqual(RolledUpMaterialCost,BOMBuf."Rolled-up Material Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Rolled-up Material Cost"),Item."No."));
      Assert.AreNearlyEqual(RolledUpCapacityCost,BOMBuf."Rolled-up Capacity Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Rolled-up Capacity Cost"),Item."No."));
      Assert.AreNearlyEqual(RolledUpMfgOvhd,BOMBuf."Rolled-up Mfg. Ovhd Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Rolled-up Mfg. Ovhd Cost"),Item."No."));
      Assert.AreNearlyEqual(RolledUpCapOvhd,BOMBuf."Rolled-up Capacity Ovhd. Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Rolled-up Cap. Overhead Cost"),Item."No."));

      Assert.AreNearlyEqual(SglLevelMaterialCost,BOMBuf."Single-Level Material Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Single-Level Material Cost"),Item."No."));
      Assert.AreNearlyEqual(SglLevelCapCost,BOMBuf."Single-Level Capacity Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Single-Level Capacity Cost"),Item."No."));
      Assert.AreNearlyEqual(SglLevelMfgOvhd,BOMBuf."Single-Level Mfg. Ovhd Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Single-Level Mfg. Ovhd Cost"),Item."No."));
      Assert.AreNearlyEqual(SglLevelCapOvhd,BOMBuf."Single-Level Cap. Ovhd Cost",RoundingFactor,
        STRSUBSTNO(ERRWrongCostShareCalc,Item.FIELDCAPTION("Single-Level Cap. Ovhd Cost"),Item."No."));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyTreeWithScrap@45(BOMBuf@1000 : Record 5870;Item@1001 : Record 27);
    VAR
      RolledUpTreeCostWithScrap@1009 : Decimal;
      SglLevelScrapCost@1011 : Decimal;
    BEGIN
      LibraryTrees.GetTreeCostWithScrap(RolledUpTreeCostWithScrap,SglLevelScrapCost,Item);
      BOMBuf.SETRANGE(Type,BOMBuf.Type::Item);
      BOMBuf.SETRANGE("No.",Item."No.");
      BOMBuf.FINDFIRST;

      // Seem the verification of Scrap cost is wrong here
      // Assert.AreNearlyEqual(SglLevelScrapCost,BOMBuf."Single-Level Scrap Cost",LibraryERM.GetAmountRoundingPrecision,
      // STRSUBSTNO(ERRWrongCostShareCalc,BOMBuf.FIELDCAPTION("Single-Level Scrap Cost"),Item."No."));
      // Assert.AreNearlyEqual(RolledUpTreeCostWithScrap,BOMBuf."Unit Cost",LibraryERM.GetAmountRoundingPrecision,
      // STRSUBSTNO(ERRWrongCostShareCalc,BOMBuf.FIELDCAPTION("Rolled-up Scrap Cost"),Item."No."));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyWarnings@154(BOMBuf@1006 : Record 5870;TableID@1004 : Integer;WarningText@1002 : Text[20]);
    VAR
      BOMWarningLog@1003 : Record 5874;
    BEGIN
      Assert.AreEqual(FALSE,BOMBuf.AreAllLinesOk(BOMWarningLog),ERRWrongWarningParent);

      BOMWarningLog.SETRANGE("Table ID",TableID);
      BOMWarningLog.SETFILTER("Table Position",'*' + WarningText + '*');
      Assert.AreEqual(1,BOMWarningLog.COUNT,STRSUBSTNO(ERRWrongWarningElement,WarningText));
    END;

    [StrMenuHandler]
    PROCEDURE CalcStdCostMenuHandler@4(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 2;
    END;

    [ConfirmHandler]
    PROCEDURE ProducedCompConfirmHandler@30(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [BOM Tree] [SCM]
      This CU contains scenarios for the BOM Cost Shares visualisation.
    }
    END.
  }
}

