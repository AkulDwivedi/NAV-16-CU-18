OBJECT Codeunit 16401 GST Management
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVIN9.00.00.49326,TFS225680;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountingPeriodErr@1500000 : TextConst '@@@="%1  = Posting Date";ENU=GST Accounting Period does not exist for the given Date %1.;ENN=GST Accounting Period does not exist for the given Date %1.';
      CheckCalculationOrderErr@1500001 : TextConst 'ENU=You must not enter duplicate calculation order in GST Setup.;ENN=You must not enter duplicate calculation order in GST Setup.';
      GSTChargeDocAmtErr@1500002 : TextConst '@@@="%1 = Applied Document Type, %2=Applied Document No, %3 = Applied Document Line No.";ENU="GST Base Amount must have some value for the selected Document Type = %1 ,Document No. = %2 , Line No. = %3.";ENN="GST Base Amount must have some value for the selected Document Type = %1 ,Document No. = %2 , Line No. = %3."';
      GeneralLedgerSetup@1500004 : Record 98;
      InvoiceTypeErr@500000 : TextConst '@@@="%1 = Invoice Type, %2 = GST Customer Type";ENU=You can not select the Invoice Type %1 for GST Customer Type %2.;ENN=You can not select the Invoice Type %1 for GST Customer Type %2.';
      LineInvTypeErr@1500007 : TextConst 'ENU=Line Invoice Type should be same as Header.;ENN=Line Invoice Type should be same as Header.';
      PlaceOfSupplyErr@1500008 : TextConst '@@@="%1 = Document Type, %2 = Document No., %3 = Line No.";ENU=You cannot select blank Place of Supply for Document Type %1 and Document No %2 for Sales Line %3.;ENN=You cannot select blank Place of Supply for Document Type %1 and Document No %2 for Sales Line %3.';
      CompanyInformation@1500009 : Record 79;
      GLSetupRead@1500005 : Boolean;
      GSTRegistrationValidationErr@1500010 : TextConst '@@@="%1 = Document No, %2 = Line, %3 = Registration No, %4 = PresentGSTRegNo";ENU="You must select the same GST Registration No. for all lines in Document No. = %1, Line No. = %2 Registration No. is  %3  should be %4.";ENN="You must select the same GST Registration No. for all lines in Document No. = %1, Line No. = %2 Registration No. is  %3  should be %4."';
      ADVPlaceOfSupplyErr@1500012 : TextConst '@@@="%1 = Template, %2 = Batch, %3 = Line No.";ENU=You cannot select blank Place of Supply for Template %1 and Batch %2 for Line %3.;ENN=You cannot select blank Place of Supply for Template %1 and Batch %2 for Line %3.';
      PeriodClosedErr@1500013 : TextConst '@@@="%1 = Date, %2 = Posting Date";ENU=Accounting Period has been closed till %1, Document Posting Date must be greater than or equal to %2.;ENN=Accounting Period has been closed till %1, Document Posting Date must be greater than or equal to %2.';
      SimilarGSTGroupTypeErr@1500003 : TextConst '@@@="%1 = GST Group Type, %2 = Field Reference %3 = Document Type, %4 = Field Reference %5 = Document No.";ENU=You must specify the same %1 in Reverse charge %2 %3, %4 %5.;ENN=You must specify the same %1 in Reverse charge %2 %3, %4 %5.';
      ExemptedLinesErr@1500011 : TextConst 'ENU=All lines in the document are GST Exempted, the preferred Invoice type should be Bill of Supply.;ENN=All lines in the document are GST Exempted, the preferred Invoice type should be Bill of Supply.';
      NonExemptedLinesErr@1500014 : TextConst 'ENU=All lines in the document are not GST Exempted, the preferred Invoice type should be according to GST Customer Type.;ENN=All lines in the document are not GST Exempted, the preferred Invoice type should be according to GST Customer Type.';
      DiffJurisdictionTypeErr@1500015 : TextConst 'ENU=All lines in the document must have same GST Jurisdiction Type.;ENN=All lines in the document must have same GST Jurisdiction Type.';
      InputServiceLocationErr@1500016 : TextConst '@@@="%1 = Location Code";ENU=You cannot select Location Code: %1 with GST Input Service Distributor enabled.;ENN=You cannot select Location Code: %1 with GST Input Service Distributor enabled.';
      TypeISDErr@1500017 : TextConst '@@@="%1 = Type, %2 = Field Name, %3 = GST Group Type";ENU=You must select %1 whose %2 is %3 when GST Input Service Distribution is checked.;ENN=You must select %1 whose %2 is %3 when GST Input Service Distribution is checked.';
      UsedForSettlement@1500018 : Boolean;
      SimilarReverseChargeLineErr@1500019 : TextConst '@@@="%1 = Document Type, %2 = Field Reference %3 = Field Reference, %4 = Document No.";ENU=You must specify the same GST Reverse Charge Group Type in Reverse charge %1 %2, %3 %4.;ENN=You must specify the same GST Reverse Charge Group Type in Reverse charge %1 %2, %3 %4.';
      GSTReverseChargeVendorErr@1500020 : TextConst 'ENU=You cannot select GST Group Code with Reverse Charge when GST Input Service Distribution is set.;ENN=You cannot select GST Group Code with Reverse Charge when GST Input Service Distribution is set.';
      VendorISDErr@1500021 : TextConst '@@@="%1 = Location Code";ENU=GST Input Service Distribution Location %1 is applicable only for Registered Vendor.;ENN=GST Input Service Distribution Location %1 is applicable only for Registered Vendor.';
      NonGSTLineErr@1500356 : TextConst 'ENU=You cannot do GST and Non-GST Transcation in same document.;ENN=You cannot do GST and Non-GST Transcation in same document.';
      NonGSTSubconErr@1500200 : TextConst '@@@="%1 = Code";ENU="Please specify the GST Group Code and HSN Code for the selected Document No. = %1.";ENN="Please specify the GST Group Code and HSN Code for the selected Document No. = %1."';
      ChargeItemErr@1500022 : TextConst 'ENU=You cannot select Charge (Item) when GST Input Service Distribution is checked.;ENN=You cannot select Charge (Item) when GST Input Service Distribution is checked.';
      UOMNotExistErr@1500006 : TextConst '@@@="%1 = UOM;%2 = Item No.";ENU=Cess UOM %1 is not defined for the Item %2.;ENN=Cess UOM %1 is not defined for the Item %2.';

    PROCEDURE GetGSTConfiguration@1500004(ConfigType@1500008 : 'Vendor,Customer';LocationStateCode@1500007 : Code[10];VendCustStateCode@1500006 : Code[10];VAR GSTJurisdiction@1500004 : 'Intrastate,Interstate') : Code[10];
    VAR
      GSTConfiguration@1500000 : Record 16407;
    BEGIN
      WITH GSTConfiguration DO BEGIN
        SETRANGE(Type,ConfigType);
        SETRANGE("Dispatch/Receiving State Code",LocationStateCode);
        SETRANGE("Customer/Vendor State Code",VendCustStateCode);
        IF FINDFIRST THEN
          GSTJurisdiction := "GST Jurisdiction Type";
        EXIT("GST % State Code");
      END;
    END;

    PROCEDURE CalculateGSTAmounts@1500003(DocumentNo@1500000 : Code[20];LineNo@1500002 : Integer;GSTJurisdiction@1500018 : Option;GSTStateCode@1500017 : Code[10];GSTGroupCode@1500016 : Code[20];EffectiveDate@1500015 : Date;Amount@1500014 : Decimal;TransactionType@1500013 : Option;DocumentType@1500006 : Option;CurrencyCode@1500011 : Code[10];CurrencyFactor@1500012 : Decimal;UnitCost@1500003 : Decimal;Item@1500004 : Boolean;LineQty@1500007 : Decimal;UOM@1500019 : Code[10];ItemNo@1500009 : Code[20]) : Decimal;
    VAR
      GSTComponent@1500008 : Record 16405;
      GSTSetup@1500005 : Record 16408;
      GSTCalculationBuffer@1500010 : Record 16421;
      TotalGSTAmount@1500001 : Decimal;
    BEGIN
      GSTComponent.SETCURRENTKEY("Calculation Order");
      GSTComponent.SETRANGE("GST Jurisdiction Type",GSTJurisdiction);
      IF GSTComponent.FINDSET THEN
        REPEAT
          IF GetGSTSetup(GSTSetup,GSTStateCode,GSTGroupCode,GSTComponent.Code,EffectiveDate) <> '' THEN
            InsertGSTCalculationBuffer(
              GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType,UnitCost,
              EffectiveDate,CurrencyCode,CurrencyFactor);
        UNTIL GSTComponent.NEXT = 0;
      WITH GSTCalculationBuffer DO BEGIN
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.","Calculation Order");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Line No.",LineNo);
        IF FINDSET THEN
          REPEAT
            TotalGSTAmount +=
              GSTAmtCalculationForward(GSTCalculationBuffer,DocumentType,DocumentNo,LineNo,
                Amount,CurrencyCode,CurrencyFactor,Item,LineQty,UOM,ItemNo);
          UNTIL NEXT = 0;
      END;
      EXIT(TotalGSTAmount);
    END;

    PROCEDURE EvaluateExpressioninGSTFormula@1500001(IsTestExpression@1500002 : Boolean;Expression@1500001 : Code[250];TransactionType@1500000 : Option;DocumentType@1500021 : Option;DocumentNo@1500022 : Code[20];LineNo@1500023 : Integer;ItemChargeDocType@1500025 : Option;ItemChargeDocNo@1500026 : Code[20];ItemChargeLineNo@1500024 : Integer) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500020 : Record 16412;
      Result@1500017 : Decimal;
      CallLevel@1500016 : Integer;
      Parantheses@1500015 : Integer;
      IsExpression@1500014 : Boolean;
      Operators@1500013 : Text[8];
      OperatorNo@1500012 : Integer;
      i@1500010 : Integer;
      RightResult@1500009 : Decimal;
      LeftResult@1500008 : Decimal;
      RightOperand@1500007 : Text[250];
      LeftOperand@1500006 : Text[250];
      Operator@1500005 : Char;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpressioninGSTFormula(
              IsTestExpression,LeftOperand,TransactionType,DocumentType,DocumentNo,
              LineNo,ItemChargeDocType,ItemChargeDocNo,ItemChargeLineNo);
          RightResult :=
            EvaluateExpressioninGSTFormula(
              IsTestExpression,RightOperand,TransactionType,DocumentType,DocumentNo,LineNo,
              ItemChargeDocType,ItemChargeDocNo,ItemChargeLineNo);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressioninGSTFormula(
                IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                TransactionType,DocumentType,DocumentNo,LineNo,ItemChargeDocType,ItemChargeDocNo,ItemChargeLineNo)
          ELSE
            IF IsTestExpression THEN BEGIN
              DetailedGSTEntryBuffer.SETCURRENTKEY(
                "Transaction Type","Document Type","Document No.","Line No.");
              DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
              DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
              DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
              DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
              DetailedGSTEntryBuffer.SETRANGE("GST Component Code",Expression);
              IF ItemChargeLineNo <> 0 THEN BEGIN
                DetailedGSTEntryBuffer.SETRANGE("Item Charge Assgn. Doc. Type",ItemChargeDocType);
                DetailedGSTEntryBuffer.SETRANGE("Item Charge Assgn Doc. No.",ItemChargeDocNo);
                DetailedGSTEntryBuffer.SETRANGE("Item Charge Assgn. Line No.",ItemChargeLineNo);
              END;
              IF DetailedGSTEntryBuffer.FINDFIRST THEN
                Result := Result + ABS(DetailedGSTEntryBuffer."GST Amount");
            END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE InsertDetaildGSTBuffer@1500000(GSTCalculationBuffer@1500007 : Record 16421;DocumentType@1500000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500004 : Code[20];LineNo@1500002 : Integer;GSTBaseAmount@1500014 : Decimal;VAR GSTPercentage@1500013 : Decimal;VAR GSTAmount@1500012 : Decimal;CurrencyCode@1500019 : Code[10];CessComponent@1500521 : Boolean;CurrencyFactor@1500020 : Decimal;UnitOfMeasure@1500001 : Code[10]);
    VAR
      SalesLine@1500003 : Record 37;
      DetailedGSTEntryBuffer@1500008 : Record 16412;
      SalesHeader@1500016 : Record 36;
      Item@1500006 : Record 27;
      SalesInvoiceHeader@1500400 : Record 112;
      LastEntryNo@1500023 : Integer;
      Sign@1500010 : Integer;
    BEGIN
      IF GSTCalculationBuffer."Component Calc. Type" IN [GSTCalculationBuffer."Component Calc. Type"::"Amount / Unit Factor",
                                                         GSTCalculationBuffer."Component Calc. Type"::"Cess % + Amount / Unit Factor"]
      THEN
        GSTPercentage := 0;
      Sign := GetSign(DocumentType,GSTCalculationBuffer."Transaction Type");
      WITH DetailedGSTEntryBuffer DO BEGIN
        IF FINDLAST THEN
          LastEntryNo := "Entry No." + 1
        ELSE
          LastEntryNo := 1;
        INIT;
        "Entry No." := LastEntryNo;
        IF GSTCalculationBuffer."Transaction Type" = GSTCalculationBuffer."Transaction Type"::Purchase THEN
          UpdatePurchaseDetailedGSTBuffer(
            DetailedGSTEntryBuffer,GSTPercentage,GSTAmount,
            GSTBaseAmount,CurrencyFactor,DocumentType,DocumentNo,CurrencyCode,LineNo,Sign)
        ELSE
          IF GSTCalculationBuffer."Transaction Type" = GSTCalculationBuffer."Transaction Type"::Sales THEN BEGIN
            SalesHeader.GET(DocumentType,DocumentNo);
            SalesLine.SETRANGE("Document Type",DocumentType);
            SalesLine.SETRANGE("Document No.",DocumentNo);
            SalesLine.SETRANGE("Line No.",LineNo);
            IF SalesLine.FINDFIRST THEN BEGIN
              "Document Type" := SalesHeader."Document Type";
              "Document No." := SalesHeader."No.";
              "Posting Date" := SalesHeader."Posting Date";
              Type := SalesLine.Type;
              "No." := SalesLine."No.";
              "Source No." := SalesLine."Bill-to Customer No.";
              Quantity := SalesLine.Quantity * Sign;
              "HSN/SAC Code" := SalesLine."HSN/SAC Code";
              "Location Code" := SalesLine."Location Code";
              "Line No." := SalesLine."Line No.";
              "Source Type" := "Source Type"::Customer;
              "Invoice Type" := SalesHeader."Invoice Type";
              Exempted := SalesLine.Exempted;
              IF SalesHeader."Document Type" IN [SalesHeader."Document Type"::"Credit Memo",
                                                 SalesHeader."Document Type"::"Return Order"]
              THEN
                IF SalesHeader."Applies-to Doc. No." <> '' THEN BEGIN
                  "Original Invoice No." := SalesHeader."Applies-to Doc. No.";
                  SalesInvoiceHeader.GET(SalesHeader."Applies-to Doc. No.");
                  "Original Invoice Date" := SalesInvoiceHeader."Posting Date";
                END;
              UpdateSalesGSTRegNo(DetailedGSTEntryBuffer,SalesHeader,SalesLine);
              IF IsExempted(SalesHeader) OR SalesLine.Exempted OR IsFreeSupply(SalesHeader) THEN BEGIN
                GSTPercentage := 0;
                GSTAmount := 0;
              END;
              "GST Input/Output Credit Amount" := Sign * GSTAmount;
              "GST Base Amount" := GSTBaseAmount * Sign;
              "GST Amount" := GSTAmount * Sign;
              "GST Base Amount (LCY)" :=
                ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Base Amount",CurrencyFactor,"Posting Date");
              "GST Amount (LCY)" :=
                ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Amount",CurrencyFactor,"Posting Date");
              "GST %" := GSTPercentage;
            END;
          END ELSE
            CASE GSTCalculationBuffer."Transaction Type" OF
              "Transaction Type"::Transfer:
                InsertDetailLedgerBufferTransfer(
                  DetailedGSTEntryBuffer,DocumentNo,LineNo,GSTBaseAmount,GSTAmount,GSTPercentage,Sign);
              "Transaction Type"::Service:
                InsertDetailLedgerBufferService(
                  DetailedGSTEntryBuffer,DocumentType,DocumentNo,LineNo,
                  GSTBaseAmount,GSTAmount,GSTPercentage,
                  Sign,CurrencyCode,CurrencyFactor);
              "Transaction Type"::"Service Transfer":
                InsertDetailLedgerBufferServiceTransfer(
                  DetailedGSTEntryBuffer,DocumentNo,LineNo,GSTBaseAmount,GSTAmount,GSTPercentage,Sign);
              "Transaction Type"::Production:
                BEGIN
                  IF DocumentType = 0 THEN
                    InsertDetailLedgerBufferOutward(
                      DetailedGSTEntryBuffer,DocumentNo,LineNo,GSTBaseAmount,GSTAmount,GSTPercentage,Sign)
                  ELSE
                    InsertDetailLedgerBufferInward(
                      DetailedGSTEntryBuffer,DocumentNo,LineNo,GSTBaseAmount,GSTAmount,GSTPercentage,Sign);
                END;
            END;
        IF Type IN [Type::Item,Type::"Fixed Asset"] THEN
          IF Item.GET("No.") AND (NOT Item."Capital Item") THEN
            "Product Type" := "Product Type"::Item
          ELSE
            "Product Type" := "Product Type"::"Capital Goods"
        ELSE
          "Product Type" := "Product Type"::" ";
        "Transaction Type" := GSTCalculationBuffer."Transaction Type";
        "GST Component Code" := GSTCalculationBuffer."GST Component Code";
        "GST Group Code" := GSTCalculationBuffer."GST Group Code";
        Cess := CessComponent;
        "Component Calc. Type" := GSTCalculationBuffer."Component Calc. Type";
        IF GSTCalculationBuffer."Component Calc. Type" IN
           [GSTCalculationBuffer."Component Calc. Type"::"Amount / Unit Factor",
            GSTCalculationBuffer."Component Calc. Type"::"Cess % + Amount / Unit Factor",
            GSTCalculationBuffer."Component Calc. Type"::"Cess % Or Amount / Unit Factor Whichever Higher"]
        THEN BEGIN
          "Cess Amount Per Unit Factor" := RoundGSTPrecision(GSTCalculationBuffer."Cess Amount Per Unit Factor");
          "Cess UOM" := GSTCalculationBuffer."Cess UOM";
          "Cess Factor Quantity" := GSTCalculationBuffer."Cess Factor Quantity";
          "Cess Amt Per Unit Factor (LCY)" := GSTCalculationBuffer."Cess Amt Per Unit Factor (LCY)";
        END;
        UOM := UnitOfMeasure;
        IF LineNo <> 0 THEN
          INSERT(TRUE);
      END;
    END;

    PROCEDURE DeleteGSTBuffer@1500005(TransactionType@1500002 : Option;DocumentType@1500000 : Option;DocumentNo@1500001 : Code[20];LineNo@1500004 : Integer);
    VAR
      DetailedGSTEntryBuffer@1500003 : Record 16412;
    BEGIN
      WITH DetailedGSTEntryBuffer DO BEGIN
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        IF LineNo <> 0 THEN
          SETRANGE("Line No.",LineNo);
        DELETEALL(TRUE);
      END;
      DeleteGSTCalculationBuffer(TransactionType,DocumentType,DocumentNo,LineNo);
    END;

    PROCEDURE GetGSTSetup@1500006(VAR GSTSetup@1500003 : Record 16408;GSTStateCode@1500002 : Code[10];GSTGroupCode@1500001 : Code[20];GSTComponentCode@1500004 : Code[10];EffectiveDate@1500000 : Date) : Code[20];
    BEGIN
      WITH GSTSetup DO BEGIN
        SETRANGE("GST State Code",GSTStateCode);
        SETRANGE("GST Group Code",GSTGroupCode);
        SETRANGE("GST Component",GSTComponentCode);
        IF EffectiveDate = 0D THEN
          SETFILTER("Effective Date",'<=%1',WORKDATE)
        ELSE
          SETFILTER("Effective Date",'<=%1',EffectiveDate);
        IF FINDLAST THEN
          EXIT("GST Component");
        SETRANGE("GST State Code");
        SETRANGE("GST State Code",'');
        IF FINDLAST THEN
          EXIT("GST Component");
      END;
    END;

    PROCEDURE CheckGSTAccountingPeriod@1500007(PostingDate@1500001 : Date);
    VAR
      GSTAccountingSubPeriod@1500000 : Record 16402;
      GSTAccountingPeriod@1500003 : Record 16401;
      LastClosedDate@1500100 : Date;
    BEGIN
      LastClosedDate := GetLastClosedSubAccPeriod;
      WITH GSTAccountingSubPeriod DO BEGIN
        SETFILTER("Starting Date",'<=%1',PostingDate);
        IF FINDLAST THEN BEGIN
          SETFILTER("Starting Date",'>=%1',PostingDate);
          IF NOT FINDFIRST THEN
            ERROR(AccountingPeriodErr,PostingDate);
          IF NOT UsedForSettlement THEN
            IF LastClosedDate <> 0D THEN
              IF PostingDate < CALCDATE('<1M>',LastClosedDate) THEN
                ERROR(
                  STRSUBSTNO(
                    PeriodClosedErr,CALCDATE('<-1D>',CALCDATE('<1M>',LastClosedDate)),
                    CALCDATE('<1M>',LastClosedDate)));
          GSTAccountingPeriod.GET("Accounting Period Start Date");
        END ELSE
          ERROR(AccountingPeriodErr,PostingDate);
      END;
      WITH GSTAccountingSubPeriod DO BEGIN
        IF NOT UsedForSettlement THEN
          SETRANGE(Closed,FALSE);
        SETFILTER("Starting Date",'<=%1',PostingDate);
        IF FINDLAST THEN BEGIN
          SETFILTER("Starting Date",'>=%1',PostingDate);
          IF NOT FINDFIRST THEN
            IF LastClosedDate <> 0D THEN
              IF PostingDate < CALCDATE('<1M>',LastClosedDate) THEN
                ERROR(
                  STRSUBSTNO(
                    PeriodClosedErr,CALCDATE('<-1D>',CALCDATE('<1M>',LastClosedDate)),
                    CALCDATE('<1M>',LastClosedDate)));
          IF NOT UsedForSettlement THEN
            TESTFIELD(Closed,FALSE);
        END ELSE
          IF LastClosedDate <> 0D THEN
            IF PostingDate < CALCDATE('<1M>',LastClosedDate) THEN
              ERROR(
                STRSUBSTNO(
                  PeriodClosedErr,CALCDATE('<-1D>',CALCDATE('<1M>',LastClosedDate)),
                  CALCDATE('<1M>',LastClosedDate)));
      END;
    END;

    PROCEDURE CheckHSNSACSales@1500221(SalesHeader@1500001 : Record 36);
    VAR
      SalesLine@1500000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETFILTER("GST Group Code",'<>%1','');
      SalesLine.SETRANGE("HSN/SAC Code",'');
      IF SalesLine.FINDFIRST THEN
        SalesLine.TESTFIELD("HSN/SAC Code");
      SalesLine.SETRANGE("GST Group Code");
      SalesLine.SETRANGE("GST Group Code",'');
      IF SalesLine.FINDFIRST THEN
        ERROR(NonGSTLineErr);
    END;

    PROCEDURE CheckHSNSACPurchase@1500093(PurchaseHeader@1500001 : Record 38);
    VAR
      PurchaseLine@1500000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      PurchaseLine.SETFILTER("No.",'<>%1','');
      PurchaseLine.SETFILTER("GST Group Code",'<>%1','');
      PurchaseLine.SETRANGE("HSN/SAC Code",'');
      IF PurchaseLine.FINDFIRST THEN
        PurchaseLine.TESTFIELD("HSN/SAC Code");
      PurchaseLine.SETRANGE("GST Group Code");
      PurchaseLine.SETRANGE("GST Group Code",'');
      IF PurchaseLine.FINDFIRST THEN BEGIN
        IF PurchaseLine.Subcontracting THEN
          ERROR(NonGSTSubconErr,PurchaseLine."Document No.");
        ERROR(NonGSTLineErr);
      END;
    END;

    PROCEDURE CheckHSNSACTransfer@1500567(TransferHeader@1500001 : Record 5740);
    VAR
      TransferLine@1500000 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.SETFILTER("Item No.",'<>%1','');
      TransferLine.SETFILTER("GST Group Code",'<>%1','');
      TransferLine.SETRANGE("HSN/SAC Code",'');
      IF TransferLine.FINDFIRST THEN
        TransferLine.TESTFIELD("HSN/SAC Code");
      TransferLine.SETRANGE("GST Group Code");
      TransferLine.SETRANGE("GST Group Code",'');
      IF TransferLine.FINDFIRST THEN
        ERROR(NonGSTLineErr);
    END;

    PROCEDURE InsertGSTLedgerEntrySales@1500008(GSTPostingBuffer@1500004 : Record 16420;SalesLine@1500006 : Record 37;SalesHeader@1500009 : Record 36;NextTransactionNo@1500001 : Integer;DocumentType@1500007 : Option;DocumentNo@1500008 : Code[20];CurrencyCode@1500003 : Code[10];CurrencyFactor@1500005 : Decimal;SourceCode@1500010 : Code[10]);
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := SalesHeader."Posting Date";
        "Document No." := DocumentNo;
        "Document Type" := DocumentType;
        "GST Amount" := GSTPostingBuffer."GST Amount";
        "Currency Code" := CurrencyCode;
        "Currency Factor" := CurrencyFactor;
        "Transaction Type" := "Transaction Type"::Sales;
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "Source Type" := "Source Type"::Customer;
        "Source No." := SalesLine."Sell-to Customer No.";
        "User ID" := USERID;
        "Source Code" := SourceCode;
        "Reason Code" := SalesHeader."Reason Code";
        "Transaction No." := NextTransactionNo;
        "External Document No." := SalesHeader."External Document No.";
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertDetailedGSTLedgEntrySales@1500036(SalesLine@1500000 : Record 37;SalesHeader@1500004 : Record 36;DocumentNo@1500001 : Code[20];DocumentType@1500012 : Option;QtyFactor@1500002 : Decimal;TransactionNo@1500005 : Integer);
    VAR
      DetailedGSTEntryBuffer@1500015 : Record 16412;
      DetailedGSTLedgerEntry@1500017 : Record 16419;
      eCommerceCustomer@1500008 : Record 18;
      SalesInvoiceLine@1500013 : Record 113;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Sales);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",SalesLine."Document Type");
      DetailedGSTEntryBuffer.SETRANGE("Document No.",SalesLine."Document No.");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",SalesLine."Line No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            INIT;
            "Entry No." := GetNextGSTDetailEntryNo;
            "Entry Type" := "Entry Type"::"Initial Entry";
            "Transaction Type" := "Transaction Type"::Sales;
            "Document Type" := DocumentType;
            "Document No." := DocumentNo;
            "External Document No." := SalesHeader."External Document No.";
            "Posting Date" := SalesHeader."Posting Date";
            "Source Type" := "Source Type"::Customer;
            Type := SalesLine.Type;
            IF DetailedGSTEntryBuffer."Item Charge Assgn. Line No." = 0 THEN
              "No." := SalesLine."No."
            ELSE
              "No." := DetailedGSTEntryBuffer."No.";
            "Nature of Supply" := SalesHeader."Nature of Supply";
            "Liable to Pay" := TRUE;
            "GST Place of Supply" := DetailedGSTEntryBuffer."GST Place of Supply";
            DetailedGSTEntryBuffer.TESTFIELD("Location Code");
            DetailedGSTEntryBuffer.TESTFIELD("Location State Code");
            DetailedGSTEntryBuffer.TESTFIELD("Location  Reg. No.");
            "Location Code" := DetailedGSTEntryBuffer."Location Code";
            "Buyer/Seller State Code" := DetailedGSTEntryBuffer."Buyer/Seller State Code";
            "Buyer/Seller Reg. No." := DetailedGSTEntryBuffer."Buyer/Seller Reg. No.";
            "Shipping Address State Code" := DetailedGSTEntryBuffer."Shipping Address State Code";
            "Location  Reg. No." := DetailedGSTEntryBuffer."Location  Reg. No.";
            "Location State Code" := DetailedGSTEntryBuffer."Location State Code";
            "GST Jurisdiction Type" := SalesLine."GST Jurisdiction Type";
            "Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
            "Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
            "Reason Code" := SalesHeader."Reason Code";
            "GST Group Type" := SalesLine."GST Group Type";
            "GST Without Payment of Duty" := SalesHeader."GST Without Payment of Duty";
            IF NOT SalesLine."Item Charge Entry" THEN
              "Item Charge Entry" := SalesLine.Type = SalesLine.Type::"Charge (Item)"
            ELSE
              "Item Charge Entry" := SalesLine."Item Charge Entry";
            "Item Charge Assgn. Line No." := DetailedGSTEntryBuffer."Item Charge Assgn. Line No.";
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Customer Type" := SalesHeader."GST Customer Type";
            "GST Exempted Goods" := SalesLine.Exempted;
            "Bill Of Export No." := SalesHeader."Bill Of Export No.";
            "Bill Of Export Date" := SalesHeader."Bill Of Export Date";
            "e-Comm. Merchant Id" := SalesHeader."e-Commerce Merchant Id";
            IF eCommerceCustomer.GET(SalesHeader."e-Commerce Customer") THEN
              "e-Comm. Operator GST Reg. No." := eCommerceCustomer."GST Registration No.";
            "Sales Invoice Type" := SalesHeader."Invoice Type";
            "Original Invoice No." := DetailedGSTEntryBuffer."Original Invoice No.";
            "Original Invoice Date" := DetailedGSTEntryBuffer."Original Invoice Date";
            "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
            "G/L Account No." :=
              GetGSTAccountNo(
                "Location State Code",DetailedGSTEntryBuffer."GST Component Code",
                "Transaction Type"::Sales,SalesLine.Type::" ",0,FALSE,FALSE);
            UpdateDetailGSTLedgerEntry(
              DetailedGSTLedgerEntry,DetailedGSTEntryBuffer,
              SalesHeader."Currency Code",SalesHeader."Currency Factor",
              QtyFactor,TransactionNo);
            SalesInvoiceLine.SETRANGE("Document No.","Document No.");
            SalesInvoiceLine.SETRANGE("Line No.","Document Line No.");
            IF SalesInvoiceLine.FINDFIRST THEN
              "Amount to Customer/Vendor" := SalesInvoiceLine."Amount To Customer";
            TESTFIELD("HSN/SAC Code");
            IF QtyFactor <> 0 THEN
              INSERT(TRUE);
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
    END;

    PROCEDURE UpdateDetailGSTLedgerEntry@1500011(VAR DetailedGSTLedgerEntry@1500000 : Record 16419;DetailedGSTEntryBuffer@15000001 : Record 16412;CurrencyCode@1500004 : Code[10];CurrencyFactor@1500007 : Decimal;QtyFactor@1500006 : Decimal;TransactionNo@1500008 : Integer);
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        GeneralLedgerSetup.GET;
        Type := DetailedGSTEntryBuffer.Type;
        "Product Type" := DetailedGSTEntryBuffer."Product Type";
        "Source No." := DetailedGSTEntryBuffer."Source No.";
        "HSN/SAC Code" := DetailedGSTEntryBuffer."HSN/SAC Code";
        "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
        "GST Group Code" := DetailedGSTEntryBuffer."GST Group Code";
        "Document Line No." := DetailedGSTEntryBuffer."Line No.";
        "Currency Code" := CurrencyCode;
        "Currency Factor" := CurrencyFactor;
        IF DetailedGSTEntryBuffer."GST Assessable Value" <> 0 THEN
          "GST Base Amount" :=
            ROUND(
              DetailedGSTEntryBuffer."GST Assessable Value (LCY)" + DetailedGSTEntryBuffer."Custom Duty Amount (LCY)",
              GeneralLedgerSetup."Amount Rounding Precision")
        ELSE
          "GST Base Amount" :=
            ROUND(
              DetailedGSTEntryBuffer."GST Base Amount (LCY)" * QtyFactor,
              GeneralLedgerSetup."Amount Rounding Precision");
        IF DetailedGSTEntryBuffer."GST Assessable Value" <> 0 THEN
          "GST Amount" :=
            RoundGSTPrecision((DetailedGSTEntryBuffer."GST Amount (LCY)" / DetailedGSTEntryBuffer."GST Base Amount (LCY)") *
              "GST Base Amount")
        ELSE
          "GST Amount" := RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount (LCY)" * QtyFactor);

        IF DetailedGSTEntryBuffer."GST Assessable Value" <> 0 THEN
          "Amount Loaded on Item" :=
            ConvertGSTAmountToLCY(
              CurrencyCode,DetailedGSTEntryBuffer."Amount Loaded on Item",
              CurrencyFactor,"Posting Date")
        ELSE
          "Amount Loaded on Item" :=
            ConvertGSTAmountToLCY(
              CurrencyCode,DetailedGSTEntryBuffer."Amount Loaded on Item" * QtyFactor,
              CurrencyFactor,"Posting Date");

        IF DetailedGSTEntryBuffer."Item Charge Assgn. Line No." <> 0 THEN
          QtyFactor := 1;
        "Remaining Base Amount" := "GST Base Amount";
        "Remaining GST Amount" := "GST Amount";
        "GST %" := DetailedGSTEntryBuffer."GST %";
        Quantity := DetailedGSTEntryBuffer.Quantity * QtyFactor;
        "GST Rounding Type" := DetailedGSTEntryBuffer."GST Rounding Type";
        "GST Rounding Precision" := DetailedGSTEntryBuffer."GST Rounding Precision";
        "Input Service Distribution" := DetailedGSTEntryBuffer."Input Service Distribution";
        IF "GST Amount" > 0 THEN
          Positive := TRUE;
        "Original Doc. Type" := "Document Type";
        "Original Doc. No." := "Document No.";
        "User ID" := USERID;
        "Transaction No." := TransactionNo;
        Cess := DetailedGSTEntryBuffer.Cess;
        "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
        "Cess Amount Per Unit Factor" := DetailedGSTEntryBuffer."Cess Amt Per Unit Factor (LCY)";
        "Cess UOM" := DetailedGSTEntryBuffer."Cess UOM";
        "Cess Factor Quantity" := DetailedGSTEntryBuffer."Cess Factor Quantity";
        UOM := DetailedGSTEntryBuffer.UOM;
      END;
    END;

    PROCEDURE GetGSTAccountNo@1500009(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10];TransactionType@1500003 : 'Purchase,Sales,Transfer,Settlement';Type@1500005 : ' ,G/L Account,Item';GSTCredit@1500006 : 'Availment,Non-Availment';ISD@1500008 : Boolean;ReceivableApplicable@1500009 : Boolean) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
      GLAcc@1500004 : Code[20];
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      IF TransactionType = TransactionType::Sales THEN BEGIN
        GSTPostingSetup.TESTFIELD("Payable Account");
        GLAcc := GSTPostingSetup."Payable Account";
      END ELSE
        IF TransactionType = TransactionType::Purchase THEN
          IF (Type = Type::"G/L Account") AND (GSTCredit = GSTCredit::"Non-Availment") THEN BEGIN
            GSTPostingSetup.TESTFIELD("Expense Account");
            GLAcc := GSTPostingSetup."Expense Account";
          END ELSE
            IF ReceivableApplicable THEN
              IF ISD THEN BEGIN
                GSTPostingSetup.TESTFIELD("Receivable Acc. (Dist)");
                GLAcc := GSTPostingSetup."Receivable Acc. (Dist)";
              END ELSE BEGIN
                GSTPostingSetup.TESTFIELD("Receivable Account");
                GLAcc := GSTPostingSetup."Receivable Account";
              END
            ELSE
              IF NOT ISD THEN BEGIN
                GSTPostingSetup.TESTFIELD("Receivable Account (Interim)");
                GLAcc := GSTPostingSetup."Receivable Account (Interim)";
              END ELSE
                IF GSTCredit = GSTCredit::"Non-Availment" THEN BEGIN
                  GSTPostingSetup.TESTFIELD("Expense Account");
                  GLAcc := GSTPostingSetup."Expense Account";
                END ELSE BEGIN
                  GSTPostingSetup.TESTFIELD("Receivable Acc. Interim (Dist)");
                  GLAcc := GSTPostingSetup."Receivable Acc. Interim (Dist)";
                END;
      EXIT(GLAcc);
    END;

    PROCEDURE InsertGSTLedgerEntryPurchase@1500013(GSTPostingBuffer@1500004 : Record 16420;PurchaseLine@1500006 : Record 39;PurchaseHeader@1500009 : Record 38;NextTransactionNo@1500001 : Integer;DocumentType@1500007 : Option;DocumentNo@1500008 : Code[20];CurrencyCode@1500003 : Code[10];CurrencyFactor@1500010 : Decimal;SourceCode@1500011 : Code[10]);
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
      Sign@1500012 : Integer;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        IF PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::Order,PurchaseHeader."Document Type"::Invoice,
                                              PurchaseHeader."Document Type"::Quote,
                                              PurchaseHeader."Document Type"::"Blanket Order"]
        THEN
          Sign := 1
        ELSE
          Sign := -1;
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := PurchaseHeader."Posting Date";
        "Document No." := DocumentNo;
        "Document Type" := DocumentType;
        "GST Amount" := ABS(GSTPostingBuffer."GST Amount") * Sign;
        "Currency Code" := CurrencyCode;
        "Currency Factor" := CurrencyFactor;
        "Transaction Type" := "Transaction Type"::Purchase;
        "GST Base Amount" := ABS(GSTPostingBuffer."GST Base Amount") * Sign;
        "Source Type" := "Source Type"::Vendor;
        "Source No." := PurchaseLine."Buy-from Vendor No.";
        "Source Code" := SourceCode;
        "Reason Code" := PurchaseLine."Reason Code";
        "Transaction No." := NextTransactionNo;
        "Input Service Distribution" := PurchaseHeader."GST Input Service Distribution";
        IF PurchaseHeader."Vendor Invoice No." <> '' THEN
          "External Document No." := PurchaseHeader."Vendor Invoice No.";
        IF PurchaseHeader."Vendor Cr. Memo No." <> '' THEN
          "External Document No." := PurchaseHeader."Vendor Cr. Memo No.";
        IF PurchaseLine.Type = PurchaseLine.Type::"G/L Account" THEN
          "Purchase Group Type" := "Purchase Group Type"::Service
        ELSE
          "Purchase Group Type" := "Purchase Group Type"::Goods;
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        "Reverse Charge" := GSTPostingBuffer."GST Reverse Charge";
        "User ID" := USERID;
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertDetailedGSTLedgEntryPurchase@1500012(PurchaseLine@1500000 : Record 39;PurchaseHeader@1500004 : Record 38;DocumentNo@1500001 : Code[20];DocumentType@1500012 : Option;QtyFactor@1500008 : Decimal;TransactionNo@1500009 : Integer);
    VAR
      DetailedGSTEntryBuffer@1500015 : Record 16412;
      DetailedGSTLedgerEntry@1500017 : Record 16419;
      ValueEntry@1500014 : Record 5802;
      Vendor@1500005 : Record 23;
      PurchInvLine@1500013 : Record 123;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Purchase);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",PurchaseLine."Document Type");
      DetailedGSTEntryBuffer.SETRANGE("Document No.",PurchaseLine."Document No.");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",PurchaseLine."Line No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            INIT;
            "Entry No." := GetNextGSTDetailEntryNo;
            "Entry Type" := "Entry Type"::"Initial Entry";
            "Transaction Type" := "Transaction Type"::Purchase;
            "Document Type" := DocumentType;
            "Document No." := DocumentNo;
            IF PurchaseHeader."Vendor Invoice No." <> '' THEN
              "External Document No." := PurchaseHeader."Vendor Invoice No.";
            IF PurchaseHeader."Vendor Cr. Memo No." <> '' THEN
              "External Document No." := PurchaseHeader."Vendor Cr. Memo No.";
            "Posting Date" := PurchaseHeader."Posting Date";
            "Source Type" := "Source Type"::Vendor;
            Type := PurchaseLine.Type;
            IF DetailedGSTEntryBuffer."Item Charge Assgn. Line No." = 0 THEN
              "No." := PurchaseLine."No."
            ELSE
              "No." := DetailedGSTEntryBuffer."No.";
            DetailedGSTEntryBuffer.TESTFIELD("Location Code");
            DetailedGSTEntryBuffer.TESTFIELD("Location State Code");
            DetailedGSTEntryBuffer.TESTFIELD("Location  Reg. No.");
            "Location Code" := DetailedGSTEntryBuffer."Location Code";
            "Location  Reg. No." := DetailedGSTEntryBuffer."Location  Reg. No.";
            "Location State Code" := DetailedGSTEntryBuffer."Location State Code";
            Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
            "GST Jurisdiction Type" := PurchaseLine."GST Jurisdiction Type";
            "GST Group Type" := PurchaseLine."GST Group Type";
            IF NOT PurchaseLine."Item Charge Entry" THEN
              "Item Charge Entry" := PurchaseLine.Type = PurchaseLine.Type::"Charge (Item)"
            ELSE
              "Item Charge Entry" := PurchaseLine."Item Charge Entry";
            "Gen. Bus. Posting Group" := PurchaseLine."Gen. Bus. Posting Group";
            "Gen. Prod. Posting Group" := PurchaseLine."Gen. Prod. Posting Group";
            "Reason Code" := PurchaseHeader."Reason Code";
            "Item Charge Assgn. Line No." := DetailedGSTEntryBuffer."Item Charge Assgn. Line No.";
            "Nature of Supply" := PurchaseHeader."Nature of Supply";
            "Buyer/Seller State Code" := DetailedGSTEntryBuffer."Buyer/Seller State Code";
            "Buyer/Seller Reg. No." := DetailedGSTEntryBuffer."Buyer/Seller Reg. No.";
            "Shipping Address State Code" := DetailedGSTEntryBuffer."Shipping Address State Code";
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Exempted Goods" := PurchaseLine.Exempted;
            "Reverse Charge" := DetailedGSTEntryBuffer."Reverse Charge";
            "GST Vendor Type" := PurchaseHeader."GST Vendor Type";
            "Purchase Invoice Type" := PurchaseHeader."Invoice Type";
            "Associated Enterprises" := PurchaseHeader."Associated Enterprises";
            "Original Invoice No." := DetailedGSTEntryBuffer."Original Invoice No.";
            "Original Invoice Date" := DetailedGSTEntryBuffer."Original Invoice Date";
            "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
            IF DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0 THEN
              "GST Credit" := "GST Credit"::"Non-Availment"
            ELSE
              "GST Credit" := "GST Credit"::Availment;
            "G/L Account No." :=
              GetGSTAccountNo(
                "Location State Code",DetailedGSTEntryBuffer."GST Component Code","Transaction Type"::Purchase,
                PurchaseLine.Type::" ",PurchaseLine."GST Credit",PurchaseHeader."GST Input Service Distribution",
                GetReceivableApplicable("GST Vendor Type","GST Group Type","GST Credit","Associated Enterprises","Reverse Charge"));
            "Credit Availed" :=
              GetReceivableApplicable("GST Vendor Type","GST Group Type","GST Credit","Associated Enterprises","Reverse Charge");
            "Liable to Pay" := GetPurchaseLiable("GST Vendor Type","GST Group Type","Associated Enterprises");
            UpdateDetailGSTLedgerEntry(
              DetailedGSTLedgerEntry,DetailedGSTEntryBuffer,PurchaseHeader."Currency Code",
              PurchaseHeader."Currency Factor",QtyFactor,TransactionNo);
            // Get Posted Purch Invoice
            IF PurchInvLine.GET("Document No.","Document Line No.") THEN
              "Amount to Customer/Vendor" := PurchInvLine."Amount To Vendor";
            TESTFIELD("HSN/SAC Code");
            IF (Vendor."GST Vendor Type" = Vendor."GST Vendor Type"::Import) OR
               (Vendor."GST Vendor Type" = Vendor."GST Vendor Type"::SEZ)
            THEN
              IF NOT (PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::"Credit Memo",
                                                         PurchaseHeader."Document Type"::"Return Order"]) THEN
              IF (PurchaseLine.Type <> PurchaseLine.Type::"Charge (Item)") AND
                  (PurchaseLine."GST Group Type" = PurchaseLine."GST Group Type"::Goods) THEN
                PurchaseLine.TESTFIELD("GST Assessable Value");

            IF (DetailedGSTEntryBuffer."Amount Loaded on Item" = 0) AND
               (DetailedGSTEntryBuffer."GST Input/Output Credit Amount" = 0)
            THEN
              EVALUATE("GST Credit",FORMAT(PurchaseLine."GST Credit"));
            IF QtyFactor <> 0 THEN
              INSERT(TRUE);
            IF "GST Credit" = "GST Credit"::"Non-Availment" THEN BEGIN
              ValueEntry.SETCURRENTKEY("Document No.","Document Line No.","Item No.");
              ValueEntry.SETRANGE("Document No.",DocumentNo);
              ValueEntry.SETRANGE("Document Line No.","Document Line No.");
              ValueEntry.SETRANGE("Item No.","No.");
              IF ValueEntry.FINDFIRST THEN BEGIN
                "Item Ledger Entry No." := ValueEntry."Item Ledger Entry No.";
                MODIFY(TRUE);
              END;
            END;
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
    END;

    PROCEDURE GetNextGSTDetailEntryNo@1500037() : Integer;
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.LOCKTABLE;
      IF DetailedGSTLedgerEntry.FINDLAST THEN
        EXIT(DetailedGSTLedgerEntry."Entry No." + 1);
      EXIT(1);
    END;

    PROCEDURE GetNextGSTLedgerEntryNo@1500010() : Integer;
    VAR
      GSTLedgerEntry@1500000 : Record 16418;
    BEGIN
      GSTLedgerEntry.LOCKTABLE;
      IF GSTLedgerEntry.FINDLAST THEN
        EXIT(GSTLedgerEntry."Entry No." + 1);
      EXIT(1);
    END;

    PROCEDURE ConvertGSTBaseAmountToLCY@1500044(CurrencyCode@1500001 : Code[10];Amount@1500002 : Decimal;CurrencyFactor@1500005 : Decimal;PostingDate@1500003 : Date) : Decimal;
    VAR
      CurrExchRate@1500000 : Record 330;
      GLSetup@1500004 : Record 98;
    BEGIN
      GLSetup.GET;
      IF CurrencyCode = '' THEN
        EXIT(Amount);
      EXIT(
        CurrExchRate.ExchangeAmtFCYToLCY(
          PostingDate,CurrencyCode,
          Amount,CurrencyFactor));
    END;

    PROCEDURE GetGSTPayableAccountNo@1500016(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      GSTPostingSetup.TESTFIELD("Payable Account");
      EXIT(GSTPostingSetup."Payable Account");
    END;

    PROCEDURE EvaluateExpressionGSTFormulaAdvPaymnt@1500040(IsTestExpression@1500019 : Boolean;Expression@1500018 : Code[250];TransactionType@1500012 : Option;TemplateName@1500002 : Code[10];BatchName@1500001 : Code[10];LineNo@1500000 : Integer) : Decimal;
    VAR
      AdvGSTCalculationBuffer@1500020 : Record 16422;
      Result@1500017 : Decimal;
      RightResult@1500008 : Decimal;
      LeftResult@1500004 : Decimal;
      CallLevel@1500016 : Integer;
      Parantheses@1500015 : Integer;
      OperatorNo@1500011 : Integer;
      i@1500010 : Integer;
      IsExpression@1500014 : Boolean;
      Operators@1500013 : Text[8];
      RightOperand@1500007 : Text[250];
      LeftOperand@1500006 : Text[250];
      Operator@1500005 : Char;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpressionGSTFormulaAdvPaymnt(IsTestExpression,LeftOperand,TransactionType,TemplateName,BatchName,LineNo);
          RightResult :=
            EvaluateExpressionGSTFormulaAdvPaymnt(IsTestExpression,RightOperand,TransactionType,TemplateName,BatchName,LineNo);

          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionGSTFormulaAdvPaymnt(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                TransactionType,TemplateName,BatchName,LineNo)
          ELSE
            IF IsTestExpression THEN BEGIN
              AdvGSTCalculationBuffer.SETCURRENTKEY(
                "Transaction Type","Journal Template Name","Journal Batch Name","Line No.","Calculation Order");
              AdvGSTCalculationBuffer.SETRANGE("Transaction Type",TransactionType);
              AdvGSTCalculationBuffer.SETRANGE("Journal Template Name",TemplateName);
              AdvGSTCalculationBuffer.SETRANGE("Journal Batch Name",BatchName);
              AdvGSTCalculationBuffer.SETRANGE("Line No.",LineNo);
              AdvGSTCalculationBuffer.SETRANGE("GST Component Code",Expression);
              IF AdvGSTCalculationBuffer.FINDFIRST THEN
                Result := Result + AdvGSTCalculationBuffer."GST Component %";
            END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE EvaluateExpressionGSTAmount@1500029(IsTestExpression@1500002 : Boolean;Expression@1500001 : Code[250];TransactionType@1500000 : Option;TemplateName@1500021 : Code[10];BatchName@1500022 : Code[10];LineNo@1500023 : Integer) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500020 : Record 16412;
      Result@1500017 : Decimal;
      CallLevel@1500016 : Integer;
      Parantheses@1500015 : Integer;
      IsExpression@1500014 : Boolean;
      Operators@1500013 : Text[8];
      OperatorNo@1500012 : Integer;
      i@1500010 : Integer;
      RightResult@1500009 : Decimal;
      LeftResult@1500008 : Decimal;
      RightOperand@1500007 : Text[250];
      LeftOperand@1500006 : Text[250];
      Operator@1500005 : Char;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN
            LeftOperand := COPYSTR(Expression,1,i - 1)
          ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN
            RightOperand := COPYSTR(Expression,i + 1)
          ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionGSTAmount(IsTestExpression,LeftOperand,TransactionType,TemplateName,BatchName,LineNo);
          RightResult := EvaluateExpressionGSTAmount(IsTestExpression,RightOperand,TransactionType,TemplateName,BatchName,LineNo);

          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionGSTAmount(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                TransactionType,TemplateName,BatchName,LineNo)
          ELSE
            IF IsTestExpression THEN BEGIN
              DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
              DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
              DetailedGSTEntryBuffer.SETRANGE("Journal Template Name",TemplateName);
              DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name",BatchName);
              DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
              DetailedGSTEntryBuffer.SETRANGE("GST Component Code",Expression);
              IF DetailedGSTEntryBuffer.FINDFIRST THEN
                Result := Result + DetailedGSTEntryBuffer."GST Amount"
            END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE InsertGSTCalculationBuffer@1500014(GSTSetup@1500001 : Record 16408;DocumentType@1500000 : Option;DocumentNo@1500008 : Code[20];LineNo@1500007 : Integer;TransactionType@1500006 : 'Purchase,Sales,Transfer,Service,Service Transfer,Production';UnitCost@1500011 : Decimal;PostingDate@1500013 : Date;CurrencyCode@1500016 : Code[10];CurrencyFactor@1500015 : Decimal);
    VAR
      GSTCalculationBuffer@1500009 : Record 16421;
      GSTCalculationBuffer1@1500004 : Record 16421;
      SalesLine@1500010 : Record 37;
      PurchaseLine@1500003 : Record 39;
      TransferLine@1500012 : Record 5741;
      ServiceLine@1500014 : Record 5902;
      ServiceTransferLine@1500002 : Record 16438;
      DeliveryChallanLine@1500005 : Record 16324;
    BEGIN
      GSTCalculationBuffer1.SETRANGE("Transaction Type",TransactionType);
      GSTCalculationBuffer1.SETRANGE("Document Type",DocumentType);
      GSTCalculationBuffer1.SETRANGE("Document No.",DocumentNo);
      GSTCalculationBuffer1.SETRANGE("Document Line No.",LineNo);
      GSTCalculationBuffer1.SETRANGE("GST State Code",GSTSetup."GST State Code");
      GSTCalculationBuffer1.SETRANGE("GST Group Code",GSTSetup."GST Group Code");
      GSTCalculationBuffer1.SETRANGE("GST Component Code",GSTSetup."GST Component");
      GSTCalculationBuffer1.SETRANGE("Effective Date",GSTSetup."Effective Date");
      IF NOT GSTCalculationBuffer1.FINDFIRST THEN
        CASE TransactionType OF
          TransactionType::Sales:
            IF SalesLine.GET(DocumentType,DocumentNo,LineNo) THEN
              InitGSTCalculationBuffer(
                GSTCalculationBuffer,GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType::Sales,UnitCost,
                PostingDate,CurrencyCode,CurrencyFactor);
          TransactionType::Purchase:
            IF PurchaseLine.GET(DocumentType,DocumentNo,LineNo) THEN
              InitGSTCalculationBuffer(
                GSTCalculationBuffer,GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType::Purchase,UnitCost,
                PostingDate,CurrencyCode,CurrencyFactor);
          TransactionType::Transfer:
            IF TransferLine.GET(DocumentNo,LineNo) THEN
              InitGSTCalculationBuffer(
                GSTCalculationBuffer,GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType::Transfer,UnitCost,
                PostingDate,CurrencyCode,CurrencyFactor);
          TransactionType::Service:
            IF ServiceLine.GET(DocumentType,DocumentNo,LineNo) THEN
              InitGSTCalculationBuffer(
                GSTCalculationBuffer,GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType::Service,UnitCost,
                PostingDate,CurrencyCode,CurrencyFactor);
          TransactionType::"Service Transfer":
            IF ServiceTransferLine.GET(DocumentNo,LineNo) THEN
              InitGSTCalculationBuffer(
                GSTCalculationBuffer,GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType::"Service Transfer",UnitCost,
                PostingDate,CurrencyCode,CurrencyFactor);
          TransactionType::Production:
            IF DeliveryChallanLine.GET(DocumentNo,LineNo) THEN
              InitGSTCalculationBuffer(
                GSTCalculationBuffer,GSTSetup,DocumentType,DocumentNo,LineNo,TransactionType::Production,UnitCost,
                PostingDate,CurrencyCode,CurrencyFactor);
        END;
    END;

    PROCEDURE DeleteGSTCalculationBuffer@1500002(TransactionType@1500002 : Option;DocumentType@1500000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500001 : Code[20];DocumentLineNo@1500003 : Integer);
    VAR
      GSTCalculationBuffer@1500004 : Record 16421;
    BEGIN
      GSTCalculationBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.","Calculation Order");
      GSTCalculationBuffer.SETRANGE("Transaction Type",TransactionType);
      GSTCalculationBuffer.SETRANGE("Document Type",DocumentType);
      GSTCalculationBuffer.SETRANGE("Document No.",DocumentNo);
      IF DocumentLineNo <> 0 THEN
        GSTCalculationBuffer.SETRANGE("Document Line No.",DocumentLineNo);
      GSTCalculationBuffer.DELETEALL(TRUE);
    END;

    PROCEDURE CheckGSTCalculationOrder@1500055(TransactionType@1500004 : Option;DocumentType@1500003 : Option;DocumentNo@1500002 : Code[20];DocumentLineNo@1500001 : Integer;CalcualtionOrder@1500005 : Integer);
    VAR
      GSTCalculationBuffer@1500000 : Record 16421;
    BEGIN
      GSTCalculationBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.","Calculation Order");
      GSTCalculationBuffer.SETRANGE("Transaction Type",TransactionType);
      GSTCalculationBuffer.SETRANGE("Document Type",DocumentType);
      GSTCalculationBuffer.SETRANGE("Document No.",DocumentNo);
      GSTCalculationBuffer.SETRANGE("Document Line No.",DocumentLineNo);
      GSTCalculationBuffer.SETRANGE("Calculation Order",CalcualtionOrder);
      IF GSTCalculationBuffer.FINDFIRST THEN
        ERROR(CheckCalculationOrderErr);
    END;

    LOCAL PROCEDURE InitGSTCalculationBuffer@1500089(VAR GSTCalculationBuffer@1500001 : Record 16421;GSTSetup@1500006 : Record 16408;DocumentType@1500005 : Option;DocumentNo@1500004 : Code[20];LineNo@1500003 : Integer;TransactionType@1500000 : 'Purchase,Sales,Transfer,Service,Service Transfer,Production';UnitCost@1500002 : Decimal;PostingDate@1500010 : Date;CurrencyCode@1500009 : Code[10];CurrencyFactor@1500008 : Decimal);
    VAR
      Percentage@1500007 : Decimal;
      Threshold@1500011 : Decimal;
    BEGIN
      WITH GSTCalculationBuffer DO BEGIN
        INIT;
        "Transaction Type" := TransactionType;
        "Document Type" := DocumentType;
        "Document No." := DocumentNo;
        "GST State Code" := GSTSetup."GST State Code";
        "GST Group Code" := GSTSetup."GST Group Code";
        "GST Component Code" := GSTSetup."GST Component";
        "Effective Date" := GSTSetup."Effective Date";
        "Document Line No." := LineNo;
        Threshold := ConvertAmountLCYToFCYRoundSmall(CurrencyCode,GSTSetup."Threshold Amount",CurrencyFactor,PostingDate);
        CASE GSTSetup."Component Calc. Type" OF
          GSTSetup."Component Calc. Type"::Threshold:
            IF NOT ("Transaction Type" IN ["Transaction Type"::"Service Transfer"]) THEN
              IF UnitCost <= Threshold THEN
                Percentage := GSTSetup."Before Threshold %"
              ELSE
                Percentage := GSTSetup."GST Component %";
          GSTSetup."Component Calc. Type"::General,GSTSetup."Component Calc. Type"::"Cess %",
          GSTSetup."Component Calc. Type"::"Cess % + Amount / Unit Factor",
          GSTSetup."Component Calc. Type"::"Cess % Or Amount / Unit Factor Whichever Higher":
            Percentage := GSTSetup."GST Component %"
        END;
        "GST Component %" := Percentage;
        "Calculation Order" := GSTSetup."Calculation Order";
        Formula := GSTSetup.Formula;
        "Include Base" := GSTSetup."Include Base";
        "Component Calc. Type" := GSTSetup."Component Calc. Type";
        "Cess Factor Quantity" := GSTSetup."Cess Factor Quantity";
        "Cess Amount Per Unit Factor" :=
          ConvertAmountLCYToFCYRoundSmall(CurrencyCode,GSTSetup."Cess Amount Per Unit Factor",CurrencyFactor,PostingDate);
        "Cess Amt Per Unit Factor (LCY)" := GSTSetup."Cess Amount Per Unit Factor";
        "Cess UOM" := GSTSetup."Cess UOM";
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE GSTAmtCalculationForward@1500023(GSTCalculationBuffer@1500000 : Record 16421;DocumentType@1500006 : Option;DocumentNo@1500005 : Code[20];LineNo@1500004 : Integer;Amount@1500007 : Decimal;CurrencyCode@1500009 : Code[10];CurrencyFactor@1500011 : Decimal;Item@1500008 : Boolean;LineQty@1500013 : Decimal;UOM@1500014 : Code[10];ItemNo@1500012 : Code[20]) : Decimal;
    VAR
      GSTBaseAmount@1500003 : Decimal;
      GSTAmount@1500002 : Decimal;
      CessComponent@1500010 : Boolean;
      CalculatedAmount@1500017 : Decimal;
    BEGIN
      IF GSTCalculationBuffer.Formula <> '' THEN BEGIN
        GSTBaseAmount :=
          EvaluateExpressioninGSTFormula(
            TRUE,GSTCalculationBuffer.Formula,GSTCalculationBuffer."Transaction Type",
            DocumentType,DocumentNo,LineNo,DocumentType,'',
            0);
        IF GSTCalculationBuffer."Include Base" THEN
          GSTBaseAmount += Amount;
        CessComponent := TRUE;
      END ELSE BEGIN
        IF GSTCalculationBuffer."Include Base" THEN
          GSTBaseAmount := Amount
        ELSE
          GSTBaseAmount := 0;
      END;
      CalculatedAmount := GSTBaseAmount * GSTCalculationBuffer."GST Component %" / 100;
      GSTAmount :=
        RoundGSTAmount(
          CompCalcTypeWiseCalculation(GSTCalculationBuffer,Item,CalculatedAmount,LineQty,ItemNo,UOM),CurrencyCode);
      IF (GSTCalculationBuffer."Component Calc. Type" = GSTCalculationBuffer."Component Calc. Type"::
          "Cess % Or Amount / Unit Factor Whichever Higher") AND
         (RoundGSTAmount(CalculatedAmount,CurrencyCode) <> GSTAmount) AND Item
      THEN BEGIN
        GSTCalculationBuffer."GST Component %" := 0 ;
        GSTCalculationBuffer.MODIFY;
      END;
      IF GSTAmount <> 0 THEN
        InsertDetaildGSTBuffer(
          GSTCalculationBuffer,DocumentType,DocumentNo,LineNo,GSTBaseAmount,
          GSTCalculationBuffer."GST Component %",GSTAmount,CurrencyCode,CessComponent,CurrencyFactor,UOM);
      EXIT(GSTAmount);
    END;

    LOCAL PROCEDURE GSTAmtCalculationForwardAdvPaymnt@1500022(VAR GenJournalLine@1500008 : Record 81;AdvGSTCalculationBuffer@1500000 : Record 16422;Amount@1500007 : Decimal) : Decimal;
    VAR
      GSTAmount@1500002 : Decimal;
      GSTBaseAmount@1500001 : Decimal;
      CessComponent@1500003 : Boolean;
    BEGIN
      IF AdvGSTCalculationBuffer.Formula <> '' THEN BEGIN
        GSTBaseAmount :=
          EvaluateExpressionGSTAmount(
            TRUE,AdvGSTCalculationBuffer.Formula,AdvGSTCalculationBuffer."Transaction Type",
            GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
        IF AdvGSTCalculationBuffer."Include Base" THEN
          GSTBaseAmount += Amount;
        CessComponent := TRUE;
      END ELSE
        IF AdvGSTCalculationBuffer."Include Base" THEN
          GSTBaseAmount := Amount
        ELSE
          GSTBaseAmount := 0;
      GSTAmount := GSTBaseAmount * AdvGSTCalculationBuffer."GST Component %" / 100;
      IF GSTAmount <> 0 THEN
        InsertDetaildGSTBufferAdvPayment(
          GenJournalLine,AdvGSTCalculationBuffer."Transaction Type",
          AdvGSTCalculationBuffer."GST Component Code",GSTBaseAmount,
          AdvGSTCalculationBuffer."GST Component %",
          GSTAmount,AdvGSTCalculationBuffer."GST Group Code",CessComponent,
          AdvGSTCalculationBuffer."Component Calc. Type");
      EXIT(GSTAmount);
    END;

    LOCAL PROCEDURE GSTAmtCalculationBackward@1500027(VAR GenJournalLine@1500003 : Record 81;AdvGSTCalculationBuffer@1500000 : Record 16422) : Decimal;
    VAR
      GSTPercent@1500001 : Decimal;
      GSTComponent@1500002 : Decimal;
    BEGIN
      IF AdvGSTCalculationBuffer."Include Base" AND (AdvGSTCalculationBuffer.Formula = '') THEN
        GSTPercent := GSTPercent + AdvGSTCalculationBuffer."GST Component %";
      IF AdvGSTCalculationBuffer."Include Base" AND (AdvGSTCalculationBuffer.Formula <> '') THEN BEGIN
        GSTComponent :=
          EvaluateExpressionGSTFormulaAdvPaymnt(TRUE,AdvGSTCalculationBuffer.Formula,AdvGSTCalculationBuffer."Transaction Type",
            GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
        GSTPercent := GSTPercent + (((100 + GSTComponent) * AdvGSTCalculationBuffer."GST Component %") / 100);
      END;
      IF (NOT AdvGSTCalculationBuffer."Include Base") AND (AdvGSTCalculationBuffer.Formula <> '') THEN BEGIN
        GSTComponent :=
          EvaluateExpressionGSTFormulaAdvPaymnt(TRUE,AdvGSTCalculationBuffer.Formula,
            AdvGSTCalculationBuffer."Transaction Type",
            GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
        GSTPercent := GSTPercent + ((GSTComponent * AdvGSTCalculationBuffer."GST Component %") / 100);
      END;
      EXIT(GSTPercent);
    END;

    PROCEDURE CalculateGSTAmountsAdvPaymnt@1500067(VAR GenJournalLine@1500002 : Record 81;TransactionType@1500000 : 'Purchase,Sale';GSTJurisdiction@1500018 : Option;GSTStateCode@1500017 : Code[10];GSTGroupCode@1500016 : Code[20];EffectiveDate@1500015 : Date;Amount@1500014 : Decimal) : Decimal;
    VAR
      GSTComponent@1500008 : Record 16405;
      GSTSetup@1500005 : Record 16408;
      AdvGSTCalculationBuffer@1500010 : Record 16422;
      AdvGSTCalculationBuffer1@1500013 : Record 16422;
      GSTBaseAmount@1500004 : Decimal;
      TotalGSTAmount@1500001 : Decimal;
      GSTPer@1500012 : Decimal;
    BEGIN
      GSTComponent.SETRANGE("GST Jurisdiction Type",GSTJurisdiction);
      IF GSTComponent.FINDSET THEN
        REPEAT
          IF GetGSTSetup(GSTSetup,GSTStateCode,GSTGroupCode,GSTComponent.Code,EffectiveDate) <> '' THEN
            InsertGSTCalculationBufferAdvPayment(GenJournalLine,GSTSetup,TransactionType);
        UNTIL GSTComponent.NEXT = 0;
      IF TransactionType = TransactionType::Sale THEN BEGIN
        WITH AdvGSTCalculationBuffer DO BEGIN
          SETCURRENTKEY("Transaction Type","Journal Template Name","Journal Batch Name","Line No.","Calculation Order");
          SETRANGE("Transaction Type",TransactionType);
          SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
          SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
          SETRANGE("Line No.",GenJournalLine."Line No.");
          IF FINDSET THEN
            REPEAT
              GSTPer += GSTAmtCalculationBackward(GenJournalLine,AdvGSTCalculationBuffer);
            UNTIL NEXT = 0;
        END;
        GSTBaseAmount := (Amount * 100) / (100 + GSTPer);
        WITH AdvGSTCalculationBuffer1 DO BEGIN
          SETCURRENTKEY("Transaction Type","Journal Template Name","Journal Batch Name","Line No.","Calculation Order");
          SETRANGE("Transaction Type",TransactionType);
          SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
          SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
          SETRANGE("Line No.",GenJournalLine."Line No.");
          IF FINDSET THEN
            REPEAT
              TotalGSTAmount :=
                GSTAmtCalculationForwardAdvPaymnt(GenJournalLine,AdvGSTCalculationBuffer1,GSTBaseAmount);
            UNTIL NEXT = 0;
        END;
      END;
      IF TransactionType = TransactionType::Purchase THEN BEGIN
        WITH AdvGSTCalculationBuffer1 DO BEGIN
          SETCURRENTKEY("Transaction Type","Journal Template Name","Journal Batch Name","Line No.","Calculation Order");
          SETRANGE("Transaction Type",TransactionType);
          SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
          SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
          SETRANGE("Line No.",GenJournalLine."Line No.");
          IF FINDSET THEN
            REPEAT
              TotalGSTAmount += GSTAmtCalculationForwardAdvPaymnt(GenJournalLine,AdvGSTCalculationBuffer1,Amount);
            UNTIL NEXT = 0;
        END;
        GSTBaseAmount := TotalGSTAmount;
      END;
      DeleteAdvPaymntGSTCalculationBuffer(GenJournalLine,TransactionType);
      EXIT(GSTBaseAmount);
    END;

    LOCAL PROCEDURE InsertGSTCalculationBufferAdvPayment@1500078(VAR GenJournalLine@1500000 : Record 81;GSTSetup@1500001 : Record 16408;TransactionType@1500006 : 'Purchase,Sale');
    VAR
      AdvGSTCalculationBuffer@1500009 : Record 16422;
    BEGIN
      WITH AdvGSTCalculationBuffer DO BEGIN
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
        SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        SETRANGE("Line No.",GenJournalLine."Line No.");
        SETRANGE("GST State Code",GSTSetup."GST State Code");
        SETRANGE("GST Group Code",GSTSetup."GST Group Code");
        SETRANGE("GST Component Code",GSTSetup."GST Component");
        SETRANGE("Effective Date",GSTSetup."Effective Date");
        IF NOT FINDFIRST THEN
          InitGSTCalculationBufferAdvPayment(GenJournalLine,GSTSetup,TransactionType);
      END;
    END;

    LOCAL PROCEDURE InitGSTCalculationBufferAdvPayment@1500120(VAR GenJournalLine@1500002 : Record 81;GSTSetup@1500006 : Record 16408;TransactionType@1500000 : Option);
    VAR
      AdvGSTCalculationBuffer@1500001 : Record 16422;
    BEGIN
      WITH AdvGSTCalculationBuffer DO BEGIN
        INIT;
        "Transaction Type" := TransactionType;
        "Journal Template Name" := GenJournalLine."Journal Template Name";
        "Journal Batch Name" := GenJournalLine."Journal Batch Name";
        "Line No." := GenJournalLine."Line No.";
        "GST State Code" := GSTSetup."GST State Code";
        "GST Group Code" := GSTSetup."GST Group Code";
        "GST Component Code" := GSTSetup."GST Component";
        "Effective Date" := GSTSetup."Effective Date";
        IF GSTSetup."Component Calc. Type" IN [GSTSetup."Component Calc. Type"::"Cess %",
                                               GSTSetup."Component Calc. Type"::General]
        THEN
          "GST Component %" := GSTSetup."GST Component %";
        "Calculation Order" := GSTSetup."Calculation Order";
        Formula := GSTSetup.Formula;
        "Include Base" := GSTSetup."Include Base";
        "Component Calc. Type" := GSTSetup."Component Calc. Type";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertDetaildGSTBufferAdvPayment@1500026(VAR GenJournalLine@1500000 : Record 81;TransactionType@1500001 : 'Purchase,Sale';GSTComponentCode@1500006 : Code[10];GSTBaseAmount@1500007 : Decimal;GSTPercent@1500009 : Decimal;GSTAmount@1500011 : Decimal;GSTGroupCode@1500012 : Code[20];CessComponent@1500013 : Boolean;CompCalcType@1500002 : Option);
    VAR
      DetailedGSTEntryBuffer@1500008 : Record 16412;
      Location@1500014 : Record 14;
      ShiptoAddress@1500015 : Record 222;
      Customer@1500016 : Record 18;
      Vendor@1500017 : Record 23;
      SalesReceivablesSetup@1500003 : Record 311;
      LastEntryNo@1500010 : Integer;
    BEGIN
      GeneralLedgerSetup.GET;
      SalesReceivablesSetup.GET;
      WITH DetailedGSTEntryBuffer DO BEGIN
        IF FINDLAST THEN
          LastEntryNo := "Entry No." + 1
        ELSE
          LastEntryNo := 1;

        INIT;
        "Entry No." := LastEntryNo;
        "Transaction Type" := TransactionType;
        "Line No." := GenJournalLine."Line No.";
        "Journal Template Name" := GenJournalLine."Journal Template Name";
        "Journal Batch Name" := GenJournalLine."Journal Batch Name";
        "Document No." := GenJournalLine."Document No.";
        "Posting Date" := GenJournalLine."Posting Date";
        "Source Type" := GenJournalLine."Account Type";
        "Source No." := GenJournalLine."Account No.";
        "HSN/SAC Code" := GenJournalLine."HSN/SAC Code";
        "GST Group Type" := GenJournalLine."GST Group Type";
        "Location Code" := GenJournalLine."Location Code";
        "GST Component Code" := GSTComponentCode;
        "GST Group Code" := GSTGroupCode;
        "GST Base Amount" := GSTBaseAmount;
        "GST %" := GSTPercent;
        Quantity := 1;
        "GST Amount" := RoundGSTPrecision(GSTAmount);
        "Currency Code" := GenJournalLine."Currency Code";
        IF "Currency Code" <> '' THEN
          "Currency Factor" := GenJournalLine."Currency Factor"
        ELSE
          "Currency Factor" := 1;
        "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
        "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
        "GST on Advance Payment" := GenJournalLine."GST on Advance Payment";
        Cess := CessComponent;
        "Component Calc. Type" := CompCalcType;
        Location.GET("Location Code");
        "Location  Reg. No." := Location."GST Registration No.";
        GenJournalLine.TESTFIELD("Location State Code");
        "Location State Code" := GenJournalLine."Location State Code";
        "Input Service Distribution" := GenJournalLine."GST Input Service Distribution";
        IF "Source Type" = "Source Type"::Customer THEN BEGIN
          Customer.GET("Source No.");
          "GST Place of Supply" := GenJournalLine."GST Place of Supply";
          IF "GST Place of Supply" = "GST Place of Supply"::" " THEN
            ERROR(STRSUBSTNO(ADVPlaceOfSupplyErr,"Journal Template Name","Journal Batch Name","Line No."));
          IF GenJournalLine."Ship-to Code" <> '' THEN BEGIN
            ShiptoAddress.GET("Source No.",GenJournalLine."Ship-to Code");
            IF GenJournalLine."GST Ship-to State Code" <> GenJournalLine."GST Bill-to/BuyFrom State Code" THEN
              "Shipping Address State Code" := GenJournalLine."GST Ship-to State Code";
          END;
          CASE "GST Place of Supply" OF
            "GST Place of Supply"::"Bill-to Address":
              BEGIN
                "Buyer/Seller State Code" := GenJournalLine."GST Bill-to/BuyFrom State Code";
                "Buyer/Seller Reg. No." := Customer."GST Registration No.";
              END;
            "GST Place of Supply"::"Ship-to Address":
              BEGIN
                GenJournalLine.TESTFIELD("Ship-to Code");
                "Buyer/Seller State Code" := GenJournalLine."GST Ship-to State Code";
                "Buyer/Seller Reg. No." := ShiptoAddress."GST Registration No.";
              END;
            "GST Place of Supply"::"Location Address":
              BEGIN
                "Buyer/Seller State Code" := "Location State Code";
                "Buyer/Seller Reg. No." := Customer."GST Registration No.";
              END;
          END;
        END ELSE
          IF "Source Type" = "Source Type"::Vendor THEN BEGIN
            Vendor.GET("Source No.");
            "Buyer/Seller Reg. No." := Vendor."GST Registration No.";
            "Buyer/Seller State Code" := Vendor."State Code";
          END;
        IF GenJournalLine."Line No." <> 0 THEN
          INSERT(TRUE);
      END;
    END;

    PROCEDURE DeleteAdvPaymntGSTCalculationBuffer@1500021(VAR GenJournalLine@1500000 : Record 81;TransactionType@1500002 : 'Purchase,Sale');
    VAR
      AdvGSTCalculationBuffer@1500004 : Record 16422;
    BEGIN
      AdvGSTCalculationBuffer.SETCURRENTKEY(
        "Transaction Type","Journal Template Name","Journal Batch Name","Line No.","Calculation Order");
      AdvGSTCalculationBuffer.SETRANGE("Transaction Type",TransactionType);
      AdvGSTCalculationBuffer.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      AdvGSTCalculationBuffer.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      AdvGSTCalculationBuffer.SETRANGE("Line No.",GenJournalLine."Line No.");
      AdvGSTCalculationBuffer.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteGSTBufferAdvPayment@1500054(VAR GenJournalLine@1500000 : Record 81;TransactionType@1500002 : 'Purchase,Sale');
    VAR
      DetailedGSTEntryBuffer@1500003 : Record 16412;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY(
        "Transaction Type","Journal Template Name","Journal Batch Name","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",GenJournalLine."Line No.");
      DetailedGSTEntryBuffer.DELETEALL(TRUE);
      DeleteAdvPaymntGSTCalculationBuffer(GenJournalLine,TransactionType);
    END;

    PROCEDURE GetPurchItemChargeInputGSTCredit@1500024(PurchaseHeader@1500016 : Record 38;PurchaseLine@1500003 : Record 39;ItemChargeAssignmentPurch@1500002 : Record 5805;GSTPerStateCode@1500001 : Code[10];GSTJurisdiction@1500000 : 'Intrastate,Interstate';CurrencyCode@1500014 : Code[10];CurrencyFactor@1500018 : Decimal;UnitCost@1500011 : Decimal) : Decimal;
    VAR
      GSTComponent@1500006 : Record 16405;
      GSTSetup@1500009 : Record 16408;
      GSTCalculationBuffer@1500015 : Record 16421;
      TransactionType@1500004 : 'Purchase,Sales,Transfer,Service,Service Transfer,Production';
      GSTCalcBaseAmount@1500008 : Decimal;
      GSTAmount@1500007 : Decimal;
      TotalGSTAmount@1500010 : Decimal;
      CessComponent@1500017 : Boolean;
      GSTBaseAmount@1500005 : Decimal;
      CalculatedAmount@1500012 : Decimal;
    BEGIN
      WITH PurchaseLine DO BEGIN
        CALCFIELDS("Qty. to Assign");
        IF "Line Amount" <> 0 THEN
          IF "Qty. to Assign" <> 0 THEN
            GSTBaseAmount := ItemChargeAssignmentPurch."Amount to Assign";
        GSTComponent.SETCURRENTKEY("Calculation Order");
        GSTComponent.SETRANGE("GST Jurisdiction Type",GSTJurisdiction);
        IF GSTComponent.FINDSET THEN
          REPEAT
            IF GetGSTSetup(GSTSetup,GSTPerStateCode,"GST Group Code",GSTComponent.Code,PurchaseHeader."Posting Date") <> '' THEN
              InsertGSTCalculationBuffer(
                GSTSetup,PurchaseHeader."Document Type",PurchaseHeader."No.","Line No.",
                TransactionType::Purchase,UnitCost,PurchaseHeader."Posting Date",CurrencyCode,CurrencyFactor);
          UNTIL GSTComponent.NEXT = 0;
        GSTCalculationBuffer.SETCURRENTKEY(
          "Transaction Type","Document Type","Document No.","Document Line No.","Calculation Order");
        GSTCalculationBuffer.SETRANGE("Transaction Type",TransactionType);
        GSTCalculationBuffer.SETRANGE("Document Type",PurchaseHeader."Document Type");
        GSTCalculationBuffer.SETRANGE("Document No.",PurchaseHeader."No.");
        GSTCalculationBuffer.SETRANGE("Document Line No.","Line No.");
        IF GSTCalculationBuffer.FINDSET THEN
          REPEAT
            IF GSTCalculationBuffer.Formula <> '' THEN BEGIN
              GSTCalcBaseAmount :=
                EvaluateExpressioninGSTFormula(
                  TRUE,GSTCalculationBuffer.Formula,GSTCalculationBuffer."Transaction Type",PurchaseHeader."Document Type",
                  PurchaseHeader."No.","Line No.",ItemChargeAssignmentPurch."Applies-to Doc. Type",
                  ItemChargeAssignmentPurch."Applies-to Doc. No.",ItemChargeAssignmentPurch."Applies-to Doc. Line No.");
              IF GSTCalculationBuffer."Include Base" THEN
                GSTCalcBaseAmount += GSTBaseAmount;
              CessComponent := TRUE;
            END ELSE BEGIN
              IF GSTCalculationBuffer."Include Base" THEN
                GSTCalcBaseAmount := GSTBaseAmount
              ELSE
                GSTCalcBaseAmount := 0;
            END;
            CalculatedAmount := GSTCalcBaseAmount * GSTCalculationBuffer."GST Component %" / 100;
            GSTAmount := RoundGSTAmount(CompCalcTypeWiseCalculation(GSTCalculationBuffer,FALSE,CalculatedAmount,0,'',''),CurrencyCode);
            IF GSTAmount <> 0 THEN
              InsertPurchChargeDetailedTaxEntryBuffer(
                PurchaseHeader,PurchaseLine,ItemChargeAssignmentPurch,GSTCalculationBuffer."Component Calc. Type",GSTCalcBaseAmount,
                GSTAmount,GSTCalculationBuffer."GST Component Code",GSTCalculationBuffer."GST Component %",CessComponent,
                CurrencyFactor);
            IF NOT Exempted THEN
              TotalGSTAmount := TotalGSTAmount + GSTAmount;
          UNTIL GSTCalculationBuffer.NEXT = 0;
        EXIT(TotalGSTAmount);
      END;
    END;

    PROCEDURE GetSaleItemChargeInputGSTCredit@1500015(SalesHeader@1500012 : Record 36;SalesLine@1500005 : Record 37;ItemChargeAssignmentSales@1500004 : Record 5809;GSTPerStateCode@1500003 : Code[10];GSTJurisdiction@1500002 : 'Intrastate,Interstate';CurrencyCode@1500000 : Code[10];CurrencyFactor@1500018 : Decimal;UnitPrice@1500006 : Decimal) : Decimal;
    VAR
      GSTComponent@1500015 : Record 16405;
      GSTSetup@1500013 : Record 16408;
      GSTCalculationBuffer@1500016 : Record 16421;
      TransactionType@1500011 : 'Purchase,Sales,Transfer,Service,Service Transfer,Production';
      GSTCalcBaseAmount@1500010 : Decimal;
      GSTAmount@1500009 : Decimal;
      TotalGSTAmount@1500008 : Decimal;
      CessComponent@1500017 : Boolean;
      GSTBaseAmount@1500001 : Decimal;
      CalculatedAmount@1500007 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        CALCFIELDS("Qty. to Assign");
        IF "Line Amount" <> 0 THEN
          IF "Qty. to Assign" <> 0 THEN
            GSTBaseAmount := ItemChargeAssignmentSales."Amount to Assign";
        GSTComponent.SETCURRENTKEY("Calculation Order");
        GSTComponent.SETRANGE("GST Jurisdiction Type",GSTJurisdiction);
        IF GSTComponent.FINDSET THEN
          REPEAT
            IF GetGSTSetup(GSTSetup,GSTPerStateCode,"GST Group Code",GSTComponent.Code,SalesHeader."Posting Date") <> '' THEN
              InsertGSTCalculationBuffer(
                GSTSetup,SalesHeader."Document Type",SalesHeader."No.","Line No.",TransactionType::Sales,UnitPrice,
                SalesHeader."Posting Date",CurrencyCode,CurrencyFactor);
          UNTIL GSTComponent.NEXT = 0;
        GSTCalculationBuffer.SETCURRENTKEY(
          "Transaction Type","Document Type","Document No.","Document Line No.","Calculation Order");
        GSTCalculationBuffer.SETRANGE("Transaction Type",TransactionType::Sales);
        GSTCalculationBuffer.SETRANGE("Document Type",SalesHeader."Document Type");
        GSTCalculationBuffer.SETRANGE("Document No.",SalesHeader."No.");
        GSTCalculationBuffer.SETRANGE("Document Line No.","Line No.");
        IF GSTCalculationBuffer.FINDSET THEN
          REPEAT
            IF GSTCalculationBuffer.Formula <> '' THEN BEGIN
              GSTCalcBaseAmount :=
                EvaluateExpressioninGSTFormula(
                  TRUE,GSTCalculationBuffer.Formula,GSTCalculationBuffer."Transaction Type",SalesHeader."Document Type",
                  SalesHeader."No.","Line No.",ItemChargeAssignmentSales."Applies-to Doc. Type",
                  ItemChargeAssignmentSales."Applies-to Doc. No.",ItemChargeAssignmentSales."Applies-to Doc. Line No.");
              IF GSTCalculationBuffer."Include Base" THEN
                GSTCalcBaseAmount += GSTBaseAmount;
              CessComponent := TRUE;
            END ELSE BEGIN
              IF GSTCalculationBuffer."Include Base" THEN
                GSTCalcBaseAmount := GSTBaseAmount
              ELSE
                GSTCalcBaseAmount := 0;
            END;
            CalculatedAmount := GSTCalcBaseAmount * GSTCalculationBuffer."GST Component %" / 100;
            GSTAmount := RoundGSTAmount(CompCalcTypeWiseCalculation(GSTCalculationBuffer,FALSE,CalculatedAmount,0,'',''),CurrencyCode);
            IF GSTAmount <> 0 THEN
              InsertSaleChargeDetailedTaxEntryBuffer(
                SalesHeader,SalesLine,ItemChargeAssignmentSales,GSTCalculationBuffer."Component Calc. Type",
                GSTCalcBaseAmount,GSTAmount,GSTCalculationBuffer."GST Component Code",
                GSTCalculationBuffer."GST Component %",CessComponent,CurrencyFactor);
            IF NOT Exempted THEN
              TotalGSTAmount := TotalGSTAmount + GSTAmount;
          UNTIL GSTCalculationBuffer.NEXT = 0;
        EXIT(TotalGSTAmount);
      END;
    END;

    PROCEDURE InsertPurchChargeDetailedTaxEntryBuffer@1500025(PurchaseHeader@1500010 : Record 38;PurchaseLine@1500000 : Record 39;ItemChargeAssignmentPurch@1500004 : Record 5805;ComponentCalcType@1500011 : Option;GSTBaseAmount@1500002 : Decimal;GSTAmount@1500003 : Decimal;ComponentCode@1500007 : Code[10];GSTComponentPercentage@1500008 : Decimal;CessComponent@1500012 : Boolean;CurrencyFactor@1500001 : Decimal);
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      NextEntryNo@1500006 : Integer;
      Sign@1500009 : Integer;
    BEGIN
      WITH PurchaseLine DO BEGIN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          Sign := 1
        ELSE
          Sign := -1;
        IF DetailedGSTEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedGSTEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;

        DetailedGSTEntryBuffer.INIT;
        DetailedGSTEntryBuffer."Entry No." := NextEntryNo;
        DetailedGSTEntryBuffer."Document Type" := "Document Type";
        DetailedGSTEntryBuffer."Document No." := "Document No.";
        DetailedGSTEntryBuffer."Document No." := "Document No.";
        DetailedGSTEntryBuffer."No." := ItemChargeAssignmentPurch."Item No.";
        DetailedGSTEntryBuffer."Line No." := ItemChargeAssignmentPurch."Document Line No.";
        DetailedGSTEntryBuffer."Transaction Type" := DetailedGSTEntryBuffer."Transaction Type"::Purchase;
        DetailedGSTEntryBuffer."Posting Date" := PurchaseHeader."Posting Date";
        DetailedGSTEntryBuffer.Type := DetailedGSTEntryBuffer.Type::Item;
        IF NOT "Capital Item" THEN
          DetailedGSTEntryBuffer."Product Type" := DetailedGSTEntryBuffer."Product Type"::Item
        ELSE
          DetailedGSTEntryBuffer."Product Type" := DetailedGSTEntryBuffer."Product Type"::"Capital Goods";
        DetailedGSTEntryBuffer."Source Type" := DetailedGSTEntryBuffer."Source Type"::Vendor;
        DetailedGSTEntryBuffer."Source No." := "Buy-from Vendor No.";
        DetailedGSTEntryBuffer."Location Code" := "Location Code";
        UpdatePurchaseGSTRegNo(DetailedGSTEntryBuffer,PurchaseHeader,PurchaseLine);
        DetailedGSTEntryBuffer."GST Component Code" := ComponentCode;
        DetailedGSTEntryBuffer."GST Group Code" := "GST Group Code";
        DetailedGSTEntryBuffer."HSN/SAC Code" := "HSN/SAC Code";
        DetailedGSTEntryBuffer."GST Group Type" := "GST Group Type";
        DetailedGSTEntryBuffer.Exempted := Exempted;
        DetailedGSTEntryBuffer."Input Service Distribution" := PurchaseHeader."GST Input Service Distribution";
        DetailedGSTEntryBuffer.Quantity := Sign * ItemChargeAssignmentPurch."Qty. to Assign";
        DetailedGSTEntryBuffer."GST %" := GSTComponentPercentage;
        DetailedGSTEntryBuffer."GST Base Amount" := Sign * GSTBaseAmount;
        DetailedGSTEntryBuffer."GST Amount" := Sign * GSTAmount;
        DetailedGSTEntryBuffer."GST Base Amount (LCY)" :=
          ConvertGSTBaseAmountToLCY("Currency Code",DetailedGSTEntryBuffer."GST Base Amount",
            CurrencyFactor,DetailedGSTEntryBuffer."Posting Date");
        DetailedGSTEntryBuffer."GST Amount (LCY)" :=
          ConvertGSTBaseAmountToLCY(
            "Currency Code",DetailedGSTEntryBuffer."GST Amount",
            CurrencyFactor,DetailedGSTEntryBuffer."Posting Date");
        DetailedGSTEntryBuffer."Item Charge Assgn. Doc. Type" := ItemChargeAssignmentPurch."Applies-to Doc. Type";
        DetailedGSTEntryBuffer."Item Charge Assgn Doc. No." := ItemChargeAssignmentPurch."Applies-to Doc. No.";
        DetailedGSTEntryBuffer."Item Charge Assgn. Line No." := ItemChargeAssignmentPurch."Applies-to Doc. Line No.";
        DetailedGSTEntryBuffer."Original Invoice No." := ItemChargeAssignmentPurch."Invoice Doc. No.";
        DetailedGSTEntryBuffer."Original Invoice Date" := ItemChargeAssignmentPurch."Invoice Doc. Date";
        IF (PurchaseHeader."GST Vendor Type" IN [PurchaseHeader."GST Vendor Type"::Composite,
                                                 PurchaseHeader."GST Vendor Type"::Exempted]) OR Exempted
        THEN BEGIN
          DetailedGSTEntryBuffer."GST %" := 0;
          DetailedGSTEntryBuffer."GST Amount" := 0;
          DetailedGSTEntryBuffer."GST Amount (LCY)" := 0
        END ELSE
          IF "GST Credit" = "GST Credit"::Availment THEN
            DetailedGSTEntryBuffer."GST Input/Output Credit Amount" := Sign * GSTAmount
          ELSE
            DetailedGSTEntryBuffer."Amount Loaded on Item" := Sign * GSTAmount;
        DetailedGSTEntryBuffer.Cess := CessComponent;
        DetailedGSTEntryBuffer."Component Calc. Type" := ComponentCalcType;
        DetailedGSTEntryBuffer.UOM := ItemChargeAssignmentPurch."Item UOM";
        DetailedGSTEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE InsertSaleChargeDetailedTaxEntryBuffer@1500019(SalesHeader@1500010 : Record 36;SalesLine@1500000 : Record 37;ItemChargeAssignmentSales@1500004 : Record 5809;CompCalcType@1500012 : Option;GSTBaseAmount@1500002 : Decimal;GSTAmount@1500003 : Decimal;ComponentCode@1500007 : Code[10];GSTComponentPercentage@1500008 : Decimal;CessComponent@1500011 : Boolean;CurrencyFactor@1500014 : Decimal);
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      Item@1500001 : Record 27;
      NextEntryNo@1500006 : Integer;
      Sign@1500009 : Integer;
    BEGIN
      WITH SalesLine DO BEGIN
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
          Sign := -1
        ELSE
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            Sign := 1;
        IF DetailedGSTEntryBuffer.FINDLAST THEN
          NextEntryNo := DetailedGSTEntryBuffer."Entry No." + 1
        ELSE
          NextEntryNo := 1;
        DetailedGSTEntryBuffer.INIT;
        DetailedGSTEntryBuffer."Document No." := "Document No.";
        DetailedGSTEntryBuffer."Line No." := ItemChargeAssignmentSales."Document Line No.";
        DetailedGSTEntryBuffer."Entry No." := NextEntryNo;
        DetailedGSTEntryBuffer."Document Type" := "Document Type";
        DetailedGSTEntryBuffer."Document No." := "Document No.";
        DetailedGSTEntryBuffer."Transaction Type" := DetailedGSTEntryBuffer."Transaction Type"::Sales;
        DetailedGSTEntryBuffer."Posting Date" := SalesHeader."Posting Date";
        DetailedGSTEntryBuffer.Type := DetailedGSTEntryBuffer.Type::Item;
        DetailedGSTEntryBuffer."No." := ItemChargeAssignmentSales."Item No.";
        IF DetailedGSTEntryBuffer.Type IN [DetailedGSTEntryBuffer.Type::Item,DetailedGSTEntryBuffer.Type::"Fixed Asset"] THEN
          IF Item.GET(DetailedGSTEntryBuffer."No.") AND (NOT Item."Capital Item") THEN
            DetailedGSTEntryBuffer."Product Type" := DetailedGSTEntryBuffer."Product Type"::Item
          ELSE
            DetailedGSTEntryBuffer."Product Type" := DetailedGSTEntryBuffer."Product Type"::"Capital Goods"
        ELSE
          DetailedGSTEntryBuffer."Product Type" := DetailedGSTEntryBuffer."Product Type"::" ";
        DetailedGSTEntryBuffer."Source Type" := DetailedGSTEntryBuffer."Source Type"::Customer;
        DetailedGSTEntryBuffer."Source No." := "Sell-to Customer No.";
        DetailedGSTEntryBuffer."Location Code" := "Location Code";
        UpdateSalesGSTRegNo(DetailedGSTEntryBuffer,SalesHeader,SalesLine);
        DetailedGSTEntryBuffer."GST Component Code" := ComponentCode;
        DetailedGSTEntryBuffer."GST Group Type" := "GST Group Type";
        DetailedGSTEntryBuffer.Exempted := Exempted;
        DetailedGSTEntryBuffer.Quantity := Sign * ItemChargeAssignmentSales."Qty. to Assign";
        DetailedGSTEntryBuffer."GST Group Code" := "GST Group Code";
        IF (SalesHeader."GST Customer Type" = SalesHeader."GST Customer Type"::Exempted) OR
           SalesHeader."GST Without Payment of Duty" OR Exempted
        THEN BEGIN
          GSTComponentPercentage := 0;
          GSTAmount := 0;
        END;
        DetailedGSTEntryBuffer."GST %" := GSTComponentPercentage;
        DetailedGSTEntryBuffer."HSN/SAC Code" := "HSN/SAC Code";
        DetailedGSTEntryBuffer."GST Base Amount" := Sign * GSTBaseAmount;
        DetailedGSTEntryBuffer."GST Amount" := Sign * GSTAmount;
        DetailedGSTEntryBuffer."GST Base Amount (LCY)" :=
          ConvertGSTBaseAmountToLCY(
            "Currency Code",DetailedGSTEntryBuffer."GST Base Amount",
            CurrencyFactor,DetailedGSTEntryBuffer."Posting Date");
        DetailedGSTEntryBuffer."GST Amount (LCY)" :=
          ConvertGSTBaseAmountToLCY(
            "Currency Code",DetailedGSTEntryBuffer."GST Amount",
            CurrencyFactor,DetailedGSTEntryBuffer."Posting Date");
        DetailedGSTEntryBuffer."GST Input/Output Credit Amount" := Sign * GSTAmount;
        DetailedGSTEntryBuffer."Item Charge Assgn. Doc. Type" := ItemChargeAssignmentSales."Applies-to Doc. Type";
        DetailedGSTEntryBuffer."Item Charge Assgn Doc. No." :=
          ItemChargeAssignmentSales."Applies-to Doc. No.";
        DetailedGSTEntryBuffer."Item Charge Assgn. Line No." :=
          ItemChargeAssignmentSales."Applies-to Doc. Line No.";
        DetailedGSTEntryBuffer."Original Invoice No." := ItemChargeAssignmentSales."Invoice Doc. No.";
        DetailedGSTEntryBuffer."Original Invoice Date" := ItemChargeAssignmentSales."Invoice Doc. Date";
        DetailedGSTEntryBuffer.Cess := CessComponent;
        DetailedGSTEntryBuffer."Component Calc. Type" := CompCalcType;
        DetailedGSTEntryBuffer.UOM := ItemChargeAssignmentSales."Item UOM";
        DetailedGSTEntryBuffer.INSERT;
      END;
    END;

    PROCEDURE VerifyChargesGSTDocAmountPurchase@1500017(ApplDocumentType@1500005 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Receipt,Transfer Receipt,Return Shipment,Sales Shipment,Return Receipt';ApplDocumentNo@1500004 : Code[20];ApplDocumentLineNo@1500003 : Integer);
    VAR
      PurchLine@1500010 : Record 39;
      PurchRcptLine@1500008 : Record 121;
      ReturnShptLine@1500007 : Record 6651;
      SalesShptLine@1500002 : Record 111;
      ReturnRcptLine@1500001 : Record 6661;
    BEGIN
      CASE ApplDocumentType OF
        ApplDocumentType::Order,ApplDocumentType::Invoice,ApplDocumentType::"Return Order",ApplDocumentType::"Credit Memo":
          BEGIN
            PurchLine.GET(ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
            IF PurchLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
        ApplDocumentType::Receipt:
          BEGIN
            PurchRcptLine.GET(ApplDocumentNo,ApplDocumentLineNo);
            IF PurchRcptLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
        ApplDocumentType::"Return Shipment":
          BEGIN
            ReturnShptLine.GET(ApplDocumentNo,ApplDocumentLineNo);
            IF ReturnShptLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
        ApplDocumentType::"Sales Shipment":
          BEGIN
            SalesShptLine.GET(ApplDocumentNo,ApplDocumentLineNo);
            IF SalesShptLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
        ApplDocumentType::"Return Receipt":
          BEGIN
            ReturnRcptLine.GET(ApplDocumentNo,ApplDocumentLineNo);
            IF ReturnRcptLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
      END;
    END;

    PROCEDURE VerifyChargesGSTDocAmountSale@1500018(ApplDocumentType@1500002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Shipment,Return Receipt';ApplDocumentNo@1500001 : Code[20];ApplDocumentLineNo@1500000 : Integer);
    VAR
      SalesLine@1500007 : Record 37;
      ReturnRcptLine@1500005 : Record 6661;
      SalesShptLine@1500004 : Record 111;
    BEGIN
      CASE ApplDocumentType OF
        ApplDocumentType::Order,ApplDocumentType::Invoice,ApplDocumentType::"Return Order",ApplDocumentType::"Credit Memo":
          BEGIN
            SalesLine.GET(ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
            IF SalesLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
        ApplDocumentType::"Return Receipt":
          BEGIN
            ReturnRcptLine.GET(ApplDocumentNo,ApplDocumentLineNo);
            IF ReturnRcptLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
        ApplDocumentType::Shipment:
          BEGIN
            SalesShptLine.GET(ApplDocumentNo,ApplDocumentLineNo);
            IF SalesShptLine."GST Base Amount" = 0 THEN
              ERROR(GSTChargeDocAmtErr,ApplDocumentType,ApplDocumentNo,ApplDocumentLineNo);
          END;
      END;
    END;

    PROCEDURE RoundGSTPrecision@1500304(GSTAmount@1500000 : Decimal) : Decimal;
    VAR
      GSTRoundingDirection@1500002 : Text[1];
      GSTRoundingPrecision@1500001 : Decimal;
    BEGIN
      GetGLSetup;
      CASE GeneralLedgerSetup."GST Rounding Type" OF
        GeneralLedgerSetup."GST Rounding Type"::Nearest:
          GSTRoundingDirection := '=';
        GeneralLedgerSetup."GST Rounding Type"::Up:
          GSTRoundingDirection := '>';
        GeneralLedgerSetup."GST Rounding Type"::Down:
          GSTRoundingDirection := '<';
      END;
      IF GeneralLedgerSetup."GST Rounding Precision" <> 0 THEN
        GSTRoundingPrecision := GeneralLedgerSetup."GST Rounding Precision"
      ELSE
        GSTRoundingPrecision := 0.01;
      EXIT(ROUND(GSTAmount,GSTRoundingPrecision,GSTRoundingDirection));
    END;

    LOCAL PROCEDURE GetGLSetup@1502107();
    BEGIN
      IF NOT GLSetupRead THEN
        GeneralLedgerSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE UpdateInvoiceType@1500100(VAR SalesHeader@1507890 : Record 36);
    BEGIN
      WITH SalesHeader DO
        CASE "GST Customer Type" OF
          "GST Customer Type"::" ","GST Customer Type"::Registered,"GST Customer Type"::Unregistered:
            "Invoice Type" := "Invoice Type"::Taxable;
          "GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
          "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit":
            "Invoice Type" := "Invoice Type"::Export;
          "GST Customer Type"::Exempted:
            "Invoice Type" := "Invoice Type"::"Bill of Supply";
        END;
    END;

    PROCEDURE CheckInvoiceType@1501200(SalesHeader@500000 : Record 36);
    BEGIN
      WITH SalesHeader DO
        CASE "GST Customer Type" OF
          "GST Customer Type"::" ","GST Customer Type"::Registered,"GST Customer Type"::Unregistered:
            IF "Invoice Type" IN ["Invoice Type"::"Bill of Supply","Invoice Type"::Export] THEN
              ERROR(InvoiceTypeErr,"Invoice Type","GST Customer Type");
          "GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
          "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit":
            IF "Invoice Type" IN ["Invoice Type"::"Bill of Supply","Invoice Type"::Taxable] THEN
              ERROR(InvoiceTypeErr,"Invoice Type","GST Customer Type");
          "GST Customer Type"::Exempted:
            IF "Invoice Type" IN ["Invoice Type"::"Debit Note","Invoice Type"::Export,"Invoice Type"::Taxable] THEN
              ERROR(InvoiceTypeErr,"Invoice Type","GST Customer Type");
        END;
    END;

    PROCEDURE CheckGSTStrucure@1500020(StructureCode@1500001 : Code[10]) : Boolean;
    VAR
      StructureDetails@1500000 : Record 13793;
    BEGIN
      WITH StructureDetails DO BEGIN
        SETRANGE(Code,StructureCode);
        SETRANGE(Type,Type::GST);
        EXIT(NOT ISEMPTY);
      END;
    END;

    PROCEDURE RoundGSTAmount@1500303(GSTAmount@1500003 : Decimal;CurrencyCode@1500000 : Code[10]) : Decimal;
    VAR
      GSTRoundingDirection@1500005 : Text[1];
      GSTRoundingPrecision@1500004 : Decimal;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        GeneralLedgerSetup.GET;
        CASE GeneralLedgerSetup."GST Rounding Type" OF
          GeneralLedgerSetup."GST Rounding Type"::Nearest:
            GSTRoundingDirection := '=';
          GeneralLedgerSetup."GST Rounding Type"::Up:
            GSTRoundingDirection := '>';
          GeneralLedgerSetup."GST Rounding Type"::Down:
            GSTRoundingDirection := '<';
        END;
        IF GeneralLedgerSetup."GST Rounding Precision" <> 0 THEN
          GSTRoundingPrecision := GeneralLedgerSetup."GST Rounding Precision"
        ELSE
          GSTRoundingPrecision := 0.01;
        EXIT(ROUND(GSTAmount ,GSTRoundingPrecision,GSTRoundingDirection));
      END;
      EXIT(GSTAmount);
    END;

    PROCEDURE GetGSTRcvblInterimAccountNo@1500310(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      EXIT(GSTPostingSetup.GetRecAccountInterim(GSTPostingSetup));
    END;

    PROCEDURE GetGSTRcvblInterimDistAccountNo@1500169(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      EXIT(GSTPostingSetup.GetRecAccountInterimDist(GSTPostingSetup));
    END;

    PROCEDURE InsertGSTLedgerEntryAdvPayment@1500430(GSTPostingBuffer@1500004 : Record 16420;GenJournalLine@1500006 : Record 81;NextTransactionNo@1500001 : Integer;CurrencyCode@1500003 : Code[10];CurrencyFactor@1500005 : Decimal) : Integer;
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
      GetTransactionNo@1500007 : Integer;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := GenJournalLine."Posting Date";
        "Document No." := GenJournalLine."Document No.";
        "Document Type" := GenJournalLine."Document Type";
        "GST Amount" := GSTPostingBuffer."GST Amount";
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "Currency Code" := CurrencyCode;
        "Currency Factor" := CurrencyFactor;
        IF GSTPostingBuffer."Transaction Type" = GSTPostingBuffer."Transaction Type"::Sales THEN BEGIN
          "Transaction Type" := "Transaction Type"::Sales;
          "Source Type" := "Source Type"::Customer;
        END ELSE
          IF GSTPostingBuffer."Transaction Type" = GSTPostingBuffer."Transaction Type"::Purchase THEN BEGIN
            "Transaction Type" := "Transaction Type"::Purchase;
            "Source Type" := "Source Type"::Vendor;
            "Reverse Charge" := TRUE;
            "Input Service Distribution" := GenJournalLine."GST Input Service Distribution";
          END;
        "GST on Advance Payment" := TRUE;
        "Payment Type" := "Payment Type"::Advance;
        "Source No." := GenJournalLine."Account No.";
        "User ID" := USERID;
        "Source Code" := GenJournalLine."Source Code";
        "Reason Code" := GenJournalLine."Reason Code";
        "Transaction No." := NextTransactionNo;
        GetTransactionNo := "Transaction No.";
        "External Document No." := GenJournalLine."External Document No.";
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        IF GenJournalLine."GST Customer Type" = GenJournalLine."GST Customer Type"::Exempted THEN
          "GST Amount" := 0;
        INSERT(TRUE);
      END;
      EXIT(GetTransactionNo);
    END;

    PROCEDURE GetGSTPayableInterimAccountNo@1500532(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      GSTPostingSetup.TESTFIELD("Payables Account (Interim)");
      EXIT(GSTPostingSetup."Payables Account (Interim)");
    END;

    PROCEDURE InsertDetailedGSTLedgEntryAdvPayment@1500534(GSTPostingBuffer@1500008 : Record 16420;DocumentNo@1500018 : Code[20];TemplateName@1500005 : Code[10];BatchName@1500014 : Code[10];LineNo@1500016 : Integer;GSTTransactionNo@1500004 : Integer;CurrencyCode@1500001 : Code[10];CurrencyFactor@1500000 : Decimal;LedgerEntryNo@1500022 : Integer);
    VAR
      DetailedGSTEntryBuffer@1500015 : Record 16412;
      DetailedGSTLedgerEntry@1500017 : Record 16419;
      Customer@1500003 : Record 18;
      Vendor@1500006 : Record 23;
      GenJournalLine@1500200 : Record 81;
      TransactionType@1500012 : 'Purchase,Sale';
      Sign@1500042 : Integer;
      OrgAdjusmentDocNo@1500025 : Code[20];
      OrgAdjusmentDocDate@1500026 : Date;
    BEGIN
      CASE GSTPostingBuffer."Transaction Type" OF
        GSTPostingBuffer."Transaction Type"::Purchase:
          BEGIN
            TransactionType := TransactionType::Purchase;
            Sign := 1;
          END;
        GSTPostingBuffer."Transaction Type"::Sales:
          BEGIN
            TransactionType := TransactionType::Sale;
            Sign := -1;
          END;
      END;
      IF GSTTransactionNo <> 0 THEN
        GetRefundAdjustmentDocument(TransactionType,DocumentNo,OrgAdjusmentDocNo,OrgAdjusmentDocDate);
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Journal Template Name","Journal Batch Name","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Journal Template Name",TemplateName);
      DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name",BatchName);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            INIT;
            "Entry No." := GetNextGSTDetailEntryNo;
            "Entry Type" := "Entry Type"::"Initial Entry";
            "Transaction No." := GSTTransactionNo;
            "Document Type" := "Document Type"::Payment;
            "Document No." := DocumentNo;
            "Posting Date" := DetailedGSTEntryBuffer."Posting Date";
            DetailedGSTEntryBuffer.TESTFIELD("Location Code");
            DetailedGSTEntryBuffer.TESTFIELD("Location  Reg. No.");
            DetailedGSTEntryBuffer.TESTFIELD("Location State Code");
            "Location State Code" := DetailedGSTEntryBuffer."Location State Code";
            "Location Code" := DetailedGSTEntryBuffer."Location Code";
            "Location  Reg. No." := DetailedGSTEntryBuffer."Location  Reg. No.";
            "GST Rounding Type" := DetailedGSTEntryBuffer."GST Rounding Type";
            "GST Rounding Precision" := DetailedGSTEntryBuffer."GST Rounding Precision";
            "Original Doc. No." := "Document No.";
            "Original Doc. Type" := "Document Type";
            "HSN/SAC Code" := DetailedGSTEntryBuffer."HSN/SAC Code";
            "GST Group Type" := DetailedGSTEntryBuffer."GST Group Type";
            "CLE/VLE Entry No." := LedgerEntryNo;
            "Buyer/Seller State Code" := DetailedGSTEntryBuffer."Buyer/Seller State Code";
            "Buyer/Seller Reg. No." := DetailedGSTEntryBuffer."Buyer/Seller Reg. No.";
            "Source No." := DetailedGSTEntryBuffer."Source No.";
            IF GenJournalLine.GET(TemplateName,BatchName,LineNo) THEN
              "GST Jurisdiction Type" := GenJournalLine."GST Jurisdiction Type";
            Positive := GSTPostingBuffer."Transaction Type" = GSTPostingBuffer."Transaction Type"::Purchase;
            "Liable to Pay" := TRUE;
            IF GSTPostingBuffer."Transaction Type" = GSTPostingBuffer."Transaction Type"::Sales THEN BEGIN
              "Transaction Type" := "Transaction Type"::Sales;
              "Source Type" := "Source Type"::Customer;
              "GST Place of Supply" := DetailedGSTEntryBuffer."GST Place of Supply";
              Customer.GET(DetailedGSTEntryBuffer."Source No.");
              IF Customer."GST Customer Type" = Customer."GST Customer Type"::Unregistered THEN
                "Nature of Supply" := "Nature of Supply"::B2C;
              "GST Customer Type" := Customer."GST Customer Type";
              "Shipping Address State Code" := DetailedGSTEntryBuffer."Shipping Address State Code";
              "G/L Account No." :=
                GetGSTAccountNo(
                  "Location State Code",DetailedGSTEntryBuffer."GST Component Code","Transaction Type"::Sales,0,0,FALSE,FALSE);
            END ELSE
              IF GSTPostingBuffer."Transaction Type" = GSTPostingBuffer."Transaction Type"::Purchase THEN BEGIN
                Vendor.GET(DetailedGSTEntryBuffer."Source No.");
                "Transaction Type" := "Transaction Type"::Purchase;
                "Reverse Charge" := TRUE;
                "Source Type" := "Source Type"::Vendor;
                "Associated Enterprises" := Vendor."Associated Enterprises";
                "Input Service Distribution" := DetailedGSTEntryBuffer."Input Service Distribution";
                "G/L Account No." :=
                  GetGSTAccountNo(
                    "Location State Code",DetailedGSTEntryBuffer."GST Component Code","Transaction Type"::Purchase,0,0,
                    DetailedGSTEntryBuffer."Input Service Distribution",FALSE);
              END;
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Group Code" := DetailedGSTEntryBuffer."GST Group Code";
            "Document Line No." := DetailedGSTEntryBuffer."Line No.";
            "GST Base Amount" := DetailedGSTEntryBuffer."GST Base Amount";
            "GST Amount" := DetailedGSTEntryBuffer."GST Amount";
            "GST %" := DetailedGSTEntryBuffer."GST %";
            "Currency Code" := CurrencyCode;
            "Currency Factor" := CurrencyFactor;
            Quantity := DetailedGSTEntryBuffer.Quantity * Sign;
            "User ID" := USERID;
            Cess := DetailedGSTEntryBuffer.Cess;
            "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
            "GST on Advance Payment" := TRUE;
            "Payment Type" := "Payment Type"::Advance;
            "GST Vendor Type" := Vendor."GST Vendor Type";
            TESTFIELD("HSN/SAC Code");
            IF Customer."GST Customer Type" = Customer."GST Customer Type"::Exempted THEN BEGIN
              "GST Amount" := 0;
              "GST %" := 0;
            END;
            "Original Adv. Pmt Doc. No." := OrgAdjusmentDocNo;
            "Original Adv. Pmt Doc. Date" := OrgAdjusmentDocDate;
            "Adv. Pmt. Adjustment" := OrgAdjusmentDocNo <> '';
            INSERT(TRUE);
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      DeleteGSTBufferAdvPayment(GenJournalLine,TransactionType);
    END;

    PROCEDURE SalesPostValidations@1500028(SalesHeader@1500000 : Record 36);
    VAR
      Location@1500002 : Record 14;
      DocTransactionType@1500001 : 'Purchase,Sale,Transfer,Service';
    BEGIN
      IF NOT (SalesHeader."Document Type" IN [SalesHeader."Document Type"::Quote,SalesHeader."Document Type"::"Blanket Order"]) THEN
        CheckGSTAccountingPeriod(SalesHeader."Posting Date");
      IF CheckGSTStrucure(SalesHeader.Structure) THEN BEGIN
        CompanyInformation.GET;
        CompanyInformation.TESTFIELD("GST Registration No.");
      END;
      Location.GET(SalesHeader."Location Code");
      IF Location."GST Input Service Distributor" THEN
        ERROR(InputServiceLocationErr,Location.Code);
      CheckGSTRegistrationNo(SalesHeader."Sell-to Customer No.",DocTransactionType::Sale);
      CheckHSNSACSales(SalesHeader);
      CheckSimilarGSTPlaceOfSupply(SalesHeader);
      CheckLocation(SalesHeader."Location Code");
      CheckECommerce(SalesHeader);
      IsPlaceofSupplyBlank(SalesHeader);
      IF SalesHeader."GST Customer Type" <> SalesHeader."GST Customer Type"::Exempted THEN
        CheckExemptedInvoiceTypeSales(SalesHeader);
    END;

    PROCEDURE PurchasePostValidations@1500030(PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
      DocTransactionType@1500002 : 'Purchase,Sale,Transfer,Service';
    BEGIN
      IF CheckGSTStrucure(PurchaseHeader.Structure) THEN BEGIN
        CompanyInformation.GET;
        CompanyInformation.TESTFIELD("GST Registration No.");
        CheckHSNSACPurchase(PurchaseHeader);
        IF PurchaseHeader."GST Input Service Distribution" THEN BEGIN
          IF PurchaseHeader."GST Vendor Type" <> PurchaseHeader."GST Vendor Type"::Registered THEN
            ERROR(VendorISDErr,PurchaseHeader."Location Code");
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          PurchaseLine.SETRANGE("GST Group Type",PurchaseLine."GST Group Type"::Goods);
          PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
          IF PurchaseLine.FINDFIRST THEN
            ERROR(TypeISDErr,PurchaseLine.Type,PurchaseLine.FIELDNAME("GST Group Type"),
              PurchaseLine."GST Group Type"::Service);
          PurchaseLine.SETRANGE("GST Group Type");
          PurchaseLine.SETRANGE(Type);
          PurchaseLine.SETRANGE(Type,PurchaseLine.Type::"Charge (Item)");
          IF NOT PurchaseLine.ISEMPTY THEN
            ERROR(ChargeItemErr);
        END;
        VerifyReverseChargeLines(PurchaseHeader);
        IF NOT (PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::Quote,
                                                   PurchaseHeader."Document Type"::"Blanket Order"])
        THEN
          CheckGSTAccountingPeriod(PurchaseHeader."Posting Date");
        CheckGSTRegistrationNo(PurchaseHeader."Buy-from Vendor No.",DocTransactionType::Purchase);
        CheckLocation(PurchaseHeader."Location Code");
        IF NOT (PurchaseHeader."GST Vendor Type" IN [PurchaseHeader."GST Vendor Type"::" ",
                                                     PurchaseHeader."GST Vendor Type"::Import,
                                                     PurchaseHeader."GST Vendor Type"::SEZ])
        THEN
          PurchaseHeader.TESTFIELD(State);
        VerifySimilarGSTGroupType(PurchaseHeader);
      END;
    END;

    PROCEDURE CheckSimilarGSTPlaceOfSupply@1500052(SalesHeader@1500004 : Record 36);
    VAR
      SalesLine@1500000 : Record 37;
      SalesLine1@1500001 : Record 37;
      PresentGSTRegNo@1500005 : Code[15];
      PreviousGSTRegNo@1500006 : Code[15];
    BEGIN
      WITH SalesLine DO BEGIN
        SETCURRENTKEY("Document Type","Document No.",Type,"No.");
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        SETFILTER("No.",'<>%1','');
        IF FINDSET THEN
          REPEAT
            PresentGSTRegNo := GetGSTRegistrationNum(SalesHeader,SalesLine);
            SalesLine1.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
            SalesLine1.SETRANGE("Document Type",SalesHeader."Document Type");
            SalesLine1.SETRANGE("Document No.",SalesHeader."No.");
            SalesLine1.SETFILTER(Type,'<>%1',SalesLine1.Type::" ");
            SalesLine1.SETFILTER("No.",'<>%1','');
            SalesLine1.SETFILTER("Line No.",'<>%1',"Line No.");
            SalesLine1.SETFILTER("GST Group Code",'<>%1','');
            SalesLine1.SETFILTER("GST Place of Supply",'<>%1',"GST Place of Supply");
            IF SalesLine1.FINDSET THEN
              REPEAT
                PreviousGSTRegNo := GetGSTRegistrationNum(SalesHeader,SalesLine1);
                IF (PreviousGSTRegNo <> PresentGSTRegNo) AND (PresentGSTRegNo <> '' )THEN
                  ERROR(
                    STRSUBSTNO(
                      GSTRegistrationValidationErr,SalesLine1."Document No.",
                      SalesLine1."Line No.",PreviousGSTRegNo,PresentGSTRegNo));
                IF "GST Jurisdiction Type" <> SalesLine1."GST Jurisdiction Type" THEN
                  ERROR(DiffJurisdictionTypeErr);
              UNTIL SalesLine1.NEXT = 0;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CheckLocation@1500032(LocationCode@1500000 : Code[10]);
    VAR
      Location@1500001 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      Location.TESTFIELD("State Code");
      Location.TESTFIELD("GST Registration No.");
    END;

    PROCEDURE RoundTotalGSTAmountQtyFactor@1500031(TransactionType@1500010 : 'Purchase,Sale,Transfer,Service';DocumentType@1500009 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500008 : Code[20];LineNo@1500007 : Integer;QtyFactor@1500004 : Decimal;CurrencyCode@1500002 : Code[10]) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      TotalGSTAmount@1500000 : Decimal;
      Sign@1500001 : Integer;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          IF DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0 THEN
            TotalGSTAmount += DetailedGSTEntryBuffer."Amount Loaded on Item" * QtyFactor
          ELSE
            IF DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0 THEN
              TotalGSTAmount += DetailedGSTEntryBuffer."GST Input/Output Credit Amount" * QtyFactor;
          IF CurrencyCode = '' THEN
            TotalGSTAmount := RoundGSTPrecision(TotalGSTAmount);
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      IF DocumentType IN [DocumentType::Order,DocumentType::Invoice,DocumentType::Quote,DocumentType::"Blanket Order"] THEN
        Sign := 1
      ELSE
        IF DocumentType IN [DocumentType::"Return Order",DocumentType::"Credit Memo"] THEN
          Sign := -1;
      IF TransactionType = TransactionType::Purchase THEN
        Sign := Sign * 1
      ELSE
        Sign := Sign * -1;
      EXIT(TotalGSTAmount * Sign);
    END;

    PROCEDURE GetGSTRegistrationNum@1500039(SalesHeader@1500005 : Record 36;SalesLine@1500000 : Record 37) : Code[15];
    VAR
      Customer@1500001 : Record 18;
      ShiptoAddress@1500004 : Record 222;
      PresentRegNo@1500003 : Code[15];
    BEGIN
      WITH SalesLine DO BEGIN
        TESTFIELD("GST Place of Supply");
        CASE "GST Place of Supply" OF
          "GST Place of Supply"::"Bill-to Address":
            IF Customer.GET("Bill-to Customer No.") THEN
              PresentRegNo := Customer."GST Registration No.";
          "GST Place of Supply"::"Location Address":
            BEGIN
              IF Customer.GET("Bill-to Customer No.") THEN
                PresentRegNo := Customer."GST Registration No.";
            END;
          "GST Place of Supply"::"Ship-to Address":
            BEGIN
              Customer.GET(SalesHeader."Bill-to Customer No.");
              IF NOT (Customer."GST Customer Type" = Customer."GST Customer Type"::Export) THEN
                SalesHeader.TESTFIELD("Ship-to Code" );
              ShiptoAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
              PresentRegNo := ShiptoAddress."GST Registration No.";
            END;
        END;
      END;
      EXIT(PresentRegNo);
    END;

    PROCEDURE GetReverseCharge@1500331(VendorNo@1500000 : Code[20]) : Boolean;
    VAR
      Vendor@1500001 : Record 23;
    BEGIN
      Vendor.GET(VendorNo);
      EXIT(Vendor."GST Vendor Type" IN [Vendor."GST Vendor Type"::Import,
                                        Vendor."GST Vendor Type"::Unregistered,
                                        Vendor."GST Vendor Type"::SEZ]);
    END;

    PROCEDURE OpenGSTLedger@1500333(FromEntry@1500000 : Integer;ToEntry@1500001 : Integer);
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
    BEGIN
      GSTLedgerEntry.SETRANGE("Entry No.",FromEntry,ToEntry);
      PAGE.RUN(0,GSTLedgerEntry);
    END;

    PROCEDURE OpenDetailedGSTLedger@1500034(FromEntry@1500001 : Integer;ToEntry@1500000 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500002 : Record 16419;
    BEGIN
      DetailedGSTLedgerEntry.SETRANGE("Entry No.",FromEntry,ToEntry);
      PAGE.RUN(0,DetailedGSTLedgerEntry);
    END;

    PROCEDURE CheckGSTRegistrationNo@1500033(VendCustNo@1500000 : Code[20];TransactionType@1500003 : 'Purchase,Sale,Transfer,Service');
    VAR
      Vendor@1500001 : Record 23;
      Customer@1500002 : Record 18;
    BEGIN
      CASE TransactionType OF
        TransactionType::Purchase:
          BEGIN
            Vendor.GET(VendCustNo);
            IF Vendor."GST Vendor Type" IN [Vendor."GST Vendor Type"::Registered,Vendor."GST Vendor Type"::Composite] THEN
              Vendor.TESTFIELD("GST Registration No.");
          END;
        TransactionType::Sale,TransactionType::Service:
          BEGIN
            Customer.GET(VendCustNo);
            IF Customer."GST Customer Type" = Customer."GST Customer Type"::Registered THEN
              Customer.TESTFIELD("GST Registration No.");
          END;
      END;
    END;

    PROCEDURE DeleteDeatiledGSTEntryBuffer@1500433(DocumentType@1500001 : Option;DocNo@1500002 : Code[20]);
    VAR
      DetailedGSTEntryBuffer@1500000 : Record 16412;
    BEGIN
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocNo);
      IF DetailedGSTEntryBuffer.FINDFIRST THEN
        DetailedGSTEntryBuffer.DELETEALL(TRUE);
    END;

    PROCEDURE IsGSTApplicable@1500038(StructureCode@1500000 : Code[10]) : Boolean;
    BEGIN
      IF StructureCode = '' THEN
        EXIT(FALSE);
      CompanyInformation.GET;
      IF NOT CheckGSTStrucure(StructureCode) THEN
        EXIT(FALSE);
      CompanyInformation.TESTFIELD("GST Registration No.");
      EXIT(CompanyInformation."GST Registration No." <> '');
    END;

    PROCEDURE InsertGSTLedgerEntryTransition@1500501(GenJnlLine@1500004 : Record 81;NextTransactionNo@1500001 : Integer;SourceCode@1500010 : Code[10]);
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
        "Posting Date" := GenJnlLine."Posting Date";
        "Document No." := GenJnlLine."Document No.";
        "Document Type" := "Document Type"::" ";
        "GST Amount" :=
          ConvertGSTAmountToLCY(GenJnlLine."Currency Code",GenJnlLine.Amount,GenJnlLine."Currency Factor","Posting Date");
        "User ID" := USERID;
        "Source Code" := SourceCode;
        "Reason Code" := GenJnlLine."Reason Code";
        "Transaction No." := NextTransactionNo;
        "External Document No." := GenJnlLine."External Document No.";
        "GST Component Code" := GenJnlLine."GST Component Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertDetailedGSTLedgerEntryTransition@1500502(GenJnlLine@1500001 : Record 81;TransactionNo@1500003 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      Location@1500002 : Record 14;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTDetailEntryNo;
        "Entry Type" := "Entry Type"::"Initial Entry";
        "Document Type" := "Document Type"::" ";
        Type := Type::"G/L Account";
        "No." := GenJnlLine."Account No.";
        "Transaction No." := TransactionNo;
        "Document No." := GenJnlLine."Document No.";
        "Document Line No." := GenJnlLine."Line No.";
        "Posting Date" := GenJnlLine."Posting Date";
        "External Document No." := GenJnlLine."External Document No.";
        "HSN/SAC Code" := GenJnlLine."HSN/SAC Code";
        "GST Amount" :=
          ConvertGSTAmountToLCY(
            GenJnlLine."Currency Code",GenJnlLine.Amount,GenJnlLine."Currency Factor","Posting Date");
        "Currency Code" := GenJnlLine."Currency Code";
        "Currency Factor" := GenJnlLine."Currency Factor";
        "GST Rounding Precision" := GenJnlLine."GST Rounding Precision";
        "GST Rounding Type" := GenJnlLine."GST Rounding Type";
        Positive := TRUE;
        Opening := TRUE;
        "Credit Availed" := TRUE;
        "User ID" := USERID;
        "Location Code" := GenJnlLine."Location Code";
        Quantity := 1;
        Location.GET("Location Code");
        "Location State Code" := Location."State Code";
        "Location  Reg. No." := Location."GST Registration No.";
        "GST Component Code" := GenJnlLine."GST Component Code";
        "G/L Account No." := GenJnlLine."Account No.";
        "GST Group Type" := GenJnlLine."GST Group Type";
        "GST Group Code" := GenJnlLine."GST Group Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE GSTApplicableOnTransfer@1500101(TransferHeader@1500000 : Record 5740) : Boolean;
    BEGIN
      WITH TransferHeader DO
        IF CheckGSTStrucure(Structure) THEN BEGIN
          CompanyInformation.GET;
          CompanyInformation.TESTFIELD("GST Registration No.");
          CheckGSTAccountingPeriod("Posting Date");
          CheckLocation("Transfer-from Code");
          CheckLocation("Transfer-to Code");
          CheckHSNSACTransfer(TransferHeader);
          EXIT(CheckFromAndToGSTRegistrationNo("Transfer-from Code","Transfer-to Code"));
        END;
    END;

    LOCAL PROCEDURE CheckFromAndToGSTRegistrationNo@1500103(FromLocation@1500000 : Code[10];ToLocation@1500001 : Code[10]) : Boolean;
    VAR
      Location@1500004 : Record 14;
      FromLocationRegNo@1500002 : Code[15];
      ToLocationRegNo@1500003 : Code[15];
    BEGIN
      Location.GET(FromLocation);
      FromLocationRegNo := Location."GST Registration No.";
      Location.GET(ToLocation);
      ToLocationRegNo := Location."GST Registration No.";
      EXIT(FromLocationRegNo <> ToLocationRegNo);
    END;

    LOCAL PROCEDURE InsertDetailLedgerBufferTransfer@1500104(VAR DetailedGSTEntryBuffer@1500000 : Record 16412;DocumentNo@1500003 : Code[20];LineNo@1500004 : Integer;GSTBaseAmount@1500007 : Decimal;GSTAmount@1500001 : Decimal;GSTPercentage@1500008 : Decimal;Sign@1500002 : Integer);
    VAR
      TransferHeader@1500005 : Record 5740;
      TransferLine@1500006 : Record 5741;
    BEGIN
      GeneralLedgerSetup.GET;
      TransferHeader.GET(DocumentNo);
      IF TransferLine.GET(TransferHeader."No.",LineNo) THEN
        WITH DetailedGSTEntryBuffer DO BEGIN
          "Document Type" := "Document Type"::Quote;
          "Document No." := TransferHeader."No.";
          "Posting Date" := TransferHeader."Posting Date";
          Type := Type::Item;
          "No." := TransferLine."Item No.";
          "Source No." := '';
          Quantity := TransferLine.Quantity * Sign;
          "HSN/SAC Code" := TransferLine."HSN/SAC Code";
          Exempted := TransferLine.Exempted;
          "Location Code" := TransferHeader."Transfer-from Code";
          "Line No." := TransferLine."Line No.";
          "Source Type" := "Source Type"::" ";
          "GST Input/Output Credit Amount" := Sign * GSTAmount;
          IF TransferLine.Exempted THEN BEGIN
            GSTPercentage := 0;
            GSTAmount := 0;
          END;
          "GST Base Amount" := Sign * GSTBaseAmount;
          "GST %" := GSTPercentage;
          "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
          "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
          "Currency Factor" := 1;
          "GST Amount" := Sign * GSTAmount;
          IF TransferLine."GST Credit" = TransferLine."GST Credit"::"Non-Availment" THEN
            "Amount Loaded on Item" := Sign * GSTAmount
          ELSE
            "GST Input/Output Credit Amount" := Sign * GSTAmount;
        END;
    END;

    PROCEDURE InsertDetailedGSTLedgEntryTransfer@1500105(TransferLine@1500000 : Record 5741;TransferHeader@1500004 : Record 5740;DocumentNo@1500001 : Code[20];DocumentType@1500012 : Option;TransactionNo@1500005 : Integer;DocTransferType@1500014 : 'TransferShpmnt,TransferReciept');
    VAR
      DetailedGSTEntryBuffer@1500015 : Record 16412;
      DetailedGSTLedgerEntry@1500017 : Record 16419;
      Location@1500006 : Record 14;
      Location1@1500008 : Record 14;
      SourceType@1500010 : 'Vendor,Customer';
      GSTJurisdiction@1500011 : Option;
      ShipRcvQuantity@1500016 : Decimal;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Transfer);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",0);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",TransferLine."Document No.");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",TransferLine."Line No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            INIT;
            "Entry No." := GetNextGSTDetailEntryNo;
            "Entry Type" := "Entry Type"::"Initial Entry";
            IF DocTransferType = DocTransferType::TransferShpmnt THEN
              "Transaction Type" := "Transaction Type"::Sales
            ELSE
              "Transaction Type" := "Transaction Type"::Purchase;
            "Document Type" := DocumentType;
            "Document No." := DocumentNo;
            "Original Doc. No." := TransferHeader."No.";
            "Posting Date" := TransferHeader."Posting Date";
            Type := Type::Item;
            "No." := TransferLine."Item No.";
            Location.GET(TransferHeader."Transfer-from Code");
            Location.TESTFIELD("State Code");
            Location.TESTFIELD("GST Registration No.");
            Location1.GET(TransferHeader."Transfer-to Code");
            Location1.TESTFIELD("State Code");
            Location1.TESTFIELD("GST Registration No.");
            "Location Code" := Location.Code;
            GetGSTConfiguration(SourceType::Customer,Location."State Code",Location1."State Code",GSTJurisdiction);
            "GST Jurisdiction Type" := GSTJurisdiction;
            "GST Group Type" := "GST Group Type"::Goods;
            "GST Without Payment of Duty" := FALSE;
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Exempted Goods" := TransferLine.Exempted;
            IF DocTransferType = DocTransferType::TransferShpmnt THEN BEGIN
              "G/L Account No." := GetGSTPayableAccountNo(Location."State Code",DetailedGSTEntryBuffer."GST Component Code");
              ShipRcvQuantity := TransferLine."Qty. to Ship (Base)";
              "Location State Code" := Location."State Code";
              "Buyer/Seller State Code" := Location1."State Code";
              "Shipping Address State Code" := '';
              "Location  Reg. No." := Location."GST Registration No.";
              "Buyer/Seller Reg. No." := Location1."GST Registration No.";
              "Original Doc. Type" := "Original Doc. Type"::"Transfer Shipment";
              "External Document No." := TransferHeader."No.";
              "GST Customer Type" := "GST Customer Type"::Registered;
              "Sales Invoice Type" := "Sales Invoice Type"::Taxable;
              "Liable to Pay" := TRUE;
            END ELSE BEGIN
              "G/L Account No." := GetGSTReceivableAccountNo(Location1."State Code",DetailedGSTEntryBuffer."GST Component Code");
              ShipRcvQuantity := TransferLine."Qty. to Receive (Base)";
              "Location State Code" := Location1."State Code";
              "Buyer/Seller State Code" := Location."State Code";
              "Shipping Address State Code" := '';
              "Location  Reg. No." := Location1."GST Registration No.";
              "Buyer/Seller Reg. No." := Location."GST Registration No.";
              "Original Doc. Type" := "Original Doc. Type"::"Transfer Receipt";
              "External Document No." := TransferHeader."Last Shipment No.";
              "GST Vendor Type" := "GST Vendor Type"::Registered;
              "Credit Availed" := GetReceivableApplicable("GST Vendor Type","GST Group Type","GST Credit"::Availment,FALSE,FALSE);
            END;
            UpdateDetailGSTLedgerEntryTransfer(
              DetailedGSTLedgerEntry,TransferLine."Document No.",TransferLine."Line No.",TransactionNo,
              TransferLine."Quantity (Base)",ShipRcvQuantity,DocTransferType);
            TESTFIELD("HSN/SAC Code");
            INSERT(TRUE);
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
    END;

    PROCEDURE InsertGSTLedgerEntryTransfer@1500106(GSTPostingBuffer@1500004 : Record 16420;TransferHeader@1500009 : Record 5740;NextTransactionNo@1500001 : Integer;DocumentType@1500007 : Option;DocumentNo@1500008 : Code[20];SourceCode@1500010 : Code[10];DocTransferType@1500003 : 'TransferShpmnt,TransferReciept');
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := TransferHeader."Posting Date";
        "Document No." := DocumentNo;
        "Document Type" := DocumentType;
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "GST Amount" := GSTPostingBuffer."GST Amount";
        IF DocTransferType = DocTransferType::TransferShpmnt THEN BEGIN
          "Transaction Type" := "Transaction Type"::Sales;
          "External Document No." := TransferHeader."No.";
        END ELSE BEGIN
          "Transaction Type" := "Transaction Type"::Purchase;
          "External Document No." := TransferHeader."Last Shipment No.";
        END;
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "User ID" := USERID;
        "Source Type" := "Source Type"::Transfer;
        "Source Code" := SourceCode;
        "Transaction No." := NextTransactionNo;
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE UpdateDetailGSTLedgerEntryTransfer@1500107(VAR DetailedGSTLedgerEntry@1500000 : Record 16419;DocumentNo@1500002 : Code[20];LineNo@1500003 : Integer;TransactionNo@1500008 : Integer;QtyBase@1500001 : Decimal;QtyShip@1500004 : Decimal;DocTransferType@1500007 : 'TransferShpmnt,TransferReciept');
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Transfer);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DetailedGSTEntryBuffer."Document Type"::Quote);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      DetailedGSTEntryBuffer.SETRANGE("GST Component Code",DetailedGSTLedgerEntry."GST Component Code");
      IF DetailedGSTEntryBuffer.FINDFIRST THEN
        WITH DetailedGSTLedgerEntry DO BEGIN
          Type := DetailedGSTEntryBuffer.Type;
          "No." := DetailedGSTEntryBuffer."No.";
          "Product Type" := DetailedGSTEntryBuffer."Product Type";
          "Source No." := DetailedGSTEntryBuffer."Source No.";
          "HSN/SAC Code" := DetailedGSTEntryBuffer."HSN/SAC Code";
          "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
          "GST Group Code" := DetailedGSTEntryBuffer."GST Group Code";
          "Document Line No." := DetailedGSTEntryBuffer."Line No.";
          "GST Base Amount" := RoundGSTPrecision(DetailedGSTEntryBuffer."GST Base Amount" * QtyShip / QtyBase);
          "GST Amount" := RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount" * QtyShip / QtyBase);
          "GST %" := DetailedGSTEntryBuffer."GST %";
          Quantity := QtyShip;
          IF DocTransferType = DocTransferType::TransferReciept THEN
            "Amount Loaded on Item" :=
              RoundGSTPrecision(
                DetailedGSTEntryBuffer."Amount Loaded on Item" * QtyShip / QtyBase)
          ELSE
            "Amount Loaded on Item" := 0;
          IF DocTransferType = DocTransferType::TransferReciept THEN
            IF "Amount Loaded on Item" <> 0 THEN
              "GST Credit" := "GST Credit"::"Non-Availment"
            ELSE
              "GST Credit" := "GST Credit"::Availment;
          IF DocTransferType = DocTransferType::TransferReciept THEN
            ReverseDetailedGSTEntryQtyAmt(DetailedGSTLedgerEntry);
          "GST Rounding Type" := DetailedGSTEntryBuffer."GST Rounding Type";
          "GST Rounding Precision" := DetailedGSTEntryBuffer."GST Rounding Precision";
          Positive := "GST Amount" > 0;
          "User ID" := USERID;
          "Transaction No." := TransactionNo;
          Cess := DetailedGSTEntryBuffer.Cess;
          "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
          "Cess Amount Per Unit Factor" := DetailedGSTEntryBuffer."Cess Amt Per Unit Factor (LCY)";
          "Cess UOM" := DetailedGSTEntryBuffer."Cess UOM";
          "Cess Factor Quantity" := DetailedGSTEntryBuffer."Cess Factor Quantity";
          UOM := DetailedGSTEntryBuffer.UOM;
        END;
    END;

    LOCAL PROCEDURE ReverseDetailedGSTEntryQtyAmt@1500108(VAR DetailedGSTLedgerEntry@1500000 : Record 16419);
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        "GST Base Amount" := -"GST Base Amount";
        "GST Amount" := -"GST Amount";
        "Amount Loaded on Item" := -"Amount Loaded on Item";
      END;
    END;

    PROCEDURE GetGSTReceivableAccountNo@1500109(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      EXIT(GSTPostingSetup.GetRecAccount(GSTPostingSetup))
    END;

    PROCEDURE GetGSTReceivableDistAccountNo@1500170(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      EXIT(GSTPostingSetup.GetRecAccountDist(GSTPostingSetup))
    END;

    LOCAL PROCEDURE CheckECommerce@1500046(SalesHeader@1500000 : Record 36);
    BEGIN
      IF SalesHeader."e-Commerce Customer" <> '' THEN
        SalesHeader.TESTFIELD("e-Commerce Merchant Id");
    END;

    PROCEDURE GetGSTPayableImportAccountNo@1500050() : Code[20];
    VAR
      GeneralLedgerSetup@1500003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("IGST Payable A/c (Import)");
      EXIT(GeneralLedgerSetup."IGST Payable A/c (Import)");
    END;

    PROCEDURE CheckInvoiceTypeService@1500042(ServiceHeader@500000 : Record 5900);
    BEGIN
      WITH ServiceHeader DO
        CASE "GST Customer Type" OF
          "GST Customer Type"::" ","GST Customer Type"::Registered,"GST Customer Type"::Unregistered:
            IF "Invoice Type" IN ["Invoice Type"::"Bill of Supply","Invoice Type"::Export] THEN
              ERROR(InvoiceTypeErr,"Invoice Type","GST Customer Type");
          "GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
          "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit":
            IF "Invoice Type" IN ["Invoice Type"::"Bill of Supply","Invoice Type"::Taxable] THEN
              ERROR(InvoiceTypeErr,"Invoice Type","GST Customer Type");
          "GST Customer Type"::Exempted:
            IF "Invoice Type" IN ["Invoice Type"::"Debit Note","Invoice Type"::Export,"Invoice Type"::Taxable] THEN
              ERROR(InvoiceTypeErr,"Invoice Type","GST Customer Type");
        END;
    END;

    PROCEDURE UpdateInvoiceTypeService@1500043(VAR ServiceHeader@500000 : Record 5900);
    BEGIN
      WITH ServiceHeader DO
        CASE "GST Customer Type" OF
          "GST Customer Type"::" ","GST Customer Type"::Registered,"GST Customer Type"::Unregistered:
            "Invoice Type" := "Invoice Type"::Taxable;
          "GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
          "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit":
            "Invoice Type" := "Invoice Type"::Export;
          "GST Customer Type"::Exempted:
            "Invoice Type" := "Invoice Type"::"Bill of Supply";
        END;
    END;

    LOCAL PROCEDURE InsertDetailLedgerBufferService@1500045(VAR DetailedGSTEntryBuffer@1500002 : Record 16412;DocumentType@1500007 : 'Quote,Order,Invoice,Credit Memo';DocumentNo@1500003 : Code[20];LineNo@1500004 : Integer;GSTBaseAmount@1500008 : Decimal;GSTAmount@1500001 : Decimal;GSTPercentage@1500009 : Decimal;Sign@1500000 : Integer;CurrencyCode@1500012 : Code[10];CurrencyFactor@1500011 : Decimal);
    VAR
      ServiceHeader@1500005 : Record 5900;
      ServiceLine@1500006 : Record 5902;
      ServiceCost@1500010 : Record 5905;
      ServiceInvoiceHeader@1500020 : Record 5992;
    BEGIN
      ServiceHeader.GET(DocumentType,DocumentNo);
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.SETRANGE("Line No.",LineNo);
      IF ServiceLine.FINDFIRST THEN
        WITH DetailedGSTEntryBuffer DO BEGIN
          "Document Type" := DocumentType;
          "Document No." := DocumentNo;
          "Posting Date" := ServiceHeader."Posting Date";
          CASE ServiceLine.Type OF
            ServiceLine.Type::Cost,ServiceLine.Type::"G/L Account":
              Type := Type::"G/L Account";
            ServiceLine.Type::Item:
              Type := Type::Item;
            ServiceLine.Type::Resource:
              Type := Type::Resource;
          END;
          IF ServiceLine.Type IN [ServiceLine.Type::"G/L Account",ServiceLine.Type::Item,ServiceLine.Type::Resource] THEN
            "No." := ServiceLine."No.";
          IF ServiceLine.Type = ServiceLine.Type::Cost THEN BEGIN
            ServiceCost.GET(ServiceLine."No.");
            "No." := ServiceCost."Account No.";
          END;
          "Source No." := ServiceHeader."Customer No.";
          Quantity := ServiceLine.Quantity * Sign;
          "HSN/SAC Code" := ServiceLine."HSN/SAC Code";
          "Location Code" := ServiceLine."Location Code";
          "Line No." := ServiceLine."Line No.";
          "Source Type" := "Source Type"::Customer;
          "Invoice Type" := ServiceHeader."Invoice Type";
          Exempted := ServiceLine.Exempted;
          IF ServiceHeader."Document Type" = ServiceHeader."Document Type"::"Credit Memo" THEN
            IF ServiceHeader."Applies-to Doc. No." <> '' THEN BEGIN
              "Original Invoice No." := ServiceHeader."Applies-to Doc. No.";
              ServiceInvoiceHeader.GET(ServiceHeader."Applies-to Doc. No.");
              "Original Invoice Date" := ServiceInvoiceHeader."Posting Date";
            END;
          UpdateServiceGSTRegNo(DetailedGSTEntryBuffer,ServiceHeader,ServiceLine);
          IF ServiceHeader."GST Without Payment of Duty" OR
             (ServiceHeader."GST Customer Type" = ServiceHeader."GST Customer Type"::Exempted) OR ServiceLine.Exempted
          THEN BEGIN
            GSTPercentage := 0;
            GSTAmount := 0;
          END;
          "GST Input/Output Credit Amount" := GSTAmount;
          "GST Base Amount" := GSTBaseAmount * Sign;
          "GST Amount" := GSTAmount * Sign;
          "GST Base Amount (LCY)" := ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Base Amount",CurrencyFactor,"Posting Date");
          "GST Amount (LCY)" := ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Amount",CurrencyFactor,"Posting Date") ;
          "GST %" := GSTPercentage;
        END;
    END;

    PROCEDURE CheckSimilarGSTPlaceOfSupplyServ@1500047(ServiceHeader@1500004 : Record 5900);
    VAR
      ServiceLine@1500000 : Record 5902;
      ServiceLine1@1500001 : Record 5902;
      PresentGSTRegNo@1500005 : Code[15];
      PreviousGSTRegNo@1500006 : Code[15];
    BEGIN
      ServiceLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::" ");
      ServiceLine.SETFILTER("No.",'<>%1','');
      ServiceLine.SETFILTER("GST Group Code",'<>%1','');
      IF ServiceLine.FINDSET THEN BEGIN
        REPEAT
          PresentGSTRegNo := GetGSTRegistrationNumServ(ServiceHeader,ServiceLine);
          ServiceLine1.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
          ServiceLine1.SETRANGE("Document Type",ServiceHeader."Document Type");
          ServiceLine1.SETRANGE("Document No.",ServiceHeader."No.");
          ServiceLine1.SETFILTER(Type,'<>%1',ServiceLine1.Type::" ");
          ServiceLine1.SETFILTER("No.",'<>%1','');
          ServiceLine1.SETFILTER("Line No.",'<>%1',ServiceLine."Line No.");
          ServiceLine1.SETFILTER("GST Group Code",'<>%1','');
          ServiceLine1.SETFILTER("GST Place Of Supply",'<>%1',ServiceLine."GST Place Of Supply");
          IF ServiceLine1.FINDFIRST THEN BEGIN
            PreviousGSTRegNo := GetGSTRegistrationNumServ(ServiceHeader,ServiceLine1);
            IF (PreviousGSTRegNo <> PresentGSTRegNo) AND (PresentGSTRegNo <> '' )THEN
              ERROR(
                STRSUBSTNO(
                  GSTRegistrationValidationErr,ServiceLine1."Document No.",
                  ServiceLine1."Line No.",PreviousGSTRegNo,PresentGSTRegNo));
          END;
        UNTIL ServiceLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetGSTRegistrationNumServ@1500048(ServiceHeader@1500005 : Record 5900;ServiceLine@1500000 : Record 5902) : Code[15];
    VAR
      Customer@1500001 : Record 18;
      Location@1500006 : Record 14;
      ShiptoAddress@1500004 : Record 222;
      ServiceMgtSetup@1500002 : Record 5911;
      PresentRegNo@1500003 : Code[15];
    BEGIN
      WITH ServiceLine DO
        CASE "GST Place Of Supply" OF
          "GST Place Of Supply"::"Bill-to Address":
            BEGIN
              Customer.GET("Customer No.");
              PresentRegNo := Customer."GST Registration No.";
            END;
          "GST Place Of Supply"::"Ship-to Address":
            BEGIN
              Customer.GET("Customer No.");
              IF NOT (ServiceHeader."GST Customer Type" = ServiceHeader."GST Customer Type"::Export) THEN
                ServiceHeader.TESTFIELD("Ship-to Code");
              ShiptoAddress.GET("Customer No.",ServiceHeader."Ship-to Code");
              PresentRegNo := ShiptoAddress."GST Registration No.";
            END;
          "GST Place Of Supply"::" ":
            BEGIN
              ServiceMgtSetup.GET;
              CASE ServiceMgtSetup."GST Dependency Type" OF
                ServiceMgtSetup."GST Dependency Type"::"Bill-to Address":
                  BEGIN
                    Customer.GET("Customer No.");
                    PresentRegNo := Customer."GST Registration No.";
                  END;
                ServiceMgtSetup."GST Dependency Type"::"Ship-to Address":
                  BEGIN
                    Customer.GET(ServiceHeader."Customer No.");
                    IF NOT (ServiceHeader."GST Customer Type" = ServiceHeader."GST Customer Type"::Export) THEN
                      ServiceHeader.TESTFIELD("Ship-to Code");
                    IF ShiptoAddress.GET("Customer No.",ServiceHeader."Ship-to Code") THEN
                      PresentRegNo := ShiptoAddress."GST Registration No.";
                  END;
              END;
            END;
          "GST Place Of Supply"::"Location Address":
            BEGIN
              Location.GET("Location Code");
              PresentRegNo := Location."GST Registration No.";
            END;
        END;
      EXIT(PresentRegNo);
    END;

    PROCEDURE CheckSimilarLocationServ@1500049(ServiceHeader@1500000 : Record 5900);
    VAR
      ServiceLine@1500001 : Record 5902;
    BEGIN
      ServiceLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::" ");
      ServiceLine.SETFILTER("No.",'<>%1','');
      ServiceLine.SETFILTER("GST Group Code",'<>%1','');
      IF ServiceLine.FINDSET THEN
        REPEAT
          ServiceLine.TESTFIELD("Location Code",ServiceHeader."Location Code");
        UNTIL ServiceLine.NEXT = 0;
    END;

    PROCEDURE ServicePostValidations@1500056(ServiceHeader@1500000 : Record 5900);
    VAR
      Location@1500002 : Record 14;
      DocTransactionType@1500001 : 'Purchase,Sale,Transfer,Service';
    BEGIN
      Location.GET(ServiceHeader."Location Code");
      IF Location."GST Input Service Distributor" THEN
        ERROR(InputServiceLocationErr,Location.Code);
      CheckGSTAccountingPeriod(ServiceHeader."Posting Date");
      CheckGSTRegistrationNo(ServiceHeader."Customer No.",DocTransactionType::Service);
      CheckServiceLineInvoiceType(ServiceHeader);
      CheckHSNSACService(ServiceHeader);
      CheckSimilarGSTPlaceOfSupplyServ(ServiceHeader);
      CheckSimilarLocationServ(ServiceHeader);
      IF ServiceHeader."GST Customer Type" <> ServiceHeader."GST Customer Type"::Exempted THEN
        CheckExemptedInvoiceTypeService(ServiceHeader);
    END;

    PROCEDURE InsertGSTLedgerEntryService@1500057(GSTPostingBuffer@1500004 : Record 16420;ServiceHeader@1500009 : Record 5900;NextTransactionNo@1500001 : Integer;DocumentType@1500007 : Option;DocumentNo@1500008 : Code[20];CurrencyCode@1500003 : Code[10];CurrencyFactor@1500005 : Decimal;SourceCode@1500010 : Code[10]);
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := ServiceHeader."Posting Date";
        "Document No." := DocumentNo;
        "Document Type" := DocumentType;
        "GST Amount" := GSTPostingBuffer."GST Amount";
        "Currency Code" := CurrencyCode;
        "Currency Factor" := CurrencyFactor;
        "Transaction Type" := "Transaction Type"::Sales;
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "Source Type" := "Source Type"::Customer;
        "Source No." := ServiceHeader."Customer No.";
        "User ID" := USERID;
        "Source Code" := SourceCode;
        "Reason Code" := ServiceHeader."Reason Code";
        "Transaction No." := NextTransactionNo;
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE InsertDetailedGSTLedgEntryService@1500053(ServiceLine@1500000 : Record 5902;ServiceHeader@1500004 : Record 5900;DocumentNo@1500001 : Code[20];DocumentType@1500012 : Option;QtyFactor@1500002 : Decimal;TransactionNo@1500005 : Integer;CurrencyCode@1500008 : Code[10];CurrencyFactor@1500014 : Decimal);
    VAR
      DetailedGSTEntryBuffer@1500015 : Record 16412;
      DetailedGSTLedgerEntry@1500017 : Record 16419;
      ServiceInvoiceLine@1500013 : Record 5993;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Service);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",ServiceLine."Document Type");
      DetailedGSTEntryBuffer.SETRANGE("Document No.",ServiceLine."Document No.");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",ServiceLine."Line No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            INIT;
            GeneralLedgerSetup.GET;
            "Entry No." := GetNextGSTDetailEntryNo;
            "Entry Type" := "Entry Type"::"Initial Entry";
            "Transaction Type" := "Transaction Type"::Sales;
            "Document Type" := DocumentType;
            "Document No." := DocumentNo;
            "Posting Date" := ServiceHeader."Posting Date";
            "Source Type" := "Source Type"::Customer;
            DetailedGSTEntryBuffer.TESTFIELD("Location Code");
            DetailedGSTEntryBuffer.TESTFIELD("Location  Reg. No.");
            DetailedGSTEntryBuffer.TESTFIELD("Location State Code");
            "Location State Code" := DetailedGSTEntryBuffer."Location State Code";
            "Location Code" := DetailedGSTEntryBuffer."Location Code";
            "Location  Reg. No." := DetailedGSTEntryBuffer."Location  Reg. No.";
            "GST Jurisdiction Type" := ServiceLine."GST Jurisdiction Type";
            "GST Place of Supply" := DetailedGSTEntryBuffer."GST Place of Supply";
            "GST Group Type" := ServiceLine."GST Group Type";
            "Liable to Pay" := TRUE;
            "GST Without Payment of Duty" := ServiceHeader."GST Without Payment of Duty";
            "Item Charge Entry" := ServiceLine."Item Charge Entry";
            "Nature of Supply" := ServiceHeader."Nature of Supply";
            "Buyer/Seller State Code" := DetailedGSTEntryBuffer."Buyer/Seller State Code";
            "Shipping Address State Code" := DetailedGSTEntryBuffer."Shipping Address State Code";
            "Buyer/Seller Reg. No." := DetailedGSTEntryBuffer."Buyer/Seller Reg. No.";
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Customer Type" := ServiceHeader."GST Customer Type";
            "GST Exempted Goods" := ServiceLine.Exempted;
            "Bill Of Export No." := ServiceHeader."Bill Of Export No.";
            "Bill Of Export Date" := ServiceHeader."Bill Of Export Date";
            "Sales Invoice Type" := ServiceHeader."Invoice Type";
            "Original Invoice No." := DetailedGSTEntryBuffer."Original Invoice No.";
            "Original Invoice Date" := DetailedGSTEntryBuffer."Original Invoice Date";
            "G/L Account No." :=
              GetGSTAccountNo(
                "Location State Code",DetailedGSTEntryBuffer."GST Component Code","Transaction Type"::Sales,0,0,FALSE,FALSE);
            Type := DetailedGSTEntryBuffer.Type;
            "No." := DetailedGSTEntryBuffer."No.";
            "Product Type" := DetailedGSTEntryBuffer."Product Type";
            "Source No." := DetailedGSTEntryBuffer."Source No.";
            "HSN/SAC Code" := DetailedGSTEntryBuffer."HSN/SAC Code";
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Group Code" := DetailedGSTEntryBuffer."GST Group Code";
            "Document Line No." := DetailedGSTEntryBuffer."Line No.";
            "Currency Code" := CurrencyCode;
            "Currency Factor" := CurrencyFactor;
            "GST Base Amount" :=
              ROUND(
                DetailedGSTEntryBuffer."GST Base Amount (LCY)" * QtyFactor,
                GeneralLedgerSetup."Amount Rounding Precision");
            "GST Amount" := RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount (LCY)" * QtyFactor);
            "GST %" := DetailedGSTEntryBuffer."GST %";
            Quantity := DetailedGSTEntryBuffer.Quantity * QtyFactor;
            "Amount Loaded on Item" :=
              ConvertGSTAmountToLCY(
                CurrencyCode,RoundGSTPrecision(DetailedGSTEntryBuffer."Amount Loaded on Item" * QtyFactor),CurrencyFactor,
                "Posting Date");
            "GST Rounding Type" := DetailedGSTEntryBuffer."GST Rounding Type";
            "GST Rounding Precision" := DetailedGSTEntryBuffer."GST Rounding Precision";
            Positive := "GST Amount" > 0;
            "Original Doc. Type" := "Document Type";
            "Original Doc. No." := "Document No.";
            "Original Invoice No." := DetailedGSTEntryBuffer."Original Invoice No.";
            "Original Invoice Date" := DetailedGSTEntryBuffer."Original Invoice Date";
            "User ID" := USERID;
            "Transaction No." := TransactionNo;
            "Gen. Bus. Posting Group" := ServiceLine."Gen. Bus. Posting Group";
            "Gen. Prod. Posting Group" := ServiceLine."Gen. Prod. Posting Group";
            "Reason Code" := ServiceHeader."Reason Code";
            "Remaining Base Amount" := "GST Base Amount";
            "Remaining GST Amount" := "GST Amount";
            // Insert Amount to Customer in Detailed GST Ledger
            ServiceInvoiceLine.SETRANGE("Document No.","Document No.");
            ServiceInvoiceLine.SETRANGE("Line No.","Document Line No.");
            "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
            "Cess Factor Quantity" := DetailedGSTEntryBuffer."Cess Factor Quantity";
            "Cess Amount Per Unit Factor" := DetailedGSTEntryBuffer."Cess Amt Per Unit Factor (LCY)";
            "Cess UOM" := DetailedGSTEntryBuffer."Cess UOM";
            UOM := DetailedGSTEntryBuffer.UOM;
            IF ServiceInvoiceLine.FINDFIRST THEN
              "Amount to Customer/Vendor" := ServiceInvoiceLine."Amount To Customer";
            TESTFIELD("HSN/SAC Code");
            INSERT(TRUE);
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
    END;

    PROCEDURE CheckServiceLineInvoiceType@1500061(ServiceHeader@1500000 : Record 5900);
    VAR
      ServiceLine@1500001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."No.");
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::" ");
      ServiceLine.SETFILTER("No.",'<>%1','');
      ServiceLine.SETFILTER("Invoice Type",'<>%1',ServiceHeader."Invoice Type");
      IF ServiceLine.FINDFIRST THEN
        ERROR(LineInvTypeErr);
    END;

    PROCEDURE CheckHSNSACService@1500063(ServiceHeader@1500001 : Record 5900);
    VAR
      ServiceLine@1500000 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::" ");
      ServiceLine.SETFILTER("No.",'<>%1','');
      ServiceLine.SETFILTER("GST Group Code",'<>%1','');
      ServiceLine.SETRANGE("HSN/SAC Code",'');
      IF ServiceLine.FINDFIRST THEN
        ServiceLine.TESTFIELD("HSN/SAC Code");
      ServiceLine.SETRANGE("GST Group Code");
      ServiceLine.SETRANGE("GST Group Code",'');
      IF ServiceLine.FINDFIRST THEN
        ERROR(NonGSTLineErr);
    END;

    LOCAL PROCEDURE GetRefundAdjustmentDocument@1500158(TransactionType@1500000 : Option;DocumentNo@1500004 : Code[20];VAR OriginalDocumentNo@1500002 : Code[20];VAR OriginalDocumentDate@1500003 : Date) : Boolean;
    VAR
      DetailedGSTLedgerEntry@1500001 : Record 16419;
    BEGIN
      WITH DetailedGSTLedgerEntry DO BEGIN
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Document Type","Document Type"::Refund);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Adv. Pmt. Adjustment",TRUE);
        IF FINDFIRST THEN BEGIN
          OriginalDocumentNo := "Original Adv. Pmt Doc. No.";
          OriginalDocumentDate := "Original Adv. Pmt Doc. Date";
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchaseGSTRegNo@1500059(VAR DetailedGSTEntryBuffer@1500000 : Record 16412;PurchaseHeader@1500004 : Record 38;PurchaseLine@1500001 : Record 39);
    VAR
      Location@1500002 : Record 14;
      Vendor@1500003 : Record 23;
    BEGIN
      WITH DetailedGSTEntryBuffer DO
        IF Location.GET("Location Code") THEN BEGIN
          Location.TESTFIELD("State Code");
          Location.TESTFIELD("GST Registration No.");
          "Location State Code" := Location."State Code";
          "Location  Reg. No." := Location."GST Registration No.";
          Vendor.GET("Source No.");
          "Buyer/Seller Reg. No." := Vendor."GST Registration No.";
          "Buyer/Seller State Code" := Vendor."State Code";
          "Charge To Cust/Vend" := PurchaseLine."Charges To Vendor";
          "TDS/TCS Amount" := -PurchaseLine."Total TDS Including SHE CESS";
          "GST Group Type" := PurchaseLine."GST Group Type";
          "Reverse Charge" := PurchaseLine."GST Reverse Charge";
          "Currency Code" := PurchaseHeader."Currency Code";
          IF PurchaseHeader."Currency Code" <> '' THEN
            "Currency Factor" := PurchaseHeader."Currency Factor"
          ELSE
            "Currency Factor" := 1;
          GeneralLedgerSetup.GET;
          "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
          "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
        END;
    END;

    LOCAL PROCEDURE UpdateSalesGSTRegNo@1500062(VAR DetailedGSTEntryBuffer@1500000 : Record 16412;SalesHeader@1500001 : Record 36;SalesLine@1500002 : Record 37);
    VAR
      Customer@1500003 : Record 18;
      Location@1500004 : Record 14;
      ShiptoAddress@1500005 : Record 222;
    BEGIN
      WITH DetailedGSTEntryBuffer DO
        IF Location.GET("Location Code") THEN BEGIN
          Customer.GET("Source No.");
          Location.TESTFIELD("State Code");
          Location.TESTFIELD("GST Registration No.");
          SalesHeader.TESTFIELD("Location State Code");
          "Location State Code" := SalesHeader."Location State Code";
          "Location  Reg. No." := Location."GST Registration No.";
          "GST Place of Supply" := SalesLine."GST Place of Supply";
          "Charge To Cust/Vend" := SalesLine."Charges To Customer";
          "TDS/TCS Amount" := -SalesLine."Total TDS/TCS Incl. SHE CESS";
          "GST Group Type" := SalesLine."GST Group Type";
          IF "GST Place of Supply" = "GST Place of Supply"::" " THEN
            ERROR(STRSUBSTNO(PlaceOfSupplyErr,SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No."));
          "Currency Code" := SalesHeader."Currency Code";
          IF SalesHeader."Currency Code" <> '' THEN
            "Currency Factor" := SalesHeader."Currency Factor"
          ELSE
            "Currency Factor" := 1;
          GeneralLedgerSetup.GET;
          "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
          "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
          IF SalesHeader."Ship-to Code" <> '' THEN BEGIN
            ShiptoAddress.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
            IF SalesHeader."GST Ship-to State Code" <> SalesHeader."GST Bill-to State Code" THEN
              "Shipping Address State Code" := SalesHeader."GST Ship-to State Code";
          END;
          CASE "GST Place of Supply" OF
            "GST Place of Supply"::"Bill-to Address":
              BEGIN
                "Buyer/Seller State Code" := SalesHeader."GST Bill-to State Code";
                "Buyer/Seller Reg. No." := Customer."GST Registration No.";
              END;
            "GST Place of Supply"::"Ship-to Address":
              BEGIN
                SalesHeader.TESTFIELD("Ship-to Code");
                "Buyer/Seller State Code" := SalesHeader."GST Ship-to State Code";
                "Buyer/Seller Reg. No." := ShiptoAddress."GST Registration No.";
              END;
            "GST Place of Supply"::"Location Address":
              BEGIN
                "Buyer/Seller State Code" := "Location State Code";
                "Buyer/Seller Reg. No." := Customer."GST Registration No.";
              END;
          END;
        END;
    END;

    LOCAL PROCEDURE UpdateServiceGSTRegNo@1500072(VAR DetailedGSTEntryBuffer@1500000 : Record 16412;ServiceHeader@1500001 : Record 5900;ServiceLine@1500002 : Record 5902);
    VAR
      Customer@1500003 : Record 18;
      Location@1500004 : Record 14;
      ShiptoAddress@1500005 : Record 222;
    BEGIN
      WITH DetailedGSTEntryBuffer DO
        IF Location.GET("Location Code") THEN BEGIN
          Customer.GET("Source No.");
          Location.TESTFIELD("State Code");
          Location.TESTFIELD("GST Registration No.");
          ServiceHeader.TESTFIELD("Location State Code");
          "Location State Code" := ServiceHeader."Location State Code";
          "Location  Reg. No." := Location."GST Registration No.";
          "GST Place of Supply" := ServiceLine."GST Place Of Supply";
          "Charge To Cust/Vend" := ServiceLine."Charges To Customer";
          "Currency Code" := ServiceHeader."Currency Code";
          "GST Group Type" := ServiceLine."GST Group Type";
          GeneralLedgerSetup.GET;
          "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
          "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
          IF ServiceHeader."Currency Code" <> '' THEN
            "Currency Factor" := ServiceHeader."Currency Factor"
          ELSE
            "Currency Factor" := 1;
          IF "GST Place of Supply" = "GST Place of Supply"::" " THEN
            ERROR(STRSUBSTNO(PlaceOfSupplyErr,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No."));
          IF ServiceHeader."Ship-to Code" <> '' THEN BEGIN
            ShiptoAddress.GET(ServiceHeader."Customer No.",ServiceHeader."Ship-to Code");
            IF ServiceHeader."GST Ship-to State Code" <> ServiceHeader."GST Bill-to State Code" THEN
              "Shipping Address State Code" := ServiceHeader."GST Ship-to State Code";
          END;
          CASE "GST Place of Supply" OF
            "GST Place of Supply"::"Bill-to Address":
              BEGIN
                "Buyer/Seller State Code" := ServiceHeader."GST Bill-to State Code";
                "Buyer/Seller Reg. No." := Customer."GST Registration No.";
              END;
            "GST Place of Supply"::"Ship-to Address":
              BEGIN
                ServiceHeader.TESTFIELD("Ship-to Code");
                "Buyer/Seller State Code" := ServiceHeader."GST Ship-to State Code";
                "Buyer/Seller Reg. No." := ShiptoAddress."GST Registration No.";
              END;
            "GST Place of Supply"::"Location Address":
              BEGIN
                "Buyer/Seller State Code" := "Location State Code";
                "Buyer/Seller Reg. No." := Customer."GST Registration No.";
              END;
          END;
        END;
    END;

    LOCAL PROCEDURE IsPlaceofSupplyBlank@1500035(SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");
      SalesLine.SETFILTER("No.",'<>%1','');
      IF SalesLine.FINDFIRST THEN
        ERROR(STRSUBSTNO(PlaceOfSupplyErr,SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No."));
    END;

    PROCEDURE UpdateRoundingGSTAmount@1500058(VAR GenJournalLine@1500000 : Record 81;TransactionType@1500003 : 'Purchase,Sale');
    VAR
      DetailedGSTEntryBuffer@1500006 : Record 16412;
      LineAmount@1500005 : Decimal;
      BufferAmount@1500007 : Decimal;
      DiffAmount@1500008 : Decimal;
      TotalBaseAmount@1500009 : Decimal;
    BEGIN
      IF GenJournalLine."TCS Nature of Collection" <> '' THEN
        LineAmount := GenJournalLine."Amount (LCY)" + GenJournalLine."Total TDS/TCS Incl. SHE CESS"
      ELSE
        LineAmount := GenJournalLine."Amount (LCY)";
      BufferAmount := ReturnTotalDifferenceAmount(GenJournalLine,TransactionType);
      DetailedGSTEntryBuffer.RESET;
      DetailedGSTEntryBuffer.SETCURRENTKEY(
        "Transaction Type","Journal Template Name","Journal Batch Name","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",GenJournalLine."Line No.");
      IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN
        DetailedGSTEntryBuffer.SETRANGE("Source Type",DetailedGSTEntryBuffer."Source Type"::Customer)
      ELSE
        IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN
          DetailedGSTEntryBuffer.SETRANGE("Source Type",DetailedGSTEntryBuffer."Source Type"::Vendor);
      DetailedGSTEntryBuffer.SETRANGE("Source No.",GenJournalLine."Account No.");
      DetailedGSTEntryBuffer.SETRANGE(Cess,FALSE);
      IF DetailedGSTEntryBuffer.FINDSET THEN BEGIN
        TotalBaseAmount := DetailedGSTEntryBuffer."GST Base Amount";
        REPEAT
          DiffAmount := (LineAmount - (BufferAmount + TotalBaseAmount));
          IF DiffAmount <> 0 THEN BEGIN
            DetailedGSTEntryBuffer."GST Base Amount" += DiffAmount;
            DetailedGSTEntryBuffer.MODIFY;
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ReturnTotalDifferenceAmount@1500060(VAR GenJournalLine@1500000 : Record 81;TransactionType@1500003 : 'Purchase,Sale') DiffAmount : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500004 : Record 16412;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY(
        "Transaction Type","Journal Template Name","Journal Batch Name","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      DetailedGSTEntryBuffer.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",GenJournalLine."Line No.");
      IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Customer THEN
        DetailedGSTEntryBuffer.SETRANGE("Source Type",DetailedGSTEntryBuffer."Source Type"::Customer)
      ELSE
        IF GenJournalLine."Account Type" = GenJournalLine."Account Type"::Vendor THEN
          DetailedGSTEntryBuffer.SETRANGE("Source Type",DetailedGSTEntryBuffer."Source Type"::Vendor);
      DetailedGSTEntryBuffer.SETRANGE("Source No.",GenJournalLine."Account No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          DiffAmount += DetailedGSTEntryBuffer."GST Amount" ;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      EXIT(DiffAmount);
    END;

    PROCEDURE RoundTotalGSTAmountQtyFactorCurrency@1500065(TransactionType@1500010 : 'Purchase,Sale,Transfer,Service';DocumentType@1500009 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500008 : Code[20];CurrencyCode@1500002 : Code[10];CurrencyFactor@1500003 : Decimal;PostingDate@1500011 : Date) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      PurchaseLine@1500012 : Record 39;
      CurrencyExchangeRate@1500006 : Record 330;
      SalesLine@1500004 : Record 37;
      ServiceLine@1500001 : Record 5902;
      TotalGSTAmount@1500000 : Decimal;
    BEGIN
      IF TransactionType = TransactionType::Purchase THEN BEGIN
        PurchaseLine.SETRANGE("Document Type",DocumentType);
        PurchaseLine.SETRANGE("Document No.",DocumentNo);
        IF PurchaseLine.FINDSET THEN
          REPEAT
            DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
            DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
            DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
            DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
            DetailedGSTEntryBuffer.SETRANGE("Line No.",PurchaseLine."Line No.");
            IF DetailedGSTEntryBuffer.FINDSET THEN
              REPEAT
                IF (DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0) AND (CurrencyCode <> '') THEN
                  TotalGSTAmount +=
                    RoundGSTPrecision(
                      CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                        PostingDate,CurrencyCode,
                        DetailedGSTEntryBuffer."Amount Loaded on Item" * PurchaseLine."Qty. to Invoice" / PurchaseLine.Quantity,
                        CurrencyFactor))
                ELSE
                  IF (DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0) AND (CurrencyCode <> '') THEN
                    TotalGSTAmount +=
                      RoundGSTPrecision(
                        CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                          PostingDate,CurrencyCode,
                          DetailedGSTEntryBuffer."GST Input/Output Credit Amount" *
                          PurchaseLine."Qty. to Invoice" / PurchaseLine.Quantity,
                          CurrencyFactor));
              UNTIL DetailedGSTEntryBuffer.NEXT = 0;
          UNTIL PurchaseLine.NEXT = 0;
      END ELSE
        IF TransactionType = TransactionType::Sale THEN BEGIN
          SalesLine.SETRANGE("Document Type",DocumentType);
          SalesLine.SETRANGE("Document No.",DocumentNo);
          IF SalesLine.FINDSET THEN
            REPEAT
              DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
              DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
              DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
              DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
              DetailedGSTEntryBuffer.SETRANGE("Line No.",SalesLine."Line No.");
              IF DetailedGSTEntryBuffer.FINDSET THEN
                REPEAT
                  IF (DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0) AND (CurrencyCode <> '') THEN
                    TotalGSTAmount +=
                      RoundGSTPrecision(
                        CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                          PostingDate,CurrencyCode,
                          DetailedGSTEntryBuffer."Amount Loaded on Item" * SalesLine."Qty. to Invoice" / SalesLine.Quantity,
                          CurrencyFactor))
                  ELSE
                    IF (DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0) AND (CurrencyCode <> '') THEN
                      TotalGSTAmount +=
                        RoundGSTPrecision(
                          CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                            PostingDate,CurrencyCode,
                            DetailedGSTEntryBuffer."GST Input/Output Credit Amount" *
                            SalesLine."Qty. to Invoice" / SalesLine.Quantity,CurrencyFactor));
                UNTIL DetailedGSTEntryBuffer.NEXT = 0;
            UNTIL SalesLine.NEXT = 0;
        END ELSE
          IF TransactionType = TransactionType::Service THEN BEGIN
            ServiceLine.SETRANGE("Document Type",DocumentType);
            ServiceLine.SETRANGE("Document No.",DocumentNo);
            IF ServiceLine.FINDSET THEN
              REPEAT
                DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
                DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
                DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
                DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
                DetailedGSTEntryBuffer.SETRANGE("Line No.",ServiceLine."Line No.");
                IF DetailedGSTEntryBuffer.FINDSET THEN
                  REPEAT
                    IF (DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0) AND (CurrencyCode <> '') THEN
                      TotalGSTAmount +=
                        RoundGSTPrecision(
                          CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                            PostingDate,CurrencyCode,
                            DetailedGSTEntryBuffer."Amount Loaded on Item" *
                            ServiceLine."Qty. to Invoice" / ServiceLine.Quantity,CurrencyFactor))
                    ELSE
                      IF (DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0) AND (CurrencyCode <> '') THEN
                        TotalGSTAmount +=
                          RoundGSTPrecision(
                            CurrencyExchangeRate.ExchangeAmtFCYToLCY(
                              PostingDate,CurrencyCode,
                              DetailedGSTEntryBuffer."GST Input/Output Credit Amount" *
                              ServiceLine."Qty. to Invoice" / ServiceLine.Quantity,CurrencyFactor));
                  UNTIL DetailedGSTEntryBuffer.NEXT = 0;
              UNTIL ServiceLine.NEXT = 0;
          END;
      EXIT(TotalGSTAmount);
    END;

    PROCEDURE ConvertGSTAmountToLCY@1500064(CurrencyCode@1500001 : Code[10];Amount@1500002 : Decimal;CurrencyFactor@1500005 : Decimal;PostingDate@1500003 : Date) : Decimal;
    VAR
      CurrExchRate@1500000 : Record 330;
      GLSetup@1500004 : Record 98;
    BEGIN
      GLSetup.GET;
      IF CurrencyCode = '' THEN
        EXIT(RoundGSTPrecision(Amount));
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            PostingDate,CurrencyCode,Amount,CurrencyFactor),GLSetup."GST Rounding Precision"));
    END;

    PROCEDURE RoundTotalGSTAmountQtyFactorLCY@1500066(TransactionType@1500010 : 'Purchase,Sale,Transfer,Service';DocumentType@1500009 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500008 : Code[20];LineNo@1500007 : Integer;QtyFactor@1500004 : Decimal) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      TotalGSTAmount@1500000 : Decimal;
      Sign@1500001 : Integer;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          IF DetailedGSTEntryBuffer."GST Assessable Value" <> 0 THEN BEGIN
            IF DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0 THEN
              TotalGSTAmount +=
                (DetailedGSTEntryBuffer."Amount Loaded on Item" / DetailedGSTEntryBuffer."GST Base Amount") *
                (DetailedGSTEntryBuffer."Custom Duty Amount (LCY)" + DetailedGSTEntryBuffer."GST Assessable Value (LCY)")
            ELSE
              IF DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0 THEN
                TotalGSTAmount +=
                  (DetailedGSTEntryBuffer."GST Input/Output Credit Amount" / DetailedGSTEntryBuffer."GST Base Amount") *
                  (DetailedGSTEntryBuffer."Custom Duty Amount (LCY)" + DetailedGSTEntryBuffer."GST Assessable Value (LCY)");
          END ELSE BEGIN
            IF DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0 THEN
              TotalGSTAmount += RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount (LCY)" * QtyFactor)
            ELSE
              IF DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0 THEN
                TotalGSTAmount += RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount (LCY)" * QtyFactor);
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      IF DocumentType IN [DocumentType::Order,DocumentType::Invoice,
                          DocumentType::Quote,DocumentType::"Blanket Order"]
      THEN
        Sign := 1
      ELSE
        Sign := -1;
      IF TransactionType = TransactionType::Purchase THEN
        Sign := Sign * 1
      ELSE
        Sign := Sign * -1;
      EXIT(TotalGSTAmount * Sign);
    END;

    PROCEDURE GetItemChargeGSTAmount@1500068(TransactionType@1500010 : 'Purchase,Sale,Transfer,Service';DocumentType@1500009 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500008 : Code[20];LineNo@1500007 : Integer;AppliestoDocType@1500003 : Option;AppliestoDocNo@1500002 : Code[20];AppliestoDocLineNo@1500006 : Integer;QtyFactor@1500004 : Decimal;LineFilter@1500011 : Boolean) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      TotalGSTAmount@1500000 : Decimal;
      Sign@1500001 : Integer;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      DetailedGSTEntryBuffer.SETRANGE("Input Service Distribution",FALSE);
      IF NOT LineFilter THEN BEGIN
        DetailedGSTEntryBuffer.SETRANGE("Item Charge Assgn. Doc. Type",AppliestoDocType);
        DetailedGSTEntryBuffer.SETRANGE("Item Charge Assgn Doc. No.",AppliestoDocNo);
        DetailedGSTEntryBuffer.SETRANGE("Item Charge Assgn. Line No.",AppliestoDocLineNo);
      END;
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          IF DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0 THEN
            TotalGSTAmount += RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount (LCY)" * QtyFactor)
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      IF DocumentType IN [DocumentType::Order,DocumentType::Invoice,DocumentType::Quote,DocumentType::"Blanket Order"] THEN
        Sign := 1
      ELSE
        Sign := -1;
      IF TransactionType = TransactionType::Purchase THEN
        Sign := Sign * 1
      ELSE
        Sign := Sign * -1;
      EXIT(TotalGSTAmount * Sign);
    END;

    LOCAL PROCEDURE IsExempted@1500041(SalesHeader@1500000 : Record 36) : Boolean;
    BEGIN
      WITH SalesHeader DO
        EXIT(
          ("GST Customer Type" = "GST Customer Type"::Exempted) OR "GST Without Payment of Duty");
    END;

    LOCAL PROCEDURE VerifySimilarGSTGroupType@1500069(PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
      TotalGoodsTypeLine@1500003 : Integer;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        IF NOT ("GST Vendor Type" IN ["GST Vendor Type"::Import,"GST Vendor Type"::Unregistered,"GST Vendor Type"::SEZ]) THEN
          EXIT;
        PurchaseLine.SETRANGE("Document Type","Document Type");
        PurchaseLine.SETRANGE("Document No.","No.");
        PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
        PurchaseLine.SETFILTER(Quantity,'<>%1',0);
        PurchaseLine.SETRANGE("GST Group Type",PurchaseLine."GST Group Type"::Goods);
        TotalGoodsTypeLine := PurchaseLine.COUNT;
        PurchaseLine.SETRANGE("GST Group Type");
        PurchaseLine.SETRANGE("GST Group Type",PurchaseLine."GST Group Type"::Service);
        IF (TotalGoodsTypeLine > 0) AND (PurchaseLine.COUNT > 0) THEN
          ERROR(
            STRSUBSTNO(
              SimilarGSTGroupTypeErr,PurchaseLine.FIELDCAPTION("GST Group Type"),
              FIELDCAPTION("Document Type"),FORMAT("Document Type"),FIELDCAPTION("No."),"No."));
      END;
    END;

    PROCEDURE GSTApplicableOnServiceTransfer@1500079(ServiceTransferHeader@1500000 : Record 16437) : Boolean;
    BEGIN
      WITH ServiceTransferHeader DO BEGIN
        CompanyInformation.GET;
        CompanyInformation.TESTFIELD("GST Registration No.");
        CheckGSTAccountingPeriod("Shipment Date");
        CheckLocation("Transfer-from Code");
        CheckLocation("Transfer-to Code");
        EXIT(CheckFromAndToGSTRegistrationNo("Transfer-from Code","Transfer-to Code"));
      END;
    END;

    LOCAL PROCEDURE InsertDetailLedgerBufferServiceTransfer@1500077(VAR DetailedGSTEntryBuffer@1500000 : Record 16412;DocumentNo@1500003 : Code[20];LineNo@1500004 : Integer;GSTBaseAmount@1500007 : Decimal;GSTAmount@1500001 : Decimal;GSTPercentage@1500008 : Decimal;Sign@1500002 : Integer);
    VAR
      ServiceTransferHeader@1500005 : Record 16437;
      ServiceTransferLine@1500006 : Record 16438;
    BEGIN
      ServiceTransferHeader.GET(DocumentNo);
      IF ServiceTransferLine.GET(ServiceTransferHeader."No.",LineNo) THEN
        WITH DetailedGSTEntryBuffer DO BEGIN
          "Document Type" := "Document Type"::Quote;
          "Document No." := ServiceTransferHeader."No.";
          "Posting Date" := ServiceTransferHeader."Shipment Date";
          Type := Type::"G/L Account";
          "No." := ServiceTransferLine."Transfer From G/L Account No.";
          "Source No." := '';
          "HSN/SAC Code" := ServiceTransferLine."SAC Code";
          "Location Code" := ServiceTransferHeader."Transfer-from Code";
          "Line No." := ServiceTransferLine."Line No.";
          "Source Type" := "Source Type"::" ";
          Exempted := ServiceTransferLine.Exempted;
          IF ServiceTransferLine.Exempted THEN BEGIN
            GSTPercentage := 0;
            GSTAmount := 0;
          END;
          "GST Input/Output Credit Amount" := Sign * GSTAmount;
          "GST Base Amount" := Sign * GSTBaseAmount;
          "GST %" := GSTPercentage;
          "GST Rounding Precision" := ServiceTransferLine."GST Rounding Precision";
          "GST Rounding Type" := ServiceTransferLine."GST Rounding Type";
          "Currency Factor" := 1;
          "GST Amount" := Sign * GSTAmount;
          "GST Input/Output Credit Amount" := Sign * GSTAmount;
        END;
    END;

    PROCEDURE InsertDetailedGSTLedgEntryServiceTransfer@1500076(ServiceTransferLine@1500000 : Record 16438;ServiceTransferHeader@1500004 : Record 16437;DocumentNo@1500001 : Code[20];DocumentType@1500012 : Option;TransactionNo@1500005 : Integer;DocTransferType@1500014 : 'ServiceTransferShpmnt,ServiceTransferReciept');
    VAR
      Location@1500002 : Record 14;
      Location1@1500003 : Record 14;
      DetailedGSTEntryBuffer@1500015 : Record 16412;
      DetailedGSTLedgerEntry@1500017 : Record 16419;
      SourceType@1500010 : 'Vendor,Customer';
      GSTJurisdiction@1500011 : Option;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::"Service Transfer");
      DetailedGSTEntryBuffer.SETRANGE("Document Type",0);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",ServiceTransferLine."Document No.");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",ServiceTransferLine."Line No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          WITH DetailedGSTLedgerEntry DO BEGIN
            INIT;
            "Entry No." := GetNextGSTDetailEntryNo;
            "Entry Type" := "Entry Type"::"Initial Entry";
            "Document Type" := DocumentType;
            "Document No." := DocumentNo;
            "Original Doc. No." := ServiceTransferHeader."No.";
            Type := Type::"G/L Account";
            Location.GET(ServiceTransferHeader."Transfer-from Code");
            Location.TESTFIELD("State Code");
            Location.TESTFIELD("GST Registration No.");
            Location1.GET(ServiceTransferHeader."Transfer-to Code");
            Location1.TESTFIELD("State Code");
            Location1.TESTFIELD("GST Registration No.");
            "Location Code" := ServiceTransferHeader."Transfer-from Code";
            GetGSTConfiguration(SourceType::Customer,Location."State Code",Location1."State Code",GSTJurisdiction);
            "GST Jurisdiction Type" := GSTJurisdiction;
            "GST Group Type" := "GST Group Type"::Service;
            "GST Without Payment of Duty" := FALSE;
            "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
            "GST Exempted Goods" := ServiceTransferLine.Exempted;
            IF DocTransferType = DocTransferType::ServiceTransferShpmnt THEN BEGIN
              "G/L Account No." := GetGSTPayableAccountNo(Location."State Code",DetailedGSTEntryBuffer."GST Component Code");
              "Location State Code" := Location."State Code";
              "Buyer/Seller State Code" := Location1."State Code";
              "Shipping Address State Code" := '';
              "Location  Reg. No." := Location."GST Registration No.";
              "Buyer/Seller Reg. No." := Location1."GST Registration No.";
              "Original Doc. Type" := "Original Doc. Type"::"Transfer Shipment";
              "Transaction Type" := "Transaction Type"::Sales;
              "No." := ServiceTransferLine."Transfer From G/L Account No.";
              "Posting Date" := ServiceTransferHeader."Shipment Date";
              "External Document No." := ServiceTransferHeader."No.";
              "Source Type" := "Source Type"::Customer;
              "GST Customer Type" := "GST Customer Type"::Registered;
              "Liable to Pay" := TRUE;
            END ELSE BEGIN
              "G/L Account No." := GetGSTReceivableAccountNo(Location1."State Code",DetailedGSTEntryBuffer."GST Component Code");
              "Location State Code" := Location1."State Code";
              "Buyer/Seller State Code" := Location."State Code";
              "Shipping Address State Code" := '';
              "Location  Reg. No." := Location1."GST Registration No.";
              "Buyer/Seller Reg. No." := Location."GST Registration No.";
              "Original Doc. Type" := "Original Doc. Type"::"Transfer Receipt";
              "Transaction Type" := "Transaction Type"::Purchase;
              "No." := ServiceTransferLine."Transfer To G/L Account No.";
              "Posting Date" := ServiceTransferHeader."Receipt Date";
              "External Document No." := ServiceTransferHeader."External Doc No.";
              "Source Type" := "Source Type"::Vendor;
              "GST Vendor Type" := "GST Vendor Type"::Registered;
              "Credit Availed" := GetReceivableApplicable("GST Vendor Type","GST Group Type","GST Credit"::Availment,FALSE,FALSE);
            END;
            UpdateDetailGSTLedgerEntryServiceTransfer(
              DetailedGSTLedgerEntry,ServiceTransferLine."Document No.",ServiceTransferLine."Line No.",TransactionNo,DocTransferType);
            TESTFIELD("HSN/SAC Code");
            INSERT(TRUE);
          END;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
    END;

    PROCEDURE InsertGSTLedgerEntryServiceTransfer@1500075(GSTPostingBuffer@1500004 : Record 16420;ServiceTransferHeader@1500009 : Record 16437;NextTransactionNo@1500001 : Integer;DocumentType@1500007 : Option;DocumentNo@1500008 : Code[20];SourceCode@1500010 : Code[10];DocTransferType@1500003 : 'ServiceTransferShpmnt,ServiceTransferReciept');
    VAR
      GSTLedgerEntry@1500002 : Record 16418;
    BEGIN
      WITH GSTLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetNextGSTLedgerEntryNo;
        "Gen. Bus. Posting Group" := GSTPostingBuffer."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GSTPostingBuffer."Gen. Prod. Posting Group";
        "Posting Date" := ServiceTransferHeader."Receipt Date";
        "Document No." := DocumentNo;
        "Document Type" := DocumentType;
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "GST Amount" := GSTPostingBuffer."GST Amount";
        "Transaction Type" := "Transaction Type"::Purchase;
        "External Document No." := ServiceTransferHeader."External Doc No.";
        "Source Type" := "Source Type"::Vendor;
        IF DocTransferType = DocTransferType::ServiceTransferShpmnt THEN BEGIN
          "Transaction Type" := "Transaction Type"::Sales;
          "External Document No." := ServiceTransferHeader."No.";
          "Posting Date" := ServiceTransferHeader."Shipment Date";
          "Source Type" := "Source Type"::Customer
        END ;
        "GST Base Amount" := GSTPostingBuffer."GST Base Amount";
        "User ID" := USERID;
        "Source Code" := SourceCode;
        "Transaction No." := NextTransactionNo;
        "GST Component Code" := GSTPostingBuffer."GST Component Code";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE UpdateDetailGSTLedgerEntryServiceTransfer@1500074(VAR DetailedGSTLedgerEntry@1500000 : Record 16419;DocumentNo@1500002 : Code[20];LineNo@1500003 : Integer;TransactionNo@1500008 : Integer;DocTransferType@1500007 : 'ServiceTransferShpmnt,ServiceTransferReciept');
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::"Service Transfer");
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DetailedGSTEntryBuffer."Document Type"::Quote);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      DetailedGSTEntryBuffer.SETRANGE("GST Component Code",DetailedGSTLedgerEntry."GST Component Code");
      IF DetailedGSTEntryBuffer.FINDFIRST THEN
        WITH DetailedGSTLedgerEntry DO BEGIN
          Type := DetailedGSTEntryBuffer.Type;
          "No." := DetailedGSTEntryBuffer."No.";
          "Product Type" := DetailedGSTEntryBuffer."Product Type";
          "Source No." := DetailedGSTEntryBuffer."Source No.";
          "HSN/SAC Code" := DetailedGSTEntryBuffer."HSN/SAC Code";
          "GST Component Code" := DetailedGSTEntryBuffer."GST Component Code";
          "GST Group Code" := DetailedGSTEntryBuffer."GST Group Code";
          "Document Line No." := DetailedGSTEntryBuffer."Line No.";
          "GST Base Amount" := RoundGSTPrecision(DetailedGSTEntryBuffer."GST Base Amount");
          "GST Amount" := RoundGSTPrecision(DetailedGSTEntryBuffer."GST Amount");
          "GST %" := DetailedGSTEntryBuffer."GST %";
          Quantity := 1;
          "Amount Loaded on Item" := 0;
          "GST Credit" := "GST Credit"::Availment;
          IF DocTransferType = DocTransferType::ServiceTransferReciept THEN
            ReverseDetailedGSTEntryQtyAmt(DetailedGSTLedgerEntry);
          "GST Rounding Type" := DetailedGSTEntryBuffer."GST Rounding Type";
          "GST Rounding Precision" := DetailedGSTEntryBuffer."GST Rounding Precision";
          Positive := "GST Amount" > 0;
          "User ID" := USERID;
          "Transaction No." := TransactionNo;
          Cess := DetailedGSTEntryBuffer.Cess;
          "Component Calc. Type" := DetailedGSTEntryBuffer."Component Calc. Type";
          "Cess Amount Per Unit Factor" := DetailedGSTEntryBuffer."Cess Amt Per Unit Factor (LCY)";
          "Cess UOM" := DetailedGSTEntryBuffer."Cess UOM";
          "Cess Factor Quantity" := DetailedGSTEntryBuffer."Cess Factor Quantity";
        END;
    END;

    LOCAL PROCEDURE InsertDetailLedgerBufferOutward@1500081(VAR DetailedGSTEntryBuffer@1500007 : Record 16412;DocumentNo@1500006 : Code[20];LineNo@1500005 : Integer;GSTBaseAmount@1500004 : Decimal;GSTAmount@1500003 : Decimal;GSTPercentage@1500002 : Decimal;Sign@1500001 : Integer);
    VAR
      DeliveryChallanLine@1500013 : Record 16324;
      Location@1500011 : Record 14;
      Vendor@1500010 : Record 23;
      Item@1500021 : Record 27;
    BEGIN
      GeneralLedgerSetup.GET;
      IF DeliveryChallanLine.GET(DocumentNo,LineNo) THEN
        IF Location.GET(DeliveryChallanLine."Company Location") THEN;
      IF Vendor.GET(DeliveryChallanLine."Vendor No.") THEN;
      WITH DetailedGSTEntryBuffer DO BEGIN
        DeliveryChallanLine.CALCFIELDS("Remaining Quantity");
        "Document Type" := "Document Type"::Quote;
        "Document No." := DeliveryChallanLine."Deliver Challan No.";
        "Posting Date" := DeliveryChallanLine."GST Last Date";
        Type := Type::Item;
        "No." := DeliveryChallanLine."Item No.";
        "Source Type" := "Source Type"::Vendor;
        "Source No." := Vendor."No.";
        Quantity := DeliveryChallanLine."Remaining Quantity" * Sign;
        "Line No." := DeliveryChallanLine."Line No.";
        IF Item.GET(DeliveryChallanLine."Item No.") THEN;
        IF DeliveryChallanLine."HSN/SAC Code" <> '' THEN
          "HSN/SAC Code" := DeliveryChallanLine."HSN/SAC Code"
        ELSE
          "HSN/SAC Code" := Item."HSN/SAC Code";
        "Location Code" := DeliveryChallanLine."Company Location";
        "Location State Code" := Location."State Code";
        "Location  Reg. No." := Location."GST Registration No.";
        "Buyer/Seller State Code" := Vendor."State Code";
        "Buyer/Seller Reg. No." := Vendor."GST Registration No.";
        "GST Input/Output Credit Amount" := Sign * GSTAmount;
        "GST Base Amount" := Sign * GSTBaseAmount;
        "GST %" := GSTPercentage;
        "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
        "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
        "Currency Factor" := 1;
        "GST Amount" := Sign * GSTAmount;
      END;
    END;

    LOCAL PROCEDURE InsertDetailLedgerBufferInward@1500080(VAR DetailedGSTEntryBuffer@1500007 : Record 16412;DocumentNo@1500006 : Code[20];LineNo@1500005 : Integer;GSTBaseAmount@1500004 : Decimal;GSTAmount@1500003 : Decimal;GSTPercentage@1500002 : Decimal;Sign@1500001 : Integer);
    VAR
      DeliveryChallanLine@1500013 : Record 16324;
      AppliedDeliveryChallan@1500012 : Record 13717;
      Location@1500011 : Record 14;
      Vendor@1500010 : Record 23;
    BEGIN
      GeneralLedgerSetup.GET;
      AppliedDeliveryChallan.RESET;
      AppliedDeliveryChallan.SETRANGE("Applied Delivery Challan No.",DocumentNo);
      AppliedDeliveryChallan.SETRANGE("App. Delivery Challan Line No.",LineNo);
      IF NOT AppliedDeliveryChallan.FINDFIRST THEN
        EXIT;
      IF DeliveryChallanLine.GET(
           AppliedDeliveryChallan."Applied Delivery Challan No.",
           AppliedDeliveryChallan."App. Delivery Challan Line No.")
      THEN;
      IF Location.GET(DeliveryChallanLine."Company Location") THEN;
      IF Vendor.GET(DeliveryChallanLine."Vendor No.") THEN;
      WITH DetailedGSTEntryBuffer DO BEGIN
        "Document Type" := "Document Type"::Quote;
        "Document No." := AppliedDeliveryChallan."Applied Delivery Challan No.";
        "Posting Date" := WORKDATE;
        Type := Type::Item;
        "No." := AppliedDeliveryChallan."Item No.";
        "Source Type" := "Source Type"::Vendor;
        "Source No." := Vendor."No.";
        Quantity := AppliedDeliveryChallan."Qty. to Consume" * Sign;
        "Line No." := AppliedDeliveryChallan."App. Delivery Challan Line No.";
        "HSN/SAC Code" := DeliveryChallanLine."HSN/SAC Code";
        "Location Code" := Location.Code;
        "Location  Reg. No." := Location."GST Registration No.";
        "Location State Code" := Location."State Code";
        "Buyer/Seller State Code" := Vendor."State Code";
        "Buyer/Seller Reg. No." := Vendor."GST Registration No.";
        "GST Input/Output Credit Amount" := Sign * GSTAmount;
        "GST Base Amount" := Sign * GSTBaseAmount;
        "GST %" := GSTPercentage;
        "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
        "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
        "Currency Factor" := 1;
        "GST Amount" := Sign * GSTAmount;
        Inward := TRUE;
      END;
    END;

    PROCEDURE UpdatePostedReconcilation@1500189(GenJournalLine@1500002 : Record 81);
    VAR
      PostedGSTReconciliation@1500000 : Record 16432;
      Location@1500001 : Record 14;
    BEGIN
      WITH PostedGSTReconciliation DO BEGIN
        Location.GET(GenJournalLine."Location Code");
        SETCURRENTKEY("GSTIN No.","State Code","GST Component","Reconciliation Year","Reconciliation Month");
        SETRANGE("GSTIN No.",Location."GST Registration No.");
        SETRANGE("State Code",GenJournalLine."Location State Code");
        SETRANGE("GST Component",GenJournalLine."GST Component Code");
        IF FINDLAST THEN BEGIN
          "GST Amount" += GenJournalLine.Amount ;
          MODIFY;
        END ELSE BEGIN
          INIT;
          "GSTIN No." := Location."GST Registration No.";
          "State Code" := Location."State Code";
          "Reconciliation Month" := DATE2DMY(GenJournalLine."Posting Date",2);
          "Reconciliation Year" := DATE2DMY(GenJournalLine."Posting Date",3);
          "GST Component" := GenJournalLine."GST Component Code";
          "GST Amount" := GenJournalLine.Amount;
          INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE CheckAllLinesExemptedSales@1500083(SalesHeader@1500002 : Record 36) : Boolean;
    VAR
      SalesLine@1500000 : Record 37;
      SalesLine1@1500001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine1.COPYFILTERS(SalesLine);
      SalesLine1.SETRANGE(Exempted,TRUE);
      IF SalesLine.COUNT <> SalesLine1.COUNT THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckExemptedInvoiceTypeSales@1500082(SalesHeader@1500000 : Record 36);
    BEGIN
      IF NOT CheckAllLinesExemptedSales(SalesHeader) AND
         (SalesHeader."Invoice Type" <> SalesHeader."Invoice Type"::"Bill of Supply")
      THEN
        ERROR(ExemptedLinesErr);
      IF CheckAllLinesExemptedSales(SalesHeader) AND
         (SalesHeader."Invoice Type" = SalesHeader."Invoice Type"::"Bill of Supply")
      THEN
        ERROR(NonExemptedLinesErr);
    END;

    PROCEDURE CheckAllLinesExemptedService@1500073(ServiceHeader@1500002 : Record 5900) : Boolean;
    VAR
      ServiceLine@1500000 : Record 5902;
      ServiceLine1@1500001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine1.COPYFILTERS(ServiceLine);
      ServiceLine1.SETRANGE(Exempted,TRUE);
      IF ServiceLine.COUNT <> ServiceLine1.COUNT THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckExemptedInvoiceTypeService@1500071(ServiceHeader@1500000 : Record 5900);
    BEGIN
      IF NOT CheckAllLinesExemptedService(ServiceHeader) AND
         (ServiceHeader."Invoice Type" <> ServiceHeader."Invoice Type"::"Bill of Supply")
      THEN
        ERROR(ExemptedLinesErr);
      IF CheckAllLinesExemptedService(ServiceHeader) AND
         (ServiceHeader."Invoice Type" = ServiceHeader."Invoice Type"::"Bill of Supply")
      THEN
        ERROR(NonExemptedLinesErr);
    END;

    LOCAL PROCEDURE GetSign@1500084(DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';TransactionType@1500000 : 'Purchase,Sales,Transfer,Service,Service Transfer,Production') Sign : Integer;
    BEGIN
      IF DocumentType IN [DocumentType::Order,DocumentType::Invoice,DocumentType::Quote,DocumentType::"Blanket Order"] THEN
        Sign := 1
      ELSE
        Sign := -1;
      IF TransactionType = TransactionType::Purchase THEN
        Sign := Sign * 1
      ELSE
        Sign := Sign * -1;
      EXIT(Sign);
    END;

    LOCAL PROCEDURE UpdatePurchaseDetailedGSTBuffer@1500090(VAR DetailedGSTEntryBuffer@1500000 : Record 16412;VAR GSTPercentage@1500005 : Decimal;VAR GSTAmount@1500007 : Decimal;GSTBaseAmount@1500009 : Decimal;CurrencyFactor@1500011 : Decimal;DocumentType@1500004 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500003 : Code[20];CurrencyCode@1500010 : Code[10];LineNo@1500002 : Integer;Sign@1500008 : Integer);
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500006 : Record 39;
      PurchInvHeader@1500401 : Record 122;
    BEGIN
      WITH DetailedGSTEntryBuffer DO BEGIN
        PurchaseHeader.GET(DocumentType,DocumentNo);
        PurchaseLine.SETRANGE("Document Type",DocumentType);
        PurchaseLine.SETRANGE("Document No.",DocumentNo);
        PurchaseLine.SETRANGE("Line No.",LineNo);
        IF PurchaseLine.FINDFIRST THEN BEGIN
          "Document Type" := PurchaseHeader."Document Type";
          "Document No." := PurchaseHeader."No.";
          "Posting Date" := PurchaseHeader."Posting Date";
          Type := PurchaseLine.Type;
          "No." := PurchaseLine."No.";
          "Source No." := PurchaseLine."Buy-from Vendor No.";
          Quantity := PurchaseLine.Quantity;
          "HSN/SAC Code" := PurchaseLine."HSN/SAC Code";
          "Location Code" := PurchaseLine."Location Code";
          "Line No." := PurchaseLine."Line No.";
          "Source Type" := "Source Type"::Vendor;
          "Input Service Distribution" := PurchaseHeader."GST Input Service Distribution";
          Exempted := PurchaseLine.Exempted;
          IF PurchaseHeader."Document Type" IN [PurchaseHeader."Document Type"::"Credit Memo",
                                                PurchaseHeader."Document Type"::"Return Order"]
          THEN
            IF PurchaseHeader."Applies-to Doc. No." <> '' THEN BEGIN
              "Original Invoice No." := PurchaseHeader."Applies-to Doc. No.";
              PurchInvHeader.GET(PurchaseHeader."Applies-to Doc. No.");
              "Original Invoice Date" := PurchInvHeader."Posting Date";
            END;
          IF (PurchaseHeader."GST Vendor Type" IN
              [PurchaseHeader."GST Vendor Type"::Composite,PurchaseHeader."GST Vendor Type"::Exempted]) OR PurchaseLine.Exempted
          THEN BEGIN
            GSTPercentage := 0;
            GSTAmount := 0;
          END ELSE
            IF PurchaseLine."GST Credit" = PurchaseLine."GST Credit"::Availment THEN
              "GST Input/Output Credit Amount" := Sign * GSTAmount
            ELSE
              "Amount Loaded on Item" := Sign * GSTAmount;
          "GST Base Amount" := GSTBaseAmount * Sign;
          "GST Amount" := GSTAmount * Sign;
          "GST Base Amount (LCY)" := ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Base Amount",CurrencyFactor,"Posting Date");
          "GST Amount (LCY)" := ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Amount",CurrencyFactor,"Posting Date") ;
          "Custom Duty Amount" := Sign * PurchaseLine."Custom Duty Amount";
          "GST Assessable Value" := Sign * PurchaseLine."GST Assessable Value";
          "Custom Duty Amount (LCY)" :=
            ConvertGSTBaseAmountToLCY(CurrencyCode,"Custom Duty Amount",CurrencyFactor,"Posting Date") * Sign;
          "GST Assessable Value (LCY)" :=
            ConvertGSTBaseAmountToLCY(CurrencyCode,"GST Assessable Value",CurrencyFactor,"Posting Date") * Sign;
          "GST %" := GSTPercentage;
          UpdatePurchaseGSTRegNo(DetailedGSTEntryBuffer,PurchaseHeader,PurchaseLine);
        END;
      END;
    END;

    PROCEDURE GetGSTRefundAccountNo@1500171(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      GSTPostingSetup.TESTFIELD("Refund Account");
      EXIT(GSTPostingSetup."Refund Account");
    END;

    LOCAL PROCEDURE IsFreeSupply@1500184(SalesHeader@1500000 : Record 36) : Boolean;
    VAR
      StructureDetails@1500001 : Record 13793;
    BEGIN
      IF SalesHeader."Free Supply" THEN BEGIN
        StructureDetails.SETRANGE(Code,SalesHeader.Structure);
        StructureDetails.SETRANGE(Type,StructureDetails.Type::GST);
        StructureDetails.SETRANGE("Include Line Discount",TRUE);
        IF StructureDetails.FINDFIRST THEN
          EXIT(TRUE);
        EXIT(FALSE);
      END;
    END;

    PROCEDURE SettlementStart@1500085();
    BEGIN
      UsedForSettlement := TRUE;
    END;

    PROCEDURE UpdateGSTAccountingPeriod@1500087(PostingDate@1500001 : Date);
    VAR
      GSTAccountingSubPeriod@1500000 : Record 16402;
    BEGIN
      WITH GSTAccountingSubPeriod DO BEGIN
        SETFILTER("Starting Date",'<=%1',PostingDate);
        MODIFYALL(Closed,TRUE);
      END;
    END;

    PROCEDURE RoundGSTPrecisionRefund@1500200(GSTAmount@1500000 : Decimal;GSTRoundingPrecision@1500001 : Decimal;GSTRoundingType@1500002 : 'Nearest,Up,Down') : Decimal;
    VAR
      GSTRoundingDirection@1500003 : Text[1];
    BEGIN
      CASE GSTRoundingType OF
        GSTRoundingType::Nearest:
          GSTRoundingDirection := '=';
        GSTRoundingType::Up:
          GSTRoundingDirection := '>';
        GSTRoundingType::Down:
          GSTRoundingDirection := '<';
      END;
      EXIT(ROUND(GSTAmount,GSTRoundingPrecision,GSTRoundingDirection));
    END;

    LOCAL PROCEDURE GetLastClosedSubAccPeriod@1500110() : Date;
    VAR
      GSTAccountingSubPeriod@1500102 : Record 16402;
    BEGIN
      GSTAccountingSubPeriod.SETRANGE(Closed,TRUE);
      IF GSTAccountingSubPeriod.FINDLAST THEN
        EXIT(GSTAccountingSubPeriod."Starting Date");
    END;

    PROCEDURE GetReceivableApplicable@1500086(GSTVendorType@1500000 : ' ,Registered,Composite,Unregistered,Import,Exempted,SEZ';GSTGroupType@1500001 : 'Goods,Service';GSTCredit@1500002 : ' ,Availment,Non-Availment';AssociatedEnterprises@1500003 : Boolean;ReverseCharge@1500004 : Boolean) : Boolean;
    BEGIN
      IF GSTCredit = GSTCredit::Availment THEN
        CASE GSTVendorType OF
          GSTVendorType::Registered:
            BEGIN
              IF ReverseCharge THEN
                EXIT(FALSE);
              EXIT(TRUE);
            END;
          GSTVendorType::Unregistered:
            IF GSTGroupType = GSTGroupType::Goods THEN
              EXIT(TRUE);
          GSTVendorType::Import,GSTVendorType::SEZ:
            BEGIN
              IF GSTGroupType = GSTGroupType::Goods THEN
                EXIT(TRUE);
              EXIT(AssociatedEnterprises = TRUE);
            END;
        END;
    END;

    LOCAL PROCEDURE GetPurchaseLiable@1170000000(GSTVendorType@1170000001 : ' ,Registered,Composite,Unregistered,Import,Exempted,SEZ';GSTGroupType@1170000000 : 'Goods,Service';AssociatedEnterprises@1170000002 : Boolean) : Boolean;
    BEGIN
      CASE GSTVendorType OF
        GSTVendorType::Unregistered:
          EXIT(GSTGroupType = GSTGroupType::Goods);
        GSTVendorType::Import:
          BEGIN
            IF (GSTGroupType = GSTGroupType::Goods) AND AssociatedEnterprises THEN
              EXIT(FALSE);
            EXIT(AssociatedEnterprises);
          END;
        GSTVendorType::SEZ:
          EXIT(AssociatedEnterprises);
      END;
    END;

    LOCAL PROCEDURE VerifyReverseChargeLines@1500051(PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
      TotalGoodsTypeLine@1500003 : Integer;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        IF NOT ("GST Vendor Type" = "GST Vendor Type"::Registered) THEN
          EXIT;
        PurchaseLine.SETRANGE("Document Type","Document Type");
        PurchaseLine.SETRANGE("Document No.","No.");
        PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
        PurchaseLine.SETFILTER(Quantity,'<>%1',0);
        PurchaseLine.SETRANGE("GST Reverse Charge",TRUE);
        TotalGoodsTypeLine := PurchaseLine.COUNT;
        IF (TotalGoodsTypeLine > 0) AND "GST Input Service Distribution" THEN
          ERROR(GSTReverseChargeVendorErr);
        PurchaseLine.SETRANGE("GST Reverse Charge");
        PurchaseLine.SETRANGE("GST Reverse Charge",FALSE);
        IF (TotalGoodsTypeLine > 0) AND (PurchaseLine.COUNT > 0) THEN
          ERROR(
            STRSUBSTNO(
              SimilarReverseChargeLineErr,FIELDCAPTION("Document Type"),FORMAT("Document Type"),FIELDCAPTION("No."),"No."));
      END;
    END;

    PROCEDURE IsItReverseCharge@1500088(PurchaseHeader@1500000 : Record 38) : Boolean;
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      WITH PurchaseHeader DO BEGIN
        IF "GST Vendor Type" IN ["GST Vendor Type"::Unregistered,"GST Vendor Type"::Import,"GST Vendor Type"::SEZ] THEN
          EXIT(TRUE);
        IF "GST Vendor Type" = "GST Vendor Type"::Registered THEN BEGIN
          PurchaseLine.SETRANGE("Document Type","Document Type");
          PurchaseLine.SETRANGE("Document No.","No.");
          PurchaseLine.SETFILTER(Quantity,'<>%1',0);
          PurchaseLine.SETRANGE("GST Reverse Charge",TRUE);
          IF PurchaseLine.COUNT <> 0 THEN
            EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetGSTExpenseAccountNo@1500092(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      GSTPostingSetup.TESTFIELD("Expense Account");
      EXIT(GSTPostingSetup."Expense Account");
    END;

    PROCEDURE GetGSTMismatchAccountNo@1500091(GSTStateCode@1500001 : Code[10];GSTComponentCode@1500002 : Code[10]) : Code[20];
    VAR
      GSTPostingSetup@1500000 : Record 16406;
    BEGIN
      GSTPostingSetup.GET(GSTStateCode,GSTComponentCode);
      GSTPostingSetup.TESTFIELD("GST Credit Mismatch Account");
      EXIT(GSTPostingSetup."GST Credit Mismatch Account");
    END;

    PROCEDURE RoundTotalGSTAmountforGSTAssessable@1500099(TransactionType@1500010 : 'Purchase,Sale,Transfer,Service';DocumentType@1500009 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1500008 : Code[20];LineNo@1500007 : Integer;CurrencyCode@1500002 : Code[10]) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500005 : Record 16412;
      TotalGSTAmount@1500000 : Decimal;
      Sign@1500001 : Integer;
    BEGIN
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTEntryBuffer.SETRANGE("Document Type",DocumentType);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DocumentNo);
      DetailedGSTEntryBuffer.SETRANGE("Line No.",LineNo);
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          IF DetailedGSTEntryBuffer."Amount Loaded on Item" <> 0 THEN
            TotalGSTAmount +=
              (DetailedGSTEntryBuffer."Amount Loaded on Item" / DetailedGSTEntryBuffer."GST Base Amount") *
              (DetailedGSTEntryBuffer."Custom Duty Amount" + DetailedGSTEntryBuffer."GST Assessable Value")
          ELSE
            IF DetailedGSTEntryBuffer."GST Input/Output Credit Amount" <> 0 THEN
              TotalGSTAmount +=
                (DetailedGSTEntryBuffer."GST Input/Output Credit Amount" / DetailedGSTEntryBuffer."GST Base Amount") *
                (DetailedGSTEntryBuffer."Custom Duty Amount" + DetailedGSTEntryBuffer."GST Assessable Value");
          IF CurrencyCode = '' THEN
            TotalGSTAmount := RoundGSTPrecision(TotalGSTAmount);
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      IF DocumentType IN [DocumentType::Order,DocumentType::Invoice,DocumentType::Quote,DocumentType::"Blanket Order"] THEN
        Sign := 1
      ELSE
        IF DocumentType IN [DocumentType::"Return Order",DocumentType::"Credit Memo"] THEN
          Sign := -1;
      IF TransactionType = TransactionType::Purchase THEN
        Sign := Sign * 1
      ELSE
        Sign := Sign * -1;
      EXIT(TotalGSTAmount * Sign);
    END;

    LOCAL PROCEDURE GetUnitConversionRate@1500094(GSTCalculationBuffer@1500000 : Record 16421;ItemNo@1500001 : Code[20];UOM@1500002 : Code[10]) : Decimal;
    VAR
      ItemUnitOfMeasure@1500005 : Record 5404;
      Item@1500003 : Record 27;
      ConversionRate@1500004 : Decimal;
      UOMConversionRate@1500007 : Decimal;
    BEGIN
      ConversionRate := 1;
      ItemUnitOfMeasure.SETRANGE("Item No.",ItemNo);
      ItemUnitOfMeasure.SETRANGE(Code,GSTCalculationBuffer."Cess UOM");
      IF ItemUnitOfMeasure.FINDFIRST THEN BEGIN
        ItemUnitOfMeasure.TESTFIELD("Qty. per Unit of Measure");
        UOMConversionRate := ItemUnitOfMeasure."Qty. per Unit of Measure";
        IF UOM = GSTCalculationBuffer."Cess UOM" THEN
          EXIT(ConversionRate);
        Item.GET(ItemNo);
        IF Item."Base Unit of Measure" <> UOM THEN BEGIN
          ItemUnitOfMeasure.SETRANGE(Code,UOM);
          IF ItemUnitOfMeasure.FINDFIRST THEN BEGIN
            ItemUnitOfMeasure.TESTFIELD("Qty. per Unit of Measure");
            ConversionRate := ConversionRate * ItemUnitOfMeasure."Qty. per Unit of Measure";
          END;
        END;
        EXIT(ConversionRate / UOMConversionRate);
      END;
      ERROR(UOMNotExistErr,GSTCalculationBuffer."Cess UOM",ItemNo);
    END;

    LOCAL PROCEDURE CompCalcTypeWiseCalculation@1500793(GSTCalculationBuffer@1500000 : Record 16421;Item@1500001 : Boolean;CalculatedAmount@1500002 : Decimal;LineQty@1500005 : Decimal;ItemNo@1500006 : Code[20];UOM@1500007 : Code[10]) : Decimal;
    VAR
      CessAmount@1500003 : Decimal;
      AmountPerunit@1500004 : Decimal;
      GSTAmount@1500008 : Decimal;
    BEGIN
      IF (GSTCalculationBuffer."Component Calc. Type" IN
          [GSTCalculationBuffer."Component Calc. Type"::"Cess % + Amount / Unit Factor",
           GSTCalculationBuffer."Component Calc. Type"::"Cess % Or Amount / Unit Factor Whichever Higher"]) AND Item
      THEN
        CessAmount := CalculatedAmount;
      IF (GSTCalculationBuffer."Component Calc. Type" IN
          [GSTCalculationBuffer."Component Calc. Type"::"Cess % + Amount / Unit Factor",
           GSTCalculationBuffer."Component Calc. Type"::"Cess % Or Amount / Unit Factor Whichever Higher",
           GSTCalculationBuffer."Component Calc. Type"::"Amount / Unit Factor"]) AND Item
      THEN BEGIN
        GSTCalculationBuffer.TESTFIELD("Cess Factor Quantity");
        GSTCalculationBuffer.TESTFIELD("Cess UOM");
        GSTCalculationBuffer.TESTFIELD("Cess Amount Per Unit Factor");
        AmountPerunit :=
          ((LineQty * GetUnitConversionRate(GSTCalculationBuffer,ItemNo,UOM)) /
           GSTCalculationBuffer."Cess Factor Quantity") * GSTCalculationBuffer."Cess Amount Per Unit Factor";
      END;
      CASE GSTCalculationBuffer."Component Calc. Type" OF
        GSTCalculationBuffer."Component Calc. Type"::General,GSTCalculationBuffer."Component Calc. Type"::"Cess %",
        GSTCalculationBuffer."Component Calc. Type"::Threshold:
          GSTAmount := CalculatedAmount;
        GSTCalculationBuffer."Component Calc. Type"::"Amount / Unit Factor":
          GSTAmount := AmountPerunit;
        GSTCalculationBuffer."Component Calc. Type"::"Cess % + Amount / Unit Factor":
          GSTAmount := CessAmount + AmountPerunit;
        GSTCalculationBuffer."Component Calc. Type"::"Cess % Or Amount / Unit Factor Whichever Higher":
          IF AmountPerunit > CessAmount THEN
            GSTAmount := AmountPerunit
          ELSE
            GSTAmount := CessAmount;
      END;
      EXIT(GSTAmount);
    END;

    PROCEDURE ConvertAmountLCYToFCYRoundSmall@1500095(CurrencyCode@1500001 : Code[10];Amount@1500002 : Decimal;CurrencyFactor@1500005 : Decimal;PostingDate@1500003 : Date) : Decimal;
    VAR
      CurrExchRate@1500000 : Record 330;
      GLSetup@1500004 : Record 98;
    BEGIN
      GLSetup.GET;
      IF CurrencyCode = '' THEN
        EXIT(Amount);
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            PostingDate,CurrencyCode,Amount,CurrencyFactor),
          GLSetup."Unit-Amount Rounding Precision"));
    END;

    BEGIN
    END.
  }
}

