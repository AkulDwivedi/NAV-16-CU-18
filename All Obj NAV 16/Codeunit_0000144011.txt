OBJECT Codeunit 144011 TCS Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500007 : Record 98;
      AssesseeCode@1500013 : Record 13727;
      NodNocHeader@1500012 : Record 13786;
      TcsNatureOfCollection@1500011 : Record 16507;
      TCSSetup@1500010 : Record 16508;
      CompanyInformation@1500014 : Record 79;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryRandom@1500001 : Codeunit 130440;
      LibraryInventory@1500003 : Codeunit 132201;
      LibrarySales@1500004 : Codeunit 130509;
      LibrarySetupStorage@1500009 : Codeunit 131009;
      LibraryTCS@1500002 : Codeunit 143008;
      LibraryVariableStorage@1500017 : Codeunit 131004;
      LibraryUtility@1500015 : Codeunit 131000;
      Assert@1500006 : Codeunit 130000;
      LibraryReportDataset@1500018 : Codeunit 131007;
      isInitialized@1500005 : Boolean;
      AmountErr@1500008 : TextConst '@@@="%1 and %2 = TDS% and TDS field Caption";ENU=%1 is incorrect in %2.';
      ErrorTxt@1500019 : TextConst 'ENU=was not found';
      ErrorMisMatchTxt@1500020 : TextConst 'ENU=Error does not match';

    [Test]
    PROCEDURE CreateSalesCreditMemoWithTCS@1500112();
    VAR
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
    BEGIN
      // [SCENARIO 163794 , 163795 , 163796] Create Sales Credit Memo , Calculate TCS and Verify TCS Entries.
      // [FEATURE] [Sales Credit Memo]

      // [GIVEN] Created Setup for TCS
      Initialize;

      // [WHEN] Create Sales Credit Memo With TCS
      DocumentNo := CreateAndPostSalesDocument(
          SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo");

      // [THEN] TCS Entry has been created.
      VerifyTCSEntry(DocumentNo,SalesLine."Amount Including VAT",1);
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceWithTCSForeignCurrencyCheckGL@1500002();
    VAR
      SalesHeader@1500472 : Record 36;
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
    BEGIN
      // [SCENARIO 163691] Create Sales Order in Foreign Currency , Calculate TCS and Verify G/L Entries.
      // [FEATURE] [Sales Order]

      // [GIVEN] Created Setup for TCS
      Initialize;

      // [WHEN] Create Sales Order With TCS in Foreign Currency
      DocumentNo := CreateAndPostSalesDocumentForeignCurrency(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [THEN] G/L Entries have been created.
      VerifyGlAcc(DocumentNo,SalesLine."No.",SalesLine."Amount Including VAT",SalesHeader."Currency Factor");
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceWithPrepaymentFullApplcatnTCSCheckGL@1500001();
    VAR
      SalesLine@1500482 : Record 37;
      TCSEntry@1500002 : Record 16514;
      DocumentNo@1500492 : Code[20];
      GenJnlDocNo@1500001 : Code[20];
      BalAccNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163699] Create Payment Journal with TCS, Apply with Sales Order , Calculate TCS and verify G/L Entries.
      // [FEATURE] [Sales Order]

      // [GIVEN] Created Setup for TCS And Posted Journal With TCS
      Initialize;
      CreateAndPostGeneralJournalForTCS(GenJnlDocNo,BalAccNo);

      // [WHEN] Create Sales Order With TCS and Apply with Payment Document
      DocumentNo := CreateValidateAndPostSalesDocumentApplicationFull(SalesLine,GenJnlDocNo);
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDLAST;

      // [THEN] G/L Entries have been created.
      VerifyGlAccFullAdvancePaymentAppTCS(
        DocumentNo,SalesLine."No.",SalesLine."Amount Including VAT" + TCSEntry."Total TCS Including SHE CESS",
        SalesLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceWithPrepaymentPartialApplctnTCSCheckGL@1500015();
    VAR
      SalesLine@1500482 : Record 37;
      DocumentNo@1500492 : Code[20];
      GenJnlDocNo@1500001 : Code[20];
      BalAccNo@1500002 : Code[20];
    BEGIN
      // [SCENARIO 163700] Create Payment Journal with TCS, Apply Partial with Sales Order , Calculate TCS and verify G/L Entries.
      // [FEATURE] [Sales Order]

      // [GIVEN] Created Setup for TCS And Posted Journal With TCS
      Initialize;
      CreateAndPostGeneralJournalForTCS(GenJnlDocNo,BalAccNo);

      // [WHEN] Create Sales Order With TCS and Apply with Payment Document
      DocumentNo := CreateValidateAndPostSalesDocumentApplicationPartial(SalesLine,GenJnlDocNo);

      // [THEN] G/L Entries have been created.
      VerifyGlAccPartialAdvancePaymentAppTCS(GenJnlDocNo,DocumentNo,BalAccNo,SalesLine."No.",SalesLine."Amount Including VAT");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateTCSChallanRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,UpdateTCSFilingRequestPageHandler)]
    PROCEDURE SalesInvoiceWithTCSPaymentAndUpdateTCSRegister@1500016();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalTemplate@1500001 : Record 80;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500003 : Record 37;
      TCSBatchHeader@1500004 : Record 16515;
      Form27EQEntry@1500007 : Record 16517;
      DocumentNo@1500000 : Code[20];
      FileName@1500006 : Text;
    BEGIN
      // [SCENARIO 163772] Error is generated when Payment Journal is created and Challan is updtaed for TCS Payment after Posting Sales Order With TCS
      // [FEATURE] [Sales Order] [Payment Journal] [TCS] [Update Challan] [Update Challan Register]

      // [GIVEN] Created Setup for TCS And Posted Sales Order With TCS
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Create Payment Journal and post,Generate e-TCS 27EQ, Update TCS Filing ,modify Company And Customerinfo
      DocumentNo := CreateAndPostSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      CreateJournalForTCSPaymentWithBalAcc(GenJournalLine,GenJournalTemplate.Type::Payments,GenJournalTemplate."Sub Type"::" ");
      LibraryVariableStorage.Enqueue(GenJournalLine."Journal Template Name");
      LibraryTCS.PayTCS(GenJournalLine."Journal Batch Name");
      VerifyTCSAmountAndPost(GenJournalLine."Document No.",DocumentNo);
      UpdateTCSRegisterAndGenerateCertificate(GenJournalLine."Document No.");
      LibraryTCS.Form27EQReportFieldsValidation;
      REPORT.RUN(REPORT::"Form 27EQ");
      FileName := TEMPORARYPATH + LibraryUtility.GenerateGUID + '.txt';
      LibraryVariableStorage.Enqueue(FileName);
      COMMIT;
      REPORT.RUN(REPORT::"Generate e-TCS 27EQ",TRUE,FALSE,TCSBatchHeader);
      REPORT.RUN(REPORT::"Update TCS Filing",TRUE,TRUE,Form27EQEntry);
      ModifyCompanyAddPhone;
      ModifyCustomerAddPAN;
      COMMIT;
      REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Error is generated when E-TCS 27EQ is run after TCS filing
      FileName := TEMPORARYPATH + LibraryUtility.GenerateGUID + '.txt';
      LibraryVariableStorage.Enqueue(FileName);
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Generate e-TCS 27EQ",TRUE,TRUE,TCSBatchHeader);
      Assert.AreNotEqual(0,STRPOS(GETLASTERRORTEXT,ErrorTxt),ErrorMisMatchTxt);
    END;

    LOCAL PROCEDURE Initialize@1500222();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      CompanyInformation.GET;
      CreateDeductoryCodeInCompanyInformation;
      GeneralLedgerSetup.GET;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      isInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@1500442(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;DocumentType@1500951 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order') : Code[20];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocHeader."No.");
      CreateAndValidateSalesLine(SalesHeader,SalesLine);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateValidateAndPostSalesDocumentApplicationFull@1500023(VAR SalesLine@1500931 : Record 37;GenJnlDocNo@1500000 : Code[20]) : Code[20];
    VAR
      SalesHeader@1500001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocHeader."No.");
      ValidateSalesHeaderApplication(SalesHeader,GenJnlDocNo);
      CreateAndValidateSalesLineFullAdvancePayment(SalesHeader,SalesLine,GenJnlDocNo);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateValidateAndPostSalesDocumentApplicationPartial@1500018(VAR SalesLine@1500931 : Record 37;GenJnlDocNo@1500000 : Code[20]) : Code[20];
    VAR
      SalesHeader@1500001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NodNocHeader."No.");
      ValidateSalesHeaderApplication(SalesHeader,GenJnlDocNo);
      CreateAndValidateSalesLinePartialAdvancePayment(SalesHeader,SalesLine,GenJnlDocNo);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentForeignCurrency@1500005(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;DocumentType@1500000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order') : Code[20];
    BEGIN
      CreateSalesHeaderForeignCurrency(SalesHeader,DocumentType,NodNocHeader."No.");
      CreateAndValidateSalesLine(SalesHeader,SalesLine);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournalForTCS@1500011(VAR GenJnlDocNo@1500005 : Code[20];VAR BalAccNo@1500000 : Code[20]);
    VAR
      GenJournalBatch@1500001 : Record 232;
      GenJournalLine@1500002 : Record 81;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        NodNocHeader."No.",-LibraryRandom.RandDecInRange(10000,20000,2));
      ValidateGenJournalLine(GenJournalLine);
      GenJnlDocNo := GenJournalLine."Document No.";
      BalAccNo := GenJournalLine."Bal. Account No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateJournalForTCSPaymentWithBalAcc@1500019(VAR GenJournalLine@1500000 : Record 81;TemplateType@1500004 : Option;TemplateSubtype@1500003 : Option) : Code[20];
    VAR
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateGeneralJournalBatchWithTemplates(GenJournalBatch,TemplateType,TemplateSubtype);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",
        TCSSetup."TCS Account No.",0);
      GenJournalLine.VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@1500010(VAR Currency@1500001 : Record 4);
    VAR
      GLAccount@1500000 : Record 15;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",Currency."Residual Gains Account");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeInCompanyInformation@1500332();
    VAR
      DeductorCategory@1500921 : Record 16498;
    BEGIN
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@1500012(VAR GenJournalBatch@1500001 : Record 232);
    VAR
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatchWithTemplates@1500026(VAR GenJournalBatch@1500001 : Record 232;TemplateType@1500000 : Option;TemplateSubtype@1500003 : Option);
    VAR
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,TemplateType);
      GenJournalTemplate.VALIDATE("Sub Type",TemplateSubtype);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateSalesHeaderForeignCurrency@1500006(VAR SalesHeader@1500002 : Record 36;DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';CustomerNo@1500000 : Code[20]);
    VAR
      Currency@1500004 : Record 4;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      CreateCurrencyAndExchangeRate(Currency);
      SalesHeader.VALIDATE("Currency Code",Currency.Code);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndValidateSalesLine@1500000(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37);
    VAR
      Item@1500000 : Record 27;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandDec(1,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(10000,20000,2));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.CalculateTCS(SalesHeader);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndValidateSalesLineFullAdvancePayment@1500013(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;GenJnlDocNo@1500003 : Code[20]);
    VAR
      Item@1500000 : Record 27;
      Quantity@1500002 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandDec(2,2);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),Quantity);
      SalesLine.VALIDATE("Unit Price",GetTCSBaseAmount(GenJnlDocNo) / Quantity);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.CalculateTCS(SalesHeader);
      SalesLine.MODIFY(TRUE);
      VerifySaleslineUponFullPaymentApplicationTCS(SalesLine);
    END;

    LOCAL PROCEDURE CreateAndValidateSalesLinePartialAdvancePayment@1500021(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;GenJnlDocNo@1500003 : Code[20]);
    VAR
      Item@1500000 : Record 27;
      Quantity@1500002 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandDecInRange(1,2,2);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),Quantity);
      SalesLine.VALIDATE("Unit Price",GetTCSBaseAmount(GenJnlDocNo));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.CalculateTCS(SalesHeader);
      SalesLine.MODIFY(TRUE);
      VerifySaleslineUponPartialPaymentApplicationTCS(SalesLine);
    END;

    LOCAL PROCEDURE GenerateCertificateNos@1500047();
    BEGIN
      COMMIT;
      REPORT.RUN(REPORT::"Generate TCS Certificate Nos.");
    END;

    LOCAL PROCEDURE GetCustomerAccount@1500007(CustomerNo@1500000 : Code[20]) : Code[20];
    VAR
      Customer@1500001 : Record 18;
      CustomerPostingGroup@1500002 : Record 92;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      EXIT(CustomerPostingGroup."Receivables Account");
    END;

    LOCAL PROCEDURE GetSalesAccount@1500008(CustomerNo@1500001 : Code[20];ItemNo@1500000 : Code[20]) : Code[20];
    VAR
      Customer@1500002 : Record 18;
      Item@1500003 : Record 27;
      GeneralPostingSetup@1500004 : Record 252;
    BEGIN
      Customer.GET(CustomerNo);
      Item.GET(ItemNo);
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      EXIT(GeneralPostingSetup."Sales Account");
    END;

    LOCAL PROCEDURE GetTCSBaseAmount@1500017(GenJnlDocNo@1500001 : Code[20]) : Decimal;
    VAR
      TCSEntry@1500000 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("Document No.",GenJnlDocNo);
      TCSEntry.FINDFIRST;
      EXIT(TCSEntry."TCS Base Amount");
    END;

    LOCAL PROCEDURE ModifyCompanyAddPhone@1500041();
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.VALIDATE(Address,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      CompanyInformation.VALIDATE("Phone No.",FORMAT(LibraryRandom.RandIntInRange(1000000000,2000000000)));
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyCustomerAddPAN@1500044();
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      Customer.GET(NodNocHeader."No.");
      Customer.VALIDATE(Address,COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Customer.VALIDATE("P.A.N. Status",Customer."P.A.N. Status"::PANINVALID);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValidateGenJournalLine@1500014(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Customer);
      GenJournalLine.VALIDATE("Party Code",GenJournalLine."Account No.");
      GenJournalLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValidateSalesHeaderApplication@1500024(VAR SalesHeader@1500001 : Record 36;GenJnlDocNo@1500000 : Code[20]);
    BEGIN
      SalesHeader.VALIDATE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::Payment);
      SalesHeader.VALIDATE("Applies-to Doc. No.",GenJnlDocNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTCSRegisterAndGenerateCertificate@1500022(GenJournalDoc@1500000 : Code[20]);
    VAR
      TCSEntry@1500001 : Record 16514;
      ChallanNo@1500002 : Code[4];
    BEGIN
      TCSEntry.SETRANGE("Pay TCS Document No.",GenJournalDoc);
      TCSEntry.FINDFIRST;
      ChallanNo := FORMAT(LibraryRandom.RandInt(2000));
      LibraryVariableStorage.Enqueue(GenJournalDoc);
      LibraryVariableStorage.Enqueue(ChallanNo);
      REPORT.RUN(REPORT::"Update TCS Challan Details");
      UpdateTCSChallanRegisterDetails(GenJournalDoc);
      GenerateCertificateNos;
    END;

    LOCAL PROCEDURE VerifyTCSAmountAndPost@1500065(JournalDocNo@1500000 : Code[20];DocumentNo@1500002 : Code[20]);
    VAR
      TCSEntry@1500001 : Record 16514;
      GenJournalLine@1500003 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Document No.",JournalDocNo);
      GenJournalLine.FINDFIRST;
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        TCSEntry."Bal. TCS Including SHE CESS",GenJournalLine.Amount,GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(AmountErr,GenJournalLine.FIELDNAME(Amount),GenJournalLine.TABLECAPTION));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500372(DocumentNo@1500200 : Code[20];TCSBaseAmount@1500641 : Decimal;CurrencyFactor@1500005 : Decimal);
    VAR
      TCSEntry@1500115 : Record 16514;
      ExpectedTCSAmount@1500000 : Decimal;
      ExpectedSurchargeAmount@1500001 : Decimal;
      ExpectedEcessAmount@1500002 : Decimal;
      ExpectedSHEcessAmount@1500003 : Decimal;
    BEGIN
      ExpectedTCSAmount := TCSBaseAmount * TCSSetup."TCS %" / 100 / CurrencyFactor;
      ExpectedSurchargeAmount := ExpectedTCSAmount * TCSSetup."Surcharge %" / 100;
      ExpectedEcessAmount := (ExpectedTCSAmount + ExpectedSurchargeAmount) * TCSSetup."eCESS %" / 100;
      ExpectedSHEcessAmount := (ExpectedTCSAmount + ExpectedSurchargeAmount) * TCSSetup."SHE Cess %" / 100;
      WITH TCSEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          TCSBaseAmount / CurrencyFactor,"TCS Base Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("TCS Base Amount"),TABLECAPTION));
        Assert.AreEqual(
          TCSSetup."TCS %","TCS %",
          STRSUBSTNO(AmountErr,FIELDNAME("TCS %"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedTCSAmount,"TCS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("TCS Amount"),TABLECAPTION));
        Assert.AreEqual(
          TCSSetup."Surcharge %","Surcharge %",
          STRSUBSTNO(AmountErr,FIELDNAME("Surcharge %"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedSurchargeAmount,"Surcharge Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("Surcharge Amount"),TABLECAPTION));
        Assert.AreEqual(
          TCSSetup."eCESS %","eCESS %",
          STRSUBSTNO(AmountErr,FIELDNAME("eCESS %"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedEcessAmount,"eCESS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("eCESS Amount"),TABLECAPTION));
        Assert.AreEqual(
          TCSSetup."SHE Cess %","SHE Cess %",
          STRSUBSTNO(AmountErr,FIELDNAME("SHE Cess %"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedSHEcessAmount,"SHE Cess Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("SHE Cess Amount"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyGlAcc@1500003(DocumentNo@1500200 : Code[20];ItemNo@1500007 : Code[20];TCSBaseAmount@1500641 : Decimal;CurrencyFactor@1500005 : Decimal);
    VAR
      TCSEntry@1500115 : Record 16514;
    BEGIN
      VerifyGLEntry(GetSalesAccount(NodNocHeader."No.",ItemNo),DocumentNo,-TCSBaseAmount / CurrencyFactor);
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      VerifyGLEntry(TCSSetup."TCS Account No.",DocumentNo,-TCSEntry."Total TCS Including SHE CESS");
      VerifyGLEntry(
        GetCustomerAccount(NodNocHeader."No."),DocumentNo,TCSBaseAmount / CurrencyFactor + TCSEntry."Total TCS Including SHE CESS");
    END;

    LOCAL PROCEDURE VerifyGlAccFullAdvancePaymentAppTCS@1500025(DocumentNo@1500200 : Code[20];ItemNo@1500007 : Code[20];TCSBaseAmountInclTCS@1500000 : Decimal;TCSBaseAmount@1500001 : Decimal);
    BEGIN
      VerifyGLEntry(GetSalesAccount(NodNocHeader."No.",ItemNo),DocumentNo,-TCSBaseAmount);
      VerifyGLEntry(
        GetCustomerAccount(NodNocHeader."No."),DocumentNo,TCSBaseAmountInclTCS);
    END;

    LOCAL PROCEDURE VerifyGlAccPartialAdvancePaymentAppTCS@1500035(GenJnlDocNo@1500001 : Code[20];DocumentNo@1500200 : Code[20];BalAccNo@1500000 : Code[20];ItemNo@1500007 : Code[20];SalesAmount@1500002 : Decimal);
    VAR
      TCSEntry@1500115 : Record 16514;
    BEGIN
      VerifyGLEntry(GetSalesAccount(NodNocHeader."No.",ItemNo),DocumentNo,-SalesAmount);
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      VerifyGLEntry(TCSSetup."TCS Account No.",DocumentNo,-TCSEntry."Total TCS Including SHE CESS");
      VerifyGLEntry(
        GetCustomerAccount(NodNocHeader."No."),DocumentNo,SalesAmount + TCSEntry."Total TCS Including SHE CESS");

      TCSEntry.SETRANGE("Document No.",GenJnlDocNo);
      TCSEntry.FINDFIRST;
      VerifyGLEntry(
        GetCustomerAccount(NodNocHeader."No."),GenJnlDocNo,-TCSEntry."TCS Base Amount");
      VerifyGLEntry(TCSSetup."TCS Account No.",GenJnlDocNo,-TCSEntry."Total TCS Including SHE CESS");
      VerifyGLEntry(
        BalAccNo,GenJnlDocNo,TCSEntry."TCS Base Amount" + TCSEntry."Total TCS Including SHE CESS");
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500009(GLAccNo@1500002 : Code[20];DocNo@1500001 : Code[20];ExpectedAmount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ExpectedAmount,GLEntry.Amount,GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(AmountErr,GLEntry.FIELDNAME(Amount),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifySaleslineUponFullPaymentApplicationTCS@1500020(SalesLine@1500000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        Assert.AreEqual(0,"TDS/TCS Amount",STRSUBSTNO(AmountErr,FIELDNAME("TDS/TCS Amount"),TABLECAPTION));
        Assert.AreEqual(0,"Surcharge Amount",STRSUBSTNO(AmountErr,FIELDNAME("Surcharge Amount"),TABLECAPTION));
        Assert.AreEqual(0,"eCESS on TDS/TCS Amount",STRSUBSTNO(AmountErr,FIELDNAME("eCESS on TDS/TCS Amount"),TABLECAPTION));
        Assert.AreEqual(0,"SHE Cess on TDS/TCS Amount",STRSUBSTNO(AmountErr,FIELDNAME("SHE Cess on TDS/TCS Amount"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifySaleslineUponPartialPaymentApplicationTCS@1500031(SalesLine@1500000 : Record 37);
    VAR
      TCSSurchargeAmount@1500001 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        Assert.AreNearlyEqual(
          "TDS/TCS Base Amount" * TCSSetup."TCS %" / 100,"TDS/TCS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("TDS/TCS Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          "TDS/TCS Amount" * TCSSetup."Surcharge %" / 100,"Surcharge Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("Surcharge Amount"),TABLECAPTION));
        TCSSurchargeAmount := "TDS/TCS Amount" + "Surcharge Amount";
        Assert.AreNearlyEqual(
          TCSSurchargeAmount * TCSSetup."eCESS %" / 100,"eCESS on TDS/TCS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("eCESS on TDS/TCS Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(
          TCSSurchargeAmount * TCSSetup."SHE Cess %" / 100,"SHE Cess on TDS/TCS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("SHE Cess on TDS/TCS Amount"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE UpdateTCSAccNo@1500040();
    BEGIN
      WITH TCSSetup DO BEGIN
        VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateTCSChallanRegisterDetails@1500034(PayTCSDocNo@1500001 : Code[20]);
    VAR
      TCSChallanRegister@1500000 : Record 16516;
      UpdateTCSChallanRegister@1500002 : Report 16522;
      InterestAmount@1500003 : Decimal;
    BEGIN
      TCSChallanRegister.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSChallanRegister.FINDFIRST;
      COMMIT;
      UpdateTCSChallanRegister.SETTABLEVIEW(TCSChallanRegister);
      InterestAmount := LibraryRandom.RandDec(100,2);
      UpdateTCSChallanRegister.UpdateChallan(InterestAmount,InterestAmount,InterestAmount,TCSChallanRegister."Entry No.");
      UpdateTCSChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateTCSChallanRegister.RUNMODAL;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSChallanRequestPageHandler@1500039(VAR UpdateTCSChallanDetails@1500118 : TestRequestPage 16520);
    VAR
      PayTCSDocumentNo@1500001 : Variant;
      ChallanNo@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PayTCSDocumentNo);
      LibraryVariableStorage.Dequeue(ChallanNo);
      UpdateTCSChallanDetails.Control1500001.SETVALUE(PayTCSDocumentNo);
      UpdateTCSChallanDetails.Control1500002.SETVALUE(ChallanNo);
      UpdateTCSChallanDetails.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.Control1500007.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      UpdateTCSChallanDetails.Control1500009.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(7,0),1,7));
      UpdateTCSChallanDetails.Control1500010.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      UpdateTCSChallanDetails.Control1500012.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500029(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    VAR
      GenJournalTemplateName@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GenJournalTemplateName);
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GenJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500118 : TestRequestPage 16517);
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("Starting Date",WORKDATE);
        FINDFIRST;
        GenerateCertificateNos.PartyType.SETVALUE(PartyType::Customer);
        GenerateCertificateNos.Control1280005.SETVALUE(NodNocHeader."No.");
        GenerateCertificateNos.Control1280007.SETVALUE(TCSSetup."TCS Type");
        GenerateCertificateNos.Control1280015.SETVALUE(TRUE);
        GenerateCertificateNos.StartDate.SETVALUE("Starting Date");
        GenerateCertificateNos.EndDate.SETVALUE("Ending Date");
        GenerateCertificateNos.ReceiptNumber.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(8,0),1,8));
        GenerateCertificateNos.OK.INVOKE;
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500501(Text@1500101 : Text;VAR Reply@1500102 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE Form27EQRequestPageHandler@1500068(VAR Form27EQ@1500004 : TestRequestPage 16518);
    VAR
      CurrentQuarter@1500001 : Option;
    BEGIN
      Form27EQ."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27EQ.Control1500010.SETVALUE(CompanyInformation."T.C.A.N. No.");
      LibraryTCS.GetCurrentQuarter(CurrentQuarter);
      Form27EQ.Control1500004.SETVALUE(CurrentQuarter);
      Form27EQ.Control1500012.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      Form27EQ.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      Form27EQ.Control1500001.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Form27EQ.Control1500000.SETVALUE(WORKDATE);
      Form27EQ.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27EQ.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTCSRequestPageHandler@1500071(VAR GenerateeTCS@1500005 : TestRequestPage 16524);
    VAR
      FileName@1500002 : Variant;
      CurrentQuarter@1500000 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      GenerateeTCS.FileName.SETVALUE(FileName);
      GenerateeTCS.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      GenerateeTCS."P.A.N No.".SETVALUE(CompanyInformation."P.A.N. No.");
      LibraryTCS.GetCurrentQuarter(CurrentQuarter);
      GenerateeTCS.Control1500005.SETVALUE(CurrentQuarter);
      GenerateeTCS.Control1500013.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      GenerateeTCS.Control1500000.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTCS.Control1500002.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS.Control1500011.SETVALUE(WORKDATE);
      GenerateeTCS.Control2.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS.Control1500015.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTCS.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTCS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSFilingRequestPageHandler@1500028(VAR UpdateTCSFiling@1500004 : TestRequestPage 16525);
    VAR
      CurrentQuarter@1500001 : Option;
    BEGIN
      UpdateTCSFiling.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      LibraryTCS.GetCurrentQuarter(CurrentQuarter);
      UpdateTCSFiling.Control1500001.SETVALUE(CurrentQuarter);
      UpdateTCSFiling.Control1500000.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      UpdateTCSFiling.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSFiling.Control1500006.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      UpdateTCSFiling.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

