OBJECT Codeunit 144086 ERM Miscellaneous Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Vendor@1500034 : Record 23;
      State@1500033 : Record 13762;
      Location@1500032 : Record 14;
      FromLocation@1500028 : Record 14;
      ToLocation@1500027 : Record 14;
      InTransitLocation@1500023 : Record 14;
      ItemCharge@1500022 : Record 5800;
      TaxArea1@1500021 : Record 318;
      TaxArea2@1500019 : Record 318;
      GeneralLedgerSetup@1500012 : Record 98;
      FormCodes@1500018 : Record 13756;
      Customer@1500017 : Record 18;
      Assert@1500011 : Codeunit 130000;
      LibraryERM@1500002 : Codeunit 131300;
      LibraryInventory@1500024 : Codeunit 132201;
      LibraryItemTracking@1500025 : Codeunit 130502;
      LibraryJournals@1500001 : Codeunit 131306;
      LibraryPurchase@1500010 : Codeunit 130512;
      LibraryRandom@1500004 : Codeunit 130440;
      LibraryReportDataset@1500007 : Codeunit 131007;
      LibrarySales@1500000 : Codeunit 130509;
      LibraryTCS@1500003 : Codeunit 143008;
      LibraryVariableStorage@1500006 : Codeunit 131004;
      LibraryUtility@1500009 : Codeunit 131000;
      CreditAmountErr@1500013 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The expected value is %1 and the actual value is %2.';
      NarrationErr@1500016 : TextConst '@@@="%1 and %2 = Text and Text";ENU=The Expected Narration is %1 and The actual is %2.';
      LibraryWarehouse@1500020 : Codeunit 132204;
      DocumentNo1@1500015 : Code[20];
      DocumentNo2@1500031 : Code[20];
      GenJnlBatchName@1500008 : Code[10];
      GenJnlTemplateName@1500005 : Code[10];
      ValidationErr@1500026 : TextConst '@@@="%1 and %2 = Quantity and Quantity";ENU=The Expected is %1 and the actual is %2.';
      LineNarration@1500030 : ARRAY [4] OF Text;
      VoucherNarration@1500029 : Text;
      TrialBalanceErr@1500014 : TextConst;

    [Test]
    [HandlerFunctions(MessageHandler,ItemChargeAssignmentHandler,ItemChargeAssignMenuEquallyHandler)]
    PROCEDURE PurchaseInvoicePostingWithItemChargeAssignment@1500077();
    VAR
      Item1@1500000 : Record 27;
      Item2@1500001 : Record 27;
      TransferHeader@1500003 : Record 5740;
      TransferLine@1500002 : Record 5741;
      PurchaseHeader@1500004 : Record 38;
    BEGIN
      // [SCENARIO BUG ID 381540] Checking whether GL inconsistency error is thrown while posting purchase Invoice with Item charge Assignment
      // [FEATURE] [Purchase Invoice]

      // [GIVEN] Created Tax area, Tax juridiction, Vendor, Warehouse Setup
      Initialize(TRUE);

      // [WHEN] Create Purchase Invoice with Item charge assignment
      CreateAndPostItemJournalLine(Item1,Item2);
      CreateAndPostTransferOrderWithPostWarehouseShipmentAndRegisterPick(TransferHeader,
        TransferLine,Item1,Item2);
      CreatePurchaseInvoiceWithItemChargeAssignment(PurchaseHeader,TransferHeader);

      // [THEN] Verified that no GL Inconsistency error has been thrown
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE VerifyFormCodeValidateOnSalesOrder@1500098();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      SalesLine1@1500002 : Record 37;
    BEGIN
      // [SCENARIO BUG ID 381100] Verify no error should display while validating form code in Sales order
      // [FEATURE] [Sales Order]

      // [GIVEN] Created Income Tax Setups, Form codes, State
      Initialize(FALSE);
      InitialSetupForFormCode;

      // [WHEN] Create Sales Order With Form Code
      CreateSalesOrderWithFormCode(SalesHeader,SalesLine,SalesLine1);

      // [THEN] Verified no error is encountered while selecting form code in sales header
      SalesHeader.VALIDATE("Form Code",FormCodes.Code);
    END;

    [Test]
    [HandlerFunctions(TrialBalanceRequestHandler)]
    PROCEDURE VerifyTrialBalancePrintToExcel@1500036();
    BEGIN
      // [SCENARIO BUG ID 381176] Verify no error should display while Printing Trial Balance to Excel
      // [FEATURE] [Trial Balance Report]

      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Update the request page details of Trial Balance Report
      LibraryVariableStorage.Enqueue(TRUE);
      ASSERTERROR RunTrialBalanceForAccountTypePosting(FALSE);

      // [THEN] Verified Report Trial Balance print to Excel
      Assert.ExpectedError(TrialBalanceErr);
    END;

    [Test]
    [HandlerFunctions(TrialBalanceRequestHandler)]
    PROCEDURE VerifyTrialBalancePreviewForTotalAmount@1500018();
    BEGIN
      // [SCENARIO 164151] Verify total amount after preview the trial amount with account type posting
      // [FEATURE] [Trial Balance Report]

      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Run Report Trial Balance with Account Type Posting and Date Filter
      LibraryVariableStorage.Enqueue(FALSE);
      RunTrialBalanceForAccountTypePosting(FALSE);

      // [THEN] Verified preview of report Trial Balance
      VerifyTrialBalanceReport;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesMPH,PurchaseTransferReceiptLinesMPH,ItemChargeAssignmentMPH)]
    PROCEDURE VerifyGLEntryForPurchaseInvoiceWhereTransfeReceiptWithItemTracking@1500015();
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      PurchaseHeader1@1500007 : Record 38;
      PurchaseLine1@1500006 : Record 39;
      TransferHeader@1500002 : Record 5740;
      Item@1500003 : Record 27;
      Location@1500004 : Record 14;
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 164382] Verify GL entry after posting the Purchase invoice where Get Transfer Receipt lines with Item Tracking are involved.
      // [FEATURE] [Purchase Invoice With Item Tracking]

      // [GIVEN] Created Income Tax Setups and Item with Tracking
      Initialize(FALSE);
      CreateItemWithLotTracking(Item,Location);

      // [WHEN] Create and post Purchase Order and Transfer Order and Post Purchase Invoice with Item Tracking Line
      CreateAndPostPurchaseDocWithItemTracking(PurchaseHeader,PurchaseLine,Item,Location.Code);
      CreateAndPostTransferOrderWithItemTracking(TransferHeader,Item,Location.Code,PurchaseLine.Quantity);
      DocumentNo :=
        CreateAndPostPurchaseDocWithItemCharge(PurchaseHeader1,PurchaseLine1,TransferHeader,Item."No.",LibraryRandom.RandInt(2));

      // [THEN] Verified the G/L Entry Created
      VerifyGLEntry(DocumentNo,PurchaseHeader1."Document Type"::Invoice,PurchaseLine1.Amount);
    END;

    [Test]
    [HandlerFunctions(RunTestReportRPH)]
    PROCEDURE GenerateTestReportForGenJournalLineForMiscTransactions@1500000();
    VAR
      GenJournalBatch@1500001 : Record 232;
      GenJournalLine@1500002 : Record 81;
    BEGIN
      // [SCENARIO 163529] Create Gen. Journal and Generate Test Report
      // [FEATURE] [Gen. Journal With Test Report]
      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Create the Gen. Journal and Run Test Report.
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::" ");
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,LibraryRandom.RandDec(10000,2));
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");

      // [THEN] Verified the Gen. Journal Entry in Test Report.
      VerifyTestReport;
    END;

    [Test]
    [HandlerFunctions(RunVoucherRegisterRPH)]
    PROCEDURE VerifyBankPaymentVoucherWithBankChargesForMiscTransactions@1500019();
    VAR
      GenJournalLine@1500000 : Record 81;
      BankChargeAmount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 163576] Create Bank Payment Voucher with Bank Charges
      // [FEATURE] [Bank Payment Voucher with Misc Transactions]
      // [GIVEN] Created Income Tax Setups.
      Initialize(FALSE);

      // [WHEN] Create and Post the Bank Payment Journal.
      BankChargeAmount := CreateGenJnlWithBankCharges(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      GenerateVoucherRegReport;

      // [THEN] Verified GL Entry and Bank Ledger Entry
      VerifyGLEntry(
        GenJournalLine."Document No.",GenJournalLine."Document Type",
        GenJournalLine."Amount (LCY)" + BankChargeAmount);
      VerifyBankLedgerEntry(
        GenJournalLine."Bal. Account No.",'',GenJournalLine."Document No.",-(GenJournalLine."Amount (LCY)" + BankChargeAmount),0D);
      VerifyVoucherRegReport(GenJournalLine."Account No.",BankChargeAmount,GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesMPH,ItemChargeAssignmentMPH,PurchaseTransferReceiptLinesMPH)]
    PROCEDURE PurchaseDocWithItemTrackingAndItemChargeForMiscTransactions@1500012();
    VAR
      Item@1500002 : Record 27;
      ItemLedgerEntry@1500009 : Record 32;
      PurchaseHeader1@1500001 : Record 38;
      PurchaseLine1@1500000 : Record 39;
      PurchaseHeader2@1500006 : Record 38;
      PurchaseLine2@1500007 : Record 39;
      TransferHeader@1500003 : Record 5740;
      Location@1500010 : Record 14;
      DocumentNo@1500011 : Code[20];
      ReceiptEntryNo@1500004 : Integer;
      TransferQuantity@1500008 : Decimal;
    BEGIN
      // [SCENARIO 163860] Create Purchase Document With Item Tracking.
      // [FEATURE] [Purchase Transaction with Item Tracking and Charge Item]
      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);
      CreateItemWithLotTracking(Item,Location);

      // [WHEN] Create and Post Purchase Invoice and Transfer Order with Item Tracking.
      TransferQuantity :=
        CreateAndPostDocWithItemTracking(
          PurchaseHeader1,PurchaseLine1,TransferHeader,Item,Location.Code);

      // [THEN] Verified Ledger Entries
      VerifyDocLedgerEntries(
        PurchaseLine1,TransferHeader,PurchaseLine1.Quantity,PurchaseLine1.Quantity - TransferQuantity,TransferQuantity);

      // [WHEN] Create and Post Purchase Invoice With Item Charge
      DocumentNo :=
        CreateAndPostPurchaseDocWithItemCharge(
          PurchaseHeader2,PurchaseLine2,TransferHeader,Item."No.",TransferQuantity);

      // [THEN] Verified GL Entry, Item Ledger Entry and Value Entry
      VerifyGLEntry(DocumentNo,PurchaseHeader2."Document Type"::Invoice,PurchaseLine2.Amount);
      ReceiptEntryNo :=
        VerifyILEAfterCharge(
          ItemLedgerEntry."Document Type"::"Transfer Receipt",TransferHeader."Transfer-to Code",
          PurchaseLine2.Amount + PurchaseLine1."Direct Unit Cost" * TransferQuantity);
      VerifyValueEntry(ItemLedgerEntry."Document Type"::"Purchase Invoice",ReceiptEntryNo,PurchaseLine2.Amount);
    END;

    [Test]
    [HandlerFunctions(RunTestReportRPH,RunVoucherRegisterRPH,GeneralJournalTemplateMPH)]
    PROCEDURE VerifyVoucherReportAndNarrationsForCashReceiptVoucher@1500006();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      // [SCENARIO 163912] Create Cash Receipt Voucher with Narrations
      // [FEATURE] [Cash Receipt With Test Report and Narrations]
      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Create and Run Test Report.
      CreateCashRcptVoucherWithNarration(GenJournalLine);
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");

      // [THEN] Verified Test Report
      VerifyTestReport;

      // [WHEN] Post Cash Receipt Voucher and Run Print Voucher.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      GenerateVoucherRegReport;

      // [THEN] Verified GL Entry created, Line Narration and the Voucher Report.
      VerifyGeneratedReports(GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(RunTestReportRPH,RunVoucherRegisterRPH,GeneralJournalTemplateMPH)]
    PROCEDURE VerifyVoucherReportAndNarrationsForCashPaymentVoucher@1500004();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 163915] Create Cash Payment Voucher with Narrations
      // [FEATURE] [Cash Payment With Test Report and Narrations]
      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Create Cash Receipt Voucher and  Run Test Report.
      CreateCashPaymentVoucherWithNarration(GenJournalLine);
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");

      // [THEN] Verified Test Report
      VerifyTestReport;

      // [WHEN] Post Cash Receipt Voucher and Print Voucher Report
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      GenerateVoucherRegReport;

      // [THEN] Verified GL Entry created, Line Narration and the Voucher Report.
      VerifyGeneratedReports(-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(RunTestReportRPH,RunVoucherRegisterRPH,GeneralJournalTemplateMPH,VoucherAccountsMPH)]
    PROCEDURE VerifyVoucherReportAndNarrationsForBankReceiptVoucher@1500017();
    VAR
      GenJournalLine@1500001 : Record 81;
      BankAccountNo@1500002 : Code[20];
    BEGIN
      // [SCENARIO 163916] Create Bank Receipt Voucher with Narrations
      // [FEATURE] [Bank Receipt Voucher With Test Report and Narrations]
      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Create Bank Receipt Voucher and Run Test Report.
      CreateBankRcptVoucherWithNarration(GenJournalLine,BankAccountNo);
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");

      // [THEN] Verified Test Report
      VerifyTestReport;

      // [WHEN] Post the Bank Receipt Voucher and Run Print Voucher Report
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      GenerateVoucherRegReport;

      // [THEN] Verified GL Entry created, Line Narration and the Voucher Report.
      VerifyBankLedgerEntry(
        BankAccountNo,GenJournalLine."Cheque No.",GenJournalLine."Document No.",-GenJournalLine."Amount (LCY)",
        GenJournalLine."Cheque Date");
      VerifyGeneratedReports(-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(RunTestReportRPH,RunVoucherRegisterRPH,GeneralJournalTemplateMPH,VoucherAccountsMPH)]
    PROCEDURE VerifyVoucherReportAndNarrationsForBankPaymentVoucher@1500037();
    VAR
      GenJournalBatch@1500001 : Record 232;
      GenJournalLine@1500002 : Record 81;
      BankAccountNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 163917] Create Bank Payment Voucher with Narrations
      // [FEATURE] [Bank Payment Voucher With Test Report and Narrations]
      // [GIVEN] Created Income Tax Setups
      Initialize(FALSE);

      // [WHEN] Create Bank Payment Voucher and Run Test Report.
      CreateBankPmtVoucherWithNarration(GenJournalLine,GenJournalBatch,BankAccountNo);
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");

      // [THEN] Verified Test Report.
      VerifyTestReport;

      // [WHEN] Post the Bank Payment Voucher and Print Voucher Report.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      GenerateVoucherRegReport;

      // [THEN] Verified GL Entry created, Line Narration and the Voucher Report.
      VerifyBankLedgerEntry(
        BankAccountNo,GenJournalLine."Cheque No.",GenJournalLine."Document No.",-GenJournalLine."Amount (LCY)",
        GenJournalLine."Cheque Date");
      VerifyGeneratedReports(GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(RunTestReportRPH,RunVoucherRegisterRPH,GeneralJournalTemplateMPH)]
    PROCEDURE VerifyVoucherReportAndNarrationsForJournalVoucher@1500039();
    VAR
      GenJournalBatch@1500000 : Record 232;
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 163919] Create Journal Voucher with Narrations
      // [FEATURE] [Journal Voucher With Test Report and Narrations]
      // [GIVEN] Created Income Tax Setups.
      Initialize(FALSE);

      // [WHEN] Create Journal Voucher and Run Test Report.
      CreateJournalVoucherWithNarration(GenJournalBatch,GenJournalLine);
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");

      // [THEN] Verified Test Report.
      VerifyTestReport;

      // [WHEN] Post the Journal Voucher and Run Print Voucher Report.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      GenerateVoucherRegReport;

      // [THEN] Verified GL Entry created, Line Narration and the Voucher Report.
      VerifyGeneratedReports(-GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE Initialize@1500033(WarehouseRelatedSetups@1500001 : Boolean);
    VAR
      TaxGroup@1500002 : Record 321;
      WhseEmployee@1500003 : Record 7301;
      isInitialized@1500000 : Boolean;
    BEGIN
      IF isInitialized THEN
        EXIT;
      IF WarehouseRelatedSetups THEN BEGIN
        CreateTaxRelatedSetups(TaxGroup);
        CreateVendorAndLocationWithStateCode;
        CreateItemCharge(TaxGroup);
        LibraryWarehouse.CreateTransferLocations(FromLocation,ToLocation,InTransitLocation);
        FromLocation.VALIDATE("Require Shipment",TRUE);
        FromLocation.VALIDATE("Require Receive",TRUE);
        FromLocation.MODIFY(TRUE);
        LibraryWarehouse.CreateWarehouseEmployee(WhseEmployee,FromLocation.Code,TRUE);
      END ELSE BEGIN
        GeneralLedgerSetup.GET;
        LibraryTCS.CreateIncomeTaxAccountingPeriod;
      END;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitialSetupForFormCode@1500056();
    VAR
      State@1500001 : Record 13762;
    BEGIN
      CreateFormCode(FormCodes);
      CreateStateWithForm(State,FormCodes);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("State Code",State.Code);
      Customer.MODIFY(TRUE);
    END;

    PROCEDURE CreateTaxRelatedSetups@1500076(VAR TaxGroup@1500002 : Record 321);
    VAR
      TaxComponent@1500001 : Record 16479;
      TaxJurisdiction1@1500000 : Record 320;
      TaxJurisdiction2@1500005 : Record 320;
    BEGIN
      WITH LibraryERM DO BEGIN
        CreateState(State);
        CreateTaxComponent(TaxComponent);
        CreateTaxJurisdiction(TaxJurisdiction1);
        TaxJurisdiction1.VALIDATE("State Code",State.Code);
        TaxJurisdiction1.MODIFY(TRUE);
        CreateTaxJurisdiction(TaxJurisdiction2);
        TaxJurisdiction2.VALIDATE("State Code",State.Code);
        TaxJurisdiction2.VALIDATE("Tax Component",TaxComponent.Code);
        TaxJurisdiction2.MODIFY(TRUE);
        CreateTaxAreaAndTaxAreaLine(TaxArea1,TaxJurisdiction1.Code,'',1,TRUE);
        CreateTaxAreaAndTaxAreaLine(TaxArea2,TaxJurisdiction2.Code,'1',2,FALSE);
        CreateTaxDetails(TaxGroup,TaxJurisdiction1.Code,FALSE,FALSE);
        CreateTaxDetails(TaxGroup,TaxJurisdiction2.Code,FALSE,FALSE);
      END;
    END;

    LOCAL PROCEDURE CreateVendorAndLocationWithStateCode@1500075();
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("State Code",State.Code);
      Vendor.VALIDATE("VAT Bus. Posting Group",'');
      Vendor.MODIFY(TRUE);
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("State Code",State.Code);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrderWithPostWarehouseShipmentAndRegisterPick@1500074(VAR TransferHeader@1500006 : Record 5740;VAR TransferLine@1500005 : Record 5741;Item1@1500004 : Record 27;Item2@1500003 : Record 27);
    VAR
      i@1500001 : Integer;
    BEGIN
      WITH LibraryInventory DO BEGIN
        CreateTransferHeader(TransferHeader,FromLocation.Code,ToLocation.Code,InTransitLocation.Code);
        FOR i := 1 TO 8 DO
          CreateTransferLine(TransferHeader,TransferLine,Item1."No.",LibraryRandom.RandDec(100,2));
        CreateTransferLine(TransferHeader,TransferLine,Item2."No.",LibraryRandom.RandDec(110,2));
        CreateTransferLine(TransferHeader,TransferLine,Item2."No.",LibraryRandom.RandDec(10,2));
      END;
      ReleaseTransferOrder(TransferHeader);
      CreateAndPostWarehouseShipment(TransferHeader);
      LibraryInventory.PostTransferHeader(TransferHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@1500073(VAR Item1@1500006 : Record 27;VAR Item2@1500007 : Record 27);
    VAR
      ItemJnlTemplate@1500002 : Record 82;
      ItemJnlBatch@1500003 : Record 233;
      ItemJnlLine1@1500004 : Record 83;
      ItemJnlLine2@1500005 : Record 83;
    BEGIN
      WITH LibraryInventory DO BEGIN
        CreateItem(Item1);
        CreateItem(Item2);
        CreateItemJournalTemplate(ItemJnlTemplate);
        CreateItemJournalBatch(ItemJnlBatch,ItemJnlTemplate.Name);
        CreateItemJournalLine(ItemJnlLine1,ItemJnlTemplate.Name,ItemJnlBatch.Name,
          ItemJnlLine1."Entry Type"::"Positive Adjmt.",Item1."No.",LibraryRandom.RandDec(10000,2));
        ItemJnlLine1.VALIDATE("Location Code",FromLocation.Code);
        ItemJnlLine1.MODIFY(TRUE);
        CreateItemJournalLine(ItemJnlLine2,ItemJnlTemplate.Name,ItemJnlBatch.Name,
          ItemJnlLine2."Entry Type"::"Positive Adjmt.",Item2."No.",LibraryRandom.RandDec(10000,2));
        ItemJnlLine2.VALIDATE("Location Code",FromLocation.Code);
        ItemJnlLine2.MODIFY(TRUE);
        PostItemJournalLine(ItemJnlTemplate.Name,ItemJnlBatch.Name);
      END;
    END;

    LOCAL PROCEDURE CreateAndRegisterPick@1500071(VAR WhseShipmentHeader@1500002 : Record 7320;VAR WhseShipmentLine@1500004 : Record 7321;TransferHeader@1500003 : Record 5740);
    VAR
      WhseActivityHeader@1500000 : Record 5766;
    BEGIN
      GetWarehouseShipment(WhseShipmentHeader,WhseShipmentLine,TransferHeader);
      LibraryWarehouse.CreatePick(WhseShipmentHeader);
      GetWarehouseActivity(WhseActivityHeader,WhseShipmentHeader);
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseShipment@1500070(VAR TransferHeader@1500000 : Record 5740);
    VAR
      WhseShipmentHeader@1500001 : Record 7320;
      WhseShipmentLine@1500003 : Record 7321;
      WhsePostShipShipInvoic@1500002 : Codeunit 5764;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      CreateAndRegisterPick(WhseShipmentHeader,WhseShipmentLine,TransferHeader);
      WhsePostShipShipInvoic.RUN(WhseShipmentLine);
    END;

    LOCAL PROCEDURE CreateItemCharge@1500068(TaxGroup@1500000 : Record 321);
    BEGIN
      LibraryInventory.CreateItemCharge(ItemCharge);
      ItemCharge.VALIDATE("VAT Prod. Posting Group",'');
      ItemCharge.VALIDATE("Tax Group Code",TaxGroup.Code);
      ItemCharge.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceWithItemChargeAssignment@1500067(VAR PurchaseHeader@1500000 : Record 38;TransferHeader@1500005 : Record 5740);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.",1);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(3000,2));
      PurchaseLine.VALIDATE("Tax Area Code",TaxArea1.Code);
      PurchaseLine.MODIFY(TRUE);
      PurchaseLine.CalculateStructures(PurchaseHeader);
      CreateItemChargeAssignmentForTransferReceipt(PurchaseLine,TransferHeader);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentForTransferReceipt@1500066(VAR PurchaseLine@1500000 : Record 39;TransferHeader@1500006 : Record 5740);
    VAR
      ItemChargeAssignmentPurch@1500003 : Record 5805;
      TransferReceiptLine@1500002 : Record 5747;
      ItemChargeAssgntPurch@1500001 : Codeunit 5805;
    BEGIN
      ItemChargeAssignmentPurch.INIT;
      WITH ItemChargeAssignmentPurch DO BEGIN
        "Document Type" := PurchaseLine."Document Type";
        "Document No." := PurchaseLine."Document No.";
        "Document Line No." := PurchaseLine."Line No.";
        "Item Charge No." := PurchaseLine."No.";
        "Unit Cost" := PurchaseLine."Unit Cost";
      END;

      GetTransferReceiptLines(TransferReceiptLine,TransferHeader);
      ItemChargeAssgntPurch.CreateTransferRcptChargeAssgnt(TransferReceiptLine,ItemChargeAssignmentPurch);
      PurchaseLine.ShowItemChargeAssgnt;
    END;

    PROCEDURE ReleaseTransferOrder@1500065(VAR TransferHeader@1500000 : Record 5740);
    VAR
      ReleaseTransferDocument@1500001 : Codeunit 5708;
    BEGIN
      ReleaseTransferDocument.RUN(TransferHeader);
      COMMIT;
    END;

    LOCAL PROCEDURE GetTransferReceiptLines@1500064(VAR TransferReceiptLine@1500000 : Record 5747;TransferHeader@1500001 : Record 5740);
    BEGIN
      TransferReceiptLine.SETRANGE("Transfer Order No.",TransferHeader."No.");
      TransferReceiptLine.FINDSET;
    END;

    LOCAL PROCEDURE GetWarehouseShipment@1500063(VAR WarehouseShipmentHeader@1500002 : Record 7320;VAR WarehouseShipmentLine@1500001 : Record 7321;TransferHeader@1500000 : Record 5740);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source No.",TransferHeader."No.");
      WarehouseShipmentLine.FINDSET;

      WarehouseShipmentHeader.SETRANGE("No.",WarehouseShipmentLine."No.");
      WarehouseShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE GetWarehouseActivity@1500061(VAR WhseActivityHeader@1500000 : Record 5766;WhseShipmentHeader@1500002 : Record 7320);
    VAR
      WhseActivityLine@1500001 : Record 5767;
    BEGIN
      WhseActivityLine.SETRANGE("Whse. Document Type",WhseActivityLine."Whse. Document Type"::Shipment);
      WhseActivityLine.SETRANGE("Whse. Document No.",WhseShipmentHeader."No.");
      WhseActivityLine.FINDFIRST;

      WhseActivityHeader.GET(WhseActivityLine."Activity Type",WhseActivityLine."No.");
    END;

    PROCEDURE CreateStateWithForm@1500045(VAR State@1500001 : Record 13762;FormCodes@1500000 : Record 13756);
    BEGIN
      LibraryERM.CreateState(State);
      CreateStateForms(State.Code,FormCodes.Code);
    END;

    LOCAL PROCEDURE CreateFormCode@1500059(VAR FormCodes@1500000 : Record 13756);
    BEGIN
      WITH FormCodes DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Form Codes"));
        VALIDATE(Description,Code);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithFormCode@1500042(VAR SalesHeader@1500001 : Record 36;VAR SalesLine@1500000 : Record 37;VAR SalesLineWithBlankType@1500004 : Record 37);
    VAR
      Item@1500002 : Record 27;
      RecRef@1500003 : RecordRef;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      WITH SalesLineWithBlankType DO BEGIN
        INIT;
        VALIDATE("Document Type",SalesHeader."Document Type");
        VALIDATE("Document No.",SalesHeader."No.");
        RecRef.GETTABLE(SalesLineWithBlankType);
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,SalesLine.FIELDNO("Line No.")));
        VALIDATE(Description,LibraryUtility.GenerateRandomText(50));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateStateForms@1500048(StateCode@1500000 : Code[10];FormCode@1500001 : Code[10]);
    VAR
      StateForms@1500002 : Record 13767;
    BEGIN
      WITH StateForms DO BEGIN
        INIT;
        VALIDATE(State,StateCode);
        VALIDATE("Form Code",FormCode);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE RunTrialBalanceForAccountTypePosting@1500027(AccountTypeFilterReq@1500000 : Boolean);
    VAR
      GLAccount@1500001 : Record 15;
    BEGIN
      GLAccount.SETFILTER("Date Filter",'%1..%2',WORKDATE,CALCDATE('<1M>',WORKDATE));
      IF AccountTypeFilterReq THEN
        GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      REPORT.RUNMODAL(REPORT::"Trial Balance",TRUE,FALSE,GLAccount);
    END;

    LOCAL PROCEDURE CreateJournalTemplateAndJournalBatch@1500051(VAR GenJournalBatch@1500003 : Record 232;SubType@1500001 : Option);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      Location@1500002 : Record 14;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJournalTemplate.MODIFY(TRUE);
      GenJnlTemplateName := GenJournalTemplate.Name;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplateName);
      GenJournalBatch.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));
      GenJournalBatch.MODIFY(TRUE);
      GenJnlBatchName := GenJournalBatch.Name;
    END;

    LOCAL PROCEDURE CreateGenJnlWithBankCharges@1500003(VAR GenJournalLine@1500001 : Record 81) : Decimal;
    VAR
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::"Bank Payment Voucher");
      DocumentNo2 := CreateGenJournalLine(GenJournalLine,LibraryPurchase.CreateVendorNo,WORKDATE,
          LibraryRandom.RandDec(10000,2),GenJournalLine."Account Type"::Vendor,GenJournalLine."Document Type"::Payment);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
        VALIDATE("Posting Date",WORKDATE);
        MODIFY(TRUE);
      END;
      EXIT(CreateJnlBankCharges(GenJournalLine,CreateBankCharges));
    END;

    LOCAL PROCEDURE CreateBankCharges@1500020() : Code[10];
    VAR
      BankCharge@1500000 : Record 16510;
    BEGIN
      WITH BankCharge DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Bank Charge"));
        VALIDATE(Account,LibraryERM.CreateGLAccountNo);
        INSERT(TRUE);
      END;
      EXIT(BankCharge.Code);
    END;

    LOCAL PROCEDURE CreateJnlBankCharges@1500008(GenJournalLine@1500000 : Record 81;BankCharge@1500001 : Code[10]) : Decimal;
    VAR
      JnlBankCharges@1500002 : Record 16511;
    BEGIN
      WITH JnlBankCharges DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",GenJournalLine."Journal Template Name");
        VALIDATE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        VALIDATE("Line No.",GenJournalLine."Line No.");
        VALIDATE("Bank Charge",BankCharge);
        VALIDATE(Amount,LibraryRandom.RandDec(500,2));
        INSERT(TRUE);
      END;
      EXIT(JnlBankCharges.Amount);
    END;

    LOCAL PROCEDURE CreateCashRcptVoucherWithNarration@1500007(VAR GenJournalLine@1500001 : Record 81);
    VAR
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::"Cash Receipt Voucher");
      CreateCashVoucherLines(GenJournalLine,GenJournalLine."Account Type"::Customer,
        GenJournalLine."Document Type"::Payment,LibraryRandom.RandDecInDecimalRange(10000,6000,2));
      AssignNarrationForVoucher(PAGE::"Cash Receipt Voucher");
    END;

    LOCAL PROCEDURE CreateCashVoucherLines@1500009(VAR GenJournalLine@1500005 : Record 81;AccountType@1500004 : Option;DocumentType@1500000 : Option;Amount@1500007 : Decimal);
    VAR
      GLAccount@1500003 : Record 15;
      Customer@1500006 : Record 18;
      Vendor@1500002 : Record 23;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibrarySales.CreateCustomer(Customer);
      DocumentNo1 :=
        CreateGenJournalLine(
          GenJournalLine,GLAccount."No.",WORKDATE,Amount,
          GenJournalLine."Account Type"::"G/L Account",DocumentType);
      IF AccountType = GenJournalLine."Account Type"::Vendor THEN BEGIN
        CreateGenJournalLine(
          GenJournalLine,LibraryPurchase.CreateVendor(Vendor),WORKDATE,-Amount,AccountType,DocumentType);
        CreateGenJournalLine(
          GenJournalLine,Vendor."No.",CALCDATE('<1D>',WORKDATE),-Amount,AccountType,DocumentType);
      END ELSE BEGIN
        CreateGenJournalLine(
          GenJournalLine,Customer."No.",WORKDATE,-Amount,AccountType,DocumentType);
        CreateGenJournalLine(
          GenJournalLine,Customer."No.",
          CALCDATE('<1D>',WORKDATE),-Amount,AccountType,DocumentType);
      END;
      DocumentNo2 :=
        CreateGenJournalLine(
          GenJournalLine,GLAccount."No.",CALCDATE('<1D>',WORKDATE),Amount,
          GenJournalLine."Account Type"::"G/L Account",DocumentType);
    END;

    LOCAL PROCEDURE CreateBankVoucherLines@1500002(VAR GenJournalLine@1500005 : Record 81;DocumentType@1500000 : Option;AccountType@1500001 : Option;BankAccountNo@1500004 : Code[20];Amount@1500002 : Decimal);
    VAR
      ChequeNo@1500003 : Code[10];
    BEGIN
      DocumentNo1 :=
        CreateGenJournalLine(
          GenJournalLine,BankAccountNo,WORKDATE,-Amount,
          GenJournalLine."Account Type"::"Bank Account",DocumentType);
      ChequeNo := GenJournalLine."Cheque No.";
      IF AccountType = GenJournalLine."Account Type"::Vendor THEN
        DocumentNo2 :=
          CreateGenJournalLine(
            GenJournalLine,LibraryPurchase.CreateVendorNo,WORKDATE,Amount,AccountType,DocumentType)
      ELSE
        DocumentNo2 :=
          CreateGenJournalLine(
            GenJournalLine,LibrarySales.CreateCustomerNo,WORKDATE,Amount,AccountType,DocumentType);
      GenJournalLine.VALIDATE("Cheque No.",ChequeNo);
      GenJournalLine.VALIDATE("Cheque Date",WORKDATE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJournalLine@1500011(VAR GenJournalLine@1500006 : Record 81;AccountNo@1500005 : Code[20];PostingDate@1500004 : Date;Amount@1500002 : Decimal;AccountType@1500003 : Option;DocType@1500000 : Option) : Code[20];
    BEGIN
      LibraryERM.CreateGeneralJnlLine2(
        GenJournalLine,GenJnlTemplateName,GenJnlBatchName,DocType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateCashPaymentVoucherWithNarration@1500010(VAR GenJournalLine@1500001 : Record 81);
    VAR
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::"Cash Payment Voucher");
      CreateCashVoucherLines(GenJournalLine,GenJournalLine."Account Type"::Vendor,
        GenJournalLine."Document Type"::Payment,-LibraryRandom.RandDecInDecimalRange(10000,6000,2));
      AssignNarrationForVoucher(PAGE::"Cash Payment Voucher");
    END;

    LOCAL PROCEDURE CreateBankRcptVoucherWithNarration@1500035(VAR GenJournalLine@1500002 : Record 81;VAR BankAccountNo@1500000 : Code[20]);
    VAR
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::"Bank Receipt Voucher");
      CreateBankAccountandUpdateVoucherAcc(
        BankAccountNo,GenJournalBatch."Location Code",GenJournalBatch."Sub Type"::"Bank Receipt Voucher",
        FORMAT(GenJournalBatch."Sub Type"::"Bank Receipt Voucher"));
      CreateBankVoucherLines(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        BankAccountNo,-LibraryRandom.RandDecInDecimalRange(10000,6000,2));
      AssignNarrationForVoucher(PAGE::"Bank Receipt Voucher");
    END;

    LOCAL PROCEDURE CreateBankAccountandUpdateVoucherAcc@1500044(VAR BankAccno@1500000 : Code[20];LocationCode@1500003 : Code[10];SubType@1500002 : Option;TemplateSubType@1500006 : Text[50]);
    VAR
      VoucherAccount@1500001 : Record 16547;
      CompInfoPage@1500004 : TestPage 1;
      VoucherNoSeries@1500005 : TestPage 16574;
    BEGIN
      BankAccno := LibraryERM.CreateBankAccountNo;
      WITH VoucherAccount DO BEGIN
        INIT;
        VALIDATE("Location code",LocationCode);
        VALIDATE("Sub Type",SubType);
        VALIDATE("Account Type","Account Type"::"Bank Account");
        VALIDATE("Account No.",BankAccno);
        INSERT(TRUE);
      END;
      LibraryVariableStorage.Enqueue(VoucherAccount."Account Type"::"Bank Account");
      LibraryVariableStorage.Enqueue(BankAccno);
      CompInfoPage.OPENEDIT;
      VoucherNoSeries.TRAP;
      CompInfoPage."Page Voucher No. Series".INVOKE;
      VoucherNoSeries.FILTER.SETFILTER("Sub Type",TemplateSubType);
      VoucherNoSeries.FILTER.SETFILTER("Location Code",LocationCode);
      VoucherNoSeries.Action1500002.INVOKE;
    END;

    LOCAL PROCEDURE CreateBankPmtVoucherWithNarration@1500038(VAR GenJournalLine@1500002 : Record 81;VAR GenJournalBatch@1500000 : Record 232;VAR BankAccNo@1500001 : Code[20]);
    BEGIN
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::"Bank Payment Voucher");
      CreateBankAccountandUpdateVoucherAcc(
        BankAccNo,GenJournalBatch."Location Code",GenJournalBatch."Sub Type"::"Bank Payment Voucher",
        FORMAT(GenJournalBatch."Sub Type"::"Bank Payment Voucher"));
      CreateBankVoucherLines(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,
        BankAccNo,LibraryRandom.RandDecInDecimalRange(10000,6000,2));
      AssignNarrationForVoucher(PAGE::"Bank Payment Voucher");
    END;

    LOCAL PROCEDURE CreateJournalVoucherWithNarration@1500043(VAR GenJournalBatch@1500000 : Record 232;VAR GenJournalLine@1500001 : Record 81);
    BEGIN
      CreateJournalTemplateAndJournalBatch(GenJournalBatch,GenJournalBatch."Sub Type"::"Journal Voucher");
      CreateJournalVoucherLine(GenJournalLine,GenJournalLine."Document Type"::Invoice);
      AssignNarrationForVoucher(PAGE::"Journal Voucher");
    END;

    LOCAL PROCEDURE CreateJournalVoucherLine@1500047(VAR GenJournalLine@1500003 : Record 81;DocumentType@1500002 : Option);
    VAR
      GLAccount@1500001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      DocumentNo1 :=
        CreateGenJournalLine(
          GenJournalLine,GLAccount."No.",WORKDATE,LibraryRandom.RandDecInDecimalRange(10000,6000,2),
          GenJournalLine."Account Type"::"G/L Account",DocumentType);
      CreateGenJournalLine(
        GenJournalLine,LibraryPurchase.CreateVendorNo,WORKDATE,-LibraryRandom.RandDecInDecimalRange(10000,6000,2),
        GenJournalLine."Account Type"::Vendor,DocumentType);
      CreateGenJournalLine(
        GenJournalLine,GLAccount."No.",CALCDATE('<1D>',WORKDATE),LibraryRandom.RandDecInDecimalRange(10000,6000,2),
        GenJournalLine."Account Type"::"G/L Account",DocumentType);
      DocumentNo2 :=
        CreateGenJournalLine(
          GenJournalLine,LibraryPurchase.CreateVendorNo,
          CALCDATE('<1D>',WORKDATE),-LibraryRandom.RandDecInDecimalRange(10000,6000,2),
          GenJournalLine."Account Type"::Vendor,DocumentType);
    END;

    LOCAL PROCEDURE AssignNarrationForVoucher@1500085(PageID@1500000 : Integer);
    VAR
      GenJournalLine@1500009 : Record 81;
      BankPaymentVoucher@1500004 : TestPage 16577;
      BankReceiptVoucher@1500005 : TestPage 16569;
      CashPaymentVoucher@1500001 : TestPage 16576;
      CashReceiptVoucher@1500002 : TestPage 16579;
      JournalVoucher@1500003 : TestPage 16571;
      GenJournalNarration@1500006 : TestPage 16572;
      i@1500007 : Integer;
    BEGIN
      COMMIT;
      GenJournalLine.SETRANGE("Journal Template Name",GenJnlTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJnlBatchName);
      i := 1;
      CASE PageID OF
        PAGE::"Bank Receipt Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                LineNarration[i] := LibraryUtility.GenerateRandomText(50);
                BankReceiptVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                BankReceiptVoucher.GOTORECORD(GenJournalLine);
                BankReceiptVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LineNarration[i]);
                BankReceiptVoucher.OK.INVOKE;
                i := i + 1;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Bank Payment Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                LineNarration[i] := LibraryUtility.GenerateRandomText(50);
                BankPaymentVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                BankPaymentVoucher.GOTORECORD(GenJournalLine);
                BankPaymentVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LineNarration[i]);
                BankPaymentVoucher.OK.INVOKE;
                i := i + 1;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Cash Payment Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                LineNarration[i] := LibraryUtility.GenerateRandomText(50);
                CashPaymentVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                CashPaymentVoucher.GOTORECORD(GenJournalLine);
                CashPaymentVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LineNarration[i]);
                CashPaymentVoucher.OK.INVOKE;
                i := i + 1;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Cash Receipt Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                LineNarration[i] := LibraryUtility.GenerateRandomText(50);
                CashReceiptVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                CashReceiptVoucher.GOTORECORD(GenJournalLine);
                CashReceiptVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LineNarration[i]);
                CashReceiptVoucher.OK.INVOKE;
                i := i + 1;
              UNTIL GenJournalLine.NEXT = 0;
          END;
        PAGE::"Journal Voucher":
          BEGIN
            IF GenJournalLine.FINDSET THEN
              REPEAT
                LineNarration[i] := LibraryUtility.GenerateRandomText(50);
                JournalVoucher.OPENEDIT;
                GenJournalNarration.TRAP;
                JournalVoucher.GOTORECORD(GenJournalLine);
                JournalVoucher."Page Gen. Journal Narration".INVOKE;
                GenJournalNarration.Narration.SETVALUE(LineNarration[i]);
                JournalVoucher.OK.INVOKE;
                i := i + 1;
              UNTIL GenJournalLine.NEXT = 0;
          END;
      END;
      AssignVoucherNarrForVoucher(PageID,GenJnlBatchName);
    END;

    LOCAL PROCEDURE AssignVoucherNarrForVoucher@1500103(PageID@1500000 : Integer;GenJnlBatchName@1500007 : Code[20]);
    VAR
      BankPaymentVoucher@1500005 : TestPage 16577;
      BankReceiptVoucher@1500004 : TestPage 16569;
      CashPaymentVoucher@1500003 : TestPage 16576;
      CashReceiptVoucher@1500002 : TestPage 16579;
      JournalVoucher@1500001 : TestPage 16571;
      GenJournalVoucherNarration@1500006 : TestPage 16573;
    BEGIN
      COMMIT;
      VoucherNarration := LibraryUtility.GenerateRandomText(50);
      CASE PageID OF
        PAGE::"Cash Payment Voucher":
          BEGIN
            CashPaymentVoucher.OPENEDIT;
            CashPaymentVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatchName);
            GenJournalVoucherNarration.TRAP;
            CashPaymentVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(VoucherNarration);
          END;
        PAGE::"Bank Payment Voucher":
          BEGIN
            BankPaymentVoucher.OPENEDIT;
            BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatchName);
            GenJournalVoucherNarration.TRAP;
            BankPaymentVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(VoucherNarration);
          END;
        PAGE::"Bank Receipt Voucher":
          BEGIN
            BankReceiptVoucher.OPENEDIT;
            BankReceiptVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatchName);
            GenJournalVoucherNarration.TRAP;
            BankReceiptVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(VoucherNarration);
          END;
        PAGE::"Cash Receipt Voucher":
          BEGIN
            CashReceiptVoucher.OPENEDIT;
            CashReceiptVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatchName);
            GenJournalVoucherNarration.TRAP;
            CashReceiptVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(VoucherNarration);
          END;
        PAGE::"Journal Voucher":
          BEGIN
            JournalVoucher.OPENEDIT;
            JournalVoucher.CurrentJnlBatchName.SETVALUE(GenJnlBatchName);
            GenJournalVoucherNarration.TRAP;
            JournalVoucher."Page Gen. Journal Voucher Narration".INVOKE;
            GenJournalVoucherNarration.Narration.SETVALUE(VoucherNarration);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateItemWithLotTracking@1500030(VAR Item@1500001 : Record 27;VAR Location@1500003 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,FALSE,FALSE);
      LibraryItemTracking.CreateLotItem(Item);
    END;

    LOCAL PROCEDURE CreateAndPostDocWithItemTracking@1500025(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500001 : Record 39;VAR TransferHeader@1500002 : Record 5740;Item@1500003 : Record 27;LocationCode@1500004 : Code[10]) : Decimal;
    VAR
      TransferQuantity@1500005 : Decimal;
    BEGIN
      CreateAndPostPurchaseDocWithItemTracking(PurchaseHeader,PurchaseLine,Item,LocationCode);
      TransferQuantity := LibraryRandom.RandInt(3);
      CreateAndPostTransferOrderWithItemTracking(TransferHeader,Item,LocationCode,TransferQuantity);
      EXIT(TransferQuantity);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocWithItemTracking@1500023(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500001 : Record 39;Item@1500002 : Record 27;LocationCode@1500003 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,
        LibraryPurchase.CreateVendorNo,Item."No.",LibraryRandom.RandInt(5),LocationCode,0D);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10000,2));
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(Item."Lot Nos.");
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
      AssignItemTrackingLinesOnPurchaseOrder(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocWithItemCharge@1500046(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500001 : Record 39;TransferHeader@1500002 : Record 5740;ItemNo@1500004 : Code[20];Quantity@1500003 : Decimal) : Code[20];
    VAR
      ItemCharge@1500006 : Record 5800;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      PurchaseHeader.VALIDATE("Posting Date",WORKDATE);
      PurchaseHeader.VALIDATE("Location Code",TransferHeader."Transfer-to Code");
      PurchaseHeader.MODIFY(TRUE);
      LibraryInventory.CreateItemCharge(ItemCharge);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.",Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10000,2));
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TransferHeader."No.");
      LibraryVariableStorage.Enqueue(ItemNo);
      AssignItemCharge(PurchaseHeader);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE AssignItemTrackingLinesOnPurchaseOrder@1500022(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseOrder@1500001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines."Item Tracking Lines".INVOKE;
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrderWithItemTracking@1500057(VAR TransferHeader@1500000 : Record 5740;Item@1500004 : Record 27;LocationCode@1500006 : Code[10];TransferQuantity@1500007 : Decimal);
    VAR
      InTransitLocation@1500001 : Record 14;
      ToLocation@1500005 : Record 14;
      TransferLine@1500002 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(InTransitLocation);
      LibraryWarehouse.CreateLocationWMS(ToLocation,FALSE,FALSE,FALSE,FALSE,FALSE);
      LibraryInventory.CreateTransferHeader(
        TransferHeader,LocationCode,ToLocation.Code,InTransitLocation.Code);
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,Item."No.",TransferQuantity);
      LibraryVariableStorage.Enqueue(Item."Lot Nos.");
      LibraryVariableStorage.Enqueue(TransferQuantity);
      AssignItemTrackingLinesOnTransferOrder(TransferHeader);
      TransferLine.VALIDATE("Transfer Price",LibraryRandom.RandDec(10000,2));
      TransferLine.MODIFY(TRUE);
      PostTransferOrder(TransferHeader,TransferLine,TransferQuantity);
    END;

    LOCAL PROCEDURE PostTransferOrder@1500041(TransferHeader@1500003 : Record 5740;VAR TransferLine@1500000 : Record 5741;TransferQuantity@1500001 : Decimal);
    BEGIN
      WITH TransferLine DO BEGIN
        VALIDATE("Qty. to Ship",TransferQuantity);
        MODIFY(TRUE);
        LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
        SETRANGE("Document No.","Document No.");
        FINDFIRST;
        VALIDATE("Qty. to Receive",TransferQuantity);
        MODIFY(TRUE);
        LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);
      END;
    END;

    LOCAL PROCEDURE AssignItemTrackingLinesOnTransferOrder@1500062(VAR TransferHeader@1500001 : Record 5740);
    VAR
      TransferOrder@1500000 : TestPage 5740;
    BEGIN
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      TransferOrder.TransferLines.Action1901992804.INVOKE;
    END;

    LOCAL PROCEDURE AssignItemCharge@1500081(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseInvoice@1500001 : TestPage 51;
    BEGIN
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseInvoice.PurchLines.ItemChargeAssignment.INVOKE;
    END;

    LOCAL PROCEDURE GenerateVoucherRegReport@1500053();
    VAR
      GLRegister@1500001 : Record 45;
      GLEntry@1500002 : Record 17;
    BEGIN
      GLRegister.SETRANGE("Journal Batch Name",GenJnlBatchName);
      GLRegister.SETRANGE("Creation Date",TODAY);
      GLRegister.FINDFIRST;
      LibraryVariableStorage.Enqueue(GLRegister."No.");
      GLEntry.SETFILTER("Document No.",'%1..%2',DocumentNo1,DocumentNo2);
      GLEntry.FINDFIRST;
      REPORT.RUN(REPORT::"Voucher Register",TRUE,FALSE,GLEntry);
    END;

    LOCAL PROCEDURE VerifyDocLedgerEntries@1500021(PurchaseLine@1500003 : Record 39;TransferHeader@1500005 : Record 5740;Quantity@1500007 : Decimal;RemQuantity@1500004 : Decimal;TransferQuantity@1500008 : Decimal);
    VAR
      ItemLedgerEntry@1500006 : Record 32;
      ShipmentEntryNo@1500002 : Integer;
      ReceiptEntryNo@1500001 : Integer;
      PurchaseEntryNo@1500000 : Integer;
    BEGIN
      PurchaseEntryNo :=
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Document Type"::"Purchase Receipt",TransferHeader."Transfer-from Code",
          PurchaseLine.Quantity,RemQuantity);
      VerifyValueEntry(
        ItemLedgerEntry."Document Type"::"Purchase Invoice",PurchaseEntryNo,PurchaseLine."Direct Unit Cost" * Quantity);
      ShipmentEntryNo :=
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Document Type"::"Transfer Shipment",TransferHeader."Transfer-from Code",-TransferQuantity,0);
      ReceiptEntryNo :=
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Document Type"::"Transfer Receipt",TransferHeader."Transfer-to Code",TransferQuantity,TransferQuantity);
      VerifyValueEntry(
        ItemLedgerEntry."Document Type"::"Transfer Shipment",ShipmentEntryNo,PurchaseLine."Direct Unit Cost" * -TransferQuantity);
      VerifyValueEntry(
        ItemLedgerEntry."Document Type"::"Transfer Receipt",ReceiptEntryNo,PurchaseLine."Direct Unit Cost" * TransferQuantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@1500028(DocumentType@1500001 : Option;LocationNo@1500002 : Code[20];Quantity@1500003 : Decimal;RemQuantity@1500004 : Decimal) : Integer;
    VAR
      ItemLedgerEntry@1500000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.SETRANGE("Location Code",LocationNo);
      ItemLedgerEntry.FINDFIRST;
      Assert.AreEqual(
        Quantity,ItemLedgerEntry.Quantity,
        STRSUBSTNO(ValidationErr,ItemLedgerEntry.FIELDCAPTION(Quantity),Quantity));
      Assert.AreEqual(
        Quantity,ItemLedgerEntry."Invoiced Quantity",
        STRSUBSTNO(ValidationErr,ItemLedgerEntry.FIELDCAPTION("Invoiced Quantity"),0));
      Assert.AreEqual(
        RemQuantity,ItemLedgerEntry."Remaining Quantity",
        STRSUBSTNO(ValidationErr,ItemLedgerEntry.FIELDCAPTION("Remaining Quantity"),RemQuantity));
      EXIT(ItemLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE VerifyValueEntry@1500112(DocumentType@1500003 : Option;EntryNo@1500000 : Integer;Amount@1500001 : Decimal);
    VAR
      ValueEntry@1500002 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Item Ledger Entry No.",EntryNo);
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.FINDFIRST;
      Assert.AreEqual(
        Amount,ValueEntry."Cost Amount (Actual)",
        STRSUBSTNO(ValidationErr,ValueEntry.FIELDCAPTION("Cost Amount (Actual)"),Amount));
    END;

    LOCAL PROCEDURE VerifyILEAfterCharge@1500069(DocumentType@1500001 : Option;LocationNo@1500002 : Code[20];Amount@1500003 : Decimal) : Integer;
    VAR
      ItemLedgerEntry@1500000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Location Code",LocationNo);
        FINDLAST;
        CALCFIELDS("Cost Amount (Actual)");
        Assert.AreEqual(
          Amount,"Cost Amount (Actual)",
          STRSUBSTNO(CreditAmountErr,FIELDCAPTION("Cost Amount (Actual)"),Amount));
        EXIT("Entry No.");
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500024(DocumentNo@1500111 : Code[20];DocumentType@1500001 : Option;Amount@1500000 : Decimal);
    VAR
      GLEntry@1500114 : Record 17;
      CreditAmount@1500115 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(CreditAmount,Amount,GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryforJnl@1500032(Amount@1500002 : Decimal);
    VAR
      GLEntry@1500000 : Record 17;
    BEGIN
      GLEntry.SETFILTER("Document No.",'%1..%2',DocumentNo1,DocumentNo2);
      GLEntry.FINDSET;
      REPEAT
        IF GLEntry."Credit Amount" = 0 THEN
          Assert.AreNearlyEqual(GLEntry."Debit Amount",Amount,GeneralLedgerSetup."TCS Rounding Precision",
            STRSUBSTNO(CreditAmountErr,GLEntry."Debit Amount",Amount))
        ELSE
          Assert.AreNearlyEqual(GLEntry."Credit Amount",Amount,GeneralLedgerSetup."TCS Rounding Precision",
            STRSUBSTNO(CreditAmountErr,GLEntry."Credit Amount",Amount));
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyBankLedgerEntry@1500034(BankAccountNo@1500000 : Code[20];ChequeNo@1500004 : Code[20];DocumentNo@1500001 : Code[20];ExpectedAmount@1500003 : Decimal;ChequeDate@1500005 : Date);
    VAR
      BankAccountLedgerEntry@1500002 : Record 271;
    BEGIN
      WITH BankAccountLedgerEntry DO BEGIN
        SETRANGE("Bank Account No.",BankAccountNo);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreEqual(Amount,ExpectedAmount,STRSUBSTNO(CreditAmountErr,Amount,ExpectedAmount));
        Assert.AreEqual("Cheque No.",ChequeNo,STRSUBSTNO(ValidationErr,"Cheque No.",ChequeNo));
        Assert.AreEqual("Cheque Date",ChequeDate,STRSUBSTNO(ValidationErr,"Cheque Date",ChequeDate));
      END;
    END;

    LOCAL PROCEDURE VerifyGeneratedReports@1500079(Amount@1500000 : Decimal);
    BEGIN
      VerifyVocherReport;
      VerifyGLEntryforJnl(Amount);
      VerifyNarration;
    END;

    LOCAL PROCEDURE VerifyVoucherRegReport@1500005(AccountNo@1500000 : Code[20];Amount@1500002 : Decimal;BankChargeAmount@1500001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('GLAccName',AccountNo);
      LibraryReportDataset.AssertElementWithValueExists('DebitAmount_GLEntry',Amount);
      LibraryReportDataset.AssertElementWithValueExists('DebitAmount_GLEntry',BankChargeAmount);
      LibraryReportDataset.AssertElementWithValueExists('CreditAmount_GLEntry',Amount + BankChargeAmount);
    END;

    LOCAL PROCEDURE VerifyTestReport@1500072();
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJnlTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJnlBatchName);
      GenJournalLine.FINDSET;
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line__Document_No__',GenJournalLine."Document No.");
        LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line__Amount__LCY__',GenJournalLine."Amount (LCY)");
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVocherReport@1500026();
    VAR
      GLEntry@1500001 : Record 17;
    BEGIN
      GLEntry.SETFILTER("Document No.",'%1..%2',DocumentNo1,DocumentNo2);
      GLEntry.FINDSET;
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        LibraryReportDataset.AssertElementWithValueExists('DocumentNo_GLEntry',GLEntry."Document No.");
        LibraryReportDataset.AssertElementWithValueExists('DebitAmount_GLEntry',GLEntry."Debit Amount");
        LibraryReportDataset.AssertElementWithValueExists('CreditAmount_GLEntry',GLEntry."Credit Amount");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyNarration@1500013();
    VAR
      PostedNarration@1500001 : Record 16548;
      i@1500002 : Integer;
    BEGIN
      i := 1;
      PostedNarration.SETFILTER("Document No.",'%1..%2',DocumentNo1,DocumentNo2);
      PostedNarration.FINDSET;
      REPEAT
        IF PostedNarration."Entry No." = 0 THEN
          Assert.AreEqual(PostedNarration.Narration,VoucherNarration,
            STRSUBSTNO(NarrationErr,PostedNarration.Narration,VoucherNarration))
        ELSE BEGIN
          Assert.AreEqual(PostedNarration.Narration,LineNarration[i],
            STRSUBSTNO(NarrationErr,PostedNarration.Narration,LineNarration[i]));
          i += 1;
        END;
      UNTIL PostedNarration.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTrialBalanceReport@1500040();
    VAR
      GLAccount@1500000 : Record 15;
    BEGIN
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETFILTER("Date Filter",'%1..%2',WORKDATE,CALCDATE('<1M>',WORKDATE));
      GLAccount.FINDFIRST;
      GLAccount.CALCFIELDS("Debit Amount","Credit Amount");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TotalDebitNetChange',GLAccount."Debit Amount");
      LibraryReportDataset.AssertElementWithValueExists('TotalCreditNetChange',GLAccount."Credit Amount");
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentMPH@1500600(VAR ItemChargeAssignmentPurch@1500700 : TestPage 5805);
    BEGIN
      ItemChargeAssignmentPurch.GetTransferReceiptLines.INVOKE;
      ItemChargeAssignmentPurch.SuggestItemChargeAssignment.INVOKE;
      ItemChargeAssignmentPurch.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesMPH@1500014(VAR ItemTrackingLines@1500000 : TestPage 6510);
    VAR
      LotNo@1500002 : Variant;
      BaseQuantity@1500001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(LotNo);
      BaseQuantity := LibraryVariableStorage.DequeueDecimal;
      ItemTrackingLines."Lot No.".SETVALUE(LotNo);
      ItemTrackingLines."Quantity (Base)".SETVALUE(BaseQuantity);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseTransferReceiptLinesMPH@1500016(VAR PostedTransferReceiptLines@1500000 : TestPage 5759);
    VAR
      TransferReceiptLine@1500001 : Record 5747;
      ItemNo@1500002 : Variant;
      DocumentNo@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      LibraryVariableStorage.Dequeue(ItemNo);
      TransferReceiptLine.SETRANGE("Transfer Order No.",DocumentNo);
      TransferReceiptLine.SETRANGE("Item No.",ItemNo);
      TransferReceiptLine.FINDLAST;
      PostedTransferReceiptLines.GOTORECORD(TransferReceiptLine);
      PostedTransferReceiptLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateMPH@1500029(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GenJnlTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VoucherAccountsMPH@1500177(VAR VoucherAccounts@1500000 : TestPage 16575);
    VAR
      GLAccountType@1500001 : Variant;
      AccountNo@1500002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GLAccountType);
      LibraryVariableStorage.Dequeue(AccountNo);
      VoucherAccounts."Account Type".SETVALUE(GLAccountType);
      VoucherAccounts."Account No.".SETVALUE(AccountNo);
    END;

    [RequestPageHandler]
    PROCEDURE RunTestReportRPH@1500001(VAR GeneralJournalTest@1500001 : TestRequestPage 2);
    BEGIN
      GeneralJournalTest."Gen. Journal Line".SETFILTER("Journal Template Name",GenJnlTemplateName);
      GeneralJournalTest."Gen. Journal Line".SETFILTER("Journal Batch Name",GenJnlBatchName);
      GeneralJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RunVoucherRegisterRPH@1500049(VAR VoucherRegister@1500000 : TestRequestPage 16564);
    VAR
      EntryNo@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(EntryNo);
      VoucherRegister.Control1500000.SETVALUE(EntryNo);
      VoucherRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE TrialBalanceRequestHandler@1500031(VAR TrialBalance@1500001 : TestRequestPage 6);
    VAR
      PrintToExcel@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PrintToExcel);
      TrialBalance.PrintToExcel.SETVALUE(PrintToExcel);
      TrialBalance.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentHandler@1500054(VAR ItemChargeAssignmentPurch@1500000 : TestPage 5805);
    BEGIN
      ItemChargeAssignmentPurch.SuggestItemChargeAssignment.INVOKE;
      ItemChargeAssignmentPurch.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE ItemChargeAssignMenuEquallyHandler@1500052(Option@1500002 : Text[1024];VAR ItemChargeAssignmentChoice@1500001 : Integer;Instruction@1500000 : Text[1024]);
    BEGIN
      ItemChargeAssignmentChoice := 1;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500050(Message@1500000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

