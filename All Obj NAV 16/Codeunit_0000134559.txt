OBJECT Codeunit 134559 ERM Cash Flow Navigate
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryCashFlowForecast@1003 : Codeunit 131331;
      CFHelper@1007 : Codeunit 131332;
      LibraryUtility@1009 : Codeunit 131000;
      ExpectedNo@1004 : Code[20];
      ExpectedBudgetName@1008 : Code[10];
      MaxSourceType@1006 : Integer;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    BEGIN
      MaxSourceType := 11;
    END;

    [Test]
    [HandlerFunctions(GLAccountPageHandler)]
    PROCEDURE NavigateJournalLiquidFunds@1();
    VAR
      CFAccount@1000 : Record 841;
      GLAccount@1001 : Record 15;
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1005 : TestPage 841;
    BEGIN
      Initialize;

      CFHelper.FindCFLiquidFundAccount(CFAccount);
      CFHelper.FindFirstGLAccFromCFAcc(GLAccount,CFAccount);
      GLAccount.NEXT(LibraryRandom.RandInt(GLAccount.COUNT));
      ExpectedNo := GLAccount."No.";

      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Liquid Funds",GLAccount."No.");

      // Navigate
      CashFlowJournal.OPENEDIT;
      CashFlowJournal.ShowSource.INVOKE;
      CashFlowJournal.CLOSE;
      // Verification is done in modal handler function
    END;

    [Test]
    PROCEDURE NavigateJournalLiquidFundsNonExistingAccNo@29();
    VAR
      CFWorksheetLine@1004 : Record 846;
      GLAccount@1001 : Record 15;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',GLAccount.TABLECAPTION,CFWorksheetLine."Source Type"::"Liquid Funds");
    END;

    [Test]
    [HandlerFunctions(GLBudgetPageHandler)]
    PROCEDURE NavigateJournalGLBudget@38();
    VAR
      CashFlowForecast@1001 : Record 840;
      CFWorksheetLine@1002 : Record 846;
      GLBudgetEntry@1005 : Record 96;
      CashFlowJournal@1003 : TestPage 841;
    BEGIN
      // Suggest lines should set source type accordingly

      // Setup
      Initialize;
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CashFlowForecast.VALIDATE("G/L Budget From",WORKDATE);
      CashFlowForecast.VALIDATE("G/L Budget To",WORKDATE);
      CashFlowForecast.MODIFY(TRUE);
      CFHelper.CreateBudgetEntry(GLBudgetEntry,CashFlowForecast."G/L Budget To");
      ExpectedNo := GLBudgetEntry."G/L Account No.";
      ExpectedBudgetName := GLBudgetEntry."Budget Name";

      // Exercise
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"G/L Budget",GLBudgetEntry."G/L Account No.");
      CFWorksheetLine.VALIDATE("G/L Budget Name",GLBudgetEntry."Budget Name");
      CFWorksheetLine.MODIFY(TRUE);

      // Navigate
      CashFlowJournal.OPENEDIT;
      CashFlowJournal.ShowSource.INVOKE;
      CashFlowJournal.CLOSE;
      // Verification is done in modal handler function
    END;

    [Test]
    PROCEDURE NavigateJournalGLBudgetNonExistingAccNo@36();
    VAR
      CFWorksheetLine@1004 : Record 846;
      GLAccount@1001 : Record 15;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',GLAccount.TABLECAPTION,CFWorksheetLine."Source Type"::"G/L Budget");
    END;

    [Test]
    PROCEDURE NavigateJournalNonExistingBudgetName@48();
    VAR
      CFWorksheetLine@1002 : Record 846;
      GLAccount@1000 : Record 15;
      GLBudgetName@1004 : Record 95;
      CashFlowJournal@1001 : TestPage 841;
      NonExistingName@1003 : Code[10];
    BEGIN
      // Setup
      NonExistingName :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GLBudgetName.FIELDNO(Name),DATABASE::"G/L Budget Name"),1,MAXSTRLEN(GLBudgetName.Name));
      GLAccount.FINDSET;
      GLAccount.NEXT(LibraryRandom.RandInt(GLAccount.COUNT));
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"G/L Budget",GLAccount."No.");
      CFWorksheetLine."G/L Budget Name" := NonExistingName;
      CFWorksheetLine.MODIFY;

      // Exercise
      CashFlowJournal.OPENVIEW;
      ASSERTERROR CashFlowJournal.ShowSource.INVOKE;

      // Verify
      Assert.ExpectedError(
        STRSUBSTNO('Source data does not exist for %1: %2.',CFWorksheetLine.FIELDCAPTION("G/L Budget Name"),NonExistingName));

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CustomerLedgerEntriesPageHandler)]
    PROCEDURE NavigateJournalCustLE@4();
    VAR
      CustLedgerEntry@1000 : Record 21;
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1005 : TestPage 841;
    BEGIN
      Initialize;

      IF CustLedgerEntry.COUNT = 0 THEN BEGIN
        CustLedgerEntry.INIT;
        CustLedgerEntry."Document No." := FORMAT(CFWorksheetLine."Source Type"::Receivables);
        CustLedgerEntry.INSERT;
      END;
      CustLedgerEntry.FINDSET;
      CustLedgerEntry.NEXT(LibraryRandom.RandInt(CustLedgerEntry.COUNT));
      ExpectedNo := CustLedgerEntry."Document No.";

      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::Receivables,CustLedgerEntry."Document No.");

      // Navigate
      CashFlowJournal.OPENEDIT;
      CashFlowJournal.ShowSource.INVOKE;
      CashFlowJournal.CLOSE;
      // Verification is done in modal handler function
    END;

    [Test]
    PROCEDURE NavigateJournalCustLENonExistingDocNo@33();
    VAR
      CFWorksheetLine@1004 : Record 846;
      CustLedgEntry@1000 : Record 21;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo(
        CustLedgEntry.TABLECAPTION,CustLedgEntry.FIELDCAPTION("Document No."),CFWorksheetLine."Source Type"::Receivables);
    END;

    [Test]
    [HandlerFunctions(VendorLedgerEntriesPageHandler)]
    PROCEDURE NavigateJournalVendLE@23();
    VAR
      VendLedgEntry@1000 : Record 25;
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1005 : TestPage 841;
    BEGIN
      Initialize;
      IF VendLedgEntry.COUNT = 0 THEN BEGIN
        VendLedgEntry.INIT;
        VendLedgEntry."Document No." := FORMAT(CFWorksheetLine."Source Type"::Payables);
        VendLedgEntry.INSERT;
      END;
      VendLedgEntry.FINDSET;
      VendLedgEntry.NEXT(LibraryRandom.RandInt(VendLedgEntry.COUNT));
      ExpectedNo := VendLedgEntry."Document No.";

      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::Payables,VendLedgEntry."Document No.");

      // Navigate
      CashFlowJournal.OPENEDIT;
      CashFlowJournal.ShowSource.INVOKE;
      CashFlowJournal.CLOSE;

      // Verification is done in modal handler function
    END;

    [Test]
    PROCEDURE NavigateJournalVendLENonExistingDocNo@34();
    VAR
      CFWorksheetLine@1004 : Record 846;
      VendLedgEntry@1000 : Record 25;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo(
        VendLedgEntry.TABLECAPTION,VendLedgEntry.FIELDCAPTION("Document No."),CFWorksheetLine."Source Type"::Payables);
    END;

    [Test]
    [HandlerFunctions(SalesOrderPageHandler)]
    PROCEDURE NavigateJournalSO@3();
    VAR
      SalesHeader@1001 : Record 36;
      CFWorksheetLine@1006 : Record 846;
      CashFlowJournal@1003 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader.INSERT(TRUE);
      ExpectedNo := SalesHeader."No.";
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Sales Orders",SalesHeader."No.");

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in SalesOrderPageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalSOToNonExistingSO@5();
    VAR
      CFWorksheetLine@1004 : Record 846;
      SalesOrder@1000 : Page 42;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',SalesOrder.CAPTION,CFWorksheetLine."Source Type"::"Sales Orders");
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderPageHandler)]
    PROCEDURE NavigateJournalPO@10();
    VAR
      PurchaseHeader@1001 : Record 38;
      CFWorksheetLine@1006 : Record 846;
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Order;
      PurchaseHeader.INSERT(TRUE);
      ExpectedNo := PurchaseHeader."No.";
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Purchase Orders",PurchaseHeader."No.");

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in PurchaseOrderPageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalPOToNonExistingPO@6();
    VAR
      CFWorksheetLine@1000 : Record 846;
      PurchaseOrder@1001 : Page 50;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',PurchaseOrder.CAPTION,CFWorksheetLine."Source Type"::"Purchase Orders");
    END;

    [Test]
    [HandlerFunctions(ServiceOrderPageHandler)]
    PROCEDURE NavigateJournalServO@15();
    VAR
      ServiceHeader@1001 : Record 5900;
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      ServiceHeader.INIT;
      ServiceHeader."Document Type" := ServiceHeader."Document Type"::Order;
      ServiceHeader.INSERT(TRUE);
      ExpectedNo := ServiceHeader."No.";
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Service Orders",ServiceHeader."No.");

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in ServiceOrderPageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalServOToNonExistingServO@13();
    VAR
      CFWorksheetLine@1004 : Record 846;
      ServiceOrder@1001 : Page 5900;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',ServiceOrder.CAPTION,
        CFWorksheetLine."Source Type"::"Service Orders");
    END;

    LOCAL PROCEDURE NavigateJournalNonExistingSourceNo@19(SourceTableCaption@1005 : Text[250];SourceCaption@1004 : Text[250];SourceType@1000 : Option);
    VAR
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1001 : TestPage 841;
      NonExistingNo@1003 : Code[20];
    BEGIN
      // Setup
      NonExistingNo := 'notexist';
      InsertJournalLine(CFWorksheetLine,SourceType,'');
      CFWorksheetLine."Source No." := NonExistingNo;
      CFWorksheetLine.MODIFY;

      // Exercise
      CashFlowJournal.OPENVIEW;
      ASSERTERROR CashFlowJournal.ShowSource.INVOKE;

      // Verify
      IF SourceTableCaption = '' THEN
        Assert.ExpectedError(
          STRSUBSTNO('Source data does not exist for %1: %2.',SourceCaption,NonExistingNo))
      ELSE
        Assert.ExpectedError(
          STRSUBSTNO('Source data does not exist in %1 for %2: %3.',SourceTableCaption,SourceCaption,NonExistingNo));

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CFManualRevenuePageHandler)]
    PROCEDURE NavigateJournalManRevenue@18();
    VAR
      CFAccount@1001 : Record 841;
      CFManualRevenue@1002 : Record 849;
      CFWorksheetLine@1006 : Record 846;
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      LibraryCashFlowForecast.FindCashFlowAccount(CFAccount);
      LibraryCashFlowForecast.CreateManualLineRevenue(CFManualRevenue,CFAccount."No.");
      ExpectedNo := CFManualRevenue.Code;
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Cash Flow Manual Revenue",ExpectedNo);

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in CFManualRevenuePageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalManRevenueToNonExistingManRevenue@7();
    VAR
      CFWorksheetLine@1004 : Record 846;
      CFManualRevenues@1000 : Page 857;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',CFManualRevenues.CAPTION,
        CFWorksheetLine."Source Type"::"Cash Flow Manual Revenue");
    END;

    [Test]
    [HandlerFunctions(CFManualExpensePageHandler)]
    PROCEDURE NavigateJournalManExpense@40();
    VAR
      CFAccount@1001 : Record 841;
      CFManualExpense@1002 : Record 850;
      CFWorksheetLine@1006 : Record 846;
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      LibraryCashFlowForecast.FindCashFlowAccount(CFAccount);
      LibraryCashFlowForecast.CreateManualLinePayment(CFManualExpense,CFAccount."No.");
      ExpectedNo := CFManualExpense.Code;
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Cash Flow Manual Expense",ExpectedNo);

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in CFManualExpensePageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalManExpenseToNonExistingManExpense@39();
    VAR
      CFWorksheetLine@1004 : Record 846;
      CFManualExpenses@1000 : Page 859;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo('',CFManualExpenses.CAPTION,
        CFWorksheetLine."Source Type"::"Cash Flow Manual Expense");
    END;

    [Test]
    [HandlerFunctions(FixedAssetCardPageHandler)]
    PROCEDURE NavigateJournalBudgetedFA@30();
    VAR
      FixedAsset@1002 : Record 5600;
      CFWorksheetLine@1006 : Record 846;
      LibraryFixedAsset@1003 : Codeunit 131330;
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      ExpectedNo := FixedAsset."No.";
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Fixed Assets Budget",ExpectedNo);

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in FixedAssetCardPageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalBudgetedFAToNonExistingFA@21();
    VAR
      CFWorksheetLine@1004 : Record 846;
      FixedAsset@1000 : Record 5600;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo(FixedAsset.TABLECAPTION,FixedAsset.FIELDCAPTION("No."),
        CFWorksheetLine."Source Type"::"Fixed Assets Budget");
    END;

    [Test]
    [HandlerFunctions(FixedAssetCardPageHandler)]
    PROCEDURE NavigateJournalSaleFA@46();
    VAR
      FixedAsset@1002 : Record 5600;
      CFWorksheetLine@1006 : Record 846;
      LibraryFixedAsset@1003 : Codeunit 131330;
      CashFlowJournal@1000 : TestPage 841;
    BEGIN
      // Setup
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      ExpectedNo := FixedAsset."No.";
      InsertJournalLine(CFWorksheetLine,CFWorksheetLine."Source Type"::"Fixed Assets Disposal",ExpectedNo);

      // Exercise
      CashFlowJournal.OPENVIEW;
      CashFlowJournal.ShowSource.INVOKE;

      // Verify - done in FixedAssetCardPageHandler

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalSaleFAToNonExistingFA@45();
    VAR
      CFWorksheetLine@1004 : Record 846;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateJournalNonExistingSourceNo(FixedAsset.TABLECAPTION,FixedAsset.FIELDCAPTION("No."),
        CFWorksheetLine."Source Type"::"Fixed Assets Budget");
    END;

    [Test]
    [HandlerFunctions(SalesOrderPageHandler)]
    PROCEDURE NavigateEntriesSO@22();
    VAR
      SalesHeader@1001 : Record 36;
      CFForecastEntry@1006 : Record 847;
      CFLedgerEntries@1007 : TestPage 850;
    BEGIN
      // Setup
      Initialize;
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader.INSERT(TRUE);
      ExpectedNo := SalesHeader."No.";
      InsertEntryLine(CFForecastEntry,CFForecastEntry."Source Type"::"Sales Order",SalesHeader."No.");

      // Exercise
      CFLedgerEntries.OPENVIEW;
      CFLedgerEntries.ShowSource.INVOKE;

      // Verify - done in SalesOrderPageHandler

      // Tear down
      CFLedgerEntries.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateEntriesSOToNonExistingSO@20();
    VAR
      CFForecastEntry@1004 : Record 847;
    BEGIN
      // Setup
      Initialize;

      // Exercise and Verify
      NavigateEntriesNonExistingSourceNo(FORMAT(CFForecastEntry."Source Type"::"Sales Order"),
        CFForecastEntry."Source Type"::"Sales Order");
    END;

    [Test]
    PROCEDURE NavigateJournalBlankBudgetName@37();
    VAR
      CFWorksheetLine@1002 : Record 846;
      GLAccount@1000 : Record 15;
      CashFlowJournal@1001 : TestPage 841;
    BEGIN
      InsertJournalLine(
        CFWorksheetLine,CFWorksheetLine."Source Type"::"G/L Budget",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GLAccount.FIELDNO("No."),DATABASE::"G/L Account"),1,MAXSTRLEN(CFWorksheetLine."Source No.")));
      CFWorksheetLine."G/L Budget Name" := '';
      CFWorksheetLine.MODIFY;

      // Navigate
      CashFlowJournal.OPENEDIT;
      ASSERTERROR CashFlowJournal.ShowSource.INVOKE;
      Assert.ExpectedError(STRSUBSTNO('%1 must have a value',CFWorksheetLine.FIELDCAPTION("G/L Budget Name")));

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalBlankSourceNo@2();
    VAR
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1001 : TestPage 841;
    BEGIN
      InsertJournalLine(CFWorksheetLine,LibraryRandom.RandIntInRange(1,MaxSourceType),'');

      // Navigate
      CashFlowJournal.OPENEDIT;
      ASSERTERROR CashFlowJournal.ShowSource.INVOKE;
      Assert.ExpectedError('Source No. must have a value');

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateJournalBlankSourceType@31();
    VAR
      CFWorksheetLine@1002 : Record 846;
      CashFlowJournal@1001 : TestPage 841;
    BEGIN
      InsertJournalLine(CFWorksheetLine,0,'');

      // Navigate
      CashFlowJournal.OPENEDIT;
      ASSERTERROR CashFlowJournal.ShowSource.INVOKE;
      Assert.ExpectedError('Source Type must not be   in Cash Flow');

      // Tear down
      CashFlowJournal.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateEntriesBlankBudgetName@41();
    VAR
      CFForecastEntry@1002 : Record 847;
      GLAccount@1000 : Record 15;
      CFLedgerEntries@1001 : TestPage 850;
    BEGIN
      InsertEntryLine(
        CFForecastEntry,CFForecastEntry."Source Type"::"G/L Budget",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GLAccount.FIELDNO("No."),DATABASE::"G/L Account"),1,MAXSTRLEN(CFForecastEntry."Source No.")));

      // Navigate
      CFLedgerEntries.OPENVIEW;
      ASSERTERROR CFLedgerEntries.ShowSource.INVOKE;
      Assert.ExpectedError(STRSUBSTNO('%1 must have a value',CFForecastEntry.FIELDCAPTION("G/L Budget Name")));

      // Tear down
      CFLedgerEntries.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateEntriesBlankSourceNo@28();
    VAR
      CFForecastEntry@1002 : Record 847;
      CFLedgerEntries@1001 : TestPage 850;
    BEGIN
      InsertEntryLine(CFForecastEntry,LibraryRandom.RandIntInRange(1,MaxSourceType),'');

      // Navigate
      CFLedgerEntries.OPENVIEW;
      ASSERTERROR CFLedgerEntries.ShowSource.INVOKE;
      Assert.ExpectedError('Source No. must have a value');

      // Tear down
      CFLedgerEntries.CLOSE;
    END;

    [Test]
    PROCEDURE NavigateEntriesBlankSourceType@32();
    VAR
      CFForecastEntry@1002 : Record 847;
      CFLedgerEntries@1001 : TestPage 850;
    BEGIN
      InsertEntryLine(CFForecastEntry,0,'');

      // Navigate
      CFLedgerEntries.OPENVIEW;
      ASSERTERROR CFLedgerEntries.ShowSource.INVOKE;
      Assert.ExpectedError('Source Type must not be   in Cash Flow');

      // Tear down
      CFLedgerEntries.CLOSE;
    END;

    LOCAL PROCEDURE NavigateEntriesNonExistingSourceNo@27(SourceCaption@1004 : Text;SourceType@1000 : Option);
    VAR
      CFForecastEntry@1002 : Record 847;
      CFLedgerEntries@1001 : TestPage 850;
      NonExistingNo@1003 : Code[20];
    BEGIN
      // Setup
      NonExistingNo := 'notexist';
      InsertEntryLine(CFForecastEntry,SourceType,NonExistingNo);

      // Exercise
      CFLedgerEntries.OPENVIEW;
      ASSERTERROR CFLedgerEntries.ShowSource.INVOKE;

      // Verify
      Assert.ExpectedError(
        STRSUBSTNO('Source data does not exist for %1: %2.',SourceCaption,NonExistingNo));

      // Tear down
      CFLedgerEntries.CLOSE;
    END;

    LOCAL PROCEDURE InsertJournalLine@16(VAR CFWorksheetLine@1007 : Record 846;SourceType@1005 : Option;SourceNo@1006 : Code[20]);
    VAR
      CashFlowForecast@1003 : Record 840;
      CashFlowAccount@1002 : Record 841;
      GLBudgetName@1000 : Record 95;
    BEGIN
      // Empty all journal lines
      CFWorksheetLine.DELETEALL;

      // Find data
      LibraryCashFlowForecast.FindCashFlowCard(CashFlowForecast);
      LibraryCashFlowForecast.FindCashFlowAccount(CashFlowAccount);
      LibraryCashFlowForecast.CreateJournalLine(CFWorksheetLine,CashFlowForecast."No.",CashFlowAccount."No.");

      // Insert into journal
      CFWorksheetLine.VALIDATE("Source Type",SourceType);
      CFWorksheetLine.VALIDATE("Source No.",SourceNo);
      IF CFWorksheetLine."Source Type" = CFWorksheetLine."Source Type"::"G/L Budget" THEN BEGIN
        GLBudgetName.FINDSET;
        GLBudgetName.NEXT(LibraryRandom.RandInt(GLBudgetName.COUNT));
        CFWorksheetLine."G/L Budget Name" := GLBudgetName.Name;
      END;
      CFWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertEntryLine@24(VAR CFForecastEntry@1007 : Record 847;SourceType@1005 : Option;SourceNo@1006 : Code[20]);
    BEGIN
      CFForecastEntry.DELETEALL;

      WITH CFForecastEntry DO BEGIN
        INIT;
        "Entry No." := 1;
        "Source No." := SourceNo;
        "Source Type" := SourceType;
        INSERT;
      END;
    END;

    [PageHandler]
    PROCEDURE CustomerLedgerEntriesPageHandler@9(VAR CustomerLedgerEntries@1000 : TestPage 25);
    BEGIN
      Assert.AreEqual(ExpectedNo,CustomerLedgerEntries."Document No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE VendorLedgerEntriesPageHandler@25(VAR VendorLedgerEntries@1000 : TestPage 29);
    BEGIN
      Assert.AreEqual(ExpectedNo,VendorLedgerEntries."Document No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE SalesOrderPageHandler@12(VAR SalesOrder@1000 : TestPage 42);
    BEGIN
      Assert.AreEqual(ExpectedNo,SalesOrder."No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE PurchaseOrderPageHandler@11(VAR PurchaseOrder@1000 : TestPage 50);
    BEGIN
      Assert.AreEqual(ExpectedNo,PurchaseOrder."No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE ServiceOrderPageHandler@17(VAR ServiceOrder@1000 : TestPage 5900);
    BEGIN
      Assert.AreEqual(ExpectedNo,ServiceOrder."No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE GLAccountPageHandler@14(VAR ChartOfAccounts@1000 : TestPage 16);
    BEGIN
      Assert.AreEqual(ExpectedNo,ChartOfAccounts."No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE CFManualRevenuePageHandler@26(VAR CFManualRevenues@1000 : TestPage 857);
    BEGIN
      Assert.AreEqual(ExpectedNo,CFManualRevenues.Code.VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE CFManualExpensePageHandler@43(VAR CFManualExpenses@1000 : TestPage 859);
    BEGIN
      Assert.AreEqual(ExpectedNo,CFManualExpenses.Code.VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE FixedAssetCardPageHandler@42(VAR FixedAssetCard@1000 : TestPage 5600);
    BEGIN
      Assert.AreEqual(ExpectedNo,FixedAssetCard."No.".VALUE,'Incorrect source view opened');
    END;

    [PageHandler]
    PROCEDURE GLBudgetPageHandler@35(VAR Budget@1000 : TestPage 113);
    BEGIN
      Assert.AreEqual(ExpectedBudgetName,Budget.BudgetName.VALUE,'Incorrect source view opened');
      Assert.AreEqual(ExpectedNo,Budget.MatrixForm.Code.VALUE,'Incorrect source view opened');
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow] [Show Source]
    }
    END.
  }
}

